uint64_t sub_22E73BCF4(_QWORD **a1, uint64_t a2)
{
  llvm::raw_ostream **v4;
  _QWORD *v5;
  unsigned int v6;
  int v7;
  __int16 v8;
  uint64_t v9;
  const char *v10;
  char *v11;
  unsigned int v12;
  int v13;
  const char *v16;
  char v17;
  llvm::raw_ostream **v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  const char *v22;
  const char *v23;
  char v24;
  int v25;
  llvm::raw_ostream **v26;
  int v27;
  __int16 v28;
  uint64_t v29;
  const char *v30;
  char v31;
  llvm::raw_ostream **v32;
  int v33;
  __int16 v34;
  uint64_t v35;
  const char *v36;
  _QWORD *v37;
  int v38;
  unsigned int v39;
  int v40;
  const char *v43;
  char v44;
  llvm::raw_ostream **v45;
  int v46;
  __int16 v47;
  uint64_t v48;
  const char *v49;
  _QWORD *v50;
  int v51;
  unsigned int v52;
  int v53;
  const char *v56;
  char v57;
  llvm::raw_ostream **v58;
  int v59;
  __int16 v60;
  uint64_t v61;
  const char *v62;
  _QWORD *v63;
  int v64;
  unsigned int v65;
  int v66;
  const char *v69;
  char v70;
  llvm::raw_ostream **v71;
  int v72;
  __int16 v73;
  uint64_t v74;
  const char *v75;
  const char *v76;
  char v77;
  llvm::raw_ostream **v78;
  int v79;
  __int16 v80;
  uint64_t v81;
  const char *v82;
  char *v83;
  unsigned int v84;
  int v85;
  const char *v88;
  char v89;
  llvm::raw_ostream **v90;
  int v91;
  __int16 v92;
  uint64_t v93;
  const char *v94;
  char *v95;
  unsigned int v96;
  int v97;
  const char *v100;
  char v101;
  llvm::raw_ostream **v102;
  int v103;
  __int16 v104;
  uint64_t v105;
  const char *v106;
  char *v107;
  unsigned int v108;
  int v109;
  const char *v112;
  char v113;
  llvm::raw_ostream **v114;
  int v115;
  __int16 v116;
  uint64_t v117;
  const char *v118;
  unsigned __int8 *v119;
  unsigned int v120;
  int v121;
  const char *v124;
  char v125;
  _QWORD v127[4];
  char v128;
  char v129;
  const char *v130;
  uint64_t v131;
  const char *v132;
  __int16 v133;

  v5 = *a1;
  v4 = (llvm::raw_ostream **)a1[1];
  v6 = *((unsigned __int8 *)v5 + 95);
  v7 = *(unsigned __int8 *)(a2 + 32);
  if (v7 == 1)
  {
    v130 = "BOOL_LOCK_FREE";
    v8 = 259;
    goto LABEL_5;
  }
  if (!*(_BYTE *)(a2 + 32))
  {
    v8 = 256;
LABEL_5:
    v133 = v8;
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(a2 + 8);
  if (*(_BYTE *)(a2 + 33) == 1)
  {
    v10 = *(const char **)a2;
  }
  else
  {
    LOBYTE(v7) = 2;
    v10 = (const char *)a2;
  }
  v130 = v10;
  v131 = v9;
  v132 = "BOOL_LOCK_FREE";
  LOBYTE(v133) = v7;
  HIBYTE(v133) = 3;
LABEL_10:
  v11 = (char *)v5 + *(_QWORD *)(*v5 - 24);
  v12 = v11[2];
  v13 = v11[3];
  if ((v12 & (v12 - 1)) != 0 || v12 != v13 || v12 > v6)
    v16 = "1";
  else
    v16 = "2";
  v17 = 1;
  v129 = 1;
  if (*v16)
  {
    v127[0] = v16;
    v17 = 3;
  }
  v128 = v17;
  sub_22E7333BC(v4, (llvm::Twine *)&v130, (llvm::Twine *)v127);
  v18 = (llvm::raw_ostream **)a1[1];
  v19 = *(unsigned __int8 *)(a2 + 32);
  if (v19 == 1)
  {
    v130 = "CHAR_LOCK_FREE";
    v20 = 259;
    goto LABEL_25;
  }
  if (!*(_BYTE *)(a2 + 32))
  {
    v20 = 256;
LABEL_25:
    v133 = v20;
    goto LABEL_30;
  }
  v21 = *(_QWORD *)(a2 + 8);
  if (*(_BYTE *)(a2 + 33) == 1)
  {
    v22 = *(const char **)a2;
  }
  else
  {
    LOBYTE(v19) = 2;
    v22 = (const char *)a2;
  }
  v130 = v22;
  v131 = v21;
  v132 = "CHAR_LOCK_FREE";
  LOBYTE(v133) = v19;
  HIBYTE(v133) = 3;
LABEL_30:
  if (v6 >= 8)
    v23 = "2";
  else
    v23 = "1";
  v24 = 1;
  v129 = 1;
  v25 = *(unsigned __int8 *)v23;
  if (*v23)
  {
    v127[0] = v23;
    v24 = 3;
  }
  v128 = v24;
  sub_22E7333BC(v18, (llvm::Twine *)&v130, (llvm::Twine *)v127);
  if ((*((_BYTE *)a1[2] + 3) & 4) != 0)
  {
    v26 = (llvm::raw_ostream **)a1[1];
    v27 = *(unsigned __int8 *)(a2 + 32);
    if (v27 == 1)
    {
      v130 = "CHAR8_T_LOCK_FREE";
      v28 = 259;
    }
    else
    {
      if (*(_BYTE *)(a2 + 32))
      {
        v29 = *(_QWORD *)(a2 + 8);
        if (*(_BYTE *)(a2 + 33) == 1)
        {
          v30 = *(const char **)a2;
        }
        else
        {
          LOBYTE(v27) = 2;
          v30 = (const char *)a2;
        }
        v130 = v30;
        v131 = v29;
        v132 = "CHAR8_T_LOCK_FREE";
        LOBYTE(v133) = v27;
        HIBYTE(v133) = 3;
        goto LABEL_45;
      }
      v28 = 256;
    }
    v133 = v28;
LABEL_45:
    v31 = 1;
    v129 = 1;
    if (v25)
    {
      v127[0] = v23;
      v31 = 3;
    }
    v128 = v31;
    sub_22E7333BC(v26, (llvm::Twine *)&v130, (llvm::Twine *)v127);
  }
  v32 = (llvm::raw_ostream **)a1[1];
  v33 = *(unsigned __int8 *)(a2 + 32);
  if (v33 == 1)
  {
    v130 = "CHAR16_T_LOCK_FREE";
    v34 = 259;
    goto LABEL_52;
  }
  if (!*(_BYTE *)(a2 + 32))
  {
    v34 = 256;
LABEL_52:
    v133 = v34;
    goto LABEL_57;
  }
  v35 = *(_QWORD *)(a2 + 8);
  if (*(_BYTE *)(a2 + 33) == 1)
  {
    v36 = *(const char **)a2;
  }
  else
  {
    LOBYTE(v33) = 2;
    v36 = (const char *)a2;
  }
  v130 = v36;
  v131 = v35;
  v132 = "CHAR16_T_LOCK_FREE";
  LOBYTE(v133) = v33;
  HIBYTE(v133) = 3;
LABEL_57:
  v37 = *a1;
  v38 = *(_DWORD *)((char *)*a1 + *(_QWORD *)(**a1 - 24) + 136);
  v39 = sub_22F1E724C(*a1, v38);
  v40 = sub_22F1E7344(v37, v38);
  if ((v39 & (v39 - 1)) != 0 || v39 != v40 || v39 > v6)
    v43 = "1";
  else
    v43 = "2";
  v44 = 1;
  v129 = 1;
  if (*v43)
  {
    v127[0] = v43;
    v44 = 3;
  }
  v128 = v44;
  sub_22E7333BC(v32, (llvm::Twine *)&v130, (llvm::Twine *)v127);
  v45 = (llvm::raw_ostream **)a1[1];
  v46 = *(unsigned __int8 *)(a2 + 32);
  if (v46 == 1)
  {
    v130 = "CHAR32_T_LOCK_FREE";
    v47 = 259;
    goto LABEL_72;
  }
  if (!*(_BYTE *)(a2 + 32))
  {
    v47 = 256;
LABEL_72:
    v133 = v47;
    goto LABEL_77;
  }
  v48 = *(_QWORD *)(a2 + 8);
  if (*(_BYTE *)(a2 + 33) == 1)
  {
    v49 = *(const char **)a2;
  }
  else
  {
    LOBYTE(v46) = 2;
    v49 = (const char *)a2;
  }
  v130 = v49;
  v131 = v48;
  v132 = "CHAR32_T_LOCK_FREE";
  LOBYTE(v133) = v46;
  HIBYTE(v133) = 3;
LABEL_77:
  v50 = *a1;
  v51 = *(_DWORD *)((char *)*a1 + *(_QWORD *)(**a1 - 24) + 140);
  v52 = sub_22F1E724C(*a1, v51);
  v53 = sub_22F1E7344(v50, v51);
  if ((v52 & (v52 - 1)) != 0 || v52 != v53 || v52 > v6)
    v56 = "1";
  else
    v56 = "2";
  v57 = 1;
  v129 = 1;
  if (*v56)
  {
    v127[0] = v56;
    v57 = 3;
  }
  v128 = v57;
  sub_22E7333BC(v45, (llvm::Twine *)&v130, (llvm::Twine *)v127);
  v58 = (llvm::raw_ostream **)a1[1];
  v59 = *(unsigned __int8 *)(a2 + 32);
  if (v59 == 1)
  {
    v130 = "WCHAR_T_LOCK_FREE";
    v60 = 259;
    goto LABEL_92;
  }
  if (!*(_BYTE *)(a2 + 32))
  {
    v60 = 256;
LABEL_92:
    v133 = v60;
    goto LABEL_97;
  }
  v61 = *(_QWORD *)(a2 + 8);
  if (*(_BYTE *)(a2 + 33) == 1)
  {
    v62 = *(const char **)a2;
  }
  else
  {
    LOBYTE(v59) = 2;
    v62 = (const char *)a2;
  }
  v130 = v62;
  v131 = v61;
  v132 = "WCHAR_T_LOCK_FREE";
  LOBYTE(v133) = v59;
  HIBYTE(v133) = 3;
LABEL_97:
  v63 = *a1;
  v64 = *(_DWORD *)((char *)*a1 + *(_QWORD *)(**a1 - 24) + 128);
  v65 = sub_22F1E724C(*a1, v64);
  v66 = sub_22F1E7344(v63, v64);
  if ((v65 & (v65 - 1)) != 0 || v65 != v66 || v65 > v6)
    v69 = "1";
  else
    v69 = "2";
  v70 = 1;
  v129 = 1;
  if (*v69)
  {
    v127[0] = v69;
    v70 = 3;
  }
  v128 = v70;
  sub_22E7333BC(v58, (llvm::Twine *)&v130, (llvm::Twine *)v127);
  v71 = (llvm::raw_ostream **)a1[1];
  v72 = *(unsigned __int8 *)(a2 + 32);
  if (v72 == 1)
  {
    v130 = "SHORT_LOCK_FREE";
    v73 = 259;
    goto LABEL_112;
  }
  if (!*(_BYTE *)(a2 + 32))
  {
    v73 = 256;
LABEL_112:
    v133 = v73;
    goto LABEL_117;
  }
  v74 = *(_QWORD *)(a2 + 8);
  if (*(_BYTE *)(a2 + 33) == 1)
  {
    v75 = *(const char **)a2;
  }
  else
  {
    LOBYTE(v72) = 2;
    v75 = (const char *)a2;
  }
  v130 = v75;
  v131 = v74;
  v132 = "SHORT_LOCK_FREE";
  LOBYTE(v133) = v72;
  HIBYTE(v133) = 3;
LABEL_117:
  if (v6 >= 0x10)
    v76 = "2";
  else
    v76 = "1";
  v77 = 1;
  v129 = 1;
  if (*v76)
  {
    v127[0] = v76;
    v77 = 3;
  }
  v128 = v77;
  sub_22E7333BC(v71, (llvm::Twine *)&v130, (llvm::Twine *)v127);
  v78 = (llvm::raw_ostream **)a1[1];
  v79 = *(unsigned __int8 *)(a2 + 32);
  if (v79 == 1)
  {
    v130 = "INT_LOCK_FREE";
    v80 = 259;
    goto LABEL_126;
  }
  if (!*(_BYTE *)(a2 + 32))
  {
    v80 = 256;
LABEL_126:
    v133 = v80;
    goto LABEL_131;
  }
  v81 = *(_QWORD *)(a2 + 8);
  if (*(_BYTE *)(a2 + 33) == 1)
  {
    v82 = *(const char **)a2;
  }
  else
  {
    LOBYTE(v79) = 2;
    v82 = (const char *)a2;
  }
  v130 = v82;
  v131 = v81;
  v132 = "INT_LOCK_FREE";
  LOBYTE(v133) = v79;
  HIBYTE(v133) = 3;
LABEL_131:
  v83 = (char *)*a1 + *(_QWORD *)(**a1 - 24);
  v84 = v83[4];
  v85 = v83[5];
  if ((v84 & (v84 - 1)) != 0 || v84 != v85 || v84 > v6)
    v88 = "1";
  else
    v88 = "2";
  v89 = 1;
  v129 = 1;
  if (*v88)
  {
    v127[0] = v88;
    v89 = 3;
  }
  v128 = v89;
  sub_22E7333BC(v78, (llvm::Twine *)&v130, (llvm::Twine *)v127);
  v90 = (llvm::raw_ostream **)a1[1];
  v91 = *(unsigned __int8 *)(a2 + 32);
  if (v91 == 1)
  {
    v130 = "LONG_LOCK_FREE";
    v92 = 259;
    goto LABEL_146;
  }
  if (!*(_BYTE *)(a2 + 32))
  {
    v92 = 256;
LABEL_146:
    v133 = v92;
    goto LABEL_151;
  }
  v93 = *(_QWORD *)(a2 + 8);
  if (*(_BYTE *)(a2 + 33) == 1)
  {
    v94 = *(const char **)a2;
  }
  else
  {
    LOBYTE(v91) = 2;
    v94 = (const char *)a2;
  }
  v130 = v94;
  v131 = v93;
  v132 = "LONG_LOCK_FREE";
  LOBYTE(v133) = v91;
  HIBYTE(v133) = 3;
LABEL_151:
  v95 = (char *)*a1 + *(_QWORD *)(**a1 - 24);
  v96 = v95[20];
  v97 = v95[21];
  if ((v96 & (v96 - 1)) != 0 || v96 != v97 || v96 > v6)
    v100 = "1";
  else
    v100 = "2";
  v101 = 1;
  v129 = 1;
  if (*v100)
  {
    v127[0] = v100;
    v101 = 3;
  }
  v128 = v101;
  sub_22E7333BC(v90, (llvm::Twine *)&v130, (llvm::Twine *)v127);
  v102 = (llvm::raw_ostream **)a1[1];
  v103 = *(unsigned __int8 *)(a2 + 32);
  if (v103 == 1)
  {
    v130 = "LLONG_LOCK_FREE";
    v104 = 259;
    goto LABEL_166;
  }
  if (!*(_BYTE *)(a2 + 32))
  {
    v104 = 256;
LABEL_166:
    v133 = v104;
    goto LABEL_171;
  }
  v105 = *(_QWORD *)(a2 + 8);
  if (*(_BYTE *)(a2 + 33) == 1)
  {
    v106 = *(const char **)a2;
  }
  else
  {
    LOBYTE(v103) = 2;
    v106 = (const char *)a2;
  }
  v130 = v106;
  v131 = v105;
  v132 = "LLONG_LOCK_FREE";
  LOBYTE(v133) = v103;
  HIBYTE(v133) = 3;
LABEL_171:
  v107 = (char *)*a1 + *(_QWORD *)(**a1 - 24);
  v108 = v107[22];
  v109 = v107[23];
  if ((v108 & (v108 - 1)) != 0 || v108 != v109 || v108 > v6)
    v112 = "1";
  else
    v112 = "2";
  v113 = 1;
  v129 = 1;
  if (*v112)
  {
    v127[0] = v112;
    v113 = 3;
  }
  v128 = v113;
  sub_22E7333BC(v102, (llvm::Twine *)&v130, (llvm::Twine *)v127);
  v114 = (llvm::raw_ostream **)a1[1];
  v115 = *(unsigned __int8 *)(a2 + 32);
  if (v115 == 1)
  {
    v130 = "POINTER_LOCK_FREE";
    v116 = 259;
    goto LABEL_186;
  }
  if (!*(_BYTE *)(a2 + 32))
  {
    v116 = 256;
LABEL_186:
    v133 = v116;
    goto LABEL_191;
  }
  v117 = *(_QWORD *)(a2 + 8);
  if (*(_BYTE *)(a2 + 33) == 1)
  {
    v118 = *(const char **)a2;
  }
  else
  {
    LOBYTE(v115) = 2;
    v118 = (const char *)a2;
  }
  v130 = v118;
  v131 = v117;
  v132 = "POINTER_LOCK_FREE";
  LOBYTE(v133) = v115;
  HIBYTE(v133) = 3;
LABEL_191:
  v119 = (unsigned __int8 *)*a1 + *(_QWORD *)(**a1 - 24);
  v120 = *v119;
  v121 = v119[1];
  if ((v120 & (v120 - 1)) != 0 || v120 != v121 || v120 > v6)
    v124 = "1";
  else
    v124 = "2";
  v125 = 1;
  v129 = 1;
  if (*v124)
  {
    v127[0] = v124;
    v125 = 3;
  }
  v128 = v125;
  return sub_22E7333BC(v114, (llvm::Twine *)&v130, (llvm::Twine *)v127);
}

uint64_t sub_22E73C548(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  llvm::APFloatBase *v16;
  llvm::APFloatBase *v17;
  llvm::APFloatBase *v18;
  llvm::APFloatBase *v19;
  llvm::APFloatBase *v20;

  v16 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEhalf(a1);
  if (v16 != a1)
  {
    v17 = (llvm::APFloatBase *)llvm::APFloatBase::BFloat(v16);
    a2 = a3;
    if (v17 != a1)
    {
      v18 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEsingle(v17);
      a2 = a4;
      if (v18 != a1)
      {
        v19 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEdouble(v18);
        a2 = a5;
        if (v19 != a1)
        {
          v20 = (llvm::APFloatBase *)llvm::APFloatBase::x87DoubleExtended(v19);
          a2 = a6;
          if (v20 != a1)
          {
            if ((llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(v20) == a1)
              return a7;
            else
              return a8;
          }
        }
      }
    }
  }
  return a2;
}

uint64_t sub_22E73C5F4(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, unsigned int a8)
{
  llvm::APFloatBase *v16;
  llvm::APFloatBase *v17;
  llvm::APFloatBase *v18;
  llvm::APFloatBase *v19;
  llvm::APFloatBase *v20;

  v16 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEhalf(a1);
  if (v16 != a1)
  {
    v17 = (llvm::APFloatBase *)llvm::APFloatBase::BFloat(v16);
    a2 = a3;
    if (v17 != a1)
    {
      v18 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEsingle(v17);
      a2 = a4;
      if (v18 != a1)
      {
        v19 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEdouble(v18);
        a2 = a5;
        if (v19 != a1)
        {
          v20 = (llvm::APFloatBase *)llvm::APFloatBase::x87DoubleExtended(v19);
          a2 = a6;
          if (v20 != a1)
          {
            if ((llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(v20) == a1)
              return a7;
            else
              return a8;
          }
        }
      }
    }
  }
  return a2;
}

_QWORD *sub_22E73C6A0(_QWORD *a1, void *__src, size_t __len)
{
  llvm::StringMapImpl *v4;
  __int128 *p_dst;
  size_t v8;
  size_t v9;
  _QWORD *v10;
  void *v11;
  char v12;
  BOOL v13;
  std::locale::id *v14;
  const std::locale::facet *v15;
  unsigned __int8 v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int AsUnsignedInteger;
  std::locale::__imp *locale;
  int v26;
  std::locale::__imp *v27;
  uint64_t v28;
  int v29;
  std::locale::__imp *v30;
  size_t v31;
  void **v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned __int8 *v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  std::locale::__imp *v42;
  uint64_t v43;
  unint64_t v44;
  unsigned __int8 *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int16 v49;
  unsigned int v50;
  unint64_t v51;
  size_t v53;
  std::locale::__imp *v54;
  uint64_t v55;
  uint64_t v56;
  std::locale::__imp *v57;
  int v58;
  size_t v59;
  size_t v60;
  void **v62;
  uint64_t v63;
  char *v64;
  unsigned __int8 *v65;
  unint64_t v66;
  unint64_t v67;
  void *v68;
  unint64_t v69;
  uint64_t v70;
  void *__p[2];
  void *v72;
  std::locale v73[2];
  _OWORD *v74;
  int v75;
  int v76;
  _OWORD v77[4];
  __int128 __dst;
  void *v79;
  uint64_t v80;
  _BYTE v81[64];
  _QWORD v82[2];
  _QWORD v83[51];
  _QWORD v84[22];

  v84[19] = *MEMORY[0x24BDAC8D0];
  *a1 = &off_24FA70EE0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = (llvm::StringMapImpl *)(a1 + 2);
  a1[3] = 0;
  a1[4] = 0x6800000000;
  if (__src)
  {
    if (__len >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (__len >= 0x17)
    {
      v8 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__len | 7) != 0x17)
        v8 = __len | 7;
      v9 = v8 + 1;
      p_dst = (__int128 *)operator new(v8 + 1);
      *((_QWORD *)&__dst + 1) = __len;
      v79 = (void *)(v9 | 0x8000000000000000);
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v79) = __len;
      p_dst = &__dst;
      if (!__len)
        goto LABEL_11;
    }
    memmove(p_dst, __src, __len);
LABEL_11:
    *((_BYTE *)p_dst + __len) = 0;
    goto LABEL_12;
  }
  __dst = 0uLL;
  v79 = 0;
LABEL_12:
  sub_22F2A8D10(v82);
  if (SHIBYTE(v79) < 0)
    operator delete((void *)__dst);
  if (!v83[15])
    goto LABEL_116;
  __p[0] = 0;
  __p[1] = 0;
  v72 = 0;
  v79 = v81;
  v80 = 0x800000000;
  v10 = (_QWORD *)(v82[0] - 24);
  if (*(_DWORD *)((char *)&v83[2] + *(_QWORD *)(v82[0] - 24)))
  {
    v11 = 0;
    v12 = 0;
    goto LABEL_108;
  }
  v13 = 0;
  v14 = (std::locale::id *)MEMORY[0x24BEDB350];
  do
  {
    v68 = 0;
    v69 = 0;
    v70 = 0;
    std::ios_base::getloc((const std::ios_base *)((char *)v82 + *v10));
    v15 = std::locale::use_facet(v73, v14);
    v16 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
    std::locale::~locale(v73);
    sub_22E725720(v82, (uint64_t)&v68, v16);
    v17 = (char *)v68;
    if (v70 >= 0)
      v17 = (char *)&v68;
    v18 = HIBYTE(v70) & 0x7F;
    if (v70 < 0)
      v18 = v69;
    v64 = v17;
    v66 = v18;
    v19 = llvm::StringRef::find();
    v20 = v19 != -1;
    if (v19 != -1)
    {
      if (SHIBYTE(v72) >= 0)
        v31 = HIBYTE(v72) & 0x7F;
      else
        v31 = (size_t)__p[1];
      if (v31)
      {
        if (SHIBYTE(v72) >= 0)
          v32 = __p;
        else
          v32 = (void **)__p[0];
        v33 = *sub_22F2ACFB4(v4, v32, v31);
        *(_OWORD *)(v33 + 8) = __dst;
        sub_22F24C890(v33 + 24, (uint64_t)&v79);
      }
      goto LABEL_58;
    }
    if (v13)
    {
      v21 = llvm::StringRef::find();
      if (v21 == -1)
      {
        v22 = llvm::StringRef::find();
        if (v22 == -1)
        {
          v22 = llvm::StringRef::find();
          if (v22 == -1)
            goto LABEL_60;
        }
        v23 = v22 + 6;
      }
      else
      {
        v23 = v21 + 7;
      }
      if (v66 < v23)
        v23 = v66;
      v34 = &v64[v23];
      v35 = v66 - v23;
      if (!v35 || (word_22F4ADB24[*v34] & 0xE0) == 0)
      {
        HIBYTE(v74) = 0;
        LOBYTE(v73[0].__locale_) = 0;
LABEL_55:
        if (SHIBYTE(v72) < 0)
          operator delete(__p[0]);
        *(_OWORD *)__p = *(_OWORD *)&v73[0].__locale_;
        v72 = v74;
LABEL_58:
        memset(v77, 0, sizeof(v77));
        *(_OWORD *)&v73[0].__locale_ = 0u;
        v75 = 0;
        v74 = v77;
        v76 = 8;
        __dst = 0uLL;
        sub_22F24C77C((uint64_t)&v79, (uint64_t)&v74);
        if (v74 != v77)
          free(v74);
        goto LABEL_60;
      }
      if (v35 < 2)
      {
        v51 = 1;
        if (!v34)
        {
LABEL_95:
          v73[0].__locale_ = 0;
          v73[1].__locale_ = 0;
          v74 = 0;
          goto LABEL_55;
        }
      }
      else
      {
        v50 = 2;
        v51 = 1;
        do
        {
          if ((word_22F4ADB24[v34[v51]] & 0xE8) == 0)
            break;
          v51 = v50;
        }
        while (v35 > v50++);
        if (!v34)
          goto LABEL_95;
      }
      if (v35 >= v51)
        v53 = v51;
      else
        v53 = v35;
      if (v53 >= 0x17)
      {
        v55 = (v53 & 0xFFFFFFF8) + 8;
        if ((v53 | 7) != 0x17)
          v55 = v53 | 7;
        v56 = v55 + 1;
        v54 = (std::locale::__imp *)operator new(v55 + 1);
        v73[1].__locale_ = (std::locale::__imp *)v53;
        v74 = (_OWORD *)(v56 | 0x8000000000000000);
        v73[0].__locale_ = v54;
      }
      else
      {
        HIBYTE(v74) = v53;
        v54 = (std::locale::__imp *)v73;
        if (!v53)
          goto LABEL_107;
      }
      v57 = v54;
      memmove(v54, v34, v53);
      v54 = v57;
      v14 = (std::locale::id *)MEMORY[0x24BEDB350];
LABEL_107:
      *((_BYTE *)v54 + v53) = 0;
      goto LABEL_55;
    }
    if (llvm::StringRef::find() != -1)
    {
      v73[0].__locale_ = 0;
      AsUnsignedInteger = llvm::getAsUnsignedInteger();
      locale = v73[0].__locale_;
      if (AsUnsignedInteger)
        locale = 0;
      *(_QWORD *)&__dst = locale;
      goto LABEL_60;
    }
    if (llvm::StringRef::find() != -1)
    {
LABEL_33:
      v73[0].__locale_ = 0;
      v26 = llvm::getAsUnsignedInteger();
      v27 = v73[0].__locale_;
      if (v26)
        v27 = 0;
      *((_QWORD *)&__dst + 1) = v27;
      goto LABEL_60;
    }
    v28 = llvm::StringRef::find();
    if (v28 == -1)
    {
      v36 = llvm::StringRef::find();
      if (v36 != -1)
      {
        v37 = v36 + 15;
        if (v66 < v36 + 15)
          v37 = v66;
        v38 = (unsigned __int8 *)&v64[v37];
        v39 = v66 - v37;
        v65 = v38;
        v67 = v39;
        if (v39)
        {
          if ((word_22F4ADB24[*v38] & 8) != 0)
          {
            do
            {
              if (v39 < 2)
              {
                v41 = 1;
              }
              else
              {
                v40 = 1;
                while ((word_22F4ADB24[v38[v40]] & 8) != 0)
                {
                  v40 = (v40 + 1);
                  v41 = v40;
                  if (v39 <= v40)
                    goto LABEL_76;
                }
                v41 = v40;
              }
LABEL_76:
              v73[0].__locale_ = 0;
              if (llvm::getAsUnsignedInteger())
                v42 = 0;
              else
                v42 = v73[0].__locale_;
              v43 = v80;
              if (v80 >= (unint64_t)HIDWORD(v80))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v43 = v80;
              }
              *((_QWORD *)v79 + v43) = v42;
              LODWORD(v80) = v80 + 1;
              v44 = (v41 + 1);
              if (v67 < v44)
                v44 = v67;
              v45 = &v65[v44];
              v46 = v67 - v44;
              v65 = v45;
              v67 = v46;
              if (!v46)
                break;
              v47 = 0;
              v48 = -1;
              while (1)
              {
                v49 = word_22F4ADB24[v45[v47]];
                if ((v49 & 7) == 0)
                  break;
                v65 = &v45[v47 + 1];
                v67 = v46 + v48;
                ++v47;
                --v48;
                if (v46 == v47)
                  goto LABEL_60;
              }
              v38 = &v45[v47];
              v39 = v46 - v47;
            }
            while ((v49 & 8) != 0);
          }
        }
      }
    }
    else
    {
      v73[0].__locale_ = 0;
      v29 = llvm::getAsUnsignedInteger();
      v30 = v73[0].__locale_;
      if (v29)
        v30 = 0;
      *(_QWORD *)&__dst = v30;
      if (llvm::StringRef::find() != -1)
        goto LABEL_33;
    }
LABEL_60:
    if (SHIBYTE(v70) < 0)
      operator delete(v68);
    v10 = (_QWORD *)(v82[0] - 24);
    v13 = v20;
  }
  while (!*(_DWORD *)((char *)&v83[2] + *(_QWORD *)(v82[0] - 24)));
  v12 = HIBYTE(v72);
  v11 = __p[1];
LABEL_108:
  v58 = v12;
  v59 = v12 & 0x7F;
  if (v58 >= 0)
    v60 = v59;
  else
    v60 = (size_t)v11;
  if (v60)
  {
    if (v58 >= 0)
      v62 = __p;
    else
      v62 = (void **)__p[0];
    v63 = *sub_22F2ACFB4(v4, v62, v60);
    *(_OWORD *)(v63 + 8) = __dst;
    sub_22F24C890(v63 + 24, (uint64_t)&v79);
  }
  if (v79 != v81)
    free(v79);
  if (SHIBYTE(v72) < 0)
    operator delete(__p[0]);
LABEL_116:
  v82[0] = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)v82 + *(_QWORD *)(v82[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x2348A0CBC](v83);
  std::istream::~istream();
  MEMORY[0x2348A0E3C](v84);
  return a1;
}

uint64_t sub_22E73CE7C(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t *a5)
{
  int Key;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v22;

  if ((*(_QWORD *)(a2 + 40) & 7) != 0 || (*(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFF8) == 0)
    return 0;
  Key = llvm::StringMapImpl::FindKey();
  if (Key == -1)
    return 0;
  v12 = Key;
  if (Key == (unint64_t)*(unsigned int *)(a1 + 24))
    return 0;
  v13 = *(_QWORD *)(a1 + 16);
  v14 = sub_22EFC3B90(a2);
  if (v14)
  {
    v15 = v14;
    v16 = 0;
LABEL_9:
    v17 = *(_QWORD *)(v13 + 8 * v12);
    if (*(_DWORD *)(v17 + 32) > v16)
    {
      v18 = *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * v16);
      v22 = v15;
      sub_22F2AD0CC(a5, &v22)[1] = v18;
    }
    while (1)
    {
      v15 = *(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v15)
        break;
      if ((*(_DWORD *)(v15 + 28) & 0x7Fu) - 49 <= 2)
      {
        ++v16;
        goto LABEL_9;
      }
    }
    v19 = v16 + 1;
  }
  else
  {
    v19 = 0;
  }
  v20 = *(_QWORD *)(v13 + 8 * v12);
  if (*(_DWORD *)(v20 + 32) != v19)
    return 0;
  *a3 = *(_QWORD *)(v20 + 8);
  *a4 = *(_QWORD *)(v20 + 16);
  return 1;
}

void sub_22E73CFB0(uint64_t a1)
{
  _DWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  llvm::raw_ostream *v13;
  const void *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  _WORD *v19;
  _QWORD *v20;
  char v21;
  int v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  _QWORD *v28;
  _WORD *v29;
  char v30;
  int v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  _BYTE v36[24];
  unint64_t v37;
  _QWORD v38[4];
  uint64_t v39;
  void *v40;
  __int128 v41;
  _QWORD v42[65];

  v42[64] = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 80))
  {
    v40 = v42;
    v41 = xmmword_22F45DFC0;
    sub_22F242C48((uint64_t)v36, (uint64_t)&v40);
    v2 = (_DWORD *)v38[0];
    if (v37 - v38[0] > 6)
    {
      *(_DWORD *)(v38[0] + 3) = 171865187;
      *v2 = 1667851324;
      v38[0] += 7;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v36, "<dict>\n");
    }
    v3 = v38;
    if (*(char *)(a1 + 879) < 0)
      v4 = *(_QWORD *)(a1 + 864);
    else
      v4 = *(unsigned __int8 *)(a1 + 879);
    if (v4)
    {
      v17 = v38[0];
      if (v37 - v38[0] > 0x16)
      {
        *(_OWORD *)v38[0] = *(_OWORD *)"  <key>main-file</key>\n";
        *(_QWORD *)(v17 + 15) = *(_QWORD *)"e</key>\n";
        v19 = (_WORD *)(v38[0] + 23);
        v38[0] += 23;
        v18 = v36;
        v20 = v38;
      }
      else
      {
        v18 = (_QWORD *)llvm::raw_ostream::write((llvm::raw_ostream *)v36, "  <key>main-file</key>\n");
        v20 = v18 + 4;
        v19 = (_WORD *)v18[4];
      }
      if (v18[3] - (_QWORD)v19 > 1uLL)
      {
        *v19 = 8224;
        *v20 += 2;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v18, "  ");
      }
      v21 = *(_BYTE *)(a1 + 879);
      v22 = v21;
      if (v21 >= 0)
        v23 = (char *)(a1 + 856);
      else
        v23 = *(char **)(a1 + 856);
      v24 = v21 & 0x7F;
      if (v22 >= 0)
        v25 = v24;
      else
        v25 = *(_QWORD *)(a1 + 864);
      sub_22F2AD500((llvm::raw_ostream *)v36, v23, v25);
      v26 = (_BYTE *)v38[0];
      if (v38[0] >= v37)
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v36);
      }
      else
      {
        ++v38[0];
        *v26 = 10;
      }
    }
    if (*(char *)(a1 + 903) < 0)
      v5 = *(_QWORD *)(a1 + 888);
    else
      v5 = *(unsigned __int8 *)(a1 + 903);
    if (v5)
    {
      v27 = v38[0];
      if (v37 - v38[0] > 0x1E)
      {
        *(_OWORD *)v38[0] = *(_OWORD *)"  <key>dwarf-debug-flags</key>\n";
        *(_OWORD *)(v27 + 15) = *(_OWORD *)"bug-flags</key>\n";
        v29 = (_WORD *)(v38[0] + 31);
        v38[0] += 31;
        v28 = v36;
      }
      else
      {
        v28 = (_QWORD *)llvm::raw_ostream::write((llvm::raw_ostream *)v36, "  <key>dwarf-debug-flags</key>\n");
        v3 = v28 + 4;
        v29 = (_WORD *)v28[4];
      }
      if (v28[3] - (_QWORD)v29 > 1uLL)
      {
        *v29 = 8224;
        *v3 += 2;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v28, "  ");
      }
      v30 = *(_BYTE *)(a1 + 903);
      v31 = v30;
      if (v30 >= 0)
        v32 = (char *)(a1 + 880);
      else
        v32 = *(char **)(a1 + 880);
      v33 = v30 & 0x7F;
      if (v31 >= 0)
        v34 = v33;
      else
        v34 = *(_QWORD *)(a1 + 888);
      sub_22F2AD500((llvm::raw_ostream *)v36, v32, v34);
      v35 = (_BYTE *)v38[0];
      if (v38[0] >= v37)
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v36);
      }
      else
      {
        ++v38[0];
        *v35 = 10;
      }
    }
    v6 = v38[0];
    if (v37 - v38[0] > 0x18)
    {
      *(_OWORD *)v38[0] = *(_OWORD *)"  <key>diagnostics</key>\n";
      *(_OWORD *)(v6 + 9) = *(_OWORD *)"agnostics</key>\n";
      v7 = v38[0] + 25;
      v38[0] += 25;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v36, "  <key>diagnostics</key>\n");
      v7 = v38[0];
    }
    if (v37 - v7 > 9)
    {
      *(_WORD *)(v7 + 8) = 2622;
      *(_QWORD *)v7 = *(_QWORD *)"  <array>\n";
      v38[0] += 10;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v36, "  <array>\n");
    }
    v8 = *(unsigned int *)(a1 + 80);
    if ((_DWORD)v8)
    {
      v9 = *(_QWORD *)(a1 + 72);
      v10 = 96 * v8;
      do
      {
        sub_22F2AD12C((llvm::raw_ostream *)v36, v9);
        v9 += 96;
        v10 -= 96;
      }
      while (v10);
    }
    v11 = (_QWORD *)v38[0];
    if (v37 - v38[0] > 0xA)
    {
      *(_DWORD *)(v38[0] + 7) = 171866465;
      *v11 = *(_QWORD *)"  </array>\n";
      v12 = (_QWORD *)(v38[0] + 11);
      v38[0] += 11;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v36, "  </array>\n");
      v12 = (_QWORD *)v38[0];
    }
    if (v37 - (unint64_t)v12 > 7)
    {
      *v12 = 0xA3E746369642F3CLL;
      v38[0] += 8;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v36, "</dict>\n");
    }
    v13 = *(llvm::raw_ostream **)(a1 + 16);
    v14 = *(const void **)v39;
    v15 = *(_QWORD *)(v39 + 8);
    v16 = (void *)*((_QWORD *)v13 + 4);
    if (v15 <= *((_QWORD *)v13 + 3) - (_QWORD)v16)
    {
      if (v15)
      {
        memcpy(v16, v14, *(_QWORD *)(v39 + 8));
        *((_QWORD *)v13 + 4) += v15;
      }
    }
    else
    {
      llvm::raw_ostream::write(v13, (const char *)v14);
    }
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v36);
    if (v40 != v42)
      free(v40);
  }
}

void sub_22E73D460(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  void **v10;
  unint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  const void *v14;
  size_t v15;
  unint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 *v20;
  unint64_t v21;
  unsigned __int16 *v22;
  size_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  const void *v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unsigned int v36;
  void **v37;
  unsigned int v38;
  uint64_t v39;
  __int128 v40;
  _BYTE *v41;
  __int128 v42;
  uint64_t v43;
  void *v44;
  _BYTE *v45;
  __int128 v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  _DWORD *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  _DWORD *v54;
  unsigned int v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  uint64_t v59;
  const void *v60;
  size_t v61;
  unint64_t v62;
  __int128 *v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  char *v67;
  __int128 v68;
  void *v69;
  _BYTE v70[24];
  void *v71[2];
  void *v72[4];
  uint64_t v73;
  unsigned int v74;
  __int128 __p;
  uint64_t v76;
  int v77;
  _BYTE __dst[24];
  _QWORD v79[16];

  v79[13] = *MEMORY[0x24BDAC8D0];
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1))
  {
    if (a2 == 3)
    {
      ++*(_DWORD *)(a1 + 8);
    }
    else if (a2 >= 4)
    {
      ++*(_DWORD *)(a1 + 12);
    }
  }
  if (*(char *)(a1 + 879) < 0)
    v6 = *(_QWORD *)(a1 + 864);
  else
    v6 = *(unsigned __int8 *)(a1 + 879);
  if (!v6)
  {
    v7 = *(_QWORD *)(*a3 + 64);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 + 344);
      if (v8)
      {
        v9 = sub_22E6155EC((_QWORD *)v7, v8);
        if (v9)
        {
          v10 = (void **)(a1 + 856);
          v11 = *(_QWORD *)(v9 + 88);
          do
          {
            v12 = (unint64_t *)v11;
            v13 = *(_QWORD *)(v11 + 8);
            if ((v13 & 2) == 0)
              break;
            v11 = v13 & 0xFFFFFFFFFFFFFFFCLL;
          }
          while (v11);
          v16 = *v12;
          v14 = v12 + 4;
          v15 = v16;
          if (v16 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_109;
          if (v15 >= 0x17)
          {
            v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v15 | 7) != 0x17)
              v18 = v15 | 7;
            v19 = v18 + 1;
            v17 = operator new(v18 + 1);
            *(_QWORD *)&__dst[8] = v15;
            *(_QWORD *)&__dst[16] = v19 | 0x8000000000000000;
            *(_QWORD *)__dst = v17;
          }
          else
          {
            __dst[23] = v15;
            v17 = __dst;
            if (!v15)
              goto LABEL_22;
          }
          memmove(v17, v14, v15);
LABEL_22:
          v17[v15] = 0;
          if (*(char *)(a1 + 879) < 0)
            operator delete(*v10);
          *(_OWORD *)v10 = *(_OWORD *)__dst;
          *(_QWORD *)(a1 + 872) = *(_QWORD *)&__dst[16];
        }
      }
    }
  }
  __p = 0uLL;
  v76 = 0;
  *(_OWORD *)v71 = 0u;
  memset(v72, 0, sizeof(v72));
  v74 = *(_DWORD *)(*a3 + 316);
  v77 = a2;
  v20 = sub_22F41A9FC(v74);
  if (v21 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_109;
  v22 = v20;
  v23 = v21;
  if (v21 >= 0x17)
  {
    v25 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17)
      v25 = v21 | 7;
    v26 = v25 + 1;
    v24 = operator new(v25 + 1);
    *(_QWORD *)&__dst[8] = v23;
    *(_QWORD *)&__dst[16] = v26 | 0x8000000000000000;
    *(_QWORD *)__dst = v24;
    goto LABEL_32;
  }
  __dst[23] = v21;
  v24 = __dst;
  if (v21)
LABEL_32:
    memmove(v24, v22, v23);
  v24[v23] = 0;
  if (SHIBYTE(v76) < 0)
    operator delete((void *)__p);
  __p = *(_OWORD *)__dst;
  v76 = *(_QWORD *)&__dst[16];
  *(_QWORD *)__dst = v79;
  *(_OWORD *)&__dst[8] = xmmword_22F45DF40;
  sub_22F41A758(a3, __dst);
  v27 = *(_QWORD *)&__dst[8];
  if (*(_QWORD *)&__dst[8] > 0x7FFFFFFFFFFFFFF7uLL)
    goto LABEL_109;
  v28 = *(const void **)__dst;
  if (*(_QWORD *)&__dst[8] >= 0x17uLL)
  {
    v30 = (*(_QWORD *)&__dst[8] & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((*(_QWORD *)&__dst[8] | 7) != 0x17)
      v30 = *(_QWORD *)&__dst[8] | 7;
    v31 = v30 + 1;
    v29 = operator new(v30 + 1);
    *(_QWORD *)&v70[8] = v27;
    *(_QWORD *)&v70[16] = v31 | 0x8000000000000000;
    *(_QWORD *)v70 = v29;
    goto LABEL_42;
  }
  v70[23] = __dst[8];
  v29 = v70;
  if (*(_QWORD *)&__dst[8])
LABEL_42:
    memmove(v29, v28, v27);
  v29[v27] = 0;
  if (SHIBYTE(v72[0]) < 0)
    operator delete(v71[0]);
  *(_OWORD *)v71 = *(_OWORD *)v70;
  v72[0] = *(void **)&v70[16];
  MEMORY[0x2348A0C14](&v72[1], "");
  v73 = 0;
  v32 = *(_DWORD *)(*a3 + 312);
  if (v32)
  {
    v33 = *(_QWORD *)(*a3 + 64);
    if (v33)
    {
      sub_22F1E2F68(*(_QWORD *)(*a3 + 64), v32, 1, (uint64_t)v70);
      if (*(_QWORD *)v70)
      {
        MEMORY[0x2348A0C14](&v72[1]);
        v73 = *(_QWORD *)&v70[12];
        goto LABEL_49;
      }
      v47 = *(_DWORD *)(*a3 + 312) & 0x7FFFFFFF;
      v48 = *(_DWORD *)(v33 + 304);
      v49 = v48 + 1;
      if (v48 + 1 > 1)
      {
        if ((v48 & 0x80000000) != 0)
        {
          v51 = -2 - v48;
          if (((*(_QWORD *)(*(_QWORD *)(v33 + 224) + 8 * ((-2 - v48) >> 6)) >> (-2 - v48)) & 1) != 0)
            v50 = (_DWORD *)(*(_QWORD *)(v33 + 200) + 24 * v51);
          else
            v50 = (_DWORD *)sub_22F1E1134(v33, v51, 0);
        }
        else
        {
          v50 = (_DWORD *)(*(_QWORD *)(v33 + 184) + 24 * v48);
        }
      }
      else
      {
        v50 = *(_DWORD **)(v33 + 184);
      }
      if ((*v50 & 0x7FFFFFFFu) <= v47
        && (v48 == -2
         || (v49 != *(_DWORD *)(v33 + 192)
           ? ((v49 & 0x80000000) != 0
            ? ((v55 = -3 - v48,
                ((*(_QWORD *)(*(_QWORD *)(v33 + 224) + 8 * ((-3 - v48) >> 6)) >> (-3 - v48)) & 1) == 0)
             ? (v54 = (_DWORD *)sub_22F1E1134(v33, v55, 0))
             : (v54 = (_DWORD *)(*(_QWORD *)(v33 + 200) + 24 * v55)))
            : (v54 = (_DWORD *)(*(_QWORD *)(v33 + 184) + 24 * v49)),
              v53 = *v54 & 0x7FFFFFFF)
           : (v53 = *(_DWORD *)(v33 + 216)),
             v53 > v47)))
      {
        v52 = *(_DWORD *)(v33 + 304);
        if (!v52)
          goto LABEL_49;
      }
      else
      {
        v52 = sub_22F1E1EE8(v33, v47);
        if (!v52)
          goto LABEL_49;
      }
      v56 = sub_22E6155EC((_QWORD *)v33, v52);
      if (!v56)
        goto LABEL_49;
      v57 = *(_QWORD *)(v56 + 88);
      do
      {
        v58 = (unint64_t *)v57;
        v59 = *(_QWORD *)(v57 + 8);
        if ((v59 & 2) == 0)
          break;
        v57 = v59 & 0xFFFFFFFFFFFFFFFCLL;
      }
      while (v57);
      v62 = *v58;
      v60 = v58 + 4;
      v61 = v62;
      if (v62 <= 0x7FFFFFFFFFFFFFF7)
      {
        if (v61 >= 0x17)
        {
          v64 = (v61 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v61 | 7) != 0x17)
            v64 = v61 | 7;
          v65 = v64 + 1;
          v63 = (__int128 *)operator new(v64 + 1);
          *((_QWORD *)&v68 + 1) = v61;
          v69 = (void *)(v65 | 0x8000000000000000);
          *(_QWORD *)&v68 = v63;
        }
        else
        {
          HIBYTE(v69) = v61;
          v63 = &v68;
          if (!v61)
            goto LABEL_101;
        }
        memmove(v63, v60, v61);
LABEL_101:
        *((_BYTE *)v63 + v61) = 0;
        if (SHIBYTE(v72[3]) < 0)
          operator delete(v72[1]);
        *(_OWORD *)&v72[1] = v68;
        v72[3] = v69;
        goto LABEL_49;
      }
LABEL_109:
      abort();
    }
  }
LABEL_49:
  v34 = (unint64_t *)(a1 + 72);
  v35 = *(_QWORD *)(a1 + 72);
  v36 = *(_DWORD *)(a1 + 80);
  v37 = v71;
  if (v36 >= *(_DWORD *)(a1 + 84))
  {
    v66 = v35 + 96 * v36 > (unint64_t)v71;
    if (v35 <= (unint64_t)v71 && v66)
    {
      v67 = (char *)v71 - v35;
      sub_22F2AD6C8(a1 + 72);
      v35 = *v34;
      v37 = (void **)&v67[*v34];
    }
    else
    {
      sub_22F2AD6C8(a1 + 72);
      v35 = *v34;
      v37 = v71;
    }
  }
  v38 = *(_DWORD *)(a1 + 80);
  v39 = v35 + 96 * v38;
  if (*((char *)v37 + 23) < 0)
  {
    sub_22E3BB2B4((_BYTE *)v39, *v37, (unint64_t)v37[1]);
  }
  else
  {
    v40 = *(_OWORD *)v37;
    *(_QWORD *)(v39 + 16) = v37[2];
    *(_OWORD *)v39 = v40;
  }
  v41 = (_BYTE *)(v35 + 96 * v38 + 24);
  if (*((char *)v37 + 47) < 0)
  {
    sub_22E3BB2B4(v41, v37[3], (unint64_t)v37[4]);
  }
  else
  {
    v42 = *(_OWORD *)(v37 + 3);
    *(_QWORD *)(v35 + 96 * v38 + 40) = v37[5];
    *(_OWORD *)v41 = v42;
  }
  v43 = v35 + 96 * v38;
  v44 = v37[6];
  *(_DWORD *)(v43 + 56) = *((_DWORD *)v37 + 14);
  *(_QWORD *)(v43 + 48) = v44;
  v45 = (_BYTE *)(v43 + 64);
  if (*((char *)v37 + 87) < 0)
  {
    sub_22E3BB2B4(v45, v37[8], (unint64_t)v37[9]);
  }
  else
  {
    v46 = *((_OWORD *)v37 + 4);
    *(_QWORD *)(v43 + 80) = v37[10];
    *(_OWORD *)v45 = v46;
  }
  *(_DWORD *)(v35 + 96 * v38 + 88) = *((_DWORD *)v37 + 22);
  ++*(_DWORD *)(a1 + 80);
  if (*(_QWORD **)__dst != v79)
    free(*(void **)__dst);
  if (SHIBYTE(v76) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v72[3]) < 0)
    operator delete(v72[1]);
  if (SHIBYTE(v72[0]) < 0)
    operator delete(v71[0]);
}

uint64_t sub_22E73DAF0(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_22E73DB40(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24FA70FC8;
  if (*(char *)(a1 + 903) < 0)
    operator delete(*(void **)(a1 + 880));
  if (*(char *)(a1 + 879) < 0)
    operator delete(*(void **)(a1 + 856));
  sub_22F2AD664((char **)(a1 + 72));
  sub_22E3B3C18((uint64_t *)(a1 + 40));
  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22E73DBB4(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  __int128 *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  __int128 *v12;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v3 = (__int128 *)*a1;
    v4 = *a1 + 96 * v2;
    do
    {
      v5 = *v3;
      *(_QWORD *)(a2 + 16) = *((_QWORD *)v3 + 2);
      *(_OWORD *)a2 = v5;
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
      *(_QWORD *)v3 = 0;
      v6 = *(__int128 *)((char *)v3 + 24);
      *(_QWORD *)(a2 + 40) = *((_QWORD *)v3 + 5);
      *(_OWORD *)(a2 + 24) = v6;
      *((_QWORD *)v3 + 4) = 0;
      *((_QWORD *)v3 + 5) = 0;
      *((_QWORD *)v3 + 3) = 0;
      v7 = *((_QWORD *)v3 + 6);
      *(_DWORD *)(a2 + 56) = *((_DWORD *)v3 + 14);
      *(_QWORD *)(a2 + 48) = v7;
      v8 = v3[4];
      *(_QWORD *)(a2 + 80) = *((_QWORD *)v3 + 10);
      *(_OWORD *)(a2 + 64) = v8;
      *((_QWORD *)v3 + 8) = 0;
      *((_QWORD *)v3 + 9) = 0;
      *((_QWORD *)v3 + 10) = 0;
      *(_DWORD *)(a2 + 88) = *((_DWORD *)v3 + 22);
      v3 += 6;
      a2 += 96;
    }
    while (v3 != (__int128 *)v4);
    v9 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v9)
    {
      v10 = (__int128 *)*a1;
      v11 = 6 * v9;
      do
      {
        v12 = &v10[v11];
        if (SBYTE7(v10[v11 - 1]) < 0)
          operator delete(*((void **)v12 - 4));
        if (*((char *)v12 - 49) < 0)
          operator delete(*((void **)&v10[v11 - 4] - 1));
        if (*((char *)&v10[v11 - 4] - 9) < 0)
          operator delete(*((void **)v12 - 12));
        v11 -= 6;
      }
      while (v11 * 16);
    }
  }
}

double sub_22E73DCB0(uint64_t a1, void *__src, size_t __len)
{
  __int128 *p_dst;
  size_t v7;
  size_t v8;
  void **v9;
  double result;
  __int128 __dst;
  unint64_t v12;

  if (!*(_BYTE *)(a1 + 27))
    *(_BYTE *)(a1 + 27) = 1;
  *(_BYTE *)(a1 + 26) = 1;
  if (!__src)
  {
    __dst = 0uLL;
    v12 = 0;
    goto LABEL_14;
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    p_dst = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&__dst + 1) = __len;
    v12 = v8 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v12) = __len;
    p_dst = &__dst;
    if (!__len)
      goto LABEL_13;
  }
  memmove(p_dst, __src, __len);
LABEL_13:
  *((_BYTE *)p_dst + __len) = 0;
LABEL_14:
  v9 = (void **)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*v9);
  result = *(double *)&__dst;
  *(_OWORD *)v9 = __dst;
  *(_QWORD *)(a1 + 48) = v12;
  return result;
}

uint64_t sub_22E73DDA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)a1 = &off_24FA71048;
  sub_22F2AD88C(a1);
  sub_22E3BAC64(a1 + 184);
  if (*(char *)(a1 + 183) < 0)
    operator delete(*(void **)(a1 + 160));
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 136);
    v4 = *(void **)(a1 + 128);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 9) < 0)
          operator delete(*(void **)(v3 - 32));
        if (*(char *)(v3 - 33) < 0)
          operator delete(*(void **)(v3 - 56));
        v3 -= 56;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 128);
    }
    *(_QWORD *)(a1 + 136) = v2;
    operator delete(v4);
  }
  sub_22E3B3AD0(a1 + 96);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  return sub_22F2AA26C(a1);
}

void sub_22E73DE60()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E73DE74()
{
  return 1;
}

uint64_t sub_22E73DE7C()
{
  return 1;
}

uint64_t sub_22E73DE84(uint64_t a1, _QWORD *a2, size_t a3)
{
  size_t v3;
  _QWORD *v4;
  unint64_t v6;
  size_t *v7;
  uint64_t v8;
  size_t v9;

  v3 = a3;
  v4 = a2;
  v6 = sub_22F2A7C2C(*(_QWORD *)(a1 + 16), a2, a3, 0, 1);
  if (v6)
  {
    do
    {
      v7 = (size_t *)v6;
      v8 = *(_QWORD *)(v6 + 8);
      if ((v8 & 2) == 0)
        break;
      v6 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while ((v8 & 0xFFFFFFFFFFFFFFFCLL) != 0);
    v9 = *v7;
    v4 = v7 + 4;
    v3 = v9;
  }
  (*(void (**)(_QWORD, _QWORD *, size_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 72))(*(_QWORD *)(a1 + 8), v4, v3, 0, 0);
  return 1;
}

void sub_22E73DF04()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E73DF18(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v9 = a9;
  if (a9)
  {
    v10 = *(_QWORD *)(result + 8);
    do
    {
      v11 = (_QWORD *)v9;
      v12 = *(_QWORD *)(v9 + 8);
      if ((v12 & 2) == 0)
        break;
      v9 = v12 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while (v9);
    return (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v10 + 72))(v10, v11 + 4, *v11, 0, 0);
  }
  return result;
}

void sub_22E73DF58()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E73DF6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = llvm::sys::path::is_absolute();
  if ((_DWORD)result)
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 72))(*(_QWORD *)(a1 + 8), a2, a3, 0, 0);
  return result;
}

void sub_22E73DFDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  _QWORD v14[2];
  char v15;
  __int16 v16;
  void *v17;
  __int128 v18;
  _QWORD v19[17];

  v19[16] = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a3 + 88);
  do
  {
    v7 = (_QWORD *)v6;
    v8 = *(_QWORD *)(v6 + 8);
    if ((v8 & 2) == 0)
      break;
    v6 = v8 & 0xFFFFFFFFFFFFFFFCLL;
  }
  while (v6);
  (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)a1 + 40))(a1, v7 + 4, *v7);
  v9 = (const void *)llvm::sys::path::parent_path();
  v10 = *(_QWORD *)(a3 + 40);
  v12 = *(const void **)v10;
  v11 = *(_QWORD *)(v10 + 8);
  if (v11 != v13 || v11 && memcmp(*(const void **)v10, v9, *(_QWORD *)(v10 + 8)))
  {
    v17 = v19;
    v18 = xmmword_22F44E310;
    v16 = 261;
    v14[0] = v12;
    v14[1] = v11;
    llvm::sys::path::filename();
    llvm::sys::path::append();
    sub_22F1D07D8(a2, v19, 0, 0, 1, (uint64_t)v14);
    if ((v15 & 1) == 0)
      (*(void (**)(uint64_t, void *, _QWORD))(*(_QWORD *)a1 + 40))(a1, v17, v18);
    if (v17 != v19)
      free(v17);
  }
}

uint64_t sub_22E73E168(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(result + 16) - *(_QWORD *)(result + 8);
  if (v2)
  {
    v4 = result;
    v5 = 0;
    v6 = v2 >> 3;
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8 * v5);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      ++v5;
    }
    while (v6 != v5);
  }
  return result;
}

uint64_t sub_22E73E1C8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(result + 16) - *(_QWORD *)(result + 8);
  if (v3)
  {
    v6 = result;
    v7 = 0;
    v8 = v3 >> 3;
    do
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8 * v7);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 24))(v9, a2, a3);
      ++v7;
    }
    while (v8 != v7);
  }
  return result;
}

uint64_t sub_22E73E238(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *i;
  uint64_t v7;

  v3 = *(uint64_t **)(result + 8);
  for (i = *(uint64_t **)(result + 16);
        v3 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, a2, a3))
  {
    v7 = *v3++;
  }
  return result;
}

uint64_t sub_22E73E28C(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(result + 16) - *(_QWORD *)(result + 8);
  if (v3)
  {
    v5 = result;
    v6 = 0;
    v7 = v3 >> 3;
    v8 = a2;
    do
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v6);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 40))(v9, v8, a3);
      ++v6;
    }
    while (v7 != v6);
  }
  return result;
}

uint64_t sub_22E73E2FC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(result + 16) - *(_QWORD *)(result + 8);
  if (v3)
  {
    v6 = result;
    v7 = 0;
    v8 = v3 >> 3;
    do
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8 * v7);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 48))(v9, a2, a3);
      ++v7;
    }
    while (v8 != v7);
  }
  return result;
}

uint64_t sub_22E73E36C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(result + 16) - *(_QWORD *)(result + 8);
  if (v2)
  {
    v4 = result;
    v5 = 0;
    v6 = v2 >> 3;
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8 * v5);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      ++v5;
    }
    while (v6 != v5);
  }
  return result;
}

uint64_t sub_22E73E3CC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(result + 16) - *(_QWORD *)(result + 8);
  if (v3)
  {
    v6 = result;
    v7 = 0;
    v8 = v3 >> 3;
    do
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8 * v7);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 24))(v9, a2, a3);
      ++v7;
    }
    while (v8 != v7);
  }
  return result;
}

uint64_t sub_22E73E43C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(result + 16) - *(_QWORD *)(result + 8);
  if (v3)
  {
    v6 = result;
    v7 = 0;
    v8 = v3 >> 3;
    do
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8 * v7);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 32))(v9, a2, a3);
      ++v7;
    }
    while (v8 != v7);
  }
  return result;
}

uint64_t sub_22E73E4AC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(result + 16) - *(_QWORD *)(result + 8);
  if (v3)
  {
    v6 = result;
    v7 = 0;
    v8 = v3 >> 3;
    do
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8 * v7);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 40))(v9, a2, a3);
      ++v7;
    }
    while (v8 != v7);
  }
  return result;
}

uint64_t sub_22E73E51C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(result + 16) - *(_QWORD *)(result + 8);
  if (v2)
  {
    v4 = result;
    v5 = 0;
    v6 = v2 >> 3;
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8 * v5);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 104))(v7, a2);
      ++v5;
    }
    while (v6 != v5);
  }
  return result;
}

uint64_t sub_22E73E57C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(result + 16) - *(_QWORD *)(result + 8);
  if (v2)
  {
    v4 = result;
    v5 = 0;
    v6 = v2 >> 3;
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8 * v5);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 144))(v7, a2);
      ++v5;
    }
    while (v6 != v5);
  }
  return result;
}

uint64_t sub_22E73E5DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  int64_t v29;
  _QWORD *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  _QWORD *v34;
  int64_t v35;
  _QWORD *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t *v41;
  _QWORD *v43;

  v2 = a1;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = &off_24FA71478;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v3 = *(_QWORD **)(a1 + 16);
  v43 = *(_QWORD **)(a1 + 24);
  if (v3 == v43)
    return v2;
  v41 = (uint64_t *)(a1 + 40);
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  do
  {
    v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 136))(*v3);
    if (v10)
    {
      v11 = v10;
      if (v8 >= v9)
      {
        v12 = v8 - v7;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 61)
          goto LABEL_55;
        if (((char *)v9 - (char *)v7) >> 2 > v13)
          v13 = ((char *)v9 - (char *)v7) >> 2;
        if ((unint64_t)((char *)v9 - (char *)v7) >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          if (v14 >> 61)
            goto LABEL_56;
          v15 = (char *)operator new(8 * v14);
        }
        else
        {
          v15 = 0;
        }
        v16 = (uint64_t *)&v15[8 * v12];
        *v16 = v11;
        v17 = v16 + 1;
        while (v8 != v7)
        {
          v18 = *--v8;
          *--v16 = v18;
        }
        v9 = (uint64_t *)&v15[8 * v14];
        if (v7)
          operator delete(v7);
        v8 = v17;
        v7 = v16;
      }
      else
      {
        *v8++ = v10;
      }
    }
    v19 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 144))(*v3);
    if (v19)
    {
      v20 = v19;
      if (v5 >= v6)
      {
        v21 = v5 - v4;
        v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 61)
          goto LABEL_55;
        if (((char *)v6 - (char *)v4) >> 2 > v22)
          v22 = ((char *)v6 - (char *)v4) >> 2;
        if ((unint64_t)((char *)v6 - (char *)v4) >= 0x7FFFFFFFFFFFFFF8)
          v23 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v23 = v22;
        if (v23)
        {
          if (v23 >> 61)
LABEL_56:
            sub_22E3B3F8C();
          v24 = (char *)operator new(8 * v23);
        }
        else
        {
          v24 = 0;
        }
        v25 = (uint64_t *)&v24[8 * v21];
        *v25 = v20;
        v26 = v25 + 1;
        while (v5 != v4)
        {
          v27 = *--v5;
          *--v25 = v27;
        }
        v6 = (uint64_t *)&v24[8 * v23];
        if (v4)
          operator delete(v4);
        v5 = v26;
        v4 = v25;
      }
      else
      {
        *v5++ = v19;
      }
    }
    ++v3;
  }
  while (v3 != v43);
  if (v7 != v8)
  {
    v28 = (_QWORD *)operator new();
    *v28 = &off_24FA713A0;
    v29 = (char *)v8 - (char *)v7;
    if ((char *)v8 - (char *)v7 < 0)
      goto LABEL_55;
    v30 = v28;
    v31 = (char *)operator new((char *)v8 - (char *)v7);
    v30[1] = v31;
    v30[2] = v31;
    v32 = &v31[v29];
    v30[3] = &v31[v29];
    memcpy(v31, v7, (char *)v8 - (char *)v7);
    v30[2] = v32;
    v33 = *v41;
    *v41 = (uint64_t)v30;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  }
  v2 = a1;
  if (v4 != v5)
  {
    v34 = (_QWORD *)operator new();
    *v34 = &off_24FA71338;
    v35 = (char *)v5 - (char *)v4;
    if ((char *)v5 - (char *)v4 >= 0)
    {
      v36 = v34;
      v37 = (char *)operator new((char *)v5 - (char *)v4);
      v36[1] = v37;
      v36[2] = v37;
      v38 = &v37[v35];
      v36[3] = &v37[v35];
      memcpy(v37, v4, (char *)v5 - (char *)v4);
      v36[2] = v38;
      v39 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 48) = v36;
      if (v39)
        (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
      goto LABEL_50;
    }
LABEL_55:
    abort();
  }
LABEL_50:
  if (v4)
    operator delete(v4);
  if (v7)
    operator delete(v7);
  return v2;
}

uint64_t sub_22E73E90C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t result;

  v2 = *(_QWORD **)(a1 + 16);
  v3 = *(_QWORD **)(a1 + 24);
  if (v2 == v3)
    return 1;
  LOBYTE(result) = 1;
  do
  {
    if ((result & 1) != 0)
      result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v2 + 24))(*v2, a2);
    else
      result = 0;
    ++v2;
  }
  while (v2 != v3);
  return result;
}

uint64_t sub_22E73E974(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;

  v2 = *(uint64_t **)(result + 16);
  for (i = *(uint64_t **)(result + 24);
        v2 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, a2))
  {
    v5 = *v2++;
  }
  return result;
}

uint64_t sub_22E73E9C0(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;

  v2 = *(uint64_t **)(result + 16);
  for (i = *(uint64_t **)(result + 24);
        v2 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, a2))
  {
    v5 = *v2++;
  }
  return result;
}

uint64_t sub_22E73EA0C(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;

  v2 = *(uint64_t **)(result + 16);
  for (i = *(uint64_t **)(result + 24);
        v2 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 56))(v5, a2))
  {
    v5 = *v2++;
  }
  return result;
}

uint64_t sub_22E73EA58(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;

  v2 = *(uint64_t **)(result + 16);
  for (i = *(uint64_t **)(result + 24);
        v2 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 64))(v5, a2))
  {
    v5 = *v2++;
  }
  return result;
}

uint64_t sub_22E73EAA4(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;

  v2 = *(uint64_t **)(result + 16);
  for (i = *(uint64_t **)(result + 24);
        v2 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 88))(v5, a2))
  {
    v5 = *v2++;
  }
  return result;
}

_QWORD *sub_22E73EAF0(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  BOOL v5;

  v2 = result[2];
  for (i = result[3]; v2 != i; v2 += 8)
  {
    result = *(_QWORD **)v2;
    if (*(_QWORD *)v2)
      v5 = *(_BYTE *)(*(_QWORD *)v2 + 8) == 0;
    else
      v5 = 1;
    if (!v5)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 176))(result, a2);
  }
  return result;
}

_QWORD *sub_22E73EB50(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;

  v1 = result[2];
  v2 = result[3];
  while (v1 != v2)
  {
    result = *(_QWORD **)v1;
    if (*(_QWORD *)v1)
      v3 = *(_BYTE *)(*(_QWORD *)v1 + 8) == 0;
    else
      v3 = 1;
    if (!v3)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 184))(result);
    v1 += 8;
  }
  return result;
}

void sub_22E73EB9C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_253E4BD18);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_253E4BD18))
    {
      qword_253E4BD20 = 850045863;
      xmmword_253E4BD28 = 0u;
      unk_253E4BD38 = 0u;
      xmmword_253E4BD48 = 0u;
      unk_253E4BD58 = 0u;
      unk_253E4BD64 = 0u;
      dword_253E4BD74 = 8;
      __cxa_atexit((void (*)(void *))sub_22E73EC24, &qword_253E4BD20, &dword_22E3A8000);
      __cxa_guard_release(&qword_253E4BD18);
    }
  }
}

void sub_22E73EC24(uint64_t a1)
{
  uint64_t v2;
  _QWORD *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  std::mutex::lock((std::mutex *)a1);
  v2 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v2)
  {
    for (i = *(_QWORD **)(a1 + 64); !*i || *i == -8; ++i)
      ;
  }
  else
  {
    i = *(_QWORD **)(a1 + 64);
  }
  v5 = *(_QWORD *)(a1 + 64) + 8 * v2;
  while (i != (_QWORD *)v5)
  {
    llvm::sys::fs::remove();
    do
    {
      v7 = i[1];
      ++i;
      v6 = v7;
      if (v7)
        v8 = v6 == -8;
      else
        v8 = 1;
    }
    while (v8);
  }
  std::mutex::unlock((std::mutex *)a1);
  sub_22E3B3AD0(a1 + 64);
  std::mutex::~mutex((std::mutex *)a1);
}

uint64_t *sub_22E73ECE8(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    sub_22E73EB9C();
    std::mutex::lock((std::mutex *)&qword_253E4BD20);
    sub_22E3B3968((uint64_t)&unk_253E4BD60);
    llvm::sys::fs::remove();
    std::mutex::unlock((std::mutex *)&qword_253E4BD20);
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    return (uint64_t *)MEMORY[0x2348A0E9C](v2, 0x1012C40EC159624);
  }
  return result;
}

uint64_t sub_22E73EDA4(uint64_t a1)
{
  sub_22E73ECE8((uint64_t *)(a1 + 32), 0);
  if (*(_BYTE *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(_BYTE *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_22E73EDEC(const void *a1@<X0>, size_t a2@<X1>, _DWORD *a3@<X2>, int a4@<W3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  llvm::raw_ostream *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  int v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  int v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unsigned int shared_owners;
  unsigned int shared_owners_high;
  unsigned int v52;
  unsigned int v53;
  __int128 v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unint64_t v61;
  int v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unint64_t v76;
  int v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  uint64_t v83;
  unint64_t v84;
  unsigned int v85;
  unint64_t v86;
  int v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unint64_t v101;
  int v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  __int128 v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  unint64_t v121;
  int v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  uint64_t v128;
  unint64_t v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  unint64_t v134;
  int v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  uint64_t v141;
  unint64_t v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  unint64_t v149;
  int v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  llvm::raw_ostream *v156;
  uint64_t v157;
  _DWORD *v158;
  int v159;
  int v160;
  int v161;
  int v162;
  unsigned int v163;
  int v165;
  std::__shared_weak_count *v166;
  std::__shared_weak_count *v167;
  std::__shared_weak_count *v168;
  std::__shared_weak_count *v169;
  std::__shared_weak_count *v170;
  std::__shared_weak_count *v171;
  std::__shared_weak_count *v172;
  std::__shared_weak_count *v173;
  std::__shared_weak_count *v174;
  std::__shared_weak_count *v175;
  std::__shared_weak_count *v176;
  std::__shared_weak_count *v177;
  std::__shared_weak_count *v178;
  std::__shared_weak_count *v179;
  int v180;
  __int128 v181;
  uint64_t v182;
  __int16 v183;
  __int16 v184;
  uint64_t v185;

  v185 = *MEMORY[0x24BDAC8D0];
  v11 = operator new();
  v12 = *a5;
  *a5 = 0;
  *(_QWORD *)v11 = &off_24FA71548;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  *(_BYTE *)(v11 + 24) = 1;
  *(_BYTE *)(v11 + 25) = a4;
  *(_BYTE *)(v11 + 26) = 0;
  v13 = (char *)operator new(0x860uLL);
  v14 = v13;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  *(_QWORD *)v13 = &off_24FA71598;
  *((_QWORD *)v13 + 3) = a3;
  v15 = v13 + 24;
  if (a3)
    ++*a3;
  *((_QWORD *)v13 + 4) = v13 + 56;
  *(_OWORD *)(v13 + 40) = xmmword_22F455C90;
  *((_QWORD *)v13 + 135) = v13 + 32;
  *((_QWORD *)v13 + 136) = 0;
  *((_QWORD *)v13 + 137) = 0x20000000;
  *((_QWORD *)v13 + 138) = 0;
  *((_DWORD *)v13 + 278) = 2;
  *((_OWORD *)v13 + 70) = 0u;
  *((_OWORD *)v13 + 71) = 0u;
  *((_OWORD *)v13 + 72) = 0u;
  *((_OWORD *)v13 + 73) = 0u;
  *((_QWORD *)v13 + 148) = 0;
  if (a1)
  {
    if (a2 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (a2 >= 0x17)
    {
      v17 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a2 | 7) != 0x17)
        v17 = a2 | 7;
      v165 = a4;
      v18 = v12;
      v19 = v11;
      v20 = v17 + 1;
      v16 = operator new(v17 + 1);
      *((_QWORD *)v14 + 149) = v16;
      v21 = v20 | 0x8000000000000000;
      v11 = v19;
      v12 = v18;
      a4 = v165;
      *((_QWORD *)v14 + 151) = v21;
      *((_QWORD *)v14 + 150) = a2;
    }
    else
    {
      v13[1215] = a2;
      v16 = v13 + 1192;
      if (!a2)
        goto LABEL_13;
    }
    memmove(v16, a1, a2);
LABEL_13:
    *((_BYTE *)v16 + a2) = 0;
    goto LABEL_14;
  }
  *((_QWORD *)v13 + 149) = 0;
  *((_QWORD *)v13 + 150) = 0;
  *((_QWORD *)v13 + 151) = 0;
LABEL_14:
  v22 = (llvm::raw_ostream *)(v14 + 1080);
  *((_QWORD *)v14 + 152) = v12;
  *((_DWORD *)v14 + 310) = 0;
  *(_OWORD *)(v14 + 1224) = 0u;
  *((_QWORD *)v14 + 156) = v14 + 1264;
  *((_QWORD *)v14 + 157) = 0x4000000000;
  *((_QWORD *)v14 + 222) = v14 + 1800;
  *((_QWORD *)v14 + 223) = 0;
  *((_QWORD *)v14 + 224) = 256;
  v14[2128] = 0;
  *((_QWORD *)v14 + 267) = 0;
  *((_DWORD *)v14 + 518) = 0;
  *(_OWORD *)(v14 + 2056) = 0u;
  *((_OWORD *)v14 + 130) = 0u;
  *((_DWORD *)v14 + 524) = 0;
  *((_DWORD *)v14 + 530) = 0;
  *(_OWORD *)(v14 + 2104) = 0u;
  *(_QWORD *)(v11 + 32) = v15;
  *(_QWORD *)(v11 + 40) = v14;
  if (a4)
  {
    v184 = 260;
    *(_QWORD *)&v181 = v14 + 1192;
    if (llvm::sys::fs::remove())
    {
      v23 = sub_22E740DF8(v11);
      v24 = v23;
      *(_QWORD *)(v23 + 312) = 0x37400000000;
      if (*(char *)(v23 + 311) < 0)
      {
        **(_BYTE **)(v23 + 288) = 0;
        *(_QWORD *)(v23 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v23 + 288) = 0;
        *(_BYTE *)(v23 + 311) = 0;
      }
      v181 = (unint64_t)(v23 + 320);
      v182 = v23;
      v183 = 1;
      *(_BYTE *)(v23 + 320) = 0;
      *(_DWORD *)(v23 + 664) = 0;
      v25 = *(unsigned int *)(v23 + 776);
      if ((_DWORD)v25)
      {
        v26 = *(_QWORD *)(v23 + 768);
        v27 = 56 * v25;
        do
        {
          if (*(char *)(v26 + v27 - 9) < 0)
            operator delete(*(void **)(v26 + v27 - 32));
          v27 -= 56;
        }
        while (v27);
      }
      *(_DWORD *)(v24 + 776) = 0;
      sub_22E3BB0B8((uint64_t)&v181);
      *(_BYTE *)(v11 + 25) = 0;
    }
  }
  v28 = *((_DWORD *)v14 + 276);
  v29 = *((_DWORD *)v14 + 277) | (68 << v28);
  *((_DWORD *)v14 + 277) = v29;
  v30 = v28 + 8;
  if (v30 >= 0x20)
  {
    sub_22E740FDC((const char ***)v14 + 135, v29);
    v159 = *((_DWORD *)v14 + 276);
    if (v159)
      v29 = 0x44u >> -(char)v159;
    else
      v29 = 0;
    v30 = ((_BYTE)v159 + 8) & 0x1F;
  }
  *((_DWORD *)v14 + 276) = v30;
  v31 = (73 << v30) | v29;
  *((_DWORD *)v14 + 277) = v31;
  if (v30 >= 0x18)
  {
    sub_22E740FDC((const char ***)v14 + 135, v31);
    v160 = *((_DWORD *)v14 + 276);
    if (v160)
      v31 = 0x49u >> -(char)v160;
    else
      v31 = 0;
    v32 = ((_BYTE)v160 + 8) & 0x1F;
  }
  else
  {
    v32 = v30 + 8;
  }
  v33 = (uint64_t)(v14 + 1248);
  *((_DWORD *)v14 + 276) = v32;
  v34 = (65 << v32) | v31;
  *((_DWORD *)v14 + 277) = v34;
  if (v32 >= 0x18)
  {
    sub_22E740FDC((const char ***)v14 + 135, v34);
    v161 = *((_DWORD *)v14 + 276);
    if (v161)
      v34 = 0x41u >> -(char)v161;
    else
      v34 = 0;
    v35 = ((_BYTE)v161 + 8) & 0x1F;
  }
  else
  {
    v35 = v32 + 8;
  }
  v36 = (uint64_t)(v14 + 1224);
  *((_DWORD *)v14 + 276) = v35;
  v37 = (71 << v35) | v34;
  *((_DWORD *)v14 + 277) = v37;
  if (v35 >= 0x18)
  {
    sub_22E740FDC((const char ***)v14 + 135, v37);
    v162 = *((_DWORD *)v14 + 276);
    v163 = 0x47u >> -(char)v162;
    if (!v162)
      v163 = 0;
    *((_DWORD *)v14 + 277) = v163;
    v38 = ((_BYTE)v162 + 8) & 0x1F;
  }
  else
  {
    v38 = v35 + 8;
  }
  *((_DWORD *)v14 + 276) = v38;
  sub_22E74181C((uint64_t)(v14 + 1080), 0, 2u);
  *((_DWORD *)v14 + 279) = -1;
  sub_22E6C61A4((uint64_t **)v14 + 146);
  sub_22E74106C(8u, "Meta", (llvm::raw_ostream *)(v14 + 1080), (uint64_t)(v14 + 1248));
  sub_22E741190(1u, "Version", (llvm::raw_ostream *)(v14 + 1080), (uint64_t)(v14 + 1248));
  v39 = (std::__shared_weak_count *)operator new(0x228uLL);
  v39->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v39->__shared_owners_;
  v39->__vftable = (std::__shared_weak_count_vtbl *)&unk_24FA715D0;
  v39[3].std::__shared_count = 0u;
  *(_OWORD *)&v39[3].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v39[4].__shared_owners_ = 0u;
  v39[5].std::__shared_count = 0u;
  *(_OWORD *)&v39[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v39[6].__shared_owners_ = 0u;
  v39[7].std::__shared_count = 0u;
  *(_OWORD *)&v39[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v39[8].__shared_owners_ = 0u;
  v39[9].std::__shared_count = 0u;
  *(_OWORD *)&v39[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v39[10].__shared_owners_ = 0u;
  v39[11].std::__shared_count = 0u;
  *(_OWORD *)&v39[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v39[12].__shared_owners_ = 0u;
  v39[13].std::__shared_count = 0u;
  *(_OWORD *)&v39[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v39[14].__shared_owners_ = 0u;
  v39[15].std::__shared_count = 0u;
  *(_OWORD *)&v39[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v39[16].__shared_owners_ = 0u;
  v39[17].std::__shared_count = 0u;
  *(_OWORD *)&v39[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v39[18].__shared_owners_ = 0u;
  v39[19].std::__shared_count = 0u;
  *(_OWORD *)&v39[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v39[20].__shared_owners_ = 0u;
  v39[21].std::__shared_count = 0u;
  *(_OWORD *)&v39[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v39[22].__shared_owners_ = 0u;
  *(_OWORD *)&v39[1].__shared_weak_owners_ = xmmword_22F45E070;
  v39->__shared_weak_owners_ = 0;
  v39[1].__vftable = (std::__shared_weak_count_vtbl *)&v39[1].__shared_weak_owners_;
  *(_OWORD *)&v39[2].__shared_owners_ = xmmword_22F45E080;
  v39[1].__shared_owners_ = 0x2000000002;
  *(_QWORD *)&v181 = v39 + 1;
  *((_QWORD *)&v181 + 1) = v39;
  do
    v41 = __ldxr(p_shared_owners);
  while (__stxr(v41 + 1, p_shared_owners));
  v42 = sub_22E741278((uint64_t)v22, 8u, (uint64_t)&v181);
  LODWORD(v178) = 1;
  sub_22E742CE8(v36, &v178)[1] = v42;
  v43 = (std::__shared_weak_count *)*((_QWORD *)&v181 + 1);
  if (*((_QWORD *)&v181 + 1))
  {
    v44 = (unint64_t *)(*((_QWORD *)&v181 + 1) + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = v11;
  sub_22E74106C(9u, "Diag", v22, v33);
  sub_22E741190(2u, "DiagInfo", v22, v33);
  sub_22E741190(3u, "SrcRange", v22, v33);
  sub_22E741190(5u, "CatName", v22, v33);
  sub_22E741190(4u, "DiagFlag", v22, v33);
  sub_22E741190(6u, "FileName", v22, v33);
  sub_22E741190(7u, "FixIt", v22, v33);
  sub_22E741190(8u, "SourceFileContents", v22, v33);
  v47 = (std::__shared_weak_count *)operator new(0x228uLL);
  v47->__shared_owners_ = 0;
  v48 = (unint64_t *)&v47->__shared_owners_;
  v47->__vftable = (std::__shared_weak_count_vtbl *)&unk_24FA715D0;
  *(_OWORD *)&v47[1].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v47[2].__shared_owners_ = 0u;
  v47[3].std::__shared_count = 0u;
  *(_OWORD *)&v47[3].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v47[4].__shared_owners_ = 0u;
  v47[5].std::__shared_count = 0u;
  *(_OWORD *)&v47[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v47[6].__shared_owners_ = 0u;
  v47[7].std::__shared_count = 0u;
  *(_OWORD *)&v47[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v47[8].__shared_owners_ = 0u;
  v47[9].std::__shared_count = 0u;
  *(_OWORD *)&v47[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v47[10].__shared_owners_ = 0u;
  v47[11].std::__shared_count = 0u;
  *(_OWORD *)&v47[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v47[12].__shared_owners_ = 0u;
  v47[13].std::__shared_count = 0u;
  *(_OWORD *)&v47[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v47[14].__shared_owners_ = 0u;
  v47[15].std::__shared_count = 0u;
  *(_OWORD *)&v47[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v47[16].__shared_owners_ = 0u;
  v47[17].std::__shared_count = 0u;
  *(_OWORD *)&v47[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v47[18].__shared_owners_ = 0u;
  v47[19].std::__shared_count = 0u;
  *(_OWORD *)&v47[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v47[20].__shared_owners_ = 0u;
  v47[21].std::__shared_count = 0u;
  *(_OWORD *)&v47[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v47[22].__shared_owners_ = 0u;
  v47->__shared_weak_owners_ = 0;
  v47[1].__vftable = (std::__shared_weak_count_vtbl *)&v47[1].__shared_weak_owners_;
  v47[1].__shared_owners_ = 0x2000000000;
  do
    v49 = __ldaxr(p_shared_owners);
  while (__stlxr(v49 - 1, p_shared_owners));
  if (!v49)
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
  shared_owners = v47[1].__shared_owners_;
  if (shared_owners >= HIDWORD(v47[1].__shared_owners_))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    shared_owners = v47[1].__shared_owners_;
  }
  *((_OWORD *)&v47[1].~__shared_weak_count + shared_owners) = xmmword_22F45E090;
  shared_owners_high = HIDWORD(v47[1].__shared_owners_);
  v52 = LODWORD(v47[1].__shared_owners_) + 1;
  LODWORD(v47[1].__shared_owners_) = v52;
  if (v52 >= shared_owners_high)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v52 = v47[1].__shared_owners_;
  }
  *((_OWORD *)&v47[1].~__shared_weak_count + v52) = xmmword_22F45E0A0;
  ++LODWORD(v47[1].__shared_owners_);
  sub_22E7415CC((uint64_t)&v47[1]);
  v53 = v47[1].__shared_owners_;
  if (v53 >= HIDWORD(v47[1].__shared_owners_))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v53 = v47[1].__shared_owners_;
  }
  v54 = xmmword_22F45E0B0;
  *((_OWORD *)&v47[1].~__shared_weak_count + v53) = xmmword_22F45E0B0;
  v55 = HIDWORD(v47[1].__shared_owners_);
  v56 = LODWORD(v47[1].__shared_owners_) + 1;
  LODWORD(v47[1].__shared_owners_) = v56;
  if (v56 >= v55)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v54 = xmmword_22F45E0B0;
    v56 = v47[1].__shared_owners_;
  }
  *((_OWORD *)&v47[1].~__shared_weak_count + v56) = v54;
  v57 = HIDWORD(v47[1].__shared_owners_);
  v58 = LODWORD(v47[1].__shared_owners_) + 1;
  LODWORD(v47[1].__shared_owners_) = v58;
  if (v58 >= v57)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v58 = v47[1].__shared_owners_;
  }
  *((_OWORD *)&v47[1].~__shared_weak_count + v58) = xmmword_22F45E0C0;
  v59 = HIDWORD(v47[1].__shared_owners_);
  v60 = LODWORD(v47[1].__shared_owners_) + 1;
  LODWORD(v47[1].__shared_owners_) = v60;
  if (v60 >= v59)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v60 = v47[1].__shared_owners_;
  }
  *((_OWORD *)&v47[1].~__shared_weak_count + v60) = xmmword_22F45E0D0;
  ++LODWORD(v47[1].__shared_owners_);
  v178 = v47 + 1;
  v179 = v47;
  do
    v61 = __ldxr(v48);
  while (__stxr(v61 + 1, v48));
  v62 = sub_22E741278((uint64_t)v22, 9u, (uint64_t)&v178);
  LODWORD(v176) = 2;
  sub_22E742CE8(v36, &v176)[1] = v62;
  v63 = v179;
  if (v179)
  {
    v64 = (unint64_t *)&v179->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = (std::__shared_weak_count *)operator new(0x228uLL);
  v66->__shared_owners_ = 0;
  v67 = (unint64_t *)&v66->__shared_owners_;
  *(_OWORD *)&v66[1].__shared_weak_owners_ = 0u;
  v66->__vftable = (std::__shared_weak_count_vtbl *)&unk_24FA715D0;
  *(_OWORD *)&v66[2].__shared_owners_ = 0u;
  v66[3].std::__shared_count = 0u;
  *(_OWORD *)&v66[3].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v66[4].__shared_owners_ = 0u;
  v66[5].std::__shared_count = 0u;
  *(_OWORD *)&v66[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v66[6].__shared_owners_ = 0u;
  v66[7].std::__shared_count = 0u;
  *(_OWORD *)&v66[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v66[8].__shared_owners_ = 0u;
  v66[9].std::__shared_count = 0u;
  *(_OWORD *)&v66[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v66[10].__shared_owners_ = 0u;
  v66[11].std::__shared_count = 0u;
  *(_OWORD *)&v66[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v66[12].__shared_owners_ = 0u;
  v66[13].std::__shared_count = 0u;
  *(_OWORD *)&v66[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v66[14].__shared_owners_ = 0u;
  v66[15].std::__shared_count = 0u;
  *(_OWORD *)&v66[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v66[16].__shared_owners_ = 0u;
  v66[17].std::__shared_count = 0u;
  *(_OWORD *)&v66[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v66[18].__shared_owners_ = 0u;
  v66[19].std::__shared_count = 0u;
  *(_OWORD *)&v66[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v66[20].__shared_owners_ = 0u;
  v66[21].std::__shared_count = 0u;
  *(_OWORD *)&v66[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v66[22].__shared_owners_ = 0u;
  v66->__shared_weak_owners_ = 0;
  v66[1].__vftable = (std::__shared_weak_count_vtbl *)&v66[1].__shared_weak_owners_;
  v66[1].__shared_owners_ = 0x2000000000;
  do
    v68 = __ldaxr(v48);
  while (__stlxr(v68 - 1, v48));
  if (!v68)
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
  }
  v69 = v66[1].__shared_owners_;
  if (v69 >= HIDWORD(v66[1].__shared_owners_))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v69 = v66[1].__shared_owners_;
  }
  *((_OWORD *)&v66[1].~__shared_weak_count + v69) = xmmword_22F45E0E0;
  v70 = HIDWORD(v66[1].__shared_owners_);
  v71 = LODWORD(v66[1].__shared_owners_) + 1;
  LODWORD(v66[1].__shared_owners_) = v71;
  if (v71 >= v70)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v71 = v66[1].__shared_owners_;
  }
  *((_OWORD *)&v66[1].~__shared_weak_count + v71) = xmmword_22F45E0F0;
  v72 = HIDWORD(v66[1].__shared_owners_);
  v73 = LODWORD(v66[1].__shared_owners_) + 1;
  LODWORD(v66[1].__shared_owners_) = v73;
  if (v73 >= v72)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v73 = v66[1].__shared_owners_;
  }
  *((_OWORD *)&v66[1].~__shared_weak_count + v73) = xmmword_22F45E100;
  v74 = HIDWORD(v66[1].__shared_owners_);
  v75 = LODWORD(v66[1].__shared_owners_) + 1;
  LODWORD(v66[1].__shared_owners_) = v75;
  if (v75 >= v74)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v75 = v66[1].__shared_owners_;
  }
  *((_OWORD *)&v66[1].~__shared_weak_count + v75) = xmmword_22F45E0D0;
  ++LODWORD(v66[1].__shared_owners_);
  v176 = v66 + 1;
  v177 = v66;
  do
    v76 = __ldxr(v67);
  while (__stxr(v76 + 1, v67));
  v77 = sub_22E741278((uint64_t)v22, 9u, (uint64_t)&v176);
  LODWORD(v174) = 5;
  sub_22E742CE8(v36, &v174)[1] = v77;
  v78 = v177;
  if (v177)
  {
    v79 = (unint64_t *)&v177->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = (std::__shared_weak_count *)operator new(0x228uLL);
  v81->__shared_owners_ = 0;
  v82 = (unint64_t *)&v81->__shared_owners_;
  *(_OWORD *)&v81[1].__shared_weak_owners_ = 0u;
  v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_24FA715D0;
  *(_OWORD *)&v81[2].__shared_owners_ = 0u;
  v83 = (uint64_t)&v81[1];
  v81[3].std::__shared_count = 0u;
  *(_OWORD *)&v81[3].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v81[4].__shared_owners_ = 0u;
  v81[5].std::__shared_count = 0u;
  *(_OWORD *)&v81[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v81[6].__shared_owners_ = 0u;
  v81[7].std::__shared_count = 0u;
  *(_OWORD *)&v81[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v81[8].__shared_owners_ = 0u;
  v81[9].std::__shared_count = 0u;
  *(_OWORD *)&v81[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v81[10].__shared_owners_ = 0u;
  v81[11].std::__shared_count = 0u;
  *(_OWORD *)&v81[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v81[12].__shared_owners_ = 0u;
  v81[13].std::__shared_count = 0u;
  *(_OWORD *)&v81[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v81[14].__shared_owners_ = 0u;
  v81[15].std::__shared_count = 0u;
  *(_OWORD *)&v81[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v81[16].__shared_owners_ = 0u;
  v81[17].std::__shared_count = 0u;
  *(_OWORD *)&v81[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v81[18].__shared_owners_ = 0u;
  v81[19].std::__shared_count = 0u;
  *(_OWORD *)&v81[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v81[20].__shared_owners_ = 0u;
  v81[21].std::__shared_count = 0u;
  *(_OWORD *)&v81[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v81[22].__shared_owners_ = 0u;
  v81->__shared_weak_owners_ = 0;
  v81[1].__vftable = (std::__shared_weak_count_vtbl *)&v81[1].__shared_weak_owners_;
  v81[1].__shared_owners_ = 0x2000000000;
  do
    v84 = __ldaxr(v67);
  while (__stlxr(v84 - 1, v67));
  if (!v84)
  {
    ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
    std::__shared_weak_count::__release_weak(v66);
  }
  v85 = v81[1].__shared_owners_;
  if (v85 >= HIDWORD(v81[1].__shared_owners_))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v85 = v81[1].__shared_owners_;
  }
  *((_OWORD *)&v81[1].~__shared_weak_count + v85) = xmmword_22F45E110;
  ++LODWORD(v81[1].__shared_owners_);
  sub_22E7415CC(v83);
  sub_22E7415CC(v83);
  v174 = v81 + 1;
  v175 = v81;
  do
    v86 = __ldxr(v82);
  while (__stxr(v86 + 1, v82));
  v87 = sub_22E741278((uint64_t)v22, 9u, (uint64_t)&v174);
  LODWORD(v172) = 3;
  sub_22E742CE8(v36, &v172)[1] = v87;
  v88 = v175;
  if (v175)
  {
    v89 = (unint64_t *)&v175->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = (std::__shared_weak_count *)operator new(0x228uLL);
  v91->__shared_owners_ = 0;
  v92 = (unint64_t *)&v91->__shared_owners_;
  *(_OWORD *)&v91[1].__shared_weak_owners_ = 0u;
  v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_24FA715D0;
  *(_OWORD *)&v91[2].__shared_owners_ = 0u;
  v91[3].std::__shared_count = 0u;
  *(_OWORD *)&v91[3].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v91[4].__shared_owners_ = 0u;
  v91[5].std::__shared_count = 0u;
  *(_OWORD *)&v91[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v91[6].__shared_owners_ = 0u;
  v91[7].std::__shared_count = 0u;
  *(_OWORD *)&v91[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v91[8].__shared_owners_ = 0u;
  v91[9].std::__shared_count = 0u;
  *(_OWORD *)&v91[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v91[10].__shared_owners_ = 0u;
  v91[11].std::__shared_count = 0u;
  *(_OWORD *)&v91[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v91[12].__shared_owners_ = 0u;
  v91[13].std::__shared_count = 0u;
  *(_OWORD *)&v91[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v91[14].__shared_owners_ = 0u;
  v91[15].std::__shared_count = 0u;
  *(_OWORD *)&v91[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v91[16].__shared_owners_ = 0u;
  v91[17].std::__shared_count = 0u;
  *(_OWORD *)&v91[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v91[18].__shared_owners_ = 0u;
  v91[19].std::__shared_count = 0u;
  *(_OWORD *)&v91[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v91[20].__shared_owners_ = 0u;
  v91[21].std::__shared_count = 0u;
  *(_OWORD *)&v91[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v91[22].__shared_owners_ = 0u;
  v91->__shared_weak_owners_ = 0;
  v91[1].__vftable = (std::__shared_weak_count_vtbl *)&v91[1].__shared_weak_owners_;
  v91[1].__shared_owners_ = 0x2000000000;
  do
    v93 = __ldaxr(v82);
  while (__stlxr(v93 - 1, v82));
  if (!v93)
  {
    ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
    std::__shared_weak_count::__release_weak(v81);
  }
  v94 = v91[1].__shared_owners_;
  if (v94 >= HIDWORD(v91[1].__shared_owners_))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v94 = v91[1].__shared_owners_;
  }
  *((_OWORD *)&v91[1].~__shared_weak_count + v94) = xmmword_22F45E120;
  v95 = HIDWORD(v91[1].__shared_owners_);
  v96 = LODWORD(v91[1].__shared_owners_) + 1;
  LODWORD(v91[1].__shared_owners_) = v96;
  if (v96 >= v95)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v96 = v91[1].__shared_owners_;
  }
  *((_OWORD *)&v91[1].~__shared_weak_count + v96) = xmmword_22F45E0B0;
  v97 = HIDWORD(v91[1].__shared_owners_);
  v98 = LODWORD(v91[1].__shared_owners_) + 1;
  LODWORD(v91[1].__shared_owners_) = v98;
  if (v98 >= v97)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v98 = v91[1].__shared_owners_;
  }
  *((_OWORD *)&v91[1].~__shared_weak_count + v98) = xmmword_22F45E0F0;
  v99 = HIDWORD(v91[1].__shared_owners_);
  v100 = LODWORD(v91[1].__shared_owners_) + 1;
  LODWORD(v91[1].__shared_owners_) = v100;
  if (v100 >= v99)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v100 = v91[1].__shared_owners_;
  }
  *((_OWORD *)&v91[1].~__shared_weak_count + v100) = xmmword_22F45E0D0;
  ++LODWORD(v91[1].__shared_owners_);
  v172 = v91 + 1;
  v173 = v91;
  do
    v101 = __ldxr(v92);
  while (__stxr(v101 + 1, v92));
  v102 = sub_22E741278((uint64_t)v22, 9u, (uint64_t)&v172);
  LODWORD(v170) = 4;
  sub_22E742CE8(v36, &v170)[1] = v102;
  v103 = v173;
  if (v173)
  {
    v104 = (unint64_t *)&v173->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = (std::__shared_weak_count *)operator new(0x228uLL);
  v106->__shared_owners_ = 0;
  v107 = (unint64_t *)&v106->__shared_owners_;
  *(_OWORD *)&v106[1].__shared_weak_owners_ = 0u;
  v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_24FA715D0;
  *(_OWORD *)&v106[2].__shared_owners_ = 0u;
  v106[3].std::__shared_count = 0u;
  *(_OWORD *)&v106[3].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v106[4].__shared_owners_ = 0u;
  v106[5].std::__shared_count = 0u;
  *(_OWORD *)&v106[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v106[6].__shared_owners_ = 0u;
  v106[7].std::__shared_count = 0u;
  *(_OWORD *)&v106[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v106[8].__shared_owners_ = 0u;
  v106[9].std::__shared_count = 0u;
  *(_OWORD *)&v106[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v106[10].__shared_owners_ = 0u;
  v106[11].std::__shared_count = 0u;
  *(_OWORD *)&v106[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v106[12].__shared_owners_ = 0u;
  v106[13].std::__shared_count = 0u;
  *(_OWORD *)&v106[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v106[14].__shared_owners_ = 0u;
  v106[15].std::__shared_count = 0u;
  *(_OWORD *)&v106[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v106[16].__shared_owners_ = 0u;
  v106[17].std::__shared_count = 0u;
  *(_OWORD *)&v106[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v106[18].__shared_owners_ = 0u;
  v106[19].std::__shared_count = 0u;
  *(_OWORD *)&v106[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v106[20].__shared_owners_ = 0u;
  v106[21].std::__shared_count = 0u;
  *(_OWORD *)&v106[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v106[22].__shared_owners_ = 0u;
  v106->__shared_weak_owners_ = 0;
  v106[1].__vftable = (std::__shared_weak_count_vtbl *)&v106[1].__shared_weak_owners_;
  v106[1].__shared_owners_ = 0x2000000000;
  do
    v108 = __ldaxr(v92);
  while (__stlxr(v108 - 1, v92));
  if (!v108)
  {
    ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
    std::__shared_weak_count::__release_weak(v91);
  }
  v109 = v106[1].__shared_owners_;
  if (v109 >= HIDWORD(v106[1].__shared_owners_))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v109 = v106[1].__shared_owners_;
  }
  *((_OWORD *)&v106[1].~__shared_weak_count + v109) = xmmword_22F45E130;
  v110 = HIDWORD(v106[1].__shared_owners_);
  v111 = LODWORD(v106[1].__shared_owners_) + 1;
  LODWORD(v106[1].__shared_owners_) = v111;
  if (v111 >= v110)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v111 = v106[1].__shared_owners_;
  }
  *((_OWORD *)&v106[1].~__shared_weak_count + v111) = xmmword_22F45E0B0;
  v112 = HIDWORD(v106[1].__shared_owners_);
  v113 = LODWORD(v106[1].__shared_owners_) + 1;
  LODWORD(v106[1].__shared_owners_) = v113;
  if (v113 >= v112)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v113 = v106[1].__shared_owners_;
  }
  v114 = xmmword_22F45E080;
  *((_OWORD *)&v106[1].~__shared_weak_count + v113) = xmmword_22F45E080;
  v115 = HIDWORD(v106[1].__shared_owners_);
  v116 = LODWORD(v106[1].__shared_owners_) + 1;
  LODWORD(v106[1].__shared_owners_) = v116;
  if (v116 >= v115)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v114 = xmmword_22F45E080;
    v116 = v106[1].__shared_owners_;
  }
  *((_OWORD *)&v106[1].~__shared_weak_count + v116) = v114;
  v117 = HIDWORD(v106[1].__shared_owners_);
  v118 = LODWORD(v106[1].__shared_owners_) + 1;
  LODWORD(v106[1].__shared_owners_) = v118;
  if (v118 >= v117)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v118 = v106[1].__shared_owners_;
  }
  *((_OWORD *)&v106[1].~__shared_weak_count + v118) = xmmword_22F45E0F0;
  v119 = HIDWORD(v106[1].__shared_owners_);
  v120 = LODWORD(v106[1].__shared_owners_) + 1;
  LODWORD(v106[1].__shared_owners_) = v120;
  if (v120 >= v119)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v120 = v106[1].__shared_owners_;
  }
  *((_OWORD *)&v106[1].~__shared_weak_count + v120) = xmmword_22F45E0D0;
  ++LODWORD(v106[1].__shared_owners_);
  v170 = v106 + 1;
  v171 = v106;
  do
    v121 = __ldxr(v107);
  while (__stxr(v121 + 1, v107));
  v122 = sub_22E741278((uint64_t)v22, 9u, (uint64_t)&v170);
  LODWORD(v168) = 6;
  sub_22E742CE8(v36, &v168)[1] = v122;
  v123 = v171;
  if (v171)
  {
    v124 = (unint64_t *)&v171->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = (std::__shared_weak_count *)operator new(0x228uLL);
  v126->__shared_owners_ = 0;
  v127 = (unint64_t *)&v126->__shared_owners_;
  *(_OWORD *)&v126[1].__shared_weak_owners_ = 0u;
  v126->__vftable = (std::__shared_weak_count_vtbl *)&unk_24FA715D0;
  *(_OWORD *)&v126[2].__shared_owners_ = 0u;
  v128 = (uint64_t)&v126[1];
  v126[3].std::__shared_count = 0u;
  *(_OWORD *)&v126[3].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v126[4].__shared_owners_ = 0u;
  v126[5].std::__shared_count = 0u;
  *(_OWORD *)&v126[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v126[6].__shared_owners_ = 0u;
  v126[7].std::__shared_count = 0u;
  *(_OWORD *)&v126[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v126[8].__shared_owners_ = 0u;
  v126[9].std::__shared_count = 0u;
  *(_OWORD *)&v126[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v126[10].__shared_owners_ = 0u;
  v126[11].std::__shared_count = 0u;
  *(_OWORD *)&v126[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v126[12].__shared_owners_ = 0u;
  v126[13].std::__shared_count = 0u;
  *(_OWORD *)&v126[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v126[14].__shared_owners_ = 0u;
  v126[15].std::__shared_count = 0u;
  *(_OWORD *)&v126[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v126[16].__shared_owners_ = 0u;
  v126[17].std::__shared_count = 0u;
  *(_OWORD *)&v126[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v126[18].__shared_owners_ = 0u;
  v126[19].std::__shared_count = 0u;
  *(_OWORD *)&v126[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v126[20].__shared_owners_ = 0u;
  v126[21].std::__shared_count = 0u;
  *(_OWORD *)&v126[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v126[22].__shared_owners_ = 0u;
  v126->__shared_weak_owners_ = 0;
  v126[1].__vftable = (std::__shared_weak_count_vtbl *)&v126[1].__shared_weak_owners_;
  v126[1].__shared_owners_ = 0x2000000000;
  do
    v129 = __ldaxr(v107);
  while (__stlxr(v129 - 1, v107));
  if (!v129)
  {
    ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
    std::__shared_weak_count::__release_weak(v106);
  }
  v130 = v126[1].__shared_owners_;
  if (v130 >= HIDWORD(v126[1].__shared_owners_))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v130 = v126[1].__shared_owners_;
  }
  *((_OWORD *)&v126[1].~__shared_weak_count + v130) = xmmword_22F45E140;
  ++LODWORD(v126[1].__shared_owners_);
  sub_22E7415CC(v128);
  sub_22E7415CC(v128);
  v131 = v126[1].__shared_owners_;
  if (v131 >= HIDWORD(v126[1].__shared_owners_))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v131 = v126[1].__shared_owners_;
  }
  *((_OWORD *)&v126[1].~__shared_weak_count + v131) = xmmword_22F45E0F0;
  v132 = HIDWORD(v126[1].__shared_owners_);
  v133 = LODWORD(v126[1].__shared_owners_) + 1;
  LODWORD(v126[1].__shared_owners_) = v133;
  if (v133 >= v132)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v133 = v126[1].__shared_owners_;
  }
  *((_OWORD *)&v126[1].~__shared_weak_count + v133) = xmmword_22F45E0D0;
  ++LODWORD(v126[1].__shared_owners_);
  v168 = v126 + 1;
  v169 = v126;
  do
    v134 = __ldxr(v127);
  while (__stxr(v134 + 1, v127));
  v135 = sub_22E741278((uint64_t)v22, 9u, (uint64_t)&v168);
  LODWORD(v166) = 7;
  sub_22E742CE8(v36, &v166)[1] = v135;
  v136 = v169;
  if (v169)
  {
    v137 = (unint64_t *)&v169->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  v139 = (std::__shared_weak_count *)operator new(0x228uLL);
  v139->__shared_owners_ = 0;
  v140 = (unint64_t *)&v139->__shared_owners_;
  *(_OWORD *)&v139[1].__shared_weak_owners_ = 0u;
  v139->__vftable = (std::__shared_weak_count_vtbl *)&unk_24FA715D0;
  *(_OWORD *)&v139[2].__shared_owners_ = 0u;
  v141 = (uint64_t)&v139[1];
  v139[3].std::__shared_count = 0u;
  *(_OWORD *)&v139[3].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v139[4].__shared_owners_ = 0u;
  v139[5].std::__shared_count = 0u;
  *(_OWORD *)&v139[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v139[6].__shared_owners_ = 0u;
  v139[7].std::__shared_count = 0u;
  *(_OWORD *)&v139[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v139[8].__shared_owners_ = 0u;
  v139[9].std::__shared_count = 0u;
  *(_OWORD *)&v139[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v139[10].__shared_owners_ = 0u;
  v139[11].std::__shared_count = 0u;
  *(_OWORD *)&v139[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v139[12].__shared_owners_ = 0u;
  v139[13].std::__shared_count = 0u;
  *(_OWORD *)&v139[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v139[14].__shared_owners_ = 0u;
  v139[15].std::__shared_count = 0u;
  *(_OWORD *)&v139[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v139[16].__shared_owners_ = 0u;
  v139[17].std::__shared_count = 0u;
  *(_OWORD *)&v139[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v139[18].__shared_owners_ = 0u;
  v139[19].std::__shared_count = 0u;
  *(_OWORD *)&v139[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v139[20].__shared_owners_ = 0u;
  v139[21].std::__shared_count = 0u;
  *(_OWORD *)&v139[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v139[22].__shared_owners_ = 0u;
  v139->__shared_weak_owners_ = 0;
  v139[1].__vftable = (std::__shared_weak_count_vtbl *)&v139[1].__shared_weak_owners_;
  v139[1].__shared_owners_ = 0x2000000000;
  do
    v142 = __ldaxr(v127);
  while (__stlxr(v142 - 1, v127));
  if (!v142)
  {
    ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
    std::__shared_weak_count::__release_weak(v126);
  }
  v143 = v139[1].__shared_owners_;
  if (v143 >= HIDWORD(v139[1].__shared_owners_))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v143 = v139[1].__shared_owners_;
  }
  *((_OWORD *)&v139[1].~__shared_weak_count + v143) = xmmword_22F45E150;
  v144 = HIDWORD(v139[1].__shared_owners_);
  v145 = LODWORD(v139[1].__shared_owners_) + 1;
  LODWORD(v139[1].__shared_owners_) = v145;
  if (v145 >= v144)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v145 = v139[1].__shared_owners_;
  }
  *((_OWORD *)&v139[1].~__shared_weak_count + v145) = xmmword_22F45E0B0;
  ++LODWORD(v139[1].__shared_owners_);
  sub_22E7415CC(v141);
  sub_22E7415CC(v141);
  v146 = v139[1].__shared_owners_;
  if (v146 >= HIDWORD(v139[1].__shared_owners_))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v146 = v139[1].__shared_owners_;
  }
  *((_OWORD *)&v139[1].~__shared_weak_count + v146) = xmmword_22F45E0F0;
  v147 = HIDWORD(v139[1].__shared_owners_);
  v148 = LODWORD(v139[1].__shared_owners_) + 1;
  LODWORD(v139[1].__shared_owners_) = v148;
  if (v148 >= v147)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v148 = v139[1].__shared_owners_;
  }
  *((_OWORD *)&v139[1].~__shared_weak_count + v148) = xmmword_22F45E0D0;
  ++LODWORD(v139[1].__shared_owners_);
  v166 = v139 + 1;
  v167 = v139;
  do
    v149 = __ldxr(v140);
  while (__stxr(v149 + 1, v140));
  v150 = sub_22E741278((uint64_t)v22, 9u, (uint64_t)&v166);
  v180 = 8;
  sub_22E742CE8(v36, &v180)[1] = v150;
  v151 = v167;
  if (v167)
  {
    v152 = (unint64_t *)&v167->__shared_owners_;
    do
      v153 = __ldaxr(v152);
    while (__stlxr(v153 - 1, v152));
    if (!v153)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }
  sub_22E7416F4((uint64_t)v22);
  do
    v154 = __ldaxr(v140);
  while (__stlxr(v154 - 1, v140));
  if (!v154)
  {
    ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
    std::__shared_weak_count::__release_weak(v139);
  }
  v155 = *(_QWORD *)(v46 + 32);
  v156 = (llvm::raw_ostream *)(v155 + 1056);
  v157 = v155 + 1200;
  sub_22E74181C(v155 + 1056, 8u, 3u);
  v181 = xmmword_22F45E160;
  LODWORD(v178) = 1;
  v158 = sub_22E742CE8(v157, &v178);
  sub_22E74241C(v156, v158[1], (uint64_t)&v181, 2, 0, 0, 0);
  sub_22E7416F4((uint64_t)v156);
  *a6 = v46;
}

_QWORD *sub_22E74048C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24FA71548;
  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_22E7404F0(_QWORD *a1)
{
  sub_22E74048C(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E740514(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = a2;
  return result;
}

void sub_22E74051C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  size_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::raw_ostream *v14;
  uint64_t v15;
  llvm::raw_ostream *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  void *v28;
  size_t v29;
  size_t v30;
  std::string *v31;
  size_t size;
  const std::error_category *v33;
  std::error_code v34;
  std::string v35;
  int v36;
  const std::error_category *v37;
  _QWORD v38[3];
  __int16 v39;
  uint64_t (**v40)();
  uint64_t v41;
  llvm *v42;
  uint64_t v43;
  unsigned int v44;
  llvm *v45;
  uint64_t v46;
  unsigned int v47;
  llvm *v48;
  uint64_t v49;
  unsigned int v50;
  llvm *v51;
  uint64_t v52;
  unsigned int v53;

  *(_BYTE *)(a1 + 26) = 1;
  if (!*(_BYTE *)(a1 + 24))
    return;
  v2 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v2 + 2104))
    sub_22E7416F4(v2 + 1056);
  if (*(_BYTE *)(a1 + 25))
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (!*(_BYTE *)(v3 + 2104))
      return;
    LOWORD(v44) = 260;
    v40 = (uint64_t (**)())(v3 + 1168);
    if (!llvm::sys::fs::access())
    {
      v40 = &off_24FA71608;
      v41 = a1;
      v42 = 0;
      v43 = 0;
      v44 = 0;
      v45 = 0;
      v46 = 0;
      v47 = 0;
      v48 = 0;
      v49 = 0;
      v50 = 0;
      v51 = 0;
      v52 = 0;
      v53 = 0;
      v4 = *(_QWORD *)(a1 + 32);
      v5 = (char *)(v4 + 1168);
      if ((*(char *)(v4 + 1191) & 0x80000000) == 0)
        goto LABEL_9;
      v5 = *(char **)v5;
      if (!v5)
        v6 = 0;
      else
LABEL_9:
        v6 = strlen(v5);
      v7 = sub_22E74550C((uint64_t)&v40, v5, v6);
      v40 = &off_24FA71608;
      llvm::deallocate_buffer(v51, (void *)(4 * v53));
      llvm::deallocate_buffer(v48, (void *)(8 * v50));
      llvm::deallocate_buffer(v45, (void *)(8 * v47));
      llvm::deallocate_buffer(v42, (void *)(8 * v44));
      if (v7)
      {
        v8 = sub_22E740DF8(a1);
        v9 = v8;
        *(_QWORD *)(v8 + 312) = 0x37400000000;
        if (*(char *)(v8 + 311) < 0)
        {
          **(_BYTE **)(v8 + 288) = 0;
          *(_QWORD *)(v8 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v8 + 288) = 0;
          *(_BYTE *)(v8 + 311) = 0;
        }
        v38[0] = v8 + 320;
        v38[1] = 0;
        v38[2] = v8;
        v39 = 1;
        *(_BYTE *)(v8 + 320) = 0;
        *(_DWORD *)(v8 + 664) = 0;
        v10 = *(unsigned int *)(v8 + 776);
        if ((_DWORD)v10)
        {
          v11 = *(_QWORD *)(v8 + 768);
          v12 = 56 * v10;
          do
          {
            if (*(char *)(v11 + v12 - 9) < 0)
              operator delete(*(void **)(v11 + v12 - 32));
            v12 -= 56;
          }
          while (v12);
        }
        *(_DWORD *)(v9 + 776) = 0;
        sub_22E3BB0B8((uint64_t)v38);
      }
    }
  }
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(llvm::raw_ostream **)(v13 + 1192);
  if (v14)
  {
    llvm::raw_ostream::write(v14, *(const char **)(v13 + 8));
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(llvm::raw_ostream **)(v15 + 1192);
    if (*((_QWORD *)v16 + 4) == *((_QWORD *)v16 + 2))
    {
      *(_QWORD *)(v15 + 1192) = 0;
    }
    else
    {
      llvm::raw_ostream::flush_nonempty(v16);
      v17 = *(_QWORD *)(a1 + 32);
      v16 = *(llvm::raw_ostream **)(v17 + 1192);
      *(_QWORD *)(v17 + 1192) = 0;
      if (!v16)
        return;
    }
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v16 + 8))(v16);
    return;
  }
  v36 = 0;
  v37 = std::system_category();
  v18 = *(_QWORD *)(a1 + 32);
  v19 = (const char *)(v18 + 1168);
  if (*(char *)(v18 + 1191) < 0)
  {
    v19 = *(const char **)v19;
    v20 = operator new();
    if (!v19)
      goto LABEL_30;
  }
  else
  {
    v20 = operator new();
  }
  strlen(v19);
LABEL_30:
  llvm::raw_fd_ostream::raw_fd_ostream();
  llvm::raw_ostream::write((llvm::raw_ostream *)v20, *(const char **)(*(_QWORD *)(a1 + 32) + 8));
  if (*(_QWORD *)(v20 + 32) != *(_QWORD *)(v20 + 16))
    llvm::raw_ostream::flush_nonempty((llvm::raw_ostream *)v20);
  if (*(_DWORD *)(v20 + 72))
  {
    v21 = sub_22E740DF8(a1);
    v22 = v21;
    *(_QWORD *)(v21 + 312) = 0x37200000000;
    if (*(char *)(v21 + 311) < 0)
    {
      **(_BYTE **)(v21 + 288) = 0;
      *(_QWORD *)(v21 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v21 + 288) = 0;
      *(_BYTE *)(v21 + 311) = 0;
    }
    v40 = (uint64_t (**)())(v21 + 320);
    v41 = 0;
    v42 = (llvm *)v21;
    LOWORD(v43) = 1;
    *(_BYTE *)(v21 + 320) = 0;
    *(_DWORD *)(v21 + 664) = 0;
    v23 = *(unsigned int *)(v21 + 776);
    if ((_DWORD)v23)
    {
      v24 = *(_QWORD *)(v21 + 768);
      v25 = 56 * v23;
      do
      {
        if (*(char *)(v24 + v25 - 9) < 0)
          operator delete(*(void **)(v24 + v25 - 32));
        v25 -= 56;
      }
      while (v25);
    }
    *(_DWORD *)(v22 + 776) = 0;
    v26 = *(_QWORD *)(a1 + 32);
    v27 = *(_BYTE *)(v26 + 1191);
    if (v27 >= 0)
      v28 = (void *)(v26 + 1168);
    else
      v28 = *(void **)(v26 + 1168);
    v29 = *(_QWORD *)(v26 + 1176);
    if (v27 >= 0)
      v30 = v27 & 0x7F;
    else
      v30 = v29;
    sub_22E3B89A8((unsigned __int8 **)&v40, v28, v30);
    v34 = *(std::error_code *)(v20 + 72);
    std::error_code::message(&v35, &v34);
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31 = &v35;
    else
      v31 = (std::string *)v35.__r_.__value_.__r.__words[0];
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&v35.__r_.__value_.__s + 23) & 0x7F;
    else
      size = v35.__r_.__value_.__l.__size_;
    sub_22E3B89A8((unsigned __int8 **)&v40, v31, size);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    sub_22E3BB0B8((uint64_t)&v40);
    v33 = std::system_category();
    *(_DWORD *)(v20 + 72) = 0;
    *(_QWORD *)(v20 + 80) = v33;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
}

void sub_22E7409FC(unint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  unsigned __int8 *v18[3];
  __int16 v19;
  void *v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 26))
  {
    v20 = &v22;
    v21 = xmmword_22F44E320;
    sub_22F41A758(a3, &v20);
    v11 = sub_22E740DF8(a1);
    v12 = v11;
    *(_QWORD *)(v11 + 312) = 0x37300000000;
    if (*(char *)(v11 + 311) < 0)
    {
      **(_BYTE **)(v11 + 288) = 0;
      *(_QWORD *)(v11 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v11 + 288) = 0;
      *(_BYTE *)(v11 + 311) = 0;
    }
    v18[0] = (unsigned __int8 *)(v11 + 320);
    v18[1] = 0;
    v18[2] = (unsigned __int8 *)v11;
    v19 = 1;
    *(_BYTE *)(v11 + 320) = 0;
    *(_DWORD *)(v11 + 664) = 0;
    v13 = *(unsigned int *)(v11 + 776);
    if ((_DWORD)v13)
    {
      v14 = *(_QWORD *)(v11 + 768);
      v15 = 56 * v13;
      do
      {
        if (*(char *)(v14 + v15 - 9) < 0)
          operator delete(*(void **)(v14 + v15 - 32));
        v15 -= 56;
      }
      while (v15);
    }
    *(_DWORD *)(v12 + 776) = 0;
    sub_22E3B89A8(v18, v20, v21);
    sub_22E3BB0B8((uint64_t)v18);
    if (v20 != &v22)
      free(v20);
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 32);
    if ((_DWORD)a2 != 1)
    {
      if (*(_BYTE *)(v6 + 2104))
      {
        sub_22E7416F4(v6 + 1056);
        v6 = *(_QWORD *)(a1 + 32);
      }
      sub_22E74181C(v6 + 1056, 9u, 4u);
      v6 = *(_QWORD *)(a1 + 32);
      *(_BYTE *)(v6 + 2104) = 1;
    }
    *(_QWORD *)(v6 + 1760) = 0;
    sub_22F41A758(a3, (_QWORD *)(v6 + 1752));
    v7 = *a3;
    v8 = *(_DWORD *)(*a3 + 312);
    if (v8)
    {
      v9 = *(_QWORD *)(a1 + 32);
      v10 = *(_DWORD **)v9;
      *(_QWORD *)&v21 = *(_QWORD *)(a1 + 16);
      *((_QWORD *)&v21 + 1) = v10;
      if (v10)
      {
        ++*v10;
        v8 = *(_DWORD *)(v7 + 312);
      }
      v22 = 0;
      v23 = 0;
      v20 = &off_24FA71678;
      v24 = a1;
      sub_22E727BA0((uint64_t)&v20, v8, *(_QWORD *)(v7 + 64), a2, *(_QWORD *)(v9 + 1752), *(_QWORD *)(v9 + 1760), *(_BYTE **)(v7 + 656), *(unsigned int *)(v7 + 664), *(char **)(v7 + 768), *(unsigned int *)(v7 + 776), (uint64_t)a3);
      v20 = off_24FA707B0;
      sub_22E3B3C18((uint64_t *)&v21 + 1);
    }
    else
    {
      if ((_DWORD)a2 == 1)
        sub_22E74181C(*(_QWORD *)(a1 + 32) + 1056, 9u, 4u);
      v16 = 0uLL;
      v17 = 0;
      sub_22E744A98(a1, 0, 0, &v16, a2, *(char **)(*(_QWORD *)(a1 + 32) + 1752), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1760), (uint64_t)a3);
      if ((_DWORD)a2 == 1)
        sub_22E7416F4(*(_QWORD *)(a1 + 32) + 1056);
    }
  }
}

void sub_22E740CB4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FA71598;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22E740CC4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FA71598;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t *sub_22E740CF4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;

  v2 = *(_QWORD *)(a1 + 2136);
  *(_QWORD *)(a1 + 2136) = 0;
  if (v2)
  {
    v3 = sub_22F1CB5CC(v2);
    MEMORY[0x2348A0E9C](v3, 0x10B2C40B33F2DCFLL);
  }
  llvm::deallocate_buffer(*(llvm **)(a1 + 2104), (void *)(32 * *(unsigned int *)(a1 + 2120)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 2080), (void *)(16 * *(unsigned int *)(a1 + 2096)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 2056), (void *)(4 * *(unsigned int *)(a1 + 2072)));
  v4 = *(void **)(a1 + 1776);
  if (v4 != (void *)(a1 + 1800))
    free(v4);
  v5 = *(void **)(a1 + 1248);
  if (v5 != (void *)(a1 + 1264))
    free(v5);
  llvm::deallocate_buffer(*(llvm **)(a1 + 1224), (void *)(8 * *(unsigned int *)(a1 + 1240)));
  v6 = *(_QWORD *)(a1 + 1216);
  *(_QWORD *)(a1 + 1216) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (*(char *)(a1 + 1215) < 0)
    operator delete(*(void **)(a1 + 1192));
  sub_22E6C6130(a1 + 1080);
  v7 = *(void **)(a1 + 32);
  if (v7 != (void *)(a1 + 56))
    free(v7);
  return sub_22E3B3C18((uint64_t *)(a1 + 24));
}

uint64_t sub_22E740DF8(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 2112);
  if (!result)
  {
    v3 = operator new();
    *(_QWORD *)(v3 + 8) = 0;
    v12 = v3;
    *(_DWORD *)v3 = 1;
    v4 = operator new();
    v5 = llvm::errs((llvm *)v4);
    v6 = **(_DWORD ***)(a1 + 32);
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)v4 = &off_24FA71900;
    *(_QWORD *)(v4 + 16) = v5;
    *(_QWORD *)(v4 + 24) = v6;
    if (v6)
      ++*v6;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_BYTE *)(v4 + 64) &= ~1u;
    v7 = operator new();
    v8 = v7;
    v13 = v6;
    v14 = v3;
    ++*(_DWORD *)v3;
    if (v6)
      ++*v6;
    sub_22F1CB3A4(v7, &v14, (uint64_t *)&v13, v4, 1);
    sub_22E3B3C18((uint64_t *)&v13);
    sub_22E3B3D40(&v14);
    v9 = *(_QWORD *)(a1 + 32);
    v10 = *(_QWORD *)(v9 + 2112);
    *(_QWORD *)(v9 + 2112) = v8;
    if (v10)
    {
      v11 = sub_22F1CB5CC(v10);
      MEMORY[0x2348A0E9C](v11, 0x10B2C40B33F2DCFLL);
    }
    sub_22E3B3D40(&v12);
    return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 2112);
  }
  return result;
}

llvm::raw_ostream *sub_22E740F64(llvm::raw_ostream *result, unsigned int a2, int a3)
{
  llvm::raw_ostream *v4;
  int v5;
  int v6;
  unsigned int v7;
  char v8;
  int v9;
  unsigned int v10;

  v4 = result;
  v5 = *((_DWORD *)result + 6);
  v6 = *((_DWORD *)result + 7) | (a2 << v5);
  *((_DWORD *)result + 7) = v6;
  v7 = v5 + a3;
  if (v7 >= 0x20)
  {
    v8 = a3;
    result = sub_22E740FDC((const char ***)result, v6);
    v9 = *((_DWORD *)v4 + 6);
    v10 = a2 >> -(char)v9;
    if (!v9)
      v10 = 0;
    *((_DWORD *)v4 + 7) = v10;
    v7 = ((_BYTE)v9 + v8) & 0x1F;
  }
  *((_DWORD *)v4 + 6) = v7;
  return result;
}

llvm::raw_ostream *sub_22E740FDC(const char ***a1, int a2)
{
  const char **v4;
  const char *v5;
  llvm::raw_ostream *result;

  v4 = *a1;
  v5 = (*a1)[1];
  if ((*a1)[2] < v5 + 4)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v5 = v4[1];
  }
  *(_DWORD *)&v5[(_QWORD)*v4] = a2;
  v4[1] += 4;
  result = (llvm::raw_ostream *)a1[1];
  if (result)
  {
    if ((*a1)[1] >= (const char *)a1[2])
    {
      result = (llvm::raw_ostream *)llvm::raw_ostream::write(result, **a1);
      (*a1)[1] = 0;
    }
  }
  return result;
}

llvm::raw_ostream *sub_22E74106C(unsigned int a1, _BYTE *a2, llvm::raw_ostream *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  llvm::raw_ostream *result;
  char v10;
  unsigned int v11;
  unsigned __int8 *v12;
  int v13;

  *(_DWORD *)(a4 + 8) = 0;
  v7 = a1;
  if (*(_DWORD *)(a4 + 12))
  {
    v8 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(unsigned int *)(a4 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a4 + 8 * v8) = v7;
  ++*(_DWORD *)(a4 + 8);
  result = sub_22E742038(a3, 1u, a4, 0);
  if (a2 && *a2)
  {
    *(_DWORD *)(a4 + 8) = 0;
    v10 = *a2;
    if (*a2)
    {
      v11 = 0;
      v12 = a2 + 1;
      do
      {
        if (v11 >= *(_DWORD *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v11 = *(_DWORD *)(a4 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a4 + 8 * v11) = v10;
        v11 = *(_DWORD *)(a4 + 8) + 1;
        *(_DWORD *)(a4 + 8) = v11;
        v13 = *v12++;
        v10 = v13;
      }
      while (v13);
    }
    return sub_22E742038(a3, 2u, a4, 0);
  }
  return result;
}

llvm::raw_ostream *sub_22E741190(unsigned int a1, _BYTE *a2, llvm::raw_ostream *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  char v10;
  unsigned __int8 *v11;
  int v12;

  *(_DWORD *)(a4 + 8) = 0;
  v7 = a1;
  if (*(_DWORD *)(a4 + 12))
  {
    v8 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(unsigned int *)(a4 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a4 + 8 * v8) = v7;
  v9 = *(_DWORD *)(a4 + 8) + 1;
  *(_DWORD *)(a4 + 8) = v9;
  v10 = *a2;
  if (*a2)
  {
    v11 = a2 + 1;
    do
    {
      if (v9 >= *(_DWORD *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v9 = *(_DWORD *)(a4 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a4 + 8 * v9) = v10;
      v9 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v9;
      v12 = *v11++;
      v10 = v12;
    }
    while (v12);
  }
  return sub_22E742038(a3, 3u, a4, 0);
}

uint64_t sub_22E741278(uint64_t a1, unsigned int a2, uint64_t a3)
{
  char *v6;
  char *v7;
  char *v8;
  _OWORD *v9;
  char *v10;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  _OWORD *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t *v35;
  uint64_t *v36;
  int v37;
  int v38;
  int v39;
  unsigned int v40;

  if (*(_DWORD *)(a1 + 36) != a2)
  {
    v12 = *(_DWORD *)(a1 + 32);
    v13 = *(_DWORD *)(a1 + 24);
    v14 = *(_DWORD *)(a1 + 28) | (3 << v13);
    *(_DWORD *)(a1 + 28) = v14;
    v15 = v13 + v12;
    if (v15 >= 0x20)
    {
      sub_22E740FDC((const char ***)a1, v14);
      v37 = *(_DWORD *)(a1 + 24);
      if (v37)
        v14 = 3u >> -(char)v37;
      else
        v14 = 0;
      v15 = ((_BYTE)v37 + (_BYTE)v12) & 0x1F;
    }
    v16 = (1 << v15) | v14;
    *(_DWORD *)(a1 + 24) = v15;
    *(_DWORD *)(a1 + 28) = v16;
    if (v15 >= 0x1A)
    {
      sub_22E740FDC((const char ***)a1, v16);
      v38 = *(_DWORD *)(a1 + 24);
      if (v38)
        v16 = 1u >> -(char)v38;
      else
        v16 = 0;
      v17 = ((_BYTE)v38 + 6) & 0x1F;
    }
    else
    {
      v17 = v15 + 6;
    }
    v18 = (1 << v17) | v16;
    *(_DWORD *)(a1 + 24) = v17;
    *(_DWORD *)(a1 + 28) = v18;
    if (v17 >= 0x1A)
    {
      sub_22E740FDC((const char ***)a1, v18);
      v39 = *(_DWORD *)(a1 + 24);
      v40 = 1u >> -(char)v39;
      if (!v39)
        v40 = 0;
      *(_DWORD *)(a1 + 28) = v40;
      v19 = ((_BYTE)v39 + 6) & 0x1F;
    }
    else
    {
      v19 = v17 + 6;
    }
    *(_DWORD *)(a1 + 24) = v19;
    sub_22E742298((llvm::raw_ostream *)a1, a2, 6);
    *(_DWORD *)(a1 + 36) = a2;
  }
  sub_22E7430C8((llvm::raw_ostream *)a1, *(uint64_t **)a3);
  v6 = *(char **)(a1 + 88);
  v7 = *(char **)(a1 + 96);
  if (v6 == v7 || (v8 = v7 - 32, *((_DWORD *)v7 - 8) != a2))
  {
    v20 = v7 - v6;
    if (((v7 - v6) & 0x1FFFFFFFE0) != 0)
    {
      v21 = ((unint64_t)v20 >> 5);
      v8 = *(char **)(a1 + 88);
      while (*(_DWORD *)v8 != a2)
      {
        v8 += 32;
        if (!--v21)
          goto LABEL_18;
      }
    }
    else
    {
LABEL_18:
      v22 = *(_QWORD *)(a1 + 104);
      if ((unint64_t)v7 < v22)
      {
        v30 = v7 + 32;
        *(_OWORD *)v7 = 0u;
        *((_OWORD *)v7 + 1) = 0u;
      }
      else
      {
        v23 = v20 >> 5;
        v24 = (v20 >> 5) + 1;
        if (v24 >> 59)
          abort();
        v25 = v22 - (_QWORD)v6;
        if (v25 >> 4 > v24)
          v24 = v25 >> 4;
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFE0)
          v26 = 0x7FFFFFFFFFFFFFFLL;
        else
          v26 = v24;
        if (v26 >> 59)
          sub_22E3B3F8C();
        v27 = (char *)operator new(32 * v26);
        v28 = &v27[32 * v23];
        v29 = &v27[32 * v26];
        v30 = v28 + 32;
        *(_OWORD *)v28 = 0u;
        *((_OWORD *)v28 + 1) = 0u;
        if (v6 == v7)
        {
          *(_QWORD *)(a1 + 88) = v28;
          *(_QWORD *)(a1 + 96) = v30;
          *(_QWORD *)(a1 + 104) = v29;
        }
        else
        {
          v31 = 0;
          do
          {
            v32 = &v28[v31];
            v33 = &v7[v31];
            *((_DWORD *)v32 - 8) = *(_DWORD *)&v7[v31 - 32];
            *(_OWORD *)(v32 - 24) = *(_OWORD *)&v7[v31 - 24];
            *((_QWORD *)v32 - 1) = *(_QWORD *)&v7[v31 - 8];
            *((_QWORD *)v33 - 3) = 0;
            *((_QWORD *)v33 - 2) = 0;
            *((_QWORD *)v33 - 1) = 0;
            v31 -= 32;
          }
          while (&v7[v31] != v6);
          v6 = *(char **)(a1 + 88);
          v34 = *(char **)(a1 + 96);
          *(_QWORD *)(a1 + 88) = &v28[v31];
          *(_QWORD *)(a1 + 96) = v30;
          *(_QWORD *)(a1 + 104) = v29;
          if (v34 != v6)
          {
            v35 = (uint64_t *)(v34 - 24);
            do
            {
              if (*v35)
              {
                sub_22E3B485C(v35);
                operator delete((void *)*v35);
              }
              v36 = v35 - 1;
              v35 -= 4;
            }
            while (v36 != (uint64_t *)v6);
          }
        }
        if (v6)
          operator delete(v6);
      }
      *(_QWORD *)(a1 + 96) = v30;
      *((_DWORD *)v30 - 8) = a2;
      v8 = (char *)(v30 - 2);
    }
  }
  v9 = (_OWORD *)*((_QWORD *)v8 + 2);
  if ((unint64_t)v9 < *((_QWORD *)v8 + 3))
  {
    *v9 = *(_OWORD *)a3;
    v10 = (char *)(v9 + 1);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
  else
  {
    v10 = sub_22E6D58A8((char **)v8 + 1, a3);
  }
  *((_QWORD *)v8 + 2) = v10;
  return ((unint64_t)&v10[-*((_QWORD *)v8 + 1)] >> 4) + 3;
}

uint64_t sub_22E7415CC(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  __int128 v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  __int128 v10;

  v1 = result;
  v2 = *(_DWORD *)(result + 8);
  if (v2 >= *(_DWORD *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v2 = *(_DWORD *)(v1 + 8);
  }
  *(_OWORD *)(*(_QWORD *)v1 + 16 * v2) = xmmword_22F45E0B0;
  v3 = *(_DWORD *)(v1 + 12);
  v4 = *(_DWORD *)(v1 + 8) + 1;
  *(_DWORD *)(v1 + 8) = v4;
  if (v4 >= v3)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v1 + 8);
  }
  v5 = xmmword_22F45E080;
  *(_OWORD *)(*(_QWORD *)v1 + 16 * v4) = xmmword_22F45E080;
  v6 = *(_DWORD *)(v1 + 12);
  v7 = *(_DWORD *)(v1 + 8) + 1;
  *(_DWORD *)(v1 + 8) = v7;
  if (v7 >= v6)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = xmmword_22F45E080;
    v7 = *(_DWORD *)(v1 + 8);
  }
  *(_OWORD *)(*(_QWORD *)v1 + 16 * v7) = v5;
  v8 = *(_DWORD *)(v1 + 12);
  v9 = *(_DWORD *)(v1 + 8) + 1;
  *(_DWORD *)(v1 + 8) = v9;
  if (v9 >= v8)
  {
    v10 = v5;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = v10;
    v9 = *(_DWORD *)(v1 + 8);
  }
  *(_OWORD *)(*(_QWORD *)v1 + 16 * v9) = v5;
  ++*(_DWORD *)(v1 + 8);
  return result;
}

void sub_22E7416F4(uint64_t a1)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(_DWORD *)(a1 + 32);
  v4 = *(_DWORD *)(a1 + 24) + v3;
  if (v4 >= 0x20)
  {
    sub_22E740FDC((const char ***)a1, *(_DWORD *)(a1 + 28));
    v9 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 28) = 0;
    v4 = (v9 + (_BYTE)v3) & 0x1F;
  }
  *(_DWORD *)(a1 + 24) = v4;
  if (v4)
  {
    sub_22E740FDC((const char ***)a1, *(_DWORD *)(a1 + 28));
    *(_QWORD *)(a1 + 24) = 0;
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if (v5)
  {
    v14 = v2;
    v10 = *(_QWORD *)(a1 + 8);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 80))(v5);
    v12 = *(_QWORD *)(v10 + 32);
    v13 = *(_QWORD *)(v10 + 16);
    v2 = v14;
    v5 = v11 + v12 - v13;
  }
  sub_22E7435F4(a1, 32 * *(_QWORD *)(v2 - 32), ((unint64_t)(v5 + v6) >> 2) + ~*(_DWORD *)(v2 - 32));
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(v2 - 40);
  if (a1 + 40 != v2 - 24)
    sub_22E743814((uint64_t *)(a1 + 40), *(uint64_t **)(v2 - 24), *(uint64_t **)(v2 - 16), (uint64_t)(*(_QWORD *)(v2 - 16) - *(_QWORD *)(v2 - 24)) >> 4);
  v7 = *(_QWORD *)(a1 + 72);
  v8 = (uint64_t *)(v7 - 24);
  if (*(_QWORD *)(v7 - 24))
  {
    sub_22E3B485C(v8);
    operator delete((void *)*v8);
  }
  *(_QWORD *)(a1 + 72) = v7 - 40;
}

uint64_t *sub_22E74181C(uint64_t a1, unsigned int a2, unsigned int a3)
{
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  uint64_t v41;

  v6 = *(_DWORD *)(a1 + 32);
  v7 = *(_DWORD *)(a1 + 24);
  v8 = *(_DWORD *)(a1 + 28) | (1 << v7);
  *(_DWORD *)(a1 + 28) = v8;
  v9 = v7 + v6;
  if (v9 >= 0x20)
  {
    sub_22E740FDC((const char ***)a1, v8);
    v35 = *(_DWORD *)(a1 + 24);
    if (v35)
      v8 = 1u >> -(char)v35;
    else
      v8 = 0;
    *(_DWORD *)(a1 + 28) = v8;
    v9 = ((_BYTE)v35 + (_BYTE)v6) & 0x1F;
  }
  *(_DWORD *)(a1 + 24) = v9;
  v10 = a2;
  if (a2 >= 0x80)
  {
    v10 = a2;
    do
    {
      v38 = v10;
      sub_22E740F64((llvm::raw_ostream *)a1, v10 & 0x7F | 0x80, 8);
      v10 >>= 7;
    }
    while (v38 >> 14);
    v9 = *(_DWORD *)(a1 + 24);
    v8 = *(_DWORD *)(a1 + 28);
  }
  v11 = (v10 << v9) | v8;
  *(_DWORD *)(a1 + 28) = v11;
  v12 = v9 + 8;
  if (v12 >= 0x20)
  {
    sub_22E740FDC((const char ***)a1, v11);
    v36 = *(_DWORD *)(a1 + 24);
    if (v36)
      v11 = v10 >> -(char)v36;
    else
      v11 = 0;
    *(_DWORD *)(a1 + 28) = v11;
    v12 = ((_BYTE)v36 + 8) & 0x1F;
  }
  *(_DWORD *)(a1 + 24) = v12;
  v13 = a3;
  if (a3 >= 8)
  {
    v13 = a3;
    do
    {
      v39 = v13;
      sub_22E740F64((llvm::raw_ostream *)a1, v13 & 7 | 8, 4);
      v13 >>= 3;
    }
    while (v39 > 0x3F);
    v12 = *(_DWORD *)(a1 + 24);
    v11 = *(_DWORD *)(a1 + 28);
  }
  v14 = (v13 << v12) | v11;
  *(_DWORD *)(a1 + 28) = v14;
  v15 = v12 + 4;
  if (v15 >= 0x20)
  {
    sub_22E740FDC((const char ***)a1, v14);
    v37 = *(_DWORD *)(a1 + 24);
    if (v37)
      v14 = v13 >> -(char)v37;
    else
      v14 = 0;
    *(_DWORD *)(a1 + 28) = v14;
    v15 = ((_BYTE)v37 + 4) & 0x1F;
  }
  *(_DWORD *)(a1 + 24) = v15;
  if (v15)
  {
    sub_22E740FDC((const char ***)a1, v14);
    *(_QWORD *)(a1 + 24) = 0;
  }
  v16 = *(_QWORD **)(a1 + 8);
  v17 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if (v16)
  {
    v19 = (*(uint64_t (**)(_QWORD))(*v16 + 80))(*(_QWORD *)(a1 + 8)) + v16[4] - v16[2];
    v18 = *(_DWORD *)(a1 + 24);
  }
  else
  {
    v18 = 0;
    v19 = 0;
  }
  v20 = (unint64_t)(v19 + v17) >> 2;
  v41 = v20;
  v21 = *(_DWORD *)(a1 + 32);
  v40 = v21;
  if (v18 > 0xFFFFFFDF)
  {
    v23 = v18 + 32;
  }
  else
  {
    sub_22E740FDC((const char ***)a1, *(_DWORD *)(a1 + 28));
    v22 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 28) = 0;
    v23 = v22 & 0x1F;
  }
  *(_DWORD *)(a1 + 24) = v23;
  *(_DWORD *)(a1 + 32) = a3;
  v24 = *(_QWORD *)(a1 + 72);
  if (v24 >= *(_QWORD *)(a1 + 80))
  {
    v25 = sub_22E741B10((uint64_t *)(a1 + 64), &v40, &v41);
  }
  else
  {
    *(_DWORD *)v24 = v21;
    v25 = v24 + 40;
    *(_QWORD *)(v24 + 8) = v20;
    *(_QWORD *)(v24 + 16) = 0;
    *(_QWORD *)(v24 + 24) = 0;
    *(_QWORD *)(v24 + 32) = 0;
  }
  result = (uint64_t *)(a1 + 40);
  v27 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 72) = v25;
  v28 = *(_QWORD *)(v25 - 24);
  *(_QWORD *)(v25 - 24) = v27;
  *(_QWORD *)(a1 + 40) = v28;
  v29 = *(_QWORD *)(v25 - 16);
  *(_QWORD *)(v25 - 16) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v29;
  v30 = *(_QWORD *)(v25 - 8);
  *(_QWORD *)(v25 - 8) = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v30;
  v31 = *(_QWORD *)(a1 + 88);
  v32 = *(_QWORD *)(a1 + 96);
  if (v31 == v32 || (i = v32 - 32, *(_DWORD *)(v32 - 32) != a2))
  {
    if (((v32 - v31) & 0x1FFFFFFFE0) == 0)
      return result;
    v34 = ((unint64_t)(v32 - v31) >> 5);
    for (i = *(_QWORD *)(a1 + 88); *(_DWORD *)i != a2; i += 32)
    {
      if (!--v34)
        return result;
    }
  }
  return sub_22E741CE4(result, *(_QWORD *)(a1 + 48), *(uint64_t **)(i + 8), *(uint64_t **)(i + 16), (uint64_t)(*(_QWORD *)(i + 16) - *(_QWORD *)(i + 8)) >> 4);
}

uint64_t sub_22E741B10(uint64_t *a1, _DWORD *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *i;
  uint64_t *v16;
  uint64_t v17;
  void *__p;
  uint64_t *v20;
  uint64_t *v21;
  char *v22;
  uint64_t *v23;

  v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x666666666666666)
    abort();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333)
    v6 = 0x666666666666666;
  else
    v6 = v4;
  v23 = a1 + 2;
  if (v6 > 0x666666666666666)
    sub_22E3B3F8C();
  v9 = 5 * v6;
  v10 = (char *)operator new(40 * v6);
  v11 = &v10[40 * v3];
  __p = v10;
  v20 = (uint64_t *)v11;
  v12 = *a3;
  *(_DWORD *)v11 = *a2;
  *((_QWORD *)v11 + 1) = v12;
  *((_QWORD *)v11 + 2) = 0;
  *((_QWORD *)v11 + 3) = 0;
  *((_QWORD *)v11 + 4) = 0;
  v21 = (uint64_t *)(v11 + 40);
  v22 = &v10[8 * v9];
  sub_22E741C50(a1, &__p);
  v13 = a1[1];
  v14 = v20;
LABEL_9:
  for (i = v21; i != v14; i = v16 - 2)
  {
    v17 = *(i - 3);
    v16 = i - 3;
    v21 = v16 - 2;
    if (v17)
    {
      sub_22E3B485C(v16);
      operator delete((void *)*v16);
      goto LABEL_9;
    }
  }
  if (__p)
    operator delete(__p);
  return v13;
}

uint64_t *sub_22E741C50(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 40;
      *(_OWORD *)(v4 - 40) = *(_OWORD *)(v3 - 40);
      *(_QWORD *)(v4 - 16) = 0;
      *(_QWORD *)(v4 - 8) = 0;
      *(_QWORD *)(v4 - 24) = 0;
      *(_OWORD *)(v4 - 24) = *(_OWORD *)(v3 - 24);
      *(_QWORD *)(v4 - 8) = *(_QWORD *)(v3 - 8);
      *(_QWORD *)(v3 - 24) = 0;
      *(_QWORD *)(v3 - 16) = 0;
      *(_QWORD *)(v3 - 8) = 0;
      v3 -= 40;
      v4 -= 40;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v6 = *result;
  *result = v5;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

_QWORD *sub_22E741CE4(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  char *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  void *__p;
  uint64_t *v44;
  uint64_t *v45;
  char *v46;
  _QWORD *v47;

  v5 = *a1;
  v6 = a2 - *a1;
  v7 = (_QWORD *)(*a1 + (v6 & 0xFFFFFFFFFFFFFFF0));
  if (a5 < 1)
    return v7;
  v9 = a3;
  v11 = v6 >> 4;
  v12 = a1[2];
  v13 = a1[1];
  if (a5 > (uint64_t)(v12 - v13) >> 4)
  {
    v14 = a5 + ((uint64_t)(v13 - v5) >> 4);
    if (v14 >> 60)
      abort();
    v15 = v12 - v5;
    if (v15 >> 3 > v14)
      v14 = v15 >> 3;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
      v16 = 0xFFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    v47 = a1 + 2;
    if (v16)
    {
      if (v16 >> 60)
        sub_22E3B3F8C();
      v17 = (char *)operator new(16 * v16);
    }
    else
    {
      v17 = 0;
    }
    v25 = (uint64_t *)&v17[16 * v11];
    __p = v17;
    v44 = v25;
    v46 = &v17[16 * v16];
    v26 = &v25[2 * a5];
    do
    {
      *v25 = *v9;
      v27 = v9[1];
      v25[1] = v27;
      if (v27)
      {
        v28 = (unint64_t *)(v27 + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v25 += 2;
      v9 += 2;
    }
    while (v25 != v26);
    v45 = v26;
    v7 = (_QWORD *)sub_22E741F8C(a1, &__p, v7);
    v30 = v44;
    while (1)
    {
      v31 = v45;
      if (v45 == v30)
        break;
      v45 -= 2;
      v32 = (std::__shared_weak_count *)*(v31 - 1);
      if (v32)
      {
        p_shared_owners = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldaxr(p_shared_owners);
        while (__stlxr(v34 - 1, p_shared_owners));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
    }
    if (__p)
      operator delete(__p);
    return v7;
  }
  v18 = (uint64_t)(v13 - (_QWORD)v7) >> 4;
  if (v18 >= a5)
  {
    v19 = &a3[2 * a5];
    v21 = (char *)a1[1];
LABEL_38:
    v35 = (char *)&v7[2 * a5];
    v36 = &v21[-16 * a5];
    v37 = v21;
    if ((unint64_t)v36 < v13)
    {
      v37 = v21;
      do
      {
        *(_OWORD *)v37 = *(_OWORD *)v36;
        v37 += 16;
        *(_QWORD *)v36 = 0;
        *((_QWORD *)v36 + 1) = 0;
        v36 += 16;
      }
      while ((unint64_t)v36 < v13);
    }
    a1[1] = (uint64_t)v37;
    if (v21 != v35)
    {
      v38 = (uint64_t)(v21 - 16);
      v39 = 16 * ((v21 - v35) >> 4);
      v40 = v5 + 16 * v11 - 16;
      do
      {
        sub_22E6C3F18(v38, (__int128 *)(v40 + v39));
        v38 -= 16;
        v39 -= 16;
      }
      while (v39);
    }
    if (v19 != v9)
    {
      v41 = v7;
      do
      {
        sub_22E6C83A4(v41, v9);
        v9 += 2;
        v41 += 2;
      }
      while (v9 != v19);
    }
    return v7;
  }
  v19 = &a3[2 * v18];
  if (v19 == a4)
  {
    v21 = (char *)a1[1];
  }
  else
  {
    v20 = &a3[2 * v18];
    v21 = (char *)a1[1];
    do
    {
      *(_QWORD *)v21 = *v20;
      v22 = v20[1];
      *((_QWORD *)v21 + 1) = v22;
      if (v22)
      {
        v23 = (unint64_t *)(v22 + 8);
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v20 += 2;
      v21 += 16;
    }
    while (v20 != a4);
  }
  a1[1] = (uint64_t)v21;
  if ((uint64_t)(v13 - (_QWORD)v7) >= 1)
    goto LABEL_38;
  return v7;
}

uint64_t sub_22E741F8C(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _OWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __int128 v13;

  result = a2[1];
  v5 = (_QWORD *)*a1;
  v6 = result;
  if ((_QWORD *)*a1 != a3)
  {
    v12 = a3;
    v6 = a2[1];
    do
    {
      v13 = *((_OWORD *)v12 - 1);
      v12 -= 2;
      *(_OWORD *)(v6 - 16) = v13;
      v6 -= 16;
      *v12 = 0;
      v12[1] = 0;
    }
    while (v12 != v5);
  }
  a2[1] = v6;
  v7 = (_QWORD *)a1[1];
  v8 = (_OWORD *)a2[2];
  if (v7 != a3)
  {
    do
    {
      *v8++ = *(_OWORD *)a3;
      *a3 = 0;
      a3[1] = 0;
      a3 += 2;
    }
    while (a3 != v7);
    v6 = a2[1];
  }
  a2[2] = v8;
  v9 = (_QWORD *)*a1;
  *a1 = v6;
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

llvm::raw_ostream *sub_22E742038(llvm::raw_ostream *result, unsigned int a2, uint64_t a3, unsigned int a4)
{
  unsigned int v5;
  llvm::raw_ostream *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  int v27;
  int v28;
  unsigned int v29;

  v5 = a2;
  v6 = result;
  if (a4)
    return sub_22E74241C(result, a4, *(_QWORD *)a3, *(unsigned int *)(a3 + 8), 0, 0, a2 | 0x100000000);
  v7 = *(unsigned int *)(a3 + 8);
  v8 = *((_DWORD *)result + 8);
  v9 = *((_DWORD *)result + 6);
  v10 = *((_DWORD *)result + 7) | (3 << v9);
  *((_DWORD *)result + 7) = v10;
  v11 = v9 + v8;
  if (v11 >= 0x20)
  {
    result = sub_22E740FDC((const char ***)result, v10);
    v20 = *((_DWORD *)v6 + 6);
    if (v20)
      v10 = 3u >> -(char)v20;
    else
      v10 = 0;
    v11 = ((_BYTE)v20 + (_BYTE)v8) & 0x1F;
  }
  *((_DWORD *)v6 + 6) = v11;
  if (v5 >= 0x20)
  {
    do
    {
      v29 = v5 & 0x1F | 0x20;
      v10 |= v29 << v11;
      *((_DWORD *)v6 + 7) = v10;
      if (v11 >= 0x1A)
      {
        result = sub_22E740FDC((const char ***)v6, v10);
        v28 = *((_DWORD *)v6 + 6);
        if (v28)
          v10 = v29 >> -(char)v28;
        else
          v10 = 0;
        *((_DWORD *)v6 + 7) = v10;
        v11 = ((_BYTE)v28 + 6) & 0x1F;
      }
      else
      {
        v11 += 6;
      }
      *((_DWORD *)v6 + 6) = v11;
      v12 = v5 >> 5;
      v26 = v5 > 0x3FF;
      v5 >>= 5;
    }
    while (v26);
  }
  else
  {
    v12 = v5;
  }
  v13 = (v12 << v11) | v10;
  *((_DWORD *)v6 + 7) = v13;
  if (v11 >= 0x1A)
  {
    result = sub_22E740FDC((const char ***)v6, v13);
    v21 = *((_DWORD *)v6 + 6);
    if (v21)
      v13 = v12 >> -(char)v21;
    else
      v13 = 0;
    v14 = ((_BYTE)v21 + 6) & 0x1F;
  }
  else
  {
    v14 = v11 + 6;
  }
  *((_DWORD *)v6 + 6) = v14;
  if (v7 >= 0x20)
  {
    v24 = v7;
    do
    {
      v25 = v24 & 0x1F | 0x20;
      v13 |= v25 << v14;
      *((_DWORD *)v6 + 7) = v13;
      if (v14 >= 0x1A)
      {
        result = sub_22E740FDC((const char ***)v6, v13);
        v27 = *((_DWORD *)v6 + 6);
        if (v27)
          v13 = v25 >> -(char)v27;
        else
          v13 = 0;
        *((_DWORD *)v6 + 7) = v13;
        v14 = ((_BYTE)v27 + 6) & 0x1F;
      }
      else
      {
        v14 += 6;
      }
      *((_DWORD *)v6 + 6) = v14;
      v15 = v24 >> 5;
      v26 = v24 > 0x3FF;
      v24 >>= 5;
    }
    while (v26);
  }
  else
  {
    v15 = v7;
  }
  v16 = (v15 << v14) | v13;
  *((_DWORD *)v6 + 7) = v16;
  if (v14 >= 0x1A)
  {
    result = sub_22E740FDC((const char ***)v6, v16);
    v22 = *((_DWORD *)v6 + 6);
    v23 = v15 >> -(char)v22;
    if (!v22)
      v23 = 0;
    *((_DWORD *)v6 + 7) = v23;
    v17 = ((_BYTE)v22 + 6) & 0x1F;
  }
  else
  {
    v17 = v14 + 6;
  }
  *((_DWORD *)v6 + 6) = v17;
  if ((_DWORD)v7)
  {
    v18 = 0;
    v19 = 8 * v7;
    do
    {
      result = sub_22E742298(v6, *(_QWORD *)(*(_QWORD *)a3 + v18), 6);
      v18 += 8;
    }
    while (v19 != v18);
  }
  return result;
}

llvm::raw_ostream *sub_22E742298(llvm::raw_ostream *result, unint64_t a2, int a3)
{
  unint64_t v4;
  llvm::raw_ostream *v5;
  char v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  char v16;
  unint64_t v17;
  int v18;
  int v19;

  v4 = a2;
  v5 = result;
  if (HIDWORD(a2))
  {
    v16 = a3 - 1;
    v17 = (1 << (a3 - 1));
    v18 = v17 - 1;
    v9 = *((_DWORD *)result + 6);
    v8 = *((_DWORD *)result + 7);
    do
    {
      v8 |= (v18 & v4 | v17) << v9;
      *((_DWORD *)v5 + 7) = v8;
      v9 += a3;
      if (v9 >= 0x20)
      {
        result = sub_22E740FDC((const char ***)v5, v8);
        v19 = *((_DWORD *)v5 + 6);
        if (v19)
          v8 = (v18 & v4 | v17) >> -(char)v19;
        else
          v8 = 0;
        *((_DWORD *)v5 + 7) = v8;
        v9 = ((_BYTE)v19 + (_BYTE)a3) & 0x1F;
      }
      *((_DWORD *)v5 + 6) = v9;
      v4 >>= v16;
    }
    while (v4 >= v17);
  }
  else
  {
    v6 = a3 - 1;
    v7 = 1 << (a3 - 1);
    if (v7 <= a2)
    {
      v9 = *((_DWORD *)result + 6);
      v8 = *((_DWORD *)result + 7);
      do
      {
        v12 = v4 & (v7 - 1) | v7;
        v8 |= v12 << v9;
        *((_DWORD *)v5 + 7) = v8;
        v9 += a3;
        if (v9 >= 0x20)
        {
          result = sub_22E740FDC((const char ***)v5, v8);
          v13 = *((_DWORD *)v5 + 6);
          if (v13)
            v8 = v12 >> -(char)v13;
          else
            v8 = 0;
          *((_DWORD *)v5 + 7) = v8;
          v9 = ((_BYTE)v13 + (_BYTE)a3) & 0x1F;
        }
        *((_DWORD *)v5 + 6) = v9;
        LODWORD(v4) = v4 >> v6;
      }
      while (v4 >= v7);
    }
    else
    {
      v9 = *((_DWORD *)result + 6);
      v8 = *((_DWORD *)result + 7);
    }
  }
  v10 = ((_DWORD)v4 << v9) | v8;
  *((_DWORD *)v5 + 7) = v10;
  v11 = v9 + a3;
  if (v11 >= 0x20)
  {
    result = sub_22E740FDC((const char ***)v5, v10);
    v14 = *((_DWORD *)v5 + 6);
    v15 = v4 >> -(char)v14;
    if (!v14)
      v15 = 0;
    *((_DWORD *)v5 + 7) = v15;
    v11 = ((_BYTE)v14 + (_BYTE)a3) & 0x1F;
  }
  *((_DWORD *)v5 + 6) = v11;
  return result;
}

llvm::raw_ostream *sub_22E74241C(llvm::raw_ostream *result, unsigned int a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7)
{
  llvm::raw_ostream *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  char *v20;
  uint64_t i;
  uint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t *v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  BOOL v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;

  v11 = result;
  v12 = *(_QWORD *)(*((_QWORD *)result + 5) + 16 * (a2 - 4));
  v13 = *((_DWORD *)result + 8);
  v14 = *((_DWORD *)result + 6);
  v15 = *((_DWORD *)result + 7) | (a2 << v14);
  *((_DWORD *)result + 7) = v15;
  v16 = v14 + v13;
  if (v16 >= 0x20)
  {
    result = sub_22E740FDC((const char ***)result, v15);
    v32 = *((_DWORD *)v11 + 6);
    v33 = a2 >> -(char)v32;
    if (!v32)
      v33 = 0;
    *((_DWORD *)v11 + 7) = v33;
    v16 = ((_BYTE)v32 + (_BYTE)v13) & 0x1F;
  }
  *((_DWORD *)v11 + 6) = v16;
  v17 = *(_DWORD *)(v12 + 8);
  if ((a7 & 0xFF00000000) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)v12 + 8) & 1) == 0)
      result = sub_22E742710(v11, *(uint64_t **)v12, a7);
    v18 = 1;
  }
  else
  {
    v18 = 0;
  }
  if (v18 != v17)
  {
    v19 = 0;
    v20 = a5;
    i = a6;
    do
    {
      v22 = *(_QWORD *)v12 + 16 * v18;
      v23 = *(unsigned __int8 *)(v22 + 8);
      if ((v23 & 1) == 0)
      {
        v24 = (v23 >> 1) & 7;
        if (v24 == 3)
        {
          v43 = i;
          v25 = (uint64_t *)(*(_QWORD *)v12 + 16 * ++v18);
          if (v20)
          {
            v39 = a6;
            if (a6 >= 0x20)
            {
              v40 = a6;
              do
              {
                sub_22E740F64(v11, v40 & 0x1F | 0x20, 6);
                v39 = v40 >> 5;
                v38 = v40 > 0x3FF;
                v40 >>= 5;
              }
              while (v38);
            }
            result = sub_22E740F64(v11, v39, 6);
            if ((_DWORD)a6)
            {
              v41 = v43;
              do
              {
                v42 = *v20++;
                result = sub_22E742848(v11, v25, v42);
                --v41;
              }
              while (v41);
            }
            v20 = 0;
            i = v43;
          }
          else
          {
            v26 = a4 - v19;
            v28 = *((_DWORD *)v11 + 6);
            v27 = *((_DWORD *)v11 + 7);
            if (a4 - v19 >= 0x20)
            {
              do
              {
                v37 = v26 & 0x1F | 0x20;
                v27 |= v37 << v28;
                *((_DWORD *)v11 + 7) = v27;
                v28 += 6;
                if (v28 >= 0x20)
                {
                  result = sub_22E740FDC((const char ***)v11, v27);
                  v36 = *((_DWORD *)v11 + 6);
                  if (v36)
                    v27 = v37 >> -(char)v36;
                  else
                    v27 = 0;
                  *((_DWORD *)v11 + 7) = v27;
                  v28 = ((_BYTE)v36 + 6) & 0x1F;
                }
                *((_DWORD *)v11 + 6) = v28;
                v29 = v26 >> 5;
                v38 = v26 > 0x3FF;
                v26 >>= 5;
              }
              while (v38);
            }
            else
            {
              v29 = a4 - v19;
            }
            v30 = (v29 << v28) | v27;
            *((_DWORD *)v11 + 7) = v30;
            v31 = v28 + 6;
            if (v31 >= 0x20)
            {
              result = sub_22E740FDC((const char ***)v11, v30);
              v34 = *((_DWORD *)v11 + 6);
              v35 = v29 >> -(char)v34;
              if (!v34)
                v35 = 0;
              *((_DWORD *)v11 + 7) = v35;
              v31 = ((_BYTE)v34 + 6) & 0x1F;
            }
            *((_DWORD *)v11 + 6) = v31;
            for (i = v43; (_DWORD)a4 != v19; ++v19)
              result = sub_22E74297C(v11, v25, *(_QWORD *)(a3 + 8 * v19));
            v20 = 0;
            v19 = a4;
          }
          goto LABEL_13;
        }
        if (v24 == 5)
        {
          if (v20)
          {
            result = sub_22E742AB4(v11, a5, a6, 1);
            v20 = 0;
          }
          else
          {
            result = sub_22F2AEC28(v11, (char *)(a3 + 8 * v19), a4 - v19, 1);
          }
          goto LABEL_13;
        }
        result = sub_22E74297C(v11, (uint64_t *)v22, *(_QWORD *)(a3 + 8 * v19));
      }
      ++v19;
LABEL_13:
      ++v18;
    }
    while (v18 != v17);
  }
  return result;
}

llvm::raw_ostream *sub_22E742710(llvm::raw_ostream *result, uint64_t *a2, unsigned int a3)
{
  llvm::raw_ostream *v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  char v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;

  v4 = result;
  v5 = (*((unsigned __int8 *)a2 + 8) >> 1) & 7;
  if (v5 == 1)
  {
    v6 = *a2;
    if (!*a2)
      return result;
    v7 = *((_DWORD *)result + 6);
    v8 = *((_DWORD *)result + 7) | (a3 << v7);
    *((_DWORD *)result + 7) = v8;
    v9 = v7 + v6;
    if (v9 < 0x20)
      goto LABEL_25;
    result = sub_22E740FDC((const char ***)result, v8);
    v10 = *((_DWORD *)v4 + 6);
    v11 = a3 >> -(char)v10;
    if (!v10)
      v11 = 0;
    *((_DWORD *)v4 + 7) = v11;
    v12 = v10 + v6;
    goto LABEL_24;
  }
  if (v5 != 2)
  {
    if (a3 == 46)
      v13 = 62;
    else
      v13 = 63;
    if (a3 - 48 <= 9)
      v13 = (char)a3 + 4;
    if (a3 - 65 <= 0x19)
      v13 = (char)a3 - 39;
    if (a3 - 97 <= 0x19)
      v14 = (char)a3 - 97;
    else
      v14 = v13;
    v15 = *((_DWORD *)result + 6);
    v16 = *((_DWORD *)result + 7) | (v14 << v15);
    *((_DWORD *)result + 7) = v16;
    v9 = v15 + 6;
    if (v9 < 0x20)
      goto LABEL_25;
    result = sub_22E740FDC((const char ***)result, v16);
    v17 = *((_DWORD *)v4 + 6);
    v18 = v14 >> -(char)v17;
    if (!v17)
      v18 = 0;
    *((_DWORD *)v4 + 7) = v18;
    v12 = v17 + 6;
LABEL_24:
    v9 = v12 & 0x1F;
LABEL_25:
    *((_DWORD *)v4 + 6) = v9;
    return result;
  }
  if (*a2)
    return sub_22E742298(result, a3, *a2);
  return result;
}

llvm::raw_ostream *sub_22E742848(llvm::raw_ostream *result, uint64_t *a2, unsigned int a3)
{
  llvm::raw_ostream *v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  char v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;

  v4 = result;
  v5 = (*((unsigned __int8 *)a2 + 8) >> 1) & 7;
  if (v5 == 1)
  {
    v6 = *a2;
    if (!*a2)
      return result;
    v7 = *((_DWORD *)result + 6);
    v8 = *((_DWORD *)result + 7) | (a3 << v7);
    *((_DWORD *)result + 7) = v8;
    v9 = v7 + v6;
    if (v9 < 0x20)
      goto LABEL_27;
    result = sub_22E740FDC((const char ***)result, v8);
    v10 = *((_DWORD *)v4 + 6);
    v11 = a3 >> -(char)v10;
    if (!v10)
      v11 = 0;
    *((_DWORD *)v4 + 7) = v11;
    v12 = v10 + v6;
    goto LABEL_26;
  }
  if (v5 != 2)
  {
    if (a3 == 46)
      v13 = 62;
    else
      v13 = 63;
    if (a3 - 48 <= 9)
      v14 = (char)a3 + 4;
    else
      v14 = v13;
    if (a3 - 65 <= 0x19)
      v15 = (char)a3 - 39;
    else
      v15 = v14;
    if (a3 - 97 <= 0x19)
      v16 = (char)a3 - 97;
    else
      v16 = v15;
    v17 = *((_DWORD *)result + 6);
    v18 = *((_DWORD *)result + 7) | (v16 << v17);
    *((_DWORD *)result + 7) = v18;
    v9 = v17 + 6;
    if (v9 < 0x20)
      goto LABEL_27;
    result = sub_22E740FDC((const char ***)result, v18);
    v19 = *((_DWORD *)v4 + 6);
    v20 = v16 >> -(char)v19;
    if (!v19)
      v20 = 0;
    *((_DWORD *)v4 + 7) = v20;
    v12 = v19 + 6;
LABEL_26:
    v9 = v12 & 0x1F;
LABEL_27:
    *((_DWORD *)v4 + 6) = v9;
    return result;
  }
  if (*a2)
    return sub_22E742298(result, a3, *a2);
  return result;
}

llvm::raw_ostream *sub_22E74297C(llvm::raw_ostream *result, uint64_t *a2, unint64_t a3)
{
  unsigned int v3;
  llvm::raw_ostream *v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  char v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;

  v3 = a3;
  v4 = result;
  v5 = (*((unsigned __int8 *)a2 + 8) >> 1) & 7;
  if (v5 == 1)
  {
    v6 = *a2;
    if (!*a2)
      return result;
    v7 = *((_DWORD *)result + 6);
    v8 = *((_DWORD *)result + 7) | ((_DWORD)a3 << v7);
    *((_DWORD *)result + 7) = v8;
    v9 = v7 + v6;
    if (v9 < 0x20)
      goto LABEL_27;
    result = sub_22E740FDC((const char ***)result, v8);
    v10 = *((_DWORD *)v4 + 6);
    v11 = v3 >> -(char)v10;
    if (!v10)
      v11 = 0;
    *((_DWORD *)v4 + 7) = v11;
    v12 = v10 + v6;
    goto LABEL_26;
  }
  if (v5 != 2)
  {
    if ((char)a3 == 46)
      v13 = 62;
    else
      v13 = 63;
    if (((char)a3 - 48) <= 9)
      v14 = (char)a3 + 4;
    else
      v14 = v13;
    if (((char)a3 - 65) <= 0x19)
      v15 = (char)a3 - 39;
    else
      v15 = v14;
    if ((a3 - 97) <= 0x19u)
      v16 = (char)a3 - 97;
    else
      v16 = v15;
    v17 = *((_DWORD *)result + 6);
    v18 = *((_DWORD *)result + 7) | (v16 << v17);
    *((_DWORD *)result + 7) = v18;
    v9 = v17 + 6;
    if (v9 < 0x20)
      goto LABEL_27;
    result = sub_22E740FDC((const char ***)result, v18);
    v19 = *((_DWORD *)v4 + 6);
    v20 = v16 >> -(char)v19;
    if (!v19)
      v20 = 0;
    *((_DWORD *)v4 + 7) = v20;
    v12 = v19 + 6;
LABEL_26:
    v9 = v12 & 0x1F;
LABEL_27:
    *((_DWORD *)v4 + 6) = v9;
    return result;
  }
  if (*a2)
    return sub_22E742298(result, a3, *a2);
  return result;
}

llvm::raw_ostream *sub_22E742AB4(llvm::raw_ostream *result, char *a2, uint64_t a3, char a4)
{
  uint64_t v4;
  llvm::raw_ostream *v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  char v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  int v19;
  int v20;
  unsigned int v21;

  v4 = a3;
  v6 = result;
  if ((a4 & 1) != 0)
  {
    if (a3 > 0x1F)
    {
      v8 = *((_DWORD *)result + 6);
      v7 = *((_DWORD *)result + 7);
      v16 = a3;
      do
      {
        v17 = v16 & 0x1F | 0x20;
        v7 |= v17 << v8;
        *((_DWORD *)v6 + 7) = v7;
        v8 += 6;
        if (v8 >= 0x20)
        {
          result = sub_22E740FDC((const char ***)v6, v7);
          v19 = *((_DWORD *)v6 + 6);
          if (v19)
            v7 = v17 >> -(char)v19;
          else
            v7 = 0;
          *((_DWORD *)v6 + 7) = v7;
          v8 = ((_BYTE)v19 + 6) & 0x1F;
        }
        *((_DWORD *)v6 + 6) = v8;
        v9 = v16 >> 5;
        v18 = v16 > 0x3FF;
        v16 >>= 5;
      }
      while (v18);
    }
    else
    {
      v8 = *((_DWORD *)result + 6);
      v7 = *((_DWORD *)result + 7);
      v9 = a3;
    }
    v10 = (v9 << v8) | v7;
    *((_DWORD *)v6 + 7) = v10;
    v11 = v8 + 6;
    if (v11 >= 0x20)
    {
      result = sub_22E740FDC((const char ***)v6, v10);
      v20 = *((_DWORD *)v6 + 6);
      v21 = v9 >> -(char)v20;
      if (!v20)
        v21 = 0;
      *((_DWORD *)v6 + 7) = v21;
      v11 = ((_BYTE)v20 + 6) & 0x1F;
    }
    *((_DWORD *)v6 + 6) = v11;
  }
  else
  {
    v11 = *((_DWORD *)result + 6);
  }
  if (v11)
  {
    result = sub_22E740FDC((const char ***)v6, *((_DWORD *)v6 + 7));
    *((_QWORD *)v6 + 3) = 0;
  }
  for (; v4; --v4)
  {
    v12 = *a2++;
    result = sub_22E742C34((const char ***)v6, v12);
  }
  while (1)
  {
    v13 = (_QWORD *)*((_QWORD *)v6 + 1);
    v14 = *(_QWORD *)(*(_QWORD *)v6 + 8);
    if (v13)
    {
      result = (llvm::raw_ostream *)(*(uint64_t (**)(_QWORD))(*v13 + 80))(*((_QWORD *)v6 + 1));
      v15 = (char *)result + v13[4] - v13[2];
    }
    else
    {
      LOBYTE(v15) = 0;
    }
    if ((((_BYTE)v15 + (_BYTE)v14) & 3) == 0)
      break;
    result = sub_22E742C34((const char ***)v6, 0);
  }
  return result;
}

llvm::raw_ostream *sub_22E742C34(const char ***a1, char a2)
{
  const char **v4;
  const char *v5;
  llvm::raw_ostream *result;

  v4 = *a1;
  v5 = (*a1)[1];
  if (v5 + 1 > (*a1)[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v5 = v4[1];
  }
  v5[(_QWORD)*v4] = a2;
  ++v4[1];
  result = (llvm::raw_ostream *)a1[1];
  if (result)
  {
    if ((*a1)[1] >= (const char *)a1[2])
    {
      result = (llvm::raw_ostream *)llvm::raw_ostream::write(result, **a1);
      (*a1)[1] = 0;
    }
  }
  return result;
}

void sub_22E742CC8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2 != (void *)(a1 + 40))
    free(v2);
}

_DWORD *sub_22E742CE8(uint64_t a1, _DWORD *a2)
{
  int v2;
  int v3;
  unsigned int v4;
  _DWORD *v5;
  int v6;
  _DWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  _DWORD *v12;
  _DWORD *v13;

  v2 = *(_DWORD *)(a1 + 16);
  if (!v2)
  {
    v12 = a2;
    v13 = 0;
LABEL_14:
    v5 = sub_22E742DA8(a1, (uint64_t)v12, v12, v13);
    *(_QWORD *)v5 = *v12;
    return v5;
  }
  v3 = v2 - 1;
  v4 = (37 * *a2) & (v2 - 1);
  v5 = (_DWORD *)(*(_QWORD *)a1 + 8 * v4);
  v6 = *v5;
  if (*a2 != *v5)
  {
    v8 = 0;
    v9 = 1;
    while (v6 != -1)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v6 == -2;
      if (v10)
        v8 = v5;
      v11 = v4 + v9++;
      v4 = v11 & v3;
      v5 = (_DWORD *)(*(_QWORD *)a1 + 8 * (v11 & v3));
      v6 = *v5;
      if (*a2 == *v5)
        return v5;
    }
    v12 = a2;
    if (v8)
      v13 = v8;
    else
      v13 = v5;
    goto LABEL_14;
  }
  return v5;
}

_DWORD *sub_22E742DA8(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6;
  unsigned int v7;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  _DWORD *v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  BOOL v22;
  unsigned int v23;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
      goto LABEL_3;
    sub_22E742F30(a1, v7);
    v15 = *(_DWORD *)(a1 + 16);
    if (v15)
    {
      v16 = v15 - 1;
      v17 = (37 * *a3) & v16;
      a4 = (_DWORD *)(*(_QWORD *)a1 + 8 * v17);
      v18 = *a4;
      if (*a3 == *a4)
        goto LABEL_3;
      v13 = 0;
      v19 = 1;
      while (v18 != -1)
      {
        if (v13)
          v20 = 0;
        else
          v20 = v18 == -2;
        if (v20)
          v13 = a4;
        v21 = v17 + v19++;
        v17 = v21 & v16;
        a4 = (_DWORD *)(*(_QWORD *)a1 + 8 * v17);
        v18 = *a4;
        if (*a3 == *a4)
          goto LABEL_3;
      }
      goto LABEL_10;
    }
LABEL_24:
    a4 = 0;
    goto LABEL_3;
  }
  sub_22E742F30(a1, 2 * v7);
  v9 = *(_DWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_24;
  v10 = v9 - 1;
  v11 = (37 * *a3) & v10;
  a4 = (_DWORD *)(*(_QWORD *)a1 + 8 * v11);
  v12 = *a4;
  if (*a3 == *a4)
    goto LABEL_3;
  v13 = 0;
  v14 = 1;
  while (v12 != -1)
  {
    if (v13)
      v22 = 0;
    else
      v22 = v12 == -2;
    if (v22)
      v13 = a4;
    v23 = v11 + v14++;
    v11 = v23 & v10;
    a4 = (_DWORD *)(*(_QWORD *)a1 + 8 * v11);
    v12 = *a4;
    if (*a3 == *a4)
      goto LABEL_3;
  }
LABEL_10:
  if (v13)
    a4 = v13;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_DWORD *sub_22E742F30(uint64_t a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(int **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_DWORD *)MEMORY[0x23489D23C](8 * v8, 4);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22E742FF0(a1, v4, &v4[2 * v3]);
    return (_DWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(8 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 8 * v10;
      do
      {
        *result = -1;
        result += 2;
        v11 -= 8;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22E742FF0(uint64_t result, int *a2, int *a3)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  int v7;
  int v8;
  unsigned int v9;
  _DWORD *v10;
  int v11;
  _DWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;

  *(_QWORD *)(result + 8) = 0;
  v3 = *(_DWORD **)result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    v6 = *(_DWORD **)result;
    do
    {
      *v6 = -1;
      v6 += 2;
      v5 -= 8;
    }
    while (v5);
  }
  for (; a2 != a3; a2 += 2)
  {
    v7 = *a2;
    if (*a2 <= 0xFFFFFFFD)
    {
      v8 = *(_DWORD *)(result + 16) - 1;
      v9 = v8 & (37 * v7);
      v10 = &v3[2 * v9];
      v11 = *v10;
      if (v7 != *v10)
      {
        v12 = 0;
        v13 = 1;
        while (v11 != -1)
        {
          if (v12)
            v14 = 0;
          else
            v14 = v11 == -2;
          if (v14)
            v12 = v10;
          v15 = v9 + v13++;
          v9 = v15 & v8;
          v10 = &v3[2 * (v15 & v8)];
          v11 = *v10;
          if (v7 == *v10)
            goto LABEL_13;
        }
        if (v12)
          v10 = v12;
      }
LABEL_13:
      *v10 = v7;
      v10[1] = a2[1];
      ++*(_DWORD *)(result + 8);
    }
  }
  return result;
}

llvm::raw_ostream *sub_22E7430C8(llvm::raw_ostream *result, uint64_t *a2)
{
  llvm::raw_ostream *v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  BOOL v35;
  uint64_t v36;

  v3 = result;
  v4 = *((_DWORD *)result + 8);
  v5 = *((_DWORD *)result + 6);
  v6 = *((_DWORD *)result + 7) | (2 << v5);
  *((_DWORD *)result + 7) = v6;
  v7 = v5 + v4;
  if (v7 >= 0x20)
  {
    result = sub_22E740FDC((const char ***)result, v6);
    v30 = *((_DWORD *)v3 + 6);
    if (v30)
      v6 = 2u >> -(char)v30;
    else
      v6 = 0;
    v7 = ((_BYTE)v30 + (_BYTE)v4) & 0x1F;
  }
  *((_DWORD *)v3 + 6) = v7;
  v8 = *((_DWORD *)a2 + 2);
  if (v8 >= 0x10)
  {
    do
    {
      v34 = v8 & 0xF | 0x10;
      v6 |= v34 << v7;
      *((_DWORD *)v3 + 7) = v6;
      if (v7 >= 0x1B)
      {
        result = sub_22E740FDC((const char ***)v3, v6);
        v33 = *((_DWORD *)v3 + 6);
        if (v33)
          v6 = v34 >> -(char)v33;
        else
          v6 = 0;
        *((_DWORD *)v3 + 7) = v6;
        v7 = ((_BYTE)v33 + 5) & 0x1F;
      }
      else
      {
        v7 += 5;
      }
      *((_DWORD *)v3 + 6) = v7;
      v9 = v8 >> 4;
      v35 = v8 > 0xFF;
      v8 >>= 4;
    }
    while (v35);
  }
  else
  {
    v9 = *((_DWORD *)a2 + 2);
  }
  v10 = (v9 << v7) | v6;
  *((_DWORD *)v3 + 7) = v10;
  if (v7 >= 0x1B)
  {
    result = sub_22E740FDC((const char ***)v3, v10);
    v31 = *((_DWORD *)v3 + 6);
    v32 = v9 >> -(char)v31;
    if (!v31)
      v32 = 0;
    *((_DWORD *)v3 + 7) = v32;
    v11 = ((_BYTE)v31 + 5) & 0x1F;
  }
  else
  {
    v11 = v7 + 5;
  }
  *((_DWORD *)v3 + 6) = v11;
  v12 = *((unsigned int *)a2 + 2);
  if ((_DWORD)v12)
  {
    v13 = 0;
    v14 = 16 * v12;
    while (1)
    {
      v15 = *a2;
      v16 = *a2 + v13;
      v17 = *(_BYTE *)(v16 + 8) & 1;
      v18 = *((_DWORD *)v3 + 6);
      v19 = (v17 << v18) | *((_DWORD *)v3 + 7);
      *((_DWORD *)v3 + 7) = v19;
      v20 = v18 + 1;
      if (v20 >= 0x20)
      {
        result = sub_22E740FDC((const char ***)v3, v19);
        v27 = *((_DWORD *)v3 + 6);
        if (v27)
          v19 = v17 >> -(char)v27;
        else
          v19 = 0;
        *((_DWORD *)v3 + 7) = v19;
        v20 = ((_BYTE)v27 + 1) & 0x1F;
      }
      *((_DWORD *)v3 + 6) = v20;
      v21 = *(unsigned __int8 *)(v16 + 8);
      if ((v21 & 1) != 0)
        break;
      v22 = (v21 >> 1) & 7;
      v23 = (v22 << v20) | v19;
      *((_DWORD *)v3 + 7) = v23;
      if (v20 >= 0x1D)
      {
        result = sub_22E740FDC((const char ***)v3, v23);
        v28 = *((_DWORD *)v3 + 6);
        v29 = v22 >> -(char)v28;
        if (!v28)
          v29 = 0;
        *((_DWORD *)v3 + 7) = v29;
        v24 = ((_BYTE)v28 + 3) & 0x1F;
      }
      else
      {
        v24 = v20 + 3;
      }
      *((_DWORD *)v3 + 6) = v24;
      v25 = (*(unsigned __int8 *)(v16 + 8) >> 1) & 7;
      if ((v25 - 1) < 2)
      {
        v26 = 5;
LABEL_14:
        result = sub_22E742298(v3, *(_QWORD *)(v15 + v13), v26);
        goto LABEL_15;
      }
      if ((v25 - 3) >= 3)
      {
        v36 = llvm::report_fatal_error((llvm *)"Invalid encoding", (const char *)1);
        return (llvm::raw_ostream *)sub_22E743328(v36);
      }
LABEL_15:
      v13 += 16;
      if (v14 == v13)
        return result;
    }
    v26 = 8;
    goto LABEL_14;
  }
  return result;
}

llvm::raw_ostream *sub_22E743328(llvm::raw_ostream *result, unsigned int a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7)
{
  llvm::raw_ostream *v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  uint64_t *v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  BOOL v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;

  v12 = result;
  v13 = *(_QWORD *)(*((_QWORD *)result + 5) + 16 * (a2 - 4));
  v14 = *((_DWORD *)result + 8);
  v15 = *((_DWORD *)result + 6);
  v16 = *((_DWORD *)result + 7) | (a2 << v15);
  *((_DWORD *)result + 7) = v16;
  v17 = v15 + v14;
  if (v17 >= 0x20)
  {
    result = sub_22E740FDC((const char ***)result, v16);
    v32 = *((_DWORD *)v12 + 6);
    v33 = a2 >> -(char)v32;
    if (!v32)
      v33 = 0;
    *((_DWORD *)v12 + 7) = v33;
    v17 = ((_BYTE)v32 + (_BYTE)v14) & 0x1F;
  }
  *((_DWORD *)v12 + 6) = v17;
  v18 = *(_DWORD *)(v13 + 8);
  if ((a7 & 0xFF00000000) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)v13 + 8) & 1) == 0)
      result = sub_22E742710(v12, *(uint64_t **)v13, a7);
    v19 = 1;
  }
  else
  {
    v19 = 0;
  }
  if (v19 != v18)
  {
    v20 = 0;
    v21 = a6;
    v22 = a5;
    while (1)
    {
      v23 = *(_QWORD *)v13 + 16 * v19;
      v24 = *(unsigned __int8 *)(v23 + 8);
      if ((v24 & 1) != 0)
        goto LABEL_12;
      v25 = (v24 >> 1) & 7;
      if (v25 != 3)
        break;
      v40 = v21;
      v41 = a6;
      v26 = (uint64_t *)(*(_QWORD *)v13 + 16 * ++v19);
      if (v22)
      {
        v37 = a6;
        if (a6 >= 0x20)
        {
          do
          {
            sub_22E740F64(v12, a6 & 0x1F | 0x20, 6);
            v37 = a6 >> 5;
            v36 = a6 > 0x3FF;
            LODWORD(a6) = a6 >> 5;
          }
          while (v36);
        }
        result = sub_22E740F64(v12, v37, 6);
        if ((_DWORD)v41)
        {
          v38 = v40;
          do
          {
            v39 = *v22++;
            result = sub_22E742848(v12, v26, v39);
            --v38;
          }
          while (v38);
        }
        v22 = 0;
      }
      else
      {
        v27 = a4 - v20;
        if (a4 - v20 >= 0x20)
        {
          do
          {
            result = sub_22E740F64(v12, v27 & 0x1F | 0x20, 6);
            v28 = v27 >> 5;
            v36 = v27 > 0x3FF;
            v27 >>= 5;
          }
          while (v36);
        }
        else
        {
          v28 = a4 - v20;
        }
        v29 = *((_DWORD *)v12 + 6);
        v30 = *((_DWORD *)v12 + 7) | (v28 << v29);
        *((_DWORD *)v12 + 7) = v30;
        v31 = v29 + 6;
        if (v31 >= 0x20)
        {
          result = sub_22E740FDC((const char ***)v12, v30);
          v34 = *((_DWORD *)v12 + 6);
          v35 = v28 >> -(char)v34;
          if (!v34)
            v35 = 0;
          *((_DWORD *)v12 + 7) = v35;
          v31 = ((_BYTE)v34 + 6) & 0x1F;
        }
        *((_DWORD *)v12 + 6) = v31;
        if ((_DWORD)a4 != v20)
        {
          a6 = v41;
          do
            result = sub_22E742710(v12, v26, *(_DWORD *)(a3 + 4 * v20++));
          while ((_DWORD)a4 != v20);
          v22 = 0;
          v20 = a4;
          v21 = v40;
          goto LABEL_13;
        }
        v22 = 0;
        v20 = a4;
      }
      v21 = v40;
      a6 = v41;
LABEL_13:
      if (++v19 == v18)
        return result;
    }
    if (v25 == 5)
    {
      if (v22)
      {
        result = sub_22E742AB4(v12, a5, a6, 1);
        v22 = 0;
      }
      else
      {
        result = sub_22F2AED6C(v12, (char *)(a3 + 4 * v20), a4 - v20, 1);
      }
      goto LABEL_13;
    }
    result = sub_22E742710(v12, (uint64_t *)v23, *(_DWORD *)(a3 + 4 * v20));
LABEL_12:
    ++v20;
    goto LABEL_13;
  }
  return result;
}

uint64_t sub_22E7435F4(uint64_t result, unint64_t a2, unsigned int a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int *v15;
  int v16;
  uint64_t v17;
  char v18[4];
  int v19;
  uint64_t v20;

  v4 = result;
  v20 = *MEMORY[0x24BDAC8D0];
  v5 = a2 >> 3;
  v6 = a2 & 7;
  v7 = *(_QWORD **)(result + 8);
  if (!v7)
  {
    v8 = 0;
LABEL_15:
    v15 = (int *)(**(_QWORD **)v4 + v5 - v8);
    if (v6)
    {
      v16 = v15[1] & (-1 << v6) | (a3 >> -(char)v6) & ~(-1 << v6);
      *v15 = *v15 & ~(-1 << v6) | (a3 << v6);
      v15[1] = v16;
    }
    else
    {
      *v15 = a3;
    }
    return result;
  }
  result = (*(uint64_t (**)(_QWORD))(*v7 + 80))(*(_QWORD *)(result + 8));
  v8 = v7[4] - v7[2] + result;
  v9 = v8 - v5;
  if (v8 <= v5)
    goto LABEL_15;
  (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 8) + 80))(*(_QWORD *)(v4 + 8));
  if (v6)
    v10 = 8;
  else
    v10 = 4;
  if (v9 >= v10)
    v11 = v10;
  else
    v11 = v9;
  v12 = v10 - v11;
  if (v6)
  {
    llvm::raw_fd_ostream::seek(*(llvm::raw_fd_ostream **)(v4 + 8));
    llvm::raw_fd_stream::read(*(llvm::raw_fd_stream **)(v4 + 8), v18);
    if (v9 <= 7)
    {
      v13 = 0;
      v14 = *(_QWORD **)v4;
      do
      {
        v18[v11 + v13] = *(_BYTE *)(*v14 + v13);
        ++v13;
      }
      while (v12 != v13);
    }
    *(_DWORD *)v18 = *(_DWORD *)v18 & ~(-1 << v6) | (a3 << v6);
    v19 = v19 & (-1 << v6) | (a3 >> -(char)v6) & ~(-1 << v6);
  }
  else
  {
    *(_DWORD *)v18 = a3;
  }
  llvm::raw_fd_ostream::seek(*(llvm::raw_fd_ostream **)(v4 + 8));
  llvm::raw_ostream::write(*(llvm::raw_ostream **)(v4 + 8), v18);
  if (v10 > v9)
  {
    v17 = 0;
    do
    {
      *(_BYTE *)(**(_QWORD **)v4 + v17) = v18[v11 + v17];
      ++v17;
    }
    while (v12 != v17);
  }
  return llvm::raw_fd_ostream::seek(*(llvm::raw_fd_ostream **)(v4 + 8));
}

void sub_22E743814(uint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;

  v6 = a2;
  v8 = a1[2];
  v9 = (char *)*a1;
  if (a4 <= (v8 - *a1) >> 4)
  {
    v16 = (char *)a1[1];
    v17 = (v16 - v9) >> 4;
    if (v17 >= a4)
    {
      if (a2 == a3)
      {
        v24 = *a1;
      }
      else
      {
        v24 = *a1;
        do
        {
          sub_22E6C83A4(v9, v6);
          v6 += 2;
          v9 += 16;
          v24 += 16;
        }
        while (v6 != a3);
        v16 = (char *)a1[1];
      }
      while (v16 != (char *)v24)
      {
        v25 = (std::__shared_weak_count *)*((_QWORD *)v16 - 1);
        if (v25)
        {
          p_shared_owners = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldaxr(p_shared_owners);
          while (__stlxr(v27 - 1, p_shared_owners));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        v16 -= 16;
      }
      a1[1] = v24;
    }
    else
    {
      v18 = &a2[2 * v17];
      if (v16 != v9)
      {
        v19 = 16 * v17;
        do
        {
          sub_22E6C83A4(v9, v6);
          v6 += 2;
          v9 += 16;
          v19 -= 16;
        }
        while (v19);
        v9 = (char *)a1[1];
      }
      v20 = v9;
      if (v18 != a3)
      {
        v20 = v9;
        do
        {
          v21 = v18[1];
          *v20 = *v18;
          v20[1] = v21;
          if (v21)
          {
            v22 = (unint64_t *)(v21 + 8);
            do
              v23 = __ldxr(v22);
            while (__stxr(v23 + 1, v22));
          }
          v18 += 2;
          v20 += 2;
        }
        while (v18 != a3);
      }
      a1[1] = (uint64_t)v20;
    }
  }
  else
  {
    if (v9)
    {
      sub_22E3B485C(a1);
      operator delete((void *)*a1);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60)
      goto LABEL_43;
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v10;
    if (v11 >> 60)
LABEL_43:
      abort();
    v12 = operator new(16 * v11);
    *a1 = (uint64_t)v12;
    a1[1] = (uint64_t)v12;
    a1[2] = (uint64_t)&v12[2 * v11];
    while (v6 != a3)
    {
      v13 = v6[1];
      *v12 = *v6;
      v12[1] = v13;
      if (v13)
      {
        v14 = (unint64_t *)(v13 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      v6 += 2;
      v12 += 2;
    }
    a1[1] = (uint64_t)v12;
  }
}

uint64_t sub_22E743A18(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24FA71608;
  llvm::deallocate_buffer(*(llvm **)(a1 + 88), (void *)(4 * *(unsigned int *)(a1 + 104)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 64), (void *)(8 * *(unsigned int *)(a1 + 80)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 40), (void *)(8 * *(unsigned int *)(a1 + 56)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 16), (void *)(8 * *(unsigned int *)(a1 + 32)));
  return a1;
}

void sub_22E743A94(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24FA71608;
  llvm::deallocate_buffer(*(llvm **)(a1 + 88), (void *)(4 * *(unsigned int *)(a1 + 104)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 64), (void *)(8 * *(unsigned int *)(a1 + 80)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 40), (void *)(8 * *(unsigned int *)(a1 + 56)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 16), (void *)(8 * *(unsigned int *)(a1 + 32)));
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E743B20(uint64_t a1)
{
  sub_22E74181C(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32) + 1056, 9u, 4u);
  std::system_category();
  return 0;
}

uint64_t sub_22E743B54(uint64_t a1)
{
  sub_22E7416F4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32) + 1056);
  std::system_category();
  return 0;
}

uint64_t sub_22E743B80(uint64_t a1, uint64_t a2)
{
  int v3;
  int v5;

  v5 = a2;
  v3 = sub_22E744248(*(_QWORD *)(a1 + 8), a2);
  sub_22E742CE8(a1 + 40, &v5)[1] = v3;
  std::system_category();
  return 0;
}

uint64_t sub_22E743BD0(uint64_t a1, int a2, char *a3, uint64_t a4)
{
  int v5;
  int v7;

  v7 = a2;
  v5 = sub_22E7446E8(*(_QWORD *)(a1 + 8), a3, a4);
  sub_22E742CE8(a1 + 64, &v7)[1] = v5;
  std::system_category();
  return 0;
}

uint64_t sub_22E743C28(uint64_t a1, unsigned int a2, uint64_t a3, int a4, int a5, char *a6, uint64_t a7)
{
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  llvm::raw_ostream *v16;
  _DWORD *v17;
  int v19;
  int v20;
  int v21;
  _QWORD v22[3];
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v19 = a5;
  v20 = a4;
  v22[0] = 2;
  v22[1] = a2;
  v22[2] = sub_22E742CE8(a1 + 16, (_DWORD *)a3)[1];
  v12 = *(_QWORD *)(a3 + 4);
  *(_QWORD *)&v13 = v12;
  *((_QWORD *)&v13 + 1) = HIDWORD(v12);
  v23 = v13;
  v24 = *(unsigned int *)(a3 + 12);
  v25 = sub_22E742CE8(a1 + 40, &v20)[1];
  if (a5)
    v14 = sub_22E742CE8(a1 + 64, &v19)[1];
  else
    v14 = 0;
  v26 = v14;
  v27 = a7;
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
  v16 = (llvm::raw_ostream *)(v15 + 1056);
  v21 = 2;
  v17 = sub_22E742CE8(v15 + 1200, &v21);
  sub_22E74241C(v16, v17[1], (uint64_t)v22, 9, a6, a7, 0);
  std::system_category();
  return 0;
}

uint64_t sub_22E743D4C(uint64_t a1, int a2, int a3, int a4, void *__src, size_t __len)
{
  uint64_t v7;
  void *v10;
  char *p_p;
  size_t v12;
  size_t v13;
  int v14;
  void *__p;
  size_t v17;
  int64_t v18;
  int v19;

  v19 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (!__src)
  {
    __p = 0;
    v17 = 0;
    p_p = (char *)&__p;
    v18 = 0;
    goto LABEL_14;
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v12 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v12 = __len | 7;
    v13 = v12 + 1;
    v10 = operator new(v12 + 1);
    v17 = __len;
    v18 = v13 | 0x8000000000000000;
    __p = v10;
    goto LABEL_10;
  }
  HIBYTE(v18) = __len;
  v10 = &__p;
  if (__len)
LABEL_10:
    memmove(v10, __src, __len);
  *((_BYTE *)v10 + __len) = 0;
  if (v18 >= 0)
    p_p = (char *)&__p;
  else
    p_p = (char *)__p;
LABEL_14:
  v14 = sub_22E7447CC(v7, p_p);
  sub_22E742CE8(a1 + 16, &v19)[1] = v14;
  if (SHIBYTE(v18) < 0)
    operator delete(__p);
  std::system_category();
  return 0;
}

uint64_t sub_22E743E5C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6)
{
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  _DWORD *v17;
  int v18;
  _DWORD *v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  _DWORD *v23;
  _DWORD *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  llvm::raw_ostream *v29;
  _DWORD *v30;
  unsigned int v32;
  int v33;
  int v34;
  _QWORD v35[3];
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v33 = a2;
  v11 = a1 + 16;
  v12 = sub_22E742CE8(a1 + 16, &v33)[1];
  v32 = v12;
  v13 = *(_QWORD *)(a1 + 88);
  v14 = *(_DWORD *)(a1 + 104);
  if (!v14)
  {
    v23 = 0;
LABEL_16:
    v24 = sub_22E7443B4(a1 + 88, (uint64_t)&v32, &v32, v23);
    *v24 = v32;
    v35[0] = 8;
    v35[1] = v32;
    v35[2] = sub_22E742CE8(v11, (_DWORD *)a3)[1];
    v25 = *(_QWORD *)(a3 + 4);
    *(_QWORD *)&v26 = v25;
    *((_QWORD *)&v26 + 1) = HIDWORD(v25);
    v36 = v26;
    v37 = *(unsigned int *)(a3 + 12);
    v38 = sub_22E742CE8(v11, (_DWORD *)a4)[1];
    v27 = *(_QWORD *)(a4 + 4);
    *(_QWORD *)&v26 = v27;
    *((_QWORD *)&v26 + 1) = HIDWORD(v27);
    v39 = v26;
    v40 = *(unsigned int *)(a4 + 12);
    v41 = a6;
    v28 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
    v29 = (llvm::raw_ostream *)(v28 + 1056);
    v34 = 8;
    v30 = sub_22E742CE8(v28 + 1200, &v34);
    sub_22E74241C(v29, v30[1], (uint64_t)v35, 11, a5, a6, 0);
    goto LABEL_17;
  }
  v15 = v14 - 1;
  v16 = v15 & (37 * v12);
  v17 = (_DWORD *)(v13 + 4 * v16);
  v18 = *v17;
  if (v12 != *v17)
  {
    v19 = 0;
    v20 = 1;
    while (v18 != -1)
    {
      if (v19)
        v21 = 0;
      else
        v21 = v18 == -2;
      if (v21)
        v19 = v17;
      v22 = v16 + v20++;
      v16 = v22 & v15;
      v17 = (_DWORD *)(v13 + 4 * v16);
      v18 = *v17;
      if (v12 == *v17)
        goto LABEL_17;
    }
    if (v19)
      v23 = v19;
    else
      v23 = v17;
    goto LABEL_16;
  }
LABEL_17:
  std::system_category();
  return 0;
}

uint64_t sub_22E744028(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  llvm::raw_ostream *v15;
  _DWORD *v16;
  int v18;
  _QWORD v19[2];
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v19[0] = 7;
  v10 = a1 + 16;
  v19[1] = sub_22E742CE8(a1 + 16, (_DWORD *)a2)[1];
  v11 = *(_QWORD *)(a2 + 4);
  *(_QWORD *)&v12 = v11;
  *((_QWORD *)&v12 + 1) = HIDWORD(v11);
  v20 = v12;
  v21 = *(unsigned int *)(a2 + 12);
  v22 = sub_22E742CE8(v10, (_DWORD *)a3)[1];
  v13 = *(_QWORD *)(a3 + 4);
  *(_QWORD *)&v12 = v13;
  *((_QWORD *)&v12 + 1) = HIDWORD(v13);
  v23 = v12;
  v24 = *(unsigned int *)(a3 + 12);
  v25 = a5;
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
  v15 = (llvm::raw_ostream *)(v14 + 1056);
  v18 = 7;
  v16 = sub_22E742CE8(v14 + 1200, &v18);
  sub_22E74241C(v15, v16[1], (uint64_t)v19, 10, a4, a5, 0);
  std::system_category();
  return 0;
}

uint64_t sub_22E744140(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  llvm::raw_ostream *v11;
  _DWORD *v12;
  int v14;
  _QWORD v15[2];
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v15[0] = 3;
  v6 = a1 + 16;
  v15[1] = sub_22E742CE8(a1 + 16, (_DWORD *)a2)[1];
  v7 = *(_QWORD *)(a2 + 4);
  *(_QWORD *)&v8 = v7;
  *((_QWORD *)&v8 + 1) = HIDWORD(v7);
  v16 = v8;
  v17 = *(unsigned int *)(a2 + 12);
  v18 = sub_22E742CE8(v6, (_DWORD *)a3)[1];
  v9 = *(_QWORD *)(a3 + 4);
  *(_QWORD *)&v8 = v9;
  *((_QWORD *)&v8 + 1) = HIDWORD(v9);
  v19 = v8;
  v20 = *(unsigned int *)(a3 + 12);
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
  v11 = (llvm::raw_ostream *)(v10 + 1056);
  v14 = 3;
  v12 = sub_22E742CE8(v10 + 1200, &v14);
  sub_22E74241C(v11, v12[1], (uint64_t)v15, 9, 0, 0, 0);
  std::system_category();
  return 0;
}

uint64_t sub_22E744248(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  _DWORD *v8;
  int v9;
  _DWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  _DWORD *v14;
  _DWORD *v15;
  char *v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  llvm::raw_ostream *v20;
  _DWORD *v21;
  unsigned int v23;
  int v24;
  _QWORD v25[4];

  v25[3] = *MEMORY[0x24BDAC8D0];
  v23 = a2;
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_DWORD *)(v3 + 2048);
  if (v4)
  {
    v5 = *(_QWORD *)(v3 + 2032);
    v6 = v4 - 1;
    v7 = v6 & (37 * a2);
    v8 = (_DWORD *)(v5 + 4 * v7);
    v9 = *v8;
    if (*v8 == (_DWORD)a2)
      return a2;
    v10 = 0;
    v11 = 1;
    while (v9 != -1)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v9 == -2;
      if (v12)
        v10 = v8;
      v13 = v7 + v11++;
      v7 = v13 & v6;
      v8 = (_DWORD *)(v5 + 4 * v7);
      v9 = *v8;
      if (*v8 == (_DWORD)a2)
        return a2;
    }
    if (v10)
      v14 = v10;
    else
      v14 = v8;
  }
  else
  {
    v14 = 0;
  }
  v15 = sub_22E7443B4(v3 + 2032, (uint64_t)&v23, &v23, v14);
  *v15 = v23;
  if (v23 <= 0x27)
  {
    v18 = (char **)(&off_24FAE0D20 + 2 * v23);
    v16 = *v18;
    v17 = *((unsigned __int8 *)v18 + 8);
  }
  else
  {
    v16 = 0;
    v17 = 0;
  }
  v25[0] = 5;
  v25[1] = v23;
  v25[2] = v17;
  v19 = *(_QWORD *)(a1 + 32);
  v20 = (llvm::raw_ostream *)(v19 + 1056);
  v24 = 5;
  v21 = sub_22E742CE8(v19 + 1200, &v24);
  sub_22E74241C(v20, v21[1], (uint64_t)v25, 3, v16, v17, 0);
  return v23;
}

_DWORD *sub_22E7443B4(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6;
  unsigned int v7;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  _DWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  BOOL v22;
  unsigned int v23;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
      goto LABEL_3;
    sub_22E74453C(a1, v7);
    v17 = *(_DWORD *)(a1 + 16);
    if (v17)
    {
      v18 = v17 - 1;
      v19 = (37 * *a3) & v18;
      a4 = (_DWORD *)(*(_QWORD *)a1 + 4 * v19);
      v20 = *a4;
      if (*a3 == *a4)
        goto LABEL_3;
      v13 = 0;
      v21 = 1;
      while (v20 != -1)
      {
        if (v13)
          v22 = 0;
        else
          v22 = v20 == -2;
        if (v22)
          v13 = a4;
        v23 = v19 + v21++;
        v19 = v23 & v18;
        a4 = (_DWORD *)(*(_QWORD *)a1 + 4 * v19);
        v20 = *a4;
        if (*a3 == *a4)
          goto LABEL_3;
      }
      goto LABEL_10;
    }
LABEL_31:
    a4 = 0;
    goto LABEL_3;
  }
  sub_22E74453C(a1, 2 * v7);
  v9 = *(_DWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_31;
  v10 = v9 - 1;
  v11 = (37 * *a3) & v10;
  a4 = (_DWORD *)(*(_QWORD *)a1 + 4 * v11);
  v12 = *a4;
  if (*a3 == *a4)
    goto LABEL_3;
  v13 = 0;
  v14 = 1;
  while (v12 != -1)
  {
    if (v13)
      v15 = 0;
    else
      v15 = v12 == -2;
    if (v15)
      v13 = a4;
    v16 = v11 + v14++;
    v11 = v16 & v10;
    a4 = (_DWORD *)(*(_QWORD *)a1 + 4 * v11);
    v12 = *a4;
    if (*a3 == *a4)
      goto LABEL_3;
  }
LABEL_10:
  if (v13)
    a4 = v13;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

void *sub_22E74453C(uint64_t a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  void *result;
  uint64_t v10;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(int **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (void *)MEMORY[0x23489D23C](4 * v8, 4);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22E744600((_QWORD *)a1, v4, &v4[v3]);
    return (void *)llvm::deallocate_buffer((llvm *)v4, (void *)(4 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
      return memset(result, 255, 4 * v10);
  }
  return result;
}

_QWORD *sub_22E744600(_QWORD *result, int *a2, int *a3)
{
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  char *v11;
  int v12;
  char *v13;
  int v14;
  BOOL v15;
  unsigned int v16;

  v5 = result;
  result[1] = 0;
  v6 = (char *)*result;
  v7 = *((unsigned int *)result + 4);
  if ((_DWORD)v7)
    result = memset((void *)*result, 255, 4 * v7);
  for (; a2 != a3; ++a2)
  {
    v8 = *a2;
    if (*a2 <= 0xFFFFFFFD)
    {
      v9 = *((_DWORD *)v5 + 4) - 1;
      v10 = v9 & (37 * v8);
      v11 = &v6[4 * v10];
      v12 = *(_DWORD *)v11;
      if (v8 != *(_DWORD *)v11)
      {
        v13 = 0;
        v14 = 1;
        while (v12 != -1)
        {
          if (v13)
            v15 = 0;
          else
            v15 = v12 == -2;
          if (v15)
            v13 = v11;
          v16 = v10 + v14++;
          v10 = v16 & v9;
          v11 = &v6[4 * (v16 & v9)];
          v12 = *(_DWORD *)v11;
          if (v8 == *(_DWORD *)v11)
            goto LABEL_10;
        }
        if (v13)
          v11 = v13;
      }
LABEL_10:
      *(_DWORD *)v11 = v8;
      ++*((_DWORD *)v5 + 2);
    }
  }
  return result;
}

uint64_t sub_22E7446E8(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  llvm::raw_ostream *v10;
  _DWORD *v11;
  char *v12;
  int v13;
  _QWORD v14[4];

  v14[3] = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return 0;
  v12 = a2;
  v7 = sub_22F2AEE84(*(_QWORD *)(a1 + 32) + 2080, (uint64_t *)&v12);
  result = *((unsigned int *)v7 + 2);
  if (!(_DWORD)result)
  {
    v8 = *(unsigned int *)(*(_QWORD *)(a1 + 32) + 2088);
    *((_DWORD *)v7 + 2) = v8;
    v7[2] = a2;
    v7[3] = a3;
    v14[0] = 4;
    v14[1] = v8;
    v14[2] = a3;
    v9 = *(_QWORD *)(a1 + 32);
    v10 = (llvm::raw_ostream *)(v9 + 1056);
    v13 = 4;
    v11 = sub_22E742CE8(v9 + 1200, &v13);
    sub_22E74241C(v10, v11[1], (uint64_t)v14, 3, a2, a3, 0);
    return *((unsigned int *)v7 + 2);
  }
  return result;
}

uint64_t sub_22E7447CC(uint64_t a1, char *a2)
{
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  size_t v8;
  _DWORD *v9;
  char *__s;
  int v11;
  _QWORD v12[6];

  v12[5] = *MEMORY[0x24BDAC8D0];
  __s = a2;
  if (!a2)
    return 0;
  v3 = sub_22E7448C8((_DWORD *)(*(_QWORD *)(a1 + 32) + 2056), &__s);
  result = *((unsigned int *)v3 + 2);
  if (!(_DWORD)result)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(unsigned int *)(v5 + 2064);
    *((_DWORD *)v3 + 2) = v6;
    v7 = __s;
    if (__s)
      v8 = strlen(__s);
    else
      v8 = 0;
    v12[0] = 6;
    v12[1] = v6;
    v12[2] = 0;
    v12[3] = 0;
    v12[4] = v8;
    v11 = 6;
    v9 = sub_22E742CE8(v5 + 1200, &v11);
    sub_22E74241C((llvm::raw_ostream *)(v5 + 1056), v9[1], (uint64_t)v12, 5, v7, v8, 0);
    return *((unsigned int *)v3 + 2);
  }
  return result;
}

_QWORD *sub_22E7448C8(_DWORD *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22E3B9914((uint64_t)a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22E744928(a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    *((_DWORD *)v5 + 2) = 0;
  }
  return v5;
}

_QWORD *sub_22E744928(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = a1[2];
  v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[3] > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E7449D8((uint64_t)a1, v7);
  v9 = 0;
  sub_22E3B9914((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++a1[2];
  if (*a4 != -4096)
    --a1[3];
  return a4;
}

_QWORD *sub_22E7449D8(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F271848(a1, (uint64_t)v4, (uint64_t)v4 + 16 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

llvm::raw_ostream *sub_22E744A98(unint64_t a1, int a2, uint64_t a3, __int128 *a4, int a5, char *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  unsigned __int16 *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  _DWORD *v30;
  unsigned __int16 *v32;
  uint64_t v33;
  __int128 v35;
  uint64_t v36;
  int v37;

  v15 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(v15 + 1232) = 0;
  if (*(_DWORD *)(v15 + 1236))
  {
    v16 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v16 = *(unsigned int *)(v15 + 1232);
  }
  *(_QWORD *)(*(_QWORD *)(v15 + 1224) + 8 * v16) = 2;
  v17 = *(_DWORD *)(v15 + 1232) + 1;
  *(_DWORD *)(v15 + 1232) = v17;
  v18 = qword_22F45E190[a5];
  if (v17 >= *(_DWORD *)(v15 + 1236))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v17 = *(_DWORD *)(v15 + 1232);
  }
  *(_QWORD *)(*(_QWORD *)(v15 + 1224) + 8 * v17) = v18;
  ++*(_DWORD *)(v15 + 1232);
  v35 = *a4;
  v36 = *((_QWORD *)a4 + 2);
  sub_22E744DB8(a1, a2, a3, (uint64_t)&v35, v15 + 1224, 0);
  if ((a8 & 4) != 0 || (v19 = a8 & 0xFFFFFFFFFFFFFFF8) == 0)
  {
    v22 = sub_22E744248(a1, 0);
    v23 = *(_DWORD *)(v15 + 1232);
    if (v23 >= *(_DWORD *)(v15 + 1236))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v23 = *(_DWORD *)(v15 + 1232);
    }
    *(_QWORD *)(*(_QWORD *)(v15 + 1224) + 8 * v23) = v22;
    v24 = *(_DWORD *)(v15 + 1232) + 1;
    *(_DWORD *)(v15 + 1232) = v24;
    if (a5 == 1)
      goto LABEL_17;
    v25 = 0;
  }
  else
  {
    v20 = sub_22F1CEE18(*(_DWORD *)(*(_QWORD *)v19 + 316));
    if (v20)
      v21 = (*(_DWORD *)(v20 + 1) >> 8) & 0x3F;
    else
      v21 = 0;
    v26 = sub_22E744248(a1, v21);
    v27 = *(_DWORD *)(v15 + 1232);
    if (v27 >= *(_DWORD *)(v15 + 1236))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v27 = *(_DWORD *)(v15 + 1232);
    }
    *(_QWORD *)(*(_QWORD *)(v15 + 1224) + 8 * v27) = v26;
    v24 = *(_DWORD *)(v15 + 1232) + 1;
    *(_DWORD *)(v15 + 1232) = v24;
    if (a5 == 1)
    {
LABEL_17:
      v28 = 0;
      goto LABEL_18;
    }
    v25 = *(_DWORD *)(*(_QWORD *)v19 + 316);
  }
  v32 = sub_22F41A9FC(v25);
  v28 = sub_22E7446E8(a1, (char *)v32, v33);
  v24 = *(_DWORD *)(v15 + 1232);
LABEL_18:
  if (v24 >= *(_DWORD *)(v15 + 1236))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v24 = *(_DWORD *)(v15 + 1232);
  }
  *(_QWORD *)(*(_QWORD *)(v15 + 1224) + 8 * v24) = v28;
  v29 = *(_DWORD *)(v15 + 1232) + 1;
  *(_DWORD *)(v15 + 1232) = v29;
  if (v29 >= *(_DWORD *)(v15 + 1236))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v29 = *(_DWORD *)(v15 + 1232);
  }
  *(_QWORD *)(*(_QWORD *)(v15 + 1224) + 8 * v29) = a7;
  ++*(_DWORD *)(v15 + 1232);
  v37 = 2;
  v30 = sub_22E742CE8(v15 + 1200, &v37);
  return sub_22E74241C((llvm::raw_ostream *)(v15 + 1056), v30[1], *(_QWORD *)(v15 + 1224), *(unsigned int *)(v15 + 1232), a6, a7, 0);
}

_QWORD *sub_22E744D84(_QWORD *a1)
{
  *a1 = off_24FA707B0;
  sub_22E3B3C18(a1 + 2);
  return a1;
}

unint64_t sub_22E744DB8(unint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;

  if (*(_QWORD *)a4)
  {
    v11 = sub_22E7447CC(result, *(char **)a4);
    v12 = *(_DWORD *)(a5 + 8);
    if (v12 >= *(_DWORD *)(a5 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v12 = *(_DWORD *)(a5 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a5 + 8 * v12) = v11;
    v13 = *(_DWORD *)(a5 + 12);
    v14 = *(_DWORD *)(a5 + 8) + 1;
    *(_DWORD *)(a5 + 8) = v14;
    v15 = *(unsigned int *)(a4 + 12);
    if (v14 >= v13)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v14 = *(_DWORD *)(a5 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a5 + 8 * v14) = v15;
    v16 = *(_DWORD *)(a5 + 12);
    v17 = *(_DWORD *)(a5 + 8) + 1;
    *(_DWORD *)(a5 + 8) = v17;
    v18 = (*(_DWORD *)(a4 + 16) + a6);
    if (v17 >= v16)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v17 = *(_DWORD *)(a5 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a5 + 8 * v17) = v18;
    ++*(_DWORD *)(a5 + 8);
    result = sub_22E677168(a3, a2);
    v19 = HIDWORD(result);
    v20 = *(_DWORD *)(a5 + 8);
    v21 = *(_DWORD *)(a5 + 12);
    v22 = HIDWORD(result);
  }
  else
  {
    v23 = *(_DWORD *)(a5 + 8);
    if (v23 >= *(_DWORD *)(a5 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v23 = *(_DWORD *)(a5 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a5 + 8 * v23) = 0;
    v24 = *(_DWORD *)(a5 + 12);
    v25 = *(_DWORD *)(a5 + 8) + 1;
    *(_DWORD *)(a5 + 8) = v25;
    if (v25 >= v24)
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v25 = *(_DWORD *)(a5 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a5 + 8 * v25) = 0;
    v26 = *(_DWORD *)(a5 + 12);
    v27 = *(_DWORD *)(a5 + 8) + 1;
    *(_DWORD *)(a5 + 8) = v27;
    if (v27 >= v26)
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v27 = *(_DWORD *)(a5 + 8);
    }
    v19 = 0;
    v22 = 0;
    *(_QWORD *)(*(_QWORD *)a5 + 8 * v27) = 0;
    v21 = *(_DWORD *)(a5 + 12);
    v20 = *(_DWORD *)(a5 + 8) + 1;
    *(_DWORD *)(a5 + 8) = v20;
  }
  if (v20 >= v21)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v20 = *(_DWORD *)(a5 + 8);
    v22 = v19;
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v20) = v22;
  ++*(_DWORD *)(a5 + 8);
  return result;
}

void sub_22E744FCC(_QWORD *a1)
{
  *a1 = off_24FA707B0;
  sub_22E3B3C18(a1 + 2);
  JUMPOUT(0x2348A0E9CLL);
}

llvm::raw_ostream *sub_22E745010(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, char *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v11;
  __int128 v13;
  uint64_t v14;

  v11 = *(_QWORD *)(a1 + 40);
  v13 = *(_OWORD *)a4;
  v14 = *(_QWORD *)(a4 + 16);
  return sub_22E744A98(v11, a2, a3, &v13, a5, a6, a7, a11);
}

llvm::raw_ostream *sub_22E74504C(llvm::raw_ostream *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  unint64_t v7;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  llvm::raw_ostream *v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  char v27;
  int v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  int v33;
  int v34;

  v10 = *((_QWORD *)result + 5);
  v11 = *(_QWORD *)(v10 + 32);
  v12 = *((unsigned int *)a5 + 2);
  if ((_DWORD)v12)
  {
    v13 = *a5;
    v14 = 12 * v12;
    do
    {
      if (*(_DWORD *)v13 && *(_DWORD *)(v13 + 4))
      {
        v15 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 8);
        v7 = *(_QWORD *)(v10 + 32);
        *(_DWORD *)(v7 + 1232) = 0;
        if (*(_DWORD *)(v7 + 1236))
        {
          v17 = 0;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v17 = *(unsigned int *)(v7 + 1232);
        }
        *(_QWORD *)(*(_QWORD *)(v7 + 1224) + 8 * v17) = 3;
        ++*(_DWORD *)(v7 + 1232);
        sub_22E7453EC(v10, v15, v16, *(_QWORD *)(v10 + 32) + 1224, a3);
        v18 = *(_QWORD *)(v10 + 32);
        v19 = (llvm::raw_ostream *)(v18 + 1056);
        v33 = 3;
        v20 = sub_22E742CE8(v18 + 1200, &v33);
        result = sub_22E74241C(v19, v20[1], *(_QWORD *)(*(_QWORD *)(v10 + 32) + 1224), *(unsigned int *)(*(_QWORD *)(v10 + 32) + 1232), 0, 0, 0);
      }
      v13 += 12;
      v14 -= 12;
    }
    while (v14);
  }
  if (a7)
  {
    v21 = 0;
    do
    {
      if (*(_DWORD *)(a6 + v21) && *(_DWORD *)(a6 + v21 + 4))
      {
        *(_DWORD *)(v11 + 1232) = 0;
        if (*(_DWORD *)(v11 + 1236))
        {
          v22 = 0;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v22 = *(unsigned int *)(v11 + 1232);
        }
        *(_QWORD *)(*(_QWORD *)(v11 + 1224) + 8 * v22) = 7;
        ++*(_DWORD *)(v11 + 1232);
        v23 = a6 + v21;
        v7 = v7 & 0xFFFFFFFF00000000 | *(unsigned int *)(a6 + v21 + 8);
        sub_22E7453EC(v10, *(_QWORD *)(a6 + v21), v7, v11 + 1224, a3);
        if (*(char *)(a6 + v21 + 47) < 0)
          v24 = *(_QWORD *)(v23 + 32);
        else
          v24 = *(unsigned __int8 *)(a6 + v21 + 47);
        v25 = *(unsigned int *)(v11 + 1232);
        if (v25 >= *(unsigned int *)(v11 + 1236))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v25 = *(unsigned int *)(v11 + 1232);
        }
        *(_QWORD *)(*(_QWORD *)(v11 + 1224) + 8 * v25) = v24;
        ++*(_DWORD *)(v11 + 1232);
        v34 = 7;
        v26 = sub_22E742CE8(v11 + 1200, &v34)[1];
        v27 = *(_BYTE *)(v23 + 47);
        v28 = v27;
        if (v27 >= 0)
          v29 = (char *)(v23 + 24);
        else
          v29 = *(char **)(v23 + 24);
        v30 = v27 & 0x7F;
        if (v28 >= 0)
          v31 = v30;
        else
          v31 = *(_QWORD *)(a6 + v21 + 32);
        result = sub_22E74241C((llvm::raw_ostream *)(v11 + 1056), v26, *(_QWORD *)(v11 + 1224), *(unsigned int *)(v11 + 1232), v29, v31, 0);
      }
      v21 += 56;
    }
    while (56 * a7 != v21);
  }
  return result;
}

uint64_t *sub_22E7452E4(uint64_t *result, uint64_t a2, int a3)
{
  if (a3 == 1)
    return sub_22E74181C(*(_QWORD *)(result[5] + 32) + 1056, 9u, 4u);
  return result;
}

void sub_22E745308(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 == 1)
    sub_22E7416F4(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32) + 1056);
}

void sub_22E745324(uint64_t a1, int a2, uint64_t a3, char *a4, uint64_t a5)
{
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  sub_22E74181C(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32) + 1056, 9u, 4u);
  if (a3 && a2)
  {
    sub_22F1E2F68(a3, a2, 1, (uint64_t)&v13);
  }
  else
  {
    v13 = 0uLL;
    v14 = 0;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = v13;
  v12 = v14;
  sub_22E744A98(v10, a2, a3, &v11, 1, a4, a5, 0);
  sub_22E7416F4(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32) + 1056);
}

unint64_t sub_22E7453EC(unint64_t a1, unint64_t a2, char a3, uint64_t a4, _QWORD *a5)
{
  unint64_t v9;
  int v10;
  _BYTE v12[4];
  int v13;

  v9 = HIDWORD(a2);
  sub_22E745484(a1, a2, (uint64_t)a5, a4, 0);
  if (a3)
  {
    if (sub_22F1415D0(v9, (uint64_t)v12, a5, *(_DWORD **)(a1 + 16), 0))
      v10 = 0;
    else
      v10 = v13;
  }
  else
  {
    v10 = 0;
  }
  return sub_22E745484(a1, v9, (uint64_t)a5, a4, v10);
}

unint64_t sub_22E745484(unint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD v11[3];

  if (a3 && a2)
    sub_22F1E2F68(a3, a2, 1, (uint64_t)v11);
  else
    memset(v11, 0, sizeof(v11));
  return sub_22E744DB8(a1, a2, a3, (uint64_t)v11, a4, a5);
}

unint64_t sub_22E74550C(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v12;
  unsigned int v13;
  llvm::MemoryBuffer *v15;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  unsigned int v24;
  unint64_t v25;
  char v26;
  char *v27;
  char *v29;
  unint64_t v30;
  char v31;
  int v32;
  char v34;
  char *v35;
  unint64_t v36;
  char *v38;
  char *v39;
  char *v40;
  char *v46;
  const char *v48;
  _BYTE v49[24];
  char v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  void *v54[2];
  void *v55[2];
  __int128 v56;
  void *v57[2];
  uint64_t v58;
  char *v59;
  char *v60;
  int v61;
  char *v62;
  char v63;
  char v64;
  char v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *__p[3];
  char *v72[2];
  uint64_t v73;
  _BYTE *v74;
  llvm::MemoryBuffer *v75;
  char v76;
  _BYTE v77[832];
  char *v78;
  char v79;
  char **v80;
  uint64_t v81;
  _QWORD v82[3];
  std::error_code v83;

  v82[1] = *MEMORY[0x24BDAC8D0];
  v58 = 0;
  v56 = 0u;
  *(_OWORD *)v57 = 0u;
  *(_OWORD *)v54 = 0u;
  *(_OWORD *)v55 = 0u;
  v53 = 0;
  sub_22F41ABB4((uint64_t)v77, (__int128 *)v54, &v53);
  v7 = v53;
  if (v53)
  {
    v8 = (unsigned int *)(v53 + 8);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  sub_22F1D1B6C((uint64_t)v77, a2, a3);
  if ((v76 & 1) != 0)
  {
    if (!atomic_load((unint64_t *)&qword_255E04E68))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_255E04E68, (void *(*)(void))sub_22E746FF0, (void (*)(void *))sub_22E747024);
    v12 = 0;
    v13 = 1;
    goto LABEL_18;
  }
  llvm::MemoryBufferRef::MemoryBufferRef((llvm::MemoryBufferRef *)&v51, v75);
  v66 = v51;
  v67 = v52;
  v68 = 0;
  v69 = 0;
  v70 = 0x200000000;
  memset(__p, 0, sizeof(__p));
  v72[0] = (char *)&v73;
  v72[1] = (char *)0x800000000;
  v74 = 0;
  v49[0] = 0;
  v50 = 0;
  if (!v52)
  {
LABEL_8:
    if (!atomic_load((unint64_t *)&qword_255E04E68))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_255E04E68, (void *(*)(void))sub_22E746FF0, (void (*)(void *))sub_22E747024);
    v12 = 0;
    v13 = 2;
    goto LABEL_11;
  }
  v17 = 0;
  LODWORD(v60) = 1195460932;
  do
  {
    v18 = (char *)*((unsigned __int8 *)&v60 + v17);
    sub_22E745EC8((uint64_t)&v66, 8u, (uint64_t)&v62);
    if ((v63 & 1) != 0)
    {
      v19 = v62;
      v62 = 0;
      v78 = v19;
      sub_22E6C5940(&v78, (char **)&v80);
      if (v78)
        (*(void (**)(char *))(*(_QWORD *)v78 + 8))(v78);
      if ((v63 & 1) != 0)
      {
        v20 = v62;
        v62 = 0;
        if (v20)
          (*(void (**)(char *))(*(_QWORD *)v20 + 8))(v20);
      }
      goto LABEL_8;
    }
    if (v62 != v18)
      goto LABEL_8;
    ++v17;
  }
  while (v17 != 4);
  if (!(_DWORD)v70 && v67 <= v68)
    goto LABEL_34;
  v13 = 3;
  while (2)
  {
    sub_22E745EC8((uint64_t)&v66, HIDWORD(v70), (uint64_t)&v62);
    if ((v63 & 1) != 0)
      goto LABEL_134;
    if ((_DWORD)v62 != 1)
      goto LABEL_137;
    std::system_category();
    sub_22E745EC8((uint64_t)&v66, 8u, (uint64_t)&v62);
    if ((v63 & 1) != 0)
    {
LABEL_134:
      v46 = v62;
      goto LABEL_135;
    }
    if ((v62 & 0x80) == 0)
    {
      v21 = v62;
      v22 = v3 & 0xFFFFFFFF00000000;
      goto LABEL_47;
    }
    v24 = 0;
    LODWORD(v22) = v62 & 0x7F;
    while (2)
    {
      if (v24 >= 0x19)
      {
        *(_QWORD *)&v83.__val_ = std::generic_category();
        v83.__cat_ = (const std::error_category *)"Unterminated VBR";
        llvm::createStringError((llvm *)0x5C, v83, v48);
        v46 = (char *)v80;
LABEL_135:
        v80 = (char **)v46;
        sub_22E6C5940((char **)&v80, &v62);
        if (v80)
          (*((void (**)(char **))*v80 + 1))(v80);
LABEL_137:
        if (!atomic_load((unint64_t *)&qword_255E04E68))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_255E04E68, (void *(*)(void))sub_22E746FF0, (void (*)(void *))sub_22E747024);
        v12 = 0;
        v13 = 3;
        goto LABEL_11;
      }
      sub_22E745EC8((uint64_t)&v66, 8u, (uint64_t)&v62);
      if ((v63 & 1) != 0)
        goto LABEL_134;
      v22 = ((v62 & 0x7F) << (v24 + 7)) | v22;
      v24 += 7;
      if ((v62 & 0x80) != 0)
        continue;
      break;
    }
    v21 = v3 & 0xFFFFFFFF00000000;
LABEL_47:
    v3 = v21 | v22;
    if ((v21 | v22) == 9)
    {
      v25 = sub_22E746180(a1, (llvm::BitstreamCursor *)&v66);
      if ((_DWORD)v25)
      {
        v12 = v25 & 0xFFFFFFFF00000000;
        v13 = v25;
        goto LABEL_11;
      }
      goto LABEL_51;
    }
    if ((_DWORD)v3 != 8)
    {
      if ((_DWORD)v3)
      {
        sub_22E746760((uint64_t)&v66, (uint64_t *)&v78);
        v23 = v78;
        if (v78)
        {
          v78 = 0;
          v80 = (char **)v23;
          sub_22E6C5940((char **)&v80, &v62);
          if (v80)
            (*((void (**)(char **))*v80 + 1))(v80);
          if (!atomic_load((unint64_t *)&qword_255E04E68))
            llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_255E04E68, (void *(*)(void))sub_22E746FF0, (void (*)(void *))sub_22E747024);
          if (v78)
            (*(void (**)(char *))(*(_QWORD *)v78 + 8))(v78);
          v12 = 0;
          v13 = 4;
          goto LABEL_11;
        }
        goto LABEL_51;
      }
      llvm::BitstreamCursor::ReadBlockInfoBlock((llvm::BitstreamCursor *)&v66);
      v26 = v65;
      if ((v65 & 1) != 0)
      {
        v27 = v62;
        v62 = 0;
        v78 = v27;
        sub_22E6C5940(&v78, (char **)&v80);
        if (v78)
          (*(void (**)(char *))(*(_QWORD *)v78 + 8))(v78);
        if (!atomic_load((unint64_t *)&qword_255E04E68))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_255E04E68, (void *(*)(void))sub_22E746FF0, (void (*)(void *))sub_22E747024);
      }
      else
      {
        sub_22F2AEF5C((uint64_t)v49, (uint64_t)&v62);
      }
      if ((v65 & 1) != 0)
      {
        v39 = v62;
        v62 = 0;
        if (v39)
          (*(void (**)(char *))(*(_QWORD *)v39 + 8))(v39);
      }
      else if (v64)
      {
        v80 = &v62;
        sub_22E746ED0((void ***)&v80);
      }
      if ((v26 & 1) != 0)
      {
LABEL_35:
        v12 = 0;
        goto LABEL_11;
      }
      if (!v50)
      {
        if (!atomic_load((unint64_t *)&qword_255E04E68))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_255E04E68, (void *(*)(void))sub_22E746FF0, (void (*)(void *))sub_22E747024);
        v12 = 0;
        v13 = 6;
        goto LABEL_11;
      }
      v74 = v49;
LABEL_51:
      if (!(_DWORD)v70 && v67 <= v68)
      {
LABEL_34:
        std::system_category();
        v13 = 0;
        goto LABEL_35;
      }
      continue;
    }
    break;
  }
  llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)&v66, 8, 0);
  v29 = v78;
  if (v78)
  {
    v78 = 0;
    v80 = (char **)v29;
    sub_22E6C5940((char **)&v80, &v62);
    if (v80)
      (*((void (**)(char **))*v80 + 1))(v80);
    if (!atomic_load((unint64_t *)&qword_255E04E68))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_255E04E68, (void *(*)(void))sub_22E746FF0, (void (*)(void *))sub_22E747024);
    if (v78)
      (*(void (**)(char *))(*(_QWORD *)v78 + 8))(v78);
    v12 = 0;
    v13 = 7;
    goto LABEL_11;
  }
  v30 = 0;
  v31 = 0;
  v32 = 7;
  while (2)
  {
    v61 = 0;
    sub_22E7469E4((uint64_t)&v62, (uint64_t)&v66, &v61);
    if ((_DWORD)v62 != 2)
    {
      if ((_DWORD)v62 == 3)
      {
        sub_22E746760((uint64_t)&v66, (uint64_t *)&v60);
        v40 = v60;
        if (v60)
        {
          v60 = 0;
          v78 = v40;
          sub_22E6C5940(&v78, (char **)&v80);
          if (v78)
            (*(void (**)(char *))(*(_QWORD *)v78 + 8))(v78);
          if (!atomic_load((unint64_t *)&qword_255E04E68))
            llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_255E04E68, (void *(*)(void))sub_22E746FF0, (void (*)(void *))sub_22E747024);
          if (v60)
            (*(void (**)(char *))(*(_QWORD *)v60 + 8))(v60);
          v30 = 0;
          v32 = 7;
          goto LABEL_133;
        }
        break;
      }
      v80 = (char **)v82;
      v81 = 0x100000000;
      llvm::BitstreamCursor::readRecord();
      if ((v79 & 1) != 0)
      {
        v35 = v78;
        v78 = 0;
        v59 = v35;
        v36 = llvm::errorToErrorCode();
        v32 = v36;
        v30 = HIDWORD(v36);
        if (v59)
          (*(void (**)(char *))(*(_QWORD *)v59 + 8))(v59);
        v34 = 0;
      }
      else
      {
        if ((_DWORD)v78 != 1)
          goto LABEL_87;
        if ((_DWORD)v81)
        {
          if ((unint64_t)*v80 >= 3)
          {
            if (!atomic_load((unint64_t *)&qword_255E04E68))
              llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_255E04E68, (void *(*)(void))sub_22E746FF0, (void (*)(void *))sub_22E747024);
            v30 = 0;
            v34 = 0;
            v32 = 11;
            goto LABEL_88;
          }
          v31 = 1;
LABEL_87:
          v34 = 1;
          goto LABEL_88;
        }
        if (!atomic_load((unint64_t *)&qword_255E04E68))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_255E04E68, (void *(*)(void))sub_22E746FF0, (void (*)(void *))sub_22E747024);
        v30 = 0;
        v34 = 0;
        v32 = 10;
      }
LABEL_88:
      if ((v79 & 1) != 0)
      {
        v38 = v78;
        v78 = 0;
        if (v38)
          (*(void (**)(char *))(*(_QWORD *)v38 + 8))(v38);
      }
      if (v80 != v82)
        free(v80);
      if ((v34 & 1) == 0)
        goto LABEL_110;
      continue;
    }
    break;
  }
  if ((v31 & 1) == 0)
  {
    if (!atomic_load((unint64_t *)&qword_255E04E68))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_255E04E68, (void *(*)(void))sub_22E746FF0, (void (*)(void *))sub_22E747024);
    v30 = 0;
    v32 = 10;
    goto LABEL_133;
  }
  std::system_category();
  v32 = 0;
LABEL_110:
  if (!v32)
    goto LABEL_51;
LABEL_133:
  v12 = v30 << 32;
  v13 = v32;
LABEL_11:
  if (v50)
  {
    v62 = v49;
    sub_22E746ED0((void ***)&v62);
  }
  sub_22E746F74(v72);
  if (__p[0])
  {
    sub_22E3B485C((uint64_t *)__p);
    operator delete(__p[0]);
  }
LABEL_18:
  if ((v76 & 1) == 0)
  {
    v15 = v75;
    v75 = 0;
    if (v15)
      (*(void (**)(llvm::MemoryBuffer *))(*(_QWORD *)v15 + 8))(v15);
  }
  sub_22F41AD5C((uint64_t)v77);
  if (SHIBYTE(v58) < 0)
    operator delete(v57[0]);
  if (SHIBYTE(v56) < 0)
    operator delete(v55[1]);
  if (SHIBYTE(v55[0]) < 0)
    operator delete(v54[0]);
  return v12 & 0xFFFFFFFF00000000 | v13;
}

void sub_22E745EC8(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  int v27;
  void **p_p;
  void *__p;
  uint64_t v30;
  uint64_t v31;
  void **v32;
  const char *v33;
  unint64_t v34;
  uint64_t v35;
  __int16 v36;

  v5 = *(_DWORD *)(a1 + 32);
  if (a2 <= v5)
  {
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v7 >> a2;
    *(_DWORD *)(a1 + 32) = v5 - a2;
    *(_BYTE *)(a3 + 8) &= ~1u;
    *(_QWORD *)a3 = v7 & (0xFFFFFFFFFFFFFFFFLL >> -(char)a2);
    return;
  }
  if (v5)
    v6 = *(_QWORD *)(a1 + 24);
  else
    v6 = 0;
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v10 = v9 - v8;
  if (v9 <= v8)
  {
    v18 = *(_QWORD *)(a1 + 8);
    std::generic_category();
    __p = 0;
    v30 = 0;
    v31 = 0;
    v21 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    v20 = MEMORY[0x24BED83D8] + 16;
    p_p = &__p;
    llvm::raw_ostream::SetBufferAndMode();
    v19 = *(_QWORD *)(a1 + 16);
    v32 = (void **)&unk_24FA716E0;
    v33 = "Unexpected end of file reading %u of %u bytes";
    v34 = v19;
    v35 = v18;
  }
  else
  {
    v11 = a2 - v5;
    v12 = (unint64_t *)(*(_QWORD *)a1 + v8);
    if (v9 < v8 + 8)
    {
      *(_QWORD *)(a1 + 24) = 0;
      if (v10)
      {
        v16 = 0;
        v13 = 0;
        do
        {
          v17 = *(unsigned __int8 *)v12;
          v12 = (unint64_t *)((char *)v12 + 1);
          v13 |= (unint64_t)v17 << (v16 & 0xF8);
          *(_QWORD *)(a1 + 24) = v13;
          v16 += 8;
        }
        while (8 * v10 != v16);
      }
      else
      {
        v13 = 0;
      }
    }
    else
    {
      v13 = *v12;
      *(_QWORD *)(a1 + 24) = *v12;
      v10 = 8;
    }
    *(_QWORD *)(a1 + 16) = v8 + v10;
    *(_DWORD *)(a1 + 32) = 8 * v10;
    if (8 * v10 >= v11)
    {
      *(_QWORD *)(a1 + 24) = v13 >> (a2 - v5);
      *(_DWORD *)(a1 + 32) = 8 * v10 - v11;
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_QWORD *)a3 = ((v13 & (0xFFFFFFFFFFFFFFFFLL >> (v5 - a2))) << v5) | v6;
      return;
    }
    std::generic_category();
    __p = 0;
    v30 = 0;
    v31 = 0;
    v21 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    v20 = MEMORY[0x24BED83D8] + 16;
    p_p = &__p;
    llvm::raw_ostream::SetBufferAndMode();
    v14 = *(unsigned int *)(a1 + 32) | (unint64_t)(v11 << 32);
    v32 = (void **)&unk_24FA71700;
    v33 = "Unexpected end of file reading %u of %u bits";
    v34 = v14;
  }
  llvm::raw_ostream::operator<<();
  v15 = operator new();
  v36 = 260;
  v32 = p_p;
  llvm::StringError::StringError();
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v20);
  if (SHIBYTE(v31) < 0)
    operator delete(__p);
  *(_BYTE *)(a3 + 8) |= 1u;
  *(_QWORD *)a3 = v15;
}

unint64_t sub_22E746180(uint64_t a1, llvm::BitstreamCursor *a2)
{
  char *v4;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  void *(*v9)(void);
  unint64_t v10;
  char *v11;
  void *(*v12)(void);
  int v13;
  char *v14;
  unint64_t v15;
  char *v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  int32x4_t v20;
  int32x4_t v21;
  uint64_t v22;
  int32x4_t v23;
  unint64_t v25;
  int32x4_t v28;
  int32x4_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  int v33;
  char *v34;
  char v35;
  char *v36[3];
  void *v37;
  uint64_t v38;
  _QWORD v39[18];

  v39[16] = *MEMORY[0x24BDAC8D0];
  llvm::BitstreamCursor::EnterSubBlock(a2, 9, 0);
  v4 = v31;
  if (v31)
  {
    v31 = 0;
    v36[0] = v4;
    sub_22E6C5940(v36, (char **)&v37);
    if (v36[0])
      (*(void (**)(char *))(*(_QWORD *)v36[0] + 8))(v36[0]);
    if (!atomic_load((unint64_t *)&qword_255E04E68))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_255E04E68, (void *(*)(void))sub_22E746FF0, (void (*)(void *))sub_22E747024);
    v6 = 0;
    v7 = 8;
  }
  else
  {
    std::system_category();
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    if ((_DWORD)v8)
    {
      v6 = HIDWORD(v8);
      v7 = v8;
    }
    else
    {
      v6 = 0;
      v37 = v39;
      v38 = 0x1000000000;
      v7 = 8;
      v9 = (void *(*)(void))sub_22E746FF0;
      do
      {
        while (1)
        {
          while (1)
          {
            v33 = 0;
            sub_22E7469E4((uint64_t)v36, (uint64_t)a2, &v33);
            if (LODWORD(v36[0]) == 3)
              break;
            if (LODWORD(v36[0]) == 2)
            {
              v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
              if ((_DWORD)v25)
              {
                v6 = HIDWORD(v25);
                v7 = v25;
              }
              else
              {
                std::system_category();
                v7 = 0;
              }
              goto LABEL_69;
            }
            LODWORD(v38) = 0;
            v31 = 0;
            v32 = 0;
            llvm::BitstreamCursor::readRecord();
            if ((v35 & 1) != 0)
            {
              v12 = v9;
              v14 = v34;
              v34 = 0;
              v30 = v14;
              v15 = llvm::errorToErrorCode();
              v7 = v15;
              v6 = HIDWORD(v15);
              if (v30)
                (*(void (**)(char *))(*(_QWORD *)v30 + 8))(v30);
              v13 = 1;
            }
            else if (((_DWORD)v34 - 9) >= 0xFFFFFFF8)
            {
              switch((int)v34)
              {
                case 1:
                  if ((_DWORD)v38 != 1)
                    goto LABEL_56;
                  v12 = v9;
                  v18 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 88))(a1, *(unsigned int *)v37);
                  if (!(_DWORD)v18)
                    goto LABEL_20;
                  goto LABEL_55;
                case 2:
                  if ((_DWORD)v38 != 8)
                    goto LABEL_56;
                  v12 = v9;
                  v19 = *(unsigned int *)v37;
                  v29 = vuzp1q_s32(*(int32x4_t *)((char *)v37 + 8), *(int32x4_t *)((char *)v37 + 24));
                  v18 = (*(uint64_t (**)(uint64_t, uint64_t, int32x4_t *, _QWORD, _QWORD, char *, uint64_t))(*(_QWORD *)a1 + 48))(a1, v19, &v29, *((unsigned int *)v37 + 10), *((unsigned int *)v37 + 12), v31, v32);
                  if (!(_DWORD)v18)
                    goto LABEL_20;
                  goto LABEL_55;
                case 3:
                  if ((_DWORD)v38 != 8)
                    goto LABEL_56;
                  v12 = v9;
                  v20 = vuzp1q_s32(*(int32x4_t *)v37, *((int32x4_t *)v37 + 1));
                  v28 = vuzp1q_s32(*((int32x4_t *)v37 + 2), *((int32x4_t *)v37 + 3));
                  v29 = v20;
                  v18 = (*(uint64_t (**)(uint64_t, int32x4_t *, int32x4_t *))(*(_QWORD *)a1 + 80))(a1, &v29, &v28);
                  if (!(_DWORD)v18)
                    goto LABEL_20;
                  goto LABEL_55;
                case 4:
                  if ((_DWORD)v38 != 2)
                    goto LABEL_56;
                  v12 = v9;
                  v18 = (*(uint64_t (**)(uint64_t, _QWORD, char *, uint64_t))(*(_QWORD *)a1 + 40))(a1, *(unsigned int *)v37, v31, v32);
                  goto LABEL_44;
                case 5:
                  if ((_DWORD)v38 != 2)
                    goto LABEL_56;
                  v12 = v9;
                  v18 = (*(uint64_t (**)(uint64_t, _QWORD, char *, uint64_t))(*(_QWORD *)a1 + 32))(a1, *(unsigned int *)v37, v31, v32);
LABEL_44:
                  if (!(_DWORD)v18)
                    goto LABEL_20;
                  goto LABEL_55;
                case 6:
                  if ((_DWORD)v38 != 4)
                    goto LABEL_56;
                  v12 = v9;
                  v18 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, char *, uint64_t))(*(_QWORD *)a1 + 56))(a1, *(unsigned int *)v37, *((unsigned int *)v37 + 2), *((unsigned int *)v37 + 4), v31, v32);
                  if (!(_DWORD)v18)
                    goto LABEL_20;
                  goto LABEL_55;
                case 7:
                  if ((_DWORD)v38 != 9)
                    goto LABEL_56;
                  v12 = v9;
                  v21 = vuzp1q_s32(*(int32x4_t *)v37, *((int32x4_t *)v37 + 1));
                  v28 = vuzp1q_s32(*((int32x4_t *)v37 + 2), *((int32x4_t *)v37 + 3));
                  v29 = v21;
                  v18 = (*(uint64_t (**)(uint64_t, int32x4_t *, int32x4_t *, char *, uint64_t))(*(_QWORD *)a1 + 72))(a1, &v29, &v28, v31, v32);
                  if (!(_DWORD)v18)
                    goto LABEL_20;
                  goto LABEL_55;
                case 8:
                  if ((_DWORD)v38 == 10 && *((_QWORD *)v37 + 9) == v32)
                  {
                    v12 = v9;
                    v22 = *(unsigned int *)v37;
                    v23 = vuzp1q_s32(*(int32x4_t *)((char *)v37 + 8), *(int32x4_t *)((char *)v37 + 24));
                    v28 = vuzp1q_s32(*(int32x4_t *)((char *)v37 + 40), *(int32x4_t *)((char *)v37 + 56));
                    v29 = v23;
                    v18 = (*(uint64_t (**)(uint64_t, uint64_t, int32x4_t *, int32x4_t *, char *))(*(_QWORD *)a1 + 64))(a1, v22, &v29, &v28, v31);
                    if (!(_DWORD)v18)
                      goto LABEL_20;
LABEL_55:
                    v6 = HIDWORD(v18);
                    v13 = 1;
                    v7 = v18;
                  }
                  else
                  {
LABEL_56:
                    if (!atomic_load((unint64_t *)&qword_255E04E68))
                      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_255E04E68, v9, (void (*)(void *))sub_22E747024);
                    v12 = v9;
                    v6 = 0;
                    v13 = 1;
                    v7 = 9;
                  }
                  break;
                default:
                  v12 = v9;
                  v13 = 0;
                  break;
              }
            }
            else
            {
              v12 = v9;
LABEL_20:
              v13 = 2;
            }
            if ((v35 & 1) != 0)
            {
              v16 = v34;
              v34 = 0;
              if (v16)
                (*(void (**)(char *))(*(_QWORD *)v16 + 8))(v16);
            }
            v17 = v13 | 2;
            v9 = v12;
            if (v17 != 2)
              goto LABEL_69;
          }
          if (v33 != 9)
            break;
          v10 = sub_22E746180(a1, a2);
          if ((_DWORD)v10)
          {
            v6 = HIDWORD(v10);
            v7 = v10;
            goto LABEL_69;
          }
        }
        sub_22E746760((uint64_t)a2, v29.i64);
        v11 = (char *)v29.i64[0];
      }
      while (!v29.i64[0]);
      v29.i64[0] = 0;
      v34 = v11;
      sub_22E6C5940(&v34, &v31);
      if (v34)
        (*(void (**)(char *))(*(_QWORD *)v34 + 8))(v34);
      if (!atomic_load((unint64_t *)&qword_255E04E68))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_255E04E68, (void *(*)(void))sub_22E746FF0, (void (*)(void *))sub_22E747024);
      if (v29.i64[0])
        (*(void (**)(uint64_t))(*(_QWORD *)v29.i64[0] + 8))(v29.i64[0]);
      v6 = 0;
      v7 = 5;
LABEL_69:
      if (v37 != v39)
        free(v37);
    }
  }
  return v7 | (v6 << 32);
}

void sub_22E746760(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unsigned int v4;
  BOOL v5;
  char v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  uint64_t v12;
  unint64_t v13;
  void **v14;
  unsigned int v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  void *__p[2];
  uint64_t v20;
  void **v21;
  const char *v22;
  unint64_t v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  int v33;
  void **v34;
  uint64_t v35;
  std::error_code v36;
  std::error_code v37;

  v35 = *MEMORY[0x24BDAC8D0];
  sub_22E745EC8(a1, 4u, (uint64_t)&v26);
  if ((v27 & 1) != 0)
    goto LABEL_21;
  if ((v26 & 8) != 0)
  {
    v15 = -3;
    while (1)
    {
      v15 += 3;
      if (v15 >= 0x1D)
        break;
      sub_22E745EC8(a1, 4u, (uint64_t)&v26);
      if ((v27 & 1) != 0)
        goto LABEL_21;
      if ((v26 & 8) == 0)
        goto LABEL_3;
    }
    *(_QWORD *)&v37.__val_ = std::generic_category();
    v37.__cat_ = (const std::error_category *)"Unterminated VBR";
    llvm::createStringError((llvm *)0x5C, v37, v17);
    v16 = (uint64_t)v21;
    goto LABEL_22;
  }
LABEL_3:
  v4 = *(_DWORD *)(a1 + 32);
  v5 = v4 >= 0x20;
  v6 = v4 - 32;
  if (v5)
  {
    *(_QWORD *)(a1 + 24) >>= v6;
    v7 = 32;
  }
  else
  {
    v7 = 0;
  }
  *(_DWORD *)(a1 + 32) = v7;
  sub_22E745EC8(a1, 0x20u, (uint64_t)&v26);
  if ((v27 & 1) != 0)
  {
LABEL_21:
    v16 = v26;
LABEL_22:
    *a2 = v16;
    return;
  }
  v8 = *(unsigned int *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  if ((_DWORD)v8 || v9 > v10)
  {
    v12 = 8 * v10 - v8;
    v13 = v12 + 32 * v26;
    if (v9 >= v13 >> 3)
    {
      *(_QWORD *)(a1 + 16) = (v13 >> 3) & 0x1FFFFFFFFFFFFFF8;
      *(_DWORD *)(a1 + 32) = 0;
      if ((v13 & 0x3F) == 0
        || (sub_22E745EC8(a1, v13 & 0x3F, (uint64_t)&v26), (v27 & 1) == 0)
        || (v18 = v26, *a2 = v26, !v18))
      {
        *a2 = 0;
      }
    }
    else
    {
      std::generic_category();
      __p[0] = 0;
      __p[1] = 0;
      v20 = 0;
      v27 = 0;
      v31 = 0;
      v32 = 0;
      v33 = 1;
      v29 = 0;
      v30 = 0;
      v28 = 0;
      v26 = MEMORY[0x24BED83D8] + 16;
      v34 = __p;
      llvm::raw_ostream::SetBufferAndMode();
      v21 = (void **)&unk_24FA71720;
      v22 = "can't skip to bit %zu from %llu";
      v23 = v13;
      v24 = v12;
      llvm::raw_ostream::operator<<();
      v14 = v34;
      operator new();
      v25 = 260;
      v21 = v14;
      *a2 = llvm::StringError::StringError();
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v26);
      if (SHIBYTE(v20) < 0)
        operator delete(__p[0]);
    }
  }
  else
  {
    *(_QWORD *)&v36.__val_ = std::generic_category();
    v36.__cat_ = (const std::error_category *)"can't skip block: already at end of stream";
    llvm::createStringError((llvm *)0x5C, v36, v11);
  }
}

void sub_22E7469E4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  char v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  char v16;
  int v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  std::error_code v44;

  v43 = *MEMORY[0x24BDAC8D0];
  *a3 = 0;
  v6 = *(_BYTE *)(a1 + 16);
  while (2)
  {
    if (*(_DWORD *)(a2 + 32))
      v7 = 1;
    else
      v7 = *(_QWORD *)(a2 + 8) > *(_QWORD *)(a2 + 16);
    if (!v7)
    {
LABEL_25:
      *(_BYTE *)(a1 + 16) = v6 | 1;
      if (!atomic_load((unint64_t *)&qword_255E04E68))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_255E04E68, (void *(*)(void))sub_22E746FF0, (void (*)(void *))sub_22E747024);
      v19 = qword_255E04E68;
      v20 = 3;
LABEL_31:
      *(_QWORD *)a1 = v20;
      *(_QWORD *)(a1 + 8) = v19;
      return;
    }
    sub_22E745EC8(a2, *(_DWORD *)(a2 + 36), (uint64_t)&v41);
    if ((v42 & 1) != 0)
    {
      v39 = v41;
      v30 = llvm::errorToErrorCode();
      *(_BYTE *)(a1 + 16) = v6 | 1;
      *(_QWORD *)a1 = v30;
      *(_QWORD *)(a1 + 8) = v31;
      v32 = v39;
      if (!v39)
        return;
      goto LABEL_46;
    }
    if (v41 >= 4)
    {
      *a3 = v41;
      *(_BYTE *)(a1 + 16) = v6 & 0xFE;
      v11 = 1;
LABEL_38:
      *(_DWORD *)a1 = v11;
      return;
    }
    switch((int)v41)
    {
      case 0:
        v13 = *(unsigned int *)(a2 + 72);
        if (!(_DWORD)v13)
          goto LABEL_25;
        v14 = *(_DWORD *)(a2 + 32);
        v15 = v14 >= 0x20;
        v16 = v14 - 32;
        if (v15)
        {
          *(_QWORD *)(a2 + 24) >>= v16;
          v17 = 32;
        }
        else
        {
          v17 = 0;
        }
        v23 = (void **)(a2 + 40);
        v22 = *(_QWORD *)(a2 + 40);
        *(_DWORD *)(a2 + 32) = v17;
        v24 = *(_QWORD *)(a2 + 64) + 32 * v13;
        *(_DWORD *)(a2 + 36) = *(_DWORD *)(v24 - 32);
        if (v22)
        {
          sub_22E3B485C((uint64_t *)(a2 + 40));
          operator delete(*v23);
          *v23 = 0;
          *(_QWORD *)(a2 + 48) = 0;
          *(_QWORD *)(a2 + 56) = 0;
        }
        *(_OWORD *)(a2 + 40) = *(_OWORD *)(v24 - 24);
        *(_QWORD *)(a2 + 56) = *(_QWORD *)(v24 - 8);
        *(_QWORD *)(v24 - 24) = 0;
        *(_QWORD *)(v24 - 16) = 0;
        *(_QWORD *)(v24 - 8) = 0;
        v25 = (*(_DWORD *)(a2 + 72) - 1);
        *(_DWORD *)(a2 + 72) = v25;
        v26 = *(_QWORD *)(a2 + 64) + 32 * v25;
        v28 = *(_QWORD *)(v26 + 8);
        v27 = (uint64_t *)(v26 + 8);
        if (v28)
        {
          sub_22E3B485C(v27);
          operator delete((void *)*v27);
        }
        *(_BYTE *)(a1 + 16) = v6 & 0xFE;
        v11 = 2;
        goto LABEL_38;
      case 1:
        sub_22E745EC8(a2, 8u, (uint64_t)&v41);
        if ((v42 & 1) != 0)
          goto LABEL_47;
        v12 = v41;
        if ((v41 & 0x80) == 0)
          goto LABEL_21;
        v29 = 0;
        v12 = v41 & 0x7F;
        break;
      case 2:
        llvm::BitstreamCursor::ReadAbbrevRecord((llvm::BitstreamCursor *)a2);
        if (v41)
        {
          v37 = v41;
          v41 = 0;
          v8 = llvm::errorToErrorCode();
          v6 |= 1u;
          *(_BYTE *)(a1 + 16) = v6;
          *(_QWORD *)a1 = v8;
          *(_QWORD *)(a1 + 8) = v9;
          (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
          if (v41)
            (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
          v10 = 1;
        }
        else
        {
          v10 = 2;
        }
        goto LABEL_16;
      case 3:
        *(_BYTE *)(a1 + 16) = v6 | 1;
        if (!atomic_load((unint64_t *)&qword_255E04E68))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_255E04E68, (void *(*)(void))sub_22E746FF0, (void (*)(void *))sub_22E747024);
        v19 = qword_255E04E68;
        v20 = 12;
        goto LABEL_31;
      default:
        v10 = 0;
LABEL_16:
        if (v10 == 1)
          return;
        continue;
    }
    break;
  }
  while (v29 < 0x19)
  {
    sub_22E745EC8(a2, 8u, (uint64_t)&v41);
    if ((v42 & 1) != 0)
    {
LABEL_47:
      v33 = v41;
      goto LABEL_48;
    }
    v12 |= (v41 & 0x7F) << (v29 + 7);
    v29 += 7;
    if ((v41 & 0x80) == 0)
    {
LABEL_21:
      *a3 = v12;
      *(_BYTE *)(a1 + 16) = v6 & 0xFE;
      v11 = 3;
      goto LABEL_38;
    }
  }
  *(_QWORD *)&v44.__val_ = std::generic_category();
  v44.__cat_ = (const std::error_category *)"Unterminated VBR";
  llvm::createStringError((llvm *)0x5C, v44, v36);
  v33 = v40;
LABEL_48:
  v38 = v33;
  v34 = llvm::errorToErrorCode();
  *(_BYTE *)(a1 + 16) = v6 | 1;
  *(_QWORD *)a1 = v34;
  *(_QWORD *)(a1 + 8) = v35;
  v32 = v38;
  if (v38)
LABEL_46:
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
}

void sub_22E746D80(void **a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  void *v5;

  v1 = *a1;
  if (*a1)
  {
    v5 = *a1;
    v2 = (uint64_t)a1[1];
    v3 = v1;
    if ((void *)v2 != v1)
    {
      do
        v2 = sub_22E746DF4(v2 - 80);
      while ((void *)v2 != v5);
      v3 = *a1;
    }
    a1[1] = v5;
    operator delete(v3);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_22E746DF4(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 56);
  sub_22E746E58(&v3);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(_QWORD *)(a1 + 8))
  {
    sub_22E3B485C((uint64_t *)(a1 + 8));
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_22E746E58(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v4 -= 4;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_22E746ED0(void ***a1)
{
  void **v1;
  void *v2;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void **v8;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (uint64_t)v4 - 72;
      do
      {
        v8 = (void **)(v6 + 48);
        sub_22E746E58(&v8);
        if (*(char *)(v6 + 47) < 0)
          operator delete(*(void **)(v6 + 24));
        if (*(_QWORD *)v6)
        {
          sub_22E3B485C((uint64_t *)v6);
          operator delete(*(void **)v6);
        }
        v7 = (void *)(v6 - 8);
        v6 -= 80;
      }
      while (v7 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char **sub_22E746F74(char **a1)
{
  char *v2;
  uint64_t v3;
  char *v5;
  uint64_t v6;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v5 = v2 - 24;
    v6 = 32 * v3;
    do
    {
      if (*(_QWORD *)&v5[v6])
      {
        sub_22E3B485C((uint64_t *)&v5[v6]);
        operator delete(*(void **)&v5[v6]);
      }
      v6 -= 32;
    }
    while (v6);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

_QWORD *sub_22E746FF0()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_24FA71740;
  return result;
}

std::error_category *sub_22E747024(std::error_category *result)
{
  if (result)
  {
    std::error_category::~error_category(result);
    JUMPOUT(0x2348A0E9CLL);
  }
  return result;
}

void sub_22E747054(std::error_category *a1)
{
  std::error_category::~error_category(a1);
  JUMPOUT(0x2348A0E9CLL);
}

const char *sub_22E747078()
{
  return "clang.serialized_diags";
}

void sub_22E747084(uint64_t a1, int a2)
{
  __asm { BR              X10 }
}

char *sub_22E7470B0()
{
  uint64_t v0;
  char *result;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)v0 = result;
  *(_OWORD *)(v0 + 8) = xmmword_22F45AD60;
  strcpy(result, "Failed to open diagnostics file");
  return result;
}

void sub_22E747370(uint64_t a1, uint64_t a2, llvm::raw_ostream *a3)
{
  char *v5;
  unsigned int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  llvm::raw_ostream *v12;
  const char *v13;
  llvm::raw_ostream *v14;
  _WORD *v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  char *v18;
  std::__shared_weak_count *v19;
  _QWORD v20[4];
  uint64_t v21;
  void *v22;
  __int128 v23;
  _QWORD v24[9];

  v24[8] = *MEMORY[0x24BDAC8D0];
  v5 = (char *)operator new(0x228uLL);
  *(_QWORD *)v5 = &unk_24FA715D0;
  *((_QWORD *)v5 + 1) = 0;
  *(_OWORD *)(v5 + 88) = 0u;
  *(_OWORD *)(v5 + 104) = 0u;
  *(_OWORD *)(v5 + 120) = 0u;
  *(_OWORD *)(v5 + 136) = 0u;
  *(_OWORD *)(v5 + 152) = 0u;
  *(_OWORD *)(v5 + 168) = 0u;
  *(_OWORD *)(v5 + 184) = 0u;
  *(_OWORD *)(v5 + 200) = 0u;
  *(_OWORD *)(v5 + 216) = 0u;
  *(_OWORD *)(v5 + 232) = 0u;
  *(_OWORD *)(v5 + 248) = 0u;
  *(_OWORD *)(v5 + 264) = 0u;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_OWORD *)(v5 + 376) = 0u;
  *(_OWORD *)(v5 + 392) = 0u;
  *(_OWORD *)(v5 + 408) = 0u;
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  *(_OWORD *)(v5 + 456) = 0u;
  *(_OWORD *)(v5 + 472) = 0u;
  *(_OWORD *)(v5 + 488) = 0u;
  *(_OWORD *)(v5 + 504) = 0u;
  *(_OWORD *)(v5 + 520) = 0u;
  *(_OWORD *)(v5 + 536) = 0u;
  *(_OWORD *)(v5 + 40) = xmmword_22F45E120;
  *((_QWORD *)v5 + 2) = 0;
  *((_QWORD *)v5 + 3) = v5 + 40;
  *(_OWORD *)(v5 + 56) = xmmword_22F45E250;
  *(_OWORD *)(v5 + 72) = xmmword_22F45E0D0;
  *((_QWORD *)v5 + 4) = 0x2000000003;
  v18 = v5 + 24;
  v19 = (std::__shared_weak_count *)v5;
  v6 = sub_22E74761C((uint64_t)a3, (uint64_t)&v18);
  v7 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v22 = v24;
  v23 = xmmword_22F44E300;
  v10 = *(_QWORD *)(a1 + 8);
  sub_22F242C48((uint64_t)v20, (uint64_t)&v22);
  v11 = (_QWORD *)v21;
  if ((unint64_t)(v20[3] - v21) > 0xA)
  {
    *(_DWORD *)(v21 + 7) = 544042866;
    *v11 = *(_QWORD *)"Hello from ";
    v21 += 11;
    v12 = (llvm::raw_ostream *)v20;
  }
  else
  {
    v12 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)v20, "Hello from ");
  }
  if (*(char *)(v10 + 31) >= 0)
    v13 = (const char *)(v10 + 8);
  else
    v13 = *(const char **)(v10 + 8);
  v14 = (llvm::raw_ostream *)llvm::raw_ostream::write(v12, v13);
  v15 = (_WORD *)*((_QWORD *)v14 + 4);
  if (*((_QWORD *)v14 + 3) - (_QWORD)v15 > 1uLL)
  {
    *v15 = 30240;
    *((_QWORD *)v14 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v14, " v");
  }
  v16 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v17 = (_BYTE *)*((_QWORD *)v16 + 4);
  if (*((_BYTE **)v16 + 3) == v17)
  {
    llvm::raw_ostream::write(v16, ".");
  }
  else
  {
    *v17 = 46;
    ++*((_QWORD *)v16 + 4);
  }
  llvm::raw_ostream::operator<<();
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v20);
  v20[0] = 4;
  v20[1] = v23;
  sub_22E74241C(a3, v6, (uint64_t)v20, 2, (char *)v22, v23, 0);
  if (v22 != v24)
    free(v22);
}

uint64_t sub_22E74761C(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  char *v5;

  sub_22E7430C8((llvm::raw_ostream *)a1, *(uint64_t **)a2);
  v4 = *(_OWORD **)(a1 + 48);
  if ((unint64_t)v4 < *(_QWORD *)(a1 + 56))
  {
    *v4 = *(_OWORD *)a2;
    v5 = (char *)(v4 + 1);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    v5 = sub_22E6D58A8((char **)(a1 + 40), a2);
  }
  *(_QWORD *)(a1 + 48) = v5;
  return ((unint64_t)&v5[-*(_QWORD *)(a1 + 40)] >> 4) + 3;
}

uint64_t sub_22E747680(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24FA717A8;
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

_BYTE *sub_22E7476CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE *result;

  if (*(char *)(a1 + 31) < 0)
  {
    sub_22E3BB2B4((_BYTE *)a2, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 24);
  }
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 32);
  result = (_BYTE *)(a2 + 32);
  if (*(char *)(a1 + 71) < 0)
    return sub_22E3BB2B4(result, *(void **)(a1 + 48), *(_QWORD *)(a1 + 56));
  *(_OWORD *)result = *(_OWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 64);
  return result;
}

void sub_22E747750(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t *v7;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  __int128 v15;
  char *v16;
  FILE **v17;
  void *v18;
  FILE *v19;
  std::string::size_type v20;
  std::string *v21;
  std::string *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  FILE *v26;
  char *v27;
  std::string *p_dst;
  void *v29;
  std::string::size_type v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  void *v35;
  size_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  _QWORD *v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  char *v52;
  void *__src;
  std::string::size_type v54;
  std::string __dst;
  char *v56;
  char v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;

  v7 = a6;
  v62 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 24) != *(_DWORD *)(a1 + 32) || *(_DWORD *)(a2 + 28) != *(_DWORD *)(a1 + 36))
  {
    v10 = *(_QWORD *)(a3 + 104);
    *(_DWORD *)(v10 + 312) = *(_DWORD *)(a4 + 740);
    *(_DWORD *)(v10 + 316) = 815;
    if (*(char *)(v10 + 311) < 0)
    {
      **(_BYTE **)(v10 + 288) = 0;
      *(_QWORD *)(v10 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v10 + 288) = 0;
      *(_BYTE *)(v10 + 311) = 0;
    }
    v58 = (void *)(v10 + 320);
    v59 = 0;
    v60 = v10;
    v61 = 1;
    *(_BYTE *)(v10 + 320) = 0;
    *(_DWORD *)(v10 + 664) = 0;
    v31 = *(unsigned int *)(v10 + 776);
    if ((_DWORD)v31)
    {
      v32 = *(_QWORD *)(v10 + 768);
      v33 = 56 * v31;
      do
      {
        if (*(char *)(v32 + v33 - 9) < 0)
          operator delete(*(void **)(v32 + v33 - 32));
        v33 -= 56;
      }
      while (v33);
    }
    *(_DWORD *)(v10 + 776) = 0;
    v34 = *(_BYTE *)(a1 + 31);
    if (v34 >= 0)
      v35 = (void *)(a1 + 8);
    else
      v35 = *(void **)(a1 + 8);
    if (v34 >= 0)
      v36 = v34 & 0x7F;
    else
      v36 = *(_QWORD *)(a1 + 16);
    sub_22E3B89A8((unsigned __int8 **)&v58, v35, v36);
    v37 = *(unsigned int *)(a2 + 24);
    v38 = (unsigned __int8 *)v58;
    if (!v58)
    {
      v38 = (unsigned __int8 *)sub_22E3B8AAC(v59);
      v58 = v38;
    }
    v38[*v38 + 1] = 3;
    v39 = v58;
    v40 = *(unsigned __int8 *)v58;
    v41 = v40 + 1;
    *(_BYTE *)v58 = v40 + 1;
    v39[v40 + 2] = v37;
    v42 = *(unsigned int *)(a2 + 28);
    *((_BYTE *)v39 + v41 + 1) = 3;
    v43 = v58;
    v44 = *(unsigned __int8 *)v58;
    *(_BYTE *)v58 = v44 + 1;
    v43[v44 + 2] = v42;
    v45 = *(unsigned int *)(a1 + 32);
    *((_BYTE *)v43 + (v44 + 1) + 1) = 3;
    v46 = v58;
    v47 = *(unsigned __int8 *)v58;
    *(_BYTE *)v58 = v47 + 1;
    v46[v47 + 2] = v45;
    v48 = *(unsigned int *)(a1 + 36);
    *((_BYTE *)v46 + (v47 + 1) + 1) = 3;
    v49 = v58;
    v50 = *(unsigned __int8 *)v58;
    *(_BYTE *)v58 = v50 + 1;
    v49[v50 + 2] = v48;
    sub_22E3BB0B8((uint64_t)&v58);
    v12 = 0;
    goto LABEL_69;
  }
  v12 = operator new();
  *(_QWORD *)v12 = &off_24FA71788;
  *(_QWORD *)(v12 + 8) = a1;
  v13 = v12 + 16;
  v14 = *(char **)(a5 + 40);
  *(_QWORD *)(v12 + 48) = *(_QWORD *)(a5 + 32);
  v15 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)(v12 + 16) = *(_OWORD *)a5;
  *(_OWORD *)(v12 + 32) = v15;
  *(_DWORD *)(v12 + 52) = *(_DWORD *)(a5 + 36);
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  v16 = *(char **)(a5 + 48);
  *(_QWORD *)(v12 + 56) = 0;
  sub_22E6C95B8((_QWORD *)(v12 + 56), v14, v16, (v16 - v14) >> 4);
  *(_QWORD *)(v12 + 80) = v12 + 96;
  *(_QWORD *)(v12 + 88) = 0x800000000;
  if (*(_DWORD *)(a5 + 72))
    sub_22E747DF0(v12 + 80, a5 + 64);
  *(_QWORD *)(v12 + 352) = *(_QWORD *)(a5 + 336);
  v58 = &v60;
  v59 = 0x400000000;
  v17 = (FILE **)MEMORY[0x24BDAC8D8];
  while (1)
  {
    sub_22E748020(v13, 0, (uint64_t)&__dst);
    if ((__dst.__r_.__value_.__s.__data_[8] & 1) != 0)
      break;
    if (LODWORD(__dst.__r_.__value_.__l.__data_) == 2)
    {
      sub_22E746760(v13, (uint64_t *)&__src);
      v29 = __src;
      if ((__dst.__r_.__value_.__s.__data_[8] & 1) != 0)
      {
        v30 = __dst.__r_.__value_.__r.__words[0];
        __dst.__r_.__value_.__r.__words[0] = 0;
        if (v30)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v30 + 8))(v30);
      }
      if (v29)
        goto LABEL_65;
    }
    else
    {
      if (LODWORD(__dst.__r_.__value_.__l.__data_) < 3)
        goto LABEL_66;
      LODWORD(v59) = 0;
      __src = 0;
      v54 = 0;
      llvm::BitstreamCursor::readRecord();
      if ((v57 & 1) != 0)
      {
        v26 = *v17;
        v27 = v56;
        v56 = 0;
        v52 = v27;
        sub_22F2432A8(&v52, &__dst);
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_dst = &__dst;
        else
          p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
        fprintf(v26, "Failed reading rec code: %s\n", (const char *)p_dst);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        if (v52)
          (*(void (**)(char *))(*(_QWORD *)v52 + 8))(v52);
      }
      if ((_DWORD)v56 == 4)
      {
        v18 = __src;
        v19 = *v17;
        if (__src)
        {
          if (v54 >= *(_QWORD *)v58)
            v20 = *(_QWORD *)v58;
          else
            v20 = v54;
          if (v20 >= 0x7FFFFFFFFFFFFFF8)
            abort();
          if (v20 >= 0x17)
          {
            v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v20 | 7) != 0x17)
              v23 = v20 | 7;
            v24 = v23 + 1;
            v21 = (std::string *)operator new(v23 + 1);
            __dst.__r_.__value_.__l.__size_ = v20;
            __dst.__r_.__value_.__r.__words[2] = v24 | 0x8000000000000000;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
          }
          else
          {
            *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v20;
            v21 = &__dst;
            if (!v20)
              goto LABEL_28;
          }
          memmove(v21, v18, v20);
LABEL_28:
          v21->__r_.__value_.__s.__data_[v20] = 0;
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v22 = &__dst;
          else
            v22 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        }
        else
        {
          memset(&__dst, 0, sizeof(__dst));
          v22 = &__dst;
        }
        fprintf(v19, "Read extension block message: %s\n", (const char *)v22);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
      }
      if ((v57 & 1) != 0)
      {
        v25 = v56;
        v56 = 0;
        if (v25)
          (*(void (**)(char *))(*(_QWORD *)v25 + 8))(v25);
      }
    }
  }
  v29 = (void *)__dst.__r_.__value_.__r.__words[0];
  if (!__dst.__r_.__value_.__r.__words[0])
    goto LABEL_66;
LABEL_65:
  (*(void (**)(void *))(*(_QWORD *)v29 + 8))(v29);
LABEL_66:
  if (v58 != &v60)
    free(v58);
  v7 = a6;
LABEL_69:
  *v7 = v12;
}

void sub_22E747C40(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  llvm::raw_ostream *v4;
  _BYTE *v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  int v23;
  _QWORD *v24;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v17 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 1;
  v19 = 0;
  v20 = 0;
  v18 = 0;
  v16 = MEMORY[0x24BED83D8] + 16;
  v24 = a2;
  llvm::raw_ostream::SetBufferAndMode();
  if (*(char *)(a1 + 31) >= 0)
    v3 = (const char *)(a1 + 8);
  else
    v3 = *(const char **)(a1 + 8);
  v4 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)&v16, v3);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if (*((_BYTE **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, ":");
  }
  else
  {
    *v5 = 58;
    ++*((_QWORD *)v4 + 4);
  }
  v6 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if (*((_BYTE **)v6 + 3) == v7)
  {
    llvm::raw_ostream::write(v6, ":");
  }
  else
  {
    *v7 = 58;
    ++*((_QWORD *)v6 + 4);
  }
  v8 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v9 = (_BYTE *)*((_QWORD *)v8 + 4);
  if (*((_BYTE **)v8 + 3) == v9)
  {
    llvm::raw_ostream::write(v8, ":");
  }
  else
  {
    *v9 = 58;
    ++*((_QWORD *)v8 + 4);
  }
  v10 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v11 = (_BYTE *)*((_QWORD *)v10 + 4);
  if (*((_BYTE **)v10 + 3) == v11)
  {
    v10 = (llvm::raw_ostream *)llvm::raw_ostream::write(v10, ":");
  }
  else
  {
    *v11 = 58;
    ++*((_QWORD *)v10 + 4);
  }
  v14 = *(const char **)(a1 + 48);
  v13 = a1 + 48;
  v12 = v14;
  if (*(char *)(v13 + 23) >= 0)
    v15 = (const char *)v13;
  else
    v15 = v12;
  llvm::raw_ostream::write(v10, v15);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v16);
}

uint64_t sub_22E747DF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
      {
        sub_22E747FAC(*(_QWORD *)a2, *(_QWORD *)a2 + 32 * v4, *(_QWORD *)a1);
        v7 = v6;
        v8 = *(_QWORD *)a1;
        v5 = *(unsigned int *)(a1 + 8);
      }
      else
      {
        v8 = *(_QWORD *)a1;
        v7 = *(_QWORD *)a1;
      }
      v9 = v8 + 32 * v5;
      if (v9 != v7)
      {
        v10 = (uint64_t *)(v9 - 24);
        do
        {
          if (*v10)
          {
            sub_22E3B485C(v10);
            operator delete((void *)*v10);
          }
          v11 = v10 - 1;
          v10 -= 4;
        }
        while (v11 != (uint64_t *)v7);
      }
      goto LABEL_20;
    }
    if (*(_DWORD *)(a1 + 12) < v4)
    {
      sub_22E747F38(a1);
      sub_22F2AF230(a1);
    }
    else if ((_DWORD)v5)
    {
      sub_22E747FAC(*(_QWORD *)a2, *(_QWORD *)a2 + 32 * v5, *(_QWORD *)a1);
      goto LABEL_17;
    }
    v5 = 0;
LABEL_17:
    v12 = *(unsigned int *)(a2 + 8);
    if (v5 != v12)
    {
      v13 = *(_QWORD *)a2;
      v14 = *(_QWORD *)a2 + 32 * v12;
      v15 = *(_QWORD *)a1 + 32 * v5;
      v16 = v13 + 32 * v5;
      do
      {
        *(_DWORD *)v15 = *(_DWORD *)v16;
        *(_QWORD *)(v15 + 16) = 0;
        *(_QWORD *)(v15 + 24) = 0;
        *(_QWORD *)(v15 + 8) = 0;
        sub_22E6C95B8((_QWORD *)(v15 + 8), *(_QWORD **)(v16 + 8), *(_QWORD **)(v16 + 16), (uint64_t)(*(_QWORD *)(v16 + 16) - *(_QWORD *)(v16 + 8)) >> 4);
        v16 += 32;
        v15 += 32;
      }
      while (v16 != v14);
    }
LABEL_20:
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

uint64_t sub_22E747F38(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(unsigned int *)(result + 8);
  if ((_DWORD)v1)
  {
    v2 = *(_QWORD *)result - 24;
    v3 = 32 * v1;
    do
    {
      if (*(_QWORD *)(v2 + v3))
      {
        v6 = v2;
        v7 = result;
        v4 = (void **)(v2 + v3);
        v5 = v3;
        sub_22E3B485C((uint64_t *)(v2 + v3));
        operator delete(*v4);
        v3 = v5;
        v2 = v6;
        result = v7;
      }
      v3 -= 32;
    }
    while (v3);
  }
  *(_DWORD *)(result + 8) = 0;
  return result;
}

uint64_t sub_22E747FAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      *(_DWORD *)a3 = *(_DWORD *)v4;
      if (v4 != a3)
        sub_22E743814((uint64_t *)(a3 + 8), *(uint64_t **)(v4 + 8), *(uint64_t **)(v4 + 16), (uint64_t)(*(_QWORD *)(v4 + 16) - *(_QWORD *)(v4 + 8)) >> 4);
      v4 += 32;
      a3 += 32;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void sub_22E748020(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  char v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned int v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  std::error_code v27;

  v26 = *MEMORY[0x24BDAC8D0];
  while (1)
  {
    if (!*(_DWORD *)(a1 + 32) && *(_QWORD *)(a1 + 8) <= *(_QWORD *)(a1 + 16))
      goto LABEL_22;
    sub_22E745EC8(a1, *(_DWORD *)(a1 + 36), (uint64_t)&v24);
    if ((v25 & 1) != 0)
      goto LABEL_35;
    if ((_DWORD)v24 != 2)
      break;
    if ((a2 & 2) != 0)
      goto LABEL_15;
    llvm::BitstreamCursor::ReadAbbrevRecord((llvm::BitstreamCursor *)a1);
    v6 = v24;
    if (v24)
      goto LABEL_8;
  }
  if ((_DWORD)v24 == 1)
  {
    sub_22E745EC8(a1, 8u, (uint64_t)&v24);
    if ((v25 & 1) != 0)
    {
LABEL_35:
      v6 = v24;
    }
    else
    {
      if ((v24 & 0x80) == 0)
      {
        v13 = v24;
LABEL_19:
        v6 = (v13 << 32) | 2;
        goto LABEL_20;
      }
      v21 = 0;
      LODWORD(v13) = v24 & 0x7F;
      while (v21 < 0x19)
      {
        sub_22E745EC8(a1, 8u, (uint64_t)&v24);
        if ((v25 & 1) != 0)
          goto LABEL_35;
        v13 = ((v24 & 0x7F) << (v21 + 7)) | v13;
        v21 += 7;
        if ((v24 & 0x80) == 0)
          goto LABEL_19;
      }
      *(_QWORD *)&v27.__val_ = std::generic_category();
      v27.__cat_ = (const std::error_category *)"Unterminated VBR";
      llvm::createStringError((llvm *)0x5C, v27, v22);
      v6 = v23;
    }
LABEL_8:
    v7 = *(_BYTE *)(a3 + 8) | 1;
LABEL_21:
    *(_BYTE *)(a3 + 8) = v7;
    goto LABEL_29;
  }
  if ((_DWORD)v24)
  {
LABEL_15:
    v6 = (v24 << 32) | 3;
LABEL_20:
    v7 = *(_BYTE *)(a3 + 8) & 0xFE;
    goto LABEL_21;
  }
  if ((a2 & 1) == 0)
  {
    v8 = *(unsigned int *)(a1 + 72);
    if (!(_DWORD)v8)
    {
LABEL_22:
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_QWORD *)a3 = 0;
      return;
    }
    v9 = *(_DWORD *)(a1 + 32);
    v10 = v9 >= 0x20;
    v11 = v9 - 32;
    if (v10)
    {
      *(_QWORD *)(a1 + 24) >>= v11;
      v12 = 32;
    }
    else
    {
      v12 = 0;
    }
    v15 = (void **)(a1 + 40);
    v14 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 32) = v12;
    v16 = *(_QWORD *)(a1 + 64) + 32 * v8;
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(v16 - 32);
    if (v14)
    {
      sub_22E3B485C((uint64_t *)(a1 + 40));
      operator delete(*v15);
      *v15 = 0;
      *(_QWORD *)(a1 + 48) = 0;
      *(_QWORD *)(a1 + 56) = 0;
    }
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(v16 - 24);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(v16 - 8);
    *(_QWORD *)(v16 - 24) = 0;
    *(_QWORD *)(v16 - 16) = 0;
    *(_QWORD *)(v16 - 8) = 0;
    v17 = (*(_DWORD *)(a1 + 72) - 1);
    *(_DWORD *)(a1 + 72) = v17;
    v18 = *(_QWORD *)(a1 + 64) + 32 * v17;
    v20 = *(_QWORD *)(v18 + 8);
    v19 = (uint64_t *)(v18 + 8);
    if (v20)
    {
      sub_22E3B485C(v19);
      operator delete((void *)*v19);
    }
  }
  *(_BYTE *)(a3 + 8) &= ~1u;
  v6 = 1;
LABEL_29:
  *(_QWORD *)a3 = v6;
}

uint64_t sub_22E748288(uint64_t a1)
{
  sub_22E746F74((char **)(a1 + 64));
  if (*(_QWORD *)(a1 + 40))
  {
    sub_22E3B485C((uint64_t *)(a1 + 40));
    operator delete(*(void **)(a1 + 40));
  }
  return a1;
}

void sub_22E7482D0(llvm::raw_ostream *a1, int a2, unsigned __int8 *__s, size_t __n, int a5, uint64_t a6, int a7)
{
  int v13;
  _BYTE *v14;
  size_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  _BYTE *v21;
  _BYTE *v22;
  size_t v23;
  char *v24;
  unint64_t v25;
  size_t v26;
  size_t v27;
  char *v28;
  unint64_t v29;
  size_t v30;
  size_t v31;
  _BYTE *v32;
  int v33;
  int v34;
  char v35;
  char *v36;
  __int128 v37;
  _QWORD v38[3];

  v38[2] = *MEMORY[0x24BDAC8D0];
  v13 = a7 ^ 1 | a2;
  if ((v13 & 1) == 0)
    (*(void (**)(llvm::raw_ostream *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 24))(a1, 8, 1, 0);
  if ((_DWORD)a6)
  {
    v33 = a7;
    v34 = v13 ^ 1;
    if (__n && (v14 = memchr(__s, 10, __n)) != 0)
      v15 = v14 - __s;
    else
      v15 = -1;
    if (__n >= v15)
      v16 = v15;
    else
      v16 = __n;
    v35 = 1;
    v36 = (char *)v38;
    v37 = xmmword_22F44E350;
    sub_22E47EFD8((size_t *)&v36, 6uLL, 32);
    if ((_DWORD)v16)
    {
      v17 = 0;
      do
      {
        if (v17 + 1 > v16)
          v18 = v17 + 1;
        else
          v18 = v16;
        v19 = v17;
        while ((word_22F4ADB24[__s[v19]] & 7) != 0)
        {
          if (++v19 >= v16)
          {
            v19 = v18;
            break;
          }
        }
        if (v19 == (_DWORD)v16)
          break;
        v17 = sub_22E74AFE8(v19, (uint64_t)__s, __n, v16, a5, a6);
        v20 = v17 - v19;
        if (v17 - v19 + a5 >= a6)
        {
          v22 = (_BYTE *)*((_QWORD *)a1 + 4);
          if ((unint64_t)v22 >= *((_QWORD *)a1 + 3))
          {
            llvm::raw_ostream::write(a1);
          }
          else
          {
            *((_QWORD *)a1 + 4) = v22 + 1;
            *v22 = 10;
          }
          llvm::raw_ostream::write(a1, v36);
          v23 = v19;
          if (__n < v19)
            v23 = __n;
          v24 = (char *)&__s[v23];
          v25 = __n - v23;
          v26 = v25 >= v20 ? v17 - v19 : v25;
          sub_22E7485E4(a1, v24, v26, &v35, v34);
          a5 = v20 + 6;
        }
        else
        {
          if (v19)
          {
            v21 = (_BYTE *)*((_QWORD *)a1 + 4);
            if ((unint64_t)v21 >= *((_QWORD *)a1 + 3))
            {
              llvm::raw_ostream::write(a1);
            }
            else
            {
              *((_QWORD *)a1 + 4) = v21 + 1;
              *v21 = 32;
            }
            a5 += v20 + 1;
          }
          else
          {
            a5 += v20;
          }
          v27 = v19;
          if (__n < v19)
            v27 = __n;
          v28 = (char *)&__s[v27];
          v29 = __n - v27;
          v30 = v29 >= v20 ? v17 - v19 : v29;
          sub_22E7485E4(a1, v28, v30, &v35, v34);
        }
      }
      while (v17 < v16);
    }
    v31 = v16;
    if (__n < v16)
      v31 = __n;
    sub_22E7485E4(a1, (char *)&__s[v31], __n - v31, &v35, v34);
    if (v36 != (char *)v38)
      free(v36);
    if (v33)
      goto LABEL_49;
  }
  else
  {
    LOBYTE(v36) = 1;
    sub_22E7485E4(a1, (char *)__s, __n, &v36, v13 ^ 1);
    if (a7)
LABEL_49:
      (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)a1 + 32))(a1);
  }
  v32 = (_BYTE *)*((_QWORD *)a1 + 4);
  if ((unint64_t)v32 >= *((_QWORD *)a1 + 3))
  {
    llvm::raw_ostream::write(a1);
  }
  else
  {
    *((_QWORD *)a1 + 4) = v32 + 1;
    *v32 = 10;
  }
}

void *sub_22E7485E4(llvm::raw_ostream *a1, char *__s, size_t __n, _BYTE *a4, int a5)
{
  size_t v7;
  _BYTE *v10;
  unint64_t v11;
  size_t v12;
  void *result;
  size_t v14;
  uint64_t v15;
  uint64_t v16;

  v7 = __n;
  if (!__n)
    goto LABEL_4;
LABEL_2:
  v10 = memchr(__s, 127, v7);
  if (v10)
  {
    v11 = v10 - __s;
    goto LABEL_5;
  }
LABEL_4:
  while (1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 >= v11 ? v11 : v7;
    result = (void *)*((_QWORD *)a1 + 4);
    if (v12 <= *((_QWORD *)a1 + 3) - (_QWORD)result)
    {
      if (v12)
      {
        result = memcpy(result, __s, v12);
        *((_QWORD *)a1 + 4) += v12;
      }
    }
    else
    {
      result = (void *)llvm::raw_ostream::write(a1, __s);
    }
    if (v11 == -1)
      return result;
    if (v7 >= v11 + 1)
      v14 = v11 + 1;
    else
      v14 = v7;
    v15 = *(_QWORD *)a1;
    if (*a4)
    {
      v16 = 6;
LABEL_20:
      (*(void (**)(llvm::raw_ostream *, uint64_t, uint64_t, _QWORD))(v15 + 24))(a1, v16, 1, 0);
      goto LABEL_21;
    }
    (*(void (**)(llvm::raw_ostream *))(v15 + 32))(a1);
    if (a5)
    {
      v15 = *(_QWORD *)a1;
      v16 = 8;
      goto LABEL_20;
    }
LABEL_21:
    __s += v14;
    v7 -= v14;
    *a4 ^= 1u;
    if (v7)
      goto LABEL_2;
  }
}

unint64_t sub_22E748704(unint64_t result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  const char *v9;
  int v10;
  unsigned int v14;
  size_t v15;
  uint64_t v16;
  int v17;
  llvm::raw_ostream *v18;
  char *v19;
  char v20;
  unint64_t v21;
  size_t *v22;
  uint64_t v23;
  _WORD *v24;
  llvm::raw_ostream *v25;
  _WORD *v26;
  uint64_t v27;
  llvm::raw_ostream *v28;
  _BYTE *v29;
  unint64_t v30;
  int v31;
  llvm::raw_ostream *v32;
  _BYTE *v33;
  llvm::raw_ostream *v34;
  _BYTE *v35;
  llvm::raw_ostream *v36;
  _BYTE *v37;
  int v38;
  char v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unint64_t v46;
  int v47;
  int v48;
  uint64_t v50;
  _BYTE *v51;
  llvm::raw_ostream *v52;
  _BYTE *v53;
  llvm::raw_ostream *v54;
  _BYTE *v55;
  llvm::raw_ostream *v56;
  _BYTE *v57;
  llvm::raw_ostream *v58;
  _BYTE *v59;
  llvm::raw_ostream *v60;
  _BYTE *v61;
  _BYTE *v62;
  int v63;
  _QWORD *v64;
  _QWORD v65[2];
  uint64_t v66;
  _QWORD *v67;

  v8 = result;
  v65[0] = a2;
  v65[1] = a3;
  v9 = *(const char **)a4;
  if (!*(_QWORD *)a4)
  {
    result = sub_22F1DFF28((uint64_t)v65);
    if ((_DWORD)result)
    {
      result = sub_22F423218((uint64_t)v65);
      if (result)
      {
        v21 = *(_QWORD *)(result + 88);
        do
        {
          v22 = (size_t *)v21;
          v23 = *(_QWORD *)(v21 + 8);
          if ((v23 & 2) == 0)
            break;
          v21 = v23 & 0xFFFFFFFFFFFFFFFCLL;
        }
        while (v21);
        sub_22F2AF5CC(v8, v22 + 4, *v22, (uint64_t)a3);
        result = *(_QWORD *)(v8 + 40);
        v24 = *(_WORD **)(result + 32);
        if (*(_QWORD *)(result + 24) - (_QWORD)v24 > 1uLL)
        {
          *v24 = 8250;
          *(_QWORD *)(result + 32) += 2;
        }
        else
        {
          return llvm::raw_ostream::write((llvm::raw_ostream *)result, ": ");
        }
      }
    }
    return result;
  }
  v10 = *(_DWORD *)(*(_QWORD *)(result + 16) + 4);
  if ((v10 & 0x40) == 0)
    return result;
  v14 = a2;
  if ((v10 & 0x40000) == 0
    || ((*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(result + 40) + 24))(*(_QWORD *)(result + 40), 8, 1, 0), (v9 = *(const char **)a4) != 0))
  {
    v15 = strlen(v9);
  }
  else
  {
    v15 = 0;
  }
  sub_22F2AF5CC(v8, v9, v15, (uint64_t)a3);
  v16 = *(_QWORD *)(v8 + 16);
  v17 = *(_BYTE *)(v16 + 40) & 3;
  if (v17 == 2)
  {
    v25 = *(llvm::raw_ostream **)(v8 + 40);
    v26 = (_WORD *)*((_QWORD *)v25 + 4);
    if (*((_QWORD *)v25 + 3) - (_QWORD)v26 > 1uLL)
    {
      *v26 = 11040;
      *((_QWORD *)v25 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v25, " +");
    }
    goto LABEL_27;
  }
  if (v17 == 1)
  {
    v18 = *(llvm::raw_ostream **)(v8 + 40);
    v19 = (char *)*((_QWORD *)v18 + 4);
    if ((unint64_t)v19 < *((_QWORD *)v18 + 3))
    {
      *((_QWORD *)v18 + 4) = v19 + 1;
      v20 = 40;
      goto LABEL_25;
    }
LABEL_26:
    llvm::raw_ostream::write(v18);
    goto LABEL_27;
  }
  if ((*(_BYTE *)(v16 + 40) & 3) == 0 && (*(_BYTE *)(v16 + 4) & 0x10) != 0)
  {
    v18 = *(llvm::raw_ostream **)(v8 + 40);
    v19 = (char *)*((_QWORD *)v18 + 4);
    if ((unint64_t)v19 < *((_QWORD *)v18 + 3))
    {
      *((_QWORD *)v18 + 4) = v19 + 1;
      v20 = 58;
LABEL_25:
      *v19 = v20;
LABEL_27:
      llvm::raw_ostream::operator<<();
      v16 = *(_QWORD *)(v8 + 16);
      goto LABEL_28;
    }
    goto LABEL_26;
  }
LABEL_28:
  if ((*(_BYTE *)(v16 + 4) & 0x20) == 0 || !*(_DWORD *)(a4 + 16))
    goto LABEL_37;
  v27 = *(_BYTE *)(v16 + 40) & 3;
  v28 = *(llvm::raw_ostream **)(v8 + 40);
  v30 = *((_QWORD *)v28 + 3);
  v29 = (_BYTE *)*((_QWORD *)v28 + 4);
  if (v27 != 1)
  {
    if ((unint64_t)v29 < v30)
    {
      *((_QWORD *)v28 + 4) = v29 + 1;
      *v29 = 58;
      goto LABEL_36;
    }
LABEL_35:
    llvm::raw_ostream::write(v28);
    goto LABEL_36;
  }
  if ((unint64_t)v29 >= v30)
    goto LABEL_35;
  *((_QWORD *)v28 + 4) = v29 + 1;
  *v29 = 44;
LABEL_36:
  llvm::raw_ostream::operator<<();
  v16 = *(_QWORD *)(v8 + 16);
LABEL_37:
  v31 = *(_BYTE *)(v16 + 40) & 3;
  switch(v31)
  {
    case 2:
      goto LABEL_48;
    case 1:
      v32 = *(llvm::raw_ostream **)(v8 + 40);
      v33 = (_BYTE *)*((_QWORD *)v32 + 4);
      if ((unint64_t)v33 >= *((_QWORD *)v32 + 3))
      {
        llvm::raw_ostream::write(v32);
      }
      else
      {
        *((_QWORD *)v32 + 4) = v33 + 1;
        *v33 = 41;
      }
      if ((*(_DWORD *)(*(_QWORD *)(v8 + 8) + 192) - 190000000) >= 0xF4ACD481)
      {
        v34 = *(llvm::raw_ostream **)(v8 + 40);
        v35 = (_BYTE *)*((_QWORD *)v34 + 4);
        if ((unint64_t)v35 >= *((_QWORD *)v34 + 3))
        {
          llvm::raw_ostream::write(v34);
        }
        else
        {
          *((_QWORD *)v34 + 4) = v35 + 1;
          *v35 = 32;
        }
      }
      goto LABEL_48;
    case 0:
LABEL_48:
      v36 = *(llvm::raw_ostream **)(v8 + 40);
      v37 = (_BYTE *)*((_QWORD *)v36 + 4);
      if ((unint64_t)v37 >= *((_QWORD *)v36 + 3))
      {
        llvm::raw_ostream::write(v36);
      }
      else
      {
        *((_QWORD *)v36 + 4) = v37 + 1;
        *v37 = 58;
      }
      break;
  }
  if ((*(_BYTE *)(*(_QWORD *)(v8 + 16) + 5) & 8) != 0 && a7)
  {
    if ((v14 & 0x80000000) != 0)
      v14 = sub_22F1E22F0(a3, v14);
    v66 = v14;
    v67 = a3;
    v38 = sub_22F1DFF28((uint64_t)&v66);
    v39 = 0;
    v40 = a6 + 12 * a7;
    do
    {
      while (1)
      {
        v41 = *(_DWORD *)a6;
        if (!*(_DWORD *)a6)
          break;
        v42 = *(unsigned int *)(a6 + 4);
        if (!(_DWORD)v42)
          break;
        if (v41 < 0)
        {
          v41 = sub_22F1E22F0(a3, *(_DWORD *)a6);
          v42 = *(unsigned int *)(a6 + 4);
        }
        v43 = sub_22F1E2828(a3, v42);
        v45 = v44;
        v46 = HIDWORD(v43);
        v47 = sub_22E677168((uint64_t)a3, v41);
        v48 = sub_22E677168((uint64_t)a3, v46);
        if (v38 != v47 || v38 != v48)
          break;
        if (v45)
          sub_22F1415D0(v46, (uint64_t)&v66, a3, *(_DWORD **)(v8 + 8), 0);
        LODWORD(v66) = v41;
        v67 = a3;
        v63 = v46;
        v64 = a3;
        v50 = *(_QWORD *)(v8 + 40);
        v51 = *(_BYTE **)(v50 + 32);
        if ((unint64_t)v51 >= *(_QWORD *)(v50 + 24))
        {
          llvm::raw_ostream::write(*(llvm::raw_ostream **)(v8 + 40));
        }
        else
        {
          *(_QWORD *)(v50 + 32) = v51 + 1;
          *v51 = 123;
        }
        sub_22F423178((uint64_t)&v66, 0);
        v52 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
        v53 = (_BYTE *)*((_QWORD *)v52 + 4);
        if ((unint64_t)v53 >= *((_QWORD *)v52 + 3))
        {
          llvm::raw_ostream::write(v52);
        }
        else
        {
          *((_QWORD *)v52 + 4) = v53 + 1;
          *v53 = 58;
        }
        sub_22F4231C8((uint64_t)&v66, 0);
        v54 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
        v55 = (_BYTE *)*((_QWORD *)v54 + 4);
        if ((unint64_t)v55 >= *((_QWORD *)v54 + 3))
        {
          llvm::raw_ostream::write(v54);
        }
        else
        {
          *((_QWORD *)v54 + 4) = v55 + 1;
          *v55 = 45;
        }
        sub_22F423178((uint64_t)&v63, 0);
        v56 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
        v57 = (_BYTE *)*((_QWORD *)v56 + 4);
        if ((unint64_t)v57 >= *((_QWORD *)v56 + 3))
        {
          llvm::raw_ostream::write(v56);
        }
        else
        {
          *((_QWORD *)v56 + 4) = v57 + 1;
          *v57 = 58;
        }
        sub_22F4231C8((uint64_t)&v63, 0);
        v58 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
        v59 = (_BYTE *)*((_QWORD *)v58 + 4);
        if ((unint64_t)v59 >= *((_QWORD *)v58 + 3))
        {
          llvm::raw_ostream::write(v58);
        }
        else
        {
          *((_QWORD *)v58 + 4) = v59 + 1;
          *v59 = 125;
        }
        a6 += 12;
        v39 = 1;
        if (a6 == v40)
          goto LABEL_86;
      }
      a6 += 12;
    }
    while (a6 != v40);
    if ((v39 & 1) == 0)
      goto LABEL_89;
LABEL_86:
    v60 = *(llvm::raw_ostream **)(v8 + 40);
    v61 = (_BYTE *)*((_QWORD *)v60 + 4);
    if ((unint64_t)v61 >= *((_QWORD *)v60 + 3))
    {
      llvm::raw_ostream::write(v60);
    }
    else
    {
      *((_QWORD *)v60 + 4) = v61 + 1;
      *v61 = 58;
    }
  }
LABEL_89:
  result = *(_QWORD *)(v8 + 40);
  v62 = *(_BYTE **)(result + 32);
  if ((unint64_t)v62 >= *(_QWORD *)(result + 24))
    return llvm::raw_ostream::write((llvm::raw_ostream *)result);
  *(_QWORD *)(result + 32) = v62 + 1;
  *v62 = 32;
  return result;
}

void sub_22E748D50(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  BOOL v12;
  BOOL v13;
  unsigned int v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  unsigned int v29;
  _DWORD *v30;
  unsigned int v31;
  unsigned int v32;
  _DWORD *v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  _DWORD *v38;
  unsigned int v39;
  unsigned int v40;
  _DWORD *v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  _DWORD *v54;
  _DWORD *v55;
  llvm::raw_ostream *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  llvm::raw_ostream *v60;
  _BYTE *v61;
  llvm::raw_ostream *v62;
  _BYTE *v63;
  llvm::raw_ostream *v64;
  _BYTE *v65;
  llvm::raw_ostream *v66;
  uint64_t v67;
  llvm::raw_ostream *v68;
  _WORD *v69;
  int v70;
  int v71;
  unint64_t v72;
  unint64_t v73;
  unsigned int v74;
  unint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  const char *v79;
  uint64_t v80;
  unsigned int v81;
  int v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  char *i;
  int v87;
  unint64_t v89;
  unsigned int v90;
  _BOOL4 v92;
  BOOL v93;
  std::string *v94;
  size_t size;
  unsigned int v96;
  char *p_s;
  _DWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  std::string::size_type v102;
  int v103;
  unsigned int v104;
  int data;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  std::string::size_type v116;
  std::string *p_b;
  uint64_t v118;
  uint64_t v119;
  unsigned int v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  int v125;
  BOOL v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  _DWORD *v131;
  unsigned int v132;
  unsigned int v133;
  _DWORD *v134;
  unsigned int v135;
  int v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  _DWORD *v140;
  unsigned int v141;
  int v142;
  unsigned int v143;
  _DWORD *v144;
  unsigned int v145;
  uint64_t v146;
  unsigned int v147;
  unint64_t v148;
  uint64_t v149;
  unsigned __int8 *v150;
  int v151;
  int v153;
  unsigned __int8 *v154;
  int v155;
  int *v157;
  int v158;
  unsigned int *v159;
  uint64_t v160;
  unsigned int v161;
  unsigned int *v162;
  std::string::size_type v163;
  unsigned int v164;
  char v165;
  std::string::size_type v166;
  BOOL v167;
  std::string *v168;
  char *v169;
  int64_t v170;
  int v171;
  int v172;
  int v173;
  int v174;
  unsigned int v175;
  unsigned int v176;
  signed int v177;
  uint64_t v178;
  unint64_t v179;
  std::string *v180;
  uint64_t v181;
  unsigned int v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unsigned int v187;
  char v188;
  BOOL v189;
  std::string::size_type v190;
  std::string::size_type v191;
  int v192;
  unsigned int v193;
  unsigned int v194;
  std::string::size_type v195;
  size_t v196;
  uint64_t v197;
  std::string::size_type v198;
  size_t v199;
  std::string *p_str;
  std::string::size_type v201;
  size_t v202;
  BOOL v203;
  uint64_t v204;
  size_t v205;
  size_t v206;
  std::string::size_type v207;
  unsigned int v208;
  std::string::size_type v209;
  std::string *v210;
  std::string *v211;
  std::string::size_type v212;
  std::string::size_type v213;
  unsigned int v214;
  unsigned int v215;
  std::string *v216;
  std::string::size_type v217;
  unsigned int v218;
  _DWORD *v219;
  unsigned int v220;
  unsigned int v221;
  int v222;
  uint64_t v223;
  std::string *v224;
  std::string *v225;
  unsigned int v226;
  std::string::size_type v227;
  std::string *v228;
  uint64_t v229;
  std::string *v230;
  unsigned int v231;
  std::string *v232;
  std::string::size_type v233;
  unsigned int v234;
  int *v235;
  int v236;
  signed int v237;
  uint64_t v238;
  uint64_t v239;
  int v240;
  int v241;
  unsigned int v242;
  unint64_t v243;
  std::string *v244;
  char *v245;
  char *v246;
  unsigned int v247;
  uint64_t v248;
  unsigned int v249;
  uint64_t v250;
  int v251;
  char *v252;
  int v253;
  int v254;
  unsigned int v255;
  BOOL v256;
  uint64_t v257;
  int v258;
  unint64_t v259;
  int v260;
  int v261;
  std::string::size_type v262;
  int v263;
  BOOL v264;
  std::string::size_type v265;
  char v266;
  std::string::size_type v267;
  std::string::size_type v268;
  std::string::size_type v269;
  std::string *v270;
  unint64_t v271;
  BOOL v272;
  int v273;
  BOOL v274;
  std::string *v276;
  std::string *v277;
  std::string *v278;
  llvm::raw_ostream *v279;
  _BYTE *v280;
  std::string::size_type v281;
  std::string *v282;
  llvm::raw_ostream *v283;
  _BYTE *v284;
  std::string::size_type v285;
  int v286;
  llvm::raw_ostream *v287;
  _BYTE *v288;
  std::string *v289;
  llvm::raw_ostream *v290;
  _BYTE *v291;
  unsigned int v292;
  unsigned int v293;
  uint64_t v294;
  unsigned int v295;
  _DWORD *__src;
  void *__srca;
  uint64_t v298;
  const char *v299;
  uint64_t v300;
  unsigned int v301;
  uint64_t v302;
  _QWORD *v303;
  uint64_t v304;
  unsigned int v305;
  int v306;
  unsigned int v307;
  unsigned int v308;
  unsigned int v309;
  unsigned int v310;
  _QWORD *v311;
  std::string __str;
  std::string __b;
  std::string v314;
  char v315;
  _QWORD v316[2];
  std::string v317;
  unint64_t v318;
  char *__s;
  size_t v320;
  int64_t v321;
  void *v322;
  uint64_t v323;
  _DWORD v324[200];
  void *v325;
  uint64_t v326;
  _DWORD v327[200];
  std::string v328;
  uint64_t v329;
  unsigned __int8 v330;
  uint64_t v331;

  v331 = *MEMORY[0x24BDAC8D0];
  v316[0] = a2;
  v316[1] = a3;
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + 5) & 2) == 0)
    return;
  v12 = *(_DWORD *)(a1 + 24) == (_DWORD)a2 && *(_DWORD *)(a5 + 8) == 0;
  v13 = v12 && a7 == 0;
  if (v13 && (a4 == 1 || *(_DWORD *)(a1 + 32) != 1))
    return;
  v14 = sub_22E677168(a3, a2);
  v315 = 0;
  v15 = sub_22F423248((uint64_t)v316, &v315);
  if (v315)
    return;
  v17 = v15;
  v18 = v16;
  v19 = sub_22F423178((uint64_t)v316, 0);
  v305 = sub_22F4231C8((uint64_t)v316, 0);
  if (v305 > 0x1000)
    return;
  v298 = v18;
  v299 = v17;
  v308 = v14;
  v302 = a7;
  v303 = (_QWORD *)a5;
  v20 = *(_DWORD *)(a5 + 8);
  v307 = v19;
  if (v20)
  {
    v21 = *(int **)a5;
    v22 = v19;
    v23 = *(_QWORD *)a5 + 12 * v20;
    v306 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 28) - 1;
    v301 = v22;
    v309 = v22;
    LODWORD(v311) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 28);
    v24 = v14;
    while (1)
    {
      v26 = *v21;
      v25 = v21[1];
      if (*v21)
        v27 = v25 == 0;
      else
        v27 = 1;
      if (v27)
        goto LABEL_59;
      v28 = *(_DWORD *)(a3 + 304);
      v29 = v28 + 1;
      if (v28 + 1 > 1)
      {
        if ((v28 & 0x80000000) != 0)
        {
          v31 = -2 - v28;
          v30 = (_DWORD *)(((*(_QWORD *)(*(_QWORD *)(a3 + 224) + 8 * ((-2 - v28) >> 6)) >> (-2 - v28)) & 1) != 0
                         ? *(_QWORD *)(a3 + 200) + 24 * v31
                         : sub_22F1E1134(a3, v31, 0));
        }
        else
        {
          v30 = (_DWORD *)(*(_QWORD *)(a3 + 184) + 24 * v28);
        }
      }
      else
      {
        v30 = *(_DWORD **)(a3 + 184);
      }
      if ((*v30 & 0x7FFFFFFFu) <= (v26 & 0x7FFFFFFFu)
        && (v28 == -2
         || (v29 != *(_DWORD *)(a3 + 192)
           ? ((v29 & 0x80000000) != 0
            ? ((v34 = -3 - v28,
                ((*(_QWORD *)(*(_QWORD *)(a3 + 224) + 8 * ((-3 - v28) >> 6)) >> (-3 - v28)) & 1) == 0)
             ? (v33 = (_DWORD *)sub_22F1E1134(a3, v34, 0))
             : (v33 = (_DWORD *)(*(_QWORD *)(a3 + 200) + 24 * v34)))
            : (v33 = (_DWORD *)(*(_QWORD *)(a3 + 184) + 24 * v29)),
              v32 = *v33 & 0x7FFFFFFF)
           : (v32 = *(_DWORD *)(a3 + 216)),
             v32 > (v26 & 0x7FFFFFFFu))))
      {
        v35 = *(_DWORD *)(a3 + 304);
      }
      else
      {
        v35 = sub_22F1E1EE8(a3, v26 & 0x7FFFFFFF);
      }
      v24 = v308;
      if (v35 != v308)
        goto LABEL_59;
      v36 = *(_DWORD *)(a3 + 304);
      v37 = v36 + 1;
      if (v36 + 1 > 1)
      {
        if ((v36 & 0x80000000) != 0)
        {
          v39 = -2 - v36;
          v38 = (_DWORD *)(((*(_QWORD *)(*(_QWORD *)(a3 + 224) + 8 * ((-2 - v36) >> 6)) >> (-2 - v36)) & 1) != 0
                         ? *(_QWORD *)(a3 + 200) + 24 * v39
                         : sub_22F1E1134(a3, v39, 0));
        }
        else
        {
          v38 = (_DWORD *)(*(_QWORD *)(a3 + 184) + 24 * v36);
        }
      }
      else
      {
        v38 = *(_DWORD **)(a3 + 184);
      }
      if ((*v38 & 0x7FFFFFFFu) <= (v25 & 0x7FFFFFFFu)
        && (v36 == -2
         || (v37 != *(_DWORD *)(a3 + 192)
           ? ((v37 & 0x80000000) != 0
            ? ((v42 = -3 - v36,
                ((*(_QWORD *)(*(_QWORD *)(a3 + 224) + 8 * ((-3 - v36) >> 6)) >> (-3 - v36)) & 1) == 0)
             ? (v41 = (_DWORD *)sub_22F1E1134(a3, v42, 0))
             : (v41 = (_DWORD *)(*(_QWORD *)(a3 + 200) + 24 * v42)))
            : (v41 = (_DWORD *)(*(_QWORD *)(a3 + 184) + 24 * v37)),
              v40 = *v41 & 0x7FFFFFFF)
           : (v40 = *(_DWORD *)(a3 + 216)),
             v40 > (v25 & 0x7FFFFFFFu))))
      {
        v43 = *(_DWORD *)(a3 + 304);
      }
      else
      {
        v43 = sub_22F1E1EE8(a3, v25 & 0x7FFFFFFF);
      }
      v24 = v308;
      if (v43 != v308)
        goto LABEL_59;
      v44 = sub_22F423CC4(a3, v26, 0);
      v45 = sub_22F423CC4(a3, v25, 0);
      v46 = v301;
      v47 = v309 + (_DWORD)v311;
      if (v309 + (_DWORD)v311 == v301 + 1)
        goto LABEL_59;
      if (v44 >= v309)
        v48 = v309;
      else
        v48 = v44;
      if (v301 <= v45)
        v46 = v45;
      if (v46 - v48 + 1 <= v311)
      {
        v309 = v48;
      }
      else
      {
        if (v44 > v309 && v44 - v309 + 1 > v311 || v301 > v45 && v301 + 1 - v45 > v311)
          goto LABEL_59;
        v49 = v301 + ((v47 - v301) >> 1);
        if (v46 < v49)
          v49 = v46;
        v50 = v47 + ~v49;
        v51 = v50 + v48;
        if (v51 <= v309)
          v51 = v309;
        v309 = v51 - v50;
        v52 = v306 + v51 - v50;
        if (v46 >= v52)
          v46 = v52;
      }
      v301 = v46;
LABEL_59:
      v21 += 3;
      if (v21 == (int *)v23)
        goto LABEL_85;
    }
  }
  v309 = v19;
  v301 = v19;
  v24 = v14;
LABEL_85:
  if (v309 != v301 + 1)
  {
    v80 = v18;
    v79 = v299;
    v295 = v24;
    v311 = &v329;
    v53 = v302;
    v304 = a6 + 56 * v302;
    v300 = a6;
    v81 = v309;
    while (1)
    {
      v82 = sub_22F1E38E8((uint64_t *)a3, v295, v81, 1);
      v83 = sub_22E677168(a3, v82);
      if (v80 == HIDWORD(v83))
        goto LABEL_87;
      v84 = (char *)&v79[HIDWORD(v83)];
      v85 = v80 - HIDWORD(v83);
      for (i = v84; ; ++i)
      {
        v87 = *i;
        if (v87 == 10 || v87 == 13)
          break;
        if (!v85)
        {
          i = (char *)&v299[v298];
          break;
        }
        --v85;
      }
      v89 = i - v84;
      if ((unint64_t)(i - v84) > 0x1000)
        return;
      if (v89)
      {
        v90 = v308;
        do
        {
          v92 = v81 != v307 || v89 > v305;
          if (v84[v89 - 1])
            v93 = 1;
          else
            v93 = !v92;
          if (v93)
            break;
          if (v89 >= v89 - 1)
            --v89;
        }
        while (v89);
      }
      else
      {
        v90 = v308;
      }
      sub_22E3B4274(&v314, v84, &v84[v89], v89);
      if ((v314.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v94 = &v314;
      else
        v94 = (std::string *)v314.__r_.__value_.__r.__words[0];
      if ((v314.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = *((_BYTE *)&v314.__r_.__value_.__s + 23) & 0x7F;
      else
        size = v314.__r_.__value_.__l.__size_;
      if (size >= 0x7FFFFFFFFFFFFFF8)
LABEL_626:
        abort();
      v96 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32);
      if (size >= 0x17)
        break;
      HIBYTE(v321) = size;
      p_s = (char *)&__s;
      v98 = v324;
      if (size)
        goto LABEL_167;
LABEL_168:
      p_s[size] = 0;
      v322 = v324;
      v325 = v327;
      v326 = 0xC800000000;
      v323 = 0xC800000000;
      v310 = v81;
      if (size)
      {
        if (size >= 0xC8)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v101 = v323;
          v98 = v322;
        }
        else
        {
          v101 = 0;
        }
        memset(&v98[v101], 255, 4 * size + 4);
        v102 = 0;
        v103 = 0;
        LODWORD(v323) = v323 + size + 1;
        v317.__r_.__value_.__r.__words[0] = 0;
        do
        {
          *((_DWORD *)v322 + v102) = v103;
          sub_22E74AC6C((uint64_t)&v328, (uint64_t)v94, (const unsigned __int8 *)size, (uint64_t *)&v317, v96);
          if (v328.__r_.__value_.__l.__data_ != (std::string::pointer)v311)
            free(v328.__r_.__value_.__l.__data_);
          v102 = v317.__r_.__value_.__r.__words[0];
          ++v103;
        }
        while (v317.__r_.__value_.__r.__words[0] < size);
        v104 = 0;
        data = 0;
        *((_DWORD *)v322 + v323 - 1) = v103;
        LODWORD(v326) = 0;
        v317.__r_.__value_.__r.__words[0] = 0;
        v106 = 1;
        v107 = 4;
        do
        {
          ++v104;
          v108 = v326;
          if (v106 != v326)
          {
            if (v106 >= v326)
            {
              v109 = v326;
              if (v106 - 1 >= HIDWORD(v326))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v109 = v326;
              }
              memset((char *)v325 + 4 * v109, 255, v107 - 4 * v108);
              v108 = (v106 + v326 - v108);
            }
            else
            {
              v108 = v104;
            }
            LODWORD(v326) = v108;
          }
          *((_DWORD *)v325 + v108 - 1) = data;
          sub_22E74AC6C((uint64_t)&v328, (uint64_t)v94, (const unsigned __int8 *)size, (uint64_t *)&v317, v96);
          if (v328.__r_.__value_.__l.__data_ != (std::string::pointer)v311)
            free(v328.__r_.__value_.__l.__data_);
          data = (int)v317.__r_.__value_.__l.__data_;
          v107 += 4;
          ++v106;
        }
        while (v317.__r_.__value_.__r.__words[0] < size);
        v110 = v326;
        if ((_DWORD)v326 == (_DWORD)v106)
        {
          v111 = v326;
          a6 = v300;
          v112 = v303;
          v90 = v308;
        }
        else
        {
          v111 = v106;
          a6 = v300;
          v90 = v308;
          if (v326 <= v106)
          {
            v114 = v326;
            if (HIDWORD(v326) <= (v106 - 1))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v114 = v326;
            }
            v115 = v106 - v110;
            memset((char *)v325 + 4 * v114, 255, 4 * v115);
            v111 = (v326 + v115);
            LODWORD(v326) = v326 + v115;
          }
          else
          {
            LODWORD(v326) = v106;
          }
          v112 = v303;
        }
        *((_DWORD *)v325 + v111 - 1) = data;
        v98 = v322;
        v113 = v323;
      }
      else
      {
        v324[0] = 0;
        LODWORD(v323) = 1;
        v327[0] = 0;
        v113 = 1;
        LODWORD(v326) = 1;
        v112 = v303;
      }
      v116 = (int)v98[v113 - 1];
      if ((v116 & 0x80000000) != 0)
        goto LABEL_626;
      if (v116 >= 0x17)
      {
        v118 = (v116 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v116 | 7) != 0x17)
          v118 = v116 | 7;
        v119 = v118 + 1;
        p_b = (std::string *)operator new(v118 + 1);
        __b.__r_.__value_.__l.__size_ = v116;
        __b.__r_.__value_.__r.__words[2] = v119 | 0x8000000000000000;
        __b.__r_.__value_.__r.__words[0] = (std::string::size_type)p_b;
LABEL_203:
        memset(p_b, 32, v116);
        goto LABEL_204;
      }
      *((_BYTE *)&__b.__r_.__value_.__s + 23) = v98[v113 - 1];
      p_b = &__b;
      if ((_DWORD)v116)
        goto LABEL_203;
LABEL_204:
      p_b->__r_.__value_.__s.__data_[v116] = 0;
      v120 = *((_DWORD *)v112 + 2);
      v121 = v310;
      if (v120)
      {
        v122 = *v303;
        v123 = *v303 + 12 * v120;
        do
        {
          v124 = *(_DWORD *)v122;
          v125 = *(_DWORD *)(v122 + 4);
          if (*(_DWORD *)v122)
            v126 = v125 == 0;
          else
            v126 = 1;
          if (!v126)
          {
            __src = *(_DWORD **)(a1 + 8);
            v127 = sub_22F423CC4(a3, v124, 0);
            if (v127 <= v121)
            {
              v128 = v127;
              v129 = *(_DWORD *)(a3 + 304);
              v130 = v129 + 1;
              if (v129 + 1 > 1)
              {
                if ((v129 & 0x80000000) != 0)
                {
                  v132 = -2 - v129;
                  if (((*(_QWORD *)(*(_QWORD *)(a3 + 224) + 8 * ((-2 - v129) >> 6)) >> (-2 - v129)) & 1) != 0)
                  {
                    v131 = (_DWORD *)(*(_QWORD *)(a3 + 200) + 24 * v132);
                  }
                  else
                  {
                    v175 = v127;
                    v131 = (_DWORD *)sub_22F1E1134(a3, v132, 0);
                    v128 = v175;
                  }
                }
                else
                {
                  v131 = (_DWORD *)(*(_QWORD *)(a3 + 184) + 24 * v129);
                }
              }
              else
              {
                v131 = *(_DWORD **)(a3 + 184);
              }
              if ((*v131 & 0x7FFFFFFFu) > (v124 & 0x7FFFFFFFu))
                goto LABEL_231;
              if (v129 == -2
                || (v130 != *(_DWORD *)(a3 + 192)
                  ? ((v130 & 0x80000000) != 0
                   ? ((v135 = -3 - v129,
                       ((*(_QWORD *)(*(_QWORD *)(a3 + 224) + 8 * ((-3 - v129) >> 6)) >> (-3 - v129)) & 1) == 0)
                    ? (_DWORD *)(v176 = v128, v134 = (_DWORD *)sub_22F1E1134(a3, v135, 0), v128 = v176)
                    : (v134 = (_DWORD *)(*(_QWORD *)(a3 + 200) + 24 * v135)))
                   : (v134 = (_DWORD *)(*(_QWORD *)(a3 + 184) + 24 * v130)),
                     v133 = *v134 & 0x7FFFFFFF)
                  : (v133 = *(_DWORD *)(a3 + 216)),
                    v133 > (v124 & 0x7FFFFFFFu)))
              {
                v136 = *(_DWORD *)(a3 + 304);
              }
              else
              {
LABEL_231:
                v137 = v128;
                v136 = sub_22F1E1EE8(a3, v124 & 0x7FFFFFFF);
                v128 = v137;
              }
              v90 = v308;
              v121 = v310;
              if (v136 == v308)
              {
                v293 = v128;
                v292 = sub_22F423CC4(a3, v125, 0);
                if (v292 >= v310)
                {
                  v138 = *(_DWORD *)(a3 + 304);
                  v139 = v138 + 1;
                  if (v138 + 1 > 1)
                  {
                    if ((v138 & 0x80000000) != 0)
                    {
                      v141 = -2 - v138;
                      v140 = (_DWORD *)(((*(_QWORD *)(*(_QWORD *)(a3 + 224) + 8 * ((-2 - v138) >> 6)) >> (-2 - v138)) & 1) != 0
                                      ? *(_QWORD *)(a3 + 200) + 24 * v141
                                      : sub_22F1E1134(a3, v141, 0));
                    }
                    else
                    {
                      v140 = (_DWORD *)(*(_QWORD *)(a3 + 184) + 24 * v138);
                    }
                    a6 = v300;
                  }
                  else
                  {
                    v140 = *(_DWORD **)(a3 + 184);
                  }
                  if ((*v140 & 0x7FFFFFFFu) <= (v125 & 0x7FFFFFFFu)
                    && (v138 == -2
                     || (v139 != *(_DWORD *)(a3 + 192)
                       ? ((v139 & 0x80000000) != 0
                        ? ((v145 = -3 - v138,
                            ((*(_QWORD *)(*(_QWORD *)(a3 + 224) + 8 * ((-3 - v138) >> 6)) >> (-3
                                                                                              - v138)) & 1) == 0)
                         ? (v144 = (_DWORD *)sub_22F1E1134(a3, v145, 0))
                         : (v144 = (_DWORD *)(*(_QWORD *)(a3 + 200) + 24 * v145)))
                        : (v144 = (_DWORD *)(*(_QWORD *)(a3 + 184) + 24 * v139)),
                          v143 = *v144 & 0x7FFFFFFF)
                       : (v143 = *(_DWORD *)(a3 + 216)),
                         a6 = v300,
                         v143 > (v125 & 0x7FFFFFFFu))))
                  {
                    v142 = *(_DWORD *)(a3 + 304);
                  }
                  else
                  {
                    v142 = sub_22F1E1EE8(a3, v125 & 0x7FFFFFFF);
                  }
                  v90 = v308;
                  v121 = v310;
                  if (v142 == v308)
                  {
                    if (v293 == v310)
                    {
                      v171 = sub_22F423C04(a3, v124, 0);
                      if (v171)
                        LODWORD(v146) = v171 - 1;
                      else
                        LODWORD(v146) = 0;
                    }
                    else
                    {
                      LODWORD(v146) = 0;
                    }
                    if (v321 >= 0)
                      v147 = SHIBYTE(v321) & 0x7F;
                    else
                      v147 = v320;
                    if (v292 == v310)
                    {
                      v172 = sub_22F423C04(a3, v125, 0);
                      if (v172)
                      {
                        v147 = v172 - 1;
                        if (*(_BYTE *)(v122 + 8))
                        {
                          v173 = sub_22F1415D0(v125, (uint64_t)&v328, (_QWORD *)a3, __src, 0);
                          v174 = HIDWORD(v328.__r_.__value_.__r.__words[0]);
                          if (v173)
                            v174 = 0;
                          v147 += v174;
                        }
                      }
                      else if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      {
                        v147 = SHIBYTE(__b.__r_.__value_.__r.__words[2]) & 0x7F;
                      }
                      else
                      {
                        v147 = __b.__r_.__value_.__r.__words[1];
                      }
                    }
                    a6 = v300;
                    v90 = v308;
                    v121 = v310;
                    if (v146 <= v147)
                    {
                      if (*(_BYTE *)(v122 + 8))
                      {
                        v148 = HIBYTE(v321) & 0x7F;
                        if (v321 < 0)
                          v148 = v320;
                        if (v148 > v146)
                        {
                          v149 = v146;
                          v150 = (unsigned __int8 *)__s;
                          if (v321 >= 0)
                            v150 = (unsigned __int8 *)&__s;
                          do
                          {
                            v151 = v150[v149];
                            if (v151 != 32 && v151 != 9)
                              break;
                            v146 = (int)v146;
                            do
                              v153 = *((_DWORD *)v322 + ++v146);
                            while (v153 == -1);
                            v149 = v146;
                          }
                          while (v148 > v146);
                        }
                        if (v148 < v147)
                          v147 = v148;
                        if (v147)
                        {
                          v154 = (unsigned __int8 *)__s;
                          if (v321 >= 0)
                            v154 = (unsigned __int8 *)&__s;
                          do
                          {
                            v155 = v154[v147 - 1];
                            if (v155 != 32 && v155 != 9)
                              break;
                            v157 = (int *)((char *)v322 + 4 * (int)v147 - 4);
                            do
                            {
                              v158 = *v157--;
                              --v147;
                            }
                            while (v158 == -1);
                          }
                          while (v147);
                        }
                        if (v146 >= v147)
                          LODWORD(v146) = v147;
                      }
                      v159 = (unsigned int *)((char *)v322 + 4 * (int)v146);
                      do
                      {
                        v161 = *v159--;
                        v160 = v161;
                      }
                      while (v161 == -1);
                      v162 = (unsigned int *)((char *)v322 + 4 * (int)v147);
                      do
                      {
                        v164 = *v162--;
                        v163 = v164;
                      }
                      while (v164 == -1);
                      v165 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
                      v166 = *((_BYTE *)&__b.__r_.__value_.__s + 23) & 0x7F;
                      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                        v166 = __b.__r_.__value_.__l.__size_;
                      if (v166 < v163)
                      {
                        std::string::resize(&__b, v163, 32);
                        v165 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
                      }
                      v167 = v165 < 0;
                      v168 = &__b;
                      if (v167)
                        v168 = (std::string *)__b.__r_.__value_.__r.__words[0];
                      v169 = (char *)v168 + v160;
                      v170 = v163 - v160;
                      a6 = v300;
                      v90 = v308;
                      v121 = v310;
                      if (v170 >= 1)
                        memset(v169, 126, v170);
                    }
                  }
                }
              }
            }
          }
          v122 += 12;
        }
        while (v122 != v123);
      }
      if (v307 == v121)
      {
        v177 = v305 - 1;
        v53 = v302;
        do
          v178 = *((unsigned int *)v322 + v177--);
        while ((_DWORD)v178 == -1);
        v179 = *((_BYTE *)&__b.__r_.__value_.__s + 23) & 0x7F;
        if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v179 = __b.__r_.__value_.__l.__size_;
        if (v179 < v178 + 1)
          std::string::resize(&__b, v178 + 1, 32);
        v180 = &__b;
        if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v180 = (std::string *)__b.__r_.__value_.__r.__words[0];
        v305 = v178;
        v180->__r_.__value_.__s.__data_[v178] = 94;
        v121 = v310;
      }
      else
      {
        v53 = v302;
      }
      v181 = *(_QWORD *)(a1 + 16);
      memset(&__str, 0, sizeof(__str));
      if (v53 && (*(_BYTE *)(v181 + 5) & 4) != 0)
      {
        v294 = v181;
        v182 = 0;
        v183 = a6;
        v184 = v304;
        while (1)
        {
          if (*(char *)(v183 + 47) < 0)
          {
            if (*(_QWORD *)(v183 + 32))
            {
LABEL_335:
              v185 = sub_22E74B2B0(a3, *(_DWORD *)v183);
              if (v90 == (_DWORD)v185)
              {
                v186 = HIDWORD(v185);
                v187 = v185;
                if (sub_22F1E33FC(a3, v185, SHIDWORD(v185), 0) == v121)
                {
                  v188 = *(_BYTE *)(v183 + 47);
                  v189 = v188 < 0;
                  v190 = *(_QWORD *)(v183 + 24);
                  if (v188 >= 0)
                    v190 = v183 + 24;
                  v191 = v188 & 0x7F;
                  if (v189)
                    v191 = *(_QWORD *)(v183 + 32);
                  v328.__r_.__value_.__r.__words[0] = v190;
                  v328.__r_.__value_.__l.__size_ = v191;
                  if (llvm::StringRef::find_first_of() == -1)
                  {
                    __srca = (void *)(v183 + 24);
                    v192 = sub_22F1E2E38(a3, v187, v186, 0) - 1;
                    do
                      v193 = *((_DWORD *)v322 + v192--);
                    while (v193 == -1);
                    if (v193 < v182)
                      v194 = v182 + 1;
                    else
                      v194 = v193;
                    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v195 = *((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x7F;
                    else
                      v195 = __str.__r_.__value_.__l.__size_;
                    v196 = *(unsigned __int8 *)(v183 + 47);
                    if (*(char *)(v183 + 47) < 0)
                      v197 = *(_QWORD *)(v183 + 32);
                    else
                      LODWORD(v197) = *(unsigned __int8 *)(v183 + 47);
                    v198 = v195 + v194 - v182 + v197;
                    if (v198 > v195)
                    {
                      std::string::resize(&__str, v198, 32);
                      v196 = *(unsigned __int8 *)(v183 + 47);
                    }
                    v199 = v196;
                    if ((v196 & 0x80) != 0)
                    {
                      v199 = *(_QWORD *)(v183 + 32);
                      __srca = *(void **)(v183 + 24);
                    }
                    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
                    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      p_str = &__str;
                    v201 = *((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x7F;
                    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                      v201 = __str.__r_.__value_.__l.__size_;
                    v202 = v196;
                    if ((char)v196 < 0)
                      v202 = *(_QWORD *)(v183 + 32);
                    if (v199)
                    {
                      memmove((char *)p_str + v201 - v202, __srca, v199);
                      LOBYTE(v196) = *(_BYTE *)(v183 + 47);
                    }
                    v203 = (v196 & 0x80u) != 0;
                    if ((v196 & 0x80u) == 0)
                      v204 = v183 + 24;
                    else
                      v204 = *(_QWORD *)(v183 + 24);
                    v205 = v196 & 0x7F;
                    if (v203)
                      v206 = *(_QWORD *)(v183 + 32);
                    else
                      v206 = v205;
                    v182 = MEMORY[0x23489E88C](v204, v206) + v194;
                    v121 = v310;
                  }
                  v184 = v304;
                }
              }
            }
          }
          else if (*(_BYTE *)(v183 + 47))
          {
            goto LABEL_335;
          }
          v183 += 56;
          if (v183 == v184)
          {
            v207 = __str.__r_.__value_.__l.__size_;
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v207 = *((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x7F;
            v53 = v302;
            if (v207)
            {
              v208 = *(_DWORD *)(v294 + 32);
              v209 = v207 - 1;
              do
              {
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v210 = &__str;
                else
                  v210 = (std::string *)__str.__r_.__value_.__r.__words[0];
                if (v210->__r_.__value_.__s.__data_[v209] == 9)
                {
                  v317.__r_.__value_.__r.__words[0] = v209;
                  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v211 = &__str;
                  else
                    v211 = (std::string *)__str.__r_.__value_.__r.__words[0];
                  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v212 = *((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x7F;
                  else
                    v212 = __str.__r_.__value_.__l.__size_;
                  sub_22E74AC6C((uint64_t)&v328, (uint64_t)v211, (const unsigned __int8 *)v212, (uint64_t *)&v317, v208);
                  v213 = v328.__r_.__value_.__l.__size_;
                  if (v328.__r_.__value_.__l.__size_ + 1 > v328.__r_.__value_.__r.__words[2])
                  {
                    llvm::SmallVectorBase<unsigned long long>::grow_pod();
                    v213 = v328.__r_.__value_.__l.__size_;
                  }
                  *(_BYTE *)(v328.__r_.__value_.__r.__words[0] + v213) = 0;
                  std::string::replace(&__str, v209, 1uLL, v328.__r_.__value_.__l.__data_);
                  if (v328.__r_.__value_.__l.__data_ != (std::string::pointer)v311)
                    free(v328.__r_.__value_.__l.__data_);
                }
                --v209;
              }
              while (v209 != -1);
            }
            break;
          }
        }
      }
      v214 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 36);
      if (v214)
      {
        if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v215 = SHIBYTE(__b.__r_.__value_.__r.__words[2]) & 0x7F;
        else
          v215 = __b.__r_.__value_.__r.__words[1];
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v216 = &__str;
        else
          v216 = (std::string *)__str.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v217 = *((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x7F;
        else
          v217 = __str.__r_.__value_.__l.__size_;
        v218 = MEMORY[0x23489E88C](v216, v217);
        v219 = v322;
        v220 = *((_DWORD *)v322 + v323 - 1);
        if (v218 <= v215)
          v221 = v215;
        else
          v221 = v218;
        v121 = v310;
        if (v220 > v221)
          v221 = *((_DWORD *)v322 + v323 - 1);
        if (v221 > v214)
        {
          v222 = *((_BYTE *)&__b.__r_.__value_.__s + 23) & 0x7F;
          if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v222 = __b.__r_.__value_.__r.__words[1];
          if (v222)
          {
            v223 = 0;
            if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v224 = &__b;
            else
              v224 = (std::string *)__b.__r_.__value_.__r.__words[0];
            while ((word_22F4ADB24[v224->__r_.__value_.__s.__data_[v223]] & 7) != 0)
            {
              if (v222 == ++v223)
              {
                LODWORD(v223) = v222;
                break;
              }
            }
          }
          else
          {
            LODWORD(v223) = 0;
          }
          if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v225 = &__b;
          else
            v225 = (std::string *)__b.__r_.__value_.__r.__words[0];
          while ((_DWORD)v223 != v222)
          {
            if ((word_22F4ADB24[v225->__r_.__value_.__s.__data_[--v222]] & 7) == 0)
            {
              v226 = v222 + 1;
              goto LABEL_426;
            }
          }
          v226 = v223;
LABEL_426:
          v227 = *((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x7F;
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v227 = __str.__r_.__value_.__l.__size_;
          if (v227)
          {
            v228 = (std::string *)__str.__r_.__value_.__r.__words[0];
            if ((_DWORD)v227)
            {
              v229 = 0;
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v230 = &__str;
              else
                v230 = (std::string *)__str.__r_.__value_.__r.__words[0];
              while ((word_22F4ADB24[v230->__r_.__value_.__s.__data_[v229]] & 7) != 0)
              {
                if (v227 == ++v229)
                {
                  LODWORD(v229) = v227;
                  break;
                }
              }
            }
            else
            {
              LODWORD(v229) = 0;
            }
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v228 = &__str;
            while ((_DWORD)v229 != (_DWORD)v227)
            {
              LODWORD(v227) = v227 - 1;
              if ((word_22F4ADB24[v228->__r_.__value_.__s.__data_[v227]] & 7) == 0)
              {
                v231 = v227 + 1;
                goto LABEL_443;
              }
            }
            v231 = v229;
LABEL_443:
            std::string::basic_string(&v328, &__str, 0, v231, (std::allocator<char> *)&v317);
            if ((v328.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v232 = &v328;
            else
              v232 = (std::string *)v328.__r_.__value_.__r.__words[0];
            if ((v328.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v233 = *((_BYTE *)&v328.__r_.__value_.__s + 23) & 0x7F;
            else
              v233 = v328.__r_.__value_.__l.__size_;
            v234 = MEMORY[0x23489E88C](v232, v233);
            if (SHIBYTE(v328.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v328.__r_.__value_.__l.__data_);
            if (v223 >= v229)
              LODWORD(v223) = v229;
            if (v234 > v226)
              v226 = v234;
            v219 = v322;
            v220 = *((_DWORD *)v322 + v323 - 1);
          }
          if ((int)v226 < (int)v220)
          {
            v235 = (int *)((char *)v325 + 4 * (int)v226);
            while (1)
            {
              v236 = *v235++;
              if (v236 != -1)
                break;
              if (v220 == ++v226)
              {
                v226 = v220;
                break;
              }
            }
          }
          if (v220 >= v223)
            v237 = v223;
          else
            v237 = v220;
          v238 = *((int *)v325 + v237);
          if (v220 >= v226)
            v220 = v226;
          v239 = *((int *)v325 + (int)v220);
          v240 = v219[v238] - v219[v239] + v226 - v223;
          v241 = v240 + 8;
          if (v240 + 8 >= v214)
            v241 = 0;
          v242 = v214 - v241;
          v243 = *((_BYTE *)&v314.__r_.__value_.__s + 23) & 0x7F;
          if ((v314.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v243 = v314.__r_.__value_.__l.__size_;
          v244 = &v314;
          if ((v314.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v244 = (std::string *)v314.__r_.__value_.__r.__words[0];
          v245 = (char *)(v219 - 1);
          v246 = (char *)(v219 + 1);
          v247 = v238;
          do
          {
            v248 = (int)v239;
            while (v247)
            {
              v249 = v247;
              v250 = 0;
              do
                v251 = *(_DWORD *)&v245[4 * (int)v247 + 4 * v250--];
              while (v251 == -1);
              LODWORD(v250) = v250 + v247;
              while ((_DWORD)v250)
              {
                if ((word_22F4ADB24[v244->__r_.__value_.__s.__data_[v250]] & 7) == 0)
                  break;
                v252 = &v245[4 * (int)v250];
                do
                {
                  v253 = *(_DWORD *)v252;
                  v252 -= 4;
                  LODWORD(v250) = v250 - 1;
                }
                while (v253 == -1);
              }
              do
              {
                v247 = v250;
                if (!(_DWORD)v250)
                  break;
                v250 = (int)v250;
                do
                  v254 = *(_DWORD *)&v245[4 * v250--];
                while (v254 == -1);
              }
              while ((word_22F4ADB24[v244->__r_.__value_.__s.__data_[v250]] & 7) == 0);
              v255 = v219[(int)v239] - v219[v247];
              v256 = v255 <= v242;
              if (v243 > v239)
              {
                if (v255 > v242)
                  v247 = v249;
                goto LABEL_493;
              }
              if (v255 > v242)
              {
                v247 = v249;
                goto LABEL_511;
              }
            }
            if (v243 <= v239)
            {
              v247 = 0;
              break;
            }
            v256 = 0;
            v247 = 0;
            v248 = (int)v239;
LABEL_493:
            v257 = 0;
            do
              v258 = *(_DWORD *)&v246[4 * v248 + 4 * v257++];
            while (v258 == -1);
            LODWORD(v257) = v248 + v257;
            v259 = v257;
            if (v243 > v257)
            {
              while ((word_22F4ADB24[v244->__r_.__value_.__s.__data_[v259]] & 7) != 0)
              {
                v257 = (int)v257;
                do
                  v260 = *(_DWORD *)&v246[4 * v257++];
                while (v260 == -1);
                v259 = v257;
                if (v243 <= v257)
                  goto LABEL_503;
              }
              v259 = v257;
            }
LABEL_503:
            if (v243 > v259)
            {
              do
              {
                if ((word_22F4ADB24[v244->__r_.__value_.__s.__data_[v259]] & 7) == 0)
                  break;
                v257 = (int)v257;
                do
                  v261 = *(_DWORD *)&v246[4 * v257++];
                while (v261 == -1);
                v259 = v257;
              }
              while (v243 > v257);
            }
            if (v219[(int)v257] - v219[v247] <= v242)
            {
              LODWORD(v239) = v257;
              v256 = 1;
            }
          }
          while (v256);
LABEL_511:
          v262 = v219[v247];
          v263 = v219[(int)v239];
          if ((v219[(int)v243] - v263) >= 4)
            std::string::replace(&v314, v239, 0xFFFFFFFFFFFFFFFFLL, "...");
          v264 = v263 + v240 > v214 && v262 >= 6;
          v121 = v310;
          if (v264)
          {
            std::string::replace(&v314, 0, v247, "  ...");
            std::string::replace(&__b, 0, v262, "     ");
            v265 = *((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x7F;
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v265 = __str.__r_.__value_.__l.__size_;
            if (v265)
              std::string::replace(&__str, 0, v262, "     ");
          }
        }
      }
      v80 = v298;
      v79 = v299;
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + 5) & 8) != 0)
      {
        sub_22E74ABDC(32, (const void **)&v314.__r_.__value_.__l.__data_, (uint64_t)&v328);
        if (SHIBYTE(v314.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v314.__r_.__value_.__l.__data_);
        v314 = v328;
        sub_22E74ABDC(32, (const void **)&__b.__r_.__value_.__l.__data_, (uint64_t)&v328);
        if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__b.__r_.__value_.__l.__data_);
        __b = v328;
      }
      while (1)
      {
        v266 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
        v267 = __b.__r_.__value_.__l.__size_;
        v268 = *((_BYTE *)&__b.__r_.__value_.__s + 23) & 0x7F;
        if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v268 = __b.__r_.__value_.__l.__size_;
        if (!v268)
          break;
        v269 = __b.__r_.__value_.__r.__words[0];
        if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v269 = (std::string::size_type)&__b;
        if (*(_BYTE *)(v268 + v269 - 1) != 32)
          break;
        std::string::erase(&__b, ~v269 + v269 + v268, 1uLL);
      }
      if ((v314.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v270 = &v314;
      else
        v270 = (std::string *)v314.__r_.__value_.__r.__words[0];
      if ((v314.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v271 = *((_BYTE *)&v314.__r_.__value_.__s + 23) & 0x7F;
      else
        v271 = v314.__r_.__value_.__l.__size_;
      if (v271)
      {
        v272 = 0;
        v318 = 0;
        memset(&v317, 0, sizeof(v317));
        do
        {
          sub_22E74AC6C((uint64_t)&v328, (uint64_t)v270, (const unsigned __int8 *)v271, (uint64_t *)&v318, *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32));
          v273 = v330;
          v274 = v330 == 0;
          if (v330 == v272 && (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 4) & 0x40000) != 0)
          {
            if (v272)
              (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 40))(*(_QWORD *)(a1 + 40));
            if ((v317.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v276 = &v317;
            else
              v276 = (std::string *)v317.__r_.__value_.__r.__words[0];
            llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 40), (const char *)v276);
            if (SHIBYTE(v317.__r_.__value_.__r.__words[2]) < 0)
            {
              *v317.__r_.__value_.__l.__data_ = 0;
              v317.__r_.__value_.__l.__size_ = 0;
            }
            else
            {
              v317.__r_.__value_.__s.__data_[0] = 0;
              *((_BYTE *)&v317.__r_.__value_.__s + 23) = 0;
            }
            if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + 6) & 4) != 0)
              (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40));
          }
          std::string::append(&v317, v328.__r_.__value_.__l.__data_, v328.__r_.__value_.__l.__size_);
          if (v328.__r_.__value_.__l.__data_ != (std::string::pointer)v311)
            free(v328.__r_.__value_.__l.__data_);
          v272 = v274;
        }
        while (v318 < v271);
        if (v273)
        {
          if ((v317.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v277 = &v317;
          else
            v277 = (std::string *)v317.__r_.__value_.__r.__words[0];
          llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 40), (const char *)v277);
          a6 = v300;
          v121 = v310;
        }
        else
        {
          a6 = v300;
          if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + 6) & 4) != 0)
            (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 40))(*(_QWORD *)(a1 + 40));
          if ((v317.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v278 = &v317;
          else
            v278 = (std::string *)v317.__r_.__value_.__r.__words[0];
          llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 40), (const char *)v278);
          v121 = v310;
          if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + 6) & 4) != 0)
            (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40));
        }
        v279 = *(llvm::raw_ostream **)(a1 + 40);
        v280 = (_BYTE *)*((_QWORD *)v279 + 4);
        if ((unint64_t)v280 >= *((_QWORD *)v279 + 3))
        {
          llvm::raw_ostream::write(v279);
        }
        else
        {
          *((_QWORD *)v279 + 4) = v280 + 1;
          *v280 = 10;
        }
        if (SHIBYTE(v317.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v317.__r_.__value_.__l.__data_);
        v266 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
        v267 = __b.__r_.__value_.__l.__size_;
      }
      if (v266 >= 0)
        v281 = v266 & 0x7F;
      else
        v281 = v267;
      if (v281)
      {
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + 6) & 4) != 0)
        {
          (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), 2, 1, 0);
          v266 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
        }
        if (v266 >= 0)
          v282 = &__b;
        else
          v282 = (std::string *)__b.__r_.__value_.__r.__words[0];
        v283 = (llvm::raw_ostream *)llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 40), (const char *)v282);
        v284 = (_BYTE *)*((_QWORD *)v283 + 4);
        if ((unint64_t)v284 >= *((_QWORD *)v283 + 3))
        {
          llvm::raw_ostream::write(v283);
        }
        else
        {
          *((_QWORD *)v283 + 4) = v284 + 1;
          *v284 = 10;
        }
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + 6) & 4) != 0)
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40));
      }
      v285 = *((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x7F;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v285 = __str.__r_.__value_.__l.__size_;
      if (v285)
      {
        v286 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4);
        if ((v286 & 0x40000) != 0)
        {
          (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), 2, 0, 0);
          v286 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4);
        }
        if ((v286 & 0x800) != 0)
        {
          v287 = *(llvm::raw_ostream **)(a1 + 40);
          v288 = (_BYTE *)*((_QWORD *)v287 + 4);
          if ((unint64_t)v288 >= *((_QWORD *)v287 + 3))
          {
            llvm::raw_ostream::write(v287);
          }
          else
          {
            *((_QWORD *)v287 + 4) = v288 + 1;
            *v288 = 32;
          }
        }
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v289 = &__str;
        else
          v289 = (std::string *)__str.__r_.__value_.__r.__words[0];
        v290 = (llvm::raw_ostream *)llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 40), (const char *)v289);
        v291 = (_BYTE *)*((_QWORD *)v290 + 4);
        if ((unint64_t)v291 >= *((_QWORD *)v290 + 3))
        {
          llvm::raw_ostream::write(v290);
        }
        else
        {
          *((_QWORD *)v290 + 4) = v291 + 1;
          *v291 = 10;
        }
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + 6) & 4) != 0)
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40));
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__b.__r_.__value_.__l.__data_);
      if (v325 != v327)
        free(v325);
      if (v322 != v324)
        free(v322);
      if (SHIBYTE(v321) < 0)
        operator delete(__s);
      if (SHIBYTE(v314.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v314.__r_.__value_.__l.__data_);
      v12 = v121 == v301;
      v81 = v121 + 1;
      if (v12)
        goto LABEL_87;
    }
    v99 = (size & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((size | 7) != 0x17)
      v99 = size | 7;
    v100 = v99 + 1;
    p_s = (char *)operator new(v99 + 1);
    v320 = size;
    v321 = v100 | 0x8000000000000000;
    __s = p_s;
    v98 = v324;
LABEL_167:
    memmove(p_s, v94, size);
    goto LABEL_168;
  }
  v53 = v302;
LABEL_87:
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + 5) & 0x10) != 0 && v53)
  {
    v54 = (_DWORD *)(a6 + 56 * v53);
    v55 = (_DWORD *)a6;
    while (*v55 && (*v55 & 0x80000000) == 0 && (int)v55[1] >= 1)
    {
      v55 += 14;
      if (v55 == v54)
      {
        do
        {
          v70 = *(_DWORD *)a6;
          v71 = *(_DWORD *)(a6 + 4);
          v72 = sub_22E677168(a3, *(_DWORD *)a6);
          v73 = sub_22E677168(a3, v71);
          v74 = v73;
          v75 = HIDWORD(v73);
          v76 = a6;
          if (*(_BYTE *)(a6 + 8))
          {
            v77 = sub_22F1415D0(v71, (uint64_t)&__s, (_QWORD *)a3, *(_DWORD **)(a1 + 8), 0);
            v78 = HIDWORD(__s);
            if (v77)
              v78 = 0;
            LODWORD(v75) = v78 + v75;
          }
          sub_22F1E2F68(a3, v70, 1, (uint64_t)&__s);
          if (!__s)
            break;
          v56 = *(llvm::raw_ostream **)(a1 + 40);
          v57 = (_QWORD *)*((_QWORD *)v56 + 4);
          if (*((_QWORD *)v56 + 3) - (_QWORD)v57 > 7uLL)
          {
            *v57 = 0x223A74692D786966;
            *((_QWORD *)v56 + 4) += 8;
          }
          else
          {
            llvm::raw_ostream::write(v56, "fix-it:\"");
          }
          if (__s)
            strlen(__s);
          llvm::raw_ostream::write_escaped();
          v58 = *(_QWORD *)(a1 + 40);
          v59 = *(_QWORD *)(v58 + 32);
          if ((unint64_t)(*(_QWORD *)(v58 + 24) - v59) > 2)
          {
            *(_BYTE *)(v59 + 2) = 123;
            *(_WORD *)v59 = 14882;
            *(_QWORD *)(v58 + 32) += 3;
          }
          else
          {
            llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 40), "\":{");
          }
          sub_22F1E33FC(a3, v72, SHIDWORD(v72), 0);
          v60 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
          v61 = (_BYTE *)*((_QWORD *)v60 + 4);
          if ((unint64_t)v61 >= *((_QWORD *)v60 + 3))
          {
            llvm::raw_ostream::write(v60);
          }
          else
          {
            *((_QWORD *)v60 + 4) = v61 + 1;
            *v61 = 58;
          }
          sub_22F1E2E38(a3, v72, HIDWORD(v72), 0);
          v62 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
          v63 = (_BYTE *)*((_QWORD *)v62 + 4);
          if ((unint64_t)v63 >= *((_QWORD *)v62 + 3))
          {
            llvm::raw_ostream::write(v62);
          }
          else
          {
            *((_QWORD *)v62 + 4) = v63 + 1;
            *v63 = 45;
          }
          sub_22F1E33FC(a3, v74, v75, 0);
          v64 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
          v65 = (_BYTE *)*((_QWORD *)v64 + 4);
          if ((unint64_t)v65 >= *((_QWORD *)v64 + 3))
          {
            llvm::raw_ostream::write(v64);
          }
          else
          {
            *((_QWORD *)v64 + 4) = v65 + 1;
            *v65 = 58;
          }
          sub_22F1E2E38(a3, v74, v75, 0);
          v66 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
          v67 = *((_QWORD *)v66 + 4);
          if ((unint64_t)(*((_QWORD *)v66 + 3) - v67) > 2)
          {
            *(_BYTE *)(v67 + 2) = 34;
            *(_WORD *)v67 = 14973;
            *((_QWORD *)v66 + 4) += 3;
          }
          else
          {
            llvm::raw_ostream::write(v66, "}:\"");
          }
          llvm::raw_ostream::write_escaped();
          v68 = *(llvm::raw_ostream **)(a1 + 40);
          v69 = (_WORD *)*((_QWORD *)v68 + 4);
          if (*((_QWORD *)v68 + 3) - (_QWORD)v69 > 1uLL)
          {
            *v69 = 2594;
            *((_QWORD *)v68 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v68, "\"\n");
          }
          a6 = v76 + 56;
        }
        while ((_DWORD *)(v76 + 56) != v54);
        return;
      }
    }
  }
}

uint64_t sub_22E74ABDC@<X0>(char a1@<W0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  char v6;
  int v7;
  size_t v8;
  size_t v9;
  uint64_t result;
  _BYTE *v11;
  void *v12;
  const void *v13;

  v6 = *((_BYTE *)a2 + 23);
  v7 = v6;
  v8 = v6 & 0x7F;
  if (v7 >= 0)
    v9 = v8;
  else
    v9 = (size_t)a2[1];
  result = sub_22E3B8BF4(a3, v9 + 1);
  if (*(char *)(result + 23) >= 0)
    v11 = (_BYTE *)result;
  else
    v11 = *(_BYTE **)result;
  *v11 = a1;
  v12 = v11 + 1;
  if (v9)
  {
    if (*((char *)a2 + 23) >= 0)
      v13 = a2;
    else
      v13 = *a2;
    result = (uint64_t)memmove(v12, v13, v9);
  }
  *((_BYTE *)v12 + v9) = 0;
  return result;
}

void sub_22E74AC6C(uint64_t a1, uint64_t a2, const unsigned __int8 *a3, uint64_t *a4, unsigned int a5)
{
  uint64_t v8;
  llvm *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int NumBytesForUTF8;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  _DWORD *v19;
  uint64_t v20;
  unint64_t v21;
  llvm::sys::locale *v22;
  char v23;
  void *v24;
  __int128 v25;
  _DWORD v26[4];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v8 = *a4;
  v9 = (llvm *)(a2 + *a4);
  if (*(_BYTE *)v9 == 9)
  {
    LODWORD(v10) = 0;
    if (v8)
    {
      v11 = *a4;
      while (*(_BYTE *)(a2 - 1 + v11) != 9)
      {
        LODWORD(v10) = v10 + 1;
        if (!--v11)
        {
          v10 = *a4;
          break;
        }
      }
    }
    *a4 = v8 + 1;
    v24 = v26;
    v25 = xmmword_22F44E350;
    sub_22E47EFD8((size_t *)&v24, a5 + v10 / a5 * a5 - (_DWORD)v10, 32);
    *(_QWORD *)a1 = a1 + 24;
    *(_OWORD *)(a1 + 8) = xmmword_22F44E350;
    if ((_QWORD)v25)
      sub_22E3B3B4C(a1, (uint64_t)&v24);
    *(_BYTE *)(a1 + 40) = 1;
    goto LABEL_24;
  }
  v22 = (llvm::sys::locale *)(a2 + *a4);
  if (!llvm::isLegalUTF8Sequence(v9, &a3[a2], a3))
  {
    v24 = v26;
    v26[0] = 1045977148;
    v25 = xmmword_22F45E290;
    v20 = *a4;
    v21 = *(unsigned __int8 *)(a2 + *a4);
    BYTE1(v26[0]) = a0123456789abcd_2[v21 >> 4];
    BYTE2(v26[0]) = a0123456789abcd_2[v21 & 0xF];
    *a4 = v20 + 1;
    *(_QWORD *)a1 = a1 + 24;
    *(_OWORD *)(a1 + 8) = xmmword_22F44E350;
    sub_22E3B3B4C(a1, (uint64_t)&v24);
    v19 = v24;
    *(_BYTE *)(a1 + 40) = 0;
    goto LABEL_25;
  }
  NumBytesForUTF8 = llvm::getNumBytesForUTF8((llvm *)*(unsigned __int8 *)(a2 + *a4));
  llvm::ConvertUTF8toUTF32();
  *a4 += v22 - v9;
  if ((llvm::sys::locale::isPrint(0) & 1) == 0)
  {
    v24 = v26;
    v26[0] = 1043027260;
    v25 = xmmword_22F45E290;
    do
    {
      v23 = 48;
      sub_22F2AF9DC((uint64_t *)&v24, (uint64_t)v24 + 3, &v23);
    }
    while ((unint64_t)v25 < 8);
    *(_QWORD *)a1 = a1 + 24;
    *(_OWORD *)(a1 + 8) = xmmword_22F44E350;
    sub_22E3B3B4C(a1, (uint64_t)&v24);
    *(_BYTE *)(a1 + 40) = 0;
LABEL_24:
    v19 = v24;
LABEL_25:
    if (v19 == v26)
      return;
    goto LABEL_26;
  }
  v24 = v26;
  v13 = xmmword_22F44E350;
  v25 = xmmword_22F44E350;
  if (NumBytesForUTF8 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v13 = xmmword_22F44E350;
    v14 = v25;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    if (!NumBytesForUTF8)
      goto LABEL_17;
  }
  v16 = (char *)v24 + v14;
  v17 = NumBytesForUTF8;
  do
  {
    v18 = *(_BYTE *)v9;
    v9 = (llvm *)((char *)v9 + 1);
    *v16++ = v18;
    --v17;
  }
  while (v17);
  v15 = v25;
LABEL_17:
  *(_QWORD *)a1 = a1 + 24;
  *(_OWORD *)(a1 + 8) = v13;
  *(_QWORD *)&v25 = v15 + NumBytesForUTF8;
  if ((_QWORD)v25)
    sub_22E3B2DB8(a1, (uint64_t)&v24);
  *(_BYTE *)(a1 + 40) = 1;
  v19 = v24;
  if (v24 != v26)
LABEL_26:
    free(v19);
}

uint64_t sub_22E74AFE8(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  int v14;
  char v15;
  _BYTE *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  int v19;
  char v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  unsigned __int8 *v28;
  int v29;
  _BYTE *v30;
  uint64_t v31;
  _BYTE v32[16];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v6 = a1 + 1;
  if (a3 == v6)
    return v6;
  v14 = *(char *)(a2 + a1);
  v15 = 39;
  if (v14 > 90)
  {
    if (v14 == 91)
    {
      v15 = 93;
    }
    else if (v14 != 96)
    {
      if (v14 != 123)
        goto LABEL_50;
      v15 = 125;
    }
  }
  else
  {
    if (v14 != 34)
    {
      if (v14 == 39)
        goto LABEL_14;
      if (v14 == 40)
      {
        v15 = 41;
        goto LABEL_14;
      }
LABEL_50:
      if (v6 < a4)
      {
        v28 = (unsigned __int8 *)(a2 + v6);
        while (1)
        {
          v29 = *v28++;
          if ((word_22F4ADB24[v29] & 7) != 0)
            break;
          v6 = (v6 + 1);
          if ((_DWORD)a4 == (_DWORD)v6)
            return a4;
        }
      }
      return v6;
    }
    v15 = 34;
  }
LABEL_14:
  v16 = v32;
  v32[0] = v15;
  v31 = 1;
  v7 = a1 + 1;
  if (v6 < a4)
  {
    v17 = (unsigned __int8 *)(a2 + v6);
    v18 = 1;
    v7 = a1 + 1;
    while (1)
    {
      if (!v18)
        goto LABEL_36;
      v19 = *v17;
      if (v19 == v32[v18 - 1])
        break;
      v20 = 39;
      if ((char)v19 > 90)
      {
        switch((char)v19)
        {
          case '[':
            v20 = 93;
LABEL_30:
            if ((unint64_t)(v18 + 1) > 0x10)
            {
              v30 = v16;
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
              v16 = v30;
              v18 = v31;
            }
            v32[v18] = v20;
            v18 = v31 + 1;
LABEL_33:
            v31 = v18;
            break;
            goto LABEL_30;
          case '{':
            v20 = 125;
            goto LABEL_30;
        }
      }
      else
      {
        switch((char)v19)
        {
          case '"':
            v20 = 34;
            goto LABEL_30;
          case '\'':
            goto LABEL_30;
          case '(':
            v20 = 41;
            goto LABEL_30;
        }
      }
      v7 = (v7 + 1);
      ++v17;
      if ((_DWORD)a4 == (_DWORD)v7)
      {
LABEL_40:
        v7 = a4;
        goto LABEL_41;
      }
    }
    --v18;
    goto LABEL_33;
  }
LABEL_36:
  if (v7 < a4)
  {
    v21 = (unsigned __int8 *)(a2 + v7);
    while (1)
    {
      v22 = *v21++;
      if ((word_22F4ADB24[v22] & 7) != 0)
        break;
      v7 = (v7 + 1);
      if ((_DWORD)a4 == (_DWORD)v7)
        goto LABEL_40;
    }
  }
LABEL_41:
  if (v7 - a1 >= a6 / 3 && v7 - a1 + a5 > a6)
  {
    v24 = v6;
    v25 = v16;
    v26 = sub_22E74AFE8(v24, a2, a3, a4, (a5 + 1), a6);
    v16 = v25;
    v7 = v26;
  }
  if (v32 != v16)
    free(v32);
  return v7;
}

unint64_t sub_22E74B2B0(uint64_t a1, int a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  _DWORD *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  _DWORD *v11;
  unsigned int v12;
  unint64_t result;
  BOOL v14;
  _DWORD *v15;
  unsigned int v16;
  char v17;

  v4 = a2 & 0x7FFFFFFF;
  v5 = *(_DWORD *)(a1 + 304);
  v6 = v5 + 1;
  if (v5 + 1 > 1)
  {
    if ((v5 & 0x80000000) != 0)
    {
      v8 = -2 - v5;
      if (((*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * ((-2 - v5) >> 6)) >> (-2 - v5)) & 1) != 0)
        v7 = (_DWORD *)(*(_QWORD *)(a1 + 200) + 24 * v8);
      else
        v7 = (_DWORD *)sub_22F1E1134(a1, v8, 0);
    }
    else
    {
      v7 = (_DWORD *)(*(_QWORD *)(a1 + 184) + 24 * v5);
    }
  }
  else
  {
    v7 = *(_DWORD **)(a1 + 184);
  }
  if ((*v7 & 0x7FFFFFFFu) <= v4
    && (v5 == -2
     || (v6 != *(_DWORD *)(a1 + 192)
       ? ((v6 & 0x80000000) != 0
        ? ((v12 = -3 - v5,
            ((*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * ((-3 - v5) >> 6)) >> (-3 - v5)) & 1) == 0)
         ? (v11 = (_DWORD *)sub_22F1E1134(a1, v12, 0))
         : (v11 = (_DWORD *)(*(_QWORD *)(a1 + 200) + 24 * v12)))
        : (v11 = (_DWORD *)(*(_QWORD *)(a1 + 184) + 24 * v6)),
          v10 = *v11 & 0x7FFFFFFF)
       : (v10 = *(_DWORD *)(a1 + 216)),
         v10 > v4)))
  {
    v9 = *(_DWORD *)(a1 + 304);
  }
  else
  {
    v9 = sub_22F1E1EE8(a1, v4);
  }
  v17 = 0;
  if (v9 + 1 <= 1)
    return 0;
  if ((v9 & 0x80000000) != 0)
  {
    v16 = -2 - v9;
    if (((*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * ((-2 - v9) >> 6)) >> (-2 - v9)) & 1) != 0)
    {
      v14 = 0;
      v15 = (_DWORD *)(*(_QWORD *)(a1 + 200) + 24 * v16);
    }
    else
    {
      v15 = (_DWORD *)sub_22F1E1134(a1, v16, &v17);
      v14 = v17 != 0;
    }
  }
  else
  {
    v14 = 0;
    v15 = (_DWORD *)(*(_QWORD *)(a1 + 184) + 24 * v9);
  }
  result = 0;
  if (!v14 && v15)
  {
    if (a2 < 0)
      return sub_22F1E263C((_QWORD *)a1, v15);
    else
      return v9 | ((unint64_t)(v4 - (*v15 & 0x7FFFFFFF)) << 32);
  }
  return result;
}

void sub_22E74B49C(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  size_t v18;
  uint64_t v19;
  void *v20;
  __int128 *p_dst;
  size_t v22;
  size_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  int v33;
  __int128 v34;
  int64x2_t v35;
  _BOOL4 v36;
  char *v37;
  __int128 __dst;
  int64_t v39;
  uint64_t v40;
  int64x2_t v41;
  unint64_t v42;
  uint64_t v43;
  void *__src;
  size_t __len[2];
  _QWORD v46[14];

  v46[13] = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1))
    goto LABEL_50;
  if (a2 != 3)
  {
    if (a2 >= 4)
      ++*(_DWORD *)(a1 + 12);
LABEL_50:
    __src = v46;
    *(_OWORD *)__len = xmmword_22F45DF40;
    sub_22F41A758(a3, &__src);
    __asm { BR              X10 }
  }
  ++*(_DWORD *)(a1 + 8);
  __src = v46;
  *(_OWORD *)__len = xmmword_22F45DF40;
  sub_22F41A758(a3, &__src);
  v6 = (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 5;
  v8 = *(char **)(a1 + 120);
  v7 = *(_QWORD *)(a1 + 128);
  if ((unint64_t)v8 >= v7)
  {
    v10 = *(char **)(a1 + 112);
    v11 = (v8 - v10) >> 4;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60)
      goto LABEL_51;
    v13 = v7 - (_QWORD)v10;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14 >> 60)
      goto LABEL_52;
    v15 = (char *)operator new(16 * v14);
    v16 = &v15[16 * v11];
    *(_DWORD *)v16 = 3;
    *((_QWORD *)v16 + 1) = v6;
    v9 = v16 + 16;
    if (v8 == v10)
    {
      v17 = &v15[16 * v11];
    }
    else
    {
      do
      {
        v17 = v16 - 16;
        *((_OWORD *)v16 - 1) = *((_OWORD *)v8 - 1);
        v8 -= 16;
        v16 -= 16;
      }
      while (v8 != v10);
    }
    *(_QWORD *)(a1 + 112) = v17;
    *(_QWORD *)(a1 + 120) = v9;
    *(_QWORD *)(a1 + 128) = &v15[16 * v14];
    if (v10)
      operator delete(v10);
  }
  else
  {
    *(_DWORD *)v8 = 3;
    *((_QWORD *)v8 + 1) = v6;
    v9 = v8 + 16;
  }
  *(_QWORD *)(a1 + 120) = v9;
  v18 = __len[0];
  if (__len[0] > 0x7FFFFFFFFFFFFFF7)
LABEL_51:
    abort();
  v19 = *a3;
  v20 = __src;
  if (__len[0] >= 0x17)
  {
    v22 = (__len[0] & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len[0] | 7) != 0x17)
      v22 = __len[0] | 7;
    v23 = v22 + 1;
    p_dst = (__int128 *)operator new(v22 + 1);
    *((_QWORD *)&__dst + 1) = v18;
    v39 = v23 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_25;
  }
  HIBYTE(v39) = __len[0];
  p_dst = &__dst;
  if (__len[0])
LABEL_25:
    memmove(p_dst, v20, v18);
  *((_BYTE *)p_dst + v18) = 0;
  v24 = *(_QWORD *)(a1 + 56);
  v25 = *(_QWORD *)(a1 + 48);
  if (v25 < v24)
  {
    *(_DWORD *)v25 = *(_DWORD *)(v19 + 312);
    *(_OWORD *)(v25 + 8) = __dst;
    *(_QWORD *)(v25 + 24) = v39;
    *(_QWORD *)(a1 + 48) = v25 + 32;
    goto LABEL_45;
  }
  v26 = *(_QWORD *)(a1 + 40);
  v27 = (uint64_t)(v25 - v26) >> 5;
  v28 = v27 + 1;
  if ((unint64_t)(v27 + 1) >> 59)
    goto LABEL_51;
  if ((uint64_t)(v24 - v26) >> 4 > v28)
    v28 = (uint64_t)(v24 - v26) >> 4;
  if (v24 - v26 >= 0x7FFFFFFFFFFFFFE0)
    v29 = 0x7FFFFFFFFFFFFFFLL;
  else
    v29 = v28;
  v43 = a1 + 56;
  if (v29)
  {
    if (!(v29 >> 59))
    {
      v30 = (char *)operator new(32 * v29);
      goto LABEL_38;
    }
LABEL_52:
    sub_22E3B3F8C();
  }
  v30 = 0;
LABEL_38:
  v31 = &v30[32 * v27];
  *(_DWORD *)v31 = *(_DWORD *)(v19 + 312);
  *(_OWORD *)(v31 + 8) = __dst;
  *((_QWORD *)v31 + 3) = v39;
  __dst = 0uLL;
  v39 = 0;
  if (v25 == v26)
  {
    v36 = 0;
    v35 = vdupq_n_s64(v25);
    v32 = &v30[32 * v27];
  }
  else
  {
    v32 = &v30[32 * v27];
    do
    {
      v33 = *(_DWORD *)(v25 - 32);
      v25 -= 32;
      *((_DWORD *)v32 - 8) = v33;
      v32 -= 32;
      v34 = *(_OWORD *)(v25 + 8);
      *((_QWORD *)v32 + 3) = *(_QWORD *)(v25 + 24);
      *(_OWORD *)(v32 + 8) = v34;
      *(_QWORD *)(v25 + 16) = 0;
      *(_QWORD *)(v25 + 24) = 0;
      *(_QWORD *)(v25 + 8) = 0;
    }
    while (v25 != v26);
    v35 = *(int64x2_t *)(a1 + 40);
    v24 = *(_QWORD *)(a1 + 56);
    v36 = v39 < 0;
  }
  v37 = v31 + 32;
  *(_QWORD *)(a1 + 40) = v32;
  *(_QWORD *)(a1 + 48) = v31 + 32;
  v41 = v35;
  *(_QWORD *)(a1 + 56) = &v30[32 * v29];
  v42 = v24;
  v40 = v35.i64[0];
  sub_22E74C15C((uint64_t)&v40);
  *(_QWORD *)(a1 + 48) = v37;
  if (v36)
    operator delete((void *)__dst);
LABEL_45:
  if (__src != v46)
    free(__src);
}

uint64_t sub_22E74BFE4(uint64_t result, uint64_t a2)
{
  int *v2;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(int **)(result + 112);
  if (v2 != *(int **)(result + 120))
  {
    v4 = sub_22F41A810(*(_QWORD *)(a2 + 32), *v2, "%0", 2uLL);
    *(_DWORD *)(a2 + 312) = 0;
    *(_DWORD *)(a2 + 316) = v4;
    if (*(char *)(a2 + 311) < 0)
    {
      **(_BYTE **)(a2 + 288) = 0;
      *(_QWORD *)(a2 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(a2 + 288) = 0;
      *(_BYTE *)(a2 + 311) = 0;
    }
    *(_BYTE *)(a2 + 320) = 0;
    *(_DWORD *)(a2 + 664) = 0;
    v5 = *(unsigned int *)(a2 + 776);
    if ((_DWORD)v5)
    {
      v6 = *(_QWORD *)(a2 + 768);
      v7 = 56 * v5;
      do
      {
        if (*(char *)(v6 + v7 - 9) < 0)
          operator delete(*(void **)(v6 + v7 - 32));
        v7 -= 56;
      }
      while (v7);
    }
    *(_DWORD *)(a2 + 776) = 0;
    __asm { BR              X9 }
  }
  return result;
}

uint64_t sub_22E74C15C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 32;
      *(_QWORD *)(a1 + 16) = v2 - 32;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        v4 = *(_QWORD *)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_22E74C1BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24FA71900;
  if ((*(_BYTE *)(a1 + 64) & 1) != 0)
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_22E3B3C18((uint64_t *)(a1 + 24));
  return a1;
}

void sub_22E74C234(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  _BOOL4 v8;
  unsigned __int16 *v9;
  unsigned int v10;
  const char *v11;
  size_t v12;
  unsigned int v13;
  _OWORD *v14;
  _BYTE *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  llvm::raw_ostream *v22;
  _WORD *v23;
  uint64_t v24;
  llvm::raw_ostream *v25;
  const void **v26;
  const void *v27;
  size_t v28;
  llvm::raw_ostream *v29;
  unsigned __int8 *v30;
  size_t v31;
  int v32;
  int v33;
  const char *v34;
  unsigned __int16 *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  _QWORD *v40;
  unsigned __int16 *v41;
  size_t v42;
  unsigned __int16 *v43;
  size_t v44;
  void **v45;
  size_t v46;
  _WORD *v47;
  void **v48;
  void **v49;
  const char *v50;
  void *v51;
  char v52;
  const void *v53;
  size_t v54;
  void **v55;
  void *v56;
  _BYTE v57[24];
  void *v58;
  void *v59[4];
  uint64_t *v60;
  void *v61;
  __int128 v62;
  _QWORD v63[15];

  v63[13] = *MEMORY[0x24BDAC8D0];
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1))
  {
    if ((_DWORD)a2 == 3)
    {
      ++*(_DWORD *)(a1 + 8);
    }
    else if ((int)a2 >= 4)
    {
      ++*(_DWORD *)(a1 + 12);
    }
  }
  v61 = v63;
  v62 = xmmword_22F45DF40;
  sub_22F41A758(a3, &v61);
  sub_22F242C48((uint64_t)v57, (uint64_t)&v61);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_DWORD *)(v6 + 4);
  if ((v7 & 0x4000) != 0)
  {
    v13 = *(_DWORD *)(*a3 + 316);
    if (v13 == 95)
    {
      v14 = v59[0];
      if ((unint64_t)v58 - (unint64_t)v59[0] > 0x10)
      {
        *((_BYTE *)v59[0] + 16) = 93;
        *v14 = *(_OWORD *)" [-ferror-limit=]";
        v59[0] = (char *)v59[0] + 17;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v57, " [-ferror-limit=]");
      }
      goto LABEL_26;
    }
    v33 = 0;
    v34 = " [";
    if ((_DWORD)a2 == 4 && v13 <= 0x2118)
    {
      v35 = sub_22F1CEE18(v13);
      if (v35
        && ((v36 = *(_DWORD *)(v35 + 1), v37 = v36 & 0x38, v38 = v36 & 4, v37 != 40) ? (v39 = v38 == 0) : (v39 = 0), v39))
      {
        v40 = v59[0];
        if ((unint64_t)v58 - (unint64_t)v59[0] > 8)
        {
          *((_BYTE *)v59[0] + 8) = 114;
          *v40 = *(_QWORD *)" [-Werror";
          v59[0] = (char *)v59[0] + 9;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v57, " [-Werror");
        }
        v33 = 1;
        v34 = ",";
      }
      else
      {
        v33 = 0;
      }
    }
    v41 = sub_22F41A9FC(*(_DWORD *)(*a3 + 316));
    if (v42)
    {
      v43 = v41;
      v44 = v42;
      v45 = v59;
      v46 = strlen(v34);
      v47 = v59[0];
      if (v46 <= (unint64_t)v58 - (unint64_t)v59[0])
      {
        if (v46)
        {
          memcpy(v59[0], v34, v46);
          v47 = (char *)v59[0] + v46;
          v59[0] = (char *)v59[0] + v46;
        }
        v48 = (void **)v57;
        v49 = v59;
      }
      else
      {
        v48 = (void **)llvm::raw_ostream::write((llvm::raw_ostream *)v57, v34);
        v49 = v48 + 4;
        v47 = v48[4];
      }
      if ((_DWORD)a2 == 2)
        v50 = "-R";
      else
        v50 = "-W";
      if ((unint64_t)((_BYTE *)v48[3] - (_BYTE *)v47) > 1)
      {
        *v47 = *(_WORD *)v50;
        *v49 = (char *)*v49 + 2;
      }
      else
      {
        v48 = (void **)llvm::raw_ostream::write((llvm::raw_ostream *)v48, v50);
      }
      v51 = v48[4];
      if (v44 <= (_BYTE *)v48[3] - (_BYTE *)v51)
      {
        memcpy(v51, v43, v44);
        v48[4] = (char *)v48[4] + v44;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v48, (const char *)v43);
      }
      v52 = *(_BYTE *)(*a3 + 311);
      if (v52 >= 0)
        v53 = (const void *)(*a3 + 288);
      else
        v53 = *(const void **)(*a3 + 288);
      if (v52 >= 0)
        v54 = v52 & 0x7F;
      else
        v54 = *(_QWORD *)(*a3 + 296);
      if (v54)
      {
        if (v58 == v59[0])
        {
          v55 = (void **)llvm::raw_ostream::write((llvm::raw_ostream *)v57, "=");
          v45 = v55 + 4;
          v56 = v55[4];
        }
        else
        {
          *(_BYTE *)v59[0] = 61;
          v56 = ++v59[0];
          v55 = (void **)v57;
        }
        if (v54 <= (_BYTE *)v55[3] - (_BYTE *)v56)
        {
          memcpy(v56, v53, v54);
          *v45 = (char *)*v45 + v54;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v55, (const char *)v53);
        }
      }
      v33 = 1;
    }
    v8 = v33 != 0;
    v7 = *(_DWORD *)(v6 + 4);
  }
  else
  {
    v8 = 0;
  }
  if ((v7 & 0x30000) != 0)
  {
    v9 = sub_22F1CEE18(*(_DWORD *)(*a3 + 316));
    if (v9)
    {
      v10 = (*(_DWORD *)(v9 + 1) >> 8) & 0x3F;
      if (v10)
      {
        if (v8)
          v11 = ",";
        else
          v11 = " [";
        if (v8)
          v12 = 1;
        else
          v12 = 2;
        if (v12 <= (unint64_t)v58 - (unint64_t)v59[0])
        {
          memcpy(v59[0], v11, v12);
          v59[0] = (char *)v59[0] + v12;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v57, v11);
        }
        if ((*(_DWORD *)(v6 + 4) & 0x30000) == 0x10000)
        {
          llvm::raw_ostream::operator<<();
        }
        else if (v10 <= 0x27)
        {
          v26 = (const void **)(&off_24FAE0D20 + 2 * v10);
          v27 = *v26;
          v28 = *((unsigned __int8 *)v26 + 8);
          if ((unint64_t)v58 - (unint64_t)v59[0] >= v28)
          {
            memcpy(v59[0], v27, v28);
            v59[0] = (char *)v59[0] + v28;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)v57, (const char *)v27);
          }
        }
        goto LABEL_23;
      }
    }
  }
  if (v8)
  {
LABEL_23:
    v15 = v59[0];
    if (v59[0] >= v58)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v57);
    }
    else
    {
      ++v59[0];
      *v15 = 93;
    }
  }
LABEL_26:
  v16 = *(_QWORD **)(a1 + 16);
  v17 = (*(uint64_t (**)(_QWORD *))(*v16 + 80))(v16);
  if (*(char *)(a1 + 63) < 0)
    v18 = *(_QWORD *)(a1 + 48);
  else
    v18 = *(unsigned __int8 *)(a1 + 63);
  v19 = v16[4];
  v20 = v16[2];
  if (v18)
  {
    if (*(char *)(a1 + 63) >= 0)
      v21 = (const char *)(a1 + 40);
    else
      v21 = *(const char **)(a1 + 40);
    v22 = (llvm::raw_ostream *)llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 16), v21);
    v23 = (_WORD *)*((_QWORD *)v22 + 4);
    if (*((_QWORD *)v22 + 3) - (_QWORD)v23 > 1uLL)
    {
      *v23 = 8250;
      *((_QWORD *)v22 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v22, ": ");
    }
  }
  v24 = *(unsigned int *)(*a3 + 312);
  if ((_DWORD)v24)
  {
    sub_22E727BA0(*(_QWORD *)(a1 + 32), v24, *(_QWORD *)(*a3 + 64), a2, *v60, v60[1], *(_BYTE **)(*a3 + 656), *(unsigned int *)(*a3 + 664), *(char **)(*a3 + 768), *(unsigned int *)(*a3 + 776), 0);
  }
  else
  {
    sub_22F2AF4E0(*(llvm::raw_ostream **)(a1 + 16), a2, (*(_DWORD *)(*(_QWORD *)(a1 + 24) + 4) >> 18) & 1);
    v29 = *(llvm::raw_ostream **)(a1 + 16);
    v30 = (unsigned __int8 *)*v60;
    v31 = v60[1];
    v32 = (*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)v29 + 80))(v29);
    sub_22E7482D0(v29, a2 == 1, v30, v31, v20 - v19 - v17 + v32 + *((_DWORD *)v29 + 8) - *((_DWORD *)v29 + 4), *(unsigned int *)(*(_QWORD *)(a1 + 24) + 36), (*(_DWORD *)(*(_QWORD *)(a1 + 24) + 4) >> 18) & 1);
  }
  v25 = *(llvm::raw_ostream **)(a1 + 16);
  if (*((_QWORD *)v25 + 4) != *((_QWORD *)v25 + 2))
    llvm::raw_ostream::flush_nonempty(v25);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v57);
  if (v61 != v63)
    free(v61);
}

_QWORD *sub_22E74C894(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v29[3];
  char v30;
  char v31;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(_QWORD *)(v2 + 56);
  *(_QWORD *)(v2 + 56) = 0;
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(v5 + 56);
  *(_QWORD *)(v5 + 56) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *(_QWORD *)(v5 + 48) = v6;
  v8 = *(_QWORD *)(a1 + 80);
  if (v8)
  {
    if (!*(_DWORD *)(a1 + 92))
    {
      v12 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(v12 + 312) = 0x33B00000000;
      if (*(char *)(v12 + 311) < 0)
      {
        **(_BYTE **)(v12 + 288) = 0;
        *(_QWORD *)(v12 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v12 + 288) = 0;
        *(_BYTE *)(v12 + 311) = 0;
      }
      v29[0] = v12 + 320;
      v29[1] = 0;
      v29[2] = v12;
      v30 = 1;
      *(_BYTE *)(v12 + 320) = 0;
      *(_DWORD *)(v12 + 664) = 0;
      v15 = *(unsigned int *)(v12 + 776);
      if ((_DWORD)v15)
      {
        v16 = *(_QWORD *)(v12 + 768);
        v17 = 56 * v15;
        do
        {
          if (*(char *)(v16 + v17 - 9) < 0)
            operator delete(*(void **)(v16 + v17 - 32));
          v17 -= 56;
        }
        while (v17);
      }
      *(_DWORD *)(v12 + 776) = 0;
      v31 = 1;
      sub_22E3BB0B8((uint64_t)v29);
      ++*(_DWORD *)(a1 + 12);
      *(_DWORD *)(a1 + 92) = 1;
      v8 = *(_QWORD *)(a1 + 80);
    }
    v18 = *(_QWORD *)(a1 + 24);
    v19 = *(uint64_t **)(a1 + 48);
    v20 = *(unsigned __int8 *)(*(_QWORD *)(v18 + 40) + 40);
    v21 = sub_22E74FA00(v18, v8, (uint64_t)"error", (uint64_t **)(a1 + 96), v19[2], v19[3], ((v20 >> 3) & 8) != 0);
    v22 = sub_22E74FA00(v18, v8, (uint64_t)"warning", (uint64_t **)(a1 + 120), v19[5], v19[6], ((v20 >> 3) & 4) != 0)
        + v21;
    v23 = sub_22E74FA00(v18, v8, (uint64_t)"remark", (uint64_t **)(a1 + 144), v19[8], v19[9], ((v20 >> 3) & 2) != 0);
    v14 = v22 + v23 + sub_22E74FA00(v18, v8, (uint64_t)"note", (uint64_t **)(a1 + 168), v19[11], v19[12], (v20 & 8) != 0);
    v13 = *(_DWORD *)(a1 + 12);
    goto LABEL_24;
  }
  v9 = *(_QWORD **)(a1 + 24);
  v10 = *(unsigned __int8 *)(v9[5] + 40);
  v11 = ~(v10 >> 3) | 0xFFFFFFF0;
  if ((~(v10 >> 3) & 8) != 0)
  {
    *(_DWORD *)(a1 + 12) += sub_22E74ECD8(*(_QWORD *)(a1 + 24), 0, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 24), (uint64_t)"error");
    v9 = *(_QWORD **)(a1 + 24);
    if ((v11 & 4) == 0)
    {
LABEL_6:
      if ((v11 & 2) == 0)
        goto LABEL_7;
LABEL_14:
      *(_DWORD *)(a1 + 12) += sub_22E74ECD8((uint64_t)v9, 0, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 64), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 72), (uint64_t)"remark");
      v9 = *(_QWORD **)(a1 + 24);
      if ((v11 & 1) == 0)
        goto LABEL_25;
      goto LABEL_15;
    }
  }
  else if ((~(v10 >> 3) & 4) == 0)
  {
    goto LABEL_6;
  }
  *(_DWORD *)(a1 + 12) += sub_22E74ECD8((uint64_t)v9, 0, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 40), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 48), (uint64_t)"warn");
  v9 = *(_QWORD **)(a1 + 24);
  if ((v11 & 2) != 0)
    goto LABEL_14;
LABEL_7:
  if ((v11 & 1) != 0)
  {
LABEL_15:
    v13 = sub_22E74ECD8((uint64_t)v9, 0, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 88), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 96), (uint64_t)"note");
    v14 = *(_DWORD *)(a1 + 12);
LABEL_24:
    *(_DWORD *)(a1 + 12) = v14 + v13;
    v9 = *(_QWORD **)(a1 + 24);
  }
LABEL_25:
  if (v4)
    v24 = v3;
  else
    v24 = 0;
  v25 = v9[7];
  v9[7] = v24;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v9[6] = v3;
  v26 = operator new();
  *(_QWORD *)(v26 + 8) = 0;
  *(_QWORD *)v26 = &off_24FA718B0;
  *(_OWORD *)(v26 + 16) = 0u;
  *(_OWORD *)(v26 + 32) = 0u;
  *(_OWORD *)(v26 + 48) = 0u;
  *(_OWORD *)(v26 + 64) = 0u;
  *(_OWORD *)(v26 + 80) = 0u;
  *(_OWORD *)(v26 + 96) = 0u;
  *(_OWORD *)(v26 + 112) = 0u;
  *(_QWORD *)(v26 + 128) = 0;
  v27 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v26;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  return sub_22F2AFEF0((_QWORD *)(a1 + 96));
}

uint64_t sub_22E74CBD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v11;

  v6 = *(_DWORD *)(a1 + 88);
  *(_DWORD *)(a1 + 88) = v6 + 1;
  if (a3 && !v6)
  {
    *(_QWORD *)(a1 + 64) = a3;
    *(_QWORD *)(a1 + 72) = a2;
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a3 + 88);
    v7 = a1 + 16;
    v11 = a1 + 16;
    v8 = *(_QWORD **)(a3 + 712);
    if ((unint64_t)v8 < *(_QWORD *)(a3 + 720))
    {
      *v8 = v7;
      v9 = v8 + 1;
    }
    else
    {
      v9 = sub_22E4A02B0((void **)(a3 + 704), &v11);
    }
    *(_QWORD *)(a3 + 712) = v9;
  }
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), a2, a3);
}

uint64_t sub_22E74CC6C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  size_t **j;
  uint64_t v26;
  size_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  size_t *v32;
  BOOL v33;
  unsigned __int8 *v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;

  v1 = result;
  v2 = *(unsigned int *)(result + 16);
  if ((_DWORD)v2)
  {
    for (i = *(uint64_t **)(result + 8); !*i || *i == -8; ++i)
      ;
  }
  else
  {
    i = *(uint64_t **)(result + 8);
  }
  v5 = *(_QWORD *)(result + 8) + 8 * v2;
  if (i != (uint64_t *)v5)
  {
    v6 = *i;
    do
    {
      if (*(_DWORD *)(v6 + 12))
      {
        v7 = *(_DWORD *)(v6 + 16);
        if (v7)
        {
          v8 = *(_QWORD *)v6;
          v9 = *(_QWORD *)v1;
          *(_DWORD *)(v9 + 312) = v7;
          *(_DWORD *)(v9 + 316) = 817;
          if (*(char *)(v9 + 311) < 0)
          {
            **(_BYTE **)(v9 + 288) = 0;
            *(_QWORD *)(v9 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v9 + 288) = 0;
            *(_BYTE *)(v9 + 311) = 0;
          }
          v34 = (unsigned __int8 *)(v9 + 320);
          v35 = 0;
          v36 = v9;
          v37 = 1;
          *(_BYTE *)(v9 + 320) = 0;
          *(_DWORD *)(v9 + 664) = 0;
          v10 = *(unsigned int *)(v9 + 776);
          if ((_DWORD)v10)
          {
            v11 = *(_QWORD *)(v9 + 768);
            v12 = 56 * v10;
            do
            {
              if (*(char *)(v11 + v12 - 9) < 0)
                operator delete(*(void **)(v11 + v12 - 32));
              v12 -= 56;
            }
            while (v12);
          }
          *(_DWORD *)(v9 + 776) = 0;
          sub_22E3B89A8(&v34, (void *)(v6 + 24), v8);
          sub_22E3BB0B8((uint64_t)&v34);
          v13 = *(_QWORD *)v1;
          *(_DWORD *)(v13 + 312) = *(_DWORD *)(v6 + 8);
          *(_DWORD *)(v13 + 316) = 849;
          if (*(char *)(v13 + 311) < 0)
          {
            **(_BYTE **)(v13 + 288) = 0;
            *(_QWORD *)(v13 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v13 + 288) = 0;
            *(_BYTE *)(v13 + 311) = 0;
          }
          v34 = (unsigned __int8 *)(v13 + 320);
          v35 = 0;
          v36 = v13;
          v37 = 1;
          *(_BYTE *)(v13 + 320) = 0;
          *(_DWORD *)(v13 + 664) = 0;
          v14 = *(unsigned int *)(v13 + 776);
          if ((_DWORD)v14)
          {
            v15 = *(_QWORD *)(v13 + 768);
            v16 = 56 * v14;
            do
            {
              if (*(char *)(v15 + v16 - 9) < 0)
                operator delete(*(void **)(v15 + v16 - 32));
              v16 -= 56;
            }
            while (v16);
          }
          *(_DWORD *)(v13 + 776) = 0;
          sub_22E3B89A8(&v34, (void *)(v6 + 24), v8);
          sub_22E3BB0B8((uint64_t)&v34);
          v17 = *(_QWORD *)v1;
          *(_DWORD *)(v17 + 312) = *(_DWORD *)(v6 + 12);
          *(_DWORD *)(v17 + 316) = 849;
          if (*(char *)(v17 + 311) < 0)
          {
            **(_BYTE **)(v17 + 288) = 0;
            *(_QWORD *)(v17 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v17 + 288) = 0;
            *(_BYTE *)(v17 + 311) = 0;
          }
          v34 = (unsigned __int8 *)(v17 + 320);
          v35 = 0;
          v36 = v17;
          v37 = 1;
          *(_BYTE *)(v17 + 320) = 0;
          *(_DWORD *)(v17 + 664) = 0;
          v18 = *(unsigned int *)(v17 + 776);
          if ((_DWORD)v18)
          {
            v19 = *(_QWORD *)(v17 + 768);
            v20 = 56 * v18;
            do
            {
              if (*(char *)(v19 + v20 - 9) < 0)
                operator delete(*(void **)(v19 + v20 - 32));
              v20 -= 56;
            }
            while (v20);
          }
          *(_DWORD *)(v17 + 776) = 0;
          sub_22E3B89A8(&v34, (void *)(v6 + 24), v8);
          result = sub_22E3BB0B8((uint64_t)&v34);
        }
      }
      do
      {
        v21 = i[1];
        ++i;
        v6 = v21;
        if (v21)
          v22 = v6 == -8;
        else
          v22 = 1;
      }
      while (v22);
    }
    while (i != (uint64_t *)v5);
  }
  v23 = *(unsigned int *)(v1 + 48);
  if ((_DWORD)v23)
  {
    for (j = *(size_t ***)(v1 + 40); !*j || *j + 1 == 0; ++j)
      ;
  }
  else
  {
    j = *(size_t ***)(v1 + 40);
  }
  v26 = *(_QWORD *)(v1 + 40) + 8 * v23;
  if (j != (size_t **)v26)
  {
    v27 = *j;
    do
    {
      v28 = *(_QWORD *)v1;
      *(_DWORD *)(v28 + 312) = *(_DWORD *)(v27[1] + 12);
      *(_DWORD *)(v28 + 316) = 828;
      if (*(char *)(v28 + 311) < 0)
      {
        **(_BYTE **)(v28 + 288) = 0;
        *(_QWORD *)(v28 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v28 + 288) = 0;
        *(_BYTE *)(v28 + 311) = 0;
      }
      v34 = (unsigned __int8 *)(v28 + 320);
      v35 = 0;
      v36 = v28;
      v37 = 1;
      *(_BYTE *)(v28 + 320) = 0;
      *(_DWORD *)(v28 + 664) = 0;
      v29 = *(unsigned int *)(v28 + 776);
      if ((_DWORD)v29)
      {
        v30 = *(_QWORD *)(v28 + 768);
        v31 = 56 * v29;
        do
        {
          if (*(char *)(v30 + v31 - 9) < 0)
            operator delete(*(void **)(v30 + v31 - 32));
          v31 -= 56;
        }
        while (v31);
      }
      *(_DWORD *)(v28 + 776) = 0;
      sub_22E3B89A8(&v34, v27 + 17, *v27);
      result = sub_22E3BB0B8((uint64_t)&v34);
      do
      {
        v32 = j[1];
        ++j;
        v27 = v32;
        if (v32)
          v33 = v27 + 1 == 0;
        else
          v33 = 1;
      }
      while (v33);
    }
    while (j != (size_t **)v26);
  }
  return result;
}

uint64_t sub_22E74CFD8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;

  v3 = *(_QWORD *)(*(_QWORD *)a3 + 64);
  if (!v3)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 48) + 56))(*(_QWORD *)(result + 48));
  v4 = *(_QWORD *)(result + 80);
  if (v4)
    v5 = v3 == v4;
  else
    v5 = 1;
  if (v5)
  {
    *(_QWORD *)(result + 80) = v3;
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 48) + 56))(*(_QWORD *)(result + 48));
  }
  return result;
}

uint64_t sub_22E74D00C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  unint64_t v8;
  unsigned int v9;
  char *v10;
  const char *v11;
  unint64_t v12;
  const char *v13;
  const char *v14;
  int64_t v15;
  BOOL v16;
  const char *v17;
  unint64_t v18;
  unint64_t v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string::size_type v22;
  int v23;
  int v25;
  uint64_t v26;
  const char *v28;
  unint64_t v29;
  char v30;
  uint64_t size;
  std::string *v32;
  std::string v34;

  v3 = *(uint64_t **)(a2 + 88);
  v4 = *(uint64_t **)(a1 + 80);
  if (v4)
    v5 = v3 == v4;
  else
    v5 = 1;
  if (v5)
  {
    v8 = HIDWORD(a3);
    v9 = a3;
    v10 = (char *)sub_22F1E2D38(*(uint64_t **)(a2 + 88), a3, 0);
    v11 = sub_22F1E2D38(v3, v8, 0);
    v12 = v11 - v10;
    if (v11 != v10)
    {
      v13 = v11;
      v14 = (const char *)memchr(v10, 92, v12);
      v15 = v14 - v10;
      if (v14)
        v16 = v15 == -1;
      else
        v16 = 1;
      if (v16)
      {
        sub_22E74D224(v10, v12, (char *)(a1 + 96), (uint64_t)v3, a2, v9, (int *)(a1 + 92), *(_QWORD *)(a1 + 56));
      }
      else
      {
        v17 = v14;
        memset(&v34, 0, sizeof(v34));
        std::string::reserve(&v34, v12);
        if (v17 == v13)
        {
          v18 = 0;
        }
        else
        {
          v18 = 0;
          do
          {
            if (v12 >= v18)
              v19 = v18;
            else
              v19 = v12;
            v20 = &v10[v19];
            v21 = v12 - v19;
            if (v21 >= v15 - v18)
              v22 = v15 - v18;
            else
              v22 = v21;
            std::string::append(&v34, v20, v22);
            v18 = v15 + 1;
            v23 = v10[v15 + 1];
            if (v23 == 13 || v23 == 10)
            {
              v18 = v15 + 2;
              if (v15 + 2 < v12)
              {
                v25 = v10[v18];
                v26 = v25 == v23 ? v15 + 2 : v15 + 3;
                if (v25 == 13 || v25 == 10)
                  v18 = v26;
              }
            }
            else
            {
              std::string::push_back(&v34, 92);
            }
            if (v12 <= v18)
              break;
            v28 = (const char *)memchr(&v10[v18], 92, v12 - v18);
            if (!v28)
              break;
            if (v28 == v13)
              break;
            v15 = v28 - v10;
          }
          while (v28 - v10 != -1);
        }
        if (v12 >= v18)
          v29 = v18;
        else
          v29 = v12;
        std::string::append(&v34, &v10[v29], v12 - v29);
        v30 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
        if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = *((_BYTE *)&v34.__r_.__value_.__s + 23) & 0x7F;
        else
          size = v34.__r_.__value_.__l.__size_;
        if (size)
        {
          if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v32 = &v34;
          else
            v32 = (std::string *)v34.__r_.__value_.__r.__words[0];
          sub_22E74D224(v32, size, (char *)(a1 + 96), (uint64_t)v3, a2, v9, (int *)(a1 + 92), *(_QWORD *)(a1 + 56));
          v30 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
        }
        if (v30 < 0)
          operator delete(v34.__r_.__value_.__l.__data_);
      }
    }
  }
  return 0;
}

void sub_22E74D224(_BYTE *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, unsigned int a6, int *a7, uint64_t a8)
{
  std::string::size_type *v8;
  std::string::size_type v9;
  unint64_t v10;
  std::string::size_type v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::string::size_type v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  BOOL v26;
  unsigned __int8 *v27;
  int64_t v28;
  int64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unint64_t v32;
  int v33;
  int v34;
  const char *v35;
  unsigned __int8 *v36;
  int v38;
  void *v39;
  uint64_t v40;
  int v41;
  int v42;
  unsigned __int8 *v44;
  uint64_t v46;
  uint64_t v47;
  _BOOL4 v49;
  unint64_t v50;
  size_t v51;
  unint64_t v52;
  uint64_t v53;
  char v54;
  int v55;
  size_t v56;
  size_t v57;
  size_t v58;
  const void *v59;
  int v60;
  int v61;
  char v62;
  int v63;
  size_t v64;
  size_t v65;
  size_t v66;
  const void *v67;
  int v68;
  unsigned int v69;
  int v70;
  unsigned __int8 *v71;
  unsigned __int8 *v72;
  unint64_t v73;
  unsigned __int8 *v74;
  int v75;
  unsigned int v76;
  uint64_t v77;
  int v78;
  unsigned __int8 *v79;
  size_t v80;
  BOOL v81;
  char v82;
  int v83;
  unint64_t v84;
  unsigned __int8 *v85;
  uint64_t v86;
  unsigned int v87;
  unint64_t v88;
  unsigned __int8 *v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned __int8 *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned __int8 *v98;
  uint64_t v99;
  unsigned __int8 *v100;
  uint64_t v101;
  unsigned __int8 *v102;
  uint64_t v103;
  char *v104;
  int v105;
  unint64_t v106;
  std::string::value_type *v107;
  unsigned __int8 *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  unsigned __int8 *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _BOOL4 v119;
  char v120;
  unsigned __int8 *v121;
  size_t v122;
  unsigned __int8 *v123;
  unsigned int v124;
  unsigned int v125;
  int v126;
  _DWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int v132;
  unint64_t v133;
  int v134;
  unint64_t v135;
  size_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unsigned int v140;
  uint64_t v141;
  int v142;
  unsigned __int8 *v143;
  int v144;
  unsigned int v145;
  unsigned int v146;
  unint64_t v147;
  int v148;
  _BOOL4 v150;
  unsigned int v151;
  unsigned __int8 *v152;
  int v153;
  unsigned int v154;
  unsigned int v155;
  _DWORD *v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unsigned int v161;
  unsigned int v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  std::string::size_type v168;
  int64_t v169;
  std::string::size_type size;
  std::string::size_type v171;
  uint64_t v172;
  size_t v173;
  unsigned int v174;
  unsigned __int8 *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unsigned __int8 *v179;
  unsigned __int8 *v180;
  uint64_t v181;
  _DWORD *v182;
  unsigned __int8 *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unsigned __int8 *v187;
  uint64_t v188;
  std::string *v189;
  std::string::size_type v190;
  unsigned int v191;
  unsigned int v192;
  std::string::size_type v193;
  uint64_t v194;
  std::string::value_type v195;
  BOOL v196;
  std::string *v197;
  char *v198;
  std::string *v199;
  char *v200;
  int Key;
  uint64_t v202;
  std::string::size_type v203;
  int v204;
  char v205;
  char v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  std::string *v210;
  size_t v211;
  unsigned int v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  unsigned int v217;
  _QWORD *v218;
  std::string *v219;
  char *v220;
  uint64_t v221;
  __int128 v222;
  _BYTE *v223;
  __int128 v224;
  size_t *v225;
  uint64_t *i;
  unsigned int v228;
  uint64_t *v229;
  unsigned int v230;
  unsigned int v231;
  _DWORD *v232;
  unsigned int v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unsigned __int8 *v237;
  uint64_t v238;
  _BOOL4 v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  int v244;
  char *v245;
  uint64_t v246;
  __int128 v247;
  __int128 v248;
  uint64_t v249;
  uint64_t v250;
  int v251;
  uint64_t v252;
  char v253;
  char v254;
  size_t __len;
  int __lena;
  llvm::StringMapImpl *v257;
  _QWORD *v258;
  uint64_t v259;
  unsigned int v260;
  void *v264;
  void *v265;
  unsigned __int8 *v266;
  void *v268;
  const char *v269;
  size_t v270;
  void *__src;
  unsigned __int8 *__srca;
  unsigned __int8 *__srcb;
  unsigned __int8 *__srcc;
  unsigned int v275;
  std::string::size_type v276;
  unint64_t v278;
  unsigned __int8 *v279;
  uint64_t v280;
  std::string::size_type v281;
  __int16 v282;
  _BYTE *v283;
  __int128 v284;
  std::string v285;
  uint64_t v286;
  _BYTE *v287;
  unint64_t v288;
  unsigned __int8 *v289;
  unsigned __int8 *v290;
  uint64_t v291;

  v8 = (std::string::size_type *)(a5 + 48);
  if (!a5)
    v8 = (std::string::size_type *)(a4 + 8);
  v9 = *v8;
  v10 = (unint64_t)&a1[a2];
  v283 = a1;
  *(_QWORD *)&v284 = &a1[a2];
  *((_QWORD *)&v284 + 1) = a1;
  *(_OWORD *)&v285.__r_.__value_.__l.__data_ = (unint64_t)a1;
  if (a2 <= 0)
    return;
  do
  {
    if (!sub_22E74F22C(&v283, "#", 1, 1, 0))
      break;
    v14 = v284;
    if (v285.__r_.__value_.__r.__words[0] == (_QWORD)v284 || *v285.__r_.__value_.__l.__data_ != 35)
      goto LABEL_13;
    v15 = 0;
    do
    {
      v16 = v15;
      v17 = *(unsigned __int8 *)(v285.__r_.__value_.__r.__words[0] + v15 + 1);
      if ((word_22F4ADB24[v17] & 0x68) == 0 && (_DWORD)v17 != 95 && (_DWORD)v17 != 45)
        break;
      v15 = v16 + 1;
    }
    while (v285.__r_.__value_.__r.__words[0] + v16 + 1 < (unint64_t)v284);
    v18 = v285.__r_.__value_.__r.__words[0] + v16 + 1;
    v285.__r_.__value_.__l.__size_ = v18;
    if (v285.__r_.__value_.__r.__words[0] + v16 > v285.__r_.__value_.__r.__words[0])
    {
      *((_QWORD *)&v284 + 1) = v285.__r_.__value_.__r.__words[0] + v16 + 1;
      sub_22F2AFFC4(a8, v285.__r_.__value_.__l.__data_, v16 + 1, a6);
    }
    else
    {
LABEL_13:
      v18 = v285.__r_.__value_.__r.__words[0] + 1;
      v285.__r_.__value_.__l.__size_ = v285.__r_.__value_.__r.__words[0] + 1;
      *((_QWORD *)&v284 + 1) = v285.__r_.__value_.__r.__words[0] + 1;
    }
  }
  while (v18 < v14);
  if (a3)
    v19 = a3 + 24;
  else
    v19 = 0;
  v20 = a3 + 48;
  v287 = a1;
  v288 = v10;
  if (!a3)
    v20 = 0;
  v264 = v19;
  v265 = v20;
  v21 = a3 + 72;
  if (!a3)
    v21 = 0;
  v268 = v21;
  v275 = a6;
  v260 = a6 & 0x7FFFFFFF;
  v289 = a1;
  v290 = a1;
  v266 = (unsigned __int8 *)(v9 + 320);
  v258 = (_QWORD *)(a8 + 8);
  v259 = a8;
  v291 = 0;
  v257 = (llvm::StringMapImpl *)(a8 + 40);
  v276 = v9;
  do
  {
    v22 = *(_QWORD *)(v9 + 40);
    v23 = *(_QWORD *)(v22 + 168);
    v24 = *(_QWORD *)(v22 + 176);
    if (v24 - v23 == 24)
    {
      v25 = *(_BYTE *)(v23 + 23);
      v26 = v25 < 0;
      if (v25 >= 0)
        v27 = (unsigned __int8 *)v23;
      else
        v27 = *(unsigned __int8 **)v23;
      v28 = v25 & 0x7F;
      if (v26)
        v29 = *(_QWORD *)(v23 + 8);
      else
        v29 = v28;
      if ((sub_22E74F22C(&v287, v27, v29, 1, 1) & 1) == 0)
        return;
    }
    else if (!sub_22E74F22C(&v287, "", 0, 1, 1))
    {
      return;
    }
    v31 = v290;
    v30 = (unsigned __int8 *)v291;
    v32 = v291 - (_QWORD)v290;
    v289 = (unsigned __int8 *)v291;
    v283 = 0;
    LOBYTE(v284) = 0;
    *(_QWORD *)((char *)&v284 + 4) = 0;
    memset(&v285, 0, sizeof(v285));
    v286 = 0x100000001;
    if ((unint64_t)(v291 - (_QWORD)v290) < 3)
      goto LABEL_36;
    v34 = *(unsigned __int16 *)(v291 - 3) ^ 0x722D | *(unsigned __int8 *)(v291 - 1) ^ 0x65;
    if (v34)
    {
      v35 = "string";
    }
    else
    {
      LOBYTE(v284) = 1;
      if (v32 >= v291 - (uint64_t)v290 - 3)
        v32 = v291 - (_QWORD)v290 - 3;
      v35 = "regex";
    }
    if (v32 >= 6)
    {
      v36 = &v290[v32];
      if (*(_DWORD *)&v290[v32 - 6] == 1920099629 && *(_WORD *)&v290[v32 - 2] == 29295)
      {
        v38 = 0;
        v39 = a3;
        v283 = a3;
        v40 = -6;
        goto LABEL_75;
      }
      if (v32 >= 8)
      {
        if (*((_QWORD *)v36 - 1) == 0x676E696E7261772DLL)
        {
          v38 = 0;
          v39 = v264;
          v283 = v264;
          v40 = -8;
          goto LABEL_75;
        }
LABEL_54:
        v41 = *(_DWORD *)(v36 - 7);
        v42 = *((_DWORD *)v36 - 1);
        if (v41 == 1835364909 && v42 == 1802658157)
        {
          v38 = 0;
          v39 = v265;
          v283 = v265;
          v40 = -7;
          goto LABEL_75;
        }
        goto LABEL_58;
      }
      if (v32 == 7)
        goto LABEL_54;
    }
    else if (v32 != 5)
    {
      goto LABEL_36;
    }
LABEL_58:
    v44 = &v290[v32];
    if (*(_DWORD *)&v290[v32 - 5] == 1953459757 && v290[v32 - 1] == 101)
    {
      v38 = 0;
      v39 = v268;
      v283 = v268;
      v40 = -5;
    }
    else
    {
      if (v32 < 0xF)
        goto LABEL_36;
      v46 = *(_QWORD *)(v44 - 15);
      v47 = *((_QWORD *)v44 - 1);
      v49 = v46 != 0x676169642D6F6E2DLL || v47 != 0x73636974736F6E67;
      v33 = 5;
      if (!v34 || v49)
        goto LABEL_124;
      v39 = 0;
      v38 = 1;
      v40 = -15;
    }
LABEL_75:
    v50 = v40 + v32;
    if (v32 >= v50)
      v51 = v50;
    else
      v51 = v32;
    if (v24 == v23)
    {
LABEL_121:
      v33 = 5;
      goto LABEL_124;
    }
    v269 = v35;
    __src = v39;
    v52 = 0xAAAAAAAAAAAAAAABLL * ((v24 - v23) >> 3);
    do
    {
      v53 = v23 + 24 * (v52 >> 1);
      v54 = *(_BYTE *)(v53 + 23);
      v55 = v54;
      v56 = v54 & 0x7F;
      if (v55 >= 0)
        v57 = v56;
      else
        v57 = *(_QWORD *)(v53 + 8);
      if (v51 >= v57)
        v58 = v57;
      else
        v58 = v51;
      if (v58
        && (v55 >= 0 ? (v59 = (const void *)(v23 + 24 * (v52 >> 1))) : (v59 = *(const void **)v53),
            (v60 = memcmp(v59, v31, v58)) != 0))
      {
        v61 = (v60 >> 31) | 1;
      }
      else
      {
        if (v57 < v51)
          v61 = -1;
        else
          v61 = 1;
        if (v57 == v51)
          v61 = 0;
      }
      if (v61 == -1)
        v52 += ~(v52 >> 1);
      else
        v52 >>= 1;
      if (v61 == -1)
        v23 = v53 + 24;
    }
    while (v52);
    if (v23 == v24)
    {
      v33 = 5;
LABEL_123:
      v9 = v276;
      goto LABEL_124;
    }
    v62 = *(_BYTE *)(v23 + 23);
    v63 = v62;
    v64 = v62 & 0x7F;
    if (v63 >= 0)
      v65 = v64;
    else
      v65 = *(_QWORD *)(v23 + 8);
    if (v65 >= v51)
      v66 = v51;
    else
      v66 = v65;
    v9 = v276;
    if (v66 && (v63 >= 0 ? (v67 = (const void *)v23) : (v67 = *(const void **)v23), (v68 = memcmp(v31, v67, v66)) != 0))
    {
      v69 = v275;
      if (v68 < 0)
        goto LABEL_121;
    }
    else
    {
      v69 = v275;
      if (v65 > v51)
        goto LABEL_121;
    }
    v70 = *a7;
    if (v38)
    {
      if (v70 == 3)
      {
        *(_DWORD *)(v276 + 312) = v69;
        *(_DWORD *)(v276 + 316) = 820;
        v71 = v266;
        if (*(char *)(v276 + 311) < 0)
        {
          **(_BYTE **)(v276 + 288) = 0;
          *(_QWORD *)(v276 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v276 + 288) = 0;
          *(_BYTE *)(v276 + 311) = 0;
        }
        v279 = v266;
        v280 = 0;
        v281 = v276;
        v282 = 1;
        *(_BYTE *)(v276 + 320) = 0;
        *(_DWORD *)(v276 + 664) = 0;
        v91 = *(unsigned int *)(v276 + 776);
        if ((_DWORD)v91)
        {
          v92 = *(_QWORD *)(v276 + 768);
          v93 = 56 * v91;
          do
          {
            if (*(char *)(v92 + v93 - 9) < 0)
              operator delete(*(void **)(v92 + v93 - 32));
            v93 -= 56;
          }
          while (v93);
          v71 = v279;
          *(_DWORD *)(v276 + 776) = 0;
          if (!v71)
          {
            v71 = (unsigned __int8 *)sub_22E3B8AAC(v280);
            v279 = v71;
          }
        }
        else
        {
          *(_DWORD *)(v276 + 776) = 0;
        }
        v71[*v71 + 1] = 2;
        v98 = v279;
        v99 = *v279;
        *v279 = v99 + 1;
        v100 = &v98[8 * v99];
        v101 = 1;
        goto LABEL_473;
      }
      *a7 = 2;
LABEL_36:
      v33 = 5;
      goto LABEL_124;
    }
    if (v70 == 2)
    {
      *(_DWORD *)(v276 + 312) = v69;
      *(_DWORD *)(v276 + 316) = 820;
      if (*(char *)(v276 + 311) < 0)
      {
        **(_BYTE **)(v276 + 288) = 0;
        *(_QWORD *)(v276 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v276 + 288) = 0;
        *(_BYTE *)(v276 + 311) = 0;
      }
      v94 = v266;
      v279 = v266;
      v280 = 0;
      v281 = v276;
      v282 = 1;
      *(_BYTE *)(v276 + 320) = 0;
      *(_DWORD *)(v276 + 664) = 0;
      v95 = *(unsigned int *)(v276 + 776);
      if ((_DWORD)v95)
      {
        v96 = *(_QWORD *)(v276 + 768);
        v97 = 56 * v95;
        do
        {
          if (*(char *)(v96 + v97 - 9) < 0)
            operator delete(*(void **)(v96 + v97 - 32));
          v97 -= 56;
        }
        while (v97);
        v94 = v279;
        *(_DWORD *)(v276 + 776) = 0;
        if (!v94)
        {
          v94 = (unsigned __int8 *)sub_22E3B8AAC(v280);
          v279 = v94;
        }
      }
      else
      {
        *(_DWORD *)(v276 + 776) = 0;
      }
      v94[*v94 + 1] = 2;
      v102 = v279;
      v103 = *v279;
      *v279 = v103 + 1;
      *(_QWORD *)&v102[8 * v103 + 16] = 0;
LABEL_474:
      sub_22E3BB0B8((uint64_t)&v279);
      goto LABEL_36;
    }
    *a7 = 3;
    if (!__src)
      goto LABEL_423;
    v72 = v30 + 1;
    v290 = v30;
    v291 = (uint64_t)(v30 + 1);
    v73 = v288;
    if ((unint64_t)(v30 + 1) > v288 || *v30 != 64)
    {
      v72 = 0;
      v80 = 0;
      v81 = 0;
      v82 = 0;
      v79 = v30;
      v83 = v69;
      goto LABEL_146;
    }
    v289 = v30 + 1;
    v290 = v30 + 1;
    v74 = v30 + 2;
    v291 = (uint64_t)(v30 + 2);
    if ((unint64_t)(v30 + 2) <= v288)
    {
      v75 = *v72;
      if (v75 == 45 || v75 == 43)
      {
        v289 = v30 + 2;
        LOBYTE(v279) = 0;
        v145 = sub_22F423C68(a4, a6, (BOOL *)&v279);
        v83 = 0;
        v79 = v30 + 2;
        if (!(_BYTE)v279)
        {
          v290 = v30 + 2;
          v291 = (uint64_t)(v30 + 2);
          if ((unint64_t)v74 >= v73)
          {
            v83 = 0;
            v79 = v30 + 2;
          }
          else
          {
            v146 = 0;
            v147 = v73 - (_QWORD)v74;
            v79 = v30 + 2;
            while (1)
            {
              v148 = *v79;
              if ((v148 - 48) > 9)
                break;
              v146 = v148 + 10 * v146 - 48;
              ++v79;
              if (!--v147)
              {
                v79 = (unsigned __int8 *)v73;
                break;
              }
            }
            v83 = 0;
            if (v79 == v74)
              v146 = 0;
            v150 = v75 == 43 || v146 < v145;
            v291 = (uint64_t)v79;
            if (v79 != v74 && v150)
            {
              v151 = v145;
              v152 = v79;
              if (v75 == 43)
                v153 = v146;
              else
                v153 = -v146;
              v154 = *(_DWORD *)(a4 + 304);
              v155 = v154 + 1;
              if (v154 + 1 > 1)
              {
                if ((v154 & 0x80000000) != 0)
                {
                  v228 = -2 - v154;
                  if (((*(_QWORD *)(*(_QWORD *)(a4 + 224) + 8 * ((-2 - v154) >> 6)) >> (-2 - v154)) & 1) != 0)
                    v156 = (_DWORD *)(*(_QWORD *)(a4 + 200) + 24 * v228);
                  else
                    v156 = (_DWORD *)sub_22F1E1134(a4, v228, 0);
                }
                else
                {
                  v156 = (_DWORD *)(*(_QWORD *)(a4 + 184) + 24 * v154);
                }
              }
              else
              {
                v156 = *(_DWORD **)(a4 + 184);
              }
              if ((*v156 & 0x7FFFFFFFu) <= v260
                && (v154 == -2
                 || (v155 != *(_DWORD *)(a4 + 192)
                   ? ((v155 & 0x80000000) != 0
                    ? ((v233 = -3 - v154,
                        ((*(_QWORD *)(*(_QWORD *)(a4 + 224) + 8 * ((-3 - v154) >> 6)) >> (-3 - v154)) & 1) == 0)
                     ? (v232 = (_DWORD *)sub_22F1E1134(a4, v233, 0))
                     : (v232 = (_DWORD *)(*(_QWORD *)(a4 + 200) + 24 * v233)))
                    : (v232 = (_DWORD *)(*(_QWORD *)(a4 + 184) + 24 * v155)),
                      v231 = *v232 & 0x7FFFFFFF)
                   : (v231 = *(_DWORD *)(a4 + 216)),
                     v231 > v260)))
              {
                v229 = (uint64_t *)a4;
                v230 = *(_DWORD *)(a4 + 304);
              }
              else
              {
                v229 = (uint64_t *)a4;
                v230 = sub_22F1E1EE8(a4, v260);
              }
              v83 = sub_22F1E38E8(v229, v230, v153 + v151, 1);
              v9 = v276;
              v79 = v152;
            }
          }
        }
        v119 = 0;
        goto LABEL_458;
      }
    }
    v291 = (uint64_t)(v30 + 1);
    if ((unint64_t)v72 < v288)
    {
      v76 = 0;
      v77 = 1;
      while (1)
      {
        v78 = v30[v77];
        if ((v78 - 48) > 9)
          break;
        v76 = v78 + 10 * v76 - 48;
        if (v288 - (_QWORD)v30 == ++v77)
        {
          v79 = (unsigned __int8 *)v288;
          v77 = v288 - (_QWORD)v30;
          goto LABEL_218;
        }
      }
      v79 = &v30[v77];
LABEL_218:
      v291 = (uint64_t)v79;
      if (v77 != 1)
      {
        if (!v76)
        {
          v83 = 0;
          v119 = 0;
          goto LABEL_250;
        }
        v124 = *(_DWORD *)(a4 + 304);
        v125 = v124 + 1;
        __srca = v79;
        v126 = (int)v72;
        if (v124 + 1 > 1)
        {
          if ((v124 & 0x80000000) != 0)
          {
            v161 = -2 - v124;
            if (((*(_QWORD *)(*(_QWORD *)(a4 + 224) + 8 * ((-2 - v124) >> 6)) >> (-2 - v124)) & 1) != 0)
              v127 = (_DWORD *)(*(_QWORD *)(a4 + 200) + 24 * v161);
            else
              v127 = (_DWORD *)sub_22F1E1134(a4, v161, 0);
          }
          else
          {
            v127 = (_DWORD *)(*(_QWORD *)(a4 + 184) + 24 * v124);
          }
        }
        else
        {
          v127 = *(_DWORD **)(a4 + 184);
        }
        if ((*v127 & 0x7FFFFFFFu) <= v260
          && (v124 == -2
           || (v125 != *(_DWORD *)(a4 + 192)
             ? ((v125 & 0x80000000) != 0
              ? ((v191 = -3 - v124,
                  ((*(_QWORD *)(*(_QWORD *)(a4 + 224) + 8 * ((-3 - v124) >> 6)) >> (-3 - v124)) & 1) == 0)
               ? (v182 = (_DWORD *)sub_22F1E1134(a4, v191, 0))
               : (v182 = (_DWORD *)(*(_QWORD *)(a4 + 200) + 24 * v191)))
              : (v182 = (_DWORD *)(*(_QWORD *)(a4 + 184) + 24 * v125)),
                v162 = *v182 & 0x7FFFFFFF)
             : (v162 = *(_DWORD *)(a4 + 216)),
               v162 > v260)))
        {
          v192 = *(_DWORD *)(a4 + 304);
        }
        else
        {
          v192 = sub_22F1E1EE8(a4, v260);
        }
        v83 = sub_22F1E38E8((uint64_t *)a4, v192, v76, 1);
        v119 = 0;
        LODWORD(v74) = v126;
        v79 = __srca;
LABEL_458:
        if (!v83 && !v119)
        {
          *(_DWORD *)(v9 + 312) = (_DWORD)v74 - (_DWORD)v287 + v275;
          *(_DWORD *)(v9 + 316) = 824;
          if (*(char *)(v9 + 311) < 0)
          {
            **(_BYTE **)(v9 + 288) = 0;
            *(_QWORD *)(v9 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v9 + 288) = 0;
            *(_BYTE *)(v9 + 311) = 0;
          }
          v108 = v266;
          v279 = v266;
          v280 = 0;
          v281 = v9;
          v282 = 1;
          *(_BYTE *)(v9 + 320) = 0;
          *(_DWORD *)(v9 + 664) = 0;
          v234 = *(unsigned int *)(v9 + 776);
          if (!(_DWORD)v234)
            goto LABEL_471;
          v235 = *(_QWORD *)(v9 + 768);
          v236 = 56 * v234;
          do
          {
            if (*(char *)(v235 + v236 - 9) < 0)
              operator delete(*(void **)(v235 + v236 - 32));
            v236 -= 56;
          }
          while (v236);
LABEL_203:
          v108 = v279;
          *(_DWORD *)(v9 + 776) = 0;
          if (!v108)
          {
            v108 = (unsigned __int8 *)sub_22E3B8AAC(v280);
            v279 = v108;
          }
          goto LABEL_472;
        }
        v82 = 0;
        v80 = 0;
        v72 = 0;
        v73 = v288;
        v69 = v275;
        goto LABEL_463;
      }
    }
    v290 = v30 + 1;
    if (v72 == (unsigned __int8 *)v288 || *v72 != 35)
      goto LABEL_228;
    v116 = 2;
    do
    {
      v117 = v116;
      v118 = v30[v116];
      if ((word_22F4ADB24[v118] & 0x68) == 0 && (_DWORD)v118 != 95 && (_DWORD)v118 != 45)
        break;
      v116 = v117 + 1;
    }
    while ((unint64_t)&v30[v117] < v288);
    v79 = &v30[v117];
    v291 = (uint64_t)&v30[v117];
    v80 = v117 - 1;
    if ((unint64_t)(v117 - 1) <= 1)
    {
LABEL_228:
      if (!a5)
        goto LABEL_246;
      v120 = sub_22E74F22C(&v287, ":", 1, 0, 0);
      v121 = v289;
      if ((v120 & 1) == 0)
      {
        v73 = v288;
        v72 = v289;
LABEL_246:
        v79 = v72 + 1;
        v290 = v72;
        v291 = (uint64_t)(v72 + 1);
        v119 = (unint64_t)(v72 + 1) <= v73 && *v72 == 42;
        v83 = 0;
LABEL_250:
        LODWORD(v74) = (_DWORD)v72;
        goto LABEL_458;
      }
      v74 = (unsigned __int8 *)v291;
      v122 = v290 - v289;
      v289 = (unsigned __int8 *)v291;
      v123 = v121;
      if (v290 - v121 != 1 || *v121 != 42)
      {
        v135 = sub_22F16569C(a5, a6, v121, v290 - v121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        v136 = v122;
        v137 = v135;
        if (v135)
        {
          v138 = v135;
          do
          {
            v139 = *(_QWORD *)(v138 + 8);
            v138 = v139 & 0xFFFFFFFFFFFFFFFCLL;
          }
          while ((v139 & 2) != 0 && v138);
          v140 = sub_22F1E1A48(a4, v138);
          if (!v140)
            v140 = sub_22F1E170C(a4, v137, a6, 0, 0, 0);
          v290 = v74;
          if ((unint64_t)v74 < v288)
          {
            v141 = 0;
            v142 = 0;
            v143 = (unsigned __int8 *)v288;
            while (1)
            {
              v144 = v74[v141];
              if ((v144 - 48) > 9)
                break;
              v142 = v144 + 10 * v142 - 48;
              if (v288 - (_QWORD)v74 == ++v141)
                goto LABEL_328;
            }
            v143 = &v74[v141];
LABEL_328:
            v291 = (uint64_t)v143;
            v174 = v143 == v74 ? 0 : v142;
            if (v143 != v74 && v174)
            {
              v157 = v137;
              v175 = v143;
              v83 = sub_22F1E38E8((uint64_t *)a4, v140, v174, 1);
              v79 = v175;
              goto LABEL_338;
            }
          }
          v79 = v74 + 1;
          v290 = v74;
          v291 = (uint64_t)(v74 + 1);
          v157 = v137;
          if ((unint64_t)(v74 + 1) <= v288 && *v74 == 42)
          {
            v119 = 1;
            v83 = sub_22F1E38E8((uint64_t *)a4, v140, 1u, 1);
            v79 = v74 + 1;
          }
          else
          {
            v83 = 0;
LABEL_338:
            v119 = 0;
          }
          v33 = 0;
        }
        else
        {
          __len = v136;
          __srcb = v123;
          *(_DWORD *)(v276 + 312) = (_DWORD)v74 - (_DWORD)v287 + v69;
          *(_DWORD *)(v276 + 316) = 823;
          v157 = 0;
          if (*(char *)(v276 + 311) < 0)
          {
            **(_BYTE **)(v276 + 288) = 0;
            *(_QWORD *)(v276 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v276 + 288) = 0;
            *(_BYTE *)(v276 + 311) = 0;
          }
          v279 = v266;
          v280 = 0;
          v281 = v276;
          v282 = 1;
          *(_BYTE *)(v276 + 320) = 0;
          *(_DWORD *)(v276 + 664) = 0;
          v176 = *(unsigned int *)(v276 + 776);
          if ((_DWORD)v176)
          {
            v177 = *(_QWORD *)(v276 + 768);
            v178 = 56 * v176;
            do
            {
              if (*(char *)(v177 + v178 - 9) < 0)
                operator delete(*(void **)(v177 + v178 - 32));
              v178 -= 56;
            }
            while (v178);
          }
          *(_DWORD *)(v276 + 776) = 0;
          sub_22E3B89A8(&v279, __srcb, __len);
          v179 = v279;
          if (!v279)
          {
            v179 = (unsigned __int8 *)sub_22E3B8AAC(v280);
            v279 = v179;
          }
          v179[*v179 + 1] = 1;
          v180 = v279;
          v181 = *v279;
          *v279 = v181 + 1;
          *(_QWORD *)&v180[8 * v181 + 16] = v269;
          sub_22E3BB0B8((uint64_t)&v279);
          v83 = 0;
          v119 = 0;
          v33 = 5;
          v79 = v74;
        }
        if (!v157)
          goto LABEL_124;
        goto LABEL_458;
      }
      v79 = (unsigned __int8 *)(v291 + 1);
      v290 = (unsigned __int8 *)v291++;
      v73 = v288;
      if ((unint64_t)(v74 + 1) > v288 || *v74 != 42)
      {
        *(_DWORD *)(v276 + 312) = (_DWORD)v74 - (_DWORD)v287 + v69;
        *(_DWORD *)(v276 + 316) = 824;
        if (*(char *)(v276 + 311) < 0)
        {
          **(_BYTE **)(v276 + 288) = 0;
          *(_QWORD *)(v276 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v276 + 288) = 0;
          *(_BYTE *)(v276 + 311) = 0;
        }
        v183 = v266;
        v279 = v266;
        v280 = 0;
        v281 = v276;
        v282 = 1;
        *(_BYTE *)(v276 + 320) = 0;
        *(_DWORD *)(v276 + 664) = 0;
        v184 = *(unsigned int *)(v276 + 776);
        if ((_DWORD)v184)
        {
          v185 = *(_QWORD *)(v276 + 768);
          v186 = 56 * v184;
          do
          {
            if (*(char *)(v185 + v186 - 9) < 0)
              operator delete(*(void **)(v185 + v186 - 32));
            v186 -= 56;
          }
          while (v186);
          v183 = v279;
          *(_DWORD *)(v276 + 776) = 0;
          if (!v183)
          {
            v183 = (unsigned __int8 *)sub_22E3B8AAC(v280);
            v279 = v183;
          }
        }
        else
        {
          *(_DWORD *)(v276 + 776) = 0;
        }
        v183[*v183 + 1] = 1;
        v187 = v279;
        v188 = *v279;
        *v279 = v188 + 1;
        v100 = &v187[8 * v188];
        v101 = (uint64_t)"'*'";
LABEL_473:
        *((_QWORD *)v100 + 2) = v101;
        goto LABEL_474;
      }
      v83 = 0;
      v80 = 0;
      v72 = 0;
      v82 = 1;
      v119 = 1;
    }
    else
    {
      v82 = 0;
      v119 = 0;
      v83 = 0;
    }
LABEL_463:
    v289 = v79;
    v81 = v119;
    v30 = v79;
LABEL_146:
    if ((unint64_t)v30 < v73)
    {
      v84 = v73 - (_QWORD)v79;
      v85 = &v30[v73 - (_QWORD)v79];
      while ((word_22F4ADB24[*v30] & 7) != 0)
      {
        v289 = ++v30;
        if (!--v84)
        {
          v30 = v85;
          break;
        }
      }
      v79 = v30;
    }
    v290 = v30;
    v291 = (uint64_t)v30;
    if ((unint64_t)v30 >= v73)
      goto LABEL_183;
    v86 = 0;
    v87 = 0;
    v88 = v73 - (_QWORD)v79;
    v89 = &v30[v73 - (_QWORD)v79];
    while (1)
    {
      v90 = v30[v86];
      if ((v90 - 48) > 9)
        break;
      v87 = v90 + 10 * v87 - 48;
      v291 = (uint64_t)&v30[++v86];
      if (v88 == v86)
        goto LABEL_178;
    }
    v89 = &v30[v86];
LABEL_178:
    if (v89 == v30)
    {
LABEL_183:
      v290 = v30;
      v291 = (uint64_t)(v30 + 1);
      if ((unint64_t)(v30 + 1) <= v73)
      {
        v89 = v30;
        if (*v30 == 43)
        {
          HIDWORD(v286) = -1;
          v289 = v30 + 1;
          v89 = v30 + 1;
        }
      }
      else
      {
        v89 = v30;
      }
    }
    else
    {
      LODWORD(v286) = v87;
      v289 = v89;
      v290 = v89;
      v104 = (char *)(v89 + 1);
      v291 = (uint64_t)(v89 + 1);
      if ((unint64_t)(v89 + 1) > v73)
        goto LABEL_187;
      v105 = *v89;
      if (v105 == 45)
      {
        v289 = v89 + 1;
        v290 = v89 + 1;
        v291 = (uint64_t)(v89 + 1);
        if ((unint64_t)v104 >= v73)
          goto LABEL_296;
        v131 = 0;
        v132 = 0;
        v133 = v73 - (_QWORD)v89;
        while (1)
        {
          v134 = v89[v131 + 1];
          if ((v134 - 48) > 9)
            break;
          v132 = v134 + 10 * v132 - 48;
          v291 = (uint64_t)&v89[v131++ + 2];
          if (v73 - (_QWORD)v89 - 1 == v131)
          {
            v89 += v131 + 1;
            goto LABEL_294;
          }
        }
        v133 = v131 + 1;
        v89 += v131 + 1;
LABEL_294:
        if (v133 == 1 || (HIDWORD(v286) = v132, v132 < v87))
        {
LABEL_296:
          *(_DWORD *)(v9 + 312) = (_DWORD)v104 - (_DWORD)v287 + v69;
          *(_DWORD *)(v9 + 316) = 821;
          if (*(char *)(v9 + 311) < 0)
          {
            **(_BYTE **)(v9 + 288) = 0;
            *(_QWORD *)(v9 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v9 + 288) = 0;
            *(_BYTE *)(v9 + 311) = 0;
          }
          v108 = v266;
          v279 = v266;
          v280 = 0;
          v281 = v9;
          v282 = 1;
          *(_BYTE *)(v9 + 320) = 0;
          *(_DWORD *)(v9 + 664) = 0;
          v158 = *(unsigned int *)(v9 + 776);
          if ((_DWORD)v158)
          {
            v159 = *(_QWORD *)(v9 + 768);
            v160 = 56 * v158;
            do
            {
              if (*(char *)(v159 + v160 - 9) < 0)
                operator delete(*(void **)(v159 + v160 - 32));
              v160 -= 56;
            }
            while (v160);
            goto LABEL_203;
          }
LABEL_471:
          *(_DWORD *)(v9 + 776) = 0;
LABEL_472:
          v108[*v108 + 1] = 1;
          v237 = v279;
          v238 = *v279;
          *v279 = v238 + 1;
          v100 = &v237[8 * v238];
          v101 = (uint64_t)v269;
          goto LABEL_473;
        }
        v289 = v89;
        goto LABEL_188;
      }
      if (v105 == 43)
      {
        HIDWORD(v286) = -1;
        v289 = ++v89;
      }
      else
      {
LABEL_187:
        HIDWORD(v286) = v87;
      }
    }
LABEL_188:
    if ((unint64_t)v89 < v73)
    {
      v106 = v73 - (_QWORD)v89;
      while ((word_22F4ADB24[*v89] & 7) != 0)
      {
        v289 = ++v89;
        if (!--v106)
        {
          v89 = (unsigned __int8 *)v73;
          break;
        }
      }
    }
    v107 = (std::string::value_type *)(v89 + 2);
    v290 = v89;
    v291 = (uint64_t)(v89 + 2);
    if ((unint64_t)(v89 + 2) > v73 || *(_WORD *)v89 != 31611)
    {
      *(_DWORD *)(v9 + 312) = (_DWORD)v89 - (_DWORD)v287 + v69;
      *(_DWORD *)(v9 + 316) = 826;
      if (*(char *)(v9 + 311) < 0)
      {
        **(_BYTE **)(v9 + 288) = 0;
        *(_QWORD *)(v9 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v9 + 288) = 0;
        *(_BYTE *)(v9 + 311) = 0;
      }
      v108 = v266;
      v279 = v266;
      v280 = 0;
      v281 = v9;
      v282 = 1;
      *(_BYTE *)(v9 + 320) = 0;
      *(_DWORD *)(v9 + 664) = 0;
      v109 = *(unsigned int *)(v9 + 776);
      if ((_DWORD)v109)
      {
        v110 = *(_QWORD *)(v9 + 768);
        v111 = 56 * v109;
        do
        {
          if (*(char *)(v110 + v111 - 9) < 0)
            operator delete(*(void **)(v110 + v111 - 32));
          v111 -= 56;
        }
        while (v111);
        goto LABEL_203;
      }
      goto LABEL_471;
    }
    v289 = v89 + 2;
    v290 = v89 + 2;
    if ((unint64_t)v107 >= v73)
    {
LABEL_215:
      *(_DWORD *)(v9 + 312) = (_DWORD)v107 - (_DWORD)v287 + v275;
      *(_DWORD *)(v9 + 316) = 822;
      if (*(char *)(v9 + 311) < 0)
      {
        **(_BYTE **)(v9 + 288) = 0;
        *(_QWORD *)(v9 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v9 + 288) = 0;
        *(_BYTE *)(v9 + 311) = 0;
      }
      v108 = v266;
      v279 = v266;
      v280 = 0;
      v281 = v9;
      v282 = 1;
      *(_BYTE *)(v9 + 320) = 0;
      *(_DWORD *)(v9 + 664) = 0;
      v128 = *(unsigned int *)(v9 + 776);
      if ((_DWORD)v128)
      {
        v129 = *(_QWORD *)(v9 + 768);
        v130 = 56 * v128;
        do
        {
          if (*(char *)(v129 + v130 - 9) < 0)
            operator delete(*(void **)(v129 + v130 - 32));
          v130 -= 56;
        }
        while (v130);
        goto LABEL_203;
      }
      goto LABEL_471;
    }
    v112 = 1;
    v113 = 2;
    while (1)
    {
      v114 = &v89[v113];
      if (v73 - (unint64_t)&v89[v113] >= 2)
      {
        if (*(_WORD *)v114 == 31611)
        {
          ++v112;
LABEL_213:
          v115 = 2;
          goto LABEL_214;
        }
        if (*(_WORD *)v114 == 32125)
          break;
      }
      v115 = 1;
LABEL_214:
      v113 += v115;
      v290 = &v89[v113];
      if ((unint64_t)&v89[v113] >= v73)
        goto LABEL_215;
    }
    if (--v112)
      goto LABEL_213;
    v253 = v81;
    v254 = v82;
    v270 = v80;
    __srcc = v72;
    __lena = v83;
    v291 = (uint64_t)(v114 + 2);
    v289 = v114 + 2;
    DWORD1(v284) = v275;
    DWORD2(v284) = (_DWORD)v107 - (_DWORD)v287 + v275;
    v163 = v113 - 2;
    v278 = v113 - 2;
    v164 = llvm::StringRef::find();
    if (v164 != -1)
    {
      v165 = v164;
      v166 = 0;
      do
      {
        if (v278 >= v166)
          v167 = v166;
        else
          v167 = v113 - 2;
        if (v278 - v167 >= v165 - v166)
          v168 = v165 - v166;
        else
          v168 = v278 - v167;
        std::string::append(&v285, &v107[v167], v168);
        std::string::push_back(&v285, 10);
        v166 = v165 + 2;
        v165 = llvm::StringRef::find();
      }
      while (v165 != -1);
    }
    v169 = HIBYTE(v285.__r_.__value_.__r.__words[2]);
    size = v285.__r_.__value_.__l.__size_;
    v171 = *((_BYTE *)&v285.__r_.__value_.__s + 23) & 0x7F;
    if ((v285.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v171 = v285.__r_.__value_.__l.__size_;
    if (v171)
    {
      v172 = v259;
      v173 = v270;
      goto LABEL_388;
    }
    v173 = v270;
    if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0)
    {
      v190 = (v285.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v190 >= v163)
      {
        v193 = HIBYTE(v285.__r_.__value_.__r.__words[2]);
      }
      else
      {
LABEL_375:
        std::string::__grow_by(&v285, v190, v163 - v190, size, 0, size, 0);
        v285.__r_.__value_.__l.__size_ = 0;
        LOBYTE(v193) = *((_BYTE *)&v285.__r_.__value_.__s + 23);
      }
      v189 = (std::string *)v285.__r_.__value_.__r.__words[0];
      if ((v193 & 0x80u) == 0)
        v189 = &v285;
    }
    else
    {
      v189 = &v285;
      if (v163 >= 0x17)
      {
        v190 = 22;
        size = HIBYTE(v285.__r_.__value_.__r.__words[2]);
        goto LABEL_375;
      }
    }
    v194 = v113 - 2;
    if (v113 == 2)
    {
      v172 = v259;
    }
    else
    {
      v172 = v259;
      do
      {
        v195 = *v107++;
        v189->__r_.__value_.__s.__data_[0] = v195;
        v189 = (std::string *)((char *)v189 + 1);
        --v194;
      }
      while (v194);
    }
    v189->__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0)
    {
      v169 = HIBYTE(v285.__r_.__value_.__r.__words[2]);
      v285.__r_.__value_.__l.__size_ = v113 - 2;
    }
    else
    {
      v169 = v163 & 0x7F;
      *((_BYTE *)&v285.__r_.__value_.__s + 23) = v163 & 0x7F;
    }
LABEL_388:
    if (!(_BYTE)v284)
    {
LABEL_402:
      if (!v173)
      {
        v205 = v254;
        v204 = __lena;
        v203 = v9;
        v206 = v253;
LABEL_425:
        sub_22E74F3D0(v203, (uint64_t)&v283, v204, v205, v206);
        v33 = 0;
        goto LABEL_124;
      }
      Key = llvm::StringMapImpl::FindKey();
      if (Key != -1 && Key != (unint64_t)*(unsigned int *)(v172 + 16))
      {
        v202 = *(_QWORD *)(*v258 + 8 * Key);
        if (!*(_DWORD *)(v202 + 16))
          *(_DWORD *)(v202 + 16) = DWORD1(v284);
        v203 = *(_QWORD *)v172;
        v204 = *(_DWORD *)(v202 + 8);
        v205 = 0;
        v206 = 0;
        goto LABEL_425;
      }
      v212 = llvm::StringMapImpl::LookupBucketFor();
      v213 = *(_QWORD *)v257;
      v214 = v212;
      v215 = *(_QWORD *)(*(_QWORD *)v257 + 8 * v212);
      if (v215 == -8)
      {
        --*(_DWORD *)(v259 + 56);
      }
      else if (v215)
      {
LABEL_428:
        v216 = *(_QWORD *)(v215 + 8);
        v217 = *(_DWORD *)(v215 + 16);
        if (v217 >= *(_DWORD *)(v215 + 20))
        {
          v240 = v216 <= (unint64_t)&v283 && v216 + 56 * v217 > (unint64_t)&v283;
          if (v240)
            v241 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)((uint64_t)&v283 - v216) >> 3);
          else
            v241 = -1;
          v279 = 0;
          v242 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
          v216 = v242;
          v243 = *(char **)(v215 + 8);
          v244 = *(_DWORD *)(v215 + 16);
          if (v244)
          {
            v245 = &v243[56 * v244];
            v246 = v242;
            do
            {
              v247 = *(_OWORD *)v243;
              *(_DWORD *)(v246 + 16) = *((_DWORD *)v243 + 4);
              *(_OWORD *)v246 = v247;
              v248 = *(_OWORD *)(v243 + 24);
              *(_QWORD *)(v246 + 40) = *((_QWORD *)v243 + 5);
              *(_OWORD *)(v246 + 24) = v248;
              *((_QWORD *)v243 + 4) = 0;
              *((_QWORD *)v243 + 5) = 0;
              *((_QWORD *)v243 + 3) = 0;
              *(_QWORD *)(v246 + 48) = *((_QWORD *)v243 + 6);
              v243 += 56;
              v246 += 56;
            }
            while (v243 != v245);
            v243 = *(char **)(v215 + 8);
            v249 = *(unsigned int *)(v215 + 16);
            if ((_DWORD)v249)
            {
              v250 = 56 * v249;
              do
              {
                if (v243[v250 - 9] < 0)
                  operator delete(*(void **)&v243[v250 - 32]);
                v250 -= 56;
              }
              while (v250);
              v243 = *(char **)(v215 + 8);
            }
          }
          v251 = (int)v279;
          if (v243 != (char *)(v215 + 24))
            free(v243);
          *(_QWORD *)(v215 + 8) = v216;
          *(_DWORD *)(v215 + 20) = v251;
          v252 = v216 + 56 * v241;
          if (v240)
            v218 = (_QWORD *)(v216 + 56 * v241);
          else
            v218 = &v283;
          v220 = (char *)(v252 + 47);
          if (!v240)
            v220 = (char *)&v285.__r_.__value_.__r.__words[2] + 7;
          v219 = (std::string *)(v252 + 24);
          if (!v240)
            v219 = &v285;
          v217 = *(_DWORD *)(v215 + 16);
        }
        else
        {
          v218 = &v283;
          v219 = &v285;
          v220 = (char *)&v285.__r_.__value_.__r.__words[2] + 7;
        }
        v221 = v216 + 56 * v217;
        v222 = *(_OWORD *)v218;
        *(_DWORD *)(v221 + 16) = *((_DWORD *)v218 + 4);
        *(_OWORD *)v221 = v222;
        v223 = (_BYTE *)(v221 + 24);
        if (*v220 < 0)
        {
          sub_22E3BB2B4(v223, v219->__r_.__value_.__l.__data_, v218[4]);
        }
        else
        {
          v224 = *(_OWORD *)&v219->__r_.__value_.__l.__data_;
          *(_QWORD *)(v221 + 40) = *((_QWORD *)&v219->__r_.__value_.__l + 2);
          *(_OWORD *)v223 = v224;
        }
        v33 = 0;
        *(_QWORD *)(v216 + 56 * v217 + 48) = v218[6];
        ++*(_DWORD *)(v215 + 16);
        goto LABEL_123;
      }
      v225 = (size_t *)MEMORY[0x23489D23C](v270 + 137, 8);
      memcpy(v225 + 17, __srcc, v270);
      *((_BYTE *)v225 + v270 + 136) = 0;
      *v225 = v270;
      v225[1] = (size_t)(v225 + 3);
      v225[2] = 0x200000000;
      *(_QWORD *)(v213 + 8 * v214) = v225;
      ++*(_DWORD *)(v259 + 52);
      for (i = (uint64_t *)(*(_QWORD *)(v259 + 40) + 8 * llvm::StringMapImpl::RehashTable(v257)); ; ++i)
      {
        v215 = *i;
        if (*i && v215 != -8)
          break;
      }
      goto LABEL_428;
    }
    v196 = (v169 & 0x80u) != 0;
    if ((v169 & 0x80u) != 0)
      v169 = v285.__r_.__value_.__l.__size_;
    if (v196)
      v197 = (std::string *)v285.__r_.__value_.__r.__words[0];
    else
      v197 = &v285;
    if (v169 >= 2)
    {
      v198 = (char *)v197 + v169;
      v199 = v197;
      do
      {
        v200 = (char *)memchr(v199, 123, v169 - 1);
        if (!v200)
          break;
        if (*(_WORD *)v200 == 31611)
        {
          if (v200 == v198 || v200 - (char *)v197 == -1)
            break;
          goto LABEL_402;
        }
        v199 = (std::string *)(v200 + 1);
        v169 = v198 - (char *)v199;
      }
      while (v198 - (char *)v199 >= 2);
    }
    *(_DWORD *)(v9 + 312) = DWORD2(v284);
    *(_DWORD *)(v9 + 316) = 825;
    if (*(char *)(v9 + 311) < 0)
    {
      **(_BYTE **)(v9 + 288) = 0;
      *(_QWORD *)(v9 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v9 + 288) = 0;
      *(_BYTE *)(v9 + 311) = 0;
    }
    v279 = v266;
    v280 = 0;
    v281 = v9;
    v282 = 1;
    *(_BYTE *)(v9 + 320) = 0;
    *(_DWORD *)(v9 + 664) = 0;
    v207 = *(unsigned int *)(v9 + 776);
    if ((_DWORD)v207)
    {
      v208 = *(_QWORD *)(v9 + 768);
      v209 = 56 * v207;
      do
      {
        if (*(char *)(v208 + v209 - 9) < 0)
          operator delete(*(void **)(v208 + v209 - 32));
        v209 -= 56;
      }
      while (v209);
    }
    *(_DWORD *)(v9 + 776) = 0;
    if ((v285.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v210 = &v285;
    else
      v210 = (std::string *)v285.__r_.__value_.__r.__words[0];
    if ((v285.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v211 = *((_BYTE *)&v285.__r_.__value_.__s + 23) & 0x7F;
    else
      v211 = v285.__r_.__value_.__l.__size_;
    sub_22E3B89A8(&v279, v210, v211);
    sub_22E3BB0B8((uint64_t)&v279);
LABEL_423:
    v33 = 1;
LABEL_124:
    if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v285.__r_.__value_.__l.__data_);
  }
  while ((v33 == 5 || !v33) && (unint64_t)v289 < v288);
}

unint64_t sub_22E74ECD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v12;
  _WORD *v13;
  unint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  _DWORD *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  _DWORD *v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  _DWORD *v27;
  llvm::raw_ostream *v28;
  unint64_t v29;
  size_t *v30;
  uint64_t v31;
  const void *v32;
  size_t v33;
  size_t v34;
  void *v35;
  _DWORD *v36;
  llvm::raw_ostream *v37;
  const char *v38;
  uint64_t v39;
  const char *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47[3];
  char v48;
  char v49;
  _BYTE v50[24];
  uint64_t v51;
  _WORD *v52;
  uint64_t v53;
  void *v54;
  __int128 v55;
  _QWORD v56[34];

  v56[32] = *MEMORY[0x24BDAC8D0];
  if (a3 == a4)
    return 0;
  v54 = v56;
  v55 = xmmword_22F44E320;
  sub_22F242C48((uint64_t)v50, (uint64_t)&v54);
  v12 = a3;
  do
  {
    v13 = v52;
    v14 = v51 - (_QWORD)v52;
    if (a2 && *(_DWORD *)v12)
    {
      if (v14 > 1)
        *v52++ = 8202;
      else
        llvm::raw_ostream::write((llvm::raw_ostream *)v50, "\n ");
      v15 = *(_DWORD *)v12;
      v16 = *(_DWORD *)(a2 + 304);
      v17 = v16 + 1;
      if (v16 + 1 > 1)
      {
        if ((v16 & 0x80000000) != 0)
        {
          v19 = -2 - v16;
          if (((*(_QWORD *)(*(_QWORD *)(a2 + 224) + 8 * ((-2 - v16) >> 6)) >> (-2 - v16)) & 1) != 0)
            v18 = (_DWORD *)(*(_QWORD *)(a2 + 200) + 24 * v19);
          else
            v18 = (_DWORD *)sub_22F1E1134(a2, v19, 0);
        }
        else
        {
          v18 = (_DWORD *)(*(_QWORD *)(a2 + 184) + 24 * v16);
        }
      }
      else
      {
        v18 = *(_DWORD **)(a2 + 184);
      }
      v20 = v15 & 0x7FFFFFFF;
      if ((*v18 & 0x7FFFFFFFu) <= v20
        && (v16 == -2
         || (v17 != *(_DWORD *)(a2 + 192)
           ? ((v17 & 0x80000000) != 0
            ? ((v24 = -3 - v16,
                ((*(_QWORD *)(*(_QWORD *)(a2 + 224) + 8 * ((-3 - v16) >> 6)) >> (-3 - v16)) & 1) == 0)
             ? (v23 = (_DWORD *)sub_22F1E1134(a2, v24, 0))
             : (v23 = (_DWORD *)(*(_QWORD *)(a2 + 200) + 24 * v24)))
            : (v23 = (_DWORD *)(*(_QWORD *)(a2 + 184) + 24 * v17)),
              v22 = *v23 & 0x7FFFFFFF)
           : (v22 = *(_DWORD *)(a2 + 216)),
             v22 > v20)))
      {
        v21 = *(_DWORD *)(a2 + 304);
      }
      else
      {
        v21 = sub_22F1E1EE8(a2, v20);
      }
      v25 = sub_22E6155EC((_QWORD *)a2, v21);
      if (v25)
      {
        v26 = v25;
        v27 = v52;
        if ((unint64_t)(v51 - (_QWORD)v52) > 5)
        {
          v52[2] = 8293;
          *v27 = 1818838560;
          v52 += 3;
          v28 = (llvm::raw_ostream *)v50;
        }
        else
        {
          v28 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)v50, " File ");
        }
        v29 = *(_QWORD *)(v26 + 88);
        do
        {
          v30 = (size_t *)v29;
          v31 = *(_QWORD *)(v29 + 8);
          if ((v31 & 2) == 0)
            break;
          v29 = v31 & 0xFFFFFFFFFFFFFFFCLL;
        }
        while (v29);
        v34 = *v30;
        v32 = v30 + 4;
        v33 = v34;
        v35 = (void *)*((_QWORD *)v28 + 4);
        if (v34 <= *((_QWORD *)v28 + 3) - (_QWORD)v35)
        {
          if (v33)
          {
            memcpy(v35, v32, v33);
            *((_QWORD *)v28 + 4) += v33;
          }
        }
        else
        {
          llvm::raw_ostream::write(v28, (const char *)v32);
        }
      }
      v36 = v52;
      if ((unint64_t)(v51 - (_QWORD)v52) > 5)
      {
        v52[2] = 8293;
        *v36 = 1852394528;
        v52 += 3;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v50, " Line ");
      }
      sub_22F1E2F68(a2, *(_DWORD *)v12, 1, (uint64_t)v47);
      llvm::raw_ostream::operator<<();
    }
    else if (v14 > 0xC)
    {
      *(_QWORD *)v52 = *(_QWORD *)"\n  (frontend)";
      *(_QWORD *)((char *)v13 + 5) = *(_QWORD *)"rontend)";
      v52 = (_WORD *)((char *)v52 + 13);
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v50, "\n  (frontend)");
    }
    if ((unint64_t)(v51 - (_QWORD)v52) > 1)
    {
      *v52++ = 8250;
      v37 = (llvm::raw_ostream *)v50;
    }
    else
    {
      v37 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)v50, ": ");
    }
    v40 = *(const char **)(v12 + 8);
    v39 = v12 + 8;
    v38 = v40;
    if (*(char *)(v39 + 23) >= 0)
      v41 = (const char *)v39;
    else
      v41 = v38;
    llvm::raw_ostream::write(v37, v41);
    v12 = v39 + 24;
  }
  while (v12 != a4);
  *(_QWORD *)(a1 + 312) = 0x33200000000;
  if (*(char *)(a1 + 311) < 0)
  {
    **(_BYTE **)(a1 + 288) = 0;
    *(_QWORD *)(a1 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 288) = 0;
    *(_BYTE *)(a1 + 311) = 0;
  }
  v47[0] = (unsigned __int8 *)(a1 + 320);
  v47[1] = 0;
  v47[2] = (unsigned __int8 *)a1;
  v48 = 1;
  *(_BYTE *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 664) = 0;
  v42 = *(unsigned int *)(a1 + 776);
  if ((_DWORD)v42)
  {
    v43 = *(_QWORD *)(a1 + 768);
    v44 = 56 * v42;
    do
    {
      if (*(char *)(v43 + v44 - 9) < 0)
        operator delete(*(void **)(v43 + v44 - 32));
      v44 -= 56;
    }
    while (v44);
    LODWORD(v42) = *(unsigned __int8 *)(a1 + 320);
  }
  *(_DWORD *)(a1 + 776) = 0;
  v49 = 1;
  v45 = v53;
  *(_BYTE *)(a1 + 321 + v42) = 1;
  *(_QWORD *)(a1 + 336 + 8 * v42) = a5;
  v46 = (v42 + 1);
  *(_BYTE *)(a1 + 321 + v46) = 2;
  *(_BYTE *)(a1 + 320) = v42 + 2;
  *(_QWORD *)(a1 + 336 + 8 * v46) = 1;
  sub_22E3B89A8(v47, *(void **)v45, *(_QWORD *)(v45 + 8));
  sub_22E3BB0B8((uint64_t)v47);
  v5 = (unint64_t)(a4 - a3) >> 5;
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v50);
  if (v54 != v56)
    free(v54);
  return v5;
}

void **sub_22E74F1C8(void **a1)
{
  void **v3;

  v3 = a1 + 9;
  sub_22E3B4AF8(&v3);
  v3 = a1 + 6;
  sub_22E3B4AF8(&v3);
  v3 = a1 + 3;
  sub_22E3B4AF8(&v3);
  v3 = a1;
  sub_22E3B4AF8(&v3);
  return a1;
}

uint64_t sub_22E74F22C(_QWORD *a1, unsigned __int8 *a2, int64_t a3, int a4, int a5)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v14;
  unsigned int v15;
  int v16;

  v6 = (unsigned __int8 *)a1[1];
  v5 = (unsigned __int8 *)a1[2];
  while (1)
  {
    if (a3)
    {
      v7 = (unint64_t)v6;
      if (v6 - v5 >= a3)
      {
        v8 = &v6[1 - a3];
        v7 = (unint64_t)v6;
        if (v5 != v8)
        {
          while (*v5 != *a2)
          {
LABEL_9:
            if (++v5 == v8)
            {
              v7 = (unint64_t)v6;
              goto LABEL_16;
            }
          }
          v9 = 1;
          while (a3 != v9)
          {
            v10 = v5[v9];
            v11 = a2[v9++];
            if (v10 != v11)
              goto LABEL_9;
          }
          v7 = (unint64_t)v5;
        }
      }
LABEL_16:
      a1[3] = v7;
      v5 = (unsigned __int8 *)(v7 + a3);
    }
    else
    {
      a1[3] = v5;
      v7 = (unint64_t)v6;
      if (v5 != v6)
      {
        while ((word_22F4ADB24[*v5] & 0x60) == 0)
        {
          a1[3] = ++v5;
          if (v5 == v6)
          {
            v7 = (unint64_t)v6;
            goto LABEL_18;
          }
        }
        v7 = (unint64_t)v5;
      }
LABEL_18:
      v5 = (unsigned __int8 *)(v7 + 1);
    }
    a1[4] = v5;
    if ((unsigned __int8 *)v7 == v6)
      return 0;
    if (!a4)
      break;
    if (v7 == *a1)
      break;
    v12 = *(unsigned __int8 *)(v7 - 1);
    if ((word_22F4ADB24[v12] & 7) != 0)
      break;
    if (v7 > *a1 + 1 && ((_DWORD)v12 == 47 || (_DWORD)v12 == 42) && *(_BYTE *)(v7 - 2) == 47)
      break;
    a1[2] = v5;
    if (v5 >= v6)
      return 0;
  }
  if (a5)
  {
    if (v5 == v6)
    {
LABEL_35:
      v5 = v6;
    }
    else
    {
      while (1)
      {
        v14 = *v5;
        if ((word_22F4ADB24[v14] & 0x68) == 0 && (_DWORD)v14 != 95 && (_DWORD)v14 != 45)
          break;
        a1[4] = ++v5;
        if (v5 == v6)
          goto LABEL_35;
      }
    }
    while (1)
    {
      v15 = *--v5;
      v16 = word_22F4ADB24[v15] & 8;
      if (v15 != 45 && v16 == 0)
        break;
      a1[4] = v5;
    }
  }
  return 1;
}

void sub_22E74F3D0(std::string::size_type a1, uint64_t a2, int a3, char a4, char a5)
{
  uint64_t v8;
  int v9;
  char v10;
  int v11;
  const std::string::value_type *v12;
  size_t v13;
  size_t v14;
  int v15;
  int v16;
  const std::string::value_type *v17;
  size_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  const std::string::value_type *p_p;
  std::string::size_type v23;
  unint64_t v24;
  std::string::size_type v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  std::string::size_type v30;
  void *v31;
  int v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (**v37)();
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  int v45;
  size_t v46;
  void **v47;
  const char *v48;
  void **v49;
  size_t v50;
  uint64_t **v51;
  unint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t *v61;
  char *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  const std::string::value_type *__src;
  std::string v73;
  __int16 v74;
  void *__p;
  std::string::size_type v76;
  uint64_t v77;
  const std::string::value_type *v78;
  unint64_t v79;

  v8 = a2;
  v9 = *(_DWORD *)(a2 + 12);
  v10 = *(_BYTE *)(a2 + 47);
  v11 = v10;
  if (v10 >= 0)
    v12 = (const std::string::value_type *)(a2 + 24);
  else
    v12 = *(const std::string::value_type **)(a2 + 24);
  v13 = v10 & 0x7F;
  if (v11 >= 0)
    v14 = v13;
  else
    v14 = *(_QWORD *)(a2 + 32);
  v16 = *(_DWORD *)(a2 + 48);
  v15 = *(_DWORD *)(a2 + 52);
  __src = v12;
  if (!*(_BYTE *)(a2 + 8))
  {
    v32 = *(_DWORD *)(a2 + 12);
    v33 = operator new();
    *(_DWORD *)(v33 + 8) = v32;
    *(_DWORD *)(v33 + 12) = a3;
    if (v14 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_96;
    v29 = v33;
    if (v14 >= 0x17)
    {
      v38 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17)
        v38 = v14 | 7;
      v39 = v38 + 1;
      v34 = operator new(v38 + 1);
      *(_QWORD *)(v29 + 24) = v14;
      *(_QWORD *)(v29 + 32) = v39 | 0x8000000000000000;
      *(_QWORD *)(v29 + 16) = v34;
      v30 = a1;
    }
    else
    {
      v34 = (void *)(v33 + 16);
      *(_BYTE *)(v33 + 39) = v14;
      v30 = a1;
      if (!v14)
        goto LABEL_51;
    }
    memmove(v34, __src, v14);
LABEL_51:
    *((_BYTE *)v34 + v14) = 0;
    *(_DWORD *)(v29 + 40) = v16;
    *(_DWORD *)(v29 + 44) = v15;
    *(_BYTE *)(v29 + 48) = a5 | a4;
    *(_BYTE *)(v29 + 49) = a4;
    v37 = off_24FA719D0;
    *(_QWORD *)v29 = off_24FA719D0;
    goto LABEL_52;
  }
  memset(&v73, 0, sizeof(v73));
  v78 = v12;
  v17 = v12;
  v18 = v14;
  v19 = v9;
  while (1)
  {
    v79 = v18;
    if (v18 == 1)
      goto LABEL_12;
    if (!v18)
      break;
    if (*(_WORD *)v17 == 31611)
    {
      v78 = v17 + 2;
      v79 = v18 - 2;
      v25 = llvm::StringRef::find();
      std::string::append(&v73, "(");
      std::string::append(&v73, v78, v25);
      std::string::append(&v73, ")");
      v9 = v19;
      if (v79 >= v25 + 2)
        v26 = v25 + 2;
      else
        v26 = v79;
      v17 = &v78[v26];
      v18 = v79 - v26;
      goto LABEL_27;
    }
LABEL_12:
    v20 = llvm::StringRef::find();
    if (v20 == -1)
      v21 = v79;
    else
      v21 = v20;
    llvm::Regex::escape();
    if (v77 >= 0)
      p_p = (const std::string::value_type *)&__p;
    else
      p_p = (const std::string::value_type *)__p;
    if (v77 >= 0)
      v23 = HIBYTE(v77) & 0x7F;
    else
      v23 = v76;
    std::string::append(&v73, p_p, v23);
    if (SHIBYTE(v77) < 0)
      operator delete(__p);
    if (v79 >= v21)
      v24 = v21;
    else
      v24 = v79;
    v17 = &v78[v24];
    v18 = v79 - v24;
    v9 = v19;
LABEL_27:
    v78 = v17;
  }
  v27 = v9;
  v28 = operator new();
  *(_DWORD *)(v28 + 8) = v27;
  *(_DWORD *)(v28 + 12) = a3;
  if (v14 > 0x7FFFFFFFFFFFFFF7)
LABEL_96:
    abort();
  v29 = v28;
  v8 = a2;
  v30 = a1;
  if (v14 >= 0x17)
  {
    v35 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v35 = v14 | 7;
    v36 = v35 + 1;
    v31 = operator new(v35 + 1);
    *(_QWORD *)(v29 + 24) = v14;
    *(_QWORD *)(v29 + 32) = v36 | 0x8000000000000000;
    *(_QWORD *)(v29 + 16) = v31;
    goto LABEL_43;
  }
  v31 = (void *)(v28 + 16);
  *(_BYTE *)(v28 + 39) = v14;
  if (v14)
LABEL_43:
    memmove(v31, v12, v14);
  *((_BYTE *)v31 + v14) = 0;
  *(_DWORD *)(v29 + 40) = v16;
  *(_DWORD *)(v29 + 44) = v15;
  *(_BYTE *)(v29 + 48) = a5 | a4;
  *(_BYTE *)(v29 + 49) = a4;
  *(_QWORD *)v29 = off_24FA71A30;
  llvm::Regex::Regex();
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  v37 = *(uint64_t (***)())v29;
LABEL_52:
  v76 = 0;
  v77 = 0;
  __p = 0;
  if ((((uint64_t (*)(uint64_t, void **))v37[2])(v29, &__p) & 1) == 0)
  {
    *(_DWORD *)(v30 + 312) = *(_DWORD *)(v8 + 16);
    *(_DWORD *)(v30 + 316) = 819;
    if (*(char *)(v30 + 311) < 0)
    {
      **(_BYTE **)(v30 + 288) = 0;
      *(_QWORD *)(v30 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v30 + 288) = 0;
      *(_BYTE *)(v30 + 311) = 0;
    }
    v40 = (unsigned __int8 *)(v30 + 320);
    *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v30 + 320;
    v73.__r_.__value_.__r.__words[2] = v30;
    v74 = 1;
    *(_BYTE *)(v30 + 320) = 0;
    *(_DWORD *)(v30 + 664) = 0;
    v41 = *(unsigned int *)(v30 + 776);
    if ((_DWORD)v41)
    {
      v42 = *(_QWORD *)(v30 + 768);
      v43 = 56 * v41;
      do
      {
        if (*(char *)(v42 + v43 - 9) < 0)
          operator delete(*(void **)(v42 + v43 - 32));
        v43 -= 56;
      }
      while (v43);
      LODWORD(v41) = *v40;
    }
    *(_DWORD *)(v30 + 776) = 0;
    v44 = HIBYTE(v77);
    v45 = SHIBYTE(v77);
    v47 = (void **)__p;
    v46 = v76;
    if (*(_BYTE *)(v8 + 8))
      v48 = "regex";
    else
      v48 = "string";
    v40[v41 + 1] = 1;
    *(_BYTE *)(v30 + 320) = v41 + 1;
    *(_QWORD *)&v40[8 * v41 + 16] = v48;
    if (v45 >= 0)
      v49 = &__p;
    else
      v49 = v47;
    if (v45 >= 0)
      v50 = v44 & 0x7F;
    else
      v50 = v46;
    sub_22E3B89A8((unsigned __int8 **)&v73, v49, v50);
    sub_22E3BB0B8((uint64_t)&v73);
  }
  v51 = *(uint64_t ***)v8;
  v53 = *(uint64_t **)(*(_QWORD *)v8 + 8);
  v52 = *(_QWORD *)(*(_QWORD *)v8 + 16);
  if ((unint64_t)v53 < v52)
  {
    *v53 = v29;
    v54 = v53 + 1;
    goto LABEL_93;
  }
  v55 = *v51;
  v56 = v53 - *v51;
  v57 = v56 + 1;
  if ((unint64_t)(v56 + 1) >> 61)
    goto LABEL_96;
  v58 = v52 - (_QWORD)v55;
  if (v58 >> 2 > v57)
    v57 = v58 >> 2;
  if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8)
    v59 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v59 = v57;
  if (v59)
  {
    if (v59 >> 61)
      sub_22E3B3F8C();
    v60 = (char *)operator new(8 * v59);
  }
  else
  {
    v60 = 0;
  }
  v61 = (uint64_t *)&v60[8 * v56];
  v62 = &v60[8 * v59];
  *v61 = v29;
  v54 = v61 + 1;
  if (v53 == v55)
  {
    *v51 = v61;
    v51[1] = v54;
    v51[2] = (uint64_t *)v62;
  }
  else
  {
    do
    {
      v63 = *--v53;
      *v53 = 0;
      *--v61 = v63;
    }
    while (v53 != v55);
    v53 = *v51;
    v64 = v51[1];
    *v51 = v61;
    v51[1] = v54;
    v51[2] = (uint64_t *)v62;
    while (v64 != v53)
    {
      v66 = *--v64;
      v65 = v66;
      *v64 = 0;
      if (v66)
        (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
    }
  }
  if (v53)
    operator delete(v53);
LABEL_93:
  v51[1] = v54;
  if (SHIBYTE(v77) < 0)
    operator delete(__p);
}

uint64_t sub_22E74F988(llvm *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)this;
  v2 = (char *)*((_QWORD *)this + 1);
  v4 = *((unsigned int *)this + 4);
  if ((_DWORD)v4)
  {
    v5 = 56 * v4;
    do
    {
      if (v2[v5 - 9] < 0)
        operator delete(*(void **)&v2[v5 - 32]);
      v5 -= 56;
    }
    while (v5);
    v2 = (char *)*((_QWORD *)this + 1);
  }
  if (v2 != (char *)this + 24)
    free(v2);
  return llvm::deallocate_buffer(this, (void *)(v3 + 137));
}

unint64_t sub_22E74FA00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4, uint64_t a5, uint64_t a6, char a7)
{
  int64_t v9;
  uint64_t v12;
  char *v13;
  __int128 *v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  unsigned int i;
  unsigned int v30;
  unsigned int v31;
  _DWORD *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  _DWORD *v36;
  unsigned int v37;
  unint64_t v38;
  unsigned int v39;
  unsigned int v40;
  _DWORD *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  _DWORD *v46;
  unsigned int v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  void **v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v64;
  uint64_t v65;
  _QWORD *v66;
  llvm::raw_ostream *v67;
  const char *v68;
  _DWORD *v69;
  unint64_t v70;
  uint64_t v71;
  llvm::raw_ostream *v72;
  size_t v73;
  const void *v74;
  size_t v75;
  void *v76;
  _BYTE *v77;
  llvm::raw_ostream *v78;
  _BYTE *v79;
  llvm::raw_ostream *v80;
  const char *v81;
  uint64_t v82;
  const char *v83;
  const char *v84;
  _BYTE *v85;
  size_t v86;
  const char *v87;
  size_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v99;
  uint64_t *v100;
  char *v101;
  char *v102;
  char *v103;
  int v104;
  uint64_t v105;
  void *v106;
  char *v107;
  unsigned __int8 *v108[3];
  char v109;
  char v110;
  _BYTE v111[24];
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  __int128 v116;
  _QWORD v117[34];

  v117[32] = *MEMORY[0x24BDAC8D0];
  v105 = 0;
  v106 = 0;
  v107 = 0;
  v9 = a6 - a5;
  if (a6 != a5)
  {
    if (v9 < 0)
LABEL_183:
      abort();
    v12 = v9 >> 5;
    v13 = (char *)operator new(v9);
    v105 = (uint64_t)v13;
    v107 = &v13[32 * v12];
    if (a5 != a6)
    {
      v14 = (__int128 *)(a5 + 8);
      v15 = v13 + 8;
      do
      {
        v16 = (uint64_t)v14 - 8;
        *((_DWORD *)v15 - 2) = *((_DWORD *)v14 - 2);
        if (*((char *)v14 + 23) < 0)
        {
          sub_22E3BB2B4(v15, *(void **)v14, *((_QWORD *)v14 + 1));
        }
        else
        {
          v17 = *v14;
          *((_QWORD *)v15 + 2) = *((_QWORD *)v14 + 2);
          *(_OWORD *)v15 = v17;
        }
        v14 += 2;
        v15 += 32;
      }
      while (v16 + 32 != a6);
      v13 = v15 - 8;
    }
    v106 = v13;
  }
  v18 = *a4;
  v99 = a4[1];
  if (*a4 == v99)
  {
    v62 = 0;
    v61 = 0;
    goto LABEL_123;
  }
  v101 = 0;
  v19 = 0;
  v20 = 0;
  do
  {
    v100 = v18;
    v21 = *v18;
    sub_22F1E2F68(a2, *(_DWORD *)(*v18 + 12), 1, (uint64_t)&v115);
    if (v115)
      v22 = DWORD1(v116);
    else
      v22 = 0;
    v104 = v22;
    if (*(_DWORD *)(v21 + 44))
    {
      v23 = 0;
      while (1)
      {
        v102 = v19;
        v25 = v105;
        v24 = (uint64_t)v106;
        while ((void *)v25 != v106)
        {
          if (*(_BYTE *)(v21 + 48)
            || ((sub_22F1E2F68(a2, *(_DWORD *)v25, 1, (uint64_t)&v115), v115) ? (v26 = DWORD1(v116)) : (v26 = 0),
                v104 == v26))
          {
            v27 = *(_DWORD *)(v21 + 12);
            if (!v27 || *(_BYTE *)(v21 + 49) != 0)
              goto LABEL_73;
            for (i = *(_DWORD *)v25; (i & 0x80000000) != 0; i = sub_22F2AB344((_QWORD *)a2, i))
              ;
            if (sub_22E670F58(a2, v27, i))
              goto LABEL_73;
            v30 = *(_DWORD *)(a2 + 304);
            v31 = v30 + 1;
            if (v30 + 1 > 1)
            {
              if ((v30 & 0x80000000) != 0)
              {
                v33 = -2 - v30;
                v32 = (_DWORD *)(((*(_QWORD *)(*(_QWORD *)(a2 + 224) + 8 * ((-2 - v30) >> 6)) >> (-2
                                                                                                  - v30)) & 1) != 0
                               ? *(_QWORD *)(a2 + 200) + 24 * v33
                               : sub_22F1E1134(a2, v33, 0));
              }
              else
              {
                v32 = (_DWORD *)(*(_QWORD *)(a2 + 184) + 24 * v30);
              }
            }
            else
            {
              v32 = *(_DWORD **)(a2 + 184);
            }
            if ((*v32 & 0x7FFFFFFFu) <= i
              && (v30 == -2
               || (v31 != *(_DWORD *)(a2 + 192)
                 ? ((v31 & 0x80000000) != 0
                  ? ((v37 = -3 - v30,
                      ((*(_QWORD *)(*(_QWORD *)(a2 + 224) + 8 * ((-3 - v30) >> 6)) >> (-3 - v30)) & 1) == 0)
                   ? (v36 = (_DWORD *)sub_22F1E1134(a2, v37, 0))
                   : (v36 = (_DWORD *)(*(_QWORD *)(a2 + 200) + 24 * v37)))
                  : (v36 = (_DWORD *)(*(_QWORD *)(a2 + 184) + 24 * v31)),
                    v35 = *v36 & 0x7FFFFFFF)
                 : (v35 = *(_DWORD *)(a2 + 216)),
                   v35 > i)))
            {
              v34 = *(_DWORD *)(a2 + 304);
            }
            else
            {
              v34 = sub_22F1E1EE8(a2, i);
            }
            v38 = sub_22E6155EC((_QWORD *)a2, v34);
            if (!v38 && sub_22F2A4A8C(a2, v27))
              goto LABEL_73;
            v39 = *(_DWORD *)(a2 + 304);
            v40 = v39 + 1;
            if (v39 + 1 > 1)
            {
              if ((v39 & 0x80000000) != 0)
              {
                v42 = -2 - v39;
                v41 = (_DWORD *)(((*(_QWORD *)(*(_QWORD *)(a2 + 224) + 8 * ((-2 - v39) >> 6)) >> (-2
                                                                                                  - v39)) & 1) != 0
                               ? *(_QWORD *)(a2 + 200) + 24 * v42
                               : sub_22F1E1134(a2, v42, 0));
              }
              else
              {
                v41 = (_DWORD *)(*(_QWORD *)(a2 + 184) + 24 * v39);
              }
            }
            else
            {
              v41 = *(_DWORD **)(a2 + 184);
            }
            v43 = v27 & 0x7FFFFFFF;
            if ((*v41 & 0x7FFFFFFFu) > v43)
              goto LABEL_59;
            if (v39 == -2
              || (v40 != *(_DWORD *)(a2 + 192)
                ? ((v40 & 0x80000000) != 0
                 ? ((v47 = -3 - v39,
                     ((*(_QWORD *)(*(_QWORD *)(a2 + 224) + 8 * ((-3 - v39) >> 6)) >> (-3 - v39)) & 1) == 0)
                  ? (v46 = (_DWORD *)sub_22F1E1134(a2, v47, 0))
                  : (v46 = (_DWORD *)(*(_QWORD *)(a2 + 200) + 24 * v47)))
                 : (v46 = (_DWORD *)(*(_QWORD *)(a2 + 184) + 24 * v40)),
                   v45 = *v46 & 0x7FFFFFFF)
                : (v45 = *(_DWORD *)(a2 + 216)),
                  v45 > v43))
            {
              v44 = *(_DWORD *)(a2 + 304);
            }
            else
            {
LABEL_59:
              v44 = sub_22F1E1EE8(a2, v43);
            }
            if (v38 == sub_22E6155EC((_QWORD *)a2, v44))
            {
LABEL_73:
              v48 = *(_BYTE *)(v25 + 31);
              v49 = v48 >= 0 ? v25 + 8 : *(_QWORD *)(v25 + 8);
              v50 = v48 >= 0 ? v48 & 0x7F : *(_QWORD *)(v25 + 16);
              if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21 + 24))(v21, v49, v50) & 1) != 0)
              {
                if ((void *)(v25 + 32) == v106)
                {
                  v56 = v25;
                  v19 = v102;
                }
                else
                {
                  v19 = v102;
                  do
                  {
                    *(_DWORD *)v25 = *(_DWORD *)(v25 + 32);
                    v55 = (void **)(v25 + 8);
                    if (*(char *)(v25 + 31) < 0)
                      operator delete(*v55);
                    *(_OWORD *)v55 = *(_OWORD *)(v25 + 40);
                    *(_QWORD *)(v25 + 24) = *(_QWORD *)(v25 + 56);
                    *(_BYTE *)(v25 + 63) = 0;
                    *(_BYTE *)(v25 + 40) = 0;
                    v56 = v25 + 32;
                    v57 = v25 + 64;
                    v25 += 32;
                  }
                  while (v57 != v24);
                }
                while (v24 != v56)
                {
                  if (*(char *)(v24 - 1) < 0)
                    operator delete(*(void **)(v24 - 24));
                  v24 -= 32;
                }
                v106 = (void *)v56;
                goto LABEL_116;
              }
            }
          }
          v25 += 32;
        }
        if (v23 >= *(_DWORD *)(v21 + 40))
          break;
        v19 = v102;
        if (v20 < v101)
        {
          *(_QWORD *)v20 = v21;
          v20 += 8;
          goto LABEL_116;
        }
        v51 = (v20 - v102) >> 3;
        v52 = v51 + 1;
        if ((unint64_t)(v51 + 1) >> 61)
          goto LABEL_183;
        if ((v101 - v102) >> 2 > v52)
          v52 = (v101 - v102) >> 2;
        if ((unint64_t)(v101 - v102) >= 0x7FFFFFFFFFFFFFF8)
          v53 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v53 = v52;
        if (v53)
        {
          if (v53 >> 61)
            sub_22E3B3F8C();
          v54 = (char *)operator new(8 * v53);
        }
        else
        {
          v54 = 0;
        }
        v58 = &v54[8 * v51];
        *(_QWORD *)v58 = v21;
        v59 = v58 + 8;
        while (v20 != v102)
        {
          v60 = *((_QWORD *)v20 - 1);
          v20 -= 8;
          *((_QWORD *)v58 - 1) = v60;
          v58 -= 8;
        }
        v101 = &v54[8 * v53];
        if (v102)
          operator delete(v102);
        v20 = v59;
        v19 = v58;
LABEL_116:
        if (++v23 >= *(_DWORD *)(v21 + 44))
          goto LABEL_119;
      }
      v19 = v102;
    }
LABEL_119:
    v18 = v100 + 1;
  }
  while (v100 + 1 != v99);
  if (v19 == v20)
  {
    v61 = 0;
    v62 = v20;
    goto LABEL_123;
  }
  v115 = v117;
  v116 = xmmword_22F44E320;
  sub_22F242C48((uint64_t)v111, (uint64_t)&v115);
  v103 = v19;
  v64 = v19;
  do
  {
    v65 = *(_QWORD *)v64;
    if (*(_DWORD *)(*(_QWORD *)v64 + 12) && !*(_BYTE *)(v65 + 49))
    {
      if ((unint64_t)(v112 - v113) > 7)
      {
        *(_QWORD *)v113 = 0x20656C694620200ALL;
        v113 += 8;
        v85 = v111;
      }
      else
      {
        v85 = (_BYTE *)llvm::raw_ostream::write((llvm::raw_ostream *)v111, "\n  File ");
      }
      v87 = (const char *)sub_22F1E27D0((_QWORD *)a2, *(_DWORD *)(v65 + 12));
      v88 = v86;
      v89 = (void *)*((_QWORD *)v85 + 4);
      if (v86 > *((_QWORD *)v85 + 3) - (_QWORD)v89)
      {
        v67 = (llvm::raw_ostream *)v85;
        v68 = v87;
        goto LABEL_133;
      }
      if (v86)
      {
        memcpy(v89, v87, v86);
        *((_QWORD *)v85 + 4) += v88;
      }
    }
    else
    {
      v66 = (_QWORD *)v113;
      if ((unint64_t)(v112 - v113) <= 8)
      {
        v67 = (llvm::raw_ostream *)v111;
        v68 = "\n  File *";
LABEL_133:
        llvm::raw_ostream::write(v67, v68);
        goto LABEL_134;
      }
      *(_BYTE *)(v113 + 8) = 42;
      *v66 = *(_QWORD *)"\n  File *";
      v113 += 9;
    }
LABEL_134:
    v69 = (_DWORD *)v113;
    v70 = v112 - v113;
    if (*(_BYTE *)(v65 + 48))
    {
      if (v70 > 6)
      {
        *(_DWORD *)(v113 + 3) = 706766190;
        *v69 = 1852394528;
        v113 += 7;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v111, " Line *");
      }
    }
    else
    {
      if (v70 > 5)
      {
        *(_WORD *)(v113 + 4) = 8293;
        *v69 = 1852394528;
        v113 += 6;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v111, " Line ");
      }
      sub_22F1E2F68(a2, *(_DWORD *)(v65 + 12), 1, (uint64_t)v108);
      llvm::raw_ostream::operator<<();
    }
    if (*(_DWORD *)(v65 + 8) != *(_DWORD *)(v65 + 12))
    {
      v71 = v113;
      if ((unint64_t)(v112 - v113) > 0xE)
      {
        *(_QWORD *)v113 = *(_QWORD *)" (directive at ";
        *(_QWORD *)(v71 + 7) = *(_QWORD *)"tive at ";
        v113 += 15;
        v72 = (llvm::raw_ostream *)v111;
      }
      else
      {
        v72 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)v111, " (directive at ");
      }
      v74 = (const void *)sub_22F1E27D0((_QWORD *)a2, *(_DWORD *)(v65 + 8));
      v75 = v73;
      v76 = (void *)*((_QWORD *)v72 + 4);
      if (v73 <= *((_QWORD *)v72 + 3) - (_QWORD)v76)
      {
        if (v73)
        {
          memcpy(v76, v74, v73);
          *((_QWORD *)v72 + 4) += v75;
        }
      }
      else
      {
        v72 = (llvm::raw_ostream *)llvm::raw_ostream::write(v72, (const char *)v74);
      }
      v77 = (_BYTE *)*((_QWORD *)v72 + 4);
      if ((unint64_t)v77 >= *((_QWORD *)v72 + 3))
      {
        llvm::raw_ostream::write(v72);
      }
      else
      {
        *((_QWORD *)v72 + 4) = v77 + 1;
        *v77 = 58;
      }
      sub_22F1E2F68(a2, *(_DWORD *)(v65 + 8), 1, (uint64_t)v108);
      v78 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
      v79 = (_BYTE *)*((_QWORD *)v78 + 4);
      if ((unint64_t)v79 >= *((_QWORD *)v78 + 3))
      {
        llvm::raw_ostream::write(v78);
      }
      else
      {
        *((_QWORD *)v78 + 4) = v79 + 1;
        *v79 = 41;
      }
    }
    if ((unint64_t)(v112 - v113) > 1)
    {
      *(_WORD *)v113 = 8250;
      v113 += 2;
      v80 = (llvm::raw_ostream *)v111;
    }
    else
    {
      v80 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)v111, ": ");
    }
    v83 = *(const char **)(v65 + 16);
    v82 = v65 + 16;
    v81 = v83;
    if (*(char *)(v82 + 23) >= 0)
      v84 = (const char *)v82;
    else
      v84 = v81;
    llvm::raw_ostream::write(v80, v84);
    v64 += 8;
  }
  while (v64 != v20);
  v90 = a1;
  *(_QWORD *)(a1 + 312) = 0x33200000000;
  if (*(char *)(a1 + 311) < 0)
  {
    **(_BYTE **)(a1 + 288) = 0;
    *(_QWORD *)(a1 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 288) = 0;
    *(_BYTE *)(a1 + 311) = 0;
  }
  v62 = v103;
  v108[0] = (unsigned __int8 *)(a1 + 320);
  v108[1] = 0;
  v108[2] = (unsigned __int8 *)a1;
  v109 = 1;
  *(_BYTE *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 664) = 0;
  v91 = *(unsigned int *)(a1 + 776);
  if ((_DWORD)v91)
  {
    v92 = *(_QWORD *)(a1 + 768);
    v93 = 56 * v91;
    do
    {
      if (*(char *)(v92 + v93 - 9) < 0)
        operator delete(*(void **)(v92 + v93 - 32));
      v93 -= 56;
    }
    while (v93);
    LODWORD(v91) = *(unsigned __int8 *)(a1 + 320);
    v90 = a1;
  }
  *(_DWORD *)(v90 + 776) = 0;
  v110 = 1;
  v94 = v114;
  *(_BYTE *)(v90 + 321 + v91) = 1;
  *(_QWORD *)(v90 + 336 + 8 * v91) = a3;
  v95 = (v91 + 1);
  *(_BYTE *)(v90 + 321 + v95) = 2;
  *(_BYTE *)(v90 + 320) = v91 + 2;
  *(_QWORD *)(v90 + 336 + 8 * v95) = 0;
  sub_22E3B89A8(v108, *(void **)v94, *(_QWORD *)(v94 + 8));
  sub_22E3BB0B8((uint64_t)v108);
  v61 = (unint64_t)(v20 - v103) >> 3;
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v111);
  if (v115 != v117)
    free(v115);
LABEL_123:
  if ((a7 & 1) == 0)
    v61 = sub_22E74ECD8(a1, a2, v105, (uint64_t)v106, a3) + v61;
  v115 = &v105;
  sub_22E746E58((void ***)&v115);
  if (v62)
    operator delete(v62);
  return v61;
}

uint64_t sub_22E7504E4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FA71A00;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_22E750520(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FA71A00;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E75056C()
{
  return 1;
}

BOOL sub_22E750574()
{
  return llvm::StringRef::find() != -1;
}

uint64_t sub_22E7505C4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FA71A30;
  llvm::Regex::~Regex((llvm::Regex *)(a1 + 56));
  *(_QWORD *)a1 = off_24FA71A00;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_22E750610(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FA71A30;
  llvm::Regex::~Regex((llvm::Regex *)(a1 + 56));
  *(_QWORD *)a1 = off_24FA71A00;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E75066C()
{
  return llvm::Regex::isValid();
}

uint64_t sub_22E750674()
{
  return llvm::Regex::match();
}

uint64_t sub_22E750684(uint64_t a1)
{
  unint64_t v1;

  v1 = ((unint64_t)*(unsigned int *)(a1 + 16) >> 19) & 0x1FF;
  if (v1 > 0x10D)
    return 0;
  else
    return dword_22F45E2D8[v1];
}

uint64_t sub_22E7506AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  unint64_t v7;
  _DWORD *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;

  if ((a1 & 7u) >= 2)
  {
    if ((a1 & 7) == 2)
      LODWORD(v1) = 1;
    else
      LODWORD(v1) = *(_DWORD *)(a1 & 0xFFFFFFFFFFFFFFF8) - 3;
  }
  else
  {
    LODWORD(v1) = 0;
  }
  v2 = 0;
  if (v1 <= 1)
    v1 = 1;
  else
    v1 = v1;
  v3 = a1 & 7;
  v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  v5 = (a1 & 0xFFFFFFFFFFFFFFF8) + 16;
  result = 5381;
  do
  {
    v7 = v4;
    if (v3 == 7)
      v7 = *(_QWORD *)(v5 + 8 * v2);
    if (v7)
    {
      v8 = *(_DWORD **)(v7 + 16);
      v11 = *v8;
      v9 = (unsigned __int8 *)(v8 + 4);
      v10 = v11;
      if (v11)
      {
        do
        {
          v12 = *v9++;
          result = (33 * result + v12);
          --v10;
        }
        while (v10);
      }
    }
    ++v2;
  }
  while (v2 != v1);
  return result;
}

uint64_t sub_22E750738(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  int v19;
  unsigned int v20;
  unint64_t v22;
  unint64_t v23;

  if ((*(_WORD *)(a1 + 30) & 0x180) == 0)
    goto LABEL_6;
  v2 = *(_QWORD *)(a1 + 16);
  v3 = v2 & 0xFFFFFFFFFFFFFFF8;
  if ((v2 & 4) != 0)
    v3 = *(_QWORD *)(v3 + 8);
  if (sub_22EFC7ADC(v3) && (v4 = *(_DWORD *)(a1 + 28), (v4 & 0x7Fu) - 33 >= 5))
  {
    if ((v4 & 0x7Eu) - 58 >= 0xFFFFFFFA)
    {
      v22 = *(_QWORD *)(a1 + 144);
      v11 = (v22 & 6) == 0 && v22 >= 8;
      return !v11;
    }
    if ((v4 & 0x7Fu) - 38 < 0xFFFFFFFD)
      return 1;
    v23 = *(_QWORD *)(a1 + 136);
    if (v23 < 8)
      return 1;
    else
      return (v23 >> 2) & 1;
  }
  else
  {
LABEL_6:
    v5 = *(_QWORD *)(a1 + 16);
    v6 = v5 & 0xFFFFFFFFFFFFFFF8;
    v7 = v5 & 0xFFFFFFFFFFFFFFF8;
    if ((v5 & 4) != 0)
      v7 = *(_QWORD *)(v6 + 8);
    v8 = *(_WORD *)(v7 + 8) & 0x7F;
    v9 = v8 > 0x18 || ((1 << v8) & 0x1000006) == 0;
    if (v9 && v8 - 52 > 5)
    {
      if (!*(_QWORD *)(a1 + 40))
      {
        if ((v5 & 4) != 0)
          v6 = *(_QWORD *)(v6 + 8);
        if ((*(_WORD *)(v6 + 8) & 0x7F) == 0x16 || (*(_WORD *)(v6 + 8) & 0x7Eu) - 34 <= 3)
        {
          v19 = *(_DWORD *)(a1 + 28) & 0x7F;
          v20 = v19 - 33;
          LODWORD(v12) = (v19 - 49) < 3;
          if (v20 >= 5)
            return v12;
          else
            return 1;
        }
      }
      return 0;
    }
    v10 = *(_DWORD *)(a1 + 28) & 0x7F;
    if ((v10 - 67) < 0xFFFFFFF9)
    {
      v11 = v10 != 1 && (v10 - 33) >= 5;
      return !v11;
    }
    v13 = *(_BYTE *)(a1 + 96);
    if ((v13 & 7) != 2 && ((*(_BYTE *)(a1 + 96) & 7) != 0 || (v13 & 0x18) != 0x10))
      return 0;
    v12 = 1;
    if (v10 != 64 && v10 != 62)
    {
      if ((v5 & 4) != 0)
        v6 = *(_QWORD *)(v6 + 8);
      v14 = sub_22EFCBB30(v6);
      v12 = 0;
      v15 = *(_WORD *)(v14 + 8) & 0x7F;
      if (v15 != 16 && v15 != 83)
      {
        if ((*(_DWORD *)(a1 + 28) & 0x7F) != 0x40)
        {
          v16 = *(_QWORD *)(a1 + 16);
          v17 = v16 & 0xFFFFFFFFFFFFFFF8;
          if ((v16 & 4) != 0)
            v17 = *(_QWORD *)v17;
          v11 = __CFADD__((*(_WORD *)(v17 + 8) & 0x7E) - 38, 4);
          return !v11;
        }
        return 1;
      }
    }
  }
  return v12;
}

uint64_t sub_22E750938(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16), a2, a3);
}

uint64_t sub_22E750988(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a2, a3);
}

uint64_t sub_22E7509D8(uint64_t a1, _DWORD **a2, uint64_t a3)
{
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v12;
  _DWORD *v13;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = *a2;
  v13 = v7;
  if (v7)
    ++*v7;
  if (((*(uint64_t (**)(uint64_t, _DWORD **, uint64_t))(*(_QWORD *)v6 + 56))(v6, &v13, a3) & 1) != 0)
  {
    v8 = 1;
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 16);
    v10 = *a2;
    v12 = v10;
    if (v10)
      ++*v10;
    v8 = (*(uint64_t (**)(uint64_t, _DWORD **, uint64_t))(*(_QWORD *)v9 + 56))(v9, &v12, a3);
    sub_22E3B3C18((uint64_t *)&v12);
  }
  sub_22E3B3C18((uint64_t *)&v13);
  return v8;
}

uint64_t sub_22E750A90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8)) & 1) != 0)
    return 1;
  else
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 64))(*(_QWORD *)(a1 + 16), a2, a3);
}

uint64_t sub_22E750AF8(uint64_t a1)
{
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8)) & 1) != 0)
    return 1;
  else
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 112))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_22E750B44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8));
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 104))(*(_QWORD *)(a1 + 16), a2, a3, a4);
}

#error "22E750B9C: too big function (funcsize=0)"

uint64_t sub_22E767250(unsigned __int8 *a1, void **a2, uint64_t a3, int a4)
{
  void **v5;
  signed __int8 v7;
  uint64_t v8;
  void *v9;
  signed __int8 v10;
  int v11;
  void *v12;
  unsigned __int8 *v14;
  unsigned __int8 **v15;
  signed __int8 v16;
  uint64_t v17;
  void *v18;
  char v19;
  int v20;
  void *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  _BOOL8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  signed __int8 v29;
  BOOL v30;
  void *v31;
  size_t v32;
  size_t v33;
  char v34;
  BOOL v35;
  size_t v36;
  void *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  unsigned int v42;
  int v43;
  unsigned __int8 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  signed __int8 v48;
  BOOL v49;
  void *v50;
  size_t v51;
  size_t v52;
  void *v53;
  size_t v54;
  size_t v55;
  signed __int8 v56;
  uint64_t v57;
  void *v58;
  char v59;
  int v60;
  void *v61;
  unsigned __int8 *v62;
  unsigned __int8 *v63;
  void **v64;
  void **v65;
  void *v66;
  size_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 *v71;
  void **v72;
  uint64_t v73;
  void **v74;
  void **v75;
  void *v76;
  size_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int8 *v81;
  void **v82;
  uint64_t v83;
  signed __int8 v84;
  uint64_t v85;
  void *v86;
  char v87;
  int v88;
  void *v89;
  unsigned __int8 *v90;
  unsigned __int8 *v91;
  unsigned __int8 *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  signed __int8 v96;
  BOOL v97;
  void *v98;
  size_t v99;
  size_t v100;
  unsigned __int8 *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  signed __int8 v106;
  BOOL v107;
  void *v108;
  size_t v109;
  size_t v110;
  void **v111;
  uint64_t v112;
  uint64_t v113;
  __int16 v114;
  char v115;
  unsigned __int8 *v116;
  unsigned __int8 *v117;
  unsigned __int8 *v118;
  unsigned __int8 *v119;
  void *v120;
  uint64_t v121;
  _BYTE v122[64];
  void *v123;
  uint64_t v124;
  _BYTE v125[64];
  void *__base;
  size_t __nel;
  _BYTE v128[64];
  unsigned __int8 *v129;
  uint64_t v130;
  uint64_t v131;
  __int16 v132;
  uint64_t v133;

  v5 = a2;
  v133 = *MEMORY[0x24BDAC8D0];
  v7 = a1[23];
  v8 = v7 & 0x7F;
  if (v7 >= 0)
    v9 = (void *)(v7 & 0x7F);
  else
    v9 = (void *)*((_QWORD *)a1 + 1);
  v10 = *((_BYTE *)a2 + 23);
  v11 = v10;
  v12 = (void *)(v10 & 0x7F);
  if (v11 < 0)
    v12 = a2[1];
  if (v9 != v12)
    goto LABEL_16;
  if (v11 < 0)
    a2 = (void **)*a2;
  if ((a1[23] & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)))
      goto LABEL_16;
  }
  else if ((v7 & 0x7F) != 0)
  {
    v14 = a1;
    while (*v14 == *(unsigned __int8 *)a2)
    {
      ++v14;
      a2 = (void **)((char *)a2 + 1);
      if (!--v8)
        goto LABEL_19;
    }
LABEL_16:
    if (a3)
    {
      *(_QWORD *)(a3 + 312) = 0x3A500000000;
      if (*(char *)(a3 + 311) < 0)
      {
        **(_BYTE **)(a3 + 288) = 0;
        *(_QWORD *)(a3 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(a3 + 288) = 0;
        *(_BYTE *)(a3 + 311) = 0;
      }
      v24 = (unsigned __int8 *)(a3 + 320);
      v129 = (unsigned __int8 *)(a3 + 320);
      v130 = 0;
      v131 = a3;
      v25 = 1;
      v132 = 1;
      *(_BYTE *)(a3 + 320) = 0;
      *(_DWORD *)(a3 + 664) = 0;
      v26 = *(unsigned int *)(a3 + 776);
      if ((_DWORD)v26)
      {
        v27 = *(_QWORD *)(a3 + 768);
        v28 = 56 * v26;
        do
        {
          if (*(char *)(v27 + v28 - 9) < 0)
            operator delete(*(void **)(v27 + v28 - 32));
          v28 -= 56;
        }
        while (v28);
        LODWORD(v26) = *v24;
      }
      *(_DWORD *)(a3 + 776) = 0;
      v24[v26 + 1] = 1;
      *(_BYTE *)(a3 + 320) = v26 + 1;
      *(_QWORD *)&v24[8 * v26 + 16] = "target";
      v29 = a1[23];
      v30 = v29 < 0;
      if (v29 >= 0)
        v31 = a1;
      else
        v31 = *(void **)a1;
      v32 = v29 & 0x7F;
      if (v30)
        v33 = *((_QWORD *)a1 + 1);
      else
        v33 = v32;
      sub_22E3B89A8(&v129, v31, v33);
      v34 = *((_BYTE *)v5 + 23);
      v35 = v34 < 0;
      v36 = (size_t)v5[1];
      if (v34 >= 0)
        v37 = v5;
      else
        v37 = *v5;
      goto LABEL_79;
    }
    return 1;
  }
LABEL_19:
  v15 = (unsigned __int8 **)(v5 + 15);
  v16 = a1[143];
  v17 = v16 & 0x7F;
  if (v16 >= 0)
    v18 = (void *)(v16 & 0x7F);
  else
    v18 = (void *)*((_QWORD *)a1 + 16);
  v19 = *((_BYTE *)v5 + 143);
  v20 = v19;
  v21 = (void *)(v19 & 0x7F);
  if (v20 < 0)
    v21 = v5[16];
  if (v18 != v21)
    goto LABEL_51;
  if (v20 >= 0)
    v22 = (unsigned __int8 *)(v5 + 15);
  else
    v22 = *v15;
  if ((a1[143] & 0x80) != 0)
  {
    if (memcmp(*((const void **)a1 + 15), v22, *((_QWORD *)a1 + 16)))
    {
LABEL_51:
      if (!a3)
        return 1;
      *(_QWORD *)(a3 + 312) = 0x3A500000000;
      if (*(char *)(a3 + 311) < 0)
      {
        **(_BYTE **)(a3 + 288) = 0;
        *(_QWORD *)(a3 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(a3 + 288) = 0;
        *(_BYTE *)(a3 + 311) = 0;
      }
      v44 = (unsigned __int8 *)(a3 + 320);
      v129 = (unsigned __int8 *)(a3 + 320);
      v130 = 0;
      v131 = a3;
      v25 = 1;
      v132 = 1;
      *(_BYTE *)(a3 + 320) = 0;
      *(_DWORD *)(a3 + 664) = 0;
      v45 = *(unsigned int *)(a3 + 776);
      if ((_DWORD)v45)
      {
        v46 = *(_QWORD *)(a3 + 768);
        v47 = 56 * v45;
        do
        {
          if (*(char *)(v46 + v47 - 9) < 0)
            operator delete(*(void **)(v46 + v47 - 32));
          v47 -= 56;
        }
        while (v47);
        LODWORD(v45) = *v44;
      }
      *(_DWORD *)(a3 + 776) = 0;
      v44[v45 + 1] = 1;
      *(_BYTE *)(a3 + 320) = v45 + 1;
      *(_QWORD *)&v44[8 * v45 + 16] = "target ABI";
      v48 = a1[143];
      v49 = v48 < 0;
      if (v48 >= 0)
        v50 = a1 + 120;
      else
        v50 = (void *)*((_QWORD *)a1 + 15);
      v51 = v48 & 0x7F;
      if (v49)
        v52 = *((_QWORD *)a1 + 16);
      else
        v52 = v51;
      sub_22E3B89A8(&v129, v50, v52);
      v34 = *((_BYTE *)v5 + 143);
      v35 = v34 < 0;
      v53 = v5[15];
      v36 = (size_t)v5[16];
LABEL_76:
      if (v35)
        v37 = v53;
      else
        v37 = v15;
LABEL_79:
      v54 = v34 & 0x7F;
      if (v35)
        v55 = v36;
      else
        v55 = v54;
      sub_22E3B89A8(&v129, v37, v55);
      sub_22E3BB0B8((uint64_t)&v129);
      return v25;
    }
  }
  else if ((v16 & 0x7F) != 0)
  {
    v23 = a1 + 120;
    while (*v23 == *v22)
    {
      ++v23;
      ++v22;
      if (!--v17)
        goto LABEL_54;
    }
    goto LABEL_51;
  }
LABEL_54:
  if ((a4 & 1) == 0)
  {
    v15 = (unsigned __int8 **)(v5 + 6);
    v56 = a1[71];
    v57 = v56 & 0x7F;
    if (v56 >= 0)
      v58 = (void *)(v56 & 0x7F);
    else
      v58 = (void *)*((_QWORD *)a1 + 7);
    v59 = *((_BYTE *)v5 + 71);
    v60 = v59;
    v61 = (void *)(v59 & 0x7F);
    if (v60 < 0)
      v61 = v5[7];
    if (v58 == v61)
    {
      if (v60 >= 0)
        v62 = (unsigned __int8 *)(v5 + 6);
      else
        v62 = *v15;
      if ((a1[71] & 0x80) == 0)
      {
        if ((v56 & 0x7F) != 0)
        {
          v63 = a1 + 48;
          while (*v63 == *v62)
          {
            ++v63;
            ++v62;
            if (!--v57)
              goto LABEL_143;
          }
          goto LABEL_140;
        }
LABEL_143:
        v15 = (unsigned __int8 **)(v5 + 9);
        v84 = a1[95];
        v85 = v84 & 0x7F;
        if (v84 >= 0)
          v86 = (void *)(v84 & 0x7F);
        else
          v86 = (void *)*((_QWORD *)a1 + 10);
        v87 = *((_BYTE *)v5 + 95);
        v88 = v87;
        v89 = (void *)(v87 & 0x7F);
        if (v88 < 0)
          v89 = v5[10];
        if (v86 == v89)
        {
          if (v88 >= 0)
            v90 = (unsigned __int8 *)(v5 + 9);
          else
            v90 = *v15;
          if ((a1[95] & 0x80) != 0)
          {
            if (!memcmp(*((const void **)a1 + 9), v90, *((_QWORD *)a1 + 10)))
              goto LABEL_55;
          }
          else
          {
            if ((v84 & 0x7F) == 0)
              goto LABEL_55;
            v91 = a1 + 72;
            while (*v91 == *v90)
            {
              ++v91;
              ++v90;
              if (!--v85)
                goto LABEL_55;
            }
          }
        }
        if (!a3)
          return 1;
        *(_QWORD *)(a3 + 312) = 0x3A500000000;
        if (*(char *)(a3 + 311) < 0)
        {
          **(_BYTE **)(a3 + 288) = 0;
          *(_QWORD *)(a3 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(a3 + 288) = 0;
          *(_BYTE *)(a3 + 311) = 0;
        }
        v102 = (unsigned __int8 *)(a3 + 320);
        v129 = (unsigned __int8 *)(a3 + 320);
        v130 = 0;
        v131 = a3;
        v25 = 1;
        v132 = 1;
        *(_BYTE *)(a3 + 320) = 0;
        *(_DWORD *)(a3 + 664) = 0;
        v103 = *(unsigned int *)(a3 + 776);
        if ((_DWORD)v103)
        {
          v104 = *(_QWORD *)(a3 + 768);
          v105 = 56 * v103;
          do
          {
            if (*(char *)(v104 + v105 - 9) < 0)
              operator delete(*(void **)(v104 + v105 - 32));
            v105 -= 56;
          }
          while (v105);
          LODWORD(v103) = *v102;
        }
        *(_DWORD *)(a3 + 776) = 0;
        v102[v103 + 1] = 1;
        *(_BYTE *)(a3 + 320) = v103 + 1;
        *(_QWORD *)&v102[8 * v103 + 16] = "tune CPU";
        v106 = a1[95];
        v107 = v106 < 0;
        if (v106 >= 0)
          v108 = a1 + 72;
        else
          v108 = (void *)*((_QWORD *)a1 + 9);
        v109 = v106 & 0x7F;
        if (v107)
          v110 = *((_QWORD *)a1 + 10);
        else
          v110 = v109;
        sub_22E3B89A8(&v129, v108, v110);
        v34 = *((_BYTE *)v5 + 95);
        v35 = v34 < 0;
        v53 = v5[9];
        v36 = (size_t)v5[10];
        goto LABEL_76;
      }
      if (!memcmp(*((const void **)a1 + 6), v62, *((_QWORD *)a1 + 7)))
        goto LABEL_143;
    }
LABEL_140:
    if (!a3)
      return 1;
    *(_QWORD *)(a3 + 312) = 0x3A500000000;
    if (*(char *)(a3 + 311) < 0)
    {
      **(_BYTE **)(a3 + 288) = 0;
      *(_QWORD *)(a3 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(a3 + 288) = 0;
      *(_BYTE *)(a3 + 311) = 0;
    }
    v92 = (unsigned __int8 *)(a3 + 320);
    v129 = (unsigned __int8 *)(a3 + 320);
    v130 = 0;
    v131 = a3;
    v25 = 1;
    v132 = 1;
    *(_BYTE *)(a3 + 320) = 0;
    *(_DWORD *)(a3 + 664) = 0;
    v93 = *(unsigned int *)(a3 + 776);
    if ((_DWORD)v93)
    {
      v94 = *(_QWORD *)(a3 + 768);
      v95 = 56 * v93;
      do
      {
        if (*(char *)(v94 + v95 - 9) < 0)
          operator delete(*(void **)(v94 + v95 - 32));
        v95 -= 56;
      }
      while (v95);
      LODWORD(v93) = *v92;
    }
    *(_DWORD *)(a3 + 776) = 0;
    v92[v93 + 1] = 1;
    *(_BYTE *)(a3 + 320) = v93 + 1;
    *(_QWORD *)&v92[8 * v93 + 16] = "target CPU";
    v96 = a1[71];
    v97 = v96 < 0;
    if (v96 >= 0)
      v98 = a1 + 48;
    else
      v98 = (void *)*((_QWORD *)a1 + 6);
    v99 = v96 & 0x7F;
    if (v97)
      v100 = *((_QWORD *)a1 + 7);
    else
      v100 = v99;
    sub_22E3B89A8(&v129, v98, v100);
    v34 = *((_BYTE *)v5 + 71);
    v35 = v34 < 0;
    v53 = v5[6];
    v36 = (size_t)v5[7];
    goto LABEL_76;
  }
LABEL_55:
  v38 = (uint64_t *)v5[22];
  v39 = (uint64_t *)v5[23];
  v129 = (unsigned __int8 *)&v131;
  v130 = 0x400000000;
  sub_22E78C830((uint64_t)&v129, v38, v39);
  v40 = (uint64_t *)*((_QWORD *)a1 + 22);
  v41 = (uint64_t *)*((_QWORD *)a1 + 23);
  __base = v128;
  __nel = 0x400000000;
  sub_22E78C830((uint64_t)&__base, v40, v41);
  if (v130 >= 2)
    qsort(v129, v130, 0x10uLL, (int (__cdecl *)(const void *, const void *))sub_22F2BB1DC);
  v42 = __nel;
  if (__nel >= 2)
  {
    qsort(__base, __nel, 0x10uLL, (int (__cdecl *)(const void *, const void *))sub_22F2BB1DC);
    v42 = __nel;
  }
  v123 = v125;
  v124 = 0x400000000;
  v121 = 0x400000000;
  v111 = &v123;
  v119 = v129;
  v120 = v122;
  v117 = (unsigned __int8 *)__base;
  v118 = &v129[16 * v130];
  v116 = (unsigned __int8 *)__base + 16 * v42;
  sub_22E78C964((uint64_t *)&v119, (uint64_t **)&v118, (uint64_t *)&v117, &v116, (uint64_t *)&v111, (uint64_t)&v115);
  v111 = &v120;
  v118 = (unsigned __int8 *)__base + 16 * __nel;
  v119 = (unsigned __int8 *)__base;
  v116 = &v129[16 * v130];
  v117 = v129;
  sub_22E78C964((uint64_t *)&v119, (uint64_t **)&v118, (uint64_t *)&v117, &v116, (uint64_t *)&v111, (uint64_t)&v115);
  v43 = v121;
  if (!a4 || (_DWORD)v121)
  {
    if (a3)
    {
      if ((_DWORD)v121)
      {
        v64 = (void **)v120;
        v65 = (void **)((char *)v120 + 16 * v121);
        do
        {
          v66 = *v64;
          v67 = (size_t)v64[1];
          *(_QWORD *)(a3 + 312) = 0x3A400000000;
          if (*(char *)(a3 + 311) < 0)
          {
            **(_BYTE **)(a3 + 288) = 0;
            *(_QWORD *)(a3 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(a3 + 288) = 0;
            *(_BYTE *)(a3 + 311) = 0;
          }
          v111 = (void **)(a3 + 320);
          v112 = 0;
          v113 = a3;
          v114 = 1;
          *(_BYTE *)(a3 + 320) = 0;
          *(_DWORD *)(a3 + 664) = 0;
          v68 = *(unsigned int *)(a3 + 776);
          if ((_DWORD)v68)
          {
            v69 = *(_QWORD *)(a3 + 768);
            v70 = 56 * v68;
            do
            {
              if (*(char *)(v69 + v70 - 9) < 0)
                operator delete(*(void **)(v69 + v70 - 32));
              v70 -= 56;
            }
            while (v70);
            v71 = (unsigned __int8 *)v111;
            *(_DWORD *)(a3 + 776) = 0;
            if (!v71)
            {
              v71 = (unsigned __int8 *)sub_22E3B8AAC(v112);
              v111 = (void **)v71;
            }
          }
          else
          {
            *(_DWORD *)(a3 + 776) = 0;
            v71 = (unsigned __int8 *)(a3 + 320);
          }
          v71[*v71 + 1] = 2;
          v72 = v111;
          v73 = *(unsigned __int8 *)v111;
          *(_BYTE *)v111 = v73 + 1;
          v72[v73 + 2] = 0;
          sub_22E3B89A8((unsigned __int8 **)&v111, v66, v67);
          sub_22E3BB0B8((uint64_t)&v111);
          v64 += 2;
        }
        while (v64 != v65);
      }
      if ((_DWORD)v124)
      {
        v74 = (void **)v123;
        v75 = (void **)((char *)v123 + 16 * v124);
        do
        {
          v76 = *v74;
          v77 = (size_t)v74[1];
          *(_QWORD *)(a3 + 312) = 0x3A400000000;
          if (*(char *)(a3 + 311) < 0)
          {
            **(_BYTE **)(a3 + 288) = 0;
            *(_QWORD *)(a3 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(a3 + 288) = 0;
            *(_BYTE *)(a3 + 311) = 0;
          }
          v111 = (void **)(a3 + 320);
          v112 = 0;
          v113 = a3;
          v114 = 1;
          *(_BYTE *)(a3 + 320) = 0;
          *(_DWORD *)(a3 + 664) = 0;
          v78 = *(unsigned int *)(a3 + 776);
          if ((_DWORD)v78)
          {
            v79 = *(_QWORD *)(a3 + 768);
            v80 = 56 * v78;
            do
            {
              if (*(char *)(v79 + v80 - 9) < 0)
                operator delete(*(void **)(v79 + v80 - 32));
              v80 -= 56;
            }
            while (v80);
            v81 = (unsigned __int8 *)v111;
            *(_DWORD *)(a3 + 776) = 0;
            if (!v81)
            {
              v81 = (unsigned __int8 *)sub_22E3B8AAC(v112);
              v111 = (void **)v81;
            }
          }
          else
          {
            *(_DWORD *)(a3 + 776) = 0;
            v81 = (unsigned __int8 *)(a3 + 320);
          }
          v81[*v81 + 1] = 2;
          v82 = v111;
          v83 = *(unsigned __int8 *)v111;
          *(_BYTE *)v111 = v83 + 1;
          v82[v83 + 2] = (void *)1;
          sub_22E3B89A8((unsigned __int8 **)&v111, v76, v77);
          sub_22E3BB0B8((uint64_t)&v111);
          v74 += 2;
        }
        while (v74 != v75);
      }
      v43 = v121;
    }
    if (v43)
      v25 = 1;
    else
      v25 = (_DWORD)v124 != 0;
  }
  else
  {
    v25 = 0;
  }
  if (v120 != v122)
    free(v120);
  if (v123 != v125)
    free(v123);
  if (__base != v128)
    free(__base);
  if (v129 != (unsigned __int8 *)&v131)
    free(v129);
  return v25;
}

uint64_t sub_22E767C24(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int v18;
  const void **v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  int v32;
  unsigned int *v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int *v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  unsigned int *v43;
  unsigned int v44;
  unsigned __int8 *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 *v49;
  const char *v50;
  unsigned __int8 *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int16 *v66;
  unint64_t v67;
  std::string::size_type v68;
  unsigned __int16 *v69;
  std::string *p_dst;
  uint64_t v71;
  uint64_t v72;
  std::string *v73;
  std::string::size_type v74;
  void **v75;
  size_t v76;
  _DWORD *v77;
  _DWORD *v78;
  _DWORD *v79;
  _DWORD *v80;
  std::string __dst;
  void *__p[2];
  uint64_t v83;
  unsigned __int8 *v84;
  uint64_t v85;
  uint64_t v86;
  __int16 v87;
  _QWORD v88[3];

  v88[2] = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
  v7 = *(_DWORD **)(v6 + 32);
  v80 = v7;
  if (v7)
  {
    ++*v7;
    v8 = operator new();
    ++*v7;
  }
  else
  {
    v8 = operator new();
  }
  v9 = (_DWORD *)*a2;
  v77 = v9;
  v78 = v7;
  if (v9)
    ++*v9;
  sub_22F1CB3A4(v8, &v78, (uint64_t *)&v77, 0, 1);
  v79 = (_DWORD *)v8;
  ++*(_DWORD *)v8;
  sub_22E3B3C18((uint64_t *)&v77);
  sub_22E3B3D40((uint64_t *)&v78);
  sub_22F20DA74(v8, *a2, 0);
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 144) + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 16) + 152) - 8;
  do
  {
    v11 = *(_QWORD *)v10;
    v10 = *(_QWORD *)(*(_QWORD *)v10 + 3368);
  }
  while (v10 != *(_QWORD *)(v11 + 3376));
  if (*(_DWORD *)(v11 + 4))
    goto LABEL_9;
  v16 = *(_QWORD *)(v11 + 80);
  v14 = v11 + 80;
  v15 = v16;
  v17 = *(_BYTE *)(v14 + 23);
  v18 = v17;
  v19 = (const void **)(v17 >= 0 ? v14 : v15);
  v20 = v17 & 0x7F;
  v21 = v18 >= 0 ? v20 : *(_QWORD *)(v14 + 8);
  v22 = sub_22F138980(*(uint64_t **)(*(_QWORD *)(a1 + 8) + 104), v19, v21, *(unsigned int *)(v14 + 660), 1, 0);
  if (!v22)
    goto LABEL_9;
  v23 = *(_QWORD *)(v6 + 128);
  v24 = *(unsigned __int8 *)(v23 + 24);
  if ((*(_WORD *)(v22 + 1344) & 0x40) == 0)
    goto LABEL_19;
  if ((v24 & 0x10) != 0)
  {
LABEL_9:
    v12 = 0;
    goto LABEL_10;
  }
  if ((*(_BYTE *)(*(_QWORD *)(v8 + 128) + 24) & 0x10) != 0)
  {
    if (!a3)
      goto LABEL_132;
    *(_QWORD *)(v6 + 312) = 0x39C00000000;
    if (*(char *)(v6 + 311) < 0)
    {
      **(_BYTE **)(v6 + 288) = 0;
      *(_QWORD *)(v6 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v6 + 288) = 0;
      *(_BYTE *)(v6 + 311) = 0;
    }
    v51 = (unsigned __int8 *)(v6 + 320);
    v84 = (unsigned __int8 *)(v6 + 320);
    v85 = 0;
    v86 = v6;
    v12 = 1;
    v87 = 1;
    *(_BYTE *)(v6 + 320) = 0;
    *(_DWORD *)(v6 + 664) = 0;
    v52 = *(unsigned int *)(v6 + 776);
    if ((_DWORD)v52)
    {
      v53 = *(_QWORD *)(v6 + 768);
      v54 = 56 * v52;
      do
      {
        if (*(char *)(v53 + v54 - 9) < 0)
          operator delete(*(void **)(v53 + v54 - 32));
        v54 -= 56;
      }
      while (v54);
      LODWORD(v52) = *v51;
    }
    *(_DWORD *)(v6 + 776) = 0;
    v51[v52 + 1] = 1;
    *(_BYTE *)(v6 + 320) = v52 + 1;
    v49 = &v51[8 * v52];
    v50 = "-Wsystem-headers";
    goto LABEL_101;
  }
LABEL_19:
  if ((v24 & 4) != 0 && (*(_BYTE *)(*(_QWORD *)(v8 + 128) + 24) & 4) == 0)
  {
    if (!a3)
      goto LABEL_132;
    *(_QWORD *)(v6 + 312) = 0x39C00000000;
    if (*(char *)(v6 + 311) < 0)
    {
      **(_BYTE **)(v6 + 288) = 0;
      *(_QWORD *)(v6 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v6 + 288) = 0;
      *(_BYTE *)(v6 + 311) = 0;
    }
    v45 = (unsigned __int8 *)(v6 + 320);
    v84 = (unsigned __int8 *)(v6 + 320);
    v85 = 0;
    v86 = v6;
    v12 = 1;
    v87 = 1;
    *(_BYTE *)(v6 + 320) = 0;
    *(_DWORD *)(v6 + 664) = 0;
    v46 = *(unsigned int *)(v6 + 776);
    if ((_DWORD)v46)
    {
      v47 = *(_QWORD *)(v6 + 768);
      v48 = 56 * v46;
      do
      {
        if (*(char *)(v47 + v48 - 9) < 0)
          operator delete(*(void **)(v47 + v48 - 32));
        v48 -= 56;
      }
      while (v48);
      LODWORD(v46) = *v45;
    }
    *(_DWORD *)(v6 + 776) = 0;
    v45[v46 + 1] = 1;
    *(_BYTE *)(v6 + 320) = v46 + 1;
    v49 = &v45[8 * v46];
    v50 = "-Werror";
LABEL_101:
    *((_QWORD *)v49 + 2) = v50;
    sub_22E3BB0B8((uint64_t)&v84);
    goto LABEL_10;
  }
  if ((~v24 & 6) == 0 && (*(_BYTE *)(*(_QWORD *)(v8 + 128) + 24) & 2) == 0)
  {
    if (!a3)
      goto LABEL_132;
    *(_QWORD *)(v6 + 312) = 0x39C00000000;
    if (*(char *)(v6 + 311) < 0)
    {
      **(_BYTE **)(v6 + 288) = 0;
      *(_QWORD *)(v6 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v6 + 288) = 0;
      *(_BYTE *)(v6 + 311) = 0;
    }
    v55 = (unsigned __int8 *)(v6 + 320);
    v84 = (unsigned __int8 *)(v6 + 320);
    v85 = 0;
    v86 = v6;
    v12 = 1;
    v87 = 1;
    *(_BYTE *)(v6 + 320) = 0;
    *(_DWORD *)(v6 + 664) = 0;
    v56 = *(unsigned int *)(v6 + 776);
    if ((_DWORD)v56)
    {
      v57 = *(_QWORD *)(v6 + 768);
      v58 = 56 * v56;
      do
      {
        if (*(char *)(v57 + v58 - 9) < 0)
          operator delete(*(void **)(v57 + v58 - 32));
        v58 -= 56;
      }
      while (v58);
      LODWORD(v56) = *v55;
    }
    *(_DWORD *)(v6 + 776) = 0;
    v55[v56 + 1] = 1;
    *(_BYTE *)(v6 + 320) = v56 + 1;
    v49 = &v55[8 * v56];
    v50 = "-Weverything -Werror";
    goto LABEL_101;
  }
  v25 = *(_DWORD *)(v23 + 28);
  if (v25 != 3)
  {
    if (v25 < 4)
      goto LABEL_40;
LABEL_38:
    v26 = *(_QWORD *)(v8 + 128);
    v27 = *(_DWORD *)(v26 + 28);
    if (v27 == 3)
    {
      if ((*(_BYTE *)(v26 + 24) & 4) != 0)
        goto LABEL_40;
    }
    else if (v27 > 3)
    {
      goto LABEL_40;
    }
    if (!a3)
      goto LABEL_132;
    *(_QWORD *)(v6 + 312) = 0x39C00000000;
    if (*(char *)(v6 + 311) < 0)
    {
      **(_BYTE **)(v6 + 288) = 0;
      *(_QWORD *)(v6 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v6 + 288) = 0;
      *(_BYTE *)(v6 + 311) = 0;
    }
    v59 = (unsigned __int8 *)(v6 + 320);
    v84 = (unsigned __int8 *)(v6 + 320);
    v85 = 0;
    v86 = v6;
    v12 = 1;
    v87 = 1;
    *(_BYTE *)(v6 + 320) = 0;
    *(_DWORD *)(v6 + 664) = 0;
    v60 = *(unsigned int *)(v6 + 776);
    if ((_DWORD)v60)
    {
      v61 = *(_QWORD *)(v6 + 768);
      v62 = 56 * v60;
      do
      {
        if (*(char *)(v61 + v62 - 9) < 0)
          operator delete(*(void **)(v61 + v62 - 32));
        v62 -= 56;
      }
      while (v62);
      LODWORD(v60) = *v59;
    }
    *(_DWORD *)(v6 + 776) = 0;
    v59[v60 + 1] = 1;
    *(_BYTE *)(v6 + 320) = v60 + 1;
    v49 = &v59[8 * v60];
    v50 = "-pedantic-errors";
    goto LABEL_101;
  }
  if ((v24 & 4) != 0)
    goto LABEL_38;
LABEL_40:
  v28 = 0;
  v29 = 0;
  v88[0] = v6;
  v88[1] = v8;
  while (1)
  {
    v30 = v28;
    v31 = *(_QWORD *)(v88[v29] + 128);
    v32 = *(_DWORD *)(v31 + 8);
    v33 = *(unsigned int **)v31;
    v34 = *(unsigned int *)(v31 + 16);
    v35 = &v33[2 * v34];
    if (v32)
    {
      if (v34)
      {
        v36 = 8 * v34;
        v37 = v33;
        while (*v37 >= 0xFFFFFFFE)
        {
          v37 += 2;
          v36 -= 8;
          if (!v36)
            goto LABEL_46;
        }
      }
      else
      {
        v37 = v33;
      }
    }
    else
    {
LABEL_46:
      v37 = &v33[2 * v34];
    }
    v38 = &v33[2 * v34];
    if (v37 != v38)
      break;
LABEL_63:
    v28 = 1;
    v29 = 1;
    if ((v30 & 1) != 0)
      goto LABEL_9;
  }
  v39 = *(_QWORD *)(v6 + 32);
  while (1)
  {
    v40 = *v37;
    if ((int)sub_22F1CF5F4(v39, *v37, 0, v6) >= 4)
      break;
LABEL_57:
    v43 = v37 + 2;
    while (v43 != v35)
    {
      v44 = *v43;
      v43 += 2;
      if (v44 <= 0xFFFFFFFD)
      {
        v37 = v43 - 2;
        goto LABEL_62;
      }
    }
    v37 = v35;
LABEL_62:
    if (v37 == v38)
      goto LABEL_63;
  }
  v41 = sub_22F1CF5F4(*(_QWORD *)(v8 + 32), v40, 0, v8);
  if (v41 > 3 || a3 == 0)
  {
    if (v41 < 4)
      goto LABEL_132;
    goto LABEL_57;
  }
  *(_QWORD *)(v6 + 312) = 0x39C00000000;
  if (*(char *)(v6 + 311) < 0)
  {
    **(_BYTE **)(v6 + 288) = 0;
    *(_QWORD *)(v6 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v6 + 288) = 0;
    *(_BYTE *)(v6 + 311) = 0;
  }
  v84 = (unsigned __int8 *)(v6 + 320);
  v85 = 0;
  v86 = v6;
  v87 = 1;
  *(_BYTE *)(v6 + 320) = 0;
  *(_DWORD *)(v6 + 664) = 0;
  v63 = *(unsigned int *)(v6 + 776);
  if ((_DWORD)v63)
  {
    v64 = *(_QWORD *)(v6 + 768);
    v65 = 56 * v63;
    do
    {
      if (*(char *)(v64 + v65 - 9) < 0)
        operator delete(*(void **)(v64 + v65 - 32));
      v65 -= 56;
    }
    while (v65);
  }
  *(_DWORD *)(v6 + 776) = 0;
  v66 = sub_22F41A9FC(v40);
  if (!v66)
  {
    memset(&__dst, 0, sizeof(__dst));
    goto LABEL_121;
  }
  v68 = v67;
  if (v67 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v69 = v66;
  if (v67 >= 0x17)
  {
    v71 = (v67 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v67 | 7) != 0x17)
      v71 = v67 | 7;
    v72 = v71 + 1;
    p_dst = (std::string *)operator new(v71 + 1);
    __dst.__r_.__value_.__l.__size_ = v68;
    __dst.__r_.__value_.__r.__words[2] = v72 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_119;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v67;
  p_dst = &__dst;
  if (v67)
LABEL_119:
    memmove(p_dst, v69, v68);
  p_dst->__r_.__value_.__s.__data_[v68] = 0;
LABEL_121:
  v73 = std::string::insert(&__dst, 0, "-Werror=");
  v74 = v73->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
  v83 = v74;
  v73->__r_.__value_.__l.__size_ = 0;
  v73->__r_.__value_.__r.__words[2] = 0;
  v73->__r_.__value_.__r.__words[0] = 0;
  if (v83 >= 0)
    v75 = __p;
  else
    v75 = (void **)__p[0];
  if (v83 >= 0)
    v76 = HIBYTE(v83) & 0x7F;
  else
    v76 = (size_t)__p[1];
  sub_22E3B89A8(&v84, v75, v76);
  if (SHIBYTE(v83) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  sub_22E3BB0B8((uint64_t)&v84);
LABEL_132:
  v12 = 1;
LABEL_10:
  sub_22E6C62BC(&v79);
  sub_22E3B3D40((uint64_t *)&v80);
  return v12;
}

uint64_t sub_22E768380(uint64_t a1, uint64_t a2, unint64_t a3, std::string *a4, uint64_t a5, int a6)
{
  uint64_t v9;
  void *v10;
  size_t v11;
  uint64_t *v12;
  void *v13;
  int v14;
  int Key;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *p_dst;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  const std::string::value_type *v29;
  std::string::size_type v30;
  std::string::size_type v31;
  unsigned __int8 *v32;
  uint64_t v33;
  unsigned __int8 *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  const std::string::value_type *v39;
  std::string::size_type v40;
  std::string::size_type v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  const void *v46;
  size_t v47;
  char v48;
  int v49;
  uint64_t v50;
  char v51;
  int v52;
  uint64_t v53;
  const void *v54;
  const void **v55;
  const void **v56;
  char v57;
  BOOL v58;
  const void *v59;
  const void *v60;
  uint64_t v61;
  uint64_t i;
  uint64_t v63;
  char v64;
  const void *v65;
  size_t v66;
  const void **v67;
  const void **v68;
  char v69;
  BOOL v70;
  const void *v71;
  const void *v72;
  uint64_t v73;
  unsigned __int8 *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned __int8 *v79;
  unsigned __int8 *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned __int8 *v89;
  unsigned __int8 *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v97;
  unint64_t __n;
  unsigned __int8 *__dst;
  size_t v101;
  unint64_t v102;
  __int16 v103;
  _QWORD v104[4];
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  _QWORD v110[10];

  v110[8] = *MEMORY[0x24BDAC8D0];
  v105 = 0;
  v106 = 0;
  v107 = 0x2000000000;
  sub_22E78CAE4((uint64_t *)a1, (unsigned int *)&v105, 0);
  v104[0] = 0;
  v104[1] = 0;
  v104[2] = 0x2000000000;
  v108 = v110;
  v109 = 0x400000000;
  sub_22E78CAE4((uint64_t *)a2, (unsigned int *)v104, (uint64_t)&v108);
  if (!(_DWORD)v109)
  {
LABEL_66:
    if (*(unsigned __int8 *)(a1 + 72) != *(unsigned __int8 *)(a2 + 72) && a6)
    {
      if (!a3)
        goto LABEL_145;
      *(_QWORD *)(a3 + 312) = 0x3A600000000;
      if (*(char *)(a3 + 311) < 0)
      {
        **(_BYTE **)(a3 + 288) = 0;
        *(_QWORD *)(a3 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(a3 + 288) = 0;
        *(_BYTE *)(a3 + 311) = 0;
      }
      v74 = (unsigned __int8 *)(a3 + 320);
      __dst = (unsigned __int8 *)(a3 + 320);
      v101 = 0;
      v102 = a3;
      v103 = 1;
      *(_BYTE *)(a3 + 320) = 0;
      *(_DWORD *)(a3 + 664) = 0;
      v75 = *(unsigned int *)(a3 + 776);
      if ((_DWORD)v75)
      {
        v76 = *(_QWORD *)(a3 + 768);
        v77 = 56 * v75;
        do
        {
          if (*(char *)(v76 + v77 - 9) < 0)
            operator delete(*(void **)(v76 + v77 - 32));
          v77 -= 56;
        }
        while (v77);
        LODWORD(v75) = *v74;
      }
      *(_DWORD *)(a3 + 776) = 0;
      v78 = *(unsigned __int8 *)(a2 + 72);
      v74[v75 + 1] = 2;
      *(_BYTE *)(a3 + 320) = v75 + 1;
      v79 = &v74[8 * v75];
      goto LABEL_143;
    }
    if ((*(_QWORD *)(a5 + 20) & 0x200000000000) != 0
      && *(unsigned __int8 *)(a1 + 73) != *(unsigned __int8 *)(a2 + 73)
      && a6)
    {
      if (!a3)
        goto LABEL_145;
      *(_QWORD *)(a3 + 312) = 0x3A300000000;
      if (*(char *)(a3 + 311) < 0)
      {
        **(_BYTE **)(a3 + 288) = 0;
        *(_QWORD *)(a3 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(a3 + 288) = 0;
        *(_BYTE *)(a3 + 311) = 0;
      }
      v81 = (unsigned __int8 *)(a3 + 320);
      __dst = (unsigned __int8 *)(a3 + 320);
      v101 = 0;
      v102 = a3;
      v103 = 1;
      *(_BYTE *)(a3 + 320) = 0;
      *(_DWORD *)(a3 + 664) = 0;
      v82 = *(unsigned int *)(a3 + 776);
      if ((_DWORD)v82)
      {
        v83 = *(_QWORD *)(a3 + 768);
        v84 = 56 * v82;
        do
        {
          if (*(char *)(v83 + v84 - 9) < 0)
            operator delete(*(void **)(v83 + v84 - 32));
          v84 -= 56;
        }
        while (v84);
        LODWORD(v82) = *v81;
      }
      *(_DWORD *)(a3 + 776) = 0;
      v78 = *(unsigned __int8 *)(a1 + 73);
      v81[v82 + 1] = 2;
      *(_BYTE *)(a3 + 320) = v82 + 1;
      v79 = &v81[8 * v82];
LABEL_143:
      *((_QWORD *)v79 + 2) = v78;
      goto LABEL_144;
    }
    v42 = -1431655765 * ((*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
    if (!(_DWORD)v42)
    {
LABEL_107:
      v61 = -1431655765 * ((*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3);
      if ((_DWORD)v61)
      {
        for (i = 0; i != v61; ++i)
        {
          v63 = *(_QWORD *)(a2 + 48) + 24 * i;
          v64 = *(_BYTE *)(v63 + 23);
          if (v64 >= 0)
            v65 = (const void *)(*(_QWORD *)(a2 + 48) + 24 * i);
          else
            v65 = *(const void **)v63;
          if (v64 >= 0)
            v66 = v64 & 0x7F;
          else
            v66 = *(_QWORD *)(v63 + 8);
          v67 = *(const void ***)(a1 + 48);
          v68 = *(const void ***)(a1 + 56);
          if (v67 != v68)
          {
            while (1)
            {
              v69 = *((_BYTE *)v67 + 23);
              v70 = v69 < 0;
              if (v69 >= 0)
                v71 = v67;
              else
                v71 = *v67;
              v72 = (const void *)(v69 & 0x7F);
              if (v70)
                v72 = v67[1];
              if (v72 == (const void *)v66 && (!v66 || !memcmp(v71, v65, v66)))
                break;
              v67 += 3;
              if (v67 == v68)
              {
                v67 = v68;
                break;
              }
            }
          }
          if (v67 == v68)
          {
            std::string::append(a4, "#__include_macros \"");
            std::string::append(a4, (const std::string::value_type *)v65, v66);
            std::string::append(a4, "\"\n##\n");
          }
        }
      }
      v73 = 0;
      goto LABEL_146;
    }
    v43 = 0;
    while (1)
    {
      v44 = *(_QWORD *)(a2 + 24) + 24 * v43;
      v45 = *(_BYTE *)(v44 + 23);
      if (v45 >= 0)
        v46 = (const void *)(*(_QWORD *)(a2 + 24) + 24 * v43);
      else
        v46 = *(const void **)v44;
      if (v45 >= 0)
        v47 = v45 & 0x7F;
      else
        v47 = *(_QWORD *)(v44 + 8);
      v48 = *(_BYTE *)(a2 + 127);
      v49 = v48;
      v50 = v48 & 0x7F;
      if (v49 < 0)
        v50 = *(_QWORD *)(a2 + 112);
      if (v50)
        break;
      if (v47)
        goto LABEL_93;
LABEL_106:
      if (++v43 == v42)
        goto LABEL_107;
    }
    v51 = *(_BYTE *)(a2 + 103);
    v52 = v51;
    v53 = v51 & 0x7F;
    if (v52 < 0)
      v53 = *(_QWORD *)(a2 + 88);
    if (!v53)
    {
      if (v47 == v50)
      {
        v54 = v49 >= 0 ? (const void *)(a2 + 104) : *(const void **)(a2 + 104);
        if (!memcmp(v46, v54, v47))
          goto LABEL_106;
      }
LABEL_93:
      v55 = *(const void ***)(a1 + 24);
      v56 = *(const void ***)(a1 + 32);
      if (v55 != v56)
      {
        while (1)
        {
          v57 = *((_BYTE *)v55 + 23);
          v58 = v57 < 0;
          if (v57 >= 0)
            v59 = v55;
          else
            v59 = *v55;
          v60 = (const void *)(v57 & 0x7F);
          if (v58)
            v60 = v55[1];
          if (v60 == (const void *)v47 && (!v47 || !memcmp(v59, v46, v47)))
            break;
          v55 += 3;
          if (v55 == v56)
          {
            v55 = v56;
            break;
          }
        }
      }
      if (v55 != v56)
        goto LABEL_106;
    }
    std::string::append(a4, "#include \"");
    std::string::append(a4, (const std::string::value_type *)v46, v47);
    std::string::append(a4, "\"\n");
    goto LABEL_106;
  }
  v9 = 0;
  v97 = 16 * v109;
  while (1)
  {
    v10 = *(void **)((char *)v108 + v9);
    v11 = *(_QWORD *)((char *)v108 + v9 + 8);
    v12 = sub_22F2BB230((llvm::StringMapImpl *)v104, v10, v11);
    v13 = *(void **)(*v12 + 8);
    __n = *(_QWORD *)(*v12 + 16);
    v14 = *(unsigned __int8 *)(*v12 + 24);
    Key = llvm::StringMapImpl::FindKey();
    if (Key == -1)
      v16 = v106;
    else
      v16 = Key;
    if (!a6 || v16 == v106)
    {
      if (v14)
      {
        std::string::append(a4, "#undef ");
        if (v10)
        {
          if (v11 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_179;
          if (v11 >= 0x17)
          {
            v21 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v11 | 7) != 0x17)
              v21 = v11 | 7;
            v22 = v21 + 1;
            p_dst = (unsigned __int8 *)operator new(v21 + 1);
            v101 = v11;
            v102 = v22 | 0x8000000000000000;
            __dst = p_dst;
          }
          else
          {
            HIBYTE(v102) = v11;
            p_dst = (unsigned __int8 *)&__dst;
            if (!v11)
              goto LABEL_29;
          }
          memmove(p_dst, v10, v11);
LABEL_29:
          p_dst[v11] = 0;
LABEL_55:
          v35 = HIBYTE(v102);
          v34 = __dst;
          v33 = v101;
          goto LABEL_56;
        }
LABEL_49:
        v33 = 0;
        v34 = 0;
        v35 = 0;
        __dst = 0;
        v101 = 0;
        v102 = 0;
LABEL_56:
        v38 = v35 < 0;
        if (v35 >= 0)
          v39 = (const std::string::value_type *)&__dst;
        else
          v39 = (const std::string::value_type *)v34;
        v40 = v35 & 0x7F;
        if (v38)
          v41 = v33;
        else
          v41 = v40;
        std::string::append(a4, v39, v41);
        if (SHIBYTE(v102) < 0)
          operator delete(__dst);
        std::string::push_back(a4, 10);
        goto LABEL_65;
      }
      std::string::append(a4, "#define ");
      if (!v10)
      {
        v23 = 0;
        v24 = 0;
        v25 = 0;
        __dst = 0;
        v101 = 0;
        v102 = 0;
        goto LABEL_36;
      }
      if (v11 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_179;
      if (v11 >= 0x17)
      {
        v26 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v11 | 7) != 0x17)
          v26 = v11 | 7;
        v27 = v26 + 1;
        v20 = (unsigned __int8 *)operator new(v26 + 1);
        v101 = v11;
        v102 = v27 | 0x8000000000000000;
        __dst = v20;
      }
      else
      {
        HIBYTE(v102) = v11;
        v20 = (unsigned __int8 *)&__dst;
        if (!v11)
          goto LABEL_35;
      }
      memmove(v20, v10, v11);
LABEL_35:
      v20[v11] = 0;
      v25 = HIBYTE(v102);
      v24 = __dst;
      v23 = v101;
LABEL_36:
      v28 = v25 < 0;
      if (v25 >= 0)
        v29 = (const std::string::value_type *)&__dst;
      else
        v29 = (const std::string::value_type *)v24;
      v30 = v25 & 0x7F;
      if (v28)
        v31 = v23;
      else
        v31 = v30;
      std::string::append(a4, v29, v31);
      if (SHIBYTE(v102) < 0)
        operator delete(__dst);
      std::string::push_back(a4, 32);
      if (!v13)
        goto LABEL_49;
      if (__n > 0x7FFFFFFFFFFFFFF7)
LABEL_179:
        abort();
      if (__n >= 0x17)
      {
        v36 = (__n & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((__n | 7) != 0x17)
          v36 = __n | 7;
        v37 = v36 + 1;
        v32 = (unsigned __int8 *)operator new(v36 + 1);
        v101 = __n;
        v102 = v37 | 0x8000000000000000;
        __dst = v32;
      }
      else
      {
        HIBYTE(v102) = __n;
        v32 = (unsigned __int8 *)&__dst;
        if (!__n)
          goto LABEL_54;
      }
      memmove(v32, v13, __n);
LABEL_54:
      v32[__n] = 0;
      goto LABEL_55;
    }
    v17 = v105;
    v18 = *(_QWORD *)(v105 + 8 * v16);
    if (v14 != *(unsigned __int8 *)(v18 + 24))
    {
      if (!a3)
        goto LABEL_145;
      *(_QWORD *)(a3 + 312) = 0x3A100000000;
      if (*(char *)(a3 + 311) < 0)
      {
        **(_BYTE **)(a3 + 288) = 0;
        *(_QWORD *)(a3 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(a3 + 288) = 0;
        *(_BYTE *)(a3 + 311) = 0;
      }
      __dst = (unsigned __int8 *)(a3 + 320);
      v101 = 0;
      v102 = a3;
      v103 = 1;
      *(_BYTE *)(a3 + 320) = 0;
      *(_DWORD *)(a3 + 664) = 0;
      v85 = *(unsigned int *)(a3 + 776);
      if ((_DWORD)v85)
      {
        v86 = *(_QWORD *)(a3 + 768);
        v87 = 56 * v85;
        do
        {
          if (*(char *)(v86 + v87 - 9) < 0)
            operator delete(*(void **)(v86 + v87 - 32));
          v87 -= 56;
        }
        while (v87);
      }
      *(_DWORD *)(a3 + 776) = 0;
      sub_22E3B89A8(&__dst, v10, v11);
      v88 = *(unsigned __int8 *)(*(_QWORD *)(v17 + 8 * v16) + 24);
      v89 = __dst;
      if (!__dst)
      {
        v89 = (unsigned __int8 *)sub_22E3B8AAC(v101);
        __dst = v89;
      }
      v89[*v89 + 1] = 2;
      v90 = __dst;
      v91 = *__dst;
      *__dst = v91 + 1;
      *(_QWORD *)&v90[8 * v91 + 16] = v88;
      goto LABEL_144;
    }
    if (!v14 && (__n != *(_QWORD *)(v18 + 16) || __n && memcmp(v13, *(const void **)(v18 + 8), __n)))
      break;
LABEL_65:
    v9 += 16;
    if (v97 == v9)
      goto LABEL_66;
  }
  if (!a3)
    goto LABEL_145;
  *(_QWORD *)(a3 + 312) = 0x3A000000000;
  if (*(char *)(a3 + 311) < 0)
  {
    **(_BYTE **)(a3 + 288) = 0;
    *(_QWORD *)(a3 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(a3 + 288) = 0;
    *(_BYTE *)(a3 + 311) = 0;
  }
  __dst = (unsigned __int8 *)(a3 + 320);
  v101 = 0;
  v102 = a3;
  v103 = 1;
  *(_BYTE *)(a3 + 320) = 0;
  *(_DWORD *)(a3 + 664) = 0;
  v92 = *(unsigned int *)(a3 + 776);
  if ((_DWORD)v92)
  {
    v93 = *(_QWORD *)(a3 + 768);
    v94 = 56 * v92;
    do
    {
      if (*(char *)(v93 + v94 - 9) < 0)
        operator delete(*(void **)(v93 + v94 - 32));
      v94 -= 56;
    }
    while (v94);
  }
  *(_DWORD *)(a3 + 776) = 0;
  sub_22E3B89A8(&__dst, v10, v11);
  sub_22E3B89A8(&__dst, *(void **)(*(_QWORD *)(v17 + 8 * v16) + 8), *(_QWORD *)(*(_QWORD *)(v17 + 8 * v16) + 16));
  sub_22E3B89A8(&__dst, v13, __n);
LABEL_144:
  sub_22E3BB0B8((uint64_t)&__dst);
LABEL_145:
  v73 = 1;
LABEL_146:
  if (v108 != v110)
    free(v108);
  sub_22E78CD64((uint64_t)v104);
  sub_22E78CD64((uint64_t)&v105);
  return v73;
}

uint64_t sub_22E768CD8(char a1, void *__s1, size_t a3, void *__s2, size_t __n, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BOOL4 v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23[3];
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  if ((a7 & 0x200000000000) == 0)
    return 0;
  v25 = v9;
  v26 = v10;
  if (a3 == __n)
  {
    if (!__n)
      return 0;
    v18 = memcmp(__s1, __s2, __n) != 0;
  }
  else
  {
    v18 = 1;
  }
  result = 0;
  if (v18 && !a9 && (a1 & 1) == 0)
  {
    if (a6)
    {
      *(_QWORD *)(a6 + 312) = 0x3A200000000;
      if (*(char *)(a6 + 311) < 0)
      {
        **(_BYTE **)(a6 + 288) = 0;
        *(_QWORD *)(a6 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(a6 + 288) = 0;
        *(_BYTE *)(a6 + 311) = 0;
      }
      v23[0] = (unsigned __int8 *)(a6 + 320);
      v23[1] = 0;
      v23[2] = (unsigned __int8 *)a6;
      v24 = 1;
      *(_BYTE *)(a6 + 320) = 0;
      *(_DWORD *)(a6 + 664) = 0;
      v20 = *(unsigned int *)(a6 + 776);
      if ((_DWORD)v20)
      {
        v21 = *(_QWORD *)(a6 + 768);
        v22 = 56 * v20;
        do
        {
          if (*(char *)(v21 + v22 - 9) < 0)
            operator delete(*(void **)(v21 + v22 - 32));
          v22 -= 56;
        }
        while (v22);
      }
      *(_DWORD *)(a6 + 776) = 0;
      sub_22E3B89A8(v23, __s1, a3);
      sub_22E3B89A8(v23, __s2, __n);
      sub_22E3BB0B8((uint64_t)v23);
    }
    return 1;
  }
  return result;
}

uint64_t sub_22E768E34(uint64_t a1, uint64_t a2, int a3)
{
  _DWORD *v3;
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  unint64_t v7;
  unsigned int *v8;
  _DWORD *v9;
  unsigned int v10;
  _DWORD *v11;
  _DWORD *v12;
  int v14;
  uint64_t v15;

  if (!a3)
    return 0;
  if (*(_QWORD *)(a2 + 784))
  {
    v15 = a2;
    v14 = a3;
    sub_22E76BB68(a1, a2);
    a2 = v15;
    a3 = v14;
  }
  v3 = *(_DWORD **)(a2 + 1696);
  v4 = *(unsigned int *)(a2 + 1704);
  if ((_DWORD)v4)
  {
    v5 = *(unsigned int *)(a2 + 1704);
    v6 = *(_DWORD **)(a2 + 1696);
    do
    {
      v7 = v5 >> 1;
      v8 = &v6[2 * (v5 >> 1)];
      v10 = *v8;
      v9 = v8 + 2;
      v5 += ~(v5 >> 1);
      if (v10 > a3 - 1)
        v5 = v7;
      else
        v6 = v9;
    }
    while (v5);
  }
  else
  {
    v6 = *(_DWORD **)(a2 + 1696);
  }
  v11 = &v3[2 * v4];
  if (v6 == v3)
    v12 = v11;
  else
    v12 = v6 - 2;
  return (v12[1] + a3);
}

uint64_t sub_22E768ED8(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  int v6;

  if ((*a2 & 0x100000000) == 0)
  {
    v3 = result;
    *a2 |= 0x100000000uLL;
    result = sub_22F18E3E4(*(_QWORD *)(result + 120));
    v4 = *a2;
    if ((*a2 & 0x24000000) != 0
      || ((v4 & 0x1FFFE00) != 0 ? (v5 = result == 0) : (v5 = 0),
          v5 ? (v6 = 0) : (v6 = 1),
          (v4 & 0x400000000) != 0
       || !v6
       || (!result || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 120) + 56) + 1) & 1) == 0) && a2[1]))
    {
      *a2 = v4 | 0x200000000;
    }
  }
  return result;
}

_QWORD *sub_22E768F5C(_QWORD *result, unint64_t *a2)
{
  uint64_t v2;
  int v3;
  unint64_t *v4;

  v4 = a2;
  if (a2)
  {
    v2 = (*a2 >> 5) & 0x80000000;
    if ((*a2 & 0x3A000000) != 0)
      v2 = 0x80000000;
    *a2 = v2 | *a2 & 0xFFFFFFF77FFFFFFFLL;
    if ((*(_QWORD *)(*(_QWORD *)(result[16] + 2000) + 20) & 0x200000000000) != 0)
    {
      v3 = *((_DWORD *)result + 9);
      result = sub_22E669BD0(result + 1054, &v4);
      *((_DWORD *)result + 2) = v3;
    }
  }
  return result;
}

uint64_t sub_22E768FE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  _DWORD *v6;
  uint64_t v7;
  unint64_t v8;
  _DWORD *v9;
  unint64_t v10;
  unsigned int *v11;
  _DWORD *v12;
  unsigned int v13;
  _DWORD *v14;
  _DWORD *v15;

  v3 = a3;
  v4 = a3 - 18;
  if (a3 >= 0x12)
  {
    if (*(_QWORD *)(a2 + 784))
      sub_22E76BB68(a1, a2);
    v6 = *(_DWORD **)(a2 + 3096);
    v7 = *(unsigned int *)(a2 + 3104);
    if ((_DWORD)v7)
    {
      v8 = *(unsigned int *)(a2 + 3104);
      v9 = *(_DWORD **)(a2 + 3096);
      do
      {
        v10 = v8 >> 1;
        v11 = &v9[2 * (v8 >> 1)];
        v13 = *v11;
        v12 = v11 + 2;
        v8 += ~(v8 >> 1);
        if (v13 > v4)
          v8 = v10;
        else
          v9 = v12;
      }
      while (v8);
    }
    else
    {
      v9 = *(_DWORD **)(a2 + 3096);
    }
    v14 = &v6[2 * v7];
    if (v9 == v6)
      v15 = v14;
    else
      v15 = v9 - 2;
    return (v15[1] + v3);
  }
  return v3;
}

unsigned int *sub_22E769084(unsigned int *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v7 = (uint64_t)result;
  v19 = a2;
  if (!a4 && result[1864])
  {
    result = (unsigned int *)sub_22F2B3EDC((uint64_t)(result + 1866), &v19);
    v15 = result;
    v16 = *(const void **)a3;
    v17 = *(unsigned int *)(a3 + 8);
    v18 = result[2];
    if (v18 + v17 > (unint64_t)result[3])
    {
      result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod();
      LODWORD(v18) = v15[2];
      if (!(_DWORD)v17)
        goto LABEL_19;
    }
    else if (!(_DWORD)v17)
    {
LABEL_19:
      v15[2] = v18 + v17;
      return result;
    }
    result = (unsigned int *)memcpy((void *)(*(_QWORD *)v15 + 4 * v18), v16, 4 * v17);
    LODWORD(v18) = v15[2];
    goto LABEL_19;
  }
  v8 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = 4 * v8;
    do
    {
      v11 = *(unsigned int *)(*(_QWORD *)a3 + v9);
      if (*(_QWORD *)(v7 + 112))
      {
        result = (unsigned int *)sub_22E77F870((_QWORD *)v7, *(unsigned int *)(*(_QWORD *)a3 + v9));
        v12 = result;
        if (a4)
        {
          v13 = *(unsigned int *)(a4 + 8);
          if (v13 >= *(unsigned int *)(a4 + 12))
          {
            result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod();
            v13 = *(unsigned int *)(a4 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a4 + 8 * v13) = v12;
          ++*(_DWORD *)(a4 + 8);
        }
        else
        {
          result = (unsigned int *)sub_22F2B2E34(v7, result, a2);
        }
      }
      else
      {
        v14 = *(unsigned int *)(v7 + 11048);
        if (v14 >= *(unsigned int *)(v7 + 11052))
        {
          result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod();
          v14 = *(unsigned int *)(v7 + 11048);
        }
        *(_QWORD *)(*(_QWORD *)(v7 + 11040) + 8 * v14) = v11;
        ++*(_DWORD *)(v7 + 11048);
      }
      v9 += 4;
    }
    while (v10 != v9);
  }
  return result;
}

uint64_t sub_22E76923C(uint64_t result, unint64_t a2)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;

  v2 = a2 & 7;
  if (v2 == 7)
  {
    v3 = *(_DWORD *)(a2 & 0xFFFFFFFFFFFFFFF8);
    if (v3 >= 3)
      v3 = 3;
    v2 = v3 | 8;
  }
  *(_DWORD *)result = v2;
  *(_QWORD *)(result + 8) = 0;
  switch(v2)
  {
    case 0:
      if ((a2 & 7) != 0)
        a2 = 0;
      else
        a2 &= 0xFFFFFFFFFFFFFFF8;
      goto LABEL_20;
    case 1:
    case 2:
    case 11:
      goto LABEL_20;
    case 6:
      if ((a2 & 7) != 6)
        goto LABEL_19;
      a2 = *(int *)(a2 & 0xFFFFFFFFFFFFFFF8);
      goto LABEL_20;
    case 8:
      v4 = *(_QWORD *)(*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16) + 40);
      if ((v4 & 7) != 0)
        a2 = 0;
      else
        a2 = v4 & 0xFFFFFFFFFFFFFFF8;
      goto LABEL_20;
    case 9:
      if ((~(_BYTE)a2 & 7) != 0)
        goto LABEL_19;
      v5 = *(_DWORD *)(a2 & 0xFFFFFFFFFFFFFFF8);
      if (v5 >= 3)
        v5 = 3;
      if (v5 != 1)
LABEL_19:
        a2 = 0;
      else
        a2 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
LABEL_20:
      *(_QWORD *)(result + 8) = a2;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_22E76930C(uint64_t a1)
{
  unsigned int v1;
  unsigned int v2;
  int v4;
  _QWORD v5[17];

  v5[16] = *MEMORY[0x24BDAC8D0];
  v1 = *(_DWORD *)a1;
  LODWORD(v5[0]) = v1;
  if (!v1)
    goto LABEL_2;
  v2 = 1;
  if (v1 <= 0xB)
  {
    if (v1 == 6)
    {
      v2 = 2;
      HIDWORD(v5[0]) = *(_QWORD *)(a1 + 8);
      return sub_22E3D0BF8(v5, (uint64_t)v5 + 4 * v2);
    }
    v4 = 1 << v1;
    if ((v4 & 0x806) != 0)
    {
      HIDWORD(v5[0]) = sub_22E7506AC(*(_QWORD *)(a1 + 8));
      v2 = 2;
      return sub_22E3D0BF8(v5, (uint64_t)v5 + 4 * v2);
    }
    if ((v4 & 0x300) != 0)
    {
LABEL_2:
      llvm::FoldingSetNodeID::AddString();
      v2 = 1;
    }
  }
  return sub_22E3D0BF8(v5, (uint64_t)v5 + 4 * v2);
}

uint64_t sub_22E76944C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v4;
  _DWORD *v5;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  unint64_t v9;
  unsigned int *v10;
  _DWORD *v11;
  unsigned int v12;
  _DWORD *v13;
  uint64_t v14;

  if ((a3 & 1) == 0)
  {
    v14 = *(_QWORD *)(a1 + 176) + 8 * *(unsigned int *)(a1 + 184) + 8 * -(a3 >> 1);
    return *(_QWORD *)v14;
  }
  v4 = sub_22E76C40C(a1, a2, a3 >> 1);
  v5 = *(_DWORD **)(a1 + 4232);
  v6 = *(unsigned int *)(a1 + 4240);
  if (!(_DWORD)v6)
    goto LABEL_13;
  v7 = *(unsigned int *)(a1 + 4240);
  v8 = *(_DWORD **)(a1 + 4232);
  do
  {
    v9 = v7 >> 1;
    v10 = &v8[4 * (v7 >> 1)];
    v12 = *v10;
    v11 = v10 + 4;
    v7 += ~(v7 >> 1);
    if (v12 > v4)
      v7 = v9;
    else
      v8 = v11;
  }
  while (v7);
  if (v8 == v5)
LABEL_13:
    v13 = &v5[4 * v6];
  else
    v13 = v8 - 4;
  if (v13 != &v5[4 * v6])
  {
    v14 = (uint64_t)(v13 + 2);
    return *(_QWORD *)v14;
  }
  return 0;
}

uint64_t sub_22E7694FC(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v2 = *a2;
  if (!*a2)
    goto LABEL_2;
  if (v2 <= 0xB && (_DWORD)v2 != 6)
  {
    if (((1 << v2) & 0x806) != 0)
    {
      v6 = *a1;
      v7 = sub_22F2B0B3C(*a1, a1[1], *(_DWORD *)(a2 + 1));
      sub_22F2B3CD0(v6, v7);
      return v2;
    }
    if (((1 << v2) & 0x300) != 0)
    {
LABEL_2:
      v3 = *a1;
      v4 = sub_22E768E34(*a1, a1[1], *(_DWORD *)(a2 + 1));
      sub_22E785944(v3, v4);
    }
  }
  return v2;
}

_DWORD *sub_22E7695A0(_DWORD *result, int a2)
{
  int v2;
  _DWORD *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *v9;
  int v10;
  _DWORD *v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  _DWORD *v24;
  int v25;
  _DWORD *v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  _DWORD *v30;
  int v31;

  v2 = a2;
  v3 = result;
  v31 = a2;
  v4 = (uint64_t)(result + 2);
  if (result[4] || (v16 = *(_QWORD *)result, v17 = *(unsigned int *)(*(_QWORD *)result + 8), !(_DWORD)v17))
  {
LABEL_2:
    v5 = v3[6];
    if (v5)
    {
      v6 = *((_QWORD *)v3 + 1);
      v7 = v5 - 1;
      v8 = v7 & (37 * v2);
      v9 = (_DWORD *)(v6 + 4 * v8);
      v10 = *v9;
      if (*v9 == v2)
        return result;
      v11 = 0;
      v12 = 1;
      while (v10 != -1)
      {
        if (v11)
          v13 = 0;
        else
          v13 = v10 == -2;
        if (v13)
          v11 = v9;
        v14 = v8 + v12++;
        v8 = v14 & v7;
        v9 = (_DWORD *)(v6 + 4 * v8);
        v10 = *v9;
        if (*v9 == v2)
          return result;
      }
      if (v11)
        v15 = v11;
      else
        v15 = v9;
    }
    else
    {
      v15 = 0;
    }
    result = sub_22E7443B4(v4, (uint64_t)&v31, &v31, v15);
    *result = v31;
    v16 = *(_QWORD *)v3;
    v2 = v31;
    LODWORD(v17) = *(_DWORD *)(*(_QWORD *)v3 + 8);
    if (v17 >= *(_DWORD *)(*(_QWORD *)v3 + 12))
      goto LABEL_23;
    goto LABEL_18;
  }
  if (v17 > 4)
  {
    v18 = *(_DWORD **)v16;
    v19 = &v18[v17];
    while (1)
    {
      v20 = v3[6];
      if (!v20)
        break;
      v21 = *((_QWORD *)v3 + 1);
      v22 = v20 - 1;
      v23 = (37 * *v18) & v22;
      v24 = (_DWORD *)(v21 + 4 * v23);
      v25 = *v24;
      if (*v18 != *v24)
      {
        v26 = 0;
        v27 = 1;
        while (v25 != -1)
        {
          if (v26)
            v28 = 0;
          else
            v28 = v25 == -2;
          if (v28)
            v26 = v24;
          v29 = v23 + v27++;
          v23 = v29 & v22;
          v24 = (_DWORD *)(v21 + 4 * v23);
          v25 = *v24;
          if (*v18 == *v24)
            goto LABEL_41;
        }
        if (v26)
          v30 = v26;
        else
          v30 = v24;
        goto LABEL_40;
      }
LABEL_41:
      if (++v18 == v19)
        goto LABEL_2;
    }
    v30 = 0;
LABEL_40:
    result = sub_22E7443B4(v4, (uint64_t)v18, v18, v30);
    *result = *v18;
    goto LABEL_41;
  }
  if (v17 >= *(_DWORD *)(v16 + 12))
  {
LABEL_23:
    result = (_DWORD *)llvm::SmallVectorBase<unsigned int>::grow_pod();
    LODWORD(v17) = *(_DWORD *)(v16 + 8);
  }
LABEL_18:
  *(_DWORD *)(*(_QWORD *)v16 + 4 * v17) = v2;
  ++*(_DWORD *)(v16 + 8);
  return result;
}

uint64_t sub_22E769798(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v9;
  char v10;
  uint64_t *v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v18[2];
  uint64_t *v19;
  void *v20;
  uint64_t v21;
  _BYTE v22[512];
  uint64_t *v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v9 = 8 * *(_QWORD *)(a3 + 16) - *(unsigned int *)(a3 + 32);
  v18[0] = a3;
  v18[1] = v9;
  *(_QWORD *)(a3 + 16) = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  *(_DWORD *)(a3 + 32) = 0;
  if ((a4 & 0x3F) != 0)
  {
    sub_22E745EC8(a3, a4 & 0x3F, (uint64_t)&v20);
    if ((v21 & 1) != 0)
    {
      v23 = (uint64_t *)v20;
      if (v20)
      {
        sub_22E769A6C((uint64_t *)a1, &v23);
        if (v23)
          (*(void (**)(uint64_t *))(*v23 + 8))(v23);
        v14 = 1;
        goto LABEL_23;
      }
    }
  }
  v20 = v22;
  v21 = 0x4000000000;
  sub_22E745EC8(a3, *(_DWORD *)(a3 + 36), (uint64_t)&v23);
  if ((v24 & 1) != 0)
  {
    sub_22E769A6C((uint64_t *)a1, &v23);
    if (v23)
      (*(void (**)(uint64_t *))(*v23 + 8))(v23);
    v14 = 1;
    goto LABEL_21;
  }
  llvm::BitstreamCursor::readRecord();
  if ((v24 & 1) != 0)
  {
    v15 = v23;
    v23 = 0;
    v19 = v15;
    sub_22E769A6C((uint64_t *)a1, &v19);
    if (v19)
      (*(void (**)(uint64_t *))(*v19 + 8))(v19);
    goto LABEL_17;
  }
  if ((_DWORD)v23 != 80)
  {
    sub_22E769C10(a1, "Expected lexical block", 0x16uLL);
LABEL_17:
    v14 = 1;
    goto LABEL_18;
  }
  v19 = 0;
  v10 = sub_22E78F2B0(*(_QWORD *)(a1 + 3608), *(_DWORD *)(a1 + 3624), a5, &v19);
  v11 = v19;
  if ((v10 & 1) != 0)
  {
    if (v19[1])
      goto LABEL_13;
    goto LABEL_12;
  }
  v12 = *(_DWORD *)(a1 + 3616);
  v13 = *(_DWORD *)(a1 + 3624);
  if (4 * v12 + 4 >= 3 * v13)
  {
    v13 *= 2;
    goto LABEL_25;
  }
  if (v13 + ~v12 - *(_DWORD *)(a1 + 3620) <= v13 >> 3)
  {
LABEL_25:
    sub_22E78F338(a1 + 3608, v13);
    v19 = 0;
    sub_22E78F2B0(*(_QWORD *)(a1 + 3608), *(_DWORD *)(a1 + 3624), a5, &v19);
    v11 = v19;
  }
  ++*(_DWORD *)(a1 + 3616);
  if (*v11 != -4096)
    --*(_DWORD *)(a1 + 3620);
  *v11 = a5;
  v11[1] = 0;
  v11[2] = 0;
  v11[3] = 0;
LABEL_12:
  v11[1] = a2;
  v11[2] = 0;
  v11[3] = 0;
LABEL_13:
  v14 = 0;
  *(_WORD *)(a5 + 8) |= 0x80u;
LABEL_18:
  if ((v24 & 1) != 0)
  {
    v16 = v23;
    v23 = 0;
    if (v16)
      (*(void (**)(uint64_t *))(*v16 + 8))(v16);
  }
LABEL_21:
  if (v20 != v22)
    free(v20);
LABEL_23:
  sub_22E78CE68(v18);
  return v14;
}

uint64_t *sub_22E769A6C(uint64_t *result, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t **v4;
  uint64_t **v5;
  char *v6;
  uint64_t *v7;
  uint64_t *v8;
  std::string *p_p;
  size_t size;
  char *v11;
  std::string __p;
  uint64_t *v13;
  char *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  char *v18;

  v2 = *a2;
  *a2 = 0;
  v13 = result;
  if (!v2)
    return result;
  v3 = (uint64_t)result;
  if ((*(unsigned int (**)(uint64_t *, _QWORD))(*v2 + 48))(v2, MEMORY[0x24BED7780]))
  {
    v4 = (uint64_t **)v2[1];
    v5 = (uint64_t **)v2[2];
    if (v4 == v5)
    {
      v6 = 0;
    }
    else
    {
      v6 = 0;
      do
      {
        v18 = v6;
        v7 = *v4;
        *v4 = 0;
        v16 = v7;
        sub_22E78F91C(&v17, &v16, (uint64_t *)&v13);
        sub_22F2436E4(&v18, (char **)&v17, &__p);
        v6 = (char *)__p.__r_.__value_.__r.__words[0];
        __p.__r_.__value_.__r.__words[0] = 0;
        if (v17)
          (*(void (**)(uint64_t *))(*v17 + 8))(v17);
        v8 = v16;
        v16 = 0;
        if (v8)
          (*(void (**)(uint64_t *))(*v8 + 8))(v8);
        if (v18)
          (*(void (**)(char *))(*(_QWORD *)v18 + 8))(v18);
        ++v4;
      }
      while (v4 != v5);
    }
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v2 + 8))(v2);
    if (!v6)
      return result;
LABEL_20:
    v11 = v6;
    sub_22F2432A8(&v11, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      size = __p.__r_.__value_.__l.__size_;
    sub_22E769C10(v3, p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    result = (uint64_t *)v11;
    if (v11)
      return (uint64_t *)(*(uint64_t (**)(char *))(*(_QWORD *)v11 + 8))(v11);
    return result;
  }
  v15 = v2;
  sub_22E78F91C((uint64_t **)&v14, &v15, (uint64_t *)&v13);
  result = v15;
  if (v15)
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v15 + 8))(v15);
  v6 = v14;
  if (v14)
    goto LABEL_20;
  return result;
}

void sub_22E769C10(uint64_t a1, void *a2, size_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  char v18;
  void *v19;
  size_t v20;
  size_t v21;
  unsigned __int8 *v22[3];
  __int16 v23;

  sub_22E769FA4(a1, 910, a2, a3, 0, 0, 0, 0);
  v4 = *(_QWORD *)(a1 + 120);
  if ((*(_QWORD *)(*(_QWORD *)(v4 + 56) + 20) & 0x200000000000) != 0)
  {
    v5 = *(_QWORD *)(a1 + 104);
    if (*(_DWORD *)(v5 + 316) == -1)
    {
      v6 = *(_QWORD *)(v4 + 104);
      v7 = *(_BYTE *)(v6 + 191);
      v8 = v7;
      v9 = *(_QWORD *)(v6 + 176);
      v10 = v7 & 0x7F;
      if (v8 >= 0)
        v9 = v10;
      if (v9)
      {
        *(_DWORD *)(v5 + 312) = *(_DWORD *)(a1 + 496);
        *(_DWORD *)(v5 + 316) = 939;
        if (*(char *)(v5 + 311) < 0)
        {
          **(_BYTE **)(v5 + 288) = 0;
          *(_QWORD *)(v5 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v5 + 288) = 0;
          *(_BYTE *)(v5 + 311) = 0;
        }
        v22[0] = (unsigned __int8 *)(v5 + 320);
        v22[1] = 0;
        v22[2] = (unsigned __int8 *)v5;
        v23 = 1;
        *(_BYTE *)(v5 + 320) = 0;
        *(_DWORD *)(v5 + 664) = 0;
        v11 = *(unsigned int *)(v5 + 776);
        if ((_DWORD)v11)
        {
          v12 = *(_QWORD *)(v5 + 768);
          v13 = 56 * v11;
          do
          {
            if (*(char *)(v12 + v13 - 9) < 0)
              operator delete(*(void **)(v12 + v13 - 32));
            v13 -= 56;
          }
          while (v13);
        }
        *(_DWORD *)(v5 + 776) = 0;
        v14 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 104);
        v17 = *(void **)(v14 + 168);
        v15 = v14 + 168;
        v16 = v17;
        v18 = *(_BYTE *)(v15 + 23);
        if (v18 >= 0)
          v19 = (void *)v15;
        else
          v19 = v16;
        v20 = *(_QWORD *)(v15 + 8);
        if (v18 >= 0)
          v21 = v18 & 0x7F;
        else
          v21 = v20;
        sub_22E3B89A8(v22, v19, v21);
        sub_22E3BB0B8((uint64_t)v22);
      }
    }
  }
}

uint64_t sub_22E769D54(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, int a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21[2];
  int v22;
  void *v23;
  uint64_t v24;
  _BYTE v25[512];
  uint64_t *v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v22 = a5;
  v8 = 8 * *(_QWORD *)(a3 + 16) - *(unsigned int *)(a3 + 32);
  v21[0] = a3;
  v21[1] = v8;
  *(_QWORD *)(a3 + 16) = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  *(_DWORD *)(a3 + 32) = 0;
  if ((a4 & 0x3F) != 0)
  {
    sub_22E745EC8(a3, a4 & 0x3F, (uint64_t)&v23);
    if ((v24 & 1) != 0)
    {
      v26 = (uint64_t *)v23;
      if (v23)
      {
        sub_22E769A6C(a1, &v26);
        if (v26)
          (*(void (**)(uint64_t *))(*v26 + 8))(v26);
        v13 = 1;
        goto LABEL_18;
      }
    }
  }
  v23 = v25;
  v24 = 0x4000000000;
  v19 = 0;
  v20 = 0;
  sub_22E745EC8(a3, *(_DWORD *)(a3 + 36), (uint64_t)&v26);
  if ((v27 & 1) != 0)
  {
    sub_22E769A6C(a1, &v26);
    if (v26)
      (*(void (**)(uint64_t *))(*v26 + 8))(v26);
    v13 = 1;
    goto LABEL_16;
  }
  llvm::BitstreamCursor::readRecord();
  if ((v27 & 1) != 0)
  {
    v15 = v26;
    v26 = 0;
    v18 = v15;
    sub_22E769A6C(a1, &v18);
    if (v18)
      (*(void (**)(uint64_t *))(*v18 + 8))(v18);
  }
  else
  {
    if ((_DWORD)v26 == 81)
    {
      v9 = v19;
      sub_22E78F4AC((uint64_t)(a1 + 460), &v22);
      v11 = v10;
      v12 = *(_DWORD *)(v10 + 16);
      if (v12 >= *(_DWORD *)(v10 + 20))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v12 = *(_DWORD *)(v11 + 16);
      }
      v13 = 0;
      v14 = (_QWORD *)(*(_QWORD *)(v11 + 8) + 16 * v12);
      *v14 = a2;
      v14[1] = v9;
      ++*(_DWORD *)(v11 + 16);
      goto LABEL_13;
    }
    sub_22E769C10((uint64_t)a1, "Expected visible lookup table block", 0x23uLL);
  }
  v13 = 1;
LABEL_13:
  if ((v27 & 1) != 0)
  {
    v16 = v26;
    v26 = 0;
    if (v16)
      (*(void (**)(uint64_t *))(*v16 + 8))(v16);
  }
LABEL_16:
  if (v23 != v25)
    free(v23);
LABEL_18:
  sub_22E78CE68(v21);
  return v13;
}

void sub_22E769FA4(uint64_t a1, int a2, void *__src, size_t __len, void *a5, size_t a6, void *a7, size_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18[3];
  __int16 v19;

  v14 = *(_QWORD *)(a1 + 104);
  if (*(_DWORD *)(v14 + 316) == -1)
  {
    *(_DWORD *)(v14 + 312) = *(_DWORD *)(a1 + 496);
    *(_DWORD *)(v14 + 316) = a2;
    if (*(char *)(v14 + 311) < 0)
    {
      **(_BYTE **)(v14 + 288) = 0;
      *(_QWORD *)(v14 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v14 + 288) = 0;
      *(_BYTE *)(v14 + 311) = 0;
    }
    v18[0] = (unsigned __int8 *)(v14 + 320);
    v18[1] = 0;
    v18[2] = (unsigned __int8 *)v14;
    v19 = 1;
    *(_BYTE *)(v14 + 320) = 0;
    *(_DWORD *)(v14 + 664) = 0;
    v15 = *(unsigned int *)(v14 + 776);
    if ((_DWORD)v15)
    {
      v16 = *(_QWORD *)(v14 + 768);
      v17 = 56 * v15;
      do
      {
        if (*(char *)(v16 + v17 - 9) < 0)
          operator delete(*(void **)(v16 + v17 - 32));
        v17 -= 56;
      }
      while (v17);
    }
    *(_DWORD *)(v14 + 776) = 0;
    sub_22E3B89A8(v18, __src, __len);
    sub_22E3B89A8(v18, a5, a6);
    sub_22E3B89A8(v18, a7, a8);
    sub_22E3BB0B8((uint64_t)v18);
  }
  else
  {
    sub_22F1CBE80(*(_QWORD *)(a1 + 104), a2, __src, __len, a5, a6, a7, a8);
  }
}

uint64_t sub_22E76A0FC(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  unint64_t v8;
  unsigned int *v9;
  _DWORD *v10;
  unsigned int v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  int v25;
  void *v26;
  void *v27;
  uint64_t *v29;
  int v30;
  unsigned int v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int v34;
  BOOL v35;
  int v36;
  unint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  _QWORD *v45;
  uint64_t v46;
  unsigned int v47;
  _QWORD *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v58;
  int v59;
  BOOL v60;
  int v61;
  uint64_t v62;
  int v63;
  BOOL v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  llvm::MemoryBuffer *v69;
  uint64_t *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t *v73;
  unint64_t v74;
  void **v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  int v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int *v84;
  int v85;
  BOOL v86;
  int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  int v94;
  BOOL v95;
  int v96;
  uint64_t *v97;
  uint64_t v98[3];
  uint64_t *v99[4];
  uint64_t *v100;
  char v101;
  void *v102;
  uint64_t v103;
  _BYTE v104[512];
  void *v105;
  char v106;
  uint64_t v107;

  v107 = *MEMORY[0x24BDAC8D0];
  if (!(_DWORD)a2)
    return 0;
  if ((int)a2 > 0 || (-2 - a2) >= *(_DWORD *)(a1 + 7372))
  {
    sub_22E769C10(a1, "source location entry ID out-of-range for AST file", 0x32uLL);
    return 1;
  }
  v4 = *(_DWORD **)(a1 + 600);
  v5 = *(unsigned int *)(a1 + 608);
  if ((_DWORD)v5)
  {
    v6 = *(unsigned int *)(a1 + 608);
    v7 = *(_DWORD **)(a1 + 600);
    do
    {
      v8 = v6 >> 1;
      v9 = &v7[4 * (v6 >> 1)];
      v11 = *v9;
      v10 = v9 + 4;
      v6 += ~(v6 >> 1);
      if (v11 > -(int)a2)
        v6 = v8;
      else
        v7 = v10;
    }
    while (v6);
  }
  else
  {
    v7 = *(_DWORD **)(a1 + 600);
  }
  v13 = &v4[4 * v5];
  if (v7 == v4)
    v14 = v13;
  else
    v14 = v7 - 4;
  v15 = *((_QWORD *)v14 + 1);
  v16 = *(_QWORD *)(v15 + 1576) + *(unsigned int *)(*(_QWORD *)(v15 + 1584) + 4 * ((int)a2 - *(_DWORD *)(v15 + 1564)));
  *(_QWORD *)(v15 + 1224) = (v16 >> 3) & 0x1FFFFFFFFFFFFFF8;
  *(_DWORD *)(v15 + 1240) = 0;
  if ((v16 & 0x3F) != 0)
  {
    sub_22E745EC8(v15 + 1208, v16 & 0x3F, (uint64_t)&v102);
    if ((v103 & 1) != 0)
    {
      v99[0] = (uint64_t *)v102;
      if (v102)
      {
        sub_22E769A6C((uint64_t *)a1, v99);
        if (v99[0])
          (*(void (**)(uint64_t *))(*v99[0] + 8))(v99[0]);
        return 1;
      }
    }
  }
  v17 = *(_DWORD *)(v15 + 1568);
  ++*(_DWORD *)(a1 + 7368);
  sub_22E748020(v15 + 1208, 0, (uint64_t)&v105);
  if ((v106 & 1) != 0)
  {
    v26 = v105;
    v105 = 0;
    v102 = v26;
    sub_22E769A6C((uint64_t *)a1, (uint64_t **)&v102);
    if (v102)
      (*(void (**)(void *))(*(_QWORD *)v102 + 8))(v102);
  }
  else
  {
    if ((_DWORD)v105 == 3)
    {
      v102 = v104;
      v103 = 0x4000000000;
      v98[1] = 0;
      v98[2] = 0;
      llvm::BitstreamCursor::readRecord();
      if ((v101 & 1) != 0)
      {
        v29 = v100;
        v100 = 0;
        v99[0] = v29;
        sub_22E769A6C((uint64_t *)a1, v99);
        if (v99[0])
          (*(void (**)(uint64_t *))(*v99[0] + 8))(v99[0]);
        goto LABEL_103;
      }
      if ((_DWORD)v100 != 1)
      {
        if ((_DWORD)v100 != 2)
        {
          if ((_DWORD)v100 == 5)
          {
            HIDWORD(v18) = *((_DWORD *)v102 + 2);
            LODWORD(v18) = HIDWORD(v18);
            v19 = sub_22E77BAB4(a1, v15, v18 >> 1);
            v20 = *(_QWORD *)(a1 + 80);
            HIDWORD(v18) = *((_DWORD *)v102 + 4);
            LODWORD(v18) = HIDWORD(v18);
            v21 = sub_22E77BAB4(a1, v15, v18 >> 1);
            HIDWORD(v18) = *((_DWORD *)v102 + 6);
            LODWORD(v18) = HIDWORD(v18);
            v22 = sub_22E77BAB4(a1, v15, v18 >> 1);
            v23 = *((_DWORD *)v102 + 10);
            v24 = *((_QWORD *)v102 + 4) != 0;
            v25 = v17 + *(_DWORD *)v102;
            v99[0] = (uint64_t *)(v19 | (unint64_t)(v21 << 32));
            v99[1] = (uint64_t *)(v22 | (unint64_t)(v24 << 32));
            sub_22F1E1CA0(v20, (uint64_t *)v99, v23, a2, v25);
LABEL_98:
            v12 = 0;
            goto LABEL_104;
          }
          sub_22E769C10(a1, "incorrectly-formatted source location entry in AST file", 0x37uLL);
          goto LABEL_103;
        }
        v30 = *(_DWORD *)v102;
        v31 = *((_DWORD *)v102 + 4);
        HIDWORD(v32) = *((_DWORD *)v102 + 2);
        LODWORD(v32) = HIDWORD(v32);
        v33 = sub_22E77BAB4(a1, v15, v32 >> 1);
        if (!v33)
        {
          v34 = *(_DWORD *)(v15 + 4);
          v35 = v34 > 5;
          v36 = (1 << v34) & 0x23;
          if (v35 || v36 == 0)
            v33 = 0;
          else
            v33 = sub_22E76B630(a1, v15);
        }
        sub_22E76B690(v99, (uint64_t *)a1, v15 + 1208, 0, 0);
        v70 = v99[0];
        if (!v99[0])
          goto LABEL_103;
        v71 = *(_QWORD **)(a1 + 80);
        v99[0] = 0;
        v97 = v70;
        sub_22F1E1980(v71, (uint64_t *)&v97, v31, a2, v17 + v30, v33);
        v72 = (uint64_t)v97;
        if (v97)
LABEL_95:
          (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
LABEL_96:
        v73 = v99[0];
        v99[0] = 0;
        if (v73)
          (*(void (**)(uint64_t *))(*v73 + 8))(v73);
        goto LABEL_98;
      }
      v12 = 1;
      v38 = sub_22E76A92C(a1, v15, *((_DWORD *)v102 + 8), 1);
      v39 = v38 & 0xFFFFFFFFFFFFFFF8;
      if ((v38 & 0xFFFFFFFFFFFFFFF8) == 0)
        goto LABEL_104;
      v40 = v38;
      HIDWORD(v41) = *((_DWORD *)v102 + 2);
      LODWORD(v41) = HIDWORD(v41);
      v42 = sub_22E77BAB4(a1, v15, v41 >> 1);
      if (!v42)
      {
        if (*(_DWORD *)(v15 + 4) == 4)
          v42 = 0;
        else
          v42 = sub_22E76B630(a1, v15);
      }
      v43 = *((_DWORD *)v102 + 4);
      v44 = sub_22F1E170C(*(_QWORD *)(a1 + 80), v39, v42, v43, a2, v17 + *(_DWORD *)v102);
      v45 = *(_QWORD **)(a1 + 80);
      if (v44 + 1 > 1)
      {
        if ((v44 & 0x80000000) != 0)
        {
          v47 = -2 - v44;
          if (((*(_QWORD *)(v45[28] + 8 * ((-2 - v44) >> 6)) >> (-2 - v44)) & 1) != 0)
            v46 = v45[25] + 24 * v47;
          else
            v46 = sub_22F1E1134((uint64_t)v45, v47, 0);
        }
        else
        {
          v46 = v45[23] + 24 * v44;
        }
      }
      else
      {
        v46 = v45[23];
      }
      v48 = v102;
      v49 = *((_DWORD *)v102 + 10);
      *(_DWORD *)(v46 + 12) = *(_DWORD *)(v46 + 12) & 0x80000000 | v49 & 0x7FFFFFFF;
      if (v48[3])
        *(_DWORD *)(v46 + 12) = v49 | 0x80000000;
      v50 = v40 & 6;
      v51 = *((unsigned int *)v48 + 14);
      if (!*((_DWORD *)v48 + 14) || !*(_QWORD *)(a1 + 128))
      {
LABEL_78:
        if (v43)
          v64 = v43 == 3;
        else
          v64 = 1;
        v65 = !v64;
        v66 = sub_22F1E1214(*(_QWORD *)(a1 + 80), v39, v65);
        if (v50 != 2 || (*(_BYTE *)(v66 + 48) & 1) != 0)
          goto LABEL_98;
        v67 = *(_QWORD *)(v66 + 8);
        if (v67)
        {
          do
          {
            v68 = *(_QWORD *)(v67 + 8);
            v67 = v68 & 0xFFFFFFFFFFFFFFFCLL;
          }
          while ((v68 & 2) != 0 && v67);
        }
        if (v67 != *(_QWORD *)(v66 + 16))
          goto LABEL_98;
        v69 = *(llvm::MemoryBuffer **)v66;
        if (v69)
        {
          llvm::MemoryBuffer::getMemBufferRef(v69);
          goto LABEL_98;
        }
        v74 = v39;
        do
        {
          v75 = (void **)v74;
          v76 = *(_QWORD *)(v74 + 8);
          if ((v76 & 2) == 0)
            break;
          v74 = v76 & 0xFFFFFFFFFFFFFFFCLL;
        }
        while (v74);
        sub_22E76B690(v99, (uint64_t *)a1, v15 + 1208, v75 + 4, *v75);
        v77 = v99[0];
        if (!v99[0])
        {
LABEL_103:
          v12 = 1;
LABEL_104:
          if ((v101 & 1) != 0)
          {
            v78 = v100;
            v100 = 0;
            if (v78)
              (*(void (**)(uint64_t *))(*v78 + 8))(v78);
          }
          if (v102 != v104)
            free(v102);
          goto LABEL_31;
        }
        v88 = *(_QWORD *)(a1 + 80);
        v99[0] = 0;
        v98[0] = (uint64_t)v77;
        sub_22F2B0C44(v88, v39, v98);
        v72 = v98[0];
        if (v98[0])
          goto LABEL_95;
        goto LABEL_96;
      }
      v52 = *(_QWORD *)(v15 + 3152) + 4 * v48[6];
      v53 = *(_DWORD *)(a1 + 3600);
      if (v53)
      {
        v54 = *(_QWORD *)(a1 + 3584);
        v55 = (v53 - 1) & v44;
        v56 = (unsigned int *)(v54 + 32 * v55);
        v57 = *v56;
        if (v44 == *v56)
        {
LABEL_77:
          *((_QWORD *)v56 + 1) = v15;
          *((_QWORD *)v56 + 2) = v52;
          *((_QWORD *)v56 + 3) = v51;
          goto LABEL_78;
        }
        v58 = 0;
        v59 = 1;
        while (v57)
        {
          if (v58)
            v60 = 0;
          else
            v60 = v57 == -1;
          if (v60)
            v58 = v56;
          v61 = v55 + v59++;
          v55 = v61 & (v53 - 1);
          v56 = (unsigned int *)(v54 + 32 * v55);
          v57 = *v56;
          if (v44 == *v56)
            goto LABEL_77;
        }
        if (v58)
          v56 = v58;
      }
      else
      {
        v56 = 0;
      }
      v62 = a1 + 3584;
      v63 = *(_DWORD *)(a1 + 3592);
      if (4 * v63 + 4 >= 3 * v53)
      {
        sub_22E78FB5C(v62, 2 * v53);
        v79 = *(_DWORD *)(a1 + 3600);
        if (v79)
        {
          v80 = *(_QWORD *)(a1 + 3584);
          v81 = v79 - 1;
          v82 = (v79 - 1) & v44;
          v56 = (unsigned int *)(v80 + 32 * v82);
          v83 = *v56;
          if (v44 == *v56)
            goto LABEL_74;
          v84 = 0;
          v85 = 1;
          while (v83)
          {
            if (v84)
              v86 = 0;
            else
              v86 = v83 == -1;
            if (v86)
              v84 = v56;
            v87 = v82 + v85++;
            v82 = v87 & v81;
            v56 = (unsigned int *)(v80 + 32 * v82);
            v83 = *v56;
            if (v44 == *v56)
              goto LABEL_74;
          }
LABEL_138:
          if (v84)
            v56 = v84;
          goto LABEL_74;
        }
      }
      else
      {
        if (v53 + ~v63 - *(_DWORD *)(a1 + 3596) > v53 >> 3)
        {
LABEL_74:
          ++*(_DWORD *)(a1 + 3592);
          if (*v56)
            --*(_DWORD *)(a1 + 3596);
          *v56 = v44;
          *((_QWORD *)v56 + 2) = 0;
          *((_QWORD *)v56 + 3) = 0;
          *((_QWORD *)v56 + 1) = 0;
          goto LABEL_77;
        }
        sub_22E78FB5C(v62, v53);
        v89 = *(_DWORD *)(a1 + 3600);
        if (v89)
        {
          v90 = *(_QWORD *)(a1 + 3584);
          v91 = v89 - 1;
          v92 = (v89 - 1) & v44;
          v56 = (unsigned int *)(v90 + 32 * v92);
          v93 = *v56;
          if (v44 == *v56)
            goto LABEL_74;
          v84 = 0;
          v94 = 1;
          while (v93)
          {
            if (v84)
              v95 = 0;
            else
              v95 = v93 == -1;
            if (v95)
              v84 = v56;
            v96 = v92 + v94++;
            v92 = v96 & v91;
            v56 = (unsigned int *)(v90 + 32 * v92);
            v93 = *v56;
            if (v44 == *v56)
              goto LABEL_74;
          }
          goto LABEL_138;
        }
      }
      v56 = 0;
      goto LABEL_74;
    }
    sub_22E769C10(a1, "incorrectly-formatted source location entry in AST file", 0x37uLL);
  }
  v12 = 1;
LABEL_31:
  if ((v106 & 1) != 0)
  {
    v27 = v105;
    v105 = 0;
    if (v27)
      (*(void (**)(void *))(*(_QWORD *)v27 + 8))(v27);
  }
  return v12;
}

unint64_t sub_22E76A92C(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v12;
  unint64_t v13;
  time_t v14;
  unint64_t v15;
  int v16;
  int v17;
  char **v18;
  size_t v19;
  unint64_t v20;
  std::string::size_type v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  int *v29;
  uint64_t v30;
  char v32;
  const std::string::value_type *v33;
  std::string::size_type v34;
  std::string *v35;
  size_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  int v42;
  BOOL v43;
  int v44;
  std::string::size_type v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t *v55;
  unsigned int v56;
  std::string::value_type *v57;
  uint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  uint64_t v61;
  void *v62;
  _QWORD *v63;
  void *v64;
  char v65;
  BOOL v66;
  void *v67;
  size_t v68;
  size_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned __int8 *v74;
  std::string::size_type v75;
  uint64_t v76;
  unsigned __int8 *v77;
  std::string::size_type v78;
  uint64_t v79;
  std::string::size_type v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  BOOL v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  void **v88;
  size_t v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  void **v95;
  size_t v96;
  std::string::size_type v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  void *v102;
  size_t v103;
  unint64_t v104;
  std::string::size_type v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  void *v112;
  char v113;
  void *v114;
  size_t v115;
  size_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  void *v120;
  char v121;
  void *v122;
  size_t v123;
  size_t v124;
  int v125;
  std::string::size_type v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  std::string *v133;
  size_t v134;
  std::string::size_type v135;
  uint64_t *v136;
  uint64_t *v137;
  std::string::size_type v138;
  unsigned int v139;
  size_t v140;
  uint64_t v141;
  void *v142;
  int v143;
  char **v144;
  size_t v145;
  void *v146[2];
  char v147;
  std::string v148;
  __int16 v149;
  uint64_t v150[2];
  void *__p[2];
  char v152;
  char v153[2];
  char v154;
  std::string v155;
  char **v156;
  size_t v157;
  char v158;
  uint64_t v159;
  unint64_t v160;
  time_t v161;
  unsigned __int8 v162;
  unsigned __int8 v163;
  _BYTE v164[20];
  char v165;
  char v166[16];

  *(_QWORD *)v166 = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return 0;
  v6 = *(_QWORD *)(a2 + 1144);
  if (a3 > (unint64_t)((*(_QWORD *)(a2 + 1152) - v6) >> 3))
    return 0;
  v9 = a3 - 1;
  v7 = *(_QWORD *)(v6 + 8 * v9);
  if (v7 > 7)
    return v7;
  if ((~(_BYTE)v7 & 6) == 0)
    return 0;
  v12 = 8 * *(_QWORD *)(a2 + 808) - *(unsigned int *)(a2 + 824);
  v150[0] = a2 + 792;
  v150[1] = v12;
  v13 = *(_QWORD *)(*(_QWORD *)(a2 + 1136) + 8 * v9);
  *(_QWORD *)(a2 + 808) = (v13 >> 3) & 0x1FFFFFFFFFFFFFF8;
  *(_DWORD *)(a2 + 824) = 0;
  if ((v13 & 0x3F) != 0)
  {
    sub_22E745EC8(a2 + 792, v13 & 0x3F, (uint64_t)&v156);
    if ((v157 & 1) != 0)
    {
      if (v156)
      {
        v155.__r_.__value_.__r.__words[0] = (std::string::size_type)v156;
        sub_22E6C5940(&v155.__r_.__value_.__l.__data_, (char **)&v156);
        if (v155.__r_.__value_.__r.__words[0])
          (*(void (**)(std::string::size_type))(*(_QWORD *)v155.__r_.__value_.__l.__data_ + 8))(v155.__r_.__value_.__r.__words[0]);
      }
    }
  }
  sub_22E76DF4C(a2, a3, (uint64_t)&v156);
  v15 = v160;
  v14 = v161;
  v16 = v162;
  v17 = v163;
  if (v158 >= 0)
    v18 = (char **)&v156;
  else
    v18 = v156;
  if (v158 >= 0)
    v19 = v158 & 0x7F;
  else
    v19 = v157;
  v141 = v159;
  v144 = v18;
  v145 = v19;
  sub_22F1D0894(*(_QWORD *)(a1 + 88), v18, v19, 0, 1, (uint64_t)&v155);
  v20 = sub_22E6D5834(&v155);
  if ((v155.__r_.__value_.__s.__data_[8] & 1) != 0)
  {
    v21 = v155.__r_.__value_.__r.__words[0];
    v155.__r_.__value_.__r.__words[0] = 0;
    if (v21)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v21 + 8))(v21);
  }
  if (v17 | v16 && !v20)
    v20 = sub_22F1D1104(*(_QWORD *)(a1 + 88), v144, v145, v15, v14);
  if (!v20)
  {
    if (a4)
    {
      *((_BYTE *)&v155.__r_.__value_.__s + 23) = 21;
      strcpy((char *)&v155, "could not find file '");
      std::string::append(&v155, (const std::string::value_type *)v144, v145);
      std::string::append(&v155, "' referenced by AST file '");
      v32 = *(_BYTE *)(a2 + 31);
      v33 = v32 >= 0 ? (const std::string::value_type *)(a2 + 8) : *(const std::string::value_type **)(a2 + 8);
      v34 = v32 >= 0 ? v32 & 0x7F : *(_QWORD *)(a2 + 16);
      std::string::append(&v155, v33, v34);
      std::string::append(&v155, "'");
      v35 = (v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v155
          : (std::string *)v155.__r_.__value_.__r.__words[0];
      v36 = (v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? *((_BYTE *)&v155.__r_.__value_.__s + 23) & 0x7F
          : v155.__r_.__value_.__l.__size_;
      sub_22E769C10(a1, v35, v36);
      if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v155.__r_.__value_.__l.__data_);
    }
    goto LABEL_56;
  }
  v143 = v17 | v16;
  if (v17 | v16)
    goto LABEL_27;
  v22 = *(_QWORD *)(a1 + 80);
  v23 = v20;
  do
  {
    v24 = *(_QWORD *)(v23 + 8);
    v23 = v24 & 0xFFFFFFFFFFFFFFFCLL;
  }
  while ((v24 & 2) != 0 && v23);
  v25 = *(_QWORD *)(v22 + 152);
  if (!v25)
    goto LABEL_27;
  v155.__r_.__value_.__r.__words[0] = v23;
  v148.__r_.__value_.__r.__words[0] = 0;
  if ((sub_22E67A334(v25 + 24, &v155, &v148) & 1) == 0)
  {
    v136 = *(uint64_t **)(v22 + 152);
    v148.__r_.__value_.__r.__words[0] = v23;
    v155.__r_.__value_.__r.__words[0] = 0;
    v137 = v136;
    v138 = (sub_22F246C54(v136, &v148, &v155) & 1) != 0
         ? v155.__r_.__value_.__r.__words[0]
         : *v137 + 16 * *((unsigned int *)v137 + 4);
    if (v138 == **(_QWORD **)(v22 + 152) + 16 * *(unsigned int *)(*(_QWORD *)(v22 + 152) + 16))
      goto LABEL_27;
  }
  if (a4)
    sub_22E769FA4(a1, 909, v144, v145, 0, 0, 0, 0);
  v20 = sub_22F423AA4(v22, v20);
  if (v20)
  {
LABEL_27:
    v26 = v20;
    do
    {
      v27 = *(_QWORD *)(v26 + 8);
      v26 = v27 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while ((v27 & 2) != 0 && v26);
    if (v15 == *(_QWORD *)(v26 + 24))
    {
      v28 = *(_DWORD *)(a1 + 7320);
      if (!v28)
        goto LABEL_72;
      v29 = (int *)(a1 + 500);
      if (!*(_BYTE *)(a1 + 504))
        v29 = (int *)(a2 + 4);
      v30 = *v29;
      if (v30 <= 5)
      {
        if ((dword_22F45EDA8[v30] & v28) != 0 || v14 == 0)
          goto LABEL_90;
      }
      else
      {
LABEL_72:
        if (!v14)
          goto LABEL_90;
      }
      v48 = v20;
      do
      {
        v49 = *(_QWORD *)(v48 + 8);
        v48 = v49 & 0xFFFFFFFFFFFFFFFCLL;
      }
      while ((v49 & 2) != 0 && v48);
      if (v14 == *(_QWORD *)(v48 + 32))
        goto LABEL_90;
      v50 = v20;
      do
      {
        v51 = *(_QWORD *)(v50 + 8);
        v50 = v51 & 0xFFFFFFFFFFFFFFFCLL;
      }
      while ((v51 & 2) != 0 && v50);
      v41 = *(_QWORD *)(v50 + 32);
      v52 = v20;
      do
      {
        v53 = *(_QWORD *)(v52 + 8);
        v52 = v53 & 0xFFFFFFFFFFFFFFFCLL;
      }
      while ((v53 & 2) != 0 && v52);
      if (!*(_QWORD *)(v52 + 32))
        goto LABEL_90;
      if (*(_BYTE *)(a1 + 7327))
        v54 = v141 == -1;
      else
        v54 = 1;
      if (v54)
      {
        v15 = v14;
        v42 = 1;
        v40 = 1;
      }
      else
      {
        v60 = v20;
        do
        {
          v61 = *(_QWORD *)(v60 + 8);
          v60 = v61 & 0xFFFFFFFFFFFFFFFCLL;
        }
        while ((v61 & 2) != 0 && v60);
        sub_22F1D1980(*(_QWORD *)(a1 + 88), v60, 0, 1, 0, (uint64_t)&v155);
        if ((v155.__r_.__value_.__s.__data_[16] & 1) != 0)
        {
          if (a4)
          {
            v148.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
            *(_OWORD *)&v148.__r_.__value_.__r.__words[1] = xmmword_22F45AD60;
            strcpy(v148.__r_.__value_.__l.__data_, "could not get buffer for file '");
            v130 = v20;
            do
            {
              v131 = v130;
              v132 = *(_QWORD *)(v130 + 8);
              if ((v132 & 2) == 0)
                break;
              v130 = v132 & 0xFFFFFFFFFFFFFFFCLL;
            }
            while (v130);
            std::string::append(&v148, (const std::string::value_type *)(v131 + 32), *(_QWORD *)v131);
            std::string::append(&v148, "'");
            v133 = (v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                 ? &v148
                 : (std::string *)v148.__r_.__value_.__r.__words[0];
            v134 = (v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                 ? *((_BYTE *)&v148.__r_.__value_.__s + 23) & 0x7F
                 : v148.__r_.__value_.__l.__size_;
            sub_22E769C10(a1, v133, v134);
            if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v148.__r_.__value_.__l.__data_);
          }
          v15 = v14;
          v42 = 1;
          v40 = 1;
        }
        else
        {
          v42 = 0;
          v15 = 0;
          v41 = 0;
          if (v141 == llvm::hash_value())
            v40 = 3;
          else
            v40 = 2;
        }
        if ((v155.__r_.__value_.__s.__data_[16] & 1) == 0)
        {
          v135 = v155.__r_.__value_.__r.__words[0];
          v155.__r_.__value_.__r.__words[0] = 0;
          if (v135)
            (*(void (**)(std::string::size_type))(*(_QWORD *)v135 + 8))(v135);
        }
      }
    }
    else
    {
      v38 = v20;
      do
      {
        v39 = *(_QWORD *)(v38 + 8);
        v38 = v39 & 0xFFFFFFFFFFFFFFFCLL;
      }
      while ((v39 & 2) != 0 && v38);
      v40 = 0;
      v41 = *(_QWORD *)(v38 + 24);
      v42 = 1;
    }
    if (v16)
      v43 = 1;
    else
      v43 = v40 == 3;
    v44 = v43;
    if (!v43)
    {
      if (a4)
      {
        v45 = *(_QWORD *)(a1 + 104);
        if (*(_DWORD *)(v45 + 316) == -1)
        {
          v155.__r_.__value_.__r.__words[0] = (std::string::size_type)&v155.__r_.__value_.__r.__words[2];
          v155.__r_.__value_.__r.__words[2] = a2;
          v155.__r_.__value_.__l.__size_ = 0x400000001;
          v55 = *(uint64_t **)(a2 + 3368);
          if (v55 == *(uint64_t **)(a2 + 3376))
          {
            v59 = (_QWORD *)a2;
          }
          else
          {
            v56 = 1;
            v57 = &v155.__r_.__value_.__s.__data_[16];
            do
            {
              v58 = *v55;
              if (v56 >= HIDWORD(v155.__r_.__value_.__r.__words[1]))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v57 = (std::string::value_type *)v155.__r_.__value_.__r.__words[0];
                v56 = v155.__r_.__value_.__r.__words[1];
              }
              *(_QWORD *)&v57[8 * v56] = v58;
              v56 = LODWORD(v155.__r_.__value_.__r.__words[1]) + 1;
              LODWORD(v155.__r_.__value_.__r.__words[1]) = v56;
              v57 = (std::string::value_type *)v155.__r_.__value_.__r.__words[0];
              v59 = *(_QWORD **)(v155.__r_.__value_.__r.__words[0] + 8 * v56 - 8);
              v55 = (uint64_t *)v59[421];
            }
            while (v55 != (uint64_t *)v59[422]);
            v45 = *(_QWORD *)(a1 + 104);
          }
          v139 = v42;
          v64 = (void *)v59[1];
          v63 = v59 + 1;
          v62 = v64;
          v65 = *((_BYTE *)v63 + 23);
          v66 = v65 < 0;
          if (v65 >= 0)
            v67 = v63;
          else
            v67 = v62;
          v68 = v63[1];
          v69 = v65 & 0x7F;
          if (!v66)
            v68 = v69;
          v140 = v68;
          v142 = v67;
          *(_DWORD *)(v45 + 312) = *(_DWORD *)(a1 + 496);
          *(_DWORD *)(v45 + 316) = 907;
          if (*(char *)(v45 + 311) < 0)
          {
            **(_BYTE **)(v45 + 288) = 0;
            *(_QWORD *)(v45 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v45 + 288) = 0;
            *(_BYTE *)(v45 + 311) = 0;
          }
          *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v45 + 320;
          v148.__r_.__value_.__r.__words[2] = v45;
          v149 = 1;
          *(_BYTE *)(v45 + 320) = 0;
          *(_DWORD *)(v45 + 664) = 0;
          v70 = *(unsigned int *)(v45 + 776);
          if ((_DWORD)v70)
          {
            v71 = *(_QWORD *)(v45 + 768);
            v72 = 56 * v70;
            do
            {
              if (*(char *)(v71 + v72 - 9) < 0)
                operator delete(*(void **)(v71 + v72 - 32));
              v72 -= 56;
            }
            while (v72);
          }
          *(_DWORD *)(v45 + 776) = 0;
          sub_22E3B89A8((unsigned __int8 **)&v148, v144, v145);
          v73 = qword_22F45EDC0[*(int *)(*(_QWORD *)(v155.__r_.__value_.__r.__words[0]
                                                   + 8 * LODWORD(v155.__r_.__value_.__r.__words[1])
                                                   - 8)
                                       + 4)];
          v74 = (unsigned __int8 *)v148.__r_.__value_.__r.__words[0];
          if (!v148.__r_.__value_.__r.__words[0])
          {
            v74 = (unsigned __int8 *)sub_22E3B8AAC(v148.__r_.__value_.__l.__size_);
            v148.__r_.__value_.__r.__words[0] = (std::string::size_type)v74;
          }
          v74[*v74 + 1] = 3;
          v75 = v148.__r_.__value_.__r.__words[0];
          v76 = *v148.__r_.__value_.__l.__data_;
          *v148.__r_.__value_.__l.__data_ = v76 + 1;
          *(_QWORD *)(v75 + 8 * v76 + 16) = v73;
          sub_22E3B89A8((unsigned __int8 **)&v148, v142, v140);
          v77 = (unsigned __int8 *)v148.__r_.__value_.__r.__words[0];
          if (!v148.__r_.__value_.__r.__words[0])
          {
            v77 = (unsigned __int8 *)sub_22E3B8AAC(v148.__r_.__value_.__l.__size_);
            v148.__r_.__value_.__r.__words[0] = (std::string::size_type)v77;
          }
          v77[*v77 + 1] = 2;
          v78 = v148.__r_.__value_.__r.__words[0];
          v79 = *v148.__r_.__value_.__l.__data_;
          *v148.__r_.__value_.__l.__data_ = v79 + 1;
          *(_QWORD *)(v78 + 8 * v79 + 16) = v40;
          *(_BYTE *)(v78 + (v79 + 1) + 1) = 2;
          v80 = v148.__r_.__value_.__r.__words[0];
          v81 = *v148.__r_.__value_.__l.__data_;
          *v148.__r_.__value_.__l.__data_ = v81 + 1;
          *(_QWORD *)(v80 + 8 * v81 + 16) = v139;
          if (v139)
            v82 = v15;
          else
            v82 = 0;
          if ((v82 & 0x8000000000000000) != 0)
          {
            v85 = 0;
            v86 = -(uint64_t)v82;
            do
            {
              v153[--v85] = (v86 % 0xA) | 0x30;
              v84 = v86 > 9;
              v86 /= 0xAuLL;
            }
            while (v84);
            v153[v85 - 1] = 45;
            v83 = &v153[v85 - 1];
            v87 = (char *)(1 - v85);
          }
          else
          {
            if (v82)
            {
              v83 = v153;
              do
              {
                *--v83 = (v15 % 0xA) | 0x30;
                v84 = v15 > 9;
                v15 /= 0xAuLL;
              }
              while (v84);
            }
            else
            {
              v83 = &v152;
              v152 = 48;
            }
            v87 = (char *)(v153 - v83);
          }
          sub_22E3B4274(v146, v83, v153, (unint64_t)v87);
          if (v147 >= 0)
            v88 = v146;
          else
            v88 = (void **)v146[0];
          if (v147 >= 0)
            v89 = v147 & 0x7F;
          else
            v89 = (size_t)v146[1];
          sub_22E3B89A8((unsigned __int8 **)&v148, v88, v89);
          if (v139)
            v90 = v41;
          else
            v90 = 0;
          if ((v90 & 0x8000000000000000) != 0)
          {
            v92 = 0;
            v93 = -(uint64_t)v90;
            do
            {
              v166[--v92] = (v93 % 0xA) | 0x30;
              v84 = v93 > 9;
              v93 /= 0xAuLL;
            }
            while (v84);
            v164[v92 + 20] = 45;
            v91 = &v164[v92 + 20];
            v94 = (char *)(1 - v92);
          }
          else
          {
            if (v90)
            {
              v91 = v166;
              do
              {
                *--v91 = (v41 % 0xA) | 0x30;
                v84 = v41 > 9;
                v41 /= 0xAuLL;
              }
              while (v84);
            }
            else
            {
              v91 = &v165;
              v165 = 48;
            }
            v94 = (char *)(v166 - v91);
          }
          sub_22E3B4274(__p, v91, v166, (unint64_t)v94);
          if (v154 >= 0)
            v95 = __p;
          else
            v95 = (void **)__p[0];
          if (v154 >= 0)
            v96 = v154 & 0x7F;
          else
            v96 = (size_t)__p[1];
          sub_22E3B89A8((unsigned __int8 **)&v148, v95, v96);
          if (v154 < 0)
            operator delete(__p[0]);
          if (v147 < 0)
            operator delete(v146[0]);
          sub_22E3BB0B8((uint64_t)&v148);
          if (LODWORD(v155.__r_.__value_.__r.__words[1]) >= 2)
          {
            v97 = *(_QWORD *)(a1 + 104);
            *(_DWORD *)(v97 + 312) = *(_DWORD *)(a1 + 496);
            *(_DWORD *)(v97 + 316) = 945;
            if (*(char *)(v97 + 311) < 0)
            {
              **(_BYTE **)(v97 + 288) = 0;
              *(_QWORD *)(v97 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v97 + 288) = 0;
              *(_BYTE *)(v97 + 311) = 0;
            }
            *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v97 + 320;
            v148.__r_.__value_.__r.__words[2] = v97;
            v149 = 1;
            *(_BYTE *)(v97 + 320) = 0;
            *(_DWORD *)(v97 + 664) = 0;
            v98 = *(unsigned int *)(v97 + 776);
            if ((_DWORD)v98)
            {
              v99 = *(_QWORD *)(v97 + 768);
              v100 = 56 * v98;
              do
              {
                if (*(char *)(v99 + v100 - 9) < 0)
                  operator delete(*(void **)(v99 + v100 - 32));
                v100 -= 56;
              }
              while (v100);
            }
            *(_DWORD *)(v97 + 776) = 0;
            sub_22E3B89A8((unsigned __int8 **)&v148, v144, v145);
            v101 = *(_BYTE *)(*(_QWORD *)v155.__r_.__value_.__l.__data_ + 31);
            if (v101 >= 0)
              v102 = (void *)(*(_QWORD *)v155.__r_.__value_.__l.__data_ + 8);
            else
              v102 = *(void **)(*(_QWORD *)v155.__r_.__value_.__l.__data_ + 8);
            if (v101 >= 0)
              v103 = v101 & 0x7F;
            else
              v103 = *(_QWORD *)(*(_QWORD *)v155.__r_.__value_.__l.__data_ + 16);
            sub_22E3B89A8((unsigned __int8 **)&v148, v102, v103);
            sub_22E3BB0B8((uint64_t)&v148);
            if (LODWORD(v155.__r_.__value_.__r.__words[1]) >= 2)
            {
              v104 = 1;
              do
              {
                v105 = *(_QWORD *)(a1 + 104);
                *(_DWORD *)(v105 + 312) = *(_DWORD *)(a1 + 496);
                *(_DWORD *)(v105 + 316) = 945;
                if (*(char *)(v105 + 311) < 0)
                {
                  **(_BYTE **)(v105 + 288) = 0;
                  *(_QWORD *)(v105 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v105 + 288) = 0;
                  *(_BYTE *)(v105 + 311) = 0;
                }
                *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v105 + 320;
                v148.__r_.__value_.__r.__words[2] = v105;
                v149 = 1;
                *(_BYTE *)(v105 + 320) = 0;
                *(_DWORD *)(v105 + 664) = 0;
                v106 = *(unsigned int *)(v105 + 776);
                if ((_DWORD)v106)
                {
                  v107 = *(_QWORD *)(v105 + 768);
                  v108 = 56 * v106;
                  do
                  {
                    if (*(char *)(v107 + v108 - 9) < 0)
                      operator delete(*(void **)(v107 + v108 - 32));
                    v108 -= 56;
                  }
                  while (v108);
                }
                *(_DWORD *)(v105 + 776) = 0;
                v109 = *(_QWORD *)(v155.__r_.__value_.__r.__words[0] + 8 * v104 - 8);
                v112 = *(void **)(v109 + 8);
                v110 = v109 + 8;
                v111 = v112;
                v113 = *(_BYTE *)(v110 + 23);
                if (v113 >= 0)
                  v114 = (void *)v110;
                else
                  v114 = v111;
                v115 = *(_QWORD *)(v110 + 8);
                if (v113 >= 0)
                  v116 = v113 & 0x7F;
                else
                  v116 = v115;
                sub_22E3B89A8((unsigned __int8 **)&v148, v114, v116);
                v117 = *(_QWORD *)(v155.__r_.__value_.__r.__words[0] + 8 * v104);
                v120 = *(void **)(v117 + 8);
                v118 = v117 + 8;
                v119 = v120;
                v121 = *(_BYTE *)(v118 + 23);
                if (v121 >= 0)
                  v122 = (void *)v118;
                else
                  v122 = v119;
                v123 = *(_QWORD *)(v118 + 8);
                if (v121 >= 0)
                  v124 = v121 & 0x7F;
                else
                  v124 = v123;
                sub_22E3B89A8((unsigned __int8 **)&v148, v122, v124);
                sub_22E3BB0B8((uint64_t)&v148);
                ++v104;
              }
              while (v104 < LODWORD(v155.__r_.__value_.__r.__words[1]));
            }
          }
          v125 = *(_DWORD *)(a1 + 496);
          v126 = *(_QWORD *)(a1 + 104);
          *(_DWORD *)(v126 + 312) = v125;
          *(_DWORD *)(v126 + 316) = 944;
          if (*(char *)(v126 + 311) < 0)
          {
            **(_BYTE **)(v126 + 288) = 0;
            *(_QWORD *)(v126 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v126 + 288) = 0;
            *(_BYTE *)(v126 + 311) = 0;
          }
          v47 = v143;
          *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v126 + 320;
          v148.__r_.__value_.__r.__words[2] = v126;
          v149 = 1;
          *(_BYTE *)(v126 + 320) = 0;
          *(_DWORD *)(v126 + 664) = 0;
          v127 = *(unsigned int *)(v126 + 776);
          if ((_DWORD)v127)
          {
            v128 = *(_QWORD *)(v126 + 768);
            v129 = 56 * v127;
            do
            {
              if (*(char *)(v128 + v129 - 9) < 0)
                operator delete(*(void **)(v128 + v129 - 32));
              v129 -= 56;
            }
            while (v129);
          }
          *(_DWORD *)(v126 + 776) = 0;
          sub_22E3B89A8((unsigned __int8 **)&v148, v142, v140);
          sub_22E3BB0B8((uint64_t)&v148);
          if ((std::string::size_type *)v155.__r_.__value_.__l.__data_ != &v155.__r_.__value_.__r.__words[2])
            free(v155.__r_.__value_.__l.__data_);
          v46 = 4;
          goto LABEL_91;
        }
      }
    }
    if (!v44)
    {
      v46 = 4;
      v47 = v143;
LABEL_91:
      if (v47)
        v46 = 2;
      v37 = v46 | v20 & 0xFFFFFFFFFFFFFFF9;
      v7 = v37;
      goto LABEL_94;
    }
LABEL_90:
    v47 = v143;
    v46 = 0;
    goto LABEL_91;
  }
LABEL_56:
  v7 = 0;
  v37 = 6;
LABEL_94:
  *(_QWORD *)(*(_QWORD *)(a2 + 1144) + 8 * v9) = v37;
  if (v158 < 0)
    operator delete(v156);
  sub_22E78CE68(v150);
  return v7;
}

uint64_t sub_22E76B630(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  _DWORD *v6;

  v2 = *(unsigned int *)(a2 + 740);
  if (!(_DWORD)v2)
  {
    v4 = *(uint64_t **)(a2 + 3368);
    if (v4 == *(uint64_t **)(a2 + 3376) || (v5 = *v4) == 0)
    {
      v6 = sub_22E49F3DC(*(_QWORD **)(a1 + 80), *(_DWORD *)(*(_QWORD *)(a1 + 80) + 344));
      if (v6)
        return *v6 & 0x7FFFFFFF;
      else
        return 0;
    }
    else
    {
      return *(unsigned int *)(v5 + 744);
    }
  }
  return v2;
}

void sub_22E76B690(_QWORD *a1, uint64_t *a2, uint64_t a3, void *a4, void *a5)
{
  llvm::zlib *Record;
  void *v10;
  char *v11;
  uint64_t v12;
  size_t v13;
  void *v14;
  std::string *v15;
  std::string::size_type v16;
  void **v17;
  size_t v18;
  char *v19;
  std::string v20;
  char *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];
  void *__p[2];
  uint64_t v27;
  __int16 v28;
  void *v29;
  char v30;
  void *v31;
  uint64_t v32;
  _QWORD v33[65];

  v33[64] = *MEMORY[0x24BDAC8D0];
  v31 = v33;
  v32 = 0x4000000000;
  v25[0] = 0;
  v25[1] = 0;
  sub_22E745EC8(a3, *(_DWORD *)(a3 + 36), (uint64_t)__p);
  if (((uint64_t)__p[1] & 1) == 0)
  {
    Record = (llvm::zlib *)llvm::BitstreamCursor::readRecord();
    if ((v30 & 1) != 0)
    {
      v10 = v29;
      v29 = 0;
      __p[0] = v10;
      sub_22E769A6C(a2, (uint64_t **)__p);
      if (__p[0])
        (*(void (**)(void *))(*(_QWORD *)__p[0] + 8))(__p[0]);
    }
    else
    {
      if ((_DWORD)v29 == 3)
      {
        llvm::MemoryBuffer::getMemBuffer();
LABEL_17:
        if ((v30 & 1) != 0)
        {
          v14 = v29;
          v29 = 0;
          if (v14)
            (*(void (**)(void *))(*(_QWORD *)v14 + 8))(v14);
        }
        goto LABEL_20;
      }
      if ((_DWORD)v29 == 4)
      {
        if ((llvm::zlib::isAvailable(Record) & 1) != 0)
        {
          v23 = 0;
          v24 = 0;
          v22 = v25;
          llvm::zlib::uncompress();
          if (v21)
          {
            v19 = v21;
            v21 = 0;
            sub_22F2432A8(&v19, &v20);
            v15 = std::string::insert(&v20, 0, "could not decompress embedded file contents: ");
            v16 = v15->__r_.__value_.__r.__words[2];
            *(_OWORD *)__p = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
            v27 = v16;
            v15->__r_.__value_.__l.__size_ = 0;
            v15->__r_.__value_.__r.__words[2] = 0;
            v15->__r_.__value_.__r.__words[0] = 0;
            if (v27 >= 0)
              v17 = __p;
            else
              v17 = (void **)__p[0];
            if (v27 >= 0)
              v18 = HIBYTE(v27) & 0x7F;
            else
              v18 = (size_t)__p[1];
            sub_22E769C10((uint64_t)a2, v17, v18);
            if (SHIBYTE(v27) < 0)
              operator delete(__p[0]);
            if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v20.__r_.__value_.__l.__data_);
            if (v19)
              (*(void (**)(char *))(*(_QWORD *)v19 + 8))(v19);
            *a1 = 0;
            if (v21)
              (*(void (**)(char *))(*(_QWORD *)v21 + 8))(v21);
          }
          else
          {
            v28 = 261;
            __p[0] = a4;
            __p[1] = a5;
            llvm::MemoryBuffer::getMemBufferCopy();
          }
          if (v22 != v25)
            free(v22);
          goto LABEL_17;
        }
        v11 = "zlib is not available";
        v12 = (uint64_t)a2;
        v13 = 21;
      }
      else
      {
        v11 = "AST record has invalid code";
        v12 = (uint64_t)a2;
        v13 = 27;
      }
      sub_22E769C10(v12, v11, v13);
    }
    *a1 = 0;
    goto LABEL_17;
  }
  sub_22E769A6C(a2, (uint64_t **)__p);
  if (__p[0])
    (*(void (**)(void *))(*(_QWORD *)__p[0] + 8))(__p[0]);
  *a1 = 0;
LABEL_20:
  if (v31 != v33)
    free(v31);
}

uint64_t sub_22E76B974(uint64_t a1, uint64_t a2)
{
  return sub_22E76A0FC(a1 - 48, a2);
}

void sub_22E76B97C(_QWORD *a1, llvm::BitstreamCursor *this, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  llvm::BitstreamCursor::EnterSubBlock(this, a3, 0);
  if (!*a1)
  {
    if (a4)
      *a4 = 8 * *((_QWORD *)this + 2) - *((unsigned int *)this + 8);
    while (1)
    {
      v7 = *((_QWORD *)this + 2);
      v8 = *((unsigned int *)this + 8);
      sub_22E745EC8((uint64_t)this, *((_DWORD *)this + 9), (uint64_t)&v11);
      if ((v12 & 1) != 0)
      {
        v10 = v11;
        goto LABEL_11;
      }
      if ((_DWORD)v11 != 2)
        break;
      llvm::BitstreamCursor::ReadAbbrevRecord(this);
      if (*a1)
        return;
    }
    v9 = 8 * v7 - v8;
    *((_QWORD *)this + 2) = (v9 >> 3) & 0x1FFFFFFFFFFFFFF8;
    *((_DWORD *)this + 8) = 0;
    if ((v9 & 0x3F) == 0 || (sub_22E745EC8((uint64_t)this, v9 & 0x3F, (uint64_t)&v11), (v12 & 1) == 0))
    {
      v10 = 0;
LABEL_11:
      *a1 = v10;
      return;
    }
    v10 = v11;
    *a1 = v11;
    if (!v10)
      goto LABEL_11;
  }
}

uint64_t sub_22E76BAA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _DWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)(a5 + 8) = 0;
  v10 = *a4;
  *a4 = v10 + 1;
  HIDWORD(v11) = *(_QWORD *)(*a3 + 8 * v10);
  LODWORD(v11) = HIDWORD(v11);
  v12 = sub_22E77BAB4(a1, a2, v11 >> 1);
  v13 = *a4;
  v14 = *a3;
  v15 = *(_QWORD *)(*a3 + 8 * v13);
  *(_DWORD *)a5 = v12;
  *(_DWORD *)(a5 + 4) = v15;
  *a4 = v13 + 2;
  v16 = sub_22E768E34(a1, a2, *(_QWORD *)(v14 + 8 * (v13 + 1)));
  result = sub_22E785944(a1, v16);
  if (result)
    *(_QWORD *)(a5 + 8) = result;
  v18 = *a4;
  v19 = *a3;
  *(_WORD *)(a5 + 16) = *(_QWORD *)(*a3 + 8 * v18);
  *a4 = v18 + 2;
  *(_WORD *)(a5 + 18) = *(_QWORD *)(v19 + 8 * (v18 + 1));
  return result;
}

unsigned int ***sub_22E76BB68(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int **v5;
  uint64_t v6;
  _DWORD *v7;
  unint64_t v8;
  _DWORD *v9;
  unint64_t v10;
  int *v11;
  _DWORD *v12;
  int v13;
  _DWORD *v14;
  unsigned int v16;
  size_t v17;
  BOOL v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  int v33;
  unint64_t v34;
  int v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  int v41;
  unint64_t v42;
  int v43;
  unint64_t v44;
  int v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void **p_dst;
  uint64_t v55;
  const std::string::value_type *v56;
  std::string::size_type v57;
  std::string *v58;
  size_t size;
  uint64_t v61;
  unint64_t v63;
  uint64_t v64;
  void **__dst;
  std::string::size_type v66;
  uint64_t v67;
  std::string v68;
  _DWORD *v69;
  unsigned int **v70;
  unsigned int **v71;
  unsigned int **v72;
  unsigned int **v73;
  unsigned int **v74;
  unsigned int **v75;
  unsigned int **v76;
  unsigned int **v77;

  v3 = *(unsigned __int8 **)(a2 + 776);
  v4 = *(_QWORD *)(a2 + 784);
  v5 = (unsigned int **)(a2 + 1640);
  *(_OWORD *)(a2 + 776) = 0u;
  v6 = *(unsigned int *)(a2 + 1648);
  if (!(_DWORD)v6)
    goto LABEL_12;
  v7 = *(_DWORD **)(a2 + 1640);
  v8 = *(unsigned int *)(a2 + 1648);
  v9 = v7;
  do
  {
    v10 = v8 >> 1;
    v11 = &v9[2 * (v8 >> 1)];
    v13 = *v11;
    v12 = v11 + 2;
    v8 += ~(v8 >> 1);
    if (v13)
      v8 = v10;
    else
      v9 = v12;
  }
  while (v8);
  v14 = &v7[2 * v6];
  if (v9 == v7 || v9 - 2 == v14)
  {
LABEL_12:
    v68.__r_.__value_.__r.__words[0] = 0;
    sub_22E77A398((uint64_t)v5, (uint64_t *)&v68);
    v68.__r_.__value_.__r.__words[0] = 0x100000002;
    sub_22E77A398((uint64_t)v5, (uint64_t *)&v68);
  }
  v76 = (unsigned int **)(a2 + 1696);
  v77 = v5;
  v74 = (unsigned int **)(a2 + 2544);
  v75 = (unsigned int **)(a2 + 2144);
  v72 = (unsigned int **)(a2 + 2672);
  v73 = (unsigned int **)(a2 + 2616);
  v70 = (unsigned int **)(a2 + 3232);
  v71 = (unsigned int **)(a2 + 3096);
  if (v4 >= 1)
  {
    v63 = (unint64_t)&v3[v4];
    v64 = a1 + 144;
    while (1)
    {
      v16 = *v3;
      v17 = *(unsigned __int16 *)(v3 + 1);
      v69 = 0;
      v18 = v16 > 5;
      v19 = (1 << v16) & 0x23;
      v20 = v18 || v19 == 0;
      v21 = v20 ? sub_22E808A04(v64, v3 + 3, v17) : sub_22E808AC0(v64);
      v69 = (_DWORD *)v21;
      if (!v21)
        break;
      v22 = (unsigned int *)&v3[v17 + 3];
      v23 = *v22;
      v24 = v22[1];
      v25 = v22[2];
      v26 = v22[3];
      v28 = v22[4];
      v27 = v22[5];
      v30 = v22[6];
      v29 = v22[7];
      if ((_DWORD)v23 != -1)
      {
        v31 = *(_DWORD *)(v21 + 1568);
        v32 = *(unsigned int *)(a2 + 1648);
        if (v32 >= *(unsigned int *)(a2 + 1652))
        {
          v61 = v22[7];
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v29 = v61;
          v32 = *(unsigned int *)(a2 + 1648);
        }
        *(_QWORD *)(*(_QWORD *)(a2 + 1640) + 8 * v32) = v23 | ((unint64_t)(v31 - v23) << 32);
        ++*(_DWORD *)(a2 + 1648);
      }
      if ((_DWORD)v24 != -1)
      {
        v33 = v69[422];
        v34 = *(unsigned int *)(a2 + 1704);
        if (v34 >= *(unsigned int *)(a2 + 1708))
        {
          v47 = v29;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v29 = v47;
          v34 = *(unsigned int *)(a2 + 1704);
        }
        *(_QWORD *)(*(_QWORD *)(a2 + 1696) + 8 * v34) = v24 | ((unint64_t)(v33 - v24) << 32);
        ++*(_DWORD *)(a2 + 1704);
      }
      if ((_DWORD)v25 != -1)
      {
        v35 = v69[534];
        v36 = *(unsigned int *)(a2 + 2152);
        if (v36 >= *(unsigned int *)(a2 + 2156))
        {
          v48 = v29;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v29 = v48;
          v36 = *(unsigned int *)(a2 + 2152);
        }
        *(_QWORD *)(*(_QWORD *)(a2 + 2144) + 8 * v36) = v25 | ((unint64_t)(v35 - v25) << 32);
        ++*(_DWORD *)(a2 + 2152);
      }
      if ((_DWORD)v26 != -1)
      {
        v37 = v69[634];
        v38 = *(unsigned int *)(a2 + 2552);
        if (v38 >= *(unsigned int *)(a2 + 2556))
        {
          v49 = v29;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v29 = v49;
          v38 = *(unsigned int *)(a2 + 2552);
        }
        *(_QWORD *)(*(_QWORD *)(a2 + 2544) + 8 * v38) = v26 | ((unint64_t)(v37 - v26) << 32);
        ++*(_DWORD *)(a2 + 2552);
      }
      if ((_DWORD)v28 != -1)
      {
        v39 = v69[653];
        v40 = *(unsigned int *)(a2 + 2624);
        if (v40 >= *(unsigned int *)(a2 + 2628))
        {
          v50 = v29;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v29 = v50;
          v40 = *(unsigned int *)(a2 + 2624);
        }
        *(_QWORD *)(*(_QWORD *)(a2 + 2616) + 8 * v40) = v28 | ((unint64_t)(v39 - v28) << 32);
        ++*(_DWORD *)(a2 + 2624);
      }
      if ((_DWORD)v27 != -1)
      {
        v41 = v69[666];
        v42 = *(unsigned int *)(a2 + 2680);
        if (v42 >= *(unsigned int *)(a2 + 2684))
        {
          v51 = v29;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v29 = v51;
          v42 = *(unsigned int *)(a2 + 2680);
        }
        *(_QWORD *)(*(_QWORD *)(a2 + 2672) + 8 * v42) = v27 | ((unint64_t)(v41 - v27) << 32);
        ++*(_DWORD *)(a2 + 2680);
      }
      if ((_DWORD)v30 != -1)
      {
        v43 = v69[772];
        v44 = *(unsigned int *)(a2 + 3104);
        if (v44 >= *(unsigned int *)(a2 + 3108))
        {
          v52 = v29;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v29 = v52;
          v44 = *(unsigned int *)(a2 + 3104);
        }
        *(_QWORD *)(*(_QWORD *)(a2 + 3096) + 8 * v44) = v30 | ((unint64_t)(v43 - v30) << 32);
        ++*(_DWORD *)(a2 + 3104);
      }
      if ((_DWORD)v29 != -1)
      {
        v45 = v69[806];
        v46 = *(unsigned int *)(a2 + 3240);
        if (v46 >= *(unsigned int *)(a2 + 3244))
        {
          v53 = v29;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v29 = v53;
          v46 = *(unsigned int *)(a2 + 3240);
        }
        *(_QWORD *)(*(_QWORD *)(a2 + 3232) + 8 * v46) = v29 | ((unint64_t)(v45 - v29) << 32);
        ++*(_DWORD *)(a2 + 3240);
      }
      v3 = (unsigned __int8 *)(v22 + 8);
      *((_DWORD *)sub_22E7448C8((_DWORD *)(a2 + 3128), &v69) + 2) = v30;
      if ((unint64_t)(v22 + 8) >= v63)
        goto LABEL_80;
    }
    v68.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
    *(_OWORD *)&v68.__r_.__value_.__r.__words[1] = xmmword_22F45E050;
    strcpy(v68.__r_.__value_.__l.__data_, "SourceLocation remap refers to unknown module, cannot find ");
    if (v17 >= 0x17)
    {
      if ((v17 | 7) == 0x17)
        v55 = ((unsigned __int16)v17 & 0xFFF8) + 8;
      else
        v55 = v17 | 7;
      p_dst = (void **)operator new(v55 + 1);
      v66 = v17;
      v67 = v55 - 0x7FFFFFFFFFFFFFFFLL;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v67) = v17;
      p_dst = (void **)&__dst;
      if (!(_DWORD)v17)
        goto LABEL_64;
    }
    memmove(p_dst, v3 + 3, v17);
LABEL_64:
    *((_BYTE *)p_dst + v17) = 0;
    if (v67 >= 0)
      v56 = (const std::string::value_type *)&__dst;
    else
      v56 = (const std::string::value_type *)__dst;
    if (v67 >= 0)
      v57 = HIBYTE(v67) & 0x7F;
    else
      v57 = v66;
    std::string::append(&v68, v56, v57);
    if (SHIBYTE(v67) < 0)
      operator delete(__dst);
    if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v58 = &v68;
    else
      v58 = (std::string *)v68.__r_.__value_.__r.__words[0];
    if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&v68.__r_.__value_.__s + 23) & 0x7F;
    else
      size = v68.__r_.__value_.__l.__size_;
    sub_22E769C10(a1, v58, size);
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v68.__r_.__value_.__l.__data_);
  }
LABEL_80:
  sub_22E7904B0(&v70);
  sub_22E7904B0(&v71);
  sub_22E7904B0(&v72);
  sub_22E7904B0(&v73);
  sub_22E7904B0(&v74);
  sub_22E7904B0(&v75);
  sub_22E7904B0(&v76);
  return sub_22E7904B0(&v77);
}

unint64_t sub_22E76C1A4(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unsigned __int8 v4;
  unint64_t v5;
  int v7;
  unint64_t v8;
  _OWORD v11[4];
  _OWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = a2;
  v3 = a1;
  v15 = *MEMORY[0x24BDAC8D0];
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  memset(v11, 0, sizeof(v11));
  v4 = atomic_load((unsigned __int8 *)&qword_253E4AB98);
  v5 = 0x253E4A000uLL;
  if ((v4 & 1) == 0)
  {
    v7 = __cxa_guard_acquire(&qword_253E4AB98);
    v5 = 0x253E4A000uLL;
    v3 = a1;
    v2 = a2;
    if (v7)
    {
      v8 = *MEMORY[0x24BED7368];
      if (!*MEMORY[0x24BED7368])
        v8 = 0xFF51AFD7ED558CCDLL;
      qword_253E4AB90 = v8;
      __cxa_guard_release(&qword_253E4AB98);
      v5 = 0x253E4A000;
      v3 = a1;
      v2 = a2;
    }
  }
  v14 = *(_QWORD *)(v5 + 2960);
  return sub_22E54EFD4((char *)v11, 0, v11, (char *)v12, v3, v2);
}

void **sub_22E76C298(uint64_t *a1, uint64_t a2)
{
  size_t v3;
  uint64_t v4;
  const void *v5;
  void **p_dst;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  size_t v11;
  uint64_t v13;
  char v14;
  void **__dst;
  size_t v16;
  int64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a2 + 32))
  {
    sub_22F1D07D8(*a1, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), 0, 1, (uint64_t)&__dst);
    if ((v17 & 1) != 0)
      return 0;
    else
      return __dst;
  }
  v3 = *(_QWORD *)(a2 + 24);
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v4 = a1[1];
  v5 = *(const void **)(a2 + 16);
  if (v3 >= 0x17)
  {
    v8 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v8 = v3 | 7;
    v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    v16 = v3;
    v17 = v9 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v17) = *(_QWORD *)(a2 + 24);
    p_dst = (void **)&__dst;
    if (!v3)
      goto LABEL_13;
  }
  memmove(p_dst, v5, v3);
LABEL_13:
  *((_BYTE *)p_dst + v3) = 0;
  sub_22E76C4AC(*(_QWORD *)(v4 + 8), (uint64_t)&__dst);
  if (v17 >= 0)
    v10 = (void **)&__dst;
  else
    v10 = __dst;
  if (v17 >= 0)
    v11 = HIBYTE(v17) & 0x7F;
  else
    v11 = v16;
  sub_22F1D07D8(*a1, v10, v11, 0, 1, (uint64_t)&v13);
  if ((v14 & 1) != 0)
    v7 = 0;
  else
    v7 = v13;
  if (SHIBYTE(v17) < 0)
    operator delete(__dst);
  return (void **)v7;
}

uint64_t sub_22E76C40C(uint64_t a1, uint64_t a2, int a3)
{
  _DWORD *v5;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  unint64_t v9;
  unsigned int *v10;
  _DWORD *v11;
  unsigned int v12;
  _DWORD *v13;
  _DWORD *v14;

  if (!a3)
    return 0;
  if (*(_QWORD *)(a2 + 784))
    sub_22E76BB68(a1, a2);
  v5 = *(_DWORD **)(a2 + 2616);
  v6 = *(unsigned int *)(a2 + 2624);
  if ((_DWORD)v6)
  {
    v7 = *(unsigned int *)(a2 + 2624);
    v8 = *(_DWORD **)(a2 + 2616);
    do
    {
      v9 = v7 >> 1;
      v10 = &v8[2 * (v7 >> 1)];
      v12 = *v10;
      v11 = v10 + 2;
      v7 += ~(v7 >> 1);
      if (v12 > a3 - 1)
        v7 = v9;
      else
        v8 = v11;
    }
    while (v7);
  }
  else
  {
    v8 = *(_DWORD **)(a2 + 2616);
  }
  v13 = &v5[2 * v6];
  if (v8 == v5)
    v14 = v13;
  else
    v14 = v8 - 2;
  return (v14[1] + a3);
}

void sub_22E76C4AC(uint64_t a1, uint64_t a2)
{
  char v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_BYTE *)(a1 + 127);
  v3 = v2;
  v4 = v2 & 0x7F;
  if (v3 >= 0)
    v5 = v4;
  else
    v5 = *(_QWORD *)(a1 + 112);
  if (v5)
    sub_22E76E414(a2);
}

uint64_t sub_22E76C4E4(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  char *v9;
  char *v10;
  unint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v21;
  void *v22;
  uint64_t v23;
  _BYTE v24[512];
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  void *__p[3];
  char *v29[2];
  _QWORD v30[33];
  uint64_t *v31;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v2 = a1 + 3;
  (*(void (**)(uint64_t *))(a1[3] + 160))(a1 + 3);
  v3 = *((unsigned int *)v2 + 32);
  if ((_DWORD)v3)
  {
    v4 = v2[15];
    v5 = v4 + 8 * v3;
    do
    {
      v7 = *(_QWORD *)(v5 - 8);
      v5 -= 8;
      v6 = v7;
      if (*(_QWORD *)(v7 + 1776))
      {
        v27 = *(_QWORD *)(v6 + 1800);
        v8 = *(_OWORD *)(v6 + 1784);
        v25 = *(_OWORD *)(v6 + 1768);
        v26 = v8;
        HIDWORD(v27) = *(_DWORD *)(v6 + 1804);
        v9 = *(char **)(v6 + 1808);
        v10 = *(char **)(v6 + 1816);
        memset(__p, 0, sizeof(__p));
        sub_22E6C95B8(__p, v9, v10, (v10 - v9) >> 4);
        v29[0] = (char *)v30;
        v29[1] = (char *)0x800000000;
        if (*(_DWORD *)(v6 + 1840))
          sub_22E747DF0((uint64_t)v29, v6 + 1832);
        v30[32] = *(_QWORD *)(v6 + 2104);
        v11 = *(_QWORD *)(v6 + 2176);
        *(_QWORD *)&v26 = (v11 >> 3) & 0x1FFFFFFFFFFFFFF8;
        LODWORD(v27) = 0;
        if ((v11 & 0x3F) != 0
          && (sub_22E745EC8((uint64_t)&v25, v11 & 0x3F, (uint64_t)&v22), (v23 & 1) != 0)
          && (v31 = (uint64_t *)v22) != 0)
        {
          sub_22E769A6C(a1, &v31);
          if (v31)
            (*(void (**)(uint64_t *))(*v31 + 8))(v31);
          v12 = 1;
        }
        else
        {
          v22 = v24;
          v23 = 0x4000000000;
          while (1)
          {
            sub_22E748020((uint64_t)&v25, 0, (uint64_t)&v31);
            if ((v32 & 1) != 0)
              break;
            if ((_DWORD)v31 != 2)
            {
              v12 = 0;
              switch((int)v31)
              {
                case 0:
                case 2:
                  sub_22E769C10((uint64_t)a1, "malformed block record in AST file", 0x22uLL);
                  goto LABEL_31;
                case 1:
                  goto LABEL_32;
                case 3:
                  LODWORD(v23) = 0;
                  llvm::BitstreamCursor::readRecord();
                  v13 = v32;
                  if ((v32 & 1) != 0)
                  {
                    v16 = v31;
                    v31 = 0;
                    v21 = v16;
                    sub_22E769A6C(a1, &v21);
                    if (v21)
                      (*(void (**)(uint64_t *))(*v21 + 8))(v21);
                    v12 = 1;
                  }
                  else
                  {
                    if (((_DWORD)v31 - 1) <= 1)
                    {
                      v14 = sub_22E768E34((uint64_t)a1, v6, *(_DWORD *)v22);
                      v15 = sub_22E785944((uint64_t)a1, v14);
                      if ((*(_BYTE *)(v15 + 4) & 8) != 0)
                        (*(void (**)(uint64_t *, uint64_t))(*a1 + 24))(a1, v15);
                    }
                    v12 = 6;
                  }
                  if ((v32 & 1) != 0)
                  {
                    v17 = v31;
                    v31 = 0;
                    if (v17)
                      (*(void (**)(uint64_t *))(*v17 + 8))(v17);
                  }
                  if ((v13 & 1) == 0)
                    continue;
                  break;
                default:
                  continue;
              }
              goto LABEL_32;
            }
            sub_22E746760((uint64_t)&v25, (uint64_t *)&v21);
            v18 = v21;
            if ((v32 & 1) != 0)
            {
              v19 = v31;
              v31 = 0;
              if (v19)
                (*(void (**)(uint64_t *))(*v19 + 8))(v19);
            }
            if (v18)
              goto LABEL_40;
          }
          v18 = v31;
LABEL_40:
          v31 = v18;
          sub_22E769A6C(a1, &v31);
          if (v31)
            (*(void (**)(uint64_t *))(*v31 + 8))(v31);
LABEL_31:
          v12 = 1;
LABEL_32:
          if (v22 != v24)
            free(v22);
        }
        sub_22E746F74(v29);
        if (__p[0])
        {
          sub_22E3B485C((uint64_t *)__p);
          operator delete(__p[0]);
        }
        if (v12)
          break;
      }
    }
    while (v5 != v4);
  }
  return (*(uint64_t (**)(uint64_t *))(*v2 + 168))(v2);
}

uint64_t sub_22E76C88C(_QWORD *a1, unint64_t *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  llvm::SmallPtrSetImplBase *v7;
  _DWORD *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  int v13;
  _QWORD v15[2];
  int v16;
  int v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  _BYTE *v22;
  uint64_t v23;
  int v24;
  _BYTE v25[32];

  v4 = a1 + 3;
  (*(void (**)(_QWORD *))(a1[3] + 160))(a1 + 3);
  if ((*(_QWORD *)(*(_QWORD *)(v4[13] + 2000) + 20) & 0x200000000000) != 0)
  {
    v15[0] = a2;
    v21 = 0;
    if (sub_22E654544(a1 + 1054, v15, &v21))
    {
      v6 = *((_DWORD *)v21 + 2);
    }
    else
    {
      v5 = sub_22E6545E0((uint64_t)(a1 + 1054), (uint64_t)v15, v15, v21);
      v6 = 0;
      *v5 = v15[0];
      *((_DWORD *)v5 + 2) = 0;
    }
  }
  else
  {
    v6 = 0;
  }
  v21 = v25;
  v22 = v25;
  v23 = 4;
  v24 = 0;
  if ((sub_22E76CA14((uint64_t)a1) & 1) != 0)
  {
    v7 = 0;
  }
  else if (sub_22E805850(a1[64], (unsigned __int8 *)(a2[2] + 16), *(unsigned int *)a2[2], (llvm::SmallPtrSetImplBase *)&v21))
  {
    v7 = (llvm::SmallPtrSetImplBase *)&v21;
  }
  else
  {
    v7 = 0;
  }
  v8 = (_DWORD *)a2[2];
  v11 = *v8;
  v9 = (unsigned __int8 *)(v8 + 4);
  v10 = v11;
  v15[0] = v9;
  v15[1] = v11;
  v12 = 5381;
  if (v11)
  {
    do
    {
      v13 = *v9++;
      v12 = 33 * v12 + v13;
      --v10;
    }
    while (v10);
  }
  v16 = v12;
  v17 = v6;
  v18 = a1 + 924;
  v19 = (char *)a1 + 7396;
  v20 = 0;
  sub_22E809E0C((uint64_t)(a1 + 18), (unsigned int (*)(uint64_t, unsigned int *))sub_22E78FCD8, (uint64_t)v15, v7);
  sub_22E768F5C(a1, a2);
  if (v22 != (_BYTE *)v21)
    free(v22);
  return (*(uint64_t (**)(_QWORD *))(*v4 + 168))(v4);
}

uint64_t sub_22E76CA14(uint64_t a1)
{
  _BOOL8 v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  char v9;
  void *v10;
  size_t v11;
  size_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;

  if (*(_QWORD *)(a1 + 512))
    return 0;
  if (*(_BYTE *)(a1 + 7329) || !*(_BYTE *)(a1 + 7328))
    return 1;
  v4 = *(_QWORD *)(a1 + 120);
  v2 = 1;
  if ((*(_QWORD *)(*(_QWORD *)(v4 + 56) + 20) & 0x200000000000) != 0)
  {
    *(_BYTE *)(a1 + 7329) = 1;
    v5 = *(_QWORD *)(v4 + 104);
    v8 = *(void **)(v5 + 168);
    v6 = v5 + 168;
    v7 = v8;
    v9 = *(_BYTE *)(v6 + 23);
    if (v9 >= 0)
      v10 = (void *)v6;
    else
      v10 = v7;
    v11 = *(_QWORD *)(v6 + 8);
    if (v9 >= 0)
      v12 = v9 & 0x7F;
    else
      v12 = v11;
    sub_22E804BE4(v10, v12, &v17);
    v13 = v18;
    v18 = 0;
    v2 = v13 != 0;
    if (v13)
    {
      v19 = v13;
      sub_22E6C5940(&v19, &v20);
      if (v19)
        (*(void (**)(char *))(*(_QWORD *)v19 + 8))(v19);
    }
    else
    {
      v14 = v17;
      v15 = *(uint64_t **)(a1 + 512);
      *(_QWORD *)(a1 + 512) = v17;
      if (v15)
      {
        v16 = sub_22E804B4C(v15);
        MEMORY[0x2348A0E9C](v16, 0x10A0C40954E1ADDLL);
        v14 = *(_QWORD *)(a1 + 512);
      }
      sub_22E809CEC(a1 + 144, v14);
    }
    if (v18)
      (*(void (**)(char *))(*(_QWORD *)v18 + 8))(v18);
  }
  return v2;
}

uint64_t *sub_22E76CB3C(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  void **v11;
  void **v12;
  char *v13;
  const void **v14;
  const void **v15;
  const void **v16;
  BOOL v17;
  void **v18;
  void **v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  void *v36;
  _BOOL4 v38;
  int64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  unsigned int v45;
  BOOL v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  BOOL v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  void **v58;
  unint64_t v59;
  const void *v60;
  char *v61;
  uint64_t v62;
  _OWORD *v63;
  uint64_t v64;
  char *v65;
  void **v66;
  void **v67;
  void *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  unint64_t v72;
  unsigned int v73;
  uint64_t v74;
  _OWORD *v75;
  int v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  unsigned int *v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  unsigned int v88;
  char *v89;
  unint64_t v90;
  char *v91;
  unsigned int v93;
  uint64_t *v94;
  _QWORD *v95;
  unsigned int v96;
  unint64_t v97;
  int v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t *v107;
  _BOOL4 v108;
  int64_t v109;
  char *v110;
  char *v111;
  unint64_t v112;
  char *v113;
  uint64_t v115;
  uint64_t v116[2];
  uint64_t v117;
  void *v118[2];
  void *v119[2];
  _OWORD v120[3];
  void *v121;
  char v122;
  void *v123;
  char v124;
  void *v125;
  uint64_t v126;
  _BYTE v127[512];
  void *v128;
  uint64_t v129;
  _QWORD v130[66];

  v130[64] = *MEMORY[0x24BDAC8D0];
  v6 = a3 + 1768;
  v7 = 8 * *(_QWORD *)(a3 + 1784) - *(unsigned int *)(a3 + 1800);
  v116[0] = a3 + 1768;
  v116[1] = v7;
  v8 = *(_QWORD *)(a3 + 2120) + a4;
  *(_QWORD *)(a3 + 1784) = (v8 >> 3) & 0x1FFFFFFFFFFFFFF8;
  *(_DWORD *)(a3 + 1800) = 0;
  if ((v8 & 0x3F) != 0)
  {
    sub_22E745EC8(a3 + 1768, v8 & 0x3F, (uint64_t)&v128);
    if ((v129 & 1) != 0)
    {
      v125 = v128;
      if (v128)
      {
        sub_22E769A6C((uint64_t *)a1, (uint64_t **)&v125);
        if (v125)
          (*(void (**)(void *))(*(_QWORD *)v125 + 8))(v125);
        return sub_22E78CE68(v116);
      }
    }
  }
  v107 = a2;
  v128 = v130;
  v129 = 0x800000000;
  v125 = v127;
  v126 = 0x4000000000;
  v115 = a1;
  do
  {
    sub_22E748020(v6, 1, (uint64_t)&v123);
    if ((v124 & 1) != 0)
    {
      v29 = v123;
      v123 = 0;
      v118[0] = v29;
      sub_22E769A6C((uint64_t *)a1, (uint64_t **)v118);
      if (v118[0])
        (*(void (**)(void *))(*(_QWORD *)v118[0] + 8))(v118[0]);
      goto LABEL_29;
    }
    if ((_DWORD)v123 != 3)
    {
      sub_22E769C10(a1, "malformed block record in AST file", 0x22uLL);
LABEL_29:
      v28 = 1;
      goto LABEL_30;
    }
    LODWORD(v126) = 0;
    llvm::BitstreamCursor::readRecord();
    if ((v122 & 1) != 0)
    {
      v31 = v121;
      v121 = 0;
      v118[0] = v31;
      sub_22E769A6C((uint64_t *)a1, (uint64_t **)v118);
      if (v118[0])
        (*(void (**)(void *))(*(_QWORD *)v118[0] + 8))(v118[0]);
      goto LABEL_39;
    }
    if ((_DWORD)v121 == 4)
    {
      v28 = 3;
      goto LABEL_40;
    }
    if ((_DWORD)v121 != 5)
    {
      sub_22E769C10(a1, "malformed block record in AST file", 0x22uLL);
LABEL_39:
      v28 = 1;
      goto LABEL_40;
    }
    memset(v120, 0, 32);
    *(_OWORD *)v118 = 0u;
    v119[1] = (void *)0x800000000;
    v119[0] = v120;
    v9 = v129;
    v10 = (char *)v128;
    if (v129 < HIDWORD(v129))
    {
      v11 = v118;
      v12 = &v119[1];
      goto LABEL_11;
    }
    v38 = v128 <= v118 && (char *)v128 + 64 * (unint64_t)v129 > (char *)v118;
    if (v38)
      v39 = ((char *)v118 - (_BYTE *)v128) >> 6;
    else
      v39 = -1;
    v117 = 0;
    v10 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow();
    v40 = (char *)v128;
    v109 = v39;
    if (!(_DWORD)v129)
      goto LABEL_87;
    v108 = v38;
    v41 = 0;
    v110 = (char *)v128;
    v112 = (unint64_t)v129 << 6;
    do
    {
      v42 = &v10[v41];
      v43 = &v40[v41];
      *(_OWORD *)v42 = *(_OWORD *)&v40[v41];
      v44 = &v10[v41 + 32];
      *(_QWORD *)&v10[v41 + 16] = v44;
      *((_QWORD *)v42 + 3) = 0x800000000;
      v45 = *(_DWORD *)&v40[v41 + 24];
      if (v45)
        v46 = v43 == v42;
      else
        v46 = 1;
      if (!v46)
      {
        v47 = (char *)*((_QWORD *)v43 + 2);
        if (v43 + 32 != v47)
        {
          *((_QWORD *)v42 + 2) = v47;
          *((_DWORD *)v42 + 6) = v45;
          *((_DWORD *)v42 + 7) = *(_DWORD *)&v40[v41 + 28];
          *((_QWORD *)v43 + 2) = v43 + 32;
          *(_DWORD *)&v40[v41 + 28] = 0;
          goto LABEL_74;
        }
        if (v45 >= 9)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v48 = *((unsigned int *)v43 + 6);
          if (!(_DWORD)v48)
            goto LABEL_73;
          v47 = (char *)*((_QWORD *)v43 + 2);
          v44 = *(char **)&v10[v41 + 16];
        }
        else
        {
          v48 = *(unsigned int *)&v40[v41 + 24];
        }
        memcpy(v44, v47, 4 * v48);
LABEL_73:
        *((_DWORD *)v42 + 6) = v45;
        v40 = v110;
LABEL_74:
        *((_DWORD *)v43 + 6) = 0;
      }
      v41 += 64;
    }
    while (v112 != v41);
    v40 = (char *)v128;
    if ((_DWORD)v129)
    {
      v49 = (unint64_t)v129 << 6;
      a1 = v115;
      v38 = v108;
      do
      {
        v50 = *(char **)&v40[v49 - 48];
        if (&v40[v49 - 32] != v50)
        {
          v51 = v40;
          free(v50);
          v40 = v51;
        }
        v49 -= 64;
      }
      while (v49);
      v40 = (char *)v128;
    }
    else
    {
      a1 = v115;
      v38 = v108;
    }
LABEL_87:
    if (v40 != (char *)v130)
      free(v40);
    v128 = v10;
    HIDWORD(v129) = v117;
    v52 = !v38;
    if (v38)
      v11 = (void **)&v10[64 * v109];
    else
      v11 = v118;
    if (v52)
      v12 = &v119[1];
    else
      v12 = (void **)&v10[64 * v109 + 24];
    v9 = v129;
LABEL_11:
    v13 = &v10[64 * v9];
    *(_OWORD *)v13 = *(_OWORD *)v11;
    v14 = (const void **)(v13 + 32);
    *((_QWORD *)v13 + 3) = 0x800000000;
    *((_QWORD *)v13 + 2) = v13 + 32;
    v15 = (const void **)(v13 + 16);
    v16 = (const void **)(v11 + 2);
    if (*(_DWORD *)v12)
      v17 = v15 == v16;
    else
      v17 = 1;
    if (v17)
      goto LABEL_22;
    v18 = (void **)v11[2];
    v19 = v11 + 4;
    if (v18 != v11 + 4)
    {
      if (v14 != v15 + 2)
      {
        free(v14);
        v18 = (void **)*v16;
      }
      *v15 = v18;
      v36 = v11[3];
      v20 = (unsigned int *)(v11 + 3);
      v15[1] = v36;
      *((_QWORD *)v20 - 1) = v19;
      v20[1] = 0;
      goto LABEL_54;
    }
    v22 = *((_DWORD *)v11 + 6);
    v20 = (unsigned int *)(v11 + 3);
    v21 = v22;
    if (!v22)
    {
      *((_DWORD *)v15 + 2) = 0;
LABEL_54:
      a1 = v115;
      goto LABEL_21;
    }
    a1 = v115;
    if (v21 >= 9)
    {
      *((_DWORD *)v15 + 2) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v23 = *v20;
      if (*v20)
LABEL_19:
        memcpy((void *)*v15, *v16, 4 * v23);
    }
    else
    {
      v23 = v21;
      if (v21)
        goto LABEL_19;
    }
    *((_DWORD *)v15 + 2) = v21;
LABEL_21:
    *v20 = 0;
LABEL_22:
    v24 = v129 + 1;
    LODWORD(v129) = v129 + 1;
    if (v119[0] != v120)
    {
      free(v119[0]);
      v24 = v129;
    }
    v25 = (char *)v128 + 64 * (unint64_t)v24;
    *((_DWORD *)v25 - 16) = sub_22E76C40C(a1, a3, *(_DWORD *)v125);
    v26 = sub_22E76DEA8(a1, a3, *((_DWORD *)v125 + 2));
    *((_QWORD *)v25 - 7) = sub_22E76D838(a1, v26);
    v27 = v126;
    if ((_DWORD)v126 == 2)
    {
      v28 = 2;
    }
    else
    {
      v33 = 2;
      do
      {
        v34 = sub_22E76C40C(v115, a3, *((_QWORD *)v125 + v33));
        v35 = *((unsigned int *)v25 - 10);
        if (v35 >= *((unsigned int *)v25 - 9))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v35 = *((unsigned int *)v25 - 10);
        }
        *(_DWORD *)(*((_QWORD *)v25 - 6) + 4 * v35) = v34;
        ++*((_DWORD *)v25 - 10);
        ++v33;
      }
      while (v27 != v33);
      v28 = 2;
      a1 = v115;
    }
LABEL_40:
    if ((v122 & 1) != 0)
    {
      v32 = v121;
      v121 = 0;
      if (v32)
        (*(void (**)(void *))(*(_QWORD *)v32 + 8))(v32);
    }
LABEL_30:
    if ((v124 & 1) != 0)
    {
      v30 = v123;
      v123 = 0;
      if (v30)
        (*(void (**)(void *))(*(_QWORD *)v30 + 8))(v30);
    }
  }
  while (v28 == 2);
  if (v28 != 3)
    goto LABEL_174;
  if ((_DWORD)v129)
  {
    v53 = (char *)v128;
    v54 = (char *)v128 + 64 * (unint64_t)v129;
    v55 = v54 - 64;
    if (v128 >= v54 - 64)
    {
      v118[0] = v119;
      HIDWORD(v118[1]) = 8;
      goto LABEL_154;
    }
    v56 = 0;
    v57 = (unint64_t)v129 << 6;
    while (1)
    {
      v111 = v54;
      v113 = v55;
      v58 = (void **)&v53[v56];
      *(_OWORD *)v118 = *(_OWORD *)&v53[v56];
      v119[0] = v120;
      v119[1] = (void *)0x800000000;
      v59 = *(unsigned int *)&v53[v56 + 24];
      if ((_DWORD)v59)
        break;
      v59 = 0;
LABEL_110:
      v65 = &v53[v57 - 64];
      *(_OWORD *)v58 = *(_OWORD *)v65;
      v66 = v58 + 2;
      v67 = (void **)&v53[v57 - 48];
      if (v58 + 2 != v67)
      {
        v68 = *v67;
        v69 = &v53[v57];
        v70 = (uint64_t)&v53[v57 - 32];
        if ((void *)v70 == *v67)
        {
          v73 = *((_DWORD *)v69 - 10);
          v71 = v69 - 40;
          v72 = v73;
          if (v59 >= v73)
          {
            if (v72)
              memmove(*v66, v68, 4 * v72);
          }
          else
          {
            if (*(unsigned int *)&v53[v56 + 28] < v72)
            {
              *((_DWORD *)v58 + 6) = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v59 = 0;
            }
            else if (v59)
            {
              memmove(*v66, v68, 4 * v59);
            }
            v74 = *(unsigned int *)v71;
            if (v59 != v74)
              memcpy((char *)*v66 + 4 * v59, (char *)*v67 + 4 * v59, (_BYTE *)*v67 + 4 * v74 - ((_BYTE *)*v67 + 4 * v59));
          }
          *((_DWORD *)v58 + 6) = v72;
        }
        else
        {
          if (&v53[v56 + 32] != *v66)
          {
            free(*v66);
            v68 = *v67;
          }
          *v66 = v68;
          v71 = v111 - 40;
          v58[3] = *(void **)&v53[v57 - 40];
          *v67 = (void *)v70;
          *(_DWORD *)&v53[v57 - 36] = 0;
        }
        *(_DWORD *)v71 = 0;
      }
      *(_OWORD *)v65 = *(_OWORD *)v118;
      v75 = v119[0];
      if (v67 == v119)
      {
        v79 = v113;
        goto LABEL_130;
      }
      if (v119[0] != v120)
      {
        if (&v53[v57 - 32] != *v67)
        {
          free(*v67);
          v75 = v119[0];
        }
        *v67 = v75;
        *(void **)&v53[v57 - 40] = v119[1];
        v119[0] = v120;
        HIDWORD(v119[1]) = 0;
        goto LABEL_129;
      }
      v76 = (int)v119[1];
      v77 = &v53[v57];
      v78 = *(unsigned int *)&v53[v57 - 40];
      if (v78 >= LODWORD(v119[1]))
      {
        if (LODWORD(v119[1]))
          memmove(*v67, v120, 4 * LODWORD(v119[1]));
        goto LABEL_128;
      }
      if (*((_DWORD *)v77 - 9) < LODWORD(v119[1]))
      {
        *((_DWORD *)v77 - 10) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
LABEL_125:
        v78 = 0;
        goto LABEL_126;
      }
      if (!(_DWORD)v78)
        goto LABEL_125;
      memmove(*v67, v120, 4 * v78);
LABEL_126:
      if (v78 != LODWORD(v119[1]))
        memcpy((char *)*v67 + 4 * v78, (char *)v119[0] + 4 * v78, 4 * LODWORD(v119[1]) - 4 * v78);
LABEL_128:
      *((_DWORD *)v77 - 10) = v76;
LABEL_129:
      v79 = v113;
      LODWORD(v119[1]) = 0;
      v75 = v119[0];
LABEL_130:
      if (v75 != v120)
        free(v75);
      v56 += 64;
      v55 = v79 - 64;
      v57 -= 64;
      v54 = v79;
      if (&v53[v56] >= &v53[v57 - 64])
      {
        v53 = (char *)v128;
        v118[0] = v119;
        v118[1] = (void *)0x800000000;
        a1 = v115;
        if (!(_DWORD)v129)
          goto LABEL_172;
        v54 = (char *)v128 + 64 * (unint64_t)v129;
LABEL_154:
        while (1)
        {
          LODWORD(v118[1]) = 0;
          v80 = *((unsigned int *)v53 + 6);
          if ((_DWORD)v80)
            break;
LABEL_164:
          LOBYTE(v123) = 0;
          v86 = *(_DWORD *)v53;
          if (*(_DWORD *)v53)
          {
            if (*(_DWORD *)(a1 + 4208) >= v86)
            {
              v87 = *(_QWORD *)(*(_QWORD *)(a1 + 4200) + 8 * (v86 - 1));
            }
            else
            {
              sub_22E769C10(a1, "submodule ID out of range in AST file", 0x25uLL);
              v87 = 0;
              LODWORD(v80) = v118[1];
            }
          }
          else
          {
            v87 = 0;
          }
          sub_22F17633C(*(_QWORD *)(a1 + 120), v87, (uint64_t)v107, *((_QWORD *)v53 + 1), (uint64_t *)v118[0], v80, (char *)&v123);
          v53 += 64;
          if (v53 == v54)
          {
            if (v118[0] != v119)
              free(v118[0]);
            goto LABEL_172;
          }
        }
        v81 = (unsigned int *)*((_QWORD *)v53 + 2);
        v82 = 4 * v80;
        while (2)
        {
          v83 = *v81;
          if (*v81)
          {
            if (*(_DWORD *)(a1 + 4208) < v83)
            {
              sub_22E769C10(a1, "submodule ID out of range in AST file", 0x25uLL);
              goto LABEL_159;
            }
            v84 = *(_QWORD *)(*(_QWORD *)(a1 + 4200) + 8 * (v83 - 1));
          }
          else
          {
LABEL_159:
            v84 = 0;
          }
          v85 = sub_22F415E10(*(_QWORD *)(a1 + 120), v84, (uint64_t)v107);
          v80 = LODWORD(v118[1]);
          if (LODWORD(v118[1]) >= (unint64_t)HIDWORD(v118[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v80 = LODWORD(v118[1]);
          }
          *((_QWORD *)v118[0] + v80) = v85;
          LODWORD(v80) = ++LODWORD(v118[1]);
          ++v81;
          v82 -= 4;
          if (!v82)
            goto LABEL_164;
          continue;
        }
      }
    }
    if (v58 == v118)
      goto LABEL_110;
    v60 = v58[2];
    v61 = &v53[v56];
    v62 = (uint64_t)&v53[v56 + 32];
    if ((const void *)v62 == v60)
    {
      if (v59 < 9)
      {
        v63 = v120;
        v64 = *(unsigned int *)&v53[v56 + 24];
        goto LABEL_106;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v64 = *((unsigned int *)v58 + 6);
      if ((_DWORD)v64)
      {
        v60 = v58[2];
        v63 = v119[0];
LABEL_106:
        memcpy(v63, v60, 4 * v64);
      }
      LODWORD(v119[1]) = v59;
    }
    else
    {
      v119[0] = v58[2];
      LODWORD(v119[1]) = v59;
      HIDWORD(v119[1]) = *((_DWORD *)v61 + 7);
      v58[2] = (void *)v62;
      *((_DWORD *)v61 + 7) = 0;
    }
    v59 = 0;
    *((_DWORD *)v58 + 6) = 0;
    goto LABEL_110;
  }
LABEL_172:
  v88 = *(_DWORD *)(a3 + 4);
  if (v88 <= 5 && ((1 << v88) & 0x23) != 0)
    goto LABEL_174;
  v93 = v126;
  if (!(_DWORD)v126)
    goto LABEL_174;
  v94 = 0;
  v95 = 0;
  v96 = 0;
  while (2)
  {
    HIDWORD(v97) = *((_QWORD *)v125 + v96);
    LODWORD(v97) = HIDWORD(v97);
    v98 = sub_22E77BAB4(v115, a3, v97 >> 1);
    v99 = v96 + 2;
    v100 = *((_QWORD *)v125 + v96 + 1);
    if ((_DWORD)v100 == 2)
    {
      v96 += 3;
      v104 = *((_QWORD *)v125 + v99);
      v105 = sub_22E3CD3D4(*(_QWORD *)(v115 + 120) + 128, 16, 3);
      v103 = v105;
      *(_QWORD *)v105 = 0;
      *(_DWORD *)(v105 + 8) = v98;
      if (v104)
        v106 = 10;
      else
        v106 = 2;
      *(_BYTE *)(v105 + 12) = *(_BYTE *)(v105 + 12) & 0xF0 | v106;
    }
    else
    {
      if ((_DWORD)v100 == 1)
      {
        v103 = sub_22E3CD3D4(*(_QWORD *)(v115 + 120) + 128, 16, 3);
        *(_QWORD *)v103 = 0;
        *(_DWORD *)(v103 + 8) = v98;
        *(_BYTE *)(v103 + 12) = *(_BYTE *)(v103 + 12) & 0xF0 | 9;
      }
      else
      {
        if (!(_DWORD)v100)
        {
          v96 += 3;
          v101 = sub_22E76DEA8(v115, a3, *((_QWORD *)v125 + v99));
          v102 = sub_22E76D838(v115, v101);
          v103 = sub_22E3CD3D4(*(_QWORD *)(v115 + 120) + 128, 24, 3);
          *(_QWORD *)v103 = 0;
          *(_DWORD *)(v103 + 8) = v98;
          *(_BYTE *)(v103 + 12) = *(_BYTE *)(v103 + 12) & 0xF0 | 8;
          *(_QWORD *)(v103 + 16) = v102;
          goto LABEL_198;
        }
        v103 = 0;
      }
      v96 += 2;
    }
LABEL_198:
    if (!v94)
      v94 = (uint64_t *)v103;
    if (v95)
      *v95 = v103;
    v95 = (_QWORD *)v103;
    if (v96 < v93)
      continue;
    break;
  }
  if (v94)
    sub_22F415CEC(*(_QWORD *)(v115 + 120), v107, (_QWORD *)v103, v94);
LABEL_174:
  if (v125 != v127)
    free(v125);
  v89 = (char *)v128;
  if ((_DWORD)v129)
  {
    v90 = (unint64_t)v129 << 6;
    do
    {
      v91 = *(char **)&v89[v90 - 48];
      if (&v89[v90 - 32] != v91)
        free(v91);
      v90 -= 64;
    }
    while (v90);
    v89 = (char *)v128;
  }
  if (v89 != (char *)v130)
    free(v89);
  return sub_22E78CE68(v116);
}

uint64_t sub_22E76D838(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  unint64_t v8;
  _DWORD *v9;
  unint64_t v10;
  unsigned int *v11;
  _DWORD *v12;
  unsigned int v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int i;
  unint64_t v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  size_t v37;
  uint64_t v38;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int16 v50;
  __int16 v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64[2];
  uint64_t *v65;
  __int128 v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  _BYTE v70[128];
  void *v71;
  uint64_t v72;
  _QWORD v73[66];

  v73[64] = *MEMORY[0x24BDAC8D0];
  if (!(_DWORD)a2)
    return 0;
  v3 = *(_QWORD *)(a1 + 4072);
  if (v3 == *(_QWORD *)(a1 + 4080))
  {
    sub_22E769C10(a1, "no macro table in AST file", 0x1AuLL);
    return 0;
  }
  v5 = (a2 - 1);
  if (!*(_QWORD *)(v3 + 8 * v5))
  {
    v6 = *(_DWORD **)(a1 + 4120);
    v7 = *(unsigned int *)(a1 + 4128);
    if (!(_DWORD)v7)
      goto LABEL_44;
    v8 = *(unsigned int *)(a1 + 4128);
    v9 = *(_DWORD **)(a1 + 4120);
    do
    {
      v10 = v8 >> 1;
      v11 = &v9[4 * (v8 >> 1)];
      v13 = *v11;
      v12 = v11 + 4;
      v8 += ~(v8 >> 1);
      if (v13 > a2)
        v8 = v10;
      else
        v9 = v12;
    }
    while (v8);
    if (v9 == v6)
LABEL_44:
      v14 = &v6[4 * v7];
    else
      v14 = v9 - 4;
    v15 = *((_QWORD *)v14 + 1);
    v16 = *(_QWORD *)(v15 + 2120)
        + *(unsigned int *)(*(_QWORD *)(v15 + 2128) + 4 * (v5 - *(_DWORD *)(v15 + 2136)));
    v17 = 8 * *(_QWORD *)(v15 + 1784) - *(unsigned int *)(v15 + 1800);
    v64[0] = v15 + 1768;
    v64[1] = v17;
    *(_QWORD *)(v15 + 1784) = (v16 >> 3) & 0x1FFFFFFFFFFFFFF8;
    *(_DWORD *)(v15 + 1800) = 0;
    if ((v16 & 0x3F) != 0 && (sub_22E745EC8(v15 + 1768, v16 & 0x3F, (uint64_t)&v71), (v72 & 1) != 0) && v71)
    {
      v68 = v71;
      sub_22E6C5940((char **)&v68, (char **)&v71);
      if (v68)
        (*(void (**)(void *))(*(_QWORD *)v68 + 8))(v68);
      v18 = 0;
    }
    else
    {
      v62 = 0;
      v63 = 0;
      v18 = 0;
      v19 = v73;
      v71 = v73;
      v72 = 0x4000000000;
      v68 = v70;
      v69 = 0x1000000000;
LABEL_15:
      v20 = v18;
LABEL_16:
      v18 = v20;
      while (1)
      {
        while (1)
        {
          sub_22E748020(v15 + 1768, 1, (uint64_t)&v66);
          if ((BYTE8(v66) & 1) != 0)
          {
            v56 = (uint64_t *)v66;
LABEL_72:
            *(_QWORD *)&v66 = v56;
            sub_22E769A6C((uint64_t *)a1, (uint64_t **)&v66);
            v40 = v66;
            if ((_QWORD)v66)
              goto LABEL_49;
            goto LABEL_37;
          }
          if ((_DWORD)v66 != 2)
            break;
          sub_22E746760(v15 + 1768, (uint64_t *)&v65);
          v56 = v65;
          if ((BYTE8(v66) & 1) != 0)
          {
            v57 = v66;
            *(_QWORD *)&v66 = 0;
            if (v57)
              (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
          }
          if (v56)
            goto LABEL_72;
        }
        if ((_DWORD)v66 == 1)
          goto LABEL_37;
        if (!(_DWORD)v66)
        {
          v35 = "malformed block record in AST file";
          v36 = a1;
          v37 = 34;
LABEL_36:
          sub_22E769C10(v36, v35, v37);
          goto LABEL_37;
        }
        LODWORD(v72) = 0;
        llvm::BitstreamCursor::readRecord();
        if ((BYTE8(v66) & 1) != 0)
          break;
        v21 = v66;
        if ((v66 - 1) < 2)
        {
          if (v18)
            goto LABEL_37;
          v61 = v19;
          HIDWORD(v27) = *((_DWORD *)v71 + 2);
          LODWORD(v27) = HIDWORD(v27);
          v28 = sub_22E77BAB4(a1, v15, v27 >> 1);
          v29 = *(_QWORD *)(a1 + 120);
          v18 = sub_22E3CD3D4(v29 + 128, 48, 3);
          *(_DWORD *)v18 = v28;
          *(_QWORD *)(v18 + 4) = 0;
          *(_QWORD *)(v18 + 20) = 0;
          *(_QWORD *)(v18 + 12) = 0;
          *(_DWORD *)(v18 + 28) = 0;
          *(_WORD *)(v18 + 36) &= 0xF800u;
          *(_QWORD *)(v18 + 40) = *(_QWORD *)(v29 + 2848);
          *(_QWORD *)(v29 + 2848) = v18;
          HIDWORD(v27) = *((_DWORD *)v71 + 4);
          LODWORD(v27) = HIDWORD(v27);
          *(_DWORD *)(v18 + 4) = sub_22E77BAB4(a1, v15, v27 >> 1);
          v30 = v71;
          v31 = *(_WORD *)(v18 + 36) & 0xFF7F | ((*((_QWORD *)v71 + 3) != 0) << 7);
          *(_WORD *)(v18 + 36) = v31;
          *(_WORD *)(v18 + 36) = v31 & 0xFBFF | ((v30[4] != 0) << 10);
          v32 = v30[5];
          v33 = *(_QWORD *)(a1 + 120) + 128;
          *(_DWORD *)(v18 + 28) = v32;
          v63 = v32;
          v34 = sub_22E3CD3D4(v33, 24 * v32, 3);
          *(_QWORD *)(v18 + 16) = v34;
          v62 = v34;
          if (v21 == 2)
          {
            v49 = *((_QWORD *)v71 + 6);
            v48 = *((_QWORD *)v71 + 7);
            v47 = *((_QWORD *)v71 + 8);
            LODWORD(v69) = 0;
            v41 = *((_DWORD *)v71 + 18);
            if (v41)
            {
              v58 = v49;
              v59 = v48;
              v60 = v47;
              for (i = 0; i != v41; ++i)
              {
                v22 = sub_22E768E34(a1, v15, *((_QWORD *)v71 + (i + 10)));
                v23 = sub_22E785944(a1, v22);
                v24 = v69;
                if (v69 >= (unint64_t)HIDWORD(v69))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v24 = v69;
                }
                *((_QWORD *)v68 + v24) = v23;
                v25 = v69 + 1;
                LODWORD(v69) = v69 + 1;
              }
              v46 = i + 10;
              v48 = v59;
              v47 = v60;
              v49 = v58;
            }
            else
            {
              v25 = 0;
              v46 = 10;
            }
            if (v49)
              v50 = 6;
            else
              v50 = 2;
            v51 = *(_WORD *)(v18 + 36) | v50;
            if (v48)
              v51 |= 8u;
            if (v47)
              v51 |= 0x20u;
            *(_WORD *)(v18 + 36) = v51;
            if (v25)
            {
              v52 = v68;
              v53 = *(_QWORD *)(a1 + 120) + 128;
              *(_DWORD *)(v18 + 24) = v25;
              v54 = 8 * v25;
              v55 = (void *)sub_22E3CD3D4(v53, v54, 3);
              *(_QWORD *)(v18 + 8) = v55;
              memmove(v55, v52, v54);
            }
          }
          else
          {
            v46 = 6;
          }
          if ((_DWORD)v72 == v46 + 1)
          {
            if (*(_QWORD *)(*(_QWORD *)(a1 + 120) + 2768))
            {
              v42 = *((_QWORD *)v71 + v46);
              if (v42)
              {
                v43 = sub_22F2B0DA8(a1, v15, v42);
                v44 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 2768);
                v45 = sub_22F417C0C(v44, -v43);
                if (v45)
                {
                  *(_QWORD *)&v66 = v18;
                  sub_22F37065C((uint64_t *)(v44 + 184), &v66)[1] = v45;
                }
              }
            }
          }
          ++*(_DWORD *)(a1 + 7384);
          v19 = v61;
          goto LABEL_15;
        }
        if ((v66 - 4) < 2)
          goto LABEL_37;
        if ((_DWORD)v66 == 3)
        {
          v20 = 0;
          if (!v18)
            goto LABEL_16;
          if (!v63)
          {
            v35 = "unexpected number of macro tokens for a macro in AST file";
            v36 = a1;
            v37 = 57;
            goto LABEL_36;
          }
          LODWORD(v65) = 0;
          sub_22E76BAA8(a1, v15, (uint64_t *)&v71, &v65, (uint64_t)&v66);
          *(_OWORD *)v62 = v66;
          *(_QWORD *)(v62 + 16) = v67;
          v62 += 24;
          --v63;
          goto LABEL_15;
        }
      }
      v65 = (uint64_t *)v66;
      *(_QWORD *)&v66 = 0;
      sub_22E769A6C((uint64_t *)a1, &v65);
      if (v65)
        (*(void (**)(uint64_t *))(*v65 + 8))(v65);
      if ((BYTE8(v66) & 1) != 0)
      {
        v40 = v66;
        *(_QWORD *)&v66 = 0;
        if (v40)
LABEL_49:
          (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
      }
LABEL_37:
      if (v68 != v70)
        free(v68);
      if (v71 != v19)
        free(v71);
    }
    sub_22E78CE68(v64);
    *(_QWORD *)(*(_QWORD *)(a1 + 4072) + 8 * v5) = v18;
    v38 = *(_QWORD *)(a1 + 64);
    v3 = *(_QWORD *)(a1 + 4072);
    if (v38)
    {
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v38 + 32))(v38, a2, *(_QWORD *)(v3 + 8 * v5));
      v3 = *(_QWORD *)(a1 + 4072);
    }
  }
  return *(_QWORD *)(v3 + 8 * v5);
}

uint64_t sub_22E76DEA8(uint64_t a1, uint64_t a2, int a3)
{
  _DWORD *v3;
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  unint64_t v7;
  unsigned int *v8;
  _DWORD *v9;
  unsigned int v10;
  _DWORD *v11;
  _DWORD *v12;
  int v14;
  uint64_t v15;

  if (!a3)
    return 0;
  if (*(_QWORD *)(a2 + 784))
  {
    v15 = a2;
    v14 = a3;
    sub_22E76BB68(a1, a2);
    a2 = v15;
    a3 = v14;
  }
  v3 = *(_DWORD **)(a2 + 2144);
  v4 = *(unsigned int *)(a2 + 2152);
  if ((_DWORD)v4)
  {
    v5 = *(unsigned int *)(a2 + 2152);
    v6 = *(_DWORD **)(a2 + 2144);
    do
    {
      v7 = v5 >> 1;
      v8 = &v6[2 * (v5 >> 1)];
      v10 = *v8;
      v9 = v8 + 2;
      v5 += ~(v5 >> 1);
      if (v10 > a3 - 1)
        v5 = v7;
      else
        v6 = v9;
    }
    while (v5);
  }
  else
  {
    v6 = *(_DWORD **)(a2 + 2144);
  }
  v11 = &v3[2 * v4];
  if (v6 == v3)
    v12 = v11;
  else
    v12 = v6 - 2;
  return (v12[1] + a3);
}

void sub_22E76DF4C(uint64_t a1@<X1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  __int128 v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26[2];
  char *v27;
  char *v28;
  char *v29;
  char v30;
  __int128 __dst;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD v35[66];

  v35[64] = *MEMORY[0x24BDAC8D0];
  if (!a2
    || (v5 = *(_QWORD *)(a1 + 1168), 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(a1 + 1176) - v5) >> 3) < (unint64_t)a2))
  {
    *(_QWORD *)(a3 + 48) = 0;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    return;
  }
  v6 = a2 - 1;
  v7 = (__int128 *)(v5 + 56 * v6);
  if (*((char *)v7 + 23) < 0)
  {
    v9 = *((_QWORD *)v7 + 1);
    if (v9)
    {
      sub_22E3BB2B4((_BYTE *)a3, *(void **)v7, v9);
      goto LABEL_9;
    }
  }
  else if (*((_BYTE *)v7 + 23))
  {
    v8 = *v7;
    *(_QWORD *)(a3 + 16) = *((_QWORD *)v7 + 2);
    *(_OWORD *)a3 = v8;
LABEL_9:
    v10 = v5 + 56 * v6;
    v11 = *(_OWORD *)(v10 + 24);
    *(_OWORD *)(a3 + 35) = *(_OWORD *)(v10 + 35);
    *(_OWORD *)(a3 + 24) = v11;
    return;
  }
  v12 = a1 + 792;
  v13 = 8 * *(_QWORD *)(a1 + 808) - *(unsigned int *)(a1 + 824);
  v26[0] = a1 + 792;
  v26[1] = v13;
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 1136) + 8 * v6);
  *(_QWORD *)(a1 + 808) = (v14 >> 3) & 0x1FFFFFFFFFFFFFF8;
  *(_DWORD *)(a1 + 824) = 0;
  if ((v14 & 0x3F) != 0)
  {
    sub_22E745EC8(a1 + 792, v14 & 0x3F, (uint64_t)&v33);
    if ((v34 & 1) != 0)
    {
      if (v33)
      {
        *(_QWORD *)&__dst = v33;
        sub_22E6C5940((char **)&__dst, (char **)&v33);
        if ((_QWORD)__dst)
          (*(void (**)(_QWORD))(*(_QWORD *)__dst + 8))(__dst);
      }
    }
  }
  sub_22E745EC8(a1 + 792, *(_DWORD *)(a1 + 828), (uint64_t)&v33);
  v15 = v34;
  if ((v34 & 1) != 0)
  {
    *(_QWORD *)&__dst = v33;
    sub_22E6C5940((char **)&__dst, (char **)&v33);
    if ((_QWORD)__dst)
      (*(void (**)(_QWORD))(*(_QWORD *)__dst + 8))(__dst);
    v16 = 0;
  }
  else
  {
    v16 = v33;
  }
  v33 = v35;
  v34 = 0x4000000000;
  llvm::BitstreamCursor::readRecord();
  if ((BYTE8(__dst) & 1) != 0)
  {
    v17 = (char *)__dst;
    *(_QWORD *)&__dst = 0;
    v28 = v17;
    sub_22E6C5940(&v28, &v29);
    if (v28)
      (*(void (**)(char *))(*(_QWORD *)v28 + 8))(v28);
    if ((BYTE8(__dst) & 1) != 0)
    {
      v18 = __dst;
      *(_QWORD *)&__dst = 0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    }
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v19 = v33;
  *(_QWORD *)(a3 + 32) = *((_QWORD *)v33 + 1);
  *(_QWORD *)(a3 + 40) = v19[2];
  *(_BYTE *)(a3 + 48) = v19[3] != 0;
  *(_BYTE *)(a3 + 49) = v19[4] != 0;
  *(_BYTE *)(a3 + 50) = v19[5] != 0;
  HIBYTE(v32) = 0;
  LOBYTE(__dst) = 0;
  if (*(char *)(a3 + 23) < 0)
    operator delete(*(void **)a3);
  *(_OWORD *)a3 = __dst;
  *(_QWORD *)(a3 + 16) = v32;
  sub_22E76C4AC(a1, a3);
  sub_22E748020(v12, 0, (uint64_t)&__dst);
  if ((BYTE8(__dst) & 1) != 0)
  {
    v20 = (char *)__dst;
    *(_QWORD *)&__dst = 0;
    v28 = v20;
    sub_22E6C5940(&v28, &v29);
    if (v28)
      (*(void (**)(char *))(*(_QWORD *)v28 + 8))(v28);
  }
  LODWORD(v34) = 0;
  llvm::BitstreamCursor::readRecord();
  if ((v30 & 1) != 0)
  {
    v21 = v29;
    v29 = 0;
    v27 = v21;
    sub_22E6C5940(&v27, &v28);
    if (v27)
      (*(void (**)(char *))(*(_QWORD *)v27 + 8))(v27);
    if ((v30 & 1) != 0)
    {
      v22 = v29;
      v29 = 0;
      if (v22)
        (*(void (**)(char *))(*(_QWORD *)v22 + 8))(v22);
    }
  }
  *(_QWORD *)(a3 + 24) = *(_QWORD *)v33 | (*((_QWORD *)v33 + 1) << 32);
  v23 = *(_QWORD *)(a1 + 1168) + 56 * v6;
  std::string::operator=((std::string *)v23, (const std::string *)a3);
  v24 = *(_OWORD *)(a3 + 35);
  *(_OWORD *)(v23 + 24) = *(_OWORD *)(a3 + 24);
  *(_OWORD *)(v23 + 35) = v24;
  if ((BYTE8(__dst) & 1) != 0)
  {
    v25 = __dst;
    *(_QWORD *)&__dst = 0;
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  }
  if (v33 != v35)
    free(v33);
  if ((v15 & 1) != 0)
  {
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  sub_22E78CE68(v26);
}

void sub_22E76E414(uint64_t a1)
{
  char v1;
  int v2;
  uint64_t v3;
  std::string::value_type v5[8];
  __int16 v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v1 = *(_BYTE *)(a1 + 23);
  v2 = v1;
  v3 = v1 & 0x7F;
  if (v2 < 0)
    v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v6 = 260;
    if ((llvm::sys::path::is_absolute() & 1) == 0)
    {
      llvm::sys::path::append();
      sub_22E78FE00((std::string *)a1, v5, v5, 0);
    }
  }
}

uint64_t sub_22E76E528(llvm::BitstreamCursor *a1, char a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  __int16 *v5;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  void *v16;
  void *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  _OWORD *v33;
  uint64_t v34;
  __int128 v35;
  _OWORD *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  void **v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  _OWORD *v50;
  uint64_t v51;
  __int128 v52;
  _OWORD *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  void **v58;
  char *v59;
  __int128 v60;
  int64x2_t v61;
  char *v62;
  int v63;
  void *v64;
  uint64_t v65;
  void **v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  __int16 *v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  int v78;
  int v79;
  unint64_t v80;
  void **v81;
  void *v82;
  int v83;
  void *v84;
  unsigned int v85;
  _QWORD *v86;
  int v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int v90;
  BOOL v91;
  char *v92;
  uint64_t v93;
  __int128 v94;
  char *v95;
  int64_t v96;
  unint64_t v97;
  unint64_t v98;
  char *v99;
  void **v100;
  char *v101;
  __int128 v102;
  int64x2_t v103;
  void *v104;
  unsigned int v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  _OWORD *v109;
  uint64_t v110;
  __int128 v111;
  _OWORD *v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  void **v117;
  char *v118;
  __int128 v119;
  int64x2_t v120;
  char *v121;
  unsigned int v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  _OWORD *v126;
  uint64_t v127;
  __int128 v128;
  _OWORD *v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  char *v133;
  void **v134;
  char *v135;
  __int128 v136;
  int64x2_t v137;
  char *v138;
  unsigned int v139;
  uint64_t v140;
  int v141;
  _QWORD *v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  void *v157;
  unint64_t v158;
  char v159;
  char v160;
  unsigned int v161;
  unint64_t v162;
  int v163;
  int v164;
  int v165;
  unint64_t v166;
  unint64_t v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  int8x16_t v183;
  int64x2_t v184;
  unint64_t v185;
  int64x2_t v186;
  uint64_t v187;
  int64x2_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  int64x2_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  int64x2_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  int64x2_t v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  int64x2_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  unint64_t v252;
  int v253;
  int v254;
  uint64_t v255;
  unint64_t v256;
  unint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v272;
  unint64_t v273;
  unint64_t v274;
  _BOOL8 v275;
  int8x16_t v276;
  int v277;
  unsigned int v278;
  unsigned int v279;
  uint64_t v280;
  _OWORD *v281;
  char *v282;
  __int128 v283;
  _OWORD *v284;
  unint64_t v285;
  unint64_t v286;
  unint64_t v287;
  char *v288;
  void **v289;
  char *v290;
  __int128 v291;
  int64x2_t v292;
  char *v293;
  uint64_t v294;
  unint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  unsigned int v299;
  unsigned int v300;
  _QWORD *v301;
  uint64_t v302;
  unsigned int v303;
  uint64_t v304;
  _OWORD *v305;
  char *v306;
  __int128 v307;
  _OWORD *v308;
  unint64_t v309;
  unint64_t v310;
  unint64_t v311;
  char *v312;
  void **v313;
  char *v314;
  __int128 v315;
  int64x2_t v316;
  char *v317;
  unsigned int v318;
  unsigned int v319;
  uint64_t v320;
  unsigned int v321;
  uint64_t v322;
  unint64_t v323;
  char *v324;
  __int128 v325;
  uint64_t v326;
  uint64_t v327;
  unint64_t v328;
  unint64_t v329;
  unint64_t v330;
  char *v331;
  char *v332;
  char *v333;
  __int128 v334;
  __int128 v335;
  int64x2_t v336;
  char *v337;
  unint64_t v338;
  int v339;
  unint64_t v341;
  __int16 v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  unsigned int v349;
  uint64_t v350;
  unint64_t v351;
  int v352;
  unsigned int v353;
  unint64_t v354;
  uint64_t v355;
  int8x16_t v356;
  int8x16_t v357;
  int8x16_t v358;
  int8x16_t v359;
  int8x16_t v360;
  int8x16_t v361;
  int8x16_t v362;
  int8x16_t v363;
  uint64_t v364;
  unsigned int v365;
  unsigned int v366;
  unsigned int v367;
  unsigned int v368;
  unsigned int v369;
  unsigned int v370;
  char v371;
  uint64_t v372;
  unsigned int v373;
  void *v374[2];
  char v375;
  void *__src[2];
  void *v377;
  __int16 v378;
  void *v379[3];
  __int128 v380;
  uint64_t v381;
  unsigned int v382;
  void *__dst[3];
  char *v384;
  char **v385;
  void *v386;
  char v387;
  void *v388;
  char v389;
  void *v390;
  uint64_t v391;
  _BYTE v392[512];
  void *v393[2];
  _BYTE v394[184];
  int64x2_t v395;
  _QWORD v396[4];
  __int16 v397;
  char v398;
  _DWORD v399[9];
  uint64_t v400;
  uint64_t v401;
  _DWORD v402[4];
  __int128 v403;
  __int128 v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  int v408;
  unint64_t v409;
  uint64_t v410;
  __int128 v411;
  uint64_t v412;
  int64x2_t v413;
  char *v414;
  int64x2_t v415;
  char *v416;
  BOOL v417;
  int64x2_t v418;
  char *v419;
  __int128 v420;
  void *v421;
  _QWORD *v422;
  _QWORD v423[2];
  __int128 v424;
  __int128 v425;
  __int128 v426;
  __int16 v427;
  uint64_t v428;

  v428 = *MEMORY[0x24BDAC8D0];
  llvm::BitstreamCursor::EnterSubBlock(a1, 17, 0);
  v11 = v379[0];
  if (v379[0])
  {
    v379[0] = 0;
    v390 = v11;
    sub_22E6C5940((char **)&v390, (char **)v393);
    if (v390)
      (*(void (**)(void *))(*(_QWORD *)v390 + 8))(v390);
    return 1;
  }
  v371 = a2;
  v372 = a4;
  v364 = a5;
  v13 = 0;
  v390 = v392;
  v362 = (int8x16_t)vdupq_n_s64(0x100000000uLL);
  v363 = (int8x16_t)vdupq_n_s64(0xFFFFFF8000000000);
  v360 = (int8x16_t)vdupq_n_s64(0x400000000uLL);
  v361 = (int8x16_t)vdupq_n_s64(0x200000000uLL);
  v358 = (int8x16_t)vdupq_n_s64(0x1000000000uLL);
  v359 = (int8x16_t)vdupq_n_s64(0x800000000uLL);
  v356 = (int8x16_t)vdupq_n_s64(0x4000000000uLL);
  v357 = (int8x16_t)vdupq_n_s64(0x2000000000uLL);
  v391 = 0x4000000000;
  v12 = 1;
  do
  {
    sub_22E748020((uint64_t)a1, 0, (uint64_t)&v388);
    if ((v389 & 1) != 0)
    {
      v16 = v388;
      v388 = 0;
      v379[0] = v16;
      sub_22E6C5940((char **)v379, (char **)v393);
      if (v379[0])
        (*(void (**)(void *))(*(_QWORD *)v379[0] + 8))(v379[0]);
LABEL_15:
      v15 = 1;
      v12 = 1;
      goto LABEL_16;
    }
    if ((_DWORD)v388)
      v14 = (_DWORD)v388 == 2;
    else
      v14 = 1;
    if (v14)
      goto LABEL_15;
    if ((_DWORD)v388 == 1)
    {
      v15 = 1;
      v12 = v13;
    }
    else
    {
      LODWORD(v391) = 0;
      llvm::BitstreamCursor::readRecord();
      if ((v387 & 1) != 0)
      {
        v64 = v386;
        v386 = 0;
        v379[0] = v64;
        sub_22E6C5940((char **)v379, (char **)v393);
        if (v379[0])
          (*(void (**)(void *))(*(_QWORD *)v379[0] + 8))(v379[0]);
        v15 = 1;
        v12 = 1;
      }
      else
      {
        v373 = v12;
        switch((int)v386)
        {
          case 1:
            v367 = v13;
            v370 = a3;
            sub_22F1D4230((uint64_t)v393);
            v142 = v390;
            v143 = *((unsigned int *)v390 + 66) | ((*((_QWORD *)v390 + 34) & 1) << 32) & 0xFFFFFFC1FFFFFFFFLL | ((*((_QWORD *)v390 + 35) & 1) << 33) & 0xFFFFFFC3FFFFFFFFLL | ((*((_QWORD *)v390 + 36) & 1) << 34) & 0xFFFFFFC7FFFFFFFFLL | ((*((_QWORD *)v390 + 37) & 1) << 35) & 0xFFFFFFCFFFFFFFFFLL | ((*((_QWORD *)v390 + 38) & 1) << 36) & 0xFFFFFFDFFFFFFFFFLL | ((*((_QWORD *)v390 + 39) & 1) << 37) | ((*((_QWORD *)v390 + 40) & 1) << 38) | ((*((_QWORD *)v390 + 41) & 1) << 39) | ((*((_QWORD *)v390 + 42) & 1) << 40) | ((*((_QWORD *)v390 + 45) & 1) << 41) | ((*((_QWORD *)v390 + 46) & 1) << 42) | ((*((_QWORD *)v390 + 47) & 1) << 43) | ((*((_QWORD *)v390 + 48) & 1) << 44) | ((*((_QWORD *)v390 + 49) & 1) << 45) | ((*((_QWORD *)v390 + 50) & 1) << 46) | ((*((_QWORD *)v390 + 51) & 1) << 47) | ((*((_QWORD *)v390 + 53) & 1) << 48) | ((*((_QWORD *)v390 + 54) & 1) << 49) | ((*((_QWORD *)v390 + 55) & 1) << 50);
            v144 = v143 | ((*((_QWORD *)v390 + 56) & 1) << 51) | ((*((_QWORD *)v390 + 57) & 1) << 52) | ((*((_QWORD *)v390 + 58) & 1) << 53) | ((*((_QWORD *)v390 + 59) & 1) << 54) | ((*((_QWORD *)v390 + 60) & 1) << 55) | ((*((_QWORD *)v390 + 61) & 1) << 56) | ((*((_QWORD *)v390 + 62) & 1) << 57) | ((*((_QWORD *)v390 + 63) & 1) << 58) | ((*((_QWORD *)v390 + 64) & 1) << 59) | ((*((_QWORD *)v390 + 65) & 1) << 60) | ((*((_QWORD *)v390 + 66) & 1) << 61) | (*((_QWORD *)v390 + 67) << 62);
            v352 = *((_DWORD *)v390 + 138) & 1 | (2 * (*((_BYTE *)v390 + 560) & 1)) & 0xC3 | (4
                                                                                            * (*((_BYTE *)v390 + 568) & 1)) & 0xC7 | (8 * (*((_BYTE *)v390 + 576) & 1)) & 0xCF | (16 * (*((_BYTE *)v390 + 584) & 1)) & 0xDF | (32 * (*((_DWORD *)v390 + 150) & 1)) | (*((unsigned __int16 *)v390 + 304) << 6);
            v145 = *(_QWORD *)&v394[4] & 0x8000000000000000 | *((unsigned int *)v390 + 158) | ((*((_QWORD *)v390 + 80) & 1) << 32) & 0xFFFFFFE1FFFFFFFFLL | ((*((_QWORD *)v390 + 81) & 1) << 33) & 0xFFFFFFE3FFFFFFFFLL | ((*((_QWORD *)v390 + 82) & 1) << 34) & 0xFFFFFFE7FFFFFFFFLL | ((*((_QWORD *)v390 + 83) & 1) << 35) & 0xFFFFFFEFFFFFFFFFLL | ((*((_QWORD *)v390 + 84) & 1) << 36) | ((*((_QWORD *)v390 + 85) & 1) << 37) | ((*((_QWORD *)v390 + 86) & 1) << 38) | ((*((_QWORD *)v390 + 87) & 1) << 39) | ((*((_QWORD *)v390 + 88) & 1) << 40) | ((*((_QWORD *)v390 + 89) & 1) << 41) | ((*((_QWORD *)v390 + 90) & 1) << 42) | ((*((_QWORD *)v390 + 91) & 1) << 43) | ((*((_QWORD *)v390 + 92) & 1) << 44) | ((*((_QWORD *)v390 + 93) & 1) << 45) | ((*((_QWORD *)v390 + 94) & 1) << 46) | ((*((_QWORD *)v390 + 95) & 1) << 47) | ((*((_QWORD *)v390 + 97) & 1) << 48) | ((*((_QWORD *)v390 + 98) & 1) << 49);
            v346 = *((unsigned int *)v390 + 238) | (*((_QWORD *)v390 + 120) << 32);
            v350 = *((unsigned int *)v390 + 244) | (*((_QWORD *)v390 + 123) << 32);
            v146 = (unint64_t)(*((_DWORD *)v390 + 12) & 1) << 6;
            v147 = (unint64_t)(*((_DWORD *)v390 + 14) & 1) << 7;
            v148 = (unint64_t)(*((_DWORD *)v390 + 16) & 1) << 8;
            v149 = (unint64_t)(*((_DWORD *)v390 + 18) & 1) << 9;
            v150 = (unint64_t)(*((_DWORD *)v390 + 20) & 1) << 10;
            v151 = (unint64_t)(*((_DWORD *)v390 + 22) & 1) << 11;
            v152 = (unint64_t)(*((_DWORD *)v390 + 24) & 1) << 12;
            v153 = (unint64_t)(*((_DWORD *)v390 + 26) & 1) << 13;
            v154 = (unint64_t)(*((_DWORD *)v390 + 28) & 1) << 14;
            v155 = (unint64_t)(*((_DWORD *)v390 + 30) & 1) << 15;
            v156 = (unint64_t)v393[0] & 0xFFFFFFFE00000000 | *(_QWORD *)v390 & 1 | (2 * (*((_DWORD *)v390 + 2) & 1)) & 0xC3 | (4 * (*((_DWORD *)v390 + 4) & 1)) & 0xC7 | (8 * (*((_DWORD *)v390 + 6) & 1)) & 0xCF | (16 * (*((_DWORD *)v390 + 8) & 1)) & 0xDF | (32 * (*((_DWORD *)v390 + 10) & 1));
            v354 = v396[2] & 0x87FFFFFFFFFFFFFFLL | ((*((_QWORD *)v390 + 43) & 3) << 59) & 0x9FFFFFFFFFFFFFFFLL | ((*((_QWORD *)v390 + 44) & 3) << 61);
            v157 = (void *)(v144 & 0x7FFFFFFFFFFFFFFFLL | ((unint64_t)*((_QWORD *)v390 + 68) << 63));
            v158 = (v145 | ((*((_QWORD *)v390 + 99) & 1) << 50) | ((*((_QWORD *)v390 + 100) & 1) << 51) | ((*((_QWORD *)v390 + 101) & 1) << 52) | ((*((_QWORD *)v390 + 102) & 1) << 53) | ((*((_QWORD *)v390 + 103) & 1) << 54) | ((*((_QWORD *)v390 + 104) & 1) << 55) | ((*((_QWORD *)v390 + 105) & 1) << 56) | ((*((_QWORD *)v390 + 106) & 1) << 57) | ((*((_QWORD *)v390 + 107) & 1) << 58) | ((*((_QWORD *)v390 + 108) & 1) << 59) | ((*((_QWORD *)v390 + 109) & 1) << 60) | ((*((_QWORD *)v390 + 110) & 1) << 61) | (*((_QWORD *)v390 + 111) << 62)) & 0x7FFFFFFFFFFFFFFFLL | ((unint64_t)*((_QWORD *)v390 + 112) << 63);
            v159 = v394[12] & 0xC0 | *((_BYTE *)v390 + 904) & 1 | (2 * (*((_BYTE *)v390 + 912) & 1)) & 0xC3 | (4 * (*((_BYTE *)v390 + 920) & 1)) & 0xC7 | (8 * (*((_BYTE *)v390 + 928) & 1)) & 0xCF | (16 * (*((_BYTE *)v390 + 936) & 1)) & 0xDF | (32 * (*((_BYTE *)v390 + 944) & 1));
            v160 = v394[24] & 0xFE | *((_DWORD *)v390 + 242) & 1;
            v161 = v396[3] & 0x80000000 | *((_DWORD *)v390 + 104) & 7 | (8 * (*((_BYTE *)v390 + 592) & 3)) & 0x1F | (32 * (*((_BYTE *)v390 + 768) & 7)) | ((*((_DWORD *)v390 + 298) & 3) << 8);
            v162 = v156 | v146 | v147 | v148 | v149 | v150 | v151 | v152 | v153 | v154 | v155 | ((unint64_t)(*((_DWORD *)v390 + 32) & 1) << 16) | ((unint64_t)(*((_DWORD *)v390 + 34) & 1) << 17) | ((unint64_t)(*((_DWORD *)v390 + 36) & 1) << 18) | ((unint64_t)(*((_DWORD *)v390 + 38) & 1) << 19) | ((unint64_t)(*((_DWORD *)v390 + 40) & 1) << 20) | ((unint64_t)(*((_DWORD *)v390 + 42) & 1) << 21) | ((unint64_t)(*((_DWORD *)v390 + 44) & 1) << 22) | ((unint64_t)(*((_DWORD *)v390 + 46) & 1) << 23) | ((unint64_t)(*((_DWORD *)v390 + 48) & 1) << 24) | ((unint64_t)(*((_DWORD *)v390 + 50) & 1) << 25) | ((unint64_t)(*((_DWORD *)v390 + 52) & 1) << 26) | ((unint64_t)(*((_DWORD *)v390 + 54) & 1) << 27) | ((unint64_t)(*((_DWORD *)v390 + 56) & 1) << 28) | ((unint64_t)(*((_DWORD *)v390 + 58) & 1) << 29) | ((unint64_t)(*((_DWORD *)v390 + 60) & 1) << 30) | (*((_DWORD *)v390 + 62) << 31) | ((*((_QWORD *)v390 + 32) & 1) << 32);
            v163 = *((_DWORD *)v390 + 286) & 1;
            LODWORD(v149) = *((_DWORD *)v390 + 288) & 1;
            LODWORD(v152) = *((_DWORD *)v390 + 290) & 1;
            LODWORD(v146) = *((_DWORD *)v390 + 292) & 1;
            LODWORD(v155) = *((_DWORD *)v390 + 294) & 0xF;
            LODWORD(v150) = *((_DWORD *)v390 + 296) & 1;
            v164 = *((_DWORD *)v390 + 302) & 1;
            LODWORD(v148) = *(_DWORD *)&v394[36] & 0x80000000 | *((_DWORD *)v390 + 248) & 1 | (2
                                                                                             * (*((_BYTE *)v390 + 1000) & 1)) & 0x83 | (4 * (*((_BYTE *)v390 + 1008) & 3)) & 0x8F | (16 * (*((_BYTE *)v390 + 1016) & 1)) & 0x9F | (32 * (*((_BYTE *)v390 + 1024) & 1)) & 0xBF | ((*((_DWORD *)v390 + 258) & 1) << 6) | ((*((_DWORD *)v390 + 260) & 1) << 7) | ((*((_DWORD *)v390 + 262) & 1) << 8) | ((*((_DWORD *)v390 + 264) & 1) << 9) | ((*((_DWORD *)v390 + 266) & 1) << 10) | ((*((_DWORD *)v390 + 268) & 1) << 11) | ((*((_DWORD *)v390 + 270) & 1) << 12) | ((*((_DWORD *)v390 + 272) & 1) << 13) | ((*((_DWORD *)v390 + 274) & 1) << 14) | ((*((_DWORD *)v390 + 276) & 1) << 15) | ((*((_DWORD *)v390 + 278) & 1) << 16) | ((*((_DWORD *)v390 + 280) & 1) << 17) | ((*((_DWORD *)v390 + 282) & 1) << 18) | ((*((_DWORD *)v390 + 284) & 1) << 19);
            LODWORD(v156) = *((_DWORD *)v390 + 304) & 1;
            v394[2] = (v352 | ((*((_DWORD *)v390 + 154) & 1u) << 22) | (*((_DWORD *)v390 + 156) << 23)) >> 16;
            *(_WORD *)v394 = v352;
            v393[0] = (void *)v162;
            v393[1] = v157;
            v394[12] = v159;
            v165 = v148 | (v163 << 20) | ((_DWORD)v149 << 21) | ((_DWORD)v152 << 22) | ((_DWORD)v146 << 23) | ((_DWORD)v155 << 24) | ((_DWORD)v150 << 28) | (v164 << 29) | ((_DWORD)v156 << 30);
            v166 = *(_QWORD *)&v394[40] & 0xFFFFFFFE00000000 | *((unsigned int *)v390 + 306) | ((*((_QWORD *)v390 + 154) & 1) << 32);
            v344 = *((unsigned int *)v390 + 342) | (*((_QWORD *)v390 + 172) << 32);
            v167 = *((unsigned int *)v390 + 346) | ((unint64_t)*((unsigned int *)v390 + 348) << 32);
            LODWORD(v157) = *((_DWORD *)v390 + 362) & 1;
            LODWORD(v150) = *((_DWORD *)v390 + 366) & 1;
            v168 = *((_DWORD *)v390 + 368) & 1;
            v169 = *((_DWORD *)v390 + 370) & 1;
            v170 = *((_DWORD *)v390 + 372) & 1;
            v171 = *((_DWORD *)v390 + 374) & 1;
            v172 = *((_DWORD *)v390 + 376) & 1;
            LODWORD(v162) = *(_WORD *)&v394[80] & 0xE000 | *((_DWORD *)v390 + 350) & 1 | (2
                                                                                        * (*((_BYTE *)v390 + 1408) & 1)) & 0xC3 | (4 * (*((_BYTE *)v390 + 1416) & 1)) & 0xC7 | (8 * (*((_BYTE *)v390 + 1424) & 1)) & 0xCF | (16 * (*((_BYTE *)v390 + 1432) & 1)) & 0xDF | (32 * (*((_DWORD *)v390 + 360) & 1));
            *(_QWORD *)&v394[4] = v158;
            *(_QWORD *)&v394[16] = v346;
            v394[24] = v160;
            v342 = v162 | ((_WORD)v157 << 6) | ((_WORD)v150 << 7) | ((_WORD)v168 << 8) | ((_WORD)v169 << 9) | ((_WORD)v170 << 10) | ((_WORD)v171 << 11) | ((_WORD)v172 << 12);
            v353 = v161 & 0xE00003FF | ((*((_WORD *)v390 + 600) & 7) << 10) & 0x1FFF | ((unsigned __int16)*((_DWORD *)v390 + 364) << 13) | ((*((_DWORD *)v390 + 388) & 3) << 29);
            v341 = *(_QWORD *)&v394[84] & 0xFFFFFF0000000000 | *((unsigned int *)v142 + 378) | ((v142[190] & 1) << 32) & 0xFFFFFFE1FFFFFFFFLL | ((v142[191] & 1) << 33) & 0xFFFFFFE3FFFFFFFFLL | ((v142[192] & 1) << 34) & 0xFFFFFFE7FFFFFFFFLL | ((*((_QWORD *)v390 + 193) & 1) << 35) & 0xFFFFFFEFFFFFFFFFLL | ((v142[195] & 1) << 36) | ((v142[196] & 1) << 37) | ((v142[197] & 1) << 38) | ((v142[198] & 1) << 39);
            v347 = *((unsigned int *)v142 + 398) | (v142[200] << 32);
            v173 = *((_DWORD *)v390 + 408) & 1;
            v174 = *((_DWORD *)v390 + 410) & 1;
            v175 = *((_DWORD *)v390 + 412) & 1;
            v176 = *((_DWORD *)v390 + 414) & 1;
            v177 = *((_DWORD *)v390 + 416) & 1;
            v178 = *((_DWORD *)v390 + 418) & 1;
            v179 = *((_DWORD *)v390 + 420) & 1;
            v349 = HIDWORD(v396[3]) & 0x80000000 | *((_DWORD *)v390 + 596) & 3;
            v180 = *((_DWORD *)v390 + 422) & 1;
            v181 = *((unsigned int *)v142 + 402) | ((v142[202] & 1) << 32) | ((unint64_t)(*((_DWORD *)v390 + 406) & 1) << 33);
            v182 = *((_DWORD *)v390 + 424) & 1;
            *(_DWORD *)&v394[36] = v165;
            v183.i64[0] = *((_QWORD *)v390 + 155);
            v183.i64[1] = *((_QWORD *)v390 + 163);
            v184.i64[0] = *((_QWORD *)v390 + 156);
            v184.i64[1] = *((_QWORD *)v390 + 164);
            v185 = v181 | (v173 << 34) | (v174 << 35) | (v175 << 36) | (v176 << 37) | (v177 << 38) | (v178 << 39) | (v179 << 40) | (v180 << 41);
            v186.i64[0] = *((_QWORD *)v390 + 157);
            v186.i64[1] = *((_QWORD *)v390 + 165);
            v187 = *((_DWORD *)v390 + 454) & 1;
            v188.i64[0] = *((_QWORD *)v390 + 158);
            v189 = *((_DWORD *)v390 + 456) & 1;
            v188.i64[1] = *((_QWORD *)v390 + 166);
            v190 = *((_DWORD *)v390 + 458) & 1;
            v191 = *((_DWORD *)v390 + 460) & 1;
            v192 = *((_DWORD *)v390 + 462) & 1;
            v193.i64[0] = *((_QWORD *)v390 + 159);
            v194 = *((_DWORD *)v390 + 464) & 1;
            v193.i64[1] = *((_QWORD *)v390 + 167);
            v195 = *((_QWORD *)v390 + 234) & 1;
            v196 = *((_QWORD *)v390 + 240) & 1;
            v197 = *((_QWORD *)v390 + 241) & 1;
            v198.i64[0] = *((_QWORD *)v390 + 160);
            v199 = *((_QWORD *)v390 + 242) & 1;
            v198.i64[1] = *((_QWORD *)v390 + 168);
            v200 = *((_QWORD *)v390 + 243) & 1;
            v201 = *((_QWORD *)v390 + 244) & 1;
            v202 = *((_QWORD *)v390 + 245) & 1;
            v203.i64[0] = *((_QWORD *)v390 + 161);
            v204 = v185 | (v182 << 42) | ((v142[213] & 1) << 43) | ((v142[214] & 1) << 44) | ((v142[215] & 1) << 45) | ((v142[216] & 1) << 46) | ((v142[217] & 1) << 47) | ((v142[218] & 1) << 48) | ((v142[219] & 1) << 49) | ((v142[220] & 1) << 50) | ((v142[221] & 1) << 51) | ((v142[222] & 1) << 52) | ((v142[223] & 1) << 53) | ((v142[224] & 1) << 54);
            v205 = *((_QWORD *)v390 + 246) & 1;
            v203.i64[1] = *((_QWORD *)v390 + 169);
            v206 = *((_QWORD *)v390 + 247) & 1;
            v207 = *((_QWORD *)v390 + 248) & 1;
            v208 = v204 | ((v142[225] & 1) << 55) | ((v142[226] & 1) << 56);
            v209 = *((_QWORD *)v390 + 249) & 1;
            *(_QWORD *)&v394[28] = v350;
            v210 = *((_QWORD *)v390 + 250) & 1;
            v211 = v208 | (v187 << 57);
            v212 = *((_QWORD *)v390 + 251) & 1;
            v213 = v211 | (v189 << 58);
            v214 = *((_QWORD *)v390 + 252) & 1;
            v215.i64[0] = *((_QWORD *)v390 + 162);
            v215.i64[1] = *((_QWORD *)v390 + 170);
            *(_QWORD *)&v394[72] = v167;
            v351 = v213 | (v190 << 59) | (v191 << 60) | (v192 << 61) | (v194 << 62) | (*((_QWORD *)v390 + 233) << 63);
            v216 = *((_QWORD *)v390 + 253) & 1;
            v217 = *((_QWORD *)v390 + 254) & 1;
            v218 = *((_QWORD *)v390 + 255) & 1;
            v219 = *((_QWORD *)v390 + 256) & 1;
            v220 = *((_QWORD *)v390 + 257) & 1;
            v221 = *((_QWORD *)v390 + 258) & 1;
            v222 = v195 & 0xFFFFFFFFFFFFFFC1 | (2 * (*((_BYTE *)v390 + 1880) & 1)) & 0xC3 | (4 * (*((_BYTE *)v390 + 1888) & 1)) & 0xC7 | (8 * (*((_BYTE *)v390 + 1896) & 1)) & 0xCF | (16 * (*((_BYTE *)v390 + 1904) & 1)) & 0xDF | (32 * (*((_QWORD *)v390 + 239) & 1)) | (v196 << 6);
            v223 = *((_QWORD *)v390 + 259) & 1;
            v224 = v222 | (v197 << 7);
            v225 = *((_QWORD *)v390 + 260) & 1;
            *(_QWORD *)&v394[40] = v166;
            v226 = *((_QWORD *)v390 + 261) & 1;
            *(_QWORD *)&v394[64] = v344;
            v227 = *((_QWORD *)v390 + 262) & 1;
            v228 = v224 | (v199 << 8);
            v229 = *((_QWORD *)v390 + 263) & 1;
            v230 = v228 | (v200 << 9);
            v231 = *((_QWORD *)v390 + 264) & 1;
            *(_WORD *)&v394[80] = v342;
            v232 = *((_QWORD *)v390 + 265) & 1;
            v233 = v230 | (v201 << 10);
            v234 = *((_DWORD *)v390 + 532) & 1;
            v235 = v233 | (v202 << 11);
            v236 = *((_DWORD *)v390 + 534) & 1;
            *(_QWORD *)&v394[84] = v341;
            v237 = *((_DWORD *)v390 + 536) & 1;
            v238 = v235 | (v205 << 12);
            v239 = *((_DWORD *)v390 + 538) & 1;
            v240 = v238 | (v206 << 13);
            v241 = *((_DWORD *)v390 + 540) & 1;
            v396[2] = v354;
            v242 = v240 | (v207 << 14) | (v209 << 15) | (v210 << 16) | (v212 << 17) | (v214 << 18) | (v216 << 19) | (v217 << 20) | (v218 << 21) | (v219 << 22) | (v220 << 23) | (v221 << 24) | (v223 << 25) | (v225 << 26) | (v226 << 27) | (v227 << 28) | (v229 << 29) | (v231 << 30) | (v232 << 31) | (v234 << 32) | (v236 << 33) | (v237 << 34) | (v239 << 35) | (v241 << 36);
            v243 = v242 | ((v142[271] & 1) << 37) | ((v142[272] & 1) << 38) | ((v142[273] & 1) << 39) | ((v142[274] & 1) << 40) | ((v142[275] & 1) << 41) | ((v142[276] & 1) << 42) | ((v142[277] & 1) << 43) | ((v142[278] & 1) << 44) | ((v142[279] & 1) << 45) | ((v142[280] & 1) << 46) | ((v142[281] & 1) << 47) | ((v142[282] & 1) << 48) | ((v142[283] & 1) << 49) | ((v142[284] & 1) << 50) | ((v142[285] & 1) << 51) | ((v142[286] & 1) << 52) | ((v142[287] & 1) << 53) | ((v142[288] & 1) << 54);
            v244 = v243 | ((v142[289] & 1) << 55) | ((v142[290] & 1) << 56) | ((v142[291] & 1) << 57) | ((v142[292] & 1) << 58) | ((v142[293] & 1) << 59) | ((v142[294] & 1) << 60) | ((v142[295] & 1) << 61) | ((v142[296] & 1) << 62) | (v142[297] << 63);
            v245 = *(_QWORD *)&v394[116] & 0xFFFFFF8000000000 | v142[299] & 1 | (2 * (v142[300] & 1)) & 0xC3 | (4 * (v142[301] & 1)) & 0xC7 | (8 * (v142[302] & 1)) & 0xCF | (16 * (v142[303] & 1)) & 0xDF | (32 * (v142[304] & 1)) | ((v142[305] & 1) << 6) | ((v142[306] & 1) << 7) | ((v142[307] & 1) << 8) | ((v142[308] & 1) << 9) | ((v142[309] & 1) << 10) | ((v142[310] & 1) << 11) | ((v142[311] & 1) << 12) | ((v142[312] & 1) << 13) | ((v142[313] & 1) << 14) | ((v142[314] & 1) << 15) | ((unint64_t)*((unsigned __int16 *)v142 + 1260) << 16) | ((v142[316] & 1) << 32) | ((v142[317] & 1) << 33) | ((v142[318] & 1) << 34) | ((v142[319] & 1) << 35) | ((v142[320] & 1) << 36);
            v246 = v245 | ((v142[321] & 1) << 37) | ((v142[322] & 1) << 38);
            *(_QWORD *)&v394[92] = v347;
            *(_QWORD *)&v394[116] = v246;
            *(_QWORD *)&v394[100] = v351;
            *(_QWORD *)&v394[108] = v244;
            v247 = *(_QWORD *)&v394[124] & 0x8000000000000000 | *((unsigned int *)v390 + 646) | ((v142[324] & 1) << 32) & 0xFFFFFFFDFFFFFFFFLL | ((v142[325] & 1) << 33);
            v248 = *((_QWORD *)v390 + 326);
            v249 = *((_QWORD *)v390 + 327);
            v250 = (*((_QWORD *)v390 + 330) & 1) << 38;
            v345 = (*((_QWORD *)v390 + 331) & 1) << 39;
            v348 = (*((_QWORD *)v390 + 329) & 1) << 37;
            v343 = (*((_QWORD *)v390 + 332) & 1) << 40;
            v251 = v247 & 0xFFFFFFE3FFFFFFFFLL | ((unint64_t)(v248 & 1) << 34) & 0xFFFFFFE7FFFFFFFFLL | ((unint64_t)(v249 & 1) << 35) & 0xFFFFFFEFFFFFFFFFLL | ((*((_QWORD *)v390 + 328) & 1) << 36) | v348 | v250 | v345 | v343 | ((v142[333] & 1) << 41) | ((v142[334] & 1) << 42) | ((v142[335] & 1) << 43) | ((v142[336] & 1) << 44) | ((v142[337] & 1) << 45) | ((v142[338] & 1) << 46) | ((v142[339] & 1) << 47) | ((v142[340] & 1) << 48) | ((v142[341] & 1) << 49) | ((v142[342] & 1) << 50) | ((v142[343] & 1) << 51) | ((v142[344] & 1) << 52) | ((v142[345] & 1) << 53) | ((v142[346] & 1) << 54) | ((v142[347] & 1) << 55) | ((v142[348] & 1) << 56) | ((v142[349] & 1) << 57) | ((v142[350] & 1) << 58) | ((v142[351] & 1) << 59) | ((v142[352] & 1) << 60) | ((v142[353] & 1) << 61) | (v142[355] << 62);
            v252 = v251 & 0x7FFFFFFFFFFFFFFFLL | ((unint64_t)*((_QWORD *)v390 + 361) << 63);
            LODWORD(v227) = (v394[134] << 16) & 0xFFE00000 | v142[362] & 1 | (2 * (v142[363] & 1));
            LOBYTE(v249) = *((_DWORD *)v390 + 728);
            LOBYTE(v226) = *((_DWORD *)v390 + 730);
            LOBYTE(v250) = *((_DWORD *)v390 + 732);
            LOBYTE(v237) = *((_DWORD *)v390 + 734);
            LODWORD(v217) = *((_DWORD *)v390 + 736) & 1;
            LODWORD(v232) = *((_DWORD *)v390 + 738) & 1;
            LODWORD(v241) = *((_DWORD *)v390 + 740) & 1;
            LODWORD(v231) = *((_DWORD *)v390 + 742) & 1;
            v253 = *((_DWORD *)v390 + 746) & 1;
            LODWORD(v234) = *((_DWORD *)v390 + 748) & 1;
            LODWORD(v225) = *((_DWORD *)v390 + 750) & 1;
            LODWORD(v218) = *((_DWORD *)v390 + 752) & 1;
            LODWORD(v207) = *((_DWORD *)v390 + 754) & 1;
            LODWORD(v229) = *((_DWORD *)v390 + 762) & 1;
            LODWORD(v219) = *((_DWORD *)v390 + 764) & 1;
            v396[3] = __PAIR64__(v349 & 0xFFFFE003 | (4 * (v142[354] & 3)) & 0xF | (16 * (v142[356] & 7)) & 0x7F | ((v142[357] & 3) << 7) & 0xE1FF | ((v142[358] & 3) << 9) & 0xE7FF | ((v142[359] & 3) << 11) | ((v142[360] & 3) << 13) | ((v142[372] & 3) << 15) | ((v142[378] & 3) << 17) | ((v142[379] & 7) << 19) | ((v142[380] & 7) << 22) | ((v142[383] & 7) << 25) | ((v142[384] & 7) << 28), v353);
            LODWORD(v248) = v142[385] & 7 | (8 * (v142[386] & 7)) & 0x3F | ((v142[389] & 3) << 6);
            v254 = v227 & 0xFFFFFFC3 | (4 * (v249 & 1)) & 0xC7 | (8 * (v226 & 1)) & 0xCF | (16 * (v250 & 1)) & 0xDF | (32 * (v237 & 1)) | ((_DWORD)v217 << 6) | ((_DWORD)v232 << 7) | ((_DWORD)v241 << 8) | ((_DWORD)v231 << 9) | (v253 << 10) | ((_DWORD)v234 << 11) | ((_DWORD)v225 << 12) | ((_DWORD)v218 << 13) | ((_DWORD)v207 << 14) | ((_DWORD)v229 << 15);
            LODWORD(v234) = (v254 | ((_DWORD)v219 << 16) | ((v142[387] & 1) << 17) | (((_DWORD)v142[388] & 1) << 18) | (((_DWORD)v142[390] & 1) << 19) | (((_DWORD)v142[391] & 1u) << 20)) >> 16;
            *(_WORD *)&v394[132] = v254;
            *(_QWORD *)&v394[124] = v252;
            v394[134] = v234;
            LODWORD(v248) = v248 & 0xFFFFFCFF | ((*((_DWORD *)v390 + 784) & 3) << 8);
            LOBYTE(v254) = v394[144] & 0xF0 | v142[395] & 1 | (2 * (v142[396] & 1)) & 0xF3 | (4 * (v142[397] & 1)) & 0xF7 | (8 * (v142[398] & 1));
            *(_DWORD *)&v394[136] = *((_DWORD *)v390 + 786);
            *(_DWORD *)&v394[140] = *((_DWORD *)v390 + 788);
            v394[144] = v254;
            LOBYTE(v234) = *((_DWORD *)v390 + 798);
            LOBYTE(v254) = *((_DWORD *)v390 + 800);
            v255 = *((unsigned int *)v142 + 802) | (v142[402] << 32);
            LOBYTE(v249) = v394[164] & 0xFE | *((_DWORD *)v390 + 810) & 1;
            *(_DWORD *)&v394[156] = *((_DWORD *)v390 + 806);
            *(_DWORD *)&v394[160] = *((_DWORD *)v390 + 808);
            *(_QWORD *)&v394[148] = v255;
            v394[164] = v249;
            LOBYTE(v249) = *((_DWORD *)v390 + 818);
            LODWORD(v248) = v248 & 0xFFFFF3FF | ((v234 & 3) << 10);
            LODWORD(v236) = (*((_DWORD *)v390 + 846) & 0xF) << 16;
            v256 = *(_QWORD *)&v394[176] & 0xFFF8000000000000 | *((unsigned int *)v142 + 816) | ((v142[410] & 1) << 32) | ((v142[411] & 1) << 33) | ((v142[412] & 1) << 34) | ((v142[413] & 1) << 35) | ((v142[414] & 1) << 36) | ((v142[415] & 1) << 37) | ((v142[416] & 3) << 38) | ((v142[417] & 1) << 40) | ((v142[418] & 1) << 41) | ((v142[419] & 1) << 42) | ((v142[420] & 1) << 43) | ((v142[421] & 1) << 44) | ((v142[422] & 1) << 45) | ((v142[424] & 0x1F) << 46);
            *(_DWORD *)&v394[168] = *((_DWORD *)v390 + 812);
            *(_DWORD *)&v394[172] = *((_DWORD *)v390 + 814);
            *(_QWORD *)&v394[176] = v256;
            LODWORD(v250) = v236 | ((*((_DWORD *)v390 + 870) & 3) << 20);
            LOBYTE(v237) = *((_DWORD *)v390 + 872);
            v257 = v395.i64[1] & 0xFFFFFF8000000000 | *((unsigned int *)v142 + 860) | ((v142[431] & 1) << 32) & 0xFFFFFFE1FFFFFFFFLL | ((v142[432] & 1) << 33) & 0xFFFFFFE3FFFFFFFFLL | ((v142[433] & 1) << 34) & 0xFFFFFFE7FFFFFFFFLL | ((v142[434] & 1) << 35) & 0xFFFFFFEFFFFFFFFFLL | ((v142[437] & 1) << 36) | ((v142[438] & 1) << 37) | ((v142[439] & 1) << 38);
            v395.i64[0] = v395.i64[0] & 0xFFFFFFF000000000 | *((unsigned int *)v142 + 850) | ((v142[426] & 1) << 32) & 0xFFFFFFF1FFFFFFFFLL | ((v142[427] & 1) << 33) & 0xFFFFFFF3FFFFFFFFLL | ((v142[428] & 1) << 34) & 0xFFFFFFF7FFFFFFFFLL | ((v142[429] & 1) << 35);
            v395.i64[1] = v257;
            v258 = *((unsigned int *)v390 + 880);
            v259 = *((_QWORD *)v390 + 441);
            LODWORD(v226) = *((_DWORD *)v390 + 884);
            LODWORD(v248) = v248 & 0xFFFF0FFF | ((v254 & 3) << 12) & 0x3FFF | ((v249 & 3) << 14);
            v397 = v248;
            v398 = (unint64_t)(v250 | ((v237 & 1) << 22) | v248 | ((_DWORD)v226 << 23)) >> 16;
            v260 = v396[1] & 0xFFFFFFFE00000000 | *((unsigned int *)v142 + 886) | ((v142[444] & 1) << 32);
            v396[0] = v258 | (v259 << 32);
            v396[1] = v260;
            v261 = *((unsigned int *)v390 + 890) | v354 & 0xF800000000000000;
            v355 = *((_QWORD *)v390 + 446);
            v262 = *((_QWORD *)v390 + 450);
            v263 = *((_QWORD *)v390 + 460);
            v264 = *((_QWORD *)v390 + 461);
            v265 = *((_QWORD *)v390 + 462);
            v266 = *((_QWORD *)v390 + 463);
            v267 = *((_QWORD *)v390 + 447);
            v396[2] = v261 & 0xFFFFFFE0FFFFFFFFLL | ((unint64_t)(v355 & 1) << 32) & 0xFFFFFFE1FFFFFFFFLL | ((unint64_t)(v267 & 1) << 33) & 0xFFFFFFE3FFFFFFFFLL | ((v142[448] & 1) << 34) & 0xFFFFFFE7FFFFFFFFLL | ((v142[449] & 1) << 35) & 0xFFFFFFEFFFFFFFFFLL | ((unint64_t)(v262 & 1) << 36) | ((v142[451] & 1) << 37) | ((v142[452] & 1) << 38) | ((*((_QWORD *)v390 + 453) & 1) << 39) | ((*((_QWORD *)v390 + 454) & 1) << 40) | ((*((_QWORD *)v390 + 455) & 1) << 41) | ((*((_QWORD *)v390 + 456) & 1) << 42) | ((*((_QWORD *)v390 + 457) & 1) << 43) | ((*((_QWORD *)v390 + 458) & 1) << 44) | ((*((_QWORD *)v390 + 459) & 1) << 45) | ((unint64_t)(v263 & 1) << 46) | ((unint64_t)(v264 & 1) << 47) | ((unint64_t)(v265 & 1) << 48) | ((unint64_t)(v266 & 1) << 49) | ((*((_QWORD *)v390 + 464) & 1) << 50) | ((*((_QWORD *)v390 + 465) & 1) << 51) | ((*((_QWORD *)v390 + 466) & 1) << 52) | ((*((_QWORD *)v390 + 467) & 1) << 53) | ((*((_QWORD *)v390 + 468) & 1) << 54) | ((*((_QWORD *)v390 + 469) & 1) << 55) | ((*((_QWORD *)v390 + 470) & 1) << 56) | ((*((_QWORD *)v390 + 471) & 1) << 57) | ((*((_QWORD *)v390 + 472) & 1) << 58);
            v268 = *(_QWORD *)&v399[1] & 0xD4C8001020000100 | (*((_QWORD *)v390 + 473) != 0) | (2
                                                                                                  * (*((_QWORD *)v390 + 474) != 0)) | (4 * (*((_QWORD *)v390 + 475) != 0)) | (8 * (*((_QWORD *)v390 + 476) != 0));
            v272 = v268 | (16 * (*((_QWORD *)v390 + 477) != 0)) | (32 * (*((_QWORD *)v390 + 478) != 0)) | ((unint64_t)(*((_QWORD *)v390 + 479) != 0) << 6) | ((unint64_t)(*((_QWORD *)v390 + 480) != 0) << 7) | ((unint64_t)(*((_QWORD *)v390 + 481) != 0) << 9) | ((unint64_t)(*((_QWORD *)v390 + 482) != 0) << 10) | ((unint64_t)(*((_QWORD *)v390 + 483) != 0) << 11) | ((unint64_t)(*((_QWORD *)v390 + 484) != 0) << 12) | ((unint64_t)(*((_QWORD *)v390 + 485) != 0) << 13) | ((unint64_t)(*((_QWORD *)v390 + 486) != 0) << 14) | ((unint64_t)(*((_QWORD *)v390 + 487) != 0) << 15) | ((unint64_t)(*((_QWORD *)v390 + 488) != 0) << 16) | ((unint64_t)(*((_QWORD *)v390 + 489) != 0) << 17) | ((unint64_t)(*((_QWORD *)v390 + 490) != 0) << 18) | ((unint64_t)(*((_QWORD *)v390 + 491) != 0) << 19) | ((unint64_t)(*((_QWORD *)v390 + 492) != 0) << 20) | ((unint64_t)(*((_QWORD *)v390 + 493) != 0) << 21) | ((unint64_t)(*((_QWORD *)v390 + 494) != 0) << 22) | ((unint64_t)(*((_QWORD *)v390 + 495) != 0) << 23);
            v271 = *((_QWORD *)v390 + 518) != 0;
            v270 = *((_QWORD *)v390 + 517) != 0;
            v269 = *((_QWORD *)v390 + 516) != 0;
            v273 = v272 | ((unint64_t)(*((_QWORD *)v390 + 496) != 0) << 24) | ((unint64_t)(*((_QWORD *)v390 + 497) != 0) << 25) | ((unint64_t)(*((_QWORD *)v390 + 498) != 0) << 26) | ((unint64_t)(*((_QWORD *)v390 + 499) != 0) << 27) | ((unint64_t)(*((_QWORD *)v390 + 500) != 0) << 28) | ((unint64_t)(*((_QWORD *)v390 + 501) != 0) << 30) | ((unint64_t)(*((_QWORD *)v390 + 502) != 0) << 31) | ((unint64_t)(*((_QWORD *)v390 + 503) != 0) << 32) | ((unint64_t)(*((_QWORD *)v390 + 504) != 0) << 33) | ((unint64_t)(*((_QWORD *)v390 + 505) != 0) << 34) | ((unint64_t)(*((_QWORD *)v390 + 506) != 0) << 35) | ((unint64_t)(*((_QWORD *)v390 + 507) != 0) << 37) | ((unint64_t)(*((_QWORD *)v390 + 508) != 0) << 38) | ((unint64_t)(*((_QWORD *)v390 + 509) != 0) << 39) | ((unint64_t)(*((_QWORD *)v390 + 510) != 0) << 40) | ((unint64_t)(*((_QWORD *)v390 + 511) != 0) << 41) | ((unint64_t)(*((_QWORD *)v390 + 512) != 0) << 42) | ((unint64_t)(*((_QWORD *)v390 + 513) != 0) << 43) | ((unint64_t)(*((_QWORD *)v390 + 514) != 0) << 44) | ((unint64_t)(*((_QWORD *)v390 + 515) != 0) << 45) | (v269 << 46) | (v270 << 47) | (v271 << 48);
            v274 = *(_QWORD *)&v399[3] & 0xFFFFFFFFFFFFFFFALL | (*((_QWORD *)v390 + 527) != 0);
            v275 = *((_QWORD *)v390 + 528) != 0;
            *(_QWORD *)&v399[1] = v273 | ((unint64_t)(*((_QWORD *)v390 + 519) != 0) << 49) | ((unint64_t)(*((_QWORD *)v390 + 520) != 0) << 50) | ((unint64_t)(*((_QWORD *)v390 + 521) != 0) << 52) | ((unint64_t)(*((_QWORD *)v390 + 522) != 0) << 53) | ((unint64_t)(*((_QWORD *)v390 + 523) != 0) << 56) | ((unint64_t)(*((_QWORD *)v390 + 524) != 0) << 57) | ((unint64_t)(*((_QWORD *)v390 + 525) != 0) << 59) | ((unint64_t)(*((_QWORD *)v390 + 526) != 0) << 61);
            v276.i64[0] = 0xFFFFFFFFLL;
            v276.i64[1] = 0xFFFFFFFFLL;
            *(int8x16_t *)&v394[48] = vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vandq_s8(*(int8x16_t *)&v394[48], v363), vandq_s8(v183, v276)), vandq_s8((int8x16_t)vshlq_n_s64(v184, 0x20uLL), v362)), vorrq_s8(vandq_s8((int8x16_t)vshlq_n_s64(v186, 0x21uLL), v361), vandq_s8((int8x16_t)vshlq_n_s64(v188, 0x22uLL), v360))), vorrq_s8(vorrq_s8(vandq_s8((int8x16_t)vshlq_n_s64(v193, 0x23uLL), v359), vandq_s8((int8x16_t)vshlq_n_s64(v198, 0x24uLL), v358)), vandq_s8((int8x16_t)vshlq_n_s64(v203, 0x25uLL), v357))), vandq_s8((int8x16_t)vshlq_n_s64(v215, 0x26uLL), v356));
            *(_QWORD *)&v399[3] = v274 | (4 * v275);
            v277 = *((_DWORD *)v390 + 1058);
            if (v277)
            {
              v278 = 530;
              do
              {
                v279 = v278 + 1;
                v280 = *((_QWORD *)v390 + v278);
                sub_22E793964(__dst, (uint64_t *)v390 + v279, (uint64_t *)v390 + v279 + v280, v280);
                v281 = (_OWORD *)v413.i64[1];
                v282 = v414;
                if (v413.i64[1] >= (unint64_t)v414)
                {
                  v284 = (_OWORD *)v413.i64[0];
                  v285 = 0xAAAAAAAAAAAAAAABLL * ((v413.i64[1] - v413.i64[0]) >> 3);
                  v286 = v285 + 1;
                  if (v285 + 1 > 0xAAAAAAAAAAAAAAALL)
                    goto LABEL_265;
                  if (0x5555555555555556 * ((uint64_t)&v414[-v413.i64[0]] >> 3) > v286)
                    v286 = 0x5555555555555556 * ((uint64_t)&v414[-v413.i64[0]] >> 3);
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v414[-v413.i64[0]] >> 3) >= 0x555555555555555)
                    v287 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v287 = v286;
                  *((_QWORD *)&v380 + 1) = &v414;
                  if (v287)
                  {
                    if (v287 > 0xAAAAAAAAAAAAAAALL)
                      goto LABEL_266;
                    v288 = (char *)operator new(24 * v287);
                  }
                  else
                  {
                    v288 = 0;
                  }
                  v289 = (void **)&v288[24 * v285];
                  *(_OWORD *)v289 = *(_OWORD *)__dst;
                  v289[2] = __dst[2];
                  memset(__dst, 0, sizeof(__dst));
                  if (v281 == v284)
                  {
                    v292 = vdupq_n_s64((unint64_t)v281);
                    v290 = &v288[24 * v285];
                  }
                  else
                  {
                    v290 = &v288[24 * v285];
                    do
                    {
                      v291 = *(_OWORD *)((char *)v281 - 24);
                      *((_QWORD *)v290 - 1) = *((_QWORD *)v281 - 1);
                      *(_OWORD *)(v290 - 24) = v291;
                      v290 -= 24;
                      *((_QWORD *)v281 - 2) = 0;
                      *((_QWORD *)v281 - 1) = 0;
                      *((_QWORD *)v281 - 3) = 0;
                      v281 = (_OWORD *)((char *)v281 - 24);
                    }
                    while (v281 != v284);
                    v292 = v413;
                    v282 = v414;
                  }
                  v293 = (char *)(v289 + 3);
                  v413.i64[0] = (uint64_t)v290;
                  v413.i64[1] = (uint64_t)(v289 + 3);
                  *(int64x2_t *)&v379[1] = v292;
                  v414 = &v288[24 * v287];
                  *(_QWORD *)&v380 = v282;
                  v379[0] = (void *)v292.i64[0];
                  sub_22E3B8B94((uint64_t)v379);
                  v413.i64[1] = (uint64_t)v293;
                  if (SHIBYTE(__dst[2]) < 0)
                    operator delete(__dst[0]);
                }
                else
                {
                  v283 = *(_OWORD *)__dst;
                  *(void **)(v413.i64[1] + 16) = __dst[2];
                  *v281 = v283;
                  v413.i64[1] = (uint64_t)v281 + 24;
                }
                v278 = v279 + v280;
                --v277;
              }
              while (v277);
              v142 = v390;
            }
            else
            {
              v278 = 530;
            }
            v382 = v278 + 1;
            v294 = v142[v278];
            v295 = sub_22F2B14A4(&v390, &v382);
            v408 = v294;
            v409 = v295;
            v410 = v296;
            v297 = v382++;
            v298 = v142[v297];
            sub_22E793964(v379, &v142[v382], &v142[v382 + v298], v298);
            v299 = v382;
            if (SHIBYTE(v412) < 0)
              operator delete((void *)v411);
            v411 = *(_OWORD *)v379;
            v412 = (uint64_t)v379[2];
            v300 = v299 + v298 + 1;
            v301 = v390;
            v302 = *((_QWORD *)v390 + v299 + v298);
            if ((_DWORD)v302)
            {
              do
              {
                v303 = v300 + 1;
                v304 = *((_QWORD *)v390 + v300);
                sub_22E793964(__dst, (uint64_t *)v390 + v303, (uint64_t *)v390 + v303 + v304, v304);
                v305 = (_OWORD *)v415.i64[1];
                v306 = v416;
                if (v415.i64[1] >= (unint64_t)v416)
                {
                  v308 = (_OWORD *)v415.i64[0];
                  v309 = 0xAAAAAAAAAAAAAAABLL * ((v415.i64[1] - v415.i64[0]) >> 3);
                  v310 = v309 + 1;
                  if (v309 + 1 > 0xAAAAAAAAAAAAAAALL)
                    goto LABEL_265;
                  if (0x5555555555555556 * ((uint64_t)&v416[-v415.i64[0]] >> 3) > v310)
                    v310 = 0x5555555555555556 * ((uint64_t)&v416[-v415.i64[0]] >> 3);
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v416[-v415.i64[0]] >> 3) >= 0x555555555555555)
                    v311 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v311 = v310;
                  *((_QWORD *)&v380 + 1) = &v416;
                  if (v311)
                  {
                    if (v311 > 0xAAAAAAAAAAAAAAALL)
                      goto LABEL_266;
                    v312 = (char *)operator new(24 * v311);
                  }
                  else
                  {
                    v312 = 0;
                  }
                  v313 = (void **)&v312[24 * v309];
                  *(_OWORD *)v313 = *(_OWORD *)__dst;
                  v313[2] = __dst[2];
                  memset(__dst, 0, sizeof(__dst));
                  if (v305 == v308)
                  {
                    v316 = vdupq_n_s64((unint64_t)v305);
                    v314 = &v312[24 * v309];
                  }
                  else
                  {
                    v314 = &v312[24 * v309];
                    do
                    {
                      v315 = *(_OWORD *)((char *)v305 - 24);
                      *((_QWORD *)v314 - 1) = *((_QWORD *)v305 - 1);
                      *(_OWORD *)(v314 - 24) = v315;
                      v314 -= 24;
                      *((_QWORD *)v305 - 2) = 0;
                      *((_QWORD *)v305 - 1) = 0;
                      *((_QWORD *)v305 - 3) = 0;
                      v305 = (_OWORD *)((char *)v305 - 24);
                    }
                    while (v305 != v308);
                    v316 = v415;
                    v306 = v416;
                  }
                  v317 = (char *)(v313 + 3);
                  v415.i64[0] = (uint64_t)v314;
                  v415.i64[1] = (uint64_t)(v313 + 3);
                  *(int64x2_t *)&v379[1] = v316;
                  v416 = &v312[24 * v311];
                  *(_QWORD *)&v380 = v306;
                  v379[0] = (void *)v316.i64[0];
                  sub_22E3B8B94((uint64_t)v379);
                  v415.i64[1] = (uint64_t)v317;
                  if (SHIBYTE(__dst[2]) < 0)
                    operator delete(__dst[0]);
                }
                else
                {
                  v307 = *(_OWORD *)__dst;
                  *(void **)(v415.i64[1] + 16) = __dst[2];
                  *v305 = v307;
                  v415.i64[1] = (uint64_t)v305 + 24;
                }
                v300 = v303 + v304;
                LODWORD(v302) = v302 - 1;
              }
              while ((_DWORD)v302);
              v301 = v390;
            }
            v318 = v300 + 1;
            v417 = v301[v300] != 0;
            v319 = v300 + 2;
            v320 = v301[v318];
            if ((_DWORD)v320)
            {
              do
              {
                v321 = v319 + 1;
                v322 = *((_QWORD *)v390 + v319);
                sub_22E793964(v374, (uint64_t *)v390 + v321, (uint64_t *)v390 + v321 + v322, v322);
                v378 = 260;
                __src[0] = v374;
                MEMORY[0x23489F1BC](v379, __src);
                v323 = v418.u64[1];
                v324 = v419;
                if (v418.i64[1] >= (unint64_t)v419)
                {
                  v327 = v418.i64[0];
                  v328 = 0xAAAAAAAAAAAAAAABLL * ((v418.i64[1] - v418.i64[0]) >> 4);
                  v329 = v328 + 1;
                  if (v328 + 1 > 0x555555555555555)
                    goto LABEL_265;
                  if (0x5555555555555556 * ((uint64_t)&v419[-v418.i64[0]] >> 4) > v329)
                    v329 = 0x5555555555555556 * ((uint64_t)&v419[-v418.i64[0]] >> 4);
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v419[-v418.i64[0]] >> 4) >= 0x2AAAAAAAAAAAAAALL)
                    v330 = 0x555555555555555;
                  else
                    v330 = v329;
                  v384 = 0;
                  v385 = &v419;
                  if (v330)
                  {
                    if (v330 > 0x555555555555555)
                      goto LABEL_266;
                    v331 = (char *)operator new(48 * v330);
                  }
                  else
                  {
                    v331 = 0;
                  }
                  v332 = &v331[48 * v328];
                  *(_OWORD *)v332 = *(_OWORD *)v379;
                  *((void **)v332 + 2) = v379[2];
                  memset(v379, 0, sizeof(v379));
                  *(_OWORD *)(v332 + 24) = v380;
                  *((_QWORD *)v332 + 5) = v381;
                  if (v323 == v327)
                  {
                    v336 = vdupq_n_s64(v323);
                    v333 = &v331[48 * v328];
                  }
                  else
                  {
                    v333 = &v331[48 * v328];
                    do
                    {
                      v334 = *(_OWORD *)(v323 - 48);
                      *((_QWORD *)v333 - 4) = *(_QWORD *)(v323 - 32);
                      *((_OWORD *)v333 - 3) = v334;
                      *(_QWORD *)(v323 - 40) = 0;
                      *(_QWORD *)(v323 - 32) = 0;
                      *(_QWORD *)(v323 - 48) = 0;
                      v335 = *(_OWORD *)(v323 - 24);
                      *((_QWORD *)v333 - 1) = *(_QWORD *)(v323 - 8);
                      *(_OWORD *)(v333 - 24) = v335;
                      v333 -= 48;
                      v323 -= 48;
                    }
                    while (v323 != v327);
                    v336 = v418;
                    v324 = v419;
                  }
                  v337 = v332 + 48;
                  v418.i64[0] = (uint64_t)v333;
                  v418.i64[1] = (uint64_t)(v332 + 48);
                  *(int64x2_t *)&__dst[1] = v336;
                  v419 = &v331[48 * v330];
                  v384 = v324;
                  __dst[0] = (void *)v336.i64[0];
                  sub_22E7256C0((uint64_t)__dst);
                  v418.i64[1] = (uint64_t)v337;
                  if (SHIBYTE(v379[2]) < 0)
                    operator delete(v379[0]);
                }
                else
                {
                  v325 = *(_OWORD *)v379;
                  *(void **)(v418.i64[1] + 16) = v379[2];
                  *(_OWORD *)v323 = v325;
                  memset(v379, 0, sizeof(v379));
                  v326 = v381;
                  *(_OWORD *)(v323 + 24) = v380;
                  *(_QWORD *)(v323 + 40) = v326;
                  v418.i64[1] = v323 + 48;
                }
                if (v375 < 0)
                  operator delete(v374[0]);
                v319 = v321 + v322;
                LODWORD(v320) = v320 - 1;
              }
              while ((_DWORD)v320);
              v301 = v390;
            }
            v382 = v319 + 1;
            v338 = LODWORD(v301[v319]);
            sub_22E793964(v379, &v301[v319 + 1], &v301[v319 + 1 + v338], v338);
            if (SHIBYTE(v421) < 0)
              operator delete((void *)v420);
            v420 = *(_OWORD *)v379;
            v421 = v379[2];
            a3 = v370;
            v339 = (*(uint64_t (**)(uint64_t, void **, BOOL, _QWORD))(*(_QWORD *)v372 + 40))(v372, v393, (v371 & 8) == 0, v370);
            sub_22E54B4D4((uint64_t)v393);
            v15 = 0;
            if (v339)
              v13 = 5;
            else
              v13 = v367;
            goto LABEL_76;
          case 2:
            memset(v394, 0, 128);
            *(_OWORD *)v393 = 0u;
            memset(&v394[136], 0, 48);
            v395 = 0u;
            memset(v396, 0, 28);
            memset(&v399[1], 0, 20);
            HIDWORD(v396[3]) = 16;
            v399[6] = 16;
            v401 = 0;
            memset(v402, 0, 11);
            v400 = 0;
            v403 = 0u;
            v404 = 0u;
            v405 = 0u;
            v406 = 0u;
            v407 = 0u;
            v18 = *(_QWORD *)v390;
            sub_22E793964(v393, (uint64_t *)v390 + 1, (uint64_t *)v390 + *(_QWORD *)v390 + 1, *(_QWORD *)v390);
            v19 = v18 + 1;
            v20 = v18 + 2;
            v21 = *((_QWORD *)v390 + v19);
            sub_22E793964(v379, (uint64_t *)v390 + v20, (uint64_t *)v390 + v20 + v21, v21);
            if ((v394[55] & 0x80000000) != 0)
              operator delete(*(void **)&v394[32]);
            v22 = v20 + v21;
            *(_OWORD *)&v394[32] = *(_OWORD *)v379;
            *(void **)&v394[48] = v379[2];
            v23 = v20 + v21 + 1;
            v24 = *((_QWORD *)v390 + v22);
            sub_22E793964(v379, (uint64_t *)v390 + v23, (uint64_t *)v390 + v23 + v24, v24);
            if ((v394[79] & 0x80000000) != 0)
              operator delete(*(void **)&v394[56]);
            v25 = v23 + v24;
            *(_OWORD *)&v394[56] = *(_OWORD *)v379;
            *(void **)&v394[72] = v379[2];
            v26 = v23 + v24 + 1;
            v27 = *((_QWORD *)v390 + v25);
            sub_22E793964(v379, (uint64_t *)v390 + v26, (uint64_t *)v390 + v26 + v27, v27);
            if ((v394[127] & 0x80000000) != 0)
              operator delete(*(void **)&v394[104]);
            v365 = v13;
            *(_OWORD *)&v394[104] = *(_OWORD *)v379;
            *(void **)&v394[120] = v379[2];
            v28 = v26 + v27 + 1;
            v29 = v390;
            v30 = *((_QWORD *)v390 + v26 + v27);
            v368 = a3;
            if (!(_DWORD)v30)
              goto LABEL_51;
            do
            {
              v31 = v28 + 1;
              v32 = *((_QWORD *)v390 + v28);
              sub_22E793964(__dst, (uint64_t *)v390 + v31, (uint64_t *)v390 + v31 + v32, v32);
              v33 = *(_OWORD **)&v394[168];
              v34 = *(_QWORD *)&v394[176];
              if (*(_QWORD *)&v394[168] >= *(_QWORD *)&v394[176])
              {
                v36 = *(_OWORD **)&v394[160];
                v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v394[168] - *(_QWORD *)&v394[160]) >> 3);
                v38 = v37 + 1;
                if (v37 + 1 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_265;
                if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v394[176] - *(_QWORD *)&v394[160]) >> 3) > v38)
                  v38 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v394[176] - *(_QWORD *)&v394[160]) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v394[176] - *(_QWORD *)&v394[160]) >> 3) >= 0x555555555555555)
                  v39 = 0xAAAAAAAAAAAAAAALL;
                else
                  v39 = v38;
                *((_QWORD *)&v380 + 1) = &v394[176];
                if (v39)
                {
                  if (v39 > 0xAAAAAAAAAAAAAAALL)
                    goto LABEL_266;
                  v40 = (char *)operator new(24 * v39);
                }
                else
                {
                  v40 = 0;
                }
                v41 = (void **)&v40[24 * v37];
                *(_OWORD *)v41 = *(_OWORD *)__dst;
                v41[2] = __dst[2];
                memset(__dst, 0, sizeof(__dst));
                if (v33 == v36)
                {
                  v44 = vdupq_n_s64((unint64_t)v33);
                  v42 = &v40[24 * v37];
                }
                else
                {
                  v42 = &v40[24 * v37];
                  do
                  {
                    v43 = *(_OWORD *)((char *)v33 - 24);
                    *((_QWORD *)v42 - 1) = *((_QWORD *)v33 - 1);
                    *(_OWORD *)(v42 - 24) = v43;
                    v42 -= 24;
                    *((_QWORD *)v33 - 2) = 0;
                    *((_QWORD *)v33 - 1) = 0;
                    *((_QWORD *)v33 - 3) = 0;
                    v33 = (_OWORD *)((char *)v33 - 24);
                  }
                  while (v33 != v36);
                  v44 = *(int64x2_t *)&v394[160];
                  v34 = *(_QWORD *)&v394[176];
                }
                v45 = (char *)(v41 + 3);
                *(_QWORD *)&v394[160] = v42;
                *(_QWORD *)&v394[168] = v41 + 3;
                *(int64x2_t *)&v379[1] = v44;
                *(_QWORD *)&v394[176] = &v40[24 * v39];
                *(_QWORD *)&v380 = v34;
                v379[0] = (void *)v44.i64[0];
                sub_22E3B8B94((uint64_t)v379);
                *(_QWORD *)&v394[168] = v45;
                if (SHIBYTE(__dst[2]) < 0)
                  operator delete(__dst[0]);
              }
              else
              {
                v35 = *(_OWORD *)__dst;
                *(void **)(*(_QWORD *)&v394[168] + 16) = __dst[2];
                *v33 = v35;
                *(_QWORD *)&v394[168] = (char *)v33 + 24;
              }
              v28 = v31 + v32;
              LODWORD(v30) = v30 - 1;
            }
            while ((_DWORD)v30);
            v29 = v390;
LABEL_51:
            v46 = v29[v28];
            if ((_DWORD)v46)
            {
              v47 = v28 + 1;
              do
              {
                v48 = v47 + 1;
                v49 = *((_QWORD *)v390 + v47);
                sub_22E793964(__dst, (uint64_t *)v390 + v48, (uint64_t *)v390 + v48 + v49, v49);
                v50 = (_OWORD *)v395.i64[1];
                v51 = v396[0];
                if (v395.i64[1] >= v396[0])
                {
                  v53 = (_OWORD *)v395.i64[0];
                  v54 = 0xAAAAAAAAAAAAAAABLL * ((v395.i64[1] - v395.i64[0]) >> 3);
                  v55 = v54 + 1;
                  if (v54 + 1 > 0xAAAAAAAAAAAAAAALL)
                    goto LABEL_265;
                  if (0x5555555555555556 * ((v396[0] - v395.i64[0]) >> 3) > v55)
                    v55 = 0x5555555555555556 * ((v396[0] - v395.i64[0]) >> 3);
                  if (0xAAAAAAAAAAAAAAABLL * ((v396[0] - v395.i64[0]) >> 3) >= 0x555555555555555)
                    v56 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v56 = v55;
                  *((_QWORD *)&v380 + 1) = v396;
                  if (v56)
                  {
                    if (v56 > 0xAAAAAAAAAAAAAAALL)
                      goto LABEL_266;
                    v57 = (char *)operator new(24 * v56);
                  }
                  else
                  {
                    v57 = 0;
                  }
                  v58 = (void **)&v57[24 * v54];
                  *(_OWORD *)v58 = *(_OWORD *)__dst;
                  v58[2] = __dst[2];
                  memset(__dst, 0, sizeof(__dst));
                  if (v50 == v53)
                  {
                    v61 = vdupq_n_s64((unint64_t)v50);
                    v59 = &v57[24 * v54];
                  }
                  else
                  {
                    v59 = &v57[24 * v54];
                    do
                    {
                      v60 = *(_OWORD *)((char *)v50 - 24);
                      *((_QWORD *)v59 - 1) = *((_QWORD *)v50 - 1);
                      *(_OWORD *)(v59 - 24) = v60;
                      v59 -= 24;
                      *((_QWORD *)v50 - 2) = 0;
                      *((_QWORD *)v50 - 1) = 0;
                      *((_QWORD *)v50 - 3) = 0;
                      v50 = (_OWORD *)((char *)v50 - 24);
                    }
                    while (v50 != v53);
                    v61 = v395;
                    v51 = v396[0];
                  }
                  v62 = (char *)(v58 + 3);
                  v395.i64[0] = (uint64_t)v59;
                  v395.i64[1] = (uint64_t)(v58 + 3);
                  *(int64x2_t *)&v379[1] = v61;
                  v396[0] = &v57[24 * v56];
                  *(_QWORD *)&v380 = v51;
                  v379[0] = (void *)v61.i64[0];
                  sub_22E3B8B94((uint64_t)v379);
                  v395.i64[1] = (uint64_t)v62;
                  if (SHIBYTE(__dst[2]) < 0)
                    operator delete(__dst[0]);
                }
                else
                {
                  v52 = *(_OWORD *)__dst;
                  *(void **)(v395.i64[1] + 16) = __dst[2];
                  *v50 = v52;
                  v395.i64[1] = (uint64_t)v50 + 24;
                }
                v47 = v48 + v49;
                LODWORD(v46) = v46 - 1;
              }
              while ((_DWORD)v46);
            }
            a3 = v368;
            v63 = (*(uint64_t (**)(uint64_t, void **, BOOL, _QWORD))(*(_QWORD *)v372 + 48))(v372, v393, (v371 & 8) == 0, v368);
            sub_22E6C759C((uint64_t)v393);
            v15 = 0;
            if (v63)
              v13 = 5;
            else
              v13 = v365;
LABEL_76:
            v5 = &jpt_22E76E824;
            v12 = v373;
            goto LABEL_105;
          case 3:
            if ((a3 & 1) != 0)
              goto LABEL_104;
            v65 = 0;
            v394[7] = 1;
            LOWORD(v393[0]) = 47;
            memset(&v394[8], 0, 120);
            memset(&v394[136], 0, 40);
            *(_QWORD *)&v394[128] = &v394[136];
            v395.i8[15] = 3;
            strcpy(&v394[176], "raw");
            LOBYTE(v396[0]) = 0;
            *(_QWORD *)((char *)v396 + 4) = 0x28DE8000093A80;
            v396[2] = 0;
            v396[3] = 1;
            do
            {
              v66 = &v393[v65];
              v66[31] = (void *)-4096;
              v66[32] = 0;
              v65 += 2;
            }
            while (v65 != 32);
            *((_QWORD *)&v411 + 1) = &v413;
            v412 = 0x1000000000;
            v423[0] = 0;
            v423[1] = 0;
            v422 = v423;
            v424 = 0u;
            v425 = 0u;
            v426 = 0u;
            v427 = v427 & 0xE000 | 0x40B;
            v67 = *(_QWORD *)v390;
            sub_22E793964(v379, (uint64_t *)v390 + 1, (uint64_t *)v390 + *(_QWORD *)v390 + 1, *(_QWORD *)v390);
            if ((v394[7] & 0x80000000) != 0)
              operator delete(v393[0]);
            v68 = v67 + 1;
            *(_OWORD *)v393 = *(_OWORD *)v379;
            *(void **)v394 = v379[2];
            v69 = v67 + 2;
            v70 = *((_QWORD *)v390 + v68);
            sub_22E793964(v379, (uint64_t *)v390 + v69, (uint64_t *)v390 + v69 + v70, v70);
            if ((v394[79] & 0x80000000) != 0)
              operator delete(*(void **)&v394[56]);
            v71 = v69 + v70;
            *(_OWORD *)&v394[56] = *(_OWORD *)v379;
            *(void **)&v394[72] = v379[2];
            v72 = v69 + v70 + 1;
            v73 = *((_QWORD *)v390 + v71);
            sub_22E793964(v379, (uint64_t *)v390 + v72, (uint64_t *)v390 + v72 + v73, v73);
            if ((v394[103] & 0x80000000) != 0)
              operator delete(*(void **)&v394[80]);
            v74 = v5;
            v75 = v72 + v73;
            *(_OWORD *)&v394[80] = *(_OWORD *)v379;
            *(void **)&v394[96] = v379[2];
            v76 = v72 + v73 + 1;
            v77 = *((_QWORD *)v390 + v75);
            sub_22E793964(v379, (uint64_t *)v390 + v76, (uint64_t *)v390 + v76 + v77, v77);
            if ((v394[127] & 0x80000000) != 0)
              operator delete(*(void **)&v394[104]);
            *(_OWORD *)&v394[104] = *(_OWORD *)v379;
            *(void **)&v394[120] = v379[2];
            v78 = v396[0] & 0xFE | *((_QWORD *)v390 + v76 + v77) & 1;
            LOBYTE(v396[0]) = v396[0] & 0xFE | *((_QWORD *)v390 + v76 + v77) & 1;
            LOBYTE(v396[0]) = v78 & 0xFD | (2 * (*((_QWORD *)v390 + v76 + v77 + 1) & 1));
            LOBYTE(v396[0]) = v396[0] & 0xEF | (16 * (*((_QWORD *)v390 + v76 + v77 + 2) & 1));
            LOBYTE(v396[0]) = v396[0] & 0xDF | (32 * (*((_QWORD *)v390 + v76 + v77 + 3) & 1));
            LOBYTE(v396[0]) = v396[0] & 0x7F | (*((_QWORD *)v390 + v76 + v77 + 4) << 7);
            v79 = v427 & 0xFFFE | *((_QWORD *)v390 + v76 + v77 + 5) & 1;
            v427 = v427 & 0xFFFE | *((_QWORD *)v390 + v76 + v77 + 5) & 1;
            v427 = v79 & 0xFFFD | (2 * (*((_QWORD *)v390 + v76 + v77 + 6) & 1));
            v427 = v427 & 0xFFF7 | (8 * (*((_QWORD *)v390 + v76 + v77 + 7) & 1));
            v427 = v427 & 0xFFEF | (16 * (*((_QWORD *)v390 + v76 + v77 + 8) & 1));
            v80 = *((unsigned int *)v390 + 2 * v76 + 2 * v77 + 18);
            sub_22E793964(v379, (uint64_t *)v390 + v76 + v77 + 10, (uint64_t *)v390 + v76 + v77 + v80 + 10, v80);
            if (SHIBYTE(v379[2]) >= 0)
              v81 = v379;
            else
              v81 = (void **)v379[0];
            if (SHIBYTE(v379[2]) >= 0)
              v82 = (void *)(HIBYTE(v379[2]) & 0x7F);
            else
              v82 = v379[1];
            v83 = (*(uint64_t (**)(uint64_t, void **, void **, void *, BOOL))(*(_QWORD *)v372 + 72))(v372, v393, v81, v82, (v371 & 8) == 0);
            if (SHIBYTE(v379[2]) < 0)
              operator delete(v379[0]);
            sub_22E6C656C((uint64_t)v393);
            v15 = 0;
            if (v83)
              v13 = 5;
            else
              v13 = v13;
            v5 = v74;
            goto LABEL_105;
          case 4:
            if ((a3 & 1) != 0)
              goto LABEL_104;
            v366 = v13;
            v369 = a3;
            *(_OWORD *)v393 = 0u;
            memset(v394, 0, 56);
            *(_DWORD *)&v394[56] = 1;
            memset(&v394[64], 0, 79);
            memset(&v394[152], 0, 21);
            *(_QWORD *)&v394[144] = &v394[152];
            *(_DWORD *)&v394[176] = 16777472;
            v85 = 1;
            v394[180] = 1;
            v401 = 0;
            LOWORD(v402[0]) = 0;
            v402[1] = 0;
            v397 = 0;
            memset(v396, 0, sizeof(v396));
            v395 = 0u;
            memset(v399, 0, 20);
            v86 = v390;
            v87 = *(_DWORD *)v390;
            if (!*(_DWORD *)v390)
              goto LABEL_132;
            break;
          default:
LABEL_104:
            v15 = 0;
            goto LABEL_105;
        }
        do
        {
          v88 = v85 + 1;
          v89 = *((_QWORD *)v390 + v85);
          sub_22E793964(__src, (uint64_t *)v390 + v88, (uint64_t *)v390 + v88 + v89, v89);
          v90 = v88 + v89;
          v91 = *((_QWORD *)v390 + v90) != 0;
          if (SHIBYTE(v377) < 0)
          {
            sub_22E3BB2B4(__dst, __src[0], (unint64_t)__src[1]);
          }
          else
          {
            *(_OWORD *)__dst = *(_OWORD *)__src;
            __dst[2] = v377;
          }
          LOBYTE(v384) = v91;
          v92 = (char *)v393[1];
          v93 = *(_QWORD *)v394;
          if (v393[1] >= (void *)*(_QWORD *)v394)
          {
            v95 = (char *)v393[0];
            v96 = ((char *)v393[1] - (char *)v393[0]) >> 5;
            v97 = v96 + 1;
            if ((unint64_t)(v96 + 1) >> 59)
LABEL_265:
              abort();
            if ((uint64_t)(*(_QWORD *)v394 - (unint64_t)v393[0]) >> 4 > v97)
              v97 = (uint64_t)(*(_QWORD *)v394 - (unint64_t)v393[0]) >> 4;
            if (*(_QWORD *)v394 - (unint64_t)v393[0] >= 0x7FFFFFFFFFFFFFE0)
              v98 = 0x7FFFFFFFFFFFFFFLL;
            else
              v98 = v97;
            *(_QWORD *)&v380 = 0;
            *((_QWORD *)&v380 + 1) = v394;
            if (v98 >> 59)
LABEL_266:
              sub_22E3B3F8C();
            v99 = (char *)operator new(32 * v98);
            v100 = (void **)&v99[32 * v96];
            *(_OWORD *)v100 = *(_OWORD *)__dst;
            v100[2] = __dst[2];
            memset(__dst, 0, sizeof(__dst));
            *((_BYTE *)v100 + 24) = v91;
            if (v92 == v95)
            {
              v103 = vdupq_n_s64((unint64_t)v92);
              v101 = &v99[32 * v96];
            }
            else
            {
              v101 = &v99[32 * v96];
              do
              {
                v102 = *((_OWORD *)v92 - 2);
                *((_QWORD *)v101 - 2) = *((_QWORD *)v92 - 2);
                *((_OWORD *)v101 - 2) = v102;
                *((_QWORD *)v92 - 3) = 0;
                *((_QWORD *)v92 - 2) = 0;
                *((_QWORD *)v92 - 4) = 0;
                *(v101 - 8) = *(v92 - 8);
                v101 -= 32;
                v92 -= 32;
              }
              while (v92 != v95);
              v103 = *(int64x2_t *)v393;
              v93 = *(_QWORD *)v394;
            }
            v104 = v100 + 4;
            v393[0] = v101;
            v393[1] = v100 + 4;
            *(int64x2_t *)&v379[1] = v103;
            *(_QWORD *)v394 = &v99[32 * v98];
            *(_QWORD *)&v380 = v93;
            v379[0] = (void *)v103.i64[0];
            sub_22E3B3F98((uint64_t)v379);
            v393[1] = v104;
            if (SHIBYTE(__dst[2]) < 0)
              operator delete(__dst[0]);
          }
          else
          {
            v94 = *(_OWORD *)__dst;
            *((void **)v393[1] + 2) = __dst[2];
            *(_OWORD *)v92 = v94;
            memset(__dst, 0, sizeof(__dst));
            v92[24] = (char)v384;
            v393[1] = v92 + 32;
          }
          if (SHIBYTE(v377) < 0)
            operator delete(__src[0]);
          v85 = v90 + 1;
          --v87;
        }
        while (v87);
        v86 = v390;
LABEL_132:
        v105 = v85 + 1;
        v106 = v86[v85];
        if ((_DWORD)v106)
        {
          do
          {
            v107 = v105 + 1;
            v108 = *((_QWORD *)v390 + v105);
            sub_22E793964(__dst, (uint64_t *)v390 + v107, (uint64_t *)v390 + v107 + v108, v108);
            v109 = *(_OWORD **)&v394[16];
            v110 = *(_QWORD *)&v394[24];
            if (*(_QWORD *)&v394[16] >= *(_QWORD *)&v394[24])
            {
              v112 = *(_OWORD **)&v394[8];
              v113 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v394[16] - *(_QWORD *)&v394[8]) >> 3);
              v114 = v113 + 1;
              if (v113 + 1 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_265;
              if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v394[24] - *(_QWORD *)&v394[8]) >> 3) > v114)
                v114 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v394[24] - *(_QWORD *)&v394[8]) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v394[24] - *(_QWORD *)&v394[8]) >> 3) >= 0x555555555555555)
                v115 = 0xAAAAAAAAAAAAAAALL;
              else
                v115 = v114;
              *((_QWORD *)&v380 + 1) = &v394[24];
              if (v115)
              {
                if (v115 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_266;
                v116 = (char *)operator new(24 * v115);
              }
              else
              {
                v116 = 0;
              }
              v117 = (void **)&v116[24 * v113];
              *(_OWORD *)v117 = *(_OWORD *)__dst;
              v117[2] = __dst[2];
              memset(__dst, 0, sizeof(__dst));
              if (v109 == v112)
              {
                v120 = vdupq_n_s64((unint64_t)v109);
                v118 = &v116[24 * v113];
              }
              else
              {
                v118 = &v116[24 * v113];
                do
                {
                  v119 = *(_OWORD *)((char *)v109 - 24);
                  *((_QWORD *)v118 - 1) = *((_QWORD *)v109 - 1);
                  *(_OWORD *)(v118 - 24) = v119;
                  v118 -= 24;
                  *((_QWORD *)v109 - 2) = 0;
                  *((_QWORD *)v109 - 1) = 0;
                  *((_QWORD *)v109 - 3) = 0;
                  v109 = (_OWORD *)((char *)v109 - 24);
                }
                while (v109 != v112);
                v120 = *(int64x2_t *)&v394[8];
                v110 = *(_QWORD *)&v394[24];
              }
              v121 = (char *)(v117 + 3);
              *(_QWORD *)&v394[8] = v118;
              *(_QWORD *)&v394[16] = v117 + 3;
              *(int64x2_t *)&v379[1] = v120;
              *(_QWORD *)&v394[24] = &v116[24 * v115];
              *(_QWORD *)&v380 = v110;
              v379[0] = (void *)v120.i64[0];
              sub_22E3B8B94((uint64_t)v379);
              *(_QWORD *)&v394[16] = v121;
              if (SHIBYTE(__dst[2]) < 0)
                operator delete(__dst[0]);
            }
            else
            {
              v111 = *(_OWORD *)__dst;
              *(void **)(*(_QWORD *)&v394[16] + 16) = __dst[2];
              *v109 = v111;
              *(_QWORD *)&v394[16] = (char *)v109 + 24;
            }
            v105 = v107 + v108;
            LODWORD(v106) = v106 - 1;
          }
          while ((_DWORD)v106);
          v86 = v390;
        }
        v122 = v105 + 1;
        v123 = v86[v105];
        if ((_DWORD)v123)
        {
          do
          {
            v124 = v122 + 1;
            v125 = *((_QWORD *)v390 + v122);
            sub_22E793964(__dst, (uint64_t *)v390 + v124, (uint64_t *)v390 + v124 + v125, v125);
            v126 = *(_OWORD **)&v394[40];
            v127 = *(_QWORD *)&v394[48];
            if (*(_QWORD *)&v394[40] >= *(_QWORD *)&v394[48])
            {
              v129 = *(_OWORD **)&v394[32];
              v130 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v394[40] - *(_QWORD *)&v394[32]) >> 3);
              v131 = v130 + 1;
              if (v130 + 1 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_265;
              if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v394[48] - *(_QWORD *)&v394[32]) >> 3) > v131)
                v131 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v394[48] - *(_QWORD *)&v394[32]) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v394[48] - *(_QWORD *)&v394[32]) >> 3) >= 0x555555555555555)
                v132 = 0xAAAAAAAAAAAAAAALL;
              else
                v132 = v131;
              *((_QWORD *)&v380 + 1) = &v394[48];
              if (v132)
              {
                if (v132 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_266;
                v133 = (char *)operator new(24 * v132);
              }
              else
              {
                v133 = 0;
              }
              v134 = (void **)&v133[24 * v130];
              *(_OWORD *)v134 = *(_OWORD *)__dst;
              v134[2] = __dst[2];
              memset(__dst, 0, sizeof(__dst));
              if (v126 == v129)
              {
                v137 = vdupq_n_s64((unint64_t)v126);
                v135 = &v133[24 * v130];
              }
              else
              {
                v135 = &v133[24 * v130];
                do
                {
                  v136 = *(_OWORD *)((char *)v126 - 24);
                  *((_QWORD *)v135 - 1) = *((_QWORD *)v126 - 1);
                  *(_OWORD *)(v135 - 24) = v136;
                  v135 -= 24;
                  *((_QWORD *)v126 - 2) = 0;
                  *((_QWORD *)v126 - 1) = 0;
                  *((_QWORD *)v126 - 3) = 0;
                  v126 = (_OWORD *)((char *)v126 - 24);
                }
                while (v126 != v129);
                v137 = *(int64x2_t *)&v394[32];
                v127 = *(_QWORD *)&v394[48];
              }
              v138 = (char *)(v134 + 3);
              *(_QWORD *)&v394[32] = v135;
              *(_QWORD *)&v394[40] = v134 + 3;
              *(int64x2_t *)&v379[1] = v137;
              *(_QWORD *)&v394[48] = &v133[24 * v132];
              *(_QWORD *)&v380 = v127;
              v379[0] = (void *)v137.i64[0];
              sub_22E3B8B94((uint64_t)v379);
              *(_QWORD *)&v394[40] = v138;
              if (SHIBYTE(__dst[2]) < 0)
                operator delete(__dst[0]);
            }
            else
            {
              v128 = *(_OWORD *)__dst;
              *(void **)(*(_QWORD *)&v394[40] + 16) = __dst[2];
              *v126 = v128;
              *(_QWORD *)&v394[40] = (char *)v126 + 24;
            }
            v122 = v124 + v125;
            LODWORD(v123) = v123 - 1;
          }
          while ((_DWORD)v123);
          v86 = v390;
        }
        v394[56] = v86[v122] != 0;
        v394[57] = v86[v122 + 1] != 0;
        v139 = v122 + 3;
        v140 = v86[v122 + 2];
        sub_22E793964(v379, &v86[v139], &v86[v139 + v140], v140);
        if ((v394[111] & 0x80000000) != 0)
          operator delete(*(void **)&v394[88]);
        *(_OWORD *)&v394[88] = *(_OWORD *)v379;
        *(void **)&v394[104] = v379[2];
        v399[0] = *((_QWORD *)v390 + v139 + v140);
        v12 = v373;
        if (*(char *)(v364 + 23) < 0)
        {
          **(_BYTE **)v364 = 0;
          *(_QWORD *)(v364 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v364 = 0;
          *(_BYTE *)(v364 + 23) = 0;
        }
        v141 = (*(uint64_t (**)(uint64_t, void **, BOOL))(*(_QWORD *)v372 + 88))(v372, v393, (v371 & 8) == 0);
        sub_22E6C6B18((uint64_t)v393);
        v15 = 0;
        if (v141)
          v13 = 5;
        else
          v13 = v366;
        a3 = v369;
        v5 = &jpt_22E76E824;
      }
LABEL_105:
      if ((v387 & 1) != 0)
      {
        v84 = v386;
        v386 = 0;
        if (v84)
          (*(void (**)(void *))(*(_QWORD *)v84 + 8))(v84);
      }
    }
LABEL_16:
    if ((v389 & 1) != 0)
    {
      v17 = v388;
      v388 = 0;
      if (v17)
        (*(void (**)(void *))(*(_QWORD *)v17 + 8))(v17);
    }
  }
  while (!v15);
  if (v390 != v392)
    free(v390);
  return v12;
}

uint64_t sub_22E771844(uint64_t a1, _BYTE *a2, size_t a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned int a11)
{
  uint64_t i;
  unsigned int v14;
  size_t v15;
  void *v16;
  char v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  void *v36;
  size_t v37;
  char v38;
  void *v39;
  size_t v40;
  unsigned __int8 *v41;
  _QWORD *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  void *v46;
  char v47;
  int v48;
  void *v49;
  size_t v50;
  size_t v51;
  char v52;
  _BOOL4 v53;
  int v54;
  unsigned int v55;
  uint64_t v57;
  char *v58;
  size_t v59;
  void *v60;
  char v61;
  int v62;
  void *v63;
  unsigned int v64;
  unint64_t v65;
  void **v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int *v71;
  unsigned int v72;
  int v73;
  int v74;
  uint64_t v75;
  void *v76;
  int v77;
  void *v78;
  uint64_t v79;
  char v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  _BOOL8 v88;
  void **v89;
  void *v90;
  __int128 v91;
  _QWORD *v92;
  char v93;
  uint64_t v94;
  char v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  BOOL v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  int v106;
  unint64_t v107;
  unint64_t v109;
  _BYTE *v110;
  char *v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  void **v125;
  size_t v126;
  char v127;
  BOOL v128;
  const void **v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  size_t v136;
  void *v137;
  unsigned int v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  unsigned int v145;
  uint64_t v146;
  unsigned int v147;
  char *v148;
  size_t v149;
  uint64_t v150;
  unsigned int v151;
  unsigned int v152;
  uint64_t v153;
  unsigned int v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  __int128 *v159;
  uint64_t v160;
  __int128 *v161;
  uint64_t v162;
  __int128 *v163;
  int64_t v164;
  uint64_t v165;
  unint64_t v166;
  __int128 *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  int64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unsigned __int8 *v176;
  _QWORD *v177;
  uint64_t v178;
  __int128 *v179;
  size_t v180;
  unsigned __int8 *v181;
  _QWORD *v182;
  uint64_t v183;
  const std::string::value_type *v184;
  std::string::size_type v185;
  std::string *v186;
  std::string::size_type v187;
  void **v188;
  size_t v189;
  char v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char v194;
  BOOL v195;
  void *v196;
  size_t v197;
  size_t v198;
  char v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  unsigned __int8 *v203;
  _QWORD *v204;
  uint64_t v205;
  char v206;
  BOOL v207;
  void *v208;
  size_t v209;
  size_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  void *v215;
  void *v216;
  void **v217;
  uint64_t v218;
  uint64_t v219;
  char v220;
  BOOL v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  void *v225;
  void *v226;
  void *v227;
  void **v228;
  char *v229;
  int v230;
  uint64_t v231;
  size_t v232;
  size_t v233;
  void *v234;
  void **v235;
  size_t v236;
  size_t v237;
  void *v238;
  void **v239;
  int64_t v240;
  uint64_t v241;
  uint64_t v242;
  void *v243;
  void **v244;
  __int128 v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  char v250;
  BOOL v251;
  void *v252;
  size_t v253;
  size_t v254;
  char v255;
  BOOL v256;
  void *v257;
  size_t v258;
  size_t v259;
  unsigned __int8 *v260;
  _QWORD *v261;
  uint64_t v262;
  char v263;
  BOOL v264;
  void *v265;
  size_t v266;
  size_t v267;
  uint64_t v268;
  char v269;
  BOOL v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  size_t v275;
  size_t v276;
  size_t v277;
  size_t v278;
  uint64_t v279;
  uint64_t v280;
  char v281;
  BOOL v282;
  const void **v283;
  unint64_t v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  void **v292;
  void **v293;
  unint64_t v294;
  unint64_t v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  int v299;
  unint64_t v300;
  char *v301;
  char *v302;
  __int128 v303;
  __int128 v304;
  void **v305;
  void **v306;
  void *v307;
  unint64_t v308;
  size_t v309;
  char v310;
  __int128 *p_dst;
  uint64_t v312;
  _BOOL4 v313;
  int v314;
  int64_t v315;
  uint64_t v316;
  uint64_t v317;
  unint64_t v318;
  int64_t v319;
  char v320;
  BOOL v321;
  const void *v322;
  size_t v323;
  size_t v324;
  unint64_t v325;
  uint64_t v326;
  int64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  __int128 *v331;
  size_t v332;
  int64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  BOOL v337;
  uint64_t v338;
  int64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  char v343;
  BOOL v344;
  void *v345;
  size_t v346;
  size_t v347;
  void **v348;
  char v349;
  void *v350;
  size_t v351;
  size_t *v352;
  uint64_t v353;
  char v354;
  BOOL v355;
  void *v356;
  size_t v357;
  size_t v358;
  unsigned __int8 *v359;
  _QWORD *v360;
  uint64_t v361;
  uint64_t v362;
  unsigned int v363;
  unsigned int v364;
  uint64_t v365;
  __int128 *v366;
  size_t v367;
  char v368;
  std::string *v369;
  std::string::size_type v370;
  void **v371;
  size_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  void **v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  char v381;
  BOOL v382;
  void *v383;
  size_t v384;
  size_t v385;
  char v386;
  BOOL v387;
  void *v388;
  size_t v389;
  size_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  char v394;
  BOOL v395;
  void *v396;
  size_t v397;
  size_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  char v402;
  BOOL v403;
  void *v404;
  size_t v405;
  size_t v406;
  char v407;
  BOOL v408;
  void *v409;
  size_t v410;
  size_t v411;
  size_t *v412;
  uint64_t v413;
  __int128 *v414;
  size_t v415;
  char v416;
  BOOL v417;
  void *v418;
  size_t v419;
  size_t v420;
  unsigned __int8 *v421;
  _QWORD *v422;
  uint64_t v423;
  int64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  void *v428;
  size_t v429;
  void **v430;
  _QWORD *v431;
  void **v432;
  int64_t *v433;
  void **v434;
  unint64_t *v435;
  unint64_t v436;
  int64_t *v437;
  int64_t *v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t *v441;
  uint64_t v442;
  uint64_t v443;
  int v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  char v448;
  BOOL v449;
  void *v450;
  size_t v451;
  size_t v452;
  unsigned __int8 *v453;
  uint64_t v454;
  uint64_t v455;
  unint64_t v456;
  size_t *v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  char v463;
  BOOL v464;
  void *v465;
  size_t v466;
  size_t v467;
  unsigned __int8 *v468;
  uint64_t v469;
  uint64_t v470;
  unint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  int v476;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  BOOL v482;
  char *v483;
  uint64_t v484;
  int Key;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  size_t v502;
  unsigned __int8 *v503;
  _QWORD *v504;
  uint64_t v505;
  void *v506;
  size_t v507;
  char *v509;
  void *v510;
  size_t v511;
  _BOOL8 v512;
  uint64_t v513;
  _BOOL4 v514;
  int v515;
  void **v516;
  void *v517;
  std::string *v518;
  _BOOL8 v519;
  std::string *__str;
  void **v521;
  void **v522;
  uint64_t v523;
  unsigned int v524;
  unsigned int v525;
  _BYTE *v526;
  size_t v527;
  unint64_t v528;
  unsigned int v529;
  char *v530;
  uint64_t v531;
  llvm::BitstreamCursor *v532;
  void **v533;
  unsigned int v534;
  int v535;
  void *v536;
  uint64_t *v537;
  uint64_t v538;
  char *v539;
  void *v540;
  uint64_t v541;
  _DWORD *v542;
  int v543;
  int v544;
  uint64_t v545;
  uint64_t v546;
  unsigned int v547;
  _QWORD v548[3];
  __int16 v549;
  _BYTE v550[32];
  void *v551;
  size_t v552;
  uint64_t v553;
  uint64_t v554;
  _QWORD v555[3];
  __int16 v556;
  _QWORD v557[3];
  __int16 v558;
  _QWORD v559[3];
  __int16 v560;
  void *__src;
  size_t __len;
  void *__p[2];
  int64_t v564;
  int v565;
  _BYTE v566[24];
  std::string v567;
  void *v568[2];
  uint64_t v569;
  void *v570;
  char v571;
  __int128 v572;
  int v573;
  __int128 v574;
  int v575;
  __int128 v576;
  int v577;
  void *v578;
  char v579;
  void *v580;
  char v581;
  void *v582[2];
  __int128 v583;
  uint64_t v584;
  __n128 v585;
  uint64_t v586;
  char *v587[2];
  uint64_t v588;
  uint64_t v589;
  __int128 __dst;
  uint64_t v591;
  __int16 v592;
  __int128 v593;
  int64_t v594;
  __int128 v595;
  int64_t v596;
  uint64_t v597;

  i = a6;
  v14 = a4;
  v15 = a3;
  v16 = a2;
  v18 = a11;
  v597 = *MEMORY[0x24BDAC8D0];
  v553 = 0;
  v554 = 0;
  v551 = 0;
  v552 = 0;
  v19 = a1 + 144;
  v20 = *(_DWORD *)(a1 + 36);
  v572 = *(_OWORD *)a10;
  v573 = *(_DWORD *)(a10 + 16);
  v21 = sub_22E808B68(a1 + 144, a2, a3, a4, a5, a6, v20, a8, a9, &v572, (void (*)(_QWORD *__return_ptr))sub_22E77BE68, &v554, (uint64_t)&v551);
  switch(v21)
  {
    case 3:
      if ((a11 & 2) != 0)
      {
        v31 = 3;
        goto LABEL_956;
      }
      v23 = *(_QWORD *)(a1 + 104);
      *(_DWORD *)(v23 + 312) = *(_DWORD *)(a1 + 496);
      *(_DWORD *)(v23 + 316) = 906;
      if (*(char *)(v23 + 311) < 0)
      {
        **(_BYTE **)(v23 + 288) = 0;
        *(_QWORD *)(v23 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v23 + 288) = 0;
        *(_BYTE *)(v23 + 311) = 0;
      }
      v493 = v23 + 320;
      v582[0] = (void *)(v23 + 320);
      v582[1] = 0;
      *(_QWORD *)&v583 = v23;
      WORD4(v583) = 1;
      *(_BYTE *)(v23 + 320) = 0;
      *(_DWORD *)(v23 + 664) = 0;
      v497 = *(unsigned int *)(v23 + 776);
      if ((_DWORD)v497)
      {
        v498 = *(_QWORD *)(v23 + 768);
        v499 = 56 * v497;
        do
        {
          if (*(char *)(v498 + v499 - 9) < 0)
            operator delete(*(void **)(v498 + v499 - 32));
          v499 -= 56;
        }
        while (v499);
      }
      goto LABEL_944;
    case 2:
      if ((a11 & 1) != 0)
      {
        v31 = 2;
        goto LABEL_956;
      }
      v23 = *(_QWORD *)(a1 + 104);
      *(_DWORD *)(v23 + 312) = *(_DWORD *)(a1 + 496);
      *(_DWORD *)(v23 + 316) = 905;
      if (*(char *)(v23 + 311) < 0)
      {
        **(_BYTE **)(v23 + 288) = 0;
        *(_QWORD *)(v23 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v23 + 288) = 0;
        *(_BYTE *)(v23 + 311) = 0;
      }
      v493 = v23 + 320;
      v582[0] = (void *)(v23 + 320);
      v582[1] = 0;
      *(_QWORD *)&v583 = v23;
      WORD4(v583) = 1;
      *(_BYTE *)(v23 + 320) = 0;
      *(_DWORD *)(v23 + 664) = 0;
      v494 = *(unsigned int *)(v23 + 776);
      if ((_DWORD)v494)
      {
        v495 = *(_QWORD *)(v23 + 768);
        v496 = 56 * v494;
        do
        {
          if (*(char *)(v495 + v496 - 9) < 0)
            operator delete(*(void **)(v495 + v496 - 32));
          v496 -= 56;
        }
        while (v496);
      }
LABEL_944:
      *(_DWORD *)(v23 + 776) = 0;
      v500 = qword_22F45EDC0[v14];
      v501 = *(unsigned __int8 *)(v23 + 320);
      *(_BYTE *)(v493 + v501 + 1) = 3;
      *(_BYTE *)(v23 + 320) = v501 + 1;
      *(_QWORD *)(v493 + 8 * v501 + 16) = v500;
      sub_22E3B89A8((unsigned __int8 **)v582, v16, v15);
      if (v553 >= 0)
        v502 = HIBYTE(v553) & 0x7F;
      else
        v502 = v552;
      v503 = (unsigned __int8 *)v582[0];
      if (!v582[0])
      {
        v503 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v582[1]);
        v582[0] = v503;
      }
      v503[*v503 + 1] = 2;
      v504 = v582[0];
      v505 = *(unsigned __int8 *)v582[0];
      *(_BYTE *)v582[0] = v505 + 1;
      v504[v505 + 2] = v502 != 0;
      if (v553 >= 0)
        v506 = &v551;
      else
        v506 = v551;
      if (v553 >= 0)
        v507 = HIBYTE(v553) & 0x7F;
      else
        v507 = v552;
      sub_22E3B89A8((unsigned __int8 **)v582, v506, v507);
      sub_22E3BB0B8((uint64_t)v582);
      v31 = 1;
      goto LABEL_956;
    case 0:
      v22 = *(_QWORD *)(a1 + 104);
      *(_DWORD *)(v22 + 312) = *(_DWORD *)(a1 + 496);
      *(_DWORD *)(v22 + 316) = 946;
      if (*(char *)(v22 + 311) < 0)
      {
        **(_BYTE **)(v22 + 288) = 0;
        *(_QWORD *)(v22 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v22 + 288) = 0;
        *(_BYTE *)(v22 + 311) = 0;
      }
      v582[0] = (void *)(v22 + 320);
      v582[1] = 0;
      *(_QWORD *)&v583 = v22;
      WORD4(v583) = 1;
      *(_BYTE *)(v22 + 320) = 0;
      *(_DWORD *)(v22 + 664) = 0;
      v32 = *(unsigned int *)(v22 + 776);
      if ((_DWORD)v32)
      {
        v33 = *(_QWORD *)(v22 + 768);
        v34 = 56 * v32;
        do
        {
          if (*(char *)(v33 + v34 - 9) < 0)
            operator delete(*(void **)(v33 + v34 - 32));
          v34 -= 56;
        }
        while (v34);
      }
      *(_DWORD *)(v22 + 776) = 0;
      v35 = *(_BYTE *)(v554 + 103);
      if (v35 >= 0)
        v36 = (void *)(v554 + 80);
      else
        v36 = *(void **)(v554 + 80);
      if (v35 >= 0)
        v37 = v35 & 0x7F;
      else
        v37 = *(_QWORD *)(v554 + 88);
      sub_22E3B89A8((unsigned __int8 **)v582, v36, v37);
      v38 = *(_BYTE *)(v554 + 31);
      if (v38 >= 0)
        v39 = (void *)(v554 + 8);
      else
        v39 = *(void **)(v554 + 8);
      if (v38 >= 0)
        v40 = v38 & 0x7F;
      else
        v40 = *(_QWORD *)(v554 + 16);
      sub_22E3B89A8((unsigned __int8 **)v582, v39, v40);
      v41 = (unsigned __int8 *)v582[0];
      if (!v582[0])
      {
        v41 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v582[1]);
        v582[0] = v41;
      }
      v41[*v41 + 1] = 2;
      v42 = v582[0];
      v43 = *(unsigned __int8 *)v582[0];
      *(_BYTE *)v582[0] = v43 + 1;
      v42[v43 + 2] = i != 0;
      if (i)
      {
        v46 = *(void **)(i + 80);
        v45 = i + 80;
        v44 = v46;
        v47 = *(_BYTE *)(v45 + 23);
        v48 = v47;
        if (v47 >= 0)
          v49 = (void *)v45;
        else
          v49 = v44;
        v50 = v47 & 0x7F;
        if (v48 >= 0)
          v51 = v50;
        else
          v51 = *(_QWORD *)(v45 + 8);
      }
      else
      {
        v51 = 0;
        v49 = 0;
      }
      sub_22E3B89A8((unsigned __int8 **)v582, v49, v51);
      sub_22E3BB0B8((uint64_t)v582);
      v31 = 0;
      goto LABEL_956;
  }
  v541 = v19;
  v543 = a5;
  v546 = a7;
  v24 = v554;
  v25 = v554 + 392;
  v26 = *(_QWORD *)(a1 + 96);
  llvm::MemoryBufferRef::MemoryBufferRef((llvm::MemoryBufferRef *)v550, *(const llvm::MemoryBuffer **)(v554 + 344));
  v582[0] = (void *)(*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v26 + 24))(v26, v550);
  v582[1] = v27;
  v583 = 0uLL;
  v584 = 0x200000000;
  v585 = 0uLL;
  v586 = 0;
  v587[0] = (char *)&v588;
  v587[1] = (char *)0x800000000;
  v589 = 0;
  *(_DWORD *)(v24 + 424) = 0;
  v29 = *(_OWORD *)v582;
  v28 = v583;
  *(_DWORD *)(v24 + 428) = 2;
  *(_OWORD *)v25 = v29;
  *(_OWORD *)(v25 + 16) = v28;
  sub_22E78D0A8((uint64_t *)(v24 + 432), &v585);
  sub_22E78D1A4(v24 + 456, (uint64_t)v587);
  *(_QWORD *)(v24 + 728) = v589;
  sub_22E746F74(v587);
  if (v585.n128_u64[0])
  {
    sub_22E3B485C((uint64_t *)&v585);
    operator delete((void *)v585.n128_u64[0]);
  }
  *(_QWORD *)(v24 + 352) = 8
                         * (*(_QWORD *)(*(_QWORD *)(v24 + 344) + 16) - *(_QWORD *)(*(_QWORD *)(v24 + 344) + 8));
  sub_22E77C120(__p, v25);
  if (__p[0])
  {
    v30 = *(_QWORD *)(a1 + 104);
    *(_DWORD *)(v30 + 312) = *(_DWORD *)(a1 + 496);
    *(_DWORD *)(v30 + 316) = 904;
    if (*(char *)(v30 + 311) < 0)
    {
      **(_BYTE **)(v30 + 288) = 0;
      *(_QWORD *)(v30 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v30 + 288) = 0;
      *(_BYTE *)(v30 + 311) = 0;
    }
    v487 = v30 + 320;
    v582[0] = (void *)(v30 + 320);
    v582[1] = 0;
    *(_QWORD *)&v583 = v30;
    WORD4(v583) = 1;
    *(_BYTE *)(v30 + 320) = 0;
    *(_DWORD *)(v30 + 664) = 0;
    v488 = *(unsigned int *)(v30 + 776);
    if ((_DWORD)v488)
    {
      v489 = *(_QWORD *)(v30 + 768);
      v490 = 56 * v488;
      do
      {
        if (*(char *)(v489 + v490 - 9) < 0)
          operator delete(*(void **)(v489 + v490 - 32));
        v490 -= 56;
      }
      while (v490);
    }
    *(_DWORD *)(v30 + 776) = 0;
    v491 = qword_22F45EDC0[v14];
    v492 = *(unsigned __int8 *)(v30 + 320);
    *(_BYTE *)(v487 + v492 + 1) = 3;
    *(_BYTE *)(v30 + 320) = v492 + 1;
    *(_QWORD *)(v487 + 8 * v492 + 16) = v491;
    sub_22E3B89A8((unsigned __int8 **)v582, v16, v15);
    sub_22F1CB318((unsigned __int8 **)v582, (char **)__p);
    sub_22E3BB0B8((uint64_t)v582);
    if (__p[0])
      (*(void (**)(void *))(*(_QWORD *)__p[0] + 8))(__p[0]);
    v484 = *(_QWORD *)(a1 + 272);
    v31 = 1;
    goto LABEL_930;
  }
  v535 = 0;
  v52 = 0;
  v526 = (_BYTE *)(a1 + 7319);
  v53 = v14 != 0;
  if (v14)
    v54 = 1;
  else
    v54 = 3;
  v512 = i == 0;
  v519 = i != 0;
  if ((a11 & 2) == 0)
    v53 = 1;
  v514 = v53;
  v515 = v54;
  v542 = (_DWORD *)(v24 + 4);
  v532 = (llvm::BitstreamCursor *)(v24 + 792);
  v533 = (void **)(v24 + 80);
  v521 = (void **)(v24 + 104);
  __str = (std::string *)(v24 + 152);
  v517 = (void *)(i + 80);
  v518 = (std::string *)(v24 + 128);
  v55 = a11 & 0xFFFFFFFE;
  if ((a11 & 2) != 0)
    v55 = a11;
  v534 = v55;
  v516 = (void **)(a1 + 7296);
  v522 = (void **)(v24 + 184);
  v513 = i + 8;
  v547 = 1;
  v545 = i;
  do
  {
    sub_22E748020(v25, 0, (uint64_t)&v570);
    if ((v571 & 1) != 0)
    {
      v60 = v570;
      v570 = 0;
      v582[0] = v60;
LABEL_62:
      sub_22E769A6C((uint64_t *)a1, (uint64_t **)v582);
      if (v582[0])
        (*(void (**)(void *))(*(_QWORD *)v582[0] + 8))(v582[0]);
      goto LABEL_64;
    }
    if (v570 <= 3 && (_DWORD)v570 != 2)
    {
      v57 = a1;
      v58 = "invalid record at top-level of AST file";
      v59 = 39;
      goto LABEL_60;
    }
    if (HIDWORD(v570) == 8)
    {
      if ((v52 & 1) != 0)
      {
        v582[0] = (void *)v554;
        v582[1] = (void *)i;
        LODWORD(v583) = v543;
        v64 = *(_DWORD *)(v546 + 8);
        v65 = *(_QWORD *)v546;
        if (v64 >= *(_DWORD *)(v546 + 12))
        {
          v482 = v65 + 24 * v64 > (unint64_t)v582;
          if (v65 <= (unint64_t)v582 && v482)
          {
            v483 = (char *)v582 - v65;
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v65 = *(_QWORD *)v546;
            v66 = (void **)&v483[*(_QWORD *)v546];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v65 = *(_QWORD *)v546;
            v66 = v582;
          }
          i = v545;
          v18 = a11;
        }
        else
        {
          v66 = v582;
        }
        v61 = 0;
        v547 = 0;
        v67 = v65 + 24 * *(unsigned int *)(v546 + 8);
        v68 = *(_OWORD *)v66;
        *(_QWORD *)(v67 + 16) = v66[2];
        *(_OWORD *)v67 = v68;
        ++*(_DWORD *)(v546 + 8);
        v535 = 1;
        v52 = 1;
        goto LABEL_67;
      }
      if ((v18 & 4) == 0)
      {
        v69 = *(_QWORD *)(a1 + 104);
        *(_DWORD *)(v69 + 312) = *(_DWORD *)(a1 + 496);
        *(_DWORD *)(v69 + 316) = 936;
        if (*(char *)(v69 + 311) < 0)
        {
          **(_BYTE **)(v69 + 288) = 0;
          *(_QWORD *)(v69 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v69 + 288) = 0;
          *(_BYTE *)(v69 + 311) = 0;
        }
        v548[0] = v69 + 320;
        v548[1] = 0;
        v548[2] = v69;
        v549 = 1;
        *(_BYTE *)(v69 + 320) = 0;
        *(_DWORD *)(v69 + 664) = 0;
        v473 = *(unsigned int *)(v69 + 776);
        if ((_DWORD)v473)
        {
          v474 = *(_QWORD *)(v69 + 768);
          v475 = 56 * v473;
          do
          {
            if (*(char *)(v474 + v475 - 9) < 0)
              operator delete(*(void **)(v474 + v475 - 32));
            v475 -= 56;
          }
          while (v475);
        }
        *(_DWORD *)(v69 + 776) = 0;
        sub_22E3BB0B8((uint64_t)v548);
        v52 = 0;
        v61 = 0;
        v476 = 4;
LABEL_891:
        v547 = v476;
        v18 = a11;
        goto LABEL_67;
      }
      v52 = 0;
      v61 = 0;
      v62 = 4;
LABEL_66:
      v547 = v62;
      goto LABEL_67;
    }
    if (HIDWORD(v570) == 19)
    {
      v57 = a1;
      v58 = "malformed block record in AST file";
      v59 = 34;
LABEL_60:
      sub_22E769C10(v57, v58, v59);
LABEL_64:
      v61 = 0;
LABEL_65:
      v62 = 1;
      goto LABEL_66;
    }
    if (HIDWORD(v570) != 15)
    {
      sub_22E746760(v25, (uint64_t *)v582);
      if (!v582[0])
      {
        v525 = v14;
LABEL_86:
        v61 = 1;
        goto LABEL_883;
      }
      goto LABEL_62;
    }
    llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)v25, 15, 0);
    if (v582[0])
    {
      sub_22E769A6C((uint64_t *)a1, (uint64_t **)v582);
      if (v582[0])
        (*(void (**)(void *))(*(_QWORD *)v582[0] + 8))(v582[0]);
      v61 = 0;
      v52 = 1;
      goto LABEL_65;
    }
    v70 = *(_DWORD *)(a1 + 7320);
    v510 = v16;
    v511 = v15;
    v525 = v14;
    if (!v70)
      goto LABEL_97;
    v71 = (unsigned int *)(a1 + 500);
    if (!*(_BYTE *)(a1 + 504))
      v71 = (unsigned int *)(v24 + 4);
    v72 = *v71;
    if (v72 <= 5)
    {
      if (((1 << v72) & 0x1C) != 0)
        v73 = *(_DWORD *)(a1 + 7320) & 1;
      else
        v73 = (v70 >> 1) & 1;
      v544 = v73;
    }
    else
    {
LABEL_97:
      v544 = 0;
    }
    v74 = 0;
    v527 = 0;
    v524 = 0;
    LODWORD(v523) = 0;
    v582[0] = &v583;
    v582[1] = (void *)0x4000000000;
    v75 = 1;
    do
    {
      sub_22E748020(v25, 0, (uint64_t)&v580);
      if ((v581 & 1) != 0)
      {
        v76 = v580;
        v580 = 0;
        __p[0] = v76;
        goto LABEL_107;
      }
      if ((_DWORD)v580 != 2)
      {
        if ((_DWORD)v580 != 1)
        {
          if (!(_DWORD)v580)
          {
LABEL_105:
            sub_22E769C10(a1, "malformed block record in AST file", 0x22uLL);
LABEL_109:
            v77 = 1;
            v75 = 1;
            goto LABEL_110;
          }
          LODWORD(v582[1]) = 0;
          __len = 0;
          __src = 0;
          llvm::BitstreamCursor::readRecord();
          if ((v579 & 1) == 0)
          {
            switch((int)v578)
            {
              case 1:
                v92 = v582[0];
                v93 = v544;
                if (*(_QWORD *)v582[0] == 25)
                  v93 = 1;
                if ((v93 & 1) == 0)
                {
                  if ((a11 & 4) == 0)
                  {
                    if (*(_QWORD *)v582[0] >= 0x19uLL)
                      v230 = 935;
                    else
                      v230 = 936;
                    v231 = *(_QWORD *)(a1 + 104);
                    *(_DWORD *)(v231 + 312) = *(_DWORD *)(a1 + 496);
                    *(_DWORD *)(v231 + 316) = v230;
                    if (*(char *)(v231 + 311) < 0)
                    {
                      **(_BYTE **)(v231 + 288) = 0;
                      *(_QWORD *)(v231 + 296) = 0;
                    }
                    else
                    {
                      *(_BYTE *)(v231 + 288) = 0;
                      *(_BYTE *)(v231 + 311) = 0;
                    }
                    v559[0] = v231 + 320;
                    v559[1] = 0;
                    v559[2] = v231;
                    v560 = 1;
                    *(_BYTE *)(v231 + 320) = 0;
                    *(_DWORD *)(v231 + 664) = 0;
                    v289 = *(unsigned int *)(v231 + 776);
                    if ((_DWORD)v289)
                    {
                      v290 = *(_QWORD *)(v231 + 768);
                      v291 = 56 * v289;
                      do
                      {
                        if (*(char *)(v290 + v291 - 9) < 0)
                          operator delete(*(void **)(v290 + v291 - 32));
                        v291 -= 56;
                      }
                      while (v291);
                    }
                    *(_DWORD *)(v231 + 776) = 0;
                    sub_22E3BB0B8((uint64_t)v559);
                  }
                  v97 = 4;
                  goto LABEL_797;
                }
                v94 = *((_QWORD *)v582[0] + 6);
                v95 = v544;
                if (!v94)
                  v95 = 1;
                if ((v95 & 1) != 0)
                {
                  if (!v94)
                    goto LABEL_499;
                }
                else
                {
                  if ((a11 & 0x12) == 0x12 && sub_22E808214(*(_QWORD *)(a1 + 272)) != 3)
                    goto LABEL_796;
                  if (!*(_BYTE *)(a1 + 7324))
                  {
                    v316 = *(_QWORD *)(a1 + 104);
                    *(_DWORD *)(v316 + 312) = *(_DWORD *)(a1 + 496);
                    *(_DWORD *)(v316 + 316) = 937;
                    if (*(char *)(v316 + 311) < 0)
                    {
                      **(_BYTE **)(v316 + 288) = 0;
                      *(_QWORD *)(v316 + 296) = 0;
                    }
                    else
                    {
                      *(_BYTE *)(v316 + 288) = 0;
                      *(_BYTE *)(v316 + 311) = 0;
                    }
                    v557[0] = v316 + 320;
                    v557[1] = 0;
                    v557[2] = v316;
                    v558 = 1;
                    *(_BYTE *)(v316 + 320) = 0;
                    *(_DWORD *)(v316 + 664) = 0;
                    v334 = *(unsigned int *)(v316 + 776);
                    if ((_DWORD)v334)
                    {
                      v335 = *(_QWORD *)(v316 + 768);
                      v336 = 56 * v334;
                      do
                      {
                        if (*(char *)(v335 + v336 - 9) < 0)
                          operator delete(*(void **)(v335 + v336 - 32));
                        v336 -= 56;
                      }
                      while (v336);
                    }
                    *(_DWORD *)(v316 + 776) = 0;
                    sub_22E3BB0B8((uint64_t)v557);
                    v97 = 6;
                    goto LABEL_797;
                  }
                  v92 = v582[0];
                }
                v279 = *(_QWORD *)(a1 + 104);
                *(_WORD *)(v279 + 168) = 257;
                *(_BYTE *)(v279 + 171) = 1;
LABEL_499:
                v280 = v92[4];
                *(_BYTE *)(v24 + 208) = v280 != 0;
                if (!v280)
                  goto LABEL_562;
                if ((char)*v526 < 0)
                {
                  v308 = *(_QWORD *)(a1 + 7304);
                  if (v308)
                  {
                    sub_22E3BB2B4(__p, *v516, v308);
                    goto LABEL_559;
                  }
                }
                else if (*v526)
                {
                  *(_OWORD *)__p = *(_OWORD *)v516;
                  v564 = *(_QWORD *)(a1 + 7312);
                  goto LABEL_559;
                }
                HIBYTE(v564) = 1;
                LOWORD(__p[0]) = 47;
LABEL_559:
                if (*(char *)(v24 + 127) < 0)
                  operator delete(*v521);
                *(_OWORD *)v521 = *(_OWORD *)__p;
                *(_QWORD *)(v24 + 120) = v564;
                v92 = v582[0];
LABEL_562:
                *(_BYTE *)(v24 + 209) = v92[5] != 0;
                sub_22F20D5D0(&__dst);
                v309 = __len;
                v310 = HIBYTE(v591);
                if (v591 >= 0)
                  p_dst = &__dst;
                else
                  p_dst = (__int128 *)__dst;
                v312 = HIBYTE(v591) & 0x7F;
                if (v591 < 0)
                  v312 = *((_QWORD *)&__dst + 1);
                if (v312 == __len)
                {
                  if (!__len)
                  {
                    v77 = 12;
                    LOBYTE(v314) = 1;
                    goto LABEL_625;
                  }
                  v540 = __src;
                  v313 = memcmp(p_dst, __src, __len) != 0;
                }
                else
                {
                  v540 = __src;
                  v313 = 1;
                }
                v314 = v544 | !v313;
                if (v314)
                  v77 = 12;
                else
                  v77 = 1;
                if (v314)
                  v75 = v75;
                else
                  v75 = 4;
                if ((a11 & 4) == 0 && (v314 & 1) == 0)
                {
                  v315 = *(_QWORD *)(a1 + 104);
                  *(_DWORD *)(v315 + 312) = *(_DWORD *)(a1 + 496);
                  *(_DWORD *)(v315 + 316) = 925;
                  if (*(char *)(v315 + 311) < 0)
                  {
                    **(_BYTE **)(v315 + 288) = 0;
                    *(_QWORD *)(v315 + 296) = 0;
                  }
                  else
                  {
                    *(_BYTE *)(v315 + 288) = 0;
                    *(_BYTE *)(v315 + 311) = 0;
                  }
                  __p[0] = (void *)(v315 + 320);
                  __p[1] = 0;
                  v564 = v315;
                  LOWORD(v565) = 1;
                  *(_BYTE *)(v315 + 320) = 0;
                  *(_DWORD *)(v315 + 664) = 0;
                  v328 = *(unsigned int *)(v315 + 776);
                  if ((_DWORD)v328)
                  {
                    v329 = *(_QWORD *)(v315 + 768);
                    v330 = 56 * v328;
                    do
                    {
                      if (*(char *)(v329 + v330 - 9) < 0)
                        operator delete(*(void **)(v329 + v330 - 32));
                      v330 -= 56;
                    }
                    while (v330);
                  }
                  *(_DWORD *)(v315 + 776) = 0;
                  sub_22E3B89A8((unsigned __int8 **)__p, v540, v309);
                  if (v591 >= 0)
                    v331 = &__dst;
                  else
                    v331 = (__int128 *)__dst;
                  if (v591 >= 0)
                    v332 = HIBYTE(v591) & 0x7F;
                  else
                    v332 = *((_QWORD *)&__dst + 1);
                  sub_22E3B89A8((unsigned __int8 **)__p, v331, v332);
                  sub_22E3BB0B8((uint64_t)__p);
                  LOBYTE(v314) = 0;
                  v75 = 4;
                  v77 = 1;
                  v310 = HIBYTE(v591);
                }
LABEL_625:
                if (v310 < 0)
                  operator delete((void *)__dst);
                v97 = v75;
                i = v545;
                if ((v314 & 1) != 0)
                  goto LABEL_549;
                goto LABEL_551;
              case 2:
                if (!v74)
                {
                  v274 = sub_22E77C270(a1, v24, i != 0, a11);
                  if ((_DWORD)v274)
                  {
                    v97 = v274;
                    v74 = 1;
                    goto LABEL_797;
                  }
                }
                v138 = 0;
                v529 = v582[1];
                do
                {
                  if (v138 >= v529)
                    goto LABEL_470;
                  v139 = 0;
                  v140 = v582[0];
                  v141 = *((_QWORD *)v582[0] + v138);
                  v142 = *((_QWORD *)v582[0] + v138 + 1);
                  v536 = (void *)*((_QWORD *)v582[0] + v138 + 2);
                  v143 = *((_QWORD *)v582[0] + v138 + 3);
                  v144 = (char *)v582[0] + 8 * v138 + 32;
                  v576 = 0uLL;
                  v577 = 0;
                  do
                  {
                    *((_BYTE *)&v576 + v139) = *(_QWORD *)&v144[8 * v139];
                    ++v139;
                  }
                  while (v139 != 20);
                  v145 = v138 + 25;
                  v146 = v140[v138 + 24];
                  sub_22E793964(&__dst, &v140[v145], &v140[v145 + v146], v146);
                  v147 = v145 + v146;
                  v595 = 0uLL;
                  v596 = 0;
                  v593 = 0uLL;
                  v594 = 0;
                  if ((v141 & 0xFFFFFFFB) != 1)
                    goto LABEL_254;
                  if (v591 >= 0)
                    v148 = (char *)&__dst;
                  else
                    v148 = (char *)__dst;
                  if (v591 >= 0)
                    v149 = HIBYTE(v591) & 0x7F;
                  else
                    v149 = *((_QWORD *)&__dst + 1);
                  sub_22F137ED4(*(uint64_t **)(*(_QWORD *)(a1 + 120) + 104), v148, v149, 1, __p);
                  if (SHIBYTE(v596) < 0)
                    operator delete((void *)v595);
                  v595 = *(_OWORD *)__p;
                  v596 = v564;
                  v150 = HIBYTE(v564);
                  if (v564 < 0)
                    v150 = *((_QWORD *)&v595 + 1);
                  if (v150)
                  {
                    v151 = v147 + *((_QWORD *)v582[0] + v147) + 1;
                    v138 = *((_QWORD *)v582[0] + v151) + v151 + 1;
                  }
                  else
                  {
LABEL_254:
                    v152 = v147 + 1;
                    v153 = *((_QWORD *)v582[0] + v147);
                    sub_22E793964(__p, (uint64_t *)v582[0] + v152, (uint64_t *)v582[0] + v152 + v153, v153);
                    if (v527)
                      sub_22E76E414((uint64_t)__p);
                    if (SHIBYTE(v596) < 0)
                      operator delete((void *)v595);
                    v154 = v152 + v153;
                    v595 = *(_OWORD *)__p;
                    v596 = v564;
                    v155 = v152 + v153 + 1;
                    v156 = *((_QWORD *)v582[0] + v154);
                    sub_22E793964(__p, (uint64_t *)v582[0] + v155, (uint64_t *)v582[0] + v155 + v156, v156);
                    if (SHIBYTE(v594) < 0)
                      operator delete((void *)v593);
                    v138 = v155 + v156;
                    v593 = *(_OWORD *)__p;
                    v594 = v564;
                  }
                  if (v594 >= 0)
                    v157 = HIBYTE(v594) & 0x7F;
                  else
                    v157 = *((_QWORD *)&v593 + 1);
                  if (v157
                    && ((v158 = *(_QWORD *)(a1 + 56)) == 0
                     || (v591 >= 0 ? (v159 = &__dst) : (v159 = (__int128 *)__dst),
                         v591 >= 0 ? (v160 = HIBYTE(v591) & 0x7F) : (v160 = *((_QWORD *)&__dst + 1)),
                         v596 >= 0 ? (v161 = &v595) : (v161 = (__int128 *)v595),
                         v596 >= 0 ? (v162 = HIBYTE(v596) & 0x7F) : (v162 = *((_QWORD *)&v595 + 1)),
                         v594 >= 0 ? (v163 = &v593) : (v163 = (__int128 *)v593),
                         (*(unsigned int (**)(uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, __int128 *))(*(_QWORD *)v158 + 152))(v158, v159, v160, v161, v162, v163))))
                  {
                    v164 = *(_QWORD *)(a1 + 104);
                    *(_DWORD *)(v164 + 312) = *(_DWORD *)(a1 + 496);
                    *(_DWORD *)(v164 + 316) = 905;
                    if (*(char *)(v164 + 311) < 0)
                    {
                      **(_BYTE **)(v164 + 288) = 0;
                      *(_QWORD *)(v164 + 296) = 0;
                    }
                    else
                    {
                      *(_BYTE *)(v164 + 288) = 0;
                      *(_BYTE *)(v164 + 311) = 0;
                    }
                    __p[0] = (void *)(v164 + 320);
                    __p[1] = 0;
                    v564 = v164;
                    LOWORD(v565) = 1;
                    *(_BYTE *)(v164 + 320) = 0;
                    *(_DWORD *)(v164 + 664) = 0;
                    v172 = *(unsigned int *)(v164 + 776);
                    if ((_DWORD)v172)
                    {
                      v173 = *(_QWORD *)(v164 + 768);
                      v174 = 56 * v172;
                      do
                      {
                        if (*(char *)(v173 + v174 - 9) < 0)
                          operator delete(*(void **)(v173 + v174 - 32));
                        v174 -= 56;
                      }
                      while (v174);
                    }
                    *(_DWORD *)(v164 + 776) = 0;
                    v175 = qword_22F45EDC0[(int)v141];
                    v176 = (unsigned __int8 *)__p[0];
                    if (!__p[0])
                    {
                      v176 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)__p[1]);
                      __p[0] = v176;
                    }
                    v176[*v176 + 1] = 3;
                    v177 = __p[0];
                    v178 = *(unsigned __int8 *)__p[0];
                    *(_BYTE *)__p[0] = v178 + 1;
                    v177[v178 + 2] = v175;
                    if (v596 >= 0)
                      v179 = &v595;
                    else
                      v179 = (__int128 *)v595;
                    if (v596 >= 0)
                      v180 = HIBYTE(v596) & 0x7F;
                    else
                      v180 = *((_QWORD *)&v595 + 1);
                    sub_22E3B89A8((unsigned __int8 **)__p, v179, v180);
                    v181 = (unsigned __int8 *)__p[0];
                    i = v545;
                    if (!__p[0])
                    {
                      v181 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)__p[1]);
                      __p[0] = v181;
                    }
                    v181[*v181 + 1] = 2;
                    v182 = __p[0];
                    v183 = *(unsigned __int8 *)__p[0];
                    *(_BYTE *)__p[0] = v183 + 1;
                    v182[v183 + 2] = 1;
                    v567.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
                    *(_OWORD *)&v567.__r_.__value_.__r.__words[1] = xmmword_22F45AD90;
                    strcpy(v567.__r_.__value_.__l.__data_, "missing or unloadable module cache key");
                    if (v594 >= 0)
                      v184 = (const std::string::value_type *)&v593;
                    else
                      v184 = (const std::string::value_type *)v593;
                    if (v594 >= 0)
                      v185 = HIBYTE(v594) & 0x7F;
                    else
                      v185 = *((_QWORD *)&v593 + 1);
                    v186 = std::string::append(&v567, v184, v185);
                    v187 = v186->__r_.__value_.__r.__words[2];
                    *(_OWORD *)v568 = *(_OWORD *)&v186->__r_.__value_.__l.__data_;
                    v569 = v187;
                    v186->__r_.__value_.__l.__size_ = 0;
                    v186->__r_.__value_.__r.__words[2] = 0;
                    v186->__r_.__value_.__r.__words[0] = 0;
                    if (v569 >= 0)
                      v188 = v568;
                    else
                      v188 = (void **)v568[0];
                    if (v569 >= 0)
                      v189 = HIBYTE(v569) & 0x7F;
                    else
                      v189 = (size_t)v568[1];
                    sub_22E3B89A8((unsigned __int8 **)__p, v188, v189);
                    if (SHIBYTE(v569) < 0)
                      operator delete(v568[0]);
                    if (SHIBYTE(v567.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v567.__r_.__value_.__l.__data_);
                    sub_22E3BB0B8((uint64_t)__p);
                    v190 = 0;
                    v75 = 1;
                  }
                  else
                  {
                    HIDWORD(v166) = v142;
                    LODWORD(v166) = v142;
                    v165 = (v166 >> 1);
                    if (v596 >= 0)
                      v167 = &v595;
                    else
                      v167 = (__int128 *)v595;
                    if (v596 >= 0)
                      v168 = HIBYTE(v596) & 0x7F;
                    else
                      v168 = *((_QWORD *)&v595 + 1);
                    v574 = v576;
                    v575 = v577;
                    v169 = sub_22E771844(a1, v167, v168, v141, v165, v24, v546, v536, v143, &v574, v534);
                    v170 = v169;
                    if ((((_DWORD)v169 == 3) & (v534 >> 1)) != 1)
                      __asm { BR              X9 }
                    i = v545;
                    if (sub_22E808214(*(_QWORD *)(a1 + 272)) == 3)
                    {
                      v171 = *(_QWORD *)(a1 + 104);
                      *(_DWORD *)(v171 + 312) = *(_DWORD *)(a1 + 496);
                      *(_DWORD *)(v171 + 316) = 941;
                      if (*(char *)(v171 + 311) < 0)
                      {
                        **(_BYTE **)(v171 + 288) = 0;
                        *(_QWORD *)(v171 + 296) = 0;
                      }
                      else
                      {
                        *(_BYTE *)(v171 + 288) = 0;
                        *(_BYTE *)(v171 + 311) = 0;
                      }
                      __p[0] = (void *)(v171 + 320);
                      __p[1] = 0;
                      v564 = v171;
                      LOWORD(v565) = 1;
                      *(_BYTE *)(v171 + 320) = 0;
                      *(_DWORD *)(v171 + 664) = 0;
                      v191 = *(unsigned int *)(v171 + 776);
                      if ((_DWORD)v191)
                      {
                        v192 = *(_QWORD *)(v171 + 768);
                        v193 = 56 * v191;
                        do
                        {
                          if (*(char *)(v192 + v193 - 9) < 0)
                            operator delete(*(void **)(v192 + v193 - 32));
                          v193 -= 56;
                        }
                        while (v193);
                      }
                      *(_DWORD *)(v171 + 776) = 0;
                      v194 = *(_BYTE *)(v24 + 31);
                      v195 = v194 < 0;
                      if (v194 >= 0)
                        v196 = (void *)(v24 + 8);
                      else
                        v196 = *(void **)(v24 + 8);
                      v197 = v194 & 0x7F;
                      if (v195)
                        v198 = *(_QWORD *)(v24 + 16);
                      else
                        v198 = v197;
                      sub_22E3B89A8((unsigned __int8 **)__p, v196, v198);
                      v199 = *(_BYTE *)(v24 + 103);
                      v200 = v199;
                      v201 = v199 & 0x7F;
                      if (v200 >= 0)
                        v202 = v201;
                      else
                        v202 = *(_QWORD *)(v24 + 88);
                      v203 = (unsigned __int8 *)__p[0];
                      if (!__p[0])
                      {
                        v203 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)__p[1]);
                        __p[0] = v203;
                      }
                      v203[*v203 + 1] = 2;
                      v204 = __p[0];
                      v205 = *(unsigned __int8 *)__p[0];
                      *(_BYTE *)__p[0] = v205 + 1;
                      v204[v205 + 2] = v202 != 0;
                      v206 = *(_BYTE *)(v24 + 103);
                      v207 = v206 < 0;
                      if (v206 >= 0)
                        v208 = (void *)(v24 + 80);
                      else
                        v208 = *(void **)(v24 + 80);
                      v209 = v206 & 0x7F;
                      if (v207)
                        v210 = *(_QWORD *)(v24 + 88);
                      else
                        v210 = v209;
                      sub_22E3B89A8((unsigned __int8 **)__p, v208, v210);
                      sub_22E3BB0B8((uint64_t)__p);
                      v211 = *(_QWORD *)(a1 + 104);
                      *(_DWORD *)(v211 + 312) = *(_DWORD *)(a1 + 496);
                      *(_DWORD *)(v211 + 316) = 940;
                      if (*(char *)(v211 + 311) < 0)
                      {
                        **(_BYTE **)(v211 + 288) = 0;
                        *(_QWORD *)(v211 + 296) = 0;
                      }
                      else
                      {
                        *(_BYTE *)(v211 + 288) = 0;
                        *(_BYTE *)(v211 + 311) = 0;
                      }
                      v555[0] = v211 + 320;
                      v555[1] = 0;
                      v555[2] = v211;
                      v556 = 1;
                      *(_BYTE *)(v211 + 320) = 0;
                      *(_DWORD *)(v211 + 664) = 0;
                      v212 = *(unsigned int *)(v211 + 776);
                      if ((_DWORD)v212)
                      {
                        v213 = *(_QWORD *)(v211 + 768);
                        v214 = 56 * v212;
                        do
                        {
                          if (*(char *)(v213 + v214 - 9) < 0)
                            operator delete(*(void **)(v213 + v214 - 32));
                          v214 -= 56;
                        }
                        while (v214);
                      }
                      *(_DWORD *)(v211 + 776) = 0;
                      sub_22E3BB0B8((uint64_t)v555);
                      i = v545;
                      v190 = 0;
                      v75 = v170;
                      switch((int)v170)
                      {
                        case 1:
                          break;
                        case 2:
                        case 3:
                          goto LABEL_361;
                        case 4:
                          v190 = 0;
                          v75 = 4;
                          break;
                        case 5:
                          v190 = 0;
                          v75 = 5;
                          break;
                        case 6:
                          v190 = 0;
                          v75 = 6;
                          break;
                        default:
                          v190 = 1;
                          break;
                      }
                    }
                    else
                    {
LABEL_361:
                      v190 = 0;
                      v75 = 3;
                    }
                  }
                  if (SHIBYTE(v594) < 0)
                    operator delete((void *)v593);
                  if (SHIBYTE(v596) < 0)
                    operator delete((void *)v595);
                  if (SHIBYTE(v591) < 0)
                    operator delete((void *)__dst);
                  v74 = 1;
                }
                while ((v190 & 1) != 0);
                v77 = 1;
                goto LABEL_550;
              case 3:
                *(_DWORD *)(v24 + 176) = *(_QWORD *)v582[0];
                v123 = (void *)__len;
                if (__len > 0x7FFFFFFFFFFFFFF7)
                  goto LABEL_960;
                v124 = __src;
                if (__len >= 0x17)
                {
                  v232 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((__len | 7) != 0x17)
                    v232 = __len | 7;
                  v233 = v232 + 1;
                  v234 = __src;
                  v235 = (void **)operator new(v232 + 1);
                  v124 = v234;
                  v125 = v235;
                  v564 = v233 | 0x8000000000000000;
                  __p[0] = v235;
                  __p[1] = v123;
                }
                else
                {
                  HIBYTE(v564) = __len;
                  v125 = __p;
                  if (!__len)
                    goto LABEL_413;
                }
                memmove(v125, v124, (size_t)v123);
LABEL_413:
                *((_BYTE *)v123 + (_QWORD)v125) = 0;
                if (*(char *)(v24 + 175) < 0)
                  operator delete(__str->__r_.__value_.__l.__data_);
                *(_OWORD *)&__str->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
                *(_QWORD *)(v24 + 168) = v564;
                std::string::operator=(v518, __str);
                sub_22E76C4AC(v24, (uint64_t)v518);
                goto LABEL_549;
              case 4:
                *(_DWORD *)(v24 + 176) = *(_QWORD *)v582[0];
                goto LABEL_549;
              case 5:
                v523 = *(_QWORD *)v582[0];
                v109 = v523;
                v524 = *((_DWORD *)v582[0] + 2);
                *(_QWORD *)(v24 + 1136) = __src;
                v110 = *(_BYTE **)(v24 + 1152);
                v111 = *(char **)(v24 + 1144);
                v112 = v110 - v111;
                v113 = (v110 - v111) >> 3;
                if (v523 <= v113)
                {
                  if (v523 >= v113)
                    goto LABEL_522;
                  v229 = &v111[8 * v523];
                }
                else
                {
                  v114 = v523 - v113;
                  v115 = *(_QWORD *)(v24 + 1160);
                  if (v114 > (v115 - (uint64_t)v110) >> 3)
                  {
                    v116 = v115 - (_QWORD)v111;
                    v117 = v116 >> 2;
                    if (v116 >> 2 <= (unint64_t)v523)
                      v117 = v523;
                    if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFF8)
                      v117 = 0x1FFFFFFFFFFFFFFFLL;
                    if (v117 >> 61)
LABEL_961:
                      sub_22E3B3F8C();
                    v528 = v117;
                    v509 = (char *)operator new(8 * v117);
                    v118 = &v509[8 * v113];
                    bzero(v118, 8 * v114);
                    if (v110 == v111)
                    {
                      v109 = v523;
                    }
                    else
                    {
                      v109 = v523;
                      do
                      {
                        v119 = *((_QWORD *)v110 - 1);
                        v110 -= 8;
                        *((_QWORD *)v118 - 1) = v119;
                        v118 -= 8;
                      }
                      while (v110 != v111);
                    }
                    *(_QWORD *)(v24 + 1144) = v118;
                    *(_QWORD *)(v24 + 1152) = &v509[8 * v114 + v112];
                    *(_QWORD *)(v24 + 1160) = &v509[8 * v528];
                    if (v111)
                    {
                      operator delete(v111);
                      v109 = v523;
                    }
LABEL_522:
                    v292 = *(void ***)(v24 + 1176);
                    v293 = *(void ***)(v24 + 1168);
                    v294 = 0x6DB6DB6DB6DB6DB7 * (v292 - v293);
                    v295 = v109 - v294;
                    if (v109 <= v294)
                    {
                      i = v545;
                      if (v109 < v294)
                      {
                        v306 = &v293[7 * v109];
                        while (v292 != v306)
                        {
                          if (*((char *)v292 - 33) < 0)
                            operator delete(*(v292 - 7));
                          v292 -= 7;
                        }
                        *(_QWORD *)(v24 + 1176) = v306;
                      }
                    }
                    else
                    {
                      v296 = *(_QWORD *)(v24 + 1184);
                      if (0x6DB6DB6DB6DB6DB7 * ((v296 - (uint64_t)v292) >> 3) >= v295)
                      {
                        bzero(*(void **)(v24 + 1176), 56 * ((56 * v295 - 56) / 0x38) + 56);
                        *(_QWORD *)(v24 + 1176) = &v292[7 * v295];
                        i = v545;
                      }
                      else
                      {
                        v297 = 0x6DB6DB6DB6DB6DB7 * ((v296 - (uint64_t)v293) >> 3);
                        v298 = 2 * v297;
                        if (2 * v297 <= v109)
                          v298 = v109;
                        v299 = v109;
                        if (v297 >= 0x249249249249249)
                          v300 = 0x492492492492492;
                        else
                          v300 = v298;
                        if (v300 > 0x492492492492492)
                          goto LABEL_961;
                        v538 = 56 * v300;
                        v530 = (char *)operator new(56 * v300);
                        v301 = &v530[8 * (v292 - v293)];
                        v539 = &v530[v538];
                        bzero(v301, 56 * ((56 * v295 - 56) / 0x38) + 56);
                        v302 = &v530[56 * v299];
                        if (v292 == v293)
                        {
                          *(_QWORD *)(v24 + 1168) = v301;
                          *(_QWORD *)(v24 + 1176) = v302;
                          *(_QWORD *)(v24 + 1184) = v539;
                          i = v545;
                        }
                        else
                        {
                          do
                          {
                            v303 = *(_OWORD *)(v292 - 7);
                            *((_QWORD *)v301 - 5) = *(v292 - 5);
                            *(_OWORD *)(v301 - 56) = v303;
                            *(v292 - 6) = 0;
                            *(v292 - 5) = 0;
                            *(v292 - 7) = 0;
                            v304 = *((_OWORD *)v292 - 2);
                            *(_OWORD *)(v301 - 21) = *(_OWORD *)((char *)v292 - 21);
                            *((_OWORD *)v301 - 2) = v304;
                            v301 -= 56;
                            v292 -= 7;
                          }
                          while (v292 != v293);
                          v292 = *(void ***)(v24 + 1168);
                          v305 = *(void ***)(v24 + 1176);
                          *(_QWORD *)(v24 + 1168) = v301;
                          *(_QWORD *)(v24 + 1176) = v302;
                          *(_QWORD *)(v24 + 1184) = v539;
                          for (i = v545; v305 != v292; v305 -= 7)
                          {
                            if (*((char *)v305 - 33) < 0)
                              operator delete(*(v305 - 7));
                          }
                        }
                        if (v292)
                          operator delete(v292);
                      }
                    }
                    *(_DWORD *)(v24 + 1192) = v524;
LABEL_549:
                    v77 = 0;
LABEL_550:
                    v97 = v75;
                    goto LABEL_551;
                  }
                  bzero(*(void **)(v24 + 1152), 8 * v114);
                  v109 = v523;
                  v229 = &v110[8 * v114];
                }
                *(_QWORD *)(v24 + 1152) = v229;
                goto LABEL_522;
              case 6:
                v215 = (void *)__len;
                if (__len > 0x7FFFFFFFFFFFFFF7)
                  goto LABEL_960;
                v216 = __src;
                if (__len >= 0x17)
                {
                  v236 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((__len | 7) != 0x17)
                    v236 = __len | 7;
                  v237 = v236 + 1;
                  v238 = __src;
                  v239 = (void **)operator new(v236 + 1);
                  v216 = v238;
                  v217 = v239;
                  v564 = v237 | 0x8000000000000000;
                  __p[0] = v239;
                  __p[1] = v215;
                }
                else
                {
                  HIBYTE(v564) = __len;
                  v217 = __p;
                  if (!__len)
                    goto LABEL_420;
                }
                memmove(v217, v216, (size_t)v215);
LABEL_420:
                *((_BYTE *)v215 + (_QWORD)v217) = 0;
                if (*(char *)(v24 + 103) < 0)
                  operator delete(*v533);
                *(_OWORD *)v533 = *(_OWORD *)__p;
                *(_QWORD *)(v24 + 96) = v564;
                v240 = *(_QWORD *)(a1 + 104);
                *(_DWORD *)(v240 + 312) = *(_DWORD *)(a1 + 496);
                *(_DWORD *)(v240 + 316) = 946;
                if (*(char *)(v240 + 311) < 0)
                {
                  **(_BYTE **)(v240 + 288) = 0;
                  *(_QWORD *)(v240 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v240 + 288) = 0;
                  *(_BYTE *)(v240 + 311) = 0;
                }
                __p[0] = (void *)(v240 + 320);
                __p[1] = 0;
                v564 = v240;
                LOWORD(v565) = 1;
                *(_BYTE *)(v240 + 320) = 0;
                *(_DWORD *)(v240 + 664) = 0;
                v247 = *(unsigned int *)(v240 + 776);
                if ((_DWORD)v247)
                {
                  v248 = *(_QWORD *)(v240 + 768);
                  v249 = 56 * v247;
                  do
                  {
                    if (*(char *)(v248 + v249 - 9) < 0)
                      operator delete(*(void **)(v248 + v249 - 32));
                    v249 -= 56;
                  }
                  while (v249);
                }
                *(_DWORD *)(v240 + 776) = 0;
                v250 = *(_BYTE *)(v24 + 103);
                v251 = v250 < 0;
                if (v250 >= 0)
                  v252 = (void *)(v24 + 80);
                else
                  v252 = *(void **)(v24 + 80);
                v253 = v250 & 0x7F;
                if (v251)
                  v254 = *(_QWORD *)(v24 + 88);
                else
                  v254 = v253;
                sub_22E3B89A8((unsigned __int8 **)__p, v252, v254);
                v255 = *(_BYTE *)(v24 + 31);
                v256 = v255 < 0;
                if (v255 >= 0)
                  v257 = (void *)(v24 + 8);
                else
                  v257 = *(void **)(v24 + 8);
                v258 = v255 & 0x7F;
                if (v256)
                  v259 = *(_QWORD *)(v24 + 16);
                else
                  v259 = v258;
                sub_22E3B89A8((unsigned __int8 **)__p, v257, v259);
                v260 = (unsigned __int8 *)__p[0];
                if (!__p[0])
                {
                  v260 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)__p[1]);
                  __p[0] = v260;
                }
                v260[*v260 + 1] = 2;
                v261 = __p[0];
                v262 = *(unsigned __int8 *)__p[0];
                *(_BYTE *)__p[0] = v262 + 1;
                v261[v262 + 2] = v519;
                if (i)
                {
                  v263 = *(_BYTE *)(i + 103);
                  v264 = v263 < 0;
                  if (v263 >= 0)
                    v265 = v517;
                  else
                    v265 = *(void **)(i + 80);
                  v266 = v263 & 0x7F;
                  if (v264)
                    v267 = *(_QWORD *)(i + 88);
                  else
                    v267 = v266;
                }
                else
                {
                  v267 = 0;
                  v265 = 0;
                }
                sub_22E3B89A8((unsigned __int8 **)__p, v265, v267);
                sub_22E3BB0B8((uint64_t)__p);
                v268 = *(_QWORD *)(a1 + 56);
                if (v268)
                {
                  v269 = *(_BYTE *)(v24 + 103);
                  v270 = v269 < 0;
                  if (v269 >= 0)
                    v271 = v24 + 80;
                  else
                    v271 = *(_QWORD *)(v24 + 80);
                  v272 = v269 & 0x7F;
                  if (v270)
                    v273 = *(_QWORD *)(v24 + 88);
                  else
                    v273 = v272;
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v268 + 24))(v268, v271, v273);
                }
                if (v74)
                {
LABEL_470:
                  v74 = 1;
                  goto LABEL_549;
                }
                v97 = sub_22E77C270(a1, v24, i != 0, a11);
                v74 = 1;
                v77 = 1;
                if (!(_DWORD)v97)
                  goto LABEL_549;
                goto LABEL_551;
              case 7:
                v218 = *(_QWORD *)v582[0];
                sub_22E793964(__p, (uint64_t *)v582[0] + 1, (uint64_t *)v582[0] + *(_QWORD *)v582[0] + 1, *(_QWORD *)v582[0]);
                sub_22E76C4AC(v24, (uint64_t)__p);
                if (*(char *)(v24 + 207) < 0)
                  operator delete(*v522);
                *(_OWORD *)v522 = *(_OWORD *)__p;
                *(_QWORD *)(v24 + 200) = v564;
                if (*v542 || *(_DWORD *)(**(_QWORD **)v541 + 4) == 4)
                  goto LABEL_382;
                v281 = *(_BYTE *)(v24 + 103);
                v282 = v281 < 0;
                if (v281 >= 0)
                  v283 = (const void **)(v24 + 80);
                else
                  v283 = *(const void ***)(v24 + 80);
                v284 = v281 & 0x7F;
                if (v282)
                  v285 = *(_QWORD *)(v24 + 88);
                else
                  v285 = v284;
                v286 = sub_22F138980(*(uint64_t **)(*(_QWORD *)(a1 + 120) + 104), v283, v285, *(unsigned int *)(v24 + 740), 1, 0);
                v287 = *(_QWORD *)(a1 + 120);
                v537 = *(uint64_t **)(v287 + 104);
                if (v286)
                {
                  v288 = (unint64_t)sub_22F152B7C(*(_QWORD *)(v287 + 104) + 488, v286);
                  v287 = *(_QWORD *)(a1 + 120);
                }
                else
                {
                  v288 = 0;
                }
                if ((*(_BYTE *)(*(_QWORD *)(v287 + 32) + 152) & 2) == 0 && !v288)
                {
                  if ((a11 & 2) != 0 && sub_22E808214(*(_QWORD *)(a1 + 272)) != 3)
                    goto LABEL_856;
                  i = v545;
                  if (v286)
                  {
                    do
                    {
                      v317 = v286;
                      v286 = *(_QWORD *)(v286 + 32);
                    }
                    while (v286);
                    v318 = *(_QWORD *)(v317 + 256);
                    if (v318)
                    {
                      v319 = *(_QWORD *)(a1 + 104);
                      *(_DWORD *)(v319 + 312) = *(_DWORD *)(a1 + 496);
                      *(_DWORD *)(v319 + 316) = 917;
                      if (*(char *)(v319 + 311) < 0)
                      {
                        **(_BYTE **)(v319 + 288) = 0;
                        *(_QWORD *)(v319 + 296) = 0;
                      }
                      else
                      {
                        *(_BYTE *)(v319 + 288) = 0;
                        *(_BYTE *)(v319 + 311) = 0;
                      }
                      __p[0] = (void *)(v319 + 320);
                      __p[1] = 0;
                      v564 = v319;
                      LOWORD(v565) = 1;
                      *(_BYTE *)(v319 + 320) = 0;
                      *(_DWORD *)(v319 + 664) = 0;
                      v399 = *(unsigned int *)(v319 + 776);
                      if ((_DWORD)v399)
                      {
                        v400 = *(_QWORD *)(v319 + 768);
                        v401 = 56 * v399;
                        do
                        {
                          if (*(char *)(v400 + v401 - 9) < 0)
                            operator delete(*(void **)(v400 + v401 - 32));
                          v401 -= 56;
                        }
                        while (v401);
                      }
                      *(_DWORD *)(v319 + 776) = 0;
                      v402 = *(_BYTE *)(v24 + 103);
                      v403 = v402 < 0;
                      if (v402 >= 0)
                        v404 = (void *)(v24 + 80);
                      else
                        v404 = *(void **)(v24 + 80);
                      v405 = v402 & 0x7F;
                      if (v403)
                        v406 = *(_QWORD *)(v24 + 88);
                      else
                        v406 = v405;
                      sub_22E3B89A8((unsigned __int8 **)__p, v404, v406);
                      v407 = *(_BYTE *)(v24 + 31);
                      v408 = v407 < 0;
                      if (v407 >= 0)
                        v409 = (void *)(v24 + 8);
                      else
                        v409 = *(void **)(v24 + 8);
                      v410 = v407 & 0x7F;
                      if (v408)
                        v411 = *(_QWORD *)(v24 + 16);
                      else
                        v411 = v410;
                      sub_22E3B89A8((unsigned __int8 **)__p, v409, v411);
                      do
                      {
                        v412 = (size_t *)v318;
                        v413 = *(_QWORD *)(v318 + 8);
                        if ((v413 & 2) == 0)
                          break;
                        v318 = v413 & 0xFFFFFFFFFFFFFFFCLL;
                      }
                      while ((v413 & 0xFFFFFFFFFFFFFFFCLL) != 0);
                      sub_22E3B89A8((unsigned __int8 **)__p, v412 + 4, *v412);
                      sub_22E3BB0B8((uint64_t)__p);
LABEL_856:
                      v97 = 3;
                      v77 = 1;
                      i = v545;
                      goto LABEL_551;
                    }
                  }
                  v333 = *(_QWORD *)(a1 + 104);
                  *(_DWORD *)(v333 + 312) = *(_DWORD *)(a1 + 496);
                  *(_DWORD *)(v333 + 316) = 914;
                  if (*(char *)(v333 + 311) < 0)
                  {
                    **(_BYTE **)(v333 + 288) = 0;
                    *(_QWORD *)(v333 + 296) = 0;
                  }
                  else
                  {
                    *(_BYTE *)(v333 + 288) = 0;
                    *(_BYTE *)(v333 + 311) = 0;
                  }
                  __p[0] = (void *)(v333 + 320);
                  __p[1] = 0;
                  v564 = v333;
                  LOWORD(v565) = 1;
                  *(_BYTE *)(v333 + 320) = 0;
                  *(_DWORD *)(v333 + 664) = 0;
                  v378 = *(unsigned int *)(v333 + 776);
                  if ((_DWORD)v378)
                  {
                    v379 = *(_QWORD *)(v333 + 768);
                    v380 = 56 * v378;
                    do
                    {
                      if (*(char *)(v379 + v380 - 9) < 0)
                        operator delete(*(void **)(v379 + v380 - 32));
                      v380 -= 56;
                    }
                    while (v380);
                  }
                  *(_DWORD *)(v333 + 776) = 0;
                  v381 = *(_BYTE *)(v24 + 103);
                  v382 = v381 < 0;
                  if (v381 >= 0)
                    v383 = (void *)(v24 + 80);
                  else
                    v383 = *(void **)(v24 + 80);
                  v384 = v381 & 0x7F;
                  if (v382)
                    v385 = *(_QWORD *)(v24 + 88);
                  else
                    v385 = v384;
                  sub_22E3B89A8((unsigned __int8 **)__p, v383, v385);
                  v386 = *(_BYTE *)(v24 + 31);
                  v387 = v386 < 0;
                  if (v386 >= 0)
                    v388 = (void *)(v24 + 8);
                  else
                    v388 = *(void **)(v24 + 8);
                  v389 = v386 & 0x7F;
                  if (v387)
                    v390 = *(_QWORD *)(v24 + 16);
                  else
                    v390 = v389;
                  sub_22E3B89A8((unsigned __int8 **)__p, v388, v390);
                  if (v545)
                  {
                    if (*(char *)(v545 + 31) < 0)
                    {
                      sub_22E3BB2B4(&__dst, *(void **)(v545 + 8), *(_QWORD *)(v545 + 16));
                    }
                    else
                    {
                      __dst = *(_OWORD *)v513;
                      v591 = *(_QWORD *)(v513 + 16);
                    }
                  }
                  else
                  {
                    HIBYTE(v591) = 0;
                    LOBYTE(__dst) = 0;
                  }
                  if (v591 >= 0)
                    v414 = &__dst;
                  else
                    v414 = (__int128 *)__dst;
                  if (v591 >= 0)
                    v415 = HIBYTE(v591) & 0x7F;
                  else
                    v415 = *((_QWORD *)&__dst + 1);
                  sub_22E3B89A8((unsigned __int8 **)__p, v414, v415);
                  v416 = *(_BYTE *)(v24 + 207);
                  v417 = v416 < 0;
                  if (v416 >= 0)
                    v418 = (void *)(v24 + 184);
                  else
                    v418 = *(void **)(v24 + 184);
                  v419 = v416 & 0x7F;
                  if (v417)
                    v420 = *(_QWORD *)(v24 + 192);
                  else
                    v420 = v419;
                  sub_22E3B89A8((unsigned __int8 **)__p, v418, v420);
                  v421 = (unsigned __int8 *)__p[0];
                  if (!__p[0])
                  {
                    v421 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)__p[1]);
                    __p[0] = v421;
                  }
                  v421[*v421 + 1] = 2;
                  v422 = __p[0];
                  v423 = *(unsigned __int8 *)__p[0];
                  *(_BYTE *)__p[0] = v423 + 1;
                  v422[v423 + 2] = v512;
                  if (SHIBYTE(v591) < 0)
                    operator delete((void *)__dst);
                  sub_22E3BB0B8((uint64_t)__p);
                  if (v545 && *(_DWORD *)(v545 + 4) == 2)
                  {
                    v424 = *(_QWORD *)(a1 + 104);
                    *(_DWORD *)(v424 + 312) = *(_DWORD *)(a1 + 496);
                    *(_DWORD *)(v424 + 316) = 938;
                    if (*(char *)(v424 + 311) < 0)
                    {
                      **(_BYTE **)(v424 + 288) = 0;
                      *(_QWORD *)(v424 + 296) = 0;
                    }
                    else
                    {
                      *(_BYTE *)(v424 + 288) = 0;
                      *(_BYTE *)(v424 + 311) = 0;
                    }
                    __p[0] = (void *)(v424 + 320);
                    __p[1] = 0;
                    v564 = v424;
                    LOWORD(v565) = 1;
                    *(_BYTE *)(v424 + 320) = 0;
                    *(_DWORD *)(v424 + 664) = 0;
                    v425 = *(unsigned int *)(v424 + 776);
                    if ((_DWORD)v425)
                    {
                      v426 = *(_QWORD *)(v424 + 768);
                      v427 = 56 * v425;
                      do
                      {
                        if (*(char *)(v426 + v427 - 9) < 0)
                          operator delete(*(void **)(v426 + v427 - 32));
                        v427 -= 56;
                      }
                      while (v427);
                    }
                    *(_DWORD *)(v424 + 776) = 0;
                    v428 = (void *)llvm::sys::path::parent_path();
                    sub_22E3B89A8((unsigned __int8 **)__p, v428, v429);
LABEL_682:
                    sub_22E3BB0B8((uint64_t)__p);
                    goto LABEL_796;
                  }
                  goto LABEL_796;
                }
                v531 = v286;
                v320 = *(_BYTE *)(v24 + 207);
                v321 = v320 < 0;
                if (v320 >= 0)
                  v322 = (const void *)(v24 + 184);
                else
                  v322 = *(const void **)(v24 + 184);
                v323 = v320 & 0x7F;
                if (v321)
                  v324 = *(_QWORD *)(v24 + 192);
                else
                  v324 = v323;
                sub_22F1D07D8(*(_QWORD *)(a1 + 88), v322, v324, 0, 1, (uint64_t)&v595);
                if ((v596 & 1) != 0)
                  goto LABEL_640;
                if (v288)
                {
                  v325 = v288;
                  do
                  {
                    v326 = *(_QWORD *)(v325 + 8);
                    v325 = v326 & 0xFFFFFFFFFFFFFFFCLL;
                  }
                  while ((v326 & 2) != 0 && v325);
                }
                else
                {
                  v325 = 0;
                }
                if (v325 != (_QWORD)v595)
                {
LABEL_640:
                  i = v545;
                  if (v545)
                    v337 = 0;
                  else
                    v337 = *v542 == 0;
                  v338 = v337;
                  if ((a11 & 2) == 0 || sub_22E808214(*(_QWORD *)(a1 + 272)) == 3)
                  {
                    v339 = *(_QWORD *)(a1 + 104);
                    *(_DWORD *)(v339 + 312) = *(_DWORD *)(a1 + 496);
                    *(_DWORD *)(v339 + 316) = 913;
                    if (*(char *)(v339 + 311) < 0)
                    {
                      **(_BYTE **)(v339 + 288) = 0;
                      *(_QWORD *)(v339 + 296) = 0;
                    }
                    else
                    {
                      *(_BYTE *)(v339 + 288) = 0;
                      *(_BYTE *)(v339 + 311) = 0;
                    }
                    __p[0] = (void *)(v339 + 320);
                    __p[1] = 0;
                    v564 = v339;
                    LOWORD(v565) = 1;
                    *(_BYTE *)(v339 + 320) = 0;
                    *(_DWORD *)(v339 + 664) = 0;
                    v340 = *(unsigned int *)(v339 + 776);
                    if ((_DWORD)v340)
                    {
                      v341 = *(_QWORD *)(v339 + 768);
                      v342 = 56 * v340;
                      do
                      {
                        if (*(char *)(v341 + v342 - 9) < 0)
                          operator delete(*(void **)(v341 + v342 - 32));
                        v342 -= 56;
                      }
                      while (v342);
                    }
                    *(_DWORD *)(v339 + 776) = 0;
                    v343 = *(_BYTE *)(v24 + 103);
                    v344 = v343 < 0;
                    if (v343 >= 0)
                      v345 = (void *)(v24 + 80);
                    else
                      v345 = *(void **)(v24 + 80);
                    v346 = v343 & 0x7F;
                    if (v344)
                      v347 = *(_QWORD *)(v24 + 88);
                    else
                      v347 = v346;
                    sub_22E3B89A8((unsigned __int8 **)__p, v345, v347);
                    v348 = (void **)(v24 + 8);
                    if (!(_DWORD)v338)
                      v348 = (void **)v513;
                    v349 = *((_BYTE *)v348 + 23);
                    if (v349 >= 0)
                      v350 = v348;
                    else
                      v350 = *v348;
                    if (v349 >= 0)
                      v351 = v349 & 0x7F;
                    else
                      v351 = (size_t)v348[1];
                    sub_22E3B89A8((unsigned __int8 **)__p, v350, v351);
                    do
                    {
                      v352 = (size_t *)v288;
                      v353 = *(_QWORD *)(v288 + 8);
                      if ((v353 & 2) == 0)
                        break;
                      v288 = v353 & 0xFFFFFFFFFFFFFFFCLL;
                    }
                    while ((v353 & 0xFFFFFFFFFFFFFFFCLL) != 0);
                    sub_22E3B89A8((unsigned __int8 **)__p, v352 + 4, *v352);
                    v354 = *(_BYTE *)(v24 + 207);
                    v355 = v354 < 0;
                    if (v354 >= 0)
                      v356 = (void *)(v24 + 184);
                    else
                      v356 = *(void **)(v24 + 184);
                    v357 = v354 & 0x7F;
                    if (v355)
                      v358 = *(_QWORD *)(v24 + 192);
                    else
                      v358 = v357;
                    sub_22E3B89A8((unsigned __int8 **)__p, v356, v358);
                    v359 = (unsigned __int8 *)__p[0];
                    i = v545;
                    if (!__p[0])
                    {
                      v359 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)__p[1]);
                      __p[0] = v359;
                    }
                    v359[*v359 + 1] = 2;
                    v360 = __p[0];
                    v361 = *(unsigned __int8 *)__p[0];
                    *(_BYTE *)__p[0] = v361 + 1;
                    v360[v361 + 2] = v338;
                    goto LABEL_682;
                  }
LABEL_796:
                  v97 = 3;
LABEL_797:
                  v77 = 1;
                  goto LABEL_551;
                }
                __p[0] = v566;
                __p[1] = v566;
                v564 = 1;
                v565 = 0;
                v362 = *((_QWORD *)v582[0] + (v218 + 1));
                if ((_DWORD)v362)
                {
                  v363 = v218 + 2;
                  do
                  {
                    v364 = v363 + 1;
                    v365 = *((_QWORD *)v582[0] + v363);
                    sub_22E793964(&__dst, (uint64_t *)v582[0] + v364, (uint64_t *)v582[0] + v364 + v365, v365);
                    sub_22E76C4AC(v24, (uint64_t)&__dst);
                    v366 = v591 >= 0 ? &__dst : (__int128 *)__dst;
                    v367 = v591 >= 0 ? HIBYTE(v591) & 0x7F : *((_QWORD *)&__dst + 1);
                    sub_22F1D07D8(*(_QWORD *)(a1 + 88), v366, v367, 0, 0, (uint64_t)&v593);
                    v368 = v594;
                    if ((v594 & 1) != 0)
                    {
                      if ((a11 & 2) == 0 || sub_22E808214(*(_QWORD *)(a1 + 272)) == 3)
                      {
                        std::operator+<char>();
                        v369 = std::string::append(&v567, "' referenced by AST file");
                        v370 = v369->__r_.__value_.__r.__words[2];
                        *(_OWORD *)v568 = *(_OWORD *)&v369->__r_.__value_.__l.__data_;
                        v569 = v370;
                        v369->__r_.__value_.__l.__size_ = 0;
                        v369->__r_.__value_.__r.__words[2] = 0;
                        v369->__r_.__value_.__r.__words[0] = 0;
                        if (v569 >= 0)
                          v371 = v568;
                        else
                          v371 = (void **)v568[0];
                        if (v569 >= 0)
                          v372 = HIBYTE(v569) & 0x7F;
                        else
                          v372 = (size_t)v568[1];
                        sub_22E769C10(a1, v371, v372);
                        if (SHIBYTE(v569) < 0)
                          operator delete(v568[0]);
                        if (SHIBYTE(v567.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v567.__r_.__value_.__l.__data_);
                      }
                    }
                    else
                    {
                      sub_22E3BA850((uint64_t)__p, (const void *)v593);
                    }
                    if (SHIBYTE(v591) < 0)
                      operator delete((void *)__dst);
                    if ((v368 & 1) != 0)
                      goto LABEL_852;
                    v363 = v364 + v365;
                    LODWORD(v362) = v362 - 1;
                  }
                  while ((_DWORD)v362);
                }
                *(_QWORD *)&v593 = v531;
                *(_QWORD *)&__dst = 0;
                if (!sub_22E78D100(v537 + 227, &v593, &__dst)
                  || (_QWORD)__dst == v537[227] + 48 * *((unsigned int *)v537 + 458))
                {
                  goto LABEL_819;
                }
                v373 = *(_QWORD *)(__dst + 16);
                v374 = 24;
                if (v373 == *(_QWORD *)(__dst + 8))
                  v374 = 28;
                v375 = *(unsigned int *)(__dst + v374);
                if ((_DWORD)v375)
                {
                  v376 = 8 * v375;
                  v377 = *(void ***)(__dst + 16);
                  while ((unint64_t)*v377 >= 0xFFFFFFFFFFFFFFFELL)
                  {
                    ++v377;
                    v376 -= 8;
                    if (!v376)
                      goto LABEL_819;
                  }
                }
                else
                {
                  v377 = *(void ***)(__dst + 16);
                }
                v430 = (void **)(v373 + 8 * v375);
                if (v377 == v430)
                  goto LABEL_819;
                v431 = *v377;
                v432 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)__p, *v377);
                if (__p[1] == __p[0])
                  v433 = (int64_t *)((char *)&v564 + 4);
                else
                  v433 = &v564;
                v434 = (void **)((char *)__p[1] + 8 * *(unsigned int *)v433);
LABEL_811:
                if (v432 == v434)
                {
                  if ((a11 & 2) == 0 || sub_22E808214(*(_QWORD *)(a1 + 272)) == 3)
                  {
                    v459 = *(_QWORD *)(a1 + 104);
                    *(_DWORD *)(v459 + 312) = *(_DWORD *)(a1 + 496);
                    *(_DWORD *)(v459 + 316) = 916;
                    if (*(char *)(v459 + 311) < 0)
                    {
                      **(_BYTE **)(v459 + 288) = 0;
                      *(_QWORD *)(v459 + 296) = 0;
                    }
                    else
                    {
                      *(_BYTE *)(v459 + 288) = 0;
                      *(_BYTE *)(v459 + 311) = 0;
                    }
                    __dst = (unint64_t)(v459 + 320);
                    v591 = v459;
                    v592 = 1;
                    *(_BYTE *)(v459 + 320) = 0;
                    *(_DWORD *)(v459 + 664) = 0;
                    v460 = *(unsigned int *)(v459 + 776);
                    if ((_DWORD)v460)
                    {
                      v461 = *(_QWORD *)(v459 + 768);
                      v462 = 56 * v460;
                      do
                      {
                        if (*(char *)(v461 + v462 - 9) < 0)
                          operator delete(*(void **)(v461 + v462 - 32));
                        v462 -= 56;
                      }
                      while (v462);
                    }
                    *(_DWORD *)(v459 + 776) = 0;
                    v463 = *(_BYTE *)(v24 + 103);
                    v464 = v463 < 0;
                    if (v463 >= 0)
                      v465 = (void *)(v24 + 80);
                    else
                      v465 = *(void **)(v24 + 80);
                    v466 = v463 & 0x7F;
                    if (v464)
                      v467 = *(_QWORD *)(v24 + 88);
                    else
                      v467 = v466;
                    sub_22E3B89A8((unsigned __int8 **)&__dst, v465, v467);
                    v468 = (unsigned __int8 *)__dst;
                    if (!(_QWORD)__dst)
                    {
                      v468 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&__dst + 1));
                      *(_QWORD *)&__dst = v468;
                    }
                    v468[*v468 + 1] = 2;
                    v469 = __dst;
                    v470 = *(unsigned __int8 *)__dst;
                    *(_BYTE *)__dst = v470 + 1;
                    *(_QWORD *)(v469 + 8 * v470 + 16) = 0;
                    v471 = v431[11];
                    do
                    {
                      v457 = (size_t *)v471;
                      v472 = *(_QWORD *)(v471 + 8);
                      if ((v472 & 2) == 0)
                        break;
                      v471 = v472 & 0xFFFFFFFFFFFFFFFCLL;
                    }
                    while (v471);
                    goto LABEL_851;
                  }
                }
                else
                {
                  *v432 = (void *)-2;
                  ++v565;
                  v435 = (unint64_t *)(v377 + 1);
                  while (v435 != (unint64_t *)v430)
                  {
                    v436 = *v435++;
                    v431 = (_QWORD *)v436;
                    if (v436 <= 0xFFFFFFFFFFFFFFFDLL)
                    {
                      v432 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)__p, v431);
                      if (__p[1] == __p[0])
                        v437 = (int64_t *)((char *)&v564 + 4);
                      else
                        v437 = &v564;
                      v434 = (void **)((char *)__p[1] + 8 * *(unsigned int *)v437);
                      v377 = (void **)(v435 - 1);
                      goto LABEL_811;
                    }
                  }
LABEL_819:
                  if (__p[1] == __p[0])
                    v438 = (int64_t *)((char *)&v564 + 4);
                  else
                    v438 = &v564;
                  v439 = *(unsigned int *)v438;
                  if ((_DWORD)v439)
                  {
                    v440 = 8 * v439;
                    v441 = (uint64_t *)__p[1];
                    while ((unint64_t)*v441 >= 0xFFFFFFFFFFFFFFFELL)
                    {
                      ++v441;
                      v440 -= 8;
                      if (!v440)
                        goto LABEL_833;
                    }
                  }
                  else
                  {
                    v441 = (uint64_t *)__p[1];
                  }
                  if (v441 == (uint64_t *)((char *)__p[1] + 8 * v439))
                  {
LABEL_833:
                    v444 = 1;
                    goto LABEL_853;
                  }
                  v442 = *v441;
                  if ((a11 & 2) == 0 || sub_22E808214(*(_QWORD *)(a1 + 272)) == 3)
                  {
                    v443 = *(_QWORD *)(a1 + 104);
                    *(_DWORD *)(v443 + 312) = *(_DWORD *)(a1 + 496);
                    *(_DWORD *)(v443 + 316) = 916;
                    if (*(char *)(v443 + 311) < 0)
                    {
                      **(_BYTE **)(v443 + 288) = 0;
                      *(_QWORD *)(v443 + 296) = 0;
                    }
                    else
                    {
                      *(_BYTE *)(v443 + 288) = 0;
                      *(_BYTE *)(v443 + 311) = 0;
                    }
                    __dst = (unint64_t)(v443 + 320);
                    v591 = v443;
                    v592 = 1;
                    *(_BYTE *)(v443 + 320) = 0;
                    *(_DWORD *)(v443 + 664) = 0;
                    v445 = *(unsigned int *)(v443 + 776);
                    if ((_DWORD)v445)
                    {
                      v446 = *(_QWORD *)(v443 + 768);
                      v447 = 56 * v445;
                      do
                      {
                        if (*(char *)(v446 + v447 - 9) < 0)
                          operator delete(*(void **)(v446 + v447 - 32));
                        v447 -= 56;
                      }
                      while (v447);
                    }
                    *(_DWORD *)(v443 + 776) = 0;
                    v448 = *(_BYTE *)(v24 + 103);
                    v449 = v448 < 0;
                    if (v448 >= 0)
                      v450 = (void *)(v24 + 80);
                    else
                      v450 = *(void **)(v24 + 80);
                    v451 = v448 & 0x7F;
                    if (v449)
                      v452 = *(_QWORD *)(v24 + 88);
                    else
                      v452 = v451;
                    sub_22E3B89A8((unsigned __int8 **)&__dst, v450, v452);
                    v453 = (unsigned __int8 *)__dst;
                    if (!(_QWORD)__dst)
                    {
                      v453 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&__dst + 1));
                      *(_QWORD *)&__dst = v453;
                    }
                    v453[*v453 + 1] = 2;
                    v454 = __dst;
                    v455 = *(unsigned __int8 *)__dst;
                    *(_BYTE *)__dst = v455 + 1;
                    *(_QWORD *)(v454 + 8 * v455 + 16) = 1;
                    v456 = *(_QWORD *)(v442 + 88);
                    do
                    {
                      v457 = (size_t *)v456;
                      v458 = *(_QWORD *)(v456 + 8);
                      if ((v458 & 2) == 0)
                        break;
                      v456 = v458 & 0xFFFFFFFFFFFFFFFCLL;
                    }
                    while (v456);
LABEL_851:
                    sub_22E3B89A8((unsigned __int8 **)&__dst, v457 + 4, *v457);
                    sub_22E3BB0B8((uint64_t)&__dst);
                  }
                }
LABEL_852:
                v444 = 0;
LABEL_853:
                if (__p[1] != __p[0])
                  free(__p[1]);
                if (!v444)
                  goto LABEL_856;
LABEL_382:
                v219 = *(_QWORD *)(a1 + 56);
                if (v219)
                {
                  v220 = *(_BYTE *)(v24 + 207);
                  v221 = v220 < 0;
                  if (v220 >= 0)
                    v222 = v24 + 184;
                  else
                    v222 = *(_QWORD *)(v24 + 184);
                  v223 = v220 & 0x7F;
                  if (v221)
                    v224 = *(_QWORD *)(v24 + 192);
                  else
                    v224 = v223;
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v219 + 32))(v219, v222, v224);
                }
                i = v545;
                goto LABEL_549;
              case 8:
                v126 = __len;
                v127 = *(_BYTE *)(v24 + 103);
                v128 = v127 < 0;
                if (v127 >= 0)
                  v129 = (const void **)(v24 + 80);
                else
                  v129 = *(const void ***)(v24 + 80);
                v130 = v127 & 0x7F;
                if (v128)
                  v131 = *(_QWORD *)(v24 + 88);
                else
                  v131 = v130;
                v132 = sub_22F138980(*(uint64_t **)(*(_QWORD *)(a1 + 120) + 104), v129, v131, 0, 1, 1);
                v527 = v126;
                if (v132 && (v133 = v132, (v134 = *(_QWORD *)(v132 + 40)) != 0))
                {
                  v135 = *(_QWORD *)(a1 + 120);
                  if ((*(_BYTE *)(*(_QWORD *)(v135 + 32) + 152) & 2) == 0 && (*v542 | 4) != 5)
                  {
                    sub_22F1D0728(*(_QWORD *)(v135 + 80), (char *)__src, __len, 1, (uint64_t)&__dst);
                    if ((v591 & 1) != 0 || (v134 = __dst, (_QWORD)__dst != *(_QWORD *)(v133 + 40)))
                    {
                      if ((a11 & 2) == 0 || sub_22E808214(*(_QWORD *)(a1 + 272)) == 3)
                      {
                        v327 = *(_QWORD *)(a1 + 104);
                        *(_DWORD *)(v327 + 312) = *(_DWORD *)(a1 + 496);
                        *(_DWORD *)(v327 + 316) = 915;
                        if (*(char *)(v327 + 311) < 0)
                        {
                          **(_BYTE **)(v327 + 288) = 0;
                          *(_QWORD *)(v327 + 296) = 0;
                        }
                        else
                        {
                          *(_BYTE *)(v327 + 288) = 0;
                          *(_BYTE *)(v327 + 311) = 0;
                        }
                        __p[0] = (void *)(v327 + 320);
                        __p[1] = 0;
                        v564 = v327;
                        LOWORD(v565) = 1;
                        *(_BYTE *)(v327 + 320) = 0;
                        *(_DWORD *)(v327 + 664) = 0;
                        v391 = *(unsigned int *)(v327 + 776);
                        if ((_DWORD)v391)
                        {
                          v392 = *(_QWORD *)(v327 + 768);
                          v393 = 56 * v391;
                          do
                          {
                            if (*(char *)(v392 + v393 - 9) < 0)
                              operator delete(*(void **)(v392 + v393 - 32));
                            v393 -= 56;
                          }
                          while (v393);
                        }
                        *(_DWORD *)(v327 + 776) = 0;
                        v394 = *(_BYTE *)(v24 + 103);
                        v395 = v394 < 0;
                        if (v394 >= 0)
                          v396 = (void *)(v24 + 80);
                        else
                          v396 = *(void **)(v24 + 80);
                        v397 = v394 & 0x7F;
                        if (v395)
                          v398 = *(_QWORD *)(v24 + 88);
                        else
                          v398 = v397;
                        sub_22E3B89A8((unsigned __int8 **)__p, v396, v398);
                        sub_22E3B89A8((unsigned __int8 **)__p, __src, __len);
                        sub_22E3B89A8((unsigned __int8 **)__p, **(void ***)(v133 + 40), *(_QWORD *)(*(_QWORD *)(v133 + 40) + 8));
                        sub_22E3BB0B8((uint64_t)__p);
                        i = v545;
                      }
                      goto LABEL_796;
                    }
                  }
                  v136 = *(_QWORD *)(v134 + 8);
                  if (v136 > 0x7FFFFFFFFFFFFFF7)
                    goto LABEL_960;
                  v137 = *(void **)v134;
                }
                else
                {
                  v136 = __len;
                  if (__len > 0x7FFFFFFFFFFFFFF7)
LABEL_960:
                    abort();
                  v137 = __src;
                }
                if (v136 >= 0x17)
                {
                  v241 = (v136 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v136 | 7) != 0x17)
                    v241 = v136 | 7;
                  v242 = v241 + 1;
                  v243 = v137;
                  v244 = (void **)operator new(v241 + 1);
                  v137 = v243;
                  v228 = v244;
                  v564 = v242 | 0x8000000000000000;
                  __p[0] = v244;
                  __p[1] = (void *)v136;
                }
                else
                {
                  HIBYTE(v564) = v136;
                  v228 = __p;
                  if (!v136)
                    goto LABEL_428;
                }
                memmove(v228, v137, v136);
LABEL_428:
                *((_BYTE *)v228 + v136) = 0;
                if (*(char *)(v24 + 127) < 0)
                  operator delete(*v521);
                v245 = *(_OWORD *)__p;
                v246 = v24 + 104;
                goto LABEL_491;
              case 9:
                v225 = __src;
                if (!__src)
                {
                  __p[1] = 0;
                  __p[0] = 0;
                  v564 = 0;
                  goto LABEL_488;
                }
                v226 = (void *)__len;
                if (__len > 0x7FFFFFFFFFFFFFF7)
                  goto LABEL_960;
                if (__len >= 0x17)
                {
                  v277 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((__len | 7) != 0x17)
                    v277 = __len | 7;
                  v278 = v277 + 1;
                  v227 = operator new(v277 + 1);
                  v564 = v278 | 0x8000000000000000;
                  __p[0] = v227;
                  __p[1] = v226;
                }
                else
                {
                  HIBYTE(v564) = __len;
                  v227 = __p;
                  if (!__len)
                    goto LABEL_487;
                }
                memmove(v227, v225, (size_t)v226);
LABEL_487:
                *((_BYTE *)v226 + (_QWORD)v227) = 0;
LABEL_488:
                if (*(char *)(v24 + 55) < 0)
                  operator delete(*(void **)(v24 + 32));
                v245 = *(_OWORD *)__p;
                v246 = v24 + 32;
LABEL_491:
                *(_OWORD *)v246 = v245;
                *(_QWORD *)(v246 + 16) = v564;
                goto LABEL_549;
              case 10:
                v120 = __src;
                if (!__src)
                {
                  __p[1] = 0;
                  __p[0] = 0;
                  v564 = 0;
                  goto LABEL_480;
                }
                v121 = (void *)__len;
                if (__len > 0x7FFFFFFFFFFFFFF7)
                  goto LABEL_960;
                if (__len >= 0x17)
                {
                  v275 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((__len | 7) != 0x17)
                    v275 = __len | 7;
                  v276 = v275 + 1;
                  v122 = operator new(v275 + 1);
                  v564 = v276 | 0x8000000000000000;
                  __p[0] = v122;
                  __p[1] = v121;
                }
                else
                {
                  HIBYTE(v564) = __len;
                  v122 = __p;
                  if (!__len)
                    goto LABEL_479;
                }
                memmove(v122, v120, (size_t)v121);
LABEL_479:
                *((_BYTE *)v121 + (_QWORD)v122) = 0;
LABEL_480:
                if (*(char *)(v24 + 79) < 0)
                  operator delete(*(void **)(v24 + 56));
                v245 = *(_OWORD *)__p;
                v246 = v24 + 56;
                goto LABEL_491;
              default:
                goto LABEL_549;
            }
          }
          v96 = v578;
          v578 = 0;
          __p[0] = v96;
          sub_22E769A6C((uint64_t *)a1, (uint64_t **)__p);
          if (__p[0])
            (*(void (**)(void *))(*(_QWORD *)__p[0] + 8))(__p[0]);
          v77 = 1;
          v97 = 1;
LABEL_551:
          if ((v579 & 1) != 0)
          {
            v307 = v578;
            v578 = 0;
            if (v307)
              (*(void (**)(void *))(*(_QWORD *)v307 + 8))(v307);
          }
          v75 = v97;
LABEL_555:
          v18 = a11;
          goto LABEL_110;
        }
        if (v74 || (v102 = sub_22E77C270(a1, v24, i != 0, v18), !(_DWORD)v102))
        {
          if ((v544 & 1) == 0 && (*v542 | 4) != 5)
          {
            v103 = **(_QWORD **)(*(_QWORD *)(a1 + 120) + 104);
            if (*(_BYTE *)(a1 + 7326))
              v104 = v523;
            else
              v104 = v524;
            if ((*(_WORD *)(v103 + 848) & 0x40) != 0 && *(_QWORD *)(v24 + 1200) > *(_QWORD *)(v103 + 232) && *v542 == 0)
              v104 = v524;
            v106 = 0;
            while (v104 != v106)
            {
              v107 = sub_22E76A92C(a1, v24, ++v106, (v18 & 2) == 0);
              v75 = 3;
              v74 = 1;
              if (v107 < 8 || (v107 & 6) == 4)
                goto LABEL_181;
            }
          }
          v79 = *(_QWORD *)(a1 + 56);
          if (v79)
          {
            v80 = *(_BYTE *)(v24 + 31);
            v81 = v80 < 0;
            v82 = v80 >= 0 ? v24 + 8 : *(_QWORD *)(v24 + 8);
            v83 = v80 & 0x7F;
            v84 = v81 ? *(_QWORD *)(v24 + 16) : v83;
            (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 104))(v79, v82, v84, *(unsigned int *)(v24 + 4));
            v85 = *(_QWORD *)(a1 + 56);
            if (v85)
            {
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v85 + 112))(v85))
              {
                if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 120))(*(_QWORD *)(a1 + 56)))
                  v86 = v523;
                else
                  v86 = v524;
                if (v86)
                {
                  v87 = 0;
                  do
                  {
                    v88 = v87++ >= v524;
                    sub_22E76DF4C(v24, v87, (uint64_t)__p);
                    if (v564 >= 0)
                      v89 = __p;
                    else
                      v89 = (void **)__p[0];
                    if (v564 >= 0)
                      v90 = (void *)(HIBYTE(v564) & 0x7F);
                    else
                      v90 = __p[1];
                    (*(void (**)(_QWORD, void **, void *, _BOOL8, _QWORD, BOOL))(**(_QWORD **)(a1 + 56)
                                                                                          + 128))(*(_QWORD *)(a1 + 56), v89, v90, v88, v566[16], (*(_DWORD *)(v24 + 4) & 0xFFFFFFFB) == 1);
                    if (SHIBYTE(v564) < 0)
                      operator delete(__p[0]);
                    v74 = 1;
                  }
                  while (v86 != v87);
                  v75 = 0;
                }
                else
                {
                  v75 = 0;
                  v74 = 1;
                }
                v77 = 1;
                goto LABEL_555;
              }
            }
          }
          v75 = 0;
        }
        else
        {
          v75 = v102;
        }
        v74 = 1;
LABEL_181:
        v77 = 1;
        goto LABEL_110;
      }
      if (HIDWORD(v580) != 17)
      {
        if (HIDWORD(v580) != 16)
        {
          sub_22E746760(v25, (uint64_t *)__p);
          if (!__p[0])
            goto LABEL_183;
          sub_22E769A6C((uint64_t *)a1, (uint64_t **)__p);
          if (__p[0])
            (*(void (**)(void *))(*(_QWORD *)__p[0] + 8))(__p[0]);
          v75 = 1;
          goto LABEL_181;
        }
        v91 = *(_OWORD *)(v25 + 16);
        *(_OWORD *)v532 = *(_OWORD *)v25;
        *(_OWORD *)(v24 + 808) = v91;
        *(_DWORD *)(v24 + 824) = *(_DWORD *)(v25 + 32);
        *(_DWORD *)(v24 + 828) = *(_DWORD *)(v24 + 428);
        sub_22E743814((uint64_t *)(v24 + 832), *(uint64_t **)(v24 + 432), *(uint64_t **)(v24 + 440), (uint64_t)(*(_QWORD *)(v24 + 440) - *(_QWORD *)(v24 + 432)) >> 4);
        sub_22E747DF0(v24 + 856, v24 + 456);
        *(_QWORD *)(v24 + 1128) = *(_QWORD *)(v24 + 728);
        sub_22E746760(v25, (uint64_t *)__p);
        if (!__p[0])
        {
          sub_22E76B97C(__p, v532, 16, 0);
          if (!__p[0])
            goto LABEL_183;
          (*(void (**)(void *))(*(_QWORD *)__p[0] + 8))(__p[0]);
          goto LABEL_105;
        }
LABEL_107:
        sub_22E769A6C((uint64_t *)a1, (uint64_t **)__p);
        if (__p[0])
          (*(void (**)(void *))(*(_QWORD *)__p[0] + 8))(__p[0]);
        goto LABEL_109;
      }
      if (i || (v98 = *(_QWORD *)(a1 + 56)) == 0)
      {
        sub_22E746760(v25, (uint64_t *)__p);
        if (!__p[0])
          goto LABEL_183;
        goto LABEL_107;
      }
      v99 = sub_22E76E528((llvm::BitstreamCursor *)v25, v18, (*v542 & 0xFFFFFFFB) == 1, v98, a1 + 10992);
      if ((_DWORD)v99 == 1)
        goto LABEL_105;
      if ((v544 & 1) != 0
        || ((_DWORD)v99 == 5 ? (v100 = *(_BYTE *)(a1 + 7325) == 0) : (v100 = 1),
            v100 ? (v101 = 0) : (v101 = 1),
            !(_DWORD)v99 || (v101 & 1) != 0))
      {
LABEL_183:
        v77 = 2;
        goto LABEL_110;
      }
      v77 = 1;
      v75 = v99;
LABEL_110:
      if ((v581 & 1) != 0)
      {
        v78 = v580;
        v580 = 0;
        if (v78)
          (*(void (**)(void *))(*(_QWORD *)v78 + 8))(v78);
      }
    }
    while ((v77 | 2) == 2);
    if (v582[0] != &v583)
      free(v582[0]);
    v52 = 1;
    v16 = v510;
    v15 = v511;
    if ((v75 - 1) < 6)
    {
      v61 = 0;
      v547 = v75;
      goto LABEL_883;
    }
    if ((_DWORD)v75 || v525 > 5 || ((1 << v525) & 0x23) == 0)
      goto LABEL_86;
    if (*(char *)(v24 + 103) < 0 ? *(_QWORD *)(v24 + 88) : *(unsigned __int8 *)(v24 + 103))
      goto LABEL_86;
    if (v514)
    {
      v478 = *(_QWORD *)(a1 + 104);
      *(_DWORD *)(v478 + 312) = *(_DWORD *)(a1 + 496);
      *(_DWORD *)(v478 + 316) = 919;
      if (*(char *)(v478 + 311) < 0)
      {
        **(_BYTE **)(v478 + 288) = 0;
        *(_QWORD *)(v478 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v478 + 288) = 0;
        *(_BYTE *)(v478 + 311) = 0;
      }
      v14 = v525;
      v582[0] = (void *)(v478 + 320);
      v582[1] = 0;
      *(_QWORD *)&v583 = v478;
      WORD4(v583) = 1;
      *(_BYTE *)(v478 + 320) = 0;
      *(_DWORD *)(v478 + 664) = 0;
      v479 = *(unsigned int *)(v478 + 776);
      if ((_DWORD)v479)
      {
        v480 = *(_QWORD *)(v478 + 768);
        v481 = 56 * v479;
        do
        {
          if (*(char *)(v480 + v481 - 9) < 0)
            operator delete(*(void **)(v480 + v481 - 32));
          v481 -= 56;
        }
        while (v481);
      }
      *(_DWORD *)(v478 + 776) = 0;
      sub_22E3B89A8((unsigned __int8 **)v582, v510, v511);
      sub_22E3BB0B8((uint64_t)v582);
      v61 = 0;
      v52 = 1;
      v476 = v515;
      goto LABEL_891;
    }
    v61 = 0;
    v547 = v515;
LABEL_883:
    v14 = v525;
LABEL_67:
    if ((v571 & 1) != 0)
    {
      v63 = v570;
      v570 = 0;
      if (v63)
        (*(void (**)(void *))(*(_QWORD *)v63 + 8))(v63);
    }
  }
  while ((v61 & 1) != 0);
  v484 = *(_QWORD *)(a1 + 272);
  if (v535)
  {
    Key = llvm::StringMapImpl::FindKey();
    if (Key == -1)
      v486 = *(unsigned int *)(v484 + 16);
    else
      v486 = Key;
    v31 = v547;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v484 + 8) + 8 * v486) + 16) = 1;
    goto LABEL_956;
  }
  v31 = v547;
LABEL_930:
  sub_22E8082EC(v484);
LABEL_956:
  if (SHIBYTE(v553) < 0)
    operator delete(v551);
  return v31;
}

void sub_22E774D40(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int16 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  std::error_code v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;
  int v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  _OWORD *v38;
  __int128 v39;
  __int128 v40;
  unsigned int v41;
  _OWORD *v42;
  _OWORD *v43;
  __int128 v44;
  __int128 v45;
  size_t v46;
  const void *v47;
  void **v48;
  uint64_t v49;
  unsigned int v50;
  char *v51;
  unsigned int v52;
  _OWORD *v53;
  _OWORD *v54;
  __int128 v55;
  __int128 v56;
  size_t v57;
  const void *v58;
  __int128 *p_src;
  size_t v60;
  const void *v61;
  void **p_dst;
  const char *v63;
  unsigned int v64;
  _OWORD *v65;
  _OWORD *v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  const void *v72;
  size_t v73;
  __int128 *v74;
  uint64_t *v75;
  uint64_t v76;
  void *v77;
  size_t v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  size_t v86;
  uint64_t *v87;
  size_t v88;
  unint64_t v89;
  char *v90;
  unint64_t v91;
  _QWORD *v92;
  size_t v93;
  uint64_t *v94;
  size_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t *v102;
  unint64_t v103;
  char *v104;
  size_t v105;
  uint64_t *v106;
  size_t v107;
  unint64_t v108;
  void **v109;
  size_t v110;
  _QWORD *v111;
  void **v112;
  size_t v113;
  uint64_t *v114;
  size_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  char *v124;
  char *v125;
  unint64_t v126;
  uint64_t v127;
  char *v128;
  __int128 v129;
  uint64_t *v130;
  int64x2_t v131;
  char v132;
  char *v133;
  char *v134;
  __int128 v135;
  int64x2_t v136;
  char *v137;
  uint64_t v138;
  _BOOL4 v139;
  std::string *v140;
  uint64_t v141;
  const char *v142;
  __int128 v143;
  unsigned int v144;
  int v145;
  __int16 v146;
  __int16 v147;
  __int16 v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  __int16 v163;
  __int16 v164;
  const void *v165;
  size_t v166;
  const void *v167;
  __int128 *v168;
  std::string *size;
  std::string *v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  std::string *v176;
  void **p_data;
  char v178;
  void *v179;
  size_t v180;
  unint64_t v181;
  size_t *v182;
  uint64_t v183;
  unint64_t v184;
  size_t *v185;
  uint64_t v186;
  int v187;
  unint64_t v188;
  int v189;
  _OWORD *v190;
  char v191;
  size_t v192;
  _BYTE *v193;
  size_t v194;
  uint64_t *v195;
  size_t v196;
  unint64_t v197;
  uint64_t v198;
  std::string *v199;
  std::string *v200;
  char v201;
  int v202;
  uint64_t v203;
  uint64_t *v204;
  unsigned int *v205;
  uint64_t v206;
  int v207;
  uint64_t v208;
  size_t v209;
  uint64_t *v210;
  size_t v211;
  unint64_t v212;
  void **v213;
  char v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  __int128 v222;
  __int128 v223;
  _QWORD *v224;
  uint64_t v225;
  __int128 v226;
  uint64_t v227;
  __int128 v228;
  char *v229;
  char *v230;
  char v231;
  const char *v232;
  unsigned int v233;
  unint64_t v234;
  char *v235;
  uint64_t v236;
  __int128 v237;
  __int128 v238;
  int v239;
  uint64_t *v240;
  uint64_t v241;
  unsigned int *v242;
  unsigned int v243;
  __int128 *v244;
  size_t v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  int v250;
  unint64_t v251;
  uint64_t *v252;
  uint64_t v253;
  int v254;
  int v255;
  unsigned int v256;
  int v257;
  int v258;
  uint64_t v259;
  int v260;
  unsigned int v261;
  _DWORD *v262;
  int v263;
  _DWORD *v264;
  int v265;
  BOOL v266;
  unsigned int v267;
  _DWORD *v268;
  unsigned int v269;
  unint64_t v270;
  int v271;
  uint64_t v272;
  int v273;
  unsigned int v274;
  int v275;
  _DWORD *v276;
  int v277;
  BOOL v278;
  unsigned int v279;
  int v280;
  uint64_t v281;
  int v282;
  unsigned int v283;
  int v284;
  _DWORD *v285;
  int v286;
  BOOL v287;
  unsigned int v288;
  uint64_t v289;
  uint64_t v290;
  int v291;
  unint64_t v292;
  int v293;
  unsigned int v294;
  int v295;
  unint64_t v296;
  unint64_t v297;
  int v298;
  unint64_t v299;
  uint64_t v300;
  uint64_t *v301;
  int v302;
  _BOOL4 v303;
  uint64_t *v304;
  uint64_t v305;
  int v306;
  int v307;
  int v308;
  _BYTE *v309;
  size_t v310;
  int v311;
  unsigned int v312;
  uint64_t v313;
  uint64_t i;
  int v315;
  uint64_t v316;
  _DWORD *v317;
  unsigned int v318;
  int v319;
  unint64_t v320;
  int v321;
  uint64_t v322;
  uint64_t v323;
  int v324;
  unint64_t v325;
  uint64_t v326;
  uint64_t k;
  int v328;
  unint64_t v329;
  _DWORD *v330;
  int v331;
  unsigned int v332;
  unsigned int v333;
  unint64_t v334;
  unsigned int v335;
  uint64_t v336;
  unint64_t v337;
  unsigned int v338;
  unint64_t v339;
  unsigned int v340;
  _BOOL8 v341;
  uint64_t v342;
  uint64_t v343;
  int v344;
  unint64_t v345;
  int v346;
  uint64_t v347;
  uint64_t v348;
  int v349;
  unint64_t v350;
  uint64_t *v351;
  unsigned int v352;
  unsigned int v353;
  char v354;
  uint64_t v355;
  unint64_t v356;
  _DWORD *v357;
  _QWORD *v358;
  uint64_t v359;
  int v360;
  unsigned int v361;
  uint64_t *v362;
  uint64_t v363;
  uint64_t v364;
  unint64_t v365;
  uint64_t *v366;
  char *v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  _QWORD *v371;
  uint64_t v372;
  uint64_t v373;
  int v374;
  unint64_t v375;
  char *v376;
  _DWORD *v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  _QWORD *v381;
  unsigned int v382;
  int v383;
  unsigned int v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  unint64_t v388;
  unsigned int v389;
  unsigned int v390;
  unint64_t v391;
  uint64_t v392;
  _QWORD *v393;
  unsigned int v394;
  uint64_t v395;
  int v396;
  uint64_t *v397;
  unint64_t v398;
  uint64_t v399;
  _DWORD *v400;
  uint64_t v401;
  unint64_t v402;
  _BYTE *v403;
  int64_t v404;
  uint64_t v405;
  uint64_t v406;
  unsigned int v407;
  unsigned int v408;
  int v409;
  unint64_t v410;
  unint64_t v411;
  int v412;
  unint64_t v413;
  int v414;
  unsigned int v415;
  int v416;
  unint64_t v417;
  unint64_t v418;
  int v419;
  unint64_t v420;
  char *v421;
  uint64_t *v422;
  uint64_t v423;
  char *v424;
  uint64_t v425;
  char *v426;
  uint64_t v427;
  _QWORD *v428;
  uint64_t v429;
  unsigned int v430;
  unint64_t v431;
  unint64_t v432;
  void *v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t *v436;
  unint64_t v437;
  _QWORD *v438;
  uint64_t v439;
  uint64_t v440;
  int v441;
  unint64_t v442;
  unsigned int v443;
  _DWORD *v444;
  unint64_t v445;
  uint64_t v446;
  uint64_t v447;
  int v448;
  unint64_t v449;
  int v450;
  unsigned int v451;
  unsigned int v452;
  uint64_t v453;
  unsigned int v454;
  __int128 *v455;
  size_t v456;
  uint64_t v457;
  _QWORD *v458;
  uint64_t v459;
  uint64_t v460;
  int v461;
  unint64_t v462;
  unint64_t v463;
  unint64_t v464;
  uint64_t v465;
  uint64_t *v466;
  uint64_t v467;
  _BYTE *v468;
  uint64_t *v469;
  _DWORD *v470;
  uint64_t v471;
  uint64_t v472;
  _QWORD *v473;
  unint64_t v474;
  unint64_t v475;
  unint64_t v476;
  char *v477;
  _DWORD *v478;
  uint64_t v479;
  unint64_t v480;
  uint64_t *v481;
  unsigned int v482;
  unint64_t v483;
  unsigned int v484;
  uint64_t v485;
  unint64_t v486;
  uint64_t v487;
  __int128 v488;
  unsigned int v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  char v494;
  int v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  unint64_t v499;
  char *v500;
  _OWORD *v501;
  __int128 v502;
  BOOL v503;
  char *v504;
  _DWORD *v505;
  unsigned int v506;
  int v507;
  unint64_t v508;
  unsigned int v509;
  uint64_t v510;
  unsigned int v511;
  unint64_t v512;
  unsigned int v513;
  unsigned int v514;
  uint64_t v515;
  unint64_t v516;
  uint64_t v517;
  __int128 v518;
  unsigned int v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  char v524;
  int v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  unint64_t v529;
  char *v530;
  _OWORD *v531;
  __int128 v532;
  BOOL v533;
  char *v534;
  uint64_t v535;
  void *v536;
  int v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  int v541;
  uint64_t v542;
  uint64_t v543;
  _DWORD *v544;
  _DWORD *v545;
  int v546;
  _DWORD *v547;
  unint64_t v548;
  unint64_t v549;
  unint64_t v550;
  char *v551;
  int v552;
  int v553;
  char *v554;
  char *v555;
  __int128 v556;
  uint64_t v557;
  _QWORD *v558;
  unsigned int v559;
  uint64_t v560;
  uint64_t v561;
  _BYTE *v562;
  _BYTE *v563;
  char *v564;
  unint64_t v565;
  unint64_t v566;
  unint64_t v567;
  uint64_t v568;
  uint64_t v569;
  unint64_t v570;
  void *v571;
  char *v572;
  uint64_t v573;
  _QWORD *v574;
  uint64_t v575;
  uint64_t v576;
  int v577;
  unint64_t v578;
  uint64_t v579;
  _QWORD *v580;
  unsigned int v581;
  uint64_t v582;
  uint64_t v583;
  _BYTE *v584;
  char *v585;
  unint64_t v586;
  unint64_t v587;
  unint64_t v588;
  uint64_t v589;
  uint64_t v590;
  unint64_t v591;
  void *v592;
  char *v593;
  uint64_t v594;
  _QWORD *v595;
  unsigned int v596;
  uint64_t v597;
  unint64_t v598;
  uint64_t v599;
  _BYTE *v600;
  int64_t v601;
  unint64_t v602;
  unint64_t v603;
  unint64_t v604;
  uint64_t v605;
  uint64_t v606;
  unint64_t v607;
  char *v608;
  char *v609;
  char *v610;
  uint64_t v611;
  _QWORD *v612;
  unsigned int v613;
  uint64_t v614;
  uint64_t v615;
  char v616;
  _QWORD *v617;
  _BYTE *v618;
  char *v619;
  unint64_t v620;
  unint64_t v621;
  unint64_t v622;
  uint64_t v623;
  uint64_t v624;
  unint64_t v625;
  void *v626;
  char *v627;
  uint64_t v628;
  unsigned int j;
  int v630;
  unint64_t v631;
  unint64_t v632;
  int v633;
  unint64_t v634;
  unsigned int v635;
  uint64_t v636;
  unsigned int m;
  int v638;
  unint64_t v639;
  int v640;
  unint64_t v641;
  unint64_t v642;
  int v643;
  unint64_t v644;
  void *v645;
  uint64_t v646;
  uint64_t v647;
  unint64_t v648;
  uint64_t *v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  unint64_t v653;
  uint64_t *v654;
  uint64_t v655;
  _DWORD *v656;
  _DWORD *v657;
  uint64_t v658;
  uint64_t *v659;
  uint64_t *v660;
  __int128 v661;
  _QWORD *v662;
  char *v663;
  unint64_t v664;
  unsigned int v665;
  uint64_t v666;
  unsigned int v667;
  unsigned int v668;
  unsigned int v669;
  int v670;
  int v671;
  unint64_t v672;
  unsigned int v673;
  unint64_t v674;
  unsigned int v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  unsigned int v680;
  __int128 *v681;
  uint64_t v682;
  BOOL v683;
  char *v684;
  BOOL v685;
  int v686;
  int v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  _BOOL4 v691;
  uint64_t *v692;
  unint64_t *v693;
  unint64_t *v694;
  unint64_t *v695;
  uint64_t v696;
  uint64_t v697;
  std::string *__str;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  unsigned int v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  _DWORD *v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  _QWORD *v719;
  uint64_t v720;
  _QWORD *v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  _OWORD *v729;
  uint64_t v730;
  uint64_t v731;
  _BYTE *v732;
  uint64_t v733;
  llvm::StringMapImpl *v734;
  _QWORD *v735;
  _QWORD *v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t *v740;
  uint64_t v741;
  uint64_t *v742;
  uint64_t v743;
  uint64_t *v744;
  uint64_t v745;
  uint64_t *v746;
  uint64_t v747;
  uint64_t v748;
  int v749;
  int v750;
  uint64_t v751;
  llvm::BitstreamCursor *v752;
  uint64_t v753;
  void **v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  unsigned int v762;
  _OWORD *v763;
  unint64_t v764;
  uint64_t v765;
  uint64_t *v766;
  int v767;
  char v768;
  void **__dst;
  size_t v770;
  int64_t v771;
  void *v772[2];
  uint64_t v773;
  size_t __len[2];
  _BYTE v775[32];
  __int128 v776;
  _QWORD *v777;
  uint64_t v778;
  char *v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  char v784;
  void *v785;
  uint64_t v786;
  _BYTE v787[512];
  __int128 __src;
  unint64_t v789;
  __int16 v790;
  int v791[2];
  char v792;
  __int128 v793;
  uint64_t v794;
  uint64_t v795;
  char v796;
  __int128 v797;
  __int128 v798;
  uint64_t v799;
  void *v800[3];
  char *v801[2];
  _QWORD v802[60];
  std::error_code v803;
  std::error_code v804;
  std::error_code v805;
  std::error_code v806;
  std::error_code v807;

  v3 = a3;
  v802[57] = *MEMORY[0x24BDAC8D0];
  v6 = a3 + 392;
  llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)(a3 + 392), 8, 0);
  if (!*a1)
  {
    v706 = 0;
    v732 = (_BYTE *)(a2 + 6512);
    *(_QWORD *)(v3 + 368) = 8 * *(_QWORD *)(v3 + 408) - *(unsigned int *)(v3 + 424);
    v785 = v787;
    v693 = (unint64_t *)(a2 + 11184);
    v736 = (_QWORD *)(a2 + 7208);
    v786 = 0x4000000000;
    v747 = a2 + 7216;
    v695 = (unint64_t *)(a2 + 6520);
    v738 = a2 + 6600;
    v694 = (unint64_t *)(a2 + 6680);
    v737 = a2 + 6760;
    v705 = a2 + 7064;
    v716 = a2 + 4120;
    v734 = (llvm::StringMapImpl *)(a2 + 6824);
    v731 = a2 + 6464;
    v700 = a2 + 4768;
    v704 = a2 + 4592;
    v703 = a2 + 4448;
    v733 = a2 + 4336;
    v718 = a2 + 4232;
    v721 = (_QWORD *)(a2 + 4200);
    v756 = v3 + 456;
    v758 = v3 + 2184;
    v746 = (uint64_t *)(v3 + 2224);
    v745 = v3 + 2248;
    v727 = a2 + 8;
    v752 = (llvm::BitstreamCursor *)(v3 + 1768);
    v744 = (uint64_t *)(v3 + 1808);
    v743 = v3 + 1832;
    v757 = v3 + 2720;
    v742 = (uint64_t *)(v3 + 2760);
    v741 = v3 + 2784;
    v735 = (_QWORD *)(v3 + 3064);
    v715 = v3 + 2144;
    v726 = a2 + 16;
    v730 = v3 + 3184;
    v707 = a2 + 2888;
    v699 = v3 + 2544;
    v720 = v3 + 1592;
    v729 = (_OWORD *)(v3 + 776);
    v725 = a2 + 600;
    v724 = a2 + 1640;
    v723 = v3 + 1640;
    v702 = v3 + 2672;
    v719 = (_QWORD *)(v3 + 1744);
    v714 = a2 + 3992;
    v713 = v3 + 1696;
    v722 = a2 + 40;
    v728 = a2 + 3680;
    v712 = a2 + 2808;
    v711 = v3 + 3096;
    v710 = (_DWORD *)(v3 + 3128);
    v708 = v3 + 3232;
    v709 = a2 + 2704;
    v717 = v3 + 2616;
    __str = (std::string *)(v3 + 184);
    v696 = v3 + 56;
    v697 = v3 + 32;
    v701 = v3 + 224;
    v759 = v3 + 1208;
    v740 = (uint64_t *)(v3 + 1248);
    v739 = v3 + 1272;
    v760 = v3;
    v755 = a2;
    v761 = v6;
    while (1)
    {
      sub_22E748020(v6, 0, (uint64_t)&v783);
      if ((v784 & 1) != 0)
      {
        v8 = v783;
        v783 = 0;
        *a1 = v8;
        goto LABEL_9;
      }
      if ((_DWORD)v783 != 2)
      {
        if ((_DWORD)v783 == 1)
        {
          v11 = *(_QWORD *)(a2 + 128);
          if (v11)
          {
            v12 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*(_QWORD *)(v11 + 1960) + 80) + 72), *(_QWORD *)(*(_QWORD *)(v11 + 1960) + 80));
            v13 = v12 + 40;
            if (!v12)
              v13 = 0;
            v14 = *(_WORD *)(v13 + 8);
            if ((v14 & 0x80) != 0 && (*(_BYTE *)(*(_QWORD *)(v11 + 2000) + 1) & 1) == 0)
              *(_WORD *)(v13 + 8) = v14 | 0x800;
          }
          *a1 = 0;
          goto LABEL_9;
        }
        if (!(_DWORD)v783)
        {
          *(_QWORD *)&v803.__val_ = std::generic_category();
          v803.__cat_ = (const std::error_category *)"error at end of module block in AST file";
          llvm::createStringError((llvm *)0x5C, v803, v7);
          goto LABEL_9;
        }
        LODWORD(v786) = 0;
        v772[1] = 0;
        v772[0] = 0;
        llvm::BitstreamCursor::readRecord();
        if ((BYTE8(v793) & 1) != 0)
        {
          v21 = v793;
          *(_QWORD *)&v793 = 0;
          *a1 = v21;
          goto LABEL_47;
        }
        v18 = *(_QWORD *)(a2 + 128);
        if (!v18
          && ((v793 - 5) > 0x3E || ((1 << (v793 - 5)) & 0x42000C4C20002709) == 0)
          && (_DWORD)v793 != 3)
        {
          LODWORD(v9) = 2;
          goto LABEL_813;
        }
        LODWORD(v9) = 0;
        switch((int)v793)
        {
          case 1:
            if (*(_DWORD *)(v3 + 3208))
            {
              *(_QWORD *)&v20.__val_ = std::generic_category();
              v20.__cat_ = (const std::error_category *)"duplicate TYPE_OFFSET record in AST file";
LABEL_914:
              v579 = 92;
LABEL_915:
              llvm::createStringError((llvm *)v579, v20, v19);
LABEL_47:
              LODWORD(v9) = 1;
              goto LABEL_813;
            }
            *(void **)(v3 + 3216) = v772[0];
            v595 = v785;
            v596 = *(_DWORD *)v785;
            *(_DWORD *)(v3 + 3208) = *(_DWORD *)v785;
            v597 = v595[1];
            v598 = *(_QWORD *)(a2 + 2688) - *(_QWORD *)(a2 + 2680);
            *(_DWORD *)(v3 + 3224) = v598 >> 3;
            if (!v596)
              goto LABEL_812;
            *(_QWORD *)&v797 = (v598 >> 3);
            *((_QWORD *)&v797 + 1) = v3;
            sub_22E779D90(v709, (uint64_t *)&v797);
            *(_QWORD *)&v797 = __PAIR64__(*(_DWORD *)(v3 + 3224) - (int)v597, v597);
            sub_22E779E2C(v708, (unsigned int *)&v797);
            v599 = a2;
            v600 = *(_BYTE **)(a2 + 2688);
            v562 = *(_BYTE **)(v599 + 2680);
            v601 = v600 - v562;
            v602 = (v600 - v562) >> 3;
            v603 = *(unsigned int *)(v3 + 3208);
            v604 = v603 + v602;
            if (v602 >= v603 + v602)
            {
              LODWORD(v9) = 0;
              a2 = v755;
              if (v602 > v604)
                *(_QWORD *)(v755 + 2688) = &v562[8 * v604];
              goto LABEL_813;
            }
            v605 = *(_QWORD *)(v599 + 2696);
            if (v603 <= (v605 - (uint64_t)v600) >> 3)
            {
              if ((_DWORD)v603)
              {
                bzero(v600, 8 * v603);
                v600 += 8 * v603;
              }
              LODWORD(v9) = 0;
              *(_QWORD *)(v755 + 2688) = v600;
              a2 = v755;
              goto LABEL_813;
            }
            if (v604 >> 61)
              goto LABEL_988;
            v606 = v605 - (_QWORD)v562;
            if (v606 >> 2 > v604)
              v604 = v606 >> 2;
            if ((unint64_t)v606 >= 0x7FFFFFFFFFFFFFF8)
              v607 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v607 = v604;
            if (v607 >> 61)
              goto LABEL_989;
            v608 = (char *)operator new(8 * v607);
            v609 = &v608[8 * v602];
            v610 = v608;
            bzero(v609, 8 * v603);
            while (v600 != v562)
            {
              v611 = *((_QWORD *)v600 - 1);
              v600 -= 8;
              *((_QWORD *)v609 - 1) = v611;
              v609 -= 8;
            }
            a2 = v755;
            *(_QWORD *)(v755 + 2680) = v609;
            *(_QWORD *)(v755 + 2688) = &v610[8 * v603 + v601];
            *(_QWORD *)(v755 + 2696) = &v610[8 * v607];
            if (v562)
              goto LABEL_974;
LABEL_812:
            LODWORD(v9) = 0;
            goto LABEL_813;
          case 2:
            if (*(_DWORD *)(v3 + 3072))
            {
              *(_QWORD *)&v20.__val_ = std::generic_category();
              v20.__cat_ = (const std::error_category *)"duplicate DECL_OFFSET record in AST file";
              goto LABEL_914;
            }
            *(void **)(v3 + 3080) = v772[0];
            v612 = v785;
            v613 = *(_DWORD *)v785;
            *(_DWORD *)(v3 + 3072) = *(_DWORD *)v785;
            v614 = v612[1];
            v615 = (*(_QWORD *)(a2 + 2792) - *(_QWORD *)(a2 + 2784)) >> 3;
            *(_DWORD *)(v3 + 3088) = v615;
            if (!v613)
              goto LABEL_812;
            *(_QWORD *)&v797 = (v615 + 18);
            *((_QWORD *)&v797 + 1) = v3;
            sub_22E779D90(v712, (uint64_t *)&v797);
            *(_QWORD *)&v797 = __PAIR64__(*(_DWORD *)(v3 + 3088) - (int)v614, v614);
            sub_22E779E2C(v711, (unsigned int *)&v797);
            *(_QWORD *)v775 = v3;
            *(_QWORD *)&v797 = 0;
            v616 = sub_22E3B9914((uint64_t)v710, v775, &v797);
            v617 = (_QWORD *)v797;
            if ((v616 & 1) == 0)
            {
              v617 = sub_22E744928(v710, (uint64_t)v775, v775, (_QWORD *)v797);
              *v617 = *(_QWORD *)v775;
              *((_DWORD *)v617 + 2) = 0;
            }
            *((_DWORD *)v617 + 2) = v614;
            v562 = *(_BYTE **)(a2 + 2792);
            v618 = *(_BYTE **)(a2 + 2784);
            v619 = (char *)(v562 - v618);
            v620 = (v562 - v618) >> 3;
            v621 = *(unsigned int *)(v3 + 3072);
            v622 = v621 + v620;
            if (v620 < v621 + v620)
            {
              v623 = *(_QWORD *)(a2 + 2800);
              if (v621 <= (v623 - (uint64_t)v562) >> 3)
              {
                if ((_DWORD)v621)
                {
                  bzero(*(void **)(a2 + 2792), 8 * v621);
                  v562 += 8 * v621;
                }
                v6 = v761;
                LODWORD(v9) = 0;
                *(_QWORD *)(a2 + 2792) = v562;
                goto LABEL_813;
              }
              if (!(v622 >> 61))
              {
                v624 = v623 - (_QWORD)v618;
                if (v624 >> 2 > v622)
                  v622 = v624 >> 2;
                if ((unint64_t)v624 >= 0x7FFFFFFFFFFFFFF8)
                  v625 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v625 = v622;
                if (!(v625 >> 61))
                {
                  v626 = operator new(8 * v625);
                  v627 = (char *)v626 + 8 * v620;
                  bzero(v627, 8 * v621);
                  if (v562 == v618)
                  {
                    v574 = (_QWORD *)v755;
                  }
                  else
                  {
                    do
                    {
                      v628 = *((_QWORD *)v562 - 1);
                      v562 -= 8;
                      *((_QWORD *)v627 - 1) = v628;
                      v627 -= 8;
                    }
                    while (v562 != v618);
                    v574 = (_QWORD *)v755;
                    v562 = *(_BYTE **)(v755 + 2784);
                  }
                  v574[348] = v627;
                  v574[349] = &v619[8 * v621 + (_QWORD)v626];
                  v574[350] = (char *)v626 + 8 * v625;
                  goto LABEL_973;
                }
LABEL_989:
                sub_22E3B3F8C();
              }
LABEL_988:
              abort();
            }
            if (v620 <= v622)
              goto LABEL_697;
            LODWORD(v9) = 0;
            *(_QWORD *)(a2 + 2792) = &v618[8 * v622];
            goto LABEL_907;
          case 3:
            if (*(_DWORD *)(v3 + 1672))
            {
              *(_QWORD *)&v20.__val_ = std::generic_category();
              v20.__cat_ = (const std::error_category *)"duplicate IDENTIFIER_OFFSET record in AST file";
              goto LABEL_914;
            }
            *(void **)(v3 + 1680) = v772[0];
            v558 = v785;
            v559 = *(_DWORD *)v785;
            *(_DWORD *)(v3 + 1672) = *(_DWORD *)v785;
            v560 = v558[1];
            v561 = (*(_QWORD *)(a2 + 3976) - *(_QWORD *)(a2 + 3968)) >> 3;
            *(_DWORD *)(v3 + 1688) = v561;
            if (!v559)
              goto LABEL_812;
            *(_QWORD *)&v797 = (v561 + 1);
            *((_QWORD *)&v797 + 1) = v3;
            sub_22E779D90(v714, (uint64_t *)&v797);
            *(_QWORD *)&v797 = __PAIR64__(*(_DWORD *)(v3 + 1688) - (int)v560, v560);
            sub_22E779E2C(v713, (unsigned int *)&v797);
            v562 = *(_BYTE **)(a2 + 3976);
            v563 = *(_BYTE **)(a2 + 3968);
            v564 = (char *)(v562 - v563);
            v565 = (v562 - v563) >> 3;
            v566 = *(unsigned int *)(v3 + 1672);
            v567 = v566 + v565;
            if (v565 < v566 + v565)
            {
              v568 = *(_QWORD *)(a2 + 3984);
              if (v566 <= (v568 - (uint64_t)v562) >> 3)
              {
                if ((_DWORD)v566)
                {
                  bzero(*(void **)(a2 + 3976), 8 * v566);
                  v562 += 8 * v566;
                }
                v6 = v761;
                LODWORD(v9) = 0;
                *(_QWORD *)(a2 + 3976) = v562;
                goto LABEL_813;
              }
              if (v567 >> 61)
                goto LABEL_988;
              v569 = v568 - (_QWORD)v563;
              if (v569 >> 2 > v567)
                v567 = v569 >> 2;
              if ((unint64_t)v569 >= 0x7FFFFFFFFFFFFFF8)
                v570 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v570 = v567;
              if (v570 >> 61)
                goto LABEL_989;
              v571 = operator new(8 * v570);
              v572 = (char *)v571 + 8 * v565;
              bzero(v572, 8 * v566);
              if (v562 == v563)
              {
                v574 = (_QWORD *)v755;
              }
              else
              {
                do
                {
                  v573 = *((_QWORD *)v562 - 1);
                  v562 -= 8;
                  *((_QWORD *)v572 - 1) = v573;
                  v572 -= 8;
                }
                while (v562 != v563);
                v574 = (_QWORD *)v755;
                v562 = *(_BYTE **)(v755 + 3968);
              }
              v574[496] = v572;
              v574[497] = &v564[8 * v566 + (_QWORD)v571];
              v574[498] = (char *)v571 + 8 * v570;
LABEL_973:
              a2 = (uint64_t)v574;
              v6 = v761;
              if (!v562)
                goto LABEL_812;
LABEL_974:
              operator delete(v562);
              goto LABEL_812;
            }
            if (v565 <= v567)
              goto LABEL_697;
            LODWORD(v9) = 0;
            *(_QWORD *)(a2 + 3976) = &v563[8 * v567];
            goto LABEL_907;
          case 5:
            v367 = (char *)v772[0];
            *(void **)(v3 + 1728) = v772[0];
            v368 = *(_QWORD *)v785;
            if (!*(_QWORD *)v785)
              goto LABEL_812;
            v369 = (uint64_t)&v367[v368 + 8];
            v370 = *(_QWORD *)&v367[v368];
            v371 = (_QWORD *)operator new();
            LODWORD(v9) = 0;
            *v371 = v370;
            v371[1] = v369;
            v371[2] = v367;
            v371[3] = a2;
            v371[4] = v3;
            v371[5] = 0;
            v371[6] = v367 + 4;
            *(_QWORD *)(v3 + 1736) = v371;
            *(_QWORD *)(*(_QWORD *)(a2 + 120) + 664) = v722;
            goto LABEL_813;
          case 6:
            if ((_DWORD)v786)
            {
              v372 = 0;
              v373 = 8 * v786;
              do
              {
                v374 = sub_22E768FE0(a2, v3, *(unsigned int *)((char *)v785 + v372));
                v375 = *(unsigned int *)(a2 + 4856);
                if (v375 >= *(unsigned int *)(a2 + 4860))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v375 = *(unsigned int *)(a2 + 4856);
                }
                *(_DWORD *)(*(_QWORD *)(a2 + 4848) + 4 * v375) = v374;
                ++*(_DWORD *)(a2 + 4856);
                v372 += 8;
              }
              while (v373 != v372);
            }
            goto LABEL_812;
          case 7:
            v313 = *(unsigned int *)(a2 + 6368);
            if ((_DWORD)v313)
            {
              if ((_DWORD)v313 != (_DWORD)v786)
              {
                *(_QWORD *)&v20.__val_ = std::generic_category();
                v20.__cat_ = (const std::error_category *)"invalid special-types record";
                goto LABEL_914;
              }
              for (i = 0; i != v313; ++i)
              {
                v315 = sub_22E77A180(a2, v3, *((_QWORD *)v785 + i));
                v316 = *(_QWORD *)(a2 + 6360);
                if (!*(_DWORD *)(v316 + 4 * i))
                  *(_DWORD *)(v316 + 4 * i) = v315;
              }
            }
            else if ((_DWORD)v786)
            {
              v575 = 0;
              v576 = 8 * v786;
              do
              {
                v577 = sub_22E77A180(a2, v3, *(unsigned int *)((char *)v785 + v575));
                v578 = *(unsigned int *)(a2 + 6368);
                if (v578 >= *(unsigned int *)(a2 + 6372))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v578 = *(unsigned int *)(a2 + 6368);
                }
                *(_DWORD *)(*(_QWORD *)(a2 + 6360) + 4 * v578) = v577;
                ++*(_DWORD *)(a2 + 6368);
                v575 += 8;
              }
              while (v576 != v575);
            }
            goto LABEL_812;
          case 8:
            LODWORD(v9) = 0;
            v330 = v785;
            *(_DWORD *)(a2 + 7380) += *(_DWORD *)v785;
            *(_DWORD *)(a2 + 7388) += v330[2];
            *(_DWORD *)(a2 + 7432) += v330[4];
            *(_DWORD *)(a2 + 7440) += v330[6];
            goto LABEL_813;
          case 9:
            if ((_DWORD)v786)
            {
              v342 = 0;
              v343 = 8 * v786;
              do
              {
                v344 = sub_22E768FE0(a2, v3, *(unsigned int *)((char *)v785 + v342));
                v345 = *(unsigned int *)(a2 + 4936);
                if (v345 >= *(unsigned int *)(a2 + 4940))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v345 = *(unsigned int *)(a2 + 4936);
                }
                *(_DWORD *)(*(_QWORD *)(a2 + 4928) + 4 * v345) = v344;
                ++*(_DWORD *)(a2 + 4936);
                v342 += 8;
              }
              while (v343 != v342);
            }
            goto LABEL_812;
          case 11:
            *(void **)(v3 + 2656) = v772[0];
            v393 = v785;
            v394 = *(_DWORD *)v785;
            *(_DWORD *)(v3 + 2648) = *(_DWORD *)v785;
            v395 = v393[1];
            v396 = *(_DWORD *)(a2 + 4456);
            *(_DWORD *)(v3 + 2664) = v396;
            if (v394)
            {
              *(_QWORD *)&v797 = (v396 + 1);
              *((_QWORD *)&v797 + 1) = v3;
              sub_22E779D90(v704, (uint64_t *)&v797);
              *(_QWORD *)&v797 = __PAIR64__(*(_DWORD *)(v3 + 2664) - (int)v395, v395);
              sub_22E779E2C(v702, (unsigned int *)&v797);
              sub_22F24C010(v703, *(unsigned int *)(v3 + 2648) + (unint64_t)*(unsigned int *)(a2 + 4456));
            }
            goto LABEL_812;
          case 12:
            v376 = (char *)v772[0];
            *(void **)(v3 + 2704) = v772[0];
            v377 = v785;
            v378 = *(_QWORD *)v785;
            if (*(_QWORD *)v785)
            {
              v379 = (uint64_t)&v376[v378 + 8];
              v380 = *(_QWORD *)&v376[v378];
              v381 = (_QWORD *)operator new();
              *v381 = v380;
              v381[1] = v379;
              v381[2] = v376;
              v381[3] = a2;
              v381[4] = v3;
              *(_QWORD *)(v3 + 2712) = v381;
              v377 = v785;
            }
            LODWORD(v9) = 0;
            *(_DWORD *)(a2 + 7424) += v377[2];
            goto LABEL_813;
          case 13:
            if ((_DWORD)v786)
            {
              v300 = *(_QWORD *)(a2 + 56);
              if (v300)
                (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v300 + 96))(v300, v3, *(unsigned int *)v785);
            }
            goto LABEL_812;
          case 14:
            *(void **)(v3 + 1584) = v772[0];
            v317 = v785;
            v318 = *(_DWORD *)v785;
            *(_DWORD *)(v3 + 1560) = *(_DWORD *)v785;
            v319 = v317[2];
            *(_QWORD *)(v3 + 1576) = *(_QWORD *)(v3 + 1552) + *((_QWORD *)v317 + 2);
            v320 = sub_22F1E154C(*(_QWORD *)(a2 + 80), v318, v319);
            *(_QWORD *)(v3 + 1564) = v320;
            if ((_DWORD)v320)
            {
              *(_QWORD *)&v797 = (1 - *(_DWORD *)(v3 + 1560) - v320);
              *((_QWORD *)&v797 + 1) = v3;
              sub_22E779D90(v725, (uint64_t *)&v797);
              v321 = *(_DWORD *)(v3 + 1568);
              *(_DWORD *)(v3 + 744) = v321;
              *(_QWORD *)&v797 = 0x80000000 - v321 - v319;
              *((_QWORD *)&v797 + 1) = v3;
              sub_22E779D90(v724, (uint64_t *)&v797);
              *(_QWORD *)&v797 = 0;
              sub_22E779E2C(v723, (unsigned int *)&v797);
              *(_QWORD *)&v797 = ((unint64_t)(*(_DWORD *)(v3 + 1568) - 2) << 32) | 2;
              sub_22E779E2C(v723, (unsigned int *)&v797);
              LODWORD(v9) = 0;
              *(_DWORD *)(a2 + 7372) += *(_DWORD *)(v3 + 1560);
              goto LABEL_813;
            }
            *(_QWORD *)&v20.__val_ = std::generic_category();
            v20.__cat_ = (const std::error_category *)"ran out of source locations";
            v579 = 22;
            goto LABEL_915;
          case 15:
            if (*(_DWORD *)(v3 + 1600))
            {
              *(_QWORD *)&v20.__val_ = std::generic_category();
              v20.__cat_ = (const std::error_category *)"Multiple SOURCE_LOCATION_PRELOADS records in AST file";
              goto LABEL_914;
            }
            v326 = v720;
LABEL_811:
            sub_22E77A230(v326, (uint64_t)&v785);
            goto LABEL_812;
          case 16:
            if ((_DWORD)v786)
            {
              v289 = 0;
              v290 = 8 * v786;
              do
              {
                v291 = sub_22E768FE0(a2, v3, *(unsigned int *)((char *)v785 + v289));
                v292 = *(unsigned int *)(a2 + 6216);
                if (v292 >= *(unsigned int *)(a2 + 6220))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v292 = *(unsigned int *)(a2 + 6216);
                }
                *(_DWORD *)(*(_QWORD *)(a2 + 6208) + 4 * v292) = v291;
                ++*(_DWORD *)(a2 + 6216);
                v289 += 8;
              }
              while (v290 != v289);
            }
            goto LABEL_812;
          case 17:
            if ((_DWORD)v786)
            {
              v347 = 0;
              v348 = 8 * v786;
              do
              {
                v349 = sub_22E768FE0(a2, v3, *(unsigned int *)((char *)v785 + v347));
                v350 = *(unsigned int *)(a2 + 5560);
                if (v350 >= *(unsigned int *)(a2 + 5564))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v350 = *(unsigned int *)(a2 + 5560);
                }
                *(_DWORD *)(*(_QWORD *)(a2 + 5552) + 4 * v350) = v349;
                ++*(_DWORD *)(a2 + 5560);
                v347 += 8;
              }
              while (v348 != v347);
            }
            goto LABEL_812;
          case 18:
            v664 = (unint64_t)v772[1];
            *(void **)(v3 + 2576) = v772[0];
            *(_DWORD *)(v3 + 2584) = v664 / 0xC;
            v665 = *(_DWORD *)v785;
            v666 = *(_QWORD *)(*(_QWORD *)(a2 + 120) + 2768);
            if (!v666)
            {
              sub_22F418734(*(_QWORD **)(a2 + 120));
              v666 = *(_QWORD *)(*(_QWORD *)(a2 + 120) + 2768);
            }
            if (!*(_QWORD *)(v666 + 208))
              *(_QWORD *)(v666 + 208) = v727;
            v667 = sub_22F417BB8(v666, *(_DWORD *)(v3 + 2584));
            *(_DWORD *)(v3 + 2536) = v667;
            if (*(_DWORD *)(v3 + 2584))
            {
              *(_QWORD *)&v797 = v667;
              *((_QWORD *)&v797 + 1) = v3;
              sub_22E779D90(v700, (uint64_t *)&v797);
              *(_QWORD *)&v797 = __PAIR64__(*(_DWORD *)(v3 + 2536) - v665, v665);
              sub_22E779E2C(v699, (unsigned int *)&v797);
            }
            goto LABEL_812;
          case 19:
            v346 = v786;
            if ((-1431655765 * v786) >= 0x55555556)
            {
              *(_QWORD *)&v20.__val_ = std::generic_category();
              v20.__cat_ = (const std::error_category *)"Invalid VTABLE_USES record";
              goto LABEL_914;
            }
            *(_DWORD *)(a2 + 5016) = 0;
            if (v346)
            {
              for (j = 0; j != v346; j += 3)
              {
                v630 = sub_22E768FE0(a2, v3, *((_QWORD *)v785 + j));
                v631 = *(unsigned int *)(a2 + 5016);
                if (v631 >= *(unsigned int *)(a2 + 5020))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v631 = *(unsigned int *)(a2 + 5016);
                }
                *(_DWORD *)(*(_QWORD *)(a2 + 5008) + 4 * v631) = v630;
                ++*(_DWORD *)(a2 + 5016);
                HIDWORD(v632) = *((_QWORD *)v785 + j + 1);
                LODWORD(v632) = HIDWORD(v632);
                v633 = sub_22E77BAB4(a2, v3, v632 >> 1);
                v634 = *(unsigned int *)(a2 + 5016);
                if (v634 >= *(unsigned int *)(a2 + 5020))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v634 = *(unsigned int *)(a2 + 5016);
                }
                *(_DWORD *)(*(_QWORD *)(a2 + 5008) + 4 * v634) = v633;
                v635 = *(_DWORD *)(a2 + 5016) + 1;
                *(_DWORD *)(a2 + 5016) = v635;
                v636 = *((_QWORD *)v785 + j + 2);
                if (v635 >= *(_DWORD *)(a2 + 5020))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v635 = *(_DWORD *)(a2 + 5016);
                }
                *(_DWORD *)(*(_QWORD *)(a2 + 5008) + 4 * v635) = v636;
                ++*(_DWORD *)(a2 + 5016);
              }
            }
            goto LABEL_812;
          case 21:
            if ((_DWORD)v786)
            {
              v407 = v786 - 1;
              if ((_DWORD)v786 != 1)
              {
                v408 = 0;
                do
                {
                  v409 = sub_22F2B0B3C(a2, v3, *((_QWORD *)v785 + v408));
                  v410 = *(unsigned int *)(a2 + 5672);
                  if (v410 >= *(unsigned int *)(a2 + 5676))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v410 = *(unsigned int *)(a2 + 5672);
                  }
                  *(_DWORD *)(*(_QWORD *)(a2 + 5664) + 4 * v410) = v409;
                  ++*(_DWORD *)(a2 + 5672);
                  HIDWORD(v411) = *((_QWORD *)v785 + v408 + 1);
                  LODWORD(v411) = HIDWORD(v411);
                  v412 = sub_22E77BAB4(a2, v3, v411 >> 1);
                  v413 = *(unsigned int *)(a2 + 5672);
                  if (v413 >= *(unsigned int *)(a2 + 5676))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v413 = *(unsigned int *)(a2 + 5672);
                  }
                  v408 += 2;
                  *(_DWORD *)(*(_QWORD *)(a2 + 5664) + 4 * v413) = v412;
                  ++*(_DWORD *)(a2 + 5672);
                }
                while (v408 < v407);
              }
            }
            goto LABEL_812;
          case 22:
            v431 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*(_QWORD *)(v18 + 1960) + 80) + 72), *(_QWORD *)(*(_QWORD *)(v18 + 1960) + 80));
            if (v431)
              v432 = v431 + 40;
            else
              v432 = 0;
            v433 = v772[0];
            v434 = ((unint64_t)v772[1] >> 2);
            v435 = a2;
            v436 = *(uint64_t **)(a2 + 3640);
            v437 = *(_QWORD *)(v435 + 3648);
            if ((unint64_t)v436 >= v437)
            {
              v473 = *(_QWORD **)(v435 + 3632);
              v474 = 0xAAAAAAAAAAAAAAABLL * (v436 - v473) + 1;
              if (v474 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_988;
              v475 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v437 - (_QWORD)v473) >> 3);
              if (2 * v475 > v474)
                v474 = 2 * v475;
              if (v475 >= 0x555555555555555)
                v476 = 0xAAAAAAAAAAAAAAALL;
              else
                v476 = v474;
              if (v476)
              {
                if (v476 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_989;
                v477 = (char *)operator new(24 * v476);
              }
              else
              {
                v477 = 0;
              }
              v659 = (uint64_t *)&v477[8 * (v436 - v473)];
              *v659 = v3;
              v659[1] = (uint64_t)v433;
              v659[2] = v434;
              v660 = v659;
              if (v436 == v473)
              {
                v662 = (_QWORD *)v755;
              }
              else
              {
                do
                {
                  v661 = *(_OWORD *)(v436 - 3);
                  *(v660 - 1) = *(v436 - 1);
                  *(_OWORD *)(v660 - 3) = v661;
                  v660 -= 3;
                  v436 -= 3;
                }
                while (v436 != v473);
                v662 = (_QWORD *)v755;
                v436 = *(uint64_t **)(v755 + 3632);
              }
              v663 = &v477[24 * v476];
              v662[454] = v660;
              v438 = v659 + 3;
              v662[455] = v659 + 3;
              v662[456] = v663;
              v6 = v761;
              if (v436)
                operator delete(v436);
            }
            else
            {
              *v436 = v3;
              v436[1] = (uint64_t)v433;
              v438 = v436 + 3;
              v436[2] = v434;
            }
            LODWORD(v9) = 0;
            a2 = v755;
            *(_QWORD *)(v755 + 3640) = v438;
            *(_WORD *)(v432 + 8) |= 0x80u;
            goto LABEL_813;
          case 24:
            if ((_DWORD)v786 != 3)
            {
              *(_QWORD *)&v20.__val_ = std::generic_category();
              v20.__cat_ = (const std::error_category *)"Invalid SEMA_DECL_REFS block";
              goto LABEL_914;
            }
            for (k = 0; k != 24; k += 8)
            {
              v328 = sub_22E768FE0(a2, v3, *(unsigned int *)((char *)v785 + k));
              v329 = *(unsigned int *)(a2 + 6336);
              if (v329 >= *(unsigned int *)(a2 + 6340))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v329 = *(unsigned int *)(a2 + 6336);
              }
              *(_DWORD *)(*(_QWORD *)(a2 + 6328) + 4 * v329) = v328;
              ++*(_DWORD *)(a2 + 6336);
            }
            goto LABEL_812;
          case 25:
            v430 = v786;
            if ((-1431655765 * v786) >= 0x55555556)
            {
              *(_QWORD *)&v20.__val_ = std::generic_category();
              v20.__cat_ = (const std::error_category *)"invalid weak identifiers record";
              goto LABEL_914;
            }
            *(_DWORD *)(a2 + 5944) = 0;
            if (v430)
            {
              for (m = 0; m < v430; m += 3)
              {
                v638 = sub_22E768E34(a2, v3, *((_QWORD *)v785 + m));
                v639 = *(unsigned int *)(a2 + 5944);
                if (v639 >= *(unsigned int *)(a2 + 5948))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v639 = *(unsigned int *)(a2 + 5944);
                }
                *(_DWORD *)(*(_QWORD *)(a2 + 5936) + 4 * v639) = v638;
                ++*(_DWORD *)(a2 + 5944);
                v640 = sub_22E768E34(a2, v3, *((_QWORD *)v785 + m + 1));
                v641 = *(unsigned int *)(a2 + 5944);
                if (v641 >= *(unsigned int *)(a2 + 5948))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v641 = *(unsigned int *)(a2 + 5944);
                }
                *(_DWORD *)(*(_QWORD *)(a2 + 5936) + 4 * v641) = v640;
                ++*(_DWORD *)(a2 + 5944);
                HIDWORD(v642) = *((_QWORD *)v785 + m + 2);
                LODWORD(v642) = HIDWORD(v642);
                v643 = sub_22E77BAB4(a2, v3, v642 >> 1);
                v644 = *(unsigned int *)(a2 + 5944);
                if (v644 >= *(unsigned int *)(a2 + 5948))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v644 = *(unsigned int *)(a2 + 5944);
                }
                *(_DWORD *)(*(_QWORD *)(a2 + 5936) + 4 * v644) = v643;
                ++*(_DWORD *)(a2 + 5944);
              }
            }
            goto LABEL_812;
          case 26:
            if ((*(_BYTE *)(a2 + 5288) & 1) != 0)
            {
              *(_QWORD *)&v20.__val_ = std::generic_category();
              v20.__cat_ = (const std::error_category *)"Invalid existing PendingInstantiations";
              goto LABEL_914;
            }
            v293 = v786;
            if ((v786 & 1) != 0)
            {
              *(_QWORD *)&v20.__val_ = std::generic_category();
              v20.__cat_ = (const std::error_category *)"Invalid PENDING_IMPLICIT_INSTANTIATIONS block";
              goto LABEL_914;
            }
            if ((_DWORD)v786)
            {
              v294 = 0;
              do
              {
                v295 = sub_22E768FE0(a2, v3, *((_QWORD *)v785 + v294));
                v296 = *(unsigned int *)(a2 + 5288);
                if (v296 >= *(unsigned int *)(a2 + 5292))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v296 = *(unsigned int *)(a2 + 5288);
                }
                *(_DWORD *)(*(_QWORD *)(a2 + 5280) + 4 * v296) = v295;
                ++*(_DWORD *)(a2 + 5288);
                HIDWORD(v297) = *((_QWORD *)v785 + v294 + 1);
                LODWORD(v297) = HIDWORD(v297);
                v298 = sub_22E77BAB4(a2, v3, v297 >> 1);
                v299 = *(unsigned int *)(a2 + 5288);
                if (v299 >= *(unsigned int *)(a2 + 5292))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v299 = *(unsigned int *)(a2 + 5288);
                }
                v294 += 2;
                *(_DWORD *)(*(_QWORD *)(a2 + 5280) + 4 * v299) = v298;
                ++*(_DWORD *)(a2 + 5288);
              }
              while (v293 != v294);
            }
            goto LABEL_812;
          case 28:
            if ((_DWORD)v786)
            {
              v443 = sub_22E768FE0(a2, v3, *(unsigned int *)v785);
            }
            else
            {
              sub_22E769C10(a2, "Corrupted AST file", 0x12uLL);
              v443 = 0;
            }
            LODWORD(v797) = v443;
            v645 = v772[0];
            sub_22E78F4AC(v728, (int *)&v797);
            v647 = v646;
            v648 = *(unsigned int *)(v646 + 16);
            if (v648 >= *(unsigned int *)(v646 + 20))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v648 = *(unsigned int *)(v647 + 16);
            }
            v649 = (uint64_t *)(*(_QWORD *)(v647 + 8) + 16 * v648);
            *v649 = v3;
            v649[1] = (uint64_t)v645;
            ++*(_DWORD *)(v647 + 16);
            v650 = v755;
            v651 = sub_22E779FD8(v755, v443);
            if (v651)
            {
              v652 = v651;
              v653 = *(unsigned int *)(v755 + 2920);
              if (v653 >= *(unsigned int *)(v755 + 2924))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v653 = *(unsigned int *)(v755 + 2920);
              }
              v650 = v755;
              v654 = (uint64_t *)(*(_QWORD *)(v755 + 2912) + 16 * v653);
              *v654 = v652;
              v654[1] = v443;
              ++*(_DWORD *)(v755 + 2920);
            }
            LODWORD(v9) = 0;
            a2 = v650;
            goto LABEL_813;
          case 29:
            LODWORD(v9) = v786;
            if ((v786 & 1) != 0)
            {
              *(_QWORD *)&v20.__val_ = std::generic_category();
              v20.__cat_ = (const std::error_category *)"invalid DECL_UPDATE_OFFSETS block in AST file";
              goto LABEL_914;
            }
            if (!(_DWORD)v786)
              goto LABEL_813;
            v351 = a1;
            v352 = 0;
            while (1)
            {
              v353 = sub_22E768FE0(a2, v3, *((_QWORD *)v785 + v352));
              *(_QWORD *)&v797 = 0;
              v354 = sub_22E78FFDC(*(_QWORD *)(a2 + 2888), *(_DWORD *)(a2 + 2904), v353, &v797);
              v355 = v797;
              if ((v354 & 1) == 0)
                break;
              v357 = (_DWORD *)(v797 + 16);
              v356 = *(unsigned int *)(v797 + 16);
              v358 = (_QWORD *)(v797 + 8);
              v359 = *((_QWORD *)v785 + v352 + 1);
              if (v356 >= *(unsigned int *)(v797 + 20))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v356 = *(unsigned int *)(v355 + 16);
              }
LABEL_593:
              v362 = (uint64_t *)(*v358 + 16 * v356);
              *v362 = v3;
              v362[1] = v359;
              ++*v357;
              a2 = v755;
              v363 = sub_22E779FD8(v755, v353);
              if (v363)
              {
                v364 = v363;
                v365 = *(unsigned int *)(v755 + 2920);
                if (v365 >= *(unsigned int *)(v755 + 2924))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v365 = *(unsigned int *)(v755 + 2920);
                }
                v366 = (uint64_t *)(*(_QWORD *)(v755 + 2912) + 16 * v365);
                *v366 = v364;
                v366[1] = v353;
                ++*(_DWORD *)(v755 + 2920);
              }
              v352 += 2;
              if ((_DWORD)v9 == v352)
              {
                LODWORD(v9) = 0;
                goto LABEL_906;
              }
            }
            v360 = *(_DWORD *)(a2 + 2896);
            v361 = *(_DWORD *)(a2 + 2904);
            if (4 * v360 + 4 >= 3 * v361)
            {
              v361 *= 2;
            }
            else if (v361 + ~v360 - *(_DWORD *)(a2 + 2900) > v361 >> 3)
            {
LABEL_590:
              ++*(_DWORD *)(a2 + 2896);
              if (*(_DWORD *)v355 != -1)
                --*(_DWORD *)(v755 + 2900);
              v356 = 0;
              *(_DWORD *)v355 = v353;
              *(_QWORD *)(v355 + 8) = v355 + 24;
              v358 = (_QWORD *)(v355 + 8);
              *(_QWORD *)(v355 + 16) = 0x200000000;
              v359 = *((_QWORD *)v785 + v352 + 1);
              v357 = (_DWORD *)(v355 + 16);
              goto LABEL_593;
            }
            sub_22E790074(v707, v361);
            *(_QWORD *)&v797 = 0;
            sub_22E78FFDC(*(_QWORD *)(a2 + 2888), *(_DWORD *)(a2 + 2904), v353, &v797);
            v355 = v797;
            goto LABEL_590;
          case 33:
            *(_DWORD *)(a2 + 6448) = 0;
            if ((_DWORD)v786)
            {
              v322 = 0;
              v323 = 8 * v786;
              do
              {
                v324 = sub_22E768FE0(a2, v3, *(unsigned int *)((char *)v785 + v322));
                v325 = *(unsigned int *)(a2 + 6448);
                if (v325 >= *(unsigned int *)(a2 + 6452))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v325 = *(unsigned int *)(a2 + 6448);
                }
                *(_DWORD *)(*(_QWORD *)(a2 + 6440) + 4 * v325) = v324;
                ++*(_DWORD *)(a2 + 6448);
                v322 += 8;
              }
              while (v323 != v322);
            }
            goto LABEL_812;
          case 34:
            v421 = (char *)v772[0];
            *(void **)(v3 + 2592) = v772[0];
            v422 = (uint64_t *)v785;
            *(_DWORD *)(v3 + 2588) = *((_QWORD *)v785 + 1);
            v423 = *v422;
            if (!*v422)
              goto LABEL_812;
            v424 = &v421[v423];
            v425 = *(_QWORD *)(*(_QWORD *)(a2 + 120) + 104);
            v426 = &v421[v422[2]];
            v427 = *(_QWORD *)&v421[v423];
            v428 = (_QWORD *)operator new();
            *v428 = v427;
            v428[1] = v424 + 8;
            v428[2] = v421;
            v428[3] = a2;
            v428[4] = v3;
            v428[5] = v425;
            v428[6] = v426;
            *(_QWORD *)(v3 + 2600) = v428;
            v429 = *(_QWORD *)(*(_QWORD *)(a2 + 120) + 104);
            *(_QWORD *)(v429 + 2064) = v726;
            if (*(_QWORD *)(v429 + 2056))
              goto LABEL_697;
            LODWORD(v9) = 0;
            *(_QWORD *)(v429 + 2056) = a2;
            goto LABEL_907;
          case 35:
            v326 = v731;
            goto LABEL_811;
          case 36:
            v450 = v786;
            if (!(_DWORD)v786)
              goto LABEL_812;
            v451 = 0;
            do
            {
              v452 = v451 + 1;
              v453 = *((_QWORD *)v785 + v451);
              sub_22E793964(&v797, (uint64_t *)v785 + v452, (uint64_t *)v785 + v452 + v453, v453);
              v454 = v452 + v453;
              if ((SBYTE7(v798) & 0x80u) == 0)
                v455 = &v797;
              else
                v455 = (__int128 *)v797;
              if ((SBYTE7(v798) & 0x80u) == 0)
                v456 = BYTE7(v798) & 0x7F;
              else
                v456 = *((_QWORD *)&v797 + 1);
              v457 = *sub_22F2BBFD8(v734, v455, v456);
              v458 = v785;
              *(_BYTE *)(v457 + 24) = *((_QWORD *)v785 + v454) != 0;
              *(_BYTE *)(v457 + 25) = v458[v454 + 1] != 0;
              *(_BYTE *)(v457 + 8) = v458[v454 + 2] != 0;
              *(_DWORD *)(v457 + 12) = v458[v454 + 3];
              *(_DWORD *)(v457 + 16) = v458[v454 + 4];
              *(_DWORD *)(v457 + 20) = v458[v454 + 5];
              if (SBYTE7(v798) < 0)
                operator delete((void *)v797);
              v451 = v454 + 6;
            }
            while (v454 + 6 != v450);
            goto LABEL_697;
          case 37:
            if ((_DWORD)v786)
            {
              v459 = 0;
              v460 = 8 * v786;
              do
              {
                v461 = sub_22E768FE0(a2, v3, *(unsigned int *)((char *)v785 + v459));
                v462 = *(unsigned int *)(a2 + 5640);
                if (v462 >= *(unsigned int *)(a2 + 5644))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v462 = *(unsigned int *)(a2 + 5640);
                }
                *(_DWORD *)(*(_QWORD *)(a2 + 5632) + 4 * v462) = v461;
                ++*(_DWORD *)(a2 + 5640);
                v459 += 8;
              }
              while (v460 != v459);
            }
            goto LABEL_812;
          case 38:
            if ((_DWORD)v786)
            {
              v439 = 0;
              v440 = 8 * v786;
              do
              {
                v441 = sub_22E768FE0(a2, v3, *(unsigned int *)((char *)v785 + v439));
                v442 = *(unsigned int *)(a2 + 6912);
                if (v442 >= *(unsigned int *)(a2 + 6916))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v442 = *(unsigned int *)(a2 + 6912);
                }
                *(_DWORD *)(*(_QWORD *)(a2 + 6904) + 4 * v442) = v441;
                ++*(_DWORD *)(a2 + 6912);
                v439 += 8;
              }
              while (v440 != v439);
            }
            goto LABEL_812;
          case 39:
            LODWORD(v9) = 0;
            *v729 = *(_OWORD *)v772;
            goto LABEL_813;
          case 40:
            v754 = (void **)sub_22F1E0AA0(*(_QWORD *)(a2 + 80));
            *((_QWORD *)&v797 + 1) = 0;
            *(_QWORD *)&v798 = 0;
            *(_QWORD *)&v797 = (char *)&v797 + 8;
            *(_DWORD *)v775 = -1;
            *((_DWORD *)sub_22E78FA94((uint64_t **)&v797, -1, v775) + 8) = -1;
            v304 = (uint64_t *)v785;
            v305 = *(_QWORD *)v785;
            v692 = a1;
            if (*(_QWORD *)v785)
            {
              v306 = 0;
              v307 = 0;
              do
              {
                v308 = v307 + 1;
                sub_22E793964(v775, &v304[v308], &v304[v308 + v305], v305);
                sub_22E76C4AC(v3, (uint64_t)v775);
                if (v775[23] >= 0)
                  v309 = v775;
                else
                  v309 = *(_BYTE **)v775;
                if (v775[23] >= 0)
                  v310 = v775[23] & 0x7F;
                else
                  v310 = *(_QWORD *)&v775[8];
                v311 = sub_22F1E07D8(v754, v309, v310);
                LODWORD(__src) = v306;
                *((_DWORD *)sub_22E78FA94((uint64_t **)&v797, v306, &__src) + 8) = v311;
                if ((v775[23] & 0x80000000) != 0)
                  operator delete(*(void **)v775);
                v307 = v308 + v305;
                ++v306;
                v304 = (uint64_t *)v785;
                v305 = *((_QWORD *)v785 + (v308 + v305));
              }
              while (v305);
              v312 = v307 + 1;
              a2 = v755;
            }
            else
            {
              v312 = 1;
            }
            memset(v775, 0, 24);
            if (v786 <= v312)
              goto LABEL_809;
            do
            {
              v751 = *((_QWORD *)v785 + v312);
              v749 = *(_DWORD *)(v3 + 1564);
              v535 = *((_QWORD *)v785 + v312 + 1);
              v536 = *(void **)v775;
              *(_QWORD *)&v775[8] = *(_QWORD *)v775;
              if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)&v775[16] - *(_QWORD *)v775) >> 2) < v535)
              {
                *(_QWORD *)v775 = operator new(20 * v535);
                *(_QWORD *)&v775[8] = *(_QWORD *)v775;
                *(_QWORD *)&v775[16] = *(_QWORD *)v775 + 20 * v535;
                if (v536)
                  operator delete(v536);
              }
              v312 += 2;
              if ((_DWORD)v535)
              {
                v537 = 0;
                v767 = v535;
                do
                {
                  v538 = *((_QWORD *)v785 + v312);
                  v539 = *((_QWORD *)v785 + v312 + 1);
                  v540 = *((_QWORD *)v785 + v312 + 2);
                  LODWORD(__src) = v540;
                  v541 = *((_DWORD *)sub_22E78FA94((uint64_t **)&v797, v540, &__src) + 8);
                  v542 = *((_QWORD *)v785 + v312 + 3);
                  v543 = *((_QWORD *)v785 + v312 + 4);
                  v544 = *(_DWORD **)&v775[8];
                  if (*(_QWORD *)&v775[8] >= *(_QWORD *)&v775[16])
                  {
                    v547 = *(_DWORD **)v775;
                    v548 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)&v775[8] - *(_QWORD *)v775) >> 2);
                    v549 = v548 + 1;
                    if (v548 + 1 > 0xCCCCCCCCCCCCCCCLL)
                      goto LABEL_988;
                    if (0x999999999999999ALL * ((uint64_t)(*(_QWORD *)&v775[16] - *(_QWORD *)v775) >> 2) > v549)
                      v549 = 0x999999999999999ALL * ((uint64_t)(*(_QWORD *)&v775[16] - *(_QWORD *)v775) >> 2);
                    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)&v775[16] - *(_QWORD *)v775) >> 2) >= 0x666666666666666)
                      v550 = 0xCCCCCCCCCCCCCCCLL;
                    else
                      v550 = v549;
                    v764 = v550;
                    if (v550)
                    {
                      if (v550 > 0xCCCCCCCCCCCCCCCLL)
                        goto LABEL_989;
                      v551 = (char *)operator new(20 * v550);
                      v552 = v538;
                      v553 = v539;
                    }
                    else
                    {
                      v552 = v538;
                      v553 = v539;
                      v551 = 0;
                    }
                    v554 = &v551[20 * v548];
                    *(_DWORD *)v554 = v552;
                    *((_DWORD *)v554 + 1) = v553;
                    *((_DWORD *)v554 + 2) = v541;
                    *((_DWORD *)v554 + 3) = v542;
                    *((_DWORD *)v554 + 4) = v543;
                    v555 = v554;
                    if (v544 == v547)
                    {
                      v3 = v760;
                      v546 = v767;
                    }
                    else
                    {
                      v3 = v760;
                      v546 = v767;
                      do
                      {
                        v556 = *(_OWORD *)(v544 - 5);
                        *((_DWORD *)v555 - 1) = *(v544 - 1);
                        *(_OWORD *)(v555 - 20) = v556;
                        v555 -= 20;
                        v544 -= 5;
                      }
                      while (v544 != v547);
                      v544 = *(_DWORD **)v775;
                    }
                    v545 = v554 + 20;
                    *(_QWORD *)v775 = v555;
                    *(_QWORD *)&v775[8] = v554 + 20;
                    *(_QWORD *)&v775[16] = &v551[20 * v764];
                    v6 = v761;
                    if (v544)
                      operator delete(v544);
                  }
                  else
                  {
                    **(_DWORD **)&v775[8] = v538;
                    v544[1] = v539;
                    v544[2] = v541;
                    v544[3] = v542;
                    v545 = v544 + 5;
                    v544[4] = v543;
                    v546 = v767;
                  }
                  v312 += 5;
                  *(_QWORD *)&v775[8] = v545;
                  ++v537;
                }
                while (v537 != v546);
              }
              sub_22F1E0A2C((uint64_t)v754, v751 + v749 - 1, (char **)v775);
              a2 = v755;
            }
            while (v786 > v312);
            if (*(_QWORD *)v775)
            {
              *(_QWORD *)&v775[8] = *(_QWORD *)v775;
              operator delete(*(void **)v775);
            }
LABEL_809:
            sub_22F258024(*((_QWORD **)&v797 + 1));
            LODWORD(v9) = 0;
            a1 = v692;
            goto LABEL_813;
          case 41:
            if (*(_DWORD *)(v3 + 3176))
            {
              *(_QWORD *)&v20.__val_ = std::generic_category();
              v20.__cat_ = (const std::error_category *)"duplicate OBJC_CATEGORIES_MAP record in AST file";
              goto LABEL_914;
            }
            LODWORD(v9) = 0;
            *(_DWORD *)(v3 + 3176) = *(_QWORD *)v785;
            *(void **)(v3 + 3168) = v772[0];
            goto LABEL_813;
          case 42:
            LODWORD(v9) = 0;
            *(void **)(v3 + 3152) = v772[0];
            *(_DWORD *)(v3 + 3160) = *(_QWORD *)v785;
            goto LABEL_813;
          case 43:
            v382 = *(_DWORD *)(v3 + 4);
            if (v382 > 5 || ((1 << v382) & 0x23) == 0)
            {
              v383 = v786;
              if ((_DWORD)v786)
              {
                v384 = 0;
                do
                {
                  v385 = sub_22E76C40C(a2, v3, *((_QWORD *)v785 + v384));
                  v386 = a2;
                  v387 = v385;
                  HIDWORD(v388) = *((_QWORD *)v785 + v384 + 1);
                  LODWORD(v388) = HIDWORD(v388);
                  v389 = sub_22E77BAB4(v386, v3, v388 >> 1);
                  if ((_DWORD)v387)
                  {
                    v390 = v389;
                    v391 = *(unsigned int *)(v755 + 7272);
                    if (v391 >= *(unsigned int *)(v755 + 7276))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                      v391 = *(unsigned int *)(v755 + 7272);
                    }
                    *(_QWORD *)(*(_QWORD *)(v755 + 7264) + 8 * v391) = v387 | ((unint64_t)v390 << 32);
                    ++*(_DWORD *)(v755 + 7272);
                    v392 = *(_QWORD *)(v755 + 64);
                    if (v392)
                      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v392 + 80))(v392, v387);
                  }
                  v384 += 2;
                  a2 = v755;
                }
                while (v383 != v384);
              }
            }
            goto LABEL_812;
          case 46:
            v326 = v730;
            goto LABEL_811;
          case 47:
            if (*(_DWORD *)(v3 + 2112))
            {
              *(_QWORD *)&v20.__val_ = std::generic_category();
              v20.__cat_ = (const std::error_category *)"duplicate MACRO_OFFSET record in AST file";
              goto LABEL_914;
            }
            *(void **)(v3 + 2128) = v772[0];
            v580 = v785;
            v581 = *(_DWORD *)v785;
            *(_DWORD *)(v3 + 2112) = *(_DWORD *)v785;
            v582 = v580[1];
            *(_QWORD *)(v3 + 2120) = *(_QWORD *)(v3 + 368) + v580[2];
            v583 = (*(_QWORD *)(a2 + 4080) - *(_QWORD *)(a2 + 4072)) >> 3;
            *(_DWORD *)(v3 + 2136) = v583;
            if (!v581)
              goto LABEL_812;
            *(_QWORD *)&v797 = (v583 + 1);
            *((_QWORD *)&v797 + 1) = v3;
            sub_22E779D90(v716, (uint64_t *)&v797);
            *(_QWORD *)&v797 = __PAIR64__(*(_DWORD *)(v3 + 2136) - (int)v582, v582);
            sub_22E779E2C(v715, (unsigned int *)&v797);
            v562 = *(_BYTE **)(a2 + 4080);
            v584 = *(_BYTE **)(a2 + 4072);
            v585 = (char *)(v562 - v584);
            v586 = (v562 - v584) >> 3;
            v587 = *(unsigned int *)(v3 + 2112);
            v588 = v587 + v586;
            if (v586 < v587 + v586)
            {
              v589 = *(_QWORD *)(a2 + 4088);
              if (v587 <= (v589 - (uint64_t)v562) >> 3)
              {
                if ((_DWORD)v587)
                {
                  bzero(*(void **)(a2 + 4080), 8 * v587);
                  v562 += 8 * v587;
                }
                v6 = v761;
                LODWORD(v9) = 0;
                *(_QWORD *)(a2 + 4080) = v562;
                goto LABEL_813;
              }
              if (v588 >> 61)
                goto LABEL_988;
              v590 = v589 - (_QWORD)v584;
              if (v590 >> 2 > v588)
                v588 = v590 >> 2;
              if ((unint64_t)v590 >= 0x7FFFFFFFFFFFFFF8)
                v591 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v591 = v588;
              if (v591 >> 61)
                goto LABEL_989;
              v592 = operator new(8 * v591);
              v593 = (char *)v592 + 8 * v586;
              bzero(v593, 8 * v587);
              if (v562 == v584)
              {
                v574 = (_QWORD *)v755;
              }
              else
              {
                do
                {
                  v594 = *((_QWORD *)v562 - 1);
                  v562 -= 8;
                  *((_QWORD *)v593 - 1) = v594;
                  v593 -= 8;
                }
                while (v562 != v584);
                v574 = (_QWORD *)v755;
                v562 = *(_BYTE **)(v755 + 4072);
              }
              v574[509] = v593;
              v574[510] = &v585[8 * v587 + (_QWORD)v592];
              v574[511] = (char *)v592 + 8 * v591;
              goto LABEL_973;
            }
            if (v586 <= v588)
            {
LABEL_697:
              LODWORD(v9) = 0;
            }
            else
            {
              LODWORD(v9) = 0;
              *(_QWORD *)(a2 + 4080) = &v584[8 * v588];
            }
LABEL_907:
            v6 = v761;
LABEL_813:
            if ((BYTE8(v793) & 1) != 0)
            {
              v557 = v793;
              *(_QWORD *)&v793 = 0;
              if (v557)
                (*(void (**)(uint64_t))(*(_QWORD *)v557 + 8))(v557);
            }
            goto LABEL_10;
          case 48:
            v397 = (uint64_t *)v785;
            v398 = v786;
            v399 = *(_QWORD *)(v3 + 1760);
            v400 = *(_DWORD **)(v3 + 1744);
            if (v786 <= (unint64_t)((v399 - (uint64_t)v400) >> 2))
            {
              v403 = *(_BYTE **)(v3 + 1752);
              v464 = (v403 - (_BYTE *)v400) >> 2;
              if (v464 >= v786)
              {
                if ((_DWORD)v786)
                {
                  v655 = 8 * v786;
                  v656 = *(_DWORD **)(v3 + 1744);
                  v657 = v656;
                  do
                  {
                    v658 = *v397++;
                    *v657++ = v658;
                    ++v656;
                    v655 -= 8;
                  }
                  while (v655);
                }
                else
                {
                  v656 = *(_DWORD **)(v3 + 1744);
                }
                v404 = (char *)v656 - (char *)v400;
                v403 = v400;
              }
              else
              {
                if (v403 != (_BYTE *)v400)
                {
                  v465 = 8 * v464;
                  v466 = (uint64_t *)v785;
                  do
                  {
                    v467 = *v466++;
                    *v400++ = v467;
                    v465 -= 8;
                  }
                  while (v465);
                }
                v468 = v403;
                if (v464 != v398)
                {
                  v469 = &v397[v464];
                  v468 = v403;
                  v470 = v403;
                  v471 = 8 * v398 - 8 * v464;
                  do
                  {
                    v472 = *v469++;
                    *v470++ = v472;
                    v468 += 4;
                    v471 -= 8;
                  }
                  while (v471);
                }
                v404 = v468 - v403;
              }
            }
            else
            {
              if (v400)
              {
                *(_QWORD *)(v3 + 1752) = v400;
                operator delete(v400);
                v399 = 0;
                *v719 = 0;
                v719[1] = 0;
                v719[2] = 0;
              }
              v401 = v399 >> 1;
              if (v399 >> 1 <= v398)
                v401 = v398;
              if ((unint64_t)v399 >= 0x7FFFFFFFFFFFFFFCLL)
                v402 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v402 = v401;
              if (v402 >> 62)
                goto LABEL_988;
              v403 = operator new(4 * v402);
              v404 = 0;
              *(_QWORD *)(v3 + 1744) = v403;
              *(_QWORD *)(v3 + 1760) = &v403[4 * v402];
              v405 = 8 * v398;
              do
              {
                v406 = *v397++;
                *(_DWORD *)&v403[v404] = v406;
                v404 += 4;
                v405 -= 8;
              }
              while (v405);
            }
            LODWORD(v9) = 0;
            *(_QWORD *)(v3 + 1752) = &v403[v404];
            goto LABEL_813;
          case 49:
            if ((*(_BYTE *)(a2 + 6944) & 1) != 0)
            {
              *(_QWORD *)&v20.__val_ = std::generic_category();
              v20.__cat_ = (const std::error_category *)"Invalid existing UndefinedButUsed";
              goto LABEL_914;
            }
            v414 = v786;
            if ((v786 & 1) != 0)
            {
              *(_QWORD *)&v20.__val_ = std::generic_category();
              v20.__cat_ = (const std::error_category *)"invalid undefined-but-used record";
              goto LABEL_914;
            }
            if ((_DWORD)v786)
            {
              v415 = 0;
              do
              {
                v416 = sub_22E768FE0(a2, v3, *((_QWORD *)v785 + v415));
                v417 = *(unsigned int *)(a2 + 6944);
                if (v417 >= *(unsigned int *)(a2 + 6948))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v417 = *(unsigned int *)(a2 + 6944);
                }
                *(_DWORD *)(*(_QWORD *)(a2 + 6936) + 4 * v417) = v416;
                ++*(_DWORD *)(a2 + 6944);
                HIDWORD(v418) = *((_QWORD *)v785 + v415 + 1);
                LODWORD(v418) = HIDWORD(v418);
                v419 = sub_22E77BAB4(a2, v3, v418 >> 1);
                v420 = *(unsigned int *)(a2 + 6944);
                if (v420 >= *(unsigned int *)(a2 + 6948))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v420 = *(unsigned int *)(a2 + 6944);
                }
                v415 += 2;
                *(_DWORD *)(*(_QWORD *)(a2 + 6936) + 4 * v420) = v419;
                ++*(_DWORD *)(a2 + 6944);
              }
              while (v414 != v415);
            }
            goto LABEL_812;
          case 50:
            *(_QWORD *)&__src = v3;
            *(_QWORD *)v775 = &__src;
            __dst = (void **)v785;
            *(_QWORD *)v791 = (char *)v785 + 8 * v786;
            *(_QWORD *)&v797 = &__dst;
            *((_QWORD *)&v797 + 1) = v791;
            sub_22F2B0E40(v705, (_QWORD **)v775, &v797);
            goto LABEL_812;
          case 51:
            if ((_DWORD)v786 == 1)
            {
              HIDWORD(v463) = *(_DWORD *)v785;
              LODWORD(v463) = *(_DWORD *)v785;
              LODWORD(v9) = 0;
              *(_DWORD *)(a2 + 6488) = sub_22E77BAB4(a2, v3, v463 >> 1);
              goto LABEL_813;
            }
            *(_QWORD *)&v20.__val_ = std::generic_category();
            v20.__cat_ = (const std::error_category *)"invalid pragma optimize record";
            goto LABEL_914;
          case 52:
            if ((_DWORD)v786)
            {
              v446 = 0;
              v447 = 8 * v786;
              do
              {
                v448 = sub_22E768FE0(a2, v3, *(unsigned int *)((char *)v785 + v446));
                v449 = *(unsigned int *)(a2 + 6248);
                if (v449 >= *(unsigned int *)(a2 + 6252))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v449 = *(unsigned int *)(a2 + 6248);
                }
                *(_DWORD *)(*(_QWORD *)(a2 + 6240) + 4 * v449) = v448;
                ++*(_DWORD *)(a2 + 6248);
                v446 += 8;
              }
              while (v447 != v446);
            }
            goto LABEL_812;
          case 54:
            v331 = v786;
            if (!(_DWORD)v786)
              goto LABEL_812;
            v240 = a1;
            v332 = 0;
            do
            {
              v333 = sub_22E768FE0(a2, v3, *((_QWORD *)v785 + v332));
              v334 = *(unsigned int *)(a2 + 6992);
              if (v334 >= *(unsigned int *)(a2 + 6996))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v334 = *(unsigned int *)(a2 + 6992);
              }
              *(_QWORD *)(*(_QWORD *)(a2 + 6984) + 8 * v334) = v333;
              v335 = *(_DWORD *)(a2 + 6992) + 1;
              *(_DWORD *)(a2 + 6992) = v335;
              v336 = *((_QWORD *)v785 + v332 + 1);
              if (v335 >= *(_DWORD *)(a2 + 6996))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v335 = *(_DWORD *)(a2 + 6992);
              }
              *(_QWORD *)(*(_QWORD *)(a2 + 6984) + 8 * v335) = v336;
              ++*(_DWORD *)(a2 + 6992);
              for (v332 += 2; v336; --v336)
              {
                HIDWORD(v337) = *((_QWORD *)v785 + v332);
                LODWORD(v337) = HIDWORD(v337);
                v338 = sub_22E77BAB4(a2, v3, v337 >> 1);
                v339 = *(unsigned int *)(a2 + 6992);
                if (v339 >= *(unsigned int *)(a2 + 6996))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v339 = *(unsigned int *)(a2 + 6992);
                }
                *(_QWORD *)(*(_QWORD *)(a2 + 6984) + 8 * v339) = v338;
                v340 = *(_DWORD *)(a2 + 6992) + 1;
                *(_DWORD *)(a2 + 6992) = v340;
                v341 = *((_QWORD *)v785 + v332 + 1) == 1;
                if (v340 >= *(_DWORD *)(a2 + 6996))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v340 = *(_DWORD *)(a2 + 6992);
                }
                *(_QWORD *)(*(_QWORD *)(a2 + 6984) + 8 * v340) = v341;
                ++*(_DWORD *)(a2 + 6992);
                v332 += 2;
              }
            }
            while (v332 != v331);
            LODWORD(v9) = 0;
            goto LABEL_708;
          case 55:
            if ((_DWORD)v786 == 1)
            {
              LODWORD(v9) = 0;
              *(_DWORD *)(a2 + 6492) = *(_QWORD *)v785;
              goto LABEL_813;
            }
            *(_QWORD *)&v20.__val_ = std::generic_category();
            v20.__cat_ = (const std::error_category *)"invalid pragma ms_struct record";
            goto LABEL_914;
          case 56:
            if ((_DWORD)v786 == 2)
            {
              v444 = v785;
              *(_DWORD *)(a2 + 6496) = *(_QWORD *)v785;
              HIDWORD(v445) = v444[2];
              LODWORD(v445) = HIDWORD(v445);
              LODWORD(v9) = 0;
              *(_DWORD *)(a2 + 6500) = sub_22E77BAB4(a2, v3, v445 >> 1);
              goto LABEL_813;
            }
            *(_QWORD *)&v20.__val_ = std::generic_category();
            v20.__cat_ = (const std::error_category *)"invalid pragma pointers to members record";
            goto LABEL_914;
          case 57:
            if ((_DWORD)v786 == 1)
            {
              LODWORD(v9) = 0;
              *(_DWORD *)(a2 + 6320) = *(_QWORD *)v785;
              goto LABEL_813;
            }
            *(_QWORD *)&v20.__val_ = std::generic_category();
            v20.__cat_ = (const std::error_category *)"invalid cuda pragma options record";
            goto LABEL_914;
          case 60:
            if ((*(_DWORD *)(v3 + 4) == 4 || (*(_QWORD *)(*(_QWORD *)(v18 + 2000) + 20) & 0x2000000000000) != 0)
              && (_DWORD)v786)
            {
              v248 = 0;
              v249 = 8 * v786;
              do
              {
                v250 = sub_22E768FE0(a2, v3, *(unsigned int *)((char *)v785 + v248));
                v251 = *(unsigned int *)(a2 + 4856);
                if (v251 >= *(unsigned int *)(a2 + 4860))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v251 = *(unsigned int *)(a2 + 4856);
                }
                *(_DWORD *)(*(_QWORD *)(a2 + 4848) + 4 * v251) = v250;
                ++*(_DWORD *)(a2 + 4856);
                v248 += 8;
              }
              while (v249 != v248);
            }
            goto LABEL_812;
          case 61:
            if (v786 <= 2)
            {
              *(_QWORD *)&v20.__val_ = std::generic_category();
              v20.__cat_ = (const std::error_category *)"invalid pragma pack record";
              goto LABEL_914;
            }
            v505 = v785;
            v506 = *(_DWORD *)v785;
            if (((*(_DWORD *)v785 >> 1) & 3) == 2)
              v507 = 1;
            else
              v507 = 255;
            if ((v506 & 8) != 0)
              v507 = (v506 >> 4) & 0x1F;
            if (!v732[156])
              v732[156] = 1;
            *(_DWORD *)(a2 + 6664) = ((v506 & 1) << 24) | (v507 << 16) | (((v506 >> 1) & 3) << 8) | ((v506 & 8) >> 3);
            HIDWORD(v508) = v505[2];
            LODWORD(v508) = HIDWORD(v508);
            *(_DWORD *)(a2 + 6672) = sub_22E77BAB4(a2, v3, v508 >> 1);
            LODWORD(v9) = *((_DWORD *)v785 + 4);
            *(_DWORD *)(a2 + 6688) = 0;
            if ((_DWORD)v9)
            {
              v351 = a1;
              v509 = 3;
              do
              {
                LOWORD(v797) = 0;
                BYTE2(v797) = -1;
                *(_QWORD *)((char *)&v797 + 3) = 0;
                BYTE11(v797) = 0;
                v798 = 0uLL;
                v510 = *((_QWORD *)v785 + v509);
                if (((v510 >> 1) & 3) == 2)
                  v511 = 1;
                else
                  v511 = 255;
                if ((v510 & 8) != 0)
                  v511 = (v510 >> 4) & 0x1F;
                LODWORD(v797) = ((v510 & 1) << 24) | (v511 << 16) | (((v510 >> 1) & 3) << 8) | ((v510 & 8) >> 3);
                HIDWORD(v512) = *((_QWORD *)v785 + v509 + 1);
                LODWORD(v512) = HIDWORD(v512);
                DWORD1(v797) = sub_22E77BAB4(a2, v3, v512 >> 1);
                v513 = v509 + 3;
                HIDWORD(v512) = *((_QWORD *)v785 + v509 + 2);
                LODWORD(v512) = HIDWORD(v512);
                DWORD2(v797) = sub_22E77BAB4(a2, v3, v512 >> 1);
                v514 = v509 + 4;
                v515 = *((_QWORD *)v785 + v513);
                sub_22E793964(v775, (uint64_t *)v785 + v514, (uint64_t *)v785 + v514 + v515, v515);
                v516 = sub_22E3B9688(v737, (unint64_t)v775, 1);
                v517 = *(_QWORD *)(a2 + 6760) + 24 * *(unsigned int *)(a2 + 6768);
                v518 = *(_OWORD *)v516;
                *(_QWORD *)(v517 + 16) = *(_QWORD *)(v516 + 16);
                *(_OWORD *)v517 = v518;
                *(_QWORD *)(v516 + 8) = 0;
                *(_QWORD *)(v516 + 16) = 0;
                *(_QWORD *)v516 = 0;
                v519 = *(_DWORD *)(a2 + 6768) + 1;
                *(_DWORD *)(a2 + 6768) = v519;
                if ((v775[23] & 0x80000000) != 0)
                {
                  operator delete(*(void **)v775);
                  v519 = *(_DWORD *)(a2 + 6768);
                }
                v520 = *(_QWORD *)(a2 + 6760) + 24 * v519;
                v523 = *(_QWORD *)(v520 - 24);
                v521 = v520 - 24;
                v522 = v523;
                v524 = *(_BYTE *)(v521 + 23);
                v525 = v524;
                if (v524 >= 0)
                  v522 = v521;
                v526 = *(_QWORD *)(v521 + 8);
                v527 = v524 & 0x7F;
                if (v525 >= 0)
                  v526 = v527;
                *(_QWORD *)&v798 = v522;
                *((_QWORD *)&v798 + 1) = v526;
                v528 = *(unsigned int *)(a2 + 6688);
                v529 = *(_QWORD *)(a2 + 6680);
                v530 = (char *)&v797;
                if (v528 >= *(_DWORD *)(a2 + 6692))
                {
                  v533 = v529 + 32 * v528 > (unint64_t)&v797;
                  if (v529 <= (unint64_t)&v797 && v533)
                  {
                    v534 = (char *)&v797 - v529;
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v529 = *v694;
                    v530 = &v534[*v694];
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v529 = *v694;
                    v530 = (char *)&v797;
                  }
                }
                v509 = v514 + v515;
                v531 = (_OWORD *)(v529 + 32 * *(unsigned int *)(a2 + 6688));
                v532 = *((_OWORD *)v530 + 1);
                *v531 = *(_OWORD *)v530;
                v531[1] = v532;
                ++*(_DWORD *)(a2 + 6688);
                LODWORD(v9) = v9 - 1;
              }
              while ((_DWORD)v9);
LABEL_906:
              a1 = v351;
            }
            goto LABEL_907;
          case 62:
            v301 = a1;
            v302 = v786;
            v303 = v691;
            if (!(_DWORD)v786)
            {
              LODWORD(v9) = 0;
              a1 = v301;
              goto LABEL_813;
            }
            if (*(_QWORD *)v785)
            {
              HIDWORD(v672) = *((_DWORD *)v785 + 2);
              LODWORD(v672) = HIDWORD(v672);
              v668 = sub_22E77BAB4(a2, v3, v672 >> 1);
              HIDWORD(v672) = *((_DWORD *)v785 + 4);
              LODWORD(v672) = HIDWORD(v672);
              v671 = sub_22E77BAB4(a2, v3, v672 >> 1);
              v303 = *((_QWORD *)v785 + 3) != 0;
              v685 = *((_QWORD *)v785 + 4) != 0;
              HIDWORD(v672) = *((_DWORD *)v785 + 10);
              LODWORD(v672) = HIDWORD(v672);
              v670 = sub_22E77BAB4(a2, v3, v672 >> 1);
              v706 = v668 >> 8;
              v669 = 6;
              v768 = 1;
            }
            else
            {
              v768 = 0;
              LOBYTE(v668) = 0;
              v669 = 1;
              v671 = v686;
              v670 = v687;
            }
            v691 = v303;
            v673 = v302 - 1;
            *(_QWORD *)&v797 = &v798;
            *((_QWORD *)&v797 + 1) = 0x400000000;
            v686 = v671;
            v687 = v670;
            if (v669 >= v673)
            {
              v680 = 0;
              v681 = &v798;
            }
            else
            {
              do
              {
                HIDWORD(v674) = *((_QWORD *)v785 + v669);
                LODWORD(v674) = HIDWORD(v674);
                v675 = sub_22E77BAB4(a2, v3, v674 >> 1);
                v676 = *((_QWORD *)v785 + v669 + 1) != 0;
                v677 = *((_QWORD *)v785 + v669 + 2) != 0;
                v678 = *((_QWORD *)v785 + v669 + 3) != 0;
                v679 = DWORD2(v797);
                if (DWORD2(v797) >= (unint64_t)HIDWORD(v797))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v679 = DWORD2(v797);
                }
                v669 += 4;
                *(_QWORD *)(v797 + 8 * v679) = v675 | (unint64_t)(v676 << 32) | (v677 << 40) | (v678 << 48);
                v680 = ++DWORD2(v797);
              }
              while (v669 < v673);
              v681 = (__int128 *)v797;
              v6 = v761;
              v671 = v686;
            }
            v682 = *(_QWORD *)(a2 + 120);
            *(_DWORD *)(v682 + 1000) = 2;
            *(_DWORD *)(v682 + 960) = 0;
            sub_22F2633B0(v682 + 952, v681, (_BYTE *)v681 + 8 * v680);
            *(_DWORD *)(v682 + 928) = v668 | (v706 << 8);
            *(_DWORD *)(v682 + 932) = v671;
            *(_BYTE *)(v682 + 936) = v691;
            *(_BYTE *)(v682 + 937) = v685;
            *(_DWORD *)(v682 + 940) = v687;
            *(_BYTE *)(v682 + 944) = v768;
            a1 = v301;
            if ((__int128 *)v797 != &v798)
              free((void *)v797);
            goto LABEL_812;
          case 64:
            v9 = v786;
            if (!(_DWORD)v786)
              goto LABEL_813;
            v252 = a1;
            v253 = 0;
            break;
          case 65:
            if (v786 <= 2)
            {
              *(_QWORD *)&v20.__val_ = std::generic_category();
              v20.__cat_ = (const std::error_category *)"invalid pragma float control record";
              goto LABEL_914;
            }
            v478 = v785;
            v479 = *(_QWORD *)v785;
            if (!*v732)
              *v732 = 1;
            *(_QWORD *)(a2 + 6504) = __ROR8__(v479, 32);
            HIDWORD(v480) = v478[2];
            LODWORD(v480) = HIDWORD(v480);
            *(_DWORD *)(a2 + 6516) = sub_22E77BAB4(a2, v3, v480 >> 1);
            LODWORD(v9) = *((_DWORD *)v785 + 4);
            *(_DWORD *)(a2 + 6528) = 0;
            if ((_DWORD)v9)
            {
              v481 = a1;
              v482 = 3;
              do
              {
                v797 = 0u;
                v798 = 0u;
                *(_QWORD *)&v797 = __ROR8__(*((_QWORD *)v785 + v482), 32);
                HIDWORD(v483) = *((_QWORD *)v785 + v482 + 1);
                LODWORD(v483) = HIDWORD(v483);
                DWORD2(v797) = sub_22E77BAB4(a2, v3, v483 >> 1);
                HIDWORD(v483) = *((_QWORD *)v785 + v482 + 2);
                LODWORD(v483) = HIDWORD(v483);
                HIDWORD(v797) = sub_22E77BAB4(a2, v3, v483 >> 1);
                v484 = v482 + 4;
                v485 = *((_QWORD *)v785 + v482 + 3);
                sub_22E793964(v775, (uint64_t *)v785 + v484, (uint64_t *)v785 + v484 + v485, v485);
                v486 = sub_22E3B9688(v738, (unint64_t)v775, 1);
                v487 = *(_QWORD *)(a2 + 6600) + 24 * *(unsigned int *)(a2 + 6608);
                v488 = *(_OWORD *)v486;
                *(_QWORD *)(v487 + 16) = *(_QWORD *)(v486 + 16);
                *(_OWORD *)v487 = v488;
                *(_QWORD *)(v486 + 8) = 0;
                *(_QWORD *)(v486 + 16) = 0;
                *(_QWORD *)v486 = 0;
                v489 = *(_DWORD *)(a2 + 6608) + 1;
                *(_DWORD *)(a2 + 6608) = v489;
                if ((v775[23] & 0x80000000) != 0)
                {
                  operator delete(*(void **)v775);
                  v489 = *(_DWORD *)(a2 + 6608);
                }
                v490 = *(_QWORD *)(a2 + 6600) + 24 * v489;
                v493 = *(_QWORD *)(v490 - 24);
                v491 = v490 - 24;
                v492 = v493;
                v494 = *(_BYTE *)(v491 + 23);
                v495 = v494;
                if (v494 >= 0)
                  v492 = v491;
                v496 = *(_QWORD *)(v491 + 8);
                v497 = v494 & 0x7F;
                if (v495 >= 0)
                  v496 = v497;
                *(_QWORD *)&v798 = v492;
                *((_QWORD *)&v798 + 1) = v496;
                v498 = *(unsigned int *)(a2 + 6528);
                v499 = *(_QWORD *)(a2 + 6520);
                v500 = (char *)&v797;
                v6 = v761;
                if (v498 >= *(_DWORD *)(a2 + 6532))
                {
                  v503 = v499 + 32 * v498 > (unint64_t)&v797;
                  if (v499 <= (unint64_t)&v797 && v503)
                  {
                    v504 = (char *)&v797 - v499;
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v499 = *v695;
                    v500 = &v504[*v695];
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v499 = *v695;
                    v500 = (char *)&v797;
                  }
                }
                v482 = v484 + v485;
                v501 = (_OWORD *)(v499 + 32 * *(unsigned int *)(a2 + 6528));
                v502 = *((_OWORD *)v500 + 1);
                *v501 = *(_OWORD *)v500;
                v501[1] = v502;
                ++*(_DWORD *)(a2 + 6528);
                LODWORD(v9) = v9 - 1;
              }
              while ((_DWORD)v9);
              a1 = v481;
            }
            goto LABEL_813;
          case 66:
            v239 = *(_DWORD *)v772[0];
            if (!*(_DWORD *)v772[0])
              goto LABEL_812;
            v240 = a1;
            v241 = *(_QWORD *)(a2 + 120);
            v242 = (unsigned int *)((char *)v772[0] + 4);
            do
            {
              v243 = *v242++;
              sub_22E76DF4C(v3, v243, (uint64_t)&v797);
              if ((SBYTE7(v798) & 0x80u) == 0)
                v244 = &v797;
              else
                v244 = (__int128 *)v797;
              if ((SBYTE7(v798) & 0x80u) == 0)
                v245 = BYTE7(v798) & 0x7F;
              else
                v245 = *((_QWORD *)&v797 + 1);
              sub_22F1D07D8(*(_QWORD *)(v241 + 80), v244, v245, 0, 1, (uint64_t)&__src);
              if ((v789 & 1) == 0)
                sub_22E67A2B0((_DWORD *)(v241 + 1592), &__src, (uint64_t)v775);
              if (SBYTE7(v798) < 0)
                operator delete((void *)v797);
              --v239;
            }
            while (v239);
            LODWORD(v9) = 0;
            a2 = v755;
LABEL_708:
            a1 = v240;
            goto LABEL_813;
          case 67:
            if (!(_DWORD)v786)
              goto LABEL_812;
            v246 = *(_QWORD *)(a2 + 120);
            HIDWORD(v247) = *(_DWORD *)v785;
            LODWORD(v247) = *(_DWORD *)v785;
            LODWORD(v9) = 0;
            *(_DWORD *)(v246 + 860) = sub_22E77BAB4(a2, v3, v247 >> 1);
            goto LABEL_813;
          default:
            goto LABEL_813;
        }
        while (2)
        {
          v254 = sub_22E768FE0(a2, v3, *((_QWORD *)v785 + v253));
          v255 = v254;
          v256 = *(_DWORD *)(a2 + 7208);
          v257 = v256 & 1;
          if ((v256 & 1) != 0)
          {
            v258 = 4;
            v259 = v747;
            goto LABEL_421;
          }
          v258 = *(_DWORD *)(a2 + 7224);
          if (!v258)
          {
            v268 = 0;
            v269 = 0;
            goto LABEL_436;
          }
          v259 = *(_QWORD *)(a2 + 7216);
LABEL_421:
          v260 = v258 - 1;
          v261 = v260 & (37 * v254);
          v262 = (_DWORD *)(v259 + 4 * v261);
          v263 = *v262;
          if (v254 != *v262)
          {
            v264 = 0;
            v265 = 1;
            while (v263 != -1)
            {
              if (v264)
                v266 = 0;
              else
                v266 = v263 == -2;
              if (v266)
                v264 = v262;
              v267 = v261 + v265++;
              v261 = v267 & v260;
              v262 = (_DWORD *)(v259 + 4 * v261);
              v263 = *v262;
              if (v254 == *v262)
                goto LABEL_443;
            }
            if (v264)
              v268 = v264;
            else
              v268 = v262;
            if ((v256 & 1) != 0)
              v269 = 4;
            else
              v269 = *(_DWORD *)(a2 + 7224);
LABEL_436:
            if (4 * (v256 >> 1) + 4 >= 3 * v269)
            {
              sub_22E79022C(v736, 2 * v269);
              v256 = *(_DWORD *)v736;
              if ((*(_DWORD *)v736 & 1) != 0)
              {
                v271 = 4;
                v272 = v747;
              }
              else
              {
                v271 = *(_DWORD *)(a2 + 7224);
                if (!v271)
                {
                  v257 = 0;
                  v268 = 0;
                  goto LABEL_438;
                }
                v272 = *(_QWORD *)(a2 + 7216);
              }
              v257 = *(_DWORD *)v736 & 1;
              v273 = v271 - 1;
              v274 = (v271 - 1) & (37 * v255);
              v268 = (_DWORD *)(v272 + 4 * v274);
              v275 = *v268;
              if (v255 != *v268)
              {
                v276 = 0;
                v277 = 1;
                while (v275 != -1)
                {
                  if (v276)
                    v278 = 0;
                  else
                    v278 = v275 == -2;
                  if (v278)
                    v276 = v268;
                  v279 = v274 + v277++;
                  v274 = v279 & v273;
                  v268 = (_DWORD *)(v272 + 4 * (v279 & v273));
                  v275 = *v268;
                  if (v255 == *v268)
                    goto LABEL_438;
                }
                if (v276)
                  v268 = v276;
              }
            }
            else
            {
              if (v269 + ~(v256 >> 1) - *(_DWORD *)(a2 + 7212) > v269 >> 3)
                goto LABEL_438;
              sub_22E79022C(v736, v269);
              v256 = *(_DWORD *)v736;
              if ((*(_DWORD *)v736 & 1) != 0)
              {
                v280 = 4;
                v281 = v747;
LABEL_467:
                v257 = *(_DWORD *)v736 & 1;
                v282 = v280 - 1;
                v283 = (v280 - 1) & (37 * v255);
                v268 = (_DWORD *)(v281 + 4 * v283);
                v284 = *v268;
                if (*v268 != v255)
                {
                  v285 = 0;
                  v286 = 1;
                  while (v284 != -1)
                  {
                    if (v285)
                      v287 = 0;
                    else
                      v287 = v284 == -2;
                    if (v287)
                      v285 = v268;
                    v288 = v283 + v286++;
                    v283 = v288 & v282;
                    v268 = (_DWORD *)(v281 + 4 * (v288 & v282));
                    v284 = *v268;
                    if (*v268 == v255)
                      goto LABEL_479;
                  }
                  if (v285)
                    v268 = v285;
                }
              }
              else
              {
                v280 = *(_DWORD *)(v755 + 7224);
                if (v280)
                {
                  v281 = *(_QWORD *)(v755 + 7216);
                  goto LABEL_467;
                }
                v257 = 0;
                v268 = 0;
              }
LABEL_479:
              v3 = v760;
              a2 = v755;
              v6 = v761;
            }
LABEL_438:
            *(_DWORD *)v736 = (v256 & 0xFFFFFFFE | v257) + 2;
            if (*v268 != -1)
              --*(_DWORD *)(a2 + 7212);
            *v268 = v255;
            v270 = *(unsigned int *)(a2 + 7240);
            if (v270 >= *(unsigned int *)(a2 + 7244))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v270 = *(unsigned int *)(a2 + 7240);
            }
            *(_DWORD *)(*(_QWORD *)(a2 + 7232) + 4 * v270) = v255;
            ++*(_DWORD *)(a2 + 7240);
          }
LABEL_443:
          if (++v253 == v9)
          {
            LODWORD(v9) = 0;
            a1 = v252;
            goto LABEL_813;
          }
          continue;
        }
      }
      switch(HIDWORD(v783))
      {
        case 9:
          v15 = *(_OWORD *)(v6 + 16);
          *(_OWORD *)v759 = *(_OWORD *)v6;
          *(_OWORD *)(v759 + 16) = v15;
          *(_DWORD *)(v759 + 32) = *(_DWORD *)(v6 + 32);
          *(_DWORD *)(v3 + 1244) = *(_DWORD *)(v3 + 428);
          sub_22E743814(v740, *(uint64_t **)(v3 + 432), *(uint64_t **)(v3 + 440), (uint64_t)(*(_QWORD *)(v3 + 440) - *(_QWORD *)(v3 + 432)) >> 4);
          sub_22E747DF0(v739, v756);
          *(_QWORD *)(v3 + 1544) = *(_QWORD *)(v3 + 728);
          sub_22E746760(v6, a1);
          if (*a1)
            goto LABEL_9;
          llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)v759, 9, 0);
          if (*a1)
            goto LABEL_9;
          *(_QWORD *)(v3 + 1552) = 8 * *(_QWORD *)(v3 + 1224) - *(unsigned int *)(v3 + 1240);
          *(_QWORD *)&v797 = &v798;
          *((_QWORD *)&v797 + 1) = 0x4000000000;
          while (2)
          {
            while (2)
            {
              sub_22E748020(v759, 0, (uint64_t)v775);
              if ((v775[8] & 1) != 0)
                goto LABEL_982;
              switch(*(_DWORD *)v775)
              {
                case 2:
                  sub_22E746760(v759, (uint64_t *)&__src);
                  v16 = __src;
                  if ((v775[8] & 1) != 0)
                  {
                    v17 = *(_QWORD *)v775;
                    *(_QWORD *)v775 = 0;
                    if (v17)
                      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
                  }
                  v3 = v760;
                  a2 = v755;
                  v6 = v761;
                  if (v16)
                    goto LABEL_983;
                  continue;
                case 1:
                  goto LABEL_352;
                case 0:
                  goto LABEL_379;
              }
            }
            DWORD2(v797) = 0;
            *(_QWORD *)&v775[8] = 0;
            *(_QWORD *)v775 = 0;
            llvm::BitstreamCursor::readRecord();
            if ((BYTE8(__src) & 1) == 0)
            {
              if ((__src - 1) < 2 || (_DWORD)__src == 5)
                goto LABEL_352;
              continue;
            }
            break;
          }
          *a1 = __src;
          goto LABEL_353;
        case 0xA:
          v226 = *(_OWORD *)(v6 + 16);
          *(_OWORD *)v752 = *(_OWORD *)v6;
          *((_OWORD *)v752 + 1) = v226;
          *((_DWORD *)v752 + 8) = *(_DWORD *)(v6 + 32);
          *(_DWORD *)(v3 + 1804) = *(_DWORD *)(v3 + 428);
          sub_22E743814(v744, *(uint64_t **)(v3 + 432), *(uint64_t **)(v3 + 440), (uint64_t)(*(_QWORD *)(v3 + 440) - *(_QWORD *)(v3 + 432)) >> 4);
          sub_22E747DF0(v743, v756);
          *(_QWORD *)(v3 + 2104) = *(_QWORD *)(v3 + 728);
          v227 = *(_QWORD *)(a2 + 120);
          if (!*(_QWORD *)(v227 + 120))
            *(_QWORD *)(v227 + 120) = a2;
          sub_22E746760(v6, a1);
          if (*a1)
            goto LABEL_9;
          sub_22E76B97C(a1, v752, 10, 0);
          if (*a1)
            goto LABEL_9;
          *(_QWORD *)(v3 + 2176) = 8 * *(_QWORD *)(v3 + 1784) - *(unsigned int *)(v3 + 1800);
          goto LABEL_378;
        case 0xB:
          v222 = *(_OWORD *)(v6 + 16);
          *(_OWORD *)v757 = *(_OWORD *)v6;
          *(_OWORD *)(v757 + 16) = v222;
          *(_DWORD *)(v757 + 32) = *(_DWORD *)(v6 + 32);
          *(_DWORD *)(v3 + 2756) = *(_DWORD *)(v3 + 428);
          sub_22E743814(v742, *(uint64_t **)(v3 + 432), *(uint64_t **)(v3 + 440), (uint64_t)(*(_QWORD *)(v3 + 440) - *(_QWORD *)(v3 + 432)) >> 4);
          sub_22E747DF0(v741, v756);
          *(_QWORD *)(v3 + 3056) = *(_QWORD *)(v3 + 728);
          sub_22E746760(v6, a1);
          if (*a1)
            goto LABEL_9;
          sub_22E76B97C(a1, (llvm::BitstreamCursor *)v757, 11, v735);
          goto LABEL_377;
        case 0xC:
          v223 = *(_OWORD *)(v6 + 16);
          *(_OWORD *)v758 = *(_OWORD *)v6;
          *(_OWORD *)(v758 + 16) = v223;
          *(_DWORD *)(v758 + 32) = *(_DWORD *)(v6 + 32);
          *(_DWORD *)(v3 + 2220) = *(_DWORD *)(v3 + 428);
          sub_22E743814(v746, *(uint64_t **)(v3 + 432), *(uint64_t **)(v3 + 440), (uint64_t)(*(_QWORD *)(v3 + 440) - *(_QWORD *)(v3 + 432)) >> 4);
          sub_22E747DF0(v745, v756);
          *(_QWORD *)(v3 + 2520) = *(_QWORD *)(v3 + 728);
          sub_22E746760(v6, a1);
          if (*a1)
            goto LABEL_9;
          sub_22E76B97C(a1, (llvm::BitstreamCursor *)v758, 12, 0);
          if (*a1)
            goto LABEL_9;
          *(_QWORD *)(v3 + 2528) = 8 * *(_QWORD *)(v3 + 2200) - *(unsigned int *)(v3 + 2216);
          v224 = *(_QWORD **)(a2 + 120);
          v225 = v224[346];
          if (!v225)
          {
            sub_22F418734(v224);
            v225 = *(_QWORD *)(*(_QWORD *)(a2 + 120) + 2768);
          }
          if (!*(_QWORD *)(v225 + 208))
            *(_QWORD *)(v225 + 208) = v727;
          goto LABEL_378;
        case 0xD:
          llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)v6, 13, 0);
          if (*a1)
            goto LABEL_9;
          v22 = 0;
          v23 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a2 + 120) + 104) + 488);
          *(_QWORD *)&v797 = &v798;
          *((_QWORD *)&v797 + 1) = 0x4000000000;
          v24 = 1;
          break;
        case 0xE:
          *(_QWORD *)&v776 = *(_QWORD *)(v6 + 32);
          v228 = *(_OWORD *)(v6 + 16);
          *(_OWORD *)v775 = *(_OWORD *)v6;
          *(_OWORD *)&v775[16] = v228;
          DWORD1(v776) = *(_DWORD *)(v3 + 428);
          v777 = 0;
          v778 = 0;
          v229 = *(char **)(v3 + 432);
          v230 = *(char **)(v3 + 440);
          *((_QWORD *)&v776 + 1) = 0;
          sub_22E6C95B8((_QWORD *)&v776 + 1, v229, v230, (v230 - v229) >> 4);
          v779 = (char *)&v781;
          v780 = 0x800000000;
          if (*(_DWORD *)(v3 + 464))
            sub_22E747DF0((uint64_t)&v779, v756);
          v782 = *(_QWORD *)(v3 + 728);
          sub_22E746760(v6, a1);
          if (*a1 || (sub_22E76B97C(a1, (llvm::BitstreamCursor *)v775, 14, 0), *a1))
          {
            v231 = 0;
            LODWORD(v9) = 1;
          }
          else
          {
            v799 = v776;
            v797 = *(_OWORD *)v775;
            v798 = *(_OWORD *)&v775[16];
            memset(v800, 0, sizeof(v800));
            sub_22E6C95B8(v800, *((_QWORD **)&v776 + 1), v777, ((uint64_t)v777 - *((_QWORD *)&v776 + 1)) >> 4);
            v801[0] = (char *)v802;
            v801[1] = (char *)0x800000000;
            if ((_DWORD)v780)
              sub_22E747DF0((uint64_t)v801, (uint64_t)&v779);
            v802[32] = v782;
            v802[33] = v3;
            v233 = *(_DWORD *)(a2 + 11192);
            v234 = *(_QWORD *)(a2 + 11184);
            if (v233 >= *(_DWORD *)(a2 + 11196))
            {
              v683 = v234 + 352 * v233 > (unint64_t)&v797;
              if (v234 <= (unint64_t)&v797 && v683)
              {
                v684 = (char *)&v797 - v234;
                sub_22F2BBF6C((uint64_t)v693);
                v234 = *v693;
                v235 = &v684[*v693];
              }
              else
              {
                sub_22F2BBF6C((uint64_t)v693);
                v234 = *v693;
                v235 = (char *)&v797;
              }
              v3 = v760;
              a2 = v755;
              v6 = v761;
            }
            else
            {
              v235 = (char *)&v797;
            }
            v236 = v234 + 352 * *(unsigned int *)(a2 + 11192);
            v237 = *(_OWORD *)v235;
            v238 = *((_OWORD *)v235 + 1);
            *(_QWORD *)(v236 + 32) = *((_QWORD *)v235 + 4);
            *(_OWORD *)v236 = v237;
            *(_OWORD *)(v236 + 16) = v238;
            *(_DWORD *)(v236 + 36) = *((_DWORD *)v235 + 9);
            *(_QWORD *)(v236 + 48) = 0;
            *(_QWORD *)(v236 + 56) = 0;
            *(_QWORD *)(v236 + 40) = 0;
            *(_OWORD *)(v236 + 40) = *(_OWORD *)(v235 + 40);
            *(_QWORD *)(v236 + 56) = *((_QWORD *)v235 + 7);
            *((_QWORD *)v235 + 5) = 0;
            *((_QWORD *)v235 + 6) = 0;
            *((_QWORD *)v235 + 7) = 0;
            *(_QWORD *)(v236 + 64) = v236 + 80;
            *(_QWORD *)(v236 + 72) = 0x800000000;
            if (*((_DWORD *)v235 + 18))
              sub_22E78D1A4(v236 + 64, (uint64_t)(v235 + 64));
            *(_OWORD *)(v236 + 336) = *((_OWORD *)v235 + 21);
            ++*(_DWORD *)(a2 + 11192);
            sub_22E746F74(v801);
            if (v800[0])
            {
              sub_22E3B485C((uint64_t *)v800);
              operator delete(v800[0]);
            }
            LODWORD(v9) = 5;
            v231 = 1;
          }
          sub_22E746F74(&v779);
          if (*((_QWORD *)&v776 + 1))
          {
            sub_22E3B485C((uint64_t *)&v776 + 1);
            operator delete(*((void **)&v776 + 1));
            if ((v231 & 1) == 0)
              goto LABEL_10;
          }
          else if ((v231 & 1) == 0)
          {
            goto LABEL_10;
          }
          goto LABEL_378;
        default:
          sub_22E746760(v6, a1);
          goto LABEL_377;
      }
      while (1)
      {
        sub_22E748020(v6, 0, (uint64_t)v775);
        if ((v775[8] & 1) != 0)
          break;
        switch(*(_DWORD *)v775)
        {
          case 2:
            sub_22E746760(v6, (uint64_t *)&__src);
            v16 = __src;
            if ((v775[8] & 1) != 0)
            {
              v221 = *(_QWORD *)v775;
              *(_QWORD *)v775 = 0;
              if (v221)
                (*(void (**)(uint64_t))(*(_QWORD *)v221 + 8))(v221);
            }
            v3 = v760;
            a2 = v755;
            v6 = v761;
            if (v16)
              goto LABEL_983;
            break;
          case 1:
LABEL_352:
            *a1 = 0;
            goto LABEL_353;
          case 0:
LABEL_379:
            *(_QWORD *)&v807.__val_ = std::generic_category();
            v807.__cat_ = (const std::error_category *)"malformed block record in AST file";
            llvm::createStringError((llvm *)0x5C, v807, v232);
            goto LABEL_353;
          default:
            __len[1] = 0;
            __len[0] = 0;
            DWORD2(v797) = 0;
            llvm::BitstreamCursor::readRecord();
            if ((v796 & 1) != 0)
            {
              v26 = v795;
              v795 = 0;
              *a1 = v26;
LABEL_61:
              v25 = 1;
              goto LABEL_62;
            }
            if (((v24 ^ ((_DWORD)v795 != 0)) & 1) == 0)
            {
              *(_QWORD *)&v804.__val_ = std::generic_category();
              v804.__cat_ = (const std::error_category *)"submodule metadata record should be at beginning of block";
              llvm::createStringError((llvm *)0x5C, v804, v27);
              goto LABEL_61;
            }
            if (v22 || v795 <= 1)
            {
              v24 = 0;
              v25 = 0;
              switch((int)v795)
              {
                case 0:
                  v29 = *(_DWORD *)(a2 + 4208);
                  *(_DWORD *)(v3 + 2612) = v29;
                  v30 = v797;
                  v31 = *(_DWORD *)v797;
                  *(_DWORD *)(v3 + 2608) = *(_DWORD *)v797;
                  if (!v31)
                    goto LABEL_202;
                  v32 = *(_DWORD *)(v30 + 8);
                  *(_QWORD *)v775 = (v29 + 1);
                  *(_QWORD *)&v775[8] = v3;
                  sub_22E779D90(v718, (uint64_t *)v775);
                  v33 = *(_DWORD *)(v3 + 2612) - v32;
                  *(_DWORD *)v775 = v32;
                  *(_DWORD *)&v775[4] = v33;
                  sub_22E779E2C(v717, (unsigned int *)v775);
                  v34 = *(unsigned int *)(v3 + 2608);
                  if (!(_DWORD)v34)
                    goto LABEL_202;
                  v35 = *(unsigned int *)(a2 + 4208);
                  v36 = v34 + v35;
                  if (v34 + v35 > (unint64_t)*(unsigned int *)(a2 + 4212))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v35 = *(unsigned int *)(a2 + 4208);
                  }
                  if (v36 != v35)
                    bzero((void *)(*v721 + 8 * v35), 8 * (v36 - v35));
                  v24 = 0;
                  v25 = 0;
                  *(_DWORD *)(a2 + 4208) = v36;
                  break;
                case 1:
                  if (DWORD2(v797) <= 0xC)
                  {
                    *(_QWORD *)&v805.__val_ = std::generic_category();
                    v805.__cat_ = (const std::error_category *)"malformed module definition";
                    llvm::createStringError((llvm *)0x5C, v805, v63);
                    v24 = 0;
                    goto LABEL_61;
                  }
                  v765 = (uint64_t)v23;
                  v75 = a1;
                  v76 = a2;
                  v77 = (void *)__len[0];
                  v78 = __len[1];
                  v762 = sub_22E76C40C(v76, v3, *(_DWORD *)v797);
                  v79 = sub_22E76C40C(v76, v3, *(_DWORD *)(v797 + 8));
                  v750 = *(_DWORD *)(v797 + 16);
                  v80 = *(_QWORD *)(v797 + 32);
                  v753 = *(_QWORD *)(v797 + 24);
                  v81 = *(_QWORD *)(v797 + 40);
                  v748 = *(_QWORD *)(v797 + 48);
                  v689 = *(_QWORD *)(v797 + 64);
                  v690 = *(_QWORD *)(v797 + 56);
                  v82 = *(_QWORD *)(v797 + 80);
                  v688 = *(_QWORD *)(v797 + 72);
                  v83 = *(_QWORD *)(v797 + 88);
                  v84 = *(_QWORD *)(v797 + 96);
                  if (!v79)
                    goto LABEL_119;
                  if (*(_DWORD *)(v76 + 4208) >= v79)
                  {
                    v85 = *(_QWORD *)(*v721 + 8 * (v79 - 1));
                  }
                  else
                  {
                    sub_22E769C10(v76, "submodule ID out of range in AST file", 0x25uLL);
LABEL_119:
                    v85 = 0;
                  }
                  v139 = v81 != 0;
                  v23 = (uint64_t *)v765;
                  v140 = (std::string *)sub_22F158808(v765, v77, v78, v85, v80 != 0, v139);
                  v22 = (uint64_t)v140;
                  v141 = v762 - 1;
                  if (*(_DWORD *)(v755 + 4208) <= v141 || *(_QWORD *)(*v721 + 8 * v141))
                  {
                    *(_QWORD *)&v806.__val_ = std::generic_category();
                    a1 = v75;
                    v806.__cat_ = (const std::error_category *)"too many submodules";
                    llvm::createStringError((llvm *)0x16, v806, v142);
                    v24 = 0;
                    v25 = 1;
                    a2 = v755;
                    v6 = v761;
                    break;
                  }
                  if (v85)
                    goto LABEL_211;
                  size = v140;
                  do
                  {
                    v170 = size;
                    size = (std::string *)size[1].__r_.__value_.__l.__size_;
                  }
                  while (size);
                  v171 = v170[10].__r_.__value_.__r.__words[2];
                  if (v171)
                  {
                    do
                    {
                      v172 = *(_QWORD *)(v171 + 8);
                      v171 = v172 & 0xFFFFFFFFFFFFFFFCLL;
                    }
                    while ((v172 & 2) != 0 && v171);
                    if (v171 && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v755 + 120) + 32) + 152) & 2) == 0)
                    {
                      v173 = *(_QWORD *)(v3 + 216);
                      if (v173)
                      {
                        do
                        {
                          v174 = *(_QWORD *)(v173 + 8);
                          v173 = v174 & 0xFFFFFFFFFFFFFFFCLL;
                        }
                        while ((v174 & 2) != 0 && v173);
                      }
                      v3 = v760;
                      if (v173 != v171)
                      {
                        v175 = *(_QWORD *)(v755 + 128) + 2128;
                        *(_QWORD *)v775 = 0;
                        *(_QWORD *)&v775[8] = v175;
                        *(_DWORD *)&v775[16] = 917;
                        v176 = v140;
                        do
                        {
                          p_data = (void **)&v176->__r_.__value_.__l.__data_;
                          v176 = (std::string *)v176[1].__r_.__value_.__l.__size_;
                        }
                        while (v176);
                        v178 = *((_BYTE *)p_data + 23);
                        if (v178 >= 0)
                          v179 = p_data;
                        else
                          v179 = *p_data;
                        if (v178 >= 0)
                          v180 = v178 & 0x7F;
                        else
                          v180 = (size_t)p_data[1];
                        sub_22E3B89A8((unsigned __int8 **)v775, v179, v180);
                        v181 = *(_QWORD *)(v171 + 88);
                        do
                        {
                          v182 = (size_t *)v181;
                          v183 = *(_QWORD *)(v181 + 8);
                          if ((v183 & 2) == 0)
                            break;
                          v181 = v183 & 0xFFFFFFFFFFFFFFFCLL;
                        }
                        while (v181);
                        sub_22E3B89A8((unsigned __int8 **)v775, v182 + 4, *v182);
                        v184 = *(_QWORD *)(v760 + 216);
                        do
                        {
                          v185 = (size_t *)v184;
                          v186 = *(_QWORD *)(v184 + 8);
                          if ((v186 & 2) == 0)
                            break;
                          v184 = v186 & 0xFFFFFFFFFFFFFFFCLL;
                        }
                        while (v184);
                        sub_22E3B89A8((unsigned __int8 **)v775, v185 + 4, *v185);
                        v187 = *(_DWORD *)&v775[16];
                        v188 = *(_QWORD *)&v775[8];
                        if (*(_QWORD *)v775)
                        {
                          v763 = (_OWORD *)sub_22E3B8AAC(*(uint64_t *)&v775[8]);
                          sub_22E78D4E8(v763, *(uint64_t *)v775);
                          if (*(_QWORD *)v775 && *(_QWORD *)&v775[8])
                            sub_22E3BB10C(*(unint64_t *)&v775[8], *(unint64_t *)v775);
                          v189 = *(_DWORD *)(v755 + 496);
                          if (v763)
                          {
                            v190 = (_OWORD *)sub_22E3B8AAC(v188);
                            sub_22E78D4E8(v190, (uint64_t)v763);
                            v191 = 0;
                            goto LABEL_343;
                          }
                          v763 = 0;
                          v190 = 0;
                        }
                        else
                        {
                          v763 = 0;
                          v190 = 0;
                          v189 = *(_DWORD *)(v755 + 496);
                        }
                        v191 = 1;
LABEL_343:
                        v220 = operator new();
                        v24 = 0;
                        *(_QWORD *)v220 = &off_24FA72160;
                        *(_DWORD *)(v220 + 8) = v189;
                        *(_DWORD *)(v220 + 32) = v187;
                        *(_QWORD *)(v220 + 16) = v190;
                        *(_QWORD *)(v220 + 24) = v188;
                        v25 = 1;
                        *v75 = v220;
                        if ((v191 & 1) != 0)
                        {
                          v3 = v760;
                          a2 = v755;
                          a1 = v75;
                          v6 = v761;
LABEL_108:
                          v23 = (uint64_t *)v765;
                        }
                        else
                        {
                          v3 = v760;
                          a2 = v755;
                          a1 = v75;
                          v6 = v761;
                          v23 = (uint64_t *)v765;
                          if (v188)
                          {
                            sub_22E3BB10C(v188, (unint64_t)v763);
                            v24 = 0;
                          }
                        }
                        break;
                      }
                    }
                  }
                  *(_BYTE *)(v3 + 210) = 1;
                  v199 = v140;
                  do
                  {
                    v200 = v199;
                    v199 = (std::string *)v199[1].__r_.__value_.__l.__size_;
                  }
                  while (v199);
                  v200[10].__r_.__value_.__r.__words[2] = *(_QWORD *)(v3 + 216);
                  std::string::operator=(v140 + 2, __str);
                  v201 = *(_BYTE *)(v3 + 55);
                  v202 = v201;
                  v203 = v201 & 0x7F;
                  if (v202 < 0)
                    v203 = *(_QWORD *)(v3 + 40);
                  v85 = 0;
                  if (v203)
                  {
                    if (v202 < 0)
                    {
                      sub_22E3BB2B4(v772, *(void **)v697, *(_QWORD *)(v3 + 40));
                    }
                    else
                    {
                      *(_OWORD *)v772 = *(_OWORD *)v697;
                      v773 = *(_QWORD *)(v697 + 16);
                    }
                    sub_22E72CFC4(v22, (__n128 *)v772);
                    if (SHIBYTE(v773) < 0)
                      operator delete(v772[0]);
                  }
                  v214 = *(_BYTE *)(v3 + 79);
                  v215 = v214;
                  v216 = v214 & 0x7F;
                  if (v215 < 0)
                    v216 = *(_QWORD *)(v3 + 64);
                  if (v216)
                  {
                    if (v215 < 0)
                    {
                      sub_22E3BB2B4(&v793, *(void **)v696, *(_QWORD *)(v3 + 64));
                    }
                    else
                    {
                      v793 = *(_OWORD *)v696;
                      v794 = *(_QWORD *)(v696 + 16);
                    }
                    v217 = v22;
                    do
                    {
                      v218 = v217;
                      v217 = *(_QWORD *)(v217 + 32);
                    }
                    while (v217);
                    v219 = v218 + 296;
                    if (*(_BYTE *)(v218 + 320))
                    {
                      if (*(char *)(v218 + 319) < 0)
                        operator delete(*(void **)v219);
                      *(_OWORD *)v219 = v793;
                      *(_QWORD *)(v219 + 16) = v794;
                      HIBYTE(v794) = 0;
                      LOBYTE(v793) = 0;
                    }
                    else
                    {
                      *(_OWORD *)v219 = v793;
                      *(_QWORD *)(v218 + 312) = v794;
                      v794 = 0;
                      v793 = 0uLL;
                      *(_BYTE *)(v218 + 320) = 1;
                    }
                  }
LABEL_211:
                  *(_DWORD *)(v22 + 28) = v750;
                  v143 = *(_OWORD *)v701;
                  *(_DWORD *)(v22 + 96) = *(_DWORD *)(v701 + 16);
                  *(_OWORD *)(v22 + 80) = v143;
                  v144 = *(unsigned __int16 *)(v22 + 1344);
                  v145 = (v144 >> 6) & 1;
                  if (v748)
                    v145 = 1;
                  if (v145)
                    v146 = 64;
                  else
                    v146 = 0;
                  v147 = v144 & 0x2137;
                  if (v753)
                    v148 = -32760;
                  else
                    v148 = 8;
                  *(_WORD *)(v22 + 1344) = v148 | ((v690 != 0) << 7) | ((v689 != 0) << 9) | ((v688 != 0) << 10) | ((v82 != 0) << 11) | ((v83 != 0) << 12) | ((v84 != 0) << 14) | v147 | v146;
                  v149 = *(_QWORD *)(v755 + 64);
                  if (v149)
                    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v149 + 72))(v149, v762, v22);
                  *(_QWORD *)(*v721 + 8 * v141) = v22;
                  v150 = *(unsigned int *)(v22 + 1984);
                  a2 = v755;
                  a1 = v75;
                  v6 = v761;
                  if ((_DWORD)v150)
                  {
                    v151 = *(_QWORD *)(v22 + 1976);
                    v152 = 32 * v150;
                    do
                    {
                      if (*(char *)(v151 + v152 - 9) < 0)
                        operator delete(*(void **)(v151 + v152 - 32));
                      v152 -= 32;
                    }
                    while (v152);
                  }
                  *(_DWORD *)(v22 + 1984) = 0;
                  v153 = *(_QWORD *)(v22 + 2072);
                  v154 = *(_QWORD *)(v22 + 2064);
                  while (v153 != v154)
                  {
                    if (*(char *)(v153 - 1) < 0)
                      operator delete(*(void **)(v153 - 24));
                    v153 -= 24;
                  }
                  *(_QWORD *)(v22 + 2072) = v154;
                  sub_22E791220((char **)(v22 + 2088));
                  v155 = *(_QWORD *)(v22 + 2120);
                  v156 = *(_QWORD *)(v22 + 2112);
                  while (v155 != v156)
                  {
                    if (*(char *)(v155 - 1) < 0)
                      operator delete(*(void **)(v155 - 24));
                    v155 -= 32;
                  }
                  *(_QWORD *)(v22 + 2120) = v156;
                  v157 = *(unsigned int *)(v22 + 1264);
                  if ((_DWORD)v157)
                  {
                    v158 = *(_QWORD *)(v22 + 1256);
                    v159 = 32 * v157;
                    do
                    {
                      if (*(char *)(v158 + v159 - 9) < 0)
                        operator delete(*(void **)(v158 + v159 - 32));
                      v159 -= 32;
                    }
                    while (v159);
                  }
                  *(_DWORD *)(v22 + 1264) = 0;
                  v160 = *(unsigned int *)(v22 + 1176);
                  if ((_DWORD)v160)
                  {
                    v161 = *(_QWORD *)(v22 + 1168);
                    v162 = 72 * v160;
                    do
                    {
                      if (*(char *)(v161 + v162 - 41) < 0)
                        operator delete(*(void **)(v161 + v162 - 64));
                      v162 -= 72;
                    }
                    while (v162);
                  }
                  *(_DWORD *)(v22 + 1176) = 0;
                  if (v85)
                  {
                    v163 = *(_WORD *)(v22 + 1344) & 0xFFFA | *(_WORD *)(v85 + 1344) & 1;
                    v164 = (4 * (*(_WORD *)(v85 + 1344) & 1)) ^ 4;
                  }
                  else
                  {
                    v163 = *(_WORD *)(v22 + 1344) & 0xFFFA;
                    v164 = 4;
                  }
                  v23 = (uint64_t *)v765;
                  v24 = 0;
                  v25 = 0;
                  *(_WORD *)(v22 + 1344) = v164 | v163;
                  break;
                case 2:
                  v60 = __len[1];
                  if (__len[1] > 0x7FFFFFFFFFFFFFF7)
                    goto LABEL_988;
                  v61 = (const void *)__len[0];
                  if (__len[1] >= 0x17)
                  {
                    v105 = (__len[1] & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((__len[1] | 7) != 0x17)
                      v105 = __len[1] | 7;
                    v106 = a1;
                    v107 = v105 + 1;
                    p_dst = (void **)operator new(v105 + 1);
                    v108 = v107 | 0x8000000000000000;
                    a1 = v106;
                    v771 = v108;
                    __dst = p_dst;
                    v770 = v60;
                  }
                  else
                  {
                    HIBYTE(v771) = __len[1];
                    p_dst = (void **)&__dst;
                    if (!__len[1])
                      goto LABEL_156;
                  }
                  memmove(p_dst, v61, v60);
LABEL_156:
                  *((_BYTE *)p_dst + v60) = 0;
                  sub_22E76C4AC(v3, (uint64_t)&__dst);
                  a2 = v755;
                  if (v771 >= 0)
                    v109 = (void **)&__dst;
                  else
                    v109 = __dst;
                  if (v771 >= 0)
                    v110 = HIBYTE(v771) & 0x7F;
                  else
                    v110 = v770;
                  sub_22F1D07D8(*(_QWORD *)(*(_QWORD *)(v755 + 120) + 80), v109, v110, 0, 1, (uint64_t)v791);
                  if ((v792 & 1) == 0)
                  {
                    sub_22E72D044((char *)v22, (uint64_t)v775);
                    v111 = v777;
                    if (SHIBYTE(v776) < 0)
                      operator delete(*(void **)&v775[24]);
                    if ((v775[23] & 0x80000000) != 0)
                      operator delete(*(void **)v775);
                    if (!v111)
                    {
                      LOWORD(v776) = 261;
                      *(_QWORD *)v775 = __len[0];
                      *(_QWORD *)&v775[8] = __len[1];
                      v790 = 257;
                      sub_22F1514D0((uint64_t)v23, v22, *(uint64_t *)v791, (llvm::Twine *)v775, (llvm::Twine *)&__src);
                    }
                  }
                  goto LABEL_169;
                case 3:
                case 9:
                case 13:
                case 14:
                case 15:
                  break;
                case 4:
                  v57 = __len[1];
                  if (__len[1] > 0x7FFFFFFFFFFFFFF7)
                    goto LABEL_988;
                  v58 = (const void *)__len[0];
                  if (__len[1] >= 0x17)
                  {
                    v93 = (__len[1] & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((__len[1] | 7) != 0x17)
                      v93 = __len[1] | 7;
                    v94 = a1;
                    v95 = v93 + 1;
                    p_src = (__int128 *)operator new(v93 + 1);
                    v96 = v95 | 0x8000000000000000;
                    a1 = v94;
                    v789 = v96;
                    *(_QWORD *)&__src = p_src;
                    *((_QWORD *)&__src + 1) = v57;
                  }
                  else
                  {
                    HIBYTE(v789) = __len[1];
                    p_src = &__src;
                    if (!__len[1])
                      goto LABEL_141;
                  }
                  memmove(p_src, v58, v57);
LABEL_141:
                  *((_BYTE *)p_src + v57) = 0;
                  v97 = *(_QWORD *)(v22 + 392);
                  v98 = *(_QWORD *)(v22 + 400);
                  if (v97 >= v98)
                  {
                    v766 = v23;
                    v100 = *(_QWORD *)(v22 + 384);
                    v101 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v97 - v100) >> 3) + 1;
                    a2 = v755;
                    if (v101 > 0xAAAAAAAAAAAAAAALL)
                      goto LABEL_988;
                    v102 = a1;
                    if (0x5555555555555556 * ((uint64_t)(v98 - v100) >> 3) > v101)
                      v101 = 0x5555555555555556 * ((uint64_t)(v98 - v100) >> 3);
                    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v98 - v100) >> 3) >= 0x555555555555555)
                      v103 = 0xAAAAAAAAAAAAAAALL;
                    else
                      v103 = v101;
                    *(_QWORD *)&v776 = v22 + 400;
                    if (v103)
                    {
                      if (v103 > 0xAAAAAAAAAAAAAAALL)
                        goto LABEL_989;
                      v104 = (char *)operator new(24 * v103);
                    }
                    else
                    {
                      v104 = 0;
                    }
                    v133 = &v104[8 * ((uint64_t)(v97 - v100) >> 3)];
                    *(_OWORD *)v133 = __src;
                    *((_QWORD *)v133 + 2) = v789;
                    if (v97 == v100)
                    {
                      v136 = vdupq_n_s64(v97);
                      v134 = &v104[8 * ((uint64_t)(v97 - v100) >> 3)];
                    }
                    else
                    {
                      v134 = &v104[8 * ((uint64_t)(v97 - v100) >> 3)];
                      do
                      {
                        v135 = *(_OWORD *)(v97 - 24);
                        *((_QWORD *)v134 - 1) = *(_QWORD *)(v97 - 8);
                        *(_OWORD *)(v134 - 24) = v135;
                        v134 -= 24;
                        *(_QWORD *)(v97 - 16) = 0;
                        *(_QWORD *)(v97 - 8) = 0;
                        *(_QWORD *)(v97 - 24) = 0;
                        v97 -= 24;
                      }
                      while (v97 != v100);
                      v136 = *(int64x2_t *)(v22 + 384);
                      v98 = *(_QWORD *)(v22 + 400);
                    }
                    v99 = (unint64_t)(v133 + 24);
                    *(_QWORD *)(v22 + 384) = v134;
                    *(_QWORD *)(v22 + 392) = v133 + 24;
                    *(int64x2_t *)&v775[8] = v136;
                    *(_QWORD *)(v22 + 400) = &v104[24 * v103];
                    *(_QWORD *)&v775[24] = v98;
                    *(_QWORD *)v775 = v136.i64[0];
                    sub_22E3B8B94((uint64_t)v775);
                    a1 = v102;
                    v23 = v766;
                  }
                  else
                  {
                    *(_OWORD *)v97 = __src;
                    *(_QWORD *)(v97 + 16) = v789;
                    v99 = v97 + 24;
                    a2 = v755;
                  }
                  v24 = 0;
                  v25 = 0;
                  *(_QWORD *)(v22 + 392) = v99;
                  break;
                case 5:
                  v46 = __len[1];
                  if (__len[1] > 0x7FFFFFFFFFFFFFF7)
                    goto LABEL_988;
                  v47 = (const void *)__len[0];
                  if (__len[1] >= 0x17)
                  {
                    v86 = (__len[1] & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((__len[1] | 7) != 0x17)
                      v86 = __len[1] | 7;
                    v87 = a1;
                    v88 = v86 + 1;
                    v48 = (void **)operator new(v86 + 1);
                    v89 = v88 | 0x8000000000000000;
                    a1 = v87;
                    v771 = v89;
                    __dst = v48;
                    v770 = v46;
                  }
                  else
                  {
                    HIBYTE(v771) = __len[1];
                    v48 = (void **)&__dst;
                    if (!__len[1])
                      goto LABEL_124;
                  }
                  memmove(v48, v47, v46);
LABEL_124:
                  *((_BYTE *)v48 + v46) = 0;
                  sub_22E76C4AC(v3, (uint64_t)&__dst);
                  a2 = v755;
                  if (v771 >= 0)
                    v90 = (char *)&__dst;
                  else
                    v90 = (char *)__dst;
                  if (v771 >= 0)
                    v91 = HIBYTE(v771) & 0x7F;
                  else
                    v91 = v770;
                  sub_22F1D0728(*(_QWORD *)(*(_QWORD *)(v755 + 120) + 80), v90, v91, 1, (uint64_t)v791);
                  if ((v792 & 1) == 0)
                  {
                    sub_22F1D8DAC(v22, (uint64_t)v775);
                    v92 = v777;
                    if (SHIBYTE(v776) < 0)
                      operator delete(*(void **)&v775[24]);
                    if ((v775[23] & 0x80000000) != 0)
                      operator delete(*(void **)v775);
                    if (!v92)
                    {
                      LOWORD(v776) = 261;
                      *(_QWORD *)v775 = __len[0];
                      *(_QWORD *)&v775[8] = __len[1];
                      v790 = 257;
                      sub_22F159CA8((uint64_t)v23, v22, *(uint64_t *)v791, (llvm::Twine *)v775, (llvm::Twine *)&__src);
                    }
                  }
LABEL_169:
                  if ((SHIBYTE(v771) & 0x80000000) == 0)
                    goto LABEL_202;
                  v112 = __dst;
                  goto LABEL_201;
                case 6:
                  if (!DWORD2(v797))
                    goto LABEL_202;
                  v52 = 0;
                  do
                  {
                    v776 = 0uLL;
                    *(_QWORD *)v775 = v3;
                    *(_QWORD *)&v775[8] = v22;
                    *(_DWORD *)&v775[20] = *(_QWORD *)(v797 + 8 * v52);
                    *(_DWORD *)&v775[16] = 0;
                    v775[24] &= ~1u;
                    v53 = (_OWORD *)sub_22E4D6FB0(v733, (unint64_t)v775);
                    v54 = (_OWORD *)(*(_QWORD *)(a2 + 4336) + 48 * *(unsigned int *)(a2 + 4344));
                    v56 = v53[1];
                    v55 = v53[2];
                    *v54 = *v53;
                    v54[1] = v56;
                    v54[2] = v55;
                    ++*(_DWORD *)(a2 + 4344);
                    ++v52;
                  }
                  while (v52 != DWORD2(v797));
                  v24 = 0;
                  v25 = 0;
                  break;
                case 7:
                  v765 = (uint64_t)v23;
                  if (DWORD2(v797) >= 2)
                  {
                    v64 = 1;
                    do
                    {
                      v776 = 0uLL;
                      *(_QWORD *)v775 = v3;
                      *(_QWORD *)&v775[8] = v22;
                      *(_DWORD *)&v775[20] = *(_QWORD *)(v797 + 8 * (v64 - 1));
                      *(_DWORD *)&v775[16] = 1;
                      v775[24] = v775[24] & 0xFE | *(_QWORD *)(v797 + 8 * v64) & 1;
                      v65 = (_OWORD *)sub_22E4D6FB0(v733, (unint64_t)v775);
                      v66 = (_OWORD *)(*(_QWORD *)(a2 + 4336) + 48 * *(unsigned int *)(a2 + 4344));
                      v68 = v65[1];
                      v67 = v65[2];
                      *v66 = *v65;
                      v66[1] = v68;
                      v66[2] = v67;
                      ++*(_DWORD *)(a2 + 4344);
                      v64 += 2;
                    }
                    while (DWORD2(v797) > v64);
                  }
                  v69 = *(unsigned int *)(v22 + 1512);
                  if ((_DWORD)v69)
                  {
                    v70 = *(_QWORD *)(v22 + 1504) - 88;
                    v71 = 96 * v69;
                    do
                    {
                      sub_22E5762C8((char **)(v70 + v71));
                      v71 -= 96;
                    }
                    while (v71);
                  }
                  v24 = 0;
                  v25 = 0;
                  *(_DWORD *)(v22 + 1512) = 0;
                  goto LABEL_108;
                case 8:
                  sub_22F1D9140(v22, (void *)__len[0], __len[1], *(_QWORD *)v797 != 0, *(_QWORD *)(*(_QWORD *)(a2 + 120) + 56), *(_QWORD *)(*(_QWORD *)(a2 + 120) + 64));
                  goto LABEL_202;
                case 10:
                  sub_22F41224C((uint64_t)v23);
                  v166 = __len[1];
                  if (__len[1] > 0x7FFFFFFFFFFFFFF7)
                    goto LABEL_988;
                  v167 = (const void *)__len[0];
                  if (__len[1] >= 0x17)
                  {
                    v194 = (__len[1] & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((__len[1] | 7) != 0x17)
                      v194 = __len[1] | 7;
                    v195 = a1;
                    v196 = v194 + 1;
                    v168 = (__int128 *)operator new(v194 + 1);
                    v197 = v196 | 0x8000000000000000;
                    a1 = v195;
                    v789 = v197;
                    *(_QWORD *)&__src = v168;
                    *((_QWORD *)&__src + 1) = v166;
                  }
                  else
                  {
                    HIBYTE(v789) = __len[1];
                    v168 = &__src;
                    if (!__len[1])
                      goto LABEL_295;
                  }
                  memmove(v168, v167, v166);
LABEL_295:
                  *((_BYTE *)v168 + v166) = 0;
                  v198 = *(_QWORD *)v797;
                  if (SHIBYTE(v789) < 0)
                  {
                    sub_22E3BB2B4(v775, (void *)__src, *((unint64_t *)&__src + 1));
                  }
                  else
                  {
                    *(_OWORD *)v775 = __src;
                    *(_QWORD *)&v775[16] = v789;
                  }
                  a2 = v755;
                  v775[24] = v198 != 0;
                  sub_22E780FD4(v22 + 1976, (__n128 *)v775);
                  if ((v775[23] & 0x80000000) != 0)
                    operator delete(*(void **)v775);
                  if (SHIBYTE(v789) < 0)
                    goto LABEL_200;
                  goto LABEL_202;
                case 11:
                  v72 = (const void *)__len[0];
                  if (!__len[0])
                  {
                    __src = 0uLL;
                    v789 = 0;
                    goto LABEL_177;
                  }
                  v73 = __len[1];
                  if (__len[1] > 0x7FFFFFFFFFFFFFF7)
                    goto LABEL_988;
                  if (__len[1] >= 0x17)
                  {
                    v113 = (__len[1] & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((__len[1] | 7) != 0x17)
                      v113 = __len[1] | 7;
                    v114 = a1;
                    v115 = v113 + 1;
                    v74 = (__int128 *)operator new(v113 + 1);
                    v116 = v115 | 0x8000000000000000;
                    a1 = v114;
                    v789 = v116;
                    *(_QWORD *)&__src = v74;
                    *((_QWORD *)&__src + 1) = v73;
                  }
                  else
                  {
                    HIBYTE(v789) = __len[1];
                    v74 = &__src;
                    if (!__len[1])
                      goto LABEL_176;
                  }
                  memmove(v74, v72, v73);
LABEL_176:
                  *((_BYTE *)v74 + v73) = 0;
                  a2 = v755;
LABEL_177:
                  v117 = *(_QWORD *)(v22 + 2072);
                  v118 = *(_QWORD *)(v22 + 2080);
                  if (v117 >= v118)
                  {
                    v119 = *(_QWORD *)(v22 + 2064);
                    v120 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v117 - v119) >> 3);
                    v121 = v120 + 1;
                    if (v120 + 1 > 0xAAAAAAAAAAAAAAALL)
                      goto LABEL_988;
                    v122 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v118 - v119) >> 3);
                    if (2 * v122 > v121)
                      v121 = 2 * v122;
                    if (v122 >= 0x555555555555555)
                      v123 = 0xAAAAAAAAAAAAAAALL;
                    else
                      v123 = v121;
                    *(_QWORD *)&v776 = v22 + 2080;
                    if (v123)
                    {
                      if (v123 > 0xAAAAAAAAAAAAAAALL)
                        goto LABEL_989;
                      v124 = (char *)operator new(24 * v123);
                    }
                    else
                    {
                      v124 = 0;
                    }
                    v125 = &v124[24 * v120];
                    *((_QWORD *)v125 + 2) = v789;
                    *(_OWORD *)v125 = __src;
                    v789 = 0;
                    __src = 0uLL;
                    v126 = *(_QWORD *)(v22 + 2072);
                    v127 = *(_QWORD *)(v22 + 2064);
                    if (v126 == v127)
                    {
                      v130 = v23;
                      v132 = 0;
                      v131 = vdupq_n_s64(v126);
                      v128 = v125;
                    }
                    else
                    {
                      v128 = &v124[24 * v120];
                      do
                      {
                        v129 = *(_OWORD *)(v126 - 24);
                        *((_QWORD *)v128 - 1) = *(_QWORD *)(v126 - 8);
                        *(_OWORD *)(v128 - 24) = v129;
                        v128 -= 24;
                        *(_QWORD *)(v126 - 16) = 0;
                        *(_QWORD *)(v126 - 8) = 0;
                        *(_QWORD *)(v126 - 24) = 0;
                        v126 -= 24;
                      }
                      while (v126 != v127);
                      v130 = v23;
                      v131 = *(int64x2_t *)(v22 + 2064);
                      v132 = HIBYTE(v789);
                    }
                    v137 = v125 + 24;
                    *(_QWORD *)(v22 + 2064) = v128;
                    *(_QWORD *)(v22 + 2072) = v125 + 24;
                    *(int64x2_t *)&v775[8] = v131;
                    v138 = *(_QWORD *)(v22 + 2080);
                    *(_QWORD *)(v22 + 2080) = &v124[24 * v123];
                    *(_QWORD *)&v775[24] = v138;
                    *(_QWORD *)v775 = v131.i64[0];
                    sub_22E3B8B94((uint64_t)v775);
                    *(_QWORD *)(v22 + 2072) = v137;
                    v23 = v130;
                    if (v132 < 0)
                    {
LABEL_200:
                      v112 = (void **)__src;
LABEL_201:
                      operator delete(v112);
                    }
                  }
                  else
                  {
                    *(_OWORD *)v117 = __src;
                    *(_QWORD *)(v117 + 16) = v789;
                    *(_QWORD *)(v22 + 2072) = v117 + 24;
                  }
                  goto LABEL_202;
                case 12:
                  v776 = 0uLL;
                  *(_QWORD *)v775 = v3;
                  *(_QWORD *)&v775[8] = v22;
                  *(_DWORD *)&v775[20] = *(_QWORD *)v797;
                  *(_DWORD *)&v775[16] = 2;
                  v775[24] &= ~1u;
                  v776 = *(_OWORD *)__len;
                  v37 = (_OWORD *)sub_22E4D6FB0(v733, (unint64_t)v775);
                  v24 = 0;
                  v25 = 0;
                  v38 = (_OWORD *)(*(_QWORD *)(a2 + 4336) + 48 * *(unsigned int *)(a2 + 4344));
                  v40 = v37[1];
                  v39 = v37[2];
                  *v38 = *v37;
                  v38[1] = v40;
                  v38[2] = v39;
                  ++*(_DWORD *)(a2 + 4344);
                  break;
                case 16:
                  v49 = *(_QWORD *)(a2 + 128);
                  if (v49)
                  {
                    *(_QWORD *)v775 = &v775[16];
                    *(_QWORD *)&v775[8] = 0x1000000000;
                    v50 = DWORD2(v797);
                    if (DWORD2(v797))
                    {
                      v204 = v23;
                      v205 = (unsigned int *)v797;
                      v206 = 8 * DWORD2(v797);
                      do
                      {
                        v207 = sub_22E768FE0(a2, v3, *v205);
                        v208 = *(unsigned int *)&v775[8];
                        if (*(unsigned int *)&v775[8] >= (unint64_t)*(unsigned int *)&v775[12])
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                          v208 = *(unsigned int *)&v775[8];
                        }
                        *(_DWORD *)(*(_QWORD *)v775 + 4 * v208) = v207;
                        v50 = ++*(_DWORD *)&v775[8];
                        v205 += 2;
                        v206 -= 8;
                      }
                      while (v206);
                      v49 = *(_QWORD *)(a2 + 128);
                      v51 = *(char **)v775;
                      v23 = v204;
                    }
                    else
                    {
                      v51 = &v775[16];
                    }
                    sub_22F367F28(v49, v22, v51, v50);
                    if (*(_BYTE **)v775 != &v775[16])
                      free(*(void **)v775);
                  }
                  goto LABEL_202;
                case 17:
                  v165 = (const void *)__len[0];
                  if (!__len[0])
                  {
                    memset(v775, 0, 24);
                    goto LABEL_321;
                  }
                  v192 = __len[1];
                  if (__len[1] > 0x7FFFFFFFFFFFFFF7)
                    goto LABEL_988;
                  if (__len[1] >= 0x17)
                  {
                    v209 = (__len[1] & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((__len[1] | 7) != 0x17)
                      v209 = __len[1] | 7;
                    v210 = a1;
                    v211 = v209 + 1;
                    v193 = operator new(v209 + 1);
                    v212 = v211 | 0x8000000000000000;
                    a1 = v210;
                    *(_QWORD *)&v775[16] = v212;
                    *(_QWORD *)v775 = v193;
                    *(_QWORD *)&v775[8] = v192;
                  }
                  else
                  {
                    v775[23] = __len[1];
                    v193 = v775;
                    if (!__len[1])
                      goto LABEL_320;
                  }
                  memmove(v193, v165, v192);
LABEL_320:
                  v193[v192] = 0;
                  a2 = v755;
LABEL_321:
                  v213 = (void **)(v22 + 152);
                  if (*(char *)(v22 + 175) < 0)
                    operator delete(*v213);
                  *(_OWORD *)v213 = *(_OWORD *)v775;
                  *(_QWORD *)(v22 + 168) = *(_QWORD *)&v775[16];
                  sub_22F412324(v23, (const void **)v22);
LABEL_202:
                  v24 = 0;
                  v25 = 0;
                  break;
                case 18:
                  if (!DWORD2(v797))
                    goto LABEL_202;
                  v765 = (uint64_t)v23;
                  v41 = 0;
                  do
                  {
                    v776 = 0uLL;
                    *(_QWORD *)v775 = v3;
                    *(_QWORD *)&v775[8] = v22;
                    *(_DWORD *)&v775[20] = *(_QWORD *)(v797 + 8 * v41);
                    *(_DWORD *)&v775[16] = 3;
                    v775[24] &= ~1u;
                    v42 = (_OWORD *)sub_22E4D6FB0(v733, (unint64_t)v775);
                    v43 = (_OWORD *)(*(_QWORD *)(a2 + 4336) + 48 * *(unsigned int *)(a2 + 4344));
                    v45 = v42[1];
                    v44 = v42[2];
                    *v43 = *v42;
                    v43[1] = v45;
                    v43[2] = v44;
                    ++*(_DWORD *)(a2 + 4344);
                    ++v41;
                  }
                  while (v41 != DWORD2(v797));
                  v24 = 0;
                  v25 = 0;
                  goto LABEL_108;
                default:
                  v25 = 0;
                  break;
              }
            }
            else
            {
              v22 = 0;
              v24 = 0;
              v25 = 2;
            }
LABEL_62:
            if ((v796 & 1) != 0)
            {
              v28 = v795;
              v795 = 0;
              if (v28)
                (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
            }
            if ((v25 | 2) != 2)
              goto LABEL_353;
            break;
        }
      }
LABEL_982:
      v16 = *(_QWORD *)v775;
LABEL_983:
      *a1 = v16;
LABEL_353:
      if ((__int128 *)v797 != &v798)
        free((void *)v797);
LABEL_377:
      if (!*a1)
      {
LABEL_378:
        LODWORD(v9) = 2;
        goto LABEL_10;
      }
LABEL_9:
      LODWORD(v9) = 1;
LABEL_10:
      if ((v784 & 1) != 0)
      {
        v10 = v783;
        v783 = 0;
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      }
      if ((v9 | 2) != 2)
      {
        if (v785 != v787)
          free(v785);
        return;
      }
    }
  }
}

uint64_t sub_22E779D90(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  _QWORD *v10;

  v2 = result;
  v3 = *(unsigned int *)(result + 8);
  if (!(_DWORD)v3)
  {
    v7 = a2[1];
LABEL_9:
    v9 = *a2;
    if (v3 >= *(_DWORD *)(result + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      LODWORD(v3) = *(_DWORD *)(v2 + 8);
    }
    v10 = (_QWORD *)(*(_QWORD *)v2 + 16 * v3);
    *v10 = v9;
    v10[1] = v7;
    ++*(_DWORD *)(v2 + 8);
    return result;
  }
  v4 = *(_QWORD *)result + 16 * v3;
  v5 = *(_DWORD *)(v4 - 16);
  v6 = *(_QWORD *)(v4 - 8);
  v7 = a2[1];
  if (v5 != *(_DWORD *)a2 || v6 != v7)
    goto LABEL_9;
  return result;
}

uint64_t sub_22E779E2C(uint64_t result, unsigned int *a2)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  int v19;
  int v20;

  v2 = result;
  v3 = *(char **)result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(char **)result;
  if ((_DWORD)v4)
  {
    v5 = *(char **)result;
    v7 = *(unsigned int *)(result + 8);
    do
    {
      v8 = v7 >> 1;
      v9 = &v5[8 * (v7 >> 1)];
      v11 = *(_DWORD *)v9;
      v10 = v9 + 8;
      v7 += ~(v7 >> 1);
      if (v11 < *a2)
        v5 = v10;
      else
        v7 = v8;
    }
    while (v7);
  }
  if (v5 == &v3[8 * v4])
  {
    v6 = *(_QWORD *)a2;
    if (v4 >= *(_DWORD *)(result + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v3 = *(char **)v2;
      v4 = *(unsigned int *)(v2 + 8);
    }
    *(_QWORD *)&v3[8 * v4] = v6;
    ++*(_DWORD *)(v2 + 8);
  }
  else if (*(_DWORD *)v5 == *a2)
  {
    *((_DWORD *)v5 + 1) = a2[1];
  }
  else
  {
    v12 = *a2;
    v13 = a2[1];
    v14 = (v5 - v3) >> 3;
    if (v4 >= *(_DWORD *)(result + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v3 = *(char **)v2;
      v4 = *(unsigned int *)(v2 + 8);
    }
    v15 = &v3[8 * v14];
    *(_QWORD *)&v3[8 * v4] = *(_QWORD *)&v3[8 * v4 - 8];
    v16 = *(unsigned int *)(v2 + 8);
    v17 = (char *)(*(_QWORD *)v2 + 8 * v16 - 8);
    if (v17 != v15)
    {
      v18 = *(_QWORD *)v2 + 8 * v16 - 8;
      do
      {
        v19 = *(_DWORD *)(v18 - 8);
        v18 -= 8;
        v20 = *((_DWORD *)v17 - 1);
        *(_DWORD *)v17 = v19;
        *((_DWORD *)v17 + 1) = v20;
        v17 = (char *)v18;
      }
      while ((char *)v18 != v15);
    }
    *(_DWORD *)(v2 + 8) = v16 + 1;
    *(_DWORD *)v15 = v12;
    *((_DWORD *)v15 + 1) = v13;
  }
  return result;
}

uint64_t sub_22E779F8C(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4;

  v4 = *a4;
  if (*(_DWORD *)(a3 + 8) <= v4)
  {
    sub_22E769C10(a1, "Corrupted AST file", 0x12uLL);
    return 0;
  }
  else
  {
    *a4 = v4 + 1;
    return sub_22E768FE0(a1, a2, *(_QWORD *)(*(_QWORD *)a3 + 8 * v4));
  }
}

uint64_t sub_22E779FD8(uint64_t a1, unsigned int a2)
{
  unint64_t v4;
  uint64_t v5;

  if (a2 > 0x11)
  {
    v4 = a2 - 18;
    v5 = *(_QWORD *)(a1 + 2784);
    if (v4 < (*(_QWORD *)(a1 + 2792) - v5) >> 3)
      return *(_QWORD *)(v5 + 8 * v4);
    sub_22E769C10(a1, "declaration ID out-of-range for AST file", 0x28uLL);
  }
  else if (a2)
  {
    __asm { BR              X10 }
  }
  return 0;
}

uint64_t sub_22E77A180(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  _DWORD *v4;
  uint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  unint64_t v8;
  unsigned int *v9;
  _DWORD *v10;
  unsigned int v11;
  _DWORD *v12;
  _DWORD *v13;
  int v15;
  uint64_t v16;

  if (a3 >= 0x960)
  {
    if (*(_QWORD *)(a2 + 784))
    {
      v16 = a2;
      v15 = a3;
      sub_22E76BB68(a1, a2);
      a2 = v16;
      LODWORD(a3) = v15;
    }
    v3 = a3 >> 3;
    v4 = *(_DWORD **)(a2 + 3232);
    v5 = *(unsigned int *)(a2 + 3240);
    if ((_DWORD)v5)
    {
      v6 = *(unsigned int *)(a2 + 3240);
      v7 = *(_DWORD **)(a2 + 3232);
      do
      {
        v8 = v6 >> 1;
        v9 = &v7[2 * (v6 >> 1)];
        v11 = *v9;
        v10 = v9 + 2;
        v6 += ~(v6 >> 1);
        if (v11 > v3 - 300)
          v6 = v8;
        else
          v7 = v10;
      }
      while (v6);
    }
    else
    {
      v7 = *(_DWORD **)(a2 + 3232);
    }
    v12 = &v4[2 * v5];
    if (v7 == v4)
      v13 = v12;
    else
      v13 = v7 - 2;
    return a3 & 7 | (8 * (v13[1] + v3));
  }
  return a3;
}

uint64_t sub_22E77A230(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;

  if (result != a2)
  {
    v3 = result;
    v4 = *(_QWORD *)result;
    if (*(_QWORD *)result == result + 16 || *(_QWORD *)a2 == a2 + 16)
    {
      if (*(_DWORD *)(result + 12) < *(_DWORD *)(a2 + 8))
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v7 = *(_DWORD *)(v3 + 8);
      if (*(_DWORD *)(a2 + 12) < v7)
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v7 = *(_DWORD *)(v3 + 8);
      }
      v8 = *(unsigned int *)(a2 + 8);
      if (v7 >= v8)
        v9 = v8;
      else
        v9 = v7;
      if ((_DWORD)v9)
      {
        v10 = *(uint64_t **)v3;
        v11 = *(uint64_t **)a2;
        v12 = v9;
        do
        {
          v13 = *v10;
          *v10++ = *v11;
          *v11++ = v13;
          --v12;
        }
        while (v12);
      }
      if (v8 >= v7)
      {
        if (v8 > v7)
        {
          v15 = v8 - v7;
          result = (uint64_t)memcpy((void *)(*(_QWORD *)v3 + 8 * v7), (const void *)(*(_QWORD *)a2 + 8 * v9), *(_QWORD *)a2 + 8 * v8 - (*(_QWORD *)a2 + 8 * v9));
          *(_DWORD *)(v3 + 8) += v15;
          *(_DWORD *)(a2 + 8) = v9;
        }
      }
      else
      {
        v14 = v7 - v8;
        result = (uint64_t)memcpy((void *)(*(_QWORD *)a2 + 8 * v8), (const void *)(*(_QWORD *)v3 + 8 * v9), *(_QWORD *)v3 + 8 * v7 - (*(_QWORD *)v3 + 8 * v9));
        *(_DWORD *)(a2 + 8) += v14;
        *(_DWORD *)(v3 + 8) = v9;
      }
    }
    else
    {
      *(_QWORD *)result = *(_QWORD *)a2;
      *(_QWORD *)a2 = v4;
      v5 = *(_DWORD *)(result + 8);
      *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = v5;
      v6 = *(_DWORD *)(result + 12);
      *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
      *(_DWORD *)(a2 + 12) = v6;
    }
  }
  return result;
}

uint64_t sub_22E77A398(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(unsigned int *)(result + 8);
  if (!(_DWORD)v2
    || ((v3 = *(_QWORD *)result + 8 * v2, v5 = *(_DWORD *)(v3 - 8), v4 = *(_DWORD *)(v3 - 4), v5 == *(_DWORD *)a2)
      ? (v6 = v4 == *((_DWORD *)a2 + 1))
      : (v6 = 0),
        !v6))
  {
    v7 = *a2;
    if (v2 >= *(_DWORD *)(result + 12))
    {
      v8 = *a2;
      v9 = result;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v7 = v8;
      result = v9;
      LODWORD(v2) = *(_DWORD *)(v9 + 8);
    }
    *(_QWORD *)(*(_QWORD *)result + 8 * v2) = v7;
    ++*(_DWORD *)(result + 8);
  }
  return result;
}

void sub_22E77A418(int32x2_t *a1, uint64_t a2, int a3)
{
  unsigned int v5;
  uint64_t v6;
  unsigned __int32 v7;
  const void **v8;
  uint64_t v9;
  const void *v10;
  char v11;
  uint64_t v12;
  int32x2_t v13;
  unsigned int v14;
  uint64_t v15;
  void *v16;
  void *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int32x2_t v21;
  char v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  void *v29;
  char *v30;
  _BYTE *v31;
  _BYTE *v32;
  uint64_t v33;
  int v34;
  _BYTE v35[32];
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  _BYTE v41[120];
  _QWORD *v42;
  unsigned int v43;
  unsigned int v44;
  _QWORD v45[6];

  v45[4] = *MEMORY[0x24BDAC8D0];
  v31 = v35;
  v32 = v35;
  v33 = 4;
  v34 = 0;
  v42 = v45;
  v44 = 4;
  v45[0] = a2;
  v5 = 1;
  do
  {
    v6 = v42[--v5];
    v43 = v5;
    if (*(_DWORD *)(v6 + 1348) < a3 && (*(_WORD *)(v6 + 1344) & 1) == 0)
    {
      *(_DWORD *)(v6 + 1348) = a3;
      v7 = a1[541].u32[0];
      if (v7)
      {
        v13 = a1[539];
        v14 = (v7 - 1) & ((v6 >> 4) ^ (v6 >> 9));
        v15 = *(_QWORD *)&v13 + 40 * v14;
        v16 = *(void **)v15;
        v29 = (void *)v6;
        if (*(_QWORD *)v15 == v6)
        {
LABEL_19:
          v6 = (uint64_t)v29;
          if (v15 != *(_QWORD *)&v13 + 40 * v7)
          {
            v38 = v29;
            v39 = v41;
            v40 = 0x200000000;
            if (*(_DWORD *)(v15 + 16))
              sub_22F24C77C((uint64_t)&v39, v15 + 8);
            v17 = *(void **)(v15 + 8);
            if (v17 != (void *)(v15 + 24))
              free(v17);
            *(_QWORD *)v15 = -8192;
            a1[540] = vadd_s32(a1[540], (int32x2_t)0x1FFFFFFFFLL);
            v18 = (char *)v39;
            if ((_DWORD)v40)
            {
              v30 = (char *)v39 + 8 * v40;
              do
              {
                v19 = *(_QWORD *)v18;
                v20 = *(_QWORD *)(*(_QWORD *)v18 + 8);
                if ((v20 & 4) != 0)
                {
                  *(_QWORD *)(v19 + 8) = v20 & 0xFFFFFFFFFFFFFFF9 | 2;
                  v21 = a1[14];
                  if (v21)
                  {
                    if ((*(_DWORD *)(v19 + 28) & 0x7F) == 0x18)
                    {
                      v36 = *(_QWORD *)(v19 + 40);
                      v37 = 0;
                      if (sub_22F2BB328((uint64_t *)(*(_QWORD *)&v21 + 8560), &v36, &v37)
                        && v37 != *(_QWORD *)(*(_QWORD *)&v21 + 8560)
                                + 40 * *(unsigned int *)(*(_QWORD *)&v21 + 8576))
                      {
                        v23 = 0;
                        v24 = (_QWORD *)(v37 + 24);
                        if ((*(_BYTE *)(v19 + 58) & 2) != 0)
                          v24 = (_QWORD *)(v37 + 8);
                        do
                        {
                          if ((v23 & 1) != 0 || v19 == (*v24 & 0xFFFFFFFFFFFFFFF8))
                          {
                            v25 = v24[1];
                            if ((v25 & 0xFFFFFFFFFFFFFFF8) != 0)
                              v26 = *(_QWORD *)(v25 & 0xFFFFFFFFFFFFFFF8) & 0xFFFFFFFFFFFFFFF8 | *v24 & 7;
                            else
                              v26 = *v24 & 7 | v19;
                            *v24 = v26;
                            v23 = 1;
                          }
                          else
                          {
                            v23 = 0;
                            v25 = v24[1];
                          }
                          v24 = (_QWORD *)(v25 & 0xFFFFFFFFFFFFFFF8);
                        }
                        while ((v25 & 0xFFFFFFFFFFFFFFF8) != 0);
                      }
                    }
                  }
                }
                v18 += 8;
              }
              while (v18 != v30);
              v18 = (char *)v39;
            }
            if (v18 != v41)
              free(v18);
            v6 = (uint64_t)v29;
          }
        }
        else
        {
          v27 = 1;
          while (1)
          {
            v6 = (uint64_t)v29;
            if (v16 == (void *)-4096)
              break;
            v28 = v14 + v27++;
            v14 = v28 & (v7 - 1);
            v15 = *(_QWORD *)&v13 + 40 * v14;
            v16 = *(void **)v15;
            if (*(void **)v15 == v29)
              goto LABEL_19;
          }
        }
      }
      v38 = &v40;
      v39 = (void *)0x1000000000;
      sub_22F1D93A0(v6, (uint64_t)&v38);
      v8 = (const void **)v38;
      if ((_DWORD)v39)
      {
        v9 = 8 * v39;
        do
        {
          v10 = *v8;
          sub_22E3BA850((uint64_t)&v31, *v8);
          if (v11)
          {
            v12 = v43;
            if (v43 >= (unint64_t)v44)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v12 = v43;
            }
            v42[v12] = v10;
            ++v43;
          }
          ++v8;
          v9 -= 8;
        }
        while (v9);
        v8 = (const void **)v38;
      }
      if (v8 != (const void **)&v40)
        free(v8);
      v5 = v43;
    }
  }
  while (v5);
  if (v42 != v45)
    free(v42);
  if (v32 != v31)
    free(v32);
}

BOOL sub_22E77A7D4(_BOOL8 result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a2;
  v3 = *(_QWORD *)(a2 + 8);
  if ((v3 & 4) != 0)
  {
    v5 = *(_QWORD *)(a3 + 8);
    if ((v5 & 4) != 0)
    {
      v6 = result;
      v7 = *(_QWORD *)(result + 128);
      if ((v5 & 6) == 0 || (*(_DWORD *)(a3 + 28) & 0x8000) == 0)
        v9 = 0;
      else
        v9 = sub_22EFC7594(a3);
      sub_22F367D88(v7, a2, v9, 0);
      return sub_22E77A874((_QWORD *)(v6 + 3920), &v10);
    }
    else
    {
      *(_QWORD *)(a2 + 8) = v3 & 0xFFFFFFFFFFFFFFF9 | 2;
    }
  }
  return result;
}

BOOL sub_22E77A874(_QWORD *a1, _QWORD *a2)
{
  int v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;
  unsigned __int8 v18;

  sub_22F275184((uint64_t)a1, a2, (uint64_t)&v17);
  v4 = v18;
  if (v18)
  {
    v6 = (_QWORD *)a1[4];
    v5 = a1[5];
    if ((unint64_t)v6 >= v5)
    {
      v8 = (_QWORD *)a1[3];
      v9 = v6 - v8;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 61)
        abort();
      v11 = v5 - (_QWORD)v8;
      if (v11 >> 2 > v10)
        v10 = v11 >> 2;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12)
      {
        if (v12 >> 61)
          sub_22E3B3F8C();
        v13 = (char *)operator new(8 * v12);
      }
      else
      {
        v13 = 0;
      }
      v14 = &v13[8 * v9];
      *(_QWORD *)v14 = *a2;
      v7 = v14 + 8;
      if (v6 != v8)
      {
        do
        {
          v15 = *--v6;
          *((_QWORD *)v14 - 1) = v15;
          v14 -= 8;
        }
        while (v6 != v8);
        v6 = (_QWORD *)a1[3];
      }
      a1[3] = v14;
      a1[4] = v7;
      a1[5] = &v13[8 * v12];
      if (v6)
        operator delete(v6);
    }
    else
    {
      *v6 = *a2;
      v7 = v6 + 1;
    }
    a1[4] = v7;
  }
  return v4 != 0;
}

uint64_t sub_22E77A990(uint64_t a1, _BYTE *a2, size_t a3, unsigned int a4, int a5, unsigned int a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned int v31;
  BOOL v32;
  int v33;
  BOOL v34;
  llvm::BitstreamCursor *v35;
  int v36;
  uint64_t *v37;
  uint64_t v38;
  const char *v39;
  int v40;
  char v41;
  const char *v42;
  uint64_t *v43;
  int Key;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  BOOL v71;
  _QWORD *v72;
  void *v73;
  uint64_t v74;
  void *v75;
  char v76;
  int v77;
  void *v78;
  size_t v79;
  size_t v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  int v89;
  unsigned int *v90;
  unsigned int *v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *i;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  BOOL v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t *v113;
  uint64_t v114;
  unint64_t *v115;
  unint64_t *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  unint64_t v129;
  const void *v130;
  size_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t *v136;
  _QWORD *v137;
  _BYTE *v138;
  __int128 v139;
  unint64_t v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  int v152;
  size_t v153;
  size_t v154;
  void **v155;
  char *v156;
  char *v157;
  char *v158;
  char *v159;
  _QWORD *v160;
  const std::error_category *v161;
  int v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  int v169;
  uint64_t v170;
  uint64_t *v171;
  _QWORD *v172;
  _QWORD *v174;
  uint64_t *v175;
  uint64_t v176;
  void *__dst[2];
  int64_t v178;
  void *__p;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  unint64_t v183;
  _QWORD v184[2];
  int v185;
  void *v186;
  uint64_t v187;
  _BYTE v188[96];
  uint64_t *v189;
  char v190;
  uint64_t *v191;
  const std::error_category *v192;
  _BYTE v193[24];
  int64_t v194;
  _QWORD *v195;
  int v196;
  const std::error_category *v197;
  uint64_t v198;
  std::error_code v199;
  std::error_code v200;

  v198 = *MEMORY[0x24BDAC8D0];
  v14 = a1 + 24;
  v13 = *(_QWORD *)(a1 + 24);
  v15 = *(_DWORD *)(a1 + 496);
  *(_DWORD *)(a1 + 496) = a5;
  v16 = (_QWORD *)(a1 + 500);
  v17 = *(_QWORD *)(a1 + 500);
  *(_QWORD *)(a1 + 500) = a4 | 0x100000000;
  (*(void (**)(uint64_t))(v13 + 160))(a1 + 24);
  v18 = *(_QWORD *)(v14 + 104);
  v172 = v16;
  v170 = a7;
  if (v18)
    v169 = sub_22F063070(v14, v18);
  else
    v169 = 0;
  v19 = *(unsigned int *)(a1 + 152);
  v186 = v188;
  v187 = 0x400000000;
  v184[0] = 0;
  v184[1] = 0;
  v185 = 0;
  v20 = sub_22E771844(a1, a2, a3, a4, a5, 0, (uint64_t)&v186, 0, 0, (uint64_t)v184, a6);
  if ((_DWORD)v20)
  {
    v22 = v20;
    sub_22E809978(a1 + 144, (const void **)(*(_QWORD *)(a1 + 144) + 8 * v19), v21);
    v23 = *(uint64_t **)(a1 + 512);
    *(_QWORD *)(a1 + 512) = 0;
    if (v23)
    {
      v24 = sub_22E804B4C(v23);
      MEMORY[0x2348A0E9C](v24, 0x10A0C40954E1ADDLL);
    }
    *(_QWORD *)(a1 + 416) = 0;
    *(_DWORD *)(a1 + 376) = 0;
    v25 = v15;
    v26 = v17;
    v27 = v16;
    goto LABEL_247;
  }
  v163 = a5;
  v164 = a1 + 144;
  v25 = v15;
  v168 = v15;
  v166 = v17;
  v167 = v14;
  if ((_DWORD)v187)
  {
    v28 = (uint64_t *)v186;
    v165 = (char *)v186 + 24 * v187;
    v29 = (_QWORD *)(a1 + 456);
    while (1)
    {
      v30 = *v28;
      sub_22E774D40((uint64_t *)v193, a1, *v28);
      if (*(_QWORD *)v193)
      {
        sub_22E769A6C((uint64_t *)a1, (uint64_t **)v193);
        v26 = v166;
        v14 = v167;
        v27 = v16;
        if (*(_QWORD *)v193)
          (*(void (**)(_QWORD))(**(_QWORD **)v193 + 8))(*(_QWORD *)v193);
        v22 = 1;
        goto LABEL_247;
      }
      v31 = *(_DWORD *)(v30 + 4);
      v32 = v31 > 5;
      v33 = (1 << v31) & 0x23;
      v34 = v32 || v33 == 0;
      if (!v34 && !*(_BYTE *)(v30 + 210))
      {
        v75 = *(void **)(v30 + 8);
        v74 = v30 + 8;
        v73 = v75;
        v76 = *(_BYTE *)(v74 + 23);
        v77 = v76;
        if (v76 >= 0)
          v78 = (void *)v74;
        else
          v78 = v73;
        v79 = v76 & 0x7F;
        if (v77 >= 0)
          v80 = v79;
        else
          v80 = *(_QWORD *)(v74 + 8);
        sub_22E769FA4(a1, 918, v78, v80, 0, 0, 0, 0);
        goto LABEL_95;
      }
      v171 = v28;
      v174 = (_QWORD *)v30;
      v35 = (llvm::BitstreamCursor *)(v30 + 392);
      if (!sub_22E77B8A4((llvm::BitstreamCursor *)(v30 + 392), 18))
        break;
LABEL_83:
      v65 = *(_QWORD *)(a1 + 7448);
      v66 = v174;
      v174[45] = v65;
      *(_QWORD *)(a1 + 7448) = v174[44] + v65;
      v67 = *(unsigned int *)(a1 + 528);
      if (!(_DWORD)v67
        || ((v68 = *(_QWORD *)(a1 + 520) + 16 * v67, v70 = *(_QWORD *)(v68 - 16),
                                                     v69 = *(_QWORD **)(v68 - 8),
                                                     v70 == v65)
          ? (v71 = v69 == v174)
          : (v71 = 0),
            !v71))
      {
        if (v67 >= *(unsigned int *)(a1 + 532))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v66 = v174;
          v67 = *(unsigned int *)(a1 + 528);
        }
        v72 = (_QWORD *)(*(_QWORD *)(a1 + 520) + 16 * v67);
        *v72 = v65;
        v72[1] = v66;
        ++*(_DWORD *)(a1 + 528);
      }
      v28 = v171 + 3;
      if (v171 + 3 == (uint64_t *)v165)
      {
        if ((_DWORD)v187)
        {
          v81 = (uint64_t *)v186;
          v82 = (uint64_t *)((char *)v186 + 24 * v187);
          do
          {
            v83 = *v81;
            v84 = *(unsigned int *)(*v81 + 1600);
            if ((_DWORD)v84)
            {
              v85 = 0;
              v86 = 8 * v84;
              do
              {
                v87 = *(_QWORD *)(a1 + 80);
                v88 = ~*(_DWORD *)(*(_QWORD *)(v83 + 1592) + v85) - *(_DWORD *)(v83 + 1564);
                if (((*(_QWORD *)(*(_QWORD *)(v87 + 224) + 8 * (v88 >> 6)) >> v88) & 1) == 0)
                  sub_22F1E1134(v87, v88, 0);
                v85 += 8;
              }
              while (v86 != v85);
            }
            v89 = *(_DWORD *)(v83 + 176);
            if (v89)
              *(_DWORD *)(v83 + 176) = v89 + *(_DWORD *)(v83 + 1564) - 1;
            v90 = *(unsigned int **)(v83 + 1744);
            v91 = *(unsigned int **)(v83 + 1752);
            while (v90 != v91)
            {
              *(_QWORD *)v193 = *(_QWORD *)(v83 + 1728) + *v90;
              v92 = sub_22E78CDE0((uint64_t *)v193);
              sub_22E78CDE0((uint64_t *)v193);
              v93 = *(_QWORD *)v193;
              v94 = (uint64_t *)sub_22E4C9F04((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 120) + 544), *(_WORD **)v193, v92 - 1);
              *v94 |= 0x880000000uLL;
              sub_22E768ED8(a1, v94);
              v95 = sub_22E768E34(a1, v83, *(_DWORD *)(v93 + v92) >> 1);
              *(_QWORD *)(*(_QWORD *)(a1 + 3968) + 8 * (v95 - 1)) = v94;
              v96 = *(_QWORD *)(a1 + 64);
              if (v96)
                (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v96 + 24))(v96, v95, v94);
              ++v90;
            }
            v81 += 3;
          }
          while (v81 != v82);
          v25 = v168;
          if ((_DWORD)v187)
          {
            v97 = (char *)v186;
            v98 = (char *)v186 + 24 * v187;
            do
            {
              v99 = *(_QWORD *)v97;
              sub_22E809D9C(v164, *(_QWORD *)v97);
              *(_DWORD *)(v99 + 736) = v163;
              v100 = *((_QWORD *)v97 + 1);
              v101 = *((_DWORD *)v97 + 4);
              if (v100)
                v101 = sub_22E77BAB4(a1, v100, v101);
              *(_DWORD *)(v99 + 740) = v101;
              v97 += 24;
            }
            while (v97 != v98);
          }
        }
        goto LABEL_126;
      }
    }
LABEL_17:
    *(_QWORD *)v193 = &v193[16];
    *(_QWORD *)&v193[8] = 0x4000000000;
    while (1)
    {
      sub_22E748020((uint64_t)v35, 0, (uint64_t)&v191);
      if ((v192 & 1) != 0)
        break;
      if (!(_DWORD)v191)
      {
        *(_QWORD *)&v199.__val_ = std::generic_category();
        v199.__cat_ = (const std::error_category *)"malformed block record in AST file";
        llvm::createStringError((llvm *)0x5C, v199, v39);
        goto LABEL_26;
      }
      if ((_DWORD)v191 == 1)
      {
        v175 = 0;
        goto LABEL_26;
      }
      if ((_DWORD)v191 != 2)
      {
        *(_DWORD *)&v193[8] = 0;
        v182 = 0;
        v183 = 0;
        llvm::BitstreamCursor::readRecord();
        if ((v190 & 1) != 0)
        {
          v43 = v189;
          v189 = 0;
          v175 = v43;
          v36 = 1;
        }
        else
        {
          if ((_DWORD)v189 != 1)
            goto LABEL_73;
          __dst[0] = 0;
          __dst[1] = 0;
          v178 = 0;
          v180 = 0;
          v181 = 0;
          __p = 0;
          sub_22E77D7F4(*(int64x2_t **)v193, *(unsigned int *)&v193[8], v182, v183, (int32x2_t *)__dst);
          v41 = v40;
          if (v40)
          {
            *(_QWORD *)&v200.__val_ = std::generic_category();
            v200.__cat_ = (const std::error_category *)"malformed EXTENSION_METADATA in AST file";
            llvm::createStringError((llvm *)0x5C, v200, v42);
            v36 = 1;
          }
          else
          {
            Key = llvm::StringMapImpl::FindKey();
            if (Key == -1 || Key == (unint64_t)*(unsigned int *)(a1 + 464))
            {
              v36 = 5;
            }
            else
            {
              v45 = *(_QWORD *)(*(_QWORD *)(*v29 + 8 * Key) + 8);
              (*(void (**)(uint64_t *__return_ptr, uint64_t, void **, uint64_t, _QWORD *, llvm::BitstreamCursor *))(*(_QWORD *)v45 + 64))(&v176, v45, __dst, a1, v174, v35);
              v46 = v176;
              if (v176)
              {
                v47 = v174;
                v48 = (_QWORD *)v174[95];
                v49 = v174[96];
                if ((unint64_t)v48 >= v49)
                {
                  v51 = (_QWORD *)v174[94];
                  v52 = v48 - v51;
                  v53 = v52 + 1;
                  if ((unint64_t)(v52 + 1) >> 61)
LABEL_250:
                    abort();
                  v54 = v49 - (_QWORD)v51;
                  if (v54 >> 2 > v53)
                    v53 = v54 >> 2;
                  if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8)
                    v55 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v55 = v53;
                  if (v55)
                  {
                    if (v55 >> 61)
                      sub_22E3B3F8C();
                    v56 = (char *)operator new(8 * v55);
                  }
                  else
                  {
                    v56 = 0;
                  }
                  v57 = &v56[8 * v52];
                  v58 = &v56[8 * v55];
                  v176 = 0;
                  *(_QWORD *)v57 = v46;
                  v50 = v57 + 8;
                  if (v48 == v51)
                  {
                    v47 = v174;
                    v174[94] = v57;
                    v174[95] = v50;
                    v174[96] = v58;
                    v25 = v168;
                  }
                  else
                  {
                    v25 = v168;
                    v47 = v174;
                    do
                    {
                      v59 = *--v48;
                      *v48 = 0;
                      *((_QWORD *)v57 - 1) = v59;
                      v57 -= 8;
                    }
                    while (v48 != v51);
                    v48 = (_QWORD *)v174[94];
                    v60 = (_QWORD *)v174[95];
                    v174[94] = v57;
                    v174[95] = v50;
                    v174[96] = v58;
                    if (v60 != v48)
                    {
                      do
                      {
                        v62 = *--v60;
                        v61 = v62;
                        *v60 = 0;
                        if (v62)
                          (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
                      }
                      while (v60 != v48);
                      v47 = v174;
                    }
                  }
                  if (v48)
                  {
                    operator delete(v48);
                    v47 = v174;
                  }
                }
                else
                {
                  v176 = 0;
                  *v48 = v46;
                  v50 = v48 + 1;
                }
                v47[95] = v50;
                v63 = v176;
                v176 = 0;
                if (v63)
                  (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
              }
              v36 = 5;
              v29 = (_QWORD *)(a1 + 456);
            }
          }
          if (SHIBYTE(v181) < 0)
            operator delete(__p);
          if (SHIBYTE(v178) < 0)
          {
            operator delete(__dst[0]);
            if ((v41 & 1) == 0)
LABEL_73:
              v36 = 0;
          }
          else if ((v41 & 1) == 0)
          {
            goto LABEL_73;
          }
        }
        if ((v190 & 1) != 0)
        {
          v64 = v189;
          v189 = 0;
          if (v64)
            (*(void (**)(uint64_t *))(*v64 + 8))(v64);
        }
        goto LABEL_27;
      }
      sub_22E746760((uint64_t)v35, (uint64_t *)&v175);
      if (v175)
        v36 = 1;
      else
        v36 = 2;
LABEL_27:
      if ((v192 & 1) != 0)
      {
        v38 = (uint64_t)v191;
        v191 = 0;
        if (v38)
          (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
      }
      if ((v36 | 2) != 2)
      {
        if (*(_BYTE **)v193 != &v193[16])
          free(*(void **)v193);
        if (!v175)
        {
          if (sub_22E77B8A4(v35, 18))
            goto LABEL_83;
          goto LABEL_17;
        }
        sub_22E769A6C((uint64_t *)a1, &v175);
        if (v175)
          (*(void (**)(uint64_t *))(*v175 + 8))(v175);
LABEL_95:
        v22 = 1;
LABEL_246:
        v26 = v166;
        v14 = v167;
        v27 = v172;
        goto LABEL_247;
      }
    }
    v37 = v191;
    v191 = 0;
    v175 = v37;
LABEL_26:
    v36 = 1;
    goto LABEL_27;
  }
LABEL_126:
  v102 = *(_QWORD *)(a1 + 120);
  if ((*(_BYTE *)(*(_QWORD *)(v102 + 56) + 1) & 1) == 0 || a4 > 5 || ((1 << a4) & 0x23) == 0)
  {
    v103 = *(_QWORD *)(v102 + 544);
    v104 = *(unsigned int *)(v102 + 552);
    if ((_DWORD)v104)
    {
      for (i = *(uint64_t **)(v102 + 544); !*i || *i == -8; ++i)
        ;
    }
    else
    {
      i = *(uint64_t **)(v102 + 544);
    }
    v107 = (uint64_t *)(v103 + 8 * v104);
    if (i != v107)
    {
      v108 = *i;
      do
      {
        **(_QWORD **)(v108 + 8) |= 0x880000000uLL;
        do
        {
          v109 = i[1];
          ++i;
          v108 = v109;
          if (v109)
            v110 = v108 == -8;
          else
            v110 = 1;
        }
        while (v110);
      }
      while (i != v107);
    }
  }
  v111 = *(_QWORD *)(a1 + 4672);
  v112 = *(unsigned int *)(a1 + 4688);
  v113 = (unint64_t *)(v111 + 16 * v112);
  if (*(_DWORD *)(a1 + 4680))
  {
    if ((_DWORD)v112)
    {
      v114 = 16 * v112;
      v115 = *(unint64_t **)(a1 + 4672);
      while (*v115 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v115 += 2;
        v114 -= 16;
        if (!v114)
          goto LABEL_152;
      }
    }
    else
    {
      v115 = *(unint64_t **)(a1 + 4672);
    }
  }
  else
  {
LABEL_152:
    v115 = (unint64_t *)(v111 + 16 * v112);
  }
  v116 = (unint64_t *)(v111 + 16 * v112);
  while (v115 != v116)
  {
    *(_OWORD *)v193 = *(_OWORD *)v115;
    *((_BYTE *)sub_22F2BC268(a1 + 4696, v193) + 8) = 1;
    v117 = v115 + 2;
    while (v117 != v113)
    {
      v118 = *v117;
      v117 += 2;
      if (v118 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v115 = v117 - 2;
        goto LABEL_160;
      }
    }
    v115 = v113;
LABEL_160:
    ;
  }
  v119 = *(unsigned int *)(a1 + 4344);
  if ((_DWORD)v119)
  {
    v120 = 0;
    v121 = 48 * v119;
    while (2)
    {
      v122 = *(_QWORD *)(a1 + 4336);
      v123 = sub_22E76C40C(a1, *(_QWORD *)(v122 + v120), *(_DWORD *)(v122 + v120 + 20));
      v191 = 0;
      if (v123)
      {
        if (*(_DWORD *)(a1 + 4208) >= v123)
        {
          v124 = *(_QWORD *)(*(_QWORD *)(a1 + 4200) + 8 * (v123 - 1));
          goto LABEL_168;
        }
        sub_22E769C10(a1, "submodule ID out of range in AST file", 0x25uLL);
      }
      v124 = 0;
LABEL_168:
      v191 = (uint64_t *)v124;
      switch(*(_DWORD *)(v122 + v120 + 16))
      {
        case 0:
          if (!v124)
            goto LABEL_200;
          v125 = *(_QWORD *)(v122 + v120 + 8) + 1360;
          goto LABEL_184;
        case 1:
          v126 = v122 + v120;
          v127 = *(_BYTE *)(v122 + v120 + 24);
          if (v124 || (v127 & 1) != 0)
          {
            v128 = *(_QWORD *)(v126 + 8);
            v129 = *(unsigned int *)(v128 + 1480);
            if (v129 >= *(unsigned int *)(v128 + 1484))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v129 = *(unsigned int *)(v128 + 1480);
            }
            *(_QWORD *)(*(_QWORD *)(v128 + 1472) + 8 * v129) = v124 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v127 & 1));
            ++*(_DWORD *)(v128 + 1480);
          }
          goto LABEL_200;
        case 2:
          if (!v124)
            goto LABEL_200;
          *(_QWORD *)&v193[8] = 0;
          *(_QWORD *)&v193[16] = 0;
          v194 = 0;
          *(_QWORD *)v193 = v124;
          v130 = *(const void **)(v122 + v120 + 32);
          if (!v130)
          {
            __dst[0] = 0;
            __dst[1] = 0;
            v178 = 0;
            goto LABEL_192;
          }
          v131 = *(_QWORD *)(v122 + v120 + 40);
          if (v131 >= 0x7FFFFFFFFFFFFFF8)
            goto LABEL_250;
          if (v131 >= 0x17)
          {
            v133 = (v131 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v131 | 7) != 0x17)
              v133 = v131 | 7;
            v134 = v133 + 1;
            v132 = operator new(v133 + 1);
            v135 = v134 | 0x8000000000000000;
            v25 = v168;
            __dst[1] = (void *)v131;
            v178 = v135;
            __dst[0] = v132;
          }
          else
          {
            HIBYTE(v178) = *(_QWORD *)(v122 + v120 + 40);
            v132 = __dst;
            if (!v131)
              goto LABEL_190;
          }
          memmove(v132, v130, v131);
LABEL_190:
          *((_BYTE *)v132 + v131) = 0;
          if (SHIBYTE(v194) < 0)
            operator delete(*(void **)&v193[8]);
LABEL_192:
          *(_OWORD *)&v193[8] = *(_OWORD *)__dst;
          v194 = v178;
          v136 = *(unint64_t **)(v122 + v120 + 8);
          v137 = (_QWORD *)v136[265];
          if ((unint64_t)v137 >= v136[266])
          {
            v140 = sub_22E7910D0(v136 + 264, (uint64_t)v193);
          }
          else
          {
            *v137 = *(_QWORD *)v193;
            v138 = v137 + 1;
            if (SHIBYTE(v194) < 0)
            {
              sub_22E3BB2B4(v138, *(void **)&v193[8], *(unint64_t *)&v193[16]);
            }
            else
            {
              v139 = *(_OWORD *)&v193[8];
              v137[3] = v194;
              *(_OWORD *)v138 = v139;
            }
            v140 = (unint64_t)(v137 + 4);
          }
          v136[265] = v140;
          if (SHIBYTE(v194) < 0)
            operator delete(*(void **)&v193[8]);
LABEL_200:
          v120 += 48;
          if (v121 == v120)
            break;
          continue;
        case 3:
          if (!v124)
            goto LABEL_200;
          v125 = *(_QWORD *)(v122 + v120 + 8) + 1416;
LABEL_184:
          sub_22E6D6C48(v125, (uint64_t *)&v191);
          goto LABEL_200;
        default:
          goto LABEL_200;
      }
      break;
    }
  }
  *(_DWORD *)(a1 + 4344) = 0;
  if (v170)
    sub_22F2633B0(v170, *(_BYTE **)(a1 + 7264), (_BYTE *)(*(_QWORD *)(a1 + 7264) + 8 * *(unsigned int *)(a1 + 7272)));
  v26 = v166;
  v14 = v167;
  v27 = v172;
  if (*(_QWORD *)(a1 + 128))
    sub_22F2B0EBC(a1);
  if (*(_QWORD *)(a1 + 112))
    sub_22E77BB44(a1);
  v141 = *(_QWORD *)(a1 + 64);
  if (v141)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v141 + 16))(v141, a1);
  v142 = *(_DWORD *)(**(_QWORD **)v164 + 176);
  if (v142)
  {
    if (a4 == 4)
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 80) + 344) = v142;
    }
    else if (a4 == 3)
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 80) + 348) = v142;
    }
  }
  if (*(_QWORD *)(a1 + 128))
  {
    v143 = *(unsigned int *)(a1 + 10608);
    if ((_DWORD)v143)
    {
      v144 = 0;
      v145 = 8 * v143;
      do
      {
        v146 = *(_QWORD *)(*(_QWORD *)(a1 + 10600) + v144);
        if ((*(_BYTE *)(v146 + 29) & 0x80) != 0)
          v147 = *(_DWORD *)(v146 - 4);
        else
          v147 = 0;
        sub_22F2C312C(a1, v147, v146, v169);
        v144 += 8;
      }
      while (v145 != v144);
    }
  }
  if ((*(_WORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 120) + 104) + 848) & 0x40) != 0 && (_DWORD)v187)
  {
    v148 = 0;
    v149 = 24 * v187;
    do
    {
      v150 = *(_QWORD *)((char *)v186 + v148);
      if (!*(_DWORD *)(v150 + 4))
      {
        v151 = *(_BYTE *)(v150 + 31);
        v152 = v151;
        v153 = v151 & 0x7F;
        if (v152 >= 0)
          v154 = v153;
        else
          v154 = *(_QWORD *)(v150 + 16);
        sub_22E3B8BF4((uint64_t)__dst, v154 + 10);
        if (v178 >= 0)
          v155 = __dst;
        else
          v155 = (void **)__dst[0];
        if (v154)
        {
          v158 = *(char **)(v150 + 8);
          v157 = (char *)(v150 + 8);
          v156 = v158;
          if (v157[23] >= 0)
            v159 = v157;
          else
            v159 = v156;
          memmove(v155, v159, v154);
        }
        strcpy((char *)v155 + v154, ".timestamp");
        LODWORD(v191) = 0;
        v192 = std::system_category();
        llvm::raw_fd_ostream::raw_fd_ostream();
        if (!(_DWORD)v191)
        {
          v160 = v195;
          if ((unint64_t)(v194 - (_QWORD)v195) > 0xE)
          {
            *v195 = *(_QWORD *)"Timestamp file\n";
            *(_QWORD *)((char *)v160 + 7) = *(_QWORD *)"mp file\n";
            v195 = (_QWORD *)((char *)v195 + 15);
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)v193, "Timestamp file\n");
          }
          llvm::raw_fd_ostream::close((llvm::raw_fd_ostream *)v193);
          v161 = std::system_category();
          v196 = 0;
          v197 = v161;
        }
        MEMORY[0x23489CE04](v193);
        if (SHIBYTE(v178) < 0)
          operator delete(__dst[0]);
      }
      v148 += 24;
    }
    while (v149 != v148);
    v22 = 0;
    v25 = v168;
    goto LABEL_246;
  }
  v22 = 0;
LABEL_247:
  if (v186 != v188)
    free(v186);
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 168))(v14);
  *v27 = v26;
  *(_DWORD *)(a1 + 496) = v25;
  return v22;
}

BOOL sub_22E77B8A4(llvm::BitstreamCursor *a1, uint64_t a2)
{
  BOOL v2;
  char *v5;
  char *v6;
  char *v7;
  char v8;
  char *v9;
  char *v10;
  char *v11;
  char *v13;
  char *v14;
  char *v15;
  char v16;
  unsigned int v17[2];
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  do
  {
    sub_22E748020((uint64_t)a1, 0, (uint64_t)v17);
    if ((v18 & 1) != 0)
    {
      v7 = *(char **)v17;
      *(_QWORD *)v17 = 0;
      v14 = v7;
      sub_22E6C5940(&v14, &v15);
      v6 = v14;
      if (v14)
        goto LABEL_13;
      goto LABEL_14;
    }
    if (v17[0] < 2)
      goto LABEL_14;
    if (v17[0] != 2)
    {
      if (v17[0] != 3 || (llvm::BitstreamCursor::skipRecord(a1), (v16 & 1) == 0))
      {
LABEL_32:
        v8 = 1;
        goto LABEL_15;
      }
      v5 = v15;
      v15 = 0;
      v13 = v5;
      sub_22E6C5940(&v13, &v14);
      if (v13)
        (*(void (**)(char *))(*(_QWORD *)v13 + 8))(v13);
      if ((v16 & 1) == 0)
        goto LABEL_14;
      v6 = v15;
      v15 = 0;
      if (!v6)
        goto LABEL_14;
LABEL_13:
      (*(void (**)(char *))(*(_QWORD *)v6 + 8))(v6);
LABEL_14:
      v8 = 0;
      v2 = 1;
      goto LABEL_15;
    }
    if (v17[1] != (_DWORD)a2)
    {
      sub_22E746760((uint64_t)a1, (uint64_t *)&v13);
      v11 = v13;
      if (!v13)
        goto LABEL_32;
      v13 = 0;
      v14 = v11;
      sub_22E6C5940(&v14, &v15);
      if (v14)
        (*(void (**)(char *))(*(_QWORD *)v14 + 8))(v14);
      v6 = v13;
      if (v13)
        goto LABEL_13;
      goto LABEL_14;
    }
    llvm::BitstreamCursor::EnterSubBlock(a1, a2, 0);
    v10 = v13;
    v2 = v13 != 0;
    if (v13)
    {
      v13 = 0;
      v14 = v10;
      sub_22E6C5940(&v14, &v15);
      if (v14)
        (*(void (**)(char *))(*(_QWORD *)v14 + 8))(v14);
      if (v13)
        (*(void (**)(char *))(*(_QWORD *)v13 + 8))(v13);
    }
    v8 = 0;
LABEL_15:
    if ((v18 & 1) != 0)
    {
      v9 = *(char **)v17;
      *(_QWORD *)v17 = 0;
      if (v9)
        (*(void (**)(char *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  while ((v8 & 1) != 0);
  return v2;
}

uint64_t sub_22E77BAB4(uint64_t a1, uint64_t a2, int a3)
{
  _DWORD *v3;
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  unint64_t v7;
  unsigned int *v8;
  _DWORD *v9;
  unsigned int v10;
  _DWORD *v11;
  _DWORD *v12;
  int v14;
  uint64_t v15;

  if (*(_QWORD *)(a2 + 784))
  {
    v14 = a3;
    v15 = a2;
    sub_22E76BB68(a1, a2);
    a3 = v14;
    a2 = v15;
  }
  v3 = *(_DWORD **)(a2 + 1640);
  v4 = *(unsigned int *)(a2 + 1648);
  if ((_DWORD)v4)
  {
    v5 = *(unsigned int *)(a2 + 1648);
    v6 = *(_DWORD **)(a2 + 1640);
    do
    {
      v7 = v5 >> 1;
      v8 = &v6[2 * (v5 >> 1)];
      v10 = *v8;
      v9 = v8 + 2;
      v5 += ~(v5 >> 1);
      if (v10 > (a3 & 0x7FFFFFFFu))
        v5 = v7;
      else
        v6 = v9;
    }
    while (v5);
  }
  else
  {
    v6 = *(_DWORD **)(a2 + 1640);
  }
  v11 = &v3[2 * v4];
  if (v6 == v3)
    v12 = v11;
  else
    v12 = v6 - 2;
  return (v12[1] + a3);
}

void sub_22E77BB44(uint64_t a1)
{
  int v2;
  uint64_t v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _BYTE *v13;
  int v14;
  int v15;
  _DWORD *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  unsigned int v30;
  unint64_t v31;
  char v32;
  char v33;

  v2 = *(_DWORD *)(a1 + 6336);
  if (v2)
  {
    v3 = 0;
    v4 = 0;
    v5 = *(_QWORD **)(a1 + 112);
    v6 = v5[419];
    v7 = v5[420];
    v8 = v5[421];
    while (1)
    {
      if (v6)
      {
        if (!v7)
          goto LABEL_12;
      }
      else
      {
        v9 = *(unsigned int *)(*(_QWORD *)(a1 + 6328) + 4 * v3);
        if ((_DWORD)v9)
          v6 = (2 * v9) | 1;
        else
          v6 = 0;
        v5[419] = v6;
        if (!v7)
        {
LABEL_12:
          v10 = *(unsigned int *)(*(_QWORD *)(a1 + 6328) + 4 * (v4 + 1));
          if ((_DWORD)v10)
            v7 = (2 * v10) | 1;
          else
            v7 = 0;
          v5[420] = v7;
          if (v8)
            goto LABEL_6;
LABEL_16:
          v11 = *(unsigned int *)(*(_QWORD *)(a1 + 6328) + 4 * (v4 + 2));
          if ((_DWORD)v11)
            v8 = (2 * v11) | 1;
          else
            v8 = 0;
          v5[421] = v8;
          goto LABEL_6;
        }
      }
      if (!v8)
        goto LABEL_16;
LABEL_6:
      v3 = (v4 + 3);
      v4 = v3;
      if (v2 == (_DWORD)v3)
      {
        *(_DWORD *)(a1 + 6336) = 0;
        break;
      }
    }
  }
  v12 = *(_DWORD *)(a1 + 6488);
  if (v12)
    *(_DWORD *)(*(_QWORD *)(a1 + 112) + 1688) = v12;
  v13 = (_BYTE *)(a1 + 6512);
  v14 = *(_DWORD *)(a1 + 6492);
  if (v14 != -1)
    *(_BYTE *)(*(_QWORD *)(a1 + 112) + 240) = v14 == 1;
  v15 = *(_DWORD *)(a1 + 6500);
  v16 = *(_DWORD **)(a1 + 112);
  if (v15)
  {
    v16[61] = *(_DWORD *)(a1 + 6496);
    v16[70] = v15;
  }
  v16[3194] = *(_DWORD *)(a1 + 6320);
  if (*(_BYTE *)(a1 + 6668))
  {
    v17 = *(_DWORD *)(a1 + 6688);
    v18 = *(_QWORD *)(a1 + 6680);
    if (v17 && !*(_DWORD *)(v18 + 4))
    {
      sub_22F2B2FB8((uint64_t)(v16 + 146), *(_QWORD *)(v18 + 16), *(_QWORD *)(v18 + 24), v16[167], v16[168], *(_DWORD *)(v18 + 8));
      v18 = *(_QWORD *)(a1 + 6680);
      v17 = *(_DWORD *)(a1 + 6688);
      v19 = 1;
    }
    else
    {
      v19 = 0;
    }
    if (v19 != v17)
    {
      v20 = (uint64_t *)(v18 + 32 * v19 + 16);
      v21 = 32 * v17 - 32 * v19;
      do
      {
        sub_22F2B2FB8(*(_QWORD *)(a1 + 112) + 584, *v20, v20[1], *((_DWORD *)v20 - 4), *((_DWORD *)v20 - 3), *((_DWORD *)v20 - 2));
        v20 += 4;
        v21 -= 32;
      }
      while (v21);
    }
    if (*(_DWORD *)(a1 + 6672))
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 112) + 668) = *(_DWORD *)(a1 + 6664);
      *(_DWORD *)(*(_QWORD *)(a1 + 112) + 672) = *(_DWORD *)(a1 + 6672);
    }
  }
  if (*v13)
  {
    v22 = *(_DWORD *)(a1 + 6528);
    v23 = *(_QWORD *)(a1 + 6520);
    if (v22 && !*(_DWORD *)(v23 + 8))
    {
      sub_22F2B2FEC(*(_QWORD *)(a1 + 112) + 1208, (__int128 *)(v23 + 16), (uint64_t *)(*(_QWORD *)(a1 + 112) + 1296), (int *)(*(_QWORD *)(a1 + 112) + 1304), (int *)(v23 + 12));
      v23 = *(_QWORD *)(a1 + 6520);
      v22 = *(_DWORD *)(a1 + 6528);
      v24 = 1;
    }
    else
    {
      v24 = 0;
    }
    if (v24 != v22)
    {
      v25 = v23 + 32 * v24 + 12;
      v26 = 32 * v22 - 32 * v24;
      do
      {
        sub_22F2B303C(*(_QWORD *)(a1 + 112) + 1208, *(_QWORD *)(v25 + 4), *(_QWORD *)(v25 + 12), *(_QWORD *)(v25 - 12), *(_DWORD *)(v25 - 4), *(_DWORD *)v25);
        v25 += 32;
        v26 -= 32;
      }
      while (v26);
    }
    if (*(_DWORD *)(a1 + 6516))
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 112) + 1296) = *(_QWORD *)(a1 + 6504);
      *(_DWORD *)(*(_QWORD *)(a1 + 112) + 1304) = *(_DWORD *)(a1 + 6516);
    }
  }
  v27 = *(unsigned int *)(a1 + 7272);
  if ((_DWORD)v27)
  {
    v28 = 8 * v27;
    v29 = (int *)(*(_QWORD *)(a1 + 7264) + 4);
    do
    {
      if (*v29)
      {
        v30 = *(v29 - 1);
        if (v30)
        {
          if (*(_DWORD *)(a1 + 4208) >= v30)
          {
            v31 = *(_QWORD *)(*(_QWORD *)(a1 + 4200) + 8 * (v30 - 1));
            if (v31)
              sub_22F1DB478(*(_QWORD *)(a1 + 112) + 10096, v31, *v29, (uint64_t)nullsub_161, (uint64_t)&v33, (uint64_t)nullsub_914, (uint64_t)&v32);
          }
          else
          {
            sub_22E769C10(a1, "submodule ID out of range in AST file", 0x25uLL);
          }
        }
      }
      v29 += 2;
      v28 -= 8;
    }
    while (v28);
  }
}

void sub_22E77BE68(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  char *v12;
  char *v13;
  char v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[512];
  _QWORD v18[5];
  uint64_t v19[3];
  char *v20[2];
  _QWORD v21[33];
  char *v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v18[0] = a1;
  v18[1] = a2;
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = 0x200000000;
  memset(v19, 0, sizeof(v19));
  v20[0] = (char *)v21;
  v20[1] = (char *)0x800000000;
  v21[32] = 0;
  sub_22E77C120(&v13, (uint64_t)v18);
  v4 = v13;
  if (v13)
  {
    v13 = 0;
    v22 = v4;
    sub_22E6C5940(&v22, (char **)&v15);
    if (v22)
      (*(void (**)(char *))(*(_QWORD *)v22 + 8))(v22);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 0;
    if (v13)
      (*(void (**)(char *))(*(_QWORD *)v13 + 8))(v13);
  }
  else if (sub_22E77B8A4((llvm::BitstreamCursor *)v18, 19))
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 0;
  }
  else
  {
    v15 = v17;
    v16 = 0x4000000000;
    while (1)
    {
      while (1)
      {
        sub_22E748020((uint64_t)v18, 0, (uint64_t)&v22);
        if ((v23 & 1) != 0)
        {
          v5 = v22;
LABEL_28:
          v13 = v5;
          sub_22E6C5940(&v13, &v22);
          if (v13)
            (*(void (**)(char *))(*(_QWORD *)v13 + 8))(v13);
LABEL_30:
          *(_QWORD *)a3 = 0;
          *(_QWORD *)(a3 + 8) = 0;
          *(_DWORD *)(a3 + 16) = 0;
          goto LABEL_31;
        }
        if (v22 != 2)
          break;
        sub_22E746760((uint64_t)v18, (uint64_t *)&v13);
        v5 = v13;
        if ((v23 & 1) != 0)
        {
          v6 = v22;
          v22 = 0;
          if (v6)
            (*(void (**)(char *))(*(_QWORD *)v6 + 8))(v6);
        }
        if (v5)
          goto LABEL_28;
      }
      if (v22 != 3)
        goto LABEL_30;
      LODWORD(v16) = 0;
      v22 = 0;
      v23 = 0;
      llvm::BitstreamCursor::readRecord();
      if ((v14 & 1) != 0)
        break;
      if ((_DWORD)v13 == 1)
      {
        v9 = 0;
        v10 = v15;
        *(_QWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
        *(_DWORD *)(a3 + 16) = 0;
        do
        {
          *(_BYTE *)(a3 + v9) = v10[v9];
          ++v9;
        }
        while (v9 != 20);
        goto LABEL_31;
      }
    }
    v7 = v13;
    v13 = 0;
    v11 = v7;
    sub_22E6C5940(&v11, &v12);
    if (v11)
      (*(void (**)(char *))(*(_QWORD *)v11 + 8))(v11);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 0;
    if ((v14 & 1) != 0)
    {
      v8 = v13;
      v13 = 0;
      if (v8)
        (*(void (**)(char *))(*(_QWORD *)v8 + 8))(v8);
    }
LABEL_31:
    if (v15 != v17)
      free(v15);
  }
  sub_22E746F74(v20);
  if (v19[0])
  {
    sub_22E3B485C(v19);
    operator delete((void *)v19[0]);
  }
}

void sub_22E77C120(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  std::error_code v13;
  std::error_code v14;

  v12 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) <= 3uLL)
  {
    *(_QWORD *)&v13.__val_ = std::generic_category();
    v13.__cat_ = (const std::error_category *)"file too small to contain AST file magic";
    llvm::createStringError((llvm *)0x5C, v13, v6);
  }
  else
  {
    v4 = 0;
    v9 = 1212371011;
    while (1)
    {
      v5 = *((char *)&v9 + v4);
      sub_22E745EC8(a2, 8u, (uint64_t)&v10);
      if ((v11 & 1) != 0)
      {
        *a1 = v10;
        return;
      }
      if (v10 != v5)
        break;
      if (++v4 == 4)
      {
        *a1 = 0;
        return;
      }
    }
    *(_QWORD *)&v14.__val_ = std::generic_category();
    v14.__cat_ = (const std::error_category *)"file doesn't start with AST file magic";
    llvm::createStringError((llvm *)0x5C, v14, v7);
    if ((v11 & 1) != 0)
    {
      v8 = v10;
      v10 = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
  }
}

uint64_t sub_22E77C270(uint64_t a1, uint64_t a2, char a3, char a4)
{
  _DWORD *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  char v11;
  int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  BOOL v24;
  void *v25;
  size_t v26;
  size_t v27;
  unsigned __int8 *v28[3];
  __int16 v29;

  v7 = (_DWORD *)(a2 + 4);
  v8 = *(_DWORD *)(a1 + 7320);
  if (v8)
  {
    v9 = (unsigned int *)(a1 + 500);
    if (!*(_BYTE *)(a1 + 504))
      v9 = (unsigned int *)(a2 + 4);
    v10 = *v9;
    v11 = v8 & 1;
    v12 = (v8 >> 1) & 1;
    if (((1 << v10) & 0x1C) != 0)
      LOBYTE(v12) = v11;
    if (v10 <= 5)
      v13 = v12;
    else
      v13 = 0;
  }
  else
  {
    v13 = 0;
  }
  v14 = sub_22E77C48C(a2, *(_QWORD *)(a2 + 376), *(_QWORD *)(a2 + 384), a4, (*(_DWORD *)(a2 + 4) & 0xFFFFFFFB) == 1, *(_QWORD *)(a1 + 56), ((*(_WORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 120) + 104) + 848) & 0x400) != 0) & ~a3);
  v15 = 0;
  if ((v13 & 1) == 0 && (a3 & 1) == 0)
  {
    if (!*(_BYTE *)(a1 + 7325) || (_DWORD)v14 != 5)
    {
      if ((_DWORD)v14 == 1)
      {
        sub_22E769C10(a1, "malformed block record in AST file", 0x22uLL);
        return 1;
      }
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 56) + 196) & 0x20) == 0)
      {
        v17 = (_DWORD)v14 == 3 && *v7 == 0;
        v15 = v14;
        if (!v17)
          return v15;
        if (sub_22E808214(*(_QWORD *)(a1 + 272)) != 3)
          return 3;
        v18 = *(_DWORD *)(a1 + 496);
        v19 = *(_QWORD *)(a1 + 104);
        *(_DWORD *)(v19 + 312) = v18;
        *(_DWORD *)(v19 + 316) = 948;
        if (*(char *)(v19 + 311) < 0)
        {
          **(_BYTE **)(v19 + 288) = 0;
          *(_QWORD *)(v19 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v19 + 288) = 0;
          *(_BYTE *)(v19 + 311) = 0;
        }
        v28[0] = (unsigned __int8 *)(v19 + 320);
        v28[1] = 0;
        v28[2] = (unsigned __int8 *)v19;
        v29 = 1;
        *(_BYTE *)(v19 + 320) = 0;
        *(_DWORD *)(v19 + 664) = 0;
        v20 = *(unsigned int *)(v19 + 776);
        if ((_DWORD)v20)
        {
          v21 = *(_QWORD *)(v19 + 768);
          v22 = 56 * v20;
          do
          {
            if (*(char *)(v21 + v22 - 9) < 0)
              operator delete(*(void **)(v21 + v22 - 32));
            v22 -= 56;
          }
          while (v22);
        }
        *(_DWORD *)(v19 + 776) = 0;
        v23 = *(_BYTE *)(a2 + 31);
        v24 = v23 < 0;
        if (v23 >= 0)
          v25 = (void *)(a2 + 8);
        else
          v25 = *(void **)(a2 + 8);
        v26 = v23 & 0x7F;
        if (v24)
          v27 = *(_QWORD *)(a2 + 16);
        else
          v27 = v26;
        sub_22E3B89A8(v28, v25, v27);
        sub_22E3BB0B8((uint64_t)v28);
      }
    }
    return 0;
  }
  return v15;
}

uint64_t sub_22E77C48C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7)
{
  void *v12;
  uint64_t v13;
  void **v14;
  char v15;
  BOOL v16;
  int v17;
  void *v18;
  void *v19;
  uint64_t *v20;
  uint64_t v21;
  void **v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  int v27;
  int64x2_t *v28;
  int64x2_t *v29;
  unsigned int v30;
  __int8 v31;
  _DWORD *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  __int8 v50;
  unsigned int v51;
  unsigned int v52;
  __int8 v53;
  unsigned int v54;
  __int8 v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  __int128 v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  void **v76;
  char *v77;
  __int128 v78;
  int64x2_t v79;
  char *v80;
  int v81;
  uint64_t v82;
  void **v83;
  _QWORD *v84;
  int v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  BOOL v91;
  uint64_t v92;
  char *v93;
  int v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  void **v100;
  size_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  __int128 v110;
  int v111;
  int64x2_t v112;
  char *v113;
  char *v114;
  void **v115;
  size_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  void **v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  char *v129;
  void **v130;
  int v131;
  uint64_t v132;
  unsigned int v133;
  int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  uint64_t v138;
  unsigned int v139;
  unsigned int v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  __int128 v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  char *v148;
  void **v149;
  char *v150;
  __int128 v151;
  int64x2_t v152;
  char *v153;
  int v154;
  int v155;
  BOOL v156;
  int v157;
  int v158;
  uint64_t v159;
  unsigned int v160;
  unsigned int v161;
  uint64_t v162;
  uint64_t v163;
  unsigned int v164;
  unsigned int v165;
  uint64_t v166;
  _OWORD *v167;
  char *v168;
  __int128 v169;
  _OWORD *v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  char *v174;
  char *v175;
  char *v176;
  __int128 v177;
  int64x2_t v178;
  char *v179;
  int v180;
  uint64_t v181;
  unsigned int v183;
  uint64_t v184;
  uint64_t v185;
  void *v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int *v189;
  char v190;
  char v191;
  uint64_t v192;
  void **v193;
  int64x2_t *v194;
  int v195;
  unsigned int v196;
  unsigned int v197;
  void *v198[2];
  uint64_t v199;
  void *v200[3];
  char *v201;
  __int128 *v202;
  uint64_t v203;
  char v204;
  void *v205;
  char v206;
  void *__src;
  uint64_t v208;
  _BYTE v209[512];
  _QWORD v210[5];
  void *v211[3];
  char *v212[2];
  _QWORD v213[33];
  void *v214[3];
  int64x2_t v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  uint64_t v222;
  _BYTE *v223;
  _BYTE v224[40];
  char v225[28];
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  _QWORD *v229;
  uint64_t v230;
  _QWORD v231[33];
  _QWORD v232[2];
  __int128 v233;
  _QWORD v234[4];
  __int16 v235;
  uint64_t v236;

  v236 = *MEMORY[0x24BDAC8D0];
  v210[0] = a2;
  v210[1] = a3;
  v210[3] = 0;
  v210[2] = 0;
  v210[4] = 0x200000000;
  memset(v211, 0, sizeof(v211));
  v212[0] = (char *)v213;
  v212[1] = (char *)0x800000000;
  v213[32] = 0;
  sub_22E77C120(v200, (uint64_t)v210);
  v12 = v200[0];
  if (v200[0])
  {
    v200[0] = 0;
    __src = v12;
    sub_22E6C5940((char **)&__src, (char **)v214);
    if (__src)
      (*(void (**)(void *))(*(_QWORD *)__src + 8))(__src);
    if (v200[0])
      (*(void (**)(void *))(*(_QWORD *)v200[0] + 8))(v200[0]);
    v13 = 1;
    goto LABEL_225;
  }
  v13 = 1;
  if (sub_22E77B8A4((llvm::BitstreamCursor *)v210, 19))
    goto LABEL_225;
  v191 = a4;
  v197 = 0;
  __src = v209;
  v208 = 0x4000000000;
  v14 = (void **)(a1 + 264);
  v186 = (void *)(a1 + 280);
  v15 = a7 ^ 1;
  if (!a6)
    v15 = 1;
  v190 = v15 | a5;
  v188 = a1 + 244;
  v189 = (unsigned int *)(a1 + 3264);
  v187 = a1 + 224;
  v192 = a1;
  do
  {
    sub_22E748020((uint64_t)v210, 0, (uint64_t)&v205);
    if ((v206 & 1) != 0)
    {
      v18 = v205;
      v205 = 0;
      v200[0] = v18;
      sub_22E6C5940((char **)v200, (char **)v214);
      if (v200[0])
        (*(void (**)(void *))(*(_QWORD *)v200[0] + 8))(v200[0]);
LABEL_20:
      v17 = 1;
      v13 = 1;
      goto LABEL_21;
    }
    if ((_DWORD)v205)
      v16 = (_DWORD)v205 == 2;
    else
      v16 = 1;
    if (v16)
      goto LABEL_20;
    if ((_DWORD)v205 == 1)
    {
      v17 = 1;
      v13 = v197;
      goto LABEL_21;
    }
    LODWORD(v208) = 0;
    llvm::BitstreamCursor::readRecord();
    if ((v204 & 1) != 0)
    {
      v17 = 1;
      v13 = 1;
    }
    else
    {
      v196 = v13;
      switch((int)v203)
      {
        case 1:
          if (!v192)
            goto LABEL_216;
          v20 = (uint64_t *)__src;
          memset(v214, 0, 20);
          if ((_DWORD)v208)
          {
            v21 = 8 * v208;
            v22 = v214;
            do
            {
              v23 = *v20++;
              *(_BYTE *)v22 = v23;
              v22 = (void **)((char *)v22 + 1);
              v21 -= 8;
            }
            while (v21);
          }
          v17 = 0;
          v24 = *(_OWORD *)v214;
          v25 = v187;
          goto LABEL_128;
        case 2:
          if (!v192)
            goto LABEL_216;
          v121 = (uint64_t *)__src;
          memset(v214, 0, 20);
          if ((_DWORD)v208)
          {
            v122 = 8 * v208;
            v123 = v214;
            do
            {
              v124 = *v121++;
              *(_BYTE *)v123 = v124;
              v123 = (void **)((char *)v123 + 1);
              v122 -= 8;
            }
            while (v122);
          }
          v17 = 0;
          v24 = *(_OWORD *)v214;
          v25 = v188;
LABEL_128:
          *(_OWORD *)v25 = v24;
          *(_DWORD *)(v25 + 16) = v214[2];
          break;
        case 3:
          if ((v190 & 1) != 0)
            goto LABEL_216;
          v184 = a6;
          v28 = (int64x2_t *)operator new();
          v29 = v28;
          v28[3] = 0u;
          v28[4] = 0u;
          v28[5] = 0u;
          v28[6] = 0u;
          v28[7] = 0u;
          v28[8] = 0u;
          v28[9] = 0u;
          v28[10] = 0u;
          v28[11] = 0u;
          v30 = v28->i32[1] & 0xFF800000 | 0x6F0;
          v31 = v28[2].i8[8] & 0x80;
          v28[1].i64[1] = 0x100000032;
          v28[2].i64[0] = 8;
          v28->i64[1] = 0x600000000;
          v28[1].i64[0] = 0xA0000000ALL;
          v28[2].i8[8] = v31;
          v198[0] = v28;
          v28->i32[0] = 1;
          v28->i32[1] = v30;
          v32 = __src;
          v33 = v30 & 0xFFFFFFFE | *(_DWORD *)__src & 1;
          v28->i32[1] = v33;
          v34 = v33 & 0xFFFFFFFD | (2 * (v32[2] & 1));
          v28->i32[1] = v34;
          v35 = v34 & 0xFFFFFFFB | (4 * (v32[4] & 1));
          v28->i32[1] = v35;
          v36 = v35 & 0xFFFFFFF7 | (8 * (v32[6] & 1));
          v28->i32[1] = v36;
          v37 = v36 & 0xFFFFFFEF | (16 * (v32[8] & 1));
          v28->i32[1] = v37;
          v38 = v37 & 0xFFFFFFDF | (32 * (v32[10] & 1));
          v28->i32[1] = v38;
          v39 = v38 & 0xFFFFFFBF | ((v32[12] & 1) << 6);
          v28->i32[1] = v39;
          v40 = v39 & 0xFFFFFE7F | ((v32[14] & 1) << 7);
          v28->i32[1] = v40;
          v41 = v40 | ((v32[16] & 1) << 8);
          v28->i32[1] = v41;
          v42 = v41 & 0xFFFFFDFF | ((v32[18] & 1) << 9);
          v28->i32[1] = v42;
          v43 = v42 & 0xFF8003FF | ((v32[20] & 1) << 10);
          v28->i32[1] = v43;
          v44 = v43 & 0xFFFFF7FF | ((v32[22] & 1) << 11);
          v28->i32[1] = v44;
          v45 = v44 & 0xFFFFEFFF | ((v32[24] & 1) << 12);
          v28->i32[1] = v45;
          v46 = v45 & 0xFFFFDFFF | ((v32[26] & 1) << 13);
          v28->i32[1] = v46;
          v47 = v46 & 0xFFFFBFFF | ((v32[28] & 1) << 14);
          v28->i32[1] = v47;
          v48 = v47 & 0xFFFF7FFF | ((v32[30] & 1) << 15);
          v28->i32[1] = v48;
          v49 = v48 & 0xFFFCFFFF | ((v32[32] & 3) << 16);
          v28->i32[1] = v49;
          v50 = v32[34] & 3 | v31;
          v28[1].i64[1] = 0x100000032;
          v28[2].i64[0] = 8;
          v28->i64[1] = 0x600000000;
          v28[1].i64[0] = 0xA0000000ALL;
          v28[2].i8[8] = v50;
          v51 = v49 & 0xFFFBFFFF | ((v32[36] & 1) << 18);
          v28->i32[1] = v51;
          v52 = v51 & 0xFFF7FFFF | ((v32[38] & 1) << 19);
          v28->i32[1] = v52;
          v53 = v50 | (4 * (v32[40] & 1));
          v28[1].i64[1] = 0x100000032;
          v28[2].i64[0] = 8;
          v28->i64[1] = 0x600000000;
          v28[1].i64[0] = 0xA0000000ALL;
          v28[2].i8[8] = v53;
          v54 = v52 & 0xFFEFFFFF | ((v32[42] & 1) << 20);
          v28->i32[1] = v54;
          v55 = v53 | (8 * (v32[44] & 0xF));
          v28[1].i64[1] = 0x100000032;
          v28[2].i64[0] = 8;
          v28->i64[1] = 0x600000000;
          v28[1].i64[0] = 0xA0000000ALL;
          v28[2].i8[8] = v55;
          v56 = v54 & 0xFFDFFFFF | ((v32[46] & 1) << 21);
          v28->i32[1] = v56;
          v28->i32[1] = v56 & 0xFFBFFFFF | ((v32[48] & 1) << 22);
          v57 = v32[50] | 0x600000000;
          v28[1].i64[1] = 0x100000032;
          v28[2].i64[0] = 8;
          v28[2].i8[8] = v55;
          v28->i64[1] = v57;
          v28[1].i64[0] = 0xA0000000ALL;
          v58 = v57 | ((unint64_t)*((_QWORD *)v32 + 26) << 32);
          v28[1].i64[1] = 0x100000032;
          v28[2].i64[0] = 8;
          v28[2].i8[8] = v55;
          v28->i64[1] = v58;
          v28[1].i64[0] = 0xA0000000ALL;
          v59 = v32[54] | 0xA00000000;
          v28[1].i64[1] = 0x100000032;
          v28[2].i64[0] = 8;
          v28[2].i8[8] = v55;
          v28->i64[1] = v58;
          v28[1].i64[0] = v59;
          v60 = v59 | ((unint64_t)v32[56] << 32);
          v28[1].i64[1] = 0x100000032;
          v28[2].i64[0] = 8;
          v28[2].i8[8] = v55;
          v28->i64[1] = v58;
          v28[1].i64[0] = v60;
          v61 = v32[58] | 0x100000000;
          v28->i64[1] = v58;
          v28[1].i64[0] = v60;
          v28[2].i8[8] = v55;
          v28[1].i64[1] = v61;
          v28[2].i64[0] = 8;
          v62 = v61 | ((unint64_t)v32[60] << 32);
          v28->i64[1] = v58;
          v28[1].i64[0] = v60;
          v28[2].i8[8] = v55;
          v28[1].i64[1] = v62;
          v28[2].i64[0] = 8;
          v63 = v32[62];
          v28[2].i8[8] = v55;
          v28->i64[1] = v58;
          v28[1].i64[0] = v60;
          v28[1].i64[1] = v62;
          v28[2].i64[0] = v63;
          v64 = v63 | ((unint64_t)v32[64] << 32);
          v28->i64[1] = v58;
          v28[1].i64[0] = v60;
          v28[2].i8[8] = v55;
          v28[1].i64[1] = v62;
          v28[2].i64[0] = v64;
          v65 = v32[66];
          v183 = a5;
          if (v65)
          {
            v194 = v28 + 7;
            v66 = 34;
            do
            {
              v67 = v66 + 1;
              v68 = *((_QWORD *)__src + v66);
              sub_22E793964(v200, (uint64_t *)__src + v67, (uint64_t *)__src + v67 + v68, v68);
              v69 = v29[6].u64[1];
              v70 = v29[7].u64[0];
              if (v69 >= v70)
              {
                v72 = v29[6].i64[0];
                v73 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v69 - v72) >> 3) + 1;
                if (v73 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_228;
                if (0x5555555555555556 * ((uint64_t)(v70 - v72) >> 3) > v73)
                  v73 = 0x5555555555555556 * ((uint64_t)(v70 - v72) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v70 - v72) >> 3) >= 0x555555555555555)
                  v74 = 0xAAAAAAAAAAAAAAALL;
                else
                  v74 = v73;
                v215.i64[1] = (uint64_t)v194;
                if (v74)
                {
                  if (v74 > 0xAAAAAAAAAAAAAAALL)
                    goto LABEL_229;
                  v75 = (char *)operator new(24 * v74);
                }
                else
                {
                  v75 = 0;
                }
                v76 = (void **)&v75[8 * ((uint64_t)(v69 - v72) >> 3)];
                *(_OWORD *)v76 = *(_OWORD *)v200;
                v76[2] = v200[2];
                memset(v200, 0, sizeof(v200));
                if (v69 == v72)
                {
                  v79 = vdupq_n_s64(v69);
                  v77 = &v75[8 * ((uint64_t)(v69 - v72) >> 3)];
                }
                else
                {
                  v77 = &v75[8 * ((uint64_t)(v69 - v72) >> 3)];
                  do
                  {
                    v78 = *(_OWORD *)(v69 - 24);
                    *((_QWORD *)v77 - 1) = *(_QWORD *)(v69 - 8);
                    *(_OWORD *)(v77 - 24) = v78;
                    v77 -= 24;
                    *(_QWORD *)(v69 - 16) = 0;
                    *(_QWORD *)(v69 - 8) = 0;
                    *(_QWORD *)(v69 - 24) = 0;
                    v69 -= 24;
                  }
                  while (v69 != v72);
                  v79 = v29[6];
                  v70 = v29[7].u64[0];
                }
                v80 = (char *)(v76 + 3);
                v29[6].i64[0] = (uint64_t)v77;
                v29[6].i64[1] = (uint64_t)(v76 + 3);
                *(int64x2_t *)&v214[1] = v79;
                v29[7].i64[0] = (uint64_t)&v75[24 * v74];
                v215.i64[0] = v70;
                v214[0] = (void *)v79.i64[0];
                sub_22E3B8B94((uint64_t)v214);
                v81 = SHIBYTE(v200[2]);
                v29[6].i64[1] = (uint64_t)v80;
                if (v81 < 0)
                  operator delete(v200[0]);
              }
              else
              {
                v71 = *(_OWORD *)v200;
                *(void **)(v69 + 16) = v200[2];
                *(_OWORD *)v69 = v71;
                v29[6].i64[1] = v69 + 24;
              }
              v66 = v67 + v68;
              --v65;
            }
            while (v65);
          }
          else
          {
            v66 = 34;
          }
          v138 = *((_QWORD *)__src + v66);
          if ((_DWORD)v138)
          {
            v139 = v66 + 1;
            do
            {
              v140 = v139 + 1;
              v141 = *((_QWORD *)__src + v139);
              sub_22E793964(v200, (uint64_t *)__src + v140, (uint64_t *)__src + v140 + v141, v141);
              v142 = v29[9].u64[1];
              v143 = v29[10].u64[0];
              if (v142 >= v143)
              {
                v145 = v29[9].i64[0];
                v146 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v142 - v145) >> 3) + 1;
                if (v146 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_228;
                if (0x5555555555555556 * ((uint64_t)(v143 - v145) >> 3) > v146)
                  v146 = 0x5555555555555556 * ((uint64_t)(v143 - v145) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v143 - v145) >> 3) >= 0x555555555555555)
                  v147 = 0xAAAAAAAAAAAAAAALL;
                else
                  v147 = v146;
                v215.i64[1] = (uint64_t)v29[10].i64;
                if (v147)
                {
                  if (v147 > 0xAAAAAAAAAAAAAAALL)
                    goto LABEL_229;
                  v148 = (char *)operator new(24 * v147);
                }
                else
                {
                  v148 = 0;
                }
                v149 = (void **)&v148[8 * ((uint64_t)(v142 - v145) >> 3)];
                *(_OWORD *)v149 = *(_OWORD *)v200;
                v149[2] = v200[2];
                memset(v200, 0, sizeof(v200));
                if (v142 == v145)
                {
                  v152 = vdupq_n_s64(v142);
                  v150 = &v148[8 * ((uint64_t)(v142 - v145) >> 3)];
                }
                else
                {
                  v150 = &v148[8 * ((uint64_t)(v142 - v145) >> 3)];
                  do
                  {
                    v151 = *(_OWORD *)(v142 - 24);
                    *((_QWORD *)v150 - 1) = *(_QWORD *)(v142 - 8);
                    *(_OWORD *)(v150 - 24) = v151;
                    v150 -= 24;
                    *(_QWORD *)(v142 - 16) = 0;
                    *(_QWORD *)(v142 - 8) = 0;
                    *(_QWORD *)(v142 - 24) = 0;
                    v142 -= 24;
                  }
                  while (v142 != v145);
                  v152 = v29[9];
                  v143 = v29[10].u64[0];
                }
                v153 = (char *)(v149 + 3);
                v29[9].i64[0] = (uint64_t)v150;
                v29[9].i64[1] = (uint64_t)(v149 + 3);
                *(int64x2_t *)&v214[1] = v152;
                v29[10].i64[0] = (uint64_t)&v148[24 * v147];
                v215.i64[0] = v143;
                v214[0] = (void *)v152.i64[0];
                sub_22E3B8B94((uint64_t)v214);
                v154 = SHIBYTE(v200[2]);
                v29[9].i64[1] = (uint64_t)v153;
                if (v154 < 0)
                  operator delete(v200[0]);
              }
              else
              {
                v144 = *(_OWORD *)v200;
                *(void **)(v142 + 16) = v200[2];
                *(_OWORD *)v142 = v144;
                v29[9].i64[1] = v142 + 24;
              }
              v139 = v140 + v141;
              LODWORD(v138) = v138 - 1;
            }
            while ((_DWORD)v138);
          }
          v214[0] = v29;
          ++v29->i32[0];
          a6 = v184;
          v155 = (*(uint64_t (**)(uint64_t, void **, BOOL))(*(_QWORD *)v184 + 56))(v184, v214, (v191 & 2) == 0);
          sub_22E3B3C18((uint64_t *)v214);
          sub_22E3B3C18((uint64_t *)v198);
          v17 = 0;
          v156 = v155 == 0;
          v13 = v196;
          v157 = v197;
          v158 = 3;
          goto LABEL_204;
        case 4:
          if ((a5 & 1) != 0)
            goto LABEL_216;
          v82 = 0;
          HIBYTE(v214[2]) = 1;
          LOWORD(v214[0]) = 47;
          v215 = 0u;
          v216 = 0u;
          v217 = 0u;
          v218 = 0u;
          v219 = 0u;
          v220 = 0u;
          v221 = 0u;
          v222 = 0;
          memset(v224, 0, sizeof(v224));
          v223 = v224;
          v225[23] = 3;
          strcpy(v225, "raw");
          v225[24] = 0;
          v226 = 0x28DE8000093A80;
          v227 = 0;
          v228 = 1;
          do
          {
            v83 = &v214[v82];
            v83[31] = (void *)-4096;
            v83[32] = 0;
            v82 += 2;
          }
          while (v82 != 32);
          v183 = a5;
          v185 = a6;
          v229 = v231;
          v230 = 0x1000000000;
          v232[0] = 0;
          v232[1] = 0;
          v231[32] = v232;
          v233 = 0u;
          memset(v234, 0, sizeof(v234));
          v235 = v235 & 0xE000 | 0x40B;
          v84 = __src;
          v85 = *(_DWORD *)__src;
          if (*(_DWORD *)__src)
          {
            v86 = 1;
            v193 = v14;
            while (1)
            {
              v87 = v86 + 1;
              v88 = *((_QWORD *)__src + v86);
              sub_22E793964(v198, (uint64_t *)__src + v87, (uint64_t *)__src + v87 + v88, v88);
              v89 = v87 + v88;
              v90 = *((_QWORD *)__src + v87 + v88);
              v91 = *((_QWORD *)__src + v87 + v88 + 1) != 0;
              v92 = *((_QWORD *)__src + (v89 + 2));
              v93 = (char *)v215.i64[1];
              if (v215.i64[1] >= (unint64_t)v216)
              {
                v195 = v85;
                v94 = v89;
                v95 = (v215.i64[1] - v215.i64[0]) >> 5;
                if ((unint64_t)(v95 + 1) >> 59)
                  goto LABEL_228;
                v96 = (uint64_t)(v216 - v215.i64[0]) >> 4;
                if (v96 <= v95 + 1)
                  v96 = v95 + 1;
                v97 = (uint64_t)v216 - v215.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL ? 0x7FFFFFFFFFFFFFFLL : v96;
                v202 = &v216;
                if (v97)
                {
                  if (v97 >> 59)
LABEL_229:
                    sub_22E3B3F8C();
                  v98 = (char *)operator new(32 * v97);
                }
                else
                {
                  v98 = 0;
                }
                v99 = &v98[32 * v95];
                v200[1] = v99;
                v200[2] = v99;
                v201 = &v98[32 * v97];
                v100 = v199 >= 0 ? v198 : (void **)v198[0];
                v101 = v199 >= 0 ? HIBYTE(v199) & 0x7F : (size_t)v198[1];
                if (v101 > 0x7FFFFFFFFFFFFFF7)
LABEL_228:
                  abort();
                if (v101 >= 0x17)
                {
                  v102 = (v101 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v101 | 7) != 0x17)
                    v102 = v101 | 7;
                  v103 = v102 + 1;
                  v104 = (char *)operator new(v102 + 1);
                  *((_QWORD *)v99 + 1) = v101;
                  *((_QWORD *)v99 + 2) = v103 | 0x8000000000000000;
                  *(_QWORD *)v99 = v104;
                  v99 = v104;
                }
                else
                {
                  v99[23] = v101;
                  if (!v101)
                    goto LABEL_98;
                }
                memmove(v99, v100, v101);
LABEL_98:
                v99[v101] = 0;
                v105 = &v98[32 * v95];
                *((_DWORD *)v105 + 6) = v90;
                v105[28] = v105[28] & 0xFC | (2 * (v92 != 0)) | v91;
                v106 = v215.i64[1];
                v107 = v215.i64[0];
                v109 = (char *)v200[1];
                v108 = (char *)v200[2];
                if (v215.i64[1] == v215.i64[0])
                {
                  v112 = vdupq_n_s64(v215.u64[1]);
                  v13 = v196;
                  v14 = v193;
                  v89 = v94;
                }
                else
                {
                  v13 = v196;
                  v14 = v193;
                  v89 = v94;
                  do
                  {
                    v110 = *(_OWORD *)(v106 - 32);
                    *((_QWORD *)v109 - 2) = *(_QWORD *)(v106 - 16);
                    *((_OWORD *)v109 - 2) = v110;
                    *(_QWORD *)(v106 - 24) = 0;
                    *(_QWORD *)(v106 - 16) = 0;
                    *(_QWORD *)(v106 - 32) = 0;
                    v111 = *(_DWORD *)(v106 - 8);
                    *(v109 - 4) = *(_BYTE *)(v106 - 4);
                    *((_DWORD *)v109 - 2) = v111;
                    v109 -= 32;
                    v106 -= 32;
                  }
                  while (v106 != v107);
                  v112 = v215;
                }
                v85 = v195;
                v113 = v108 + 32;
                v215.i64[0] = (uint64_t)v109;
                v215.i64[1] = (uint64_t)(v108 + 32);
                *(int64x2_t *)&v200[1] = v112;
                v114 = (char *)v216;
                *(_QWORD *)&v216 = v201;
                v201 = v114;
                v200[0] = (void *)v112.i64[0];
                sub_22E3B3F98((uint64_t)v200);
                goto LABEL_119;
              }
              if (v199 >= 0)
                v115 = v198;
              else
                v115 = (void **)v198[0];
              if (v199 >= 0)
                v116 = HIBYTE(v199) & 0x7F;
              else
                v116 = (size_t)v198[1];
              if (v116 > 0x7FFFFFFFFFFFFFF7)
                goto LABEL_228;
              if (v116 >= 0x17)
              {
                v118 = (v116 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v116 | 7) != 0x17)
                  v118 = v116 | 7;
                v119 = v118 + 1;
                v117 = operator new(v118 + 1);
                v120 = v119 | 0x8000000000000000;
                v13 = v196;
                *((_QWORD *)v93 + 1) = v116;
                *((_QWORD *)v93 + 2) = v120;
                *(_QWORD *)v93 = v117;
              }
              else
              {
                *(_BYTE *)(v215.i64[1] + 23) = v116;
                v117 = v93;
                if (!v116)
                  goto LABEL_118;
              }
              memmove(v117, v115, v116);
LABEL_118:
              *((_BYTE *)v117 + v116) = 0;
              *((_DWORD *)v93 + 6) = v90;
              v93[28] = v93[28] & 0xFC | (2 * (v92 != 0)) | v91;
              v113 = v93 + 32;
              v14 = v193;
LABEL_119:
              v215.i64[1] = (uint64_t)v113;
              if (SHIBYTE(v199) < 0)
                operator delete(v198[0]);
              v86 = v89 + 3;
              if (!--v85)
              {
                v84 = __src;
                goto LABEL_176;
              }
            }
          }
          v86 = 1;
LABEL_176:
          v159 = v84[v86];
          v160 = v86 + 1;
          if ((_DWORD)v159)
          {
            do
            {
              v161 = v86 + 2;
              v162 = *((_QWORD *)__src + v160);
              sub_22E793964(v200, (uint64_t *)__src + v161, (uint64_t *)__src + v161 + v162, v162);
              v86 = v161 + v162;
              sub_22F2B150C((int64x2_t *)((char *)&v216 + 8), (uint64_t)v200, *((_QWORD *)__src + v86) != 0);
              if (SHIBYTE(v200[2]) < 0)
                operator delete(v200[0]);
              v160 = v86 + 1;
              LODWORD(v159) = v159 - 1;
            }
            while ((_DWORD)v159);
            v84 = __src;
          }
          v163 = v84[v160];
          if ((_DWORD)v163)
          {
            v164 = v86 + 2;
            do
            {
              v165 = v164 + 1;
              v166 = *((_QWORD *)__src + v164);
              sub_22E793964(v198, (uint64_t *)__src + v165, (uint64_t *)__src + v165 + v166, v166);
              v167 = (_OWORD *)v234[2];
              v168 = (char *)v234[3];
              if (v234[2] >= v234[3])
              {
                v170 = (_OWORD *)v234[1];
                v171 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v234[2] - v234[1]) >> 3);
                v172 = v171 + 1;
                if (v171 + 1 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_228;
                if (0x5555555555555556 * ((uint64_t)(v234[3] - v234[1]) >> 3) > v172)
                  v172 = 0x5555555555555556 * ((uint64_t)(v234[3] - v234[1]) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v234[3] - v234[1]) >> 3) >= 0x555555555555555)
                  v173 = 0xAAAAAAAAAAAAAAALL;
                else
                  v173 = v172;
                v202 = (__int128 *)&v234[3];
                if (v173)
                {
                  if (v173 > 0xAAAAAAAAAAAAAAALL)
                    goto LABEL_229;
                  v174 = (char *)operator new(24 * v173);
                }
                else
                {
                  v174 = 0;
                }
                v175 = &v174[24 * v171];
                *(_OWORD *)v175 = *(_OWORD *)v198;
                *((_QWORD *)v175 + 2) = v199;
                v198[1] = 0;
                v199 = 0;
                v198[0] = 0;
                if (v167 == v170)
                {
                  v178 = vdupq_n_s64((unint64_t)v167);
                  v176 = &v174[24 * v171];
                  v13 = v196;
                }
                else
                {
                  v176 = &v174[24 * v171];
                  v13 = v196;
                  do
                  {
                    v177 = *(_OWORD *)((char *)v167 - 24);
                    *((_QWORD *)v176 - 1) = *((_QWORD *)v167 - 1);
                    *(_OWORD *)(v176 - 24) = v177;
                    v176 -= 24;
                    *((_QWORD *)v167 - 2) = 0;
                    *((_QWORD *)v167 - 1) = 0;
                    *((_QWORD *)v167 - 3) = 0;
                    v167 = (_OWORD *)((char *)v167 - 24);
                  }
                  while (v167 != v170);
                  v178 = *(int64x2_t *)&v234[1];
                  v168 = (char *)v234[3];
                }
                v179 = v175 + 24;
                v234[1] = v176;
                v234[2] = v175 + 24;
                *(int64x2_t *)&v200[1] = v178;
                v234[3] = &v174[24 * v173];
                v201 = v168;
                v200[0] = (void *)v178.i64[0];
                sub_22E3B8B94((uint64_t)v200);
                v234[2] = v179;
                if (SHIBYTE(v199) < 0)
                  operator delete(v198[0]);
              }
              else
              {
                v169 = *(_OWORD *)v198;
                *(_QWORD *)(v234[2] + 16) = v199;
                *v167 = v169;
                v234[2] = (char *)v167 + 24;
              }
              v164 = v165 + v166;
              LODWORD(v163) = v163 - 1;
            }
            while ((_DWORD)v163);
          }
          a6 = v185;
          v180 = (*(uint64_t (**)(uint64_t, void **, BOOL))(*(_QWORD *)v185 + 80))(v185, v214, (v191 & 8) == 0);
          sub_22E6C656C((uint64_t)v214);
          v17 = 0;
          v156 = v180 == 0;
          v157 = v197;
          v158 = 5;
LABEL_204:
          if (!v156)
            v157 = v158;
          v197 = v157;
          a5 = v183;
          break;
        case 5:
          if ((a5 & 1) != 0)
            goto LABEL_216;
          v216 = 0u;
          v217 = 0u;
          v215 = 0u;
          sub_22E793964(v214, (uint64_t *)__src + 1, (uint64_t *)__src + *(unsigned int *)__src + 1, *(unsigned int *)__src);
          v26 = (*(uint64_t (**)(uint64_t, void **, BOOL))(*(_QWORD *)a6 + 64))(a6, v214, (v191 & 8) == 0);
          if (SHIBYTE(v217) < 0)
            operator delete(*((void **)&v216 + 1));
          if (SBYTE7(v216) < 0)
            operator delete((void *)v215.i64[0]);
          if (SHIBYTE(v214[2]) < 0)
            operator delete(v214[0]);
          v17 = 0;
          v27 = v197;
          if (v26)
            v27 = 5;
          v197 = v27;
          break;
        case 6:
          if (v192)
          {
            v125 = *(unsigned int *)(v192 + 3272);
            if ((_DWORD)v125)
              sub_22F2B1318(v189, *(_QWORD *)v189 + 8 * v125, (uint64_t *)__src, (uint64_t *)__src + v208);
            else
              sub_22E77A230((uint64_t)v189, (uint64_t)&__src);
          }
          goto LABEL_216;
        case 7:
          if (!v192)
            goto LABEL_216;
          v126 = a5;
          v127 = a6;
          v128 = *(_DWORD *)__src;
          v129 = 0;
          v214[0] = &v214[2];
          v214[1] = (void *)0x600000000;
          sub_22E47EDD0((uint64_t)v214, (v128 + 63) >> 6, 0);
          DWORD2(v217) = v128;
          v130 = (void **)v214[0];
          if (v14 != v214)
          {
            if (v214[0] == &v214[2])
            {
              v131 = (int)v214[1];
              v132 = *(unsigned int *)(v192 + 272);
              if (v132 >= LODWORD(v214[1]))
              {
                if (LODWORD(v214[1]))
                  memmove(*v14, &v214[2], 8 * LODWORD(v214[1]));
                goto LABEL_138;
              }
              if (*(_DWORD *)(v192 + 276) < LODWORD(v214[1]))
              {
                *(_DWORD *)(v192 + 272) = 0;
                llvm::SmallVectorBase<unsigned int>::grow_pod();
LABEL_209:
                v132 = 0;
              }
              else
              {
                if (!(_DWORD)v132)
                  goto LABEL_209;
                memmove(*v14, &v214[2], 8 * v132);
              }
              if (v132 != LODWORD(v214[1]))
                memcpy((char *)*v14 + 8 * v132, (char *)v214[0] + 8 * v132, 8 * LODWORD(v214[1]) - 8 * v132);
LABEL_138:
              *(_DWORD *)(v192 + 272) = v131;
            }
            else
            {
              if (*v14 != v186)
              {
                free(*v14);
                v130 = (void **)v214[0];
              }
              *(_QWORD *)(v192 + 264) = v130;
              *(void **)(v192 + 272) = v214[1];
              v214[0] = &v214[2];
              HIDWORD(v214[1]) = 0;
            }
            LODWORD(v214[1]) = 0;
            v133 = DWORD2(v217);
            v130 = (void **)v214[0];
            goto LABEL_140;
          }
          v133 = v128;
LABEL_140:
          *(_DWORD *)(v192 + 328) = v133;
          if (v130 != &v214[2])
            free(v130);
          if (v128)
          {
            v134 = 0;
            do
            {
              v135 = 0;
              do
              {
                if (((*v129 >> v135) & 1) != 0)
                  *((_QWORD *)*v14 + ((v134 + v135) >> 6)) |= 1 << (v134 + v135);
                v136 = v135 + 1;
                v137 = v135 + 1 + v134;
                if (v135 > 6)
                  break;
                ++v135;
              }
              while (v137 < v128);
              ++v129;
              v134 += v136;
            }
            while (v137 < v128);
          }
          v17 = 0;
          a6 = v127;
          a5 = v126;
          break;
        default:
LABEL_216:
          v17 = 0;
          break;
      }
    }
    if ((v204 & 1) != 0)
    {
      v181 = v203;
      v203 = 0;
      if (v181)
        (*(void (**)(uint64_t))(*(_QWORD *)v181 + 8))(v181);
    }
LABEL_21:
    if ((v206 & 1) != 0)
    {
      v19 = v205;
      v205 = 0;
      if (v19)
        (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
    }
  }
  while (!v17);
  if (__src != v209)
    free(__src);
LABEL_225:
  sub_22E746F74(v212);
  if (v211[0])
  {
    sub_22E3B485C((uint64_t *)v211);
    operator delete(v211[0]);
  }
  return v13;
}

int32x2_t sub_22E77D7F4(int64x2_t *a1, unsigned int a2, char *a3, unint64_t a4, int32x2_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  int32x2_t result;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void **v12;
  __int128 v13;
  int32x2_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a2 >= 4)
  {
    v15 = v5;
    v16 = v6;
    result = vmovn_s64(*a1);
    a5[3] = result;
    v9 = a1[1].i64[0];
    v10 = a1[1].i64[1];
    if ((v10 + v9) <= a4)
    {
      v11 = &a3[v9];
      sub_22E3B4274(&v13, a3, v11, a1[1].i64[0]);
      if (a5[2].i8[7] < 0)
        operator delete(*(void **)a5);
      *(_OWORD *)a5->i8 = v13;
      a5[2] = v14;
      sub_22E3B4274(&v13, v11, &v11[v10], v10);
      v12 = (void **)&a5[4];
      if (a5[6].i8[7] < 0)
        operator delete(*v12);
      result = (int32x2_t)v13;
      *(_OWORD *)v12 = v13;
      a5[6] = v14;
    }
  }
  return result;
}

unint64_t sub_22E77D8C8(uint64_t a1, unsigned int a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  unint64_t v13;
  unsigned int *v14;
  _DWORD *v15;
  unsigned int v16;
  _DWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  int v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  unsigned int v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t *v75;
  unsigned __int8 *v76;
  uint64_t *v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  unsigned __int8 *v83;
  uint64_t v84;
  _BOOL4 v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  __int16 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __int16 v103;
  __int16 v104;
  unsigned int v105;
  __int16 v106;
  __int16 v107;
  __int16 v108;
  void *v109;
  uint64_t v110;
  uint64_t *v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  unint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  BOOL v121;
  uint64_t v122;
  unsigned int v123;
  int v124;
  uint64_t *v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  unsigned int v137;
  _QWORD *v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int v148;
  _BOOL4 v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t *v171;
  unsigned __int8 *v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t i;
  uint64_t v181;
  unint64_t v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  BOOL v187;
  uint64_t *v188;
  unint64_t v189;
  _BOOL4 v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t *v194;
  uint64_t v195;
  uint64_t *v196;
  uint64_t *v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  uint64_t **v201;
  uint64_t v202[2];
  __int128 v203[4];
  void *v204;
  int v205;
  _OWORD v206[3];
  void *v207;
  char v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t v211;
  unsigned int v212;
  void *v213;
  uint64_t v214;
  _BYTE v215[265];
  void *v216;
  __int128 v217;
  uint64_t v218;
  void *v219[2];
  _BYTE v220[64];
  void *v221;
  uint64_t v222;
  _QWORD v223[26];

  v223[24] = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD **)(a1 + 128);
  v4 = a2 >> 3;
  if (a2 > 0x95F)
  {
    v7 = (v4 - 300);
    v8 = *(_QWORD *)(a1 + 2680);
    if (*(_QWORD *)(v8 + 8 * v7) > 0xFuLL)
      return *(_QWORD *)(v8 + 8 * v7) & 0xFFFFFFFFFFFFFFF8 | (*(_QWORD *)(v8 + 8 * v7) | a2) & 7;
    v9 = *(_DWORD **)(a1 + 2704);
    v10 = *(unsigned int *)(a1 + 2712);
    if (!(_DWORD)v10)
      goto LABEL_23;
    v11 = *(unsigned int *)(a1 + 2712);
    v12 = *(_DWORD **)(a1 + 2704);
    do
    {
      v13 = v11 >> 1;
      v14 = &v12[4 * (v11 >> 1)];
      v16 = *v14;
      v15 = v14 + 4;
      v11 += ~(v11 >> 1);
      if (v16 > v7)
        v11 = v13;
      else
        v12 = v15;
    }
    while (v11);
    if (v12 == v9)
LABEL_23:
      v17 = &v9[4 * v10];
    else
      v17 = v12 - 4;
    v18 = *((_QWORD *)v17 + 1);
    v19 = *(_QWORD *)(*(_QWORD *)(v18 + 3216) + 8 * (v7 - *(_DWORD *)(v18 + 3224)))
        + *(_QWORD *)(v18 + 3064);
    v20 = 8 * *(_QWORD *)(v18 + 2736) - *(unsigned int *)(v18 + 2752);
    v202[0] = v18 + 2720;
    v202[1] = v20;
    v21 = *(_QWORD *)(a1 + 24);
    v200 = *(_DWORD *)(a1 + 10984);
    *(_DWORD *)(a1 + 10984) = 2;
    (*(void (**)(uint64_t))(v21 + 160))(a1 + 24);
    *(_QWORD *)(v18 + 2736) = (v19 >> 3) & 0x1FFFFFFFFFFFFFF8;
    *(_DWORD *)(v18 + 2752) = 0;
    if ((v19 & 0x3F) != 0
      && (sub_22E745EC8(v18 + 2720, v19 & 0x3F, (uint64_t)&v209), (v210 & 1) != 0)
      && (v221 = v209) != 0)
    {
      sub_22E769A6C((uint64_t *)a1, (uint64_t **)&v221);
      v173 = (uint64_t *)v221;
      if (!v221)
        goto LABEL_418;
    }
    else
    {
      sub_22E745EC8(v18 + 2720, *(_DWORD *)(v18 + 2756), (uint64_t)&v209);
      if ((v210 & 1) == 0)
      {
        v209 = *(uint64_t **)(a1 + 128);
        v210 = a1;
        v211 = v18;
        v213 = v215;
        v212 = 0;
        v214 = 0x4000000000;
        llvm::BitstreamCursor::readRecord();
        if ((v208 & 1) != 0)
        {
          v26 = v207;
          v207 = 0;
          v221 = v26;
          sub_22E769A6C((uint64_t *)a1, (uint64_t **)&v221);
          v27 = v200;
          if (v221)
            (*(void (**)(void *))(*(_QWORD *)v221 + 8))(v221);
          v28 = 0;
        }
        else
        {
          switch((int)v207)
          {
            case 1:
              v22 = v212;
              if (v214 <= v212)
              {
                v25 = 0;
              }
              else
              {
                v23 = v210;
                ++v212;
                v24 = sub_22E77A180(v210, v211, *((_QWORD *)v213 + v22));
                v25 = sub_22E77D8C8(v23, v24);
                LODWORD(v22) = v212;
              }
              v212 = v22 + 1;
              v142 = *((_QWORD *)v213 + v22);
              if ((v142 & 0xCFFFFFFF8) != 0)
              {
                v221 = (void *)v142;
                v143 = sub_22E491354((unsigned int *)&v221, v25);
                v32 = sub_22EF5DBC4((uint64_t)v3, v143, (uint64_t)v221);
                goto LABEL_91;
              }
              v28 = v142 & 7 | v25;
              goto LABEL_92;
            case 3:
              v201 = &v209;
              v155 = v209;
              v156 = sub_22E78DF24(v210, v211, (uint64_t)&v213, &v212);
              v32 = sub_22F369F4C((uint64_t)v155, v156);
              goto LABEL_91;
            case 4:
              v201 = &v209;
              v88 = v209;
              v89 = sub_22E78DF24(v210, v211, (uint64_t)&v213, &v212);
              v90 = v212++;
              v32 = sub_22EF5B848((uint64_t)v88, v89, *((_QWORD *)v213 + v90) & 0x1F);
              goto LABEL_91;
            case 5:
              v201 = &v209;
              v160 = v209;
              v161 = sub_22E78DF24(v210, v211, (uint64_t)&v213, &v212);
              v32 = sub_22F36A4F8((uint64_t)v160, v161);
              goto LABEL_91;
            case 6:
              v201 = &v209;
              v84 = v212++;
              v85 = *((_QWORD *)v213 + v84) != 0;
              v86 = v209;
              v87 = sub_22E78DF24(v210, v211, (uint64_t)&v213, &v212);
              v32 = sub_22EF5F8C4((uint64_t)v86, v87, v85);
              goto LABEL_91;
            case 7:
              v201 = &v209;
              v125 = v209;
              v126 = sub_22E78DF24(v210, v211, (uint64_t)&v213, &v212);
              v32 = sub_22EF5FB8C((uint64_t)v125, v126);
              goto LABEL_91;
            case 8:
              v201 = &v209;
              v32 = sub_22F2BD3F0((uint64_t **)&v201);
              goto LABEL_91;
            case 9:
              v201 = &v209;
              v32 = sub_22F2BC530((uint64_t **)&v201);
              goto LABEL_91;
            case 10:
              v201 = &v209;
              v32 = sub_22F2BC734((uint64_t **)&v201);
              goto LABEL_91;
            case 11:
              v201 = &v209;
              v32 = sub_22F2BC868((uint64_t **)&v201);
              goto LABEL_91;
            case 12:
              v201 = &v209;
              v32 = sub_22F2BD8CC((uint64_t **)&v201);
              goto LABEL_91;
            case 13:
              v201 = &v209;
              v77 = v209;
              v78 = sub_22E78DF24(v210, v211, (uint64_t)&v213, &v212);
              v79 = v212 + 1;
              v80 = *((_QWORD *)v213 + v212);
              v212 += 2;
              v32 = sub_22EF63724((uint64_t)v77, v78, v80, *((_QWORD *)v213 + v79));
              goto LABEL_91;
            case 14:
              v201 = &v209;
              v32 = sub_22F2BD130((uint64_t **)&v201);
              goto LABEL_91;
            case 15:
              v201 = &v209;
              v194 = v209;
              v91 = v212;
              v187 = *((_QWORD *)v213 + v212) != 0;
              v181 = *((_QWORD *)v213 + v212 + 1);
              v92 = *((_QWORD *)v213 + v212 + 2);
              v212 += 4;
              v184 = *((_QWORD *)v213 + v91 + 3);
              v185 = v92;
              v221 = v223;
              v222 = 0x800000000;
              sub_22E791EA4((uint64_t)&v209, (unsigned int *)&v221, (uint64_t)v206);
              v219[0] = v220;
              v219[1] = (void *)0x800000000;
              v93 = sub_22E791FEC((uint64_t)&v209, (unsigned int *)v219);
              v182 = v94;
              v183 = (uint64_t *)v93;
              v216 = &v218;
              v217 = xmmword_22F44E360;
              v95 = v212++;
              v96 = *((_QWORD *)v213 + v95);
              if (v96 >= 9uLL)
                llvm::SmallVectorBase<unsigned long long>::grow_pod();
              for (i = v217; (_DWORD)v96; LODWORD(v96) = v96 - 1)
              {
                v178 = v212++;
                v179 = *((_QWORD *)v213 + v178);
                if ((unint64_t)(i + 1) > *((_QWORD *)&v217 + 1))
                {
                  llvm::SmallVectorBase<unsigned long long>::grow_pod();
                  i = v217;
                }
                *((_BYTE *)v216 + i) = v179;
                i = v217 + 1;
                *(_QWORD *)&v217 = v217 + 1;
              }
              v97 = v216;
              v98 = sub_22E78DF24(v210, v211, (uint64_t)&v213, &v212);
              v99 = *((_QWORD *)v213 + v212) != 0;
              v100 = *((_QWORD *)v213 + v212 + 1);
              v101 = *((_QWORD *)v213 + v212 + 2);
              v102 = *((_QWORD *)v213 + v212 + 3);
              v103 = *((_QWORD *)v213 + v212 + 4) != 0;
              v104 = *((_QWORD *)v213 + v212 + 5) != 0;
              v105 = v212 + 7;
              v106 = *((_QWORD *)v213 + v212 + 6) != 0;
              v212 += 8;
              v107 = *((_QWORD *)v213 + v105) != 0;
              if (v100)
                v108 = ((_WORD)v101 << 8) + 256;
              else
                v108 = 0;
              v205 = 0;
              LOWORD(v203[0]) = v102 | (32 * v99) | v108 | (v103 << 6) | (v104 << 7) | (v106 << 11) | (v107 << 12);
              BYTE2(v203[0]) = v187 | (2 * (v181 != 0));
              *(_QWORD *)((char *)v203 + 4) = v185;
              HIDWORD(v203[0]) = v184;
              v203[1] = v206[0];
              v203[2] = v206[1];
              v203[3] = v206[2];
              if (i)
                v109 = v97;
              else
                v109 = 0;
              v204 = v109;
              v28 = sub_22EF63D8C((uint64_t)v194, v98, v183, v182, v203, 0);
              if (v216 != &v218)
                free(v216);
              v27 = v200;
              if (v219[0] != v220)
                free(v219[0]);
              goto LABEL_62;
            case 16:
              v201 = &v209;
              v69 = v209;
              v70 = (_QWORD *)v210;
              v71 = sub_22E779F8C(v210, v211, (uint64_t)&v213, &v212);
              v72 = sub_22E77F870(v70, v71);
              v73 = sub_22E78DF24(v210, v211, (uint64_t)&v213, &v212);
              if (v73 < 0x10)
                v74 = 0;
              else
                v74 = *(_QWORD *)((v73 & 0xFFFFFFFFFFFFFFF0) + 8) | v73 & 7;
              v32 = sub_22EF64680((uint64_t)v69, v72, v74);
              goto LABEL_91;
            case 17:
              v201 = &v209;
              v75 = v209;
              if (*(_DWORD *)(v210 + 10984) == 3)
              {
                v175 = *(unsigned int *)(v210 + 10848);
                v76 = *(unsigned __int8 **)(*(_QWORD *)(v210 + 10840) + 8 * v175 - 8);
                *(_DWORD *)(v210 + 10848) = v175 - 1;
              }
              else
              {
                v76 = (unsigned __int8 *)sub_22E7B94C8(v210, v211);
              }
              v32 = sub_22EF67558((uint64_t)v75, v76);
              goto LABEL_91;
            case 18:
              v201 = &v209;
              v167 = v209;
              v168 = sub_22E78DF24(v210, v211, (uint64_t)&v213, &v212);
              v32 = sub_22F36D25C((uint64_t)v167, v168);
              goto LABEL_91;
            case 19:
              v201 = &v209;
              v63 = v212++;
              v198 = *((_QWORD *)v213 + v63);
              v64 = v209;
              v65 = (_QWORD *)v210;
              v66 = sub_22E779F8C(v210, v211, (uint64_t)&v213, &v212);
              v67 = sub_22E77F870(v65, v66);
              v68 = sub_22EF6477C((uint64_t)v64, v67);
              goto LABEL_65;
            case 20:
              v201 = &v209;
              v110 = v212++;
              v198 = *((_QWORD *)v213 + v110);
              v111 = v209;
              v112 = (_QWORD *)v210;
              v113 = sub_22E779F8C(v210, v211, (uint64_t)&v213, &v212);
              v114 = sub_22E77F870(v112, v113);
              v68 = sub_22EF64864((uint64_t)v111, v114);
LABEL_65:
              v28 = v68;
              if (v198)
                *(_DWORD *)(*(_QWORD *)(v68 & 0xFFFFFFFFFFFFFFF0) + 16) |= 0x600u;
              goto LABEL_92;
            case 21:
              v201 = &v209;
              v32 = sub_22F2BD58C((uint64_t)&v209);
              goto LABEL_91;
            case 22:
              v201 = &v209;
              v162 = v209;
              v163 = sub_22E78DF24(v210, v211, (uint64_t)&v213, &v212);
              v32 = sub_22F36CC4C((uint64_t)v162, v163);
              goto LABEL_91;
            case 23:
              v201 = &v209;
              v81 = v209;
              v82 = sub_22E78DF24(v210, v211, (uint64_t)&v213, &v212);
              if (*(_DWORD *)(v210 + 10984) == 3)
              {
                v176 = *(unsigned int *)(v210 + 10848);
                v83 = *(unsigned __int8 **)(*(_QWORD *)(v210 + 10840) + 8 * v176 - 8);
                *(_DWORD *)(v210 + 10848) = v176 - 1;
              }
              else
              {
                v83 = (unsigned __int8 *)sub_22E7B94C8(v210, v211);
              }
              v32 = sub_22EF67788((uint64_t)v81, v83, v82);
              goto LABEL_91;
            case 24:
              v201 = &v209;
              v58 = v212++;
              v193 = *((_QWORD *)v213 + v58);
              v197 = v209;
              v189 = sub_22E78F0D8((uint64_t)&v209);
              v59 = sub_22E78DF24(v210, v211, (uint64_t)&v213, &v212);
              v60 = (_QWORD *)v210;
              v61 = sub_22E779F8C(v210, v211, (uint64_t)&v213, &v212);
              v62 = sub_22E77F870(v60, v61);
              v32 = sub_22EF65684((uint64_t)v197, v193, v189, v59, v62);
              goto LABEL_91;
            case 25:
              v201 = &v209;
              v29 = v209;
              v30 = sub_22E78DF24(v210, v211, (uint64_t)&v213, &v212);
              v31 = sub_22E78DF24(v210, v211, (uint64_t)&v213, &v212);
              v32 = sub_22EF64A1C((uint64_t)v29, *(_QWORD *)(v30 & 0xFFFFFFFFFFFFFFF0), *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFFF0) + 8) | v31 & 7);
              goto LABEL_91;
            case 26:
              v201 = &v209;
              v32 = sub_22F2BD794((uint64_t)&v209);
              goto LABEL_91;
            case 27:
              v201 = &v209;
              v128 = v209;
              v127 = (_QWORD *)v210;
              v129 = sub_22E779F8C(v210, v211, (uint64_t)&v213, &v212);
              v130 = sub_22E77F870(v127, v129);
              v131 = sub_22E78DF24(v210, v211, (uint64_t)&v213, &v212);
              if (!v130)
                goto LABEL_77;
              v132 = v130;
              break;
            case 28:
              v201 = &v209;
              v32 = sub_22F2BD454((uint64_t *)&v201);
              goto LABEL_91;
            case 29:
              v201 = &v209;
              v199 = *((_QWORD *)v213 + v212);
              v137 = v212 + 2;
              v195 = *((_QWORD *)v213 + v212 + 1);
              v212 += 3;
              v190 = *((_QWORD *)v213 + v137) != 0;
              v139 = v209;
              v138 = (_QWORD *)v210;
              v140 = sub_22E779F8C(v210, v211, (uint64_t)&v213, &v212);
              v141 = sub_22E77F870(v138, v140);
              v32 = sub_22EF64B98((uint64_t)v139, v199, v195, v190, v141);
              goto LABEL_91;
            case 30:
              v201 = &v209;
              v33 = v212++;
              v188 = v209;
              v191 = *((_QWORD *)v213 + v33);
              sub_22E78EC0C((uint64_t)&v209);
              v186 = v34;
              v221 = v223;
              v222 = 0x800000000;
              v35 = sub_22E78F00C((uint64_t)&v209, (unsigned int *)&v221);
              v37 = v36;
              v38 = sub_22E78DF24(v210, v211, (uint64_t)&v213, &v212);
              if (v38 <= 0xF)
                v39 = sub_22EF65280((uint64_t)v188, v186, v35, v37);
              else
                v39 = sub_22EF6512C((uint64_t)v188, v186, v35, v37, v38);
              v28 = v39;
              v27 = v200;
              if (v191)
                *(_DWORD *)(*(_QWORD *)(v39 & 0xFFFFFFFFFFFFFFF0) + 16) |= 0x600u;
LABEL_62:
              if (v221 != v223)
                free(v221);
              goto LABEL_93;
            case 31:
              v201 = &v209;
              v42 = v212++;
              v192 = *((_QWORD *)v213 + v42);
              v196 = v209;
              v43 = sub_22E78F0D8((uint64_t)&v209);
              v44 = v210;
              v45 = v212++;
              v46 = sub_22E768E34(v210, v211, *((_QWORD *)v213 + v45));
              v47 = sub_22E785944(v44, v46);
              v48 = sub_22E78DF24(v210, v211, (uint64_t)&v213, &v212);
              if (v48 < 0x10)
                v49 = 0;
              else
                v49 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFFFF0) + 8) | v48 & 7;
              v32 = sub_22EF65A30((uint64_t)v196, v192, v43, v47, v49);
              goto LABEL_91;
            case 32:
              v201 = &v209;
              v32 = sub_22F2BCC78((uint64_t *)&v201);
              goto LABEL_91;
            case 33:
              v201 = &v209;
              v32 = sub_22F2BC62C((uint64_t **)&v201);
              goto LABEL_91;
            case 34:
              v201 = &v209;
              v40 = v209;
              v41 = sub_22E78DF24(v210, v211, (uint64_t)&v213, &v212);
              v32 = sub_22EF5F41C((uint64_t)v40, v41);
              goto LABEL_91;
            case 35:
              v201 = &v209;
              v117 = v209;
              v118 = sub_22E78DF24(v210, v211, (uint64_t)&v213, &v212);
              v119 = v212++;
              v120 = *((_QWORD *)v213 + v119);
              v124 = v120 - 1;
              v121 = (_DWORD)v120 == 0;
              v122 = (_DWORD)v120 != 0;
              v123 = v124 & 0xFFFFFF00;
              v124 = v124;
              if (v121)
                v124 = 0;
              v32 = sub_22EF663B4((uint64_t)v117, v118, v124 | v123 | (unint64_t)(v122 << 32));
              goto LABEL_91;
            case 36:
              v201 = &v209;
              v32 = sub_22F2BC974((uint64_t **)&v201);
              goto LABEL_91;
            case 37:
              v201 = &v209;
              v32 = sub_22F2BD6B4((uint64_t *)&v201);
              goto LABEL_91;
            case 38:
              v201 = &v209;
              v32 = sub_22F2BC9EC((uint64_t *)&v201);
              goto LABEL_91;
            case 39:
              v201 = &v209;
              v32 = sub_22F2BD71C((uint64_t **)&v201);
              goto LABEL_91;
            case 40:
              v201 = &v209;
              v153 = v209;
              v154 = sub_22E78DF24(v210, v211, (uint64_t)&v213, &v212);
              v32 = sub_22F36A8C0((uint64_t)v153, v154);
              goto LABEL_91;
            case 41:
              v201 = &v209;
              v115 = v209;
              v116 = sub_22E78DF24(v210, v211, (uint64_t)&v213, &v212);
              v32 = sub_22EF69F90((uint64_t)v115, v116);
              goto LABEL_91;
            case 42:
              v201 = &v209;
              v157 = v209;
              v158 = sub_22E78DF24(v210, v211, (uint64_t)&v213, &v212);
              v159 = sub_22E78DF24(v210, v211, (uint64_t)&v213, &v212);
              v32 = sub_22F36A110((uint64_t)v157, v158, v159);
              goto LABEL_91;
            case 43:
              v201 = &v209;
              v150 = v209;
              v151 = sub_22E78DF24(v210, v211, (uint64_t)&v213, &v212);
              v152 = v212++;
              v32 = sub_22F36C098((uint64_t)v150, v151, *((_QWORD *)v213 + v152) != 0);
              goto LABEL_91;
            case 44:
              v201 = &v209;
              v32 = sub_22F2BD5E0((uint64_t *)&v201);
              goto LABEL_91;
            case 45:
              v201 = &v209;
              v32 = sub_22F2BCB30((uint64_t **)&v201);
              goto LABEL_91;
            case 46:
              v201 = &v209;
              v50 = v209;
              v51 = sub_22E78DF24(v210, v211, (uint64_t)&v213, &v212);
              v52 = v210;
              if (*(_DWORD *)(v210 + 10984) == 3)
              {
                v174 = *(unsigned int *)(v210 + 10848);
                v53 = *(unsigned __int8 **)(*(_QWORD *)(v210 + 10840) + 8 * v174 - 8);
                *(_DWORD *)(v210 + 10848) = v174 - 1;
              }
              else
              {
                v53 = (unsigned __int8 *)sub_22E7B94C8(v210, v211);
                v52 = v210;
              }
              v54 = v212 + 1;
              v55 = *((_QWORD *)v213 + v212);
              v212 += 2;
              HIDWORD(v56) = *((_QWORD *)v213 + v54);
              LODWORD(v56) = HIDWORD(v56);
              v57 = sub_22E77BAB4(v52, v211, v56 >> 1);
              v32 = sub_22EF63908((uint64_t)v50, v51, v53, v55, v57);
              goto LABEL_91;
            case 47:
              v201 = &v209;
              v32 = sub_22F2BCBC4((uint64_t **)&v201);
              goto LABEL_91;
            case 48:
              v201 = &v209;
              v32 = sub_22F2BCD90((uint64_t **)&v201);
              goto LABEL_91;
            case 49:
              v201 = &v209;
              v32 = sub_22F2BD220((uint64_t **)&v201);
              goto LABEL_91;
            case 50:
              v201 = &v209;
              v148 = v212 + 1;
              v149 = *((_QWORD *)v213 + v212) != 0;
              v212 += 2;
              v32 = sub_22F36C2DC((uint64_t)v209, v149, *((_QWORD *)v213 + v148));
              goto LABEL_91;
            case 51:
              v201 = &v209;
              v169 = v212++;
              v170 = *((_QWORD *)v213 + v169);
              v171 = v209;
              if (*(_DWORD *)(v210 + 10984) == 3)
              {
                v177 = *(unsigned int *)(v210 + 10848);
                v172 = *(unsigned __int8 **)(*(_QWORD *)(v210 + 10840) + 8 * v177 - 8);
                *(_DWORD *)(v210 + 10848) = v177 - 1;
              }
              else
              {
                v172 = (unsigned __int8 *)sub_22E7B94C8(v210, v211);
              }
              v32 = sub_22F36C4B8((uint64_t)v171, v170 != 0, v172);
              goto LABEL_91;
            case 52:
              v201 = &v209;
              v32 = sub_22F2BD29C((uint64_t **)&v201);
              goto LABEL_91;
            case 53:
              v201 = &v209;
              v32 = sub_22F2BD2FC((uint64_t **)&v201);
              goto LABEL_91;
            case 54:
              v201 = &v209;
              v32 = sub_22F2BD7D8((uint64_t **)&v201);
              goto LABEL_91;
            case 55:
              v201 = &v209;
              v164 = v209;
              v165 = sub_22E7A0338(&v209);
              v166 = sub_22E78DF24(v210, v211, (uint64_t)&v213, &v212);
              v32 = sub_22F36C7EC((uint64_t)v164, v165, v166);
              goto LABEL_91;
            case 56:
              v201 = &v209;
              v32 = sub_22F2BCE5C((uint64_t **)&v201);
              goto LABEL_91;
            case 57:
              v201 = &v209;
              v32 = sub_22F2BCF8C((uint64_t *)&v201);
              goto LABEL_91;
            case 58:
              v201 = &v209;
              v32 = sub_22F2BD848((uint64_t **)&v201);
LABEL_91:
              v28 = v32;
              goto LABEL_92;
            default:
              sub_22E769C10(a1, "Unexpected code for type", 0x18uLL);
              v28 = 0;
              goto LABEL_92;
          }
          do
          {
            v133 = *(_QWORD *)(v132 + 48);
            if (v133)
            {
              v28 = v133 & 0xFFFFFFFFFFFFFFF0;
              goto LABEL_92;
            }
            if ((*(_BYTE *)(v132 + 96) & 3) != 0)
              break;
            v132 = sub_22E3CD31C((uint64_t *)(v132 + 96), v132);
          }
          while (v132);
LABEL_77:
          v134 = sub_22E3CD3D4((uint64_t)(v128 + 254), 40, 4);
          v28 = v134 & 0xFFFFFFFFFFFFFFF0;
          *(_QWORD *)v134 = v134;
          *(_QWORD *)(v134 + 8) = v134 & 0xFFFFFFFFFFFFFFF0;
          *(_DWORD *)(v134 + 16) = *(_DWORD *)(v134 + 16) & 0xFFF80000 | 0x61B;
          *(_QWORD *)(v134 + 24) = v130;
          *(_QWORD *)(v134 + 32) = v131;
          if (v130)
          {
            v135 = v134;
            do
            {
              v136 = *(_BYTE *)(v130 + 96);
              *(_QWORD *)(v130 + 48) = v135;
              if ((v136 & 3) != 0)
                break;
              v130 = sub_22E3CD31C((uint64_t *)(v130 + 96), v130);
            }
            while (v130);
          }
LABEL_92:
          v27 = v200;
        }
LABEL_93:
        if ((v208 & 1) != 0)
        {
          v144 = v207;
          v207 = 0;
          if (v144)
            (*(void (**)(void *))(*(_QWORD *)v144 + 8))(v144);
        }
        if (v213 != v215)
          free(v213);
        goto LABEL_98;
      }
      sub_22E769A6C((uint64_t *)a1, &v209);
      v173 = v209;
      if (!v209)
      {
LABEL_418:
        v28 = 0;
        v27 = v200;
LABEL_98:
        (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 168))(a1 + 24);
        *(_DWORD *)(a1 + 10984) = v27;
        sub_22E78CE68(v202);
        *(_QWORD *)(*(_QWORD *)(a1 + 2680) + 8 * v7) = v28;
        if (v28 < 0x10)
          return 0;
        *(_DWORD *)(*(_QWORD *)(v28 & 0xFFFFFFFFFFFFFFF0) + 16) |= 0x40000u;
        v145 = *(_QWORD *)(a1 + 64);
        v8 = *(_QWORD *)(a1 + 2680);
        if (v145)
        {
          if (a2 == -1)
            v146 = 0xFFFFFFFFLL;
          else
            v146 = v4;
          (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v145 + 40))(v145, v146, *(_QWORD *)(v8 + 8 * v7));
          v8 = *(_QWORD *)(a1 + 2680);
        }
        return *(_QWORD *)(v8 + 8 * v7) & 0xFFFFFFFFFFFFFFF8 | (*(_QWORD *)(v8 + 8 * v7) | a2) & 7;
      }
    }
    (*(void (**)(uint64_t *))(*v173 + 8))(v173);
    goto LABEL_418;
  }
  v5 = 0;
  switch((int)v4)
  {
    case 0:
      return v4;
    case 1:
      v5 = v3[2049];
      goto LABEL_373;
    case 2:
      v5 = v3[2050];
      goto LABEL_373;
    case 3:
    case 9:
      v5 = v3[2051];
      goto LABEL_373;
    case 4:
      v5 = v3[2064];
      goto LABEL_373;
    case 5:
      v5 = v3[2065];
      goto LABEL_373;
    case 6:
      v5 = v3[2066];
      goto LABEL_373;
    case 7:
      v5 = v3[2067];
      goto LABEL_373;
    case 8:
      v5 = v3[2068];
      goto LABEL_373;
    case 10:
      v5 = v3[2058];
      goto LABEL_373;
    case 11:
      v5 = v3[2052];
      goto LABEL_373;
    case 12:
      v5 = v3[2059];
      goto LABEL_373;
    case 13:
      v5 = v3[2060];
      goto LABEL_373;
    case 14:
      v5 = v3[2061];
      goto LABEL_373;
    case 15:
      v5 = v3[2062];
      goto LABEL_373;
    case 16:
      v5 = v3[2070];
      goto LABEL_373;
    case 17:
      v5 = v3[2071];
      goto LABEL_373;
    case 18:
      v5 = v3[2072];
      goto LABEL_373;
    case 19:
      v5 = v3[2105];
      goto LABEL_373;
    case 20:
      v5 = v3[2104];
      goto LABEL_373;
    case 21:
      v5 = v3[2069];
      goto LABEL_373;
    case 22:
      v5 = v3[2063];
      goto LABEL_373;
    case 23:
      v5 = v3[2103];
      goto LABEL_373;
    case 24:
      v5 = v3[2056];
      goto LABEL_373;
    case 25:
      v5 = v3[2057];
      goto LABEL_373;
    case 26:
      v5 = v3[2111];
      goto LABEL_373;
    case 27:
      v5 = v3[2112];
      goto LABEL_373;
    case 28:
      v5 = v3[2113];
      goto LABEL_373;
    case 29:
      v5 = v3[2107];
      goto LABEL_373;
    case 30:
      v5 = v3[2106];
      goto LABEL_373;
    case 31:
      v5 = sub_22EF67C08((uint64_t)v3);
      goto LABEL_373;
    case 32:
      v5 = sub_22F36D73C((uint64_t)v3);
      goto LABEL_373;
    case 33:
      v5 = v3[2099];
      goto LABEL_373;
    case 34:
      v5 = v3[2110];
      goto LABEL_373;
    case 35:
      v5 = v3[2109];
      goto LABEL_373;
    case 36:
      v5 = v3[2108];
      goto LABEL_373;
    case 37:
      v5 = v3[2152];
      goto LABEL_373;
    case 38:
      v5 = v3[2153];
      goto LABEL_373;
    case 39:
      v5 = v3[2151];
      goto LABEL_373;
    case 40:
      v5 = v3[2154];
      goto LABEL_373;
    case 41:
      v5 = v3[2155];
      goto LABEL_373;
    case 42:
    case 70:
      v5 = v3[2157];
      goto LABEL_373;
    case 43:
      v5 = v3[2073];
      goto LABEL_373;
    case 44:
      v5 = v3[2101];
      goto LABEL_373;
    case 45:
      v5 = v3[2055];
      goto LABEL_373;
    case 46:
      v5 = v3[2075];
      goto LABEL_373;
    case 47:
      v5 = v3[2076];
      goto LABEL_373;
    case 48:
      v5 = v3[2077];
      goto LABEL_373;
    case 49:
      v5 = v3[2078];
      goto LABEL_373;
    case 50:
      v5 = v3[2079];
      goto LABEL_373;
    case 51:
      v5 = v3[2080];
      goto LABEL_373;
    case 52:
      v5 = v3[2081];
      goto LABEL_373;
    case 53:
      v5 = v3[2082];
      goto LABEL_373;
    case 54:
      v5 = v3[2083];
      goto LABEL_373;
    case 55:
      v5 = v3[2084];
      goto LABEL_373;
    case 56:
      v5 = v3[2085];
      goto LABEL_373;
    case 57:
      v5 = v3[2086];
      goto LABEL_373;
    case 58:
      v5 = v3[2087];
      goto LABEL_373;
    case 59:
      v5 = v3[2088];
      goto LABEL_373;
    case 60:
      v5 = v3[2089];
      goto LABEL_373;
    case 61:
      v5 = v3[2090];
      goto LABEL_373;
    case 62:
      v5 = v3[2091];
      goto LABEL_373;
    case 63:
      v5 = v3[2092];
      goto LABEL_373;
    case 64:
      v5 = v3[2093];
      goto LABEL_373;
    case 65:
      v5 = v3[2094];
      goto LABEL_373;
    case 66:
      v5 = v3[2095];
      goto LABEL_373;
    case 67:
      v5 = v3[2096];
      goto LABEL_373;
    case 68:
      v5 = v3[2097];
      goto LABEL_373;
    case 69:
      v5 = v3[2098];
      goto LABEL_373;
    case 71:
      v5 = v3[2159];
      goto LABEL_373;
    case 72:
      v5 = v3[2156];
      goto LABEL_373;
    case 76:
      v5 = v3[2100];
      goto LABEL_373;
    case 77:
      v5 = v3[2074];
      goto LABEL_373;
    case 78:
      v5 = v3[2115];
      goto LABEL_373;
    case 79:
      v5 = v3[2116];
      goto LABEL_373;
    case 80:
      v5 = v3[2117];
      goto LABEL_373;
    case 81:
      v5 = v3[2118];
      goto LABEL_373;
    case 82:
      v5 = v3[2119];
      goto LABEL_373;
    case 83:
      v5 = v3[2120];
      goto LABEL_373;
    case 84:
      v5 = v3[2121];
      goto LABEL_373;
    case 85:
      v5 = v3[2122];
      goto LABEL_373;
    case 86:
      v5 = v3[2123];
      goto LABEL_373;
    case 87:
      v5 = v3[2124];
      goto LABEL_373;
    case 88:
      v5 = v3[2125];
      goto LABEL_373;
    case 89:
      v5 = v3[2126];
      goto LABEL_373;
    case 90:
      v5 = v3[2127];
      goto LABEL_373;
    case 91:
      v5 = v3[2128];
      goto LABEL_373;
    case 92:
      v5 = v3[2129];
      goto LABEL_373;
    case 93:
      v5 = v3[2130];
      goto LABEL_373;
    case 94:
      v5 = v3[2131];
      goto LABEL_373;
    case 95:
      v5 = v3[2132];
      goto LABEL_373;
    case 96:
      v5 = v3[2133];
      goto LABEL_373;
    case 97:
      v5 = v3[2134];
      goto LABEL_373;
    case 98:
      v5 = v3[2135];
      goto LABEL_373;
    case 99:
      v5 = v3[2136];
      goto LABEL_373;
    case 100:
      v5 = v3[2137];
      goto LABEL_373;
    case 101:
      v5 = v3[2138];
      goto LABEL_373;
    case 102:
      v5 = v3[2139];
      goto LABEL_373;
    case 103:
      v5 = v3[2140];
      goto LABEL_373;
    case 104:
      v5 = v3[2141];
      goto LABEL_373;
    case 105:
      v5 = v3[2142];
      goto LABEL_373;
    case 106:
      v5 = v3[2143];
      goto LABEL_373;
    case 107:
      v5 = v3[2144];
      goto LABEL_373;
    case 108:
      v5 = v3[2145];
      goto LABEL_373;
    case 109:
      v5 = v3[2146];
      goto LABEL_373;
    case 110:
      v5 = v3[2147];
      goto LABEL_373;
    case 111:
      v5 = v3[2148];
      goto LABEL_373;
    case 112:
      v5 = v3[2149];
      goto LABEL_373;
    case 113:
      v5 = v3[2150];
      goto LABEL_373;
    case 114:
      v5 = v3[2160];
      goto LABEL_373;
    case 115:
      v5 = v3[2161];
      goto LABEL_373;
    case 116:
      v5 = v3[2162];
      goto LABEL_373;
    case 117:
      v5 = v3[2163];
      goto LABEL_373;
    case 118:
      v5 = v3[2164];
      goto LABEL_373;
    case 119:
      v5 = v3[2165];
      goto LABEL_373;
    case 120:
      v5 = v3[2166];
      goto LABEL_373;
    case 121:
      v5 = v3[2167];
      goto LABEL_373;
    case 122:
      v5 = v3[2168];
      goto LABEL_373;
    case 123:
      v5 = v3[2169];
      goto LABEL_373;
    case 124:
      v5 = v3[2170];
      goto LABEL_373;
    case 125:
      v5 = v3[2171];
      goto LABEL_373;
    case 126:
      v5 = v3[2172];
      goto LABEL_373;
    case 127:
      v5 = v3[2173];
      goto LABEL_373;
    case 128:
      v5 = v3[2174];
      goto LABEL_373;
    case 129:
      v5 = v3[2175];
      goto LABEL_373;
    case 130:
      v5 = v3[2176];
      goto LABEL_373;
    case 131:
      v5 = v3[2177];
      goto LABEL_373;
    case 132:
      v5 = v3[2178];
      goto LABEL_373;
    case 133:
      v5 = v3[2179];
      goto LABEL_373;
    case 134:
      v5 = v3[2180];
      goto LABEL_373;
    case 135:
      v5 = v3[2181];
      goto LABEL_373;
    case 136:
      v5 = v3[2182];
      goto LABEL_373;
    case 137:
      v5 = v3[2183];
      goto LABEL_373;
    case 138:
      v5 = v3[2184];
      goto LABEL_373;
    case 139:
      v5 = v3[2185];
      goto LABEL_373;
    case 140:
      v5 = v3[2186];
      goto LABEL_373;
    case 141:
      v5 = v3[2187];
      goto LABEL_373;
    case 142:
      v5 = v3[2188];
      goto LABEL_373;
    case 144:
      v5 = v3[2189];
      goto LABEL_373;
    case 145:
      v5 = v3[2190];
      goto LABEL_373;
    case 146:
      v5 = v3[2191];
      goto LABEL_373;
    case 147:
      v5 = v3[2192];
      goto LABEL_373;
    case 148:
      v5 = v3[2193];
      goto LABEL_373;
    case 149:
      v5 = v3[2194];
      goto LABEL_373;
    case 150:
      v5 = v3[2195];
      goto LABEL_373;
    case 152:
      v5 = v3[2196];
      goto LABEL_373;
    case 153:
      v5 = v3[2197];
      goto LABEL_373;
    case 155:
      v5 = v3[2198];
      goto LABEL_373;
    case 156:
      v5 = v3[2199];
      goto LABEL_373;
    case 157:
      v5 = v3[2200];
      goto LABEL_373;
    case 158:
      v5 = v3[2201];
      goto LABEL_373;
    case 159:
      v5 = v3[2202];
      goto LABEL_373;
    case 161:
      v5 = v3[2203];
      goto LABEL_373;
    case 162:
      v5 = v3[2204];
      goto LABEL_373;
    case 163:
      v5 = v3[2205];
      goto LABEL_373;
    case 164:
      v5 = v3[2206];
      goto LABEL_373;
    case 165:
      v5 = v3[2207];
      goto LABEL_373;
    case 166:
      v5 = v3[2208];
      goto LABEL_373;
    case 167:
      v5 = v3[2209];
      goto LABEL_373;
    case 168:
      v5 = v3[2210];
      goto LABEL_373;
    case 169:
      v5 = v3[2211];
      goto LABEL_373;
    case 170:
      v5 = v3[2212];
      goto LABEL_373;
    case 171:
      v5 = v3[2213];
      goto LABEL_373;
    case 172:
      v5 = v3[2214];
      goto LABEL_373;
    case 173:
      v5 = v3[2215];
      goto LABEL_373;
    case 174:
      v5 = v3[2216];
      goto LABEL_373;
    case 175:
      v5 = v3[2217];
      goto LABEL_373;
    case 176:
      v5 = v3[2218];
      goto LABEL_373;
    case 177:
      v5 = v3[2219];
      goto LABEL_373;
    case 178:
      v5 = v3[2220];
      goto LABEL_373;
    case 179:
      v5 = v3[2221];
      goto LABEL_373;
    case 180:
      v5 = v3[2222];
      goto LABEL_373;
    case 181:
      v5 = v3[2223];
      goto LABEL_373;
    case 182:
      v5 = v3[2224];
      goto LABEL_373;
    case 183:
      v5 = v3[2225];
      goto LABEL_373;
    case 184:
      v5 = v3[2226];
      goto LABEL_373;
    case 185:
      v5 = v3[2227];
      goto LABEL_373;
    case 186:
      v5 = v3[2228];
      goto LABEL_373;
    case 187:
      v5 = v3[2229];
      goto LABEL_373;
    case 188:
      v5 = v3[2230];
      goto LABEL_373;
    case 189:
      v5 = v3[2231];
      goto LABEL_373;
    case 190:
      v5 = v3[2232];
      goto LABEL_373;
    case 191:
      v5 = v3[2233];
      goto LABEL_373;
    case 192:
      v5 = v3[2234];
      goto LABEL_373;
    case 193:
      v5 = v3[2235];
      goto LABEL_373;
    case 194:
      v5 = v3[2236];
      goto LABEL_373;
    case 195:
      v5 = v3[2237];
      goto LABEL_373;
    case 196:
      v5 = v3[2238];
      goto LABEL_373;
    case 197:
      v5 = v3[2239];
      goto LABEL_373;
    case 198:
      v5 = v3[2240];
      goto LABEL_373;
    case 199:
      v5 = v3[2241];
      goto LABEL_373;
    case 200:
      v5 = v3[2242];
      goto LABEL_373;
    case 201:
      v5 = v3[2243];
      goto LABEL_373;
    case 202:
      v5 = v3[2244];
      goto LABEL_373;
    case 203:
      v5 = v3[2245];
      goto LABEL_373;
    case 204:
      v5 = v3[2246];
      goto LABEL_373;
    case 205:
      v5 = v3[2247];
      goto LABEL_373;
    case 206:
      v5 = v3[2248];
      goto LABEL_373;
    case 207:
      v5 = v3[2249];
      goto LABEL_373;
    case 208:
      v5 = v3[2250];
      goto LABEL_373;
    case 209:
      v5 = v3[2251];
      goto LABEL_373;
    case 210:
      v5 = v3[2252];
      goto LABEL_373;
    case 211:
      v5 = v3[2253];
      goto LABEL_373;
    case 212:
      v5 = v3[2254];
      goto LABEL_373;
    case 213:
      v5 = v3[2255];
      goto LABEL_373;
    case 214:
      v5 = v3[2256];
      goto LABEL_373;
    case 215:
      v5 = v3[2257];
      goto LABEL_373;
    case 216:
      v5 = v3[2258];
      goto LABEL_373;
    case 217:
      v5 = v3[2259];
      goto LABEL_373;
    case 218:
      v5 = v3[2260];
      goto LABEL_373;
    case 219:
      v5 = v3[2261];
      goto LABEL_373;
    case 220:
      v5 = v3[2262];
      goto LABEL_373;
    case 221:
      v5 = v3[2263];
      goto LABEL_373;
    case 222:
      v5 = v3[2264];
      goto LABEL_373;
    case 223:
      v5 = v3[2265];
      goto LABEL_373;
    case 224:
      v5 = v3[2266];
      goto LABEL_373;
    case 225:
      v5 = v3[2267];
      goto LABEL_373;
    case 226:
      v5 = v3[2268];
      goto LABEL_373;
    case 227:
      v5 = v3[2269];
      goto LABEL_373;
    case 228:
      v5 = v3[2270];
      goto LABEL_373;
    case 229:
      v5 = v3[2271];
      goto LABEL_373;
    case 230:
      v5 = v3[2272];
      goto LABEL_373;
    case 231:
      v5 = v3[2273];
      goto LABEL_373;
    case 232:
      v5 = v3[2274];
      goto LABEL_373;
    case 233:
      v5 = v3[2275];
      goto LABEL_373;
    case 234:
      v5 = v3[2276];
      goto LABEL_373;
    case 235:
      v5 = v3[2277];
      goto LABEL_373;
    case 236:
      v5 = v3[2278];
      goto LABEL_373;
    case 237:
      v5 = v3[2279];
      goto LABEL_373;
    case 238:
      v5 = v3[2280];
      goto LABEL_373;
    case 239:
      v5 = v3[2281];
      goto LABEL_373;
    case 240:
      v5 = v3[2282];
      goto LABEL_373;
    case 241:
      v5 = v3[2283];
      goto LABEL_373;
    case 242:
      v5 = v3[2284];
      goto LABEL_373;
    case 243:
      v5 = v3[2285];
      goto LABEL_373;
    case 244:
      v5 = v3[2286];
      goto LABEL_373;
    case 245:
      v5 = v3[2287];
      goto LABEL_373;
    case 246:
      v5 = v3[2288];
      goto LABEL_373;
    case 247:
      v5 = v3[2289];
      goto LABEL_373;
    case 248:
      v5 = v3[2290];
      goto LABEL_373;
    case 249:
      v5 = v3[2291];
      goto LABEL_373;
    case 250:
      v5 = v3[2292];
      goto LABEL_373;
    case 251:
      v5 = v3[2293];
      goto LABEL_373;
    case 252:
      v5 = v3[2294];
      goto LABEL_373;
    case 253:
      v5 = v3[2295];
      goto LABEL_373;
    case 254:
      v5 = v3[2296];
      goto LABEL_373;
    case 255:
      v5 = v3[2297];
      goto LABEL_373;
    case 256:
      v5 = v3[2298];
      goto LABEL_373;
    case 257:
      v5 = v3[2299];
      goto LABEL_373;
    case 258:
      v5 = v3[2300];
      goto LABEL_373;
    case 259:
      v5 = v3[2301];
      goto LABEL_373;
    case 260:
      v5 = v3[2302];
      goto LABEL_373;
    case 261:
      v5 = v3[2303];
      goto LABEL_373;
    case 262:
      v5 = v3[2304];
      goto LABEL_373;
    case 263:
      v5 = v3[2305];
      goto LABEL_373;
    case 264:
      v5 = v3[2306];
      goto LABEL_373;
    case 265:
      v5 = v3[2307];
      goto LABEL_373;
    case 266:
      v5 = v3[2308];
      goto LABEL_373;
    case 267:
      v5 = v3[2309];
      goto LABEL_373;
    case 268:
      v5 = v3[2310];
      goto LABEL_373;
    case 269:
      v5 = v3[2311];
      goto LABEL_373;
    case 270:
      v5 = v3[2312];
      goto LABEL_373;
    case 271:
      v5 = v3[2313];
      goto LABEL_373;
    case 272:
      v5 = v3[2314];
      goto LABEL_373;
    case 273:
      v5 = v3[2315];
      goto LABEL_373;
    case 274:
      v5 = v3[2316];
      goto LABEL_373;
    case 275:
      v5 = v3[2317];
      goto LABEL_373;
    case 276:
      v5 = v3[2318];
      goto LABEL_373;
    case 277:
      v5 = v3[2319];
      goto LABEL_373;
    case 278:
      v5 = v3[2320];
      goto LABEL_373;
    default:
LABEL_373:
      v4 = v5 & 0xFFFFFFFFFFFFFFF8 | (v5 | a2) & 7;
      break;
  }
  return v4;
}

void sub_22E77F45C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t **v41;
  llvm *v42[2];
  unsigned int v43;
  char v44;
  unsigned int v45;
  uint64_t *v46[4];
  unsigned int v47;
  void *v48;
  uint64_t v49;
  _QWORD v50[34];

  v50[32] = *MEMORY[0x24BDAC8D0];
  v48 = v50;
  v49 = 0x2000000000;
  v2 = *(unsigned int *)(a1 + 152);
  if ((_DWORD)v2)
  {
    v3 = a2;
    v4 = a1;
    v5 = *(uint64_t **)(a1 + 144);
    v6 = &v5[v2];
    v41 = (uint64_t **)(a2 + 96);
    v38 = v6;
    do
    {
      v7 = *v5;
      v47 = 0;
      if (*(_DWORD *)(v7 + 3272))
      {
        v8 = v7 + 3264;
        LODWORD(v49) = 0;
        v46[0] = (uint64_t *)(v7 + 3264);
        v46[1] = (uint64_t *)&v47;
        v46[2] = (uint64_t *)&v48;
        v46[3] = (uint64_t *)v3;
        v9 = *(_DWORD *)(v7 + 4);
        if (v9 == 5 || v9 == 1)
        {
          v47 = 1;
          v11 = **(_DWORD **)(v7 + 3264);
          v42[0] = 0;
          v42[1] = 0;
          v43 = 0;
          v44 = v44 & 0xE0 | (__rbit32(v11) >> 27);
          v45 = v11 >> 5;
          v12 = sub_22E781758(v46, (uint64_t)v42, 1);
          v13 = sub_22E791DB0(v41, *(_DWORD *)(v7 + 176), (_DWORD *)(v7 + 176));
          v14 = *((unsigned int *)v13 + 16);
          if (v14 >= *((unsigned int *)v13 + 17))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v14 = *((unsigned int *)v13 + 16);
          }
          v15 = (uint64_t *)(*((_QWORD *)v13 + 7) + 16 * v14);
          *v15 = v12;
          v15[1] = 0;
          ++*((_DWORD *)v13 + 16);
          llvm::deallocate_buffer(v42[0], (void *)(8 * v43));
        }
        else if (v9)
        {
          v47 = 1;
          v12 = sub_22E781758(v46, *(_QWORD *)(v3 + 128), 0);
        }
        else
        {
          v12 = *(_QWORD *)(v3 + 120);
          if (HIDWORD(v49))
          {
            v16 = 0;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v16 = v49;
          }
          *((_QWORD *)v48 + v16) = v12;
          LODWORD(v49) = v49 + 1;
          v47 = 2 * *(_DWORD *)(*(_QWORD *)v8 + 16) + 3;
        }
        v17 = v47;
        v18 = ++v47;
        v19 = *(_QWORD *)v8;
        v20 = *(_QWORD *)(*(_QWORD *)v8 + 8 * v17);
        if ((_DWORD)v20)
        {
          do
          {
            v21 = v47 + 1;
            v22 = *(_QWORD *)(v7 + 3264);
            LODWORD(v42[0]) = *(_QWORD *)(v22 + 8 * v47) + *(_DWORD *)(v7 + 1564) - 1;
            v47 += 2;
            v23 = *(_QWORD *)(v22 + 8 * v21);
            v24 = sub_22E791DB0(v41, (int)v42[0], v42);
            if (*((unsigned int *)v24 + 16) + (unint64_t)v23 > *((unsigned int *)v24 + 17))
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            for (; (_DWORD)v23; LODWORD(v23) = v23 - 1)
            {
              v25 = v47++;
              v26 = *(unsigned int *)(*(_QWORD *)v8 + 8 * v25);
              v27 = sub_22E781758(v46, v12, 0);
              v28 = *((unsigned int *)v24 + 16);
              if (v28 >= *((unsigned int *)v24 + 17))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v28 = *((unsigned int *)v24 + 16);
              }
              v29 = (uint64_t *)(*((_QWORD *)v24 + 7) + 16 * v28);
              *v29 = v27;
              v29[1] = v26;
              ++*((_DWORD *)v24 + 16);
            }
            LODWORD(v20) = v20 - 1;
          }
          while ((_DWORD)v20);
          v18 = v47;
          v19 = *(_QWORD *)v8;
          v4 = a1;
          v3 = a2;
          v6 = v38;
        }
        v47 = v18 + 1;
        HIDWORD(v30) = *(_QWORD *)(v19 + 8 * v18);
        LODWORD(v30) = HIDWORD(v30);
        v31 = sub_22E77BAB4(v4, v7, v30 >> 1);
        v32 = sub_22E781758(v46, v12, 0);
        v33 = v32;
        v34 = *(_DWORD *)(v7 + 4);
        if (v34 > 5 || ((1 << v34) & 0x23) == 0)
        {
          *(_QWORD *)(v3 + 128) = v32;
          *(_DWORD *)(v3 + 136) = v31;
          LODWORD(v42[0]) = 0;
          v35 = sub_22E791DB0(v41, 0, v42);
          if (*((_DWORD *)v35 + 16))
          {
            **((_QWORD **)v35 + 7) = v33;
          }
          else
          {
            if (*((_DWORD *)v35 + 17))
            {
              v36 = 0;
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v36 = *((unsigned int *)v35 + 16);
            }
            v37 = (uint64_t *)(*((_QWORD *)v35 + 7) + 16 * v36);
            *v37 = v33;
            v37[1] = 0;
            ++*((_DWORD *)v35 + 16);
          }
        }
        *(_DWORD *)(v7 + 3272) = 0;
      }
      ++v5;
    }
    while (v5 != v6);
    if (v48 != v50)
      free(v48);
  }
}

uint64_t sub_22E77F870(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;

  if (a2 <= 0x11)
    return sub_22E779FD8((uint64_t)a1, a2);
  v4 = (a2 - 18);
  v5 = a1[348];
  if (v4 >= (a1[349] - v5) >> 3)
  {
    sub_22E769C10((uint64_t)a1, "declaration ID out-of-range for AST file", 0x28uLL);
    return 0;
  }
  else
  {
    if (!*(_QWORD *)(v5 + 8 * v4))
    {
      sub_22E7B202C((uint64_t)a1, a2);
      v7 = a1[8];
      v5 = a1[348];
      if (v7)
      {
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v7 + 48))(v7, a2, *(_QWORD *)(v5 + 8 * v4));
        v5 = a1[348];
      }
    }
    return *(_QWORD *)(v5 + 8 * v4);
  }
}

void sub_22E77F92C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  char v10;
  BOOL v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  BOOL v20;
  void *v21;
  size_t v22;
  size_t v23;
  const std::error_category *v24;
  const llvm::MemoryBuffer *v25;
  std::string *v26;
  size_t size;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  BOOL v32;
  void *v33;
  size_t v34;
  size_t v35;
  const void *v36;
  const std::error_category *cat;
  void *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  BOOL v49;
  void *v50;
  size_t v51;
  size_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  BOOL v57;
  void *v58;
  size_t v59;
  size_t v60;
  const llvm::MemoryBuffer *v61;
  _BYTE v62[39];
  char *v63;
  char *v64;
  char *v65;
  char v66;
  std::error_code v67;
  uint64_t v68;
  __int16 v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  __int16 v73;
  std::string v74;
  uint64_t v75;
  uint64_t v76;
  void *__p[3];
  char *v78[2];
  _QWORD v79[33];
  const llvm::MemoryBuffer *v80;
  const std::error_category *v81;
  char v82;
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  v10 = *(_BYTE *)(a1 + 23);
  v11 = v10 < 0;
  if (v10 >= 0)
    v12 = (_BYTE *)a1;
  else
    v12 = *(_BYTE **)a1;
  v13 = v10 & 0x7F;
  if (v11)
    v14 = *(_QWORD *)(a1 + 8);
  else
    v14 = v13;
  sub_22F1D1B6C(a2, v12, v14);
  if ((v82 & 1) != 0)
  {
    *(_QWORD *)(a4 + 312) = 0x39000000000;
    if (*(char *)(a4 + 311) < 0)
    {
      **(_BYTE **)(a4 + 288) = 0;
      *(_QWORD *)(a4 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(a4 + 288) = 0;
      *(_BYTE *)(a4 + 311) = 0;
    }
    v70 = (void *)(a4 + 320);
    v71 = 0;
    v72 = a4;
    v73 = 1;
    *(_BYTE *)(a4 + 320) = 0;
    *(_DWORD *)(a4 + 664) = 0;
    v16 = *(unsigned int *)(a4 + 776);
    if ((_DWORD)v16)
    {
      v17 = *(_QWORD *)(a4 + 768);
      v18 = 56 * v16;
      do
      {
        if (*(char *)(v17 + v18 - 9) < 0)
          operator delete(*(void **)(v17 + v18 - 32));
        v18 -= 56;
      }
      while (v18);
    }
    *(_DWORD *)(a4 + 776) = 0;
    v19 = *(_BYTE *)(a1 + 23);
    v20 = v19 < 0;
    if (v19 >= 0)
      v21 = (void *)a1;
    else
      v21 = *(void **)a1;
    v22 = v19 & 0x7F;
    if (v20)
      v23 = *(_QWORD *)(a1 + 8);
    else
      v23 = v22;
    sub_22E3B89A8((unsigned __int8 **)&v70, v21, v23);
    if ((v82 & 1) != 0)
    {
      v25 = v80;
      v24 = v81;
    }
    else
    {
      v24 = std::system_category();
      v25 = 0;
    }
    *(_QWORD *)&v67.__val_ = v25;
    v67.__cat_ = v24;
    std::error_code::message(&v74, &v67);
    if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = &v74;
    else
      v26 = (std::string *)v74.__r_.__value_.__r.__words[0];
    if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&v74.__r_.__value_.__s + 23) & 0x7F;
    else
      size = v74.__r_.__value_.__l.__size_;
    sub_22E3B89A8((unsigned __int8 **)&v70, v26, size);
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v74.__r_.__value_.__l.__data_);
    sub_22E3BB0B8((uint64_t)&v70);
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    goto LABEL_119;
  }
  llvm::MemoryBufferRef::MemoryBufferRef((llvm::MemoryBufferRef *)v62, v80);
  v74.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a3 + 24))(a3, v62);
  *(_OWORD *)&v74.__r_.__value_.__r.__words[1] = v15;
  v75 = 0;
  v76 = 0x200000000;
  memset(__p, 0, sizeof(__p));
  v78[0] = (char *)v79;
  v78[1] = (char *)0x800000000;
  v79[32] = 0;
  sub_22E77C120(&v67, (uint64_t)&v74);
  if (*(_QWORD *)&v67.__val_)
  {
    *(_QWORD *)(a4 + 312) = 0x38C00000000;
    if (*(char *)(a4 + 311) < 0)
    {
      **(_BYTE **)(a4 + 288) = 0;
      *(_QWORD *)(a4 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(a4 + 288) = 0;
      *(_BYTE *)(a4 + 311) = 0;
    }
    v70 = (void *)(a4 + 320);
    v71 = 0;
    v72 = a4;
    v73 = 1;
    *(_BYTE *)(a4 + 320) = 0;
    *(_DWORD *)(a4 + 664) = 0;
    v28 = *(unsigned int *)(a4 + 776);
    if ((_DWORD)v28)
    {
      v29 = *(_QWORD *)(a4 + 768);
      v30 = 56 * v28;
      do
      {
        if (*(char *)(v29 + v30 - 9) < 0)
          operator delete(*(void **)(v29 + v30 - 32));
        v30 -= 56;
      }
      while (v30);
    }
    *(_DWORD *)(a4 + 776) = 0;
    v31 = *(_BYTE *)(a1 + 23);
    v32 = v31 < 0;
    if (v31 >= 0)
      v33 = (void *)a1;
    else
      v33 = *(void **)a1;
    v34 = v31 & 0x7F;
    if (v32)
      v35 = *(_QWORD *)(a1 + 8);
    else
      v35 = v34;
    sub_22E3B89A8((unsigned __int8 **)&v70, v33, v35);
    sub_22F1CB318((unsigned __int8 **)&v70, (char **)&v67);
    sub_22E3BB0B8((uint64_t)&v70);
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    if (*(_QWORD *)&v67.__val_)
      (*(void (**)(_QWORD))(**(_QWORD **)&v67.__val_ + 8))(*(_QWORD *)&v67.__val_);
    goto LABEL_117;
  }
  if (sub_22E77B8A4((llvm::BitstreamCursor *)&v74, 15))
  {
    *(_QWORD *)(a4 + 312) = 0x38F00000000;
    if (*(char *)(a4 + 311) < 0)
    {
      **(_BYTE **)(a4 + 288) = 0;
      *(_QWORD *)(a4 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(a4 + 288) = 0;
      *(_BYTE *)(a4 + 311) = 0;
    }
    v70 = (void *)(a4 + 320);
    v71 = 0;
    v72 = a4;
    v73 = 1;
    *(_BYTE *)(a4 + 320) = 0;
    *(_DWORD *)(a4 + 664) = 0;
    v45 = *(unsigned int *)(a4 + 776);
    if ((_DWORD)v45)
    {
      v46 = *(_QWORD *)(a4 + 768);
      v47 = 56 * v45;
      do
      {
        if (*(char *)(v46 + v47 - 9) < 0)
          operator delete(*(void **)(v46 + v47 - 32));
        v47 -= 56;
      }
      while (v47);
    }
    *(_DWORD *)(a4 + 776) = 0;
    v48 = *(_BYTE *)(a1 + 23);
    v49 = v48 < 0;
    if (v48 >= 0)
      v50 = (void *)a1;
    else
      v50 = *(void **)a1;
    v51 = v48 & 0x7F;
    if (v49)
      v52 = *(_QWORD *)(a1 + 8);
    else
      v52 = v51;
    sub_22E3B89A8((unsigned __int8 **)&v70, v50, v52);
    sub_22E3BB0B8((uint64_t)&v70);
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    goto LABEL_117;
  }
  v70 = &v72;
  v71 = 0x4000000000;
  while (1)
  {
    sub_22E748020((uint64_t)&v74, 0, (uint64_t)&v67);
    if (((uint64_t)v67.__cat_ & 1) != 0)
      break;
    if (v67.__val_ == 2)
    {
      sub_22E746760((uint64_t)&v74, (uint64_t *)&v65);
      v43 = v65;
      if (((uint64_t)v67.__cat_ & 1) != 0)
      {
        v44 = *(_QWORD *)&v67.__val_;
        *(_QWORD *)&v67.__val_ = 0;
        if (v44)
          (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
      }
      if (v43)
        goto LABEL_125;
    }
    else
    {
      if (v67.__val_ != 3)
      {
        if (v67.__val_ != 1)
        {
          *(_QWORD *)(a4 + 312) = 0x38F00000000;
          if (*(char *)(a4 + 311) < 0)
          {
            **(_BYTE **)(a4 + 288) = 0;
            *(_QWORD *)(a4 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(a4 + 288) = 0;
            *(_BYTE *)(a4 + 311) = 0;
          }
          *(_QWORD *)&v67.__val_ = a4 + 320;
          v67.__cat_ = 0;
          v68 = a4;
          v69 = 1;
          *(_BYTE *)(a4 + 320) = 0;
          *(_DWORD *)(a4 + 664) = 0;
          v53 = *(unsigned int *)(a4 + 776);
          if ((_DWORD)v53)
          {
            v54 = *(_QWORD *)(a4 + 768);
            v55 = 56 * v53;
            do
            {
              if (*(char *)(v54 + v55 - 9) < 0)
                operator delete(*(void **)(v54 + v55 - 32));
              v55 -= 56;
            }
            while (v55);
          }
          *(_DWORD *)(a4 + 776) = 0;
          v56 = *(_BYTE *)(a1 + 23);
          v57 = v56 < 0;
          if (v56 >= 0)
            v58 = (void *)a1;
          else
            v58 = *(void **)a1;
          v59 = v56 & 0x7F;
          if (v57)
            v60 = *(_QWORD *)(a1 + 8);
          else
            v60 = v59;
          sub_22E3B89A8((unsigned __int8 **)&v67, v58, v60);
          sub_22E3BB0B8((uint64_t)&v67);
        }
        goto LABEL_114;
      }
      LODWORD(v71) = 0;
      *(_QWORD *)&v67.__val_ = 0;
      v67.__cat_ = 0;
      llvm::BitstreamCursor::readRecord();
      if ((v66 & 1) != 0)
      {
        v39 = v65;
        v65 = 0;
        v63 = v39;
        sub_22E6C5940(&v63, &v64);
        if (v63)
          (*(void (**)(char *))(*(_QWORD *)v63 + 8))(v63);
        LOBYTE(v36) = 0;
LABEL_68:
        *a5 = 0;
        a5[1] = 0;
        a5[2] = 0;
        goto LABEL_75;
      }
      if ((_DWORD)v65 != 3)
      {
        LOBYTE(v36) = 1;
        goto LABEL_75;
      }
      v36 = *(const void **)&v67.__val_;
      if (!*(_QWORD *)&v67.__val_)
        goto LABEL_68;
      cat = v67.__cat_;
      if (v67.__cat_ >= (const std::error_category *)0x7FFFFFFFFFFFFFF8)
        abort();
      if (v67.__cat_ >= (const std::error_category *)0x17)
      {
        v40 = ((unint64_t)v67.__cat_ & 0xFFFFFFFFFFFFFFF8) + 8;
        if (((uint64_t)v67.__cat_ | 7) != 0x17)
          v40 = (uint64_t)v67.__cat_ | 7;
        v41 = v40 + 1;
        v38 = operator new(v40 + 1);
        a5[1] = cat;
        a5[2] = v41 | 0x8000000000000000;
        *a5 = v38;
      }
      else
      {
        *((_BYTE *)a5 + 23) = v67.__cat_;
        v38 = a5;
        if (!cat)
          goto LABEL_74;
      }
      memmove(v38, v36, (size_t)cat);
LABEL_74:
      LOBYTE(v36) = 0;
      *((_BYTE *)&cat->__vftable + (_QWORD)v38) = 0;
LABEL_75:
      if ((v66 & 1) != 0)
      {
        v42 = v65;
        v65 = 0;
        if (v42)
          (*(void (**)(char *))(*(_QWORD *)v42 + 8))(v42);
      }
      if ((v36 & 1) == 0)
        goto LABEL_115;
    }
  }
  v43 = *(char **)&v67.__val_;
LABEL_125:
  v65 = v43;
  sub_22E6C5940(&v65, (char **)&v67);
  if (v65)
    (*(void (**)(char *))(*(_QWORD *)v65 + 8))(v65);
LABEL_114:
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
LABEL_115:
  if (v70 != &v72)
    free(v70);
LABEL_117:
  sub_22E746F74(v78);
  if (__p[0])
  {
    sub_22E3B485C((uint64_t *)__p);
    operator delete(__p[0]);
  }
LABEL_119:
  if ((v82 & 1) == 0)
  {
    v61 = v80;
    v80 = 0;
    if (v61)
      (*(void (**)(const llvm::MemoryBuffer *))(*(_QWORD *)v61 + 8))(v61);
  }
}

uint64_t sub_22E77FFEC(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  int Key;
  llvm::MemoryBuffer *v17;
  llvm::MemoryBuffer *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v25;
  char *v26;
  void *v27;
  char *v28;
  int v29;
  int v30;
  char *v31;
  int v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  size_t v40;
  uint64_t v41;
  void *v42;
  char **v43;
  char v44;
  size_t v45;
  size_t v46;
  _QWORD **v47;
  size_t v48;
  char *v49;
  char v50;
  uint64_t v51;
  size_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t p_p;
  uint64_t v67;
  _QWORD **p_dst;
  size_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD **v73;
  size_t v74;
  uint64_t v75;
  uint64_t v76;
  size_t v77;
  size_t v78;
  uint64_t v79;
  _BOOL4 v80;
  char *v81;
  int v82;
  char v83;
  double v84;
  char v85;
  char v86;
  void *v87;
  void *v88;
  uint64_t v89;
  unsigned int v90;
  unsigned int v91;
  unint64_t v92;
  int v93;
  int v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  unint64_t v99;
  char *__dst;
  size_t v101;
  int64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  void *__src;
  size_t __len;
  void *v108[2];
  uint64_t v109;
  _BYTE v110[39];
  char *v111;
  void *v112;
  uint64_t v113;
  char v114;
  char *v115;
  char v116;
  __int128 __p;
  __int128 v118;
  uint64_t v119;
  void *v120[3];
  char *v121[2];
  _QWORD v122[56];
  uint64_t v123;
  char v124;
  void *v125;
  size_t v126;
  char *v127;
  unint64_t v128;
  llvm::MemoryBuffer *v129;
  uint64_t v130;
  _BYTE v131[512];
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  void *v135[3];
  char *v136[2];
  _QWORD v137[34];
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  void *v141;
  char *v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;

  v148 = *MEMORY[0x24BDAC8D0];
  Key = llvm::StringMapImpl::FindKey();
  if (Key == -1
    || Key == (unint64_t)*(unsigned int *)(a4 + 16)
    || (v18 = *(llvm::MemoryBuffer **)(*(_QWORD *)(*(_QWORD *)(a4 + 8) + 8 * Key) + 8)) == 0)
  {
    sub_22F1D1B6C(a3, a1, a2);
    if ((v131[0] & 1) != 0)
      return 1;
    v17 = v129;
    v18 = v129;
  }
  else
  {
    v17 = 0;
  }
  llvm::MemoryBufferRef::MemoryBufferRef((llvm::MemoryBufferRef *)v110, v18);
  v19 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a5 + 24))(a5, v110);
  v21 = v20;
  *(_QWORD *)&v138 = v19;
  *((_QWORD *)&v138 + 1) = v20;
  v139 = 0uLL;
  v140 = 0x200000000;
  v141 = 0;
  v143 = 0;
  v142 = 0;
  v144 = (char *)&v146;
  v145 = 0x800000000;
  v147 = 0;
  sub_22E77C120(&v132, (uint64_t)&v138);
  v22 = v132;
  if ((_QWORD)v132)
  {
    *(_QWORD *)&v132 = 0;
    *(_QWORD *)&__p = v22;
    sub_22E6C5940((char **)&__p, (char **)&v129);
    if ((_QWORD)__p)
      (*(void (**)(_QWORD))(*(_QWORD *)__p + 8))(__p);
    if ((_QWORD)v132)
      (*(void (**)(_QWORD))(*(_QWORD *)v132 + 8))(v132);
    goto LABEL_11;
  }
  if (sub_22E77B8A4((llvm::BitstreamCursor *)&v138, 15))
  {
LABEL_11:
    v23 = 1;
    goto LABEL_12;
  }
  v96 = v21;
  v97 = v19;
  v98 = a8;
  v94 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a7 + 112))(a7);
  v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a7 + 120))(a7);
  v93 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a7 + 136))(a7);
  v133 = 0u;
  v132 = 0u;
  v134 = 0x200000000;
  memset(v135, 0, sizeof(v135));
  v136[0] = (char *)v137;
  v136[1] = (char *)0x800000000;
  v137[32] = 0;
  v129 = (llvm::MemoryBuffer *)v131;
  v130 = 0x4000000000;
  v108[0] = 0;
  v108[1] = 0;
  v109 = 0;
  while (1)
  {
    sub_22E748020((uint64_t)&v138, 0, (uint64_t)&v127);
    if ((v128 & 1) != 0)
    {
      v28 = v127;
      v127 = 0;
      __dst = v28;
      sub_22E6C5940(&__dst, (char **)&__p);
      v27 = __dst;
      if (!__dst)
        goto LABEL_30;
      goto LABEL_29;
    }
    switch((_DWORD)v127)
    {
      case 0:
        goto LABEL_30;
      case 1:
        v30 = 3;
        v29 = 1;
        goto LABEL_31;
      case 2:
        if (HIDWORD(v127) == 17)
        {
          __p = 0uLL;
          *(_QWORD *)&v118 = 0;
          v32 = sub_22E76E528((llvm::BitstreamCursor *)&v138, 10, 0, a7, (uint64_t)&__p);
          if (SBYTE7(v118) < 0)
            operator delete((void *)__p);
          if (!v32)
          {
LABEL_175:
            v29 = 0;
            v30 = 2;
            goto LABEL_31;
          }
        }
        else
        {
          if (HIDWORD(v127) != 16)
          {
            sub_22E746760((uint64_t)&v138, (uint64_t *)&v112);
            v26 = (char *)v112;
            if (!v112)
              goto LABEL_175;
LABEL_24:
            v112 = 0;
            __dst = v26;
            sub_22E6C5940(&__dst, (char **)&__p);
            if (__dst)
              (*(void (**)(char *))(*(_QWORD *)__dst + 8))(__dst);
            v27 = v112;
            if (!v112)
            {
LABEL_30:
              v29 = 0;
              v30 = 1;
              goto LABEL_31;
            }
LABEL_29:
            (*(void (**)(void *))(*(_QWORD *)v27 + 8))(v27);
            goto LABEL_30;
          }
          sub_22F2B0BD8((uint64_t)&v132, &v138);
          sub_22E746760((uint64_t)&v138, (uint64_t *)&v112);
          v26 = (char *)v112;
          if (v112)
            goto LABEL_24;
          if (!v94)
            goto LABEL_175;
          sub_22E76B97C(&__p, (llvm::BitstreamCursor *)&v132, 16, 0);
          if (!(_QWORD)__p)
            goto LABEL_175;
          (*(void (**)(_QWORD))(*(_QWORD *)__p + 8))(__p);
        }
        v29 = 0;
        v30 = 1;
        goto LABEL_31;
    }
    LODWORD(v130) = 0;
    v126 = 0;
    v125 = 0;
    llvm::BitstreamCursor::readRecord();
    if ((v124 & 1) == 0)
    {
      switch((int)v123)
      {
        case 1:
          if (*(_QWORD *)v129 == 25
            && ((*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)a7 + 16))(a7, v125, v126) & 1) == 0)
          {
            goto LABEL_166;
          }
          v30 = 1;
          goto LABEL_167;
        case 2:
          if (v93)
          {
            v56 = v130;
            if ((_DWORD)v130)
            {
              v57 = 0;
              do
              {
                v58 = v57 + 25;
                v59 = *((_QWORD *)v129 + (v57 + 24));
                sub_22E793964(&__p, (uint64_t *)v129 + v58, (uint64_t *)v129 + v58 + v59, v59);
                v60 = v58 + v59;
                v61 = v58 + v59 + 1;
                v62 = *((_QWORD *)v129 + v60);
                sub_22E793964(&__dst, (uint64_t *)v129 + v61, (uint64_t *)v129 + v61 + v62, v62);
                LODWORD(v62) = v61 + v62;
                sub_22E76E414((uint64_t)&__dst);
                v63 = v62 + 1;
                v64 = *((_QWORD *)v129 + v62);
                sub_22E793964(&v112, (uint64_t *)v129 + v63, (uint64_t *)v129 + v63 + v64, v64);
                if (v114 >= 0)
                  v65 = v114 & 0x7F;
                else
                  v65 = v113;
                if (v65)
                {
                  if ((SBYTE7(v118) & 0x80u) == 0)
                    p_p = (uint64_t)&__p;
                  else
                    p_p = __p;
                  if ((SBYTE7(v118) & 0x80u) == 0)
                    v67 = BYTE7(v118) & 0x7F;
                  else
                    v67 = *((_QWORD *)&__p + 1);
                  if (v102 >= 0)
                    p_dst = (_QWORD **)&__dst;
                  else
                    p_dst = (_QWORD **)__dst;
                  if (v102 >= 0)
                    v69 = HIBYTE(v102) & 0x7F;
                  else
                    v69 = v101;
                  if (v114 >= 0)
                    v70 = &v112;
                  else
                    v70 = v112;
                  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD **, size_t, void *))(*(_QWORD *)a7 + 152))(a7, p_p, v67, p_dst, v69, v70);
                }
                if ((SBYTE7(v118) & 0x80u) == 0)
                  v71 = (uint64_t)&__p;
                else
                  v71 = __p;
                if ((SBYTE7(v118) & 0x80u) == 0)
                  v72 = BYTE7(v118) & 0x7F;
                else
                  v72 = *((_QWORD *)&__p + 1);
                if (v102 >= 0)
                  v73 = (_QWORD **)&__dst;
                else
                  v73 = (_QWORD **)__dst;
                if (v102 >= 0)
                  v74 = HIBYTE(v102) & 0x7F;
                else
                  v74 = v101;
                (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD **, size_t))(*(_QWORD *)a7 + 144))(a7, v71, v72, v73, v74);
                if (v114 < 0)
                  operator delete(v112);
                if (SHIBYTE(v102) < 0)
                  operator delete(__dst);
                if (SBYTE7(v118) < 0)
                  operator delete((void *)__p);
                v57 = v63 + v64;
              }
              while (v63 + v64 < v56);
            }
          }
          goto LABEL_166;
        case 5:
          if (!v94)
            goto LABEL_166;
          v33 = *(unsigned int *)v129;
          if (!*(_DWORD *)v129)
            goto LABEL_166;
          v34 = (uint64_t *)v125;
          v92 = *((unsigned int *)v129 + 2);
          v35 = 1;
          v89 = *(unsigned int *)v129;
          v90 = a6;
          v91 = v25;
          break;
        case 6:
          (*(void (**)(uint64_t, void *, size_t))(*(_QWORD *)a7 + 24))(a7, v125, v126);
          goto LABEL_166;
        case 7:
          sub_22E793964(&__p, (uint64_t *)v129 + 1, (uint64_t *)v129 + *(unsigned int *)v129 + 1, *(unsigned int *)v129);
          sub_22E76E414((uint64_t)&__p);
          if ((SBYTE7(v118) & 0x80u) == 0)
            v75 = (uint64_t)&__p;
          else
            v75 = __p;
          if ((SBYTE7(v118) & 0x80u) == 0)
            v76 = BYTE7(v118) & 0x7F;
          else
            v76 = *((_QWORD *)&__p + 1);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a7 + 32))(a7, v75, v76);
          if (SBYTE7(v118) < 0)
            operator delete((void *)__p);
          goto LABEL_166;
        case 8:
          v51 = v25;
          v52 = v126;
          if (v126 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_237;
          v53 = a6;
          v54 = v125;
          if (v126 >= 0x17)
          {
            v77 = (v126 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v126 | 7) != 0x17)
              v77 = v126 | 7;
            v78 = v77 + 1;
            v55 = operator new(v77 + 1);
            *((_QWORD *)&__p + 1) = v52;
            *(_QWORD *)&v118 = v78 | 0x8000000000000000;
            *(_QWORD *)&__p = v55;
          }
          else
          {
            BYTE7(v118) = v126;
            v55 = &__p;
            if (!v126)
              goto LABEL_163;
          }
          memmove(v55, v54, v52);
LABEL_163:
          *((_BYTE *)v55 + v52) = 0;
          if (SHIBYTE(v109) < 0)
            operator delete(v108[0]);
          *(_OWORD *)v108 = __p;
          v109 = v118;
          a6 = v53;
          v25 = v51;
          goto LABEL_166;
        default:
          goto LABEL_166;
      }
      while (1)
      {
        if (v35 - 1 < v92)
          v36 = 1;
        else
          v36 = v25;
        if (v36 != 1)
        {
LABEL_166:
          v30 = 0;
          goto LABEL_167;
        }
        v112 = &v132;
        v113 = 8 * v133 - v134;
        v37 = *v34;
        *(_QWORD *)&v133 = ((unint64_t)*v34 >> 3) & 0x1FFFFFFFFFFFFFF8;
        LODWORD(v134) = 0;
        if ((v37 & 0x3F) != 0)
        {
          sub_22E745EC8((uint64_t)&v132, v37 & 0x3F, (uint64_t)&__p);
          if ((BYTE8(__p) & 1) != 0)
          {
            if ((_QWORD)__p)
            {
              __dst = (char *)__p;
              sub_22E6C5940(&__dst, (char **)&__p);
              if (__dst)
                (*(void (**)(char *))(*(_QWORD *)__dst + 8))(__dst);
              v33 = v89;
            }
          }
        }
        sub_22E745EC8((uint64_t)&v132, HIDWORD(v134), (uint64_t)&__p);
        v95 = BYTE8(__p);
        if ((BYTE8(__p) & 1) != 0)
        {
          __dst = (char *)__p;
          sub_22E6C5940(&__dst, (char **)&__p);
          if (__dst)
            (*(void (**)(char *))(*(_QWORD *)__dst + 8))(__dst);
          v38 = 0;
          v33 = v89;
        }
        else
        {
          v38 = __p | v99 & 0xFFFFFFFF00000000;
        }
        *(_QWORD *)&__p = &v118;
        *((_QWORD *)&__p + 1) = 0x4000000000;
        __src = 0;
        __len = 0;
        v99 = v38;
        llvm::BitstreamCursor::readRecord();
        if ((v116 & 1) != 0)
        {
          v39 = v115;
          v115 = 0;
          v111 = v39;
          sub_22E6C5940(&v111, &__dst);
          if (v111)
            (*(void (**)(char *))(*(_QWORD *)v111 + 8))(v111);
        }
        if ((_DWORD)v115 == 1)
          break;
        v44 = 0;
LABEL_82:
        if ((v116 & 1) != 0)
        {
          v49 = v115;
          v115 = 0;
          if (v49)
            (*(void (**)(char *))(*(_QWORD *)v49 + 8))(v49);
        }
        if ((__int128 *)__p != &v118)
          free((void *)__p);
        if ((v95 & 1) != 0)
        {
          if (v99)
            (*(void (**)(unint64_t))(*(_QWORD *)v99 + 8))(v99);
          v99 = 0;
        }
        sub_22E78CE68((uint64_t *)&v112);
        if (v33 == v35)
          v50 = 0;
        else
          v50 = v44;
        ++v35;
        ++v34;
        v25 = v91;
        if ((v50 & 1) == 0)
          goto LABEL_166;
      }
      v40 = __len;
      if (__len > 0x7FFFFFFFFFFFFFF7)
LABEL_237:
        abort();
      v41 = *(_QWORD *)(__p + 24);
      v42 = __src;
      if (__len >= 0x17)
      {
        v45 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((__len | 7) != 0x17)
          v45 = __len | 7;
        v46 = v45 + 1;
        v43 = (char **)operator new(v45 + 1);
        v101 = v40;
        v102 = v46 | 0x8000000000000000;
        __dst = (char *)v43;
      }
      else
      {
        HIBYTE(v102) = __len;
        v43 = &__dst;
        if (!__len)
          goto LABEL_73;
      }
      memmove(v43, v42, v40);
LABEL_73:
      *((_BYTE *)v43 + v40) = 0;
      sub_22E76E414((uint64_t)&__dst);
      if (v102 >= 0)
        v47 = (_QWORD **)&__dst;
      else
        v47 = (_QWORD **)__dst;
      if (v102 >= 0)
        v48 = HIBYTE(v102) & 0x7F;
      else
        v48 = v101;
      v44 = (*(uint64_t (**)(uint64_t, _QWORD **, size_t, BOOL, BOOL, _QWORD))(*(_QWORD *)a7 + 128))(a7, v47, v48, v35 - 1 >= v92, v41 != 0, 0);
      if (SHIBYTE(v102) < 0)
        operator delete(__dst);
      a6 = v90;
      v33 = v89;
      goto LABEL_82;
    }
    v30 = 1;
LABEL_167:
    if ((v124 & 1) != 0)
    {
      v79 = v123;
      v123 = 0;
      if (v79)
        (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
    }
    v29 = 0;
LABEL_31:
    if ((v128 & 1) != 0)
    {
      v31 = v127;
      v127 = 0;
      if (v31)
        (*(void (**)(char *))(*(_QWORD *)v31 + 8))(v31);
    }
    if (v30 && v30 != 2)
      break;
    if (v29)
      goto LABEL_180;
  }
  if (v30 != 3)
    goto LABEL_227;
LABEL_180:
  if (!(_DWORD)a6)
    goto LABEL_226;
  __p = v138;
  v118 = v139;
  v119 = v140;
  memset(v120, 0, sizeof(v120));
  sub_22E6C95B8(v120, v141, v142, (v142 - (_BYTE *)v141) >> 4);
  v121[0] = (char *)v122;
  v121[1] = (char *)0x800000000;
  if ((_DWORD)v145)
    sub_22E747DF0((uint64_t)v121, (uint64_t)&v144);
  v122[32] = v147;
  while (2)
  {
    v80 = sub_22E77B8A4((llvm::BitstreamCursor *)&v138, 18);
    if (v80)
    {
      sub_22F2B0BD8((uint64_t)&v138, &__p);
      break;
    }
    while (2)
    {
      sub_22E748020((uint64_t)&v138, 0, (uint64_t)&v112);
      if ((v113 & 1) != 0 || !(_DWORD)v112)
      {
        v83 = 0;
        v82 = 1;
      }
      else if ((_DWORD)v112 == 1)
      {
        v82 = 15;
        v83 = 1;
      }
      else
      {
        if ((_DWORD)v112 == 2)
        {
          sub_22E746760((uint64_t)&v138, (uint64_t *)&v125);
          v81 = (char *)v125;
          if (v125)
          {
            v125 = 0;
            v127 = v81;
            sub_22E6C5940(&v127, &__dst);
            if (v127)
              (*(void (**)(char *))(*(_QWORD *)v127 + 8))(v127);
            if (v125)
              (*(void (**)(void *))(*(_QWORD *)v125 + 8))(v125);
            v82 = 1;
          }
          else
          {
            v82 = 15;
          }
          goto LABEL_212;
        }
        LODWORD(v130) = 0;
        v128 = 0;
        v127 = 0;
        llvm::BitstreamCursor::readRecord();
        if ((v126 & 1) != 0)
        {
          v82 = 1;
        }
        else
        {
          if ((_DWORD)v125 != 1)
            goto LABEL_208;
          __dst = 0;
          v101 = 0;
          v102 = 0;
          v104 = 0;
          v105 = 0;
          v103 = 0;
          *(int32x2_t *)&v84 = sub_22E77D7F4((int64x2_t *)v129, v130, v127, v128, (int32x2_t *)&__dst);
          v86 = v85;
          if ((v85 & 1) != 0)
          {
            v82 = 1;
          }
          else
          {
            (*(void (**)(uint64_t, char **, double))(*(_QWORD *)a7 + 160))(a7, &__dst, v84);
            v82 = 18;
          }
          if (SHIBYTE(v105) < 0)
            operator delete(v103);
          if (SHIBYTE(v102) < 0)
          {
            operator delete(__dst);
            if ((v86 & 1) == 0)
LABEL_208:
              v82 = 0;
          }
          else if ((v86 & 1) == 0)
          {
            goto LABEL_208;
          }
        }
        if ((v126 & 1) != 0)
        {
          v87 = v125;
          v125 = 0;
          if (v87)
            (*(void (**)(void *))(*(_QWORD *)v87 + 8))(v87);
        }
LABEL_212:
        v83 = 0;
      }
      if ((v113 & 1) != 0)
      {
        v88 = v112;
        v112 = 0;
        if (v88)
          (*(void (**)(void *))(*(_QWORD *)v88 + 8))(v88);
      }
      if (v82 && v82 != 15)
        goto LABEL_222;
      if ((v83 & 1) == 0)
        continue;
      break;
    }
    v82 = 0;
LABEL_222:
    if (!v82)
      continue;
    break;
  }
  sub_22E746F74(v121);
  if (v120[0])
  {
    sub_22E3B485C((uint64_t *)v120);
    operator delete(v120[0]);
  }
  if (v80)
  {
LABEL_226:
    v23 = sub_22E77C48C(0, v97, v96, 10, 0, a7, v98) != 0;
    goto LABEL_228;
  }
LABEL_227:
  v23 = 1;
LABEL_228:
  if (SHIBYTE(v109) < 0)
    operator delete(v108[0]);
  if (v129 != (llvm::MemoryBuffer *)v131)
    free(v129);
  sub_22E746F74(v136);
  if (v135[0])
  {
    sub_22E3B485C((uint64_t *)v135);
    operator delete(v135[0]);
  }
LABEL_12:
  sub_22E746F74(&v144);
  if (v141)
  {
    sub_22E3B485C((uint64_t *)&v141);
    operator delete(v141);
    if (v17)
LABEL_14:
      (*(void (**)(llvm::MemoryBuffer *))(*(_QWORD *)v17 + 8))(v17);
  }
  else if (v17)
  {
    goto LABEL_14;
  }
  return v23;
}

uint64_t sub_22E780E7C(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__src, size_t __len)
{
  void *v15;
  size_t v16;
  size_t v17;
  int v18;
  _QWORD v20[4];
  void *__p[2];
  unint64_t v22;
  uint64_t v23;

  v20[0] = off_24FA720A8;
  v20[1] = a6;
  v20[2] = a7;
  v20[3] = a8;
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v16 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v16 = __len | 7;
    v17 = v16 + 1;
    v15 = operator new(v16 + 1);
    __p[1] = (void *)__len;
    v22 = v17 | 0x8000000000000000;
    __p[0] = v15;
    goto LABEL_8;
  }
  v15 = __p;
  HIBYTE(v22) = __len;
  if (__len)
LABEL_8:
    memmove(v15, __src, __len);
  *((_BYTE *)v15 + __len) = 0;
  v23 = a3;
  v18 = sub_22E77FFEC(a1, a2, a3, a4, a5, 0, (uint64_t)v20, 1);
  v20[0] = off_24FA720A8;
  if (SHIBYTE(v22) < 0)
    operator delete(__p[0]);
  return v18 ^ 1u;
}

uint64_t sub_22E780F98(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FA720A8;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

__n128 sub_22E780FD4(uint64_t a1, __n128 *a2)
{
  __n128 *v2;
  uint64_t v4;
  unint64_t v5;
  __n128 *v6;
  __n128 result;
  unint64_t v8;
  char *v10;

  v2 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v8 = v5 + 32 * v4;
    if (v5 <= (unint64_t)a2 && v8 > (unint64_t)a2)
    {
      v10 = (char *)a2 - v5;
      sub_22F2BC438(a1);
      v5 = *(_QWORD *)a1;
      v2 = (__n128 *)&v10[*(_QWORD *)a1];
    }
    else
    {
      sub_22F2BC438(a1);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = (__n128 *)(v5 + 32 * *(unsigned int *)(a1 + 8));
  result = *v2;
  v6[1].n128_u64[0] = v2[1].n128_u64[0];
  *v6 = result;
  v2->n128_u64[1] = 0;
  v2[1].n128_u64[0] = 0;
  v2->n128_u64[0] = 0;
  v6[1].n128_u8[8] = v2[1].n128_u8[8];
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_22E781074(uint64_t a1, unsigned int a2)
{
  _DWORD *v4;
  uint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  unint64_t v8;
  unsigned int *v9;
  _DWORD *v10;
  unsigned int v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  _DWORD *v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41[2];
  uint64_t *v42;
  char v43;
  void *v44;
  uint64_t v45;
  _BYTE v46[512];
  uint64_t *v47;
  char v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD **)(a1 + 4768);
  v5 = *(unsigned int *)(a1 + 4776);
  if ((_DWORD)v5)
  {
    v6 = *(unsigned int *)(a1 + 4776);
    v7 = *(_DWORD **)(a1 + 4768);
    do
    {
      v8 = v6 >> 1;
      v9 = &v7[4 * (v6 >> 1)];
      v11 = *v9;
      v10 = v9 + 4;
      v6 += ~(v6 >> 1);
      if (v11 > a2)
        v6 = v8;
      else
        v7 = v10;
    }
    while (v6);
  }
  else
  {
    v7 = *(_DWORD **)(a1 + 4768);
  }
  v12 = &v4[4 * v5];
  if (v7 == v4)
    v13 = v12;
  else
    v13 = v7 - 4;
  if (*(_QWORD *)(*(_QWORD *)(a1 + 120) + 2768))
  {
    v14 = *((_QWORD *)v13 + 1);
    v15 = a2 - *(_DWORD *)(v14 + 2536);
    v16 = *(_QWORD *)(v14 + 2576);
    v17 = 8 * *(_QWORD *)(v14 + 2200) - *(unsigned int *)(v14 + 2216);
    v41[0] = v14 + 2184;
    v41[1] = v17;
    v18 = *(_QWORD *)(v14 + 2120) + *(unsigned int *)(v16 + 12 * v15 + 8);
    *(_QWORD *)(v14 + 2200) = (v18 >> 3) & 0x1FFFFFFFFFFFFFF8;
    *(_DWORD *)(v14 + 2216) = 0;
    if ((v18 & 0x3F) != 0)
    {
      sub_22E745EC8(v14 + 2184, v18 & 0x3F, (uint64_t)&v44);
      if ((v45 & 1) != 0)
      {
        v47 = (uint64_t *)v44;
        if (v44)
        {
          sub_22E769A6C((uint64_t *)a1, &v47);
          if (v47)
            (*(void (**)(uint64_t *))(*v47 + 8))(v47);
          v24 = 0;
LABEL_29:
          sub_22E78CE68(v41);
          return v24;
        }
      }
    }
    sub_22E748020(v14 + 2184, 1, (uint64_t)&v47);
    if ((v48 & 1) != 0)
    {
      v26 = v47;
      v47 = 0;
      v44 = v26;
      sub_22E769A6C((uint64_t *)a1, (uint64_t **)&v44);
      if (v44)
        (*(void (**)(void *))(*(_QWORD *)v44 + 8))(v44);
    }
    else if ((_DWORD)v47 == 3)
    {
      v19 = sub_22E77BAB4(a1, v14, *(_DWORD *)(v16 + 12 * v15));
      v20 = sub_22E77BAB4(a1, v14, *(_DWORD *)(v16 + 12 * v15 + 4));
      v21 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 2768);
      v39 = 0;
      v40 = 0;
      v44 = v46;
      v45 = 0x4000000000;
      llvm::BitstreamCursor::readRecord();
      if ((v43 & 1) != 0)
      {
        v29 = v42;
        v42 = 0;
        v38 = v29;
        sub_22E769A6C((uint64_t *)a1, &v38);
        if (v38)
          (*(void (**)(uint64_t *))(*v38 + 8))(v38);
        v24 = 0;
      }
      else if ((_DWORD)v42)
      {
        if ((_DWORD)v42 == 1)
        {
          v22 = sub_22E768E34(a1, v14, *(_DWORD *)v44);
          v23 = sub_22E785944(a1, v22);
          v24 = sub_22E3CD3D4(v21 + 16, 24, 3);
          *(_DWORD *)v24 = 2;
          *(_QWORD *)(v24 + 4) = v19 | (unint64_t)(v20 << 32);
          *(_QWORD *)(v24 + 16) = v23;
          v25 = *(_QWORD *)(a1 + 64);
          if (v25)
            (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v25 + 64))(v25, a2 + 1, v24);
        }
        else
        {
          v34 = v44;
          if (v40 == *(_QWORD *)v44)
          {
            v35 = 0;
          }
          else
          {
            v35 = sub_22F2A7C2C(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 80), &v39[*(_QWORD *)v44], v40 - *(_QWORD *)v44, 0, 1);
            v34 = v44;
          }
          v37 = v34[4];
          v24 = sub_22E3CD3D4(v21 + 16, 48, 3);
          sub_22F4178DC(v24, v21, v37, v39, *(_QWORD *)v44, *((_QWORD *)v44 + 1) != 0, *((_QWORD *)v44 + 3) != 0, v35, v19 | (unint64_t)(v20 << 32));
        }
      }
      else
      {
        v30 = *((_DWORD *)v44 + 2);
        if (*(_QWORD *)v44)
        {
          v31 = sub_22E768E34(a1, v14, v30);
          v32 = sub_22E785944(a1, v31) & 0xFFFFFFFFFFFFFFFELL;
        }
        else
        {
          v36 = sub_22F2B0DA8(a1, v14, v30);
          v32 = sub_22F4179CC(v21, v36 - 1) | 1;
        }
        v24 = sub_22E3CD3D4(v21 + 16, 24, 3);
        *(_DWORD *)v24 = 1;
        *(_QWORD *)(v24 + 4) = v19 | (unint64_t)(v20 << 32);
        *(_QWORD *)(v24 + 16) = v32;
      }
      if ((v43 & 1) != 0)
      {
        v33 = v42;
        v42 = 0;
        if (v33)
          (*(void (**)(uint64_t *))(*v33 + 8))(v33);
      }
      if (v44 != v46)
        free(v44);
      goto LABEL_26;
    }
    v24 = 0;
LABEL_26:
    if ((v48 & 1) != 0)
    {
      v27 = v47;
      v47 = 0;
      if (v27)
        (*(void (**)(uint64_t *))(*v27 + 8))(v27);
    }
    goto LABEL_29;
  }
  sub_22E769C10(a1, "no preprocessing record", 0x17uLL);
  return 0;
}

unint64_t sub_22E7814F8(uint64_t a1, unint64_t a2)
{
  unint64_t result;
  unint64_t v4;
  unsigned int v5;

  result = 0;
  v4 = HIDWORD(a2);
  if (HIDWORD(a2))
  {
    if ((_DWORD)a2)
    {
      v5 = sub_22F2B1588(a1, a2, 0);
      return v5 | (unint64_t)(sub_22F2B1588(a1, v4, 1) << 32);
    }
  }
  return result;
}

void **sub_22E78155C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[3];
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _OWORD v19[2];
  _DWORD v20[32];
  _QWORD v21[3];
  _DWORD v22[32];
  unsigned __int8 v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v18 = a2;
  LOBYTE(v19[0]) = 0;
  v23 = 0;
  sub_22E809E0C(a1 + 144, (unsigned int (*)(uint64_t, unsigned int *))sub_22E7914BC, (uint64_t)&v18, 0);
  LOBYTE(v8) = 0;
  v17 = 0;
  v4 = v23;
  sub_22E78D8EC((void **)&v8);
  if (v4)
  {
    v8 = v19[0];
    v9 = v19[1];
    v10 = &v12;
    v11 = 0x200000000;
    if (v20[2])
      sub_22E78DC88((uint64_t)&v10, (uint64_t)v20);
    sub_22E78D938((uint64_t)v13, v21);
    v14 = &v16;
    v15 = 0x200000000;
    if (v22[2])
      sub_22E78DC88((uint64_t)&v14, (uint64_t)v22);
    v17 = 1;
    v6 = v9;
    *(_OWORD *)a3 = v8;
    *(_OWORD *)(a3 + 16) = v6;
    *(_QWORD *)(a3 + 32) = a3 + 48;
    *(_QWORD *)(a3 + 40) = 0x200000000;
    if ((_DWORD)v11)
      sub_22E78DC88(a3 + 32, (uint64_t)&v10);
    sub_22E78D938(a3 + 160, v13);
    *(_QWORD *)(a3 + 184) = a3 + 200;
    v7 = a3 + 184;
    *(_QWORD *)(v7 + 8) = 0x200000000;
    if ((_DWORD)v15)
      sub_22E78DC88(v7, (uint64_t)&v14);
    sub_22E78D8EC((void **)&v8);
  }
  else
  {
    *(_WORD *)a3 &= 0xF800u;
    *(_QWORD *)(a3 + 4) = 0;
    *(_QWORD *)(a3 + 20) = 0;
    *(_QWORD *)(a3 + 12) = 0;
    *(_DWORD *)(a3 + 28) = 0;
    *(_QWORD *)(a3 + 32) = a3 + 48;
    *(_QWORD *)(a3 + 168) = 0;
    *(_QWORD *)(a3 + 40) = 0x200000000;
    *(_QWORD *)(a3 + 160) = a3 + 168;
    *(_QWORD *)(a3 + 176) = 0;
    *(_QWORD *)(a3 + 184) = a3 + 200;
    *(_QWORD *)(a3 + 192) = 0x200000000;
  }
  return sub_22E78D8EC((void **)v19);
}

void **sub_22E781750@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_22E78155C(a1 - 16, a2, a3);
}

uint64_t sub_22E781758(uint64_t **a1, uint64_t a2, int a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t i;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  _BYTE *v23;

  v4 = *a1;
  v5 = a1[1];
  v6 = *(unsigned int *)v5;
  *(_DWORD *)v5 = v6 + 1;
  v7 = *(_QWORD *)(*v4 + 8 * v6);
  if ((_DWORD)v7)
    return *(_QWORD *)(*a1[2] + 8 * (v7 - 1));
  sub_22E78DE40(a1[3] + 9, a2);
  v10 = a1[2];
  v8 = a1[3][9] + 16;
  v11 = *((_DWORD *)v10 + 2);
  if (v11 >= *((_DWORD *)v10 + 3))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v11 = *((_DWORD *)v10 + 2);
  }
  *(_QWORD *)(*v10 + 8 * v11) = v8;
  ++*((_DWORD *)v10 + 2);
  v12 = *a1;
  v13 = a1[1];
  v14 = *(unsigned int *)v13;
  *(_DWORD *)v13 = v14 + 1;
  for (i = *(_QWORD *)(*v12 + 8 * v14); (_DWORD)i; LODWORD(i) = i - 1)
  {
    v16 = a1[1];
    v17 = *(unsigned int *)v16;
    v18 = **a1;
    v19 = *(_QWORD *)(v18 + 8 * v17);
    *(_DWORD *)v16 = v17 + 2;
    v20 = *(_QWORD *)(v18 + 8 * (v17 + 1));
    v21 = (v20 >> 2) & 0x10 | v20 & 0x20 | (v20 >> 4) & 8 | (((v20 >> 4) & 1) << 6);
    v22 = v20 & 7 | (((v20 >> 3) & 1) << 7) | v21;
    if (((v20 >> 2) & 0x10) != 0 || a3)
    {
      v23 = (_BYTE *)sub_22F1CEF60(v8, v19);
      if ((v22 & 0x80) != 0 && (*v23 & 6) != 4)
        v22 = v21 | 3;
      *(_DWORD *)v23 = v22;
    }
  }
  return v8;
}

unint64_t sub_22E7818B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(unsigned int *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v4 + 1;
  HIDWORD(v5) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v4);
  LODWORD(v5) = HIDWORD(v5);
  v6 = sub_22E77BAB4(v2, v3, v5 >> 1);
  v7 = *(unsigned int *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v7 + 1;
  HIDWORD(v5) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v7);
  LODWORD(v5) = HIDWORD(v5);
  return v6 | (unint64_t)(sub_22E77BAB4(v2, v3, v5 >> 1) << 32);
}

uint64_t sub_22E781930(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t result;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;

  v6 = *a1;
  v7 = *(_QWORD *)(*a1 + 8);
  v8 = *(_QWORD *)(v6 + 16);
  v9 = *(unsigned int *)(v6 + 24);
  *(_DWORD *)(v6 + 24) = v9 + 1;
  HIDWORD(v10) = *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * v9);
  LODWORD(v10) = HIDWORD(v10);
  *a3 = sub_22E77BAB4(v7, v8, v10 >> 1);
  v11 = *a1;
  v12 = *(_QWORD *)(*a1 + 8);
  v13 = *(_QWORD *)(*a1 + 16);
  v14 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v11 + 24) = v14 + 1;
  HIDWORD(v10) = *(_QWORD *)(*(_QWORD *)(v11 + 32) + 8 * v14);
  LODWORD(v10) = HIDWORD(v10);
  a3[1] = sub_22E77BAB4(v12, v13, v10 >> 1);
  v15 = *a1;
  v16 = *(_QWORD *)(*a1 + 8);
  v17 = *(_QWORD *)(*a1 + 16);
  v18 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v15 + 24) = v18 + 1;
  HIDWORD(v10) = *(_QWORD *)(*(_QWORD *)(v15 + 32) + 8 * v18);
  LODWORD(v10) = HIDWORD(v10);
  a3[2] = sub_22E77BAB4(v16, v17, v10 >> 1);
  v19 = sub_22E7818B4(*a1);
  if (a2)
  {
    if (*(_BYTE *)(a2 + 16) == 26)
    {
      v20 = *(_QWORD *)(a2 + 16);
      if ((v20 & 0x3C0000000000000) != 0)
      {
        v21 = (unsigned __int16)(v20 >> 38);
        if (*(_QWORD *)(a2 + 16) == 25)
          v21 = 0;
        *(_QWORD *)&a3[2 * v21 + 4] = v19;
      }
    }
  }
  v22 = *a1;
  v23 = *(_QWORD *)(*a1 + 8);
  v24 = *(_QWORD *)(*a1 + 16);
  v25 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v22 + 24) = v25 + 1;
  HIDWORD(v26) = *(_QWORD *)(*(_QWORD *)(v22 + 32) + 8 * v25);
  LODWORD(v26) = HIDWORD(v26);
  result = sub_22E77BAB4(v23, v24, v26 >> 1);
  a3[3] = result;
  if (*(_BYTE *)(a2 + 16) != 25)
  {
    v28 = *(_QWORD *)(a2 + 16);
    if ((v28 & 0x3FFFC000000000) != 0)
    {
      v29 = (uint64_t *)(a3 + 4);
      v30 = (unsigned __int16)(v28 >> 38);
      do
      {
        v31 = *(_QWORD **)(*a1 + 8);
        v32 = sub_22E779F8C((uint64_t)v31, *(_QWORD *)(*a1 + 16), *a1 + 32, (_DWORD *)(*a1 + 24));
        result = sub_22E77F870(v31, v32);
        *v29++ = result;
        --v30;
      }
      while (v30);
    }
  }
  return result;
}

void sub_22E781A88(uint64_t a1, int a2)
{
  __asm { BR              X10 }
}

unint64_t sub_22E781AC0()
{
  uint64_t v0;

  return (unint64_t)sub_22E782300(v0) & 0xFFFFFFFFFFFFFFFCLL | 2;
}

void sub_22E781AE4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  if (*(_DWORD *)(v1 + 10984) == 3)
    --*(_DWORD *)(v1 + 10848);
  else
    sub_22E7B94C8(v1, *(_QWORD *)(v0 + 16));
  JUMPOUT(0x22E781AD0);
}

void sub_22E781B80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v1 = sub_22E7823B4(v0);
  v3 = v2;
  v4 = *(_QWORD *)(v0 + 8);
  v5 = *(_QWORD *)(v0 + 16);
  v6 = *(unsigned int *)(v0 + 24);
  *(_DWORD *)(v0 + 24) = v6 + 1;
  HIDWORD(v7) = *(_QWORD *)(*(_QWORD *)(v0 + 32) + 8 * v6);
  LODWORD(v7) = HIDWORD(v7);
  v8 = sub_22E77BAB4(v4, v5, v7 >> 1);
  v9 = *(_QWORD *)(v0 + 8);
  v10 = *(_QWORD *)(v0 + 16);
  v11 = *(unsigned int *)(v0 + 24);
  *(_DWORD *)(v0 + 24) = v11 + 1;
  HIDWORD(v7) = *(_QWORD *)(*(_QWORD *)(v0 + 32) + 8 * v11);
  LODWORD(v7) = HIDWORD(v7);
  v12 = sub_22E77BAB4(v9, v10, v7 >> 1);
  v13 = sub_22E3CD3D4(*(_QWORD *)v0 + 2032, 24, 3);
  *(_QWORD *)v13 = v1;
  *(_QWORD *)(v13 + 8) = v3;
  *(_DWORD *)(v13 + 16) = v8;
  *(_DWORD *)(v13 + 20) = v12;
  JUMPOUT(0x22E781B5CLL);
}

uint64_t sub_22E781BF8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = result;
  if (a2)
  {
    v2 = a2;
    do
    {
      sub_22E781C50((uint64_t)&v3, v2);
      result = sub_22F115B7C(v2);
      v2 = result;
    }
    while (result);
  }
  return result;
}

void sub_22E781C50(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0xF) == 0)
    __asm { BR              X10 }
}

uint64_t sub_22E781CD0()
{
  _DWORD *v0;
  uint64_t *v1;
  uint64_t v2;

  return sub_22E781930(v1, v2, v0);
}

void sub_22E781CEC()
{
  _QWORD *v0;
  _QWORD *v1;

  *v0 = sub_22E7A0338(*v1);
  JUMPOUT(0x22E781CC0);
}

void sub_22E781CFC()
{
  unint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  BOOL v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  BOOL v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  BOOL v38;
  uint64_t v39;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 8);
  v5 = *(_QWORD *)(*v1 + 16);
  v6 = *(unsigned int *)(*v1 + 24);
  *(_DWORD *)(v3 + 24) = v6 + 1;
  HIDWORD(v7) = *(_QWORD *)(*(_QWORD *)(v3 + 32) + 8 * v6);
  LODWORD(v7) = HIDWORD(v7);
  v8 = sub_22E77BAB4(v4, v5, v7 >> 1);
  *v0 = v8 | ((unint64_t)v8 << 32);
  v9 = (*(_DWORD *)(v2 + 16) >> 19) & 0x1FF;
  if ((v9 - 173) < 5 || (v9 - 181) < 0x25 || v9 == 168 || v9 == 179)
  {
    v10 = *v1;
    v11 = *(unsigned int *)(*v1 + 24);
    v12 = v11 + 1;
    v13 = *(_QWORD *)(*v1 + 32);
    v14 = *(_QWORD *)(v13 + 8 * v11);
    *(_DWORD *)(*v1 + 24) = v12;
    v15 = (*(_DWORD *)(v2 + 16) >> 19) & 0x1FF;
    v16 = v15 - 181;
    if ((v15 - 173) < 5 || v16 < 0x25 || v15 == 168 || v15 == 179)
    {
      if ((v15 - 173) < 5)
      {
        v19 = 4;
      }
      else
      {
        v18 = v16 < 0x25 || v15 == 179 || v15 == 168;
        v19 = 4;
        if (!v18)
          v19 = 1;
      }
      *(_WORD *)((char *)v0 + ((v19 + 7) & -v19)) = *(_WORD *)((_BYTE *)v0 + ((v19 + 7) & -v19)) & 0xFFC0 | v14 & 0x3F;
      v10 = *v1;
      v12 = *(_DWORD *)(*v1 + 24);
      v13 = *(_QWORD *)(*v1 + 32);
    }
    v20 = v12 + 1;
    v21 = *(_QWORD *)(v13 + 8 * v12);
    *(_DWORD *)(v10 + 24) = v12 + 1;
    v22 = (*(_DWORD *)(v2 + 16) >> 19) & 0x1FF;
    v23 = v22 - 181;
    if ((v22 - 173) < 5 || v23 < 0x25 || v22 == 168 || v22 == 179)
    {
      if ((v22 - 173) < 5)
      {
        v26 = 4;
      }
      else
      {
        v25 = v23 < 0x25 || v22 == 179 || v22 == 168;
        v26 = 4;
        if (!v25)
          v26 = 1;
      }
      *(_WORD *)((char *)v0 + ((v26 + 7) & -v26)) = *(_WORD *)((_BYTE *)v0 + ((v26 + 7) & -v26)) & 0xFF3F | ((v21 & 3) << 6);
      v10 = *v1;
      v20 = *(_DWORD *)(*v1 + 24);
      v13 = *(_QWORD *)(*v1 + 32);
    }
    v27 = v20 + 1;
    v28 = *(_QWORD *)(v13 + 8 * v20);
    *(_DWORD *)(v10 + 24) = v20 + 1;
    v29 = (*(_DWORD *)(v2 + 16) >> 19) & 0x1FF;
    v30 = v29 - 181;
    if ((v29 - 173) < 5 || v30 < 0x25 || v29 == 168 || v29 == 179)
    {
      if ((v29 - 173) < 5)
      {
        v33 = 4;
      }
      else
      {
        v32 = v30 < 0x25 || v29 == 179 || v29 == 168;
        v33 = 4;
        if (!v32)
          v33 = 1;
      }
      *(_WORD *)((char *)v0 + ((v33 + 7) & -v33)) = *(_WORD *)((_BYTE *)v0 + ((v33 + 7) & -v33)) & 0xFCFF | ((v28 & 3) << 8);
      v10 = *v1;
      v27 = *(_DWORD *)(*v1 + 24);
      v13 = *(_QWORD *)(*v1 + 32);
    }
    v34 = *(_QWORD *)(v13 + 8 * v27);
    *(_DWORD *)(v10 + 24) = v27 + 1;
    v35 = (*(_DWORD *)(v2 + 16) >> 19) & 0x1FF;
    v36 = v35 - 181;
    if ((v35 - 173) < 5 || v36 < 0x25 || v35 == 168 || v35 == 179)
    {
      if ((v35 - 173) < 5)
      {
        v39 = 4;
      }
      else
      {
        v38 = v36 < 0x25 || v35 == 179 || v35 == 168;
        v39 = 4;
        if (!v38)
          v39 = 1;
      }
      *(_WORD *)((char *)v0 + ((v39 + 7) & -v39)) = *(_WORD *)((_BYTE *)v0 + ((v39 + 7) & -v39)) & 0xFBFF | ((v34 != 0) << 10);
    }
  }
  JUMPOUT(0x22E781CC0);
}

_QWORD *sub_22E782300(uint64_t a1)
{
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v8;

  v2 = sub_22E78DF24(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), a1 + 32, (_DWORD *)(a1 + 24));
  if (v2 < 0x10)
    return 0;
  v4 = v2;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 128);
  v6 = sub_22F11598C(v2);
  v3 = (_QWORD *)sub_22E3CD3D4(v5 + 2032, v6 + 8, 3);
  *v3 = v4;
  v8 = a1;
  do
  {
    sub_22E781C50((uint64_t)&v8, v4);
    v4 = sub_22F115B7C(v4);
  }
  while (v4);
  return v3;
}

uint64_t sub_22E7823B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  size_t v42;
  void *v43;
  int v45;
  uint64_t v46;
  uint64_t v47;
  void *__src;
  uint64_t v49;

  v2 = (uint64_t *)(a1 + 32);
  v1 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 128);
  v5 = (unsigned int *)(a1 + 24);
  v4 = *(unsigned int *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v4 + 1;
  v6 = *(_QWORD *)(v1 + 8 * v4);
  v47 = 0;
  __src = 0;
  v49 = 0;
  if (!(_DWORD)v6)
  {
    v41 = 0;
    goto LABEL_33;
  }
  v8 = 0;
  v45 = v6;
  v46 = v3;
  do
  {
    v9 = *v5;
    v10 = v9 + 1;
    *v5 = v9 + 1;
    v11 = *v2;
    switch(*(_QWORD *)(*v2 + 8 * v9))
    {
      case 0u:
        v33 = *(_QWORD *)(a1 + 8);
        v32 = *(_QWORD *)(a1 + 16);
        *(_DWORD *)(a1 + 24) = v9 + 2;
        v34 = sub_22E768E34(v33, v32, *(_QWORD *)(v11 + 8 * v10));
        v35 = sub_22E785944(v33, v34);
        v36 = sub_22E7818B4(a1);
        sub_22F3E8D84(&v47, v3, v35, v36, SHIDWORD(v36));
        goto LABEL_26;
      case 1u:
      case 2u:
        v23 = *(_QWORD *)(a1 + 8);
        v24 = sub_22E779F8C(v23, *(_QWORD *)(a1 + 16), (uint64_t)v2, v5);
        v25 = sub_22E77F870(v23, v24);
        v26 = sub_22E7818B4(a1);
        sub_22F0AB8AC(&v47, v3, v25, v26, SHIDWORD(v26));
        goto LABEL_26;
      case 3u:
      case 4u:
        *(_DWORD *)(a1 + 24) = v9 + 2;
        v12 = *(_QWORD *)(v11 + 8 * v10);
        v13 = sub_22E782300(a1);
        if (!v13)
        {
          v41 = 0;
          goto LABEL_33;
        }
        v14 = v13;
        v15 = *(_QWORD *)(a1 + 8);
        v16 = *(_QWORD *)(a1 + 16);
        v17 = *(unsigned int *)(a1 + 24);
        *(_DWORD *)(a1 + 24) = v17 + 1;
        HIDWORD(v18) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v17);
        LODWORD(v18) = HIDWORD(v18);
        v19 = sub_22E77BAB4(v15, v16, v18 >> 1);
        if (!v12)
        {
          v31 = 0;
          goto LABEL_25;
        }
        v20 = *v14;
        v21 = *v14;
        break;
      case 5u:
        v27 = *(_QWORD *)(a1 + 8);
        v28 = *(_QWORD *)(a1 + 16);
        *(_DWORD *)(a1 + 24) = v9 + 2;
        HIDWORD(v29) = *(_QWORD *)(v11 + 8 * v10);
        LODWORD(v29) = HIDWORD(v29);
        v30 = sub_22E77BAB4(v27, v28, v29 >> 1);
        sub_22F0AB958((uint64_t)&v47, v3, v30);
        goto LABEL_26;
      case 6u:
        v37 = *(_QWORD *)(a1 + 8);
        v38 = sub_22E779F8C(v37, *(_QWORD *)(a1 + 16), (uint64_t)v2, v5);
        v39 = sub_22E77F870(v37, v38);
        v40 = sub_22E7818B4(a1);
        sub_22F3E8E2C(&v47, v3, v39, v40, SHIDWORD(v40));
        goto LABEL_26;
      default:
        goto LABEL_26;
    }
    while (1)
    {
      while (1)
      {
        if ((v21 & 0xF) != 0)
          goto LABEL_17;
        v22 = *(unsigned __int8 *)(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v22 <= 0x39)
          break;
LABEL_12:
        if (sub_22F115668(v21))
          v20 = v21;
        v21 = sub_22F115B7C(v21);
        if (!v21)
          goto LABEL_24;
      }
      if (v22 == 24)
        goto LABEL_23;
      if (v22 == 26)
        break;
      if (((1 << v22) & 0x20000000200003CLL) == 0)
        goto LABEL_12;
LABEL_17:
      v21 = sub_22F115B7C(v21);
    }
    if ((*(_BYTE *)(v21 + 23) & 0x10) == 0)
      goto LABEL_17;
LABEL_23:
    v20 = v21;
LABEL_24:
    v31 = sub_22F115668(v20);
    LODWORD(v6) = v45;
    v3 = v46;
LABEL_25:
    sub_22F0AB7EC(&v47, v3, v31, *v14, (uint64_t)(v14 + 1), v19);
LABEL_26:
    ++v8;
  }
  while (v8 != (_DWORD)v6);
  v41 = v47;
  if (v47 && HIDWORD(v49))
  {
    v42 = v49;
    v43 = (void *)sub_22E3CD3D4(v3 + 2032, v49, 3);
    memcpy(v43, __src, v42);
  }
LABEL_33:
  if (HIDWORD(v49))
    free(__src);
  return v41;
}

double sub_22E782760@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  double result;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  sub_22E7827DC(a1);
  if ((_DWORD)v7 == 7
    && (v6 = *(unsigned int *)(a1 + 24), *(_DWORD *)(a1 + 24) = v6 + 1, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v6)))
  {
    v4 = *((_QWORD *)&v7 + 1) & 0xFFFFFFFFFFFFFFFCLL | 1;
  }
  else
  {
    sub_22E781A88(a1, v7);
  }
  result = *(double *)&v7;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 24) = v4;
  return result;
}

void sub_22E7827DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(unsigned int *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v2 + 1;
  __asm { BR              X13 }
}

void sub_22E782850(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, char a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  uint64_t v51;

  *(_DWORD *)v51 = 0;
  *(_QWORD *)(v51 + 8) = 0;
}

uint64_t sub_22E782AE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[32];
  void *v20;
  uint64_t v21;
  _DWORD v22[66];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(unsigned int *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v4 + 1;
  HIDWORD(v5) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v4);
  LODWORD(v5) = HIDWORD(v5);
  v6 = sub_22E77BAB4(v2, v3, v5 >> 1);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(unsigned int *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v9 + 1;
  HIDWORD(v5) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v9);
  LODWORD(v5) = HIDWORD(v5);
  v10 = sub_22E77BAB4(v7, v8, v5 >> 1);
  v11 = *(unsigned int *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v11 + 1;
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v11);
  v20 = v22;
  v21 = 0x800000000;
  v22[64] = v6;
  for (v22[65] = v10; (_DWORD)v12; LODWORD(v12) = v12 - 1)
  {
    sub_22E782760(a1, (uint64_t)v19);
    v13 = (_OWORD *)sub_22E78DF7C((uint64_t)&v20, (unint64_t)v19, 1);
    v14 = (char *)v20 + 32 * v21;
    v15 = v13[1];
    *v14 = *v13;
    v14[1] = v15;
    LODWORD(v21) = v21 + 1;
  }
  sub_22F0F043C(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 128), (uint64_t)&v20);
  v17 = v16;
  if (v20 != v22)
    free(v20);
  return v17;
}

uint64_t sub_22E782C38(uint64_t a1, uint64_t a2)
{
  return sub_22E77F870((_QWORD *)(a1 - 24), a2);
}

uint64_t sub_22E782C40(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  void *v30[2];
  _QWORD v31[9];

  v2 = a2;
  v3 = result;
  v31[8] = *MEMORY[0x24BDAC8D0];
  v29 = a2;
  if (*(_DWORD *)(result + 7456))
  {
    v4 = *(_DWORD *)(result + 9056);
    if (v4 >= *(_DWORD *)(result + 9060))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v4 = *(_DWORD *)(v3 + 9056);
    }
    *(_QWORD *)(*(_QWORD *)(v3 + 9048) + 8 * v4) = v2;
    ++*(_DWORD *)(v3 + 9056);
    return result;
  }
  v5 = *(_QWORD *)(a2 + 16);
  if ((v5 & 4) != 0)
  {
    result = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
    if (!result)
      return result;
  }
  else
  {
    if (v5 < 8)
      return result;
    result = v5 & 0xFFFFFFFFFFFFFFF8;
  }
  result = sub_22EFCBB30(result);
  v6 = *(_WORD *)(result + 8) & 0x7F;
  if (v6 == 16 || v6 == 83 || (v6 != 33 ? (v7 = (v6 - 35) > 2) : (v7 = 0), !v7))
  {
    v8 = *(_QWORD *)(v2 + 40);
    if (v8)
    {
      if (v6 == 83 && (**(_QWORD **)(*(_QWORD *)(v3 + 128) + 2000) & 0x100) == 0)
      {
        if ((v8 & 7) != 0)
          v14 = 0;
        else
          v14 = v8 & 0xFFFFFFFFFFFFFFF8;
        if ((*(_BYTE *)(v14 + 4) & 8) != 0)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
      }
      else
      {
        result = sub_22EFCE144(result, v8);
      }
      goto LABEL_55;
    }
    result = sub_22E750738(v2);
    if ((_DWORD)result)
    {
      v10 = *(_QWORD *)(v2 + 16);
      v11 = v10 & 0xFFFFFFFFFFFFFFF8;
      if ((v10 & 4) != 0)
        v11 = *(_QWORD *)(v11 + 8);
      v12 = *(_WORD *)(v11 + 8) & 0x7F;
      v13 = -40;
      if (v12 > 0x46)
      {
        if (v12 != 83)
        {
          if (v12 == 71)
          {
            v13 = -56;
          }
          else if (v12 != 81)
          {
            goto LABEL_41;
          }
        }
      }
      else
      {
        if (v12 <= 0x18)
        {
          if (v12 == 16)
          {
LABEL_28:
            v13 = -48;
            goto LABEL_46;
          }
          if (((1 << v12) & 0x1066) != 0)
            goto LABEL_46;
          if (v12 == 24)
            goto LABEL_28;
        }
        if (v12 != 70)
        {
LABEL_41:
          if (v12 - 52 < 6)
          {
            v13 = -72;
          }
          else
          {
            v13 = -48;
            if (v12 - 33 < 5)
              v13 = -64;
          }
          goto LABEL_46;
        }
        v13 = -64;
      }
LABEL_46:
      v15 = v11 + v13;
      v16 = v11 + v13;
      do
      {
        v17 = sub_22EFCAE04(v16);
        v30[0] = v31;
        v30[1] = (void *)0x800000000;
        v28 = &v29;
        (*(void (**)(uint64_t, uint64_t, BOOL (*)(uint64_t, int), uint64_t **, void **))(*(_QWORD *)v3 + 120))(v3, v17, sub_22E7920CC, &v28, v30);
        if (v30[0] != v31)
          free(v30[0]);
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
        v16 = result;
      }
      while (result != v15 && result != 0);
      v2 = v29;
    }
  }
LABEL_55:
  v19 = *(_DWORD *)(v2 + 28);
  if (v2 && (*(_DWORD *)(v2 + 28) & 0x7E) == 0x24)
  {
    v20 = *(_QWORD *)(v2 + 152);
    v21 = v20 & 0xFFFFFFFFFFFFFFF8;
    if ((v20 & 4) != 0 && v21)
    {
      do
      {
        v22 = *(_QWORD *)(*(_QWORD *)v21 + 152);
        v21 = v22 & 0xFFFFFFFFFFFFFFF8;
      }
      while ((v22 & 4) != 0 && v21);
    }
    result = sub_22EFE95D4(v21);
    v2 = v29;
    v19 = *(_DWORD *)(v29 + 28);
  }
  if ((v19 & 0x7Fu) - 67 >= 0xFFFFFFFE)
  {
    v23 = *(_QWORD *)(v2 + 112);
    v24 = v23 & 0xFFFFFFFFFFFFFFF8;
    if ((v23 & 4) != 0 && v24)
    {
      do
      {
        v27 = *(_QWORD *)(*(_QWORD *)v24 + 112);
        v24 = v27 & 0xFFFFFFFFFFFFFFF8;
      }
      while ((v27 & 4) != 0 && v24);
    }
    result = sub_22EFE95D4(v24);
    v2 = v29;
    v19 = *(_DWORD *)(v29 + 28);
  }
  if ((v19 & 0x7Eu) - 58 >= 0xFFFFFFFA)
  {
    v25 = *(_QWORD *)(v2 + 144) & 0xFFFFFFFFFFFFFFF8;
    if ((*(_QWORD *)(v2 + 144) & 6) == 4 && v25 != 0)
    {
      result = *(_QWORD *)(v25 + 16) & 0xFFFFFFFFFFFFFFF8;
      if (result)
        return sub_22EFE95D4(result);
    }
  }
  return result;
}

uint64_t sub_22E782FB4(uint64_t a1, uint64_t a2)
{
  return sub_22E782C40(a1 - 24, a2);
}

uint64_t sub_22E782FBC(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15[2];
  uint64_t *v16;
  char v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[65];

  v24[64] = *MEMORY[0x24BDAC8D0];
  v3 = sub_22E7B0AE4(a1, a2);
  v4 = v3;
  v5 = v3 + 2720;
  v6 = 8 * *(_QWORD *)(v3 + 2736) - *(unsigned int *)(v3 + 2752);
  v15[0] = v3 + 2720;
  v15[1] = v6;
  *(_QWORD *)(v3 + 2736) = (v7 >> 3) & 0x1FFFFFFFFFFFFFF8;
  *(_DWORD *)(v3 + 2752) = 0;
  v8 = v7 & 0x3F;
  if (!v8 || (sub_22E745EC8(v3 + 2720, v8, (uint64_t)&v18), (v19 & 1) == 0) || (v16 = v18) == 0)
  {
    v9 = *(_DWORD *)(a1 + 10984);
    *(_DWORD *)(a1 + 10984) = 1;
    sub_22E745EC8(v5, *(_DWORD *)(v4 + 2756), (uint64_t)&v18);
    if ((v19 & 1) != 0)
    {
      sub_22E769A6C((uint64_t *)a1, &v18);
      if (v18)
        (*(void (**)(uint64_t *))(*v18 + 8))(v18);
      v11 = 0;
      goto LABEL_15;
    }
    v18 = *(uint64_t **)(a1 + 128);
    v19 = a1;
    v20 = v4;
    v22 = v24;
    v21 = 0;
    v23 = 0x4000000000;
    llvm::BitstreamCursor::readRecord();
    if ((v17 & 1) != 0)
    {
      v10 = v16;
      v16 = 0;
      v14 = v10;
      sub_22E769A6C((uint64_t *)a1, &v14);
      if (v14)
        (*(void (**)(uint64_t *))(*v14 + 8))(v14);
    }
    else
    {
      if ((_DWORD)v16 == 119)
      {
        v11 = sub_22F2B2238((uint64_t)&v18);
LABEL_10:
        if ((v17 & 1) != 0)
        {
          v12 = v16;
          v16 = 0;
          if (v12)
            (*(void (**)(uint64_t *))(*v12 + 8))(v12);
        }
        if (v22 != v24)
          free(v22);
LABEL_15:
        *(_DWORD *)(a1 + 10984) = v9;
        goto LABEL_16;
      }
      sub_22E769C10(a1, "malformed AST file: missing C++ ctor initializers", 0x31uLL);
    }
    v11 = 0;
    goto LABEL_10;
  }
  sub_22E769A6C((uint64_t *)a1, &v16);
  if (v16)
    (*(void (**)(uint64_t *))(*v16 + 8))(v16);
  v11 = 0;
LABEL_16:
  sub_22E78CE68(v15);
  return v11;
}

uint64_t sub_22E7831DC(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v21;
  uint64_t v22;
  uint64_t v23[2];
  uint64_t v24;
  char v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  void *v30;
  uint64_t v31;
  _QWORD v32[65];

  v32[64] = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 128);
  v4 = sub_22E7B0AE4(a1, a2);
  v5 = v4;
  v6 = v4 + 2720;
  v7 = 8 * *(_QWORD *)(v4 + 2736) - *(unsigned int *)(v4 + 2752);
  v23[0] = v4 + 2720;
  v23[1] = v7;
  *(_QWORD *)(v4 + 2736) = (v8 >> 3) & 0x1FFFFFFFFFFFFFF8;
  *(_DWORD *)(v4 + 2752) = 0;
  v9 = v8 & 0x3F;
  if (!v9 || (sub_22E745EC8(v4 + 2720, v9, (uint64_t)&v26), (v27 & 1) == 0) || (*(_QWORD *)&v21 = v26) == 0)
  {
    v10 = *(_DWORD *)(a1 + 10984);
    *(_DWORD *)(a1 + 10984) = 1;
    sub_22E745EC8(v6, *(_DWORD *)(v5 + 2756), (uint64_t)&v26);
    if ((v27 & 1) != 0)
    {
      sub_22E769A6C((uint64_t *)a1, &v26);
      if (v26)
        (*(void (**)(uint64_t *))(*v26 + 8))(v26);
      v14 = 0;
      goto LABEL_21;
    }
    v26 = *(uint64_t **)(a1 + 128);
    v27 = a1;
    v28 = v5;
    v30 = v32;
    v29 = 0;
    v31 = 0x4000000000;
    llvm::BitstreamCursor::readRecord();
    if ((v25 & 1) != 0)
    {
      *(_QWORD *)&v21 = 0;
      sub_22E769A6C((uint64_t *)a1, (uint64_t **)&v21);
      if ((_QWORD)v21)
        (*(void (**)(_QWORD))(*(_QWORD *)v21 + 8))(v21);
    }
    else
    {
      if ((_DWORD)v24 == 118)
      {
        v11 = v29++;
        v12 = *((unsigned int *)v30 + 2 * v11);
        v13 = sub_22E3CD3D4(v3 + 2032, 24 * v12, 3);
        v14 = v13;
        if (v12)
        {
          v15 = v13;
          do
          {
            *(_QWORD *)v15 = 0;
            *(_DWORD *)(v15 + 8) = 0;
            v15 += 24;
          }
          while (v15 != v13 + 24 * v12);
          v16 = 0;
          v17 = 24 * v12;
          do
          {
            sub_22E783480((uint64_t)&v26, (uint64_t)&v21);
            v18 = v14 + v16;
            *(_OWORD *)v18 = v21;
            *(_QWORD *)(v18 + 16) = v22;
            v16 += 24;
          }
          while (v17 != v16);
        }
        goto LABEL_16;
      }
      sub_22E769C10(a1, "malformed AST file: missing C++ base specifiers", 0x2FuLL);
    }
    v14 = 0;
LABEL_16:
    if ((v25 & 1) != 0)
    {
      v19 = v24;
      v24 = 0;
      if (v19)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    }
    if (v30 != v32)
      free(v30);
LABEL_21:
    *(_DWORD *)(a1 + 10984) = v10;
    goto LABEL_22;
  }
  sub_22E769A6C((uint64_t *)a1, (uint64_t **)&v21);
  if ((_QWORD)v21)
    (*(void (**)(_QWORD))(*(_QWORD *)v21 + 8))(v21);
  v14 = 0;
LABEL_22:
  sub_22E78CE68(v23);
  return v14;
}

uint64_t sub_22E783480@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;
  uint64_t v8;
  BOOL v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t result;
  char v17;

  v4 = *(unsigned int *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(v5 + 8 * v4) != 0;
  v7 = *(_QWORD *)(v5 + 8 * (v4 + 1)) != 0;
  v8 = *(_QWORD *)(v5 + 8 * (v4 + 2));
  *(_DWORD *)(a1 + 24) = v4 + 4;
  v9 = *(_QWORD *)(v5 + 8 * (v4 + 3)) != 0;
  v10 = sub_22E782300(a1);
  v11 = sub_22E7818B4(a1);
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(unsigned int *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v14 + 1;
  HIDWORD(v15) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v14);
  LODWORD(v15) = HIDWORD(v15);
  result = sub_22E77BAB4(v12, v13, v15 >> 1);
  *(_QWORD *)a2 = v11;
  *(_DWORD *)(a2 + 8) = result;
  v17 = *(_BYTE *)(a2 + 12) & 0xE0;
  *(_QWORD *)(a2 + 16) = v10;
  *(_BYTE *)(a2 + 12) = (v6 | (2 * v7)) & 0xF3 | (4 * (v8 & 3)) | (16 * v9) | v17;
  return result;
}

uint64_t sub_22E783558(uint64_t a1, unint64_t a2)
{
  return sub_22E7831DC(a1 - 24, a2);
}

uint64_t sub_22E783560(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  unint64_t v7;
  unsigned int *v8;
  _DWORD *v9;
  unsigned int v10;
  _DWORD *v11;
  _DWORD *v12;

  if ((*(_BYTE *)(a2 + 29) & 0x80) == 0)
    return 0;
  v3 = *(_DWORD **)(a1 + 2808);
  v4 = *(unsigned int *)(a1 + 2816);
  if ((_DWORD)v4)
  {
    v5 = *(unsigned int *)(a1 + 2816);
    v6 = *(_DWORD **)(a1 + 2808);
    do
    {
      v7 = v5 >> 1;
      v8 = &v6[4 * (v5 >> 1)];
      v10 = *v8;
      v9 = v8 + 4;
      v5 += ~(v5 >> 1);
      if (v10 > *(_DWORD *)(a2 - 4))
        v5 = v7;
      else
        v6 = v9;
    }
    while (v5);
  }
  else
  {
    v6 = *(_DWORD **)(a1 + 2808);
  }
  v11 = &v3[4 * v4];
  if (v6 == v3)
    v12 = v11;
  else
    v12 = v6 - 4;
  return *((_QWORD *)v12 + 1);
}

uint64_t sub_22E7835D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t result;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int *v11;
  _DWORD *v12;
  unsigned int v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  v3 = a3;
  if (a3 < 0x12)
    return a3;
  v6 = *(_DWORD **)(a1 + 2808);
  v7 = *(unsigned int *)(a1 + 2816);
  if ((_DWORD)v7)
  {
    v9 = *(unsigned int *)(a1 + 2816);
    v8 = *(_DWORD **)(a1 + 2808);
    do
    {
      v10 = v9 >> 1;
      v11 = &v8[4 * (v9 >> 1)];
      v13 = *v11;
      v12 = v11 + 4;
      v9 += ~(v9 >> 1);
      if (v13 > a3)
        v9 = v10;
      else
        v8 = v12;
    }
    while (v9);
  }
  else
  {
    v8 = *(_DWORD **)(a1 + 2808);
  }
  v14 = &v6[4 * v7];
  if (v8 == v6)
    v15 = v14;
  else
    v15 = v8 - 4;
  v16 = *((_QWORD *)v15 + 1);
  v18 = v16;
  v19 = 0;
  v17 = sub_22F246C54((uint64_t *)(a2 + 3128), &v18, &v19);
  result = 0;
  if (v17)
  {
    if (v19 != *(_QWORD *)(a2 + 3128) + 16 * *(unsigned int *)(a2 + 3144))
      return (v3 - *(_DWORD *)(v16 + 3088) + *(_DWORD *)(v19 + 8));
  }
  return result;
}

uint64_t sub_22E7836B0(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v3 = a1[920];
  v4 = *(_DWORD *)(v3 + 8);
  if (v4 || *(_DWORD *)(v3 + 12))
  {
    v12 = a2;
    v13 = *(unsigned int *)(v3 + 16);
    if (v13 <= 4 * v4 || v13 < 0x41)
    {
      if ((_DWORD)v13)
      {
        v14 = *(_DWORD **)v3;
        v15 = 16 * v13;
        do
        {
          *v14 = -1;
          v14 += 4;
          v15 -= 16;
        }
        while (v15);
      }
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      sub_22E793A04(v3);
    }
    a2 = v12;
  }
  v5 = sub_22E7B0AE4((uint64_t)a1, a2);
  v6 = v5;
  *(_QWORD *)(v5 + 2736) = (v7 >> 3) & 0x1FFFFFFFFFFFFFF8;
  *(_DWORD *)(v5 + 2752) = 0;
  v8 = v7 & 0x3F;
  if (v8 && (sub_22E745EC8(v5 + 2720, v8, (uint64_t)&v17), (v18 & 1) != 0) && (v16 = v17) != 0)
  {
    sub_22E769A6C(a1, &v16);
    if (v16)
      (*(void (**)(uint64_t *))(*v16 + 8))(v16);
    return 0;
  }
  else
  {
    v9 = a1 + 3;
    (*(void (**)(uint64_t *))(a1[3] + 160))(a1 + 3);
    v10 = sub_22E7B94C8((uint64_t)a1, v6);
    (*(void (**)(uint64_t *))(*v9 + 168))(v9);
  }
  return v10;
}

uint64_t sub_22E783808(uint64_t a1, unint64_t a2)
{
  return sub_22E7836B0((uint64_t *)(a1 - 24), a2);
}

uint64_t sub_22E783810(uint64_t result, uint64_t a2, uint64_t (*a3)(uint64_t, _QWORD), uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  _QWORD v16[5];
  uint64_t v17;
  uint64_t (*v18)(uint64_t, _QWORD);
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  __int16 v22;
  uint64_t v23;

  v5 = result;
  v23 = *MEMORY[0x24BDAC8D0];
  v18 = a3;
  v19 = a4;
  v16[4] = a5;
  v17 = a2;
  v21[0] = 0;
  v21[1] = 0;
  v22 = 0;
  v16[0] = &v18;
  v16[1] = v21;
  v16[2] = result;
  v16[3] = &v17;
  if ((*(_WORD *)(a2 + 8) & 0x7F) == 0x53)
  {
    v14 = *(uint64_t **)(result + 3632);
    v15 = *(uint64_t **)(result + 3640);
    while (v14 != v15)
    {
      result = sub_22E7839F4((uint64_t)v16, *v14, v14[1], v14[2]);
      v14 += 3;
    }
  }
  else
  {
    v20 = 0;
    result = sub_22E78F2B0(*(_QWORD *)(result + 3608), *(_DWORD *)(result + 3624), a2, &v20);
    if ((_DWORD)result)
    {
      if (v20 != *(_QWORD *)(v5 + 3608) + 32 * *(unsigned int *)(v5 + 3624))
      {
        v7 = *(unsigned int *)(v20 + 24);
        if (*(_DWORD *)(v20 + 24))
        {
          v8 = *(_QWORD *)(v20 + 8);
          v9 = (unsigned int *)(*(_QWORD *)(v20 + 16) + 4);
          while (1)
          {
            result = v18(v19, *(v9 - 1));
            if ((_DWORD)result)
            {
              v10 = *v9;
              if (v10 > 0x11)
                goto LABEL_12;
              if (!*((_BYTE *)v21 + v10))
                break;
            }
LABEL_9:
            v9 += 2;
            v7 -= 2;
            if (!v7)
              goto LABEL_22;
          }
          *((_BYTE *)v21 + v10) = 1;
LABEL_12:
          v11 = sub_22E768FE0(v5, v8, v10);
          result = sub_22E77F870((_QWORD *)v5, v11);
          if (result)
          {
            v12 = result;
            if (*(_QWORD *)(result + 8) <= 7uLL && *(_QWORD *)(v17 + 16) != result && *(_QWORD *)(v17 + 24) != result)
            {
              v13 = *(unsigned int *)(a5 + 8);
              if (v13 >= *(unsigned int *)(a5 + 12))
              {
                result = llvm::SmallVectorBase<unsigned int>::grow_pod();
                v13 = *(unsigned int *)(a5 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a5 + 8 * v13) = v12;
              ++*(_DWORD *)(a5 + 8);
            }
          }
          goto LABEL_9;
        }
      }
    }
  }
LABEL_22:
  ++*(_DWORD *)(v5 + 7428);
  return result;
}

uint64_t sub_22E7839F4(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  unsigned int *i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v4 = a4;
  if (a4)
  {
    v6 = result;
    v7 = *(_QWORD **)(result + 16);
    for (i = (unsigned int *)(a3 + 4); ; i += 2)
    {
      result = (**(uint64_t (***)(_QWORD, _QWORD))v6)(*(_QWORD *)(*(_QWORD *)v6 + 8), *(i - 1));
      if ((_DWORD)result)
      {
        v9 = *i;
        if (v9 > 0x11)
          goto LABEL_7;
        v10 = *(_QWORD *)(v6 + 8);
        if (!*(_BYTE *)(v10 + v9))
          break;
      }
LABEL_14:
      v4 -= 2;
      if (!v4)
        return result;
    }
    *(_BYTE *)(v10 + v9) = 1;
LABEL_7:
    v11 = sub_22E768FE0((uint64_t)v7, a2, v9);
    result = sub_22E77F870(v7, v11);
    if (result)
    {
      v12 = result;
      if (*(_QWORD *)(result + 8) <= 7uLL)
      {
        v13 = **(_QWORD **)(v6 + 24);
        if (*(_QWORD *)(v13 + 16) != result && *(_QWORD *)(v13 + 24) != result)
        {
          v14 = *(_QWORD *)(v6 + 32);
          v15 = *(unsigned int *)(v14 + 8);
          if (v15 >= *(unsigned int *)(v14 + 12))
          {
            result = llvm::SmallVectorBase<unsigned int>::grow_pod();
            v15 = *(unsigned int *)(v14 + 8);
          }
          *(_QWORD *)(*(_QWORD *)v14 + 8 * v15) = v12;
          ++*(_DWORD *)(v14 + 8);
        }
      }
    }
    goto LABEL_14;
  }
  return result;
}

uint64_t sub_22E783B0C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, _QWORD), uint64_t a4, uint64_t a5)
{
  return sub_22E783810(a1 - 24, a2, a3, a4, a5);
}

uint64_t sub_22E783B14(uint64_t a1, unsigned int a2, int a3, int a4, uint64_t a5)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int *v20;
  _DWORD *v21;
  unsigned int v22;
  int v23;
  unsigned int *v24;
  uint64_t v25;
  unsigned int *i;
  unsigned int *v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  unsigned int *j;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;

  v10 = *(_QWORD **)(a1 + 80);
  v11 = *(_QWORD *)(a1 + 3584);
  v12 = *(unsigned int *)(a1 + 3600);
  result = (uint64_t)sub_22F2B2548(v11, v12, a2);
  if (v11 + 32 * v12 != result)
  {
    v14 = (uint64_t *)result;
    if (*(_QWORD *)(result + 24))
    {
      result = (uint64_t)sub_22E49F3DC(v10, a2);
      if (result)
        v15 = *(_DWORD *)result & 0x7FFFFFFF;
      else
        v15 = 0;
      v16 = v15 + a3;
      v17 = v14[1];
      v18 = v14[2];
      v19 = v14[3];
      if (v19)
      {
        v41 = a4;
        do
        {
          v20 = (unsigned int *)(v18 + 4 * (v19 >> 1));
          v22 = *v20;
          v21 = v20 + 1;
          v23 = sub_22E78DFF0((_QWORD *)a1, v17, v22);
          result = sub_22F1E3C34(*(_QWORD **)(a1 + 80), v23, v16);
          if ((_DWORD)result)
            v19 += ~(v19 >> 1);
          else
            v19 >>= 1;
          if ((_DWORD)result)
            v18 = (uint64_t)v21;
        }
        while (v19);
        v24 = (unsigned int *)v14[2];
        a4 = v41;
      }
      else
      {
        v24 = (unsigned int *)v14[2];
      }
      if ((unsigned int *)v18 == v24)
        v25 = 0;
      else
        v25 = -1;
      for (i = (unsigned int *)(v18 + 4 * v25); ; --i)
      {
        v27 = v24;
        if (i == v24)
          break;
        v28 = sub_22E768FE0(a1, v14[1], *i);
        result = sub_22E77F870((_QWORD *)a1, v28);
        v24 = (unsigned int *)v14[2];
        if ((*(_BYTE *)(result + 29) & 0x10) == 0)
        {
          v27 = i;
          break;
        }
      }
      v29 = v14[3];
      if (v29)
      {
        v30 = v16 + a4;
        v31 = v24;
        do
        {
          v32 = &v31[v29 >> 1];
          v34 = *v32;
          v33 = v32 + 1;
          v35 = sub_22E78DFF0((_QWORD *)a1, v17, v34);
          result = sub_22F1E3C34(*(_QWORD **)(a1 + 80), v30, v35);
          if ((_DWORD)result)
          {
            v29 >>= 1;
          }
          else
          {
            v31 = v33;
            v29 += ~(v29 >> 1);
          }
        }
        while (v29);
        v24 = (unsigned int *)v14[2];
        v36 = v14[3];
      }
      else
      {
        v36 = 0;
        v31 = v24;
      }
      for (j = &v31[v31 != &v24[v36]]; v27 != j; ++v27)
      {
        v38 = sub_22E768FE0(a1, v14[1], *v27);
        result = sub_22E77F870((_QWORD *)a1, v38);
        v39 = result;
        v40 = *(unsigned int *)(a5 + 8);
        if (v40 >= *(unsigned int *)(a5 + 12))
        {
          result = llvm::SmallVectorBase<unsigned int>::grow_pod();
          v40 = *(unsigned int *)(a5 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a5 + 8 * v40) = v39;
        ++*(_DWORD *)(a5 + 8);
      }
    }
  }
  return result;
}

BOOL sub_22E783D64(uint64_t a1, _BYTE *a2, unint64_t a3)
{
  unint64_t v3;
  _BOOL8 v6;
  _QWORD *v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  llvm *v29;
  uint64_t v30;
  unsigned int v31;
  unsigned __int8 *v32;
  unsigned int v33;
  int v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int v47;
  unint64_t v48;
  unint64_t v49;
  void **v50;
  const void **v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  _WORD *v62;
  int v63;
  int *v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  llvm *v69;
  unsigned int v71;
  unsigned int *v72;
  unsigned int v73;
  int v74;
  void *v75;
  llvm *v76;
  unsigned int *v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  char v81;
  uint64_t v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  llvm *v88;
  int v89;
  _BYTE *v90;
  _BYTE *v91;
  uint64_t v92;
  int v93;
  _BYTE v94[64];
  void **p_dst;
  llvm *v96;
  uint64_t v97;
  unsigned int v98;
  __int128 v99;
  unsigned __int8 *v100;
  void **v101;
  llvm *v102;
  unint64_t v103;
  uint64_t v104;
  void *__dst;
  uint64_t v106;
  _BYTE v107[16];
  void *v108;
  uint64_t v109;
  _QWORD v110[66];

  v110[64] = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return 0;
  v3 = a3;
  v90 = a2;
  v108 = 0;
  v6 = 0;
  if (sub_22E7924D8((uint64_t *)(a1 + 3656), &v90, &v108))
  {
    v7 = v108;
    if (v108 != (void *)(*(_QWORD *)(a1 + 3656) + 24 * *(unsigned int *)(a1 + 3672)))
    {
      v84 = a1;
      v85 = a1 + 24;
      v86 = (uint64_t)a2;
      (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 160))(a1 + 24);
      v108 = v110;
      v109 = 0x4000000000;
      v90 = v94;
      v91 = v94;
      v92 = 8;
      v93 = 0;
      v8 = v7 + 1;
      __dst = v107;
      v106 = 0x400000000;
      v9 = v7[2];
      if (v9 >= 8 && ((v9 & 4) == 0 || (v10 = v9 & 0xFFFFFFFFFFFFFFF8) == 0 || *(_DWORD *)(v10 + 8)))
        sub_22E792578(v7 + 1);
      v11 = *v8;
      v87 = v3;
      if ((unint64_t)*v8 >= 4)
      {
        v12 = v11 & 0xFFFFFFFFFFFFFFFCLL;
        if ((v11 & 2) != 0 && v12)
        {
          v13 = *(_DWORD *)(v12 + 8);
          if (!v13)
            goto LABEL_64;
        }
        else
        {
          if ((v11 & 2) == 0)
            goto LABEL_64;
          v13 = *(_DWORD *)(v12 + 8);
        }
        if (v13 >= 5)
        {
          v14 = sub_22E792774(v7 + 1);
          if (!v14)
          {
            v14 = operator new();
            *(_OWORD *)v14 = 0u;
            *(_OWORD *)(v14 + 16) = 0u;
            *(_OWORD *)(v14 + 28) = 0u;
          }
          v15 = *v8;
          if ((*v8 & 2) != 0)
          {
            v18 = v15 & 0xFFFFFFFFFFFFFFFCLL;
            v17 = *(char **)v18;
            v16 = *(_QWORD *)v18 + 8 * *(unsigned int *)(v18 + 8);
          }
          else
          {
            v16 = (uint64_t)&v8[v15 > 3];
            v17 = (char *)(v7 + 1);
          }
          v19 = &v17[8 * (sub_22E792774(v8) != 0)];
          if (v19 != (char *)v16)
          {
            while (1)
            {
              v20 = *(_QWORD *)v19 & 0xFFFFFFFFFFFFFFF8;
              v21 = *(_DWORD *)(v20 + 12);
              v101 = *(void ***)(v20 + 48);
              LODWORD(v102) = 0;
              HIDWORD(v102) = v21;
              v103 = v20 + 32;
              if (v21)
                break;
LABEL_41:
              v36 = *(_QWORD **)(v14 + 8);
              v35 = *(_QWORD *)(v14 + 16);
              if ((unint64_t)v36 >= v35)
              {
                v38 = *(_QWORD **)v14;
                v39 = ((uint64_t)v36 - *(_QWORD *)v14) >> 3;
                v40 = v39 + 1;
                if ((unint64_t)(v39 + 1) >> 61)
                  abort();
                v41 = v35 - (_QWORD)v38;
                if (v41 >> 2 > v40)
                  v40 = v41 >> 2;
                if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
                  v42 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v42 = v40;
                if (v42)
                {
                  if (v42 >> 61)
                    sub_22E3B3F8C();
                  v43 = (char *)operator new(8 * v42);
                }
                else
                {
                  v43 = 0;
                }
                v44 = &v43[8 * v39];
                *(_QWORD *)v44 = *(_QWORD *)v20;
                v37 = v44 + 8;
                if (v36 != v38)
                {
                  do
                  {
                    v45 = *--v36;
                    *((_QWORD *)v44 - 1) = v45;
                    v44 -= 8;
                  }
                  while (v36 != v38);
                  v36 = *(_QWORD **)v14;
                }
                *(_QWORD *)v14 = v44;
                *(_QWORD *)(v14 + 8) = v37;
                *(_QWORD *)(v14 + 16) = &v43[8 * v42];
                if (v36)
                  operator delete(v36);
              }
              else
              {
                *v36 = *(_QWORD *)v20;
                v37 = v36 + 1;
              }
              *(_QWORD *)(v14 + 8) = v37;
              MEMORY[0x2348A0E9C](v20, 0x1070C40E64A1DB5);
              v19 += 8;
              if (v19 == (char *)v16)
                goto LABEL_59;
            }
            while (1)
            {
              v100 = (unsigned __int8 *)v101 + 2 * ((_DWORD)v102 == 0) + 4;
              v22 = sub_22E78CDE0((uint64_t *)&v100);
              v23 = sub_22E78CDE0((uint64_t *)&v100);
              *(_QWORD *)&v99 = sub_22E7694FC((uint64_t *)(v20 + 32), v100);
              *((_QWORD *)&v99 + 1) = v24;
              v104 = 0;
              v25 = sub_22E792964(*(_QWORD *)(v14 + 24), *(_DWORD *)(v14 + 40), (uint64_t)&v99, &v104);
              v26 = v104;
              if ((v25 & 1) == 0)
                break;
LABEL_31:
              p_dst = (void **)(v26 + 16);
              v96 = 0;
              v97 = 0;
              v98 = 0;
              if (v23 >= 4)
              {
                v31 = v23 >> 2;
                v32 = &v100[v22];
                do
                {
                  v33 = *(_DWORD *)v32;
                  v32 += 4;
                  v34 = sub_22E768FE0(*(_QWORD *)(v20 + 32), *(_QWORD *)(v20 + 40), v33);
                  sub_22E7695A0(&p_dst, v34);
                  --v31;
                }
                while (v31);
                v30 = v98;
                v29 = v96;
              }
              else
              {
                v29 = 0;
                v30 = 0;
              }
              llvm::deallocate_buffer(v29, (void *)(4 * v30));
              sub_22E792C88((unsigned __int16 **)&v101);
              if (!HIDWORD(v102))
                goto LABEL_41;
            }
            v27 = *(_DWORD *)(v14 + 32);
            v28 = *(_DWORD *)(v14 + 40);
            if (4 * v27 + 4 >= 3 * v28)
            {
              v28 *= 2;
            }
            else if (v28 + ~v27 - *(_DWORD *)(v14 + 36) > v28 >> 3)
            {
              goto LABEL_28;
            }
            sub_22E792A40(v14 + 24, v28);
            v104 = 0;
            sub_22E792964(*(_QWORD *)(v14 + 24), *(_DWORD *)(v14 + 40), (uint64_t)&v99, &v104);
            v26 = v104;
LABEL_28:
            ++*(_DWORD *)(v14 + 32);
            if (*(_DWORD *)v26 != -1 || *(_QWORD *)(v26 + 8) != 1)
              --*(_DWORD *)(v14 + 36);
            *(_OWORD *)v26 = v99;
            *(_QWORD *)(v26 + 16) = v26 + 32;
            *(_QWORD *)(v26 + 24) = 0x400000000;
            goto LABEL_31;
          }
LABEL_59:
          if ((*v8 & 2) != 0)
          {
            v46 = *v8 & 0xFFFFFFFFFFFFFFFCLL;
            v3 = v87;
            if (v46)
              *(_DWORD *)(v46 + 8) = 0;
          }
          else
          {
            *v8 = 0;
            v3 = v87;
          }
          sub_22E792850((uint64_t)v8, v14 | 4);
        }
      }
LABEL_64:
      sub_22E76923C((uint64_t)&p_dst, v3);
      v88 = v96;
      v89 = (int)p_dst;
      v101 = p_dst;
      v102 = v96;
      v47 = sub_22E76930C((uint64_t)&v101);
      v48 = sub_22E792774(v8);
      if (!v48
        || (v49 = v48,
            p_dst = 0,
            !sub_22E792964(*(_QWORD *)(v48 + 24), *(_DWORD *)(v48 + 40), (uint64_t)&v101, &p_dst))
        || (v50 = p_dst, p_dst == (void **)(*(_QWORD *)(v49 + 24) + 48 * *(unsigned int *)(v49 + 40)))
        || (v51 = (const void **)(p_dst + 2), p_dst + 2 == &__dst))
      {
LABEL_77:
        v96 = 0;
        v97 = 0;
        p_dst = &__dst;
        v98 = 0;
        v55 = *v8;
        if ((*v8 & 2) != 0)
        {
          v58 = v55 & 0xFFFFFFFFFFFFFFFCLL;
          v57 = *(uint64_t **)v58;
          v56 = *(_QWORD *)v58 + 8 * *(unsigned int *)(v58 + 8);
        }
        else
        {
          v56 = (uint64_t)&v8[v55 > 3];
          v57 = v8;
        }
        v59 = &v57[sub_22E792774(v8) != 0];
        if (v59 == (uint64_t *)v56)
        {
          v76 = 0;
          v75 = 0;
        }
        else
        {
          do
          {
            v60 = *v59 & 0xFFFFFFFFFFFFFFF8;
            v61 = *(unsigned int *)(*(_QWORD *)(v60 + 16) + 4 * ((*(_DWORD *)(v60 + 8) - 1) & v47));
            if ((_DWORD)v61)
            {
              v62 = (_WORD *)(*(_QWORD *)(v60 + 24) + v61);
              v63 = (unsigned __int16)*v62;
              if (*v62)
              {
                v64 = (int *)(v62 + 1);
                while (1)
                {
                  v65 = *v64;
                  *(_QWORD *)&v99 = v64 + 1;
                  v66 = sub_22E78CDE0((uint64_t *)&v99);
                  v67 = sub_22E78CDE0((uint64_t *)&v99);
                  v68 = v99;
                  if (v65 == v47
                    && v89 == sub_22E7694FC((uint64_t *)(v60 + 32), (unsigned __int8 *)v99)
                    && v69 == v88)
                  {
                    break;
                  }
                  v64 = (int *)(v68 + v67 + v66);
                  *(_QWORD *)&v99 = v64;
                  if (!--v63)
                    goto LABEL_95;
                }
                if (v68 && v67 >= 4)
                {
                  v71 = v67 >> 2;
                  v72 = (unsigned int *)(v68 + v66);
                  do
                  {
                    v73 = *v72++;
                    v74 = sub_22E768FE0(*(_QWORD *)(v60 + 32), *(_QWORD *)(v60 + 40), v73);
                    sub_22E7695A0(&p_dst, v74);
                    --v71;
                  }
                  while (v71);
                }
              }
            }
LABEL_95:
            ++v59;
          }
          while (v59 != (uint64_t *)v56);
          v75 = (void *)(4 * v98);
          v76 = v96;
        }
        llvm::deallocate_buffer(v76, v75);
        v77 = (unsigned int *)__dst;
        if ((_DWORD)v106)
        {
          v78 = 4 * v106;
          do
          {
            v79 = (_QWORD *)sub_22E77F870((_QWORD *)v84, *v77);
            if (v79[5] == v87)
            {
              v80 = v79;
              sub_22E3BA850((uint64_t)&v90, v79);
              if (v81)
              {
                v82 = v109;
                if (v109 >= (unint64_t)HIDWORD(v109))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v82 = v109;
                }
                *((_QWORD *)v108 + v82) = v80;
                LODWORD(v109) = v109 + 1;
              }
            }
            ++v77;
            v78 -= 4;
          }
          while (v78);
          v77 = (unsigned int *)__dst;
        }
        if (v77 != (unsigned int *)v107)
          free(v77);
        ++*(_DWORD *)(v84 + 7436);
        sub_22EFCC744(v86, v87, (uint64_t *)v108, v109);
        v6 = (_DWORD)v109 != 0;
        if (v91 != v90)
          free(v91);
        if (v108 != v110)
          free(v108);
        (*(void (**)(uint64_t))(*(_QWORD *)v85 + 168))(v85);
        return v6;
      }
      v52 = *((unsigned int *)p_dst + 6);
      v53 = v106;
      if (v106 >= v52)
      {
        if ((_DWORD)v52)
          memmove(__dst, *v51, 4 * v52);
        goto LABEL_76;
      }
      if (HIDWORD(v106) < v52)
      {
        LODWORD(v106) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      else if ((_DWORD)v106)
      {
        memmove(__dst, *v51, 4 * v106);
LABEL_72:
        v54 = *((unsigned int *)v50 + 6);
        if (v53 != v54)
          memcpy((char *)__dst + 4 * v53, (char *)*v51 + 4 * v53, (_BYTE *)*v51 + 4 * v54 - ((_BYTE *)*v51 + 4 * v53));
LABEL_76:
        LODWORD(v106) = v52;
        goto LABEL_77;
      }
      v53 = 0;
      goto LABEL_72;
    }
  }
  return v6;
}

BOOL sub_22E7845D0(uint64_t a1, _BYTE *a2, unint64_t a3)
{
  return sub_22E783D64(a1 - 24, a2, a3);
}

uint64_t sub_22E7845D8(uint64_t result, _WORD *a2)
{
  uint64_t v3;
  int v4;
  void **v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  int *v14;
  int *v16;
  int *v17;
  int v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t *i;
  unint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned __int8 *v30;
  unsigned int v31;
  unsigned __int8 *v32;
  unsigned int v33;
  int v34;
  unsigned int *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  llvm *v40;
  unsigned int v41;
  llvm *v42;
  unsigned int v43;
  llvm *v44;
  uint64_t v45;
  llvm *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  llvm *v53;
  uint64_t v54;
  unsigned int v55;
  unsigned __int8 *v56;
  unsigned __int16 *v57;
  int v58;
  int v59;
  unint64_t v60;
  void **v61;
  llvm *v62;
  uint64_t v63;
  unsigned int v64;
  void *v65;
  uint64_t v66;
  _QWORD v67[3];

  v67[2] = *MEMORY[0x24BDAC8D0];
  if ((a2[4] & 0x100) != 0)
  {
    v3 = result;
    v65 = a2;
    v61 = 0;
    v4 = sub_22E7924D8((uint64_t *)(result + 3656), &v65, &v61);
    v5 = v61;
    if (!v4)
      v5 = (void **)(*(_QWORD *)(v3 + 3656) + 24 * *(unsigned int *)(v3 + 3672));
    v53 = 0;
    v54 = 0;
    v55 = 0;
    v6 = (uint64_t *)(v5 + 1);
    v65 = v67;
    v66 = 0x400000000;
    v64 = 0;
    v62 = 0;
    v63 = 0;
    v61 = &v65;
    v7 = (unint64_t)v5[2];
    if (v7 >= 8 && ((v7 & 4) == 0 || (v8 = v7 & 0xFFFFFFFFFFFFFFF8) == 0 || *(_DWORD *)(v8 + 8)))
      sub_22E792578(v6);
    v9 = sub_22E792774(v6);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 24);
      v11 = *(unsigned int *)(v9 + 40);
      v12 = (int *)(v10 + 48 * v11);
      if (*(_DWORD *)(v9 + 32))
      {
        if ((_DWORD)v11)
        {
          v13 = 48 * v11;
          v14 = *(int **)(v9 + 24);
          while (*v14 == -1 && (unint64_t)(*((_QWORD *)v14 + 1) - 1) <= 1)
          {
            v14 += 12;
            v13 -= 48;
            if (!v13)
              goto LABEL_18;
          }
        }
        else
        {
          v14 = *(int **)(v9 + 24);
        }
      }
      else
      {
LABEL_18:
        v14 = (int *)(v10 + 48 * v11);
      }
      v16 = (int *)(v10 + 48 * v11);
LABEL_21:
      while (v14 != v16)
      {
        sub_22F2BD9E8((uint64_t)(v14 + 4), &v61);
        v17 = v14 + 12;
        while (v17 != v12)
        {
          v18 = *v17;
          v19 = *((_QWORD *)v17 + 1) - 1;
          v17 += 12;
          if (v18 != -1 || v19 >= 2)
          {
            v14 = v17 - 12;
            goto LABEL_21;
          }
        }
        v14 = v12;
      }
    }
    v21 = *v6;
    if ((*v6 & 2) != 0)
    {
      v24 = v21 & 0xFFFFFFFFFFFFFFFCLL;
      v23 = *(uint64_t **)v24;
      v22 = *(_QWORD *)v24 + 8 * *(unsigned int *)(v24 + 8);
    }
    else
    {
      v22 = (uint64_t)&v6[v21 > 3];
      v23 = v6;
    }
    for (i = &v23[sub_22E792774(v6) != 0]; i != (uint64_t *)v22; ++i)
    {
      v26 = *i & 0xFFFFFFFFFFFFFFF8;
      v27 = *(_DWORD *)(v26 + 12);
      v57 = *(unsigned __int16 **)(v26 + 48);
      v58 = 0;
      v59 = v27;
      v60 = v26 + 32;
      while (v59)
      {
        v56 = (unsigned __int8 *)&v57[(v58 == 0) + 2];
        v28 = sub_22E78CDE0((uint64_t *)&v56);
        v29 = sub_22E78CDE0((uint64_t *)&v56);
        v30 = v56;
        sub_22E7694FC((uint64_t *)(v26 + 32), v56);
        if (v29 >= 4)
        {
          v31 = v29 >> 2;
          v32 = &v30[v28];
          do
          {
            v33 = *(_DWORD *)v32;
            v32 += 4;
            v34 = sub_22E768FE0(*(_QWORD *)(v26 + 32), *(_QWORD *)(v26 + 40), v33);
            sub_22E7695A0(&v61, v34);
            --v31;
          }
          while (v31);
        }
        sub_22E792C88(&v57);
      }
    }
    llvm::deallocate_buffer(v62, (void *)(4 * v64));
    v35 = (unsigned int *)v65;
    if ((_DWORD)v66)
    {
      v36 = 4 * v66;
      do
      {
        v37 = sub_22E77F870((_QWORD *)v3, *v35);
        v61 = *(void ***)(v37 + 40);
        v38 = sub_22F2BDA58((uint64_t)&v53, (uint64_t *)&v61);
        v39 = *((unsigned int *)v38 + 4);
        if (v39 >= *((unsigned int *)v38 + 5))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v39 = *((unsigned int *)v38 + 4);
        }
        *(_QWORD *)(v38[1] + 8 * v39) = v37;
        ++*((_DWORD *)v38 + 4);
        ++v35;
        v36 -= 4;
      }
      while (v36);
      v35 = (unsigned int *)v65;
    }
    if (v35 != (unsigned int *)v67)
      free(v35);
    ++*(_DWORD *)(v3 + 7436);
    v40 = v53;
    v41 = v55;
    v42 = (llvm *)((char *)v53 + 88 * v55);
    v43 = v55;
    v44 = v42;
    if ((_DWORD)v54)
    {
      if (v55)
      {
        v45 = 88 * v55;
        v44 = v53;
        while (*(_QWORD *)v44 >= 0xFFFFFFFFFFFFFFFELL)
        {
          v44 = (llvm *)((char *)v44 + 88);
          v45 -= 88;
          if (!v45)
          {
            v43 = v55;
            v44 = (llvm *)((char *)v53 + 88 * v55);
            goto LABEL_58;
          }
        }
        v43 = v55;
      }
      else
      {
        v43 = 0;
        v44 = v53;
      }
    }
LABEL_58:
    v46 = (llvm *)((char *)v53 + 88 * v43);
LABEL_59:
    while (v44 != v46)
    {
      sub_22EFCC744((uint64_t)a2, *(_QWORD *)v44, *((uint64_t **)v44 + 1), *((unsigned int *)v44 + 4));
      v47 = (unint64_t *)((char *)v44 + 88);
      while (v47 != (unint64_t *)v42)
      {
        v48 = *v47;
        v47 += 11;
        if (v48 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v44 = (llvm *)(v47 - 11);
          goto LABEL_59;
        }
      }
      v44 = v42;
    }
    a2[4] &= ~0x100u;
    if (v41)
    {
      v49 = 88 * v41;
      v50 = (char *)v40 + 24;
      do
      {
        if (*((_QWORD *)v50 - 3) <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v51 = (char *)*((_QWORD *)v50 - 2);
          if (v50 != v51)
            free(v51);
        }
        v50 += 88;
        v49 -= 88;
      }
      while (v49);
      v52 = 88 * v41;
    }
    else
    {
      v52 = 0;
    }
    return llvm::deallocate_buffer(v40, (void *)v52);
  }
  return result;
}

uint64_t sub_22E784A4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = 0;
  v5 = a2;
  if (sub_22E7924D8((uint64_t *)a1, &v5, &v4))
    return v4;
  else
    return *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 16);
}

uint64_t sub_22E784AB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a1 + 136);
  if (a2)
  {
    if ((*(_DWORD *)(a2 + 28) & 0x7E) == 0x14)
    {
      v5 = sub_22F2781C0(a2);
      if (v5 != v6)
      {
        v7 = v5;
        v8 = v6;
        do
        {
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v3 + 40))(v3, v7);
          do
            v7 = *(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF8;
          while (v7 && (*(_DWORD *)(v7 + 28) & 0x7F) != 0x18);
        }
        while (v7 != v8);
      }
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, a2);
}

_QWORD *sub_22E784B50(_QWORD *result, size_t a2, uint64_t *a3)
{
  const void *v5;
  llvm::raw_ostream *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::raw_ostream *v10;
  _WORD *v11;
  llvm::raw_ostream *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  const char *v17;
  const char *v18;
  _BYTE *v19;

  if (*((_DWORD *)a3 + 2))
  {
    v5 = result;
    v6 = (llvm::raw_ostream *)llvm::errs((llvm *)result);
    result = (_QWORD *)*((_QWORD *)v6 + 4);
    if (a2 <= *((_QWORD *)v6 + 3) - (_QWORD)result)
    {
      if (a2)
      {
        memcpy(result, v5, a2);
        result = (_QWORD *)(*((_QWORD *)v6 + 4) + a2);
        *((_QWORD *)v6 + 4) = result;
      }
    }
    else
    {
      v6 = (llvm::raw_ostream *)llvm::raw_ostream::write(v6, (const char *)v5);
      result = (_QWORD *)*((_QWORD *)v6 + 4);
    }
    if (*((_QWORD *)v6 + 3) - (_QWORD)result > 1uLL)
    {
      *(_WORD *)result = 2618;
      *((_QWORD *)v6 + 4) += 2;
    }
    else
    {
      result = (_QWORD *)llvm::raw_ostream::write(v6, ":\n");
    }
    v7 = *((unsigned int *)a3 + 2);
    if ((_DWORD)v7)
    {
      v8 = *a3;
      v9 = *a3 + 16 * v7;
      do
      {
        v10 = (llvm::raw_ostream *)llvm::errs((llvm *)result);
        v11 = (_WORD *)*((_QWORD *)v10 + 4);
        if (*((_QWORD *)v10 + 3) - (_QWORD)v11 > 1uLL)
        {
          *v11 = 8224;
          *((_QWORD *)v10 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v10, "  ");
        }
        v12 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
        v13 = (_DWORD *)*((_QWORD *)v12 + 4);
        if (*((_QWORD *)v12 + 3) - (_QWORD)v13 > 3uLL)
        {
          *v13 = 540945696;
          *((_QWORD *)v12 + 4) += 4;
        }
        else
        {
          v12 = (llvm::raw_ostream *)llvm::raw_ostream::write(v12, " -> ");
        }
        v14 = *(_QWORD *)(v8 + 8);
        v17 = *(const char **)(v14 + 8);
        v15 = v14 + 8;
        v16 = v17;
        if (*(char *)(v15 + 23) >= 0)
          v18 = (const char *)v15;
        else
          v18 = v16;
        result = (_QWORD *)llvm::raw_ostream::write(v12, v18);
        v19 = (_BYTE *)result[4];
        if ((_BYTE *)result[3] == v19)
        {
          result = (_QWORD *)llvm::raw_ostream::write((llvm::raw_ostream *)result, "\n");
        }
        else
        {
          *v19 = 10;
          ++result[4];
        }
        v8 += 16;
      }
      while (v8 != v9);
    }
  }
  return result;
}

_QWORD *sub_22E784D28(_QWORD *result, size_t a2, uint64_t *a3)
{
  const void *v5;
  llvm::raw_ostream *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::raw_ostream *v10;
  _WORD *v11;
  llvm::raw_ostream *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  const char *v17;
  const char *v18;
  _BYTE *v19;

  if (*((_DWORD *)a3 + 2))
  {
    v5 = result;
    v6 = (llvm::raw_ostream *)llvm::errs((llvm *)result);
    result = (_QWORD *)*((_QWORD *)v6 + 4);
    if (a2 <= *((_QWORD *)v6 + 3) - (_QWORD)result)
    {
      if (a2)
      {
        memcpy(result, v5, a2);
        result = (_QWORD *)(*((_QWORD *)v6 + 4) + a2);
        *((_QWORD *)v6 + 4) = result;
      }
    }
    else
    {
      v6 = (llvm::raw_ostream *)llvm::raw_ostream::write(v6, (const char *)v5);
      result = (_QWORD *)*((_QWORD *)v6 + 4);
    }
    if (*((_QWORD *)v6 + 3) - (_QWORD)result > 1uLL)
    {
      *(_WORD *)result = 2618;
      *((_QWORD *)v6 + 4) += 2;
    }
    else
    {
      result = (_QWORD *)llvm::raw_ostream::write(v6, ":\n");
    }
    v7 = *((unsigned int *)a3 + 2);
    if ((_DWORD)v7)
    {
      v8 = *a3;
      v9 = *a3 + 16 * v7;
      do
      {
        v10 = (llvm::raw_ostream *)llvm::errs((llvm *)result);
        v11 = (_WORD *)*((_QWORD *)v10 + 4);
        if (*((_QWORD *)v10 + 3) - (_QWORD)v11 > 1uLL)
        {
          *v11 = 8224;
          *((_QWORD *)v10 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v10, "  ");
        }
        v12 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
        v13 = (_DWORD *)*((_QWORD *)v12 + 4);
        if (*((_QWORD *)v12 + 3) - (_QWORD)v13 > 3uLL)
        {
          *v13 = 540945696;
          *((_QWORD *)v12 + 4) += 4;
        }
        else
        {
          v12 = (llvm::raw_ostream *)llvm::raw_ostream::write(v12, " -> ");
        }
        v14 = *(_QWORD *)(v8 + 8);
        v17 = *(const char **)(v14 + 8);
        v15 = v14 + 8;
        v16 = v17;
        if (*(char *)(v15 + 23) >= 0)
          v18 = (const char *)v15;
        else
          v18 = v16;
        result = (_QWORD *)llvm::raw_ostream::write(v12, v18);
        v19 = (_BYTE *)result[4];
        if ((_BYTE *)result[3] == v19)
        {
          result = (_QWORD *)llvm::raw_ostream::write((llvm::raw_ostream *)result, "\n");
        }
        else
        {
          *v19 = 10;
          ++result[4];
        }
        v8 += 16;
      }
      while (v8 != v9);
    }
  }
  return result;
}

unint64_t *sub_22E784F00(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  uint64_t v6;
  int v7;
  size_t v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  unint64_t *v12;
  llvm::SmallPtrSetImplBase *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  int v22;
  _BYTE v23[32];
  _QWORD v24[2];
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;

  v6 = a1 + 24;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 160))(a1 + 24);
  v24[0] = a2;
  v24[1] = a3;
  v7 = 5381;
  if (a3)
  {
    v8 = a3;
    v9 = a2;
    do
    {
      v10 = *v9++;
      v7 = 33 * v7 + v10;
      --v8;
    }
    while (v8);
  }
  v25 = v7;
  v26 = 0;
  v27 = v6 + 7368;
  v28 = v6 + 7372;
  v29 = 0;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 56) + 1) & 1) != 0)
  {
    v11 = *(unsigned int *)(a1 + 184);
    if ((_DWORD)v11)
    {
      v15 = *(uint64_t **)(a1 + 176);
      v16 = 8 * v11 - 8;
      do
      {
        v17 = *v15++;
        if ((sub_22E785070((uint64_t)v24, v17) & 1) != 0)
          break;
        v18 = v16;
        v16 -= 8;
      }
      while (v18);
    }
  }
  else
  {
    v19 = v23;
    v20 = v23;
    v21 = 4;
    v22 = 0;
    if ((sub_22E76CA14(a1) & 1) != 0)
    {
      v14 = 0;
    }
    else if (sub_22E805850(*(_QWORD *)(a1 + 512), a2, a3, (llvm::SmallPtrSetImplBase *)&v19))
    {
      v14 = (llvm::SmallPtrSetImplBase *)&v19;
    }
    else
    {
      v14 = 0;
    }
    sub_22E809E0C(a1 + 144, (unsigned int (*)(uint64_t, unsigned int *))sub_22E78FCD8, (uint64_t)v24, v14);
    if (v20 != v19)
      free(v20);
  }
  v12 = v29;
  sub_22E768F5C((_QWORD *)a1, v29);
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 168))(v6);
  return v12;
}

uint64_t sub_22E785070(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t v8;
  _WORD *v9;
  int v10;
  int *v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  _WORD *v15;
  char *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t **v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t **v44;
  uint64_t **v45;
  uint64_t **i;
  uint64_t **v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  uint64_t *v57;
  int v58;
  void *__p;
  uint64_t **v60;
  uint64_t **v61;
  char *v62;
  _QWORD *v63;
  void *v64;
  uint64_t v65;
  _BYTE v66[32];
  void *__s1;
  void *v68;
  uint64_t v69;
  _QWORD v70[6];

  v70[4] = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 340) <= *(_DWORD *)(a1 + 20))
    return 1;
  v3 = *(_QWORD *)(a2 + 1736);
  if (!v3)
    return 0;
  v5 = *(unsigned int **)(v3 + 24);
  v6 = *(uint64_t **)(a1 + 40);
  ++**(_DWORD **)(a1 + 24);
  v7 = *(_DWORD *)(a1 + 16);
  v8 = *(unsigned int *)(*(_QWORD *)(v3 + 8) + 4 * ((*(_DWORD *)v3 - 1) & v7));
  if (!(_DWORD)v8)
    return 0;
  v9 = (_WORD *)(*(_QWORD *)(v3 + 16) + v8);
  v10 = (unsigned __int16)*v9;
  if (!*v9)
    return 0;
  v11 = (int *)(v9 + 1);
  while (1)
  {
    v12 = *v11;
    __s1 = v11 + 1;
    v13 = sub_22E78CDE0((uint64_t *)&__s1);
    v14 = sub_22E78CDE0((uint64_t *)&__s1);
    v15 = __s1;
    if (v12 == v7 && v13 - 1 == *(_QWORD *)(a1 + 8) && (v13 == 1 || !memcmp(__s1, *(const void **)a1, v13 - 1)))
      break;
    v11 = (int *)((char *)v15 + v14 + v13);
    __s1 = v11;
    if (!--v10)
      return 0;
  }
  if (!v15)
    return 0;
  v17 = (char *)v15 + v13;
  ++**(_DWORD **)(a1 + 32);
  v18 = *(_DWORD *)v17;
  if (!v6)
    v6 = (uint64_t *)sub_22E4C9F04((llvm::StringMapImpl *)(*((_QWORD *)v5 + 15) + 544), v15, v13 - 1);
  sub_22E768ED8((uint64_t)v5, v6);
  sub_22E768F5C(v5, (unint64_t *)v6);
  v19 = sub_22E768E34((uint64_t)v5, a2, v18 >> 1);
  v20 = v19;
  if ((v18 & 1) == 0)
  {
    *(_QWORD *)(*((_QWORD *)v5 + 496) + 8 * (v19 - 1)) = v6;
    v48 = *((_QWORD *)v5 + 8);
    if (v48)
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v48 + 24))(v48, v20, v6);
    goto LABEL_36;
  }
  v21 = *((_WORD *)v17 + 2);
  v22 = *((unsigned __int16 *)v17 + 3) >> 1;
  if ((*((_WORD *)v17 + 3) & 2) != 0 && (*v6 & 0x1FF) != 5)
    *v6 = *v6 & 0xFFFFFFFBFFFFFE00 | 0x400000005;
  v23 = *(_DWORD *)(a2 + 4);
  if (v23 >= 2 && v23 != 5)
    *v6 = *v6 & 0xFFFFFFFFFE0001FFLL | ((unint64_t)v21 << 9);
  if ((v22 & 2) != 0)
  {
    *v6 |= 0xA0000000uLL;
    if ((v22 & 8) != 0)
      goto LABEL_20;
  }
  else if ((v22 & 8) != 0)
  {
LABEL_20:
    v54 = v19;
    v53 = *((unsigned int *)v17 + 2);
    v57 = v6;
    v58 = 0;
    sub_22E6544B4((uint64_t)(v5 + 1180), &v57, &v58, (uint64_t)&v55);
    v24 = v55;
    if (v56)
    {
      v64 = v66;
      v65 = 0x200000000;
      __s1 = v6;
      v68 = v70;
      v69 = 0x200000000;
      v25 = (uint64_t **)*((_QWORD *)v5 + 594);
      v26 = *((_QWORD *)v5 + 595);
      if ((unint64_t)v25 >= v26)
      {
        v37 = *((_QWORD *)v5 + 593);
        v38 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v25 - v37) >> 3);
        if ((unint64_t)(v38 + 1) > 0x492492492492492)
          abort();
        v52 = v55;
        v39 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v26 - v37) >> 3);
        v40 = 2 * v39;
        if (2 * v39 <= v38 + 1)
          v40 = v38 + 1;
        if (v39 >= 0x249249249249249)
          v41 = 0x492492492492492;
        else
          v41 = v40;
        v63 = v5 + 1190;
        if (v41 > 0x492492492492492)
          sub_22E3B3F8C();
        v42 = 56 * v41;
        v43 = (char *)operator new(56 * v41);
        v44 = (uint64_t **)&v43[56 * v38];
        __p = v43;
        v60 = v44;
        *v44 = v6;
        v44[1] = (uint64_t *)(v44 + 3);
        v44[2] = (uint64_t *)0x200000000;
        v61 = v44 + 7;
        v62 = &v43[v42];
        sub_22F2BBE84((_QWORD *)v5 + 593, &__p);
        v27 = (_QWORD *)*((_QWORD *)v5 + 594);
        v45 = v60;
        for (i = v61; i != v45; i -= 7)
        {
          v47 = (uint64_t **)*(i - 6);
          if (i - 4 != v47)
            free(v47);
        }
        v24 = v52;
        if (__p)
          operator delete(__p);
      }
      else
      {
        *v25 = v6;
        v25[1] = (uint64_t *)(v25 + 3);
        v25[2] = (uint64_t *)0x200000000;
        if ((_DWORD)v69)
          sub_22F2BBD68((uint64_t)(v25 + 1), (uint64_t)&v68);
        v27 = v25 + 7;
      }
      *((_QWORD *)v5 + 594) = v27;
      if (v68 != v70)
        free(v68);
      v20 = v54;
      if (v64 != v66)
        free(v64);
      v28 = *((_QWORD *)v5 + 593);
      v29 = -1227133513 * ((unint64_t)(*((_QWORD *)v5 + 594) - v28) >> 3) - 1;
      *(_DWORD *)(v24 + 8) = v29;
    }
    else
    {
      v29 = *(_DWORD *)(v55 + 8);
      v28 = *((_QWORD *)v5 + 593);
      v20 = v54;
    }
    v30 = (unsigned int *)(v17 + 12);
    v31 = v14 - 12;
    v32 = v28 + 56 * v29;
    v33 = v32 + 8;
    v34 = *(_DWORD *)(v32 + 16);
    if (v34 >= *(_DWORD *)(v32 + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v34 = *(_DWORD *)(v33 + 8);
    }
    v35 = (uint64_t *)(*(_QWORD *)v33 + 16 * v34);
    *v35 = a2;
    v35[1] = v53;
    ++*(_DWORD *)(v33 + 8);
    goto LABEL_33;
  }
  v30 = (unsigned int *)(v17 + 8);
  v31 = v14 - 8;
LABEL_33:
  *(_QWORD *)(*((_QWORD *)v5 + 496) + 8 * (v20 - 1)) = v6;
  v36 = *((_QWORD *)v5 + 8);
  if (v36)
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v36 + 24))(v36, v20, v6);
  if (v31)
  {
    __s1 = &v69;
    v68 = (void *)0x400000000;
    do
    {
      v49 = *v30++;
      v50 = sub_22E768FE0((uint64_t)v5, a2, v49);
      v51 = v68;
      if (v68 >= (unint64_t)HIDWORD(v68))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v51 = v68;
      }
      *((_DWORD *)__s1 + v51) = v50;
      LODWORD(v68) = (_DWORD)v68 + 1;
      v31 -= 4;
    }
    while (v31);
    sub_22E769084(v5, (uint64_t)v6, (uint64_t)&__s1, 0);
    if (__s1 != &v69)
      free(__s1);
  }
LABEL_36:
  *(_QWORD *)(a1 + 40) = v6;
  return 1;
}

unint64_t *sub_22E78561C(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  return sub_22E784F00(a1 - 40, a2, a3);
}

uint64_t sub_22E785624(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  void **v5;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v9;
  char v10;
  uint64_t v11;
  int v12;

  v11 = *(_QWORD *)a2;
  v12 = 0;
  sub_22E7930C0((_DWORD *)a1, &v11, &v12, (uint64_t)&v9);
  v4 = v9;
  v5 = (void **)(a1 + 24);
  if (!v10)
    return (uint64_t)*v5 + 16 * *(unsigned int *)(v9 + 8);
  v6 = *(_OWORD **)(a1 + 32);
  if ((unint64_t)v6 >= *(_QWORD *)(a1 + 40))
  {
    v7 = sub_22E4D6CC4(v5, a2);
  }
  else
  {
    *v6 = *a2;
    v7 = v6 + 1;
  }
  *(_QWORD *)(a1 + 32) = v7;
  *(_DWORD *)(v4 + 8) = (((unint64_t)v7 - *(_QWORD *)(a1 + 24)) >> 4) - 1;
  return (uint64_t)(v7 - 1);
}

uint64_t sub_22E7856DC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v2 = result;
  v3 = *(unsigned int *)(result + 6216);
  if ((_DWORD)v3)
  {
    v5 = 0;
    v6 = 4 * v3;
    do
    {
      result = sub_22E77F870((_QWORD *)v2, *(unsigned int *)(*(_QWORD *)(v2 + 6208) + v5));
      if (result)
      {
        v7 = result;
        if ((*(_DWORD *)(result + 28) & 0x7Fu) - 39 <= 2)
        {
          v8 = *(unsigned int *)(a2 + 8);
          if (v8 >= *(unsigned int *)(a2 + 12))
          {
            result = llvm::SmallVectorBase<unsigned int>::grow_pod();
            v8 = *(unsigned int *)(a2 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a2 + 8 * v8) = v7;
          ++*(_DWORD *)(a2 + 8);
        }
      }
      v5 += 4;
    }
    while (v6 != v5);
  }
  *(_DWORD *)(v2 + 6216) = 0;
  return result;
}

uint64_t sub_22E785798(uint64_t a1, uint64_t a2)
{
  return sub_22E7856DC(a1 - 24, a2);
}

uint64_t sub_22E7857A0(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;

  v2 = *(_DWORD *)(result + 5672);
  if (v2)
  {
    v3 = result;
    v4 = v2 - 1;
    if (v2 != 1)
    {
      v6 = 0;
      do
      {
        result = sub_22F2B3CD0(v3, *(unsigned int *)(*(_QWORD *)(v3 + 5664) + 4 * v6));
        v7 = result;
        v8 = *(unsigned int *)(*(_QWORD *)(v3 + 5664) + 4 * (v6 + 1));
        v9 = *(unsigned int *)(a2 + 8);
        if (v9 >= *(unsigned int *)(a2 + 12))
        {
          result = llvm::SmallVectorBase<unsigned int>::grow_pod();
          v9 = *(unsigned int *)(a2 + 8);
        }
        v6 += 2;
        v10 = (uint64_t *)(*(_QWORD *)a2 + 16 * v9);
        *v10 = v7;
        v10[1] = v8;
        ++*(_DWORD *)(a2 + 8);
      }
      while (v6 < v4);
    }
    *(_DWORD *)(v3 + 5672) = 0;
  }
  return result;
}

unint64_t sub_22E785864(unint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int128 v8;
  unsigned int v10;
  uint64_t v11;
  _QWORD v12[2];
  int v13;

  if (*(_DWORD *)(result + 5944))
  {
    v10 = *(_DWORD *)(result + 5944);
    v11 = result;
    v2 = 0;
    do
    {
      v3 = sub_22E785944(v11, *(unsigned int *)(*(_QWORD *)(v11 + 5936) + 4 * v2));
      v4 = v2 + 2;
      v5 = sub_22E785944(v11, *(unsigned int *)(*(_QWORD *)(v11 + 5936) + 4 * (v2 + 1)));
      v2 += 3;
      v6 = *(_DWORD *)(*(_QWORD *)(v11 + 5936) + 4 * v4);
      v12[0] = v3;
      v12[1] = v5;
      v13 = v6;
      result = sub_22E5BBF6C(a2, (unint64_t)v12);
      v7 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8);
      v8 = *(_OWORD *)result;
      *(_QWORD *)(v7 + 16) = *(_QWORD *)(result + 16);
      *(_OWORD *)v7 = v8;
      ++*(_DWORD *)(a2 + 8);
    }
    while (v2 < v10);
    *(_DWORD *)(v11 + 5944) = 0;
  }
  return result;
}

uint64_t sub_22E785944(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t result;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  unsigned int *v12;
  _DWORD *v13;
  unsigned int v14;
  _DWORD *v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  const void *v19;

  if (!(_DWORD)a2)
    return 0;
  v3 = *(_QWORD *)(a1 + 3968);
  if (v3 == *(_QWORD *)(a1 + 3976))
  {
    sub_22E769C10(a1, "no identifier table in AST file", 0x1FuLL);
    return 0;
  }
  else
  {
    v5 = (a2 - 1);
    result = *(_QWORD *)(v3 + 8 * v5);
    if (!result)
    {
      v7 = *(_DWORD **)(a1 + 3992);
      v8 = *(unsigned int *)(a1 + 4000);
      if (!(_DWORD)v8)
        goto LABEL_16;
      v9 = *(unsigned int *)(a1 + 4000);
      v10 = *(_DWORD **)(a1 + 3992);
      do
      {
        v11 = v9 >> 1;
        v12 = &v10[4 * (v9 >> 1)];
        v14 = *v12;
        v13 = v12 + 4;
        v9 += ~(v9 >> 1);
        if (v14 > a2)
          v9 = v11;
        else
          v10 = v13;
      }
      while (v9);
      if (v10 == v7)
LABEL_16:
        v15 = &v7[4 * v8];
      else
        v15 = v10 - 4;
      v19 = (const void *)(*(_QWORD *)(*((_QWORD *)v15 + 1) + 1728)
                         + *(unsigned int *)(*(_QWORD *)(*((_QWORD *)v15 + 1) + 1680)
                                           + 4 * (v5 - *(_DWORD *)(*((_QWORD *)v15 + 1) + 1688))));
      v16 = sub_22E78CDE0((uint64_t *)&v19);
      sub_22E78CDE0((uint64_t *)&v19);
      v17 = (uint64_t *)sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 120) + 544), v19, v16 - 1);
      *(_QWORD *)(*(_QWORD *)(a1 + 3968) + 8 * v5) = v17;
      sub_22E768ED8(a1, v17);
      v18 = *(_QWORD *)(a1 + 64);
      if (v18)
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v18 + 24))(v18, a2, v17);
      return *(_QWORD *)(*(_QWORD *)(a1 + 3968) + 8 * v5);
    }
  }
  return result;
}

unint64_t sub_22E785A94(uint64_t a1, uint64_t a2)
{
  return sub_22E785864(a1 - 24, a2);
}

uint64_t sub_22E785A9C(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;

  v3 = result;
  v4 = *(_DWORD *)(result + 5016);
  if (v4)
  {
    v6 = 0;
    do
    {
      result = sub_22E77F870((_QWORD *)v3, *(unsigned int *)(*(_QWORD *)(v3 + 5008) + 4 * v6));
      if (result)
      {
        if ((*(_DWORD *)(result + 28) & 0x7Fu) - 35 >= 3)
          v7 = 0;
        else
          v7 = result;
      }
      else
      {
        v7 = 0;
      }
      v8 = *(_QWORD *)(v3 + 5008);
      v9 = *(unsigned int *)(v8 + 4 * (v6 + 1));
      v10 = *(_DWORD *)(v8 + 4 * (v6 + 2)) != 0;
      v11 = *(unsigned int *)(a2 + 8);
      if (v11 >= *(unsigned int *)(a2 + 12))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = *(unsigned int *)(a2 + 8);
      }
      v6 += 3;
      v2 = v2 & 0xFFFFFF0000000000 | v9 | (v10 << 32);
      v12 = (uint64_t *)(*(_QWORD *)a2 + 16 * v11);
      *v12 = v7;
      v12[1] = v2;
      ++*(_DWORD *)(a2 + 8);
    }
    while (v6 < v4);
  }
  *(_DWORD *)(v3 + 5016) = 0;
  return result;
}

uint64_t sub_22E785B98(uint64_t a1, uint64_t a2)
{
  return sub_22E785A9C(a1 - 24, a2);
}

uint64_t sub_22E785BA0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;

  v2 = result;
  v3 = *(_DWORD *)(result + 5288);
  if (v3)
  {
    v5 = 0;
    do
    {
      result = sub_22E77F870((_QWORD *)v2, *(unsigned int *)(*(_QWORD *)(v2 + 5280) + 4 * v5));
      v6 = result;
      v7 = *(unsigned int *)(*(_QWORD *)(v2 + 5280) + 4 * (v5 + 1));
      v8 = *(unsigned int *)(a2 + 8);
      if (v8 >= *(unsigned int *)(a2 + 12))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = *(unsigned int *)(a2 + 8);
      }
      v5 += 2;
      v9 = (uint64_t *)(*(_QWORD *)a2 + 16 * v8);
      *v9 = v6;
      v9[1] = v7;
      ++*(_DWORD *)(a2 + 8);
    }
    while (v5 < v3);
  }
  *(_DWORD *)(v2 + 5288) = 0;
  return result;
}

void sub_22E785C5C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int *v17;
  _DWORD *v18;
  unsigned int v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __int128 v25;
  void **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  __int128 v37;
  unsigned int v38;

  v3 = *(unsigned int *)(a1 + 7072);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD *)(a1 + 7064);
    v31 = v4 + 32 * v3;
    do
    {
      v34 = v4;
      v35 = *(_DWORD *)(v4 + 16);
      if (v35)
      {
        v5 = 0;
        v33 = *(_QWORD *)v4;
        v6 = (uint64_t *)(v4 + 8);
        do
        {
          v7 = sub_22E768FE0(a1, v33, *(_QWORD *)(*v6 + 8 * v5));
          v36 = sub_22E77F870((_QWORD *)a1, v7);
          v8 = operator new();
          *(_OWORD *)(v8 + 16) = 0u;
          *(_OWORD *)(v8 + 32) = 0u;
          *(_OWORD *)(v8 + 48) = 0u;
          *(_OWORD *)(v8 + 64) = 0u;
          *(_OWORD *)(v8 + 80) = 0u;
          *(_OWORD *)(v8 + 96) = 0u;
          *(_QWORD *)(v8 + 112) = 0;
          *(_QWORD *)v8 = v8 + 16;
          *(_QWORD *)(v8 + 8) = 0x400000000;
          v38 = v5 + 2;
          v9 = sub_22E768FE0(a1, v33, *(_QWORD *)(*v6 + 8 * (v5 + 1)));
          v10 = sub_22E77F870((_QWORD *)a1, v9);
          v11 = 0;
          *(_QWORD *)(v8 + 112) = v10;
          if ((*(_BYTE *)(v10 + 29) & 0x80) != 0)
          {
            v12 = *(_DWORD **)(a1 + 2808);
            v13 = *(unsigned int *)(a1 + 2816);
            if ((_DWORD)v13)
            {
              v15 = *(unsigned int *)(a1 + 2816);
              v14 = *(_DWORD **)(a1 + 2808);
              do
              {
                v16 = v15 >> 1;
                v17 = &v14[4 * (v15 >> 1)];
                v19 = *v17;
                v18 = v17 + 4;
                v15 += ~(v15 >> 1);
                if (v19 > *(_DWORD *)(v10 - 4))
                  v15 = v16;
                else
                  v14 = v18;
              }
              while (v15);
            }
            else
            {
              v14 = *(_DWORD **)(a1 + 2808);
            }
            v20 = &v12[4 * v13];
            if (v14 == v12)
              v21 = v20;
            else
              v21 = v14 - 4;
            v11 = *((_QWORD *)v21 + 1);
          }
          v38 = v5 + 3;
          v22 = *(_QWORD *)(*v6 + 8 * (v5 + 2));
          if (v22 > (unint64_t)*(unsigned int *)(v8 + 12))
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          for (; (_DWORD)v22; LODWORD(v22) = v22 - 1)
          {
            sub_22E76BAA8(a1, v11, v6, &v38, (uint64_t)&v37);
            v23 = sub_22E4EF088(v8, (unint64_t)&v37, 1);
            v24 = *(_QWORD *)v8 + 24 * *(unsigned int *)(v8 + 8);
            v25 = *(_OWORD *)v23;
            *(_QWORD *)(v24 + 16) = *(_QWORD *)(v23 + 16);
            *(_OWORD *)v24 = v25;
            ++*(_DWORD *)(v8 + 8);
          }
          *(_QWORD *)&v37 = v36;
          *((_QWORD *)&v37 + 1) = v8;
          sub_22F2B3E04(a2, &v37);
          v26 = (void **)*((_QWORD *)&v37 + 1);
          *((_QWORD *)&v37 + 1) = 0;
          if (v26)
          {
            if (*v26 != v26 + 2)
              free(*v26);
            MEMORY[0x2348A0E9C](v26, 0x10A0C400EB28923);
          }
          v5 = v38;
        }
        while (v38 < v35);
      }
      v4 = v34 + 32;
    }
    while (v34 + 32 != v31);
    v27 = *(unsigned int *)(a1 + 7072);
    if ((_DWORD)v27)
    {
      v28 = *(_QWORD *)(a1 + 7064);
      v29 = 32 * v27;
      do
      {
        v30 = *(void **)(v28 + v29 - 24);
        if ((void *)(v28 + v29 - 8) != v30)
          free(v30);
        v29 -= 32;
      }
      while (v29);
    }
  }
  *(_DWORD *)(a1 + 7072) = 0;
}

uint64_t sub_22E785F20(uint64_t a1, unsigned int a2)
{
  if (!a2)
    return 0;
  if (*(_DWORD *)(a1 + 4184) >= a2)
    return *(_QWORD *)(*(_QWORD *)(a1 + 4176) + 8 * (a2 - 1));
  sub_22E769C10(a1 - 24, "submodule ID out of range in AST file", 0x25uLL);
  return 0;
}

void sub_22E785F70(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  uint64_t v16;

  if (a2)
  {
    if (*(_DWORD *)(a1 + 4208) >= a2)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 4200) + 8 * (a2 - 1));
      if (v5)
      {
        sub_22F420190(a3, v5);
        goto LABEL_7;
      }
    }
    else
    {
      sub_22E769C10(a1, "submodule ID out of range in AST file", 0x25uLL);
    }
  }
  if (*(_DWORD *)(a1 + 184))
  {
    v6 = **(_QWORD **)(a1 + 144);
    v7 = llvm::sys::path::filename();
    v9 = v8;
    v6 += 8;
    v10 = llvm::sys::path::filename();
    v12 = v11;
    v13 = llvm::sys::path::parent_path();
    v14 = *(_DWORD *)(v6 + 232);
    v15 = *(_OWORD *)(v6 + 216);
    *(_QWORD *)a3 = v7;
    *(_QWORD *)(a3 + 8) = v9;
    *(_QWORD *)(a3 + 16) = v13;
    *(_QWORD *)(a3 + 24) = v16;
    *(_QWORD *)(a3 + 32) = v10;
    *(_QWORD *)(a3 + 40) = v12;
    *(_OWORD *)(a3 + 48) = v15;
    *(_DWORD *)(a3 + 64) = v14;
    *(_QWORD *)(a3 + 72) = 0;
LABEL_7:
    *(_BYTE *)(a3 + 80) = 1;
    return;
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 80) = 0;
}

uint64_t sub_22E7860E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;

  v2 = *(_QWORD *)(a1 + 11016);
  v3 = *(unsigned int *)(a1 + 11032);
  if (!(_DWORD)v3)
  {
LABEL_2:
    v4 = (uint64_t *)(v2 + 16 * v3);
    goto LABEL_3;
  }
  LODWORD(v6) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v4 = (uint64_t *)(v2 + 16 * v6);
  v7 = *v4;
  if (*v4 != a2)
  {
    v8 = 1;
    while (v7 != -4096)
    {
      v9 = v6 + v8++;
      v6 = v9 & (v3 - 1);
      v7 = *(_QWORD *)(v2 + 16 * v6);
      if (v7 == a2)
      {
        v4 = (uint64_t *)(v2 + 16 * v6);
        goto LABEL_3;
      }
    }
    goto LABEL_2;
  }
LABEL_3:
  if (v4 == (uint64_t *)(v2 + 16 * v3))
    return 2;
  else
    return *((unsigned __int8 *)v4 + 8);
}

uint64_t sub_22E786160(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v5 = a2;
  v6 = 0;
  v3 = sub_22E793870((uint64_t *)(a1 + 10992), &v5, &v6);
  result = 2;
  if (v3)
  {
    if (v6 != *(_QWORD *)(a1 + 10992) + 16 * *(unsigned int *)(a1 + 11008))
      return *(unsigned __int8 *)(v6 + 8);
  }
  return result;
}

_QWORD *sub_22E7861C4(uint64_t a1, uint64_t a2)
{
  int v2;
  unsigned int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v2 = a2 & 7;
  if (v2 == 7)
  {
    v3 = *(_DWORD *)(a2 & 0xFFFFFFFFFFFFFFF8);
    if (v3 >= 3)
      v3 = 3;
    v2 = v3 | 8;
  }
  if ((v2 - 3) < 3)
    return sub_22E782300(a1);
  if (v2 == 6)
    return (_QWORD *)sub_22E7818B4(a1);
  if (v2 != 9)
    return 0;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(unsigned int *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v7 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v7);
  LODWORD(v8) = HIDWORD(v8);
  return (_QWORD *)sub_22E77BAB4(v6, v5, v8 >> 1);
}

_QWORD *sub_22E786254@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *result;

  sub_22E7862BC(a1);
  v5 = v4;
  *(_QWORD *)a2 = v4;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(unsigned int *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v8 + 1;
  HIDWORD(v9) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v8);
  LODWORD(v9) = HIDWORD(v9);
  *(_DWORD *)(a2 + 8) = sub_22E77BAB4(v6, v7, v9 >> 1);
  result = sub_22E7861C4(a1, v5);
  *(_QWORD *)(a2 + 16) = result;
  return result;
}

void sub_22E7862BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(unsigned int *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v2 + 1;
  __asm { BR              X13 }
}

uint64_t sub_22E786304@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 24) = v3 + 2;
  v6 = sub_22E768E34(v5, v4, *(_QWORD *)(a2 + 8 * v2));
  return sub_22E785944(v5, v6);
}

uint64_t sub_22E786358(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4;
  uint64_t v5;

  v5 = sub_22E78DF24(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), a3, a4);
  return sub_22EFC6C44((_QWORD *)(v4 + 15224), v5 & 7 | *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF0) + 8));
}

uint64_t sub_22E78638C(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4;
  uint64_t v5;

  v5 = sub_22E78DF24(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), a3, a4);
  return sub_22EFC6A3C((_QWORD *)(v4 + 15224), v5 & 7 | *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF0) + 8));
}

uint64_t sub_22E7863C0(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4;
  uint64_t v5;

  v5 = sub_22E78DF24(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), a3, a4);
  return sub_22EFC6B40((_QWORD *)(v4 + 15224), v5 & 7 | *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF0) + 8));
}

_BYTE *sub_22E7863F4()
{
  return sub_22E79390C();
}

uint64_t sub_22E786400@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 24) = v3 + 2;
  v6 = sub_22F2B0B3C(v5, v4, *(_QWORD *)(a2 + 8 * v2));
  return sub_22F2B3CD0(v5, v6);
}

uint64_t sub_22E78642C(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD **)(a1 + 8);
  v6 = sub_22E779F8C((uint64_t)v5, *(_QWORD *)(a1 + 16), a3, a4);
  v7 = sub_22E77F870(v5, v6);
  return sub_22F3AE65C((_QWORD *)(v4 + 15224), v7);
}

uint64_t sub_22E78645C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 24) = v3 + 2;
  v7 = sub_22E768E34(v6, v5, *(_QWORD *)(a2 + 8 * v2));
  v8 = sub_22E785944(v6, v7);
  return sub_22F3AE768((_QWORD *)(v4 + 15224), v8);
}

_DWORD *sub_22E78649C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  _QWORD v31[17];

  v31[16] = *MEMORY[0x24BDAC8D0];
  v3 = (_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(v3 - 2);
  v7 = v3 - 1;
  v6 = *((unsigned int *)v3 - 2);
  *((_DWORD *)v3 - 2) = v6 + 1;
  HIDWORD(v8) = *(_QWORD *)(v2 + 8 * v6);
  LODWORD(v8) = HIDWORD(v8);
  v9 = sub_22E77BAB4(v4, v5, v8 >> 1);
  v10 = *(v3 - 3);
  v11 = *(v3 - 2);
  v12 = *((unsigned int *)v3 - 2);
  *v7 = v12 + 1;
  HIDWORD(v8) = *(_QWORD *)(*v3 + 8 * v12);
  LODWORD(v8) = HIDWORD(v8);
  v13 = sub_22E77BAB4(v10, v11, v8 >> 1);
  v14 = *(v3 - 3);
  v15 = *(v3 - 2);
  v16 = *((unsigned int *)v3 - 2);
  *v7 = v16 + 1;
  HIDWORD(v8) = *(_QWORD *)(*v3 + 8 * v16);
  LODWORD(v8) = HIDWORD(v8);
  v17 = sub_22E77BAB4(v14, v15, v8 >> 1);
  v18 = *((unsigned int *)v3 - 2);
  *v7 = v18 + 1;
  v19 = *(_QWORD *)(*v3 + 8 * v18);
  v30 = 0;
  if (v19 >= 0x11uLL)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  for (; (_DWORD)v19; LODWORD(v19) = v19 - 1)
  {
    v20 = *(_QWORD *)(a1 + 8);
    v21 = sub_22E779F8C(v20, *(_QWORD *)(a1 + 16), (uint64_t)v3, (_DWORD *)v3 - 2);
    v22 = sub_22E77F870(v20, v21);
    v23 = v30;
    if (v30 >= 0x10uLL)
    {
      v28 = v22;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v22 = v28;
      v23 = v30;
    }
    v31[v23] = v22;
    ++v30;
  }
  v24 = *(unsigned int *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v24 + 1;
  v25 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v24))
  {
    if (*(_DWORD *)(v25 + 10984) == 3)
    {
      v29 = *(unsigned int *)(v25 + 10848);
      v26 = *(_QWORD *)(*(_QWORD *)(v25 + 10840) + 8 * v29 - 8);
      *(_DWORD *)(v25 + 10848) = v29 - 1;
    }
    else
    {
      v26 = sub_22E7B94C8();
      v25 = *(_QWORD *)(a1 + 8);
    }
  }
  else
  {
    v26 = 0;
  }
  return sub_22EFE8F48(*(_QWORD *)(v25 + 128), v9, v13, (uint64_t)v31, v30, v17, v26);
}

__n128 sub_22E7866D0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  __n128 *v8;
  __n128 *v9;
  __n128 result;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  v6 = *(unsigned int *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v6 + 1;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v6);
  if (v7 > (unint64_t)*(unsigned int *)(a2 + 12))
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  for (; (_DWORD)v7; ++*(_DWORD *)(a2 + 8))
  {
    sub_22E7827DC(a1);
    if (a3)
    {
      sub_22EF6871C((unsigned int *)&v11, (uint64_t)&v13);
      v11 = v13;
      v12 = v14;
    }
    LODWORD(v7) = v7 - 1;
    v8 = (__n128 *)sub_22E4EF088(a2, (unint64_t)&v11, 1);
    v9 = (__n128 *)(*(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8));
    result = *v8;
    v9[1].n128_u64[0] = v8[1].n128_u64[0];
    *v9 = result;
  }
  return result;
}

uint64_t sub_22E7867C0(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;

  v3 = result;
  v5 = result + 32;
  v4 = *(_QWORD *)(result + 32);
  v7 = (_DWORD *)(result + 24);
  v6 = *(unsigned int *)(result + 24);
  *(_DWORD *)(result + 24) = v6 + 1;
  v8 = *(_QWORD *)(v4 + 8 * v6);
  if ((((a2[2] & 0x7FFFFFFF8uLL) - *a2) >> 3) < v8)
  {
    sub_22E78E458(a2, *(_QWORD *)(*(_QWORD *)(result + 8) + 128), *(_QWORD *)(v4 + 8 * v6));
  }
  else if (!(_DWORD)v8)
  {
    return result;
  }
  do
  {
    result = sub_22E779F8C(*(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16), v5, v7);
    v9 = *(unsigned int *)(v3 + 24);
    *(_DWORD *)(v3 + 24) = v9 + 1;
    v10 = *(unsigned int *)(*(_QWORD *)(v3 + 32) + 8 * v9);
    v11 = (uint64_t *)a2[1];
    v12 = a2[2];
    a2[2] = v12 | 4;
    if ((unint64_t)v11 >= (v12 & 0xFFFFFFFFFFFFFFF8))
    {
      v14 = result;
      v13 = v10;
      sub_22E78E458(a2, *(_QWORD *)(*(_QWORD *)(v3 + 8) + 128), 1uLL);
      v10 = v13;
      result = v14;
      v11 = (uint64_t *)a2[1];
    }
    *v11 = v10 | (4 * result);
    a2[1] = (uint64_t)(v11 + 1);
    LODWORD(v8) = v8 - 1;
  }
  while ((_DWORD)v8);
  return result;
}

unint64_t sub_22E7868D0(uint64_t a1, uint64_t a2, _QWORD *a3, _DWORD *a4)
{
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;

  v8 = *a4;
  *a4 = v8 + 1;
  HIDWORD(v9) = *(_QWORD *)(*a3 + 8 * v8);
  LODWORD(v9) = HIDWORD(v9);
  v10 = sub_22E77BAB4(a1, a2, v9 >> 1);
  v11 = *a4;
  *a4 = v11 + 1;
  HIDWORD(v9) = *(_QWORD *)(*a3 + 8 * v11);
  LODWORD(v9) = HIDWORD(v9);
  return v10 | (unint64_t)(sub_22E77BAB4(a1, a2, v9 >> 1) << 32);
}

void sub_22E786954(uint64_t a1@<X0>, llvm::APInt *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  llvm::APInt *v15;
  int v16;
  unsigned int v17;
  unint64_t v18[5];

  v18[4] = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned int *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v4 + 1;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v4);
  v6 = ((unint64_t)v5 + 63) >> 6;
  v17 = 0;
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = ((unint64_t)v5 + 63) >> 6;
    do
    {
      v9 = *(unsigned int *)(a1 + 24);
      *(_DWORD *)(a1 + 24) = v9 + 1;
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v9);
      if (v7 >= 4)
      {
        v16 = v8;
        v14 = v5;
        v15 = a2;
        v12 = a1;
        v13 = v6;
        v11 = v10;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v11;
        a1 = v12;
        LODWORD(v8) = v16;
        v6 = v13;
        v5 = v14;
        a2 = v15;
        v7 = v17;
      }
      v18[v7] = v10;
      v7 = ++v17;
      LODWORD(v8) = v8 - 1;
    }
    while ((_DWORD)v8);
  }
  llvm::APInt::APInt(a2, v5, v6, v18);
}

void sub_22E786A90(uint64_t a1)
{
  unsigned int v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  char v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  int **v32;
  int *v33;
  int v34;
  _DWORD *v35;
  _DWORD *v36;
  int v37;
  uint64_t *v38;
  uint64_t **v39;
  uint64_t **v40;
  unsigned int v41;
  _DWORD *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52[2];
  uint64_t *v53;
  void *v54;
  uint64_t v55;
  _BYTE v56[512];
  uint64_t *v57;
  char v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v1 = *(_DWORD *)(a1 + 11192);
  if (v1)
  {
    v51 = 0;
    v3 = 0;
    v4 = *(_QWORD *)(a1 + 11184);
    v5 = v4 + 352 * v1;
    v6 = *(_QWORD *)(a1 + 128);
    v46 = v6 + 16208;
    v47 = v5;
    v45 = v6 + 16160;
    v48 = v6 + 2032;
    v49 = v6 + 16080;
    while (1)
    {
      v50 = *(_QWORD *)(v4 + 344);
      v7 = 8 * *(_QWORD *)(v4 + 16) - *(unsigned int *)(v4 + 32);
      v52[0] = v4;
      v52[1] = v7;
      v54 = v56;
      v55 = 0x4000000000;
      v8 = v3;
      while (1)
      {
        while (1)
        {
          sub_22E748020(v4, 1, (uint64_t)&v57);
          if ((v58 & 1) != 0)
          {
            v30 = v57;
LABEL_69:
            v57 = v30;
            sub_22E769A6C((uint64_t *)a1, &v57);
            if (v57)
              (*(void (**)(uint64_t *))(*v57 + 8))(v57);
LABEL_45:
            v18 = 1;
            goto LABEL_63;
          }
          if ((_DWORD)v57 != 2)
            break;
          sub_22E746760(v4, (uint64_t *)&v53);
          v30 = v53;
          if ((v58 & 1) != 0)
          {
            v31 = v57;
            v57 = 0;
            if (v31)
              (*(void (**)(uint64_t *))(*v31 + 8))(v31);
          }
          if (v30)
            goto LABEL_69;
        }
        if (!(_DWORD)v57)
        {
          sub_22E769C10(a1, "malformed block record in AST file", 0x22uLL);
          goto LABEL_45;
        }
        if ((_DWORD)v57 == 1)
          break;
        LODWORD(v55) = 0;
        llvm::BitstreamCursor::readRecord();
        v9 = v58;
        if ((v58 & 1) != 0)
        {
          v19 = v57;
          v57 = 0;
          v53 = v19;
          sub_22E769A6C((uint64_t *)a1, &v53);
          if (v53)
            (*(void (**)(uint64_t *))(*v53 + 8))(v53);
          v18 = 1;
        }
        else
        {
          switch((int)v57)
          {
            case 0:
              HIDWORD(v10) = *(_DWORD *)v54;
              LODWORD(v10) = *(_DWORD *)v54;
              v11 = sub_22E77BAB4(a1, v50, v10 >> 1);
              HIDWORD(v10) = *((_DWORD *)v54 + 2);
              LODWORD(v10) = HIDWORD(v10);
              v12 = v11 | (unint64_t)(sub_22E77BAB4(a1, v50, v10 >> 1) << 32);
              v13 = *((_BYTE *)v54 + 16);
              v14 = *((_QWORD *)v54 + 3) != 0;
              v15 = *((_QWORD *)v54 + 4) != 0;
              v16 = sub_22E3CD3D4(v48, 40, 3);
              v17 = v16;
              *(_QWORD *)(v16 + 8) = 0;
              *(_QWORD *)(v16 + 16) = 0;
              *(_QWORD *)v16 = v12;
              *(_BYTE *)(v16 + 32) = (v14 << 6) | (4 * (v13 & 7)) | (v15 << 7);
              if (v8 >= v51)
              {
                v20 = v8 - v3;
                v21 = v20 + 1;
                if ((unint64_t)(v20 + 1) >> 61)
                  abort();
                if (((char *)v51 - (char *)v3) >> 2 > v21)
                  v21 = ((char *)v51 - (char *)v3) >> 2;
                if ((unint64_t)((char *)v51 - (char *)v3) >= 0x7FFFFFFFFFFFFFF8)
                  v22 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v22 = v21;
                if (v22)
                {
                  if (v22 >> 61)
                    sub_22E3B3F8C();
                  v23 = (char *)operator new(8 * v22);
                }
                else
                {
                  v23 = 0;
                }
                v24 = (uint64_t *)&v23[8 * v20];
                *v24 = v17;
                v25 = v24 + 1;
                while (v8 != v3)
                {
                  v26 = *--v8;
                  *--v24 = v26;
                }
                v51 = (uint64_t *)&v23[8 * v22];
                if (v3)
                  operator delete(v3);
                v18 = 0;
                v3 = v24;
                v8 = v25;
              }
              else
              {
                v18 = 0;
                *v8++ = v16;
              }
              break;
            case 1:
              v53 = (uint64_t *)sub_22E77F870((_QWORD *)a1, *(unsigned int *)v54);
              v29 = v3[*((_QWORD *)v54 + 1)];
              *(_BYTE *)(v29 + 32) |= 0x20u;
              v18 = 0;
              *(_QWORD *)sub_22F29C4C0(v45, (unint64_t *)&v53) = v29;
              break;
            case 2:
            case 3:
              v53 = 0;
              v53 = (uint64_t *)sub_22E77F870((_QWORD *)a1, *(unsigned int *)v54);
              v28 = sub_22E77F870((_QWORD *)a1, *((unsigned int *)v54 + 2));
              v18 = 0;
              *(_QWORD *)sub_22F29C4C0(v46, (unint64_t *)&v53) = v28;
              break;
            default:
              v18 = 0;
              break;
          }
        }
        if ((v58 & 1) != 0)
        {
          v27 = v57;
          v57 = 0;
          if (v27)
            (*(void (**)(uint64_t *))(*v27 + 8))(v27);
        }
        if ((v9 & 1) != 0)
          goto LABEL_63;
      }
      v32 = (int **)v3;
      if (v3 != v8)
      {
        do
        {
          v33 = *v32;
          v34 = **v32;
          if (v34)
          {
            v57 = (uint64_t *)sub_22E677168(*(_QWORD *)(a1 + 80), v34);
            if ((_DWORD)v57)
            {
              v35 = sub_22E793B04(v49, &v57);
              v36 = v35;
              v37 = HIDWORD(v57);
              v39 = (uint64_t **)(v35 + 4);
              v38 = (uint64_t *)*((_QWORD *)v35 + 2);
              if (v38)
              {
                while (1)
                {
                  while (1)
                  {
                    v40 = (uint64_t **)v38;
                    v41 = *((_DWORD *)v38 + 8);
                    if (v41 <= HIDWORD(v57))
                      break;
                    v38 = *v40;
                    v39 = v40;
                    if (!*v40)
                      goto LABEL_57;
                  }
                  if (v41 >= HIDWORD(v57))
                    break;
                  v38 = v40[1];
                  if (!v38)
                  {
                    v39 = v40 + 1;
                    goto LABEL_57;
                  }
                }
              }
              else
              {
                v40 = (uint64_t **)(v35 + 4);
LABEL_57:
                v42 = operator new(0x30uLL);
                v42[8] = v37;
                *((_QWORD *)v42 + 5) = v33;
                *(_QWORD *)v42 = 0;
                *((_QWORD *)v42 + 1) = 0;
                *((_QWORD *)v42 + 2) = v40;
                *v39 = (uint64_t *)v42;
                v43 = **((_QWORD **)v36 + 1);
                if (v43)
                {
                  *((_QWORD *)v36 + 1) = v43;
                  v44 = *v39;
                }
                else
                {
                  v44 = (uint64_t *)v42;
                }
                sub_22E49FD00(*((uint64_t **)v36 + 2), v44);
                ++*((_QWORD *)v36 + 3);
              }
            }
          }
          ++v32;
        }
        while (v32 != (int **)v8);
      }
      v18 = 0;
LABEL_63:
      if (v54 != v56)
        free(v54);
      sub_22E78CE68(v52);
      if (!v18)
      {
        v4 += 352;
        if (v4 != v47)
          continue;
      }
      if (v3)
        operator delete(v3);
      return;
    }
  }
}

void sub_22E786FD4(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, unint64_t), uint64_t a4)
{
  uint64_t v4;
  unsigned int v9;
  unint64_t v10;
  void *__p;
  char v12;
  char v13;

  v4 = (*(_QWORD *)(a2 + 1152) - *(_QWORD *)(a2 + 1144)) >> 3;
  if ((_DWORD)v4)
  {
    v9 = 0;
    do
    {
      sub_22E76DF4C(a2, ++v9, (uint64_t)&__p);
      if (v13)
      {
        v10 = sub_22E76A92C(a1, a2, v9, 1) & 0xFFFFFFFFFFFFFFF8;
        if (v10)
          a3(a4, v10);
      }
      if (v12 < 0)
        operator delete(__p);
    }
    while ((_DWORD)v4 != v9);
  }
}

uint64_t sub_22E787084(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;
  unsigned int v6;
  int v7;
  __int128 v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  int v13;

  v12 = *a2;
  v13 = 0;
  sub_22F2BE82C(a1, &v12, &v13, (uint64_t)&v10);
  v4 = v10;
  if (!v11)
    return *(_QWORD *)(a1 + 72) + 16 * *(unsigned int *)(v10 + 8);
  v5 = *(_OWORD *)a2;
  v6 = *(_DWORD *)(a1 + 80);
  if (v6 >= *(_DWORD *)(a1 + 84))
  {
    v9 = *(_OWORD *)a2;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = v9;
    v6 = *(_DWORD *)(a1 + 80);
  }
  *(_OWORD *)(*(_QWORD *)(a1 + 72) + 16 * v6) = v5;
  v7 = *(_DWORD *)(a1 + 80);
  *(_DWORD *)(a1 + 80) = v7 + 1;
  *(_DWORD *)(v4 + 8) = v7;
  return *(_QWORD *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 80) - 16;
}

uint64_t sub_22E787154(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t i;
  char v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  _QWORD *v9;
  int *v10;
  int *v11;
  char v12;
  uint64_t v13;
  int *v14;
  _OWORD *v15;
  char v16;
  int *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char v22;
  uint64_t v23;
  char v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  int *v33;
  int *v34;
  _QWORD *v35;
  unsigned int v36;
  int *v37;
  uint64_t j;
  int v39;
  char v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  _QWORD *v45;
  int *v46;
  int *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  int *v59;
  char v60;
  uint64_t v61;
  int *v62;
  _OWORD *v63;
  char v64;
  int *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  int *v70;
  int *v71;
  _QWORD *v72;
  unsigned int v73;
  int *v74;
  int *v75;
  int *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t k;
  int v81;
  char v82;
  int v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  __int128 *v87;
  __int128 *v88;
  char v89;
  uint64_t v90;
  char v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  char *v102;
  _OWORD *v103;
  char v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char v110;
  uint64_t v111;
  char v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  int *v121;
  int *v122;
  char *v123;
  unsigned int v124;
  int *v125;
  int *v126;
  int *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t m;
  int v132;
  char v133;
  int v134;
  unsigned int v135;
  unsigned int v136;
  uint64_t v137;
  __int128 *v138;
  __int128 *v139;
  char v140;
  uint64_t v141;
  char *v142;
  _OWORD *v143;
  char v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char v150;
  uint64_t v151;
  char v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  int *v161;
  int *v162;
  char *v163;
  unsigned int v164;
  int *v165;
  int *v166;
  int *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t n;
  int v172;
  char v173;
  int v174;
  unsigned int v175;
  unsigned int v176;
  uint64_t v177;
  __int128 *v178;
  __int128 *v179;
  char v180;
  uint64_t v181;
  char *v182;
  _OWORD *v183;
  char v184;
  char *v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  char v190;
  uint64_t v191;
  char v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  int *v201;
  int *v202;
  char *v203;
  unsigned int v204;
  int *v205;
  int *v206;
  int *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t ii;
  int v212;
  char v213;
  int v214;
  unsigned int v215;
  unsigned int v216;
  uint64_t v217;
  __int128 *v218;
  __int128 *v219;
  char v220;
  uint64_t v221;
  char *v222;
  _OWORD *v223;
  char v224;
  char *v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  int *v230;
  int *v231;
  char *v232;
  unsigned int v233;
  int *v234;
  int *v235;
  int *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t jj;
  int v243;
  char v244;
  int v245;
  unsigned int v246;
  unsigned int v247;
  uint64_t v248;
  __int128 *v249;
  __int128 *v250;
  char v251;
  uint64_t v252;
  char v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  char *v260;
  uint64_t v261;
  char v262;
  uint64_t v263;
  char *v264;
  _OWORD *v265;
  char v266;
  char *v267;
  char *v268;
  uint64_t v269;
  uint64_t v270;
  char *v271;
  int *v272;
  int *v273;
  char *v274;
  unsigned int v275;
  int *v276;
  int *v277;
  int *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unsigned int v282;
  uint64_t v283;
  uint64_t v284;
  int *v285;
  int *v286;
  _QWORD *v287;
  unsigned int v288;
  int *v289;
  int *v290;
  int *v291;
  const void *v292;
  char v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  int v298;
  uint64_t v299;
  unsigned __int8 *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  _QWORD *v305;
  uint64_t v306;
  int *v307;
  unsigned int *v308;
  _QWORD *v309;
  unsigned int v310;
  int *v311;
  unsigned int *v312;
  unsigned int *v313;
  const void *v314;
  char v315;
  uint64_t v316;
  unint64_t v317;
  unint64_t *v318;
  uint64_t v319;
  unint64_t v320;
  uint64_t v321;
  int *v322;
  int *v323;
  char *v324;
  unsigned int v325;
  int *v326;
  int *v327;
  int *v328;
  uint64_t v329;
  unint64_t v330;
  unint64_t *v331;
  uint64_t v332;
  unint64_t v333;
  uint64_t v334;
  int *v335;
  unsigned int *v336;
  char *v337;
  unsigned int v338;
  int *v339;
  unsigned int *v340;
  unsigned int *v341;
  const void *v342;
  char v343;
  uint64_t v344;
  unint64_t v345;
  unint64_t *v346;
  uint64_t v347;
  unint64_t v348;
  uint64_t v349;
  int *v350;
  unint64_t *v351;
  char *v352;
  unsigned int v353;
  int *v354;
  unint64_t *v355;
  unint64_t *v356;
  const void *v357;
  char v358;
  uint64_t v359;
  unint64_t v360;
  unint64_t v361;
  unint64_t v362;
  int *v363;
  unint64_t *v364;
  char *v365;
  unsigned int v366;
  int *v367;
  unint64_t *v368;
  unint64_t *v369;
  const void *v370;
  char v371;
  uint64_t v372;
  unint64_t v373;
  unint64_t v374;
  unint64_t v375;
  int *v376;
  unint64_t *v377;
  char *v378;
  unsigned int v379;
  int *v380;
  unint64_t *v381;
  unint64_t *v382;
  uint64_t v383;
  const void *v384;
  char v385;
  uint64_t v386;
  unint64_t v387;
  unint64_t v388;
  unint64_t v389;
  unint64_t v390;
  uint64_t v391;
  _WORD *v392;
  uint64_t v393;
  _QWORD *v394;
  uint64_t v395;
  unint64_t v396;
  unint64_t v398;
  uint64_t v399;
  unsigned int v400;
  uint64_t v401;
  uint64_t v402;
  unsigned __int8 *v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  unsigned __int8 *v407;
  uint64_t v408;
  void **v409;
  size_t v410;
  unsigned __int8 *v411;
  unsigned __int8 *v412;
  uint64_t v413;
  unsigned __int8 v414;
  size_t v415;
  unsigned __int8 *v416;
  uint64_t v417;
  void *v418;
  size_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  unsigned __int8 *v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  unsigned __int8 *v428;
  uint64_t v429;
  unsigned int v430;
  uint64_t v431;
  uint64_t v432;
  unsigned __int8 *v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  unsigned __int8 *v437;
  uint64_t v438;
  char v439;
  uint64_t v440;
  char v441;
  char *v442;
  uint64_t v443;
  unint64_t v444;
  unint64_t v445;
  uint64_t v446;
  char *v447;
  char *v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  void *__p[2];
  char v453;
  unsigned __int8 *v454;
  uint64_t v455;
  uint64_t v456;
  __int16 v457;
  void *v458;
  size_t v459;
  char v460;
  void *v461[2];
  uint64_t v462;
  _WORD v463[12];
  __int128 v464;
  uint64_t v465;
  _BYTE v466[72];
  __int128 v467;
  uint64_t v468;
  _BYTE v469[72];
  __int128 v470;
  uint64_t v471;
  _BYTE v472[104];
  __int128 v473;
  uint64_t v474;
  _BYTE v475[104];
  __int128 v476;
  uint64_t v477;
  _BYTE v478[104];
  int v479[2];
  _QWORD *v480;
  unsigned int v481;
  int v482[2];
  _QWORD *v483;
  unsigned int v484;
  uint64_t v485;

  v1 = result;
  v485 = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD *)(result + 9648);
  if (v2 <= 1
    && !*(_DWORD *)(result + 9512)
    && *(_DWORD *)(result + 9768) <= 1u
    && *(_DWORD *)(result + 9856) <= 1u
    && *(_DWORD *)(result + 9944) <= 1u
    && *(_DWORD *)(result + 10032) <= 1u
    && *(_DWORD *)(result + 10152) <= 1u
    && *(_DWORD *)(result + 10272) < 2u)
  {
    return result;
  }
  v482[0] = 1;
  for (i = 2; i != 30; i += 14)
    *(_QWORD *)&v482[i] = -4096;
  v4 = v482[0];
  v5 = v2 & 1;
  v6 = v482[0] & 0xFFFFFFFE | v5;
  *(_DWORD *)(result + 9648) = v6;
  v7 = v2 & 0xFFFFFFFE | v4 & 1;
  v8 = *(_DWORD *)(result + 9652);
  v482[0] = v7;
  v482[1] = v8;
  *(_DWORD *)(result + 9652) = 0;
  if ((v4 & 1) != 0)
  {
    if (!v5)
    {
      v10 = v482;
      v11 = (int *)(result + 9648);
      goto LABEL_17;
    }
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = v22;
      v25 = &(&v483)[7 * v23];
      v26 = v1 + 9656 + 56 * v23;
      v27 = *v25;
      v28 = *(_QWORD *)v26;
      if (*v25 != -4096 && v27 != -8192 && v28 != -4096 && v28 != -8192)
      {
        *(_QWORD *)&v476 = *v25;
        *((_QWORD *)&v476 + 1) = v478;
        v477 = 0x200000000;
        if (*((_DWORD *)v25 + 4))
        {
          sub_22E5DE08C((uint64_t)&v476 + 8, (uint64_t)(v25 + 1));
          v28 = *(_QWORD *)v26;
        }
        *v25 = v28;
        sub_22E5DE08C((uint64_t)(v25 + 1), v26 + 8);
        *(_QWORD *)v26 = v476;
        sub_22E5DE08C(v26 + 8, (uint64_t)&v476 + 8);
        v29 = (_QWORD *)*((_QWORD *)&v476 + 1);
        if (*((_BYTE **)&v476 + 1) == v478)
          goto LABEL_44;
LABEL_43:
        free(v29);
        goto LABEL_44;
      }
      *v25 = v28;
      *(_QWORD *)v26 = v27;
      if ((v27 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if ((v28 | 0x1000) == 0xFFFFFFFFFFFFF000)
          goto LABEL_44;
        v25[1] = v25 + 3;
        v30 = (uint64_t)(v25 + 1);
        *(_QWORD *)(v30 + 8) = 0x200000000;
        if (*(_DWORD *)(v26 + 16))
          sub_22E5DE08C(v30, v26 + 8);
        v29 = *(_QWORD **)(v26 + 8);
        v31 = (_QWORD *)(v26 + 24);
      }
      else
      {
        *(_QWORD *)(v26 + 8) = v26 + 24;
        v32 = v26 + 8;
        *(_QWORD *)(v32 + 8) = 0x200000000;
        if (*((_DWORD *)v25 + 4))
          sub_22E5DE08C(v32, (uint64_t)(v25 + 1));
        v29 = (_QWORD *)v25[1];
        v31 = v25 + 3;
      }
      if (v29 != v31)
        goto LABEL_43;
LABEL_44:
      v22 = 1;
      v23 = 1;
      if ((v24 & 1) != 0)
        goto LABEL_45;
    }
  }
  if (!v5)
  {
    v9 = v483;
    v483 = *(_QWORD **)(result + 9656);
    *(_QWORD *)(result + 9656) = v9;
    v484 = *(_DWORD *)(result + 9664);
    goto LABEL_45;
  }
  v11 = v482;
  v6 = v7;
  v10 = (int *)(result + 9648);
LABEL_17:
  v12 = 0;
  v13 = 0;
  v14 = v11 + 2;
  v476 = *(_OWORD *)(v11 + 2);
  *v11 = v6 | 1;
  v15 = v10 + 2;
  do
  {
    v16 = v12;
    v17 = &v14[14 * v13];
    v18 = (char *)v15 + 56 * v13;
    v19 = *(_QWORD *)v18;
    *(_QWORD *)v17 = *(_QWORD *)v18;
    if ((v19 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *((_QWORD *)v17 + 1) = v17 + 6;
      v20 = (uint64_t)(v17 + 2);
      *(_QWORD *)(v20 + 8) = 0x200000000;
      if (*((_DWORD *)v18 + 4))
        sub_22E5DE08C(v20, (uint64_t)(v18 + 8));
      v21 = (char *)*((_QWORD *)v18 + 1);
      if (v21 != v18 + 24)
        free(v21);
    }
    v12 = 1;
    v13 = 1;
  }
  while ((v16 & 1) == 0);
  *v10 &= ~1u;
  *v15 = v476;
LABEL_45:
  sub_22F2B4430(v1 + 9648);
  v33 = sub_22F2B4524(v482);
  if ((v482[0] & 1) != 0)
    v35 = &v483;
  else
    v35 = v483;
  v36 = v484;
  if ((v482[0] & 1) != 0)
    v36 = 2;
  v37 = (int *)&v35[7 * v36];
  if (v37 != v33)
  {
    v46 = v33;
    v47 = v34;
    do
    {
      sub_22EFCD52C((uint64_t *)(*(_QWORD *)v46 + 64));
      v48 = *(_QWORD *)v46;
      if ((*(_WORD *)(*(_QWORD *)v46 + 72) & 0x80) != 0)
      {
        sub_22EFCC320(v48 + 64);
        v48 = *(_QWORD *)v46;
      }
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v48 + 104) + 96), *(_QWORD *)(v48 + 104));
      v49 = *(_QWORD *)(v48 + 128);
      if ((*(_BYTE *)(v49 + 24) & 1) != 0)
        sub_22EFCF510(v49);
      v50 = *(_QWORD *)v46;
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*(_QWORD *)v46 + 104) + 96), *(_QWORD *)(*(_QWORD *)v46 + 104));
      v51 = *(_QWORD *)(v50 + 128);
      if ((*(_BYTE *)(v51 + 32) & 1) != 0)
        sub_22F3B1908(v51);
      v52 = v46[4];
      if ((_DWORD)v52)
      {
        v53 = (uint64_t *)*((_QWORD *)v46 + 1);
        v54 = 16 * v52;
        do
        {
          v55 = *v53;
          if ((*(_WORD *)(*v53 + 72) & 0x80) != 0)
            sub_22EFCC320(v55 + 64);
          sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v55 + 104) + 96), *(_QWORD *)(v55 + 104));
          v56 = *(_QWORD *)(v55 + 128);
          if ((*(_BYTE *)(v56 + 24) & 1) != 0)
            sub_22EFCF510(v56);
          sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v55 + 104) + 96), *(_QWORD *)(v55 + 104));
          v57 = *(_QWORD *)(v55 + 128);
          if ((*(_BYTE *)(v57 + 32) & 1) != 0)
            sub_22F3B1908(v57);
          v53 += 2;
          v54 -= 16;
        }
        while (v54);
      }
      while (1)
      {
        v46 += 14;
        if (v46 == v47)
          break;
        if ((*(_QWORD *)v46 | 0x1000) != 0xFFFFFFFFFFFFF000)
          goto LABEL_76;
      }
      v46 = v47;
LABEL_76:
      ;
    }
    while (v46 != v37);
  }
  v479[0] = 1;
  for (j = 2; j != 22; j += 10)
    *(_QWORD *)&v479[j] = -4096;
  v39 = *(_DWORD *)(v1 + 9944);
  v40 = v479[0];
  v41 = v39 & 1;
  v42 = v479[0] & 0xFFFFFFFE | v41;
  *(_DWORD *)(v1 + 9944) = v42;
  v43 = v39 & 0xFFFFFFFE | v40 & 1;
  v44 = *(_DWORD *)(v1 + 9948);
  v479[0] = v43;
  v479[1] = v44;
  *(_DWORD *)(v1 + 9948) = 0;
  if ((v40 & 1) != 0)
  {
    if (!v41)
    {
      v58 = v479;
      v59 = (int *)(v1 + 9944);
      goto LABEL_81;
    }
    v89 = 0;
    v90 = 0;
    while (1)
    {
      v91 = v89;
      v92 = &(&v480)[5 * v90];
      v93 = v1 + 9952 + 40 * v90;
      v94 = *v92;
      v95 = *(_QWORD *)v93;
      if (*v92 != -4096 && v94 != -8192 && v95 != -4096 && v95 != -8192)
      {
        *(_QWORD *)&v476 = *v92;
        *((_QWORD *)&v476 + 1) = v478;
        v477 = 0x200000000;
        if (*((_DWORD *)v92 + 4))
        {
          sub_22F24C77C((uint64_t)&v476 + 8, (uint64_t)(v92 + 1));
          v95 = *(_QWORD *)v93;
        }
        *v92 = v95;
        sub_22F24C77C((uint64_t)(v92 + 1), v93 + 8);
        *(_QWORD *)v93 = v476;
        sub_22F24C77C(v93 + 8, (uint64_t)&v476 + 8);
        v97 = (_QWORD *)*((_QWORD *)&v476 + 1);
        if (*((_BYTE **)&v476 + 1) == v478)
          goto LABEL_130;
LABEL_129:
        free(v97);
        goto LABEL_130;
      }
      *v92 = v95;
      *(_QWORD *)v93 = v94;
      if ((v94 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if ((v95 | 0x1000) == 0xFFFFFFFFFFFFF000)
          goto LABEL_130;
        v92[1] = v92 + 3;
        v96 = (uint64_t)(v92 + 1);
        *(_QWORD *)(v96 + 8) = 0x200000000;
        if (*(_DWORD *)(v93 + 16))
          sub_22F24C77C(v96, v93 + 8);
        v97 = *(_QWORD **)(v93 + 8);
        v98 = (_QWORD *)(v93 + 24);
      }
      else
      {
        *(_QWORD *)(v93 + 8) = v93 + 24;
        v99 = v93 + 8;
        *(_QWORD *)(v99 + 8) = 0x200000000;
        if (*((_DWORD *)v92 + 4))
          sub_22F24C77C(v99, (uint64_t)(v92 + 1));
        v97 = (_QWORD *)v92[1];
        v98 = v92 + 3;
      }
      if (v97 != v98)
        goto LABEL_129;
LABEL_130:
      v89 = 1;
      v90 = 1;
      if ((v91 & 1) != 0)
        goto LABEL_89;
    }
  }
  if (!v41)
  {
    v45 = v480;
    v480 = *(_QWORD **)(v1 + 9952);
    *(_QWORD *)(v1 + 9952) = v45;
    LODWORD(v45) = v481;
    v481 = *(_DWORD *)(v1 + 9960);
    *(_DWORD *)(v1 + 9960) = (_DWORD)v45;
    goto LABEL_89;
  }
  v59 = v479;
  v42 = v43;
  v58 = (int *)(v1 + 9944);
LABEL_81:
  v60 = 0;
  v61 = 0;
  v62 = v59 + 2;
  v476 = *(_OWORD *)(v59 + 2);
  *v59 = v42 | 1;
  v63 = v58 + 2;
  do
  {
    v64 = v60;
    v65 = &v62[10 * v61];
    v66 = (char *)v63 + 40 * v61;
    v67 = *(_QWORD *)v66;
    *(_QWORD *)v65 = *(_QWORD *)v66;
    if ((v67 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *((_QWORD *)v65 + 1) = v65 + 6;
      v68 = (uint64_t)(v65 + 2);
      *(_QWORD *)(v68 + 8) = 0x200000000;
      if (*((_DWORD *)v66 + 4))
        sub_22F24C77C(v68, (uint64_t)(v66 + 8));
      v69 = (char *)*((_QWORD *)v66 + 1);
      if (v69 != v66 + 24)
        free(v69);
    }
    v60 = 1;
    v61 = 1;
  }
  while ((v64 & 1) == 0);
  *v58 &= ~1u;
  *v63 = v476;
LABEL_89:
  sub_22F2B45A4(v1 + 9944);
  v70 = sub_22F2B4698(v479);
  if ((v479[0] & 1) != 0)
    v72 = &v480;
  else
    v72 = v480;
  v73 = v481;
  if ((v479[0] & 1) != 0)
    v73 = 2;
  v74 = (int *)&v72[5 * v73];
  if (v74 != v70)
  {
    v75 = v70;
    v76 = v71;
    do
    {
      if ((*(_WORD *)(*(_QWORD *)v75 + 72) & 0x80) != 0)
        sub_22EFCC320(*(_QWORD *)v75 + 64);
      v77 = v75[4];
      if ((_DWORD)v77)
      {
        v78 = *((_QWORD *)v75 + 1);
        v79 = 8 * v77;
        do
        {
          if ((*(_WORD *)(*(_QWORD *)v78 + 72) & 0x80) != 0)
            sub_22EFCC320(*(_QWORD *)v78 + 64);
          v78 += 8;
          v79 -= 8;
        }
        while (v79);
      }
      while (1)
      {
        v75 += 10;
        if (v75 == v76)
          break;
        if ((*(_QWORD *)v75 | 0x1000) != 0xFFFFFFFFFFFFF000)
          goto LABEL_107;
      }
      v75 = v76;
LABEL_107:
      ;
    }
    while (v75 != v74);
  }
  LODWORD(v476) = 1;
  for (k = 8; k != 120; k += 56)
    *(_QWORD *)((char *)&v476 + k) = -4096;
  v81 = *(_DWORD *)(v1 + 10032);
  v82 = v476;
  v83 = v81 & 1;
  v84 = v476 & 0xFFFFFFFE | v83;
  *(_DWORD *)(v1 + 10032) = v84;
  v85 = v81 & 0xFFFFFFFE | v82 & 1;
  *(_QWORD *)&v476 = __PAIR64__(*(_DWORD *)(v1 + 10036), v85);
  *(_DWORD *)(v1 + 10036) = 0;
  if ((v82 & 1) != 0)
  {
    if (!v83)
    {
      v87 = &v476;
      v88 = (__int128 *)(v1 + 10032);
      goto LABEL_137;
    }
    v110 = 0;
    v111 = 0;
    while (1)
    {
      v112 = v110;
      v113 = (char *)&v476 + 56 * v111 + 8;
      v114 = v1 + 10040 + 56 * v111;
      v115 = *(_QWORD *)v113;
      v116 = *(_QWORD *)v114;
      if (*(_QWORD *)v113 != -4096 && v115 != -8192 && v116 != -4096 && v116 != -8192)
      {
        *(_QWORD *)&v473 = *(_QWORD *)v113;
        *((_QWORD *)&v473 + 1) = v475;
        v474 = 0x200000000;
        if (*((_DWORD *)v113 + 4))
        {
          sub_22E5DE08C((uint64_t)&v473 + 8, (uint64_t)(v113 + 8));
          v116 = *(_QWORD *)v114;
        }
        *(_QWORD *)v113 = v116;
        sub_22E5DE08C((uint64_t)(v113 + 8), v114 + 8);
        *(_QWORD *)v114 = v473;
        sub_22E5DE08C(v114 + 8, (uint64_t)&v473 + 8);
        v117 = (char *)*((_QWORD *)&v473 + 1);
        if (*((_BYTE **)&v473 + 1) == v475)
          goto LABEL_164;
LABEL_163:
        free(v117);
        goto LABEL_164;
      }
      *(_QWORD *)v113 = v116;
      *(_QWORD *)v114 = v115;
      if ((v115 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if ((v116 | 0x1000) == 0xFFFFFFFFFFFFF000)
          goto LABEL_164;
        *((_QWORD *)v113 + 1) = v113 + 24;
        v118 = (uint64_t)(v113 + 8);
        *(_QWORD *)(v118 + 8) = 0x200000000;
        if (*(_DWORD *)(v114 + 16))
          sub_22E5DE08C(v118, v114 + 8);
        v117 = *(char **)(v114 + 8);
        v119 = (char *)(v114 + 24);
      }
      else
      {
        *(_QWORD *)(v114 + 8) = v114 + 24;
        v120 = v114 + 8;
        *(_QWORD *)(v120 + 8) = 0x200000000;
        if (*((_DWORD *)v113 + 4))
          sub_22E5DE08C(v120, (uint64_t)(v113 + 8));
        v117 = (char *)*((_QWORD *)v113 + 1);
        v119 = v113 + 24;
      }
      if (v117 != v119)
        goto LABEL_163;
LABEL_164:
      v110 = 1;
      v111 = 1;
      if ((v112 & 1) != 0)
        goto LABEL_165;
    }
  }
  if (!v83)
  {
    v86 = *((_QWORD *)&v476 + 1);
    *((_QWORD *)&v476 + 1) = *(_QWORD *)(v1 + 10040);
    *(_QWORD *)(v1 + 10040) = v86;
    LODWORD(v86) = v477;
    LODWORD(v477) = *(_DWORD *)(v1 + 10048);
    *(_DWORD *)(v1 + 10048) = v86;
    goto LABEL_165;
  }
  v88 = &v476;
  v84 = v85;
  v87 = (__int128 *)(v1 + 10032);
LABEL_137:
  v100 = 0;
  v101 = 0;
  v102 = (char *)v88 + 8;
  v473 = *(__int128 *)((char *)v88 + 8);
  *(_DWORD *)v88 = v84 | 1;
  v103 = (__int128 *)((char *)v87 + 8);
  do
  {
    v104 = v100;
    v105 = &v102[56 * v101];
    v106 = (char *)v103 + 56 * v101;
    v107 = *(_QWORD *)v106;
    *(_QWORD *)v105 = *(_QWORD *)v106;
    if ((v107 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *((_QWORD *)v105 + 1) = v105 + 24;
      v108 = (uint64_t)(v105 + 8);
      *(_QWORD *)(v108 + 8) = 0x200000000;
      if (*((_DWORD *)v106 + 4))
        sub_22E5DE08C(v108, (uint64_t)(v106 + 8));
      v109 = (char *)*((_QWORD *)v106 + 1);
      if (v109 != v106 + 24)
        free(v109);
    }
    v100 = 1;
    v101 = 1;
  }
  while ((v104 & 1) == 0);
  *(_DWORD *)v87 &= ~1u;
  *v103 = v473;
LABEL_165:
  sub_22F2B4430(v1 + 10032);
  v121 = sub_22F2B4524((int *)&v476);
  v123 = (char *)&v476 + 8;
  if ((v476 & 1) == 0)
    v123 = (char *)*((_QWORD *)&v476 + 1);
  v124 = v477;
  if ((v476 & 1) != 0)
    v124 = 2;
  v125 = (int *)&v123[56 * v124];
  if (v125 != v121)
  {
    v126 = v121;
    v127 = v122;
    do
    {
      if ((*(_WORD *)(*(_QWORD *)v126 + 56) & 0x80) != 0)
        sub_22EFCC320(*(_QWORD *)v126 + 48);
      v128 = v126[4];
      if ((_DWORD)v128)
      {
        v129 = *((_QWORD *)v126 + 1);
        v130 = 16 * v128;
        do
        {
          if ((*(_WORD *)(*(_QWORD *)v129 + 56) & 0x80) != 0)
            sub_22EFCC320(*(_QWORD *)v129 + 48);
          v129 += 16;
          v130 -= 16;
        }
        while (v130);
      }
      while (1)
      {
        v126 += 14;
        if (v126 == v127)
          break;
        if ((*(_QWORD *)v126 | 0x1000) != 0xFFFFFFFFFFFFF000)
          goto LABEL_182;
      }
      v126 = v127;
LABEL_182:
      ;
    }
    while (v126 != v125);
  }
  LODWORD(v473) = 1;
  for (m = 8; m != 120; m += 56)
    *(_QWORD *)((char *)&v473 + m) = -4096;
  v132 = *(_DWORD *)(v1 + 10152);
  v133 = v473;
  v134 = v132 & 1;
  v135 = v473 & 0xFFFFFFFE | v134;
  *(_DWORD *)(v1 + 10152) = v135;
  v136 = v132 & 0xFFFFFFFE | v133 & 1;
  *(_QWORD *)&v473 = __PAIR64__(*(_DWORD *)(v1 + 10156), v136);
  *(_DWORD *)(v1 + 10156) = 0;
  if ((v133 & 1) != 0)
  {
    if (!v134)
    {
      v138 = &v473;
      v139 = (__int128 *)(v1 + 10152);
      goto LABEL_191;
    }
    v150 = 0;
    v151 = 0;
    while (1)
    {
      v152 = v150;
      v153 = (char *)&v473 + 56 * v151 + 8;
      v154 = v1 + 10160 + 56 * v151;
      v155 = *(_QWORD *)v153;
      v156 = *(_QWORD *)v154;
      if (*(_QWORD *)v153 != -4096 && v155 != -8192 && v156 != -4096 && v156 != -8192)
      {
        *(_QWORD *)&v470 = *(_QWORD *)v153;
        *((_QWORD *)&v470 + 1) = v472;
        v471 = 0x200000000;
        if (*((_DWORD *)v153 + 4))
        {
          sub_22E5DE08C((uint64_t)&v470 + 8, (uint64_t)(v153 + 8));
          v156 = *(_QWORD *)v154;
        }
        *(_QWORD *)v153 = v156;
        sub_22E5DE08C((uint64_t)(v153 + 8), v154 + 8);
        *(_QWORD *)v154 = v470;
        sub_22E5DE08C(v154 + 8, (uint64_t)&v470 + 8);
        v157 = (char *)*((_QWORD *)&v470 + 1);
        if (*((_BYTE **)&v470 + 1) == v472)
          goto LABEL_218;
LABEL_217:
        free(v157);
        goto LABEL_218;
      }
      *(_QWORD *)v153 = v156;
      *(_QWORD *)v154 = v155;
      if ((v155 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if ((v156 | 0x1000) == 0xFFFFFFFFFFFFF000)
          goto LABEL_218;
        *((_QWORD *)v153 + 1) = v153 + 24;
        v158 = (uint64_t)(v153 + 8);
        *(_QWORD *)(v158 + 8) = 0x200000000;
        if (*(_DWORD *)(v154 + 16))
          sub_22E5DE08C(v158, v154 + 8);
        v157 = *(char **)(v154 + 8);
        v159 = (char *)(v154 + 24);
      }
      else
      {
        *(_QWORD *)(v154 + 8) = v154 + 24;
        v160 = v154 + 8;
        *(_QWORD *)(v160 + 8) = 0x200000000;
        if (*((_DWORD *)v153 + 4))
          sub_22E5DE08C(v160, (uint64_t)(v153 + 8));
        v157 = (char *)*((_QWORD *)v153 + 1);
        v159 = v153 + 24;
      }
      if (v157 != v159)
        goto LABEL_217;
LABEL_218:
      v150 = 1;
      v151 = 1;
      if ((v152 & 1) != 0)
        goto LABEL_219;
    }
  }
  if (!v134)
  {
    v137 = *((_QWORD *)&v473 + 1);
    *((_QWORD *)&v473 + 1) = *(_QWORD *)(v1 + 10160);
    *(_QWORD *)(v1 + 10160) = v137;
    LODWORD(v137) = v474;
    LODWORD(v474) = *(_DWORD *)(v1 + 10168);
    *(_DWORD *)(v1 + 10168) = v137;
    goto LABEL_219;
  }
  v139 = &v473;
  v135 = v136;
  v138 = (__int128 *)(v1 + 10152);
LABEL_191:
  v140 = 0;
  v141 = 0;
  v142 = (char *)v139 + 8;
  v470 = *(__int128 *)((char *)v139 + 8);
  *(_DWORD *)v139 = v135 | 1;
  v143 = (__int128 *)((char *)v138 + 8);
  do
  {
    v144 = v140;
    v145 = &v142[56 * v141];
    v146 = (char *)v143 + 56 * v141;
    v147 = *(_QWORD *)v146;
    *(_QWORD *)v145 = *(_QWORD *)v146;
    if ((v147 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *((_QWORD *)v145 + 1) = v145 + 24;
      v148 = (uint64_t)(v145 + 8);
      *(_QWORD *)(v148 + 8) = 0x200000000;
      if (*((_DWORD *)v146 + 4))
        sub_22E5DE08C(v148, (uint64_t)(v146 + 8));
      v149 = (char *)*((_QWORD *)v146 + 1);
      if (v149 != v146 + 24)
        free(v149);
    }
    v140 = 1;
    v141 = 1;
  }
  while ((v144 & 1) == 0);
  *(_DWORD *)v138 &= ~1u;
  *v143 = v470;
LABEL_219:
  sub_22F2B4430(v1 + 10152);
  v161 = sub_22F2B4524((int *)&v473);
  v163 = (char *)&v473 + 8;
  if ((v473 & 1) == 0)
    v163 = (char *)*((_QWORD *)&v473 + 1);
  v164 = v474;
  if ((v473 & 1) != 0)
    v164 = 2;
  v165 = (int *)&v163[56 * v164];
  if (v165 != v161)
  {
    v166 = v161;
    v167 = v162;
    do
    {
      if ((*(_WORD *)(*(_QWORD *)v166 + 56) & 0x80) != 0)
        sub_22EFCC320(*(_QWORD *)v166 + 48);
      v168 = v166[4];
      if ((_DWORD)v168)
      {
        v169 = *((_QWORD *)v166 + 1);
        v170 = 16 * v168;
        do
        {
          if ((*(_WORD *)(*(_QWORD *)v169 + 56) & 0x80) != 0)
            sub_22EFCC320(*(_QWORD *)v169 + 48);
          v169 += 16;
          v170 -= 16;
        }
        while (v170);
      }
      while (1)
      {
        v166 += 14;
        if (v166 == v167)
          break;
        if ((*(_QWORD *)v166 | 0x1000) != 0xFFFFFFFFFFFFF000)
          goto LABEL_236;
      }
      v166 = v167;
LABEL_236:
      ;
    }
    while (v166 != v165);
  }
  LODWORD(v470) = 1;
  for (n = 8; n != 120; n += 56)
    *(_QWORD *)((char *)&v470 + n) = -4096;
  v172 = *(_DWORD *)(v1 + 10272);
  v173 = v470;
  v174 = v172 & 1;
  v175 = v470 & 0xFFFFFFFE | v174;
  *(_DWORD *)(v1 + 10272) = v175;
  v176 = v172 & 0xFFFFFFFE | v173 & 1;
  *(_QWORD *)&v470 = __PAIR64__(*(_DWORD *)(v1 + 10276), v176);
  *(_DWORD *)(v1 + 10276) = 0;
  if ((v173 & 1) != 0)
  {
    if (!v174)
    {
      v178 = &v470;
      v179 = (__int128 *)(v1 + 10272);
      goto LABEL_245;
    }
    v190 = 0;
    v191 = 0;
    while (1)
    {
      v192 = v190;
      v193 = (char *)&v470 + 56 * v191 + 8;
      v194 = v1 + 10280 + 56 * v191;
      v195 = *(_QWORD *)v193;
      v196 = *(_QWORD *)v194;
      if (*(_QWORD *)v193 != -4096 && v195 != -8192 && v196 != -4096 && v196 != -8192)
      {
        *(_QWORD *)&v467 = *(_QWORD *)v193;
        *((_QWORD *)&v467 + 1) = v469;
        v468 = 0x200000000;
        if (*((_DWORD *)v193 + 4))
        {
          sub_22E5DE08C((uint64_t)&v467 + 8, (uint64_t)(v193 + 8));
          v196 = *(_QWORD *)v194;
        }
        *(_QWORD *)v193 = v196;
        sub_22E5DE08C((uint64_t)(v193 + 8), v194 + 8);
        *(_QWORD *)v194 = v467;
        sub_22E5DE08C(v194 + 8, (uint64_t)&v467 + 8);
        v197 = (char *)*((_QWORD *)&v467 + 1);
        if (*((_BYTE **)&v467 + 1) == v469)
          goto LABEL_272;
LABEL_271:
        free(v197);
        goto LABEL_272;
      }
      *(_QWORD *)v193 = v196;
      *(_QWORD *)v194 = v195;
      if ((v195 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if ((v196 | 0x1000) == 0xFFFFFFFFFFFFF000)
          goto LABEL_272;
        *((_QWORD *)v193 + 1) = v193 + 24;
        v198 = (uint64_t)(v193 + 8);
        *(_QWORD *)(v198 + 8) = 0x200000000;
        if (*(_DWORD *)(v194 + 16))
          sub_22E5DE08C(v198, v194 + 8);
        v197 = *(char **)(v194 + 8);
        v199 = (char *)(v194 + 24);
      }
      else
      {
        *(_QWORD *)(v194 + 8) = v194 + 24;
        v200 = v194 + 8;
        *(_QWORD *)(v200 + 8) = 0x200000000;
        if (*((_DWORD *)v193 + 4))
          sub_22E5DE08C(v200, (uint64_t)(v193 + 8));
        v197 = (char *)*((_QWORD *)v193 + 1);
        v199 = v193 + 24;
      }
      if (v197 != v199)
        goto LABEL_271;
LABEL_272:
      v190 = 1;
      v191 = 1;
      if ((v192 & 1) != 0)
        goto LABEL_273;
    }
  }
  if (!v174)
  {
    v177 = *((_QWORD *)&v470 + 1);
    *((_QWORD *)&v470 + 1) = *(_QWORD *)(v1 + 10280);
    *(_QWORD *)(v1 + 10280) = v177;
    LODWORD(v177) = v471;
    LODWORD(v471) = *(_DWORD *)(v1 + 10288);
    *(_DWORD *)(v1 + 10288) = v177;
    goto LABEL_273;
  }
  v179 = &v470;
  v175 = v176;
  v178 = (__int128 *)(v1 + 10272);
LABEL_245:
  v180 = 0;
  v181 = 0;
  v182 = (char *)v179 + 8;
  v467 = *(__int128 *)((char *)v179 + 8);
  *(_DWORD *)v179 = v175 | 1;
  v183 = (__int128 *)((char *)v178 + 8);
  do
  {
    v184 = v180;
    v185 = &v182[56 * v181];
    v186 = (char *)v183 + 56 * v181;
    v187 = *(_QWORD *)v186;
    *(_QWORD *)v185 = *(_QWORD *)v186;
    if ((v187 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *((_QWORD *)v185 + 1) = v185 + 24;
      v188 = (uint64_t)(v185 + 8);
      *(_QWORD *)(v188 + 8) = 0x200000000;
      if (*((_DWORD *)v186 + 4))
        sub_22E5DE08C(v188, (uint64_t)(v186 + 8));
      v189 = (char *)*((_QWORD *)v186 + 1);
      if (v189 != v186 + 24)
        free(v189);
    }
    v180 = 1;
    v181 = 1;
  }
  while ((v184 & 1) == 0);
  *(_DWORD *)v178 &= ~1u;
  *v183 = v467;
LABEL_273:
  sub_22F2B4430(v1 + 10272);
  v201 = sub_22F2B4524((int *)&v470);
  v203 = (char *)&v470 + 8;
  if ((v470 & 1) == 0)
    v203 = (char *)*((_QWORD *)&v470 + 1);
  v204 = v471;
  if ((v470 & 1) != 0)
    v204 = 2;
  v205 = (int *)&v203[56 * v204];
  if (v205 != v201)
  {
    v206 = v201;
    v207 = v202;
    do
    {
      if ((*(_WORD *)(*(_QWORD *)v206 + 56) & 0x80) != 0)
        sub_22EFCC320(*(_QWORD *)v206 + 48);
      v208 = v206[4];
      if ((_DWORD)v208)
      {
        v209 = *((_QWORD *)v206 + 1);
        v210 = 16 * v208;
        do
        {
          if ((*(_WORD *)(*(_QWORD *)v209 + 56) & 0x80) != 0)
            sub_22EFCC320(*(_QWORD *)v209 + 48);
          v209 += 16;
          v210 -= 16;
        }
        while (v210);
      }
      while (1)
      {
        v206 += 14;
        if (v206 == v207)
          break;
        if ((*(_QWORD *)v206 | 0x1000) != 0xFFFFFFFFFFFFF000)
          goto LABEL_290;
      }
      v206 = v207;
LABEL_290:
      ;
    }
    while (v206 != v205);
  }
  LODWORD(v467) = 1;
  for (ii = 8; ii != 88; ii += 40)
    *(_QWORD *)((char *)&v467 + ii) = -4096;
  v212 = *(_DWORD *)(v1 + 9768);
  v213 = v467;
  v214 = v212 & 1;
  v215 = v467 & 0xFFFFFFFE | v214;
  *(_DWORD *)(v1 + 9768) = v215;
  v216 = v212 & 0xFFFFFFFE | v213 & 1;
  *(_QWORD *)&v467 = __PAIR64__(*(_DWORD *)(v1 + 9772), v216);
  *(_DWORD *)(v1 + 9772) = 0;
  if ((v213 & 1) != 0)
  {
    if (!v214)
    {
      v218 = &v467;
      v219 = (__int128 *)(v1 + 9768);
      goto LABEL_299;
    }
    v251 = 0;
    v252 = 0;
    while (1)
    {
      v253 = v251;
      v254 = (char *)&v467 + 40 * v252 + 8;
      v255 = v1 + 9776 + 40 * v252;
      v256 = *(_QWORD *)v254;
      v257 = *(_QWORD *)v255;
      if (*(_QWORD *)v254 != -4096 && v256 != -8192 && v257 != -4096 && v257 != -8192)
      {
        *(_QWORD *)&v464 = *(_QWORD *)v254;
        *((_QWORD *)&v464 + 1) = v466;
        v465 = 0x200000000;
        if (*((_DWORD *)v254 + 4))
        {
          sub_22F24C77C((uint64_t)&v464 + 8, (uint64_t)(v254 + 8));
          v257 = *(_QWORD *)v255;
        }
        *(_QWORD *)v254 = v257;
        sub_22F24C77C((uint64_t)(v254 + 8), v255 + 8);
        *(_QWORD *)v255 = v464;
        sub_22F24C77C(v255 + 8, (uint64_t)&v464 + 8);
        v259 = (char *)*((_QWORD *)&v464 + 1);
        if (*((_BYTE **)&v464 + 1) == v466)
          goto LABEL_348;
LABEL_347:
        free(v259);
        goto LABEL_348;
      }
      *(_QWORD *)v254 = v257;
      *(_QWORD *)v255 = v256;
      if ((v256 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if ((v257 | 0x1000) == 0xFFFFFFFFFFFFF000)
          goto LABEL_348;
        *((_QWORD *)v254 + 1) = v254 + 24;
        v258 = (uint64_t)(v254 + 8);
        *(_QWORD *)(v258 + 8) = 0x200000000;
        if (*(_DWORD *)(v255 + 16))
          sub_22F24C77C(v258, v255 + 8);
        v259 = *(char **)(v255 + 8);
        v260 = (char *)(v255 + 24);
      }
      else
      {
        *(_QWORD *)(v255 + 8) = v255 + 24;
        v261 = v255 + 8;
        *(_QWORD *)(v261 + 8) = 0x200000000;
        if (*((_DWORD *)v254 + 4))
          sub_22F24C77C(v261, (uint64_t)(v254 + 8));
        v259 = (char *)*((_QWORD *)v254 + 1);
        v260 = v254 + 24;
      }
      if (v259 != v260)
        goto LABEL_347;
LABEL_348:
      v251 = 1;
      v252 = 1;
      if ((v253 & 1) != 0)
        goto LABEL_307;
    }
  }
  if (!v214)
  {
    v217 = *((_QWORD *)&v467 + 1);
    *((_QWORD *)&v467 + 1) = *(_QWORD *)(v1 + 9776);
    *(_QWORD *)(v1 + 9776) = v217;
    LODWORD(v217) = v468;
    LODWORD(v468) = *(_DWORD *)(v1 + 9784);
    *(_DWORD *)(v1 + 9784) = v217;
    goto LABEL_307;
  }
  v219 = &v467;
  v215 = v216;
  v218 = (__int128 *)(v1 + 9768);
LABEL_299:
  v220 = 0;
  v221 = 0;
  v222 = (char *)v219 + 8;
  v464 = *(__int128 *)((char *)v219 + 8);
  *(_DWORD *)v219 = v215 | 1;
  v223 = (__int128 *)((char *)v218 + 8);
  do
  {
    v224 = v220;
    v225 = &v222[40 * v221];
    v226 = (char *)v223 + 40 * v221;
    v227 = *(_QWORD *)v226;
    *(_QWORD *)v225 = *(_QWORD *)v226;
    if ((v227 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *((_QWORD *)v225 + 1) = v225 + 24;
      v228 = (uint64_t)(v225 + 8);
      *(_QWORD *)(v228 + 8) = 0x200000000;
      if (*((_DWORD *)v226 + 4))
        sub_22F24C77C(v228, (uint64_t)(v226 + 8));
      v229 = (char *)*((_QWORD *)v226 + 1);
      if (v229 != v226 + 24)
        free(v229);
    }
    v220 = 1;
    v221 = 1;
  }
  while ((v224 & 1) == 0);
  *(_DWORD *)v218 &= ~1u;
  *v223 = v464;
LABEL_307:
  sub_22F2B45A4(v1 + 9768);
  v230 = sub_22F2B4698((int *)&v467);
  if ((v467 & 1) != 0)
    v232 = (char *)&v467 + 8;
  else
    v232 = (char *)*((_QWORD *)&v467 + 1);
  v233 = v468;
  if ((v467 & 1) != 0)
    v233 = 2;
  v234 = (int *)&v232[40 * v233];
  if (v234 != v230)
  {
    v235 = v230;
    v236 = v231;
    do
    {
      sub_22EFCD52C((uint64_t *)(*(_QWORD *)v235 + 72));
      v237 = *(_QWORD *)v235;
      if ((*(_WORD *)(*(_QWORD *)v235 + 80) & 0x80) != 0)
      {
        sub_22EFCC320(v237 + 72);
        v237 = *(_QWORD *)v235;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v237 + 64))(v237);
      v238 = v235[4];
      if ((_DWORD)v238)
      {
        v239 = (uint64_t *)*((_QWORD *)v235 + 1);
        v240 = 8 * v238;
        do
        {
          sub_22EFCD52C((uint64_t *)(*v239 + 72));
          v241 = *v239;
          if ((*(_WORD *)(*v239 + 80) & 0x80) != 0)
          {
            sub_22EFCC320(v241 + 72);
            v241 = *v239;
          }
          (*(void (**)(uint64_t))(*(_QWORD *)v241 + 64))(v241);
          ++v239;
          v240 -= 8;
        }
        while (v240);
      }
      while (1)
      {
        v235 += 10;
        if (v235 == v236)
          break;
        if ((*(_QWORD *)v235 | 0x1000) != 0xFFFFFFFFFFFFF000)
          goto LABEL_325;
      }
      v235 = v236;
LABEL_325:
      ;
    }
    while (v235 != v234);
  }
  LODWORD(v464) = 1;
  for (jj = 8; jj != 88; jj += 40)
    *(_QWORD *)((char *)&v464 + jj) = -4096;
  v243 = *(_DWORD *)(v1 + 9856);
  v244 = v464;
  v245 = v243 & 1;
  v246 = v464 & 0xFFFFFFFE | v245;
  *(_DWORD *)(v1 + 9856) = v246;
  v247 = v243 & 0xFFFFFFFE | v244 & 1;
  *(_QWORD *)&v464 = __PAIR64__(*(_DWORD *)(v1 + 9860), v247);
  *(_DWORD *)(v1 + 9860) = 0;
  if ((v244 & 1) != 0)
  {
    if (!v245)
    {
      v249 = &v464;
      v250 = (__int128 *)(v1 + 9856);
      goto LABEL_355;
    }
    v439 = 0;
    v440 = 0;
    while (1)
    {
      v441 = v439;
      v442 = (char *)&v464 + 40 * v440 + 8;
      v443 = v1 + 9864 + 40 * v440;
      v444 = *(_QWORD *)v442;
      v445 = *(_QWORD *)v443;
      if (*(_QWORD *)v442 != -4096 && v444 != -8192 && v445 != -4096 && v445 != -8192)
      {
        v461[0] = *(void **)v442;
        v461[1] = v463;
        v462 = 0x200000000;
        if (*((_DWORD *)v442 + 4))
        {
          sub_22F24C77C((uint64_t)&v461[1], (uint64_t)(v442 + 8));
          v445 = *(_QWORD *)v443;
        }
        *(_QWORD *)v442 = v445;
        sub_22F24C77C((uint64_t)(v442 + 8), v443 + 8);
        *(void **)v443 = v461[0];
        sub_22F24C77C(v443 + 8, (uint64_t)&v461[1]);
        v447 = (char *)v461[1];
        if (v461[1] == v463)
          goto LABEL_671;
LABEL_670:
        free(v447);
        goto LABEL_671;
      }
      *(_QWORD *)v442 = v445;
      *(_QWORD *)v443 = v444;
      if ((v444 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if ((v445 | 0x1000) == 0xFFFFFFFFFFFFF000)
          goto LABEL_671;
        *((_QWORD *)v442 + 1) = v442 + 24;
        v446 = (uint64_t)(v442 + 8);
        *(_QWORD *)(v446 + 8) = 0x200000000;
        if (*(_DWORD *)(v443 + 16))
          sub_22F24C77C(v446, v443 + 8);
        v447 = *(char **)(v443 + 8);
        v448 = (char *)(v443 + 24);
      }
      else
      {
        *(_QWORD *)(v443 + 8) = v443 + 24;
        v449 = v443 + 8;
        *(_QWORD *)(v449 + 8) = 0x200000000;
        if (*((_DWORD *)v442 + 4))
          sub_22F24C77C(v449, (uint64_t)(v442 + 8));
        v447 = (char *)*((_QWORD *)v442 + 1);
        v448 = v442 + 24;
      }
      if (v447 != v448)
        goto LABEL_670;
LABEL_671:
      v439 = 1;
      v440 = 1;
      if ((v441 & 1) != 0)
        goto LABEL_363;
    }
  }
  if (v245)
  {
    v250 = &v464;
    v246 = v247;
    v249 = (__int128 *)(v1 + 9856);
LABEL_355:
    v262 = 0;
    v263 = 0;
    v264 = (char *)v250 + 8;
    *(_OWORD *)v461 = *(__int128 *)((char *)v250 + 8);
    *(_DWORD *)v250 = v246 | 1;
    v265 = (__int128 *)((char *)v249 + 8);
    do
    {
      v266 = v262;
      v267 = &v264[40 * v263];
      v268 = (char *)v265 + 40 * v263;
      v269 = *(_QWORD *)v268;
      *(_QWORD *)v267 = *(_QWORD *)v268;
      if ((v269 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        *((_QWORD *)v267 + 1) = v267 + 24;
        v270 = (uint64_t)(v267 + 8);
        *(_QWORD *)(v270 + 8) = 0x200000000;
        if (*((_DWORD *)v268 + 4))
          sub_22F24C77C(v270, (uint64_t)(v268 + 8));
        v271 = (char *)*((_QWORD *)v268 + 1);
        if (v271 != v268 + 24)
          free(v271);
      }
      v262 = 1;
      v263 = 1;
    }
    while ((v266 & 1) == 0);
    *(_DWORD *)v249 &= ~1u;
    *v265 = *(_OWORD *)v461;
    goto LABEL_363;
  }
  v248 = *((_QWORD *)&v464 + 1);
  *((_QWORD *)&v464 + 1) = *(_QWORD *)(v1 + 9864);
  *(_QWORD *)(v1 + 9864) = v248;
  LODWORD(v248) = v465;
  LODWORD(v465) = *(_DWORD *)(v1 + 9872);
  *(_DWORD *)(v1 + 9872) = v248;
LABEL_363:
  sub_22F2B45A4(v1 + 9856);
  v272 = sub_22F2B4698((int *)&v464);
  if ((v464 & 1) != 0)
    v274 = (char *)&v464 + 8;
  else
    v274 = (char *)*((_QWORD *)&v464 + 1);
  v275 = v465;
  if ((v464 & 1) != 0)
    v275 = 2;
  v276 = (int *)&v274[40 * v275];
  if (v276 != v272)
  {
    v277 = v272;
    v278 = v273;
    do
    {
      if ((*(_WORD *)(*(_QWORD *)v277 + 72) & 0x80) != 0)
        sub_22EFCC320(*(_QWORD *)v277 + 64);
      v279 = v277[4];
      if ((_DWORD)v279)
      {
        v280 = *((_QWORD *)v277 + 1);
        v281 = 8 * v279;
        do
        {
          if ((*(_WORD *)(*(_QWORD *)v280 + 72) & 0x80) != 0)
            sub_22EFCC320(*(_QWORD *)v280 + 64);
          v280 += 8;
          v281 -= 8;
        }
        while (v281);
      }
      while (1)
      {
        v277 += 10;
        if (v277 == v278)
          break;
        if ((*(_QWORD *)v277 | 0x1000) != 0xFFFFFFFFFFFFF000)
          goto LABEL_381;
      }
      v277 = v278;
LABEL_381:
      ;
    }
    while (v277 != v276);
  }
  v282 = *(_DWORD *)(v1 + 9512);
  if (v282)
  {
    v451 = v1 + 24;
    do
    {
      v390 = *(_QWORD *)(*(_QWORD *)(v1 + 9504) + 8 * v282-- - 8);
      *(_DWORD *)(v1 + 9512) = v282;
      if ((*(_BYTE *)(v390 + 29) & 2) == 0)
      {
        v391 = *(_QWORD *)(v390 + 16);
        v392 = (_WORD *)(v391 & 0xFFFFFFFFFFFFFFF8);
        if ((v391 & 4) != 0)
          v392 = *(_WORD **)v392;
        v393 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v390 + 32))(v390);
        v394 = (_QWORD *)v390;
        while (1)
        {
          v395 = v394[2];
          v396 = v395 & 0xFFFFFFFFFFFFFFF8;
          if ((v395 & 4) != 0)
            v396 = *(_QWORD *)(v396 + 8);
          if ((_WORD *)v396 == v392)
            break;
          v394 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v394 + 40))(v394);
          if (v394 == (_QWORD *)v390 || v394 == 0)
          {
            v461[0] = &v462;
            v461[1] = (void *)0x400000000;
            if ((v392[4] & 0x80) != 0)
              sub_22EFCC320((uint64_t)v392);
            v398 = *((_QWORD *)v392 + 2);
            if (v398)
            {
              while ((*(uint64_t (**)(unint64_t))(*(_QWORD *)v398 + 32))(v398) != v393)
              {
                if ((*(_DWORD *)(v398 + 28) & 0x7Fu) - 75 >= 0xFFFFFFC2
                  && *(_QWORD *)(v398 + 40) == *(_QWORD *)(v390 + 40))
                {
                  v399 = LODWORD(v461[1]);
                  if (LODWORD(v461[1]) >= (unint64_t)HIDWORD(v461[1]))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v399 = LODWORD(v461[1]);
                  }
                  *((_QWORD *)v461[0] + v399) = v398;
                  ++LODWORD(v461[1]);
                }
                v398 = *(_QWORD *)(v398 + 8) & 0xFFFFFFFFFFFFFFF8;
                if (!v398)
                  goto LABEL_558;
              }
              goto LABEL_649;
            }
LABEL_558:
            if ((*(_DWORD *)(v390 + 28) & 0x7Fu) - 33 >= 5)
              sub_22EFC77E8(v390, 1);
            (*(void (**)(uint64_t))(*(_QWORD *)v451 + 160))(v451);
            v400 = v392[4] & 0x7F;
            v401 = 0x7FFFFFFFFFFFFFECLL;
            if (v400 > 0x46)
            {
              if (v400 != 83)
              {
                if (v400 == 71)
                {
                  v401 = 0x7FFFFFFFFFFFFFE4;
                }
                else if (v400 != 81)
                {
                  goto LABEL_571;
                }
              }
            }
            else
            {
              if (v400 > 0x18)
                goto LABEL_570;
              if (v400 == 16)
                goto LABEL_563;
              if (((1 << v400) & 0x1066) == 0)
              {
                if (v400 == 24)
                  goto LABEL_563;
LABEL_570:
                if (v400 == 70)
                  goto LABEL_573;
LABEL_571:
                if (v400 - 52 >= 6)
                {
                  if (v400 - 33 < 5)
                  {
LABEL_573:
                    v401 = 0x7FFFFFFFFFFFFFE0;
                    goto LABEL_575;
                  }
LABEL_563:
                  v401 = 0x7FFFFFFFFFFFFFE8;
                  goto LABEL_575;
                }
                v401 = 0x7FFFFFFFFFFFFFDCLL;
              }
            }
LABEL_575:
            sub_22F0AC2D8((unint64_t)&v392[v401], &v458);
            v402 = *(_QWORD *)(v1 + 104);
            *(_DWORD *)(v402 + 312) = *(_DWORD *)(v390 + 24);
            *(_DWORD *)(v402 + 316) = 922;
            if (*(char *)(v402 + 311) < 0)
            {
              **(_BYTE **)(v402 + 288) = 0;
              *(_QWORD *)(v402 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v402 + 288) = 0;
              *(_BYTE *)(v402 + 311) = 0;
            }
            v403 = (unsigned __int8 *)(v402 + 320);
            v454 = (unsigned __int8 *)(v402 + 320);
            v455 = 0;
            v456 = v402;
            v457 = 1;
            *(_BYTE *)(v402 + 320) = 0;
            *(_DWORD *)(v402 + 664) = 0;
            v404 = *(unsigned int *)(v402 + 776);
            if ((_DWORD)v404)
            {
              v405 = *(_QWORD *)(v402 + 768);
              v406 = 56 * v404;
              do
              {
                if (*(char *)(v405 + v406 - 9) < 0)
                  operator delete(*(void **)(v405 + v406 - 32));
                v406 -= 56;
              }
              while (v406);
              v403 = v454;
              *(_DWORD *)(v402 + 776) = 0;
              if (!v403)
              {
                v403 = (unsigned __int8 *)sub_22E3B8AAC(v455);
                v454 = v403;
              }
            }
            else
            {
              *(_DWORD *)(v402 + 776) = 0;
            }
            v403[*v403 + 1] = 11;
            v407 = v454;
            v408 = *v454;
            *v454 = v408 + 1;
            *(_QWORD *)&v407[8 * v408 + 16] = v390;
            sub_22F0AC2D8(v390, __p);
            if (v453 >= 0)
              v409 = __p;
            else
              v409 = (void **)__p[0];
            if (v453 >= 0)
              v410 = v453 & 0x7F;
            else
              v410 = (size_t)__p[1];
            sub_22E3B89A8(&v454, v409, v410);
            v411 = v454;
            if (!v454)
            {
              v411 = (unsigned __int8 *)sub_22E3B8AAC(v455);
              v454 = v411;
            }
            v411[*v411 + 1] = 13;
            v412 = v454;
            v413 = *v454;
            v414 = v413 + 1;
            *v454 = v413 + 1;
            *(_QWORD *)&v412[8 * v413 + 16] = v392;
            v415 = v460 & 0x7F;
            if (v460 < 0)
              v415 = v459;
            v412[v414 + 1] = 2;
            v416 = v454;
            v417 = *v454;
            *v454 = v417 + 1;
            *(_QWORD *)&v416[8 * v417 + 16] = v415 == 0;
            if (v460 >= 0)
              v418 = &v458;
            else
              v418 = v458;
            if (v460 >= 0)
              v419 = v460 & 0x7F;
            else
              v419 = v459;
            sub_22E3B89A8(&v454, v418, v419);
            if (v453 < 0)
              operator delete(__p[0]);
            sub_22E3BB0B8((uint64_t)&v454);
            v420 = LODWORD(v461[1]);
            if (LODWORD(v461[1]))
            {
              v421 = 0;
              do
              {
                v422 = *(_QWORD *)(v1 + 104);
                *(_DWORD *)(v422 + 312) = *(_DWORD *)(*((_QWORD *)v461[0] + v421) + 24);
                *(_DWORD *)(v422 + 316) = 943;
                if (*(char *)(v422 + 311) < 0)
                {
                  **(_BYTE **)(v422 + 288) = 0;
                  *(_QWORD *)(v422 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v422 + 288) = 0;
                  *(_BYTE *)(v422 + 311) = 0;
                }
                v423 = (unsigned __int8 *)(v422 + 320);
                v454 = (unsigned __int8 *)(v422 + 320);
                v455 = 0;
                v456 = v422;
                v457 = 1;
                *(_BYTE *)(v422 + 320) = 0;
                *(_DWORD *)(v422 + 664) = 0;
                v424 = *(unsigned int *)(v422 + 776);
                if ((_DWORD)v424)
                {
                  v425 = *(_QWORD *)(v422 + 768);
                  v426 = 56 * v424;
                  do
                  {
                    if (*(char *)(v425 + v426 - 9) < 0)
                      operator delete(*(void **)(v425 + v426 - 32));
                    v426 -= 56;
                  }
                  while (v426);
                  v423 = v454;
                  *(_DWORD *)(v422 + 776) = 0;
                  v427 = *((_QWORD *)v461[0] + v421);
                  if (!v423)
                  {
                    v423 = (unsigned __int8 *)sub_22E3B8AAC(v455);
                    v454 = v423;
                  }
                }
                else
                {
                  *(_DWORD *)(v422 + 776) = 0;
                  v427 = *((_QWORD *)v461[0] + v421);
                }
                v423[*v423 + 1] = 11;
                v428 = v454;
                v429 = *v454;
                *v454 = v429 + 1;
                *(_QWORD *)&v428[8 * v429 + 16] = v427;
                sub_22E3BB0B8((uint64_t)&v454);
                ++v421;
              }
              while (v421 != v420);
LABEL_646:
              sub_22E3BA850(v1 + 10392, v392);
              if (v460 < 0)
                operator delete(v458);
              (*(void (**)(uint64_t))(*(_QWORD *)v451 + 168))(v451);
LABEL_649:
              if (v461[0] != &v462)
                free(v461[0]);
              break;
            }
            v430 = v392[4] & 0x7F;
            v431 = 0x7FFFFFFFFFFFFFECLL;
            if (v430 > 0x46)
            {
              if (v430 != 83)
              {
                if (v430 == 71)
                {
                  v431 = 0x7FFFFFFFFFFFFFE4;
                }
                else if (v430 != 81)
                {
                  goto LABEL_630;
                }
              }
            }
            else
            {
              if (v430 > 0x18)
                goto LABEL_629;
              if (v430 == 16)
                goto LABEL_622;
              if (((1 << v430) & 0x1066) == 0)
              {
                if (v430 != 24)
                {
LABEL_629:
                  if (v430 == 70)
                    goto LABEL_632;
LABEL_630:
                  if (v430 - 52 < 6)
                  {
                    v431 = 0x7FFFFFFFFFFFFFDCLL;
                    goto LABEL_634;
                  }
                  if (v430 - 33 < 5)
                  {
LABEL_632:
                    v431 = 0x7FFFFFFFFFFFFFE0;
                    goto LABEL_634;
                  }
                }
LABEL_622:
                v431 = 0x7FFFFFFFFFFFFFE8;
              }
            }
LABEL_634:
            v432 = *(_QWORD *)(v1 + 104);
            *(_DWORD *)(v432 + 312) = *(_DWORD *)&v392[v431 + 12];
            *(_DWORD *)(v432 + 316) = 942;
            if (*(char *)(v432 + 311) < 0)
            {
              **(_BYTE **)(v432 + 288) = 0;
              *(_QWORD *)(v432 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v432 + 288) = 0;
              *(_BYTE *)(v432 + 311) = 0;
            }
            v433 = (unsigned __int8 *)(v432 + 320);
            v454 = (unsigned __int8 *)(v432 + 320);
            v455 = 0;
            v456 = v432;
            v457 = 1;
            *(_BYTE *)(v432 + 320) = 0;
            *(_DWORD *)(v432 + 664) = 0;
            v434 = *(unsigned int *)(v432 + 776);
            if ((_DWORD)v434)
            {
              v435 = *(_QWORD *)(v432 + 768);
              v436 = 56 * v434;
              do
              {
                if (*(char *)(v435 + v436 - 9) < 0)
                  operator delete(*(void **)(v435 + v436 - 32));
                v436 -= 56;
              }
              while (v436);
              v433 = v454;
              *(_DWORD *)(v432 + 776) = 0;
              if (!v433)
              {
                v433 = (unsigned __int8 *)sub_22E3B8AAC(v455);
                v454 = v433;
              }
            }
            else
            {
              *(_DWORD *)(v432 + 776) = 0;
            }
            v433[*v433 + 1] = 11;
            v437 = v454;
            v438 = *v454;
            *v454 = v438 + 1;
            *(_QWORD *)&v437[8 * v438 + 16] = v390;
            sub_22E3BB0B8((uint64_t)&v454);
            goto LABEL_646;
          }
        }
        v282 = *(_DWORD *)(v1 + 9512);
      }
    }
    while (v282);
  }
  if (v482[0] > 1u
    || v467 > 1
    || v464 > 1
    || v479[0] > 1u
    || v476 > 1
    || v470 > 1
    || v473 >= 2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 24) + 160))(v1 + 24);
    v283 = *(_QWORD *)(v1 + 128);
    v450 = v1 + 24;
    v284 = *(_QWORD *)(*(_QWORD *)(v1 + 120) + 56);
    v454 = *(unsigned __int8 **)(v1 + 104);
    v455 = v283;
    v456 = v284;
    v285 = sub_22F2B4524(v482);
    v287 = &v483;
    if ((v482[0] & 1) == 0)
      v287 = v483;
    v288 = v484;
    if ((v482[0] & 1) != 0)
      v288 = 2;
    v289 = (int *)&v287[7 * v288];
    if (v289 != v285)
    {
      v290 = v285;
      v291 = v286;
      do
      {
        if (*(_QWORD *)v290)
          v292 = (const void *)(*(_QWORD *)v290 + 64);
        else
          v292 = 0;
        sub_22E3BA850(v1 + 10392, v292);
        if (v293)
        {
          v294 = *(_QWORD *)v290;
          v295 = v290[4];
          if ((_DWORD)v295)
          {
            v296 = *((_QWORD *)v290 + 1);
            v297 = v296 + 16 * v295;
            do
            {
              if (sub_22F0AE518((uint64_t *)&v454, v294, *(_QWORD *)v296, *(_QWORD *)(v296 + 8)))
                goto LABEL_417;
              v296 += 16;
            }
            while (v296 != v297);
            v294 = *(_QWORD *)v290;
          }
          v298 = *(_DWORD *)(v294 + 24);
          v299 = *(_QWORD *)(v1 + 104);
          *(_DWORD *)(v299 + 312) = v298;
          *(_DWORD *)(v299 + 316) = 921;
          if (*(char *)(v299 + 311) < 0)
          {
            **(_BYTE **)(v299 + 288) = 0;
            *(_QWORD *)(v299 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v299 + 288) = 0;
            *(_BYTE *)(v299 + 311) = 0;
          }
          v300 = (unsigned __int8 *)(v299 + 320);
          v461[0] = (void *)(v299 + 320);
          v461[1] = 0;
          v462 = v299;
          v463[0] = 1;
          *(_BYTE *)(v299 + 320) = 0;
          *(_DWORD *)(v299 + 664) = 0;
          v301 = *(unsigned int *)(v299 + 776);
          if ((_DWORD)v301)
          {
            v302 = *(_QWORD *)(v299 + 768);
            v303 = 56 * v301;
            do
            {
              if (*(char *)(v302 + v303 - 9) < 0)
                operator delete(*(void **)(v302 + v303 - 32));
              v303 -= 56;
            }
            while (v303);
            v300 = (unsigned __int8 *)v461[0];
            *(_DWORD *)(v299 + 776) = 0;
            v304 = *(_QWORD *)v290;
            if (!v300)
            {
              v300 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v461[1]);
              v461[0] = v300;
            }
          }
          else
          {
            *(_DWORD *)(v299 + 776) = 0;
            v304 = *(_QWORD *)v290;
          }
          v300[*v300 + 1] = 11;
          v305 = v461[0];
          v306 = *(unsigned __int8 *)v461[0];
          *(_BYTE *)v461[0] = v306 + 1;
          v305[v306 + 2] = v304;
          sub_22E3BB0B8((uint64_t)v461);
        }
LABEL_417:
        while (1)
        {
          v290 += 14;
          if (v290 == v291)
            break;
          if ((*(_QWORD *)v290 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_421;
        }
        v290 = v291;
LABEL_421:
        ;
      }
      while (v290 != v289);
    }
    v307 = sub_22F2B4698(v479);
    v309 = &v480;
    if ((v479[0] & 1) == 0)
      v309 = v480;
    v310 = v481;
    if ((v479[0] & 1) != 0)
      v310 = 2;
    v311 = (int *)&v309[5 * v310];
    if (v311 != v307)
    {
      v312 = (unsigned int *)v307;
      v313 = v308;
      do
      {
        if (*(_QWORD *)v312)
          v314 = (const void *)(*(_QWORD *)v312 + 64);
        else
          v314 = 0;
        sub_22E3BA850(v1 + 10392, v314);
        if (v315)
        {
          v316 = v312[4];
          if ((_DWORD)v316)
          {
            v317 = *(_QWORD *)v312;
            v318 = (unint64_t *)*((_QWORD *)v312 + 1);
            v319 = 8 * v316 - 8;
            do
            {
              v320 = *v318++;
              if (sub_22F0B4234((uint64_t *)&v454, v317, v320))
                break;
              v321 = v319;
              v319 -= 8;
            }
            while (v321);
          }
        }
        while (1)
        {
          v312 += 10;
          if (v312 == v313)
            break;
          if ((*(_QWORD *)v312 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_440;
        }
        v312 = v313;
LABEL_440:
        ;
      }
      while (v312 != (unsigned int *)v311);
    }
    v322 = sub_22F2B4698((int *)&v467);
    v324 = (char *)&v467 + 8;
    if ((v467 & 1) == 0)
      v324 = (char *)*((_QWORD *)&v467 + 1);
    v325 = v468;
    if ((v467 & 1) != 0)
      v325 = 2;
    v326 = (int *)&v324[40 * v325];
    if (v326 != v322)
    {
      v327 = v322;
      v328 = v323;
      do
      {
        v329 = v327[4];
        if ((_DWORD)v329)
        {
          v330 = *(_QWORD *)v327;
          v331 = (unint64_t *)*((_QWORD *)v327 + 1);
          v332 = 8 * v329 - 8;
          do
          {
            v333 = *v331++;
            if (sub_22F0B8F58((void **)&v454, v330, v333))
              break;
            v334 = v332;
            v332 -= 8;
          }
          while (v334);
        }
        while (1)
        {
          v327 += 10;
          if (v327 == v328)
            break;
          if ((*(_QWORD *)v327 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_455;
        }
        v327 = v328;
LABEL_455:
        ;
      }
      while (v327 != v326);
    }
    v335 = sub_22F2B4698((int *)&v464);
    v337 = (char *)&v464 + 8;
    if ((v464 & 1) == 0)
      v337 = (char *)*((_QWORD *)&v464 + 1);
    v338 = v465;
    if ((v464 & 1) != 0)
      v338 = 2;
    v339 = (int *)&v337[40 * v338];
    if (v339 != v335)
    {
      v340 = (unsigned int *)v335;
      v341 = v336;
      do
      {
        if (*(_QWORD *)v340)
          v342 = (const void *)(*(_QWORD *)v340 + 64);
        else
          v342 = 0;
        sub_22E3BA850(v1 + 10392, v342);
        if (v343)
        {
          v344 = v340[4];
          if ((_DWORD)v344)
          {
            v345 = *(_QWORD *)v340;
            v346 = (unint64_t *)*((_QWORD *)v340 + 1);
            v347 = 8 * v344 - 8;
            do
            {
              v348 = *v346++;
              if ((sub_22F0B9C80((void **)&v454, v345, v348) & 1) != 0)
                break;
              v349 = v347;
              v347 -= 8;
            }
            while (v349);
          }
        }
        while (1)
        {
          v340 += 10;
          if (v340 == v341)
            break;
          if ((*(_QWORD *)v340 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_474;
        }
        v340 = v341;
LABEL_474:
        ;
      }
      while (v340 != (unsigned int *)v339);
    }
    v350 = sub_22F2B4524((int *)&v476);
    v352 = (char *)&v476 + 8;
    if ((v476 & 1) == 0)
      v352 = (char *)*((_QWORD *)&v476 + 1);
    v353 = v477;
    if ((v476 & 1) != 0)
      v353 = 2;
    v354 = (int *)&v352[56 * v353];
    if (v354 != v350)
    {
      v355 = (unint64_t *)v350;
      v356 = v351;
      do
      {
        if (*v355)
          v357 = (const void *)(*v355 + 48);
        else
          v357 = 0;
        sub_22E3BA850(v1 + 10392, v357);
        if (v358)
        {
          v359 = *((unsigned int *)v355 + 4);
          if ((_DWORD)v359)
          {
            v361 = *v355;
            v360 = v355[1];
            v362 = v360 + 16 * v359;
            do
            {
              if (sub_22F0B730C((void **)&v454, v361, *(_QWORD *)v360, *(_QWORD *)(v360 + 8)))
                break;
              v360 += 16;
            }
            while (v360 != v362);
          }
        }
        while (1)
        {
          v355 += 7;
          if (v355 == v356)
            break;
          if ((*v355 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_493;
        }
        v355 = v356;
LABEL_493:
        ;
      }
      while (v355 != (unint64_t *)v354);
    }
    v363 = sub_22F2B4524((int *)&v473);
    v365 = (char *)&v473 + 8;
    if ((v473 & 1) == 0)
      v365 = (char *)*((_QWORD *)&v473 + 1);
    v366 = v474;
    if ((v473 & 1) != 0)
      v366 = 2;
    v367 = (int *)&v365[56 * v366];
    if (v367 != v363)
    {
      v368 = (unint64_t *)v363;
      v369 = v364;
      do
      {
        if (*v368)
          v370 = (const void *)(*v368 + 48);
        else
          v370 = 0;
        sub_22E3BA850(v1 + 10392, v370);
        if (v371)
        {
          v372 = *((unsigned int *)v368 + 4);
          if ((_DWORD)v372)
          {
            v374 = *v368;
            v373 = v368[1];
            v375 = v373 + 16 * v372;
            do
            {
              if (sub_22F0B8290((uint64_t *)&v454, v374, *(_QWORD *)v373, *(_QWORD *)(v373 + 8)))
                break;
              v373 += 16;
            }
            while (v373 != v375);
          }
        }
        while (1)
        {
          v368 += 7;
          if (v368 == v369)
            break;
          if ((*v368 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_512;
        }
        v368 = v369;
LABEL_512:
        ;
      }
      while (v368 != (unint64_t *)v367);
    }
    v376 = sub_22F2B4524((int *)&v470);
    v378 = (char *)&v470 + 8;
    if ((v470 & 1) == 0)
      v378 = (char *)*((_QWORD *)&v470 + 1);
    v379 = v471;
    if ((v470 & 1) != 0)
      v379 = 2;
    v380 = (int *)&v378[56 * v379];
    if (v380 != v376)
    {
      v381 = (unint64_t *)v376;
      v382 = v377;
      v383 = v1 + 10392;
      do
      {
        if (*v381)
          v384 = (const void *)(*v381 + 48);
        else
          v384 = 0;
        sub_22E3BA850(v383, v384);
        if (v385)
        {
          v386 = *((unsigned int *)v381 + 4);
          if ((_DWORD)v386)
          {
            v388 = *v381;
            v387 = v381[1];
            v389 = v387 + 16 * v386;
            do
            {
              if (sub_22F0B88F4((uint64_t *)&v454, v388, *(_QWORD *)v387, *(_QWORD *)(v387 + 8)))
                break;
              v387 += 16;
            }
            while (v387 != v389);
          }
        }
        while (1)
        {
          v381 += 7;
          if (v381 == v382)
            break;
          if ((*v381 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_531;
        }
        v381 = v382;
LABEL_531:
        ;
      }
      while (v381 != (unint64_t *)v380);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v450 + 168))(v450);
  }
  sub_22F2BF184((uint64_t)&v464);
  sub_22F2BF184((uint64_t)&v467);
  sub_22F2BEF58((uint64_t)&v470);
  sub_22F2BEF58((uint64_t)&v473);
  sub_22F2BEF58((uint64_t)&v476);
  sub_22F2BF184((uint64_t)v479);
  return sub_22F2BEF58((uint64_t)v482);
}

uint64_t sub_22E789798(uint64_t result)
{
  int v1;

  v1 = *(_DWORD *)(result + 7432);
  *(_DWORD *)(result + 7432) = v1 + 1;
  if (!v1)
  {
    result = *(_QWORD *)(result + 464);
    if (result)
      return llvm::Timer::startTimer((llvm::Timer *)result);
  }
  return result;
}

uint64_t sub_22E7897B8(uint64_t result)
{
  uint64_t v1;
  int v2;
  int v3;
  uint64_t v4;
  llvm *v5;
  unint64_t v6;
  const void *v7;
  llvm *v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  llvm *v19;
  uint64_t v20;
  BOOL v21;
  llvm *v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t *v25;
  llvm *v26;
  uint64_t v27;
  llvm *v28;
  llvm *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  llvm *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t **v38;
  uint64_t *v39;
  llvm **v40;
  uint64_t *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  int v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  int v60;
  unsigned int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void **v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unsigned int v78;
  int v79;
  __int128 v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  unsigned int v85;
  llvm *v86;
  uint64_t v87;
  llvm *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t i;
  unint64_t v92;
  unsigned int v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  llvm *v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unsigned int v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  llvm *v105;
  int v106;
  llvm *v107;
  llvm *v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unsigned __int8 *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  uint64_t v142;
  llvm *v143;
  char *v144;
  uint64_t v145;
  char *v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t *v151;
  uint64_t v152;
  unint64_t *v153;
  unint64_t v154;
  int v155;
  unsigned int v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *j;
  uint64_t v160;
  _QWORD *k;
  uint64_t v162;
  uint64_t v163;
  _QWORD *m;
  uint64_t v165;
  _QWORD *n;
  unint64_t *v167;
  unint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t ii;
  uint64_t v173;
  unint64_t v174;
  unsigned int v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  BOOL v179;
  llvm *v180;
  _QWORD *v181;
  int v182;
  unsigned int v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  int v187;
  unsigned int v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unsigned int v197;
  uint64_t v198;
  unsigned int v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t *v202;
  uint64_t v203;
  llvm **v204;
  int v205;
  uint64_t v206;
  _DWORD *v208;
  _QWORD *v209;
  unint64_t v210;
  int v211;
  int v212;
  _QWORD *v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  _QWORD *v217;
  uint64_t v218;
  uint64_t v219;
  unsigned int v220;
  int v221;
  int v222;
  _QWORD *v223;
  uint64_t v224;
  llvm *v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  llvm::Timer *v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  char v235;
  uint64_t v236;
  uint64_t v237;
  BOOL v238;
  uint64_t v239;
  int v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t *v243;
  uint64_t *v244;
  char v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  _QWORD v257[3];
  __int16 v258;
  llvm *v259[2];
  unsigned int v260;
  llvm *v261;
  uint64_t v262;
  unsigned int v263;
  llvm *v264[2];
  _OWORD v265[3];
  void *v266;
  unsigned int v267;
  uint64_t v268;
  llvm *v269[2];
  _DWORD v270[12];
  __int128 v271;
  unsigned int v272;
  llvm **v273;
  int v274;
  int v275;
  uint64_t v276;

  v1 = result;
  v276 = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD *)(result + 7456);
  if (v2 == 1)
  {
    v250 = result + 7464;
    v253 = result + 3360;
    v248 = result + 4720;
    v249 = result + 9240;
    while (1)
    {
      v4 = *(_QWORD *)(v1 + 7496);
      if (*(_QWORD *)(v1 + 7488) == v4)
        break;
      v261 = 0;
      v262 = 0;
      v263 = 0;
      do
      {
        v5 = *(llvm **)(v4 - 40);
        v264[0] = v5;
        v269[0] = (llvm *)v270;
        v269[1] = (llvm *)0x400000000;
        v6 = *(unsigned int *)(v4 - 24);
        if ((_DWORD)v6 && v269 != (llvm **)(v4 - 32))
        {
          v7 = *(const void **)(v4 - 32);
          if (v7 == (const void *)(v4 - 16))
          {
            v8 = (llvm *)v270;
            v9 = *(unsigned int *)(v4 - 24);
            if (v6 < 5)
              goto LABEL_11;
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v9 = *(unsigned int *)(v4 - 24);
            if ((_DWORD)v9)
            {
              v7 = *(const void **)(v4 - 32);
              v8 = v269[0];
LABEL_11:
              memcpy(v8, v7, 4 * v9);
            }
            LODWORD(v269[1]) = v6;
          }
          else
          {
            v269[0] = *(llvm **)(v4 - 32);
            LODWORD(v269[1]) = v6;
            HIDWORD(v269[1]) = *(_DWORD *)(v4 - 20);
            *(_QWORD *)(v4 - 32) = v4 - 16;
            *(_DWORD *)(v4 - 20) = 0;
          }
          *(_DWORD *)(v4 - 24) = 0;
        }
        sub_22F2B4324(v250);
        v10 = sub_22F2BE60C((uint64_t)&v261, (uint64_t *)v264);
        sub_22E769084((unsigned int *)v1, (uint64_t)v5, (uint64_t)v269, (uint64_t)(v10 + 1));
        if ((_DWORD *)v269[0] != v270)
          free(v269[0]);
        v4 = *(_QWORD *)(v1 + 7496);
      }
      while (*(_QWORD *)(v1 + 7488) != v4);
      if (*(_DWORD *)(v1 + 8512))
      {
LABEL_18:
        v11 = 0;
        do
        {
          v12 = *(_QWORD *)(v1 + 8504) + 16 * v11;
          v13 = *(_QWORD **)v12;
          v14 = sub_22E77D8C8(v1, *(_DWORD *)(v12 + 8));
          v13[6] = v14;
          v15 = *(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0);
          if (v15)
            v16 = *(unsigned __int8 *)(v15 + 16) - 27 > 0xFFFFFFFD;
          else
            v16 = 0;
          if (!v16)
            v15 = sub_22F10CF48(v15);
          v17 = *(_QWORD *)(*(_QWORD *)(v15 + 24) & 0xFFFFFFFFFFFFFFF0);
          LOBYTE(v269[0]) = 0;
          v18 = sub_22F110500((uint64_t)v269, v17);
          if (v18 && (*(_QWORD *)(v18 + 24) > 0xFuLL || (*(_BYTE *)(v18 + 17) & 4) != 0))
          {
            v19 = (llvm *)(*(uint64_t (**)(_QWORD *))(*v13 + 32))(v13);
            v20 = *(_QWORD *)(v13[6] & 0xFFFFFFFFFFFFFFF0);
            if (v20)
              v21 = *(unsigned __int8 *)(v20 + 16) - 27 > 0xFFFFFFFD;
            else
              v21 = 0;
            if (!v21)
              v20 = sub_22F10CF48(v20);
            v22 = *(llvm **)(v20 + 24);
            v269[0] = v19;
            v269[1] = v22;
            sub_22E787084(v253, (uint64_t *)v269);
          }
          ++v11;
        }
        while (v11 != *(_DWORD *)(v1 + 8512));
      }
LABEL_34:
      *(_DWORD *)(v1 + 8512) = 0;
      if (*(_DWORD *)(v1 + 9056))
      {
        v23 = 0;
        do
          sub_22E7B1FC0(v1, *(_QWORD *)(*(_QWORD *)(v1 + 9048) + 8 * v23++));
        while (v23 != *(_DWORD *)(v1 + 9056));
      }
      *(_DWORD *)(v1 + 9056) = 0;
      if (*(_DWORD *)(v1 + 8784))
      {
        v24 = 0;
        do
        {
          v25 = (unint64_t *)(*(_QWORD *)(v1 + 8776) + 16 * v24);
          sub_22E7B4D50((_QWORD *)v1, *v25, v25[1]);
          ++v24;
        }
        while (v24 != *(_DWORD *)(v1 + 8784));
      }
      *(_DWORD *)(v1 + 8784) = 0;
      v26 = (llvm *)((char *)v261 + 40 * v263);
      if ((_DWORD)v262)
      {
        if (v263)
        {
          v27 = 40 * v263;
          v28 = v261;
          while ((*(_QWORD *)v28 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v28 = (llvm *)((char *)v28 + 40);
            v27 -= 40;
            if (!v27)
              goto LABEL_45;
          }
        }
        else
        {
          v28 = v261;
        }
      }
      else
      {
LABEL_45:
        v28 = (llvm *)((char *)v261 + 40 * v263);
      }
      v29 = (llvm *)((char *)v261 + 40 * v263);
LABEL_47:
      while (v28 != v29)
      {
        v30 = *((unsigned int *)v28 + 4);
        if ((_DWORD)v30)
        {
          v31 = 0;
          v32 = *(_QWORD *)v28;
          v33 = 8 * v30;
          do
          {
            sub_22F2B2E34(v1, *(const void **)(*((_QWORD *)v28 + 1) + v31), v32);
            v31 += 8;
          }
          while (v33 != v31);
        }
        v34 = (llvm *)((char *)v28 + 40);
        v28 = v26;
        if (v34 != v26)
        {
          v28 = v34;
          while ((*(_QWORD *)v28 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v28 = (llvm *)((char *)v28 + 40);
            if (v28 == v26)
            {
              v28 = v26;
              goto LABEL_47;
            }
          }
        }
      }
      v35 = *(_QWORD *)(v1 + 4744);
      if (*(_QWORD *)(v1 + 4752) != v35)
      {
        v36 = 0;
        v37 = 0;
        do
        {
          v38 = (uint64_t **)(v35 + 56 * v36);
          v41 = *v38;
          v40 = (llvm **)(v38 + 1);
          v39 = v41;
          v269[0] = (llvm *)v270;
          v269[1] = (llvm *)0x200000000;
          if (v269 != v40)
          {
            if (*((_DWORD *)v40 + 2) < 3u)
            {
              v42 = 0;
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v42 = v269[1];
              if (*((_DWORD *)v40 + 3) < LODWORD(v269[1]))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v42 = v269[1];
              }
            }
            v43 = *((_DWORD *)v40 + 2);
            if (v42 >= v43)
              v44 = v43;
            else
              v44 = v42;
            if ((_DWORD)v44)
            {
              v45 = 0;
              do
              {
                v46 = (char *)v269[0] + v45;
                v47 = (uint64_t)*v40 + v45;
                *(_OWORD *)v264 = *(_OWORD *)((char *)v269[0] + v45);
                v48 = *(_DWORD *)(v47 + 8);
                *(_QWORD *)v46 = *(_QWORD *)v47;
                *((_DWORD *)v46 + 2) = v48;
                *(llvm **)v47 = v264[0];
                *(_DWORD *)(v47 + 8) = v264[1];
                v45 += 16;
              }
              while (16 * v44 != v45);
              v42 = v269[1];
              v43 = *((_DWORD *)v40 + 2);
            }
            v49 = v42 - v43;
            if (v42 > v43)
            {
              if ((_DWORD)v44 != v42)
              {
                memcpy((char *)*v40 + 16 * v43, (char *)v269[0] + 16 * v44, 16 * v42 - 16 * v44);
                v43 = *((_DWORD *)v40 + 2);
              }
              *((_DWORD *)v40 + 2) = v49 + v43;
              LODWORD(v269[1]) = v44;
              if (!(_DWORD)v44)
                goto LABEL_89;
              goto LABEL_74;
            }
            v62 = v43 - v42;
            if (v43 > v42)
            {
              if ((_DWORD)v44 != v43)
              {
                memcpy((char *)v269[0] + 16 * v42, (char *)*v40 + 16 * v44, (llvm *)((char *)*v40 + 16 * v43) - (llvm *)((char *)*v40 + 16 * v44));
                v42 = v269[1];
              }
              LODWORD(v269[1]) = v62 + v42;
              *((_DWORD *)v40 + 2) = v44;
              LODWORD(v44) = v269[1];
              if (!LODWORD(v269[1]))
                goto LABEL_89;
LABEL_74:
              v50 = 0;
              v51 = 16 * v44;
              do
              {
                v52 = *(_QWORD *)((char *)v269[0] + v50);
                v53 = *(_DWORD *)(v52 + 4);
                v16 = v53 > 5;
                v54 = (1 << v53) & 0x23;
                v55 = v16 || v54 == 0;
                if (v55)
                  sub_22E76CB3C(v1, v39, v52, *(_DWORD *)((char *)v269[0] + v50 + 8));
                v50 += 16;
              }
              while (v51 != v50);
              if (LODWORD(v269[1]))
              {
                v56 = 0;
                v57 = 16 * LODWORD(v269[1]);
                do
                {
                  v58 = *(_QWORD *)((char *)v269[0] + v56);
                  v59 = *(_DWORD *)(v58 + 4);
                  v16 = v59 > 5;
                  v60 = (1 << v59) & 0x23;
                  if (!v16 && v60 != 0)
                    sub_22E76CB3C(v1, v39, v58, *(_DWORD *)((char *)v269[0] + v56 + 8));
                  v56 += 16;
                }
                while (v57 != v56);
              }
              goto LABEL_89;
            }
            LODWORD(v44) = v42;
            if (v42)
              goto LABEL_74;
          }
LABEL_89:
          if ((_DWORD *)v269[0] != v270)
            free(v269[0]);
          v35 = *(_QWORD *)(v1 + 4744);
          v36 = ++v37;
        }
        while (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(v1 + 4752) - v35) >> 3) != v37);
      }
      v63 = *(_DWORD *)(v1 + 4728);
      if (!v63)
      {
        if (!*(_DWORD *)(v1 + 4732))
          goto LABEL_102;
        v85 = *(_DWORD *)(v1 + 4736);
        if (v85 > 0x40)
        {
          v211 = 0;
          goto LABEL_408;
        }
LABEL_139:
        if (!v85)
        {
LABEL_138:
          *(_QWORD *)(v1 + 4728) = 0;
          goto LABEL_102;
        }
LABEL_136:
        v86 = *(llvm **)v248;
        v87 = 16 * v85;
        do
        {
          *(_QWORD *)v86 = -4096;
          v86 = (llvm *)((char *)v86 + 16);
          v87 -= 16;
        }
        while (v87);
        goto LABEL_138;
      }
      v85 = *(_DWORD *)(v1 + 4736);
      if (v85 <= 4 * v63)
        goto LABEL_139;
      if (v85 < 0x41)
      {
        if (!v85)
          goto LABEL_138;
        goto LABEL_136;
      }
      v212 = 1 << (33 - __clz(v63 - 1));
      if (v212 <= 64)
        v211 = 64;
      else
        v211 = v212;
LABEL_408:
      if (v211 == v85)
      {
        *(_QWORD *)(v1 + 4728) = 0;
        v213 = *(_QWORD **)(v1 + 4720);
        v214 = 16 * v85;
        do
        {
          *v213 = -4096;
          v213 += 2;
          v214 -= 16;
        }
        while (v214);
      }
      else
      {
        llvm::deallocate_buffer(*(llvm **)v248, (void *)(16 * v85));
        if (v211)
        {
          v215 = (4 * v211 / 3u + 1) | ((unint64_t)(4 * v211 / 3u + 1) >> 1);
          v216 = v215 | (v215 >> 2) | ((v215 | (v215 >> 2)) >> 4);
          LODWORD(v216) = (((v216 | (v216 >> 8)) >> 16) | v216 | (v216 >> 8)) + 1;
          *(_DWORD *)(v1 + 4736) = v216;
          v217 = (_QWORD *)MEMORY[0x23489D23C](16 * v216, 8);
          *(_QWORD *)(v1 + 4720) = v217;
          *(_QWORD *)(v1 + 4728) = 0;
          v218 = *(unsigned int *)(v1 + 4736);
          if ((_DWORD)v218)
          {
            v219 = 16 * v218;
            do
            {
              *v217 = -4096;
              v217 += 2;
              v219 -= 16;
            }
            while (v219);
          }
        }
        else
        {
          *(_QWORD *)v248 = 0;
          *(_QWORD *)(v248 + 8) = 0;
          *(_DWORD *)(v248 + 16) = 0;
        }
      }
LABEL_102:
      v64 = *(_QWORD *)(v1 + 4752);
      v65 = *(_QWORD *)(v1 + 4744);
      while (v64 != v65)
      {
        v84 = *(void **)(v64 - 48);
        if ((void *)(v64 - 32) != v84)
          free(v84);
        v64 -= 56;
      }
      *(_QWORD *)(v1 + 4752) = v65;
      while (1)
      {
        v66 = *(_QWORD *)(v1 + 9232);
        if (!v66)
          break;
        v67 = *(void ***)(v1 + 9200);
        v68 = *(_QWORD *)(v1 + 9224);
        v69 = *(uint64_t *)((char *)v67 + ((v68 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v68;
        v70 = *(_QWORD *)v69;
        v72 = *(unsigned int *)(v69 + 8);
        v71 = *(unsigned int *)(v69 + 12);
        *(_QWORD *)(v1 + 9232) = v66 - 1;
        *(_QWORD *)(v1 + 9224) = v68 + 1;
        if (v68 + 1 >= 0x200)
        {
          operator delete(*v67);
          *(_QWORD *)(v1 + 9200) += 8;
          *(_QWORD *)(v1 + 9224) -= 256;
        }
        v73 = sub_22E77F870((_QWORD *)v1, v72);
        v74 = sub_22EFCAE04(v73);
        v75 = sub_22E77F870((_QWORD *)v1, v71);
        v76 = sub_22EFCAE04(v75);
        if (v74 == v76)
        {
          v77 = v74 & 0xFFFFFFFFFFFFFFFBLL;
        }
        else
        {
          v82 = v76;
          v83 = sub_22E3CD3D4(*(_QWORD *)(v1 + 128) + 2032, 16, 3);
          *(_QWORD *)v83 = v74;
          *(_QWORD *)(v83 + 8) = v82;
          v77 = v83 | 4;
        }
        *(_QWORD *)(v70 + 16) = v77;
      }
      v78 = *(_DWORD *)(v1 + 2920);
      if (v78)
      {
        v79 = *(_DWORD *)(v1 + 10984);
        do
        {
          v80 = *(_OWORD *)(*(_QWORD *)(v1 + 2912) + 16 * v78 - 16);
          *(_DWORD *)(v1 + 2920) = v78 - 1;
          *(_OWORD *)v269 = v80;
          *(_DWORD *)(v1 + 10984) = 1;
          sub_22E7B36A8((int32x2_t *)v1, (uint64_t)v269);
          *(_DWORD *)(v1 + 10984) = v79;
          v78 = *(_DWORD *)(v1 + 2920);
        }
        while (v78);
      }
      while (2)
      {
        v137 = *(unsigned int *)(v1 + 9304);
        if ((_DWORD)v137)
        {
          v138 = *(_QWORD *)(v1 + 9296) + 96 * v137;
          v140 = *(_QWORD *)(v138 - 96);
          v139 = *(_QWORD *)(v138 - 88);
          v264[0] = (llvm *)v265;
          v264[1] = (llvm *)0x400000000;
          v141 = *(_DWORD *)(v138 - 72);
          if (v141 && v264 != (llvm **)(v138 - 80))
          {
            if (v141 < 5)
            {
              v88 = (llvm *)v265;
              v89 = *(unsigned int *)(v138 - 72);
              goto LABEL_142;
            }
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v89 = *(unsigned int *)(v138 - 72);
            if ((_DWORD)v89)
            {
              v88 = v264[0];
LABEL_142:
              memcpy(v88, *(const void **)(v138 - 80), 16 * v89);
            }
            LODWORD(v264[1]) = v141;
          }
          v259[0] = 0;
          v259[1] = 0;
          v260 = 0;
          if (!v140 || (v90 = v140, (*(_DWORD *)(v140 + 28) & 0x7F) != 0x53))
          {
            for (i = *(_QWORD *)(v140 + 16); ; i = *(_QWORD *)(v92 + v94 + 16))
            {
              v92 = i & 0xFFFFFFFFFFFFFFF8;
              if ((i & 4) != 0)
                v92 = *(_QWORD *)v92;
              v93 = *(_WORD *)(v92 + 8) & 0x7F;
              if (v93 == 83)
              {
                v90 = v92 - 40;
                break;
              }
              v94 = -40;
              if ((*(_WORD *)(v92 + 8) & 0x7Fu) > 0x46)
              {
                if (v93 == 71)
                {
                  v94 = -56;
                  continue;
                }
                if (v93 != 81)
                  goto LABEL_159;
              }
              else
              {
                if (v93 > 0x18)
                  goto LABEL_158;
                if (v93 == 16)
                  goto LABEL_153;
                if (((1 << v93) & 0x1066) == 0)
                {
                  if (v93 == 24)
                  {
LABEL_153:
                    v94 = -48;
                    continue;
                  }
LABEL_158:
                  if (v93 == 70)
                  {
                    v94 = -64;
                    continue;
                  }
LABEL_159:
                  v95 = v93 - 52;
                  v179 = v93 - 33 >= 5;
                  v96 = -64;
                  if (v179)
                    v96 = -48;
                  v179 = v95 >= 6;
                  v94 = -72;
                  if (v179)
                    v94 = v96;
                  continue;
                }
              }
            }
          }
          v97 = *(llvm **)(v90 + 88);
          if (v139)
          {
            v98 = v139;
            if ((*(_DWORD *)(v139 + 28) & 0x7F) == 0x53)
            {
LABEL_188:
              v105 = *(llvm **)(v98 + 88);
              v269[0] = v97;
              v269[1] = v105;
              memset(v270, 0, sizeof(v270));
              v271 = 0u;
              v272 = 0;
              v273 = v259;
              v274 = 0;
              v275 = 256;
              v251 = v140;
              v252 = v139;
              v106 = sub_22F3794DC((uint64_t)v269, v140, v139);
              v107 = v264[0];
              v108 = (llvm *)((char *)v264[0] + 16 * LODWORD(v264[1]));
              if (v106)
              {
                if (LODWORD(v264[1]))
                {
                  do
                  {
                    v111 = (_QWORD *)*((_QWORD *)v107 + 1);
                    v112 = v111[2];
                    v113 = v112 & 0xFFFFFFFFFFFFFFF8;
                    if ((v112 & 4) != 0)
                      v113 = *(_QWORD *)v113;
                    v114 = *(_QWORD *)v107;
                    v115 = *(_QWORD *)(*(_QWORD *)v107 + 16);
                    v116 = v115 & 0xFFFFFFFFFFFFFFF8;
                    if ((v115 & 4) != 0)
                      v116 = *(_QWORD *)(v116 + 8);
                    if (v113 == v116)
                    {
                      v117 = v113 & 0xFFFFFFFFFFFFFFFBLL;
                    }
                    else
                    {
                      v120 = sub_22E3CD3D4(*(_QWORD *)(v1 + 128) + 2032, 16, 3);
                      *(_QWORD *)v120 = v113;
                      *(_QWORD *)(v120 + 8) = v116;
                      v117 = v120 | 4;
                    }
                    *(_QWORD *)(v114 + 16) = v117;
                    v118 = *(_QWORD *)(v1 + 128);
                    v119 = (*(uint64_t (**)(_QWORD *))(*v111 + 32))(v111);
                    *(_QWORD *)&v254 = v114;
                    sub_22F25E108((uint64_t *)(v118 + 1512), &v254)[1] = v119;
                    v107 = (llvm *)((char *)v107 + 16);
                  }
                  while (v107 != v108);
                }
                sub_22EFC77E8(v251, 1);
                v109 = *(_QWORD *)(v252 + 104);
                v110 = *(_QWORD *)(v109 + 120);
                if (!v110)
                {
                  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v109 + 96) + 88), *(_QWORD *)(v109 + 96));
                  v110 = *(_QWORD *)(v109 + 120);
                }
                *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(v110 & 0xFFFFFFFFFFFFFFF8) + 120) & 0xFFFFFFFFFFFFFFF8) + 64) = 0;
              }
              else if (LODWORD(v264[1]))
              {
                do
                {
                  v122 = *(_QWORD *)v107;
                  v121 = *((_QWORD *)v107 + 1);
                  v123 = *(_QWORD *)(v1 + 104);
                  *(_DWORD *)(v123 + 312) = *(_DWORD *)(*(_QWORD *)v107 + 24);
                  *(_DWORD *)(v123 + 316) = 3279;
                  if (*(char *)(v123 + 311) < 0)
                  {
                    **(_BYTE **)(v123 + 288) = 0;
                    *(_QWORD *)(v123 + 296) = 0;
                  }
                  else
                  {
                    *(_BYTE *)(v123 + 288) = 0;
                    *(_BYTE *)(v123 + 311) = 0;
                  }
                  v124 = (unsigned __int8 *)(v123 + 320);
                  v254 = (unint64_t)(v123 + 320);
                  *(_QWORD *)&v255 = v123;
                  WORD4(v255) = 1;
                  *(_BYTE *)(v123 + 320) = 0;
                  *(_DWORD *)(v123 + 664) = 0;
                  v125 = *(unsigned int *)(v123 + 776);
                  if ((_DWORD)v125)
                  {
                    v126 = *(_QWORD *)(v123 + 768);
                    v127 = 56 * v125;
                    do
                    {
                      if (*(char *)(v126 + v127 - 9) < 0)
                        operator delete(*(void **)(v126 + v127 - 32));
                      v127 -= 56;
                    }
                    while (v127);
                    v124 = (unsigned __int8 *)v254;
                    *(_DWORD *)(v123 + 776) = 0;
                    v128 = *(_QWORD *)(v122 + 40);
                    if (!v124)
                    {
                      v124 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v254 + 1));
                      *(_QWORD *)&v254 = v124;
                    }
                  }
                  else
                  {
                    *(_DWORD *)(v123 + 776) = 0;
                    v128 = *(_QWORD *)(v122 + 40);
                  }
                  v129 = v128 & 0xFFFFFFFFFFFFFFF8;
                  if ((v128 & 7) != 0)
                    v129 = 0;
                  v124[*v124 + 1] = 5;
                  v130 = v254;
                  v131 = *(unsigned __int8 *)v254;
                  *(_BYTE *)v254 = v131 + 1;
                  *(_QWORD *)(v130 + 8 * v131 + 16) = v129;
                  sub_22E3BB0B8((uint64_t)&v254);
                  v132 = *(_DWORD *)(v121 + 24);
                  v133 = *(_QWORD *)(v1 + 104);
                  *(_DWORD *)(v133 + 312) = v132;
                  *(_DWORD *)(v133 + 316) = 109;
                  if (*(char *)(v133 + 311) < 0)
                  {
                    **(_BYTE **)(v133 + 288) = 0;
                    *(_QWORD *)(v133 + 296) = 0;
                  }
                  else
                  {
                    *(_BYTE *)(v133 + 288) = 0;
                    *(_BYTE *)(v133 + 311) = 0;
                  }
                  v257[0] = v133 + 320;
                  v257[1] = 0;
                  v257[2] = v133;
                  v258 = 1;
                  *(_BYTE *)(v133 + 320) = 0;
                  *(_DWORD *)(v133 + 664) = 0;
                  v134 = *(unsigned int *)(v133 + 776);
                  if ((_DWORD)v134)
                  {
                    v135 = *(_QWORD *)(v133 + 768);
                    v136 = 56 * v134;
                    do
                    {
                      if (*(char *)(v135 + v136 - 9) < 0)
                        operator delete(*(void **)(v135 + v136 - 32));
                      v136 -= 56;
                    }
                    while (v136);
                  }
                  *(_DWORD *)(v133 + 776) = 0;
                  sub_22E3BB0B8((uint64_t)v257);
                  v107 = (llvm *)((char *)v107 + 16);
                }
                while (v107 != v108);
              }
              sub_22F2B43B4(v249);
              sub_22F2BB8CC((uint64_t)v269);
              llvm::deallocate_buffer(v259[0], (void *)(16 * v260));
              if ((_OWORD *)v264[0] != v265)
                free(v264[0]);
              continue;
            }
          }
          v99 = *(_QWORD *)(v139 + 16);
          while (2)
          {
            v100 = v99 & 0xFFFFFFFFFFFFFFF8;
            if ((v99 & 4) != 0)
              v100 = *(_QWORD *)v100;
            v101 = *(_WORD *)(v100 + 8) & 0x7F;
            if (v101 == 83)
            {
              v98 = v100 - 40;
              goto LABEL_188;
            }
            v102 = -40;
            if ((*(_WORD *)(v100 + 8) & 0x7Fu) > 0x46)
            {
              if (v101 == 71)
              {
                v102 = -56;
                goto LABEL_176;
              }
              if (v101 == 81)
                goto LABEL_176;
            }
            else
            {
              if (v101 <= 0x18)
              {
                if (v101 == 16)
                  goto LABEL_175;
                if (((1 << v101) & 0x1066) != 0)
                {
LABEL_176:
                  v99 = *(_QWORD *)(v100 + v102 + 16);
                  continue;
                }
                if (v101 == 24)
                {
LABEL_175:
                  v102 = -48;
                  goto LABEL_176;
                }
              }
              if (v101 == 70)
              {
                v102 = -64;
                goto LABEL_176;
              }
            }
            break;
          }
          v103 = v101 - 52;
          v179 = v101 - 33 >= 5;
          v104 = -64;
          if (v179)
            v104 = -48;
          v179 = v103 >= 6;
          v102 = -72;
          if (v179)
            v102 = v104;
          goto LABEL_176;
        }
        break;
      }
      v142 = v263;
      v143 = v261;
      if (v263)
      {
        v144 = (char *)v261 + 24;
        v145 = 40 * v263;
        do
        {
          if ((*((_QWORD *)v144 - 3) | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            v146 = (char *)*((_QWORD *)v144 - 2);
            if (v144 != v146)
              free(v146);
          }
          v144 += 40;
          v145 -= 40;
        }
        while (v145);
      }
      else
      {
        v142 = 0;
      }
      llvm::deallocate_buffer(v143, (void *)(40 * v142));
    }
    v81 = *(_DWORD *)(v1 + 8512);
    if (v81
      || *(_DWORD *)(v1 + 9056)
      || *(_DWORD *)(v1 + 8784)
      || *(_QWORD *)(v1 + 4744) != *(_QWORD *)(v1 + 4752)
      || *(_QWORD *)(v1 + 9232)
      || *(_DWORD *)(v1 + 2920)
      || *(_DWORD *)(v1 + 9304))
    {
      v261 = 0;
      v262 = 0;
      v263 = 0;
      if (v81)
        goto LABEL_18;
      goto LABEL_34;
    }
    v147 = *(char **)(v1 + 3712);
    v148 = *(char **)(v1 + 3704);
    v149 = 3720;
    if (v147 == v148)
      v149 = 3724;
    v150 = *(unsigned int *)(v1 + v149);
    v151 = *(unint64_t **)(v1 + 3712);
    if ((_DWORD)v150)
    {
      v152 = 0;
      while (*(_QWORD *)&v147[v152] >= 0xFFFFFFFFFFFFFFFELL)
      {
        v152 += 8;
        if (8 * v150 == v152)
          goto LABEL_285;
      }
      v151 = (unint64_t *)&v147[v152];
    }
    v153 = (unint64_t *)&v147[8 * v150];
    if (v151 != v153)
    {
      v154 = *v151;
LABEL_259:
      v155 = *(_DWORD *)(v154 + 28) & 0x7F;
      if (v154 && (v156 = v155 - 38, (v155 - 38) >= 0xFFFFFFFB))
      {
        v157 = *(_QWORD *)(v154 + 48);
        if (v157 && (*(_DWORD *)(v157 + 16) & 0xFE) == 0x2C)
        {
          *(_QWORD *)(v157 + 24) = v154;
          v156 = (*(_DWORD *)(v154 + 28) & 0x7F) - 38;
        }
        if (v156 >= 0xFFFFFFFD)
        {
          v158 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v154 + 32))(v154);
          for (j = (_QWORD *)sub_22E7B1954(v158); j; j = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*j + 48))(j))
            j[16] = *(_QWORD *)(v154 + 128);
        }
      }
      else if (v154 && v155 == 22)
      {
        *(_QWORD *)(*(_QWORD *)(v154 + 104) + 40) = v154;
        v160 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v154 + 32))(v154);
        for (k = (_QWORD *)sub_22E7B1954(v160); k; k = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*k + 48))(k))
          k[15] = *(_QWORD *)(v154 + 120);
      }
      else
      {
        v162 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v154 + 32))(v154);
        v163 = v162;
        if (v154 && v155 == 23)
        {
          for (m = (_QWORD *)sub_22E7B1954(v162); m; m = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*m + 48))(m))
            m[13] = *(_QWORD *)(v154 + 104);
        }
        else
        {
          v165 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v162 + 32))(v162);
          for (n = (_QWORD *)sub_22E7B1954(v165); n; n = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*n + 48))(n))
            n[10] = *(_QWORD *)(v163 + 80);
        }
      }
      v167 = v151 + 1;
      while (v167 != v153)
      {
        v168 = *v167++;
        v154 = v168;
        if (v168 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v151 = v167 - 1;
          goto LABEL_259;
        }
      }
      v147 = *(char **)(v1 + 3712);
      v148 = *(char **)(v1 + 3704);
    }
LABEL_285:
    if (v147 == v148)
    {
LABEL_286:
      *(_QWORD *)(v1 + 3724) = 0;
    }
    else
    {
      v206 = *(unsigned int *)(v1 + 3720);
      if (v206 < 0x21 || 4 * (*(_DWORD *)(v1 + 3724) - *(_DWORD *)(v1 + 3728)) >= v206)
      {
        memset(v147, 255, 8 * v206);
        goto LABEL_286;
      }
      llvm::SmallPtrSetImplBase::shrink_and_clear((llvm::SmallPtrSetImplBase *)(v1 + 3704));
    }
    v169 = (_QWORD *)(v1 + 3768);
    v170 = *(unsigned int *)(v1 + 3848);
    if ((_DWORD)v170)
    {
      v171 = (uint64_t *)(*(_QWORD *)(v1 + 3840) + 8);
      for (ii = 16 * v170; ii; ii -= 16)
      {
        v173 = *(v171 - 1);
        if ((*(_DWORD *)(v173 + 28) & 0x7Eu) - 52 >= 6)
          v174 = 0;
        else
          v174 = *(v171 - 1);
        v269[0] = (llvm *)v174;
        if (!v174)
        {
          if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 128) + 2000) + 20) & 0x200000000000) == 0
            || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v173 + 72))(v173) & 1) == 0)
          {
            if (*v171)
              v196 = (2 * *v171) | 1;
            else
              v196 = 0;
            *(_QWORD *)(v173 + 112) = v196;
          }
          goto LABEL_336;
        }
        v175 = *(_WORD *)(v174 + 80) & 0x7F;
        v176 = -40;
        if (v175 > 0x46)
        {
          if (v175 == 83)
            goto LABEL_297;
          if (v175 == 71)
          {
            v176 = -56;
            goto LABEL_297;
          }
          if (v175 != 81)
            goto LABEL_351;
        }
        else
        {
          if (v175 > 0x18)
            goto LABEL_350;
          if (v175 == 16)
            goto LABEL_296;
          if (((1 << v175) & 0x1066) == 0)
          {
            if (v175 == 24)
            {
LABEL_296:
              v176 = -48;
              goto LABEL_297;
            }
LABEL_350:
            if (v175 == 70)
            {
              v176 = -64;
              goto LABEL_297;
            }
LABEL_351:
            v197 = v175 - 52;
            v179 = v175 - 33 >= 5;
            v198 = -64;
            if (v179)
              v198 = -48;
            v179 = v197 >= 6;
            v176 = -72;
            if (v179)
              v176 = v198;
          }
        }
LABEL_297:
        v177 = *(_QWORD *)(v174 + 72 + v176 + 16);
        v178 = v177 & 0xFFFFFFFFFFFFFFF8;
        if ((v177 & 4) != 0)
          v178 = *(_QWORD *)(v178 + 8);
        if (v178)
          v179 = (*(_WORD *)(v178 + 8) & 0x7Fu) - 38 >= 0xFFFFFFFD;
        else
          v179 = 0;
        if (v179 && sub_22EFC7ADC(v178) && (*(_BYTE *)(v178 + 10) & 1) == 0)
          goto LABEL_336;
        v264[0] = 0;
        if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 128) + 2000) + 20) & 0x200000000000) != 0
          && (sub_22EFBF6E8(v174, v264) & 1) != 0)
        {
          v180 = v264[0];
          sub_22E77A7D4(v1, (uint64_t)v264[0], v174);
          if ((*(_BYTE *)(v174 + 83) & 0x20) == 0 && (*((_BYTE *)v180 + 83) & 0x20) == 0)
          {
            v181 = v169;
            v182 = sub_22EFC2C24(v174);
            v55 = v182 == sub_22EFC2C24((uint64_t)v180);
            v169 = v181;
            if (!v55)
            {
              if ((*(_DWORD *)(v174 + 28) & 0x7Eu) - 54 >= 4)
              {
                v208 = (_DWORD *)(v1 + 9768);
              }
              else
              {
                v183 = *(_WORD *)(v174 + 80) & 0x7F;
                v184 = -40;
                if (v183 > 0x46)
                {
                  switch(v183)
                  {
                    case 'S':
                      break;
                    case 'G':
                      v184 = -56;
                      break;
                    case 'Q':
                      break;
                    default:
                      goto LABEL_357;
                  }
                }
                else
                {
                  if (v183 > 0x18)
                    goto LABEL_385;
                  if (v183 == 16)
                    goto LABEL_315;
                  if (((1 << v183) & 0x1066) == 0)
                  {
                    if (v183 == 24)
                    {
LABEL_315:
                      v184 = -48;
                      goto LABEL_316;
                    }
LABEL_385:
                    if (v183 == 70)
                    {
                      v184 = -64;
                      goto LABEL_316;
                    }
LABEL_357:
                    v199 = v183 - 52;
                    v179 = v183 - 33 >= 5;
                    v200 = -64;
                    if (v179)
                      v200 = -48;
                    v179 = v199 >= 6;
                    v184 = -72;
                    if (v179)
                      v184 = v200;
                  }
                }
LABEL_316:
                v185 = *(_QWORD *)(v174 + 72 + v184 + 16);
                v186 = v185 & 0xFFFFFFFFFFFFFFF8;
                if ((v185 & 4) != 0)
                  v186 = *(_QWORD *)(v186 + 8);
                v187 = *(_WORD *)(v186 + 8) & 0x7F;
                if (v187 != 83 && v187 != 16)
                  goto LABEL_336;
                v189 = *((_WORD *)v180 + 40) & 0x7F;
                v190 = -40;
                if (v189 > 0x46)
                {
                  if (v189 != 83)
                  {
                    if (v189 == 71)
                    {
                      v190 = -56;
                    }
                    else if (v189 != 81)
                    {
                      goto LABEL_395;
                    }
                  }
                }
                else
                {
                  if (v189 > 0x18)
                    goto LABEL_394;
                  if (v189 == 16)
                    goto LABEL_326;
                  if (((1 << v189) & 0x1066) == 0)
                  {
                    if (v189 == 24)
                      goto LABEL_326;
LABEL_394:
                    if (v189 == 70)
                      goto LABEL_397;
LABEL_395:
                    if (v189 - 52 >= 6)
                    {
                      if (v189 - 33 < 5)
                      {
LABEL_397:
                        v190 = -64;
                        goto LABEL_327;
                      }
LABEL_326:
                      v190 = -48;
                      goto LABEL_327;
                    }
                    v190 = -72;
                  }
                }
LABEL_327:
                v191 = *(_QWORD *)((char *)v180 + v190 + 88);
                v192 = v191 & 0xFFFFFFFFFFFFFFF8;
                if ((v191 & 4) != 0)
                  v192 = *(_QWORD *)(v192 + 8);
                v193 = *(_WORD *)(v192 + 8) & 0x7F;
                if (v193 != 83 && v193 != 16)
                  goto LABEL_336;
                v208 = (_DWORD *)(v1 + 9768);
              }
              v209 = sub_22F2BEBE4(v208, (uint64_t *)v269);
              v210 = *((unsigned int *)v209 + 4);
              if (v210 >= *((unsigned int *)v209 + 5))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v210 = *((unsigned int *)v209 + 4);
              }
              *(_QWORD *)(v209[1] + 8 * v210) = v180;
              ++*((_DWORD *)v209 + 4);
            }
          }
        }
        else
        {
          v194 = *v171;
          *(_QWORD *)(v174 + 80) &= ~0x8000000uLL;
          if (v194)
            v195 = (2 * v194) | 1;
          else
            v195 = 0;
          *(_QWORD *)(v174 + 128) = v195;
        }
LABEL_336:
        v171 += 2;
      }
    }
    result = (uint64_t)sub_22E794204(v169);
    *(_DWORD *)(v1 + 3848) = 0;
    v201 = *(uint64_t **)(v1 + 3944);
    v202 = *(uint64_t **)(v1 + 3952);
    while (v201 != v202)
    {
      v203 = *v201++;
      result = sub_22EF59108(*(_QWORD *)(v1 + 128), v203);
    }
    v204 = (llvm **)(v1 + 3920);
    v205 = *(_DWORD *)(v1 + 3928);
    if (v205)
    {
      v220 = *(_DWORD *)(v1 + 3936);
      if (v220 > 4 * v205 && v220 >= 0x41)
      {
        v221 = 1 << (33 - __clz(v205 - 1));
        if (v221 <= 64)
          v222 = 64;
        else
          v222 = v221;
LABEL_427:
        if (v222 == v220)
        {
          *(_QWORD *)(v1 + 3928) = 0;
          v223 = *(_QWORD **)(v1 + 3920);
          v224 = 8 * v220;
          do
          {
            *v223++ = -4096;
            v224 -= 8;
          }
          while (v224);
        }
        else
        {
          result = llvm::deallocate_buffer(*v204, (void *)(8 * v220));
          if (v222)
          {
            v227 = (4 * v222 / 3u + 1) | ((unint64_t)(4 * v222 / 3u + 1) >> 1);
            v228 = v227 | (v227 >> 2) | ((v227 | (v227 >> 2)) >> 4);
            LODWORD(v228) = (((v228 | (v228 >> 8)) >> 16) | v228 | (v228 >> 8)) + 1;
            *(_DWORD *)(v1 + 3936) = v228;
            result = MEMORY[0x23489D23C](8 * v228, 8);
            *(_QWORD *)(v1 + 3920) = result;
            *(_QWORD *)(v1 + 3928) = 0;
            v229 = *(unsigned int *)(v1 + 3936);
            if ((_DWORD)v229)
            {
              v230 = 8 * v229;
              do
              {
                *(_QWORD *)result = -4096;
                result += 8;
                v230 -= 8;
              }
              while (v230);
            }
          }
          else
          {
            *v204 = 0;
            *(_QWORD *)(v1 + 3928) = 0;
            *(_DWORD *)(v1 + 3936) = 0;
          }
        }
        goto LABEL_368;
      }
    }
    else
    {
      if (!*(_DWORD *)(v1 + 3932))
      {
LABEL_368:
        *(_QWORD *)(v1 + 3952) = *(_QWORD *)(v1 + 3944);
        v2 = *(_DWORD *)(v1 + 7456);
        goto LABEL_2;
      }
      v220 = *(_DWORD *)(v1 + 3936);
      if (v220 > 0x40)
      {
        v222 = 0;
        goto LABEL_427;
      }
    }
    if (v220)
    {
      v225 = *v204;
      v226 = 8 * v220;
      do
      {
        *(_QWORD *)v225 = -4096;
        v225 = (llvm *)((char *)v225 + 8);
        v226 -= 8;
      }
      while (v226);
    }
    *(_QWORD *)(v1 + 3928) = 0;
    goto LABEL_368;
  }
LABEL_2:
  v3 = v2 - 1;
  *(_DWORD *)(v1 + 7456) = v3;
  if (!v3)
  {
    while (*(_DWORD *)(v1 + 3288) || *(_DWORD *)(v1 + 3440))
    {
      v232 = (char *)(v1 + 7330);
      sub_22F2BB908((uint64_t)v269, (unsigned int *)(v1 + 3208));
      sub_22E794204((_QWORD *)(v1 + 3208));
      *(_DWORD *)(v1 + 3288) = 0;
      if (v272)
      {
        v233 = *((_QWORD *)&v271 + 1);
        v234 = *((_QWORD *)&v271 + 1) + 16 * v272;
        v235 = *v232;
        do
        {
          v236 = *(_QWORD *)(v233 + 8);
          *v232 = 1;
          v237 = *(_QWORD *)(*(_QWORD *)(v236 + 48) & 0xFFFFFFFFFFFFFFF0);
          if (v237)
            v238 = *(_BYTE *)(v237 + 16) == 26;
          else
            v238 = 0;
          if (!v238)
            v237 = sub_22F10CF48(v237);
          sub_22E4913B4(v237, (uint64_t)v264);
          v254 = v265[0];
          v255 = v265[1];
          v256 = v265[2];
          v239 = *(_QWORD *)(*(_QWORD *)(v1 + 128) + 16056);
          if (v239)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v239 + 64))(v239, v236);
          v240 = 0;
          v241 = v236;
          do
          {
            sub_22EF5F6AC(*(_QWORD *)(v1 + 128), v241, &v254, 0);
            if ((*(_BYTE *)(v241 + 104) & 3) != 0)
            {
              if (v240)
                break;
              v240 = 1;
            }
            v242 = sub_22E3CD31C((uint64_t *)(v241 + 104), v241);
            if (v242 == v236)
              break;
            v241 = v242;
          }
          while (v242);
          *v232 = v235;
          v233 += 16;
        }
        while (v233 != v234);
      }
      sub_22F2BB990((uint64_t)v264, (unsigned int *)(v1 + 3360));
      sub_22F2BF324((_QWORD *)(v1 + 3360));
      *(_DWORD *)(v1 + 3440) = 0;
      v243 = (uint64_t *)v266;
      if (v267)
      {
        v244 = (uint64_t *)((char *)v266 + 16 * v267);
        v245 = *v232;
        do
        {
          v246 = *v243;
          v247 = v243[1];
          v243 += 2;
          *v232 = 1;
          sub_22F369B34(*(_QWORD *)(v1 + 128), v246, v247);
          *v232 = v245;
        }
        while (v243 != v244);
        v243 = (uint64_t *)v266;
      }
      if (v243 != &v268)
        free(v243);
      if (((uint64_t)v264[0] & 1) == 0)
        llvm::deallocate_buffer(v264[1], (void *)(16 * LODWORD(v265[0])));
      if (*((llvm ****)&v271 + 1) != &v273)
        free(*((void **)&v271 + 1));
      if (((uint64_t)v269[0] & 1) == 0)
        llvm::deallocate_buffer(v269[1], (void *)(16 * v270[0]));
    }
    v231 = *(llvm::Timer **)(v1 + 488);
    if (v231)
      llvm::Timer::stopTimer(v231);
    result = sub_22E787154(v1);
    if (*(_QWORD *)(v1 + 136))
      return sub_22E7B3158(v1);
  }
  return result;
}

uint64_t sub_22E78B024(uint64_t a1)
{
  return sub_22E7897B8(a1 - 24);
}

uint64_t sub_22E78B02C(uint64_t a1, _QWORD *a2, _DWORD *a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7, uint64_t a8, const void *a9, size_t a10, int a11, char a12, char a13, char a14, char a15, char a16, uint64_t *a17)
{
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64x2_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  int Key;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void **v50;
  size_t v51;
  void **v52;
  size_t v53;
  std::__shared_weak_count *v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v61;
  uint64_t v63;
  std::__shared_weak_count *v64;
  void *v65[2];
  uint64_t v66;
  __int16 v67;
  void *__p;
  char v69;
  void *v70[2];
  uint64_t v71;

  *(_QWORD *)(a1 + 48) = &unk_24FA71E50;
  v61 = a1 + 48;
  v23 = a1 + 6488;
  *(_QWORD *)a1 = &off_24FA71A88;
  *(_QWORD *)(a1 + 8) = &unk_24FA71C30;
  *(_QWORD *)(a1 + 16) = &unk_24FA71C68;
  *(_QWORD *)(a1 + 24) = &unk_24FA71C90;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = &unk_24FA71E20;
  v24 = (_QWORD *)operator new();
  if ((a11 & 1) != 0)
  {
    *v24 = &off_24FA71FF0;
    v24[1] = a2;
  }
  else
  {
    *v24 = &off_24FA71F38;
    v24[1] = a2;
    v24[2] = a1;
  }
  *(_QWORD *)(a1 + 56) = v24;
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a2[11];
  *(_QWORD *)(a1 + 88) = a2[10];
  *(_QWORD *)(a1 + 96) = a5;
  *(_QWORD *)(a1 + 104) = a2[6];
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = a2;
  *(_QWORD *)(a1 + 128) = a4;
  *(_QWORD *)(a1 + 136) = 0;
  sub_22F2DFFF4(a1 + 144, a2[10], a3, a5, a2[13]);
  *(_QWORD *)(a1 + 432) = a2[7];
  *(_QWORD *)(a1 + 440) = a2;
  v25 = operator new();
  *(_QWORD *)v25 = 0;
  *(_DWORD *)(v25 + 8) = 512;
  *(_QWORD *)(a1 + 448) = v25;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_QWORD *)(a1 + 472) = 0x1800000000;
  v26 = *a17;
  *a17 = 0;
  *(_QWORD *)(a1 + 488) = v26;
  *(_DWORD *)(a1 + 496) = 0;
  *(_BYTE *)(a1 + 500) = 0;
  *(_BYTE *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 520) = a1 + 536;
  *(_QWORD *)(a1 + 528) = 0x400000000;
  *(_QWORD *)(a1 + 600) = a1 + 616;
  *(_QWORD *)(a1 + 608) = 0x4000000000;
  *(_QWORD *)(a1 + 1640) = a1 + 1656;
  *(_QWORD *)(a1 + 1648) = 0x4000000000;
  *(_OWORD *)(a1 + 2688) = 0u;
  *(_QWORD *)(a1 + 2680) = 0;
  *(_QWORD *)(a1 + 2704) = a1 + 2720;
  *(_QWORD *)(a1 + 2712) = 0x400000000;
  *(_OWORD *)(a1 + 2792) = 0u;
  *(_QWORD *)(a1 + 2784) = 0;
  *(_QWORD *)(a1 + 2808) = a1 + 2824;
  *(_QWORD *)(a1 + 2816) = 0x400000000;
  *(_DWORD *)(a1 + 2904) = 0;
  *(_OWORD *)(a1 + 2888) = 0u;
  *(_QWORD *)(a1 + 2912) = a1 + 2928;
  *(_QWORD *)(a1 + 2920) = 0x1000000000;
  *(_DWORD *)(a1 + 3200) = 0;
  *(_OWORD *)(a1 + 3184) = 0u;
  v27 = 3216;
  *(_QWORD *)(a1 + 3208) = 1;
  do
  {
    *(_QWORD *)(a1 + v27) = -4096;
    v27 += 16;
  }
  while (v27 != 3280);
  *(_QWORD *)(a1 + 3280) = a1 + 3296;
  *(_QWORD *)(a1 + 3288) = 0x400000000;
  *(_QWORD *)(a1 + 3360) = 1;
  for (i = 3368; i != 3432; i += 16)
    *(_QWORD *)(a1 + i) = -4096;
  *(_QWORD *)(a1 + 3432) = a1 + 3448;
  *(_QWORD *)(a1 + 3440) = 0x400000000;
  *(_DWORD *)(a1 + 3528) = 0;
  *(_OWORD *)(a1 + 3512) = 0u;
  *(_OWORD *)(a1 + 3536) = 0u;
  *(_DWORD *)(a1 + 3552) = 0;
  *(_DWORD *)(a1 + 3576) = 0;
  *(_OWORD *)(a1 + 3560) = 0u;
  *(_OWORD *)(a1 + 3584) = 0u;
  *(_DWORD *)(a1 + 3600) = 0;
  *(_DWORD *)(a1 + 3624) = 0;
  *(_OWORD *)(a1 + 3608) = 0u;
  *(_OWORD *)(a1 + 3632) = 0u;
  *(_OWORD *)(a1 + 3648) = 0u;
  *(_OWORD *)(a1 + 3660) = 0u;
  *(_OWORD *)(a1 + 3680) = 0u;
  *(_DWORD *)(a1 + 3696) = 0;
  *(_QWORD *)(a1 + 3704) = a1 + 3736;
  *(_QWORD *)(a1 + 3712) = a1 + 3736;
  *(_QWORD *)(a1 + 3720) = 4;
  *(_DWORD *)(a1 + 3728) = 0;
  v29 = 3776;
  *(_QWORD *)(a1 + 3768) = 1;
  do
  {
    *(_QWORD *)(a1 + v29) = -4096;
    v29 += 16;
  }
  while (v29 != 3840);
  *(_QWORD *)(a1 + 3840) = a1 + 3856;
  *(_QWORD *)(a1 + 3848) = 0x400000000;
  *(_OWORD *)(a1 + 3920) = 0u;
  *(_DWORD *)(a1 + 3936) = 0;
  *(_OWORD *)(a1 + 3944) = 0u;
  *(_OWORD *)(a1 + 3960) = 0u;
  *(_OWORD *)(a1 + 3976) = 0u;
  *(_QWORD *)(a1 + 3992) = a1 + 4008;
  *(_QWORD *)(a1 + 4000) = 0x400000000;
  *(_OWORD *)(a1 + 4072) = 0u;
  *(_OWORD *)(a1 + 4088) = 0u;
  *(_OWORD *)(a1 + 4100) = 0u;
  *(_QWORD *)(a1 + 4120) = a1 + 4136;
  *(_QWORD *)(a1 + 4128) = 0x400000000;
  *(_QWORD *)(a1 + 4200) = a1 + 4216;
  *(_QWORD *)(a1 + 4208) = 0x200000000;
  *(_QWORD *)(a1 + 4232) = a1 + 4248;
  *(_QWORD *)(a1 + 4240) = 0x400000000;
  *(_OWORD *)(a1 + 4312) = 0u;
  *(_DWORD *)(a1 + 4328) = 0;
  *(_QWORD *)(a1 + 4336) = a1 + 4352;
  *(_QWORD *)(a1 + 4344) = 0x200000000;
  *(_QWORD *)(a1 + 4448) = a1 + 4464;
  *(_QWORD *)(a1 + 4456) = 0x1000000000;
  *(_QWORD *)(a1 + 4592) = a1 + 4608;
  *(_QWORD *)(a1 + 4600) = 0x400000000;
  *(_DWORD *)(a1 + 4688) = 0;
  *(_OWORD *)(a1 + 4672) = 0u;
  *(_OWORD *)(a1 + 4696) = 0u;
  *(_DWORD *)(a1 + 4712) = 0;
  *(_DWORD *)(a1 + 4736) = 0;
  *(_OWORD *)(a1 + 4720) = 0u;
  *(_QWORD *)(a1 + 4760) = 0;
  *(_OWORD *)(a1 + 4744) = 0u;
  *(_QWORD *)(a1 + 4768) = a1 + 4784;
  *(_QWORD *)(a1 + 4776) = 0x400000000;
  *(_QWORD *)(a1 + 4848) = a1 + 4864;
  *(_QWORD *)(a1 + 4856) = 0x1000000000;
  *(_QWORD *)(a1 + 4928) = a1 + 4944;
  *(_QWORD *)(a1 + 4936) = 0x1000000000;
  *(_QWORD *)(a1 + 5008) = a1 + 5024;
  *(_QWORD *)(a1 + 5016) = 0x4000000000;
  *(_QWORD *)(a1 + 5280) = a1 + 5296;
  *(_QWORD *)(a1 + 5288) = 0x4000000000;
  *(_QWORD *)(a1 + 5552) = a1 + 5568;
  *(_QWORD *)(a1 + 5560) = 0x1000000000;
  *(_QWORD *)(a1 + 5632) = a1 + 5648;
  *(_QWORD *)(a1 + 5640) = 0x400000000;
  *(_QWORD *)(a1 + 5664) = a1 + 5680;
  *(_QWORD *)(a1 + 5672) = 0x4000000000;
  *(_QWORD *)(a1 + 5936) = a1 + 5952;
  *(_QWORD *)(a1 + 5944) = 0x4000000000;
  *(_QWORD *)(a1 + 6208) = a1 + 6224;
  *(_QWORD *)(a1 + 6216) = 0x400000000;
  *(_QWORD *)(a1 + 6240) = a1 + 6256;
  *(_QWORD *)(a1 + 6248) = 0x1000000000;
  *(_DWORD *)(a1 + 6320) = 0;
  *(_QWORD *)(a1 + 6328) = a1 + 6344;
  *(_QWORD *)(a1 + 6336) = 0x400000000;
  *(_QWORD *)(a1 + 6360) = a1 + 6376;
  *(_QWORD *)(a1 + 6368) = 0x1000000000;
  *(_QWORD *)(a1 + 6440) = a1 + 6456;
  *(_QWORD *)(a1 + 6448) = 0x200000000;
  *(_QWORD *)(a1 + 6464) = a1 + 6480;
  *(_QWORD *)(a1 + 6472) = 0x100000000;
  *(_OWORD *)v23 = xmmword_22F45EE00;
  *(_BYTE *)(v23 + 16) = 0;
  *(_BYTE *)(v23 + 24) = 0;
  *(_DWORD *)(a1 + 6516) = 0;
  *(_QWORD *)(a1 + 6520) = a1 + 6536;
  *(_QWORD *)(a1 + 6528) = 0x200000000;
  *(_QWORD *)(a1 + 6600) = a1 + 6616;
  *(_QWORD *)(a1 + 6608) = 0x200000000;
  *(_BYTE *)(v23 + 176) = 0;
  *(_BYTE *)(v23 + 180) = 0;
  *(_DWORD *)(a1 + 6672) = 0;
  *(_QWORD *)(a1 + 6680) = a1 + 6696;
  *(_QWORD *)(a1 + 6688) = 0x200000000;
  *(_QWORD *)(a1 + 6760) = a1 + 6776;
  *(_QWORD *)(a1 + 6768) = 0x200000000;
  sub_22F420A08((llvm::StringMapImpl *)(a1 + 6824));
  *(_OWORD *)(a1 + 6856) = 0u;
  *(_DWORD *)(a1 + 6872) = 0;
  *(_OWORD *)(a1 + 6880) = 0u;
  *(_DWORD *)(a1 + 6896) = 0;
  *(_QWORD *)(a1 + 6904) = a1 + 6920;
  *(_QWORD *)(a1 + 6912) = 0x400000000;
  *(_QWORD *)(a1 + 6936) = a1 + 6952;
  *(_QWORD *)(a1 + 6944) = 0x800000000;
  *(_QWORD *)(a1 + 6984) = a1 + 7000;
  *(_QWORD *)(a1 + 6992) = 0x800000000;
  *(_QWORD *)(a1 + 7064) = a1 + 7080;
  *(_QWORD *)(a1 + 7072) = 0x400000000;
  *(_QWORD *)(a1 + 7208) = 1;
  *(_QWORD *)(a1 + 7216) = -1;
  *(_QWORD *)(a1 + 7224) = -1;
  *(_QWORD *)(a1 + 7232) = a1 + 7248;
  *(_QWORD *)(a1 + 7240) = 0x400000000;
  *(_QWORD *)(a1 + 7264) = a1 + 7280;
  *(_QWORD *)(a1 + 7272) = 0x200000000;
  if (a10 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a10 >= 0x17)
  {
    v32 = (a10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a10 | 7) != 0x17)
      v32 = a10 | 7;
    v33 = v32 + 1;
    v30 = operator new(v32 + 1);
    *(_QWORD *)(a1 + 7296) = v30;
    *(_QWORD *)(a1 + 7312) = v33 | 0x8000000000000000;
    *(_QWORD *)(a1 + 7304) = a10;
    v31 = a7;
  }
  else
  {
    v30 = (void *)(a1 + 7296);
    *(_BYTE *)(v23 + 831) = a10;
    v31 = a7;
    if (!a10)
      goto LABEL_18;
  }
  memmove(v30, a9, a10);
LABEL_18:
  *((_BYTE *)v30 + a10) = 0;
  *(_DWORD *)(a1 + 7320) = a11;
  *(_BYTE *)(v23 + 836) = a12;
  *(_BYTE *)(v23 + 837) = a13;
  *(_BYTE *)(v23 + 838) = a14;
  *(_BYTE *)(v23 + 839) = a15;
  *(_BYTE *)(v23 + 840) = a16;
  *(_WORD *)(v23 + 841) = 0;
  *(_OWORD *)(a1 + 7336) = 0u;
  *(_DWORD *)(a1 + 7352) = 0;
  *(_QWORD *)(a1 + 7360) = a1 + 7336;
  *(_QWORD *)(a1 + 7448) = 0;
  *(_DWORD *)(a1 + 7456) = 0;
  *(_BYTE *)(v23 + 972) = 0;
  *(_OWORD *)(a1 + 7368) = 0u;
  *(_OWORD *)(a1 + 7384) = 0u;
  *(_OWORD *)(a1 + 7400) = 0u;
  *(_OWORD *)(a1 + 7416) = 0u;
  *(_OWORD *)(a1 + 7428) = 0u;
  *(_OWORD *)(a1 + 7464) = 0u;
  *(_DWORD *)(a1 + 7480) = 0;
  *(_QWORD *)(a1 + 7504) = 0;
  *(_QWORD *)(a1 + 7488) = 0;
  *(_QWORD *)(a1 + 7496) = 0;
  v34 = -256;
  *(_QWORD *)(a1 + 7512) = 1;
  do
  {
    *(_QWORD *)(a1 + v34 + 7776) = -4096;
    v34 += 16;
  }
  while (v34);
  *(_QWORD *)(a1 + 7776) = a1 + 7792;
  *(_QWORD *)(a1 + 7784) = 0x1000000000;
  *(_OWORD *)(a1 + 8432) = 0u;
  *(_DWORD *)(a1 + 8448) = 0;
  *(_OWORD *)(a1 + 8456) = 0u;
  *(_OWORD *)(a1 + 8472) = 0u;
  *(_OWORD *)(a1 + 8488) = 0u;
  *(_QWORD *)(a1 + 8504) = a1 + 8520;
  *(_QWORD *)(a1 + 8512) = 0x1000000000;
  *(_QWORD *)(a1 + 8776) = a1 + 8792;
  *(_QWORD *)(a1 + 8784) = 0x1000000000;
  *(_QWORD *)(a1 + 9048) = a1 + 9064;
  *(_QWORD *)(a1 + 9056) = 0x1000000000;
  *(_OWORD *)(a1 + 9192) = 0u;
  *(_OWORD *)(a1 + 9208) = 0u;
  *(_OWORD *)(a1 + 9224) = 0u;
  *(_QWORD *)(a1 + 9240) = 1;
  v35 = -48;
  v36 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)(a1 + v35 + 9296) = v36;
    v35 += 24;
  }
  while (v35);
  *(_QWORD *)(a1 + 9296) = a1 + 9312;
  *(_QWORD *)(a1 + 9304) = 0x200000000;
  *(_QWORD *)(a1 + 9504) = a1 + 9520;
  *(_QWORD *)(a1 + 9512) = 0x1000000000;
  *(_QWORD *)(a1 + 9648) = 1;
  v37 = -112;
  do
  {
    *(_QWORD *)(a1 + v37 + 9768) = -4096;
    v37 += 56;
  }
  while (v37);
  *(_QWORD *)(a1 + 9768) = 1;
  v38 = -80;
  do
  {
    *(_QWORD *)(a1 + v38 + 9856) = -4096;
    v38 += 40;
  }
  while (v38);
  *(_QWORD *)(a1 + 9856) = 1;
  v39 = -80;
  do
  {
    *(_QWORD *)(a1 + v39 + 9944) = -4096;
    v39 += 40;
  }
  while (v39);
  *(_QWORD *)(a1 + 9944) = 1;
  v40 = -80;
  do
  {
    *(_QWORD *)(a1 + v40 + 10032) = -4096;
    v40 += 40;
  }
  while (v40);
  *(_QWORD *)(a1 + 10032) = 1;
  v41 = -112;
  do
  {
    *(_QWORD *)(a1 + v41 + 10152) = -4096;
    v41 += 56;
  }
  while (v41);
  *(_QWORD *)(a1 + 10152) = 1;
  v42 = -112;
  do
  {
    *(_QWORD *)(a1 + v42 + 10272) = -4096;
    v42 += 56;
  }
  while (v42);
  *(_QWORD *)(a1 + 10272) = 1;
  v43 = -112;
  do
  {
    *(_QWORD *)(a1 + v43 + 10392) = -4096;
    v43 += 56;
  }
  while (v43);
  *(_QWORD *)(a1 + 10392) = a1 + 10424;
  *(_QWORD *)(a1 + 10400) = a1 + 10424;
  *(_QWORD *)(a1 + 10408) = 2;
  *(_DWORD *)(a1 + 10416) = 0;
  *(_QWORD *)(a1 + 10440) = a1 + 10472;
  *(_QWORD *)(a1 + 10448) = a1 + 10472;
  *(_QWORD *)(a1 + 10456) = 16;
  *(_DWORD *)(a1 + 10464) = 0;
  *(_QWORD *)(a1 + 10600) = a1 + 10616;
  *(_QWORD *)(a1 + 10608) = 0x1000000000;
  *(_OWORD *)(a1 + 10744) = 0u;
  *(_DWORD *)(a1 + 10760) = 0;
  *(_OWORD *)(a1 + 10768) = 0u;
  *(_DWORD *)(a1 + 10784) = 0;
  *(_OWORD *)(a1 + 10792) = 0u;
  *(_DWORD *)(a1 + 10808) = 0;
  *(_DWORD *)(a1 + 10832) = 0;
  *(_OWORD *)(a1 + 10816) = 0u;
  *(_QWORD *)(a1 + 10840) = a1 + 10856;
  *(_QWORD *)(a1 + 10848) = 0x1000000000;
  *(_DWORD *)(a1 + 10984) = 0;
  *(_OWORD *)(a1 + 10992) = 0u;
  *(_OWORD *)(a1 + 11008) = 0u;
  *(_OWORD *)(a1 + 11020) = 0u;
  *(_QWORD *)(a1 + 11040) = a1 + 11056;
  *(_QWORD *)(a1 + 11048) = 0x1000000000;
  *(_QWORD *)(a1 + 11184) = a1 + 11200;
  *(_QWORD *)(a1 + 11192) = 0x800000000;
  *(_QWORD *)(*(_QWORD *)(a1 + 80) + 296) = v61;
  if (v31)
  {
    v44 = &a6[2 * v31];
    do
    {
      (*(void (**)(void **__return_ptr))(*(_QWORD *)*a6 + 40))(v65);
      *(_OWORD *)v70 = *(_OWORD *)v65;
      v71 = v66;
      v65[1] = 0;
      v66 = 0;
      v65[0] = 0;
      if (v69 < 0)
      {
        operator delete(__p);
        if (SHIBYTE(v66) < 0)
          operator delete(v65[0]);
      }
      Key = llvm::StringMapImpl::FindKey();
      if (Key == -1 || Key == (unint64_t)*(unsigned int *)(a1 + 464))
      {
        if (v71 >= 0)
          v52 = v70;
        else
          v52 = (void **)v70[0];
        if (v71 >= 0)
          v53 = HIBYTE(v71) & 0x7F;
        else
          v53 = (size_t)v70[1];
        v54 = (std::__shared_weak_count *)a6[1];
        v63 = *a6;
        v64 = v54;
        if (v54)
        {
          p_shared_owners = (unint64_t *)&v54->__shared_owners_;
          do
            v56 = __ldxr(p_shared_owners);
          while (__stxr(v56 + 1, p_shared_owners));
        }
        sub_22F2BF724((llvm::StringMapImpl *)(a1 + 456), v52, v53, (uint64_t)&v63);
        v57 = v64;
        if (v64)
        {
          v58 = (unint64_t *)&v64->__shared_owners_;
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
      }
      else
      {
        v46 = *(_QWORD *)(a1 + 104);
        *(_QWORD *)(v46 + 312) = 0x3B300000000;
        if (*(char *)(v46 + 311) < 0)
        {
          **(_BYTE **)(v46 + 288) = 0;
          *(_QWORD *)(v46 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v46 + 288) = 0;
          *(_BYTE *)(v46 + 311) = 0;
        }
        v65[0] = (void *)(v46 + 320);
        v65[1] = 0;
        v66 = v46;
        v67 = 1;
        *(_BYTE *)(v46 + 320) = 0;
        *(_DWORD *)(v46 + 664) = 0;
        v47 = *(unsigned int *)(v46 + 776);
        if ((_DWORD)v47)
        {
          v48 = *(_QWORD *)(v46 + 768);
          v49 = 56 * v47;
          do
          {
            if (*(char *)(v48 + v49 - 9) < 0)
              operator delete(*(void **)(v48 + v49 - 32));
            v49 -= 56;
          }
          while (v49);
        }
        *(_DWORD *)(v46 + 776) = 0;
        if (v71 >= 0)
          v50 = v70;
        else
          v50 = (void **)v70[0];
        if (v71 >= 0)
          v51 = HIBYTE(v71) & 0x7F;
        else
          v51 = (size_t)v70[1];
        sub_22E3B89A8((unsigned __int8 **)v65, v50, v51);
        sub_22E3BB0B8((uint64_t)v65);
      }
      if (SHIBYTE(v71) < 0)
        operator delete(v70[0]);
      a6 += 2;
    }
    while (a6 != v44);
  }
  return a1;
}

uint64_t sub_22E78BBA4(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void **v11;
  void **v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void **v23;
  void **v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  llvm *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  llvm *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  uint64_t v75;
  llvm *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  uint64_t v85;
  llvm *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  void *v105;
  uint64_t v106;
  llvm *v107;
  void *v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  void *v113;
  uint64_t v114;

  v2 = (char *)(a1 + 7319);
  *(_QWORD *)a1 = &off_24FA71A88;
  *(_QWORD *)(a1 + 8) = &unk_24FA71C30;
  *(_QWORD *)(a1 + 24) = &unk_24FA71C90;
  v3 = a1 + 24;
  *(_QWORD *)(a1 + 16) = &unk_24FA71C68;
  *(_QWORD *)(a1 + 40) = &unk_24FA71E20;
  *(_QWORD *)(a1 + 48) = &unk_24FA71E50;
  if (*(_BYTE *)(a1 + 72))
  {
    v4 = *(_QWORD *)(a1 + 64);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  sub_22F2BF6BC((char **)(a1 + 11184));
  v5 = *(void **)(a1 + 11040);
  if (v5 != (void *)(a1 + 11056))
    free(v5);
  llvm::deallocate_buffer(*(llvm **)(a1 + 11016), (void *)(16 * *(unsigned int *)(a1 + 11032)));
  if (v2[3696] < 0)
    operator delete(*(void **)(a1 + 10992));
  v6 = *(void **)(a1 + 10840);
  if (v6 != (void *)(a1 + 10856))
    free(v6);
  llvm::deallocate_buffer(*(llvm **)(a1 + 10816), (void *)(16 * *(unsigned int *)(a1 + 10832)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 10792), (void *)(16 * *(unsigned int *)(a1 + 10808)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 10768), (void *)(16 * *(unsigned int *)(a1 + 10784)));
  sub_22E7946F4(a1 + 10744);
  llvm::deallocate_buffer(*(llvm **)(a1 + 10744), (void *)(32 * *(unsigned int *)(a1 + 10760)));
  v7 = *(void **)(a1 + 10600);
  if (v7 != (void *)(a1 + 10616))
    free(v7);
  v8 = *(void **)(a1 + 10448);
  if (v8 != *(void **)(a1 + 10440))
    free(v8);
  v9 = *(void **)(a1 + 10400);
  if (v9 != *(void **)(a1 + 10392))
    free(v9);
  sub_22F2BEF58(a1 + 10272);
  sub_22F2BEF58(a1 + 10152);
  sub_22F2BEF58(a1 + 10032);
  sub_22F2BF184(a1 + 9944);
  sub_22F2BF184(a1 + 9856);
  sub_22F2BF184(a1 + 9768);
  sub_22F2BEF58(a1 + 9648);
  v10 = *(void **)(a1 + 9504);
  if (v10 != (void *)(a1 + 9520))
    free(v10);
  sub_22F2BBA18((void **)(a1 + 9296));
  sub_22F2BBAA0(a1 + 9240);
  v11 = *(void ***)(a1 + 9200);
  v12 = *(void ***)(a1 + 9208);
  *(_QWORD *)(a1 + 9232) = 0;
  v13 = (char *)v12 - (char *)v11;
  if ((unint64_t)((char *)v12 - (char *)v11) >= 0x11)
  {
    do
    {
      operator delete(*v11);
      v11 = (void **)(*(_QWORD *)(a1 + 9200) + 8);
      *(_QWORD *)(a1 + 9200) = v11;
      v12 = *(void ***)(a1 + 9208);
      v13 = (char *)v12 - (char *)v11;
    }
    while ((unint64_t)((char *)v12 - (char *)v11) > 0x10);
  }
  v14 = v13 >> 3;
  if (v14 == 1)
  {
    v15 = 128;
    goto LABEL_24;
  }
  if (v14 == 2)
  {
    v15 = 256;
LABEL_24:
    *(_QWORD *)(a1 + 9224) = v15;
  }
  if (v11 != v12)
  {
    do
    {
      v16 = *v11++;
      operator delete(v16);
    }
    while (v11 != v12);
    v17 = *(_QWORD *)(a1 + 9200);
    v18 = *(_QWORD *)(a1 + 9208);
    if (v18 != v17)
      *(_QWORD *)(a1 + 9208) = v18 + ((v17 - v18 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  v19 = *(void **)(a1 + 9192);
  if (v19)
    operator delete(v19);
  v20 = *(void **)(a1 + 9048);
  if (v20 != (void *)(a1 + 9064))
    free(v20);
  v21 = *(void **)(a1 + 8776);
  if (v21 != (void *)(a1 + 8792))
    free(v21);
  v22 = *(void **)(a1 + 8504);
  if (v22 != (void *)(a1 + 8520))
    free(v22);
  v23 = *(void ***)(a1 + 8464);
  v24 = *(void ***)(a1 + 8472);
  *(_QWORD *)(a1 + 8496) = 0;
  v25 = (char *)v24 - (char *)v23;
  if ((unint64_t)((char *)v24 - (char *)v23) >= 0x11)
  {
    do
    {
      operator delete(*v23);
      v23 = (void **)(*(_QWORD *)(a1 + 8464) + 8);
      *(_QWORD *)(a1 + 8464) = v23;
      v24 = *(void ***)(a1 + 8472);
      v25 = (char *)v24 - (char *)v23;
    }
    while ((unint64_t)((char *)v24 - (char *)v23) > 0x10);
  }
  v26 = v25 >> 3;
  if (v26 == 1)
  {
    v27 = 128;
    goto LABEL_43;
  }
  if (v26 == 2)
  {
    v27 = 256;
LABEL_43:
    *(_QWORD *)(a1 + 8488) = v27;
  }
  if (v23 != v24)
  {
    do
    {
      v28 = *v23++;
      operator delete(v28);
    }
    while (v23 != v24);
    v29 = *(_QWORD *)(a1 + 8464);
    v30 = *(_QWORD *)(a1 + 8472);
    if (v30 != v29)
      *(_QWORD *)(a1 + 8472) = v30 + ((v29 - v30 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  v31 = *(void **)(a1 + 8456);
  if (v31)
    operator delete(v31);
  llvm::deallocate_buffer(*(llvm **)(a1 + 8432), (void *)(16 * *(unsigned int *)(a1 + 8448)));
  sub_22F2BBAE8((void **)(a1 + 7776));
  if ((*(_BYTE *)(a1 + 7512) & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(a1 + 7520), (void *)(16 * *(unsigned int *)(a1 + 7528)));
  sub_22F2BBB70(a1 + 7464);
  llvm::deallocate_buffer(*(llvm **)(a1 + 7336), (void *)(16 * *(unsigned int *)(a1 + 7352)));
  if (*v2 < 0)
    operator delete(*(void **)(a1 + 7296));
  v32 = *(void **)(a1 + 7264);
  if (v32 != (void *)(a1 + 7280))
    free(v32);
  v33 = *(void **)(a1 + 7232);
  if (v33 != (void *)(a1 + 7248))
    free(v33);
  if ((*(_BYTE *)(a1 + 7208) & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(a1 + 7216), (void *)(4 * *(unsigned int *)(a1 + 7224)));
  sub_22F2BF638((void **)(a1 + 7064));
  v34 = *(void **)(a1 + 6984);
  if (v34 != (void *)(a1 + 7000))
    free(v34);
  v35 = *(void **)(a1 + 6936);
  if (v35 != (void *)(a1 + 6952))
    free(v35);
  v36 = *(void **)(a1 + 6904);
  if (v36 != (void *)(a1 + 6920))
    free(v36);
  v37 = *(unsigned int *)(a1 + 6896);
  v38 = *(llvm **)(a1 + 6880);
  if ((_DWORD)v37)
  {
    v40 = (uint64_t)v38 + 8;
    v41 = 32 * v37;
    do
    {
      if ((*(_QWORD *)(v40 - 8) | 0x1000) != 0xFFFFFFFFFFFFF000)
        sub_22E5EFB0C(v40, *(char **)(v40 + 8));
      v40 += 32;
      v41 -= 32;
    }
    while (v41);
    v38 = *(llvm **)(a1 + 6880);
    v39 = (void *)(32 * *(unsigned int *)(a1 + 6896));
  }
  else
  {
    v39 = 0;
  }
  llvm::deallocate_buffer(v38, v39);
  v42 = *(unsigned int *)(a1 + 6872);
  v43 = *(llvm **)(a1 + 6856);
  if ((_DWORD)v42)
  {
    v45 = (uint64_t)v43 + 8;
    v46 = 32 * v42;
    do
    {
      if ((*(_QWORD *)(v45 - 8) | 0x1000) != 0xFFFFFFFFFFFFF000)
        sub_22E5EFB0C(v45, *(char **)(v45 + 8));
      v45 += 32;
      v46 -= 32;
    }
    while (v46);
    v43 = *(llvm **)(a1 + 6856);
    v44 = (void *)(32 * *(unsigned int *)(a1 + 6872));
  }
  else
  {
    v44 = 0;
  }
  llvm::deallocate_buffer(v43, v44);
  sub_22E78E1D0(a1 + 6824);
  sub_22E3B9848((char **)(a1 + 6760));
  v47 = *(void **)(a1 + 6680);
  if (v47 != (void *)(a1 + 6696))
    free(v47);
  sub_22E3B9848((char **)(a1 + 6600));
  v48 = *(void **)(a1 + 6520);
  if (v48 != (void *)(a1 + 6536))
    free(v48);
  v49 = *(void **)(a1 + 6464);
  if (v49 != (void *)(a1 + 6480))
    free(v49);
  v50 = *(void **)(a1 + 6440);
  if (v50 != (void *)(a1 + 6456))
    free(v50);
  v51 = *(void **)(a1 + 6360);
  if (v51 != (void *)(a1 + 6376))
    free(v51);
  v52 = *(void **)(a1 + 6328);
  if (v52 != (void *)(a1 + 6344))
    free(v52);
  v53 = *(void **)(a1 + 6240);
  if (v53 != (void *)(a1 + 6256))
    free(v53);
  v54 = *(void **)(a1 + 6208);
  if (v54 != (void *)(a1 + 6224))
    free(v54);
  v55 = *(void **)(a1 + 5936);
  if (v55 != (void *)(a1 + 5952))
    free(v55);
  v56 = *(void **)(a1 + 5664);
  if (v56 != (void *)(a1 + 5680))
    free(v56);
  v57 = *(void **)(a1 + 5632);
  if (v57 != (void *)(a1 + 5648))
    free(v57);
  v58 = *(void **)(a1 + 5552);
  if (v58 != (void *)(a1 + 5568))
    free(v58);
  v59 = *(void **)(a1 + 5280);
  if (v59 != (void *)(a1 + 5296))
    free(v59);
  v60 = *(void **)(a1 + 5008);
  if (v60 != (void *)(a1 + 5024))
    free(v60);
  v61 = *(void **)(a1 + 4928);
  if (v61 != (void *)(a1 + 4944))
    free(v61);
  v62 = *(void **)(a1 + 4848);
  if (v62 != (void *)(a1 + 4864))
    free(v62);
  v63 = *(void **)(a1 + 4768);
  if (v63 != (void *)(a1 + 4784))
    free(v63);
  sub_22E78EB54(a1 + 4720);
  llvm::deallocate_buffer(*(llvm **)(a1 + 4696), (void *)(16 * *(unsigned int *)(a1 + 4712)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 4672), (void *)(16 * *(unsigned int *)(a1 + 4688)));
  v64 = *(void **)(a1 + 4592);
  if (v64 != (void *)(a1 + 4608))
    free(v64);
  v65 = *(void **)(a1 + 4448);
  if (v65 != (void *)(a1 + 4464))
    free(v65);
  v66 = *(void **)(a1 + 4336);
  if (v66 != (void *)(a1 + 4352))
    free(v66);
  sub_22F2BF584(a1 + 4312);
  llvm::deallocate_buffer(*(llvm **)(a1 + 4312), (void *)(40 * *(unsigned int *)(a1 + 4328)));
  v67 = *(void **)(a1 + 4232);
  if (v67 != (void *)(a1 + 4248))
    free(v67);
  v68 = *(void **)(a1 + 4200);
  if (v68 != (void *)(a1 + 4216))
    free(v68);
  v69 = *(void **)(a1 + 4120);
  if (v69 != (void *)(a1 + 4136))
    free(v69);
  llvm::deallocate_buffer(*(llvm **)(a1 + 4096), (void *)(16 * *(unsigned int *)(a1 + 4112)));
  v70 = *(void **)(a1 + 4072);
  if (v70)
  {
    *(_QWORD *)(a1 + 4080) = v70;
    operator delete(v70);
  }
  v71 = *(void **)(a1 + 3992);
  if (v71 != (void *)(a1 + 4008))
    free(v71);
  v72 = *(void **)(a1 + 3968);
  if (v72)
  {
    *(_QWORD *)(a1 + 3976) = v72;
    operator delete(v72);
  }
  sub_22F2BBBBC(a1 + 3920);
  v73 = *(void **)(a1 + 3840);
  if (v73 != (void *)(a1 + 3856))
    free(v73);
  if ((*(_BYTE *)(a1 + 3768) & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(a1 + 3776), (void *)(16 * *(unsigned int *)(a1 + 3784)));
  v74 = *(void **)(a1 + 3712);
  if (v74 != *(void **)(a1 + 3704))
    free(v74);
  v75 = *(unsigned int *)(a1 + 3696);
  v76 = *(llvm **)(a1 + 3680);
  if ((_DWORD)v75)
  {
    v78 = 40 * v75;
    v79 = (char *)v76 + 24;
    do
    {
      if (*((_DWORD *)v79 - 6) <= 0xFFFFFFFD)
      {
        v80 = (char *)*((_QWORD *)v79 - 2);
        if (v79 != v80)
          free(v80);
      }
      v79 += 40;
      v78 -= 40;
    }
    while (v78);
    v76 = *(llvm **)(a1 + 3680);
    v77 = 40 * *(unsigned int *)(a1 + 3696);
  }
  else
  {
    v77 = 0;
  }
  llvm::deallocate_buffer(v76, (void *)v77);
  sub_22E794474((uint64_t *)(a1 + 3656));
  llvm::deallocate_buffer(*(llvm **)(a1 + 3656), (void *)(24 * *(unsigned int *)(a1 + 3672)));
  v81 = *(void **)(a1 + 3632);
  if (v81)
  {
    *(_QWORD *)(a1 + 3640) = v81;
    operator delete(v81);
  }
  llvm::deallocate_buffer(*(llvm **)(a1 + 3608), (void *)(32 * *(unsigned int *)(a1 + 3624)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 3584), (void *)(32 * *(unsigned int *)(a1 + 3600)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 3560), (void *)(24 * *(unsigned int *)(a1 + 3576)));
  sub_22F2BF584(a1 + 3536);
  llvm::deallocate_buffer(*(llvm **)(a1 + 3536), (void *)(40 * *(unsigned int *)(a1 + 3552)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 3512), (void *)(24 * *(unsigned int *)(a1 + 3528)));
  v82 = *(void **)(a1 + 3432);
  if (v82 != (void *)(a1 + 3448))
    free(v82);
  if ((*(_BYTE *)(a1 + 3360) & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(a1 + 3368), (void *)(16 * *(unsigned int *)(a1 + 3376)));
  v83 = *(void **)(a1 + 3280);
  if (v83 != (void *)(a1 + 3296))
    free(v83);
  if ((*(_BYTE *)(a1 + 3208) & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(a1 + 3216), (void *)(16 * *(unsigned int *)(a1 + 3224)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 3184), (void *)(16 * *(unsigned int *)(a1 + 3200)));
  v84 = *(void **)(a1 + 2912);
  if (v84 != (void *)(a1 + 2928))
    free(v84);
  v85 = *(unsigned int *)(a1 + 2904);
  v86 = *(llvm **)(a1 + 2888);
  if ((_DWORD)v85)
  {
    v88 = 56 * v85;
    v89 = (char *)v86 + 24;
    do
    {
      if (*((_DWORD *)v89 - 6) <= 0xFFFFFFFD)
      {
        v90 = (char *)*((_QWORD *)v89 - 2);
        if (v89 != v90)
          free(v90);
      }
      v89 += 56;
      v88 -= 56;
    }
    while (v88);
    v86 = *(llvm **)(a1 + 2888);
    v87 = 56 * *(unsigned int *)(a1 + 2904);
  }
  else
  {
    v87 = 0;
  }
  llvm::deallocate_buffer(v86, (void *)v87);
  v91 = *(void **)(a1 + 2808);
  if (v91 != (void *)(a1 + 2824))
    free(v91);
  v92 = *(void **)(a1 + 2784);
  if (v92)
  {
    *(_QWORD *)(a1 + 2792) = v92;
    operator delete(v92);
  }
  v93 = *(void **)(a1 + 2704);
  if (v93 != (void *)(a1 + 2720))
    free(v93);
  v94 = *(void **)(a1 + 2680);
  if (v94)
  {
    *(_QWORD *)(a1 + 2688) = v94;
    operator delete(v94);
  }
  v95 = *(void **)(a1 + 1640);
  if (v95 != (void *)(a1 + 1656))
    free(v95);
  v96 = *(void **)(a1 + 600);
  if (v96 != (void *)(a1 + 616))
    free(v96);
  v97 = *(void **)(a1 + 520);
  if (v97 != (void *)(a1 + 536))
    free(v97);
  v98 = *(uint64_t **)(a1 + 512);
  *(_QWORD *)(a1 + 512) = 0;
  if (v98)
  {
    v99 = sub_22E804B4C(v98);
    MEMORY[0x2348A0E9C](v99, 0x10A0C40954E1ADDLL);
  }
  v100 = *(_QWORD *)(a1 + 488);
  *(_QWORD *)(a1 + 488) = 0;
  if (v100)
  {
    v101 = MEMORY[0x23489EEC8]();
    MEMORY[0x2348A0E9C](v101, 0x10B2C402AE41D3ELL);
  }
  sub_22F2BF4A4(a1 + 456);
  sub_22F305214(a1 + 432);
  v102 = *(_QWORD *)(a1 + 424);
  *(_QWORD *)(a1 + 424) = 0;
  if (v102)
  {
    v103 = sub_22E78EBA0(v102);
    MEMORY[0x2348A0E9C](v103, 0x10A0C4014C39ADBLL);
  }
  v104 = *(void **)(a1 + 368);
  if (v104 != (void *)(a1 + 384))
    free(v104);
  v105 = *(void **)(a1 + 320);
  if (v105 != (void *)(a1 + 336))
    free(v105);
  v106 = *(unsigned int *)(a1 + 312);
  v107 = *(llvm **)(a1 + 296);
  if ((_DWORD)v106)
  {
    v109 = (uint64_t *)((char *)v107 + 8);
    v110 = 16 * v106;
    do
    {
      if ((*(v109 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v111 = *v109;
        *v109 = 0;
        if (v111)
          (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
      }
      v109 += 2;
      v110 -= 16;
    }
    while (v110);
    v107 = *(llvm **)(a1 + 296);
    v108 = (void *)(16 * *(unsigned int *)(a1 + 312));
  }
  else
  {
    v108 = 0;
  }
  llvm::deallocate_buffer(v107, v108);
  sub_22E6C6300((_DWORD **)(a1 + 272));
  llvm::deallocate_buffer(*(llvm **)(a1 + 240), (void *)(16 * *(unsigned int *)(a1 + 256)));
  v112 = *(void **)(a1 + 208);
  if (v112 != (void *)(a1 + 224))
    free(v112);
  v113 = *(void **)(a1 + 176);
  if (v113 != (void *)(a1 + 192))
    free(v113);
  sub_22F2BBC04((char **)(a1 + 144));
  v114 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v114)
    (*(void (**)(uint64_t))(*(_QWORD *)v114 + 8))(v114);
  nullsub_910(v3);
  return a1;
}

uint64_t sub_22E78C830(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  char v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;

  v3 = 0xAAAAAAAAAAAAAAABLL * (a3 - a2);
  v4 = *(unsigned int *)(result + 8);
  if (v3 + v4 > *(unsigned int *)(result + 12))
  {
    v12 = 0xAAAAAAAAAAAAAAABLL * (a3 - a2);
    v13 = result;
    v10 = a3;
    v11 = a2;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    a2 = v11;
    LODWORD(v3) = v12;
    a3 = v10;
    result = v13;
    v4 = *(unsigned int *)(v13 + 8);
  }
  if (a2 != a3)
  {
    v5 = (_QWORD *)(*(_QWORD *)result + 16 * v4);
    do
    {
      if (*((char *)a2 + 23) >= 0)
        v6 = a2;
      else
        v6 = (uint64_t *)*a2;
      *v5 = v6;
      v7 = *((_BYTE *)a2 + 23);
      v8 = v7;
      v9 = v7 & 0x7F;
      if (v8 < 0)
        v9 = a2[1];
      v5[1] = v9;
      a2 += 3;
      v5 += 2;
    }
    while (a2 != a3);
  }
  *(_DWORD *)(result + 8) = v4 + v3;
  return result;
}

BOOL sub_22E78C8FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  size_t v6;
  int v7;
  int v8;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a3 + 8);
  if (v5 >= v4)
    v6 = *(_QWORD *)(a2 + 8);
  else
    v6 = *(_QWORD *)(a3 + 8);
  if (v6 && (v7 = memcmp(*(const void **)a2, *(const void **)a3, v6)) != 0)
  {
    v8 = (v7 >> 31) | 1;
  }
  else
  {
    if (v4 < v5)
      v8 = -1;
    else
      v8 = 1;
    if (v4 == v5)
      v8 = 0;
  }
  return v8 == -1;
}

uint64_t *sub_22E78C964(uint64_t *result, uint64_t **a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v11;
  uint64_t **v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = (uint64_t *)*result;
  v7 = *a2;
  if ((uint64_t *)*result != *a2)
  {
    v11 = *a3;
    if (v11 == *a4)
    {
LABEL_10:
      v18 = *a5;
      while (v6 != v7)
      {
        v16 = *v6;
        v17 = v6[1];
        v6 += 2;
        result = sub_22E78CA70(&v18, v16, v17);
      }
    }
    else
    {
      v14 = (uint64_t **)result;
      while (1)
      {
        if (sub_22E78C8FC(a6, (uint64_t)v6, v11))
        {
          result = sub_22E78CA70(a5, **v14, (*v14)[1]);
          v15 = v14;
        }
        else
        {
          result = (uint64_t *)sub_22E78C8FC(a6, *a3, (uint64_t)*v14);
          v15 = a3;
          if ((result & 1) == 0)
          {
            *v14 += 2;
            v15 = a3;
          }
        }
        *v15 += 16;
        v6 = *v14;
        v7 = *a2;
        if (*v14 == *a2)
          break;
        v11 = *a3;
        if (*a3 == *a4)
          goto LABEL_10;
      }
    }
  }
  return result;
}

uint64_t *sub_22E78CA70(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;

  v6 = *a1;
  v7 = *(_DWORD *)(*a1 + 8);
  if (v7 >= *(_DWORD *)(*a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(v6 + 8);
  }
  v8 = (_QWORD *)(*(_QWORD *)v6 + 16 * v7);
  *v8 = a2;
  v8[1] = a3;
  ++*(_DWORD *)(v6 + 8);
  return a1;
}

uint64_t *sub_22E78CAE4(uint64_t *result, unsigned int *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char **v9;
  char *v10;
  char v11;
  int v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  unint64_t v18;
  const void *v19;
  size_t v20;
  unint64_t v21;
  const char *v22;
  uint64_t v23;
  int Key;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t first_of;
  int v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  const char *v34;
  __int128 v35;
  unint64_t v36;
  char *v37;
  unint64_t v38;

  v3 = result[1] - *result;
  if ((v3 & 0x1FFFFFFFE0) != 0)
  {
    v6 = result;
    v7 = 0;
    v8 = (v3 >> 5);
    do
    {
      v9 = (char **)(*v6 + v7);
      if (*((char *)v9 + 23) >= 0)
        v10 = (char *)(*v6 + v7);
      else
        v10 = *v9;
      v37 = v10;
      v11 = *((_BYTE *)v9 + 23);
      v12 = v11;
      v13 = v11 & 0x7F;
      if (v12 < 0)
        v13 = (unint64_t)v9[1];
      v38 = v13;
      v14 = *((unsigned __int8 *)v9 + 24);
      v15 = llvm::StringRef::find();
      if (v15 == -1)
      {
        v16 = 0;
        v17 = 0;
        v19 = v37;
        v18 = v38;
        v20 = v38;
      }
      else
      {
        v19 = v37;
        v18 = v38;
        if (v38 >= v15)
          v20 = v15;
        else
          v20 = v38;
        if (v38 >= v15 + 1)
          v21 = v15 + 1;
        else
          v21 = v38;
        v16 = &v37[v21];
        v17 = v38 - v21;
      }
      v34 = v16;
      v36 = v17;
      if (v14)
      {
        if (a3)
        {
          Key = llvm::StringMapImpl::FindKey();
          if (Key == -1 || Key == (unint64_t)a2[2])
          {
            v26 = *(unsigned int *)(a3 + 8);
            if (v26 >= *(unsigned int *)(a3 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v26 = *(unsigned int *)(a3 + 8);
            }
            v27 = (_QWORD *)(*(_QWORD *)a3 + 16 * v26);
            *v27 = v19;
            v27[1] = v20;
            ++*(_DWORD *)(a3 + 8);
          }
        }
        result = sub_22F2BB230((llvm::StringMapImpl *)a2, v19, v20);
        v28 = *result;
        *(_QWORD *)(v28 + 8) = "";
        *(_QWORD *)(v28 + 16) = 0;
        *(_BYTE *)(v28 + 24) = 1;
      }
      else
      {
        if (v20 == v18)
        {
          v22 = "1";
          v23 = 1;
        }
        else
        {
          first_of = llvm::StringRef::find_first_of();
          v23 = v36;
          v22 = v34;
          if (v36 >= first_of)
            v23 = first_of;
        }
        *(_QWORD *)&v35 = v22;
        *((_QWORD *)&v35 + 1) = v23;
        if (a3)
        {
          v30 = llvm::StringMapImpl::FindKey();
          if (v30 == -1 || v30 == (unint64_t)a2[2])
          {
            v31 = *(unsigned int *)(a3 + 8);
            if (v31 >= *(unsigned int *)(a3 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v31 = *(unsigned int *)(a3 + 8);
            }
            v32 = (_QWORD *)(*(_QWORD *)a3 + 16 * v31);
            *v32 = v19;
            v32[1] = v20;
            ++*(_DWORD *)(a3 + 8);
          }
        }
        result = sub_22F2BB230((llvm::StringMapImpl *)a2, v19, v20);
        v33 = *result;
        *(_OWORD *)(v33 + 8) = v35;
        *(_BYTE *)(v33 + 24) = 0;
      }
      v7 += 32;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t sub_22E78CD64(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  llvm *v6;

  if (*(_DWORD *)(a1 + 12))
  {
    v3 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 8 * v3;
      do
      {
        v6 = *(llvm **)(*(_QWORD *)a1 + v4);
        if (v6 != (llvm *)-8 && v6 != 0)
          llvm::deallocate_buffer(v6, (void *)(*(_QWORD *)v6 + 33));
        v4 += 8;
      }
      while (v5 != v4);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t *sub_22E78CDE0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t *v10;

  v2 = 0;
  v3 = 0;
  v4 = 0;
  v5 = *a1;
  v6 = "malformed uleb128, extends past end";
  while (v5 + v2)
  {
    v7 = *(_BYTE *)(v5 + v2);
    v8 = v7 & 0x7F;
    if (v4 >= 0x40 && (v7 & 0x7F) != 0 || (unint64_t)(v8 << v4) >> v4 != v8)
    {
      v6 = "uleb128 too big for uint64";
      break;
    }
    v3 += v8 << v4;
    v4 += 7;
    ++v2;
    if ((v7 & 0x80) == 0)
    {
      *a1 = v5 + v2;
      return (uint64_t *)v3;
    }
  }
  v10 = (uint64_t *)llvm::report_fatal_error((llvm *)v6, (const char *)1);
  return sub_22E78CE68(v10);
}

uint64_t *sub_22E78CE68(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  std::string v9;
  std::string *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  char *v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(v2 + 16) = (v3 >> 3) & 0x1FFFFFFFFFFFFFF8;
  *(_DWORD *)(v2 + 32) = 0;
  if ((v3 & 0x3F) == 0)
    return a1;
  sub_22E745EC8(v2, v3 & 0x3F, (uint64_t)&v14);
  if ((v15 & 1) == 0 || !v14)
    return a1;
  v12 = "Cursor should always be able to go back, failed: ";
  v13 = 259;
  v8 = v14;
  sub_22F2432A8(&v8, &v9);
  v11 = 260;
  v10 = &v9;
  sub_22F2BB324((uint64_t *)&v12, (uint64_t *)&v10, (uint64_t)&v14);
  v5 = (uint64_t *)llvm::report_fatal_error();
  return sub_22E78CF44(v5, v6, v7);
}

uint64_t *sub_22E78CF44@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  int v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;

  v3 = *((unsigned __int8 *)result + 32);
  if (!*((_BYTE *)result + 32) || (v4 = *((unsigned __int8 *)a2 + 32), !*((_BYTE *)a2 + 32)))
  {
    *(_WORD *)(a3 + 32) = 256;
    return result;
  }
  if (v3 == 1)
  {
    v5 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *(_OWORD *)(a3 + 16) = v5;
    v6 = a2[4];
LABEL_8:
    *(_QWORD *)(a3 + 32) = v6;
    return result;
  }
  if (v4 == 1)
  {
    v7 = *((_OWORD *)result + 1);
    *(_OWORD *)a3 = *(_OWORD *)result;
    *(_OWORD *)(a3 + 16) = v7;
    v6 = result[4];
    goto LABEL_8;
  }
  v8 = *((unsigned __int8 *)result + 33);
  if ((_DWORD)v8 == 1)
  {
    v9 = result;
    result = (uint64_t *)*result;
    v8 = v9[1];
  }
  else
  {
    LOBYTE(v3) = 2;
  }
  v10 = a2[1];
  if (*((_BYTE *)a2 + 33) == 1)
  {
    v11 = (uint64_t *)*a2;
  }
  else
  {
    LOBYTE(v4) = 2;
    v11 = a2;
  }
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v8;
  *(_QWORD *)(a3 + 16) = v11;
  *(_QWORD *)(a3 + 24) = v10;
  *(_BYTE *)(a3 + 32) = v3;
  *(_BYTE *)(a3 + 33) = v4;
  return result;
}

void sub_22E78CFD8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  int v12;
  void **v13;
  void *v14[2];
  uint64_t v15;

  v14[0] = 0;
  v14[1] = 0;
  v15 = 0;
  v6 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 1;
  v8 = 0;
  v9 = 0;
  v7 = 0;
  v5 = MEMORY[0x24BED83D8] + 16;
  v13 = v14;
  llvm::raw_ostream::SetBufferAndMode();
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 16))(a1, &v5);
  if (*((char *)v13 + 23) < 0)
  {
    sub_22E3BB2B4((_BYTE *)a2, *v13, (unint64_t)v13[1]);
  }
  else
  {
    v4 = *(_OWORD *)v13;
    *(_QWORD *)(a2 + 16) = v13[2];
    *(_OWORD *)a2 = v4;
  }
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v5);
  if (SHIBYTE(v15) < 0)
    operator delete(v14[0]);
}

__n128 sub_22E78D0A8(uint64_t *a1, __n128 *a2)
{
  __n128 result;

  if (*a1)
  {
    sub_22E3B485C(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  result = *a2;
  *(__n128 *)a1 = *a2;
  a1[2] = a2[1].n128_i64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_22E78D100(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v6 = *a1;
    v7 = v3 - 1;
    v8 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v4 = (_QWORD *)(*a1 + 48 * v8);
    v9 = *v4;
    if (*a2 == *v4)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v9 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v9 == -8192;
        if (v12)
          v10 = v4;
        v13 = v8 + v11++;
        v8 = v13 & v7;
        v4 = (_QWORD *)(v6 + 48 * (v13 & v7));
        v9 = *v4;
        if (*a2 == *v4)
          goto LABEL_3;
      }
      result = 0;
      if (v10)
        v4 = v10;
    }
  }
  else
  {
    v4 = 0;
    result = 0;
  }
LABEL_3:
  *a3 = v4;
  return result;
}

uint64_t sub_22E78D1A4(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  __n128 *v9;
  int v10;
  uint64_t *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (a1 != a2)
  {
    v4 = *(char **)a2;
    if (*(_QWORD *)a2 == a2 + 16)
    {
      v5 = *(unsigned int *)(a2 + 8);
      v6 = *(unsigned int *)(a1 + 8);
      if (v6 >= v5)
      {
        v12 = *(char **)a1;
        if ((_DWORD)v5)
        {
          v13 = 0;
          do
          {
            v14 = (uint64_t)&v4[v13 + 32];
            *(_DWORD *)&v12[v13] = *(_DWORD *)&v4[v13];
            sub_22E78D0A8((uint64_t *)&v12[v13 + 8], (__n128 *)&v4[v13 + 8]);
            v13 += 32;
          }
          while ((char *)v14 != &v4[32 * v5]);
          v6 = *(unsigned int *)(a1 + 8);
          v15 = &v12[v13];
          v12 = *(char **)a1;
        }
        else
        {
          v15 = *(char **)a1;
        }
        v16 = &v12[32 * v6];
        if (v16 != v15)
        {
          v17 = (uint64_t *)(v16 - 24);
          do
          {
            if (*v17)
            {
              sub_22E3B485C(v17);
              operator delete((void *)*v17);
            }
            v18 = v17 - 1;
            v17 -= 4;
          }
          while (v18 != (uint64_t *)v15);
        }
        goto LABEL_26;
      }
      if (*(_DWORD *)(a1 + 12) < v5)
      {
        sub_22E747F38(a1);
        sub_22F2AF230(a1);
      }
      else if ((_DWORD)v6)
      {
        v7 = &v4[32 * v6];
        v8 = *(char **)a1;
        do
        {
          v9 = (__n128 *)(v4 + 8);
          v10 = *(_DWORD *)v4;
          v4 += 32;
          v11 = (uint64_t *)(v8 + 8);
          *(_DWORD *)v8 = v10;
          v8 += 32;
          sub_22E78D0A8(v11, v9);
        }
        while (v4 != v7);
LABEL_23:
        v19 = *(unsigned int *)(a2 + 8);
        if (v6 != v19)
        {
          v20 = *(_QWORD *)a2 + 32 * v19;
          v21 = *(_QWORD *)a1 + 32 * v6;
          v22 = *(_QWORD *)a2 + 32 * v6;
          do
          {
            *(_DWORD *)v21 = *(_DWORD *)v22;
            *(_QWORD *)(v21 + 16) = 0;
            *(_QWORD *)(v21 + 24) = 0;
            *(_QWORD *)(v21 + 8) = 0;
            *(_OWORD *)(v21 + 8) = *(_OWORD *)(v22 + 8);
            *(_QWORD *)(v21 + 24) = *(_QWORD *)(v22 + 24);
            *(_QWORD *)(v22 + 8) = 0;
            *(_QWORD *)(v22 + 16) = 0;
            *(_QWORD *)(v22 + 24) = 0;
            v22 += 32;
            v21 += 32;
          }
          while (v22 != v20);
        }
LABEL_26:
        *(_DWORD *)(a1 + 8) = v5;
        sub_22E747F38(a2);
        return a1;
      }
      v6 = 0;
      goto LABEL_23;
    }
    sub_22F2BB3F0((char **)a1, (char **)a2);
  }
  return a1;
}

void sub_22E78D350(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FA720A8;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E78D39C(uint64_t a1, uint64_t a2)
{
  return sub_22E750B9C(*(_QWORD *)(a1 + 8), a2, 0);
}

uint64_t sub_22E78D3A8(uint64_t a1, void **a2, uint64_t a3, int a4)
{
  return sub_22E767250(*(unsigned __int8 **)(a1 + 16), a2, 0, a4);
}

uint64_t sub_22E78D3B4(uint64_t a1, uint64_t a2, void *__s1, size_t a4)
{
  uint64_t v5;
  void *v6;
  void *v7;
  char v8;
  int v9;
  void *v10;
  size_t v11;
  size_t v12;

  v7 = *(void **)(a1 + 32);
  v5 = a1 + 32;
  v6 = v7;
  v8 = *(_BYTE *)(v5 + 23);
  v9 = v8;
  if (v8 >= 0)
    v10 = (void *)v5;
  else
    v10 = v6;
  v11 = v8 & 0x7F;
  if (v9 >= 0)
    v12 = v11;
  else
    v12 = *(_QWORD *)(v5 + 8);
  return sub_22E768CD8(*(_BYTE *)(a2 + 216), __s1, a4, v10, v12, 0, *(_QWORD *)(*(_QWORD *)(v5 - 24) + 20), *(unsigned __int8 *)(*(_QWORD *)(v5 - 24) + 28), *(_BYTE *)(*(_QWORD *)(v5 - 8) + 157));
}

uint64_t sub_22E78D41C(uint64_t a1, uint64_t a2, uint64_t a3, std::string *a4)
{
  return sub_22E768380(*(_QWORD *)(a1 + 24), a2, 0, a4, *(_QWORD *)(a1 + 8), 1);
}

uint64_t sub_22E78D434(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
  v4 = *a2;
  v3 = a2[1];
  *(_QWORD *)(a1 + 8) = v3;
  if (v4)
  {
    v7 = (_OWORD *)sub_22E3B8AAC(v3);
    v8 = 0;
    *(_QWORD *)a1 = v7;
    v9 = *a2;
    v10 = *(_OWORD *)(v9 + 16);
    *v7 = *(_OWORD *)v9;
    v7[1] = v10;
    v11 = *(_OWORD *)(v9 + 32);
    v12 = *(_OWORD *)(v9 + 48);
    v13 = *(_OWORD *)(v9 + 80);
    v7[4] = *(_OWORD *)(v9 + 64);
    v7[5] = v13;
    v7[2] = v11;
    v7[3] = v12;
    do
    {
      std::string::operator=((std::string *)((char *)v7 + v8 + 96), (const std::string *)(v9 + 96 + v8));
      v8 += 24;
    }
    while (v8 != 240);
    sub_22E78D560((uint64_t)(v7 + 21), v9 + 336);
    sub_22E78D658((uint64_t)(v7 + 28), (uint64_t *)(v9 + 448));
  }
  return a1;
}

_OWORD *sub_22E78D4E8(_OWORD *a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t i;

  v4 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v4;
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  v7 = *(_OWORD *)(a2 + 80);
  a1[4] = *(_OWORD *)(a2 + 64);
  a1[5] = v7;
  a1[2] = v5;
  a1[3] = v6;
  for (i = 96; i != 336; i += 24)
    std::string::operator=((std::string *)((char *)a1 + i), (const std::string *)(a2 + i));
  sub_22E78D560((uint64_t)(a1 + 21), a2 + 336);
  sub_22E78D658((uint64_t)(a1 + 28), (uint64_t *)(a2 + 448));
  return a1;
}

uint64_t sub_22E78D560(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 8);
    v4 = *(_DWORD *)(a1 + 8);
    if (v4 >= v3)
    {
      if (v3)
        memmove(*(void **)a1, *(const void **)a2, 12 * v3 - 3);
      goto LABEL_8;
    }
    if (*(_DWORD *)(a1 + 12) < v3)
    {
      *(_DWORD *)(a1 + 8) = 0;
      v9 = a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      a2 = v9;
    }
    else if (v4)
    {
      v8 = *(unsigned int *)(a1 + 8);
      v10 = a2;
      memmove(*(void **)a1, *(const void **)a2, 12 * v4 - 3);
      v5 = v8;
      a2 = v10;
LABEL_6:
      v6 = *(unsigned int *)(a2 + 8);
      if (v5 != v6)
        memcpy((void *)(*(_QWORD *)a1 + 12 * v5), (const void *)(*(_QWORD *)a2 + 12 * v5), *(_QWORD *)a2 + 12 * v6 - (*(_QWORD *)a2 + 12 * v5));
LABEL_8:
      *(_DWORD *)(a1 + 8) = v3;
      return a1;
    }
    v5 = 0;
    goto LABEL_6;
  }
  return a1;
}

uint64_t sub_22E78D658(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *((_DWORD *)a2 + 2);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4)
      {
        v10 = (__int128 *)*a2;
        v11 = *a2 + 56 * v4;
        v12 = *(_QWORD *)a1;
        do
        {
          v13 = *v10;
          *(_QWORD *)(v12 + 13) = *(_QWORD *)((char *)v10 + 13);
          *(_OWORD *)v12 = v13;
          std::string::operator=((std::string *)(v12 + 24), (const std::string *)v10 + 1);
          *(_BYTE *)(v12 + 48) = *((_BYTE *)v10 + 48);
          v12 += 56;
          v10 = (__int128 *)((char *)v10 + 56);
        }
        while (v10 != (__int128 *)v11);
        LODWORD(v5) = *(_DWORD *)(a1 + 8);
        v14 = *(_QWORD *)a1;
      }
      else
      {
        v14 = *(_QWORD *)a1;
        v12 = *(_QWORD *)a1;
      }
      for (i = v14 + 56 * v5; i != v12; i -= 56)
      {
        if (*(char *)(i - 9) < 0)
          operator delete(*(void **)(i - 32));
      }
      goto LABEL_31;
    }
    if (*(_DWORD *)(a1 + 12) < v4)
    {
      if ((_DWORD)v5)
      {
        v16 = *(_QWORD *)a1;
        v17 = 56 * v5;
        do
        {
          if (*(char *)(v16 + v17 - 9) < 0)
            operator delete(*(void **)(v16 + v17 - 32));
          v17 -= 56;
        }
        while (v17);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_22F2A5F44(a1);
    }
    else if ((_DWORD)v5)
    {
      v6 = (__int128 *)*a2;
      v7 = *a2 + 56 * v5;
      v8 = *(_QWORD *)a1;
      do
      {
        v9 = *v6;
        *(_QWORD *)(v8 + 13) = *(_QWORD *)((char *)v6 + 13);
        *(_OWORD *)v8 = v9;
        std::string::operator=((std::string *)(v8 + 24), (const std::string *)v6 + 1);
        *(_BYTE *)(v8 + 48) = *((_BYTE *)v6 + 48);
        v6 = (__int128 *)((char *)v6 + 56);
        v8 += 56;
      }
      while (v6 != (__int128 *)v7);
LABEL_25:
      v18 = *((unsigned int *)a2 + 2);
      if (v5 != v18)
      {
        v19 = (__int128 *)*a2;
        v20 = *a2 + 56 * v18;
        v21 = 56 * v5 + 24;
        v22 = *(_QWORD *)a1 + v21;
        v23 = (__int128 *)((char *)v19 + v21);
        do
        {
          v24 = *(__int128 *)((char *)v23 - 24);
          *(_QWORD *)(v22 - 11) = *(_QWORD *)((char *)v23 - 11);
          *(_OWORD *)(v22 - 24) = v24;
          if (*((char *)v23 + 23) < 0)
          {
            sub_22E3BB2B4((_BYTE *)v22, *(void **)v23, *((_QWORD *)v23 + 1));
          }
          else
          {
            v25 = *v23;
            *(_QWORD *)(v22 + 16) = *((_QWORD *)v23 + 2);
            *(_OWORD *)v22 = v25;
          }
          v26 = (uint64_t)v23 - 24;
          *(_BYTE *)(v22 + 24) = *((_BYTE *)v23 + 24);
          v22 += 56;
          v23 = (__int128 *)((char *)v23 + 56);
        }
        while (v26 + 56 != v20);
      }
LABEL_31:
      *(_DWORD *)(a1 + 8) = v4;
      return a1;
    }
    v5 = 0;
    goto LABEL_25;
  }
  return a1;
}

_QWORD *sub_22E78D854(_QWORD *a1)
{
  unint64_t v2;
  unint64_t v3;

  *a1 = &off_24FA72160;
  v2 = a1[2];
  if (v2)
  {
    v3 = a1[3];
    if (v3)
    {
      sub_22E3BB10C(v3, v2);
      a1[2] = 0;
    }
  }
  return a1;
}

void sub_22E78D898(_QWORD *a1)
{
  unint64_t v2;
  unint64_t v3;

  *a1 = &off_24FA72160;
  v2 = a1[2];
  if (v2)
  {
    v3 = a1[3];
    if (v3)
    {
      sub_22E3BB10C(v3, v2);
      a1[2] = 0;
    }
  }
  JUMPOUT(0x2348A0E9CLL);
}

void **sub_22E78D8EC(void **result)
{
  void **v1;
  void **v2;

  if (*((_BYTE *)result + 312))
  {
    v1 = result;
    v2 = result + 4;
    sub_22E6C6A2C(result + 23);
    sub_22E6C6AB4((uint64_t)(v1 + 20), v1[21]);
    result = sub_22E6C6A2C(v2);
    *((_BYTE *)v1 + 312) = 0;
  }
  return result;
}

uint64_t sub_22E78D938(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      sub_22F2BB4C4((_QWORD **)a1, v3, (uint64_t)(v5 + 4), (uint64_t)(v5 + 4));
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != v4);
  }
  return a1;
}

_QWORD *sub_22E78D9CC(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  int v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  char *v17;
  int v18;
  int v19;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  int v32;
  int v33;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  int v39;
  int v40;

  if (a1 + 1 == a2)
  {
LABEL_21:
    v21 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v23 = a2;
LABEL_27:
      if (v21)
      {
        *a3 = v23;
        return v23 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v21)
    {
      v22 = (_QWORD *)*a2;
      do
      {
        v23 = v22;
        v22 = (_QWORD *)v22[1];
      }
      while (v22);
    }
    else
    {
      v26 = a2;
      do
      {
        v23 = (_QWORD *)v26[2];
        v15 = *v23 == (_QWORD)v26;
        v26 = v23;
      }
      while (v15);
    }
    v27 = *(_QWORD *)(a5 + 8);
    if (v27)
    {
      v28 = (char *)v23[4];
      v29 = v23[5];
      v30 = v27 - 1;
      v31 = *(char **)a5;
      while (v29)
      {
        v32 = *v28;
        v33 = *v31;
        if (v32 < v33)
          break;
        ++v28;
        ++v31;
        --v29;
        if (v33 < v32 || v30-- == 0)
          return sub_22E78DBBC((uint64_t)a1, a3, (char **)a5);
      }
      goto LABEL_27;
    }
    return sub_22E78DBBC((uint64_t)a1, a3, (char **)a5);
  }
  v5 = *(char **)a5;
  v6 = *(_QWORD *)(a5 + 8);
  v7 = (char *)a2[4];
  v8 = a2[5];
  if (v8)
  {
    v9 = v8 - 1;
    v10 = *(_QWORD *)(a5 + 8);
    v11 = *(char **)a5;
    v12 = (char *)a2[4];
    while (v10)
    {
      v13 = *v11;
      v14 = *v12;
      if (v13 < v14)
        break;
      ++v11;
      ++v12;
      --v10;
      v15 = v14 < v13 || v9-- == 0;
      if (v15)
        goto LABEL_11;
    }
    goto LABEL_21;
  }
LABEL_11:
  if (v6)
  {
    v16 = v6 - 1;
    v17 = *(char **)a5;
    while (v8)
    {
      v18 = *v7;
      v19 = *v17;
      if (v18 < v19)
        break;
      ++v7;
      ++v17;
      --v8;
      if (v19 < v18 || v16-- == 0)
        goto LABEL_20;
    }
    v24 = a2[1];
    if (v24)
    {
      v25 = (_QWORD *)a2[1];
      do
      {
        a4 = v25;
        v25 = (_QWORD *)*v25;
      }
      while (v25);
    }
    else
    {
      v35 = a2;
      do
      {
        a4 = (_QWORD *)v35[2];
        v15 = *a4 == (_QWORD)v35;
        v35 = a4;
      }
      while (!v15);
    }
    if (a4 != a1 + 1)
    {
      v36 = a4[5];
      if (!v36)
        return sub_22E78DBBC((uint64_t)a1, a3, (char **)a5);
      v37 = (char *)a4[4];
      v38 = v36 - 1;
      while (v6)
      {
        v39 = *v5;
        v40 = *v37;
        if (v39 < v40)
          break;
        ++v5;
        ++v37;
        --v6;
        if (v40 < v39 || v38-- == 0)
          return sub_22E78DBBC((uint64_t)a1, a3, (char **)a5);
      }
    }
    if (v24)
    {
      *a3 = a4;
    }
    else
    {
      *a3 = a2;
      return a2 + 1;
    }
  }
  else
  {
LABEL_20:
    *a3 = a2;
    *a4 = a2;
  }
  return a4;
}

_QWORD *sub_22E78DBBC(uint64_t a1, _QWORD *a2, char **a3)
{
  _QWORD *result;
  _QWORD *v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  int v16;
  char *v18;
  char *v19;
  int v20;
  int v21;

  v5 = *(_QWORD **)(a1 + 8);
  result = (_QWORD *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = *a3;
    v7 = a3[1];
    do
    {
      while (1)
      {
        v8 = v4;
        v9 = (char *)v4[4];
        v10 = v8[5];
        if (v10)
          break;
LABEL_12:
        if (v7)
        {
          v18 = v7 - 1;
          v19 = v6;
          while (v10)
          {
            v20 = *v9;
            v21 = *v19;
            if (v20 < v21)
              break;
            ++v9;
            ++v19;
            --v10;
            if (v21 < v20 || v18-- == 0)
              goto LABEL_27;
          }
          result = v8 + 1;
          v4 = (_QWORD *)v8[1];
          if (v4)
            continue;
        }
        goto LABEL_27;
      }
      v11 = v10 - 1;
      v12 = v7;
      v13 = v6;
      v14 = v9;
      while (v12)
      {
        v15 = *v13;
        v16 = *v14;
        if (v15 < v16)
          break;
        ++v13;
        ++v14;
        --v12;
        if (v16 < v15 || v11-- == 0)
          goto LABEL_12;
      }
      v4 = (_QWORD *)*v8;
      result = v8;
    }
    while (*v8);
  }
  else
  {
    v8 = result;
  }
LABEL_27:
  *a2 = v8;
  return result;
}

uint64_t sub_22E78DC88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
      {
        v9 = *(_QWORD *)a2;
        v10 = *(_QWORD *)a1;
        v11 = 56 * v4;
        do
        {
          sub_22E3B3B4C(v10, v9);
          v9 += 56;
          v10 += 56;
          v11 -= 56;
        }
        while (v11);
        LODWORD(v5) = *(_DWORD *)(a1 + 8);
        v12 = *(_QWORD *)a1;
      }
      else
      {
        v12 = *(_QWORD *)a1;
        v10 = *(_QWORD *)a1;
      }
      v13 = v12 + 56 * v5;
      while (v13 != v10)
      {
        v15 = *(void **)(v13 - 56);
        v13 -= 56;
        v14 = v15;
        if ((void *)(v13 + 24) != v15)
          free(v14);
      }
      goto LABEL_29;
    }
    if (*(_DWORD *)(a1 + 12) < v4)
    {
      if ((_DWORD)v5)
      {
        v16 = *(_QWORD *)a1;
        v17 = 56 * v5;
        do
        {
          v18 = *(void **)(v16 + v17 - 56);
          if ((void *)(v16 + v17 - 32) != v18)
            free(v18);
          v17 -= 56;
        }
        while (v17);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_22F2BB580(a1);
    }
    else if ((_DWORD)v5)
    {
      v6 = *(_QWORD *)a2;
      v7 = *(_QWORD *)a1;
      v8 = 56 * v5;
      do
      {
        sub_22E3B3B4C(v7, v6);
        v6 += 56;
        v7 += 56;
        v8 -= 56;
      }
      while (v8);
LABEL_24:
      v19 = *(unsigned int *)(a2 + 8);
      if (v5 != v19)
      {
        v20 = *(_QWORD *)a2;
        v21 = *(_QWORD *)a1;
        v22 = 56 * v5;
        v23 = 56 * v19;
        do
        {
          v24 = v21 + v22;
          *(_QWORD *)v24 = v21 + v22 + 24;
          *(_OWORD *)(v24 + 8) = xmmword_22F44E330;
          if (*(_QWORD *)(v20 + v22 + 8))
            sub_22E3B3B4C(v24, v20 + v22);
          v21 += 56;
          v23 -= 56;
          v20 += 56;
        }
        while (v22 != v23);
      }
LABEL_29:
      *(_DWORD *)(a1 + 8) = v4;
      return a1;
    }
    v5 = 0;
    goto LABEL_24;
  }
  return a1;
}

void *sub_22E78DE40(uint64_t *a1, uint64_t a2)
{
  _DWORD *v4;
  void *result;
  uint64_t v6;

  v4 = operator new(0x30uLL);
  *(_OWORD *)v4 = 0u;
  v4[8] = 0;
  *((_OWORD *)v4 + 1) = 0u;
  result = sub_22E78DEB0((uint64_t)(v4 + 4), a2);
  *((_QWORD *)v4 + 5) = *(_QWORD *)(a2 + 24);
  v6 = *a1;
  *(_QWORD *)v4 = *a1;
  *((_QWORD *)v4 + 1) = a1;
  *(_QWORD *)(v6 + 8) = v4;
  *a1 = (uint64_t)v4;
  ++a1[2];
  return result;
}

void *sub_22E78DEB0(uint64_t a1, uint64_t a2)
{
  void *result;
  uint64_t v5;
  void *v6;

  result = (void *)llvm::deallocate_buffer(*(llvm **)a1, (void *)(8 * *(unsigned int *)(a1 + 16)));
  v5 = *(unsigned int *)(a2 + 16);
  *(_DWORD *)(a1 + 16) = v5;
  if ((_DWORD)v5)
  {
    v6 = (void *)MEMORY[0x23489D23C](8 * v5, 4);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    return memcpy(v6, *(const void **)a2, 8 * *(unsigned int *)(a1 + 16));
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  return result;
}

uint64_t sub_22E78DF24(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4;
  uint64_t v6;

  v4 = *a4;
  if (*(_DWORD *)(a3 + 8) <= v4)
    return 0;
  *a4 = v4 + 1;
  v6 = sub_22E77A180(a1, a2, *(_QWORD *)(*(_QWORD *)a3 + 8 * v4));
  return sub_22E77D8C8(a1, v6);
}

unint64_t sub_22E78DF7C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v8;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v6 = *(_QWORD *)a1 + 32 * v4;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
  }
  return v3;
}

uint64_t sub_22E78DFF0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  int v12;

  v4 = a1[10];
  v5 = sub_22E768FE0((uint64_t)a1, a2, a3);
  v6 = v5 - 18;
  if (v5 < 0x12)
    return 0;
  v7 = a1[348];
  if (v6 > (a1[349] - v7) >> 3)
  {
    sub_22E769C10((uint64_t)a1, "declaration ID out-of-range for AST file", 0x28uLL);
    return 0;
  }
  v9 = *(_QWORD *)(v7 + 8 * v6);
  if (v9)
  {
    v10 = (unsigned int *)(v9 + 24);
  }
  else
  {
    v12 = 0;
    v10 = (unsigned int *)&v12;
    sub_22E7B0A34((uint64_t)a1, v5, &v12);
  }
  v8 = *v10;
  if ((v8 & 0x80000000) == 0)
    return v8;
  return sub_22F423AE4(v4, v8);
}

llvm::StringMapImpl *sub_22E78E0A8(llvm::StringMapImpl *this, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v17;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0x2000000000;
  if (*((_DWORD *)a2 + 3))
  {
    llvm::StringMapImpl::init(this);
    v4 = *(_QWORD *)this;
    v5 = *((unsigned int *)this + 2);
    v6 = *a2;
    *(_QWORD *)((char *)this + 12) = *(_QWORD *)((char *)a2 + 12);
    if ((_DWORD)v5)
    {
      v7 = 0;
      v17 = v4 + 8 * v5 + 8;
      v8 = v6 + 8 * v5 + 8;
      do
      {
        v9 = *(_QWORD *)(*a2 + 8 * v7);
        if (v9)
          v10 = v9 == -8;
        else
          v10 = 1;
        if (v10)
        {
          *(_QWORD *)(*(_QWORD *)this + 8 * v7) = v9;
        }
        else
        {
          v11 = *(_QWORD *)v9;
          v12 = MEMORY[0x23489D23C](*(_QWORD *)v9 + 33, 8);
          v13 = v12;
          v14 = v12 + 32;
          if (v11)
            memcpy((void *)(v12 + 32), (const void *)(v9 + 32), v11);
          *(_BYTE *)(v14 + v11) = 0;
          *(_QWORD *)v13 = v11;
          v15 = *(_OWORD *)(v9 + 8);
          *(_DWORD *)(v13 + 24) = *(_DWORD *)(v9 + 24);
          *(_OWORD *)(v13 + 8) = v15;
          *(_QWORD *)(*(_QWORD *)this + 8 * v7) = v13;
          *(_DWORD *)(v17 + 4 * v7) = *(_DWORD *)(v8 + 4 * v7);
        }
        ++v7;
      }
      while (v5 != v7);
    }
  }
  return this;
}

uint64_t sub_22E78E1D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;
  BOOL v6;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(llvm **)(*(_QWORD *)a1 + v3);
        if (v5)
          v6 = (llvm *)((char *)v5 + 8) == 0;
        else
          v6 = 1;
        if (!v6)
          llvm::deallocate_buffer(v5, (void *)(*(_QWORD *)v5 + 33));
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

_QWORD *sub_22E78E24C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_24FA721B0;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_22E78E2A8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_24FA721B0;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E78E314(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = a1[1];
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
    if (!v3)
    {
      v4 = a1[1];
      a1[1] = 0;
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v5 = a1[1];
      }
      else
      {
        v5 = 0;
      }
      a1[1] = a1[2];
      a1[2] = v5;
      return (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    }
  }
  return result;
}

_QWORD *sub_22E78E38C(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 40 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F2BB800(a1, v4, (_QWORD *)v4 + 5 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(40 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 40 * v10;
      do
      {
        *result = -1;
        result += 5;
        v11 -= 40;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22E78E458(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t *v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;

  v4 = a1[1];
  v5 = (_QWORD *)*a1;
  if ((uint64_t)((a1[2] & 0xFFFFFFFFFFFFFFF8) - *a1) >> 2 <= a3)
    v6 = a3;
  else
    v6 = (uint64_t)((a1[2] & 0xFFFFFFFFFFFFFFF8) - *a1) >> 2;
  v7 = 8 * v6;
  if (v6 >> 61)
    v7 = -1;
  result = sub_22E3CD3D4(a2 + 2032, v7, 3);
  v9 = (uint64_t *)*a1;
  v10 = (uint64_t *)a1[1];
  if ((uint64_t *)*a1 != v10)
  {
    v11 = (_QWORD *)result;
    do
    {
      v12 = *v9++;
      *v11++ = v12;
    }
    while (v9 != v10);
  }
  *a1 = result;
  a1[1] = result + v4 - (_QWORD)v5;
  a1[2] = a1[2] & 7 | (result + 8 * v6);
  return result;
}

llvm::APFloatBase *sub_22E78E4F8(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3)
{
  if (llvm::APFloatBase::PPCDoubleDouble(a1) == a2)
    MEMORY[0x23489F288](a1, a2, a3);
  else
    llvm::detail::IEEEFloat::IEEEFloat();
  return a1;
}

uint64_t sub_22E78E558(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = a2 + 320;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a2;
  *(_WORD *)(a1 + 24) = 1;
  *(_BYTE *)(a2 + 320) = 0;
  *(_DWORD *)(a2 + 664) = 0;
  v4 = *(unsigned int *)(a2 + 776);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)(a2 + 768);
    v6 = 56 * v4;
    do
    {
      if (*(char *)(v5 + v6 - 9) < 0)
        operator delete(*(void **)(v5 + v6 - 32));
      v6 -= 56;
    }
    while (v6);
  }
  *(_DWORD *)(a2 + 776) = 0;
  return a1;
}

uint64_t sub_22E78E5D4(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 128;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 256;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_22E78E698(_QWORD *a1, unsigned int a2)
{
  _QWORD *result;
  _QWORD *v4;
  uint64_t v5;
  int v6;

  if (a2 <= 4)
  {
    *a1 = 1;
LABEL_3:
    result = a1 + 1;
    v4 = a1 + 9;
    goto LABEL_4;
  }
  *(_DWORD *)a1 &= ~1u;
  v5 = a2;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * a2, 8);
  a1[1] = result;
  a1[2] = v5;
  v6 = *(_DWORD *)a1;
  *a1 = *(_DWORD *)a1 & 1;
  if ((v6 & 1) != 0)
    goto LABEL_3;
  v4 = &result[2 * v5];
  do
  {
LABEL_4:
    *result = -4096;
    result += 2;
  }
  while (result != v4);
  return result;
}

unsigned int *sub_22E78E718(unsigned int *result, unsigned int *a2)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int *v15;
  int *v16;
  __int128 v17;

  v2 = *a2;
  *a2 = *result & 0xFFFFFFFE | *a2 & 1;
  v3 = result[1];
  *result = v2 & 0xFFFFFFFE | *result & 1;
  result[1] = a2[1];
  a2[1] = v3;
  v4 = *a2;
  if ((*result & 1) != 0)
  {
    if ((v4 & 1) == 0)
    {
      v6 = a2;
      goto LABEL_7;
    }
    v9 = 0;
    while (1)
    {
      v10 = (int *)&result[v9];
      v11 = (int *)&a2[v9];
      v12 = *(_QWORD *)&result[v9 + 2];
      v13 = *(_QWORD *)&a2[v9 + 2];
      if (v12 == -4096 || v12 == -8192 || v13 == -4096 || v13 == -8192)
      {
        *((_QWORD *)v10 + 1) = v13;
        *((_QWORD *)v11 + 1) = v12;
        if ((v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v15 = (int *)&a2[v9];
          v16 = (int *)&result[v9];
          goto LABEL_22;
        }
        if ((v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v15 = (int *)&result[v9];
          v16 = (int *)&a2[v9];
LABEL_22:
          v15[4] = v16[4];
        }
      }
      else
      {
        v14 = result[v9 + 4];
        *((_QWORD *)v10 + 1) = v13;
        result[v9 + 4] = a2[v9 + 4];
        *((_QWORD *)v11 + 1) = v12;
        a2[v9 + 4] = v14;
      }
      v9 += 4;
      if (v9 == 16)
        return result;
    }
  }
  if ((v4 & 1) == 0)
  {
    v5 = *((_QWORD *)result + 1);
    *((_QWORD *)result + 1) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v5;
    LODWORD(v5) = result[4];
    result[4] = a2[4];
    a2[4] = v5;
    return result;
  }
  v4 = *result;
  v6 = result;
  result = a2;
LABEL_7:
  v7 = 0;
  v17 = *(_OWORD *)(v6 + 2);
  *v6 = v4 | 1;
  do
  {
    v8 = *(_QWORD *)&result[v7 + 2];
    *(_QWORD *)&v6[v7 + 2] = v8;
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000)
      v6[v7 + 4] = result[v7 + 4];
    v7 += 4;
  }
  while (v7 != 16);
  *result &= ~1u;
  *(_OWORD *)(result + 2) = v17;
  return result;
}

_QWORD *sub_22E78E898(_QWORD *a1, unsigned int a2)
{
  _QWORD *result;
  _QWORD *v4;
  uint64_t v5;
  int v6;

  if (a2 <= 4)
  {
    *a1 = 1;
LABEL_3:
    result = a1 + 1;
    v4 = a1 + 9;
    goto LABEL_4;
  }
  *(_DWORD *)a1 &= ~1u;
  v5 = a2;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * a2, 8);
  a1[1] = result;
  a1[2] = v5;
  v6 = *(_DWORD *)a1;
  *a1 = *(_DWORD *)a1 & 1;
  if ((v6 & 1) != 0)
    goto LABEL_3;
  v4 = &result[2 * v5];
  do
  {
LABEL_4:
    *result = -4096;
    result += 2;
  }
  while (result != v4);
  return result;
}

uint64_t sub_22E78E918(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    v5 = a2 + 16;
    v4 = *(uint64_t **)a2;
    if (*(_QWORD *)a2 == a2 + 16)
    {
      v7 = (_DWORD *)(a2 + 8);
      v8 = *(unsigned int *)(a2 + 8);
      v9 = *(unsigned int *)(a1 + 8);
      if (v9 >= v8)
      {
        if ((_DWORD)v8)
        {
          v11 = &v4[2 * v8];
          v12 = *(_QWORD **)a1;
          do
          {
            v13 = *v4;
            v14 = v4[1];
            v4 += 2;
            *v12 = v13;
            v12[1] = v14;
            v12 += 2;
          }
          while (v4 != v11);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) >= v8)
        {
          if ((_DWORD)v9)
          {
            v15 = &v4[2 * v9];
            v16 = *(_QWORD **)a1;
            do
            {
              v17 = *v4;
              v18 = v4[1];
              v4 += 2;
              *v16 = v17;
              v16[1] = v18;
              v16 += 2;
            }
            while (v4 != v15);
          }
          else
          {
            v9 = 0;
          }
          v10 = v8;
        }
        else
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v9 = 0;
          v10 = *v7;
        }
        if (v9 != v10)
          memcpy((void *)(*(_QWORD *)a1 + 16 * v9), (const void *)(*(_QWORD *)a2 + 16 * v9), *(_QWORD *)a2 + 16 * v10 - (*(_QWORD *)a2 + 16 * v9));
      }
      *(_DWORD *)(a1 + 8) = v8;
    }
    else
    {
      v6 = *(_QWORD **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(uint64_t **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
    }
    *v7 = 0;
  }
  return a1;
}

void *sub_22E78EA48(_DWORD *a1, unsigned int a2)
{
  void *v2;
  size_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _DWORD *v8;

  if (a2 > 4)
  {
    *a1 &= ~1u;
    v5 = a2;
    v7 = 4 * a2;
    v8 = a1;
    v2 = (void *)MEMORY[0x23489D23C](v7, 4);
    a1 = v8;
    *((_QWORD *)v8 + 1) = v2;
    *((_QWORD *)v8 + 2) = v5;
    v6 = *v8;
    *(_QWORD *)v8 = *v8 & 1;
    if ((v6 & 1) == 0)
    {
      v3 = v7;
      return memset(v2, 255, v3);
    }
  }
  else
  {
    *(_QWORD *)a1 = 1;
  }
  v2 = a1 + 2;
  v3 = 16;
  return memset(v2, 255, v3);
}

void sub_22E78EAD4(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  char *v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 16;
      do
      {
        v7 = (char *)*((_QWORD *)v6 - 2);
        if (v6 != v7)
          free(v7);
        v8 = v6 - 24;
        v6 -= 40;
      }
      while (v8 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_22E78EB54(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 24);
  sub_22E3CEB30(&v3);
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(16 * *(unsigned int *)(a1 + 16)));
  return a1;
}

uint64_t sub_22E78EBA0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v2)
  {
    v3 = sub_22E78EBA0();
    MEMORY[0x2348A0E9C](v3, 0x10A0C4014C39ADBLL);
  }
  v4 = *(void **)(a1 + 48);
  if (v4 != (void *)(a1 + 64))
    free(v4);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  return a1;
}

void sub_22E78EC0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(unsigned int *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v2 + 1;
  __asm { BR              X10 }
}

unint64_t sub_22E78EC7C()
{
  uint64_t v0;
  uint64_t v1;
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v0 + 8);
  v4 = sub_22E779F8C(v3, *(_QWORD *)(v0 + 16), v1, v2);
  return sub_22E77F870(v3, v4) & 0xFFFFFFFFFFFFFFF9;
}

uint64_t sub_22E78F00C(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  _QWORD v10[3];

  v4 = *(unsigned int *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v4 + 1;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v4);
  if (v5 > (unint64_t)a2[3])
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  for (; (_DWORD)v5; LODWORD(v5) = v5 - 1)
  {
    sub_22E7827DC(v10, a1);
    v6 = sub_22E4EF088((uint64_t)a2, (unint64_t)v10, 1);
    v7 = *(_QWORD *)a2 + 24 * a2[2];
    v8 = *(_OWORD *)v6;
    *(_QWORD *)(v7 + 16) = *(_QWORD *)(v6 + 16);
    *(_OWORD *)v7 = v8;
    ++a2[2];
  }
  return *(_QWORD *)a2;
}

uint64_t sub_22E78F0D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 32);
  v3 = (_DWORD *)(a1 + 24);
  v2 = *(unsigned int *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v2 + 1;
  if (*(_QWORD *)(v1 + 8 * v2))
  {
    v4 = *v3;
    *v3 = v4 + 1;
    __asm { BR              X12 }
  }
  return 0;
}

uint64_t sub_22E78F2B0(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  BOOL v9;
  int v10;
  uint64_t result;

  if (a2)
  {
    v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v5 = (_QWORD *)(a1 + 32 * v4);
    v6 = *v5;
    if (*v5 == a3)
    {
LABEL_11:
      result = 1;
    }
    else
    {
      v7 = 0;
      v8 = 1;
      while (v6 != -4096)
      {
        if (v7)
          v9 = 0;
        else
          v9 = v6 == -8192;
        if (v9)
          v7 = v5;
        v10 = v4 + v8++;
        v4 = v10 & (a2 - 1);
        v5 = (_QWORD *)(a1 + 32 * v4);
        v6 = *v5;
        if (*v5 == a3)
          goto LABEL_11;
      }
      result = 0;
      if (v7)
        v5 = v7;
    }
  }
  else
  {
    v5 = 0;
    result = 0;
  }
  *a4 = v5;
  return result;
}

_QWORD *sub_22E78F338(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](32 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22E78F3F8(a1, (uint64_t)v4, (uint64_t)v4 + 32 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(32 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        *result = -4096;
        result += 4;
        v11 -= 32;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22E78F3F8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  __int128 v11;
  _QWORD *v12;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 32 * v6;
    do
    {
      *v7 = -4096;
      v7 += 4;
      v8 -= 32;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = sub_22E78F2B0(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v12);
      v10 = v12;
      *v12 = *(_QWORD *)a2;
      v11 = *(_OWORD *)(a2 + 8);
      v10[3] = *(_QWORD *)(a2 + 24);
      *(_OWORD *)(v10 + 1) = v11;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 32;
  }
  return result;
}

double sub_22E78F4AC(uint64_t a1, int *a2)
{
  char v4;
  double result;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;

  v9 = 0;
  v4 = sub_22E78F598(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
  v6 = v9;
  if ((v4 & 1) != 0)
    return result;
  v7 = *(_DWORD *)(a1 + 8);
  v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
    goto LABEL_9;
  }
  if (v8 + ~v7 - *(_DWORD *)(a1 + 12) <= v8 >> 3)
  {
LABEL_9:
    sub_22E78F624(a1, v8);
    v9 = 0;
    sub_22E78F598(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
    v6 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(_DWORD *)v6 != -1)
    --*(_DWORD *)(a1 + 12);
  *(_DWORD *)v6 = *a2;
  *(_QWORD *)(v6 + 8) = v6 + 24;
  *(_QWORD *)&result = 0x100000000;
  *(_QWORD *)(v6 + 16) = 0x100000000;
  return result;
}

uint64_t sub_22E78F598(uint64_t a1, int a2, int a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _DWORD *v6;
  int v7;
  _DWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t result;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = (37 * a3) & (a2 - 1);
    v6 = (_DWORD *)(a1 + 40 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
LABEL_11:
      result = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -1)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -2;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_DWORD *)(a1 + 40 * (v11 & v4));
        v7 = *v6;
        if (*v6 == a3)
          goto LABEL_11;
      }
      result = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    result = 0;
  }
  *a4 = v6;
  return result;
}

_DWORD *sub_22E78F624(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 40 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22E78F6F0(a1, (uint64_t)v4, (uint64_t)v4 + 40 * v3);
    return (_DWORD *)llvm::deallocate_buffer(v4, (void *)(40 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 40 * v10;
      do
      {
        *result = -1;
        result += 10;
        v11 -= 40;
      }
      while (v11);
    }
  }
  return result;
}

void sub_22E78F6F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  _DWORD *v10;
  uint64_t v11;
  void *v12;
  _DWORD *v13;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_DWORD **)a1;
    v8 = 40 * v6;
    do
    {
      *v7 = -1;
      v7 += 10;
      v8 -= 40;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *(_DWORD *)v4;
      if (*(_DWORD *)v4 <= 0xFFFFFFFD)
      {
        v13 = 0;
        sub_22E78F598(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v13);
        v10 = v13;
        *v13 = *(_DWORD *)v4;
        *((_QWORD *)v10 + 2) = 0x100000000;
        *((_QWORD *)v10 + 1) = v10 + 6;
        v11 = (uint64_t)(v10 + 2);
        if (*(_DWORD *)(v4 + 16))
          sub_22E78F7E0(v11, (const void **)(v4 + 8));
        ++*(_DWORD *)(a1 + 8);
        v12 = *(void **)(v4 + 8);
        if ((void *)(v4 + 24) != v12)
          free(v12);
      }
      v4 += 40;
    }
    while (v4 != a3);
  }
}

uint64_t sub_22E78F7E0(uint64_t a1, const void **a2)
{
  const void *v3;
  const void **v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v11;
  const void **v12;
  uint64_t v13;
  const void **v14;
  const void **v15;

  if ((const void **)a1 != a2)
  {
    v4 = a2 + 2;
    v3 = *a2;
    if (*a2 != a2 + 2)
    {
      v11 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        v12 = a2;
        free(v11);
        a2 = v12;
        v3 = *v12;
      }
      *(_QWORD *)a1 = v3;
      v6 = a2 + 1;
      *(_QWORD *)(a1 + 8) = a2[1];
      *a2 = v4;
      *((_DWORD *)a2 + 3) = 0;
      goto LABEL_10;
    }
    v6 = a2 + 1;
    v5 = *((unsigned int *)a2 + 2);
    v7 = *(unsigned int *)(a1 + 8);
    if (v7 >= v5)
    {
      if ((_DWORD)v5)
        memmove(*(void **)a1, *a2, 16 * v5);
      goto LABEL_9;
    }
    if (*(_DWORD *)(a1 + 12) < v5)
    {
      *(_DWORD *)(a1 + 8) = 0;
      v14 = a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      a2 = v14;
    }
    else if ((_DWORD)v7)
    {
      v13 = *(unsigned int *)(a1 + 8);
      v15 = a2;
      memmove(*(void **)a1, v3, 16 * v7);
      v8 = v13;
      a2 = v15;
LABEL_7:
      v9 = *v6;
      if (v8 != v9)
        memcpy((void *)(*(_QWORD *)a1 + 16 * v8), (char *)*a2 + 16 * v8, (_BYTE *)*a2 + 16 * v9 - ((_BYTE *)*a2 + 16 * v8));
LABEL_9:
      *(_DWORD *)(a1 + 8) = v5;
LABEL_10:
      *v6 = 0;
      return a1;
    }
    v8 = 0;
    goto LABEL_7;
  }
  return a1;
}

void sub_22E78F91C(uint64_t **a1, uint64_t **a2, uint64_t *a3)
{
  int v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  size_t v10;
  int v11;
  unsigned __int8 *v12;
  size_t v13;
  void *v14;
  size_t v15;
  void *v16;
  signed __int8 v17;
  signed __int8 v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  signed __int8 v22;
  int v23;
  size_t v24;
  unsigned __int8 *v25;
  unint64_t v26;
  int v27;

  v6 = (*(uint64_t (**)(uint64_t *, void *))(**a2 + 48))(*a2, &unk_255E04EB4);
  v7 = *a2;
  *a2 = 0;
  if (!v6)
  {
    *a1 = v7;
    return;
  }
  v8 = *a3;
  sub_22E78D434((uint64_t)&v25, v7 + 2);
  v9 = v25;
  if (!v25)
  {
    v9 = (unsigned __int8 *)sub_22E3B8AAC(v26);
    v25 = v9;
  }
  v10 = 0;
  v11 = *v9;
  if (v11 == 1)
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
  }
  else
  {
    if (v11 == 2)
    {
      v16 = 0;
    }
    else
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      if (v11 != 3)
        goto LABEL_28;
      v17 = v9[167];
      if (v17 >= 0)
        v16 = v9 + 144;
      else
        v16 = (void *)*((_QWORD *)v9 + 18);
      if (v17 >= 0)
        v10 = v17 & 0x7F;
      else
        v10 = *((_QWORD *)v9 + 19);
    }
    v15 = v10;
    v18 = v9[143];
    if (v18 >= 0)
      v14 = v9 + 120;
    else
      v14 = (void *)*((_QWORD *)v9 + 15);
    if (v18 >= 0)
      v10 = v18 & 0x7F;
    else
      v10 = *((_QWORD *)v9 + 16);
  }
  v13 = v10;
  v21 = (unsigned __int8 *)*((_QWORD *)v9 + 12);
  v19 = v9 + 96;
  v20 = v21;
  v22 = v19[23];
  v23 = v22;
  if (v22 >= 0)
    v12 = v19;
  else
    v12 = v20;
  v24 = v22 & 0x7F;
  if (v23 >= 0)
    v10 = v24;
  else
    v10 = *((_QWORD *)v19 + 1);
LABEL_28:
  sub_22E769FA4(v8, v27, v12, v10, v14, v13, v16, v15);
  if (v25 && v26)
    sub_22E3BB10C(v26, (unint64_t)v25);
  *a1 = 0;
  if (v7)
    (*(void (**)(uint64_t *))(*v7 + 8))(v7);
}

uint64_t **sub_22E78FA94(uint64_t **a1, int a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v7 + 7) = *a3;
    *((_DWORD *)v7 + 8) = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    sub_22E49FD00(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

_DWORD *sub_22E78FB5C(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;
  llvm *v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  int v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_DWORD *)MEMORY[0x23489D23C](32 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        *result = 0;
        result += 8;
        v11 -= 32;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = v4;
      do
      {
        v13 = *(_DWORD *)v12;
        if ((*(_DWORD *)v12 + 1) >= 2)
        {
          v14 = *(_DWORD *)(a1 + 16);
          if (v14)
          {
            v15 = v14 - 1;
            v16 = (v14 - 1) & v13;
            v17 = *(_QWORD *)a1 + 32 * v16;
            v18 = *(_DWORD *)v17;
            if (v13 != *(_DWORD *)v17)
            {
              v19 = 0;
              v20 = 1;
              while (v18)
              {
                if (v19)
                  v21 = 0;
                else
                  v21 = v18 == -1;
                if (v21)
                  v19 = v17;
                v22 = v16 + v20++;
                v16 = v22 & v15;
                v17 = *(_QWORD *)a1 + 32 * v16;
                v18 = *(_DWORD *)v17;
                if (v13 == *(_DWORD *)v17)
                  goto LABEL_23;
              }
              if (v19)
                v17 = v19;
            }
          }
          else
          {
            v17 = 0;
          }
LABEL_23:
          *(_DWORD *)v17 = v13;
          v23 = *(_OWORD *)((char *)v12 + 8);
          *(_QWORD *)(v17 + 24) = *((_QWORD *)v12 + 3);
          *(_OWORD *)(v17 + 8) = v23;
          ++*(_DWORD *)(a1 + 8);
        }
        v12 = (llvm *)((char *)v12 + 32);
      }
      while (v12 != (llvm *)((char *)v4 + 32 * v3));
    }
    return (_DWORD *)llvm::deallocate_buffer(v4, (void *)(32 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v24 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v24)
    {
      v25 = 32 * v24;
      do
      {
        *result = 0;
        result += 8;
        v25 -= 32;
      }
      while (v25);
    }
  }
  return result;
}

uint64_t sub_22E78FCDC(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v12;
  uint64_t v13;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v12 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v12);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_10;
    }
    v7 = (_DWORD *)(a2 + 8);
    v6 = *(unsigned int *)(a2 + 8);
    v8 = *(unsigned int *)(a1 + 8);
    if (v8 >= v6)
    {
      if ((_DWORD)v6)
        memmove(*(void **)a1, v4, 4 * v6);
      goto LABEL_9;
    }
    if (*(_DWORD *)(a1 + 12) < v6)
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    else if ((_DWORD)v8)
    {
      v13 = *(unsigned int *)(a1 + 8);
      memmove(*(void **)a1, v4, 4 * v8);
      v9 = v13;
LABEL_7:
      v10 = *v7;
      if (v9 != v10)
        memcpy((void *)(*(_QWORD *)a1 + 4 * v9), (const void *)(*(_QWORD *)a2 + 4 * v9), *(_QWORD *)a2 + 4 * v10 - (*(_QWORD *)a2 + 4 * v9));
LABEL_9:
      *(_DWORD *)(a1 + 8) = v6;
LABEL_10:
      *v7 = 0;
      return a1;
    }
    v9 = 0;
    goto LABEL_7;
  }
  return a1;
}

void sub_22E78FE00(std::string *this, std::string::value_type *a2, std::string::value_type *a3, std::string::size_type a4)
{
  std::string *v8;
  std::string::size_type size;
  std::string::size_type v10;
  unint64_t v11;
  unint64_t v12;
  std::string::value_type v13;

  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v8 = this;
    if (a4 <= 0x16)
      goto LABEL_11;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v10 = 22;
    goto LABEL_6;
  }
  v11 = this->__r_.__value_.__r.__words[2];
  v10 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v10 < a4)
  {
    size = this->__r_.__value_.__l.__size_;
LABEL_6:
    std::string::__grow_by(this, v10, a4 - v10, size, 0, size, 0);
    this->__r_.__value_.__l.__size_ = 0;
    LOBYTE(v12) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    goto LABEL_8;
  }
  v12 = HIBYTE(v11);
LABEL_8:
  v8 = this;
  if ((v12 & 0x80) != 0)
    v8 = (std::string *)this->__r_.__value_.__r.__words[0];
LABEL_11:
  while (a2 != a3)
  {
    v13 = *a2++;
    v8->__r_.__value_.__s.__data_[0] = v13;
    v8 = (std::string *)((char *)v8 + 1);
  }
  v8->__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    this->__r_.__value_.__l.__size_ = a4;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = a4 & 0x7F;
}

void sub_22E78FECC(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v4 = *a1;
    v5 = *a1 + 352 * v2;
    v6 = a2 + 64;
    v7 = v4 + 64;
    do
    {
      v8 = *(_OWORD *)(v7 - 64);
      v9 = *(_OWORD *)(v7 - 48);
      *(_QWORD *)(v6 - 32) = *(_QWORD *)(v7 - 32);
      *(_OWORD *)(v6 - 64) = v8;
      *(_OWORD *)(v6 - 48) = v9;
      *(_DWORD *)(v6 - 28) = *(_DWORD *)(v7 - 28);
      *(_QWORD *)(v6 - 16) = 0;
      *(_QWORD *)(v6 - 8) = 0;
      *(_QWORD *)(v6 - 24) = 0;
      *(_OWORD *)(v6 - 24) = *(_OWORD *)(v7 - 24);
      *(_QWORD *)(v6 - 8) = *(_QWORD *)(v7 - 8);
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_QWORD *)v6 = v6 + 16;
      *(_QWORD *)(v6 + 8) = 0x800000000;
      if (*(_DWORD *)(v7 + 8))
        v6 = sub_22E78D1A4(v6, v7);
      v10 = v7 - 64;
      *(_OWORD *)(v6 + 272) = *(_OWORD *)(v7 + 272);
      v6 += 352;
      v7 += 352;
    }
    while (v10 + 352 != v5);
    v11 = *((_DWORD *)a1 + 2);
    if (v11)
    {
      v12 = *a1;
      v13 = 352 * v11;
      do
      {
        sub_22E746F74((char **)(v12 + v13 - 288));
        v14 = (void **)(v12 + v13 - 312);
        if (*v14)
        {
          sub_22E3B485C((uint64_t *)(v12 + v13 - 312));
          operator delete(*v14);
        }
        v13 -= 352;
      }
      while (v13);
    }
  }
}

uint64_t sub_22E78FFDC(uint64_t a1, int a2, int a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _DWORD *v6;
  int v7;
  _DWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = (37 * a3) & (a2 - 1);
    v6 = (_DWORD *)(a1 + 56 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v12 = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -1)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -2;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_DWORD *)(a1 + 56 * (v11 & v4));
        v7 = *v6;
        v12 = 1;
        if (*v6 == a3)
          goto LABEL_14;
      }
      v12 = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    v12 = 0;
  }
LABEL_14:
  *a4 = v6;
  return v12;
}

_DWORD *sub_22E790074(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 56 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    v10 = 56 * v3;
    sub_22E790140(a1, (uint64_t)v4, (uint64_t)v4 + v10);
    return (_DWORD *)llvm::deallocate_buffer(v4, (void *)v10);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      v12 = 56 * v11;
      do
      {
        *result = -1;
        result += 14;
        v12 -= 56;
      }
      while (v12);
    }
  }
  return result;
}

void sub_22E790140(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  _DWORD *v10;
  uint64_t v11;
  void *v12;
  _DWORD *v13;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_DWORD **)a1;
    v8 = 56 * v6;
    do
    {
      *v7 = -1;
      v7 += 14;
      v8 -= 56;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *(_DWORD *)v4;
      if (*(_DWORD *)v4 <= 0xFFFFFFFD)
      {
        v13 = 0;
        sub_22E78FFDC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v13);
        v10 = v13;
        *v13 = *(_DWORD *)v4;
        *((_QWORD *)v10 + 2) = 0x200000000;
        *((_QWORD *)v10 + 1) = v10 + 6;
        v11 = (uint64_t)(v10 + 2);
        if (*(_DWORD *)(v4 + 16))
          sub_22E78E918(v11, v4 + 8);
        ++*(_DWORD *)(a1 + 8);
        v12 = *(void **)(v4 + 8);
        if ((void *)(v4 + 24) != v12)
          free(v12);
      }
      v4 += 56;
    }
    while (v4 != a3);
  }
}

_QWORD *sub_22E79022C(_QWORD *a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  int *v8;
  uint64_t i;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  int v14[4];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v8 = v14;
    for (i = 8; i != 24; i += 4)
    {
      v10 = *(_DWORD *)((char *)a1 + i);
      if (v10 <= 0xFFFFFFFD)
        *v8++ = v10;
    }
    if (a2 > 4)
    {
      *(_DWORD *)a1 &= ~1u;
      v11 = a2;
      a1[1] = MEMORY[0x23489D23C](4 * a2, 4);
      a1[2] = v11;
    }
    return sub_22E790394(a1, v14, v8);
  }
  else
  {
    v6 = (int *)a1[1];
    v7 = *((unsigned int *)a1 + 4);
    if (a2 > 4)
    {
      v13 = a2;
      a1[1] = MEMORY[0x23489D23C](4 * a2, 4);
      a1[2] = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_22E790394(a1, v6, &v6[v7]);
    return (_QWORD *)llvm::deallocate_buffer((llvm *)v6, (void *)(4 * v7));
  }
}

_QWORD *sub_22E790394(_QWORD *result, int *a2, int *a3)
{
  _QWORD *v5;
  int v6;
  char *v7;
  uint64_t v8;
  void *v9;
  size_t v10;
  int v11;
  int v12;
  char *v13;
  int v14;
  unsigned int v15;
  char *v16;
  int v17;
  char *v18;
  int v19;
  BOOL v20;
  unsigned int v21;

  v5 = result;
  v6 = *(_DWORD *)result;
  *result = *(_DWORD *)result & 1;
  v7 = (char *)(result + 1);
  if ((v6 & 1) != 0)
  {
    v10 = 16;
    v9 = result + 1;
  }
  else
  {
    v8 = *((unsigned int *)result + 4);
    if (!(_DWORD)v8)
      goto LABEL_5;
    v9 = (void *)result[1];
    v10 = 4 * v8;
  }
  result = memset(v9, 255, v10);
LABEL_5:
  while (a2 != a3)
  {
    v11 = *a2;
    if (*a2 <= 0xFFFFFFFD)
    {
      if ((*(_BYTE *)v5 & 1) != 0)
      {
        v12 = 4;
        v13 = v7;
      }
      else
      {
        v13 = (char *)v5[1];
        v12 = *((_DWORD *)v5 + 4);
      }
      v14 = v12 - 1;
      v15 = (v12 - 1) & (37 * v11);
      v16 = &v13[4 * v15];
      v17 = *(_DWORD *)v16;
      if (v11 != *(_DWORD *)v16)
      {
        v18 = 0;
        v19 = 1;
        while (v17 != -1)
        {
          if (v18)
            v20 = 0;
          else
            v20 = v17 == -2;
          if (v20)
            v18 = v16;
          v21 = v15 + v19++;
          v15 = v21 & v14;
          v16 = &v13[4 * (v21 & v14)];
          v17 = *(_DWORD *)v16;
          if (v11 == *(_DWORD *)v16)
            goto LABEL_21;
        }
        if (v18)
          v16 = v18;
      }
LABEL_21:
      *(_DWORD *)v16 = v11;
      *(_DWORD *)v5 += 2;
    }
    ++a2;
  }
  return result;
}

unsigned int ***sub_22E7904B0(unsigned int ***a1)
{
  unsigned int **v2;
  unsigned int *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int **v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int *i;
  int v20;

  v2 = *a1;
  v3 = **a1;
  v4 = *((unsigned int *)v2 + 2);
  v5 = 126 - 2 * __clz(v4);
  if ((_DWORD)v4)
    v6 = v5;
  else
    v6 = 0;
  sub_22E79058C(v3, &v3[2 * v4], v6, 1);
  v7 = *a1;
  v8 = **a1;
  v9 = *((unsigned int *)*a1 + 2);
  if ((_DWORD)v9)
  {
    v10 = &v8[2 * v9];
    v11 = 8 * v9 - 8;
    v12 = (int *)(v8 + 3);
    while (v11)
    {
      v14 = *(v12 - 2);
      v13 = *(v12 - 1);
      v15 = *(v12 - 3);
      v17 = *v12;
      v12 += 2;
      v16 = v17;
      v11 -= 8;
      if (v15 == v13 && v14 == v16)
      {
        for (i = v12 - 5; v11; v11 -= 8)
        {
          v20 = v15;
          v15 = *(v12 - 1);
          if (v20 != v15 || i[1] != *v12)
          {
            i[2] = v15;
            i += 2;
            i[1] = *v12;
          }
          v12 += 2;
        }
        v10 = (unsigned int *)(i + 2);
        break;
      }
    }
  }
  else
  {
    v10 = **a1;
  }
  *((_DWORD *)v7 + 2) = (unint64_t)((char *)v10 - (char *)v8) >> 3;
  return a1;
}

unsigned int *sub_22E79058C(unsigned int *result, unsigned int *a2, uint64_t a3, char a4)
{
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int *v40;
  BOOL v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  char *v50;
  int v51;
  unsigned int *v52;
  int64_t v53;
  int64_t v54;
  int64_t v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int *v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int *v68;
  unsigned int *v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  unint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int *v79;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int *v85;
  unsigned int *v86;
  unsigned int v87;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 3;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v37 = *(a2 - 2);
        v38 = *v8;
        if (v37 < *v8)
        {
          *v8 = v37;
          *(a2 - 2) = v38;
          v39 = v8[1];
          v8[1] = *(a2 - 1);
          *(a2 - 1) = v39;
        }
        return result;
      case 3:
        return sub_22E790C54(v8, v8 + 2, a2 - 2);
      case 4:
        return sub_22E790E84(v8, v8 + 2, v8 + 4, a2 - 2);
      case 5:
        return sub_22E790F30(v8, v8 + 2, v8 + 4, v8 + 6, a2 - 2);
      default:
        if (v9 <= 191)
        {
          v40 = v8 + 2;
          v42 = v8 == a2 || v40 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v42)
            {
              v43 = 0;
              v44 = v8;
              do
              {
                v45 = v44[2];
                v46 = *v44;
                v44 = v40;
                if (v45 < v46)
                {
                  v48 = *v40;
                  v47 = v40[1];
                  v49 = v43;
                  while (1)
                  {
                    v50 = (char *)v8 + v49;
                    v51 = *(unsigned int *)((char *)v8 + v49 + 4);
                    *((_DWORD *)v50 + 2) = v46;
                    *((_DWORD *)v50 + 3) = v51;
                    if (!v49)
                      break;
                    v46 = *((_DWORD *)v50 - 2);
                    v49 -= 8;
                    if (v46 <= v48)
                    {
                      v52 = (unsigned int *)((char *)v8 + v49 + 8);
                      goto LABEL_75;
                    }
                  }
                  v52 = v8;
LABEL_75:
                  *v52 = v48;
                  v52[1] = v47;
                }
                v40 = v44 + 2;
                v43 += 8;
              }
              while (v44 + 2 != a2);
            }
          }
          else if (!v42)
          {
            v81 = v8 + 3;
            do
            {
              v82 = v7[2];
              v83 = *v7;
              v7 = v40;
              if (v82 < v83)
              {
                v84 = *(_QWORD *)v40;
                v85 = v81;
                do
                {
                  v86 = v85;
                  *(v85 - 1) = v83;
                  v87 = *(v85 - 2);
                  v85 -= 2;
                  *v86 = v87;
                  v83 = *(v86 - 5);
                }
                while (v83 > v84);
                *(_QWORD *)(v85 - 1) = v84;
              }
              v40 = v7 + 2;
              v81 += 2;
            }
            while (v7 + 2 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v53 = (unint64_t)(v10 - 2) >> 1;
            v54 = v53;
            do
            {
              v55 = v54;
              if (v53 >= v54)
              {
                v56 = (2 * v54) | 1;
                v57 = &v8[2 * v56];
                if (2 * v55 + 2 >= v10)
                {
                  v58 = *v57;
                }
                else
                {
                  v58 = *v57;
                  v59 = v57[2];
                  if (*v57 <= v59)
                    v58 = v57[2];
                  if (*v57 < v59)
                  {
                    v57 += 2;
                    v56 = 2 * v55 + 2;
                  }
                }
                v60 = &v8[2 * v55];
                if (v58 >= *v60)
                {
                  v61 = *v60;
                  v62 = v60[1];
                  do
                  {
                    v63 = v60;
                    v60 = v57;
                    *v63 = v58;
                    v63[1] = v57[1];
                    if (v53 < v56)
                      break;
                    v64 = (2 * v56) | 1;
                    v57 = &v8[2 * v64];
                    v56 = 2 * v56 + 2;
                    if (v56 >= v10)
                    {
                      v58 = *v57;
                      v56 = v64;
                    }
                    else
                    {
                      v58 = *v57;
                      result = v57 + 2;
                      v65 = v57[2];
                      if (*v57 <= v65)
                        v58 = v57[2];
                      if (*v57 >= v65)
                        v56 = v64;
                      else
                        v57 += 2;
                    }
                  }
                  while (v58 >= v61);
                  *v60 = v61;
                  v60[1] = v62;
                }
              }
              v54 = v55 - 1;
            }
            while (v55);
            do
            {
              v66 = 0;
              v67 = *(_QWORD *)v8;
              v68 = v8;
              do
              {
                v69 = &v68[2 * v66 + 2];
                v70 = (2 * v66) | 1;
                v66 = 2 * v66 + 2;
                if (v66 >= v10)
                {
                  v71 = *v69;
                  v66 = v70;
                }
                else
                {
                  v71 = *v69;
                  v72 = v69[2];
                  if (*v69 <= v72)
                    v71 = v69[2];
                  if (*v69 >= v72)
                    v66 = v70;
                  else
                    v69 += 2;
                }
                *v68 = v71;
                v68[1] = v69[1];
                v68 = v69;
              }
              while (v66 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              if (v69 == a2 - 2)
              {
                *(_QWORD *)v69 = v67;
              }
              else
              {
                *v69 = *(a2 - 2);
                v69[1] = *(a2 - 1);
                *((_QWORD *)a2 - 1) = v67;
                v73 = (char *)v69 - (char *)v8 + 8;
                if (v73 >= 9)
                {
                  v74 = (((unint64_t)v73 >> 3) - 2) >> 1;
                  v75 = &v8[2 * v74];
                  v76 = *v75;
                  if (*v75 < *v69)
                  {
                    v77 = *v69;
                    v78 = v69[1];
                    do
                    {
                      v79 = v69;
                      v69 = v75;
                      *v79 = v76;
                      v79[1] = v75[1];
                      if (!v74)
                        break;
                      v74 = (v74 - 1) >> 1;
                      v75 = &v8[2 * v74];
                      v76 = *v75;
                    }
                    while (*v75 < v77);
                    *v69 = v77;
                    v69[1] = v78;
                  }
                }
              }
              a2 -= 2;
            }
            while (v10-- > 2);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[2 * ((unint64_t)v10 >> 1)];
        if ((unint64_t)v9 < 0x401)
        {
          result = sub_22E790C54(&v7[2 * ((unint64_t)v10 >> 1)], v7, a2 - 2);
        }
        else
        {
          sub_22E790C54(v7, &v7[2 * ((unint64_t)v10 >> 1)], a2 - 2);
          sub_22E790C54(v7 + 2, v12 - 2, a2 - 4);
          sub_22E790C54(v7 + 4, &v7[2 * v11 + 2], a2 - 6);
          result = sub_22E790C54(v12 - 2, v12, &v7[2 * v11 + 2]);
          v13 = *(_QWORD *)v7;
          *(_QWORD *)v7 = *(_QWORD *)v12;
          *(_QWORD *)v12 = v13;
        }
        --a3;
        if ((a4 & 1) == 0 && *(v7 - 2) >= *v7)
        {
          v27 = *(_QWORD *)v7;
          if (*(a2 - 2) <= *(_QWORD *)v7)
          {
            v29 = v7 + 2;
            do
            {
              v8 = v29;
              if (v29 >= a2)
                break;
              v29 += 2;
            }
            while (*v8 <= v27);
          }
          else
          {
            v8 = v7;
            do
            {
              v28 = v8[2];
              v8 += 2;
            }
            while (v28 <= v27);
          }
          v30 = a2;
          if (v8 < a2)
          {
            v30 = a2;
            do
            {
              v31 = *(v30 - 2);
              v30 -= 2;
            }
            while (v31 > v27);
          }
          if (v8 < v30)
          {
            v32 = *v8;
            v33 = *v30;
            do
            {
              *v8 = v33;
              *v30 = v32;
              v34 = v8[1];
              v8[1] = v30[1];
              v30[1] = v34;
              do
              {
                v35 = v8[2];
                v8 += 2;
                v32 = v35;
              }
              while (v35 <= v27);
              do
              {
                v36 = *(v30 - 2);
                v30 -= 2;
                v33 = v36;
              }
              while (v36 > v27);
            }
            while (v8 < v30);
          }
          if (v8 - 2 != v7)
          {
            *v7 = *(v8 - 2);
            v7[1] = *(v8 - 1);
          }
          a4 = 0;
          *((_QWORD *)v8 - 1) = v27;
          continue;
        }
        v14 = 0;
        v15 = *(_QWORD *)v7;
        do
        {
          v16 = v7[v14 + 2];
          v14 += 2;
        }
        while (v16 < v15);
        v17 = &v7[v14];
        v18 = a2;
        if (v14 == 2)
        {
          v18 = a2;
          do
          {
            if (v17 >= v18)
              break;
            v20 = *(v18 - 2);
            v18 -= 2;
          }
          while (v20 >= v15);
        }
        else
        {
          do
          {
            v19 = *(v18 - 2);
            v18 -= 2;
          }
          while (v19 >= v15);
        }
        if (v17 >= v18)
        {
          v8 = &v7[v14];
        }
        else
        {
          v21 = *v18;
          v8 = &v7[v14];
          v22 = v18;
          do
          {
            *v8 = v21;
            *v22 = v16;
            v23 = v8[1];
            v8[1] = v22[1];
            v22[1] = v23;
            do
            {
              v24 = v8[2];
              v8 += 2;
              v16 = v24;
            }
            while (v24 < v15);
            do
            {
              v25 = *(v22 - 2);
              v22 -= 2;
              v21 = v25;
            }
            while (v25 >= v15);
          }
          while (v8 < v22);
        }
        if (v8 - 2 != v7)
        {
          *v7 = *(v8 - 2);
          v7[1] = *(v8 - 1);
        }
        *((_QWORD *)v8 - 1) = v15;
        if (v17 < v18)
        {
LABEL_32:
          result = (unsigned int *)sub_22E79058C(v7, v8 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v26 = sub_22E790D0C(v7, v8 - 2);
        result = (unsigned int *)sub_22E790D0C(v8, a2);
        if (!(_DWORD)result)
        {
          if (v26)
            continue;
          goto LABEL_32;
        }
        a2 = v8 - 2;
        if (!v26)
          goto LABEL_2;
        return result;
    }
  }
}

unsigned int *sub_22E790C54(unsigned int *result, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v3 = *a2;
  v4 = *result;
  v5 = *a3;
  if (*a2 < *result)
  {
    if (v5 >= v3)
    {
      *result = v3;
      *a2 = v4;
      v10 = result[1];
      result[1] = a2[1];
      a2[1] = v10;
      v11 = *a2;
      if (*a3 >= *a2)
        return result;
      *a2 = *a3;
      *a3 = v11;
      v6 = a3 + 1;
      result = a2 + 1;
    }
    else
    {
      *result++ = v5;
      *a3 = v4;
      v6 = a3 + 1;
    }
    v7 = v6;
    goto LABEL_10;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    v7 = a2 + 1;
    v8 = a2[1];
    a2[1] = a3[1];
    a3[1] = v8;
    v9 = *result;
    if (*a2 < *result)
    {
      *result++ = *a2;
      *a2 = v9;
LABEL_10:
      v12 = *result;
      *result = *v7;
      *v7 = v12;
    }
  }
  return result;
}

BOOL sub_22E790D0C(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  unsigned int *v19;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 2);
      v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - 2) = v7;
        v8 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      sub_22E790C54(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_22E790E84(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_22E790F30(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v9 = a1 + 4;
      sub_22E790C54(a1, a1 + 2, a1 + 4);
      v10 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *v9;
    if (*v10 < *v9)
    {
      v15 = *v10;
      v14 = v10[1];
      v16 = v11;
      while (1)
      {
        v17 = (unsigned int *)((char *)a1 + v16);
        v18 = *(unsigned int *)((char *)a1 + v16 + 20);
        v17[6] = v13;
        v17[7] = v18;
        if (v16 == -16)
          break;
        v13 = v17[2];
        v16 -= 8;
        if (v13 <= v15)
        {
          v19 = (unsigned int *)((char *)a1 + v16 + 24);
          goto LABEL_12;
        }
      }
      v19 = a1;
LABEL_12:
      *v19 = v15;
      v19[1] = v14;
      if (++v12 == 8)
        return v10 + 2 == a2;
    }
    v9 = v10;
    v11 += 8;
    v10 += 2;
    if (v10 == a2)
      return 1;
  }
}

unsigned int *sub_22E790E84(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int *result;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;

  result = sub_22E790C54(a1, a2, a3);
  v9 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = a3[1];
    a3[1] = a4[1];
    a4[1] = v10;
    v11 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v11;
      v12 = a2[1];
      a2[1] = a3[1];
      a3[1] = v12;
      v13 = *a1;
      if (*a2 < *a1)
      {
        *a1 = *a2;
        *a2 = v13;
        v14 = a1[1];
        a1[1] = a2[1];
        a2[1] = v14;
      }
    }
  }
  return result;
}

unsigned int *sub_22E790F30(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  unsigned int *result;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;

  result = sub_22E790E84(a1, a2, a3, a4);
  v11 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v11;
    v12 = a4[1];
    a4[1] = a5[1];
    a5[1] = v12;
    v13 = *a3;
    if (*a4 < *a3)
    {
      *a3 = *a4;
      *a4 = v13;
      v14 = a3[1];
      a3[1] = a4[1];
      a4[1] = v14;
      v15 = *a2;
      if (*a3 < *a2)
      {
        *a2 = *a3;
        *a3 = v15;
        v16 = a2[1];
        a2[1] = a3[1];
        a3[1] = v16;
        v17 = *a1;
        if (*a2 < *a1)
        {
          *a1 = *a2;
          *a2 = v17;
          v18 = a1[1];
          a1[1] = a2[1];
          a2[1] = v18;
        }
      }
    }
  }
  return result;
}

_QWORD *sub_22E791010(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F2BC384(a1, (uint64_t)v4, (uint64_t)v4 + 16 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -1;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

unint64_t sub_22E7910D0(unint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  int64x2_t v17;
  unint64_t v18;
  uint64_t v20;
  int64x2_t v21;
  char *v22;
  unint64_t *v23;

  v2 = *a1;
  v3 = a1[1];
  v4 = (uint64_t)(v3 - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    abort();
  v8 = a1[2] - v2;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v23 = a1 + 2;
  if (v9)
  {
    if (v9 >> 59)
      sub_22E3B3F8C();
    v10 = (char *)operator new(32 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[32 * v4];
  v12 = &v10[32 * v9];
  v22 = v12;
  *(_QWORD *)v11 = *(_QWORD *)a2;
  v13 = v11 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_22E3BB2B4(v13, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
    v2 = *a1;
    v3 = a1[1];
  }
  else
  {
    *(_OWORD *)v13 = *(_OWORD *)(a2 + 8);
    *((_QWORD *)v11 + 3) = *(_QWORD *)(a2 + 24);
  }
  v14 = (unint64_t)(v11 + 32);
  v21.i64[1] = (uint64_t)(v11 + 32);
  if (v3 == v2)
  {
    v17 = vdupq_n_s64(v2);
  }
  else
  {
    do
    {
      v15 = *(_QWORD *)(v3 - 32);
      v3 -= 32;
      *((_QWORD *)v11 - 4) = v15;
      v11 -= 32;
      v16 = *(_OWORD *)(v3 + 8);
      *((_QWORD *)v11 + 3) = *(_QWORD *)(v3 + 24);
      *(_OWORD *)(v11 + 8) = v16;
      *(_QWORD *)(v3 + 16) = 0;
      *(_QWORD *)(v3 + 24) = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    while (v3 != v2);
    v17 = *(int64x2_t *)a1;
    v14 = v21.u64[1];
    v12 = v22;
  }
  *a1 = (unint64_t)v11;
  a1[1] = v14;
  v21 = v17;
  v18 = a1[2];
  a1[2] = (unint64_t)v12;
  v22 = (char *)v18;
  v20 = v17.i64[0];
  sub_22E74C15C((uint64_t)&v20);
  return v14;
}

char **sub_22E791220(char **result)
{
  char **v1;
  char **i;
  char *v3;

  v1 = result;
  v3 = *result;
  for (i = (char **)result[1]; i != (char **)v3; result = sub_22E5762C8(i))
  {
    if (*((char *)i - 1) < 0)
      operator delete(*(i - 3));
    i -= 13;
  }
  v1[1] = v3;
  return result;
}

void sub_22E791274(__int128 **a1, uint64_t a2)
{
  uint64_t v2;
  __int128 *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;

  v2 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v2)
  {
    v3 = *a1;
    v4 = (uint64_t)&(*a1)[2 * v2];
    do
    {
      v5 = *v3;
      *(_QWORD *)(a2 + 16) = *((_QWORD *)v3 + 2);
      *(_OWORD *)a2 = v5;
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
      *(_QWORD *)v3 = 0;
      *(_BYTE *)(a2 + 24) = *((_BYTE *)v3 + 24);
      v3 += 2;
      a2 += 32;
    }
    while (v3 != (__int128 *)v4);
    v6 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v6)
    {
      v7 = *a1;
      v8 = 2 * v6;
      do
      {
        if (SBYTE7(v7[v8 - 1]) < 0)
          operator delete(*(void **)&v7[v8 - 2]);
        v8 -= 2;
      }
      while (v8 * 16);
    }
  }
}

uint64_t sub_22E7912F8(int64x2_t *a1, uint64_t a2, char a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  _QWORD *v11;
  char v12;
  BOOL v13;
  const void *v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  int64x2_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v29;
  int64x2_t v30;
  char *v31;
  int64x2_t *v32;

  v3 = (a1->i64[1] - a1->i64[0]) >> 5;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59)
    goto LABEL_30;
  v8 = a1[1].i64[0] - a1->i64[0];
  if (v8 >> 4 > v4)
    v4 = v8 >> 4;
  v9 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0 ? 0x7FFFFFFFFFFFFFFLL : v4;
  v32 = a1 + 1;
  if (v9)
  {
    if (v9 >> 59)
      sub_22E3B3F8C();
    v10 = operator new(32 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[32 * v3];
  v30.i64[0] = (uint64_t)v11;
  v30.i64[1] = (uint64_t)v11;
  v31 = &v10[32 * v9];
  v12 = *(_BYTE *)(a2 + 23);
  v13 = v12 < 0;
  v14 = v12 >= 0 ? (const void *)a2 : *(const void **)a2;
  v15 = v12 & 0x7F;
  v16 = v13 ? *(_QWORD *)(a2 + 8) : v15;
  if (v16 >= 0x7FFFFFFFFFFFFFF8)
LABEL_30:
    abort();
  if (v16 >= 0x17)
  {
    v17 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v17 = v16 | 7;
    v18 = v17 + 1;
    v19 = operator new(v17 + 1);
    v11[1] = v16;
    v11[2] = v18 | 0x8000000000000000;
    *v11 = v19;
    v11 = v19;
    goto LABEL_24;
  }
  *((_BYTE *)v11 + 23) = v16;
  if (v16)
LABEL_24:
    memmove(v11, v14, v16);
  *((_BYTE *)v11 + v16) = 0;
  v10[32 * v3 + 24] = a3;
  v21 = a1->i64[0];
  v20 = a1->u64[1];
  v22 = v30.i64[1];
  v23 = v30.i64[0];
  if (v20 == a1->i64[0])
  {
    v25 = vdupq_n_s64(v20);
  }
  else
  {
    do
    {
      v24 = *(_OWORD *)(v20 - 32);
      *(_QWORD *)(v23 - 16) = *(_QWORD *)(v20 - 16);
      *(_OWORD *)(v23 - 32) = v24;
      *(_QWORD *)(v20 - 24) = 0;
      *(_QWORD *)(v20 - 16) = 0;
      *(_QWORD *)(v20 - 32) = 0;
      *(_BYTE *)(v23 - 8) = *(_BYTE *)(v20 - 8);
      v23 -= 32;
      v20 -= 32;
    }
    while (v20 != v21);
    v25 = *a1;
  }
  v26 = v22 + 32;
  a1->i64[0] = v23;
  a1->i64[1] = v22 + 32;
  v30 = v25;
  v27 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v31;
  v31 = v27;
  v29 = v25.i64[0];
  sub_22E3B3F98((uint64_t)&v29);
  return v26;
}

uint64_t sub_22E7914BC(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned __int16 *v12;
  char *v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  char *v20;
  void *v21;
  char *v22;
  size_t v23;
  size_t v24;
  void **v25;
  void **v26;
  char *v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  __int128 v32;
  uint64_t v33;
  uint64_t *v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned int *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char **p_dst;
  void *v48;
  char **v49;
  size_t v50;
  uint64_t v51;
  int v52;
  int v53;
  __int16 v54;
  _QWORD *v55;
  uint64_t *v56;
  uint64_t v57;
  const char *v58;
  size_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  size_t __sz;
  uint64_t *v65;
  uint64_t *v66;
  void *v67[2];
  void *__s2;
  __int128 __p;
  uint64_t v70;
  uint64_t v71;
  void *v72[2];
  char *v73;
  __int128 v74;
  uint64_t v75;
  char *__dst;
  size_t v77;
  int64_t v78;
  _BYTE v79[32];
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD **v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD v89[6];

  v89[3] = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a2 + 2600);
  if (!v2)
    return 0;
  v4 = *a1;
  v67[0] = *(void **)(*a1 + 24);
  v5 = *(_BYTE *)(v2[4] + 209) ? *(void **)(v4 + 32) : 0;
  v67[1] = v5;
  v6 = *(_QWORD *)(v4 + 88);
  do
  {
    v7 = (uint64_t *)v6;
    v8 = *(_QWORD *)(v6 + 8);
    if ((v8 & 2) == 0)
      break;
    v6 = v8 & 0xFFFFFFFFFFFFFFFCLL;
  }
  while (v6);
  v9 = *v7;
  __s2 = v7 + 4;
  *(_QWORD *)&__p = v9;
  BYTE8(__p) = 0;
  v10 = sub_22E76C1A4((uint64_t *)v67, (uint64_t *)&v67[1]);
  v11 = *(unsigned int *)(v2[1] + 4 * ((*(_DWORD *)v2 - 1) & v10));
  if (!(_DWORD)v11)
    return 0;
  v62 = a1;
  v66 = v2;
  v12 = (unsigned __int16 *)(v2[2] + v11);
  v15 = *v12;
  v13 = (char *)(v12 + 1);
  v14 = v15;
  __dst = v13;
  if (!v15)
    return 0;
  v65 = v2 + 3;
  while (1)
  {
    v16 = *(_DWORD *)v13;
    __dst = v13 + 4;
    v17 = sub_22E78CDE0((uint64_t *)&__dst);
    v18 = sub_22E78CDE0((uint64_t *)&__dst);
    v19 = v18 + v17;
    if (v16 != v10)
    {
      v13 = &__dst[v19];
      goto LABEL_23;
    }
    v20 = __dst;
    v21 = (void *)*((_QWORD *)__dst + 1);
    v22 = __dst + 16;
    v72[0] = *(void **)__dst;
    v72[1] = v21;
    v23 = strlen(__dst + 16);
    v73 = __dst + 16;
    *(_QWORD *)&v74 = v23;
    BYTE8(v74) = 1;
    if (v72[0] == v67[0])
    {
      v24 = v23;
      if (!v21 || !v67[1] || v21 == v67[1])
      {
        LOWORD(v80) = 261;
        *(_QWORD *)v79 = __dst + 16;
        *(_QWORD *)&v79[8] = v23;
        if (llvm::sys::path::is_absolute())
        {
          if (v24 == (_QWORD)__p && (!v24 || !memcmp(v22, __s2, v24)))
            break;
        }
        *(_QWORD *)v79 = *(_QWORD *)(*v65 + 88);
        *(_QWORD *)&v79[8] = v65;
        v25 = sub_22E76C298((uint64_t *)v79, (uint64_t)v72);
        v26 = sub_22E76C298((uint64_t *)v79, (uint64_t)v67);
        if (v25)
        {
          if (v25 == v26)
            break;
        }
      }
    }
    v13 = &v20[v19];
LABEL_23:
    __dst = v13;
    if (!--v14)
      return 0;
  }
  v28 = &v20[v17];
  memset(&v79[4], 0, 28);
  v80 = &v82;
  v81 = 0x200000000;
  v83 = &v84;
  v84 = 0;
  v85 = 0;
  v86 = &v88;
  v87 = 0x200000000;
  *(_WORD *)v79 = (*v28 >> 3) & 2 | ((*v28 & 0x20) != 0) | (4
                                                                                            * ((*v28 >> 1) & 7)) | ((*v28 & 1) << 9);
  v29 = v66;
  *(_DWORD *)&v79[4] = sub_22E768E34(v66[3], v66[4], *(_DWORD *)(v28 + 1));
  v30 = *(unsigned int *)(v28 + 5);
  if ((_DWORD)v30)
  {
    v58 = (const char *)(v66[6] + v30 - 1);
    v59 = strlen(v58);
    v60 = sub_22F2A4E30((llvm::StringMapImpl *)(v66[5] + 1936), v58, v59);
    v61 = *(_QWORD *)*v60;
    *(_QWORD *)&v79[16] = *v60 + 8;
    *(_QWORD *)&v79[24] = v61;
  }
  if (v18 != 9)
  {
    v37 = (unsigned int *)(v28 + 9);
    v38 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17)
      v38 = v24 | 7;
    __sz = v38 + 1;
    v63 = (v38 + 1) | 0x8000000000000000;
    v39 = v18 - 9;
    while (1)
    {
      v41 = *v37++;
      v40 = v41;
      v42 = sub_22E76C40C(v29[3], v29[4], v41 >> 3);
      v43 = v29[3];
      if (v42)
      {
        if (*(_DWORD *)(v43 + 4208) >= v42)
        {
          v44 = *(_QWORD *)(*(_QWORD *)(v43 + 4200) + 8 * (v42 - 1));
        }
        else
        {
          sub_22E769C10(v43, "submodule ID out of range in AST file", 0x25uLL);
          v44 = 0;
          v43 = *v65;
        }
      }
      else
      {
        v44 = 0;
      }
      if (v24 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      v45 = *(_QWORD *)(v43 + 88);
      v46 = *(_QWORD *)(*(_QWORD *)(v43 + 120) + 104);
      if (v24 >= 0x17)
        break;
      HIBYTE(v78) = v24;
      if (v24)
      {
        p_dst = &__dst;
LABEL_44:
        memmove(p_dst, v22, v24);
        *((_BYTE *)p_dst + v24) = 0;
        sub_22E76C4AC(v66[4], (uint64_t)&__dst);
        if (v24 >= 0x17)
        {
          v48 = operator new(__sz);
          v72[1] = (void *)v24;
          v73 = (char *)v63;
          v72[0] = v48;
        }
        else
        {
          HIBYTE(v73) = v24;
          v48 = v72;
        }
        memmove(v48, v22, v24);
        goto LABEL_48;
      }
      LOBYTE(__dst) = 0;
      sub_22E76C4AC(v66[4], (uint64_t)&__dst);
      HIBYTE(v73) = 0;
      v48 = v72;
LABEL_48:
      *((_BYTE *)v48 + v24) = 0;
      HIBYTE(v75) = 0;
      LOBYTE(v74) = 0;
      if (v78 >= 0)
        v49 = &__dst;
      else
        v49 = (char **)__dst;
      if (v78 >= 0)
        v50 = HIBYTE(v78) & 0x7F;
      else
        v50 = v77;
      sub_22F1D07D8(v45, v49, v50, 0, 1, (uint64_t)v89);
      v51 = v89[0];
      v52 = SHIBYTE(v73);
      if (SHIBYTE(v73) < 0)
      {
        sub_22E3BB2B4(v67, v72[0], (unint64_t)v72[1]);
      }
      else
      {
        *(_OWORD *)v67 = *(_OWORD *)v72;
        __s2 = v73;
      }
      __p = v74;
      v70 = v75;
      v71 = v51;
      sub_22F151620(v46 + 488, v44, (unint64_t)v67, v40 & 7, 1);
      if (SHIBYTE(v70) < 0)
        operator delete((void *)__p);
      v29 = v66;
      if (SHIBYTE(__s2) < 0)
        operator delete(v67[0]);
      v53 = (*(unsigned __int16 *)v79 >> 6) & 1;
      if ((v40 & 6) == 0)
        v53 = 1;
      if (v53)
        v54 = 64;
      else
        v54 = 0;
      *(_WORD *)v79 = v54 | *(_WORD *)v79 & 0xFFBF;
      if (v52 < 0)
        operator delete(v72[0]);
      if (SHIBYTE(v78) < 0)
        operator delete(__dst);
      v39 -= 4;
      if (!v39)
        goto LABEL_28;
    }
    p_dst = (char **)operator new(__sz);
    v77 = v24;
    v78 = v63;
    __dst = (char *)p_dst;
    goto LABEL_44;
  }
LABEL_28:
  *(_WORD *)v79 |= 0x420u;
  v31 = *((unsigned __int8 *)v62 + 320);
  v32 = *(_OWORD *)&v79[16];
  *(_OWORD *)(v62 + 1) = *(_OWORD *)v79;
  *(_OWORD *)(v62 + 3) = v32;
  v33 = (uint64_t)(v62 + 5);
  if (v31)
  {
    sub_22E791B70(v33, (uint64_t)&v80);
    v34 = v62 + 22;
    sub_22E6C6AB4((uint64_t)(v62 + 21), (_QWORD *)v62[22]);
    v62[21] = (uint64_t)v83;
    v35 = v84;
    v62[22] = (uint64_t)v84;
    v36 = v85;
    v62[23] = v85;
    if (v36)
    {
      v35[2] = v34;
      v83 = &v84;
      v84 = 0;
      v85 = 0;
    }
    else
    {
      v62[21] = (uint64_t)v34;
    }
    sub_22E791B70((uint64_t)(v62 + 24), (uint64_t)&v86);
  }
  else
  {
    v62[5] = (uint64_t)(v62 + 7);
    v62[6] = 0x200000000;
    if ((_DWORD)v81)
      sub_22E791B70(v33, (uint64_t)&v80);
    v62[21] = (uint64_t)v83;
    v55 = v84;
    v62[22] = (uint64_t)v84;
    v56 = v62 + 22;
    v57 = v85;
    v62[23] = v85;
    if (v57)
    {
      v55[2] = v56;
      v83 = &v84;
      v84 = 0;
      v85 = 0;
    }
    else
    {
      v62[21] = (uint64_t)v56;
    }
    v62[24] = (uint64_t)(v62 + 26);
    v62[25] = 0x200000000;
    if ((_DWORD)v87)
      sub_22E791B70((uint64_t)(v62 + 24), (uint64_t)&v86);
    *((_BYTE *)v62 + 320) = 1;
  }
  sub_22E6C6A2C((void **)&v86);
  sub_22E6C6AB4((uint64_t)&v83, v84);
  sub_22E6C6A2C((void **)&v80);
  return 1;
}

uint64_t sub_22E791B70(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;

  if (a1 != a2)
  {
    v4 = *(char **)a2;
    if (*(_QWORD *)a2 == a2 + 16)
    {
      v5 = *(unsigned int *)(a2 + 8);
      v6 = *(unsigned int *)(a1 + 8);
      if (v6 >= v5)
      {
        v9 = *(char **)a1;
        if ((_DWORD)v5)
        {
          v10 = 56 * v5;
          do
          {
            sub_22E3B2DB8((uint64_t)v9, (uint64_t)v4);
            v4 += 56;
            v9 += 56;
            v10 -= 56;
          }
          while (v10);
          LODWORD(v6) = *(_DWORD *)(a1 + 8);
          v11 = *(char **)a1;
        }
        else
        {
          v11 = *(char **)a1;
        }
        v12 = &v11[56 * v6];
        while (v12 != v9)
        {
          v14 = (char *)*((_QWORD *)v12 - 7);
          v12 -= 56;
          v13 = v14;
          if (v12 + 24 != v14)
            free(v13);
        }
        *(_DWORD *)(a1 + 8) = v5;
        v15 = *(unsigned int *)(a2 + 8);
        if ((_DWORD)v15)
        {
          v16 = *(char **)a2;
          v17 = 56 * v15;
          do
          {
            v18 = *(char **)&v16[v17 - 56];
            if (&v16[v17 - 32] != v18)
              free(v18);
            v17 -= 56;
          }
          while (v17);
        }
        goto LABEL_43;
      }
      if (*(_DWORD *)(a1 + 12) < v5)
      {
        if ((_DWORD)v6)
        {
          v19 = *(char **)a1;
          v20 = 56 * v6;
          do
          {
            v21 = *(char **)&v19[v20 - 56];
            if (&v19[v20 - 32] != v21)
              free(v21);
            v20 -= 56;
          }
          while (v20);
        }
        *(_DWORD *)(a1 + 8) = 0;
        sub_22F2BB580(a1);
      }
      else if ((_DWORD)v6)
      {
        v7 = *(_QWORD *)a1;
        v8 = 56 * v6;
        do
        {
          sub_22E3B2DB8(v7, (uint64_t)v4);
          v4 += 56;
          v7 += 56;
          v8 -= 56;
        }
        while (v8);
        goto LABEL_32;
      }
      v6 = 0;
LABEL_32:
      v22 = *(char **)a2;
      v23 = *(unsigned int *)(a2 + 8);
      if (v6 != v23)
      {
        v24 = *(char **)a1;
        v25 = 56 * v6;
        v26 = 56 * v23;
        do
        {
          v27 = (uint64_t)&v24[v25];
          *(_QWORD *)v27 = &v24[v25 + 24];
          *(_OWORD *)(v27 + 8) = xmmword_22F44E330;
          if (*(_QWORD *)&v22[v25 + 8])
            sub_22E3B2DB8(v27, (uint64_t)&v22[v25]);
          v24 += 56;
          v26 -= 56;
          v22 += 56;
        }
        while (v25 != v26);
        v22 = *(char **)a2;
      }
      *(_DWORD *)(a1 + 8) = v5;
      v28 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v28)
      {
        v29 = 56 * v28;
        do
        {
          v30 = *(char **)&v22[v29 - 56];
          if (&v22[v29 - 32] != v30)
            free(v30);
          v29 -= 56;
        }
        while (v29);
      }
LABEL_43:
      *(_DWORD *)(a2 + 8) = 0;
      return a1;
    }
    sub_22F2BC4A4((char **)a1, (char **)a2);
  }
  return a1;
}

char *sub_22E791DB0(uint64_t **a1, int a2, _DWORD *a3)
{
  char *v5;
  uint64_t **v6;
  char *v7;
  int v8;
  char *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = (char *)a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = v5;
        v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2)
          break;
        v5 = *(char **)v7;
        v6 = (uint64_t **)v7;
        if (!*(_QWORD *)v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = (char *)*((_QWORD *)v7 + 1);
      if (!v5)
      {
        v6 = (uint64_t **)(v7 + 8);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (char *)(a1 + 1);
LABEL_9:
    v9 = v7;
    v7 = (char *)operator new(0x88uLL);
    *((_DWORD *)v7 + 8) = *a3;
    *(_OWORD *)(v7 + 56) = 0u;
    *(_OWORD *)(v7 + 40) = 0u;
    *(_OWORD *)(v7 + 88) = 0u;
    *(_OWORD *)(v7 + 104) = 0u;
    *(_OWORD *)(v7 + 120) = 0u;
    *(_OWORD *)(v7 + 72) = 0u;
    *((_QWORD *)v7 + 7) = v7 + 72;
    *((_DWORD *)v7 + 17) = 4;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    sub_22E49FD00(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t sub_22E791EA4@<X0>(uint64_t result@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v5 = result + 32;
  v4 = *(_QWORD *)(result + 32);
  v7 = (_DWORD *)(result + 24);
  v6 = *(unsigned int *)(result + 24);
  *(_QWORD *)(a3 + 40) = 0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_DWORD *)(result + 24) = v6 + 1;
  v8 = *(_QWORD *)(v4 + 8 * v6);
  *(_DWORD *)a3 = v8;
  if ((_DWORD)v8 == 2)
  {
    result = sub_22E791FEC(result, a2);
    *(_QWORD *)(a3 + 8) = result;
    *(_QWORD *)(a3 + 16) = v11;
  }
  else if ((v8 - 6) <= 2)
  {
    v12 = result;
    result = *(_QWORD *)(result + 8);
    if (*(_DWORD *)(result + 10984) == 3)
    {
      v19 = *(unsigned int *)(result + 10848);
      v13 = *(_QWORD *)(*(_QWORD *)(result + 10840) + 8 * v19 - 8);
      *(_DWORD *)(result + 10848) = v19 - 1;
    }
    else
    {
      result = sub_22E7B94C8(result, *(_QWORD *)(v12 + 16));
      v13 = result;
    }
    *(_QWORD *)(a3 + 24) = v13;
  }
  else if ((_DWORD)v8 == 9)
  {
    v9 = *(_QWORD **)(result + 8);
    v10 = sub_22E779F8C((uint64_t)v9, *(_QWORD *)(result + 16), v5, v7);
    result = sub_22E77F870(v9, v10);
    *(_QWORD *)(a3 + 32) = result;
  }
  else if ((_DWORD)v8 == 10)
  {
    v14 = *(_QWORD **)(result + 8);
    v15 = result;
    v16 = sub_22E779F8C((uint64_t)v14, *(_QWORD *)(result + 16), v5, v7);
    *(_QWORD *)(a3 + 32) = sub_22E77F870(v14, v16);
    v17 = *(_QWORD **)(v15 + 8);
    v18 = sub_22E779F8C((uint64_t)v17, *(_QWORD *)(v15 + 16), v5, v7);
    result = sub_22E77F870(v17, v18);
    *(_QWORD *)(a3 + 40) = result;
  }
  return result;
}

uint64_t sub_22E791FEC(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;

  v5 = a1 + 32;
  v4 = *(_QWORD *)(a1 + 32);
  v7 = (_DWORD *)(a1 + 24);
  v6 = *(unsigned int *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v6 + 1;
  v8 = *(_QWORD *)(v4 + 8 * v6);
  if (v8 > (unint64_t)a2[3])
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  for (; (_DWORD)v8; LODWORD(v8) = v8 - 1)
  {
    v10 = sub_22E78DF24(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), v5, v7);
    v11 = a2[2];
    if (v11 >= a2[3])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v11 = a2[2];
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v11) = v10;
    ++a2[2];
  }
  return *(_QWORD *)a2;
}

BOOL sub_22E7920CC(uint64_t a1, int a2)
{
  return (*(_DWORD *)(**(_QWORD **)a1 + 28) & 0x7F) == a2;
}

_QWORD *sub_22E7920E8(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22E792158(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22E7921F4((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = v5 + 3;
    v5[2] = 0x200000000;
  }
  return v5;
}

uint64_t sub_22E792158(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 32 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 32 * v6);
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_4;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

_QWORD *sub_22E7921F4(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E7922A4(a1, v7);
  v9 = 0;
  sub_22E792158((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_22E7922A4(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](32 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22E792364(a1, v4, &v4[4 * v3]);
    return (_QWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(32 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        *result = -4096;
        result += 4;
        v11 -= 32;
      }
      while (v11);
    }
  }
  return result;
}

void sub_22E792364(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void **v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 32 * v6;
    do
    {
      *v7 = -4096;
      v7 += 4;
      v8 -= 32;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    while ((*v4 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
LABEL_18:
      v4 += 4;
      if (v4 == a3)
        return;
    }
    v19 = 0;
    sub_22E792158((uint64_t *)a1, v4, &v19);
    v9 = v19;
    v10 = *v4;
    v11 = (void *)(v19 + 24);
    v12 = v19;
    *(_QWORD *)(v19 + 8) = v19 + 24;
    v13 = (void **)(v12 + 8);
    *(_QWORD *)v9 = v10;
    *(_QWORD *)(v9 + 16) = 0x200000000;
    v14 = *((_DWORD *)v4 + 4);
    v15 = (uint64_t *)v4[1];
    if (v4 == (uint64_t *)v9 || v14 == 0)
    {
LABEL_16:
      ++*(_DWORD *)(a1 + 8);
      if (v4 + 3 != v15)
        free(v15);
      goto LABEL_18;
    }
    if (v4 + 3 != v15)
    {
      *(_QWORD *)(v9 + 8) = v15;
      v18 = *((_DWORD *)v4 + 5);
      *(_DWORD *)(v9 + 16) = v14;
      *(_DWORD *)(v9 + 20) = v18;
      v4[1] = (uint64_t)(v4 + 3);
      *((_DWORD *)v4 + 5) = 0;
      v15 = v4 + 3;
      goto LABEL_15;
    }
    if (v14 >= 3)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v17 = *((unsigned int *)v4 + 4);
      if (!(_DWORD)v17)
        goto LABEL_14;
      v15 = (uint64_t *)v4[1];
      v11 = *v13;
    }
    else
    {
      v17 = *((unsigned int *)v4 + 4);
    }
    memcpy(v11, v15, 4 * v17);
LABEL_14:
    *(_DWORD *)(v9 + 16) = v14;
    v15 = (uint64_t *)v4[1];
LABEL_15:
    *((_DWORD *)v4 + 4) = 0;
    goto LABEL_16;
  }
}

uint64_t sub_22E7924D8(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 24 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 24 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_4;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

uint64_t sub_22E792578(uint64_t *a1)
{
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  _BOOL4 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *i;
  uint64_t *v18;
  llvm *v19[2];
  unsigned int v20;
  _QWORD v21[3];

  v3 = a1 + 1;
  v2 = a1[1];
  v19[0] = 0;
  v19[1] = 0;
  v20 = 0;
  if ((v2 & 4) != 0)
  {
    v6 = v2 & 0xFFFFFFFFFFFFFFF8;
    v5 = *(_QWORD **)v6;
    v4 = *(_QWORD *)v6 + 8 * *(unsigned int *)(v6 + 8);
  }
  else
  {
    v4 = (uint64_t)&v3[v2 > 7];
    v5 = a1 + 1;
  }
  while (v5 != (_QWORD *)v4)
    sub_22E67A2B0(v19, v5++, (uint64_t)v21);
  v7 = a1;
  if ((*a1 & 2) != 0)
    v7 = *(uint64_t **)(*a1 & 0xFFFFFFFFFFFFFFFCLL);
  v8 = &v7[sub_22E792774(a1) != 0];
  v9 = *a1;
  if ((*a1 & 2) != 0)
    v10 = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFFCLL) + 8 * *(unsigned int *)((v9 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  else
    v10 = (uint64_t)&a1[v9 > 3];
  if (v8 != (uint64_t *)v10)
  {
    while (1)
    {
      v11 = (uint64_t *)(*v8 & 0xFFFFFFFFFFFFFFF8);
      if ((sub_22E7927BC((uint64_t)v19[0], v20, *v11, v21) & 1) != 0)
        break;
      if (++v8 == (uint64_t *)v10)
      {
        v8 = (uint64_t *)v10;
        goto LABEL_15;
      }
    }
    MEMORY[0x2348A0E9C](v11, 0x1070C40E64A1DB5);
    for (i = v8 + 1; i != (uint64_t *)v10; ++i)
    {
      v18 = (uint64_t *)(*i & 0xFFFFFFFFFFFFFFF8);
      if (sub_22E7927BC((uint64_t)v19[0], v20, *v18, v21))
        MEMORY[0x2348A0E9C](v18, 0x1070C40E64A1DB5);
      else
        *v8++ = *i;
    }
  }
LABEL_15:
  v12 = *a1;
  if ((*a1 & 2) != 0)
  {
    v14 = v12 & 0xFFFFFFFFFFFFFFFCLL;
    if (v14)
      *(_DWORD *)(v14 + 8) = ((unint64_t)v8 - *(_QWORD *)v14) >> 3;
  }
  else
  {
    v13 = v12 > 3;
    if (v8 == a1 && v8 != &a1[v13])
      *a1 = 0;
  }
  if ((*v3 & 4) != 0)
  {
    v15 = *v3 & 0xFFFFFFFFFFFFFFF8;
    if (v15)
      *(_DWORD *)(v15 + 8) = 0;
  }
  else
  {
    *v3 = 0;
  }
  return llvm::deallocate_buffer(v19[0], (void *)(8 * v20));
}

unint64_t sub_22E792774(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v3;

  v1 = *a1;
  if ((unint64_t)*a1 < 4)
    return 0;
  v3 = v1 & 0xFFFFFFFFFFFFFFFCLL;
  if ((v1 & 2) != 0 && v3)
  {
    if (!*(_DWORD *)(v3 + 8))
      return 0;
    goto LABEL_8;
  }
  if ((v1 & 2) != 0)
LABEL_8:
    v1 = **(_QWORD **)v3;
  return v1 & (v1 << 61 >> 63) & 0xFFFFFFFFFFFFFFF8;
}

uint64_t sub_22E7927BC(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 8 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v12 = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(a1 + 8 * (v11 & v4));
        v7 = *v6;
        v12 = 1;
        if (*v6 == a3)
          goto LABEL_14;
      }
      v12 = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    v12 = 0;
  }
LABEL_14:
  *a4 = v6;
  return v12;
}

uint64_t sub_22E792850(uint64_t result, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;

  v3 = (uint64_t *)result;
  v4 = *(_QWORD *)result;
  if (*(_QWORD *)result > 3uLL)
  {
    if ((v4 & 2) == 0)
    {
      v7 = v4 & 0xFFFFFFFFFFFFFFFCLL;
      result = operator new();
      *(_QWORD *)result = result + 16;
      *(_QWORD *)(result + 8) = 0x400000000;
      *v3 = result | 2;
      v8 = result & 0xFFFFFFFFFFFFFFFCLL;
      v9 = *(_DWORD *)((result & 0xFFFFFFFFFFFFFFFCLL) + 8);
      if (v9 >= *(_DWORD *)((result & 0xFFFFFFFFFFFFFFFCLL) + 12))
      {
        v10 = result & 0xFFFFFFFFFFFFFFFCLL;
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v10;
        v9 = *(_DWORD *)(v10 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = v7;
      ++*(_DWORD *)(v8 + 8);
      v4 = *v3;
    }
    v5 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    v6 = *(_DWORD *)((v4 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    if (v6 >= *(_DWORD *)(v5 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v6 = *(_DWORD *)(v5 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = a2;
    ++*(_DWORD *)(v5 + 8);
  }
  else
  {
    *(_QWORD *)result = a2 & 0xFFFFFFFFFFFFFFFDLL;
  }
  return result;
}

uint64_t sub_22E792964(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  int *v12;
  int v13;
  uint64_t v14;
  int *v16;
  int v17;
  BOOL v18;
  unsigned int v20;
  uint64_t result;

  if (a2)
  {
    v8 = sub_22E76930C(a3);
    v9 = a2 - 1;
    v10 = *(_QWORD *)(a3 + 8);
    v11 = v8 & (a2 - 1);
    v12 = (int *)(a1 + 48 * v11);
    v13 = *v12;
    v14 = *((_QWORD *)v12 + 1);
    if (*(_DWORD *)a3 == *v12 && v10 == v14)
    {
LABEL_22:
      result = 1;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      while (v13 != -1 || v14 != 1)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v14 == 2;
        if (v18 && v13 == -1)
          v16 = v12;
        v20 = v11 + v17++;
        v11 = v20 & v9;
        v12 = (int *)(a1 + 48 * (v20 & v9));
        v13 = *v12;
        v14 = *((_QWORD *)v12 + 1);
        if (*(_DWORD *)a3 == *v12 && v10 == v14)
          goto LABEL_22;
      }
      result = 0;
      if (v16)
        v12 = v16;
    }
  }
  else
  {
    v12 = 0;
    result = 0;
  }
  *a4 = v12;
  return result;
}

_OWORD *sub_22E792A40(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v15;
  void *v16;
  char *v17;
  unsigned int v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 48 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 48 * v10;
      do
      {
        *result = xmmword_22F45EF00;
        result += 3;
        v11 -= 48;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 0;
      while (1)
      {
        v13 = (char *)v4 + v12;
        if (*(_DWORD *)((char *)v4 + v12) == -1 && (unint64_t)(*(_QWORD *)((char *)v4 + v12 + 8) - 1) < 2)
          goto LABEL_25;
        v25 = 0;
        sub_22E792964(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), (uint64_t)v4 + v12, &v25);
        v15 = v25;
        *(_OWORD *)v25 = *(_OWORD *)v13;
        v16 = v15 + 32;
        *((_QWORD *)v15 + 2) = v15 + 32;
        *((_QWORD *)v15 + 3) = 0x400000000;
        v17 = (char *)*((_QWORD *)v13 + 2);
        if (v13 != v15)
        {
          v18 = *((_DWORD *)v13 + 6);
          if (v18)
            break;
        }
LABEL_23:
        ++*(_DWORD *)(a1 + 8);
        if ((char *)v4 + v12 + 32 != v17)
          free(v17);
LABEL_25:
        v12 += 48;
        if (48 * v3 == v12)
          return (_OWORD *)llvm::deallocate_buffer(v4, (void *)(48 * v3));
      }
      v19 = (char *)v4 + v12;
      v20 = (uint64_t)v4 + v12 + 32;
      if ((char *)v20 != v17)
      {
        *((_QWORD *)v15 + 2) = v17;
        v22 = *((_DWORD *)v19 + 7);
        *((_DWORD *)v15 + 6) = v18;
        *((_DWORD *)v15 + 7) = v22;
        *((_QWORD *)v13 + 2) = v20;
        *((_DWORD *)v19 + 7) = 0;
        v17 = (char *)v4 + v12 + 32;
        goto LABEL_22;
      }
      if (v18 >= 5)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v21 = *((unsigned int *)v13 + 6);
        if (!(_DWORD)v21)
          goto LABEL_21;
        v17 = (char *)*((_QWORD *)v13 + 2);
        v16 = (void *)*((_QWORD *)v15 + 2);
      }
      else
      {
        v21 = *((unsigned int *)v13 + 6);
      }
      memcpy(v16, v17, 4 * v21);
LABEL_21:
      *((_DWORD *)v15 + 6) = v18;
      v17 = (char *)*((_QWORD *)v13 + 2);
LABEL_22:
      *((_DWORD *)v13 + 6) = 0;
      goto LABEL_23;
    }
    return (_OWORD *)llvm::deallocate_buffer(v4, (void *)(48 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v23 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v23)
    {
      v24 = 48 * v23;
      do
      {
        *result = xmmword_22F45EF00;
        result += 3;
        v24 -= 48;
      }
      while (v24);
    }
  }
  return result;
}

int32x2_t sub_22E792C88(unsigned __int16 **a1)
{
  unsigned __int16 *v2;
  int v3;
  unsigned int v4;
  int32x2_t result;

  v2 = *a1;
  if (!*((_DWORD *)a1 + 2))
  {
    v3 = *v2++;
    *((_DWORD *)a1 + 2) = v3;
  }
  *a1 = v2 + 2;
  v4 = sub_22E78CDE0((uint64_t *)a1);
  *a1 = (unsigned __int16 *)((char *)*a1 + sub_22E78CDE0((uint64_t *)a1) + v4);
  result = vadd_s32((int32x2_t)a1[1], (int32x2_t)-1);
  a1[1] = (unsigned __int16 *)result;
  return result;
}

_QWORD *sub_22E792CF4(uint64_t a1, int a2)
{
  unsigned int v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *result;
  unsigned int v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 88 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F2BDC1C(a1, (uint64_t)v4, (uint64_t)v4 + 88 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(88 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (v10)
    {
      v11 = 88 * v10;
      do
      {
        *result = -1;
        result += 11;
        v11 -= 88;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22E792DC0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  _OWORD *v7;
  _OWORD *v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[2];
  int v13;
  int v14;
  int v15;

  v12[0] = a2;
  v12[1] = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  v7 = (_OWORD *)sub_22E78DF7C(a1, (unint64_t)v12, 1);
  v8 = (_OWORD *)(*(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 8));
  v9 = v7[1];
  *v8 = *v7;
  v8[1] = v9;
  v10 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v10;
  return *(_QWORD *)a1 + 32 * v10 - 32;
}

uint64_t sub_22E792E28(uint64_t a1, __int128 *a2, uint64_t *a3, int *a4, int *a5)
{
  uint64_t v6;
  int v7;
  int v8;
  _OWORD *v9;
  _OWORD *v10;
  __int128 v11;
  uint64_t v12;
  __int128 v14;
  uint64_t v15;
  int v16;
  int v17;

  v6 = *a3;
  v7 = *a4;
  v8 = *a5;
  v14 = *a2;
  v15 = v6;
  v16 = v7;
  v17 = v8;
  v9 = (_OWORD *)sub_22E78DF7C(a1, (unint64_t)&v14, 1);
  v10 = (_OWORD *)(*(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 8));
  v11 = v9[1];
  *v10 = *v9;
  v10[1] = v11;
  v12 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v12;
  return *(_QWORD *)a1 + 32 * v12 - 32;
}

uint64_t sub_22E792EA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  _OWORD *v7;
  _OWORD *v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  int v13;
  int v14;

  v12[0] = a2;
  v12[1] = a3;
  v12[2] = a4;
  v13 = a5;
  v14 = a6;
  v7 = (_OWORD *)sub_22E78DF7C(a1, (unint64_t)v12, 1);
  v8 = (_OWORD *)(*(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 8));
  v9 = v7[1];
  *v8 = *v7;
  v8[1] = v9;
  v10 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v10;
  return *(_QWORD *)a1 + 32 * v10 - 32;
}

_QWORD *sub_22E792F08(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F2BDEE0(a1, (uint64_t)v4, (uint64_t)v4 + 16 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -1;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22E792FC8(uint64_t result, uint64_t a2, _QWORD *a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  _WORD *v6;
  int v7;
  uint64_t *v10;
  unsigned __int16 *v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned __int16 *v15;
  unsigned __int16 *v16;

  v4 = result;
  v5 = *(unsigned int *)(*(_QWORD *)(a2 + 8) + 4 * ((*(_DWORD *)a2 - 1) & a4));
  if ((_DWORD)v5 && (v6 = (_WORD *)(*(_QWORD *)(a2 + 16) + v5), v7 = (unsigned __int16)*v6, *v6))
  {
    v10 = (uint64_t *)(a2 + 24);
    v11 = v6 + 1;
    while (1)
    {
      v12 = *(_DWORD *)v11;
      v16 = v11 + 2;
      v13 = sub_22E78CDE0((uint64_t *)&v16);
      result = (uint64_t)sub_22E78CDE0((uint64_t *)&v16);
      v14 = result;
      v15 = v16;
      if (v12 == a4)
      {
        result = sub_22F2B0854(v10, v16);
        if (result == *a3)
          break;
      }
      v11 = (unsigned __int16 *)((char *)v15 + v14 + v13);
      v16 = v11;
      if (!--v7)
        goto LABEL_9;
    }
    *(_QWORD *)v4 = result;
    *(_QWORD *)(v4 + 8) = (char *)v15 + v13;
    *(_DWORD *)(v4 + 16) = v14;
    *(_QWORD *)(v4 + 24) = v10;
  }
  else
  {
LABEL_9:
    *(_QWORD *)(v4 + 24) = 0;
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_DWORD *)(v4 + 16) = 0;
  }
  return result;
}

uint64_t sub_22E7930C0@<X0>(_DWORD *a1@<X0>, _QWORD *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_22E3B9914((uint64_t)a1, a2, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22E744928(a1, (uint64_t)a2, a2, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    *(_DWORD *)(result + 8) = *a3;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 16 * a1[4];
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

uint64_t sub_22E793150(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= *(_QWORD *)(a1 + 16))
  {
    result = sub_22E7931BC(a1, a2);
  }
  else
  {
    *(_QWORD *)v3 = *(_QWORD *)a2;
    *(_QWORD *)(v3 + 8) = v3 + 24;
    *(_QWORD *)(v3 + 16) = 0x400000000;
    if (*(_DWORD *)(a2 + 16))
      sub_22E793328((char **)(v3 + 8), (uint64_t **)(a2 + 8));
    result = v3 + 56;
  }
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_22E7931BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *i;
  char *v13;
  void *__p;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v2 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x492492492492492)
    abort();
  if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) > v3)
    v3 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3)) >= 0x249249249249249)
    v5 = 0x492492492492492;
  else
    v5 = v3;
  v19 = a1 + 16;
  if (v5 > 0x492492492492492)
    sub_22E3B3F8C();
  v7 = 56 * v5;
  v8 = (char *)operator new(56 * v5);
  v9 = &v8[56 * v2];
  __p = v8;
  v16 = v9;
  v18 = &v8[v7];
  *(_QWORD *)v9 = *(_QWORD *)a2;
  *((_QWORD *)v9 + 1) = v9 + 24;
  *((_QWORD *)v9 + 2) = 0x400000000;
  if (*(_DWORD *)(a2 + 16))
    sub_22E793328((char **)v9 + 1, (uint64_t **)(a2 + 8));
  v17 = v9 + 56;
  sub_22F2BE198((char **)a1, &__p);
  v10 = *(_QWORD *)(a1 + 8);
  v11 = v16;
LABEL_11:
  for (i = v17; i != v11; i -= 56)
  {
    v17 = i - 56;
    v13 = (char *)*((_QWORD *)i - 6);
    if (v13 != i - 32)
    {
      free(v13);
      goto LABEL_11;
    }
  }
  if (__p)
    operator delete(__p);
  return v10;
}

char **sub_22E793328(char **a1, uint64_t **a2)
{
  char *v4;
  uint64_t *v5;
  char *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;

  if (a1 != (char **)a2)
  {
    v5 = (uint64_t *)(a2 + 2);
    v4 = (char *)*a2;
    if (*a2 != (uint64_t *)(a2 + 2))
    {
      v6 = *a1;
      if (*a1 != (char *)(a1 + 2))
      {
        free(v6);
        v4 = (char *)*a2;
      }
      *a1 = v4;
      v7 = a2 + 1;
      a1[1] = (char *)a2[1];
      *a2 = v5;
      *((_DWORD *)a2 + 3) = 0;
      goto LABEL_21;
    }
    v7 = a2 + 1;
    v8 = *((unsigned int *)a2 + 2);
    v9 = *((unsigned int *)a1 + 2);
    if (v9 >= v8)
    {
      if ((_DWORD)v8)
      {
        v10 = &v4[8 * v8];
        v11 = *a1;
        do
        {
          *(_DWORD *)v11 = *(_DWORD *)v4;
          v11[4] = v4[4];
          v4 += 8;
          v11 += 8;
        }
        while (v4 != v10);
      }
      goto LABEL_20;
    }
    if (*((_DWORD *)a1 + 3) >= v8)
    {
      if ((_DWORD)v9)
      {
        v12 = &v4[8 * v9];
        v13 = *a1;
        do
        {
          *(_DWORD *)v13 = *(_DWORD *)v4;
          v13[4] = v4[4];
          v4 += 8;
          v13 += 8;
        }
        while (v4 != v12);
LABEL_18:
        v14 = *v7;
        if (v9 != v14)
          memcpy(&(*a1)[8 * v9], &(*a2)[v9], (char *)&(*a2)[v14] - (char *)&(*a2)[v9]);
LABEL_20:
        *((_DWORD *)a1 + 2) = v8;
LABEL_21:
        *v7 = 0;
        return a1;
      }
    }
    else
    {
      *((_DWORD *)a1 + 2) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v9 = 0;
    goto LABEL_18;
  }
  return a1;
}

void ***sub_22E793470(void ***a1)
{
  void **v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*v2 != v2 + 2)
      free(*v2);
    MEMORY[0x2348A0E9C](v2, 0x10A0C400EB28923);
  }
  return a1;
}

char *sub_22E7934C8(char **a1, __int128 *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char *v8;
  char *v9;
  char *v10;
  __int128 v11;
  char *v12;
  void ***v13;
  void ***v14;
  uint64_t v15;
  void **v16;
  void ***v17;
  void ***v18;

  v2 = (a1[1] - *a1) >> 4;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 60)
    abort();
  v5 = a1[2] - *a1;
  if (v5 >> 3 > v3)
    v3 = v5 >> 3;
  if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0)
    v6 = 0xFFFFFFFFFFFFFFFLL;
  else
    v6 = v3;
  if (v6 >> 60)
    sub_22E3B3F8C();
  v8 = (char *)operator new(16 * v6);
  v9 = &v8[16 * v2];
  v10 = &v8[16 * v6];
  v11 = *a2;
  *((_QWORD *)a2 + 1) = 0;
  *(_OWORD *)v9 = v11;
  v12 = v9 + 16;
  v13 = (void ***)*a1;
  v14 = (void ***)a1[1];
  if (v14 == (void ***)*a1)
  {
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v10;
    if (!v14)
      return v12;
    goto LABEL_13;
  }
  do
  {
    v15 = (uint64_t)*(v14 - 2);
    v14 -= 2;
    *((_QWORD *)v9 - 2) = v15;
    v9 -= 16;
    v16 = v14[1];
    v14[1] = 0;
    *((_QWORD *)v9 + 1) = v16;
  }
  while (v14 != v13);
  v14 = (void ***)*a1;
  v17 = (void ***)a1[1];
  *a1 = v9;
  a1[1] = v12;
  a1[2] = v10;
  if (v17 != v14)
  {
    do
    {
      v18 = v17 - 2;
      sub_22E793470(v17 - 1);
      v17 = v18;
    }
    while (v18 != v14);
  }
  if (v14)
LABEL_13:
    operator delete(v14);
  return v12;
}

void sub_22E7935D0(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  void *v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  void *v20;
  void **v21;
  unsigned int v22;
  void *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  int v29;
  void *__p;
  char *v31;
  char *v32;
  char *v33;
  uint64_t *v34;

  v4 = a1[2];
  v5 = a1[1];
  if (v5 < v4)
  {
    *(_QWORD *)v5 = *(_QWORD *)a2;
    v6 = (void *)(v5 + 24);
    *(_QWORD *)(v5 + 8) = v5 + 24;
    *(_QWORD *)(v5 + 16) = 0x400000000;
    v7 = *(_DWORD *)(a2 + 16);
    if (v7)
      v8 = v5 == a2;
    else
      v8 = 1;
    if (v8)
      goto LABEL_12;
    v9 = *(_QWORD *)(a2 + 8);
    v10 = (const void *)(a2 + 24);
    if (v9 != a2 + 24)
    {
      *(_QWORD *)(v5 + 8) = v9;
      *(_DWORD *)(v5 + 16) = v7;
      *(_DWORD *)(v5 + 20) = *(_DWORD *)(a2 + 20);
      *(_QWORD *)(a2 + 8) = v10;
      *(_DWORD *)(a2 + 20) = 0;
      goto LABEL_11;
    }
    if (v7 >= 5)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v11 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v11)
        goto LABEL_10;
      v10 = *(const void **)(a2 + 8);
      v6 = *(void **)(v5 + 8);
    }
    else
    {
      v11 = *(unsigned int *)(a2 + 16);
    }
    memcpy(v6, v10, 4 * v11);
LABEL_10:
    *(_DWORD *)(v5 + 16) = v7;
LABEL_11:
    *(_DWORD *)(a2 + 16) = 0;
LABEL_12:
    v12 = v5 + 40;
    goto LABEL_13;
  }
  v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
  if (v13 + 1 > 0x666666666666666)
    abort();
  v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - *a1) >> 3);
  v15 = 2 * v14;
  if (2 * v14 <= v13 + 1)
    v15 = v13 + 1;
  if (v14 >= 0x333333333333333)
    v16 = 0x666666666666666;
  else
    v16 = v15;
  v34 = a1 + 2;
  if (v16 > 0x666666666666666)
    sub_22E3B3F8C();
  v17 = 5 * v16;
  v18 = (char *)operator new(40 * v16);
  v19 = &v18[40 * v13];
  __p = v18;
  v31 = v19;
  v33 = &v18[8 * v17];
  *(_QWORD *)v19 = *(_QWORD *)a2;
  v20 = v19 + 24;
  *((_QWORD *)v19 + 1) = v19 + 24;
  v21 = (void **)(v19 + 8);
  *((_QWORD *)v19 + 2) = 0x400000000;
  v22 = *(_DWORD *)(a2 + 16);
  if (v22 && v21 != (void **)(a2 + 8))
  {
    v23 = *(void **)(a2 + 8);
    if (v23 != (void *)(a2 + 24))
    {
      *v21 = v23;
      v29 = *(_DWORD *)(a2 + 20);
      *((_DWORD *)v19 + 4) = v22;
      *((_DWORD *)v19 + 5) = v29;
      *(_QWORD *)(a2 + 8) = a2 + 24;
      *(_DWORD *)(a2 + 20) = 0;
      goto LABEL_28;
    }
    if (v22 >= 5)
    {
      *((_DWORD *)v19 + 4) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v24 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v24)
        goto LABEL_27;
      v23 = *(void **)(a2 + 8);
      v20 = *v21;
    }
    else
    {
      v24 = *(unsigned int *)(a2 + 16);
    }
    memcpy(v20, v23, 4 * v24);
LABEL_27:
    *((_DWORD *)v19 + 4) = v22;
LABEL_28:
    *(_DWORD *)(a2 + 16) = 0;
  }
  v32 = v19 + 40;
  sub_22F2BE3D8(a1, &__p);
  v12 = a1[1];
  v25 = v31;
  if (v32 != v31)
  {
    v26 = v32 - 16;
    do
    {
      v27 = (char *)*((_QWORD *)v26 - 2);
      if (v26 != v27)
        free(v27);
      v28 = v26 - 24;
      v26 -= 40;
    }
    while (v28 != v25);
  }
  if (__p)
    operator delete(__p);
LABEL_13:
  a1[1] = v12;
}

uint64_t sub_22E793870(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v6 = *a1;
    v7 = v3 - 1;
    v8 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v4 = (_QWORD *)(*a1 + 16 * v8);
    v9 = *v4;
    if (*a2 == *v4)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v9 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v9 == -8192;
        if (v12)
          v10 = v4;
        v13 = v8 + v11++;
        v8 = v13 & v7;
        v4 = (_QWORD *)(v6 + 16 * (v13 & v7));
        v9 = *v4;
        if (*a2 == *v4)
          goto LABEL_3;
      }
      result = 0;
      if (v10)
        v4 = v10;
    }
  }
  else
  {
    v4 = 0;
    result = 0;
  }
LABEL_3:
  *a3 = v4;
  return result;
}

_BYTE *sub_22E79390C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_253E4ABA8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_253E4ABA8))
  {
    dword_253E4ABA0 = 2;
    __cxa_guard_release(&qword_253E4ABA8);
  }
  return &algn_253E4ABA4[3];
}

_QWORD *sub_22E793964(_QWORD *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v7 = result;
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v7[1] = a4;
    v7[2] = v9 | 0x8000000000000000;
    *v7 = result;
    v7 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v7 = v10;
    v7 = (_QWORD *)((char *)v7 + 1);
  }
  *(_BYTE *)v7 = 0;
  return result;
}

uint64_t sub_22E793A04(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  llvm *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = result;
  v2 = *(unsigned int *)(result + 16);
  v3 = *(_DWORD *)(result + 8);
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == (_DWORD)v2)
  {
    *(_QWORD *)(result + 8) = 0;
    if ((_DWORD)v2)
    {
      v6 = *(llvm **)result;
      v7 = 16 * v2;
      do
      {
        *(_DWORD *)v6 = -1;
        v6 = (llvm *)((char *)v6 + 16);
        v7 -= 16;
      }
      while (v7);
    }
  }
  else
  {
    result = llvm::deallocate_buffer(*(llvm **)result, (void *)(16 * v2));
    if (v5)
    {
      v8 = (4 * v5 / 3u + 1) | ((unint64_t)(4 * v5 / 3u + 1) >> 1);
      v9 = v8 | (v8 >> 2) | ((v8 | (v8 >> 2)) >> 4);
      LODWORD(v9) = (((v9 | (v9 >> 8)) >> 16) | v9 | (v9 >> 8)) + 1;
      *(_DWORD *)(v1 + 16) = v9;
      result = MEMORY[0x23489D23C](16 * v9, 8);
      *(_QWORD *)v1 = result;
      *(_QWORD *)(v1 + 8) = 0;
      v10 = *(unsigned int *)(v1 + 16);
      if ((_DWORD)v10)
      {
        v11 = 16 * v10;
        do
        {
          *(_DWORD *)result = -1;
          result += 16;
          v11 -= 16;
        }
        while (v11);
      }
    }
    else
    {
      *(_QWORD *)v1 = 0;
      *(_QWORD *)(v1 + 8) = 0;
      *(_DWORD *)(v1 + 16) = 0;
    }
  }
  return result;
}

_DWORD *sub_22E793B04(uint64_t a1, _DWORD *a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  _DWORD *v6;
  int v7;
  _DWORD *v9;
  _DWORD *v10;
  int v11;
  BOOL v12;
  int v13;

  v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    v9 = 0;
LABEL_5:
    v6 = sub_22F2BE4A4(a1, (uint64_t)a2, a2, v9);
    *v6 = *a2;
    *((_QWORD *)v6 + 3) = 0;
    *((_QWORD *)v6 + 2) = 0;
    *((_QWORD *)v6 + 1) = v6 + 4;
    return v6;
  }
  v4 = v3 - 1;
  v5 = *a2 & (v3 - 1);
  v6 = (_DWORD *)(*(_QWORD *)a1 + 32 * v5);
  v7 = *v6;
  if (*a2 != *v6)
  {
    v10 = 0;
    v11 = 1;
    while (v7)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v7 == -1;
      if (v12)
        v10 = v6;
      v13 = v5 + v11++;
      v5 = v13 & v4;
      v6 = (_DWORD *)(*(_QWORD *)a1 + 32 * v5);
      v7 = *v6;
      if (*a2 == *v6)
        return v6;
    }
    if (v10)
      v9 = v10;
    else
      v9 = v6;
    goto LABEL_5;
  }
  return v6;
}

_DWORD *sub_22E793BC0(uint64_t a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(int **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_DWORD *)MEMORY[0x23489D23C](32 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22E793C7C(a1, v4, &v4[8 * v3]);
    return (_DWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(32 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        *result = 0;
        result += 8;
        v11 -= 32;
      }
      while (v11);
    }
  }
  return result;
}

void sub_22E793C7C(uint64_t a1, int *a2, int *a3)
{
  int *v4;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  int v23;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_DWORD **)a1;
    v8 = 32 * v6;
    do
    {
      *v7 = 0;
      v7 += 8;
      v8 -= 32;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *v4;
      if ((*v4 + 1) >= 2)
      {
        v10 = *(_DWORD *)(a1 + 16) - 1;
        v11 = v10 & v9;
        v12 = *(_QWORD *)a1 + 32 * v11;
        v13 = *(_DWORD *)v12;
        if (v9 != *(_DWORD *)v12)
        {
          v20 = 0;
          v21 = 1;
          while (v13)
          {
            if (v20)
              v22 = 0;
            else
              v22 = v13 == -1;
            if (v22)
              v20 = v12;
            v23 = v11 + v21++;
            v11 = v23 & v10;
            v12 = *(_QWORD *)a1 + 32 * v11;
            v13 = *(_DWORD *)v12;
            if (v9 == *(_DWORD *)v12)
              goto LABEL_9;
          }
          if (v20)
            v12 = v20;
        }
LABEL_9:
        *(_DWORD *)v12 = v9;
        v14 = v4 + 2;
        *(_QWORD *)(v12 + 8) = *((_QWORD *)v4 + 1);
        v15 = v4 + 4;
        v16 = *((_QWORD *)v4 + 2);
        *(_QWORD *)(v12 + 16) = v16;
        v17 = v12 + 16;
        v18 = *((_QWORD *)v4 + 3);
        *(_QWORD *)(v12 + 24) = v18;
        if (v18)
        {
          v19 = 0;
          *(_QWORD *)(v16 + 16) = v17;
          *v14 = v15;
          *v15 = 0;
          *((_QWORD *)v4 + 3) = 0;
        }
        else
        {
          *(_QWORD *)(v12 + 8) = v17;
          v19 = (_QWORD *)*v15;
        }
        ++*(_DWORD *)(a1 + 8);
        sub_22E3B4AB8((uint64_t)v14, v19);
      }
      v4 += 8;
    }
    while (v4 != a3);
  }
}

_QWORD *sub_22E793DB0(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 40 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F2BE734(a1, (uint64_t)v4, (uint64_t)v4 + 40 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(40 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 40 * v10;
      do
      {
        *result = -4096;
        result += 5;
        v11 -= 40;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22E793E7C(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  llvm *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[64];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v8 = 0;
    v9 = v14;
    do
    {
      v10 = *(_QWORD *)(a1 + v8 + 8);
      if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        *(_QWORD *)v9 = v10;
        *((_DWORD *)v9 + 2) = *(_DWORD *)(a1 + v8 + 16);
        v9 += 16;
      }
      v8 += 16;
    }
    while (v8 != 64);
    if (a2 > 4)
    {
      *(_DWORD *)a1 &= ~1u;
      v11 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](16 * a2, 8);
      *(_QWORD *)(a1 + 16) = v11;
    }
    return sub_22F2BE9AC(a1, (uint64_t)v14, (uint64_t)v9);
  }
  else
  {
    v6 = *(llvm **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](16 * a2, 8);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_22F2BE9AC(a1, (uint64_t)v6, (uint64_t)v6 + 16 * v7);
    return llvm::deallocate_buffer(v6, (void *)(16 * v7));
  }
}

void sub_22E793FF8(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  unint64_t v4;
  unint64_t v5;
  int v6;
  llvm *v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[80];
  uint64_t v16;

  v2 = a2;
  v16 = *MEMORY[0x24BDAC8D0];
  if (a2 >= 3)
  {
    v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40)
      v2 = v6 + 1;
    else
      v2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v9 = 0;
    v10 = v15;
    v11 = 1;
    v12 = a1 + 8;
    do
    {
      v13 = v9;
      if ((*(_QWORD *)v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        *v10 = *(_QWORD *)v12;
        v10[1] = v10 + 3;
        v10[2] = 0x200000000;
        if (*(_DWORD *)(v12 + 16))
          sub_22F24C77C((uint64_t)(v10 + 1), v12 + 8);
        v10 += 5;
        v14 = *(void **)(v12 + 8);
        if (v14 != (void *)(v12 + 24))
          free(v14);
      }
      v12 = a1 + 8 + 40 * v11;
      v9 = 1;
      v11 = 2;
    }
    while ((v13 & 1) == 0);
    if (v2 > 2)
    {
      *(_DWORD *)a1 &= ~1u;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](40 * v2, 8);
      *(_QWORD *)(a1 + 16) = v2;
    }
    sub_22F2BEDC4(a1, (uint64_t)v15, (uint64_t)v10);
  }
  else
  {
    v7 = *(llvm **)(a1 + 8);
    v8 = *(unsigned int *)(a1 + 16);
    if (v2 > 2)
    {
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](40 * v2, 8);
      *(_QWORD *)(a1 + 16) = v2;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_22F2BEDC4(a1, (uint64_t)v7, (uint64_t)v7 + 40 * v8);
    llvm::deallocate_buffer(v7, (void *)(40 * v8));
  }
}

_QWORD *sub_22E794204(_QWORD *result)
{
  int v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  int v5;

  v1 = *(_DWORD *)result;
  if (*(_DWORD *)result > 1u || *((_DWORD *)result + 1))
  {
    if ((v1 & 1) != 0)
    {
      v3 = result + 1;
      v4 = result + 9;
      goto LABEL_8;
    }
    v2 = *((unsigned int *)result + 4);
    if (((2 * v1) & 0xFFFFFFFC) >= v2 || v2 < 0x41)
    {
      if (!(_DWORD)v2)
      {
        v5 = 0;
LABEL_10:
        *(_DWORD *)result = v5;
        *((_DWORD *)result + 1) = 0;
        return result;
      }
      v3 = (_QWORD *)result[1];
      v4 = &v3[2 * v2];
      do
      {
LABEL_8:
        *v3 = -4096;
        v3 += 2;
      }
      while (v3 != v4);
      v5 = *(_DWORD *)result & 1;
      goto LABEL_10;
    }
    return sub_22E794280(result);
  }
  return result;
}

_QWORD *sub_22E794280(_QWORD *result)
{
  _QWORD *v1;
  unsigned int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  v1 = result;
  v2 = *(_DWORD *)result;
  v3 = __clz((*(_DWORD *)result >> 1) - 1);
  if (v3 - 28 >= 3)
    v4 = 1 << (33 - v3);
  else
    v4 = 64;
  if (v2 >= 2)
    v5 = v4;
  else
    v5 = 0;
  if ((v2 & 1) != 0 && v5 < 5)
  {
    v6 = result + 1;
    *result = 1;
    v7 = result + 9;
    goto LABEL_10;
  }
  if ((v2 & 1) != 0)
    return sub_22E78E698(v1, v5);
  v8 = *((unsigned int *)result + 4);
  if (v5 != (_DWORD)v8)
  {
    llvm::deallocate_buffer((llvm *)result[1], (void *)(16 * v8));
    return sub_22E78E698(v1, v5);
  }
  *result = 0;
  if (!v5)
    return result;
  v6 = (_QWORD *)result[1];
  v7 = &v6[2 * v5];
  do
  {
LABEL_10:
    *v6 = -4096;
    v6 += 2;
  }
  while (v6 != v7);
  return result;
}

_QWORD *sub_22E794348(_QWORD *result)
{
  _QWORD *v1;
  unsigned int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  v1 = result;
  v2 = *(_DWORD *)result;
  v3 = __clz((*(_DWORD *)result >> 1) - 1);
  if (v3 - 28 >= 3)
    v4 = 1 << (33 - v3);
  else
    v4 = 64;
  if (v2 >= 2)
    v5 = v4;
  else
    v5 = 0;
  if ((v2 & 1) != 0 && v5 < 5)
  {
    v6 = result + 1;
    *result = 1;
    v7 = result + 9;
    goto LABEL_10;
  }
  if ((v2 & 1) != 0)
    return sub_22E78E898(v1, v5);
  v8 = *((unsigned int *)result + 4);
  if (v5 != (_DWORD)v8)
  {
    llvm::deallocate_buffer((llvm *)result[1], (void *)(16 * v8));
    return sub_22E78E898(v1, v5);
  }
  *result = 0;
  if (!v5)
    return result;
  v6 = (_QWORD *)result[1];
  v7 = &v6[2 * v5];
  do
  {
LABEL_10:
    *v6 = -4096;
    v6 += 2;
  }
  while (v6 != v7);
  return result;
}

unint64_t sub_22E794410(unint64_t result, _QWORD *a2)
{
  unint64_t v3;

  v3 = result;
  if (result)
  {
    while ((result & 1) != 0)
    {
      if (*(_QWORD *)(result & 0xFFFFFFFFFFFFFFFELL) != *a2)
      {
        sub_22E8CECFC(&v3);
        result = v3;
        if (v3)
          continue;
      }
      return result;
    }
    if (*a2 != result)
      return 0;
  }
  return result;
}

uint64_t *sub_22E794474(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v1 = *((unsigned int *)result + 4);
  if ((_DWORD)v1)
  {
    v2 = 24 * v1;
    v3 = (uint64_t *)(*result + 8);
    do
    {
      v4 = *(v3 - 1);
      if (v4 != -4096 && v4 != -8192)
      {
        sub_22E7944E4(v3);
        sub_22E794630(v3 + 1);
        result = sub_22E794690(v3);
      }
      v3 += 3;
      v2 -= 24;
    }
    while (v2);
  }
  return result;
}

unint64_t sub_22E7944E4(uint64_t *a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t *i;
  unint64_t result;
  unint64_t v8;
  uint64_t v9;

  v2 = *a1;
  if ((*a1 & 2) != 0)
  {
    v5 = v2 & 0xFFFFFFFFFFFFFFFCLL;
    v4 = *(uint64_t **)v5;
    v3 = *(_QWORD *)v5 + 8 * *(unsigned int *)(v5 + 8);
  }
  else
  {
    v3 = (uint64_t)&a1[v2 > 3];
    v4 = a1;
  }
  for (i = &v4[sub_22E792774(a1) != 0]; i != (uint64_t *)v3; ++i)
  {
    if ((*i & 0xFFFFFFFFFFFFFFF8) != 0)
      MEMORY[0x2348A0E9C](*i & 0xFFFFFFFFFFFFFFF8, 0x1070C40E64A1DB5);
  }
  result = sub_22E792774(a1);
  if (result)
  {
    v9 = sub_22F2BF5E8(result);
    result = MEMORY[0x2348A0E9C](v9, 0x10A0C40CB04B6B4);
  }
  if ((*a1 & 2) != 0)
  {
    v8 = *a1 & 0xFFFFFFFFFFFFFFFCLL;
    if (v8)
      *(_DWORD *)(v8 + 8) = 0;
  }
  else
  {
    *a1 = 0;
  }
  return result;
}

void sub_22E7945BC(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v6;

  v1 = *(_DWORD *)(a1 + 16);
  if (v1)
  {
    v2 = *(_QWORD *)a1 + 48 * v1;
    v3 = *(_QWORD *)a1 + 32;
    do
    {
      v4 = v3 - 32;
      if (*(_DWORD *)(v3 - 32) != -1 || (unint64_t)(*(_QWORD *)(v3 - 24) - 1) >= 2)
      {
        v6 = *(void **)(v3 - 16);
        if ((void *)v3 != v6)
          free(v6);
      }
      v3 += 48;
    }
    while (v4 + 48 != v2);
  }
}

uint64_t *sub_22E794630(uint64_t *a1)
{
  uint64_t v2;
  void **v3;

  v2 = *a1;
  if ((*a1 & 4) != 0)
  {
    v3 = (void **)(v2 & 0xFFFFFFFFFFFFFFF8);
    if ((v2 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      if (*v3 != v3 + 2)
        free(*v3);
      MEMORY[0x2348A0E9C](v3, 0x1080C40ED926357);
    }
  }
  return a1;
}

uint64_t *sub_22E794690(uint64_t *a1)
{
  uint64_t v2;
  void **v3;

  v2 = *a1;
  if ((*a1 & 2) != 0)
  {
    v3 = (void **)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v2 & 0xFFFFFFFFFFFFFFFCLL) != 0)
    {
      if (*v3 != v3 + 2)
        free(*v3);
      MEMORY[0x2348A0E9C](v3, 0x1080C40ED926357);
    }
  }
  return a1;
}

void sub_22E7946F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v1)
  {
    v2 = 32 * v1;
    v3 = *(_QWORD *)a1 + 24;
    do
    {
      if ((*(_QWORD *)(v3 - 24) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v4 = *(void **)(v3 - 16);
        if ((void *)v3 != v4)
        {
          v5 = v3;
          v6 = v2;
          free(v4);
          v3 = v5;
          v2 = v6;
        }
      }
      v3 += 32;
      v2 -= 32;
    }
    while (v2);
  }
}

uint64_t sub_22E794758(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v5 = *(unsigned int *)(v4 + 10848);
  v6 = *(_QWORD *)(*(_QWORD *)(v4 + 10840) + 8 * v5 - 8);
  *(_DWORD *)(v4 + 10848) = v5 - 1;
  *(_QWORD *)(a2 + 16) = v6;
  v7 = *(unsigned int *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v7 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v7);
  LODWORD(v8) = HIDWORD(v8);
  result = sub_22E77BAB4(v4, v3, v8 >> 1);
  *(_DWORD *)(a2 + 12) = result;
  return result;
}

uint64_t sub_22E7947B8(uint64_t a1, uint64_t *a2, _QWORD *a3, unsigned __int8 *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t *v9;

  v5 = *a2;
  v6 = *a4;
  if (*a3)
    v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 32))(*a3);
  else
    v7 = 0;
  v8 = *(_DWORD *)(a1 + 8);
  if (v8 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(_DWORD *)(a1 + 8);
  }
  v9 = (unint64_t *)(*(_QWORD *)a1 + 16 * v8);
  *v9 = v5 & 0xFFFFFFFFFFFFFFFDLL | (2 * (v6 != 0));
  v9[1] = v7;
  LODWORD(v9) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = (_DWORD)v9;
  return *(_QWORD *)a1 + 16 * v9 - 16;
}

uint64_t sub_22E79485C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unsigned int v8;
  unint64_t *v9;

  if (a3)
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
  else
    v7 = 0;
  v8 = *(_DWORD *)(a1 + 8);
  if (v8 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(_DWORD *)(a1 + 8);
  }
  v9 = (unint64_t *)(*(_QWORD *)a1 + 16 * v8);
  *v9 = a2 & 0xFFFFFFFFFFFFFFFDLL | (2 * (a4 != 0));
  v9[1] = v7;
  LODWORD(v9) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = (_DWORD)v9;
  return *(_QWORD *)a1 + 16 * v9 - 16;
}

uint64_t sub_22E794900(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  __int128 v4;
  _QWORD v6[3];

  memset(v6, 0, sizeof(v6));
  v2 = sub_22E4EF088(a1, (unint64_t)v6, 1);
  v3 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 8);
  v4 = *(_OWORD *)v2;
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(v2 + 16);
  *(_OWORD *)v3 = v4;
  LODWORD(v3) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v3;
  return *(_QWORD *)a1 + 24 * v3 - 24;
}

uint64_t sub_22E794970(uint64_t a1, uint64_t a2)
{
  char *v4;
  unsigned int v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *i;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;

  if (a1 != a2)
  {
    v4 = *(char **)a2;
    if (*(_QWORD *)a2 == a2 + 16)
    {
      v5 = *(_DWORD *)(a2 + 8);
      v6 = *(unsigned int *)(a1 + 8);
      if (v6 >= v5)
      {
        v10 = *(char **)a1;
        if (v5)
        {
          v11 = &v4[56 * v5];
          do
          {
            v12 = *(_QWORD *)v4;
            *((_DWORD *)v10 + 2) = *((_DWORD *)v4 + 2);
            *(_QWORD *)v10 = v12;
            sub_22F2A39AC((uint64_t)(v10 + 16), (uint64_t)(v4 + 16));
            v10 += 56;
            v4 += 56;
          }
          while (v4 != v11);
          v13 = v10;
          LODWORD(v6) = *(_DWORD *)(a1 + 8);
          v10 = *(char **)a1;
        }
        else
        {
          v13 = *(char **)a1;
        }
        for (i = &v10[56 * v6]; i != v13; i -= 56)
        {
          v15 = (char *)*((_QWORD *)i - 5);
          if (i - 24 != v15)
            free(v15);
        }
        *(_DWORD *)(a1 + 8) = v5;
        v16 = *(unsigned int *)(a2 + 8);
        if ((_DWORD)v16)
        {
          v17 = *(char **)a2;
          v18 = 56 * v16;
          do
          {
            v19 = *(char **)&v17[v18 - 40];
            if (&v17[v18 - 24] != v19)
              free(v19);
            v18 -= 56;
          }
          while (v18);
        }
        goto LABEL_44;
      }
      if (*(_DWORD *)(a1 + 12) < v5)
      {
        if ((_DWORD)v6)
        {
          v20 = *(char **)a1;
          v21 = 56 * v6;
          do
          {
            v22 = *(char **)&v20[v21 - 40];
            if (&v20[v21 - 24] != v22)
              free(v22);
            v21 -= 56;
          }
          while (v21);
        }
        *(_DWORD *)(a1 + 8) = 0;
        sub_22F2BFB24(a1);
      }
      else if ((_DWORD)v6)
      {
        v7 = &v4[56 * v6];
        v8 = *(char **)a1;
        do
        {
          v9 = *(_QWORD *)v4;
          *((_DWORD *)v8 + 2) = *((_DWORD *)v4 + 2);
          *(_QWORD *)v8 = v9;
          sub_22F2A39AC((uint64_t)(v8 + 16), (uint64_t)(v4 + 16));
          v4 += 56;
          v8 += 56;
        }
        while (v4 != v7);
        goto LABEL_33;
      }
      v6 = 0;
LABEL_33:
      v23 = *(char **)a2;
      v24 = *(unsigned int *)(a2 + 8);
      if (v6 != v24)
      {
        v25 = &v23[56 * v24];
        v26 = *(char **)a1;
        v27 = 56 * v6;
        do
        {
          v28 = &v23[v27];
          v29 = &v26[v27];
          v30 = *(_QWORD *)&v23[v27];
          *((_DWORD *)v29 + 2) = *(_DWORD *)&v23[v27 + 8];
          *(_QWORD *)v29 = v30;
          *((_QWORD *)v29 + 3) = 0x100000000;
          *((_QWORD *)v29 + 2) = &v26[v27 + 32];
          if (*(_DWORD *)&v23[v27 + 24])
            sub_22F2A39AC((uint64_t)&v26[v27 + 16], (uint64_t)(v28 + 16));
          v26 += 56;
          v23 += 56;
        }
        while (v28 + 56 != v25);
        v23 = *(char **)a2;
      }
      *(_DWORD *)(a1 + 8) = v5;
      v31 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v31)
      {
        v32 = 56 * v31;
        do
        {
          v33 = *(char **)&v23[v32 - 40];
          if (&v23[v32 - 24] != v33)
            free(v33);
          v32 -= 56;
        }
        while (v32);
      }
LABEL_44:
      *(_DWORD *)(a2 + 8) = 0;
      return a1;
    }
    sub_22F2BFA98((char **)a1, (char **)a2);
  }
  return a1;
}

_QWORD *sub_22E794BEC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = a1[1];
  v5 = *(unsigned int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v5 + 1;
  if (*(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v5))
  {
    v20 = *a1;
    if (*(_DWORD *)(a1[2] + 4) == 4)
      LOBYTE(v21) = 1;
    else
      v21 = (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 128) + 2000) + 20) >> 49) & 1;
    v22 = a2;
    *((_BYTE *)sub_22F2C3748((uint64_t *)(v20 + 11016), &v22) + 8) = v21;
    if (!a2)
      goto LABEL_10;
  }
  else if (!a2)
  {
    goto LABEL_10;
  }
  if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x37)
  {
    v6 = a1[1];
    v7 = *(unsigned int *)(v6 + 24);
    *(_DWORD *)(v6 + 24) = v7 + 1;
    v8 = *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * v7);
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(a2 + 80) & 0xE00000FFFFFFFFFFLL | ((v8 & 0x1FFFFF) << 40);
    if ((v8 & 0x1FFFFF) != 0)
    {
      v9 = a1[1];
      v10 = *(unsigned int *)(v9 + 24);
      *(_DWORD *)(v9 + 24) = v10 + 1;
      v11 = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 8 * v10);
      if (v11 && (v12 = a1[3] - v11) != 0)
      {
        v18 = *(_QWORD *)(*(_QWORD *)(v9 + 16) + 360);
        v13 = (uint64_t *)(a2 + 160);
        v19 = v12 + v18;
        if (v19)
        {
          v14 = (2 * v19) | 1;
          goto LABEL_9;
        }
      }
      else
      {
        v13 = (uint64_t *)(a2 + 160);
      }
      v14 = 0;
LABEL_9:
      *v13 = v14;
    }
  }
LABEL_10:
  v15 = *(_QWORD *)(a1[2] + 360) - *(unsigned int *)(a1[2] + 2752) + 8 * *(_QWORD *)(a1[2] + 2736);
  v16 = *a1 + 3768;
  v22 = a2;
  result = (_QWORD *)sub_22E794D50(v16, &v22);
  *result = v15;
  *((_BYTE *)a1 + 64) = 1;
  return result;
}

uint64_t sub_22E794D50(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  unsigned int v8;
  uint64_t v10;
  char v11;
  uint64_t v12;
  int v13;

  v12 = *a2;
  v13 = 0;
  sub_22E7B533C((uint64_t)&v10, a1, &v12, &v13);
  v4 = v10;
  if (v11)
  {
    v5 = *a2;
    v6 = *(_DWORD *)(a1 + 80);
    if (v6 >= *(_DWORD *)(a1 + 84))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v6 = *(_DWORD *)(a1 + 80);
    }
    v7 = (uint64_t *)(*(_QWORD *)(a1 + 72) + 16 * v6);
    *v7 = v5;
    v7[1] = 0;
    v8 = *(_DWORD *)(a1 + 80);
    *(_DWORD *)(a1 + 80) = v8 + 1;
    *(_DWORD *)(v4 + 8) = v8;
  }
  else
  {
    v8 = *(_DWORD *)(v10 + 8);
  }
  return *(_QWORD *)(a1 + 72) + 16 * v8 + 8;
}

void sub_22E794E0C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_22E794E68()
{
  unint64_t v0;
  uint64_t *v1;

  return sub_22E79C050(v1, v0);
}

void sub_22E798084(uint64_t *a1, uint64_t a2)
{
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void **v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _DWORD *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  int64_t v66;
  char *v67;
  char *v68;
  size_t v69;
  uint64_t v70;
  char *v71;
  unint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  _QWORD *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  unint64_t v87;
  _QWORD *i;
  void *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  size_t v97;
  unint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  _QWORD *v105;
  unsigned int v106;
  int v107;
  int v108;
  void *v109;
  void *v110[2];
  __int128 v111;
  uint64_t v112;
  uint64_t v113;

  v113 = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 28) & 0x7F;
  v5 = v4 > 0x3B;
  v6 = (1 << v4) & 0x800004100000000;
  v7 = v5 || v6 == 0;
  if (v7
    && (sub_22EFC7864(a2) & 1) == 0
    && (*(_DWORD *)(a2 + 28) & 0x7F) != 0x40
    && (*(_DWORD *)(a2 + 28) & 0x7F) != 0x27)
  {
    v8 = sub_22E7B5764(*(_QWORD *)(a1[1] + 8), *(_QWORD *)(a1[1] + 16), a1[1] + 32, (_DWORD *)(a1[1] + 24));
    v9 = sub_22E7B5764(*(_QWORD *)(a1[1] + 8), *(_QWORD *)(a1[1] + 16), a1[1] + 32, (_DWORD *)(a1[1] + 24));
    if (v9)
      v10 = v9;
    else
      v10 = v8;
    v11 = *a1;
    v110[0] = 0;
    v12 = sub_22E7B57A0(*(_QWORD *)(v11 + 10768), *(_DWORD *)(v11 + 10784), v8, v110);
    v13 = 0;
    if (v12)
      v13 = *((_QWORD *)v110[0] + 1);
    if (v13)
      v8 = v13;
    if (v8 == v10)
    {
      v14 = v10 & 0xFFFFFFFFFFFFFFFBLL;
    }
    else
    {
      v90 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 128) + 2032, 16, 3);
      *(_QWORD *)v90 = v8;
      *(_QWORD *)(v90 + 8) = v10;
      v14 = v90 | 4;
    }
    goto LABEL_32;
  }
  v15 = sub_22E779F8C(*(_QWORD *)(a1[1] + 8), *(_QWORD *)(a1[1] + 16), a1[1] + 32, (_DWORD *)(a1[1] + 24));
  v16 = sub_22E779F8C(*(_QWORD *)(a1[1] + 8), *(_QWORD *)(a1[1] + 16), a1[1] + 32, (_DWORD *)(a1[1] + 24));
  v17 = *a1;
  v18 = *(char **)(*a1 + 9208);
  v19 = *(char **)(*a1 + 9200);
  v20 = v18 - v19;
  if (v18 == v19)
    v21 = 0;
  else
    v21 = 32 * (v18 - v19) - 1;
  if (v16)
    v22 = v16;
  else
    v22 = v15;
  v23 = *(_QWORD *)(v17 + 9224);
  v24 = *(_QWORD *)(v17 + 9232);
  v25 = v24 + v23;
  if (v21 == v24 + v23)
  {
    v26 = (void **)(v17 + 9192);
    if (v23 < 0x100)
    {
      v80 = *(char **)(v17 + 9216);
      v81 = *(char **)(v17 + 9192);
      if (v20 < v80 - v81)
      {
        if (v80 != v18)
        {
          v110[0] = operator new(0x1000uLL);
          sub_22F2C31E8(v17 + 9192, v110);
          goto LABEL_28;
        }
        v108 = v22;
        v110[0] = operator new(0x1000uLL);
        sub_22F2C331C((const void **)(v17 + 9192), v110);
        v82 = *(_QWORD **)(v17 + 9200);
        v85 = *v82;
        v83 = (char *)(v82 + 1);
        v84 = v85;
        *(_QWORD *)(v17 + 9200) = v83;
        v86 = *(char **)(v17 + 9208);
        if (v86 == *(char **)(v17 + 9216))
        {
          v91 = (char *)*v26;
          if (v83 <= *v26)
          {
            if (v86 == v91)
              v98 = 1;
            else
              v98 = (v86 - v91) >> 2;
            if (v98 >> 61)
              goto LABEL_97;
            v99 = (char *)operator new(8 * v98);
            v100 = &v99[8 * (v98 >> 2)];
            v101 = v86 - v83;
            v7 = v86 == v83;
            v86 = v100;
            if (!v7)
            {
              v86 = &v100[v101 & 0xFFFFFFFFFFFFFFF8];
              v102 = 8 * (v101 >> 3);
              v103 = &v99[8 * (v98 >> 2)];
              do
              {
                v104 = *(_QWORD *)v83;
                v83 += 8;
                *(_QWORD *)v103 = v104;
                v103 += 8;
                v102 -= 8;
              }
              while (v102);
            }
            *(_QWORD *)(v17 + 9192) = v99;
            *(_QWORD *)(v17 + 9200) = v100;
            *(_QWORD *)(v17 + 9208) = v86;
            *(_QWORD *)(v17 + 9216) = &v99[8 * v98];
            if (v91)
            {
              operator delete(v91);
              v86 = *(char **)(v17 + 9208);
            }
          }
          else
          {
            v92 = (v83 - (_BYTE *)*v26) >> 3;
            if (v92 >= -1)
              v93 = v92 + 1;
            else
              v93 = v92 + 2;
            v94 = -(v93 >> 1);
            v95 = v93 >> 1;
            v96 = &v83[-8 * v95];
            v97 = v86 - v83;
            if (v97)
            {
              memmove(&v83[-8 * v95], v83, v97);
              v83 = *(char **)(v17 + 9200);
            }
            v86 = &v96[v97];
            *(_QWORD *)(v17 + 9208) = v86;
            *(_QWORD *)(v17 + 9200) = &v83[8 * v94];
          }
        }
        *(_QWORD *)v86 = v84;
        *(_QWORD *)(v17 + 9208) += 8;
        v22 = v108;
        goto LABEL_28;
      }
      if (v80 == v81)
        v87 = 1;
      else
        v87 = (v80 - v81) >> 2;
      v112 = v17 + 9216;
      if (!(v87 >> 61))
      {
        v110[0] = operator new(8 * v87);
        v110[1] = (char *)v110[0] + v20;
        *(_QWORD *)&v111 = (char *)v110[0] + v20;
        *((_QWORD *)&v111 + 1) = (char *)v110[0] + 8 * v87;
        v109 = operator new(0x1000uLL);
        sub_22F2C31E8((uint64_t)v110, &v109);
        for (i = *(_QWORD **)(v17 + 9208); i != *(_QWORD **)(v17 + 9200); sub_22F2C331C((const void **)v110, i))
          --i;
        v89 = *v26;
        *(_OWORD *)v26 = *(_OWORD *)v110;
        *(_OWORD *)(v17 + 9208) = v111;
        if (v89)
          operator delete(v89);
        goto LABEL_28;
      }
    }
    else
    {
      *(_QWORD *)(v17 + 9224) = v23 - 256;
      v29 = *(_QWORD *)v19;
      v27 = v19 + 8;
      v28 = v29;
      *(_QWORD *)(v17 + 9200) = v27;
      if (v18 != *(char **)(v17 + 9216))
      {
LABEL_27:
        *(_QWORD *)v18 = v28;
        *(_QWORD *)(v17 + 9208) += 8;
LABEL_28:
        v19 = *(char **)(v17 + 9200);
        v24 = *(_QWORD *)(v17 + 9232);
        v25 = *(_QWORD *)(v17 + 9224) + v24;
        goto LABEL_29;
      }
      v107 = v22;
      v60 = (char *)*v26;
      if (v27 > *v26)
      {
        v61 = (v27 - (_BYTE *)*v26) >> 3;
        if (v61 >= -1)
          v62 = v61 + 1;
        else
          v62 = v61 + 2;
        v63 = -(v62 >> 1);
        v64 = v62 >> 1;
        v65 = &v27[-8 * v64];
        v66 = v18 - v27;
        if (v18 != v27)
        {
          v67 = &v27[-8 * v64];
          v68 = v27;
          v69 = v18 - v27;
          v70 = v63;
          memmove(v67, v68, v69);
          v63 = v70;
          v18 = *(char **)(v17 + 9200);
        }
        v71 = &v18[8 * v63];
        v18 = &v65[v66];
        *(_QWORD *)(v17 + 9208) = &v65[v66];
        *(_QWORD *)(v17 + 9200) = v71;
        v22 = v107;
        goto LABEL_27;
      }
      if (v18 == v60)
        v72 = 1;
      else
        v72 = (v18 - v60) >> 2;
      if (!(v72 >> 61))
      {
        v73 = (char *)operator new(8 * v72);
        v74 = &v73[8 * (v72 >> 2)];
        v75 = &v73[8 * v72];
        v76 = v18 - v27;
        v7 = v18 == v27;
        v18 = v74;
        v22 = v107;
        if (!v7)
        {
          v18 = &v74[v76 & 0xFFFFFFFFFFFFFFF8];
          v77 = 8 * (v76 >> 3);
          v78 = v74;
          do
          {
            v79 = *(_QWORD *)v27;
            v27 += 8;
            *(_QWORD *)v78 = v79;
            v78 += 8;
            v77 -= 8;
          }
          while (v77);
        }
        *(_QWORD *)(v17 + 9192) = v73;
        *(_QWORD *)(v17 + 9200) = v74;
        *(_QWORD *)(v17 + 9208) = v18;
        *(_QWORD *)(v17 + 9216) = v75;
        if (v60)
        {
          operator delete(v60);
          v18 = *(char **)(v17 + 9208);
        }
        goto LABEL_27;
      }
    }
LABEL_97:
    sub_22E3B3F8C();
  }
LABEL_29:
  v30 = *(_QWORD *)&v19[(v25 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v25;
  *(_QWORD *)v30 = a2;
  *(_DWORD *)(v30 + 8) = v15;
  *(_DWORD *)(v30 + 12) = v22;
  *(_QWORD *)(v17 + 9232) = v24 + 1;
  v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 128) + 1960) + 80);
  v32 = sub_22E3CD31C((uint64_t *)(v31 + 72), v31);
  v33 = v32 + 40;
  if (!v32)
    v33 = 0;
  v14 = v33 & 0xFFFFFFFFFFFFFFFBLL;
LABEL_32:
  *(_QWORD *)(a2 + 16) = v14;
  *(_DWORD *)(a2 + 24) = *((_DWORD *)a1 + 9);
  v34 = a1[1];
  v35 = *(unsigned int *)(v34 + 24);
  *(_DWORD *)(v34 + 24) = v35 + 1;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a2 + 28) & 0xFFFFFF7F | ((*(_QWORD *)(*(_QWORD *)(v34 + 32) + 8 * v35) & 1) << 7);
  v36 = a1[1];
  v37 = *(unsigned int *)(v36 + 24);
  v38 = v37 + 1;
  *(_DWORD *)(v36 + 24) = v37 + 1;
  v39 = *(_QWORD *)(v36 + 32);
  if (*(_QWORD *)(v39 + 8 * v37))
  {
    v110[0] = &v111;
    v110[1] = (void *)0x400000000;
    sub_22E798860(v36, (uint64_t)v110);
    sub_22EFCA91C(a2, (uint64_t)v110, *(_QWORD *)(*a1 + 128));
    if (v110[0] != &v111)
      free(v110[0]);
    v36 = a1[1];
    v38 = *(_DWORD *)(v36 + 24);
    v39 = *(_QWORD *)(v36 + 32);
  }
  *(_DWORD *)(v36 + 24) = v38 + 1;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a2 + 28) & 0xFFFFFDFF | ((*(_QWORD *)(v39 + 8 * v38) != 0) << 9);
  v40 = a1[1];
  v41 = *(unsigned int *)(v40 + 24);
  *(_DWORD *)(v40 + 24) = v41 + 1;
  v42 = *(_QWORD *)(*(_QWORD *)(v40 + 32) + 8 * v41);
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a2 + 28) & 0xFFFFFBFF | ((v42 & 1) << 10);
  *((_BYTE *)a1 + 65) |= v42 & 1;
  v43 = a1[1];
  v44 = *(unsigned int *)(v43 + 24);
  *(_DWORD *)(v43 + 24) = v44 + 1;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a2 + 28) & 0xFFFFF7FF | ((*(_QWORD *)(*(_QWORD *)(v43 + 32) + 8 * v44) != 0) << 11);
  v45 = a1[1];
  v46 = *(unsigned int *)(v45 + 24);
  *(_DWORD *)(v45 + 24) = v46 + 1;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a2 + 28) & 0xFFFFEFFF | ((*(_QWORD *)(*(_QWORD *)(v45 + 32) + 8 * v46) != 0) << 12);
  v47 = a1[1];
  v48 = *(unsigned int *)(v47 + 24);
  *(_DWORD *)(v47 + 24) = v48 + 1;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a2 + 28) & 0xFFFF1FFF | ((*(_QWORD *)(*(_QWORD *)(v47 + 32) + 8 * v48) & 3) << 13) | 0x8000;
  v49 = a1[1];
  v50 = *(unsigned int *)(v49 + 24);
  *(_DWORD *)(v49 + 24) = v50 + 1;
  v51 = *(_QWORD *)(v49 + 32);
  v52 = *(_QWORD *)(v51 + 8 * v50);
  if (*(_DWORD *)(v49 + 40) == (_DWORD)v50 + 1
    || (*(_DWORD *)(v49 + 24) = v50 + 2,
        (v53 = sub_22E76C40C(*(_QWORD *)(v49 + 8), *(_QWORD *)(v49 + 16), *(_QWORD *)(v51 + 8 * (v50 + 1)))) == 0))
  {
    if (v52)
    {
      v59 = *(_QWORD *)(a2 + 8) | 6;
      goto LABEL_43;
    }
  }
  else
  {
    v54 = v53;
    v55 = 6;
    if (!v52)
      v55 = 4;
    v56 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF9;
    *(_QWORD *)(a2 + 8) = v56 | v55;
    *(_DWORD *)(a2 - 8) = v53;
    if (!v52)
    {
      v57 = *a1;
      if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 128) + 2000) + 20) & 0x200000000000000) == 0)
      {
        if (*(_DWORD *)(v57 + 4208) < v54)
        {
          sub_22E769C10(v57, "submodule ID out of range in AST file", 0x25uLL);
          return;
        }
        v58 = *(_DWORD **)(*(_QWORD *)(v57 + 4200) + 8 * (v54 - 1));
        v110[0] = v58;
        if (v58)
        {
          if (v58[337] == 1)
          {
            v59 = v56 | 2;
LABEL_43:
            *(_QWORD *)(a2 + 8) = v59;
            return;
          }
          v105 = sub_22F2BE60C(v57 + 4312, (uint64_t *)v110);
          v106 = *((_DWORD *)v105 + 4);
          if (v106 >= *((_DWORD *)v105 + 5))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v106 = *((_DWORD *)v105 + 4);
          }
          *(_QWORD *)(v105[1] + 8 * v106) = a2;
          ++*((_DWORD *)v105 + 4);
        }
      }
    }
  }
}

uint64_t sub_22E798860(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = *(unsigned int *)(result + 24);
  *(_DWORD *)(result + 24) = v2 + 1;
  v3 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8 * v2);
  if ((_DWORD)v3)
  {
    v5 = result;
    do
    {
      result = sub_22E7A0338(v5);
      v6 = result;
      v7 = *(unsigned int *)(a2 + 8);
      if (v7 >= *(unsigned int *)(a2 + 12))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v7 = *(unsigned int *)(a2 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = v6;
      ++*(_DWORD *)(a2 + 8);
      LODWORD(v3) = v3 - 1;
    }
    while ((_DWORD)v3);
  }
  return result;
}

uint64_t sub_22E7988F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  sub_22E798084((uint64_t *)a1, a2);
  sub_22E7862BC(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(a2 + 40) = v4;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(unsigned int *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v6 + 1;
  v7 = *(_QWORD *)(v5 + 32);
  *(_DWORD *)(a1 + 44) = *(_QWORD *)(v7 + 8 * v6);
  v8 = *(_QWORD *)(v5 + 8);
  v9 = *(_QWORD *)(v5 + 16);
  v10 = *(unsigned int *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v10 + 1;
  HIDWORD(v11) = *(_QWORD *)(v7 + 8 * v10);
  LODWORD(v11) = HIDWORD(v11);
  *(_DWORD *)(a2 + 56) = sub_22E77BAB4(v8, v9, v11 >> 1);
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(unsigned int *)(v12 + 24);
  *(_DWORD *)(v12 + 24) = v13 + 1;
  result = sub_22E77A180(*(_QWORD *)(v12 + 8), *(_QWORD *)(v12 + 16), *(_QWORD *)(*(_QWORD *)(v12 + 32) + 8 * v13));
  *(_DWORD *)(a1 + 40) = result;
  return result;
}

uint64_t sub_22E798980(uint64_t *a1, unint64_t a2)
{
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  int v20;
  uint64_t v21;
  BOOL v22;
  unint64_t *v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t **v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  if (a2)
    v4 = (unint64_t *)(a2 + 64);
  else
    v4 = 0;
  v5 = sub_22E779F8C(*(_QWORD *)(a1[1] + 8), *(_QWORD *)(a1[1] + 16), a1[1] + 32, (_DWORD *)(a1[1] + 24));
  if ((_DWORD)v5)
  {
    v6 = v5;
    v7 = a1[1];
    v8 = *(_QWORD *)(v7 + 32);
    v9 = *(_DWORD *)(v7 + 24);
    v10 = v9 + 1;
    *(_DWORD *)(v7 + 24) = v9 + 1;
    v11 = *(_QWORD *)(v8 + 8 * v9);
    if ((_DWORD)v11)
    {
      v12 = v11 - 1;
      if ((_DWORD)v11 == 1)
      {
        v17 = 0;
      }
      else
      {
        do
        {
          v13 = a1[1];
          v14 = *(_QWORD *)(v13 + 8);
          v15 = sub_22E779F8C(v14, *(_QWORD *)(v13 + 16), v13 + 32, (_DWORD *)(v13 + 24));
          v16 = sub_22E77F870(v14, v15);
          --v12;
        }
        while (v12);
        v17 = v16;
        v7 = a1[1];
        v10 = *(_DWORD *)(v7 + 24);
        v8 = *(_QWORD *)(v7 + 32);
      }
      *(_DWORD *)(v7 + 24) = v10 + 1;
      v18 = *(_QWORD *)(v8 + 8 * v10);
      if (v18)
        v19 = (unint64_t *)(a1[3] - v18);
      else
        v19 = 0;
      v20 = 1;
    }
    else
    {
      v35 = *(_QWORD *)(v7 + 8);
      v36 = sub_22E779F8C(v35, *(_QWORD *)(v7 + 16), v7 + 32, (_DWORD *)(v7 + 24));
      sub_22E77F870(v35, v36);
      v19 = 0;
      v17 = 0;
      v20 = 0;
    }
  }
  else
  {
    v19 = 0;
    v17 = 0;
    v20 = 1;
    v6 = *((unsigned int *)a1 + 8);
  }
  v21 = sub_22E77F870(*a1, v6);
  v22 = v21 + 64 == (_QWORD)v4;
  if (!v21)
    v22 = a2 == 0;
  if (!v22)
  {
    *v4 = v21 & 0xFFFFFFFFFFFFFFFCLL;
    v4[1] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 32))(v21);
  }
  if (v20)
  {
    if (a2)
      v23 = v4 - 8;
    else
      v23 = 0;
    v24 = *a1;
    v25 = *(_DWORD *)(*a1 + 8784);
    if (v25 >= *(_DWORD *)(*a1 + 8788))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v25 = *(_DWORD *)(v24 + 8784);
    }
    v26 = (unint64_t **)(*(_QWORD *)(v24 + 8776) + 16 * v25);
    *v26 = v23;
    v26[1] = v19;
    ++*(_DWORD *)(v24 + 8784);
  }
  sub_22E7988F0((uint64_t)a1, a2);
  v27 = (unint64_t)sub_22E782300(a1[1]);
  v28 = a1[1];
  v29 = *(unsigned int *)(v28 + 24);
  v30 = v29 + 1;
  *(_DWORD *)(v28 + 24) = v29 + 1;
  v31 = *(_QWORD *)(v28 + 32);
  if (*(_QWORD *)(v31 + 8 * v29))
  {
    v37 = v27;
    if (*(_DWORD *)(v28 + 40) <= v30)
    {
      v41 = 0;
    }
    else
    {
      v39 = *(_QWORD *)(v28 + 8);
      v38 = *(_QWORD *)(v28 + 16);
      *(_DWORD *)(v28 + 24) = v29 + 2;
      v40 = sub_22E77A180(v39, v38, *(_QWORD *)(v31 + 8 * v30));
      v41 = sub_22E77D8C8(v39, v40);
    }
    v42 = sub_22EFC72E8(a2);
    v43 = sub_22E3CD3D4(v42 + 2032, 16, 3);
    *(_QWORD *)v43 = v37;
    *(_QWORD *)(v43 + 8) = v41;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(a2 + 80) & 3 | v43 | 4;
    v28 = a1[1];
  }
  else
  {
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(a2 + 80) & 3 | v27 & 0xFFFFFFFFFFFFFFFBLL;
  }
  v32 = *(_QWORD *)(v28 + 8);
  v33 = sub_22E779F8C(v32, *(_QWORD *)(v28 + 16), v28 + 32, (_DWORD *)(v28 + 24));
  sub_22E77F870(v32, v33);
  return v17;
}

_QWORD *sub_22E798C70(_QWORD *result, _BYTE *a2, uint64_t *a3)
{
  _QWORD *v5;
  uint64_t v6;
  _BYTE v7[16];
  uint64_t v8;

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*result + 128) + 2000) + 20) & 0x200000000000) != 0
    && (*a2 & 3) != 0)
  {
    v5 = result;
    v6 = *a3;
    if (v6)
    {
      return (_QWORD *)sub_22E7A0244(result, (uint64_t)a2, v6, (uint64_t)a3);
    }
    else
    {
      sub_22E7B0FFC((uint64_t)v7, result, (uint64_t)(a2 - 64));
      if (v8)
      {
        if ((*(_DWORD *)(v8 + 28) & 0x7Fu) - 42 >= 0xFFFFFFFD)
          sub_22E7A0244(v5, (uint64_t)a2, v8, (uint64_t)a3);
      }
      return (_QWORD *)sub_22E7B0E58((uint64_t)v7);
    }
  }
  return result;
}

uint64_t sub_22E798D30(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57[2];

  if (a2)
    v4 = a2 + 96;
  else
    v4 = 0;
  v5 = sub_22E779F8C(*(_QWORD *)(a1[1] + 8), *(_QWORD *)(a1[1] + 16), a1[1] + 32, (_DWORD *)(a1[1] + 24));
  v6 = *((_DWORD *)a1 + 8) == v5;
  if ((_DWORD)v5)
  {
    v7 = v5;
    v8 = a1[1];
    v9 = *(_QWORD *)(v8 + 32);
    v10 = *(_DWORD *)(v8 + 24);
    v11 = v10 + 1;
    *(_DWORD *)(v8 + 24) = v10 + 1;
    v12 = *(_QWORD *)(v9 + 8 * v10);
    if ((_DWORD)v12)
    {
      v13 = v12 - 1;
      v6 = v12 == 1;
      if ((_DWORD)v12 == 1)
      {
        v18 = 0;
      }
      else
      {
        do
        {
          v14 = a1[1];
          v15 = *(_QWORD *)(v14 + 8);
          v16 = sub_22E779F8C(v15, *(_QWORD *)(v14 + 16), v14 + 32, (_DWORD *)(v14 + 24));
          v17 = sub_22E77F870(v15, v16);
          --v13;
        }
        while (v13);
        v18 = v17;
        v8 = a1[1];
        v11 = *(_DWORD *)(v8 + 24);
        v9 = *(_QWORD *)(v8 + 32);
      }
      *(_DWORD *)(v8 + 24) = v11 + 1;
      v19 = *(_QWORD *)(v9 + 8 * v11);
      if (v19)
        v20 = a1[3] - v19;
      else
        v20 = 0;
      v21 = 1;
    }
    else
    {
      v45 = *(_QWORD *)(v8 + 8);
      v46 = sub_22E779F8C(v45, *(_QWORD *)(v8 + 16), v8 + 32, (_DWORD *)(v8 + 24));
      sub_22E77F870(v45, v46);
      v20 = 0;
      v18 = 0;
      v21 = 0;
    }
  }
  else
  {
    v20 = 0;
    v18 = 0;
    v6 = 1;
    v21 = 1;
    v7 = *((unsigned int *)a1 + 8);
  }
  v22 = sub_22E77F870(*a1, v7);
  v23 = v22 + 96 == v4;
  if (!v22)
    v23 = a2 == 0;
  if (!v23)
  {
    *(_QWORD *)v4 = v22 & 0xFFFFFFFFFFFFFFFCLL;
    *(_QWORD *)(v4 + 8) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22);
  }
  if (v21)
  {
    if (a2)
      v24 = v4 - 96;
    else
      v24 = 0;
    v25 = *a1;
    v26 = *(_DWORD *)(*a1 + 8784);
    if (v26 >= *(_DWORD *)(*a1 + 8788))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v26 = *(_DWORD *)(v25 + 8784);
    }
    v27 = (uint64_t *)(*(_QWORD *)(v25 + 8776) + 16 * v26);
    *v27 = v24;
    v27[1] = v20;
    ++*(_DWORD *)(v25 + 8784);
  }
  v28 = 0x100000000;
  if (!v6)
    v28 = 0;
  v57[0] = v18;
  v57[1] = v28 | v7;
  sub_22E7988F0((uint64_t)a1, a2);
  v29 = a1[1];
  v30 = *(unsigned int *)(v29 + 24);
  v31 = *(_QWORD *)(*(_QWORD *)(v29 + 32) + 8 * v30);
  *(_DWORD *)(v29 + 24) = v30 + 1;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a2 + 28) & 0xC000FFFF | ((v31 & 0x3FFF) << 16);
  v32 = a1[1];
  v33 = *(unsigned int *)(v32 + 24);
  *(_DWORD *)(v32 + 24) = v33 + 1;
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a2 + 72) & 0xFFFF1FFF | ((*(_QWORD *)(*(_QWORD *)(v32 + 32) + 8 * v33) & 7) << 13);
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 35 >= 3)
  {
    v47 = a1[1];
    v48 = *(unsigned int *)(v47 + 24);
    v49 = v48 + 1;
    v50 = *(_QWORD *)(*(_QWORD *)(v47 + 32) + 8 * v48);
    *(_DWORD *)(v47 + 24) = v49;
    *(_DWORD *)(a2 + 72) = *(_DWORD *)(a2 + 72) & 0xFFFEFFFF | ((v50 != 0) << 16);
  }
  v34 = a1[1];
  v35 = *(unsigned int *)(v34 + 24);
  *(_DWORD *)(v34 + 24) = v35 + 1;
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a2 + 72) & 0xFFFBFFFF | ((*(_QWORD *)(*(_QWORD *)(v34 + 32) + 8 * v35) != 0) << 18);
  v36 = a1[1];
  v37 = *(unsigned int *)(v36 + 24);
  *(_DWORD *)(v36 + 24) = v37 + 1;
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a2 + 72) & 0xFFF7FFFF | ((*(_QWORD *)(*(_QWORD *)(v36 + 32) + 8 * v37) != 0) << 19);
  v38 = a1[1];
  v39 = *(unsigned int *)(v38 + 24);
  *(_DWORD *)(v38 + 24) = v39 + 1;
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a2 + 72) & 0xFFDFFFFF | ((*(_QWORD *)(*(_QWORD *)(v38 + 32) + 8 * v39) != 0) << 21);
  *(_QWORD *)(a2 + 112) = sub_22E7868D0(*(_QWORD *)(a1[1] + 8), *(_QWORD *)(a1[1] + 16), (_QWORD *)(a1[1] + 32), (_DWORD *)(a1[1] + 24));
  v40 = a1[1];
  v41 = *(_QWORD *)(v40 + 32);
  v42 = *(_DWORD *)(v40 + 24);
  *(_DWORD *)(v40 + 24) = v42 + 1;
  v43 = *(_QWORD *)(v41 + 8 * v42);
  if (v43)
  {
    if (v43 == 1)
    {
      v51 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 128) + 2032, 32, 3);
      *(_OWORD *)v51 = 0u;
      *(_OWORD *)(v51 + 16) = 0u;
      sub_22F2B414C(a1[1], v51);
      *(_QWORD *)(a2 + 120) = v51 | 4;
    }
    else
    {
      *((_DWORD *)a1 + 12) = sub_22E779F8C(*(_QWORD *)(v40 + 8), *(_QWORD *)(v40 + 16), v40 + 32, (_DWORD *)(v40 + 24));
      v52 = a1[1];
      v54 = *(_QWORD *)(v52 + 8);
      v53 = *(_QWORD *)(v52 + 16);
      v55 = *(unsigned int *)(v52 + 24);
      *(_DWORD *)(v52 + 24) = v55 + 1;
      v56 = sub_22E768E34(v54, v53, *(_QWORD *)(*(_QWORD *)(v52 + 32) + 8 * v55));
      a1[7] = sub_22E785944(v54, v56);
    }
  }
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 35 >= 3)
    sub_22E799150(a1, (_BYTE *)v4, v57);
  return v18;
}

_QWORD *sub_22E799150(_QWORD *result, _BYTE *a2, uint64_t *a3)
{
  _QWORD *v5;
  uint64_t v6;
  _BYTE v7[16];
  uint64_t v8;

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*result + 128) + 2000) + 20) & 0x200000000000) != 0
    && (*a2 & 3) != 0)
  {
    v5 = result;
    v6 = *a3;
    if (v6)
    {
      return (_QWORD *)sub_22E79FD3C(result, (uint64_t)a2, v6, (uint64_t)a3);
    }
    else
    {
      sub_22E7B0FFC((uint64_t)v7, result, (uint64_t)(a2 - 96));
      if (v8)
      {
        if ((*(_DWORD *)(v8 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFB)
          sub_22E79FD3C(v5, (uint64_t)a2, v8, (uint64_t)a3);
      }
      return (_QWORD *)sub_22E7B0E58((uint64_t)v7);
    }
  }
  return result;
}

uint64_t sub_22E799210(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;

  result = sub_22E798D30(a1, a2);
  v5 = a1[1];
  v6 = *(unsigned int *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v6 + 1;
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFF7FFFFFLL | ((unint64_t)(*(_QWORD *)(*(_QWORD *)(v5 + 32) + 8 * v6) != 0) << 23);
  v7 = a1[1];
  v8 = *(unsigned int *)(v7 + 24);
  *(_DWORD *)(v7 + 24) = v8 + 1;
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFEFFFFFFLL | ((unint64_t)(*(_QWORD *)(*(_QWORD *)(v7 + 32) + 8 * v8) != 0) << 24);
  v9 = a1[1];
  v10 = *(unsigned int *)(v9 + 24);
  *(_DWORD *)(v9 + 24) = v10 + 1;
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFDFFFFFFLL | ((unint64_t)(*(_QWORD *)(*(_QWORD *)(v9 + 32) + 8 * v10) != 0) << 25);
  v11 = a1[1];
  v12 = *(unsigned int *)(v11 + 24);
  *(_DWORD *)(v11 + 24) = v12 + 1;
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFBFFFFFFLL | ((unint64_t)(*(_QWORD *)(*(_QWORD *)(v11 + 32) + 8 * v12) != 0) << 26);
  v13 = a1[1];
  v14 = *(unsigned int *)(v13 + 24);
  *(_DWORD *)(v13 + 24) = v14 + 1;
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFEFFFFFFFLL | ((unint64_t)(*(_QWORD *)(*(_QWORD *)(v13 + 32) + 8 * v14) != 0) << 28);
  v15 = a1[1];
  v16 = *(unsigned int *)(v15 + 24);
  *(_DWORD *)(v15 + 24) = v16 + 1;
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFDFFFFFFFLL | ((unint64_t)(*(_QWORD *)(*(_QWORD *)(v15 + 32) + 8 * v16) != 0) << 29);
  v17 = a1[1];
  v18 = *(unsigned int *)(v17 + 24);
  *(_DWORD *)(v17 + 24) = v18 + 1;
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFBFFFFFFFLL | ((unint64_t)(*(_QWORD *)(*(_QWORD *)(v17 + 32) + 8 * v18) != 0) << 30);
  v19 = a1[1];
  v20 = *(unsigned int *)(v19 + 24);
  *(_DWORD *)(v19 + 24) = v20 + 1;
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 72) & 0xFFFFFFFF7FFFFFFFLL | ((unint64_t)(*(_QWORD *)(*(_QWORD *)(v19 + 32) + 8 * v20) != 0) << 31);
  v21 = a1[1];
  v22 = *(unsigned int *)(v21 + 24);
  *(_DWORD *)(v21 + 24) = v22 + 1;
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 72) & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)(*(_QWORD *)(*(_QWORD *)(v21 + 32) + 8 * v22) != 0) << 32);
  v23 = a1[1];
  v24 = *(unsigned int *)(v23 + 24);
  *(_DWORD *)(v23 + 24) = v24 + 1;
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 72) & 0xFFFFFFFDFFFFFFFFLL | ((unint64_t)(*(_QWORD *)(*(_QWORD *)(v23 + 32) + 8 * v24) != 0) << 33);
  v25 = a1[1];
  v26 = *(unsigned int *)(v25 + 24);
  *(_DWORD *)(v25 + 24) = v26 + 1;
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 72) & 0xFFFFFFFBFFFFFFFFLL | ((unint64_t)(*(_QWORD *)(*(_QWORD *)(v25 + 32) + 8 * v26) != 0) << 34);
  v27 = a1[1];
  v28 = *(unsigned int *)(v27 + 24);
  *(_DWORD *)(v27 + 24) = v28 + 1;
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 72) & 0xFFFFFFE7FFFFFFFFLL | ((*(_QWORD *)(*(_QWORD *)(v27 + 32) + 8 * v28) & 3) << 35);
  v29 = a1[1];
  v30 = *(unsigned int *)(v29 + 24);
  v31 = v30 + 1;
  v32 = *(_QWORD *)(*(_QWORD *)(v29 + 32) + 8 * v30);
  *(_DWORD *)(v29 + 24) = v31;
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 72) & 0x3FFFFFFFFFLL | ((unint64_t)v32 << 38);
  return result;
}

uint64_t sub_22E799460(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  sub_22E798084((uint64_t *)a1, a2);
  sub_22E7862BC(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(a2 + 40) = v4;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(unsigned int *)(v5 + 24);
  v7 = *(_QWORD *)(v5 + 32);
  v8 = *(_QWORD *)(v7 + 8 * v6);
  *(_DWORD *)(v5 + 24) = v6 + 1;
  *(_DWORD *)(a1 + 44) = v8;
  if ((*(_DWORD *)(a2 + 28) & 0x7Eu) - 52 <= 5)
  {
    *(_DWORD *)(v5 + 24) = v6 + 2;
    result = sub_22E77A180(*(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 16), *(_QWORD *)(v7 + 8 * (v6 + 1)));
    *(_DWORD *)(a1 + 40) = result;
  }
  else
  {
    v9 = *(unsigned int *)(v5 + 24);
    if (*(_DWORD *)(v5 + 40) <= v9)
    {
      result = 0;
    }
    else
    {
      v11 = *(_QWORD *)(v5 + 8);
      v10 = *(_QWORD *)(v5 + 16);
      *(_DWORD *)(v5 + 24) = v9 + 1;
      v12 = sub_22E77A180(v11, v10, *(_QWORD *)(v7 + 8 * v9));
      result = sub_22E77D8C8(v11, v12);
    }
    *(_QWORD *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_22E79951C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  sub_22E799460((uint64_t)a1, a2);
  v4 = a1[1];
  v5 = *(_QWORD *)(v4 + 8);
  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(unsigned int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v7);
  LODWORD(v8) = HIDWORD(v8);
  *(_DWORD *)(a2 + 64) = sub_22E77BAB4(v5, v6, v8 >> 1);
  v9 = a1[1];
  v10 = *(unsigned int *)(v9 + 24);
  v11 = v10 + 1;
  *(_DWORD *)(v9 + 24) = v10 + 1;
  if (*(_QWORD *)(*(_QWORD *)(v9 + 32) + 8 * v10))
  {
    v21 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 128) + 2032, 48, 3);
    *(_OWORD *)v21 = 0u;
    *(_OWORD *)(v21 + 16) = 0u;
    *(_OWORD *)(v21 + 32) = 0u;
    sub_22F2B414C(a1[1], v21);
    v9 = a1[1];
    v22 = *(_QWORD *)(v9 + 8);
    if (*(_DWORD *)(v22 + 10984) == 3)
    {
      v24 = *(unsigned int *)(v22 + 10848);
      v23 = *(_QWORD *)(*(_QWORD *)(v22 + 10840) + 8 * v24 - 8);
      *(_DWORD *)(v22 + 10848) = v24 - 1;
    }
    else
    {
      v23 = sub_22E7B94C8(v22, *(_QWORD *)(v9 + 16));
      v9 = a1[1];
    }
    *(_QWORD *)(v21 + 40) = v23;
    *(_QWORD *)(a2 + 56) = v21 | 4;
    v11 = *(_DWORD *)(v9 + 24);
  }
  if (*(_DWORD *)(v9 + 40) <= v11
    || (v13 = *(_QWORD *)(v9 + 8),
        v12 = *(_QWORD *)(v9 + 16),
        *(_DWORD *)(v9 + 24) = v11 + 1,
        v14 = sub_22E77A180(v13, v12, *(_QWORD *)(*(_QWORD *)(v9 + 32) + 8 * v11)),
        v15 = sub_22E77D8C8(v13, v14),
        v15 < 0x10))
  {
    result = 0;
  }
  else
  {
    v16 = v15;
    v17 = *(_QWORD *)(*a1 + 128);
    v18 = sub_22F11598C(v15);
    result = sub_22E3CD3D4(v17 + 2032, v18 + 8, 3);
    *(_QWORD *)result = v16;
  }
  v20 = *(_QWORD *)(a2 + 56);
  if ((v20 & 4) != 0)
    *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFFF8) + 32) = result;
  else
    *(_QWORD *)(a2 + 56) = result & 0xFFFFFFFFFFFFFFFBLL;
  return result;
}

void sub_22E7996A0(_QWORD *a1, unint64_t a2)
{
  _BYTE *v4;
  unint64_t *v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  unint64_t *v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t **v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int v42;
  unint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int *v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  _OWORD *v128;
  _OWORD *v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _OWORD *v151;
  _OWORD *v152;
  __int128 v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _BYTE *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  void **v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t NodeOrInsertPos;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unsigned int v187;
  _BYTE *v188;
  uint64_t v189;
  uint64_t v190;
  void *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  _DWORD *v201;
  unsigned int v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unsigned int v209;
  uint64_t v210;
  _OWORD *v211;
  _OWORD *v212;
  __int128 v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226[2];
  void *v227[2];
  _DWORD v228[32];
  void *v229;
  uint64_t v230;
  _BYTE v231[256];
  unint64_t v232;
  void *v233;
  uint64_t v234;
  _BYTE v235[256];
  void *v236;
  uint64_t v237;
  _QWORD v238[26];

  v238[24] = *MEMORY[0x24BDAC8D0];
  v4 = (_BYTE *)(a2 + 104);
  if (a2)
    v5 = (unint64_t *)(a2 + 104);
  else
    v5 = 0;
  v6 = sub_22E779F8C(*(_QWORD *)(a1[1] + 8), *(_QWORD *)(a1[1] + 16), a1[1] + 32, (_DWORD *)(a1[1] + 24));
  v7 = *((_DWORD *)a1 + 8) == v6;
  if ((_DWORD)v6)
  {
    v8 = v6;
    v9 = a1[1];
    v10 = *(_QWORD *)(v9 + 32);
    v11 = *(_DWORD *)(v9 + 24);
    v12 = v11 + 1;
    *(_DWORD *)(v9 + 24) = v11 + 1;
    v13 = *(_QWORD *)(v10 + 8 * v11);
    if ((_DWORD)v13)
    {
      v14 = v13 - 1;
      v7 = v13 == 1;
      if ((_DWORD)v13 == 1)
      {
        v19 = 0;
      }
      else
      {
        do
        {
          v15 = a1[1];
          v16 = *(_QWORD *)(v15 + 8);
          v17 = sub_22E779F8C(v16, *(_QWORD *)(v15 + 16), v15 + 32, (_DWORD *)(v15 + 24));
          v18 = sub_22E77F870(v16, v17);
          --v14;
        }
        while (v14);
        v19 = v18;
        v9 = a1[1];
        v12 = *(_DWORD *)(v9 + 24);
        v10 = *(_QWORD *)(v9 + 32);
      }
      *(_DWORD *)(v9 + 24) = v12 + 1;
      v24 = *(_QWORD *)(v10 + 8 * v12);
      if (v24)
        v20 = (unint64_t *)(a1[3] - v24);
      else
        v20 = 0;
      v21 = 1;
    }
    else
    {
      v22 = *(_QWORD *)(v9 + 8);
      v23 = sub_22E779F8C(v22, *(_QWORD *)(v9 + 16), v9 + 32, (_DWORD *)(v9 + 24));
      sub_22E77F870(v22, v23);
      v20 = 0;
      v19 = 0;
      v21 = 0;
    }
  }
  else
  {
    v20 = 0;
    v19 = 0;
    v7 = 1;
    v21 = 1;
    v8 = *((unsigned int *)a1 + 8);
  }
  v25 = sub_22E77F870(*a1, v8);
  v26 = v25 + 104 == (_QWORD)v5;
  if (!v25)
    v26 = a2 == 0;
  if (!v26)
  {
    *v5 = v25 & 0xFFFFFFFFFFFFFFFCLL;
    v5[1] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 32))(v25);
  }
  if (v21)
  {
    if (a2)
      v27 = v5 - 13;
    else
      v27 = 0;
    v28 = *a1;
    v29 = *(_DWORD *)(*a1 + 8784);
    if (v29 >= *(_DWORD *)(*a1 + 8788))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v29 = *(_DWORD *)(v28 + 8784);
    }
    v30 = (unint64_t **)(*(_QWORD *)(v28 + 8776) + 16 * v29);
    *v30 = v27;
    v30[1] = v20;
    ++*(_DWORD *)(v28 + 8784);
  }
  v31 = 0x100000000;
  if (!v7)
    v31 = 0;
  v226[0] = v19;
  v226[1] = v31 | v8;
  sub_22E79951C(a1, a2);
  v32 = *(_QWORD *)(a2 + 56);
  if ((v32 & 4) == 0)
  {
    if (v32 >= 8)
    {
      v33 = (_QWORD *)(v32 & 0xFFFFFFFFFFFFFFF8);
      goto LABEL_33;
    }
LABEL_45:
    *(_QWORD *)(a2 + 48) = sub_22E77D8C8(*a1, *((unsigned int *)a1 + 10));
    goto LABEL_46;
  }
  v33 = *(_QWORD **)((v32 & 0xFFFFFFFFFFFFFFF8) + 32);
  if (!v33)
    goto LABEL_45;
LABEL_33:
  v34 = *(_QWORD *)(*v33 & 0xFFFFFFFFFFFFFFF0);
  if (v34)
    v35 = *(unsigned __int8 *)(v34 + 16) - 27 > 0xFFFFFFFD;
  else
    v35 = 0;
  if (!v35)
    v34 = sub_22F10CF48(v34);
  v36 = *(_QWORD *)(*(_QWORD *)(v34 + 24) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v229) = 0;
  v37 = sub_22F110500((uint64_t)&v229, v36);
  if (!v37 || *(_BYTE *)(v37 + 16) != 14)
    goto LABEL_45;
  v38 = *(_QWORD *)(a2 + 56);
  v39 = (_QWORD *)(v38 & 0xFFFFFFFFFFFFFFF8);
  if ((v38 & 4) != 0)
    v39 = (_QWORD *)v39[4];
  *(_QWORD *)(a2 + 48) = *v39;
  v40 = *a1;
  v41 = *((unsigned int *)a1 + 10);
  v42 = *(_DWORD *)(*a1 + 8512);
  if (v42 >= *(_DWORD *)(*a1 + 8516))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v42 = *(_DWORD *)(v40 + 8512);
  }
  v43 = (unint64_t *)(*(_QWORD *)(v40 + 8504) + 16 * v42);
  *v43 = a2;
  v43[1] = v41;
  ++*(_DWORD *)(v40 + 8512);
LABEL_46:
  *((_DWORD *)a1 + 10) = 0;
  *(_QWORD *)(a2 + 152) = sub_22E7861C4(a1[1], *(_QWORD *)(a2 + 40));
  v44 = a1[1];
  v45 = *(unsigned int *)(v44 + 24);
  *(_DWORD *)(v44 + 24) = v45 + 1;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a2 + 28) & 0xC000FFFF | ((*(_QWORD *)(*(_QWORD *)(v44 + 32) + 8 * v45) & 0x3FFF) << 16);
  v46 = a1[1];
  v47 = *(unsigned int *)(v46 + 24);
  *(_DWORD *)(v46 + 24) = v47 + 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a2 + 80) & 0xFFFFFFFFFFFF1FFFLL | ((*(_QWORD *)(*(_QWORD *)(v46 + 32) + 8 * v47) & 7) << 13);
  v48 = a1[1];
  v49 = *(unsigned int *)(v48 + 24);
  *(_DWORD *)(v48 + 24) = v49 + 1;
  v50 = *(_QWORD *)(*(_QWORD *)(v48 + 32) + 8 * v49) != 0;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a2 + 80) & 0xFFFFFFFFFFFCFFFFLL | (v50 << 17) | (v50 << 16);
  v51 = a1[1];
  v52 = *(unsigned int *)(v51 + 24);
  *(_DWORD *)(v51 + 24) = v52 + 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a2 + 80) & 0xFFFFFFFFFFFEFFFFLL | ((unint64_t)(*(_QWORD *)(*(_QWORD *)(v51 + 32) + 8 * v52) != 0) << 16);
  v53 = a1[1];
  v54 = *(unsigned int *)(v53 + 24);
  *(_DWORD *)(v53 + 24) = v54 + 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a2 + 80) & 0xFFFFFFFFFFFBFFFFLL | ((unint64_t)(*(_QWORD *)(*(_QWORD *)(v53 + 32) + 8 * v54) != 0) << 18);
  v55 = a1[1];
  v56 = *(unsigned int *)(v55 + 24);
  v57 = *(_QWORD *)(v55 + 32);
  v58 = *(_QWORD *)(v57 + 8 * v56);
  *(_DWORD *)(v55 + 24) = v56 + 2;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a2 + 80) & 0xFFFFFFFFFFEFFFFFLL | ((unint64_t)(*(_QWORD *)(v57 + 8 * (v56 + 1)) != 0) << 20);
  v59 = a1[1];
  v60 = *(unsigned int *)(v59 + 24);
  *(_DWORD *)(v59 + 24) = v60 + 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a2 + 80) & 0xFFFFFFFFFFDFFFFFLL | ((unint64_t)(*(_QWORD *)(*(_QWORD *)(v59 + 32) + 8 * v60) != 0) << 21);
  v61 = a1[1];
  v62 = *(unsigned int *)(v61 + 24);
  *(_DWORD *)(v61 + 24) = v62 + 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a2 + 80) & 0xFFFFFFFFFFBFFFFFLL | ((unint64_t)(*(_QWORD *)(*(_QWORD *)(v61 + 32) + 8 * v62) != 0) << 22);
  v63 = a1[1];
  v64 = *(unsigned int *)(v63 + 24);
  *(_DWORD *)(v63 + 24) = v64 + 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a2 + 80) & 0xFFFFFFFFFF7FFFFFLL | ((unint64_t)(*(_QWORD *)(*(_QWORD *)(v63 + 32) + 8 * v64) != 0) << 23);
  v65 = a1[1];
  v66 = *(unsigned int *)(v65 + 24);
  *(_DWORD *)(v65 + 24) = v66 + 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a2 + 80) & 0xFFFFFFFFFEFFFFFFLL | ((unint64_t)(*(_QWORD *)(*(_QWORD *)(v65 + 32) + 8 * v66) != 0) << 24);
  v67 = a1[1];
  v68 = *(unsigned int *)(v67 + 24);
  *(_DWORD *)(v67 + 24) = v68 + 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a2 + 80) & 0xFFFFFFFFFDFFFFFFLL | ((unint64_t)(*(_QWORD *)(*(_QWORD *)(v67 + 32) + 8 * v68) != 0) << 25);
  v69 = a1[1];
  v70 = *(unsigned int *)(v69 + 24);
  *(_DWORD *)(v69 + 24) = v70 + 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a2 + 80) & 0xFFFFFFFFFBFFFFFFLL | ((unint64_t)(*(_QWORD *)(*(_QWORD *)(v69 + 32) + 8 * v70) != 0) << 26);
  v71 = a1[1];
  v72 = *(unsigned int *)(v71 + 24);
  *(_DWORD *)(v71 + 24) = v72 + 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a2 + 80) & 0xFFFFFFFFEFFFFFFFLL | ((unint64_t)(*(_QWORD *)(*(_QWORD *)(v71 + 32) + 8 * v72) != 0) << 28);
  v73 = a1[1];
  v74 = *(unsigned int *)(v73 + 24);
  *(_DWORD *)(v73 + 24) = v74 + 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a2 + 80) & 0xFFFFFFFF3FFFFFFFLL | (*(_QWORD *)(*(_QWORD *)(v73 + 32)
                                                                                                + 8 * v74) << 30);
  v75 = a1[1];
  v76 = *(unsigned int *)(v75 + 24);
  *(_DWORD *)(v75 + 24) = v76 + 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a2 + 80) & 0xFFFFFFFDFFFFFFFFLL | ((unint64_t)(*(_QWORD *)(*(_QWORD *)(v75 + 32) + 8 * v76) != 0) << 33);
  v77 = a1[1];
  v78 = *(unsigned int *)(v77 + 24);
  *(_DWORD *)(v77 + 24) = v78 + 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a2 + 80) & 0xFFFFFFFBFFFFFFFFLL | ((unint64_t)(*(_QWORD *)(*(_QWORD *)(v77 + 32) + 8 * v78) != 0) << 34);
  v79 = a1[1];
  v80 = *(unsigned int *)(v79 + 24);
  *(_DWORD *)(v79 + 24) = v80 + 1;
  v81 = *(_QWORD *)(*(_QWORD *)(v79 + 32) + 8 * v80) != 0;
  v82 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2);
  *(_QWORD *)(v82 + 80) = *(_QWORD *)(v82 + 80) & 0xFFFFFFEFFFFFFFFFLL | ((unint64_t)v81 << 36);
  v83 = a1[1];
  v84 = *(unsigned int *)(v83 + 24);
  *(_DWORD *)(v83 + 24) = v84 + 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a2 + 80) & 0xFFFFFFFFDFFFFFFFLL | ((unint64_t)(*(_QWORD *)(*(_QWORD *)(v83 + 32) + 8 * v84) != 0) << 29);
  v85 = a1[1];
  v86 = *(unsigned int *)(v85 + 24);
  *(_DWORD *)(v85 + 24) = v86 + 1;
  *(_BYTE *)(a2 + 32) = *(_BYTE *)(a2 + 32) & 0xF8 | (*(_QWORD *)(*(_QWORD *)(v85 + 32) + 8 * v86) + 1) & 7;
  v87 = a1[1];
  v88 = *(_QWORD *)(v87 + 8);
  v89 = *(_QWORD *)(v87 + 16);
  v90 = *(unsigned int *)(v87 + 24);
  *(_DWORD *)(v87 + 24) = v90 + 1;
  HIDWORD(v91) = *(_QWORD *)(*(_QWORD *)(v87 + 32) + 8 * v90);
  LODWORD(v91) = HIDWORD(v91);
  *(_DWORD *)(a2 + 140) = sub_22E77BAB4(v88, v89, v91 >> 1);
  v92 = a1[1];
  v93 = *(unsigned int *)(v92 + 24);
  *(_DWORD *)(v92 + 24) = v93 + 1;
  *(_DWORD *)(a2 + 136) = *(_QWORD *)(*(_QWORD *)(v92 + 32) + 8 * v93);
  v94 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = v94 | 0x4000000000;
  v95 = a1[1];
  if ((v94 & 0x2000000) != 0)
  {
    v96 = *(unsigned int *)(v95 + 24);
    *(_DWORD *)(v95 + 24) = v96 + 1;
    v97 = *(_QWORD *)(*(_QWORD *)(v95 + 32) + 8 * v96);
    if ((_DWORD)v97)
    {
      v229 = v231;
      v230 = 0x800000000;
      do
      {
        v192 = a1[1];
        v193 = *(_QWORD *)(v192 + 8);
        v194 = sub_22E779F8C(v193, *(_QWORD *)(v192 + 16), v192 + 32, (_DWORD *)(v192 + 24));
        v195 = sub_22E77F870(v193, v194);
        v196 = a1[1];
        v197 = *(unsigned int *)(v196 + 24);
        *(_DWORD *)(v196 + 24) = v197 + 1;
        v198 = *(unsigned int *)(*(_QWORD *)(v196 + 32) + 8 * v197);
        v199 = v230;
        if (v230 >= (unint64_t)HIDWORD(v230))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v199 = v230;
        }
        *((_QWORD *)v229 + v199) = v198 | v195;
        v200 = (v230 + 1);
        LODWORD(v230) = v230 + 1;
        LODWORD(v97) = v97 - 1;
      }
      while ((_DWORD)v97);
      v201 = sub_22F3AC398(*(_QWORD *)(*a1 + 128), (uint64_t *)v229, v200);
      *(_QWORD *)(a2 + 80) |= 0x8000000uLL;
      *(_QWORD *)(a2 + 128) = v201;
      if (v229 != v231)
        free(v229);
      v95 = a1[1];
    }
  }
  v98 = v95 + 32;
  v99 = *(_QWORD *)(v95 + 32);
  v100 = (unsigned int *)(v95 + 24);
  v101 = *(unsigned int *)(v95 + 24);
  v102 = v101 + 1;
  *(_DWORD *)(v95 + 24) = v101 + 1;
  switch(*(_QWORD *)(v99 + 8 * v101))
  {
    case 0u:
      goto LABEL_51;
    case 1u:
      v103 = *(_QWORD *)(v95 + 8);
      v104 = sub_22E779F8C(v103, *(_QWORD *)(v95 + 16), v98, v100);
      *(_QWORD *)(a2 + 144) = sub_22E77F870(v103, v104) & 0xFFFFFFFFFFFFFFF9;
      break;
    case 2u:
      v105 = *(_QWORD *)(v95 + 8);
      v106 = sub_22E779F8C(v105, *(_QWORD *)(v95 + 16), v98, v100);
      v107 = sub_22E77F870(v105, v106);
      v108 = a1[1];
      v109 = *(unsigned int *)(v108 + 24);
      v110 = *(_QWORD *)(v108 + 32);
      v111 = *(_QWORD *)(v110 + 8 * v109);
      v112 = *(_QWORD *)(v108 + 8);
      v113 = *(_QWORD *)(v108 + 16);
      *(_DWORD *)(v108 + 24) = v109 + 2;
      HIDWORD(v114) = *(_QWORD *)(v110 + 8 * (v109 + 1));
      LODWORD(v114) = HIDWORD(v114);
      v115 = sub_22E77BAB4(v112, v113, v114 >> 1);
      v116 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 128) + 2032, 16, 3);
      *(_QWORD *)v116 = (2 * v111 + 0x1FFFFFFFELL) & 0x1FFFFFFFELL | v107 & 0xFFFFFFFFFFFFFFF9;
      *(_DWORD *)(v116 + 8) = 0;
      *(_QWORD *)(a2 + 144) = v116 & 0xFFFFFFFFFFFFFFF9 | 2;
      *(_DWORD *)((v116 & 0xFFFFFFFFFFFFFFF8) + 8) = v115;
LABEL_51:
      sub_22E79A6A0(a1, v4, v226);
      break;
    case 3u:
      v117 = *(_QWORD *)(v95 + 8);
      v118 = sub_22E779F8C(v117, *(_QWORD *)(v95 + 16), v98, v100);
      v119 = sub_22E77F870(v117, v118);
      v120 = a1[1];
      v121 = *(unsigned int *)(v120 + 24);
      *(_DWORD *)(v120 + 24) = v121 + 1;
      v122 = *(_QWORD *)(*(_QWORD *)(v120 + 32) + 8 * v121);
      v236 = v238;
      v237 = 0x800000000;
      sub_22E7866D0(v120, (uint64_t)&v236, 1);
      v233 = v235;
      v234 = 0x800000000;
      v123 = a1[1];
      v124 = *(unsigned int *)(v123 + 24);
      v125 = v124 + 1;
      *(_DWORD *)(v123 + 24) = v124 + 1;
      v126 = *(_QWORD *)(v123 + 32);
      v225 = v58;
      v223 = v122;
      v224 = v119;
      v222 = *(_QWORD *)(v126 + 8 * v124);
      if (v222)
      {
        *(_DWORD *)(v123 + 24) = v124 + 2;
        v127 = *(_QWORD *)(v126 + 8 * v125);
        if (v127 >= 9uLL)
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        for (; (_DWORD)v127; LODWORD(v127) = v127 - 1)
        {
          sub_22E782760(a1[1], (uint64_t)&v229);
          v128 = (_OWORD *)sub_22E78DF7C((uint64_t)&v233, (unint64_t)&v229, 1);
          v129 = (char *)v233 + 32 * v234;
          v130 = v128[1];
          *v129 = *v128;
          v129[1] = v130;
          LODWORD(v234) = v234 + 1;
        }
        v131 = a1[1];
        v132 = *(_QWORD *)(v131 + 8);
        v133 = *(_QWORD *)(v131 + 16);
        v134 = *(unsigned int *)(v131 + 24);
        *(_DWORD *)(v131 + 24) = v134 + 1;
        HIDWORD(v135) = *(_QWORD *)(*(_QWORD *)(v131 + 32) + 8 * v134);
        LODWORD(v135) = HIDWORD(v135);
        v136 = sub_22E77BAB4(v132, v133, v135 >> 1);
        v137 = a1[1];
        v138 = *(_QWORD *)(v137 + 8);
        v139 = *(_QWORD *)(v137 + 16);
        v140 = *(unsigned int *)(v137 + 24);
        *(_DWORD *)(v137 + 24) = v140 + 1;
        HIDWORD(v135) = *(_QWORD *)(*(_QWORD *)(v137 + 32) + 8 * v140);
        LODWORD(v135) = HIDWORD(v135);
        v141 = sub_22E77BAB4(v138, v139, v135 >> 1);
        v123 = a1[1];
        v125 = *(_DWORD *)(v123 + 24);
        v126 = *(_QWORD *)(v123 + 32);
      }
      else
      {
        v141 = 0;
        v136 = 0;
      }
      v142 = *(_QWORD *)(v123 + 8);
      v143 = *(_QWORD *)(v123 + 16);
      *(_DWORD *)(v123 + 24) = v125 + 1;
      HIDWORD(v144) = *(_QWORD *)(v126 + 8 * v125);
      LODWORD(v144) = HIDWORD(v144);
      v145 = sub_22E77BAB4(v142, v143, v144 >> 1);
      v146 = *(_QWORD *)(*a1 + 128);
      sub_22EFEB554(v146, (__n128 *)v236, v237);
      v148 = v147;
      v229 = v231;
      v230 = 0x800000000;
      v232 = __PAIR64__(v141, v136);
      if ((_DWORD)v234)
      {
        v149 = 0;
        v150 = 32 * v234;
        do
        {
          v151 = (_OWORD *)sub_22E78DF7C((uint64_t)&v229, (unint64_t)v233 + v149, 1);
          v152 = (char *)v229 + 32 * v230;
          v153 = v151[1];
          *v152 = *v151;
          v152[1] = v153;
          LODWORD(v230) = v230 + 1;
          v149 += 32;
        }
        while (v150 != v149);
      }
      v154 = a1[1];
      v155 = *(_QWORD *)(v154 + 32);
      v156 = *(_DWORD *)(v154 + 24);
      *(_DWORD *)(v154 + 24) = v156 + 1;
      if (*(_QWORD *)(v155 + 8 * v156))
      {
        v157 = *(_QWORD *)(v154 + 8);
        v158 = sub_22E779F8C(v157, *(_QWORD *)(v154 + 16), v154 + 32, (_DWORD *)(v154 + 24));
        v221 = sub_22E77F870(v157, v158);
        v159 = a1[1];
        v160 = *(unsigned int *)(v159 + 24);
        v161 = *(_QWORD *)(v159 + 32);
        v162 = v4;
        v163 = *(_QWORD *)(v161 + 8 * v160);
        v164 = *(_QWORD *)(v159 + 8);
        v165 = *(_QWORD *)(v159 + 16);
        *(_DWORD *)(v159 + 24) = v160 + 2;
        HIDWORD(v166) = *(_QWORD *)(v161 + 8 * (v160 + 1));
        LODWORD(v166) = HIDWORD(v166);
        v167 = sub_22E77BAB4(v164, v165, v166 >> 1);
        v168 = sub_22E3CD3D4(v146 + 2032, 16, 3);
        v169 = 2 * v163 + 0x1FFFFFFFELL;
        v4 = v162;
        *(_QWORD *)v168 = v169 & 0x1FFFFFFFELL | v221 & 0xFFFFFFFFFFFFFFF9;
        *(_DWORD *)(v168 + 8) = v167;
      }
      else
      {
        v168 = 0;
      }
      if (v222)
        v170 = &v229;
      else
        v170 = 0;
      *(_QWORD *)(a2 + 144) = sub_22EFEB5C0(v146, a2, v224, v223, v148, (uint64_t)v170, v145, v168) & 0xFFFFFFFFFFFFFFF9 | 4;
      if ((*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2) == a2)
      {
        v171 = a1[1];
        v172 = *(_QWORD *)(v171 + 8);
        v173 = sub_22E779F8C(v172, *(_QWORD *)(v171 + 16), v171 + 32, (_DWORD *)(v171 + 24));
        v174 = sub_22E77F870(v172, v173);
        v227[0] = v228;
        v175 = (char *)v236;
        v228[0] = v237;
        v228[1] = 0;
        v227[1] = (void *)0x2000000002;
        if ((_DWORD)v237)
        {
          v176 = 24 * v237;
          do
          {
            sub_22F0EED38((uint64_t)v175, (uint64_t)v227, v146);
            v175 += 24;
            v176 -= 24;
          }
          while (v176);
        }
        sub_22EFE9368(v174);
        NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
        sub_22E79A760(a1, (uint64_t)v4, *(_QWORD *)(NodeOrInsertPos + 8) & 0xFFFFFFFFFFFFFFF8, (uint64_t)v226);
        if (v227[0] != v228)
          free(v227[0]);
      }
      v58 = v225;
      if (v229 != v231)
        free(v229);
      if (v233 != v235)
        free(v233);
      v178 = v236;
      if (v236 != v238)
        goto LABEL_79;
      break;
    case 4u:
      v233 = v235;
      v234 = 0x800000000;
      v202 = v101 + 2;
      *v100 = v202;
      v203 = *(_QWORD *)(v99 + 8 * v102);
      if ((_DWORD)v203)
      {
        do
        {
          v204 = a1[1];
          v205 = *(_QWORD *)(v204 + 8);
          v206 = sub_22E779F8C(v205, *(_QWORD *)(v204 + 16), v204 + 32, (_DWORD *)(v204 + 24));
          v207 = sub_22E77F870(v205, v206);
          v208 = v234;
          if (v234 >= (unint64_t)HIDWORD(v234))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v208 = v234;
          }
          *((_QWORD *)v233 + v208) = v207 | 3;
          LODWORD(v234) = v234 + 1;
          LODWORD(v203) = v203 - 1;
        }
        while ((_DWORD)v203);
        v95 = a1[1];
        v202 = *(_DWORD *)(v95 + 24);
        v99 = *(_QWORD *)(v95 + 32);
      }
      v229 = v231;
      v230 = 0x800000000;
      v232 = 0;
      v209 = v202 + 1;
      *(_DWORD *)(v95 + 24) = v202 + 1;
      v210 = *(_QWORD *)(v99 + 8 * v202);
      if ((_DWORD)v210)
      {
        do
        {
          LODWORD(v210) = v210 - 1;
          sub_22E782760(a1[1], (uint64_t)&v236);
          v211 = (_OWORD *)sub_22E78DF7C((uint64_t)&v229, (unint64_t)&v236, 1);
          v212 = (char *)v229 + 32 * v230;
          v213 = v211[1];
          *v212 = *v211;
          v212[1] = v213;
          LODWORD(v230) = v230 + 1;
        }
        while ((_DWORD)v210);
        v95 = a1[1];
        v209 = *(_DWORD *)(v95 + 24);
        v99 = *(_QWORD *)(v95 + 32);
      }
      v214 = *(_QWORD *)(v95 + 8);
      v215 = *(_QWORD *)(v95 + 16);
      *(_DWORD *)(v95 + 24) = v209 + 1;
      HIDWORD(v216) = *(_QWORD *)(v99 + 8 * v209);
      LODWORD(v216) = HIDWORD(v216);
      LODWORD(v232) = sub_22E77BAB4(v214, v215, v216 >> 1);
      v217 = a1[1];
      v218 = *(_QWORD *)(v217 + 8);
      v219 = *(_QWORD *)(v217 + 16);
      v220 = *(unsigned int *)(v217 + 24);
      *(_DWORD *)(v217 + 24) = v220 + 1;
      HIDWORD(v216) = *(_QWORD *)(*(_QWORD *)(v217 + 32) + 8 * v220);
      LODWORD(v216) = HIDWORD(v216);
      HIDWORD(v232) = sub_22E77BAB4(v218, v219, v216 >> 1);
      sub_22F3AC8C0(a2, *(_QWORD *)(*a1 + 128), (uint64_t)&v233, (uint64_t)&v229);
      if (v229 != v231)
        free(v229);
      v178 = v233;
      if (v233 == v235)
        break;
LABEL_79:
      free(v178);
      break;
    default:
      break;
  }
  sub_22EFBFA74(a2, v58 != 0);
  v179 = a1[1];
  v180 = *(unsigned int *)(v179 + 24);
  *(_DWORD *)(v179 + 24) = v180 + 1;
  v181 = *(_QWORD *)(*(_QWORD *)(v179 + 32) + 8 * v180);
  v229 = v231;
  v230 = 0x1000000000;
  if (v181 >= 0x11uLL)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  if ((_DWORD)v181)
  {
    do
    {
      v182 = a1[1];
      v183 = *(_QWORD *)(v182 + 8);
      v184 = sub_22E779F8C(v183, *(_QWORD *)(v182 + 16), v182 + 32, (_DWORD *)(v182 + 24));
      v185 = sub_22E77F870(v183, v184);
      v186 = v230;
      if (v230 >= (unint64_t)HIDWORD(v230))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v186 = v230;
      }
      *((_QWORD *)v229 + v186) = v185;
      v187 = v230 + 1;
      LODWORD(v230) = v230 + 1;
      LODWORD(v181) = v181 - 1;
    }
    while ((_DWORD)v181);
  }
  else
  {
    v187 = v230;
  }
  v188 = v229;
  if (v187)
  {
    v189 = *(_QWORD *)(*a1 + 128);
    v190 = 8 * v187;
    v191 = (void *)sub_22E3CD3D4(v189 + 2032, v190, 3);
    *(_QWORD *)(a2 + 120) = v191;
    memmove(v191, v188, v190);
    v188 = v229;
  }
  if (v188 != v231)
    free(v188);
}

_QWORD *sub_22E79A6A0(_QWORD *result, _BYTE *a2, uint64_t *a3)
{
  _QWORD *v5;
  uint64_t v6;
  _BYTE v7[16];
  uint64_t v8;

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*result + 128) + 2000) + 20) & 0x200000000000) != 0
    && (*a2 & 3) != 0)
  {
    v5 = result;
    v6 = *a3;
    if (v6)
    {
      return (_QWORD *)sub_22E79A760(result, (uint64_t)a2, v6, (uint64_t)a3);
    }
    else
    {
      sub_22E7B0FFC((uint64_t)v7, result, (uint64_t)(a2 - 104));
      if (v8)
      {
        if ((*(_DWORD *)(v8 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
          sub_22E79A760(v5, (uint64_t)a2, v8, (uint64_t)a3);
      }
      return (_QWORD *)sub_22E7B0E58((uint64_t)v7);
    }
  }
  return result;
}

uint64_t sub_22E79A760(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;

  if (a2)
    v6 = a2 - 104;
  else
    v6 = 0;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  if (v7 != result)
  {
    *(_QWORD *)(v6 + 104) = v7 & 0xFFFFFFFFFFFFFFFCLL;
    *(_QWORD *)(v6 + 112) = v7;
    *(_DWORD *)(v7 + 28) |= *(_DWORD *)(v6 + 28) & 0x400;
    *(_DWORD *)(v6 + 28) &= ~0x400u;
    if (*(_BYTE *)(a4 + 12))
    {
      v9 = (uint64_t *)(*a1 + 10744);
      v13 = v7;
      result = (uint64_t)sub_22E7920E8(v9, &v13);
      v10 = result;
      v11 = *(_DWORD *)(a4 + 8);
      v12 = *(_DWORD *)(result + 16);
      if (v12 >= *(_DWORD *)(result + 20))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v12 = *(_DWORD *)(v10 + 16);
      }
      *(_DWORD *)(*(_QWORD *)(v10 + 8) + 4 * v12) = v11;
      ++*(_DWORD *)(v10 + 16);
    }
  }
  return result;
}

unint64_t sub_22E79A854(unint64_t result, unint64_t a2, unint64_t a3)
{
  _BOOL8 *v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t *v17;
  char v18[24];
  uint64_t v19;
  uint64_t v20;

  v5 = (_BOOL8 *)result;
  v6 = (uint64_t *)(*(_QWORD *)(a2 + 120) & 0xFFFFFFFFFFFFFFF8);
  v7 = *v6;
  v8 = *(_QWORD *)a3;
  if (*v6 != *(_QWORD *)a3)
  {
    v9 = *(_QWORD *)result + 10768;
    if (v8)
      v10 = v8 + 48;
    else
      v10 = 0;
    if (v7)
      v11 = v7 + 48;
    else
      v11 = 0;
    v19 = v10;
    v20 = v11;
    sub_22E7B58E8((uint64_t)v18, v9, &v19, &v20);
    result = sub_22E77A7D4(*v5, *v6, *(_QWORD *)a3);
  }
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v5 + 128) + 2000) + 20);
  if ((v12 & 0x2000000000000000) != 0)
  {
    if ((*(_BYTE *)((*(_QWORD *)(a2 + 120) & 0xFFFFFFFFFFFFFFF8) + 72) & 1) != 0)
    {
      sub_22F3B48C4(a2);
      v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v5 + 128) + 2000) + 20);
    }
    if ((v12 & 0x4000000000000000) != 0)
      v13 = sub_22E79A9CC((*(_QWORD *)(a2 + 120) & 0xFFFFFFFFFFFFFFF8) + 16, a3 + 16);
    else
      v13 = 0;
    result = sub_22F3B4F18(a2);
    if ((_DWORD)result != *(_DWORD *)(a3 + 76) || v13)
    {
      result = (unint64_t)sub_22F2C39E4((_DWORD *)(*v5 + 10032), v6);
      v14 = result;
      v15 = *(_QWORD *)a3;
      v16 = *(_DWORD *)(result + 16);
      if (v16 >= *(_DWORD *)(result + 20))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v16 = *(_DWORD *)(v14 + 16);
      }
      v17 = (unint64_t *)(*(_QWORD *)(v14 + 8) + 16 * v16);
      *v17 = v15;
      v17[1] = a3;
      ++*(_DWORD *)(v14 + 16);
    }
  }
  return result;
}

uint64_t sub_22E79A9CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;

  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 != *(_DWORD *)(a2 + 8))
    return 1;
  if (!(_DWORD)v2)
    return 0;
  v5 = 0;
  v6 = 8 * v2 - 8;
  do
  {
    v7 = *(_QWORD **)(*(_QWORD *)a1 + v5);
    v8 = *(_QWORD **)(*(_QWORD *)a2 + v5);
    v9 = v7[5];
    v10 = v8[5];
    v11 = v9 != v10;
    if (v9 != v10)
      break;
    v12 = v7[13];
    if (!v12)
    {
      sub_22E3CD31C((uint64_t *)(v7[12] + 88), v7[12]);
      v12 = v7[13];
    }
    v13 = v8[13];
    if (!v13)
    {
      sub_22E3CD31C((uint64_t *)(v8[12] + 88), v8[12]);
      v13 = v8[13];
    }
    if (v12 > 7 != v13 > 7)
      break;
    v14 = v6 == v5;
    v5 += 8;
  }
  while (!v14);
  return v11;
}

uint64_t sub_22E79AAB4(uint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t **v27;

  v4 = sub_22E779F8C(*(_QWORD *)(a1[1] + 8), *(_QWORD *)(a1[1] + 16), a1[1] + 32, (_DWORD *)(a1[1] + 24));
  if ((_DWORD)v4)
  {
    v5 = v4;
    v6 = a1[1];
    v7 = *(_QWORD *)(v6 + 32);
    v8 = *(_DWORD *)(v6 + 24);
    v9 = v8 + 1;
    *(_DWORD *)(v6 + 24) = v8 + 1;
    v10 = *(_QWORD *)(v7 + 8 * v8);
    if ((_DWORD)v10)
    {
      v11 = v10 - 1;
      if ((_DWORD)v10 == 1)
      {
        v16 = 0;
      }
      else
      {
        do
        {
          v12 = a1[1];
          v13 = *(_QWORD *)(v12 + 8);
          v14 = sub_22E779F8C(v13, *(_QWORD *)(v12 + 16), v12 + 32, (_DWORD *)(v12 + 24));
          v15 = sub_22E77F870(v13, v14);
          --v11;
        }
        while (v11);
        v16 = v15;
        v6 = a1[1];
        v9 = *(_DWORD *)(v6 + 24);
        v7 = *(_QWORD *)(v6 + 32);
      }
      *(_DWORD *)(v6 + 24) = v9 + 1;
      v21 = *(_QWORD *)(v7 + 8 * v9);
      if (v21)
        v17 = (unint64_t *)(a1[3] - v21);
      else
        v17 = 0;
      v18 = 1;
    }
    else
    {
      v19 = *(_QWORD *)(v6 + 8);
      v20 = sub_22E779F8C(v19, *(_QWORD *)(v6 + 16), v6 + 32, (_DWORD *)(v6 + 24));
      sub_22E77F870(v19, v20);
      v17 = 0;
      v16 = 0;
      v18 = 0;
    }
  }
  else
  {
    v17 = 0;
    v16 = 0;
    v18 = 1;
    v5 = *((unsigned int *)a1 + 8);
  }
  v22 = sub_22E77F870(*a1, v5);
  v23 = (unint64_t *)(v22 + 88);
  if (!v22)
    v23 = 0;
  if (v23 != a2)
  {
    *a2 = v22 & 0xFFFFFFFFFFFFFFFCLL;
    a2[1] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22);
  }
  if (v18)
  {
    if (a2)
      v24 = a2 - 11;
    else
      v24 = 0;
    v25 = *a1;
    v26 = *(_DWORD *)(v25 + 8784);
    if (v26 >= *(_DWORD *)(v25 + 8788))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v26 = *(_DWORD *)(v25 + 8784);
    }
    v27 = (unint64_t **)(*(_QWORD *)(v25 + 8776) + 16 * v26);
    *v27 = v24;
    v27[1] = v17;
    ++*(_DWORD *)(v25 + 8784);
  }
  return v16;
}

_QWORD *sub_22E79AC9C(_QWORD *result, _BYTE *a2, uint64_t *a3)
{
  _QWORD *v5;
  uint64_t v6;
  _BYTE v7[16];
  uint64_t v8;

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*result + 128) + 2000) + 20) & 0x200000000000) != 0
    && (*a2 & 3) != 0)
  {
    v5 = result;
    v6 = *a3;
    if (v6)
    {
      return (_QWORD *)sub_22E7B5F8C(result, (uint64_t)a2, v6, (uint64_t)a3);
    }
    else
    {
      sub_22E7B0FFC((uint64_t)v7, result, (uint64_t)(a2 - 88));
      if (v8)
      {
        if ((*(_DWORD *)(v8 + 28) & 0x7F) == 0x16)
          sub_22E7B5F8C(v5, (uint64_t)a2, v8, (uint64_t)a3);
      }
      return (_QWORD *)sub_22E7B0E58((uint64_t)v7);
    }
  }
  return result;
}

uint64_t sub_22E79AD58(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[16];
  _DWORD *v28;
  unint64_t v29;

  sub_22E79951C(a1, a2);
  v4 = a1[1];
  v5 = *(unsigned int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v5 + 1;
  *(_DWORD *)(a2 + 68) = *(_DWORD *)(a2 + 68) & 0xFFFFFFFD | (2 * (*(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v5) & 1));
  v6 = a1[1];
  v7 = *(unsigned int *)(v6 + 24);
  v8 = v7 + 1;
  *(_DWORD *)(v6 + 24) = v7 + 1;
  v9 = *(_QWORD *)(v6 + 32);
  v10 = *(_QWORD *)(v9 + 8 * v7);
  if ((_DWORD)v10)
  {
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFCLL | *(_QWORD *)(v9 + 8 * v7);
    if ((_DWORD)v10 == 3)
    {
      if (*(_DWORD *)(v6 + 40) <= v8)
      {
        v21 = 0;
      }
      else
      {
        v19 = *(_QWORD *)(v6 + 8);
        v18 = *(_QWORD *)(v6 + 16);
        *(_DWORD *)(v6 + 24) = v7 + 2;
        v20 = sub_22E77A180(v19, v18, *(_QWORD *)(v9 + 8 * v8));
        v21 = sub_22E77D8C8(v19, v20);
      }
    }
    else
    {
      v25 = *(_QWORD *)(v6 + 8);
      if (*(_DWORD *)(v25 + 10984) == 3)
      {
        v26 = *(unsigned int *)(v25 + 10848);
        v21 = *(_QWORD *)(*(_QWORD *)(v25 + 10840) + 8 * v26 - 8);
        *(_DWORD *)(v25 + 10848) = v26 - 1;
      }
      else
      {
        v21 = sub_22E7B94C8(*(_QWORD *)(v6 + 8), *(_QWORD *)(v6 + 16));
      }
    }
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 72) & 3 | v21;
    v6 = a1[1];
  }
  result = *(_QWORD *)(v6 + 8);
  if (*(_DWORD *)(result + 10984) == 3)
  {
    v17 = *(unsigned int *)(result + 10848);
    v12 = *(_QWORD *)(*(_QWORD *)(result + 10840) + 8 * v17 - 8);
    *(_DWORD *)(result + 10848) = v17 - 1;
  }
  else
  {
    result = sub_22E7B94C8(result, *(_QWORD *)(v6 + 16));
    v12 = result;
  }
  if (v12)
    result = sub_22E670130(a2, v12);
  if (!*(_QWORD *)(a2 + 40))
  {
    v22 = a1[1];
    v23 = *(_QWORD *)(v22 + 8);
    v24 = sub_22E779F8C(v23, *(_QWORD *)(v22 + 16), v22 + 32, (_DWORD *)(v22 + 24));
    result = sub_22E77F870(v23, v24);
    if (result)
      result = (uint64_t)sub_22F36870C(*(_QWORD *)(*a1 + 128), a2, result);
  }
  v13 = *(_QWORD *)(*(_QWORD *)(*a1 + 128) + 2000);
  if ((*(_QWORD *)(v13 + 20) & 0x200000000000) != 0)
  {
    if ((*(_BYTE *)(v13 + 1) & 1) != 0
      || (v14 = (*(_DWORD *)(a2 + 28) & 0x7F) - 49, v14 <= 0x13) && ((1 << v14) & 0xC0007) != 0)
    {
      sub_22E7B0FFC((uint64_t)v27, a1, a2);
      if (v28)
      {
        if ((v28[7] & 0x7Fu) - 52 >= 0xFFFFFFFD)
        {
          v15 = *(_QWORD *)(*a1 + 128);
          v16 = (*(uint64_t (**)(void))(*(_QWORD *)v28 + 32))();
          v29 = a2;
          sub_22F25E108((uint64_t *)(v15 + 1512), &v29)[1] = v16;
        }
      }
      return sub_22E7B0E58((uint64_t)v27);
    }
  }
  return result;
}

_DWORD *sub_22E79AFB4(_DWORD *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  _DWORD *v6;
  uint64_t *v7;
  int v8;
  _DWORD *v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)result + 128) + 2000) + 20);
  if ((v3 & 0x1000000000000000) != 0)
  {
    v6 = result;
    v7 = (uint64_t *)(*(_QWORD *)(a2 + 120) & 0xFFFFFFFFFFFFFFF8);
    v8 = (v3 & 0x4000000000000000) != 0 ? sub_22E79A9CC((uint64_t)(v7 + 2), (uint64_t)(a3 + 2)) : 0;
    result = (_DWORD *)sub_22F3B68F4(a2);
    if ((_DWORD)result != *((_DWORD *)a3 + 10) || v8 != 0)
    {
      result = sub_22F2C39E4((_DWORD *)(*(_QWORD *)v6 + 10272), v7);
      v10 = result;
      v11 = *a3;
      v12 = result[4];
      if (v12 >= result[5])
      {
        result = (_DWORD *)llvm::SmallVectorBase<unsigned int>::grow_pod();
        v12 = v10[4];
      }
      v13 = (_QWORD *)(*((_QWORD *)v10 + 1) + 16 * v12);
      *v13 = v11;
      v13[1] = a3;
      ++v10[4];
    }
  }
  return result;
}

_QWORD *sub_22E79B098(_QWORD *result, _BYTE *a2, uint64_t *a3)
{
  _QWORD *v5;
  uint64_t v6;
  _BYTE v7[16];
  uint64_t v8;

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*result + 128) + 2000) + 20) & 0x200000000000) != 0
    && (*a2 & 3) != 0)
  {
    v5 = result;
    v6 = *a3;
    if (v6)
    {
      return (_QWORD *)sub_22E7B5F8C(result, (uint64_t)a2, v6, (uint64_t)a3);
    }
    else
    {
      sub_22E7B0FFC((uint64_t)v7, result, (uint64_t)(a2 - 88));
      if (v8)
      {
        if ((*(_DWORD *)(v8 + 28) & 0x7F) == 0x13)
          sub_22E7B5F8C(v5, (uint64_t)a2, v8, (uint64_t)a3);
      }
      return (_QWORD *)sub_22E7B0E58((uint64_t)v7);
    }
  }
  return result;
}

void sub_22E79B154(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(unsigned int *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v2 + 1;
  __asm { BR              X13 }
}

void sub_22E79B1C8()
{
  _DWORD *v0;

  *v0 = 0;
}

uint64_t *sub_22E79BF78(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  unsigned int v5;
  BOOL v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[16];
  _DWORD *v12;
  uint64_t v13;

  v2 = *(_QWORD *)(*(_QWORD *)(*result + 128) + 2000);
  if ((*(_QWORD *)(v2 + 20) & 0x200000000000) != 0)
  {
    v4 = result;
    if ((*(_BYTE *)(v2 + 1) & 1) != 0
      || a2
      && ((v5 = (*(_DWORD *)(a2 + 28) & 0x7F) - 49, v6 = v5 > 0x13, v7 = (1 << v5) & 0xC0007, !v6)
        ? (v8 = v7 == 0)
        : (v8 = 1),
          !v8))
    {
      sub_22E7B0FFC((uint64_t)v11, result, a2);
      if (v12)
      {
        if ((v12[7] & 0x7F) == 0x44)
        {
          v9 = *(_QWORD *)(*v4 + 128);
          v10 = (*(uint64_t (**)(void))(*(_QWORD *)v12 + 32))();
          v13 = a2;
          sub_22F25E108((uint64_t *)(v9 + 1512), &v13)[1] = v10;
        }
      }
      return (uint64_t *)sub_22E7B0E58((uint64_t)v11);
    }
  }
  return result;
}

uint64_t sub_22E79C050(uint64_t *a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unsigned int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _DWORD *v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  BOOL v112;
  uint64_t v113[2];
  unint64_t v114;

  if (a2)
    v4 = a2 + 72;
  else
    v4 = 0;
  v5 = sub_22E779F8C(*(_QWORD *)(a1[1] + 8), *(_QWORD *)(a1[1] + 16), a1[1] + 32, (_DWORD *)(a1[1] + 24));
  v6 = *((_DWORD *)a1 + 8) == v5;
  if ((_DWORD)v5)
  {
    v7 = v5;
    v8 = a1[1];
    v9 = *(_QWORD *)(v8 + 32);
    v10 = *(_DWORD *)(v8 + 24);
    v11 = v10 + 1;
    *(_DWORD *)(v8 + 24) = v10 + 1;
    v12 = *(_QWORD *)(v9 + 8 * v10);
    if ((_DWORD)v12)
    {
      v13 = v12 - 1;
      v6 = v12 == 1;
      if ((_DWORD)v12 == 1)
      {
        v18 = 0;
      }
      else
      {
        do
        {
          v14 = a1[1];
          v15 = *(_QWORD *)(v14 + 8);
          v16 = sub_22E779F8C(v15, *(_QWORD *)(v14 + 16), v14 + 32, (_DWORD *)(v14 + 24));
          v17 = sub_22E77F870(v15, v16);
          --v13;
        }
        while (v13);
        v18 = v17;
        v8 = a1[1];
        v11 = *(_DWORD *)(v8 + 24);
        v9 = *(_QWORD *)(v8 + 32);
      }
      *(_DWORD *)(v8 + 24) = v11 + 1;
      v23 = *(_QWORD *)(v9 + 8 * v11);
      if (v23)
        v19 = a1[3] - v23;
      else
        v19 = 0;
      v20 = 1;
    }
    else
    {
      v21 = *(_QWORD *)(v8 + 8);
      v22 = sub_22E779F8C(v21, *(_QWORD *)(v8 + 16), v8 + 32, (_DWORD *)(v8 + 24));
      sub_22E77F870(v21, v22);
      v19 = 0;
      v18 = 0;
      v20 = 0;
    }
  }
  else
  {
    v19 = 0;
    v18 = 0;
    v6 = 1;
    v20 = 1;
    v7 = *((unsigned int *)a1 + 8);
  }
  v24 = sub_22E77F870(*a1, v7);
  v25 = v24 + 72 == v4;
  if (!v24)
    v25 = a2 == 0;
  if (!v25)
  {
    *(_QWORD *)v4 = v24 & 0xFFFFFFFFFFFFFFFCLL;
    *(_QWORD *)(v4 + 8) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
  }
  if (v20)
  {
    if (a2)
      v26 = v4 - 72;
    else
      v26 = 0;
    v27 = *a1;
    v28 = *(_DWORD *)(*a1 + 8784);
    if (v28 >= *(_DWORD *)(*a1 + 8788))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v28 = *(_DWORD *)(v27 + 8784);
    }
    v29 = (unint64_t *)(*(_QWORD *)(v27 + 8776) + 16 * v28);
    *v29 = v26;
    v29[1] = v19;
    ++*(_DWORD *)(v27 + 8784);
  }
  v30 = 0x100000000;
  if (!v6)
    v30 = 0;
  v113[0] = v18;
  v113[1] = v30 | v7;
  sub_22E79951C(a1, a2);
  v31 = a1[1];
  v32 = *(unsigned int *)(v31 + 24);
  *(_DWORD *)(v31 + 24) = v32 + 1;
  *(_BYTE *)(a2 + 96) = *(_BYTE *)(a2 + 96) & 0xF8 | *(_QWORD *)(*(_QWORD *)(v31 + 32) + 8 * v32) & 7;
  v33 = a1[1];
  v34 = *(unsigned int *)(v33 + 24);
  *(_DWORD *)(v33 + 24) = v34 + 1;
  *(_BYTE *)(a2 + 96) = (8 * (*(_QWORD *)(*(_QWORD *)(v33 + 32) + 8 * v34) & 3)) | *(_BYTE *)(a2 + 96) & 0xE7;
  v35 = a1[1];
  v36 = *(unsigned int *)(v35 + 24);
  *(_DWORD *)(v35 + 24) = v36 + 1;
  *(_BYTE *)(a2 + 96) = (32 * (*(_QWORD *)(*(_QWORD *)(v35 + 32) + 8 * v36) & 3)) | *(_BYTE *)(a2 + 96) & 0x9F;
  v37 = a1[1];
  v38 = *(unsigned int *)(v37 + 24);
  *(_DWORD *)(v37 + 24) = v38 + 1;
  *(_BYTE *)(a2 + 96) = *(_BYTE *)(a2 + 96) & 0x7F | (*(_QWORD *)(*(_QWORD *)(v37 + 32) + 8 * v38) << 7);
  if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x40)
  {
    v39 = a1[1];
    v40 = *(unsigned int *)(v39 + 24);
    *(_DWORD *)(v39 + 24) = v40 + 1;
    *(_DWORD *)(a2 + 96) = *(_DWORD *)(a2 + 96) & 0xFFFFFEFF | ((*(_QWORD *)(*(_QWORD *)(v39 + 32) + 8 * v40) & 1) << 8);
    v41 = a1[1];
    v42 = *(unsigned int *)(v41 + 24);
    *(_DWORD *)(v41 + 24) = v42 + 1;
    *(_DWORD *)(a2 + 96) = *(_DWORD *)(a2 + 96) & 0xFFFFFDFF | ((*(_QWORD *)(*(_QWORD *)(v41 + 32) + 8 * v42) & 1) << 9);
    v43 = a1[1];
    v44 = *(unsigned int *)(v43 + 24);
    *(_DWORD *)(v43 + 24) = v44 + 1;
    *(_DWORD *)(a2 + 96) = *(_DWORD *)(a2 + 96) & 0xFFFFFBFF | ((*(_QWORD *)(*(_QWORD *)(v43 + 32) + 8 * v44) & 1) << 10);
    v45 = a1[1];
    v46 = *(unsigned int *)(v45 + 24);
    *(_DWORD *)(v45 + 24) = v46 + 1;
    *(_DWORD *)(a2 + 96) = *(_DWORD *)(a2 + 96) & 0xFFFFF7FF | ((*(_QWORD *)(*(_QWORD *)(v45 + 32) + 8 * v46) & 1) << 11);
    v47 = a1[1];
    v48 = *(unsigned int *)(v47 + 24);
    *(_DWORD *)(v47 + 24) = v48 + 1;
    *(_DWORD *)(a2 + 96) = *(_DWORD *)(a2 + 96) & 0xFFFFEFFF | ((*(_QWORD *)(*(_QWORD *)(v47 + 32) + 8 * v48) & 1) << 12);
    v49 = a1[1];
    v50 = *(unsigned int *)(v49 + 24);
    *(_DWORD *)(v49 + 24) = v50 + 1;
    *(_DWORD *)(a2 + 96) = *(_DWORD *)(a2 + 96) & 0xFFFFDFFF | ((*(_QWORD *)(*(_QWORD *)(v49 + 32) + 8 * v50) & 1) << 13);
    v51 = a1[1];
    v52 = *(unsigned int *)(v51 + 24);
    *(_DWORD *)(v51 + 24) = v52 + 1;
    *(_DWORD *)(a2 + 96) = *(_DWORD *)(a2 + 96) & 0xFFFFBFFF | ((*(_QWORD *)(*(_QWORD *)(v51 + 32) + 8 * v52) & 1) << 14);
    v53 = a1[1];
    v54 = *(unsigned int *)(v53 + 24);
    *(_DWORD *)(v53 + 24) = v54 + 1;
    *(_DWORD *)(a2 + 96) = *(_DWORD *)(a2 + 96) & 0xFFFF7FFF | ((*(_QWORD *)(*(_QWORD *)(v53 + 32) + 8 * v54) & 1) << 15);
    v55 = a1[1];
    v56 = *(unsigned int *)(v55 + 24);
    *(_DWORD *)(v55 + 24) = v56 + 1;
    *(_DWORD *)(a2 + 96) = *(_DWORD *)(a2 + 96) & 0xFFFEFFFF | ((*(_QWORD *)(*(_QWORD *)(v55 + 32) + 8 * v56) & 1) << 16);
    v57 = a1[1];
    v58 = *(unsigned int *)(v57 + 24);
    *(_DWORD *)(v57 + 24) = v58 + 1;
    *(_DWORD *)(a2 + 96) = *(_DWORD *)(a2 + 96) & 0xFFFDFFFF | ((*(_QWORD *)(*(_QWORD *)(v57 + 32) + 8 * v58) & 1) << 17);
    v59 = a1[1];
    v60 = *(unsigned int *)(v59 + 24);
    *(_DWORD *)(v59 + 24) = v60 + 1;
    *(_DWORD *)(a2 + 96) = *(_DWORD *)(a2 + 96) & 0xFFE3FFFF | ((*(_QWORD *)(*(_QWORD *)(v59 + 32) + 8 * v60) & 7) << 18);
    v61 = a1[1];
    v62 = *(unsigned int *)(v61 + 24);
    *(_DWORD *)(v61 + 24) = v62 + 1;
    *(_DWORD *)(a2 + 96) = *(_DWORD *)(a2 + 96) & 0xFFDFFFFF | ((*(_QWORD *)(*(_QWORD *)(v61 + 32) + 8 * v62) & 1) << 21);
  }
  v63 = a1[1];
  v64 = *(unsigned int *)(v63 + 24);
  *(_DWORD *)(v63 + 24) = v64 + 1;
  v65 = *(_QWORD *)(*(_QWORD *)(v63 + 32) + 8 * v64);
  *(_BYTE *)(a2 + 32) = *(_BYTE *)(a2 + 32) & 0xF8 | (v65 + 1) & 7;
  if ((_BYTE)v65 && (*(_BYTE *)(a2 + 96) & 7) == 1)
  {
    v66 = *(_QWORD *)(a2 + 16);
    v67 = v66 & 0xFFFFFFFFFFFFFFF8;
    if ((v66 & 4) != 0)
      v67 = *(_QWORD *)(v67 + 8);
    v68 = *(_WORD *)(v67 + 8) & 0x7F;
    if (v68 <= 0x18 && ((1 << v68) & 0x1000006) != 0 || v68 - 52 <= 5)
    {
      v69 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 48))(a2);
      v70 = *(_DWORD *)(a2 + 28);
      *(_DWORD *)(a2 + 28) = v70 & 0xF7DFFFFF | 0x8000000;
      if (v69)
      {
        if ((*(_BYTE *)(v69 + 30) & 0x20) != 0)
          *(_DWORD *)(a2 + 28) = v70 | 0x8200000;
      }
    }
  }
  v71 = a1[1];
  v72 = *(unsigned int *)(v71 + 24);
  *(_DWORD *)(v71 + 24) = v72 + 1;
  v73 = *(_QWORD *)(*(_QWORD *)(v71 + 32) + 8 * v72);
  if (v73)
  {
    v74 = *(_QWORD *)(v71 + 8);
    if (*(_DWORD *)(v74 + 10984) == 3)
    {
      v107 = *(unsigned int *)(v74 + 10848);
      v75 = *(_QWORD *)(*(_QWORD *)(v74 + 10840) + 8 * v107 - 8);
      *(_DWORD *)(v74 + 10848) = v107 - 1;
    }
    else
    {
      v75 = sub_22E7B94C8(v74, *(_QWORD *)(v71 + 16));
    }
    sub_22EFBC9E4(a2, v75);
    if (v73 != 1)
    {
      v76 = (_BYTE *)sub_22EFBCE18(a2);
      *v76 = *v76 & 0xF3 | (2 * v73) & 0xC;
    }
  }
  if (sub_22E49C868(a2))
  {
    v77 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0));
    if (v77)
    {
      if ((*(_DWORD *)(v77 + 28) & 0x7Fu) - 35 <= 2)
      {
        v78 = a1[1];
        v79 = *(_QWORD *)(v78 + 8);
        if (*(_DWORD *)(v79 + 10984) == 3)
        {
          v108 = *(unsigned int *)(v79 + 10848);
          v80 = *(_QWORD *)(*(_QWORD *)(v79 + 10840) + 8 * v108 - 8);
          *(_DWORD *)(v79 + 10848) = v108 - 1;
          if (!v80)
            goto LABEL_51;
        }
        else
        {
          v80 = sub_22E7B94C8(v79, *(_QWORD *)(v78 + 16));
          if (!v80)
            goto LABEL_51;
        }
        v109 = a1[1];
        v110 = *(_QWORD *)(*a1 + 128);
        v111 = *(unsigned int *)(v109 + 24);
        *(_DWORD *)(v109 + 24) = v111 + 1;
        v112 = *(_QWORD *)(*(_QWORD *)(v109 + 32) + 8 * v111) != 0;
        v114 = a2;
        sub_22F29E634((uint64_t *)(v110 + 1096), &v114)[1] = v80 & 0xFFFFFFFFFFFFFFFDLL | (2 * v112);
      }
    }
  }
LABEL_51:
  if (!sub_22E3CB5E0(a2) && (*(_BYTE *)(a2 + 96) & 0x18) == 0)
  {
    v81 = a1[1];
    v82 = *(unsigned int *)(v81 + 24);
    *(_DWORD *)(v81 + 24) = v82 + 1;
    if (*(_QWORD *)(*(_QWORD *)(v81 + 32) + 8 * v82))
    {
      v105 = *a1;
      if (*(_DWORD *)(a1[2] + 4) == 4)
        LOBYTE(v106) = 1;
      else
        v106 = (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v105 + 128) + 2000) + 20) >> 49) & 1;
      v114 = a2;
      *((_BYTE *)sub_22F2C3748((uint64_t *)(v105 + 11016), &v114) + 8) = v106;
    }
  }
  v83 = a1[1];
  v84 = v83 + 32;
  v85 = *(_QWORD *)(v83 + 32);
  v87 = *(_DWORD *)(v83 + 24);
  v86 = (_DWORD *)(v83 + 24);
  *(_DWORD *)(v83 + 24) = v87 + 1;
  v88 = *(_QWORD *)(v85 + 8 * v87);
  if ((_DWORD)v88)
  {
    if ((_DWORD)v88 == 1)
    {
      v101 = *(_QWORD *)(v83 + 8);
      v102 = sub_22E779F8C(v101, *(_QWORD *)(v83 + 16), v84, v86);
      v103 = sub_22E77F870(v101, v102);
      sub_22F3AC240(a2, v103);
      return v113[0];
    }
    if ((_DWORD)v88 == 2)
    {
      v89 = *(_QWORD *)(v83 + 8);
      v90 = sub_22E779F8C(v89, *(_QWORD *)(v83 + 16), v84, v86);
      v91 = sub_22E77F870(v89, v90);
      v92 = a1[1];
      v93 = *(unsigned int *)(v92 + 24);
      v94 = *(_QWORD *)(v92 + 32);
      v95 = *(_QWORD *)(v94 + 8 * v93);
      v96 = *(_QWORD *)(v92 + 8);
      v97 = *(_QWORD *)(v92 + 16);
      *(_DWORD *)(v92 + 24) = v93 + 2;
      HIDWORD(v98) = *(_QWORD *)(v94 + 8 * (v93 + 1));
      LODWORD(v98) = HIDWORD(v98);
      v99 = sub_22E77BAB4(v96, v97, v98 >> 1);
      sub_22F368424(*(_QWORD *)(*a1 + 128), a2, v91, v95, v99);
LABEL_61:
      sub_22E79C840(a1, (_BYTE *)v4, v113);
    }
  }
  else
  {
    v100 = *(_DWORD *)(a2 + 28) & 0x7F;
    if (v100 != 62 && v100 != 64 && (v100 - 65) >= 2)
      goto LABEL_61;
  }
  return v113[0];
}

_QWORD *sub_22E79C840(_QWORD *result, _BYTE *a2, uint64_t *a3)
{
  _QWORD *v5;
  uint64_t v6;
  _BYTE v7[16];
  uint64_t v8;

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*result + 128) + 2000) + 20) & 0x200000000000) != 0
    && (*a2 & 3) != 0)
  {
    v5 = result;
    v6 = *a3;
    if (v6)
    {
      return (_QWORD *)sub_22E7A0150(result, (uint64_t)a2, v6, (uint64_t)a3);
    }
    else
    {
      sub_22E7B0FFC((uint64_t)v7, result, (uint64_t)(a2 - 72));
      if (v8)
      {
        if ((*(_DWORD *)(v8 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9)
          sub_22E7A0150(v5, (uint64_t)a2, v8, (uint64_t)a3);
      }
      return (_QWORD *)sub_22E7B0E58((uint64_t)v7);
    }
  }
  return result;
}

_QWORD *sub_22E79C900(_QWORD *result, _BYTE *a2, uint64_t *a3)
{
  _QWORD *v5;
  uint64_t v6;
  _BYTE v7[16];
  uint64_t v8;

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*result + 128) + 2000) + 20) & 0x200000000000) != 0
    && (*a2 & 3) != 0)
  {
    v5 = result;
    v6 = *a3;
    if (v6)
    {
      return (_QWORD *)sub_22E7B6678(result, (uint64_t)a2, v6, (uint64_t)a3);
    }
    else
    {
      sub_22E7B0FFC((uint64_t)v7, result, (uint64_t)(a2 - 80));
      if (v8)
      {
        if ((*(_DWORD *)(v8 + 28) & 0x7F) == 0x10)
          sub_22E7B6678(v5, (uint64_t)a2, v8, (uint64_t)a3);
      }
      return (_QWORD *)sub_22E7B0E58((uint64_t)v7);
    }
  }
  return result;
}

uint64_t sub_22E79C9BC(uint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t **v27;

  v4 = sub_22E779F8C(*(_QWORD *)(a1[1] + 8), *(_QWORD *)(a1[1] + 16), a1[1] + 32, (_DWORD *)(a1[1] + 24));
  if ((_DWORD)v4)
  {
    v5 = v4;
    v6 = a1[1];
    v7 = *(_QWORD *)(v6 + 32);
    v8 = *(_DWORD *)(v6 + 24);
    v9 = v8 + 1;
    *(_DWORD *)(v6 + 24) = v8 + 1;
    v10 = *(_QWORD *)(v7 + 8 * v8);
    if ((_DWORD)v10)
    {
      v11 = v10 - 1;
      if ((_DWORD)v10 == 1)
      {
        v16 = 0;
      }
      else
      {
        do
        {
          v12 = a1[1];
          v13 = *(_QWORD *)(v12 + 8);
          v14 = sub_22E779F8C(v13, *(_QWORD *)(v12 + 16), v12 + 32, (_DWORD *)(v12 + 24));
          v15 = sub_22E77F870(v13, v14);
          --v11;
        }
        while (v11);
        v16 = v15;
        v6 = a1[1];
        v9 = *(_DWORD *)(v6 + 24);
        v7 = *(_QWORD *)(v6 + 32);
      }
      *(_DWORD *)(v6 + 24) = v9 + 1;
      v21 = *(_QWORD *)(v7 + 8 * v9);
      if (v21)
        v17 = (unint64_t *)(a1[3] - v21);
      else
        v17 = 0;
      v18 = 1;
    }
    else
    {
      v19 = *(_QWORD *)(v6 + 8);
      v20 = sub_22E779F8C(v19, *(_QWORD *)(v6 + 16), v6 + 32, (_DWORD *)(v6 + 24));
      sub_22E77F870(v19, v20);
      v17 = 0;
      v16 = 0;
      v18 = 0;
    }
  }
  else
  {
    v17 = 0;
    v16 = 0;
    v18 = 1;
    v5 = *((unsigned int *)a1 + 8);
  }
  v22 = sub_22E77F870(*a1, v5);
  v23 = (unint64_t *)(v22 + 48);
  if (!v22)
    v23 = 0;
  if (v23 != a2)
  {
    *a2 = v22 & 0xFFFFFFFFFFFFFFFCLL;
    a2[1] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22);
  }
  if (v18)
  {
    if (a2)
      v24 = a2 - 6;
    else
      v24 = 0;
    v25 = *a1;
    v26 = *(_DWORD *)(v25 + 8784);
    if (v26 >= *(_DWORD *)(v25 + 8788))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v26 = *(_DWORD *)(v25 + 8784);
    }
    v27 = (unint64_t **)(*(_QWORD *)(v25 + 8776) + 16 * v26);
    *v27 = v24;
    v27[1] = v17;
    ++*(_DWORD *)(v25 + 8784);
  }
  return v16;
}

_QWORD *sub_22E79CBA4(_QWORD *result, _BYTE *a2, uint64_t *a3)
{
  _QWORD *v5;
  uint64_t v6;
  _BYTE v7[16];
  uint64_t v8;

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*result + 128) + 2000) + 20) & 0x200000000000) != 0
    && (*a2 & 3) != 0)
  {
    v5 = result;
    v6 = *a3;
    if (v6)
    {
      return (_QWORD *)sub_22E7B677C(result, (uint64_t)a2, v6, (uint64_t)a3);
    }
    else
    {
      sub_22E7B0FFC((uint64_t)v7, result, (uint64_t)(a2 - 48));
      if (v8)
      {
        if ((*(_DWORD *)(v8 + 28) & 0x7F) == 0x11)
          sub_22E7B677C(v5, (uint64_t)a2, v8, (uint64_t)a3);
      }
      return (_QWORD *)sub_22E7B0E58((uint64_t)v7);
    }
  }
  return result;
}

uint64_t *sub_22E79CC60(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  unsigned int v5;
  BOOL v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[16];
  _DWORD *v12;
  uint64_t v13;

  v2 = *(_QWORD *)(*(_QWORD *)(*result + 128) + 2000);
  if ((*(_QWORD *)(v2 + 20) & 0x200000000000) != 0)
  {
    v4 = result;
    if ((*(_BYTE *)(v2 + 1) & 1) != 0
      || a2
      && ((v5 = (*(_DWORD *)(a2 + 28) & 0x7F) - 49, v6 = v5 > 0x13, v7 = (1 << v5) & 0xC0007, !v6)
        ? (v8 = v7 == 0)
        : (v8 = 1),
          !v8))
    {
      sub_22E7B0FFC((uint64_t)v11, result, a2);
      if (v12)
      {
        if ((v12[7] & 0x7F) == 0xD)
        {
          v9 = *(_QWORD *)(*v4 + 128);
          v10 = (*(uint64_t (**)(void))(*(_QWORD *)v12 + 32))();
          v13 = a2;
          sub_22F25E108((uint64_t *)(v9 + 1512), &v13)[1] = v10;
        }
      }
      return (uint64_t *)sub_22E7B0E58((uint64_t)v11);
    }
  }
  return result;
}

uint64_t *sub_22E79CD38(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  unsigned int v5;
  BOOL v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[16];
  _DWORD *v12;
  uint64_t v13;

  v2 = *(_QWORD *)(*(_QWORD *)(*result + 128) + 2000);
  if ((*(_QWORD *)(v2 + 20) & 0x200000000000) != 0)
  {
    v4 = result;
    if ((*(_BYTE *)(v2 + 1) & 1) != 0
      || a2
      && ((v5 = (*(_DWORD *)(a2 + 28) & 0x7F) - 49, v6 = v5 > 0x13, v7 = (1 << v5) & 0xC0007, !v6)
        ? (v8 = v7 == 0)
        : (v8 = 1),
          !v8))
    {
      sub_22E7B0FFC((uint64_t)v11, result, a2);
      if (v12)
      {
        if ((v12[7] & 0x7F) == 0xE)
        {
          v9 = *(_QWORD *)(*v4 + 128);
          v10 = (*(uint64_t (**)(void))(*(_QWORD *)v12 + 32))();
          v13 = a2;
          sub_22F25E108((uint64_t *)(v9 + 1512), &v13)[1] = v10;
        }
      }
      return (uint64_t *)sub_22E7B0E58((uint64_t)v11);
    }
  }
  return result;
}

uint64_t *sub_22E79CE10(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  unsigned int v5;
  BOOL v6;
  int v7;
  BOOL v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  _BYTE v12[16];
  unint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(*(_QWORD *)(*result + 128) + 2000);
  if ((*(_QWORD *)(v2 + 20) & 0x200000000000) != 0)
  {
    v4 = result;
    if ((*(_BYTE *)(v2 + 1) & 1) != 0
      || a2
      && ((v5 = (*(_DWORD *)(a2 + 28) & 0x7F) - 49, v6 = v5 > 0x13, v7 = (1 << v5) & 0xC0007, !v6)
        ? (v8 = v7 == 0)
        : (v8 = 1),
          !v8))
    {
      sub_22E7B0FFC((uint64_t)v12, result, a2);
      v9 = v13;
      if (v13)
      {
        v10 = *(_DWORD *)(v13 + 28);
        if ((v10 & 0x7F) == 0x2D)
        {
          v11 = *(_QWORD *)(*v4 + 128);
          if ((v10 & 0x8000) != 0)
            v9 = sub_22EFB5D7C(v13);
          v14 = a2;
          sub_22F25E108((uint64_t *)(v11 + 1512), &v14)[1] = v9;
        }
      }
      return (uint64_t *)sub_22E7B0E58((uint64_t)v12);
    }
  }
  return result;
}

_QWORD *sub_22E79CEE8(_QWORD *result, _BYTE *a2, uint64_t *a3)
{
  _QWORD *v5;
  uint64_t v6;
  _BYTE v7[16];
  uint64_t v8;

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*result + 128) + 2000) + 20) & 0x200000000000) != 0
    && (*a2 & 3) != 0)
  {
    v5 = result;
    v6 = *a3;
    if (v6)
    {
      return (_QWORD *)sub_22E7B677C(result, (uint64_t)a2, v6, (uint64_t)a3);
    }
    else
    {
      sub_22E7B0FFC((uint64_t)v7, result, (uint64_t)(a2 - 48));
      if (v8)
      {
        if ((*(_DWORD *)(v8 + 28) & 0x7E) == 0x2E)
          sub_22E7B677C(v5, (uint64_t)a2, v8, (uint64_t)a3);
      }
      return (_QWORD *)sub_22E7B0E58((uint64_t)v7);
    }
  }
  return result;
}

uint64_t *sub_22E79CFA4(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  unsigned int v5;
  BOOL v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[16];
  _DWORD *v12;
  uint64_t v13;

  v2 = *(_QWORD *)(*(_QWORD *)(*result + 128) + 2000);
  if ((*(_QWORD *)(v2 + 20) & 0x200000000000) != 0)
  {
    v4 = result;
    if ((*(_BYTE *)(v2 + 1) & 1) != 0
      || a2
      && ((v5 = (*(_DWORD *)(a2 + 28) & 0x7F) - 49, v6 = v5 > 0x13, v7 = (1 << v5) & 0xC0007, !v6)
        ? (v8 = v7 == 0)
        : (v8 = 1),
          !v8))
    {
      sub_22E7B0FFC((uint64_t)v11, result, a2);
      if (v12)
      {
        if ((v12[7] & 0x7F) == 0x4A)
        {
          v9 = *(_QWORD *)(*v4 + 128);
          v10 = (*(uint64_t (**)(void))(*(_QWORD *)v12 + 32))();
          v13 = a2;
          sub_22F25E108((uint64_t *)(v9 + 1512), &v13)[1] = v10;
        }
      }
      return (uint64_t *)sub_22E7B0E58((uint64_t)v11);
    }
  }
  return result;
}

uint64_t *sub_22E79D07C(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  unsigned int v5;
  BOOL v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[16];
  _DWORD *v12;
  uint64_t v13;

  v2 = *(_QWORD *)(*(_QWORD *)(*result + 128) + 2000);
  if ((*(_QWORD *)(v2 + 20) & 0x200000000000) != 0)
  {
    v4 = result;
    if ((*(_BYTE *)(v2 + 1) & 1) != 0
      || a2
      && ((v5 = (*(_DWORD *)(a2 + 28) & 0x7F) - 49, v6 = v5 > 0x13, v7 = (1 << v5) & 0xC0007, !v6)
        ? (v8 = v7 == 0)
        : (v8 = 1),
          !v8))
    {
      sub_22E7B0FFC((uint64_t)v11, result, a2);
      if (v12)
      {
        if ((v12[7] & 0x7F) == 0x2A)
        {
          v9 = *(_QWORD *)(*v4 + 128);
          v10 = (*(uint64_t (**)(void))(*(_QWORD *)v12 + 32))();
          v13 = a2;
          sub_22F25E108((uint64_t *)(v9 + 1512), &v13)[1] = v10;
        }
      }
      return (uint64_t *)sub_22E7B0E58((uint64_t)v11);
    }
  }
  return result;
}

void sub_22E79D154(_BOOL8 *a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  _BOOL4 v89;
  _BOOL4 v90;
  int v91;
  int v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  __int16 v96;
  int v97;
  _QWORD *v98;
  uint64_t v99;
  unsigned int v100;
  _QWORD *v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  int v107;
  int v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  int v116;
  unint64_t v117;
  uint64_t v118;
  int v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int v149;
  int v150;
  unsigned int v151;
  unsigned int v152;
  int v153;
  uint64_t *v154;
  uint64_t v155;
  _BOOL8 *v156;
  _QWORD v157[3];
  uint64_t v158;
  uint64_t v159;

  v6 = *(_QWORD *)(a2 + 128);
  v7 = *(_QWORD *)(v6 + 88);
  v154 = (uint64_t *)(v6 + 88);
  v8 = *((_QWORD *)a3 + 11);
  if (v7 != v8)
  {
    v9 = *a1 + 10768;
    if (v8)
      v10 = v8 + 64;
    else
      v10 = 0;
    if (v7)
      v11 = v7 + 64;
    else
      v11 = 0;
    v158 = v10;
    v159 = v11;
    sub_22E7B58E8((uint64_t)v157, v9, &v158, &v159);
    v12 = *a1;
    v13 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(*a1 + 3704), *((void **)a3 + 11));
    v14 = *(_QWORD *)(v12 + 3712);
    v15 = 3720;
    if (v14 == *(_QWORD *)(v12 + 3704))
      v15 = 3724;
    if (v13 != (void **)(v14 + 8 * *(unsigned int *)(v12 + v15)))
    {
      *v13 = (void *)-2;
      ++*(_DWORD *)(v12 + 3728);
    }
    *(_DWORD *)(*((_QWORD *)a3 + 11) + 72) &= ~0x10000u;
    sub_22E77A7D4(*a1, *v154, *((_QWORD *)a3 + 11));
  }
  v16 = *a1;
  v157[0] = 0;
  if ((sub_22E7B6870(*(_QWORD *)(v16 + 3184), *(_DWORD *)(v16 + 3200), v6, v157) & 1) != 0)
    v17 = v157[0];
  else
    v17 = *(_QWORD *)(v16 + 3184) + 16 * *(unsigned int *)(v16 + 3200);
  if (v17 != *(_QWORD *)(*a1 + 3184) + 16 * *(unsigned int *)(*a1 + 3200) && *(_DWORD *)(v17 + 8) == 1)
  {
    *(_DWORD *)(v17 + 8) = 2;
    v102 = *(_QWORD *)(v6 + 88);
    sub_22F2C2444(v6, (__int128 *)a3);
    *(_QWORD *)(v6 + 88) = v102;
  }
  else
  {
    v155 = a2;
    v156 = a1;
    v18 = *(_QWORD *)v6;
    v150 = *a3;
    v19 = v18 & 0xFFFFFFFFFFFFFFFELL | (*a3 | v18) & 1;
    *(_QWORD *)v6 = v19;
    v152 = *a3 >> 1;
    v20 = v19 & 0xFFFFFFFFFFFFFF81 | (2 * ((v152 | (v18 >> 1)) & 0x3Fu));
    *(_QWORD *)v6 = v20;
    v149 = *a3 >> 7;
    v21 = v20 & 0xFFFFFFFFFFFFFF7FLL | (((*a3 & 0x80) != 0 || (v18 & 0x80) != 0) << 7);
    *(_QWORD *)v6 = v21;
    v148 = *a3 >> 8;
    v22 = v21 & 0xFFFFFFFFFFFFFEFFLL | (((v148 | BYTE1(v18)) & 1) << 8);
    *(_QWORD *)v6 = v22;
    v147 = *a3 >> 9;
    v23 = v22 & 0xFFFFFFFFFFFFFDFFLL | (((*a3 & 0x200) != 0 || (v18 & 0x200) != 0) << 9);
    *(_QWORD *)v6 = v23;
    v146 = *a3 >> 10;
    v24 = v23 & 0xFFFFFFFFFFFFFBFFLL | (((*a3 & 0x400) != 0 || (v18 & 0x400) != 0) << 10);
    *(_QWORD *)v6 = v24;
    v145 = *a3 >> 11;
    v25 = v24 & 0xFFFFFFFFFFFFF7FFLL | (((*a3 & 0x800) != 0 || (v18 & 0x800) != 0) << 11);
    *(_QWORD *)v6 = v25;
    v144 = *a3 >> 12;
    v26 = v25 & 0xFFFFFFFFFFFFEFFFLL | (((*a3 & 0x1000) != 0 || (v18 & 0x1000) != 0) << 12);
    *(_QWORD *)v6 = v26;
    v143 = *a3 >> 13;
    v27 = v26 & 0xFFFFFFFFFFFFDFFFLL | (((*a3 & 0x2000) != 0 || (v18 & 0x2000) != 0) << 13);
    *(_QWORD *)v6 = v27;
    v142 = *a3 >> 14;
    v28 = v27 & 0xFFFFFFFFFFFFBFFFLL | (((*a3 & 0x4000) != 0 || (v18 & 0x4000) != 0) << 14);
    *(_QWORD *)v6 = v28;
    v141 = *a3 >> 15;
    v29 = v28 & 0xFFFFFFFFFFFF7FFFLL | (((*a3 & 0x8000) != 0 || (v18 & 0x8000) != 0) << 15);
    *(_QWORD *)v6 = v29;
    v140 = HIWORD(*a3);
    v30 = v29 & 0xFFFFFFFFFFFEFFFFLL | (((v140 | BYTE2(v18)) & 1) << 16);
    *(_QWORD *)v6 = v30;
    v139 = *a3 >> 17;
    v31 = v30 & 0xFFFFFFFFFFFDFFFFLL | (((*a3 & 0x20000) != 0 || (v18 & 0x20000) != 0) << 17);
    *(_QWORD *)v6 = v31;
    v138 = *a3 >> 18;
    v32 = v31 & 0xFFFFFFFFFFFBFFFFLL | (((*a3 & 0x40000) != 0 || (v18 & 0x40000) != 0) << 18);
    *(_QWORD *)v6 = v32;
    v137 = *a3 >> 19;
    v33 = v32 & 0xFFFFFFFFFFF7FFFFLL | (((*a3 & 0x80000) != 0 || (v18 & 0x80000) != 0) << 19);
    *(_QWORD *)v6 = v33;
    v136 = *a3 >> 20;
    v34 = v33 & 0xFFFFFFFFFFEFFFFFLL | (((*a3 & 0x100000) != 0 || (v18 & 0x100000) != 0) << 20);
    *(_QWORD *)v6 = v34;
    v135 = *a3 >> 21;
    v35 = v34 & 0xFFFFFFFFFFDFFFFFLL | (((*a3 & 0x200000) != 0 || (v18 & 0x200000) != 0) << 21);
    *(_QWORD *)v6 = v35;
    v134 = *a3 >> 22;
    v36 = v35 & 0xFFFFFFFFFFBFFFFFLL | (((*a3 & 0x400000) != 0 || (v18 & 0x400000) != 0) << 22);
    *(_QWORD *)v6 = v36;
    v133 = *a3 >> 23;
    v37 = v36 & 0xFFFFFFFFFF7FFFFFLL | (((*a3 & 0x800000) != 0 || (v18 & 0x800000) != 0) << 23);
    *(_QWORD *)v6 = v37;
    v132 = HIBYTE(*a3);
    v38 = v37 & 0xFFFFFFFFFEFFFFFFLL | (((v132 | BYTE3(v18)) & 1) << 24);
    *(_QWORD *)v6 = v38;
    v131 = *a3 >> 25;
    v39 = v38 & 0xFFFFFFFFFDFFFFFFLL | (((*a3 & 0x2000000) != 0 || (v18 & 0x2000000) != 0) << 25);
    *(_QWORD *)v6 = v39;
    v130 = *a3 >> 26;
    v40 = v39 & 0xFFFFFFFFFBFFFFFFLL | (((*a3 & 0x4000000) != 0 || (v18 & 0x4000000) != 0) << 26);
    *(_QWORD *)v6 = v40;
    v129 = *a3 >> 27;
    v41 = v40 & 0xFFFFFFFFF7FFFFFFLL | (((*a3 & 0x8000000) != 0 || (v18 & 0x8000000) != 0) << 27);
    *(_QWORD *)v6 = v41;
    v128 = *a3 >> 28;
    v42 = v41 & 0xFFFFFFFFEFFFFFFFLL | (((*a3 & 0x10000000) != 0 || (v18 & 0x10000000) != 0) << 28);
    *(_QWORD *)v6 = v42;
    v127 = *a3 >> 29;
    v43 = v42 & 0xFFFFFFFFDFFFFFFFLL | (((*a3 & 0x20000000) != 0 || (v18 & 0x20000000) != 0) << 29);
    *(_QWORD *)v6 = v43;
    v126 = *a3 >> 30;
    v44 = v43 & 0xFFFFFFFFBFFFFFFFLL | (((*a3 & 0x40000000) != 0 || (v18 & 0x40000000) != 0) << 30);
    *(_QWORD *)v6 = v44;
    v151 = *a3 >> 31;
    *(_QWORD *)v6 = v44 & 0xFFFFFFFF7FFFFFFFLL | ((v151 | (v18 >> 31)) << 31);
    v119 = a3[1];
    *(_QWORD *)v6 = v44 & 0xFFFFFFFE7FFFFFFFLL | ((v151 | (v18 >> 31)) << 31) | ((unint64_t)((v119 | BYTE4(v18)) & 1) << 32);
    v118 = *(_QWORD *)a3 >> 33;
    v116 = *((unsigned __int16 *)a3 + 4);
    v45 = v44 & 0xFFFFFFFC7FFFFFFFLL | ((v151 | (v18 >> 31)) << 31) | ((unint64_t)((v119 | BYTE4(v18)) & 1) << 32) & 0xFFFFFFFDFFFFFFFFLL | ((unint64_t)(((*(_QWORD *)a3 & 0x200000000) != 0) | ((v18 & 0x200000000) != 0)) << 33);
    *(_QWORD *)v6 = v45;
    v115 = *(_QWORD *)a3 >> 34;
    v46 = v45 & 0xFFFFFFFBFFFFFFFFLL | ((unint64_t)(((*(_QWORD *)a3 & 0x400000000) != 0) | ((v18 & 0x400000000) != 0)) << 34);
    v114 = *((unsigned __int16 *)a3 + 4);
    *(_QWORD *)v6 = v46;
    v113 = *(_QWORD *)a3 >> 35;
    v47 = v46 & 0xFFFFFFF7FFFFFFFFLL | ((unint64_t)(((*(_QWORD *)a3 & 0x800000000) != 0) | ((v18 & 0x800000000) != 0)) << 35);
    v112 = *((unsigned __int16 *)a3 + 4);
    *(_QWORD *)v6 = v47;
    v111 = *(_QWORD *)a3 >> 36;
    v48 = v47 & 0xFFFFFFEFFFFFFFFFLL | ((unint64_t)(((*(_QWORD *)a3 & 0x1000000000) != 0) | ((v18 & 0x1000000000) != 0)) << 36);
    v109 = *((unsigned __int16 *)a3 + 4);
    *(_QWORD *)v6 = v48;
    v106 = *(_QWORD *)a3 >> 37;
    v49 = v48 & 0xFFFFFFDFFFFFFFFFLL | ((unint64_t)(((*(_QWORD *)a3 & 0x2000000000) != 0) | ((v18 & 0x2000000000) != 0)) << 37);
    v105 = *((unsigned __int16 *)a3 + 4);
    *(_QWORD *)v6 = v49;
    v104 = *(_QWORD *)a3 >> 38;
    v50 = v49 & 0xFFFFFFBFFFFFFFFFLL | ((unint64_t)(((*(_QWORD *)a3 & 0x4000000000) != 0) | ((v18 & 0x4000000000) != 0)) << 38);
    v103 = *((unsigned __int16 *)a3 + 4);
    *(_QWORD *)v6 = v50;
    v51 = v50 & 0xFFFFE07FFFFFFFFFLL | ((((*(_QWORD *)a3 | v18) >> 39) & 0x3F) << 39);
    *(_QWORD *)v6 = v51;
    v52 = v51 & 0xFFF81FFFFFFFFFFFLL | ((((*(_QWORD *)a3 | v18) >> 45) & 0x3F) << 45);
    *(_QWORD *)v6 = v52;
    v53 = v52 & 0xFE07FFFFFFFFFFFFLL | ((((*(_QWORD *)a3 | v18) >> 51) & 0x3F) << 51);
    *(_QWORD *)v6 = v53;
    v54 = v53 & 0x81FFFFFFFFFFFFFFLL | ((((*(_QWORD *)a3 | v18) >> 57) & 0x3F) << 57);
    *(_QWORD *)v6 = v54;
    v110 = *(_QWORD *)a3 >> 63;
    v55 = v54 & 0x7FFFFFFFFFFFFFFFLL | ((unint64_t)((*(uint64_t *)a3 < 0) | ((v18 & 0x8000000000000000) != 0)) << 63);
    v56 = *(unsigned __int8 *)(v6 + 10);
    v57 = *(unsigned __int16 *)(v6 + 8) | (v56 << 16);
    v107 = *((unsigned __int16 *)a3 + 4);
    v108 = *((unsigned __int8 *)a3 + 10);
    *(_QWORD *)v6 = v55;
    v58 = v57 & 0xFFFFFE | (*((_WORD *)a3 + 4) | v57) & 1;
    *(_QWORD *)v6 = v55;
    v59 = v56;
    *(_BYTE *)(v6 + 10) = v56;
    *(_WORD *)(v6 + 8) = v58;
    v58 &= ~2uLL;
    v60 = v58 | (*((_WORD *)a3 + 4) | v57) & 2;
    v61 = v58 >> 16;
    *(_BYTE *)(v6 + 10) = BYTE2(v58);
    *(_QWORD *)v6 = v55;
    *(_WORD *)(v6 + 8) = v60;
    v62 = (*((unsigned __int16 *)a3 + 4) | ((unint64_t)*((unsigned __int8 *)a3 + 10) << 16)) >> 2;
    v64 = v60 & 0xFFFFFFFFFFFFFFFBLL | (4 * (((a3[2] & 4) != 0) | ((v57 & 4) != 0)));
    *(_BYTE *)(v6 + 10) = BYTE2(v58);
    *(_QWORD *)v6 = v55;
    *(_WORD *)(v6 + 8) = v64;
    v65 = v64 & 0xFFFFFFFFFFFFFFF7 | (8
                                      * (((unint64_t)(*((unsigned __int16 *)a3 + 4) | v57) >> 3) & 1));
    *(_BYTE *)(v6 + 10) = BYTE2(v58);
    *(_QWORD *)v6 = v55;
    *(_WORD *)(v6 + 8) = v65;
    v66 = (*((unsigned __int16 *)a3 + 4) | ((unint64_t)*((unsigned __int8 *)a3 + 10) << 16)) >> 4;
    v68 = v65 & 0xFFFFFFFFFFFFFFEFLL | (16 * (((a3[2] & 0x10) != 0) | ((v57 & 0x10) != 0)));
    *(_BYTE *)(v6 + 10) = v61;
    *(_QWORD *)v6 = v55;
    *(_WORD *)(v6 + 8) = v68;
    v69 = (*((unsigned __int16 *)a3 + 4) | ((unint64_t)*((unsigned __int8 *)a3 + 10) << 16)) >> 5;
    v71 = v68 & 0xFFFFFFFFFFFFFFDFLL | (32 * (((a3[2] & 0x20) != 0) | ((v57 & 0x20) != 0)));
    *(_BYTE *)(v6 + 10) = v61;
    *(_QWORD *)v6 = v55;
    *(_WORD *)(v6 + 8) = v71;
    v72 = (*((unsigned __int16 *)a3 + 4) | ((unint64_t)*((unsigned __int8 *)a3 + 10) << 16)) >> 6;
    v73 = v71 & 0xFFFFFFFFFFFFFFBFLL | ((unint64_t)(((a3[2] & 0x40) != 0) | ((v57 & 0x40) != 0)) << 6);
    *(_BYTE *)(v6 + 10) = v61;
    *(_QWORD *)v6 = v55;
    *(_WORD *)(v6 + 8) = v73;
    v74 = (*((unsigned __int16 *)a3 + 4) | ((unint64_t)*((unsigned __int8 *)a3 + 10) << 16)) >> 7;
    v75 = v73 & 0xFFFFFFFFFFFFFF7FLL | ((unint64_t)(((a3[2] & 0x80) != 0) | ((v57 & 0x80) != 0)) << 7);
    *(_BYTE *)(v6 + 10) = v61;
    *(_QWORD *)v6 = v55;
    *(_WORD *)(v6 + 8) = v75;
    v76 = v75 & 0xFFFFFFFFFFFFC0FFLL | ((((unint64_t)(*((unsigned __int16 *)a3 + 4) | v57) >> 8) & 0x3F) << 8);
    *(_BYTE *)(v6 + 10) = v61;
    *(_QWORD *)v6 = v55;
    *(_WORD *)(v6 + 8) = v76;
    v77 = (*((unsigned __int16 *)a3 + 4) | ((unint64_t)*((unsigned __int8 *)a3 + 10) << 16)) >> 14;
    v78 = v76 & 0xFFFFFFFFFFFFBFFFLL | ((unint64_t)(((a3[2] & 0x4000) != 0) | ((v57 & 0x4000) != 0)) << 14);
    *(_BYTE *)(v6 + 10) = v61;
    *(_QWORD *)v6 = v55;
    *(_WORD *)(v6 + 8) = v78;
    v79 = (*((unsigned __int16 *)a3 + 4) | ((unint64_t)*((unsigned __int8 *)a3 + 10) << 16)) >> 15;
    v80 = v78 & 0xFFFFFFFFFFFF7FFFLL | ((unint64_t)(((a3[2] & 0x8000) != 0) | ((v57 & 0x8000) != 0)) << 15);
    *(_BYTE *)(v6 + 10) = v61;
    *(_QWORD *)v6 = v55;
    *(_WORD *)(v6 + 8) = v80;
    v81 = *((unsigned __int8 *)a3 + 10);
    *(_BYTE *)(v6 + 10) = (v80 & 0xFFFEFFFF | (((v81 | v56) & 1) << 16)) >> 16;
    *(_QWORD *)v6 = v55;
    *(_WORD *)(v6 + 8) = v80;
    v82 = v80 & 0xFFFFFFFFFFFCFFFFLL | ((unint64_t)((v81 | v56) & 1) << 16) & 0xFFFFFFFFFFFDFFFFLL | ((((unint64_t)(v57 | (*((unsigned __int8 *)a3 + 10) << 16)) >> 17) & 1) << 17);
    *(_BYTE *)(v6 + 10) = BYTE2(v82);
    *(_WORD *)(v6 + 8) = v80;
    *(_QWORD *)v6 = v55;
    v83 = v82 & 0xFFFFFFFFFFFBFFFFLL | ((((unint64_t)(v57 | (*((unsigned __int8 *)a3 + 10) << 16)) >> 18) & 1) << 18);
    *(_BYTE *)(v6 + 10) = BYTE2(v83);
    *(_WORD *)(v6 + 8) = v80;
    *(_QWORD *)v6 = v55;
    v84 = (unint64_t)*((unsigned __int8 *)a3 + 10) >> 3;
    v85 = v56 >> 3;
    v86 = v83 & 0xFFF7FFFF | (((*((_BYTE *)a3 + 10) & 8) != 0 || (v56 & 8) != 0) << 19);
    *(_BYTE *)(v6 + 10) = BYTE2(v86);
    *(_WORD *)(v6 + 8) = v80;
    *(_QWORD *)v6 = v55;
    v87 = v56 >> 4;
    v88 = (unint64_t)*((unsigned __int8 *)a3 + 10) >> 4;
    LODWORD(v83) = ((*((_BYTE *)a3 + 10) & 0x10) != 0) | v87 & 1;
    *(_WORD *)(v6 + 8) = v80;
    *(_BYTE *)(v6 + 10) = (v86 & 0xFFEFFFFF | ((_DWORD)v83 << 20)) >> 16;
    *(_QWORD *)v6 = v55;
    if (*(_DWORD *)(v6 + 16) == a3[4]
      && (v89 = ((v152 ^ (v18 >> 1)) & 0x3F) != 0, *(_DWORD *)(v6 + 20) == a3[5]))
    {
      v91 = v119 ^ HIDWORD(v18);
      v153 = v72 ^ (v57 >> 6) | v74 ^ (v57 >> 7) | v77 ^ (v57 >> 14) | v79 ^ (v57 >> 15) | v81 ^ v59 | v84 ^ v85 | v88 ^ v87;
      v90 = ((v18 >> 31) & 1) != v151;
      v67 = v57 >> 4;
      v70 = v57 >> 5;
      v63 = v57 >> 2;
      v117 = v18 >> 63;
      v120 = v18 >> 38;
      v121 = v18 >> 37;
      v122 = v18 >> 36;
      v123 = v18 >> 35;
      v124 = v18 >> 34;
      v125 = v18 >> 33;
      v92 = (v149 ^ (v18 >> 7) | v150 ^ v18 | v148 ^ (v18 >> 8) | v89 | v147 ^ (v18 >> 9) | v146 ^ (v18 >> 10) | v145 ^ (v18 >> 11) | v144 ^ (v18 >> 12) | v143 ^ (v18 >> 13) | v142 ^ (v18 >> 14) | v141 ^ (v18 >> 15) | v140 ^ WORD1(v18) | v139 ^ (v18 >> 17) | v138 ^ (v18 >> 18) | v137 ^ (v18 >> 19) | v136 ^ (v18 >> 20) | v135 ^ (v18 >> 21) | v134 ^ (v18 >> 22) | v133 ^ (v18 >> 23) | v132 ^ BYTE3(v18) | v131 ^ (v18 >> 25) | v130 ^ (v18 >> 26) | v129 ^ (v18 >> 27) | v128 ^ (v18 >> 28) | v127 ^ (v18 >> 29) | v126 ^ (v18 >> 30) | v90 | v91 | (v118 | (v116 << 31)) ^ (v125 | ((_DWORD)v57 << 31)) | (v115 | (v114 << 30)) ^ (v124 | ((_DWORD)v57 << 30)) | (v113 | (v112 << 29)) ^ (v123 | ((_DWORD)v57 << 29)) | (v111 | (v109 << 28)) ^ (v122 | ((_DWORD)v57 << 28)) | (v106 | (v105 << 27)) ^ (v121 | ((_DWORD)v57 << 27)) | (v104 | (v103 << 26)) ^ (v120 | ((_DWORD)v57 << 26)) | (v110 | (2 * v107) | (v108 << 17)) ^ (v117 | (2 * v57)) | v62 ^ v63 | v66 ^ v67 | v69 ^ v70 | v153) & 1;
    }
    else
    {
      v92 = 1;
    }
    if (((*((unsigned __int16 *)a3 + 4) | (*((unsigned __int8 *)a3 + 10) << 16)) & 0x400000) != 0
      && (v57 & 0x400000) == 0)
    {
      v93 = *((_QWORD *)a3 + 10);
      v94 = *((_OWORD *)a3 + 4);
      *((_QWORD *)a3 + 8) = 0;
      *((_QWORD *)a3 + 9) = 0;
      *((_QWORD *)a3 + 10) = v93 & 3;
      v96 = *(_WORD *)(v6 + 8);
      v95 = v6 + 8;
      *(_OWORD *)(v95 + 56) = v94;
      *(_QWORD *)(v95 + 72) = v93;
      LODWORD(v93) = ((*(unsigned __int8 *)(v95 + 2) << 16) | 0x400000u) >> 16;
      *(_WORD *)v95 = v96;
      *(_BYTE *)(v95 + 2) = v93;
    }
    if (sub_22EFD0E14(v155) == a3[3])
      v97 = v92;
    else
      v97 = 1;
    if (v97 == 1)
    {
      v98 = sub_22F2C39E4((_DWORD *)(*v156 + 9648), v154);
      v99 = *((_QWORD *)a3 + 11);
      v100 = *((_DWORD *)v98 + 4);
      if (v100 >= *((_DWORD *)v98 + 5))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v100 = *((_DWORD *)v98 + 4);
      }
      v101 = (_QWORD *)(v98[1] + 16 * v100);
      *v101 = v99;
      v101[1] = a3;
      ++*((_DWORD *)v98 + 4);
    }
  }
}

void sub_22E79DEF0(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int v156;
  uint64_t v157;
  unsigned int v158;
  uint64_t v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  unsigned int v174;
  unsigned int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unsigned int v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  int v206;
  uint64_t v207;
  uint64_t v208;
  unsigned int v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  unint64_t v213;
  _BOOL4 v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  int v225;
  uint64_t v226;
  unint64_t v227;
  _QWORD *v228;
  _QWORD *v229;

  v6 = a1[1];
  v7 = *(_QWORD *)(*a1 + 128);
  v8 = *(unsigned int *)(v6 + 24);
  *(_DWORD *)(v6 + 24) = v8 + 1;
  v9 = v7 + 2032;
  if (*(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * v8))
  {
    v10 = sub_22E3CD3D4(v9, 144, 3);
    *(_OWORD *)(v10 + 12) = 0u;
    *(_OWORD *)(v10 + 28) = 0u;
    *(_OWORD *)(v10 + 44) = 0u;
    *(_OWORD *)(v10 + 60) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_QWORD *)(v10 + 88) = a2;
    *(_QWORD *)(v10 + 96) = 0;
    *(_DWORD *)(v10 + 104) &= 0xFFF00000;
    *(_WORD *)(v10 + 108) &= 0xC000u;
    *(_DWORD *)(v10 + 112) &= 0x80000000;
    *(_QWORD *)(v10 + 128) = 0;
    *(_QWORD *)(v10 + 136) = 0;
    *(_QWORD *)(v10 + 120) = 0;
    *(_BYTE *)(v10 + 10) = 17;
    *(_WORD *)(v10 + 8) = -16300;
    *(_QWORD *)v10 = 0x8007FF8000203200;
  }
  else
  {
    v10 = sub_22E3CD3D4(v9, 104, 3);
    *(_BYTE *)(v10 + 10) = 1;
    *(_WORD *)(v10 + 8) = -16300;
    *(_QWORD *)v10 = 0x8007FF8000203380;
    *(_OWORD *)(v10 + 12) = 0u;
    *(_OWORD *)(v10 + 28) = 0u;
    *(_OWORD *)(v10 + 44) = 0u;
    *(_OWORD *)(v10 + 60) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_QWORD *)(v10 + 88) = a2;
    *(_QWORD *)(v10 + 96) = 0;
  }
  v11 = (*(uint64_t (**)(_QWORD *))(*a2 + 32))(a2);
  v12 = v11;
  v13 = *(_QWORD *)(v11 + 128);
  if (!v13)
  {
    *(_QWORD *)(v11 + 128) = v10;
    v13 = v10;
  }
  a2[16] = v13;
  v14 = a1[1];
  v15 = *(unsigned int *)(v14 + 24);
  *(_DWORD *)(v14 + 24) = v15 + 1;
  *(_QWORD *)v10 = *(_QWORD *)v10 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(*(_QWORD *)(v14 + 32) + 8 * v15) & 1;
  v16 = a1[1];
  v17 = *(unsigned int *)(v16 + 24);
  *(_DWORD *)(v16 + 24) = v17 + 1;
  *(_QWORD *)v10 = *(_QWORD *)v10 & 0xFFFFFFFFFFFFFF81 | (2 * (*(_QWORD *)(*(_QWORD *)(v16 + 32) + 8 * v17) & 0x3FLL));
  v18 = a1[1];
  v19 = *(unsigned int *)(v18 + 24);
  *(_DWORD *)(v18 + 24) = v19 + 1;
  *(_QWORD *)v10 = *(_QWORD *)v10 & 0xFFFFFFFFFFFFFF7FLL | ((*(_QWORD *)(*(_QWORD *)(v18 + 32) + 8 * v19) & 1) << 7);
  v20 = a1[1];
  v21 = *(unsigned int *)(v20 + 24);
  *(_DWORD *)(v20 + 24) = v21 + 1;
  *(_QWORD *)v10 = *(_QWORD *)v10 & 0xFFFFFFFFFFFFFEFFLL | ((*(_QWORD *)(*(_QWORD *)(v20 + 32) + 8 * v21) & 1) << 8);
  v22 = a1[1];
  v23 = *(unsigned int *)(v22 + 24);
  *(_DWORD *)(v22 + 24) = v23 + 1;
  *(_QWORD *)v10 = *(_QWORD *)v10 & 0xFFFFFFFFFFFFFDFFLL | ((*(_QWORD *)(*(_QWORD *)(v22 + 32) + 8 * v23) & 1) << 9);
  v24 = a1[1];
  v25 = *(unsigned int *)(v24 + 24);
  *(_DWORD *)(v24 + 24) = v25 + 1;
  *(_QWORD *)v10 = *(_QWORD *)v10 & 0xFFFFFFFFFFFFFBFFLL | ((*(_QWORD *)(*(_QWORD *)(v24 + 32) + 8 * v25) & 1) << 10);
  v26 = a1[1];
  v27 = *(unsigned int *)(v26 + 24);
  v28 = v27 + 1;
  v29 = *(_QWORD *)(*(_QWORD *)(v26 + 32) + 8 * v27);
  *(_DWORD *)(v26 + 24) = v28;
  *(_QWORD *)v10 = *(_QWORD *)v10 & 0xFFFFFFFFFFFFF7FFLL | ((unint64_t)(v29 & 1) << 11);
  v30 = a1[1];
  v31 = *(unsigned int *)(v30 + 24);
  *(_DWORD *)(v30 + 24) = v31 + 1;
  *(_QWORD *)v10 = *(_QWORD *)v10 & 0xFFFFFFFFFFFFEFFFLL | ((*(_QWORD *)(*(_QWORD *)(v30 + 32) + 8 * v31) & 1) << 12);
  v32 = a1[1];
  v33 = *(unsigned int *)(v32 + 24);
  *(_DWORD *)(v32 + 24) = v33 + 1;
  *(_QWORD *)v10 = *(_QWORD *)v10 & 0xFFFFFFFFFFFFDFFFLL | ((*(_QWORD *)(*(_QWORD *)(v32 + 32) + 8 * v33) & 1) << 13);
  v34 = a1[1];
  v35 = *(unsigned int *)(v34 + 24);
  *(_DWORD *)(v34 + 24) = v35 + 1;
  *(_QWORD *)v10 = *(_QWORD *)v10 & 0xFFFFFFFFFFFFBFFFLL | ((*(_QWORD *)(*(_QWORD *)(v34 + 32) + 8 * v35) & 1) << 14);
  v36 = a1[1];
  v37 = *(unsigned int *)(v36 + 24);
  *(_DWORD *)(v36 + 24) = v37 + 1;
  *(_QWORD *)v10 = *(_QWORD *)v10 & 0xFFFFFFFFFFFF7FFFLL | ((*(_QWORD *)(*(_QWORD *)(v36 + 32) + 8 * v37) & 1) << 15);
  v38 = a1[1];
  v39 = *(unsigned int *)(v38 + 24);
  *(_DWORD *)(v38 + 24) = v39 + 1;
  *(_QWORD *)v10 = *(_QWORD *)v10 & 0xFFFFFFFFFFFEFFFFLL | ((*(_QWORD *)(*(_QWORD *)(v38 + 32) + 8 * v39) & 1) << 16);
  v40 = a1[1];
  v41 = *(unsigned int *)(v40 + 24);
  v42 = v41 + 1;
  v43 = *(_QWORD *)(*(_QWORD *)(v40 + 32) + 8 * v41);
  *(_DWORD *)(v40 + 24) = v42;
  *(_QWORD *)v10 = *(_QWORD *)v10 & 0xFFFFFFFFFFFDFFFFLL | ((unint64_t)(v43 & 1) << 17);
  v44 = a1[1];
  v45 = *(unsigned int *)(v44 + 24);
  *(_DWORD *)(v44 + 24) = v45 + 1;
  *(_QWORD *)v10 = *(_QWORD *)v10 & 0xFFFFFFFFFFFBFFFFLL | ((*(_QWORD *)(*(_QWORD *)(v44 + 32) + 8 * v45) & 1) << 18);
  v46 = a1[1];
  v47 = *(unsigned int *)(v46 + 24);
  *(_DWORD *)(v46 + 24) = v47 + 1;
  *(_QWORD *)v10 = *(_QWORD *)v10 & 0xFFFFFFFFFFF7FFFFLL | ((*(_QWORD *)(*(_QWORD *)(v46 + 32) + 8 * v47) & 1) << 19);
  v48 = a1[1];
  v49 = *(unsigned int *)(v48 + 24);
  *(_DWORD *)(v48 + 24) = v49 + 1;
  *(_QWORD *)v10 = *(_QWORD *)v10 & 0xFFFFFFFFFFEFFFFFLL | ((*(_QWORD *)(*(_QWORD *)(v48 + 32) + 8 * v49) & 1) << 20);
  v50 = a1[1];
  v51 = *(unsigned int *)(v50 + 24);
  *(_DWORD *)(v50 + 24) = v51 + 1;
  *(_QWORD *)v10 = *(_QWORD *)v10 & 0xFFFFFFFFFFDFFFFFLL | ((*(_QWORD *)(*(_QWORD *)(v50 + 32) + 8 * v51) & 1) << 21);
  v52 = a1[1];
  v53 = *(unsigned int *)(v52 + 24);
  *(_DWORD *)(v52 + 24) = v53 + 1;
  *(_QWORD *)v10 = *(_QWORD *)v10 & 0xFFFFFFFFFFBFFFFFLL | ((*(_QWORD *)(*(_QWORD *)(v52 + 32) + 8 * v53) & 1) << 22);
  v54 = a1[1];
  v55 = *(unsigned int *)(v54 + 24);
  v56 = v55 + 1;
  v57 = *(_QWORD *)(*(_QWORD *)(v54 + 32) + 8 * v55);
  *(_DWORD *)(v54 + 24) = v56;
  *(_QWORD *)v10 = *(_QWORD *)v10 & 0xFFFFFFFFFF7FFFFFLL | ((unint64_t)(v57 & 1) << 23);
  v58 = a1[1];
  v59 = *(unsigned int *)(v58 + 24);
  *(_DWORD *)(v58 + 24) = v59 + 1;
  *(_QWORD *)v10 = *(_QWORD *)v10 & 0xFFFFFFFFFEFFFFFFLL | ((*(_QWORD *)(*(_QWORD *)(v58 + 32) + 8 * v59) & 1) << 24);
  v60 = a1[1];
  v61 = *(unsigned int *)(v60 + 24);
  *(_DWORD *)(v60 + 24) = v61 + 1;
  *(_QWORD *)v10 = *(_QWORD *)v10 & 0xFFFFFFFFFDFFFFFFLL | ((*(_QWORD *)(*(_QWORD *)(v60 + 32) + 8 * v61) & 1) << 25);
  v62 = a1[1];
  v63 = *(unsigned int *)(v62 + 24);
  *(_DWORD *)(v62 + 24) = v63 + 1;
  *(_QWORD *)v10 = *(_QWORD *)v10 & 0xFFFFFFFFFBFFFFFFLL | ((*(_QWORD *)(*(_QWORD *)(v62 + 32) + 8 * v63) & 1) << 26);
  v64 = a1[1];
  v65 = *(unsigned int *)(v64 + 24);
  *(_DWORD *)(v64 + 24) = v65 + 1;
  *(_QWORD *)v10 = *(_QWORD *)v10 & 0xFFFFFFFFF7FFFFFFLL | ((*(_QWORD *)(*(_QWORD *)(v64 + 32) + 8 * v65) & 1) << 27);
  v66 = a1[1];
  v67 = *(unsigned int *)(v66 + 24);
  *(_DWORD *)(v66 + 24) = v67 + 1;
  *(_QWORD *)v10 = *(_QWORD *)v10 & 0xFFFFFFFFEFFFFFFFLL | ((*(_QWORD *)(*(_QWORD *)(v66 + 32) + 8 * v67) & 1) << 28);
  v68 = a1[1];
  v69 = *(unsigned int *)(v68 + 24);
  v70 = v69 + 1;
  v71 = *(_QWORD *)(*(_QWORD *)(v68 + 32) + 8 * v69);
  *(_DWORD *)(v68 + 24) = v70;
  *(_QWORD *)v10 = *(_QWORD *)v10 & 0xFFFFFFFFDFFFFFFFLL | ((unint64_t)(v71 & 1) << 29);
  v72 = a1[1];
  v73 = *(unsigned int *)(v72 + 24);
  *(_DWORD *)(v72 + 24) = v73 + 1;
  *(_QWORD *)v10 = *(_QWORD *)v10 & 0xFFFFFFFFBFFFFFFFLL | ((*(_QWORD *)(*(_QWORD *)(v72 + 32) + 8 * v73) & 1) << 30);
  v74 = a1[1];
  v75 = *(unsigned int *)(v74 + 24);
  *(_DWORD *)(v74 + 24) = v75 + 1;
  *(_QWORD *)v10 = *(_QWORD *)v10 & 0xFFFFFFFF7FFFFFFFLL | (*(_QWORD *)(*(_QWORD *)(v74 + 32) + 8 * v75) << 31);
  v76 = a1[1];
  v77 = *(unsigned int *)(v76 + 24);
  *(_DWORD *)(v76 + 24) = v77 + 1;
  *(_QWORD *)v10 = *(_QWORD *)v10 & 0xFFFFFFFEFFFFFFFFLL | ((*(_QWORD *)(*(_QWORD *)(v76 + 32) + 8 * v77) & 1) << 32);
  v78 = a1[1];
  v79 = *(unsigned int *)(v78 + 24);
  *(_DWORD *)(v78 + 24) = v79 + 1;
  *(_QWORD *)v10 = *(_QWORD *)v10 & 0xFFFFFFFDFFFFFFFFLL | ((*(_QWORD *)(*(_QWORD *)(v78 + 32) + 8 * v79) & 1) << 33);
  v80 = a1[1];
  v81 = *(unsigned int *)(v80 + 24);
  v82 = v81 + 1;
  v83 = *(_QWORD *)(*(_QWORD *)(v80 + 32) + 8 * v81);
  *(_DWORD *)(v80 + 24) = v82;
  *(_QWORD *)v10 = *(_QWORD *)v10 & 0xFFFFFFFBFFFFFFFFLL | ((unint64_t)(v83 & 1) << 34);
  v84 = a1[1];
  v85 = *(unsigned int *)(v84 + 24);
  *(_DWORD *)(v84 + 24) = v85 + 1;
  *(_QWORD *)v10 = *(_QWORD *)v10 & 0xFFFFFFF7FFFFFFFFLL | ((*(_QWORD *)(*(_QWORD *)(v84 + 32) + 8 * v85) & 1) << 35);
  v86 = a1[1];
  v87 = *(unsigned int *)(v86 + 24);
  *(_DWORD *)(v86 + 24) = v87 + 1;
  *(_QWORD *)v10 = *(_QWORD *)v10 & 0xFFFFFFEFFFFFFFFFLL | ((*(_QWORD *)(*(_QWORD *)(v86 + 32) + 8 * v87) & 1) << 36);
  v88 = a1[1];
  v89 = *(unsigned int *)(v88 + 24);
  v90 = v89 + 1;
  v91 = *(_QWORD *)(*(_QWORD *)(v88 + 32) + 8 * v89);
  *(_DWORD *)(v88 + 24) = v90;
  *(_QWORD *)v10 = *(_QWORD *)v10 & 0xFFFFFFDFFFFFFFFFLL | ((unint64_t)(v91 & 1) << 37);
  v92 = a1[1];
  v93 = *(unsigned int *)(v92 + 24);
  *(_DWORD *)(v92 + 24) = v93 + 1;
  *(_QWORD *)v10 = *(_QWORD *)v10 & 0xFFFFFFBFFFFFFFFFLL | ((*(_QWORD *)(*(_QWORD *)(v92 + 32) + 8 * v93) & 1) << 38);
  v94 = a1[1];
  v95 = *(unsigned int *)(v94 + 24);
  *(_DWORD *)(v94 + 24) = v95 + 1;
  *(_QWORD *)v10 = *(_QWORD *)v10 & 0xFFFFE07FFFFFFFFFLL | ((*(_QWORD *)(*(_QWORD *)(v94 + 32) + 8 * v95) & 0x3FLL) << 39);
  v96 = a1[1];
  v97 = *(unsigned int *)(v96 + 24);
  v98 = v97 + 1;
  v99 = *(_QWORD *)(*(_QWORD *)(v96 + 32) + 8 * v97);
  *(_DWORD *)(v96 + 24) = v98;
  *(_QWORD *)v10 = *(_QWORD *)v10 & 0xFFF81FFFFFFFFFFFLL | ((unint64_t)(v99 & 0x3F) << 45);
  v100 = a1[1];
  v101 = *(unsigned int *)(v100 + 24);
  *(_DWORD *)(v100 + 24) = v101 + 1;
  *(_QWORD *)v10 = *(_QWORD *)v10 & 0xFE07FFFFFFFFFFFFLL | ((*(_QWORD *)(*(_QWORD *)(v100 + 32) + 8 * v101) & 0x3FLL) << 51);
  v102 = a1[1];
  v103 = *(unsigned int *)(v102 + 24);
  *(_DWORD *)(v102 + 24) = v103 + 1;
  *(_QWORD *)v10 = *(_QWORD *)v10 & 0x81FFFFFFFFFFFFFFLL | ((*(_QWORD *)(*(_QWORD *)(v102 + 32) + 8 * v103) & 0x3FLL) << 57);
  v104 = a1[1];
  v105 = *(unsigned int *)(v104 + 24);
  v106 = v105 + 1;
  v107 = *(_QWORD *)(*(_QWORD *)(v104 + 32) + 8 * v105);
  *(_DWORD *)(v104 + 24) = v106;
  *(_QWORD *)v10 = *(_QWORD *)v10 & 0x7FFFFFFFFFFFFFFFLL | ((unint64_t)v107 << 63);
  v108 = a1[1];
  v109 = *(unsigned int *)(v108 + 24);
  *(_DWORD *)(v108 + 24) = v109 + 1;
  LOWORD(v106) = *(_WORD *)(v10 + 8) & 0xFFFE | *(_QWORD *)(*(_QWORD *)(v108 + 32) + 8 * v109) & 1;
  *(_BYTE *)(v10 + 10) = *(_BYTE *)(v10 + 10);
  *(_WORD *)(v10 + 8) = v106;
  v110 = a1[1];
  v111 = *(unsigned int *)(v110 + 24);
  *(_DWORD *)(v110 + 24) = v111 + 1;
  v112 = *(_QWORD *)(*(_QWORD *)(v110 + 32) + 8 * v111);
  LODWORD(v111) = (*(_WORD *)(v10 + 8) & 0xFFFD | (*(unsigned __int8 *)(v10 + 10) << 16)) >> 16;
  *(_WORD *)(v10 + 8) = *(_WORD *)(v10 + 8) & 0xFFFD | (2 * (v112 & 1));
  *(_BYTE *)(v10 + 10) = v111;
  v113 = a1[1];
  v114 = *(unsigned int *)(v113 + 24);
  *(_DWORD *)(v113 + 24) = v114 + 1;
  v115 = *(_QWORD *)(*(_QWORD *)(v113 + 32) + 8 * v114);
  LODWORD(v114) = (*(_WORD *)(v10 + 8) & 0xFFFB | (*(unsigned __int8 *)(v10 + 10) << 16)) >> 16;
  *(_WORD *)(v10 + 8) = *(_WORD *)(v10 + 8) & 0xFFFB | (4 * (v115 & 1));
  *(_BYTE *)(v10 + 10) = v114;
  v116 = a1[1];
  v117 = *(unsigned int *)(v116 + 24);
  *(_DWORD *)(v116 + 24) = v117 + 1;
  v118 = *(_QWORD *)(*(_QWORD *)(v116 + 32) + 8 * v117);
  LODWORD(v117) = (*(_WORD *)(v10 + 8) & 0xFFF7 | (*(unsigned __int8 *)(v10 + 10) << 16)) >> 16;
  *(_WORD *)(v10 + 8) = *(_WORD *)(v10 + 8) & 0xFFF7 | (8 * (v118 & 1));
  *(_BYTE *)(v10 + 10) = v117;
  v119 = a1[1];
  v120 = *(unsigned int *)(v119 + 24);
  *(_DWORD *)(v119 + 24) = v120 + 1;
  v121 = *(_QWORD *)(*(_QWORD *)(v119 + 32) + 8 * v120);
  LODWORD(v120) = (*(_WORD *)(v10 + 8) & 0xFFEF | (*(unsigned __int8 *)(v10 + 10) << 16)) >> 16;
  *(_WORD *)(v10 + 8) = *(_WORD *)(v10 + 8) & 0xFFEF | (16 * (v121 & 1));
  *(_BYTE *)(v10 + 10) = v120;
  v122 = a1[1];
  v123 = *(unsigned int *)(v122 + 24);
  *(_DWORD *)(v122 + 24) = v123 + 1;
  v124 = *(_QWORD *)(*(_QWORD *)(v122 + 32) + 8 * v123);
  LODWORD(v123) = (*(_WORD *)(v10 + 8) & 0xFFDF | (*(unsigned __int8 *)(v10 + 10) << 16)) >> 16;
  *(_WORD *)(v10 + 8) = *(_WORD *)(v10 + 8) & 0xFFDF | (32 * (v124 & 1));
  *(_BYTE *)(v10 + 10) = v123;
  v125 = a1[1];
  v126 = *(unsigned int *)(v125 + 24);
  *(_DWORD *)(v125 + 24) = v126 + 1;
  v127 = *(_QWORD *)(*(_QWORD *)(v125 + 32) + 8 * v126);
  LODWORD(v126) = (*(_WORD *)(v10 + 8) & 0xFFBF | (*(unsigned __int8 *)(v10 + 10) << 16)) >> 16;
  *(_WORD *)(v10 + 8) = *(_WORD *)(v10 + 8) & 0xFFBF | ((v127 & 1) << 6);
  *(_BYTE *)(v10 + 10) = v126;
  v128 = a1[1];
  v129 = *(unsigned int *)(v128 + 24);
  *(_DWORD *)(v128 + 24) = v129 + 1;
  v130 = *(_QWORD *)(*(_QWORD *)(v128 + 32) + 8 * v129);
  LODWORD(v129) = (*(_WORD *)(v10 + 8) & 0xFF7F | (*(unsigned __int8 *)(v10 + 10) << 16)) >> 16;
  *(_WORD *)(v10 + 8) = *(_WORD *)(v10 + 8) & 0xFF7F | ((v130 & 1) << 7);
  *(_BYTE *)(v10 + 10) = v129;
  v131 = a1[1];
  v132 = *(unsigned int *)(v131 + 24);
  *(_DWORD *)(v131 + 24) = v132 + 1;
  v133 = *(_QWORD *)(*(_QWORD *)(v131 + 32) + 8 * v132);
  LODWORD(v132) = (*(_WORD *)(v10 + 8) & 0xC0FF | (*(unsigned __int8 *)(v10 + 10) << 16)) >> 16;
  *(_WORD *)(v10 + 8) = *(_WORD *)(v10 + 8) & 0xC0FF | ((v133 & 0x3F) << 8);
  *(_BYTE *)(v10 + 10) = v132;
  v134 = a1[1];
  v135 = *(unsigned int *)(v134 + 24);
  *(_DWORD *)(v134 + 24) = v135 + 1;
  v136 = *(_QWORD *)(*(_QWORD *)(v134 + 32) + 8 * v135);
  LODWORD(v135) = (*(_WORD *)(v10 + 8) & 0xBFFF | (*(unsigned __int8 *)(v10 + 10) << 16)) >> 16;
  *(_WORD *)(v10 + 8) = *(_WORD *)(v10 + 8) & 0xBFFF | ((v136 & 1) << 14);
  *(_BYTE *)(v10 + 10) = v135;
  v137 = a1[1];
  v138 = *(unsigned int *)(v137 + 24);
  *(_DWORD *)(v137 + 24) = v138 + 1;
  v139 = *(_QWORD *)(*(_QWORD *)(v137 + 32) + 8 * v138);
  LODWORD(v138) = (*(_WORD *)(v10 + 8) & 0x7FFF | (*(unsigned __int8 *)(v10 + 10) << 16)) >> 16;
  *(_WORD *)(v10 + 8) = *(_WORD *)(v10 + 8) & 0x7FFF | ((_WORD)v139 << 15);
  *(_BYTE *)(v10 + 10) = v138;
  v140 = a1[1];
  v141 = *(unsigned int *)(v140 + 24);
  *(_DWORD *)(v140 + 24) = v141 + 1;
  v142 = *(_QWORD *)(*(_QWORD *)(v140 + 32) + 8 * v141);
  LODWORD(v141) = (*(unsigned __int16 *)(v10 + 8) | (*(unsigned __int8 *)(v10 + 10) << 16)) & 0xFFFEFFFF;
  *(_WORD *)(v10 + 8) = *(_WORD *)(v10 + 8);
  *(_BYTE *)(v10 + 10) = (unint64_t)(v141 | ((v142 & 1) << 16)) >> 16;
  v143 = a1[1];
  v144 = *(unsigned int *)(v143 + 24);
  *(_DWORD *)(v143 + 24) = v144 + 1;
  v145 = *(_QWORD *)(*(_QWORD *)(v143 + 32) + 8 * v144);
  LODWORD(v144) = (*(unsigned __int16 *)(v10 + 8) | (*(unsigned __int8 *)(v10 + 10) << 16)) & 0xFFFDFFFF;
  *(_WORD *)(v10 + 8) = *(_WORD *)(v10 + 8);
  *(_BYTE *)(v10 + 10) = (unint64_t)(v144 | ((v145 & 1) << 17)) >> 16;
  v146 = a1[1];
  v147 = *(unsigned int *)(v146 + 24);
  v148 = *(_QWORD *)(*(_QWORD *)(v146 + 32) + 8 * v147);
  *(_DWORD *)(v146 + 24) = v147 + 1;
  LODWORD(v146) = (*(unsigned __int16 *)(v10 + 8) | (*(unsigned __int8 *)(v10 + 10) << 16)) & 0xFFFBFFFF;
  *(_WORD *)(v10 + 8) = *(_WORD *)(v10 + 8);
  *(_BYTE *)(v10 + 10) = (unint64_t)(v146 | ((v148 & 1) << 18)) >> 16;
  v149 = a1[1];
  v150 = *(unsigned int *)(v149 + 24);
  *(_DWORD *)(v149 + 24) = v150 + 1;
  v151 = *(_QWORD *)(*(_QWORD *)(v149 + 32) + 8 * v150);
  LODWORD(v150) = (*(unsigned __int16 *)(v10 + 8) | (*(unsigned __int8 *)(v10 + 10) << 16)) & 0xFFF7FFFF;
  *(_WORD *)(v10 + 8) = *(_WORD *)(v10 + 8);
  *(_BYTE *)(v10 + 10) = (unint64_t)(v150 | ((v151 & 1) << 19)) >> 16;
  v152 = a1[1];
  v153 = *(unsigned int *)(v152 + 24);
  *(_DWORD *)(v152 + 24) = v153 + 1;
  *(_DWORD *)(v10 + 12) = *(_QWORD *)(*(_QWORD *)(v152 + 32) + 8 * v153);
  LODWORD(v153) = *(unsigned __int16 *)(v10 + 8);
  LODWORD(v152) = (v153 | (*(unsigned __int8 *)(v10 + 10) << 16) | 0x800000) >> 16;
  *(_WORD *)(v10 + 8) = v153;
  *(_BYTE *)(v10 + 10) = v152;
  v154 = a1[1];
  v155 = *(unsigned int *)(v154 + 24);
  v156 = v155 + 1;
  *(_DWORD *)(v154 + 24) = v155 + 1;
  v157 = *(_QWORD *)(v154 + 32);
  if (*(_QWORD *)(v157 + 8 * v155))
  {
    v179 = *a1;
    if (*(_DWORD *)(a1[2] + 4) == 4)
      LOBYTE(v180) = 1;
    else
      v180 = (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v179 + 128) + 2000) + 20) >> 49) & 1;
    v229 = a2;
    *((_BYTE *)sub_22F2C3748((uint64_t *)(v179 + 11016), &v229) + 8) = v180;
    v154 = a1[1];
    v156 = *(_DWORD *)(v154 + 24);
    v157 = *(_QWORD *)(v154 + 32);
  }
  v158 = v156 + 1;
  v159 = *(_QWORD *)(v157 + 8 * v156);
  *(_DWORD *)(v10 + 16) = v159;
  if ((_DWORD)v159)
  {
    v160 = v156 + 2;
    v161 = *(_QWORD *)(v157 + 8 * v158);
    if (v161 && (v162 = a1[3] - v161) != 0)
    {
      v163 = (uint64_t *)(v10 + 24);
      v177 = v162 + *(_QWORD *)(*(_QWORD *)(v154 + 16) + 360);
      if (v177)
      {
        v164 = (2 * v177) | 1;
        goto LABEL_12;
      }
    }
    else
    {
      v163 = (uint64_t *)(v10 + 24);
    }
    v164 = 0;
LABEL_12:
    *v163 = v164;
    v158 = v160;
  }
  *(_DWORD *)(v154 + 24) = v158 + 1;
  v165 = *(_QWORD *)(v157 + 8 * v158);
  *(_DWORD *)(v10 + 20) = v165;
  if (!(_DWORD)v165)
    goto LABEL_19;
  *(_DWORD *)(v154 + 24) = v158 + 2;
  v166 = *(_QWORD *)(v157 + 8 * (v158 + 1));
  if (v166 && (v167 = a1[3] - v166) != 0)
  {
    v168 = (uint64_t *)(v10 + 32);
    v178 = v167 + *(_QWORD *)(*(_QWORD *)(v154 + 16) + 360);
    if (v178)
    {
      v169 = (2 * v178) | 1;
      goto LABEL_18;
    }
  }
  else
  {
    v168 = (uint64_t *)(v10 + 32);
  }
  v169 = 0;
LABEL_18:
  *v168 = v169;
LABEL_19:
  sub_22E7867C0(v154, (uint64_t *)(v10 + 40));
  v170 = a1[1];
  v171 = *(unsigned int *)(v170 + 24);
  v172 = v171 + 1;
  v173 = *(_QWORD *)(*(_QWORD *)(v170 + 32) + 8 * v171);
  *(_DWORD *)(v170 + 24) = v172;
  v174 = (*(unsigned __int16 *)(v10 + 8) | (*(unsigned __int8 *)(v10 + 10) << 16)) & 0xFFBFFFFF;
  *(_WORD *)(v10 + 8) = *(_WORD *)(v10 + 8);
  *(_BYTE *)(v10 + 10) = (unint64_t)(v174 | ((v173 & 1) << 22)) >> 16;
  if ((v173 & 1) != 0)
    sub_22E7867C0(a1[1], (uint64_t *)(v10 + 64));
  v175 = sub_22E779F8C(*(_QWORD *)(a1[1] + 8), *(_QWORD *)(a1[1] + 16), a1[1] + 32, (_DWORD *)(a1[1] + 24));
  v176 = (2 * v175) | 1;
  if (!v175)
    v176 = 0;
  *(_QWORD *)(v10 + 96) = v176;
  if (((*(unsigned __int16 *)(v10 + 8) | (*(unsigned __int8 *)(v10 + 10) << 16)) & 0x100000) != 0)
  {
    v181 = a1[1];
    v182 = *(unsigned int *)(v181 + 24);
    *(_DWORD *)(v181 + 24) = v182 + 1;
    *(_DWORD *)(v10 + 104) = *(_DWORD *)(v10 + 104) & 0xFFFFFFFC | *(_QWORD *)(*(_QWORD *)(v181 + 32) + 8 * v182) & 3;
    v183 = a1[1];
    v184 = *(unsigned int *)(v183 + 24);
    *(_DWORD *)(v183 + 24) = v184 + 1;
    *(_DWORD *)(v10 + 104) = *(_DWORD *)(v10 + 104) & 0xFFFFFFFB | (4
                                                                  * (*(_QWORD *)(*(_QWORD *)(v183 + 32) + 8 * v184) & 1));
    v185 = a1[1];
    v186 = *(unsigned int *)(v185 + 24);
    *(_DWORD *)(v185 + 24) = v186 + 1;
    *(_DWORD *)(v10 + 104) = *(_DWORD *)(v10 + 104) & 0xFFFFFFE7 | (8
                                                                  * (*(_QWORD *)(*(_QWORD *)(v185 + 32) + 8 * v186) & 3));
    v187 = a1[1];
    v188 = *(unsigned int *)(v187 + 24);
    *(_DWORD *)(v187 + 24) = v188 + 1;
    *(_DWORD *)(v10 + 104) = *(_DWORD *)(v10 + 104) & 0xFFF0001F | (32
                                                                  * (*(_QWORD *)(*(_QWORD *)(v187 + 32) + 8 * v188) & 0x7FFF));
    v189 = a1[1];
    v190 = *(unsigned int *)(v189 + 24);
    *(_DWORD *)(v189 + 24) = v190 + 1;
    *(_WORD *)(v10 + 108) = *(_WORD *)(v10 + 108) & 0xE000 | *(_QWORD *)(*(_QWORD *)(v189 + 32) + 8 * v190) & 0x1FFF;
    v191 = a1[1];
    v192 = *(unsigned int *)(v191 + 24);
    *(_DWORD *)(v191 + 24) = v192 + 1;
    *(_WORD *)(v10 + 108) = ((*(_QWORD *)(*(_QWORD *)(v191 + 32) + 8 * v192) & 1) << 13) | *(_WORD *)(v10 + 108) & 0xDFFF;
    v193 = a1[1];
    v194 = *(unsigned int *)(v193 + 24);
    *(_DWORD *)(v193 + 24) = v194 + 1;
    *(_DWORD *)(v10 + 112) = *(_DWORD *)(v10 + 112) & 0x80000000 | *(_QWORD *)(*(_QWORD *)(v193 + 32) + 8 * v194) & 0x7FFFFFFF;
    v195 = a1[1];
    v196 = *(unsigned int *)(v195 + 24);
    *(_DWORD *)(v195 + 24) = v196 + 1;
    sub_22F3B1D48(a2, *(_QWORD *)(*(_QWORD *)(v195 + 32) + 8 * v196));
    v197 = sub_22E779F8C(*(_QWORD *)(a1[1] + 8), *(_QWORD *)(a1[1] + 16), a1[1] + 32, (_DWORD *)(a1[1] + 24));
    v198 = (2 * v197) | 1;
    if (!v197)
      v198 = 0;
    *(_QWORD *)(v10 + 120) = v198;
    v199 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 128) + 2032, ((unint64_t)*(unsigned int *)(v10 + 104) >> 1) & 0x7FFF0, 3);
    *(_QWORD *)(v10 + 128) = v199;
    *(_QWORD *)(v10 + 136) = sub_22E782300(a1[1]);
    v200 = (*(_DWORD *)(v10 + 104) >> 5) & 0x7FFF;
    if (v200)
    {
      v228 = a2;
      while (1)
      {
        v201 = a1[1];
        v202 = *(_QWORD *)(v201 + 8);
        v203 = *(_QWORD *)(v201 + 16);
        v204 = *(unsigned int *)(v201 + 24);
        *(_DWORD *)(v201 + 24) = v204 + 1;
        HIDWORD(v205) = *(_QWORD *)(*(_QWORD *)(v201 + 32) + 8 * v204);
        LODWORD(v205) = HIDWORD(v205);
        v206 = sub_22E77BAB4(v202, v203, v205 >> 1);
        v207 = a1[1];
        v208 = *(_QWORD *)(v207 + 32);
        v209 = *(_DWORD *)(v207 + 24);
        v210 = *(_QWORD *)(v208 + 8 * v209);
        *(_DWORD *)(v207 + 24) = v209 + 2;
        v211 = *(_QWORD *)(v208 + 8 * (v209 + 1));
        if (v211 <= 4)
          break;
LABEL_54:
        if (!--v200)
          goto LABEL_24;
      }
      v212 = v206;
      if (((1 << v211) & 0x13) == 0)
      {
        v214 = v210 != 0;
        v215 = v12;
        v216 = a3;
        v217 = *(_QWORD *)(v207 + 8);
        v218 = sub_22E779F8C(v217, *(_QWORD *)(v207 + 16), v207 + 32, (_DWORD *)(v207 + 24));
        v219 = sub_22E77F870(v217, v218);
        v220 = a1[1];
        v221 = *(_QWORD *)(v220 + 8);
        v222 = *(_QWORD *)(v220 + 16);
        v223 = *(unsigned int *)(v220 + 24);
        *(_DWORD *)(v220 + 24) = v223 + 1;
        HIDWORD(v224) = *(_QWORD *)(*(_QWORD *)(v220 + 32) + 8 * v223);
        LODWORD(v224) = HIDWORD(v224);
        v225 = sub_22E77BAB4(v221, v222, v224 >> 1);
        LODWORD(v226) = v214 | 2;
        if ((_DWORD)v211 == 2)
          v226 = v226;
        else
          v226 = v214;
        v227 = v219 & 0xFFFFFFFFFFFFFFF8;
        a3 = v216;
        v12 = v215;
        a2 = v228;
        v213 = v227 | v226;
        goto LABEL_53;
      }
      LODWORD(v213) = v210 != 0;
      if ((_DWORD)v211)
      {
        if ((_DWORD)v211 == 2)
        {
          LODWORD(v213) = v213 | 2;
          goto LABEL_52;
        }
        if ((_DWORD)v211 != 1)
        {
LABEL_52:
          v225 = 0;
          v213 = v213;
LABEL_53:
          *(_QWORD *)v199 = v213;
          *(_DWORD *)(v199 + 8) = v212;
          *(_DWORD *)(v199 + 12) = v225;
          v199 += 16;
          goto LABEL_54;
        }
        LODWORD(v213) = v213 | 2;
      }
      LODWORD(v213) = v213 | 4;
      goto LABEL_52;
    }
  }
LABEL_24:
  if (*(_QWORD *)(v12 + 128) == v10)
  {
    *((_DWORD *)a2 + 18) |= 0x10000u;
    if ((_QWORD *)v12 != a2 || (_DWORD)a3)
      sub_22E3BA850(*a1 + 3704, a2);
  }
  else
  {
    sub_22E79D154((_BOOL8 *)a1, v12, (int *)v10);
  }
}

uint64_t sub_22E79EE80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34[2];

  v33 = a2;
  v4 = sub_22E799210((_QWORD *)a1, a2);
  v34[0] = v4;
  v34[1] = v5;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 128);
  v8 = v6 + 32;
  v9 = *(_QWORD *)(v6 + 32);
  v11 = *(_DWORD *)(v6 + 24);
  v10 = (_DWORD *)(v6 + 24);
  *(_DWORD *)(v6 + 24) = v11 + 1;
  v12 = *(_QWORD *)(v9 + 8 * v11);
  switch((_DWORD)v12)
  {
    case 0:
      if ((*(_DWORD *)(a2 + 28) & 0x7E) == 0x24)
        break;
      v20 = (_BYTE *)(a2 + 96);
      goto LABEL_11;
    case 1:
      v17 = *(_QWORD *)(v6 + 8);
      v18 = sub_22E779F8C(v17, *(_QWORD *)(v6 + 16), v8, v10);
      v19 = sub_22E77F870(v17, v18);
      *(_QWORD *)(a2 + 136) = v19 & 0xFFFFFFFFFFFFFFFBLL;
      if (!*(_QWORD *)(v19 + 48))
        *(_DWORD *)(a1 + 40) = 0;
      break;
    case 2:
      v21 = *(_QWORD *)(v6 + 8);
      v22 = sub_22E779F8C(v21, *(_QWORD *)(v6 + 16), v8, v10);
      v23 = sub_22E77F870(v21, v22);
      v24 = *(_QWORD *)(a1 + 8);
      v25 = *(unsigned int *)(v24 + 24);
      v26 = *(_QWORD *)(v24 + 32);
      v27 = *(_QWORD *)(v26 + 8 * v25);
      v28 = *(_QWORD *)(v24 + 8);
      v29 = *(_QWORD *)(v24 + 16);
      *(_DWORD *)(v24 + 24) = v25 + 2;
      HIDWORD(v30) = *(_QWORD *)(v26 + 8 * (v25 + 1));
      LODWORD(v30) = HIDWORD(v30);
      v31 = sub_22E77BAB4(v28, v29, v30 >> 1);
      v32 = sub_22E3CD3D4(v7 + 2032, 16, 3);
      *(_QWORD *)v32 = (2 * v27 + 0x1FFFFFFFELL) & 0x1FFFFFFFELL | v23 & 0xFFFFFFFFFFFFFFF9;
      *(_DWORD *)(v32 + 8) = v31;
      *(_QWORD *)(a2 + 136) = v32 | 4;
      if (a2)
        v20 = (_BYTE *)(a2 + 96);
      else
        v20 = 0;
LABEL_11:
      sub_22E799150((_QWORD *)a1, v20, v34);
      break;
  }
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(unsigned int *)(v13 + 24);
  *(_DWORD *)(v13 + 24) = v14 + 1;
  if (*(_QWORD *)(*(_QWORD *)(v13 + 32) + 8 * v14))
  {
    sub_22E79DEF0((uint64_t *)a1, (_QWORD *)a2, 0);
    v15 = sub_22E779F8C(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16), *(_QWORD *)(a1 + 8) + 32, (_DWORD *)(*(_QWORD *)(a1 + 8) + 24));
    if (v15 && (*(_BYTE *)(a2 + 74) & 1) != 0)
      sub_22E7B6904((_DWORD *)(v7 + 1024), &v33)[1] = (2 * v15) | 1;
  }
  else
  {
    *(_QWORD *)(a2 + 128) = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2) + 128);
  }
  return v4;
}

unint64_t sub_22E79F080(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v1 = *(unsigned int *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v1 + 1;
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v1);
  if ((v2 & 1) != 0)
  {
    v9 = v2;
    v6 = *(_QWORD *)(a1 + 8);
    if (*(_DWORD *)(v6 + 10984) == 3)
    {
      v8 = *(unsigned int *)(v6 + 10848);
      v7 = *(_QWORD *)(*(_QWORD *)(v6 + 10840) + 8 * v8 - 8);
      *(_DWORD *)(v6 + 10848) = v8 - 1;
    }
    else
    {
      v7 = sub_22E7B94C8(v6, *(_QWORD *)(a1 + 16));
    }
    v3 = v7 & 0xFFFFFFFFFFFFFFFCLL;
    v2 = v9;
  }
  else
  {
    v3 = 0;
  }
  return v3 | (v2 >> 1);
}

uint64_t sub_22E79F108(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  sub_22E7996A0(a1, a2);
  v4 = a1[1];
  v5 = *(unsigned int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v5 + 1;
  v6 = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v5);
  result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2);
  if (result == a2)
  {
    while ((_DWORD)v6)
    {
      v13 = v6;
      v8 = a1[1];
      v9 = *(_QWORD *)(v8 + 8);
      v10 = sub_22E779F8C(v9, *(_QWORD *)(v8 + 16), v8 + 32, (_DWORD *)(v8 + 24));
      result = sub_22E77F870(v9, v10);
      if (result)
      {
        v11 = *(_QWORD *)(*a1 + 128);
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
        result = sub_22F368748(v11, a2, v12);
      }
      LODWORD(v6) = v13 - 1;
    }
  }
  else
  {
    *(_DWORD *)(a1[1] + 24) += v6;
  }
  return result;
}

_DWORD *sub_22E79F1E0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *result;

  sub_22E798084(a1, (uint64_t)a2);
  sub_22E7862BC(a1[1]);
  a2[5] = v4;
  v5 = a1[1];
  v6 = *(_DWORD *)(v5 + 24);
  v5 += 24;
  v7 = *(_QWORD *)(v5 + 8);
  *(_DWORD *)v5 = v6 + 1;
  *((_DWORD *)a1 + 11) = *(_QWORD *)(v7 + 8 * v6);
  v8 = sub_22E779F8C(*(_QWORD *)(v5 - 16), *(_QWORD *)(v5 - 8), v5 + 8, (_DWORD *)v5);
  v9 = sub_22E77F870(*a1, v8);
  result = sub_22E78649C(a1[1]);
  a2[6] = v9;
  a2[7] = result;
  return result;
}

uint64_t sub_22E79F25C(uint64_t *a1, _QWORD *a2)
{
  _BYTE *v4;
  unint64_t *v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  unint64_t *v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t **v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v48[2];
  _BYTE v49[16];
  uint64_t v50;

  v4 = a2 + 8;
  if (a2)
    v5 = a2 + 8;
  else
    v5 = 0;
  v6 = sub_22E779F8C(*(_QWORD *)(a1[1] + 8), *(_QWORD *)(a1[1] + 16), a1[1] + 32, (_DWORD *)(a1[1] + 24));
  v7 = *((_DWORD *)a1 + 8) == v6;
  if ((_DWORD)v6)
  {
    v8 = v6;
    v9 = a1[1];
    v10 = *(_QWORD *)(v9 + 32);
    v11 = *(_DWORD *)(v9 + 24);
    v12 = v11 + 1;
    *(_DWORD *)(v9 + 24) = v11 + 1;
    v13 = *(_QWORD *)(v10 + 8 * v11);
    if ((_DWORD)v13)
    {
      v14 = v13 - 1;
      v7 = v13 == 1;
      if ((_DWORD)v13 == 1)
      {
        v19 = 0;
      }
      else
      {
        do
        {
          v15 = a1[1];
          v16 = *(_QWORD *)(v15 + 8);
          v17 = sub_22E779F8C(v16, *(_QWORD *)(v15 + 16), v15 + 32, (_DWORD *)(v15 + 24));
          v18 = sub_22E77F870(v16, v17);
          --v14;
        }
        while (v14);
        v19 = v18;
        v9 = a1[1];
        v12 = *(_DWORD *)(v9 + 24);
        v10 = *(_QWORD *)(v9 + 32);
      }
      *(_DWORD *)(v9 + 24) = v12 + 1;
      v24 = *(_QWORD *)(v10 + 8 * v12);
      if (v24)
        v20 = (unint64_t *)(a1[3] - v24);
      else
        v20 = 0;
      v21 = 1;
    }
    else
    {
      v22 = *(_QWORD *)(v9 + 8);
      v23 = sub_22E779F8C(v22, *(_QWORD *)(v9 + 16), v9 + 32, (_DWORD *)(v9 + 24));
      sub_22E77F870(v22, v23);
      v20 = 0;
      v19 = 0;
      v21 = 0;
    }
  }
  else
  {
    v20 = 0;
    v19 = 0;
    v7 = 1;
    v21 = 1;
    v8 = *((unsigned int *)a1 + 8);
  }
  v25 = sub_22E77F870(*a1, v8);
  v26 = v25 + 64 == (_QWORD)v5;
  if (!v25)
    v26 = a2 == 0;
  if (!v26)
  {
    *v5 = v25 & 0xFFFFFFFFFFFFFFFCLL;
    v5[1] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 32))(v25);
  }
  if (v21)
  {
    if (a2)
      v27 = v5 - 8;
    else
      v27 = 0;
    v28 = *a1;
    v29 = *(_DWORD *)(*a1 + 8784);
    if (v29 >= *(_DWORD *)(*a1 + 8788))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v29 = *(_DWORD *)(v28 + 8784);
    }
    v30 = (unint64_t **)(*(_QWORD *)(v28 + 8776) + 16 * v29);
    *v30 = v27;
    v30[1] = v20;
    ++*(_DWORD *)(v28 + 8784);
  }
  v31 = 0x100000000;
  if (!v7)
    v31 = 0;
  v32 = v31 | v8;
  v48[0] = v19;
  v48[1] = v32;
  v33 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*a2 + 32))(a2);
  v34 = v33[10];
  if (!v34)
  {
    v35 = v33;
    v33[10] = (*(uint64_t (**)(_QWORD *, _QWORD))(*v33 + 104))(v33, *(_QWORD *)(*a1 + 128));
    sub_22E3BA850(*a1 + 3704, v35);
    v34 = v35[10];
  }
  a2[10] = v34;
  if (*((_DWORD *)a1 + 8) == (_DWORD)v8)
  {
    v36 = a1[1];
    v37 = *(_QWORD *)(v36 + 8);
    v38 = sub_22E779F8C(v37, *(_QWORD *)(v36 + 16), v36 + 32, (_DWORD *)(v36 + 24));
    v39 = sub_22E77F870(v37, v38);
    if (v39)
    {
      v40 = v39;
      v41 = (_QWORD *)sub_22EFE9368((uint64_t)a2);
      *v41 = *v41 & 7 | v40;
      v42 = a1[1];
      v43 = *(unsigned int *)(v42 + 24);
      *(_DWORD *)(v42 + 24) = v43 + 1;
      if (*(_QWORD *)(*(_QWORD *)(v42 + 32) + 8 * v43))
      {
        v44 = (_QWORD *)sub_22EFE9368((uint64_t)a2);
        *v44 |= 4uLL;
      }
    }
  }
  sub_22E79F1E0(a1, a2);
  v45 = a1[1];
  v46 = *(unsigned int *)(v45 + 24);
  *(_DWORD *)(v45 + 24) = v46 + 1;
  *((_DWORD *)a2 + 7) = *((_DWORD *)a2 + 7) & 0xC000FFFF | ((*(_QWORD *)(*(_QWORD *)(v45 + 32) + 8 * v46) & 0x3FFF) << 16);
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 128) + 2000) + 20) & 0x200000000000) != 0 && (*v4 & 3) != 0)
  {
    if (v19)
    {
      sub_22E7B6B74((_BOOL8 *)a1, (uint64_t)v4, v19, (uint64_t)v48);
    }
    else
    {
      sub_22E7B0FFC((uint64_t)v49, a1, (uint64_t)a2);
      if (v50 && (*(_DWORD *)(v50 + 28) & 0x7C) == 0x1C)
        sub_22E7B6B74((_BOOL8 *)a1, (uint64_t)v4, v50, (uint64_t)v48);
      sub_22E7B0E58((uint64_t)v49);
    }
  }
  a2[10] = *(_QWORD *)((*(uint64_t (**)(_QWORD *))(*a2 + 32))(a2) + 80);
  return v32;
}

uint64_t sub_22E79F600(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;

  v2 = *(_QWORD *)(result + 8);
  v3 = *(unsigned int *)(v2 + 24);
  *(_DWORD *)(v2 + 24) = v3 + 1;
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 32) + 8 * v3);
  if ((_DWORD)v4)
  {
    v6 = result;
    do
    {
      result = sub_22E779F8C(*(_QWORD *)(*(_QWORD *)(v6 + 8) + 8), *(_QWORD *)(*(_QWORD *)(v6 + 8) + 16), *(_QWORD *)(v6 + 8) + 32, (_DWORD *)(*(_QWORD *)(v6 + 8) + 24));
      v7 = *(unsigned int *)(a2 + 8);
      if (v7 >= *(unsigned int *)(a2 + 12))
      {
        v8 = result;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        result = v8;
        v7 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a2 + 4 * v7) = result;
      ++*(_DWORD *)(a2 + 8);
      LODWORD(v4) = v4 - 1;
    }
    while ((_DWORD)v4);
  }
  return result;
}

uint64_t sub_22E79F6B0(uint64_t result, unsigned int *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int i;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  unint64_t v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  int v21;
  int *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;

  if (a2[2])
  {
    if (!result || (v3 = result, (*(_DWORD *)(result + 28) & 0x7F) != 0x53))
    {
      v4 = *(_QWORD *)(result + 16);
      v5 = v4 & 0xFFFFFFFFFFFFFFF8;
      if ((v4 & 4) != 0)
        v5 = *(_QWORD *)v5;
      for (i = *(_WORD *)(v5 + 8) & 0x7F; i != 83; i = *(_WORD *)(v5 + 8) & 0x7F)
      {
        v7 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v7 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_17;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_16;
          if (i == 16)
            goto LABEL_10;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_23;
          if (i == 24)
          {
LABEL_10:
            v7 = -48;
          }
          else
          {
LABEL_16:
            if (i != 70)
            {
LABEL_17:
              v8 = i - 52;
              if ((i - 33) >= 5)
                v9 = -48;
              else
                v9 = -64;
              if (v8 >= 6)
                v7 = v9;
              else
                v7 = -72;
              goto LABEL_23;
            }
            v7 = -64;
          }
        }
LABEL_23:
        v10 = *(_QWORD *)(v5 + v7 + 16);
        v5 = v10 & 0xFFFFFFFFFFFFFFF8;
        if ((v10 & 4) != 0)
          v5 = *(_QWORD *)v5;
      }
      v3 = v5 - 40;
    }
    v11 = *(_QWORD *)(v3 + 88);
    v12 = sub_22EFE9368(result);
    v13 = *(int **)(v12 + 8);
    v14 = a2[2];
    if (v13)
    {
      sub_22E7B6D90(a2, *(_QWORD *)a2 + 4 * v14, v13 + 1, &v13[*v13 + 1]);
      v15 = a2[2];
      if (v15 >= 2)
      {
        qsort(*(void **)a2, v15, 4uLL, (int (__cdecl *)(const void *, const void *))sub_22E7B6FB0);
        LODWORD(v15) = a2[2];
      }
      v16 = *(char **)a2;
      v17 = *(_QWORD *)a2 + 4 * v15;
      if ((_DWORD)v15)
      {
        v18 = v16 - 4;
        v19 = 4 * v15 - 4;
        while (v19)
        {
          v20 = *((_DWORD *)v18 + 1);
          v21 = *((_DWORD *)v18 + 2);
          v18 += 4;
          v19 -= 4;
          if (v20 == v21)
            goto LABEL_40;
        }
      }
      else
      {
        v18 = *(char **)a2;
LABEL_40:
        if (v18 != (char *)v17)
        {
          v22 = (int *)(v18 + 8);
          if (v18 + 8 != (char *)v17)
          {
            v23 = *(_DWORD *)v18;
            do
            {
              v24 = v23;
              v23 = *v22;
              if (v24 != *v22)
              {
                *((_DWORD *)v18 + 1) = v23;
                v18 += 4;
              }
              ++v22;
            }
            while (v22 != (int *)v17);
          }
          v17 = (uint64_t)(v18 + 4);
        }
      }
      v14 = (unint64_t)(v17 - (_QWORD)v16) >> 2;
      a2[2] = v14;
    }
    result = sub_22E3CD3D4(v11 + 2032, 4 * v14 + 4, 3);
    v25 = result;
    *(_DWORD *)result = a2[2];
    v26 = a2[2];
    if ((_DWORD)v26)
      result = (uint64_t)memmove((void *)(result + 4), *(const void **)a2, 4 * v26);
    *(_QWORD *)(v12 + 8) = v25;
  }
  return result;
}

uint64_t sub_22E79F8F4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v48[2];
  void *v49;
  uint64_t v50;
  _QWORD v51[25];

  v51[24] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22E79EE80((uint64_t)a1, a2);
  v6 = v5;
  v48[0] = v4;
  v48[1] = v5;
  v7 = a1[1];
  v8 = *(_QWORD *)(*a1 + 128);
  v9 = *(_QWORD *)(v7 + 8);
  v10 = sub_22E779F8C(v9, *(_QWORD *)(v7 + 16), v7 + 32, (_DWORD *)(v7 + 24));
  v11 = sub_22E77F870(v9, v10);
  if (v11)
  {
    v12 = v11;
    if ((*(_DWORD *)(v11 + 28) & 0x7F) == 0x1C)
    {
      *(_QWORD *)(a2 + 152) = v11 & 0xFFFFFFFFFFFFFFFBLL;
    }
    else
    {
      v49 = v51;
      v50 = 0x800000000;
      sub_22E7866D0(a1[1], (uint64_t)&v49, 0);
      sub_22EFEB554(v8, (__n128 *)v49, v50);
      v14 = v13;
      v15 = sub_22E3CD3D4(v8 + 2032, 16, 3);
      *(_QWORD *)v15 = v12;
      *(_QWORD *)(v15 + 8) = v14;
      *(_QWORD *)(a2 + 152) = v15 | 4;
      if (v49 != v51)
        free(v49);
    }
  }
  v49 = v51;
  v50 = 0x800000000;
  sub_22E7866D0(a1[1], (uint64_t)&v49, 1);
  sub_22EFEB554(v8, (__n128 *)v49, v50);
  *(_QWORD *)(a2 + 168) = v16;
  v17 = a1[1];
  v18 = *(_QWORD *)(v17 + 8);
  v19 = *(_QWORD *)(v17 + 16);
  v20 = *(unsigned int *)(v17 + 24);
  *(_DWORD *)(v17 + 24) = v20 + 1;
  HIDWORD(v21) = *(_QWORD *)(*(_QWORD *)(v17 + 32) + 8 * v20);
  LODWORD(v21) = HIDWORD(v21);
  *(_DWORD *)(a2 + 176) = sub_22E77BAB4(v18, v19, v21 >> 1);
  v22 = a1[1];
  v23 = *(unsigned int *)(v22 + 24);
  *(_DWORD *)(v22 + 24) = v23 + 1;
  *(_BYTE *)(a2 + 180) = *(_BYTE *)(a2 + 180) & 0xF8 | *(_QWORD *)(*(_QWORD *)(v22 + 32) + 8 * v23) & 7;
  v24 = a1[1];
  v25 = *(_QWORD *)(v24 + 32);
  v26 = *(_DWORD *)(v24 + 24);
  *(_DWORD *)(v24 + 24) = v26 + 1;
  if (*(_QWORD *)(v25 + 8 * v26))
  {
    v27 = *(_QWORD *)(v24 + 8);
    v28 = sub_22E779F8C(v27, *(_QWORD *)(v24 + 16), v24 + 32, (_DWORD *)(v24 + 24));
    v29 = sub_22E77F870(v27, v28);
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2) == a2)
    {
      v30 = *(_DWORD *)(a2 + 28) & 0x7F;
      v31 = sub_22EFE9368(v29);
      v32 = v30 == 37 ? sub_22E79FC14(v31 + 112, a2) : sub_22E79FCA8(v31 + 16, a2);
      v33 = v32;
      if (v32 != a2)
      {
        sub_22E79FD3C(a1, a2 + 96, v32, (uint64_t)v48);
        v34 = *(int **)(a2 + 128);
        if (v34)
        {
          if (*(_QWORD *)(v33 + 128))
            sub_22E79D154((_BOOL8 *)a1, v33, v34);
          else
            *(_QWORD *)(v33 + 128) = v34;
        }
        *(_QWORD *)(a2 + 128) = *(_QWORD *)(v33 + 128);
      }
    }
  }
  v35 = sub_22E782300(a1[1]);
  if (v35)
  {
    v36 = v35;
    v37 = sub_22E3CD3D4(v8 + 2032, 16, 3);
    *(_QWORD *)v37 = v36;
    *(_QWORD *)(v37 + 8) = 0;
    v38 = a1[1];
    v39 = *(_QWORD *)(v38 + 8);
    v40 = *(_QWORD *)(v38 + 16);
    v41 = *(unsigned int *)(v38 + 24);
    *(_DWORD *)(v38 + 24) = v41 + 1;
    HIDWORD(v42) = *(_QWORD *)(*(_QWORD *)(v38 + 32) + 8 * v41);
    LODWORD(v42) = HIDWORD(v42);
    *(_DWORD *)(v37 + 8) = sub_22E77BAB4(v39, v40, v42 >> 1);
    v43 = a1[1];
    v44 = *(_QWORD *)(v43 + 8);
    v45 = *(_QWORD *)(v43 + 16);
    v46 = *(unsigned int *)(v43 + 24);
    *(_DWORD *)(v43 + 24) = v46 + 1;
    HIDWORD(v42) = *(_QWORD *)(*(_QWORD *)(v43 + 32) + 8 * v46);
    LODWORD(v42) = HIDWORD(v42);
    *(_DWORD *)(v37 + 12) = sub_22E77BAB4(v44, v45, v42 >> 1);
    *(_QWORD *)(a2 + 160) = v37;
  }
  if (v49 != v51)
    free(v49);
  return v6;
}

uint64_t sub_22E79FC14(uint64_t a1, uint64_t a2)
{
  uint64_t inserted;
  uint64_t v5;
  unsigned int v6;

  inserted = llvm::FoldingSetBase::GetOrInsertNode();
  if (inserted)
    v5 = inserted - 144;
  else
    v5 = 0;
  if (v5 == a2)
  {
    v6 = *(_DWORD *)(a1 + 24);
    if (v6 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v6 = *(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v6) = a2;
    ++*(_DWORD *)(a1 + 24);
  }
  return v5;
}

uint64_t sub_22E79FCA8(uint64_t a1, uint64_t a2)
{
  uint64_t inserted;
  uint64_t v5;
  unsigned int v6;

  inserted = llvm::FoldingSetBase::GetOrInsertNode();
  if (inserted)
    v5 = inserted - 144;
  else
    v5 = 0;
  if (v5 == a2)
  {
    v6 = *(_DWORD *)(a1 + 24);
    if (v6 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v6 = *(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v6) = a2;
    ++*(_DWORD *)(a1 + 24);
  }
  return v5;
}

uint64_t sub_22E79FD3C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;

  if (a2)
    v6 = a2 - 96;
  else
    v6 = 0;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  if (v7 != result)
  {
    *(_QWORD *)(v6 + 96) = v7 & 0xFFFFFFFFFFFFFFFCLL;
    *(_QWORD *)(v6 + 104) = v7;
    *(_DWORD *)(v7 + 28) |= *(_DWORD *)(v6 + 28) & 0x400;
    *(_DWORD *)(v6 + 28) &= ~0x400u;
    if (*(_BYTE *)(a4 + 12))
    {
      v9 = (uint64_t *)(*a1 + 10744);
      v13 = v7;
      result = (uint64_t)sub_22E7920E8(v9, &v13);
      v10 = result;
      v11 = *(_DWORD *)(a4 + 8);
      v12 = *(_DWORD *)(result + 16);
      if (v12 >= *(_DWORD *)(result + 20))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v12 = *(_DWORD *)(v10 + 16);
      }
      *(_DWORD *)(*(_QWORD *)(v10 + 8) + 4 * v12) = v11;
      ++*(_DWORD *)(v10 + 16);
    }
  }
  return result;
}

uint64_t sub_22E79FE30(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[2];
  void *v49;
  uint64_t v50;
  _QWORD v51[25];

  v51[24] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22E79C050(a1, a2);
  v6 = v5;
  v48[0] = v4;
  v48[1] = v5;
  v7 = a1[1];
  v8 = *(_QWORD *)(*a1 + 128);
  v9 = *(_QWORD *)(v7 + 8);
  v10 = sub_22E779F8C(v9, *(_QWORD *)(v7 + 16), v7 + 32, (_DWORD *)(v7 + 24));
  v11 = sub_22E77F870(v9, v10);
  if (v11)
  {
    v12 = v11;
    if ((*(_DWORD *)(v11 + 28) & 0x7F) == 0x1F)
    {
      *(_QWORD *)(a2 + 112) = v11 & 0xFFFFFFFFFFFFFFFBLL;
    }
    else
    {
      v49 = v51;
      v50 = 0x800000000;
      sub_22E7866D0(a1[1], (uint64_t)&v49, 0);
      sub_22EFEB554(v8, (__n128 *)v49, v50);
      v14 = v13;
      v15 = sub_22E3CD3D4(v8 + 2032, 16, 3);
      *(_QWORD *)v15 = v12;
      *(_QWORD *)(v15 + 8) = v14;
      *(_QWORD *)(a2 + 112) = v15 | 4;
      if (v49 != v51)
        free(v49);
    }
  }
  v16 = sub_22E782300(a1[1]);
  if (v16)
  {
    v17 = v16;
    v18 = sub_22E3CD3D4(v8 + 2032, 16, 3);
    *(_QWORD *)v18 = v17;
    *(_QWORD *)(v18 + 8) = 0;
    v19 = a1[1];
    v20 = *(_QWORD *)(v19 + 8);
    v21 = *(_QWORD *)(v19 + 16);
    v22 = *(unsigned int *)(v19 + 24);
    *(_DWORD *)(v19 + 24) = v22 + 1;
    HIDWORD(v23) = *(_QWORD *)(*(_QWORD *)(v19 + 32) + 8 * v22);
    LODWORD(v23) = HIDWORD(v23);
    *(_DWORD *)(v18 + 8) = sub_22E77BAB4(v20, v21, v23 >> 1);
    v24 = a1[1];
    v25 = *(_QWORD *)(v24 + 8);
    v26 = *(_QWORD *)(v24 + 16);
    v27 = *(unsigned int *)(v24 + 24);
    *(_DWORD *)(v24 + 24) = v27 + 1;
    HIDWORD(v23) = *(_QWORD *)(*(_QWORD *)(v24 + 32) + 8 * v27);
    LODWORD(v23) = HIDWORD(v23);
    *(_DWORD *)(v18 + 12) = sub_22E77BAB4(v25, v26, v23 >> 1);
    *(_QWORD *)(a2 + 120) = v18;
  }
  v49 = v51;
  v50 = 0x800000000;
  sub_22E7866D0(a1[1], (uint64_t)&v49, 1);
  sub_22EFEB554(v8, (__n128 *)v49, v50);
  *(_QWORD *)(a2 + 128) = v28;
  v29 = a1[1];
  v30 = *(_QWORD *)(v29 + 8);
  v31 = *(_QWORD *)(v29 + 16);
  v32 = *(unsigned int *)(v29 + 24);
  *(_DWORD *)(v29 + 24) = v32 + 1;
  HIDWORD(v33) = *(_QWORD *)(*(_QWORD *)(v29 + 32) + 8 * v32);
  LODWORD(v33) = HIDWORD(v33);
  *(_DWORD *)(a2 + 416) = sub_22E77BAB4(v30, v31, v33 >> 1);
  v34 = a1[1];
  v35 = *(unsigned int *)(v34 + 24);
  *(_DWORD *)(v34 + 24) = v35 + 1;
  *(_BYTE *)(a2 + 420) = *(_BYTE *)(a2 + 420) & 0xF8 | *(_QWORD *)(*(_QWORD *)(v34 + 32) + 8 * v35) & 7;
  v36 = a1[1];
  v37 = *(unsigned int *)(v36 + 24);
  *(_DWORD *)(v36 + 24) = v37 + 1;
  *(_BYTE *)(a2 + 420) = (8 * (*(_QWORD *)(*(_QWORD *)(v36 + 32) + 8 * v37) & 1)) | *(_BYTE *)(a2 + 420) & 0xF7;
  v38 = a1[1];
  v39 = *(_QWORD *)(v38 + 32);
  v40 = *(_DWORD *)(v38 + 24);
  *(_DWORD *)(v38 + 24) = v40 + 1;
  if (*(_QWORD *)(v39 + 8 * v40))
  {
    v41 = *(_QWORD *)(v38 + 8);
    v42 = sub_22E779F8C(v41, *(_QWORD *)(v38 + 16), v38 + 32, (_DWORD *)(v38 + 24));
    v43 = sub_22E77F870(v41, v42);
    if ((*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2) == a2)
    {
      v45 = *(_DWORD *)(a2 + 28) & 0x7F;
      v46 = sub_22EFE9368(v43);
      v47 = v45 == 66 ? sub_22F2C2950(v46 + 112, a2) : sub_22F2C29E8(v46 + 16, a2);
      if (v47 != a2)
        sub_22E7A0150(a1, a2 + 72, v47, (uint64_t)v48);
    }
  }
  if (v49 != v51)
    free(v49);
  return v6;
}

uint64_t sub_22E7A0150(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;

  if (a2)
    v6 = a2 - 72;
  else
    v6 = 0;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  if (v7 != result)
  {
    *(_QWORD *)(v6 + 72) = v7 & 0xFFFFFFFFFFFFFFFCLL;
    *(_QWORD *)(v6 + 80) = v7;
    *(_DWORD *)(v7 + 28) |= *(_DWORD *)(v6 + 28) & 0x400;
    *(_DWORD *)(v6 + 28) &= ~0x400u;
    if (*(_BYTE *)(a4 + 12))
    {
      v9 = (uint64_t *)(*a1 + 10744);
      v13 = v7;
      result = (uint64_t)sub_22E7920E8(v9, &v13);
      v10 = result;
      v11 = *(_DWORD *)(a4 + 8);
      v12 = *(_DWORD *)(result + 16);
      if (v12 >= *(_DWORD *)(result + 20))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v12 = *(_DWORD *)(v10 + 16);
      }
      *(_DWORD *)(*(_QWORD *)(v10 + 8) + 4 * v12) = v11;
      ++*(_DWORD *)(v10 + 16);
    }
  }
  return result;
}

uint64_t sub_22E7A0244(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;

  if (a2)
    v6 = a2 - 64;
  else
    v6 = 0;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  if (v7 != result)
  {
    *(_QWORD *)(v6 + 64) = v7 & 0xFFFFFFFFFFFFFFFCLL;
    *(_QWORD *)(v6 + 72) = v7;
    *(_DWORD *)(v7 + 28) |= *(_DWORD *)(v6 + 28) & 0x400;
    *(_DWORD *)(v6 + 28) &= ~0x400u;
    if (*(_BYTE *)(a4 + 12))
    {
      v9 = (uint64_t *)(*a1 + 10744);
      v13 = v7;
      result = (uint64_t)sub_22E7920E8(v9, &v13);
      v10 = result;
      v11 = *(_DWORD *)(a4 + 8);
      v12 = *(_DWORD *)(result + 16);
      if (v12 >= *(_DWORD *)(result + 20))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v12 = *(_DWORD *)(v10 + 16);
      }
      *(_DWORD *)(*(_QWORD *)(v10 + 8) + 4 * v12) = v11;
      ++*(_DWORD *)(v10 + 16);
    }
  }
  return result;
}

#error "22E7A0338: too big function (funcsize=0)"

uint64_t sub_22E7B09F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  v1 = *(_QWORD *)(a1 + 16);
  v3 = *(unsigned int *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v3 + 1;
  v4 = sub_22E768E34(v2, v1, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v3));
  return sub_22E785944(v2, v4);
}

uint64_t sub_22E7B0A34(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  _DWORD *v3;
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  unint64_t v7;
  unsigned int *v8;
  _DWORD *v9;
  unsigned int v10;
  _DWORD *v11;
  uint64_t v12;

  v3 = *(_DWORD **)(a1 + 2808);
  v4 = *(unsigned int *)(a1 + 2816);
  if (!(_DWORD)v4)
    goto LABEL_10;
  v5 = *(unsigned int *)(a1 + 2816);
  v6 = *(_DWORD **)(a1 + 2808);
  do
  {
    v7 = v5 >> 1;
    v8 = &v6[4 * (v5 >> 1)];
    v10 = *v8;
    v9 = v8 + 4;
    v5 += ~(v5 >> 1);
    if (v10 > a2)
      v5 = v7;
    else
      v6 = v9;
  }
  while (v5);
  if (v6 == v3)
LABEL_10:
    v11 = &v3[4 * v4];
  else
    v11 = v6 - 4;
  v12 = *((_QWORD *)v11 + 1);
  *a3 = sub_22E77BAB4(a1, v12, *(_DWORD *)(*(_QWORD *)(v12 + 3080) + 12 * (a2 - *(_DWORD *)(v12 + 3088) - 18)));
  return v12;
}

uint64_t sub_22E7B0AE4(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t *v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;

  v2 = *(_QWORD **)(a1 + 520);
  v3 = *(unsigned int *)(a1 + 528);
  if (!(_DWORD)v3)
    goto LABEL_10;
  v4 = *(unsigned int *)(a1 + 528);
  v5 = *(_QWORD **)(a1 + 520);
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[2 * (v4 >> 1)];
    v9 = *v7;
    v8 = v7 + 2;
    v4 += ~(v4 >> 1);
    if (v9 > a2)
      v4 = v6;
    else
      v5 = v8;
  }
  while (v4);
  if (v5 == v2)
LABEL_10:
    v10 = &v2[2 * v3];
  else
    v10 = v5 - 2;
  return v10[1];
}

unint64_t sub_22E7B0B44(uint64_t a1, uint64_t a2)
{
  __int16 v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int i;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  char v27[24];
  uint64_t v28;
  int v29;

  v3 = *(_WORD *)(a2 + 8);
  v4 = v3 & 0x7F;
  v5 = a2 - 48;
  if (a2)
    v6 = a2 - 48;
  else
    v6 = 0;
  if (a2 && v4 == 16)
  {
    if ((*(_BYTE *)(v6 + 80) & 3) == 0)
      v5 = *(_QWORD *)(v6 + 104) & 0xFFFFFFFFFFFFFFF8;
LABEL_8:
    v7 = v5 + 48;
LABEL_20:
    if (v5)
      return v7;
    else
      return 0;
  }
  v8 = v4 - 38;
  v9 = a2 - 64;
  if (!a2)
    v9 = 0;
  if (v8 >= 0xFFFFFFFD)
    v10 = v9;
  else
    v10 = 0;
  if (a2 && v8 >= 0xFFFFFFFD)
  {
    v11 = *(_QWORD *)(v10 + 128);
    if (!v11)
    {
      v11 = *(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v10 + 32))(v10) + 128);
      if (!v11)
      {
        v11 = sub_22E3CD3D4(*(_QWORD *)(a1 + 128) + 2032, 104, 3);
        *(_BYTE *)(v11 + 10) = 1;
        *(_WORD *)(v11 + 8) = -16300;
        *(_QWORD *)v11 = 0x8007FF8000203380;
        *(_OWORD *)(v11 + 72) = 0u;
        *(_OWORD *)(v11 + 60) = 0u;
        *(_OWORD *)(v11 + 44) = 0u;
        *(_OWORD *)(v11 + 28) = 0u;
        *(_OWORD *)(v11 + 12) = 0u;
        *(_QWORD *)(v11 + 88) = v10;
        *(_QWORD *)(v11 + 96) = 0;
        *(_DWORD *)(v10 + 72) |= 0x10000u;
        *(_QWORD *)(v10 + 128) = v11;
        *(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v10 + 32))(v10) + 128) = v11;
        v28 = v11;
        v29 = 1;
        sub_22F2C5018((uint64_t)v27, a1 + 3184, &v28, &v29);
      }
    }
    v5 = *(_QWORD *)(v11 + 88);
    v7 = v5 + 64;
    goto LABEL_20;
  }
  if (a2 && (v3 & 0x7Eu) - 38 >= 0xFFFFFFFC)
  {
    v13 = v9;
    goto LABEL_26;
  }
  if (v4 == 33)
    v13 = v9;
  else
    v13 = 0;
  if (a2 && v4 == 33)
  {
    if ((*(_DWORD *)(v13 + 28) & 0x7F) != 0x53)
    {
      v15 = *(_QWORD *)(v13 + 16);
      v16 = v15 & 0xFFFFFFFFFFFFFFF8;
      if ((v15 & 4) != 0)
        v16 = *(_QWORD *)v16;
      for (i = *(_WORD *)(v16 + 8) & 0x7F; i != 83; i = *(_WORD *)(v16 + 8) & 0x7F)
      {
        v18 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v18 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_49;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_48;
          if (i == 16)
            goto LABEL_42;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_55;
          if (i == 24)
          {
LABEL_42:
            v18 = -48;
          }
          else
          {
LABEL_48:
            if (i != 70)
            {
LABEL_49:
              v19 = i - 52;
              if ((i - 33) >= 5)
                v20 = -48;
              else
                v20 = -64;
              if (v19 >= 6)
                v18 = v20;
              else
                v18 = -72;
              goto LABEL_55;
            }
            v18 = -64;
          }
        }
LABEL_55:
        v21 = *(_QWORD *)(v16 + v18 + 16);
        v16 = v21 & 0xFFFFFFFFFFFFFFF8;
        if ((v21 & 4) != 0)
          v16 = *(_QWORD *)v16;
      }
      v9 = v16 - 40;
    }
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v9 + 88) + 2000) + 1) & 1) == 0)
    {
      v14 = 0;
LABEL_27:
      if (v14)
        return v14 + 64;
      else
        return 0;
    }
LABEL_26:
    v14 = sub_22EFC3500(v13);
    goto LABEL_27;
  }
  if (v4 == 22)
    v22 = v6;
  else
    v22 = 0;
  if (a2 && v4 == 22)
  {
    v23 = *(_QWORD *)(v22 + 120);
    if (!v23)
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v22 + 96) + 88), *(_QWORD *)(v22 + 96));
      v23 = *(_QWORD *)(v22 + 120);
    }
    if (v23 < 8)
      v5 = 0;
    else
      v5 = *(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_8;
  }
  v24 = a2 - 40;
  if (a2)
    v25 = v4 == 83;
  else
    v25 = 0;
  if (!v25)
    v24 = 0;
  v26 = v24 + 40;
  if (v25)
    return v26;
  else
    return 0;
}

uint64_t sub_22E7B0E58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27[2];
  uint64_t v28;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v21 = *(_QWORD *)(a1 + 8);
    v22 = *(_QWORD *)(v21 + 16);
    v23 = (_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF8);
    if ((v22 & 4) != 0)
      v23 = (_QWORD *)*v23;
    v24 = sub_22EFCBB30((unint64_t)v23);
    v25 = *(_QWORD *)a1 + 3512;
    v27[0] = v24;
    v27[1] = v2;
    v28 = v21;
    sub_22F2C5214((uint64_t)&v26, v25, v27, &v28);
  }
  else if (*(_BYTE *)(a1 + 24) && !*(_QWORD *)(a1 + 16))
  {
    v3 = *(_QWORD *)(a1 + 8);
    v4 = *(_QWORD *)(v3 + 16);
    v5 = (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
    if ((v4 & 4) != 0)
      v5 = (_QWORD *)*v5;
    v6 = *(_QWORD *)(v3 + 40);
    v7 = sub_22EFCBB30((unint64_t)v5);
    if (sub_22E750738(v3))
    {
      v18 = *(_QWORD *)(a1 + 8);
      v19 = *(_QWORD *)(v18 + 16);
      v20 = v19 & 0xFFFFFFFFFFFFFFF8;
      if ((v19 & 4) != 0)
        v20 = *(_QWORD *)(v20 + 8);
      sub_22F2C2EE0(*(_QWORD *)a1, v20, *(_DWORD *)(a1 + 28), v18);
    }
    else
    {
      v8 = *(_QWORD *)a1;
      if ((*(_WORD *)(v7 + 8) & 0x7F) != 0x53
        || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v8 + 128) + 2000) + 1) & 1) != 0)
      {
        v9 = sub_22E7B0B44(v8, v7);
        if (v9)
          sub_22EFCD8D0(v9, *(_QWORD *)(a1 + 8), 1);
      }
      else
      {
        v11 = *(_QWORD *)(v8 + 112);
        if (v11)
          v12 = v11 + 3320;
        else
          v12 = v8 + 432;
        if (sub_22F30535C(v12, *(_QWORD *)(a1 + 8), v6))
        {
          v13 = *(_QWORD *)a1 + 7512;
          v14 = v6 & 0xFFFFFFFFFFFFFFF8;
          if ((v6 & 7) != 0)
            v14 = 0;
          v27[0] = v14;
          v15 = sub_22F2C2F68(v13, v27);
          v16 = *(_QWORD *)(a1 + 8);
          v17 = *(_DWORD *)(v15 + 8);
          if (v17 >= *(_DWORD *)(v15 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v17 = *(_DWORD *)(v15 + 8);
          }
          *(_QWORD *)(*(_QWORD *)v15 + 8 * v17) = v16;
          ++*(_DWORD *)(v15 + 8);
        }
      }
    }
  }
  return a1;
}

unint64_t sub_22E7B0FFC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  __int16 v77;
  unsigned int v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  _DWORD *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;

  v6 = a2[7];
  if (!v6)
  {
    v6 = *(_QWORD *)(a3 + 40);
    if (!v6)
    {
      result = sub_22E750738(a3);
      if ((result & 1) == 0)
      {
        v26 = *((_DWORD *)a2 + 11);
        v27 = a2[7];
        *(_QWORD *)a1 = *a2;
        *(_QWORD *)(a1 + 8) = a3;
        *(_QWORD *)(a1 + 16) = 0;
        *(_DWORD *)(a1 + 28) = v26;
        *(_QWORD *)(a1 + 32) = v27;
        goto LABEL_39;
      }
    }
  }
  v8 = *a2;
  v9 = *(_QWORD *)(*a2 + 128);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = (_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 4) != 0)
    v11 = (_QWORD *)*v11;
  v12 = sub_22EFCBB30((unint64_t)v11);
  v13 = a2[7];
  if (v13)
  {
    v90 = 0;
    v42 = (sub_22F2C52BC(*(_QWORD *)(v8 + 3512), *(_DWORD *)(v8 + 3528), v12, v13, &v90) & 1) != 0
        ? v90
        : *(_QWORD *)(v8 + 3512) + 24 * *(unsigned int *)(v8 + 3528);
    if (v42 != *(_QWORD *)(*a2 + 3512) + 24 * *(unsigned int *)(*a2 + 3528))
    {
      result = sub_22EF6891C(v9, *(_QWORD *)(v42 + 16), a3);
      if ((_DWORD)result)
      {
        v51 = *(_QWORD *)(v42 + 16);
        v52 = *((_DWORD *)a2 + 11);
        v53 = a2[7];
        *(_QWORD *)a1 = *a2;
        *(_QWORD *)(a1 + 8) = a3;
        *(_QWORD *)(a1 + 16) = v51;
        *(_BYTE *)(a1 + 24) = 1;
        *(_DWORD *)(a1 + 28) = v52;
        *(_QWORD *)(a1 + 32) = v53;
        return result;
      }
    }
  }
  if (sub_22E750738(a3))
  {
    v43 = *(_QWORD *)(a3 + 16);
    v44 = v43 & 0xFFFFFFFFFFFFFFF8;
    if ((v43 & 4) != 0)
      v44 = *(_QWORD *)(v44 + 8);
    v45 = *a2;
    v46 = *((unsigned int *)a2 + 11);
    v47 = *(_WORD *)(v44 + 8) & 0x7F;
    v48 = -40;
    if (v47 > 0x46)
    {
      switch(v47)
      {
        case 'S':
          goto LABEL_97;
        case 'G':
          v48 = -56;
          goto LABEL_97;
        case 'Q':
          goto LABEL_97;
      }
    }
    else
    {
      if (v47 <= 0x18)
      {
        if (v47 == 16)
          goto LABEL_77;
        if (((1 << v47) & 0x1066) != 0)
          goto LABEL_97;
        if (v47 == 24)
        {
LABEL_77:
          v48 = -48;
          goto LABEL_97;
        }
      }
      if (v47 == 70)
      {
        v48 = -64;
        goto LABEL_97;
      }
    }
    if (v47 - 52 < 6)
    {
      v48 = -72;
    }
    else
    {
      v48 = -48;
      if (v47 - 33 < 5)
        v48 = -64;
    }
LABEL_97:
    v90 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)(v44 + v48) + 32))(v44 + v48);
    v56 = sub_22F2C5934(v45 + 3536, &v90);
    v57 = v56;
    if (*((_DWORD *)v56 + 4) > v46)
    {
      v58 = *(_QWORD *)(v56[1] + 8 * v46);
      if (v58)
      {
LABEL_189:
        result = sub_22EF6891C(v9, v58, a3);
        if ((_DWORD)result)
        {
          v49 = *((_DWORD *)a2 + 11);
          v50 = a2[7];
          *(_QWORD *)a1 = *a2;
          *(_QWORD *)(a1 + 8) = a3;
          *(_QWORD *)(a1 + 16) = v58;
          goto LABEL_191;
        }
        goto LABEL_56;
      }
    }
    v88 = v56 + 1;
    v89 = v46;
    v59 = *(_WORD *)(v44 + 8) & 0x7F;
    if (v59 - 38 >= 0xFFFFFFFD)
    {
      v65 = *(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)(v44 - 64) + 32))(v44 - 64) + 128);
      if (v65)
      {
        v66 = *(_QWORD *)(v65 + 88);
        if (v66)
        {
          v64 = v66 + 64;
          goto LABEL_151;
        }
      }
LABEL_187:
      if (*((_DWORD *)v57 + 4) <= v89)
        goto LABEL_56;
      v58 = *(_QWORD *)(*v88 + 8 * v89);
      if (!v58)
        goto LABEL_56;
      goto LABEL_189;
    }
    if (v59 == 22)
    {
      v60 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)(v44 - 48) + 32))(v44 - 48);
      v61 = *(_QWORD *)(v60 + 120);
      if (!v61)
      {
        v62 = v60;
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v60 + 96) + 88), *(_QWORD *)(v60 + 96));
        v61 = *(_QWORD *)(v62 + 120);
      }
      if (v61 >= 8)
      {
        v63 = *(_QWORD *)(v61 & 0xFFFFFFFFFFFFFFF8);
        if (v63)
        {
          v64 = v63 + 48;
          goto LABEL_151;
        }
      }
      goto LABEL_187;
    }
    v67 = -40;
    if ((*(_WORD *)(v44 + 8) & 0x7Fu) > 0x46)
    {
      if (v59 != 83)
      {
        if (v59 == 71)
        {
          v67 = -56;
          goto LABEL_125;
        }
        if (v59 == 81)
          goto LABEL_125;
LABEL_120:
        if (v59 - 52 < 6)
        {
          v67 = -72;
        }
        else
        {
          v67 = -48;
          if (v59 - 33 < 5)
            v67 = -64;
        }
      }
    }
    else
    {
      if (v59 > 0x18)
        goto LABEL_119;
      if (v59 != 16)
      {
        if (((1 << v59) & 0x1066) != 0)
          goto LABEL_125;
        if (v59 != 24)
        {
LABEL_119:
          if (v59 == 70)
          {
            v67 = -64;
            goto LABEL_125;
          }
          goto LABEL_120;
        }
      }
      v67 = -48;
    }
LABEL_125:
    v68 = 0;
    v69 = v44 + v67;
    v70 = v44 + v67;
    while (1)
    {
      v71 = *(_DWORD *)(v70 + 28);
      if ((v71 & 0x7Eu) - 58 >= 0xFFFFFFFA)
      {
        if (sub_22E49F868(v70))
        {
          v64 = v70 + 72;
          goto LABEL_151;
        }
        v71 = *(_DWORD *)(v70 + 28);
      }
      if ((v71 & 0x7F) == 0x18)
      {
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 72))(v70) & 1) != 0)
        {
          v64 = v70 + 48;
          goto LABEL_151;
        }
        v71 = *(_DWORD *)(v70 + 28);
      }
      if ((v71 & 0x7Eu) - 38 >= 0xFFFFFFFC && (*(_BYTE *)(v70 + 74) & 1) != 0)
        break;
      v72 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 48))(v70);
      if (v72)
        v73 = 48;
      else
        v73 = 56;
      if (!v72)
        v68 = v70;
      v74 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + v73))(v70);
      v70 = v74;
      if (v74)
        v75 = v74 == v69;
      else
        v75 = 1;
      if (v75 || v74 == v68)
        goto LABEL_187;
    }
    v64 = v70 + 64;
LABEL_151:
    v77 = *(_WORD *)(v64 + 8);
    v78 = v77 & 0x7F;
    v79 = -40;
    if (v78 > 0x46)
    {
      if (v78 != 83)
      {
        if (v78 == 71)
        {
          v79 = -56;
        }
        else if (v78 != 81)
        {
          goto LABEL_162;
        }
      }
    }
    else
    {
      if (v78 <= 0x18)
      {
        if (v78 == 16)
        {
LABEL_154:
          v79 = -48;
          goto LABEL_167;
        }
        if (((1 << v78) & 0x1066) != 0)
          goto LABEL_167;
        if (v78 == 24)
          goto LABEL_154;
      }
      if (v78 != 70)
      {
LABEL_162:
        if (v78 - 52 < 6)
        {
          v79 = -72;
        }
        else
        {
          v79 = -48;
          if (v78 - 33 < 5)
            v79 = -64;
        }
        goto LABEL_167;
      }
      v79 = -64;
    }
LABEL_167:
    if ((*(_BYTE *)(v64 + v79 + 29) & 0x80) != 0)
      goto LABEL_187;
    if ((v77 & 0x80) != 0)
      sub_22EFCC320(v64);
    v80 = *(_QWORD *)(v64 + 16);
    if (!v80)
      goto LABEL_187;
    v81 = 0;
    while (1)
    {
      v82 = *(_DWORD *)(v80 + 28) & 0x7F;
      if (v82 == 8)
      {
        v83 = *(_QWORD *)(v80 + 40);
        if ((v83 & 4) != 0)
          goto LABEL_183;
        v84 = (_DWORD *)(v83 & 0xFFFFFFFFFFFFFFF8);
        if ((v83 & 0xFFFFFFFFFFFFFFF8) == 0)
          goto LABEL_183;
        v82 = v84[7] & 0x7F;
      }
      else
      {
        v84 = (_DWORD *)v80;
      }
      if ((v82 - 13) <= 0x3D && sub_22E750738((uint64_t)v84))
      {
        v85 = (v81 + 1);
        if (*((_DWORD *)v57 + 4) == (_DWORD)v81)
        {
          v86 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v84 + 32))(v84);
          v87 = *((unsigned int *)v57 + 4);
          if (v87 >= *((unsigned int *)v57 + 5))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v87 = *((unsigned int *)v57 + 4);
          }
          *(_QWORD *)(v57[1] + 8 * v87) = v86;
          ++*((_DWORD *)v57 + 4);
        }
        else
        {
          *(_QWORD *)(*v88 + 8 * v81) = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v84 + 32))(v84);
        }
        goto LABEL_184;
      }
LABEL_183:
      v85 = v81;
LABEL_184:
      v81 = v85;
      v80 = *(_QWORD *)(v80 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v80)
        goto LABEL_187;
    }
  }
  v14 = *a2;
  if ((*(_WORD *)(v12 + 8) & 0x7F) != 0x53 || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v14 + 128) + 2000) + 1) & 1) != 0)
  {
    result = sub_22E7B0B44(v14, v12);
    if (result)
    {
      v21 = sub_22EFCE704(result, v6);
      if (v21)
      {
        while (1)
        {
          v22 = (uint64_t *)(v21 & 0xFFFFFFFFFFFFFFF8);
          v23 = (v21 & 0xFFFFFFFFFFFFFFF8) == 0 || (v21 & 4) == 0;
          v24 = v21 & 0xFFFFFFFFFFFFFFF8;
          if (!v23)
            v24 = *v22;
          if (a2[7])
          {
            if ((*(_DWORD *)(v24 + 28) & 0x8000) != 0 || (*(_DWORD *)(v24 + 28) & 0x7Fu) - 42 < 0xFFFFFFFD)
              goto LABEL_34;
            v24 = sub_22EFB6D64(v24, 1);
          }
          if (v24)
          {
            result = sub_22EF6891C(v9, v24, a3);
            if ((result & 1) != 0)
            {
              v49 = *((_DWORD *)a2 + 11);
              v50 = a2[7];
              *(_QWORD *)a1 = *a2;
              *(_QWORD *)(a1 + 8) = a3;
              *(_QWORD *)(a1 + 16) = v24;
LABEL_191:
              *(_BYTE *)(a1 + 24) = 1;
              *(_DWORD *)(a1 + 28) = v49;
              *(_QWORD *)(a1 + 32) = v50;
              return result;
            }
          }
LABEL_34:
          if (!v23)
          {
            v21 = v22[1];
            if (v21)
              continue;
          }
          break;
        }
      }
LABEL_56:
      v31 = *a2;
      v32 = *(_QWORD *)(a3 + 16);
      v33 = v32 & 0xFFFFFFFFFFFFFFF8;
      if ((v32 & 4) != 0)
        v33 = *(_QWORD *)(v33 + 8);
      v90 = 0;
      result = sub_22E7B57A0(*(_QWORD *)(v31 + 10768), *(_DWORD *)(v31 + 10784), v33, &v90);
      if ((result & 1) != 0)
        v34 = v90;
      else
        v34 = *(_QWORD *)(v31 + 10768) + 16 * *(unsigned int *)(v31 + 10784);
      v35 = *a2;
      if (v34 != *(_QWORD *)(*a2 + 10768) + 16 * *(unsigned int *)(*a2 + 10784))
      {
        v36 = *(_QWORD **)(v34 + 8);
        v37 = *(_QWORD *)(a3 + 16);
        v38 = (_QWORD *)(v37 & 0xFFFFFFFFFFFFFFF8);
        if ((v37 & 4) != 0)
          v38 = (_QWORD *)*v38;
        if (v36 == v38)
        {
          v39 = *(_DWORD *)(v35 + 9512);
          if (v39 >= *(_DWORD *)(v35 + 9516))
          {
            result = llvm::SmallVectorBase<unsigned int>::grow_pod();
            v39 = *(_DWORD *)(v35 + 9512);
          }
          *(_QWORD *)(*(_QWORD *)(v35 + 9504) + 8 * v39) = a3;
          ++*(_DWORD *)(v35 + 9512);
          v35 = *a2;
        }
      }
      v40 = *((_DWORD *)a2 + 11);
      v41 = a2[7];
      *(_QWORD *)a1 = v35;
      *(_QWORD *)(a1 + 8) = a3;
      *(_QWORD *)(a1 + 16) = 0;
      *(_BYTE *)(a1 + 24) = 1;
      *(_DWORD *)(a1 + 28) = v40;
      *(_QWORD *)(a1 + 32) = v41;
      return result;
    }
    v25 = *a2;
    *(_DWORD *)(a1 + 28) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = v25;
LABEL_39:
    *(_BYTE *)(a1 + 24) = 0;
    return result;
  }
  v15 = *(_QWORD *)(v14 + 112);
  if (v15)
    v16 = v15 + 3320;
  else
    v16 = v14 + 432;
  if ((v6 & 7) != 0)
    v17 = 0;
  else
    v17 = (unint64_t *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if (v17)
  {
    v18 = *v17;
    v19 = (*v17 >> 35) & 1;
    if ((*v17 & 0x800000000) != 0)
    {
      v20 = (v18 >> 5) & 0x80000000;
      if ((v18 & 0x3A000000) != 0)
        v20 = 0x80000000;
      *v17 = v20 | v18 & 0xFFFFFFF77FFFFFFFLL;
    }
  }
  else
  {
    LODWORD(v19) = 0;
  }
  v28 = sub_22E8CEB58(v16, v6);
  v90 = v28;
  if (!v28)
  {
LABEL_54:
    if ((_DWORD)v19)
      *v17 |= 0x880000000uLL;
    goto LABEL_56;
  }
  v29 = v28;
  while (1)
  {
    if ((v29 & 1) != 0)
      v30 = *(_QWORD *)(v29 & 0xFFFFFFFFFFFFFFFELL);
    else
      v30 = v29;
    if (a2[7])
    {
      if ((*(_DWORD *)(v30 + 28) & 0x8000) != 0 || (*(_DWORD *)(v30 + 28) & 0x7Fu) - 42 < 0xFFFFFFFD)
        goto LABEL_52;
      v30 = sub_22EFB6D64(v30, 1);
    }
    if (v30)
    {
      result = sub_22EF6891C(v9, v30, a3);
      if ((_DWORD)result)
        break;
    }
LABEL_52:
    if ((v29 & 1) != 0)
    {
      sub_22E8CECFC((unint64_t *)&v90);
      v29 = v90;
      if (v90)
        continue;
    }
    goto LABEL_54;
  }
  v54 = *((_DWORD *)a2 + 11);
  v55 = a2[7];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = v30;
  *(_BYTE *)(a1 + 24) = 1;
  *(_DWORD *)(a1 + 28) = v54;
  *(_QWORD *)(a1 + 32) = v55;
  if ((_DWORD)v19)
    *v17 |= 0x880000000uLL;
  return result;
}

uint64_t sub_22E7B1954(uint64_t a1)
{
  return ((uint64_t (*)(void))((char *)sub_22E7B1978 + 4 * byte_22F45F3C0[(*(_DWORD *)(a1 + 28) & 0x7F) - 16]))();
}

unint64_t sub_22E7B1978(uint64_t a1)
{
  uint64_t v1;
  unint64_t result;

  v1 = *(_QWORD *)(a1 + 72);
  if ((v1 & 1) == 0)
    return 0;
  result = v1 & 0xFFFFFFFFFFFFFFF8;
  if ((v1 & 4) != 0)
  {
    if (result)
      return *(_QWORD *)(result + 16);
  }
  return result;
}

void sub_22E7B19A4(uint64_t a1)
{
  if ((*(_QWORD *)(a1 + 104) & 1) != 0)
    JUMPOUT(0x22E7B1990);
  JUMPOUT(0x22E7B1980);
}

void sub_22E7B19B0(uint64_t a1)
{
  if ((*(_QWORD *)(a1 + 96) & 1) != 0)
    JUMPOUT(0x22E7B1990);
  JUMPOUT(0x22E7B1980);
}

void sub_22E7B19BC(uint64_t a1)
{
  if ((*(_QWORD *)(a1 + 88) & 1) != 0)
    JUMPOUT(0x22E7B1990);
  JUMPOUT(0x22E7B1980);
}

void sub_22E7B19C8(uint64_t a1)
{
  if ((*(_QWORD *)(a1 + 48) & 1) != 0)
    JUMPOUT(0x22E7B1990);
  JUMPOUT(0x22E7B1980);
}

void sub_22E7B19D4(uint64_t a1)
{
  if ((*(_QWORD *)(a1 + 80) & 1) != 0)
    JUMPOUT(0x22E7B1990);
  JUMPOUT(0x22E7B1980);
}

uint64_t sub_22E7B19E4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;

  v5 = result;
  v6 = (_QWORD *)(a2 - 104);
  if (!a2)
    v6 = 0;
  v6[13] = a3 & 0xFFFFFFFFFFFFFFFCLL;
  v6[14] = *(_QWORD *)(a3 + 112);
  v7 = v6[10];
  if ((*(_BYTE *)(a3 + 82) & 1) != ((v7 >> 16) & 1))
    v6[10] = v7 | 0x10000;
  v8 = *(_QWORD *)(v6[6] & 0xFFFFFFFFFFFFFFF0);
  if (v8)
    v9 = *(_BYTE *)(v8 + 16) == 26;
  else
    v9 = 0;
  if (!v9)
  {
    v18 = v6;
    v19 = a3;
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
    {
      result = sub_22F10CF48(v8);
      v8 = result;
    }
    else
    {
      v8 = 0;
    }
    a3 = v19;
    v6 = v18;
  }
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v10)
    v11 = *(_BYTE *)(v10 + 16) == 26;
  else
    v11 = 0;
  if (!v11)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
      return result;
    v20 = a3;
    v21 = v6;
    result = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0));
    v6 = v21;
    a3 = v20;
    v10 = result;
  }
  if (v8)
    v12 = v10 == 0;
  else
    v12 = 1;
  if (!v12)
  {
    v13 = ((*(_QWORD *)(v8 + 16) >> 54) & 0xF) - 9;
    if (v13 < 2 != ((*(_QWORD *)(v10 + 16) >> 54) & 0xF) - 9 < 2)
    {
      if (v13 < 2)
        v6 = (_QWORD *)a3;
      v24 = a4;
      v25 = v6;
      sub_22E7B1C08(v5 + 3208, &v24);
    }
    v14 = *(_QWORD *)(*(_QWORD *)(v8 + 24) & 0xFFFFFFFFFFFFFFF0);
    LOBYTE(v24) = 0;
    v15 = sub_22F110500((uint64_t)&v24, v14);
    v16 = 0;
    if (v15)
      v16 = *(_QWORD *)(v15 + 24) <= 0xFuLL && (*(_BYTE *)(v15 + 17) & 4) == 0;
    v17 = *(_QWORD *)(*(_QWORD *)(v10 + 24) & 0xFFFFFFFFFFFFFFF0);
    LOBYTE(v24) = 0;
    result = sub_22F110500((uint64_t)&v24, v17);
    if (result && *(_QWORD *)(result + 24) < 0x10uLL)
    {
      if (v16 == ((*(_BYTE *)(result + 17) & 4) == 0))
        return result;
    }
    else if (!v16)
    {
      return result;
    }
    if (v16)
      v22 = v10;
    else
      v22 = v8;
    v23 = *(_QWORD **)(v22 + 24);
    v24 = a4;
    v25 = v23;
    return sub_22E787084(v5 + 3360, &v24);
  }
  return result;
}

uint64_t sub_22E7B1C08(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  __int128 v6;
  unsigned int v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  int v13;

  v12 = *a2;
  v13 = 0;
  result = sub_22E7B533C((uint64_t)&v10, a1, &v12, &v13);
  if (v11)
  {
    v5 = v10;
    v6 = *(_OWORD *)a2;
    v7 = *(_DWORD *)(a1 + 80);
    if (v7 >= *(_DWORD *)(a1 + 84))
    {
      v9 = *(_OWORD *)a2;
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v6 = v9;
      v7 = *(_DWORD *)(a1 + 80);
    }
    *(_OWORD *)(*(_QWORD *)(a1 + 72) + 16 * v7) = v6;
    v8 = *(_DWORD *)(a1 + 80);
    *(_DWORD *)(a1 + 80) = v8 + 1;
    *(_DWORD *)(v5 + 8) = v8;
  }
  return result;
}

void sub_22E7B1CB4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *i;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;

  switch(*(_DWORD *)(a2 + 28) & 0x7F)
  {
    case 0x10:
      v11 = *(_QWORD *)(a3 + 88);
      *(_QWORD *)(a2 + 80) = a3 & 0xFFFFFFFFFFFFFFFCLL;
      *(_QWORD *)(a2 + 88) = v11;
      break;
    case 0x11:
    case 0x2E:
    case 0x2F:
      v9 = *(_QWORD *)(a3 + 56);
      *(_QWORD *)(a2 + 48) = a3 & 0xFFFFFFFFFFFFFFFCLL;
      *(_QWORD *)(a2 + 56) = v9;
      break;
    case 0x13:
    case 0x16:
    case 0x17:
      v10 = *(_QWORD *)(a3 + 96);
      *(_QWORD *)(a2 + 88) = a3 & 0xFFFFFFFFFFFFFFFCLL;
      *(_QWORD *)(a2 + 96) = v10;
      break;
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x27:
    case 0x28:
    case 0x29:
      v7 = *(_QWORD *)(a3 + 72);
      *(_QWORD *)(a2 + 64) = a3 & 0xFFFFFFFFFFFFFFFCLL;
      *(_QWORD *)(a2 + 72) = v7;
      break;
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
      v8 = *(_QWORD *)(a3 + 104);
      *(_QWORD *)(a2 + 96) = a3 & 0xFFFFFFFFFFFFFFFCLL;
      *(_QWORD *)(a2 + 104) = v8;
      break;
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
      sub_22E7B19E4(a1, a2 + 104, a3, a4);
      break;
    case 0x3C:
    case 0x3D:
    case 0x3E:
    case 0x3F:
    case 0x40:
    case 0x41:
    case 0x42:
      sub_22F2C3070(a1, (unint64_t *)(a2 + 72), a3);
      break;
    case 0x53:
      v12 = *(_QWORD *)(a3 + 80);
      *(_QWORD *)(a2 + 72) = a3 & 0xFFFFFFFFFFFFFFFCLL;
      *(_QWORD *)(a2 + 80) = v12;
      break;
    default:
      break;
  }
  v13 = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = v13 | *(_DWORD *)(a3 + 28) & 0x260000;
  if ((v13 & 0x7Fu) - 33 >= 0xFFFFFFF9)
  {
    v14 = *(_QWORD *)(a3 + 56);
    v15 = *(_DWORD *)(v14 + 12);
    v16 = v15 & 0x1FFFFFFF;
    if ((v15 & 0x1FFFFFFF) != 0)
    {
      v17 = *(_QWORD *)(a1 + 128);
      v18 = (unint64_t *)(v14 + 16);
      v19 = (uint64_t *)(*(_QWORD *)(a2 + 56) + 16);
      do
      {
        v20 = *v18;
        v21 = *v19;
        v22 = *(_DWORD *)(*v18 + 28) & 0x7F;
        if (*v18 && v22 == 38)
        {
          if (*(_QWORD *)(v20 + 72) >= 8uLL)
            sub_22E7B5028((unint64_t *)(v21 + 72), v17, v20);
        }
        else if (v20 && v22 == 59)
        {
          if (*(_QWORD *)(v20 + 72) >= 4uLL)
            sub_22E7B50AC((unint64_t *)(v21 + 72), v17, v20);
        }
        else if (*(_QWORD *)(v20 + 72) >= 8uLL)
        {
          sub_22F2C3480((unint64_t *)(v21 + 72), v17, v20);
        }
        ++v19;
        ++v18;
        --v16;
      }
      while (v16);
    }
  }
  if ((*(_BYTE *)(a3 + 29) & 1) != 0)
  {
    v23 = *(_QWORD *)(a1 + 128);
    sub_22EFC8E88(a3);
    v25 = *(uint64_t **)v24;
    v26 = *(unsigned int *)(v24 + 8);
    i = *(uint64_t **)v24;
    if ((_DWORD)v26)
    {
      v28 = 8 * v26;
      for (i = *(uint64_t **)v24; *(_WORD *)(*i + 32) != 202; ++i)
      {
        v28 -= 8;
        if (!v28)
          return;
      }
    }
    if (i != &v25[v26])
    {
      do
      {
        v30 = *v25++;
        v29 = v30;
      }
      while (*(_WORD *)(v30 + 32) != 202);
      if (!sub_22E693748(a2))
      {
        sub_22F3899F8(v29, v23);
        v32 = *(_WORD *)(v31 + 32);
        *(_BYTE *)(v31 + 34) |= 1u;
        *(_WORD *)(v31 + 32) = v32;
        sub_22EFCA95C(a2, v31);
      }
    }
  }
}

uint64_t sub_22E7B1F30(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  switch(*(_DWORD *)(result + 28) & 0x7F)
  {
    case 0x10:
      v2 = result + 80;
      goto LABEL_3;
    case 0x11:
      v2 = result + 48;
      goto LABEL_3;
    case 0x13:
      v2 = result + 88;
      goto LABEL_3;
    case 0x16:
      v2 = result + 88;
      goto LABEL_3;
    case 0x17:
      v2 = result + 88;
      goto LABEL_3;
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
      v2 = result + 64;
      goto LABEL_3;
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
      v2 = result + 96;
      goto LABEL_3;
    case 0x27:
    case 0x28:
    case 0x29:
      v2 = result + 64;
      goto LABEL_3;
    case 0x2E:
    case 0x2F:
      v2 = result + 48;
      goto LABEL_3;
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
      v2 = result + 104;
      goto LABEL_3;
    case 0x3C:
    case 0x3D:
    case 0x3E:
    case 0x3F:
    case 0x40:
    case 0x41:
    case 0x42:
      v2 = result + 72;
      goto LABEL_3;
    case 0x53:
      v2 = result + 72;
LABEL_3:
      result = sub_22E7B7A74(v2, a2);
      break;
    default:
      return result;
  }
  return result;
}

void sub_22E7B1FC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = 80;
  switch(*(_DWORD *)(a2 + 28) & 0x7F)
  {
    case 0x10:
      goto LABEL_8;
    case 0x11:
    case 0x2E:
    case 0x2F:
      v2 = 48;
      goto LABEL_8;
    case 0x13:
    case 0x16:
    case 0x17:
      v2 = 88;
      goto LABEL_8;
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x27:
    case 0x28:
    case 0x29:
      v2 = 64;
      goto LABEL_8;
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
      v2 = 96;
      goto LABEL_8;
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
      v2 = 104;
      goto LABEL_8;
    case 0x3C:
    case 0x3D:
    case 0x3E:
    case 0x3F:
    case 0x40:
    case 0x41:
    case 0x42:
    case 0x53:
      v2 = 72;
LABEL_8:
      *(_DWORD *)((*(_QWORD *)(a2 + v2) & 0xFFFFFFFFFFFFFFF8) + 8) = 0;
      break;
    default:
      return;
  }
}

_DWORD *sub_22E7B202C(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _DWORD *v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int v45;
  _QWORD *v46;
  unint64_t v47;
  _DWORD *v48;
  void **v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  _BOOL4 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t *v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char **v74;
  uint64_t v75;
  unint64_t v76;
  unsigned int v77;
  int v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t v81;
  __int16 v82;
  uint64_t v83[2];
  int v84;
  char *v85;
  std::string v86;
  char *v87[4];
  __int16 v88;
  std::string v89;
  __int16 v90;
  std::string v91;
  __int16 v92;
  uint64_t v93[4];
  __int16 v94;
  uint64_t v95[4];
  __int16 v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  void *v101;
  uint64_t v102;
  _BYTE v103[512];
  std::string *v104;
  char v105;
  __int16 v106;
  __n128 v107[2];
  uint64_t v108;

  v108 = *MEMORY[0x24BDAC8D0];
  v84 = 0;
  v4 = sub_22E7B0A34(a1, a2, &v84);
  v6 = v5;
  v7 = v4 + 2720;
  v8 = 8 * *(_QWORD *)(v4 + 2736) - *(unsigned int *)(v4 + 2752);
  v83[0] = v4 + 2720;
  v83[1] = v8;
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_DWORD *)(a1 + 10984);
  *(_DWORD *)(a1 + 10984) = 1;
  (*(void (**)(uint64_t))(v9 + 160))(a1 + 24);
  *(_QWORD *)(v4 + 2736) = (v6 >> 3) & 0x1FFFFFFFFFFFFFF8;
  *(_DWORD *)(v4 + 2752) = 0;
  if ((v6 & 0x3F) != 0)
  {
    sub_22E745EC8(v7, v6 & 0x3F, (uint64_t)&v97);
    if ((v98 & 1) != 0)
    {
      v71 = v97;
      if (v97)
      {
        v95[0] = (uint64_t)"ASTReader::readDeclRecord failed ";
        v96 = 259;
        v93[0] = (uint64_t)"jumping";
        v94 = 259;
        sub_22F2BB324(v95, v93, (uint64_t)v107);
        v91.__r_.__value_.__r.__words[0] = (std::string::size_type)": ";
        v92 = 259;
        sub_22F2BB324((uint64_t *)v107, (uint64_t *)&v91, (uint64_t)&v73);
        v87[0] = v71;
        sub_22F2432A8(v87, &v89);
        v106 = 260;
        v104 = &v89;
        sub_22F2BB324(&v73, (uint64_t *)&v104, (uint64_t)&v97);
LABEL_150:
        llvm::report_fatal_error();
      }
    }
  }
  v97 = *(char **)(a1 + 128);
  v98 = a1;
  v99 = v4;
  v100 = 0;
  v101 = v103;
  v102 = 0x4000000000;
  v73 = a1;
  v74 = &v97;
  v75 = v4;
  v76 = v6;
  v77 = a2;
  v78 = v84;
  v79 = 0;
  v80 = 0;
  v81 = 0;
  v82 = 0;
  sub_22E745EC8(v7, *(_DWORD *)(v4 + 2756), (uint64_t)v107);
  if ((v107[0].n128_u8[8] & 1) != 0)
  {
    v70 = (char *)v107[0].n128_u64[0];
    v91.__r_.__value_.__r.__words[0] = (std::string::size_type)"ASTReader::readDeclRecord failed ";
    v92 = 259;
    v104 = (std::string *)"reading code";
    v106 = 259;
    sub_22F2BB324((uint64_t *)&v91, (uint64_t *)&v104, (uint64_t)v93);
    v89.__r_.__value_.__r.__words[0] = (std::string::size_type)": ";
    v90 = 259;
    sub_22F2BB324(v93, (uint64_t *)&v89, (uint64_t)v95);
    v85 = v70;
    sub_22F2432A8(&v85, &v86);
    v88 = 260;
    v87[0] = (char *)&v86;
    v69 = (uint64_t *)v87;
    goto LABEL_149;
  }
  v11 = *(_QWORD *)(a1 + 128);
  v100 = 0;
  LODWORD(v102) = 0;
  llvm::BitstreamCursor::readRecord();
  if ((v105 & 1) != 0)
  {
    v95[0] = (uint64_t)"ASTReader::readDeclRecord failed reading decl code: ";
    v96 = 259;
    v68 = (char *)v104;
    v104 = 0;
    v72 = v68;
    sub_22F2432A8(&v72, &v91);
    v94 = 260;
    v93[0] = (uint64_t)&v91;
    v69 = v93;
LABEL_149:
    sub_22F2BB324(v95, v69, (uint64_t)v107);
    goto LABEL_150;
  }
  v12 = 0;
  switch((int)v104)
  {
    case 51:
      v13 = sub_22EFC4684(v11, a2);
      goto LABEL_32;
    case 52:
      v13 = sub_22EFC4780(v11, a2);
      goto LABEL_32;
    case 53:
      v13 = sub_22EFC38A8(v11, a2);
      goto LABEL_32;
    case 54:
      v13 = sub_22F3ACCA8(v11, a2);
      goto LABEL_32;
    case 55:
      v13 = (unint64_t)sub_22EFC4560(v11, a2);
      goto LABEL_32;
    case 56:
      v13 = sub_22EFC44DC(v11, a2);
      goto LABEL_32;
    case 57:
      v13 = (unint64_t)sub_22F3B527C(v11, a2);
      goto LABEL_32;
    case 58:
      v13 = sub_22F3B5BE0(v11, a2);
      goto LABEL_32;
    case 59:
      v13 = sub_22F3B62CC(v11, a2);
      goto LABEL_32;
    case 60:
      sub_22F3B5FD8(v11, a2);
      goto LABEL_32;
    case 61:
      sub_22F3B60E0(v11, a2);
      goto LABEL_32;
    case 62:
      v13 = sub_22F3B67F8(v11, a2);
      goto LABEL_32;
    case 63:
      v13 = (unint64_t)sub_22F3B6B68(v11, a2);
      goto LABEL_32;
    case 64:
      v13 = (unint64_t)sub_22F3B6DBC(v11, a2);
      goto LABEL_32;
    case 65:
      v13 = (unint64_t)sub_22F3B6F14(v11, a2);
      goto LABEL_32;
    case 66:
      sub_22F3B700C(v11, a2);
      goto LABEL_32;
    case 67:
      sub_22F3B70F4(v11, a2);
      goto LABEL_32;
    case 68:
      v13 = sub_22EFC2E2C(v11, a2);
      goto LABEL_32;
    case 69:
      v13 = sub_22F3B3514(v11, a2);
      goto LABEL_32;
    case 70:
      v13 = sub_22F3B3610(v11, a2);
      goto LABEL_32;
    case 71:
      v13 = sub_22F3B9D90(v11, a2);
      goto LABEL_32;
    case 72:
      v13 = sub_22EFBB718(v11, a2);
      goto LABEL_32;
    case 73:
      v13 = sub_22F3AD5E0(v11, a2);
      goto LABEL_32;
    case 74:
      v13 = sub_22EFBF184(v11, a2);
      goto LABEL_32;
    case 75:
      v64 = v100++;
      v13 = sub_22F3B32E8(v11, a2, *((_QWORD *)v101 + v64));
      goto LABEL_32;
    case 76:
      v13 = sub_22F3B31A4(v11, a2);
      goto LABEL_32;
    case 77:
      v13 = sub_22F3ADAD4(v11, a2);
      goto LABEL_32;
    case 78:
      sub_22F3AD6A8(v11, a2);
      goto LABEL_32;
    case 79:
      v63 = v100++;
      v13 = sub_22F3AD758(v11, a2, *((_QWORD *)v101 + v63));
      goto LABEL_32;
    case 82:
      v13 = sub_22F3AD4C4(v11, a2);
      goto LABEL_32;
    case 83:
      v13 = sub_22EFD8BEC(v11, a2);
      goto LABEL_32;
    case 84:
      sub_22F3B25F8(v11, a2);
      goto LABEL_32;
    case 85:
      sub_22F3B2A20(v11, a2);
      goto LABEL_32;
    case 86:
      v13 = sub_22F3B2B80(v11, a2);
      goto LABEL_32;
    case 87:
      v67 = v100++;
      v13 = sub_22F3B2C90(v11, a2, *((_QWORD *)v101 + v67));
      goto LABEL_32;
    case 88:
      v13 = sub_22F3B281C(v11, a2);
      goto LABEL_32;
    case 89:
      v13 = sub_22F3B28FC(v11, a2);
      goto LABEL_32;
    case 90:
      sub_22F3B238C(v11, a2);
      goto LABEL_32;
    case 91:
      sub_22F3B2DB8(v11, a2);
      goto LABEL_32;
    case 92:
      v13 = sub_22F3B2F30(v11, a2);
      goto LABEL_32;
    case 93:
      v13 = sub_22EFD8A44(v11, a2);
      goto LABEL_32;
    case 94:
      v13 = sub_22F3ADD9C(v11, a2);
      goto LABEL_32;
    case 95:
      v13 = sub_22EFCF7D8(v11, a2);
      goto LABEL_32;
    case 96:
      v13 = sub_22F3B1EBC(v11, a2);
      goto LABEL_32;
    case 97:
      v13 = sub_22EFD6BA4(v11, a2);
      goto LABEL_32;
    case 98:
      v19 = v100++;
      v13 = sub_22EFD7D3C(v11, a2, *((_QWORD *)v101 + v19));
      goto LABEL_32;
    case 99:
      v13 = sub_22F3B21C8(v11, a2);
      goto LABEL_32;
    case 100:
      v13 = sub_22EFD8828(v11, a2);
      goto LABEL_32;
    case 101:
      v20 = sub_22E3CD3D4(v11 + 2032, 48, 3);
      v12 = (_DWORD *)(v20 + 8);
      *(_DWORD *)v20 = 0;
      *(_DWORD *)(v20 + 4) = a2;
      sub_22E7B5130(v20 + 8, 0);
      *(_QWORD *)(v20 + 8) = &unk_24FAC4360;
      *(_DWORD *)(v20 + 44) = 0;
      break;
    case 102:
      v17 = v100++;
      v13 = sub_22EFD9DB0(v11, a2, *((_QWORD *)v101 + v17));
      goto LABEL_32;
    case 103:
      v13 = sub_22F3B9138(v11, a2);
      goto LABEL_32;
    case 104:
      v13 = sub_22EFE9E28(v11, a2);
      goto LABEL_32;
    case 105:
      v13 = sub_22EFEB834(v11, a2);
      goto LABEL_32;
    case 106:
      sub_22EFEBAE0(v11, a2);
      goto LABEL_32;
    case 107:
      v13 = sub_22F3B934C(v11, a2);
      goto LABEL_32;
    case 108:
      sub_22F3B96A0(v11, a2);
      goto LABEL_32;
    case 109:
      sub_22F3B98B0(v11, a2);
      goto LABEL_32;
    case 110:
      v13 = sub_22EFE97A0(v11, a2);
      goto LABEL_32;
    case 111:
      v22 = v100++;
      v13 = sub_22EFEB050(v11, a2, *((_QWORD *)v101 + v22) != 0);
      goto LABEL_32;
    case 112:
      v18 = v100++;
      sub_22EFEB444(v11, a2, *((_QWORD *)v101 + v18) != 0);
      goto LABEL_32;
    case 113:
      v13 = sub_22F3B8C6C(v11, a2);
      goto LABEL_32;
    case 114:
      v13 = sub_22EFEBB9C(v11, a2);
      goto LABEL_32;
    case 115:
      sub_22F3B8E98(v11, a2);
      goto LABEL_32;
    case 116:
      v13 = sub_22F3B2FF4(v11, a2);
      goto LABEL_32;
    case 117:
      v13 = sub_22F3B30E0(v11, a2);
      goto LABEL_32;
    case 118:
      v14 = "attempt to read a C++ base-specifier record as a declaration";
      v15 = a1;
      v16 = 60;
      goto LABEL_28;
    case 119:
      v14 = "attempt to read a C++ ctor initializer record as a declaration";
      v15 = a1;
      v16 = 62;
LABEL_28:
      sub_22E769C10(v15, v14, v16);
      goto LABEL_64;
    case 120:
      v13 = sub_22F3AD8CC(v11, a2);
      goto LABEL_32;
    case 121:
      v57 = v100 + 1;
      v58 = *((_QWORD *)v101 + v100) != 0;
      v100 += 2;
      sub_22F3B8A48(v11, a2, *((_QWORD *)v101 + v57), v58);
      goto LABEL_32;
    case 122:
      v61 = v100++;
      v13 = sub_22F3B8CD8(v11, a2, *((_QWORD *)v101 + v61));
      goto LABEL_32;
    case 123:
      v13 = sub_22F3B9244(v11, a2);
      goto LABEL_32;
    case 124:
      v13 = sub_22F3ADC68(v11, a2, *((_DWORD *)v101 + 2 * v102 - 2));
      goto LABEL_32;
    case 125:
      v59 = *((_QWORD *)v101 + v100 + 1);
      v100 += 3;
      v13 = (unint64_t)sub_22F3B78F0(v11, a2, 0, v59);
      goto LABEL_32;
    case 126:
      v62 = *((_QWORD *)v101 + v100);
      v100 += 3;
      v107[0].n128_u32[0] = 0;
      v13 = (unint64_t)sub_22F3B7B84(v11, a2, v62, 0, (int *)v107);
      goto LABEL_32;
    case 127:
      v65 = *((_QWORD *)v101 + v100);
      v66 = *((_QWORD *)v101 + v100 + 1);
      v100 += 3;
      v107[0].n128_u32[0] = 0;
      v13 = (unint64_t)sub_22F3B7A34(v11, a2, v65, v66, (int *)v107);
      goto LABEL_32;
    case 128:
      v13 = sub_22F3ADB84(v11, a2);
      goto LABEL_32;
    case 129:
      v54 = sub_22E3CD3D4(v11 + 2032, 80, 3);
      v12 = (_DWORD *)(v54 + 8);
      *(_DWORD *)v54 = 0;
      *(_DWORD *)(v54 + 4) = a2;
      sub_22E7B5130(v54 + 8, 11);
      *(_QWORD *)(v54 + 8) = &unk_24FAC3DB8;
      *(_QWORD *)(v54 + 72) = 0;
      *(_QWORD *)(v54 + 48) = 0;
      *(_QWORD *)(v54 + 56) = 0;
      break;
    case 130:
      v13 = sub_22F3B1FC8(v11, a2);
      goto LABEL_32;
    case 131:
      v13 = sub_22F3B59D8(v11, a2);
      goto LABEL_32;
    case 132:
      v13 = sub_22F3B8130(v11, a2);
      goto LABEL_32;
    case 133:
      v55 = v100++;
      v13 = sub_22F3AD1E8(v11, a2, *((_QWORD *)v101 + v55));
      goto LABEL_32;
    case 134:
      v60 = v100++;
      v13 = sub_22F3AD314(v11, a2, *((_QWORD *)v101 + v60));
      goto LABEL_32;
    case 135:
      v56 = *((_QWORD *)v101 + v100);
      v100 += 3;
      v13 = (unint64_t)sub_22F3B7F0C(v11, a2, v56);
      goto LABEL_32;
    case 136:
      v13 = (unint64_t)sub_22F3B7CD8(v11, a2);
      goto LABEL_32;
    case 137:
      v13 = (unint64_t)sub_22F3B3868(v11, a2);
LABEL_32:
      v12 = (_DWORD *)v13;
      break;
    default:
      break;
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 2784) + 8 * (a2 - 18)) = v12;
  v23 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*(_QWORD *)(v11 + 1960) + 80) + 72), *(_QWORD *)(*(_QWORD *)(v11 + 1960) + 80));
  v24 = v23 + 40;
  if (!v23)
    v24 = 0;
  *((_QWORD *)v12 + 2) = v24 & 0xFFFFFFFFFFFFFFFBLL;
  sub_22E794E0C((uint64_t)&v73, (uint64_t)v12);
  v25 = HIBYTE(v82);
  v26 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v12 + 32))(v12);
  *(_DWORD *)(v26 + 28) |= v25 << 10;
  HIBYTE(v82) = 0;
  v27 = v12[7];
  if ((v27 & 0x7Fu) - 67 >= 0xFFFFFFEE)
  {
    v28 = *((_QWORD *)v12 + 7);
    v29 = (uint64_t *)(v28 & 0xFFFFFFFFFFFFFFF8);
    if ((v28 & 4) != 0)
      v29 = (uint64_t *)v29[4];
    if (v29)
    {
      sub_22E781BF8((uint64_t)v74, *v29);
      v27 = v12[7];
    }
  }
  if ((v27 & 0x7Fu) - 43 >= 0xFFFFFFF6)
  {
    v32 = sub_22E77D8C8(v73, v79);
    if (v32 >= 0x10)
      v33 = *(_QWORD *)(v32 & 0xFFFFFFFFFFFFFFF0);
    else
      v33 = 0;
    *((_QWORD *)v12 + 6) = v33;
    if (v80)
      *((_QWORD *)v12 + 15) = sub_22E77F870(v73, v80) & 0xFFFFFFFFFFFFFFFBLL;
  }
  else if ((v27 & 0x7F) == 0x16)
  {
    v30 = sub_22E77D8C8(v73, v79);
    if (v30 >= 0x10)
      v31 = *(_QWORD *)(v30 & 0xFFFFFFFFFFFFFFF0);
    else
      v31 = 0;
    *((_QWORD *)v12 + 13) = v31;
  }
  else if ((v27 & 0x7Eu) - 58 >= 0xFFFFFFFA)
  {
    v34 = (uint64_t)v74;
    v35 = *((unsigned int *)v74 + 6);
    *((_DWORD *)v74 + 6) = v35 + 1;
    if (*(_QWORD *)(*(_QWORD *)(v34 + 32) + 8 * v35))
      sub_22E794BEC(&v73, (uint64_t)v12);
  }
  v36 = v12[7] & 0x7F;
  if ((v36 > 0x39 || ((1 << v36) & 0x3F0003E01011066) == 0)
    && (v36 - 70 > 0xD || ((1 << (v36 - 70)) & 0x2803) == 0)
    && v36 - 19 > 4)
  {
    goto LABEL_68;
  }
  v37 = sub_22EFCAE04((uint64_t)v12);
  v38 = (uint64_t)v74;
  v39 = *((unsigned int *)v74 + 6);
  *((_DWORD *)v74 + 6) = v39 + 1;
  v40 = *(_QWORD *)(v38 + 32);
  v41 = *(_QWORD *)(v40 + 8 * v39);
  v42 = v76;
  *(_DWORD *)(v38 + 24) = v39 + 2;
  v43 = *(_QWORD *)(v40 + 8 * (v39 + 1));
  v44 = v43 ? v76 - v43 : 0;
  if (v41 && v42 != v41 && (sub_22E769798(a1, v4, v7, v42 - v41, v37) & 1) != 0
    || v44 && (sub_22E769D54((uint64_t *)a1, v4, v7, v44, a2) & 1) != 0)
  {
LABEL_64:
    v12 = 0;
  }
  else
  {
LABEL_68:
    v45 = *(_DWORD *)(a1 + 2920);
    if (v45 >= *(_DWORD *)(a1 + 2924))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v45 = *(_DWORD *)(a1 + 2920);
    }
    v46 = (_QWORD *)(*(_QWORD *)(a1 + 2912) + 16 * v45);
    *v46 = v12;
    v46[1] = a2 | 0x100000000;
    ++*(_DWORD *)(a1 + 2920);
    if ((v12[7] & 0x7F) == 0x16)
    {
      v47 = *((_QWORD *)v12 + 15);
      if (!v47)
      {
        sub_22E3CD31C((uint64_t *)(*((_QWORD *)v12 + 12) + 88), *((_QWORD *)v12 + 12));
        v47 = *((_QWORD *)v12 + 15);
      }
      if (v47 < 8)
        v48 = 0;
      else
        v48 = *(_DWORD **)(v47 & 0xFFFFFFFFFFFFFFF8);
      if (v48 == v12)
        goto LABEL_88;
      v49 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 3704), v12);
      v50 = *(_QWORD *)(a1 + 3712);
      v51 = 3720;
      if (v50 == *(_QWORD *)(a1 + 3704))
        v51 = 3724;
      if (v49 != (void **)(v50 + 8 * *(unsigned int *)(a1 + v51)))
LABEL_88:
        sub_22F2C312C(a1, a2, (unint64_t)v12, 0);
    }
    v107[0].n128_u64[0] = (unint64_t)v12;
    v107[0].n128_u8[8] = v82;
    v21 = sub_22E7B2E10(a1 + 8456, v107);
  }
  if ((v105 & 1) != 0)
  {
    v52 = (uint64_t)v104;
    v104 = 0;
    if (v52)
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)v52 + 8))(v52, v21);
  }
  if (v101 != v103)
    free(v101);
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 168))(a1 + 24);
  *(_DWORD *)(a1 + 10984) = v10;
  sub_22E78CE68(v83);
  return v12;
}

__n128 sub_22E7B2E10(uint64_t a1, __n128 *a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  __n128 result;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  size_t v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *i;
  char *v47;
  __int128 v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;

  v4 = *(char **)(a1 + 8);
  v5 = *(char **)(a1 + 16);
  v6 = v5 - v4;
  if (v5 == v4)
    v7 = 0;
  else
    v7 = 32 * (v5 - v4) - 1;
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40) + v8;
  if (v7 == v9)
  {
    if (v8 < 0x100)
    {
      v30 = *(char **)(a1 + 24);
      v31 = (uint64_t)&v30[-*(_QWORD *)a1];
      if (v6 < v31)
      {
        if (v30 != v5)
        {
          *(_QWORD *)&v57 = operator new(0x1000uLL);
          sub_22F2C31E8(a1, &v57);
          goto LABEL_25;
        }
        *(_QWORD *)&v57 = operator new(0x1000uLL);
        sub_22F2C331C((const void **)a1, &v57);
        v32 = *(_QWORD **)(a1 + 8);
        v33 = *(char **)(a1 + 16);
        v36 = *v32;
        v34 = (char *)(v32 + 1);
        v35 = v36;
        *(_QWORD *)(a1 + 8) = v34;
        if (v33 == *(char **)(a1 + 24))
        {
          v37 = *(char **)a1;
          if ((unint64_t)v34 <= *(_QWORD *)a1)
          {
            if (v33 == v37)
              v49 = 1;
            else
              v49 = (v33 - v37) >> 2;
            if (v49 >> 61)
              goto LABEL_57;
            v50 = (char *)operator new(8 * v49);
            v51 = &v50[8 * (v49 >> 2)];
            v52 = v33 - v34;
            v24 = v33 == v34;
            v33 = v51;
            if (!v24)
            {
              v33 = &v51[v52 & 0xFFFFFFFFFFFFFFF8];
              v53 = 8 * (v52 >> 3);
              v54 = &v50[8 * (v49 >> 2)];
              do
              {
                v55 = *(_QWORD *)v34;
                v34 += 8;
                *(_QWORD *)v54 = v55;
                v54 += 8;
                v53 -= 8;
              }
              while (v53);
            }
            *(_QWORD *)a1 = v50;
            *(_QWORD *)(a1 + 8) = v51;
            *(_QWORD *)(a1 + 16) = v33;
            *(_QWORD *)(a1 + 24) = &v50[8 * v49];
            if (v37)
            {
              operator delete(v37);
              v33 = *(char **)(a1 + 16);
            }
          }
          else
          {
            v38 = (uint64_t)&v34[-*(_QWORD *)a1] >> 3;
            if (v38 >= -1)
              v39 = v38 + 1;
            else
              v39 = v38 + 2;
            v40 = -(v39 >> 1);
            v41 = v39 >> 1;
            v42 = &v34[-8 * v41];
            v43 = v33 - v34;
            if (v43)
            {
              memmove(&v34[-8 * v41], v34, v43);
              v34 = *(char **)(a1 + 8);
            }
            v33 = &v42[v43];
            *(_QWORD *)(a1 + 8) = &v34[8 * v40];
            *(_QWORD *)(a1 + 16) = v33;
          }
        }
        *(_QWORD *)v33 = v35;
        goto LABEL_24;
      }
      v44 = v31 >> 2;
      if (v30 == *(char **)a1)
        v45 = 1;
      else
        v45 = v44;
      v59 = a1 + 24;
      if (!(v45 >> 61))
      {
        *(_QWORD *)&v57 = operator new(8 * v45);
        *((_QWORD *)&v57 + 1) = v57 + v6;
        *(_QWORD *)&v58 = v57 + v6;
        *((_QWORD *)&v58 + 1) = v57 + 8 * v45;
        v56 = operator new(0x1000uLL);
        sub_22F2C31E8((uint64_t)&v57, &v56);
        for (i = *(_QWORD **)(a1 + 16); i != *(_QWORD **)(a1 + 8); sub_22F2C331C((const void **)&v57, i))
          --i;
        v47 = *(char **)a1;
        v48 = v58;
        *(_OWORD *)a1 = v57;
        *(_OWORD *)(a1 + 16) = v48;
        if (v47)
          operator delete(v47);
        goto LABEL_25;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v8 - 256;
      v12 = *(_QWORD *)v4;
      v10 = v4 + 8;
      v11 = v12;
      *(_QWORD *)(a1 + 8) = v10;
      if (v5 != *(char **)(a1 + 24))
      {
LABEL_23:
        *(_QWORD *)v5 = v11;
LABEL_24:
        *(_QWORD *)(a1 + 16) += 8;
LABEL_25:
        v4 = *(char **)(a1 + 8);
        v9 = *(_QWORD *)(a1 + 32) + *(_QWORD *)(a1 + 40);
        goto LABEL_26;
      }
      v13 = *(char **)a1;
      if ((unint64_t)v10 > *(_QWORD *)a1)
      {
        v14 = (uint64_t)&v10[-*(_QWORD *)a1] >> 3;
        if (v14 >= -1)
          v15 = v14 + 1;
        else
          v15 = v14 + 2;
        v16 = -(v15 >> 1);
        v17 = v15 >> 1;
        v18 = &v10[-8 * v17];
        v19 = v5 - v10;
        if (v5 != v10)
        {
          memmove(&v10[-8 * v17], v10, v5 - v10);
          v5 = *(char **)(a1 + 8);
        }
        v20 = &v5[8 * v16];
        v5 = &v18[v19];
        *(_QWORD *)(a1 + 8) = v20;
        *(_QWORD *)(a1 + 16) = &v18[v19];
        goto LABEL_23;
      }
      if (v5 == v13)
        v21 = 1;
      else
        v21 = (v5 - v13) >> 2;
      if (!(v21 >> 61))
      {
        v22 = (char *)operator new(8 * v21);
        v23 = &v22[8 * (v21 >> 2)];
        v25 = v5 - v10;
        v24 = v5 == v10;
        v5 = v23;
        if (!v24)
        {
          v5 = &v23[v25 & 0xFFFFFFFFFFFFFFF8];
          v26 = 8 * (v25 >> 3);
          v27 = &v22[8 * (v21 >> 2)];
          do
          {
            v28 = *(_QWORD *)v10;
            v10 += 8;
            *(_QWORD *)v27 = v28;
            v27 += 8;
            v26 -= 8;
          }
          while (v26);
        }
        *(_QWORD *)a1 = v22;
        *(_QWORD *)(a1 + 8) = v23;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = &v22[8 * v21];
        if (v13)
        {
          operator delete(v13);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_23;
      }
    }
LABEL_57:
    sub_22E3B3F8C();
  }
LABEL_26:
  result = *a2;
  *(__n128 *)(*(_QWORD *)&v4[(v9 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v9) = *a2;
  ++*(_QWORD *)(a1 + 40);
  return result;
}

uint64_t sub_22E7B3158(uint64_t result)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;

  v1 = (_BYTE *)(result + 7460);
  if (!*(_BYTE *)(result + 7460))
  {
    v2 = result;
    *v1 = 1;
    v3 = *(unsigned int *)(result + 4856);
    if ((_DWORD)v3)
    {
      v7 = *(unsigned int **)(result + 4848);
      v8 = 4 * v3;
      do
      {
        v9 = *v7++;
        result = sub_22E77F870((_QWORD *)v2, v9);
        v8 -= 4;
      }
      while (v8);
    }
    *(_DWORD *)(v2 + 4856) = 0;
    while (*(_QWORD *)(v2 + 8496))
    {
      v4 = *(_QWORD *)(*(_QWORD *)(v2 + 8464) + ((*(_QWORD *)(v2 + 8488) >> 5) & 0x7FFFFFFFFFFFFF8))
         + 16 * *(_QWORD *)(v2 + 8488);
      v5 = *(_QWORD *)v4;
      v6 = *(unsigned __int8 *)(v4 + 8);
      sub_22E7B3238(v2 + 8456);
      result = sub_22E7B3298(*(_QWORD **)(v2 + 128), v5, v6 != 0);
      if ((_DWORD)result)
        result = sub_22E784AB0(v2, v5);
    }
    *v1 = 0;
  }
  return result;
}

void sub_22E7B3238(uint64_t a1)
{
  int64x2_t v1;

  v1 = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_22F45F5B0);
  *(int64x2_t *)(a1 + 32) = v1;
  if (v1.i64[0] >= 0x200uLL)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 256;
  }
}

uint64_t sub_22E7B3298(_QWORD *a1, unint64_t a2, int a3)
{
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t result;
  int v11;
  BOOL v12;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int i;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;

  v6 = *(_DWORD *)(a2 + 28);
  if ((v6 & 0x7F) == 0xA)
  {
    if ((v6 & 0x8000) == 0)
      goto LABEL_11;
  }
  else if ((v6 & 0x7Fu) - 60 > 6 || (sub_22EFBC2B0(a2) & 0xFFFFFFFD) != 0 || (*(_DWORD *)(a2 + 28) & 0x8000) == 0)
  {
    goto LABEL_11;
  }
  if ((*(_BYTE *)(a2 + 8) & 6) != 0)
  {
    v7 = sub_22EFC7594(a2);
    if (v7)
    {
      if (!*(_DWORD *)(v7 + 28) && (sub_22EF736B8(a1, a2) & 1) != 0)
        return 0;
    }
  }
LABEL_11:
  v8 = *(_DWORD *)(a2 + 28);
  v9 = v8 & 0x7F;
  if ((v8 & 0x6F | 0x10) == 0x17)
    return 1;
  v11 = v8 & 0x7E;
  v12 = v11 == 20 || v9 == 10;
  if (v12 || (v9 - 79) < 2)
    return 1;
  if ((v9 - 70) <= 7 && ((1 << (v9 - 70)) & 0xE3) != 0)
  {
    v14 = *(_QWORD *)(a2 + 16);
    v15 = v14 & 0xFFFFFFFFFFFFFFF8;
    if ((v14 & 4) != 0)
      v15 = *(_QWORD *)v15;
    v16 = *(_WORD *)(v15 + 8) & 0x7F;
    if (v16 <= 0x18 && ((1 << v16) & 0x1000006) != 0)
      return 0;
    return v16 - 58 < 0xFFFFFFFA;
  }
  if ((v9 - 67) >= 0xFFFFFFF9)
  {
    result = 0;
    if (v9 == 64 || v9 == 62)
      return result;
    v26 = *(_QWORD *)(a2 + 16);
    v27 = (unint64_t *)(v26 & 0xFFFFFFFFFFFFFFF8);
    v28 = v26 & 0xFFFFFFFFFFFFFFF8;
    if ((v26 & 4) != 0)
      v28 = v27[1];
    v29 = *(_WORD *)(sub_22EFCBB30(v28) + 8) & 0x7F;
    if (v29 != 16 && v29 != 83)
    {
      v39 = v26 & 0xFFFFFFFFFFFFFFF8;
      if ((v26 & 4) != 0)
        v39 = *v27;
      if ((*(_WORD *)(v39 + 8) & 0x7Eu) - 34 > 3)
        return 0;
    }
    if ((v26 & 4) != 0)
      v27 = (unint64_t *)*v27;
    v30 = v27[1] & 0x7F;
    if (v30 == 83)
    {
LABEL_90:
      if (sub_22EFBBF74(a2, v27[6]) != 2)
      {
        sub_22EF95D10(a2);
        return v35 != 0;
      }
      return 1;
    }
    while (1)
    {
      v31 = -40;
      if (v30 > 70)
      {
        if (v30 == 71)
        {
          v31 = -56;
        }
        else if (v30 != 81)
        {
          goto LABEL_78;
        }
      }
      else
      {
        if (v30 > 0x18)
          goto LABEL_77;
        if (v30 == 16)
          goto LABEL_71;
        if (((1 << v30) & 0x1066) != 0)
          goto LABEL_84;
        if (v30 == 24)
        {
LABEL_71:
          v31 = -48;
        }
        else
        {
LABEL_77:
          if (v30 != 70)
          {
LABEL_78:
            v32 = v30 - 52;
            if ((v30 - 33) >= 5)
              v33 = -48;
            else
              v33 = -64;
            if (v32 >= 6)
              v31 = v33;
            else
              v31 = -72;
            goto LABEL_84;
          }
          v31 = -64;
        }
      }
LABEL_84:
      v34 = *(unint64_t *)((char *)v27 + v31 + 16);
      v27 = (unint64_t *)(v34 & 0xFFFFFFFFFFFFFFF8);
      if ((v34 & 4) != 0)
        v27 = (unint64_t *)*v27;
      v30 = v27[1] & 0x7F;
      if (v30 == 83)
        goto LABEL_90;
    }
  }
  if ((v11 - 58) >= 0xFFFFFFFA)
  {
    v36 = *(_QWORD *)(a2 + 80);
    if ((v36 & 0x8000000) != 0 || !*(_QWORD *)(a2 + 128))
      v37 = (v36 >> 29) & 1;
    else
      LODWORD(v37) = 1;
    return v37 | a3;
  }
  v18 = a2;
  if (v9 != 83)
  {
    v19 = *(_QWORD *)(a2 + 16);
    v20 = v19 & 0xFFFFFFFFFFFFFFF8;
    if ((v19 & 4) != 0)
      v20 = *(_QWORD *)v20;
    for (i = *(_WORD *)(v20 + 8) & 0x7F; i != 83; i = *(_WORD *)(v20 + 8) & 0x7F)
    {
      v22 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v22 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_48;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_47;
        if (i == 16)
          goto LABEL_41;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_54;
        if (i == 24)
        {
LABEL_41:
          v22 = -48;
        }
        else
        {
LABEL_47:
          if (i != 70)
          {
LABEL_48:
            v23 = i - 52;
            if ((i - 33) >= 5)
              v24 = -48;
            else
              v24 = -64;
            if (v23 >= 6)
              v22 = v24;
            else
              v22 = -72;
            goto LABEL_54;
          }
          v22 = -64;
        }
      }
LABEL_54:
      v25 = *(_QWORD *)(v20 + v22 + 16);
      v20 = v25 & 0xFFFFFFFFFFFFFFF8;
      if ((v25 & 4) != 0)
        v20 = *(_QWORD *)v20;
    }
    v18 = v20 - 40;
  }
  v38 = *(_QWORD *)(*(_QWORD *)(v18 + 88) + 16048);
  if (!v38)
    return 0;
  result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v38 + 104))(v38, a2);
  if ((_DWORD)result != 1)
    return 0;
  return result;
}

void sub_22E7B36A8(int32x2_t *a1, uint64_t a2)
{
  int v4;
  unint64_t v5;
  int32x2_t v6;
  unsigned __int32 v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  void *v13;
  char v14;
  std::string::size_type *v15;
  std::string::size_type v16;
  std::string::size_type v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  void **v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  BOOL v53;
  int v54;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  char v61;
  char v62;
  std::string::size_type size;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  BOOL v81;
  unint64_t v82;
  std::string::size_type v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  unint64_t *v93;
  int v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  unsigned int *v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  int v113;
  int v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unsigned int v127;
  uint64_t v128;
  unsigned int v129;
  BOOL v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int v147;
  char v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  std::string::size_type v162;
  int32x2_t *v163;
  unsigned int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int v173;
  unsigned __int8 v174;
  void **v175;
  int v176;
  int32x2_t v177;
  unsigned __int32 v178;
  unsigned int v179;
  uint64_t v180;
  int v181;
  int v182;
  unsigned int v183;
  void *v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t *v187;
  unint64_t v188;
  char v189;
  _QWORD *v190;
  __int32 v191;
  unsigned int v192;
  uint64_t v193;
  uint64_t v194;
  unsigned int *v195;
  unsigned int v196;
  uint64_t v197;
  unsigned int *v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  unsigned int v202;
  uint64_t v203;
  uint64_t v204;
  unsigned int v205;
  unint64_t v206;
  unint64_t *v207;
  uint64_t *v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t *v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unsigned int *v216;
  __int16 v217;
  uint64_t v218;
  int v219;
  __int8 v220;
  __int8 *v221;
  unint64_t v222;
  uint64_t *v223;
  uint64_t v224;
  _BOOL8 v225;
  std::string::size_type *v226;
  uint64_t *v227;
  uint64_t *v228;
  int v229;
  unint64_t v230;
  char v231;
  uint64_t *v232;
  std::string v233;
  std::string::size_type v234;
  int v235;
  int v236;
  int v237;
  int v238;
  uint64_t v239;
  __int16 v240;
  char *v241;
  void *v242;
  void *v243;
  uint64_t v244[2];
  std::string v245;
  __int128 v246;
  __int128 v247;
  __int128 v248[2];
  __int128 v249;
  __int128 v250;
  __int128 v251;
  void *v252;
  uint64_t v253;
  std::string::size_type v254;
  unsigned int v255;
  void *v256;
  uint64_t v257;
  _BYTE v258[512];
  void *v259;
  uint64_t v260;
  _BYTE v261[32];
  void *v262;
  uint64_t v263;
  _BYTE v264[32];
  _OWORD v265[3];
  __n128 v266;
  unint64_t v267;
  int v268;
  __int16 v269;
  char v270;
  __int16 v271;
  uint64_t v272;

  v272 = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 8);
  v5 = *(_QWORD *)a2;
  v220 = a1[916].i8[2];
  v221 = (char *)&a1[916] + 2;
  a1[916].i8[2] = 1;
  v6 = a1[361];
  v7 = a1[363].u32[0];
  if (v7)
  {
    v8 = (v7 - 1) & (37 * v4);
    v9 = *(_QWORD *)&v6 + 56 * v8;
    v10 = *(_DWORD *)v9;
    if (v4 == *(_DWORD *)v9)
      goto LABEL_8;
    v11 = 1;
    while (v10 != -1)
    {
      v12 = v8 + v11++;
      v8 = v12 & (v7 - 1);
      v9 = *(_QWORD *)&v6 + 56 * v8;
      v10 = *(_DWORD *)v9;
      if (v4 == *(_DWORD *)v9)
        goto LABEL_8;
    }
  }
  v9 = *(_QWORD *)&v6 + 56 * v7;
LABEL_8:
  v262 = v264;
  v263 = 0x800000000;
  if (v9 != *(_QWORD *)&v6 + 56 * v7)
  {
    v259 = v261;
    v260 = 0x200000000;
    if (*(_DWORD *)(v9 + 16))
      sub_22E78E918((uint64_t)&v259, v9 + 8);
    v13 = *(void **)(v9 + 8);
    if (v13 != (void *)(v9 + 24))
      free(v13);
    *(_DWORD *)v9 = -2;
    a1[362] = vadd_s32(a1[362], (int32x2_t)0x1FFFFFFFFLL);
    if (*(_BYTE *)(a2 + 12))
      v14 = 1;
    else
      v14 = sub_22E7B3298(*(_QWORD **)&a1[16], v5, 0);
    v15 = (std::string::size_type *)v259;
    if ((_DWORD)v260)
    {
      v226 = (std::string::size_type *)((char *)v259 + 16 * v260);
      v229 = v4;
      while (1)
      {
        v231 = v14;
        v16 = *v15;
        v17 = v15[1];
        v18 = *v15 + 2720;
        v19 = 8 * *(_QWORD *)(*v15 + 2736) - *(unsigned int *)(*v15 + 2752);
        v244[0] = v18;
        v244[1] = v19;
        *(_QWORD *)(v16 + 2736) = (v17 >> 3) & 0x1FFFFFFFFFFFFFF8;
        *(_DWORD *)(v16 + 2752) = 0;
        if ((v17 & 0x3F) != 0)
        {
          sub_22E745EC8(v18, v17 & 0x3F, (uint64_t)&v252);
          if ((v253 & 1) != 0)
          {
            if (v252)
              break;
          }
        }
        sub_22E745EC8(v18, *(_DWORD *)(v16 + 2756), (uint64_t)&v252);
        if ((v253 & 1) != 0)
        {
          v266.n128_u64[0] = (unint64_t)"ASTReader::loadDeclUpdateRecords failed reading code: ";
          v271 = 259;
          v242 = v252;
          v175 = &v242;
          goto LABEL_273;
        }
        v252 = (void *)a1[16];
        v253 = (uint64_t)a1;
        v254 = v16;
        v256 = v258;
        v255 = 0;
        v257 = 0x4000000000;
        llvm::BitstreamCursor::readRecord();
        if ((BYTE8(v265[0]) & 1) != 0)
        {
          *(_QWORD *)&v248[0] = "ASTReader::loadDeclUpdateRecords failed reading rec code: ";
          LOWORD(v249) = 259;
          v241 = 0;
          sub_22F2432A8(&v241, &v233);
          LOWORD(v246) = 260;
          v245.__r_.__value_.__r.__words[0] = (std::string::size_type)&v233;
          sub_22F2BB324((uint64_t *)v248, (uint64_t *)&v245, (uint64_t)&v266);
          goto LABEL_271;
        }
        v233.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
        v233.__r_.__value_.__l.__size_ = (std::string::size_type)&v252;
        v233.__r_.__value_.__r.__words[2] = v16;
        v234 = v17;
        v235 = v4;
        v236 = 0;
        v237 = 0;
        v238 = 0;
        v239 = 0;
        v240 = 0;
        v20 = v255;
        v21 = v257;
        if (v257 > v255)
        {
          v22 = (uint64_t)&v252;
          v23 = &v255;
          v24 = &v256;
          while (1)
          {
            v25 = v20 + 1;
            *(_DWORD *)(v22 + 24) = v20 + 1;
            v26 = *(_QWORD *)(v22 + 32);
            switch(*(_QWORD *)(v26 + 8 * v20))
            {
              case 0u:
                v27 = *(_QWORD **)(v22 + 8);
                v28 = sub_22E779F8C((uint64_t)v27, *(_QWORD *)(v22 + 16), (uint64_t)v24, v23);
                v29 = sub_22E77F870(v27, v28);
                sub_22EFD1444(v5, v29);
                goto LABEL_153;
              case 1u:
                v70 = sub_22E779F8C(*(_QWORD *)(v22 + 8), *(_QWORD *)(v22 + 16), (uint64_t)v24, v23);
                v71 = v263;
                if (v263 >= (unint64_t)HIDWORD(v263))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v71 = v263;
                }
                *((_DWORD *)v262 + v71) = v70;
                LODWORD(v263) = v263 + 1;
                goto LABEL_153;
              case 2u:
                v49 = *(_QWORD **)(v22 + 8);
                v50 = sub_22E779F8C((uint64_t)v49, *(_QWORD *)(v22 + 16), (uint64_t)v24, v23);
                v51 = sub_22E77F870(v49, v50);
                v52 = *(_DWORD *)(*(_QWORD *)(v22 + 16) + 4);
                v53 = v52 > 5;
                v54 = (1 << v52) & 0x23;
                if (v53 || v54 == 0)
                {
                  if (v5 && (*(_DWORD *)(v5 + 28) & 0x7F) == 0x53)
                  {
                    *(_QWORD *)(v5 + 96) = v51;
                  }
                  else
                  {
                    v142 = v5;
                    if ((*(_BYTE *)(v5 + 80) & 3) == 0)
                      v142 = *(_QWORD *)(v5 + 104) & 0xFFFFFFFFFFFFFFF8;
                    *(_QWORD *)(v142 + 104) = *(_QWORD *)(v142 + 104) & 7 | v51;
                  }
                }
                goto LABEL_153;
              case 3u:
                v266.n128_u64[0] = v5;
                if (*(_QWORD *)sub_22E794D50(v233.__r_.__value_.__r.__words[0] + 3768, (uint64_t *)&v266))
                  goto LABEL_194;
                v56 = *(unsigned int *)(v22 + 24);
                *(_DWORD *)(v22 + 24) = v56 + 1;
                if (*(_QWORD *)(*(_QWORD *)(v22 + 32) + 8 * v56))
                {
                  *(_QWORD *)(v5 + 80) |= 0x10000uLL;
                  v57 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v5 + 112) + 104), *(_QWORD *)(v5 + 112));
                  v58 = v57;
                  if (v57)
                  {
                    do
                    {
                      v59 = v57;
                      v61 = *(_BYTE *)(v57 + 104);
                      v60 = (uint64_t *)(v57 + 104);
                      if ((v61 & 3) != 0)
                        break;
                      v57 = sub_22E3CD31C(v60, v59);
                      if (v59 == v5)
                        break;
                    }
                    while (v57);
                    if (v58 != v5 && v59 == v5)
                    {
                      do
                      {
                        v62 = *(_BYTE *)(v58 + 104);
                        *(_QWORD *)(v58 + 80) |= 0x10000uLL;
                        if ((v62 & 3) != 0)
                          v58 = 0;
                        else
                          v58 = sub_22E3CD31C((uint64_t *)(v58 + 104), v58);
                      }
                      while (v58 != v5);
                    }
                  }
                }
                size = v233.__r_.__value_.__l.__size_;
                v64 = *(_QWORD *)(v233.__r_.__value_.__l.__size_ + 8);
                v65 = *(_QWORD *)(v233.__r_.__value_.__l.__size_ + 16);
                v66 = *(unsigned int *)(v233.__r_.__value_.__l.__size_ + 24);
                *(_DWORD *)(v233.__r_.__value_.__l.__size_ + 24) = v66 + 1;
                HIDWORD(v67) = *(_QWORD *)(*(_QWORD *)(size + 32) + 8 * v66);
                LODWORD(v67) = HIDWORD(v67);
                *(_DWORD *)(v5 + 64) = sub_22E77BAB4(v64, v65, v67 >> 1);
                sub_22E794BEC((uint64_t *)&v233, v5);
                goto LABEL_153;
              case 4u:
                *v23 = v20 + 2;
                *(_DWORD *)(v5 + 96) = *(_DWORD *)(v5 + 96) & 0xFFFFDFFF | ((*(_QWORD *)(v26 + 8 * v25) & 1) << 13);
                v37 = *(unsigned int *)(v22 + 24);
                *(_DWORD *)(v22 + 24) = v37 + 1;
                *(_DWORD *)(v5 + 96) = *(_DWORD *)(v5 + 96) & 0xFFFFBFFF | ((*(_QWORD *)(*(_QWORD *)(v22 + 32) + 8 * v37) & 1) << 14);
                v38 = *(unsigned int *)(v22 + 24);
                *(_DWORD *)(v22 + 24) = v38 + 1;
                v39 = *(_QWORD *)(*(_QWORD *)(v22 + 32) + 8 * v38);
                if (v39 && !sub_22EFBC5B4(v5))
                {
                  v40 = *(_QWORD *)(v22 + 8);
                  if (*(_DWORD *)(v40 + 10984) == 3)
                  {
                    v169 = *(unsigned int *)(v40 + 10848);
                    v41 = *(_QWORD *)(*(_QWORD *)(v40 + 10840) + 8 * v169 - 8);
                    *(_DWORD *)(v40 + 10848) = v169 - 1;
                  }
                  else
                  {
                    v41 = sub_22E7B94C8(v40, *(_QWORD *)(v22 + 16));
                  }
                  sub_22EFBC9E4(v5, v41);
                  if (v39 != 1)
                  {
                    v42 = (_BYTE *)sub_22EFBCE18(v5);
                    *v42 = *v42 & 0xF3 | (2 * v39) & 0xC;
                  }
                }
                goto LABEL_153;
              case 5u:
                v72 = *(_QWORD *)(v22 + 8);
                v73 = *(_QWORD *)(v22 + 16);
                *v23 = v20 + 2;
                HIDWORD(v74) = *(_QWORD *)(v26 + 8 * v25);
                LODWORD(v74) = HIDWORD(v74);
                v75 = sub_22E77BAB4(v72, v73, v74 >> 1);
                v76 = (*(_DWORD *)(v5 + 28) & 0x7F) - 67;
                if (v5 && v76 >= 0xFFFFFFFE)
                {
                  *(_DWORD *)(v5 + 416) = v75;
                }
                else if (v5 && v76 >= 0xFFFFFFF9)
                {
                  *(_DWORD *)(sub_22EFBE104(v5) + 8) = v75;
                }
                else
                {
                  v97 = *(_QWORD *)(v5 + 144) & 0xFFFFFFFFFFFFFFF8;
                  if ((*(_QWORD *)(v5 + 144) & 6) == 4 && v97)
                    *(_DWORD *)(v97 + 40) = v75;
                  else
                    *(_DWORD *)(v97 + 8) = v75;
                }
                goto LABEL_153;
              case 6u:
                v78 = *(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v5 + 32))(v5) + 128);
                if (v78)
                {
                  if (*(_QWORD *)(v78 + 88) == v5)
                    v79 = sub_22E7B6870(*(_QWORD *)(v233.__r_.__value_.__r.__words[0] + 3184), *(_DWORD *)(v233.__r_.__value_.__r.__words[0] + 3200), v78, &v266);
                  else
                    v79 = 0;
                }
                else
                {
                  v79 = 1;
                }
                v99 = (uint64_t *)(v22 + 32);
                v98 = *(_QWORD *)(v22 + 32);
                v101 = (unsigned int *)(v22 + 24);
                v100 = *(unsigned int *)(v22 + 24);
                *(_DWORD *)(v22 + 24) = v100 + 1;
                *(_QWORD *)(v5 + 72) = *(_QWORD *)(v5 + 72) & 0xFFFFFFFBFFFFFFFFLL | ((unint64_t)(*(_QWORD *)(v98 + 8 * v100) != 0) << 34);
                v102 = *(unsigned int *)(v22 + 24);
                *(_DWORD *)(v22 + 24) = v102 + 1;
                *(_QWORD *)(v5 + 72) = *(_QWORD *)(v5 + 72) & 0xFFFFFFE7FFFFFFFFLL | ((*(_QWORD *)(*(_QWORD *)(v22 + 32)
                                                                                                 + 8 * v102) & 3) << 35);
                sub_22E79DEF0((uint64_t *)&v233, (_QWORD *)v5, 1);
                v103 = *(unsigned int *)(v22 + 24);
                v104 = v103 + 1;
                *(_DWORD *)(v22 + 24) = v103 + 1;
                v105 = *(_QWORD *)(v22 + 32);
                v106 = *(_QWORD *)(v105 + 8 * v103);
                if (v106)
                {
                  v107 = v234 - v106;
                  v108 = v234 == v106 ? 0 : v79;
                  if (v108 == 1)
                  {
                    sub_22E769798(*(_QWORD *)(v22 + 8), *(_QWORD *)(v22 + 16), *(_QWORD *)(v22 + 16) + 2720, v107, v5 + 64);
                    v163 = (int32x2_t *)v233.__r_.__value_.__r.__words[0];
                    v266.n128_u64[0] = 0;
                    if (sub_22E7B6870(*(_QWORD *)(v233.__r_.__value_.__r.__words[0] + 3184), *(_DWORD *)(v233.__r_.__value_.__r.__words[0] + 3200), v78, &v266))
                    {
                      *(_QWORD *)v266.n128_u64[0] = -8192;
                      v163[399] = vadd_s32(v163[399], (int32x2_t)0x1FFFFFFFFLL);
                    }
                    v104 = *v101;
                    v105 = *v99;
                  }
                }
                v109 = *(_QWORD *)(v105 + 8 * v104);
                v110 = *(_QWORD *)(v22 + 8);
                v111 = *(_QWORD *)(v22 + 16);
                *(_DWORD *)(v22 + 24) = v104 + 2;
                HIDWORD(v112) = *(_QWORD *)(v105 + 8 * (v104 + 1));
                LODWORD(v112) = HIDWORD(v112);
                v113 = sub_22E77BAB4(v110, v111, v112 >> 1);
                v114 = v113;
                v115 = *(_QWORD *)(v5 + 136);
                if ((v115 & 4) != 0)
                {
                  v116 = v115 & 0xFFFFFFFFFFFFFFF8;
                  if (v116)
                  {
                    *(_QWORD *)v116 = *(_QWORD *)v116 & 0xFFFFFFFFFFFFFFF9 | (2 * v109 + 0x1FFFFFFFELL) & 0x1FFFFFFFELL;
                    *(_DWORD *)(v116 + 8) = v113;
                    goto LABEL_148;
                  }
                }
                sub_22EFD57A8(v5, v109);
                *(_DWORD *)(v5 + 176) = v114;
                v117 = *v101;
                *v101 = v117 + 1;
                if (!*(_QWORD *)(*v99 + 8 * v117))
                  goto LABEL_148;
                v118 = *(_QWORD **)(v22 + 8);
                v119 = sub_22E779F8C((uint64_t)v118, *(_QWORD *)(v22 + 16), v22 + 32, (_DWORD *)(v22 + 24));
                v120 = sub_22E77F870(v118, v119);
                v266.n128_u64[0] = (unint64_t)&v267;
                v266.n128_u64[1] = 0x800000000;
                sub_22E7866D0(v22, (uint64_t)&v266, 0);
                sub_22EFEB554(*(_QWORD *)(v233.__r_.__value_.__r.__words[0] + 128), (__n128 *)v266.n128_u64[0], v266.n128_u32[2]);
                v122 = v121;
                v123 = *(_QWORD *)(v5 + 152);
                if (v123 >= 8 && (v123 & 4) != 0)
                  goto LABEL_146;
                if (v5)
                {
                  v124 = v5;
                  if ((*(_DWORD *)(v5 + 28) & 0x7F) == 0x53)
                    goto LABEL_145;
                }
                v125 = *(_QWORD *)(v5 + 16);
                while (2)
                {
                  v126 = v125 & 0xFFFFFFFFFFFFFFF8;
                  if ((v125 & 4) != 0)
                    v126 = *(_QWORD *)v126;
                  v127 = *(_WORD *)(v126 + 8) & 0x7F;
                  if (v127 != 83)
                  {
                    v128 = -40;
                    if ((*(_WORD *)(v126 + 8) & 0x7Fu) > 0x46)
                    {
                      if (v127 == 71)
                      {
                        v128 = -56;
                      }
                      else if (v127 != 81)
                      {
                        goto LABEL_135;
                      }
                    }
                    else
                    {
                      if (v127 > 0x18)
                        goto LABEL_134;
                      if (v127 == 16)
                        goto LABEL_128;
                      if (((1 << v127) & 0x1066) == 0)
                      {
                        if (v127 == 24)
                        {
LABEL_128:
                          v128 = -48;
                        }
                        else
                        {
LABEL_134:
                          if (v127 == 70)
                          {
                            v128 = -64;
                          }
                          else
                          {
LABEL_135:
                            v129 = v127 - 52;
                            v130 = v127 - 33 >= 5;
                            v131 = -64;
                            if (v130)
                              v131 = -48;
                            v130 = v129 >= 6;
                            v128 = -72;
                            if (v130)
                              v128 = v131;
                          }
                        }
                      }
                    }
                    v125 = *(_QWORD *)(v126 + v128 + 16);
                    continue;
                  }
                  break;
                }
                v124 = v126 - 40;
LABEL_145:
                v132 = sub_22E3CD3D4(*(_QWORD *)(v124 + 88) + 2032, 16, 3);
                *(_QWORD *)v132 = v120;
                *(_QWORD *)(v132 + 8) = v122;
                *(_QWORD *)(v5 + 152) = v132 | 4;
LABEL_146:
                if ((unint64_t *)v266.n128_u64[0] != &v267)
                  free((void *)v266.n128_u64[0]);
LABEL_148:
                v133 = *(unsigned int *)(v22 + 24);
                *(_DWORD *)(v22 + 24) = v133 + 1;
                *(_DWORD *)(v5 + 72) = *(_DWORD *)(v5 + 72) & 0xFFFF1FFF | ((*(_QWORD *)(*(_QWORD *)(v22 + 32) + 8 * v133) & 7) << 13);
                v134 = *(_QWORD *)(v22 + 8);
                v135 = *(_QWORD *)(v22 + 16);
                v136 = *(unsigned int *)(v22 + 24);
                *(_DWORD *)(v22 + 24) = v136 + 1;
                HIDWORD(v137) = *(_QWORD *)(*(_QWORD *)(v22 + 32) + 8 * v136);
                LODWORD(v137) = HIDWORD(v137);
                *(_DWORD *)(v5 + 24) = sub_22E77BAB4(v134, v135, v137 >> 1);
                v138 = *(_QWORD *)(v22 + 8);
                v139 = *(_QWORD *)(v22 + 16);
                v140 = *(unsigned int *)(v22 + 24);
                *(_DWORD *)(v22 + 24) = v140 + 1;
                HIDWORD(v137) = *(_QWORD *)(*(_QWORD *)(v22 + 32) + 8 * v140);
                LODWORD(v137) = HIDWORD(v137);
                *(_DWORD *)(v5 + 56) = sub_22E77BAB4(v138, v139, v137 >> 1);
                *(_QWORD *)(v5 + 112) = sub_22E7868D0(*(_QWORD *)(v22 + 8), *(_QWORD *)(v22 + 16), (_QWORD *)(v22 + 32), (_DWORD *)(v22 + 24));
                v141 = *(unsigned int *)(v22 + 24);
                *(_DWORD *)(v22 + 24) = v141 + 1;
                if (*(_QWORD *)(*(_QWORD *)(v22 + 32) + 8 * v141))
                {
                  v266.n128_u64[0] = (unint64_t)&v267;
                  v266.n128_u64[1] = 0x400000000;
                  sub_22E798860(v22, (uint64_t)&v266);
                  if ((*(_BYTE *)(v5 + 29) & 1) == 0)
                    sub_22EFCA91C(v5, (uint64_t)&v266, *(_QWORD *)(v233.__r_.__value_.__r.__words[0] + 128));
LABEL_151:
                  if ((unint64_t *)v266.n128_u64[0] != &v267)
                    free((void *)v266.n128_u64[0]);
                }
                goto LABEL_153;
              case 7u:
                v68 = *(_QWORD *)(v22 + 8);
                if (*(_DWORD *)(v68 + 10984) == 3)
                {
                  v167 = *(unsigned int *)(v68 + 10848);
                  v69 = *(_QWORD *)(*(_QWORD *)(v68 + 10840) + 8 * v167 - 8);
                  *(_DWORD *)(v68 + 10848) = v167 - 1;
                }
                else
                {
                  v69 = sub_22E7B94C8(*(_QWORD *)(v22 + 8), *(_QWORD *)(v22 + 16));
                }
                if ((*(_DWORD *)(v5 + 96) & 0x600) == 0x400)
                {
                  *(_DWORD *)(v5 + 96) |= 0x600u;
                  *(_QWORD *)(v5 + 88) = v69 & 0xFFFFFFFFFFFFFFFBLL;
                }
                goto LABEL_153;
              case 8u:
                v88 = *(_QWORD *)(v22 + 8);
                if (*(_DWORD *)(v88 + 10984) == 3)
                {
                  v168 = *(unsigned int *)(v88 + 10848);
                  v89 = *(_QWORD *)(*(_QWORD *)(v88 + 10840) + 8 * v168 - 8);
                  *(_DWORD *)(v88 + 10848) = v168 - 1;
                }
                else
                {
                  v89 = sub_22E7B94C8(*(_QWORD *)(v22 + 8), *(_QWORD *)(v22 + 16));
                }
                v90 = *(_QWORD *)(v5 + 72);
                v91 = v90 & 3;
                if ((v90 & 3) == 0 || v91 == 3)
                  goto LABEL_153;
                v93 = (unint64_t *)(v90 & 0xFFFFFFFFFFFFFFFCLL);
                v94 = *(_DWORD *)(v5 + 68);
                v95 = v90 & 0xFFFFFFFFFFFFFFFCLL;
                if ((v94 & 1) != 0)
                  v95 = *v93;
                if (v95)
                  goto LABEL_153;
                if (v89)
                {
                  if ((v94 & 1) != 0)
                  {
                    *v93 = v89;
                    goto LABEL_153;
                  }
                  v93 = (unint64_t *)(v90 & 3 | v89);
                }
                else if ((v94 & 1) != 0)
                {
                  if (v91 != 3)
                    v93 = (unint64_t *)(v93[1] & 0xFFFFFFFFFFFFFFFCLL);
                }
                else
                {
                  v93 = 0;
                }
                *(_QWORD *)(v5 + 72) = v93;
                goto LABEL_153;
              case 9u:
                v43 = *(_QWORD **)(v22 + 8);
                v44 = sub_22E779F8C((uint64_t)v43, *(_QWORD *)(v22 + 16), (uint64_t)v24, v23);
                v45 = sub_22E77F870(v43, v44);
                v46 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v5 + 32))(v5);
                v47 = *(_QWORD *)(v22 + 8);
                if (*(_DWORD *)(v47 + 10984) == 3)
                {
                  v166 = *(unsigned int *)(v47 + 10848);
                  v48 = *(_QWORD *)(*(_QWORD *)(v47 + 10840) + 8 * v166 - 8);
                  *(_DWORD *)(v47 + 10848) = v166 - 1;
                }
                else
                {
                  v48 = sub_22E7B94C8(v47, *(_QWORD *)(v22 + 16));
                }
                if (!*(_QWORD *)(v46 + 160))
                {
                  *(_QWORD *)(v46 + 160) = v45;
                  *(_QWORD *)(v46 + 168) = v48;
                }
                goto LABEL_153;
              case 0xAu:
                v266.n128_u64[0] = (unint64_t)&v267;
                v266.n128_u64[1] = 0x800000000;
                sub_22E791EA4(v22, (unsigned int *)&v266, (uint64_t)v265);
                v80 = *(_QWORD *)(*(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFFFF0);
                if (v80)
                  v81 = *(_BYTE *)(v80 + 16) == 26;
                else
                  v81 = 0;
                if (!v81)
                  v80 = sub_22F10CF48(v80);
                v82 = *(_QWORD *)(v80 + 16);
                if (((v82 >> 54) & 0xF) - 9 <= 1)
                {
                  v83 = v233.__r_.__value_.__r.__words[0];
                  v84 = *(_QWORD *)(v233.__r_.__value_.__r.__words[0] + 128);
                  v85 = *(_QWORD *)(v80 + 24);
                  v86 = (uint64_t *)(v80 + 40);
                  v87 = (unsigned __int16)(v82 >> 38);
                  sub_22E4913B4(v80, (uint64_t)&v245);
                  v251 = v247;
                  v248[0] = *(_OWORD *)&v245.__r_.__value_.__l.__data_;
                  v249 = v265[1];
                  v250 = v265[2];
                  v248[1] = v265[0];
                  *(_QWORD *)(v5 + 48) = sub_22EF63D8C(v84, v85, v86, v87, v248, 0);
                  *(_QWORD *)&v248[0] = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v5 + 32))(v5);
                  *((_QWORD *)&v248[0] + 1) = v5;
                  sub_22E7B1C08(v83 + 3208, (uint64_t *)v248);
                }
                goto LABEL_151;
              case 0xBu:
                if (v21 <= v25)
                {
                  v36 = 0;
                }
                else
                {
                  v34 = *(_QWORD *)(v22 + 8);
                  v33 = *(_QWORD *)(v22 + 16);
                  *v23 = v20 + 2;
                  v35 = sub_22E77A180(v34, v33, *(_QWORD *)(v26 + 8 * v25));
                  v36 = sub_22E77D8C8(v34, v35);
                }
                v96 = v233.__r_.__value_.__r.__words[0] + 3360;
                v266.n128_u64[0] = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v5 + 32))(v5);
                v266.n128_u64[1] = v36;
                sub_22E787084(v96, (uint64_t *)&v266);
                goto LABEL_153;
              case 0xCu:
                sub_22EFC9100(v5, *(_QWORD *)(v233.__r_.__value_.__r.__words[0] + 128));
                goto LABEL_153;
              case 0xDu:
                v77 = *(_QWORD *)(v233.__r_.__value_.__r.__words[0] + 128);
                *v23 = v20 + 2;
                v31 = *(_QWORD *)(v26 + 8 * v25);
                v266.n128_u64[0] = v5;
                if (v31 < 2)
                  goto LABEL_153;
                v32 = (_DWORD *)sub_22F36F0B0(v77 + 1800, v266.n128_u64);
                goto LABEL_75;
              case 0xEu:
                v30 = *(_QWORD *)(v233.__r_.__value_.__r.__words[0] + 128);
                *v23 = v20 + 2;
                v31 = *(_QWORD *)(v26 + 8 * v25);
                v266.n128_u64[0] = v5;
                if (v31 < 2)
                  goto LABEL_153;
                v32 = (_DWORD *)sub_22F26BBB0(v30 + 1848, v266.n128_u64);
LABEL_75:
                *v32 = v31;
                goto LABEL_153;
              case 0xFu:
                v159 = *(_QWORD *)(v233.__r_.__value_.__r.__words[0] + 128);
                v160 = sub_22E7868D0(*(_QWORD *)(v22 + 8), *(_QWORD *)(v22 + 16), v24, v23);
                v266 = 0uLL;
                v267 = v160;
                v268 = 0;
                v270 = 126;
                v269 = 478;
                v152 = sub_22F396964(v159, &v266);
                goto LABEL_167;
              case 0x10u:
                *v23 = v20 + 2;
                v153 = *(_QWORD *)(v26 + 8 * v25);
                v154 = *(_QWORD *)(v22 + 8);
                if (*(_DWORD *)(v154 + 10984) == 3)
                {
                  v171 = *(_QWORD *)(v154 + 10840);
                  v172 = *(unsigned int *)(v154 + 10848);
                  v155 = *(_QWORD *)(v171 + 8 * v172 - 8);
                  v173 = v172 - 1;
                  *(_DWORD *)(v154 + 10848) = v173;
                }
                else
                {
                  v155 = sub_22E7B94C8(v154, *(_QWORD *)(v22 + 16));
                  v154 = *(_QWORD *)(v22 + 8);
                  if (*(_DWORD *)(v154 + 10984) != 3)
                  {
                    v156 = sub_22E7B94C8(v154, *(_QWORD *)(v22 + 16));
                    v154 = *(_QWORD *)(v22 + 8);
                    goto LABEL_165;
                  }
                  v171 = *(_QWORD *)(v154 + 10840);
                  v173 = *(_DWORD *)(v154 + 10848);
                }
                v156 = *(_QWORD *)(v171 + 8 * v173 - 8);
                *(_DWORD *)(v154 + 10848) = v173 - 1;
LABEL_165:
                v157 = sub_22E7868D0(v154, *(_QWORD *)(v22 + 16), (_QWORD *)(v22 + 32), (_DWORD *)(v22 + 24));
                v158 = *(_QWORD *)(v233.__r_.__value_.__r.__words[0] + 128);
                v266 = 0uLL;
                v267 = v157;
                v268 = 0;
                v270 = 126;
                v269 = 478;
                v152 = sub_22F395B80(v158, v153, v155, v156, &v266);
LABEL_167:
                sub_22EFCA95C(v5, v152);
                goto LABEL_153;
              case 0x11u:
                v143 = *(_QWORD *)(v26 + 8 * v25);
                *v23 = v20 + 3;
                v144 = *(_QWORD *)(v22 + 8);
                v218 = *(_QWORD *)(v26 + 8 * (v20 + 2));
                v219 = v143;
                if (*(_DWORD *)(v144 + 10984) == 3)
                {
                  v170 = *(unsigned int *)(v144 + 10848);
                  v145 = *(_QWORD *)(*(_QWORD *)(v144 + 10840) + 8 * v170 - 8);
                  *(_DWORD *)(v144 + 10848) = v170 - 1;
                }
                else
                {
                  v145 = sub_22E7B94C8(v144, *(_QWORD *)(v22 + 16));
                  v26 = *(_QWORD *)(v22 + 32);
                  v144 = *(_QWORD *)(v22 + 8);
                }
                v147 = *(_DWORD *)(v22 + 24);
                v146 = v22 + 24;
                v148 = *(_QWORD *)(v26 + 8 * v147) != 0;
                *(_DWORD *)v146 = v147 + 2;
                v149 = *(_QWORD *)(v26 + 8 * (v147 + 1));
                v150 = *(_QWORD *)(v233.__r_.__value_.__r.__words[0] + 128);
                v151 = sub_22E7868D0(v144, *(_QWORD *)(v146 - 8), (_QWORD *)(v146 + 8), (_DWORD *)v146);
                v266 = 0uLL;
                v267 = v151;
                v268 = 0;
                v270 = 126;
                v269 = 478;
                v152 = sub_22F396338(v150, v219, v218, v145, v148, v149, &v266);
                goto LABEL_167;
              case 0x12u:
                if (v21 == v25)
                {
                  v161 = 0;
                  v266.n128_u64[0] = v5;
                  v162 = v233.__r_.__value_.__r.__words[0];
LABEL_183:
                  v165 = v5;
                  goto LABEL_184;
                }
                *v23 = v20 + 2;
                v164 = sub_22E76C40C(*(_QWORD *)(v22 + 8), *(_QWORD *)(v22 + 16), *(_QWORD *)(v26 + 8 * v25));
                v266.n128_u64[0] = v5;
                v162 = v233.__r_.__value_.__r.__words[0];
                if (!v164)
                {
                  v161 = 0;
                  goto LABEL_183;
                }
                if (*(_DWORD *)(v233.__r_.__value_.__r.__words[0] + 4208) >= v164)
                {
                  v161 = *(_QWORD *)(*(_QWORD *)(v233.__r_.__value_.__r.__words[0] + 4200) + 8 * (v164 - 1));
                  goto LABEL_183;
                }
                sub_22E769C10((uint64_t)v233.__r_.__value_.__l.__data_, "submodule ID out of range in AST file", 0x25uLL);
                v161 = 0;
                v165 = v266.n128_u64[0];
LABEL_184:
                sub_22F367D88(*(_QWORD *)(v162 + 128), v165, v161, 1);
                sub_22E77A874((_QWORD *)(v162 + 3920), &v266);
LABEL_153:
                v22 = v233.__r_.__value_.__l.__size_;
                v24 = (void **)(v233.__r_.__value_.__l.__size_ + 32);
                v23 = (unsigned int *)(v233.__r_.__value_.__l.__size_ + 24);
                v20 = *(_DWORD *)(v233.__r_.__value_.__l.__size_ + 24);
                v21 = *(_DWORD *)(v233.__r_.__value_.__l.__size_ + 40);
                if (v21 <= v20)
                  goto LABEL_194;
                break;
              case 0x13u:
                v266.n128_u64[0] = (unint64_t)&v267;
                v266.n128_u64[1] = 0x400000000;
                sub_22E798860(v22, (uint64_t)&v266);
                sub_22EFCA95C(v5, *(_QWORD *)v266.n128_u64[0]);
                goto LABEL_151;
              default:
                goto LABEL_153;
            }
          }
        }
LABEL_194:
        if ((v231 & 1) != 0)
        {
          v14 = 1;
        }
        else
        {
          v174 = v240;
          if (sub_22E7B3298(*(_QWORD **)&a1[16], v5, v240))
          {
            v266.n128_u64[0] = v5;
            v266.n128_u8[8] = v174;
            sub_22E7B2E10((uint64_t)&a1[1057], &v266);
            v14 = 1;
          }
          else
          {
            v14 = 0;
          }
        }
        if (v256 != v258)
          free(v256);
        sub_22E78CE68(v244);
        v15 += 2;
        v4 = v229;
        if (v15 == v226)
        {
          v15 = (std::string::size_type *)v259;
          goto LABEL_205;
        }
      }
      v266.n128_u64[0] = (unint64_t)"ASTReader::loadDeclUpdateRecords failed jumping: ";
      v271 = 259;
      v243 = v252;
      v175 = &v243;
LABEL_273:
      sub_22F2432A8((char **)v175, &v245);
      LOWORD(v249) = 260;
      *(_QWORD *)&v248[0] = &v245;
      sub_22F2BB324((uint64_t *)&v266, (uint64_t *)v248, (uint64_t)&v252);
LABEL_271:
      llvm::report_fatal_error();
    }
LABEL_205:
    if (v15 != (std::string::size_type *)v261)
      free(v15);
  }
  v176 = *(_DWORD *)(v5 + 28) & 0x7F;
  if (v176 == 28 && v5 || v176 == 29 && v5 || v176 == 31 && v5)
    sub_22E79F6B0(v5, (unsigned int *)&v262);
  LODWORD(v263) = 0;
  v177 = a1[460];
  v178 = a1[462].u32[0];
  if (v178)
  {
    v179 = (v178 - 1) & (37 * v4);
    v180 = *(_QWORD *)&v177 + 40 * v179;
    v181 = *(_DWORD *)v180;
    if (v4 == *(_DWORD *)v180)
      goto LABEL_222;
    v182 = 1;
    while (v181 != -1)
    {
      v183 = v179 + v182++;
      v179 = v183 & (v178 - 1);
      v180 = *(_QWORD *)&v177 + 40 * v179;
      v181 = *(_DWORD *)v180;
      if (v4 == *(_DWORD *)v180)
        goto LABEL_222;
    }
  }
  v180 = *(_QWORD *)&v177 + 40 * v178;
LABEL_222:
  if (v180 != *(_QWORD *)&v177 + 40 * v178)
  {
    v266.n128_u64[0] = (unint64_t)&v267;
    v266.n128_u64[1] = 0x100000000;
    if (*(_DWORD *)(v180 + 16))
      sub_22E78F7E0((uint64_t)&v266, (const void **)(v180 + 8));
    v184 = *(void **)(v180 + 8);
    if (v184 != (void *)(v180 + 24))
      free(v184);
    *(_DWORD *)v180 = -2;
    a1[461] = vadd_s32(a1[461], (int32x2_t)0x1FFFFFFFFLL);
    v185 = sub_22EFCAE04(v5);
    v186 = sub_22EFCC008(v185);
    *(_QWORD *)&v248[0] = v186;
    if (v266.n128_u32[2])
    {
      v187 = (uint64_t *)v266.n128_u64[0];
      v188 = v266.n128_u64[0] + 16 * v266.n128_u32[2];
      v232 = (uint64_t *)&a1[457];
      v230 = v188;
      while (1)
      {
        v252 = 0;
        v189 = sub_22E7924D8(v232, v248, &v252);
        v190 = v252;
        if ((v189 & 1) != 0)
          goto LABEL_235;
        v191 = a1[458].i32[0];
        v192 = a1[459].u32[0];
        if (4 * v191 + 4 >= 3 * v192)
          break;
        if (v192 + ~v191 - a1[458].i32[1] <= v192 >> 3)
          goto LABEL_242;
LABEL_232:
        ++a1[458].i32[0];
        if (*v190 != -4096)
          --a1[458].i32[1];
        v193 = *(_QWORD *)&v248[0];
        v190[1] = 0;
        v190[2] = 0;
        *v190 = v193;
LABEL_235:
        v194 = *v187;
        v195 = (unsigned int *)v187[1];
        v197 = *v195;
        v196 = v195[1];
        v198 = v195 + 2;
        v252 = &v254;
        v253 = 0x1000000000;
        if (v196 >= 0x11)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          do
          {
LABEL_244:
            v202 = *v198++;
            v203 = sub_22E76944C((uint64_t)a1, v194, v202);
            v204 = v253;
            if (v253 >= (unint64_t)HIDWORD(v253))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v204 = v253;
            }
            *((_QWORD *)v252 + v204) = v203;
            v205 = v253 + 1;
            LODWORD(v253) = v253 + 1;
            --v196;
          }
          while (v196);
          v207 = v190 + 2;
          v206 = v190[2];
          if ((v206 & 4) != 0)
          {
            if (v205)
            {
              v208 = (uint64_t *)v252;
              v209 = (uint64_t *)((char *)v252 + 8 * v205);
              v210 = *(unsigned int *)((v206 & 0xFFFFFFFFFFFFFFF8) + 8);
              if (v206 > 7)
                goto LABEL_260;
LABEL_250:
              if (v208 + 1 != v209)
              {
                v224 = v210;
                v227 = v208;
                v211 = v209;
                v212 = operator new();
                v210 = v224;
                v208 = v227;
                v209 = v211;
                *(_QWORD *)v212 = v212 + 16;
                *(_QWORD *)(v212 + 8) = 0x400000000;
                v206 = v212 | 4;
                *v207 = v212 | 4;
                goto LABEL_260;
              }
              *v207 = *v208 & 0xFFFFFFFFFFFFFFFBLL;
            }
          }
          else if (v205)
          {
            v208 = (uint64_t *)v252;
            v209 = (uint64_t *)((char *)v252 + 8 * v205);
            v210 = v206 > 7;
            if (v206 < 8)
              goto LABEL_250;
            v223 = (uint64_t *)((char *)v252 + 8 * v205);
            v225 = v206 > 7;
            v228 = (uint64_t *)v252;
            v213 = operator new();
            *(_QWORD *)v213 = v213 + 16;
            *(_QWORD *)(v213 + 8) = 0x400000000;
            *v207 = v213 | 4;
            v214 = v213 & 0xFFFFFFFFFFFFFFF8;
            v215 = *(unsigned int *)((v213 & 0xFFFFFFFFFFFFFFF8) + 8);
            if (v215 >= *(unsigned int *)((v213 & 0xFFFFFFFFFFFFFFF8) + 12))
            {
              v222 = v213 & 0xFFFFFFFFFFFFFFF8;
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v214 = v222;
              v215 = *(unsigned int *)(v222 + 8);
            }
            *(_QWORD *)(*(_QWORD *)v214 + 8 * v215) = v206 & 0xFFFFFFFFFFFFFFF8;
            ++*(_DWORD *)(v214 + 8);
            v206 = *v207;
            v210 = v225;
            v208 = v228;
            v209 = v223;
LABEL_260:
            v216 = (unsigned int *)(v206 & 0xFFFFFFFFFFFFFFF8);
            if ((v206 & 4) != 0)
              v207 = *(unint64_t **)v216;
            sub_22F2C5BF0(v216, (uint64_t)&v207[v210], v208, v209);
          }
          v188 = v230;
          goto LABEL_237;
        }
        if (v196)
          goto LABEL_244;
LABEL_237:
        v199 = (uint64_t *)((char *)v195 + v197);
        v200 = *v199;
        v201 = operator new();
        *(_QWORD *)v201 = v194;
        *(_QWORD *)(v201 + 8) = v200;
        *(_QWORD *)(v201 + 16) = v199 + 1;
        *(_QWORD *)(v201 + 24) = v195;
        *(_QWORD *)(v201 + 32) = a1;
        *(_QWORD *)(v201 + 40) = v194;
        *(_QWORD *)(v201 + 48) = v198;
        sub_22E792850((uint64_t)(v190 + 1), v201 & 0xFFFFFFFFFFFFFFFBLL);
        if (v252 != &v254)
          free(v252);
        v187 += 2;
        if (v187 == (uint64_t *)v188)
        {
          v186 = *(_QWORD *)&v248[0];
          goto LABEL_263;
        }
      }
      v192 *= 2;
LABEL_242:
      sub_22E7B7B08((uint64_t)v232, v192);
      v252 = 0;
      sub_22E7924D8(v232, v248, &v252);
      v190 = v252;
      goto LABEL_232;
    }
LABEL_263:
    v217 = *(_WORD *)(v186 + 8);
    *(_WORD *)(v186 + 8) = v217 | 0x100;
    if (*(_QWORD *)v186)
      *(_WORD *)(v186 + 8) = v217 | 0x300;
    if ((unint64_t *)v266.n128_u64[0] != &v267)
      free((void *)v266.n128_u64[0]);
  }
  if (v262 != v264)
    free(v262);
  *v221 = v220;
}

uint64_t *sub_22E7B4D50(_QWORD *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char **v18;
  uint64_t v19;
  const char *v20;
  std::string v21;
  std::string v22;
  __int16 v23;
  char *v24;
  uint64_t v25[4];
  __int16 v26;
  uint64_t v27[2];
  char v28;
  void *v29;
  uint64_t v30;
  _BYTE v31[512];
  const char *v32;
  char v33;
  __int16 v34;
  uint64_t v35;

  v4 = a2;
  v35 = *MEMORY[0x24BDAC8D0];
  v6 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2);
  v7 = v6;
  if (v6 != v4)
  {
    v8 = sub_22E7B1954(v6);
    if (v8)
      v9 = v8;
    else
      v9 = v7;
    sub_22E7B1CB4((uint64_t)a1, v4, v9, v7);
  }
  if (!a3)
    return (uint64_t *)sub_22E7B1F30(v7, v4);
  v10 = sub_22E783560((uint64_t)a1, v4);
  v11 = v10;
  v12 = v10 + 2720;
  v13 = 8 * *(_QWORD *)(v10 + 2736) - *(unsigned int *)(v10 + 2752);
  v27[0] = v10 + 2720;
  v27[1] = v13;
  *(_QWORD *)(v10 + 2736) = (a3 >> 3) & 0x1FFFFFFFFFFFFFF8;
  *(_DWORD *)(v10 + 2752) = 0;
  if ((a3 & 0x3F) != 0)
  {
    sub_22E745EC8(v10 + 2720, a3 & 0x3F, (uint64_t)&v29);
    if ((v30 & 1) != 0)
    {
      if (v29)
      {
        v32 = "ASTReader::loadPendingDeclChain failed jumping: ";
        v34 = 259;
        v24 = (char *)v29;
        sub_22F2432A8(&v24, &v22);
        v26 = 260;
        v25[0] = (uint64_t)&v22;
        sub_22F2BB324((uint64_t *)&v32, v25, (uint64_t)&v29);
        while (1)
        {
          llvm::report_fatal_error();
LABEL_22:
          v25[0] = (uint64_t)"ASTReader::loadPendingDeclChain failed reading code: ";
          v26 = 259;
          v20 = v32;
          v18 = (char **)&v20;
LABEL_20:
          sub_22F2432A8(v18, &v21);
          v23 = 260;
          v22.__r_.__value_.__r.__words[0] = (std::string::size_type)&v21;
          sub_22F2BB324(v25, (uint64_t *)&v22, (uint64_t)&v32);
        }
      }
    }
  }
  v29 = v31;
  v30 = 0x4000000000;
  sub_22E745EC8(v12, *(_DWORD *)(v11 + 2756), (uint64_t)&v32);
  if ((v33 & 1) != 0)
    goto LABEL_22;
  llvm::BitstreamCursor::readRecord();
  if ((v28 & 1) != 0)
  {
    v25[0] = (uint64_t)"ASTReader::loadPendingDeclChain failed reading rec code: ";
    v26 = 259;
    v19 = 0;
    v18 = (char **)&v19;
    goto LABEL_20;
  }
  v14 = v30;
  if ((_DWORD)v30)
  {
    do
    {
      v15 = sub_22E768FE0((uint64_t)a1, v11, *((_QWORD *)v29 + --v14));
      v16 = sub_22E77F870(a1, v15);
      sub_22E7B1CB4((uint64_t)a1, v16, v4, v7);
      v4 = v16;
    }
    while (v14);
  }
  else
  {
    v16 = v4;
  }
  sub_22E7B1F30(v7, v16);
  if (v29 != v31)
    free(v29);
  return sub_22E78CE68(v27);
}

unint64_t *sub_22E7B5028(unint64_t *result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;

  v3 = *(_QWORD *)(a3 + 72) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_QWORD *)(a3 + 72) & 6) != 2)
    v3 = 0;
  if (!v3)
    v3 = a3;
  if (*result >= 8)
  {
    v7 = result;
    v5 = v3;
    v3 = sub_22F3B85F8(a2);
    result = v7;
    v6 = *v7 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v3 = v5;
    *(_QWORD *)(v3 + 8) = v6;
    v4 = 4;
  }
  else
  {
    v4 = 2;
  }
  *result = v3 & 0xFFFFFFFFFFFFFFF9 | v4;
  return result;
}

unint64_t *sub_22E7B50AC(unint64_t *result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;

  v3 = *(_QWORD *)(a3 + 72) & 0xFFFFFFFFFFFFFFFCLL;
  if ((*(_QWORD *)(a3 + 72) & 3) != 1)
    v3 = 0;
  if (!v3)
    v3 = a3;
  if (*result >= 4)
  {
    v7 = result;
    v5 = v3;
    v3 = sub_22F3B85F8(a2);
    result = v7;
    v6 = *v7 & 0xFFFFFFFFFFFFFFFCLL;
    *(_QWORD *)v3 = v5;
    *(_QWORD *)(v3 + 8) = v6;
    v4 = 2;
  }
  else
  {
    v4 = 1;
  }
  *result = v3 & 0xFFFFFFFFFFFFFFFCLL | v4;
  return result;
}

uint64_t sub_22E7B5130(uint64_t a1, uint64_t a2)
{
  unsigned int v4;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_24FAC3190;
  *(_DWORD *)(a1 + 24) = 0;
  v4 = *(_DWORD *)(a1 + 28) & 0xC0000000;
  *(_DWORD *)(a1 + 28) = v4 & 0xC000FF80 | a2 & 0x7F | ((sub_22EFCA90C(a2) & 0x3FFF) << 16) | 0x6000;
  *(_BYTE *)(a1 + 32) &= 0xF8u;
  if (byte_255E04EB0)
    sub_22F3B0FB8(a2);
  return a1;
}

_QWORD *sub_22E7B51BC(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F2C36A0(a1, v4, &v4[2 * v3]);
    return (_QWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -1;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

_QWORD *sub_22E7B527C(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F2C3854(a1, (uint64_t)v4, (uint64_t)v4 + 16 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22E7B533C(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = 0;
  result = sub_22E7B5484(a2, *a3, &v19);
  v9 = v19;
  v10 = *(_DWORD *)a2;
  if ((_DWORD)result)
  {
    if ((v10 & 1) != 0)
    {
      v17 = a2 + 8;
      v18 = 4;
    }
    else
    {
      v17 = *(_QWORD *)(a2 + 8);
      v18 = *(unsigned int *)(a2 + 16);
    }
    v16 = 0;
    v15 = v17 + 16 * v18;
    goto LABEL_11;
  }
  v11 = v10 >> 1;
  if ((v10 & 1) != 0)
    v12 = 4;
  else
    v12 = *(_DWORD *)(a2 + 16);
  if (4 * v11 + 4 >= 3 * v12)
  {
    v12 *= 2;
    goto LABEL_15;
  }
  if (v12 + ~v11 - *(_DWORD *)(a2 + 4) <= v12 >> 3)
  {
LABEL_15:
    sub_22E7B5528(a2, v12);
    v19 = 0;
    result = sub_22E7B5484(a2, *a3, &v19);
    v9 = v19;
  }
  *(_DWORD *)a2 += 2;
  if (*(_QWORD *)v9 != -4096)
    --*(_DWORD *)(a2 + 4);
  *(_QWORD *)v9 = *a3;
  *(_DWORD *)(v9 + 8) = *a4;
  v13 = a2 + 8;
  if ((*(_BYTE *)a2 & 1) != 0)
  {
    v14 = 4;
  }
  else
  {
    v13 = *(_QWORD *)(a2 + 8);
    v14 = *(unsigned int *)(a2 + 16);
  }
  v15 = v13 + 16 * v14;
  v16 = 1;
LABEL_11:
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v15;
  *(_BYTE *)(a1 + 16) = v16;
  return result;
}

uint64_t sub_22E7B5484(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t result;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_16;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
LABEL_13:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v12 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_13;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_16:
  *a3 = v7;
  return result;
}

uint64_t sub_22E7B5528(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  llvm *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[64];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v8 = 0;
    v9 = v14;
    do
    {
      v10 = *(_QWORD *)(a1 + v8 + 8);
      if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        *(_QWORD *)v9 = v10;
        *((_DWORD *)v9 + 2) = *(_DWORD *)(a1 + v8 + 16);
        v9 += 16;
      }
      v8 += 16;
    }
    while (v8 != 64);
    if (a2 > 4)
    {
      *(_DWORD *)a1 &= ~1u;
      v11 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](16 * a2, 8);
      *(_QWORD *)(a1 + 16) = v11;
    }
    return sub_22E7B56A4(a1, (uint64_t)v14, (uint64_t)v9);
  }
  else
  {
    v6 = *(llvm **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](16 * a2, 8);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_22E7B56A4(a1, (uint64_t)v6, (uint64_t)v6 + 16 * v7);
    return llvm::deallocate_buffer(v6, (void *)(16 * v7));
  }
}

uint64_t sub_22E7B56A4(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 72);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    v10 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = sub_22E7B5484((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *(_QWORD *)a2;
      *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

uint64_t sub_22E7B5764(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v5;
  uint64_t result;

  v5 = sub_22E779F8C(a1, a2, a3, a4);
  result = sub_22E77F870(a1, v5);
  if (result)
    return sub_22EFCAE04(result);
  return result;
}

uint64_t sub_22E7B57A0(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t result;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 16 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
LABEL_11:
      result = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(a1 + 16 * (v11 & v4));
        v7 = *v6;
        if (*v6 == a3)
          goto LABEL_11;
      }
      result = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    result = 0;
  }
  *a4 = v6;
  return result;
}

_QWORD *sub_22E7B5828(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F2C3900(a1, v4, &v4[2 * v3]);
    return (_QWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22E7B58E8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v9;
  unsigned int v10;
  int v11;
  char v12;
  uint64_t v13;
  uint64_t *v14;

  v14 = 0;
  result = sub_22E7B57A0(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v14);
  v9 = v14;
  v10 = *(_DWORD *)(a2 + 16);
  if ((result & 1) != 0)
  {
    v12 = 0;
    goto LABEL_7;
  }
  v11 = *(_DWORD *)(a2 + 8);
  if (4 * v11 + 4 >= 3 * v10)
  {
    v10 *= 2;
    goto LABEL_9;
  }
  if (v10 + ~v11 - *(_DWORD *)(a2 + 12) <= v10 >> 3)
  {
LABEL_9:
    sub_22E7B59F8(a2, v10);
    v14 = 0;
    result = sub_22E7B57A0(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v14);
    v9 = v14;
  }
  ++*(_DWORD *)(a2 + 8);
  if (*v9 != -4096)
    --*(_DWORD *)(a2 + 12);
  *v9 = *a3;
  v9[1] = *a4;
  v10 = *(_DWORD *)(a2 + 16);
  v12 = 1;
LABEL_7:
  v13 = *(_QWORD *)a2 + 16 * v10;
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v13;
  *(_BYTE *)(a1 + 16) = v12;
  return result;
}

_QWORD *sub_22E7B59F8(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22E7B5AB8(a1, v4, &v4[2 * v3]);
    return (_QWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22E7B5AB8(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_22E7B57A0(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *a2;
      v10[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

void sub_22E7B5B64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_22E7B5BA4(a2, a3);
}

uint64_t sub_22E7B5B70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_22E7B5BA4(a2, a5);
  return llvm::FoldingSetNodeID::operator==();
}

void sub_22E7B5BA4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int i;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)v3;
  v5 = *(unsigned int *)(v3 + 8);
  v6 = *(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v6 || (*(_DWORD *)(v6 + 28) & 0x7F) != 0x53)
  {
    v7 = *(_QWORD *)(v6 + 16);
    v8 = v7 & 0xFFFFFFFFFFFFFFF8;
    if ((v7 & 4) != 0)
      v8 = *(_QWORD *)v8;
    for (i = *(_WORD *)(v8 + 8) & 0x7F; i != 83; i = *(_WORD *)(v8 + 8) & 0x7F)
    {
      v10 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v10 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_20;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_19;
        if (i == 16)
          goto LABEL_9;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_10;
        if (i == 24)
        {
LABEL_9:
          v10 = -48;
        }
        else
        {
LABEL_19:
          if (i != 70)
          {
LABEL_20:
            v12 = i - 52;
            if ((i - 33) >= 5)
              v13 = -48;
            else
              v13 = -64;
            if (v12 >= 6)
              v10 = v13;
            else
              v10 = -72;
            goto LABEL_10;
          }
          v10 = -64;
        }
      }
LABEL_10:
      v11 = *(_QWORD *)(v8 + v10 + 16);
      v8 = v11 & 0xFFFFFFFFFFFFFFF8;
      if ((v11 & 4) != 0)
        v8 = *(_QWORD *)v8;
    }
    v6 = v8 - 40;
  }
  v14 = *(_QWORD *)(v6 + 88);
  v15 = *(_DWORD *)(a2 + 8);
  if (v15 >= *(_DWORD *)(a2 + 12))
  {
    v19 = v5;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = v19;
    v15 = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v15) = v5;
  v16 = *(_DWORD *)(a2 + 12);
  v17 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v17;
  if (v17 >= v16)
  {
    v20 = v5;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = v20;
    v17 = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v17) = 0;
  ++*(_DWORD *)(a2 + 8);
  if ((_DWORD)v5)
  {
    v18 = 24 * v5;
    do
    {
      sub_22F0EED38(v4, a2, v14);
      v4 += 24;
      v18 -= 24;
    }
    while (v18);
  }
}

void sub_22E7B5D8C(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  unint64_t v4;
  unint64_t v5;
  int v6;
  llvm *v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[112];
  uint64_t v16;

  v2 = a2;
  v16 = *MEMORY[0x24BDAC8D0];
  if (a2 >= 3)
  {
    v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40)
      v2 = v6 + 1;
    else
      v2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v9 = 0;
    v10 = v15;
    v11 = 1;
    v12 = a1 + 8;
    do
    {
      v13 = v9;
      if ((*(_QWORD *)v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        *v10 = *(_QWORD *)v12;
        v10[1] = v10 + 3;
        v10[2] = 0x200000000;
        if (*(_DWORD *)(v12 + 16))
          sub_22E5DE08C((uint64_t)(v10 + 1), v12 + 8);
        v10 += 7;
        v14 = *(void **)(v12 + 8);
        if (v14 != (void *)(v12 + 24))
          free(v14);
      }
      v12 = a1 + 8 + 56 * v11;
      v9 = 1;
      v11 = 2;
    }
    while ((v13 & 1) == 0);
    if (v2 > 2)
    {
      *(_DWORD *)a1 &= ~1u;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](56 * v2, 8);
      *(_QWORD *)(a1 + 16) = v2;
    }
    sub_22F2C3BC4(a1, (uint64_t)v15, (uint64_t)v10);
  }
  else
  {
    v7 = *(llvm **)(a1 + 8);
    v8 = *(unsigned int *)(a1 + 16);
    if (v2 > 2)
    {
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](56 * v2, 8);
      *(_QWORD *)(a1 + 16) = v2;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_22F2C3BC4(a1, (uint64_t)v7, (uint64_t)v7 + 56 * v8);
    llvm::deallocate_buffer(v7, (void *)(56 * v8));
  }
}

uint64_t sub_22E7B5F8C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;

  if (a2)
    v6 = a2 - 88;
  else
    v6 = 0;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  if (v7 != result)
  {
    *(_QWORD *)(v6 + 88) = v7 & 0xFFFFFFFFFFFFFFFCLL;
    *(_QWORD *)(v6 + 96) = v7;
    *(_DWORD *)(v7 + 28) |= *(_DWORD *)(v6 + 28) & 0x400;
    *(_DWORD *)(v6 + 28) &= ~0x400u;
    if (*(_BYTE *)(a4 + 12))
    {
      v9 = (uint64_t *)(*a1 + 10744);
      v13 = v7;
      result = (uint64_t)sub_22E7920E8(v9, &v13);
      v10 = result;
      v11 = *(_DWORD *)(a4 + 8);
      v12 = *(_DWORD *)(result + 16);
      if (v12 >= *(_DWORD *)(result + 20))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v12 = *(_DWORD *)(v10 + 16);
      }
      *(_DWORD *)(*(_QWORD *)(v10 + 8) + 4 * v12) = v11;
      ++*(_DWORD *)(v10 + 16);
    }
  }
  return result;
}

uint64_t sub_22E7B6080(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  llvm *v6;
  uint64_t v7;
  char v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[48];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (a2 >= 3)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v8 = 0;
    v9 = v18;
    v10 = 1;
    v11 = a1 + 8;
    do
    {
      v12 = v8;
      v13 = *(_QWORD *)(v11 + 8);
      if ((*(_QWORD *)v11 != -4096 || v13 != -4096) && (*(_QWORD *)v11 != -8192 || v13 != -8192))
      {
        *(_OWORD *)v9 = *(_OWORD *)v11;
        *((_DWORD *)v9 + 4) = *(_DWORD *)(v11 + 16);
        v9 += 24;
      }
      v11 = a1 + 8 + 24 * v10;
      v8 = 1;
      v10 = 2;
    }
    while ((v12 & 1) == 0);
    if (a2 > 2)
    {
      *(_DWORD *)a1 &= ~1u;
      v14 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](24 * a2, 8);
      *(_QWORD *)(a1 + 16) = v14;
    }
    return sub_22F2C3ED0(a1, (uint64_t)v18, (uint64_t)v9);
  }
  else
  {
    v6 = *(llvm **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 2)
    {
      v16 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](24 * a2, 8);
      *(_QWORD *)(a1 + 16) = v16;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    v17 = 3 * v7;
    sub_22F2C3ED0(a1, (uint64_t)v6, (uint64_t)v6 + 8 * v17);
    return llvm::deallocate_buffer(v6, (void *)(8 * v17));
  }
}

unint64_t sub_22E7B6240(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  unint64_t v5;
  unint64_t v7;

  v2 = a2;
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = *(_QWORD *)a1 + 96 * v3;
    if (*(_QWORD *)a1 <= a2 && v5 > a2)
    {
      v7 = a2 - *(_QWORD *)a1;
      sub_22F2C3FBC(a1);
      return *(_QWORD *)a1 + v7;
    }
    else
    {
      sub_22F2C3FBC(a1);
    }
  }
  return v2;
}

uint64_t sub_22E7B62A8@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v23;
  BOOL v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;

  v4 = result;
  v7 = (_DWORD *)(result + 24);
  v6 = *(unsigned int *)(result + 24);
  if (*(_DWORD *)(result + 40) <= v6)
  {
    v11 = 0;
  }
  else
  {
    v9 = *(_QWORD *)(result + 8);
    v8 = *(_QWORD *)(result + 16);
    *(_DWORD *)(result + 24) = v6 + 1;
    v10 = sub_22E77A180(v9, v8, *(_QWORD *)(*(_QWORD *)(result + 32) + 8 * v6));
    result = sub_22E77D8C8(v9, v10);
    v11 = result;
    LODWORD(v6) = *(_DWORD *)(v4 + 24);
  }
  v12 = *(_QWORD *)(v4 + 32);
  *(_DWORD *)(v4 + 24) = v6 + 1;
  v13 = *(_QWORD *)(v12 + 8 * v6);
  if ((_DWORD)v13)
  {
    do
    {
      v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v14 && *(_BYTE *)(v14 + 16) == 45)
      {
        v15 = *(unsigned int *)(v4 + 24);
        *(_DWORD *)(v4 + 24) = v15 + 1;
        v16 = *(unsigned int *)(*(_QWORD *)(v4 + 32) + 8 * v15);
        v17 = *(_QWORD *)(v4 + 8);
        v18 = sub_22E779F8C(v17, *(_QWORD *)(v4 + 16), v4 + 32, v7);
        v19 = sub_22E77F870(v17, v18);
        v20 = v19;
        if (v19)
          v21 = (*(_DWORD *)(v19 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD;
        else
          v21 = 0;
        if (v21)
          v11 = sub_22EF6477C(*(_QWORD *)v4, v19);
        else
          v11 = *(_QWORD *)(v19 + 48);
        result = v20 & 0xFFFFFFFFFFFFFFF8;
        v24 = (v20 & 0xFFFFFFFFFFFFFFF8) == 0;
        v23 = v20 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v16 != 0));
        if (!v24)
        {
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
          v23 = v23 & 7 | result;
        }
      }
      else
      {
        result = sub_22EF5C728(*(_QWORD *)v4, v11);
        v11 = *(_QWORD *)(result + 32);
        v22 = *(unsigned int *)(v4 + 24);
        *(_DWORD *)(v4 + 24) = v22 + 1;
        v23 = *(unsigned int *)(*(_QWORD *)(v4 + 32) + 8 * v22);
      }
      v25 = *((unsigned int *)a2 + 2);
      if (v25 >= *((unsigned int *)a2 + 3))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v25 = *((unsigned int *)a2 + 2);
      }
      *(_QWORD *)(*a2 + 8 * v25) = v23;
      v26 = *((_DWORD *)a2 + 2) + 1;
      *((_DWORD *)a2 + 2) = v26;
      LODWORD(v13) = v13 - 1;
    }
    while ((_DWORD)v13);
  }
  else
  {
    v26 = *((_DWORD *)a2 + 2);
  }
  v27 = *a2;
  if (v11 >= 0x10)
    v28 = *(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0);
  else
    v28 = 0;
  *a3 = v28;
  a3[1] = v27;
  a3[2] = v26;
  return result;
}

llvm::APFloatBase *sub_22E7B64AC(llvm::APFloatBase *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  if (llvm::APFloatBase::PPCDoubleDouble(a1) == v3)
    llvm::detail::DoubleAPFloat::DoubleAPFloat();
  else
    llvm::detail::IEEEFloat::IEEEFloat();
  return a1;
}

unint64_t sub_22E7B6504(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v8;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v6 = *(_QWORD *)a1 + 72 * v4;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      sub_22F2C45E0(a1);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      sub_22F2C45E0(a1);
    }
  }
  return v3;
}

_DWORD *sub_22E7B656C(_DWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  llvm::APFloatBase *v5;
  uint64_t v6;
  uint64_t v7;
  llvm::APFloatBase *v8;
  uint64_t v9;
  _BYTE v11[24];
  uint64_t v12;
  _QWORD v13[3];

  v13[2] = *MEMORY[0x24BDAC8D0];
  *a1 = 0;
  v4 = (uint64_t *)(a1 + 4);
  v5 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v11, 0.0);
  v6 = llvm::APFloatBase::IEEEdouble(v5);
  MEMORY[0x23489F4E0](v4, v11, v6);
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v11);
  *a1 = 3;
  v7 = *(_QWORD *)(a2 + 8);
  v9 = llvm::APFloatBase::PPCDoubleDouble(v8);
  if (v9 == v7)
    llvm::detail::DoubleAPFloat::DoubleAPFloat();
  else
    llvm::detail::IEEEFloat::IEEEFloat();
  sub_22E51FDA0(v4, &v12);
  if (v9 == v12)
    sub_22E463170((llvm::APFloatBase *)v13);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v12);
  return a1;
}

uint64_t sub_22E7B6678(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;

  if (a2)
    v6 = a2 - 80;
  else
    v6 = 0;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  if (v7 != result)
  {
    *(_QWORD *)(v6 + 80) = v7 & 0xFFFFFFFFFFFFFFFCLL;
    *(_QWORD *)(v6 + 88) = v7;
    *(_DWORD *)(v7 + 28) |= *(_DWORD *)(v6 + 28) & 0x400;
    *(_DWORD *)(v6 + 28) &= ~0x400u;
    *(_QWORD *)(v6 + 104) = *(_QWORD *)(v6 + 104) & 7 | v7;
    if (*(_BYTE *)(a4 + 12))
    {
      v9 = (uint64_t *)(*a1 + 10744);
      v13 = v7;
      result = (uint64_t)sub_22E7920E8(v9, &v13);
      v10 = result;
      v11 = *(_DWORD *)(a4 + 8);
      v12 = *(_DWORD *)(result + 16);
      if (v12 >= *(_DWORD *)(result + 20))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v12 = *(_DWORD *)(v10 + 16);
      }
      *(_DWORD *)(*(_QWORD *)(v10 + 8) + 4 * v12) = v11;
      ++*(_DWORD *)(v10 + 16);
    }
  }
  return result;
}

uint64_t sub_22E7B677C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;

  if (a2)
    v6 = a2 - 48;
  else
    v6 = 0;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  if (v7 != result)
  {
    *(_QWORD *)(v6 + 48) = v7 & 0xFFFFFFFFFFFFFFFCLL;
    *(_QWORD *)(v6 + 56) = v7;
    *(_DWORD *)(v7 + 28) |= *(_DWORD *)(v6 + 28) & 0x400;
    *(_DWORD *)(v6 + 28) &= ~0x400u;
    if (*(_BYTE *)(a4 + 12))
    {
      v9 = (uint64_t *)(*a1 + 10744);
      v13 = v7;
      result = (uint64_t)sub_22E7920E8(v9, &v13);
      v10 = result;
      v11 = *(_DWORD *)(a4 + 8);
      v12 = *(_DWORD *)(result + 16);
      if (v12 >= *(_DWORD *)(result + 20))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v12 = *(_DWORD *)(v10 + 16);
      }
      *(_DWORD *)(*(_QWORD *)(v10 + 8) + 4 * v12) = v11;
      ++*(_DWORD *)(v10 + 16);
    }
  }
  return result;
}

uint64_t sub_22E7B6870(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v5;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v7 = a2 - 1;
    v8 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v4 = (_QWORD *)(a1 + 16 * v8);
    v9 = *v4;
    if (*v4 == a3)
    {
      v5 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v9 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v9 == -8192;
        if (v12)
          v10 = v4;
        v13 = v8 + v11++;
        v8 = v13 & v7;
        v4 = (_QWORD *)(a1 + 16 * (v13 & v7));
        v9 = *v4;
        v5 = 1;
        if (*v4 == a3)
          goto LABEL_3;
      }
      v5 = 0;
      if (v10)
        v4 = v10;
    }
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
LABEL_3:
  *a4 = v4;
  return v5;
}

_QWORD *sub_22E7B6904(_DWORD *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22E3B9914((uint64_t)a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22E7B6960(a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_22E7B6960(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = a1[2];
  v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[3] > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E7B6A10((uint64_t)a1, v7);
  v9 = 0;
  sub_22E3B9914((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++a1[2];
  if (*a4 != -4096)
    --a1[3];
  return a4;
}

_QWORD *sub_22E7B6A10(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22E7B6AD0(a1, v4, (_QWORD *)v4 + 2 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22E7B6AD0(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_22E3B9914(v5, a2, &v11);
      v9 = v11;
      v10 = a2[1];
      *v11 = *a2;
      v9[1] = v10;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_22E7B6B74(_BOOL8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  char v24;

  if (a2)
    v6 = a2 - 64;
  else
    v6 = 0;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  if (v7 != result)
  {
    *(_QWORD *)(v6 + 64) = v7 & 0xFFFFFFFFFFFFFFFCLL;
    *(_QWORD *)(v6 + 72) = v7;
    *(_DWORD *)(v7 + 28) |= *(_DWORD *)(v6 + 28) & 0x400;
    *(_DWORD *)(v6 + 28) &= ~0x400u;
    v9 = *(_BYTE *)(a4 + 12);
    v10 = *(_QWORD **)(v6 + 48);
    v11 = *(_QWORD *)(v7 + 48);
    result = (*(uint64_t (**)(_QWORD *))(*v10 + 32))(v10);
    if ((*(_BYTE *)(result + 29) & 0x80) != 0)
      v12 = *(_DWORD *)(result - 4);
    else
      v12 = 0;
    v22 = v11;
    v23 = v12;
    v24 = v9;
    v13 = *((_DWORD *)v10 + 7);
    v14 = v13 & 0x7F;
    if ((v14 - 38) >= 0xFFFFFFFD)
    {
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
      v16 = v15;
      v17 = (int *)v10[16];
      if (v17)
      {
        if (*(_QWORD *)(v15 + 128))
        {
          sub_22E79D154(a1, v15, v17);
        }
        else
        {
          *(_QWORD *)(v15 + 128) = v17;
          sub_22E3BA850(*a1 + 3704, v10);
        }
      }
      v10[16] = *(_QWORD *)(v16 + 128);
      result = sub_22E79FD3C(a1, (uint64_t)(v10 + 12), v11, (uint64_t)&v22);
    }
    else if ((v13 & 0x7Eu) - 58 >= 0xFFFFFFFA)
    {
      result = sub_22E79A760(a1, (uint64_t)(v10 + 13), v11, (uint64_t)&v22);
    }
    else if ((v14 - 67) >= 0xFFFFFFF9)
    {
      result = sub_22E7A0150(a1, (uint64_t)(v10 + 9), v11, (uint64_t)&v22);
    }
    else if (v14 == 40)
    {
      result = sub_22E7A0244(a1, (uint64_t)(v10 + 8), v11, (uint64_t)&v22);
    }
    if (*(_BYTE *)(a4 + 12))
    {
      v18 = (uint64_t *)(*a1 + 10744);
      v22 = v7;
      result = (uint64_t)sub_22E7920E8(v18, &v22);
      v19 = result;
      v20 = *(_DWORD *)(a4 + 8);
      v21 = *(_DWORD *)(result + 16);
      if (v21 >= *(_DWORD *)(result + 20))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v21 = *(_DWORD *)(v19 + 16);
      }
      *(_DWORD *)(*(_QWORD *)(v19 + 8) + 4 * v21) = v20;
      ++*(_DWORD *)(v19 + 16);
    }
  }
  return result;
}

unsigned int *sub_22E7B6D90(unsigned int *result, uint64_t a2, int *__src, int *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v8;
  unint64_t v9;
  unsigned int *v10;
  _DWORD *v11;
  _BYTE *v12;
  unint64_t v13;
  unsigned int v14;
  int v15;
  int *__srca;

  v4 = *(_QWORD *)result;
  v5 = result[2];
  if (*(_QWORD *)result + 4 * v5 == a2)
    return (unsigned int *)sub_22E7B6F2C((uint64_t)result, __src, a4);
  v6 = (a2 - v4) >> 2;
  __srca = __src;
  v8 = (char *)a4 - (char *)__src;
  v9 = a4 - __src;
  v10 = result;
  if (v5 + v9 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_QWORD *)v10;
    v5 = v10[2];
  }
  v11 = (_DWORD *)(v4 + 4 * v6);
  v12 = (_BYTE *)(v4 + 4 * v5);
  v13 = (v12 - (_BYTE *)v11) >> 2;
  if (v13 >= v9)
  {
    result = (unsigned int *)sub_22F2C49DC((uint64_t)v10, &v12[-4 * v9], (char *)(v4 + 4 * v5));
    if (&v12[-4 * v9] != (_BYTE *)v11)
      result = (unsigned int *)memmove(&v11[v9], v11, &v12[-4 * v9] - (_BYTE *)v11);
    if (__srca != a4)
      return (unsigned int *)memmove(v11, __srca, v8);
  }
  else
  {
    v14 = v5 + (v8 >> 2);
    v10[2] = v14;
    if (v6 != v5)
    {
      result = (unsigned int *)memcpy((void *)(v4 + 4 * v14 - 4 * v13), v11, v12 - (_BYTE *)v11);
      do
      {
        v15 = *__srca++;
        *v11++ = v15;
        --v13;
      }
      while (v13);
    }
    if (__srca != a4)
      return (unsigned int *)memcpy(v12, __srca, (char *)a4 - (char *)__srca);
  }
  return result;
}

uint64_t sub_22E7B6F2C(uint64_t result, _BYTE *__src, _BYTE *a3)
{
  uint64_t v5;
  size_t v6;
  uint64_t v7;

  v5 = result;
  v6 = a3 - __src;
  v7 = *(unsigned int *)(result + 8);
  if (v7 + ((a3 - __src) >> 2) > (unint64_t)*(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    LODWORD(v7) = *(_DWORD *)(v5 + 8);
  }
  if (__src != a3)
  {
    result = (uint64_t)memcpy((void *)(*(_QWORD *)v5 + 4 * v7), __src, v6);
    LODWORD(v7) = *(_DWORD *)(v5 + 8);
  }
  *(_DWORD *)(v5 + 8) = v7 + (v6 >> 2);
  return result;
}

uint64_t sub_22E7B6FB0(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  else
    return *a2 < *a1;
}

void sub_22E7B6FCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int i;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  v3 = a2 - 144;
  if (a2)
    v4 = a2 - 144;
  else
    v4 = 0;
  if (!a2 || (*(_DWORD *)(v4 + 28) & 0x7F) != 0x53)
  {
    v5 = *(_QWORD *)(v4 + 16);
    v6 = v5 & 0xFFFFFFFFFFFFFFF8;
    if ((v5 & 4) != 0)
      v6 = *(_QWORD *)v6;
    for (i = *(_WORD *)(v6 + 8) & 0x7F; i != 83; i = *(_WORD *)(v6 + 8) & 0x7F)
    {
      v8 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v8 = -56;
          goto LABEL_13;
        }
        if (i == 81)
          goto LABEL_13;
      }
      else
      {
        if (i <= 0x18)
        {
          if (i == 16)
            goto LABEL_12;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_13;
          if (i == 24)
          {
LABEL_12:
            v8 = -48;
            goto LABEL_13;
          }
        }
        if (i == 70)
        {
          v8 = -64;
          goto LABEL_13;
        }
      }
      v10 = i - 52;
      if ((i - 33) >= 5)
        v11 = -48;
      else
        v11 = -64;
      if (v10 >= 6)
        v8 = v11;
      else
        v8 = -72;
LABEL_13:
      v9 = *(_QWORD *)(v6 + v8 + 16);
      v6 = v9 & 0xFFFFFFFFFFFFFFF8;
      if ((v9 & 4) != 0)
        v6 = *(_QWORD *)v6;
    }
    v3 = v6 - 40;
  }
  sub_22EFEA3CC(a3, **(_QWORD **)(v4 + 168), *(unsigned int *)(*(_QWORD *)(v4 + 168) + 8), *(_QWORD *)(v4 + 184), *(_QWORD *)(v3 + 88));
}

void sub_22E7B70F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;

  if (a2)
    v3 = a2 - 144;
  else
    v3 = 0;
  sub_22E7B7148(v3, a3);
}

uint64_t sub_22E7B710C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;

  if (a2)
    v5 = a2 - 144;
  else
    v5 = 0;
  sub_22E7B7148(v5, a5);
  return llvm::FoldingSetNodeID::operator==();
}

void sub_22E7B7148(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int i;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *(_QWORD *)(a1 + 168);
  v4 = *(_QWORD *)v3;
  v5 = *(unsigned int *)(v3 + 8);
  if (!a1 || (*(_DWORD *)(a1 + 28) & 0x7F) != 0x53)
  {
    v6 = *(_QWORD *)(a1 + 16);
    v7 = v6 & 0xFFFFFFFFFFFFFFF8;
    if ((v6 & 4) != 0)
      v7 = *(_QWORD *)v7;
    for (i = *(_WORD *)(v7 + 8) & 0x7F; i != 83; i = *(_WORD *)(v7 + 8) & 0x7F)
    {
      v9 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v9 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_20;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_19;
        if (i == 16)
          goto LABEL_9;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_10;
        if (i == 24)
        {
LABEL_9:
          v9 = -48;
        }
        else
        {
LABEL_19:
          if (i != 70)
          {
LABEL_20:
            v11 = i - 52;
            if ((i - 33) >= 5)
              v12 = -48;
            else
              v12 = -64;
            if (v11 >= 6)
              v9 = v12;
            else
              v9 = -72;
            goto LABEL_10;
          }
          v9 = -64;
        }
      }
LABEL_10:
      v10 = *(_QWORD *)(v7 + v9 + 16);
      v7 = v10 & 0xFFFFFFFFFFFFFFF8;
      if ((v10 & 4) != 0)
        v7 = *(_QWORD *)v7;
    }
    a1 = v7 - 40;
  }
  v13 = *(_QWORD *)(a1 + 88);
  v14 = *(_DWORD *)(a2 + 8);
  if (v14 >= *(_DWORD *)(a2 + 12))
  {
    v18 = v5;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = v18;
    v14 = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v14) = v5;
  v15 = *(_DWORD *)(a2 + 12);
  v16 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v16;
  if (v16 >= v15)
  {
    v19 = v5;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = v19;
    v16 = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v16) = 0;
  ++*(_DWORD *)(a2 + 8);
  if ((_DWORD)v5)
  {
    v17 = 24 * v5;
    do
    {
      sub_22F0EED38(v4, a2, v13);
      v4 += 24;
      v17 -= 24;
    }
    while (v17);
  }
}

uint64_t sub_22E7B7328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;

  if (a2)
    v5 = a2 - 104;
  else
    v5 = 0;
  sub_22E7B7364(v5, a5);
  return llvm::FoldingSetNodeID::operator==();
}

void sub_22E7B7364(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int i;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *(_QWORD *)(a1 + 128);
  v4 = *(_QWORD *)v3;
  v5 = *(unsigned int *)(v3 + 8);
  if (!a1 || (*(_DWORD *)(a1 + 28) & 0x7F) != 0x53)
  {
    v6 = *(_QWORD *)(a1 + 16);
    v7 = v6 & 0xFFFFFFFFFFFFFFF8;
    if ((v6 & 4) != 0)
      v7 = *(_QWORD *)v7;
    for (i = *(_WORD *)(v7 + 8) & 0x7F; i != 83; i = *(_WORD *)(v7 + 8) & 0x7F)
    {
      v9 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v9 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_20;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_19;
        if (i == 16)
          goto LABEL_9;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_10;
        if (i == 24)
        {
LABEL_9:
          v9 = -48;
        }
        else
        {
LABEL_19:
          if (i != 70)
          {
LABEL_20:
            v11 = i - 52;
            if ((i - 33) >= 5)
              v12 = -48;
            else
              v12 = -64;
            if (v11 >= 6)
              v9 = v12;
            else
              v9 = -72;
            goto LABEL_10;
          }
          v9 = -64;
        }
      }
LABEL_10:
      v10 = *(_QWORD *)(v7 + v9 + 16);
      v7 = v10 & 0xFFFFFFFFFFFFFFF8;
      if ((v10 & 4) != 0)
        v7 = *(_QWORD *)v7;
    }
    a1 = v7 - 40;
  }
  v13 = *(_QWORD *)(a1 + 88);
  v14 = *(_DWORD *)(a2 + 8);
  if (v14 >= *(_DWORD *)(a2 + 12))
  {
    v18 = v5;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = v18;
    v14 = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v14) = v5;
  v15 = *(_DWORD *)(a2 + 12);
  v16 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v16;
  if (v16 >= v15)
  {
    v19 = v5;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = v19;
    v16 = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v16) = 0;
  ++*(_DWORD *)(a2 + 8);
  if ((_DWORD)v5)
  {
    v17 = 24 * v5;
    do
    {
      sub_22F0EED38(v4, a2, v13);
      v4 += 24;
      v17 -= 24;
    }
    while (v17);
  }
}

void sub_22E7B7544(uint64_t *a1)
{
  if (*(_DWORD *)a1 >= 2u)
    sub_22EF53BC0(a1);
}

_OWORD *sub_22E7B7558(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 24 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F2C4F44(a1, (uint64_t)v4, (uint64_t)v4 + 24 * v3);
    return (_OWORD *)llvm::deallocate_buffer(v4, (void *)(24 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      do
      {
        *result = xmmword_22F45F5C0;
        result = (_OWORD *)((char *)result + 24);
        v11 -= 24;
      }
      while (v11);
    }
  }
  return result;
}

_QWORD *sub_22E7B7628(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F2C5160(a1, (uint64_t)v4, (uint64_t)v4 + 16 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

int64x2_t *sub_22E7B76E8(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  int64x2_t *result;
  uint64_t v10;
  uint64_t v11;
  int64x2_t v12;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (int64x2_t *)MEMORY[0x23489D23C]((_QWORD *)v8, 24 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F2C5468(a1, v4, &v4[3 * v3]);
    return (int64x2_t *)llvm::deallocate_buffer((llvm *)v4, (void *)(24 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      v12 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      do
      {
        *result = v12;
        result = (int64x2_t *)((char *)result + 24);
        v11 -= 24;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22E7B77B8(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  llvm *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[256];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (a2 >= 0x11)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v8 = 0;
    v9 = v14;
    do
    {
      v10 = *(_QWORD *)(a1 + v8 + 8);
      if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        *(_QWORD *)v9 = v10;
        *((_DWORD *)v9 + 2) = *(_DWORD *)(a1 + v8 + 16);
        v9 += 16;
      }
      v8 += 16;
    }
    while (v8 != 256);
    if (a2 > 0x10)
    {
      *(_DWORD *)a1 &= ~1u;
      v11 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](16 * a2, 8);
      *(_QWORD *)(a1 + 16) = v11;
    }
    return sub_22F2C5734(a1, (uint64_t)v14, (uint64_t)v9);
  }
  else
  {
    v6 = *(llvm **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x10)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](16 * a2, 8);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_22F2C5734(a1, (uint64_t)v6, (uint64_t)v6 + 16 * v7);
    return llvm::deallocate_buffer(v6, (void *)(16 * v7));
  }
}

unint64_t sub_22E7B7940(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  unint64_t v5;
  unint64_t v7;

  v2 = a2;
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = *(_QWORD *)a1 + 40 * v3;
    if (*(_QWORD *)a1 <= a2 && v5 > a2)
    {
      v7 = a2 - *(_QWORD *)a1;
      sub_22F2C57FC(a1);
      return *(_QWORD *)a1 + v7;
    }
    else
    {
      sub_22F2C57FC(a1);
    }
  }
  return v2;
}

_QWORD *sub_22E7B79A8(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 40 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F2C5AF8(a1, (uint64_t)v4, (uint64_t)v4 + 40 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(40 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 40 * v10;
      do
      {
        *result = -4096;
        result += 5;
        v11 -= 40;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22E7B7A74(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v3 = (_QWORD *)result;
  v4 = *(_QWORD *)result;
  if ((*(_QWORD *)result & 1) != 0)
  {
    if ((v4 & 4) != 0 && (v8 = v4 & 0xFFFFFFFFFFFFFFF8, (v4 & 0xFFFFFFFFFFFFFFF8) != 0))
    {
      v7 = v4 & 0xFFFFFFFFFFFFFFFELL;
      *(_QWORD *)(v8 + 16) = a2;
    }
    else
    {
      v7 = a2 & 0xFFFFFFFFFFFFFFFBLL;
    }
  }
  else
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    v6 = *(_QWORD *)(v5 + 16048);
    if (v6)
    {
      result = sub_22E3CD3D4(v5 + 2032, 24, 3);
      *(_QWORD *)result = v6;
      *(_DWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = a2;
      v7 = result | 4;
    }
    else
    {
      v7 = a2 & 0xFFFFFFFFFFFFFFFBLL;
    }
  }
  *v3 = v7 | 1;
  return result;
}

_QWORD *sub_22E7B7B08(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 24 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22E7B7BD4((uint64_t *)a1, v4, &v4[3 * v3]);
    return (_QWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(24 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      do
      {
        *result = -4096;
        result += 3;
        v11 -= 24;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t *sub_22E7B7BD4(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t *v10;
  unint64_t v11;
  _QWORD *v12;

  v4 = result;
  result[1] = 0;
  v5 = *((unsigned int *)result + 4);
  if ((_DWORD)v5)
  {
    v6 = (_QWORD *)*result;
    v7 = 24 * v5;
    do
    {
      *v6 = -4096;
      v6 += 3;
      v7 -= 24;
    }
    while (v7);
  }
  if (a2 != a3)
  {
    v8 = a2 + 1;
    do
    {
      if ((*(v8 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v12 = 0;
        sub_22E7924D8(v4, v8 - 1, &v12);
        v9 = v12;
        *v12 = *(v8 - 1);
        v9[1] = *v8;
        *v8 = 0;
        v9[2] = v8[1];
        v8[1] = 0;
        if ((*v8 & 2) != 0)
        {
          v11 = *v8 & 0xFFFFFFFFFFFFFFFCLL;
          if (v11)
            *(_DWORD *)(v11 + 8) = 0;
        }
        else
        {
          *v8 = 0;
        }
        ++*((_DWORD *)v4 + 2);
        sub_22E7944E4(v8);
        sub_22E794630(v8 + 1);
        result = sub_22E794690(v8);
      }
      v10 = v8 + 2;
      v8 += 3;
    }
    while (v10 != a3);
  }
  return result;
}

BOOL sub_22E7B7CD4(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  _DWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  _DWORD *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v32;

  if (*(_DWORD *)(a2 + 340) <= *(_DWORD *)(a1 + 60))
    return 1;
  v4 = sub_22E7835D0(*(_QWORD *)a1, a2, *(unsigned int *)(a1 + 56));
  if (!v4)
    return 1;
  v5 = *(unsigned int *)(a2 + 3176);
  if ((_DWORD)v5)
  {
    v6 = *(_DWORD **)(a2 + 3168);
    v7 = *(unsigned int *)(a2 + 3176);
    do
    {
      v8 = v7 >> 1;
      v9 = &v6[2 * (v7 >> 1)];
      v11 = *v9;
      v10 = v9 + 2;
      v7 += ~(v7 >> 1);
      if (v11 < v4)
        v6 = v10;
      else
        v7 = v8;
    }
    while (v7);
  }
  else
  {
    v6 = *(_DWORD **)(a2 + 3168);
  }
  if (v6 != (_DWORD *)(*(_QWORD *)(a2 + 3168) + 8 * v5) && *v6 == v4)
  {
    v12 = v6[1];
    v13 = *(_QWORD *)(a2 + 3184);
    v14 = *(_QWORD *)(v13 + 8 * v12);
    *(_QWORD *)(v13 + 8 * v12) = 0;
    if ((_DWORD)v14)
    {
      v15 = v12 + 1;
      do
      {
        v16 = *(_QWORD *)a1;
        v17 = sub_22E768FE0(*(_QWORD *)a1, a2, *(_QWORD *)(*(_QWORD *)(a2 + 3184) + 8 * v15));
        v18 = (_QWORD *)sub_22E77F870(v16, v17);
        v19 = *(_QWORD *)(a1 + 16);
        v20 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)v19, v18);
        v21 = *(_QWORD *)(v19 + 8);
        if (v21 == *(_QWORD *)v19)
          v22 = 20;
        else
          v22 = 16;
        if (v20 != (void **)(v21 + 8 * *(unsigned int *)(v19 + v22)))
        {
          *v20 = (void *)-2;
          ++*(_DWORD *)(v19 + 24);
          if (v18[5])
          {
            v32 = v18[5];
            v25 = sub_22F2C34F4(a1 + 32, &v32);
            if (!v25[1])
              v25[1] = v18;
          }
          v23 = *(_QWORD *)(a1 + 24);
          if (v23)
            v24 = (_QWORD *)(v23 + 128);
          else
            v24 = (_QWORD *)((*(_QWORD *)(*(_QWORD *)(a1 + 8) + 120) & 0xFFFFFFFFFFFFFFF8) + 56);
          *v24 = v18;
          *(_QWORD *)(a1 + 24) = v18;
        }
        ++v15;
        LODWORD(v14) = v14 - 1;
      }
      while ((_DWORD)v14);
    }
    return 1;
  }
  v27 = *(_DWORD *)(a1 + 56);
  v31 = v27 >= 0x12;
  v28 = v27 - 18;
  if (!v31)
    return 0;
  v29 = *(_DWORD *)(a2 + 3088);
  v31 = v28 >= v29;
  v30 = *(_DWORD *)(a2 + 3072) + v29;
  v31 = !v31 || v28 >= v30;
  return !v31;
}

void sub_22E7B7EB8(_QWORD *a1, _DWORD *a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _OWORD *v23;
  _OWORD *v24;
  __int128 v25;
  int v26;
  char *v27;
  unsigned int v28;
  _OWORD *v29;
  char *v30;
  __int128 v31;
  void *v32[4];
  void *v33;
  uint64_t v34;
  _BYTE v35[256];
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v8 = *a1;
  v9 = *(_QWORD *)(*a1 + 8);
  v10 = *(_QWORD *)(v8 + 16);
  v11 = *(unsigned int *)(v8 + 24);
  *(_DWORD *)(v8 + 24) = v11 + 1;
  HIDWORD(v12) = *(_QWORD *)(*(_QWORD *)(v8 + 32) + 8 * v11);
  LODWORD(v12) = HIDWORD(v12);
  v13 = sub_22E77BAB4(v9, v10, v12 >> 1);
  v33 = v35;
  v34 = 0x800000000;
  v36 = 0;
  v14 = *a1;
  v15 = *(_QWORD *)(*a1 + 8);
  v16 = *(_QWORD *)(*a1 + 16);
  v17 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v14 + 24) = v17 + 1;
  HIDWORD(v12) = *(_QWORD *)(*(_QWORD *)(v14 + 32) + 8 * v17);
  LODWORD(v12) = HIDWORD(v12);
  LODWORD(v36) = sub_22E77BAB4(v15, v16, v12 >> 1);
  v18 = *a1;
  v19 = *(_QWORD *)(*a1 + 8);
  v20 = *(_QWORD *)(*a1 + 16);
  v21 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v18 + 24) = v21 + 1;
  HIDWORD(v12) = *(_QWORD *)(*(_QWORD *)(v18 + 32) + 8 * v21);
  LODWORD(v12) = HIDWORD(v12);
  v22 = sub_22E77BAB4(v19, v20, v12 >> 1);
  HIDWORD(v36) = v22;
  if (a4)
  {
    do
    {
      sub_22E782760(v32, *a1);
      v23 = (_OWORD *)sub_22E78DF7C((uint64_t)&v33, (unint64_t)v32, 1);
      v24 = (char *)v33 + 32 * v34;
      v25 = v23[1];
      *v24 = *v23;
      v24[1] = v25;
      v26 = v34 + 1;
      LODWORD(v34) = v34 + 1;
      --a4;
    }
    while (a4);
    v22 = HIDWORD(v36);
  }
  else
  {
    v26 = v34;
  }
  *a2 = v36;
  a2[1] = v22;
  a2[2] = v13;
  a2[3] = v26;
  v27 = (char *)v33;
  if (v26)
  {
    v28 = 0;
    do
    {
      v29 = (_OWORD *)(a3 + 32 * v28);
      v30 = &v27[32 * v28];
      v31 = *((_OWORD *)v30 + 1);
      *v29 = *(_OWORD *)v30;
      v29[1] = v31;
      ++v28;
    }
    while (v28 != a2[3]);
  }
  if (v27 != v35)
    free(v27);
}

void sub_22E7B8060(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  char *v20;
  __int128 v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  __int128 v30;
  int v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char **v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  __int128 v55;
  unsigned int v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  char v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char **v66;
  void **v67;
  size_t v68;
  void *v69[2];
  char v70;
  void *v71[2];
  char v72;
  void *v73;
  uint64_t v74;
  _BYTE v75[256];
  void *__p;
  uint64_t v77;
  _BYTE v78[384];
  void *v79;
  uint64_t v80;
  _BYTE v81[128];
  void *v82;
  uint64_t v83;
  _BYTE v84[256];
  char *v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  _QWORD v90[49];

  v90[48] = *MEMORY[0x24BDAC8D0];
  sub_22F2C6C58(a1, (uint64_t)a2);
  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(_QWORD *)(*a1 + 16);
  v7 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v7);
  LODWORD(v8) = HIDWORD(v8);
  a2[10] = sub_22E77BAB4(v5, v6, v8 >> 1);
  v9 = *a1;
  v10 = *(_QWORD *)(*a1 + 8);
  v11 = *(_QWORD *)(*a1 + 16);
  v12 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v9 + 24) = v12 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 8 * v12);
  LODWORD(v8) = HIDWORD(v8);
  a2[11] = sub_22E77BAB4(v10, v11, v8 >> 1);
  v13 = *a1;
  v14 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v13 + 24) = v14 + 1;
  v15 = *(_QWORD *)(v13 + 32);
  a2[16] = *(_QWORD *)(v15 + 8 * v14);
  v16 = *(unsigned int *)(v13 + 24);
  *(_DWORD *)(v13 + 24) = v16 + 1;
  v17 = *(_QWORD *)(v15 + 8 * v16);
  sub_22E793964(v71, (uint64_t *)(v15 + 8 * (v16 + 1)), (uint64_t *)(v15 + 8 * (v16 + 1) + 8 * v17), v17);
  *(_DWORD *)(v13 + 24) += v17;
  v88 = v90;
  v89 = 0x1000000000;
  v18 = a2[16];
  if (v18 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v18 = a2[16];
  }
  for (; v18; --v18)
  {
    sub_22E76BAA8(*(_QWORD *)(*a1 + 8), *(_QWORD *)(*a1 + 16), (uint64_t *)(*a1 + 32), (_DWORD *)(*a1 + 24), (uint64_t)&v85);
    v19 = sub_22E4EF088((uint64_t)&v88, (unint64_t)&v85, 1);
    v20 = (char *)v88 + 24 * v89;
    v21 = *(_OWORD *)v19;
    *((_QWORD *)v20 + 2) = *(_QWORD *)(v19 + 16);
    *(_OWORD *)v20 = v21;
    LODWORD(v89) = v89 + 1;
  }
  v85 = (char *)&v87;
  v86 = 0x1000000000;
  v82 = v84;
  v83 = 0x1000000000;
  v22 = a2[6];
  if (v22 >= 0x11)
  {
    sub_22F243B14((uint64_t)&v85);
    v22 = a2[6];
    v23 = HIDWORD(v83);
  }
  else
  {
    v23 = 16;
  }
  if (v23 < v22)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v22 = a2[6];
  }
  for (; v22; --v22)
  {
    v24 = *a1;
    v25 = *(unsigned int *)(*a1 + 24);
    *(_DWORD *)(v24 + 24) = v25 + 1;
    v26 = *(_QWORD *)(v24 + 32);
    v27 = *(_QWORD *)(v26 + 8 * v25);
    sub_22E793964(&__p, (uint64_t *)(v26 + 8 * (v25 + 1)), (uint64_t *)(v26 + 8 * (v25 + 1) + 8 * v27), v27);
    *(_DWORD *)(v24 + 24) += v27;
    v28 = sub_22E3B9688((uint64_t)&v85, (unint64_t)&__p, 1);
    v29 = &v85[24 * v86];
    v30 = *(_OWORD *)v28;
    *((_QWORD *)v29 + 2) = *(_QWORD *)(v28 + 16);
    *(_OWORD *)v29 = v30;
    *(_QWORD *)(v28 + 8) = 0;
    *(_QWORD *)(v28 + 16) = 0;
    *(_QWORD *)v28 = 0;
    v31 = v86 + 1;
    LODWORD(v86) = v86 + 1;
    if ((v78[7] & 0x80000000) != 0)
    {
      operator delete(__p);
      v31 = v86;
    }
    v32 = &v85[24 * v31];
    v35 = (char *)*((_QWORD *)v32 - 3);
    v33 = v32 - 24;
    v34 = v35;
    v36 = v33[23];
    if (v36 >= 0)
      v37 = v33;
    else
      v37 = v34;
    v38 = (char *)*((_QWORD *)v33 + 1);
    if (v36 >= 0)
      v39 = (char *)(v36 & 0x7F);
    else
      v39 = v38;
    v40 = v83;
    if (v83 >= (unint64_t)HIDWORD(v83))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v40 = v83;
    }
    v41 = (char **)((char *)v82 + 16 * v40);
    *v41 = v37;
    v41[1] = v39;
    LODWORD(v83) = v83 + 1;
  }
  v42 = a2[5] + a2[4];
  v79 = v81;
  v80 = 0x1000000000;
  __p = v78;
  v77 = 0x1000000000;
  v73 = v75;
  v74 = 0x1000000000;
  if (v42 < 0x11)
  {
    v43 = 16;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v43 = HIDWORD(v77);
  }
  if (v43 < v42)
    sub_22F243B14((uint64_t)&__p);
  if (HIDWORD(v74) >= v42)
  {
    if (!v42)
    {
      v44 = v74;
      goto LABEL_44;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  do
  {
    v45 = *(_QWORD *)(*a1 + 8);
    v46 = *(unsigned int *)(v45 + 10848);
    v47 = *(_QWORD *)(*(_QWORD *)(v45 + 10840) + 8 * v46 - 8);
    *(_DWORD *)(v45 + 10848) = v46 - 1;
    v48 = v80;
    if (v80 >= (unint64_t)HIDWORD(v80))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v48 = v80;
    }
    *((_QWORD *)v79 + v48) = v47;
    LODWORD(v80) = v80 + 1;
    v49 = *a1;
    v50 = *(unsigned int *)(*a1 + 24);
    *(_DWORD *)(v49 + 24) = v50 + 1;
    v51 = *(_QWORD *)(v49 + 32);
    v52 = *(_QWORD *)(v51 + 8 * v50);
    sub_22E793964(v69, (uint64_t *)(v51 + 8 * (v50 + 1)), (uint64_t *)(v51 + 8 * (v50 + 1) + 8 * v52), v52);
    *(_DWORD *)(v49 + 24) += v52;
    v53 = sub_22E3B9688((uint64_t)&__p, (unint64_t)v69, 1);
    v54 = (char *)__p + 24 * v77;
    v55 = *(_OWORD *)v53;
    *((_QWORD *)v54 + 2) = *(_QWORD *)(v53 + 16);
    *(_OWORD *)v54 = v55;
    *(_QWORD *)(v53 + 8) = 0;
    *(_QWORD *)(v53 + 16) = 0;
    *(_QWORD *)v53 = 0;
    v56 = v77 + 1;
    LODWORD(v77) = v77 + 1;
    if (v70 < 0)
    {
      operator delete(v69[0]);
      v56 = v77;
    }
    v57 = (char *)__p + 24 * v56;
    v60 = (char *)*((_QWORD *)v57 - 3);
    v58 = v57 - 24;
    v59 = v60;
    v61 = v58[23];
    if (v61 >= 0)
      v62 = v58;
    else
      v62 = v59;
    v63 = (char *)*((_QWORD *)v58 + 1);
    if (v61 >= 0)
      v64 = (char *)(v61 & 0x7F);
    else
      v64 = v63;
    v65 = v74;
    if (v74 >= (unint64_t)HIDWORD(v74))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v65 = v74;
    }
    v66 = (char **)((char *)v73 + 16 * v65);
    *v66 = v62;
    v66[1] = v64;
    v44 = v74 + 1;
    LODWORD(v74) = v74 + 1;
    --v42;
  }
  while (v42);
LABEL_44:
  if (v72 >= 0)
    v67 = v71;
  else
    v67 = (void **)v71[0];
  if (v72 >= 0)
    v68 = v72 & 0x7F;
  else
    v68 = (size_t)v71[1];
  sub_22F3F1F7C((uint64_t)a2, *(_QWORD *)(*(_QWORD *)(*a1 + 8) + 128), v67, v68, v88, v89, (uint64_t)v73, v44, (uint64_t *)v79, v80, (uint64_t)v82, v83);
  if (v73 != v75)
    free(v73);
  sub_22E3B9848((char **)&__p);
  if (v79 != v81)
    free(v79);
  if (v82 != v84)
    free(v82);
  sub_22E3B9848(&v85);
  if (v88 != v90)
    free(v88);
  if (v72 < 0)
    operator delete(v71[0]);
}

uint64_t sub_22E7B8650(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  if (*(_DWORD *)(*a1 + 40) <= v5)
  {
    result = 0;
  }
  else
  {
    v7 = *(_QWORD *)(v4 + 8);
    v6 = *(_QWORD *)(v4 + 16);
    *(_DWORD *)(v4 + 24) = v5 + 1;
    v8 = sub_22E77A180(v7, v6, *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v5));
    result = sub_22E77D8C8(v7, v8);
    v4 = *a1;
    LODWORD(v5) = *(_DWORD *)(*a1 + 24);
  }
  *(_QWORD *)(a2 + 8) = result;
  v10 = *(_QWORD *)(v4 + 32);
  v11 = *(_QWORD *)(v10 + 8 * v5) != 0;
  v12 = *(_QWORD *)(v10 + 8 * (v5 + 1));
  v13 = *(_QWORD *)(v10 + 8 * (v5 + 2));
  v14 = *(_QWORD *)(v10 + 8 * (v5 + 3)) != 0;
  *(_DWORD *)(v4 + 24) = v5 + 5;
  v15 = *(_QWORD *)(v10 + 8 * (v5 + 4));
  v16 = 4 * v11;
  if (v12)
    v16 = (4 * v11) | 8;
  if (v13)
    v16 |= 2u;
  v17 = v16 | v14;
  if (v15)
    v18 = v17 | 0x10;
  else
    v18 = v17;
  *(_DWORD *)a2 = *(_DWORD *)a2 & 0xFFFC1FFF | (v18 << 13);
  v19 = *a1;
  v20 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v19 + 24) = v20 + 1;
  *(_DWORD *)a2 = *(_DWORD *)a2 & 0xFFFFFCFF | ((*(_QWORD *)(*(_QWORD *)(v19 + 32) + 8 * v20) & 3) << 8);
  v21 = *a1;
  v22 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v21 + 24) = v22 + 1;
  *(_DWORD *)a2 = *(_DWORD *)a2 & 0xFFFFE3FF | ((*(_QWORD *)(*(_QWORD *)(v21 + 32) + 8 * v22) & 7) << 10);
  return result;
}

uint64_t sub_22E7B8794(uint64_t *a1, _DWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;

  result = sub_22E7B8650(a1, (uint64_t)a2);
  v5 = *(unsigned int *)(*a1 + 24);
  v6 = *(_QWORD *)(*a1 + 32);
  v7 = *(unsigned int *)(v6 + 8 * v5);
  v8 = *(_QWORD *)(v6 + 8 * (v5 + 1));
  v9 = *(_QWORD *)(v6 + 8 * (v5 + 2));
  *(_DWORD *)(*a1 + 24) = v5 + 4;
  *a2 = *a2 & 0xFFE3FFFF | ((*(_QWORD *)(v6 + 8 * (v5 + 3)) & 7) << 18);
  v10 = *a1;
  v11 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v10 + 24) = v11 + 1;
  *a2 = *a2 & 0xFEFFFFFF | ((*(_QWORD *)(*(_QWORD *)(v10 + 32) + 8 * v11) & 1) << 24);
  if (v7)
  {
    v12 = a2 + 5;
    do
    {
      v13 = *a1;
      v14 = *(_QWORD *)(*a1 + 8);
      v15 = *(_QWORD *)(*a1 + 16);
      v16 = *(unsigned int *)(*a1 + 24);
      *(_DWORD *)(v13 + 24) = v16 + 1;
      HIDWORD(v17) = *(_QWORD *)(*(_QWORD *)(v13 + 32) + 8 * v16);
      LODWORD(v17) = HIDWORD(v17);
      result = sub_22E77BAB4(v14, v15, v17 >> 1);
      *v12++ = result;
      --v7;
    }
    while (v7);
  }
  v18 = (v9 * v8);
  if ((_DWORD)v18)
  {
    v19 = &a2[a2[1] + 5];
    do
    {
      v20 = *a1;
      v21 = *(unsigned int *)(*a1 + 24);
      *(_DWORD *)(v20 + 24) = v21 + 1;
      *v19++ = *(_QWORD *)(*(_QWORD *)(v20 + 32) + 8 * v21);
      --v18;
    }
    while (v18);
  }
  return result;
}

uint64_t sub_22E7B889C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t result;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  sub_22E7B8650(a1, a2);
  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  v6 = *(_QWORD *)(*a1 + 32);
  v7 = *(_QWORD *)(v6 + 8 * v5);
  v8 = *(_QWORD *)(*a1 + 8);
  v9 = *(unsigned int *)(v8 + 10848);
  v10 = *(_QWORD *)(*(_QWORD *)(v8 + 10840) + 8 * v9 - 8);
  *(_DWORD *)(v8 + 10848) = v9 - 1;
  *(_QWORD *)(a2 + 16) = v10;
  *(_DWORD *)(v4 + 24) = v5 + 2;
  *(_DWORD *)a2 = *(_DWORD *)a2 & 0xFF83FFFF | ((*(_QWORD *)(v6 + 8 * (v5 + 1)) & 0x1F) << 18);
  v11 = *a1;
  v12 = *(_QWORD *)(*a1 + 8);
  v13 = *(_QWORD *)(*a1 + 16);
  v14 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v11 + 24) = v14 + 1;
  HIDWORD(v15) = *(_QWORD *)(*(_QWORD *)(v11 + 32) + 8 * v14);
  LODWORD(v15) = HIDWORD(v15);
  result = sub_22E77BAB4(v12, v13, v15 >> 1);
  *(_DWORD *)(a2 + 4) = result;
  v17 = *(unsigned int *)(*a1 + 24);
  v18 = v17 + 1;
  v19 = *(_QWORD *)(*(_QWORD *)(*a1 + 32) + 8 * v17);
  *(_DWORD *)(*a1 + 24) = v18;
  *(_DWORD *)a2 = *(_DWORD *)a2 & 0xFF7FFFFF | ((v19 != 0) << 23);
  if (v7)
  {
    v20 = *a1;
    v21 = *(unsigned int *)(*a1 + 24);
    *(_DWORD *)(v20 + 24) = v21 + 1;
    *(_QWORD *)(a2 + 24) = __ROR8__(*(_QWORD *)(*(_QWORD *)(v20 + 32) + 8 * v21), 32);
  }
  return result;
}

void sub_22E7B8990(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  void *v25;
  uint64_t v26;
  void *__p[2];
  char v28;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a1 + 32;
  *(_QWORD *)(a1 + 24) = 0x400000000;
  *(_QWORD *)(a1 + 136) = a1 + 152;
  v2 = a1 + 136;
  *(_QWORD *)(a1 + 144) = 0x400000000;
  v3 = *(unsigned int *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = v3 + 1;
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(v4 + 8 * v3);
  *(_BYTE *)(a1 + 128) = v5 != 0;
  if (!v5)
  {
    *(_DWORD *)(a2 + 24) = v3 + 2;
    for (i = *(_QWORD *)(v4 + 8 * (v3 + 1)); (_DWORD)i; LODWORD(i) = i - 1)
    {
      v8 = *(_QWORD *)(a2 + 8);
      if (*(_DWORD *)(v8 + 10984) == 3)
      {
        v9 = *(unsigned int *)(v8 + 10848);
        v10 = *(_QWORD *)(*(_QWORD *)(v8 + 10840) + 8 * v9 - 8);
        *(_DWORD *)(v8 + 10848) = v9 - 1;
      }
      else
      {
        v10 = sub_22E7B94C8();
      }
      v11 = *(unsigned int *)(a2 + 24);
      *(_DWORD *)(a2 + 24) = v11 + 1;
      v12 = *(_QWORD *)(a2 + 32);
      if (*(_QWORD *)(v12 + 8 * v11))
      {
        v16 = *(_QWORD *)(a2 + 8);
        v17 = *(_QWORD *)(a2 + 16);
        *(_DWORD *)(a2 + 24) = v11 + 2;
        HIDWORD(v18) = *(_QWORD *)(v12 + 8 * (v11 + 1));
        LODWORD(v18) = HIDWORD(v18);
        v19 = sub_22E77BAB4(v16, v17, v18 >> 1);
        v20 = *(unsigned int *)(a2 + 24);
        *(_DWORD *)(a2 + 24) = v20 + 1;
        v21 = *(_QWORD *)(a2 + 32);
        v22 = *(_QWORD *)(v21 + 8 * v20);
        sub_22E793964(__p, (uint64_t *)(v21 + 8 * (v20 + 1)), (uint64_t *)(v21 + 8 * (v20 + 1) + 8 * v22), v22);
        *(_DWORD *)(a2 + 24) += v22;
        v23 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 128) + 2032, 24, 3);
        *(_DWORD *)v23 = v19;
        if (v28 >= 0)
          v24 = __p;
        else
          v24 = (void **)__p[0];
        *(_QWORD *)(v23 + 8) = v24;
        v25 = (void *)(v28 & 0x7F);
        if (v28 < 0)
          v25 = __p[1];
        *(_QWORD *)(v23 + 16) = v25;
        v26 = v23;
        sub_22F2CCEF8(v2, v10, &v26);
        if (v28 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v13 = *(_QWORD *)(a2 + 8);
        if (*(_DWORD *)(v13 + 10984) == 3)
        {
          v14 = *(unsigned int *)(v13 + 10848);
          v15 = *(void **)(*(_QWORD *)(v13 + 10840) + 8 * v14 - 8);
          *(_DWORD *)(v13 + 10848) = v14 - 1;
        }
        else
        {
          v15 = (void *)sub_22E7B94C8();
        }
        __p[0] = v15;
        sub_22F2CCF30(v2, v10, (uint64_t *)__p);
      }
    }
  }
}

uint64_t sub_22E7B8B94(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  void *v16;
  int v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD v22[2];
  unsigned __int8 v23;
  void *__p[2];
  char v25;

  v2 = *(unsigned int *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v2 + 1;
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(v3 + 8 * v2);
  sub_22E793964(__p, (uint64_t *)(v3 + 8 * (v2 + 1)), (uint64_t *)(v3 + 8 * (v2 + 1) + 8 * v4), v4);
  v5 = *(_DWORD *)(a1 + 24) + v4;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 24) = v5 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v5);
  LODWORD(v8) = HIDWORD(v8);
  v9 = sub_22E77BAB4(v6, v7, v8 >> 1);
  v10 = *(unsigned int *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v10 + 1;
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(_QWORD *)(v11 + 8 * v10);
  sub_22E793964(v22, (uint64_t *)(v11 + 8 * (v10 + 1)), (uint64_t *)(v11 + 8 * (v10 + 1) + 8 * v12), v12);
  *(_DWORD *)(a1 + 24) += v12;
  v13 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 128) + 2032, 40, 3);
  v14 = v13;
  if (v25 >= 0)
    v15 = __p;
  else
    v15 = (void **)__p[0];
  *(_QWORD *)v13 = v15;
  v16 = (void *)(v25 & 0x7F);
  if (v25 < 0)
    v16 = __p[1];
  *(_QWORD *)(v13 + 8) = v16;
  *(_DWORD *)(v13 + 16) = v9;
  v17 = (char)v23;
  v18 = (void *)v22[0];
  v19 = v22[1];
  if ((v23 & 0x80u) == 0)
    v20 = v22;
  else
    v20 = (_QWORD *)v22[0];
  if ((v23 & 0x80u) == 0)
    v19 = v23;
  *(_QWORD *)(v14 + 24) = v20;
  *(_QWORD *)(v14 + 32) = v19;
  if (v17 < 0)
    operator delete(v18);
  if (v25 < 0)
    operator delete(__p[0]);
  return v14;
}

uint64_t sub_22E7B8CDC(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  sub_22E7B8650(a1, (uint64_t)a2);
  v4 = *(unsigned int *)(*a1 + 24);
  v5 = *(_QWORD *)(*a1 + 32);
  v6 = *(unsigned int *)(v5 + 8 * v4);
  v7 = *(_QWORD *)(v5 + 8 * (v4 + 1));
  v8 = *(_QWORD *)(*a1 + 8);
  v9 = *(_QWORD *)(*a1 + 16);
  *(_DWORD *)(*a1 + 24) = v4 + 3;
  HIDWORD(v10) = *(_QWORD *)(v5 + 8 * (v4 + 2));
  LODWORD(v10) = HIDWORD(v10);
  result = sub_22E77BAB4(v8, v9, v10 >> 1);
  a2[5] = result;
  v12 = *(_QWORD *)(*a1 + 8);
  v13 = *(unsigned int *)(v12 + 10848);
  v14 = *(_QWORD *)(*(_QWORD *)(v12 + 10840) + 8 * v13 - 8);
  *(_DWORD *)(v12 + 10848) = v13 - 1;
  *(_QWORD *)((char *)a2 + *((unsigned __int8 *)a2 + 3)) = v14;
  if (v6)
  {
    v15 = 0;
    do
    {
      v16 = *(_QWORD *)(*a1 + 8);
      v17 = *(unsigned int *)(v16 + 10848);
      v18 = *(_QWORD *)(*(_QWORD *)(v16 + 10840) + 8 * v17 - 8);
      *(_DWORD *)(v16 + 10848) = v17 - 1;
      *(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2 + v15] + ((unint64_t)*a2 >> 24)) = v18;
      v15 += 2;
    }
    while (2 * v6 != v15);
  }
  v19 = *(unsigned int *)(*a1 + 24);
  v20 = v19 + 1;
  v21 = *(_QWORD *)(*(_QWORD *)(*a1 + 32) + 8 * v19);
  *(_DWORD *)(*a1 + 24) = v20;
  *a2 = *a2 & 0xFFF7FFFF | ((v21 != 0) << 19);
  if (v7)
  {
    v22 = *(unsigned int *)(*a1 + 24);
    v23 = *(_QWORD *)(*(_QWORD *)(*a1 + 32) + 8 * v22);
    *(_DWORD *)(*a1 + 24) = v22 + 1;
    *(_QWORD *)((char *)&a2[2 * a2[4] + 2 + 2 * ((*a2 >> 18) & 1)] + ((unint64_t)*a2 >> 24)) = __ROR8__(v23, 32);
  }
  return result;
}

_QWORD *sub_22E7B8E30(uint64_t *a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  __int128 v17;
  int v18;
  __int128 v19;
  uint64_t v20;

  result = (_QWORD *)sub_22E7B8650(a1, a2);
  v5 = *a1;
  v6 = *(unsigned int *)(*a1 + 24);
  v7 = *(_QWORD *)(*a1 + 32);
  v8 = *(_QWORD *)(v7 + 8 * v6);
  v9 = *(unsigned int *)(v7 + 8 * (v6 + 1));
  v10 = *(_QWORD *)(*a1 + 8);
  v11 = *(unsigned int *)(v10 + 10848);
  v12 = *(_QWORD *)(*(_QWORD *)(v10 + 10840) + 8 * v11 - 8);
  *(_DWORD *)(v10 + 10848) = v11 - 1;
  *(_QWORD *)(a2 + 16) = v12;
  *(_DWORD *)(v5 + 24) = v6 + 3;
  *(_DWORD *)a2 = *(_DWORD *)a2 & 0xFE03FFFF | ((*(_QWORD *)(v7 + 8 * (v6 + 2)) & 0x7F) << 18);
  if ((_DWORD)v8)
  {
    v16 = (uint64_t *)sub_22EFFB554((unsigned __int8 *)a2);
    do
    {
      v18 = v8 - 1;
      v8 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)(*a1 + 8) + 128) + 2032, 24, 3);
      *(_QWORD *)v8 = 0;
      *(_DWORD *)(v8 + 8) = 0;
      result = (_QWORD *)sub_22E783480(*a1, (uint64_t)&v19);
      v17 = v19;
      *(_QWORD *)(v8 + 16) = v20;
      *(_OWORD *)v8 = v17;
      *v16++ = v8;
      LODWORD(v8) = v18;
    }
    while (v18);
  }
  if (v9)
  {
    v13 = *a1;
    v14 = *(unsigned int *)(*a1 + 24);
    *(_DWORD *)(v13 + 24) = v14 + 1;
    v15 = __ROR8__(*(_QWORD *)(*(_QWORD *)(v13 + 32) + 8 * v14), 32);
    result = sub_22EFFB618((unsigned __int8 *)a2);
    *result = v15;
  }
  return result;
}

uint64_t sub_22E7B8F60(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  sub_22E7B8650(a1, a2);
  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v4 + 24) = v5 + 1;
  v6 = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v5);
  *(_DWORD *)a2 = *(_DWORD *)a2 & 0xFEFFFFFF | ((v6 != 0) << 24);
  v7 = *a1;
  v8 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v7 + 24) = v8 + 1;
  *(_DWORD *)a2 = *(_DWORD *)a2 & 0xFF03FFFF | ((*(_QWORD *)(*(_QWORD *)(v7 + 32) + 8 * v8) & 0x3F) << 18);
  v9 = *(_QWORD *)(*a1 + 8);
  v10 = *(unsigned int *)(v9 + 10848);
  v11 = *(_QWORD *)(*(_QWORD *)(v9 + 10840) + 8 * v10 - 8);
  *(_DWORD *)(v9 + 10848) = v10 - 1;
  *(_QWORD *)(a2 + 16) = v11;
  v12 = *(_QWORD *)(*a1 + 8);
  v13 = *(unsigned int *)(v12 + 10848);
  v14 = *(_QWORD *)(*(_QWORD *)(v12 + 10840) + 8 * v13 - 8);
  *(_DWORD *)(v12 + 10848) = v13 - 1;
  *(_QWORD *)(a2 + 24) = v14;
  v15 = *a1;
  v16 = *(_QWORD *)(*a1 + 8);
  v17 = *(_QWORD *)(*a1 + 16);
  v18 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v15 + 24) = v18 + 1;
  HIDWORD(v19) = *(_QWORD *)(*(_QWORD *)(v15 + 32) + 8 * v18);
  LODWORD(v19) = HIDWORD(v19);
  result = sub_22E77BAB4(v16, v17, v19 >> 1);
  *(_DWORD *)(a2 + 4) = result;
  if (v6)
  {
    v21 = *a1;
    v22 = *(unsigned int *)(*a1 + 24);
    *(_DWORD *)(v21 + 24) = v22 + 1;
    v23 = __ROR8__(*(_QWORD *)(*(_QWORD *)(v21 + 32) + 8 * v22), 32);
    v24 = 32;
    if (*(_BYTE *)a2 == 113)
      v24 = 48;
    *(_QWORD *)(a2 + v24) = v23;
  }
  return result;
}

uint64_t sub_22E7B9088(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  _DWORD *v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;

  sub_22E7B8650(a1, a2);
  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(unsigned int *)(v5 + 10848);
  v7 = *(_QWORD *)(*(_QWORD *)(v5 + 10840) + 8 * v6 - 8);
  *(_DWORD *)(v5 + 10848) = v6 - 1;
  if (v7)
  {
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(a2 + 48) & 3 | v7 | 4;
    *(_QWORD *)(v7 + 48) = *(_QWORD *)(v7 + 48) & 3 | a2 & 0xFFFFFFFFFFFFFFFBLL;
  }
  v8 = *(_QWORD *)(v4 + 16);
  v9 = *(unsigned int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v9 + 1;
  HIDWORD(v10) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v9);
  LODWORD(v10) = HIDWORD(v10);
  *(_DWORD *)(a2 + 40) = sub_22E77BAB4(v5, v8, v10 >> 1);
  v11 = *a1;
  v12 = *(_QWORD *)(*a1 + 8);
  v13 = *(_QWORD *)(*a1 + 16);
  v14 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v11 + 24) = v14 + 1;
  HIDWORD(v10) = *(_QWORD *)(*(_QWORD *)(v11 + 32) + 8 * v14);
  LODWORD(v10) = HIDWORD(v10);
  *(_DWORD *)(a2 + 44) = sub_22E77BAB4(v12, v13, v10 >> 1);
  v15 = *a1;
  v16 = (uint64_t *)(*a1 + 32);
  v17 = *v16;
  v18 = (unsigned int *)(*a1 + 24);
  v19 = *v18;
  *v18 = v19 + 1;
  v20 = *(_QWORD *)(v17 + 8 * v19);
  v21 = *(_QWORD *)(v15 + 8);
  if (v20)
  {
    v22 = *(unsigned int *)(v21 + 10848);
    v23 = *(_QWORD *)(*(_QWORD *)(v21 + 10840) + 8 * v22 - 8);
    *(_DWORD *)(v21 + 10848) = v22 - 1;
    v24 = v23 & 0xFFFFFFFFFFFFFFFDLL;
  }
  else
  {
    v36 = sub_22E779F8C(*(_QWORD *)(v15 + 8), *(_QWORD *)(v15 + 16), (uint64_t)v16, v18);
    v23 = 0;
    v24 = sub_22E77F870(v21, v36) | 2;
  }
  *(_QWORD *)(a2 + 56) = v24;
  v25 = *a1;
  v26 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v25 + 24) = v26 + 1;
  *(_DWORD *)a2 = *(_DWORD *)a2 & 0xFFFBFFFF | ((*(_QWORD *)(*(_QWORD *)(v25 + 32) + 8 * v26) != 0) << 18);
  v27 = *a1;
  v28 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v27 + 24) = v28 + 1;
  v29 = *(_QWORD *)(*(_QWORD *)(v27 + 32) + 8 * v28);
  result = (uint64_t)sub_22EFFD480((_QWORD *)a2, *(_QWORD *)(*(_QWORD *)(v27 + 8) + 128), v29);
  if (v20)
  {
    if ((_DWORD)v29)
    {
      v31 = 0;
      do
      {
        v32 = *(_QWORD *)(*a1 + 8);
        v33 = *(unsigned int *)(v32 + 10848);
        v34 = *(_DWORD **)(*(_QWORD *)(v32 + 10840) + 8 * v33 - 8);
        *(_DWORD *)(v32 + 10848) = v33 - 1;
        if (v34)
          v35 = v34;
        else
          v35 = (_DWORD *)v23;
        result = sub_22EFFD554(a2, *(_QWORD *)(v32 + 128), v31++, v35);
      }
      while ((_DWORD)v29 != v31);
    }
  }
  else if ((_DWORD)v29)
  {
    v37 = 0;
    do
    {
      v38 = *(_QWORD *)(*a1 + 8);
      v39 = *(_QWORD *)(v38 + 128);
      v40 = *(unsigned int *)(v38 + 10848);
      v41 = *(_DWORD **)(*(_QWORD *)(v38 + 10840) + 8 * v40 - 8);
      *(_DWORD *)(v38 + 10848) = v40 - 1;
      result = sub_22EFFD554(a2, v39, v37++, v41);
    }
    while ((_DWORD)v29 != v37);
  }
  return result;
}

void sub_22E7B92B0(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  int v25;
  BOOL v26;
  unsigned int *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD v35[9];

  v35[8] = *MEMORY[0x24BDAC8D0];
  sub_22E7B8650(a1, (uint64_t)a2);
  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  v6 = *(_QWORD *)(*a1 + 32);
  v7 = *(_QWORD *)(v6 + 8 * v5);
  *(_DWORD *)(*a1 + 24) = v5 + 2;
  if (*(_QWORD *)(v6 + 8 * (v5 + 1)))
  {
    *(_DWORD *)(v4 + 24) = v5 + 3;
    v8 = *(_QWORD *)(v6 + 8 * (v5 + 2));
    v9 = *a2;
    v10 = *a2;
    if ((v9 & 0x40000) != 0)
    {
      v13 = a2[1];
      if (v10 != 211)
      {
        v12 = (uint64_t)&a2[2 * v13 + 20];
LABEL_9:
        v14 = a2 + 20;
        v11 = (unsigned int *)v12;
        goto LABEL_10;
      }
      v11 = &a2[2 * v13 + 16];
    }
    else
    {
      v11 = 0;
      v12 = 0;
      if (v10 != 211)
        goto LABEL_9;
    }
    v14 = a2 + 16;
LABEL_10:
    sub_22E7B7EB8(a1, v11, (uint64_t)&v14[4 * ((v9 >> 18) & 1) + 2 * a2[1]], v8);
  }
  v33 = v35;
  v34 = 0x800000000;
  if ((_DWORD)v7)
  {
    v15 = v7;
    do
    {
      v16 = *(_QWORD *)(*a1 + 8);
      v17 = sub_22E779F8C(v16, *(_QWORD *)(*a1 + 16), *a1 + 32, (_DWORD *)(*a1 + 24));
      v18 = sub_22E77F870(v16, v17);
      v19 = *a1;
      v20 = *(unsigned int *)(*a1 + 24);
      *(_DWORD *)(v19 + 24) = v20 + 1;
      v21 = *(unsigned int *)(*(_QWORD *)(v19 + 32) + 8 * v20);
      v22 = v34;
      if (v34 >= (unint64_t)HIDWORD(v34))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v22 = v34;
      }
      *((_QWORD *)v33 + v22) = v21 | v18;
      LODWORD(v34) = v34 + 1;
      LODWORD(v7) = v7 - 1;
    }
    while ((_DWORD)v7);
    v23 = (uint64_t *)v33;
    v24 = a2 + 20;
    v25 = *(unsigned __int8 *)a2;
    v26 = v25 == 211;
    if (v25 == 211)
      v27 = a2;
    else
      v27 = 0;
    v28 = v27 + 16;
    if (v26)
      v24 = v28;
    do
    {
      v29 = *v23++;
      *v24++ = v29;
      --v15;
    }
    while (v15);
  }
  sub_22E786254(*a1, (uint64_t)&v31);
  *((_OWORD *)a2 + 1) = v31;
  *((_QWORD *)a2 + 4) = v32;
  *((_QWORD *)a2 + 5) = sub_22E7823B4(*a1);
  *((_QWORD *)a2 + 6) = v30;
  if (v33 != v35)
    free(v33);
}

uint64_t sub_22E7B94C8(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  uint64_t v9;
  char *v10;
  std::string *v11;
  size_t v12;
  char *v13;
  char *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  int v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  __int128 v29;
  int v30;
  int v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int v36;
  char *v37;
  int v38;
  int v39;
  int v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 v46;
  char *v47;
  char *v48;
  int v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  int v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  int v83;
  unint64_t v84;
  char *v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  std::string::size_type v90;
  uint64_t v91;
  uint64_t v92;
  std::string *v93;
  size_t size;
  char *v96;
  char *v97;
  uint64_t v98[2];
  llvm *v99[2];
  unsigned int v100;
  char *v101;
  char v102;
  _QWORD v103[3];
  unsigned int v104;
  void *v105;
  uint64_t v106;
  _BYTE v107[512];
  std::string __p[5];
  uint64_t v109[8];

  v109[6] = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a1 + 10984);
  *(_DWORD *)(a1 + 10984) = 3;
  v5 = a2 + 2720;
  v99[0] = 0;
  v99[1] = 0;
  v100 = 0;
  v103[0] = *(_QWORD *)(a1 + 128);
  v103[1] = a1;
  v103[2] = a2;
  v104 = 0;
  v105 = v107;
  v106 = 0x4000000000;
  v98[0] = (uint64_t)v103;
  v98[1] = a2 + 2720;
  do
  {
    while (1)
    {
      sub_22E748020(v5, 0, (uint64_t)__p);
      if ((__p[0].__r_.__value_.__s.__data_[8] & 1) != 0)
      {
        v89 = (char *)__p[0].__r_.__value_.__r.__words[0];
LABEL_466:
        v97 = v89;
        sub_22F2432A8(&v97, __p);
        if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v93 = __p;
        else
          v93 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
        if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = *((_BYTE *)&__p[0].__r_.__value_.__s + 23) & 0x7F;
        else
          size = __p[0].__r_.__value_.__l.__size_;
        sub_22E769C10(a1, v93, size);
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p[0].__r_.__value_.__l.__data_);
        if (v97)
          (*(void (**)(char *))(*(_QWORD *)v97 + 8))(v97);
        goto LABEL_476;
      }
      if (LODWORD(__p[0].__r_.__value_.__l.__data_) != 2)
        break;
      sub_22E746760(v5, v109);
      v89 = (char *)v109[0];
      if ((__p[0].__r_.__value_.__s.__data_[8] & 1) != 0)
      {
        v90 = __p[0].__r_.__value_.__r.__words[0];
        __p[0].__r_.__value_.__r.__words[0] = 0;
        if (v90)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v90 + 8))(v90);
      }
      if (v89)
        goto LABEL_466;
    }
    if (LODWORD(__p[0].__r_.__value_.__l.__data_) == 1)
      goto LABEL_464;
    if (!LODWORD(__p[0].__r_.__value_.__l.__data_))
    {
      sub_22E769C10(a1, "malformed block record in AST file", 0x22uLL);
      goto LABEL_476;
    }
    v6 = *(_QWORD *)(a1 + 128);
    v104 = 0;
    LODWORD(v106) = 0;
    llvm::BitstreamCursor::readRecord();
    if ((v102 & 1) != 0)
    {
      v10 = v101;
      v101 = 0;
      v96 = v10;
      sub_22F2432A8(&v96, __p);
      if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v11 = __p;
      else
        v11 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
      if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = *((_BYTE *)&__p[0].__r_.__value_.__s + 23) & 0x7F;
      else
        v12 = __p[0].__r_.__value_.__l.__size_;
      sub_22E769C10(a1, v11, v12);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      if (v96)
        (*(void (**)(char *))(*(_QWORD *)v96 + 8))(v96);
      v8 = 1;
    }
    else
    {
      v7 = 0;
      v8 = 3;
      switch((int)v101)
      {
        case 138:
          goto LABEL_328;
        case 140:
          v9 = v104++;
          __p[0].__r_.__value_.__r.__words[0] = *((_QWORD *)v105 + v9);
          v7 = (unsigned __int8 *)sub_22E7BE330((uint64_t)v99, (uint64_t *)__p)[1];
          goto LABEL_9;
        case 141:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 8, 3);
          *v7 = 19;
          if (!byte_255E04EB3)
            goto LABEL_318;
          v15 = 19;
          goto LABEL_140;
        case 142:
          v20 = (uint64_t)sub_22F0D6674(v6, *(_DWORD *)v105);
          goto LABEL_317;
        case 143:
          v20 = sub_22F3F2838(v6, *((_QWORD *)v105 + 3) != 0);
          goto LABEL_317;
        case 144:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 32, 3);
          *v7 = 99;
          if (byte_255E04EB3)
          {
            v69 = sub_22F0D3748(99);
            ++*((_DWORD *)v69 + 2);
          }
          *((_DWORD *)v7 + 2) = 0;
          *((_QWORD *)v7 + 2) = 0;
          goto LABEL_318;
        case 145:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 32, 3);
          *v7 = -21;
          if (byte_255E04EB3)
          {
            v13 = sub_22F0D3748(235);
            ++*((_DWORD *)v13 + 2);
          }
          v7[24] = 0;
          goto LABEL_318;
        case 146:
          v20 = (uint64_t)sub_22F3F1AD0(v6, *(_DWORD *)v105);
          goto LABEL_317;
        case 147:
          v20 = sub_22F3F22DC(v6, *(_QWORD *)v105 != 0, *((_QWORD *)v105 + 1) != 0, *((_QWORD *)v105 + 2) != 0);
          goto LABEL_317;
        case 148:
          v20 = sub_22F3F2574(v6, *(_QWORD *)v105 != 0, *((_QWORD *)v105 + 1) != 0);
          goto LABEL_317;
        case 149:
          v20 = sub_22F3F27B0(v6, *(_QWORD *)v105 != 0);
          goto LABEL_317;
        case 150:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 32, 3);
          *v7 = 13;
          if (!byte_255E04EB3)
            goto LABEL_307;
          v31 = 13;
          goto LABEL_275;
        case 151:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 56, 3);
          *v7 = 14;
          if (byte_255E04EB3)
          {
            v82 = sub_22F0D3748(14);
            ++*((_DWORD *)v82 + 2);
          }
          *((_QWORD *)v7 + 6) = 0;
          goto LABEL_318;
        case 152:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 24, 3);
          *v7 = 15;
          if (byte_255E04EB3)
          {
            v14 = sub_22F0D3748(15);
            ++*((_DWORD *)v14 + 2);
          }
          goto LABEL_241;
        case 153:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 24, 3);
          *v7 = 17;
          if (!byte_255E04EB3)
            goto LABEL_282;
          v16 = 17;
          goto LABEL_281;
        case 154:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 8, 3);
          *v7 = 9;
          if (!byte_255E04EB3)
            goto LABEL_318;
          v15 = 9;
          goto LABEL_140;
        case 155:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 8, 3);
          *v7 = 3;
          if (!byte_255E04EB3)
            goto LABEL_318;
          v15 = 3;
LABEL_140:
          v47 = sub_22F0D3748(v15);
          ++*((_DWORD *)v47 + 2);
          goto LABEL_318;
        case 156:
          v20 = (uint64_t)sub_22F0D83C4(v6, *(_QWORD *)v105 != 0);
          goto LABEL_317;
        case 157:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 24, 3);
          *v7 = 12;
          if (!byte_255E04EB3)
            goto LABEL_286;
          v19 = 12;
          goto LABEL_285;
        case 158:
          v20 = sub_22F3F2BB0(v6, *(_DWORD *)v105);
          goto LABEL_317;
        case 159:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 88, 3);
          *v7 = 1;
          if (byte_255E04EB3)
          {
            v25 = sub_22F0D3748(1);
            ++*((_DWORD *)v25 + 2);
          }
          *((_DWORD *)v7 + 2) = 0;
          *((_QWORD *)v7 + 4) = 0;
          *((_DWORD *)v7 + 10) = 0;
          *((_QWORD *)v7 + 8) = 0;
          *((_QWORD *)v7 + 9) = 0;
          *((_QWORD *)v7 + 7) = 0;
          *((_DWORD *)v7 + 20) = 0;
          goto LABEL_318;
        case 160:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 96, 3);
          *v7 = 2;
          if (byte_255E04EB3)
          {
            v26 = sub_22F0D3748(2);
            ++*((_DWORD *)v26 + 2);
          }
          *((_DWORD *)v7 + 2) = 0;
          *((_OWORD *)v7 + 2) = 0u;
          *((_OWORD *)v7 + 3) = 0u;
          *((_DWORD *)v7 + 16) = 0;
          *((_QWORD *)v7 + 10) = 0;
          *((_QWORD *)v7 + 11) = 0;
          *((_QWORD *)v7 + 9) = 0;
          goto LABEL_318;
        case 161:
          v20 = sub_22EFF66F8(v6, *((_DWORD *)v105 + 16));
          goto LABEL_317;
        case 162:
          v20 = sub_22F3C12A4(v6, *((_QWORD *)v105 + 8) != 0);
          goto LABEL_317;
        case 163:
          v17 = *((_QWORD *)v105 + 10);
          if (v17)
            v18 = *((_QWORD *)v105 + 14);
          else
            LODWORD(v18) = 0;
          v20 = sub_22EFF6EB0(v6, *((_QWORD *)v105 + 8) != 0, *((_QWORD *)v105 + 9) != 0, v17 != 0, v18);
          goto LABEL_317;
        case 164:
          v66 = sub_22EFF9000(v6);
          goto LABEL_220;
        case 165:
          v66 = sub_22F3C1698(v6);
          goto LABEL_220;
        case 166:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 24, 3);
          *v7 = -78;
          if (!byte_255E04EB3)
            goto LABEL_287;
          v21 = 178;
          goto LABEL_256;
        case 167:
          v20 = sub_22F3C17BC(v6, *((_DWORD *)v105 + 16), *((_DWORD *)v105 + 18), *((_DWORD *)v105 + 20));
          goto LABEL_317;
        case 168:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 24, 3);
          *v7 = -102;
          if (!byte_255E04EB3)
            goto LABEL_92;
          v36 = 154;
          goto LABEL_91;
        case 169:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 32, 3);
          *v7 = -42;
          if (!byte_255E04EB3)
            goto LABEL_286;
          v19 = 214;
          goto LABEL_285;
        case 170:
          v20 = sub_22F3C2D08(v6, *((_DWORD *)v105 + 16));
          goto LABEL_317;
        case 171:
          v20 = sub_22F00312C(v6, *((_QWORD *)v105 + 8) != 0);
          goto LABEL_317;
        case 172:
          v20 = sub_22F3C1998(v6, *((_DWORD *)v105 + 16), *((_DWORD *)v105 + 18));
          goto LABEL_317;
        case 173:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 32, 3);
          *v7 = -24;
          if (!byte_255E04EB3)
            goto LABEL_306;
          v40 = 232;
          goto LABEL_305;
        case 174:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 32, 3);
          *v7 = 107;
          if (!byte_255E04EB3)
            goto LABEL_287;
          v21 = 107;
          goto LABEL_256;
        case 175:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 40, 3);
          *v7 = -69;
          if (!byte_255E04EB3)
            goto LABEL_287;
          v21 = 187;
          goto LABEL_256;
        case 176:
          v20 = sub_22EFFA550(v6, *((_DWORD *)v105 + 16), *((_QWORD *)v105 + 9) != 0);
          goto LABEL_317;
        case 177:
          v20 = sub_22EFFB1E8(v6, *((_QWORD *)v105 + 8) != 0, *((_QWORD *)v105 + 9) != 0, *((_QWORD *)v105 + 10) != 0, *((_DWORD *)v105 + 22));
          goto LABEL_317;
        case 178:
          v20 = sub_22F00300C(v6, *((_QWORD *)v105 + 8) != 0);
          goto LABEL_317;
        case 179:
          v20 = sub_22F3C2D84(v6, *((_QWORD *)v105 + 8) != 0);
          goto LABEL_317;
        case 180:
          v20 = sub_22F3C2E0C(v6, *((_QWORD *)v105 + 8) != 0);
          goto LABEL_317;
        case 181:
          v20 = sub_22EFFB70C(v6, *((_DWORD *)v105 + 16), *((_QWORD *)v105 + 9) != 0);
          goto LABEL_317;
        case 182:
          v20 = sub_22F3C1CA0(v6, *((_DWORD *)v105 + 16), *((_QWORD *)v105 + 9) != 0);
          goto LABEL_317;
        case 183:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 40, 3);
          *v7 = -100;
          if (byte_255E04EB3)
          {
            v22 = sub_22F0D3748(156);
            ++*((_DWORD *)v22 + 2);
          }
          *((_QWORD *)v7 + 1) = 0;
          *((_DWORD *)v7 + 4) = 0;
          goto LABEL_307;
        case 184:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 40, 3);
          *v7 = -89;
          if (!byte_255E04EB3)
            goto LABEL_260;
          v64 = 167;
          goto LABEL_259;
        case 185:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 64, 3);
          *v7 = -76;
          if (byte_255E04EB3)
          {
            v28 = sub_22F0D3748(180);
            ++*((_DWORD *)v28 + 2);
          }
          *((_QWORD *)v7 + 5) = 0;
          *(_OWORD *)(v7 + 24) = 0u;
          *(_OWORD *)(v7 + 8) = 0u;
          v29 = xmmword_22F45F9F0;
          goto LABEL_196;
        case 186:
          v20 = sub_22F3C2914(v6, *((_DWORD *)v105 + 16) - 1);
          goto LABEL_317;
        case 187:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 32, 3);
          *v7 = -91;
          if (!byte_255E04EB3)
            goto LABEL_287;
          v21 = 165;
          goto LABEL_256;
        case 188:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 16, 3);
          *v7 = -66;
          if (!byte_255E04EB3)
            goto LABEL_287;
          v21 = 190;
          goto LABEL_256;
        case 189:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 32, 3);
          *v7 = 106;
          if (!byte_255E04EB3)
            goto LABEL_299;
          v24 = 106;
          goto LABEL_298;
        case 190:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 16, 3);
          *v7 = 105;
          if (!byte_255E04EB3)
            goto LABEL_287;
          v21 = 105;
          goto LABEL_256;
        case 191:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 16, 3);
          *v7 = -77;
          if (!byte_255E04EB3)
            goto LABEL_287;
          v21 = 179;
          goto LABEL_256;
        case 192:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 40, 3);
          *v7 = -22;
          if (!byte_255E04EB3)
            goto LABEL_225;
          v23 = 234;
          goto LABEL_224;
        case 193:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 32, 3);
          *v7 = 104;
          if (!byte_255E04EB3)
            goto LABEL_286;
          v19 = 104;
          goto LABEL_285;
        case 194:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 32, 3);
          *v7 = -32;
          if (!byte_255E04EB3)
            goto LABEL_306;
          v40 = 224;
          goto LABEL_305;
        case 195:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 56, 3);
          *v7 = -101;
          if (byte_255E04EB3)
          {
            v77 = sub_22F0D3748(155);
            ++*((_DWORD *)v77 + 2);
          }
          *((_QWORD *)v7 + 1) = 0;
          *((_QWORD *)v7 + 5) = 0;
          goto LABEL_318;
        case 196:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 24, 3);
          *v7 = -81;
          if (!byte_255E04EB3)
            goto LABEL_240;
          v38 = 175;
          goto LABEL_239;
        case 197:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 32, 3);
          *v7 = -33;
          if (!byte_255E04EB3)
            goto LABEL_286;
          v19 = 223;
          goto LABEL_285;
        case 198:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 40, 3);
          *v7 = -35;
          if (!byte_255E04EB3)
            goto LABEL_299;
          v24 = 221;
          goto LABEL_298;
        case 199:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 40, 3);
          *v7 = -98;
          if (!byte_255E04EB3)
            goto LABEL_114;
          v30 = 158;
          goto LABEL_113;
        case 200:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 24, 3);
          *v7 = 114;
          if (!byte_255E04EB3)
            goto LABEL_287;
          v21 = 114;
          goto LABEL_256;
        case 201:
          v20 = sub_22F3C280C(v6, *((_DWORD *)v105 + 16));
          goto LABEL_317;
        case 202:
          v20 = sub_22F3C2F78(v6, *((_DWORD *)v105 + 16));
          goto LABEL_317;
        case 203:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 88, 3);
          *v7 = 111;
          if (byte_255E04EB3)
          {
            v80 = sub_22F0D3748(111);
            ++*((_DWORD *)v80 + 2);
          }
          *((_QWORD *)v7 + 1) = 0;
          *((_DWORD *)v7 + 19) = 0;
          *((_DWORD *)v7 + 20) = 0;
          goto LABEL_318;
        case 204:
          v20 = sub_22F3C3434(v6, *((_DWORD *)v105 + 16));
          goto LABEL_317;
        case 205:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 32, 3);
          *v7 = -52;
          if (byte_255E04EB3)
          {
            v35 = sub_22F0D3748(204);
            ++*((_DWORD *)v35 + 2);
          }
          goto LABEL_125;
        case 206:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 40, 3);
          *v7 = -54;
          if (!byte_255E04EB3)
            goto LABEL_114;
          v30 = 202;
          goto LABEL_113;
        case 207:
          v20 = sub_22F3C7214(v6, *((_DWORD *)v105 + 16));
          goto LABEL_317;
        case 208:
          v20 = sub_22F3C7430(v6, *((_DWORD *)v105 + 16), *((_QWORD *)v105 + 9) != 0);
          goto LABEL_317;
        case 209:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 32, 3);
          *v7 = -60;
          if (!byte_255E04EB3)
            goto LABEL_306;
          v40 = 196;
          goto LABEL_305;
        case 210:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 32, 3);
          *v7 = -49;
          if (!byte_255E04EB3)
            goto LABEL_299;
          v24 = 207;
          goto LABEL_298;
        case 211:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 40, 3);
          *v7 = -50;
          if (byte_255E04EB3)
          {
            v78 = sub_22F0D3748(206);
            ++*((_DWORD *)v78 + 2);
          }
          *((_QWORD *)v7 + 1) = 0;
          *((_QWORD *)v7 + 3) = 0;
          goto LABEL_295;
        case 212:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 48, 3);
          *v7 = -57;
          if (!byte_255E04EB3)
            goto LABEL_114;
          v30 = 199;
LABEL_113:
          v42 = sub_22F0D3748(v30);
          ++*((_DWORD *)v42 + 2);
LABEL_114:
          *((_QWORD *)v7 + 1) = 0;
          goto LABEL_168;
        case 213:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 48, 3);
          *v7 = -51;
          if (byte_255E04EB3)
          {
            v55 = sub_22F0D3748(205);
            ++*((_DWORD *)v55 + 2);
          }
          *((_QWORD *)v7 + 5) = 0;
          goto LABEL_225;
        case 214:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 56, 3);
          *v7 = -48;
          if (!byte_255E04EB3)
            goto LABEL_240;
          v38 = 208;
          goto LABEL_239;
        case 216:
          v20 = sub_22F3C7898(v6, *((_DWORD *)v105 + 16), *((_DWORD *)v105 + 18));
          goto LABEL_317;
        case 217:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 40, 3);
          *v7 = -58;
          if (!byte_255E04EB3)
            goto LABEL_306;
          v40 = 198;
          goto LABEL_305;
        case 218:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 24, 3);
          *v7 = -59;
          if (!byte_255E04EB3)
            goto LABEL_287;
          v21 = 197;
          goto LABEL_256;
        case 219:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 40, 3);
          *v7 = 92;
          if (byte_255E04EB3)
          {
            v27 = sub_22F0D3748(92);
            ++*((_DWORD *)v27 + 2);
          }
          goto LABEL_168;
        case 220:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 32, 3);
          *v7 = 86;
          if (!byte_255E04EB3)
            goto LABEL_307;
          v31 = 86;
LABEL_275:
          v74 = sub_22F0D3748(v31);
          ++*((_DWORD *)v74 + 2);
          goto LABEL_307;
        case 221:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 24, 3);
          *v7 = 87;
          if (!byte_255E04EB3)
            goto LABEL_282;
          v16 = 87;
          goto LABEL_281;
        case 222:
          v20 = sub_22F3F3180(v6, *(_DWORD *)v105, *((_QWORD *)v105 + 1) != 0);
          goto LABEL_317;
        case 223:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 32, 3);
          *v7 = 88;
          if (!byte_255E04EB3)
            goto LABEL_282;
          v16 = 88;
          goto LABEL_281;
        case 224:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 24, 3);
          *v7 = 89;
          if (!byte_255E04EB3)
            goto LABEL_282;
          v16 = 89;
          goto LABEL_281;
        case 225:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 24, 3);
          *v7 = 91;
          if (!byte_255E04EB3)
            goto LABEL_282;
          v16 = 91;
          goto LABEL_281;
        case 226:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 24, 3);
          *v7 = -61;
          if (!byte_255E04EB3)
            goto LABEL_92;
          v36 = 195;
LABEL_91:
          v37 = sub_22F0D3748(v36);
          ++*((_DWORD *)v37 + 2);
LABEL_92:
          *((_QWORD *)v7 + 1) = 0;
          *((_DWORD *)v7 + 5) = 0;
          goto LABEL_318;
        case 227:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 88, 3);
          *v7 = -62;
          if (byte_255E04EB3)
          {
            v45 = sub_22F0D3748(194);
            ++*((_DWORD *)v45 + 2);
          }
          v46 = 0uLL;
          *(_OWORD *)(v7 + 72) = 0u;
          *(_OWORD *)(v7 + 56) = 0u;
          *(_OWORD *)(v7 + 40) = 0u;
          goto LABEL_226;
        case 228:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 32, 3);
          *v7 = 4;
          if (byte_255E04EB3)
          {
            v72 = sub_22F0D3748(4);
            ++*((_DWORD *)v72 + 2);
          }
          *((_DWORD *)v7 + 2) = 0;
          goto LABEL_266;
        case 229:
          v20 = sub_22F3F2DE4(v6, *(_DWORD *)v105);
          goto LABEL_317;
        case 230:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 96, 3);
          *v7 = 5;
          if (byte_255E04EB3)
          {
            v73 = sub_22F0D3748(5);
            ++*((_DWORD *)v73 + 2);
          }
          *((_DWORD *)v7 + 2) = 0;
          *((_QWORD *)v7 + 10) = 0;
          *((_DWORD *)v7 + 22) = 0;
          goto LABEL_318;
        case 231:
          v20 = sub_22F060DB8(v6, *((_DWORD *)v105 + 16), *((_QWORD *)v105 + 9) != 0);
          goto LABEL_317;
        case 232:
          v20 = sub_22F3C5808(v6, *((_DWORD *)v105 + 16), *((_QWORD *)v105 + 9) != 0);
          goto LABEL_317;
        case 233:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 24, 3);
          *v7 = -126;
          if (!byte_255E04EB3)
            goto LABEL_286;
          v19 = 130;
          goto LABEL_285;
        case 234:
          v20 = sub_22F3C601C(v6, *((_DWORD *)v105 + 16));
          goto LABEL_317;
        case 235:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 32, 3);
          *v7 = 125;
          if (byte_255E04EB3)
          {
            v65 = sub_22F0D3748(125);
            ++*((_DWORD *)v65 + 2);
          }
          *((_QWORD *)v7 + 1) = 0;
          *((_QWORD *)v7 + 2) = 0;
          *((_DWORD *)v7 + 6) = 0;
          v7[28] &= 0xFCu;
          goto LABEL_318;
        case 236:
          v20 = sub_22F3C5FAC(v6, *((_DWORD *)v105 + 16));
          goto LABEL_317;
        case 237:
          v20 = sub_22F3C58A0(v6, *((_DWORD *)v105 + 16), *((_QWORD *)v105 + 9) != 0);
          goto LABEL_317;
        case 238:
          v20 = sub_22F3C59B4(v6, *((_DWORD *)v105 + 16));
          goto LABEL_317;
        case 239:
          v20 = sub_22F3C5B00(v6, *((_DWORD *)v105 + 16));
          goto LABEL_317;
        case 240:
          v66 = sub_22F3C5C00(v6);
          goto LABEL_220;
        case 241:
          v66 = sub_22F3C5CA0(v6);
          goto LABEL_220;
        case 242:
          v20 = sub_22F061354(v6, *((_DWORD *)v105 + 16), *((_QWORD *)v105 + 9) != 0);
          goto LABEL_317;
        case 243:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 40, 3);
          *v7 = -113;
          if (!byte_255E04EB3)
            goto LABEL_167;
          v39 = 143;
          goto LABEL_166;
        case 244:
          v20 = sub_22F3C5D98(v6, *((_DWORD *)v105 + 16), *((_QWORD *)v105 + 9) != 0);
          goto LABEL_317;
        case 245:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 24, 3);
          *v7 = -124;
          if (!byte_255E04EB3)
            goto LABEL_286;
          v19 = 132;
          goto LABEL_285;
        case 246:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 16, 3);
          *v7 = 117;
          if (!byte_255E04EB3)
            goto LABEL_287;
          v21 = 117;
          goto LABEL_256;
        case 247:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 16, 3);
          *v7 = 0x80;
          if (!byte_255E04EB3)
            goto LABEL_287;
          v21 = 128;
          goto LABEL_256;
        case 248:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 32, 3);
          *v7 = -121;
          if (!byte_255E04EB3)
            goto LABEL_299;
          v24 = 135;
          goto LABEL_298;
        case 249:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 32, 3);
          *v7 = -121;
          if (byte_255E04EB3)
          {
            v58 = sub_22F0D3748(135);
            ++*((_DWORD *)v58 + 2);
          }
          *((_QWORD *)v7 + 1) = 0;
          *((_QWORD *)v7 + 2) = 4;
          *((_QWORD *)v7 + 3) = 0;
          goto LABEL_318;
        case 250:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 16, 3);
          *v7 = -123;
          if (!byte_255E04EB3)
            goto LABEL_287;
          v21 = 133;
          goto LABEL_256;
        case 251:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 24, 3);
          *v7 = -122;
          if (!byte_255E04EB3)
            goto LABEL_287;
          v21 = 134;
          goto LABEL_256;
        case 252:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 32, 3);
          *v7 = 120;
          if (!byte_255E04EB3)
            goto LABEL_287;
          v21 = 120;
          goto LABEL_256;
        case 253:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 32, 3);
          *v7 = 121;
          if (!byte_255E04EB3)
            goto LABEL_287;
          v21 = 121;
          goto LABEL_256;
        case 254:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 32, 3);
          *v7 = 116;
          if (!byte_255E04EB3)
            goto LABEL_299;
          v24 = 116;
          goto LABEL_298;
        case 255:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 24, 3);
          *v7 = -125;
          if (!byte_255E04EB3)
            goto LABEL_287;
          v21 = 131;
          goto LABEL_256;
        case 256:
          v20 = sub_22F3C5620(v6, *((_QWORD *)v105 + 8) != 0, *((_QWORD *)v105 + 9) != 0, *((_DWORD *)v105 + 20), *((_QWORD *)v105 + 11) != 0);
          goto LABEL_317;
        case 257:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 32, 3);
          *v7 = 122;
          if (!byte_255E04EB3)
            goto LABEL_299;
          v24 = 122;
LABEL_298:
          v79 = sub_22F0D3748(v24);
          ++*((_DWORD *)v79 + 2);
LABEL_299:
          *((_QWORD *)v7 + 1) = 0;
          *((_QWORD *)v7 + 2) = 0;
          goto LABEL_307;
        case 258:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 80, 3);
          sub_22F2CCF68((uint64_t)v7);
          goto LABEL_318;
        case 259:
          v20 = sub_22F3C6768(v6, *((_DWORD *)v105 + 16));
          goto LABEL_317;
        case 260:
          v20 = sub_22F3C688C(v6, *((_QWORD *)v105 + 8) != 0, *((_DWORD *)v105 + 18), *((_QWORD *)v105 + 10) != 0);
          goto LABEL_317;
        case 261:
          v33 = *((_QWORD *)v105 + 8);
          if (v33)
            v34 = *((_QWORD *)v105 + 9);
          else
            LODWORD(v34) = 0;
          v20 = (uint64_t)sub_22F0609B4(v6, v33 != 0, v34);
          goto LABEL_317;
        case 262:
          v20 = sub_22F061A98(v6, *((_DWORD *)v105 + 16));
          goto LABEL_317;
        case 263:
          v87 = *((_QWORD *)v105 + 9);
          if (v87)
            v88 = *((_QWORD *)v105 + 10);
          else
            LODWORD(v88) = 0;
          v20 = (uint64_t)sub_22F3C6974(v6, *((_DWORD *)v105 + 16), v87 != 0, v88);
          goto LABEL_317;
        case 264:
          v61 = *((_QWORD *)v105 + 9);
          if (v61)
            v62 = *((_QWORD *)v105 + 10);
          else
            LODWORD(v62) = 0;
          v20 = sub_22F060768(v6, *((_DWORD *)v105 + 16), v61 != 0, v62);
          goto LABEL_317;
        case 265:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 40, 3);
          *v7 = -90;
          if (byte_255E04EB3)
          {
            v32 = sub_22F0D3748(166);
            ++*((_DWORD *)v32 + 2);
          }
          *((_QWORD *)v7 + 4) = 0;
          goto LABEL_124;
        case 266:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 32, 3);
          *v7 = 127;
          if (!byte_255E04EB3)
            goto LABEL_306;
          v40 = 127;
          goto LABEL_305;
        case 267:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 24, 3);
          *v7 = -46;
          if (!byte_255E04EB3)
            goto LABEL_287;
          v21 = 210;
LABEL_256:
          v70 = sub_22F0D3748(v21);
          ++*((_DWORD *)v70 + 2);
          goto LABEL_287;
        case 268:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 64, 3);
          *v7 = 102;
          if (!byte_255E04EB3)
            goto LABEL_286;
          v19 = 102;
          goto LABEL_285;
        case 269:
          v20 = sub_22F0625CC(v6, *((_DWORD *)v105 + 16));
          goto LABEL_317;
        case 270:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 56, 3);
          *v7 = 108;
          if (byte_255E04EB3)
          {
            v43 = sub_22F0D3748(108);
            ++*((_DWORD *)v43 + 2);
          }
          *((_QWORD *)v7 + 1) = 0;
          v7[16] &= 0xFCu;
          *((_QWORD *)v7 + 3) = 0;
          goto LABEL_155;
        case 271:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 32, 3);
          *v7 = -43;
          if (!byte_255E04EB3)
            goto LABEL_240;
          v38 = 213;
          goto LABEL_239;
        case 272:
          v20 = sub_22F3C69C0(v6, *((_DWORD *)v105 + 16));
          goto LABEL_317;
        case 273:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 32, 3);
          *v7 = -30;
          if (!byte_255E04EB3)
            goto LABEL_286;
          v19 = 226;
          goto LABEL_285;
        case 274:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 40, 3);
          *v7 = -29;
          if (byte_255E04EB3)
          {
            v57 = sub_22F0D3748(227);
            ++*((_DWORD *)v57 + 2);
          }
          *((_QWORD *)v7 + 1) = 0;
          *((_DWORD *)v7 + 9) = 0;
          goto LABEL_318;
        case 275:
          v20 = sub_22F3C6C1C(v6, *((_DWORD *)v105 + 16));
          goto LABEL_317;
        case 276:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 24, 3);
          *v7 = -70;
          if (!byte_255E04EB3)
            goto LABEL_286;
          v19 = 186;
LABEL_285:
          v76 = sub_22F0D3748(v19);
          ++*((_DWORD *)v76 + 2);
          goto LABEL_286;
        case 277:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 64, 3);
          *v7 = 124;
          if (byte_255E04EB3)
          {
            v44 = sub_22F0D3748(124);
            ++*((_DWORD *)v44 + 2);
          }
LABEL_124:
          *((_QWORD *)v7 + 2) = 0;
LABEL_125:
          *((_QWORD *)v7 + 1) = 0;
          *((_DWORD *)v7 + 6) = 0;
          goto LABEL_318;
        case 278:
          v20 = sub_22F3C40B8(v6, *((_DWORD *)v105 + 16));
          goto LABEL_317;
        case 279:
          v20 = sub_22F3C41DC(v6, *((_DWORD *)v105 + 16), *((_DWORD *)v105 + 18));
          goto LABEL_317;
        case 280:
          v20 = sub_22F3C6E1C(v6, *((_DWORD *)v105 + 16), *((_QWORD *)v105 + 9) != 0);
          goto LABEL_317;
        case 281:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 32, 3);
          *v7 = 109;
          if (!byte_255E04EB3)
            goto LABEL_306;
          v40 = 109;
          goto LABEL_305;
        case 282:
          v20 = sub_22F3C1E4C(v6, *((_DWORD *)v105 + 16));
          goto LABEL_317;
        case 283:
          v20 = sub_22F3C1F18(v6, *((_DWORD *)v105 + 16));
          goto LABEL_317;
        case 284:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 40, 3);
          *v7 = -85;
          if (!byte_255E04EB3)
            goto LABEL_225;
          v23 = 171;
          goto LABEL_224;
        case 285:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 40, 3);
          *v7 = -79;
          if (byte_255E04EB3)
          {
            v51 = sub_22F0D3748(177);
            ++*((_DWORD *)v51 + 2);
          }
          *((_QWORD *)v7 + 1) = 0;
          *((_QWORD *)v7 + 2) = 0;
          *((_DWORD *)v7 + 8) = 0;
          goto LABEL_307;
        case 286:
          v20 = sub_22F3C2018(v6, *((_DWORD *)v105 + 16));
          goto LABEL_317;
        case 287:
          v20 = sub_22F3C208C(v6, *((_DWORD *)v105 + 16));
          goto LABEL_317;
        case 288:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 48, 3);
          *v7 = -27;
          if (byte_255E04EB3)
          {
            v60 = sub_22F0D3748(229);
            ++*((_DWORD *)v60 + 2);
          }
          *((_DWORD *)v7 + 9) = 0;
          *((_DWORD *)v7 + 10) = 0;
          *((_QWORD *)v7 + 2) = 0;
          *((_QWORD *)v7 + 3) = 0;
          *((_QWORD *)v7 + 1) = 0;
          v7[32] = 0;
          goto LABEL_318;
        case 289:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 40, 3);
          *v7 = -28;
          if (!byte_255E04EB3)
            goto LABEL_225;
          v23 = 228;
LABEL_224:
          v67 = sub_22F0D3748(v23);
          ++*((_DWORD *)v67 + 2);
LABEL_225:
          v46 = 0uLL;
LABEL_226:
          *(_OWORD *)(v7 + 24) = v46;
          goto LABEL_227;
        case 290:
          v66 = sub_22F3C5CC0(v6);
          goto LABEL_220;
        case 291:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 48, 3);
          *v7 = -67;
          if (!byte_255E04EB3)
            goto LABEL_306;
          v40 = 189;
LABEL_305:
          v81 = sub_22F0D3748(v40);
          ++*((_DWORD *)v81 + 2);
LABEL_306:
          *((_QWORD *)v7 + 1) = 0;
LABEL_307:
          *((_QWORD *)v7 + 3) = 0;
          goto LABEL_318;
        case 292:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 56, 3);
          *v7 = -73;
          if (byte_255E04EB3)
          {
            v50 = sub_22F0D3748(183);
            ++*((_DWORD *)v50 + 2);
          }
          *((_QWORD *)v7 + 1) = 0;
          *((_DWORD *)v7 + 8) = 0;
LABEL_155:
          *((_QWORD *)v7 + 5) = 0;
          *((_QWORD *)v7 + 6) = 0;
          goto LABEL_318;
        case 293:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 40, 3);
          *v7 = -72;
          if (byte_255E04EB3)
          {
            v64 = 184;
LABEL_259:
            v71 = sub_22F0D3748(v64);
            ++*((_DWORD *)v71 + 2);
          }
LABEL_260:
          *((_QWORD *)v7 + 1) = 0;
LABEL_295:
          *((_DWORD *)v7 + 8) = 0;
          goto LABEL_318;
        case 294:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 40, 3);
          *v7 = -119;
          if (byte_255E04EB3)
          {
            v63 = sub_22F0D3748(137);
            ++*((_DWORD *)v63 + 2);
          }
          *((_QWORD *)v7 + 4) = 0;
LABEL_286:
          *((_QWORD *)v7 + 2) = 0;
LABEL_287:
          *((_QWORD *)v7 + 1) = 0;
          goto LABEL_318;
        case 295:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 40, 3);
          *v7 = -119;
          if (byte_255E04EB3)
          {
            v48 = sub_22F0D3748(137);
            ++*((_DWORD *)v48 + 2);
          }
          *((_QWORD *)v7 + 4) = 0;
          v46 = xmmword_22F4559B0;
LABEL_227:
          *(_OWORD *)(v7 + 8) = v46;
          goto LABEL_318;
        case 296:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 16, 3);
          *v7 = 96;
          if (!byte_255E04EB3)
            goto LABEL_282;
          v16 = 96;
          goto LABEL_281;
        case 297:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 32, 3);
          *v7 = 94;
          if (!byte_255E04EB3)
            goto LABEL_282;
          v16 = 94;
          goto LABEL_281;
        case 298:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 24, 3);
          *v7 = 95;
          if (!byte_255E04EB3)
            goto LABEL_282;
          v16 = 95;
LABEL_281:
          v75 = sub_22F0D3748(v16);
          ++*((_DWORD *)v75 + 2);
LABEL_282:
          *((_DWORD *)v7 + 2) = 0;
          goto LABEL_318;
        case 299:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 32, 3);
          *v7 = 97;
          if (byte_255E04EB3)
          {
            v41 = sub_22F0D3748(97);
            ++*((_DWORD *)v41 + 2);
          }
          *((_DWORD *)v7 + 3) = 0;
          goto LABEL_318;
        case 300:
          v66 = sub_22F3F32FC(v6, *(_DWORD *)v105, 1, 1);
          goto LABEL_220;
        case 301:
          v20 = sub_22F2CCE90(v6);
          goto LABEL_317;
        case 302:
          v66 = sub_22F3F3488(v6, *(_DWORD *)v105, 1, 1);
          goto LABEL_220;
        case 303:
          v66 = sub_22F3F392C(v6, *((_DWORD *)v105 + 2), *(_DWORD *)v105);
          goto LABEL_220;
        case 304:
          v66 = sub_22F3F4188(v6, *((_DWORD *)v105 + 2), *(_DWORD *)v105);
          goto LABEL_220;
        case 305:
          v86 = *((_DWORD *)v105 + 2);
          LODWORD(__p[0].__r_.__value_.__l.__data_) = 0;
          LODWORD(v109[0]) = 0;
          v66 = sub_22F3F43F4(v6, v86, 1, 2, (int *)__p, (int *)v109);
          goto LABEL_220;
        case 306:
          v66 = sub_22F3F3F10(v6, *((_DWORD *)v105 + 2), *(_DWORD *)v105);
          goto LABEL_220;
        case 307:
          v66 = sub_22F3F4954(v6, *((_DWORD *)v105 + 2), *(_DWORD *)v105);
          goto LABEL_220;
        case 308:
          v66 = sub_22F3F4B44(v6, *(_DWORD *)v105, 1, 1);
          goto LABEL_220;
        case 309:
          v66 = sub_22F3F4CD4(v6, 0, 1, 0);
          goto LABEL_220;
        case 310:
          v66 = sub_22F3F4E94(v6, *(_DWORD *)v105, 1, 0);
          goto LABEL_220;
        case 311:
          v66 = sub_22F3F501C(v6, 0, 1, 0);
          goto LABEL_220;
        case 312:
          v66 = sub_22F3F51BC(v6, *(_DWORD *)v105, 1, 0);
          goto LABEL_220;
        case 313:
          v66 = sub_22F3F5744(v6, *((_DWORD *)v105 + 2), *(_DWORD *)v105);
          goto LABEL_220;
        case 314:
          v66 = sub_22F3F5CF0(v6, *((_DWORD *)v105 + 2), *(_DWORD *)v105);
          goto LABEL_220;
        case 315:
          v66 = sub_22F3F5F30(v6, *(_DWORD *)v105, 1, 1);
          goto LABEL_220;
        case 316:
          v66 = sub_22F3F60BC(v6, *(_DWORD *)v105, 1, 1);
          goto LABEL_220;
        case 317:
          v66 = sub_22F3F624C(v6, *(_DWORD *)v105, 1, 0);
          goto LABEL_220;
        case 318:
          v66 = sub_22F3F635C(v6);
          goto LABEL_220;
        case 319:
          v66 = sub_22F3F6430(v6);
          goto LABEL_220;
        case 320:
          v66 = sub_22F3F6580(v6, *(_DWORD *)v105, 0, 0);
          goto LABEL_220;
        case 321:
          v66 = sub_22F3F6B74(v6, *(_DWORD *)v105, 0, 0);
          goto LABEL_220;
        case 322:
          v66 = sub_22F3F6D08(v6, *(_DWORD *)v105, 0, 0);
          goto LABEL_220;
        case 323:
          v66 = sub_22F3F6E90(v6, *(_DWORD *)v105, 0, 0);
          goto LABEL_220;
        case 324:
          v66 = sub_22F3F7018(v6, *(_DWORD *)v105, *((_QWORD *)v105 + 2) != 0, 0);
          goto LABEL_220;
        case 325:
          v66 = sub_22F3F7284(v6, *(_DWORD *)v105, 1, 6);
          goto LABEL_220;
        case 326:
          v66 = sub_22F3F740C(v6, *(_DWORD *)v105, 1, 0);
          goto LABEL_220;
        case 327:
          v66 = sub_22F3F7D10(v6, *(_DWORD *)v105, 1, 0);
          goto LABEL_220;
        case 328:
          v66 = sub_22F3F7E98(v6, *(_DWORD *)v105, 1, 0);
          goto LABEL_220;
        case 329:
          v66 = sub_22F3F8020(v6, *(_DWORD *)v105, 1, 0);
          goto LABEL_220;
        case 330:
          v66 = sub_22F3F7598(v6, *(_DWORD *)v105, 1, 1);
          goto LABEL_220;
        case 331:
          v66 = sub_22F3F7B1C(v6, *((_DWORD *)v105 + 2), *(_DWORD *)v105);
          goto LABEL_220;
        case 332:
          v66 = sub_22F3F81A8(v6, *(_DWORD *)v105, 1, 0);
          goto LABEL_220;
        case 333:
          v66 = sub_22F3F675C(v6, *(_DWORD *)v105, 1, 1);
          goto LABEL_220;
        case 334:
          v66 = sub_22F3F6878(v6);
          goto LABEL_220;
        case 335:
          v66 = sub_22F3F69D8(v6, *(_DWORD *)v105, 0, 0);
          goto LABEL_220;
        case 336:
          v66 = sub_22F3F86FC(v6, *((_DWORD *)v105 + 2), *(_DWORD *)v105);
          goto LABEL_220;
        case 337:
          v66 = sub_22F3F8CA4(v6, *((_DWORD *)v105 + 2), *(_DWORD *)v105);
          goto LABEL_220;
        case 338:
          v66 = sub_22F3F925C(v6, *((_DWORD *)v105 + 2), *(_DWORD *)v105);
          goto LABEL_220;
        case 339:
          v66 = sub_22F3F9804(v6, *((_DWORD *)v105 + 2), *(_DWORD *)v105);
          goto LABEL_220;
        case 340:
          v66 = sub_22F3F9DBC(v6, *((_DWORD *)v105 + 2), *(_DWORD *)v105);
          goto LABEL_220;
        case 341:
          v66 = sub_22F3FA364(v6, *((_DWORD *)v105 + 2), *(_DWORD *)v105);
          goto LABEL_220;
        case 342:
          v66 = sub_22F3FA908(v6, *((_DWORD *)v105 + 2), *(_DWORD *)v105);
          goto LABEL_220;
        case 343:
          v66 = sub_22F3FAAF4(v6, *(_DWORD *)v105, 1, 0);
          goto LABEL_220;
        case 344:
          v66 = sub_22F3FB178(v6, *((_DWORD *)v105 + 2), *(_DWORD *)v105);
          goto LABEL_220;
        case 345:
          v66 = sub_22F3FB828(v6, *((_DWORD *)v105 + 2), *(_DWORD *)v105);
          goto LABEL_220;
        case 346:
          v66 = sub_22F3FBDCC(v6, *((_DWORD *)v105 + 2), *(_DWORD *)v105);
          goto LABEL_220;
        case 347:
          v66 = sub_22F3FC370(v6, *((_DWORD *)v105 + 2), *(_DWORD *)v105);
          goto LABEL_220;
        case 348:
          v66 = sub_22F3FC874(v6, *((_DWORD *)v105 + 2), *(_DWORD *)v105);
          goto LABEL_220;
        case 349:
          v66 = sub_22F3FCE18(v6, *((_DWORD *)v105 + 2), *(_DWORD *)v105);
          goto LABEL_220;
        case 350:
          v66 = sub_22F3FD3BC(v6, *((_DWORD *)v105 + 2), *(_DWORD *)v105);
          goto LABEL_220;
        case 351:
          v66 = sub_22F3FDA64(v6, *((_DWORD *)v105 + 2), *(_DWORD *)v105);
          goto LABEL_220;
        case 352:
          v66 = sub_22F3FE14C(v6, *((_DWORD *)v105 + 2), *(_DWORD *)v105);
          goto LABEL_220;
        case 353:
          v66 = sub_22F3FE374(v6, *(_DWORD *)v105, 1, 0);
          goto LABEL_220;
        case 354:
          v66 = sub_22F3FE8B4(v6, *((_DWORD *)v105 + 2), *(_DWORD *)v105);
          goto LABEL_220;
        case 355:
          v66 = sub_22F3FEF9C(v6, *((_DWORD *)v105 + 2), *(_DWORD *)v105);
          goto LABEL_220;
        case 356:
          v66 = sub_22F3FF64C(v6, *((_DWORD *)v105 + 2), *(_DWORD *)v105);
          goto LABEL_220;
        case 357:
          v66 = sub_22F3FFBF0(v6, *((_DWORD *)v105 + 2), *(_DWORD *)v105);
          goto LABEL_220;
        case 358:
          v66 = sub_22F3FFDDC(v6, *(_DWORD *)v105, 0, 0);
          goto LABEL_220;
        case 359:
          v66 = sub_22F3FFF68(v6, *(_DWORD *)v105, 1, 0);
          goto LABEL_220;
        case 360:
          v66 = sub_22F4000F4(v6, *(_DWORD *)v105, 1, 0);
          goto LABEL_220;
        case 361:
          v66 = sub_22F400634(v6, *((_DWORD *)v105 + 2), *(_DWORD *)v105);
          goto LABEL_220;
        case 362:
          v66 = sub_22F400BD8(v6, *((_DWORD *)v105 + 2), *(_DWORD *)v105);
          goto LABEL_220;
        case 363:
          v66 = sub_22F40117C(v6, *((_DWORD *)v105 + 2), *(_DWORD *)v105);
          goto LABEL_220;
        case 364:
          v66 = sub_22F401720(v6, *((_DWORD *)v105 + 2), *(_DWORD *)v105);
          goto LABEL_220;
        case 365:
          v66 = sub_22F401CC4(v6, *((_DWORD *)v105 + 2), *(_DWORD *)v105);
          goto LABEL_220;
        case 366:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 64, 3);
          *v7 = -65;
          if (byte_255E04EB3)
          {
            v52 = sub_22F0D3748(191);
            ++*((_DWORD *)v52 + 2);
          }
          *((_QWORD *)v7 + 1) = 0;
          *((_QWORD *)v7 + 6) = 0;
          *((_DWORD *)v7 + 14) = 0;
          goto LABEL_318;
        case 367:
          v20 = sub_22F3C363C(v6, *((_DWORD *)v105 + 16));
          goto LABEL_317;
        case 368:
          v20 = sub_22F3C39E8(v6, *((_DWORD *)v105 + 16));
          goto LABEL_317;
        case 369:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 48, 3);
          *v7 = -104;
          if (byte_255E04EB3)
          {
            v39 = 152;
LABEL_166:
            v53 = sub_22F0D3748(v39);
            ++*((_DWORD *)v53 + 2);
          }
LABEL_167:
          *((_QWORD *)v7 + 1) = 0;
          *(_QWORD *)v7 = *(_DWORD *)v7 & 0xF9FFFFFF;
LABEL_168:
          *((_QWORD *)v7 + 4) = 0;
          goto LABEL_318;
        case 370:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 64, 3);
          *v7 = 18;
          if (byte_255E04EB3)
          {
            v59 = sub_22F0D3748(18);
            ++*((_DWORD *)v59 + 2);
          }
          *((_DWORD *)v7 + 2) = 0;
          v7[12] = 1;
          v29 = 0uLL;
          *((_OWORD *)v7 + 1) = 0u;
          *((_OWORD *)v7 + 2) = 0u;
LABEL_196:
          *((_OWORD *)v7 + 3) = v29;
          goto LABEL_318;
        case 371:
          v20 = sub_22F3C6314(v6, *((_DWORD *)v105 + 16));
          goto LABEL_317;
        case 372:
          v20 = sub_22F3F2EB4(v6, *(_DWORD *)v105);
LABEL_317:
          v7 = (unsigned __int8 *)v20;
          goto LABEL_318;
        case 373:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 40, 3);
          *v7 = 10;
          if (byte_255E04EB3)
          {
            v54 = sub_22F0D3748(10);
            ++*((_DWORD *)v54 + 2);
          }
          *((_DWORD *)v7 + 2) = 0;
          v7[32] &= ~1u;
LABEL_266:
          *((_QWORD *)v7 + 2) = 0;
          *((_QWORD *)v7 + 3) = 0;
          goto LABEL_318;
        case 374:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 64, 3);
          *v7 = -97;
          if (!byte_255E04EB3)
            goto LABEL_184;
          v49 = 159;
          goto LABEL_183;
        case 375:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 64, 3);
          *v7 = -96;
          if (!byte_255E04EB3)
            goto LABEL_184;
          v49 = 160;
LABEL_183:
          v56 = sub_22F0D3748(v49);
          ++*((_DWORD *)v56 + 2);
LABEL_184:
          *((_QWORD *)v7 + 1) = 0;
          *((_DWORD *)v7 + 4) = 0;
          *(_OWORD *)(v7 + 24) = 0u;
          *(_OWORD *)(v7 + 40) = 0u;
          *((_QWORD *)v7 + 7) = 0;
LABEL_318:
          ++*(_DWORD *)(a1 + 7376);
          goto LABEL_319;
        case 376:
          v7 = (unsigned __int8 *)sub_22E3CD3D4(v6 + 2032, 40, 3);
          *v7 = -94;
          if (byte_255E04EB3)
          {
            v38 = 162;
LABEL_239:
            v68 = sub_22F0D3748(v38);
            ++*((_DWORD *)v68 + 2);
          }
LABEL_240:
          *((_QWORD *)v7 + 1) = 0;
LABEL_241:
          *((_DWORD *)v7 + 4) = 0;
          goto LABEL_318;
        case 377:
          v66 = sub_22F3C145C(v6);
          goto LABEL_220;
        case 378:
          v66 = sub_22F3C1110(v6);
LABEL_220:
          v7 = (unsigned __int8 *)v66;
          ++*(_DWORD *)(a1 + 7376);
          if (!v66)
            break;
LABEL_319:
          v83 = *v7;
          if ((v83 & 0xFE) == 0x70)
          {
            switch((*(_DWORD *)v7 >> 18) & 0x3F)
            {
              case 0:
              case 1:
              case 2:
              case 3:
              case 4:
              case 5:
              case 6:
              case 7:
              case 8:
              case 9:
              case 0xA:
              case 0xB:
              case 0xC:
              case 0xD:
              case 0xE:
              case 0xF:
              case 0x10:
              case 0x11:
              case 0x12:
              case 0x13:
              case 0x14:
              case 0x15:
              case 0x20:
                sub_22E7B8F60(v98, (uint64_t)v7);
                goto LABEL_324;
              case 0x16:
              case 0x17:
              case 0x18:
              case 0x19:
              case 0x1A:
              case 0x1B:
              case 0x1C:
              case 0x1D:
              case 0x1E:
              case 0x1F:
                sub_22F2C878C(v98, (uint64_t)v7);
                goto LABEL_324;
              default:
                goto LABEL_333;
            }
          }
          if (v83 != 233)
LABEL_333:
            __asm { BR              X10 }
          sub_22E7B889C(v98, (uint64_t)v7);
LABEL_324:
          __p[0].__r_.__value_.__r.__words[0] = 8 * *(_QWORD *)(a2 + 2736) - *(unsigned int *)(a2 + 2752);
          sub_22E7BE330((uint64_t)v99, (uint64_t *)__p)[1] = (uint64_t)v7;
          break;
        default:
LABEL_9:
          ++*(_DWORD *)(a1 + 7376);
          break;
      }
      v84 = *(unsigned int *)(a1 + 10848);
      if (v84 >= *(unsigned int *)(a1 + 10852))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v84 = *(unsigned int *)(a1 + 10848);
      }
      v8 = 0;
      *(_QWORD *)(*(_QWORD *)(a1 + 10840) + 8 * v84) = v7;
      ++*(_DWORD *)(a1 + 10848);
    }
LABEL_328:
    if ((v102 & 1) != 0)
    {
      v85 = v101;
      v101 = 0;
      if (v85)
        (*(void (**)(char *))(*(_QWORD *)v85 + 8))(v85);
    }
  }
  while (!v8);
  if (v8 == 3)
  {
LABEL_464:
    v91 = *(unsigned int *)(a1 + 10848);
    v92 = *(_QWORD *)(*(_QWORD *)(a1 + 10840) + 8 * v91 - 8);
    *(_DWORD *)(a1 + 10848) = v91 - 1;
    goto LABEL_477;
  }
LABEL_476:
  v92 = 0;
LABEL_477:
  if (v105 != v107)
    free(v105);
  llvm::deallocate_buffer(v99[0], (void *)(16 * v100));
  *(_DWORD *)(a1 + 10984) = v4;
  return v92;
}

_QWORD *sub_22E7BE114(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3)
{
  llvm::detail::DoubleAPFloat *v5;
  uint64_t v6;
  _QWORD *result;
  _QWORD *v8;
  unsigned int v9;

  v5 = (llvm::detail::DoubleAPFloat *)(a3 + 8);
  v6 = *(_QWORD *)(a3 + 8);
  if (llvm::APFloatBase::PPCDoubleDouble(a1) == v6)
    llvm::detail::DoubleAPFloat::bitcastToAPInt(v5);
  else
    llvm::detail::IEEEFloat::bitcastToAPInt(v5);
  result = sub_22EFF8E88(a1, a2, (uint64_t)&v8);
  if (v9 >= 0x41)
  {
    result = v8;
    if (v8)
      return (_QWORD *)MEMORY[0x2348A0E84](v8, 0x1000C8000313F17);
  }
  return result;
}

uint64_t sub_22E7BE1AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  _QWORD *v7;

  v6 = *(_DWORD *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a1 + 8);
  }
  v7 = (_QWORD *)(*(_QWORD *)a1 + 16 * v6);
  *v7 = a2;
  v7[1] = a3 | 2;
  LODWORD(v7) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = (_DWORD)v7;
  return *(_QWORD *)a1 + 16 * v7 - 16;
}

uint64_t sub_22E7BE228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  _QWORD *v7;

  v6 = *(_DWORD *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a1 + 8);
  }
  v7 = (_QWORD *)(*(_QWORD *)a1 + 16 * v6);
  *v7 = a2;
  v7[1] = a3 & 0xFFFFFFFFFFFFFFFDLL;
  LODWORD(v7) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = (_DWORD)v7;
  return *(_QWORD *)a1 + 16 * v7 - 16;
}

void sub_22E7BE2A4(uint64_t a1, unint64_t a2)
{
  void *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  if (*(unsigned int *)(a1 + 12) < a2)
  {
    *(_DWORD *)(a1 + 8) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(void **)a1;
    v5 = a2;
LABEL_10:
    bzero(v4, 8 * v5);
    goto LABEL_11;
  }
  v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= a2)
    v7 = a2;
  else
    v7 = *(unsigned int *)(a1 + 8);
  if (v7)
  {
    bzero(*(void **)a1, 8 * v7);
    v6 = *(unsigned int *)(a1 + 8);
  }
  v5 = a2 - v6;
  if (a2 > v6)
  {
    v4 = (void *)(*(_QWORD *)a1 + 8 * v6);
    goto LABEL_10;
  }
LABEL_11:
  *(_DWORD *)(a1 + 8) = a2;
}

uint64_t *sub_22E7BE330(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t *result;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  unsigned int v26;

  v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    v5 = (37 * *a2) & (v4 - 1);
    result = (uint64_t *)(*(_QWORD *)a1 + 16 * v5);
    v7 = *result;
    if (*a2 == *result)
      return result;
    v8 = 0;
    v9 = 1;
    while (v7 != -1)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == -2;
      if (v10)
        v8 = result;
      v11 = v5 + v9++;
      v5 = v11 & (v4 - 1);
      result = (uint64_t *)(*(_QWORD *)a1 + 16 * v5);
      v7 = *result;
      if (*a2 == *result)
        return result;
    }
    if (v8)
      result = v8;
  }
  else
  {
    result = 0;
  }
  v12 = *(_DWORD *)(a1 + 8);
  if (4 * v12 + 4 >= 3 * v4)
  {
    sub_22E695680(a1, 2 * v4);
    v13 = *a2;
    v14 = *(_DWORD *)(a1 + 16) - 1;
    v15 = (37 * *a2) & v14;
    result = (uint64_t *)(*(_QWORD *)a1 + 16 * v15);
    v16 = *result;
    if (*a2 == *result)
      goto LABEL_16;
    v17 = 0;
    v18 = 1;
    while (v16 != -1)
    {
      if (v17)
        v19 = 0;
      else
        v19 = v16 == -2;
      if (v19)
        v17 = result;
      v20 = v15 + v18++;
      v15 = v20 & v14;
      result = (uint64_t *)(*(_QWORD *)a1 + 16 * v15);
      v16 = *result;
      if (v13 == *result)
        goto LABEL_16;
    }
    goto LABEL_43;
  }
  if (v4 + ~v12 - *(_DWORD *)(a1 + 12) <= v4 >> 3)
  {
    sub_22E695680(a1, v4);
    v13 = *a2;
    v21 = *(_DWORD *)(a1 + 16) - 1;
    v22 = (37 * *a2) & v21;
    result = (uint64_t *)(*(_QWORD *)a1 + 16 * v22);
    v23 = *result;
    if (*a2 == *result)
      goto LABEL_16;
    v17 = 0;
    v24 = 1;
    while (v23 != -1)
    {
      if (v17)
        v25 = 0;
      else
        v25 = v23 == -2;
      if (v25)
        v17 = result;
      v26 = v22 + v24++;
      v22 = v26 & v21;
      result = (uint64_t *)(*(_QWORD *)a1 + 16 * v22);
      v23 = *result;
      if (v13 == *result)
        goto LABEL_16;
    }
LABEL_43:
    if (v17)
      result = v17;
  }
  v13 = *result;
LABEL_16:
  ++*(_DWORD *)(a1 + 8);
  if (v13 != -1)
    --*(_DWORD *)(a1 + 12);
  *result = *a2;
  result[1] = 0;
  return result;
}

uint64_t sub_22E7BE524(uint64_t result, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned int v9;

  v4 = a2;
  v5 = result;
  v6 = (_DWORD)a3 - (_DWORD)a2;
  v7 = *(unsigned int *)(result + 8);
  if (a3 - a2 + v7 > (unint64_t)*(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(unsigned int *)(v5 + 8);
  }
  if (v4 != a3)
  {
    v8 = (_QWORD *)(*(_QWORD *)v5 + 8 * v7);
    do
    {
      v9 = *v4++;
      *v8++ = v9;
    }
    while (v4 != a3);
  }
  *(_DWORD *)(v5 + 8) = v7 + v6;
  return result;
}

uint64_t sub_22E7BE5A4(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7;
  unsigned int v8;

  v7 = *(_DWORD *)(a4 + 8);
  if (v7 >= *(_DWORD *)(a4 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a4 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a4 + 8 * v7) = a3;
  v8 = *(_DWORD *)(a4 + 8) + 1;
  *(_DWORD *)(a4 + 8) = v8;
  return sub_22E7D2F70(a4, *(_QWORD *)a4 + 8 * v8, a2, &a2[a3]);
}

void sub_22E7BE620(uint64_t a1, uint64_t a2, _QWORD *a3, const void *a4, size_t a5)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned int v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  llvm::raw_ostream *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unsigned int v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  _BYTE *v42;
  uint64_t v43;
  size_t v44;
  const void *v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  unsigned int v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unsigned int v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  unsigned int v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  unsigned int v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  unsigned int v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  unsigned int v128;
  uint64_t v129;
  unsigned int v130;
  uint64_t v131;
  unsigned int v132;
  uint64_t v133;
  unsigned int v134;
  uint64_t v135;
  unsigned int v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  unsigned int v140;
  uint64_t v141;
  unsigned int v142;
  uint64_t v143;
  unsigned int v144;
  uint64_t v145;
  unsigned int v146;
  uint64_t v147;
  unsigned int v148;
  uint64_t v149;
  unsigned int v150;
  uint64_t v151;
  unsigned int v152;
  uint64_t v153;
  unsigned int v154;
  uint64_t v155;
  unsigned int v156;
  uint64_t v157;
  unsigned int v158;
  uint64_t v159;
  unsigned int v160;
  uint64_t v161;
  unsigned int v162;
  uint64_t v163;
  unsigned int v164;
  uint64_t v165;
  unsigned int v166;
  uint64_t v167;
  unsigned int v168;
  uint64_t v169;
  unsigned int v170;
  uint64_t v171;
  unsigned int v172;
  uint64_t v173;
  unsigned int v174;
  uint64_t v175;
  unsigned int v176;
  uint64_t v177;
  unsigned int v178;
  uint64_t v179;
  unsigned int v180;
  uint64_t v181;
  unsigned int v182;
  uint64_t v183;
  unsigned int v184;
  uint64_t v185;
  unsigned int v186;
  uint64_t v187;
  unsigned int v188;
  uint64_t v189;
  unsigned int v190;
  uint64_t v191;
  unsigned int v192;
  uint64_t v193;
  unsigned int v194;
  uint64_t v195;
  unsigned int v196;
  uint64_t v197;
  unsigned int v198;
  uint64_t v199;
  unsigned int v200;
  uint64_t v201;
  unsigned int v202;
  uint64_t v203;
  unsigned int v204;
  uint64_t v205;
  unsigned int v206;
  uint64_t v207;
  unsigned int v208;
  uint64_t v209;
  unsigned int v210;
  uint64_t v211;
  unsigned int v212;
  uint64_t v213;
  unsigned int v214;
  uint64_t v215;
  unsigned int v216;
  uint64_t v217;
  unsigned int v218;
  uint64_t v219;
  unsigned int v220;
  uint64_t v221;
  unsigned int v222;
  uint64_t v223;
  unsigned int v224;
  uint64_t v225;
  unsigned int v226;
  uint64_t v227;
  unsigned int v228;
  uint64_t v229;
  unsigned int v230;
  uint64_t v231;
  unsigned int v232;
  uint64_t v233;
  unsigned int v234;
  uint64_t v235;
  unsigned int v236;
  uint64_t v237;
  unsigned int v238;
  uint64_t v239;
  unsigned int v240;
  unint64_t v241;
  unsigned int v242;
  unint64_t v243;
  unsigned int v244;
  unint64_t v245;
  unsigned int v246;
  unint64_t v247;
  unsigned int v248;
  unint64_t v249;
  unsigned int v250;
  unint64_t v251;
  unsigned int v252;
  uint64_t v253;
  unsigned int v254;
  unint64_t v255;
  unsigned int v256;
  unint64_t v257;
  unsigned int v258;
  uint64_t v259;
  unsigned int v260;
  uint64_t v261;
  unsigned int v262;
  uint64_t v263;
  unsigned int v264;
  uint64_t v265;
  unsigned int v266;
  uint64_t v267;
  unsigned int v268;
  uint64_t v269;
  unsigned int v270;
  uint64_t v271;
  unsigned int v272;
  uint64_t v273;
  unsigned int v274;
  uint64_t v275;
  unsigned int v276;
  uint64_t v277;
  unsigned int v278;
  uint64_t v279;
  unsigned int v280;
  uint64_t v281;
  unsigned int v282;
  uint64_t v283;
  unsigned int v284;
  uint64_t v285;
  unsigned int v286;
  uint64_t v287;
  unsigned int v288;
  uint64_t v289;
  unsigned int v290;
  uint64_t v291;
  unsigned int v292;
  uint64_t v293;
  unsigned int v294;
  uint64_t v295;
  unsigned int v296;
  uint64_t v297;
  unsigned int v298;
  uint64_t v299;
  unsigned int v300;
  uint64_t v301;
  unsigned int v302;
  uint64_t v303;
  unsigned int v304;
  uint64_t v305;
  unsigned int v306;
  uint64_t v307;
  unsigned int v308;
  uint64_t v309;
  unsigned int v310;
  uint64_t v311;
  unsigned int v312;
  uint64_t v313;
  unsigned int v314;
  uint64_t v315;
  unsigned int v316;
  uint64_t v317;
  unsigned int v318;
  uint64_t v319;
  unsigned int v320;
  uint64_t v321;
  unsigned int v322;
  uint64_t v323;
  unsigned int v324;
  uint64_t v325;
  unsigned int v326;
  uint64_t v327;
  unsigned int v328;
  unint64_t v329;
  unsigned int v330;
  unint64_t v331;
  unsigned int v332;
  unint64_t v333;
  unsigned int v334;
  unint64_t v335;
  unsigned int v336;
  unint64_t v337;
  unsigned int v338;
  uint64_t v339;
  unsigned int v340;
  uint64_t v341;
  unsigned int v342;
  uint64_t v343;
  unsigned int v344;
  uint64_t v345;
  unsigned int v346;
  uint64_t v347;
  unsigned int v348;
  uint64_t v349;
  unsigned int v350;
  unint64_t v351;
  unsigned int v352;
  unint64_t v353;
  unsigned int v354;
  unint64_t v355;
  unsigned int v356;
  unint64_t v357;
  unsigned int v358;
  unint64_t v359;
  unsigned int v360;
  unint64_t v361;
  unsigned int v362;
  unint64_t v363;
  unsigned int v364;
  unint64_t v365;
  unsigned int v366;
  unint64_t v367;
  unsigned int v368;
  unint64_t v369;
  unsigned int v370;
  unint64_t v371;
  unsigned int v372;
  unint64_t v373;
  unsigned int v374;
  unint64_t v375;
  unsigned int v376;
  unint64_t v377;
  unsigned int v378;
  uint64_t v379;
  unsigned int v380;
  unint64_t v381;
  unsigned int v382;
  unint64_t v383;
  unsigned int v384;
  unint64_t v385;
  unsigned int v386;
  unint64_t v387;
  unsigned int v388;
  unint64_t v389;
  unsigned int v390;
  unint64_t v391;
  unsigned int v392;
  unint64_t v393;
  unsigned int v394;
  uint64_t v395;
  unsigned int v396;
  unint64_t v397;
  unsigned int v398;
  unint64_t v399;
  unsigned int v400;
  unint64_t v401;
  unsigned int v402;
  unint64_t v403;
  unsigned int v404;
  unint64_t v405;
  unsigned int v406;
  uint64_t v407;
  unsigned int v408;
  uint64_t v409;
  unsigned int v410;
  uint64_t v411;
  unsigned int v412;
  uint64_t v413;
  unsigned int v414;
  uint64_t v415;
  unsigned int v416;
  uint64_t v417;
  unsigned int v418;
  uint64_t v419;
  unsigned int v420;
  uint64_t v421;
  unsigned int v422;
  uint64_t v423;
  unsigned int v424;
  uint64_t v425;
  unsigned int v426;
  uint64_t v427;
  unsigned int v428;
  uint64_t v429;
  unsigned int v430;
  uint64_t v431;
  unsigned int v432;
  uint64_t v433;
  unsigned int v434;
  uint64_t v435;
  unsigned int v436;
  uint64_t v437;
  unsigned int v438;
  uint64_t v439;
  unsigned int v440;
  uint64_t v441;
  unsigned int v442;
  uint64_t v443;
  unsigned int v444;
  uint64_t v445;
  unsigned int v446;
  uint64_t v447;
  unsigned int v448;
  uint64_t v449;
  unsigned int v450;
  uint64_t v451;
  unsigned int v452;
  unint64_t v453;
  unsigned int v454;
  unint64_t v455;
  unsigned int v456;
  unint64_t v457;
  unsigned int v458;
  unint64_t v459;
  unsigned int v460;
  unint64_t v461;
  unsigned int v462;
  unint64_t v463;
  unsigned int v464;
  uint64_t v465;
  unsigned int v466;
  unint64_t v467;
  unsigned int v468;
  uint64_t v469;
  unsigned int v470;
  unint64_t v471;
  unsigned int v472;
  unint64_t v473;
  unsigned int v474;
  unint64_t v475;
  unsigned int v476;
  unint64_t v477;
  unsigned int v478;
  uint64_t v479;
  unsigned int v480;
  uint64_t v481;
  unsigned int v482;
  uint64_t v483;
  unsigned int v484;
  uint64_t v485;
  unsigned int v486;
  uint64_t v487;
  unsigned int v488;
  unint64_t v489;
  unsigned int v490;
  uint64_t v491;
  unsigned int v492;
  uint64_t v493;
  unsigned int v494;
  uint64_t v495;
  unsigned int v496;
  uint64_t v497;
  unsigned int v498;
  uint64_t v499;
  unsigned int v500;
  uint64_t v501;
  unsigned int v502;
  uint64_t v503;
  unsigned int v504;
  uint64_t v505;
  unsigned int v506;
  uint64_t v507;
  unsigned int v508;
  uint64_t v509;
  unsigned int v510;
  uint64_t v511;
  unsigned int v512;
  uint64_t v513;
  unsigned int v514;
  uint64_t v515;
  unsigned int v516;
  uint64_t v517;
  unsigned int v518;
  uint64_t v519;
  unsigned int v520;
  uint64_t v521;
  unsigned int v522;
  uint64_t v523;
  unsigned int v524;
  uint64_t v525;
  unsigned int v526;
  uint64_t v527;
  unsigned int v528;
  uint64_t v529;
  unsigned int v530;
  uint64_t v531;
  unsigned int v532;
  uint64_t v533;
  unsigned int v534;
  uint64_t v535;
  unsigned int v536;
  uint64_t v537;
  unsigned int v538;
  uint64_t v539;
  unsigned int v540;
  uint64_t v541;
  unsigned int v542;
  uint64_t v543;
  unsigned int v544;
  uint64_t v545;
  unsigned int v546;
  uint64_t v547;
  unsigned int v548;
  uint64_t v549;
  unsigned int v550;
  uint64_t v551;
  unsigned int v552;
  uint64_t v553;
  unsigned int v554;
  uint64_t v555;
  unsigned int v556;
  uint64_t v557;
  unsigned int v558;
  uint64_t v559;
  unsigned int v560;
  uint64_t v561;
  unsigned int v562;
  uint64_t v563;
  unsigned int v564;
  uint64_t v565;
  unsigned int v566;
  uint64_t v567;
  unsigned int v568;
  uint64_t v569;
  unsigned int v570;
  uint64_t v571;
  unsigned int v572;
  uint64_t v573;
  unsigned int v574;
  uint64_t v575;
  unsigned int v576;
  uint64_t v577;
  unsigned int v578;
  uint64_t v579;
  unsigned int v580;
  uint64_t v581;
  unsigned int v582;
  uint64_t v583;
  unsigned int v584;
  uint64_t v585;
  unsigned int v586;
  uint64_t v587;
  unsigned int v588;
  uint64_t v589;
  unsigned int v590;
  uint64_t v591;
  unsigned int v592;
  uint64_t v593;
  unsigned int v594;
  uint64_t v595;
  unsigned int v596;
  uint64_t v597;
  unsigned int v598;
  uint64_t v599;
  unsigned int v600;
  uint64_t v601;
  unsigned int v602;
  uint64_t v603;
  unsigned int v604;
  uint64_t v605;
  unsigned int v606;
  uint64_t v607;
  unsigned int v608;
  uint64_t v609;
  unsigned int v610;
  uint64_t v611;
  unsigned int v612;
  uint64_t v613;
  unsigned int v614;
  uint64_t v615;
  unsigned int v616;
  uint64_t v617;
  unsigned int v618;
  uint64_t v619;
  unsigned int v620;
  uint64_t v621;
  unsigned int v622;
  uint64_t v623;
  unsigned int v624;
  uint64_t v625;
  unsigned int v626;
  uint64_t v627;
  unsigned int v628;
  uint64_t v629;
  unsigned int v630;
  uint64_t v631;
  unsigned int v632;
  uint64_t v633;
  unsigned int v634;
  uint64_t v635;
  unsigned int v636;
  uint64_t v637;
  unsigned int v638;
  uint64_t v639;
  unsigned int v640;
  uint64_t v641;
  unsigned int v642;
  uint64_t v643;
  unsigned int v644;
  uint64_t v645;
  unsigned int v646;
  uint64_t v647;
  unsigned int v648;
  uint64_t v649;
  unsigned int v650;
  uint64_t v651;
  unsigned int v652;
  uint64_t v653;
  unsigned int v654;
  uint64_t v655;
  unsigned int v656;
  uint64_t v657;
  unsigned int v658;
  uint64_t v659;
  unsigned int v660;
  uint64_t v661;
  unsigned int v662;
  uint64_t v663;
  unsigned int v664;
  uint64_t v665;
  unsigned int v666;
  uint64_t v667;
  unsigned int v668;
  uint64_t v669;
  unsigned int v670;
  uint64_t v671;
  unsigned int v672;
  uint64_t v673;
  unsigned int v674;
  uint64_t v675;
  unsigned int v676;
  uint64_t v677;
  unsigned int v678;
  uint64_t v679;
  unsigned int v680;
  uint64_t v681;
  unsigned int v682;
  uint64_t v683;
  unsigned int v684;
  uint64_t v685;
  unsigned int v686;
  uint64_t v687;
  unsigned int v688;
  uint64_t v689;
  unsigned int v690;
  uint64_t v691;
  unsigned int v692;
  uint64_t v693;
  unsigned int v694;
  uint64_t v695;
  unsigned int v696;
  uint64_t v697;
  unsigned int v698;
  uint64_t v699;
  unsigned int v700;
  uint64_t v701;
  unsigned int v702;
  uint64_t v703;
  unsigned int v704;
  uint64_t v705;
  unsigned int v706;
  uint64_t v707;
  unsigned int v708;
  uint64_t v709;
  unsigned int v710;
  uint64_t v711;
  unsigned int v712;
  uint64_t v713;
  unsigned int v714;
  uint64_t v715;
  unsigned int v716;
  uint64_t v717;
  unsigned int v718;
  uint64_t v719;
  unsigned int v720;
  uint64_t v721;
  unsigned int v722;
  uint64_t v723;
  unsigned int v724;
  uint64_t v725;
  unsigned int v726;
  uint64_t v727;
  unsigned int v728;
  uint64_t v729;
  unsigned int v730;
  uint64_t v731;
  unsigned int v732;
  uint64_t v733;
  unsigned int v734;
  uint64_t v735;
  unsigned int v736;
  uint64_t v737;
  unsigned int v738;
  uint64_t v739;
  unsigned int v740;
  uint64_t v741;
  unsigned int v742;
  uint64_t v743;
  unsigned int v744;
  uint64_t v745;
  unsigned int v746;
  uint64_t v747;
  unsigned int v748;
  uint64_t v749;
  unsigned int v750;
  uint64_t v751;
  unsigned int v752;
  uint64_t v753;
  unsigned int v754;
  uint64_t v755;
  unsigned int v756;
  uint64_t v757;
  unsigned int v758;
  uint64_t v759;
  unsigned int v760;
  uint64_t v761;
  unsigned int v762;
  uint64_t v763;
  unsigned int v764;
  uint64_t v765;
  unsigned int v766;
  uint64_t v767;
  unsigned int v768;
  uint64_t v769;
  unsigned int v770;
  uint64_t v771;
  unsigned int v772;
  uint64_t v773;
  unsigned int v774;
  uint64_t v775;
  unsigned int v776;
  uint64_t v777;
  unsigned int v778;
  uint64_t v779;
  unsigned int v780;
  uint64_t v781;
  unsigned int v782;
  uint64_t v783;
  unsigned int v784;
  uint64_t v785;
  unsigned int v786;
  uint64_t v787;
  unsigned int v788;
  uint64_t v789;
  unsigned int v790;
  uint64_t v791;
  unsigned int v792;
  uint64_t v793;
  unsigned int v794;
  uint64_t v795;
  unsigned int v796;
  uint64_t v797;
  unsigned int v798;
  uint64_t v799;
  unsigned int v800;
  uint64_t v801;
  unsigned int v802;
  uint64_t v803;
  unsigned int v804;
  uint64_t v805;
  unsigned int v806;
  uint64_t v807;
  unsigned int v808;
  unint64_t v809;
  unsigned int v810;
  uint64_t v811;
  unsigned int v812;
  unint64_t v813;
  unsigned int v814;
  unint64_t v815;
  unsigned int v816;
  unint64_t v817;
  unsigned int v818;
  unint64_t v819;
  unsigned int v820;
  unint64_t v821;
  unsigned int v822;
  uint64_t v823;
  unsigned int v824;
  uint64_t v825;
  unsigned int v826;
  unint64_t v827;
  unsigned int v828;
  unint64_t v829;
  unsigned int v830;
  unint64_t v831;
  unsigned int v832;
  unint64_t v833;
  unsigned int v834;
  unint64_t v835;
  unsigned int v836;
  unint64_t v837;
  unsigned int v838;
  unint64_t v839;
  unsigned int v840;
  uint64_t v841;
  unsigned int v842;
  unint64_t v843;
  unsigned int v844;
  unint64_t v845;
  unsigned int v846;
  unint64_t v847;
  unsigned int v848;
  unint64_t v849;
  unsigned int v850;
  unint64_t v851;
  unsigned int v852;
  unint64_t v853;
  unsigned int v854;
  unint64_t v855;
  unsigned int v856;
  unint64_t v857;
  unsigned int v858;
  unint64_t v859;
  unsigned int v860;
  unint64_t v861;
  unsigned int v862;
  unint64_t v863;
  unsigned int v864;
  uint64_t v865;
  unsigned int v866;
  unint64_t v867;
  unsigned int v868;
  unint64_t v869;
  unsigned int v870;
  uint64_t v871;
  unsigned int v872;
  uint64_t v873;
  unsigned int v874;
  unint64_t v875;
  unsigned int v876;
  unint64_t v877;
  unsigned int v878;
  uint64_t v879;
  unsigned int v880;
  unint64_t v881;
  unsigned int v882;
  unint64_t v883;
  unsigned int v884;
  uint64_t v885;
  unsigned int v886;
  uint64_t v887;
  unsigned int v888;
  uint64_t v889;
  unsigned int v890;
  uint64_t v891;
  unsigned int v892;
  unint64_t v893;
  unsigned int v894;
  unint64_t v895;
  unsigned int v896;
  unint64_t v897;
  unsigned int v898;
  uint64_t v899;
  unsigned int v900;
  uint64_t v901;
  unsigned int v902;
  uint64_t v903;
  unsigned int v904;
  uint64_t v905;
  unsigned int v906;
  uint64_t v907;
  unsigned int v908;
  uint64_t v909;
  unsigned int v910;
  uint64_t v911;
  unsigned int v912;
  uint64_t v913;
  unsigned int v914;
  uint64_t v915;
  unsigned int v916;
  uint64_t v917;
  unsigned int v918;
  uint64_t v919;
  unsigned int v920;
  uint64_t v921;
  unsigned int v922;
  uint64_t v923;
  unsigned int v924;
  uint64_t v925;
  unsigned int v926;
  uint64_t v927;
  unsigned int v928;
  uint64_t v929;
  unsigned int v930;
  uint64_t v931;
  unsigned int v932;
  uint64_t v933;
  unsigned int v934;
  uint64_t v935;
  unsigned int v936;
  uint64_t v937;
  unsigned int v938;
  uint64_t v939;
  unsigned int v940;
  uint64_t v941;
  unsigned int v942;
  uint64_t v943;
  unsigned int v944;
  uint64_t v945;
  unsigned int v946;
  uint64_t v947;
  unsigned int v948;
  uint64_t v949;
  unsigned int v950;
  uint64_t v951;
  unsigned int v952;
  uint64_t v953;
  unsigned int v954;
  uint64_t v955;
  unsigned int v956;
  uint64_t v957;
  unsigned int v958;
  uint64_t v959;
  unsigned int v960;
  uint64_t v961;
  unsigned int v962;
  uint64_t v963;
  unsigned int v964;
  uint64_t v965;
  unsigned int v966;
  uint64_t v967;
  unsigned int v968;
  uint64_t v969;
  unsigned int v970;
  uint64_t v971;
  unsigned int v972;
  uint64_t v973;
  unsigned int v974;
  uint64_t v975;
  unsigned int v976;
  uint64_t v977;
  unsigned int v978;
  uint64_t v979;
  unsigned int v980;
  uint64_t v981;
  unsigned int v982;
  uint64_t v983;
  unsigned int v984;
  uint64_t v985;
  unsigned int v986;
  uint64_t v987;
  unsigned int v988;
  uint64_t v989;
  unsigned int v990;
  uint64_t v991;
  unsigned int v992;
  uint64_t v993;
  unsigned int v994;
  uint64_t v995;
  unsigned int v996;
  uint64_t v997;
  unsigned int v998;
  uint64_t v999;
  unsigned int v1000;
  uint64_t v1001;
  unsigned int v1002;
  uint64_t v1003;
  unsigned int v1004;
  uint64_t v1005;
  unsigned int v1006;
  uint64_t v1007;
  unsigned int v1008;
  uint64_t v1009;
  unsigned int v1010;
  uint64_t v1011;
  unsigned int v1012;
  uint64_t v1013;
  unsigned int v1014;
  uint64_t v1015;
  unsigned int v1016;
  uint64_t v1017;
  unsigned int v1018;
  uint64_t v1019;
  unsigned int v1020;
  uint64_t v1021;
  unsigned int v1022;
  uint64_t v1023;
  unsigned int v1024;
  uint64_t v1025;
  unsigned int v1026;
  uint64_t v1027;
  unsigned int v1028;
  uint64_t v1029;
  unsigned int v1030;
  uint64_t v1031;
  unsigned int v1032;
  uint64_t v1033;
  unsigned int v1034;
  uint64_t v1035;
  unsigned int v1036;
  uint64_t v1037;
  unsigned int v1038;
  uint64_t v1039;
  unsigned int v1040;
  uint64_t v1041;
  unsigned int v1042;
  uint64_t v1043;
  unsigned int v1044;
  uint64_t v1045;
  unsigned int v1046;
  uint64_t v1047;
  unsigned int v1048;
  uint64_t v1049;
  unsigned int v1050;
  uint64_t v1051;
  unsigned int v1052;
  uint64_t v1053;
  unsigned int v1054;
  uint64_t v1055;
  unsigned int v1056;
  uint64_t v1057;
  unsigned int v1058;
  uint64_t v1059;
  unsigned int v1060;
  uint64_t v1061;
  unsigned int v1062;
  uint64_t v1063;
  unsigned int v1064;
  uint64_t v1065;
  unsigned int v1066;
  uint64_t v1067;
  unsigned int v1068;
  uint64_t v1069;
  unsigned int v1070;
  uint64_t v1071;
  unsigned int v1072;
  uint64_t v1073;
  unsigned int v1074;
  uint64_t v1075;
  unsigned int v1076;
  uint64_t v1077;
  unsigned int v1078;
  uint64_t v1079;
  unsigned int v1080;
  uint64_t v1081;
  unsigned int v1082;
  uint64_t v1083;
  unsigned int v1084;
  uint64_t v1085;
  unsigned int v1086;
  uint64_t v1087;
  unsigned int v1088;
  uint64_t v1089;
  unsigned int v1090;
  uint64_t v1091;
  unsigned int v1092;
  uint64_t v1093;
  unsigned int v1094;
  uint64_t v1095;
  unsigned int v1096;
  uint64_t v1097;
  unsigned int v1098;
  uint64_t v1099;
  unsigned int v1100;
  uint64_t v1101;
  unsigned int v1102;
  uint64_t v1103;
  unsigned int v1104;
  uint64_t v1105;
  unsigned int v1106;
  uint64_t v1107;
  unsigned int v1108;
  uint64_t v1109;
  unsigned int v1110;
  uint64_t v1111;
  unsigned int v1112;
  uint64_t v1113;
  unsigned int v1114;
  uint64_t v1115;
  unsigned int v1116;
  uint64_t v1117;
  unsigned int v1118;
  uint64_t v1119;
  unsigned int v1120;
  uint64_t v1121;
  unsigned int v1122;
  uint64_t v1123;
  unsigned int v1124;
  uint64_t v1125;
  unsigned int v1126;
  uint64_t v1127;
  unsigned int v1128;
  uint64_t v1129;
  unsigned int v1130;
  uint64_t v1131;
  unsigned int v1132;
  uint64_t v1133;
  unsigned int v1134;
  uint64_t v1135;
  unsigned int v1136;
  uint64_t v1137;
  unsigned int v1138;
  uint64_t v1139;
  unsigned int v1140;
  uint64_t v1141;
  unsigned int v1142;
  uint64_t v1143;
  unsigned int v1144;
  uint64_t v1145;
  unsigned int v1146;
  uint64_t v1147;
  unsigned int v1148;
  uint64_t v1149;
  unsigned int v1150;
  uint64_t v1151;
  unsigned int v1152;
  uint64_t v1153;
  unsigned int v1154;
  uint64_t v1155;
  unsigned int v1156;
  uint64_t v1157;
  unsigned int v1158;
  unint64_t v1159;
  unsigned int v1160;
  uint64_t v1161;
  uint64_t v1162;
  char v1163;
  BOOL v1164;
  char *v1165;
  uint64_t v1166;
  uint64_t v1167;
  uint64_t v1168;
  uint64_t v1169;
  char v1170;
  char *v1171;
  uint64_t v1172;
  uint64_t v1173;
  unint64_t v1174;
  unsigned int v1175;
  unsigned int v1176;
  uint64_t v1177;
  uint64_t v1178;
  char v1179;
  BOOL v1180;
  char *v1181;
  uint64_t v1182;
  uint64_t v1183;
  uint64_t v1184;
  unsigned int v1185;
  unint64_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  char v1189;
  BOOL v1190;
  char *v1191;
  uint64_t v1192;
  uint64_t v1193;
  char v1194;
  int v1195;
  char *v1196;
  uint64_t v1197;
  uint64_t v1198;
  llvm::raw_ostream *v1199;
  uint64_t v1200;
  char v1201;
  BOOL v1202;
  char *v1203;
  uint64_t v1204;
  uint64_t v1205;
  uint64_t v1206;
  char v1207;
  int v1208;
  char *v1209;
  uint64_t v1210;
  uint64_t v1211;
  uint64_t v1212;
  char v1213;
  int v1214;
  char *v1215;
  uint64_t v1216;
  uint64_t v1217;
  uint64_t v1218;
  char v1219;
  int v1220;
  char *v1221;
  uint64_t v1222;
  uint64_t v1223;
  uint64_t v1224;
  unint64_t v1225;
  unsigned int v1226;
  unsigned int v1227;
  uint64_t v1228;
  uint64_t v1229;
  uint64_t v1230;
  uint64_t v1231;
  char v1232;
  char *v1233;
  uint64_t v1234;
  unint64_t v1235;
  uint64_t v1236;
  uint64_t v1237;
  uint64_t v1238;
  uint64_t v1239;
  char v1240;
  char *v1241;
  uint64_t v1242;
  llvm::raw_ostream *v1243;
  uint64_t v1244;
  char v1245;
  BOOL v1246;
  char *v1247;
  uint64_t v1248;
  uint64_t v1249;
  uint64_t v1250;
  char v1251;
  int v1252;
  char *v1253;
  uint64_t v1254;
  uint64_t v1255;
  uint64_t v1256;
  char v1257;
  int v1258;
  char *v1259;
  uint64_t v1260;
  uint64_t v1261;
  uint64_t v1262;
  char v1263;
  int v1264;
  char *v1265;
  uint64_t v1266;
  uint64_t v1267;
  uint64_t v1268;
  uint64_t v1269;
  unsigned int v1270;
  unsigned int v1271;
  unint64_t v1272;
  unsigned int v1273;
  unint64_t v1274;
  unsigned int v1275;
  unint64_t v1276;
  unsigned int v1277;
  unint64_t v1278;
  unsigned int v1279;
  uint64_t v1280;
  unsigned int v1281;
  unint64_t v1282;
  unsigned int v1283;
  unint64_t v1284;
  unsigned int v1285;
  unint64_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  char *v1289;
  char *v1290;
  char v1291;
  char *v1292;
  uint64_t v1293;
  uint64_t v1294;
  uint64_t v1295;
  unsigned int v1296;
  uint64_t v1297;
  uint64_t v1298;
  unsigned int v1299;
  unint64_t v1300;
  unint64_t v1301;
  unsigned int v1302;
  uint64_t v1303;
  uint64_t v1304;
  uint64_t v1305;
  uint64_t v1306;
  char v1307;
  char *v1308;
  uint64_t v1309;
  unint64_t v1310;
  unsigned int v1311;
  uint64_t v1312;
  uint64_t v1313;
  uint64_t v1314;
  uint64_t v1315;
  char v1316;
  char *v1317;
  uint64_t v1318;
  uint64_t v1319;
  unsigned int v1320;
  uint64_t v1321;
  char *v1322;
  uint64_t v1323;
  char *v1324;
  char v1325;
  int v1326;
  char *v1327;
  uint64_t v1328;
  uint64_t v1329;
  uint64_t v1330;
  unsigned int v1331;
  uint64_t v1332;
  unint64_t v1333;
  unint64_t v1334;
  char *v1335;
  uint64_t v1336;
  unsigned int v1337;
  std::__shared_weak_count *v1338;
  unint64_t *v1339;
  unint64_t v1340;
  uint64_t v1341;
  unint64_t v1342;
  unint64_t v1343;
  uint64_t v1344;
  uint64_t v1345;
  char *v1346;
  uint64_t v1347;
  std::__shared_weak_count *v1348;
  unint64_t *v1349;
  unint64_t v1350;
  char *v1351;
  uint64_t v1352;
  std::__shared_weak_count *v1353;
  unint64_t *v1354;
  unint64_t v1355;
  int v1356;
  std::__shared_weak_count *v1357;
  std::__shared_weak_count *v1358;
  char *v1359;
  char *v1360;
  uint64_t *v1361;
  uint64_t *v1362;
  std::__shared_weak_count *v1363;
  uint64_t v1364;
  BOOL v1365;
  uint64_t v1366;
  unint64_t *v1367;
  BOOL v1368;
  unint64_t *v1369;
  unint64_t v1370;
  uint64_t v1371;
  _QWORD *v1372;
  uint64_t v1373;
  _QWORD *v1374;
  uint64_t v1375;
  _QWORD *v1376;
  uint64_t v1377;
  uint64_t v1378;
  uint64_t v1379;
  unsigned int v1380;
  uint64_t v1381;
  unint64_t v1382;
  unint64_t v1383;
  char *v1384;
  uint64_t v1385;
  uint64_t *v1386;
  uint64_t *v1387;
  uint64_t v1388;
  int v1389;
  unint64_t v1390;
  unint64_t v1391;
  uint64_t v1392;
  unint64_t v1393;
  uint64_t v1394;
  uint64_t v1395;
  uint64_t v1396;
  __int128 v1397;
  char *v1398;
  uint64_t v1399;
  unsigned int v1400;
  std::__shared_weak_count *v1401;
  unint64_t *v1402;
  unint64_t v1403;
  char *v1404;
  uint64_t v1405;
  uint64_t v1406;
  uint64_t v1407;
  uint64_t v1408;
  char v1409;
  char *v1410;
  uint64_t v1411;
  uint64_t v1412;
  uint64_t v1413;
  uint64_t v1414;
  uint64_t v1415;
  uint64_t v1416;
  uint64_t v1417;
  unint64_t v1418;
  unint64_t v1419;
  int v1420;
  BOOL v1421;
  unsigned int v1422;
  uint64_t v1423;
  uint64_t v1424;
  uint64_t v1425;
  char *v1426;
  uint64_t v1427;
  uint64_t v1428;
  uint64_t v1429;
  unint64_t v1430;
  size_t *v1431;
  uint64_t v1432;
  uint64_t *v1433;
  int v1434;
  uint64_t *v1436;
  int v1437;
  int v1438;
  char v1439;
  char *v1440;
  unint64_t v1441;
  unint64_t v1442;
  unint64_t v1443;
  unint64_t v1444;
  char *v1445;
  unint64_t v1446;
  unint64_t v1447;
  char *v1448;
  char *v1449;
  char *v1450;
  __int128 v1451;
  void *v1452;
  char *v1453;
  char *v1454;
  std::__shared_count v1455;
  uint64_t *v1456;
  uint64_t *v1457;
  uint64_t v1458;
  uint64_t v1459;
  uint64_t v1460;
  unint64_t v1462;
  uint64_t v1463;
  uint64_t v1464;
  uint64_t v1465;
  unsigned int v1466;
  unint64_t v1468;
  uint64_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  char v1472;
  int v1473;
  char *v1474;
  uint64_t v1475;
  uint64_t v1476;
  char v1477;
  int v1478;
  _BYTE *v1479;
  uint64_t v1480;
  uint64_t v1481;
  uint64_t v1482;
  char *v1483;
  uint64_t v1484;
  char *v1485;
  char v1486;
  int v1487;
  char *v1488;
  uint64_t v1489;
  uint64_t v1490;
  unsigned int v1491;
  unsigned int v1492;
  char *v1493;
  int v1494;
  uint64_t v1495;
  uint64_t v1496;
  uint64_t *v1497;
  unint64_t v1498;
  char *v1499;
  char *__p;
  char *__pa;
  void *__pb;
  uint64_t v1503;
  unsigned int v1504;
  BOOL v1505;
  uint64_t *v1506;
  BOOL v1507;
  std::__shared_weak_count *v1508;
  std::__shared_weak_count *v1509;
  char *v1510;
  std::__shared_weak_count *v1511;
  char *v1512;
  std::__shared_weak_count *v1513;
  char *v1514;
  std::__shared_weak_count *v1515;
  char *v1516;
  std::__shared_weak_count *v1517;
  char *v1518;
  std::__shared_weak_count *v1519;
  char *v1520;
  std::__shared_weak_count *v1521;
  char *v1522;
  std::__shared_weak_count *v1523;
  char *v1524;
  std::__shared_weak_count *v1525;
  _BYTE __dst[32];
  uint64_t v1527;
  uint64_t v1528;
  uint64_t v1529;
  uint64_t v1530;
  void *v1531;
  uint64_t v1532;
  _BYTE v1533[560];
  uint64_t v1534;
  std::__shared_weak_count *v1535;
  char *v1536;
  std::__shared_weak_count *v1537;
  uint64_t v1538;

  v9 = a1;
  v1538 = *MEMORY[0x24BDAC8D0];
  sub_22E74181C(*(_QWORD *)(a1 + 16), 0xFu, 5u);
  v1531 = v1533;
  v1532 = 0x4000000000;
  v10 = (char *)operator new(0x228uLL);
  *(_QWORD *)v10 = &unk_24FA715D0;
  *((_QWORD *)v10 + 1) = 0;
  *(_OWORD *)(v10 + 184) = 0u;
  *(_OWORD *)(v10 + 200) = 0u;
  *(_OWORD *)(v10 + 216) = 0u;
  *(_OWORD *)(v10 + 232) = 0u;
  *(_OWORD *)(v10 + 248) = 0u;
  *(_OWORD *)(v10 + 264) = 0u;
  *(_OWORD *)(v10 + 280) = 0u;
  *(_OWORD *)(v10 + 296) = 0u;
  *(_OWORD *)(v10 + 312) = 0u;
  *(_OWORD *)(v10 + 328) = 0u;
  *(_OWORD *)(v10 + 344) = 0u;
  *(_OWORD *)(v10 + 360) = 0u;
  *(_OWORD *)(v10 + 376) = 0u;
  *(_OWORD *)(v10 + 392) = 0u;
  *(_OWORD *)(v10 + 408) = 0u;
  *(_OWORD *)(v10 + 424) = 0u;
  *(_OWORD *)(v10 + 440) = 0u;
  *(_OWORD *)(v10 + 456) = 0u;
  *(_OWORD *)(v10 + 472) = 0u;
  *(_OWORD *)(v10 + 488) = 0u;
  *(_OWORD *)(v10 + 504) = 0u;
  *(_OWORD *)(v10 + 520) = 0u;
  *(_OWORD *)(v10 + 536) = 0u;
  *(_OWORD *)(v10 + 40) = xmmword_22F45E070;
  *((_QWORD *)v10 + 2) = 0;
  *((_QWORD *)v10 + 3) = v10 + 40;
  *(_OWORD *)(v10 + 56) = xmmword_22F45E0F0;
  *(_OWORD *)(v10 + 72) = xmmword_22F45E0F0;
  *(_OWORD *)(v10 + 88) = xmmword_22F45E0F0;
  *(_OWORD *)(v10 + 104) = xmmword_22F45E0F0;
  *(_OWORD *)(v10 + 120) = xmmword_22F45E160;
  *(_OWORD *)(v10 + 136) = xmmword_22F45E160;
  *(_OWORD *)(v10 + 152) = xmmword_22F45E160;
  v11 = *(_QWORD *)(v9 + 16);
  *(_OWORD *)(v10 + 168) = xmmword_22F45E0D0;
  *((_QWORD *)v10 + 4) = 0x2000000009;
  v1520 = v10 + 24;
  v1521 = (std::__shared_weak_count *)v10;
  v12 = sub_22E74761C(v11, (uint64_t)&v1520);
  v13 = v1521;
  if (v1521)
  {
    p_shared_owners = (unint64_t *)&v1521->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  *(_OWORD *)__dst = xmmword_22F45FAA0;
  *(_OWORD *)&__dst[16] = xmmword_22F45FAB0;
  v1527 = 334;
  v1528 = a5 != 0;
  v16 = *(unsigned __int8 *)(v9 + 123);
  v1529 = *(unsigned __int8 *)(v9 + 120);
  v1530 = v16;
  v17 = *(llvm::raw_ostream **)(v9 + 16);
  sub_22F20D5D0(&v1534);
  if (SHIBYTE(v1536) >= 0)
    v18 = (char *)&v1534;
  else
    v18 = (char *)v1534;
  if (SHIBYTE(v1536) >= 0)
    v19 = HIBYTE(v1536) & 0x7F;
  else
    v19 = (uint64_t)v1535;
  sub_22E74241C(v17, v12, (uint64_t)__dst, 8, v18, v19, 0);
  if (SHIBYTE(v1536) < 0)
    operator delete((void *)v1534);
  if (*(_QWORD *)(v9 + 64))
  {
    v20 = (char *)operator new(0x228uLL);
    *(_QWORD *)v20 = &unk_24FA715D0;
    *((_QWORD *)v20 + 1) = 0;
    *(_OWORD *)(v20 + 72) = 0u;
    *(_OWORD *)(v20 + 88) = 0u;
    *(_OWORD *)(v20 + 104) = 0u;
    *(_OWORD *)(v20 + 120) = 0u;
    *(_OWORD *)(v20 + 136) = 0u;
    *(_OWORD *)(v20 + 152) = 0u;
    *(_OWORD *)(v20 + 168) = 0u;
    *(_OWORD *)(v20 + 184) = 0u;
    *(_OWORD *)(v20 + 200) = 0u;
    *(_OWORD *)(v20 + 216) = 0u;
    *(_OWORD *)(v20 + 232) = 0u;
    *(_OWORD *)(v20 + 248) = 0u;
    *(_OWORD *)(v20 + 264) = 0u;
    *(_OWORD *)(v20 + 280) = 0u;
    *(_OWORD *)(v20 + 296) = 0u;
    *(_OWORD *)(v20 + 312) = 0u;
    *(_OWORD *)(v20 + 328) = 0u;
    *(_OWORD *)(v20 + 344) = 0u;
    *(_OWORD *)(v20 + 360) = 0u;
    *(_OWORD *)(v20 + 376) = 0u;
    *(_OWORD *)(v20 + 392) = 0u;
    *(_OWORD *)(v20 + 408) = 0u;
    *(_OWORD *)(v20 + 424) = 0u;
    *(_OWORD *)(v20 + 440) = 0u;
    *(_OWORD *)(v20 + 456) = 0u;
    *(_OWORD *)(v20 + 472) = 0u;
    *(_OWORD *)(v20 + 488) = 0u;
    *(_OWORD *)(v20 + 504) = 0u;
    *(_OWORD *)(v20 + 520) = 0u;
    *(_OWORD *)(v20 + 536) = 0u;
    *(_OWORD *)(v20 + 40) = xmmword_22F45E130;
    *((_QWORD *)v20 + 2) = 0;
    *((_QWORD *)v20 + 3) = v20 + 40;
    *(_OWORD *)(v20 + 56) = xmmword_22F45E0D0;
    *((_QWORD *)v20 + 4) = 0x2000000002;
    v21 = *(_QWORD *)(v9 + 16);
    v1518 = v20 + 24;
    v1519 = (std::__shared_weak_count *)v20;
    v22 = sub_22E74761C(v21, (uint64_t)&v1518);
    v23 = v1519;
    if (v1519)
    {
      v24 = (unint64_t *)&v1519->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    *(_QWORD *)__dst = 6;
    v26 = *(_QWORD *)(v9 + 64);
    v27 = *(_BYTE *)(v26 + 23);
    v28 = v27 >= 0 ? *(char **)(v9 + 64) : *(char **)v26;
    v29 = v27 >= 0 ? v27 & 0x7F : *(_QWORD *)(v26 + 8);
    sub_22E74241C(*(llvm::raw_ostream **)(v9 + 16), v22, (uint64_t)__dst, 1, v28, v29, 0);
    v30 = *(_QWORD *)(v9 + 64);
    if (v30)
    {
      v31 = *(_QWORD *)(v30 + 40);
      if (v31)
      {
        *(_QWORD *)__dst = &__dst[24];
        *(_OWORD *)&__dst[8] = xmmword_22F44E310;
        if ((*(_BYTE *)(**(_QWORD **)(a2 + 104) + 216) & 0x40) != 0)
        {
          sub_22F1D0728(*(_QWORD *)(a3[249] + 16), ".", 1uLL, 1, (uint64_t)&v1534);
          v46 = 0;
          v45 = *(const void **)v1534;
          v44 = *(_QWORD *)(v1534 + 8);
          *(_QWORD *)&__dst[8] = 0;
          if (*(_QWORD *)&__dst[16] >= v44)
          {
            if (!v44)
              goto LABEL_83;
            goto LABEL_82;
          }
        }
        else
        {
          v45 = *(const void **)v31;
          v44 = *(_QWORD *)(v31 + 8);
          if (v44 < 0x81)
          {
            v46 = 0;
            if (!v44)
              goto LABEL_83;
            goto LABEL_82;
          }
        }
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v46 = *(_QWORD *)&__dst[8];
        if (!v44)
        {
LABEL_83:
          *(_QWORD *)&__dst[8] = v46 + v44;
          sub_22F1D1908(*(_QWORD *)(a3[249] + 16), (void **)__dst);
          llvm::sys::path::remove_dots();
          if ((*(_BYTE *)(**(_QWORD **)(a2 + 104) + 216) & 0x60) == 0
            || (v69 = *(_QWORD *)(*(_QWORD *)(v9 + 64) + 40), *(_QWORD *)(v69 + 8) != 1)
            || **(_BYTE **)v69 != 46)
          {
            v70 = (char *)operator new(0x228uLL);
            *(_QWORD *)v70 = &unk_24FA715D0;
            *((_QWORD *)v70 + 1) = 0;
            *(_OWORD *)(v70 + 72) = 0u;
            *(_OWORD *)(v70 + 88) = 0u;
            *(_OWORD *)(v70 + 104) = 0u;
            *(_OWORD *)(v70 + 120) = 0u;
            *(_OWORD *)(v70 + 136) = 0u;
            *(_OWORD *)(v70 + 152) = 0u;
            *(_OWORD *)(v70 + 168) = 0u;
            *(_OWORD *)(v70 + 184) = 0u;
            *(_OWORD *)(v70 + 200) = 0u;
            *(_OWORD *)(v70 + 216) = 0u;
            *(_OWORD *)(v70 + 232) = 0u;
            *(_OWORD *)(v70 + 248) = 0u;
            *(_OWORD *)(v70 + 264) = 0u;
            *(_OWORD *)(v70 + 280) = 0u;
            *(_OWORD *)(v70 + 296) = 0u;
            *(_OWORD *)(v70 + 312) = 0u;
            *(_OWORD *)(v70 + 328) = 0u;
            *(_OWORD *)(v70 + 344) = 0u;
            *(_OWORD *)(v70 + 360) = 0u;
            *(_OWORD *)(v70 + 376) = 0u;
            *(_OWORD *)(v70 + 392) = 0u;
            *(_OWORD *)(v70 + 408) = 0u;
            *(_OWORD *)(v70 + 424) = 0u;
            *(_OWORD *)(v70 + 440) = 0u;
            *(_OWORD *)(v70 + 456) = 0u;
            *(_OWORD *)(v70 + 472) = 0u;
            *(_OWORD *)(v70 + 488) = 0u;
            *(_OWORD *)(v70 + 504) = 0u;
            *(_OWORD *)(v70 + 520) = 0u;
            *(_OWORD *)(v70 + 536) = 0u;
            *(_OWORD *)(v70 + 40) = xmmword_22F45E150;
            *((_QWORD *)v70 + 2) = 0;
            *((_QWORD *)v70 + 3) = v70 + 40;
            *(_OWORD *)(v70 + 56) = xmmword_22F45E0D0;
            *((_QWORD *)v70 + 4) = 0x2000000002;
            v71 = *(_QWORD *)(v9 + 16);
            v1516 = v70 + 24;
            v1517 = (std::__shared_weak_count *)v70;
            v72 = sub_22E74761C(v71, (uint64_t)&v1516);
            v73 = v1517;
            if (v1517)
            {
              v74 = (unint64_t *)&v1517->__shared_owners_;
              do
                v75 = __ldaxr(v74);
              while (__stlxr(v75 - 1, v74));
              if (!v75)
              {
                ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                std::__shared_weak_count::__release_weak(v73);
              }
            }
            v1534 = 8;
            sub_22E74241C(*(llvm::raw_ostream **)(v9 + 16), v72, (uint64_t)&v1534, 1, *(char **)__dst, *(uint64_t *)&__dst[8], 0);
          }
          sub_22E78FE00((std::string *)(v9 + 96), *(std::string::value_type **)__dst, (std::string::value_type *)(*(_QWORD *)__dst + *(_QWORD *)&__dst[8]), *(std::string::size_type *)&__dst[8]);
          if (*(_BYTE **)__dst != &__dst[24])
            free(*(void **)__dst);
          goto LABEL_38;
        }
LABEL_82:
        memcpy((void *)(*(_QWORD *)__dst + v46), v45, v44);
        v46 = *(_QWORD *)&__dst[8];
        goto LABEL_83;
      }
    }
  }
  if (a5)
  {
    if (a5 >= 0x7FFFFFFFFFFFFFF8)
LABEL_1624:
      abort();
    if (a5 >= 0x17)
    {
      v33 = (a5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a5 | 7) != 0x17)
        v33 = a5 | 7;
      v34 = v33 + 1;
      v32 = operator new(v33 + 1);
      *(_QWORD *)&__dst[8] = a5;
      *(_QWORD *)&__dst[16] = v34 | 0x8000000000000000;
      *(_QWORD *)__dst = v32;
    }
    else
    {
      __dst[23] = a5;
      v32 = __dst;
    }
    memmove(v32, a4, a5);
    v32[a5] = 0;
    v35 = (void **)(v9 + 96);
    if (*(char *)(v9 + 119) < 0)
      operator delete(*v35);
    *(_OWORD *)v35 = *(_OWORD *)__dst;
    *(_QWORD *)(v9 + 112) = *(_QWORD *)&__dst[16];
  }
LABEL_38:
  v36 = *(_QWORD *)(v9 + 64);
  if (!v36)
    goto LABEL_133;
  if (*(_DWORD *)(v36 + 28))
    goto LABEL_98;
  LODWORD(v1532) = 0;
  v37 = *(_QWORD *)(a2 + 104);
  v38 = *(unsigned __int8 *)(v36 + 71);
  if (*(char *)(v36 + 71) < 0)
  {
    if (*(_QWORD *)(v36 + 56))
    {
LABEL_42:
      v41 = *(_BYTE **)(v36 + 48);
      v39 = v36 + 48;
      v40 = v41;
      if ((v38 & 0x80u) == 0)
        v42 = (_BYTE *)v39;
      else
        v42 = v40;
      if ((v38 & 0x80u) == 0)
        v43 = v38;
      else
        v43 = *(_QWORD *)(v39 + 8);
      goto LABEL_57;
    }
  }
  else if (*(_BYTE *)(v36 + 71))
  {
    goto LABEL_42;
  }
  v47 = (unint64_t)sub_22F152B7C(v37 + 488, v36);
  do
  {
    v48 = (_QWORD *)v47;
    v49 = *(_QWORD *)(v47 + 8);
    if ((v49 & 2) == 0)
      break;
    v47 = v49 & 0xFFFFFFFFFFFFFFFCLL;
  }
  while ((v49 & 0xFFFFFFFFFFFFFFFCLL) != 0);
  v50 = *v48;
  v42 = v48 + 4;
  v43 = v50;
LABEL_57:
  sub_22F2CF4A0(v9, v42, v43, (uint64_t)&v1531);
  v1534 = *(_QWORD *)(v9 + 64);
  *(_QWORD *)__dst = 0;
  v51 = sub_22E78D100((uint64_t *)(v37 + 1816), &v1534, __dst);
  v52 = *(_DWORD *)(v37 + 1832);
  v53 = *(_QWORD *)(v37 + 1816) + 48 * v52;
  if (v51)
    v54 = *(_QWORD *)__dst;
  else
    v54 = *(_QWORD *)(v37 + 1816) + 48 * v52;
  if (v53 == v54)
  {
    v76 = v1532;
    if (v1532 >= HIDWORD(v1532))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v76 = v1532;
    }
    *((_QWORD *)v1531 + v76) = 0;
    LODWORD(v1532) = v1532 + 1;
  }
  else
  {
    v55 = (*(_DWORD *)(v54 + 28) - *(_DWORD *)(v54 + 32));
    v56 = v1532;
    if (v1532 >= HIDWORD(v1532))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v56 = v1532;
    }
    *((_QWORD *)v1531 + v56) = v55;
    LODWORD(v1532) = v1532 + 1;
    v57 = *(_QWORD *)(v54 + 16);
    v58 = 24;
    if (v57 == *(_QWORD *)(v54 + 8))
      v58 = 28;
    v59 = *(unsigned int *)(v54 + v58);
    if ((_DWORD)v59)
    {
      v60 = 8 * v59;
      v61 = *(unint64_t **)(v54 + 16);
      while (*v61 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v61;
        v60 -= 8;
        if (!v60)
          goto LABEL_97;
      }
    }
    else
    {
      v61 = *(unint64_t **)(v54 + 16);
    }
    v62 = (unint64_t *)(v57 + 8 * v59);
    if (v61 != v62)
    {
      v63 = *v61;
LABEL_73:
      v64 = *(_QWORD *)(v63 + 88);
      do
      {
        v65 = v64;
        v66 = *(_QWORD *)(v64 + 8);
        if ((v66 & 2) == 0)
          break;
        v64 = v66 & 0xFFFFFFFFFFFFFFFCLL;
      }
      while (v64);
      sub_22F2CF4A0(v9, (_BYTE *)(v65 + 32), *(_QWORD *)v65, (uint64_t)&v1531);
      v67 = v61 + 1;
      while (v67 != v62)
      {
        v68 = *v67++;
        v63 = v68;
        if (v68 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v61 = v67 - 1;
          goto LABEL_73;
        }
      }
    }
  }
LABEL_97:
  sub_22E742038(*(llvm::raw_ostream **)(v9 + 16), 7u, (uint64_t)&v1531, 0);
  v36 = *(_QWORD *)(v9 + 64);
  if (v36)
  {
    do
    {
LABEL_98:
      v77 = v36;
      v36 = *(_QWORD *)(v36 + 32);
    }
    while (v36);
    __dst[0] = 0;
    __dst[24] = 0;
    if (*(_BYTE *)(v77 + 288))
    {
      sub_22E6C96C4((void **)__dst, (__int128 *)(v77 + 264));
      if (__dst[24])
      {
        v78 = (char *)operator new(0x228uLL);
        *(_QWORD *)v78 = &unk_24FA715D0;
        *((_QWORD *)v78 + 1) = 0;
        *(_OWORD *)(v78 + 72) = 0u;
        *(_OWORD *)(v78 + 88) = 0u;
        *(_OWORD *)(v78 + 104) = 0u;
        *(_OWORD *)(v78 + 120) = 0u;
        *(_OWORD *)(v78 + 136) = 0u;
        *(_OWORD *)(v78 + 152) = 0u;
        *(_OWORD *)(v78 + 168) = 0u;
        *(_OWORD *)(v78 + 184) = 0u;
        *(_OWORD *)(v78 + 200) = 0u;
        *(_OWORD *)(v78 + 216) = 0u;
        *(_OWORD *)(v78 + 232) = 0u;
        *(_OWORD *)(v78 + 248) = 0u;
        *(_OWORD *)(v78 + 264) = 0u;
        *(_OWORD *)(v78 + 280) = 0u;
        *(_OWORD *)(v78 + 296) = 0u;
        *(_OWORD *)(v78 + 312) = 0u;
        *(_OWORD *)(v78 + 328) = 0u;
        *(_OWORD *)(v78 + 344) = 0u;
        *(_OWORD *)(v78 + 360) = 0u;
        *(_OWORD *)(v78 + 376) = 0u;
        *(_OWORD *)(v78 + 392) = 0u;
        *(_OWORD *)(v78 + 408) = 0u;
        *(_OWORD *)(v78 + 424) = 0u;
        *(_OWORD *)(v78 + 440) = 0u;
        *(_OWORD *)(v78 + 456) = 0u;
        *(_OWORD *)(v78 + 472) = 0u;
        *(_OWORD *)(v78 + 488) = 0u;
        *(_OWORD *)(v78 + 504) = 0u;
        *(_OWORD *)(v78 + 520) = 0u;
        *(_OWORD *)(v78 + 536) = 0u;
        *(_OWORD *)(v78 + 40) = xmmword_22F45FAC0;
        *((_QWORD *)v78 + 2) = 0;
        *((_QWORD *)v78 + 3) = v78 + 40;
        *(_OWORD *)(v78 + 56) = xmmword_22F45E0D0;
        *((_QWORD *)v78 + 4) = 0x2000000002;
        v79 = *(_QWORD *)(v9 + 16);
        v1514 = v78 + 24;
        v1515 = (std::__shared_weak_count *)v78;
        v80 = sub_22E74761C(v79, (uint64_t)&v1514);
        v81 = v1515;
        if (v1515)
        {
          v82 = (unint64_t *)&v1515->__shared_owners_;
          do
            v83 = __ldaxr(v82);
          while (__stlxr(v83 - 1, v82));
          if (!v83)
          {
            ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
            std::__shared_weak_count::__release_weak(v81);
          }
        }
        v1534 = 9;
        if (__dst[23] >= 0)
          v84 = __dst;
        else
          v84 = *(char **)__dst;
        if (__dst[23] >= 0)
          v85 = __dst[23] & 0x7F;
        else
          v85 = *(_QWORD *)&__dst[8];
        sub_22E74241C(*(llvm::raw_ostream **)(v9 + 16), v80, (uint64_t)&v1534, 1, v84, v85, 0);
        if (__dst[24] && (__dst[23] & 0x80000000) != 0)
          operator delete(*(void **)__dst);
      }
    }
    v86 = *(_QWORD *)(v9 + 64);
    do
    {
      v87 = v86;
      v86 = *(_QWORD *)(v86 + 32);
    }
    while (v86);
    __dst[0] = 0;
    __dst[24] = 0;
    if (*(_BYTE *)(v87 + 320))
    {
      sub_22E6C96C4((void **)__dst, (__int128 *)(v87 + 296));
      if (__dst[24])
      {
        v88 = (char *)operator new(0x228uLL);
        *(_QWORD *)v88 = &unk_24FA715D0;
        *((_QWORD *)v88 + 1) = 0;
        *(_OWORD *)(v88 + 72) = 0u;
        *(_OWORD *)(v88 + 88) = 0u;
        *(_OWORD *)(v88 + 104) = 0u;
        *(_OWORD *)(v88 + 120) = 0u;
        *(_OWORD *)(v88 + 136) = 0u;
        *(_OWORD *)(v88 + 152) = 0u;
        *(_OWORD *)(v88 + 168) = 0u;
        *(_OWORD *)(v88 + 184) = 0u;
        *(_OWORD *)(v88 + 200) = 0u;
        *(_OWORD *)(v88 + 216) = 0u;
        *(_OWORD *)(v88 + 232) = 0u;
        *(_OWORD *)(v88 + 248) = 0u;
        *(_OWORD *)(v88 + 264) = 0u;
        *(_OWORD *)(v88 + 280) = 0u;
        *(_OWORD *)(v88 + 296) = 0u;
        *(_OWORD *)(v88 + 312) = 0u;
        *(_OWORD *)(v88 + 328) = 0u;
        *(_OWORD *)(v88 + 344) = 0u;
        *(_OWORD *)(v88 + 360) = 0u;
        *(_OWORD *)(v88 + 376) = 0u;
        *(_OWORD *)(v88 + 392) = 0u;
        *(_OWORD *)(v88 + 408) = 0u;
        *(_OWORD *)(v88 + 424) = 0u;
        *(_OWORD *)(v88 + 440) = 0u;
        *(_OWORD *)(v88 + 456) = 0u;
        *(_OWORD *)(v88 + 472) = 0u;
        *(_OWORD *)(v88 + 488) = 0u;
        *(_OWORD *)(v88 + 504) = 0u;
        *(_OWORD *)(v88 + 520) = 0u;
        *(_OWORD *)(v88 + 536) = 0u;
        *(_OWORD *)(v88 + 40) = xmmword_22F45FAD0;
        *((_QWORD *)v88 + 2) = 0;
        *((_QWORD *)v88 + 3) = v88 + 40;
        *(_OWORD *)(v88 + 56) = xmmword_22F45E0D0;
        *((_QWORD *)v88 + 4) = 0x2000000002;
        v89 = *(_QWORD *)(v9 + 16);
        v1512 = v88 + 24;
        v1513 = (std::__shared_weak_count *)v88;
        v90 = sub_22E74761C(v89, (uint64_t)&v1512);
        v91 = v1513;
        if (v1513)
        {
          v92 = (unint64_t *)&v1513->__shared_owners_;
          do
            v93 = __ldaxr(v92);
          while (__stlxr(v93 - 1, v92));
          if (!v93)
          {
            ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
            std::__shared_weak_count::__release_weak(v91);
          }
        }
        v1534 = 10;
        if (__dst[23] >= 0)
          v94 = __dst;
        else
          v94 = *(char **)__dst;
        if (__dst[23] >= 0)
          v95 = __dst[23] & 0x7F;
        else
          v95 = *(_QWORD *)&__dst[8];
        sub_22E74241C(*(llvm::raw_ostream **)(v9 + 16), v90, (uint64_t)&v1534, 1, v94, v95, 0);
        if (__dst[24] && (__dst[23] & 0x80000000) != 0)
          operator delete(*(void **)__dst);
      }
    }
  }
LABEL_133:
  v96 = *(_QWORD *)(v9 + 56);
  if (v96)
  {
    LODWORD(v1532) = 0;
    v97 = *(unsigned int *)(v96 + 152);
    if ((_DWORD)v97)
    {
      v1456 = *(uint64_t **)(v96 + 144);
      v1457 = &v1456[v97];
      do
      {
        v1458 = *v1456;
        if (*(_BYTE *)(*v1456 + 336))
        {
          v1459 = *(unsigned int *)(v1458 + 4);
          v1460 = v1532;
          if (v1532 >= (unint64_t)HIDWORD(v1532))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v1460 = v1532;
          }
          *((_QWORD *)v1531 + v1460) = v1459;
          LODWORD(v1532) = v1532 + 1;
          sub_22E7C9A94(v9, *(_DWORD *)(v1458 + 740), (uint64_t)&v1531);
          if (*(_OWORD *)(v1458 + 224) == 0 && *(_DWORD *)(v1458 + 240) == 0)
          {
            v1462 = *(_QWORD *)(v1458 + 216);
            do
            {
              v1463 = *(_QWORD *)(v1462 + 8);
              v1462 = v1463 & 0xFFFFFFFFFFFFFFFCLL;
            }
            while ((v1463 & 2) != 0 && v1462);
            v1464 = *(_QWORD *)(v1462 + 24);
          }
          else
          {
            v1464 = 0;
          }
          v1465 = v1532;
          if (v1532 >= (unint64_t)HIDWORD(v1532))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v1465 = v1532;
          }
          *((_QWORD *)v1531 + v1465) = v1464;
          v1466 = v1532 + 1;
          LODWORD(v1532) = v1532 + 1;
          if (*(_OWORD *)(v1458 + 224) != 0 || *(_DWORD *)(v1458 + 240) != 0)
            goto LABEL_1598;
          v1468 = *(_QWORD *)(v1458 + 216);
          if (v1468)
          {
            do
            {
              v1469 = *(_QWORD *)(v1468 + 8);
              v1468 = v1469 & 0xFFFFFFFFFFFFFFFCLL;
            }
            while ((v1469 & 2) != 0 && v1468);
          }
          if (*(_BYTE *)(v9 + 120))
            v1470 = *(_QWORD *)(v1468 + 32);
          else
LABEL_1598:
            v1470 = 0;
          if (v1466 >= HIDWORD(v1532))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v1466 = v1532;
          }
          *((_QWORD *)v1531 + v1466) = v1470;
          LODWORD(v1532) = v1532 + 1;
          v1471 = sub_22E7BE524((uint64_t)&v1531, (unsigned __int8 *)(v1458 + 224), (unsigned __int8 *)(v1458 + 244));
          v1472 = *(_BYTE *)(v1458 + 103);
          v1473 = v1472;
          if (v1472 >= 0)
            v1474 = (char *)(v1458 + 80);
          else
            v1474 = *(char **)(v1458 + 80);
          v1475 = v1472 & 0x7F;
          if (v1473 >= 0)
            v1476 = v1475;
          else
            v1476 = *(_QWORD *)(v1458 + 88);
          sub_22E7BE5A4(v1471, v1474, v1476, (uint64_t)&v1531);
          v1477 = *(_BYTE *)(v1458 + 31);
          v1478 = v1477;
          if (v1477 >= 0)
            v1479 = (_BYTE *)(v1458 + 8);
          else
            v1479 = *(_BYTE **)(v1458 + 8);
          v1480 = v1477 & 0x7F;
          if (v1478 >= 0)
            v1481 = v1480;
          else
            v1481 = *(_QWORD *)(v1458 + 16);
          sub_22F2CF4A0(v9, v1479, v1481, (uint64_t)&v1531);
          v1485 = *(char **)(v1458 + 32);
          v1484 = v1458 + 32;
          v1483 = v1485;
          v1486 = *(_BYTE *)(v1484 + 23);
          v1487 = v1486;
          if (v1486 >= 0)
            v1488 = (char *)v1484;
          else
            v1488 = v1483;
          v1489 = v1486 & 0x7F;
          if (v1487 >= 0)
            v1490 = v1489;
          else
            v1490 = *(_QWORD *)(v1484 + 8);
          sub_22E7BE5A4(v1482, v1488, v1490, (uint64_t)&v1531);
        }
        ++v1456;
      }
      while (v1456 != v1457);
    }
    sub_22E742038(*(llvm::raw_ostream **)(v9 + 16), 2u, (uint64_t)&v1531, 0);
  }
  v98 = (uint64_t)sub_22E74181C(*(_QWORD *)(v9 + 16), 0x11u, 4u);
  v99 = 0;
  LODWORD(v1532) = 0;
  v100 = a3[250];
  v101 = *(_QWORD *)v100 & 1;
  if (!HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v99 = v1532;
  }
  *((_QWORD *)v1531 + v99) = v101;
  v102 = v1532 + 1;
  LODWORD(v1532) = v102;
  v103 = (*(_QWORD *)v100 >> 1) & 1;
  if (v102 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v102 = v1532;
  }
  *((_QWORD *)v1531 + v102) = v103;
  v104 = v1532 + 1;
  LODWORD(v1532) = v104;
  v105 = (*(_QWORD *)v100 >> 2) & 1;
  if (v104 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v104 = v1532;
  }
  *((_QWORD *)v1531 + v104) = v105;
  v106 = v1532 + 1;
  LODWORD(v1532) = v106;
  v107 = (*(_QWORD *)v100 >> 3) & 1;
  if (v106 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v106 = v1532;
  }
  *((_QWORD *)v1531 + v106) = v107;
  v108 = v1532 + 1;
  LODWORD(v1532) = v108;
  v109 = (*(_QWORD *)v100 >> 4) & 1;
  if (v108 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v108 = v1532;
  }
  *((_QWORD *)v1531 + v108) = v109;
  v110 = v1532 + 1;
  LODWORD(v1532) = v110;
  v111 = (*(_QWORD *)v100 >> 5) & 1;
  if (v110 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v110 = v1532;
  }
  *((_QWORD *)v1531 + v110) = v111;
  v112 = v1532 + 1;
  LODWORD(v1532) = v112;
  v113 = (*(_QWORD *)v100 >> 6) & 1;
  if (v112 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v112 = v1532;
  }
  *((_QWORD *)v1531 + v112) = v113;
  v114 = v1532 + 1;
  LODWORD(v1532) = v114;
  v115 = (*(_QWORD *)v100 >> 7) & 1;
  if (v114 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v114 = v1532;
  }
  *((_QWORD *)v1531 + v114) = v115;
  v116 = v1532 + 1;
  LODWORD(v1532) = v116;
  v117 = (*(_QWORD *)v100 >> 8) & 1;
  if (v116 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v116 = v1532;
  }
  *((_QWORD *)v1531 + v116) = v117;
  v118 = v1532 + 1;
  LODWORD(v1532) = v118;
  v119 = (*(_QWORD *)v100 >> 9) & 1;
  if (v118 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v118 = v1532;
  }
  *((_QWORD *)v1531 + v118) = v119;
  v120 = v1532 + 1;
  LODWORD(v1532) = v120;
  v121 = (*(_QWORD *)v100 >> 10) & 1;
  if (v120 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v120 = v1532;
  }
  *((_QWORD *)v1531 + v120) = v121;
  v122 = v1532 + 1;
  LODWORD(v1532) = v122;
  v123 = (*(_QWORD *)v100 >> 11) & 1;
  if (v122 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v122 = v1532;
  }
  *((_QWORD *)v1531 + v122) = v123;
  v124 = v1532 + 1;
  LODWORD(v1532) = v124;
  v125 = (*(_QWORD *)v100 >> 12) & 1;
  if (v124 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v124 = v1532;
  }
  *((_QWORD *)v1531 + v124) = v125;
  v126 = v1532 + 1;
  LODWORD(v1532) = v126;
  v127 = (*(_QWORD *)v100 >> 13) & 1;
  if (v126 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v126 = v1532;
  }
  *((_QWORD *)v1531 + v126) = v127;
  v128 = v1532 + 1;
  LODWORD(v1532) = v128;
  v129 = (*(_QWORD *)v100 >> 14) & 1;
  if (v128 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v128 = v1532;
  }
  *((_QWORD *)v1531 + v128) = v129;
  v130 = v1532 + 1;
  LODWORD(v1532) = v130;
  v131 = (*(_QWORD *)v100 >> 15) & 1;
  if (v130 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v130 = v1532;
  }
  *((_QWORD *)v1531 + v130) = v131;
  v132 = v1532 + 1;
  LODWORD(v1532) = v132;
  v133 = (*(_QWORD *)v100 >> 16) & 1;
  if (v132 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v132 = v1532;
  }
  *((_QWORD *)v1531 + v132) = v133;
  v134 = v1532 + 1;
  LODWORD(v1532) = v134;
  v135 = (*(_QWORD *)v100 >> 17) & 1;
  if (v134 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v134 = v1532;
  }
  *((_QWORD *)v1531 + v134) = v135;
  v136 = v1532 + 1;
  LODWORD(v1532) = v136;
  v137 = (*(_QWORD *)v100 >> 18) & 1;
  if (v136 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v136 = v1532;
  }
  *((_QWORD *)v1531 + v136) = v137;
  v138 = v1532 + 1;
  LODWORD(v1532) = v138;
  v139 = (*(_QWORD *)v100 >> 19) & 1;
  if (v138 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v138 = v1532;
  }
  *((_QWORD *)v1531 + v138) = v139;
  v140 = v1532 + 1;
  LODWORD(v1532) = v140;
  v141 = (*(_QWORD *)v100 >> 20) & 1;
  if (v140 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v140 = v1532;
  }
  *((_QWORD *)v1531 + v140) = v141;
  v142 = v1532 + 1;
  LODWORD(v1532) = v142;
  v143 = (*(_QWORD *)v100 >> 21) & 1;
  if (v142 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v142 = v1532;
  }
  *((_QWORD *)v1531 + v142) = v143;
  v144 = v1532 + 1;
  LODWORD(v1532) = v144;
  v145 = (*(_QWORD *)v100 >> 22) & 1;
  if (v144 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v144 = v1532;
  }
  *((_QWORD *)v1531 + v144) = v145;
  v146 = v1532 + 1;
  LODWORD(v1532) = v146;
  v147 = (*(_QWORD *)v100 >> 23) & 1;
  if (v146 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v146 = v1532;
  }
  *((_QWORD *)v1531 + v146) = v147;
  v148 = v1532 + 1;
  LODWORD(v1532) = v148;
  v149 = (*(_QWORD *)v100 >> 24) & 1;
  if (v148 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v148 = v1532;
  }
  *((_QWORD *)v1531 + v148) = v149;
  v150 = v1532 + 1;
  LODWORD(v1532) = v150;
  v151 = (*(_QWORD *)v100 >> 25) & 1;
  if (v150 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v150 = v1532;
  }
  *((_QWORD *)v1531 + v150) = v151;
  v152 = v1532 + 1;
  LODWORD(v1532) = v152;
  v153 = (*(_QWORD *)v100 >> 26) & 1;
  if (v152 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v152 = v1532;
  }
  *((_QWORD *)v1531 + v152) = v153;
  v154 = v1532 + 1;
  LODWORD(v1532) = v154;
  v155 = (*(_QWORD *)v100 >> 27) & 1;
  if (v154 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v154 = v1532;
  }
  *((_QWORD *)v1531 + v154) = v155;
  v156 = v1532 + 1;
  LODWORD(v1532) = v156;
  v157 = (*(_QWORD *)v100 >> 28) & 1;
  if (v156 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v156 = v1532;
  }
  *((_QWORD *)v1531 + v156) = v157;
  v158 = v1532 + 1;
  LODWORD(v1532) = v158;
  v159 = (*(_QWORD *)v100 >> 29) & 1;
  if (v158 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v158 = v1532;
  }
  *((_QWORD *)v1531 + v158) = v159;
  v160 = v1532 + 1;
  LODWORD(v1532) = v160;
  v161 = (*(_QWORD *)v100 >> 30) & 1;
  if (v160 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v160 = v1532;
  }
  *((_QWORD *)v1531 + v160) = v161;
  v162 = v1532 + 1;
  LODWORD(v1532) = v162;
  v163 = (*(_QWORD *)v100 >> 31) & 1;
  if (v162 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v162 = v1532;
  }
  *((_QWORD *)v1531 + v162) = v163;
  v164 = v1532 + 1;
  LODWORD(v1532) = v164;
  v165 = HIDWORD(*(_QWORD *)v100) & 1;
  if (v164 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v164 = v1532;
  }
  *((_QWORD *)v1531 + v164) = v165;
  v166 = v1532 + 1;
  LODWORD(v1532) = v166;
  v167 = *(unsigned int *)(v100 + 8);
  if (v166 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v166 = v1532;
  }
  *((_QWORD *)v1531 + v166) = v167;
  v168 = v1532 + 1;
  LODWORD(v1532) = v168;
  v169 = HIDWORD(*(_QWORD *)(v100 + 8)) & 1;
  if (v168 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v168 = v1532;
  }
  *((_QWORD *)v1531 + v168) = v169;
  v170 = v1532 + 1;
  LODWORD(v1532) = v170;
  v171 = (*(_QWORD *)(v100 + 8) >> 33) & 1;
  if (v170 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v170 = v1532;
  }
  *((_QWORD *)v1531 + v170) = v171;
  v172 = v1532 + 1;
  LODWORD(v1532) = v172;
  v173 = (*(_QWORD *)(v100 + 8) >> 34) & 1;
  if (v172 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v172 = v1532;
  }
  *((_QWORD *)v1531 + v172) = v173;
  v174 = v1532 + 1;
  LODWORD(v1532) = v174;
  v175 = (*(_QWORD *)(v100 + 8) >> 35) & 1;
  if (v174 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v174 = v1532;
  }
  *((_QWORD *)v1531 + v174) = v175;
  v176 = v1532 + 1;
  LODWORD(v1532) = v176;
  v177 = (*(_QWORD *)(v100 + 8) >> 36) & 1;
  if (v176 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v176 = v1532;
  }
  *((_QWORD *)v1531 + v176) = v177;
  v178 = v1532 + 1;
  LODWORD(v1532) = v178;
  v179 = (*(_QWORD *)(v100 + 8) >> 37) & 1;
  if (v178 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v178 = v1532;
  }
  *((_QWORD *)v1531 + v178) = v179;
  v180 = v1532 + 1;
  LODWORD(v1532) = v180;
  v181 = (*(_QWORD *)(v100 + 8) >> 38) & 1;
  if (v180 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v180 = v1532;
  }
  *((_QWORD *)v1531 + v180) = v181;
  v182 = v1532 + 1;
  LODWORD(v1532) = v182;
  v183 = (*(_QWORD *)(v100 + 8) >> 39) & 1;
  if (v182 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v182 = v1532;
  }
  *((_QWORD *)v1531 + v182) = v183;
  v184 = v1532 + 1;
  LODWORD(v1532) = v184;
  v185 = (*(_QWORD *)(v100 + 8) >> 40) & 1;
  if (v184 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v184 = v1532;
  }
  *((_QWORD *)v1531 + v184) = v185;
  v186 = v1532 + 1;
  LODWORD(v1532) = v186;
  v187 = (*(_QWORD *)(v100 + 232) >> 59) & 3;
  if (v186 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v186 = v1532;
  }
  *((_QWORD *)v1531 + v186) = v187;
  v188 = v1532 + 1;
  LODWORD(v1532) = v188;
  v189 = (*(_QWORD *)(v100 + 232) >> 61) & 3;
  if (v188 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v188 = v1532;
  }
  *((_QWORD *)v1531 + v188) = v189;
  v190 = v1532 + 1;
  LODWORD(v1532) = v190;
  v191 = (*(_QWORD *)(v100 + 8) >> 41) & 1;
  if (v190 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v190 = v1532;
  }
  *((_QWORD *)v1531 + v190) = v191;
  v192 = v1532 + 1;
  LODWORD(v1532) = v192;
  v193 = (*(_QWORD *)(v100 + 8) >> 42) & 1;
  if (v192 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v192 = v1532;
  }
  *((_QWORD *)v1531 + v192) = v193;
  v194 = v1532 + 1;
  LODWORD(v1532) = v194;
  v195 = (*(_QWORD *)(v100 + 8) >> 43) & 1;
  if (v194 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v194 = v1532;
  }
  *((_QWORD *)v1531 + v194) = v195;
  v196 = v1532 + 1;
  LODWORD(v1532) = v196;
  v197 = (*(_QWORD *)(v100 + 8) >> 44) & 1;
  if (v196 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v196 = v1532;
  }
  *((_QWORD *)v1531 + v196) = v197;
  v198 = v1532 + 1;
  LODWORD(v1532) = v198;
  v199 = (*(_QWORD *)(v100 + 8) >> 45) & 1;
  if (v198 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v198 = v1532;
  }
  *((_QWORD *)v1531 + v198) = v199;
  v200 = v1532 + 1;
  LODWORD(v1532) = v200;
  v201 = (*(_QWORD *)(v100 + 8) >> 46) & 1;
  if (v200 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v200 = v1532;
  }
  *((_QWORD *)v1531 + v200) = v201;
  v202 = v1532 + 1;
  LODWORD(v1532) = v202;
  v203 = (*(_QWORD *)(v100 + 8) >> 47) & 1;
  if (v202 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v202 = v1532;
  }
  *((_QWORD *)v1531 + v202) = v203;
  v204 = v1532 + 1;
  LODWORD(v1532) = v204;
  v205 = *(_DWORD *)(v100 + 240) & 7;
  if (v204 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v204 = v1532;
  }
  *((_QWORD *)v1531 + v204) = v205;
  v206 = v1532 + 1;
  LODWORD(v1532) = v206;
  v207 = HIWORD(*(_QWORD *)(v100 + 8)) & 1;
  if (v206 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v206 = v1532;
  }
  *((_QWORD *)v1531 + v206) = v207;
  v208 = v1532 + 1;
  LODWORD(v1532) = v208;
  v209 = (*(_QWORD *)(v100 + 8) >> 49) & 1;
  if (v208 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v208 = v1532;
  }
  *((_QWORD *)v1531 + v208) = v209;
  v210 = v1532 + 1;
  LODWORD(v1532) = v210;
  v211 = (*(_QWORD *)(v100 + 8) >> 50) & 1;
  if (v210 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v210 = v1532;
  }
  *((_QWORD *)v1531 + v210) = v211;
  v212 = v1532 + 1;
  LODWORD(v1532) = v212;
  v213 = (*(_QWORD *)(v100 + 8) >> 51) & 1;
  if (v212 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v212 = v1532;
  }
  *((_QWORD *)v1531 + v212) = v213;
  v214 = v1532 + 1;
  LODWORD(v1532) = v214;
  v215 = (*(_QWORD *)(v100 + 8) >> 52) & 1;
  if (v214 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v214 = v1532;
  }
  *((_QWORD *)v1531 + v214) = v215;
  v216 = v1532 + 1;
  LODWORD(v1532) = v216;
  v217 = (*(_QWORD *)(v100 + 8) >> 53) & 1;
  if (v216 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v216 = v1532;
  }
  *((_QWORD *)v1531 + v216) = v217;
  v218 = v1532 + 1;
  LODWORD(v1532) = v218;
  v219 = (*(_QWORD *)(v100 + 8) >> 54) & 1;
  if (v218 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v218 = v1532;
  }
  *((_QWORD *)v1531 + v218) = v219;
  v220 = v1532 + 1;
  LODWORD(v1532) = v220;
  v221 = (*(_QWORD *)(v100 + 8) >> 55) & 1;
  if (v220 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v220 = v1532;
  }
  *((_QWORD *)v1531 + v220) = v221;
  v222 = v1532 + 1;
  LODWORD(v1532) = v222;
  v223 = HIBYTE(*(_QWORD *)(v100 + 8)) & 1;
  if (v222 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v222 = v1532;
  }
  *((_QWORD *)v1531 + v222) = v223;
  v224 = v1532 + 1;
  LODWORD(v1532) = v224;
  v225 = (*(_QWORD *)(v100 + 8) >> 57) & 1;
  if (v224 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v224 = v1532;
  }
  *((_QWORD *)v1531 + v224) = v225;
  v226 = v1532 + 1;
  LODWORD(v1532) = v226;
  v227 = (*(_QWORD *)(v100 + 8) >> 58) & 1;
  if (v226 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v226 = v1532;
  }
  *((_QWORD *)v1531 + v226) = v227;
  v228 = v1532 + 1;
  LODWORD(v1532) = v228;
  v229 = (*(_QWORD *)(v100 + 8) >> 59) & 1;
  if (v228 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v228 = v1532;
  }
  *((_QWORD *)v1531 + v228) = v229;
  v230 = v1532 + 1;
  LODWORD(v1532) = v230;
  v231 = (*(_QWORD *)(v100 + 8) >> 60) & 1;
  if (v230 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v230 = v1532;
  }
  *((_QWORD *)v1531 + v230) = v231;
  v232 = v1532 + 1;
  LODWORD(v1532) = v232;
  v233 = (*(_QWORD *)(v100 + 8) >> 61) & 1;
  if (v232 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v232 = v1532;
  }
  *((_QWORD *)v1531 + v232) = v233;
  v234 = v1532 + 1;
  LODWORD(v1532) = v234;
  v235 = (*(_QWORD *)(v100 + 8) >> 62) & 1;
  if (v234 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v234 = v1532;
  }
  *((_QWORD *)v1531 + v234) = v235;
  v236 = v1532 + 1;
  LODWORD(v1532) = v236;
  v237 = *(_QWORD *)(v100 + 8) >> 63;
  if (v236 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v236 = v1532;
  }
  *((_QWORD *)v1531 + v236) = v237;
  v238 = v1532 + 1;
  LODWORD(v1532) = v238;
  v239 = *(_WORD *)(v100 + 16) & 1;
  if (v238 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v238 = v1532;
  }
  *((_QWORD *)v1531 + v238) = v239;
  v240 = v1532 + 1;
  LODWORD(v1532) = v240;
  v241 = ((unint64_t)*(unsigned __int16 *)(v100 + 16) >> 1) & 1;
  if (v240 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v240 = v1532;
  }
  *((_QWORD *)v1531 + v240) = v241;
  v242 = v1532 + 1;
  LODWORD(v1532) = v242;
  v243 = ((unint64_t)*(unsigned __int16 *)(v100 + 16) >> 2) & 1;
  if (v242 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v242 = v1532;
  }
  *((_QWORD *)v1531 + v242) = v243;
  v244 = v1532 + 1;
  LODWORD(v1532) = v244;
  v245 = ((unint64_t)*(unsigned __int16 *)(v100 + 16) >> 3) & 1;
  if (v244 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v244 = v1532;
  }
  *((_QWORD *)v1531 + v244) = v245;
  v246 = v1532 + 1;
  LODWORD(v1532) = v246;
  v247 = ((unint64_t)*(unsigned __int16 *)(v100 + 16) >> 4) & 1;
  if (v246 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v246 = v1532;
  }
  *((_QWORD *)v1531 + v246) = v247;
  v248 = v1532 + 1;
  LODWORD(v1532) = v248;
  v249 = ((unint64_t)*(unsigned int *)(v100 + 240) >> 3) & 3;
  if (v248 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v248 = v1532;
  }
  *((_QWORD *)v1531 + v248) = v249;
  v250 = v1532 + 1;
  LODWORD(v1532) = v250;
  v251 = ((unint64_t)*(unsigned __int16 *)(v100 + 16) >> 5) & 1;
  if (v250 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v250 = v1532;
  }
  *((_QWORD *)v1531 + v250) = v251;
  v252 = v1532 + 1;
  LODWORD(v1532) = v252;
  v253 = (unsigned __int16)((unint64_t)(*(unsigned __int16 *)(v100 + 16) | (*(unsigned __int8 *)(v100 + 18) << 16)) >> 6);
  if (v252 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v252 = v1532;
  }
  *((_QWORD *)v1531 + v252) = v253;
  v254 = v1532 + 1;
  LODWORD(v1532) = v254;
  v255 = ((unint64_t)*(unsigned __int8 *)(v100 + 18) >> 6) & 1;
  if (v254 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v254 = v1532;
  }
  *((_QWORD *)v1531 + v254) = v255;
  v256 = v1532 + 1;
  LODWORD(v1532) = v256;
  v257 = ((unint64_t)*(unsigned __int8 *)(v100 + 18) >> 7) & 0x1FFFFFFFFFFLL;
  if (v256 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v256 = v1532;
  }
  *((_QWORD *)v1531 + v256) = v257;
  v258 = v1532 + 1;
  LODWORD(v1532) = v258;
  v259 = *(unsigned int *)(v100 + 20);
  if (v258 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v258 = v1532;
  }
  *((_QWORD *)v1531 + v258) = v259;
  v260 = v1532 + 1;
  LODWORD(v1532) = v260;
  v261 = HIDWORD(*(_QWORD *)(v100 + 20)) & 1;
  if (v260 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v260 = v1532;
  }
  *((_QWORD *)v1531 + v260) = v261;
  v262 = v1532 + 1;
  LODWORD(v1532) = v262;
  v263 = (*(_QWORD *)(v100 + 20) >> 33) & 1;
  if (v262 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v262 = v1532;
  }
  *((_QWORD *)v1531 + v262) = v263;
  v264 = v1532 + 1;
  LODWORD(v1532) = v264;
  v265 = (*(_QWORD *)(v100 + 20) >> 34) & 1;
  if (v264 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v264 = v1532;
  }
  *((_QWORD *)v1531 + v264) = v265;
  v266 = v1532 + 1;
  LODWORD(v1532) = v266;
  v267 = (*(_QWORD *)(v100 + 20) >> 35) & 1;
  if (v266 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v266 = v1532;
  }
  *((_QWORD *)v1531 + v266) = v267;
  v268 = v1532 + 1;
  LODWORD(v1532) = v268;
  v269 = (*(_QWORD *)(v100 + 20) >> 36) & 1;
  if (v268 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v268 = v1532;
  }
  *((_QWORD *)v1531 + v268) = v269;
  v270 = v1532 + 1;
  LODWORD(v1532) = v270;
  v271 = (*(_QWORD *)(v100 + 20) >> 37) & 1;
  if (v270 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v270 = v1532;
  }
  *((_QWORD *)v1531 + v270) = v271;
  v272 = v1532 + 1;
  LODWORD(v1532) = v272;
  v273 = (*(_QWORD *)(v100 + 20) >> 38) & 1;
  if (v272 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v272 = v1532;
  }
  *((_QWORD *)v1531 + v272) = v273;
  v274 = v1532 + 1;
  LODWORD(v1532) = v274;
  v275 = (*(_QWORD *)(v100 + 20) >> 39) & 1;
  if (v274 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v274 = v1532;
  }
  *((_QWORD *)v1531 + v274) = v275;
  v276 = v1532 + 1;
  LODWORD(v1532) = v276;
  v277 = (*(_QWORD *)(v100 + 20) >> 40) & 1;
  if (v276 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v276 = v1532;
  }
  *((_QWORD *)v1531 + v276) = v277;
  v278 = v1532 + 1;
  LODWORD(v1532) = v278;
  v279 = (*(_QWORD *)(v100 + 20) >> 41) & 1;
  if (v278 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v278 = v1532;
  }
  *((_QWORD *)v1531 + v278) = v279;
  v280 = v1532 + 1;
  LODWORD(v1532) = v280;
  v281 = (*(_QWORD *)(v100 + 20) >> 42) & 1;
  if (v280 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v280 = v1532;
  }
  *((_QWORD *)v1531 + v280) = v281;
  v282 = v1532 + 1;
  LODWORD(v1532) = v282;
  v283 = (*(_QWORD *)(v100 + 20) >> 43) & 1;
  if (v282 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v282 = v1532;
  }
  *((_QWORD *)v1531 + v282) = v283;
  v284 = v1532 + 1;
  LODWORD(v1532) = v284;
  v285 = (*(_QWORD *)(v100 + 20) >> 44) & 1;
  if (v284 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v284 = v1532;
  }
  *((_QWORD *)v1531 + v284) = v285;
  v286 = v1532 + 1;
  LODWORD(v1532) = v286;
  v287 = (*(_QWORD *)(v100 + 20) >> 45) & 1;
  if (v286 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v286 = v1532;
  }
  *((_QWORD *)v1531 + v286) = v287;
  v288 = v1532 + 1;
  LODWORD(v1532) = v288;
  v289 = (*(_QWORD *)(v100 + 20) >> 46) & 1;
  if (v288 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v288 = v1532;
  }
  *((_QWORD *)v1531 + v288) = v289;
  v290 = v1532 + 1;
  LODWORD(v1532) = v290;
  v291 = (*(_QWORD *)(v100 + 20) >> 47) & 1;
  if (v290 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v290 = v1532;
  }
  *((_QWORD *)v1531 + v290) = v291;
  v292 = v1532 + 1;
  LODWORD(v1532) = v292;
  v293 = *(_DWORD *)(v100 + 240) >> 5;
  if (v292 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v292 = v1532;
  }
  *((_QWORD *)v1531 + v292) = v293;
  v294 = v1532 + 1;
  LODWORD(v1532) = v294;
  v295 = HIWORD(*(_QWORD *)(v100 + 20)) & 1;
  if (v294 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v294 = v1532;
  }
  *((_QWORD *)v1531 + v294) = v295;
  v296 = v1532 + 1;
  LODWORD(v1532) = v296;
  v297 = (*(_QWORD *)(v100 + 20) >> 49) & 1;
  if (v296 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v296 = v1532;
  }
  *((_QWORD *)v1531 + v296) = v297;
  v298 = v1532 + 1;
  LODWORD(v1532) = v298;
  v299 = (*(_QWORD *)(v100 + 20) >> 50) & 1;
  if (v298 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v298 = v1532;
  }
  *((_QWORD *)v1531 + v298) = v299;
  v300 = v1532 + 1;
  LODWORD(v1532) = v300;
  v301 = (*(_QWORD *)(v100 + 20) >> 51) & 1;
  if (v300 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v300 = v1532;
  }
  *((_QWORD *)v1531 + v300) = v301;
  v302 = v1532 + 1;
  LODWORD(v1532) = v302;
  v303 = (*(_QWORD *)(v100 + 20) >> 52) & 1;
  if (v302 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v302 = v1532;
  }
  *((_QWORD *)v1531 + v302) = v303;
  v304 = v1532 + 1;
  LODWORD(v1532) = v304;
  v305 = (*(_QWORD *)(v100 + 20) >> 53) & 1;
  if (v304 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v304 = v1532;
  }
  *((_QWORD *)v1531 + v304) = v305;
  v306 = v1532 + 1;
  LODWORD(v1532) = v306;
  v307 = (*(_QWORD *)(v100 + 20) >> 54) & 1;
  if (v306 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v306 = v1532;
  }
  *((_QWORD *)v1531 + v306) = v307;
  v308 = v1532 + 1;
  LODWORD(v1532) = v308;
  v309 = (*(_QWORD *)(v100 + 20) >> 55) & 1;
  if (v308 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v308 = v1532;
  }
  *((_QWORD *)v1531 + v308) = v309;
  v310 = v1532 + 1;
  LODWORD(v1532) = v310;
  v311 = HIBYTE(*(_QWORD *)(v100 + 20)) & 1;
  if (v310 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v310 = v1532;
  }
  *((_QWORD *)v1531 + v310) = v311;
  v312 = v1532 + 1;
  LODWORD(v1532) = v312;
  v313 = (*(_QWORD *)(v100 + 20) >> 57) & 1;
  if (v312 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v312 = v1532;
  }
  *((_QWORD *)v1531 + v312) = v313;
  v314 = v1532 + 1;
  LODWORD(v1532) = v314;
  v315 = (*(_QWORD *)(v100 + 20) >> 58) & 1;
  if (v314 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v314 = v1532;
  }
  *((_QWORD *)v1531 + v314) = v315;
  v316 = v1532 + 1;
  LODWORD(v1532) = v316;
  v317 = (*(_QWORD *)(v100 + 20) >> 59) & 1;
  if (v316 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v316 = v1532;
  }
  *((_QWORD *)v1531 + v316) = v317;
  v318 = v1532 + 1;
  LODWORD(v1532) = v318;
  v319 = (*(_QWORD *)(v100 + 20) >> 60) & 1;
  if (v318 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v318 = v1532;
  }
  *((_QWORD *)v1531 + v318) = v319;
  v320 = v1532 + 1;
  LODWORD(v1532) = v320;
  v321 = (*(_QWORD *)(v100 + 20) >> 61) & 1;
  if (v320 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v320 = v1532;
  }
  *((_QWORD *)v1531 + v320) = v321;
  v322 = v1532 + 1;
  LODWORD(v1532) = v322;
  v323 = (*(_QWORD *)(v100 + 20) >> 62) & 1;
  if (v322 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v322 = v1532;
  }
  *((_QWORD *)v1531 + v322) = v323;
  v324 = v1532 + 1;
  LODWORD(v1532) = v324;
  v325 = *(_QWORD *)(v100 + 20) >> 63;
  if (v324 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v324 = v1532;
  }
  *((_QWORD *)v1531 + v324) = v325;
  v326 = v1532 + 1;
  LODWORD(v1532) = v326;
  v327 = *(_BYTE *)(v100 + 28) & 1;
  if (v326 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v326 = v1532;
  }
  *((_QWORD *)v1531 + v326) = v327;
  v328 = v1532 + 1;
  LODWORD(v1532) = v328;
  v329 = ((unint64_t)*(unsigned __int8 *)(v100 + 28) >> 1) & 1;
  if (v328 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v328 = v1532;
  }
  *((_QWORD *)v1531 + v328) = v329;
  v330 = v1532 + 1;
  LODWORD(v1532) = v330;
  v331 = ((unint64_t)*(unsigned __int8 *)(v100 + 28) >> 2) & 1;
  if (v330 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v330 = v1532;
  }
  *((_QWORD *)v1531 + v330) = v331;
  v332 = v1532 + 1;
  LODWORD(v1532) = v332;
  v333 = ((unint64_t)*(unsigned __int8 *)(v100 + 28) >> 3) & 1;
  if (v332 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v332 = v1532;
  }
  *((_QWORD *)v1531 + v332) = v333;
  v334 = v1532 + 1;
  LODWORD(v1532) = v334;
  v335 = ((unint64_t)*(unsigned __int8 *)(v100 + 28) >> 4) & 1;
  if (v334 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v334 = v1532;
  }
  *((_QWORD *)v1531 + v334) = v335;
  v336 = v1532 + 1;
  LODWORD(v1532) = v336;
  v337 = ((unint64_t)*(unsigned __int8 *)(v100 + 28) >> 5) & 1;
  if (v336 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v336 = v1532;
  }
  *((_QWORD *)v1531 + v336) = v337;
  v338 = v1532 + 1;
  LODWORD(v1532) = v338;
  v339 = *(unsigned int *)(v100 + 32);
  if (v338 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v338 = v1532;
  }
  *((_QWORD *)v1531 + v338) = v339;
  v340 = v1532 + 1;
  LODWORD(v1532) = v340;
  v341 = *(unsigned int *)(v100 + 36);
  if (v340 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v340 = v1532;
  }
  *((_QWORD *)v1531 + v340) = v341;
  v342 = v1532 + 1;
  LODWORD(v1532) = v342;
  v343 = *(_BYTE *)(v100 + 40) & 1;
  if (v342 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v342 = v1532;
  }
  *((_QWORD *)v1531 + v342) = v343;
  v344 = v1532 + 1;
  LODWORD(v1532) = v344;
  v345 = *(unsigned int *)(v100 + 44);
  if (v344 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v344 = v1532;
  }
  *((_QWORD *)v1531 + v344) = v345;
  v346 = v1532 + 1;
  LODWORD(v1532) = v346;
  v347 = *(unsigned int *)(v100 + 48);
  if (v346 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v346 = v1532;
  }
  *((_QWORD *)v1531 + v346) = v347;
  v348 = v1532 + 1;
  LODWORD(v1532) = v348;
  v349 = *(_DWORD *)(v100 + 52) & 1;
  if (v348 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v348 = v1532;
  }
  *((_QWORD *)v1531 + v348) = v349;
  v350 = v1532 + 1;
  LODWORD(v1532) = v350;
  v351 = ((unint64_t)*(unsigned int *)(v100 + 52) >> 1) & 1;
  if (v350 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v350 = v1532;
  }
  *((_QWORD *)v1531 + v350) = v351;
  v352 = v1532 + 1;
  LODWORD(v1532) = v352;
  v353 = ((unint64_t)*(unsigned int *)(v100 + 52) >> 2) & 3;
  if (v352 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v352 = v1532;
  }
  *((_QWORD *)v1531 + v352) = v353;
  v354 = v1532 + 1;
  LODWORD(v1532) = v354;
  v355 = ((unint64_t)*(unsigned int *)(v100 + 52) >> 4) & 1;
  if (v354 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v354 = v1532;
  }
  *((_QWORD *)v1531 + v354) = v355;
  v356 = v1532 + 1;
  LODWORD(v1532) = v356;
  v357 = ((unint64_t)*(unsigned int *)(v100 + 52) >> 5) & 1;
  if (v356 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v356 = v1532;
  }
  *((_QWORD *)v1531 + v356) = v357;
  v358 = v1532 + 1;
  LODWORD(v1532) = v358;
  v359 = ((unint64_t)*(unsigned int *)(v100 + 52) >> 6) & 1;
  if (v358 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v358 = v1532;
  }
  *((_QWORD *)v1531 + v358) = v359;
  v360 = v1532 + 1;
  LODWORD(v1532) = v360;
  v361 = ((unint64_t)*(unsigned int *)(v100 + 52) >> 7) & 1;
  if (v360 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v360 = v1532;
  }
  *((_QWORD *)v1531 + v360) = v361;
  v362 = v1532 + 1;
  LODWORD(v1532) = v362;
  v363 = ((unint64_t)*(unsigned int *)(v100 + 52) >> 8) & 1;
  if (v362 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v362 = v1532;
  }
  *((_QWORD *)v1531 + v362) = v363;
  v364 = v1532 + 1;
  LODWORD(v1532) = v364;
  v365 = ((unint64_t)*(unsigned int *)(v100 + 52) >> 9) & 1;
  if (v364 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v364 = v1532;
  }
  *((_QWORD *)v1531 + v364) = v365;
  v366 = v1532 + 1;
  LODWORD(v1532) = v366;
  v367 = ((unint64_t)*(unsigned int *)(v100 + 52) >> 10) & 1;
  if (v366 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v366 = v1532;
  }
  *((_QWORD *)v1531 + v366) = v367;
  v368 = v1532 + 1;
  LODWORD(v1532) = v368;
  v369 = ((unint64_t)*(unsigned int *)(v100 + 52) >> 11) & 1;
  if (v368 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v368 = v1532;
  }
  *((_QWORD *)v1531 + v368) = v369;
  v370 = v1532 + 1;
  LODWORD(v1532) = v370;
  v371 = ((unint64_t)*(unsigned int *)(v100 + 52) >> 12) & 1;
  if (v370 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v370 = v1532;
  }
  *((_QWORD *)v1531 + v370) = v371;
  v372 = v1532 + 1;
  LODWORD(v1532) = v372;
  v373 = ((unint64_t)*(unsigned int *)(v100 + 52) >> 13) & 1;
  if (v372 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v372 = v1532;
  }
  *((_QWORD *)v1531 + v372) = v373;
  v374 = v1532 + 1;
  LODWORD(v1532) = v374;
  v375 = ((unint64_t)*(unsigned int *)(v100 + 52) >> 14) & 1;
  if (v374 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v374 = v1532;
  }
  *((_QWORD *)v1531 + v374) = v375;
  v376 = v1532 + 1;
  LODWORD(v1532) = v376;
  v377 = ((unint64_t)*(unsigned int *)(v100 + 52) >> 15) & 1;
  if (v376 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v376 = v1532;
  }
  *((_QWORD *)v1531 + v376) = v377;
  v378 = v1532 + 1;
  LODWORD(v1532) = v378;
  v379 = *(_WORD *)(v100 + 54) & 1;
  if (v378 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v378 = v1532;
  }
  *((_QWORD *)v1531 + v378) = v379;
  v380 = v1532 + 1;
  LODWORD(v1532) = v380;
  v381 = ((unint64_t)*(unsigned int *)(v100 + 52) >> 17) & 1;
  if (v380 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v380 = v1532;
  }
  *((_QWORD *)v1531 + v380) = v381;
  v382 = v1532 + 1;
  LODWORD(v1532) = v382;
  v383 = ((unint64_t)*(unsigned int *)(v100 + 52) >> 18) & 1;
  if (v382 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v382 = v1532;
  }
  *((_QWORD *)v1531 + v382) = v383;
  v384 = v1532 + 1;
  LODWORD(v1532) = v384;
  v385 = ((unint64_t)*(unsigned int *)(v100 + 52) >> 19) & 1;
  if (v384 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v384 = v1532;
  }
  *((_QWORD *)v1531 + v384) = v385;
  v386 = v1532 + 1;
  LODWORD(v1532) = v386;
  v387 = ((unint64_t)*(unsigned int *)(v100 + 52) >> 20) & 1;
  if (v386 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v386 = v1532;
  }
  *((_QWORD *)v1531 + v386) = v387;
  v388 = v1532 + 1;
  LODWORD(v1532) = v388;
  v389 = ((unint64_t)*(unsigned int *)(v100 + 52) >> 21) & 1;
  if (v388 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v388 = v1532;
  }
  *((_QWORD *)v1531 + v388) = v389;
  v390 = v1532 + 1;
  LODWORD(v1532) = v390;
  v391 = ((unint64_t)*(unsigned int *)(v100 + 52) >> 22) & 1;
  if (v390 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v390 = v1532;
  }
  *((_QWORD *)v1531 + v390) = v391;
  v392 = v1532 + 1;
  LODWORD(v1532) = v392;
  v393 = ((unint64_t)*(unsigned int *)(v100 + 52) >> 23) & 1;
  if (v392 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v392 = v1532;
  }
  *((_QWORD *)v1531 + v392) = v393;
  v394 = v1532 + 1;
  LODWORD(v1532) = v394;
  v395 = *(_BYTE *)(v100 + 55) & 0xF;
  if (v394 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v394 = v1532;
  }
  *((_QWORD *)v1531 + v394) = v395;
  v396 = v1532 + 1;
  LODWORD(v1532) = v396;
  v397 = ((unint64_t)*(unsigned int *)(v100 + 52) >> 28) & 1;
  if (v396 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v396 = v1532;
  }
  *((_QWORD *)v1531 + v396) = v397;
  v398 = v1532 + 1;
  LODWORD(v1532) = v398;
  v399 = ((unint64_t)*(unsigned int *)(v100 + 240) >> 8) & 3;
  if (v398 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v398 = v1532;
  }
  *((_QWORD *)v1531 + v398) = v399;
  v400 = v1532 + 1;
  LODWORD(v1532) = v400;
  v401 = ((unint64_t)*(unsigned int *)(v100 + 240) >> 10) & 7;
  if (v400 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v400 = v1532;
  }
  *((_QWORD *)v1531 + v400) = v401;
  v402 = v1532 + 1;
  LODWORD(v1532) = v402;
  v403 = ((unint64_t)*(unsigned int *)(v100 + 52) >> 29) & 1;
  if (v402 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v402 = v1532;
  }
  *((_QWORD *)v1531 + v402) = v403;
  v404 = v1532 + 1;
  LODWORD(v1532) = v404;
  v405 = ((unint64_t)*(unsigned int *)(v100 + 52) >> 30) & 1;
  if (v404 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v404 = v1532;
  }
  *((_QWORD *)v1531 + v404) = v405;
  v406 = v1532 + 1;
  LODWORD(v1532) = v406;
  v407 = *(unsigned int *)(v100 + 56);
  if (v406 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v406 = v1532;
  }
  *((_QWORD *)v1531 + v406) = v407;
  v408 = v1532 + 1;
  LODWORD(v1532) = v408;
  v409 = HIDWORD(*(_QWORD *)(v100 + 56)) & 1;
  if (v408 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v408 = v1532;
  }
  *((_QWORD *)v1531 + v408) = v409;
  v410 = v1532 + 1;
  LODWORD(v1532) = v410;
  v411 = *(unsigned int *)(v100 + 64);
  if (v410 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v410 = v1532;
  }
  *((_QWORD *)v1531 + v410) = v411;
  v412 = v1532 + 1;
  LODWORD(v1532) = v412;
  v413 = HIDWORD(*(_QWORD *)(v100 + 64)) & 1;
  if (v412 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v412 = v1532;
  }
  *((_QWORD *)v1531 + v412) = v413;
  v414 = v1532 + 1;
  LODWORD(v1532) = v414;
  v415 = (*(_QWORD *)(v100 + 64) >> 33) & 1;
  if (v414 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v414 = v1532;
  }
  *((_QWORD *)v1531 + v414) = v415;
  v416 = v1532 + 1;
  LODWORD(v1532) = v416;
  v417 = (*(_QWORD *)(v100 + 64) >> 34) & 1;
  if (v416 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v416 = v1532;
  }
  *((_QWORD *)v1531 + v416) = v417;
  v418 = v1532 + 1;
  LODWORD(v1532) = v418;
  v419 = (*(_QWORD *)(v100 + 64) >> 35) & 1;
  if (v418 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v418 = v1532;
  }
  *((_QWORD *)v1531 + v418) = v419;
  v420 = v1532 + 1;
  LODWORD(v1532) = v420;
  v421 = (*(_QWORD *)(v100 + 64) >> 36) & 1;
  if (v420 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v420 = v1532;
  }
  *((_QWORD *)v1531 + v420) = v421;
  v422 = v1532 + 1;
  LODWORD(v1532) = v422;
  v423 = (*(_QWORD *)(v100 + 64) >> 37) & 1;
  if (v422 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v422 = v1532;
  }
  *((_QWORD *)v1531 + v422) = v423;
  v424 = v1532 + 1;
  LODWORD(v1532) = v424;
  v425 = (*(_QWORD *)(v100 + 64) >> 38) & 1;
  if (v424 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v424 = v1532;
  }
  *((_QWORD *)v1531 + v424) = v425;
  v426 = v1532 + 1;
  LODWORD(v1532) = v426;
  v427 = *(unsigned int *)(v100 + 72);
  if (v426 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v426 = v1532;
  }
  *((_QWORD *)v1531 + v426) = v427;
  v428 = v1532 + 1;
  LODWORD(v1532) = v428;
  v429 = HIDWORD(*(_QWORD *)(v100 + 72)) & 1;
  if (v428 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v428 = v1532;
  }
  *((_QWORD *)v1531 + v428) = v429;
  v430 = v1532 + 1;
  LODWORD(v1532) = v430;
  v431 = (*(_QWORD *)(v100 + 72) >> 33) & 1;
  if (v430 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v430 = v1532;
  }
  *((_QWORD *)v1531 + v430) = v431;
  v432 = v1532 + 1;
  LODWORD(v1532) = v432;
  v433 = (*(_QWORD *)(v100 + 72) >> 34) & 1;
  if (v432 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v432 = v1532;
  }
  *((_QWORD *)v1531 + v432) = v433;
  v434 = v1532 + 1;
  LODWORD(v1532) = v434;
  v435 = (*(_QWORD *)(v100 + 72) >> 35) & 1;
  if (v434 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v434 = v1532;
  }
  *((_QWORD *)v1531 + v434) = v435;
  v436 = v1532 + 1;
  LODWORD(v1532) = v436;
  v437 = (*(_QWORD *)(v100 + 72) >> 36) & 1;
  if (v436 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v436 = v1532;
  }
  *((_QWORD *)v1531 + v436) = v437;
  v438 = v1532 + 1;
  LODWORD(v1532) = v438;
  v439 = (*(_QWORD *)(v100 + 72) >> 37) & 1;
  if (v438 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v438 = v1532;
  }
  *((_QWORD *)v1531 + v438) = v439;
  v440 = v1532 + 1;
  LODWORD(v1532) = v440;
  v441 = (*(_QWORD *)(v100 + 72) >> 38) & 1;
  if (v440 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v440 = v1532;
  }
  *((_QWORD *)v1531 + v440) = v441;
  v442 = v1532 + 1;
  LODWORD(v1532) = v442;
  v443 = *(unsigned int *)(v100 + 80);
  if (v442 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v442 = v1532;
  }
  *((_QWORD *)v1531 + v442) = v443;
  v444 = v1532 + 1;
  LODWORD(v1532) = v444;
  v445 = *(unsigned int *)(v100 + 84);
  if (v444 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v444 = v1532;
  }
  *((_QWORD *)v1531 + v444) = v445;
  v446 = v1532 + 1;
  LODWORD(v1532) = v446;
  v447 = *(unsigned int *)(v100 + 88);
  if (v446 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v446 = v1532;
  }
  *((_QWORD *)v1531 + v446) = v447;
  v448 = v1532 + 1;
  LODWORD(v1532) = v448;
  v449 = HIDWORD(*(_QWORD *)(v100 + 88));
  if (v448 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v448 = v1532;
  }
  *((_QWORD *)v1531 + v448) = v449;
  v450 = v1532 + 1;
  LODWORD(v1532) = v450;
  v451 = *(_WORD *)(v100 + 96) & 1;
  if (v450 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v450 = v1532;
  }
  *((_QWORD *)v1531 + v450) = v451;
  v452 = v1532 + 1;
  LODWORD(v1532) = v452;
  v453 = ((unint64_t)*(unsigned __int16 *)(v100 + 96) >> 1) & 1;
  if (v452 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v452 = v1532;
  }
  *((_QWORD *)v1531 + v452) = v453;
  v454 = v1532 + 1;
  LODWORD(v1532) = v454;
  v455 = ((unint64_t)*(unsigned __int16 *)(v100 + 96) >> 2) & 1;
  if (v454 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v454 = v1532;
  }
  *((_QWORD *)v1531 + v454) = v455;
  v456 = v1532 + 1;
  LODWORD(v1532) = v456;
  v457 = ((unint64_t)*(unsigned __int16 *)(v100 + 96) >> 3) & 1;
  if (v456 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v456 = v1532;
  }
  *((_QWORD *)v1531 + v456) = v457;
  v458 = v1532 + 1;
  LODWORD(v1532) = v458;
  v459 = ((unint64_t)*(unsigned __int16 *)(v100 + 96) >> 4) & 1;
  if (v458 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v458 = v1532;
  }
  *((_QWORD *)v1531 + v458) = v459;
  v460 = v1532 + 1;
  LODWORD(v1532) = v460;
  v461 = ((unint64_t)*(unsigned __int16 *)(v100 + 96) >> 5) & 1;
  if (v460 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v460 = v1532;
  }
  *((_QWORD *)v1531 + v460) = v461;
  v462 = v1532 + 1;
  LODWORD(v1532) = v462;
  v463 = ((unint64_t)*(unsigned __int16 *)(v100 + 96) >> 6) & 1;
  if (v462 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v462 = v1532;
  }
  *((_QWORD *)v1531 + v462) = v463;
  v464 = v1532 + 1;
  LODWORD(v1532) = v464;
  v465 = (unsigned __int16)((unint64_t)*(unsigned int *)(v100 + 240) >> 13);
  if (v464 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v464 = v1532;
  }
  *((_QWORD *)v1531 + v464) = v465;
  v466 = v1532 + 1;
  LODWORD(v1532) = v466;
  v467 = ((unint64_t)*(unsigned __int16 *)(v100 + 96) >> 7) & 1;
  if (v466 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v466 = v1532;
  }
  *((_QWORD *)v1531 + v466) = v467;
  v468 = v1532 + 1;
  LODWORD(v1532) = v468;
  v469 = *(_BYTE *)(v100 + 97) & 1;
  if (v468 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v468 = v1532;
  }
  *((_QWORD *)v1531 + v468) = v469;
  v470 = v1532 + 1;
  LODWORD(v1532) = v470;
  v471 = ((unint64_t)*(unsigned __int16 *)(v100 + 96) >> 9) & 1;
  if (v470 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v470 = v1532;
  }
  *((_QWORD *)v1531 + v470) = v471;
  v472 = v1532 + 1;
  LODWORD(v1532) = v472;
  v473 = ((unint64_t)*(unsigned __int16 *)(v100 + 96) >> 10) & 1;
  if (v472 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v472 = v1532;
  }
  *((_QWORD *)v1531 + v472) = v473;
  v474 = v1532 + 1;
  LODWORD(v1532) = v474;
  v475 = ((unint64_t)*(unsigned __int16 *)(v100 + 96) >> 11) & 1;
  if (v474 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v474 = v1532;
  }
  *((_QWORD *)v1531 + v474) = v475;
  v476 = v1532 + 1;
  LODWORD(v1532) = v476;
  v477 = ((unint64_t)*(unsigned __int16 *)(v100 + 96) >> 12) & 1;
  if (v476 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v476 = v1532;
  }
  *((_QWORD *)v1531 + v476) = v477;
  v478 = v1532 + 1;
  LODWORD(v1532) = v478;
  v479 = *(unsigned int *)(v100 + 100);
  if (v478 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v478 = v1532;
  }
  *((_QWORD *)v1531 + v478) = v479;
  v480 = v1532 + 1;
  LODWORD(v1532) = v480;
  v481 = HIDWORD(*(_QWORD *)(v100 + 100)) & 1;
  if (v480 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v480 = v1532;
  }
  *((_QWORD *)v1531 + v480) = v481;
  v482 = v1532 + 1;
  LODWORD(v1532) = v482;
  v483 = (*(_QWORD *)(v100 + 100) >> 33) & 1;
  if (v482 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v482 = v1532;
  }
  *((_QWORD *)v1531 + v482) = v483;
  v484 = v1532 + 1;
  LODWORD(v1532) = v484;
  v485 = (*(_QWORD *)(v100 + 100) >> 34) & 1;
  if (v484 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v484 = v1532;
  }
  *((_QWORD *)v1531 + v484) = v485;
  v486 = v1532 + 1;
  LODWORD(v1532) = v486;
  v487 = (*(_QWORD *)(v100 + 100) >> 35) & 1;
  if (v486 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v486 = v1532;
  }
  *((_QWORD *)v1531 + v486) = v487;
  v488 = v1532 + 1;
  LODWORD(v1532) = v488;
  v489 = ((unint64_t)*(unsigned int *)(v100 + 240) >> 29) & 3;
  if (v488 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v488 = v1532;
  }
  *((_QWORD *)v1531 + v488) = v489;
  v490 = v1532 + 1;
  LODWORD(v1532) = v490;
  v491 = (*(_QWORD *)(v100 + 100) >> 36) & 1;
  if (v490 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v490 = v1532;
  }
  *((_QWORD *)v1531 + v490) = v491;
  v492 = v1532 + 1;
  LODWORD(v1532) = v492;
  v493 = (*(_QWORD *)(v100 + 100) >> 37) & 1;
  if (v492 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v492 = v1532;
  }
  *((_QWORD *)v1531 + v492) = v493;
  v494 = v1532 + 1;
  LODWORD(v1532) = v494;
  v495 = (*(_QWORD *)(v100 + 100) >> 38) & 1;
  if (v494 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v494 = v1532;
  }
  *((_QWORD *)v1531 + v494) = v495;
  v496 = v1532 + 1;
  LODWORD(v1532) = v496;
  v497 = (*(_QWORD *)(v100 + 100) >> 39) & 1;
  if (v496 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v496 = v1532;
  }
  *((_QWORD *)v1531 + v496) = v497;
  v498 = v1532 + 1;
  LODWORD(v1532) = v498;
  v499 = *(unsigned int *)(v100 + 108);
  if (v498 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v498 = v1532;
  }
  *((_QWORD *)v1531 + v498) = v499;
  v500 = v1532 + 1;
  LODWORD(v1532) = v500;
  v501 = *(unsigned int *)(v100 + 112);
  if (v500 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v500 = v1532;
  }
  *((_QWORD *)v1531 + v500) = v501;
  v502 = v1532 + 1;
  LODWORD(v1532) = v502;
  v503 = *(unsigned int *)(v100 + 116);
  if (v502 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v502 = v1532;
  }
  *((_QWORD *)v1531 + v502) = v503;
  v504 = v1532 + 1;
  LODWORD(v1532) = v504;
  v505 = *(_QWORD *)(v100 + 120) & 1;
  if (v504 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v504 = v1532;
  }
  *((_QWORD *)v1531 + v504) = v505;
  v506 = v1532 + 1;
  LODWORD(v1532) = v506;
  v507 = (*(__int128 *)(v100 + 116) >> 33) & 1;
  if (v506 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v506 = v1532;
  }
  *((_QWORD *)v1531 + v506) = v507;
  v508 = v1532 + 1;
  LODWORD(v1532) = v508;
  v509 = (*(__int128 *)(v100 + 116) >> 34) & 1;
  if (v508 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v508 = v1532;
  }
  *((_QWORD *)v1531 + v508) = v509;
  v510 = v1532 + 1;
  LODWORD(v1532) = v510;
  v511 = (*(__int128 *)(v100 + 116) >> 35) & 1;
  if (v510 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v510 = v1532;
  }
  *((_QWORD *)v1531 + v510) = v511;
  v512 = v1532 + 1;
  LODWORD(v1532) = v512;
  v513 = (*(__int128 *)(v100 + 116) >> 36) & 1;
  if (v512 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v512 = v1532;
  }
  *((_QWORD *)v1531 + v512) = v513;
  v514 = v1532 + 1;
  LODWORD(v1532) = v514;
  v515 = (*(__int128 *)(v100 + 116) >> 37) & 1;
  if (v514 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v514 = v1532;
  }
  *((_QWORD *)v1531 + v514) = v515;
  v516 = v1532 + 1;
  LODWORD(v1532) = v516;
  v517 = (*(__int128 *)(v100 + 116) >> 38) & 1;
  if (v516 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v516 = v1532;
  }
  *((_QWORD *)v1531 + v516) = v517;
  v518 = v1532 + 1;
  LODWORD(v1532) = v518;
  v519 = (*(__int128 *)(v100 + 116) >> 39) & 1;
  if (v518 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v518 = v1532;
  }
  *((_QWORD *)v1531 + v518) = v519;
  v520 = v1532 + 1;
  LODWORD(v1532) = v520;
  v521 = *(_QWORD *)(v100 + 121) & 1;
  if (v520 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v520 = v1532;
  }
  *((_QWORD *)v1531 + v520) = v521;
  v522 = v1532 + 1;
  LODWORD(v1532) = v522;
  v523 = (*(__int128 *)(v100 + 116) >> 41) & 1;
  if (v522 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v522 = v1532;
  }
  *((_QWORD *)v1531 + v522) = v523;
  v524 = v1532 + 1;
  LODWORD(v1532) = v524;
  v525 = (*(__int128 *)(v100 + 116) >> 42) & 1;
  if (v524 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v524 = v1532;
  }
  *((_QWORD *)v1531 + v524) = v525;
  v526 = v1532 + 1;
  LODWORD(v1532) = v526;
  v527 = (*(__int128 *)(v100 + 116) >> 43) & 1;
  if (v526 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v526 = v1532;
  }
  *((_QWORD *)v1531 + v526) = v527;
  v528 = v1532 + 1;
  LODWORD(v1532) = v528;
  v529 = (*(__int128 *)(v100 + 116) >> 44) & 1;
  if (v528 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v528 = v1532;
  }
  *((_QWORD *)v1531 + v528) = v529;
  v530 = v1532 + 1;
  LODWORD(v1532) = v530;
  v531 = (*(__int128 *)(v100 + 116) >> 45) & 1;
  if (v530 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v530 = v1532;
  }
  *((_QWORD *)v1531 + v530) = v531;
  v532 = v1532 + 1;
  LODWORD(v1532) = v532;
  v533 = (*(__int128 *)(v100 + 116) >> 46) & 1;
  if (v532 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v532 = v1532;
  }
  *((_QWORD *)v1531 + v532) = v533;
  v534 = v1532 + 1;
  LODWORD(v1532) = v534;
  v535 = (*(__int128 *)(v100 + 116) >> 47) & 1;
  if (v534 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v534 = v1532;
  }
  *((_QWORD *)v1531 + v534) = v535;
  v536 = v1532 + 1;
  LODWORD(v1532) = v536;
  v537 = *(_QWORD *)(v100 + 122) & 1;
  if (v536 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v536 = v1532;
  }
  *((_QWORD *)v1531 + v536) = v537;
  v538 = v1532 + 1;
  LODWORD(v1532) = v538;
  v539 = (*(__int128 *)(v100 + 116) >> 49) & 1;
  if (v538 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v538 = v1532;
  }
  *((_QWORD *)v1531 + v538) = v539;
  v540 = v1532 + 1;
  LODWORD(v1532) = v540;
  v541 = (*(__int128 *)(v100 + 116) >> 50) & 1;
  if (v540 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v540 = v1532;
  }
  *((_QWORD *)v1531 + v540) = v541;
  v542 = v1532 + 1;
  LODWORD(v1532) = v542;
  v543 = (*(__int128 *)(v100 + 116) >> 51) & 1;
  if (v542 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v542 = v1532;
  }
  *((_QWORD *)v1531 + v542) = v543;
  v544 = v1532 + 1;
  LODWORD(v1532) = v544;
  v545 = (*(__int128 *)(v100 + 116) >> 52) & 1;
  if (v544 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v544 = v1532;
  }
  *((_QWORD *)v1531 + v544) = v545;
  v546 = v1532 + 1;
  LODWORD(v1532) = v546;
  v547 = (*(__int128 *)(v100 + 116) >> 53) & 1;
  if (v546 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v546 = v1532;
  }
  *((_QWORD *)v1531 + v546) = v547;
  v548 = v1532 + 1;
  LODWORD(v1532) = v548;
  v549 = (*(__int128 *)(v100 + 116) >> 54) & 1;
  if (v548 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v548 = v1532;
  }
  *((_QWORD *)v1531 + v548) = v549;
  v550 = v1532 + 1;
  LODWORD(v1532) = v550;
  v551 = (*(__int128 *)(v100 + 116) >> 55) & 1;
  if (v550 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v550 = v1532;
  }
  *((_QWORD *)v1531 + v550) = v551;
  v552 = v1532 + 1;
  LODWORD(v1532) = v552;
  v553 = *(_QWORD *)(v100 + 123) & 1;
  if (v552 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v552 = v1532;
  }
  *((_QWORD *)v1531 + v552) = v553;
  v554 = v1532 + 1;
  LODWORD(v1532) = v554;
  v555 = (*(__int128 *)(v100 + 116) >> 57) & 1;
  if (v554 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v554 = v1532;
  }
  *((_QWORD *)v1531 + v554) = v555;
  v556 = v1532 + 1;
  LODWORD(v1532) = v556;
  v557 = (*(__int128 *)(v100 + 116) >> 58) & 1;
  if (v556 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v556 = v1532;
  }
  *((_QWORD *)v1531 + v556) = v557;
  v558 = v1532 + 1;
  LODWORD(v1532) = v558;
  v559 = (*(__int128 *)(v100 + 116) >> 59) & 1;
  if (v558 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v558 = v1532;
  }
  *((_QWORD *)v1531 + v558) = v559;
  v560 = v1532 + 1;
  LODWORD(v1532) = v560;
  v561 = (*(__int128 *)(v100 + 116) >> 60) & 1;
  if (v560 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v560 = v1532;
  }
  *((_QWORD *)v1531 + v560) = v561;
  v562 = v1532 + 1;
  LODWORD(v1532) = v562;
  v563 = (*(__int128 *)(v100 + 116) >> 61) & 1;
  if (v562 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v562 = v1532;
  }
  *((_QWORD *)v1531 + v562) = v563;
  v564 = v1532 + 1;
  LODWORD(v1532) = v564;
  v565 = (*(__int128 *)(v100 + 116) >> 62) & 1;
  if (v564 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v564 = v1532;
  }
  *((_QWORD *)v1531 + v564) = v565;
  v566 = v1532 + 1;
  LODWORD(v1532) = v566;
  v567 = (*(__int128 *)(v100 + 116) >> 63) & 1;
  if (v566 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v566 = v1532;
  }
  *((_QWORD *)v1531 + v566) = v567;
  v568 = v1532 + 1;
  LODWORD(v1532) = v568;
  v569 = *(_QWORD *)(v100 + 124) & 1;
  if (v568 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v568 = v1532;
  }
  *((_QWORD *)v1531 + v568) = v569;
  v570 = v1532 + 1;
  LODWORD(v1532) = v570;
  v571 = (*(__int128 *)(v100 + 124) >> 1) & 1;
  if (v570 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v570 = v1532;
  }
  *((_QWORD *)v1531 + v570) = v571;
  v572 = v1532 + 1;
  LODWORD(v1532) = v572;
  v573 = (*(__int128 *)(v100 + 124) >> 2) & 1;
  if (v572 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v572 = v1532;
  }
  *((_QWORD *)v1531 + v572) = v573;
  v574 = v1532 + 1;
  LODWORD(v1532) = v574;
  v575 = (*(__int128 *)(v100 + 124) >> 3) & 1;
  if (v574 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v574 = v1532;
  }
  *((_QWORD *)v1531 + v574) = v575;
  v576 = v1532 + 1;
  LODWORD(v1532) = v576;
  v577 = (*(__int128 *)(v100 + 124) >> 4) & 1;
  if (v576 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v576 = v1532;
  }
  *((_QWORD *)v1531 + v576) = v577;
  v578 = v1532 + 1;
  LODWORD(v1532) = v578;
  v579 = (*(__int128 *)(v100 + 124) >> 5) & 1;
  if (v578 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v578 = v1532;
  }
  *((_QWORD *)v1531 + v578) = v579;
  v580 = v1532 + 1;
  LODWORD(v1532) = v580;
  v581 = (*(__int128 *)(v100 + 124) >> 6) & 1;
  if (v580 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v580 = v1532;
  }
  *((_QWORD *)v1531 + v580) = v581;
  v582 = v1532 + 1;
  LODWORD(v1532) = v582;
  v583 = (*(__int128 *)(v100 + 124) >> 7) & 1;
  if (v582 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v582 = v1532;
  }
  *((_QWORD *)v1531 + v582) = v583;
  v584 = v1532 + 1;
  LODWORD(v1532) = v584;
  v585 = *(_QWORD *)(v100 + 125) & 1;
  if (v584 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v584 = v1532;
  }
  *((_QWORD *)v1531 + v584) = v585;
  v586 = v1532 + 1;
  LODWORD(v1532) = v586;
  v587 = (*(__int128 *)(v100 + 124) >> 9) & 1;
  if (v586 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v586 = v1532;
  }
  *((_QWORD *)v1531 + v586) = v587;
  v588 = v1532 + 1;
  LODWORD(v1532) = v588;
  v589 = (*(__int128 *)(v100 + 124) >> 10) & 1;
  if (v588 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v588 = v1532;
  }
  *((_QWORD *)v1531 + v588) = v589;
  v590 = v1532 + 1;
  LODWORD(v1532) = v590;
  v591 = (*(__int128 *)(v100 + 124) >> 11) & 1;
  if (v590 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v590 = v1532;
  }
  *((_QWORD *)v1531 + v590) = v591;
  v592 = v1532 + 1;
  LODWORD(v1532) = v592;
  v593 = (*(__int128 *)(v100 + 124) >> 12) & 1;
  if (v592 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v592 = v1532;
  }
  *((_QWORD *)v1531 + v592) = v593;
  v594 = v1532 + 1;
  LODWORD(v1532) = v594;
  v595 = (*(__int128 *)(v100 + 124) >> 13) & 1;
  if (v594 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v594 = v1532;
  }
  *((_QWORD *)v1531 + v594) = v595;
  v596 = v1532 + 1;
  LODWORD(v1532) = v596;
  v597 = (*(__int128 *)(v100 + 124) >> 14) & 1;
  if (v596 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v596 = v1532;
  }
  *((_QWORD *)v1531 + v596) = v597;
  v598 = v1532 + 1;
  LODWORD(v1532) = v598;
  v599 = (*(__int128 *)(v100 + 124) >> 15) & 1;
  if (v598 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v598 = v1532;
  }
  *((_QWORD *)v1531 + v598) = v599;
  v600 = v1532 + 1;
  LODWORD(v1532) = v600;
  v601 = *(_QWORD *)(v100 + 126) & 1;
  if (v600 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v600 = v1532;
  }
  *((_QWORD *)v1531 + v600) = v601;
  v602 = v1532 + 1;
  LODWORD(v1532) = v602;
  v603 = (*(__int128 *)(v100 + 124) >> 17) & 1;
  if (v602 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v602 = v1532;
  }
  *((_QWORD *)v1531 + v602) = v603;
  v604 = v1532 + 1;
  LODWORD(v1532) = v604;
  v605 = (*(__int128 *)(v100 + 124) >> 18) & 1;
  if (v604 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v604 = v1532;
  }
  *((_QWORD *)v1531 + v604) = v605;
  v606 = v1532 + 1;
  LODWORD(v1532) = v606;
  v607 = (*(__int128 *)(v100 + 124) >> 19) & 1;
  if (v606 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v606 = v1532;
  }
  *((_QWORD *)v1531 + v606) = v607;
  v608 = v1532 + 1;
  LODWORD(v1532) = v608;
  v609 = (*(__int128 *)(v100 + 124) >> 20) & 1;
  if (v608 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v608 = v1532;
  }
  *((_QWORD *)v1531 + v608) = v609;
  v610 = v1532 + 1;
  LODWORD(v1532) = v610;
  v611 = (*(__int128 *)(v100 + 124) >> 21) & 1;
  if (v610 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v610 = v1532;
  }
  *((_QWORD *)v1531 + v610) = v611;
  v612 = v1532 + 1;
  LODWORD(v1532) = v612;
  v613 = (*(__int128 *)(v100 + 124) >> 22) & 1;
  if (v612 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v612 = v1532;
  }
  *((_QWORD *)v1531 + v612) = v613;
  v614 = v1532 + 1;
  LODWORD(v1532) = v614;
  v615 = (*(__int128 *)(v100 + 124) >> 23) & 1;
  if (v614 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v614 = v1532;
  }
  *((_QWORD *)v1531 + v614) = v615;
  v616 = v1532 + 1;
  LODWORD(v1532) = v616;
  v617 = *(_QWORD *)(v100 + 127) & 1;
  if (v616 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v616 = v1532;
  }
  *((_QWORD *)v1531 + v616) = v617;
  v618 = v1532 + 1;
  LODWORD(v1532) = v618;
  v619 = (*(__int128 *)(v100 + 124) >> 25) & 1;
  if (v618 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v618 = v1532;
  }
  *((_QWORD *)v1531 + v618) = v619;
  v620 = v1532 + 1;
  LODWORD(v1532) = v620;
  v621 = (*(__int128 *)(v100 + 124) >> 26) & 1;
  if (v620 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v620 = v1532;
  }
  *((_QWORD *)v1531 + v620) = v621;
  v622 = v1532 + 1;
  LODWORD(v1532) = v622;
  v623 = (*(__int128 *)(v100 + 124) >> 27) & 1;
  if (v622 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v622 = v1532;
  }
  *((_QWORD *)v1531 + v622) = v623;
  v624 = v1532 + 1;
  LODWORD(v1532) = v624;
  v625 = (*(__int128 *)(v100 + 124) >> 28) & 1;
  if (v624 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v624 = v1532;
  }
  *((_QWORD *)v1531 + v624) = v625;
  v626 = v1532 + 1;
  LODWORD(v1532) = v626;
  v627 = (*(__int128 *)(v100 + 124) >> 29) & 1;
  if (v626 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v626 = v1532;
  }
  *((_QWORD *)v1531 + v626) = v627;
  v628 = v1532 + 1;
  LODWORD(v1532) = v628;
  v629 = (*(__int128 *)(v100 + 124) >> 30) & 1;
  if (v628 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v628 = v1532;
  }
  *((_QWORD *)v1531 + v628) = v629;
  v630 = v1532 + 1;
  LODWORD(v1532) = v630;
  v631 = (*(__int128 *)(v100 + 124) >> 31) & 1;
  if (v630 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v630 = v1532;
  }
  *((_QWORD *)v1531 + v630) = v631;
  v632 = v1532 + 1;
  LODWORD(v1532) = v632;
  v633 = *(_QWORD *)(v100 + 128) & 1;
  if (v632 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v632 = v1532;
  }
  *((_QWORD *)v1531 + v632) = v633;
  v634 = v1532 + 1;
  LODWORD(v1532) = v634;
  v635 = (*(__int128 *)(v100 + 124) >> 33) & 1;
  if (v634 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v634 = v1532;
  }
  *((_QWORD *)v1531 + v634) = v635;
  v636 = v1532 + 1;
  LODWORD(v1532) = v636;
  v637 = (*(__int128 *)(v100 + 124) >> 34) & 1;
  if (v636 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v636 = v1532;
  }
  *((_QWORD *)v1531 + v636) = v637;
  v638 = v1532 + 1;
  LODWORD(v1532) = v638;
  v639 = (*(__int128 *)(v100 + 124) >> 35) & 1;
  if (v638 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v638 = v1532;
  }
  *((_QWORD *)v1531 + v638) = v639;
  v640 = v1532 + 1;
  LODWORD(v1532) = v640;
  v641 = (*(__int128 *)(v100 + 124) >> 36) & 1;
  if (v640 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v640 = v1532;
  }
  *((_QWORD *)v1531 + v640) = v641;
  v642 = v1532 + 1;
  LODWORD(v1532) = v642;
  v643 = (*(__int128 *)(v100 + 124) >> 37) & 1;
  if (v642 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v642 = v1532;
  }
  *((_QWORD *)v1531 + v642) = v643;
  v644 = v1532 + 1;
  LODWORD(v1532) = v644;
  v645 = (*(__int128 *)(v100 + 124) >> 38) & 1;
  if (v644 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v644 = v1532;
  }
  *((_QWORD *)v1531 + v644) = v645;
  v646 = v1532 + 1;
  LODWORD(v1532) = v646;
  v647 = (*(__int128 *)(v100 + 124) >> 39) & 1;
  if (v646 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v646 = v1532;
  }
  *((_QWORD *)v1531 + v646) = v647;
  v648 = v1532 + 1;
  LODWORD(v1532) = v648;
  v649 = *(_QWORD *)(v100 + 129) & 1;
  if (v648 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v648 = v1532;
  }
  *((_QWORD *)v1531 + v648) = v649;
  v650 = v1532 + 1;
  LODWORD(v1532) = v650;
  v651 = (*(__int128 *)(v100 + 124) >> 41) & 1;
  if (v650 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v650 = v1532;
  }
  *((_QWORD *)v1531 + v650) = v651;
  v652 = v1532 + 1;
  LODWORD(v1532) = v652;
  v653 = (*(__int128 *)(v100 + 124) >> 42) & 1;
  if (v652 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v652 = v1532;
  }
  *((_QWORD *)v1531 + v652) = v653;
  v654 = v1532 + 1;
  LODWORD(v1532) = v654;
  v655 = (*(__int128 *)(v100 + 124) >> 43) & 1;
  if (v654 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v654 = v1532;
  }
  *((_QWORD *)v1531 + v654) = v655;
  v656 = v1532 + 1;
  LODWORD(v1532) = v656;
  v657 = (*(__int128 *)(v100 + 124) >> 44) & 1;
  if (v656 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v656 = v1532;
  }
  *((_QWORD *)v1531 + v656) = v657;
  v658 = v1532 + 1;
  LODWORD(v1532) = v658;
  v659 = (*(__int128 *)(v100 + 124) >> 45) & 1;
  if (v658 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v658 = v1532;
  }
  *((_QWORD *)v1531 + v658) = v659;
  v660 = v1532 + 1;
  LODWORD(v1532) = v660;
  v661 = (*(__int128 *)(v100 + 124) >> 46) & 1;
  if (v660 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v660 = v1532;
  }
  *((_QWORD *)v1531 + v660) = v661;
  v662 = v1532 + 1;
  LODWORD(v1532) = v662;
  v663 = (*(__int128 *)(v100 + 124) >> 47) & 1;
  if (v662 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v662 = v1532;
  }
  *((_QWORD *)v1531 + v662) = v663;
  v664 = v1532 + 1;
  LODWORD(v1532) = v664;
  v665 = *(_QWORD *)(v100 + 130) & 1;
  if (v664 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v664 = v1532;
  }
  *((_QWORD *)v1531 + v664) = v665;
  v666 = v1532 + 1;
  LODWORD(v1532) = v666;
  v667 = (*(__int128 *)(v100 + 124) >> 49) & 1;
  if (v666 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v666 = v1532;
  }
  *((_QWORD *)v1531 + v666) = v667;
  v668 = v1532 + 1;
  LODWORD(v1532) = v668;
  v669 = (*(__int128 *)(v100 + 124) >> 50) & 1;
  if (v668 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v668 = v1532;
  }
  *((_QWORD *)v1531 + v668) = v669;
  v670 = v1532 + 1;
  LODWORD(v1532) = v670;
  v671 = (*(__int128 *)(v100 + 124) >> 51) & 1;
  if (v670 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v670 = v1532;
  }
  *((_QWORD *)v1531 + v670) = v671;
  v672 = v1532 + 1;
  LODWORD(v1532) = v672;
  v673 = (*(__int128 *)(v100 + 124) >> 52) & 1;
  if (v672 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v672 = v1532;
  }
  *((_QWORD *)v1531 + v672) = v673;
  v674 = v1532 + 1;
  LODWORD(v1532) = v674;
  v675 = (*(__int128 *)(v100 + 124) >> 53) & 1;
  if (v674 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v674 = v1532;
  }
  *((_QWORD *)v1531 + v674) = v675;
  v676 = v1532 + 1;
  LODWORD(v1532) = v676;
  v677 = (*(__int128 *)(v100 + 124) >> 54) & 1;
  if (v676 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v676 = v1532;
  }
  *((_QWORD *)v1531 + v676) = v677;
  v678 = v1532 + 1;
  LODWORD(v1532) = v678;
  v679 = (*(__int128 *)(v100 + 124) >> 55) & 1;
  if (v678 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v678 = v1532;
  }
  *((_QWORD *)v1531 + v678) = v679;
  v680 = v1532 + 1;
  LODWORD(v1532) = v680;
  v681 = *(_QWORD *)(v100 + 131) & 1;
  if (v680 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v680 = v1532;
  }
  *((_QWORD *)v1531 + v680) = v681;
  v682 = v1532 + 1;
  LODWORD(v1532) = v682;
  v683 = (*(__int128 *)(v100 + 124) >> 57) & 1;
  if (v682 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v682 = v1532;
  }
  *((_QWORD *)v1531 + v682) = v683;
  v684 = v1532 + 1;
  LODWORD(v1532) = v684;
  v685 = (*(__int128 *)(v100 + 124) >> 58) & 1;
  if (v684 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v684 = v1532;
  }
  *((_QWORD *)v1531 + v684) = v685;
  v686 = v1532 + 1;
  LODWORD(v1532) = v686;
  v687 = (*(__int128 *)(v100 + 124) >> 59) & 1;
  if (v686 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v686 = v1532;
  }
  *((_QWORD *)v1531 + v686) = v687;
  v688 = v1532 + 1;
  LODWORD(v1532) = v688;
  v689 = (*(__int128 *)(v100 + 124) >> 60) & 1;
  if (v688 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v688 = v1532;
  }
  *((_QWORD *)v1531 + v688) = v689;
  v690 = v1532 + 1;
  LODWORD(v1532) = v690;
  v691 = (*(__int128 *)(v100 + 124) >> 61) & 1;
  if (v690 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v690 = v1532;
  }
  *((_QWORD *)v1531 + v690) = v691;
  v692 = v1532 + 1;
  LODWORD(v1532) = v692;
  v693 = (*(__int128 *)(v100 + 124) >> 62) & 1;
  if (v692 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v692 = v1532;
  }
  *((_QWORD *)v1531 + v692) = v693;
  v694 = v1532 + 1;
  LODWORD(v1532) = v694;
  v695 = (*(__int128 *)(v100 + 124) >> 63) & 1;
  if (v694 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v694 = v1532;
  }
  *((_QWORD *)v1531 + v694) = v695;
  v696 = v1532 + 1;
  LODWORD(v1532) = v696;
  v697 = *(_DWORD *)(v100 + 244) & 3;
  if (v696 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v696 = v1532;
  }
  *((_QWORD *)v1531 + v696) = v697;
  v698 = v1532 + 1;
  LODWORD(v1532) = v698;
  v699 = *(_QWORD *)(v100 + 132) & 1;
  if (v698 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v698 = v1532;
  }
  *((_QWORD *)v1531 + v698) = v699;
  v700 = v1532 + 1;
  LODWORD(v1532) = v700;
  v701 = (*(_QWORD *)(v100 + 132) >> 1) & 1;
  if (v700 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v700 = v1532;
  }
  *((_QWORD *)v1531 + v700) = v701;
  v702 = v1532 + 1;
  LODWORD(v1532) = v702;
  v703 = (*(_QWORD *)(v100 + 132) >> 2) & 1;
  if (v702 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v702 = v1532;
  }
  *((_QWORD *)v1531 + v702) = v703;
  v704 = v1532 + 1;
  LODWORD(v1532) = v704;
  v705 = (*(_QWORD *)(v100 + 132) >> 3) & 1;
  if (v704 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v704 = v1532;
  }
  *((_QWORD *)v1531 + v704) = v705;
  v706 = v1532 + 1;
  LODWORD(v1532) = v706;
  v707 = (*(_QWORD *)(v100 + 132) >> 4) & 1;
  if (v706 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v706 = v1532;
  }
  *((_QWORD *)v1531 + v706) = v707;
  v708 = v1532 + 1;
  LODWORD(v1532) = v708;
  v709 = (*(_QWORD *)(v100 + 132) >> 5) & 1;
  if (v708 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v708 = v1532;
  }
  *((_QWORD *)v1531 + v708) = v709;
  v710 = v1532 + 1;
  LODWORD(v1532) = v710;
  v711 = (*(_QWORD *)(v100 + 132) >> 6) & 1;
  if (v710 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v710 = v1532;
  }
  *((_QWORD *)v1531 + v710) = v711;
  v712 = v1532 + 1;
  LODWORD(v1532) = v712;
  v713 = (*(_QWORD *)(v100 + 132) >> 7) & 1;
  if (v712 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v712 = v1532;
  }
  *((_QWORD *)v1531 + v712) = v713;
  v714 = v1532 + 1;
  LODWORD(v1532) = v714;
  v715 = (*(_QWORD *)(v100 + 132) >> 8) & 1;
  if (v714 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v714 = v1532;
  }
  *((_QWORD *)v1531 + v714) = v715;
  v716 = v1532 + 1;
  LODWORD(v1532) = v716;
  v717 = (*(_QWORD *)(v100 + 132) >> 9) & 1;
  if (v716 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v716 = v1532;
  }
  *((_QWORD *)v1531 + v716) = v717;
  v718 = v1532 + 1;
  LODWORD(v1532) = v718;
  v719 = (*(_QWORD *)(v100 + 132) >> 10) & 1;
  if (v718 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v718 = v1532;
  }
  *((_QWORD *)v1531 + v718) = v719;
  v720 = v1532 + 1;
  LODWORD(v1532) = v720;
  v721 = (*(_QWORD *)(v100 + 132) >> 11) & 1;
  if (v720 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v720 = v1532;
  }
  *((_QWORD *)v1531 + v720) = v721;
  v722 = v1532 + 1;
  LODWORD(v1532) = v722;
  v723 = (*(_QWORD *)(v100 + 132) >> 12) & 1;
  if (v722 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v722 = v1532;
  }
  *((_QWORD *)v1531 + v722) = v723;
  v724 = v1532 + 1;
  LODWORD(v1532) = v724;
  v725 = (*(_QWORD *)(v100 + 132) >> 13) & 1;
  if (v724 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v724 = v1532;
  }
  *((_QWORD *)v1531 + v724) = v725;
  v726 = v1532 + 1;
  LODWORD(v1532) = v726;
  v727 = (*(_QWORD *)(v100 + 132) >> 14) & 1;
  if (v726 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v726 = v1532;
  }
  *((_QWORD *)v1531 + v726) = v727;
  v728 = v1532 + 1;
  LODWORD(v1532) = v728;
  v729 = (*(_QWORD *)(v100 + 132) >> 15) & 1;
  if (v728 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v728 = v1532;
  }
  *((_QWORD *)v1531 + v728) = v729;
  v730 = v1532 + 1;
  LODWORD(v1532) = v730;
  v731 = *(unsigned __int16 *)(v100 + 134);
  if (v730 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v730 = v1532;
  }
  *((_QWORD *)v1531 + v730) = v731;
  v732 = v1532 + 1;
  LODWORD(v1532) = v732;
  v733 = *(_DWORD *)(v100 + 136) & 1;
  if (v732 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v732 = v1532;
  }
  *((_QWORD *)v1531 + v732) = v733;
  v734 = v1532 + 1;
  LODWORD(v1532) = v734;
  v735 = (*(_QWORD *)(v100 + 132) >> 33) & 1;
  if (v734 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v734 = v1532;
  }
  *((_QWORD *)v1531 + v734) = v735;
  v736 = v1532 + 1;
  LODWORD(v1532) = v736;
  v737 = (*(_QWORD *)(v100 + 132) >> 34) & 1;
  if (v736 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v736 = v1532;
  }
  *((_QWORD *)v1531 + v736) = v737;
  v738 = v1532 + 1;
  LODWORD(v1532) = v738;
  v739 = (*(_QWORD *)(v100 + 132) >> 35) & 1;
  if (v738 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v738 = v1532;
  }
  *((_QWORD *)v1531 + v738) = v739;
  v740 = v1532 + 1;
  LODWORD(v1532) = v740;
  v741 = (*(_QWORD *)(v100 + 132) >> 36) & 1;
  if (v740 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v740 = v1532;
  }
  *((_QWORD *)v1531 + v740) = v741;
  v742 = v1532 + 1;
  LODWORD(v1532) = v742;
  v743 = (*(_QWORD *)(v100 + 132) >> 37) & 1;
  if (v742 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v742 = v1532;
  }
  *((_QWORD *)v1531 + v742) = v743;
  v744 = v1532 + 1;
  LODWORD(v1532) = v744;
  v745 = (*(_QWORD *)(v100 + 132) >> 38) & 1;
  if (v744 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v744 = v1532;
  }
  *((_QWORD *)v1531 + v744) = v745;
  v746 = v1532 + 1;
  LODWORD(v1532) = v746;
  v747 = *(unsigned int *)(v100 + 140);
  if (v746 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v746 = v1532;
  }
  *((_QWORD *)v1531 + v746) = v747;
  v748 = v1532 + 1;
  LODWORD(v1532) = v748;
  v749 = HIDWORD(*(_QWORD *)(v100 + 140)) & 1;
  if (v748 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v748 = v1532;
  }
  *((_QWORD *)v1531 + v748) = v749;
  v750 = v1532 + 1;
  LODWORD(v1532) = v750;
  v751 = (*(_QWORD *)(v100 + 140) >> 33) & 1;
  if (v750 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v750 = v1532;
  }
  *((_QWORD *)v1531 + v750) = v751;
  v752 = v1532 + 1;
  LODWORD(v1532) = v752;
  v753 = (*(_QWORD *)(v100 + 140) >> 34) & 1;
  if (v752 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v752 = v1532;
  }
  *((_QWORD *)v1531 + v752) = v753;
  v754 = v1532 + 1;
  LODWORD(v1532) = v754;
  v755 = (*(_QWORD *)(v100 + 140) >> 35) & 1;
  if (v754 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v754 = v1532;
  }
  *((_QWORD *)v1531 + v754) = v755;
  v756 = v1532 + 1;
  LODWORD(v1532) = v756;
  v757 = (*(_QWORD *)(v100 + 140) >> 36) & 1;
  if (v756 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v756 = v1532;
  }
  *((_QWORD *)v1531 + v756) = v757;
  v758 = v1532 + 1;
  LODWORD(v1532) = v758;
  v759 = (*(_QWORD *)(v100 + 140) >> 37) & 1;
  if (v758 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v758 = v1532;
  }
  *((_QWORD *)v1531 + v758) = v759;
  v760 = v1532 + 1;
  LODWORD(v1532) = v760;
  v761 = (*(_QWORD *)(v100 + 140) >> 38) & 1;
  if (v760 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v760 = v1532;
  }
  *((_QWORD *)v1531 + v760) = v761;
  v762 = v1532 + 1;
  LODWORD(v1532) = v762;
  v763 = (*(_QWORD *)(v100 + 140) >> 39) & 1;
  if (v762 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v762 = v1532;
  }
  *((_QWORD *)v1531 + v762) = v763;
  v764 = v1532 + 1;
  LODWORD(v1532) = v764;
  v765 = (*(_QWORD *)(v100 + 140) >> 40) & 1;
  if (v764 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v764 = v1532;
  }
  *((_QWORD *)v1531 + v764) = v765;
  v766 = v1532 + 1;
  LODWORD(v1532) = v766;
  v767 = (*(_QWORD *)(v100 + 140) >> 41) & 1;
  if (v766 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v766 = v1532;
  }
  *((_QWORD *)v1531 + v766) = v767;
  v768 = v1532 + 1;
  LODWORD(v1532) = v768;
  v769 = (*(_QWORD *)(v100 + 140) >> 42) & 1;
  if (v768 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v768 = v1532;
  }
  *((_QWORD *)v1531 + v768) = v769;
  v770 = v1532 + 1;
  LODWORD(v1532) = v770;
  v771 = (*(_QWORD *)(v100 + 140) >> 43) & 1;
  if (v770 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v770 = v1532;
  }
  *((_QWORD *)v1531 + v770) = v771;
  v772 = v1532 + 1;
  LODWORD(v1532) = v772;
  v773 = (*(_QWORD *)(v100 + 140) >> 44) & 1;
  if (v772 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v772 = v1532;
  }
  *((_QWORD *)v1531 + v772) = v773;
  v774 = v1532 + 1;
  LODWORD(v1532) = v774;
  v775 = (*(_QWORD *)(v100 + 140) >> 45) & 1;
  if (v774 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v774 = v1532;
  }
  *((_QWORD *)v1531 + v774) = v775;
  v776 = v1532 + 1;
  LODWORD(v1532) = v776;
  v777 = (*(_QWORD *)(v100 + 140) >> 46) & 1;
  if (v776 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v776 = v1532;
  }
  *((_QWORD *)v1531 + v776) = v777;
  v778 = v1532 + 1;
  LODWORD(v1532) = v778;
  v779 = (*(_QWORD *)(v100 + 140) >> 47) & 1;
  if (v778 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v778 = v1532;
  }
  *((_QWORD *)v1531 + v778) = v779;
  v780 = v1532 + 1;
  LODWORD(v1532) = v780;
  v781 = HIWORD(*(_QWORD *)(v100 + 140)) & 1;
  if (v780 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v780 = v1532;
  }
  *((_QWORD *)v1531 + v780) = v781;
  v782 = v1532 + 1;
  LODWORD(v1532) = v782;
  v783 = (*(_QWORD *)(v100 + 140) >> 49) & 1;
  if (v782 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v782 = v1532;
  }
  *((_QWORD *)v1531 + v782) = v783;
  v784 = v1532 + 1;
  LODWORD(v1532) = v784;
  v785 = (*(_QWORD *)(v100 + 140) >> 50) & 1;
  if (v784 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v784 = v1532;
  }
  *((_QWORD *)v1531 + v784) = v785;
  v786 = v1532 + 1;
  LODWORD(v1532) = v786;
  v787 = (*(_QWORD *)(v100 + 140) >> 51) & 1;
  if (v786 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v786 = v1532;
  }
  *((_QWORD *)v1531 + v786) = v787;
  v788 = v1532 + 1;
  LODWORD(v1532) = v788;
  v789 = (*(_QWORD *)(v100 + 140) >> 52) & 1;
  if (v788 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v788 = v1532;
  }
  *((_QWORD *)v1531 + v788) = v789;
  v790 = v1532 + 1;
  LODWORD(v1532) = v790;
  v791 = (*(_QWORD *)(v100 + 140) >> 53) & 1;
  if (v790 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v790 = v1532;
  }
  *((_QWORD *)v1531 + v790) = v791;
  v792 = v1532 + 1;
  LODWORD(v1532) = v792;
  v793 = (*(_QWORD *)(v100 + 140) >> 54) & 1;
  if (v792 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v792 = v1532;
  }
  *((_QWORD *)v1531 + v792) = v793;
  v794 = v1532 + 1;
  LODWORD(v1532) = v794;
  v795 = (*(_QWORD *)(v100 + 140) >> 55) & 1;
  if (v794 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v794 = v1532;
  }
  *((_QWORD *)v1531 + v794) = v795;
  v796 = v1532 + 1;
  LODWORD(v1532) = v796;
  v797 = HIBYTE(*(_QWORD *)(v100 + 140)) & 1;
  if (v796 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v796 = v1532;
  }
  *((_QWORD *)v1531 + v796) = v797;
  v798 = v1532 + 1;
  LODWORD(v1532) = v798;
  v799 = (*(_QWORD *)(v100 + 140) >> 57) & 1;
  if (v798 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v798 = v1532;
  }
  *((_QWORD *)v1531 + v798) = v799;
  v800 = v1532 + 1;
  LODWORD(v1532) = v800;
  v801 = (*(_QWORD *)(v100 + 140) >> 58) & 1;
  if (v800 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v800 = v1532;
  }
  *((_QWORD *)v1531 + v800) = v801;
  v802 = v1532 + 1;
  LODWORD(v1532) = v802;
  v803 = (*(_QWORD *)(v100 + 140) >> 59) & 1;
  if (v802 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v802 = v1532;
  }
  *((_QWORD *)v1531 + v802) = v803;
  v804 = v1532 + 1;
  LODWORD(v1532) = v804;
  v805 = (*(_QWORD *)(v100 + 140) >> 60) & 1;
  if (v804 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v804 = v1532;
  }
  *((_QWORD *)v1531 + v804) = v805;
  v806 = v1532 + 1;
  LODWORD(v1532) = v806;
  v807 = (*(_QWORD *)(v100 + 140) >> 61) & 1;
  if (v806 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v806 = v1532;
  }
  *((_QWORD *)v1531 + v806) = v807;
  v808 = v1532 + 1;
  LODWORD(v1532) = v808;
  v809 = ((unint64_t)*(unsigned int *)(v100 + 244) >> 2) & 3;
  if (v808 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v808 = v1532;
  }
  *((_QWORD *)v1531 + v808) = v809;
  v810 = v1532 + 1;
  LODWORD(v1532) = v810;
  v811 = (*(_QWORD *)(v100 + 140) >> 62) & 1;
  if (v810 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v810 = v1532;
  }
  *((_QWORD *)v1531 + v810) = v811;
  v812 = v1532 + 1;
  LODWORD(v1532) = v812;
  v813 = ((unint64_t)*(unsigned int *)(v100 + 244) >> 4) & 7;
  if (v812 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v812 = v1532;
  }
  *((_QWORD *)v1531 + v812) = v813;
  v814 = v1532 + 1;
  LODWORD(v1532) = v814;
  v815 = ((unint64_t)*(unsigned int *)(v100 + 244) >> 7) & 3;
  if (v814 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v814 = v1532;
  }
  *((_QWORD *)v1531 + v814) = v815;
  v816 = v1532 + 1;
  LODWORD(v1532) = v816;
  v817 = ((unint64_t)*(unsigned int *)(v100 + 244) >> 9) & 3;
  if (v816 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v816 = v1532;
  }
  *((_QWORD *)v1531 + v816) = v817;
  v818 = v1532 + 1;
  LODWORD(v1532) = v818;
  v819 = ((unint64_t)*(unsigned int *)(v100 + 244) >> 11) & 3;
  if (v818 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v818 = v1532;
  }
  *((_QWORD *)v1531 + v818) = v819;
  v820 = v1532 + 1;
  LODWORD(v1532) = v820;
  v821 = ((unint64_t)*(unsigned int *)(v100 + 244) >> 13) & 3;
  if (v820 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v820 = v1532;
  }
  *((_QWORD *)v1531 + v820) = v821;
  v822 = v1532 + 1;
  LODWORD(v1532) = v822;
  v823 = *(_QWORD *)(v100 + 140) >> 63;
  if (v822 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v822 = v1532;
  }
  *((_QWORD *)v1531 + v822) = v823;
  v824 = v1532 + 1;
  LODWORD(v1532) = v824;
  v825 = *(_WORD *)(v100 + 148) & 1;
  if (v824 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v824 = v1532;
  }
  *((_QWORD *)v1531 + v824) = v825;
  v826 = v1532 + 1;
  LODWORD(v1532) = v826;
  v827 = ((unint64_t)*(unsigned __int16 *)(v100 + 148) >> 1) & 1;
  if (v826 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v826 = v1532;
  }
  *((_QWORD *)v1531 + v826) = v827;
  v828 = v1532 + 1;
  LODWORD(v1532) = v828;
  v829 = ((unint64_t)*(unsigned __int16 *)(v100 + 148) >> 2) & 1;
  if (v828 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v828 = v1532;
  }
  *((_QWORD *)v1531 + v828) = v829;
  v830 = v1532 + 1;
  LODWORD(v1532) = v830;
  v831 = ((unint64_t)*(unsigned __int16 *)(v100 + 148) >> 3) & 1;
  if (v830 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v830 = v1532;
  }
  *((_QWORD *)v1531 + v830) = v831;
  v832 = v1532 + 1;
  LODWORD(v1532) = v832;
  v833 = ((unint64_t)*(unsigned __int16 *)(v100 + 148) >> 4) & 1;
  if (v832 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v832 = v1532;
  }
  *((_QWORD *)v1531 + v832) = v833;
  v834 = v1532 + 1;
  LODWORD(v1532) = v834;
  v835 = ((unint64_t)*(unsigned __int16 *)(v100 + 148) >> 5) & 1;
  if (v834 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v834 = v1532;
  }
  *((_QWORD *)v1531 + v834) = v835;
  v836 = v1532 + 1;
  LODWORD(v1532) = v836;
  v837 = ((unint64_t)*(unsigned __int16 *)(v100 + 148) >> 6) & 1;
  if (v836 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v836 = v1532;
  }
  *((_QWORD *)v1531 + v836) = v837;
  v838 = v1532 + 1;
  LODWORD(v1532) = v838;
  v839 = ((unint64_t)*(unsigned __int16 *)(v100 + 148) >> 7) & 1;
  if (v838 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v838 = v1532;
  }
  *((_QWORD *)v1531 + v838) = v839;
  v840 = v1532 + 1;
  LODWORD(v1532) = v840;
  v841 = *(_WORD *)(v100 + 149) & 1;
  if (v840 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v840 = v1532;
  }
  *((_QWORD *)v1531 + v840) = v841;
  v842 = v1532 + 1;
  LODWORD(v1532) = v842;
  v843 = ((unint64_t)*(unsigned __int16 *)(v100 + 148) >> 9) & 1;
  if (v842 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v842 = v1532;
  }
  *((_QWORD *)v1531 + v842) = v843;
  v844 = v1532 + 1;
  LODWORD(v1532) = v844;
  v845 = ((unint64_t)*(unsigned int *)(v100 + 244) >> 15) & 3;
  if (v844 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v844 = v1532;
  }
  *((_QWORD *)v1531 + v844) = v845;
  v846 = v1532 + 1;
  LODWORD(v1532) = v846;
  v847 = ((unint64_t)*(unsigned __int16 *)(v100 + 148) >> 10) & 1;
  if (v846 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v846 = v1532;
  }
  *((_QWORD *)v1531 + v846) = v847;
  v848 = v1532 + 1;
  LODWORD(v1532) = v848;
  v849 = ((unint64_t)*(unsigned __int16 *)(v100 + 148) >> 11) & 1;
  if (v848 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v848 = v1532;
  }
  *((_QWORD *)v1531 + v848) = v849;
  v850 = v1532 + 1;
  LODWORD(v1532) = v850;
  v851 = ((unint64_t)*(unsigned __int16 *)(v100 + 148) >> 12) & 1;
  if (v850 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v850 = v1532;
  }
  *((_QWORD *)v1531 + v850) = v851;
  v852 = v1532 + 1;
  LODWORD(v1532) = v852;
  v853 = ((unint64_t)*(unsigned __int16 *)(v100 + 148) >> 13) & 1;
  if (v852 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v852 = v1532;
  }
  *((_QWORD *)v1531 + v852) = v853;
  v854 = v1532 + 1;
  LODWORD(v1532) = v854;
  v855 = ((unint64_t)*(unsigned __int16 *)(v100 + 148) >> 14) & 1;
  if (v854 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v854 = v1532;
  }
  *((_QWORD *)v1531 + v854) = v855;
  v856 = v1532 + 1;
  LODWORD(v1532) = v856;
  v857 = ((unint64_t)*(unsigned int *)(v100 + 244) >> 17) & 3;
  if (v856 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v856 = v1532;
  }
  *((_QWORD *)v1531 + v856) = v857;
  v858 = v1532 + 1;
  LODWORD(v1532) = v858;
  v859 = ((unint64_t)*(unsigned int *)(v100 + 244) >> 19) & 7;
  if (v858 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v858 = v1532;
  }
  *((_QWORD *)v1531 + v858) = v859;
  v860 = v1532 + 1;
  LODWORD(v1532) = v860;
  v861 = ((unint64_t)*(unsigned int *)(v100 + 244) >> 22) & 7;
  if (v860 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v860 = v1532;
  }
  *((_QWORD *)v1531 + v860) = v861;
  v862 = v1532 + 1;
  LODWORD(v1532) = v862;
  v863 = (unint64_t)*(unsigned __int16 *)(v100 + 148) >> 15;
  if (v862 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v862 = v1532;
  }
  *((_QWORD *)v1531 + v862) = v863;
  v864 = v1532 + 1;
  LODWORD(v1532) = v864;
  v865 = *(_BYTE *)(v100 + 150) & 1;
  if (v864 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v864 = v1532;
  }
  *((_QWORD *)v1531 + v864) = v865;
  v866 = v1532 + 1;
  LODWORD(v1532) = v866;
  v867 = ((unint64_t)*(unsigned int *)(v100 + 244) >> 25) & 7;
  if (v866 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v866 = v1532;
  }
  *((_QWORD *)v1531 + v866) = v867;
  v868 = v1532 + 1;
  LODWORD(v1532) = v868;
  v869 = ((unint64_t)*(unsigned int *)(v100 + 244) >> 28) & 7;
  if (v868 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v868 = v1532;
  }
  *((_QWORD *)v1531 + v868) = v869;
  v870 = v1532 + 1;
  LODWORD(v1532) = v870;
  v871 = *(_WORD *)(v100 + 248) & 7;
  if (v870 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v870 = v1532;
  }
  *((_QWORD *)v1531 + v870) = v871;
  v872 = v1532 + 1;
  LODWORD(v1532) = v872;
  v873 = (*(unsigned __int16 *)(v100 + 248) >> 3) & 7;
  if (v872 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v872 = v1532;
  }
  *((_QWORD *)v1531 + v872) = v873;
  v874 = v1532 + 1;
  LODWORD(v1532) = v874;
  v875 = ((unint64_t)*(unsigned __int8 *)(v100 + 150) >> 1) & 1;
  if (v874 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v874 = v1532;
  }
  *((_QWORD *)v1531 + v874) = v875;
  v876 = v1532 + 1;
  LODWORD(v1532) = v876;
  v877 = ((unint64_t)*(unsigned __int8 *)(v100 + 150) >> 2) & 1;
  if (v876 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v876 = v1532;
  }
  *((_QWORD *)v1531 + v876) = v877;
  v878 = v1532 + 1;
  LODWORD(v1532) = v878;
  v879 = *(_WORD *)(v100 + 248) >> 6;
  if (v878 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v878 = v1532;
  }
  *((_QWORD *)v1531 + v878) = v879;
  v880 = v1532 + 1;
  LODWORD(v1532) = v880;
  v881 = ((unint64_t)*(unsigned __int8 *)(v100 + 150) >> 3) & 1;
  if (v880 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v880 = v1532;
  }
  *((_QWORD *)v1531 + v880) = v881;
  v882 = v1532 + 1;
  LODWORD(v1532) = v882;
  v883 = ((unint64_t)*(unsigned __int8 *)(v100 + 150) >> 4) & 1;
  if (v882 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v882 = v1532;
  }
  *((_QWORD *)v1531 + v882) = v883;
  v884 = v1532 + 1;
  LODWORD(v1532) = v884;
  v885 = *(_WORD *)(v100 + 249) & 3;
  if (v884 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v884 = v1532;
  }
  *((_QWORD *)v1531 + v884) = v885;
  v886 = v1532 + 1;
  LODWORD(v1532) = v886;
  v887 = *(unsigned int *)(v100 + 152);
  if (v886 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v886 = v1532;
  }
  *((_QWORD *)v1531 + v886) = v887;
  v888 = v1532 + 1;
  LODWORD(v1532) = v888;
  v889 = *(unsigned int *)(v100 + 156);
  if (v888 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v888 = v1532;
  }
  *((_QWORD *)v1531 + v888) = v889;
  v890 = v1532 + 1;
  LODWORD(v1532) = v890;
  v891 = *(_BYTE *)(v100 + 160) & 1;
  if (v890 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v890 = v1532;
  }
  *((_QWORD *)v1531 + v890) = v891;
  v892 = v1532 + 1;
  LODWORD(v1532) = v892;
  v893 = ((unint64_t)*(unsigned __int8 *)(v100 + 160) >> 1) & 1;
  if (v892 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v892 = v1532;
  }
  *((_QWORD *)v1531 + v892) = v893;
  v894 = v1532 + 1;
  LODWORD(v1532) = v894;
  v895 = ((unint64_t)*(unsigned __int8 *)(v100 + 160) >> 2) & 1;
  if (v894 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v894 = v1532;
  }
  *((_QWORD *)v1531 + v894) = v895;
  v896 = v1532 + 1;
  LODWORD(v1532) = v896;
  v897 = ((unint64_t)*(unsigned __int8 *)(v100 + 160) >> 3) & 1;
  if (v896 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v896 = v1532;
  }
  *((_QWORD *)v1531 + v896) = v897;
  v898 = v1532 + 1;
  LODWORD(v1532) = v898;
  v899 = (*(unsigned __int16 *)(v100 + 248) >> 10) & 3;
  if (v898 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v898 = v1532;
  }
  *((_QWORD *)v1531 + v898) = v899;
  v900 = v1532 + 1;
  LODWORD(v1532) = v900;
  v901 = (*(unsigned __int16 *)(v100 + 248) >> 12) & 3;
  if (v900 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v900 = v1532;
  }
  *((_QWORD *)v1531 + v900) = v901;
  v902 = v1532 + 1;
  LODWORD(v1532) = v902;
  v903 = *(unsigned int *)(v100 + 164);
  if (v902 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v902 = v1532;
  }
  *((_QWORD *)v1531 + v902) = v903;
  v904 = v1532 + 1;
  LODWORD(v1532) = v904;
  v905 = *(unsigned int *)(v100 + 168);
  if (v904 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v904 = v1532;
  }
  *((_QWORD *)v1531 + v904) = v905;
  v906 = v1532 + 1;
  LODWORD(v1532) = v906;
  v907 = *(unsigned int *)(v100 + 172);
  if (v906 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v906 = v1532;
  }
  *((_QWORD *)v1531 + v906) = v907;
  v908 = v1532 + 1;
  LODWORD(v1532) = v908;
  v909 = HIDWORD(*(_QWORD *)(v100 + 172));
  if (v908 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v908 = v1532;
  }
  *((_QWORD *)v1531 + v908) = v909;
  v910 = v1532 + 1;
  LODWORD(v1532) = v910;
  v911 = *(_BYTE *)(v100 + 180) & 1;
  if (v910 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v910 = v1532;
  }
  *((_QWORD *)v1531 + v910) = v911;
  v912 = v1532 + 1;
  LODWORD(v1532) = v912;
  v913 = *(unsigned int *)(v100 + 184);
  if (v912 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v912 = v1532;
  }
  *((_QWORD *)v1531 + v912) = v913;
  v914 = v1532 + 1;
  LODWORD(v1532) = v914;
  v915 = *(unsigned int *)(v100 + 188);
  if (v914 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v914 = v1532;
  }
  *((_QWORD *)v1531 + v914) = v915;
  v916 = v1532 + 1;
  LODWORD(v1532) = v916;
  v917 = *(unsigned int *)(v100 + 192);
  if (v916 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v916 = v1532;
  }
  *((_QWORD *)v1531 + v916) = v917;
  v918 = v1532 + 1;
  LODWORD(v1532) = v918;
  v919 = *(unsigned __int16 *)(v100 + 248) >> 14;
  if (v918 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v918 = v1532;
  }
  *((_QWORD *)v1531 + v918) = v919;
  v920 = v1532 + 1;
  LODWORD(v1532) = v920;
  v921 = *(_DWORD *)(v100 + 196) & 1;
  if (v920 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v920 = v1532;
  }
  *((_QWORD *)v1531 + v920) = v921;
  v922 = v1532 + 1;
  LODWORD(v1532) = v922;
  v923 = (*(_QWORD *)(v100 + 192) >> 33) & 1;
  if (v922 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v922 = v1532;
  }
  *((_QWORD *)v1531 + v922) = v923;
  v924 = v1532 + 1;
  LODWORD(v1532) = v924;
  v925 = (*(_QWORD *)(v100 + 192) >> 34) & 1;
  if (v924 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v924 = v1532;
  }
  *((_QWORD *)v1531 + v924) = v925;
  v926 = v1532 + 1;
  LODWORD(v1532) = v926;
  v927 = (*(_QWORD *)(v100 + 192) >> 35) & 1;
  if (v926 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v926 = v1532;
  }
  *((_QWORD *)v1531 + v926) = v927;
  v928 = v1532 + 1;
  LODWORD(v1532) = v928;
  v929 = (*(_QWORD *)(v100 + 192) >> 36) & 1;
  if (v928 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v928 = v1532;
  }
  *((_QWORD *)v1531 + v928) = v929;
  v930 = v1532 + 1;
  LODWORD(v1532) = v930;
  v931 = (*(_QWORD *)(v100 + 192) >> 37) & 1;
  if (v930 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v930 = v1532;
  }
  *((_QWORD *)v1531 + v930) = v931;
  v932 = v1532 + 1;
  LODWORD(v1532) = v932;
  v933 = (*(_QWORD *)(v100 + 192) >> 38) & 3;
  if (v932 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v932 = v1532;
  }
  *((_QWORD *)v1531 + v932) = v933;
  v934 = v1532 + 1;
  LODWORD(v1532) = v934;
  v935 = (*(_QWORD *)(v100 + 192) >> 40) & 1;
  if (v934 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v934 = v1532;
  }
  *((_QWORD *)v1531 + v934) = v935;
  v936 = v1532 + 1;
  LODWORD(v1532) = v936;
  v937 = (*(_QWORD *)(v100 + 192) >> 41) & 1;
  if (v936 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v936 = v1532;
  }
  *((_QWORD *)v1531 + v936) = v937;
  v938 = v1532 + 1;
  LODWORD(v1532) = v938;
  v939 = (*(_QWORD *)(v100 + 192) >> 42) & 1;
  if (v938 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v938 = v1532;
  }
  *((_QWORD *)v1531 + v938) = v939;
  v940 = v1532 + 1;
  LODWORD(v1532) = v940;
  v941 = (*(_QWORD *)(v100 + 192) >> 43) & 1;
  if (v940 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v940 = v1532;
  }
  *((_QWORD *)v1531 + v940) = v941;
  v942 = v1532 + 1;
  LODWORD(v1532) = v942;
  v943 = (*(_QWORD *)(v100 + 192) >> 44) & 1;
  if (v942 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v942 = v1532;
  }
  *((_QWORD *)v1531 + v942) = v943;
  v944 = v1532 + 1;
  LODWORD(v1532) = v944;
  v945 = (*(_QWORD *)(v100 + 192) >> 45) & 1;
  if (v944 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v944 = v1532;
  }
  *((_QWORD *)v1531 + v944) = v945;
  v946 = v1532 + 1;
  LODWORD(v1532) = v946;
  v947 = *(_BYTE *)(v100 + 250) & 0xF;
  if (v946 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v946 = v1532;
  }
  *((_QWORD *)v1531 + v946) = v947;
  v948 = v1532 + 1;
  LODWORD(v1532) = v948;
  v949 = (*(_QWORD *)(v100 + 192) >> 46) & 0x1FLL;
  if (v948 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v948 = v1532;
  }
  *((_QWORD *)v1531 + v948) = v949;
  v950 = v1532 + 1;
  LODWORD(v1532) = v950;
  v951 = *(unsigned int *)(v100 + 200);
  if (v950 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v950 = v1532;
  }
  *((_QWORD *)v1531 + v950) = v951;
  v952 = v1532 + 1;
  LODWORD(v1532) = v952;
  v953 = HIDWORD(*(_QWORD *)(v100 + 200)) & 1;
  if (v952 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v952 = v1532;
  }
  *((_QWORD *)v1531 + v952) = v953;
  v954 = v1532 + 1;
  LODWORD(v1532) = v954;
  v955 = (*(_QWORD *)(v100 + 200) >> 33) & 1;
  if (v954 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v954 = v1532;
  }
  *((_QWORD *)v1531 + v954) = v955;
  v956 = v1532 + 1;
  LODWORD(v1532) = v956;
  v957 = (*(_QWORD *)(v100 + 200) >> 34) & 1;
  if (v956 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v956 = v1532;
  }
  *((_QWORD *)v1531 + v956) = v957;
  v958 = v1532 + 1;
  LODWORD(v1532) = v958;
  v959 = (*(_QWORD *)(v100 + 200) >> 35) & 1;
  if (v958 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v958 = v1532;
  }
  *((_QWORD *)v1531 + v958) = v959;
  v960 = v1532 + 1;
  LODWORD(v1532) = v960;
  v961 = *(unsigned int *)(v100 + 208);
  if (v960 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v960 = v1532;
  }
  *((_QWORD *)v1531 + v960) = v961;
  v962 = v1532 + 1;
  LODWORD(v1532) = v962;
  v963 = HIDWORD(*(_QWORD *)(v100 + 208)) & 1;
  if (v962 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v962 = v1532;
  }
  *((_QWORD *)v1531 + v962) = v963;
  v964 = v1532 + 1;
  LODWORD(v1532) = v964;
  v965 = (*(_QWORD *)(v100 + 208) >> 33) & 1;
  if (v964 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v964 = v1532;
  }
  *((_QWORD *)v1531 + v964) = v965;
  v966 = v1532 + 1;
  LODWORD(v1532) = v966;
  v967 = (*(_QWORD *)(v100 + 208) >> 34) & 1;
  if (v966 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v966 = v1532;
  }
  *((_QWORD *)v1531 + v966) = v967;
  v968 = v1532 + 1;
  LODWORD(v1532) = v968;
  v969 = (*(_QWORD *)(v100 + 208) >> 35) & 1;
  if (v968 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v968 = v1532;
  }
  *((_QWORD *)v1531 + v968) = v969;
  v970 = v1532 + 1;
  LODWORD(v1532) = v970;
  v971 = (*(unsigned __int8 *)(v100 + 250) >> 4) & 3;
  if (v970 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v970 = v1532;
  }
  *((_QWORD *)v1531 + v970) = v971;
  v972 = v1532 + 1;
  LODWORD(v1532) = v972;
  v973 = (*(unsigned __int8 *)(v100 + 250) >> 6) & 1;
  if (v972 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v972 = v1532;
  }
  *((_QWORD *)v1531 + v972) = v973;
  v974 = v1532 + 1;
  LODWORD(v1532) = v974;
  v975 = (*(_QWORD *)(v100 + 208) >> 36) & 1;
  if (v974 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v974 = v1532;
  }
  *((_QWORD *)v1531 + v974) = v975;
  v976 = v1532 + 1;
  LODWORD(v1532) = v976;
  v977 = (*(_QWORD *)(v100 + 208) >> 37) & 1;
  if (v976 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v976 = v1532;
  }
  *((_QWORD *)v1531 + v976) = v977;
  v978 = v1532 + 1;
  LODWORD(v1532) = v978;
  v979 = (*(_QWORD *)(v100 + 208) >> 38) & 1;
  if (v978 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v978 = v1532;
  }
  *((_QWORD *)v1531 + v978) = v979;
  v980 = v1532 + 1;
  LODWORD(v1532) = v980;
  v981 = *(unsigned int *)(v100 + 216);
  if (v980 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v980 = v1532;
  }
  *((_QWORD *)v1531 + v980) = v981;
  v982 = v1532 + 1;
  LODWORD(v1532) = v982;
  v983 = *(unsigned int *)(v100 + 220);
  if (v982 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v982 = v1532;
  }
  *((_QWORD *)v1531 + v982) = v983;
  v984 = v1532 + 1;
  LODWORD(v1532) = v984;
  v985 = *(unsigned __int8 *)(v100 + 250) >> 7;
  if (v984 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v984 = v1532;
  }
  *((_QWORD *)v1531 + v984) = v985;
  v986 = v1532 + 1;
  LODWORD(v1532) = v986;
  v987 = *(unsigned int *)(v100 + 224);
  if (v986 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v986 = v1532;
  }
  *((_QWORD *)v1531 + v986) = v987;
  v988 = v1532 + 1;
  LODWORD(v1532) = v988;
  v989 = *(_DWORD *)(v100 + 228) & 1;
  if (v988 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v988 = v1532;
  }
  *((_QWORD *)v1531 + v988) = v989;
  v990 = v1532 + 1;
  LODWORD(v1532) = v990;
  v991 = *(unsigned int *)(v100 + 232);
  if (v990 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v990 = v1532;
  }
  *((_QWORD *)v1531 + v990) = v991;
  v992 = v1532 + 1;
  LODWORD(v1532) = v992;
  v993 = HIDWORD(*(_QWORD *)(v100 + 232)) & 1;
  if (v992 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v992 = v1532;
  }
  *((_QWORD *)v1531 + v992) = v993;
  v994 = v1532 + 1;
  LODWORD(v1532) = v994;
  v995 = (*(_QWORD *)(v100 + 232) >> 33) & 1;
  if (v994 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v994 = v1532;
  }
  *((_QWORD *)v1531 + v994) = v995;
  v996 = v1532 + 1;
  LODWORD(v1532) = v996;
  v997 = (*(_QWORD *)(v100 + 232) >> 34) & 1;
  if (v996 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v996 = v1532;
  }
  *((_QWORD *)v1531 + v996) = v997;
  v998 = v1532 + 1;
  LODWORD(v1532) = v998;
  v999 = (*(_QWORD *)(v100 + 232) >> 35) & 1;
  if (v998 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v998 = v1532;
  }
  *((_QWORD *)v1531 + v998) = v999;
  v1000 = v1532 + 1;
  LODWORD(v1532) = v1000;
  v1001 = (*(_QWORD *)(v100 + 232) >> 36) & 1;
  if (v1000 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1000 = v1532;
  }
  *((_QWORD *)v1531 + v1000) = v1001;
  v1002 = v1532 + 1;
  LODWORD(v1532) = v1002;
  v1003 = (*(_QWORD *)(v100 + 232) >> 37) & 1;
  if (v1002 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1002 = v1532;
  }
  *((_QWORD *)v1531 + v1002) = v1003;
  v1004 = v1532 + 1;
  LODWORD(v1532) = v1004;
  v1005 = (*(_QWORD *)(v100 + 232) >> 38) & 1;
  if (v1004 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1004 = v1532;
  }
  *((_QWORD *)v1531 + v1004) = v1005;
  v1006 = v1532 + 1;
  LODWORD(v1532) = v1006;
  v1007 = (*(_QWORD *)(v100 + 232) >> 39) & 1;
  if (v1006 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1006 = v1532;
  }
  *((_QWORD *)v1531 + v1006) = v1007;
  v1008 = v1532 + 1;
  LODWORD(v1532) = v1008;
  v1009 = (*(_QWORD *)(v100 + 232) >> 40) & 1;
  if (v1008 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1008 = v1532;
  }
  *((_QWORD *)v1531 + v1008) = v1009;
  v1010 = v1532 + 1;
  LODWORD(v1532) = v1010;
  v1011 = (*(_QWORD *)(v100 + 232) >> 41) & 1;
  if (v1010 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1010 = v1532;
  }
  *((_QWORD *)v1531 + v1010) = v1011;
  v1012 = v1532 + 1;
  LODWORD(v1532) = v1012;
  v1013 = (*(_QWORD *)(v100 + 232) >> 42) & 1;
  if (v1012 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1012 = v1532;
  }
  *((_QWORD *)v1531 + v1012) = v1013;
  v1014 = v1532 + 1;
  LODWORD(v1532) = v1014;
  v1015 = (*(_QWORD *)(v100 + 232) >> 43) & 1;
  if (v1014 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1014 = v1532;
  }
  *((_QWORD *)v1531 + v1014) = v1015;
  v1016 = v1532 + 1;
  LODWORD(v1532) = v1016;
  v1017 = (*(_QWORD *)(v100 + 232) >> 44) & 1;
  if (v1016 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1016 = v1532;
  }
  *((_QWORD *)v1531 + v1016) = v1017;
  v1018 = v1532 + 1;
  LODWORD(v1532) = v1018;
  v1019 = (*(_QWORD *)(v100 + 232) >> 45) & 1;
  if (v1018 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1018 = v1532;
  }
  *((_QWORD *)v1531 + v1018) = v1019;
  v1020 = v1532 + 1;
  LODWORD(v1532) = v1020;
  v1021 = (*(_QWORD *)(v100 + 232) >> 46) & 1;
  if (v1020 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1020 = v1532;
  }
  *((_QWORD *)v1531 + v1020) = v1021;
  v1022 = v1532 + 1;
  LODWORD(v1532) = v1022;
  v1023 = (*(_QWORD *)(v100 + 232) >> 47) & 1;
  if (v1022 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1022 = v1532;
  }
  *((_QWORD *)v1531 + v1022) = v1023;
  v1024 = v1532 + 1;
  LODWORD(v1532) = v1024;
  v1025 = HIWORD(*(_QWORD *)(v100 + 232)) & 1;
  if (v1024 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1024 = v1532;
  }
  *((_QWORD *)v1531 + v1024) = v1025;
  v1026 = v1532 + 1;
  LODWORD(v1532) = v1026;
  v1027 = (*(_QWORD *)(v100 + 232) >> 49) & 1;
  if (v1026 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1026 = v1532;
  }
  *((_QWORD *)v1531 + v1026) = v1027;
  v1028 = v1532 + 1;
  LODWORD(v1532) = v1028;
  v1029 = (*(_QWORD *)(v100 + 232) >> 50) & 1;
  if (v1028 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1028 = v1532;
  }
  *((_QWORD *)v1531 + v1028) = v1029;
  v1030 = v1532 + 1;
  LODWORD(v1532) = v1030;
  v1031 = (*(_QWORD *)(v100 + 232) >> 51) & 1;
  if (v1030 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1030 = v1532;
  }
  *((_QWORD *)v1531 + v1030) = v1031;
  v1032 = v1532 + 1;
  LODWORD(v1532) = v1032;
  v1033 = (*(_QWORD *)(v100 + 232) >> 52) & 1;
  if (v1032 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1032 = v1532;
  }
  *((_QWORD *)v1531 + v1032) = v1033;
  v1034 = v1532 + 1;
  LODWORD(v1532) = v1034;
  v1035 = (*(_QWORD *)(v100 + 232) >> 53) & 1;
  if (v1034 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1034 = v1532;
  }
  *((_QWORD *)v1531 + v1034) = v1035;
  v1036 = v1532 + 1;
  LODWORD(v1532) = v1036;
  v1037 = (*(_QWORD *)(v100 + 232) >> 54) & 1;
  if (v1036 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1036 = v1532;
  }
  *((_QWORD *)v1531 + v1036) = v1037;
  v1038 = v1532 + 1;
  LODWORD(v1532) = v1038;
  v1039 = (*(_QWORD *)(v100 + 232) >> 55) & 1;
  if (v1038 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1038 = v1532;
  }
  *((_QWORD *)v1531 + v1038) = v1039;
  v1040 = v1532 + 1;
  LODWORD(v1532) = v1040;
  v1041 = HIBYTE(*(_QWORD *)(v100 + 232)) & 1;
  if (v1040 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1040 = v1532;
  }
  *((_QWORD *)v1531 + v1040) = v1041;
  v1042 = v1532 + 1;
  LODWORD(v1532) = v1042;
  v1043 = (*(_QWORD *)(v100 + 232) >> 57) & 1;
  if (v1042 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1042 = v1532;
  }
  *((_QWORD *)v1531 + v1042) = v1043;
  v1044 = v1532 + 1;
  LODWORD(v1532) = v1044;
  v1045 = (*(_QWORD *)(v100 + 232) >> 58) & 1;
  if (v1044 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1044 = v1532;
  }
  *((_QWORD *)v1531 + v1044) = v1045;
  v1046 = v1532 + 1;
  LODWORD(v1532) = v1046;
  v1047 = *(_QWORD *)(v100 + 256) & 1;
  if (v1046 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1046 = v1532;
  }
  *((_QWORD *)v1531 + v1046) = v1047;
  v1048 = v1532 + 1;
  LODWORD(v1532) = v1048;
  v1049 = (*(_QWORD *)(v100 + 256) >> 1) & 1;
  if (v1048 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1048 = v1532;
  }
  *((_QWORD *)v1531 + v1048) = v1049;
  v1050 = v1532 + 1;
  LODWORD(v1532) = v1050;
  v1051 = (*(_QWORD *)(v100 + 256) >> 2) & 1;
  if (v1050 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1050 = v1532;
  }
  *((_QWORD *)v1531 + v1050) = v1051;
  v1052 = v1532 + 1;
  LODWORD(v1532) = v1052;
  v1053 = (*(_QWORD *)(v100 + 256) >> 3) & 1;
  if (v1052 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1052 = v1532;
  }
  *((_QWORD *)v1531 + v1052) = v1053;
  v1054 = v1532 + 1;
  LODWORD(v1532) = v1054;
  v1055 = (*(_QWORD *)(v100 + 256) >> 4) & 1;
  if (v1054 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1054 = v1532;
  }
  *((_QWORD *)v1531 + v1054) = v1055;
  v1056 = v1532 + 1;
  LODWORD(v1532) = v1056;
  v1057 = (*(_QWORD *)(v100 + 256) >> 5) & 1;
  if (v1056 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1056 = v1532;
  }
  *((_QWORD *)v1531 + v1056) = v1057;
  v1058 = v1532 + 1;
  LODWORD(v1532) = v1058;
  v1059 = (*(_QWORD *)(v100 + 256) >> 6) & 1;
  if (v1058 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1058 = v1532;
  }
  *((_QWORD *)v1531 + v1058) = v1059;
  v1060 = v1532 + 1;
  LODWORD(v1532) = v1060;
  v1061 = (*(_QWORD *)(v100 + 256) >> 7) & 1;
  if (v1060 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1060 = v1532;
  }
  *((_QWORD *)v1531 + v1060) = v1061;
  v1062 = v1532 + 1;
  LODWORD(v1532) = v1062;
  v1063 = (*(_QWORD *)(v100 + 256) >> 9) & 1;
  if (v1062 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1062 = v1532;
  }
  *((_QWORD *)v1531 + v1062) = v1063;
  v1064 = v1532 + 1;
  LODWORD(v1532) = v1064;
  v1065 = (*(_QWORD *)(v100 + 256) >> 10) & 1;
  if (v1064 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1064 = v1532;
  }
  *((_QWORD *)v1531 + v1064) = v1065;
  v1066 = v1532 + 1;
  LODWORD(v1532) = v1066;
  v1067 = (*(_QWORD *)(v100 + 256) >> 11) & 1;
  if (v1066 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1066 = v1532;
  }
  *((_QWORD *)v1531 + v1066) = v1067;
  v1068 = v1532 + 1;
  LODWORD(v1532) = v1068;
  v1069 = (*(_QWORD *)(v100 + 256) >> 12) & 1;
  if (v1068 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1068 = v1532;
  }
  *((_QWORD *)v1531 + v1068) = v1069;
  v1070 = v1532 + 1;
  LODWORD(v1532) = v1070;
  v1071 = (*(_QWORD *)(v100 + 256) >> 13) & 1;
  if (v1070 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1070 = v1532;
  }
  *((_QWORD *)v1531 + v1070) = v1071;
  v1072 = v1532 + 1;
  LODWORD(v1532) = v1072;
  v1073 = (*(_QWORD *)(v100 + 256) >> 14) & 1;
  if (v1072 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1072 = v1532;
  }
  *((_QWORD *)v1531 + v1072) = v1073;
  v1074 = v1532 + 1;
  LODWORD(v1532) = v1074;
  v1075 = (*(_QWORD *)(v100 + 256) >> 15) & 1;
  if (v1074 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1074 = v1532;
  }
  *((_QWORD *)v1531 + v1074) = v1075;
  v1076 = v1532 + 1;
  LODWORD(v1532) = v1076;
  v1077 = (*(_QWORD *)(v100 + 256) >> 16) & 1;
  if (v1076 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1076 = v1532;
  }
  *((_QWORD *)v1531 + v1076) = v1077;
  v1078 = v1532 + 1;
  LODWORD(v1532) = v1078;
  v1079 = (*(_QWORD *)(v100 + 256) >> 17) & 1;
  if (v1078 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1078 = v1532;
  }
  *((_QWORD *)v1531 + v1078) = v1079;
  v1080 = v1532 + 1;
  LODWORD(v1532) = v1080;
  v1081 = (*(_QWORD *)(v100 + 256) >> 18) & 1;
  if (v1080 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1080 = v1532;
  }
  *((_QWORD *)v1531 + v1080) = v1081;
  v1082 = v1532 + 1;
  LODWORD(v1532) = v1082;
  v1083 = (*(_QWORD *)(v100 + 256) >> 19) & 1;
  if (v1082 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1082 = v1532;
  }
  *((_QWORD *)v1531 + v1082) = v1083;
  v1084 = v1532 + 1;
  LODWORD(v1532) = v1084;
  v1085 = (*(_QWORD *)(v100 + 256) >> 20) & 1;
  if (v1084 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1084 = v1532;
  }
  *((_QWORD *)v1531 + v1084) = v1085;
  v1086 = v1532 + 1;
  LODWORD(v1532) = v1086;
  v1087 = (*(_QWORD *)(v100 + 256) >> 21) & 1;
  if (v1086 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1086 = v1532;
  }
  *((_QWORD *)v1531 + v1086) = v1087;
  v1088 = v1532 + 1;
  LODWORD(v1532) = v1088;
  v1089 = (*(_QWORD *)(v100 + 256) >> 22) & 1;
  if (v1088 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1088 = v1532;
  }
  *((_QWORD *)v1531 + v1088) = v1089;
  v1090 = v1532 + 1;
  LODWORD(v1532) = v1090;
  v1091 = (*(_QWORD *)(v100 + 256) >> 23) & 1;
  if (v1090 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1090 = v1532;
  }
  *((_QWORD *)v1531 + v1090) = v1091;
  v1092 = v1532 + 1;
  LODWORD(v1532) = v1092;
  v1093 = (*(_QWORD *)(v100 + 256) >> 24) & 1;
  if (v1092 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1092 = v1532;
  }
  *((_QWORD *)v1531 + v1092) = v1093;
  v1094 = v1532 + 1;
  LODWORD(v1532) = v1094;
  v1095 = (*(_QWORD *)(v100 + 256) >> 25) & 1;
  if (v1094 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1094 = v1532;
  }
  *((_QWORD *)v1531 + v1094) = v1095;
  v1096 = v1532 + 1;
  LODWORD(v1532) = v1096;
  v1097 = (*(_QWORD *)(v100 + 256) >> 26) & 1;
  if (v1096 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1096 = v1532;
  }
  *((_QWORD *)v1531 + v1096) = v1097;
  v1098 = v1532 + 1;
  LODWORD(v1532) = v1098;
  v1099 = (*(_QWORD *)(v100 + 256) >> 27) & 1;
  if (v1098 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1098 = v1532;
  }
  *((_QWORD *)v1531 + v1098) = v1099;
  v1100 = v1532 + 1;
  LODWORD(v1532) = v1100;
  v1101 = (*(_QWORD *)(v100 + 256) >> 28) & 1;
  if (v1100 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1100 = v1532;
  }
  *((_QWORD *)v1531 + v1100) = v1101;
  v1102 = v1532 + 1;
  LODWORD(v1532) = v1102;
  v1103 = (*(_QWORD *)(v100 + 256) >> 30) & 1;
  if (v1102 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1102 = v1532;
  }
  *((_QWORD *)v1531 + v1102) = v1103;
  v1104 = v1532 + 1;
  LODWORD(v1532) = v1104;
  v1105 = (*(_QWORD *)(v100 + 256) >> 31) & 1;
  if (v1104 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1104 = v1532;
  }
  *((_QWORD *)v1531 + v1104) = v1105;
  v1106 = v1532 + 1;
  LODWORD(v1532) = v1106;
  v1107 = HIDWORD(*(_QWORD *)(v100 + 256)) & 1;
  if (v1106 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1106 = v1532;
  }
  *((_QWORD *)v1531 + v1106) = v1107;
  v1108 = v1532 + 1;
  LODWORD(v1532) = v1108;
  v1109 = (*(_QWORD *)(v100 + 256) >> 33) & 1;
  if (v1108 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1108 = v1532;
  }
  *((_QWORD *)v1531 + v1108) = v1109;
  v1110 = v1532 + 1;
  LODWORD(v1532) = v1110;
  v1111 = (*(_QWORD *)(v100 + 256) >> 34) & 1;
  if (v1110 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1110 = v1532;
  }
  *((_QWORD *)v1531 + v1110) = v1111;
  v1112 = v1532 + 1;
  LODWORD(v1532) = v1112;
  v1113 = (*(_QWORD *)(v100 + 256) >> 35) & 1;
  if (v1112 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1112 = v1532;
  }
  *((_QWORD *)v1531 + v1112) = v1113;
  v1114 = v1532 + 1;
  LODWORD(v1532) = v1114;
  v1115 = (*(_QWORD *)(v100 + 256) >> 37) & 1;
  if (v1114 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1114 = v1532;
  }
  *((_QWORD *)v1531 + v1114) = v1115;
  v1116 = v1532 + 1;
  LODWORD(v1532) = v1116;
  v1117 = (*(_QWORD *)(v100 + 256) >> 38) & 1;
  if (v1116 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1116 = v1532;
  }
  *((_QWORD *)v1531 + v1116) = v1117;
  v1118 = v1532 + 1;
  LODWORD(v1532) = v1118;
  v1119 = (*(_QWORD *)(v100 + 256) >> 39) & 1;
  if (v1118 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1118 = v1532;
  }
  *((_QWORD *)v1531 + v1118) = v1119;
  v1120 = v1532 + 1;
  LODWORD(v1532) = v1120;
  v1121 = (*(_QWORD *)(v100 + 256) >> 40) & 1;
  if (v1120 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1120 = v1532;
  }
  *((_QWORD *)v1531 + v1120) = v1121;
  v1122 = v1532 + 1;
  LODWORD(v1532) = v1122;
  v1123 = (*(_QWORD *)(v100 + 256) >> 41) & 1;
  if (v1122 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1122 = v1532;
  }
  *((_QWORD *)v1531 + v1122) = v1123;
  v1124 = v1532 + 1;
  LODWORD(v1532) = v1124;
  v1125 = (*(_QWORD *)(v100 + 256) >> 42) & 1;
  if (v1124 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1124 = v1532;
  }
  *((_QWORD *)v1531 + v1124) = v1125;
  v1126 = v1532 + 1;
  LODWORD(v1532) = v1126;
  v1127 = (*(_QWORD *)(v100 + 256) >> 43) & 1;
  if (v1126 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1126 = v1532;
  }
  *((_QWORD *)v1531 + v1126) = v1127;
  v1128 = v1532 + 1;
  LODWORD(v1532) = v1128;
  v1129 = (*(_QWORD *)(v100 + 256) >> 44) & 1;
  if (v1128 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1128 = v1532;
  }
  *((_QWORD *)v1531 + v1128) = v1129;
  v1130 = v1532 + 1;
  LODWORD(v1532) = v1130;
  v1131 = (*(_QWORD *)(v100 + 256) >> 45) & 1;
  if (v1130 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1130 = v1532;
  }
  *((_QWORD *)v1531 + v1130) = v1131;
  v1132 = v1532 + 1;
  LODWORD(v1532) = v1132;
  v1133 = (*(_QWORD *)(v100 + 256) >> 46) & 1;
  if (v1132 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1132 = v1532;
  }
  *((_QWORD *)v1531 + v1132) = v1133;
  v1134 = v1532 + 1;
  LODWORD(v1532) = v1134;
  v1135 = (*(_QWORD *)(v100 + 256) >> 47) & 1;
  if (v1134 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1134 = v1532;
  }
  *((_QWORD *)v1531 + v1134) = v1135;
  v1136 = v1532 + 1;
  LODWORD(v1532) = v1136;
  v1137 = HIWORD(*(_QWORD *)(v100 + 256)) & 1;
  if (v1136 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1136 = v1532;
  }
  *((_QWORD *)v1531 + v1136) = v1137;
  v1138 = v1532 + 1;
  LODWORD(v1532) = v1138;
  v1139 = (*(_QWORD *)(v100 + 256) >> 49) & 1;
  if (v1138 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1138 = v1532;
  }
  *((_QWORD *)v1531 + v1138) = v1139;
  v1140 = v1532 + 1;
  LODWORD(v1532) = v1140;
  v1141 = (*(_QWORD *)(v100 + 256) >> 50) & 1;
  if (v1140 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1140 = v1532;
  }
  *((_QWORD *)v1531 + v1140) = v1141;
  v1142 = v1532 + 1;
  LODWORD(v1532) = v1142;
  v1143 = (*(_QWORD *)(v100 + 256) >> 52) & 1;
  if (v1142 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1142 = v1532;
  }
  *((_QWORD *)v1531 + v1142) = v1143;
  v1144 = v1532 + 1;
  LODWORD(v1532) = v1144;
  v1145 = (*(_QWORD *)(v100 + 256) >> 53) & 1;
  if (v1144 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1144 = v1532;
  }
  *((_QWORD *)v1531 + v1144) = v1145;
  v1146 = v1532 + 1;
  LODWORD(v1532) = v1146;
  v1147 = HIBYTE(*(_QWORD *)(v100 + 256)) & 1;
  if (v1146 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1146 = v1532;
  }
  *((_QWORD *)v1531 + v1146) = v1147;
  v1148 = v1532 + 1;
  LODWORD(v1532) = v1148;
  v1149 = (*(_QWORD *)(v100 + 256) >> 57) & 1;
  if (v1148 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1148 = v1532;
  }
  *((_QWORD *)v1531 + v1148) = v1149;
  v1150 = v1532 + 1;
  LODWORD(v1532) = v1150;
  v1151 = (*(_QWORD *)(v100 + 256) >> 59) & 1;
  if (v1150 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1150 = v1532;
  }
  *((_QWORD *)v1531 + v1150) = v1151;
  v1152 = v1532 + 1;
  LODWORD(v1532) = v1152;
  v1153 = (*(_QWORD *)(v100 + 256) >> 61) & 1;
  if (v1152 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1152 = v1532;
  }
  *((_QWORD *)v1531 + v1152) = v1153;
  v1154 = v1532 + 1;
  LODWORD(v1532) = v1154;
  v1155 = *(_QWORD *)(v100 + 264) & 1;
  if (v1154 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1154 = v1532;
  }
  *((_QWORD *)v1531 + v1154) = v1155;
  v1156 = v1532 + 1;
  LODWORD(v1532) = v1156;
  v1157 = (*(_QWORD *)(v100 + 264) >> 2) & 1;
  if (v1156 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1156 = v1532;
  }
  *((_QWORD *)v1531 + v1156) = v1157;
  v1158 = v1532 + 1;
  LODWORD(v1532) = v1158;
  v1159 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v100 + 528) - *(_QWORD *)(v100 + 520)) >> 3);
  if (v1158 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1158 = v1532;
  }
  *((_QWORD *)v1531 + v1158) = v1159;
  v1160 = v1532 + 1;
  LODWORD(v1532) = v1532 + 1;
  v1161 = *(_QWORD *)(v100 + 520);
  v1162 = *(_QWORD *)(v100 + 528);
  if (v1161 != v1162)
  {
    do
    {
      v1163 = *(_BYTE *)(v1161 + 23);
      v1164 = v1163 < 0;
      if (v1163 >= 0)
        v1165 = (char *)v1161;
      else
        v1165 = *(char **)v1161;
      v1166 = v1163 & 0x7F;
      if (v1164)
        v1167 = *(_QWORD *)(v1161 + 8);
      else
        v1167 = v1166;
      v98 = sub_22E7BE5A4(v98, v1165, v1167, (uint64_t)&v1531);
      v1161 += 24;
    }
    while (v1161 != v1162);
    v1160 = v1532;
  }
  v1168 = *(unsigned int *)(v100 + 400);
  if (v1160 >= HIDWORD(v1532))
  {
    v98 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1160 = v1532;
  }
  *((_QWORD *)v1531 + v1160) = v1168;
  LODWORD(v1532) = v1532 + 1;
  v1169 = sub_22E7C9B04(v98, (_QWORD *)(v100 + 404), (uint64_t)&v1531);
  v1170 = *(_BYTE *)(v100 + 519);
  if (v1170 >= 0)
    v1171 = (char *)(v100 + 496);
  else
    v1171 = *(char **)(v100 + 496);
  if (v1170 >= 0)
    v1172 = v1170 & 0x7F;
  else
    v1172 = *(_QWORD *)(v100 + 504);
  v1173 = sub_22E7BE5A4(v1169, v1171, v1172, (uint64_t)&v1531);
  v1174 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v100 + 552) - *(_QWORD *)(v100 + 544)) >> 3);
  v1175 = v1532;
  if (v1532 >= HIDWORD(v1532))
  {
    v1173 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1175 = v1532;
  }
  *((_QWORD *)v1531 + v1175) = v1174;
  v1176 = v1532 + 1;
  LODWORD(v1532) = v1532 + 1;
  v1177 = *(_QWORD *)(v100 + 544);
  v1178 = *(_QWORD *)(v100 + 552);
  if (v1177 != v1178)
  {
    do
    {
      v1179 = *(_BYTE *)(v1177 + 23);
      v1180 = v1179 < 0;
      if (v1179 >= 0)
        v1181 = (char *)v1177;
      else
        v1181 = *(char **)v1177;
      v1182 = v1179 & 0x7F;
      if (v1180)
        v1183 = *(_QWORD *)(v1177 + 8);
      else
        v1183 = v1182;
      v1173 = sub_22E7BE5A4(v1173, v1181, v1183, (uint64_t)&v1531);
      v1177 += 24;
    }
    while (v1177 != v1178);
    v1176 = v1532;
  }
  v1184 = *(unsigned __int8 *)(v100 + 568);
  if (v1176 >= HIDWORD(v1532))
  {
    v1173 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1176 = v1532;
  }
  *((_QWORD *)v1531 + v1176) = v1184;
  v1185 = v1532 + 1;
  LODWORD(v1532) = v1185;
  v1186 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v100 + 632) - *(_QWORD *)(v100 + 624)) >> 4);
  if (v1185 >= HIDWORD(v1532))
  {
    v1173 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1185 = v1532;
  }
  *((_QWORD *)v1531 + v1185) = v1186;
  LODWORD(v1532) = v1532 + 1;
  v1187 = *(_QWORD *)(v100 + 624);
  v1188 = *(_QWORD *)(v100 + 632);
  while (v1187 != v1188)
  {
    v1189 = *(_BYTE *)(v1187 + 23);
    v1190 = v1189 < 0;
    if (v1189 >= 0)
      v1191 = (char *)v1187;
    else
      v1191 = *(char **)v1187;
    v1192 = v1189 & 0x7F;
    if (v1190)
      v1193 = *(_QWORD *)(v1187 + 8);
    else
      v1193 = v1192;
    v1173 = sub_22E7BE5A4(v1173, v1191, v1193, (uint64_t)&v1531);
    v1187 += 48;
  }
  v1194 = *(_BYTE *)(v100 + 671);
  v1195 = v1194;
  if (v1194 >= 0)
    v1196 = (char *)(v100 + 648);
  else
    v1196 = *(char **)(v100 + 648);
  v1197 = v1194 & 0x7F;
  if (v1195 >= 0)
    v1198 = v1197;
  else
    v1198 = *(_QWORD *)(v100 + 656);
  sub_22E7BE5A4(v1173, v1196, v1198, (uint64_t)&v1531);
  v1199 = sub_22E742038(*(llvm::raw_ostream **)(v9 + 16), 1u, (uint64_t)&v1531, 0);
  LODWORD(v1532) = 0;
  v1200 = *(_QWORD *)(a3[1886] + 16);
  v1201 = *(_BYTE *)(v1200 + 23);
  v1202 = v1201 < 0;
  if (v1201 >= 0)
    v1203 = *(char **)(a3[1886] + 16);
  else
    v1203 = *(char **)v1200;
  v1204 = v1201 & 0x7F;
  if (v1202)
    v1205 = *(_QWORD *)(v1200 + 8);
  else
    v1205 = v1204;
  v1206 = sub_22E7BE5A4((uint64_t)v1199, v1203, v1205, (uint64_t)&v1531);
  v1207 = *(_BYTE *)(v1200 + 71);
  v1208 = v1207;
  if (v1207 >= 0)
    v1209 = (char *)(v1200 + 48);
  else
    v1209 = *(char **)(v1200 + 48);
  v1210 = v1207 & 0x7F;
  if (v1208 >= 0)
    v1211 = v1210;
  else
    v1211 = *(_QWORD *)(v1200 + 56);
  v1212 = sub_22E7BE5A4(v1206, v1209, v1211, (uint64_t)&v1531);
  v1213 = *(_BYTE *)(v1200 + 95);
  v1214 = v1213;
  if (v1213 >= 0)
    v1215 = (char *)(v1200 + 72);
  else
    v1215 = *(char **)(v1200 + 72);
  v1216 = v1213 & 0x7F;
  if (v1214 >= 0)
    v1217 = v1216;
  else
    v1217 = *(_QWORD *)(v1200 + 80);
  v1218 = sub_22E7BE5A4(v1212, v1215, v1217, (uint64_t)&v1531);
  v1219 = *(_BYTE *)(v1200 + 143);
  v1220 = v1219;
  if (v1219 >= 0)
    v1221 = (char *)(v1200 + 120);
  else
    v1221 = *(char **)(v1200 + 120);
  v1222 = v1219 & 0x7F;
  if (v1220 >= 0)
    v1223 = v1222;
  else
    v1223 = *(_QWORD *)(v1200 + 128);
  v1224 = sub_22E7BE5A4(v1218, v1221, v1223, (uint64_t)&v1531);
  v1225 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v1200 + 184) - *(_QWORD *)(v1200 + 176)) >> 3);
  v1226 = v1532;
  if (v1532 >= HIDWORD(v1532))
  {
    v1224 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1226 = v1532;
  }
  *((_QWORD *)v1531 + v1226) = v1225;
  v1227 = v1532 + 1;
  LODWORD(v1532) = v1532 + 1;
  v1228 = -1431655765 * ((*(_QWORD *)(v1200 + 184) - *(_QWORD *)(v1200 + 176)) >> 3);
  if ((_DWORD)v1228)
  {
    v1229 = 0;
    v1230 = 24 * v1228;
    do
    {
      v1231 = *(_QWORD *)(v1200 + 176) + v1229;
      v1232 = *(_BYTE *)(v1231 + 23);
      if (v1232 >= 0)
        v1233 = (char *)(*(_QWORD *)(v1200 + 176) + v1229);
      else
        v1233 = *(char **)v1231;
      if (v1232 >= 0)
        v1234 = v1232 & 0x7F;
      else
        v1234 = *(_QWORD *)(v1231 + 8);
      v1224 = sub_22E7BE5A4(v1224, v1233, v1234, (uint64_t)&v1531);
      v1229 += 24;
    }
    while (v1230 != v1229);
    v1227 = v1532;
  }
  v1235 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v1200 + 208) - *(_QWORD *)(v1200 + 200)) >> 3);
  if (v1227 >= HIDWORD(v1532))
  {
    v1224 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1227 = v1532;
  }
  *((_QWORD *)v1531 + v1227) = v1235;
  LODWORD(v1532) = v1532 + 1;
  v1236 = -1431655765 * ((*(_QWORD *)(v1200 + 208) - *(_QWORD *)(v1200 + 200)) >> 3);
  if ((_DWORD)v1236)
  {
    v1237 = 0;
    v1238 = 24 * v1236;
    do
    {
      v1239 = *(_QWORD *)(v1200 + 200) + v1237;
      v1240 = *(_BYTE *)(v1239 + 23);
      if (v1240 >= 0)
        v1241 = (char *)(*(_QWORD *)(v1200 + 200) + v1237);
      else
        v1241 = *(char **)v1239;
      if (v1240 >= 0)
        v1242 = v1240 & 0x7F;
      else
        v1242 = *(_QWORD *)(v1239 + 8);
      v1224 = sub_22E7BE5A4(v1224, v1241, v1242, (uint64_t)&v1531);
      v1237 += 24;
    }
    while (v1238 != v1237);
  }
  v1243 = sub_22E742038(*(llvm::raw_ostream **)(v9 + 16), 2u, (uint64_t)&v1531, 0);
  LODWORD(v1532) = 0;
  v1244 = **(_QWORD **)(a2 + 104);
  v1245 = *(_BYTE *)(v1244 + 23);
  v1246 = v1245 < 0;
  if (v1245 >= 0)
    v1247 = **(char ***)(a2 + 104);
  else
    v1247 = *(char **)v1244;
  v1248 = v1245 & 0x7F;
  if (v1246)
    v1249 = *(_QWORD *)(v1244 + 8);
  else
    v1249 = v1248;
  v1250 = sub_22E7BE5A4((uint64_t)v1243, v1247, v1249, (uint64_t)&v1531);
  v1251 = *(_BYTE *)(v1244 + 95);
  v1252 = v1251;
  if (v1251 >= 0)
    v1253 = (char *)(v1244 + 72);
  else
    v1253 = *(char **)(v1244 + 72);
  v1254 = v1251 & 0x7F;
  if (v1252 >= 0)
    v1255 = v1254;
  else
    v1255 = *(_QWORD *)(v1244 + 80);
  v1256 = sub_22E7BE5A4(v1250, v1253, v1255, (uint64_t)&v1531);
  v1257 = *(_BYTE *)(v1244 + 119);
  v1258 = v1257;
  if (v1257 >= 0)
    v1259 = (char *)(v1244 + 96);
  else
    v1259 = *(char **)(v1244 + 96);
  v1260 = v1257 & 0x7F;
  if (v1258 >= 0)
    v1261 = v1260;
  else
    v1261 = *(_QWORD *)(v1244 + 104);
  v1262 = sub_22E7BE5A4(v1256, v1259, v1261, (uint64_t)&v1531);
  v1263 = *(_BYTE *)(v1244 + 143);
  v1264 = v1263;
  if (v1263 >= 0)
    v1265 = (char *)(v1244 + 120);
  else
    v1265 = *(char **)(v1244 + 120);
  v1266 = v1263 & 0x7F;
  if (v1264 >= 0)
    v1267 = v1266;
  else
    v1267 = *(_QWORD *)(v1244 + 128);
  v1268 = sub_22E7BE5A4(v1262, v1265, v1267, (uint64_t)&v1531);
  v1269 = *(_BYTE *)(v1244 + 216) & 1;
  v1270 = v1532;
  if (v1532 >= HIDWORD(v1532))
  {
    v1268 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1270 = v1532;
  }
  *((_QWORD *)v1531 + v1270) = v1269;
  v1271 = v1532 + 1;
  LODWORD(v1532) = v1271;
  v1272 = ((unint64_t)*(unsigned __int8 *)(v1244 + 216) >> 1) & 1;
  if (v1271 >= HIDWORD(v1532))
  {
    v1268 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1271 = v1532;
  }
  *((_QWORD *)v1531 + v1271) = v1272;
  v1273 = v1532 + 1;
  LODWORD(v1532) = v1273;
  v1274 = ((unint64_t)*(unsigned __int8 *)(v1244 + 216) >> 4) & 1;
  if (v1273 >= HIDWORD(v1532))
  {
    v1268 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1273 = v1532;
  }
  *((_QWORD *)v1531 + v1273) = v1274;
  v1275 = v1532 + 1;
  LODWORD(v1532) = v1275;
  v1276 = ((unint64_t)*(unsigned __int8 *)(v1244 + 216) >> 5) & 1;
  if (v1275 >= HIDWORD(v1532))
  {
    v1268 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1275 = v1532;
  }
  *((_QWORD *)v1531 + v1275) = v1276;
  v1277 = v1532 + 1;
  LODWORD(v1532) = v1277;
  v1278 = (unint64_t)*(unsigned __int8 *)(v1244 + 216) >> 7;
  if (v1277 >= HIDWORD(v1532))
  {
    v1268 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1277 = v1532;
  }
  *((_QWORD *)v1531 + v1277) = v1278;
  v1279 = v1532 + 1;
  LODWORD(v1532) = v1279;
  v1280 = *(_WORD *)(v1244 + 848) & 1;
  if (v1279 >= HIDWORD(v1532))
  {
    v1268 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1279 = v1532;
  }
  *((_QWORD *)v1531 + v1279) = v1280;
  v1281 = v1532 + 1;
  LODWORD(v1532) = v1281;
  v1282 = ((unint64_t)*(unsigned __int16 *)(v1244 + 848) >> 1) & 1;
  if (v1281 >= HIDWORD(v1532))
  {
    v1268 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1281 = v1532;
  }
  *((_QWORD *)v1531 + v1281) = v1282;
  v1283 = v1532 + 1;
  LODWORD(v1532) = v1283;
  v1284 = ((unint64_t)*(unsigned __int16 *)(v1244 + 848) >> 3) & 1;
  if (v1283 >= HIDWORD(v1532))
  {
    v1268 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1283 = v1532;
  }
  *((_QWORD *)v1531 + v1283) = v1284;
  v1285 = v1532 + 1;
  LODWORD(v1532) = v1285;
  v1286 = ((unint64_t)*(unsigned __int16 *)(v1244 + 848) >> 4) & 1;
  if (v1285 >= HIDWORD(v1532))
  {
    v1268 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1285 = v1532;
  }
  *((_QWORD *)v1531 + v1285) = v1286;
  LODWORD(v1532) = v1532 + 1;
  v1287 = *(_QWORD *)(a2 + 104);
  v1290 = *(char **)(v1287 + 168);
  v1288 = v1287 + 168;
  v1289 = v1290;
  v1291 = *(_BYTE *)(v1288 + 23);
  if (v1291 >= 0)
    v1292 = (char *)v1288;
  else
    v1292 = v1289;
  v1293 = *(_QWORD *)(v1288 + 8);
  if (v1291 >= 0)
    v1294 = v1291 & 0x7F;
  else
    v1294 = v1293;
  sub_22E7BE5A4(v1268, v1292, v1294, (uint64_t)&v1531);
  v1295 = (uint64_t)sub_22E742038(*(llvm::raw_ostream **)(v9 + 16), 3u, (uint64_t)&v1531, 0);
  v1296 = 0;
  LODWORD(v1532) = 0;
  v1297 = *(_QWORD *)(a2 + 32);
  v1298 = (uint64_t)(*(_QWORD *)(v1297 + 8) - *(_QWORD *)v1297) >> 5;
  if (!HIDWORD(v1532))
  {
    v1295 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1296 = v1532;
  }
  *((_QWORD *)v1531 + v1296) = v1298;
  v1299 = v1532 + 1;
  LODWORD(v1532) = v1532 + 1;
  v1300 = *(_QWORD *)(v1297 + 8) - *(_QWORD *)v1297;
  if ((v1300 & 0x1FFFFFFFE0) != 0)
  {
    v1406 = 0;
    v1407 = (v1300 >> 5);
    do
    {
      v1408 = *(_QWORD *)v1297 + v1406;
      v1409 = *(_BYTE *)(v1408 + 23);
      if (v1409 >= 0)
        v1410 = (char *)(*(_QWORD *)v1297 + v1406);
      else
        v1410 = *(char **)v1408;
      if (v1409 >= 0)
        v1411 = v1409 & 0x7F;
      else
        v1411 = *(_QWORD *)(v1408 + 8);
      v1295 = sub_22E7BE5A4(v1295, v1410, v1411, (uint64_t)&v1531);
      v1412 = *(unsigned __int8 *)(*(_QWORD *)v1297 + v1406 + 24);
      v1413 = v1532;
      if (v1532 >= (unint64_t)HIDWORD(v1532))
      {
        v1295 = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v1413 = v1532;
      }
      *((_QWORD *)v1531 + v1413) = v1412;
      v1299 = v1532 + 1;
      LODWORD(v1532) = v1532 + 1;
      v1406 += 32;
      --v1407;
    }
    while (v1407);
  }
  v1301 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v1297 + 32) - *(_QWORD *)(v1297 + 24)) >> 3);
  if (v1299 >= HIDWORD(v1532))
  {
    v1295 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1299 = v1532;
  }
  *((_QWORD *)v1531 + v1299) = v1301;
  v1302 = v1532 + 1;
  LODWORD(v1532) = v1532 + 1;
  v1303 = -1431655765 * ((*(_QWORD *)(v1297 + 32) - *(_QWORD *)(v1297 + 24)) >> 3);
  if ((_DWORD)v1303)
  {
    v1304 = 0;
    v1305 = 24 * v1303;
    do
    {
      v1306 = *(_QWORD *)(v1297 + 24) + v1304;
      v1307 = *(_BYTE *)(v1306 + 23);
      if (v1307 >= 0)
        v1308 = (char *)(*(_QWORD *)(v1297 + 24) + v1304);
      else
        v1308 = *(char **)v1306;
      if (v1307 >= 0)
        v1309 = v1307 & 0x7F;
      else
        v1309 = *(_QWORD *)(v1306 + 8);
      v1295 = sub_22E7BE5A4(v1295, v1308, v1309, (uint64_t)&v1531);
      v1304 += 24;
    }
    while (v1305 != v1304);
    v1302 = v1532;
  }
  v1310 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v1297 + 56) - *(_QWORD *)(v1297 + 48)) >> 3);
  if (v1302 >= HIDWORD(v1532))
  {
    v1295 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1302 = v1532;
  }
  *((_QWORD *)v1531 + v1302) = v1310;
  v1311 = v1532 + 1;
  LODWORD(v1532) = v1532 + 1;
  v1312 = -1431655765 * ((*(_QWORD *)(v1297 + 56) - *(_QWORD *)(v1297 + 48)) >> 3);
  if ((_DWORD)v1312)
  {
    v1313 = 0;
    v1314 = 24 * v1312;
    do
    {
      v1315 = *(_QWORD *)(v1297 + 48) + v1313;
      v1316 = *(_BYTE *)(v1315 + 23);
      if (v1316 >= 0)
        v1317 = (char *)(*(_QWORD *)(v1297 + 48) + v1313);
      else
        v1317 = *(char **)v1315;
      if (v1316 >= 0)
        v1318 = v1316 & 0x7F;
      else
        v1318 = *(_QWORD *)(v1315 + 8);
      v1295 = sub_22E7BE5A4(v1295, v1317, v1318, (uint64_t)&v1531);
      v1313 += 24;
    }
    while (v1314 != v1313);
    v1311 = v1532;
  }
  v1319 = *(unsigned __int8 *)(v1297 + 72);
  if (v1311 >= HIDWORD(v1532))
  {
    v1295 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1311 = v1532;
  }
  *((_QWORD *)v1531 + v1311) = v1319;
  v1320 = v1532 + 1;
  LODWORD(v1532) = v1320;
  v1321 = *(unsigned __int8 *)(v1297 + 73);
  if (v1320 >= HIDWORD(v1532))
  {
    v1295 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1320 = v1532;
  }
  *((_QWORD *)v1531 + v1320) = v1321;
  LODWORD(v1532) = v1532 + 1;
  v1324 = *(char **)(v1297 + 104);
  v1323 = v1297 + 104;
  v1322 = v1324;
  v1325 = *(_BYTE *)(v1323 + 23);
  v1326 = v1325;
  if (v1325 >= 0)
    v1327 = (char *)v1323;
  else
    v1327 = v1322;
  v1328 = v1325 & 0x7F;
  if (v1326 >= 0)
    v1329 = v1328;
  else
    v1329 = *(_QWORD *)(v1323 + 8);
  sub_22E7BE5A4(v1295, v1327, v1329, (uint64_t)&v1531);
  v1330 = *(unsigned int *)(v1323 + 148);
  v1331 = v1532;
  if (v1532 >= HIDWORD(v1532))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1331 = v1532;
  }
  *((_QWORD *)v1531 + v1331) = v1330;
  LODWORD(v1532) = v1532 + 1;
  sub_22E742038(*(llvm::raw_ostream **)(v9 + 16), 4u, (uint64_t)&v1531, 0);
  sub_22E7416F4(*(_QWORD *)(v9 + 16));
  v1332 = a3[249];
  v1333 = sub_22E6155EC((_QWORD *)v1332, *(_DWORD *)(v1332 + 344));
  if (v1333)
  {
    v1334 = v1333;
    v1335 = (char *)operator new(0x228uLL);
    *(_QWORD *)v1335 = &unk_24FA715D0;
    *((_QWORD *)v1335 + 1) = 0;
    *(_OWORD *)(v1335 + 88) = 0u;
    *(_OWORD *)(v1335 + 104) = 0u;
    *(_OWORD *)(v1335 + 120) = 0u;
    *(_OWORD *)(v1335 + 136) = 0u;
    *(_OWORD *)(v1335 + 152) = 0u;
    *(_OWORD *)(v1335 + 168) = 0u;
    *(_OWORD *)(v1335 + 184) = 0u;
    *(_OWORD *)(v1335 + 200) = 0u;
    *(_OWORD *)(v1335 + 216) = 0u;
    *(_OWORD *)(v1335 + 232) = 0u;
    *(_OWORD *)(v1335 + 248) = 0u;
    *(_OWORD *)(v1335 + 264) = 0u;
    *(_OWORD *)(v1335 + 280) = 0u;
    *(_OWORD *)(v1335 + 296) = 0u;
    *(_OWORD *)(v1335 + 312) = 0u;
    *(_OWORD *)(v1335 + 328) = 0u;
    *(_OWORD *)(v1335 + 344) = 0u;
    *(_OWORD *)(v1335 + 360) = 0u;
    *(_OWORD *)(v1335 + 376) = 0u;
    *(_OWORD *)(v1335 + 392) = 0u;
    *(_OWORD *)(v1335 + 408) = 0u;
    *(_OWORD *)(v1335 + 424) = 0u;
    *(_OWORD *)(v1335 + 440) = 0u;
    *(_OWORD *)(v1335 + 456) = 0u;
    *(_OWORD *)(v1335 + 472) = 0u;
    *(_OWORD *)(v1335 + 488) = 0u;
    *(_OWORD *)(v1335 + 504) = 0u;
    *(_OWORD *)(v1335 + 520) = 0u;
    *(_OWORD *)(v1335 + 536) = 0u;
    *(_OWORD *)(v1335 + 40) = xmmword_22F45E110;
    *((_QWORD *)v1335 + 2) = 0;
    *((_QWORD *)v1335 + 3) = v1335 + 40;
    *(_OWORD *)(v1335 + 56) = xmmword_22F45E250;
    v1336 = *(_QWORD *)(v9 + 16);
    *(_OWORD *)(v1335 + 72) = xmmword_22F45E0D0;
    *((_QWORD *)v1335 + 4) = 0x2000000003;
    v1510 = v1335 + 24;
    v1511 = (std::__shared_weak_count *)v1335;
    v1337 = sub_22E74761C(v1336, (uint64_t)&v1510);
    v1338 = v1511;
    if (v1511)
    {
      v1339 = (unint64_t *)&v1511->__shared_owners_;
      do
        v1340 = __ldaxr(v1339);
      while (__stlxr(v1340 - 1, v1339));
      if (!v1340)
      {
        ((void (*)(std::__shared_weak_count *))v1338->__on_zero_shared)(v1338);
        std::__shared_weak_count::__release_weak(v1338);
      }
    }
    LODWORD(v1532) = 0;
    if (HIDWORD(v1532))
    {
      v1341 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v1341 = v1532;
    }
    *((_QWORD *)v1531 + v1341) = 3;
    LODWORD(v1532) = v1532 + 1;
    sub_22F2CF54C((_QWORD *)v9, *(_DWORD *)(v1332 + 344), (uint64_t)&v1531);
    v1342 = *(_QWORD *)(v1334 + 88);
    do
    {
      v1343 = v1342;
      v1344 = *(_QWORD *)(v1342 + 8);
      if ((v1344 & 2) == 0)
        break;
      v1342 = v1344 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while (v1342);
    sub_22F2CF5C0(v9, v1337, (uint64_t)v1531, v1532, (_BYTE *)(v1343 + 32), *(_QWORD *)v1343);
  }
  LODWORD(v1532) = 0;
  sub_22F2CF54C((_QWORD *)v9, *(_DWORD *)(v1332 + 344), (uint64_t)&v1531);
  sub_22E742038(*(llvm::raw_ostream **)(v9 + 16), 4u, (uint64_t)&v1531, 0);
  v1345 = a3[249];
  sub_22E74181C(*(_QWORD *)(v9 + 16), 0x10u, 4u);
  v1346 = (char *)operator new(0x228uLL);
  *(_QWORD *)v1346 = &unk_24FA715D0;
  *((_QWORD *)v1346 + 1) = 0;
  *(_OWORD *)(v1346 + 168) = 0u;
  *(_OWORD *)(v1346 + 184) = 0u;
  *(_OWORD *)(v1346 + 200) = 0u;
  *(_OWORD *)(v1346 + 216) = 0u;
  *(_OWORD *)(v1346 + 232) = 0u;
  *(_OWORD *)(v1346 + 248) = 0u;
  *(_OWORD *)(v1346 + 264) = 0u;
  *(_OWORD *)(v1346 + 280) = 0u;
  *(_OWORD *)(v1346 + 296) = 0u;
  *(_OWORD *)(v1346 + 312) = 0u;
  *(_OWORD *)(v1346 + 328) = 0u;
  *(_OWORD *)(v1346 + 344) = 0u;
  *(_OWORD *)(v1346 + 360) = 0u;
  *(_OWORD *)(v1346 + 376) = 0u;
  *(_OWORD *)(v1346 + 392) = 0u;
  *(_OWORD *)(v1346 + 408) = 0u;
  *(_OWORD *)(v1346 + 424) = 0u;
  *(_OWORD *)(v1346 + 440) = 0u;
  *(_OWORD *)(v1346 + 456) = 0u;
  *(_OWORD *)(v1346 + 472) = 0u;
  *(_OWORD *)(v1346 + 488) = 0u;
  *(_OWORD *)(v1346 + 504) = 0u;
  *(_OWORD *)(v1346 + 520) = 0u;
  *(_OWORD *)(v1346 + 536) = 0u;
  *(_OWORD *)(v1346 + 40) = xmmword_22F45E070;
  *((_QWORD *)v1346 + 2) = 0;
  *((_QWORD *)v1346 + 3) = v1346 + 40;
  *(_OWORD *)(v1346 + 56) = xmmword_22F45E250;
  *(_OWORD *)(v1346 + 72) = xmmword_22F45FAE0;
  *(_OWORD *)(v1346 + 88) = xmmword_22F45FAF0;
  *(_OWORD *)(v1346 + 104) = xmmword_22F45E160;
  *(_OWORD *)(v1346 + 120) = xmmword_22F45E160;
  *(_OWORD *)(v1346 + 136) = xmmword_22F45E160;
  v1347 = *(_QWORD *)(v9 + 16);
  *(_OWORD *)(v1346 + 152) = xmmword_22F45E0D0;
  *((_QWORD *)v1346 + 4) = 0x2000000008;
  v1524 = v1346 + 24;
  v1525 = (std::__shared_weak_count *)v1346;
  v1492 = sub_22E74761C(v1347, (uint64_t)&v1524);
  v1348 = v1525;
  if (v1525)
  {
    v1349 = (unint64_t *)&v1525->__shared_owners_;
    do
      v1350 = __ldaxr(v1349);
    while (__stlxr(v1350 - 1, v1349));
    if (!v1350)
    {
      ((void (*)(std::__shared_weak_count *))v1348->__on_zero_shared)(v1348);
      std::__shared_weak_count::__release_weak(v1348);
    }
  }
  v1351 = (char *)operator new(0x228uLL);
  *(_OWORD *)(v1351 + 40) = xmmword_22F45E090;
  *(_QWORD *)v1351 = &unk_24FA715D0;
  *((_QWORD *)v1351 + 1) = 0;
  *(_OWORD *)(v1351 + 88) = 0u;
  *(_OWORD *)(v1351 + 104) = 0u;
  *(_OWORD *)(v1351 + 120) = 0u;
  *(_OWORD *)(v1351 + 136) = 0u;
  *(_OWORD *)(v1351 + 152) = 0u;
  *(_OWORD *)(v1351 + 168) = 0u;
  *(_OWORD *)(v1351 + 184) = 0u;
  *(_OWORD *)(v1351 + 200) = 0u;
  *(_OWORD *)(v1351 + 216) = 0u;
  *(_OWORD *)(v1351 + 232) = 0u;
  *(_OWORD *)(v1351 + 248) = 0u;
  *(_OWORD *)(v1351 + 264) = 0u;
  *(_OWORD *)(v1351 + 280) = 0u;
  *(_OWORD *)(v1351 + 296) = 0u;
  *(_OWORD *)(v1351 + 312) = 0u;
  *(_OWORD *)(v1351 + 328) = 0u;
  *(_OWORD *)(v1351 + 344) = 0u;
  *(_OWORD *)(v1351 + 360) = 0u;
  *(_OWORD *)(v1351 + 376) = 0u;
  *(_OWORD *)(v1351 + 392) = 0u;
  *(_OWORD *)(v1351 + 408) = 0u;
  *(_OWORD *)(v1351 + 424) = 0u;
  *(_OWORD *)(v1351 + 440) = 0u;
  *(_OWORD *)(v1351 + 456) = 0u;
  *(_OWORD *)(v1351 + 472) = 0u;
  *(_OWORD *)(v1351 + 488) = 0u;
  *(_OWORD *)(v1351 + 504) = 0u;
  *(_OWORD *)(v1351 + 520) = 0u;
  *(_OWORD *)(v1351 + 536) = 0u;
  *((_QWORD *)v1351 + 2) = 0;
  *((_QWORD *)v1351 + 3) = v1351 + 40;
  *(_OWORD *)(v1351 + 56) = xmmword_22F45E080;
  v1352 = *(_QWORD *)(v9 + 16);
  *(_OWORD *)(v1351 + 72) = xmmword_22F45E080;
  *((_QWORD *)v1351 + 4) = 0x2000000003;
  v1522 = v1351 + 24;
  v1523 = (std::__shared_weak_count *)v1351;
  v1491 = sub_22E74761C(v1352, (uint64_t)&v1522);
  v1353 = v1523;
  if (v1523)
  {
    v1354 = (unint64_t *)&v1523->__shared_owners_;
    do
      v1355 = __ldaxr(v1354);
    while (__stlxr(v1355 - 1, v1354));
    if (!v1355)
    {
      ((void (*)(std::__shared_weak_count *))v1353->__on_zero_shared)(v1353);
      std::__shared_weak_count::__release_weak(v1353);
    }
  }
  v1356 = *(_DWORD *)(v1345 + 192);
  v1503 = v9;
  if (v1356 != 1)
  {
    v1499 = 0;
    v1360 = 0;
    v1359 = 0;
    v1493 = 0;
    v1358 = 0;
    v1357 = 0;
    v1414 = 1;
    v1496 = v1345;
    v1494 = *(_DWORD *)(v1345 + 192);
    while (1)
    {
      v1415 = *(_QWORD *)(v1345 + 184);
      if ((*(_DWORD *)(v1415 + 24 * v1414) & 0x80000000) == 0)
      {
        v1416 = v1415 + 24 * v1414;
        v1417 = *(_QWORD *)(v1416 + 16);
        v1418 = v1417 & 0xFFFFFFFFFFFFFFF8;
        v1419 = *(_QWORD *)((v1417 & 0xFFFFFFFFFFFFFFF8) + 8);
        if (v1419)
        {
          if (((*(_QWORD *)(*(_QWORD *)(v9 + 1648) + 8 * (v1414 >> 6)) >> v1414) & 1) != 0)
            break;
        }
      }
LABEL_1562:
      if (v1356 == (_DWORD)++v1414)
        goto LABEL_1401;
    }
    v1420 = v1417 & 7;
    v1421 = v1420 != 0;
    if (v1420 == 3)
      v1421 = 0;
    v1507 = v1421;
    v1505 = (v1420 - 3) <= 1 && *(_DWORD *)(v1416 + 8) == 0;
    v1422 = *(unsigned __int8 *)(v1418 + 48);
    v1423 = *(_QWORD *)(v9 + 48);
    v1509 = v1357;
    if ((*(_WORD *)(**(_QWORD **)(v1423 + 104) + 848) & 0x100) != 0)
    {
      if (*(_QWORD *)v1418)
      {
        llvm::MemoryBuffer::getMemBufferRef(*(llvm::MemoryBuffer **)v1418);
        v1424 = llvm::hash_value();
      }
      else
      {
        v1425 = *(_QWORD *)(v1423 + 48);
        *(_QWORD *)(v1425 + 312) = 0x39B00000000;
        v1426 = v1359;
        if (*(char *)(v1425 + 311) < 0)
        {
          **(_BYTE **)(v1425 + 288) = 0;
          *(_QWORD *)(v1425 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v1425 + 288) = 0;
          *(_BYTE *)(v1425 + 311) = 0;
        }
        *(_OWORD *)__dst = (unint64_t)(v1425 + 320);
        *(_QWORD *)&__dst[16] = v1425;
        *(_WORD *)&__dst[24] = 1;
        *(_BYTE *)(v1425 + 320) = 0;
        *(_DWORD *)(v1425 + 664) = 0;
        v1427 = *(unsigned int *)(v1425 + 776);
        if ((_DWORD)v1427)
        {
          v1428 = *(_QWORD *)(v1425 + 768);
          v1429 = 56 * v1427;
          do
          {
            if (*(char *)(v1428 + v1429 - 9) < 0)
              operator delete(*(void **)(v1428 + v1429 - 32));
            v1429 -= 56;
          }
          while (v1429);
        }
        *(_DWORD *)(v1425 + 776) = 0;
        v1430 = v1419;
        do
        {
          v1431 = (size_t *)v1430;
          v1432 = *(_QWORD *)(v1430 + 8);
          if ((v1432 & 2) == 0)
            break;
          v1430 = v1432 & 0xFFFFFFFFFFFFFFFCLL;
        }
        while (v1430);
        sub_22E3B89A8((unsigned __int8 **)__dst, v1431 + 4, *v1431);
        sub_22E3BB0B8((uint64_t)__dst);
        v1424 = -1;
        v1359 = v1426;
      }
    }
    else
    {
      v1424 = -1;
    }
    *(_DWORD *)&__dst[8] = 64;
    *(_QWORD *)__dst = v1424;
    llvm::APInt::getLoBits((llvm::APInt *)__dst);
    v1433 = &v1534;
    if (v1535 >= 0x41)
      v1433 = (uint64_t *)v1534;
    v1434 = *(_DWORD *)v1433;
    if (v1535 >= 0x41 && v1534 != 0)
      MEMORY[0x2348A0E84]();
    llvm::APInt::getHiBits((llvm::APInt *)__dst);
    v1436 = &v1534;
    if (v1535 >= 0x41)
      v1436 = (uint64_t *)v1534;
    v1437 = *(_DWORD *)v1436;
    if (v1535 >= 0x41 && v1534)
      MEMORY[0x2348A0E84]();
    v1438 = (v1422 >> 2) & 1;
    v1439 = v1422 & 1;
    if (v1420 && v1420 != 3)
    {
      if (v1358 < (std::__shared_weak_count *)v1493)
      {
        v1358->__vftable = (std::__shared_weak_count_vtbl *)v1419;
        LOBYTE(v1358->__shared_owners_) = v1507;
        BYTE1(v1358->__shared_owners_) = v1438;
        BYTE2(v1358->__shared_owners_) = v1439;
        BYTE3(v1358->__shared_owners_) = v1505;
        HIDWORD(v1358->__shared_owners_) = v1434;
        LODWORD(v1358->__shared_weak_owners_) = v1437;
        ++v1358;
        goto LABEL_1532;
      }
      v1446 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1358 - (char *)v1509) >> 3) + 1;
      if (v1446 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_1624;
      if (0x5555555555555556 * ((v1493 - (char *)v1509) >> 3) > v1446)
        v1446 = 0x5555555555555556 * ((v1493 - (char *)v1509) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((v1493 - (char *)v1509) >> 3) >= 0x555555555555555)
        v1447 = 0xAAAAAAAAAAAAAAALL;
      else
        v1447 = v1446;
      if (v1447)
      {
        if (v1447 > 0xAAAAAAAAAAAAAAALL)
LABEL_1625:
          sub_22E3B3F8C();
        __pb = (void *)v1447;
        v1448 = (char *)operator new(24 * v1447);
        v1447 = (unint64_t)__pb;
      }
      else
      {
        v1448 = 0;
      }
      v1453 = &v1448[8 * (((char *)v1358 - (char *)v1509) >> 3)];
      *(_QWORD *)v1453 = v1419;
      v1453[8] = v1507;
      v1453[9] = v1438;
      v1453[10] = v1439;
      v1453[11] = v1505;
      *((_DWORD *)v1453 + 3) = v1434;
      *((_DWORD *)v1453 + 4) = v1437;
      if (v1358 == v1509)
      {
        v1452 = v1358;
        v1357 = (std::__shared_weak_count *)&v1448[8 * (((char *)v1358 - (char *)v1509) >> 3)];
        v9 = v1503;
        v1345 = v1496;
        v1356 = v1494;
      }
      else
      {
        v1454 = &v1448[8 * (((char *)v1358 - (char *)v1509) >> 3)];
        v9 = v1503;
        v1345 = v1496;
        v1356 = v1494;
        do
        {
          v1455 = v1358[-1].std::__shared_count;
          *((_DWORD *)v1454 - 2) = v1358[-1].__shared_weak_owners_;
          *(std::__shared_count *)(v1454 - 24) = v1455;
          v1454 -= 24;
          --v1358;
        }
        while (v1358 != v1509);
        v1452 = v1509;
        v1357 = (std::__shared_weak_count *)v1454;
      }
      v1493 = &v1448[24 * v1447];
      v1358 = (std::__shared_weak_count *)(v1453 + 24);
      if (!v1452)
        goto LABEL_1559;
    }
    else
    {
      if (v1360 < v1499)
      {
        *(_QWORD *)v1360 = v1419;
        v1360[8] = v1507;
        v1360[9] = v1438;
        v1360[10] = v1439;
        v1360[11] = v1505;
        *((_DWORD *)v1360 + 3) = v1434;
        *((_DWORD *)v1360 + 4) = v1437;
        v1360 += 24;
LABEL_1532:
        v9 = v1503;
        v1357 = v1509;
        v1345 = v1496;
        v1356 = v1494;
LABEL_1559:
        if (*(_DWORD *)&__dst[8] >= 0x41u && *(_QWORD *)__dst)
          MEMORY[0x2348A0E84](*(_QWORD *)__dst, 0x1000C8000313F17);
        goto LABEL_1562;
      }
      v1440 = v1359;
      v1441 = 0xAAAAAAAAAAAAAAABLL * ((v1360 - v1359) >> 3);
      v1442 = v1441 + 1;
      if (v1441 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_1624;
      __pa = v1440;
      v1443 = 0xAAAAAAAAAAAAAAABLL * ((v1499 - v1440) >> 3);
      if (2 * v1443 > v1442)
        v1442 = 2 * v1443;
      if (v1443 >= 0x555555555555555)
        v1444 = 0xAAAAAAAAAAAAAAALL;
      else
        v1444 = v1442;
      if (v1444)
      {
        if (v1444 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_1625;
        v1445 = (char *)operator new(24 * v1444);
      }
      else
      {
        v1445 = 0;
      }
      v1449 = &v1445[24 * v1441];
      *(_QWORD *)v1449 = v1419;
      v1449[8] = v1507;
      v1449[9] = v1438;
      v1449[10] = v1439;
      v1449[11] = v1505;
      *((_DWORD *)v1449 + 3) = v1434;
      *((_DWORD *)v1449 + 4) = v1437;
      if (v1360 == __pa)
      {
        v1452 = v1360;
        v1359 = &v1445[24 * v1441];
        v9 = v1503;
        v1357 = v1509;
        v1345 = v1496;
        v1356 = v1494;
      }
      else
      {
        v1450 = &v1445[24 * v1441];
        v9 = v1503;
        v1357 = v1509;
        v1345 = v1496;
        v1356 = v1494;
        do
        {
          v1451 = *(_OWORD *)(v1360 - 24);
          *((_DWORD *)v1450 - 2) = *((_DWORD *)v1360 - 2);
          *(_OWORD *)(v1450 - 24) = v1451;
          v1450 -= 24;
          v1360 -= 24;
        }
        while (v1360 != __pa);
        v1452 = __pa;
        v1359 = v1450;
      }
      v1499 = &v1445[24 * v1444];
      v1360 = v1449 + 24;
      if (!v1452)
        goto LABEL_1559;
    }
    operator delete(v1452);
    goto LABEL_1559;
  }
  v1357 = 0;
  v1358 = 0;
  v1359 = 0;
  v1360 = 0;
LABEL_1401:
  v1497 = 0;
  __p = v1359;
  v1361 = 0;
  v1362 = 0;
  v1504 = 0;
  v1534 = (uint64_t)v1359;
  v1535 = v1357;
  v1506 = (uint64_t *)(v9 + 128);
  v1536 = v1360;
  v1537 = v1358;
  v1363 = v1357;
  v1364 = (uint64_t)v1359;
  while (1)
  {
    if ((char *)v1364 == v1360 && v1363 == v1358)
    {
      v1365 = v1536 == v1360 && v1537 == v1358;
      if (v1365)
        break;
    }
    v1366 = 0;
    do
    {
      v1367 = (unint64_t *)(*(uint64_t (**)(uint64_t *))((char *)&off_24FA724A0 + v1366))(&v1534);
      if (v1367)
        v1368 = 1;
      else
        v1368 = v1366 == 16;
      v1366 += 16;
    }
    while (!v1368);
    v1369 = v1367;
    v1370 = *v1367;
    do
    {
      v1371 = *(_QWORD *)(v1370 + 8);
      v1370 = v1371 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while ((v1371 & 2) != 0 && v1370);
    *(_QWORD *)__dst = v1371 & 0xFFFFFFFFFFFFFFFCLL;
    v1372 = sub_22F2D22C8(v1506, __dst);
    if (*((_DWORD *)v1372 + 2))
    {
      v9 = v1503;
    }
    else
    {
      v1374 = v1372;
      v1508 = v1357;
      v1375 = *(_QWORD *)(v1503 + 16);
      v1376 = *(_QWORD **)(v1375 + 8);
      v1377 = *(_QWORD *)(*(_QWORD *)v1375 + 8);
      if (v1376)
      {
        v1495 = *(_QWORD *)(*(_QWORD *)v1375 + 8);
        v1378 = (*(uint64_t (**)(_QWORD))(*v1376 + 80))(*(_QWORD *)(v1375 + 8)) + v1376[4] - v1376[2];
        v1377 = v1495;
      }
      else
      {
        v1378 = 0;
      }
      v1379 = *(unsigned int *)(v1375 + 24) + 8 * (v1378 + v1377);
      if (v1361 >= v1497)
      {
        v1381 = v1361 - v1362;
        v1382 = v1381 + 1;
        if ((unint64_t)(v1381 + 1) >> 61)
          goto LABEL_1624;
        if (((char *)v1497 - (char *)v1362) >> 2 > v1382)
          v1382 = ((char *)v1497 - (char *)v1362) >> 2;
        v1383 = 0x1FFFFFFFFFFFFFFFLL;
        if ((unint64_t)((char *)v1497 - (char *)v1362) < 0x7FFFFFFFFFFFFFF8)
          v1383 = v1382;
        if (v1383)
        {
          if (v1383 >> 61)
            goto LABEL_1625;
          v1385 = v1379;
          v1498 = v1383;
          v1384 = (char *)operator new(8 * v1383);
          v1383 = v1498;
          v1379 = v1385;
        }
        else
        {
          v1384 = 0;
        }
        v1386 = (uint64_t *)&v1384[8 * v1381];
        *v1386 = v1379;
        v1387 = v1386 + 1;
        if (v1361 == v1362)
        {
          v1380 = v1504;
        }
        else
        {
          v1380 = v1504;
          do
          {
            v1388 = *--v1361;
            *--v1386 = v1388;
          }
          while (v1361 != v1362);
        }
        v1497 = (uint64_t *)&v1384[8 * v1383];
        if (v1362)
        {
          v1361 = v1387;
          operator delete(v1362);
          v1362 = v1386;
        }
        else
        {
          v1362 = v1386;
          v1361 = v1387;
        }
        v1357 = v1508;
      }
      else
      {
        *v1361++ = v1379;
        v1357 = v1508;
        v1380 = v1504;
      }
      *((_DWORD *)v1374 + 2) = (unint64_t)((char *)v1361 - (char *)v1362) >> 3;
      v1389 = *((unsigned __int8 *)v1369 + 8);
      *(_QWORD *)__dst = 1;
      *(_QWORD *)&__dst[8] = v1361 - v1362;
      v1390 = *v1369;
      v1391 = *v1369;
      do
      {
        v1392 = *(_QWORD *)(v1391 + 8);
        v1391 = v1392 & 0xFFFFFFFFFFFFFFFCLL;
      }
      while ((v1392 & 2) != 0 && v1391);
      *(_QWORD *)&__dst[16] = *(_QWORD *)(v1391 + 24);
      v1393 = v1390;
      v9 = v1503;
      do
      {
        v1394 = *(_QWORD *)(v1393 + 8);
        v1393 = v1394 & 0xFFFFFFFFFFFFFFFCLL;
      }
      while ((v1394 & 2) != 0 && v1393);
      if (!v1389)
        ++v1380;
      if (*(_BYTE *)(v1503 + 120))
        v1395 = *(_QWORD *)(v1393 + 32);
      else
        v1395 = 0;
      v1504 = v1380;
      *(_QWORD *)&__dst[24] = v1395;
      v1527 = *((unsigned __int8 *)v1369 + 10);
      v1528 = *((unsigned __int8 *)v1369 + 9);
      v1529 = *((unsigned __int8 *)v1369 + 11);
      sub_22F2CF5C0(v1503, v1492, (uint64_t)__dst, 7, (_BYTE *)(v1390 + 32), *(_QWORD *)v1390);
      *(_QWORD *)__dst = 2;
      v1396 = *(unint64_t *)((char *)v1369 + 12);
      *(_QWORD *)&v1397 = v1396;
      *((_QWORD *)&v1397 + 1) = HIDWORD(v1396);
      *(_OWORD *)&__dst[8] = v1397;
      sub_22E74241C(*(llvm::raw_ostream **)(v1503 + 16), v1491, (uint64_t)__dst, 3, 0, 0, 0);
    }
    v1373 = 0;
    do
    {
      if (((*(uint64_t (**)(uint64_t *))((char *)&off_24FA72480 + v1373))(&v1534) & 1) != 0)
        break;
      v1365 = v1373 == 16;
      v1373 += 16;
    }
    while (!v1365);
    v1364 = v1534;
    v1363 = v1535;
    v1359 = __p;
  }
  sub_22E7416F4(*(_QWORD *)(v9 + 16));
  v1398 = (char *)operator new(0x228uLL);
  *(_QWORD *)v1398 = &unk_24FA715D0;
  *((_QWORD *)v1398 + 1) = 0;
  *(_OWORD *)(v1398 + 40) = xmmword_22F45E0E0;
  *(_OWORD *)(v1398 + 104) = 0u;
  *(_OWORD *)(v1398 + 120) = 0u;
  *(_OWORD *)(v1398 + 136) = 0u;
  *(_OWORD *)(v1398 + 152) = 0u;
  *(_OWORD *)(v1398 + 168) = 0u;
  *(_OWORD *)(v1398 + 184) = 0u;
  *(_OWORD *)(v1398 + 200) = 0u;
  *(_OWORD *)(v1398 + 216) = 0u;
  *(_OWORD *)(v1398 + 232) = 0u;
  *(_OWORD *)(v1398 + 248) = 0u;
  *(_OWORD *)(v1398 + 264) = 0u;
  *(_OWORD *)(v1398 + 280) = 0u;
  *(_OWORD *)(v1398 + 296) = 0u;
  *(_OWORD *)(v1398 + 312) = 0u;
  *(_OWORD *)(v1398 + 328) = 0u;
  *(_OWORD *)(v1398 + 344) = 0u;
  *(_OWORD *)(v1398 + 360) = 0u;
  *(_OWORD *)(v1398 + 376) = 0u;
  *(_OWORD *)(v1398 + 392) = 0u;
  *(_OWORD *)(v1398 + 408) = 0u;
  *(_OWORD *)(v1398 + 424) = 0u;
  *(_OWORD *)(v1398 + 440) = 0u;
  *(_OWORD *)(v1398 + 456) = 0u;
  *(_OWORD *)(v1398 + 472) = 0u;
  *(_OWORD *)(v1398 + 488) = 0u;
  *(_OWORD *)(v1398 + 504) = 0u;
  *(_OWORD *)(v1398 + 520) = 0u;
  *(_OWORD *)(v1398 + 536) = 0u;
  *((_QWORD *)v1398 + 2) = 0;
  *((_QWORD *)v1398 + 3) = v1398 + 40;
  *(_OWORD *)(v1398 + 56) = xmmword_22F45E250;
  *(_OWORD *)(v1398 + 72) = xmmword_22F45E250;
  v1399 = *(_QWORD *)(v9 + 16);
  *(_OWORD *)(v1398 + 88) = xmmword_22F45E0D0;
  *((_QWORD *)v1398 + 4) = 0x2000000004;
  v1534 = (uint64_t)(v1398 + 24);
  v1535 = (std::__shared_weak_count *)v1398;
  v1400 = sub_22E74761C(v1399, (uint64_t)&v1534);
  v1401 = v1535;
  if (v1535)
  {
    v1402 = (unint64_t *)&v1535->__shared_owners_;
    do
      v1403 = __ldaxr(v1402);
    while (__stlxr(v1403 - 1, v1402));
    if (!v1403)
    {
      ((void (*)(std::__shared_weak_count *))v1401->__on_zero_shared)(v1401);
      std::__shared_weak_count::__release_weak(v1401);
    }
  }
  *(_QWORD *)__dst = 5;
  *(_QWORD *)&__dst[8] = v1361 - v1362;
  *(_QWORD *)&__dst[16] = v1504;
  if (v1361 == v1362)
    v1404 = 0;
  else
    v1404 = (char *)v1362;
  if (v1361 == v1362)
    v1405 = 0;
  else
    v1405 = (char *)v1361 - (char *)v1362;
  sub_22E74241C(*(llvm::raw_ostream **)(v9 + 16), v1400, (uint64_t)__dst, 3, v1404, v1405, 0);
  if (v1362)
    operator delete(v1362);
  if (v1357)
    operator delete(v1357);
  if (v1359)
    operator delete(v1359);
  sub_22E7416F4(*(_QWORD *)(v9 + 16));
  if (v1531 != v1533)
    free(v1531);
}

uint64_t sub_22E7C9A94(uint64_t result, int a2, uint64_t a3)
{
  int v4;
  unsigned int v5;
  unint64_t v6;

  v4 = a2;
  if (a2)
  {
    result = sub_22E7E3C1C((_QWORD *)result, a2 & 0x7FFFFFFF);
    v4 -= result;
  }
  v5 = *(_DWORD *)(a3 + 8);
  if (v5 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a3 + 8);
  }
  HIDWORD(v6) = v4;
  LODWORD(v6) = v4;
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v5) = (v6 >> 31);
  ++*(_DWORD *)(a3 + 8);
  return result;
}

uint64_t sub_22E7C9B04(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t result;

  v5 = *(unsigned int *)a2;
  v6 = *(_DWORD *)(a3 + 8);
  if (v6 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v6) = v5;
  v7 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v7;
  if ((*a2 & 0x8000000000000000) != 0)
    v8 = (HIDWORD(*a2) & 0x7FFFFFFFLL) + 1;
  else
    v8 = 0;
  if (v7 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v7) = v8;
  v9 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v9;
  if ((a2[1] & 0x80000000) != 0)
    v10 = (a2[1] & 0x7FFFFFFFLL) + 1;
  else
    v10 = 0;
  if (v9 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v9) = v10;
  ++*(_DWORD *)(a3 + 8);
  return result;
}

uint64_t sub_22E7C9C14(uint64_t a1, void **a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  _BYTE *v18;
  _BYTE *v19;
  _BYTE *v20;
  int64_t v21;

  v4 = sub_22F1D1908(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 1992) + 16), a2);
  v5 = v4 | llvm::sys::path::remove_dots();
  v8 = *(_QWORD *)(a1 + 96);
  v7 = a1 + 96;
  v6 = v8;
  v9 = *(_BYTE *)(v7 + 23);
  v10 = v9;
  if (v9 >= 0)
    v11 = v7;
  else
    v11 = v6;
  v12 = v9 & 0x7F;
  if (v10 >= 0)
    v13 = v12;
  else
    v13 = *(_QWORD *)(v7 + 8);
  if (v13)
  {
    LOBYTE(v14) = *(_BYTE *)*a2;
    if ((_BYTE)v14)
    {
      v15 = 0;
      v16 = 1;
      while (*(unsigned __int8 *)(v11 + v15) == v14)
      {
        v14 = *((unsigned __int8 *)*a2 + v16);
        v17 = v16 + 1;
        if (v13 > v16)
        {
          v15 = v16++;
          if (v14)
            continue;
        }
        if (!v14)
          return v5;
        if ((llvm::sys::path::is_separator((llvm::sys::path *)(char)v14) & 1) == 0)
        {
          if (!llvm::sys::path::is_separator((llvm::sys::path *)*(char *)(v13 + v11 - 1)))
            return v5;
          --v17;
        }
        if (v17)
        {
          v19 = *a2;
          v18 = a2[1];
          v20 = (char *)*a2 + v17;
          v21 = &v18[(_QWORD)*a2] - v20;
          if (v18 != (_BYTE *)v17)
            memmove(*a2, v20, &v18[(_QWORD)*a2] - v20);
          a2[1] = (void *)(&v19[v21] - (_BYTE *)*a2);
          return 1;
        }
        return v5;
      }
    }
  }
  return v5;
}

unint64_t sub_22E7C9D40(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  unint64_t result;
  uint64_t v13;

  v6 = *(_DWORD *)a1;
  v7 = *(_DWORD *)(a1 + 4) + 1;
  *(_DWORD *)(a1 + 4) = v7;
  if (3 * v6 <= 4 * v7)
  {
    sub_22E7ED254((unsigned int *)a1, 2 * v6);
    v6 = *(_DWORD *)a1;
  }
  v8 = *(_QWORD *)(a1 + 104);
  v9 = sub_22E3CD3D4(a1 + 8, 80, 3);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *(_OWORD *)(v9 + 16) = v10;
  v11 = a3[1];
  *(_OWORD *)(v9 + 32) = *a3;
  *(_OWORD *)(v9 + 48) = v11;
  *(_QWORD *)(v9 + 64) = 0;
  result = sub_22E76C1A4((uint64_t *)(a2 + 16), (uint64_t *)(a2 + 24));
  *(_DWORD *)(v9 + 72) = result;
  v13 = v8 + 16 * (result & (v6 - 1));
  *(_QWORD *)(v9 + 64) = *(_QWORD *)(v13 + 8);
  ++*(_DWORD *)(v13 + 4);
  *(_QWORD *)(v13 + 8) = v9;
  return result;
}

uint64_t sub_22E7C9DFC(uint64_t a1, int a2)
{
  char *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v12;
  std::__shared_weak_count *v13;

  v4 = (char *)operator new(0x228uLL);
  *(_QWORD *)v4 = &unk_24FA715D0;
  *((_QWORD *)v4 + 1) = 0;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_OWORD *)(v4 + 168) = 0u;
  *(_OWORD *)(v4 + 184) = 0u;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *(_OWORD *)(v4 + 232) = 0u;
  *(_OWORD *)(v4 + 248) = 0u;
  *(_OWORD *)(v4 + 264) = 0u;
  *(_OWORD *)(v4 + 280) = 0u;
  *(_OWORD *)(v4 + 296) = 0u;
  *(_OWORD *)(v4 + 312) = 0u;
  *(_OWORD *)(v4 + 328) = 0u;
  *(_OWORD *)(v4 + 344) = 0u;
  *(_OWORD *)(v4 + 360) = 0u;
  *(_OWORD *)(v4 + 376) = 0u;
  *(_OWORD *)(v4 + 392) = 0u;
  *(_OWORD *)(v4 + 408) = 0u;
  *(_OWORD *)(v4 + 424) = 0u;
  *(_OWORD *)(v4 + 440) = 0u;
  *(_OWORD *)(v4 + 456) = 0u;
  *(_OWORD *)(v4 + 472) = 0u;
  *(_OWORD *)(v4 + 488) = 0u;
  *(_OWORD *)(v4 + 504) = 0u;
  *(_OWORD *)(v4 + 520) = 0u;
  *(_OWORD *)(v4 + 536) = 0u;
  if (a2)
    v5 = 4;
  else
    v5 = 3;
  *((_QWORD *)v4 + 5) = v5;
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = v4 + 40;
  *((_DWORD *)v4 + 9) = 32;
  *((_QWORD *)v4 + 6) = 255;
  if (a2)
  {
    *(_OWORD *)(v4 + 56) = xmmword_22F45FB00;
    v6 = 2;
  }
  else
  {
    v6 = 1;
  }
  *(_OWORD *)&v4[16 * v6 + 40] = xmmword_22F45E0D0;
  *((_DWORD *)v4 + 8) = v6 + 1;
  v12 = v4 + 24;
  v13 = (std::__shared_weak_count *)v4;
  v7 = sub_22E74761C(a1, (uint64_t)&v12);
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v7;
}

BOOL sub_22E7C9F48(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  _DWORD *v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  _DWORD *v17;
  unsigned int v18;
  unsigned int v20;
  unsigned int v21;

  v6 = sub_22F14FEA4((uint64_t *)a1);
  if (v6)
  {
    v7 = v6[2];
    if (v7)
    {
      if ((*(_WORD *)(v7 + 36) & 0x10) != 0)
        return 1;
    }
  }
  if (!a2)
    return 0;
  v8 = *(_DWORD *)(a1 + 8);
  if (!v8)
    return 1;
  v9 = *(_QWORD *)(a3 + 88);
  v10 = v8 & 0x7FFFFFFF;
  v11 = *(_DWORD *)(v9 + 304);
  v12 = v11 + 1;
  if (v11 + 1 > 1)
  {
    if ((v11 & 0x80000000) != 0)
    {
      v14 = -2 - v11;
      if (((*(_QWORD *)(*(_QWORD *)(v9 + 224) + 8 * ((-2 - v11) >> 6)) >> (-2 - v11)) & 1) != 0)
      {
        v13 = (_DWORD *)(*(_QWORD *)(v9 + 200) + 24 * v14);
      }
      else
      {
        v21 = *(_DWORD *)(v9 + 304);
        v20 = v11 + 1;
        v13 = (_DWORD *)sub_22F1E1134(*(_QWORD *)(a3 + 88), v14, 0);
        v12 = v20;
        v11 = v21;
      }
    }
    else
    {
      v13 = (_DWORD *)(*(_QWORD *)(v9 + 184) + 24 * v11);
    }
  }
  else
  {
    v13 = *(_DWORD **)(v9 + 184);
  }
  if ((*v13 & 0x7FFFFFFFu) > v10)
    goto LABEL_13;
  if (v11 == -2
    || (v12 != *(_DWORD *)(v9 + 192)
      ? ((v12 & 0x80000000) != 0
       ? ((v18 = -3 - v11,
           ((*(_QWORD *)(*(_QWORD *)(v9 + 224) + 8 * ((-3 - v11) >> 6)) >> (-3 - v11)) & 1) == 0)
        ? (v17 = (_DWORD *)sub_22F1E1134(v9, v18, 0))
        : (v17 = (_DWORD *)(*(_QWORD *)(v9 + 200) + 24 * v18)))
       : (v17 = (_DWORD *)(*(_QWORD *)(v9 + 184) + 24 * v12)),
         v16 = *v17 & 0x7FFFFFFF)
      : (v16 = *(_DWORD *)(v9 + 216)),
        v16 > v10))
  {
    v15 = *(_DWORD *)(v9 + 304);
  }
  else
  {
LABEL_13:
    v15 = sub_22F1E1EE8(v9, v10);
  }
  return v15 == *(_DWORD *)(a3 + 2264);
}

_DWORD *sub_22E7CA0D0(_DWORD *result, uint64_t a2, uint64_t a3)
{
  _DWORD *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;

  v8 = a2;
  if (a2)
  {
    v4 = result;
    result = (_DWORD *)sub_22E7D30BC((uint64_t)(result + 88), &v8);
    v5 = *result;
    if (!*result)
    {
      v5 = v4[87];
      v4[87] = v5 + 1;
      *result = v5;
    }
    v6 = v5;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_DWORD *)(a3 + 8);
  if (v7 >= *(_DWORD *)(a3 + 12))
  {
    result = (_DWORD *)llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v7) = v6;
  ++*(_DWORD *)(a3 + 8);
  return result;
}

uint64_t sub_22E7CA170(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  BOOL v9;
  uint64_t result;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;

  sub_22E7C9A94((uint64_t)a1, *(_DWORD *)a2, a3);
  v6 = *(unsigned int *)(a2 + 4);
  v7 = *(_DWORD *)(a3 + 8);
  if (v7 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v7) = v6;
  ++*(_DWORD *)(a3 + 8);
  v8 = *(unsigned __int16 *)(a2 + 16);
  if ((v8 - 7) < 6 || ((v8 - 13) >= 6 ? (v9 = v8 == 1) : (v9 = 1), v9))
    v16 = 0;
  else
    v16 = *(_QWORD *)(a2 + 8);
  result = (uint64_t)sub_22E7CA0D0(a1, v16, a3);
  v11 = *(unsigned __int16 *)(a2 + 16);
  v12 = *(_DWORD *)(a3 + 8);
  if (v12 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v12 = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v12) = v11;
  v13 = *(_DWORD *)(a3 + 12);
  v14 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v14;
  v15 = *(unsigned __int16 *)(a2 + 18);
  if (v14 >= v13)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v14 = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v14) = v15;
  ++*(_DWORD *)(a3 + 8);
  return result;
}

uint64_t sub_22E7CA298(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  _QWORD v17[2];
  uint64_t v18;

  v2 = a2;
  v18 = a2;
  if (a2)
  {
    v17[0] = 0;
    v4 = sub_22E7EE148(*(_QWORD *)(a1 + 1600), *(_DWORD *)(a1 + 1616), a2, v17);
    v5 = v17[0];
    if ((v4 & 1) == 0)
      v5 = *(_QWORD *)(a1 + 1600) + 16 * *(unsigned int *)(a1 + 1616);
    if (v5 == *(_QWORD *)(a1 + 1600) + 16 * *(unsigned int *)(a1 + 1616))
    {
      v7 = a1 + 1600;
      do
      {
        v8 = v2;
        v2 = *(_QWORD *)(v2 + 32);
      }
      while (v2);
      if (v8 == *(_QWORD *)(a1 + 64))
        goto LABEL_10;
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 2000);
      if ((*(_QWORD *)(v9 + 20) & 0x1000000000000) != 0)
        return 0;
      v10 = v9 + 496;
      v11 = *(_BYTE *)(v9 + 519);
      v12 = v11 < 0;
      v14 = *(_QWORD *)(v9 + 496);
      v13 = *(_QWORD *)(v9 + 504);
      if (v11 < 0)
        v10 = v14;
      v15 = v11 & 0x7F;
      if (!v12)
        v13 = v15;
      v17[0] = v10;
      v17[1] = v13;
      v16 = sub_22F1D8D08(v8, (uint64_t)v17, 1);
      v7 = a1 + 1600;
      if (v16)
      {
LABEL_10:
        v2 = *(unsigned int *)(a1 + 556);
        *(_DWORD *)(a1 + 556) = v2 + 1;
        *((_DWORD *)sub_22F2D2BB8(v7, &v18) + 2) = v2;
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return *(unsigned int *)(v5 + 8);
    }
  }
  return v2;
}

uint64_t sub_22E7CA398(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  int v3;
  uint64_t v4;

  v1 = *(uint64_t **)(a1 + 200);
  v2 = *(uint64_t **)(a1 + 208);
  if (v1 == v2)
    return 1;
  v3 = 0;
  do
  {
    v4 = *v1++;
    v3 += sub_22E7CA398(v4);
  }
  while (v1 != v2);
  return (v3 + 1);
}

uint64_t sub_22E7CA3E8(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  _QWORD *v4;
  int v5;
  __n128 v6;
  unint64_t v7;

  v7 = a2;
  if (!a2)
    return 0;
  if ((*(_BYTE *)(a2 + 29) & 0x80) != 0)
    return *(unsigned int *)(a2 - 4);
  v4 = sub_22E4D1AD8((uint64_t *)(a1 + 208), &v7);
  result = *((unsigned int *)v4 + 2);
  if (!(_DWORD)result)
  {
    if (!*(_BYTE *)(a1 + 122))
    {
      v5 = *(_DWORD *)(a1 + 204);
      *(_DWORD *)(a1 + 204) = v5 + 1;
      *((_DWORD *)v4 + 2) = v5;
      v6.n128_u64[0] = v7;
      v6.n128_u8[8] = 0;
      sub_22E7F1A00((_QWORD *)(a1 + 152), &v6);
      return *((unsigned int *)v4 + 2);
    }
    return 0;
  }
  return result;
}

uint64_t sub_22E7CA478(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;

  v27 = a2;
  result = (uint64_t)sub_22F2D0D74(*(_DWORD **)a1, &v27);
  v7 = result;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(unsigned int *)(result + 8);
  v10 = *(_DWORD *)(v8 + 8);
  if (v10 >= *(_DWORD *)(v8 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = *(_DWORD *)(v8 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v8 + 8 * v10) = v9;
  ++*(_DWORD *)(v8 + 8);
  if (!*(_DWORD *)(v7 + 8))
  {
    result = *(_QWORD *)(a1 + 8);
    v11 = *(int **)(a1 + 16);
    v12 = *v11 + 1;
    *v11 = v12;
    *(_DWORD *)(v7 + 8) = v12;
    v13 = *(unsigned int *)(result + 8);
    if (v13 >= *(_DWORD *)(result + 12))
    {
      result = sub_22F27B40C(result);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)result + 8 * v13) = 0;
      *(_DWORD *)(result + 8) = v13 + 1;
    }
    v14 = *(unsigned int *)(a2 + 16);
    v15 = *(_QWORD *)a2 + 8 * v14;
    if (*(_DWORD *)(a2 + 8))
    {
      if ((_DWORD)v14)
      {
        v16 = 8 * v14;
        v17 = *(unsigned int **)a2;
        while (*v17 >= 0xFFFFFFFE)
        {
          v17 += 2;
          v16 -= 8;
          if (!v16)
            goto LABEL_11;
        }
      }
      else
      {
        v17 = *(unsigned int **)a2;
      }
    }
    else
    {
LABEL_11:
      v17 = (unsigned int *)(*(_QWORD *)a2 + 8 * v14);
    }
    v18 = *(_QWORD *)a2 + 8 * v14;
    while (v17 != (unsigned int *)v18)
    {
      if ((v17[1] & 0x10) != 0 || a3)
      {
        v19 = *(_QWORD *)(a1 + 8);
        v20 = *v17;
        v21 = *(unsigned int *)(v19 + 8);
        if (v21 >= *(unsigned int *)(v19 + 12))
        {
          result = llvm::SmallVectorBase<unsigned int>::grow_pod();
          v21 = *(unsigned int *)(v19 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v19 + 8 * v21) = v20;
        ++*(_DWORD *)(v19 + 8);
        v22 = *(_QWORD *)(a1 + 8);
        v23 = *((unsigned __int8 *)v17 + 4);
        v24 = *(unsigned int *)(v22 + 8);
        if (v24 >= *(unsigned int *)(v22 + 12))
        {
          result = llvm::SmallVectorBase<unsigned int>::grow_pod();
          v24 = *(unsigned int *)(v22 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v22 + 8 * v24) = v23 & 0x27 | (((v23 >> 4) & 1) << 6) & 0xFFFFFF7F | (((v23 >> 3) & 1) << 7) | (v23 >> 2) & 0x10 | (v23 >> 4) & 8;
        ++*(_DWORD *)(v22 + 8);
      }
      v25 = v17 + 2;
      while (v25 != (unsigned int *)v15)
      {
        v26 = *v25;
        v25 += 2;
        if (v26 <= 0xFFFFFFFD)
        {
          v17 = v25 - 2;
          goto LABEL_26;
        }
      }
      v17 = (unsigned int *)v15;
LABEL_26:
      ;
    }
    *(_QWORD *)(**(_QWORD **)(a1 + 8) + 8 * v13) = ((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 8) + 8) - v13) >> 1;
  }
  return result;
}

uint64_t sub_22E7CA6B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t i;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[65];

  v21[64] = *MEMORY[0x24BDAC8D0];
  if ((*(_WORD *)(a3 + 8) & 0x80) != 0)
    sub_22EFCC320(a3);
  if (!*(_QWORD *)(a3 + 16))
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD **)(v5 + 8);
  v7 = *(_QWORD *)(*(_QWORD *)v5 + 8);
  if (v6)
    v8 = (*(uint64_t (**)(_QWORD))(*v6 + 80))(*(_QWORD *)(v5 + 8)) + v6[4] - v6[2];
  else
    v8 = 0;
  v9 = *(unsigned int *)(v5 + 24);
  v19 = v21;
  v20 = 0x8000000000;
  if ((*(_BYTE *)(a3 + 8) & 0x80) != 0)
  {
    sub_22EFCC320(a3);
    v10 = v20;
  }
  else
  {
    v10 = 0;
  }
  v12 = v8 + v7;
  for (i = *(_QWORD *)(a3 + 16); i; i = *(_QWORD *)(i + 8) & 0xFFFFFFFFFFFFFFF8)
  {
    v14 = *(_DWORD *)(i + 28);
    if (v10 >= HIDWORD(v20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v10 = v20;
    }
    *((_DWORD *)v19 + v10) = v14 & 0x7F;
    LODWORD(v20) = v20 + 1;
    v15 = sub_22E7CA3E8(a1, i);
    v16 = v20;
    if (v20 >= (unint64_t)HIDWORD(v20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v16 = v20;
    }
    *((_DWORD *)v19 + v16) = v15;
    v10 = v20 + 1;
    LODWORD(v20) = v20 + 1;
  }
  v11 = v9 + 8 * v12;
  ++*(_DWORD *)(a1 + 1592);
  v18 = 80;
  sub_22E74241C(*(llvm::raw_ostream **)(a1 + 16), *(_DWORD *)(a1 + 1828), (uint64_t)&v18, 1, (char *)v19, 4 * v10, 0);
  if (v19 != v21)
    free(v19);
  return v11;
}

uint64_t sub_22E7CA8AC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;

  v5 = HIDWORD(a2);
  sub_22E7C9A94(a1, a2, a3);
  return sub_22E7C9A94(a1, v5, a3);
}

