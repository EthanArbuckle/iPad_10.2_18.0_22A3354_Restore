BOOL sub_22E474EBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v2 = *(_QWORD *)v1;
  v3 = *(unsigned int *)(v1 + 8);
  v4 = *(_QWORD *)v1 + 8 * v3;
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    while (*(_WORD *)(*(_QWORD *)v2 + 32) != 222)
    {
      v2 += 8;
      v5 -= 8;
      if (!v5)
      {
        v2 = v4;
        return v2 != v4;
      }
    }
  }
  return v2 != v4;
}

uint64_t sub_22E474F1C(uint64_t a1, llvm::LLVMContext *a2, uint64_t FPCast)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[4];
  __int16 v15;
  const char *v16;
  __int16 v17;

  v5 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 144) + 280), a2);
  if (*(_QWORD *)FPCast != v5)
  {
    if (*(_BYTE *)(v5 + 8) == 13)
    {
      v16 = "arg.unpromote";
      v17 = 259;
      return sub_22E3C1740((uint64_t *)(a1 + 272), 38, FPCast, v5, (uint64_t)&v16);
    }
    else
    {
      v14[0] = "arg.unpromote";
      v15 = 259;
      if (*(unsigned __int8 *)(FPCast + 16) <= 0x14u)
      {
        FPCast = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 344) + 256))(*(_QWORD *)(a1 + 344), FPCast, v5);
        if (FPCast)
          v9 = *(unsigned __int8 *)(FPCast + 16) >= 0x1Cu;
        else
          v9 = 0;
        if (v9)
        {
          (*(void (**)(_QWORD, uint64_t, _QWORD *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 352) + 16))(*(_QWORD *)(a1 + 352), FPCast, v14, *(_QWORD *)(a1 + 320), *(_QWORD *)(a1 + 328));
          v10 = *(unsigned int *)(a1 + 280);
          if ((_DWORD)v10)
          {
            v12 = *(_QWORD *)(a1 + 272);
            v13 = v12 + 16 * v10;
            do
            {
              llvm::Instruction::setMetadata();
              v12 += 16;
            }
            while (v12 != v13);
          }
        }
      }
      else
      {
        v17 = 257;
        FPCast = llvm::CastInst::CreateFPCast();
        (*(void (**)(_QWORD, uint64_t, _QWORD *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 352) + 16))(*(_QWORD *)(a1 + 352), FPCast, v14, *(_QWORD *)(a1 + 320), *(_QWORD *)(a1 + 328));
        v6 = *(unsigned int *)(a1 + 280);
        if ((_DWORD)v6)
        {
          v7 = *(_QWORD *)(a1 + 272);
          v8 = v7 + 16 * v6;
          do
          {
            llvm::Instruction::setMetadata();
            v7 += 16;
          }
          while (v7 != v8);
        }
      }
    }
  }
  return FPCast;
}

uint64_t sub_22E4750AC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  uint64_t v25;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                          + 16);
  v5 = v4 > 0x27;
  v6 = (1 << v4) & 0x8100000400;
  if (v5 || v6 == 0)
    return 0;
  if (!a2 || (*(_BYTE *)(a2 + 29) & 1) == 0)
    goto LABEL_15;
  sub_22EFC8E88(a2);
  v11 = *(uint64_t **)v10;
  v12 = *(unsigned int *)(v10 + 8);
  v13 = *(uint64_t **)v10;
  if ((_DWORD)v12)
  {
    v14 = 8 * v12;
    v13 = *(uint64_t **)v10;
    while (*(_WORD *)(*v13 + 32) != 81)
    {
      ++v13;
      v14 -= 8;
      if (!v14)
        goto LABEL_15;
    }
  }
  if (v13 == &v11[v12])
  {
LABEL_15:
    if (a1)
    {
      v17 = (uint64_t *)sub_22E47E5E0(a1);
      while (1)
      {
        v19 = v17;
        if (v17 >= v18)
        {
          if (v17 == v18)
            return 0;
          v20 = v18;
          while (*(_WORD *)(*v20 + 32) != 81)
          {
            if (++v20 == v17)
              return 0;
          }
          v19 = v17;
        }
        else
        {
          while (*(_WORD *)(*v19 + 32) != 81)
          {
            if (++v19 == v18)
              return 0;
          }
          v20 = v18;
        }
        if (v19 == v20)
          break;
        do
        {
          v21 = *v17++;
          v15 = v21;
        }
        while (*(_WORD *)(v21 + 32) != 81);
        v22 = *(unsigned int *)(v15 + 36);
        if ((_DWORD)v22)
        {
          v23 = *(_DWORD **)(v15 + 40);
          v24 = &v23[v22];
          v25 = 4 * v22;
          while ((*v23 & 0x3FFFFFFF) + ((2 * *v23) >> 31) - 1 != a4)
          {
            ++v23;
            v25 -= 4;
            if (!v25)
            {
              v23 = v24;
              break;
            }
          }
          if (v24 == v23)
            continue;
        }
        return v15;
      }
    }
    return 0;
  }
  do
  {
    v16 = *v11++;
    v15 = v16;
  }
  while (*(_WORD *)(v16 + 32) != 81);
  return v15;
}

BOOL sub_22E475248(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 426)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E4752A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 415)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E475308(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 39 <= 1)
  {
    v2 = *(_QWORD *)((sub_22F10ACF8(a1) & 0xFFFFFFFFFFFFFFF0) + 8);
    if ((v2 & 8) != 0 && (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) == 0x6800)
      return 1;
  }
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 39 <= 1)
  {
    v3 = *(_QWORD *)((sub_22F10ACF8(a1) & 0xFFFFFFFFFFFFFFF0) + 8);
    if ((v3 & 8) != 0 && (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) == 0x5800)
      return 1;
  }
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 39 <= 1)
  {
    v5 = *(_QWORD *)((sub_22F10ACF8(a1) & 0xFFFFFFFFFFFFFFF0) + 8);
    if ((v5 & 8) != 0)
      return (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) == 24576;
  }
  return 0;
}

__n128 sub_22E475408(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  uint64_t v6;
  __int128 v7;
  __n128 result;
  uint64_t *v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19[3];
  _OWORD v20[3];
  _BYTE v21[32];
  __int16 v22;
  __int128 v23[3];
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v6 = *(unsigned int *)(a4 + 16);
  if ((_DWORD)v6)
  {
    v10 = (uint64_t *)(a2 + 272);
    v11 = a3[1];
    v23[0] = *a3;
    v23[1] = v11;
    v23[2] = a3[2];
    v12 = *(_QWORD *)(a2 + 8);
    v22 = 257;
    sub_22E3BEE6C((uint64_t *)(a2 + 272), v23, v12, (uint64_t)v21, (uint64_t)&v24);
    v13 = v25;
    *a3 = v24;
    a3[1] = v13;
    a3[2] = v26;
    v14 = a3[1];
    v20[0] = *a3;
    v20[1] = v14;
    v20[2] = a3[2];
    v22 = 257;
    sub_22F24D74C(v10, (uint64_t)v20, v6, (uint64_t)v21, (uint64_t)&v24);
    v15 = v25;
    *a3 = v24;
    a3[1] = v15;
    a3[2] = v26;
    v16 = a3[1];
    v19[0] = *a3;
    v19[1] = v16;
    v19[2] = a3[2];
    v17 = *(_QWORD *)a4;
    v22 = 257;
    sub_22E3BEE6C(v10, v19, v17, (uint64_t)v21, (uint64_t)&v24);
    v18 = v25;
    *a3 = v24;
    a3[1] = v18;
    a3[2] = v26;
  }
  v7 = a3[1];
  *(_OWORD *)a1 = *a3;
  *(_OWORD *)(a1 + 16) = v7;
  result = (__n128)a3[2];
  *(__n128 *)(a1 + 32) = result;
  return result;
}

unint64_t sub_22E475524(llvm::DataLayout *a1, llvm::Type *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t ABITypeAlignment;

  sub_22E3C304C((uint64_t)a1, (uint64_t)a2);
  v5 = (unint64_t)(v4 + 7) >> 3;
  ABITypeAlignment = llvm::DataLayout::getABITypeAlignment(a1, a2);
  return (ABITypeAlignment + v5 - 1) / ABITypeAlignment * ABITypeAlignment;
}

uint64_t sub_22E475580(uint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  llvm::DataLayout *DataLayout;
  uint64_t v11;
  unint64_t v12;
  unint64_t ABITypeAlignment;
  unint64_t v14;
  int v15;
  __int128 v16;
  __int128 v17;
  int v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t *v22;
  __int128 v23;
  _OWORD *v24;
  __int128 v25;
  llvm::DataLayout *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int64_t v30;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t *v35;
  __int128 v36;
  _OWORD v37[3];
  _OWORD v38[3];
  uint64_t v39[4];
  __int16 v40;
  __int128 v41[3];
  _OWORD v42[3];
  _OWORD v43[3];
  _OWORD v44[3];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _OWORD v48[3];

  v8 = (unsigned __int8 *)*a1;
  v9 = *(unsigned __int8 **)(a2 + 8);
  if ((unsigned __int8 *)*a1 == v9)
  {
    v22 = a4 + 34;
    v25 = *(_OWORD *)(a2 + 16);
    v48[0] = *(_OWORD *)a2;
    v48[1] = v25;
    v48[2] = *(_OWORD *)(a2 + 32);
    v24 = v48;
    v21 = (uint64_t)a1;
    return sub_22E3BEDDC(v22, v21, v24, a3);
  }
  DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(a4[18] + 200));
  sub_22E3C304C((uint64_t)DataLayout, (uint64_t)v8);
  v12 = (unint64_t)(v11 + 7) >> 3;
  ABITypeAlignment = llvm::DataLayout::getABITypeAlignment(DataLayout, (llvm::Type *)v8);
  v14 = (ABITypeAlignment + v12 - 1) / ABITypeAlignment * ABITypeAlignment;
  v15 = v9[8];
  if (v9 && v15 == 16)
  {
    v16 = *(_OWORD *)(a2 + 16);
    v44[0] = *(_OWORD *)a2;
    v44[1] = v16;
    v44[2] = *(_OWORD *)(a2 + 32);
    sub_22E47E638((uint64_t)&v45, (uint64_t)v44, (uint64_t)v9, v14, (uint64_t)a4);
    v17 = v46;
    *(_OWORD *)a2 = v45;
    *(_OWORD *)(a2 + 16) = v17;
    *(_OWORD *)(a2 + 32) = v47;
    v9 = *(unsigned __int8 **)(a2 + 8);
    v15 = v9[8];
  }
  v18 = v8[8];
  if (v18 == 15)
    v19 = v8;
  else
    v19 = 0;
  if (v15 == 15)
    v20 = v9;
  else
    v20 = 0;
  if (v19 && v20 && (*((_DWORD *)v20 + 2) ^ *((_DWORD *)v19 + 2)) >= 0x100)
  {
    v35 = a4 + 34;
    LOWORD(v47) = 257;
    v21 = sub_22E3C1338(v35, (uint64_t)a1, (uint64_t)v9, (uint64_t)&v45);
    v36 = *(_OWORD *)(a2 + 16);
    v43[0] = *(_OWORD *)a2;
    v43[1] = v36;
    v43[2] = *(_OWORD *)(a2 + 32);
    v24 = v43;
    v22 = v35;
    return sub_22E3BEDDC(v22, v21, v24, a3);
  }
  if ((v18 | 2) == 0xF && (v15 | 2) == 0xF)
  {
    v21 = sub_22E47E7A0(a1, (uint64_t)v9, a4);
    v22 = a4 + 34;
    v23 = *(_OWORD *)(a2 + 16);
    v42[0] = *(_OWORD *)a2;
    v42[1] = v23;
    v42[2] = *(_OWORD *)(a2 + 32);
    v24 = v42;
    return sub_22E3BEDDC(v22, v21, v24, a3);
  }
  v26 = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(a4[18] + 200));
  sub_22E3C304C((uint64_t)v26, (uint64_t)v9);
  v28 = v27;
  v29 = llvm::DataLayout::getABITypeAlignment(v26, (llvm::Type *)v9);
  if (v8[8] == 19 || v9[8] == 19 || v14 <= (v29 + ((unint64_t)(v28 + 7) >> 3) - 1) / v29 * v29)
  {
    v32 = *(_OWORD *)(a2 + 16);
    v41[0] = *(_OWORD *)a2;
    v41[1] = v32;
    v41[2] = *(_OWORD *)(a2 + 32);
    v40 = 257;
    sub_22E3BEE6C(a4 + 34, v41, (uint64_t)v8, (uint64_t)v39, (uint64_t)&v45);
    v33 = v46;
    *(_OWORD *)a2 = v45;
    *(_OWORD *)(a2 + 16) = v33;
    *(_OWORD *)(a2 + 32) = v47;
    v34 = *(_OWORD *)(a2 + 16);
    v38[0] = *(_OWORD *)a2;
    v38[1] = v34;
    v38[2] = *(_OWORD *)(a2 + 32);
    return sub_22E46F0D4((uint64_t)a4, (uint64_t)a1, v38, a3);
  }
  else
  {
    v30 = *(_QWORD *)(a2 + 16);
    v39[0] = (uint64_t)"tmp";
    v40 = 259;
    sub_22E47EA10((uint64_t)&v45, (uint64_t)a4, (llvm::Type *)v8, v30, v39);
    v37[0] = v45;
    v37[1] = v46;
    v37[2] = v47;
    sub_22E3BEDDC(a4 + 34, a1, v37, 0);
    if ((*(_BYTE *)(a2 + 24) & 3) != 0)
      sub_22F28ABCC(a2, a4);
    if ((BYTE8(v46) & 3) != 0)
      sub_22F28ABCC(&v45, a4);
    llvm::ConstantInt::get();
    return llvm::IRBuilderBase::CreateMemTransferInst();
  }
}

void sub_22E475914(uint64_t a1, uint64_t a2, int a3, _QWORD *a4)
{
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  char *v27;
  char v28;
  unint64_t *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  BOOL v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  _QWORD *v43;
  void *v44;
  uint64_t v45;
  _QWORD v46[10];

  v46[8] = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a1 + 144);
  v9 = sub_22EF5CDF0(v8, *(_QWORD *)(*(_QWORD *)(v8 + 16408) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_22F114198(*(_QWORD *)(a2 + 24));
  v11 = sub_22EFC3500(v10);
  v12 = sub_22F0C975C(v8, v11);
  v13 = sub_22E66DD94(a1 + 280, v11);
  v14 = sub_22EFC3B90(v11);
  if (v14)
  {
    v15 = v14;
    v16 = 0;
    v17 = v13 + 40;
    v18 = ~(-1 << v9);
LABEL_3:
    if (((*(_BYTE *)(v15 + 68) & 1) == 0 || *(_QWORD *)(v15 + 40)) && !sub_22EFC2F84(v15, v8))
    {
      v19 = *(_QWORD *)(v15 + 48);
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) != 4)
      {
        if ((*(_BYTE *)(v15 + 68) & 1) != 0)
        {
          v42 = a3;
          v43 = a4;
          v20 = v15;
          if ((*(_BYTE *)(v15 + 29) & 0x80) != 0)
            v20 = sub_22EFB5D7C(v15);
          v41 = v17;
          v21 = (_DWORD *)sub_22E47ED6C(v17, v20);
          v39 = v21[4];
          v22 = v21[2];
          v23 = (unsigned __int16)v22;
          v24 = v21[3] / v9;
          v40 = *(unsigned __int8 *)llvm::Module::getDataLayout(*(llvm::Module **)(a1 + 200));
          v44 = v46;
          v45 = 0x800000000;
          sub_22E47EDD0((uint64_t)&v44, v24, 0);
          if ((unsigned __int16)v22 >= v9)
          {
            v25 = (unsigned __int16)v22 / v9;
            v23 = (unsigned __int16)v22 % v9;
          }
          else
          {
            v25 = 0;
          }
          v26 = HIWORD(v22) & 0x7FFF;
          v27 = (char *)v44;
          a3 = v42;
          if (v23 + v26 >= v9)
          {
            v28 = 0;
            *((_QWORD *)v44 + v25++) |= (v18 << v23) & v18;
            v26 = v26 - v9 + v23;
          }
          else
          {
            v28 = v23;
          }
          a4 = v43;
          v17 = v41;
          if (v26 >= v9)
          {
            v29 = (unint64_t *)&v27[8 * v25];
            do
            {
              *v29++ = v18;
              v26 -= v9;
              ++v25;
            }
            while (v26 >= v9);
          }
          if (v26 >= 1)
            *(_QWORD *)&v27[8 * v25] |= v18 >> (v9 - v26) << v28;
          v30 = v45;
          if (v40)
          {
            if ((_DWORD)v45)
            {
              v31 = &v27[8 * v45 - 8];
              if (v27 < v31)
              {
                v32 = v27 + 8;
                do
                {
                  v33 = *((_QWORD *)v32 - 1);
                  *((_QWORD *)v32 - 1) = *(_QWORD *)v31;
                  *(_QWORD *)v31 = v33;
                  v31 -= 8;
                  v34 = v32 >= v31;
                  v32 += 8;
                }
                while (!v34);
              }
            }
          }
          if ((_DWORD)v30)
          {
            v35 = (_QWORD *)(*v43 + 8 * (v39 + v42));
            v36 = 8 * v30;
            v37 = v27;
            do
            {
              v38 = *(_QWORD *)v37;
              v37 += 8;
              *v35++ |= v38;
              v36 -= 8;
            }
            while (v36);
          }
          if (v27 != (char *)v46)
            free(v27);
        }
        else
        {
          sub_22E47EB2C(a1, v19, (*(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * v16) / (unint64_t)v9) + a3, a4);
        }
      }
    }
    while (1)
    {
      v15 = *(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v15)
        break;
      if ((*(_DWORD *)(v15 + 28) & 0x7Fu) - 49 <= 2)
      {
        ++v16;
        goto LABEL_3;
      }
    }
  }
}

uint64_t sub_22E475C50(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned __int8 **v11;
  unsigned __int8 *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  llvm::Instruction *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  int v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  llvm::LLVMContext *v34;
  uint64_t v35;
  llvm::GetElementPtrInst *v36;
  llvm::Type *v37;
  unint64_t v38;
  unsigned __int8 *v39;
  __int128 v40;
  uint64_t v41;
  uint64_t i;
  uint64_t v43;
  uint64_t v44;
  __int128 *v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  llvm::Constant **v76;
  uint64_t v77;
  llvm::Constant *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t *v92;
  _QWORD *v93;
  _QWORD *v94;
  __int128 v95;
  llvm::Constant **v96;
  llvm::Type *v97;
  uint64_t NullValue;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  llvm::Type *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  llvm::BasicBlock *v108;
  llvm::BasicBlock *SinglePredecessor;
  uint64_t v110;
  llvm::Instruction *v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _BYTE *v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  uint64_t v135;
  llvm::Instruction **v136;
  uint64_t v137;
  llvm::Instruction *v138;
  unsigned int v139;
  uint64_t v140;
  unint64_t v141;
  int v142;
  unint64_t j;
  uint64_t v144;
  _OWORD v145[3];
  _OWORD v146[3];
  __int128 v147[3];
  _BYTE v148[48];
  __int128 v149[3];
  _OWORD v150[3];
  _OWORD v151[8];
  uint64_t v152;
  _OWORD v153[3];
  _OWORD v154[8];
  uint64_t v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  uint64_t v164;
  uint64_t v165;
  _BYTE v166[32];
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  _BYTE v171[40];
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  uint64_t v180;
  llvm::Type **v181[4];

  v181[1] = *(llvm::Type ***)MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 11) & 2) != 0)
    return sub_22F260104(a1, a4);
  v8 = *(_QWORD *)(a1 + 1600);
  if (v8 && sub_22E474EBC(v8))
    return sub_22F24866C(a1 + 272);
  if (!*(_QWORD *)(a1 + 1736))
    return sub_22E3CF118((uint64_t *)(a1 + 272));
  v165 = 0;
  v9 = a1 + 1736;
  v10 = *(_QWORD *)(a2 + 40);
  v11 = (unsigned __int8 **)(a2 + 48);
  switch(*(_BYTE *)(a2 + 72))
  {
    case 0:
    case 1:
      v12 = *v11;
      if (v12 != (unsigned __int8 *)sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 144) + 280), *(llvm::LLVMContext **)(a2 + 40))|| *(_DWORD *)(a2 + 64))
      {
        v13 = *(_OWORD *)(a1 + 1752);
        v149[0] = *(_OWORD *)v9;
        v149[1] = v13;
        v149[2] = *(_OWORD *)(a1 + 1768);
        sub_22E475408((uint64_t)v148, a1, v149, a2 + 48);
        v14 = sub_22E476E40((uint64_t)v148, *v11, a1);
        goto LABEL_9;
      }
      v66 = *(_QWORD *)v9;
      v67 = *(_QWORD *)(*(_QWORD *)v9 + 8);
      if (v67 && !*(_QWORD *)(v67 + 8))
      {
        v72 = *(_QWORD **)(v67 + 24);
        if (v72 && *((_BYTE *)v72 + 16) == 61 && *(v72 - 4) == v66 && *(_QWORD *)*(v72 - 8) == *(_QWORD *)(a1 + 1744))
        {
          v108 = (llvm::BasicBlock *)v72[5];
          SinglePredecessor = *(llvm::BasicBlock **)(a1 + 320);
          while (SinglePredecessor != v108)
          {
            SinglePredecessor = (llvm::BasicBlock *)llvm::BasicBlock::getSinglePredecessor(SinglePredecessor);
            if (!SinglePredecessor)
              goto LABEL_162;
          }
          goto LABEL_173;
        }
LABEL_162:
        v126 = *(_OWORD *)(a1 + 1752);
        v150[0] = *(_OWORD *)v9;
        v150[1] = v126;
        v150[2] = *(_OWORD *)(a1 + 1768);
        LOWORD(v174) = 257;
        v14 = sub_22E3C2A7C((uint64_t *)(a1 + 272), (uint64_t)v150, (uint64_t)&v172);
LABEL_9:
        v15 = v14;
        goto LABEL_10;
      }
      v68 = *(_QWORD *)(a1 + 320);
      v71 = *(_QWORD **)(v68 + 40);
      v69 = (_QWORD *)(v68 + 40);
      v70 = v71;
      break;
    case 2:
      v24 = *(_QWORD *)(a1 + 1624);
      if ((*(_WORD *)(v24 + 18) & 1) != 0)
        llvm::Function::BuildLazyArguments(*(llvm::Function **)(a1 + 1624));
      v25 = *(_QWORD *)(v24 + 88) + 40 * (((unint64_t)*(unsigned __int16 *)(a2 + 73) >> 5) & 1);
      v26 = sub_22E619D68(v10);
      if (v26)
      {
        if (v26 == 1)
        {
          v27 = *(_OWORD *)(a1 + 1752);
          *(_OWORD *)v166 = *(_OWORD *)v9;
          *(_OWORD *)&v166[16] = v27;
          v167 = *(_OWORD *)(a1 + 1768);
          sub_22E6281E0(*(_QWORD **)(a1 + 144), v10, (uint64_t)v171);
          v172 = *(_OWORD *)v166;
          v173 = *(_OWORD *)&v166[16];
          v174 = v167;
          v28 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
          v168 = *(_OWORD *)v171;
          v169 = *(_OWORD *)&v171[16];
          *(_QWORD *)&v170 = *(_QWORD *)&v171[32];
          LODWORD(v158) = 0;
          *((_QWORD *)&v156 + 1) = 0;
          v157 = 0uLL;
          *(_QWORD *)&v159 = 0;
          *((_QWORD *)&v158 + 1) = 0;
          v160 = 0uLL;
          *(_QWORD *)((char *)&v161 + 4) = 2;
          LODWORD(v156) = 0;
          v162 = 0u;
          v163 = 0u;
          sub_22E3C113C((uint64_t)&v156, &v172, v10, 2, &v168, v28);
          v177 = v161;
          v178 = v162;
          v179 = v163;
          v173 = v157;
          v174 = v158;
          v175 = v159;
          v176 = v160;
          *(_QWORD *)v166 = a1;
          *(_QWORD *)&v166[8] = a1 + 272;
          *(_WORD *)&v166[16] = 0;
          v180 = v164;
          v172 = v156;
          v29 = sub_22E5027E0((uint64_t)v166, (uint64_t)&v172, a4);
          v31 = v30;
          sub_22E619C24(v25, v10, 0, 1, a1, (uint64_t)v154);
          v177 = v154[5];
          v178 = v154[6];
          v179 = v154[7];
          v173 = v154[1];
          v174 = v154[2];
          v175 = v154[3];
          v176 = v154[4];
          *(_QWORD *)v166 = a1;
          *(_QWORD *)&v166[8] = a1 + 272;
          *(_WORD *)&v166[16] = 0;
          v180 = v155;
          v172 = v154[0];
          sub_22E5025C8((uint64_t *)v166, v29, v31, (uint64_t)&v172, 1);
        }
      }
      else
      {
        LODWORD(v181[0]) = 2;
        *(_DWORD *)v171 = 0;
        memset(&v171[8], 0, 32);
        v50 = sub_22E62D754(*(_QWORD **)(a1 + 144), v10, v181, (uint64_t)v171, 0);
        v51 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 144) + 280), (llvm::LLVMContext *)v10);
        v52 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
        v168 = *(_OWORD *)v171;
        v169 = *(_OWORD *)&v171[16];
        *(_QWORD *)&v170 = *(_QWORD *)&v171[32];
        v173 = 0uLL;
        *((_QWORD *)&v172 + 1) = 0;
        LODWORD(v174) = 0;
        *((_QWORD *)&v174 + 1) = 0;
        *(_QWORD *)&v175 = 0;
        v176 = 0uLL;
        *(_QWORD *)((char *)&v177 + 4) = 2;
        LODWORD(v172) = 0;
        v179 = 0u;
        v178 = 0u;
        *(_QWORD *)v166 = v25;
        *(_QWORD *)&v166[8] = v51;
        *(_QWORD *)&v166[16] = v50;
        *(_DWORD *)&v166[24] = 0;
        v167 = 0uLL;
        sub_22E3C113C((uint64_t)&v172, (__int128 *)v166, v10, (int)v181[0], &v168, v52);
        v53 = *(_OWORD *)(a1 + 1752);
        v153[0] = *(_OWORD *)v9;
        v153[1] = v53;
        v153[2] = *(_OWORD *)(a1 + 1768);
        LOWORD(v167) = 257;
        v54 = sub_22E3C2A7C((uint64_t *)(a1 + 272), (uint64_t)v153, (uint64_t)v166);
        v151[6] = v178;
        v151[7] = v179;
        v152 = v180;
        v151[2] = v174;
        v151[3] = v175;
        v151[4] = v176;
        v151[5] = v177;
        v151[0] = v172;
        v151[1] = v173;
        sub_22E4E87FC(a1, v54, v151, 1);
      }
      goto LABEL_102;
    case 6:
      v141 = *(_QWORD *)(a2 + 40);
      v39 = *v11;
      *(_QWORD *)&v172 = &v173;
      *((_QWORD *)&v172 + 1) = 0x400000000;
      v40 = *(_OWORD *)(a1 + 1752);
      v147[0] = *(_OWORD *)v9;
      v147[1] = v40;
      v147[2] = *(_OWORD *)(a1 + 1768);
      LOWORD(v170) = 257;
      sub_22E3BEE6C((uint64_t *)(a1 + 272), v147, (uint64_t)v39, (uint64_t)&v168, (uint64_t)v166);
      v41 = *((unsigned int *)v39 + 3);
      if ((_DWORD)v41)
      {
        for (i = 0; i != v41; ++i)
        {
          if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v39 + 2) + 8 * i) + 8) != 17)
          {
            v146[0] = *(_OWORD *)v166;
            v146[1] = *(_OWORD *)&v166[16];
            v146[2] = v167;
            *(_WORD *)&v171[32] = 257;
            sub_22E3C408C((uint64_t *)(a1 + 272), (uint64_t)v146, i, (uint64_t)v171, (uint64_t)&v168);
            v145[0] = v168;
            v145[1] = v169;
            v145[2] = v170;
            *(_WORD *)&v171[32] = 257;
            v43 = sub_22E3C2A7C((uint64_t *)(a1 + 272), (uint64_t)v145, (uint64_t)v171);
            v44 = DWORD2(v172);
            if (DWORD2(v172) >= (unint64_t)HIDWORD(v172))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v44 = DWORD2(v172);
            }
            *(_QWORD *)(v172 + 8 * v44) = v43;
            ++DWORD2(v172);
          }
        }
      }
      if (DWORD2(v172) == 1)
      {
        v45 = (__int128 *)v172;
        v15 = *(_QWORD *)v172;
        v10 = v141;
      }
      else
      {
        v15 = llvm::UndefValue::get();
        *(_DWORD *)v171 = 0;
        v47 = DWORD2(v172);
        if (DWORD2(v172))
        {
          v48 = 0;
          v10 = v141;
          do
          {
            v49 = *(_QWORD *)(v172 + 8 * v48);
            LOWORD(v170) = 257;
            v15 = sub_22E4210EC(a1 + 272, v15, v49, (uint64_t)v171, 1, (uint64_t)&v168);
            v48 = *(_DWORD *)v171 + 1;
            *(_DWORD *)v171 = v48;
          }
          while (v48 != v47);
        }
        else
        {
          v10 = v141;
        }
        v45 = (__int128 *)v172;
      }
      if (v45 != &v173)
        free(v45);
      goto LABEL_85;
    case 7:
      v46 = sub_22E699F3C(*(_QWORD **)(a1 + 144));
      v22 = (*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(**(_QWORD **)(v46 + 8) + 112))(*(_QWORD *)(v46 + 8), a1, v10);
      goto LABEL_40;
    case 8:
      if ((*(_WORD *)(a2 + 73) & 2) == 0)
        goto LABEL_102;
      v32 = *(_QWORD *)(a1 + 1624);
      if ((*(_WORD *)(v32 + 18) & 1) != 0)
        llvm::Function::BuildLazyArguments(*(llvm::Function **)(a1 + 1624));
      v33 = (uint64_t *)(*(_QWORD *)(v32 + 88) + 40 * *(_QWORD *)(v32 + 96) - 40);
      v34 = *(llvm::LLVMContext **)(a2 + 24);
      v35 = *(unsigned int *)(a2 + 64);
      LOWORD(v174) = 257;
      v36 = sub_22E3C4170((uint64_t *)(a1 + 272), v34, v33, 0, v35, (uint64_t)&v172);
      v37 = (llvm::Type *)*((_QWORD *)v36 + 9);
      v38 = *(unsigned __int8 *)(a1 + 130);
      *(_QWORD *)&v172 = "sret";
      LOWORD(v174) = 259;
      v22 = sub_22E3C3200((uint64_t *)(a1 + 272), v37, (uint64_t)v36, (63 - __clz(v38)) | 0x100u, 0, (uint64_t)&v172);
LABEL_40:
      v15 = v22;
      goto LABEL_85;
    default:
      goto LABEL_102;
  }
  while (1)
  {
    if (v70 == v69)
      goto LABEL_162;
    v72 = v70 - 3;
    v73 = v70 ? (uint64_t)(v70 - 3) : 0;
    v74 = *(unsigned __int8 *)(v73 + 16);
    if (v74 != 77)
      break;
LABEL_80:
    v70 = (_QWORD *)*v70;
  }
  if (v74 == 84)
  {
    v75 = *(_QWORD *)(v73 - 32);
    if (!v75
      || *(_BYTE *)(v75 + 16)
      || *(_QWORD *)(v75 + 24) != *(_QWORD *)(v73 + 72)
      || (*(_BYTE *)(v75 + 33) & 0x20) == 0
      || *(_DWORD *)(*(v70 - 7) + 36) != 167)
    {
      goto LABEL_162;
    }
    goto LABEL_80;
  }
  if (!v70 || v74 != 61 || *(_QWORD *)(v73 - 32) != v66 || **(_QWORD **)(v73 - 64) != *(_QWORD *)(a1 + 1744))
    goto LABEL_162;
LABEL_173:
  if (a3)
  {
    v130 = v72 + 6;
    if (!*(_BYTE *)(a1 + 1882) && v130 != &v165)
    {
      v165 = *v130;
      if (v165)
        llvm::MetadataTracking::track();
    }
  }
  v15 = *(v72 - 8);
  llvm::Instruction::eraseFromParent((llvm::Instruction *)v72);
LABEL_10:
  if (*(_BYTE *)(a1 + 1882) && (v16 = *(_QWORD *)(a1 + 1600)) != 0)
  {
    if ((*(_DWORD *)(v16 + 28) & 0x7F) != 0x18)
      goto LABEL_208;
    v17 = *(_QWORD *)(v16 + 120);
    v18 = *(_QWORD *)(v17 + 48);
    if ((v18 & 1) == 0 && (*(_BYTE *)((v18 & 0xFFFFFFFFFFFFFFF0) + 8) & 1) == 0)
      goto LABEL_208;
    v19 = llvm::Value::stripPointerCasts((llvm::Value *)v15);
    if (!v19)
      goto LABEL_208;
    v20 = (llvm::Instruction *)v19;
    if (*(_BYTE *)(v19 + 16) != 84)
      goto LABEL_208;
    if (*(_QWORD *)(v19 - 32) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 832) + 248))
      goto LABEL_208;
    v110 = *(_QWORD *)(v19 - 32 * (*(_DWORD *)(v19 + 20) & 0x7FFFFFF));
    v111 = (llvm::Instruction *)llvm::Value::stripPointerCasts((llvm::Value *)v110);
    if (!v111)
      goto LABEL_208;
    v112 = (uint64_t)v111;
    if (*((_BYTE *)v111 + 16) != 60 || (llvm::Instruction::isAtomic(v111) & 1) != 0 || (*(_WORD *)(v112 + 18) & 1) != 0)
      goto LABEL_208;
    v113 = *(_QWORD *)(v112 - 32);
    *(_QWORD *)v166 = v17;
    *(_QWORD *)&v172 = 0;
    v114 = sub_22E3CED3C((uint64_t *)(a1 + 2904), v166, &v172);
    v115 = v172;
    if (!v114)
      v115 = *(_QWORD *)(a1 + 2904) + 56 * *(unsigned int *)(a1 + 2920);
    v116 = (*(_BYTE *)(v115 + 32) & 3) != 0 ? 0 : *(_QWORD *)(v115 + 8);
    if (v113 != v116)
      goto LABEL_208;
    v117 = *(_QWORD *)v15;
    if (!*(_QWORD *)(v15 + 8))
    {
      v118 = (_BYTE *)v15;
      do
      {
        if (v118[16] != 77)
          break;
        v119 = *((_QWORD *)v118 - 4);
        llvm::Instruction::eraseFromParent((llvm::Instruction *)v118);
        v118 = (_BYTE *)v119;
      }
      while (!*(_QWORD *)(v119 + 8));
    }
    llvm::Instruction::eraseFromParent(v20);
    if (!*(_QWORD *)(v110 + 8))
    {
      do
      {
        if (*(_BYTE *)(v110 + 16) != 77)
          break;
        v127 = *(_QWORD *)(v110 - 32);
        llvm::Instruction::eraseFromParent((llvm::Instruction *)v110);
        v110 = v127;
      }
      while (!*(_QWORD *)(v127 + 8));
    }
    LOWORD(v174) = 257;
    v76 = (llvm::Constant **)sub_22E3C1740((uint64_t *)(a1 + 272), 49, v112, v117, (uint64_t)&v172);
    if (!v76)
    {
LABEL_208:
      v21 = *(_QWORD *)(a1 + 144);
      if ((*(_BYTE *)(*(_QWORD *)(v21 + 184) + 33) & 0x18) != 0)
        goto LABEL_19;
      v55 = *(_QWORD *)(a1 + 320);
      v56 = *(_QWORD *)(v55 + 40);
      if (v56 == v55 + 40)
        goto LABEL_19;
      v57 = v56 ? v56 - 24 : 0;
      if (v57 != v15)
        goto LABEL_19;
      v58 = *(_QWORD *)v15;
      *(_QWORD *)&v172 = &v173;
      *((_QWORD *)&v172 + 1) = 0x400000000;
      v59 = *(unsigned __int8 *)(v15 + 16);
      if (v59 == 77)
      {
        v60 = 0;
        v61 = v15;
        while (1)
        {
          v62 = *(_QWORD *)(v61 - 32);
          v63 = *(_QWORD *)(v62 + 32);
          v64 = !v63 || v63 == *(_QWORD *)(v62 + 40) + 40;
          v65 = v64 ? 0 : v63 - 24;
          if (v65 != v61)
            goto LABEL_155;
          if (v60 >= HIDWORD(v172))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v60 = DWORD2(v172);
          }
          *(_QWORD *)(v172 + 8 * v60) = v61;
          v60 = ++DWORD2(v172);
          v59 = *(unsigned __int8 *)(v62 + 16);
          v61 = v62;
          if (v59 != 77)
            goto LABEL_152;
        }
      }
      v60 = 0;
      v62 = v15;
LABEL_152:
      if (v59 == 84)
      {
        v120 = *(_QWORD *)(v62 - 32);
        v121 = *(_QWORD **)(*(_QWORD *)(a1 + 144) + 832);
        v122 = v121[31];
        if (v120 == v122)
        {
          v140 = v58;
        }
        else
        {
          if (v120 != v121[36])
            goto LABEL_155;
          v140 = v58;
          if (v121[44])
          {
            if (*(_QWORD *)(*(_QWORD *)(v62 + 40) + 48) == v62 + 24)
            {
              v129 = 0;
            }
            else
            {
              v128 = *(_QWORD *)(v62 + 24);
              if (v128)
                v129 = v128 - 24;
              else
                v129 = 0;
            }
            if (*(_BYTE *)(v129 + 16) == 77)
            {
              if (*(_QWORD *)(*(_QWORD *)(v129 + 40) + 48) == v129 + 24)
              {
                v129 = 0;
              }
              else
              {
                v132 = *(_QWORD *)(v129 + 24);
                if (v132)
                  v129 = v132 - 24;
                else
                  v129 = 0;
              }
            }
            if (v60 >= HIDWORD(v172))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v60 = DWORD2(v172);
            }
            *(_QWORD *)(v172 + 8 * v60) = v129;
            v60 = ++DWORD2(v172);
          }
        }
        v133 = *(_QWORD *)(v62 - 32 * (*(_DWORD *)(v62 + 20) & 0x7FFFFFF));
        if (v60 >= HIDWORD(v172))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v60 = DWORD2(v172);
        }
        *(_QWORD *)(v172 + 8 * v60) = v62;
        v134 = ++DWORD2(v172);
        for (j = v10; v133; v133 = *(_QWORD *)(v133 - 32))
        {
          if (*(_BYTE *)(v133 + 16) != 77)
            break;
          v135 = *(_QWORD *)(v133 + 8);
          if (!v135 || *(_QWORD *)(v135 + 8))
            break;
          if (v134 >= HIDWORD(v172))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v134 = DWORD2(v172);
          }
          *(_QWORD *)(v172 + 8 * v134) = v133;
          v134 = ++DWORD2(v172);
        }
        if (v134)
        {
          v136 = (llvm::Instruction **)v172;
          v137 = 8 * v134;
          do
          {
            v138 = *v136++;
            llvm::Instruction::eraseFromParent(v138);
            v137 -= 8;
          }
          while (v137);
        }
        if (v120 == v122)
          v133 = sub_22E563CC4((_QWORD *)a1, v133, (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 832) + 280), 225, 1);
        v10 = j;
        LOWORD(v167) = 257;
        v76 = (llvm::Constant **)sub_22E3C1740((uint64_t *)(a1 + 272), 49, v133, v140, (uint64_t)v166);
      }
      else
      {
LABEL_155:
        v76 = 0;
      }
      if ((__int128 *)v172 != &v173)
        free((void *)v172);
      if (!v76)
      {
        v21 = *(_QWORD *)(a1 + 144);
LABEL_19:
        v22 = sub_22E563CC4((_QWORD *)a1, v15, (uint64_t *)(*(_QWORD *)(v21 + 832) + 192), 211, 1);
        goto LABEL_40;
      }
    }
LABEL_86:
    v77 = *(_QWORD *)(a1 + 1592);
    if (v77)
    {
      if (sub_22E47296C(v77))
      {
        v78 = *v76;
        if (*v76)
        {
          if (*((_BYTE *)v78 + 8) == 13
            && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)((v10 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45)
          {
            v76 = (llvm::Constant **)sub_22F24E664(a1, (uint64_t)v76, (uint64_t)v78, v10);
          }
        }
      }
    }
    v79 = *(_QWORD *)(a1 + 1600);
    if (v79)
    {
      v80 = *(_QWORD *)(a1 + 1712);
      if (!v80 || *(_QWORD *)(v80 + 8))
      {
        if ((*(_BYTE *)(a1 + 1868) & 2) != 0 && (*(_BYTE *)(v79 + 29) & 1) != 0)
        {
          sub_22EFC8E88(v79);
          v82 = *(uint64_t **)v81;
          v83 = *(unsigned int *)(v81 + 8);
          v84 = *(uint64_t **)v81;
          if ((_DWORD)v83)
          {
            v85 = 8 * v83;
            v84 = *(uint64_t **)v81;
            while (*(_WORD *)(*v84 + 32) != 300)
            {
              ++v84;
              v85 -= 8;
              if (!v85)
                goto LABEL_106;
            }
          }
          if (v84 != &v82[v83])
          {
            do
            {
              v87 = *v82++;
              v86 = v87;
            }
            while (*(_WORD *)(v87 + 32) != 300);
            v142 = *(_DWORD *)(v86 + 16);
            v168 = xmmword_22F455748;
            v88 = 17;
            goto LABEL_114;
          }
        }
LABEL_106:
        if (*(_QWORD *)(a1 + 5904))
        {
          LODWORD(v89) = 0;
          v90 = *(_QWORD *)(a1 + 1600);
          if (v90 && (*(_DWORD *)(v90 + 28) & 0x7Fu) - 67 >= 0xFFFFFFEE)
          {
            v91 = *(_QWORD *)(v90 + 56);
            v92 = (unint64_t *)(v91 & 0xFFFFFFFFFFFFFFF8);
            if ((v91 & 4) != 0)
              v92 = (unint64_t *)v92[4];
            if (v92)
            {
              v89 = sub_22F24EA94(*v92, (unint64_t)(v92 + 1));
              *(_QWORD *)&v172 = v89;
              *((_QWORD *)&v172 + 1) = v123;
              if (v89)
              {
                v124 = *(_QWORD *)(v89 + 24);
                v125 = sub_22E47EE80(&v172);
                *(_QWORD *)v166 = v124;
                *(_QWORD *)&v166[8] = v125;
                LODWORD(v89) = sub_22F40B28C((uint64_t *)v166);
              }
            }
            else
            {
              LODWORD(v89) = 0;
            }
          }
          v142 = v89;
          v168 = xmmword_22F455758;
          v88 = 15;
LABEL_114:
          v139 = v88;
          *(_BYTE *)(a1 + 1880) = 1;
          *(_QWORD *)&v172 = "nullcheck";
          LOWORD(v174) = 259;
          v93 = (_QWORD *)operator new();
          llvm::BasicBlock::BasicBlock();
          *(_QWORD *)&v172 = "no.nullcheck";
          LOWORD(v174) = 259;
          v94 = (_QWORD *)operator new();
          llvm::BasicBlock::BasicBlock();
          v95 = *(_OWORD *)(a1 + 5928);
          v172 = *(_OWORD *)(a1 + 5912);
          v173 = v95;
          v174 = *(_OWORD *)(a1 + 5944);
          v96 = (llvm::Constant **)sub_22E3C43AC((uint64_t *)(a1 + 272), (uint64_t)&v172, "return.sloc.load");
          LOWORD(v167) = 257;
          NullValue = llvm::Constant::getNullValue(*v96, v97);
          v99 = sub_22E3C18F4(a1 + 272, 33, (uint64_t *)v96, NullValue, (uint64_t)v166);
          v100 = *(_QWORD *)(a1 + 5904);
          if (v100)
          {
            LOWORD(v167) = 257;
            v99 = sub_22E3E49C4(a1 + 272, v99, v100, (uint64_t)v166);
          }
          v101 = llvm::User::operator new((llvm::User *)0x40);
          MEMORY[0x23489C09C](v101, v93, v94, v99, 0);
          LOWORD(v167) = 257;
          sub_22E3C12C8((uint64_t *)(a1 + 272), v101, (uint64_t)v166);
          sub_22E5ED9B4((_QWORD *)a1, v93, 0);
          LOWORD(v167) = 257;
          v103 = llvm::Constant::getNullValue(*v76, v102);
          v104 = sub_22E3C18F4(a1 + 272, 33, (uint64_t *)v76, v103, (uint64_t)v166);
          *(_QWORD *)v171 = sub_22E4DE978(a1, v142);
          v181[0] = v96;
          *(_QWORD *)v166 = v104;
          *(_OWORD *)&v166[8] = v168;
          sub_22E4DEC4C((_QWORD *)a1, (uint64_t)v166, 1, v139, (uint64_t)v171, 1, v181, 1);
          sub_22E5ED9B4((_QWORD *)a1, v94, 0);
          *(_BYTE *)(a1 + 1880) = 0;
        }
      }
    }
    result = sub_22E4772D4((uint64_t *)(a1 + 272), (uint64_t)v76);
  }
  else
  {
LABEL_85:
    v76 = (llvm::Constant **)v15;
    if (v15)
      goto LABEL_86;
LABEL_102:
    result = sub_22E3CF118((uint64_t *)(a1 + 272));
  }
  v105 = result;
  if (v165)
  {
    v144 = v165;
    result = llvm::MetadataTracking::retrack();
    v165 = 0;
    v106 = (uint64_t *)(v105 + 48);
    if (&v144 == v106)
    {
      result = llvm::MetadataTracking::untrack();
    }
    else
    {
      if (*v106)
        result = llvm::MetadataTracking::untrack();
      v107 = v144;
      *v106 = v144;
      if (v107)
      {
        result = llvm::MetadataTracking::retrack();
        v144 = 0;
      }
    }
    if (v165)
      return llvm::MetadataTracking::untrack();
  }
  return result;
}

uint64_t sub_22E476E40(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;
  llvm::DataLayout *DataLayout;
  uint64_t v8;
  unint64_t v9;
  int v10;
  BOOL v11;
  unint64_t ABITypeAlignment;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  llvm::DataLayout *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  unint64_t v21;
  llvm::LLVMContext *v22;
  int v23;
  __int128 v24;
  uint64_t *v25;
  uint64_t *v27;
  __int128 v28;
  _OWORD *v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  llvm::LLVMContext *v36;
  uint64_t v37;
  llvm::LLVMContext *v38;
  int v39;
  uint64_t v40;
  int64_t v41;
  uint64_t Name;
  _QWORD *v43;
  uint64_t Intrinsic;
  __int128 v46;
  _QWORD *v47;
  uint64_t v48;
  llvm::Type *v49;
  uint64_t NullValue;
  _OWORD v51[3];
  _OWORD v52[3];
  _OWORD v53[3];
  __int128 v54[3];
  _OWORD v55[3];
  _OWORD v56[3];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _OWORD v60[3];
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 8);
  if ((unsigned __int8 *)v5 == a2)
  {
    v27 = (uint64_t *)(a3 + 272);
    v28 = *(_OWORD *)(a1 + 16);
    v60[0] = *(_OWORD *)a1;
    v60[1] = v28;
    v60[2] = *(_OWORD *)(a1 + 32);
    LOWORD(v59) = 257;
    v29 = v60;
    v30 = (uint64_t *)&v57;
    return sub_22E3C2A7C(v27, (uint64_t)v29, (uint64_t)v30);
  }
  DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a3 + 144) + 200));
  sub_22E3C304C((uint64_t)DataLayout, (uint64_t)a2);
  v9 = (unint64_t)(v8 + 7) >> 3;
  v11 = v10 == 1;
  ABITypeAlignment = llvm::DataLayout::getABITypeAlignment(DataLayout, (llvm::Type *)a2);
  v13 = (ABITypeAlignment + v9 - 1) / ABITypeAlignment * ABITypeAlignment;
  if (v5 && *(_BYTE *)(v5 + 8) == 16)
  {
    v14 = *(_OWORD *)(a1 + 16);
    v56[0] = *(_OWORD *)a1;
    v56[1] = v14;
    v56[2] = *(_OWORD *)(a1 + 32);
    sub_22E47E638((uint64_t)&v57, (uint64_t)v56, v5, v13, a3);
    v15 = v58;
    *(_OWORD *)a1 = v57;
    *(_OWORD *)(a1 + 16) = v15;
    *(_OWORD *)(a1 + 32) = v59;
    v5 = *(_QWORD *)(a1 + 8);
  }
  v16 = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a3 + 144) + 200));
  sub_22E3C304C((uint64_t)v16, v5);
  v18 = v17;
  v20 = v19 == 1;
  v21 = llvm::DataLayout::getABITypeAlignment(v16, (llvm::Type *)v5);
  v23 = a2[8];
  if ((v23 | 2) == 0xF && (*(unsigned __int8 *)(v5 + 8) | 2) == 0xF)
  {
    v24 = *(_OWORD *)(a1 + 16);
    v55[0] = *(_OWORD *)a1;
    v55[1] = v24;
    v55[2] = *(_OWORD *)(a1 + 32);
    LOWORD(v59) = 257;
    v25 = (uint64_t *)sub_22E3C2A7C((uint64_t *)(a3 + 272), (uint64_t)v55, (uint64_t)&v57);
    return sub_22E47E7A0(v25, (uint64_t)a2, (_QWORD *)a3);
  }
  v31 = (v21 + ((unint64_t)(v18 + 7) >> 3) - 1) / v21 * v21;
  if (!v11 && !v20 && v31 >= v13)
  {
    v32 = (uint64_t *)(a3 + 272);
    v33 = *(_OWORD *)(a1 + 16);
    v54[0] = *(_OWORD *)a1;
    v54[1] = v33;
    v54[2] = *(_OWORD *)(a1 + 32);
    v64 = 257;
    sub_22E3BEE6C(v32, v54, (uint64_t)a2, (uint64_t)&v61, (uint64_t)&v57);
    v34 = v58;
    *(_OWORD *)a1 = v57;
    *(_OWORD *)(a1 + 16) = v34;
    *(_OWORD *)(a1 + 32) = v59;
    v35 = *(_OWORD *)(a1 + 16);
    v53[0] = *(_OWORD *)a1;
    v53[1] = v35;
    v53[2] = *(_OWORD *)(a1 + 32);
    LOWORD(v59) = 257;
    v29 = v53;
    v30 = (uint64_t *)&v57;
    v27 = v32;
    return sub_22E3C2A7C(v27, (uint64_t)v29, (uint64_t)v30);
  }
  if (v23 != 19
    || *(_BYTE *)(v5 + 8) != 18
    || !v5
    || ((llvm::Type::getInt1Ty(*(llvm::Type **)(a3 + 336), v22), (unsigned __int8 *)llvm::ScalableVectorType::get() == a2)
     && (v37 = *(_QWORD *)(v5 + 24), v37 == llvm::Type::getInt8Ty(*(llvm::Type **)(a3 + 336), v36))
      ? (llvm::Type::getInt8Ty(*(llvm::Type **)(a3 + 336), v38), v40 = llvm::ScalableVectorType::get(), v39 = 1)
      : (v39 = 0, v40 = (uint64_t)a2),
        *(_QWORD *)(v40 + 24) != *(_QWORD *)(v5 + 24)))
  {
    v41 = *(_QWORD *)(a1 + 16);
    Name = llvm::Value::getName(*(llvm::Value **)a1);
    v64 = 261;
    v61 = Name;
    v62 = v43;
    sub_22E47EA10((uint64_t)&v57, a3, (llvm::Type *)a2, v41, &v61);
    if ((BYTE8(v58) & 3) != 0)
      sub_22F28ABCC(&v57, a3);
    if ((*(_BYTE *)(a1 + 24) & 3) != 0)
      sub_22F28ABCC(a1, a3);
    llvm::ConstantInt::get();
    llvm::IRBuilderBase::CreateMemTransferInst();
    v51[0] = v57;
    v51[1] = v58;
    v51[2] = v59;
    v64 = 257;
    v29 = v51;
    v30 = &v61;
    v27 = (uint64_t *)(a3 + 272);
    return sub_22E3C2A7C(v27, (uint64_t)v29, (uint64_t)v30);
  }
  v46 = *(_OWORD *)(a1 + 16);
  v52[0] = *(_OWORD *)a1;
  v52[1] = v46;
  v52[2] = *(_OWORD *)(a1 + 32);
  LOWORD(v59) = 257;
  v47 = (_QWORD *)sub_22E3C2A7C((uint64_t *)(a3 + 272), (uint64_t)v52, (uint64_t)&v57);
  v48 = llvm::UndefValue::get();
  NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)(*(_QWORD *)(a3 + 144) + 32), v49);
  *(_QWORD *)&v57 = "castScalableSve";
  LOWORD(v59) = 259;
  v65 = v40;
  v66 = *v47;
  v61 = v48;
  v62 = v47;
  v63 = NullValue;
  Intrinsic = llvm::IRBuilderBase::CreateIntrinsic();
  if (!v39)
    return Intrinsic;
  LOWORD(v59) = 257;
  return sub_22E3C1740((uint64_t *)(a3 + 272), 49, Intrinsic, (uint64_t)a2, (uint64_t)&v57);
}

uint64_t sub_22E4772D4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[32];
  __int16 v8;

  v4 = a1[8];
  v5 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x23489C180](v5, v4, a2, 0);
  v8 = 257;
  return sub_22E3C12C8(a1, v5, (uint64_t)v7);
}

unint64_t sub_22E477344(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t result;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  llvm::ConstantPointerNull **v33;
  llvm::PointerType *v34;
  llvm::Type **v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t *v39;
  __int128 v40[3];
  _OWORD v41[3];
  uint64_t v42;
  _OWORD v43[3];
  _OWORD v44[3];
  _QWORD v45[4];
  __int16 v46;
  _OWORD v47[3];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _OWORD v51[2];
  __int128 v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;

  *(_QWORD *)&v48 = a3;
  *(_QWORD *)&v51[0] = 0;
  v8 = sub_22E3CED3C((uint64_t *)(a1 + 2904), &v48, v51);
  v9 = *(_QWORD *)&v51[0];
  if (!v8)
    v9 = *(_QWORD *)(a1 + 2904) + 56 * *(unsigned int *)(a1 + 2920);
  v48 = *(_OWORD *)(v9 + 8);
  v49 = *(_OWORD *)(v9 + 24);
  v50 = *(_OWORD *)(v9 + 40);
  v10 = *(_QWORD *)(a3 + 48);
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 224);
  v12 = (uint64_t *)(v10 & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_22F10C2A4(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0));
  if (v13
    && (*(_DWORD *)(v13 + 28) & 0x7Fu) - 35 <= 2
    && (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 80))(v11, v13) == 1)
  {
    sub_22E6285D0(*(_QWORD *)(a1 + 144), a3, "forwarded non-trivially copyable parameter");
  }
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
  {
    v47[0] = v48;
    v47[1] = v49;
    v47[2] = v50;
    v46 = 257;
    *(_QWORD *)&v51[0] = sub_22E3C2A7C((uint64_t *)(a1 + 272), (uint64_t)v47, (uint64_t)v45);
  }
  else
  {
    if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 152) + 148) & 2) == 0
      || !sub_22F24EBE4(a3)
      || (v32 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16), v32 != 10)
      && v32 != 32
      && !sub_22F115064(*v12))
    {
      v40[0] = v48;
      v40[1] = v49;
      v40[2] = v50;
      sub_22E4EE4E8(a1, v40, v10, a4, (uint64_t)v41);
      v51[0] = v41[0];
      v51[1] = v41[1];
      v52 = v41[2];
      v53 = v42;
      v54 = 0;
      v55 = v10;
      result = sub_22E3C187C(a2, (unint64_t)v51, 1);
      v23 = *(_QWORD *)a2 + 152 * *(unsigned int *)(a2 + 8);
      v25 = *(_OWORD *)(result + 112);
      v24 = *(_OWORD *)(result + 128);
      v26 = *(_OWORD *)(result + 96);
      *(_QWORD *)(v23 + 144) = *(_QWORD *)(result + 144);
      *(_OWORD *)(v23 + 112) = v25;
      *(_OWORD *)(v23 + 128) = v24;
      *(_OWORD *)(v23 + 96) = v26;
      v27 = *(_OWORD *)(result + 80);
      v29 = *(_OWORD *)(result + 32);
      v28 = *(_OWORD *)(result + 48);
      *(_OWORD *)(v23 + 64) = *(_OWORD *)(result + 64);
      *(_OWORD *)(v23 + 80) = v27;
      *(_OWORD *)(v23 + 32) = v29;
      *(_OWORD *)(v23 + 48) = v28;
      v30 = *(_OWORD *)(result + 16);
      *(_OWORD *)v23 = *(_OWORD *)result;
      *(_OWORD *)(v23 + 16) = v30;
      goto LABEL_12;
    }
    v44[0] = v48;
    v44[1] = v49;
    v44[2] = v50;
    LOWORD(v52) = 257;
    v33 = (llvm::ConstantPointerNull **)sub_22E3C2A7C((uint64_t *)(a1 + 272), (uint64_t)v44, (uint64_t)v51);
    v35 = (llvm::Type **)llvm::ConstantPointerNull::get(*v33, v34);
    v43[0] = v48;
    v43[1] = v49;
    v43[2] = v50;
    sub_22E3BEDDC(a1 + 272, v35, (uint64_t)v43);
    *(_QWORD *)&v51[0] = v33;
  }
  *((_QWORD *)&v51[0] + 1) = 0;
  LOBYTE(v53) = 0;
  v54 = 0;
  v55 = v10;
  result = sub_22E3C187C(a2, (unint64_t)v51, 1);
  v15 = *(_QWORD *)a2 + 152 * *(unsigned int *)(a2 + 8);
  v16 = *(_OWORD *)(result + 16);
  *(_OWORD *)v15 = *(_OWORD *)result;
  *(_OWORD *)(v15 + 16) = v16;
  v17 = *(_QWORD *)(result + 144);
  v18 = *(_OWORD *)(result + 128);
  v19 = *(_OWORD *)(result + 96);
  *(_OWORD *)(v15 + 112) = *(_OWORD *)(result + 112);
  *(_OWORD *)(v15 + 128) = v18;
  *(_QWORD *)(v15 + 144) = v17;
  *(_OWORD *)(v15 + 96) = v19;
  v20 = *(_OWORD *)(result + 80);
  v21 = *(_OWORD *)(result + 32);
  v22 = *(_OWORD *)(result + 48);
  *(_OWORD *)(v15 + 64) = *(_OWORD *)(result + 64);
  *(_OWORD *)(v15 + 80) = v20;
  *(_OWORD *)(v15 + 32) = v21;
  *(_OWORD *)(v15 + 48) = v22;
LABEL_12:
  ++*(_DWORD *)(a2 + 8);
  v31 = *(_QWORD *)(*(_QWORD *)(*v12 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v31 + 16) == 45 && !*(_BYTE *)(a1 + 1881))
  {
    result = sub_22F114198(*(_QWORD *)(v31 + 24));
    if ((*(_BYTE *)(result + 76) & 4) != 0)
    {
      result = sub_22EFBEA2C(a3, *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144));
      if ((_DWORD)result)
      {
        *(_QWORD *)&v51[0] = a3;
        v45[0] = 0;
        if (sub_22F246C54((uint64_t *)(a1 + 2928), v51, v45))
          v36 = *(_QWORD *)(v45[0] + 8);
        else
          v36 = -1;
        result = sub_22F24866C(a1 + 272);
        v37 = result;
        v38 = *(_DWORD *)(a2 + 1448);
        if (v38 >= *(_DWORD *)(a2 + 1452))
        {
          result = llvm::SmallVectorBase<unsigned int>::grow_pod();
          v38 = *(_DWORD *)(a2 + 1448);
        }
        v39 = (uint64_t *)(*(_QWORD *)(a2 + 1440) + 16 * v38);
        *v39 = v36;
        v39[1] = v37;
        ++*(_DWORD *)(a2 + 1448);
      }
    }
  }
  return result;
}

void sub_22E47770C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, unsigned int a6)
{
  unsigned int v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int i;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t *v31;
  int v32;
  unsigned int v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  __int128 v40;
  _OWORD v41[3];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  if (!a5 || (*(_BYTE *)(a1 + 1867) & 5) == 0)
    return;
  if ((*(_DWORD *)(a5 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
  {
    v13 = *(_QWORD *)(*(_QWORD *)(a5 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (v13)
      v14 = *(_BYTE *)(v13 + 16) == 26;
    else
      v14 = 0;
    if (!v14)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
        goto LABEL_48;
      v13 = sub_22F10CF48(v13);
      if (!v13)
        goto LABEL_48;
    }
    v12 = (unsigned __int16)(*(_QWORD *)(v13 + 16) >> 38);
  }
  else
  {
    v12 = *(_DWORD *)(a5 + 104);
  }
  if (v12 > a6)
  {
    v15 = 120;
    if ((*(_DWORD *)(a5 + 28) & 0x7Eu) - 58 < 0xFFFFFFFA)
      v15 = 96;
    v16 = *(_QWORD *)(*(_QWORD *)(a5 + v15) + 8 * a6);
    if (v16)
    {
      a6 = (*(_DWORD *)(v16 + 96) >> 20);
      if (a6 == 255)
      {
        v17 = v16;
        if ((*(_DWORD *)(v16 + 28) & 0x7F) != 0x53)
        {
          v18 = *(_QWORD *)(v16 + 16);
          v19 = v18 & 0xFFFFFFFFFFFFFFF8;
          if ((v18 & 4) != 0)
            v19 = *(_QWORD *)v19;
          for (i = *(_WORD *)(v19 + 8) & 0x7F; i != 83; i = *(_WORD *)(v19 + 8) & 0x7F)
          {
            v21 = -40;
            if (i > 70)
            {
              if (i == 71)
              {
                v21 = -56;
              }
              else if (i != 81)
              {
                goto LABEL_30;
              }
            }
            else
            {
              if (i > 0x18)
                goto LABEL_29;
              if (i == 16)
                goto LABEL_23;
              if (((1 << i) & 0x1066) != 0)
                goto LABEL_36;
              if (i == 24)
              {
LABEL_23:
                v21 = -48;
              }
              else
              {
LABEL_29:
                if (i != 70)
                {
LABEL_30:
                  v22 = i - 52;
                  if ((i - 33) >= 5)
                    v23 = -48;
                  else
                    v23 = -64;
                  if (v22 >= 6)
                    v21 = v23;
                  else
                    v21 = -72;
                  goto LABEL_36;
                }
                v21 = -64;
              }
            }
LABEL_36:
            v24 = *(_QWORD *)(v19 + v21 + 16);
            v19 = v24 & 0xFFFFFFFFFFFFFFF8;
            if ((v24 & 4) != 0)
              v19 = *(_QWORD *)v19;
          }
          v17 = v19 - 40;
        }
        a6 = sub_22F36F2CC(*(_QWORD *)(v17 + 88), v16);
      }
      v25 = 1;
    }
    else
    {
      v25 = 0;
    }
    goto LABEL_49;
  }
LABEL_48:
  v25 = 0;
  v16 = 0;
LABEL_49:
  v26 = *(_QWORD *)(a1 + 1864);
  if ((v26 & 0x1000000) != 0)
  {
    v27 = sub_22E4750AC(a5, v16, a3, a6);
    v26 = *(_QWORD *)(a1 + 1864);
  }
  else
  {
    v27 = 0;
  }
  if ((*(_DWORD *)&v25 & (v27 == 0) & (v26 >> 26)) == 1)
  {
    v28 = sub_22F10D774(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 48) & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0));
    if (v28)
    {
      while (1)
      {
        v36 = *(_DWORD *)(v28 + 16) >> 19;
        if ((v36 - 34) < 3)
          break;
        if (v36 == 33)
        {
          v37 = *(_QWORD *)(v16 + 56);
          v38 = v37 & 0xFFFFFFFFFFFFFFF8;
          if ((v37 & 4) != 0)
            v38 = *(_QWORD *)(v38 + 32);
          v29 = v38 != 0;
          goto LABEL_55;
        }
        v28 = sub_22F10D774(*(_QWORD *)(*(_QWORD *)(v28 + 40) & 0xFFFFFFFFFFFFFFF0));
        v29 = 0;
        if (!v28)
          goto LABEL_55;
      }
    }
  }
  v29 = 0;
LABEL_55:
  if (v27 || v29)
  {
    if (v27)
    {
      v32 = *(_DWORD *)(v27 + 16);
      v46 = xmmword_22F455768;
      v33 = 16;
    }
    else
    {
      v30 = *(_QWORD *)(v16 + 56);
      v31 = (uint64_t *)(v30 & 0xFFFFFFFFFFFFFFF8);
      if ((v30 & 4) != 0)
        v31 = (uint64_t *)v31[4];
      v43 = *v31;
      v44 = (uint64_t)(v31 + 1);
      v32 = sub_22F40B28C(&v43);
      v46 = xmmword_22F455778;
      v33 = 14;
    }
    *(_BYTE *)(a1 + 1880) = 1;
    v34 = *(_OWORD *)(a2 + 16);
    v41[0] = *(_OWORD *)a2;
    v41[1] = v34;
    v41[2] = *(_OWORD *)(a2 + 32);
    v42 = *(_QWORD *)(a2 + 48);
    v35 = sub_22F25EC48((llvm::Type *)a1, (llvm::Type *)v41, a3);
    v43 = sub_22E4DE978(a1, a4);
    v44 = sub_22E4DE978(a1, v32);
    v45 = llvm::ConstantInt::get();
    v39 = v35;
    v40 = v46;
    sub_22E4DEC4C((_QWORD *)a1, (uint64_t)&v39, 1, v33, (uint64_t)&v43, 3, 0, 0);
    *(_BYTE *)(a1 + 1880) = 0;
  }
}

void sub_22E477B1C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t *a5, uint64_t a6, unsigned int a7, int a8)
{
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unint64_t *v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _BOOL4 v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  int v35;
  int v36;
  _BOOL4 v37;
  BOOL v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  unsigned int v41;
  uint64_t v42;
  unsigned __int8 *v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  _QWORD *v55;
  __int128 v56;
  uint64_t v57;
  int v58;
  unsigned __int8 *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  __int128 v74;
  llvm::ConstantPointerNull *v75;
  uint64_t v76;
  llvm::PointerType *v77;
  llvm::Type *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  unint64_t v90;
  unint64_t v91;
  llvm::PointerType *v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t *v100;
  unint64_t v101;
  uint64_t Select;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  llvm::DataLayout *DataLayout;
  llvm::Type *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t *v116;
  unint64_t v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  char v126;
  uint64_t v127;
  llvm::PointerType *v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  llvm::PHINode *v142;
  uint64_t v143;
  unsigned int v144;
  unint64_t v145;
  __int128 *v146;
  __int128 *v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  __int128 v160;
  uint64_t v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  llvm::LLVMContext *v171;
  uint64_t IntNTy;
  int v173;
  _BOOL4 v174;
  int v175;
  int v176;
  unint64_t v177;
  uint64_t v178;
  __int128 v179;
  uint64_t v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  unsigned int v186;
  uint64_t v187;
  __int128 *v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  int v194;
  char v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  unint64_t v199;
  uint64_t v200;
  __int128 v201;
  uint64_t v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  uint64_t v208;
  int v209;
  unint64_t v210;
  uint64_t v211;
  __int128 v212;
  uint64_t v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  unint64_t v219;
  uint64_t v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  llvm::LLVMContext *v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  _QWORD *v239;
  uint64_t v240;
  BOOL v241;
  char *v242;
  int v243;
  unsigned int v244;
  unsigned int v245;
  unint64_t v246;
  _QWORD *v247;
  unint64_t v248;
  uint64_t v249;
  llvm::LLVMContext *v250;
  unsigned int v251;
  unint64_t v252;
  unint64_t v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  BOOL v261;
  uint64_t v262;
  char *v263;
  uint64_t v264;
  unint64_t *v265;
  uint64_t v266;
  unsigned int v267;
  unsigned int v268;
  unsigned int v269;
  int v270;
  uint64_t v271;
  _QWORD *v272;
  uint64_t v273;
  _QWORD *v275;
  uint64_t *v276;
  int v278;
  llvm::ConstantPointerNull *v279;
  int v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  int v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unsigned int v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  int v300;
  _BOOL4 v301;
  uint64_t v302;
  _QWORD *v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  uint64_t v311;
  _QWORD v312[3];
  int v313;
  __int128 v314;
  int v315;
  __int128 v316;
  __int128 v317;
  _BYTE v318[32];
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  uint64_t v323;
  __int128 v324;
  _BYTE v325[28];
  int v326;
  _OWORD v327[2];
  uint64_t v328;
  __int128 v329;
  __int128 v330;
  _BYTE v331[32];
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  uint64_t v337;
  uint64_t v338;
  int v339;
  __int128 v340;
  int v341;
  uint64_t *v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  uint64_t v346;
  void *v347;
  uint64_t v348;
  _BYTE v349[128];
  _BYTE v350[32];
  uint64_t v351;
  uint64_t v352;

  v11 = a1;
  v352 = *MEMORY[0x24BDAC8D0];
  v347 = v349;
  v348 = 0x1000000000;
  v281 = a4;
  if (a3 < 8)
  {
    LODWORD(v14) = 0;
    v15 = 0;
  }
  else
  {
    v12 = a3 & 0xFFFFFFFFFFFFFFF8;
    if ((a3 & 4) != 0 && v12)
    {
      v14 = (*(_QWORD *)(v12 + 56) >> 18) & 1;
      v15 = sub_22E46D364(a3 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 216) + 68) == 15);
      v262 = *(_QWORD *)(v12 + 96);
      v263 = (char *)(v262 + 8 * *(unsigned int *)(v12 + 104));
      LODWORD(v348) = 0;
      sub_22F24FCBC((uint64_t)&v347, (char *)(v262 + 8 * a7), v264, v263);
    }
    else
    {
      v13 = *(_QWORD *)(v12 + 16);
      v14 = (v13 >> 59) & 1;
      v15 = (v13 >> 19) & 0x1F;
      sub_22E3D0148((uint64_t)&v347, (_BYTE *)(v12 + 40 + 8 * a7), (_BYTE *)(v12 + 40 + 8 * (unsigned __int16)(v13 >> 38)));
    }
    a4 = v281;
  }
  v270 = v15;
  if (v15 == 30)
    v16 = v348;
  else
    v16 = 0;
  v267 = v16;
  v17 = (unint64_t *)(a4 + 8 * v348);
  v268 = v348;
  v18 = v348;
  if (v17 != a5)
  {
    v18 = v348;
    do
    {
      v19 = *v17;
      if ((_DWORD)v14)
      {
        v20 = sub_22F24ED70(v11, v19);
        v18 = v348;
      }
      else
      {
        v20 = *(_QWORD *)(v19 + 8);
      }
      if (v18 >= HIDWORD(v348))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v18 = v348;
      }
      *((_QWORD *)v347 + v18) = v20;
      v18 = v348 + 1;
      LODWORD(v348) = v348 + 1;
      ++v17;
    }
    while (v17 != a5);
  }
  v21 = *(_QWORD *)(v11 + 144);
  v22 = *(_DWORD *)(*(_QWORD *)(v21 + 216) + 148);
  v23 = a8 == 1;
  if (v22 != 11)
    v23 = a8 != 2;
  v301 = v23;
  if ((v270 & 0x1E) != 0xE && v22 == 11 && v18)
  {
    v24 = v347;
    v25 = 8 * v18;
    while (1)
    {
      v26 = *(_QWORD *)(v21 + 224);
      v27 = sub_22F10C2A4(*(_QWORD *)(*v24 & 0xFFFFFFFFFFFFFFF0));
      if (v27)
      {
        if ((*(_DWORD *)(v27 + 28) & 0x7Fu) - 35 <= 2
          && (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 80))(v26, v27) == 1)
        {
          break;
        }
      }
      ++v24;
      v25 -= 8;
      if (!v25)
        goto LABEL_29;
    }
    sub_22F24EC44(a2, v11);
  }
LABEL_29:
  v269 = *(_DWORD *)(a2 + 8);
  v28 = v348;
  v29 = a6;
  v30 = v281;
  if ((_DWORD)v348)
  {
    v31 = 0;
    v276 = (uint64_t *)(v11 + 272);
    v266 = v11 + 1984;
    v265 = (unint64_t *)(a2 + 1232);
    v275 = (_QWORD *)v11;
    v300 = v348;
    do
    {
      if (v301)
        v32 = v31;
      else
        v32 = v28 + ~v31;
      v33 = *(unsigned __int8 **)(v30 + 8 * v32);
      v302 = v32;
      v34 = *((_QWORD *)v347 + v32);
      v311 = v34;
      v35 = *v33;
      v36 = v35;
      v37 = v35 == 120;
      if (v35 == 120)
      {
        if (*(_BYTE *)(v11 + 2892))
          v38 = 1;
        else
          v38 = *(_QWORD *)(v11 + 2880) == 0;
        if (v38)
        {
          v37 = 0;
          goto LABEL_63;
        }
        *(_BYTE *)(v11 + 2892) = 1;
        v36 = *v33;
      }
      if (v36 == 197)
      {
        v39 = (unsigned __int8 *)*((_QWORD *)v33 + 2);
        do
        {
          v40 = v39;
          v41 = *v39;
          if (v41 > 0xD5)
          {
            if (v41 == 233)
            {
              v44 = *(_DWORD *)v39;
              if ((*(_DWORD *)v39 & 0x7C0000) != 0x300000)
                goto LABEL_60;
              v41 = *(_DWORD *)v39;
              v43 = v39 + 16;
            }
            else
            {
              if (v41 != 214)
                break;
              v43 = v39 + 24;
            }
          }
          else if (v41 == 155)
          {
            if ((**((_DWORD **)v39 + 2) & 0x18000) != 0)
              goto LABEL_82;
            v43 = v39 + 24;
            if (!v40[48])
              v43 = v40 + 32;
            v41 = 155;
          }
          else
          {
            if (v41 != 176)
              break;
            v42 = *((unsigned int *)v39 + 5);
            if ((_DWORD)v42 == -1)
              goto LABEL_82;
            v43 = &v39[8 * v42 + 40];
            v41 = 176;
          }
          v39 = *(unsigned __int8 **)v43;
        }
        while (v39 != v40);
        if (v41 != 233)
          goto LABEL_82;
        v44 = *(_DWORD *)v40;
LABEL_60:
        if ((v44 & 0x7C0000) == 0x100000 && *((_QWORD *)v40 + 2))
        {
          sub_22E4D8D7C(&v329);
          goto LABEL_86;
        }
LABEL_82:
        sub_22E4DFD40(&v343, v11);
        v68 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v33 + 2) + 8) & 0xFFFFFFFFFFFFFFF0);
        if (!v68 || *(_BYTE *)(v68 + 16) != 39)
          v68 = sub_22F10CF48(v68);
        v69 = *(_QWORD *)(v68 + 32);
        v307 = v343;
        v308 = v344;
        v309 = v345;
        sub_22E6281E0(*(_QWORD **)(v11 + 144), v69, (uint64_t)v327);
        v316 = v307;
        v317 = v308;
        *(_OWORD *)v318 = v309;
        v70 = *(_QWORD *)(*(_QWORD *)(v11 + 144) + 144);
        *(_OWORD *)v350 = v327[0];
        *(_OWORD *)&v350[16] = v327[1];
        v351 = v328;
        v330 = 0uLL;
        *((_QWORD *)&v329 + 1) = 0;
        *(_DWORD *)v331 = 0;
        *(_QWORD *)&v331[8] = 0;
        *(_QWORD *)&v331[16] = 0;
        v332 = 0uLL;
        *(_QWORD *)((char *)&v333 + 4) = 2;
        LODWORD(v329) = 0;
        v334 = 0u;
        v335 = 0u;
        sub_22E3C113C((uint64_t)&v329, &v316, v69, 2, (__int128 *)v350, v70);
LABEL_86:
        v71 = *((_QWORD *)&v329 + 1);
        v297 = *((_QWORD *)&v330 + 1);
        v298 = v330;
        v72 = *(_DWORD *)v331;
        v296 = *(_DWORD *)&v331[4];
        v294 = *(_QWORD *)&v331[16];
        v295 = *(_QWORD *)&v331[8];
        v290 = *(_QWORD *)&v331[24];
        v291 = v329;
        v73 = *((_QWORD *)&v332 + 1);
        v289 = v332;
        v74 = v333;
        v287 = *((_QWORD *)&v334 + 1);
        v288 = v334;
        v285 = *((_QWORD *)&v335 + 1);
        v286 = v335;
        v284 = v336;
        v75 = (llvm::ConstantPointerNull *)sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(v11 + 144) + 280), *((llvm::LLVMContext **)v33 + 1));
        v76 = sub_22F10ACF8(*(_QWORD *)(*((_QWORD *)v33 + 1) & 0xFFFFFFFFFFFFFFF0));
        v78 = (llvm::Type *)sub_22E66C868(*(_QWORD *)(v11 + 144) + 280, v76, 0);
        if ((v72 & 3) == 0 && v71 && *(_BYTE *)(v71 + 16) == 19)
        {
          v79 = llvm::ConstantPointerNull::get(v75, v77);
          v80 = *((_QWORD *)v33 + 1);
          v329 = (unint64_t)v79;
          v331[16] = 0;
          WORD4(v336) = 0;
          v337 = v80;
          v81 = sub_22E3C187C(a2, (unint64_t)&v329, 1);
          v82 = *(_QWORD *)a2 + 152 * *(unsigned int *)(a2 + 8);
          v83 = *(_OWORD *)(v81 + 16);
          *(_OWORD *)v82 = *(_OWORD *)v81;
          *(_OWORD *)(v82 + 16) = v83;
          v84 = *(_QWORD *)(v81 + 144);
          v85 = *(_OWORD *)(v81 + 128);
          v86 = *(_OWORD *)(v81 + 96);
          *(_OWORD *)(v82 + 112) = *(_OWORD *)(v81 + 112);
          *(_OWORD *)(v82 + 128) = v85;
          *(_QWORD *)(v82 + 144) = v84;
          *(_OWORD *)(v82 + 96) = v86;
          v87 = *(_OWORD *)(v81 + 80);
          v88 = *(_OWORD *)(v81 + 32);
          v89 = *(_OWORD *)(v81 + 48);
          *(_OWORD *)(v82 + 64) = *(_OWORD *)(v81 + 64);
          *(_OWORD *)(v82 + 80) = v87;
          *(_OWORD *)(v82 + 32) = v88;
          *(_OWORD *)(v82 + 48) = v89;
          ++*(_DWORD *)(a2 + 8);
          v29 = a6;
          goto LABEL_146;
        }
        v292 = v72;
        v293 = v71;
        v90 = *(unsigned __int8 *)(v11 + 130);
        *(_QWORD *)&v329 = "icr.temp";
        *(_WORD *)v331 = 259;
        v279 = v78;
        v91 = sub_22E4D83CC(v11, v78, v90, (uint64_t)&v329, 0, 0);
        v93 = 0;
        if (v91 <= 7)
          v94 = 0;
        else
          v94 = v91 & 0xFFFFFFFFFFFFFFF8;
        if (v91 <= 7)
          v95 = 0;
        else
          v95 = (unint64_t)v92 & 0xFFFFFFFFFFFFFFF8;
        if (v91 >= 8)
          v93 = 1 << (v92 & 7 | (8 * (v91 & 7u)));
        *(_QWORD *)&v350[4] = 0;
        *(_QWORD *)&v350[12] = 0;
        *(_QWORD *)&v327[0] = *(_QWORD *)(v11 + 320);
        v96 = v276;
        v278 = *(_DWORD *)v33;
        v280 = v35;
        v282 = v93;
        v283 = v95;
        if ((*(_DWORD *)v33 & 0x40000) != 0)
        {
          v98 = v293;
          v99 = v292;
          if ((sub_22E47EF24(v293, v292, *(_QWORD *)(v11 + 144)) & 1) == 0)
            goto LABEL_120;
          v271 = 0;
          v272 = 0;
          v126 = 1;
          v273 = v94;
        }
        else
        {
          v97 = llvm::ConstantPointerNull::get(v279, v92);
          *(_QWORD *)&v324 = v94;
          *((_QWORD *)&v324 + 1) = v95;
          *(_QWORD *)v325 = v93;
          *(_DWORD *)&v325[8] = 0;
          *(_OWORD *)&v325[12] = *(_OWORD *)v350;
          v326 = *(_DWORD *)&v350[16];
          sub_22E3BEDDC(v276, v97, &v324, 0);
          v98 = v293;
          v99 = v292;
          if ((sub_22E47EF24(v293, v292, *(_QWORD *)(v11 + 144)) & 1) != 0)
          {
            v100 = 0;
            v101 = v94;
            Select = v94;
            v103 = v293;
            v29 = a6;
LABEL_143:
            v337 = v283;
            v338 = v282;
            v339 = 0;
            v340 = *(_OWORD *)v350;
            v341 = *(_DWORD *)&v350[16];
            *(_QWORD *)&v329 = v291;
            *((_QWORD *)&v329 + 1) = v103;
            *(_QWORD *)&v330 = v298;
            *((_QWORD *)&v330 + 1) = v297;
            *(_DWORD *)v331 = v99;
            *(_DWORD *)&v331[4] = v296;
            *(_QWORD *)&v331[8] = v295;
            *(_QWORD *)&v331[16] = v294;
            *(_QWORD *)&v331[24] = v290;
            *(_QWORD *)&v332 = v289;
            *((_QWORD *)&v332 + 1) = v73;
            v333 = v74;
            *(_QWORD *)&v334 = v288;
            *((_QWORD *)&v334 + 1) = v287;
            *(_QWORD *)&v335 = v286;
            *((_QWORD *)&v335 + 1) = v285;
            *((_QWORD *)&v336 + 1) = v101;
            *(_QWORD *)&v336 = v284;
            v342 = v100;
            v144 = *(_DWORD *)(a2 + 1240);
            v145 = *(_QWORD *)(a2 + 1232);
            if (v144 >= *(_DWORD *)(a2 + 1244))
            {
              v240 = Select;
              v241 = v145 + 192 * v144 > (unint64_t)&v329;
              v30 = v281;
              v11 = (uint64_t)v275;
              v35 = v280;
              if (v145 <= (unint64_t)&v329 && v241)
              {
                v242 = (char *)&v329 - v145;
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v145 = *v265;
                v146 = (__int128 *)&v242[*v265];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v145 = *v265;
                v146 = &v329;
              }
              Select = v240;
            }
            else
            {
              v146 = &v329;
              v30 = v281;
              v11 = (uint64_t)v275;
              v35 = v280;
            }
            v147 = (__int128 *)(v145 + 192 * *(unsigned int *)(a2 + 1240));
            v148 = *v146;
            v149 = v146[1];
            v150 = v146[3];
            v147[2] = v146[2];
            v147[3] = v150;
            *v147 = v148;
            v147[1] = v149;
            v151 = v146[4];
            v152 = v146[5];
            v153 = v146[7];
            v147[6] = v146[6];
            v147[7] = v153;
            v147[4] = v151;
            v147[5] = v152;
            v154 = v146[8];
            v155 = v146[9];
            v156 = v146[11];
            v147[10] = v146[10];
            v147[11] = v156;
            v147[8] = v154;
            v147[9] = v155;
            ++*(_DWORD *)(a2 + 1240);
            v157 = *((_QWORD *)v33 + 1);
            v329 = (unint64_t)Select;
            v331[16] = 0;
            WORD4(v336) = 0;
            v337 = v157;
            v158 = sub_22E3C187C(a2, (unint64_t)&v329, 1);
            v159 = *(_QWORD *)a2 + 152 * *(unsigned int *)(a2 + 8);
            v160 = *(_OWORD *)(v158 + 16);
            *(_OWORD *)v159 = *(_OWORD *)v158;
            *(_OWORD *)(v159 + 16) = v160;
            v161 = *(_QWORD *)(v158 + 144);
            v162 = *(_OWORD *)(v158 + 128);
            v163 = *(_OWORD *)(v158 + 96);
            *(_OWORD *)(v159 + 112) = *(_OWORD *)(v158 + 112);
            *(_OWORD *)(v159 + 128) = v162;
            *(_QWORD *)(v159 + 144) = v161;
            *(_OWORD *)(v159 + 96) = v163;
            v164 = *(_OWORD *)(v158 + 80);
            v165 = *(_OWORD *)(v158 + 32);
            v166 = *(_OWORD *)(v158 + 48);
            *(_OWORD *)(v159 + 64) = *(_OWORD *)(v158 + 64);
            *(_OWORD *)(v159 + 80) = v164;
            *(_OWORD *)(v159 + 32) = v165;
            *(_OWORD *)(v159 + 48) = v166;
            ++*(_DWORD *)(a2 + 8);
LABEL_146:
            v28 = v300;
            if (v35 != 120)
              goto LABEL_66;
            goto LABEL_65;
          }
LABEL_120:
          *(_QWORD *)&v307 = v98;
          *((_QWORD *)&v307 + 1) = v298;
          *(_QWORD *)&v308 = v297;
          *((_QWORD *)&v308 + 1) = __PAIR64__(v296, v99);
          *(_QWORD *)&v309 = v295;
          *((_QWORD *)&v309 + 1) = v294;
          *(_QWORD *)&v329 = "icr.isnull";
          *(_WORD *)v331 = 259;
          v127 = sub_22E47EF74((uint64_t)v276, (uint64_t)&v307, (uint64_t)&v329);
          llvm::ConstantPointerNull::get(v75, v128);
          *(_QWORD *)&v329 = "icr.argument";
          *(_WORD *)v331 = 259;
          Select = llvm::IRBuilderBase::CreateSelect();
          if ((v278 & 0x40000) == 0)
          {
            v100 = 0;
            v101 = v94;
            v29 = a6;
            v103 = v293;
            v99 = v292;
            goto LABEL_143;
          }
          v273 = Select;
          v271 = *(_QWORD *)(v11 + 320);
          *(_QWORD *)&v329 = "icr.cont";
          *(_WORD *)v331 = 259;
          v129 = operator new();
          llvm::BasicBlock::BasicBlock();
          *(_QWORD *)&v329 = "icr.copy";
          *(_WORD *)v331 = 259;
          v130 = (_QWORD *)operator new();
          llvm::BasicBlock::BasicBlock();
          v131 = llvm::User::operator new((llvm::User *)0x40);
          v272 = (_QWORD *)v129;
          MEMORY[0x23489C09C](v131, v129, v130, v127, 0);
          *(_WORD *)v331 = 257;
          sub_22E3C12C8(v276, v131, (uint64_t)&v329);
          sub_22E5ED9B4((_QWORD *)v11, v130, 0);
          v126 = 0;
          if (!*(_QWORD *)(v11 + 5832))
            *(_QWORD *)(v11 + 5832) = v327;
          v96 = v276;
        }
        *(_QWORD *)&v316 = v291;
        *((_QWORD *)&v316 + 1) = v293;
        *(_QWORD *)&v317 = v298;
        *((_QWORD *)&v317 + 1) = v297;
        *(_DWORD *)v318 = v292;
        *(_DWORD *)&v318[4] = v296;
        *(_QWORD *)&v318[8] = v295;
        *(_QWORD *)&v318[16] = v294;
        *(_QWORD *)&v318[24] = v290;
        *(_QWORD *)&v319 = v289;
        *((_QWORD *)&v319 + 1) = v73;
        v320 = v74;
        *(_QWORD *)&v321 = v288;
        *((_QWORD *)&v321 + 1) = v287;
        *(_QWORD *)&v322 = v286;
        *((_QWORD *)&v322 + 1) = v285;
        v323 = v284;
        sub_22E4D7B28((_QWORD *)v11, (uint64_t)&v316, 0, (uint64_t)&v329);
        *(_QWORD *)&v343 = "icr.cast";
        LOWORD(v345) = 259;
        v138 = sub_22E3C1740(v96, 49, v329, (uint64_t)v279, (uint64_t)&v343);
        v101 = v94;
        v312[0] = v94;
        v312[1] = v283;
        v312[2] = v282;
        v313 = 0;
        v314 = *(_OWORD *)v350;
        v315 = *(_DWORD *)&v350[16];
        sub_22E3BEDDC(v96, v138, v312, 0);
        if ((v73 & 0x1C0) == 0x80)
          v139 = (uint64_t *)v138;
        else
          v139 = 0;
        if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 144) + 184) + 32) & 0x1800) != 0)
          v100 = v139;
        else
          v100 = 0;
        if ((v278 & 0x40000) == 0 || (v126 & 1) != 0)
        {
          v29 = a6;
          v103 = v293;
          v99 = v292;
          Select = v273;
        }
        else
        {
          v140 = v275[40];
          sub_22E5ED9B4(v275, v272, 0);
          v103 = v293;
          v99 = v292;
          if (v100)
          {
            v141 = *v100;
            *(_QWORD *)&v329 = "icr.to-use";
            *(_WORD *)v331 = 259;
            v142 = (llvm::PHINode *)sub_22E3C4B80(v276, v141, 2, (uint64_t)&v329);
            sub_22E3C4C50(v142, (uint64_t)v100, v140);
            v143 = llvm::UndefValue::get();
            sub_22E3C4C50(v142, v143, v271);
            v100 = (uint64_t *)v142;
          }
          v29 = a6;
          Select = v273;
          if ((_OWORD *)v275[729] == v327)
            v275[729] = 0;
        }
        goto LABEL_143;
      }
LABEL_63:
      if ((v33[1] & 3) == 0)
      {
        v104 = sub_22E619D68(v34);
        v105 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v34 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        if (*(_BYTE *)(v105 + 16) != 45 || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v105 + 24)) + 76) & 4) == 0)
        {
          if (v104 == 2
            && *v33 == 153
            && (*(_DWORD *)v33 & 0x1FC0000) == 0x100000
            && !sub_22F111B38(&v311))
          {
            sub_22E4D8D7C(&v316);
            v334 = v321;
            v335 = v322;
            *(_QWORD *)&v336 = v323;
            *(_OWORD *)v331 = *(_OWORD *)v318;
            *(_OWORD *)&v331[16] = *(_OWORD *)&v318[16];
            v332 = v319;
            v333 = v320;
            v329 = v316;
            v330 = v317;
            WORD4(v336) = 1;
            v337 = v34;
            v210 = sub_22E3C187C(a2, (unint64_t)&v329, 1);
            v211 = *(_QWORD *)a2 + 152 * *(unsigned int *)(a2 + 8);
            v212 = *(_OWORD *)(v210 + 16);
            *(_OWORD *)v211 = *(_OWORD *)v210;
            *(_OWORD *)(v211 + 16) = v212;
            v213 = *(_QWORD *)(v210 + 144);
            v214 = *(_OWORD *)(v210 + 128);
            v215 = *(_OWORD *)(v210 + 96);
            *(_OWORD *)(v211 + 112) = *(_OWORD *)(v210 + 112);
            *(_OWORD *)(v211 + 128) = v214;
            *(_QWORD *)(v211 + 144) = v213;
            *(_OWORD *)(v211 + 96) = v215;
            v216 = *(_OWORD *)(v210 + 80);
            v217 = *(_OWORD *)(v210 + 32);
            v218 = *(_OWORD *)(v210 + 48);
            *(_OWORD *)(v211 + 64) = *(_OWORD *)(v210 + 64);
            *(_OWORD *)(v211 + 80) = v216;
            *(_OWORD *)(v211 + 32) = v217;
            *(_OWORD *)(v211 + 48) = v218;
            ++*(_DWORD *)(a2 + 8);
          }
          else
          {
            DWORD2(v317) = 0;
            *(_QWORD *)&v317 = 0;
            v316 = 0uLL;
            memset(v318, 0, 25);
            v106 = *((_QWORD *)v33 + 1);
            if (sub_22E619D68(v106) == 2)
            {
              *(_QWORD *)&v307 = "agg.tmp";
              LOWORD(v309) = 259;
              sub_22E4211F0(v11, v106, (uint64_t)&v307, 0, (uint64_t)&v329);
              v316 = v329;
              v317 = v330;
              *(_OWORD *)v318 = *(_OWORD *)v331;
              *(_OWORD *)&v318[9] = *(_OWORD *)&v331[9];
              if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 144) + 184) + 92) & 0x8000) != 0
                && !sub_22F115260(*((_QWORD *)v33 + 1)))
              {
                DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(v11 + 144)
                                                                                              + 200));
                v108 = (llvm::Type *)sub_22E66C868(*(_QWORD *)(v11 + 144) + 280, *((_QWORD *)v33 + 1), 0);
                v109 = sub_22E475524(DataLayout, v108);
                v111 = v110;
                v112 = (_QWORD)v316 ? sub_22F289EE8((uint64_t)&v316, v11) : 0;
                v113 = sub_22E4C9CC0(v11, v109, v111, v112);
                v29 = a6;
                if (v113)
                {
                  v114 = v113;
                  v115 = *(unsigned int *)(a2 + 1480);
                  if (v115 >= *(unsigned int *)(a2 + 1484))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v115 = *(unsigned int *)(a2 + 1480);
                  }
                  v116 = (uint64_t *)(*(_QWORD *)(a2 + 1472) + 16 * v115);
                  *v116 = v112;
                  v116[1] = v114;
                  ++*(_DWORD *)(a2 + 1480);
                }
              }
            }
            v307 = v316;
            v308 = v317;
            v309 = *(_OWORD *)v318;
            v310 = *(_OWORD *)&v318[16];
            sub_22E4D79C0(&v329, v11, v33, &v307, 0);
            WORD4(v336) = 0;
            v337 = v34;
            v117 = sub_22E3C187C(a2, (unint64_t)&v329, 1);
            v118 = *(_QWORD *)a2 + 152 * *(unsigned int *)(a2 + 8);
            v119 = *(_OWORD *)(v117 + 16);
            *(_OWORD *)v118 = *(_OWORD *)v117;
            *(_OWORD *)(v118 + 16) = v119;
            v120 = *(_QWORD *)(v117 + 144);
            v121 = *(_OWORD *)(v117 + 128);
            v122 = *(_OWORD *)(v117 + 96);
            *(_OWORD *)(v118 + 112) = *(_OWORD *)(v117 + 112);
            *(_OWORD *)(v118 + 128) = v121;
            *(_QWORD *)(v118 + 144) = v120;
            *(_OWORD *)(v118 + 96) = v122;
            v123 = *(_OWORD *)(v117 + 80);
            v124 = *(_OWORD *)(v117 + 32);
            v125 = *(_OWORD *)(v117 + 48);
            *(_OWORD *)(v118 + 64) = *(_OWORD *)(v117 + 64);
            *(_OWORD *)(v118 + 80) = v123;
            *(_OWORD *)(v118 + 32) = v124;
            *(_OWORD *)(v118 + 48) = v125;
            ++*(_DWORD *)(a2 + 8);
            v30 = v281;
          }
          v28 = v300;
          goto LABEL_164;
        }
        if (*(_QWORD *)(a2 + 1520))
        {
          v299 = sub_22E66C868(*(_QWORD *)(v11 + 144) + 280, v34, 0);
          llvm::PointerType::get();
          llvm::PointerType::get();
          llvm::UndefValue::get();
          LOWORD(v309) = 257;
          v132 = llvm::User::operator new((llvm::User *)0x40);
          *(_WORD *)v331 = 257;
          v133 = v132;
          llvm::LoadInst::LoadInst();
          (*(void (**)(_QWORD, uint64_t, __int128 *, _QWORD, _QWORD))(**(_QWORD **)(v11 + 352) + 16))(*(_QWORD *)(v11 + 352), v133, &v307, *(_QWORD *)(v11 + 320), *(_QWORD *)(v11 + 328));
          v134 = *(unsigned int *)(v11 + 280);
          if ((_DWORD)v134)
          {
            v229 = *(_QWORD *)(v11 + 272);
            v230 = v229 + 16 * v134;
            do
            {
              llvm::Instruction::setMetadata();
              v229 += 16;
            }
            while (v229 != v230);
          }
          v135 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFFFF0) + 8);
          if ((v135 & 8) != 0)
          {
            v137 = *(_QWORD *)((v135 & 0xFFFFFFFFFFFFFFF0) + 0x18);
            v136 = *(_QWORD *)((v135 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
          }
          else
          {
            v136 = 0;
            v137 = 0;
          }
          v29 = a6;
          v30 = v281;
          *(_QWORD *)&v316 = v133;
          *((_QWORD *)&v316 + 1) = v299;
          *(_QWORD *)&v317 = 4;
          DWORD2(v317) = 0;
          *(_QWORD *)v318 = 0;
          *(_QWORD *)&v318[8] = 0;
          *(_QWORD *)&v318[16] = v136 | v137 | (v135 | v34) & 7;
          v318[24] = 0;
        }
        else
        {
          *(_QWORD *)&v329 = "agg.tmp";
          *(_WORD *)v331 = 259;
          sub_22E4211F0(v11, v34, (uint64_t)&v329, 0, (uint64_t)&v316);
        }
        v193 = sub_22F10C2A4(*(_QWORD *)(v34 & 0xFFFFFFFFFFFFFFF0));
        if (!v193 || (v196 = v193, (*(_DWORD *)(v193 + 28) & 0x7Fu) - 35 >= 3))
        {
          v194 = sub_22F115260(v34);
          v195 = sub_22F245DD4(v11, v194) ^ 1;
          goto LABEL_160;
        }
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v193 + 104) + 96), *(_QWORD *)(v193 + 104));
        if ((**(_QWORD **)(v196 + 128) & 0x100000000000) == 0)
        {
          v195 = 0;
LABEL_160:
          v318[24] |= 1u;
          v307 = v316;
          v308 = v317;
          v309 = *(_OWORD *)v318;
          v310 = *(_OWORD *)&v318[16];
          sub_22E4EF100(v11, v33, &v307);
          if ((_QWORD)v316)
          {
            v197 = *((_QWORD *)&v316 + 1);
            v324 = v317;
            *(_OWORD *)v325 = *(_OWORD *)v318;
            v198 = (v318[16] >> 2) & 1 | 4;
          }
          else
          {
            LOBYTE(v198) = 0;
            v197 = 0;
          }
          v28 = v300;
          v330 = v324;
          *(_OWORD *)v331 = *(_OWORD *)v325;
          *(_QWORD *)&v329 = v316;
          *((_QWORD *)&v329 + 1) = v197;
          v331[16] = v198;
          WORD4(v336) = 0;
          v337 = v34;
          v199 = sub_22E3C187C(a2, (unint64_t)&v329, 1);
          v200 = *(_QWORD *)a2 + 152 * *(unsigned int *)(a2 + 8);
          v201 = *(_OWORD *)(v199 + 16);
          *(_OWORD *)v200 = *(_OWORD *)v199;
          *(_OWORD *)(v200 + 16) = v201;
          v202 = *(_QWORD *)(v199 + 144);
          v203 = *(_OWORD *)(v199 + 128);
          v204 = *(_OWORD *)(v199 + 96);
          *(_OWORD *)(v200 + 112) = *(_OWORD *)(v199 + 112);
          *(_OWORD *)(v200 + 128) = v203;
          *(_QWORD *)(v200 + 144) = v202;
          *(_OWORD *)(v200 + 96) = v204;
          v205 = *(_OWORD *)(v199 + 80);
          v206 = *(_OWORD *)(v199 + 32);
          v207 = *(_OWORD *)(v199 + 48);
          *(_OWORD *)(v200 + 64) = *(_OWORD *)(v199 + 64);
          *(_OWORD *)(v200 + 80) = v205;
          *(_OWORD *)(v200 + 32) = v206;
          *(_OWORD *)(v200 + 48) = v207;
          ++*(_DWORD *)(a2 + 8);
          if ((v195 & 1) == 0)
          {
            if (*(_QWORD *)(v11 + 5832))
            {
              v329 = v316;
              v330 = v317;
              *(_OWORD *)v331 = *(_OWORD *)v318;
              sub_22E47F9F4(v11, (uint64_t)&v329, (uint64_t)&v343);
              v329 = v343;
              v330 = v344;
              *(_OWORD *)v331 = v345;
              *(_QWORD *)&v331[16] = v346;
              v231 = sub_22E4899EC(v266, 1, 72);
              *(_QWORD *)v231 = off_24FA632D0;
              *(_OWORD *)(v231 + 8) = v329;
              *(_OWORD *)(v231 + 24) = v330;
              *(_OWORD *)(v231 + 40) = *(_OWORD *)v331;
              *(_QWORD *)(v231 + 56) = *(_QWORD *)&v331[16];
              *(_QWORD *)(v231 + 64) = v34;
              v233 = sub_22E489C10(v11, v232);
              sub_22F2531F0(v11, v233, v234);
            }
            else
            {
              v329 = v316;
              v330 = v317;
              *(_OWORD *)v331 = *(_OWORD *)v318;
              v228 = sub_22E4899EC(v266, 1, 64);
              *(_QWORD *)v228 = off_24FA632A8;
              *(_OWORD *)(v228 + 8) = v329;
              *(_OWORD *)(v228 + 24) = v330;
              *(_OWORD *)(v228 + 40) = *(_OWORD *)v331;
              *(_QWORD *)(v228 + 56) = v34;
            }
            v235 = sub_22F24866C((uint64_t)v276);
            v236 = *(_QWORD *)(v11 + 1992);
            v237 = *(_QWORD *)(v11 + 2000);
            v238 = *(unsigned int *)(a2 + 1448);
            if (v238 >= *(unsigned int *)(a2 + 1452))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v238 = *(unsigned int *)(a2 + 1448);
            }
            v239 = (_QWORD *)(*(_QWORD *)(a2 + 1440) + 16 * v238);
            *v239 = v236 - v237;
            v239[1] = v235;
            ++*(_DWORD *)(a2 + 1448);
            v29 = a6;
            v30 = v281;
          }
          goto LABEL_164;
        }
        v307 = v316;
        v308 = v317;
        v309 = *(_OWORD *)v318;
        v310 = *(_OWORD *)&v318[16];
        sub_22E4EF100(v11, v33, &v307);
        if ((_QWORD)v316)
        {
          v208 = *((_QWORD *)&v316 + 1);
          v324 = v317;
          *(_OWORD *)v325 = *(_OWORD *)v318;
          v209 = (v318[16] >> 2) & 1 | 4;
        }
        else
        {
          LOBYTE(v209) = 0;
          v208 = 0;
        }
        v28 = v300;
        v330 = v324;
        *(_OWORD *)v331 = *(_OWORD *)v325;
        *(_QWORD *)&v329 = v316;
        *((_QWORD *)&v329 + 1) = v208;
        v331[16] = v209;
        WORD4(v336) = 0;
        v337 = v34;
        v219 = sub_22E3C187C(a2, (unint64_t)&v329, 1);
        v220 = *(_QWORD *)a2 + 152 * *(unsigned int *)(a2 + 8);
        v222 = *(_OWORD *)(v219 + 112);
        v221 = *(_OWORD *)(v219 + 128);
        v223 = *(_OWORD *)(v219 + 96);
        *(_QWORD *)(v220 + 144) = *(_QWORD *)(v219 + 144);
        *(_OWORD *)(v220 + 112) = v222;
        *(_OWORD *)(v220 + 128) = v221;
        *(_OWORD *)(v220 + 96) = v223;
        v224 = *(_OWORD *)(v219 + 80);
        v226 = *(_OWORD *)(v219 + 32);
        v225 = *(_OWORD *)(v219 + 48);
        *(_OWORD *)(v220 + 64) = *(_OWORD *)(v219 + 64);
        *(_OWORD *)(v220 + 80) = v224;
        *(_OWORD *)(v220 + 32) = v226;
        *(_OWORD *)(v220 + 48) = v225;
        v227 = *(_OWORD *)(v219 + 16);
        *(_OWORD *)v220 = *(_OWORD *)v219;
        *(_OWORD *)(v220 + 16) = v227;
        ++*(_DWORD *)(a2 + 8);
LABEL_164:
        if (!v37)
          goto LABEL_66;
LABEL_65:
        *(_BYTE *)(v11 + 2892) = 0;
        goto LABEL_66;
      }
      sub_22E4DDB88(v11, (uint64_t)v33, (uint64_t)&v329);
      WORD4(v336) = 0;
      v337 = v34;
      v45 = sub_22E3C187C(a2, (unint64_t)&v329, 1);
      v46 = *(_QWORD *)a2 + 152 * *(unsigned int *)(a2 + 8);
      v48 = *(_OWORD *)(v45 + 112);
      v47 = *(_OWORD *)(v45 + 128);
      v49 = *(_OWORD *)(v45 + 96);
      *(_QWORD *)(v46 + 144) = *(_QWORD *)(v45 + 144);
      *(_OWORD *)(v46 + 112) = v48;
      *(_OWORD *)(v46 + 128) = v47;
      *(_OWORD *)(v46 + 96) = v49;
      v50 = *(_OWORD *)(v45 + 80);
      v52 = *(_OWORD *)(v45 + 32);
      v51 = *(_OWORD *)(v45 + 48);
      *(_OWORD *)(v46 + 64) = *(_OWORD *)(v45 + 64);
      *(_OWORD *)(v46 + 80) = v50;
      *(_OWORD *)(v46 + 32) = v52;
      *(_OWORD *)(v46 + 48) = v51;
      v53 = *(_OWORD *)(v45 + 16);
      *(_OWORD *)v46 = *(_OWORD *)v45;
      *(_OWORD *)(v46 + 16) = v53;
      ++*(_DWORD *)(a2 + 8);
      v28 = v300;
      if (v37)
        goto LABEL_65;
LABEL_66:
      v54 = *(_QWORD *)a2 + 152 * *(unsigned int *)(a2 + 8);
      if (!*(_BYTE *)(v54 - 16))
      {
        v55 = *(_QWORD **)(v54 - 152);
        v56 = *(_OWORD *)(v54 - 128);
        v304 = *(_OWORD *)(v54 - 144);
        v305 = v56;
        v306 = *(_OWORD *)(v54 - 112);
        v303 = v55;
        v57 = *((_QWORD *)v347 + v302);
        sub_22EFF605C(*(_QWORD *)(v30 + 8 * v302));
        sub_22E47770C(v11, (uint64_t)&v303, v57, v58, v29, v302 + a7);
        if (v29)
        {
          if ((*(_DWORD *)(v29 + 28) & 0x7Eu) - 52 <= 5)
          {
            if ((v59 = *(unsigned __int8 **)(v30 + 8 * v302),
                  (v60 = *(_QWORD *)(*(_QWORD *)(v29 + 48) & 0xFFFFFFFFFFFFFFF0)) != 0)
              && *(_BYTE *)(v60 + 16) == 26
              || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v60 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
              && (v60 = sub_22F10CF48(v60)) != 0)
            {
              if (v302 < (unsigned __int16)(*(_QWORD *)(v60 + 16) >> 38))
              {
                v61 = 120;
                if ((*(_DWORD *)(v29 + 28) & 0x7Eu) - 58 < 0xFFFFFFFA)
                  v61 = 96;
                v62 = *(_QWORD *)(*(_QWORD *)(v29 + v61) + 8 * v302);
                if ((*(_BYTE *)(v62 + 29) & 1) != 0)
                {
                  sub_22EFC8E88(v62);
                  v64 = *(uint64_t **)v63;
                  v65 = *(unsigned int *)(v63 + 8);
                  v66 = *(uint64_t **)v63;
                  if ((_DWORD)v65)
                  {
                    v67 = 8 * v65;
                    v66 = *(uint64_t **)v63;
                    while (*(_WORD *)(*v66 + 32) != 83)
                    {
                      ++v66;
                      v67 -= 8;
                      if (!v67)
                        goto LABEL_67;
                    }
                  }
                  if (v66 != &v64[v65])
                  {
                    do
                    {
                      v168 = *v64++;
                      v167 = v168;
                    }
                    while (*(_WORD *)(v168 + 32) != 83);
                    v169 = *(_QWORD *)(*(_QWORD *)(v11 + 144) + 144);
                    v170 = sub_22EF67C8C(v169);
                    v171 = (llvm::LLVMContext *)sub_22EF5CDF0(v169, *(_QWORD *)(v170 & 0xFFFFFFFFFFFFFFF0));
                    IntNTy = llvm::Type::getIntNTy(*(llvm::Type **)(v11 + 336), v171);
                    v173 = *(_DWORD *)(v167 + 36);
                    v174 = sub_22F248BA8(v167);
                    v329 = (unint64_t)sub_22F2479EC(v11, v59, v173, IntNTy, v55, v174, v175, v176);
                    v331[16] = 0;
                    WORD4(v336) = 0;
                    v337 = v170;
                    v177 = sub_22E3C187C(a2, (unint64_t)&v329, 1);
                    v178 = *(_QWORD *)a2 + 152 * *(unsigned int *)(a2 + 8);
                    v179 = *(_OWORD *)(v177 + 16);
                    *(_OWORD *)v178 = *(_OWORD *)v177;
                    *(_OWORD *)(v178 + 16) = v179;
                    v180 = *(_QWORD *)(v177 + 144);
                    v181 = *(_OWORD *)(v177 + 128);
                    v182 = *(_OWORD *)(v177 + 96);
                    *(_OWORD *)(v178 + 112) = *(_OWORD *)(v177 + 112);
                    *(_OWORD *)(v178 + 128) = v181;
                    *(_QWORD *)(v178 + 144) = v180;
                    *(_OWORD *)(v178 + 96) = v182;
                    v183 = *(_OWORD *)(v177 + 80);
                    v184 = *(_OWORD *)(v177 + 32);
                    v185 = *(_OWORD *)(v177 + 48);
                    *(_OWORD *)(v178 + 64) = *(_OWORD *)(v177 + 64);
                    *(_OWORD *)(v178 + 80) = v183;
                    *(_OWORD *)(v178 + 32) = v184;
                    *(_OWORD *)(v178 + 48) = v185;
                    v186 = *(_DWORD *)(a2 + 8) + 1;
                    *(_DWORD *)(a2 + 8) = v186;
                    v29 = a6;
                    v30 = v281;
                    if (!v301)
                    {
                      v187 = *(_QWORD *)a2 + 152 * v186;
                      v188 = (__int128 *)(v187 - 304);
                      v334 = *(_OWORD *)(v187 - 56);
                      v335 = *(_OWORD *)(v187 - 40);
                      v336 = *(_OWORD *)(v187 - 24);
                      v337 = *(_QWORD *)(v187 - 8);
                      *(_OWORD *)v331 = *(_OWORD *)(v187 - 120);
                      *(_OWORD *)&v331[16] = *(_OWORD *)(v187 - 104);
                      v332 = *(_OWORD *)(v187 - 88);
                      v333 = *(_OWORD *)(v187 - 72);
                      v329 = *(_OWORD *)(v187 - 152);
                      v330 = *(_OWORD *)(v187 - 136);
                      v189 = *(_OWORD *)(v187 - 224);
                      *(_OWORD *)(v187 - 56) = *(_OWORD *)(v187 - 208);
                      v190 = *(_OWORD *)(v187 - 176);
                      *(_OWORD *)(v187 - 40) = *(_OWORD *)(v187 - 192);
                      *(_OWORD *)(v187 - 24) = v190;
                      *(_OWORD *)(v187 - 120) = *(_OWORD *)(v187 - 272);
                      v191 = *(_OWORD *)(v187 - 240);
                      *(_OWORD *)(v187 - 104) = *(_OWORD *)(v187 - 256);
                      *(_OWORD *)(v187 - 88) = v191;
                      *(_OWORD *)(v187 - 72) = v189;
                      v192 = *(_OWORD *)(v187 - 288);
                      *(_OWORD *)(v187 - 152) = *(_OWORD *)(v187 - 304);
                      *(_QWORD *)(v187 - 8) = *(_QWORD *)(v187 - 160);
                      *(_OWORD *)(v187 - 136) = v192;
                      *(_OWORD *)(v187 - 208) = v334;
                      *(_OWORD *)(v187 - 192) = v335;
                      *(_OWORD *)(v187 - 176) = v336;
                      *(_QWORD *)(v187 - 160) = v337;
                      v188[2] = *(_OWORD *)v331;
                      *(_OWORD *)(v187 - 256) = *(_OWORD *)&v331[16];
                      *(_OWORD *)(v187 - 240) = v332;
                      *(_OWORD *)(v187 - 224) = v333;
                      *v188 = v329;
                      v188[1] = v330;
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_67:
      ++v31;
    }
    while (v31 != v28);
  }
  if (v270 == 30)
  {
    v243 = v348;
    v244 = v268;
    if (v268 == (_DWORD)v348)
    {
      v245 = v267;
    }
    else
    {
      v246 = 0;
      v245 = v267;
      do
      {
        v247 = v347;
        v248 = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(v11 + 144) + 144), *((_QWORD *)v347 + v244));
        v246 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(v11 + 144) + 320) + 48))(*(_QWORD *)(*(_QWORD *)(v11 + 144) + 320), v11, v247[v244++])+ (v246 + v248 - 1) / v248 * v248;
      }
      while (v243 != v244);
    }
    v249 = *(_QWORD *)(v11 + 144);
    v250 = (llvm::LLVMContext *)sub_22EF67C8C(*(_QWORD *)(v249 + 144));
    sub_22E66CB04((llvm::Type ***)(v249 + 280), v250);
    v329 = (unint64_t)llvm::ConstantInt::get();
    v331[16] = 0;
    WORD4(v336) = 0;
    v337 = (uint64_t)v250;
    sub_22E46B884(a2, *(_QWORD *)a2 + 152 * v269 + 152 * v245, (unint64_t)&v329);
  }
  if (!v301)
  {
    v251 = *(_DWORD *)(a2 + 8);
    if (v269 != v251)
    {
      v252 = *(_QWORD *)a2 + 152 * v251 - 152;
      if (*(_QWORD *)a2 + 152 * (unint64_t)v269 < v252)
      {
        v253 = *(_QWORD *)a2 + 152 * v269 + 152;
        do
        {
          v334 = *(_OWORD *)(v253 - 56);
          v335 = *(_OWORD *)(v253 - 40);
          v336 = *(_OWORD *)(v253 - 24);
          v337 = *(_QWORD *)(v253 - 8);
          *(_OWORD *)v331 = *(_OWORD *)(v253 - 120);
          *(_OWORD *)&v331[16] = *(_OWORD *)(v253 - 104);
          v332 = *(_OWORD *)(v253 - 88);
          v333 = *(_OWORD *)(v253 - 72);
          v329 = *(_OWORD *)(v253 - 152);
          v330 = *(_OWORD *)(v253 - 136);
          v254 = *(_OWORD *)v252;
          *(_OWORD *)(v253 - 136) = *(_OWORD *)(v252 + 16);
          *(_OWORD *)(v253 - 152) = v254;
          v255 = *(_OWORD *)(v252 + 32);
          v256 = *(_OWORD *)(v252 + 48);
          v257 = *(_OWORD *)(v252 + 64);
          *(_OWORD *)(v253 - 72) = *(_OWORD *)(v252 + 80);
          *(_OWORD *)(v253 - 88) = v257;
          *(_OWORD *)(v253 - 104) = v256;
          *(_OWORD *)(v253 - 120) = v255;
          v258 = *(_OWORD *)(v252 + 96);
          v259 = *(_OWORD *)(v252 + 112);
          v260 = *(_OWORD *)(v252 + 128);
          *(_QWORD *)(v253 - 8) = *(_QWORD *)(v252 + 144);
          *(_OWORD *)(v253 - 24) = v260;
          *(_OWORD *)(v253 - 40) = v259;
          *(_OWORD *)(v253 - 56) = v258;
          *(_OWORD *)(v252 + 96) = v334;
          *(_OWORD *)(v252 + 112) = v335;
          *(_OWORD *)(v252 + 128) = v336;
          *(_QWORD *)(v252 + 144) = v337;
          *(_OWORD *)(v252 + 32) = *(_OWORD *)v331;
          *(_OWORD *)(v252 + 48) = *(_OWORD *)&v331[16];
          *(_OWORD *)(v252 + 64) = v332;
          *(_OWORD *)(v252 + 80) = v333;
          *(_OWORD *)v252 = v329;
          *(_OWORD *)(v252 + 16) = v330;
          v252 -= 152;
          v261 = v253 >= v252;
          v253 += 152;
        }
        while (!v261);
      }
    }
  }
  if (v347 != v349)
    free(v347);
}

double sub_22E479748@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v5;
  __int128 v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v22[8];
  uint64_t v23;
  __int128 v24[8];
  uint64_t v25;
  const char *v26;
  __int16 v27;
  _BYTE v28[64];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _OWORD v34[2];
  uint64_t v35;
  __int128 v36[2];
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;

  if (*(_BYTE *)(a1 + 136))
  {
    v8 = *(_QWORD *)(a1 + 144);
    v26 = "tmp";
    v27 = 259;
    v9 = sub_22F25E4D4(a2, v8, (uint64_t)&v26, 0);
    v11 = 0;
    if (v9 <= 7)
      v12 = 0;
    else
      v12 = v9 & 0xFFFFFFFFFFFFFFF8;
    if (v9 <= 7)
      v13 = 0;
    else
      v13 = v10 & 0xFFFFFFFFFFFFFFF8;
    if (v9 >= 8)
      v11 = 1 << (v10 & 7 | (8 * (v9 & 7)));
    v14 = *(_QWORD *)(a1 + 144);
    sub_22E6281E0(*(_QWORD **)(a2 + 144), v14, (uint64_t)v34);
    *(_QWORD *)&v38 = v12;
    *((_QWORD *)&v38 + 1) = v13;
    v39 = v11;
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v15 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
    v36[0] = v34[0];
    v36[1] = v34[1];
    v37 = v35;
    memset(&v28[8], 0, 28);
    *(_QWORD *)&v28[40] = 0;
    *(_QWORD *)&v28[48] = 0;
    v29 = 0uLL;
    *(_QWORD *)((char *)&v30 + 4) = 2;
    *(_DWORD *)v28 = 0;
    v31 = 0u;
    v32 = 0u;
    sub_22E3C113C((uint64_t)v28, &v38, v14, 2, v36, v15);
    v24[6] = v31;
    v24[7] = v32;
    v25 = v33;
    v24[2] = *(_OWORD *)&v28[32];
    v24[3] = *(_OWORD *)&v28[48];
    v24[4] = v29;
    v24[5] = v30;
    v24[0] = *(_OWORD *)v28;
    v24[1] = *(_OWORD *)&v28[16];
    v16 = *(_OWORD *)(a1 + 80);
    v17 = *(_OWORD *)(a1 + 112);
    v22[6] = *(_OWORD *)(a1 + 96);
    v22[7] = v17;
    v23 = *(_QWORD *)(a1 + 128);
    v18 = *(_OWORD *)(a1 + 48);
    v22[2] = *(_OWORD *)(a1 + 32);
    v22[3] = v18;
    v22[4] = *(_OWORD *)(a1 + 64);
    v22[5] = v16;
    v19 = *(_OWORD *)(a1 + 16);
    v22[0] = *(_OWORD *)a1;
    v22[1] = v19;
    sub_22E4EF4B8((_QWORD *)a2, v24, v22, *(_QWORD *)(a1 + 144), 0, (*(_DWORD *)(a1 + 72) >> 2) & 1);
    *(_BYTE *)(a1 + 137) = 1;
    v20 = *(_OWORD *)&v28[24];
    *(_OWORD *)a3 = *(_OWORD *)&v28[8];
    *(_OWORD *)(a3 + 16) = v20;
    *(_QWORD *)&v6 = *(_QWORD *)&v28[40];
    *(_OWORD *)(a3 + 32) = *(_OWORD *)&v28[40];
    *(_BYTE *)(a3 + 48) = *(_BYTE *)(a3 + 48) & 0xF8 | 4;
  }
  else
  {
    v5 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a1;
    *(_OWORD *)(a3 + 16) = v5;
    v6 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a3 + 32) = v6;
    *(_QWORD *)(a3 + 48) = *(_QWORD *)(a1 + 48);
  }
  return *(double *)&v6;
}

uint64_t sub_22E479938(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  __int128 v17[8];
  uint64_t v18;
  __int128 v19[8];
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _OWORD v24[8];
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _OWORD v35[2];
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;

  v5 = a3[1];
  v40 = *a3;
  v41 = v5;
  v42 = a3[2];
  v6 = *(_QWORD *)(a1 + 144);
  sub_22E6281E0(*(_QWORD **)(a2 + 144), v6, (uint64_t)&v37);
  v43 = v40;
  v44 = v41;
  v45 = v42;
  v7 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
  v21 = v37;
  v22 = v38;
  *(_QWORD *)&v23 = v39;
  v27 = 0uLL;
  LODWORD(v28) = 0;
  *((_QWORD *)&v26 + 1) = 0;
  *(_QWORD *)&v29 = 0;
  *((_QWORD *)&v28 + 1) = 0;
  v30 = 0uLL;
  *(_QWORD *)((char *)&v31 + 4) = 2;
  LODWORD(v26) = 0;
  v32 = 0u;
  v33 = 0u;
  sub_22E3C113C((uint64_t)&v26, &v43, v6, 2, &v21, v7);
  if (*(_BYTE *)(a1 + 136))
  {
    v8 = (__int128 *)(a1 + 8);
  }
  else
  {
    if ((*(_BYTE *)(a1 + 48) & 6) == 2)
    {
      v15 = *(_QWORD *)a1;
      v16 = *(_QWORD *)(a1 + 8);
      v49 = v32;
      v50 = v33;
      v51 = v34;
      v45 = v28;
      v46 = v29;
      v47 = v30;
      v48 = v31;
      v43 = v26;
      v44 = v27;
      *(_QWORD *)&v40 = a2;
      *((_QWORD *)&v40 + 1) = a2 + 272;
      LOWORD(v41) = 0;
      result = sub_22E5025C8((uint64_t *)&v40, v15, v16, (uint64_t)&v43, 1);
      goto LABEL_10;
    }
    if ((*(_BYTE *)(a1 + 48) & 6) == 0)
    {
      v13 = *(_QWORD *)a1;
      v24[6] = v32;
      v24[7] = v33;
      v25 = v34;
      v24[2] = v28;
      v24[3] = v29;
      v24[4] = v30;
      v24[5] = v31;
      v24[0] = v26;
      v24[1] = v27;
      result = sub_22E4E87FC(a2, v13, v24, 1);
      goto LABEL_10;
    }
    v8 = (__int128 *)a1;
  }
  v9 = v8[1];
  v21 = *v8;
  v22 = v9;
  v23 = v8[2];
  v10 = *(_QWORD *)(a1 + 144);
  sub_22E6281E0(*(_QWORD **)(a2 + 144), v10, (uint64_t)v35);
  v40 = v21;
  v41 = v22;
  v42 = v23;
  v11 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
  v37 = v35[0];
  v38 = v35[1];
  v39 = v36;
  v44 = 0uLL;
  LODWORD(v45) = 0;
  *((_QWORD *)&v43 + 1) = 0;
  *((_QWORD *)&v45 + 1) = 0;
  *(_QWORD *)&v46 = 0;
  v47 = 0uLL;
  *(_QWORD *)((char *)&v48 + 4) = 2;
  LODWORD(v43) = 0;
  v49 = 0u;
  v50 = 0u;
  sub_22E3C113C((uint64_t)&v43, &v40, v10, 2, &v37, v11);
  v19[6] = v32;
  v19[7] = v33;
  v20 = v34;
  v19[2] = v28;
  v19[3] = v29;
  v19[4] = v30;
  v19[5] = v31;
  v19[0] = v26;
  v19[1] = v27;
  v17[6] = v49;
  v17[7] = v50;
  v18 = v51;
  v17[2] = v45;
  v17[3] = v46;
  v17[4] = v47;
  v17[5] = v48;
  v17[0] = v43;
  v17[1] = v44;
  if (*(_BYTE *)(a1 + 136))
    v12 = (*(unsigned __int8 *)(a1 + 72) >> 2) & 1;
  else
    v12 = *(_BYTE *)(a1 + 48) & 1;
  result = sub_22E4EF4B8((_QWORD *)a2, v19, v17, *(_QWORD *)(a1 + 144), 0, v12);
LABEL_10:
  *(_BYTE *)(a1 + 137) = 1;
  return result;
}

BOOL sub_22E479BE0(uint64_t a1)
{
  uint64_t v1;
  int v2;
  BOOL v3;
  uint64_t v4;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0);
  v2 = *(_DWORD *)(v1 + 16);
  if (v1)
    v3 = v2 == 11;
  else
    v3 = 0;
  if (v3)
    return ((*(_DWORD *)(v1 + 16) >> 19) & 0x1FEu) - 166 < 0x14;
  if (v1 && v2 == 44)
  {
    v4 = sub_22F114198(*(_QWORD *)(v1 + 24));
    if ((*(_BYTE *)(v4 + 74) & 1) == 0 && *(_QWORD *)(v4 + 128) < 8uLL)
      return 0;
    return (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v1 + 24)) + 76) & 0x80) == 0;
  }
  else
  {
    return v2 == 9;
  }
}

llvm::Value *sub_22E479C7C(uint64_t a1, uint64_t a2, llvm::Value *this, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  llvm::Value *result;
  _QWORD *v14;
  llvm::Value *v15;
  uint64_t v16;
  char *v17;
  llvm::Value *v18;
  void *v19;
  unsigned int v20;
  _QWORD v21[7];

  v21[6] = *MEMORY[0x24BDAC8D0];
  v12 = (uint64_t *)(a1 + 272);
  sub_22E479DA0(this, a1, &v19);
  result = sub_22E47DDEC(v12, a2, (uint64_t)this, a4, a5, (uint64_t)v19, v20, a6, 0);
  v14 = v19;
  if (v20)
  {
    v15 = result;
    v16 = 48 * v20;
    v17 = (char *)v19 - 48;
    do
    {
      sub_22E47FB08((uint64_t)&v17[v16]);
      v16 -= 48;
    }
    while (v16);
    v14 = v19;
    result = v15;
  }
  if (v14 != v21)
  {
    v18 = result;
    free(v14);
    result = v18;
  }
  *((_WORD *)result + 9) = *((_WORD *)result + 9) & 0xF003 | (4 * *(_WORD *)(a1 + 136));
  return result;
}

uint64_t sub_22E479DA0@<X0>(llvm::Value *this@<X1>, uint64_t result@<X0>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  *a3 = a3 + 2;
  a3[1] = 0x100000000;
  if (*(_QWORD *)(result + 2616))
  {
    v4 = result;
    v5 = llvm::Value::stripPointerCasts(this);
    if (!v5)
      return sub_22E479E20((uint64_t)a3, "funclet", (uint64_t *)(v4 + 2616));
    if (*(_BYTE *)(v5 + 16))
      return sub_22E479E20((uint64_t)a3, "funclet", (uint64_t *)(v4 + 2616));
    if ((*(_BYTE *)(v5 + 33) & 0x20) == 0)
      return sub_22E479E20((uint64_t)a3, "funclet", (uint64_t *)(v4 + 2616));
    result = llvm::Function::hasFnAttribute();
    if ((result & 1) == 0)
      return sub_22E479E20((uint64_t)a3, "funclet", (uint64_t *)(v4 + 2616));
  }
  return result;
}

uint64_t sub_22E479E20(uint64_t a1, char *__s, uint64_t *a3)
{
  unsigned int v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  uint64_t v10;
  __int128 *p_dst;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int v18;
  __int128 __dst;
  unint64_t v21;

  v6 = *(_DWORD *)(a1 + 8);
  if (v6 < *(_DWORD *)(a1 + 12))
  {
    v7 = *(_QWORD *)a1;
    v8 = strlen(__s);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v9 = v8;
    v10 = v7 + 48 * v6;
    if (v8 >= 0x17)
    {
      v12 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v12 = v8 | 7;
      v13 = v12 + 1;
      p_dst = (__int128 *)operator new(v12 + 1);
      *((_QWORD *)&__dst + 1) = v9;
      v21 = v13 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v21) = v8;
      p_dst = &__dst;
      if (!v8)
        goto LABEL_10;
    }
    memcpy(p_dst, __s, v9);
LABEL_10:
    *((_BYTE *)p_dst + v9) = 0;
    v14 = *a3;
    *(_OWORD *)v10 = __dst;
    *(_QWORD *)(v10 + 16) = v21;
    v15 = (_QWORD *)(v7 + 48 * v6);
    v15[4] = 0;
    v15[5] = 0;
    v16 = operator new(8uLL);
    v15[3] = v16;
    v15[5] = v16 + 1;
    *v16 = v14;
    v15[4] = v16 + 1;
    v17 = *(_QWORD *)a1;
    v18 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v18;
    return v17 + 48 * v18 - 48;
  }
  return sub_22E47FB48(a1, __s, a3);
}

llvm::ValueHandleBase *sub_22E479F7C(uint64_t a1, char *a2)
{
  char *v2;
  uint64_t v4;
  unint64_t v5;
  llvm::ValueHandleBase *result;
  unint64_t v7;
  char *v9;

  v2 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v7 = v5 + 32 * v4;
    if (v5 <= (unint64_t)a2 && v7 > (unint64_t)a2)
    {
      v9 = &a2[-v5];
      sub_22F24FDD8(a1);
      v5 = *(_QWORD *)a1;
      v2 = &v9[*(_QWORD *)a1];
    }
    else
    {
      sub_22F24FDD8(a1);
      v5 = *(_QWORD *)a1;
    }
  }
  result = sub_22E47FD64((llvm::ValueHandleBase *)(v5 + 32 * *(unsigned int *)(a1 + 8)), v2);
  ++*(_DWORD *)(a1 + 8);
  return result;
}

void sub_22E47A004(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X5>, int a7@<W6>, unsigned int a8@<W7>, uint64_t a9@<X8>, char a10)
{
  uint64_t v12;
  unint64_t v13;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  unint64_t v45;
  unsigned int v46;
  unint64_t v47;
  BOOL v48;
  uint64_t v49;
  unint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  llvm *v58;
  llvm *v59;
  unint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 *v67;
  uint64_t v68;
  uint64_t StructLayout;
  unint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 *v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  int64_t v86;
  unsigned __int8 v87;
  unsigned int v88;
  int64_t v89;
  BOOL v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  int v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __int16 v120;
  uint64_t v122;
  uint64_t v123;
  llvm::LLVMContext *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int v130;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  char v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  llvm::Type *v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  llvm::DataLayout *v145;
  uint64_t v146;
  unint64_t v147;
  int v148;
  BOOL v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  llvm::Type *v156;
  llvm::DataLayout *v157;
  uint64_t v158;
  unint64_t v159;
  int v160;
  BOOL v161;
  unint64_t v162;
  llvm::DataLayout *v163;
  unint64_t PrefTypeAlignment;
  llvm::Type *v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  __int128 v169;
  llvm::DataLayout *v170;
  uint64_t v171;
  unint64_t v172;
  int v173;
  BOOL v174;
  unint64_t v175;
  llvm::DataLayout *v176;
  uint64_t v177;
  unint64_t v178;
  int v179;
  BOOL v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t i;
  uint64_t v187;
  uint64_t v188;
  __int128 *v189;
  unint64_t *v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  llvm::LLVMContext *v203;
  uint64_t v204;
  __int128 v205;
  __int128 v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  llvm::Type *v221;
  llvm::Type *v222;
  uint64_t v223;
  unint64_t v224;
  unint64_t v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  unint64_t v235;
  char v236;
  uint64_t v237;
  unint64_t v238;
  char v239;
  unint64_t v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t Name;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  unint64_t v257;
  llvm::Value *v258;
  uint64_t v259;
  _QWORD *v260;
  uint64_t v261;
  uint64_t v262;
  int v263;
  llvm::Value *v264;
  uint64_t v265;
  int v266;
  _QWORD *v267;
  _QWORD *v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t v272;
  unint64_t v273;
  unint64_t v274;
  llvm::DataLayout *DataLayout;
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  int v279;
  BOOL v280;
  llvm::Type *v281;
  unint64_t ABITypeAlignment;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t **v288;
  uint64_t *v289;
  unsigned int v290;
  unsigned int v291;
  uint64_t v292;
  size_t v293;
  void *v294;
  uint64_t v295;
  uint64_t v296;
  char v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  int hasFnAttr;
  uint64_t v303;
  uint64_t v304;
  uint64_t *v305;
  uint64_t v306;
  uint64_t *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unsigned __int8 *v311;
  llvm::Value *v312;
  unsigned __int8 *v313;
  llvm::Constant *v314;
  int isNullValue;
  BOOL v317;
  int8x8_t *v318;
  unsigned int v319;
  unint64_t v320;
  uint8x8_t v321;
  uint64_t v322;
  unint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t *v326;
  uint64_t v327;
  uint64_t *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  _QWORD *v332;
  uint64_t v333;
  llvm::APInt *v334;
  unsigned int v335;
  unint64_t v336;
  uint8x8_t v337;
  uint64_t v338;
  unint64_t v339;
  uint64_t v340;
  _QWORD *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t *v345;
  uint64_t v346;
  uint64_t *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  unsigned int v353;
  unsigned int v354;
  uint64_t v355;
  uint64_t *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  _QWORD *v360;
  uint64_t v361;
  uint64_t v362;
  BOOL v363;
  __int16 v364;
  char v365;
  uint64_t *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t *v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  char v381;
  _QWORD *v382;
  _QWORD *v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  __int128 v388;
  __int128 v389;
  uint64_t v390;
  uint64_t v391;
  __int128 v392;
  __int128 v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  uint64_t v398;
  uint64_t v399;
  __int128 v400;
  __int128 v401;
  __int128 v402;
  __int128 v403;
  __int128 v404;
  __int128 v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  llvm::Value *v410;
  llvm::Value *v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t *v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t *v417;
  __int128 v418;
  uint64_t *v419;
  int v420;
  unint64_t v421;
  int v422;
  uint64_t v423;
  char *v424;
  uint64_t v425;
  char *v426;
  void *v427;
  llvm::raw_ostream *v428;
  llvm::raw_ostream *v429;
  llvm::raw_ostream *v430;
  llvm::raw_ostream *v431;
  llvm::raw_ostream *v432;
  uint64_t v433;
  uint64_t v434;
  _QWORD *v435;
  unint64_t v436;
  llvm::Type **v437;
  uint64_t v438;
  unsigned int v439;
  uint64_t v440;
  uint64_t v441;
  __int128 v442;
  unsigned int v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  unint64_t v447;
  uint64_t v450;
  unsigned int v451;
  uint64_t v453;
  __int128 v454;
  uint64_t v455;
  uint64_t v456;
  unint64_t v457;
  uint64_t v458;
  unint64_t v459;
  uint64_t v460;
  uint64_t v462;
  unint64_t v463;
  unint64_t v464;
  uint64_t v465;
  unint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  char v471;
  uint64_t v472;
  llvm::Type **v473;
  _QWORD *v474;
  uint64_t v475;
  llvm::Type **v476;
  __int128 v477;
  uint64_t v478;
  uint64_t v479;
  __int128 v480;
  unint64_t v481;
  uint64_t v482;
  __int128 v483;
  uint64_t v484;
  unint64_t v485;
  _QWORD *v486;
  uint64_t *v487;
  uint64_t v488;
  int v489;
  __int128 v490[3];
  _QWORD v491[3];
  unsigned int v492;
  unsigned int v493;
  __int128 v494;
  _QWORD v495[3];
  int v496;
  uint64_t v497;
  uint64_t v498;
  _BYTE v499[24];
  uint64_t v500;
  int v501;
  llvm::Value *v502[2];
  __int128 v503;
  __int128 v504[4];
  _OWORD v505[9];
  unint64_t v506;
  _OWORD v507[3];
  _OWORD v508[3];
  __int128 v509;
  uint64_t v510;
  int v511;
  int v512;
  uint64_t v513;
  uint64_t v514;
  _QWORD v515[3];
  int v516;
  uint64_t v517;
  uint64_t v518;
  _OWORD v519[3];
  _OWORD v520[3];
  _QWORD v521[4];
  __int128 v522;
  __int128 v523[2];
  uint64_t v524;
  uint64_t v525;
  _OWORD v526[2];
  uint64_t v527;
  uint64_t v528;
  _QWORD v529[3];
  int v530;
  __int128 v531;
  __int128 v532;
  uint64_t v533;
  int v534;
  int v535;
  uint64_t v536;
  uint64_t v537;
  __int128 v538;
  uint64_t v539;
  int v540;
  uint64_t v541;
  uint64_t v542;
  _QWORD v543[3];
  int v544;
  uint64_t v545;
  uint64_t v546;
  _QWORD v547[4];
  __int128 v548;
  _OWORD v549[3];
  _QWORD v550[3];
  int v551;
  uint64_t v552;
  uint64_t v553;
  __int128 v554;
  uint64_t v555;
  int v556;
  uint64_t v557;
  uint64_t v558;
  _OWORD v559[3];
  __int128 v560[3];
  _QWORD v561[3];
  int v562;
  uint64_t v563;
  uint64_t v564;
  _OWORD v565[3];
  _QWORD v566[3];
  int v567;
  uint64_t v568;
  uint64_t v569;
  __int128 v570;
  uint64_t v571;
  int v572;
  uint64_t v573;
  uint64_t v574;
  _OWORD v575[3];
  _QWORD v576[3];
  int v577;
  uint64_t v578;
  uint64_t v579;
  _QWORD v580[3];
  int v581;
  uint64_t v582;
  uint64_t v583;
  unint64_t v584;
  unint64_t v585;
  _OWORD v586[3];
  _QWORD v587[3];
  int v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  _BYTE v593[32];
  __int128 v594;
  __int128 v595;
  __int128 v596;
  __int128 v597;
  __int128 v598;
  __int128 v599;
  uint64_t v600;
  __int128 v601;
  __int128 v602;
  _OWORD v603[3];
  _QWORD v604[2];
  __int128 v605;
  __int128 v606;
  void *v607;
  uint64_t v608;
  uint64_t v609;
  void *v610;
  uint64_t v611;
  _BYTE v612[48];
  void *v613;
  uint64_t v614;
  _BYTE v615[16];
  __int16 v616;
  unsigned int v617;
  unsigned int v618;
  unsigned int v619;
  void *v620;
  uint64_t v621;
  __int128 v622;
  __int128 v623;
  __int128 v624;
  __int128 v625;
  __int128 v626;
  __int128 v627;
  __int128 v628;
  __int128 v629;
  uint64_t v630;
  uint64_t v631;

  v12 = a2;
  v13 = a1;
  v631 = *MEMORY[0x24BDAC8D0];
  v15 = *(_QWORD *)(a2 + 40);
  v438 = a2 + 40;
  v470 = sub_22E46F2EC(*(_QWORD *)(a1 + 144) + 280, a2);
  v16 = *(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFFFF8;
  if (v16 && (*(_DWORD *)(v16 + 28) & 0x7Eu) - 52 <= 5)
  {
    if (sub_22E46A45C(v16) && sub_22E47DA60(v16))
      sub_22E621848(v13, a8, v16);
    v17 = sub_22E699F3C(*(_QWORD **)(v13 + 144));
    v18 = *(_QWORD *)(v13 + 1600);
    if (v18)
    {
      if ((*(_DWORD *)(v18 + 28) & 0x7Eu) - 52 >= 6)
        v19 = 0;
      else
        v19 = *(_QWORD *)(v13 + 1600);
    }
    else
    {
      v19 = 0;
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v17 + 40))(v17, *(_QWORD *)(v13 + 144), a8, v19, v16, a5);
  }
  v20 = *(_QWORD *)(v12 + 24);
  v472 = v16;
  if (v20)
  {
    llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(v13 + 144) + 200));
    if (*(_QWORD *)(a5 + 1520))
    {
      llvm::User::operator new((llvm::User *)0x48);
      v613 = "argmem";
      v616 = 259;
      v21 = llvm::AllocaInst::AllocaInst();
    }
    else
    {
      v613 = "argmem";
      v616 = 259;
      v21 = sub_22E4D8348(v13, (llvm::Type *)v20, (uint64_t)&v613, 0);
    }
    v22 = *(_DWORD *)(v12 + 32) & 0x7FFFFFFF;
    *(_WORD *)(v21 + 18) = *(_WORD *)(v21 + 18) & 0xFF80 | (63 - __clz(v22)) | 0x40;
    if ((_DWORD)v22)
    {
      v23 = __clz(v22) ^ 0x1F;
      v459 = v21 & 0xFFFFFFFFFFFFFFF8 | (v23 >> 3);
      v20 = v20 & 0xFFFFFFFFFFFFFFF8 | v23 & 7;
    }
    else
    {
      v459 = v21;
    }
  }
  else
  {
    v459 = 0;
  }
  v24 = *(_QWORD **)(v13 + 144);
  v25 = v24[18];
  v26 = sub_22E699F3C(v24);
  sub_22E46F76C((uint64_t)&v617, v25, v12, *(_QWORD *)(v26 + 8), 0);
  v613 = v615;
  v614 = 0x1000000000;
  sub_22E4639CC((uint64_t)&v613, v619, 0);
  v592 = 0;
  v591 = 0;
  v27 = *(unsigned __int8 *)(v12 + 72);
  v453 = a9;
  v465 = a5;
  if (v27 > 8)
  {
    v460 = 0;
  }
  else
  {
    v460 = 0;
    if (((1 << v27) & 0x144) != 0)
    {
      if (v27 == 2 && a10)
      {
        v28 = *(_QWORD *)(v13 + 1624);
        if ((*(_WORD *)(v28 + 18) & 1) != 0)
          llvm::Function::BuildLazyArguments(*(llvm::Function **)(v13 + 1624));
        v458 = *(_QWORD *)(v28 + 88) + 40 * v618;
        v455 = sub_22E66C868(*(_QWORD *)(v13 + 144) + 280, v15, 0);
        v29 = sub_22E5DE820(*(_QWORD *)(v13 + 144), v15);
        v454 = v30;
        v460 = 0;
        v456 = 1;
        v31 = HIDWORD(v29);
      }
      else
      {
        v458 = *(_QWORD *)a4;
        if (*(_QWORD *)a4)
        {
          v460 = 0;
          v455 = *(_QWORD *)(a4 + 8);
          v456 = *(_QWORD *)(a4 + 16);
          LODWORD(v29) = *(_DWORD *)(a4 + 24);
          v31 = *(unsigned int *)(a4 + 28);
          v454 = *(_OWORD *)(a4 + 32);
        }
        else
        {
          *(_QWORD *)&v622 = "tmp";
          LOWORD(v624) = 259;
          v271 = sub_22F25E4D4(v13, v15, (uint64_t)&v622, (unint64_t *)&v591);
          v273 = v271 & 0xFFFFFFFFFFFFFFF8;
          if (v271 <= 7)
            v273 = 0;
          v458 = v273;
          v274 = v272 & 0xFFFFFFFFFFFFFFF8;
          if (v271 <= 7)
            v274 = 0;
          v455 = v274;
          v456 = 0;
          if (v271 >= 8)
          {
            v31 = 1;
            v456 = 1 << (v272 & 7 | (8 * (v271 & 7)));
          }
          if (*(_QWORD *)(v13 + 320) && (*(_BYTE *)(a4 + 48) & 2) != 0)
          {
            DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(v13 + 144)
                                                                                          + 200));
            v276 = sub_22E66C868(*(_QWORD *)(v13 + 144) + 280, v15, 0);
            sub_22E3C304C((uint64_t)DataLayout, v276);
            v278 = (unint64_t)(v277 + 7) >> 3;
            v280 = v279 == 1;
            v281 = (llvm::Type *)v276;
            v16 = v472;
            ABITypeAlignment = llvm::DataLayout::getABITypeAlignment(DataLayout, v281);
            v283 = v280;
            a5 = v465;
            v460 = sub_22E4C9CC0(v13, (ABITypeAlignment + v278 - 1) / ABITypeAlignment * ABITypeAlignment, v283, v591 & 0xFFFFFFFFFFFFFFF8);
            LODWORD(v29) = 0;
            v454 = 0uLL;
          }
          else
          {
            LODWORD(v29) = 0;
            v454 = 0uLL;
            v460 = 0;
          }
        }
      }
      v450 = v31;
      v451 = v29;
      if (v618 == -1)
      {
        if (*(_BYTE *)(v12 + 72) == 8)
        {
          v32 = 0;
          v33 = v459 & 0xFFFFFFFFFFFFFFF8;
          if (v459 <= 7)
            v33 = 0;
          v34 = v20 & 0xFFFFFFFFFFFFFFF8;
          if (v459 <= 7)
            v34 = 0;
          v587[0] = v33;
          v587[1] = v34;
          if (v459 >= 8)
            v32 = 1 << (v20 & 7 | (8 * (v459 & 7)));
          v587[2] = v32;
          v588 = 0;
          v590 = 0;
          v589 = 0;
          v35 = *(unsigned int *)(v12 + 64);
          LOWORD(v624) = 257;
          sub_22E3C408C((uint64_t *)(v13 + 272), (uint64_t)v587, v35, (uint64_t)&v622, (uint64_t)v502);
          *(_QWORD *)v593 = v458;
          *(_QWORD *)&v593[8] = v455;
          *(_QWORD *)&v593[16] = v456;
          *(_QWORD *)&v593[24] = v451 | (unint64_t)(v450 << 32);
          v594 = v454;
          sub_22E5E0440(v13, (uint64_t)v593, v15, &v622);
          v586[0] = *(_OWORD *)v502;
          v586[1] = v503;
          v586[2] = v504[0];
          sub_22E3BEDDC(v13 + 272, v622, v586, 0);
        }
      }
      else
      {
        *(_QWORD *)v593 = v458;
        *(_QWORD *)&v593[8] = v455;
        *(_QWORD *)&v593[16] = v456;
        *(_QWORD *)&v593[24] = v29 | (unint64_t)(v31 << 32);
        v594 = v454;
        sub_22E5E0440(v13, (uint64_t)v593, v15, &v622);
        *((_QWORD *)v613 + v618) = v622;
      }
    }
  }
  v446 = a4;
  v457 = v15;
  v610 = v612;
  v611 = 0x200000000;
  v36 = *(_DWORD *)(a5 + 8);
  v474 = (_QWORD *)v13;
  v469 = v12;
  if (v36)
  {
    v37 = 0;
    v441 = 0;
    v442 = 0uLL;
    v447 = 0;
    v443 = 0;
    v444 = 0;
    v445 = 0;
    v440 = 0;
    v38 = *(_QWORD *)a5;
    v475 = *(_QWORD *)a5 + 152 * v36;
    v39 = v12 + 80;
    v487 = (uint64_t *)(v13 + 272);
    if (v459 <= 7)
      v40 = 0;
    else
      v40 = v459 & 0xFFFFFFFFFFFFFFF8;
    v41 = v20 & 0xFFFFFFFFFFFFFFF8;
    if (v459 <= 7)
      v41 = 0;
    v463 = v41;
    v464 = v40;
    v42 = 1 << (v20 & 7 | (8 * (v459 & 7)));
    v435 = (_QWORD *)(v13 + 320);
    if (v459 <= 7)
      v42 = 0;
    v462 = v42;
    while (1)
    {
      v43 = (unsigned int *)v620;
      if (*((_DWORD *)v620 + 3 * v37) != -1)
      {
        *((_QWORD *)v613 + *((unsigned int *)v620 + 3 * v37)) = llvm::UndefValue::get();
        v43 = (unsigned int *)v620;
      }
      v44 = v43[3 * v37 + 1];
      v485 = v37;
      if (!v16
        || ((LODWORD(v45) = *(_DWORD *)(v12 + 16), (_DWORD)v45 != -1)
          ? (v45 = v45)
          : (v45 = *(unsigned int *)(v12 + 36)),
            (v46 = (*(_DWORD *)(v16 + 28) & 0x7E) - 52, v46 >= 6) ? (v47 = 0) : (v47 = v16),
            v37 < v45 ? (v48 = v46 > 5) : (v48 = 1),
            v48))
      {
LABEL_79:
        v489 = 0;
        goto LABEL_80;
      }
      v49 = *(_QWORD *)(*(_QWORD *)(v47 + 48) & 0xFFFFFFFFFFFFFFF0);
      if (v49 && *(_BYTE *)(v49 + 16) == 26)
        break;
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v49 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
      {
        v49 = sub_22F10CF48(v49);
        v16 = v472;
        v13 = (unint64_t)v474;
        v12 = v469;
        if (v49)
          break;
        v51 = 0;
      }
      else
      {
        v51 = 0;
        v16 = v472;
        v13 = (unint64_t)v474;
        v12 = v469;
      }
LABEL_68:
      if (v37 >= v51)
        goto LABEL_79;
      v52 = *(_QWORD *)(*(_QWORD *)(v47 + 120) + 8 * v37);
      if (!v52 || (*(_BYTE *)(v52 + 29) & 1) == 0)
        goto LABEL_79;
      sub_22EFC8E88(v52);
      v54 = *((unsigned int *)v53 + 2);
      if ((_DWORD)v54)
      {
        v55 = 8 * v54;
        v56 = *v53;
        while (*(_WORD *)(*(_QWORD *)v56 + 32) != 209)
        {
          v56 += 8;
          v55 -= 8;
          if (!v55)
            goto LABEL_79;
        }
      }
      else
      {
        v56 = *v53;
      }
      if (v56 == *v53 + 8 * v54)
        goto LABEL_79;
      v489 = 1;
LABEL_80:
      v57 = (uint64_t *)(v39 + 8);
      switch(*(_BYTE *)(v39 + 32))
      {
        case 0:
        case 1:
          v58 = (llvm *)*v57;
          if (*(_BYTE *)(*v57 + 8) != 16)
          {
            v59 = (llvm *)sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(v13 + 144) + 280), *(llvm::LLVMContext **)v39);
            if (v58 == v59 && !*(_DWORD *)(v39 + 24))
            {
              if (*(_BYTE *)(v38 + 136))
              {
                v627 = *(_OWORD *)(v38 + 80);
                v628 = *(_OWORD *)(v38 + 96);
                v629 = *(_OWORD *)(v38 + 112);
                v630 = *(_QWORD *)(v38 + 128);
                v623 = *(_OWORD *)(v38 + 16);
                v624 = *(_OWORD *)(v38 + 32);
                v625 = *(_OWORD *)(v38 + 48);
                v626 = *(_OWORD *)(v38 + 64);
                v622 = *(_OWORD *)v38;
                v189 = (__int128 *)((char *)&v622 + 8);
                goto LABEL_219;
              }
              if ((*(_BYTE *)(v38 + 48) & 6) == 4)
              {
                v189 = (__int128 *)v38;
LABEL_219:
                v205 = *v189;
                v206 = v189[1];
                v549[2] = v189[2];
                v549[1] = v206;
                v549[0] = v205;
                LOWORD(v594) = 257;
                v59 = (llvm *)sub_22E3C2A7C(v487, (uint64_t)v549, (uint64_t)v593);
                v207 = (uint64_t)v59;
              }
              else
              {
                v207 = *(_QWORD *)v38;
              }
              if ((*(_DWORD *)(v12 + 32) & 0x80000000) != 0
                && (*(_BYTE *)(v438 + 40 * (*(_DWORD *)(v12 + 36) + 1) + v485) & 0xF) == 2)
              {
                v208 = sub_22F10ACF8(*(_QWORD *)(*(_QWORD *)(v38 + 144) & 0xFFFFFFFFFFFFFFF0));
                v209 = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(v13 + 144) + 144), v208);
                sub_22E3D2FA0(v13, v207, v208, v209, 0, 0, 0, &v622);
                v210 = v622;
                v444 = v623;
                v445 = *((_QWORD *)&v622 + 1);
                v439 = HIDWORD(v623);
                v443 = DWORD2(v623);
                v442 = v624;
                v211 = *(unsigned __int8 *)(v13 + 130);
                *(_QWORD *)&v622 = "swifterror.temp";
                LOWORD(v624) = 259;
                v212 = sub_22E4D85B8(v13, v208, v211, (uint64_t)&v622, 0);
                v214 = v213;
                v207 = v212 & 0xFFFFFFFFFFFFFFF8;
                *(_WORD *)((v212 & 0xFFFFFFFFFFFFFFF8) + 18) |= 0x80u;
                v440 = v210;
                v547[0] = v210;
                v547[1] = v445;
                v547[2] = v444;
                v547[3] = __PAIR64__(v439, v443);
                v548 = v442;
                LOWORD(v624) = 257;
                v215 = sub_22E3C2A7C(v487, (uint64_t)v547, (uint64_t)&v622);
                v216 = 0;
                if (v212 <= 7)
                  v217 = 0;
                else
                  v217 = v212 & 0xFFFFFFFFFFFFFFF8;
                v441 = v214;
                v218 = v214 & 0xFFFFFFFFFFFFFFF8;
                if (v212 <= 7)
                  v218 = 0;
                v543[0] = v217;
                v543[1] = v218;
                v447 = v212;
                if (v212 >= 8)
                  v216 = 1 << (v214 & 7 | (8 * (v212 & 7)));
                v543[2] = v216;
                v544 = 0;
                v545 = 0;
                v546 = 0;
                v59 = (llvm *)sub_22E3BEDDC(v487, v215, v543, 0);
              }
              v219 = *v57;
              if (*v57 != *(_QWORD *)v207 && *(_BYTE *)(*(_QWORD *)v207 + 8) == 13)
              {
                LOWORD(v624) = 257;
                v59 = (llvm *)sub_22E3C1740(v487, 39, v207, v219, (uint64_t)&v622);
                v207 = (uint64_t)v59;
              }
              if (v44 < *(_DWORD *)(v470 + 12) - 1)
              {
                v220 = *(_QWORD *)(*(_QWORD *)(v470 + 16) + 8 * v44 + 8);
                if (*(_QWORD *)v207 != v220)
                {
                  if (*(_BYTE *)(*(_QWORD *)v207 + 8) == 15)
                    v221 = *(llvm::Type **)v207;
                  else
                    v221 = 0;
                  if (*(_BYTE *)(v220 + 8) == 15)
                    v222 = *(llvm::Type **)(*(_QWORD *)(v470 + 16) + 8 * v44 + 8);
                  else
                    v222 = 0;
                  if (v221 && v222 && (*((_DWORD *)v222 + 2) ^ *((_DWORD *)v221 + 2)) >= 0x100)
                  {
                    v428 = (llvm::raw_ostream *)llvm::errs(v59);
                    v429 = sub_22E47DAC0(v428, "Invalid cast from ");
                    v430 = sub_22F24F520(v429, v221);
                    v431 = sub_22E47DAC0(v430, " to ");
                    v432 = sub_22F24F520(v431, v222);
                    sub_22E47DAC0(v432, "\n");
                    abort();
                  }
                  LOWORD(v624) = 257;
                  v207 = sub_22E3C1740(v487, 49, v207, v220, (uint64_t)&v622);
                }
              }
              if (v489)
              {
                LOWORD(v594) = 257;
                v253 = llvm::User::operator new((llvm::User *)0x40);
                LOWORD(v624) = 257;
                llvm::FreezeInst::FreezeInst();
                sub_22E3C12C8(v487, v253, (uint64_t)v593);
                v207 = v253;
              }
              *((_QWORD *)v613 + v44) = v207;
              goto LABEL_192;
            }
          }
          if (*(_BYTE *)(v38 + 136))
          {
            v60 = (unint64_t *)(v38 + 8);
            v61 = 16;
            v62 = 24;
            v63 = 32;
            v64 = 36;
            v65 = 40;
            v66 = 48;
            goto LABEL_108;
          }
          if ((*(_BYTE *)(v38 + 48) & 6) == 4)
          {
            v61 = 8;
            v62 = 16;
            v63 = 24;
            v64 = 28;
            v65 = 32;
            v66 = 40;
            v60 = (unint64_t *)v38;
LABEL_108:
            v91 = *(_QWORD *)(v38 + v66);
            v92 = *(_QWORD *)(v38 + v65);
            v93 = *(_DWORD *)(v38 + v64);
            v94 = *(_DWORD *)(v38 + v63);
            v95 = *(_QWORD *)(v38 + v62);
            v96 = *(_QWORD *)(v38 + v61);
            v97 = *v60;
          }
          else
          {
            v245 = *(_QWORD *)(v38 + 144);
            *(_QWORD *)&v622 = "coerce";
            LOWORD(v624) = 259;
            v246 = sub_22F25E4D4(v13, v245, (uint64_t)&v622, 0);
            v95 = 0;
            if (v246 <= 7)
              v97 = 0;
            else
              v97 = v246 & 0xFFFFFFFFFFFFFFF8;
            if (v246 <= 7)
              v96 = 0;
            else
              v96 = v247 & 0xFFFFFFFFFFFFFFF8;
            if (v246 >= 8)
              v95 = 1 << (v247 & 7 | (8 * (v246 & 7)));
            *(_QWORD *)&v538 = v97;
            *((_QWORD *)&v538 + 1) = v96;
            v539 = v95;
            v540 = 0;
            v541 = 0;
            v542 = 0;
            sub_22E479938(v38, v13, &v538);
            v94 = 0;
            v92 = 0;
            v91 = 0;
          }
          *(_QWORD *)&v532 = v97;
          *((_QWORD *)&v532 + 1) = v96;
          v533 = v95;
          v534 = v94;
          v535 = v93;
          v536 = v92;
          v537 = v91;
          sub_22E475408((uint64_t)&v622, v13, &v532, v39 + 8);
          v98 = v622;
          v99 = *((_QWORD *)&v624 + 1);
          v100 = *v57;
          if (*v57 && *(_BYTE *)(v100 + 8) == 16 && !*(_BYTE *)(v39 + 32) && (*(_WORD *)(v39 + 33) & 0x80) != 0)
          {
            v169 = v623;
            v468 = v624;
            v170 = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(v13 + 144) + 200));
            sub_22E3C304C((uint64_t)v170, *((uint64_t *)&v98 + 1));
            v172 = (unint64_t)(v171 + 7) >> 3;
            v174 = v173 == 1;
            v175 = llvm::DataLayout::getABITypeAlignment(v170, *((llvm::Type **)&v98 + 1));
            *(_QWORD *)&v622 = (v175 + v172 - 1) / v175 * v175;
            *((_QWORD *)&v622 + 1) = v174;
            v436 = llvm::TypeSize::operator unsigned long long();
            v176 = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(v474[18] + 200));
            sub_22E3C304C((uint64_t)v176, v100);
            v178 = (unint64_t)(v177 + 7) >> 3;
            v180 = v179 == 1;
            v181 = llvm::DataLayout::getABITypeAlignment(v176, (llvm::Type *)v100);
            *(_QWORD *)&v622 = (v181 + v178 - 1) / v181 * v181;
            *((_QWORD *)&v622 + 1) = v180;
            if (v436 < llvm::TypeSize::operator unsigned long long())
            {
              Name = llvm::Value::getName((llvm::Value *)v98);
              LOWORD(v624) = 773;
              *(_QWORD *)&v622 = Name;
              *((_QWORD *)&v622 + 1) = v249;
              *(_QWORD *)&v623 = ".coerce";
              v250 = sub_22E4D83CC((uint64_t)v474, (llvm::Type *)v100, v169, (uint64_t)&v622, 0, 0);
              v184 = 0;
              if (v250 <= 7)
                v252 = 0;
              else
                v252 = v250 & 0xFFFFFFFFFFFFFFF8;
              if (v250 <= 7)
                v182 = 0;
              else
                v182 = v251 & 0xFFFFFFFFFFFFFFF8;
              if (v250 >= 8)
                v184 = 1 << (v251 & 7 | (8 * (v250 & 7)));
              v529[0] = v252;
              v529[1] = v182;
              v529[2] = v184;
              v530 = 0;
              v483 = 0u;
              v531 = 0u;
              v526[0] = v98;
              v526[1] = v169;
              v527 = v468;
              v528 = v99;
              v183 = v252;
              sub_22F245B80((uint64_t)v487, (llvm::LLVMContext *)v529, v526);
              v478 = 0;
            }
            else
            {
              v523[0] = v98;
              v523[1] = v169;
              v524 = v468;
              v525 = v99;
              LOWORD(v594) = 257;
              sub_22E3BEE6C(v487, v523, v100, (uint64_t)v593, (uint64_t)&v622);
              v182 = *((_QWORD *)&v622 + 1);
              v183 = v622;
              v478 = *((_QWORD *)&v623 + 1);
              v184 = v623;
              v483 = v624;
            }
            v185 = *(unsigned int *)(v100 + 12);
            if ((_DWORD)v185)
            {
              for (i = 0; i != v185; ++i)
              {
                v521[0] = v183;
                v521[1] = v182;
                v521[2] = v184;
                v521[3] = v478;
                v522 = v483;
                LOWORD(v594) = 257;
                sub_22E3C408C(v487, (uint64_t)v521, i, (uint64_t)v593, (uint64_t)&v622);
                v520[0] = v622;
                v520[1] = v623;
                v520[2] = v624;
                LOWORD(v594) = 257;
                v187 = sub_22E3C2A7C(v487, (uint64_t)v520, (uint64_t)v593);
                if (v489)
                {
                  LOWORD(v504[0]) = 257;
                  v188 = llvm::User::operator new((llvm::User *)0x40);
                  LOWORD(v594) = 257;
                  llvm::FreezeInst::FreezeInst();
                  sub_22E3C12C8(v487, v188, (uint64_t)v502);
                  v187 = v188;
                }
                *((_QWORD *)v613 + (v44 + i)) = v187;
              }
            }
            v13 = (unint64_t)v474;
            goto LABEL_191;
          }
          v519[0] = v622;
          v519[1] = v623;
          v519[2] = v624;
          v101 = (uint64_t *)sub_22E476E40((uint64_t)v519, (unsigned __int8 *)v100, v13);
          v102 = (uint64_t)v101;
          if ((*(_BYTE *)(v12 + 11) & 1) == 0)
          {
            v16 = v472;
            goto LABEL_147;
          }
          v103 = *v101;
          v16 = v472;
          if (*v101)
          {
            if (*(_BYTE *)(v103 + 8) == 17)
            {
              v104 = *(_QWORD *)(v38 + 144);
              if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)((v104 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45)
              {
                v105 = sub_22F24E820(v13, (uint64_t)v101, v103, v104);
                goto LABEL_146;
              }
            }
          }
          goto LABEL_147;
        case 2:
        case 3:
          if (*(_BYTE *)(v38 + 136))
          {
            v627 = *(_OWORD *)(v38 + 80);
            v628 = *(_OWORD *)(v38 + 96);
            v629 = *(_OWORD *)(v38 + 112);
            v630 = *(_QWORD *)(v38 + 128);
            v623 = *(_OWORD *)(v38 + 16);
            v624 = *(_OWORD *)(v38 + 32);
            v625 = *(_OWORD *)(v38 + 48);
            v626 = *(_OWORD *)(v38 + 64);
            v622 = *(_OWORD *)v38;
            v67 = (__int128 *)((char *)&v622 + 8);
          }
          else
          {
            if ((*(_BYTE *)(v38 + 48) & 6) != 4)
            {
              v232 = *(_QWORD *)(v38 + 144);
              v233 = *(unsigned int *)(v39 + 24);
              *(_QWORD *)&v622 = "indirect-arg-temp";
              LOWORD(v624) = 259;
              v235 = sub_22F25E524(v13, v232, v233, (uint64_t)&v622);
              v236 = v234;
              v237 = v13;
              if (v235 <= 7)
                v238 = 0;
              else
                v238 = v235 & 0xFFFFFFFFFFFFFFF8;
              v239 = v234 & 7;
              v240 = *(_QWORD *)(v38 + 144);
              if (v235 <= 7)
                v241 = 0;
              else
                v241 = v234 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v593 = v238;
              *(_QWORD *)&v593[8] = v241;
              v242 = 1 << (v234 & 7 | (8 * (v235 & 7)));
              if (v235 < 8)
                v242 = 0;
              *(_QWORD *)&v593[16] = v242;
              *(_DWORD *)&v593[24] = 0;
              v594 = 0uLL;
              sub_22E5E0440(v237, (uint64_t)v593, v240, &v622);
              if (v489)
              {
                if (v235 < 8)
                  v256 = 0;
                else
                  v256 = 1 << (v236 & 7 | (8 * (v235 & 7u)));
                v257 = *(_QWORD *)(v38 + 144);
                *(_QWORD *)v593 = v238;
                *(_QWORD *)&v593[8] = v241;
                *(_QWORD *)&v593[16] = v256;
                *(_DWORD *)&v593[24] = 0;
                v594 = 0uLL;
                sub_22E5E0440((uint64_t)v474, (uint64_t)v593, v257, &v622);
                LOWORD(v594) = 257;
                v243 = llvm::User::operator new((llvm::User *)0x40);
                LOWORD(v624) = 257;
                llvm::FreezeInst::FreezeInst();
                sub_22E3C12C8(v487, v243, (uint64_t)v593);
                v16 = v472;
              }
              else
              {
                v243 = v622;
              }
              *((_QWORD *)v613 + v44) = v243;
              *(_QWORD *)&v554 = v238;
              *((_QWORD *)&v554 + 1) = v241;
              v244 = 1 << (v239 & 0xC7 | (8 * (v235 & 7u)));
              if (v235 < 8)
                v244 = 0;
              v555 = v244;
              v556 = 0;
              v557 = 0;
              v558 = 0;
              v13 = (unint64_t)v474;
              sub_22E479938(v38, (uint64_t)v474, &v554);
              v12 = v469;
              goto LABEL_193;
            }
            v67 = (__int128 *)v38;
          }
          v84 = *v67;
          v85 = v67[2];
          v503 = v67[1];
          v504[0] = v85;
          *(_OWORD *)v502 = v84;
          v86 = *(unsigned int *)(v39 + 24);
          llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(v13 + 144) + 200));
          if ((uint64_t)v503 < v86)
          {
            if ((BYTE8(v503) & 3) != 0)
              sub_22F28ABCC(v502, v13);
            v87 = 63 - __clz(v86);
            v466 = v466 & 0xFFFFFFFFFFFF0000 | v87 | 0x100;
            if (llvm::getOrEnforceKnownAlignment() < v87)
            {
LABEL_156:
              v132 = *(_QWORD *)(v38 + 144);
              v133 = *(unsigned int *)(v39 + 24);
              *(_QWORD *)&v622 = "byval-temp";
              LOWORD(v624) = 259;
              v134 = sub_22F25E524(v13, v132, v133, (uint64_t)&v622);
              v136 = v134;
              v137 = v135;
              v138 = 0;
              v607 = (void *)v134;
              v608 = v135;
              v139 = v134 & 0xFFFFFFFFFFFFFFF8;
              if (v134 <= 7)
                v140 = 0;
              else
                v140 = v134 & 0xFFFFFFFFFFFFFFF8;
              v141 = (llvm::Type *)(v135 & 0xFFFFFFFFFFFFFFF8);
              if (v134 <= 7)
                v142 = 0;
              else
                v142 = v135 & 0xFFFFFFFFFFFFFFF8;
              if (v134 >= 8)
                v138 = 1 << (v135 & 7 | (8 * (v134 & 7)));
              v143 = *(_QWORD *)(v38 + 144);
              *(_QWORD *)v593 = v140;
              *(_QWORD *)&v593[8] = v142;
              *(_QWORD *)&v593[16] = v138;
              *(_DWORD *)&v593[24] = 0;
              v594 = 0uLL;
              sub_22E5E0440(v13, (uint64_t)v593, v143, &v622);
              v481 = v142;
              if (v489)
              {
                if (v136 < 8)
                  v254 = 0;
                else
                  v254 = 1 << (v137 & 7 | (8 * (v136 & 7u)));
                v255 = *(_QWORD *)(v38 + 144);
                *(_QWORD *)v593 = v140;
                *(_QWORD *)&v593[8] = v142;
                *(_QWORD *)&v593[16] = v254;
                *(_DWORD *)&v593[24] = 0;
                v594 = 0uLL;
                sub_22E5E0440(v13, (uint64_t)v593, v255, &v622);
                LOWORD(v594) = 257;
                v144 = llvm::User::operator new((llvm::User *)0x40);
                LOWORD(v624) = 257;
                llvm::FreezeInst::FreezeInst();
                sub_22E3C12C8(v487, v144, (uint64_t)v593);
              }
              else
              {
                v144 = v622;
              }
              *((_QWORD *)v613 + v44) = v144;
              v145 = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(v13 + 144) + 200));
              sub_22E3C304C((uint64_t)v145, (uint64_t)v141);
              v147 = (unint64_t)(v146 + 7) >> 3;
              v149 = v148 == 1;
              v150 = llvm::DataLayout::getABITypeAlignment(v145, v141);
              v151 = v149;
              v13 = (unint64_t)v474;
              *(_QWORD *)&v622 = sub_22E4C9CC0((uint64_t)v474, (v150 + v147 - 1) / v150 * v150, v151, v139);
              if ((_QWORD)v622)
                sub_22F24F4D8((uint64_t *)&v610, &v607, (uint64_t *)&v622);
              v550[0] = v140;
              v550[1] = v481;
              v12 = v469;
              if (v136 < 8)
                v152 = 0;
              else
                v152 = 1 << (v137 & 7 | (8 * (v136 & 7u)));
              v16 = v472;
              v550[2] = v152;
              v551 = 0;
              v552 = 0;
              v553 = 0;
              v79 = (__int128 *)v550;
              goto LABEL_94;
            }
          }
          if (!*(_BYTE *)(v38 + 136))
            goto LABEL_142;
          v88 = *(_DWORD *)(v38 + 72);
          v90 = 0;
          if ((*(_WORD *)(v39 + 33) & 8) != 0)
          {
            v89 = *(_QWORD *)(v38 + 24);
            if (v89 >= (uint64_t)sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(v13 + 144) + 144), *(_QWORD *)(v38 + 144)))
              v90 = 1;
          }
          v119 = *(_QWORD *)(v13 + 144);
          v120 = *(_WORD *)(v39 + 33);
          if ((*(_DWORD *)(*(_QWORD *)(v119 + 152) + 52) & 0x40000000) != 0)
          {
            if ((v120 & 8) != 0)
            {
              v128 = llvm::PointerType::get();
              v129 = *(_QWORD *)(*(_QWORD *)(v470 + 16) + 8 * (v44 + 1));
              v130 = *(_DWORD *)(v129 + 8);
              if ((v130 & 0xFE) == 0x12)
                v130 = *(_DWORD *)(**(_QWORD **)(v129 + 16) + 8);
              if ((v130 ^ *(_DWORD *)(v128 + 8)) >= 0x100 || !v90)
                goto LABEL_156;
              goto LABEL_142;
            }
          }
          else if ((v120 & 8) != 0 && v88 >= 0x800)
          {
            if (v88 >> 11 != *(_DWORD *)(v119 + 132) || !v90)
              goto LABEL_156;
            goto LABEL_142;
          }
          if (!v90)
            goto LABEL_156;
LABEL_142:
          *(_OWORD *)v593 = *(_OWORD *)v502;
          *(_OWORD *)&v593[16] = v503;
          v594 = v504[0];
          sub_22E5E0440(v13, (uint64_t)v593, *(_QWORD *)(v38 + 144), &v622);
          v122 = v622;
          v123 = *(_QWORD *)v622;
          v124 = (llvm::LLVMContext *)*(unsigned int *)(llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(v13 + 144) + 200))
                                                      + 4);
          if (*(_QWORD *)(v123 + 24))
            v125 = llvm::PointerType::get();
          else
            v125 = llvm::PointerType::get(*(llvm::PointerType **)v123, v124);
          v126 = v125;
          v127 = sub_22E699F3C(*(_QWORD **)(v13 + 144));
          v105 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v127 + 216))(v127, v13, v122, 0, *(unsigned int *)(*(_QWORD *)(v13 + 144) + 132), v126, 1);
LABEL_146:
          v102 = v105;
LABEL_147:
          if (v489)
          {
            LOWORD(v594) = 257;
            v153 = llvm::User::operator new((llvm::User *)0x40);
            LOWORD(v624) = 257;
            llvm::FreezeInst::FreezeInst();
            sub_22E3C12C8(v487, v153, (uint64_t)v593);
            v102 = v153;
          }
          *((_QWORD *)v613 + v44) = v102;
LABEL_193:
          v38 += 152;
          v39 += 40;
          v37 = v485 + 1;
          if (v38 == v475)
            goto LABEL_305;
          break;
        case 5:
          LODWORD(v622) = v44;
          v80 = *(_OWORD *)(v38 + 112);
          v505[6] = *(_OWORD *)(v38 + 96);
          v505[7] = v80;
          v505[8] = *(_OWORD *)(v38 + 128);
          v506 = *(_QWORD *)(v38 + 144);
          v81 = *(_OWORD *)(v38 + 48);
          v505[2] = *(_OWORD *)(v38 + 32);
          v505[3] = v81;
          v82 = *(_OWORD *)(v38 + 80);
          v505[4] = *(_OWORD *)(v38 + 64);
          v505[5] = v82;
          v83 = *(_OWORD *)(v38 + 16);
          v505[0] = *(_OWORD *)v38;
          v505[1] = v83;
          sub_22E46EC3C((_QWORD *)v13, v506, (char *)v505, v470, &v613, &v622);
          goto LABEL_193;
        case 6:
          v68 = *v57;
          llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(v13 + 144) + 200));
          StructLayout = llvm::DataLayout::getStructLayout();
          v608 = 0;
          v607 = 0;
          if (*(_BYTE *)(v38 + 136))
          {
            v70 = (unint64_t *)(v38 + 8);
            v71 = 16;
            v72 = 24;
            v73 = 32;
            v74 = 36;
            v75 = 40;
            v76 = 48;
LABEL_121:
            v106 = v487;
            v467 = 0;
            v107 = *(_QWORD *)(v38 + v76);
            v108 = *(_QWORD *)(v38 + v75);
            v109 = *(_DWORD *)(v38 + v74);
            v110 = *(_DWORD *)(v38 + v73);
            v111 = *(_QWORD *)(v38 + v72);
            v112 = *(_QWORD *)(v38 + v71);
            v113 = *v70;
            goto LABEL_122;
          }
          if ((*(_BYTE *)(v38 + 48) & 6) == 4)
          {
            v71 = 8;
            v72 = 16;
            v73 = 24;
            v74 = 28;
            v75 = 32;
            v76 = 40;
            v70 = (unint64_t *)v38;
            goto LABEL_121;
          }
          v154 = StructLayout;
          v437 = *(llvm::Type ***)v38;
          v155 = v13;
          v156 = **(llvm::Type ***)v38;
          v157 = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(v155 + 144) + 200));
          sub_22E3C304C((uint64_t)v157, (uint64_t)v156);
          v159 = (unint64_t)(v158 + 7) >> 3;
          v161 = v160 == 1;
          v162 = llvm::DataLayout::getABITypeAlignment(v157, v156);
          v482 = (v162 + v159 - 1) / v162 * v162;
          v163 = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(v155 + 144) + 200));
          PrefTypeAlignment = llvm::DataLayout::getPrefTypeAlignment(v163, v156);
          v165 = *v437;
          if (1 << *(_BYTE *)(v154 + 8) <= PrefTypeAlignment)
            v166 = PrefTypeAlignment;
          else
            v166 = 1 << *(_BYTE *)(v154 + 8);
          *(_QWORD *)&v622 = "tmp";
          LOWORD(v624) = 259;
          v167 = sub_22E4D83CC(v155, v165, v166, (uint64_t)&v622, 0, (unint64_t *)&v607);
          if (v167 <= 7)
            v113 = 0;
          else
            v113 = v167 & 0xFFFFFFFFFFFFFFF8;
          if (v167 <= 7)
            v112 = 0;
          else
            v112 = v168 & 0xFFFFFFFFFFFFFFF8;
          if (v167 >= 8)
            v111 = 1 << (v168 & 7 | (8 * (v167 & 7)));
          else
            v111 = 0;
          v467 = sub_22E4C9CC0(v155, v482, v161, (unint64_t)v607 & 0xFFFFFFFFFFFFFFF8);
          v515[0] = v113;
          v515[1] = v112;
          v515[2] = v111;
          v516 = 0;
          v517 = 0;
          v518 = 0;
          v106 = v487;
          sub_22E3BEDDC(v487, v437, v515, 0);
          v110 = 0;
          v108 = 0;
          v107 = 0;
LABEL_122:
          *(_QWORD *)&v509 = v113;
          *((_QWORD *)&v509 + 1) = v112;
          v510 = v111;
          v511 = v110;
          v512 = v109;
          v513 = v108;
          v514 = v107;
          LOWORD(v594) = 257;
          sub_22E3BEE6C(v106, &v509, v68, (uint64_t)v593, (uint64_t)&v622);
          v114 = *(unsigned int *)(v68 + 12);
          v13 = (unint64_t)v474;
          if ((_DWORD)v114)
          {
            v115 = 0;
            v116 = v623;
            v477 = v624;
            v480 = v622;
            do
            {
              if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v68 + 16) + 8 * v115) + 8) != 17)
              {
                v508[0] = v480;
                v508[1] = v116;
                v508[2] = v477;
                LOWORD(v594) = 257;
                sub_22E3C408C(v487, (uint64_t)v508, v115, (uint64_t)v593, (uint64_t)&v622);
                v507[0] = v622;
                v507[1] = v623;
                v507[2] = v624;
                LOWORD(v594) = 257;
                v117 = sub_22E3C2A7C(v487, (uint64_t)v507, (uint64_t)v593);
                if (v489)
                {
                  LOWORD(v504[0]) = 257;
                  v118 = llvm::User::operator new((llvm::User *)0x40);
                  LOWORD(v594) = 257;
                  llvm::FreezeInst::FreezeInst();
                  sub_22E3C12C8(v487, v118, (uint64_t)v502);
                  v117 = v118;
                  v13 = (unint64_t)v474;
                }
                *((_QWORD *)v613 + v44) = v117;
                LODWORD(v44) = v44 + 1;
              }
              ++v115;
            }
            while (v114 != v115);
          }
          if (v467)
            sub_22E4C9DFC((_QWORD *)v13, v467, (unint64_t)v607 & 0xFFFFFFFFFFFFFFF8);
LABEL_191:
          v12 = v469;
LABEL_192:
          v16 = v472;
          goto LABEL_193;
        case 8:
          if (*(_BYTE *)(v38 + 136))
          {
            v190 = (unint64_t *)(v38 + 8);
            v191 = 24;
LABEL_201:
            v192 = *(_QWORD *)(v38 + v191);
            v193 = *v190;
            v194 = (v193 & 0xFFFFFFFFFFFFFFF8 | (__clz(v192) >> 3)) ^ 7;
            if (v192)
              v195 = v194;
            else
              v195 = v193;
            if (v193)
              v193 = v195;
            v196 = v193 & 0xFFFFFFFFFFFFFFF8;
            if ((*(_WORD *)(v39 + 33) & 4) != 0)
            {
              v203 = *(llvm::LLVMContext **)v39;
              *(_QWORD *)&v622 = "inalloca.indirect.tmp";
              LOWORD(v624) = 259;
              v201 = sub_22F25E4D4(v13, (uint64_t)v203, (uint64_t)&v622, 0);
              v576[0] = v464;
              v576[1] = v463;
              v576[2] = v462;
              v577 = 0;
              v578 = 0;
              v579 = 0;
              v204 = *(unsigned int *)(v39 + 24);
              LOWORD(v594) = 257;
              sub_22E3C408C(v487, (uint64_t)v576, v204, (uint64_t)v593, (uint64_t)&v622);
              v575[0] = v622;
              v575[1] = v623;
              v575[2] = v624;
              sub_22E3BEDDC(v487, v201 & 0xFFFFFFFFFFFFFFF8, v575, 0);
            }
            else
            {
              v198 = *(_QWORD *)(v13 + 320);
              v197 = *(_QWORD *)(v13 + 328);
              *(_QWORD *)(v13 + 320) = *(_QWORD *)(v196 + 40);
              *(_QWORD *)(v13 + 328) = v196 + 24;
              *(_QWORD *)&v622 = *(_QWORD *)(v196 + 48);
              if ((_QWORD)v622)
              {
                llvm::MetadataTracking::track();
                v199 = v622;
              }
              else
              {
                v199 = 0;
              }
              sub_22E3CF21C((uint64_t)v487, 0, v199);
              if ((_QWORD)v622)
                llvm::MetadataTracking::untrack();
              v580[0] = v464;
              v580[1] = v463;
              v580[2] = v462;
              v581 = 0;
              v582 = 0;
              v583 = 0;
              v200 = *(unsigned int *)(v39 + 24);
              LOWORD(v624) = 257;
              sub_22E3C408C(v487, (uint64_t)v580, v200, (uint64_t)&v622, (uint64_t)&v584);
              v201 = v584;
              if (v584)
              {
                v202 = (v584 & 0xFFFFFFFFFFFFFFF8 | (__clz(v585) >> 3)) ^ 7;
                if (v585)
                  v201 = v202;
              }
              if (v198)
              {
                sub_22E3CB840((uint64_t)v487, v198, v197);
              }
              else
              {
                *v435 = 0;
                v435[1] = 0;
              }
              v16 = v472;
            }
            sub_22F24F400(v13, v196, v201 & 0xFFFFFFFFFFFFFFF8);
            goto LABEL_193;
          }
          if ((*(_BYTE *)(v38 + 48) & 6) == 4)
          {
            v191 = 16;
            v190 = (unint64_t *)v38;
            goto LABEL_201;
          }
          if ((*(_WORD *)(v39 + 33) & 4) != 0)
          {
            v223 = *(_QWORD *)(v38 + 144);
            v224 = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(v13 + 144) + 144), v223);
            *(_QWORD *)&v622 = "indirect-arg-temp";
            LOWORD(v624) = 259;
            v225 = sub_22F25E524(v13, v223, v224, (uint64_t)&v622);
            v227 = v225 & 0xFFFFFFFFFFFFFFF8;
            if (v225 <= 7)
              v228 = 0;
            else
              v228 = v225 & 0xFFFFFFFFFFFFFFF8;
            v229 = v226 & 0xFFFFFFFFFFFFFFF8;
            if (v225 <= 7)
              v229 = 0;
            *(_QWORD *)&v570 = v228;
            *((_QWORD *)&v570 + 1) = v229;
            v230 = 1 << (v226 & 7 | (8 * (v225 & 7)));
            if (v225 < 8)
              v230 = 0;
            v571 = v230;
            v572 = 0;
            v573 = 0;
            v574 = 0;
            sub_22E479938(v38, v13, &v570);
            v566[0] = v464;
            v566[1] = v463;
            v566[2] = v462;
            v567 = 0;
            v568 = 0;
            v569 = 0;
            v231 = *(unsigned int *)(v39 + 24);
            LOWORD(v594) = 257;
            sub_22E3C408C(v487, (uint64_t)v566, v231, (uint64_t)v593, (uint64_t)&v622);
            v565[0] = v622;
            v565[1] = v623;
            v565[2] = v624;
            sub_22E3BEDDC(v487, v227, v565, 0);
          }
          else
          {
            v561[0] = v464;
            v561[1] = v463;
            v561[2] = v462;
            v562 = 0;
            v563 = 0;
            v564 = 0;
            v77 = *(unsigned int *)(v39 + 24);
            LOWORD(v594) = 257;
            sub_22E3C408C(v487, (uint64_t)v561, v77, (uint64_t)v593, (uint64_t)&v622);
            v560[0] = v622;
            v560[1] = v623;
            v560[2] = v624;
            v78 = sub_22E66C868(*(_QWORD *)(v13 + 144) + 280, *(_QWORD *)(v38 + 144), 0);
            LOWORD(v504[0]) = 257;
            sub_22E3BEE6C(v487, v560, v78, (uint64_t)v502, (uint64_t)v593);
            v623 = *(_OWORD *)&v593[16];
            v624 = v594;
            v622 = *(_OWORD *)v593;
            v559[0] = *(_OWORD *)v593;
            v559[1] = *(_OWORD *)&v593[16];
            v559[2] = v594;
            v79 = v559;
LABEL_94:
            sub_22E479938(v38, v13, v79);
          }
          goto LABEL_193;
        default:
          goto LABEL_193;
      }
    }
    v51 = (unsigned __int16)(*(_QWORD *)(v49 + 16) >> 38);
    goto LABEL_68;
  }
  v440 = 0;
  v441 = 0;
  v444 = 0;
  v445 = 0;
  v443 = 0;
  v442 = 0uLL;
  v447 = 0;
LABEL_305:
  sub_22E47DB44(a3, v13, (uint64_t)v502);
  v258 = v502[0];
  v259 = v470;
  if (v459 > 7)
  {
    v260 = (_QWORD *)(v459 & 0xFFFFFFFFFFFFFFF8);
    if (*(_DWORD *)(v12 + 16) == -1)
    {
      v262 = *(_QWORD *)(*(_QWORD *)(v470 + 16) + 8 * (*(_DWORD *)(v470 + 12) - 1));
      if (*v260 != v262)
      {
        LOWORD(v624) = 257;
        v260 = (_QWORD *)sub_22E3C1740((uint64_t *)(v13 + 272), 49, v459 & 0xFFFFFFFFFFFFFFF8, v262, (uint64_t)&v622);
      }
    }
    else
    {
      v261 = llvm::PointerType::get();
      LOWORD(v624) = 257;
      v258 = (llvm::Value *)sub_22E3C1740((uint64_t *)(v13 + 272), 49, (uint64_t)v258, v261, (uint64_t)&v622);
    }
    *((_QWORD *)v613 + v617) = v260;
  }
  if (*(_DWORD *)(v470 + 8) >= 0x100u)
  {
    v263 = *((unsigned __int8 *)v258 + 16);
    v264 = v258;
    if (v258 && v263 == 5)
    {
      if (*((_WORD *)v258 + 9) != 49)
        goto LABEL_335;
      v264 = (llvm::Value *)*((_QWORD *)v258 - 4 * (*((_DWORD *)v258 + 5) & 0x7FFFFFF));
      v263 = *((unsigned __int8 *)v264 + 16);
    }
    if (!v263)
    {
      v265 = *((_QWORD *)v264 + 3);
      if (*(_DWORD *)(v265 + 8) <= 0xFFu)
      {
        v266 = *(_DWORD *)(v265 + 12);
        if (v266 == *(_DWORD *)(v470 + 12))
        {
          v267 = *(_QWORD **)(v265 + 16);
          v268 = *(_QWORD **)(v470 + 16);
          if (*v267 == *v268)
          {
            v269 = 0;
            v270 = (v266 - 1);
            while (v270 != v269)
            {
              ++v269;
              if (v267[v269] != v268[v269])
                goto LABEL_335;
            }
            v258 = v264;
            v259 = *((_QWORD *)v264 + 3);
          }
        }
      }
    }
  }
LABEL_335:
  v284 = *(unsigned int *)(v465 + 1448);
  if ((_DWORD)v284)
  {
    v285 = *(_QWORD *)(v465 + 1440);
    v286 = 16 * v284;
    do
    {
      sub_22F25343C((_QWORD *)v13, *(llvm::LLVMContext **)(v285 + v286 - 16), *(_QWORD *)(v285 + v286 - 8));
      llvm::Instruction::eraseFromParent(*(llvm::Instruction **)(v285 + v286 - 8));
      v286 -= 16;
    }
    while (v286);
  }
  v287 = v614;
  if ((_DWORD)v614)
  {
    v288 = (uint64_t **)v613;
    do
    {
      v289 = *v288++;
      v290 = sub_22E47DC00(*v289);
      v291 = *(_DWORD *)(v13 + 6056);
      if (v291 <= v290)
        v291 = v290;
      *(_DWORD *)(v13 + 6056) = v291;
      --v287;
    }
    while (v287);
  }
  v501 = 0;
  v500 = 0;
  v292 = *(_QWORD *)(v13 + 144);
  v294 = (void *)llvm::Value::getName(v258);
  if (*(_QWORD *)a3 == 3)
  {
    *(_QWORD *)v499 = 0;
    *(_OWORD *)&v499[8] = *(_OWORD *)(a3 + 16);
  }
  else
  {
    *(_OWORD *)v499 = *(_OWORD *)(a3 + 8);
    *(_QWORD *)&v499[16] = *(_QWORD *)(a3 + 24);
  }
  sub_22E4706AC(v292, v294, v293, v12, (uint64_t *)v499, &v500, &v501, 1, 0);
  v295 = *(_QWORD *)(v13 + 1592);
  if (v295 && (*(_DWORD *)(v295 + 28) & 0x7Eu) - 52 < 6 && sub_22E47DCC4(v295))
    v500 = llvm::AttributeList::addAttributeAtIndex();
  if (*(_BYTE *)(v13 + 1898))
    v500 = llvm::AttributeList::addAttributeAtIndex();
  if (*(_BYTE *)(v13 + 1899))
    v500 = llvm::AttributeList::addAttributeAtIndex();
  if (*(_BYTE *)(v13 + 1900))
    v500 = llvm::AttributeList::addAttributeAtIndex();
  v296 = *(_QWORD *)(v13 + 1600);
  if (v296 && sub_22F24F554(v296) && !*(_BYTE *)(v13 + 1899) && (!v16 || !sub_22F24F5B4(v16)))
    v500 = llvm::AttributeList::addAttributeAtIndex();
  if (*(_DWORD *)(v13 + 2592))
    v500 = llvm::AttributeList::addAttributeAtIndex();
  if (*(_QWORD *)(v13 + 1888))
  {
    v297 = 0;
    if (v460)
      goto LABEL_361;
  }
  else
  {
    v301 = *(_QWORD *)(v13 + 2616);
    if (v301 && *(_BYTE *)(v301 + 16) == 79 && sub_22E4D1FAC((_QWORD *)v13) == &off_24FA63A60)
    {
      v297 = 1;
      if (!v460)
        goto LABEL_362;
      goto LABEL_361;
    }
    hasFnAttr = llvm::AttributeList::hasFnAttr();
    if (!*((_BYTE *)v258 + 16) && v258)
      hasFnAttr |= llvm::Function::hasFnAttribute();
    v297 = a10 | hasFnAttr;
    if (v460)
LABEL_361:
      sub_22E47DD24(v13, 11, v591, v592, v460);
  }
LABEL_362:
  if ((v297 & 1) != 0 || (v298 = *(_QWORD *)(v13 + 2016)) == 0)
  {
LABEL_367:
    v300 = 0;
  }
  else
  {
    while (1)
    {
      v299 = *(_QWORD *)(v13 + 1992) - v298;
      if ((*(_BYTE *)(v299 + 24) & 7) != 0 || (*(_BYTE *)(v299 + 24) & 0x40) == 0)
        break;
      v298 = *(_QWORD *)(v299 + 16);
      if (!v298)
        goto LABEL_367;
    }
    v300 = sub_22F25CF64(v13);
  }
  sub_22E479DA0(v258, v13, &v607);
  sub_22E6220E0(v13, (llvm::LLVMContext *)v504, (uint64_t)&v607);
  v303 = *(_QWORD *)(v13 + 1592);
  if (v303 && (*(_DWORD *)(v303 + 28) & 0x7Eu) - 52 <= 5 && sub_22E47DCC4(v303))
    v500 = llvm::AttributeList::addAttributeAtIndex();
  if (!v472 || (*(_BYTE *)(v472 + 29) & 1) == 0)
    goto LABEL_404;
  sub_22EFC8E88(v472);
  v305 = *(uint64_t **)v304;
  v306 = *(unsigned int *)(v304 + 8);
  v307 = *(uint64_t **)v304;
  if ((_DWORD)v306)
  {
    v308 = 8 * v306;
    v307 = *(uint64_t **)v304;
    while (*(_WORD *)(*v307 + 32) != 113)
    {
      ++v307;
      v308 -= 8;
      if (!v308)
        goto LABEL_404;
    }
  }
  if (v307 == &v305[v306])
  {
LABEL_404:
    v312 = 0;
    v479 = 0;
    v484 = 0;
LABEL_405:
    v324 = v500;
    goto LABEL_406;
  }
  do
  {
    v310 = *v305++;
    v309 = v310;
  }
  while (*(_WORD *)(v310 + 32) != 113);
  v311 = *(unsigned __int8 **)(v309 + 40);
  *(_QWORD *)&v622 = v13;
  *((_QWORD *)&v622 + 1) = v13 + 272;
  LOBYTE(v623) = 0;
  *((_QWORD *)&v623 + 1) = *(_QWORD *)(*(_QWORD *)(v13 + 144) + 232);
  v312 = sub_22E50E974((uint64_t *)&v622, v311);
  v484 = v309;
  v313 = *(unsigned __int8 **)(v309 + 48);
  if (v313)
  {
    *(_QWORD *)&v622 = v13;
    *((_QWORD *)&v622 + 1) = v13 + 272;
    LOBYTE(v623) = 0;
    *((_QWORD *)&v623 + 1) = *(_QWORD *)(*(_QWORD *)(v13 + 144) + 232);
    v314 = sub_22E50E974((uint64_t *)&v622, v313);
    isNullValue = llvm::Constant::isNullValue(v314);
    v479 = (uint64_t)v314;
    if (v314 && isNullValue == 0)
      goto LABEL_405;
  }
  if ((*(_BYTE *)(v13 + 1865) & 0x80) != 0 || (v312 ? (v317 = *((_BYTE *)v312 + 16) == 16) : (v317 = 0), !v317))
  {
LABEL_575:
    v479 = 0;
    goto LABEL_405;
  }
  v318 = (int8x8_t *)((char *)v312 + 24);
  v319 = *((_DWORD *)v312 + 8);
  if (v319 <= 0x40)
  {
    v320 = (unint64_t)*v318;
    v321 = (uint8x8_t)vcnt_s8(*v318);
    v321.i16[0] = vaddlv_u8(v321);
    if (v321.u32[0] != 1)
      goto LABEL_575;
    v322 = *(_QWORD *)(*(_QWORD *)(v13 + 144) + 232);
    v323 = 0x100000000;
    goto LABEL_572;
  }
  if (llvm::APInt::countPopulationSlowCase((llvm::Value *)((char *)v312 + 24)) != 1)
    goto LABEL_575;
  v322 = *(_QWORD *)(*(_QWORD *)(v13 + 144) + 232);
  v422 = llvm::APInt::countLeadingZerosSlowCase((llvm::Value *)((char *)v312 + 24));
  v323 = 0x100000000;
  if (v319 - v422 <= 0x40)
  {
    v320 = **(_QWORD **)v318;
LABEL_572:
    if (v320 <= 0x100000000)
      v323 = v320;
  }
  v324 = sub_22E47FDC4(v322, (llvm::AttributeList *)&v500, 63 - __clz(v323));
  v479 = 0;
  v484 = 0;
LABEL_406:
  v500 = v324;
  if (!v472 || (*(_BYTE *)(v472 + 29) & 1) == 0)
    goto LABEL_421;
  sub_22EFC8E88(v472);
  v326 = *(uint64_t **)v325;
  v327 = *(unsigned int *)(v325 + 8);
  v328 = *(uint64_t **)v325;
  if ((_DWORD)v327)
  {
    v329 = 8 * v327;
    v328 = *(uint64_t **)v325;
    while (*(_WORD *)(*v328 + 32) != 99)
    {
      ++v328;
      v329 -= 8;
      if (!v329)
        goto LABEL_421;
    }
  }
  if (v328 == &v326[v327])
  {
LABEL_421:
    v476 = 0;
    v330 = 0;
LABEL_422:
    v332 = a6;
LABEL_423:
    v340 = v500;
    goto LABEL_424;
  }
  do
  {
    v331 = *v326++;
    v330 = v331;
  }
  while (*(_WORD *)(v331 + 32) != 99);
  sub_22E479748(*(_QWORD *)v465 + 152 * ((*(_DWORD *)(v330 + 36) & 0x3FFFFFFFu) - 1), v13, (uint64_t)&v622);
  v476 = (llvm::Type **)v622;
  if ((*(_BYTE *)(v13 + 1865) & 0x80) != 0)
    goto LABEL_422;
  v332 = a6;
  if (!(_QWORD)v622 || *(_BYTE *)(v622 + 16) != 16)
    goto LABEL_423;
  v333 = v330;
  v334 = (llvm::APInt *)(v622 + 24);
  v335 = *(_DWORD *)(v622 + 32);
  if (v335 > 0x40)
  {
    if (llvm::APInt::countPopulationSlowCase((llvm::APInt *)(v622 + 24)) == 1)
    {
      v338 = *(_QWORD *)(*(_QWORD *)(v13 + 144) + 232);
      v420 = llvm::APInt::countLeadingZerosSlowCase(v334);
      v339 = 0x100000000;
      if (v335 - v420 > 0x40)
      {
LABEL_565:
        v340 = sub_22E47FDC4(v338, (llvm::AttributeList *)&v500, 63 - __clz(v339));
        v330 = 0;
        goto LABEL_424;
      }
      v336 = **(_QWORD **)v334;
LABEL_563:
      if (v336 <= 0x100000000)
        v339 = v336;
      goto LABEL_565;
    }
  }
  else
  {
    v336 = *(_QWORD *)v334;
    v337 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v334);
    v337.i16[0] = vaddlv_u8(v337);
    if (v337.u32[0] == 1)
    {
      v338 = *(_QWORD *)(*(_QWORD *)(v13 + 144) + 232);
      v339 = 0x100000000;
      goto LABEL_563;
    }
  }
  v340 = v500;
  v330 = v333;
LABEL_424:
  v488 = v330;
  v500 = v340;
  if (v300)
  {
    *(_QWORD *)&v622 = "invoke.cont";
    LOWORD(v624) = 259;
    v360 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    LOWORD(v624) = 257;
    v341 = (_QWORD *)sub_22F24F614(v13 + 272, v259, (uint64_t)v258, (uint64_t)v360, v300, (uint64_t)v613, v614, v361, (uint64_t)v607, v608, (uint64_t)&v622);
    sub_22E5ED9B4((_QWORD *)v13, v360, 0);
  }
  else
  {
    LOWORD(v624) = 257;
    v341 = sub_22E47DDEC((uint64_t *)(v13 + 272), v259, (uint64_t)v258, (uint64_t)v613, v614, (uint64_t)v607, v608, (uint64_t)&v622, 0);
  }
  v342 = v472;
  if (v332)
    *v332 = v341;
  v343 = *(_QWORD *)(v13 + 1592);
  if (v343 && (*(_DWORD *)(v343 + 28) & 0x100) != 0 && (*(_DWORD *)(v343 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
  {
    sub_22EFC8E88(v343);
    v345 = *(uint64_t **)v344;
    v346 = *(unsigned int *)(v344 + 8);
    v347 = *(uint64_t **)v344;
    if ((_DWORD)v346)
    {
      v348 = 8 * v346;
      v347 = *(uint64_t **)v344;
      while (*(_WORD *)(*v347 + 32) != 122)
      {
        ++v347;
        v348 -= 8;
        if (!v348)
          goto LABEL_443;
      }
    }
    if (v347 != &v345[v346])
    {
      do
      {
        v350 = *v345++;
        v349 = v350;
      }
      while (*(_WORD *)(v350 + 32) != 122);
      if (!*(_DWORD *)(v349 + 36))
      {
        v351 = *(v341 - 4);
        if (!v351 || *(_BYTE *)(v351 + 16) || *(_QWORD *)(v351 + 24) != v341[9])
          v500 = llvm::AttributeList::addAttributeAtIndex();
      }
    }
  }
LABEL_443:
  v473 = (llvm::Type **)v312;
  v341[8] = v500;
  *((_WORD *)v341 + 9) = *((_WORD *)v341 + 9) & 0xF003 | (4 * v501);
  v352 = *v341;
  if (*(_BYTE *)(*v341 + 8) != 7)
  {
    *(_QWORD *)&v622 = "call";
    LOWORD(v624) = 259;
    llvm::Value::setName();
    v352 = *v341;
  }
  v353 = sub_22E47DC00(v352);
  v354 = *(_DWORD *)(v13 + 6056);
  if (v354 <= v353)
    v354 = v353;
  *(_DWORD *)(v13 + 6056) = v354;
  v355 = *(v341 - 4);
  if (!v355 || *(_BYTE *)(v355 + 16) || *(_QWORD *)(v355 + 24) != v341[9])
    sub_22E659A38((_QWORD *)(v13 + 3904), v13 + 272, 0, (uint64_t)v341, (uint64_t)v258);
  if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 144) + 152) + 148) & 2) != 0)
    sub_22F24EE14(v13);
  if (*(_QWORD *)(v13 + 5856) != *(_QWORD *)(v13 + 5864))
    (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(*(_QWORD *)(v13 + 144) + 800) + 224))(*(_QWORD *)(*(_QWORD *)(v13 + 144) + 800), v341);
  if (*((_BYTE *)v341 + 16) == 84)
  {
    if (v342 && (*(_BYTE *)(v342 + 29) & 1) != 0)
    {
      sub_22EFC8E88(v342);
      v357 = *((unsigned int *)v356 + 2);
      if ((_DWORD)v357)
      {
        v358 = 8 * v357;
        v359 = *v356;
        while (*(_WORD *)(*(_QWORD *)v359 + 32) != 242)
        {
          v359 += 8;
          v358 -= 8;
          if (!v358)
            goto LABEL_472;
        }
      }
      else
      {
        v359 = *v356;
      }
      if (v359 != *v356 + 8 * v357)
      {
        *((_WORD *)v341 + 9) |= 3u;
        if (*(_BYTE *)(v13 + 2892))
          goto LABEL_484;
        goto LABEL_486;
      }
    }
LABEL_472:
    if ((*(_QWORD *)(v469 + 8) & 0x3F0000) != 0xF0000)
    {
      if (!a7)
        goto LABEL_482;
      v364 = 2;
      goto LABEL_481;
    }
    v362 = *(_QWORD *)(*(_QWORD *)(v13 + 1608) + 8) & 0x3F0000;
    v363 = v362 == 983040;
    if (v362 == 983040)
      v364 = 1;
    else
      v364 = 2;
    if (v363 || (a7 & 1) != 0)
LABEL_481:
      *((_WORD *)v341 + 9) = *((_WORD *)v341 + 9) & 0xFFFC | v364;
  }
LABEL_482:
  if (!*(_BYTE *)(v13 + 2892))
  {
LABEL_486:
    if (v342 && *(_QWORD *)(v13 + 2880))
    {
      if ((*(_BYTE *)(v342 + 29) & 1) != 0)
      {
        sub_22EFC8E88(v342);
        v367 = *((unsigned int *)v366 + 2);
        if ((_DWORD)v367)
        {
          v368 = 8 * v367;
          v369 = *v366;
          while (*(_WORD *)(*(_QWORD *)v369 + 32) != 201)
          {
            v369 += 8;
            v368 -= 8;
            if (!v368)
              goto LABEL_484;
          }
        }
        else
        {
          v369 = *v366;
        }
        if (v369 != *v366 + 8 * v367)
        {
          if (*(_BYTE *)(v13 + 2892))
            v419 = 0;
          else
            v419 = *(uint64_t **)(v13 + 2880);
          v421 = sub_22F10ACF8(*(_QWORD *)(v457 & 0xFFFFFFFFFFFFFFF0));
          sub_22E494448(v419, (uint64_t)v341, v421, a8);
        }
      }
      goto LABEL_484;
    }
  }
  if (!v342)
  {
    v365 = 0;
    goto LABEL_496;
  }
LABEL_484:
  if (sub_22E47E038(v342))
  {
    llvm::ConstantInt::get();
    *(_QWORD *)&v622 = llvm::ValueAsMetadata::get();
    v365 = 1;
    llvm::MDTuple::getImpl();
    llvm::Instruction::setMetadata();
  }
  else
  {
    v365 = 1;
  }
LABEL_496:
  if ((llvm::AttributeList::hasFnAttr() & 1) != 0 || llvm::CallBase::hasFnAttrOnCalledFunction())
  {
    if (v460)
      sub_22E48A190(v13, 0);
    if ((*(_BYTE *)(v13 + 1868) & 0x40) != 0)
    {
      v406 = *(v341 - 4);
      if (v406 && !*(_BYTE *)(v406 + 16) && *(_QWORD *)(v406 + 24) == v341[9])
        llvm::Function::removeFnAttr();
      llvm::Value::getContext((llvm::Value *)v341);
      v341[8] = llvm::AttributeList::removeAttributeAtIndex();
      if ((*(_BYTE *)(v13 + 1864) & 9) != 0)
      {
        *(_BYTE *)(v13 + 1880) = 1;
        *(_QWORD *)v593 = v13 + 272;
        *(_OWORD *)&v593[8] = *(_OWORD *)(v13 + 320);
        llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v13 + 272));
        *(_QWORD *)(v13 + 320) = v341[5];
        *(_QWORD *)(v13 + 328) = v341 + 3;
        *(_QWORD *)&v622 = v341[6];
        if ((_QWORD)v622)
        {
          llvm::MetadataTracking::track();
          v407 = v622;
        }
        else
        {
          v407 = 0;
        }
        sub_22E3CF21C(v13 + 272, 0, v407);
        if ((_QWORD)v622)
          llvm::MetadataTracking::untrack();
        v408 = llvm::FunctionType::get();
        v409 = sub_22E633A04(*(_QWORD *)(v13 + 144), v408, "__asan_handle_no_return", 23, 0, 0, 0);
        LOWORD(v624) = 257;
        v411 = sub_22E479C7C(v13, v409, v410, 0, 0, (uint64_t)&v622);
        llvm::Value::getContext(v411);
        *((_QWORD *)v411 + 8) = llvm::AttributeList::addAttributeAtIndex();
        v412 = *(_QWORD *)v593;
        if (*(_QWORD *)&v593[8])
        {
          sub_22E3CB840(*(uint64_t *)v593, *(uint64_t *)&v593[8], *(uint64_t *)&v593[16]);
          v412 = *(_QWORD *)v593;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)v593 + 48) = 0;
          *(_QWORD *)(v412 + 56) = 0;
        }
        *(_QWORD *)&v622 = *(_QWORD *)&v593[24];
        if (*(_QWORD *)&v593[24])
        {
          llvm::MetadataTracking::track();
          v423 = v622;
        }
        else
        {
          v423 = 0;
        }
        sub_22E3CF21C(v412, 0, v423);
        if ((_QWORD)v622)
          llvm::MetadataTracking::untrack();
        if (*(_QWORD *)&v593[24])
          llvm::MetadataTracking::untrack();
        *(_BYTE *)(v13 + 1880) = 0;
      }
    }
    sub_22F260104(v13, a8);
    goto LABEL_585;
  }
  if (a7)
  {
    v370 = *(_QWORD *)(v13 + 2872);
    v371 = *(_QWORD *)(v13 + 1992) - v370;
    *(_QWORD *)&v622 = v371;
    if (v370)
    {
      do
      {
        if (!v371
          || (*(_BYTE *)(v371 + 24) & 7) != 0
          || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v371 + 120) + 8))(v371 + 120) & 1) == 0)
        {
          sub_22E628400(*(_QWORD *)(v13 + 144), *(_QWORD *)(v13 + 1904), "tail call skipping over cleanups");
        }
        sub_22E47E120((uint64_t *)&v622);
        v371 = v622;
      }
      while ((_QWORD)v622 != *(_QWORD *)(v13 + 1992));
    }
    v372 = (uint64_t *)(v13 + 272);
    if (*(_BYTE *)(*v341 + 8) == 7)
      sub_22E3CF118(v372);
    else
      sub_22E4772D4(v372, (uint64_t)v341);
LABEL_585:
    *(_QWORD *)(v13 + 320) = 0;
    *(_QWORD *)(v13 + 328) = 0;
    sub_22E47E098(v13);
    sub_22E4E06B0(v13, v457, v453);
    goto LABEL_586;
  }
  v471 = v365;
  v486 = v341;
  if (v447 >= 8)
  {
    v495[0] = v447 & 0xFFFFFFFFFFFFFFF8;
    v495[1] = v441 & 0xFFFFFFFFFFFFFFF8;
    v495[2] = 1 << (v441 & 7 | (8 * (v447 & 7)));
    v496 = 0;
    v498 = 0;
    v497 = 0;
    LOWORD(v624) = 257;
    v373 = sub_22E3C2A7C((uint64_t *)(v13 + 272), (uint64_t)v495, (uint64_t)&v622);
    v491[0] = v440;
    v491[1] = v445;
    v491[2] = v444;
    v492 = v443;
    v493 = v439;
    v494 = v442;
    sub_22E3BEDDC(v13 + 272, v373, v491, 0);
  }
  v374 = *(unsigned int *)(v465 + 1240);
  if ((_DWORD)v374)
  {
    v375 = (uint64_t *)(v13 + 272);
    v376 = *(_QWORD *)(v465 + 1232);
    v377 = 192 * v374;
    v378 = v376 + 184;
    while (1)
    {
      v380 = *(_QWORD *)(v376 + 8);
      v379 = *(_QWORD *)(v376 + 16);
      v601 = *(_OWORD *)(v376 + 24);
      v602 = *(_OWORD *)(v376 + 40);
      v381 = sub_22E47EF24(v380, *(_DWORD *)(v376 + 32), *(_QWORD *)(v13 + 144));
      if ((v381 & 1) != 0)
      {
        v382 = 0;
      }
      else
      {
        *(_QWORD *)&v622 = "icr.writeback";
        LOWORD(v624) = 259;
        v383 = (_QWORD *)operator new();
        llvm::BasicBlock::BasicBlock();
        *(_QWORD *)&v622 = "icr.done";
        LOWORD(v624) = 259;
        operator new();
        v384 = llvm::BasicBlock::BasicBlock();
        v604[0] = v380;
        v604[1] = v379;
        v605 = v601;
        v606 = v602;
        *(_QWORD *)&v622 = "icr.isnull";
        LOWORD(v624) = 259;
        v382 = (_QWORD *)v384;
        v385 = sub_22E47EF74((uint64_t)v375, (uint64_t)v604, (uint64_t)&v622);
        v386 = llvm::User::operator new((llvm::User *)0x40);
        MEMORY[0x23489C09C](v386, v382, v383, v385, 0);
        LOWORD(v624) = 257;
        v387 = v386;
        v13 = (unint64_t)v474;
        sub_22E3C12C8(v375, v387, (uint64_t)&v622);
        sub_22E5ED9B4(v474, v383, 0);
      }
      v388 = *(_OWORD *)(v376 + 136);
      v389 = *(_OWORD *)(v376 + 152);
      v603[2] = *(_OWORD *)(v376 + 168);
      v603[1] = v389;
      v603[0] = v388;
      LOWORD(v624) = 257;
      v390 = sub_22E3C2A7C(v375, (uint64_t)v603, (uint64_t)&v622);
      *(_QWORD *)&v622 = "icr.writeback-cast";
      LOWORD(v624) = 259;
      v391 = sub_22E3C1740(v375, 49, v390, v379, (uint64_t)&v622);
      if (*(_QWORD *)(v376 + 184))
        break;
      *(_OWORD *)v593 = (unint64_t)v391;
      LOBYTE(v595) = v595 & 0xF8;
      v393 = *(_OWORD *)(v376 + 96);
      v392 = *(_OWORD *)(v376 + 112);
      v394 = *(_OWORD *)(v376 + 80);
      v630 = *(_QWORD *)(v376 + 128);
      v628 = v393;
      v629 = v392;
      v627 = v394;
      v622 = *(_OWORD *)v376;
      v395 = *(_OWORD *)(v376 + 16);
      v396 = *(_OWORD *)(v376 + 32);
      v397 = *(_OWORD *)(v376 + 64);
      v625 = *(_OWORD *)(v376 + 48);
      v626 = v397;
      v623 = v395;
      v624 = v396;
      sub_22E4DAAE0(v13, v593, &v622, 0, *(double *)&v395);
      if ((v381 & 1) == 0)
        goto LABEL_516;
LABEL_517:
      v376 += 192;
      v378 += 192;
      v377 -= 192;
      if (!v377)
        goto LABEL_521;
    }
    v398 = sub_22E563CC4((_QWORD *)v13, v391, (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v13 + 144) + 832) + 248), 222, 0);
    sub_22F272698(v13, v378, 1);
    v627 = *(_OWORD *)(v376 + 80);
    v628 = *(_OWORD *)(v376 + 96);
    v629 = *(_OWORD *)(v376 + 112);
    v630 = *(_QWORD *)(v376 + 128);
    v623 = *(_OWORD *)(v376 + 16);
    v624 = *(_OWORD *)(v376 + 32);
    v625 = *(_OWORD *)(v376 + 48);
    v626 = *(_OWORD *)(v376 + 64);
    v622 = *(_OWORD *)v376;
    v399 = sub_22F25F748(v13, (uint64_t)&v622, 0);
    *(_OWORD *)v593 = *(_OWORD *)v376;
    v400 = *(_OWORD *)(v376 + 48);
    v402 = *(_OWORD *)(v376 + 16);
    v401 = *(_OWORD *)(v376 + 32);
    v596 = *(_OWORD *)(v376 + 64);
    v595 = v400;
    *(_OWORD *)&v593[16] = v402;
    v594 = v401;
    v404 = *(_OWORD *)(v376 + 96);
    v403 = *(_OWORD *)(v376 + 112);
    v405 = *(_OWORD *)(v376 + 80);
    v600 = *(_QWORD *)(v376 + 128);
    v599 = v403;
    v597 = v405;
    v598 = v404;
    sub_22E4E87FC(v13, v398, v593, 0);
    sub_22F27328C((llvm::Value *)v13, v399, (*(_BYTE *)(v376 + 80) & 0x20) == 0);
    if ((v381 & 1) != 0)
      goto LABEL_517;
LABEL_516:
    sub_22E5ED9B4((_QWORD *)v13, v382, 0);
    goto LABEL_517;
  }
LABEL_521:
  if (*(_QWORD *)(v465 + 1520))
  {
    v433 = sub_22F29B990();
    if (v433)
      v434 = *(_QWORD *)(v433 + 24);
    else
      v434 = 0;
    *(_QWORD *)v593 = *(_QWORD *)(v465 + 1520);
    LOWORD(v624) = 257;
    sub_22E462B78((uint64_t *)(v13 + 272), v434, v433, (uint64_t)v593, 1, (uint64_t)&v622, 0);
    v13 = (unint64_t)v474;
  }
  *(_QWORD *)v453 = 0;
  *(_QWORD *)(v453 + 8) = 0;
  *(_BYTE *)(v453 + 48) &= 0xF9u;
  if (!a10)
    __asm { BR              X10 }
  *(_QWORD *)v453 = v486;
  *(_BYTE *)(v453 + 48) = 0;
  if ((v471 & 1) == 1)
  {
    if (v484)
      sub_22E621294(v13, *(llvm::Type ***)v453, v457, a8, *(_DWORD *)(v484 + 16), v473, v479);
    if (v488)
      sub_22E621294(v13, *(llvm::Type ***)v453, v457, a8, *(_DWORD *)(v488 + 16), v476, 0);
  }
  if ((_DWORD)v611)
  {
    v413 = 24 * v611;
    v414 = (uint64_t *)((char *)v610 + 16);
    do
    {
      sub_22E4C9DFC((_QWORD *)v13, *v414, *(v414 - 1));
      v414 += 3;
      v413 -= 24;
    }
    while (v413);
  }
  v415 = *(unsigned int *)(v465 + 1480);
  if ((_DWORD)v415)
  {
    v416 = 16 * v415;
    v417 = (uint64_t *)(*(_QWORD *)(v465 + 1472) + 8);
    do
    {
      sub_22E4C9DFC((_QWORD *)v13, *v417, *(v417 - 1));
      v417 += 2;
      v416 -= 16;
    }
    while (v416);
  }
  if ((*(_BYTE *)(v446 + 48) & 4) == 0 && sub_22F115260(v457) == 4)
  {
    v418 = *(_OWORD *)(v453 + 16);
    v490[0] = *(_OWORD *)v453;
    v490[1] = v418;
    v490[2] = *(_OWORD *)(v453 + 32);
    sub_22F259F50(v13, 4, v490, v457);
  }
LABEL_586:
  v424 = (char *)v607;
  if ((_DWORD)v608)
  {
    v425 = 48 * v608;
    do
    {
      v426 = &v424[v425];
      v427 = *(void **)&v424[v425 - 24];
      if (v427)
      {
        *((_QWORD *)v426 - 2) = v427;
        operator delete(v427);
      }
      if (*(v426 - 25) < 0)
        operator delete(*((void **)v426 - 6));
      v425 -= 48;
    }
    while (v425);
    v424 = (char *)v607;
  }
  if (v424 != (char *)&v609)
    free(v424);
  if (v610 != v612)
    free(v610);
  if (v613 != v615)
    free(v613);
  if (v620 != &v621)
    free(v620);
}

BOOL sub_22E47DA60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 327)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

llvm::raw_ostream *sub_22E47DAC0(llvm::raw_ostream *a1, char *__s)
{
  size_t v4;
  void *v5;

  if (__s)
  {
    v4 = strlen(__s);
    v5 = (void *)*((_QWORD *)a1 + 4);
    if (v4 > *((_QWORD *)a1 + 3) - (_QWORD)v5)
      return (llvm::raw_ostream *)llvm::raw_ostream::write(a1, __s);
    if (v4)
    {
      memcpy(v5, __s, v4);
      *((_QWORD *)a1 + 4) += v4;
    }
  }
  return a1;
}

uint64_t sub_22E47DB44@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _OWORD v14[3];

  if (*(_QWORD *)result == 3)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 224);
    v6 = *(unsigned int **)(result + 8);
    v7 = *(_QWORD *)(result + 16);
    v8 = *(_QWORD *)(result + 24);
    v9 = *(_OWORD *)(result + 48);
    v14[0] = *(_OWORD *)(result + 32);
    v14[1] = v9;
    v14[2] = *(_OWORD *)(result + 64);
    v10 = *(_QWORD *)(result + 80);
    if (v6)
    {
      sub_22EFFAE7C(v6);
      v12 = v11;
    }
    else
    {
      v12 = 0;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t))(*(_QWORD *)v5 + 528))(v5, a2, v7, v8, v14, v10, v12);
  }
  else
  {
    v3 = *(_OWORD *)(result + 48);
    *(_OWORD *)(a3 + 32) = *(_OWORD *)(result + 32);
    *(_OWORD *)(a3 + 48) = v3;
    *(_OWORD *)(a3 + 64) = *(_OWORD *)(result + 64);
    *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + 80);
    v4 = *(_OWORD *)(result + 16);
    *(_OWORD *)a3 = *(_OWORD *)result;
    *(_OWORD *)(a3 + 16) = v4;
  }
  return result;
}

uint64_t sub_22E47DC00(uint64_t a1)
{
  int v1;
  char v2;
  BOOL v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;

  v1 = *(_DWORD *)(a1 + 8);
  v2 = v1;
  v3 = a1 == 0;
  if (a1 && (v1 & 0xFE) == 0x12)
    return llvm::Type::getPrimitiveSizeInBits((llvm::Type *)a1);
  while (!v3 && v2 == 17)
  {
    a1 = *(_QWORD *)(a1 + 24);
    v2 = *(_DWORD *)(a1 + 8);
    v3 = a1 == 0;
    if (a1)
      v4 = (*(_DWORD *)(a1 + 8) & 0xFE) == 18;
    else
      v4 = 0;
    if (v4)
      return llvm::Type::getPrimitiveSizeInBits((llvm::Type *)a1);
  }
  if (v3 || v2 != 16)
    return 0;
  v7 = *(unsigned int *)(a1 + 12);
  if (!(_DWORD)v7)
    return 0;
  LODWORD(v5) = 0;
  v8 = *(uint64_t **)(a1 + 16);
  v9 = 8 * v7;
  do
  {
    v10 = *v8++;
    v11 = sub_22E47DC00(v10);
    if (v5 <= v11)
      v5 = v11;
    else
      v5 = v5;
    v9 -= 8;
  }
  while (v9);
  return v5;
}

BOOL sub_22E47DCC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 312)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

_QWORD *sub_22E47DD24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *result;
  uint64_t v11;
  _QWORD *v12;
  llvm::LLVMContext *v13;
  unint64_t v14;
  uint64_t v15;

  if (*(_QWORD *)(a1 + 5832))
  {
    v11 = sub_22E4648A4(a1, a5);
    v12 = (_QWORD *)sub_22E4899EC(a1 + 1984, a2, 32);
    *v12 = &unk_24FA63320;
    v12[1] = a3;
    v12[2] = a4;
    v12[3] = v11;
    v14 = sub_22E489C10(a1, v13);
    return (_QWORD *)sub_22F2531F0(a1, v14, v15);
  }
  else
  {
    result = (_QWORD *)sub_22E4899EC(a1 + 1984, a2, 24);
    *result = &unk_24FA632F8;
    result[1] = a3 & 0xFFFFFFFFFFFFFFF8;
    result[2] = a5;
  }
  return result;
}

llvm::Value *sub_22E47DDEC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  llvm::Value *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;

  if (a7)
  {
    v18 = 0;
    v19 = 48 * a7;
    v20 = (_QWORD *)(a6 + 32);
    do
    {
      v18 += (*v20 - *(v20 - 1)) >> 3;
      v20 += 6;
      v19 -= 48;
    }
    while (v19);
    v13 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x50);
    if (a7)
    {
      v21 = 0;
      v22 = 48 * a7;
      v23 = (_QWORD *)(a6 + 32);
      do
      {
        v21 += (*v23 - *(v23 - 1)) >> 3;
        v23 += 6;
        v22 -= 48;
      }
      while (v22);
      v24 = 48 * a7;
      v25 = (_QWORD *)(a6 + 32);
      do
      {
        LODWORD(v22) = v22 + ((*v25 - *(v25 - 1)) >> 3);
        v25 += 6;
        v24 -= 48;
      }
      while (v24);
    }
  }
  else
  {
    v13 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x50);
  }
  llvm::Instruction::Instruction();
  *((_QWORD *)v13 + 8) = 0;
  llvm::CallInst::init();
  if (*((_BYTE *)a1 + 100))
  {
    llvm::Value::getContext(v13);
    *((_QWORD *)v13 + 8) = llvm::AttributeList::addAttributeAtIndex();
  }
  if (sub_22E3C1AC0((uint64_t)v13))
  {
    if (a9 || a1[11])
      llvm::Instruction::setMetadata();
    llvm::Instruction::setFastMathFlags();
  }
  (*(void (**)(uint64_t, llvm::Value *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v13, a8, a1[6], a1[7]);
  v14 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v14)
  {
    v16 = *a1;
    v17 = v16 + 16 * v14;
    do
    {
      llvm::Instruction::setMetadata();
      v16 += 16;
    }
    while (v16 != v17);
  }
  return v13;
}

BOOL sub_22E47E038(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 171)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22E47E098(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!*(_QWORD *)(result + 320))
  {
    v1 = (_QWORD *)result;
    v2 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    return sub_22E5ED9B4(v1, v2, 0);
  }
  return result;
}

uint64_t *sub_22E47E120(uint64_t *result)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *result;
  switch(*(_BYTE *)(*result + 24) & 7)
  {
    case 0:
      v2 = (((unint64_t)*(unsigned int *)(v1 + 24) >> 9) & 0xFFF) + 120;
      break;
    case 1:
      v3 = 24 * (*(_DWORD *)(v1 + 24) >> 3);
      goto LABEL_7;
    case 2:
      v2 = 32;
      break;
    case 3:
      v3 = *(_DWORD *)(v1 + 24) & 0xFFFFFFF8;
LABEL_7:
      v2 = v3 + 32;
      break;
    default:
      v2 = 0;
      break;
  }
  *result = v1 + ((v2 + 7) & 0xFFFFFFFF8);
  return result;
}

uint64_t sub_22E47E1A0(uint64_t a1, _QWORD *a2)
{
  return sub_22E4C9DFC(a2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 8));
}

uint64_t sub_22E47E1B0(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 20) & 0x20) != 0)
    return *(_QWORD *)((sub_22E47E270(a1)
                      + (unsigned __int16)((*(_QWORD *)(a1 + 16) >> 38) & ((32 * *(_QWORD *)(a1 + 16)) >> 63))
                      + 3) & 0xFFFFFFFFFFFFFFFCLL);
  else
    return sub_22E47E20C(a1);
}

uint64_t sub_22E47E20C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (a1 && *(_BYTE *)(a1 + 16) == 26)
    return (*(_QWORD *)(a1 + 16) >> 34) & 7;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
    && (v2 = a1, v3 = sub_22F10CF48(a1), a1 = v2, v3))
  {
    return (*(_QWORD *)(a1 + 16) >> 34) & 7;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_22E47E270(uint64_t a1)
{
  unint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = (int *)((a1 + 8 * (unsigned __int16)(v1 >> 38) + 4 * ((v1 >> 59) & 1) + 47) & 0xFFFFFFFFFFFFFFF8);
  v3 = v1 & 0x3C0000000000000;
  v4 = (v1 >> 54) & 0xF;
  if ((v1 & 0x3C0000000000000) == 0x80000000000000)
    v5 = *v2;
  else
    v5 = 0;
  if ((v4 - 9) < 3 || ((1 << v4) & 0x3B) != 0 || ((1 << v4) & 0x1C0) != 0)
    return ((uint64_t (*)(void))((char *)&loc_22E47E2E8 + 4 * byte_22F455738[v4]))();
  else
    return (uint64_t)&v2[2 * (v3 == 0x80000000000000) + 2 * v5];
}

void sub_22E47E34C()
{
  JUMPOUT(0x22E47E2E8);
}

void sub_22E47E358()
{
  JUMPOUT(0x2348A0E9CLL);
}

_QWORD *sub_22E47E36C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_24FA63208;
  v2 = (_QWORD *)a1[5];
  if (v2 != a1 + 7)
    free(v2);
  v3 = (_QWORD *)a1[2];
  if (v3 != a1 + 4)
    free(v3);
  return a1;
}

void sub_22E47E3C0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_24FA63208;
  v2 = (_QWORD *)a1[5];
  if (v2 != a1 + 7)
    free(v2);
  v3 = (_QWORD *)a1[2];
  if (v3 != a1 + 4)
    free(v3);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22E47E428()
{
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22E47E440()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E47E454(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  BOOL v5;
  BOOL v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  sub_22E46E150(&v18, a1, a2);
  v3 = v18;
  v4 = *(_DWORD *)(v18 + 8);
  if (v18)
    v5 = v4 == 0;
  else
    v5 = 0;
  if (v5)
  {
    v8 = *(_DWORD *)(v18 + 24);
    v7 = sub_22E47E454(*(_QWORD *)(v18 + 16), a2) * v8;
  }
  else
  {
    if (v18)
      v6 = v4 == 1;
    else
      v6 = 0;
    if (v6)
    {
      v9 = *(unsigned int *)(v18 + 24);
      if ((_DWORD)v9)
      {
        LODWORD(v7) = 0;
        v10 = *(_QWORD *)(v18 + 16);
        v11 = 8 * v9;
        do
        {
          v12 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)v10 + 16) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v12 + 8) & 0xF) != 0)
            v12 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(*(_QWORD *)v10 + 16));
          v7 = sub_22E47E454(v12 & 0xFFFFFFFFFFFFFFF0, a2) + v7;
          v10 += 8;
          v11 -= 8;
        }
        while (v11);
      }
      else
      {
        v7 = 0;
      }
      v13 = *(unsigned int *)(v3 + 48);
      if ((_DWORD)v13)
      {
        v14 = *(uint64_t **)(v3 + 40);
        v15 = 8 * v13;
        do
        {
          v16 = *v14++;
          v7 = sub_22E47E454(*(_QWORD *)(v16 + 48), a2) + v7;
          v15 -= 8;
        }
        while (v15);
      }
    }
    else if (v4 == 2)
    {
      v7 = 2;
    }
    else
    {
      v7 = 1;
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return v7;
}

BOOL sub_22E47E580(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v2 = *(_QWORD *)v1;
  v3 = *(unsigned int *)(v1 + 8);
  v4 = *(_QWORD *)v1 + 8 * v3;
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    while (*(_WORD *)(*(_QWORD *)v2 + 32) != 103)
    {
      v2 += 8;
      v5 -= 8;
      if (!v5)
      {
        v2 = v4;
        return v2 != v4;
      }
    }
  }
  return v2 != v4;
}

uint64_t sub_22E47E5E0(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *v2;
  if ((*(_BYTE *)(a1 + 29) & 1) != 0)
    sub_22EFC8E88(a1);
  return v3;
}

__n128 sub_22E47E638(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t DataLayout;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __n128 result;
  __int128 v24;
  _OWORD v25[3];
  const char *v26;
  __int16 v27;
  _OWORD v28[3];
  _OWORD v29[3];

  if (!*(_DWORD *)(a3 + 12))
    goto LABEL_7;
  v10 = **(_QWORD **)(a3 + 16);
  DataLayout = llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a5 + 144) + 200));
  sub_22E3C304C(DataLayout, v10);
  *(_QWORD *)&v29[0] = (unint64_t)(v12 + 7) >> 3;
  *((_QWORD *)&v29[0] + 1) = v13 == 1;
  v14 = llvm::TypeSize::operator unsigned long long();
  if (v14 < a4)
  {
    v15 = v14;
    v16 = llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a5 + 144) + 200));
    sub_22E3C304C(v16, a3);
    *(_QWORD *)&v29[0] = (unint64_t)(v17 + 7) >> 3;
    *((_QWORD *)&v29[0] + 1) = v18 == 1;
    if (v15 < llvm::TypeSize::operator unsigned long long())
      goto LABEL_7;
  }
  v19 = *(_OWORD *)(a2 + 16);
  v28[0] = *(_OWORD *)a2;
  v28[1] = v19;
  v28[2] = *(_OWORD *)(a2 + 32);
  v26 = "coerce.dive";
  v27 = 259;
  sub_22E3C408C((uint64_t *)(a5 + 272), (uint64_t)v28, 0, (uint64_t)&v26, (uint64_t)v29);
  v20 = v29[1];
  *(_OWORD *)a2 = v29[0];
  *(_OWORD *)(a2 + 16) = v20;
  *(_OWORD *)(a2 + 32) = v29[2];
  v21 = *(_QWORD *)(a2 + 8);
  if (!v21)
    goto LABEL_7;
  if (*(_BYTE *)(v21 + 8) == 16)
  {
    v22 = *(_OWORD *)(a2 + 16);
    v25[0] = *(_OWORD *)a2;
    v25[1] = v22;
    v25[2] = *(_OWORD *)(a2 + 32);
    sub_22E47E638(a1, v25);
  }
  else
  {
LABEL_7:
    v24 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v24;
    result = *(__n128 *)(a2 + 32);
    *(__n128 *)(a1 + 32) = result;
  }
  return result;
}

uint64_t sub_22E47E7A0(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *DataLayout;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  unint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v24;
  uint64_t v25;
  __int16 v26;

  v3 = a1;
  v4 = *a1;
  if (*a1 != a2)
  {
    if (*(_BYTE *)(v4 + 8) == 15)
    {
      v7 = a3 + 34;
      if (*(_BYTE *)(a2 + 8) == 15)
      {
        v24 = "coerce.val";
        v26 = 259;
        v8 = 49;
        return sub_22E3C1740(v7, v8, (uint64_t)v3, a2, (uint64_t)&v24);
      }
      v9 = a3[11];
      v24 = "coerce.val.pi";
      v26 = 259;
      v3 = (uint64_t *)sub_22E3C1740(v7, 47, (uint64_t)v3, v9, (uint64_t)&v24);
      v4 = *v3;
    }
    if (*(_BYTE *)(a2 + 8) == 15)
      v10 = a3[11];
    else
      v10 = a2;
    if (v4 != v10)
    {
      DataLayout = (_BYTE *)llvm::Module::getDataLayout(*(llvm::Module **)(a3[18] + 200));
      if (*DataLayout)
      {
        v12 = (uint64_t)DataLayout;
        sub_22E3C304C((uint64_t)DataLayout, *v3);
        v24 = v13;
        v25 = v14;
        v15 = llvm::TypeSize::operator unsigned long long();
        sub_22E3C304C(v12, v10);
        v24 = v16;
        v25 = v17;
        if (v15 <= llvm::TypeSize::operator unsigned long long())
        {
          v24 = "coerce.val.ii";
          v26 = 259;
          v21 = sub_22E3C1740(a3 + 34, 39, (uint64_t)v3, v10, (uint64_t)&v24);
          v24 = "coerce.highbits";
          v26 = 259;
          v22 = llvm::ConstantInt::get();
          v20 = (uint64_t)sub_22E3ED744((uint64_t)(a3 + 34), v21, v22, (uint64_t)&v24, 0, 0);
        }
        else
        {
          v24 = "coerce.highbits";
          v26 = 259;
          v18 = llvm::ConstantInt::get();
          v19 = sub_22E3E4A40((uint64_t)(a3 + 34), (uint64_t)v3, v18, (uint64_t)&v24, 0);
          v24 = "coerce.val.ii";
          v26 = 259;
          v20 = sub_22E3C1740(a3 + 34, 38, v19, v10, (uint64_t)&v24);
        }
      }
      else
      {
        v24 = "coerce.val.ii";
        v26 = 259;
        v20 = sub_22E3BF45C(a3 + 34, (uint64_t)v3, v10, 0, (uint64_t)&v24);
      }
      v3 = (uint64_t *)v20;
    }
    if (*(_BYTE *)(a2 + 8) == 15)
    {
      v7 = a3 + 34;
      v24 = "coerce.val.ip";
      v26 = 259;
      v8 = 48;
      return sub_22E3C1740(v7, v8, (uint64_t)v3, a2, (uint64_t)&v24);
    }
  }
  return (uint64_t)v3;
}

unint64_t sub_22E47EA10(uint64_t a1, uint64_t a2, llvm::Type *a3, int64_t a4, uint64_t *a5)
{
  llvm::DataLayout *DataLayout;
  uint64_t PrefTypeAlignment;
  unint64_t v12;
  int v13;
  __int16 v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t result;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD v22[4];
  __int16 v23;

  DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a2 + 144) + 200));
  PrefTypeAlignment = llvm::DataLayout::getPrefTypeAlignment(DataLayout, a3);
  if (PrefTypeAlignment <= a4)
    v12 = a4;
  else
    v12 = PrefTypeAlignment;
  v13 = *((unsigned __int8 *)a5 + 32);
  if (v13 == 1)
  {
    v22[0] = ".coerce";
    v14 = 259;
    goto LABEL_8;
  }
  if (!*((_BYTE *)a5 + 32))
  {
    v14 = 256;
LABEL_8:
    v23 = v14;
    goto LABEL_13;
  }
  v15 = a5[1];
  if (*((_BYTE *)a5 + 33) == 1)
  {
    v16 = (uint64_t *)*a5;
  }
  else
  {
    LOBYTE(v13) = 2;
    v16 = a5;
  }
  v22[0] = v16;
  v22[1] = v15;
  v22[2] = ".coerce";
  LOBYTE(v23) = v13;
  HIBYTE(v23) = 3;
LABEL_13:
  result = sub_22E4D83CC(a2, a3, v12, (uint64_t)v22, 0, 0);
  v19 = 0;
  v20 = result & 0xFFFFFFFFFFFFFFF8;
  if (result <= 7)
    v20 = 0;
  v21 = v18 & 0xFFFFFFFFFFFFFFF8;
  if (result <= 7)
    v21 = 0;
  *(_QWORD *)a1 = v20;
  *(_QWORD *)(a1 + 8) = v21;
  if (result >= 8)
    v19 = 1 << (v18 & 7 | (8 * (result & 7)));
  *(_QWORD *)(a1 + 16) = v19;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

void sub_22E47EB2C(uint64_t a1, unint64_t a2, uint64_t a3, _QWORD *a4)
{
  int v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  uint64_t *v25;
  char v26;
  unsigned int v27;
  void *v28[2];
  _QWORD v29[5];

  v5 = a3;
  v29[4] = *MEMORY[0x24BDAC8D0];
  v7 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v8 && *(_BYTE *)(v8 + 16) == 45)
  {
    sub_22E475914(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0), a3, a4);
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 144);
    v10 = sub_22EF5C728(v9, a2);
    if (v10 && (v11 = v10, *(_BYTE *)(v10 + 16) == 2))
    {
      v12 = *(_QWORD *)(a1 + 144);
      v13 = sub_22EF5BA38(v12, *(_QWORD *)(v10 + 32));
      sub_22EF5CCD0(v12, *(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0), (uint64_t)v28);
      v14 = (int)v28[0];
      v15 = SLODWORD(v28[0]);
      v28[0] = v29;
      v28[1] = (void *)0x400000000;
      sub_22E47EDD0((uint64_t)v28, v15, 0);
      sub_22E47EB2C(a1, v13, 0, v28);
      v16 = sub_22EF6A060(v12, v11);
      v17 = (uint64_t *)v28[0];
      if (v16 >= 1)
      {
        v18 = 0;
        v19 = *a4 + 8 * v5;
        do
        {
          if (v14 >= 1)
          {
            v20 = (_QWORD *)(v19 + 8 * v18 * v15);
            v21 = v14;
            v22 = v17;
            do
            {
              v23 = *v22++;
              *v20++ |= v23;
              --v21;
            }
            while (v21);
          }
          ++v18;
        }
        while (v18 != v16);
      }
      if (v17 != v29)
        free(v17);
    }
    else
    {
      sub_22EF5CCD0(v9, *v7, (uint64_t)v28);
      v24 = (int)v28[0];
      if (SLODWORD(v28[0]) >= 1)
      {
        v25 = (uint64_t *)(*a4 + 8 * v5);
        v26 = sub_22EF5CDF0(v9, *(_QWORD *)(*(_QWORD *)(v9 + 16408) & 0xFFFFFFFFFFFFFFF0));
        v27 = v24 + 1;
        do
        {
          *v25++ = ~(-1 << v26);
          --v27;
        }
        while (v27 > 1);
      }
    }
  }
}

uint64_t sub_22E47ED6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = 0;
  v5 = a2;
  if (sub_22F24F9F4((uint64_t *)a1, &v5, &v4))
    return v4;
  else
    return *(_QWORD *)a1 + 40 * *(unsigned int *)(a1 + 16);
}

uint64_t sub_22E47EDD0(uint64_t result, unint64_t a2, uint64_t a3)
{
  _QWORD **v5;
  _QWORD *v6;
  unint64_t v7;
  _DWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;

  v5 = (_QWORD **)result;
  if (*(unsigned int *)(result + 12) >= a2)
  {
    v9 = *(_QWORD **)result;
    v8 = (_DWORD *)(result + 8);
    v10 = *(unsigned int *)(result + 8);
    if (v10 >= a2)
      v11 = a2;
    else
      v11 = *(unsigned int *)(result + 8);
    if (v11)
    {
      v12 = *(_QWORD **)result;
      do
      {
        *v12++ = a3;
        --v11;
      }
      while (v11);
    }
    v13 = v10 - a2;
    if (v10 < a2)
    {
      v14 = &v9[v10];
      do
        *v14++ = a3;
      while (!__CFADD__(v13++, 1));
    }
  }
  else
  {
    *(_DWORD *)(result + 8) = 0;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *v5;
    v7 = a2;
    do
    {
      *v6++ = a3;
      --v7;
    }
    while (v7);
    v8 = v5 + 1;
  }
  *v8 = a2;
  return result;
}

uint64_t sub_22E47EE80(_QWORD *a1)
{
  uint64_t v1;
  int v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v10;

  v1 = *a1;
  v2 = *(unsigned __int8 *)(*a1 + 16);
  if (*a1)
    v3 = v2 == 26;
  else
    v3 = 0;
  if (v3)
  {
    v5 = *(_QWORD *)(v1 + 16);
    v6 = 24;
    if ((v5 & 0x3C0000000000000) == 0)
      v6 = 16;
  }
  else
  {
    if (v2 == 25)
    {
      v4 = 16;
      goto LABEL_12;
    }
    v5 = *(_QWORD *)(v1 + 16);
    v6 = 16;
  }
  v4 = ((v5 >> 35) & 0x7FFF8) + v6;
LABEL_12:
  v7 = *(_QWORD *)(v1 + 24);
  if (v7 >= 0x10 && (v7 & 0xF) == 0)
    v10 = *(_QWORD *)((char *)&unk_22F4557C8
                    + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  else
    v10 = 1;
  return (a1[1] + v4 + v10 - 1) & -v10;
}

uint64_t sub_22E47EF24(uint64_t a1, char a2, uint64_t a3)
{
  if ((a2 & 3) != 0)
    return 0;
  llvm::Module::getDataLayout(*(llvm::Module **)(a3 + 200));
  return llvm::isKnownNonZero();
}

uint64_t sub_22E47EF74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::Constant **v6;
  uint64_t NullValue;

  if (*(_QWORD *)(a2 + 40))
    return llvm::ConstantInt::getFalse();
  v6 = *(llvm::Constant ***)a2;
  NullValue = llvm::Constant::getNullValue(**(llvm::Constant ***)a2, (llvm::Type *)a2);
  return sub_22E3C18F4(a1, 32, (uint64_t *)v6, NullValue, a3);
}

size_t *sub_22E47EFD8(size_t *result, size_t a2, int __c)
{
  size_t *v5;
  void *v6;
  int v7;
  size_t v8;
  size_t v9;
  size_t v10;

  v5 = result;
  if (result[2] < a2)
  {
    result[1] = 0;
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v6 = (void *)*v5;
    v7 = __c;
    v8 = a2;
LABEL_10:
    result = (size_t *)memset(v6, v7, v8);
    goto LABEL_11;
  }
  v9 = result[1];
  if (v9 >= a2)
    v10 = a2;
  else
    v10 = result[1];
  if (v10)
  {
    result = (size_t *)memset((void *)*result, __c, v10);
    v9 = v5[1];
  }
  v8 = a2 - v9;
  if (a2 > v9)
  {
    v6 = (void *)(*v5 + v9);
    v7 = __c;
    goto LABEL_10;
  }
LABEL_11:
  v5[1] = a2;
  return result;
}

uint64_t sub_22E47F074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_22E47F0A8(a2, a5);
  return llvm::FoldingSetNodeID::operator==();
}

uint64_t sub_22E47F0A8(uint64_t result, uint64_t a2)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 *v65;
  int v66;

  v3 = *(_WORD *)(result + 10) & 0x3F;
  v4 = *(_DWORD *)(a2 + 8);
  if (v4 >= *(_DWORD *)(a2 + 12))
  {
    v51 = result;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    result = v51;
    v4 = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v4) = v3;
  v5 = *(_DWORD *)(a2 + 12);
  v6 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v6;
  v7 = *(_QWORD *)(result + 8);
  if (v6 >= v5)
  {
    v52 = result;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    result = v52;
    v6 = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v6) = (v7 >> 22) & 1;
  v8 = *(_DWORD *)(a2 + 12);
  v9 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v9;
  v10 = *(_QWORD *)(result + 8);
  if (v9 >= v8)
  {
    v53 = result;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    result = v53;
    v9 = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v9) = (v10 >> 23) & 1;
  v11 = *(_DWORD *)(a2 + 12);
  v12 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v12;
  v13 = *(_QWORD *)(result + 8);
  if (v12 >= v11)
  {
    v54 = result;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    result = v54;
    v12 = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v12) = (v13 >> 25) & 1;
  v14 = *(_DWORD *)(a2 + 12);
  v15 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v15;
  v16 = *(_QWORD *)(result + 8);
  if (v15 >= v14)
  {
    v55 = result;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    result = v55;
    v15 = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v15) = (v16 >> 26) & 1;
  v17 = *(_DWORD *)(a2 + 12);
  v18 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v18;
  v19 = *(_QWORD *)(result + 8);
  if (v18 >= v17)
  {
    v56 = result;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    result = v56;
    v18 = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v18) = (v19 >> 27) & 1;
  v20 = *(_DWORD *)(a2 + 12);
  v21 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v21;
  v22 = *(_QWORD *)(result + 8);
  if (v21 >= v20)
  {
    v57 = result;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    result = v57;
    v21 = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v21) = (v22 >> 28) & 1;
  v23 = *(_DWORD *)(a2 + 12);
  v24 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v24;
  v25 = *(_DWORD *)(result + 8) >> 29;
  if (v24 >= v23)
  {
    v58 = result;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    result = v58;
    v24 = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v24) = v25;
  v26 = *(_DWORD *)(a2 + 12);
  v27 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v27;
  v28 = *(_QWORD *)(result + 8);
  if (v27 >= v26)
  {
    v59 = result;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    result = v59;
    v27 = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v27) = BYTE4(v28) & 1;
  v29 = *(_DWORD *)(a2 + 12);
  v30 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v30;
  v31 = *(_QWORD *)(result + 8);
  if (v30 >= v29)
  {
    v60 = result;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    result = v60;
    v30 = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v30) = BYTE3(v31) & 1;
  v32 = *(_DWORD *)(a2 + 12);
  v33 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v33;
  v34 = *(_DWORD *)(result + 16);
  if (v33 >= v32)
  {
    v61 = result;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    result = v61;
    v33 = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v33) = v34;
  v35 = *(_DWORD *)(a2 + 12);
  v36 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v36;
  v37 = *(_DWORD *)(result + 32);
  if (v36 >= v35)
  {
    v62 = result;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    result = v62;
    v36 = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v36) = v37 >> 31;
  v38 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v38;
  if ((*(_DWORD *)(result + 32) & 0x80000000) != 0)
  {
    v63 = result;
    v64 = *(unsigned int *)(result + 36);
    if ((_DWORD)v64)
    {
      v65 = (unsigned __int8 *)(result + 40 * (v64 + 1) + 40);
      do
      {
        v66 = *v65;
        if (v38 >= *(_DWORD *)(a2 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v38 = *(_DWORD *)(a2 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a2 + 4 * v38) = v66;
        v38 = *(_DWORD *)(a2 + 8) + 1;
        *(_DWORD *)(a2 + 8) = v38;
        ++v65;
        --v64;
        result = v63;
      }
      while (v64);
    }
  }
  v39 = *(_QWORD *)(result + 40);
  if (v38 >= *(_DWORD *)(a2 + 12))
  {
    v49 = result;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    result = v49;
    v38 = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v38) = v39;
  v40 = *(_DWORD *)(a2 + 12);
  v41 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v41;
  if (v41 >= v40)
  {
    v50 = result;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    result = v50;
    v41 = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v41) = HIDWORD(v39);
  v42 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v42;
  v43 = *(unsigned int *)(result + 36);
  if ((_DWORD)v43)
  {
    v44 = (uint64_t *)(result + 80);
    v45 = 40 * v43;
    do
    {
      v46 = *v44;
      if (v42 >= *(_DWORD *)(a2 + 12))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v42 = *(_DWORD *)(a2 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a2 + 4 * v42) = v46;
      v47 = *(_DWORD *)(a2 + 12);
      v48 = *(_DWORD *)(a2 + 8) + 1;
      *(_DWORD *)(a2 + 8) = v48;
      if (v48 >= v47)
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v48 = *(_DWORD *)(a2 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a2 + 4 * v48) = HIDWORD(v46);
      v42 = *(_DWORD *)(a2 + 8) + 1;
      *(_DWORD *)(a2 + 8) = v42;
      v44 += 5;
      v45 -= 40;
    }
    while (v45);
  }
  return result;
}

uint64_t sub_22E47F5EC(uint64_t *a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _OWORD v27[2];
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32[2];
  uint64_t v33;

  v3 = a2[1];
  v29 = *a2;
  v30 = v3;
  v31 = a2[2];
  v4 = *a1;
  v5 = *(_QWORD *)(*(_QWORD *)a1[1] + 16);
  sub_22E6281E0(*(_QWORD **)(*a1 + 144), v5, (uint64_t)v27);
  v9 = v29;
  v10 = v30;
  v11 = v31;
  v6 = *(_QWORD *)(*(_QWORD *)(v4 + 144) + 144);
  v32[0] = v27[0];
  v32[1] = v27[1];
  v33 = v28;
  v19 = 0uLL;
  LODWORD(v20) = 0;
  *((_QWORD *)&v18 + 1) = 0;
  *((_QWORD *)&v20 + 1) = 0;
  *(_QWORD *)&v21 = 0;
  v22 = 0uLL;
  *(_QWORD *)((char *)&v23 + 4) = 2;
  LODWORD(v18) = 0;
  v24 = 0u;
  v25 = 0u;
  sub_22E3C113C((uint64_t)&v18, &v9, v5, 2, v32, v6);
  v7 = *(_QWORD *)(*(_QWORD *)a1[1] + 16);
  v15 = v24;
  v16 = v25;
  v17 = v26;
  v11 = v20;
  v12 = v21;
  v13 = v22;
  v14 = v23;
  v9 = v18;
  v10 = v19;
  return sub_22E46E56C(v4, v7, &v9, a1[2]);
}

uint64_t sub_22E47F704(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  __int128 v13[3];
  _OWORD v14[3];
  uint64_t v15;

  v3 = *(_QWORD *)a1;
  v4 = a2[2];
  v13[1] = a2[1];
  v13[2] = v4;
  v13[0] = *a2;
  sub_22E4EE4E8(v3, v13, *(_QWORD *)(**(_QWORD **)(a1 + 8) + 16), 0, (uint64_t)v14);
  v5 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 16);
  v7 = v14[0];
  v8 = v14[1];
  v9 = v14[2];
  v10 = v15;
  v11 = 0;
  v12 = v5;
  return sub_22E46EC3C(v3);
}

unint64_t sub_22E47F7A8(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  unint64_t v5;
  unint64_t v7;

  v2 = a2;
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = *(_QWORD *)a1 + 56 * v3;
    if (*(_QWORD *)a1 <= a2 && v5 > a2)
    {
      v7 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      return *(_QWORD *)a1 + v7;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
  }
  return v2;
}

uint64_t sub_22E47F820(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  llvm::Type **v5;
  __int128 v6;
  _OWORD v8[3];
  _BYTE v9[32];
  __int16 v10;
  _OWORD v11[3];

  v3 = a2 + 272;
  v4 = *(_OWORD *)(a1 + 24);
  v11[0] = *(_OWORD *)(a1 + 8);
  v11[1] = v4;
  v11[2] = *(_OWORD *)(a1 + 40);
  v10 = 257;
  v5 = (llvm::Type **)sub_22E3C2A7C((uint64_t *)(a2 + 272), (uint64_t)v11, (uint64_t)v9);
  v6 = *(_OWORD *)(a1 + 72);
  v8[0] = *(_OWORD *)(a1 + 56);
  v8[1] = v6;
  v8[2] = *(_OWORD *)(a1 + 88);
  return sub_22E3BEDDC(v3, v5, (uint64_t)v8);
}

void sub_22E47F89C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  _OWORD v22[2];
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27[2];
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  if (sub_22F115260(*(_QWORD *)(a1 + 56)) == 1)
  {
    v4 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(a1 + 56) & 0xFFFFFFFFFFFFFFF0));
    if (v4)
    {
      if ((*(_DWORD *)(v4 + 28) & 0x7Fu) - 35 >= 3)
        v4 = 0;
    }
    v5 = sub_22EFD10F8(v4);
    v6 = *(_OWORD *)(a1 + 24);
    v29 = *(_OWORD *)(a1 + 8);
    v30 = v6;
    v31 = *(_OWORD *)(a1 + 40);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t, _QWORD, _QWORD, __int128 *, _QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 144) + 224) + 472))(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 224), a2, v5, 1, 0, 0, &v29, *(_QWORD *)(a1 + 56));
  }
  else
  {
    v7 = *(_OWORD *)(a1 + 24);
    v24 = *(_OWORD *)(a1 + 8);
    v25 = v7;
    v26 = *(_OWORD *)(a1 + 40);
    v8 = *(_QWORD *)(a1 + 56);
    sub_22E6281E0(*(_QWORD **)(a2 + 144), v8, (uint64_t)v22);
    v29 = v24;
    v30 = v25;
    v31 = v26;
    v9 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
    v27[0] = v22[0];
    v27[1] = v22[1];
    v28 = v23;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v11 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 2;
    v10 = 0;
    v20 = 0u;
    v21 = 0u;
    sub_22E3C113C((uint64_t)&v10, &v29, v8, 2, v27, v9);
    sub_22E54F9EC();
  }
}

uint64_t sub_22E47F9F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;

  v6 = *(_DWORD *)(a2 + 24) & 3;
  v7 = sub_22E4648A4(a1, *(_QWORD *)a2);
  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v8;
  *(_QWORD *)(a3 + 16) = v9;
  if (v6)
  {
    HIDWORD(v11) = *(_DWORD *)(a2 + 24);
    LODWORD(v11) = HIDWORD(v11);
    v10 = v11 >> 4;
    v12 = sub_22E4648A4(a1, *(_QWORD *)(a2 + 32));
  }
  else
  {
    v12 = 0;
    v10 = *(_DWORD *)(a2 + 24) << 28;
  }
  *(_DWORD *)(a3 + 24) = v10;
  *(_QWORD *)(a3 + 32) = v12;
  *(_QWORD *)(a3 + 40) = sub_22E4648A4(a1, *(_QWORD *)(a2 + 40));
  result = llvm::PointerType::get();
  *(_QWORD *)(a3 + 48) = result;
  return result;
}

void sub_22E47FA90(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t (**v6)();
  uint64_t v7[7];
  _OWORD v8[3];
  uint64_t v9;

  v4 = *(_OWORD *)(a1 + 24);
  v8[0] = *(_OWORD *)(a1 + 8);
  v8[1] = v4;
  v8[2] = *(_OWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 56);
  sub_22F24FD44(a2, (uint64_t)v8, v7);
  v5 = *(_QWORD *)(a1 + 64);
  v6 = off_24FA632A8;
  v7[6] = v5;
  sub_22E47F89C((uint64_t)&v6, a2);
}

uint64_t sub_22E47FB08(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_22E47FB48(uint64_t a1, const char *a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  size_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  unsigned int v18;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;

  v22 = 0;
  v6 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  v7 = *(_DWORD *)(a1 + 8);
  v8 = strlen(a2);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v9 = v8;
  v10 = v6 + 48 * v7;
  if (v8 >= 0x17)
  {
    v12 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v12 = v8 | 7;
    v13 = v12 + 1;
    v11 = (__int128 *)operator new(v12 + 1);
    *((_QWORD *)&v20 + 1) = v9;
    v21 = v13 | 0x8000000000000000;
    *(_QWORD *)&v20 = v11;
    goto LABEL_8;
  }
  HIBYTE(v21) = v8;
  v11 = &v20;
  if (v8)
LABEL_8:
    memcpy(v11, a2, v9);
  *((_BYTE *)v11 + v9) = 0;
  v14 = *a3;
  *(_OWORD *)v10 = v20;
  *(_QWORD *)(v10 + 16) = v21;
  v15 = (_QWORD *)(v6 + 48 * v7);
  v15[4] = 0;
  v15[5] = 0;
  v16 = operator new(8uLL);
  v15[3] = v16;
  v15[5] = v16 + 1;
  *v16 = v14;
  v15[4] = v16 + 1;
  sub_22E47FCA8((uint64_t *)a1, v6);
  v17 = v22;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v6;
  v18 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v18;
  *(_DWORD *)(a1 + 12) = v17;
  return v6 + 48 * v18 - 48;
}

void sub_22E47FCA8(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  __int128 *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  __int128 *v9;
  void *v10;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v3 = (__int128 *)*a1;
    v4 = *a1 + 48 * v2;
    do
    {
      v5 = *v3;
      *(_QWORD *)(a2 + 16) = *((_QWORD *)v3 + 2);
      *(_OWORD *)a2 = v5;
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
      *(_QWORD *)v3 = 0;
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      *(_OWORD *)(a2 + 24) = *(__int128 *)((char *)v3 + 24);
      *(_QWORD *)(a2 + 40) = *((_QWORD *)v3 + 5);
      *((_QWORD *)v3 + 3) = 0;
      *((_QWORD *)v3 + 4) = 0;
      *((_QWORD *)v3 + 5) = 0;
      v3 += 3;
      a2 += 48;
    }
    while (v3 != (__int128 *)v4);
    v6 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v6)
    {
      v7 = (__int128 *)*a1;
      v8 = 3 * v6;
      do
      {
        v9 = &v7[v8];
        v10 = (void *)*((_QWORD *)&v7[v8 - 1] - 1);
        if (v10)
        {
          *((_QWORD *)v9 - 2) = v10;
          operator delete(v10);
        }
        if (*((char *)v9 - 25) < 0)
          operator delete(*((void **)v9 - 6));
        v8 -= 3;
      }
      while (v8 * 16);
    }
  }
}

llvm::ValueHandleBase *sub_22E47FD64(llvm::ValueHandleBase *this, _QWORD *a2)
{
  uint64_t v4;

  *(_QWORD *)this = 6;
  *((_QWORD *)this + 1) = 0;
  v4 = a2[2];
  *((_QWORD *)this + 2) = v4;
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::AddToExistingUseList(this, (llvm::ValueHandleBase **)(*a2 & 0xFFFFFFFFFFFFFFF8));
  *((_QWORD *)this + 3) = a2[3];
  return this;
}

uint64_t sub_22E47FDC4(int a1, llvm::AttributeList *this, unsigned __int8 a3)
{
  unsigned int RetAlignment;

  RetAlignment = (unsigned __int16)llvm::AttributeList::getRetAlignment(this);
  if (RetAlignment <= 0x100)
    LOBYTE(RetAlignment) = 0;
  if (a3 <= RetAlignment)
    return *(_QWORD *)this;
  llvm::Attribute::getWithAlignment();
  llvm::AttributeList::removeAttributeAtIndex();
  return llvm::AttributeList::addAttributeAtIndex();
}

uint64_t sub_22E47FE60(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if (!*(_QWORD *)(a2 + 128))
  {
    v6 = a1;
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
    a1 = v6;
    if (!*(_QWORD *)(a2 + 128))
      return 1;
  }
  v3 = sub_22F0C975C(*(_QWORD *)(a1 + 144), a2);
  if (sub_22EFD61B0(a2))
    v4 = v3 + 16;
  else
    v4 = *(_QWORD *)(v3 + 72) + 8;
  return *(_QWORD *)v4;
}

uint64_t sub_22E47FEDC(uint64_t a1, unint64_t a2)
{
  uint64_t **v4;

  if (!*(_QWORD *)(a2 + 128))
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
    if (!*(_QWORD *)(a2 + 128))
      return 1;
  }
  v4 = (uint64_t **)sub_22F0C975C(*(_QWORD *)(a1 + 144), a2);
  if (sub_22EFD61B0(a2))
    return (uint64_t)*v4;
  if (*v4[9] <= 1)
    return 1;
  return *v4[9];
}

uint64_t sub_22E47FF54(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v7 = sub_22F0C975C(*(_QWORD *)(a1 + 144), a4);
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 72) + 8);
  if ((*(_BYTE *)(a3 + 74) & 1) != 0)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(sub_22F0C975C(*(_QWORD *)(a1 + 144), a3) + 72) + 8);
    if (v8 >= a2)
      v11 = a2;
    else
      v11 = v8;
    if (v10 <= a2)
      return v8;
    else
      return v11;
  }
  else if (a2 >= v8)
  {
    return *(_QWORD *)(*(_QWORD *)(v7 + 72) + 8);
  }
  else
  {
    return a2;
  }
}

uint64_t sub_22E47FFCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _DWORD *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t result;
  _OWORD v25[3];

  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 224);
  v15 = a3[1];
  v25[0] = *a3;
  v25[1] = v15;
  v25[2] = a3[2];
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t))(*(_QWORD *)v14 + 120))(v14, a1, a2, v25, a4, a5);
  v17 = sub_22E62D754(*(_QWORD **)(a1 + 144), *(_QWORD *)(a5 + 32), a6, a7, 0);
  v18 = *(_QWORD *)(a1 + 144);
  v19 = *((_QWORD *)a3 + 2);
  v20 = sub_22F10C2A4(*(_QWORD *)(a5 + 40));
  if ((*(_DWORD *)(v20 + 28) & 0x7Fu) - 35 >= 3)
    v21 = 0;
  else
    v21 = v20;
  if ((*(_BYTE *)(v21 + 74) & 1) != 0)
  {
    v22 = *(_QWORD *)(*(_QWORD *)(sub_22F0C975C(*(_QWORD *)(v18 + 144), v21) + 72) + 8);
    if (v17 >= v19)
      v23 = v19;
    else
      v23 = v17;
    if (v22 > v19)
      v17 = v23;
  }
  else if (v19 < v17)
  {
    v17 = v19;
  }
  result = sub_22E66C868(*(_QWORD *)(a1 + 144) + 280, *(_QWORD *)(a5 + 32), 0);
  *(_QWORD *)a8 = v16;
  *(_QWORD *)(a8 + 8) = result;
  *(_QWORD *)(a8 + 16) = v17;
  *(_DWORD *)(a8 + 24) = 0;
  *(_QWORD *)(a8 + 32) = 0;
  *(_QWORD *)(a8 + 40) = 0;
  return result;
}

uint64_t sub_22E4800F0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  if (a3 == a4)
    return 0;
  v5 = a3;
  v7 = 0;
  v8 = *(_QWORD *)(a1 + 144);
  do
  {
    v9 = *v5;
    v10 = sub_22F0C975C(v8, a2);
    v11 = *(_QWORD *)(**(_QWORD **)(v9 + 16) & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(v11 + 8) & 0xF) != 0)
      v11 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v9 + 16));
    a2 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                 + 24));
    v7 += sub_22E46A3EC(v10, a2);
    ++v5;
  }
  while (v5 != a4);
  return v7;
}

double sub_22E4801BC@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, int a5@<W4>, _OWORD *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  llvm::LLVMContext *v17;
  uint64_t v18;
  __int128 v19;
  double result;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25[3];
  _BYTE v26[32];
  __int16 v27;
  _OWORD v28[3];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32[3];

  v11 = sub_22F0C975C(*(_QWORD *)(a1[18] + 144), a3);
  if (a5)
    v12 = sub_22F2500F4(v11, a4);
  else
    v12 = sub_22E46A3EC(v11, a4);
  v13 = v12;
  v14 = a2[1];
  *a6 = *a2;
  a6[1] = v14;
  a6[2] = a2[2];
  if (v12)
  {
    v21 = a2[1];
    v32[0] = *a2;
    v32[1] = v21;
    v32[2] = a2[2];
    v22 = a1[1];
    LOWORD(v31) = 257;
    sub_22E3BEE6C(a1 + 34, v32, v22, (uint64_t)&v29, (uint64_t)a6);
    v23 = a6[1];
    v28[0] = *a6;
    v28[1] = v23;
    v28[2] = a6[2];
    v27 = 257;
    sub_22F24D74C(a1 + 34, (uint64_t)v28, v13, (uint64_t)v26, (uint64_t)&v29);
    v24 = v30;
    *a6 = v29;
    a6[1] = v24;
    a6[2] = v31;
  }
  v15 = a6[1];
  v25[0] = *a6;
  v25[1] = v15;
  v25[2] = a6[2];
  v16 = *(_QWORD *)(a4 + 48);
  if (v16)
    v17 = (llvm::LLVMContext *)(v16 & 0xFFFFFFFFFFFFFFF0);
  else
    v17 = (llvm::LLVMContext *)sub_22EF6462C(*(_QWORD *)(a1[18] + 144), a4);
  v18 = sub_22E66CB04((llvm::Type ***)(a1[18] + 280), v17);
  v27 = 257;
  sub_22E3BEE6C(a1 + 34, v25, v18, (uint64_t)v26, (uint64_t)&v29);
  v19 = v30;
  *a6 = v29;
  a6[1] = v19;
  result = *(double *)&v31;
  a6[2] = v31;
  return result;
}

__n128 sub_22E48032C@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t *v10;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  llvm::Constant **v26;
  __int128 v27;
  __n128 result;
  _QWORD *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  llvm::Constant **v38;
  uint64_t v39;
  __int128 v40;
  uint64_t *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  llvm::PHINode *v48;
  uint64_t v49;
  llvm::Type *v50;
  uint64_t NullValue;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  llvm::Constant *v64;
  int v65;
  unint64_t v67;
  _BYTE v68[32];
  __int16 v69;
  __int128 v70[3];
  _OWORD v71[3];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  _OWORD v75[3];
  _OWORD v76[3];
  __int128 v77[4];

  v10 = a4;
  if ((*(_BYTE *)(*a4 + 12) & 1) != 0)
  {
    v16 = **(_QWORD **)(*a4 + 16);
    v17 = *(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(v17 + 8) & 0xF) != 0)
      v17 = (unint64_t)sub_22F10D2BC(v16);
    v15 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                  + 24));
    ++v10;
  }
  else
  {
    v15 = 0;
  }
  if (v15)
    v18 = v15;
  else
    v18 = a3;
  v19 = sub_22E4800F0(a1[18], v18, v10, a5);
  if (v15 && sub_22E4808EC(a3))
  {
    v53 = sub_22F0C975C(*(_QWORD *)(a1[18] + 144), a3);
    v54 = sub_22F2500F4(v53, v15);
    v15 = 0;
    v19 += v54;
  }
  v20 = *(_QWORD *)(**(_QWORD **)(*(a5 - 1) + 16) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v20 + 8) & 0xF) != 0)
    v20 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(*(a5 - 1) + 16));
  v21 = sub_22E66CB04((llvm::Type ***)(a1[18] + 280), (llvm::LLVMContext *)(v20 & 0xFFFFFFFFFFFFFFF0));
  llvm::PointerType::get();
  v22 = llvm::PointerType::get();
  v67 = sub_22EF6477C(*(_QWORD *)(a1[18] + 144), a3);
  v23 = sub_22E47FE60(a1[18], a3);
  v24 = v23;
  if (v19 || v15)
  {
    v65 = a6;
    v64 = (llvm::Constant *)v22;
    if (a6)
    {
      v59 = v23;
      v63 = a1[40];
      v60 = v19;
      v61 = a8;
      v29 = (_QWORD *)operator new();
      llvm::BasicBlock::BasicBlock();
      *(_QWORD *)&v72 = "cast.end";
      LOWORD(v74) = 259;
      v30 = operator new();
      llvm::BasicBlock::BasicBlock();
      v31 = *(_OWORD *)(a2 + 16);
      v76[0] = *(_OWORD *)a2;
      v76[1] = v31;
      v76[2] = *(_OWORD *)(a2 + 32);
      LOWORD(v74) = 257;
      v32 = sub_22E47EF74((uint64_t)(a1 + 34), (uint64_t)v76, (uint64_t)&v72);
      v33 = llvm::User::operator new((llvm::User *)0x40);
      v62 = (_QWORD *)v30;
      v34 = v32;
      v19 = v60;
      MEMORY[0x23489C09C](v33, v30, v29, v34, 0);
      LOWORD(v74) = 257;
      v35 = v33;
      a8 = v61;
      sub_22E3C12C8(a1 + 34, v35, (uint64_t)&v72);
      sub_22E5ED9B4(a1, v29, 0);
      v24 = v59;
    }
    else
    {
      v62 = 0;
      v63 = 0;
    }
    if ((a1[233] & 0x10042008000) != 0)
    {
      v36 = v19;
      if (v15)
        v37 = 9;
      else
        v37 = 8;
      if ((*(_BYTE *)(a2 + 24) & 3) != 0)
      {
        v57 = v24;
        v58 = sub_22F28ABCC(a2, a1);
        v24 = v57;
        v38 = (llvm::Constant **)v58;
      }
      else
      {
        v38 = *(llvm::Constant ***)a2;
      }
      sub_22E4DDC84((uint64_t)a1, v37, a7, v38, v67, v24, 0x2000000, 0, 0);
      v19 = v36;
    }
    if (v15)
    {
      v39 = *(_QWORD *)(a1[18] + 224);
      v40 = *(_OWORD *)(a2 + 16);
      v75[0] = *(_OWORD *)a2;
      v75[1] = v40;
      v75[2] = *(_OWORD *)(a2 + 32);
      v41 = (uint64_t *)(*(uint64_t (**)(uint64_t, _QWORD *, _OWORD *, unint64_t, uint64_t))(*(_QWORD *)v39 + 344))(v39, a1, v75, a3, v15);
    }
    else
    {
      v41 = 0;
    }
    v42 = *(_OWORD *)(a2 + 16);
    v71[0] = *(_OWORD *)a2;
    v71[1] = v42;
    v71[2] = *(_OWORD *)(a2 + 32);
    sub_22E48094C((uint64_t)&v72, (uint64_t)a1, (uint64_t)v71, v19, v41, a3, v15);
    v43 = v73;
    *(_OWORD *)a2 = v72;
    *(_OWORD *)(a2 + 16) = v43;
    *(_OWORD *)(a2 + 32) = v74;
    v44 = *(_OWORD *)(a2 + 16);
    v70[0] = *(_OWORD *)a2;
    v70[1] = v44;
    v70[2] = *(_OWORD *)(a2 + 32);
    v69 = 257;
    sub_22E3BEE6C(a1 + 34, v70, v21, (uint64_t)v68, (uint64_t)&v72);
    v45 = v73;
    *(_OWORD *)a2 = v72;
    *(_OWORD *)(a2 + 16) = v45;
    *(_OWORD *)(a2 + 32) = v74;
    if (v65)
    {
      v46 = a1[40];
      v47 = llvm::User::operator new((llvm::User *)0x40);
      llvm::BranchInst::BranchInst();
      LOWORD(v74) = 257;
      sub_22E3C12C8(a1 + 34, v47, (uint64_t)&v72);
      sub_22E5ED9B4(a1, v62, 0);
      *(_QWORD *)&v72 = "cast.result";
      LOWORD(v74) = 259;
      v48 = (llvm::PHINode *)sub_22E3C4B80(a1 + 34, (uint64_t)v64, 2, (uint64_t)&v72);
      if ((*(_BYTE *)(a2 + 24) & 3) != 0)
        v49 = sub_22F28ABCC(a2, a1);
      else
        v49 = *(_QWORD *)a2;
      sub_22E3C4C50(v48, v49, v46);
      NullValue = llvm::Constant::getNullValue(v64, v50);
      sub_22E3C4C50(v48, NullValue, v63);
      *(_QWORD *)a2 = v48;
      *(_DWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
    }
    v52 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a8 = *(_OWORD *)a2;
    *(_OWORD *)(a8 + 16) = v52;
    result = *(__n128 *)(a2 + 32);
    *(__n128 *)(a8 + 32) = result;
  }
  else
  {
    if ((a1[233] & 0x10042008000) != 0)
    {
      if (a6)
        v25 = 0;
      else
        v25 = 0x2000000;
      if ((*(_BYTE *)(a2 + 24) & 3) != 0)
      {
        v55 = v23;
        v56 = sub_22F28ABCC(a2, a1);
        v24 = v55;
        v26 = (llvm::Constant **)v56;
      }
      else
      {
        v26 = *(llvm::Constant ***)a2;
      }
      sub_22E4DDC84((uint64_t)a1, 8u, a7, v26, v67, v24, v25, 0, 0);
    }
    v27 = *(_OWORD *)(a2 + 16);
    v77[0] = *(_OWORD *)a2;
    v77[1] = v27;
    v77[2] = *(_OWORD *)(a2 + 32);
    LOWORD(v74) = 257;
    result.n128_u64[0] = sub_22E3BEE6C(a1 + 34, v77, v21, (uint64_t)&v72, a8).n128_u64[0];
  }
  return result;
}

BOOL sub_22E4808EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 176)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22E48094C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, unint64_t a6, unint64_t a7)
{
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _WORD v29[20];
  _QWORD v30[4];
  __int16 v31;

  v14 = a5;
  if (a4)
  {
    v14 = (uint64_t *)llvm::ConstantInt::get();
    if (a5)
    {
      v29[16] = 257;
      v15 = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t *, _QWORD, _QWORD))(**(_QWORD **)(a2 + 344) + 16))(*(_QWORD *)(a2 + 344), a5, v14, 0, 0);
      if (!v15)
      {
        v31 = 257;
        v16 = llvm::BinaryOperator::Create();
        v15 = sub_22E3C12C8((uint64_t *)(a2 + 272), v16, (uint64_t)v29);
      }
      v14 = (uint64_t *)v15;
    }
  }
  if ((*(_BYTE *)(a3 + 24) & 3) != 0)
    v17 = sub_22F28ABCC(a3, a2);
  else
    v17 = *(_QWORD *)a3;
  v18 = llvm::PointerType::get();
  v31 = 257;
  v19 = (uint64_t *)sub_22E3C1740((uint64_t *)(a2 + 272), 49, v17, v18, (uint64_t)v30);
  v20 = *(_QWORD *)(a2 + 8);
  v30[0] = "add.ptr";
  v31 = 259;
  result = (uint64_t)sub_22E3E5044((uint64_t *)(a2 + 272), v20, v19, v14, (uint64_t)v30);
  v22 = result;
  if (a5)
  {
    v23 = *(_QWORD *)(a2 + 144);
    v24 = *(_QWORD *)(a3 + 16);
    result = sub_22F0C975C(*(_QWORD *)(v23 + 144), a7);
    v25 = *(_QWORD *)(*(_QWORD *)(result + 72) + 8);
    if ((*(_BYTE *)(a6 + 74) & 1) != 0)
    {
      result = sub_22F0C975C(*(_QWORD *)(v23 + 144), a6);
      if (v25 >= v24)
        v27 = v24;
      else
        v27 = v25;
      if (*(_QWORD *)(*(_QWORD *)(result + 72) + 8) <= v24)
        v26 = v25;
      else
        v26 = v27;
    }
    else if (v24 >= v25)
    {
      v26 = *(_QWORD *)(*(_QWORD *)(result + 72) + 8);
    }
    else
    {
      v26 = v24;
    }
  }
  else
  {
    v26 = *(_QWORD *)(a3 + 16);
  }
  v28 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = v22;
  *(_QWORD *)(a1 + 8) = v28;
  *(_QWORD *)(a1 + 16) = (v26 | a4) & -(v26 | a4);
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

double sub_22E480B7C@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, int a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  __int128 v26;
  double result;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  llvm::Constant **v34;
  llvm::Constant *v35;
  llvm::PHINode *v36;
  llvm::Type *v37;
  uint64_t NullValue;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  __int128 v45[3];
  const char *v46;
  __int16 v47;
  _BYTE v48[32];
  __int16 v49;
  unsigned __int8 *v50;
  _OWORD v51[3];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55[3];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _OWORD v59[3];
  __int128 v60[4];

  v14 = *(_QWORD *)(a3 + 48);
  if (v14)
    v15 = v14 & 0xFFFFFFFFFFFFFFF0;
  else
    v15 = sub_22EF6462C(*(_QWORD *)(a1[18] + 144), a3);
  v16 = sub_22E66CB04((llvm::Type ***)(a1[18] + 280), (llvm::LLVMContext *)(v15 & 7 | *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFF0) + 8)));
  v17 = sub_22F25009C(a1[18], a3, a4, a5);
  if (v17)
  {
    v18 = v17;
    v44 = v16;
    if (a6)
    {
      v19 = (_QWORD *)operator new();
      llvm::BasicBlock::BasicBlock();
      v42 = a7;
      v20 = operator new();
      llvm::BasicBlock::BasicBlock();
      *(_QWORD *)&v56 = "cast.end";
      LOWORD(v58) = 259;
      v43 = (_QWORD *)operator new();
      llvm::BasicBlock::BasicBlock();
      v21 = a2[1];
      v59[0] = *a2;
      v59[1] = v21;
      v59[2] = a2[2];
      LOWORD(v58) = 257;
      v22 = sub_22E47EF74((uint64_t)(a1 + 34), (uint64_t)v59, (uint64_t)&v56);
      v23 = llvm::User::operator new((llvm::User *)0x40);
      MEMORY[0x23489C09C](v23, v19, v20, v22, 0);
      LOWORD(v58) = 257;
      v24 = v23;
      v25 = (_QWORD *)v20;
      a7 = v42;
      sub_22E3C12C8(a1 + 34, v24, (uint64_t)&v56);
      sub_22E5ED9B4(a1, v25, 0);
    }
    else
    {
      v43 = 0;
      v25 = 0;
      v19 = 0;
    }
    v28 = a2[1];
    v55[0] = *a2;
    v55[1] = v28;
    v55[2] = a2[2];
    v29 = a1[1];
    LOWORD(v54) = 257;
    sub_22E3BEE6C(a1 + 34, v55, v29, (uint64_t)&v52, (uint64_t)&v56);
    v51[0] = v56;
    v51[1] = v57;
    v51[2] = v58;
    v49 = 257;
    v50 = sub_22E42E798((uint64_t)(a1 + 34), v18, (uint64_t)v48, 0, 0);
    v30 = a1[1];
    v31 = sub_22E47FE60(a1[18], a3);
    v46 = "sub.ptr";
    v47 = 259;
    sub_22E480FFC(a1 + 34, (uint64_t)v51, &v50, 1, v30, v31, &v46, (uint64_t)&v52);
    v57 = v53;
    v58 = v54;
    v56 = v52;
    v45[0] = v52;
    v45[1] = v53;
    v45[2] = v54;
    v49 = 257;
    sub_22E3BEE6C(a1 + 34, v45, v44, (uint64_t)v48, (uint64_t)&v52);
    v56 = v52;
    v57 = v53;
    v58 = v54;
    if (a6)
    {
      v32 = llvm::User::operator new((llvm::User *)0x40);
      llvm::BranchInst::BranchInst();
      LOWORD(v54) = 257;
      sub_22E3C12C8(a1 + 34, v32, (uint64_t)&v52);
      sub_22E5ED9B4(a1, v19, 0);
      v33 = llvm::User::operator new((llvm::User *)0x40);
      llvm::BranchInst::BranchInst();
      LOWORD(v54) = 257;
      sub_22E3C12C8(a1 + 34, v33, (uint64_t)&v52);
      sub_22E5ED9B4(a1, v43, 0);
      if ((BYTE8(v57) & 3) != 0)
        v34 = (llvm::Constant **)sub_22F28ABCC(&v56, a1);
      else
        v34 = (llvm::Constant **)v56;
      v35 = *v34;
      LOWORD(v54) = 257;
      v36 = (llvm::PHINode *)sub_22E3C4B80(a1 + 34, (uint64_t)v35, 2, (uint64_t)&v52);
      sub_22E3C4C50(v36, (uint64_t)v34, (uint64_t)v25);
      NullValue = llvm::Constant::getNullValue(*v34, v37);
      sub_22E3C4C50(v36, NullValue, (uint64_t)v19);
      v39 = *((_QWORD *)&v56 + 1);
      v40 = sub_22E47FE60(a1[18], a3);
      *(_QWORD *)a7 = v36;
      *(_QWORD *)(a7 + 8) = v39;
      *(_QWORD *)(a7 + 16) = v40;
      *(_DWORD *)(a7 + 24) = 0;
      *(_QWORD *)(a7 + 32) = 0;
      *(_QWORD *)(a7 + 40) = 0;
    }
    else
    {
      v41 = v57;
      *(_OWORD *)a7 = v56;
      *(_OWORD *)(a7 + 16) = v41;
      result = *(double *)&v58;
      *(_OWORD *)(a7 + 32) = v58;
    }
  }
  else
  {
    v26 = a2[1];
    v60[0] = *a2;
    v60[1] = v26;
    v60[2] = a2[2];
    LOWORD(v58) = 257;
    *(_QWORD *)&result = sub_22E3BEE6C(a1 + 34, v60, v16, (uint64_t)&v56, a7).n128_u64[0];
  }
  return result;
}

void sub_22E480FFC(uint64_t *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 **a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, unint64_t a6@<X5>, const char **a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t *v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  __int128 v26;
  _OWORD v27[3];
  _OWORD v28[3];

  if ((*(_BYTE *)(a2 + 24) & 3) != 0)
  {
    v26 = *(_OWORD *)(a2 + 16);
    v27[0] = *(_OWORD *)a2;
    v27[1] = v26;
    v27[2] = *(_OWORD *)(a2 + 32);
    sub_22F252104((uint64_t)a1, (uint64_t)v27, a3, a4, a6, 1u, a7, (_OWORD *)a8);
  }
  else
  {
    v15 = *(_QWORD *)(a2 + 8);
    v16 = *(_OWORD *)(a2 + 16);
    v17 = *(_OWORD *)(a2 + 32);
    v28[0] = *(_OWORD *)a2;
    v28[1] = v16;
    v28[2] = v17;
    if ((BYTE8(v16) & 3) != 0)
      v18 = (uint64_t *)sub_22F28ABCC(v28, a1[17]);
    else
      v18 = *(uint64_t **)&v28[0];
    v19 = (unint64_t)sub_22E486CB4(a1, v15, v18, (uint64_t **)a3, a4, (uint64_t)a7);
    v20 = __clz(a6) ^ 0x3F;
    v21 = v19 & 0xFFFFFFFFFFFFFFF8 | (v20 >> 3);
    v22 = a5 & 0xFFFFFFFFFFFFFFF8 | v20 & 7;
    if (!a6)
    {
      v22 = a5;
      v21 = v19;
    }
    v23 = v21 & 0xFFFFFFFFFFFFFFF8;
    if (v21 <= 7)
      v23 = 0;
    v24 = v22 & 0xFFFFFFFFFFFFFFF8;
    if (v21 <= 7)
      v24 = 0;
    *(_QWORD *)a8 = v23;
    *(_QWORD *)(a8 + 8) = v24;
    v25 = 1 << (v22 & 7 | (8 * (v21 & 7)));
    if (v21 < 8)
      v25 = 0;
    *(_QWORD *)(a8 + 16) = v25;
    *(_DWORD *)(a8 + 24) = 0;
    *(_QWORD *)(a8 + 32) = 0;
    *(_QWORD *)(a8 + 40) = 0;
  }
}

void sub_22E48114C(uint64_t a1, int a2)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  llvm::DataLayout *DataLayout;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  llvm::LLVMContext *v52;
  __int16 v53;
  _QWORD v54[4];
  __int16 v55;
  _QWORD v56[2];
  uint64_t v57;
  uint64_t v58;
  void *v59;
  unsigned int v60;
  int v61;
  _QWORD v62[34];

  v62[32] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 1688) & 0xFFFFFFFFFFFFFFF8;
  v5 = v4 + 72;
  v6 = *(_WORD *)(v4 + 80) & 0x7F;
  v7 = -40;
  if (v6 > 70)
  {
    if (v6 == 83)
      goto LABEL_17;
    if (v6 == 71)
    {
      v7 = -56;
      goto LABEL_17;
    }
    if (v6 != 81)
    {
LABEL_12:
      v8 = v6 - 52;
      v9 = (v6 - 33) >= 5;
      v10 = -48;
      if (!v9)
        v10 = -64;
      if (v8 >= 6)
        v7 = v10;
      else
        v7 = -72;
    }
  }
  else
  {
    if (v6 > 0x18)
      goto LABEL_11;
    if (v6 == 16)
    {
LABEL_4:
      v7 = -48;
      goto LABEL_17;
    }
    if (((1 << v6) & 0x1066) == 0)
    {
      if (v6 == 24)
        goto LABEL_4;
LABEL_11:
      if (v6 == 70)
      {
        v7 = -64;
        goto LABEL_17;
      }
      goto LABEL_12;
    }
  }
LABEL_17:
  v11 = *(_QWORD *)(v5 + v7 + 16);
  v12 = (_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF8);
  if ((v11 & 4) != 0)
    v12 = (_QWORD *)*v12;
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
  if (v12)
    v14 = (unint64_t)(v12 - 8);
  else
    v14 = 0;
  if (sub_22EFC3DB8(v14, 0))
  {
    DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a1 + 144) + 200));
    v16 = *(_DWORD *)(llvm::DataLayout::getPointerAlignElem(DataLayout) + 4);
    v17 = sub_22F0C975C(v13, v14);
    v18 = (*(_QWORD *)(v17 + 56) - *(_QWORD *)(v17 + 48)) >> 3;
    v59 = v62;
    v61 = 16;
    if (v18 < 0x11uLL)
    {
      LODWORD(v19) = v18;
      if ((_DWORD)v18)
      {
        bzero(v62, 16 * v18);
        LODWORD(v19) = v18;
      }
    }
    else
    {
      v60 = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      bzero(v59, 16 * v18);
      v19 = (*(_QWORD *)(v17 + 56) - *(_QWORD *)(v17 + 48)) >> 3;
    }
    v60 = v18;
    if ((_DWORD)v19)
    {
      v20 = 0;
      v21 = 8 * v19;
      v22 = 8;
      do
      {
        v23 = *(_QWORD *)(*(_QWORD *)(v17 + 48) + v20);
        *(_QWORD *)((char *)v59 + v22) = v23
                                       / sub_22EF5CDF0(v13, *(_QWORD *)(*(_QWORD *)(v13 + 16408) & 0xFFFFFFFFFFFFFFF0));
        v20 += 8;
        v22 += 16;
      }
      while (v21 != v20);
    }
    v24 = sub_22EFC3B90(v14);
    if (v24)
    {
      v25 = v24;
      v26 = 0;
LABEL_32:
      sub_22EF5CCD0(v13, *(_QWORD *)(*(_QWORD *)(v25 + 48) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v54);
      v27 = v54[0];
      if ((*(_DWORD *)(v25 + 68) & 1) != 0)
        v27 = 0;
      *((_QWORD *)v59 + 2 * v26++) = v27;
      while (1)
      {
        v25 = *(_QWORD *)(v25 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (!v25)
          break;
        if ((*(_DWORD *)(v25 + 28) & 0x7Fu) - 49 < 3)
          goto LABEL_32;
      }
    }
    if (v60 >= 2)
    {
      v57 = *(_QWORD *)(a1 + 88);
      v58 = v57;
      v28 = llvm::FunctionType::get();
      v29 = a2 ? 34 : 36;
      v30 = a2 ? "__asan_poison_intra_object_redzone" : "__asan_unpoison_intra_object_redzone";
      v31 = sub_22E633A04(*(_QWORD *)(a1 + 144), v28, v30, v29, 0, 0, 0);
      v50 = v32;
      v51 = v31;
      v33 = *(_QWORD *)(a1 + 4208);
      v34 = *(_QWORD *)(a1 + 88);
      v55 = 257;
      v35 = sub_22E3C1740((uint64_t *)(a1 + 272), 47, v33, v34, (uint64_t)v54);
      v36 = v60;
      if (v60)
      {
        v37 = v35;
        v38 = 0;
        v39 = 0;
        v40 = **(_QWORD **)(v17 + 72);
        do
        {
          v41 = v40;
          if (v39 != v36 - 1)
            v41 = *(_QWORD *)((char *)v59 + v38 + 24);
          v42 = *(_QWORD *)((char *)v59 + v38);
          v43 = v41 - (v42 + *(_QWORD *)((char *)v59 + v38 + 8));
          v44 = v41 & 7;
          if (v43 >= 8 && v44 == 0 && v42 != 0)
          {
            llvm::Type::getIntNTy(*(llvm::Type **)(a1 + 336), (llvm::LLVMContext *)v16);
            v47 = llvm::ConstantInt::get();
            v53 = 257;
            v48 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 344) + 16))(*(_QWORD *)(a1 + 344), v37, v47, 0, 0);
            if (!v48)
            {
              v55 = 257;
              v49 = llvm::BinaryOperator::Create();
              v48 = sub_22E3C12C8((uint64_t *)(a1 + 272), v49, (uint64_t)&v52 + 4);
            }
            v56[0] = v48;
            llvm::Type::getIntNTy(*(llvm::Type **)(a1 + 336), (llvm::LLVMContext *)v16);
            v56[1] = llvm::ConstantInt::get();
            v55 = 257;
            sub_22E462B78((uint64_t *)(a1 + 272), v51, v50, (uint64_t)v56, 2, (uint64_t)v54, 0);
            v36 = v60;
          }
          ++v39;
          v38 += 16;
        }
        while (v39 < v36);
      }
    }
    if (v59 != v62)
      free(v59);
  }
}

void sub_22E4815D4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_22E48114C(a1, 1);
  v4 = *(_QWORD *)(a1 + 1688);
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  v6 = v4 & 7;
  if ((*(_DWORD *)(a1 + 1688) & 7) != 0
    || !sub_22F2505EC(v4 & 0xFFFFFFFFFFFFFFF8)
    || *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 216) + 148) > 0xAu)
  {
    v18 = 0;
    v7 = (_BYTE *)sub_22EFBF910(v5, &v18);
    v8 = (uint64_t)v7;
    if (v7 && *v7 == 6)
    {
      sub_22F25C748(a1, (uint64_t)v7);
      sub_22E3CB7B0((_QWORD *)a1, v8, 0);
      v9 = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000);
      v10 = *(_QWORD *)(a1 + 2312);
      v11 = *(_BYTE *)(a1 + 2893);
      *(_BYTE *)(a1 + 2893) = 0;
      v12 = *(_QWORD *)(a1 + 2872);
      *(_QWORD *)(a1 + 2872) = v9;
      sub_22E4817EC(a1, v5, v6, a2);
      sub_22E5E5158(a1, *(unsigned __int8 **)(v8 + 16), 0, 0);
      *(_BYTE *)(a1 + 2893) = v11;
      sub_22E48B274(a1, v9, v10, 0, 0);
      *(_QWORD *)(a1 + 2872) = v12;
      sub_22E4D2C10(a1, v8, 1);
    }
    else
    {
      sub_22E3CB7B0((_QWORD *)a1, (uint64_t)v7, 0);
      v13 = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000);
      v14 = *(_QWORD *)(a1 + 2312);
      v15 = *(_BYTE *)(a1 + 2893);
      *(_BYTE *)(a1 + 2893) = 0;
      v16 = *(_QWORD *)(a1 + 2872);
      *(_QWORD *)(a1 + 2872) = v13;
      sub_22E4817EC(a1, v5, v6, a2);
      if (v8)
        sub_22E5E5158(a1, (unsigned __int8 *)v8, 0, 0);
      *(_BYTE *)(a1 + 2893) = v15;
      sub_22E48B274(a1, v13, v14, 0, 0);
      *(_QWORD *)(a1 + 2872) = v16;
    }
  }
  else
  {
    v17 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v5 + 16))(v5);
    sub_22F2506BC((_QWORD *)a1, v5, 1, a2, SHIDWORD(v17));
  }
}

double sub_22E4817EC(uint64_t a1, uint64_t a2, int a3, _QWORD *a4)
{
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  double result;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  int v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  __int128 v60;
  _OWORD v61[3];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  unint64_t v65;
  uint64_t v66[4];
  __int128 v67;
  __int128 v68;
  int v69;
  uint64_t v70;
  BOOL v71;
  _QWORD *v72;
  void *v73;
  uint64_t v74;
  _QWORD v75[19];

  v75[16] = *MEMORY[0x24BDAC8D0];
  if ((*(_QWORD *)(a2 + 80) & 0x1FFFFF0000000000) == 0x10000000000)
  {
    v8 = sub_22EFD7ED0(a2);
    if ((**(_BYTE **)v8 & 6) == 0 && (*(_WORD *)(*(_QWORD *)v8 + 28) & 1) != 0)
      return sub_22F2508EC((_QWORD *)a1, a2);
  }
  v9 = *(_WORD *)(a2 + 80) & 0x7F;
  v10 = -40;
  if (v9 > 0x46)
  {
    if (v9 == 83)
      goto LABEL_21;
    if (v9 == 71)
    {
      v10 = -56;
      goto LABEL_21;
    }
    if (v9 != 81)
    {
LABEL_16:
      v12 = v9 - 52;
      v13 = v9 - 33 >= 5;
      v14 = -48;
      if (!v13)
        v14 = -64;
      if (v12 >= 6)
        v10 = v14;
      else
        v10 = -72;
    }
  }
  else
  {
    if (v9 > 0x18)
      goto LABEL_15;
    if (v9 == 16)
    {
LABEL_7:
      v10 = -48;
      goto LABEL_21;
    }
    if (((1 << v9) & 0x1066) == 0)
    {
      if (v9 == 24)
        goto LABEL_7;
LABEL_15:
      if (v9 == 70)
      {
        v10 = -64;
        goto LABEL_21;
      }
      goto LABEL_16;
    }
  }
LABEL_21:
  v15 = *(_QWORD *)(a2 + 72 + v10 + 16);
  v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF8);
  if ((v15 & 4) != 0)
    v16 = (_QWORD *)*v16;
  if (v16)
    v17 = (unint64_t)(v16 - 8);
  else
    v17 = 0;
  v18 = (uint64_t *)sub_22EFD7ED0(a2);
  v19 = sub_22EFD7ED0(a2) + 8 * ((*(_QWORD *)(a2 + 80) >> 40) & 0x1FFFFFLL);
  if (a3 == 1
    || (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v17 + 104) + 96), *(_QWORD *)(v17 + 104)),
        !*(_DWORD *)(*(_QWORD *)(v17 + 128) + 20))
    || (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v17 + 104) + 96), *(_QWORD *)(v17 + 104)),
        (**(_QWORD **)(v17 + 128) & 0x800) != 0))
  {
    v22 = 0;
    v21 = 0;
  }
  else
  {
    v20 = *(_QWORD *)(a1 + 144);
    if (*(_DWORD *)(*(_QWORD *)(v20 + 216) + 148) >= 0xBu)
      v21 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(**(_QWORD **)(v20 + 224) + 352))(*(_QWORD *)(v20 + 224), a1, v17);
    else
      v21 = 0;
    v22 = 1;
  }
  v23 = *(_QWORD *)(a1 + 4208);
  if (v18 != (uint64_t *)v19)
  {
    while (1)
    {
      v24 = *(_QWORD *)*v18;
      if ((v24 & 6) != 0 || (*(_WORD *)(*v18 + 28) & 3) != 2)
        break;
      if (v22)
      {
        v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 184) + 32);
        if ((v25 & 0x400000000000000) != 0 && (v25 & 0x1800) != 0)
        {
          v26 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF8) & 0xFFFFFFFFFFFFFFF0)
                                                                + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 24));
          if (sub_22E463414(v26))
            *(_QWORD *)(a1 + 4208) = llvm::IRBuilderBase::CreateLaunderInvariantGroup();
        }
        sub_22E481FD0((_QWORD *)a1, v17, *v18);
      }
      if (++v18 == (uint64_t *)v19)
      {
        v18 = (uint64_t *)v19;
        break;
      }
    }
  }
  if (v21)
  {
    v27 = llvm::User::operator new((llvm::User *)0x40);
    llvm::BranchInst::BranchInst();
    LOWORD(v67) = 257;
    sub_22E3C12C8((uint64_t *)(a1 + 272), v27, (uint64_t)v66);
    sub_22E5ED9B4((_QWORD *)a1, v21, 0);
  }
  if (v18 == (uint64_t *)v19)
  {
LABEL_53:
    v18 = (uint64_t *)v19;
  }
  else
  {
    while (1)
    {
      v28 = *(_QWORD *)*v18;
      if ((v28 & 6) != 0 || (*(_WORD *)(*v18 + 28) & 1) != 0)
        break;
      v29 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 184) + 32);
      if ((v29 & 0x400000000000000) != 0 && (v29 & 0x1800) != 0)
      {
        v30 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v28 & 0xFFFFFFFFFFFFFFF8) & 0xFFFFFFFFFFFFFFF0)
                                                              + 8) & 0xFFFFFFFFFFFFFFF0)
                                      + 24));
        if (sub_22E463414(v30))
          *(_QWORD *)(a1 + 4208) = llvm::IRBuilderBase::CreateLaunderInvariantGroup();
      }
      v31 = *v18++;
      sub_22E481FD0((_QWORD *)a1, v17, v31);
      if (v18 == (uint64_t *)v19)
        goto LABEL_53;
    }
  }
  *(_QWORD *)(a1 + 4208) = v23;
  sub_22F250A24((_QWORD *)a1, v17);
  sub_22F24FFF8((_QWORD *)a1, v61);
  v32 = *(_OWORD *)(a1 + 4248);
  v62 = *(_OWORD *)(a1 + 4232);
  v63 = v32;
  v64 = *(_OWORD *)(a1 + 4264);
  v33 = v61[1];
  *(_OWORD *)(a1 + 4232) = v61[0];
  *(_OWORD *)(a1 + 4248) = v33;
  *(_OWORD *)(a1 + 4264) = v61[2];
  v34 = *(_WORD *)(a2 + 80) & 0x7F;
  v35 = -40;
  if (v34 > 0x46)
  {
    v36 = a2 + 72;
    if (v34 != 83)
    {
      if (v34 == 71)
      {
        v35 = -56;
        goto LABEL_70;
      }
      if (v34 == 81)
        goto LABEL_70;
LABEL_65:
      v37 = v34 - 52;
      v13 = v34 - 33 >= 5;
      v38 = -48;
      if (!v13)
        v38 = -64;
      if (v37 >= 6)
        v35 = v38;
      else
        v35 = -72;
    }
  }
  else
  {
    v36 = a2 + 72;
    if (v34 > 0x18)
      goto LABEL_64;
    if (v34 != 16)
    {
      if (((1 << v34) & 0x1066) != 0)
        goto LABEL_70;
      if (v34 != 24)
      {
LABEL_64:
        if (v34 == 70)
        {
          v35 = -64;
          goto LABEL_70;
        }
        goto LABEL_65;
      }
    }
    v35 = -48;
  }
LABEL_70:
  v39 = *(_QWORD *)(v36 + v35 + 16);
  v40 = (_QWORD *)(v39 & 0xFFFFFFFFFFFFFFF8);
  if ((v39 & 4) != 0)
    v40 = (_QWORD *)*v40;
  if (v40)
    v41 = (unint64_t)(v40 - 8);
  else
    v41 = 0;
  LODWORD(v66[0]) = 0;
  v42 = sub_22EFD8088(a2, (int *)v66);
  v43 = 0;
  if (v42)
  {
    if ((*(_BYTE *)(a2 + 83) & 2) != 0)
      v43 = *(_QWORD *)(*a4
                      + 8
                      * (*(uint64_t (**)(_QWORD, uint64_t, _QWORD *))(**(_QWORD **)(*(_QWORD *)(a1 + 144)
                                                                                           + 224)
                                                                             + 600))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 224), a2, a4));
    else
      v43 = 0;
  }
  v66[0] = a1;
  v66[1] = v41;
  v66[2] = v43;
  v44 = sub_22F0C975C(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), v41);
  v45 = 0;
  v66[3] = v44;
  v67 = 0u;
  v68 = 0u;
  v69 = 0;
  v70 = a2;
  if ((*(_BYTE *)(a2 + 83) & 2) != 0)
  {
    LODWORD(v65) = 0;
    v46 = sub_22EFD8088(a2, (int *)&v65);
    v45 = 0;
    if (v46)
      v45 = (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 152) + 246) & 6) == 0;
  }
  v71 = v45;
  v72 = a4;
  v73 = v75;
  v74 = 0x1000000000;
  if (v18 != (uint64_t *)v19)
  {
    while (1)
    {
      v47 = (uint64_t *)*v18;
      if (!v71)
        break;
      v48 = v47[1];
      v49 = (*v47 & 6) == 2 ? *v47 & 0xFFFFFFFFFFFFFFF8 : 0;
      v65 = *(_QWORD *)(v49 + 48);
      if (((*(_BYTE *)v48 & 0xFE) != 0x76 || (sub_22E483EF8(*(_QWORD *)(v48 + 16)) & 1) == 0)
        && (sub_22F111968(&v65, *(_QWORD *)(*(_QWORD *)(v66[0] + 144) + 144)) & 1) == 0
        && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v65 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) & 0xFE) != 0x28)
      {
        break;
      }
      v50 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v66[0] + 144) + 144) + 2000);
      if (!sub_22E4881BC(*(_QWORD *)(v50 + 184), *(_QWORD *)(v50 + 192), v49))
        break;
      v51 = v74;
      if (v74 >= (unint64_t)HIDWORD(v74))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v51 = v74;
      }
      *((_QWORD *)v73 + v51) = v47;
      LODWORD(v74) = v74 + 1;
      if ((*v47 & 6) == 2)
        v52 = *v47 & 0xFFFFFFFFFFFFFFF8;
      else
        v52 = 0;
      sub_22E4879F0((uint64_t)v66, v52);
LABEL_121:
      if (++v18 == (uint64_t *)v19)
        goto LABEL_125;
    }
    sub_22E487AB0(v66);
    v53 = *(_WORD *)(v70 + 80) & 0x7F;
    v54 = -40;
    if (v53 > 0x46)
    {
      if (v53 != 83)
      {
        if (v53 == 71)
        {
          v54 = -56;
          goto LABEL_115;
        }
        if (v53 == 81)
          goto LABEL_115;
LABEL_109:
        v55 = v53 - 52;
        if (v53 - 33 >= 5)
          v56 = -48;
        else
          v56 = -64;
        if (v55 >= 6)
          v54 = v56;
        else
          v54 = -72;
      }
    }
    else
    {
      if (v53 > 0x18)
        goto LABEL_108;
      if (v53 != 16)
      {
        if (((1 << v53) & 0x1066) != 0)
          goto LABEL_115;
        if (v53 != 24)
        {
LABEL_108:
          if (v53 == 70)
          {
            v54 = -64;
            goto LABEL_115;
          }
          goto LABEL_109;
        }
      }
      v54 = -48;
    }
LABEL_115:
    v57 = *(_QWORD *)(v70 + 72 + v54 + 16);
    v58 = (_QWORD *)(v57 & 0xFFFFFFFFFFFFFFF8);
    if ((v57 & 4) != 0)
      v58 = (_QWORD *)*v58;
    if (v58)
      v59 = (unint64_t)(v58 - 8);
    else
      v59 = 0;
    sub_22E487DDC(v66[0], v59, v47, v70, v72);
    goto LABEL_121;
  }
LABEL_125:
  sub_22E487AB0(v66);
  if (v73 != v75)
    free(v73);
  v60 = v63;
  *(_OWORD *)(a1 + 4232) = v62;
  *(_OWORD *)(a1 + 4248) = v60;
  result = *(double *)&v64;
  *(_OWORD *)(a1 + 4264) = v64;
  return result;
}

unint64_t sub_22E481FD0(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unsigned int v7;
  _DWORD *v8;
  char v9;
  uint64_t v10;
  unint64_t result;
  _OWORD v12[3];
  uint64_t v13;
  char v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD v18[3];
  _OWORD v19[3];
  _OWORD v20[3];

  sub_22F24FFF8(a1, v20);
  v6 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) & 0xFFFFFFFFFFFFFFF0)
                                                       + 8) & 0xFFFFFFFFFFFFFFF0)
                               + 24));
  v7 = *(_WORD *)(a3 + 28) & 2;
  v8 = *(_DWORD **)(a3 + 8);
  *(_QWORD *)&v19[0] = *(_QWORD *)(a1[18] + 144);
  BYTE8(v19[0]) = 0;
  sub_22E4875C0((uint64_t)v19, v8);
  if (BYTE8(v19[0]))
    sub_22F250A24(a1, a2);
  v18[0] = v20[0];
  v18[1] = v20[1];
  v18[2] = v20[2];
  sub_22E4801BC(a1, v18, a2, v6, v7 != 0, v19);
  v15 = v19[0];
  v16 = v19[1];
  v17 = v19[2];
  if (sub_22F261728((uint64_t)a1, a2, v6, v7 != 0))
    v9 = 17;
  else
    v9 = 1;
  v10 = *(_QWORD *)(a3 + 8);
  v12[0] = v15;
  v12[1] = v16;
  v12[2] = v17;
  v13 = 0;
  v14 = v9;
  result = sub_22E4EF100(a1, v10, v12);
  if ((*(_QWORD *)(*(_QWORD *)(a1[18] + 152) + 8) & 0x100000000000) != 0)
  {
    result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v6 + 104) + 96), *(_QWORD *)(v6 + 104));
    if ((**(_QWORD **)(v6 + 128) & 0x100000000000) == 0)
    {
      result = sub_22E4899EC(a1 + 248, 1, 24);
      *(_QWORD *)result = off_24FA633C0;
      *(_QWORD *)(result + 8) = v6;
      *(_BYTE *)(result + 16) = v7 >> 1;
    }
  }
  return result;
}

_QWORD *sub_22E482158(_QWORD *result, _WORD *a2, int a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)();
  char v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  unint64_t v56;
  unsigned __int8 *v57;
  llvm::Value *v58;
  uint64_t v59;
  unint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63[2];
  char v64;
  uint64_t v65;

  v4 = (uint64_t)result;
  if (!a3)
  {
    v7 = result[728];
    v8 = (*(uint64_t (**)(_WORD *))(*(_QWORD *)a2 + 32))(a2);
    v9 = sub_22EFC06D0(*(_QWORD *)(v8 + 160));
    if (v7)
    {
      if (v9)
        return (_QWORD *)sub_22E482DF0(v4, *(llvm::Constant ***)(v4 + 5824), 1);
      v12 = v4 + 1984;
      v13 = *(_QWORD *)(v4 + 5824);
      result = (_QWORD *)sub_22E4899EC(v12, 3, 16);
      *result = off_24FA63410;
      result[1] = v13;
      return result;
    }
    if (!v9)
    {
      result = (_QWORD *)sub_22E4899EC(v4 + 1984, 3, 8);
      *result = off_24FA63438;
      return result;
    }
    v10 = a2[40] & 0x7F;
    v11 = -40;
    if (v10 > 0x46)
    {
      if (v10 != 83)
      {
        if (v10 == 71)
        {
          v11 = -56;
          goto LABEL_116;
        }
        if (v10 == 81)
          goto LABEL_116;
LABEL_111:
        v51 = v10 - 52;
        v15 = v10 - 33 >= 5;
        v52 = -48;
        if (!v15)
          v52 = -64;
        if (v51 >= 6)
          v11 = v52;
        else
          v11 = -72;
      }
    }
    else
    {
      if (v10 > 0x18)
        goto LABEL_110;
      if (v10 != 16)
      {
        if (((1 << v10) & 0x1066) != 0)
          goto LABEL_116;
        if (v10 != 24)
        {
LABEL_110:
          if (v10 == 70)
          {
            v11 = -64;
            goto LABEL_116;
          }
          goto LABEL_111;
        }
      }
      v11 = -48;
    }
LABEL_116:
    v53 = *(_QWORD *)((char *)a2 + v11 + 88);
    v54 = (_QWORD *)(v53 & 0xFFFFFFFFFFFFFFF8);
    if ((v53 & 4) != 0)
      v54 = (_QWORD *)*v54;
    if (v54)
      v55 = (unint64_t)(v54 - 8);
    else
      v55 = 0;
    v56 = *(_QWORD *)((*(uint64_t (**)(_WORD *))(*(_QWORD *)a2 + 32))(a2) + 160);
    v57 = *(unsigned __int8 **)((*(uint64_t (**)(_WORD *))(*(_QWORD *)a2 + 32))(a2) + 168);
    if (v57)
    {
      v63[0] = v4;
      v63[1] = v4 + 272;
      v64 = 0;
      v65 = *(_QWORD *)(*(_QWORD *)(v4 + 144) + 232);
      v58 = sub_22E50E974(v63, v57);
    }
    else
    {
      v58 = *(llvm::Value **)(v4 + 4208);
    }
    v59 = *(_QWORD *)(v55 + 48);
    if (v59)
      v60 = v59 & 0xFFFFFFFFFFFFFFF0;
    else
      v60 = sub_22EF6462C(*(_QWORD *)(*(_QWORD *)(v4 + 144) + 144), v55);
    sub_22F261F20(v4, v56, (uint64_t)v58, v60, 0, 0);
    v61 = *(_OWORD *)(v4 + 1712);
    v62 = *(_QWORD *)(v4 + 1728);
    return sub_22E48BA00((_QWORD *)v4, (uint64_t)&v61);
  }
  v5 = a2[40] & 0x7F;
  v6 = -40;
  if (v5 > 0x46)
  {
    if (v5 == 83)
      goto LABEL_28;
    if (v5 == 71)
    {
      v6 = -56;
      goto LABEL_28;
    }
    if (v5 != 81)
    {
LABEL_23:
      v14 = v5 - 52;
      v15 = v5 - 33 >= 5;
      v16 = -48;
      if (!v15)
        v16 = -64;
      if (v14 >= 6)
        v6 = v16;
      else
        v6 = -72;
    }
  }
  else
  {
    if (v5 > 0x18)
      goto LABEL_22;
    if (v5 == 16)
    {
LABEL_5:
      v6 = -48;
      goto LABEL_28;
    }
    if (((1 << v5) & 0x1066) == 0)
    {
      if (v5 == 24)
        goto LABEL_5;
LABEL_22:
      if (v5 == 70)
      {
        v6 = -64;
        goto LABEL_28;
      }
      goto LABEL_23;
    }
  }
LABEL_28:
  v17 = *(_QWORD *)((char *)a2 + v6 + 88);
  v18 = (_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF8);
  if ((v17 & 4) != 0)
    v18 = (_QWORD *)*v18;
  if (v18)
    v19 = (uint64_t)(v18 - 8);
  else
    v19 = 0;
  if ((*(_DWORD *)(v19 + 72) & 0xE000) == 0x4000)
    return result;
  v20 = *(_QWORD *)(*(_QWORD *)(result[18] + 184) + 32);
  if (a3 != 1)
  {
    if ((v20 & 0x40000000) != 0 && (*((_BYTE *)result + 1865) & 2) != 0)
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v19 + 104) + 96), *(_QWORD *)(v19 + 104));
      if (!*(_DWORD *)(*(_QWORD *)(v19 + 128) + 20))
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v19 + 104) + 96), *(_QWORD *)(v19 + 104));
        if ((**(_QWORD **)(v19 + 128) & 0x400) != 0)
        {
          v27 = (_QWORD *)sub_22E4899EC(v4 + 1984, 3, 16);
          *v27 = off_24FA63460;
          v27[1] = a2;
        }
      }
    }
    v28 = sub_22E46A3A0(v19);
    if (v28 == v29)
    {
LABEL_76:
      v36 = *(_QWORD *)(v4 + 144);
      if ((*(_BYTE *)(*(_QWORD *)(v36 + 184) + 35) & 0x40) != 0)
        v37 = (*(unsigned __int8 *)(v4 + 1865) >> 1) & 1;
      else
        v37 = 0;
      v38 = *(_QWORD *)(v36 + 144);
      result = (_QWORD *)sub_22EFC3B90(v19);
      if (result)
      {
        v39 = (unint64_t)result;
        v40 = 0;
LABEL_81:
        if (v37 && (sub_22EFC2FDC(v39, v38) & 1) == 0)
        {
          v41 = sub_22EFC306C(v39);
          v42 = sub_22E488788(v38, *(_QWORD *)(v39 + 48));
          v43 = v40 & 0xFF00000000;
          if (v42)
          {
            if (!v43)
              v40 = v41 | 0x100000000;
          }
          else if (v43)
          {
            v44 = sub_22E4899EC(v4 + 1984, 3, 24);
            *(_QWORD *)v44 = off_24FA633E8;
            *(_QWORD *)(v44 + 8) = a2;
            *(_DWORD *)(v44 + 16) = v40;
            *(_DWORD *)(v44 + 20) = v41;
            v40 = 0;
          }
        }
        v45 = *(_QWORD *)(v39 + 48);
        result = (_QWORD *)sub_22F115260(v45);
        if ((_DWORD)result)
        {
          v46 = (int)result;
          v47 = sub_22F10E2FC(*(_QWORD *)(v45 & 0xFFFFFFFFFFFFFFF0));
          if (!v47 || (result = (_QWORD *)sub_22F114198(*(_QWORD *)(v47 + 24)), (*((_BYTE *)result + 75) & 1) == 0))
          {
            if (sub_22F245DD4(v4, v46))
              v48 = 3;
            else
              v48 = 2;
            v49 = off_24FA63568[v46 - 1];
            result = (_QWORD *)sub_22E4899EC(v4 + 1984, v48, 32);
            *result = off_24FA634B0;
            result[1] = v39;
            result[2] = v49;
            *((_BYTE *)result + 24) = v48 & 1;
          }
        }
        while (1)
        {
          v39 = *(_QWORD *)(v39 + 8) & 0xFFFFFFFFFFFFFFF8;
          if (!v39)
            break;
          if ((*(_DWORD *)(v39 + 28) & 0x7Fu) - 49 < 3)
            goto LABEL_81;
        }
        if ((v40 & 0xFF00000000) != 0)
          v50 = v37;
        else
          v50 = 0;
        if ((v50 & 1) != 0)
        {
          result = (_QWORD *)sub_22E4899EC(v4 + 1984, 3, 24);
          *result = off_24FA633E8;
          result[1] = a2;
          *((_DWORD *)result + 4) = v40;
          *((_DWORD *)result + 5) = -1;
        }
      }
      return result;
    }
    v30 = v28;
    v31 = v29;
    while (1)
    {
      if ((*(_BYTE *)(v30 + 12) & 1) == 0)
      {
        v32 = *(_QWORD *)(**(_QWORD **)(v30 + 16) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v32 + 8) & 0xF) != 0)
          v32 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v30 + 16));
        v33 = sub_22F10C2A4(*(_QWORD *)(v32 & 0xFFFFFFFFFFFFFFF0));
        if (v33)
        {
          if ((*(_DWORD *)(v33 + 28) & 0x7Fu) - 35 >= 3)
            v34 = 0;
          else
            v34 = v33;
        }
        else
        {
          v34 = 0;
        }
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v34 + 104) + 96), *(_QWORD *)(v34 + 104));
        if ((**(_QWORD **)(v34 + 128) & 0x100000000000) != 0)
        {
          if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 144) + 184) + 35) & 0x40) == 0)
            goto LABEL_75;
          if ((*(_BYTE *)(v4 + 1865) & 2) == 0)
            goto LABEL_75;
          sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v34 + 104) + 96), *(_QWORD *)(v34 + 104));
          if ((**(_QWORD **)(v34 + 128) & 0x200) != 0)
            goto LABEL_75;
          v35 = sub_22E4899EC(v4 + 1984, 3, 24);
          *(_QWORD *)v35 = off_24FA63488;
        }
        else
        {
          v35 = sub_22E4899EC(v4 + 1984, 3, 24);
          *(_QWORD *)v35 = off_24FA633C0;
        }
        *(_QWORD *)(v35 + 8) = v34;
        *(_BYTE *)(v35 + 16) = 0;
      }
LABEL_75:
      v30 += 24;
      if (v30 == v31)
        goto LABEL_76;
    }
  }
  if ((v20 & 0x40000000) != 0 && (*((_BYTE *)result + 1865) & 2) != 0)
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v19 + 104) + 96), *(_QWORD *)(v19 + 104));
    if (*(_DWORD *)(*(_QWORD *)(v19 + 128) + 20))
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v19 + 104) + 96), *(_QWORD *)(v19 + 104));
      if ((**(_QWORD **)(v19 + 128) & 0x400) != 0)
      {
        v21 = (_QWORD *)sub_22E4899EC(v4 + 1984, 3, 16);
        *v21 = off_24FA63460;
        v21[1] = a2;
      }
    }
  }
  result = (_QWORD *)sub_22E483108(v19);
  if (result != v22)
  {
    v23 = result;
    v24 = v22;
    do
    {
      v25 = *(_QWORD *)(*(_QWORD *)v23[2] & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v25 + 8) & 0xF) != 0)
        v25 = (unint64_t)sub_22F10D2BC(*(_QWORD *)v23[2]);
      v26 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v25 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                    + 24));
      result = (_QWORD *)sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v26 + 104) + 96), *(_QWORD *)(v26 + 104));
      if ((**(_QWORD **)(v26 + 128) & 0x100000000000) != 0)
      {
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 144) + 184) + 35) & 0x40) == 0)
          goto LABEL_51;
        if ((*(_BYTE *)(v4 + 1865) & 2) == 0)
          goto LABEL_51;
        result = (_QWORD *)sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v26 + 104) + 96), *(_QWORD *)(v26 + 104));
        if ((**(_QWORD **)(v26 + 128) & 0x200) != 0)
          goto LABEL_51;
        result = (_QWORD *)sub_22E4899EC(v4 + 1984, 3, 24);
        *result = off_24FA63488;
      }
      else
      {
        result = (_QWORD *)sub_22E4899EC(v4 + 1984, 3, 24);
        *result = off_24FA633C0;
      }
      result[1] = v26;
      *((_BYTE *)result + 16) = 1;
LABEL_51:
      v23 += 3;
    }
    while (v23 != v24);
  }
  return result;
}

uint64_t sub_22E4828F0(_QWORD *a1, uint64_t a2)
{
  _WORD *v4;
  _DWORD *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int8 **v16;
  unsigned int v17;
  uint64_t i;
  unsigned __int8 *v20;
  int v21;
  unsigned __int8 *v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  unsigned __int8 *v26;
  int v27;
  unint64_t v28;
  BOOL v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  unint64_t v37;
  unsigned __int8 *v38;
  unint64_t v39;
  unsigned __int8 *v40;
  int v41;
  unsigned __int8 *v42;
  uint64_t v44;
  unsigned __int8 *v45;
  int v46;
  uint64_t v47[4];
  __int128 v48;
  __int128 v49;
  int v50;
  BOOL v51;
  void *v52;
  uint64_t v53;
  _BYTE v54[128];
  _BYTE v55[104];
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v4 = (_WORD *)(a1[211] & 0xFFFFFFFFFFFFFFF8);
  v5 = (_DWORD *)(*(uint64_t (**)(_WORD *))(*(_QWORD *)v4 + 64))(v4);
  sub_22F0D4E74((uint64_t)v5);
  sub_22E4889F4((uint64_t)v55, (uint64_t)a1, v6);
  sub_22E3CB7B0(a1, (uint64_t)v5, 0);
  v7 = v4[40] & 0x7F;
  v8 = -40;
  if (v7 > 0x46)
  {
    if (v7 == 83)
      goto LABEL_17;
    if (v7 == 71)
    {
      v8 = -56;
      goto LABEL_17;
    }
    if (v7 != 81)
    {
LABEL_12:
      v9 = v7 - 52;
      v24 = v7 - 33 >= 5;
      v10 = -48;
      if (!v24)
        v10 = -64;
      if (v9 >= 6)
        v8 = v10;
      else
        v8 = -72;
    }
  }
  else
  {
    if (v7 > 0x18)
      goto LABEL_11;
    if (v7 == 16)
    {
LABEL_4:
      v8 = -48;
      goto LABEL_17;
    }
    if (((1 << v7) & 0x1066) == 0)
    {
      if (v7 == 24)
        goto LABEL_4;
LABEL_11:
      if (v7 == 70)
      {
        v8 = -64;
        goto LABEL_17;
      }
      goto LABEL_12;
    }
  }
LABEL_17:
  v11 = *(_QWORD *)((char *)v4 + v8 + 88);
  v12 = (_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF8);
  if ((v11 & 4) != 0)
    v12 = (_QWORD *)*v12;
  if (v12)
    v13 = (unint64_t)(v12 - 8);
  else
    v13 = 0;
  v14 = *(_QWORD *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 8) - 8);
  v47[0] = (uint64_t)a1;
  v47[1] = v13;
  v47[2] = v14;
  v47[3] = sub_22F0C975C(*(_QWORD *)(a1[18] + 144), v13);
  v50 = 0;
  v49 = 0u;
  v48 = 0u;
  v51 = (*(_DWORD *)(*(_QWORD *)(a1[18] + 152) + 244) & 0x60000) == 0;
  v52 = v54;
  v53 = 0x1000000000;
  v17 = *v5;
  v16 = (unsigned __int8 **)(v5 + 4);
  v15 = v17;
  if (v17 >= 0x100)
  {
    for (i = 8 * (v15 >> 8); i; i -= 8)
    {
      v20 = *v16;
      if (v51)
      {
        v21 = *v20;
        if ((v21 & 0xFE) == 0x70)
        {
          if ((*(_DWORD *)v20 & 0xFC0000) != 0x540000)
            goto LABEL_85;
          v22 = (unsigned __int8 *)*((_QWORD *)v20 + 2);
          if (*v22 != 188)
            goto LABEL_85;
          v23 = *((_QWORD *)v22 + 3);
          v24 = v23 && (*(_DWORD *)(v23 + 28) & 0x7Fu) - 52 >= 0xFFFFFFFD;
          if (!v24)
            goto LABEL_85;
          v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v47[0] + 144) + 144) + 2000);
          if (!sub_22E4881BC(*(_QWORD *)(v25 + 184), *(_QWORD *)(v25 + 192), v23))
            goto LABEL_85;
          v26 = (unsigned __int8 *)*((_QWORD *)v20 + 3);
          v27 = *v26;
          if (v27 == 153)
          {
            v26 = (unsigned __int8 *)*((_QWORD *)v26 + 2);
            if (!v26)
              goto LABEL_85;
            v27 = *v26;
          }
          if (v27 == 188 && *((_QWORD *)v26 + 3) == v23)
            goto LABEL_59;
        }
        else
        {
          if (v21 == 140)
          {
            v28 = sub_22EFFA604(*(unsigned __int8 **)&v20[v20[3]]);
            if (v28)
              v29 = (*(_DWORD *)(v28 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFC;
            else
              v29 = 0;
            if (!v29)
              goto LABEL_85;
            if (!sub_22E483EF8(v28))
              goto LABEL_85;
            v30 = (unsigned __int8 *)sub_22F060ED0((uint64_t)v20);
            if (*v30 != 188)
              goto LABEL_85;
            v23 = *((_QWORD *)v30 + 3);
            if (!v23)
              goto LABEL_85;
            if ((*(_DWORD *)(v23 + 28) & 0x7Fu) - 52 < 0xFFFFFFFD)
              goto LABEL_85;
            v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v47[0] + 144) + 144) + 2000);
            if (!sub_22E4881BC(*(_QWORD *)(v31 + 184), *(_QWORD *)(v31 + 192), v23))
              goto LABEL_85;
            v32 = *(unsigned __int8 **)&v20[8 * (((unint64_t)*(unsigned int *)v20 >> 18) & 1)
                                          + 8
                                          + ((unint64_t)*(unsigned int *)v20 >> 24)];
          }
          else
          {
            if ((v21 + 113) < 0xFBu)
              goto LABEL_85;
            v35 = sub_22EFFA604(*(unsigned __int8 **)&v20[v20[3]]);
            v36 = v35 && (*(_DWORD *)(v35 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA;
            if (!v36 || sub_22EFC01DC(v35, 0) != 419)
              goto LABEL_85;
            v37 = (unint64_t)&v20[8 * (((unint64_t)*(unsigned int *)v20 >> 18) & 1)
                                       + ((unint64_t)*(unsigned int *)v20 >> 24)];
            v40 = *(unsigned __int8 **)(v37 + 8);
            v39 = v37 + 8;
            v38 = v40;
            v41 = *v40;
            if (v41 == 153)
            {
              v38 = (unsigned __int8 *)*((_QWORD *)v38 + 2);
              v41 = *v38;
            }
            if (v41 != 233)
              goto LABEL_85;
            if ((*(_DWORD *)v38 & 0x7C0000) != 0x100000)
              goto LABEL_85;
            v42 = (unsigned __int8 *)*((_QWORD *)v38 + 2);
            if (*v42 != 188)
              goto LABEL_85;
            v23 = *((_QWORD *)v42 + 3);
            if (!v23 || (*(_DWORD *)(v23 + 28) & 0x7Fu) - 52 < 0xFFFFFFFD)
              goto LABEL_85;
            v44 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v47[0] + 144) + 144) + 2000);
            if (!sub_22E4881BC(*(_QWORD *)(v44 + 184), *(_QWORD *)(v44 + 192), v23))
              goto LABEL_85;
            v45 = *(unsigned __int8 **)(v39 + 8);
            v46 = *v45;
            if (v46 == 153)
            {
              v45 = (unsigned __int8 *)*((_QWORD *)v45 + 2);
              v46 = *v45;
            }
            if (v46 != 233 || (*(_DWORD *)v45 & 0x7C0000) != 0x100000)
              goto LABEL_85;
            v32 = (unsigned __int8 *)*((_QWORD *)v45 + 2);
          }
          if (*v32 == 188)
          {
            v33 = *((_QWORD *)v32 + 3);
            if ((*(_DWORD *)(v33 + 28) & 0x7Fu) - 49 >= 3)
              v33 = 0;
            if (v23 == v33)
            {
LABEL_59:
              sub_22E4879F0((uint64_t)v47, v23);
              v34 = v53;
              if (v53 >= (unint64_t)HIDWORD(v53))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v34 = v53;
              }
              *((_QWORD *)v52 + v34) = v20;
              LODWORD(v53) = v53 + 1;
              goto LABEL_86;
            }
          }
        }
      }
LABEL_85:
      sub_22E488A9C((unsigned int *)v47);
      sub_22E5E5158(v47[0], v20, 0, 0);
LABEL_86:
      ++v16;
    }
  }
  sub_22E488A9C((unsigned int *)v47);
  if (v52 != v54)
    free(v52);
  return sub_22E488B4C((uint64_t)v55);
}

uint64_t sub_22E482DF0(uint64_t a1, llvm::Constant **a2, int a3)
{
  _QWORD *v6;
  _QWORD *v7;
  llvm::Type *v8;
  uint64_t NullValue;
  uint64_t v10;
  uint64_t v11;
  _WORD *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  unsigned __int8 *v22;
  llvm::Value *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  __int128 v28;
  uint64_t v29;
  uint64_t v30[2];
  char v31;
  uint64_t v32;
  __int16 v33;

  v6 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v30[0] = (uint64_t)"dtor.continue";
  v7 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v33 = 257;
  NullValue = llvm::Constant::getNullValue(*a2, v8);
  v10 = sub_22E3C18F4(a1 + 272, 32, (uint64_t *)a2, NullValue, (uint64_t)v30);
  v11 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x23489C09C](v11, v7, v6, v10, 0);
  v33 = 257;
  sub_22E3C12C8((uint64_t *)(a1 + 272), v11, (uint64_t)v30);
  sub_22E5ED9B4((_QWORD *)a1, v6, 0);
  v12 = *(_WORD **)(a1 + 1600);
  v13 = v12[40] & 0x7F;
  v14 = -40;
  if (v13 > 0x46)
  {
    if (v13 == 83)
      goto LABEL_17;
    if (v13 == 71)
    {
      v14 = -56;
      goto LABEL_17;
    }
    if (v13 != 81)
    {
LABEL_12:
      v15 = v13 - 52;
      v16 = v13 - 33 >= 5;
      v17 = -48;
      if (!v16)
        v17 = -64;
      if (v15 >= 6)
        v14 = v17;
      else
        v14 = -72;
    }
  }
  else
  {
    if (v13 > 0x18)
      goto LABEL_11;
    if (v13 == 16)
    {
LABEL_4:
      v14 = -48;
      goto LABEL_17;
    }
    if (((1 << v13) & 0x1066) == 0)
    {
      if (v13 == 24)
        goto LABEL_4;
LABEL_11:
      if (v13 == 70)
      {
        v14 = -64;
        goto LABEL_17;
      }
      goto LABEL_12;
    }
  }
LABEL_17:
  v18 = *(_QWORD *)((char *)v12 + v14 + 88);
  v19 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF8);
  if ((v18 & 4) != 0)
    v19 = (_QWORD *)*v19;
  if (v19)
    v20 = (unint64_t)(v19 - 8);
  else
    v20 = 0;
  v21 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)v12 + 32))(*(_QWORD *)(a1 + 1600)) + 160);
  v22 = *(unsigned __int8 **)((*(uint64_t (**)(_WORD *))(*(_QWORD *)v12 + 32))(v12) + 168);
  if (v22)
  {
    v30[0] = a1;
    v30[1] = a1 + 272;
    v31 = 0;
    v32 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
    v23 = sub_22E50E974(v30, v22);
  }
  else
  {
    v23 = *(llvm::Value **)(a1 + 4208);
  }
  v24 = *(_QWORD *)(v20 + 48);
  if (v24)
    v25 = v24 & 0xFFFFFFFFFFFFFFF0;
  else
    v25 = sub_22EF6462C(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), v20);
  sub_22F261F20(a1, v21, (uint64_t)v23, v25, 0, 0);
  if (a3)
  {
    v28 = *(_OWORD *)(a1 + 1712);
    v29 = *(_QWORD *)(a1 + 1728);
    sub_22E48BA00((_QWORD *)a1, (uint64_t)&v28);
  }
  else
  {
    v26 = llvm::User::operator new((llvm::User *)0x40);
    llvm::BranchInst::BranchInst();
    v33 = 257;
    sub_22E3C12C8((uint64_t *)(a1 + 272), v26, (uint64_t)v30);
  }
  return sub_22E5ED9B4((_QWORD *)a1, v7, 0);
}

unint64_t sub_22E483108(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;

  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  v2 = *(_QWORD *)(a1 + 128);
  v3 = *(_QWORD *)(v2 + 32);
  if ((v3 & 1) != 0)
    v3 = sub_22F3B1908(v2);
  sub_22E488C50(a1);
  return v3;
}

llvm::APInt *sub_22E483158(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  llvm::APInt *result;
  unsigned int v14;
  _QWORD *v15;
  llvm::Type *v16;
  uint64_t NullValue;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  llvm::PHINode *v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  llvm::PHINode **v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  int v76;
  llvm::GetElementPtrInst *v77;
  uint64_t v78;
  uint64_t v79;
  llvm::PHINode *v81;
  uint64_t v82;
  llvm::PHINode *v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char v91;
  _QWORD v92[3];
  int v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD v96[4];
  __int16 v97;

  if (a3 && *(_BYTE *)(a3 + 16) == 16)
  {
    result = (llvm::APInt *)(a3 + 24);
    v14 = *(_DWORD *)(a3 + 32);
    if (v14 > 0x40)
    {
      result = (llvm::APInt *)llvm::APInt::countLeadingZerosSlowCase(result);
      if ((_DWORD)result == v14)
        return result;
    }
    else if (!*(_QWORD *)result)
    {
      return result;
    }
    v76 = a6;
    v71 = a5;
    v78 = 0;
  }
  else
  {
    v76 = a6;
    v71 = a5;
    v15 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v96[0] = "isempty";
    v97 = 259;
    NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)a3, v16);
    v18 = sub_22E3C18F4(a1 + 272, 32, (uint64_t *)a3, NullValue, (uint64_t)v96);
    v19 = llvm::User::operator new((llvm::User *)0x40);
    MEMORY[0x23489C09C](v19, v15, v15, v18, 0);
    v97 = 257;
    v78 = sub_22E3C12C8((uint64_t *)(a1 + 272), v19, (uint64_t)v96);
    sub_22E5ED9B4((_QWORD *)a1, v15, 0);
  }
  v20 = *(_QWORD *)(a4 + 8);
  if ((*(_BYTE *)(a4 + 24) & 3) != 0)
    v21 = (uint64_t *)sub_22F28ABCC(a4, a1);
  else
    v21 = *(uint64_t **)a4;
  v96[0] = "arrayctor.end";
  v97 = 259;
  v79 = v20;
  v77 = sub_22E3E5044((uint64_t *)(a1 + 272), v20, v21, (uint64_t *)a3, (uint64_t)v96);
  v22 = *(_QWORD *)(a1 + 320);
  v96[0] = "arrayctor.loop";
  v97 = 259;
  v23 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  sub_22E5ED9B4((_QWORD *)a1, v23, 0);
  v24 = *v21;
  v96[0] = "arrayctor.cur";
  v97 = 259;
  v74 = (uint64_t *)(a1 + 272);
  v25 = (llvm::PHINode *)sub_22E3C4B80((uint64_t *)(a1 + 272), v24, 2, (uint64_t)v96);
  sub_22E3C4C50(v25, (uint64_t)v21, v22);
  v26 = a2 + 72;
  v27 = *(_WORD *)(a2 + 80) & 0x7F;
  v28 = -40;
  if (v27 > 0x46)
  {
    if (v27 == 83)
      goto LABEL_27;
    if (v27 == 71)
    {
      v28 = -56;
      goto LABEL_27;
    }
    if (v27 != 81)
    {
LABEL_22:
      v29 = v27 - 52;
      v30 = v27 - 33 >= 5;
      v31 = -48;
      if (!v30)
        v31 = -64;
      if (v29 >= 6)
        v28 = v31;
      else
        v28 = -72;
    }
  }
  else
  {
    if (v27 > 0x18)
      goto LABEL_21;
    if (v27 == 16)
    {
LABEL_14:
      v28 = -48;
      goto LABEL_27;
    }
    if (((1 << v27) & 0x1066) == 0)
    {
      if (v27 == 24)
        goto LABEL_14;
LABEL_21:
      if (v27 == 70)
      {
        v28 = -64;
        goto LABEL_27;
      }
      goto LABEL_22;
    }
  }
LABEL_27:
  v32 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
  v33 = *(_QWORD *)(v26 + v28 + 16);
  v34 = (_QWORD *)(v33 & 0xFFFFFFFFFFFFFFF8);
  if ((v33 & 4) != 0)
    v34 = (_QWORD *)*v34;
  if (v34)
    v35 = (unint64_t)(v34 - 8);
  else
    v35 = 0;
  v36 = *(_QWORD *)(v35 + 48);
  if (v36)
  {
    v37 = v36 & 0xFFFFFFFFFFFFFFF0;
  }
  else
  {
    v37 = sub_22EF6462C(v32, v35);
    v32 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
  }
  v38 = *(_QWORD *)(a4 + 16);
  sub_22EF5CCD0(v32, *(_QWORD *)(v37 & 0xFFFFFFFFFFFFFFF0), (uint64_t)v96);
  v39 = (v96[0] | v38) & -(v96[0] | v38);
  if (a7)
  {
    v92[0] = v25;
    v92[1] = v79;
    v92[2] = (v96[0] | v38) & -(v96[0] | v38);
    v93 = 0;
    v94 = 0;
    v95 = 0;
    sub_22E620824(a1, (uint64_t)v92, v37);
  }
  v40 = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000);
  v41 = *(_QWORD *)(a1 + 2312);
  v72 = *(_BYTE *)(a1 + 2893);
  *(_BYTE *)(a1 + 2893) = 0;
  v75 = *(_QWORD *)(a1 + 2872);
  v73 = v40;
  *(_QWORD *)(a1 + 2872) = v40;
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 152) + 8) & 0x100000000000) != 0)
  {
    v42 = *(_WORD *)(a2 + 80) & 0x7F;
    v43 = -40;
    if (v42 > 0x46)
    {
      if (v42 != 83)
      {
        if (v42 == 71)
        {
          v43 = -56;
          goto LABEL_55;
        }
        if (v42 == 81)
          goto LABEL_55;
LABEL_50:
        v44 = v42 - 52;
        v30 = v42 - 33 >= 5;
        v45 = -48;
        if (!v30)
          v45 = -64;
        if (v44 >= 6)
          v43 = v45;
        else
          v43 = -72;
      }
    }
    else
    {
      if (v42 > 0x18)
        goto LABEL_49;
      if (v42 != 16)
      {
        if (((1 << v42) & 0x1066) != 0)
          goto LABEL_55;
        if (v42 != 24)
        {
LABEL_49:
          if (v42 == 70)
          {
            v43 = -64;
            goto LABEL_55;
          }
          goto LABEL_50;
        }
      }
      v43 = -48;
    }
LABEL_55:
    v46 = *(_QWORD *)(v26 + v43 + 16);
    v47 = (_QWORD *)(v46 & 0xFFFFFFFFFFFFFFF8);
    if ((v46 & 4) != 0)
      v47 = (_QWORD *)*v47;
    if (v47)
      v48 = v47 - 8;
    else
      v48 = 0;
    sub_22E3CD31C((uint64_t *)(v48[13] + 96), v48[13]);
    if ((*(_QWORD *)v48[16] & 0x100000000000) == 0)
      sub_22F25A708(a1, (uint64_t)v21, (uint64_t)v25, v37, v39, (uint64_t)sub_22F25105C);
  }
  v49 = *(_QWORD *)((v37 & 0xFFFFFFFFFFFFFFF0) + 8);
  v50 = v39;
  if ((v49 & 8) != 0)
  {
    v52 = *(_QWORD *)((v49 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    v51 = *(_QWORD *)((v49 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
  }
  else
  {
    v51 = 0;
    v52 = 0;
  }
  v53 = v51 | v52 | (v49 | v37) & 7;
  if (v76)
    v54 = 33;
  else
    v54 = 1;
  if (!sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v37 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0), "sampler", 7, 0, 0))
  {
    v61 = &v82;
    v81 = v25;
    v62 = &v81;
    v59 = (uint64_t)v77;
    v57 = v79;
    v60 = v75;
    goto LABEL_72;
  }
  v55 = sub_22EF579A8(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), v37, 0);
  v56 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144) + 2032, 48, 3);
  sub_22F0615F0(v56, a2, v37, v55, 0, 0, 0, 0, 0, 0, 0);
  v57 = v79;
  *(_QWORD *)&v85 = v25;
  *((_QWORD *)&v85 + 1) = v79;
  v86 = v50;
  v87 = 0;
  v88 = 0;
  v89 = 0;
  v90 = v53;
  v91 = v54;
  v58 = sub_22E4FC14C(a1, v56, &v85);
  v59 = (uint64_t)v77;
  v60 = v75;
  if (!v58)
  {
    v61 = &v84;
    v83 = v25;
    v62 = &v83;
LABEL_72:
    v62[1] = (llvm::PHINode *)v57;
    v62[2] = (llvm::PHINode *)v50;
    *((_DWORD *)v62 + 6) = 0;
    *v61 = 0;
    v61[1] = 0;
    v62[6] = (llvm::PHINode *)v53;
    *((_BYTE *)v62 + 56) = v54;
    sub_22E48393C((_QWORD *)a1, a2, 0, 0, 0, (uint64_t *)v62, v71);
  }
  *(_BYTE *)(a1 + 2893) = v72;
  sub_22E48B274(a1, v73, v41, 0, 0);
  *(_QWORD *)(a1 + 2872) = v60;
  v63 = (uint64_t *)llvm::ConstantInt::get();
  v96[0] = "arrayctor.next";
  v97 = 259;
  v64 = (uint64_t *)sub_22E3E5044(v74, v57, (uint64_t *)v25, v63, (uint64_t)v96);
  sub_22E3C4C50(v25, (uint64_t)v64, *(_QWORD *)(a1 + 320));
  v96[0] = "arrayctor.done";
  v97 = 259;
  v65 = sub_22E3C18F4((uint64_t)v74, 32, v64, v59, (uint64_t)v96);
  v96[0] = "arrayctor.cont";
  v97 = 259;
  v66 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v67 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x23489C09C](v67, v66, v23, v65, 0);
  v97 = 257;
  sub_22E3C12C8(v74, v67, (uint64_t)v96);
  if (v78)
  {
    if (*(_QWORD *)(v78 - 32))
    {
      **(_QWORD **)(v78 - 16) = *(_QWORD *)(v78 - 24);
      v68 = *(_QWORD *)(v78 - 24);
      if (v68)
        *(_QWORD *)(v68 + 16) = *(_QWORD *)(v78 - 16);
    }
    *(_QWORD *)(v78 - 32) = v66;
    v69 = v66 + 1;
    v70 = v66[1];
    *(_QWORD *)(v78 - 24) = v70;
    if (v70)
      *(_QWORD *)(v70 + 16) = v78 - 24;
    *(_QWORD *)(v78 - 16) = v69;
    *v69 = v78 - 32;
  }
  return (llvm::APInt *)sub_22E5ED9B4((_QWORD *)a1, v66, 0);
}

void sub_22E48393C(_QWORD *a1, unint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, uint64_t *a6, uint64_t a7)
{
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v55;
  uint64_t v56;
  _OWORD v57[3];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  _OWORD v67[4];
  unint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  __int16 v84;
  unint64_t v85;
  _OWORD v86[2];
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  unint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  void *v97;
  uint64_t v98;
  _BYTE v99[1216];
  void *v100;
  uint64_t v101;
  _BYTE v102[192];
  void *v103;
  uint64_t v104;
  _BYTE v105[16];
  void *v106;
  uint64_t v107;
  _QWORD v108[8];

  v108[5] = *MEMORY[0x24BDAC8D0];
  v97 = v99;
  v98 = 0x800000000;
  v100 = v102;
  v101 = 0x100000000;
  v103 = v105;
  v104 = 0x100000000;
  v106 = v108;
  v107 = 0x200000000;
  v108[4] = 0;
  v55 = a6[1];
  v56 = *a6;
  v11 = *((_OWORD *)a6 + 2);
  v73 = *((_OWORD *)a6 + 1);
  v74 = v11;
  v12 = *((_DWORD *)a6 + 12) >> 11;
  v13 = sub_22EFD7558(a2);
  v14 = *(_QWORD *)((sub_22F10ACF8(*(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0)) & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v14 & 8) != 0)
    v15 = *(_DWORD *)((v14 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11;
  else
    v15 = 0;
  v16 = sub_22EFD7558(a2);
  v17 = sub_22F10ACF8(*(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0));
  *(_QWORD *)&v88 = v56;
  *((_QWORD *)&v88 + 1) = v55;
  v89 = v73;
  v90 = v74;
  sub_22E5E0440((uint64_t)a1, (uint64_t)&v88, v17, &v75);
  v18 = v75;
  if ((_DWORD)v12 != (_DWORD)v15)
  {
    v19 = (v15 - 27);
    if (v15 < 0x1B)
      v19 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1[18] + 144) + 15072) + 4 * v15);
    v20 = llvm::PointerType::get();
    if (*(_QWORD *)(v20 + 24))
      v21 = llvm::PointerType::get();
    else
      v21 = llvm::PointerType::get(*(llvm::PointerType **)v20, (llvm::LLVMContext *)v19);
    v22 = v21;
    v23 = sub_22E699F3C((_QWORD *)a1[18]);
    v18 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v23 + 216))(v23, a1, v18, v15, v12, v22, 0);
  }
  v24 = sub_22EFD7558(a2);
  v75 = (unint64_t)v18;
  LOBYTE(v78) = 0;
  v84 = 0;
  v85 = v24;
  v25 = sub_22E3C187C((uint64_t)&v97, (unint64_t)&v75, 1);
  v26 = (char *)v97 + 152 * v98;
  v27 = *(_OWORD *)(v25 + 16);
  *(_OWORD *)v26 = *(_OWORD *)v25;
  *((_OWORD *)v26 + 1) = v27;
  v28 = *(_QWORD *)(v25 + 144);
  v29 = *(_OWORD *)(v25 + 128);
  v30 = *(_OWORD *)(v25 + 96);
  *((_OWORD *)v26 + 7) = *(_OWORD *)(v25 + 112);
  *((_OWORD *)v26 + 8) = v29;
  *((_QWORD *)v26 + 18) = v28;
  *((_OWORD *)v26 + 6) = v30;
  v31 = *(_OWORD *)(v25 + 80);
  v32 = *(_OWORD *)(v25 + 32);
  v33 = *(_OWORD *)(v25 + 48);
  *((_OWORD *)v26 + 4) = *(_OWORD *)(v25 + 64);
  *((_OWORD *)v26 + 5) = v31;
  *((_OWORD *)v26 + 2) = v32;
  *((_OWORD *)v26 + 3) = v33;
  LODWORD(v98) = v98 + 1;
  if (sub_22E483EF8(a2))
  {
    sub_22E4D8D7C(v67);
    v34 = *(_WORD *)(a2 + 80) & 0x7F;
    v35 = -40;
    if (v34 > 0x46)
    {
      switch(v34)
      {
        case 'S':
          goto LABEL_37;
        case 'G':
          v35 = -56;
          goto LABEL_37;
        case 'Q':
          goto LABEL_37;
      }
    }
    else
    {
      if (v34 <= 0x18)
      {
        if (v34 == 16)
          goto LABEL_15;
        if (((1 << v34) & 0x1066) != 0)
          goto LABEL_37;
        if (v34 == 24)
        {
LABEL_15:
          v35 = -48;
LABEL_37:
          v44 = *(_QWORD *)(a2 + 72 + v35 + 16);
          v45 = (_QWORD *)(v44 & 0xFFFFFFFFFFFFFFF8);
          if ((v44 & 4) != 0)
            v45 = (_QWORD *)*v45;
          v46 = (_QWORD *)a1[18];
          if (v45)
            v47 = (unint64_t)(v45 - 8);
          else
            v47 = 0;
          v48 = *(_QWORD *)(v47 + 48);
          if (v48)
          {
            v49 = v48 & 0xFFFFFFFFFFFFFFF0;
          }
          else
          {
            v49 = sub_22EF6462C(v46[18], v47);
            v46 = (_QWORD *)a1[18];
          }
          sub_22E6281E0(v46, v49, (uint64_t)v86);
          *(_QWORD *)&v75 = v56;
          *((_QWORD *)&v75 + 1) = v55;
          v76 = v73;
          v77 = v74;
          v50 = *(_QWORD *)(a1[18] + 144);
          v88 = v86[0];
          v89 = v86[1];
          *(_QWORD *)&v90 = v87;
          v59 = 0uLL;
          LODWORD(v60) = 0;
          *((_QWORD *)&v58 + 1) = 0;
          *((_QWORD *)&v60 + 1) = 0;
          *(_QWORD *)&v61 = 0;
          v62 = 0uLL;
          *(_QWORD *)((char *)&v63 + 4) = 2;
          LODWORD(v58) = 0;
          v64 = 0u;
          v65 = 0u;
          sub_22E3C113C((uint64_t)&v58, &v75, v49, 2, &v88, v50);
          v81 = v64;
          v82 = v65;
          v77 = v60;
          v78 = v61;
          v79 = v62;
          v80 = v63;
          v75 = v58;
          v76 = v59;
          v88 = v67[0];
          v89 = v67[1];
          v90 = v67[2];
          v91 = v67[3];
          v93 = v69;
          v83 = v66;
          v94 = v70;
          v95 = v71;
          v96 = v72;
          v51 = (*((unsigned __int8 *)a6 + 56) >> 4) & 1;
          v92 = v68;
          sub_22E4EF4B8(a1, &v75, &v88, v68, v51, 0);
          goto LABEL_46;
        }
      }
      if (v34 == 70)
      {
LABEL_35:
        v35 = -64;
        goto LABEL_37;
      }
    }
    if (v34 - 52 < 6)
    {
      v35 = -72;
      goto LABEL_37;
    }
    if (v34 - 33 < 5)
      goto LABEL_35;
    goto LABEL_15;
  }
  v36 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (!v36 || *(_BYTE *)(v36 + 16) != 26)
    v36 = sub_22F10CF48(v36);
  v37 = *(_DWORD *)a7;
  v38 = v37 == 119;
  if (v37 == 119)
    v39 = a7;
  else
    v39 = 0;
  v40 = v39 + 48;
  if (v38)
    v41 = v40;
  else
    v41 = a7 + 40;
  sub_22E477B1C((uint64_t)a1, (uint64_t)&v97, v36 & 0xFFFFFFFFFFFFFFFBLL, v41, (unint64_t *)(v41 + 8 * *(unsigned int *)(a7 + 32)), *(_QWORD *)(a7 + 16), 0, (*(_DWORD *)a7 >> 20) & 1);
  *(_QWORD *)&v57[0] = v56;
  *((_QWORD *)&v57[0] + 1) = v55;
  v57[1] = v73;
  v57[2] = v74;
  v42 = *((unsigned __int8 *)a6 + 56);
  sub_22EFF605C(a7);
  sub_22E484118((uint64_t)a1, a2, a3, a4, a5, v57, &v97, (v42 >> 4) & 1, v43, 0, (v42 & 0x20) != 0);
LABEL_46:
  if (v106 != v108)
    free(v106);
  if (v103 != v105)
    free(v103);
  if (v100 != v102)
    free(v100);
  if (v97 != v99)
    free(v97);
}

uint64_t sub_22E483EF8(unint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;

  if (a1 && (*(_DWORD *)(a1 + 28) & 0x7F) == 0x37 && (v19 = 0, (sub_22EFD8088(a1, &v19) & 1) != 0)
    || (sub_22EFD3B9C(a1) & 1) != 0
    || (result = sub_22EFD3F30(a1), (_DWORD)result))
  {
    v3 = *(_QWORD *)(a1 + 80);
    if ((v3 & 0x800000) == 0)
      goto LABEL_30;
    v4 = v3 & 0x7F;
    v5 = -40;
    if (v4 > 70)
    {
      if (v4 != 83)
      {
        if (v4 == 71)
        {
          v5 = -56;
          goto LABEL_23;
        }
        if (v4 == 81)
          goto LABEL_23;
LABEL_18:
        v6 = v4 - 52;
        v7 = (v4 - 33) >= 5;
        v8 = -48;
        if (!v7)
          v8 = -64;
        if (v6 >= 6)
          v5 = v8;
        else
          v5 = -72;
      }
    }
    else
    {
      if (v4 > 0x18)
        goto LABEL_17;
      if (v4 != 16)
      {
        if (((1 << v4) & 0x1066) != 0)
          goto LABEL_23;
        if (v4 != 24)
        {
LABEL_17:
          if (v4 == 70)
          {
            v5 = -64;
            goto LABEL_23;
          }
          goto LABEL_18;
        }
      }
      v5 = -48;
    }
LABEL_23:
    v9 = *(_QWORD *)(a1 + 72 + v5 + 16);
    v10 = (_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF8);
    if ((v9 & 4) != 0)
      v10 = (_QWORD *)*v10;
    if (v10)
      v11 = (unint64_t)(v10 - 8);
    else
      v11 = 0;
    if (!sub_22EFC3DB8(v11, 0))
      return 1;
    LOWORD(v3) = *(_WORD *)(a1 + 80);
LABEL_30:
    v12 = v3 & 0x7F;
    v13 = -40;
    if (v12 > 70)
    {
      if (v12 == 83)
        goto LABEL_46;
      if (v12 == 71)
      {
        v13 = -56;
        goto LABEL_46;
      }
      if (v12 != 81)
      {
LABEL_41:
        v14 = v12 - 52;
        v7 = (v12 - 33) >= 5;
        v15 = -48;
        if (!v7)
          v15 = -64;
        if (v14 >= 6)
          v13 = v15;
        else
          v13 = -72;
      }
    }
    else
    {
      if (v12 > 0x18)
        goto LABEL_40;
      if (v12 == 16)
      {
LABEL_33:
        v13 = -48;
        goto LABEL_46;
      }
      if (((1 << v12) & 0x1066) == 0)
      {
        if (v12 == 24)
          goto LABEL_33;
LABEL_40:
        if (v12 == 70)
        {
          v13 = -64;
          goto LABEL_46;
        }
        goto LABEL_41;
      }
    }
LABEL_46:
    v16 = *(_QWORD *)(a1 + 72 + v13 + 16);
    v17 = (_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF8);
    if ((v16 & 4) != 0)
      v17 = (_QWORD *)*v17;
    if (v17)
      v18 = v17 - 8;
    else
      v18 = 0;
    return (v18[9] & 0xE000) == 0x4000 && (*(_BYTE *)(a1 + 83) & 2) != 0;
  }
  return result;
}

void sub_22E484118(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _OWORD *a6, _DWORD *a7, int a8, unsigned int a9, int a10, char a11)
{
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  BOOL v48;
  unint64_t v49;
  int v50;
  unint64_t v51;
  unsigned int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _BOOL4 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t i;
  char v64;
  unint64_t v65;
  uint64_t v66;
  BOOL v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  int v73;
  int v74;
  char v75;
  uint64_t v76;
  int v77;
  _OWORD *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _OWORD v82[3];
  _QWORD v83[3];
  int v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  _BYTE v88[48];
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  _BYTE v95[48];
  __int128 v96;
  unint64_t v97;
  _OWORD v98[4];
  _OWORD v99[3];
  _OWORD v100[2];
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  void *v105[2];
  __int128 v106;
  __int128 v107;
  __int128 v108;
  unint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;

  v123 = *MEMORY[0x24BDAC8D0];
  v19 = *(_WORD *)(a2 + 80) & 0x7F;
  v20 = -40;
  if (v19 > 0x46)
  {
    if (v19 == 83)
      goto LABEL_17;
    if (v19 == 71)
    {
      v20 = -56;
      goto LABEL_17;
    }
    if (v19 != 81)
    {
LABEL_12:
      v21 = v19 - 52;
      v22 = v19 - 33 >= 5;
      v23 = -48;
      if (!v22)
        v23 = -64;
      if (v21 >= 6)
        v20 = v23;
      else
        v20 = -72;
    }
  }
  else
  {
    if (v19 > 0x18)
      goto LABEL_11;
    if (v19 == 16)
    {
LABEL_4:
      v20 = -48;
      goto LABEL_17;
    }
    if (((1 << v19) & 0x1066) == 0)
    {
      if (v19 == 24)
        goto LABEL_4;
LABEL_11:
      if (v19 == 70)
      {
        v20 = -64;
        goto LABEL_17;
      }
      goto LABEL_12;
    }
  }
LABEL_17:
  v24 = *(_QWORD *)(a2 + 72 + v20 + 16);
  v25 = (_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF8);
  if ((v24 & 4) != 0)
    v25 = (_QWORD *)*v25;
  if (v25)
    v26 = (uint64_t)(v25 - 8);
  else
    v26 = 0;
  if ((a11 & 1) == 0)
  {
    v27 = a6[1];
    v99[0] = *a6;
    v99[1] = v27;
    v99[2] = a6[2];
    v28 = sub_22EF6477C(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), v26);
    sub_22E484AD4(a1, 5u, a9, (uint64_t)v99, v28, 0, 0, 0, 0);
  }
  if ((*(_BYTE *)(a2 + 82) & 0x80) == 0 || sub_22EFC0EB8(a2))
  {
    v80 = v26;
    if (sub_22E483EF8(a2))
    {
      v29 = *(_QWORD *)(**(_QWORD **)(a2 + 120) + 48);
      v30 = *(_QWORD *)(v29 & 0xFFFFFFFFFFFFFFF0);
      v77 = a8;
      if (!v30 || (v31 = *(_DWORD *)(v30 + 16), (v31 & 0xFE) != 0x28))
      {
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v30 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28
          || (v30 = sub_22F10CF48(v30)) == 0)
        {
LABEL_30:
          sub_22E479748(*(_QWORD *)a7 + 152, a1, (uint64_t)&v114);
          v32 = v114;
          v33 = sub_22E62D754(*(_QWORD **)(a1 + 144), v29, 0, 0, 0);
          v34 = sub_22E66C868(*(_QWORD *)(a1 + 144) + 280, v29, 0);
          v35 = sub_22E5DE820(*(_QWORD *)(a1 + 144), v29);
          v37 = v36;
          sub_22E6281E0(*(_QWORD **)(a1 + 144), v29, (uint64_t)v88);
          *(_QWORD *)&v114 = v32;
          *((_QWORD *)&v114 + 1) = v34;
          *(_QWORD *)&v115 = v33;
          *((_QWORD *)&v115 + 1) = v35;
          v116 = v37;
          v38 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
          *(_OWORD *)v105 = *(_OWORD *)v88;
          v106 = *(_OWORD *)&v88[16];
          *(_QWORD *)&v107 = *(_QWORD *)&v88[32];
          memset(&v95[8], 0, 28);
          *(_QWORD *)&v95[40] = 0;
          *(_QWORD *)&v96 = 0;
          v97 = 0;
          *(_QWORD *)&v98[0] = 0;
          *(_QWORD *)((char *)v98 + 12) = 2;
          *(_DWORD *)v95 = 0;
          *(_OWORD *)((char *)&v98[2] + 8) = 0u;
          *(_OWORD *)((char *)&v98[1] + 8) = 0u;
          sub_22E3C113C((uint64_t)v95, &v114, v29, 2, (__int128 *)v105, v38);
          v39 = *(_QWORD *)(v80 + 48);
          if (v39)
            v40 = v39 & 0xFFFFFFFFFFFFFFF0;
          else
            v40 = sub_22EF6462C(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), v80);
          v59 = a6[1];
          *(_OWORD *)v105 = *a6;
          v106 = v59;
          v107 = a6[2];
          sub_22E6281E0(*(_QWORD **)(a1 + 144), v40, (uint64_t)v100);
          v114 = *(_OWORD *)v105;
          v115 = v106;
          v116 = v107;
          v60 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
          v102 = v100[0];
          v103 = v100[1];
          v104 = v101;
          memset(&v88[8], 0, 28);
          *(_QWORD *)&v88[40] = 0;
          *(_QWORD *)&v89 = 0;
          v90 = 0uLL;
          *(_QWORD *)((char *)&v91 + 4) = 2;
          *(_DWORD *)v88 = 0;
          v92 = 0u;
          v93 = 0u;
          sub_22E3C113C((uint64_t)v88, &v114, v40, 2, &v102, v60);
          v120 = v92;
          v121 = v93;
          v116 = *(_OWORD *)&v88[32];
          v117 = v89;
          v118 = v90;
          v119 = v91;
          v114 = *(_OWORD *)v88;
          v115 = *(_OWORD *)&v88[16];
          *(_OWORD *)v105 = *(_OWORD *)v95;
          v106 = *(_OWORD *)&v95[16];
          v107 = *(_OWORD *)&v95[32];
          v108 = v96;
          v110 = v98[0];
          v122 = v94;
          v111 = v98[1];
          v112 = v98[2];
          v113 = v98[3];
          v109 = v97;
          sub_22E4EF4B8((_QWORD *)a1, &v114, (__int128 *)v105, v97, v77, 0);
          return;
        }
        v31 = *(_DWORD *)(v30 + 16);
      }
      if ((v31 & 0x100000) != 0)
      {
        do
        {
          v30 = *(_QWORD *)(*(_QWORD *)(v30 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v30)
          {
            v73 = *(_DWORD *)(v30 + 16);
            if ((v73 & 0xFE) == 0x28)
              continue;
          }
          v30 = sub_22F10CF48(v30);
          v73 = *(_DWORD *)(v30 + 16);
        }
        while ((v73 & 0x100000) != 0);
      }
      v29 = *(_QWORD *)(v30 + 32);
      goto LABEL_30;
    }
    if ((*(_BYTE *)(a2 + 87) & 0x20) != 0)
    {
      v41 = *(_QWORD *)(a2 + 168);
      if (v41)
      {
        if ((_DWORD)a3
          && (*(_BYTE *)(v41 + 96) & 1) != 0
          && *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 304) + 148) < 0xBu)
        {
          v46 = 0;
          goto LABEL_53;
        }
        if ((sub_22EFBF68C(a2) & 1) != 0)
          goto LABEL_46;
        if (*(_DWORD *)(*(_QWORD *)(a1 + 152) + 148) == 11)
        {
          v42 = *(uint64_t **)(a2 + 120);
          v43 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
          if (v43 && *(_BYTE *)(v43 + 16) == 26
            || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v43 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
            && (v43 = sub_22F10CF48(v43)) != 0)
          {
            v44 = *(_QWORD *)(v43 + 16);
            if ((v44 & 0x3FFFC000000000) != 0)
            {
              v45 = 8 * (unsigned __int16)(v44 >> 38);
              while (!sub_22EFBEA2C(*v42, *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144)))
              {
                ++v42;
                v45 -= 8;
                if (!v45)
                  goto LABEL_45;
              }
              goto LABEL_46;
            }
          }
LABEL_45:
          v46 = 1;
          if (*(_QWORD *)(sub_22E46CBC8((_QWORD **)(*(_QWORD *)(a1 + 144) + 280), a7, a2, a3, 0, 0, 1) + 24))
          {
LABEL_46:
            sub_22F2524CC((uint64_t)&v114, a1, a2 & 0xFFFFFFFFFFFFFFF8 | a3, 0);
            LODWORD(v100[0]) = 0;
            *((_QWORD *)&v100[0] + 1) = a1;
            v47 = *(_QWORD *)(a1 + 2880);
            if (*(_BYTE *)(a1 + 2892))
              v48 = 1;
            else
              v48 = v47 == 0;
            if (v48)
            {
              *((_QWORD *)&v100[0] + 1) = 0;
            }
            else
            {
              LODWORD(v100[0]) = *(_DWORD *)(v47 + 560);
              sub_22E48F12C(v47, (llvm::IRBuilderBase *)(a1 + 272), a2 & 0xFFFFFFFFFFFFFFF8 | a3, 0);
            }
            v76 = *(_QWORD *)(a1 + 2312);
            v79 = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000);
            v75 = *(_BYTE *)(a1 + 2893);
            *(_BYTE *)(a1 + 2893) = 0;
            v81 = *(_QWORD *)(a1 + 2872);
            *(_QWORD *)(a1 + 2872) = v79;
            sub_22F2511E0(a1 + 4288, (uint64_t)a7);
            v105[0] = &v106;
            v105[1] = (void *)0x1000000000;
            v61 = sub_22E61E37C(a1, *(_QWORD *)(a1 + 1688), *(_QWORD *)(a1 + 1696), (uint64_t)v105);
            *(_QWORD *)(a1 + 1616) = v61;
            sub_22E46B5DC(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 224), a1, a2, a3, a4, a5, (uint64_t)a7);
            v62 = a7[2];
            if ((_DWORD)v62)
            {
              for (i = 0; i != v62; ++i)
              {
                if (i < LODWORD(v105[1]) && (*(_DWORD *)(*((_QWORD *)v105[0] + i) + 28) & 0x7F) == 0x3E)
                {
                  sub_22E479748(*(_QWORD *)a7 + 152 * i, a1, (uint64_t)v95);
                  if ((v96 & 6) != 0)
                  {
                    v102 = *(_OWORD *)&v95[8];
                    v103 = *(_OWORD *)&v95[24];
                    v104 = *(_QWORD *)&v95[40];
                    v64 = 1;
                  }
                  else
                  {
                    v64 = 0;
                  }
                  v65 = *((_QWORD *)v105[0] + i);
                  *(_QWORD *)v88 = *(_QWORD *)v95;
                  *(_OWORD *)&v88[8] = v102;
                  *(_OWORD *)&v88[24] = v103;
                  *(_QWORD *)&v88[40] = v104;
                  LOBYTE(v89) = v64;
                  sub_22E4CBB04(a1, v65, (uint64_t)v88, (i + 1));
                }
              }
            }
            v66 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v61 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
            if (v66)
              v67 = (*(_DWORD *)(v66 + 16) & 0xFF800FF) == 86507531;
            else
              v67 = 0;
            if (!v67)
            {
              *(_QWORD *)v95 = "retval.inhctor";
              *(_WORD *)&v95[32] = 259;
              v68 = sub_22E4D8554(a1, (llvm::LLVMContext *)v61, (uint64_t)v95);
              v70 = 0;
              v71 = v68 & 0xFFFFFFFFFFFFFFF8;
              if (v68 <= 7)
                v71 = 0;
              v72 = v69 & 0xFFFFFFFFFFFFFFF8;
              if (v68 <= 7)
                v72 = 0;
              if (v68 >= 8)
                v70 = 1 << (v69 & 7 | (8 * (v68 & 7)));
              *(_QWORD *)(a1 + 1736) = v71;
              *(_QWORD *)(a1 + 1744) = v72;
              *(_QWORD *)(a1 + 1752) = v70;
              *(_DWORD *)(a1 + 1760) = 0;
              *(_QWORD *)(a1 + 1776) = 0;
              *(_QWORD *)(a1 + 1768) = 0;
            }
            (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 144) + 224) + 448))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 224), a1);
            *(_QWORD *)(a1 + 4208) = *(_QWORD *)(a1 + 4200);
            sub_22E4817EC(a1, a2, a3, v105);
            if (v105[0] != &v106)
              free(v105[0]);
            *(_BYTE *)(a1 + 2893) = v75;
            sub_22E48B274(a1, v79, v76, 0, 0);
            *(_QWORD *)(a1 + 2872) = v81;
            sub_22F254754((uint64_t)v100);
            sub_22F2529E4((uint64_t *)&v114);
            return;
          }
          goto LABEL_53;
        }
      }
    }
    v46 = 1;
LABEL_53:
    v78 = a6;
    v49 = sub_22E46B5DC(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 224), a1, a2, a3, a4, a5, (uint64_t)a7);
    v50 = v49;
    v51 = HIDWORD(v49);
    v52 = a3;
    v53 = a2 & 0xFFFFFFFFFFFFFFF8 | a3;
    sub_22E46A4BC(*(_QWORD *)(a1 + 144), v53, 0, 0, 0, 0, 0);
    v55 = v54;
    v56 = sub_22E46CBC8((_QWORD **)(*(_QWORD *)(a1 + 144) + 280), a7, a2, v52, v50, v51, v46);
    v114 = v55;
    v115 = v53;
    LODWORD(v116) = 0;
    *((_QWORD *)&v116 + 1) = 0;
    memset(v83, 0, sizeof(v83));
    v84 = 0;
    v85 = 0;
    v86 = 0;
    v87 = 0;
    LOBYTE(v74) = 0;
    sub_22E47A004(v105, a1, v56, &v114, v83, a7, 0, 0, a9, v74);
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 184) + 33) & 0x18) != 0)
    {
      v57 = sub_22E463414(v80);
      if (v52 != 1
        && v57
        && (*(unsigned int (**)(_QWORD, unint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 144) + 224)
                                                                    + 240))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 224), v80)&& (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 184) + 39) & 4) != 0)
      {
        v58 = v78[1];
        v82[0] = *v78;
        v82[1] = v58;
        v82[2] = v78[2];
        sub_22F2510F0((_QWORD *)a1, v80, v82);
      }
    }
  }
}

void sub_22E484AD4(uint64_t a1, unsigned int a2, int a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, int a8, uint64_t a9)
{
  llvm::Constant **v16;

  if ((*(_QWORD *)(a1 + 1864) & 0x10042008000) != 0)
  {
    if ((*(_BYTE *)(a4 + 24) & 3) != 0)
      v16 = (llvm::Constant **)sub_22F28ABCC(a4, a1);
    else
      v16 = *(llvm::Constant ***)a4;
    sub_22E4DDC84(a1, a2, a3, v16, a5, a6, a7, a8, a9);
  }
}

void sub_22E484B98(uint64_t a1, unint64_t a2, unsigned int a3, _OWORD *a4, int a5, uint64_t a6)
{
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _OWORD *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _OWORD v50[3];
  _OWORD v51[3];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  unint64_t v58;
  _OWORD v59[3];
  void *v60;
  uint64_t v61;
  _BYTE v62[1216];
  void *v63;
  uint64_t v64;
  _BYTE v65[192];
  void *v66;
  uint64_t v67;
  _BYTE v68[16];
  void *v69;
  uint64_t v70;
  _QWORD v71[8];

  v71[5] = *MEMORY[0x24BDAC8D0];
  v60 = v62;
  v61 = 0x800000000;
  v63 = v65;
  v64 = 0x100000000;
  v66 = v68;
  v67 = 0x100000000;
  v69 = v71;
  v70 = 0x200000000;
  v71[4] = 0;
  v11 = a4[1];
  v59[0] = *a4;
  v59[1] = v11;
  v59[2] = a4[2];
  v12 = sub_22EFD7558(a2);
  v13 = sub_22F10ACF8(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0));
  sub_22E5E0440(a1, (uint64_t)v59, v13, v51);
  v14 = *(_QWORD *)&v51[0];
  v15 = sub_22EFD7558(a2);
  v51[0] = v14;
  LOBYTE(v52) = 0;
  WORD4(v57) = 0;
  v58 = v15;
  if (a5 && *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 216) + 148) <= 0xAu)
  {
    v16 = sub_22E3C187C((uint64_t)&v60, (unint64_t)v51, 1);
    v17 = (char *)v60 + 152 * v61;
    v19 = *(_OWORD *)(v16 + 112);
    v18 = *(_OWORD *)(v16 + 128);
    v20 = *(_OWORD *)(v16 + 96);
    *((_QWORD *)v17 + 18) = *(_QWORD *)(v16 + 144);
    *((_OWORD *)v17 + 7) = v19;
    *((_OWORD *)v17 + 8) = v18;
    *((_OWORD *)v17 + 6) = v20;
    v21 = *(_OWORD *)(v16 + 80);
    v23 = *(_OWORD *)(v16 + 32);
    v22 = *(_OWORD *)(v16 + 48);
    *((_OWORD *)v17 + 4) = *(_OWORD *)(v16 + 64);
    *((_OWORD *)v17 + 5) = v21;
    *((_OWORD *)v17 + 2) = v23;
    *((_OWORD *)v17 + 3) = v22;
    v24 = *(_OWORD *)(v16 + 16);
    *(_OWORD *)v17 = *(_OWORD *)v16;
    *((_OWORD *)v17 + 1) = v24;
    LODWORD(v61) = v61 + 1;
  }
  else if (*(_DWORD *)(a1 + 4296))
  {
    sub_22F2511E0((uint64_t)&v60, a1 + 4288);
    v40 = v60;
    v41 = v51[1];
    *(_OWORD *)v60 = v51[0];
    v40[1] = v41;
    v42 = v51[2];
    v43 = v52;
    v44 = v54;
    v40[4] = v53;
    v40[5] = v44;
    v40[2] = v42;
    v40[3] = v43;
    v45 = v55;
    v46 = v56;
    v47 = v57;
    *((_QWORD *)v40 + 18) = v58;
    v40[7] = v46;
    v40[8] = v47;
    v40[6] = v45;
  }
  else
  {
    v25 = sub_22E3C187C((uint64_t)&v60, (unint64_t)v51, 1);
    v26 = (char *)v60 + 152 * v61;
    v28 = *(_OWORD *)(v25 + 112);
    v27 = *(_OWORD *)(v25 + 128);
    v29 = *(_OWORD *)(v25 + 96);
    *((_QWORD *)v26 + 18) = *(_QWORD *)(v25 + 144);
    *((_OWORD *)v26 + 7) = v28;
    *((_OWORD *)v26 + 8) = v27;
    *((_OWORD *)v26 + 6) = v29;
    v30 = *(_OWORD *)(v25 + 80);
    v32 = *(_OWORD *)(v25 + 32);
    v31 = *(_OWORD *)(v25 + 48);
    *((_OWORD *)v26 + 4) = *(_OWORD *)(v25 + 64);
    *((_OWORD *)v26 + 5) = v30;
    *((_OWORD *)v26 + 2) = v32;
    *((_OWORD *)v26 + 3) = v31;
    v33 = *(_OWORD *)(v25 + 16);
    *(_OWORD *)v26 = *(_OWORD *)v25;
    *((_OWORD *)v26 + 1) = v33;
    LODWORD(v61) = v61 + 1;
    v34 = *(_QWORD *)(a1 + 1600);
    v35 = *(_QWORD **)(v34 + 120);
    v36 = *(_QWORD *)(*(_QWORD *)(v34 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (v36 && *(_BYTE *)(v36 + 16) == 26
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v36 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
      && (v36 = sub_22F10CF48(v36)) != 0)
    {
      v37 = *(_QWORD *)(v36 + 16);
      if ((v37 & 0x3FFFC000000000) != 0)
      {
        v38 = 8 * (unsigned __int16)(v37 >> 38);
        do
        {
          *(_QWORD *)&v59[0] = *v35;
          sub_22E477344(a1, &v60, *(_QWORD *)&v59[0], *(unsigned int *)(a6 + 24));
          if (sub_22E484F44(*(uint64_t *)&v59[0]))
          {
            v39 = sub_22F252AD0((_DWORD *)(a1 + 2952), v59);
            sub_22E477344(a1, &v60, v39[1], *(unsigned int *)(a6 + 24));
          }
          ++v35;
          v38 -= 8;
        }
        while (v38);
      }
    }
  }
  v48 = a4[1];
  v50[0] = *a4;
  v50[1] = v48;
  v50[2] = a4[2];
  sub_22E484118(a1, a2, 1, a3, 0, v50, &v60, 1, *(_DWORD *)(a6 + 24), 0, 1);
  if (v69 != v71)
    free(v69);
  if (v66 != v68)
    free(v66);
  if (v63 != v65)
    free(v63);
  if (v60 != v62)
    free(v60);
}

BOOL sub_22E484F44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 83)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t *sub_22E484FA4(_QWORD *a1, uint64_t a2, llvm::Type *a3, unint64_t a4, int a5)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD v31[3];
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  __int16 v37;
  _DWORD v38[4];
  char v39;
  _OWORD v40[2];
  uint64_t v41;
  _OWORD v42[3];
  _BYTE v43[40];
  __int128 v44[3];
  _OWORD v45[2];
  __int128 v46;

  if ((**(_BYTE **)(a1[18] + 184) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 3) != 0)
      sub_22F28ABCC(a2, a1);
    v10 = *(unsigned __int8 *)(llvm::Value::stripInBoundsOffsets() + 16);
    if (v10 != 3 && v10 != 59)
    {
      if ((*(_BYTE *)(a2 + 24) & 3) != 0)
        v11 = sub_22F28ABCC(a2, a1);
      else
        v11 = *(_QWORD *)a2;
      v12 = a1[11];
      LOWORD(v46) = 257;
      v13 = sub_22E3C1740(a1 + 34, 47, v11, v12, (uint64_t)v45);
      v14 = llvm::ConstantInt::get();
      LOWORD(v46) = 257;
      v15 = sub_22E3E58D4((uint64_t)(a1 + 34), v13, v14, (uint64_t)v45);
      llvm::PointerType::get();
      v16 = llvm::PointerType::get();
      LOWORD(v46) = 257;
      *(_QWORD *)a2 = sub_22E3C1740(a1 + 34, 48, v15, v16, (uint64_t)v45);
      *(_QWORD *)(a2 + 8) = a3;
      *(_DWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
    }
  }
  v17 = *(_OWORD *)(a2 + 16);
  v44[0] = *(_OWORD *)a2;
  v44[1] = v17;
  v44[2] = *(_OWORD *)(a2 + 32);
  *(_WORD *)&v43[32] = 257;
  sub_22E3BEE6C(a1 + 34, v44, (uint64_t)a3, (uint64_t)v43, (uint64_t)v45);
  v42[0] = v45[0];
  v42[1] = v45[1];
  v42[2] = v46;
  v18 = (uint64_t *)sub_22E3C43AC(a1 + 34, (uint64_t)v42, "vtable");
  v19 = a1[18];
  if (*(_QWORD *)(v19 + 264))
  {
    sub_22F29E8E8(*(_QWORD *)(v19 + 264), a3, (uint64_t)v43);
    v19 = a1[18];
  }
  else
  {
    *(_DWORD *)v43 = 0;
    memset(&v43[8], 0, 32);
  }
  v40[0] = *(_OWORD *)v43;
  v40[1] = *(_OWORD *)&v43[16];
  v41 = *(_QWORD *)&v43[32];
  sub_22E6282B8(v19, (uint64_t)v18, (uint64_t)v40);
  v20 = a1[18];
  if ((*(_BYTE *)(a2 + 24) & 3) != 0)
    v21 = sub_22F28ABCC(a2, a1);
  else
    v21 = *(_QWORD *)a2;
  sub_22F28A490(v20, (uint64_t)a1, a4, v21, (uint64_t)v38);
  if (v39)
  {
    if (a5 == 2)
    {
      v35 = 1;
      v36 = 0;
      v18 = (uint64_t *)sub_22E622648((uint64_t)a1, &v35, v18);
    }
    else
    {
      v18 = (uint64_t *)sub_22E622648((uint64_t)a1, v38, v18);
      if (a5 == 1)
      {
        v22 = a1[12];
        v37 = 257;
        v23 = sub_22E3C1740(a1 + 34, 49, (uint64_t)v18, v22, (uint64_t)&v35);
        v18 = (uint64_t *)v23;
        v24 = a1[1];
        if (*(_BYTE *)(a1[18] + 130))
        {
          v25 = v23 & 0xFFFFFFFFFFFFFFF8;
          v24 = __clz(*(unsigned __int8 *)(a1[18] + 130)) ^ 0x3F | v24 & 0xFFFFFFFFFFFFFFF8;
        }
        else
        {
          v25 = v23;
        }
        v26 = 0;
        v27 = v25 & 0xFFFFFFFFFFFFFFF8;
        if (v25 <= 7)
          v27 = 0;
        v28 = v24 & 0xFFFFFFFFFFFFFFF8;
        if (v25 <= 7)
          v28 = 0;
        v31[0] = v27;
        v31[1] = v28;
        if (v25 >= 8)
          v26 = 1 << (v24 & 7 | (8 * (v25 & 7)));
        v31[2] = v26;
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v37 = 257;
        sub_22E485864(a1 + 34, (uint64_t)v31, 1, (uint64_t)&v35);
      }
    }
  }
  v29 = *(_QWORD *)(*(_QWORD *)(a1[18] + 184) + 32);
  if ((v29 & 0x1800) != 0 && (v29 & 0x400000000000000) != 0)
    sub_22F2995DC();
  return v18;
}

uint64_t sub_22E48532C(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  llvm::Type *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;
  _OWORD v22[3];
  _BYTE v23[32];
  __int16 v24;
  __int128 v25[3];
  _OWORD v26[3];
  _BYTE v27[48];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _QWORD v31[6];
  _OWORD v32[2];
  uint64_t v33;

  v4 = a2 + 1;
  result = (*(uint64_t (**)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1[18] + 224)
                                                                                       + 512))(*(_QWORD *)(a1[18] + 224), a1, a2[4], *a2, a2[1], a2[2]);
  if (result)
  {
    v6 = result;
    v7 = *(_QWORD *)(a1[18] + 224);
    v8 = *((_OWORD *)a2 + 1);
    v32[0] = *(_OWORD *)a2;
    v32[1] = v8;
    v33 = a2[4];
    if ((*(unsigned int (**)(uint64_t, _QWORD *, _OWORD *))(*(_QWORD *)v7 + 488))(v7, a1, v32))
    {
      v9 = *(_QWORD *)(a1[18] + 224);
      sub_22F24FFF8(a1, v31);
      v10 = (uint64_t *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)v9 + 344))(v9, a1, v31, a2[4], a2[2]);
      v4 = a2 + 3;
    }
    else
    {
      v10 = 0;
    }
    v11 = *v4;
    sub_22F24FFF8(a1, &v28);
    if (v11 || v10)
    {
      v26[0] = v28;
      v26[1] = v29;
      v26[2] = v30;
      sub_22E48094C((uint64_t)v27, (uint64_t)a1, (uint64_t)v26, v11, v10, a2[4], a2[2]);
      v28 = *(_OWORD *)v27;
      v29 = *(_OWORD *)&v27[16];
      v30 = *(_OWORD *)&v27[32];
    }
    llvm::Module::getDataLayout(*(llvm::Module **)(a1[18] + 200));
    llvm::Module::getDataLayout(*(llvm::Module **)(a1[18] + 200));
    llvm::FunctionType::get();
    llvm::PointerType::get();
    v12 = (llvm::Type *)llvm::PointerType::get();
    v25[0] = v28;
    v25[1] = v29;
    v25[2] = v30;
    v24 = 257;
    sub_22E3BEE6C(a1 + 34, v25, (uint64_t)v12, (uint64_t)v23, (uint64_t)v27);
    v28 = *(_OWORD *)v27;
    v29 = *(_OWORD *)&v27[16];
    v30 = *(_OWORD *)&v27[32];
    *(_WORD *)&v27[32] = 257;
    v13 = sub_22E3C1740(a1 + 34, 49, v6, (uint64_t)v12, (uint64_t)v27);
    v14 = a1[18];
    v15 = *a2;
    if ((BYTE8(v29) & 3) != 0)
      v16 = sub_22F28ABCC(&v28, a1);
    else
      v16 = v28;
    sub_22F28A490(v14, (uint64_t)a1, v15, v16, (uint64_t)v27);
    if (v27[16] && (v27[0] & 2) != 0)
      v13 = sub_22E62243C(a1, v27, v13, 249);
    v22[0] = v28;
    v22[1] = v29;
    v22[2] = v30;
    v17 = sub_22E3BEDDC(a1 + 34, v13, v22, 0);
    v18 = a1[18];
    if (*(_QWORD *)(v18 + 264))
    {
      sub_22F29E8E8(*(_QWORD *)(v18 + 264), v12, (uint64_t)v27);
      v18 = a1[18];
    }
    else
    {
      *(_DWORD *)v27 = 0;
      memset(&v27[8], 0, 32);
    }
    v20[0] = *(_OWORD *)v27;
    v20[1] = *(_OWORD *)&v27[16];
    v21 = *(_QWORD *)&v27[32];
    sub_22E6282B8(v18, v17, (uint64_t)v20);
    result = a1[18];
    v19 = *(_QWORD *)(*(_QWORD *)(result + 184) + 32);
    if ((v19 & 0x1800) != 0 && (v19 & 0x400000000000000) != 0)
      return sub_22F2995DC();
  }
  return result;
}

uint64_t sub_22E485620(uint64_t a1, unint64_t a2, uint64_t a3, const void *a4, uint64_t a5, char a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  const void *v29;
  char v30;
  uint64_t v31;
  BOOL v32;
  char *v33;
  _QWORD v37[5];

  if ((a6 & 1) == 0)
  {
    v37[0] = a2;
    v37[1] = a3;
    v37[2] = a4;
    v37[3] = a5;
    v37[4] = a7;
    v13 = *(_DWORD *)(a9 + 8);
    v14 = *(_QWORD *)a9;
    v15 = (char *)v37;
    if (v13 >= *(_DWORD *)(a9 + 12))
    {
      v32 = v14 + 40 * v13 > (unint64_t)v37;
      if (v14 <= (unint64_t)v37 && v32)
      {
        v33 = (char *)v37 - v14;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v14 = *(_QWORD *)a9;
        v15 = &v33[*(_QWORD *)a9];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v14 = *(_QWORD *)a9;
        v15 = (char *)v37;
      }
    }
    v16 = v14 + 40 * *(unsigned int *)(a9 + 8);
    v17 = *(_OWORD *)v15;
    v18 = *((_OWORD *)v15 + 1);
    *(_QWORD *)(v16 + 32) = *((_QWORD *)v15 + 4);
    *(_OWORD *)v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    ++*(_DWORD *)(a9 + 8);
  }
  result = sub_22E46A3A0(a2);
  if (result != v20)
  {
    v21 = result;
    v22 = v20;
    while (1)
    {
      v23 = *(_QWORD *)(**(_QWORD **)(v21 + 16) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v23 + 8) & 0xF) != 0)
        v23 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v21 + 16));
      v24 = (const void *)sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                  + 24));
      result = sub_22E463414((uint64_t)v24);
      if (!(_DWORD)result)
        goto LABEL_16;
      if ((*(_BYTE *)(v21 + 12) & 1) == 0)
        break;
      result = sub_22E3BA850(a8, v24);
      if (v30)
      {
        v31 = sub_22F0C975C(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), a7);
        v26 = sub_22F2500F4(v31, (uint64_t)v24);
        v27 = 0;
        v28 = 0;
        goto LABEL_11;
      }
LABEL_16:
      v21 += 24;
      if (v21 == v22)
        return result;
    }
    v25 = sub_22F0C975C(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), a2);
    v26 = sub_22E46A3EC(v25, (uint64_t)v24) + a3;
    v27 = sub_22E46A3EC(v25, (uint64_t)v24) + a5;
    v28 = v24 == (const void *)(*(_QWORD *)(*(_QWORD *)(v25 + 72) + 48) & 0xFFFFFFFFFFFFFFF8);
LABEL_11:
    if ((*(_BYTE *)(v21 + 12) & 1) != 0)
      v29 = v24;
    else
      v29 = a4;
    result = sub_22E485620(a1, v24, v26, v29, v27, v28, a7, a8, a9);
    goto LABEL_16;
  }
  return result;
}

uint64_t sub_22E485864(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::Type *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _OWORD v13[3];

  v8 = *(llvm::Type **)(a2 + 8);
  v9 = *(_OWORD *)(a2 + 16);
  v10 = *(_OWORD *)(a2 + 32);
  v13[0] = *(_OWORD *)a2;
  v13[1] = v9;
  v13[2] = v10;
  if ((BYTE8(v9) & 3) != 0)
    v11 = sub_22F28ABCC(v13, a1[17]);
  else
    v11 = *(_QWORD *)&v13[0];
  return sub_22E3C3200(a1, v8, v11, (63 - __clz(*(_QWORD *)(a2 + 16))) | 0x100u, a3, a4);
}

uint64_t sub_22E485904(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v1 = a1;
  while (!sub_22EFC3B90(v1))
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v1 + 104) + 96), *(_QWORD *)(v1 + 104));
    if (*(_DWORD *)(*(_QWORD *)(v1 + 128) + 20))
      break;
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v1 + 104) + 96), *(_QWORD *)(v1 + 104));
    if (*(_DWORD *)(*(_QWORD *)(v1 + 128) + 16) != 1)
      break;
    v3 = sub_22E488FF8(v1);
    if (v3 != v4)
    {
      v5 = v3;
      v6 = v4;
      do
      {
        v7 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v5 + 32))(v5);
        if (((*(_BYTE *)(v7 + 82) & 0xC) != 0 || sub_22EFD7260(v7))
          && (*(_DWORD *)(v5 + 28) & 0x27F) != 0x239)
        {
          return v1;
        }
        do
          v5 = *(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF8;
        while (v5 && (*(_DWORD *)(v5 + 28) & 0x7Eu) - 54 > 3);
      }
      while (v5 != v6);
    }
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v1 + 104) + 96), *(_QWORD *)(v1 + 104));
    v8 = *(_QWORD *)(*(_QWORD *)(v1 + 128) + 24);
    if ((v8 & 1) != 0)
      v8 = sub_22EFCF510(*(_QWORD *)(v1 + 128));
    v9 = **(_QWORD **)(v8 + 16);
    v10 = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(v10 + 8) & 0xF) != 0)
      v10 = (unint64_t)sub_22F10D2BC(v9);
    v11 = sub_22F10C2A4(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0));
    if (v11)
    {
      if ((*(_DWORD *)(v11 + 28) & 0x7Fu) - 35 >= 3)
        v1 = 0;
      else
        v1 = v11;
    }
    else
    {
      v1 = 0;
    }
  }
  return v1;
}

void sub_22E485A60(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  llvm::MDString *v12;
  uint64_t v13;
  uint64_t v14;
  llvm::Type **v15;
  uint64_t Declaration;
  uint64_t v17;
  llvm::Value *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  llvm::Value *v24;
  _QWORD v25[4];
  __int16 v26;
  void *__p;
  char v28;
  llvm::Type **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  llvm::Value *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(a1 + 144);
  if ((*(_BYTE *)(*(_QWORD *)(v10 + 184) + 35) & 0x80) != 0 || sub_22E610138(v10, a2))
  {
    if (a4 > 3)
      v11 = 0;
    else
      v11 = qword_22F455B30[a4];
    sub_22EFB9E74(a2, &__p);
    if ((sub_22F422AE0(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144) + 2008), v11, 0) & 1) == 0)
    {
      *(_BYTE *)(a1 + 1880) = 1;
      sub_22F298290((void **)a1);
      v12 = (llvm::MDString *)sub_22E6371C0(*(_QWORD *)(a1 + 144), *(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(a1 + 144) + 3552, "", 0);
      v13 = llvm::MetadataAsValue::get();
      v14 = *(_QWORD *)(a1 + 96);
      v26 = 257;
      v15 = (llvm::Type **)sub_22E3C1740((uint64_t *)(a1 + 272), 49, a3, v14, (uint64_t)v25);
      Declaration = llvm::Intrinsic::getDeclaration();
      if (Declaration)
        v17 = *(_QWORD *)(Declaration + 24);
      else
        v17 = 0;
      v31 = (uint64_t)v15;
      v32 = v13;
      v26 = 257;
      v18 = sub_22E462B78((uint64_t *)(a1 + 272), v17, Declaration, (uint64_t)&v31, 2, (uint64_t)v25, 0);
      v31 = llvm::ConstantInt::get();
      v32 = sub_22E4DE978(a1, a5);
      v33 = sub_22F25E758(a1, *(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
      v19 = sub_22E62A49C(*(_QWORD *)(a1 + 144), v12);
      v20 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 184);
      if ((*(_BYTE *)(v20 + 35) & 0x80) != 0 && v19)
      {
        sub_22F25FBF0((_QWORD *)a1, v11, 0, (uint64_t)v18, v19, (uint64_t)v15);
      }
      else if ((*(_QWORD *)(v20 + 1256) & v11) != 0)
      {
        sub_22E4EA298(a1, (uint64_t)v18, 2u, "", 0);
      }
      else
      {
        llvm::MDString::get();
        v21 = llvm::MetadataAsValue::get();
        v22 = llvm::Intrinsic::getDeclaration();
        if (v22)
          v23 = *(_QWORD *)(v22 + 24);
        else
          v23 = 0;
        v29 = v15;
        v30 = v21;
        v26 = 257;
        v24 = sub_22E462B78((uint64_t *)(a1 + 272), v23, v22, (uint64_t)&v29, 2, (uint64_t)v25, 0);
        v25[0] = v18;
        v25[1] = v11;
        v25[2] = 0;
        v29 = v15;
        v30 = (uint64_t)v24;
        sub_22E4DEC4C((_QWORD *)a1, (uint64_t)v25, 1, 2u, (uint64_t)&v31, 3, &v29, 2);
      }
      *(_BYTE *)(a1 + 1880) = 0;
    }
    if (v28 < 0)
      operator delete(__p);
  }
}

void sub_22E485DB4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5, int a6)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  llvm::Type *v14;
  llvm::Constant **v15;
  uint64_t NullValue;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD v26[3];
  _QWORD v27[4];
  __int16 v28;

  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 152) + 1) & 1) != 0)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v6)
    {
      if (*(_BYTE *)(v6 + 16) == 45)
      {
        v12 = sub_22F114198(*(_QWORD *)(v6 + 24));
        if ((*(_BYTE *)(v12 + 74) & 1) != 0)
        {
          v13 = v12;
          if (sub_22E463414(v12))
          {
            if ((*(_BYTE *)(a1 + 1869) & 0x10) == 0)
              v13 = sub_22E485904(v13);
            if (a4)
            {
              if ((*(_BYTE *)(a3 + 24) & 3) != 0)
                v15 = (llvm::Constant **)sub_22F28ABCC(a3, a1);
              else
                v15 = *(llvm::Constant ***)a3;
              v27[0] = "cast.nonnull";
              v28 = 259;
              NullValue = llvm::Constant::getNullValue(*v15, v14);
              v25 = sub_22E3C18F4(a1 + 272, 33, (uint64_t *)v15, NullValue, (uint64_t)v27);
              v27[0] = "cast.check";
              v28 = 259;
              v17 = (_QWORD *)operator new();
              llvm::BasicBlock::BasicBlock();
              v27[0] = "cast.cont";
              v28 = 259;
              v18 = (_QWORD *)operator new();
              llvm::BasicBlock::BasicBlock();
              v19 = llvm::User::operator new((llvm::User *)0x40);
              MEMORY[0x23489C09C](v19, v17, v18, v25, 0);
              v28 = 257;
              sub_22E3C12C8((uint64_t *)(a1 + 272), v19, (uint64_t)v27);
              sub_22E5ED9B4((_QWORD *)a1, v17, 0);
            }
            else
            {
              v18 = 0;
            }
            v20 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 224);
            v21 = *(_OWORD *)(a3 + 16);
            v26[0] = *(_OWORD *)a3;
            v26[1] = v21;
            v26[2] = *(_OWORD *)(a3 + 32);
            v22 = (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)v20 + 728))(v20, a1, v26, v13);
            sub_22E485A60(a1, v23, v22, a5, a6);
            if (a4)
            {
              v24 = llvm::User::operator new((llvm::User *)0x40);
              llvm::BranchInst::BranchInst();
              v28 = 257;
              sub_22E3C12C8((uint64_t *)(a1 + 272), v24, (uint64_t)v27);
              sub_22E5ED9B4((_QWORD *)a1, v18, 0);
            }
          }
        }
      }
    }
  }
}

uint64_t sub_22E486044(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  void *__p;
  char v9;

  v3 = *(_QWORD *)(a1 + 144);
  if ((*(_WORD *)(*(_QWORD *)(v3 + 184) + 64) & 0x200) == 0 || !sub_22E610138(v3, a2))
    return 0;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 184);
  if ((*(_WORD *)(v5 + 64) & 0x400) != 0)
    return 1;
  if ((*(_BYTE *)(a1 + 1870) & 4) == 0 || (*(_BYTE *)(v5 + 1262) & 4) == 0)
    return 0;
  sub_22EFB9E74(a2, &__p);
  v6 = sub_22F422AE0(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144) + 2008), 0x4000000000000, 0) ^ 1;
  if (v9 < 0)
    operator delete(__p);
  return v6;
}

uint64_t sub_22E48612C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Declaration;
  uint64_t v11;
  uint64_t v12;
  llvm::Value *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v19;
  void *__p;
  char v21;
  uint64_t v22;
  __int128 v23;
  __int16 v24;
  _QWORD v25[4];
  __int16 v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(a1 + 1880) = 1;
  sub_22F298290((void **)a1);
  sub_22E6371C0(*(_QWORD *)(a1 + 144), *(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(a1 + 144) + 3552, "", 0);
  v7 = llvm::MetadataAsValue::get();
  v8 = *(_QWORD *)(a1 + 96);
  v24 = 257;
  v9 = sub_22E3C1740((uint64_t *)(a1 + 272), 49, a3, v8, (uint64_t)&v22);
  Declaration = llvm::Intrinsic::getDeclaration();
  v11 = Declaration;
  if (Declaration)
    v12 = *(_QWORD *)(Declaration + 24);
  else
    v12 = 0;
  v25[0] = v9;
  v25[1] = llvm::ConstantInt::get();
  v25[2] = v7;
  v24 = 257;
  v13 = sub_22E462B78((uint64_t *)(a1 + 272), v12, v11, (uint64_t)v25, 3, (uint64_t)&v22, 0);
  LODWORD(v25[0]) = 1;
  v24 = 257;
  v14 = sub_22E3C2EA8(a1 + 272, (uint64_t)v13, (uint64_t)v25, 1, (uint64_t)&v22);
  sub_22EFB9E74(a2, &__p);
  if ((*(_BYTE *)(a1 + 1870) & 4) != 0
    && (sub_22F422AE0(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144) + 2008), 0x4000000000000, 0) & 1) == 0)
  {
    v22 = v14;
    v23 = xmmword_22F455B20;
    sub_22E4DEC4C((_QWORD *)a1, (uint64_t)&v22, 1, 2u, 0, 0, 0, 0);
  }
  v19 = 0;
  v24 = 257;
  v15 = sub_22E3C2EA8(a1 + 272, (uint64_t)v13, (uint64_t)&v19, 1, (uint64_t)&v22);
  v26 = 257;
  v16 = sub_22E3C1740((uint64_t *)(a1 + 272), 49, v15, a4, (uint64_t)v25);
  if (v21 < 0)
    operator delete(__p);
  *(_BYTE *)(a1 + 1880) = 0;
  return v16;
}

_QWORD *sub_22E4863A0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  BOOL v22;
  int v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  _OWORD v31[3];
  uint64_t v32;
  _OWORD v33[3];
  uint64_t v34;
  _QWORD v35[4];
  int v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  char v42;

  v4 = (unint64_t)a2;
  v6 = sub_22E46C3D4((_QWORD **)(*(_QWORD *)(a1 + 144) + 280), a2);
  v7 = *(_QWORD *)(a1 + 144);
  if (sub_22E462B18(v4))
    v8 = v4 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(v4) + 96) & 0x80) == 0);
  else
    v8 = v4;
  v9 = sub_22E46F2EC(*(_QWORD *)(a1 + 144) + 280, v6);
  v10 = sub_22E6336F0(v7, v8, 0, v9, 0, 0, 0);
  v11 = *(_QWORD *)(*(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v11)
    v12 = *(_BYTE *)(v11 + 16) == 26;
  else
    v12 = 0;
  if (!v12)
    v11 = sub_22F10CF48(v11);
  v13 = *(_QWORD *)(v11 + 24);
  v14 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v15)
    v16 = (*(_DWORD *)(v15 + 16) & 0xFF800FF) == 86507531;
  else
    v16 = 0;
  if (!v16 && *(_BYTE *)(v6 + 72) == 2 && sub_22E619D68(*(_QWORD *)(v6 + 40)))
  {
    v17 = *(_QWORD *)(a1 + 1752);
    if ((v13 & 4) != 0)
      LOBYTE(v18) = 1;
    else
      v18 = (*(unsigned __int8 *)((v13 & 0xFFFFFFFFFFFFFFF0) + 8) >> 2) & 1;
    v27 = *(_QWORD *)(a1 + 1760);
    v28 = *(_OWORD *)(a1 + 1736);
    v19 = v18 | 4;
    v20 = *(_OWORD *)(a1 + 1768);
  }
  else
  {
    v17 = 0;
    v19 = 0;
    v20 = 0uLL;
    v27 = 0;
    v28 = 0u;
  }
  v26 = v20;
  if (sub_22E462B18(v4))
    v4 = v4 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(v4) + 96) & 0x80) == 0);
  v35[0] = v10;
  v35[1] = 0;
  v35[2] = v4;
  v35[3] = 0;
  v36 = 0;
  v37 = 0;
  v38 = v28;
  v39 = v17;
  v40 = v27;
  v41 = v26;
  v42 = v19;
  sub_22E47A004(v33, a1, v6, v35, &v38, a3, 0, 0, 0, 0);
  v21 = *(_QWORD *)(*(_QWORD *)(*v14 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v21)
    v22 = *(_DWORD *)(v21 + 16) == 11;
  else
    v22 = 0;
  if (v22)
  {
    if ((*(_DWORD *)(v21 + 16) & 0xFF80000) == 0x5280000 || (_QWORD)v28 != 0)
      goto LABEL_25;
  }
  else if ((_QWORD)v28)
  {
LABEL_25:
    v29 = *(_OWORD *)(a1 + 1712);
    v30 = *(_QWORD *)(a1 + 1728);
    return sub_22E48BA00((_QWORD *)a1, (uint64_t)&v29);
  }
  if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 152) + 148) & 2) != 0)
  {
    v25 = *(_DWORD *)(v21 + 16);
    if (v25 == 10 || v25 == 32 || sub_22F115064(*v14))
    {
      v33[0] = (unint64_t)sub_22E563DDC(*(llvm::Instruction **)&v33[0], 1, (_QWORD *)a1);
      LOBYTE(v34) = 0;
    }
  }
  v31[0] = v33[0];
  v31[1] = v33[1];
  v31[2] = v33[2];
  v32 = v34;
  return sub_22E5EDC68(a1, (uint64_t)v31, v13);
}

void sub_22E486680(_QWORD *a1, unint64_t a2, __int128 *a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD **v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 v14;
  __n128 v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  double v21;
  llvm::LLVMContext *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  llvm::LLVMContext *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  _BYTE v56[41];
  _QWORD v57[6];
  char v58;
  _OWORD v59[3];
  _BYTE v60[48];
  _OWORD v61[2];
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66[2];
  uint64_t v67;
  __int128 v68[2];
  __int128 v69;

  v8 = sub_22EF5C728(*(_QWORD *)(a1[18] + 144), a2);
  if (v8)
  {
    v9 = v8;
    if (*(_BYTE *)(v8 + 16) == 2)
    {
      v10 = 0;
      v11 = (_QWORD **)(v8 + 40);
      while (1)
      {
        v12 = (_QWORD *)(v9 + 40);
        if (*(_DWORD *)(v9 + 48) >= 0x41u)
          v12 = *v11;
        if (v10 == *v12)
          break;
        v13 = *(_QWORD *)(v9 + 32);
        v14 = a3[1];
        v59[0] = *a3;
        v59[1] = v14;
        v59[2] = a3[2];
        LOWORD(v69) = 257;
        v15 = sub_22E486A58(a1 + 34, (uint64_t)v59, v10, (uint64_t)v68, (uint64_t)v60);
        sub_22E486680(a1, v13, v60, a4, v15);
        ++v10;
      }
      return;
    }
  }
  v16 = sub_22F10C2A4(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
  if (v16 && (*(_DWORD *)(v16 + 28) & 0x7Fu) - 35 >= 3)
    v16 = 0;
  v17 = sub_22EFC3B90(v16);
  v18 = (*(uint64_t (**)(_QWORD, _QWORD *, unint64_t))(**(_QWORD **)(a1[18] + 800) + 136))(*(_QWORD *)(a1[18] + 800), a1, a2);
  v57[0] = v18;
  v57[1] = 0;
  v58 = 0;
  v19 = a3[1];
  v63 = *a3;
  v64 = v19;
  v65 = a3[2];
  sub_22E6281E0((_QWORD *)a1[18], a2, (uint64_t)v61);
  v68[0] = v63;
  v68[1] = v64;
  v69 = v65;
  v20 = *(_QWORD *)(a1[18] + 144);
  v66[0] = v61[0];
  v66[1] = v61[1];
  v67 = v62;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v45 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v53 = 2;
  v44 = 0;
  v55 = 0u;
  v54 = 0u;
  sub_22E3C113C((uint64_t)&v44, v68, a2, 2, v66, v20);
  v21 = sub_22E4DD05C((uint64_t)a1, (uint64_t)&v44, v17, (uint64_t)v56);
  sub_22E4DAAE0(a1, v57, v56, 1, v21);
  v23 = a1[729];
  if (!(_DWORD)a4)
  {
    if (v23)
    {
      v38 = sub_22E4648A4((uint64_t)a1, v18);
      v39 = (_QWORD *)sub_22E4899EC(a1 + 248, 3, 24);
      *v39 = off_24FA63550;
      v39[1] = a2;
      v39[2] = v38;
      v41 = sub_22E489C10((uint64_t)a1, v40);
      sub_22F2531F0((uint64_t)a1, v41, v42);
    }
    else
    {
      v33 = (_QWORD *)sub_22E4899EC(a1 + 248, 3, 24);
      *v33 = off_24FA63528;
      v33[1] = a2;
      v33[2] = v18;
    }
    return;
  }
  if (!v23)
  {
    v34 = a1[289];
    v35 = v34 + 32;
    if (v34 <= 0xFFFFFFFFFFFFFFDFLL)
    {
      if (a1[290] >= v35)
      {
        v36 = a1[289];
        goto LABEL_24;
      }
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v36 = a1[289];
      if (v36 != v35)
LABEL_24:
        bzero((void *)(a1[288] + v36), v35 - v36);
    }
    a1[289] = v35;
    v37 = (_QWORD *)(a1[288] + v34);
    *v37 = 0x300000018;
    v37[1] = off_24FA63528;
    v37[2] = a2;
    v37[3] = v18;
    return;
  }
  v24 = sub_22E489C10((uint64_t)a1, v22);
  v26 = v25;
  v27 = sub_22E4648A4((uint64_t)a1, v18);
  if (v24 <= 7)
    v28 = 3;
  else
    v28 = -2147483645;
  v29 = a1 + 288;
  v30 = a1[289];
  v31 = v30 + 16 * (v24 > 7) + 32;
  if (v30 != v31)
  {
    if (v30 <= v31)
    {
      if (a1[290] < v31)
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v43 = a1[289];
      if (v31 != v43)
        bzero((void *)(*v29 + v43), v31 - v43);
    }
    a1[289] = v31;
  }
  v32 = *v29 + v30;
  *(_DWORD *)v32 = 24;
  *(_DWORD *)(v32 + 4) = v28;
  *(_QWORD *)(v32 + 8) = off_24FA63550;
  *(_QWORD *)(v32 + 16) = a2;
  *(_QWORD *)(v32 + 24) = v27;
  if (v24 >= 8)
  {
    *(_QWORD *)(v32 + 32) = v24;
    *(_QWORD *)(v32 + 40) = v26;
  }
}

__n128 sub_22E486A58@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  llvm::DataLayout *DataLayout;
  llvm::Type *v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  BOOL v16;
  unint64_t ABITypeAlignment;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  llvm::GetElementPtrInst *v22;
  __n128 result;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(a2 + 8);
  DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a1[6] + 56) + 40));
  v12 = *(llvm::Type **)(v10 + 24);
  sub_22E3C304C((uint64_t)DataLayout, (uint64_t)v12);
  v14 = (unint64_t)(v13 + 7) >> 3;
  v16 = v15 == 1;
  ABITypeAlignment = llvm::DataLayout::getABITypeAlignment(DataLayout, v12);
  v27 = (ABITypeAlignment + v14 - 1) / ABITypeAlignment * ABITypeAlignment;
  v28 = v16;
  v18 = llvm::TypeSize::operator unsigned long long();
  v19 = v18;
  if ((*(_BYTE *)(a2 + 24) & 3) != 0)
  {
    sub_22F28AAB4((_QWORD *)a2, v18 * a3, v10, (uint64_t)a1);
    v26 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a5 = *(_OWORD *)a2;
    *(_OWORD *)(a5 + 16) = v26;
    result = *(__n128 *)(a2 + 32);
    *(__n128 *)(a5 + 32) = result;
  }
  else
  {
    v21 = *(uint64_t **)a2;
    v20 = *(_QWORD *)(a2 + 8);
    v27 = llvm::ConstantInt::get();
    v28 = llvm::ConstantInt::get();
    v22 = sub_22E486CB4(a1, v20, v21, (uint64_t **)&v27, 2, a4);
    v24 = *(_QWORD *)(v10 + 24);
    v25 = *(_QWORD *)(a2 + 16) | (v19 * a3);
    *(_QWORD *)a5 = v22;
    *(_QWORD *)(a5 + 8) = v24;
    *(_QWORD *)(a5 + 16) = v25 & -v25;
    *(_DWORD *)(a5 + 24) = 0;
    *(_QWORD *)(a5 + 32) = 0;
    *(_QWORD *)(a5 + 40) = 0;
  }
  return result;
}

_QWORD *sub_22E486BE8(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 24 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F25204C(a1, (uint64_t)v4, (uint64_t)v4 + 24 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(24 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      do
      {
        *result = -4096;
        result += 3;
        v11 -= 24;
      }
      while (v11);
    }
  }
  return result;
}

llvm::GetElementPtrInst *sub_22E486CB4(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t **a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  llvm::GetElementPtrInst *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t **, uint64_t, uint64_t))(*(_QWORD *)a1[9] + 48))(a1[9], a2, a3, a4, a5, 1);
  if (v12)
    return (llvm::GetElementPtrInst *)v12;
  v13 = (llvm::GetElementPtrInst *)llvm::User::operator new((llvm::User *)0x50);
  sub_22E3C1528(a2, a3, a4, a5);
  llvm::Instruction::Instruction();
  *((_QWORD *)v13 + 8) = a2;
  *((_QWORD *)v13 + 9) = llvm::GetElementPtrInst::getIndexedType();
  llvm::GetElementPtrInst::init();
  llvm::GetElementPtrInst::setIsInBounds(v13);
  (*(void (**)(uint64_t, llvm::GetElementPtrInst *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v13, a6, a1[6], a1[7]);
  v14 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v14)
  {
    v16 = *a1;
    v17 = v16 + 16 * v14;
    do
    {
      llvm::Instruction::setMetadata();
      v16 += 16;
    }
    while (v16 != v17);
  }
  return v13;
}

const char *sub_22E486DFC(const char **a1, uint64_t a2)
{
  const char *v3;

  if (*((_BYTE *)a1 + 33) == 1)
  {
    v3 = 0;
    switch(*((_BYTE *)a1 + 32))
    {
      case 1:
        return v3;
      case 3:
        v3 = *a1;
        if (*a1)
          strlen(*a1);
        break;
      case 4:
        if ((*a1)[23] >= 0)
          v3 = *a1;
        else
          v3 = *(const char **)*a1;
        break;
      case 5:
        v3 = *a1;
        break;
      default:
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    llvm::Twine::toVector();
    return *(const char **)a2;
  }
  return v3;
}

uint64_t sub_22E486EB0(uint64_t a1, llvm::DataLayout *this, uint64_t a3, uint64_t a4, unsigned __int8 **a5, unsigned __int8 **a6, llvm::Type *a7, int a8, const void *a9, std::string::size_type a10, unsigned __int8 a11, unsigned __int8 a12)
{
  uint64_t IndexType;
  llvm::Type *v15;
  llvm::Constant *v16;
  unsigned int v17;
  uint64_t v18;
  std::string::size_type v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *VectorSplat;
  llvm::Type *TypeAtIndex;
  uint64_t v24;
  unint64_t v25;
  int v26;
  BOOL v27;
  unint64_t ABITypeAlignment;
  uint64_t v29;
  uint64_t UniqueInteger;
  unsigned int *v31;
  uint64_t v32;
  uint64_t Mul;
  uint64_t v34;
  uint64_t Name;
  unint64_t v36;
  std::string::size_type v37;
  const void *v38;
  std::string *p_dst;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  std::string *v43;
  std::string::size_type v44;
  uint64_t v45;
  std::string *v46;
  std::string *v47;
  std::string::size_type v48;
  std::string *v49;
  std::string *v50;
  std::string::size_type v51;
  llvm::Instruction *v52;
  llvm::Constant *v54;
  unint64_t v55;
  size_t __sz;
  unsigned int v57;
  unint64_t v58;
  std::string __dst;
  void *__p[2];
  std::string::size_type v63;
  _QWORD v64[4];
  __int16 v65;
  uint64_t v66;
  uint64_t v67;

  v66 = a3;
  v67 = a4;
  IndexType = llvm::DataLayout::getIndexType(this, a7);
  v16 = (llvm::Constant *)IndexType;
  v17 = *(_DWORD *)(IndexType + 8);
  if ((v17 & 0xFE) == 0x12)
    v17 = *(_DWORD *)(**(_QWORD **)(IndexType + 16) + 8);
  if (a5 == a6)
    return llvm::Constant::getNullValue(v16, v15);
  v18 = 0;
  v57 = a11 & ~a12;
  v19 = a10;
  v58 = 0xFFFFFFFFFFFFFFFFLL >> -(v17 >> 8);
  v20 = (a10 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((a10 | 7) != 0x17)
    v20 = a10 | 7;
  __sz = v20 + 1;
  v54 = (llvm::Constant *)IndexType;
  v55 = (v20 + 1) | 0x8000000000000000;
  do
  {
    v21 = v18;
    VectorSplat = *a5;
    TypeAtIndex = (llvm::Type *)(v67 & 0xFFFFFFFFFFFFFFF8);
    if ((v67 & 4) == 0 || !TypeAtIndex)
      TypeAtIndex = (llvm::Type *)llvm::StructType::getTypeAtIndex();
    sub_22E3C304C((uint64_t)this, (uint64_t)TypeAtIndex);
    v25 = (unint64_t)(v24 + 7) >> 3;
    v27 = v26 == 1;
    ABITypeAlignment = llvm::DataLayout::getABITypeAlignment(this, TypeAtIndex);
    v64[0] = (ABITypeAlignment + v25 - 1) / ABITypeAlignment * ABITypeAlignment;
    v64[1] = v27;
    v29 = llvm::TypeSize::operator unsigned long long() & v58;
    if (VectorSplat[16] <= 0x14u && VectorSplat)
    {
      if ((llvm::Constant::isZeroValue((llvm::Constant *)VectorSplat) & 1) != 0)
        goto LABEL_76;
      if ((v67 & 4) != 0 || (v67 & 0xFFFFFFFFFFFFFFF8) == 0)
      {
        if ((*((_DWORD *)v16 + 2) & 0xFE) == 0x12 && (*(_DWORD *)(*(_QWORD *)VectorSplat + 8) & 0xFE) != 0x12)
          llvm::ConstantVector::getSplat();
        llvm::ConstantInt::get();
        llvm::ConstantExpr::getIntegerCast();
        Mul = llvm::ConstantExpr::getMul();
      }
      else
      {
        UniqueInteger = llvm::Constant::getUniqueInteger((llvm::Constant *)VectorSplat);
        if (*(_DWORD *)(UniqueInteger + 8) >= 0x41u)
          v31 = *(unsigned int **)UniqueInteger;
        else
          v31 = (unsigned int *)UniqueInteger;
        v32 = *v31;
        if (!*(_QWORD *)(llvm::DataLayout::getStructLayout() + 8 * v32 + 16))
          goto LABEL_76;
        Mul = llvm::ConstantInt::get();
      }
      VectorSplat = (unsigned __int8 *)Mul;
      if (!v18)
        goto LABEL_35;
      goto LABEL_60;
    }
    if ((*((_DWORD *)v16 + 2) & 0xFE) == 0x12 && (*(_DWORD *)(*(_QWORD *)VectorSplat + 8) & 0xFE) != 0x12)
    {
      v65 = 257;
      VectorSplat = (unsigned __int8 *)llvm::IRBuilderBase::CreateVectorSplat();
    }
    if (*(llvm::Constant **)VectorSplat == v16)
    {
      v19 = a10;
      goto LABEL_46;
    }
    v34 = a1;
    Name = llvm::Value::getName((llvm::Value *)VectorSplat);
    if (Name)
    {
      v37 = v36;
      if (v36 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_83;
      v38 = (const void *)Name;
      if (v36 >= 0x17)
      {
        v40 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v36 | 7) != 0x17)
          v40 = v36 | 7;
        v41 = v40 + 1;
        p_dst = (std::string *)operator new(v40 + 1);
        v42 = v41 | 0x8000000000000000;
        v16 = v54;
        __dst.__r_.__value_.__l.__size_ = v37;
        __dst.__r_.__value_.__r.__words[2] = v42;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v36;
        p_dst = &__dst;
        if (!v36)
          goto LABEL_41;
      }
      memmove(p_dst, v38, v37);
LABEL_41:
      a1 = v34;
      p_dst->__r_.__value_.__s.__data_[v37] = 0;
      goto LABEL_42;
    }
    memset(&__dst, 0, sizeof(__dst));
LABEL_42:
    v43 = std::string::append(&__dst, ".c");
    v44 = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v63 = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    v65 = 260;
    v64[0] = __p;
    VectorSplat = (unsigned __int8 *)sub_22E3BF45C((uint64_t *)a1, (uint64_t)VectorSplat, (uint64_t)v16, 1, (uint64_t)v64);
    v19 = a10;
    v18 = v21;
    if (SHIBYTE(v63) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_46:
    if (v29 == 1)
      goto LABEL_59;
    v45 = llvm::ConstantInt::get();
    if (a9)
    {
      if (v19 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_83;
      if (v19 >= 0x17)
      {
        v46 = (std::string *)operator new(__sz);
        __dst.__r_.__value_.__l.__size_ = v19;
        __dst.__r_.__value_.__r.__words[2] = v55;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v19;
        v46 = &__dst;
        if (!v19)
          goto LABEL_55;
      }
      memmove(v46, a9, v19);
LABEL_55:
      v46->__r_.__value_.__s.__data_[v19] = 0;
      goto LABEL_56;
    }
    memset(&__dst, 0, sizeof(__dst));
LABEL_56:
    v47 = std::string::append(&__dst, ".idx");
    v48 = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v63 = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    v65 = 260;
    v64[0] = __p;
    VectorSplat = (unsigned __int8 *)sub_22E3BDEA8(a1, (uint64_t)VectorSplat, v45, (uint64_t)v64, 0, v57);
    if (SHIBYTE(v63) < 0)
      operator delete(__p[0]);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_59:
      if (!v18)
        goto LABEL_35;
      goto LABEL_60;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (!v18)
    {
LABEL_35:
      v18 = (uint64_t)VectorSplat;
      goto LABEL_76;
    }
LABEL_60:
    if (a9)
    {
      if (v19 > 0x7FFFFFFFFFFFFFF7)
LABEL_83:
        abort();
      if (v19 >= 0x17)
      {
        v49 = (std::string *)operator new(__sz);
        __dst.__r_.__value_.__l.__size_ = v19;
        __dst.__r_.__value_.__r.__words[2] = v55;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v19;
        v49 = &__dst;
        if (!v19)
          goto LABEL_68;
      }
      memmove(v49, a9, v19);
LABEL_68:
      v49->__r_.__value_.__s.__data_[v19] = 0;
      goto LABEL_69;
    }
    memset(&__dst, 0, sizeof(__dst));
LABEL_69:
    v50 = std::string::append(&__dst, ".offs");
    v51 = v50->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v63 = v51;
    v50->__r_.__value_.__r.__words[0] = 0;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v65 = 260;
    v64[0] = __p;
    v52 = (llvm::Instruction *)(*(uint64_t (**)(_QWORD, uint64_t, unsigned __int8 *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), v18, VectorSplat, 0, v57);
    if (!v52)
      v52 = sub_22E3C122C((uint64_t *)a1, 13, v18, (uint64_t)VectorSplat, (uint64_t)v64, 0, v57);
    if (SHIBYTE(v63) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    v18 = (uint64_t)v52;
LABEL_76:
    ++a5;
    sub_22E4874E0(&v66);
  }
  while (a5 != a6);
  if (!v18)
    return llvm::Constant::getNullValue(v16, v15);
  return v18;
}

_QWORD *sub_22E4874E0(_QWORD *a1)
{
  uint64_t v2;
  unint64_t TypeAtIndex;
  int v4;
  BOOL v5;
  BOOL v6;
  unint64_t v7;

  v2 = a1[1];
  TypeAtIndex = v2 & 0xFFFFFFFFFFFFFFF8;
  if ((v2 & 4) == 0 || !TypeAtIndex)
    TypeAtIndex = llvm::StructType::getTypeAtIndex();
  v4 = *(unsigned __int8 *)(TypeAtIndex + 8);
  if (TypeAtIndex)
    v5 = v4 == 17;
  else
    v5 = 0;
  if (v5 || (TypeAtIndex ? (v6 = (v4 & 0xFE) == 18) : (v6 = 0), v6))
  {
    v7 = *(_QWORD *)(TypeAtIndex + 24) | 4;
  }
  else if (v4 == 16)
  {
    v7 = TypeAtIndex & 0xFFFFFFFFFFFFFFFBLL;
  }
  else
  {
    v7 = 0;
  }
  *a1 += 8;
  a1[1] = v7;
  return a1;
}

uint64_t sub_22E487560(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (*(_BYTE *)(result + 25))
  {
    v1 = *(_QWORD *)(result + 32);
    *(_BYTE *)(v1 + 2893) = *(_BYTE *)(result + 24);
    v2 = result;
    sub_22E48B274(v1, *(_QWORD *)result, *(_QWORD *)(result + 16), 0, 0);
    result = v2;
    *(_BYTE *)(v2 + 25) = 0;
    *(_QWORD *)(*(_QWORD *)(v2 + 32) + 2872) = *(_QWORD *)(v2 + 8);
  }
  return result;
}

void sub_22E4875C0(uint64_t a1, _DWORD *a2)
{
  int v2;

  v2 = *(unsigned __int8 *)a2;
  if (a2 && (v2 & 0xFE) == 0x70)
  {
    switch((*a2 >> 18) & 0x3F)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
        goto LABEL_7;
      default:
        goto LABEL_5;
    }
  }
  if (!a2 || v2 != 233)
LABEL_5:
    __asm { BR              X9 }
LABEL_7:
  sub_22E48774C(a1, (uint64_t)a2);
}

uint64_t sub_22E4876F0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t result;

  result = sub_22EFFA934(v0, *v1);
  if ((result & 1) == 0)
    JUMPOUT(0x22E4876B0);
  return result;
}

void sub_22E487704()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 8) = 1;
}

void sub_22E487710()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _DWORD **v3;
  uint64_t v4;

  v2 = *(unsigned __int16 *)(v0 + 4);
  if (*(_WORD *)(v0 + 4))
  {
    v3 = (_DWORD **)(v0 + 32);
    v4 = 8 * v2;
    do
    {
      if (*v3)
        sub_22E4875C0(v1, *v3);
      ++v3;
      v4 -= 8;
    }
    while (v4);
  }
}

void sub_22E48774C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  sub_22F0D492C(a2);
  v9 = v11;
  v3 = v13;
  v10 = v12;
  v4 = v14;
  v6 = *((_QWORD *)&v11 + 1);
  v5 = (uint64_t *)v11;
  if ((_QWORD)v11 != v13 || *((_QWORD *)&v11 + 1) != v14)
  {
    do
    {
      v8 = v5;
      if ((v6 & 3) != 0)
      {
        if ((v6 & 0xFFFFFFFFFFFFFFFCLL) != 0)
          v8 = (_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFCLL) + 40);
        else
          v8 = (_QWORD *)sub_22F3AC1A8(*v5);
      }
      if (*v8)
        sub_22E4875C0(a1);
      if ((v6 & 3) != 0)
      {
        if (v6 >= 4)
          sub_22F0D8720((uint64_t)&v9);
        else
          sub_22F3F2FE0((uint64_t)&v9, 1);
      }
      else
      {
        *(_QWORD *)&v9 = v5 + 1;
      }
      v6 = *((_QWORD *)&v9 + 1);
      v5 = (uint64_t *)v9;
    }
    while (v9 != __PAIR128__(v4, v3));
  }
}

uint64_t sub_22E487828(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v3;
  uint64_t v4;

  sub_22F0D492C(a1);
  v1 = (unint64_t)v3;
  if ((v4 & 3) != 0)
  {
    if ((v4 & 0xFFFFFFFFFFFFFFFCLL) != 0)
      v1 = (v4 & 0xFFFFFFFFFFFFFFFCLL) + 40;
    else
      v1 = sub_22F3AC1A8(*v3);
  }
  return *(_QWORD *)v1;
}

uint64_t sub_22E487874(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v18[3];
  _OWORD v19[3];
  _OWORD v20[3];

  v4 = a2[200];
  v5 = v4 + 72;
  v6 = *(_WORD *)(v4 + 80) & 0x7F;
  v7 = -40;
  if (v6 > 70)
  {
    if (v6 == 83)
      goto LABEL_17;
    if (v6 == 71)
    {
      v7 = -56;
      goto LABEL_17;
    }
    if (v6 != 81)
    {
LABEL_12:
      v8 = v6 - 52;
      v9 = (v6 - 33) >= 5;
      v10 = -48;
      if (!v9)
        v10 = -64;
      if (v8 >= 6)
        v7 = v10;
      else
        v7 = -72;
    }
  }
  else
  {
    if (v6 > 0x18)
      goto LABEL_11;
    if (v6 == 16)
    {
LABEL_4:
      v7 = -48;
      goto LABEL_17;
    }
    if (((1 << v6) & 0x1066) == 0)
    {
      if (v6 == 24)
        goto LABEL_4;
LABEL_11:
      if (v6 == 70)
      {
        v7 = -64;
        goto LABEL_17;
      }
      goto LABEL_12;
    }
  }
LABEL_17:
  v11 = *(_QWORD *)(v5 + v7 + 16);
  v12 = (_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF8);
  if ((v11 & 4) != 0)
    v12 = (_QWORD *)*v12;
  if (v12)
    v13 = (unint64_t)(v12 - 8);
  else
    v13 = 0;
  v14 = sub_22EFD10F8(*(_QWORD *)(a1 + 8));
  v15 = sub_22EFD7784(v14);
  sub_22F24FFF8(a2, v18);
  sub_22E4801BC(a2, v18, v13, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), v19);
  v16 = *(unsigned __int8 *)(a1 + 16);
  v20[0] = v19[0];
  v20[1] = v19[1];
  v20[2] = v19[2];
  return (*(uint64_t (**)(_QWORD, _QWORD *, unint64_t, uint64_t, uint64_t, _QWORD, _OWORD *, uint64_t))(**(_QWORD **)(a2[18] + 224) + 472))(*(_QWORD *)(a2[18] + 224), a2, v14, 2, v16, 0, v20, v15);
}

uint64_t sub_22E4879F0(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_22EFC2FDC(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 144));
  if ((result & 1) == 0)
  {
    if (*(_QWORD *)(a1 + 32))
    {
      *(_DWORD *)(a1 + 64) = sub_22EFC306C(a2);
      v5 = *(_QWORD *)(a1 + 24);
      result = sub_22EFC306C(a2);
      v6 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * result);
      if (v6 >= *(_QWORD *)(a1 + 48))
      {
        if (v6 >= *(_QWORD *)(a1 + 56))
        {
          *(_QWORD *)(a1 + 40) = a2;
          *(_QWORD *)(a1 + 56) = v6;
        }
      }
      else
      {
        *(_QWORD *)(a1 + 32) = a2;
        *(_QWORD *)(a1 + 48) = v6;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 32) = a2;
      *(_QWORD *)(a1 + 40) = a2;
      v7 = *(_QWORD *)(a1 + 24);
      v8 = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * sub_22EFC306C(a2));
      *(_QWORD *)(a1 + 48) = v8;
      *(_QWORD *)(a1 + 56) = v8;
      result = sub_22EFC306C(a2);
      *(_DWORD *)(a1 + 64) = result;
    }
  }
  return result;
}

_QWORD *sub_22E487AB0(_QWORD *result)
{
  _QWORD **v1;
  unsigned int v2;
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  _BYTE v25[64];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  _OWORD v31[3];
  _OWORD v32[2];
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37[2];
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;

  v1 = (_QWORD **)result;
  v48 = *MEMORY[0x24BDAC8D0];
  v2 = *((_DWORD *)result + 26);
  if (v2 <= 1)
  {
    if (!v2)
    {
LABEL_27:
      v1[4] = 0;
      return result;
    }
    v3 = (__int128 *)(*result + 1864);
    v39 = *v3;
    *(_QWORD *)v3 &= 0xFFFFFFFFFFF5FFFFLL;
    v4 = *result;
    v5 = (uint64_t)v1[9];
    v6 = *(_WORD *)(v5 + 80) & 0x7F;
    v7 = -40;
    if (v6 > 0x46)
    {
      if (v6 != 83)
      {
        if (v6 == 71)
        {
          v7 = -56;
          goto LABEL_21;
        }
        if (v6 == 81)
          goto LABEL_21;
        goto LABEL_16;
      }
    }
    else
    {
      if (v6 > 0x18)
        goto LABEL_15;
      if (v6 != 16)
      {
        if (((1 << v6) & 0x1066) != 0)
          goto LABEL_21;
        if (v6 != 24)
        {
LABEL_15:
          if (v6 == 70)
          {
            v7 = -64;
            goto LABEL_21;
          }
LABEL_16:
          v11 = v6 - 52;
          v12 = v6 - 33 >= 5;
          v13 = -48;
          if (!v12)
            v13 = -64;
          if (v11 >= 6)
            v7 = v13;
          else
            v7 = -72;
          goto LABEL_21;
        }
      }
      v7 = -48;
    }
LABEL_21:
    v14 = *(_QWORD *)(v5 + 72 + v7 + 16);
    v15 = (_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF8);
    if ((v14 & 4) != 0)
      v15 = (_QWORD *)*v15;
    if (v15)
      v16 = (unint64_t)(v15 - 8);
    else
      v16 = 0;
    result = sub_22E487DDC(v4, v16, (uint64_t *)*v1[12], v5, v1[11]);
    *((_DWORD *)v1 + 26) = 0;
    *v3 = v39;
    goto LABEL_27;
  }
  sub_22F24FFF8((_QWORD *)*result, v31);
  v8 = (unint64_t)v1[1];
  v9 = *(_QWORD *)(v8 + 48);
  if (v9)
    v10 = v9 & 0xFFFFFFFFFFFFFFF0;
  else
    v10 = sub_22EF6462C(*(_QWORD *)((*v1)[18] + 144), v8);
  v17 = (uint64_t)*v1;
  v34 = v31[0];
  v35 = v31[1];
  v36 = v31[2];
  sub_22E6281E0(*(_QWORD **)(v17 + 144), v10, (uint64_t)v32);
  *(_OWORD *)v25 = v34;
  *(_OWORD *)&v25[16] = v35;
  *(_OWORD *)&v25[32] = v36;
  v18 = *(_QWORD *)(*(_QWORD *)(v17 + 144) + 144);
  v37[0] = v32[0];
  v37[1] = v32[1];
  v38 = v33;
  v40 = 0uLL;
  LODWORD(v41) = 0;
  *((_QWORD *)&v39 + 1) = 0;
  *((_QWORD *)&v41 + 1) = 0;
  *(_QWORD *)&v42 = 0;
  v43 = 0uLL;
  *(_QWORD *)((char *)&v44 + 4) = 2;
  LODWORD(v39) = 0;
  v45 = 0u;
  v46 = 0u;
  sub_22E3C113C((uint64_t)&v39, (__int128 *)v25, v10, 2, v37, v18);
  if (*((_DWORD *)v1 + 26))
  {
    v19 = 0;
    do
    {
      v20 = (uint64_t *)v1[12][v19];
      v21 = *v20 & 0xFFFFFFFFFFFFFFF8;
      if ((*v20 & 6) != 2)
        v21 = *(_QWORD *)(*(_QWORD *)(v21 + 56) + 8 * *(unsigned int *)(v21 + 64) - 8);
      v22 = *(_QWORD *)(v21 + 48);
      v23 = sub_22F115260(v22);
      if (sub_22F245DD4((uint64_t)*v1, v23))
      {
        v28 = v45;
        v29 = v46;
        v30 = v47;
        *(_OWORD *)&v25[32] = v41;
        *(_OWORD *)&v25[48] = v42;
        v26 = v43;
        v27 = v44;
        *(_OWORD *)v25 = v39;
        *(_OWORD *)&v25[16] = v40;
        sub_22E488648(*v1, *v20, (uint64_t)v25);
        v24 = (uint64_t)*v1;
        v34 = *(_OWORD *)&v25[8];
        v35 = *(_OWORD *)&v25[24];
        v36 = *(_OWORD *)&v25[40];
        sub_22F259DCC(v24, v23, &v34, v22);
      }
      ++v19;
    }
    while (v19 < *((unsigned int *)v1 + 26));
  }
  result = sub_22E488228((uint64_t *)v1);
  *((_DWORD *)v1 + 26) = 0;
  return result;
}

_QWORD *sub_22E487DDC(uint64_t a1, unint64_t a2, uint64_t *a3, uint64_t a4, _QWORD *a5)
{
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _BOOL4 v30;
  int v31;
  _OWORD v33[8];
  uint64_t v34;
  __int128 v35[3];
  __int128 v36[8];
  uint64_t v37;
  __int128 v38[8];
  uint64_t v39;
  _OWORD v40[8];
  uint64_t v41;
  _OWORD v42[8];
  uint64_t v43;
  _OWORD v44[2];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  _OWORD v52[3];
  uint64_t v53;
  _BYTE v54[64];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60[4];

  v10 = sub_22EFD7AE4(a3);
  v60[0] = 0;
  v60[1] = a1;
  sub_22E48EE24(v60, v10, 0);
  v11 = *a3 & 0xFFFFFFFFFFFFFFF8;
  if ((*a3 & 6) != 2)
    v11 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * *(unsigned int *)(v11 + 64) - 8);
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
  v13 = *(_QWORD *)(v11 + 48);
  v14 = sub_22E46BB88(a4);
  v15 = sub_22EF5DD84(v12, v13, v14 >> 11);
  v16 = *(_QWORD *)(a1 + 4208);
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
  v18 = *(_QWORD *)(a2 + 48);
  if (v18)
    v19 = v18 & 0xFFFFFFFFFFFFFFF0;
  else
    v19 = sub_22EF6462C(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), a2);
  v20 = sub_22E46BB88(a4);
  v21 = sub_22EF5DD84(v17, v19, v20 >> 11);
  memset(&v54[8], 0, 28);
  *(_QWORD *)&v54[40] = 0;
  *(_QWORD *)&v54[48] = 0;
  v55 = 0uLL;
  *(_QWORD *)((char *)&v56 + 4) = 2;
  v57 = 0u;
  v58 = 0u;
  sub_22E619C24(v16, v21, (*(_QWORD *)(a1 + 1688) & 7) == 1, 1, a1, (uint64_t)v54);
  sub_22E488648((_QWORD *)a1, *a3, (uint64_t)v54);
  v22 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), v15);
  if (v22
    && (v23 = v22, *(_BYTE *)(v22 + 16) == 2)
    && (*(_BYTE *)(a4 + 83) & 2) != 0
    && (LODWORD(v44[0]) = 0, sub_22EFD8088(a4, (int *)v44))
    && ((v53 = sub_22EF5BA38(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), *(_QWORD *)(v23 + 32)),
         (*(_BYTE *)a3[1] & 0xFE) != 0x76)
      ? (v24 = 0)
      : (v24 = a3[1]),
        (sub_22F111438(&v53, *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144)) & 1) != 0
     || v24 && sub_22E483EF8(*(_QWORD *)(v24 + 16))))
  {
    *(_QWORD *)&v42[0] = *(_QWORD *)(*a5
                                   + 8
                                   * (*(unsigned int (**)(_QWORD, uint64_t, _QWORD *))(**(_QWORD **)(*(_QWORD *)(a1 + 144) + 224)
                                                                                               + 600))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 224), a4, a5));
    *(_QWORD *)&v44[0] = 0;
    v25 = sub_22E3CED3C((uint64_t *)(a1 + 2904), v42, v44);
    v26 = *(_QWORD *)&v44[0];
    if (!v25)
      v26 = *(_QWORD *)(a1 + 2904) + 56 * *(unsigned int *)(a1 + 2920);
    v27 = *(_OWORD *)(v26 + 8);
    v28 = *(_OWORD *)(v26 + 40);
    v52[1] = *(_OWORD *)(v26 + 24);
    v52[2] = v28;
    v52[0] = v27;
    LOWORD(v45) = 257;
    v29 = sub_22E3C2A7C((uint64_t *)(a1 + 272), (uint64_t)v52, (uint64_t)v44);
    sub_22E619C24(v29, v21, 0, 1, a1, (uint64_t)v44);
    v40[6] = v49;
    v40[7] = v50;
    v41 = v51;
    v40[2] = v45;
    v40[3] = v46;
    v40[4] = v47;
    v40[5] = v48;
    v40[0] = v44[0];
    v40[1] = v44[1];
    sub_22E4EC638((_QWORD *)a1, (uint64_t)v40, v11, (uint64_t)v42);
    v38[6] = v57;
    v38[7] = v58;
    v39 = v59;
    v38[2] = *(_OWORD *)&v54[32];
    v38[3] = *(_OWORD *)&v54[48];
    v38[4] = v55;
    v38[5] = v56;
    v38[0] = *(_OWORD *)v54;
    v38[1] = *(_OWORD *)&v54[16];
    v36[6] = v42[6];
    v36[7] = v42[7];
    v37 = v43;
    v36[2] = v42[2];
    v36[3] = v42[3];
    v36[4] = v42[4];
    v36[5] = v42[5];
    v36[0] = v42[0];
    v36[1] = v42[1];
    v30 = sub_22E4EF360(a1, v11);
    sub_22E4EF4B8((_QWORD *)a1, v38, v36, v15, v30, (DWORD2(v55) >> 2) & 1);
    v31 = sub_22F115260(v15);
    if (sub_22F245DD4(a1, v31))
    {
      v35[0] = *(_OWORD *)&v54[8];
      v35[1] = *(_OWORD *)&v54[24];
      v35[2] = *(_OWORD *)&v54[40];
      sub_22F259DCC(a1, v31, v35, v15);
    }
  }
  else
  {
    v33[6] = v57;
    v33[7] = v58;
    v34 = v59;
    v33[2] = *(_OWORD *)&v54[32];
    v33[3] = *(_OWORD *)&v54[48];
    v33[4] = v55;
    v33[5] = v56;
    v33[0] = *(_OWORD *)v54;
    v33[1] = *(_OWORD *)&v54[16];
    sub_22F2503EC(a1, v11, (uint64_t)v33, a3[1]);
  }
  return sub_22E48F084(v60);
}

BOOL sub_22E4881BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((a2 & 0xC000000000) != 0)
    return 0;
  v4 = *(_QWORD *)(a3 + 48);
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v5 & 8) != 0)
  {
    if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x1C4 | (v5 | v4) & 4)
      return 0;
    v6 = HIDWORD(*(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF0) + 0x18));
  }
  else
  {
    LOBYTE(v6) = 0;
    result = 0;
    if (((v5 | v4) & 4) != 0)
      return result;
  }
  return (v6 & 2) == 0 || (v6 & 0xC) == 0;
}

uint64_t *sub_22E488228(uint64_t *result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _OWORD v41[8];
  uint64_t v42;
  _BYTE v43[40];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  _OWORD v54[3];
  _OWORD v55[8];
  uint64_t v56;
  _BYTE v57[112];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  _OWORD v67[3];
  _OWORD v68[3];
  _OWORD v69[2];
  __int128 v70;
  __int128 v71[2];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;

  v1 = result[4];
  if (v1)
  {
    v2 = result;
    if ((*(_BYTE *)(v1 + 68) & 1) != 0)
    {
      v3 = *(_QWORD *)(*result + 144) + 280;
      v4 = *(_QWORD *)(v1 + 16);
      v5 = v4 & 0xFFFFFFFFFFFFFFF8;
      if ((v4 & 4) != 0)
        v5 = *(_QWORD *)v5;
      v6 = (*(_WORD *)(v5 + 8) & 0x7E) - 34;
      if (v5)
        v7 = v5 - 64;
      else
        v7 = 0;
      if (v6 >= 4)
        v8 = 0;
      else
        v8 = v7;
      v9 = sub_22E66DD94(v3, v8);
      v10 = v2[4];
      if ((*(_BYTE *)(v10 + 29) & 0x80) != 0)
        v10 = sub_22EFB5D7C(v2[4]);
      sub_22E47ED6C(v9 + 40, v10);
      sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(*v2 + 144) + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v2 + 144) + 144) + 16408) & 0xFFFFFFFFFFFFFFF0));
    }
    v11 = *(_QWORD *)(*(_QWORD *)(*v2 + 144) + 144);
    v12 = v2[5];
    if ((*(_DWORD *)(v12 + 68) & 1) != 0)
    {
      sub_22EFC2EF4(v12, *(_QWORD *)(*(_QWORD *)(*v2 + 144) + 144));
    }
    else
    {
      sub_22EF5CC54(*(_QWORD *)(*(_QWORD *)(*v2 + 144) + 144), *(_QWORD *)(v12 + 48), &v58);
      sub_22EF5CDF0(v11, *(_QWORD *)(*(_QWORD *)(v11 + 16408) & 0xFFFFFFFFFFFFFFF0));
    }
    sub_22EF5CDF0(v11, *(_QWORD *)(*(_QWORD *)(v11 + 16408) & 0xFFFFFFFFFFFFFFF0));
    sub_22EF5CDF0(v11, *(_QWORD *)(*(_QWORD *)(v11 + 16408) & 0xFFFFFFFFFFFFFFF0));
    v13 = v2[1];
    v14 = *(_QWORD *)(v13 + 48);
    if (v14)
      v15 = v14 & 0xFFFFFFFFFFFFFFF0;
    else
      v15 = sub_22EF6462C(*(_QWORD *)(*(_QWORD *)(*v2 + 144) + 144), v13);
    sub_22F24FFF8((_QWORD *)*v2, v67);
    v16 = *v2;
    v45 = v67[0];
    v46 = v67[1];
    v47 = v67[2];
    sub_22E6281E0(*(_QWORD **)(v16 + 144), v15, (uint64_t)&v73);
    *(_OWORD *)v57 = v45;
    *(_OWORD *)&v57[16] = v46;
    *(_OWORD *)&v57[32] = v47;
    v17 = *(_QWORD *)(*(_QWORD *)(v16 + 144) + 144);
    *(_OWORD *)v43 = v73;
    *(_OWORD *)&v43[16] = v74;
    *(_QWORD *)&v43[32] = v75;
    LODWORD(v60) = 0;
    *((_QWORD *)&v58 + 1) = 0;
    v59 = 0uLL;
    *(_QWORD *)&v61 = 0;
    *((_QWORD *)&v60 + 1) = 0;
    v62 = 0uLL;
    *(_QWORD *)((char *)&v63 + 4) = 2;
    LODWORD(v58) = 0;
    v65 = 0u;
    v64 = 0u;
    sub_22E3C113C((uint64_t)&v58, (__int128 *)v57, v15, 2, (__int128 *)v43, v17);
    v18 = (_QWORD *)*v2;
    v55[6] = v64;
    v55[7] = v65;
    v56 = v66;
    v55[2] = v60;
    v55[3] = v61;
    v55[4] = v62;
    v55[5] = v63;
    v55[0] = v58;
    v55[1] = v59;
    sub_22E4EC638(v18, (uint64_t)v55, v2[4], (uint64_t)v57);
    v19 = *v2;
    v20 = (uint64_t *)(*v2 + 272);
    v21 = (uint64_t *)(*v2 + 2904);
    *(_QWORD *)v43 = v2[2];
    *(_QWORD *)&v45 = 0;
    v22 = sub_22E3CED3C(v21, v43, &v45);
    v23 = v45;
    if (!v22)
      v23 = *(_QWORD *)(v19 + 2904) + 56 * *(unsigned int *)(v19 + 2920);
    v24 = *(_OWORD *)(v23 + 8);
    v25 = *(_OWORD *)(v23 + 40);
    v54[1] = *(_OWORD *)(v23 + 24);
    v54[2] = v25;
    v54[0] = v24;
    LOWORD(v47) = 257;
    v26 = sub_22E3C2A7C(v20, (uint64_t)v54, (uint64_t)&v45);
    sub_22E619C24(v26, v15, 0, 1, *v2, (uint64_t)&v45);
    v27 = (_QWORD *)*v2;
    v41[6] = v51;
    v41[7] = v52;
    v42 = v53;
    v41[2] = v47;
    v41[3] = v48;
    v41[4] = v49;
    v41[5] = v50;
    v41[0] = v45;
    v41[1] = v46;
    sub_22E4EC638(v27, (uint64_t)v41, v2[4], (uint64_t)v43);
    v38 = *(_OWORD *)&v57[8];
    v39 = *(_OWORD *)&v57[24];
    v40 = *(_OWORD *)&v57[40];
    v35 = *(_OWORD *)&v43[8];
    v36 = *(_OWORD *)&v43[24];
    v37 = v44;
    v28 = *v2;
    v29 = (uint64_t *)(*v2 + 272);
    v73 = *(_OWORD *)&v57[8];
    v74 = *(_OWORD *)&v57[24];
    v75 = *(_OWORD *)&v57[40];
    v30 = *(_QWORD *)(v28 + 8);
    LOWORD(v72) = 257;
    sub_22E3BEE6C(v29, &v73, v30, (uint64_t)v71, (uint64_t)&v38);
    v31 = *v2;
    v32 = (uint64_t *)(*v2 + 272);
    v71[0] = v35;
    v71[1] = v36;
    v72 = v37;
    v33 = *(_QWORD *)(v31 + 8);
    LOWORD(v70) = 257;
    sub_22E3BEE6C(v32, v71, v33, (uint64_t)v69, (uint64_t)&v35);
    v34 = *v2 + 272;
    v69[0] = v38;
    v69[1] = v39;
    v70 = v40;
    v68[0] = v35;
    v68[1] = v36;
    v68[2] = v37;
    result = (uint64_t *)sub_22F245B80(v34, (llvm::LLVMContext *)v69, v68);
    v2[4] = 0;
  }
  return result;
}

__n128 sub_22E488648(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __n128 result;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _OWORD v25[8];
  uint64_t v26;
  _OWORD v27[8];
  uint64_t v28;
  __int128 v29;
  __n128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  if ((a2 & 6) == 4)
  {
    v6 = *(unsigned int *)((a2 & 0xFFFFFFFFFFFFFFF8) + 64);
    if ((_DWORD)v6)
    {
      v7 = *(unint64_t **)((a2 & 0xFFFFFFFFFFFFFFF8) + 56);
      v8 = 8 * v6;
      do
      {
        v9 = *v7++;
        v10 = *(_OWORD *)(a3 + 112);
        v27[6] = *(_OWORD *)(a3 + 96);
        v27[7] = v10;
        v28 = *(_QWORD *)(a3 + 128);
        v11 = *(_OWORD *)(a3 + 48);
        v27[2] = *(_OWORD *)(a3 + 32);
        v27[3] = v11;
        v12 = *(_OWORD *)(a3 + 80);
        v27[4] = *(_OWORD *)(a3 + 64);
        v27[5] = v12;
        v13 = *(_OWORD *)(a3 + 16);
        v27[0] = *(_OWORD *)a3;
        v27[1] = v13;
        sub_22E4EC638(a1, (uint64_t)v27, v9, (uint64_t)&v29);
        v14 = v36;
        *(_OWORD *)(a3 + 96) = v35;
        *(_OWORD *)(a3 + 112) = v14;
        *(_QWORD *)(a3 + 128) = v37;
        v15 = v32;
        *(_OWORD *)(a3 + 32) = v31;
        *(_OWORD *)(a3 + 48) = v15;
        v16 = v34;
        *(_OWORD *)(a3 + 64) = v33;
        *(_OWORD *)(a3 + 80) = v16;
        result = v30;
        *(_OWORD *)a3 = v29;
        *(__n128 *)(a3 + 16) = result;
        v8 -= 8;
      }
      while (v8);
    }
  }
  else
  {
    if ((a2 & 6) == 2)
      v5 = a2 & 0xFFFFFFFFFFFFFFF8;
    else
      v5 = 0;
    v18 = *(_OWORD *)(a3 + 112);
    v25[6] = *(_OWORD *)(a3 + 96);
    v25[7] = v18;
    v26 = *(_QWORD *)(a3 + 128);
    v19 = *(_OWORD *)(a3 + 48);
    v25[2] = *(_OWORD *)(a3 + 32);
    v25[3] = v19;
    v20 = *(_OWORD *)(a3 + 80);
    v25[4] = *(_OWORD *)(a3 + 64);
    v25[5] = v20;
    v21 = *(_OWORD *)(a3 + 16);
    v25[0] = *(_OWORD *)a3;
    v25[1] = v21;
    sub_22E4EC638(a1, (uint64_t)v25, v5, (uint64_t)&v29);
    v22 = v36;
    *(_OWORD *)(a3 + 96) = v35;
    *(_OWORD *)(a3 + 112) = v22;
    *(_QWORD *)(a3 + 128) = v37;
    v23 = v32;
    *(_OWORD *)(a3 + 32) = v31;
    *(_OWORD *)(a3 + 48) = v23;
    v24 = v34;
    *(_OWORD *)(a3 + 64) = v33;
    *(_OWORD *)(a3 + 80) = v24;
    result = v30;
    *(_OWORD *)a3 = v29;
    *(__n128 *)(a3 + 16) = result;
  }
  return result;
}

uint64_t sub_22E488788(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22EF5BA38(a1, a2) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  result = 1;
  if (v3 && *(_BYTE *)(v3 + 16) == 45)
  {
    v5 = sub_22F114198(*(_QWORD *)(v3 + 24));
    if ((*(_DWORD *)(v5 + 72) & 0xE000) == 0x4000 && (*(_BYTE *)(v5 + 75) & 1) != 0)
      return 0;
    else
      return sub_22E48880C(a1, v5, v5);
  }
  return result;
}

uint64_t sub_22E48880C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t result;
  unint64_t v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;

  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
  if ((**(_QWORD **)(a2 + 128) & 0x100000000000) != 0)
    return 1;
  v6 = sub_22EFD10F8(a2);
  result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v6 + 64))(v6);
  if (!result)
    return result;
  if (*(_BYTE *)result != 8 || *(_DWORD *)result > 0xFFu)
    return 0;
  v8 = sub_22EFC3B90(a2);
  if (v8)
  {
    v9 = v8;
    result = sub_22E488788(a1, *(_QWORD *)(v8 + 48));
    if (!(_DWORD)result)
      return result;
    while (1)
    {
      v9 = *(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v9)
        break;
      if ((*(_DWORD *)(v9 + 28) & 0x7Fu) - 49 <= 2)
      {
        v10 = sub_22E488788(a1, *(_QWORD *)(v9 + 48));
        result = 0;
        if ((v10 & 1) == 0)
          return result;
      }
    }
  }
  v11 = sub_22E46A3A0(a2);
  if (v11 == v12)
  {
LABEL_19:
    if (a2 == a3)
    {
      v17 = sub_22E483108(a2);
      if (v17 != v18)
      {
        v19 = v18;
        v20 = v17 + 24;
        do
        {
          v21 = *(_QWORD *)(**(_QWORD **)(v20 - 8) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v21 + 8) & 0xF) != 0)
            v21 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v20 - 8));
          v22 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 24));
          result = sub_22E48880C(a1, v22, a2);
          if ((_DWORD)result)
            v23 = v20 == v19;
          else
            v23 = 1;
          v20 += 24;
        }
        while (!v23);
        return result;
      }
    }
    return 1;
  }
  v13 = v11;
  v14 = v12;
  while (1)
  {
    if ((*(_BYTE *)(v13 + 12) & 1) == 0)
    {
      v15 = *(_QWORD *)(**(_QWORD **)(v13 + 16) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v15 + 8) & 0xF) != 0)
        v15 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v13 + 16));
      v16 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                    + 24));
      result = sub_22E48880C(a1, v16, a3);
      if (!(_DWORD)result)
        return result;
    }
    v13 += 24;
    if (v13 == v14)
      goto LABEL_19;
  }
}

uint64_t sub_22E4889F4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;

  *(_QWORD *)result = -1;
  *(_QWORD *)(result + 8) = -1;
  *(_BYTE *)(result + 25) = 1;
  *(_QWORD *)(result + 32) = a2;
  v3 = *(_QWORD *)(a2 + 1992) - *(_QWORD *)(a2 + 2000);
  *(_QWORD *)result = v3;
  *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 2312);
  *(_BYTE *)(result + 24) = *(_BYTE *)(a2 + 2893);
  *(_BYTE *)(a2 + 2893) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 2872);
  *(_QWORD *)(a2 + 2872) = v3;
  *(_QWORD *)(result + 40) = a3;
  *(_QWORD *)(result + 48) = result + 64;
  *(_QWORD *)(result + 56) = 0x400000000;
  *(_QWORD *)(result + 96) = *(_QWORD *)(a2 + 5840);
  *(_QWORD *)(a2 + 5840) = result;
  if (!*(_BYTE *)(a2 + 2892))
  {
    v4 = *(unsigned __int8 **)(a2 + 2880);
    if (v4)
    {
      v5 = result;
      sub_22F256D30(v4, a2 + 272, a3);
      return v5;
    }
  }
  return result;
}

uint64_t *sub_22E488A9C(unsigned int *a1)
{
  unsigned int v2;
  __int128 *v3;
  uint64_t *result;
  __int128 v5;

  v2 = a1[20];
  if (v2 <= 1)
  {
    if (v2)
    {
      v3 = (__int128 *)(*(_QWORD *)a1 + 1864);
      v5 = *v3;
      *(_QWORD *)v3 &= 0xFFFFFFFFFFF5FFFFLL;
      sub_22E5E5158(*(_QWORD *)a1, **((unsigned __int8 ***)a1 + 9), 0, 0);
      *v3 = v5;
    }
    *((_QWORD *)a1 + 4) = 0;
  }
  result = sub_22E488228((uint64_t *)a1);
  a1[20] = 0;
  return result;
}

uint64_t sub_22E488B4C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  void *v6;
  uint64_t v8[2];

  v2 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v2 + 2892))
  {
    v3 = *(_QWORD *)(v2 + 2880);
    if (v3)
      sub_22F256E20(v3, v2 + 272, *(_DWORD *)(a1 + 44));
  }
  if (*(_BYTE *)(a1 + 25))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_DWORD *)(a1 + 44);
    v8[0] = 0;
    v8[1] = v4;
    sub_22E48EE24(v8, v5, 0);
    sub_22E488BE4(a1);
    sub_22E48F084(v8);
  }
  v6 = *(void **)(a1 + 48);
  if (v6 != (void *)(a1 + 64))
    free(v6);
  return sub_22E487560(a1);
}

uint64_t sub_22E488BE4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 96);
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v3 + 5840) = v2;
  *(_BYTE *)(v3 + 2893) = *(_BYTE *)(a1 + 24);
  result = sub_22E48B274(v3, *(_QWORD *)a1, *(_QWORD *)(a1 + 16), 0, 0);
  *(_BYTE *)(a1 + 25) = 0;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 2872) = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(a1 + 56))
    return sub_22F28C748(a1);
  return result;
}

unint64_t sub_22E488C50(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;

  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  v2 = *(_QWORD *)(a1 + 128);
  v3 = *(_QWORD *)(v2 + 32);
  if ((v3 & 1) != 0)
    v3 = sub_22F3B1908(v2);
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  return v3 + 24 * *(unsigned int *)(*(_QWORD *)(a1 + 128) + 20);
}

unint64_t sub_22E488CAC(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _WORD v30[20];
  _BYTE v31[32];
  __int16 v32;

  v4 = *(_QWORD *)(a2[18] + 144);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = v5 + 72;
  v7 = *(_WORD *)(v5 + 80) & 0x7F;
  v8 = -40;
  if (v7 > 70)
  {
    if (v7 == 83)
      goto LABEL_17;
    if (v7 == 71)
    {
      v8 = -56;
      goto LABEL_17;
    }
    if (v7 != 81)
    {
LABEL_12:
      v9 = v7 - 52;
      v10 = (v7 - 33) >= 5;
      v11 = -48;
      if (!v10)
        v11 = -64;
      if (v9 >= 6)
        v8 = v11;
      else
        v8 = -72;
    }
  }
  else
  {
    if (v7 > 0x18)
      goto LABEL_11;
    if (v7 == 16)
    {
LABEL_4:
      v8 = -48;
      goto LABEL_17;
    }
    if (((1 << v7) & 0x1066) == 0)
    {
      if (v7 == 24)
        goto LABEL_4;
LABEL_11:
      if (v7 == 70)
      {
        v8 = -64;
        goto LABEL_17;
      }
      goto LABEL_12;
    }
  }
LABEL_17:
  v12 = *(_QWORD *)(v6 + v8 + 16);
  v13 = (_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF8);
  if ((v12 & 4) != 0)
    v13 = (_QWORD *)*v13;
  if (v13)
    v14 = (unint64_t)(v13 - 8);
  else
    v14 = 0;
  v15 = sub_22F0C975C(v4, v14);
  v16 = *(_QWORD *)(*(_QWORD *)(v15 + 48) + 8 * *(unsigned int *)(a1 + 16));
  v17 = v16 + sub_22EF5CDF0(v4, *(_QWORD *)(*(_QWORD *)(v4 + 16408) & 0xFFFFFFFFFFFFFFF0)) - 1;
  v18 = v17 / sub_22EF5CDF0(v4, *(_QWORD *)(*(_QWORD *)(v4 + 16408) & 0xFFFFFFFFFFFFFFF0));
  v19 = (uint64_t *)llvm::ConstantInt::get();
  v20 = a2[1];
  v21 = a2[526];
  v22 = a2[12];
  v32 = 257;
  v23 = (uint64_t *)sub_22E3C1740(a2 + 34, 49, v21, v22, (uint64_t)v31);
  v30[16] = 257;
  result = sub_22E42129C(a2 + 34, v20, v23, v19, (uint64_t)v30);
  v25 = result;
  v26 = *(unsigned int *)(a1 + 20);
  v27 = *(_QWORD *)(v15 + 48);
  if (v26 >= ((unint64_t)(*(_QWORD *)(v15 + 56) - v27) >> 3))
  {
    v29 = **(_QWORD **)(v15 + 72);
  }
  else
  {
    v28 = *(_QWORD *)(v27 + 8 * v26);
    result = sub_22EF5CDF0(v4, *(_QWORD *)(*(_QWORD *)(v4 + 16408) & 0xFFFFFFFFFFFFFFF0));
    v29 = v28 / result;
  }
  if ((uint64_t)(v29 - v18) >= 1)
  {
    sub_22E488EE8((uint64_t)a2, v25);
    return llvm::Function::addFnAttr();
  }
  return result;
}

llvm::Value *sub_22E488EE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  llvm::Value *v6;
  llvm::Value *result;
  _BYTE v8[32];
  __int16 v9;
  int8x16_t v10;
  _QWORD v11[3];

  v11[2] = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(a1 + 1880) = 1;
  v3 = *(_QWORD *)(a1 + 96);
  v9 = 257;
  v11[0] = sub_22E3C1740((uint64_t *)(a1 + 272), 49, a2, v3, (uint64_t)v8);
  v11[1] = llvm::ConstantInt::get();
  v10 = vextq_s8(*(int8x16_t *)(a1 + 88), *(int8x16_t *)(a1 + 88), 8uLL);
  v4 = llvm::FunctionType::get();
  v5 = sub_22E633A04(*(_QWORD *)(a1 + 144), v4, "__sanitizer_dtor_callback", 0x19uLL, 0, 0, 0);
  v9 = 257;
  result = sub_22F24EEDC(a1, v5, v6, (uint64_t)v11, 2, (uint64_t)v8);
  *(_BYTE *)(a1 + 1880) = 0;
  return result;
}

unint64_t sub_22E488FF8(uint64_t a1)
{
  unint64_t result;

  if ((*(_WORD *)(a1 + 72) & 0x80) != 0)
    sub_22EFCC320(a1 + 64);
  for (result = *(_QWORD *)(a1 + 80); result; result = *(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF8)
  {
    if ((*(_DWORD *)(result + 28) & 0x7Eu) - 54 < 4)
      break;
  }
  return result;
}

uint64_t sub_22E489050(uint64_t a1, uint64_t a2)
{
  return sub_22E482DF0(a2, *(llvm::Constant ***)(a1 + 8), 0);
}

uint64_t sub_22E489064(uint64_t a1, _QWORD *a2)
{
  llvm::Value *v2;
  _WORD *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unsigned __int8 *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20[2];
  char v21;
  uint64_t v22;

  v4 = (_WORD *)a2[200];
  v5 = v4[40] & 0x7F;
  v6 = -40;
  if (v5 > 0x46)
  {
    if (v5 == 83)
      goto LABEL_17;
    if (v5 == 71)
    {
      v6 = -56;
      goto LABEL_17;
    }
    if (v5 != 81)
    {
LABEL_12:
      v7 = v5 - 52;
      v8 = v5 - 33 >= 5;
      v9 = -48;
      if (!v8)
        v9 = -64;
      if (v7 >= 6)
        v6 = v9;
      else
        v6 = -72;
    }
  }
  else
  {
    if (v5 > 0x18)
      goto LABEL_11;
    if (v5 == 16)
    {
LABEL_4:
      v6 = -48;
      goto LABEL_17;
    }
    if (((1 << v5) & 0x1066) == 0)
    {
      if (v5 == 24)
        goto LABEL_4;
LABEL_11:
      if (v5 == 70)
      {
        v6 = -64;
        goto LABEL_17;
      }
      goto LABEL_12;
    }
  }
LABEL_17:
  v10 = *(_QWORD *)((char *)v4 + v6 + 88);
  v11 = (_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 4) != 0)
    v11 = (_QWORD *)*v11;
  v12 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)v4 + 32))(a2[200]) + 160);
  v13 = *(unsigned __int8 **)((*(uint64_t (**)(_WORD *))(*(_QWORD *)v4 + 32))(v4) + 168);
  if (v13)
  {
    v20[0] = (uint64_t)a2;
    v20[1] = (uint64_t)(a2 + 34);
    v21 = 0;
    v22 = *(_QWORD *)(a2[18] + 232);
    v2 = sub_22E50E974(v20, v13);
  }
  if (v11)
    v14 = (unint64_t)(v11 - 8);
  else
    v14 = 0;
  v15 = a2[526];
  v16 = *(_QWORD *)(v14 + 48);
  if (v16)
    v17 = v16 & 0xFFFFFFFFFFFFFFF0;
  else
    v17 = sub_22EF6462C(*(_QWORD *)(a2[18] + 144), v14);
  if (v13)
    v18 = (uint64_t)v2;
  else
    v18 = v15;
  return sub_22F261F20((uint64_t)a2, v12, v18, v17, 0, 0);
}

llvm::Value *sub_22E4891F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 4208);
  sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 144) + 16408) & 0xFFFFFFFFFFFFFFF0));
  return sub_22E488EE8(a2, v3);
}

uint64_t *sub_22E489244(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t *result;
  uint64_t v15;
  _OWORD v16[3];
  __int128 v17;
  char v18;

  v4 = a2[200];
  v5 = v4 + 72;
  v6 = *(_WORD *)(v4 + 80) & 0x7F;
  v7 = -40;
  if (v6 > 70)
  {
    if (v6 == 83)
      goto LABEL_17;
    if (v6 == 71)
    {
      v7 = -56;
      goto LABEL_17;
    }
    if (v6 != 81)
    {
LABEL_12:
      v8 = v6 - 52;
      v9 = (v6 - 33) >= 5;
      v10 = -48;
      if (!v9)
        v10 = -64;
      if (v8 >= 6)
        v7 = v10;
      else
        v7 = -72;
    }
  }
  else
  {
    if (v6 > 0x18)
      goto LABEL_11;
    if (v6 == 16)
    {
LABEL_4:
      v7 = -48;
      goto LABEL_17;
    }
    if (((1 << v6) & 0x1066) == 0)
    {
      if (v6 == 24)
        goto LABEL_4;
LABEL_11:
      if (v6 == 70)
      {
        v7 = -64;
        goto LABEL_17;
      }
      goto LABEL_12;
    }
  }
LABEL_17:
  v11 = *(_QWORD *)(v5 + v7 + 16);
  v12 = (_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF8);
  if ((v11 & 4) != 0)
    v12 = (_QWORD *)*v12;
  if (v12)
    v13 = (unint64_t)(v12 - 8);
  else
    v13 = 0;
  sub_22F24FFF8(a2, v16);
  sub_22E4801BC(a2, v16, v13, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), &v17);
  result = (uint64_t *)sub_22F0C975C(*(_QWORD *)(a2[18] + 144), *(_QWORD *)(a1 + 8));
  if (*result >= 1)
  {
    if ((v18 & 3) != 0)
      v15 = sub_22F28ABCC(&v17, a2);
    else
      v15 = v17;
    sub_22E488EE8((uint64_t)a2, v15);
    return (uint64_t *)llvm::Function::addFnAttr();
  }
  return result;
}

llvm::APInt *sub_22E4893D0(uint64_t a1, _QWORD *a2, char a3)
{
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  _OWORD v17[3];
  _OWORD v18[8];
  uint64_t v19;
  _BYTE v20[112];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _OWORD v30[3];
  _OWORD v31[2];
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36[2];
  uint64_t v37;

  sub_22F24FFF8(a2, v30);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
  v7 = v6 & 0xFFFFFFFFFFFFFFF8;
  if ((v6 & 4) != 0)
    v7 = *(_QWORD *)v7;
  v8 = (_QWORD *)a2[18];
  v9 = (*(_WORD *)(v7 + 8) & 0x7E) - 34;
  if (v7)
    v10 = v7 - 64;
  else
    v10 = 0;
  if (v9 >= 4)
    v11 = 0;
  else
    v11 = v10;
  v12 = *(_QWORD *)(v11 + 48);
  if (v12)
  {
    v13 = v12 & 0xFFFFFFFFFFFFFFF0;
  }
  else
  {
    v13 = sub_22EF6462C(v8[18], v11);
    v8 = (_QWORD *)a2[18];
  }
  v33 = v30[0];
  v34 = v30[1];
  v35 = v30[2];
  sub_22E6281E0(v8, v13, (uint64_t)v31);
  *(_OWORD *)v20 = v33;
  *(_OWORD *)&v20[16] = v34;
  *(_OWORD *)&v20[32] = v35;
  v14 = *(_QWORD *)(a2[18] + 144);
  v36[0] = v31[0];
  v36[1] = v31[1];
  v37 = v32;
  v22 = 0uLL;
  LODWORD(v23) = 0;
  *((_QWORD *)&v21 + 1) = 0;
  *((_QWORD *)&v23 + 1) = 0;
  *(_QWORD *)&v24 = 0;
  v25 = 0uLL;
  *(_QWORD *)((char *)&v26 + 4) = 2;
  LODWORD(v21) = 0;
  v27 = 0u;
  v28 = 0u;
  sub_22E3C113C((uint64_t)&v21, (__int128 *)v20, v13, 2, v36, v14);
  v18[6] = v27;
  v18[7] = v28;
  v19 = v29;
  v18[2] = v23;
  v18[3] = v24;
  v18[4] = v25;
  v18[5] = v26;
  v18[0] = v21;
  v18[1] = v22;
  sub_22E4DD05C((uint64_t)a2, (uint64_t)v18, *(_QWORD *)(a1 + 8), (uint64_t)v20);
  v15 = 0;
  v17[0] = *(_OWORD *)&v20[8];
  v17[1] = *(_OWORD *)&v20[24];
  v17[2] = *(_OWORD *)&v20[40];
  if ((a3 & 1) == 0)
    v15 = *(_BYTE *)(a1 + 24) != 0;
  return sub_22F25A27C(a2, (uint64_t)v17, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48), *(void (**)(_QWORD *, void **, uint64_t))(a1 + 16), v15);
}

uint64_t sub_22E489580(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  llvm *v6;
  uint64_t v7;
  char v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  char v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD v16[5];

  v16[4] = *MEMORY[0x24BDAC8D0];
  if (a2 >= 3)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v8 = 0;
    v9 = v16;
    v10 = 1;
    v11 = (_QWORD *)(a1 + 8);
    do
    {
      v12 = v8;
      if ((*v11 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        *v9 = *v11;
        v9[1] = v11[1];
        v9 += 2;
      }
      v11 = (_QWORD *)(a1 + 8 + 16 * v10);
      v8 = 1;
      v10 = 2;
    }
    while ((v12 & 1) == 0);
    if (a2 > 2)
    {
      *(_DWORD *)a1 &= ~1u;
      v13 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](16 * a2, 8);
      *(_QWORD *)(a1 + 16) = v13;
    }
    return sub_22F252BEC(a1, v16, v9);
  }
  else
  {
    v6 = *(llvm **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 2)
    {
      v15 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](16 * a2, 8);
      *(_QWORD *)(a1 + 16) = v15;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_22F252BEC(a1, v6, (_QWORD *)v6 + 2 * v7);
    return llvm::deallocate_buffer(v6, (void *)(16 * v7));
  }
}

uint64_t sub_22E48970C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _OWORD v9[3];

  v4 = sub_22EFD7784(*(_QWORD *)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 64);
  v7 = *(_OWORD *)(a1 + 32);
  v9[0] = *(_OWORD *)(a1 + 16);
  v9[1] = v7;
  v9[2] = *(_OWORD *)(a1 + 48);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _OWORD *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a2 + 144) + 224) + 472))(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 224), a2, v5, v6, 0, 1, v9, v4);
}

uint64_t sub_22E48977C(_OWORD *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v2 = a1[2];
  v4 = a1[1];
  v5 = v2;
  v6 = a1[3];
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 144) + 224) + 472))(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 224));
}

uint64_t sub_22E4897D0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 144) + 800) + 144))(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 800));
}

uint64_t sub_22E4897EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = sub_22F24BFC0(a2, *(_QWORD *)(a1 + 16));
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(a2 + 144) + 800)
                                                                      + 144))(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 800), a2, v3, v4);
}

char *sub_22E489830(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  char *result;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  size_t v12;
  size_t v13;
  uint64_t v14;
  size_t v15;

  v3 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = *a1;
  if (*a1)
  {
    v5 = (char *)a1[2];
    v6 = (_DWORD)v5 - v4;
    if ((unint64_t)&v5[-v4] < v3)
    {
      LODWORD(v12) = *((_DWORD *)a1 + 2) - v4;
      v13 = (v12 - v6);
      do
        v12 = (2 * v12);
      while (v13 + v3 > v12);
      v14 = operator new[]();
      v15 = v14 + v12;
      v5 = (char *)(v14 + v12 - v13);
      memcpy(v5, (const void *)a1[2], v13);
      if (*a1)
        MEMORY[0x2348A0E84](*a1, 0x1000C8077774924);
      *a1 = v14;
      a1[1] = v15;
    }
  }
  else
  {
    v8 = 1024;
    do
    {
      v9 = v8;
      v10 = v3 > v8;
      v8 *= 2;
    }
    while (v10);
    v11 = operator new[]();
    v5 = (char *)(v11 + v9);
    *a1 = v11;
    a1[1] = (uint64_t)v5;
  }
  result = &v5[-v3];
  a1[2] = (uint64_t)&v5[-v3];
  return result;
}

uint64_t sub_22E489930(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v7 = v2;
  if (v3 - v2 == a2)
    return 1;
  while (1)
  {
    result = 0;
    if (!v2 || (*(_BYTE *)(v2 + 24) & 7) != 0)
      break;
    if ((*(_BYTE *)(v2 + 24) & 0x40) == 0)
      return 0;
    sub_22E47E120(&v7);
    v2 = v7;
    if (*(_QWORD *)(a1 + 8) - v7 == a2)
      return 1;
  }
  return result;
}

uint64_t sub_22E4899B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    return 0;
  while (1)
  {
    v2 = *(_QWORD *)(a1 + 8) - v1;
    if ((*(_BYTE *)(v2 + 24) & 7) != 0 || (*(_BYTE *)(v2 + 24) & 0x40) == 0)
      break;
    v1 = *(_QWORD *)(v2 + 16);
    if (!v1)
      return 0;
  }
  return 1;
}

char *sub_22E4899EC(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  __int16 v3;
  char *v6;
  char *v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;

  v3 = a3;
  v6 = sub_22E489830((uint64_t *)a1, a3 + 120);
  v7 = v6;
  v8 = *(_QWORD *)(a1 + 32);
  if (v8)
    v9 = a2 & ((*(_BYTE *)(*(_QWORD *)(a1 + 8) - v8 + 24) & 7) != 2);
  else
    v9 = a2 & 1;
  v10 = *(_DWORD *)(a1 + 56);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = v8;
  v6[24] &= 0xF8u;
  *((_QWORD *)v6 + 4) = v11;
  *((_QWORD *)v6 + 5) = -1;
  *((_OWORD *)v6 + 3) = 0u;
  *((_OWORD *)v6 + 4) = 0u;
  *((_DWORD *)v6 + 20) = 0;
  *((_QWORD *)v6 + 12) = 0;
  *((_QWORD *)v6 + 13) = 0;
  *((_QWORD *)v6 + 11) = 0;
  *((_DWORD *)v6 + 28) = v10;
  if (v9)
    v12 = 16;
  else
    v12 = 0;
  *((_DWORD *)v6 + 6) = *((_DWORD *)v6 + 6) & 0xFFE00007 | (4 * (a2 & 2)) | v12 & 0xFFE001FF | ((v3 & 0xFFF) << 9) | 0x20;
  if ((a2 & 2) != 0)
  {
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 8) - *(_QWORD *)(a1 + 16);
    if (!v9)
    {
LABEL_9:
      if ((a2 & 8) == 0)
        goto LABEL_10;
LABEL_14:
      *((_DWORD *)v6 + 6) |= 0x40u;
      if ((a2 & 8) != 0)
        return v7 + 120;
      goto LABEL_15;
    }
  }
  else if (!v9)
  {
    goto LABEL_9;
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 8) - *(_QWORD *)(a1 + 16);
  if ((a2 & 8) != 0)
    goto LABEL_14;
LABEL_10:
  if ((a2 & 8) != 0)
    return v7 + 120;
LABEL_15:
  v13 = *(_QWORD **)(a1 + 40);
  if ((*(_QWORD *)(*(_QWORD *)(v13[18] + 152) + 8) & 0x800000000000) != 0
    && ((v9 ^ 1) & 1) == 0
    && *(_DWORD *)(v13[19] + 148) == 11)
  {
    sub_22F252FA4(v13);
  }
  return v7 + 120;
}

_QWORD *sub_22E489B34(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  void **v3;
  void **v4;
  void *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v1 = result;
  v2 = result[2];
  result[3] = *(_QWORD *)(v2 + 32);
  result[4] = *(_QWORD *)(v2 + 16);
  result[2] = v2 + ((((*(_DWORD *)(v2 + 24) >> 9) & 0xFFF) + 127) & 0x1FF8);
  v3 = *(void ***)(v2 + 104);
  if (v3)
  {
    v4 = (void **)v3[8];
    if (v4 != v3 + 10)
      free(v4);
    v5 = v3[1];
    if (v5 != *v3)
      free(v5);
    result = (_QWORD *)MEMORY[0x2348A0E9C](v3, 0x10C0C4086B6ECC1);
  }
  v6 = *((_DWORD *)v1 + 14);
  if (v6)
  {
    v7 = v1[3];
    if (v7)
    {
      v8 = *(_DWORD *)(v1[1] - v7 + 112);
      if (v6 > v8)
      {
        v9 = v1[6] - 24;
        do
        {
          if (*(_QWORD *)(v9 + 32 * v6))
            break;
          *((_DWORD *)v1 + 14) = --v6;
        }
        while (v6 > v8);
      }
    }
    else
    {
      *((_DWORD *)v1 + 14) = 0;
    }
  }
  return result;
}

unint64_t sub_22E489C10(uint64_t a1, llvm::LLVMContext *a2)
{
  uint64_t v3;
  uint64_t Int1Ty;
  uint64_t v5;
  unint64_t v6;
  uint64_t False;
  unint64_t v8;
  unint64_t v9;
  uint64_t True;
  _QWORD v12[3];
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  int v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  __int16 v21;

  v3 = a1 + 272;
  Int1Ty = llvm::Type::getInt1Ty(*(llvm::Type **)(a1 + 336), a2);
  v20 = "cleanup.cond";
  v21 = 259;
  v5 = sub_22E4D8348(a1, (llvm::Type *)Int1Ty, (uint64_t)&v20, 0);
  *(_WORD *)(v5 + 18) &= 0xFFC0u;
  v6 = Int1Ty & 0xFFFFFFFFFFFFFFF8;
  False = llvm::ConstantInt::getFalse();
  v8 = v5 & 0xFFFFFFFFFFFFFFF8;
  if (v8)
    v9 = v6;
  else
    v9 = 0;
  v16[0] = v8;
  v16[1] = v9;
  v16[2] = v8 != 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  sub_22F253140(a1, False, (uint64_t)v16, a1);
  True = llvm::ConstantInt::getTrue();
  v12[0] = v8;
  v12[1] = v9;
  v12[2] = v8 != 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  sub_22E3BEDDC(v3, True, v12, 0);
  return v8;
}

void sub_22E489CFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::LLVMContext *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  llvm::Instruction *v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;
  int v27;
  _BYTE v28[32];
  const char *v29;
  __int16 v30;
  _QWORD v31[3];
  int v32;
  uint64_t v33;
  uint64_t v34;

  v2 = *(unsigned int *)(a1 + 2040);
  if ((_DWORD)v2)
  {
    v5 = 0;
    v6 = 0;
    v24 = v28;
    v25 = v28;
    v26 = 4;
    v27 = 0;
    v7 = 32 * v2;
    do
    {
      v8 = *(_QWORD *)(a1 + 2032);
      if (*(_QWORD *)(v8 + v5 + 8) == a2)
      {
        *(_QWORD *)(v8 + v5 + 8) = 0;
        v9 = *(_QWORD *)(v8 + v5);
        if (v9)
        {
          sub_22E3BA850((uint64_t)&v24, *(const void **)(v8 + v5));
          if ((_BYTE)v10)
          {
            v11 = *(_QWORD *)(v9 + 40);
            if (v11 != v9 + 40)
            {
              v12 = v11 ? v11 - 24 : 0;
              v13 = *(unsigned __int8 *)(v12 + 16) - 40;
              v14 = v13 >= 0xFFFFFFF5 ? (llvm::Instruction *)v12 : 0;
              if (v11)
              {
                if (*((_BYTE *)v14 + 16) == 30 && v13 >= 0xFFFFFFF5)
                {
                  v16 = sub_22E48B6FC(a1, v10);
                  v18 = 0;
                  v19 = v16 & 0xFFFFFFFFFFFFFFF8;
                  if (v16 <= 7)
                    v19 = 0;
                  v20 = v17 & 0xFFFFFFFFFFFFFFF8;
                  if (v16 <= 7)
                    v20 = 0;
                  v31[0] = v19;
                  v31[1] = v20;
                  if (v16 >= 8)
                    v18 = 1 << (v17 & 7 | (8 * (v16 & 7)));
                  v31[2] = v18;
                  v32 = 0;
                  v33 = 0;
                  v34 = 0;
                  v29 = "cleanup.dest";
                  v30 = 259;
                  sub_22E48B768((uint64_t)v31, (uint64_t)&v29, (uint64_t)v14, a1);
                  llvm::User::operator new((llvm::User *)0x40);
                  MEMORY[0x23489C210]();
                  llvm::Instruction::eraseFromParent(v14);
                }
              }
            }
            llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 336), v10);
            llvm::ConstantInt::get();
            llvm::SwitchInst::addCase();
          }
        }
        v6 = 1;
      }
      v5 += 32;
    }
    while (v7 != v5);
    if ((v6 & 1) != 0)
    {
      v21 = *(_DWORD *)(*(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2008) + 112);
      v22 = *(_DWORD *)(a1 + 2040);
      if (v22 > v21)
      {
        v23 = *(_QWORD *)(a1 + 2032) - 24;
        do
        {
          if (*(_QWORD *)(v23 + 32 * v22))
            break;
          *(_DWORD *)(a1 + 2040) = --v22;
        }
        while (v22 > v21);
      }
    }
    if (v25 != v24)
      free(v25);
  }
}

uint64_t sub_22E489F30(uint64_t result, uint64_t a2, llvm::AllocaInst ***a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  llvm::AllocaInst *v13;
  unsigned int v14;
  llvm::Type *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t FirstInsertionPt;
  uint64_t v22;
  llvm::Value *v23;
  _QWORD v24[3];
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[3];
  int v29;
  uint64_t v30;
  uint64_t v31;
  void *v32[2];
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  _QWORD v36[5];

  v36[3] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(result + 2000);
  if (*(_QWORD *)(result + 1992) - v4 != a2)
  {
    v8 = (_QWORD *)result;
    v9 = 0;
    do
    {
      v10 = *(_QWORD *)(v4 + 104);
      if (v10)
        LOBYTE(v10) = *(_DWORD *)(v10 + 20) != *(_DWORD *)(v10 + 24);
      v9 |= v10;
      result = (uint64_t)sub_22E48A190((uint64_t)v8, *(_QWORD *)(v4 + 32) > a2);
      v4 = v8[250];
    }
    while (v8[249] - v4 != a2);
    if ((v9 & 1) != 0 && a4)
    {
      v11 = 8 * a4;
      do
      {
        v12 = *a3;
        v13 = **a3;
        if (v13)
        {
          v14 = *((unsigned __int8 *)v13 + 16);
          if (v14 >= 0x1C)
          {
            if (v14 != 59 || (result = llvm::AllocaInst::isStaticAlloca(**a3), (result & 1) == 0))
            {
              v15 = *(llvm::Type **)v13;
              v32[0] = "tmp.exprcleanup";
              v34 = 259;
              v16 = sub_22E4D84FC((uint64_t)v8, v15, (uint64_t)v32);
              if (v16 <= 7)
                v18 = 0;
              else
                v18 = v16 & 0xFFFFFFFFFFFFFFF8;
              if (v16 <= 7)
                v19 = 0;
              else
                v19 = v17 & 0xFFFFFFFFFFFFFFF8;
              if (v16 >= 8)
                v20 = 1 << (v17 & 7 | (8 * (v16 & 7)));
              else
                v20 = 0;
              if (*((_BYTE *)v13 + 16) == 33)
                FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(*((llvm::BasicBlock **)v13 - 12));
              else
                FirstInsertionPt = *((_QWORD *)v13 + 4);
              v22 = v8[18];
              if (FirstInsertionPt)
                v23 = (llvm::Value *)(FirstInsertionPt - 24);
              else
                v23 = 0;
              sub_22F253558((uint64_t)v32, v23, 0, 0, 0);
              v36[2] = v22;
              v28[0] = v18;
              v28[1] = v19;
              v28[2] = v20;
              v29 = 0;
              v30 = 0;
              v31 = 0;
              sub_22E3BEDDC(v32, v13, v28, 0);
              llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v36);
              llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v35);
              if (v32[0] != &v33)
                free(v32[0]);
              v24[0] = v18;
              v24[1] = v19;
              v24[2] = v20;
              v25 = 0;
              v26 = 0;
              v27 = 0;
              v34 = 257;
              result = sub_22E3C2A7C(v8 + 34, (uint64_t)v24, (uint64_t)v32);
              *v12 = result;
            }
          }
        }
        ++a3;
        v11 -= 8;
      }
      while (v11);
    }
  }
  return result;
}

_QWORD *sub_22E48A190(uint64_t a1, int a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _BOOL4 v16;
  uint64_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  int v22;
  uint64_t **v23;
  uint64_t v24;
  int v25;
  char v26;
  char v27;
  _BOOL4 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *result;
  unint64_t v56;
  _BYTE *v57;
  int v58;
  int v59;
  _BOOL4 v60;
  void *v61;
  _BYTE *v62;
  char **v63;
  int v64;
  int v65;
  char **v66;
  _BOOL4 v67;
  _BOOL4 v68;
  int v69;
  llvm::LLVMContext *v70;
  int v71;
  uint64_t v72;
  llvm::LLVMContext *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t **v80;
  uint64_t v81;
  uint64_t v82;
  llvm::BasicBlock *v83;
  uint64_t v84;
  char **v85;
  _BOOL4 v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  llvm::LLVMContext *v95;
  uint64_t v96;
  _DWORD *v97;
  int v98;
  BOOL v99;
  char v100;
  uint64_t v101;
  int v102;
  int v103;
  int v105;
  llvm::Instruction *v106;
  uint64_t v107;
  BOOL v109;
  uint64_t v110;
  int v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  llvm::LLVMContext *v119;
  int v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  llvm::LLVMContext *v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  llvm::BasicBlock **v140;
  uint64_t v141;
  llvm::BasicBlock **v142;
  char *v143;
  const char *v144;
  uint64_t v145;
  llvm::LLVMContext *v146;
  llvm::BasicBlock *v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153;
  llvm::BasicBlock ***v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  llvm::LLVMContext *v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  llvm::BasicBlock **v167;
  uint64_t v168;
  llvm::BasicBlock **v169;
  char v170;
  llvm::BasicBlock *v171;
  uint64_t v172;
  uint64_t v173;
  llvm::BasicBlock **v174;
  uint64_t v175;
  uint64_t v176;
  _BYTE *v177;
  llvm::BasicBlock *v178;
  uint64_t v179;
  int v180;
  llvm::BasicBlock ***v181;
  int v182;
  uint64_t v183;
  _BOOL4 v184;
  int v185;
  uint64_t *v186;
  unsigned int v187;
  _BOOL4 v188;
  _QWORD *v189;
  int v190;
  _QWORD *v191;
  __int128 v192;
  __int128 v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  __int128 v208;
  __int128 v209;
  uint64_t **v210;
  uint64_t **v211;
  uint64_t *v212;
  uint64_t v213;
  uint64_t v214;
  unsigned int v215;
  __int128 v216;
  uint64_t v217;
  uint64_t v218;
  __int128 v219;
  _QWORD v220[3];
  int v221;
  uint64_t v222;
  uint64_t v223;
  __int128 v224;
  uint64_t v225;
  int v226;
  int v227;
  uint64_t v228;
  uint64_t v229;
  _QWORD v230[3];
  int v231;
  uint64_t v232;
  uint64_t v233;
  _QWORD v234[3];
  int v235;
  uint64_t v236;
  uint64_t v237;
  __int128 v238;
  uint64_t v239;
  int v240;
  int v241;
  uint64_t v242;
  uint64_t v243;
  _QWORD v244[3];
  int v245;
  uint64_t v246;
  uint64_t v247;
  const char *v248;
  char *v249;
  uint64_t v250;
  int v251;
  _WORD v252[16];
  char *v253;
  uint64_t v254;
  _BYTE v255[16];
  _BYTE __dst[64];
  uint64_t v257;

  v2 = a2;
  v257 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 2000);
  v215 = *(_DWORD *)(v4 + 24);
  if ((v215 & 0x80) != 0)
  {
    v5 = *(_QWORD *)(v4 + 56);
    v6 = *(_QWORD *)(v4 + 64);
    v7 = *(_QWORD *)(v4 + 72);
    v8 = *(_DWORD *)(v4 + 80);
    v182 = *(_DWORD *)(v4 + 84);
    v9 = *(_QWORD *)(v4 + 88);
    v10 = *(_QWORD *)(v4 + 96);
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
  }
  if ((v215 & 0x100) != 0)
  {
    v13 = *(_OWORD *)(v4 + 56);
    v11 = *(_QWORD *)(v4 + 72);
    v12 = *(_QWORD *)(v4 + 80);
    v14 = *(_OWORD *)(v4 + 88);
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v13 = 0uLL;
    v14 = 0uLL;
  }
  v214 = *(unsigned int *)(v4 + 112);
  v15 = *(_QWORD *)(v4 + 104);
  if (v15)
    v16 = *(_DWORD *)(v15 + 20) != *(_DWORD *)(v15 + 24);
  else
    v16 = 0;
  v17 = *(_QWORD *)(a1 + 320);
  v18 = v17 != 0;
  v213 = v17;
  if (v17)
  {
    v19 = *(_QWORD *)(v17 + 40);
    if (v19 == v213 + 40)
    {
      v20 = 0;
    }
    else
    {
      if (v19)
        v20 = v19 - 24;
      else
        v20 = 0;
      if (*(unsigned __int8 *)(v20 + 16) - 29 >= 0xB)
        v20 = 0;
    }
    v21 = v20 != 0;
  }
  else
  {
    v21 = 0;
  }
  v212 = (uint64_t *)(a1 + 1984);
  v22 = v18 & (v215 >> 5);
  v23 = *(uint64_t ***)(v4 + 8);
  v24 = *(_QWORD *)(v4 + 16);
  v25 = *(_DWORD *)(a1 + 2040);
  if ((v215 & 8) == 0)
  {
    v26 = 0;
    goto LABEL_70;
  }
  v27 = v25 != (_DWORD)v214 || v16;
  v26 = v27 | v22;
  if ((v215 & 0x20) == 0 && v21)
  {
    v200 = v5;
    v202 = v7;
    v188 = v16;
    v28 = v21;
    v190 = v8;
    v29 = v10;
    v204 = v9;
    v206 = *(_QWORD *)(v4 + 16);
    v198 = v6;
    v192 = v14;
    v194 = v12;
    v208 = v13;
    v210 = *(uint64_t ***)(v4 + 8);
    if (a2)
    {
      v30 = (_QWORD *)sub_22E48B37C(*(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 1992) - *(_QWORD *)(v4 + 32));
    }
    else
    {
      v248 = "forwarded-prebranch";
      v252[0] = 259;
      v30 = (_QWORD *)operator new();
      v2 = 0;
      llvm::BasicBlock::BasicBlock();
      sub_22E5ED9B4((_QWORD *)a1, v30, 0);
    }
    v31 = *(_QWORD *)(v4 + 48);
    v32 = *(_QWORD *)(v213 + 40);
    v14 = v192;
    v12 = v194;
    v13 = v208;
    v10 = v29;
    v21 = v28;
    if (v32 == v213 + 40)
    {
      v33 = 0;
      v8 = v190;
      v16 = v188;
    }
    else
    {
      v33 = v32 - 24;
      if (v32)
        v34 = v32 - 24;
      else
        v34 = 0;
      v35 = *(unsigned __int8 *)(v34 + 16) - 40;
      if (v35 < 0xFFFFFFF5)
        v34 = 0;
      v8 = v190;
      v16 = v188;
      if (v32)
      {
        if (*(_BYTE *)(v34 + 16) == 30 && v35 >= 0xFFFFFFF5)
        {
          v37 = (_QWORD *)(v34 - 32);
          v9 = v204;
          if (*(_QWORD *)(v34 - 32))
          {
            **(_QWORD **)(v34 - 16) = *(_QWORD *)(v34 - 24);
            v38 = *(_QWORD *)(v34 - 24);
            if (v38)
              *(_QWORD *)(v38 + 16) = *(_QWORD *)(v34 - 16);
          }
          *v37 = v30;
          v7 = v202;
          if (v30)
          {
            v41 = v30[1];
            v40 = v30 + 1;
            v39 = v41;
            *(_QWORD *)(v34 - 24) = v41;
            if (v41)
              *(_QWORD *)(v39 + 16) = v34 - 24;
            *(_QWORD *)(v34 - 16) = v40;
            *v40 = v37;
          }
          v23 = v210;
          v24 = v206;
          v6 = v198;
          goto LABEL_69;
        }
      }
    }
    v42 = ((unint64_t)*(unsigned int *)(v33 + 20) >> 1) & 0x3FFFFFF;
    if ((_DWORD)v42)
    {
      v43 = 0;
      v44 = 0;
      v45 = v30 + 1;
      v46 = 2 * v42;
      v47 = 32;
      do
      {
        v48 = *(_DWORD *)(v33 + 20);
        if ((v48 & 0x40000000) != 0)
        {
          v49 = *(_QWORD *)(v33 - 8);
          if (*(_QWORD *)(v49 + v47) == v31)
          {
            v50 = v43 + 1;
LABEL_59:
            v51 = v49 + 32 * v50;
            if (v31)
            {
              **(_QWORD **)(v51 + 16) = *(_QWORD *)(v51 + 8);
              v54 = *(_QWORD *)(v51 + 8);
              if (v54)
                *(_QWORD *)(v54 + 16) = *(_QWORD *)(v51 + 16);
            }
            *(_QWORD *)v51 = v30;
            if (v30)
            {
              v52 = *v45;
              v53 = v49 + 32 * v50;
              *(_QWORD *)(v53 + 8) = *v45;
              if (v52)
                *(_QWORD *)(v52 + 16) = v53 + 8;
              *(_QWORD *)(v53 + 16) = v45;
              *v45 = v51;
            }
          }
        }
        else
        {
          v49 = v33 - 32 * (v48 & 0x7FFFFFF);
          if (*(_QWORD *)(v49 + v47) == v31)
          {
            v50 = (2 * v44) | 1;
            goto LABEL_59;
          }
        }
        ++v44;
        v43 += 2;
        v47 += 64;
      }
      while (v46 != v43);
    }
    v23 = v210;
    v9 = v204;
    v24 = v206;
    v6 = v198;
    v7 = v202;
LABEL_69:
    v5 = v200;
  }
LABEL_70:
  if ((v26 & 1) == 0 && !v23)
  {
    sub_22E48B3F4(a1, *(_QWORD *)(v4 + 48));
    return sub_22E489B34(v212);
  }
  v184 = v21;
  v196 = v25;
  v180 = v2;
  v183 = v10;
  v203 = v7;
  v205 = v9;
  v199 = v6;
  v201 = v5;
  v207 = v24;
  v193 = v14;
  v195 = v12;
  v209 = v13;
  v211 = v23;
  v179 = v11;
  v186 = (uint64_t *)(a1 + 272);
  v56 = *(unsigned int *)(v4 + 24);
  if (((*(_DWORD *)(v4 + 24) >> 9) & 0xFFFu) > 0x40)
  {
    v58 = v22;
    v59 = v8;
    v60 = v16;
    v61 = (void *)operator new[]();
    memcpy(v61, (const void *)(v4 + 120), (v56 >> 9) & 0xFFF);
    LODWORD(v56) = *(_DWORD *)(v4 + 24);
    v189 = v61;
    v62 = v61;
    v16 = v60;
    v8 = v59;
    v22 = v58;
    v57 = v62;
  }
  else
  {
    v57 = __dst;
    memcpy(__dst, (const void *)(v4 + 120), (v56 >> 9) & 0xFFF);
    v189 = 0;
  }
  v191 = (_QWORD *)(a1 + 320);
  v187 = (v56 >> 2) & 6;
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 152) + 8) & 0x800000000000) != 0)
  {
    v68 = (v56 & 0x40) == 0;
    v66 = sub_22E4D1FAC((_QWORD *)a1);
    if ((v26 & 1) != 0)
    {
      v64 = v22 ^ 1;
      v69 = v22 ^ 1 | v184;
      if (v196 != (_DWORD)v214)
        v69 = 1;
      if (((v69 | v16) & 1) != 0)
      {
        v67 = v196 != v214;
LABEL_87:
        v178 = (llvm::BasicBlock *)sub_22E48B37C(*(_QWORD *)(a1 + 144), v4);
        if (v22)
        {
          if (!v184)
          {
            v71 = v22;
            llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 336), v70);
            v72 = llvm::ConstantInt::get();
            v74 = sub_22E48B6FC(a1, v73);
            v76 = 0;
            v77 = v74 & 0xFFFFFFFFFFFFFFF8;
            if (v74 <= 7)
              v77 = 0;
            v78 = v75 & 0xFFFFFFFFFFFFFFF8;
            if (v74 <= 7)
              v78 = 0;
            v234[0] = v77;
            v234[1] = v78;
            if (v74 >= 8)
              v76 = 1 << (v75 & 7 | (8 * (v74 & 7)));
            v234[2] = v76;
            v235 = 0;
            v236 = 0;
            v237 = 0;
            sub_22E3BEDDC(v186, v72, v234, 0);
            v175 = 0;
            v176 = 0;
            v22 = v71;
LABEL_135:
            sub_22E5ED9B4((_QWORD *)a1, v178, 0);
            if (v68)
            {
              if (v66 == &off_24FA63A60)
                sub_22F253250(a1);
              else
                sub_22F2532B8(a1);
            }
            v185 = v22;
            v96 = *(_QWORD *)(v4 + 32);
            v97 = *(_DWORD **)(v4 + 104);
            if (v97 && v97[18] != v97[5] - v97[6]
              || (v213 ? (v98 = v180) : (v98 = 0),
                  v196 != (_DWORD)v214 ? (v99 = v96 == 0) : (v99 = 1),
                  !v99 ? (v100 = 0) : (v100 = 1),
                  v98 == 1 || (v100 & 1) == 0))
            {
              v101 = sub_22E48B37C(*(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 1992) - v96);
              v97 = *(_DWORD **)(v4 + 104);
            }
            else
            {
              v101 = 0;
            }
            v253 = v255;
            v254 = 0x200000000;
            v177 = v57;
            if (v97)
            {
              v102 = v97[18];
              v103 = v97[5] - v97[6];
              v105 = v102 != 1 || v103 != 1 || v67;
              if (((v185 | v105) & 1) == 0)
              {
                v106 = (llvm::Instruction *)(sub_22E48B6FC(a1, v95) & 0xFFFFFFFFFFFFFFF8);
                v107 = *((_QWORD *)v106 + 1);
                if (v107 && !*(_QWORD *)(v107 + 8))
                {
                  llvm::Instruction::eraseFromParent(*(llvm::Instruction **)(v107 + 24));
                  llvm::Instruction::eraseFromParent(v106);
                  *(_OWORD *)(a1 + 2624) = 0u;
                }
                goto LABEL_173;
              }
            }
            else
            {
              v102 = 0;
            }
            v109 = v196 == (_DWORD)v214 || v96 != 0;
            if ((v64 | v180) != 1 || v102 || !v109)
            {
              if (!v101)
                v101 = sub_22F24F15C(a1);
              v112 = sub_22E48B6FC(a1, v95);
              v114 = 0;
              v115 = v112 & 0xFFFFFFFFFFFFFFF8;
              if (v112 <= 7)
                v115 = 0;
              v116 = v113 & 0xFFFFFFFFFFFFFFF8;
              if (v112 <= 7)
                v116 = 0;
              v230[0] = v115;
              v230[1] = v116;
              if (v112 >= 8)
                v114 = 1 << (v113 & 7 | (8 * (v112 & 7)));
              v230[2] = v114;
              v231 = 0;
              v232 = 0;
              v233 = 0;
              v248 = "cleanup.dest";
              v252[0] = 259;
              v117 = sub_22E48B768((uint64_t)v230, (uint64_t)&v248, 0, a1);
              v118 = llvm::User::operator new((llvm::User *)0x40);
              MEMORY[0x23489C204](v118, v117, v101, 10, 0);
              v120 = v254;
              if (v254 >= HIDWORD(v254))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v120 = v254;
              }
              *(_QWORD *)&v253[8 * v120] = v117;
              v121 = v254 + 1;
              LODWORD(v254) = v121;
              if (v121 >= HIDWORD(v254))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v121 = v254;
              }
              v122 = 0;
              *(_QWORD *)&v253[8 * v121] = v118;
              LODWORD(v254) = v254 + 1;
              if (v213)
              {
                if ((v180 & 1) == 0)
                {
                  v248 = "cleanup.cont";
                  v252[0] = 259;
                  v122 = operator new();
                  llvm::BasicBlock::BasicBlock();
                  if (v185)
                  {
                    llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 336), v119);
                    llvm::ConstantInt::get();
                    llvm::SwitchInst::addCase();
                  }
                }
              }
              v187 |= 8u;
              v123 = *(_QWORD *)(v4 + 104);
              if (v123)
              {
                v124 = *(unsigned int *)(v123 + 72);
                if ((_DWORD)v124)
                {
                  v125 = 0;
                  v126 = 16 * v124;
                  do
                  {
                    llvm::SwitchInst::addCase();
                    v125 += 16;
                  }
                  while (v126 != v125);
                }
              }
              v197 = (_QWORD *)v122;
              if (!v109)
              {
                v248 = (const char *)v252;
                v249 = (char *)v252;
                v250 = 4;
                v251 = 0;
                v127 = *(unsigned int *)(a1 + 2040);
                if ((_DWORD)v127)
                {
                  v128 = 0;
                  v181 = (llvm::BasicBlock ***)((char *)v178 + 8);
                  v129 = 32 * v127;
                  do
                  {
                    v130 = *(_QWORD *)(a1 + 2032);
                    if (*(_QWORD *)(v130 + v128 + 8))
                    {
                      if (!*(_QWORD *)(v130 + v128))
                      {
                        v131 = v130 + v128;
                        llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 336), v119);
                        v132 = llvm::ConstantInt::get();
                        v134 = sub_22E48B6FC(a1, v133);
                        v136 = v134 & 0xFFFFFFFFFFFFFFF8;
                        if (v134 <= 7)
                          v136 = 0;
                        v137 = v135 & 0xFFFFFFFFFFFFFFF8;
                        if (v134 <= 7)
                          v137 = 0;
                        v244[0] = v136;
                        v244[1] = v137;
                        v138 = 1 << (v135 & 7 | (8 * (v134 & 7)));
                        if (v134 < 8)
                          v138 = 0;
                        v244[2] = v138;
                        v245 = 0;
                        v246 = 0;
                        v247 = 0;
                        sub_22E48B800(v132, (uint64_t)v244, *(_QWORD *)(v131 + 24), a1);
                        v139 = *(_QWORD *)(v131 + 24);
                        v140 = (llvm::BasicBlock **)(v139 - 32);
                        if (*(_QWORD *)(v139 - 32))
                        {
                          **(_QWORD **)(v139 - 16) = *(_QWORD *)(v139 - 24);
                          v141 = *(_QWORD *)(v139 - 24);
                          if (v141)
                            *(_QWORD *)(v141 + 16) = *(_QWORD *)(v139 - 16);
                        }
                        *v140 = v178;
                        if (v178)
                        {
                          v142 = *v181;
                          *(_QWORD *)(v139 - 24) = *v181;
                          if (v142)
                            v142[2] = (llvm::BasicBlock *)(v139 - 24);
                          *(_QWORD *)(v139 - 16) = v181;
                          *v181 = v140;
                        }
                      }
                      sub_22E3BA850((uint64_t)&v248, *(const void **)(v130 + v128 + 8));
                      if ((_BYTE)v119)
                      {
                        llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 336), v119);
                        llvm::ConstantInt::get();
                        llvm::SwitchInst::addCase();
                      }
                    }
                    v128 += 32;
                  }
                  while (v129 != v128);
                  v144 = v248;
                  v143 = v249;
                  *(_DWORD *)(a1 + 2040) = 0;
                  v57 = v177;
                  if (v143 != v144)
                    free(v143);
                }
                else
                {
                  *(_DWORD *)(a1 + 2040) = 0;
                }
              }
LABEL_225:
              sub_22E489B34(v212);
              *(_QWORD *)&v224 = v201;
              *((_QWORD *)&v224 + 1) = v199;
              v225 = v203;
              v226 = v8;
              v227 = v182;
              v228 = v205;
              v229 = v183;
              sub_22E48B560((_QWORD *)a1, (uint64_t)v57, v187, &v224);
              v147 = *(llvm::BasicBlock **)(a1 + 320);
              if ((_DWORD)v254)
              {
                v148 = 0;
                v149 = (uint64_t *)((char *)v147 + 40);
                v150 = 8 * v254;
                do
                {
                  v151 = *(_QWORD *)&v253[v148];
                  llvm::SymbolTableListTraits<llvm::Instruction>::addNodeToList();
                  v152 = *v149;
                  *(_QWORD *)(v151 + 24) = *v149;
                  *(_QWORD *)(v151 + 32) = v149;
                  v151 += 24;
                  *(_QWORD *)(v152 + 8) = v151;
                  *v149 = v151;
                  v148 += 8;
                }
                while (v150 != v148);
              }
              v153 = *(_DWORD *)(a1 + 2040);
              if (v153 > v214)
              {
                v154 = (llvm::BasicBlock ***)((char *)v178 + 8);
                v155 = v153 - v214;
                v156 = 32 * v214;
                do
                {
                  v157 = *(_QWORD *)(a1 + 2032);
                  if (*(_QWORD *)(v157 + v156 + 8))
                  {
                    if (!*(_QWORD *)(v157 + v156))
                    {
                      v158 = v157 + v156;
                      llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 336), v146);
                      v159 = llvm::ConstantInt::get();
                      v161 = sub_22E48B6FC(a1, v160);
                      v163 = v161 & 0xFFFFFFFFFFFFFFF8;
                      if (v161 <= 7)
                        v163 = 0;
                      v164 = v162 & 0xFFFFFFFFFFFFFFF8;
                      if (v161 <= 7)
                        v164 = 0;
                      v220[0] = v163;
                      v220[1] = v164;
                      v165 = 1 << (v162 & 7 | (8 * (v161 & 7)));
                      if (v161 < 8)
                        v165 = 0;
                      v220[2] = v165;
                      v221 = 0;
                      v222 = 0;
                      v223 = 0;
                      sub_22E48B800(v159, (uint64_t)v220, *(_QWORD *)(v158 + 24), a1);
                      v166 = *(_QWORD *)(v158 + 24);
                      v167 = (llvm::BasicBlock **)(v166 - 32);
                      if (*(_QWORD *)(v166 - 32))
                      {
                        **(_QWORD **)(v166 - 16) = *(_QWORD *)(v166 - 24);
                        v168 = *(_QWORD *)(v166 - 24);
                        if (v168)
                          *(_QWORD *)(v168 + 16) = *(_QWORD *)(v166 - 16);
                      }
                      *v167 = v178;
                      if (v178)
                      {
                        v169 = *v154;
                        *(_QWORD *)(v166 - 24) = *v154;
                        if (v169)
                          v169[2] = (llvm::BasicBlock *)(v166 - 24);
                        *(_QWORD *)(v166 - 16) = v154;
                        *v154 = v167;
                      }
                    }
                    *(_QWORD *)(v157 + v156) = v147;
                  }
                  v156 += 32;
                  --v155;
                }
                while (v155);
              }
              if ((((v213 != 0) ^ v185) & 1) != 0)
              {
                v80 = v211;
                if (v176)
                {
                  sub_22E3CB840((uint64_t)v186, v176, v175);
                }
                else
                {
                  *v191 = 0;
                  *(_QWORD *)(a1 + 328) = 0;
                }
              }
              else
              {
                v170 = v185 ^ 1;
                if (!v197)
                  v170 = 1;
                v80 = v211;
                if ((v170 & 1) != 0)
                {
                  v57 = v177;
                  if ((v185 & 1) == 0)
                  {
                    *v191 = 0;
                    *(_QWORD *)(a1 + 328) = 0;
                  }
                  goto LABEL_258;
                }
                sub_22E5ED9B4((_QWORD *)a1, v197, 0);
              }
              v57 = v177;
LABEL_258:
              v171 = sub_22E48B8A0(a1, (uint64_t **)v178);
              if (v171 != v178 && v178 == v147)
              {
                v172 = *(unsigned int *)(a1 + 2040);
                if (v214 < v172)
                {
                  v173 = v172 - v214;
                  v174 = (llvm::BasicBlock **)(*(_QWORD *)(a1 + 2032) + 32 * v214);
                  do
                  {
                    *v174 = v171;
                    v174 += 4;
                    --v173;
                  }
                  while (v173);
                }
              }
              if (v253 != v255)
                free(v253);
              goto LABEL_105;
            }
LABEL_173:
            v110 = llvm::User::operator new((llvm::User *)0x40);
            llvm::BranchInst::BranchInst();
            v111 = v254;
            if (v254 >= HIDWORD(v254))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v111 = v254;
            }
            v197 = 0;
            *(_QWORD *)&v253[8 * v111] = v110;
            LODWORD(v254) = v254 + 1;
            goto LABEL_225;
          }
        }
        else if (v213)
        {
          v175 = *(_QWORD *)(a1 + 328);
          v176 = *(_QWORD *)(a1 + 320);
          *v191 = 0;
          *(_QWORD *)(a1 + 328) = 0;
          goto LABEL_135;
        }
        v175 = 0;
        v176 = 0;
        goto LABEL_135;
      }
      if ((v56 & 0x40) == 0 && sub_22E48B528(a1))
      {
        if (v66 == &off_24FA63A60)
          sub_22F253250(a1);
        else
          sub_22F2532B8(a1);
      }
      goto LABEL_103;
    }
    if ((v56 & 0x40) == 0)
    {
      v79 = sub_22E48B528(a1);
      if (v66 == &off_24FA63A60)
      {
        if (v79)
          sub_22F253250(a1);
      }
    }
  }
  else
  {
    v63 = sub_22E4D1FAC((_QWORD *)a1);
    if ((v26 & 1) != 0)
    {
      v64 = v22 ^ 1;
      v65 = v22 ^ 1 | v184;
      if (v196 != (_DWORD)v214)
        v65 = 1;
      if (((v65 | v16) & 1) != 0)
      {
        v66 = v63;
        v67 = v196 != v214;
        v68 = 0;
        goto LABEL_87;
      }
LABEL_103:
      sub_22E48B3F4(a1, *(_QWORD *)(v4 + 48));
      sub_22E489B34(v212);
      *(_QWORD *)&v238 = v201;
      *((_QWORD *)&v238 + 1) = v199;
      v239 = v203;
      v240 = v8;
      v241 = v182;
      v242 = v205;
      v243 = v183;
      sub_22E48B560((_QWORD *)a1, (uint64_t)v57, v187, &v238);
      goto LABEL_104;
    }
  }
  sub_22E48B3F4(a1, *(_QWORD *)(v4 + 48));
  sub_22E489B34(v212);
LABEL_104:
  v80 = v211;
LABEL_105:
  if (v80)
  {
    v82 = *(_QWORD *)(a1 + 320);
    v81 = *(_QWORD *)(a1 + 328);
    *v191 = 0;
    *(_QWORD *)(a1 + 328) = 0;
    sub_22E5ED9B4((_QWORD *)a1, v80, 0);
    v83 = sub_22F25C964((_QWORD *)a1, v207);
    v84 = *(_QWORD *)(a1 + 2616);
    v85 = sub_22E4D1FAC((_QWORD *)a1);
    v88 = v85 == &off_24FA63A80 || v85 == &off_24FA63A90 || v85 == &off_24FA63A60;
    if (v85 != &off_24FA63A70)
    {
      v89 = 0;
      if (!v88)
        goto LABEL_117;
    }
    v145 = *(_QWORD *)(a1 + 2616);
    if (!v145)
      v145 = llvm::ConstantTokenNone::get(*(llvm::ConstantTokenNone **)(*(_QWORD *)(a1 + 144) + 232), 0);
    v252[0] = 257;
    v89 = sub_22F253320(v186, v145, 0, 0, (uint64_t)&v248);
    *(_QWORD *)(a1 + 2616) = v89;
    if (!v88)
    {
LABEL_117:
      v90 = sub_22E489830(v212, 32);
      v91 = *(_QWORD *)(a1 + 2016);
      *(_QWORD *)v90 = 0;
      *((_QWORD *)v90 + 1) = 0;
      *((_QWORD *)v90 + 2) = v91;
      v90[24] = v90[24] & 0xF8 | 2;
      *(_QWORD *)(a1 + 2016) = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000);
    }
    if ((v215 & 0x20) != 0 || (_QWORD)v209)
    {
      v216 = v209;
      v217 = v179;
      v218 = v195;
      v219 = v193;
      sub_22E48B560((_QWORD *)a1, (uint64_t)v57, v187 | 1, &v216);
    }
    if (v89)
    {
      v93 = a1 + 272;
      sub_22F2533B8(v186, v89, (uint64_t)v83);
    }
    else
    {
      v92 = llvm::User::operator new((llvm::User *)0x40);
      llvm::BranchInst::BranchInst();
      v252[0] = 257;
      v93 = a1 + 272;
      sub_22E3C12C8(v186, v92, (uint64_t)&v248);
    }
    if (!v88)
    {
      v94 = *(_QWORD *)(a1 + 2000);
      *(_QWORD *)(a1 + 2016) = *(_QWORD *)(v94 + 16);
      *(_QWORD *)(a1 + 2000) = v94 + 32;
    }
    if (v82)
    {
      sub_22E3CB840(v93, v82, v81);
    }
    else
    {
      *v191 = 0;
      *(_QWORD *)(a1 + 328) = 0;
    }
    sub_22E48B8A0(a1, v211);
    *(_QWORD *)(a1 + 2616) = v84;
  }
  result = v189;
  if (v189)
    return (_QWORD *)MEMORY[0x2348A0E84](v189, 0x1000C8077774924);
  return result;
}

void sub_22E48B274(_QWORD *a1, uint64_t a2, unint64_t a3, llvm::AllocaInst ***a4, uint64_t a5)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unint64_t v11;
  size_t v12;
  const void *v13;
  char *v14;
  unint64_t v15;

  sub_22E489F30((uint64_t)a1, a2, a4, a5);
  v7 = a1[289];
  if (v7 != a3)
  {
    v8 = a3;
    do
    {
      v9 = a1[288];
      v10 = (unsigned int *)(v9 + v8);
      v11 = v8 + 8;
      v12 = *(unsigned int *)(v9 + v8);
      v13 = (const void *)(v9 + v11);
      v14 = sub_22E4899EC((uint64_t)(a1 + 248), v10[1], v12);
      memcpy(v14, v13, v12);
      v8 = v11 + *v10;
      if ((v10[1] & 0x80000000) != 0)
      {
        sub_22F2531F0((uint64_t)a1, *(_QWORD *)(a1[288] + v8), *(_QWORD *)(a1[288] + v8 + 8));
        v8 += 16;
      }
    }
    while (v8 != v7);
    v15 = a1[289];
    if (v15 != a3)
    {
      if (v15 <= a3)
      {
        if (a1[290] < a3)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v15 = a1[289];
        }
        if (a3 != v15)
          bzero((void *)(a1[288] + v15), a3 - v15);
      }
      a1[289] = a3;
    }
  }
}

uint64_t sub_22E48B37C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a2 + 48);
  if (!result)
  {
    operator new();
    result = llvm::BasicBlock::BasicBlock();
    *(_QWORD *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_22E48B3F4(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  _DWORD *v13;
  int v14;
  llvm::Instruction **v15;
  llvm::Instruction *v16;

  if (a2)
  {
    v3 = sub_22F24F15C(result);
    v4 = *(_QWORD *)(a2 + 8);
    if (v4)
    {
      v5 = v3;
      v6 = (uint64_t *)(v3 + 8);
      do
      {
        while (1)
        {
          v7 = v4;
          v8 = (uint64_t *)(v4 + 8);
          v4 = *(_QWORD *)(v4 + 8);
          if (*(_QWORD *)v7)
          {
            **(_QWORD **)(v7 + 16) = v4;
            v9 = *(_QWORD *)(v7 + 8);
            if (v9)
              *(_QWORD *)(v9 + 16) = *(_QWORD *)(v7 + 16);
          }
          *(_QWORD *)v7 = v5;
          if (v5)
          {
            v10 = *v6;
            *v8 = *v6;
            if (v10)
              *(_QWORD *)(v10 + 16) = v8;
            *(_QWORD *)(v7 + 16) = v6;
            *v6 = v7;
          }
          v11 = *(_DWORD **)(v7 + 24);
          v12 = v11[5];
          if ((v12 & 0x7FFFFFE) == 4)
          {
            v13 = (v12 & 0x40000000) != 0 ? (_DWORD *)*((_QWORD *)v11 - 1) : &v11[-8 * (v12 & 0x7FFFFFF)];
            if (*((_QWORD *)v13 + 4) == v5)
              break;
          }
          if (!v4)
            goto LABEL_22;
        }
        llvm::User::operator new((llvm::User *)0x40);
        llvm::BranchInst::BranchInst();
        v14 = v11[5];
        if ((v14 & 0x40000000) != 0)
          v15 = (llvm::Instruction **)*((_QWORD *)v11 - 1);
        else
          v15 = (llvm::Instruction **)&v11[-8 * (v14 & 0x7FFFFFF)];
        v16 = *v15;
        llvm::Instruction::eraseFromParent((llvm::Instruction *)v11);
        llvm::Instruction::eraseFromParent(v16);
      }
      while (v4);
    }
LABEL_22:
    MEMORY[0x23489C078](a2);
    JUMPOUT(0x2348A0E9CLL);
  }
  return result;
}

uint64_t sub_22E48B528(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 2016);
  if (!v1)
    return 0;
  while (1)
  {
    v2 = *(_QWORD *)(a1 + 1992) - v1;
    if ((*(_BYTE *)(v2 + 24) & 7) != 0 || (*(_BYTE *)(v2 + 24) & 0x40) == 0)
      break;
    v1 = *(_QWORD *)(v2 + 16);
    if (!v1)
      return 0;
  }
  return sub_22F25CF64(a1);
}

uint64_t sub_22E48B560(_QWORD *a1, uint64_t a2, unsigned int a3, _OWORD *a4)
{
  _QWORD *v8;
  _QWORD *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  _OWORD v14[3];
  const char *v15;
  __int16 v16;

  if (*(_QWORD *)a4)
  {
    v8 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v15 = "cleanup.action";
    v16 = 259;
    v9 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v10 = a4[1];
    v14[0] = *a4;
    v14[1] = v10;
    v14[2] = a4[2];
    v11 = sub_22E3C43AC(a1 + 34, (uint64_t)v14, "cleanup.is_active");
    v12 = llvm::User::operator new((llvm::User *)0x40);
    MEMORY[0x23489C09C](v12, v9, v8, v11, 0);
    v16 = 257;
    sub_22E3C12C8(a1 + 34, v12, (uint64_t)&v15);
    sub_22E5ED9B4(a1, v9, 0);
  }
  else
  {
    v8 = 0;
  }
  result = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)a2 + 16))(a2, a1, a3);
  if (*(_QWORD *)a4)
    return sub_22E5ED9B4(a1, v8, 0);
  return result;
}

unint64_t sub_22E48B6FC(uint64_t a1, llvm::LLVMContext *a2)
{
  unint64_t result;
  llvm::Type *Int32Ty;
  uint64_t v5;
  const char *v6;
  __int16 v7;

  result = *(_QWORD *)(a1 + 2624);
  if (result < 8)
  {
    Int32Ty = (llvm::Type *)llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 336), a2);
    v6 = "cleanup.dest.slot";
    v7 = 259;
    result = sub_22E4D84FC(a1, Int32Ty, (uint64_t)&v6);
    *(_QWORD *)(a1 + 2624) = result;
    *(_QWORD *)(a1 + 2632) = v5;
  }
  return result;
}

uint64_t sub_22E48B768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::User::operator new((llvm::User *)0x40);
  if ((*(_BYTE *)(a1 + 24) & 3) != 0)
    sub_22F28ABCC(a1, a4);
  return llvm::LoadInst::LoadInst();
}

uint64_t sub_22E48B800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t result;

  v6 = llvm::User::operator new((llvm::User *)0x40);
  if ((*(_BYTE *)(a2 + 24) & 3) != 0)
    sub_22F28ABCC(a2, a4);
  result = llvm::StoreInst::StoreInst();
  *(_WORD *)(v6 + 18) = *(_WORD *)(v6 + 18) & 0xFF81 | (2 * (63 - __clz(*(_QWORD *)(a2 + 16))));
  return result;
}

llvm::BasicBlock *sub_22E48B8A0(uint64_t a1, uint64_t **this)
{
  uint64_t SinglePredecessor;
  llvm::BasicBlock *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  BOOL v11;
  llvm::BasicBlock *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  SinglePredecessor = llvm::BasicBlock::getSinglePredecessor((llvm::BasicBlock *)this);
  if (!SinglePredecessor)
    return (llvm::BasicBlock *)this;
  v5 = (llvm::BasicBlock *)SinglePredecessor;
  v7 = (uint64_t *)(SinglePredecessor + 40);
  v6 = *(_QWORD *)(SinglePredecessor + 40);
  if (v6 == SinglePredecessor + 40)
    return (llvm::BasicBlock *)this;
  v8 = v6 ? v6 - 24 : 0;
  v9 = *(unsigned __int8 *)(v8 + 16) - 40;
  v10 = v9 >= 0xFFFFFFF5 ? v8 : 0;
  if (!v6)
    return (llvm::BasicBlock *)this;
  v11 = *(_BYTE *)(v10 + 16) == 30 && v9 >= 0xFFFFFFF5;
  if (!v11 || (*(_DWORD *)(v10 + 20) & 0x7FFFFFF) == 3)
    return (llvm::BasicBlock *)this;
  v13 = *(llvm::BasicBlock **)(a1 + 320);
  llvm::Instruction::eraseFromParent((llvm::Instruction *)v10);
  llvm::Value::replaceAllUsesWith();
  v14 = (uint64_t *)(this + 5);
  if (this[5] != (uint64_t *)(this + 5) && v5 != (llvm::BasicBlock *)this)
  {
    v15 = this[6];
    llvm::SymbolTableListTraits<llvm::Instruction>::transferNodesFromList();
    if (v15 != v14)
    {
      v16 = *v14;
      v17 = *v15;
      *(_QWORD *)(v17 + 8) = v14;
      *v14 = v17;
      v18 = *v7;
      *(_QWORD *)(v16 + 8) = v7;
      *v15 = v18;
      *(_QWORD *)(v18 + 8) = v15;
      *v7 = v16;
    }
  }
  llvm::BasicBlock::eraseFromParent((llvm::BasicBlock *)this);
  if (v13 == (llvm::BasicBlock *)this)
  {
    *(_QWORD *)(a1 + 320) = v5;
    *(_QWORD *)(a1 + 328) = v7;
  }
  return v5;
}

BOOL sub_22E48B9C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 2008);
  if (!v2)
    return 1;
  v3 = *(_QWORD *)(a1 + 1992);
  while ((*(_BYTE *)(v3 - v2 + 24) & 0x20) == 0)
  {
    v2 = *(_QWORD *)(v3 - v2 + 32);
    if (!v2)
      return 1;
  }
  return v2 <= *(_QWORD *)(a2 + 8);
}

_QWORD *sub_22E48BA00(_QWORD *result, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  llvm::LLVMContext *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  llvm::LLVMContext *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  _OWORD *v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  _QWORD *v37;
  BOOL v38;
  char *v39;
  _QWORD v40[3];
  int v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD v44[2];
  __int16 v45;

  if (result[40])
  {
    v3 = (uint64_t)result;
    v4 = result + 40;
    v5 = result + 34;
    v6 = llvm::User::operator new((llvm::User *)0x40);
    llvm::BranchInst::BranchInst();
    v45 = 257;
    result = (_QWORD *)sub_22E3C12C8(v5, v6, (uint64_t)v44);
    v8 = *(_QWORD *)(v3 + 2008);
    if (v8)
    {
      v9 = (uint64_t)result;
      v10 = *(_QWORD *)(v3 + 1992);
      while ((*(_BYTE *)(v10 - v8 + 24) & 0x20) == 0)
      {
        v8 = *(_QWORD *)(v10 - v8 + 32);
        if (!v8)
          goto LABEL_32;
      }
      v11 = *(_QWORD *)(a2 + 8);
      if (v8 > v11)
      {
        if (v11 < 0)
        {
          memset(v44, 0, sizeof(v44));
          v29 = *(unsigned int *)(v3 + 2040);
          v30 = *(_QWORD *)(v3 + 2032);
          v31 = (char *)v44;
          if (v29 >= *(_DWORD *)(v3 + 2044))
          {
            v38 = v30 + 32 * v29 > (unint64_t)v44;
            if (v30 <= (unint64_t)v44 && v38)
            {
              v39 = (char *)v44 - v30;
              result = (_QWORD *)llvm::SmallVectorBase<unsigned int>::grow_pod();
              v30 = *(_QWORD *)(v3 + 2032);
              v31 = &v39[v30];
            }
            else
            {
              result = (_QWORD *)llvm::SmallVectorBase<unsigned int>::grow_pod();
              v30 = *(_QWORD *)(v3 + 2032);
              v31 = (char *)v44;
            }
          }
          v32 = (_OWORD *)(v30 + 32 * *(unsigned int *)(v3 + 2040));
          v33 = *((_OWORD *)v31 + 1);
          *v32 = *(_OWORD *)v31;
          v32[1] = v33;
          v34 = (*(_DWORD *)(v3 + 2040) + 1);
          *(_DWORD *)(v3 + 2040) = v34;
          v35 = *(_QWORD *)(v3 + 2032) + 32 * v34;
          *(_QWORD *)(v35 - 24) = *(_QWORD *)a2;
          *(_DWORD *)(v35 - 16) = *(_DWORD *)(a2 + 16);
          *(_QWORD *)(v35 - 8) = v9;
          *(_QWORD *)(v35 - 32) = 0;
        }
        else
        {
          llvm::Type::getInt32Ty(*(llvm::Type **)(v3 + 336), v7);
          v12 = llvm::ConstantInt::get();
          v14 = sub_22E48B6FC(v3, v13);
          v16 = v14 & 0xFFFFFFFFFFFFFFF8;
          if (v14 <= 7)
            v16 = 0;
          v17 = v15 & 0xFFFFFFFFFFFFFFF8;
          if (v14 <= 7)
            v17 = 0;
          v40[0] = v16;
          v40[1] = v17;
          v18 = 1 << (v15 & 7 | (8 * (v14 & 7)));
          if (v14 < 8)
            v18 = 0;
          v40[2] = v18;
          v41 = 0;
          v42 = 0;
          v43 = 0;
          sub_22E48B800(v12, (uint64_t)v40, v9, v3);
          result = (_QWORD *)sub_22E48B37C(*(_QWORD *)(v3 + 144), *(_QWORD *)(v3 + 1992) - v8);
          v19 = (_QWORD *)(v9 - 32);
          if (*(_QWORD *)(v9 - 32))
          {
            **(_QWORD **)(v9 - 16) = *(_QWORD *)(v9 - 24);
            v20 = *(_QWORD *)(v9 - 24);
            if (v20)
              *(_QWORD *)(v20 + 16) = *(_QWORD *)(v9 - 16);
          }
          *v19 = result;
          if (result)
          {
            v22 = result[1];
            ++result;
            v21 = v22;
            *(_QWORD *)(v9 - 24) = v22;
            if (v22)
              *(_QWORD *)(v21 + 16) = v9 - 24;
            *(_QWORD *)(v9 - 16) = result;
            *result = v19;
          }
          v23 = *(_QWORD *)(a2 + 8);
          if (v23 < v8)
          {
            while (1)
            {
              v24 = *(_QWORD *)(v3 + 1992) - v8;
              v8 = *(_QWORD *)(v24 + 32);
              v25 = *(const void **)a2;
              sub_22E48C1AC(v24);
              v27 = v26;
              result = (_QWORD *)sub_22E3BA850(v26, v25);
              if (v23 >= v8)
                break;
              if (!v28)
                goto LABEL_32;
            }
            if (v28)
            {
              v36 = *(_DWORD *)(v27 + 72);
              if (v36 >= *(_DWORD *)(v27 + 76))
              {
                result = (_QWORD *)llvm::SmallVectorBase<unsigned int>::grow_pod();
                v36 = *(_DWORD *)(v27 + 72);
              }
              v37 = (_QWORD *)(*(_QWORD *)(v27 + 64) + 16 * v36);
              *v37 = v25;
              v37[1] = v12;
              ++*(_DWORD *)(v27 + 72);
            }
          }
        }
      }
    }
LABEL_32:
    *v4 = 0;
    v4[1] = 0;
  }
  return result;
}

uint64_t sub_22E48BCD0(uint64_t result, llvm::LLVMContext *a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  int v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  llvm::Type *Int1Ty;
  unint64_t v20;
  llvm::LLVMContext *v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  llvm::LLVMContext *i;
  uint64_t v30;
  uint64_t v31;
  llvm::LLVMContext *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  _QWORD v37[3];
  int v38;
  int v39;
  __int128 v40;
  _QWORD v41[3];
  int v42;
  __int128 v43;
  _QWORD v44[3];
  int v45;
  __int128 v46;
  const char *v47;
  __int16 v48;

  v5 = result;
  v6 = *(_QWORD *)(result + 1992);
  v7 = v6 - (_QWORD)a2;
  if (a3)
    v8 = 1;
  else
    v8 = *(_QWORD *)(result + 5832) == 0;
  v9 = !v8;
  v10 = *(_DWORD *)(v7 + 24);
  if ((v10 & 8) == 0)
  {
LABEL_8:
    v11 = 0;
    if ((v10 & 0x10) == 0)
      goto LABEL_13;
LABEL_15:
    if ((v9 & 1) != 0)
    {
LABEL_19:
      *(_DWORD *)(v7 + 24) = v10 | 0x100;
      goto LABEL_20;
    }
    v6 = *(_QWORD *)(result + 1992);
    goto LABEL_17;
  }
  if ((v9 & 1) != 0 || *(_QWORD *)(v7 + 48))
  {
LABEL_12:
    v10 |= 0x80u;
    *(_DWORD *)(v7 + 24) = v10;
    v11 = 1;
    if ((v10 & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_15;
  }
  v32 = *(llvm::LLVMContext **)(result + 2008);
  if (v32 != a2)
  {
    while (1)
    {
      v33 = v6 - (_QWORD)v32;
      if (*(_QWORD *)(v33 + 48))
        goto LABEL_12;
      v32 = *(llvm::LLVMContext **)(v33 + 32);
      if (v32 == a2)
        goto LABEL_8;
    }
  }
  if ((v10 & 0x10) == 0)
    return result;
  v11 = 0;
LABEL_17:
  v12 = *(_QWORD *)(v6 - (_QWORD)a2 + 8);
  if (v12 && *(_QWORD *)(v12 + 8))
    goto LABEL_19;
  for (i = *(llvm::LLVMContext **)(result + 2016); i != a2; i = *(llvm::LLVMContext **)(v30 + 16))
  {
    v30 = v6 - (_QWORD)i;
    v31 = *(_QWORD *)(v30 + 8);
    if (v31 && *(_QWORD *)(v31 + 8))
      goto LABEL_19;
  }
LABEL_13:
  if (!v11)
    return result;
LABEL_20:
  v13 = *(_OWORD *)(v7 + 88);
  v14 = *(_QWORD *)(v7 + 56);
  v15 = *(_DWORD *)(v7 + 84);
  if (!v14)
  {
    Int1Ty = (llvm::Type *)llvm::Type::getInt1Ty(*(llvm::Type **)(result + 336), a2);
    v47 = "cleanup.isactive";
    v48 = 259;
    v20 = sub_22E4D83CC(v5, Int1Ty, 1uLL, (uint64_t)&v47, 0, 0);
    v22 = v20 & 0xFFFFFFFFFFFFFFF8;
    if (v20 <= 7)
      v14 = 0;
    else
      v14 = v20 & 0xFFFFFFFFFFFFFFF8;
    v23 = (unint64_t)v21 & 0xFFFFFFFFFFFFFFF8;
    if (v20 <= 7)
      v16 = 0;
    else
      v16 = (unint64_t)v21 & 0xFFFFFFFFFFFFFFF8;
    if (v20 > 7)
    {
      v17 = 1 << (v21 & 7 | (8 * (v20 & 7u)));
      if (v22)
      {
        v24 = __clz(v17) ^ 0x3F;
        v25 = v24 >> 3;
        v26 = v22 | v25;
        v27 = v26 >= 8;
        v22 = v26 & 0xFFFFFFFFFFFFFFF8;
        v28 = 1 << (v24 & 7 | (8 * (v25 & 7)));
        if (!v27)
        {
          v23 = 0;
          v22 = 0;
          v28 = 0;
        }
        goto LABEL_47;
      }
      v23 = 0;
    }
    else
    {
      v17 = 0;
      v23 = 0;
      v22 = 0;
    }
    v28 = 0;
LABEL_47:
    *(_QWORD *)(v7 + 56) = v22;
    *(_QWORD *)(v7 + 64) = v23;
    *(_QWORD *)(v7 + 72) = v28;
    *(_DWORD *)(v7 + 80) = 0;
    *(_QWORD *)(v7 + 88) = 0;
    *(_QWORD *)(v7 + 96) = 0;
    llvm::Type::getInt1Ty(*(llvm::Type **)(v5 + 336), v21);
    v34 = llvm::ConstantInt::get();
    if (*(_QWORD *)(v5 + 5832))
    {
      v44[0] = v14;
      v44[1] = v16;
      v44[2] = v17;
      v45 = 0;
      v36 = 0u;
      v46 = 0u;
      sub_22F253140(v5, v34, (uint64_t)v44, v5);
    }
    else
    {
      v41[0] = v14;
      v41[1] = v16;
      v41[2] = v17;
      v42 = 0;
      v36 = 0u;
      v43 = 0u;
      sub_22E48B800(v34, (uint64_t)v41, a4, v5);
    }
    v18 = 0;
    goto LABEL_50;
  }
  v16 = *(_QWORD *)(v7 + 64);
  v17 = *(_QWORD *)(v7 + 72);
  v18 = *(_DWORD *)(v7 + 80);
  v36 = v13;
LABEL_50:
  llvm::Type::getInt1Ty(*(llvm::Type **)(v5 + 336), a2);
  v35 = llvm::ConstantInt::get();
  v37[0] = v14;
  v37[1] = v16;
  v37[2] = v17;
  v38 = v18;
  v39 = v15;
  v40 = v36;
  return sub_22E3BEDDC(v5 + 272, v35, v37, 0);
}

void sub_22E48BFB0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  char v13[32];
  __int16 v14;
  void *v15;
  unsigned int v16;
  _WORD v17[24];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = sub_22E48B528((uint64_t)a1);
  v15 = "invoke.cont";
  v17[8] = 259;
  v5 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  sub_22E479DA0(*(llvm::Value **)(a2 + 8), (uint64_t)a1, &v15);
  if (a1[327])
    sub_22E479E20((uint64_t)&v15, "funclet", a1 + 327);
  v7 = *(_QWORD *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  v14 = 257;
  sub_22F24F614((uint64_t)(a1 + 34), v7, v8, (uint64_t)v5, v4, 0, 0, v6, (uint64_t)v15, v16, (uint64_t)v13);
  sub_22E5ED9B4(a1, v5, 0);
  v9 = (char *)v15;
  if (v16)
  {
    v10 = 48 * v16;
    do
    {
      v11 = &v9[v10];
      v12 = *(void **)&v9[v10 - 24];
      if (v12)
      {
        *((_QWORD *)v11 - 2) = v12;
        operator delete(v12);
      }
      if (*(v11 - 25) < 0)
        operator delete(*((void **)v11 - 6));
      v10 -= 48;
    }
    while (v10);
    v9 = (char *)v15;
  }
  if (v9 != (char *)v17)
    free(v9);
}

uint64_t sub_22E48C138(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = a2 + 24;
  v5 = *(_QWORD *)(a2 + 48);
  if (v5)
  {
    llvm::MetadataTracking::track();
    v3 = v5;
  }
  else
  {
    v3 = 0;
  }
  result = sub_22E3CF21C(a1, 0, v3);
  if (v5)
    return llvm::MetadataTracking::untrack();
  return result;
}

double sub_22E48C1AC(uint64_t a1)
{
  uint64_t v2;
  double result;

  if (!*(_QWORD *)(a1 + 104))
  {
    v2 = operator new();
    result = 0.0;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_QWORD *)v2 = v2 + 32;
    *(_QWORD *)(v2 + 8) = v2 + 32;
    *(_DWORD *)(v2 + 16) = 4;
    *(_QWORD *)(v2 + 64) = v2 + 80;
    *(_DWORD *)(v2 + 76) = 4;
    *(_QWORD *)(a1 + 104) = v2;
  }
  return result;
}

int32x2_t sub_22E48C224@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, _OWORD *a5@<X4>, unsigned int a6@<W5>, int a7@<W6>, uint64_t a8@<X8>)
{
  unsigned int v15;
  char **v16;
  size_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t Declaration;
  llvm::PointerType *v24;
  uint64_t v25;
  uint64_t v26;
  llvm::Value *v27;
  uint64_t v28;
  __n128 v29;
  llvm::Type **v30;
  llvm::Type **v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  llvm::LLVMContext *v35;
  uint64_t v36;
  uint64_t v37;
  llvm::Value *v38;
  uint64_t v39;
  uint64_t v40;
  llvm::LLVMContext *v41;
  llvm::LLVMContext *v42;
  llvm::LLVMContext *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  uint64_t v47;
  llvm::Type *Int1Ty;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  unsigned __int8 *v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  _OWORD *v62;
  unsigned int v63;
  int v65;
  uint64_t v66;
  _OWORD v67[4];
  unsigned __int128 __src;
  __int128 v69;
  __int128 v70;
  char v71;
  __int128 v72;
  uint64_t v73;
  _BYTE v74[24];
  _QWORD v75[2];
  char *v76;
  __int128 v77;
  _QWORD v78[6];

  v78[4] = *MEMORY[0x24BDAC8D0];
  sub_22F253B0C(a1, *(_QWORD *)(a3 + 56), *(_QWORD *)(a3 + 24), (uint64_t)v74);
  v63 = a6;
  v62 = a5;
  v65 = a7;
  if (a4 == 2)
  {
    v15 = *(_DWORD *)(a2 + 8) + 1;
    *(_DWORD *)(a2 + 8) = v15;
  }
  else if (a4 == 1)
  {
    v15 = *(_DWORD *)(a2 + 4) + 1;
    *(_DWORD *)(a2 + 4) = v15;
  }
  else
  {
    v15 = 0;
  }
  v16 = &(&off_24FA63588)[2 * a4];
  v18 = *v16;
  v17 = (size_t)v16[1];
  v76 = (char *)v78;
  v77 = xmmword_22F44E330;
  if (v17 >= 0x21)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v19 = v77;
  }
  else
  {
    v19 = 0;
    if (!v17)
      goto LABEL_9;
  }
  memcpy(&v76[v19], v18, v17);
  v19 = v77;
LABEL_9:
  v66 = a2;
  *(_QWORD *)&v77 = v19 + v17;
  if (v15 >= 2)
  {
    LOWORD(v70) = 264;
    LODWORD(__src) = v15;
    llvm::Twine::toVector();
  }
  v20 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v21 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  __src = __PAIR128__(v77, (unint64_t)v76);
  *(_QWORD *)&v69 = ".cleanup";
  LOWORD(v70) = 773;
  v22 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  sub_22E61F8F8((_QWORD *)a1, *(unsigned __int8 **)(a3 + 32), (uint64_t)v20, (uint64_t)v21, 0, 0);
  sub_22E5ED9B4((_QWORD *)a1, v21, 0);
  Declaration = llvm::Intrinsic::getDeclaration();
  v25 = llvm::ConstantPointerNull::get(*(llvm::ConstantPointerNull **)(*(_QWORD *)(a1 + 144) + 96), v24);
  v26 = 0;
  if (Declaration)
    v26 = *(_QWORD *)(Declaration + 24);
  v75[0] = v25;
  LOWORD(v70) = 257;
  v27 = sub_22E462B78((uint64_t *)(a1 + 272), v26, Declaration, (uint64_t)v75, 1, (uint64_t)&__src, 0);
  v28 = *(_QWORD *)(a3 + 40);
  *(_QWORD *)&__src = a1;
  *((_QWORD *)&__src + 1) = a1 + 272;
  LOBYTE(v69) = 0;
  *((_QWORD *)&v69 + 1) = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
  v30 = (llvm::Type **)sub_22E50E974(&__src, v28, v29);
  if (v30)
  {
    v31 = v30;
    if (llvm::Type::isIntegerTy(*v30))
    {
      __src = __PAIR128__(v77, (unint64_t)v76);
      *(_QWORD *)&v69 = ".suspend.BOOL";
      LOWORD(v70) = 773;
      v32 = (_QWORD *)operator new();
      llvm::BasicBlock::BasicBlock();
      v33 = llvm::User::operator new((llvm::User *)0x40);
      MEMORY[0x23489C09C](v33, v32, v20, v31, 0);
      LOWORD(v70) = 257;
      sub_22E3C12C8((uint64_t *)(a1 + 272), v33, (uint64_t)&__src);
      sub_22E5ED9B4((_QWORD *)a1, v32, 0);
    }
  }
  v34 = llvm::Intrinsic::getDeclaration();
  v36 = v34;
  v37 = 0;
  if (v34)
    v37 = *(_QWORD *)(v34 + 24);
  v75[0] = v27;
  llvm::Type::getInt1Ty(*(llvm::Type **)(a1 + 336), v35);
  v75[1] = llvm::ConstantInt::get();
  LOWORD(v70) = 257;
  v38 = sub_22E462B78((uint64_t *)(a1 + 272), v37, v36, (uint64_t)v75, 2, (uint64_t)&__src, 0);
  v39 = *(_QWORD *)(v66 + 16);
  v40 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x23489C204](v40, v38, v39, 2, 0);
  LOWORD(v70) = 257;
  sub_22E3C12C8((uint64_t *)(a1 + 272), v40, (uint64_t)&__src);
  llvm::Type::getInt8Ty(*(llvm::Type **)(a1 + 336), v41);
  llvm::ConstantInt::get();
  llvm::SwitchInst::addCase();
  llvm::Type::getInt8Ty(*(llvm::Type **)(a1 + 336), v42);
  llvm::ConstantInt::get();
  llvm::SwitchInst::addCase();
  sub_22E5ED9B4((_QWORD *)a1, v22, 0);
  v72 = *(_OWORD *)(v66 + 40);
  v73 = *(_QWORD *)(v66 + 56);
  sub_22E48BA00((_QWORD *)a1, (uint64_t)&v72);
  sub_22E5ED9B4((_QWORD *)a1, v20, 0);
  v44 = 0;
  if (a4)
  {
    v45 = a3;
  }
  else
  {
    v45 = a3;
    if (*(_QWORD *)(v66 + 24))
    {
      v46 = *(unsigned __int8 **)(a3 + 48);
      if (*v46 == 140
        && ((v47 = *(_QWORD *)(*(_QWORD *)(sub_22F060FB4((uint64_t)v46) + 48) & 0xFFFFFFFFFFFFFFF0)) != 0
         && *(_BYTE *)(v47 + 16) == 26
         || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v47 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
         && (v47 = sub_22F10CF48(v47)) != 0)
        && ((*(_QWORD *)(v47 + 16) >> 54) & 0xF) - 4 <= 4
        && !sub_22F113A44(v47))
      {
        v44 = 0;
      }
      else
      {
        Int1Ty = (llvm::Type *)llvm::Type::getInt1Ty(*(llvm::Type **)(a1 + 336), v43);
        __src = __PAIR128__(v77, (unint64_t)v76);
        *(_QWORD *)&v69 = "resume.eh";
        LOWORD(v70) = 773;
        *(_QWORD *)(v66 + 32) = sub_22E4D8348(a1, Int1Ty, (uint64_t)&__src, 0);
        sub_22F253C78(a1 + 272, (llvm::LLVMContext *)1);
        sub_22EFF605C(*(_QWORD *)(a3 + 48));
        v50 = v49;
        v51 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144) + 2032, 32, 3);
        v52 = *(_QWORD *)(v66 + 24);
        *(_BYTE *)v51 = 4;
        if (byte_255E04EB3)
        {
          v53 = sub_22F0D3748(4);
          ++*((_DWORD *)v53 + 2);
        }
        *(_DWORD *)(v51 + 8) = v50;
        *(_QWORD *)(v51 + 16) = 0;
        *(_QWORD *)(v51 + 24) = v52;
        v54 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
        *(_QWORD *)&__src = *(_QWORD *)(a3 + 48);
        v55 = (unsigned __int8 *)sub_22E3CD3D4(v54 + 2032, 24, 3);
        sub_22F0D6590(v55, &__src, 1, v50, v50);
        v56 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
        *(_QWORD *)&__src = v51;
        v44 = sub_22F3F2D54(v56, v50, (uint64_t)v55, &__src, 1);
        sub_22F25C748(a1, v44);
      }
    }
  }
  *(_QWORD *)(a8 + 136) = 0;
  *(_QWORD *)(a8 + 8) = 0;
  *(_QWORD *)(a8 + 16) = 0;
  *(_DWORD *)(a8 + 32) = 0;
  *(_QWORD *)(a8 + 24) = 0;
  *(_QWORD *)(a8 + 40) = 0;
  *(_QWORD *)(a8 + 48) = 0;
  *(_QWORD *)(a8 + 64) = 0;
  *(_QWORD *)(a8 + 72) = 0;
  *(_QWORD *)(a8 + 84) = 2;
  *(_OWORD *)(a8 + 96) = 0u;
  *(_OWORD *)(a8 + 112) = 0u;
  *(_QWORD *)(a8 + 144) = 0;
  *(_BYTE *)(a8 + 184) &= 0xF9u;
  if (!v65)
  {
    v57 = *(_QWORD *)(v45 + 48);
    v58 = v62[1];
    v67[0] = *v62;
    v67[1] = v58;
    v59 = v62[3];
    v67[2] = v62[2];
    v67[3] = v59;
    sub_22E4D79C0(&__src, a1, v57, v67, v63);
    v60 = v69;
    *(_OWORD *)(a8 + 136) = __src;
    *(_OWORD *)(a8 + 152) = v60;
    *(_OWORD *)(a8 + 168) = v70;
    *(_BYTE *)(a8 + 184) = v71;
    if (!v44)
      goto LABEL_37;
    goto LABEL_36;
  }
  sub_22E4D8D7C((_QWORD *)a8);
  if (v44)
  {
LABEL_36:
    sub_22F253C78(a1 + 272, 0);
    sub_22E4D2C10(a1, v44, 0);
  }
LABEL_37:
  if (v76 != (char *)v78)
    free(v76);
  return sub_22F254324((uint64_t)v74, a1);
}

_QWORD *sub_22E48C9E4(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;

  ++*(_DWORD *)(*(_QWORD *)(a1 + 1680) + 12);
  v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v4 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v5)
      v6 = (*(_DWORD *)(v5 + 16) & 0xFF800FF) == 86507531;
    else
      v6 = 0;
    if (v6 && *v4 != 180)
    {
      v7 = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000);
      v8 = *(_QWORD *)(a1 + 2312);
      v9 = *(_BYTE *)(a1 + 2893);
      *(_BYTE *)(a1 + 2893) = 0;
      v10 = *(_QWORD *)(a1 + 2872);
      *(_QWORD *)(a1 + 2872) = v7;
      sub_22E4D89CC(a1);
      *(_BYTE *)(a1 + 2893) = v9;
      sub_22E48B274(a1, v7, v8, 0, 0);
      *(_QWORD *)(a1 + 2872) = v10;
    }
  }
  sub_22E5E5158(a1, *(_QWORD *)(a2 + 24), 0, 0);
  v11 = *(_QWORD *)(a1 + 1680);
  v13 = *(_OWORD *)(v11 + 64);
  v14 = *(_QWORD *)(v11 + 80);
  return sub_22E48BA00((_QWORD *)a1, (uint64_t)&v13);
}

uint64_t sub_22E48CAF4(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  llvm::ConstantPointerNull *Int8PtrTy;
  llvm::PointerType *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t Declaration;
  llvm::LLVMContext *v12;
  uint64_t v13;
  uint64_t v14;
  llvm::Value *v15;
  uint64_t v16;
  uint64_t v17;
  llvm::Value *v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  llvm::PointerType *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  llvm::PHINode *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  const char **v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  const char *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  uint64_t *v56;
  const char *v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  uint64_t *v61;
  int v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t **v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  llvm *v89;
  llvm *v90;
  uint64_t v91;
  llvm *v92;
  llvm *v93;
  __int128 v94;
  __int128 v95;
  llvm *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v103;
  _QWORD *v104;
  llvm::LLVMContext *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int *v111;
  int v112;
  int v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  const char *v127;
  const char *v128;
  uint64_t v129;
  uint64_t *v130;
  _OWORD v131[3];
  llvm *v132;
  uint64_t v133;
  unsigned int v134;
  uint64_t *v135;
  const char **v136;
  _BYTE v137[56];
  const char *v138;
  uint64_t False;
  uint64_t v140;
  uint64_t v141;
  __int16 v142;
  uint64_t v143;

  v143 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t *)(a1 + 272);
  Int8PtrTy = (llvm::ConstantPointerNull *)llvm::Type::getInt8PtrTy(*(llvm::Type **)(a1 + 336), 0);
  v7 = llvm::ConstantPointerNull::get(Int8PtrTy, v6);
  v129 = a2;
  v125 = *(_QWORD *)(a1 + 320);
  v8 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v9 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v120 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  *(_QWORD *)v137 = "coro.ret";
  *(_WORD *)&v137[32] = 259;
  v10 = operator new();
  llvm::BasicBlock::BasicBlock();
  Declaration = llvm::Intrinsic::getDeclaration();
  v13 = Declaration;
  if (Declaration)
    v14 = *(_QWORD *)(Declaration + 24);
  else
    v14 = 0;
  llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 336), v12);
  v138 = (const char *)llvm::ConstantInt::get();
  False = v7;
  v140 = v7;
  v141 = v7;
  *(_WORD *)&v137[32] = 257;
  v15 = sub_22E462B78(v4, v14, v13, (uint64_t)&v138, 4, (uint64_t)v137, 0);
  v119 = a1 + 1680;
  sub_22E48D868(*(_QWORD *)(a1 + 144), (uint64_t *)(a1 + 1680), (uint64_t)v15, 0);
  *(_QWORD *)(*(_QWORD *)(a1 + 1680) + 16) = v10;
  v16 = llvm::Intrinsic::getDeclaration();
  if (v16)
    v17 = *(_QWORD *)(v16 + 24);
  else
    v17 = 0;
  v128 = (const char *)v15;
  v138 = (const char *)v15;
  *(_WORD *)&v137[32] = 257;
  v18 = sub_22E462B78(v4, v17, v16, (uint64_t)&v138, 1, (uint64_t)v137, 0);
  v19 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x23489C09C](v19, v8, v9, v18, 0);
  *(_WORD *)&v137[32] = 257;
  sub_22E3C12C8(v4, v19, (uint64_t)v137);
  sub_22E5ED9B4((_QWORD *)a1, v8, 0);
  v20 = *(_QWORD *)(v129 + 64);
  *(_QWORD *)v137 = a1;
  *(_QWORD *)&v137[8] = v4;
  v137[16] = 0;
  *(_QWORD *)&v137[24] = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
  v22 = (uint64_t *)sub_22E50E974(v137, v20, v21);
  v23 = *(_QWORD *)(a1 + 320);
  v24 = *(_QWORD *)(v129 + 96);
  v130 = v4;
  v127 = (const char *)v7;
  if (v24)
  {
    *(_QWORD *)v137 = "coro.ret.on.failure";
    *(_WORD *)&v137[32] = 259;
    v25 = operator new();
    llvm::BasicBlock::BasicBlock();
    v27 = llvm::ConstantPointerNull::get(*(llvm::ConstantPointerNull **)(a1 + 96), v26);
    *(_WORD *)&v137[32] = 257;
    v28 = sub_22E3C18F4((uint64_t)v4, 33, v22, v27, (uint64_t)v137);
    v29 = llvm::User::operator new((llvm::User *)0x40);
    MEMORY[0x23489C09C](v29, v9, v25, v28, 0);
    *(_WORD *)&v137[32] = 257;
    sub_22E3C12C8(v130, v29, (uint64_t)v137);
    v30 = (_QWORD *)v25;
    v7 = (uint64_t)v127;
    v4 = v130;
    sub_22E5ED9B4((_QWORD *)a1, v30, 0);
    sub_22E5E5158(a1, v24, 0, 0);
  }
  else
  {
    v31 = llvm::User::operator new((llvm::User *)0x40);
    llvm::BranchInst::BranchInst();
    *(_WORD *)&v137[32] = 257;
    sub_22E3C12C8(v4, v31, (uint64_t)v137);
  }
  sub_22E5ED9B4((_QWORD *)a1, v9, 0);
  v32 = *(_QWORD *)(a1 + 96);
  *(_WORD *)&v137[32] = 257;
  v33 = (llvm::PHINode *)sub_22E3C4B80(v4, v32, 2, (uint64_t)v137);
  sub_22E3C4C50(v33, v7, v125);
  sub_22E3C4C50(v33, (uint64_t)v22, v23);
  v34 = llvm::Intrinsic::getDeclaration();
  if (v34)
    v35 = *(_QWORD *)(v34 + 24);
  else
    v35 = 0;
  v138 = v128;
  False = (uint64_t)v33;
  *(_WORD *)&v137[32] = 257;
  v36 = 0;
  *(_QWORD *)(*(_QWORD *)(a1 + 1680) + 96) = sub_22E462B78(v4, v35, v34, (uint64_t)&v138, 2, (uint64_t)v137, 0);
  v37 = *(_QWORD *)(a1 + 2008);
  v38 = *(_DWORD *)(a1 + 2640);
  *(_DWORD *)(a1 + 2640) = v38 + 1;
  v39 = *(_QWORD *)(a1 + 1680);
  v121 = (_QWORD *)v10;
  *(_QWORD *)(v39 + 40) = v10;
  *(_QWORD *)(v39 + 48) = v37;
  *(_DWORD *)(v39 + 56) = v38;
  if (!*(_BYTE *)(a1 + 2892))
    v36 = *(_QWORD *)(a1 + 2880);
  v132 = 0;
  v133 = 0;
  v134 = 0;
  v135 = (uint64_t *)(a1 + 2904);
  v123 = *(_QWORD *)(a1 + 2312);
  v124 = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000);
  v122 = *(_BYTE *)(a1 + 2893);
  *(_BYTE *)(a1 + 2893) = 0;
  v126 = *(_QWORD *)(a1 + 2872);
  *(_QWORD *)(a1 + 2872) = v124;
  v40 = *(_QWORD *)(v129 + 72);
  v41 = (_QWORD *)sub_22E4899EC(a1 + 1984, 3, 16);
  *v41 = off_24FA635D8;
  v41[1] = v40;
  v42 = (uint64_t *)(v129 + 104);
  v43 = *(unsigned int *)(v129 + 8);
  if ((_DWORD)v43 == *(_DWORD *)(a1 + 1640) && v36)
  {
    if (!(_DWORD)v43)
      goto LABEL_29;
    v44 = *(const char ***)(a1 + 1632);
    v45 = v36 + 2688;
    v46 = 8 * v43 - 8;
    v47 = (uint64_t *)(v129 + 104);
    do
    {
      v48 = v46;
      v50 = *v44++;
      v49 = v50;
      v51 = *v47++;
      v138 = v49;
      False = v51;
      sub_22F2543D4((uint64_t)v137, v45, (uint64_t *)&v138, &False);
      v46 = v48 - 8;
    }
    while (v48);
    LODWORD(v43) = *(_DWORD *)(v129 + 8);
  }
  if ((_DWORD)v43)
  {
    v52 = 8 * v43;
    do
    {
      v53 = *v42++;
      sub_22E5E5158(a1, v53, 0, 0);
      v54 = *(_QWORD *)(v53 + 8);
      v55 = (_DWORD *)sub_22EFBC5B4(v54);
      v136 = 0;
      sub_22E48DB4C((uint64_t)&v136, v55);
      v56 = v135;
      v57 = v136[2];
      v138 = v57;
      *(_QWORD *)v137 = 0;
      if (sub_22E3CED3C(v135, &v138, v137))
        v58 = *(_QWORD *)v137;
      else
        v58 = *v56 + 56 * *((unsigned int *)v56 + 4);
      *(_QWORD *)v137 = v57;
      v59 = *(_OWORD *)(v58 + 40);
      v60 = *(_OWORD *)(v58 + 24);
      *(_OWORD *)&v137[8] = *(_OWORD *)(v58 + 8);
      *(_OWORD *)&v137[24] = v60;
      *(_OWORD *)&v137[40] = v59;
      sub_22E3CEC9C((uint64_t)&v132, v137, (__int128 *)&v137[8], (uint64_t)&v138);
      v61 = v135;
      v138 = (const char *)v54;
      *(_QWORD *)v137 = 0;
      v62 = sub_22E3CED3C(v135, &v138, v137);
      v63 = *(_QWORD *)v137;
      if (!v62)
        v63 = *v61 + 56 * *((unsigned int *)v61 + 4);
      v64 = *(_OWORD *)(v63 + 8);
      v65 = *(_OWORD *)(v63 + 24);
      *(_OWORD *)(v58 + 40) = *(_OWORD *)(v63 + 40);
      *(_OWORD *)(v58 + 24) = v65;
      *(_OWORD *)(v58 + 8) = v64;
      v52 -= 8;
    }
    while (v52);
  }
LABEL_29:
  sub_22E5E5158(a1, *(_QWORD *)(v129 + 24), 0, 0);
  v138 = *(const char **)(*(_QWORD *)(v129 + 24) + 8);
  *(_QWORD *)v137 = 0;
  v66 = sub_22E3CED3C((uint64_t *)(a1 + 2904), &v138, v137);
  v67 = *(_QWORD *)v137;
  if (!v66)
    v67 = *(_QWORD *)(a1 + 2904) + 56 * *(unsigned int *)(a1 + 2920);
  *(_OWORD *)v137 = *(_OWORD *)(v67 + 8);
  *(_OWORD *)&v137[16] = *(_OWORD *)(v67 + 24);
  *(_OWORD *)&v137[32] = *(_OWORD *)(v67 + 40);
  v68 = llvm::User::operator new((llvm::User *)0x40);
  if ((v137[24] & 3) != 0)
    sub_22F28ABCC(v137, a1);
  v142 = 257;
  llvm::BitCastInst::BitCastInst();
  v69 = &v128[-32 * (*((_DWORD *)v128 + 5) & 0x7FFFFFF)];
  v70 = (uint64_t *)(v69 + 32);
  if (*((_QWORD *)v69 + 4))
  {
    **((_QWORD **)v69 + 6) = *((_QWORD *)v69 + 5);
    v71 = *((_QWORD *)v69 + 5);
    if (v71)
      *(_QWORD *)(v71 + 16) = *((_QWORD *)v69 + 6);
  }
  *v70 = v68;
  v72 = v130;
  if (v68)
  {
    v75 = *(_QWORD *)(v68 + 8);
    v74 = (uint64_t **)(v68 + 8);
    v73 = v75;
    *((_QWORD *)v69 + 5) = v75;
    if (v75)
      *(_QWORD *)(v73 + 16) = v69 + 40;
    *((_QWORD *)v69 + 6) = v74;
    *v74 = v70;
  }
  if (*(_QWORD *)(a1 + 1736))
  {
    v76 = *(_QWORD *)(v129 + 88);
    v77 = *(_QWORD *)(v76 + 8);
    v78 = *(_OWORD *)(a1 + 1752);
    v131[0] = *(_OWORD *)(a1 + 1736);
    v131[1] = v78;
    v131[2] = *(_OWORD *)(a1 + 1768);
    v79 = *(_QWORD *)(*(_QWORD *)(v76 + 8) + 8);
    v80 = *(_QWORD *)((v79 & 0xFFFFFFFFFFFFFFF0) + 8);
    if ((v80 & 8) != 0)
    {
      v82 = *(_QWORD *)((v80 & 0xFFFFFFFFFFFFFFF0) + 0x18);
      v81 = *(_QWORD *)((v80 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
    }
    else
    {
      v81 = 0;
      v82 = 0;
    }
    sub_22E4DA890(a1, v77, v131, v81 | v82 | (v80 | v79) & 7, 1);
  }
  *(_QWORD *)sub_22E4899EC(a1 + 1984, 1, 8) = off_24FA63600;
  v83 = *(_QWORD *)(a1 + 1680);
  *(_DWORD *)v83 = 0;
  *(_QWORD *)(v83 + 24) = *(_QWORD *)(v129 + 48);
  sub_22E5E5158(a1, *(_QWORD *)(v129 + 32), 0, 0);
  v84 = *(_QWORD *)(a1 + 2008);
  v85 = *(_DWORD *)(a1 + 2640);
  *(_DWORD *)(a1 + 2640) = v85 + 1;
  v86 = *(_QWORD *)(a1 + 1680);
  *(_QWORD *)(v86 + 64) = v120;
  *(_QWORD *)(v86 + 72) = v84;
  *(_DWORD *)(v86 + 80) = v85;
  v87 = *(_QWORD *)(a1 + 1680);
  *(_DWORD *)v87 = 1;
  if (*(_QWORD *)(v87 + 24))
  {
    if (*(_QWORD *)(v87 + 32))
    {
      v138 = "coro.resumed.body";
      v142 = 259;
      v104 = (_QWORD *)operator new();
      llvm::BasicBlock::BasicBlock();
      v138 = "coro.resumed.cont";
      v142 = 259;
      v103 = (_QWORD *)operator new();
      llvm::BasicBlock::BasicBlock();
      v105 = *(llvm::LLVMContext **)(*(_QWORD *)(a1 + 1680) + 32);
      v138 = "coro.resumed.eh";
      v142 = 259;
      v106 = sub_22F253798((uint64_t)v130, v105, (uint64_t)&v138);
      v107 = llvm::User::operator new((llvm::User *)0x40);
      MEMORY[0x23489C09C](v107, v103, v104, v106, 0);
      v142 = 257;
      sub_22E3C12C8(v130, v107, (uint64_t)&v138);
      sub_22E5ED9B4((_QWORD *)a1, v104, 0);
    }
    else
    {
      v103 = 0;
    }
    v108 = *(_QWORD *)(v129 + 16);
    if (v108)
    {
      sub_22F0D5A50(*(_QWORD *)(v129 + 16));
      v112 = v113;
      v88 = v121;
    }
    else
    {
      v109 = *(_QWORD *)(*(_QWORD *)(v129 + 24) + 8);
      v110 = *(_QWORD *)(v109 + 56);
      if ((v110 & 4) != 0 && (v118 = v110 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(v118 + 16)))
        v111 = **(int ***)(v118 + 24);
      else
        v111 = (int *)(v109 + 64);
      v88 = v121;
      v112 = *v111;
    }
    v114 = *(_QWORD *)(*(_QWORD *)v119 + 24);
    LOBYTE(v138) = 4;
    if (byte_255E04EB3)
    {
      v115 = sub_22F0D3748(4);
      ++*((_DWORD *)v115 + 2);
      v108 = *(_QWORD *)(v129 + 16);
    }
    LODWORD(False) = v112;
    v140 = 0;
    v141 = v114;
    v116 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
    v136 = &v138;
    v117 = sub_22F3F2D54(v116, v112, v108, &v136, 1);
    sub_22F25C748(a1, v117);
    sub_22E48D968(a1, v129, *(_QWORD *)(v117 + 16));
    sub_22E4D2C10(a1, v117, 0);
    if (v103)
      sub_22E5ED9B4((_QWORD *)a1, v103, 0);
    v72 = v130;
  }
  else
  {
    sub_22E48D968(a1, v129, *(_QWORD *)(v129 + 16));
    v88 = v121;
  }
  if (*(_QWORD *)(a1 + 320) || *(_DWORD *)(*(_QWORD *)v119 + 12))
  {
    sub_22E5ED9B4((_QWORD *)a1, v120, 0);
    **(_DWORD **)(a1 + 1680) = 3;
    sub_22E5E5158(a1, *(_QWORD *)(v129 + 40), 0, 0);
  }
  else
  {
    sub_22E5ED9B4((_QWORD *)a1, v120, 1);
  }
  *(_BYTE *)(a1 + 2893) = v122;
  sub_22E48B274(a1, v124, v123, 0, 0);
  *(_QWORD *)(a1 + 2872) = v126;
  v89 = v132;
  v90 = (llvm *)((char *)v132 + 56 * v134);
  if ((_DWORD)v133)
  {
    if (v134)
    {
      v91 = 56 * v134;
      v92 = v132;
      while ((*(_QWORD *)v92 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v92 = (llvm *)((char *)v92 + 56);
        v91 -= 56;
        if (!v91)
          goto LABEL_55;
      }
    }
    else
    {
      v92 = v132;
    }
  }
  else
  {
LABEL_55:
    v92 = (llvm *)((char *)v132 + 56 * v134);
  }
  v93 = (llvm *)((char *)v132 + 56 * v134);
  if (v92 == v93)
  {
    v97 = v134;
  }
  else
  {
    do
    {
      *(_QWORD *)v137 = *(_QWORD *)v92;
      v94 = *(_OWORD *)((char *)v92 + 40);
      v95 = *(_OWORD *)((char *)v92 + 24);
      *(_OWORD *)&v137[8] = *(_OWORD *)((char *)v92 + 8);
      *(_OWORD *)&v137[24] = v95;
      *(_OWORD *)&v137[40] = v94;
      sub_22E3CEC9C((uint64_t)v135, v137, (__int128 *)&v137[8], (uint64_t)&v138);
      v96 = (llvm *)((char *)v92 + 56);
      v92 = v90;
      if (v96 != v90)
      {
        v92 = v96;
        while ((*(_QWORD *)v92 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v92 = (llvm *)((char *)v92 + 56);
          if (v92 == v90)
          {
            v92 = v90;
            break;
          }
        }
      }
    }
    while (v92 != v93);
    v97 = v134;
    v89 = v132;
  }
  llvm::deallocate_buffer(v89, (void *)(56 * v97));
  sub_22E5ED9B4((_QWORD *)a1, v88, 0);
  v98 = llvm::Intrinsic::getDeclaration();
  v99 = v98;
  if (v98)
    v100 = *(_QWORD *)(v98 + 24);
  else
    v100 = 0;
  v138 = v127;
  False = llvm::ConstantInt::getFalse();
  *(_WORD *)&v137[32] = 257;
  sub_22E462B78(v72, v100, v99, (uint64_t)&v138, 2, (uint64_t)v137, 0);
  v101 = *(_QWORD *)(v129 + 88);
  if (v101)
  {
    *(_QWORD *)(v101 + 8) = 0;
    sub_22E5E5158(a1, v101, 0, 0);
  }
  return llvm::Function::addFnAttr();
}

uint64_t sub_22E48D868(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int *a4)
{
  int v6;
  int v7;
  char *v8;
  uint64_t v9;
  size_t v10;
  uint64_t result;
  uint64_t v14;
  int v15;

  if (*a2)
  {
    if (*(_QWORD *)(*a2 + 112))
    {
      sub_22EFFAE7C(a4);
      v7 = v6;
      v8 = "only one __builtin_coro_id can be used in a function";
      v9 = a1;
      v10 = 52;
    }
    else
    {
      sub_22EFFAE7C(a4);
      v7 = v15;
      v8 = "__builtin_coro_id shall not be used in a C++ coroutine";
      v9 = a1;
      v10 = 54;
    }
    return sub_22E628310(v9, v7, v8, v10);
  }
  else
  {
    result = operator new();
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_QWORD *)(result + 48) = -1;
    *(_DWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 64) = 0;
    *(_QWORD *)(result + 72) = -1;
    *(_DWORD *)(result + 80) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    v14 = *a2;
    *a2 = result;
    if (v14)
    {
      MEMORY[0x2348A0E9C](v14, 0x1060C40B35DCDADLL);
      result = *a2;
    }
    *(_QWORD *)(result + 88) = a3;
    *(_QWORD *)(*a2 + 112) = a4;
  }
  return result;
}

uint64_t sub_22E48D968(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = sub_22E5E5158(a1, a3, 0, 0);
  if (*(_QWORD *)(a1 + 320))
  {
    v6 = *(_QWORD *)(a2 + 56);
    if (v6)
      return sub_22E5E5158(a1, v6, 0, 0);
  }
  return result;
}

_QWORD *sub_22E48D9C0(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 144 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F253F74(a1, (uint64_t)v4, (uint64_t)v4 + 144 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(144 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 144 * v10;
      do
      {
        *result = -4096;
        result += 18;
        v11 -= 144;
      }
      while (v11);
    }
  }
  return result;
}

_QWORD *sub_22E48DA8C(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C]((unint64_t)v8 << 6, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F254258(a1, (uint64_t)v4, (uint64_t)v4 + 64 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(v3 << 6));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = v10 << 6;
      do
      {
        *result = -4096;
        result += 8;
        v11 -= 64;
      }
      while (v11);
    }
  }
  return result;
}

void sub_22E48DB4C(uint64_t a1, _DWORD *a2)
{
  int v2;

  v2 = *(unsigned __int8 *)a2;
  if (a2 && (v2 & 0xFE) == 0x70)
  {
    switch((*a2 >> 18) & 0x3F)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
        goto LABEL_7;
      default:
        goto LABEL_6;
    }
  }
  if (a2 && v2 == 233)
LABEL_7:
    sub_22E48DBE4(a1, (uint64_t)a2);
  else
LABEL_6:
    ((void (*)(void))((char *)&def_22E48DBB8 + 4 * byte_22F455B87[v2 - 1]))();
}

_QWORD *sub_22E48DBDC(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

void sub_22E48DBE4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  sub_22F0D492C(a2);
  v9 = v11;
  v3 = v13;
  v10 = v12;
  v4 = v14;
  v6 = *((_QWORD *)&v11 + 1);
  v5 = (uint64_t *)v11;
  if ((_QWORD)v11 != v13 || *((_QWORD *)&v11 + 1) != v14)
  {
    do
    {
      v8 = v5;
      if ((v6 & 3) != 0)
      {
        if ((v6 & 0xFFFFFFFFFFFFFFFCLL) != 0)
          v8 = (_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFCLL) + 40);
        else
          v8 = (_QWORD *)sub_22F3AC1A8(*v5);
      }
      if (*v8)
        sub_22E48DB4C(a1);
      if ((v6 & 3) != 0)
      {
        if (v6 < 4)
          sub_22F3F2FE0((uint64_t)&v9, 1);
        else
          sub_22F0D8720((uint64_t)&v9);
      }
      else
      {
        *(_QWORD *)&v9 = v5 + 1;
      }
      v6 = *((_QWORD *)&v9 + 1);
      v5 = (uint64_t *)v9;
    }
    while (v9 != __PAIR128__(v4, v3));
  }
}

uint64_t sub_22E48DCC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t result;
  llvm::PointerType *v14;
  llvm::PointerType *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  llvm::PointerType *v19[4];
  __int16 v20;

  v4 = *(_QWORD *)(a2 + 320);
  v19[0] = (llvm::PointerType *)"coro.free";
  v20 = 259;
  v5 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  sub_22E5ED9B4((_QWORD *)a2, v5, 0);
  sub_22E5E5158(a2, *(unsigned __int8 **)(a1 + 8), 0, 0);
  v19[0] = (llvm::PointerType *)"after.coro.free";
  v20 = 259;
  v6 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  sub_22E5ED9B4((_QWORD *)a2, v6, 0);
  v7 = *(uint64_t **)(*(_QWORD *)(a2 + 1680) + 104);
  if (v7)
  {
    v8 = *(_QWORD *)(v4 + 40);
    if (v8 == v4 + 40)
    {
      v10 = 0;
    }
    else
    {
      if (v8)
        v9 = v8 - 24;
      else
        v9 = 0;
      if (*(unsigned __int8 *)(v9 + 16) - 29 >= 0xB)
        v10 = 0;
      else
        v10 = v9;
    }
    llvm::Instruction::moveBefore();
    *(_QWORD *)(a2 + 320) = *(_QWORD *)(v10 + 40);
    *(_QWORD *)(a2 + 328) = v10 + 24;
    v19[0] = *(llvm::PointerType **)(v10 + 48);
    if (v19[0])
    {
      llvm::MetadataTracking::track();
      v14 = v19[0];
    }
    else
    {
      v14 = 0;
    }
    sub_22E3CF21C(a2 + 272, 0, (uint64_t)v14);
    v15 = v19[0];
    if (v19[0])
      llvm::MetadataTracking::untrack();
    v16 = llvm::ConstantPointerNull::get(*(llvm::ConstantPointerNull **)(a2 + 96), v15);
    v20 = 257;
    v17 = sub_22E3C18F4(a2 + 272, 33, v7, v16, (uint64_t)v19);
    v18 = llvm::User::operator new((llvm::User *)0x40);
    MEMORY[0x23489C09C](v18, v5, v6, v17, 0);
    v20 = 257;
    sub_22E3C12C8((uint64_t *)(a2 + 272), v18, (uint64_t)v19);
    result = llvm::Instruction::eraseFromParent((llvm::Instruction *)v10);
    *(_QWORD *)(a2 + 320) = v6;
    *(_QWORD *)(a2 + 328) = v6 + 5;
  }
  else
  {
    v11 = *(_QWORD *)(a2 + 144);
    sub_22F0D5A50(*(_QWORD *)(a1 + 8));
    return sub_22E628310(v11, v12, "Deallocation expressoin does not refer to coro.free", 0x33uLL);
  }
  return result;
}

void sub_22E48DF04(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Declaration;
  uint64_t v5;
  llvm::Value *v6;
  unsigned int v7;
  char *v8;
  llvm::Value *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  uint64_t v16[4];
  __int16 v17;
  _QWORD v18[2];
  void *v19;
  uint64_t v20;
  _QWORD v21[7];

  v21[6] = *MEMORY[0x24BDAC8D0];
  v3 = llvm::ConstantPointerNull::get(*(llvm::ConstantPointerNull **)(a2 + 96), (llvm::PointerType *)a2);
  Declaration = llvm::Intrinsic::getDeclaration();
  v19 = v21;
  v20 = 0x100000000;
  v16[0] = *(_QWORD *)(a2 + 2616);
  if (v16[0])
    sub_22E479E20((uint64_t)&v19, "funclet", v16);
  if (Declaration)
    v5 = *(_QWORD *)(Declaration + 24);
  else
    v5 = 0;
  v18[0] = v3;
  v18[1] = llvm::ConstantInt::getTrue();
  v17 = 257;
  v6 = sub_22E47DDEC((uint64_t *)(a2 + 272), v5, Declaration, (uint64_t)v18, 2, (uint64_t)v19, v20, (uint64_t)v16, 0);
  v7 = v20;
  if ((_DWORD)v20)
  {
    v8 = (char *)v19;
  }
  else
  {
    v9 = v6;
    v10 = sub_22E4D3138((_QWORD *)a2, 1);
    v16[0] = (uint64_t)"cleanup.cont";
    v17 = 259;
    v11 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v12 = llvm::User::operator new((llvm::User *)0x40);
    MEMORY[0x23489C09C](v12, v10, v11, v9, 0);
    v17 = 257;
    sub_22E3C12C8((uint64_t *)(a2 + 272), v12, (uint64_t)v16);
    sub_22E5ED9B4((_QWORD *)a2, v11, 0);
    v7 = v20;
    v8 = (char *)v19;
    if (!(_DWORD)v20)
      goto LABEL_16;
  }
  v13 = 48 * v7;
  do
  {
    v14 = &v8[v13];
    v15 = *(void **)&v8[v13 - 24];
    if (v15)
    {
      *((_QWORD *)v14 - 2) = v15;
      operator delete(v15);
    }
    if (*(v14 - 25) < 0)
      operator delete(*((void **)v14 - 6));
    v13 -= 48;
  }
  while (v13);
  v8 = (char *)v19;
LABEL_16:
  if (v8 != (char *)v21)
    free(v8);
}

uint64_t *sub_22E48E12C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  char v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  _OWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _DWORD *v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  unsigned __int8 v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  size_t v37;
  const void *v38;
  unint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  void **v43;
  size_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  unint64_t v49;
  const void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  size_t *v58;
  uint64_t v59;
  const void *v60;
  size_t v61;
  size_t v62;
  void **v63;
  void *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned __int8 *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  const void *v80;
  int v81;
  size_t v82;
  size_t v83;
  size_t v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  int v90;
  uint64_t v91;
  void **v92;
  size_t v93;
  void *v94;
  size_t v95;
  uint64_t v96;
  char v97;
  void *v98;
  size_t v99;
  size_t v100;
  void *v101;
  void *v102;
  size_t v103;
  uint64_t v105;
  _OWORD *v106;
  __int128 v107;
  void *v108[2];
  unint64_t v109;
  __int128 v110;
  char v111[24];
  int v112;
  _OWORD *v113;
  uint64_t v114;
  char v115;
  _BYTE v116[7];
  __int128 v117;
  uint64_t v118;
  void *__p[2];
  uint64_t v120;
  void *v121[2];
  int64_t v122;
  _BYTE v123[7];
  _BYTE __dst[32];
  __int128 v125;
  _OWORD *v126;
  __int128 v127;
  _QWORD v128[7];

  v128[4] = *MEMORY[0x24BDAC8D0];
  *a1 = a2;
  v4 = *(_QWORD *)(a2 + 184);
  *((_DWORD *)a1 + 2) = (*(_QWORD *)(v4 + 96) >> 57) & 0xF;
  *((_BYTE *)a1 + 12) = (*(_WORD *)(v4 + 64) & 8) != 0;
  *((_BYTE *)a1 + 13) = (*(_WORD *)(v4 + 64) & 0x80) != 0;
  MEMORY[0x23489FAB0]();
  a1[69] = 0;
  *((_DWORD *)a1 + 140) = 0;
  bzero(a1 + 71, 0x2ECuLL);
  a1[167] = 0;
  a1[166] = 0;
  *((_OWORD *)a1 + 29) = 0u;
  *((_OWORD *)a1 + 30) = 0u;
  *((_OWORD *)a1 + 31) = 0u;
  *((_OWORD *)a1 + 32) = 0u;
  *((_OWORD *)a1 + 33) = 0u;
  *((_DWORD *)a1 + 136) = 0;
  a1[165] = (uint64_t)(a1 + 166);
  a1[168] = 1;
  for (i = 169; i != 177; i += 2)
    a1[i] = 0;
  a1[177] = (uint64_t)&off_24FA63628;
  a1[178] = (uint64_t)a1;
  a1[179] = (uint64_t)(a1 + 181);
  a1[180] = 0x2000000000;
  *((_DWORD *)a1 + 558) = 0;
  *(_OWORD *)(a1 + 277) = 0u;
  *((_OWORD *)a1 + 140) = 0u;
  *((_DWORD *)a1 + 564) = 0;
  *((_DWORD *)a1 + 594) = 0;
  *(_OWORD *)(a1 + 283) = 0u;
  *(_OWORD *)(a1 + 285) = 0u;
  *(_OWORD *)(a1 + 287) = 0u;
  *(_OWORD *)(a1 + 289) = 0u;
  *(_OWORD *)(a1 + 291) = 0u;
  *(_OWORD *)(a1 + 293) = 0u;
  *(_OWORD *)(a1 + 295) = 0u;
  *((_OWORD *)a1 + 149) = 0u;
  *((_OWORD *)a1 + 150) = 0u;
  a1[302] = 0;
  a1[303] = (uint64_t)(a1 + 305);
  a1[304] = 0x400000000;
  a1[309] = (uint64_t)(a1 + 311);
  *((_OWORD *)a1 + 155) = 0u;
  a1[312] = 1;
  *((_DWORD *)a1 + 634) = 0;
  *(_OWORD *)(a1 + 313) = 0u;
  *(_OWORD *)(a1 + 315) = 0u;
  *((_OWORD *)a1 + 159) = 0u;
  *((_DWORD *)a1 + 640) = 0;
  *((_DWORD *)a1 + 646) = 0;
  *(_OWORD *)(a1 + 321) = 0u;
  *((_DWORD *)a1 + 652) = 0;
  *((_OWORD *)a1 + 162) = 0u;
  *((_DWORD *)a1 + 658) = 0;
  *(_OWORD *)(a1 + 327) = 0u;
  *((_DWORD *)a1 + 664) = 0;
  *((_OWORD *)a1 + 165) = 0u;
  *((_DWORD *)a1 + 670) = 0;
  *(_OWORD *)(a1 + 333) = 0u;
  *((_DWORD *)a1 + 676) = 0;
  *((_OWORD *)a1 + 168) = 0u;
  *((_DWORD *)a1 + 682) = 0;
  *(_OWORD *)(a1 + 339) = 0u;
  v6 = *(_QWORD *)(a2 + 184);
  v7 = (_QWORD *)(v6 + 416);
  v8 = *(_QWORD **)(v6 + 408);
  if (v8 != (_QWORD *)(v6 + 416))
  {
    do
    {
      v9 = *((_BYTE *)v8 + 79);
      v10 = v9;
      if (v9 >= 0)
        v11 = v8 + 7;
      else
        v11 = (_QWORD *)v8[7];
      v12 = v9 & 0x7F;
      if (v10 >= 0)
        v13 = v12;
      else
        v13 = v8[8];
      v14 = *((_BYTE *)v8 + 55);
      v15 = v14;
      if (v14 >= 0)
        v16 = v8 + 4;
      else
        v16 = (void *)v8[4];
      v17 = v14 & 0x7F;
      if (v15 >= 0)
        v18 = v17;
      else
        v18 = v8[5];
      *(_QWORD *)__dst = v16;
      *(_QWORD *)&__dst[8] = v18;
      v126 = __dst;
      v19 = sub_22F2580BC((uint64_t)(a1 + 165), v16, v18, &v126);
      *((_QWORD *)v19 + 6) = v11;
      *((_QWORD *)v19 + 7) = v13;
      v20 = (_QWORD *)v8[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = (_QWORD *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (_QWORD *)v8[2];
          v22 = *v21 == (_QWORD)v8;
          v8 = v21;
        }
        while (!v22);
      }
      v8 = v21;
    }
    while (v21 != v7);
  }
  v126 = v128;
  v127 = xmmword_22F44E330;
  v23 = *(_QWORD *)(*(_QWORD *)(*a1 + 144) + 1992);
  v24 = *(_QWORD *)(*a1 + 184);
  if (*(char *)(v24 + 583) < 0)
  {
    sub_22E3BB2B4(v121, *(void **)(v24 + 560), *(_QWORD *)(v24 + 568));
  }
  else
  {
    v25 = v24 + 560;
    *(_OWORD *)v121 = *(_OWORD *)v25;
    v122 = *(_QWORD *)(v25 + 16);
  }
  v26 = (void *)(HIBYTE(v122) & 0x7F);
  if (v122 < 0)
    v26 = v121[1];
  if (!v26)
    MEMORY[0x2348A0C14](v121, "<stdin>");
  __p[0] = 0;
  __p[1] = 0;
  v120 = 0;
  v27 = sub_22E49F3DC((_QWORD *)v23, *(_DWORD *)(v23 + 344));
  if (!v27 || (v28 = *((_QWORD *)v27 + 2) & 0xFFFFFFFFFFFFFFF8, (v29 = *(_QWORD *)(v28 + 8)) == 0))
  {
    v30 = 0;
    v31 = 0;
    v32 = 0;
    goto LABEL_108;
  }
  v33 = *(_QWORD *)(v28 + 8);
  do
  {
    v34 = v33;
    v35 = *(_QWORD *)(v33 + 8);
    if ((v35 & 2) == 0)
      break;
    v33 = v35 & 0xFFFFFFFFFFFFFFFCLL;
  }
  while (v33);
  v36 = *(unint64_t **)(v34 + 16);
  v39 = *v36;
  v38 = v36 + 4;
  v37 = v39;
  if (v39 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_153;
  if (v37 >= 0x17)
  {
    v41 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v37 | 7) != 0x17)
      v41 = v37 | 7;
    v42 = v41 + 1;
    v40 = operator new(v41 + 1);
    *(_QWORD *)&__dst[16] = v42 | 0x8000000000000000;
    *(_QWORD *)__dst = v40;
    *(_QWORD *)&__dst[8] = v37;
    goto LABEL_42;
  }
  __dst[23] = v37;
  v40 = __dst;
  if (v37)
LABEL_42:
    memmove(v40, v38, v37);
  v40[v37] = 0;
  if (SHIBYTE(v120) < 0)
    operator delete(__p[0]);
  *(_OWORD *)__p = *(_OWORD *)__dst;
  v120 = *(_QWORD *)&__dst[16];
  LOWORD(v125) = 260;
  *(_QWORD *)__dst = v121;
  if ((llvm::sys::path::is_absolute() & 1) == 0)
  {
    if (v120 >= 0)
      v43 = __p;
    else
      v43 = (void **)__p[0];
    if (v120 >= 0)
      v44 = HIBYTE(v120) & 0x7F;
    else
      v44 = (size_t)__p[1];
    *(_QWORD *)__dst = &__dst[24];
    *(_OWORD *)&__dst[8] = xmmword_22F455C90;
    if (v44 >= 0x401)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v45 = *(_QWORD *)&__dst[8];
      v47 = *(_BYTE **)__dst;
    }
    else
    {
      v45 = 0;
      v46 = 0;
      v47 = &__dst[24];
      if (!v44)
        goto LABEL_55;
    }
    memcpy(&v47[v45], v43, v44);
    v46 = *(_QWORD *)&__dst[8];
LABEL_55:
    *(_QWORD *)&__dst[8] = v46 + v44;
    LOWORD(v110) = 260;
    v108[0] = v121;
    llvm::sys::path::append();
    v48 = llvm::sys::path::remove_leading_dotslash();
    if (v49 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_153;
    v50 = (const void *)v48;
    v51 = (void *)v49;
    if (v49 >= 0x17)
    {
      v53 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v49 | 7) != 0x17)
        v53 = v49 | 7;
      v54 = v23;
      v55 = v53 + 1;
      v52 = operator new(v53 + 1);
      v56 = v55 | 0x8000000000000000;
      v23 = v54;
      v108[1] = v51;
      v109 = v56;
      v108[0] = v52;
    }
    else
    {
      HIBYTE(v109) = v49;
      v52 = v108;
      if (!v49)
        goto LABEL_63;
    }
    memmove(v52, v50, (size_t)v51);
LABEL_63:
    *((_BYTE *)v51 + (_QWORD)v52) = 0;
    if (SHIBYTE(v122) < 0)
      operator delete(v121[0]);
    *(_OWORD *)v121 = *(_OWORD *)v108;
    v122 = v109;
    if (*(_BYTE **)__dst != &__dst[24])
      free(*(void **)__dst);
  }
  v57 = v29;
  do
  {
    v58 = (size_t *)v57;
    v59 = *(_QWORD *)(v57 + 8);
    if ((v59 & 2) == 0)
      break;
    v57 = v59 & 0xFFFFFFFFFFFFFFFCLL;
  }
  while (v57);
  v62 = *v58;
  v60 = v58 + 4;
  v61 = v62;
  if (v122 >= 0)
    v63 = v121;
  else
    v63 = (void **)v121[0];
  v64 = (void *)(HIBYTE(v122) & 0x7F);
  if (v122 < 0)
    v64 = v121[1];
  if ((void *)v61 != v64 || v61 && memcmp(v60, v63, v61))
    goto LABEL_107;
  do
  {
    v65 = (uint64_t *)v29;
    v66 = *(_QWORD *)(v29 + 8);
    if ((v66 & 2) == 0)
      break;
    v29 = v66 & 0xFFFFFFFFFFFFFFFCLL;
  }
  while ((v66 & 0xFFFFFFFFFFFFFFFCLL) != 0);
  v67 = *v65;
  *(_QWORD *)__dst = v65 + 4;
  *(_QWORD *)&__dst[8] = v67;
  LOBYTE(v108[0]) = 46;
  v68 = llvm::StringRef::rfind();
  if (v68 == -1)
  {
    v75 = 0;
    v76 = 0;
  }
  else
  {
    v77 = *(_QWORD *)&__dst[8] >= (unint64_t)(v68 + 1) ? v68 + 1 : *(_QWORD *)&__dst[8];
    v75 = (unsigned __int8 *)(*(_QWORD *)__dst + v77);
    v76 = *(_QWORD *)&__dst[8] - v77;
  }
  if ((sub_22E7312F8(v75, v76, v69, v70, v71, v72, v73, v74) & 0x800) == 0)
    goto LABEL_107;
  v78 = *(_QWORD *)(*a1 + 200);
  v79 = *(_BYTE *)(v78 + 191);
  if (v79 >= 0)
    v80 = (const void *)(v78 + 168);
  else
    v80 = *(const void **)(v78 + 168);
  if (v80)
  {
    v81 = v79;
    v82 = *(_QWORD *)(v78 + 176);
    v83 = v79 & 0x7F;
    if (v81 >= 0)
      v84 = v83;
    else
      v84 = v82;
    if (v84 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v84 >= 0x17)
      {
        v86 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v84 | 7) != 0x17)
          v86 = v84 | 7;
        v87 = v86 + 1;
        v85 = operator new(v86 + 1);
        *(_QWORD *)&__dst[16] = v87 | 0x8000000000000000;
        *(_QWORD *)__dst = v85;
        *(_QWORD *)&__dst[8] = v84;
      }
      else
      {
        __dst[23] = v84;
        v85 = __dst;
        if (!v84)
          goto LABEL_103;
      }
      memmove(v85, v80, v84);
LABEL_103:
      v85[v84] = 0;
      goto LABEL_104;
    }
LABEL_153:
    abort();
  }
  memset(__dst, 0, 24);
LABEL_104:
  if (SHIBYTE(v122) < 0)
    operator delete(v121[0]);
  *(_OWORD *)v121 = *(_OWORD *)__dst;
  v122 = *(_QWORD *)&__dst[16];
LABEL_107:
  v88 = sub_22F254A5C(*a1, *(_DWORD *)(v23 + 344), &v126);
  v31 = v88;
  v32 = v88 & 0xFFFFFF00;
  v30 = BYTE4(v88);
LABEL_108:
  sub_22F20D6D4("metal", 5uLL, &v117);
  if (v30)
  {
    v90 = v31;
    v105 = v127;
    v106 = v126;
    v89 = 1;
  }
  else
  {
    v89 = 0;
    v90 = 0;
    v32 = 0;
  }
  v91 = *(_QWORD *)(*a1 + 184);
  if (v122 >= 0)
    v92 = v121;
  else
    v92 = (void **)v121[0];
  if (v122 >= 0)
    v93 = HIBYTE(v122) & 0x7F;
  else
    v93 = (size_t)v121[1];
  sub_22E490E28(__dst, a1, v92, v93);
  v94 = sub_22E491078(a1);
  sub_22E490E28(v108, a1, v94, v95);
  v112 = v32 | v90;
  v113 = v106;
  v114 = v105;
  v115 = v89;
  *(_DWORD *)v116 = *(_DWORD *)v123;
  *(_DWORD *)&v116[3] = *(_DWORD *)&v123[3];
  sub_22F254B20(v111, *a1, (_QWORD *)v23, *(_DWORD *)(v23 + 344));
  llvm::DIBuilder::createFile();
  if (SHIBYTE(v109) < 0)
    operator delete(v108[0]);
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  if (*(_QWORD *)(*(_QWORD *)(*a1 + 184) + 96) >> 61 == 2)
  {
    v96 = *(_QWORD *)(*a1 + 168);
    v97 = *(_BYTE *)(v96 + 23);
    if (v97 >= 0)
      v98 = *(void **)(*a1 + 168);
    else
      v98 = *(void **)v96;
    if (v97 >= 0)
      v99 = v97 & 0x7F;
    else
      v99 = *(_QWORD *)(v96 + 8);
    llvm::sys::path::rbegin();
    llvm::sys::path::rend();
    v107 = *(_OWORD *)&__dst[16];
    if ((llvm::sys::path::reverse_iterator::operator==() & 1) == 0)
    {
      do
      {
        if (*((_QWORD *)&v107 + 1) >= 4uLL && *(_DWORD *)(v107 + *((_QWORD *)&v107 + 1) - 4) == 1801745198)
          break;
        llvm::sys::path::reverse_iterator::operator++();
      }
      while (!llvm::sys::path::reverse_iterator::operator==());
    }
    llvm::sys::path::reverse_iterator::operator==();
    v100 = v99;
    v101 = v98;
  }
  else
  {
    v100 = 0;
    v101 = 0;
  }
  if ((*(_BYTE *)(v91 + 5) & 4) != 0)
  {
    if (SHIBYTE(v118) < 0)
    {
      v102 = v101;
      v103 = v100;
      sub_22E3BB2B4(__dst, (void *)v117, *((unint64_t *)&v117 + 1));
      v101 = v102;
      v100 = v103;
    }
    else
    {
      *(_OWORD *)__dst = v117;
      *(_QWORD *)&__dst[16] = v118;
    }
  }
  else
  {
    __dst[23] = 0;
    __dst[0] = 0;
  }
  sub_22E490E28(v108, a1, v101, v100);
  a1[58] = llvm::DIBuilder::createCompileUnit();
  if (SHIBYTE(v109) < 0)
    operator delete(v108[0]);
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  if (SHIBYTE(v118) < 0)
    operator delete((void *)v117);
  if (SHIBYTE(v120) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v122) < 0)
    operator delete(v121[0]);
  if (v126 != (_OWORD *)v128)
    free(v126);
  return a1;
}

uint64_t *sub_22E48EE24(uint64_t *result, int a2, int a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = result;
  v4 = result[1];
  if (!*(_BYTE *)(v4 + 2892) && *(_QWORD *)(v4 + 2880))
  {
    v8 = *(uint64_t **)(v4 + 2880);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v4 + 272));
    sub_22E49F2E8(v3, &v10);
    if (v10)
      llvm::MetadataTracking::untrack();
    if (!*v3 || (result = (uint64_t *)sub_22F29B998(*v8), (_DWORD)result))
    {
      v5 = (uint64_t *)(v3[1] + 272);
      if (a2)
      {
        return (uint64_t *)sub_22F254674((uint64_t)v8, (uint64_t)v5, a2);
      }
      else if (a3)
      {
        return sub_22E49F34C(v5, 0);
      }
      else
      {
        llvm::DILocation::getImpl();
        llvm::DebugLoc::DebugLoc();
        result = (uint64_t *)sub_22E3CF21C((uint64_t)v5, 0, v9);
        if (v9)
          return (uint64_t *)llvm::MetadataTracking::untrack();
      }
    }
  }
  else
  {
    result[1] = 0;
  }
  return result;
}

uint64_t *sub_22E48EF50(uint64_t *a1, uint64_t a2, int a3, int a4)
{
  *a1 = 0;
  a1[1] = a2;
  sub_22E48EE24(a1, a4, a3);
  return a1;
}

uint64_t *sub_22E48EF80(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v4;

  *a1 = 0;
  a1[1] = a2;
  sub_22EFF605C(a3);
  sub_22E48EE24(a1, v4, 0);
  return a1;
}

_QWORD *sub_22E48EFBC(_QWORD *result, uint64_t a2, uint64_t *a3)
{
  BOOL v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  *result = 0;
  result[1] = a2;
  if (*(_BYTE *)(a2 + 2892))
    v3 = 1;
  else
    v3 = *(_QWORD *)(a2 + 2880) == 0;
  if (v3)
  {
    result[1] = 0;
  }
  else
  {
    v5 = a2 + 272;
    v6 = result;
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a2 + 272));
    sub_22E49F2E8(v6, &v8);
    if (v8)
      llvm::MetadataTracking::untrack();
    result = v6;
    if (*a3)
    {
      v7 = *a3;
      llvm::MetadataTracking::retrack();
      *a3 = 0;
      sub_22E3CF21C(v5, 0, v7);
      result = v6;
      if (v7)
      {
        llvm::MetadataTracking::untrack();
        return v6;
      }
    }
  }
  return result;
}

_QWORD *sub_22E48F084(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v1 = result[1];
  if (v1)
  {
    v2 = v1 + 272;
    v3 = result;
    v6 = *result;
    if (*result)
    {
      llvm::MetadataTracking::retrack();
      *v3 = 0;
      v4 = v6;
    }
    else
    {
      v4 = 0;
    }
    sub_22E3CF21C(v2, 0, v4);
    result = v3;
    if (v6)
    {
      llvm::MetadataTracking::untrack();
      result = v3;
    }
  }
  if (*result)
  {
    v5 = result;
    llvm::MetadataTracking::untrack();
    return v5;
  }
  return result;
}

uint64_t sub_22E48F12C(uint64_t a1, llvm::IRBuilderBase *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  _BYTE *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  _DWORD *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  int v23;
  uint64_t v25;

  v8 = a3 & 0xFFFFFFFFFFFFFFF8;
  v9 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF8) + 32))(a3 & 0xFFFFFFFFFFFFFFF8);
  v25 = 0;
  if (sub_22F24C318(*(_QWORD *)(a1 + 2544), *(_DWORD *)(a1 + 2560), v9, &v25))
    v10 = v25 == *(_QWORD *)(a1 + 2544) + 16 * *(unsigned int *)(a1 + 2560);
  else
    v10 = 1;
  if (v10 || (v11 = *(_BYTE **)(v25 + 8)) == 0 || *v11 != 17 || (v11[44] & 8) == 0)
    v11 = (_BYTE *)sub_22F2564E0(a1, a3, a4, 1);
  v12 = (*(_QWORD *)(a1 + 2344) - *(_QWORD *)(a1 + 2336)) >> 3;
  v13 = *(char **)(a1 + 2392);
  v14 = *(_QWORD *)(a1 + 2400);
  if ((unint64_t)v13 >= v14)
  {
    v16 = *(char **)(a1 + 2384);
    v17 = (v13 - v16) >> 2;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 62)
      abort();
    v19 = v14 - (_QWORD)v16;
    if (v19 >> 1 > v18)
      v18 = v19 >> 1;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
      v20 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 >> 62)
        sub_22E3B3F8C();
      v21 = (char *)operator new(4 * v20);
    }
    else
    {
      v21 = 0;
    }
    v22 = &v21[4 * v17];
    *(_DWORD *)v22 = v12;
    v15 = v22 + 4;
    while (v13 != v16)
    {
      v23 = *((_DWORD *)v13 - 1);
      v13 -= 4;
      *((_DWORD *)v22 - 1) = v23;
      v22 -= 4;
    }
    *(_QWORD *)(a1 + 2384) = v22;
    *(_QWORD *)(a1 + 2392) = v15;
    *(_QWORD *)(a1 + 2400) = &v21[4 * v20];
    if (v16)
      operator delete(v16);
  }
  else
  {
    *(_DWORD *)v13 = v12;
    v15 = v13 + 4;
  }
  *(_QWORD *)(a1 + 2392) = v15;
  sub_22F254808((uint64_t *)(a1 + 2336), (uint64_t)v11);
  llvm::IRBuilderBase::getCurrentDebugLocation(a2);
  *(_QWORD *)(a1 + 568) = llvm::DebugLoc::get((llvm::DebugLoc *)&v25);
  if (v25)
    llvm::MetadataTracking::untrack();
  return sub_22F254674(a1, (uint64_t)a2, *(_DWORD *)(v8 + 24));
}

uint64_t sub_22E48F304(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t LexicalBlockFile;
  uint64_t v14[3];

  if (a2)
  {
    v2 = result;
    if (a2 < 0)
    {
      result = sub_22F1E22F0(*(_QWORD **)(*(_QWORD *)(*(_QWORD *)result + 144) + 1992), a2);
      a2 = result;
    }
    *(_DWORD *)(v2 + 560) = a2;
    v3 = *(_QWORD *)(v2 + 2344);
    if (*(_QWORD *)(v2 + 2336) != v3)
    {
      v4 = *(unsigned __int8 **)(v3 - 8);
      result = sub_22F1E2F68(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 144) + 1992), a2, *(unsigned __int8 *)(v2 + 13), (uint64_t)v14);
      if (v14[0])
      {
        v5 = v4;
        if (*v4 != 15)
          v5 = *(unsigned __int8 **)&v4[-8 * *((unsigned int *)v4 + 2)];
        result = sub_22E48F44C((uint64_t *)v2, *(_DWORD *)(v2 + 560));
        if (v5 != (unsigned __int8 *)result)
        {
          v6 = *v4;
          if (v6 == 19)
          {
            v7 = *(_QWORD *)(v2 + 2344);
            v9 = *(_QWORD *)(v7 - 8);
            v8 = v7 - 8;
            if (v9)
              llvm::MetadataTracking::untrack();
            *(_QWORD *)(v2 + 2344) = v8;
          }
          else
          {
            if ((v6 - 17) > 1)
              return result;
            v10 = *(_QWORD *)(v2 + 2344);
            v12 = *(_QWORD *)(v10 - 8);
            v11 = v10 - 8;
            if (v12)
              llvm::MetadataTracking::untrack();
            *(_QWORD *)(v2 + 2344) = v11;
          }
          sub_22E48F44C((uint64_t *)v2, *(_DWORD *)(v2 + 560));
          LexicalBlockFile = llvm::DIBuilder::createLexicalBlockFile();
          return sub_22F254808((uint64_t *)(v2 + 2336), LexicalBlockFile);
        }
      }
    }
  }
  return result;
}

uint64_t sub_22E48F44C(uint64_t *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  llvm::MDString *v6;
  unsigned int v7;
  void *String;
  size_t v9;
  uint64_t v10;
  llvm::MDString *v11;
  size_t v12;
  size_t v13;
  uint64_t File;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  _DWORD *v22;
  uint64_t v23;
  unsigned int v24;
  _DWORD *v25;
  unsigned int v26;
  void *v27;
  size_t v28;
  size_t v29;
  void *v30;
  const void *v31;
  uint64_t v32;
  _QWORD *v33;
  unsigned int v34;
  void *v35;
  void *v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  __int16 v40;
  __int16 v41;
  __int16 v42;
  void *v43;
  size_t v44;
  __int16 v45;
  void *v46;
  void *__s1;
  size_t __n;
  __int128 v49;
  uint64_t v50;
  void **p_dst;
  size_t v52;
  void *__s2;
  size_t v54;
  __int16 v55;
  void *__p;
  char v57;
  void *__dst;
  char v59;
  void *v60;
  __int128 v61;
  _BYTE v62[32];
  void *v63;
  __int128 v64;
  _BYTE v65[128];
  char *v66;
  __int128 v67;
  _QWORD v68[19];

  v68[16] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(*(_QWORD *)(*a1 + 144) + 1992);
  if (a2)
  {
    sub_22F1E2F68(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 1992), a2, *((unsigned __int8 *)a1 + 13), (uint64_t)&v66);
    String = v66;
    if (v66 && *v66)
    {
      v9 = strlen(v66);
    }
    else
    {
      v10 = a1[58];
      if (*(_BYTE *)v10 != 15)
        v10 = *(_QWORD *)(v10 - 8 * *(unsigned int *)(v10 + 8));
      v11 = *(llvm::MDString **)(v10 - 8 * *(unsigned int *)(v10 + 8));
      if (v11)
      {
        String = (void *)llvm::MDString::getString(v11);
        v9 = v13;
      }
      else
      {
        String = 0;
        v9 = 0;
      }
    }
    v7 = v67;
  }
  else
  {
    v5 = a1[58];
    if (*(_BYTE *)v5 != 15)
      v5 = *(_QWORD *)(v5 - 8 * *(unsigned int *)(v5 + 8));
    v6 = *(llvm::MDString **)(v5 - 8 * *(unsigned int *)(v5 + 8));
    if (v6)
    {
      String = (void *)llvm::MDString::getString(v6);
      v9 = v12;
      v7 = 0;
    }
    else
    {
      v7 = 0;
      String = 0;
      v9 = 0;
    }
  }
  v66 = 0;
  if (!sub_22F24C318(a1[315], *((_DWORD *)a1 + 634), (uint64_t)String, &v66)
    || v66 == (char *)(a1[315] + 16 * *((unsigned int *)a1 + 634))
    || (File = *((_QWORD *)v66 + 1)) == 0)
  {
    v60 = v62;
    v61 = xmmword_22F44E330;
    v16 = sub_22F254A5C(*a1, v7, &v60);
    v17 = HIDWORD(v16);
    if (HIDWORD(v16))
    {
      v18 = v16;
      v35 = v60;
      v36 = (void *)v61;
      LOBYTE(v17) = 1;
    }
    else
    {
      v18 = 0;
    }
    v19 = a2 & 0x7FFFFFFF;
    v20 = *(_DWORD *)(v4 + 304);
    v21 = v20 + 1;
    v37 = v17;
    if (v20 + 1 > 1)
    {
      if ((v20 & 0x80000000) != 0)
      {
        if (((*(_QWORD *)(*(_QWORD *)(v4 + 224) + 8 * ((-2 - v20) >> 6)) >> (-2 - v20)) & 1) != 0)
        {
          v22 = (_DWORD *)(*(_QWORD *)(v4 + 200) + 24 * (-2 - v20));
        }
        else
        {
          v22 = (_DWORD *)sub_22F1E1134(v4, -2 - v20, 0);
          v19 = a2 & 0x7FFFFFFF;
        }
      }
      else
      {
        v22 = (_DWORD *)(*(_QWORD *)(v4 + 184) + 24 * v20);
      }
    }
    else
    {
      v22 = *(_DWORD **)(v4 + 184);
    }
    v23 = (uint64_t)(a1 + 315);
    if ((*v22 & 0x7FFFFFFFu) <= v19
      && (v20 == -2
       || (v21 != *(_DWORD *)(v4 + 192)
         ? ((v21 & 0x80000000) != 0
          ? (((*(_QWORD *)(*(_QWORD *)(v4 + 224) + 8 * ((-3 - v20) >> 6)) >> (-3 - v20)) & 1) == 0
           ? (_DWORD *)(v34 = v19, v25 = (_DWORD *)sub_22F1E1134(v4, -3 - v20, 0),
                                   v19 = v34,
                                   v23 = (uint64_t)(a1 + 315))
           : (v25 = (_DWORD *)(*(_QWORD *)(v4 + 200) + 24 * (-3 - v20))))
          : (v25 = (_DWORD *)(*(_QWORD *)(v4 + 184) + 24 * v21)),
            v24 = *v25 & 0x7FFFFFFF)
         : (v24 = *(_DWORD *)(v4 + 216)),
           v24 > v19)))
    {
      v26 = *(_DWORD *)(v4 + 304);
    }
    else
    {
      v26 = sub_22F1E1EE8(v4, v19);
    }
    sub_22F254B20((const char *)&v38, *a1, (_QWORD *)v4, v26);
    sub_22E490E28(&__dst, a1, String, v9);
    v27 = sub_22E491078(a1);
    sub_22E490E28(&__p, a1, v27, v28);
    v66 = (char *)v68;
    v67 = xmmword_22F44E310;
    v63 = v65;
    v64 = xmmword_22F44E310;
    v55 = 260;
    p_dst = &__dst;
    if (llvm::sys::path::is_absolute())
    {
      llvm::sys::path::begin();
      llvm::sys::path::end();
      llvm::sys::path::begin();
      llvm::sys::path::end();
      if ((llvm::sys::path::const_iterator::operator==() & 1) == 0)
      {
        do
        {
          v29 = __n;
          if (__n != v54)
            break;
          v30 = __s1;
          if (__n)
          {
            if (memcmp(__s1, __s2, __n))
              break;
          }
          v45 = 261;
          v43 = v30;
          v44 = v29;
          v42 = 257;
          v41 = 257;
          v40 = 257;
          llvm::sys::path::append();
          llvm::sys::path::const_iterator::operator++();
          llvm::sys::path::const_iterator::operator++();
        }
        while (!llvm::sys::path::const_iterator::operator==());
      }
      v31 = (const void *)llvm::sys::path::root_path();
      if ((v32 != (_QWORD)v67 || (_QWORD)v67 && memcmp(v31, v66, v67))
        && (llvm::sys::path::const_iterator::operator==() & 1) == 0)
      {
        do
        {
          v45 = 261;
          v43 = __s2;
          v44 = v54;
          v42 = 257;
          v41 = 257;
          v40 = 257;
          llvm::sys::path::append();
          llvm::sys::path::const_iterator::operator++();
        }
        while (!llvm::sys::path::const_iterator::operator==());
      }
    }
    else
    {
      v55 = 261;
      p_dst = (void **)String;
      v52 = v9;
      llvm::sys::path::is_absolute();
    }
    LODWORD(p_dst) = v18;
    v52 = (size_t)v35;
    __s2 = v36;
    LOBYTE(v54) = v37;
    v49 = v38;
    v50 = v39;
    File = llvm::DIBuilder::createFile();
    v46 = String;
    v33 = sub_22F25827C(v23, (uint64_t *)&v46);
    sub_22E4911C0(v33 + 1, File);
    if (v63 != v65)
      free(v63);
    if (v66 != (char *)v68)
      free(v66);
    if (v57 < 0)
      operator delete(__p);
    if (v59 < 0)
      operator delete(__dst);
    if (v60 != v62)
      free(v60);
  }
  return File;
}

uint64_t sub_22E48FAEC(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v4 = sub_22E48FBD8(a1, a2);
  v5 = (unsigned __int8 *)v4;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = v6 & 0xFFFFFFFFFFFFFFF8;
  if ((v6 & 4) != 0)
    v7 = *(_QWORD *)v7;
  v8 = *(_WORD *)(v7 + 8) & 0x7F;
  v9 = -40;
  if (v8 > 0x46)
  {
    if (v8 == 83)
      goto LABEL_19;
    if (v8 == 71)
    {
      v9 = -56;
      goto LABEL_19;
    }
    if (v8 != 81)
    {
LABEL_14:
      if (v8 - 52 < 6)
      {
        v9 = -72;
      }
      else
      {
        v9 = -48;
        if (v8 - 33 < 5)
          v9 = -64;
      }
    }
  }
  else
  {
    if (v8 > 0x18)
      goto LABEL_13;
    if (v8 == 16)
    {
LABEL_6:
      v9 = -48;
      goto LABEL_19;
    }
    if (((1 << v8) & 0x1066) == 0)
    {
      if (v8 == 24)
        goto LABEL_6;
LABEL_13:
      if (v8 == 70)
      {
        v9 = -64;
        goto LABEL_19;
      }
      goto LABEL_14;
    }
  }
LABEL_19:
  if (!v4)
    v5 = *(unsigned __int8 **)(a1 + 464);
  return sub_22E48FD44(a1, v7 + v9, v5);
}

unint64_t sub_22E48FBD8(uint64_t a1, unint64_t a2)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  _OWORD v13[5];
  _OWORD v14[5];
  _OWORD v15[5];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if ((*(_DWORD *)(a2 + 28) & 0x7Eu) - 34 > 3 || (result = sub_22EFC3500(a2)) != 0)
  {
    if (*(_BYTE *)(a1 + 12) && (*(_BYTE *)(a2 + 29) & 0x80) != 0)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 16048);
      (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v7 + 96))(&v16, v7, *(unsigned int *)(a2 - 8));
      if (v21)
      {
        v15[2] = v18;
        v15[3] = v19;
        v15[4] = v20;
        v15[0] = v16;
        v15[1] = v17;
        v8 = v15;
        v9 = a1;
        v10 = 1;
        return sub_22E495A4C(v9, (uint64_t)v8, v10);
      }
    }
    else if (*(_QWORD *)(a1 + 472))
    {
      v5 = *(_QWORD *)(a2 + 8) & 6;
      if ((*(_BYTE *)(a2 + 29) & 0x80) != 0)
      {
        if (!v5)
          goto LABEL_15;
        v6 = sub_22EFC7594(a2);
      }
      else
      {
        if (!v5)
          goto LABEL_15;
        v6 = *(_QWORD *)(a2 - 8);
      }
      if (v6)
      {
        sub_22F420190((uint64_t)&v16, v6);
        v14[2] = v18;
        v14[3] = v19;
        v14[4] = v20;
        v14[0] = v16;
        v14[1] = v17;
        v8 = v14;
        goto LABEL_16;
      }
LABEL_15:
      v11 = *(_OWORD *)(a1 + 528);
      v13[2] = *(_OWORD *)(a1 + 512);
      v13[3] = v11;
      v13[4] = *(_OWORD *)(a1 + 544);
      v12 = *(_OWORD *)(a1 + 496);
      v13[0] = *(_OWORD *)(a1 + 480);
      v13[1] = v12;
      v8 = v13;
LABEL_16:
      v9 = a1;
      v10 = 0;
      return sub_22E495A4C(v9, (uint64_t)v8, v10);
    }
    return 0;
  }
  return result;
}

uint64_t sub_22E48FD44(uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  BOOL v7;
  int v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (!a2)
    return (uint64_t)a3;
  v13 = 0;
  if (sub_22F24C318(*(_QWORD *)(a1 + 2360), *(_DWORD *)(a1 + 2376), a2, &v13))
    v7 = v13 == *(_QWORD *)(a1 + 2360) + 16 * *(unsigned int *)(a1 + 2376);
  else
    v7 = 1;
  if (!v7)
  {
    a3 = *(unsigned __int8 **)(v13 + 8);
    if (a3)
    {
      v9 = *a3;
      if ((v9 - 11) >= 0xB && v9 != 33 && v9 != 31)
        return 0;
    }
    return (uint64_t)a3;
  }
  v8 = *(_DWORD *)(a2 + 28);
  if ((v8 & 0x7F) == 0x10)
    return sub_22E48FE84(a1, a2);
  if ((v8 & 0x7Eu) - 38 < 0xFFFFFFFC || (sub_22EFC7ADC(a2 + 64) & 1) != 0)
    return (uint64_t)a3;
  v10 = *(_QWORD *)(a2 + 48);
  if (v10)
    v11 = v10 & 0xFFFFFFFFFFFFFFF0;
  else
    v11 = sub_22EF6462C(*(_QWORD *)(*(_QWORD *)a1 + 144), a2);
  v12 = *(_QWORD *)(a1 + 464);
  if (*(_BYTE *)v12 != 15)
    v12 = *(_QWORD *)(v12 - 8 * *(unsigned int *)(v12 + 8));
  return sub_22F254858(a1, v11, v12);
}

uint64_t sub_22E48FE84(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  uint64_t NameSpace;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = 0;
  if (sub_22F24C318(*(_QWORD *)(a1 + 2616), *(_DWORD *)(a1 + 2632), a2, &v9))
    v4 = v9 == *(_QWORD *)(a1 + 2616) + 16 * *(unsigned int *)(a1 + 2632);
  else
    v4 = 1;
  if (!v4)
    return *(_QWORD *)(v9 + 8);
  sub_22E48FAEC(a1, a2);
  NameSpace = llvm::DIBuilder::createNameSpace();
  v7 = sub_22F25827C(a1 + 2616, &v8);
  sub_22E4911C0(v7 + 1, NameSpace);
  return NameSpace;
}

void *sub_22E48FF64(uint64_t a1, uint64_t a2)
{
  int v3;
  void **v4;
  size_t v5;
  void *v6;
  void *v7;
  void **v8;
  void *__p[2];
  char v11;

  sub_22E49000C(__p, a1, a2, 0);
  v3 = v11;
  v4 = (void **)__p[0];
  if (v11 >= 0)
    v5 = v11 & 0x7F;
  else
    v5 = (size_t)__p[1];
  v6 = (void *)sub_22E3CD3D4(a1 + 2408, v5, 0);
  v7 = v6;
  if (v5)
  {
    if (v3 >= 0)
      v8 = __p;
    else
      v8 = v4;
    memcpy(v6, v8, v5);
  }
  if (v11 < 0)
    operator delete(__p[0]);
  return v7;
}

void sub_22E49000C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v9;
  int v10;
  int v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  BOOL v20;
  _DWORD *v21;
  void (**v22)(void);
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  int v32;
  void **p_p;
  void *__p;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[2];
  uint64_t v38;
  int v39;
  uint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  char v43;
  uint64_t v44;
  int v45;
  _QWORD *v46;
  char *v47;
  void **v48;
  void **v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v39 = 0;
  v43 = 0;
  v44 = 0;
  v45 = 1;
  v41 = 0;
  v42 = 0;
  v40 = 0;
  v9 = MEMORY[0x24BED83D8];
  v38 = MEMORY[0x24BED83D8] + 16;
  v46 = a1;
  llvm::raw_ostream::SetBufferAndMode();
  if (!a3)
    goto LABEL_36;
  v10 = *(_DWORD *)(a3 + 28);
  v11 = v10 & 0x7F;
  if ((v11 - 75) < 0xFFFFFFC2)
    goto LABEL_36;
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 184) + 96);
  if ((v12 & 0x1800000000000000) != 0)
    v13 = (v12 >> 55) & 3;
  else
    v13 = 0;
  v14 = v10 & 0x7E;
  if ((v11 - 38) >= 0xFFFFFFFD)
  {
    if (v14 == 36)
    {
      v16 = *(_QWORD *)(a3 + 168);
      v4 = *(_QWORD *)v16;
      v5 = *(unsigned int *)(v16 + 8);
    }
    v17 = 0;
    v18 = v14 == 36;
LABEL_13:
    v47 = (char *)&unk_24FA63648;
    v48 = (void **)&v47;
    v49 = (void **)&v47;
    if (!v18)
    {
      v15 = 1;
      goto LABEL_17;
    }
LABEL_16:
    v25 = v4;
    v26 = v5;
    v15 = sub_22E4A0740((uint64_t)&v47, (uint64_t)&v25) ^ 1 | v17;
    goto LABEL_17;
  }
  if ((v14 - 58) >= 0xFFFFFFFA)
  {
    sub_22F255A38((uint64_t)&v25, a3);
    v4 = v26;
    v5 = v27;
    v18 = v28;
    v23 = *(_QWORD *)(a3 + 40) & 7;
    if ((_DWORD)v23 == 7)
    {
      v24 = *(_DWORD *)(*(_QWORD *)(a3 + 40) & 0xFFFFFFFFFFFFFFF8);
      if (v24 >= 3)
        v24 = 3;
      LODWORD(v23) = v24 | 8;
    }
    v17 = (v23 - 5) < 2;
    goto LABEL_13;
  }
  if ((v11 - 67) >= 0xFFFFFFFE)
  {
    v17 = 0;
    v19 = *(_QWORD *)(a3 + 128);
    v4 = *(_QWORD *)v19;
    v5 = *(unsigned int *)(v19 + 8);
    v47 = (char *)&unk_24FA63648;
    v48 = (void **)&v47;
    v49 = (void **)&v47;
    goto LABEL_16;
  }
  v47 = (char *)&unk_24FA63648;
  v48 = (void **)&v47;
  v49 = (void **)&v47;
  v15 = 1;
LABEL_17:
  v37[0] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 144) + 15104) & 0xFFFF65FFDFFFBFFFLL | 0x120020000000 | (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 184) + 76) >> 1) & 0x1000000000;
  v37[1] = a2 + 1416;
  if (v13)
    v20 = v15 == 0;
  else
    v20 = 0;
  if (v20)
  {
    if (v13 == 2)
    {
      v21 = v42;
      if ((unint64_t)(v41 - v42) > 4)
      {
        v42[4] = 124;
        *v21 = 1314149215;
        v42 += 5;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v38, "_STN|");
      }
      sub_22EFC6724((uint64_t)&v38, *(_QWORD *)(a3 + 40));
      __p = 0;
      v35 = 0;
      v36 = 0;
      LODWORD(v26) = 0;
      v30 = 0;
      v31 = 0;
      v32 = 1;
      v28 = 0;
      v29 = 0;
      v27 = 0;
      v25 = v9 + 16;
      p_p = &__p;
      llvm::raw_ostream::SetBufferAndMode();
      sub_22EFC6724((uint64_t)&v25, *(_QWORD *)(a3 + 40));
      if (v41 == v42)
        llvm::raw_ostream::write((llvm::raw_ostream *)&v38, "|");
      else
        *v42++ = 124;
      sub_22F117B8C((llvm::raw_ostream *)&v38, v4, v5, (uint64_t)v37, 0, 0, 0);
      sub_22F117B8C((llvm::raw_ostream *)&v25, v4, v5, (uint64_t)v37, 0, 0, 0);
    }
    else
    {
      sub_22EFC6724((uint64_t)&v38, *(_QWORD *)(a3 + 40));
      __p = 0;
      v35 = 0;
      v36 = 0;
      LODWORD(v26) = 0;
      v30 = 0;
      v31 = 0;
      v32 = 1;
      v28 = 0;
      v29 = 0;
      v27 = 0;
      v25 = v9 + 16;
      p_p = &__p;
      llvm::raw_ostream::SetBufferAndMode();
      sub_22EFC6724((uint64_t)&v25, *(_QWORD *)(a3 + 40));
    }
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v25);
    if (SHIBYTE(v36) < 0)
      operator delete(__p);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)a3 + 96))(a3, &v38, v37, a4);
  }
  if (v49 == (void **)&v47)
  {
    v22 = (void (**)(void))(v47 + 32);
    goto LABEL_35;
  }
  if (v49)
  {
    v22 = (void (**)(void))((char *)*v49 + 40);
LABEL_35:
    (*v22)();
  }
LABEL_36:
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v38);
}

void *sub_22E49045C(uint64_t a1, uint64_t a2)
{
  char v4;
  char *v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  BOOL v19;
  unsigned int *v20;
  const void *v21;
  size_t v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  _DWORD *v27;
  const char *v28;
  size_t v29;
  unsigned int v30;
  char **v31;
  const char *v32;
  size_t v33;
  char *v34;
  char **v35;
  uint64_t v36;
  unint64_t v37;
  const char *v38;
  size_t v39;
  char *v40;
  char *v41;
  unint64_t v42;
  unsigned int *v44;
  const void *v45;
  size_t v46;
  unsigned int v47;
  char *v48;
  char *v49;
  char *v50;
  llvm::raw_ostream *v51;
  const char *p_p;
  llvm::raw_ostream *v53;
  _BYTE *v54;
  size_t v55;
  const void *v56;
  void *v57;
  void *v58;
  uint64_t v60;
  void *__p;
  char v62;
  _BYTE v63[24];
  unint64_t v64;
  char *v65;
  uint64_t v66;
  void *v67;
  __int128 v68;
  _QWORD v69[33];

  v69[32] = *MEMORY[0x24BDAC8D0];
  v67 = v69;
  v68 = xmmword_22F44E320;
  sub_22F242C48((uint64_t)v63, (uint64_t)&v67);
  if ((*(_BYTE *)(a2 + 58) & 2) != 0)
    v4 = 45;
  else
    v4 = 43;
  v5 = v65;
  if ((unint64_t)v65 >= v64)
  {
    v6 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)v63);
  }
  else
  {
    ++v65;
    *v5 = v4;
    v6 = (llvm::raw_ostream *)v63;
  }
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if ((unint64_t)v7 >= *((_QWORD *)v6 + 3))
  {
    llvm::raw_ostream::write(v6);
  }
  else
  {
    *((_QWORD *)v6 + 4) = v7 + 1;
    *v7 = 91;
  }
  v8 = *(_QWORD *)(a2 + 16);
  v9 = v8 & 0xFFFFFFFFFFFFFFF8;
  if ((v8 & 4) != 0)
    v9 = *(_QWORD *)v9;
  v10 = *(_WORD *)(v9 + 8) & 0x7F;
  v11 = v9 - 48;
  if (!v9)
  {
    v11 = 0;
LABEL_18:
    if (v9 && v10 == 22)
    {
      v14 = *(_QWORD *)(v11 + 40);
      goto LABEL_31;
    }
    if (v10 == 19)
      v15 = v11;
    else
      v15 = 0;
    if (v9 && v10 == 19)
    {
      v16 = *(_QWORD *)(v15 + 40);
      if (v16 < 8 || (*(_QWORD *)(v15 + 40) & 7) != 0)
      {
        v14 = *(_QWORD *)(*(_QWORD *)(v15 + 104) + 40);
LABEL_31:
        v18 = v14 & 7;
        v13 = v14 & 0xFFFFFFFFFFFFFFF8;
        if (v18)
          v19 = 1;
        else
          v19 = v13 == 0;
        if (v19)
          goto LABEL_79;
        goto LABEL_35;
      }
      v32 = (const char *)(*(_QWORD *)((v16 & 0xFFFFFFFFFFFFFFF8) + 16) + 16);
      v33 = strlen(v32);
      v34 = v65;
      if (v33 <= v64 - (unint64_t)v65)
      {
        v35 = &v65;
        if (v33)
        {
          memcpy(v65, v32, v33);
          v34 = &v65[v33];
          v65 += v33;
        }
        v31 = (char **)v63;
      }
      else
      {
        v31 = (char **)llvm::raw_ostream::write((llvm::raw_ostream *)v63, v32);
        v35 = v31 + 4;
        v34 = v31[4];
      }
      if (v34 >= v31[3])
      {
        v31 = (char **)llvm::raw_ostream::write((llvm::raw_ostream *)v31);
      }
      else
      {
        *v35 = v34 + 1;
        *v34 = 40;
      }
      v36 = *(_QWORD *)(v15 + 40);
      if ((v36 & 7) != 0)
        v37 = 0;
      else
        v37 = v36 & 0xFFFFFFFFFFFFFFF8;
      v38 = (const char *)(*(_QWORD *)(v37 + 16) + 16);
      v39 = strlen(v38);
      v40 = v31[4];
      if (v39 <= v31[3] - v40)
      {
        if (v39)
        {
          memcpy(v40, v38, v39);
          v40 = &v31[4][v39];
          v31[4] = v40;
        }
      }
      else
      {
        v31 = (char **)llvm::raw_ostream::write((llvm::raw_ostream *)v31, v38);
        v40 = v31[4];
      }
      if (v40 < v31[3])
      {
        v31[4] = v40 + 1;
        *v40 = 41;
        goto LABEL_79;
      }
LABEL_78:
      llvm::raw_ostream::write((llvm::raw_ostream *)v31);
      goto LABEL_79;
    }
    if (v10 == 20)
      v24 = v11;
    else
      v24 = 0;
    if (!v9 || v10 != 20)
      goto LABEL_79;
    v25 = *(_QWORD *)(*(_QWORD *)(v24 + 88) + 40) & 0xFFFFFFFFFFFFFFF8;
    if ((*(_QWORD *)(*(_QWORD *)(v24 + 88) + 40) & 7) == 0 && v25 != 0)
    {
      v27 = *(_DWORD **)(v25 + 16);
      v30 = *v27;
      v28 = (const char *)(v27 + 4);
      v29 = v30;
      if (v30 > v64 - (unint64_t)v65)
      {
        v31 = (char **)llvm::raw_ostream::write((llvm::raw_ostream *)v63, v28);
        goto LABEL_65;
      }
      if (v29)
      {
        memcpy(v65, v28, v29);
        v65 += v29;
      }
    }
    v31 = (char **)v63;
LABEL_65:
    v41 = v31[4];
    if (v41 >= v31[3])
    {
      v31 = (char **)llvm::raw_ostream::write((llvm::raw_ostream *)v31);
    }
    else
    {
      v31[4] = v41 + 1;
      *v41 = 40;
    }
    v42 = *(_QWORD *)(v24 + 40) & 0xFFFFFFFFFFFFFFF8;
    if ((*(_QWORD *)(v24 + 40) & 7) == 0 && v42 != 0)
    {
      v44 = *(unsigned int **)(v42 + 16);
      v47 = *v44;
      v45 = v44 + 4;
      v46 = v47;
      v48 = v31[4];
      if (v47 <= (unint64_t)(v31[3] - v48))
      {
        if (v46)
        {
          memcpy(v48, v45, v46);
          v31[4] += v46;
        }
      }
      else
      {
        v31 = (char **)llvm::raw_ostream::write((llvm::raw_ostream *)v31, (const char *)v45);
      }
    }
    v49 = v31[4];
    if (v49 < v31[3])
    {
      v31[4] = v49 + 1;
      *v49 = 41;
      goto LABEL_79;
    }
    goto LABEL_78;
  }
  if (v10 != 21)
    goto LABEL_18;
  v12 = *(_QWORD *)(*(_QWORD *)(v9 + 40) + 40);
  if ((v12 & 7) != 0)
    v13 = 0;
  else
    v13 = v12 & 0xFFFFFFFFFFFFFFF8;
LABEL_35:
  v20 = *(unsigned int **)(v13 + 16);
  v23 = *v20;
  v21 = v20 + 4;
  v22 = v23;
  if (v23 <= v64 - (unint64_t)v65)
  {
    if (v22)
    {
      memcpy(v65, v21, v22);
      v65 += v22;
    }
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v63, (const char *)v21);
  }
LABEL_79:
  v50 = v65;
  if ((unint64_t)v65 >= v64)
  {
    v51 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)v63);
  }
  else
  {
    ++v65;
    *v50 = 32;
    v51 = (llvm::raw_ostream *)v63;
  }
  v60 = *(_QWORD *)(a2 + 40);
  sub_22F1D3A38(&v60, (char *)&__p);
  if (v62 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  v53 = (llvm::raw_ostream *)llvm::raw_ostream::write(v51, p_p);
  v54 = (_BYTE *)*((_QWORD *)v53 + 4);
  if ((unint64_t)v54 >= *((_QWORD *)v53 + 3))
  {
    llvm::raw_ostream::write(v53);
  }
  else
  {
    *((_QWORD *)v53 + 4) = v54 + 1;
    *v54 = 93;
  }
  if (v62 < 0)
    operator delete(__p);
  v56 = *(const void **)v66;
  v55 = *(_QWORD *)(v66 + 8);
  v57 = (void *)sub_22E3CD3D4(a1 + 2408, v55, 0);
  v58 = v57;
  if (v55)
    memcpy(v57, v56, v55);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v63);
  if (v67 != v69)
    free(v67);
  return v58;
}

void *sub_22E490988(uint64_t a1, uint64_t a2)
{
  int v3;
  void **v4;
  size_t v5;
  void *v6;
  void *v7;
  void **v8;
  void *__p[2];
  char v11;
  uint64_t v12;

  v12 = a2;
  sub_22F1D3A38(&v12, (char *)__p);
  v3 = v11;
  v4 = (void **)__p[0];
  if (v11 >= 0)
    v5 = v11 & 0x7F;
  else
    v5 = (size_t)__p[1];
  v6 = (void *)sub_22E3CD3D4(a1 + 2408, v5, 0);
  v7 = v6;
  if (v5)
  {
    if (v3 >= 0)
      v8 = __p;
    else
      v8 = v4;
    memcpy(v6, v8, v5);
  }
  if (v11 < 0)
    operator delete(__p[0]);
  return v7;
}

uint64_t sub_22E490A2C(uint64_t a1, uint64_t a2)
{
  int v4;
  void **v5;
  size_t v6;
  void *v7;
  void *v8;
  void **p_p;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int *v20;
  const void *v21;
  size_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  void *v28;
  uint64_t v30;
  const void *v31;
  void *__p;
  __int128 v33;
  _QWORD v34[33];

  v34[32] = *MEMORY[0x24BDAC8D0];
  if ((*(_DWORD *)(a2 + 28) & 0x7E) == 0x24)
  {
    sub_22E49000C(&__p, a1, a2, 0);
LABEL_3:
    v4 = SHIBYTE(v33);
    v5 = (void **)__p;
    if (v33 >= 0)
      v6 = HIBYTE(v33) & 0x7F;
    else
      v6 = v33;
    v7 = (void *)sub_22E3CD3D4(a1 + 2408, v6, 0);
    v8 = v7;
    if (v6)
    {
      if (v4 >= 0)
        p_p = &__p;
      else
        p_p = v5;
      memcpy(v7, p_p, v6);
    }
    if (SHIBYTE(v33) < 0)
      operator delete(__p);
    return (uint64_t)v8;
  }
  v10 = *(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_QWORD *)(a2 + 40) & 7) == 0 && v10 != 0)
    return *(_QWORD *)(v10 + 16) + 16;
  v12 = *(_QWORD *)a1;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 184) + 80) & 0x20) == 0)
    return 0;
  v13 = *(_QWORD *)(a2 + 120);
  if ((v13 & 4) == 0)
  {
    v14 = v13 & 0xFFFFFFFFFFFFFFF8;
    if (v14)
    {
      v15 = *(_QWORD *)(v14 + 40);
      if ((v15 & 7) != 0)
        v10 = 0;
      else
        v10 = v15 & 0xFFFFFFFFFFFFFFF8;
      return *(_QWORD *)(v10 + 16) + 16;
    }
  }
  if ((*(_BYTE *)(*(_QWORD *)(v12 + 152) + 1) & 1) == 0)
    return 0;
  v16 = *(_QWORD *)(v12 + 144);
  v17 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v16 + 15064) + 88))(*(_QWORD *)(v16 + 15064), a2);
  if (v17
    || (v17 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v16 + 15064) + 72))(*(_QWORD *)(v16 + 15064), a2)) != 0)
  {
    v18 = *(_QWORD *)(v17 + 40) & 0xFFFFFFFFFFFFFFF8;
    if ((*(_QWORD *)(v17 + 40) & 7) != 0 || v18 == 0)
    {
      v22 = 0;
      v21 = &unk_22F566939;
    }
    else
    {
      v20 = *(unsigned int **)(v18 + 16);
      v23 = *v20;
      v21 = v20 + 4;
      v22 = v23;
    }
  }
  else
  {
    v22 = 0;
    v21 = 0;
  }
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD)
  {
    v24 = *(_QWORD *)(a2 + 128);
    if (v24)
    {
      if (((*(unsigned __int16 *)(v24 + 8) | (*(unsigned __int8 *)(v24 + 10) << 16)) & 0x100000) != 0)
      {
        v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 224) + 16);
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v30 + 32))(&__p, v30, a2);
        goto LABEL_3;
      }
    }
  }
  if (!v22)
    return 0;
  __p = v34;
  qmemcpy(v34, "<unnamed-type-", 14);
  v33 = xmmword_22F455CA0;
  if (v22 >= 0xF3)
  {
    v31 = v21;
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v21 = v31;
    v26 = __p;
    v25 = v33;
  }
  else
  {
    v25 = 14;
    v26 = v34;
  }
  memcpy((char *)v26 + v25, v21, v22);
  v27 = v33 + v22;
  *(_QWORD *)&v33 = v27;
  if ((unint64_t)(v27 + 1) > *((_QWORD *)&v33 + 1))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v27 = v33;
  }
  *((_BYTE *)__p + v27) = 62;
  v28 = (void *)sub_22E3CD3D4(a1 + 2408, v33 + 1, 0);
  v8 = v28;
  if ((_QWORD)v33 != -1)
    memcpy(v28, __p, v33 + 1);
  if (__p != v34)
    free(__p);
  return (uint64_t)v8;
}

void sub_22E490D40(_QWORD *a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, _BYTE *a4@<X8>)
{
  _DWORD *v7;

  v7 = sub_22E49F3DC(a1, a2);
  if (v7)
  {
    sub_22F1E005C(*((_QWORD *)v7 + 2) & 0xFFFFFFFFFFFFFFF8, a1[1], a1[2], a3, a4);
  }
  else
  {
    *a4 = 0;
    a4[32] = 0;
  }
}

uint64_t sub_22E490DA4(unsigned __int8 *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  unsigned int v8;

  v4 = a2;
  result = sub_22E49F484((uint64_t)a3, 2 * a2);
  if (v4)
  {
    v7 = 0;
    do
    {
      v8 = *a1++;
      *(_BYTE *)(*a3 + v7) = a0123456789abcd_2[(unint64_t)v8 >> 4] | 0x20;
      *(_BYTE *)(*a3 + v7 + 1) = a0123456789abcd_2[v8 & 0xF] | 0x20;
      v7 += 2;
      --v4;
    }
    while (v4);
  }
  return result;
}

void sub_22E490E28(_QWORD *__dst, _QWORD *a2, void *__src, size_t __len)
{
  _QWORD *v6;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  size_t v12;
  size_t v13;
  _QWORD *v14;
  size_t v15;
  size_t v16;
  _QWORD *v17;
  _QWORD v18[33];

  v6 = __dst;
  v18[32] = *MEMORY[0x24BDAC8D0];
  if (a2[167])
  {
    if (__len >= 0x101)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      if (!__len)
      {
LABEL_5:
        v8 = (_QWORD *)a2[165];
        if (v8 != a2 + 166)
        {
          do
          {
            if ((llvm::sys::path::replace_path_prefix() & 1) != 0)
              break;
            v9 = (_QWORD *)v8[1];
            if (v9)
            {
              do
              {
                v10 = v9;
                v9 = (_QWORD *)*v9;
              }
              while (v9);
            }
            else
            {
              do
              {
                v10 = (_QWORD *)v8[2];
                v11 = *v10 == (_QWORD)v8;
                v8 = v10;
              }
              while (!v11);
            }
            v8 = v10;
          }
          while (v10 != a2 + 166);
        }
        if (!v18)
        {
          *v6 = 0;
          v6[1] = 0;
          v6[2] = 0;
          free(0);
          return;
        }
        if (__len <= 0x7FFFFFFFFFFFFFF7)
        {
          if (__len >= 0x17)
          {
            v12 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((__len | 7) != 0x17)
              v12 = __len | 7;
            v13 = v12 + 1;
            v14 = operator new(v12 + 1);
            v6[1] = __len;
            v6[2] = v13 | 0x8000000000000000;
            *v6 = v14;
            v6 = v14;
          }
          else
          {
            *((_BYTE *)v6 + 23) = __len;
            if (!__len)
              goto LABEL_28;
          }
          memmove(v6, v18, __len);
LABEL_28:
          *((_BYTE *)v6 + __len) = 0;
          return;
        }
LABEL_37:
        abort();
      }
    }
    else if (!__len)
    {
      goto LABEL_5;
    }
    memcpy(v18, __src, __len);
    goto LABEL_5;
  }
  if (!__src)
  {
    *__dst = 0;
    __dst[1] = 0;
    __dst[2] = 0;
    return;
  }
  if (__len > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_37;
  if (__len >= 0x17)
  {
    v15 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v15 = __len | 7;
    v16 = v15 + 1;
    v17 = operator new(v15 + 1);
    v6[1] = __len;
    v6[2] = v16 | 0x8000000000000000;
    *v6 = v17;
    v6 = v17;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    if (!__len)
      goto LABEL_34;
  }
  memmove(v6, __src, __len);
LABEL_34:
  *((_BYTE *)v6 + __len) = 0;
}

void *sub_22E491078(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  char v4;
  int v5;
  void **v6;
  size_t v7;
  void *v8;
  void **v9;
  void *__p[2];
  char v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(*a1 + 184);
  if (*(char *)(v2 + 335) < 0)
  {
    if (*(_QWORD *)(v2 + 320))
    {
LABEL_3:
      if (*(char *)(v2 + 335) >= 0)
        return (void *)(v2 + 312);
      else
        return *(void **)(v2 + 312);
    }
  }
  else if (*(_BYTE *)(v2 + 335))
  {
    goto LABEL_3;
  }
  if (a1[314])
    return (void *)a1[313];
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(*a1 + 160) + 48))(__p);
  v4 = v13;
  if ((v13 & 1) != 0)
  {
    v3 = 0;
  }
  else
  {
    v5 = v12;
    v6 = (void **)__p[0];
    if (v12 >= 0)
      v7 = v12 & 0x7F;
    else
      v7 = (size_t)__p[1];
    v8 = (void *)sub_22E3CD3D4((uint64_t)(a1 + 301), v7, 0);
    v3 = v8;
    if (v7)
    {
      if (v5 >= 0)
        v9 = __p;
      else
        v9 = v6;
      memcpy(v8, v9, v7);
    }
    a1[313] = v3;
    a1[314] = v7;
    v4 = v13;
  }
  if ((v4 & 1) == 0 && v12 < 0)
    operator delete(__p[0]);
  return v3;
}

_QWORD *sub_22E4911C0(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;

  v3 = result;
  if (*result)
    result = (_QWORD *)llvm::MetadataTracking::untrack();
  *v3 = a2;
  if (a2)
    return (_QWORD *)llvm::MetadataTracking::track();
  return result;
}

uint64_t sub_22E491214(unsigned __int8 *a1, int a2, char a3)
{
  uint64_t v4;
  unsigned int v5;

  if ((a3 & 1) == 0 && (*(_WORD *)(*(_QWORD *)(*(_QWORD *)a1 + 184) + 64) & 4) == 0)
    return 0;
  if (!a2)
  {
    a2 = *((_DWORD *)a1 + 140);
    if (!a2)
      return 0;
  }
  sub_22F1E2F68(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 1992), a2, a1[13], (uint64_t)&v4);
  if (v4)
    return v5;
  else
    return 0;
}

uint64_t sub_22E491284(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;

  result = *a4;
  if (!*a4)
  {
    *a4 = llvm::DIBuilder::createForwardDecl();
    sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)a1 + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 16816) & 0xFFFFFFFFFFFFFFF0));
    result = llvm::DIBuilder::createPointerType();
    *a4 = result;
  }
  return result;
}

unint64_t sub_22E491354(unsigned int *a1, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  unint64_t result;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = *a1;
  v4 = *a1 | a2 & 7;
  *a1 = v4;
  result = a2 & 0xFFFFFFFFFFFFFFF0;
  if ((a2 & 8) != 0)
  {
    v7 = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    v6 = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 0x1C);
    v8 = v7 & 0xFFFFF9FF | v4;
    v9 = (v3 >> 9) & 3;
    if (v9 <= (int)((v7 >> 9) & 3))
      LOBYTE(v9) = (v7 >> 9) & 3;
    if ((v7 & 0x600) != 0)
      v10 = v8 & 0xFFFFF9FF | ((v9 & 3) << 9);
    else
      v10 = v8;
    *a1 = v10;
    if ((v6 & 0xC) != 0)
      a1[1] = v6;
    return *(_QWORD *)result;
  }
  return result;
}

uint64_t sub_22E4913B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t result;

  v4 = *(_BYTE *)(a2 + 2) & 0xFC;
  v5 = a2 + 16;
  *(_QWORD *)(a2 + 12) = 0;
  *(_QWORD *)(a2 + 4) = 0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  v6 = *(_QWORD *)(a1 + 16);
  *(_WORD *)a2 = v6 >> 19;
  if ((v6 & 0x800000000000000) != 0)
    v7 = *(_DWORD *)(a1 + 8 * (unsigned __int16)(v6 >> 38) + 40);
  else
    v7 = 0;
  *(_DWORD *)(a2 + 72) = v7;
  *(_BYTE *)(a2 + 2) = (v6 >> 59) & 3 | v4;
  sub_22E49F4DC(a1, v5);
  *(_QWORD *)(a2 + 4) = sub_22E47E1B0(a1);
  v8 = *(_QWORD *)(a1 + 16);
  *(_DWORD *)(a2 + 12) = BYTE4(v8) & 3;
  if ((v8 & 0x400000000000000) != 0)
    result = sub_22E47E270(a1);
  else
    result = 0;
  *(_QWORD *)(a2 + 64) = result;
  return result;
}

BOOL sub_22E491464(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;
  uint64_t v3;
  BOOL v4;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFFFF0);
  if (v1)
    v2 = *(unsigned __int8 *)(v1 + 16) - 35 > 0xFFFFFFFD;
  else
    v2 = 0;
  if (!v2)
    v1 = sub_22F10CF48(v1);
  if ((*(_BYTE *)(v1 + 19) & 0xFC) != 0
    && ((v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)) != 0
      ? (v4 = *(_DWORD *)(v3 + 16) == 11)
      : (v4 = 0),
        v4))
  {
    return (*(_DWORD *)(v3 + 16) & 0xFF80000) == 114819072;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_22E4914E8(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  void *v15;
  uint64_t ReferenceType;
  uint64_t v17;
  uint64_t v19;
  uint64_t Impl;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[5];

  v25[4] = *MEMORY[0x24BDAC8D0];
  v10 = *a1;
  v11 = *(_QWORD *)(*a1 + 144);
  v12 = sub_22EF5CF80(v11, a4);
  if ((_DWORD)v12)
  {
    (*(void (**)(void))(**(_QWORD **)(v10 + 216) + 864))();
    v11 = *(_QWORD *)(*a1 + 144);
  }
  sub_22EF5CDF0(v11, a3);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*a1 + 216) + 824))(*(_QWORD *)(*a1 + 216), v12);
  v23 = v25;
  v24 = 0x400000000;
  v13 = *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0);
  if (v13 && *(_BYTE *)(v13 + 16) == 8)
  {
    v19 = a5;
    do
    {
      if (*(_DWORD *)(*(_QWORD *)(v13 + 40) + 36))
      {
        v21 = 0;
        v22 = 0;
        v21 = llvm::MDString::get();
        v22 = llvm::MDString::get();
        v15 = v23;
        Impl = llvm::MDTuple::getImpl();
        sub_22F258578((uint64_t)&v23, (uint64_t)v15, &Impl);
      }
      v13 = *(_QWORD *)(*(_QWORD *)(v13 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (v13)
        v14 = *(_BYTE *)(v13 + 16) == 8;
      else
        v14 = 0;
    }
    while (v14);
    if ((_DWORD)v24)
      llvm::DIBuilder::getOrCreateArray();
    a5 = v19;
  }
  if (a2 == 66 || a2 == 16)
  {
    sub_22F254858(a1, a4, a5);
    ReferenceType = llvm::DIBuilder::createReferenceType();
  }
  else
  {
    sub_22F254858(a1, a4, a5);
    ReferenceType = llvm::DIBuilder::createPointerType();
  }
  v17 = ReferenceType;
  if (v23 != v25)
    free(v23);
  return v17;
}

uint64_t sub_22E49177C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t ReplaceableCompositeType;
  uint64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19[3];
  char v20;
  void *v21;
  __int128 v22;
  _QWORD v23[34];

  v23[32] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22F114198(*(_QWORD *)(a2 + 24));
  v5 = sub_22EF6477C(*(_QWORD *)(*(_QWORD *)a1 + 144), v4);
  v6 = sub_22E491A8C(a1, v5);
  if (!v6)
  {
    v8 = sub_22E48F44C((uint64_t *)a1, *(_DWORD *)(v4 + 24));
    v9 = *(_DWORD *)(v4 + 24);
    if (v9 || (v9 = *(_DWORD *)(a1 + 560)) != 0)
      sub_22F1E2F68(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 1992), v9, *(unsigned __int8 *)(a1 + 13), (uint64_t)&v21);
    sub_22E490A2C(a1, v4);
    v10 = sub_22EFC3500(v4);
    if (v10 && (*(_BYTE *)(v10 + 74) & 1) != 0)
      sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)a1 + 144), a2);
    if ((*(_DWORD *)(v4 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD)
    {
      if (*(_QWORD *)(v4 + 128)
        || (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v4 + 104) + 96), *(_QWORD *)(v4 + 104)), *(_QWORD *)(v4 + 128)))
      {
        if (sub_22EFD12A8(v4))
          sub_22E49F698(v4);
      }
    }
    v21 = v23;
    v22 = xmmword_22F44E320;
    if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 184) + 96) & 0x1800000000000000) != 0)
    {
      sub_22E491AEC((uint64_t)v19, a2, *(_QWORD *)a1, *(_QWORD *)(a1 + 464));
      sub_22E3B2DB8((uint64_t)&v21, (uint64_t)v19);
      if (v19[0] != &v20)
        free(v19[0]);
    }
    ReplaceableCompositeType = llvm::DIBuilder::createReplaceableCompositeType();
    v18 = ReplaceableCompositeType;
    if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)a1 + 184) + 64) & 0x40) != 0 && (*(_DWORD *)(v4 + 28) & 0x7E) == 0x24)
    {
      v12 = *(_QWORD *)(v4 + 152);
      v13 = (void **)(v12 & 0xFFFFFFFFFFFFFFF8);
      if ((v12 & 4) != 0 && v13)
      {
        do
        {
          v14 = *((_QWORD *)*v13 + 19);
          v13 = (void **)(v14 & 0xFFFFFFFFFFFFFFF8);
        }
        while ((v14 & 4) != 0 && v13);
      }
      v15 = *(_QWORD *)(v4 + 168);
      v16 = *(void **)v15;
      v17 = (void *)*(unsigned int *)(v15 + 8);
      v19[0] = v13[7];
      v19[1] = v16;
      v19[2] = v17;
      v20 = 1;
      sub_22E493850((uint64_t *)a1, (uint64_t)v19, v8);
      llvm::DIBuilder::replaceArrays();
      ReplaceableCompositeType = v18;
    }
    sub_22F254E40((uint64_t *)(a1 + 2288), a2, ReplaceableCompositeType);
    v6 = v18;
    if (v21 != v23)
      free(v21);
  }
  return v6;
}

uint64_t sub_22E491A8C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = a2;
  v5 = 0;
  if (!sub_22F246C54((uint64_t *)(a1 + 1296), &v4, &v5))
    return 0;
  if (v5 == *(_QWORD *)(a1 + 1296) + 16 * *(unsigned int *)(a1 + 1312))
    return 0;
  result = *(_QWORD *)(v5 + 8);
  if (!result)
    return 0;
  return result;
}

void sub_22E491AEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  BOOL v15;
  uint64_t v16;
  _BYTE v17[72];

  *(_QWORD *)a1 = a1 + 24;
  *(_OWORD *)(a1 + 8) = xmmword_22F44E320;
  v8 = sub_22F114198(*(_QWORD *)(a2 + 24));
  v9 = v8;
  v10 = *(_DWORD *)(a4 + 24);
  if (v10 > 25)
  {
    if (v10 != 26 && v10 != 33)
      return;
  }
  else if (v10 != 4)
  {
    if (v10 != 17)
      return;
    v11 = *(_DWORD *)(v8 + 28) & 0x7F;
    v12 = v11 > 0x25;
    v13 = (1 << v11) & 0x3A00000000;
    if (v12 || v13 == 0)
      return;
  }
  if (sub_22EFB948C(v8) > 2 || (*(_BYTE *)(*(_QWORD *)(a3 + 184) + 80) & 0x20) != 0)
  {
    v15 = (*(_DWORD *)(v9 + 28) & 0x7Fu) - 38 < 0xFFFFFFFD || v9 == 0;
    if (v15
      || (v16 = *(_QWORD *)(v9 + 128)) == 0
      && (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v9 + 104) + 96), *(_QWORD *)(v9 + 104)),
          (v16 = *(_QWORD *)(v9 + 128)) == 0)
      || !*(_QWORD *)(v16 + 88)
      || !sub_22E463414(v9)
      || sub_22F296010(a3, v9))
    {
      sub_22F242C48((uint64_t)v17, a1);
      (*(void (**)(_QWORD, unint64_t, _BYTE *))(**(_QWORD **)(*(_QWORD *)(a3 + 224) + 16) + 120))(*(_QWORD *)(*(_QWORD *)(a3 + 224) + 16), a2 & 0xFFFFFFFFFFFFFFF0, v17);
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v17);
    }
  }
}

uint64_t sub_22E491C48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t result;

  sub_22F254858(a1, a3, a2);
  v9 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)a1 + 144), *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0));
  sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)a1 + 144), *v9);
  result = llvm::DIBuilder::createMemberType();
  *a6 += v10;
  return result;
}

uint64_t sub_22E491D18(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t Impl;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  _QWORD v19[5];

  v19[4] = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a2);
  v4 = *((unsigned int *)v3 + 2);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    for (i = *v3; *(_WORD *)(*(_QWORD *)i + 32) != 117; i += 8)
    {
      v5 -= 8;
      if (!v5)
        return 0;
    }
  }
  else
  {
    i = *v3;
  }
  if (i == *v3 + 8 * v4)
    return 0;
  v18 = 0;
  v9 = (uint64_t *)sub_22F255ABC(a2);
  v11 = v10;
  while (1)
  {
    v12 = v9;
    if (v9 >= v11)
    {
      if (v9 == v11)
        return llvm::DIBuilder::getOrCreateArray();
      v13 = v11;
      while (*(_WORD *)(*v13 + 32) != 117)
      {
        if (++v13 == v9)
          return llvm::DIBuilder::getOrCreateArray();
      }
      v12 = v9;
    }
    else
    {
      while (*(_WORD *)(*v12 + 32) != 117)
      {
        if (++v12 == v11)
          return llvm::DIBuilder::getOrCreateArray();
      }
      v13 = v11;
    }
    if (v12 == v13)
      break;
    do
      v14 = *v9++;
    while (*(_WORD *)(v14 + 32) != 117);
    llvm::MDString::get();
    llvm::MDString::get();
    Impl = llvm::MDTuple::getImpl();
    v16 = v18;
    if (v18 >= 4uLL)
    {
      v17 = Impl;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      Impl = v17;
      v16 = v18;
    }
    v19[v16] = Impl;
    ++v18;
  }
  return llvm::DIBuilder::getOrCreateArray();
}

uint64_t sub_22E491F40(int a1)
{
  if ((a1 - 1) > 0x12)
    return 0;
  else
    return dword_22F45705C[a1 - 1];
}

uint64_t sub_22E491F64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9)
{
  uint64_t v13;
  _BYTE v15[12];

  sub_22F254858(a1, a4, a9);
  sub_22E48F44C((uint64_t *)a1, a5);
  if (a5 || (a5 = *(_DWORD *)(a1 + 560)) != 0)
    sub_22F1E2F68(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 1992), a5, *(unsigned __int8 *)(a1 + 13), (uint64_t)v15);
  v13 = *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 4)
  {
    sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)a1 + 144), v13);
    if (!a8)
      sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)a1 + 144), *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0));
  }
  return llvm::DIBuilder::createMemberType();
}

uint64_t sub_22E4920F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int *v6;
  uint64_t StaticMemberType;
  _QWORD *v8;
  int *v10;
  int v11;
  uint64_t v12;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v4 = sub_22E48F44C((uint64_t *)a1, *(_DWORD *)(v3 + 24));
  sub_22F254858(a1, *(_QWORD *)(v3 + 48), v4);
  v5 = *(_DWORD *)(v3 + 24);
  if (v5)
    sub_22F1E2F68(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 1992), v5, *(unsigned __int8 *)(a1 + 13), (uint64_t)&v12);
  if (sub_22EFBC5B4(v3))
  {
    v6 = sub_22EFBCF80(v3);
    if (v6)
    {
      v10 = v6;
      v11 = *v6;
      if (*v6 == 2)
      {
        llvm::ConstantInt::get();
        v11 = *v10;
      }
      if (v11 == 3)
        llvm::ConstantFP::get();
    }
  }
  if (sub_22E49F7A8(v3))
    sub_22EFC8A80(v3);
  StaticMemberType = llvm::DIBuilder::createStaticMemberType();
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  v8 = sub_22F25827C(a1 + 2664, &v12);
  sub_22E4911C0(v8 + 1, StaticMemberType);
  return StaticMemberType;
}

unint64_t sub_22E4922F4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t result;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _BOOL4 v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  unsigned int *v24;
  unsigned int v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  BOOL v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int *v49;
  void *v50;
  unsigned int v51;
  int v52;
  uint64_t v53;
  int v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;

  if (a2)
  {
    if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD)
    {
      v7 = *(_QWORD *)(a2 + 128);
      if (v7)
      {
        if (((*(unsigned __int16 *)(v7 + 8) | (*(unsigned __int8 *)(v7 + 10) << 16)) & 0x100000) != 0)
        {
          v60 = sub_22F0C975C(*(_QWORD *)(*(_QWORD *)a1 + 144), a2);
          result = sub_22EFC3B90(a2);
          v37 = *(_QWORD *)(a2 + 128);
          if (!v37)
            return result;
          if (((*(unsigned __int16 *)(v37 + 8) | (*(unsigned __int8 *)(v37 + 10) << 16)) & 0x100000) == 0)
            return result;
          v38 = ((unint64_t)*(unsigned int *)(v37 + 104) >> 5) & 0x7FFF;
          if (!(_DWORD)v38)
            return result;
          v39 = result;
          v40 = 0;
          v41 = *(_QWORD *)(v37 + 128);
          v42 = v41 + 16 * v38;
          v56 = v42;
          while (1)
          {
            v43 = *(_QWORD *)v41 & 0xFFFFFFFFFFFFFFF8;
            if (v43)
            {
              if ((*(_DWORD *)(v43 + 28) & 0x7Fu) - 60 <= 6)
                break;
            }
            if ((*(_QWORD *)v41 & 0xFFFFFFFFFFFFFFFCLL) != 4)
              goto LABEL_74;
            v46 = sub_22E48F44C((uint64_t *)a1, *(_DWORD *)(v39 + 24));
            result = sub_22E491F64(a1, (uint64_t)"this", 4, *(_QWORD *)(v39 + 48), *(_DWORD *)(v39 + 24), (*(_DWORD *)(v39 + 28) >> 13) & 3, *(_QWORD *)(*(_QWORD *)(v60 + 48) + 8 * v40), 0, v46);
            v47 = result;
            v48 = *(unsigned int *)(a4 + 8);
            if (v48 >= *(unsigned int *)(a4 + 12))
              goto LABEL_83;
LABEL_73:
            *(_QWORD *)(*(_QWORD *)a4 + 8 * v48) = v47;
            ++*(_DWORD *)(a4 + 8);
LABEL_74:
            v41 += 16;
            do
              v39 = *(_QWORD *)(v39 + 8) & 0xFFFFFFFFFFFFFFF8;
            while (v39 && (*(_DWORD *)(v39 + 28) & 0x7Fu) - 49 > 2);
            ++v40;
            if (v41 == v42)
              return result;
          }
          v44 = *(_QWORD *)(v43 + 40) & 0xFFFFFFFFFFFFFFF8;
          if ((*(_QWORD *)(v43 + 40) & 7) != 0 || v44 == 0)
          {
            v58 = 0;
            v50 = &unk_22F566939;
          }
          else
          {
            v49 = *(unsigned int **)(v44 + 16);
            v51 = *v49;
            v50 = v49 + 4;
            v58 = v51;
          }
          v52 = *(_DWORD *)(v41 + 8);
          v53 = sub_22E48F44C((uint64_t *)a1, v52);
          if (sub_22E49F7A8(v43))
            v54 = sub_22EFC8A80(v43);
          else
            v54 = 0;
          result = sub_22E491F64(a1, (uint64_t)v50, v58, *(_QWORD *)(v39 + 48), v52, (*(_DWORD *)(v39 + 28) >> 13) & 3, *(_QWORD *)(*(_QWORD *)(v60 + 48) + 8 * v40), v54, v53);
          v47 = result;
          v48 = *(unsigned int *)(a4 + 8);
          v42 = v56;
          if (v48 < *(unsigned int *)(a4 + 12))
            goto LABEL_73;
LABEL_83:
          result = llvm::SmallVectorBase<unsigned int>::grow_pod();
          v48 = *(unsigned int *)(a4 + 8);
          goto LABEL_73;
        }
      }
    }
  }
  result = sub_22F0C975C(*(_QWORD *)(*(_QWORD *)a1 + 144), a2);
  v59 = result;
  if ((*(_WORD *)(a2 + 72) & 0x80) != 0)
    result = sub_22EFCC320(a2 + 64);
  v9 = *(_QWORD *)(a2 + 80);
  if (v9)
  {
    v10 = 0;
    if (a2)
      v11 = a2 + 64;
    else
      v11 = 0;
    v55 = (_QWORD *)v11;
    do
    {
      v12 = *(_DWORD *)(v9 + 28);
      v13 = v12 & 0x7F;
      if ((v13 - 67) >= 0xFFFFFFF9)
      {
        result = sub_22F2556D0(v9);
        if ((result & 1) == 0
          && (((*(_DWORD *)(v9 + 28) & 0x7Fu) - 65 < 2) & (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)a1 + 184) + 80) >> 5)) == 0
          && (*(_DWORD *)(v9 + 28) & 0x7F) != 0x42)
        {
          v29 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v9 + 32))(v9);
          v61 = 0;
          result = sub_22F24C318(*(_QWORD *)(a1 + 2664), *(_DWORD *)(a1 + 2680), v29, &v61);
          if ((_DWORD)result)
            v30 = v61 == *(_QWORD *)(a1 + 2664) + 16 * *(unsigned int *)(a1 + 2680);
          else
            v30 = 1;
          if (v30)
          {
            result = sub_22E4920F4(a1, v9);
            v35 = result;
          }
          else
          {
            v35 = *(_QWORD *)(v61 + 8);
          }
          v36 = *(unsigned int *)(a4 + 8);
          if (v36 >= *(unsigned int *)(a4 + 12))
          {
            result = llvm::SmallVectorBase<unsigned int>::grow_pod();
            v36 = *(unsigned int *)(a4 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a4 + 8 * v36) = v35;
          ++*(_DWORD *)(a4 + 8);
        }
        goto LABEL_40;
      }
      if ((v13 - 52) < 0xFFFFFFFD)
      {
        if ((v12 & 0x200) == 0)
        {
          v14 = v13 - 33;
          if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 184) + 76) & 0x2000000000) != 0 && v14 <= 9)
          {
            v16 = *(_QWORD *)(v9 + 16);
            v17 = (_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF8);
            if ((v16 & 4) != 0)
              v17 = (_QWORD *)*v17;
            if (v17 == v55)
              result = sub_22F255730(a1, v9, a4);
          }
        }
        goto LABEL_40;
      }
      v18 = *(_QWORD *)(*(_QWORD *)(v59 + 48) + 8 * v10);
      v19 = (*(_QWORD *)(v9 + 40) & 7) != 0;
      v20 = *(_QWORD *)(v9 + 40) & 0xFFFFFFFFFFFFFFF8;
      if (!v20)
        v19 = 1;
      if (v19)
      {
        v21 = 0;
        v22 = *(_QWORD *)(v9 + 48);
        v23 = &unk_22F566939;
      }
      else
      {
        v24 = *(unsigned int **)(v20 + 16);
        v25 = *v24;
        v23 = v24 + 4;
        v21 = v25;
        v22 = *(_QWORD *)(v9 + 48);
        if (v25)
        {
          if ((*(_BYTE *)(v9 + 68) & 1) == 0)
            goto LABEL_32;
          goto LABEL_51;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) == 45)
      {
        if ((*(_BYTE *)(v9 + 68) & 1) == 0)
        {
LABEL_32:
          if (sub_22E49F7A8(v9))
            v26 = sub_22EFC8A80(v9);
          else
            v26 = 0;
          sub_22E491D18(a1, v9);
          result = sub_22E491F64(a1, (uint64_t)v23, v21, v22, *(_DWORD *)(v9 + 24), (*(_DWORD *)(v9 + 28) >> 13) & 3, v18, v26, a3);
LABEL_36:
          v27 = result;
          v28 = *(unsigned int *)(a4 + 8);
          if (v28 >= *(unsigned int *)(a4 + 12))
          {
            result = llvm::SmallVectorBase<unsigned int>::grow_pod();
            v28 = *(unsigned int *)(a4 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a4 + 8 * v28) = v27;
          ++*(_DWORD *)(a4 + 8);
          goto LABEL_39;
        }
LABEL_51:
        v31 = *(_DWORD *)(v9 + 24);
        v32 = sub_22E48F44C((uint64_t *)a1, v31);
        sub_22F254858(a1, v22, v32);
        sub_22E48F44C((uint64_t *)a1, v31);
        if (v31)
          sub_22F1E2F68(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 1992), v31, *(unsigned __int8 *)(a1 + 13), (uint64_t)&v61);
        v33 = sub_22E66DD94(*(_QWORD *)a1 + 280, a2);
        v34 = v9;
        if ((*(_BYTE *)(v9 + 29) & 0x80) != 0)
          v34 = sub_22EFB5D7C(v9);
        sub_22E47ED6C(v33 + 40, v34);
        sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)a1 + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 16408) & 0xFFFFFFFFFFFFFFF0));
        llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)a1 + 200));
        sub_22E491D18(a1, v9);
        result = llvm::DIBuilder::createBitFieldMemberType();
        goto LABEL_36;
      }
LABEL_39:
      ++v10;
LABEL_40:
      v9 = *(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF8;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_22E4929D8(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t a4, int a5)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  uint64_t UnspecifiedType;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t ObjectPointerType;
  unsigned int v26;
  unsigned int v27;
  int v28;
  uint64_t SubroutineType;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t PointerType;
  _QWORD *v35;
  uint64_t v36;
  __int128 v37[5];
  void *v38;
  uint64_t v39;
  _QWORD v40[18];

  v40[16] = *MEMORY[0x24BDAC8D0];
  sub_22E4913B4((uint64_t)a3, (uint64_t)v37);
  DWORD1(v37[0]) &= 0xFFFFFFF0;
  v10 = sub_22EF63D8C(*(_QWORD *)(*a1 + 144), a3[3], a3 + 5, (unsigned __int16)(a3[2] >> 38), v37, 0);
  v11 = sub_22F254858(a1, v10, a4);
  v12 = *(_QWORD *)(v11 - 8 * *(unsigned int *)(v11 + 8) + 24);
  v38 = v40;
  v39 = 0x1000000000;
  if (*(_BYTE *)(*(_QWORD *)(a3[3] & 0xFFFFFFFFFFFFFFF0) + 16) != 14 || a5 == 0)
  {
    v40[0] = *(_QWORD *)(v12 - 8 * *(unsigned int *)(v12 + 8));
    v14 = 1;
  }
  else
  {
    UnspecifiedType = llvm::DIBuilder::createUnspecifiedType();
    v16 = v39;
    if (v39 >= HIDWORD(v39))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v16 = v39;
    }
    *((_QWORD *)v38 + v16) = UnspecifiedType;
    v14 = v39 + 1;
  }
  LODWORD(v39) = v14;
  v17 = a2 & 0xFFFFFFFFFFFFFFF0;
  if ((*(_DWORD *)(sub_22F10AEAC(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0)) + 28) & 0x7E) != 0x24)
  {
    v23 = sub_22F254858(a1, a2, a4);
    v36 = a2;
    v24 = sub_22F258670(a1 + 162, &v36);
    sub_22E4911C0(v24 + 1, v23);
    ObjectPointerType = llvm::DIBuilder::createObjectPointerType();
    v26 = v39;
    if (v39 < HIDWORD(v39))
      goto LABEL_14;
    goto LABEL_27;
  }
  v18 = *(_QWORD *)v17;
  v19 = *(_QWORD *)(*(_QWORD *)v17 + 32);
  v20 = *a1;
  v21 = *(_QWORD *)(*a1 + 144);
  v22 = sub_22EF5CF80(v21, v19);
  if ((_DWORD)v22)
  {
    (*(void (**)(void))(**(_QWORD **)(v20 + 216) + 864))();
    v21 = *(_QWORD *)(*a1 + 144);
  }
  sub_22EF5CDF0(v21, v18);
  sub_22F254858(a1, v19, a4);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*a1 + 216) + 824))(*(_QWORD *)(*a1 + 216), v22);
  PointerType = llvm::DIBuilder::createPointerType();
  v36 = a2;
  v35 = sub_22F258670(a1 + 162, &v36);
  sub_22E4911C0(v35 + 1, PointerType);
  ObjectPointerType = llvm::DIBuilder::createObjectPointerType();
  v26 = v39;
  if (v39 >= HIDWORD(v39))
  {
LABEL_27:
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v26 = v39;
  }
LABEL_14:
  *((_QWORD *)v38 + v26) = ObjectPointerType;
  v27 = v39 + 1;
  LODWORD(v39) = v39 + 1;
  if (v12)
  {
    v28 = *(_DWORD *)(v12 + 8);
    if (v28 == 1)
      goto LABEL_16;
  }
  else
  {
    v28 = 0;
  }
  v31 = v28 - 1;
  v32 = v12 + 8;
  do
  {
    v33 = *(_QWORD *)(v32 - 8 * *(unsigned int *)(v12 + 8));
    if (v27 >= HIDWORD(v39))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v27 = v39;
    }
    *((_QWORD *)v38 + v27) = v33;
    v27 = v39 + 1;
    LODWORD(v39) = v39 + 1;
    v32 += 8;
    --v31;
  }
  while (v31);
LABEL_16:
  llvm::DIBuilder::getOrCreateTypeArray();
  sub_22E491F40((*((_DWORD *)a3 + 4) >> 19) & 0x1F);
  SubroutineType = llvm::DIBuilder::createSubroutineType();
  if (v38 != v40)
    free(v38);
  return SubroutineType;
}

uint64_t sub_22E492DB4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL4 v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t Method;
  _QWORD *v37;
  uint64_t v39;
  uint64_t v40;

  v6 = *(_DWORD *)(a2 + 28) & 0x7F;
  sub_22E48FF64(a1, a2);
  v39 = a3;
  sub_22F2557F4((uint64_t *)a1, (_QWORD *)a2, a3, 1);
  if (v6 == 55 || v6 == 57)
    goto LABEL_37;
  v7 = *(_WORD *)(a2 + 80) & 0x7F;
  v8 = -40;
  if (v7 > 0x46)
  {
    if (v7 != 83)
    {
      if (v7 == 71)
      {
        v8 = -56;
        goto LABEL_19;
      }
      if (v7 == 81)
        goto LABEL_19;
LABEL_14:
      v9 = v7 - 52;
      v10 = v7 - 33 >= 5;
      v11 = -48;
      if (!v10)
        v11 = -64;
      if (v9 >= 6)
        v8 = v11;
      else
        v8 = -72;
    }
  }
  else
  {
    if (v7 > 0x18)
      goto LABEL_13;
    if (v7 != 16)
    {
      if (((1 << v7) & 0x1066) != 0)
        goto LABEL_19;
      if (v7 != 24)
      {
LABEL_13:
        if (v7 == 70)
        {
          v8 = -64;
          goto LABEL_19;
        }
        goto LABEL_14;
      }
    }
    v8 = -48;
  }
LABEL_19:
  v12 = *(_QWORD *)(a2 + 72 + v8 + 16);
  v13 = (_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF8);
  if ((v12 & 4) != 0)
    v13 = (_QWORD *)*v13;
  if (v13)
    v14 = v13 - 8;
  else
    v14 = 0;
  do
  {
    v15 = v14[2];
    v16 = v15 & 0xFFFFFFFFFFFFFFF8;
    v17 = v15 & 0xFFFFFFFFFFFFFFF8;
    if ((v15 & 4) != 0)
      v17 = *(_QWORD *)v16;
    v14 = (_QWORD *)(v17 - 64);
    if (v17)
      v18 = (*(_WORD *)(v17 + 8) & 0x7Fu) - 38 > 0xFFFFFFFC;
    else
      v18 = 0;
  }
  while (v18);
  if ((v15 & 4) != 0)
    v16 = *(_QWORD *)v16;
  if ((*(_WORD *)(v16 + 8) & 0x7Eu) - 52 >= 6)
  {
    v19 = *(_QWORD *)a1;
    if (sub_22E462B18(a2))
      v20 = a2 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(a2) + 96) & 0x80) == 0);
    else
      v20 = a2;
    sub_22E624994(v19, v20, 0);
  }
LABEL_37:
  if ((*(_BYTE *)(a2 + 29) & 2) == 0)
  {
    sub_22E48F44C((uint64_t *)a1, *(_DWORD *)(a2 + 24));
    v21 = *(_DWORD *)(a2 + 24);
    if (v21)
      sub_22F1E2F68(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 1992), v21, *(unsigned __int8 *)(a1 + 13), (uint64_t)&v40);
  }
  v22 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2);
  if ((*(_BYTE *)(v22 + 82) & 0xC) != 0 || sub_22EFD7260(v22))
  {
    v23 = *(_DWORD *)(a2 + 28) & 0x7F;
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 216) + 148) > 0xAu)
    {
      if (v23 == 57)
      {
        v24 = a2 & 0xFFFFFFFFFFFFFFF8;
      }
      else if (sub_22E462B18(a2))
      {
        v24 = a2 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(a2) + 96) & 0x80) == 0);
      }
      else
      {
        v24 = a2;
      }
      sub_22F40C3DC(*(_QWORD *)(*(_QWORD *)a1 + 712), v24, 0, (uint64_t)&v40);
      sub_22EFD7260(a2);
      (*(void (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 440))(*(_QWORD *)(*(_QWORD *)a1 + 224), v24, 0);
    }
    else if (v23 != 57)
    {
      v25 = *(_QWORD *)(*(_QWORD *)a1 + 712);
      if (sub_22E462B18(a2))
        v26 = a2 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(a2) + 96) & 0x80) == 0);
      else
        v26 = a2;
      sub_22F40C040(v25, v26, 0);
    }
  }
  v27 = *(_DWORD *)(a2 + 28) & 0x7F;
  if (v27 == 57 || v27 == 55 || v27 == 54 && ((sub_22EFD3B9C(a2) & 1) != 0 || sub_22EFD3F30(a2)))
  {
    v28 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2);
    (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 32))(v28);
  }
  sub_22EFC0BA0(a2);
  (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2);
  if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x38)
    (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2);
  v29 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v29 && *(_BYTE *)(v29 + 16) == 26)
  {
    v30 = 0;
  }
  else
  {
    sub_22F10CF48(v29);
    v29 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
    v30 = *(unsigned __int8 *)(v29 + 16) != 26;
  }
  if (v30)
    sub_22F10CF48(v29);
  sub_22EFB948C(a2);
  if (*(_DWORD *)(a1 + 8) == 4 && (*(_DWORD *)(a2 + 28) & 0x7F) == 0x37)
  {
    v31 = *(_WORD *)(a2 + 80) & 0x7F;
    v32 = -40;
    if (v31 > 0x46)
    {
      switch(v31)
      {
        case 'S':
          goto LABEL_88;
        case 'G':
          v32 = -56;
          goto LABEL_88;
        case 'Q':
          goto LABEL_88;
      }
    }
    else
    {
      if (v31 <= 0x18)
      {
        if (v31 == 16)
          goto LABEL_76;
        if (((1 << v31) & 0x1066) != 0)
          goto LABEL_88;
        if (v31 == 24)
        {
LABEL_76:
          v32 = -48;
LABEL_88:
          v33 = *(_QWORD *)(a2 + 72 + v32 + 16);
          v34 = (_QWORD *)(v33 & 0xFFFFFFFFFFFFFFF8);
          if ((v33 & 4) != 0)
            v34 = (_QWORD *)*v34;
          if (v34)
            v35 = (unint64_t)(v34 - 8);
          else
            v35 = 0;
          sub_22F25589C((int *)a1, v35);
          goto LABEL_94;
        }
      }
      if (v31 == 70)
      {
LABEL_86:
        v32 = -64;
        goto LABEL_88;
      }
    }
    if (v31 - 52 < 6)
    {
      v32 = -72;
      goto LABEL_88;
    }
    if (v31 - 33 < 5)
      goto LABEL_86;
    goto LABEL_76;
  }
LABEL_94:
  sub_22F255A38((uint64_t)&v40, a2);
  sub_22E493850((uint64_t *)a1, (uint64_t)&v40, v39);
  Method = llvm::DIBuilder::createMethod();
  v40 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2);
  v37 = sub_22F25827C(a1 + 2544, &v40);
  sub_22E4911C0(v37 + 1, Method);
  return Method;
}

uint64_t sub_22E4935C4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, int a8)
{
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[24];

  result = sub_22F0C975C(*(_QWORD *)(*(_QWORD *)a1 + 144), a2);
  v31 = result;
  v17 = *a6;
  v16 = a6[1];
  if (*a6 != v16)
  {
    v18 = a8 | 0x20;
    do
    {
      v19 = *(_QWORD *)(**(_QWORD **)(v17 + 16) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v19 + 8) & 0xF) != 0)
        v19 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v17 + 16));
      v20 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                    + 24));
      v21 = v20;
      if (v20)
        v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 32))(v20);
      v32 = v20;
      result = sub_22F25884C((uint64_t)v33, a7, &v32);
      if (v33[16])
      {
        v22 = *(_QWORD *)(**(_QWORD **)(v17 + 16) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v22 + 8) & 0xF) != 0)
          v22 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v17 + 16));
        sub_22F254858(a1, v22 & 0xFFFFFFFFFFFFFFF0, a3);
        v23 = *(_QWORD **)a1;
        if ((*(_BYTE *)(v17 + 12) & 1) != 0)
        {
          v27 = (uint64_t *)v23[89];
          if (*(_DWORD *)(v23[27] + 148) > 0xAu)
          {
            sub_22F40C330(v27, a2, v21);
            sub_22F0C975C(*(_QWORD *)(*(_QWORD *)a1 + 144), a2);
          }
          else
          {
            sub_22F122BCC((uint64_t)v27, a2, v21);
          }
        }
        else
        {
          v30 = v18;
          v24 = v23[18];
          sub_22E46A3EC(v31, v21);
          v25 = *(_QWORD *)(*(_QWORD *)(v24 + 16408) & 0xFFFFFFFFFFFFFFF0);
          v26 = v24;
          v18 = v30;
          sub_22EF5CDF0(v26, v25);
        }
        result = llvm::DIBuilder::createInheritance();
        v28 = result;
        v29 = *(unsigned int *)(a4 + 8);
        if (v29 >= *(unsigned int *)(a4 + 12))
        {
          result = llvm::SmallVectorBase<unsigned int>::grow_pod();
          v29 = *(unsigned int *)(a4 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a4 + 8 * v29) = v28;
        ++*(_DWORD *)(a4 + 8);
      }
      v17 += 24;
    }
    while (v17 != v16);
  }
  return result;
}

uint64_t sub_22E493850(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t TemplateTemplateParameter;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t TemplateParameterPack;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  llvm::Value *v36;
  uint64_t TemplateTypeParameter;
  uint64_t v38;
  uint64_t TemplateValueParameter;
  uint64_t v40;
  int v41;
  unsigned int v43;
  uint64_t v46;
  BOOL v47;
  int v48;
  llvm::Value *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t Array;
  _QWORD *v60;
  uint64_t *v61;
  _QWORD v63[3];
  char v64;
  _QWORD v65[2];
  uint64_t v66;
  void *__p;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  __int128 v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  void **p_p;
  _QWORD *v78;
  uint64_t v79;
  _QWORD v80[18];

  v80[16] = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a2 + 24))
    return 0;
  v78 = v80;
  v79 = 0x1000000000;
  if (*(_DWORD *)(a2 + 16))
  {
    v5 = 0;
    v61 = a1 + 177;
    v6 = 24 * *(unsigned int *)(a2 + 16);
    v7 = 16;
    v60 = (_QWORD *)(MEMORY[0x24BED83D8] + 16);
    while (1)
    {
      v8 = *(_QWORD *)(a2 + 8);
      switch(*(_DWORD *)(v8 + v5))
      {
        case 1:
          sub_22F254858(a1, *(_QWORD *)(v8 + v5 + 8), a3);
          TemplateTypeParameter = llvm::DIBuilder::createTemplateTypeParameter();
          v38 = v79;
          if (v79 >= (unint64_t)HIDWORD(v79))
            goto LABEL_104;
          goto LABEL_62;
        case 2:
          v29 = *(_QWORD *)(v8 + v5 + 8);
          v30 = *(_QWORD *)(v8 + v5 + 16);
          v31 = sub_22F40989C(v29, *(_QWORD *)(*a1 + 144));
          sub_22F254858(a1, v31, a3);
          v32 = *(_QWORD *)(*a1 + 152);
          if ((*(_BYTE *)(v32 + 68) & 0x20) != 0 && (*(_WORD *)(v32 + 96) & 0x80) == 0 && sub_22E466E5C(v30))
            goto LABEL_103;
          v41 = *(_DWORD *)(v30 + 28);
          if ((v41 & 0x7Fu) - 67 >= 0xFFFFFFF9 && v30 != 0)
          {
            v52 = sub_22E6315B8(*a1, v30, 0, 0);
LABEL_101:
            v51 = (llvm::Value *)v52;
            goto LABEL_102;
          }
          v43 = (v41 & 0x7E) - 58;
          if (v43 >= 0xFFFFFFFC && v30 != 0)
          {
            if ((*(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v30 + 32))(v30) + 80) & 0xE000) != 0x4000
              && ((*(_QWORD *)(v30 + 40) & 7) != 6
               || (*(_DWORD *)(*(_QWORD *)(v30 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) > 3))
            {
              v52 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(*a1 + 224) + 168))(*(_QWORD *)(*a1 + 224), v30);
              goto LABEL_101;
            }
            v41 = *(_DWORD *)(v30 + 28);
            v43 = (v41 & 0x7E) - 58;
          }
          if (v43 >= 0xFFFFFFFA && v30 != 0)
          {
            v53 = *a1;
            if (sub_22E462B18(v30))
              v30 = v30 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(v30) + 96) & 0x80) == 0);
            v52 = sub_22E6336F0(v53, v30, 0, 0, 0, 0, 0);
            goto LABEL_101;
          }
          v46 = *(_QWORD *)(v31 & 0xFFFFFFFFFFFFFFF0);
          if (v46)
            v47 = *(_BYTE *)(v46 + 16) == 31;
          else
            v47 = 0;
          if (v47)
          {
            v54 = sub_22F0CBBE4(*(_QWORD *)(*a1 + 144), v30);
            v55 = sub_22EF5CDF0(*(_QWORD *)(*a1 + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 16408) & 0xFFFFFFFFFFFFFFF0));
            v52 = (*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(**(_QWORD **)(*a1 + 224) + 176))(*(_QWORD *)(*a1 + 224), v46, v54 / v55);
            goto LABEL_101;
          }
          v48 = v41 & 0x7F;
          if (v48 != 69 || v30 == 0)
          {
            if (v48 != 72 || v30 == 0)
            {
              v51 = 0;
              goto LABEL_102;
            }
            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v46 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45)
            {
              v57 = (_QWORD *)*a1;
              *(_QWORD *)&v71 = 0;
              *(_QWORD *)((char *)&v71 + 5) = 0;
              v70 = v57;
              v73 = &v75;
              v74 = 0x400000000;
              v51 = (llvm::Value *)sub_22F262D70(&v70, 0, (int)v30 + 64, *(_QWORD *)(v30 + 48));
              if (v73 != &v75)
                free(v73);
              goto LABEL_102;
            }
            v56 = sub_22F29AD00((_QWORD *)*a1, v30);
          }
          else
          {
            v56 = sub_22F29A81C(*a1, v30);
          }
          v51 = (llvm::Value *)(v56 & 0xFFFFFFFFFFFFFFF8);
LABEL_102:
          llvm::Value::stripPointerCasts(v51);
LABEL_103:
          TemplateTypeParameter = llvm::DIBuilder::createTemplateValueParameter();
          v38 = v79;
          if (v79 >= (unint64_t)HIDWORD(v79))
          {
LABEL_104:
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v38 = v79;
          }
LABEL_62:
          v78[v38] = TemplateTypeParameter;
          LODWORD(v79) = v79 + 1;
LABEL_12:
          v5 += 24;
          v7 += 8;
          if (v6 == v5)
            goto LABEL_114;
          break;
        case 3:
          v26 = *(_QWORD *)(v8 + v5 + 8);
          sub_22F254858(a1, v26, a3);
          v27 = *(_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF0);
          if (v27)
            v28 = *(_BYTE *)(v27 + 16) == 31;
          else
            v28 = 0;
          if (!v28
            || !sub_22F2559E0(*(_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF0))
            || !(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*a1 + 224) + 160))(*(_QWORD *)(*a1 + 224), v27))
          {
            llvm::ConstantInt::get();
          }
          goto LABEL_53;
        case 4:
          sub_22F254858(a1, *(_QWORD *)(v8 + v5 + 16), a3);
          v16 = *a1;
          if (*(_QWORD *)a2)
          {
            if (__CFSUB__(*(_QWORD *)(*(_QWORD *)(v16 + 184) + 76) & 0x1C00000000, 0x1000000000, 0))
            {
              v17 = *(_QWORD *)(*(_QWORD *)a2 + v7);
              if (v17)
              {
                if ((*(_DWORD *)(v17 + 28) & 0x7F) == 0x3B)
                {
                  v20 = *(_QWORD *)(v17 + 72);
                  v18 = (uint64_t *)(v17 + 72);
                  v19 = v20;
                  if (v20 >= 4)
                  {
                    v21 = v19 & 3;
                    v22 = v19 & 0xFFFFFFFFFFFFFFFCLL;
                    if (v21 != 1)
                      v22 = 0;
                    if (v22)
                      v18 = (uint64_t *)(v22 + 72);
                    v23 = *v18;
                    v24 = v23 & 0xFFFFFFFFFFFFFFFCLL;
                    if ((v23 & 3) == 2 && v24 != 0)
                      v24 = *(_QWORD *)(v24 + 8);
                    if ((*(_BYTE *)(v24 + 2) & 1) == 0)
                    {
                      sub_22F007D7C((unsigned __int8 *)v24, *(_QWORD *)(v16 + 144), 0, (uint64_t)&v70);
                      sub_22E466FDC(v8 + v5, (uint64_t)&__p);
                      sub_22E4634B4((uint64_t)&v70, (uint64_t)&__p);
                      if (v68 >= 0x41 && __p)
                        MEMORY[0x2348A0E84](__p, 0x1000C8000313F17);
                      if (v71 >= 0x41 && v70)
                        MEMORY[0x2348A0E84](v70, 0x1000C8000313F17);
                    }
                  }
                }
              }
            }
          }
          sub_22E466FDC(v8 + v5, (uint64_t)&v70);
          llvm::ConstantInt::get();
          TemplateValueParameter = llvm::DIBuilder::createTemplateValueParameter();
          v40 = v79;
          if (v79 >= (unint64_t)HIDWORD(v79))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v40 = v79;
          }
          v78[v40] = TemplateValueParameter;
          LODWORD(v79) = v79 + 1;
          if (v71 >= 0x41 && v70)
            MEMORY[0x2348A0E84](v70, 0x1000C8000313F17);
          goto LABEL_12;
        case 5:
          __p = 0;
          v68 = 0;
          LODWORD(v71) = 0;
          LOBYTE(v74) = 0;
          v75 = 0;
          v76 = 1;
          v72 = 0;
          v73 = 0;
          *((_QWORD *)&v71 + 1) = 0;
          v69 = 0;
          v70 = v60;
          p_p = &__p;
          llvm::raw_ostream::SetBufferAndMode();
          v66 = *(_QWORD *)(v8 + v5 + 8);
          v9 = (_QWORD *)sub_22F0F08CC(&v66);
          v65[0] = *(_QWORD *)(*(_QWORD *)(*a1 + 144) + 15104) & 0xFFFF65FFDFFFBFFFLL | 0x120020000000 | (*(_QWORD *)(*(_QWORD *)(*a1 + 184) + 76) >> 1) & 0x1000000000;
          v65[1] = v61;
          sub_22EFBA008(v9, (llvm::raw_ostream *)&v70, (uint64_t)v65);
          TemplateTemplateParameter = llvm::DIBuilder::createTemplateTemplateParameter();
          v11 = v79;
          if (v79 >= (unint64_t)HIDWORD(v79))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v11 = v79;
          }
          v78[v11] = TemplateTemplateParameter;
          LODWORD(v79) = v79 + 1;
          llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v70);
          if (SHIBYTE(v69) < 0)
            operator delete(__p);
          goto LABEL_12;
        case 7:
          v33 = *(_QWORD *)(v8 + v5 + 8);
          v34 = *(_QWORD *)(v33 + 8);
          if ((*(_BYTE *)(v33 + 1) & 3) != 0)
            v34 = sub_22EF5F8C4(*(_QWORD *)(*a1 + 144), *(_QWORD *)(v33 + 8), 1);
          v35 = (_QWORD *)*a1;
          *(_QWORD *)&v71 = 0;
          *(_QWORD *)((char *)&v71 + 5) = 0;
          v70 = v35;
          v73 = &v75;
          v74 = 0x400000000;
          v36 = (llvm::Value *)sub_22F262DEC(&v70, v33, v34);
          if (v73 != &v75)
            free(v73);
          sub_22F254858(a1, v34, a3);
          llvm::Value::stripPointerCasts(v36);
LABEL_53:
          TemplateTypeParameter = llvm::DIBuilder::createTemplateValueParameter();
          v38 = v79;
          if (v79 >= (unint64_t)HIDWORD(v79))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v38 = v79;
          }
          goto LABEL_62;
        case 8:
          v12 = *(_QWORD *)(v8 + v5 + 8);
          v13 = *(unsigned int *)(v8 + v5 + 4);
          v63[0] = 0;
          v63[1] = v12;
          v63[2] = v13;
          v64 = 1;
          sub_22E493850(a1, v63, a3);
          TemplateParameterPack = llvm::DIBuilder::createTemplateParameterPack();
          v15 = v79;
          if (v79 >= (unint64_t)HIDWORD(v79))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v15 = v79;
          }
          v78[v15] = TemplateParameterPack;
          LODWORD(v79) = v79 + 1;
          goto LABEL_12;
        default:
          goto LABEL_12;
      }
    }
  }
LABEL_114:
  Array = llvm::DIBuilder::getOrCreateArray();
  if (v78 != v80)
    free(v78);
  return Array;
}

uint64_t sub_22E494304(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v10;
  _QWORD v11[3];
  char v12;

  if (a2 && (*(_DWORD *)(a2 + 28) & 0x7Fu) - 67 > 0xFFFFFFFD)
  {
    v3 = *(_QWORD *)(a2 + 112);
    v4 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF8);
    if ((v3 & 4) != 0 && v4)
    {
      do
      {
        v10 = *(_QWORD *)(*v4 + 112);
        v4 = (_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF8);
      }
      while ((v10 & 4) != 0 && v4);
    }
    v5 = *(uint64_t **)(a2 + 128);
    v6 = *v5;
    v7 = *((unsigned int *)v5 + 2);
    v11[0] = v4[7];
    v11[1] = v6;
    v11[2] = v7;
    v8 = 1;
  }
  else
  {
    v8 = 0;
    LOBYTE(v11[0]) = 0;
  }
  v12 = v8;
  return sub_22E493850(a1, (uint64_t)v11, a3);
}

uint64_t sub_22E494390(uint64_t a1, uint64_t a2)
{
  int v3;
  void **v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  void *__p[2];
  char v11;

  sub_22EFC683C((uint64_t *)(a2 + 40), __p);
  v3 = v11;
  v4 = (void **)__p[0];
  if (v11 >= 0)
    v5 = v11 & 0x7F;
  else
    v5 = (size_t)__p[1];
  v6 = sub_22E3CD3D4(a1 + 2408, v5 + 6, 0);
  v7 = v6;
  *(_DWORD *)v6 = 1953527391;
  *(_WORD *)(v6 + 4) = 9330;
  if (v5)
  {
    if (v3 >= 0)
      v8 = __p;
    else
      v8 = v4;
    memcpy((void *)(v6 + 6), v8, v5);
  }
  if (v11 < 0)
    operator delete(__p[0]);
  return v7;
}

uint64_t *sub_22E494448(uint64_t *result, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t v5;
  BOOL v6;
  uint64_t *v7;
  uint64_t v8;

  if ((*(_QWORD *)(*(_QWORD *)(*result + 184) + 96) & 0x1800000000000000) != 0)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v5)
      v6 = (*(_DWORD *)(v5 + 16) & 0xFF800FF) == 86507531;
    else
      v6 = 0;
    if (v6)
    {
      llvm::MDTuple::getImpl();
    }
    else
    {
      v7 = result;
      v8 = sub_22E48F44C(result, a4);
      sub_22F254858(v7, a3, v8);
    }
    return (uint64_t *)llvm::Instruction::setMetadata();
  }
  return result;
}

uint64_t sub_22E494514(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t Enumerator;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t EnumerationType;
  _BYTE v14[12];
  void *v15;
  uint64_t v16;
  _BYTE v17[128];
  void *v18;
  _QWORD v19[34];

  v19[32] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22F114198(*(_QWORD *)(a2 + 24));
  if ((sub_22F1110EC(*(_QWORD *)(v4 + 48), 0) & 1) == 0)
  {
    sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)a1 + 144), *(_QWORD *)(v4 + 48));
    if (sub_22E49F7A8(v4))
      sub_22EFC8A80(v4);
  }
  sub_22E491AEC((uint64_t)&v18, a2, *(_QWORD *)a1, *(_QWORD *)(a1 + 464));
  v15 = v17;
  v16 = 0x1000000000;
  v5 = sub_22EFC3500(v4);
  v6 = sub_22E49F9AC(v5);
  sub_22EFC3500(v5);
  if (v6)
  {
LABEL_5:
    Enumerator = llvm::DIBuilder::createEnumerator();
    v8 = v16;
    if (v16 >= (unint64_t)HIDWORD(v16))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v8 = v16;
    }
    *((_QWORD *)v15 + v8) = Enumerator;
    LODWORD(v16) = v16 + 1;
    while (1)
    {
      v6 = *(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v6)
        break;
      if ((*(_DWORD *)(v6 + 28) & 0x7F) == 0x43)
        goto LABEL_5;
    }
  }
  llvm::DIBuilder::getOrCreateArray();
  v9 = sub_22E48F44C((uint64_t *)a1, *(_DWORD *)(v5 + 24));
  v10 = *(_DWORD *)(v5 + 24);
  if (v10)
    sub_22F1E2F68(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 1992), v10, *(unsigned __int8 *)(a1 + 13), (uint64_t)v14);
  sub_22E48FAEC(a1, v5);
  v11 = sub_22E496830(v5);
  sub_22F254858(a1, v11, v9);
  EnumerationType = llvm::DIBuilder::createEnumerationType();
  if (v15 != v17)
    free(v15);
  if (v18 != v19)
    free(v18);
  return EnumerationType;
}

uint64_t sub_22E4947E0(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t result;

  if (!a2
    || (*(_DWORD *)(a2 + 28) & 0x7Fu) - 38 < 0xFFFFFFFD
    || !sub_22E463414(a2)
    || sub_22F296010(*(_QWORD *)a1, a2) != 1
    || (result = sub_22E494874(a2), (_DWORD)result))
  {
    if (!*(_BYTE *)(a1 + 12))
      return (uint64_t)sub_22E494A08((int *)a1, a2);
    v4 = sub_22EFC3500(a2);
    result = sub_22E4948F4(v4);
    if ((result & 1) == 0)
      return (uint64_t)sub_22E494A08((int *)a1, a2);
  }
  return result;
}

BOOL sub_22E494874(uint64_t a1)
{
  _BOOL8 result;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (sub_22E49F808(a1))
    return 1;
  v3 = sub_22E488FF8(a1);
  if (v3 != v4)
  {
    v5 = v3;
    v6 = v4;
    while (1)
    {
      result = sub_22E49F808(v5);
      if (result)
        break;
      do
        v5 = *(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v5 && (*(_DWORD *)(v5 + 28) & 0x7Eu) - 54 > 3);
      if (v5 == v6)
        return result;
    }
    return 1;
  }
  return 0;
}

uint64_t sub_22E4948F4(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  char v6;
  int v8;
  int v9;
  unint64_t v10;

  if (!a1)
  {
    LOBYTE(v2) = 0;
    return v2 & 1;
  }
  if ((*(_BYTE *)(a1 + 29) & 0x80) == 0)
  {
    LOBYTE(v2) = 0;
    return v2 & 1;
  }
  if (sub_22EFB948C(a1) > 2
    || (LOBYTE(v2) = 0, v3 = *(_QWORD *)(a1 + 40), (v3 & 7) == 0)
    && (v4 = v3 & 0xFFFFFFFFFFFFFFF8) != 0
    && (v2 = **(_DWORD **)(v4 + 16)) != 0)
  {
    v5 = *(_DWORD *)(a1 + 28);
    v2 = (v5 & 0x7F) - 38;
    if (v2 < 0xFFFFFFFD)
    {
LABEL_10:
      v6 = 1;
LABEL_14:
      LOBYTE(v2) = v2 | v6;
      return v2 & 1;
    }
    if ((*(_BYTE *)(a1 + 74) & 1) == 0)
      goto LABEL_12;
    v8 = sub_22EFD5760(a1);
    if (!v8)
      goto LABEL_10;
    if ((v9 = v8, (v5 & 0x7E) == 0x24) && (v8 - 2) < 3 || !sub_22F3B16C0(a1 + 64))
    {
      if (sub_22EFC3B90(a1))
      {
        v10 = sub_22EFC3B90(a1);
        LOBYTE(v2) = 0;
        if ((*(_BYTE *)(v10 + 29) & 0x80) != 0)
        {
          v6 = 1;
          goto LABEL_14;
        }
      }
      else
      {
        LOBYTE(v2) = v9 == 3;
      }
    }
    else
    {
LABEL_12:
      LOBYTE(v2) = 0;
    }
    v6 = 0;
    goto LABEL_14;
  }
  return v2 & 1;
}

int *sub_22E494A08(int *result, uint64_t a2)
{
  int *v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (result[2] >= 4)
  {
    v2 = result;
    v3 = sub_22EF6477C(*(_QWORD *)(*(_QWORD *)result + 144), a2);
    v7 = v3;
    v8 = v3;
    v4 = (uint64_t *)(v2 + 324);
    v9 = 0;
    result = (int *)sub_22F246C54((uint64_t *)v2 + 162, &v8, &v9);
    if (!(_DWORD)result
      || v9 == *((_QWORD *)v2 + 162) + 16 * v2[328]
      || (*(_BYTE *)(*(_QWORD *)(v9 + 8) + 28) & 4) != 0)
    {
      v5 = sub_22E494AD0(v2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0));
      v6 = sub_22F258670(v4, &v7);
      return (int *)sub_22E4911C0(v6 + 1, v5);
    }
  }
  return result;
}

llvm::MDNode *sub_22E494AD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  llvm::MDNode *v6;
  unint64_t v7;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  llvm::MDNode *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD v35[17];

  v35[16] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22F114198(*(_QWORD *)(a2 + 24));
  v5 = sub_22E48F44C((uint64_t *)a1, *(_DWORD *)(v4 + 24));
  v6 = (llvm::MDNode *)sub_22F25615C(a1, a2);
  v31 = v6;
  v7 = sub_22EFC3500(v4);
  if (v7 && (*(_BYTE *)(v7 + 74) & 1) != 0)
  {
    if ((*(_DWORD *)(v4 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD)
    {
      v33 = v6;
      v9 = *(_QWORD *)(*(_QWORD *)(sub_22F0C975C(*(_QWORD *)(*(_QWORD *)a1 + 144), v4) + 72) + 48) & 0xFFFFFFFFFFFFFFF8;
      if (v9)
      {
        do
        {
          v10 = v9;
          v11 = *(_QWORD *)(*(_QWORD *)(sub_22F0C975C(*(_QWORD *)(*(_QWORD *)a1 + 144), v9) + 72) + 48);
          v9 = v11 & 0xFFFFFFFFFFFFFFF8;
          v12 = v11 & 4;
          if (v9)
            v13 = v12 == 0;
          else
            v13 = 0;
        }
        while (v13);
        v14 = *(_QWORD *)(v10 + 48) & 0xFFFFFFFFFFFFFFF0;
        v15 = sub_22E48F44C((uint64_t *)a1, *(_DWORD *)(v4 + 24));
        sub_22F254858(a1, v14, v15);
      }
      else
      {
        sub_22E463414(v4);
      }
      llvm::DIBuilder::replaceVTableHolder();
    }
    sub_22F254808((uint64_t *)(a1 + 2336), (uint64_t)v6);
    v33 = (void *)sub_22F114198(*(_QWORD *)(a2 + 24));
    v16 = sub_22F25827C(a1 + 2360, (uint64_t *)&v33);
    sub_22E4911C0(v16 + 1, (uint64_t)v6);
    v33 = v35;
    v34 = 0x1000000000;
    if ((*(_DWORD *)(v4 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD)
    {
      sub_22F255914(a1, v4, v5, (uint64_t)&v33, (uint64_t)v6);
      sub_22F255C30((_QWORD *)a1, v4, v5, (uint64_t)&v33);
      sub_22E4922F4(a1, v4, v5, (uint64_t)&v33);
      if ((*(_WORD *)(v4 + 72) & 0x80) != 0)
        sub_22EFCC320(v4 + 64);
      for (i = *(_QWORD *)(v4 + 80); i; i = *(_QWORD *)(i + 8) & 0xFFFFFFFFFFFFFFF8)
      {
        if ((*(_DWORD *)(i + 28) & 0x200) == 0 && (*(_DWORD *)(i + 28) & 0x7Eu) - 54 <= 3 && !sub_22F2556D0(i))
        {
          v23 = *(_QWORD *)(*(_QWORD *)(i + 48) & 0xFFFFFFFFFFFFFFF0);
          if (v23)
            v24 = *(_BYTE *)(v23 + 16) == 26;
          else
            v24 = 0;
          if (!v24)
            v23 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(i + 48) & 0xFFFFFFFFFFFFFFF0));
          LOBYTE(v32) = 0;
          v25 = sub_22F110500((uint64_t)&v32, v23);
          if (!v25 || *(_BYTE *)(v25 + 16) != 14)
          {
            v26 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)i + 32))(i);
            v32 = 0;
            if (sub_22F24C318(*(_QWORD *)(a1 + 2544), *(_DWORD *)(a1 + 2560), v26, &v32))
              v27 = v32 == *(_QWORD *)(a1 + 2544) + 16 * *(unsigned int *)(a1 + 2560);
            else
              v27 = 1;
            if (v27)
              v28 = sub_22E492DB4(a1, i, v5);
            else
              v28 = *(_QWORD *)(v32 + 8);
            v29 = v34;
            if (v34 >= (unint64_t)HIDWORD(v34))
            {
              v30 = v28;
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v28 = v30;
              v29 = v34;
            }
            *((_QWORD *)v33 + v29) = v28;
            LODWORD(v34) = v34 + 1;
          }
        }
      }
    }
    else
    {
      sub_22E4922F4(a1, v4, v5, (uint64_t)&v33);
    }
    v18 = *(_QWORD *)(a1 + 2344);
    v20 = *(_QWORD *)(v18 - 8);
    v19 = v18 - 8;
    if (v20)
      llvm::MetadataTracking::untrack();
    *(_QWORD *)(a1 + 2344) = v19;
    v21 = sub_22F114198(*(_QWORD *)(a2 + 24));
    sub_22F256214(a1 + 2360, v21);
    llvm::DIBuilder::getOrCreateArray();
    llvm::DIBuilder::replaceArrays();
    if ((*((_BYTE *)v31 + 1) & 0x7F) == 2)
      v31 = (llvm::MDNode *)llvm::MDNode::replaceWithPermanentImpl(v31);
    v32 = sub_22F114198(*(_QWORD *)(a2 + 24));
    v22 = sub_22F25827C(a1 + 2360, &v32);
    sub_22E4911C0(v22 + 1, (uint64_t)v31);
    v6 = v31;
    if (v33 != v35)
      free(v33);
  }
  return v6;
}

uint64_t sub_22E494ED0(int a1, int a2, unint64_t a3, uint64_t a4)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int i;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t result;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;

  if (a2)
  {
    v7 = sub_22EFC3500(a3);
    if ((sub_22E4948F4(v7) & 1) != 0)
      return 1;
  }
  if (!a3 || (v8 = a3, (*(_DWORD *)(a3 + 28) & 0x7F) != 0x53))
  {
    v9 = *(_QWORD *)(a3 + 16);
    v10 = v9 & 0xFFFFFFFFFFFFFFF8;
    if ((v9 & 4) != 0)
      v10 = *(_QWORD *)v10;
    for (i = *(_WORD *)(v10 + 8) & 0x7F; i != 83; i = *(_WORD *)(v10 + 8) & 0x7F)
    {
      v12 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v12 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_18;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_17;
        if (i == 16)
          goto LABEL_11;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_24;
        if (i == 24)
        {
LABEL_11:
          v12 = -48;
        }
        else
        {
LABEL_17:
          if (i != 70)
          {
LABEL_18:
            v13 = i - 52;
            if ((i - 33) >= 5)
              v14 = -48;
            else
              v14 = -64;
            if (v13 >= 6)
              v12 = v14;
            else
              v12 = -72;
            goto LABEL_24;
          }
          v12 = -64;
        }
      }
LABEL_24:
      v15 = *(_QWORD *)(v10 + v12 + 16);
      v10 = v15 & 0xFFFFFFFFFFFFFFF8;
      if ((v15 & 4) != 0)
        v10 = *(_QWORD *)v10;
    }
    v8 = v10 - 40;
  }
  v16 = *(_QWORD *)(*(_QWORD *)(v8 + 88) + 16048);
  if (!v16)
  {
    if (a1 == 3)
      return 1;
    goto LABEL_36;
  }
  v17 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v16 + 104))(v16, a3);
  result = 1;
  if (a1 != 3 && v17)
  {
LABEL_36:
    if (a1 > 5)
      return 0;
    if ((*(_BYTE *)(a3 + 29) & 1) != 0)
    {
      sub_22EFC8E88(a3);
      v20 = *((unsigned int *)v19 + 2);
      if ((_DWORD)v20)
      {
        v21 = 8 * v20;
        v22 = *v19;
        while (*(_WORD *)(*(_QWORD *)v22 + 32) != 311)
        {
          v22 += 8;
          v21 -= 8;
          if (!v21)
            goto LABEL_45;
        }
      }
      else
      {
        v22 = *v19;
      }
      if (v22 != *v19 + 8 * v20)
        return 0;
    }
LABEL_45:
    if ((*(_BYTE *)(a4 + 1) & 1) == 0)
      return 0;
    if ((*(_BYTE *)(a3 + 74) & 0x20) != 0)
    {
      if ((*(_DWORD *)(a3 + 28) & 0x7Fu) - 38 < 0xFFFFFFFD)
        return 0;
      if (!*(_QWORD *)(a3 + 128)
        && (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a3 + 104) + 96), *(_QWORD *)(a3 + 104)), !*(_QWORD *)(a3 + 128))
        || !sub_22E463414(a3)
        || sub_22E494874(a3))
      {
        if ((*(_DWORD *)(a3 + 28) & 0x7E) == 0x24 && (*(_BYTE *)(a3 + 180) & 7) == 3)
        {
          if ((*(_WORD *)(a3 + 72) & 0x80) != 0)
            sub_22EFCC320(a3 + 64);
          v23 = *(_QWORD *)(a3 + 80);
          if (v23)
          {
            while ((*(_DWORD *)(v23 + 28) & 0x7Eu) - 54 > 3)
            {
              v23 = *(_QWORD *)(v23 + 8) & 0xFFFFFFFFFFFFFFF8;
              if (!v23)
                goto LABEL_62;
            }
LABEL_72:
            v25 = sub_22EFBF824(v23);
            if (v25 && (*(_BYTE *)(v25 + 29) & 2) == 0 && sub_22E49F868(v25))
            {
              v26 = (_QWORD *)(*(_QWORD *)(v23 + 144) & 0xFFFFFFFFFFFFFFF8);
              if ((*(_QWORD *)(v23 + 144) & 6) != 2 || v26 == 0)
                v26 = (_QWORD *)v26[6];
              if ((*v26 & 6) != 2)
                return 1;
            }
            while (1)
            {
              v23 = *(_QWORD *)(v23 + 8) & 0xFFFFFFFFFFFFFFF8;
              if (!v23)
                break;
              if ((*(_DWORD *)(v23 + 28) & 0x7Eu) - 54 < 4)
                goto LABEL_72;
            }
          }
        }
LABEL_62:
        if (a1 != 4)
          return 0;
        if (sub_22E494874(a3))
          return 0;
        v24 = *(_QWORD *)(a3 + 128);
        if (v24)
        {
          if (((*(unsigned __int16 *)(v24 + 8) | (*(unsigned __int8 *)(v24 + 10) << 16)) & 0x100000) != 0)
            return 0;
        }
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a3 + 104) + 96), *(_QWORD *)(a3 + 104));
        if ((**(_QWORD **)(a3 + 128) & 0x80) != 0 || sub_22E49F698(a3) || sub_22E49F8B4(a3))
          return 0;
      }
    }
    return 1;
  }
  return result;
}

uint64_t sub_22E495234(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  BOOL v32;
  int v33;
  uint64_t *v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t ObjCIVar;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t Inheritance;
  int v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  uint64_t v57;
  BOOL v58[8];
  unint64_t v59;
  llvm *v60[2];
  unsigned int v61;
  _QWORD v62[2];
  uint64_t StructType;
  _BYTE v64[24];
  _QWORD *v65;
  uint64_t v66;
  _QWORD v67[18];

  v67[16] = *MEMORY[0x24BDAC8D0];
  v6 = sub_22F409D88(a2);
  sub_22E48F44C((uint64_t *)a1, *(_DWORD *)(v6 + 24));
  v7 = *(_DWORD *)(v6 + 24);
  if (v7)
    sub_22F1E2F68(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 1992), v7, *(unsigned __int8 *)(a1 + 13), (uint64_t)&v65);
  sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)a1 + 144), a2);
  sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)a1 + 144), a2);
  sub_22F3B4E88(v6);
  sub_22E48FBD8(a1, v6);
  StructType = llvm::DIBuilder::createStructType();
  v65 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_22F258670((uint64_t *)(a1 + 1296), &v65);
  sub_22E4911C0(v8 + 1, StructType);
  sub_22F254808((uint64_t *)(a1 + 2336), StructType);
  v65 = (_QWORD *)sub_22F409D88(a2);
  v9 = sub_22F25827C(a1 + 2360, (uint64_t *)&v65);
  sub_22E4911C0(v9 + 1, StructType);
  v65 = v67;
  v66 = 0x1000000000;
  v10 = (uint64_t *)sub_22F3B46CC(v6);
  if (v10)
  {
    v50 = sub_22F36D148(*(_QWORD *)(*(_QWORD *)a1 + 144), v10, 0);
    v49 = 0;
    if (!sub_22F254858(a1, v50, a3))
      goto LABEL_74;
    Inheritance = llvm::DIBuilder::createInheritance();
    v53 = v66;
    if (v66 >= HIDWORD(v66))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v53 = v66;
    }
    v65[v53] = Inheritance;
    LODWORD(v66) = v66 + 1;
  }
  v62[0] = a1;
  v62[1] = &v65;
  v60[0] = 0;
  v60[1] = 0;
  v61 = 0;
  v11 = sub_22E496488(v6);
  if (v11 != v12)
  {
    v13 = v11;
    v14 = v12;
    do
    {
      v15 = sub_22F256388(v13);
      if (v15 != v16)
      {
        v17 = v15;
        v18 = v16;
        do
        {
          v19 = *(_QWORD *)(v17 + 40);
          if ((v19 & 7) != 0)
            v20 = 0;
          else
            v20 = v19 & 0xFFFFFFFFFFFFFFF8;
          v58[0] = (*(_DWORD *)(v17 + 72) & 0x4000) != 0;
          v59 = v20;
          sub_22F258AC8((uint64_t)v64, (uint64_t)v60, (uint64_t)v58);
          sub_22E4964C8((uint64_t)v62, v17);
          do
            v17 = *(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF8;
          while (v17 && (*(_DWORD *)(v17 + 28) & 0x7F) != 0x19);
        }
        while (v17 != v18);
      }
      do
      {
        v13 = *(_QWORD *)(v13 + 128);
        if (!v13)
          break;
      }
      while ((*(_BYTE *)(v13 + 28) & 0x80) != 0 || *(_QWORD *)(v13 + 40) >= 8uLL && (*(_QWORD *)(v13 + 40) & 7) == 0);
    }
    while (v13 != v14);
  }
  v22 = sub_22F256388(v6);
  if (v22 != v23)
  {
    v24 = v22;
    v25 = v23;
    do
    {
      v26 = *(_QWORD *)(v24 + 40);
      if ((v26 & 7) != 0)
        v27 = 0;
      else
        v27 = v26 & 0xFFFFFFFFFFFFFFF8;
      v58[0] = (*(_DWORD *)(v24 + 72) & 0x4000) != 0;
      v59 = v27;
      sub_22F258AC8((uint64_t)v64, (uint64_t)v60, (uint64_t)v58);
      if (v64[16])
        sub_22E4964C8((uint64_t)v62, v24);
      do
        v24 = *(_QWORD *)(v24 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v24 && (*(_DWORD *)(v24 + 28) & 0x7F) != 0x19);
    }
    while (v24 != v25);
  }
  llvm::deallocate_buffer(v60[0], (void *)(16 * v61));
  sub_22F0CBDC4(*(_QWORD *)(*(_QWORD *)a1 + 144), v6, 0);
  v28 = sub_22EFDD1E0(v6);
  if (v28)
  {
    v29 = v28;
    v30 = 0;
    while (sub_22F254858(a1, *(_QWORD *)(v29 + 48), a3))
    {
      v31 = *(_QWORD *)(v29 + 40) & 0xFFFFFFFFFFFFFFF8;
      v32 = (*(_QWORD *)(v29 + 40) & 7) != 0 || v31 == 0;
      if (!v32 && **(_DWORD **)(v31 + 16))
      {
        sub_22E48F44C((uint64_t *)a1, *(_DWORD *)(v29 + 24));
        v33 = *(_DWORD *)(v29 + 24);
        if (v33)
          sub_22F1E2F68(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 1992), v33, *(unsigned __int8 *)(a1 + 13), (uint64_t)v64);
        v34 = (uint64_t *)(*(_QWORD *)(v29 + 48) & 0xFFFFFFFFFFFFFFF0);
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v34 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 4)
        {
          if ((*(_BYTE *)(v29 + 68) & 1) != 0)
            sub_22EFC2EF4(v29, *(_QWORD *)(*(_QWORD *)a1 + 144));
          else
            sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)a1 + 144), *v34);
          sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)a1 + 144), *v34);
        }
        v35 = *(_QWORD **)a1;
        if (((1 << *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 152) + 400)) & 0xDD) != 0
          && (*(_BYTE *)(v29 + 68) & 1) != 0)
        {
          if (!v35[98])
          {
            sub_22F298C2C(v35);
            v35 = *(_QWORD **)a1;
          }
          v36 = v35[18];
          v37 = sub_22F3B4E88(v6);
          sub_22F0CBCD0(v36, v6, v37, v29);
          sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)a1 + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 16408) & 0xFFFFFFFFFFFFFFF0));
        }
        v38 = sub_22F3B4E88(v6);
        if (v38)
        {
          v39 = *(_QWORD *)(v29 + 40);
          v40 = (v39 & 7) != 0 ? 0 : v39 & 0xFFFFFFFFFFFFFFF8;
          v41 = sub_22EFDE5CC(v38, v40);
          if (v41)
          {
            v42 = *(_QWORD *)(v41 + 48);
            if (v42)
            {
              v56 = v41;
              v55 = *(_QWORD **)(v41 + 48);
              v45 = *(_DWORD *)(v42 + 24);
              v57 = sub_22E48F44C((uint64_t *)a1, v45);
              if (v45)
                sub_22F1E2F68(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 1992), v45, *(unsigned __int8 *)(a1 + 13), (uint64_t)v64);
              v54 = *(_QWORD *)(v56 + 72);
              if (!sub_22E496684((uint64_t)v55, *(_QWORD *)(v56 + 64)))
                sub_22E490988(a1, v55[10]);
              if ((sub_22E496724((uint64_t)v55, v54) & 1) == 0)
                sub_22E490988(a1, v55[11]);
              sub_22F254858(a1, v55[7], v57);
              llvm::DIBuilder::createObjCProperty();
            }
          }
        }
        ObjCIVar = llvm::DIBuilder::createObjCIVar();
        v44 = v66;
        if (v66 >= (unint64_t)HIDWORD(v66))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v44 = v66;
        }
        v65[v44] = ObjCIVar;
        LODWORD(v66) = v66 + 1;
      }
      v29 = *(_QWORD *)(v29 + 80);
      ++v30;
      if (!v29)
        goto LABEL_70;
    }
    v49 = 0;
  }
  else
  {
LABEL_70:
    llvm::DIBuilder::getOrCreateArray();
    llvm::DIBuilder::replaceArrays();
    v46 = *(_QWORD *)(a1 + 2344);
    v48 = *(_QWORD *)(v46 - 8);
    v47 = v46 - 8;
    if (v48)
      llvm::MetadataTracking::untrack();
    *(_QWORD *)(a1 + 2344) = v47;
    v49 = StructType;
  }
LABEL_74:
  if (v65 != v67)
    free(v65);
  return v49;
}

uint64_t sub_22E495A4C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  BOOL v7;
  uint64_t Module;
  char **v10;
  char *v11;
  char *v12;
  _BOOL4 v13;
  unsigned int v14;
  _WORD *v15;
  int v16;
  __int128 *p_dst;
  char *v18;
  _QWORD *v19;
  char v20;
  uint64_t v21;
  char *v22;
  int v23;
  __int16 *v24;
  const char *v25;
  char v26;
  _BYTE *v27;
  __int16 v28;
  _BYTE *v29;
  uint64_t v30;
  int v31;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned int v36;
  void *v37;
  uint64_t v38;
  size_t v39;
  size_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  llvm::MDString *v45;
  llvm::MDString *v46;
  const void *v47;
  uint64_t v48;
  size_t v49;
  __int128 *v50;
  char v51;
  size_t v52;
  __int128 *v53;
  uint64_t v54;
  uint64_t v55;
  __int128 *v56;
  size_t v57;
  _QWORD *v58;
  size_t v59;
  unsigned int v60;
  _QWORD *v61;
  void *v62[2];
  uint64_t v63;
  __int16 v64;
  void *__p;
  char v66;
  __int16 v67;
  void *v68;
  uint64_t v69;
  char v70;
  __int16 v71;
  void *v72;
  size_t v73;
  size_t v74;
  uint64_t v75;
  _BYTE v76[80];
  __int128 __dst;
  unint64_t v78;
  _BYTE *v79;
  _BYTE *v80;
  void *v81;
  __int128 v82;
  _QWORD v83[21];

  v83[19] = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a2 + 72);
  v75 = v6;
  *(_QWORD *)&__dst = 0;
  if (sub_22F24C318(*(_QWORD *)(a1 + 2240), *(_DWORD *)(a1 + 2256), v6, &__dst))
    v7 = (_QWORD)__dst == *(_QWORD *)(a1 + 2240) + 16 * *(unsigned int *)(a1 + 2256);
  else
    v7 = 1;
  if (!v7)
    return *(_QWORD *)(__dst + 8);
  v60 = a3;
  v81 = v83;
  v82 = xmmword_22F44E310;
  sub_22F242C48((uint64_t)&__dst, (uint64_t)&v81);
  v61 = (_QWORD *)a1;
  v10 = *(char ***)(*(_QWORD *)a1 + 176);
  v11 = *v10;
  v12 = v10[1];
  if (*v10 != v12)
  {
    v14 = 0;
    while (1)
    {
      ++v14;
      v15 = v80;
      if (v14 >= 2)
      {
        if (v79 == v80)
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&__dst, " ");
          v15 = v80;
        }
        else
        {
          *v80 = 32;
          v15 = ++v80;
        }
      }
      v16 = v11[24];
      if ((unint64_t)(v79 - (_BYTE *)v15) > 1)
      {
        *v15 = 11554;
        v18 = v80 + 2;
        v80 += 2;
        p_dst = &__dst;
        v19 = &v80;
      }
      else
      {
        p_dst = (__int128 *)llvm::raw_ostream::write((llvm::raw_ostream *)&__dst, "\"-");
        v19 = p_dst + 2;
        v18 = (char *)*((_QWORD *)p_dst + 4);
      }
      if (v16)
        v20 = 85;
      else
        v20 = 68;
      if ((unint64_t)v18 >= *((_QWORD *)p_dst + 3))
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)p_dst);
      }
      else
      {
        *v19 = v18 + 1;
        *v18 = v20;
      }
      if ((v11[23] & 0x80000000) == 0)
      {
        v21 = v11[23];
        v22 = v11;
        if (v11[23])
          goto LABEL_24;
        goto LABEL_40;
      }
      v22 = *(char **)v11;
      v21 = *((_QWORD *)v11 + 1);
      if (v21)
        break;
LABEL_40:
      v29 = v80;
      if (v80 >= v79)
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&__dst);
      }
      else
      {
        ++v80;
        *v29 = 34;
      }
      v11 += 32;
      if (v11 == v12)
        goto LABEL_8;
    }
    while (1)
    {
LABEL_24:
      v23 = *v22;
      if (v23 == 34)
      {
        v24 = (__int16 *)v80;
        if ((unint64_t)(v79 - v80) > 1)
        {
          v28 = 8796;
          goto LABEL_38;
        }
        v25 = "\\\"";
      }
      else
      {
        if (v23 != 92)
        {
          v26 = *v22;
          v27 = v80;
          if (v80 >= v79)
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&__dst);
          }
          else
          {
            ++v80;
            *v27 = v26;
          }
          goto LABEL_34;
        }
        v24 = (__int16 *)v80;
        if ((unint64_t)(v79 - v80) > 1)
        {
          v28 = 23644;
LABEL_38:
          *v24 = v28;
          v80 += 2;
          goto LABEL_34;
        }
        v25 = "\\\\";
      }
      llvm::raw_ostream::write((llvm::raw_ostream *)&__dst, v25);
LABEL_34:
      ++v22;
      if (!--v21)
        goto LABEL_40;
    }
  }
LABEL_8:
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__dst);
  if (v6)
    v13 = *(_QWORD *)(v6 + 32) == 0;
  else
    v13 = 1;
  v30 = a2;
  if (!v60 || !v13 || !*(_QWORD *)(a2 + 40))
    goto LABEL_77;
  __dst = *(_OWORD *)(a2 + 48);
  v31 = *(_DWORD *)(a2 + 64);
  LODWORD(v78) = v31;
  if (__dst != 0 || v31 != 0)
  {
    v33 = 0;
    v34 = 0;
    v35 = (unsigned __int8 *)&__dst;
    do
    {
      v36 = *v35++;
      v34 |= (unint64_t)v36 << v33;
      v33 += 8;
    }
    while (v33 != 64);
  }
  MEMORY[0x23489FAB0](&__dst, *(_QWORD *)(*v61 + 200), 1, 0);
  v73 = 0;
  v74 = 0;
  v72 = &v75;
  v37 = *(void **)(a2 + 32);
  v38 = *(_QWORD *)(a2 + 40);
  v71 = 261;
  v68 = v37;
  v69 = v38;
  if ((llvm::sys::path::is_absolute() & 1) == 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*v61 + 168) + 216) & 0x40) != 0)
    {
      v41 = sub_22E491078(v61);
      v40 = v59;
      v39 = 0;
      v73 = 0;
      if (v74 >= v59)
      {
LABEL_61:
        if (!v40)
        {
LABEL_63:
          v73 = v39 + v40;
          goto LABEL_64;
        }
LABEL_62:
        memcpy((char *)v72 + v39, v41, v40);
        v39 = v73;
        goto LABEL_63;
      }
    }
    else
    {
      v39 = 0;
      v41 = *(void **)(a2 + 16);
      v40 = *(_QWORD *)(a2 + 24);
      v73 = 0;
      if (v74 >= v40)
        goto LABEL_61;
    }
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v39 = v73;
    if (!v40)
      goto LABEL_63;
    goto LABEL_62;
  }
LABEL_64:
  v42 = *(void **)(a2 + 32);
  v43 = *(_QWORD *)(a2 + 40);
  v71 = 261;
  v68 = v42;
  v69 = v43;
  v67 = 257;
  v64 = 257;
  llvm::sys::path::append();
  sub_22F1DB578((const void **)a2, &v68);
  v44 = v61[58];
  if (*(_BYTE *)v44 == 15 || (v44 = *(_QWORD *)(v44 - 8 * *(unsigned int *)(v44 + 8))) != 0)
  {
    v45 = *(llvm::MDString **)(v44 - 8 * *(unsigned int *)(v44 + 8) + 8);
    if (v45)
      llvm::MDString::getString(v45);
  }
  llvm::DIBuilder::createFile();
  v46 = *(llvm::MDString **)(v61[58] - 8 * *(unsigned int *)(v61[58] + 8) + 8);
  if (v46)
    llvm::MDString::getString(v46);
  sub_22E4962E8(&__p, v61, v72, v73);
  llvm::DIBuilder::createCompileUnit();
  if (v66 < 0)
    operator delete(__p);
  v30 = a2;
  if (v70 < 0)
    operator delete(v68);
  llvm::DIBuilder::finalize((llvm::DIBuilder *)&__dst);
  if (v72 != &v75)
    free(v72);
  sub_22E49F0A8((uint64_t)&__dst);
LABEL_77:
  if (!v13)
  {
    sub_22F420190((uint64_t)v76, *(_QWORD *)(v6 + 32));
    sub_22E495A4C(v61, v76, v60);
  }
  v47 = *(const void **)(v30 + 16);
  if (v47)
  {
    v52 = *(_QWORD *)(v30 + 24);
    if (v52 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v52 >= 0x17)
    {
      v54 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v52 | 7) != 0x17)
        v54 = v52 | 7;
      v55 = v54 + 1;
      v53 = (__int128 *)operator new(v54 + 1);
      *((_QWORD *)&__dst + 1) = v52;
      v78 = v55 | 0x8000000000000000;
      *(_QWORD *)&__dst = v53;
    }
    else
    {
      HIBYTE(v78) = *(_QWORD *)(v30 + 24);
      v53 = &__dst;
      if (!v52)
        goto LABEL_89;
    }
    memmove(v53, v47, v52);
LABEL_89:
    *((_BYTE *)v53 + v52) = 0;
    v51 = HIBYTE(v78);
    v49 = *((_QWORD *)&__dst + 1);
    v50 = (__int128 *)__dst;
    v48 = v75;
    goto LABEL_90;
  }
  v48 = v6;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  __dst = 0uLL;
  v78 = 0;
LABEL_90:
  sub_22F1DB578((const void **)v30, &v68);
  if (v51 >= 0)
    v56 = &__dst;
  else
    v56 = v50;
  if (v51 >= 0)
    v57 = v51 & 0x7F;
  else
    v57 = v49;
  sub_22E4962E8(&__p, v61, v56, v57);
  if (v48)
  {
    if (*(char *)(v48 + 199) < 0)
    {
      sub_22E3BB2B4(v62, *(void **)(v48 + 176), *(_QWORD *)(v48 + 184));
    }
    else
    {
      *(_OWORD *)v62 = *(_OWORD *)(v48 + 176);
      v63 = *(_QWORD *)(v48 + 192);
    }
  }
  else
  {
    HIBYTE(v63) = 0;
    LOBYTE(v62[0]) = 0;
  }
  Module = llvm::DIBuilder::createModule();
  if (SHIBYTE(v63) < 0)
    operator delete(v62[0]);
  if (v66 < 0)
    operator delete(__p);
  if (v70 < 0)
    operator delete(v68);
  v58 = sub_22F25827C((uint64_t)(v61 + 280), &v75);
  sub_22E4911C0(v58 + 1, Module);
  if (SHIBYTE(v78) < 0)
    operator delete((void *)__dst);
  if (v81 != v83)
    free(v81);
  return Module;
}

void sub_22E4962E8(_QWORD *a1, _QWORD *a2, void *a3, size_t a4)
{
  char v6;
  void **v7;
  size_t v8;
  uint64_t v9;
  llvm::MDString *v10;
  const void *String;
  size_t v12;
  size_t v13;
  size_t v14;
  const void *separator;
  size_t v16;
  size_t v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void *__p[2];
  char v23;

  sub_22E490E28(__p, a2, a3, a4);
  v6 = v23;
  if (v23 >= 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if (v23 >= 0)
    v8 = v23 & 0x7F;
  else
    v8 = (size_t)__p[1];
  v9 = a2[58];
  if ((*(_BYTE *)v9 == 15 || (v9 = *(_QWORD *)(v9 - 8 * *(unsigned int *)(v9 + 8))) != 0)
    && (v10 = *(llvm::MDString **)(v9 - 8 * *(unsigned int *)(v9 + 8) + 8)) != 0)
  {
    String = (const void *)llvm::MDString::getString(v10);
    if (v8 < v12)
      goto LABEL_25;
    v13 = v12;
    if (v12)
    {
      if (memcmp(v7, String, v12))
        goto LABEL_25;
    }
  }
  else
  {
    v13 = 0;
  }
  if (v8 >= v13)
    v14 = v13;
  else
    v14 = v8;
  v7 = (void **)((char *)v7 + v14);
  v8 -= v14;
  separator = (const void *)llvm::sys::path::get_separator(0);
  if (v8 >= v16)
  {
    v17 = v16;
    if (!v16 || !memcmp(v7, separator, v16))
    {
      if (v8 >= v17)
        v18 = v17;
      else
        v18 = v8;
      v7 = (void **)((char *)v7 + v18);
      v8 -= v18;
    }
  }
LABEL_25:
  if (v7)
  {
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v8 >= 0x17)
    {
      v19 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v19 = v8 | 7;
      v20 = v19 + 1;
      v21 = operator new(v19 + 1);
      a1[1] = v8;
      a1[2] = v20 | 0x8000000000000000;
      *a1 = v21;
      a1 = v21;
    }
    else
    {
      *((_BYTE *)a1 + 23) = v8;
      if (!v8)
      {
LABEL_36:
        *((_BYTE *)a1 + v8) = 0;
        if ((v23 & 0x80) == 0)
          return;
        goto LABEL_37;
      }
    }
    memmove(a1, v7, v8);
    goto LABEL_36;
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if ((v6 & 0x80) == 0)
    return;
LABEL_37:
  operator delete(__p[0]);
}

uint64_t sub_22E496488(unint64_t a1)
{
  uint64_t result;

  for (result = sub_22F257E10(a1); result; result = *(_QWORD *)(result + 128))
  {
    if ((*(_BYTE *)(result + 28) & 0x80) == 0
      && (*(_QWORD *)(result + 40) < 8uLL || (*(_QWORD *)(result + 40) & 7) != 0))
    {
      break;
    }
  }
  return result;
}

uint64_t sub_22E4964C8(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _BYTE v12[12];

  v3 = *(uint64_t **)a1;
  v4 = *(_DWORD *)(a2 + 24);
  v5 = sub_22E48F44C(*(uint64_t **)a1, v4);
  if (v4)
    sub_22F1E2F68(*(_QWORD *)(*(_QWORD *)(*v3 + 144) + 1992), v4, *((unsigned __int8 *)v3 + 13), (uint64_t)v12);
  v6 = *(_QWORD *)(a2 + 112);
  if (!sub_22E496684(a2, *(_QWORD *)(a2 + 104)))
    sub_22E490988((uint64_t)v3, *(_QWORD *)(a2 + 80));
  if ((sub_22E496724(a2, v6) & 1) == 0)
    sub_22E490988((uint64_t)v3, *(_QWORD *)(a2 + 88));
  sub_22F254858(v3, *(_QWORD *)(a2 + 56), v5);
  result = llvm::DIBuilder::createObjCProperty();
  v8 = result;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_DWORD *)(v9 + 8);
  if (v10 >= *(_DWORD *)(v9 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = *(_DWORD *)(v9 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v9 + 8 * v10) = v8;
  ++*(_DWORD *)(v9 + 8);
  return result;
}

BOOL sub_22E496684(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int *v5;
  const void *v6;
  size_t v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int *v10;
  const void *v11;
  unsigned int v12;

  if (!a2)
    return 1;
  v2 = *(_QWORD *)(a1 + 40) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_QWORD *)(a1 + 40) & 7) != 0 || v2 == 0)
  {
    v7 = 0;
    v6 = &unk_22F566939;
  }
  else
  {
    v5 = *(unsigned int **)(v2 + 16);
    v8 = *v5;
    v6 = v5 + 4;
    v7 = v8;
  }
  v9 = *(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFF8;
  if ((~*(_DWORD *)(a2 + 40) & 7) == 0)
    v9 = *(_QWORD *)(v9 + 16);
  if (v9)
  {
    v10 = *(unsigned int **)(v9 + 16);
    v12 = *v10;
    v11 = v10 + 4;
    v9 = v12;
  }
  else
  {
    v11 = 0;
  }
  if (v7 != v9)
    return 0;
  if (v7)
    return memcmp(v6, v11, v7) == 0;
  return 1;
}

uint64_t sub_22E496724(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  unint64_t v5;
  _DWORD *v7;
  _BYTE *v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  _QWORD *v12;
  unsigned int *v13;
  const void *v14;
  unsigned int v15;
  _QWORD *v16;
  size_t v17;
  _QWORD v18[9];

  v18[8] = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 1;
  v5 = *(_QWORD *)(a1 + 40) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_QWORD *)(a1 + 40) & 7) != 0 || v5 == 0)
  {
    v9 = 0;
    v8 = &unk_22F566939;
  }
  else
  {
    v7 = *(_DWORD **)(v5 + 16);
    v10 = *v7;
    v8 = v7 + 4;
    v9 = v10;
  }
  sub_22F41F9AC(v8, v9, (uint64_t)&v16);
  v11 = *(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFF8;
  if ((~*(_DWORD *)(a2 + 40) & 7) == 0)
    v11 = *(_QWORD *)(v11 + 16);
  v12 = v16;
  if (v11)
  {
    v13 = *(unsigned int **)(v11 + 16);
    v15 = *v13;
    v14 = v13 + 4;
    v11 = v15;
  }
  else
  {
    v14 = 0;
  }
  if (v17 == v11)
  {
    if (v17)
      v2 = memcmp(v16, v14, v17) == 0;
    else
      v2 = 1;
  }
  else
  {
    v2 = 0;
  }
  if (v12 != v18)
    free(v12);
  return v2;
}

unint64_t sub_22E496830(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;

  v1 = *(_QWORD *)(a1 + 128);
  if (v1 < 8)
    return 0;
  v2 = (uint64_t *)(v1 & 0xFFFFFFFFFFFFFFF8);
  if ((v1 & 4) != 0)
    v3 = 0;
  else
    v3 = v1 & 0xFFFFFFFFFFFFFFF8;
  if (v3)
    return v3 & 0xFFFFFFFFFFFFFFF0;
  v5 = *v2;
  v6 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v6 + 8) & 0xF) != 0)
    v6 = (unint64_t)sub_22F10D2BC(v5);
  return v6 & 0xFFFFFFFFFFFFFFF0;
}

uint64_t sub_22E496890(unsigned __int8 *a1, uint64_t a2, uint64_t a3, int a4)
{
  _BYTE v5[12];

  if (a4)
    sub_22F1E2F68(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 1992), a4, a1[13], (uint64_t)v5);
  return llvm::DIBuilder::createMacro();
}

uint64_t sub_22E496930(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BYTE v7[12];

  sub_22E48F44C((uint64_t *)a1, a4);
  if (a3)
    sub_22F1E2F68(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 1992), a3, *(unsigned __int8 *)(a1 + 13), (uint64_t)v7);
  return llvm::DIBuilder::createTempMacroFile();
}

uint64_t sub_22E4969AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a2 & 0xF) == 0)
    __asm { BR              X11 }
  return sub_22F254BA8(a1, a2, a3);
}

uint64_t sub_22E499368(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  llvm::MDNode *ReplaceableCompositeType;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  llvm::MDNode *v21;
  uint64_t v22[3];
  char v23;
  void *v24[3];
  _QWORD v25[34];

  v25[32] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22F114198(*(_QWORD *)(a2 + 24));
  sub_22E490A2C(a1, v4);
  v5 = *(_DWORD *)(v4 + 24);
  if (v5)
  {
    v6 = sub_22E48F44C((uint64_t *)a1, *(_DWORD *)(v4 + 24));
    sub_22F1E2F68(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 1992), v5, *(unsigned __int8 *)(a1 + 13), (uint64_t)v24);
  }
  else
  {
    v6 = 0;
  }
  sub_22E48FAEC(a1, v4);
  v7 = sub_22EF6477C(*(_QWORD *)(*(_QWORD *)a1 + 144), v4);
  v8 = sub_22E491A8C(a1, v7);
  if (!v8 || (ReplaceableCompositeType = (llvm::MDNode *)v8, (*(_BYTE *)(v8 + 28) & 4) != 0) && sub_22EFC3500(v4))
  {
    v10 = sub_22EFC3500(v4);
    if (v10 && (v11 = v10, (*(_BYTE *)(v10 + 74) & 1) != 0))
    {
      sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)a1 + 144), a2);
      if (sub_22E49F7A8(v11))
        sub_22EFC8A80(v11);
      sub_22E491AEC((uint64_t)v24, a2, *(_QWORD *)a1, *(_QWORD *)(a1 + 464));
      if ((*(_DWORD *)(v4 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD)
      {
        (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 80))(*(_QWORD *)(*(_QWORD *)a1 + 224), v4);
        if ((sub_22EFD12A8(v4) & 1) != 0)
          sub_22E49F698(v4);
      }
      sub_22E491D18(a1, v11);
      ReplaceableCompositeType = (llvm::MDNode *)llvm::DIBuilder::createReplaceableCompositeType();
      v21 = ReplaceableCompositeType;
      if (((1 << llvm::DINode::getTag(ReplaceableCompositeType)) & 0x880004) != 0 || v24[1])
      {
        ReplaceableCompositeType = (llvm::MDNode *)llvm::MDNode::replaceWithDistinctImpl(ReplaceableCompositeType);
        v21 = ReplaceableCompositeType;
      }
      v22[0] = sub_22F114198(*(_QWORD *)(a2 + 24));
      v13 = sub_22F25827C(a1 + 2360, v22);
      sub_22E4911C0(v13 + 1, (uint64_t)ReplaceableCompositeType);
      v22[0] = a2 & 0xFFFFFFFFFFFFFFF0;
      v14 = sub_22F258670((uint64_t *)(a1 + 1296), v22);
      sub_22E4911C0(v14 + 1, (uint64_t)ReplaceableCompositeType);
      if ((*(_DWORD *)(v4 + 28) & 0x7E) == 0x24)
      {
        v15 = *(_QWORD *)(v4 + 152);
        v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF8);
        if ((v15 & 4) != 0 && v16)
        {
          do
          {
            v17 = *(_QWORD *)(*v16 + 152);
            v16 = (_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF8);
          }
          while ((v17 & 4) != 0 && v16);
        }
        v18 = *(_QWORD *)(v4 + 168);
        v19 = *(_QWORD *)v18;
        v20 = *(unsigned int *)(v18 + 8);
        v22[0] = v16[7];
        v22[1] = v19;
        v22[2] = v20;
        v23 = 1;
        sub_22E493850((uint64_t *)a1, (uint64_t)v22, v6);
        llvm::DIBuilder::replaceArrays();
        ReplaceableCompositeType = v21;
      }
      if (v24[0] != v25)
        free(v24[0]);
    }
    else
    {
      return sub_22E49177C(a1, a2);
    }
  }
  return (uint64_t)ReplaceableCompositeType;
}

uint64_t sub_22E499774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8, _DWORD *a9)
{
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  BOOL v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned __int8 *v29;
  _BYTE v30[32];

  v17 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF8) + 32))(a2 & 0xFFFFFFFFFFFFFFF8) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)a5 = sub_22E48FF64(a1, v17);
  *(_QWORD *)(a5 + 8) = v18;
  result = *(_QWORD *)(*(_QWORD *)(v17 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (result)
    v20 = *(_BYTE *)(result + 16) == 26;
  else
    v20 = 0;
  if (v20
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
    && (result = sub_22F10CF48(result)) != 0)
  {
    result = (uint64_t)sub_22E624994(*(_QWORD *)a1, a2, a3);
    *(_QWORD *)a6 = result;
    *(_QWORD *)(a6 + 8) = v21;
  }
  if ((*(_BYTE *)(v17 + 82) & 0x30) != 0)
    *a9 |= 0x100u;
  v22 = *(_QWORD *)(a6 + 8);
  if (v22 == *(_QWORD *)(a5 + 8)
    && (!v22 || (result = memcmp(*(const void **)a6, *(const void **)a5, v22), !(_DWORD)result))
    || (v23 = *(_QWORD *)a1, v24 = *(_QWORD *)(*(_QWORD *)a1 + 184), (*(_BYTE *)(v24 + 5) & 0x18) == 0)
    && (*(_DWORD *)(v24 + 92) & 0x18) == 0
    && *(int *)(a1 + 8) <= 3)
  {
    *(_QWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
    v23 = *(_QWORD *)a1;
    v24 = *(_QWORD *)(*(_QWORD *)a1 + 184);
  }
  if ((*(_QWORD *)(v24 + 96) & 0x1800000000000000) != 0
    || *(_DWORD *)(a1 + 8) == 3 && (*(_BYTE *)(v24 + 80) & 0x20) != 0)
  {
    v25 = *(_QWORD *)(v17 + 16);
    v26 = v25 & 0xFFFFFFFFFFFFFFF8;
    v27 = v25 & 0xFFFFFFFFFFFFFFF8;
    if ((v25 & 4) != 0)
      v27 = *(_QWORD *)v26;
    if (v27 && (*(_WORD *)(v27 + 8) & 0x7F) == 0x10)
    {
      result = sub_22E48FE84(a1, v27 - 48);
    }
    else
    {
      if ((v25 & 4) != 0)
        v26 = *(_QWORD *)v26;
      if (!v26 || (*(_WORD *)(v26 + 8) & 0x7Eu) - 34 > 3)
        goto LABEL_33;
      v28 = v26 - 64;
      v29 = (unsigned __int8 *)sub_22E48FBD8(a1, v26 - 64);
      if (!v29)
        v29 = *(unsigned __int8 **)(a1 + 464);
      result = sub_22E48FD44(a1, v28, v29);
    }
    *a7 = result;
    v23 = *(_QWORD *)a1;
  }
LABEL_33:
  if ((*(_QWORD *)(*(_QWORD *)(v23 + 184) + 96) & 0x1800000000000000) != 0)
  {
    if (sub_22EFC0BA0(v17))
      *a9 |= 0x100000u;
    sub_22F255A38((uint64_t)v30, v17);
    result = sub_22E493850((uint64_t *)a1, (uint64_t)v30, a4);
    *a8 = result;
  }
  return result;
}

uint64_t sub_22E4999B8(uint64_t a1, unint64_t a2, uint64_t *a3, _DWORD *a4, unint64_t *a5, const void **a6, uint64_t a7, uint64_t *a8, uint64_t *a9)
{
  int v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  void *v23;
  unint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _WORD *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t result;
  uint64_t v41;
  unsigned int v42;
  int v43;

  *a3 = sub_22E48F44C((uint64_t *)a1, *(_DWORD *)(a2 + 24));
  v17 = *(_DWORD *)(a2 + 24);
  if (v17)
  {
    sub_22F1E2F68(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 1992), v17, *(unsigned __int8 *)(a1 + 13), (uint64_t)&v41);
    v18 = v43;
  }
  else
  {
    v18 = 0;
  }
  *a4 = v18;
  sub_22E48F304(a1, *(_DWORD *)(a2 + 24));
  v19 = *(_QWORD *)(a2 + 48);
  *a5 = v19;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 4)
  {
    v42 = 32;
    v41 = 1;
    v20 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)a1 + 144), v19);
    *a5 = sub_22EF5FE30(*(_QWORD *)(*(_QWORD *)a1 + 144), *(_QWORD *)(v20 + 32), (const llvm::APInt *)&v41, 0, 0, 0);
    if (v42 >= 0x41)
    {
      if (v41)
        MEMORY[0x2348A0E84](v41, 0x1000C8000313F17);
    }
  }
  v21 = 0;
  v22 = *(_QWORD *)(a2 + 40);
  v23 = &unk_22F566939;
  if ((v22 & 7) == 0)
  {
    v24 = v22 & 0xFFFFFFFFFFFFFFF8;
    if (v24)
    {
      v25 = *(unsigned int **)(v24 + 16);
      v26 = *v25;
      v23 = v25 + 4;
      v21 = v26;
    }
  }
  *a6 = v23;
  a6[1] = (const void *)v21;
  v27 = *(_QWORD *)(a2 + 16);
  if ((v27 & 4) != 0)
  {
    v28 = *(_QWORD *)(v27 & 0xFFFFFFFFFFFFFFF8);
    if (!v28)
      goto LABEL_18;
  }
  else
  {
    if (v27 < 8)
      goto LABEL_18;
    v28 = v27 & 0xFFFFFFFFFFFFFFF8;
  }
  v29 = *(_WORD *)(v28 + 8);
  if ((v29 & 0x7Eu) - 52 >= 6 && (v29 & 0x7F) != 0x18)
  {
    *(_QWORD *)a7 = sub_22E624994(*(_QWORD *)a1, a2, 0);
    *(_QWORD *)(a7 + 8) = v30;
    v23 = (void *)*a6;
    v21 = (size_t)a6[1];
  }
LABEL_18:
  if (*(_QWORD *)(a7 + 8) == v21 && (!v21 || !memcmp(*(const void **)a7, v23, v21)))
  {
    *(_QWORD *)a7 = 0;
    *(_QWORD *)(a7 + 8) = 0;
  }
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 65 > 1)
    v31 = 0;
  else
    v31 = sub_22E494304((uint64_t *)a1, a2, *a3);
  *a8 = v31;
  v32 = *(_QWORD *)(a2 + 16);
  v33 = (_WORD *)(v32 & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x40)
  {
    if ((v32 & 4) == 0)
      goto LABEL_32;
    if ((*(_WORD *)(*(_QWORD *)v33 + 8) & 0x7Eu) - 34 < 4)
      v33 += 4;
    goto LABEL_31;
  }
  if ((v32 & 4) != 0)
LABEL_31:
    v33 = *(_WORD **)v33;
LABEL_32:
  if ((v33[4] & 0x7Eu) - 34 <= 3)
  {
    v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 1960) + 80);
    v35 = sub_22E3CD31C((uint64_t *)(v34 + 72), v34);
    if (v35)
      v33 = (_WORD *)(v35 + 40);
    else
      v33 = 0;
  }
  v36 = sub_22E48FBD8(a1, a2);
  v37 = (unsigned __int8 *)v36;
  v38 = v33[4] & 0x7F;
  v39 = 0x7FFFFFFFFFFFFFECLL;
  if (v38 > 0x46)
  {
    switch(v38)
    {
      case 'S':
        goto LABEL_53;
      case 'G':
        v39 = 0x7FFFFFFFFFFFFFE4;
        if (v36)
          goto LABEL_55;
        goto LABEL_54;
      case 'Q':
        goto LABEL_53;
    }
  }
  else
  {
    if (v38 <= 0x18)
    {
      if (v38 == 16)
        goto LABEL_39;
      if (((1 << v38) & 0x1066) != 0)
        goto LABEL_53;
      if (v38 == 24)
        goto LABEL_39;
    }
    if (v38 == 70)
      goto LABEL_50;
  }
  if (v38 - 52 >= 6)
  {
    if (v38 - 33 < 5)
    {
LABEL_50:
      v39 = 0x7FFFFFFFFFFFFFE0;
      if (!v36)
        goto LABEL_54;
      goto LABEL_55;
    }
LABEL_39:
    v39 = 0x7FFFFFFFFFFFFFE8;
    if (!v36)
      goto LABEL_54;
    goto LABEL_55;
  }
  v39 = 0x7FFFFFFFFFFFFFDCLL;
LABEL_53:
  if (!v36)
LABEL_54:
    v37 = *(unsigned __int8 **)(a1 + 464);
LABEL_55:
  result = sub_22E48FD44(a1, (unint64_t)&v33[v39], v37);
  *a9 = result;
  return result;
}

uint64_t sub_22E499D0C(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t *v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t UnspecifiedParameter;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  _QWORD v47[17];

  v47[16] = *MEMORY[0x24BDAC8D0];
  if (!a2 || *((int *)a1 + 2) <= 3 && (*(_BYTE *)(*(_QWORD *)(*a1 + 184) + 80) & 0x20) == 0)
  {
    llvm::DIBuilder::getOrCreateTypeArray();
    return llvm::DIBuilder::createSubroutineType();
  }
  if ((*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFC)
    return sub_22F2557F4(a1, (_QWORD *)a2, a4, 0);
  v9 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  if (v10)
    v11 = *(unsigned __int8 *)(v10 + 16) - 27 > 0xFFFFFFFD;
  else
    v11 = 0;
  if (v11
    || *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 25 <= 1
    && (v10 = sub_22F10CF48(v10)) != 0)
  {
    v12 = (*(_DWORD *)(v10 + 16) >> 19) & 0x1F;
  }
  else
  {
    v12 = 0;
  }
  v13 = *(_DWORD *)(a2 + 28);
  if ((v13 & 0x7F) == 0x18)
  {
    v14 = *(_QWORD *)(a2 + 80);
    v15 = *(_QWORD *)(*a1 + 144);
    v16 = sub_22F36E044(v15);
    v17 = *(_QWORD *)(v16 + 48);
    if (v17)
      v18 = v17 & 0xFFFFFFFFFFFFFFF0;
    else
      v18 = sub_22EF6462C(v15, v16);
    if (v14 == v18)
    {
      v25 = *(_QWORD *)(*a1 + 144);
      v26 = sub_22EFDC9F0(a2);
      v14 = sub_22EF5B848(v25, *(_QWORD *)(v26 + 104) & 0xFFFFFFFFFFFFFFF0, 0);
    }
    v47[0] = sub_22F254858(a1, v14, a4);
    v45 = 1;
    v27 = *(_QWORD *)(a2 + 120);
    if (v27)
    {
      v29 = (unint64_t *)(v27 + 48);
    }
    else
    {
      v28 = *v9;
      if (!*v9 || *(_BYTE *)(v28 + 16) != 26 || (*(_DWORD *)(v28 + 20) & 0x3FFF80) == 0)
      {
LABEL_41:
        v31 = *(_QWORD *)(*a1 + 144);
        v32 = sub_22F36E228(v31);
        v33 = *(_QWORD *)(v32 + 48);
        if (v33)
          v34 = v33 & 0xFFFFFFFFFFFFFFF0;
        else
          v34 = sub_22EF6462C(v31, v32);
        sub_22F254858(a1, v34, a4);
        v47[v45] = llvm::DIBuilder::createArtificialType();
        v46 = v45 + 1;
        v35 = *(unsigned int *)(a2 + 104);
        if ((_DWORD)v35)
        {
          v36 = *(_QWORD *)(a2 + 96);
          v37 = 8 * v35;
          do
          {
            v38 = sub_22F254858(a1, *(_QWORD *)(*(_QWORD *)v36 + 48), a4);
            v39 = v46;
            if (v46 >= 0x10uLL)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v39 = v46;
            }
            v47[v39] = v38;
            ++v46;
            v36 += 8;
            v37 -= 8;
          }
          while (v37);
        }
        if ((*(_BYTE *)(a2 + 58) & 4) != 0)
        {
          UnspecifiedParameter = llvm::DIBuilder::createUnspecifiedParameter((llvm::DIBuilder *)(a1 + 2));
          v41 = v46;
          if (v46 >= 0x10)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v41 = v46;
          }
          v47[v41] = UnspecifiedParameter;
        }
        goto LABEL_53;
      }
      v29 = (unint64_t *)(v28 + 40);
    }
    v30 = *v29;
    if (*v29 >= 0x10)
    {
      sub_22F254858(a1, *v29, a4);
      sub_22E491A8C((uint64_t)a1, v30);
      v47[1] = llvm::DIBuilder::createObjectPointerType();
      v45 = 2;
    }
    goto LABEL_41;
  }
  if ((v13 & 0x7Eu) - 58 < 0xFFFFFFFA || !sub_22EFBF68C(a2))
    return sub_22F254858(a1, a3, a4);
  v19 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (!v19 || *(unsigned __int8 *)(v19 + 16) - 27 <= 0xFFFFFFFD)
    v19 = sub_22F10CF48(v19);
  v47[0] = sub_22F254858(a1, *(_QWORD *)(v19 + 24), a4);
  v44 = 1;
  v20 = *v9;
  if (*v9 && *(_BYTE *)(v20 + 16) == 26 && (unsigned __int16)(*(_QWORD *)(v20 + 16) >> 38))
  {
    v21 = (unint64_t *)(v20 + 40);
    v22 = 8 * (unsigned __int16)(*(_QWORD *)(v20 + 16) >> 38);
    do
    {
      v23 = sub_22F254858(a1, *v21, a4);
      v24 = v44;
      if (v44 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v24 = v44;
      }
      v47[v24] = v23;
      ++v44;
      ++v21;
      v22 -= 8;
    }
    while (v22);
  }
  v42 = llvm::DIBuilder::createUnspecifiedParameter((llvm::DIBuilder *)(a1 + 2));
  v43 = v44;
  if (v44 >= 0x10)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v43 = v44;
  }
  v47[v43] = v42;
LABEL_53:
  llvm::DIBuilder::getOrCreateTypeArray();
  sub_22E491F40(v12);
  return llvm::DIBuilder::createSubroutineType();
}

_BYTE *sub_22E49A37C(uint64_t a1, uint64_t *a2)
{
  _BYTE *result;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!a2 || *(int *)(a1 + 8) < 4 || (*((_DWORD *)a2 + 7) & 0x7Eu) - 58 < 0xFFFFFFFA)
    return 0;
  sub_22E48FAEC(a1, (unint64_t)a2);
  v5 = (*(uint64_t (**)(uint64_t *))(*a2 + 32))(a2);
  v18 = 0;
  v6 = sub_22F24C318(*(_QWORD *)(a1 + 2544), *(_DWORD *)(a1 + 2560), v5, &v18);
  v7 = *(_QWORD *)(a1 + 2544);
  v8 = *(unsigned int *)(a1 + 2560);
  if (v6)
    v9 = v18;
  else
    v9 = v7 + 16 * v8;
  if (v9 == v7 + 16 * v8)
  {
    v10 = (*(uint64_t (**)(uint64_t *))(*a2 + 32))(a2);
    if (v10)
      v11 = (*(_DWORD *)(v10 + 28) & 0x7Eu) - 58 > 0xFFFFFFFB;
    else
      v11 = 0;
    if (v11)
    {
      v16 = v10;
      v17 = sub_22E48F44C((uint64_t *)a1, *(_DWORD *)(v10 + 24));
      return (_BYTE *)sub_22E492DB4(a1, v16, v17);
    }
    v7 = *(_QWORD *)(a1 + 2544);
    v8 = *(unsigned int *)(a1 + 2560);
  }
  if (v9 == v7 + 16 * v8 || (result = *(_BYTE **)(v9 + 8)) == 0 || *result != 17 || (result[44] & 8) != 0)
  {
    v12 = 0;
    v13 = a2;
    do
    {
      v14 = (*(uint64_t (**)(uint64_t *))(*v13 + 32))(v13);
      v18 = 0;
      if (sub_22F24C318(*(_QWORD *)(a1 + 2544), *(_DWORD *)(a1 + 2560), v14, &v18))
        v15 = v18 == *(_QWORD *)(a1 + 2544) + 16 * *(unsigned int *)(a1 + 2560);
      else
        v15 = 1;
      if (!v15)
      {
        result = *(_BYTE **)(v18 + 8);
        if (result)
        {
          if (*result == 17 && (result[44] & 8) == 0)
            break;
        }
      }
      if ((v13[13] & 3) != 0)
      {
        if (v12)
          return 0;
        v12 = 1;
      }
      v13 = (uint64_t *)sub_22E3CD31C(v13 + 13, (uint64_t)v13);
      result = 0;
      if (v13 == a2)
        break;
    }
    while (v13);
  }
  return result;
}

uint64_t sub_22E49A564(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t TempGlobalVariableFwdDecl;
  uint64_t v9;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  const void *v22[2];
  unint64_t v23;
  unsigned __int8 *v24;
  int v25;

  v2 = a2;
  if (a2 && (*(_DWORD *)(a2 + 28) & 0x7Fu) - 43 >= 0xFFFFFFF6)
  {
    v4 = *(_QWORD *)(a2 + 48);
    if (v4)
      v5 = v4 & 0xFFFFFFFFFFFFFFF0;
    else
      v5 = sub_22EF6462C(*(_QWORD *)(*(_QWORD *)a1 + 144), a2);
    v9 = sub_22E48F44C((uint64_t *)a1, *(_DWORD *)(v2 + 24));
    return sub_22F254858((uint64_t *)a1, v5, v9);
  }
  v6 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2);
  v24 = 0;
  if (sub_22F24C318(*(_QWORD *)(a1 + 2568), *(_DWORD *)(a1 + 2584), v6, &v24))
    v7 = v24 == (unsigned __int8 *)(*(_QWORD *)(a1 + 2568) + 16 * *(unsigned int *)(a1 + 2584));
  else
    v7 = 1;
  if (!v7)
  {
    v24 = (unsigned __int8 *)*((_QWORD *)v24 + 1);
    if (v24)
    {
      llvm::MetadataTracking::track();
      if (v24)
      {
        TempGlobalVariableFwdDecl = (uint64_t)v24;
        if (*v24 == 7)
          TempGlobalVariableFwdDecl = *(_QWORD *)&v24[-8 * *((unsigned int *)v24 + 2)];
LABEL_13:
        llvm::MetadataTracking::untrack();
        return TempGlobalVariableFwdDecl;
      }
    }
    return 0;
  }
  v11 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v2 + 32))(v2);
  v24 = 0;
  if (sub_22F24C318(*(_QWORD *)(a1 + 2592), *(_DWORD *)(a1 + 2608), v11, &v24))
    v12 = v24 == (unsigned __int8 *)(*(_QWORD *)(a1 + 2592) + 16 * *(unsigned int *)(a1 + 2608));
  else
    v12 = 1;
  if (!v12)
  {
    v24 = (unsigned __int8 *)*((_QWORD *)v24 + 1);
    if (v24)
    {
      llvm::MetadataTracking::track();
      if (v24)
      {
        v16 = *v24;
        TempGlobalVariableFwdDecl = (uint64_t)v24;
        if (v16 - 8 >= 0x15)
        {
          if (v16 > 0x22 || (TempGlobalVariableFwdDecl = (uint64_t)v24, ((1 << v16) & 0x680000000) == 0))
            TempGlobalVariableFwdDecl = 0;
        }
        goto LABEL_13;
      }
    }
    return 0;
  }
  v13 = *(_DWORD *)(v2 + 28);
  if ((v13 & 0x7Eu) - 58 < 0xFFFFFFFA)
  {
    if ((v13 & 0x7Fu) - 67 >= 0xFFFFFFF9)
    {
      v22[1] = 0;
      v23 = 0;
      v21[1] = 0;
      v22[0] = 0;
      v21[0] = 0;
      v14 = *(_DWORD *)(v2 + 24);
      v19 = sub_22E48F44C((uint64_t *)a1, v14);
      v20 = v19;
      if (v14)
      {
        sub_22F1E2F68(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 1992), v14, *(unsigned __int8 *)(a1 + 13), (uint64_t)&v24);
        v15 = v25;
      }
      else
      {
        v15 = 0;
      }
      v18 = v15;
      v24 = 0;
      sub_22E4999B8(a1, v2, &v20, &v18, &v23, v22, (uint64_t)v21, (uint64_t *)&v24, &v19);
      if (sub_22E49F7A8(v2))
        sub_22EFC8A80(v2);
      sub_22F254858((uint64_t *)a1, v23, v20);
      sub_22EFB948C(v2);
      TempGlobalVariableFwdDecl = llvm::DIBuilder::createTempGlobalVariableFwdDecl();
      v17 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v2 + 32))(v2);
      sub_22F254E40((uint64_t *)(a1 + 2312), v17, TempGlobalVariableFwdDecl);
      return TempGlobalVariableFwdDecl;
    }
    return 0;
  }
  if (sub_22E462B18(v2))
    v2 = v2 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(v2) + 96) & 0x80) == 0);
  return sub_22F2564E0(a1, v2, 0, 0);
}

uint64_t sub_22E49A914(uint64_t result)
{
  if (!result || *(unsigned __int8 *)(result + 16) - 27 <= 0xFFFFFFFD)
  {
    if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 25 <= 1)
      return sub_22F10CF48(result);
    else
      return 0;
  }
  return result;
}

_QWORD *sub_22E49A954(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, unint64_t a6, llvm::Value *a7, int a8)
{
  llvm::Value *v8;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  _DWORD *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  int v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  void *v32;
  size_t v33;
  size_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  _BYTE *v38;
  int v39;
  uint64_t Name;
  size_t v42;
  int v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t Function;
  _QWORD *v59;
  _BOOL4 v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  _QWORD *v66;
  unint64_t v67;
  unint64_t v68;
  void *v69;
  void *v70;
  size_t v71;
  _QWORD *v72;
  uint64_t v73;
  size_t v74;
  _QWORD *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  unint64_t v81;
  void *v82;
  unint64_t *v83;
  unint64_t v84;
  void *v85;
  _QWORD *v86;
  _QWORD *v87;
  unint64_t *v88;
  char *v89;
  char **v90;
  unint64_t v91;
  size_t v92;
  char *v93;
  const char *v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  char *v99;
  const void *v100;
  void *v101;
  char *v102;
  unint64_t v103;
  void *__src;
  unint64_t v105;
  uint64_t *v106;
  size_t __n;
  _QWORD *v109;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  _DWORD *v117;
  __int128 v118;
  __int128 v119;
  _QWORD v120[2];
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  char *v124;
  uint64_t v125;
  void *v126;
  __int128 v127;
  _BYTE v128[40];
  uint64_t *v129;
  _QWORD *v130;
  __int128 v131;
  _QWORD v132[19];

  v8 = a7;
  v132[16] = *MEMORY[0x24BDAC8D0];
  v119 = 0uLL;
  v118 = 0uLL;
  v13 = (*(_QWORD *)(a1 + 2344) - *(_QWORD *)(a1 + 2336)) >> 3;
  v14 = *(char **)(a1 + 2392);
  v15 = *(_QWORD *)(a1 + 2400);
  if ((unint64_t)v14 >= v15)
  {
    v17 = *(char **)(a1 + 2384);
    v18 = (v14 - v17) >> 2;
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 62)
      goto LABEL_154;
    v21 = v15 - (_QWORD)v17;
    if (v21 >> 1 > v19)
      v19 = v21 >> 1;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
      v22 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v22 = v19;
    if (v22)
    {
      if (v22 >> 62)
        goto LABEL_155;
      v23 = (char *)operator new(4 * v22);
    }
    else
    {
      v23 = 0;
    }
    v24 = &v23[4 * v18];
    v25 = &v23[4 * v22];
    *(_DWORD *)v24 = v13;
    v16 = v24 + 4;
    v8 = a7;
    while (v14 != v17)
    {
      v26 = *((_DWORD *)v14 - 1);
      v14 -= 4;
      *((_DWORD *)v24 - 1) = v26;
      v24 -= 4;
    }
    *(_QWORD *)(a1 + 2384) = v24;
    *(_QWORD *)(a1 + 2392) = v16;
    *(_QWORD *)(a1 + 2400) = v25;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *(_DWORD *)v14 = v13;
    v16 = v14 + 4;
  }
  *(_QWORD *)(a1 + 2392) = v16;
  v27 = (_DWORD *)(a2 & 0xFFFFFFFFFFFFFFF8);
  v117 = (_DWORD *)(a2 & 0xFFFFFFFFFFFFFFF8);
  v116 = 0;
  v28 = sub_22E48F44C((uint64_t *)a1, a4);
  v114 = 0;
  v115 = v28;
  v112 = a2 & 0xFFFFFFFFFFFFFFF8;
  v113 = v28;
  if ((a2 & 0xFFFFFFFFFFFFFFF8) == 0)
  {
    *(_QWORD *)&v118 = llvm::Value::getName(v8);
    *((_QWORD *)&v118 + 1) = v29;
    goto LABEL_57;
  }
  v30 = v27[7];
  if ((v30 & 0x7Eu) - 58 >= 0xFFFFFFFA)
  {
    v35 = v28;
    v36 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v27 + 32))(a2 & 0xFFFFFFFFFFFFFFF8);
    v130 = 0;
    if (sub_22F24C318(*(_QWORD *)(a1 + 2544), *(_DWORD *)(a1 + 2560), v36, &v130))
      v37 = v130 == (_QWORD *)(*(_QWORD *)(a1 + 2544) + 16 * *(unsigned int *)(a1 + 2560));
    else
      v37 = 1;
    if (!v37)
    {
      v38 = (_BYTE *)v130[1];
      if (v38)
      {
        if (*v38 == 17 && (v38[44] & 8) != 0)
        {
          sub_22F254808((uint64_t *)(a1 + 2336), (uint64_t)v38);
          v72 = sub_22F25827C(a1 + 2360, (uint64_t *)&v117);
          return sub_22E4911C0(v72 + 1, (uint64_t)v38);
        }
      }
    }
    sub_22E499774(a1, a2, a3, v35, (uint64_t)&v119, (uint64_t)&v118, &v115, &v114, &v116);
    v34 = *((_QWORD *)&v119 + 1);
    if (*((_QWORD *)&v119 + 1))
      goto LABEL_40;
    goto LABEL_42;
  }
  v31 = v30 & 0x7F;
  if (v31 == 24)
  {
    v32 = sub_22E49045C(a1, a2 & 0xFFFFFFFFFFFFFFF8);
    v34 = v33;
    *(_QWORD *)&v119 = v32;
    *((_QWORD *)&v119 + 1) = v33;
    goto LABEL_39;
  }
  v39 = a2 & 7;
  if ((v31 - 60) > 6 || v39 == 0)
  {
    Name = llvm::Value::getName(v8);
    v34 = v42;
    *(_QWORD *)&v119 = Name;
    *((_QWORD *)&v119 + 1) = v42;
    if ((v27[7] & 0x7F) == 1)
      v118 = v119;
LABEL_39:
    v116 = 256;
    if (v34)
      goto LABEL_40;
    goto LABEL_42;
  }
  if (v39 == 3 || (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 184) + 76) & 0x2000000000) == 0)
  {
    v73 = llvm::Value::getName(v8);
    v34 = v74;
    goto LABEL_148;
  }
  v130 = v132;
  v131 = xmmword_22F44E310;
  sub_22F242C48((uint64_t)&v126, (uint64_t)&v130);
  v121 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 15104) & 0xFFFF65FFDFFFBFFFLL | 0x120020000000 | (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 184) + 76) >> 1) & 0x1000000000;
  v122 = a1 + 1416;
  sub_22EFBA008((_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF8), (llvm::raw_ostream *)&v126, (uint64_t)&v121);
  v67 = v129[1];
  v121 = *v129;
  v122 = v67;
  v68 = llvm::StringRef::rfind();
  if (v68 == -1)
  {
    v69 = 0;
    v70 = (void *)v121;
    v71 = v122;
LABEL_109:
    __n = v71;
    v82 = v70;
    v70 = v69;
    __src = v82;
    v71 = 0;
    goto LABEL_119;
  }
  v70 = (void *)v121;
  if (v122 >= v68)
    v71 = v68;
  else
    v71 = v122;
  v81 = v68 + 2;
  if (v122 < v68 + 2)
    v81 = v122;
  v69 = (void *)(v121 + v81);
  __n = v122 - v81;
  if (v122 == v81)
    goto LABEL_109;
  __src = (void *)(v121 + v81);
LABEL_119:
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v126);
  v126 = v128;
  v127 = xmmword_22F44E310;
  sub_22F242C48((uint64_t)&v121, (uint64_t)&v126);
  if (v71)
  {
    if (v71 <= v123 - (unint64_t)v124)
    {
      v90 = &v124;
      memcpy(v124, v70, v71);
      v89 = &v124[v71];
      v124 += v71;
      v88 = &v121;
    }
    else
    {
      v88 = (unint64_t *)llvm::raw_ostream::write((llvm::raw_ostream *)&v121, (const char *)v70);
      v90 = (char **)(v88 + 4);
      v89 = (char *)v88[4];
    }
    if (v88[3] - (unint64_t)v89 > 1)
    {
      *(_WORD *)v89 = 14906;
      *v90 += 2;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v88, "::");
    }
  }
  if (v39 == 2)
  {
    v95 = v124;
    v91 = a2 & 0xFFFFFFFFFFFFFFF8;
    v92 = __n;
    if (v123 - (unint64_t)v124 <= 0x1F)
    {
      goto LABEL_132;
    }
    *((_OWORD *)v95 + 1) = *(_OWORD *)"destructor for '";
    v102 = v124 + 32;
LABEL_153:
    v124 = v102;
    goto LABEL_133;
  }
  v37 = v39 == 1;
  v91 = a2 & 0xFFFFFFFFFFFFFFF8;
  v92 = __n;
  if (!v37)
    goto LABEL_133;
  v93 = v124;
  if (v123 - (unint64_t)v124 > 0x19)
  {
    *(_OWORD *)(v93 + 10) = *(_OWORD *)"nitializer for '";
    v102 = v124 + 26;
    goto LABEL_153;
  }
LABEL_132:
  llvm::raw_ostream::write((llvm::raw_ostream *)&v121, v94);
LABEL_133:
  if (v92 <= v123 - (unint64_t)v124)
  {
    if (v92)
    {
      memcpy(v124, __src, v92);
      v124 += v92;
    }
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v121, (const char *)__src);
  }
  if ((*(_DWORD *)(v91 + 28) & 0x7Fu) - 67 >= 0xFFFFFFFE)
  {
    v96 = *(_QWORD *)(v91 + 128);
    v97 = *(_QWORD *)v96;
    v98 = *(unsigned int *)(v96 + 8);
    v120[0] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 15104) & 0xFFFF65FFDFFFBFFFLL | 0x120020000000 | (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 184) + 76) >> 1) & 0x1000000000;
    v120[1] = a1 + 1416;
    sub_22F117B8C((llvm::raw_ostream *)&v121, v97, v98, (uint64_t)v120, 0, 0, 0);
  }
  v99 = v124;
  if ((unint64_t)v124 >= v123)
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v121);
  }
  else
  {
    ++v124;
    *v99 = 39;
  }
  v100 = *(const void **)v125;
  v34 = *(_QWORD *)(v125 + 8);
  v101 = (void *)sub_22E3CD3D4(a1 + 2408, v34, 0);
  v73 = (uint64_t)v101;
  if (v34)
    memcpy(v101, v100, v34);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v121);
  if (v126 != v128)
    free(v126);
  if (v130 != v132)
    free(v130);
LABEL_148:
  *(_QWORD *)&v119 = v73;
  *((_QWORD *)&v119 + 1) = v34;
  if (v34)
  {
LABEL_40:
    if (*(_BYTE *)v119 == 1)
    {
      *(_QWORD *)&v119 = v119 + 1;
      *((_QWORD *)&v119 + 1) = v34 - 1;
    }
  }
LABEL_42:
  v27 = v117;
  v43 = v117[7];
  if ((v43 & 0x200) == 0)
  {
    if ((v43 & 0x100) == 0)
      goto LABEL_51;
    sub_22EFC8E88((uint64_t)v117);
    v45 = *((unsigned int *)v44 + 2);
    if ((_DWORD)v45)
    {
      v47 = 8 * v45;
      v46 = *v44;
      while (*(_WORD *)(*(_QWORD *)v46 + 32) != 108)
      {
        v46 += 8;
        v47 -= 8;
        if (!v47)
          goto LABEL_51;
      }
    }
    else
    {
      v46 = *v44;
    }
    if (v46 == *v44 + 8 * v45)
    {
LABEL_51:
      if ((v27[7] & 0x7Fu) - 67 < 0xFFFFFFF9 || (a2 & 7) == 0)
      {
        v49 = v116;
        goto LABEL_58;
      }
    }
  }
LABEL_57:
  v49 = v116 | 0x40;
  v116 |= 0x40u;
  *(_DWORD *)(a1 + 560) = 0;
LABEL_58:
  if (a8)
    v116 = v49 | 0x2000000;
  v50 = *(_QWORD *)a1;
  sub_22F256890((_DWORD *)a1);
  if (a4 || (a4 = *(_DWORD *)(a1 + 560)) != 0)
    sub_22F1E2F68(*(_QWORD *)(*(_QWORD *)(v50 + 144) + 1992), a4, *(unsigned __int8 *)(a1 + 13), (uint64_t)&v130);
  v106 = (uint64_t *)(a1 + 2336);
  if (a5)
    sub_22F1E2F68(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 1992), a5, *(unsigned __int8 *)(a1 + 13), (uint64_t)&v130);
  sub_22E499D0C((uint64_t *)a1, (uint64_t)v27, a6, v113);
  if (!v27)
    goto LABEL_77;
  if ((v27[7] & 0x7F) == 0x18)
  {
    if (*(int *)(a1 + 8) < 4
      || ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 184) + 76) >> 34) & 7uLL) <= 4 && !sub_22EFDBD9C((uint64_t)v27))
    {
      goto LABEL_76;
    }
    sub_22EFDBD9C((uint64_t)v27);
    v51 = *((_QWORD *)v27 + 2);
    v52 = v51 & 0xFFFFFFFFFFFFFFF8;
    if ((v51 & 4) != 0)
      v52 = *(_QWORD *)v52;
    if (v52 && (*(_WORD *)(v52 + 8) & 0x7F) == 0x16)
    {
      v53 = v52 - 48;
      v121 = v52 - 48;
LABEL_83:
      v126 = (void *)(*(_QWORD *)(v53 + 104) & 0xFFFFFFFFFFFFFFF0);
      v130 = 0;
      if (!sub_22F246C54((uint64_t *)(a1 + 1296), &v126, &v130)
        || v130 == (_QWORD *)(*(_QWORD *)(a1 + 1296) + 16 * *(unsigned int *)(a1 + 1312)))
      {
        goto LABEL_76;
      }
      sub_22E49045C(a1, (uint64_t)v27);
      Function = llvm::DIBuilder::createFunction();
      llvm::DIBuilder::finalizeSubprogram();
      v59 = sub_22F258DCC(a1 + 2216, (uint64_t *)&v121);
      v60 = sub_22EFDBD9C((uint64_t)v27);
      v61 = v59;
      v62 = 4;
      if (!v60)
        v62 = 0;
      v63 = v62 | Function & 0xFFFFFFFFFFFFFFFBLL;
      v65 = (unint64_t *)v59[2];
      v64 = v59[3];
      if ((unint64_t)v65 < v64)
      {
        *v65 = v63;
        v66 = v65 + 1;
LABEL_117:
        v61[2] = v66;
        goto LABEL_76;
      }
      v75 = (_QWORD *)v59[1];
      v76 = v65 - v75;
      v77 = v76 + 1;
      if (!((unint64_t)(v76 + 1) >> 61))
      {
        v78 = v64 - (_QWORD)v75;
        if (v78 >> 2 > v77)
          v77 = v78 >> 2;
        if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF8)
          v79 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v79 = v77;
        if (!v79)
        {
          v80 = 0;
LABEL_112:
          v83 = (unint64_t *)&v80[8 * v76];
          *v83 = v63;
          v66 = v83 + 1;
          while (v65 != v75)
          {
            v84 = *--v65;
            *--v83 = v84;
          }
          v61[1] = v83;
          v61[2] = v66;
          v61[3] = &v80[8 * v79];
          if (v75)
          {
            v85 = v75;
            v86 = v61;
            v87 = v66;
            operator delete(v85);
            v66 = v87;
            v61 = v86;
          }
          goto LABEL_117;
        }
        v105 = v63;
        v109 = v61;
        if (!(v79 >> 61))
        {
          v103 = v79;
          v80 = (char *)operator new(8 * v79);
          v79 = v103;
          v76 = v65 - v75;
          v61 = v109;
          v63 = v105;
          goto LABEL_112;
        }
LABEL_155:
        sub_22E3B3F8C();
      }
LABEL_154:
      abort();
    }
    v53 = sub_22EFDC9F0((uint64_t)v27);
    v121 = v53;
    if (v53)
      goto LABEL_83;
  }
  else
  {
    sub_22E49A37C(a1, (uint64_t *)v27);
  }
LABEL_76:
  sub_22E491D18(a1, (uint64_t)v27);
LABEL_77:
  v54 = llvm::DIBuilder::createFunction();
  llvm::Function::setSubprogram();
  if (!v112)
    return (_QWORD *)sub_22F254808(v106, v54);
  if ((v117[7] & 0x7Eu) - 52 <= 5)
  {
    v130 = (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v117 + 32))(v117);
    v56 = sub_22F25827C(a1 + 2568, (uint64_t *)&v130);
    sub_22E4911C0(v56 + 1, v54);
  }
  sub_22F254808(v106, v54);
  v57 = sub_22F25827C(a1 + 2360, (uint64_t *)&v117);
  return sub_22E4911C0(v57 + 1, v54);
}

llvm *sub_22E49B570(llvm *result, uint64_t a2, uint64_t a3, unsigned int a4, unint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  llvm *v18;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  _QWORD v24[2];
  _BYTE *v25;
  uint64_t v26;
  _QWORD v27[4];

  v25 = 0;
  v26 = 0;
  v24[0] = 0;
  v24[1] = 0;
  v23 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF8);
  if ((a2 & 0xFFFFFFFFFFFFFFF8) == 0)
    return result;
  v10 = (uint64_t)result;
  v27[0] = result;
  v27[1] = &v23;
  if (llvm::getTimeTraceProfilerInstance(result))
    llvm::timeTraceProfilerBegin();
  v22 = 0;
  v11 = a4;
  v12 = sub_22E48F44C((uint64_t *)v10, a4);
  v13 = v12;
  if (!a6)
    v12 = sub_22E48FAEC(v10, (unint64_t)v23);
  v20 = 0;
  v21 = v12;
  v14 = *((_DWORD *)v23 + 7);
  if ((v14 & 0x7Eu) - 52 > 5)
  {
    if ((v14 & 0x7F) == 0x18)
      v15 = v23;
    else
      v15 = 0;
    v25 = sub_22E49045C(v10, (uint64_t)v15);
    v22 = 256;
    if (!v16)
      goto LABEL_15;
  }
  else
  {
    sub_22E499774(v10, a2, a3, v13, (uint64_t)&v25, (uint64_t)v24, &v21, &v20, &v22);
    if (!v26)
      goto LABEL_15;
  }
  if (*v25 == 1)
    ++v25;
LABEL_15:
  v17 = v23;
  if ((*((_BYTE *)v23 + 29) & 2) != 0)
  {
    v22 |= 0x40u;
    if (!v11)
    {
      *(_DWORD *)(v10 + 560) = 0;
      goto LABEL_21;
    }
  }
  else if (!v11)
  {
    goto LABEL_21;
  }
  sub_22F1E2F68(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v10 + 144) + 1992), v11, *(unsigned __int8 *)(v10 + 13), (uint64_t)v27);
  v17 = v23;
LABEL_21:
  sub_22E491D18(v10, (uint64_t)v17);
  sub_22E499D0C((uint64_t *)v10, (uint64_t)v23, a5, v13);
  sub_22E49A37C(v10, v23);
  llvm::DIBuilder::createFunction();
  if (a6)
    llvm::Function::setSubprogram();
  v18 = (llvm *)llvm::DIBuilder::finalizeSubprogram();
  result = (llvm *)llvm::getTimeTraceProfilerInstance(v18);
  if (result)
    return (llvm *)llvm::timeTraceProfilerEnd(result);
  return result;
}

uint64_t sub_22E49B804(uint64_t result, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v4;
  llvm *v7;
  uint64_t v8;
  unint64_t v9;

  if (a2)
  {
    v4 = *(_QWORD *)(a2 - 32);
    if (v4)
    {
      if (!*(_BYTE *)(v4 + 16) && *(_QWORD *)(v4 + 24) == *(_QWORD *)(a2 + 72))
      {
        v7 = (llvm *)result;
        result = llvm::Function::getSubprogram(*(llvm::Function **)(a2 - 32));
        if (!result)
        {
          result = sub_22EFC01DC(a4, 0);
          if (!(_DWORD)result)
          {
            result = sub_22F2556D0(a4);
            if ((result & 1) == 0)
            {
              result = sub_22F256890(v7);
              if ((_DWORD)result)
              {
                result = sub_22EFB92BC(a4, *(_QWORD *)(*(_QWORD *)v7 + 152));
                if (!(_DWORD)result)
                {
                  v8 = *(_QWORD *)(a4 + 80);
                  if ((v8 & 0xE000) != 0x4000 && (v8 & 0x10000) == 0)
                  {
                    if (sub_22E462B18(a4))
                      v9 = a4 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(a4) + 96) & 0x80) == 0);
                    else
                      v9 = a4;
                    return (uint64_t)sub_22E49B570(v7, v9, 0, *(_DWORD *)(a4 + 24), a3, v4);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_22E49B904(uint64_t *a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t MemberType;
  unsigned int v36;
  uint64_t StructType;
  uint64_t v39;
  unsigned int v40;
  int v41;
  char v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  _QWORD v46[6];

  v46[5] = *MEMORY[0x24BDAC8D0];
  v44 = v46;
  v45 = 0x500000000;
  v6 = sub_22E48F44C(a1, *(_DWORD *)(a2 + 24));
  v7 = *(_QWORD *)(a2 + 48);
  v43 = 0;
  v8 = sub_22EF5B848(*(_QWORD *)(*a1 + 144), *(_QWORD *)(*(_QWORD *)(*a1 + 144) + 16392), 0);
  v9 = sub_22E491C48((uint64_t)a1, v6, v8, (uint64_t)"__isa", 5, &v43);
  v10 = v45;
  if (v45 >= HIDWORD(v45))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = v45;
  }
  *((_QWORD *)v44 + v10) = v9;
  LODWORD(v45) = v45 + 1;
  v11 = sub_22E491C48((uint64_t)a1, v6, v8, (uint64_t)"__forwarding", 12, &v43);
  v12 = v45;
  if (v45 >= HIDWORD(v45))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v12 = v45;
  }
  *((_QWORD *)v44 + v12) = v11;
  LODWORD(v45) = v45 + 1;
  v13 = *(_QWORD *)(*(_QWORD *)(*a1 + 144) + 16480);
  v14 = sub_22E491C48((uint64_t)a1, v6, v13, (uint64_t)"__flags", 7, &v43);
  v15 = v45;
  if (v45 >= HIDWORD(v45))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v15 = v45;
  }
  *((_QWORD *)v44 + v15) = v14;
  LODWORD(v45) = v45 + 1;
  v16 = sub_22E491C48((uint64_t)a1, v6, v13, (uint64_t)"__size", 6, &v43);
  v17 = v45;
  if (v45 >= HIDWORD(v45))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v17 = v45;
  }
  *((_QWORD *)v44 + v17) = v16;
  LODWORD(v45) = v45 + 1;
  if (sub_22EF6AB44(*(_QWORD *)(*a1 + 144), v7, a2))
  {
    v18 = sub_22EF5B848(*(_QWORD *)(*a1 + 144), *(_QWORD *)(*(_QWORD *)(*a1 + 144) + 16392), 0);
    v19 = sub_22E491C48((uint64_t)a1, v6, v18, (uint64_t)"__copy_helper", 13, &v43);
    v20 = v45;
    if (v45 >= HIDWORD(v45))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v20 = v45;
    }
    *((_QWORD *)v44 + v20) = v19;
    LODWORD(v45) = v45 + 1;
    v21 = sub_22E491C48((uint64_t)a1, v6, v18, (uint64_t)"__destroy_helper", 16, &v43);
    v22 = v45;
    if (v45 >= HIDWORD(v45))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v22 = v45;
    }
    *((_QWORD *)v44 + v22) = v21;
    LODWORD(v45) = v45 + 1;
  }
  v42 = 0;
  v23 = *(_QWORD *)(*a1 + 144);
  if (sub_22F36DFB0(v23, v7, &v41, &v42) && v42)
  {
    v24 = sub_22EF5B848(v23, *(_QWORD *)(v23 + 16392), 0);
    v25 = sub_22E491C48((uint64_t)a1, v6, v24, (uint64_t)"__byref_variable_layout", 23, &v43);
    v26 = v45;
    if (v45 >= HIDWORD(v45))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v26 = v45;
    }
    *((_QWORD *)v44 + v26) = v25;
    LODWORD(v45) = v45 + 1;
    v23 = *(_QWORD *)(*a1 + 144);
  }
  v27 = sub_22EF5B404(v23, a2, 0);
  v28 = *(unsigned __int8 *)(*(_QWORD *)(*a1 + 216) + *(_QWORD *)(**(_QWORD **)(*a1 + 216) - 24) + 1);
  v29 = sub_22EF5CDF0(*(_QWORD *)(*a1 + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 16408) & 0xFFFFFFFFFFFFFFF0));
  v30 = v43;
  if ((uint64_t)v27 > (uint64_t)(v28 / v29))
  {
    v31 = sub_22EF5CDF0(*(_QWORD *)(*a1 + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 16408) & 0xFFFFFFFFFFFFFFF0));
    if ((uint64_t)(v27 + v30 / v31 - 1 - v30 / v31 - (v27 + v30 / v31 - 1) % v27) >= 1)
    {
      v40 = 32;
      v39 = (_DWORD)v27
          + (v30 / v31)
          - 1
          - (v30 / v31)
          - ((v27 + v30 / v31 - 1) % v27);
      v32 = sub_22EF5FE30(*(_QWORD *)(*a1 + 144), *(_QWORD *)(*(_QWORD *)(*a1 + 144) + 16408), (const llvm::APInt *)&v39, 0, 0, 0);
      v33 = sub_22E491C48((uint64_t)a1, v6, v32, (uint64_t)&unk_22F566939, 0, &v43);
      v34 = v45;
      if (v45 >= HIDWORD(v45))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v34 = v45;
      }
      *((_QWORD *)v44 + v34) = v33;
      LODWORD(v45) = v45 + 1;
      if (v40 >= 0x41 && v39)
        MEMORY[0x2348A0E84](v39, 0x1000C8000313F17);
      v30 = v43;
    }
  }
  sub_22F254858(a1, v7, v6);
  sub_22EF5CDF0(*(_QWORD *)(*a1 + 144), *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0));
  sub_22EF5CDF0(*(_QWORD *)(*a1 + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 16408) & 0xFFFFFFFFFFFFFFF0));
  *a3 = v30;
  MemberType = llvm::DIBuilder::createMemberType();
  v36 = v45;
  if (v45 >= HIDWORD(v45))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v36 = v45;
  }
  *((_QWORD *)v44 + v36) = MemberType;
  LODWORD(v45) = v45 + 1;
  llvm::DIBuilder::getOrCreateArray();
  StructType = llvm::DIBuilder::createStructType();
  if (v44 != v46)
    free(v44);
  return StructType;
}

uint64_t sub_22E49BF68(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  BOOL v41;
  unsigned int v42;
  uint64_t ParameterVariable;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  _BYTE *v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  _QWORD v65[15];

  v65[13] = *MEMORY[0x24BDAC8D0];
  if (sub_22F2556D0(a2))
    return 0;
  if ((*(_BYTE *)(a2 + 29) & 2) != 0)
    goto LABEL_23;
  v10 = *(_QWORD *)(a2 + 16);
  v11 = v10 & 0xFFFFFFFFFFFFFFF8;
  if ((v10 & 4) != 0)
    v11 = *(_QWORD *)v11;
  v12 = *(_WORD *)(v11 + 8) & 0x7F;
  v13 = -40;
  if (v12 > 0x46)
  {
    if (v12 == 83)
      goto LABEL_21;
    if (v12 == 71)
    {
      v13 = -56;
      goto LABEL_21;
    }
    if (v12 != 81)
    {
LABEL_16:
      if (v12 - 52 < 6)
      {
        v13 = -72;
      }
      else
      {
        v13 = -48;
        if (v12 - 33 < 5)
          v13 = -64;
      }
    }
  }
  else
  {
    if (v12 > 0x18)
      goto LABEL_15;
    if (v12 == 16)
    {
LABEL_8:
      v13 = -48;
      goto LABEL_21;
    }
    if (((1 << v12) & 0x1066) == 0)
    {
      if (v12 == 24)
        goto LABEL_8;
LABEL_15:
      if (v12 == 70)
      {
        v13 = -64;
        goto LABEL_21;
      }
      goto LABEL_16;
    }
  }
LABEL_21:
  if ((*(_BYTE *)(v11 + v13 + 29) & 2) == 0)
  {
    v14 = sub_22E48F44C((uint64_t *)a1, *(_DWORD *)(a2 + 24));
    v15 = 0;
    goto LABEL_24;
  }
LABEL_23:
  v14 = 0;
  v15 = 1;
LABEL_24:
  v62 = 0;
  if (sub_22E49C868(a2))
  {
    sub_22E49B904((uint64_t *)a1, a2, &v62);
    if (!v16)
      return 0;
  }
  else if (!sub_22F254858((uint64_t *)a1, *(_QWORD *)(a2 + 48), v14))
  {
    return 0;
  }
  if ((v15 & 1) == 0)
  {
    v19 = *(_DWORD *)(a2 + 24);
    if (v19)
    {
      sub_22F1E2F68(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 1992), v19, *(unsigned __int8 *)(a1 + 13), (uint64_t)&v63);
      v20 = *(_DWORD *)(a2 + 24);
    }
    else
    {
      v20 = 0;
    }
    sub_22E491214((unsigned __int8 *)a1, v20, 0);
  }
  v63 = v65;
  v64 = 0xD00000000;
  if (sub_22E49F7A8(a2))
    sub_22EFC8A80(a2);
  v21 = *(_QWORD *)a1;
  v22 = sub_22EF5CF80(*(_QWORD *)(*(_QWORD *)a1 + 144), *(_QWORD *)(a2 + 48));
  sub_22F256C08(*(_QWORD *)(v21 + 216), v22, (uint64_t)&v63);
  v61 = *(_BYTE **)(*(_QWORD *)(a1 + 2344) - 8);
  v23 = *(_QWORD *)(a2 + 40);
  if ((v23 & 7) == 0 && (v24 = v23 & 0xFFFFFFFFFFFFFFF8) != 0 && **(_DWORD **)(v24 + 16))
  {
    if (sub_22E49C868(a2) && (*(_BYTE *)(a2 + 98) & 0x20) != 0)
    {
      v25 = v64;
      if (v64 >= HIDWORD(v64))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v25 = v64;
      }
      *((_QWORD *)v63 + v25) = 35;
      LODWORD(v64) = v64 + 1;
      v26 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)a1 + 216)
                               + *(_QWORD *)(**(_QWORD **)(*(_QWORD *)a1 + 216) - 24));
      v27 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)a1 + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 16408) & 0xFFFFFFFFFFFFFFF0));
      v28 = v64;
      v29 = v26 / v27;
      if (v64 >= HIDWORD(v64))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v28 = v64;
      }
      *((_QWORD *)v63 + v28) = v29;
      v30 = v64 + 1;
      LODWORD(v64) = v30;
      if (v30 >= HIDWORD(v64))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v30 = v64;
      }
      *((_QWORD *)v63 + v30) = 6;
      v31 = v64 + 1;
      LODWORD(v64) = v31;
      if (v31 >= HIDWORD(v64))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v31 = v64;
      }
      v32 = v62;
      *((_QWORD *)v63 + v31) = 35;
      LODWORD(v64) = v64 + 1;
      v33 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)a1 + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 16408) & 0xFFFFFFFFFFFFFFF0));
      v34 = v64;
      v35 = v32 / v33;
      if (v64 >= HIDWORD(v64))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v34 = v64;
      }
      *((_QWORD *)v63 + v34) = v35;
      LODWORD(v64) = v64 + 1;
    }
  }
  else
  {
    v36 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (v36)
    {
      if (*(_BYTE *)(v36 + 16) == 45)
      {
        v37 = sub_22F114198(*(_QWORD *)(v36 + 24));
        if ((*(_DWORD *)(v37 + 72) & 0xE000) == 0x4000 && (*(_BYTE *)(v37 + 75) & 1) != 0)
        {
          v38 = sub_22EFC3B90(v37);
          if (v38)
          {
            v39 = v38;
LABEL_58:
            sub_22F254858((uint64_t *)a1, *(_QWORD *)(v39 + 48), v14);
            v40 = *(_QWORD *)(v39 + 40) & 0xFFFFFFFFFFFFFFF8;
            v41 = (*(_QWORD *)(v39 + 40) & 7) != 0 || v40 == 0;
            if (!v41 && **(_DWORD **)(v40 + 16)
              || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v39 + 48) & 0xFFFFFFFFFFFFFFF0) + 16) == 45)
            {
              if (sub_22E49F7A8(v39))
                sub_22EFC8A80(v39);
              llvm::DIBuilder::createAutoVariable();
              llvm::DIBuilder::createExpression();
              llvm::DILocation::getImpl();
              llvm::DIBuilder::insertDeclare();
            }
            while (1)
            {
              v39 = *(_QWORD *)(v39 + 8) & 0xFFFFFFFFFFFFFFF8;
              if (!v39)
                break;
              if ((*(_DWORD *)(v39 + 28) & 0x7Fu) - 49 < 3)
                goto LABEL_58;
            }
          }
        }
      }
    }
  }
  if (a6)
  {
    v42 = v64;
    if (v64 >= HIDWORD(v64))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v42 = v64;
    }
    *((_QWORD *)v63 + v42) = 6;
    LODWORD(v64) = v64 + 1;
  }
  if ((a4 & 0xFF00000000) != 0)
  {
    sub_22E491D18(a1, a2);
    ParameterVariable = llvm::DIBuilder::createParameterVariable();
  }
  else
  {
    if (*v61 == 17 && (v61[1] & 0x7F) == 1)
    {
      v44 = *(_QWORD *)(a1 + 2688);
      v45 = *(unsigned int *)(a1 + 2704);
      v46 = (uint64_t *)(v44 + 16 * v45);
      if (*(_DWORD *)(a1 + 2696))
      {
        if ((_DWORD)v45)
        {
          v47 = 16 * v45;
          v48 = *(uint64_t **)(a1 + 2688);
          while ((*v48 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v48 += 2;
            v47 -= 16;
            if (!v47)
              goto LABEL_85;
          }
        }
        else
        {
          v48 = *(uint64_t **)(a1 + 2688);
        }
      }
      else
      {
LABEL_85:
        v48 = (uint64_t *)(v44 + 16 * v45);
      }
      v49 = (uint64_t *)(v44 + 16 * v45);
LABEL_88:
      while (v48 != v49)
      {
        v50 = v48[1];
        if (*(_BYTE *)v50 == 12)
        {
          v51 = *(_QWORD *)(v50 + 8);
          if (v51 && (*(_DWORD *)(v51 + 28) & 0x7Fu) - 60 >= 7)
            v51 = 0;
          if (v51 == a2)
          {
            v53 = *(_QWORD *)(a1 + 2712);
            v54 = *(unsigned int *)(a1 + 2728);
            v55 = (_QWORD *)(v53 + 16 * v54);
            if (*(_DWORD *)(a1 + 2720))
            {
              if ((_DWORD)v54)
              {
                v56 = 16 * v54;
                v57 = *(_QWORD **)(a1 + 2712);
                while ((*v57 | 0x1000) == 0xFFFFFFFFFFFFF000)
                {
                  v57 += 2;
                  v56 -= 16;
                  if (!v56)
                    goto LABEL_104;
                }
              }
              else
              {
                v57 = *(_QWORD **)(a1 + 2712);
              }
            }
            else
            {
LABEL_104:
              v57 = (_QWORD *)(v53 + 16 * v54);
            }
            v58 = (_QWORD *)(v53 + 16 * v54);
            if (v57 != v58)
            {
              v59 = *v48;
              while (1)
              {
                if (*v57 == v59)
                {
                  v17 = v57[1];
                  if (*(_BYTE **)(v17 - 8 * *(unsigned int *)(v17 + 8)) == v61)
                    goto LABEL_118;
                }
                v60 = v57 + 2;
                v57 = v55;
                if (v60 != v55)
                {
                  v57 = v60;
                  while ((*v57 | 0x1000) == 0xFFFFFFFFFFFFF000)
                  {
                    v57 += 2;
                    if (v57 == v55)
                    {
                      v57 = v55;
                      break;
                    }
                  }
                }
                if (v57 == v58)
                  goto LABEL_116;
              }
            }
            break;
          }
        }
        v52 = v48 + 2;
        v48 = v46;
        if (v52 != v46)
        {
          v48 = v52;
          while ((*v48 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v48 += 2;
            if (v48 == v46)
            {
              v48 = v46;
              goto LABEL_88;
            }
          }
        }
      }
    }
LABEL_116:
    ParameterVariable = llvm::DIBuilder::createAutoVariable();
  }
  v17 = ParameterVariable;
LABEL_118:
  llvm::DIBuilder::createExpression();
  llvm::DILocation::getImpl();
  llvm::DIBuilder::insertDeclare();
  if (v63 != v65)
    free(v63);
  return v17;
}

BOOL sub_22E49C868(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 118)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22E49C8C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t AutoVariable;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned __int8 *v17;
  int v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  unint64_t v28;
  unsigned int v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t *v42;
  unsigned int v43;
  void *v44;
  uint64_t v45;
  _QWORD v46[4];

  v46[3] = *MEMORY[0x24BDAC8D0];
  if (sub_22F2556D0(a2))
    return 0;
  if (**(unsigned __int8 **)(a2 + 64) == 161)
    return 0;
  v11 = sub_22E48F44C((uint64_t *)a1, *(_DWORD *)(a2 + 24));
  if (!sub_22F254858((uint64_t *)a1, *(_QWORD *)(a2 + 48), v11))
    return 0;
  if (sub_22E49F7A8(a2))
    sub_22EFC8A80(a2);
  v12 = *(_QWORD *)a1;
  v13 = sub_22EF5CF80(*(_QWORD *)(*(_QWORD *)a1 + 144), *(_QWORD *)(a2 + 48));
  v44 = v46;
  v45 = 0x300000000;
  sub_22F256C08(*(_QWORD *)(v12 + 216), v13, (uint64_t)&v44);
  if (a6)
  {
    v14 = v45;
    if (v45 >= HIDWORD(v45))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v14 = v45;
    }
    *((_QWORD *)v44 + v14) = 6;
    LODWORD(v45) = v45 + 1;
  }
  v15 = *(_DWORD *)(a2 + 24);
  if (v15)
  {
    sub_22F1E2F68(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 1992), v15, *(unsigned __int8 *)(a1 + 13), (uint64_t)&v42);
    v16 = *(_DWORD *)(a2 + 24);
  }
  else
  {
    v16 = 0;
  }
  sub_22E491214((unsigned __int8 *)a1, v16, 0);
  AutoVariable = llvm::DIBuilder::createAutoVariable();
  v17 = *(unsigned __int8 **)(a2 + 64);
  v18 = *v17;
  if (v18 == 107)
  {
    v31 = v17 + 24;
    v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v17 + 3) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v33 = *(_DWORD *)(v32 + 16);
    if (v32)
      v34 = v33 == 11;
    else
      v34 = 0;
    if (v34)
    {
      if (((*(_DWORD *)(v32 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
      {
LABEL_44:
        if (*(unsigned __int8 *)*v31 != 181)
          goto LABEL_45;
        sub_22F257F94(*v31 + 16, (llvm::APInt *)&v42);
        if (v43 >= 0x41)
          v36 = v42;
        else
          v36 = (uint64_t *)&v42;
        v37 = *v36;
        if (v43 >= 0x41 && v42)
          MEMORY[0x2348A0E84](v42, 0x1000C8000313F17);
        v38 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)a1 + 144), *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0));
        if (!v37)
          goto LABEL_45;
        v39 = v38;
        v40 = v45;
        if (v45 >= HIDWORD(v45))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v40 = v45;
        }
        *((_QWORD *)v44 + v40) = 35;
        LODWORD(v45) = v45 + 1;
        v41 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)a1 + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 16408) & 0xFFFFFFFFFFFFFFF0));
        v29 = v45;
        v30 = v39 * v37 / v41;
        if (v45 < HIDWORD(v45))
          goto LABEL_31;
        goto LABEL_59;
      }
    }
    else if (v32 && v33 == 44)
    {
      v35 = sub_22F114198(*(_QWORD *)(v32 + 24));
      if (((*(_BYTE *)(v35 + 74) & 1) != 0 || *(_QWORD *)(v35 + 128) > 7uLL)
        && (*(_QWORD *)(sub_22F114198(*(_QWORD *)(v32 + 24)) + 72) & 0x8000000000) == 0)
      {
        goto LABEL_44;
      }
    }
    else if (v33 == 9)
    {
      goto LABEL_44;
    }
    v31 = v17 + 16;
    goto LABEL_44;
  }
  if (v18 != 188)
    goto LABEL_45;
  v19 = *((_QWORD *)v17 + 3);
  if (!v19 || (*(_DWORD *)(v19 + 28) & 0x7Fu) - 52 < 0xFFFFFFFD)
    goto LABEL_45;
  v20 = sub_22EFC306C(v19);
  v21 = *(_QWORD *)(v19 + 16);
  v22 = v21 & 0xFFFFFFFFFFFFFFF8;
  if ((v21 & 4) != 0)
    v22 = *(_QWORD *)v22;
  v23 = (*(_WORD *)(v22 + 8) & 0x7E) - 34;
  v24 = v22 ? v22 - 64 : 0;
  v25 = v23 >= 4 ? 0 : v24;
  v26 = *(_QWORD *)(*(_QWORD *)(sub_22F0C975C(*(_QWORD *)(*(_QWORD *)a1 + 144), v25) + 48) + 8 * v20);
  if (!v26)
    goto LABEL_45;
  v27 = v45;
  if (v45 >= HIDWORD(v45))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v27 = v45;
  }
  *((_QWORD *)v44 + v27) = 35;
  LODWORD(v45) = v45 + 1;
  v28 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)a1 + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 16408) & 0xFFFFFFFFFFFFFFF0));
  v29 = v45;
  v30 = v26 / v28;
  if (v45 >= HIDWORD(v45))
  {
LABEL_59:
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v29 = v45;
  }
LABEL_31:
  *((_QWORD *)v44 + v29) = v30;
  LODWORD(v45) = v45 + 1;
LABEL_45:
  llvm::DIBuilder::createExpression();
  llvm::DILocation::getImpl();
  llvm::DIBuilder::insertDeclare();
  if (v44 != v46)
    free(v44);
  return AutoVariable;
}

uint64_t sub_22E49CDF8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  if (a2)
  {
    if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x3D)
    {
      v10 = *(unsigned int *)(a2 + 100);
      if ((_DWORD)v10)
      {
        v11 = (uint64_t *)(a2 + 104);
        v12 = 8 * v10;
        do
        {
          v13 = *v11++;
          sub_22E49C8C8(a1, v13, a3, a4, a4, (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)+ 16) & 0xFE) == 40);
          v12 -= 8;
        }
        while (v12);
      }
    }
  }
  return sub_22E49BF68(a1, a2, a3, 0, a4, a5);
}

void sub_22E49CEBC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BOOL4 v10;
  uint64_t v11;
  int v12;
  int v13;
  llvm::DataLayout *DataLayout;
  uint64_t StructLayout;
  int v16;
  _QWORD **v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a4 + 48) && !sub_22F2556D0(a2))
  {
    v10 = sub_22E49C868(a2);
    v30 = 0;
    v11 = sub_22E48F44C((uint64_t *)a1, *(_DWORD *)(a2 + 24));
    if (v10)
      sub_22E49B904((uint64_t *)a1, a2, &v30);
    else
      sub_22F254858((uint64_t *)a1, *(_QWORD *)(a2 + 48), v11);
    if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x3E && (*(_BYTE *)(a2 + 98) & 0x1C) == 0)
    {
      sub_22E491A8C(a1, *(_QWORD *)(a2 + 48));
      llvm::DIBuilder::createObjectPointerType();
    }
    v12 = *(_DWORD *)(a2 + 24);
    if (v12 || (v12 = *(_DWORD *)(a1 + 560)) != 0)
    {
      sub_22F1E2F68(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 1992), v12, *(unsigned __int8 *)(a1 + 13), (uint64_t)&v32);
      v13 = *(_DWORD *)(a2 + 24);
    }
    else
    {
      v13 = 0;
    }
    sub_22E491214((unsigned __int8 *)a1, v13, 0);
    DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)a1 + 200));
    StructLayout = llvm::DataLayout::getStructLayout();
    v31 = a2;
    v32 = 0;
    v16 = sub_22F246C54((uint64_t *)(a5 + 32), &v31, &v32);
    v17 = (_QWORD **)v32;
    if (!v16)
      v17 = (_QWORD **)(*(_QWORD *)(a5 + 32) + 16 * *(unsigned int *)(a5 + 48));
    v18 = *(_QWORD *)(StructLayout + 8 * (*v17[1] >> 1) + 16);
    v32 = &v34;
    v34 = xmmword_22F455D00;
    v35 = v18;
    v33 = 0x900000003;
    if (v10)
    {
      v19 = *(_QWORD *)(*(_QWORD *)a1 + 144);
      v36 = xmmword_22F455D00;
      LODWORD(v33) = 5;
      v20 = *(unsigned int *)(llvm::DataLayout::getPointerAlignElem(DataLayout) + 4);
      v21 = sub_22EF5CDF0(v19, *(_QWORD *)(*(_QWORD *)(v19 + 16408) & 0xFFFFFFFFFFFFFFF0));
      v22 = v33;
      v23 = v20 / v21;
      if (v33 >= HIDWORD(v33))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v22 = v33;
      }
      *((_QWORD *)v32 + v22) = v23;
      v24 = v33 + 1;
      LODWORD(v33) = v24;
      if (v24 >= HIDWORD(v33))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v24 = v33;
      }
      *((_QWORD *)v32 + v24) = 6;
      v25 = v33 + 1;
      LODWORD(v33) = v25;
      if (v25 >= HIDWORD(v33))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v25 = v33;
      }
      *((_QWORD *)v32 + v25) = 35;
      LODWORD(v33) = v33 + 1;
      v26 = v30;
      v27 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)a1 + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 16408) & 0xFFFFFFFFFFFFFFF0));
      v28 = v33;
      v29 = v26 / v27;
      if (v33 >= HIDWORD(v33))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v28 = v33;
      }
      *((_QWORD *)v32 + v28) = v29;
      LODWORD(v33) = v33 + 1;
    }
    if (sub_22E49F7A8(a2))
      sub_22EFC8A80(a2);
    llvm::DIBuilder::createAutoVariable();
    llvm::DILocation::getImpl();
    llvm::DIBuilder::createExpression();
    if (a6)
      llvm::DIBuilder::insertDeclare();
    else
      llvm::DIBuilder::insertDeclare();
    if (v32 != &v34)
      free(v32);
  }
}

void sub_22E49D300(uint64_t *a1, uint64_t a2)
{
  unsigned __int8 *v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *StructLayout;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v28;
  void *v29;
  uint64_t MemberType;
  unint64_t v31;
  unint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  uint64_t *v52;
  _QWORD v53[4];
  _OWORD *v54;
  void *v55;
  __int128 v56;
  _BYTE v57[40];
  void *__base;
  size_t __nel;
  _QWORD v60[16];
  _QWORD *v61;
  uint64_t v62;
  _QWORD v63[18];

  v3 = (unsigned __int8 *)a1;
  v63[16] = *MEMORY[0x24BDAC8D0];
  v49 = *(_QWORD *)(*a1 + 144);
  v50 = *(_QWORD *)(a2 + 352);
  v4 = *(_DWORD *)(v50 + 24);
  v5 = sub_22E48F44C(a1, v4);
  if (v4)
    sub_22F1E2F68(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 144) + 1992), v4, v3[13], (uint64_t)&v61);
  sub_22E491214(v3, v4, 0);
  v6 = v50;
  sub_22E48FAEC((uint64_t)v3, v50);
  llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)v3 + 200));
  StructLayout = (_QWORD *)llvm::DataLayout::getStructLayout();
  v61 = v63;
  v62 = 0x1000000000;
  sub_22F256FA4((uint64_t)v3, a2, v49, v4, StructLayout, v5, (uint64_t)&v61);
  v8 = 0;
  v9 = v60;
  __base = v60;
  __nel = 0x800000000;
  if ((*(_BYTE *)(v50 + 49) & 0x40) != 0)
  {
    v60[0] = 8 * StructLayout[*(unsigned int *)(a2 + 16) + 2];
    v60[1] = 0;
    v8 = 1;
    LODWORD(__nel) = 1;
  }
  v10 = *(unsigned int *)(v50 + 112);
  v51 = v4;
  if ((_DWORD)v10)
  {
    v11 = v3;
    v12 = *(_QWORD **)(v50 + 104);
    v13 = StructLayout + 2;
    v14 = 16 * v10;
    v15 = v12;
    do
    {
      v55 = (void *)(*v15 & 0xFFFFFFFFFFFFFFF8);
      v53[0] = 0;
      v16 = sub_22F246C54((uint64_t *)(a2 + 32), &v55, v53);
      v17 = v53[0];
      if (!v16)
        v17 = *(_QWORD *)(a2 + 32) + 16 * *(unsigned int *)(a2 + 48);
      v18 = **(_QWORD **)(v17 + 8);
      if ((v18 & 1) != 0)
      {
        v19 = v13[(v18 >> 1)];
        v20 = __nel;
        if (__nel >= (unint64_t)HIDWORD(__nel))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v20 = __nel;
        }
        v21 = (char *)__base + 16 * v20;
        *v21 = 8 * v19;
        v21[1] = v12;
        LODWORD(__nel) = __nel + 1;
      }
      v15 += 2;
      v12 += 2;
      v14 -= 16;
    }
    while (v14);
    v8 = __nel;
    v9 = (uint64_t *)__base;
    if (__nel >= 2)
    {
      qsort(__base, __nel, 0x10uLL, (int (__cdecl *)(const void *, const void *))sub_22E4A06A8);
      v9 = (uint64_t *)__base;
      v8 = __nel;
    }
    v3 = v11;
    v6 = v50;
    v4 = v51;
  }
  if (v8)
  {
    v52 = &v9[2 * v8];
    v48 = v6 + 56;
    while (1)
    {
      v23 = *v9;
      v22 = (uint64_t *)v9[1];
      if (!v22)
        break;
      v24 = *v22;
      v25 = v24 & 0xFFFFFFFFFFFFFFF8;
      v26 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFFFF8) + 40) & 0xFFFFFFFFFFFFFFF8;
      if ((*(_QWORD *)((v24 & 0xFFFFFFFFFFFFFFF8) + 40) & 7) != 0 || v26 == 0)
      {
        v28 = 0;
        v29 = &unk_22F566939;
        if ((v24 & 2) == 0)
          goto LABEL_39;
      }
      else
      {
        v33 = *(unsigned int **)(v26 + 16);
        v34 = *v33;
        v29 = v33 + 4;
        v28 = v34;
        if ((v24 & 2) == 0)
        {
LABEL_39:
          if (sub_22E49F7A8(v24 & 0xFFFFFFFFFFFFFFF8))
            v35 = sub_22EFC8A80(v25);
          else
            v35 = 0;
          v36 = (uint64_t)v29;
          v4 = v51;
          v37 = sub_22E491F64((uint64_t)v3, v36, v28, *(_QWORD *)(v25 + 48), v51, 0, v23, v35, v5);
          goto LABEL_69;
        }
      }
      sub_22EF5CDF0(v49, *(_QWORD *)(*(_QWORD *)(v49 + 16816) & 0xFFFFFFFFFFFFFFF0));
      sub_22E49B904((uint64_t *)v3, v25, v53);
      llvm::DIBuilder::createPointerType();
      v6 = v50;
      MemberType = llvm::DIBuilder::createMemberType();
      v4 = v51;
LABEL_70:
      v47 = v62;
      if (v62 >= (unint64_t)HIDWORD(v62))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v47 = v62;
      }
      v61[v47] = MemberType;
      LODWORD(v62) = v62 + 1;
      v9 += 2;
      if (v9 == v52)
        goto LABEL_18;
    }
    v31 = sub_22EFCB24C(v6);
    if (v31)
    {
      v32 = sub_22EFD7558(v31);
LABEL_68:
      v37 = sub_22E491F64((uint64_t)v3, (uint64_t)"this", 4, v32, v4, 0, v23, 0, v5);
LABEL_69:
      MemberType = v37;
      goto LABEL_70;
    }
    v38 = *(_WORD *)(v6 + 48) & 0x7F;
    v39 = -40;
    if (v38 > 0x46)
    {
      if (v38 != 83)
      {
        if (v38 == 71)
        {
          v39 = -56;
          goto LABEL_60;
        }
        if (v38 == 81)
          goto LABEL_60;
LABEL_54:
        v40 = v38 - 52;
        v41 = v38 - 33 >= 5;
        v42 = -64;
        if (v41)
          v42 = -48;
        v41 = v40 >= 6;
        v39 = -72;
        if (v41)
          v39 = v42;
      }
    }
    else
    {
      if (v38 > 0x18)
        goto LABEL_53;
      if (v38 != 16)
      {
        if (((1 << v38) & 0x1066) != 0)
          goto LABEL_60;
        if (v38 != 24)
        {
LABEL_53:
          if (v38 == 70)
          {
            v39 = -64;
            goto LABEL_60;
          }
          goto LABEL_54;
        }
      }
      v39 = -48;
    }
LABEL_60:
    v43 = *(_QWORD *)(v48 + v39);
    v44 = v43 & 0xFFFFFFFFFFFFFFF8;
    if ((v43 & 4) != 0)
      v44 = *(_QWORD *)v44;
    v45 = (*(_WORD *)(v44 + 8) & 0x7F) - 35;
    if (v44)
      v46 = v44 - 64;
    else
      v46 = 0;
    if (v45 >= 3)
      v46 = 0;
    v32 = *(_QWORD *)(v46 + 48) & 0xFFFFFFFFFFFFFFF0;
    goto LABEL_68;
  }
LABEL_18:
  v55 = v57;
  v56 = xmmword_22F455D10;
  sub_22F242C48((uint64_t)v53, (uint64_t)&v55);
  if (v53[3] - (_QWORD)v54 > 0xFuLL)
    *v54++ = *(_OWORD *)"__block_literal_";
  else
    llvm::raw_ostream::write((llvm::raw_ostream *)v53, "__block_literal_");
  ++*(_DWORD *)(*(_QWORD *)v3 + 3440);
  llvm::raw_ostream::operator<<();
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v53);
  llvm::DIBuilder::getOrCreateArray();
  sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)v3 + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 144) + 16408) & 0xFFFFFFFFFFFFFFF0));
  llvm::DIBuilder::createStructType();
  llvm::DIBuilder::createPointerType();
  llvm::DIBuilder::createParameterVariable();
  llvm::DIBuilder::createExpression();
  llvm::DILocation::getImpl();
  llvm::DIBuilder::insertDeclare();
  if (v55 != v57)
    free(v55);
  if (__base != v60)
    free(__base);
  if (v61 != v63)
    free(v61);
}

uint64_t sub_22E49DA68(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v15;
  unint64_t v16;
  uint64_t GlobalVariableExpression;
  uint64_t v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;

  v15 = sub_22EFC3B90(a2);
  if (!v15)
    return 0;
  v16 = v15;
  GlobalVariableExpression = 0;
LABEL_3:
  v18 = sub_22F254858(a1, *(_QWORD *)(v16 + 48), a3);
  v19 = *(_QWORD *)(v16 + 40) & 0xFFFFFFFFFFFFFFF8;
  v20 = (*(_QWORD *)(v16 + 40) & 7) != 0 || v19 == 0;
  if (v20 || !**(_DWORD **)(v19 + 16))
  {
    v21 = *(_QWORD *)(*(_QWORD *)(v16 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (v21 && *(_BYTE *)(v21 + 16) == 45)
    {
      v22 = sub_22F114198(*(_QWORD *)(v21 + 24));
      GlobalVariableExpression = sub_22E49DA68(a1, v22, a3, a4, a5, a6, a7, a8, v24, v25, v26, v27, v28, v29, v30);
    }
  }
  else
  {
    v26 = 0;
    v27 = 0;
    v30 = 0;
    v29 = 0;
    v28 = 0;
    BYTE1(v25) = 1;
    v24 = v18;
    LOBYTE(v25) = (*(_DWORD *)(a7 + 32) & 0xFu) - 7 < 2;
    GlobalVariableExpression = llvm::DIBuilder::createGlobalVariableExpression();
    llvm::GlobalVariable::addDebugInfo();
  }
  while (1)
  {
    v16 = *(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (!v16)
      return GlobalVariableExpression;
    if ((*(_DWORD *)(v16 + 28) & 0x7Fu) - 49 < 3)
      goto LABEL_3;
  }
}

uint64_t sub_22E49DBF0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v6;
  BOOL v7;
  llvm *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t GlobalVariableExpression;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const void *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD v33[6];

  v33[4] = *MEMORY[0x24BDAC8D0];
  v30 = a3;
  result = sub_22F2556D0((uint64_t)a3);
  if ((result & 1) == 0)
  {
    v31 = (_QWORD *)a1;
    v32 = (uint64_t)&v30;
    if (llvm::getTimeTraceProfilerInstance((llvm *)result))
      llvm::timeTraceProfilerBegin();
    v6 = (*(uint64_t (**)(uint64_t *))(*v30 + 32))(v30);
    v31 = 0;
    if (sub_22F24C318(*(_QWORD *)(a1 + 2568), *(_DWORD *)(a1 + 2584), v6, &v31))
      v7 = v31 == (_QWORD *)(*(_QWORD *)(a1 + 2568) + 16 * *(unsigned int *)(a1 + 2584));
    else
      v7 = 1;
    if (!v7)
    {
      v8 = (llvm *)llvm::GlobalVariable::addDebugInfo();
      goto LABEL_10;
    }
    v9 = a1 + 2568;
    v29 = 0;
    v28 = 0;
    v27 = 0;
    v25 = 0;
    v26 = 0;
    v23 = 0;
    v24 = 0;
    v21 = 0;
    v22 = 0;
    sub_22E4999B8(a1, (unint64_t)v30, &v29, &v27, &v22, &v25, (uint64_t)&v23, &v21, &v28);
    v10 = v22;
    v11 = v22 & 0xFFFFFFFFFFFFFFF0;
    if (sub_22F10E06C(*(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF0)) && !v26)
    {
      v12 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v11 + 8) & 0xFFFFFFFFFFFFFFF0) + 24));
      GlobalVariableExpression = sub_22E49DA68((uint64_t *)a1, v12, v29, v27, v23, v24, a2, v28);
LABEL_30:
      v31 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v30 + 32))(v30);
      v20 = sub_22F25827C(v9, (uint64_t *)&v31);
      v8 = (llvm *)sub_22E4911C0(v20 + 1, GlobalVariableExpression);
LABEL_10:
      result = llvm::getTimeTraceProfilerInstance(v8);
      if (result)
        return llvm::timeTraceProfilerEnd((llvm *)result);
      return result;
    }
    v14 = v30;
    if (sub_22E49F7A8((uint64_t)v30))
      sub_22EFC8A80((uint64_t)v14);
    v31 = v33;
    v32 = 0x400000000;
    v15 = *(_QWORD *)a1;
    v16 = v30;
    v17 = sub_22EF5CF80(*(_QWORD *)(*(_QWORD *)a1 + 144), v30[6]);
    v18 = *(_QWORD *)(v15 + 152);
    if ((*(_BYTE *)(v18 + 68) & 0x20) != 0 && (*(_WORD *)(v18 + 96) & 0x80) != 0)
    {
      if (sub_22E469D10((uint64_t)v16))
      {
        v19 = 10;
      }
      else
      {
        if (!sub_22E466EBC((uint64_t)v30))
        {
          v15 = *(_QWORD *)a1;
          goto LABEL_25;
        }
        v19 = 9;
      }
      v15 = *(_QWORD *)a1;
      v17 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 15072) + 4 * v19);
    }
LABEL_25:
    sub_22F256C08(*(_QWORD *)(v15 + 216), v17, (uint64_t)&v31);
    sub_22E491D18(a1, (uint64_t)v30);
    sub_22F254858((uint64_t *)a1, v10, v29);
    if ((_DWORD)v32)
      llvm::DIBuilder::createExpression();
    sub_22F257330(a1, (unint64_t)v30);
    GlobalVariableExpression = llvm::DIBuilder::createGlobalVariableExpression();
    llvm::GlobalVariable::addDebugInfo();
    if (v31 != v33)
      free(v31);
    v9 = a1 + 2568;
    goto LABEL_30;
  }
  return result;
}

uint64_t sub_22E49DF88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  llvm::APFloatBase *v20;
  uint64_t *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  int v38;
  uint64_t GlobalVariableExpression;
  llvm::detail::DoubleAPFloat *v40;
  uint64_t v41;
  uint64_t **v42;
  uint64_t *v43;
  uint64_t **v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v46 = a2;
  result = sub_22F2556D0(a2);
  if ((result & 1) == 0)
  {
    v47 = a1;
    v48 = &v46;
    if (llvm::getTimeTraceProfilerInstance((llvm *)result))
      llvm::timeTraceProfilerBegin();
    v6 = v46;
    if (sub_22E49F7A8(v46))
      sub_22EFC8A80(v6);
    v7 = sub_22E48F44C((uint64_t *)a1, *(_DWORD *)(v46 + 24));
    sub_22F254858((uint64_t *)a1, *(_QWORD *)(v46 + 48), v7);
    v8 = (_QWORD *)v46;
    v9 = *(_QWORD *)(v46 + 16);
    if (v46 && (*(_DWORD *)(v46 + 28) & 0x7F) == 0x43)
    {
      v10 = v9 & 0xFFFFFFFFFFFFFFF8;
      v11 = v9 & 0xFFFFFFFFFFFFFFF8;
      if ((v9 & 4) != 0)
        v11 = *(_QWORD *)v10;
      if (v11)
        v12 = v11 - 64;
      else
        v12 = 0;
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 184) + 80) & 0x20) == 0)
      {
        v8 = (_QWORD *)sub_22F254858((uint64_t *)a1, *(_QWORD *)(v12 + 48) & 0xFFFFFFFFFFFFFFF0, v7);
        goto LABEL_56;
      }
      v13 = *(_QWORD *)(v12 + 16);
      v14 = v13 & 0xFFFFFFFFFFFFFFF8;
      if ((v13 & 4) != 0)
        v14 = *(_QWORD *)v14;
      if ((*(_WORD *)(v14 + 8) & 0x7Eu) - 38 >= 0xFFFFFFFC)
        goto LABEL_56;
    }
    else
    {
      v10 = v9 & 0xFFFFFFFFFFFFFFF8;
    }
    if ((v9 & 4) != 0)
      v10 = *(_QWORD *)v10;
    if ((*(_WORD *)(v10 + 8) & 0x7Eu) - 52 < 6)
      goto LABEL_56;
    v15 = (*(uint64_t (**)(void))(*(_QWORD *)v46 + 32))();
    v46 = v15;
    if ((*(_DWORD *)(v15 + 28) & 0x7Fu) - 60 >= 7)
      v16 = 0;
    else
      v16 = v15;
    if (v16 && (*(_DWORD *)(v16 + 28) & 0x7F) != 0x40)
    {
      v17 = *(_QWORD *)(v16 + 16);
      v18 = v17 & 0xFFFFFFFFFFFFFFF8;
      if ((v17 & 4) == 0)
      {
        if ((*(_WORD *)(v18 + 8) & 0x7Eu) - 34 >= 4)
          goto LABEL_30;
LABEL_38:
        v24 = v18 - 64;
        sub_22E48FAEC(a1, v16);
        v8 = (_QWORD *)sub_22EF6477C(*(_QWORD *)(*(_QWORD *)a1 + 144), v24);
        v25 = v8;
        v26 = *(_QWORD **)(a1 + 2272);
        v27 = *(_QWORD *)(a1 + 2280);
        if ((unint64_t)v26 >= v27)
        {
          v29 = *(_QWORD **)(a1 + 2264);
          v30 = v26 - v29;
          v31 = v30 + 1;
          if ((unint64_t)(v30 + 1) >> 61)
            abort();
          v32 = v27 - (_QWORD)v29;
          if (v32 >> 2 > v31)
            v31 = v32 >> 2;
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
            v33 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v33 = v31;
          if (v33)
          {
            if (v33 >> 61)
              sub_22E3B3F8C();
            v8 = operator new(8 * v33);
          }
          else
          {
            v8 = 0;
          }
          v34 = &v8[v30];
          *v34 = v25;
          v28 = v34 + 1;
          if (v26 != v29)
          {
            do
            {
              v35 = *--v26;
              *--v34 = v35;
            }
            while (v26 != v29);
            v26 = *(_QWORD **)(a1 + 2264);
          }
          *(_QWORD *)(a1 + 2264) = v34;
          *(_QWORD *)(a1 + 2272) = v28;
          *(_QWORD *)(a1 + 2280) = &v8[v33];
          if (v26)
            operator delete(v26);
        }
        else
        {
          *v26 = v8;
          v28 = v26 + 1;
        }
        *(_QWORD *)(a1 + 2272) = v28;
        goto LABEL_56;
      }
      v18 = *(_QWORD *)v18;
      if ((*(_WORD *)(v18 + 8) & 0x7Eu) - 34 <= 3)
        goto LABEL_38;
    }
LABEL_30:
    sub_22E48FAEC(a1, v15);
    v47 = v46;
    v8 = sub_22F25827C(a1 + 2568, &v47);
    v19 = v8 + 1;
    if (!v8[1])
    {
      v20 = (llvm::APFloatBase *)sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)a1 + 144), *(_QWORD *)(*(_QWORD *)(v46 + 48) & 0xFFFFFFFFFFFFFFF0));
      if ((unint64_t)v20 > 0x40)
        goto LABEL_59;
      if (*(_DWORD *)a3 == 3)
      {
        v41 = *(_QWORD *)(a3 + 16);
        v40 = (llvm::detail::DoubleAPFloat *)(a3 + 16);
        if (llvm::APFloatBase::PPCDoubleDouble(v20) == v41)
          llvm::detail::DoubleAPFloat::bitcastToAPInt(v40);
        else
          llvm::detail::IEEEFloat::bitcastToAPInt(v40);
        v42 = (uint64_t **)&v44;
        if (v45 >= 0x41)
          v42 = v44;
        v43 = *v42;
        v47 = 16;
        v48 = v43;
        v49 = 159;
        llvm::DIExpression::getImpl();
        if (v45 >= 0x41 && v44)
          MEMORY[0x2348A0E84](v44, 0x1000C8000313F17);
        goto LABEL_59;
      }
      if (*(_DWORD *)a3 != 2)
      {
LABEL_59:
        v36 = v46;
        if (v16)
          v37 = (*(_DWORD *)(v46 + 28) & 0x7Fu) - 65 > 1;
        else
          v37 = 1;
        if (!v37)
        {
          sub_22E494304((uint64_t *)a1, v16, v7);
          v36 = v46;
        }
        v38 = *(_DWORD *)(v36 + 24);
        if (v38)
          sub_22F1E2F68(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 1992), v38, *(unsigned __int8 *)(a1 + 13), (uint64_t)&v47);
        sub_22F257330(a1, v16);
        GlobalVariableExpression = llvm::DIBuilder::createGlobalVariableExpression();
        v8 = sub_22E4911C0(v19, GlobalVariableExpression);
        goto LABEL_56;
      }
      v21 = (uint64_t *)(a3 + 8);
      v22 = *(_DWORD *)(a3 + 16);
      if (*(_BYTE *)(a3 + 20))
      {
        if (v22 >= 0x41)
          v21 = (uint64_t *)*v21;
      }
      else
      {
        if (v22 <= 0x40)
        {
          v23 = *v21 << -(char)v22 >> -(char)v22;
LABEL_79:
          v47 = 16;
          v48 = (uint64_t *)v23;
          v49 = 159;
          llvm::DIExpression::getImpl();
          goto LABEL_59;
        }
        v21 = (uint64_t *)*v21;
      }
      v23 = *v21;
      goto LABEL_79;
    }
LABEL_56:
    result = llvm::getTimeTraceProfilerInstance((llvm *)v8);
    if (result)
      return llvm::timeTraceProfilerEnd((llvm *)result);
  }
  return result;
}

uint64_t sub_22E49E51C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  int v7;
  _BYTE v8[12];

  result = sub_22F2556D0(a3);
  if ((result & 1) == 0)
  {
    if (sub_22E49F7A8(a3))
      sub_22EFC8A80(a3);
    v6 = sub_22E48F44C((uint64_t *)a1, *(_DWORD *)(a3 + 24));
    sub_22F254858((uint64_t *)a1, *(_QWORD *)(a3 + 48), v6);
    sub_22E48FAEC(a1, a3);
    v7 = *(_DWORD *)(a3 + 24);
    if (v7)
      sub_22F1E2F68(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 1992), v7, *(unsigned __int8 *)(a1 + 13), (uint64_t)v8);
    llvm::DIBuilder::createGlobalVariableExpression();
    return llvm::GlobalVariable::addDebugInfo();
  }
  return result;
}

uint64_t sub_22E49E668(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  unsigned __int8 *v6;

  v2 = a1[293];
  if (a1[292] != v2)
    return *(_QWORD *)(v2 - 8);
  v6 = (unsigned __int8 *)sub_22E48FBD8((uint64_t)a1, a2);
  if (!v6)
    v6 = (unsigned __int8 *)a1[58];
  return sub_22E48FD44((uint64_t)a1, a2, v6);
}

uint64_t sub_22E49E6C0(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)result + 184) + 96) & 0x1800000000000000) != 0)
  {
    v2 = *(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF8;
    if (v2)
    {
      v3 = result;
      v4 = *(_DWORD *)(v2 + 28);
      while (1)
      {
        if ((v4 & 0x7Fu) > 0x2F)
        {
          v5 = v2;
        }
        else
        {
          v5 = v2;
          if (((1 << (v4 & 0x7F)) & 0xC00000060000) != 0)
          {
            v5 = sub_22EFBAEA4(v2);
            v4 = *(_DWORD *)(v5 + 28);
          }
        }
        if ((v4 & 0x7Eu) - 58 < 0xFFFFFFFA)
          break;
        v6 = *(_QWORD *)(*(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFFFF0);
        if (!v6 || *(_BYTE *)(v6 + 16) != 26)
          v6 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFFFF0));
        v8 = 0;
        result = sub_22F110500((uint64_t)&v8, v6);
        if (!result || *(_BYTE *)(result + 16) != 14 || *(_QWORD *)(result + 24) >= 0x10uLL)
          break;
        v2 = *(_QWORD *)(v2 + 72);
        if (v2)
        {
          v4 = *(_DWORD *)(v2 + 28);
          if ((v4 & 0x7E) == 0x2E)
            continue;
        }
        return result;
      }
      return sub_22F2578F0(v3, v2);
    }
  }
  return result;
}

uint64_t sub_22E49E7E4(uint64_t a1, uint64_t a2)
{
  uint64_t ImportedDeclaration;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 184) + 96) & 0x1800000000000000) != 0)
  {
    v15 = a2;
    v6 = sub_22F25827C(a1 + 2640, &v15) + 1;
    ImportedDeclaration = *v6;
    if (*v6)
      return ImportedDeclaration;
    v7 = *(_DWORD *)(a2 + 24);
    v8 = *(_QWORD *)(a2 + 88);
    v9 = *(_QWORD *)(a2 + 16);
    v10 = v9 & 0xFFFFFFFFFFFFFFF8;
    if (v8 && (*(_DWORD *)(v8 + 28) & 0x7F) == 0x11)
    {
      if ((v9 & 4) != 0)
        v10 = *(_QWORD *)v10;
      v11 = *(_WORD *)(v10 + 8) & 0x7F;
      v12 = -40;
      if (v11 > 0x46)
      {
        if (v11 == 83)
          goto LABEL_46;
        if (v11 == 71)
        {
          v12 = -56;
          goto LABEL_46;
        }
        if (v11 != 81)
        {
LABEL_37:
          if (v11 - 52 < 6)
          {
            v12 = -72;
          }
          else
          {
            v12 = -48;
            if (v11 - 33 < 5)
              v12 = -64;
          }
        }
      }
      else
      {
        if (v11 > 0x18)
          goto LABEL_36;
        if (v11 == 16)
        {
LABEL_12:
          v12 = -48;
          goto LABEL_46;
        }
        if (((1 << v11) & 0x1066) == 0)
        {
          if (v11 == 24)
            goto LABEL_12;
LABEL_36:
          if (v11 == 70)
          {
            v12 = -64;
            goto LABEL_46;
          }
          goto LABEL_37;
        }
      }
LABEL_46:
      sub_22E49E668((_QWORD *)a1, v10 + v12);
      sub_22E49E7E4(a1, v8);
      sub_22E48F44C((uint64_t *)a1, v7);
      if (!v7)
        goto LABEL_47;
      goto LABEL_43;
    }
    if ((v9 & 4) != 0)
      v10 = *(_QWORD *)v10;
    v13 = *(_WORD *)(v10 + 8) & 0x7F;
    v14 = -40;
    if (v13 > 0x46)
    {
      if (v13 == 83)
        goto LABEL_42;
      if (v13 == 71)
      {
        v14 = -56;
        goto LABEL_42;
      }
      if (v13 != 81)
      {
LABEL_30:
        if (v13 - 52 < 6)
        {
          v14 = -72;
        }
        else
        {
          v14 = -48;
          if (v13 - 33 < 5)
            v14 = -64;
        }
      }
    }
    else
    {
      if (v13 > 0x18)
        goto LABEL_29;
      if (v13 == 16)
      {
LABEL_18:
        v14 = -48;
        goto LABEL_42;
      }
      if (((1 << v13) & 0x1066) == 0)
      {
        if (v13 == 24)
          goto LABEL_18;
LABEL_29:
        if (v13 == 70)
        {
          v14 = -64;
          goto LABEL_42;
        }
        goto LABEL_30;
      }
    }
LABEL_42:
    sub_22E49E668((_QWORD *)a1, v10 + v14);
    sub_22E48FE84(a1, *(_QWORD *)(a2 + 88));
    sub_22E48F44C((uint64_t *)a1, v7);
    if (!v7)
      goto LABEL_47;
LABEL_43:
    sub_22F1E2F68(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 1992), v7, *(unsigned __int8 *)(a1 + 13), (uint64_t)&v15);
LABEL_47:
    ImportedDeclaration = llvm::DIBuilder::createImportedDeclaration();
    sub_22E4911C0(v6, ImportedDeclaration);
    return ImportedDeclaration;
  }
  return 0;
}

uint64_t sub_22E49EB20(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  llvm::MDNode *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  llvm::MDNode *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v26;
  unint64_t *v27;
  unint64_t *i;
  llvm::MDNode *v29;
  void *v30;
  llvm::MDNode *v31;
  uint64_t v32;
  _QWORD **v33;
  unsigned int **v34;
  uint64_t v35;
  unsigned int *v36;
  int v37;
  char *v38;
  unsigned int **v39;
  unsigned int *v40;
  _QWORD **v41;
  _QWORD *v42;
  _QWORD *j;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  _QWORD v48[18];

  v48[16] = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 1440))
  {
    v2 = 0;
    v3 = 0;
    do
    {
      v4 = (uint64_t *)(*(_QWORD *)(a1 + 1432) + v2);
      v6 = *v4;
      v5 = (llvm::MDNode *)v4[1];
      v7 = v4[2];
      v8 = sub_22F409D88(*v4);
      v9 = *(_QWORD *)(v8 + 120);
      if (!v9)
      {
        v10 = v8;
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v8 + 96) + 88), *(_QWORD *)(v8 + 96));
        v9 = *(_QWORD *)(v10 + 120);
      }
      if (v9 < 8 || !*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF8) || v5 == (llvm::MDNode *)sub_22E495234(a1, v6, v7))
      {
        llvm::MDNode::replaceWithUniquedImpl(v5);
      }
      else
      {
        if ((*((_QWORD *)v5 + 2) & 4) != 0)
          llvm::ReplaceableMetadataImpl::replaceAllUsesWith();
        llvm::MDNode::deleteTemporary(v5, v11);
      }
      ++v3;
      v2 += 24;
    }
    while (v3 != *(_DWORD *)(a1 + 1440));
  }
  v12 = *(_QWORD *)(a1 + 2216);
  v13 = *(unsigned int *)(a1 + 2232);
  v14 = (_QWORD *)(v12 + 32 * v13);
  if (*(_DWORD *)(a1 + 2224))
  {
    if ((_DWORD)v13)
    {
      v15 = 32 * v13;
      v16 = *(_QWORD **)(a1 + 2216);
      while ((*v16 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v16 += 4;
        v15 -= 32;
        if (!v15)
          goto LABEL_18;
      }
    }
    else
    {
      v16 = *(_QWORD **)(a1 + 2216);
    }
  }
  else
  {
LABEL_18:
    v16 = (_QWORD *)(v12 + 32 * v13);
  }
  v17 = (_QWORD *)(v12 + 32 * v13);
  while (v16 != v17)
  {
    if (v16[1] != v16[2])
    {
      v45 = *(_QWORD *)(*v16 + 104) & 0xFFFFFFFFFFFFFFF0;
      v46 = 0;
      v19 = (sub_22F246C54((uint64_t *)(a1 + 1296), &v45, &v46) & 1) != 0
          ? v46
          : (_QWORD *)(*(_QWORD *)(a1 + 1296) + 16 * *(unsigned int *)(a1 + 1312));
      v45 = v19[1];
      v20 = *(_QWORD *)(v45 - 8 * *(unsigned int *)(v45 + 8) + 32);
      v21 = v20 ? (char *)(v20 - 8 * *(unsigned int *)(v20 + 8)) : 0;
      v46 = v48;
      v47 = 0x1000000000;
      sub_22F259578((uint64_t)&v46, v21, (char *)v20);
      v22 = (uint64_t *)v16[1];
      v23 = (uint64_t *)v16[2];
      while (v22 != v23)
      {
        v24 = *v22;
        if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 184) + 76) & 0x1C00000000uLL) > 0x1000000000
          || (*v22 & 4) != 0)
        {
          v26 = v47;
          if (v47 >= (unint64_t)HIDWORD(v47))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v26 = v47;
          }
          *((_QWORD *)v46 + v26) = v24 & 0xFFFFFFFFFFFFFFF8;
          LODWORD(v47) = v47 + 1;
        }
        ++v22;
      }
      llvm::DIBuilder::getOrCreateArray();
      llvm::DIBuilder::replaceArrays();
      if (v46 != v48)
        free(v46);
    }
    v18 = v16 + 4;
    v16 = v14;
    if (v18 != v14)
    {
      v16 = v18;
      while ((*v16 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v16 += 4;
        if (v16 == v14)
        {
          v16 = v14;
          break;
        }
      }
    }
  }
  v27 = *(unint64_t **)(a1 + 2288);
  for (i = *(unint64_t **)(a1 + 2296); v27 != i; v27 += 2)
  {
    v29 = (llvm::MDNode *)v27[1];
    v45 = *v27;
    v46 = 0;
    if ((sub_22F246C54((uint64_t *)(a1 + 1296), &v45, &v46) & 1) != 0)
      v30 = v46;
    else
      v30 = (void *)(*(_QWORD *)(a1 + 1296) + 16 * *(unsigned int *)(a1 + 1312));
    v31 = (llvm::MDNode *)*((_QWORD *)v30 + 1);
    if (v29 == v31)
    {
      llvm::MDNode::replaceWithUniquedImpl(v29);
    }
    else
    {
      if ((*((_QWORD *)v29 + 2) & 4) != 0)
        llvm::ReplaceableMetadataImpl::replaceAllUsesWith();
      llvm::MDNode::deleteTemporary(v29, v31);
    }
  }
  v32 = *(_QWORD *)(a1 + 2312);
  v33 = *(_QWORD ***)(a1 + 2320);
  if ((_QWORD **)v32 != v33)
  {
    v34 = (unsigned int **)(v32 + 8);
    do
    {
      v35 = (uint64_t)*(v34 - 1);
      v36 = *v34;
      v46 = 0;
      v37 = sub_22F24C318(*(_QWORD *)(a1 + 2568), *(_DWORD *)(a1 + 2584), v35, &v46);
      v38 = (char *)v46;
      if (!v37)
        v38 = (char *)(*(_QWORD *)(a1 + 2568) + 16 * *(unsigned int *)(a1 + 2584));
      if (v38 == (char *)(*(_QWORD *)(a1 + 2568) + 16 * *(unsigned int *)(a1 + 2584)))
        v39 = v34;
      else
        v39 = (unsigned int **)(v38 + 8);
      v40 = *v39;
      if (*v39 && *(_BYTE *)v40 == 7)
        v40 = *(unsigned int **)&v40[-2 * v40[2]];
      if (v36 == v40)
      {
        llvm::MDNode::replaceWithUniquedImpl((llvm::MDNode *)v36);
      }
      else
      {
        if ((*((_QWORD *)v36 + 2) & 4) != 0)
          llvm::ReplaceableMetadataImpl::replaceAllUsesWith();
        llvm::MDNode::deleteTemporary((llvm::MDNode *)v36, (llvm::MDNode *)v40);
      }
      v41 = (_QWORD **)(v34 + 1);
      v34 += 2;
    }
    while (v41 != v33);
  }
  v42 = *(_QWORD **)(a1 + 2264);
  for (j = *(_QWORD **)(a1 + 2272); v42 != j; ++v42)
  {
    v46 = (void *)sub_22F258670((uint64_t *)(a1 + 1296), v42)[1];
    if (v46)
    {
      llvm::MetadataTracking::track();
      if (v46)
      {
        llvm::DIBuilder::retainType();
        if (v46)
          llvm::MetadataTracking::untrack();
      }
    }
  }
  return llvm::DIBuilder::finalize((llvm::DIBuilder *)(a1 + 16));
}

uint64_t *sub_22E49EFC4(uint64_t *result, unint64_t a2)
{
  uint64_t v2;

  if ((*(_QWORD *)(*(_QWORD *)(*result + 184) + 96) & 0x1800000000000000) != 0)
  {
    v2 = result[58];
    if (*(_BYTE *)v2 != 15)
      v2 = *(_QWORD *)(v2 - 8 * *(unsigned int *)(v2 + 8));
    result = (uint64_t *)sub_22F254858(result, a2, v2);
    if (result)
      return (uint64_t *)llvm::DIBuilder::retainType();
  }
  return result;
}

uint64_t *sub_22E49F030(uint64_t *result, unint64_t a2)
{
  uint64_t v2;

  if ((*(_QWORD *)(*(_QWORD *)(*result + 184) + 96) & 0x1E00000000000000uLL) >= 0xC00000000000001)
  {
    v2 = result[58];
    if (*(_BYTE *)v2 != 15)
      v2 = *(_QWORD *)(v2 - 8 * *(unsigned int *)(v2 + 8));
    result = (uint64_t *)sub_22F254858(result, a2, v2);
    if (result)
      return (uint64_t *)llvm::DIBuilder::retainType();
  }
  return result;
}

uint64_t sub_22E49F0A8(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;

  sub_22E49F270(a1 + 424);
  sub_22E49F270(a1 + 400);
  v2 = *(char **)(a1 + 344);
  v3 = *(unsigned int *)(a1 + 352);
  if ((_DWORD)v3)
  {
    v16 = 8 * v3;
    v17 = v2 - 8;
    v22 = v2 - 8;
    do
    {
      if (*(_QWORD *)&v17[v16])
        llvm::MetadataTracking::untrack();
      v16 -= 8;
      v17 = v22;
    }
    while (v16);
    v2 = *(char **)(a1 + 344);
  }
  if (v2 != (char *)(a1 + 360))
    free(v2);
  v4 = *(_QWORD *)(a1 + 320);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 328);
    v6 = *(void **)(a1 + 320);
    if (v5 != v4)
    {
      do
      {
        v7 = v5 - 56;
        sub_22F257CF8(v5 - 48);
        v5 = v7;
      }
      while (v7 != v4);
      v6 = *(void **)(a1 + 320);
    }
    *(_QWORD *)(a1 + 328) = v4;
    operator delete(v6);
  }
  llvm::deallocate_buffer(*(llvm **)(a1 + 296), (void *)(16 * *(unsigned int *)(a1 + 312)));
  v8 = *(char **)(a1 + 248);
  v9 = *(unsigned int *)(a1 + 256);
  if ((_DWORD)v9)
  {
    v18 = 8 * v9;
    v19 = v8 - 8;
    v23 = v8 - 8;
    do
    {
      if (*(_QWORD *)&v19[v18])
        llvm::MetadataTracking::untrack();
      v18 -= 8;
      v19 = v23;
    }
    while (v18);
    v8 = *(char **)(a1 + 248);
  }
  if (v8 != (char *)(a1 + 264))
    free(v8);
  v10 = *(void **)(a1 + 200);
  if (v10 != (void *)(a1 + 216))
    free(v10);
  v11 = *(void **)(a1 + 152);
  if (v11 != (void *)(a1 + 168))
    free(v11);
  v12 = *(char **)(a1 + 104);
  v13 = *(unsigned int *)(a1 + 112);
  if ((_DWORD)v13)
  {
    v20 = 8 * v13;
    v21 = v12 - 8;
    v24 = v12 - 8;
    do
    {
      if (*(_QWORD *)&v21[v20])
        llvm::MetadataTracking::untrack();
      v20 -= 8;
      v21 = v24;
    }
    while (v20);
    v12 = *(char **)(a1 + 104);
  }
  if (v12 != (char *)(a1 + 120))
    free(v12);
  v14 = *(void **)(a1 + 56);
  if (v14 != (void *)(a1 + 72))
    free(v14);
  return a1;
}

uint64_t sub_22E49F270(uint64_t a1)
{
  uint64_t v2;
  llvm *v3;
  uint64_t v4;
  char **v5;
  void *v6;

  v2 = *(unsigned int *)(a1 + 16);
  v3 = *(llvm **)a1;
  if ((_DWORD)v2)
  {
    v4 = 32 * v2;
    v5 = (char **)((char *)v3 + 8);
    do
    {
      if (((unint64_t)*(v5 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        v5 = sub_22F257C90(v5);
      v5 += 4;
      v4 -= 32;
    }
    while (v4);
    v3 = *(llvm **)a1;
    v6 = (void *)(32 * *(unsigned int *)(a1 + 16));
  }
  else
  {
    v6 = 0;
  }
  llvm::deallocate_buffer(v3, v6);
  return a1;
}

_QWORD *sub_22E49F2E8(_QWORD *a1, _QWORD *a2)
{
  if (a2 != a1)
  {
    if (*a1)
      llvm::MetadataTracking::untrack();
    *a1 = *a2;
    if (*a2)
    {
      llvm::MetadataTracking::retrack();
      *a2 = 0;
    }
  }
  return a1;
}

uint64_t *sub_22E49F34C(uint64_t *result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;

  v2 = *result;
  v3 = *((unsigned int *)result + 2);
  if ((_DWORD)v3)
  {
    v5 = 0;
    v4 = v2 + 16 * v3;
    v6 = 16 * v3;
    v7 = 16 * v3 - 16;
    while (*(_DWORD *)(v2 + v5) != a2)
    {
      v5 += 16;
      if (v6 == v5)
        goto LABEL_3;
    }
    v4 = v2 + v5;
    if (v7 != v5)
    {
      v8 = (_QWORD *)(v4 + 24);
      v9 = v6 - v5 - 16;
      do
      {
        v10 = *((_DWORD *)v8 - 2);
        if (v10 != a2)
        {
          *(_DWORD *)v4 = v10;
          *(_QWORD *)(v4 + 8) = *v8;
          v4 += 16;
        }
        v8 += 2;
        v9 -= 16;
      }
      while (v9);
    }
  }
  else
  {
    v4 = *result;
  }
LABEL_3:
  *((_DWORD *)result + 2) = (unint64_t)(v4 - v2) >> 4;
  return result;
}

_DWORD *sub_22E49F3DC(_QWORD *a1, unsigned int a2)
{
  _DWORD *result;
  unsigned int v3;
  char v4;

  v4 = 0;
  if (a2 + 1 <= 1)
    return 0;
  if ((a2 & 0x80000000) != 0)
  {
    v3 = -2 - a2;
    if (((*(_QWORD *)(a1[28] + 8 * (v3 >> 6)) >> v3) & 1) != 0)
    {
      result = (_DWORD *)(a1[25] + 24 * v3);
    }
    else
    {
      result = (_DWORD *)sub_22F1E1134((uint64_t)a1, v3, &v4);
      if (v4)
        return 0;
    }
  }
  else
  {
    result = (_DWORD *)(a1[23] + 24 * a2);
  }
  if (!result || (*result & 0x80000000) != 0)
    return 0;
  return result;
}

uint64_t sub_22E49F484(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;

  v2 = *(_QWORD *)(result + 8);
  if (v2 != a2)
  {
    v3 = a2;
    if (v2 <= a2 && *(_QWORD *)(result + 16) < a2)
    {
      v5 = result;
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v3 = a2;
      result = v5;
    }
    *(_QWORD *)(result + 8) = v3;
  }
  return result;
}

uint64_t sub_22E49F4DC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 8) = 0u;
  v3 = *(_QWORD *)(result + 16);
  v4 = (v3 >> 54) & 0xF;
  *(_DWORD *)a2 = v4;
  if ((_DWORD)v4 == 2)
  {
    v5 = (unsigned int *)((result + 8 * (unsigned __int16)(v3 >> 38) + 4 * ((v3 >> 59) & 1) + 47) & 0xFFFFFFFFFFFFFFF8);
    v6 = v3 & 0x3C0000000000000;
    if (v6 == 0x80000000000000)
      v7 = *v5;
    else
      v7 = 0;
    *(_QWORD *)(a2 + 8) = &v5[2 * (v6 == 0x80000000000000)];
    *(_QWORD *)(a2 + 16) = v7;
  }
  else if ((v4 - 6) <= 2)
  {
    result = sub_22F257D3C(result);
    *(_QWORD *)(a2 + 24) = result;
  }
  else if ((_DWORD)v4 == 9)
  {
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(((result + 8 * (unsigned __int16)(v3 >> 38) + 4 * ((v3 >> 59) & 1) + 47) & 0xFFFFFFFFFFFFFFF8)
                                     + 8 * ((v3 & 0x3C0000000000000) == 0x80000000000000));
  }
  else if ((_DWORD)v4 == 10)
  {
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(((result + 8 * (unsigned __int16)(v3 >> 38) + 4 * ((v3 >> 59) & 1) + 47) & 0xFFFFFFFFFFFFFFF8)
                                     + 8 * ((v3 & 0x3C0000000000000) == 0x80000000000000));
    result = sub_22F257DA4(result);
    *(_QWORD *)(a2 + 40) = result;
  }
  return result;
}

uint64_t sub_22E49F5F8(uint64_t a1)
{
  if (((*(_QWORD *)(a1 + 16) >> 54) & 0xF) == 9)
    return 0;
  else
    return ((uint64_t (*)(_QWORD, _QWORD))((char *)nullsub_14
                                                   + 4 * byte_22F455FDC[(*(_QWORD *)(a1 + 16) >> 54) & 0xFLL]))(0, 0);
}

uint64_t sub_22E49F670()
{
  uint64_t v0;

  return nullsub_14(v0, 0);
}

uint64_t sub_22E49F67C()
{
  return 0x100000000;
}

uint64_t sub_22E49F68C()
{
  return 0;
}

BOOL sub_22E49F698(unint64_t a1)
{
  _BOOL8 result;

  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  if ((*(_WORD *)(*(_QWORD *)(a1 + 128) + 8) & 0x100) != 0 || (result = sub_22E49F6F8(a1)))
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
    return (**(_QWORD **)(a1 + 128) >> 39) & 1;
  }
  return result;
}

BOOL sub_22E49F6F8(unint64_t a1)
{
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  if ((**(_DWORD **)(a1 + 128) & 1) == 0)
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
    if ((*(_WORD *)(*(_QWORD *)(a1 + 128) + 8) & 0x100) == 0
      && (((*(unsigned __int16 *)(*(_QWORD *)(a1 + 128) + 8) | (*(unsigned __int8 *)(*(_QWORD *)(a1 + 128) + 10) << 16)) & 0x100000) == 0
       || (sub_22F3B1AEC(a1) & 1) != 0))
    {
      return 1;
    }
  }
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  if ((**(_QWORD **)(a1 + 128) & 0x8000000) == 0)
    return 0;
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  return (*(_WORD *)(*(_QWORD *)(a1 + 128) + 8) & 0x100) == 0;
}

BOOL sub_22E49F7A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v2 = *(_QWORD *)v1;
  v3 = *(unsigned int *)(v1 + 8);
  v4 = *(_QWORD *)v1 + 8 * v3;
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    while (*(_WORD *)(*(_QWORD *)v2 + 32) != 98)
    {
      v2 += 8;
      v5 -= 8;
      if (!v5)
      {
        v2 = v4;
        return v2 != v4;
      }
    }
  }
  return v2 != v4;
}

BOOL sub_22E49F808(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 157)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E49F868(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 80);
  if ((v1 & 0x2400000) == 0x400000 || (v1 & 0x2000000) != 0)
    return 1;
  if ((v1 & 0x8000000) != 0)
  {
    if ((v1 & 0x20000000) != 0)
      return 1;
  }
  else if (*(_QWORD *)(a1 + 128) | v1 & 0x20000000)
  {
    return 1;
  }
  if ((v1 & 0xC00000000) != 0)
    return 1;
  return sub_22EFC91E8(a1);
}

uint64_t sub_22E49F8B4(unint64_t a1)
{
  uint64_t result;

  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  if ((*(_WORD *)(*(_QWORD *)(a1 + 128) + 8) & 1) != 0)
    return 1;
  result = sub_22E49F6F8(a1);
  if ((_DWORD)result)
    return sub_22E49F910(a1);
  return result;
}

uint64_t sub_22E49F910(unint64_t a1)
{
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  if ((*(_WORD *)(*(_QWORD *)(a1 + 128) + 8) & 4) == 0)
    return 0;
  if ((*(_DWORD *)(a1 + 72) & 0xE000) == 0x4000)
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
    if ((**(_QWORD **)(a1 + 128) & 0x800000) == 0)
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
      if ((**(_QWORD **)(a1 + 128) & 0x100000) != 0)
        return (*(unsigned __int8 *)(sub_22EFC8868(a1) + 1) >> 4) & 1;
    }
  }
  return 1;
}

unint64_t sub_22E49F9AC(unint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t result;

  v1 = a1;
  v2 = sub_22EFC3500(a1);
  if (v2)
    v1 = v2;
  if ((*(_WORD *)(v1 + 72) & 0x80) != 0)
    sub_22EFCC320(v1 + 64);
  for (result = *(_QWORD *)(v1 + 80); result; result = *(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF8)
  {
    if ((*(_DWORD *)(result + 28) & 0x7F) == 0x43)
      break;
  }
  return result;
}

_DWORD *sub_22E49FA0C(_DWORD *result, uint64_t a2)
{
  int v2;
  int v3;
  int v4;

  if (a2 <= 7)
  {
    v2 = *result | a2;
LABEL_11:
    *result = v2;
    goto LABEL_12;
  }
  v3 = (a2 >> 9) & 3;
  if (((*result >> 9) & 3) > v3)
    v3 = (*result >> 9) & 3;
  v4 = a2 & 7 | *result & 0xFFFFF9FF | (v3 << 9);
  if (a2 > 0x7FF)
    v4 = a2 & 0xFFFFF800 | a2 & 7 | *result & 0x1FF | (v3 << 9) & 0x7FF;
  if ((a2 & 0x30) != 0)
    v4 = v4 & 0xFFFFFFCF | a2 & 0x30;
  *result = v4;
  if ((a2 & 0x1C0) != 0)
  {
    v2 = v4 | a2 & 0x1C0;
    goto LABEL_11;
  }
LABEL_12:
  if ((a2 & 0xC00000000) != 0)
    result[1] = HIDWORD(a2);
  return result;
}

llvm::APInt *sub_22E49FA8C(llvm::APInt *this, unsigned int a2, uint64_t a3)
{
  unint64_t v4;

  *((_DWORD *)this + 2) = a2;
  if (a2 > 0x40)
  {
    llvm::APInt::initSlowCase(this);
  }
  else
  {
    v4 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
    if (!a2)
      v4 = 0;
    *(_QWORD *)this = v4 & a3;
  }
  return this;
}

uint64_t sub_22E49FAE8(uint64_t a1)
{
  if ((*(_BYTE *)a1 & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(a1 + 8), (void *)(16 * *(unsigned int *)(a1 + 16)));
  return a1;
}

void sub_22E49FB24(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 8;
      do
      {
        if (*(_QWORD *)v6)
          llvm::MetadataTracking::untrack();
        v7 = v6 - 8;
        v6 -= 16;
      }
      while (v7 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_22E49FBA4(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 1;
      do
      {
        if (*v6)
          llvm::MetadataTracking::untrack();
      }
      while (v6-- != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sub_22E49FC24(uint64_t a1, _QWORD *a2, void *__s1, unint64_t a4)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v9;
  unint64_t v10;
  size_t v11;
  const void *v12;
  int v13;
  int v14;

  v6 = (_QWORD *)(a1 + 8);
  v5 = *(_QWORD **)(a1 + 8);
  if (v5)
  {
    while (1)
    {
      v9 = v5;
      v10 = v5[5];
      v11 = v10 >= a4 ? a4 : v5[5];
      if (!v11)
        break;
      v12 = (const void *)v5[4];
      v13 = memcmp(__s1, v12, v11);
      if (v13)
      {
        if ((v13 & 0x80000000) == 0)
          goto LABEL_12;
LABEL_14:
        v14 = memcmp(v12, __s1, v11);
        if (!v14)
        {
LABEL_17:
          if (v10 <= a4)
            goto LABEL_21;
          goto LABEL_18;
        }
        if (v14 < 0)
          goto LABEL_21;
LABEL_18:
        v6 = v9 + 1;
        v5 = (_QWORD *)v9[1];
        if (!v5)
          goto LABEL_21;
      }
      else
      {
        if (v10 >= a4)
          goto LABEL_14;
LABEL_12:
        v5 = (_QWORD *)*v9;
        v6 = v9;
        if (!*v9)
          goto LABEL_21;
      }
    }
    if (v10 >= a4)
      goto LABEL_17;
    goto LABEL_12;
  }
  v9 = (_QWORD *)(a1 + 8);
LABEL_21:
  *a2 = v9;
  return v6;
}

uint64_t *sub_22E49FD00(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t sub_22E49FE98(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  _QWORD v12[5];

  v2 = (a1[1] - *a1) >> 3;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 61)
    abort();
  v6 = a1[2] - *a1;
  if (v6 >> 2 > v3)
    v3 = v6 >> 2;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8)
    v7 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v7 = v3;
  v12[4] = a1 + 2;
  if (v7)
  {
    if (v7 >> 61)
      sub_22E3B3F8C();
    v8 = (char *)operator new(8 * v7);
  }
  else
  {
    v8 = 0;
  }
  v9 = &v8[8 * v2];
  v12[0] = v8;
  v12[1] = v9;
  v12[3] = &v8[8 * v7];
  *(_QWORD *)v9 = a2;
  if (a2)
    llvm::MetadataTracking::track();
  v12[2] = v9 + 8;
  sub_22F258168(a1, v12);
  v10 = a1[1];
  sub_22F258220((uint64_t)v12);
  return v10;
}

_QWORD *sub_22E49FF7C(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F258394(a1, v4, (_QWORD *)v4 + 2 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22E4A003C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[5];

  v3 = (a1[1] - *a1) >> 4;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60)
    abort();
  v8 = a1[2] - *a1;
  if (v8 >> 3 > v4)
    v4 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v4;
  v14[4] = a1 + 2;
  if (v9)
  {
    if (v9 >> 60)
      sub_22E3B3F8C();
    v10 = (char *)operator new(16 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[16 * v3];
  v14[0] = v10;
  v14[1] = v11;
  v14[3] = &v10[16 * v9];
  *(_QWORD *)v11 = a2;
  *((_QWORD *)v11 + 1) = a3;
  if (a3)
    llvm::MetadataTracking::track();
  v14[2] = v11 + 16;
  sub_22F258464(a1, v14);
  v12 = a1[1];
  sub_22F25851C((uint64_t)v14);
  return v12;
}

_QWORD *sub_22E4A0130(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F25877C(a1, v4, (_QWORD *)v4 + 2 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

_QWORD *sub_22E4A01F0(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](8 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F258A1C(a1, v4, &v4[v3]);
    return (_QWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(8 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 8 * v10;
      do
      {
        *result++ = -4096;
        v11 -= 8;
      }
      while (v11);
    }
  }
  return result;
}

_QWORD *sub_22E4A02B0(void **a1, _QWORD *a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = (v2 - (_BYTE *)*a1) >> 3;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61)
    abort();
  v8 = (_BYTE *)a1[2] - v3;
  if (v8 >> 2 > v5)
    v5 = v8 >> 2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v9 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  if (v9)
  {
    if (v9 >> 61)
      sub_22E3B3F8C();
    v10 = (char *)operator new(8 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[8 * v4];
  *(_QWORD *)v11 = *a2;
  v12 = v11 + 8;
  if (v2 != v3)
  {
    do
    {
      v13 = *((_QWORD *)v2 - 1);
      v2 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    while (v2 != v3);
    v2 = (char *)*a1;
  }
  *a1 = v11;
  a1[1] = v12;
  a1[2] = &v10[8 * v9];
  if (v2)
    operator delete(v2);
  return v12;
}

_OWORD *sub_22E4A0388(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  char *v14;
  int v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_OWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result++ = xmmword_22F455D20;
        v11 -= 16;
      }
      while (v11);
    }
    v12 = (char *)(16 * v3);
    if ((_DWORD)v3)
    {
      v13 = (uint64_t *)((char *)v4 + 8);
      v14 = v12;
      do
      {
        v15 = *((unsigned __int8 *)v13 - 8);
        v16 = *v13;
        if ((v15 != 255 || v16 != -4096) && (v15 != 254 || v16 != -8192))
        {
          v20 = 0;
          sub_22F258B60(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v15, v16, &v20);
          v17 = v20;
          *v20 = *((_BYTE *)v13 - 8);
          *((_QWORD *)v17 + 1) = *v13;
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 2;
        v14 -= 16;
      }
      while (v14);
    }
    return (_OWORD *)llvm::deallocate_buffer(v4, v12);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v18 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v18)
    {
      v19 = 16 * v18;
      do
      {
        *result++ = xmmword_22F455D20;
        v19 -= 16;
      }
      while (v19);
    }
  }
  return result;
}

void sub_22E4A04F4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  const void **v5;
  __int16 v6;
  _QWORD v7[2];
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;

  v3 = *(_QWORD *)(a1 + 8);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v9 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 1;
  v11 = 0;
  v12 = 0;
  v10 = 0;
  v8 = (uint64_t *)(MEMORY[0x24BED83D8] + 16);
  v16 = a2;
  llvm::raw_ostream::SetBufferAndMode();
  v4 = *(uint64_t **)a1;
  v7[0] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 144) + 15104) & 0xFFFF65FFDFFFBFFFLL | 0x120020000000 | (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 184) + 76) >> 1) & 0x1000000000;
  v7[1] = v3 + 1416;
  v6 = 257;
  sub_22F119558(v4, &v8, (uint64_t)v7, &v5, 0);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v8);
}

_QWORD *sub_22E4A05D4(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](32 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F258F7C(a1, (uint64_t)v4, (uint64_t)v4 + 32 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(32 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        *result = -4096;
        result += 4;
        v11 -= 32;
      }
      while (v11);
    }
  }
  return result;
}

void sub_22E4A0694(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_22E49000C(a2, *(_QWORD *)a1, **(_QWORD **)(a1 + 8), 1);
}

uint64_t sub_22E4A06A8(_QWORD *a1, _QWORD *a2)
{
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  else
    return *a2 < *a1;
}

void sub_22E4A06C4()
{
  std::__libcpp_verbose_abort("bad_function_call was thrown in -fno-exceptions mode");
  JUMPOUT(0x22E4A06D8);
}

void sub_22E4A06DC()
{
  JUMPOUT(0x2348A0E9CLL);
}

_QWORD *sub_22E4A06F0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_24FA63648;
  result[1] = v3;
  return result;
}

uint64_t sub_22E4A0724(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_24FA63648;
  a2[1] = v2;
  return result;
}

uint64_t sub_22E4A0740(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 8))
    __asm { BR              X9 }
  return 1;
}

uint64_t sub_22E4A088C(char *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _DWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  int v41;
  uint64_t v42;
  BOOL v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  _DWORD v49[2];
  uint64_t v50;

  if (a2 < 0x10)
    return 1;
  while (2)
  {
    v4 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
    v5 = *(_DWORD *)(v4 + 16);
    switch((char)v5)
    {
      case 0:
      case 1:
      case 4:
      case 7:
      case 8:
      case 10:
      case 12:
      case 29:
      case 32:
      case 36:
      case 37:
      case 38:
      case 39:
      case 54:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 9)
          goto LABEL_5;
        goto LABEL_62;
      case 2:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9)
          goto LABEL_62;
        result = sub_22E4A088C(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        if ((*(_BYTE *)(v4 + 19) & 2) == 0)
          return 1;
        v14 = *(_QWORD *)(v4 + 56);
        if (!v14)
          return 1;
        goto LABEL_74;
      case 3:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9)
          goto LABEL_62;
        result = sub_22E4A088C(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v14 = *(_QWORD *)(v4 + 48);
        if (v14)
          goto LABEL_74;
        return 1;
      case 5:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9)
          goto LABEL_62;
        result = sub_22E4A088C(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v13 = *(_QWORD *)(v4 + 40);
        return sub_22E4A103C((uint64_t)a1, v13, 0);
      case 6:
      case 55:
      case 56:
        goto LABEL_62;
      case 9:
      case 11:
      case 27:
      case 34:
      case 35:
      case 47:
      case 50:
      case 52:
      case 53:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 9)
          return 1;
        goto LABEL_62;
      case 13:
      case 48:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9)
          goto LABEL_62;
        v13 = *(_QWORD *)(v4 + 24);
        return sub_22E4A103C((uint64_t)a1, v13, 0);
      case 14:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9)
          goto LABEL_62;
        result = sub_22E4A088C(a1, *(_QWORD *)(v4 + 24));
        if (!(_DWORD)result)
          return result;
        v15 = *(_QWORD *)(v4 + 40);
        if (!v15)
          return 1;
        result = sub_22E4AC974(a1, v15);
        if (!(_DWORD)result)
          return result;
        v16 = *(unsigned int *)(v4 + 20);
        if (!(_DWORD)v16)
          return 1;
        v17 = v4 + 48;
        v18 = v16 - 1;
        do
        {
          result = sub_22E4B1804((uint64_t)a1, v17);
          v19 = v18-- != 0;
          v20 = v19;
          if (!(_DWORD)result)
            break;
          v17 += 24;
        }
        while ((v20 & 1) != 0);
        return result;
      case 15:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9)
          goto LABEL_62;
        result = sub_22E4B1740((uint64_t)a1, *(_QWORD *)(v4 + 40));
        if (!(_DWORD)result)
          return result;
LABEL_13:
        v6 = (unint64_t *)(v4 + 24);
        goto LABEL_6;
      case 16:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9)
          goto LABEL_62;
        v7 = *(_QWORD *)(v4 + 40);
        goto LABEL_18;
      case 17:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9)
          goto LABEL_62;
        v13 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFFCLL;
        return sub_22E4A103C((uint64_t)a1, v13, 0);
      case 18:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9)
          goto LABEL_62;
        return sub_22E4B17A0((uint64_t)a1, *(_QWORD *)(v4 + 32));
      case 19:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9)
          goto LABEL_62;
        v7 = *(_QWORD *)(v4 + 40);
        if (!v7)
          goto LABEL_19;
LABEL_18:
        result = sub_22E4A103C((uint64_t)a1, v7, 0);
        if (!(_DWORD)result)
          return result;
LABEL_19:
        v6 = (unint64_t *)(v4 + 48);
        goto LABEL_6;
      case 20:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9)
          goto LABEL_62;
        result = sub_22E4B17A0((uint64_t)a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v21 = *(unsigned int *)(v4 + 20);
        if (!(_DWORD)v21)
          return 1;
        v22 = v4 + 48;
        v23 = v21 - 1;
        do
        {
          result = sub_22E4B1804((uint64_t)a1, v22);
          v19 = v23-- != 0;
          v24 = v19;
          if (!(_DWORD)result)
            break;
          v22 += 24;
        }
        while ((v24 & 1) != 0);
        return result;
      case 21:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9)
          goto LABEL_62;
        v8 = *(_QWORD *)(v4 + 48);
        if (v8)
        {
          result = sub_22E4A103C((uint64_t)a1, v8, 0);
          if (!(_DWORD)result)
            return result;
        }
        goto LABEL_32;
      case 22:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9)
          goto LABEL_62;
        goto LABEL_36;
      case 23:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9)
          goto LABEL_62;
        v9 = *(_QWORD *)(v4 + 64);
        if (!v9)
          goto LABEL_5;
        goto LABEL_37;
      case 24:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9)
          goto LABEL_62;
        v10 = *(_QWORD *)(v4 + 32);
        if (v10)
        {
          result = sub_22E4B17A0((uint64_t)a1, v10);
          if (!(_DWORD)result)
            return result;
        }
LABEL_32:
        v6 = (unint64_t *)(v4 + 40);
        goto LABEL_6;
      case 25:
      case 28:
      case 49:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9)
          goto LABEL_62;
        goto LABEL_13;
      case 26:
        result = sub_22E4B18D0(a1, *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
        if (!(_DWORD)result)
          return result;
        result = sub_22E4A088C(a1, *(_QWORD *)(v4 + 24));
        if (!(_DWORD)result)
          return result;
        v25 = *(_QWORD *)(v4 + 16);
        v26 = (unsigned __int16)(v25 >> 38);
        if (!(unsigned __int16)(v25 >> 38))
          goto LABEL_113;
        v27 = 8 * v26;
        v28 = (_QWORD *)(v4 + 40);
        do
        {
          if ((sub_22E4A088C(a1, *v28) & 1) == 0)
            return 0;
          ++v28;
          v27 -= 8;
        }
        while (v27);
        v25 = *(_QWORD *)(v4 + 16);
        v26 = (unsigned __int16)(v25 >> 38);
LABEL_113:
        if ((v25 & 0x3C0000000000000) == 0x80000000000000)
        {
          v29 = (_DWORD *)((v4 + 40 + 8 * v26 + 4 * ((v25 >> 59) & 1) + 7) & 0xFFFFFFFFFFFFFFF8);
          v32 = *v29;
          v31 = v29 + 2;
          v30 = v32;
          if (v32)
          {
            v33 = 8 * v30;
            while ((sub_22E4A088C(a1, *v31) & 1) != 0)
            {
              ++v31;
              v33 -= 8;
              if (!v33)
                goto LABEL_118;
            }
            return 0;
          }
        }
LABEL_118:
        v34 = sub_22F257D3C(v4);
        if (v34)
        {
          v14 = v34;
LABEL_74:
          result = sub_22E4A103C((uint64_t)a1, v14, 0);
          if (!(_DWORD)result)
            return result;
        }
        return 1;
      case 30:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9)
          goto LABEL_62;
        v11 = *(_QWORD *)(v4 + 48);
        if (v11)
        {
          result = sub_22E4A103C((uint64_t)a1, v11, 0);
          if (!(_DWORD)result)
            return result;
        }
LABEL_36:
        v9 = *(_QWORD *)(v4 + 56);
        if (!v9)
          goto LABEL_5;
LABEL_37:
        result = sub_22E4A103C((uint64_t)a1, v9, 0);
        if (!(_DWORD)result)
          return result;
        goto LABEL_5;
      case 31:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9)
          goto LABEL_62;
        v12 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFF0;
        goto LABEL_59;
      case 33:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9)
          goto LABEL_62;
        v35 = *(_QWORD *)(v4 + 24);
        if (*(_QWORD *)(v35 & 0xFFFFFFFFFFFFFFF0) != v4)
        {
          result = sub_22E4A088C(a1, v35);
          if (!(_DWORD)result)
            return result;
        }
        v36 = (*(_QWORD *)(v4 + 16) >> 19) & 0x7FLL;
        if (!v36)
          return 1;
        v37 = (uint64_t *)(v4 + 48);
        v38 = 8 * v36 - 8;
        do
        {
          v39 = *v37++;
          result = sub_22E4A088C(a1, v39);
          if ((_DWORD)result)
            v40 = v38 == 0;
          else
            v40 = 1;
          v38 -= 8;
        }
        while (!v40);
        return result;
      case 40:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9)
          goto LABEL_62;
        while ((v5 & 0x100000) != 0)
        {
          v4 = *(_QWORD *)(*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v4)
          {
            v5 = *(_DWORD *)(v4 + 16);
            if ((v5 & 0xFE) == 0x28)
              continue;
          }
          v4 = sub_22F10CF48(v4);
          v5 = *(_DWORD *)(v4 + 16);
        }
        goto LABEL_5;
      case 41:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9)
          goto LABEL_62;
        while ((v5 & 0x100000) != 0)
        {
          v4 = *(_QWORD *)(*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v4)
          {
            v5 = *(_DWORD *)(v4 + 16);
            if ((v5 & 0xFE) == 0x28)
              continue;
          }
          v4 = sub_22F10CF48(v4);
          v5 = *(_DWORD *)(v4 + 16);
        }
        goto LABEL_5;
      case 42:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9)
          goto LABEL_62;
        v41 = *(_DWORD *)(v4 + 20);
        v50 = *(_QWORD *)(v4 + 40);
        v49[0] = 8;
        v49[1] = v41;
        return sub_22E4B1804((uint64_t)a1, (uint64_t)v49);
      case 43:
        a2 = *(_QWORD *)(v4 + 8);
        if (*(_BYTE *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 16) == 9)
          goto LABEL_62;
        goto LABEL_7;
      case 44:
        v42 = sub_22F114198(*(_QWORD *)(v4 + 24));
        if (!v42)
          return 1;
        v43 = *(_QWORD *)(v42 + 40) >= 8uLL && (*(_QWORD *)(v42 + 40) & 7) == 0;
        if (v43 && sub_22EFB948C(v42) > 2)
          return 1;
        goto LABEL_62;
      case 45:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9)
          goto LABEL_62;
        v44 = sub_22E4B1940(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
        if (v44)
          *a1 = 0;
        return v44 ^ 1u;
      case 46:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9)
          goto LABEL_62;
        result = sub_22E4B1740((uint64_t)a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v45 = *(unsigned int *)(v4 + 20);
        if (!(_DWORD)v45)
          return 1;
        v46 = v4 + 40;
        v47 = v45 - 1;
        do
        {
          result = sub_22E4B1804((uint64_t)a1, v46);
          v19 = v47-- != 0;
          v48 = v19;
          if (!(_DWORD)result)
            break;
          v46 += 24;
        }
        while ((v48 & 1) != 0);
        return result;
      case 51:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 9)
        {
          v12 = *(_QWORD *)(v4 + 24);
LABEL_59:
          result = sub_22E4A088C(a1, v12);
          if (!(_DWORD)result)
            return result;
LABEL_5:
          v6 = (unint64_t *)(v4 + 32);
LABEL_6:
          a2 = *v6;
LABEL_7:
          if (a2 < 0x10)
            return 1;
          continue;
        }
LABEL_62:
        result = 0;
        *a1 = 0;
        return result;
      default:
        return 1;
    }
  }
}

uint64_t sub_22E4A103C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unsigned int v5;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD v17[10];

  v17[8] = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    if (a3)
    {
      v4 = a2 & 0xFFFFFFFFFFFFFFFBLL;
      v5 = *(_DWORD *)(a3 + 8);
      if (v5 >= *(_DWORD *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v5 = *(_DWORD *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v5) = v4;
      ++*(_DWORD *)(a3 + 8);
    }
    else
    {
      v17[0] = a2 & 0xFFFFFFFFFFFFFFFBLL;
      v16 = 0x800000001;
      v7 = 1;
      do
      {
        v8 = v7;
        v9 = &v17[v7];
        v10 = *(v9 - 1);
        if ((v10 & 4) != 0)
        {
          v7 = v8 - 1;
          LODWORD(v16) = v8 - 1;
        }
        else
        {
          *(v9 - 1) = v10 | 4;
          v11 = *(unsigned __int8 *)(v10 & 0xFFFFFFFFFFFFFFF8) - 1;
          if (v11 <= 0xEB)
            __asm { BR              X9 }
          v7 = v16;
          if ((_DWORD)v8 != (_DWORD)v16)
          {
            v12 = &v17[v16 - 1];
            if (&v17[v8] < v12)
            {
              v13 = &v17[v8 + 1];
              do
              {
                v14 = *(v13 - 1);
                *(v13 - 1) = *v12;
                *v12-- = v14;
              }
              while (v13++ < v12);
            }
          }
        }
      }
      while (v7);
    }
  }
  return 1;
}

uint64_t sub_22E4AC974(char *a1, unint64_t a2)
{
  unint64_t v4;
  int v5;
  uint64_t result;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  char *v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t **v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t **v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  BOOL v52;
  uint64_t v53;
  uint64_t **v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t **v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t **v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t **v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t **v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t **v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int *v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int *v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  unsigned int v93;
  BOOL v94;
  uint64_t v95;
  uint64_t **v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t **v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t **v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t **v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t **v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t **v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t **v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  BOOL v127;
  uint64_t v128;
  uint64_t **v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  BOOL v134;
  uint64_t v135;
  uint64_t **v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t **v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t **v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153;
  BOOL v154;
  uint64_t v155;
  uint64_t **v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t **v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t **v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t **v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t *v177;
  unsigned int v178;
  uint64_t v179;
  uint64_t **v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int v184;
  BOOL v185;
  uint64_t v186;
  uint64_t **v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  unint64_t v192;
  unint64_t v193;
  unsigned int v194;
  uint64_t v195;
  uint64_t **v196;
  uint64_t *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t **v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t *v205;
  unint64_t *v206;
  unint64_t *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t **v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t **v216;
  uint64_t *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t **v220;
  uint64_t *v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int v224;
  BOOL v225;
  uint64_t v226;
  uint64_t **v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unsigned int v234;
  BOOL v235;
  uint64_t v236;
  uint64_t **v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t v240;
  unsigned int v241;
  BOOL v242;
  uint64_t v243;
  uint64_t **v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  _QWORD *v252;
  uint64_t **v253;
  uint64_t *v254;
  uint64_t v255;
  uint64_t v256;
  unsigned int v257;
  uint64_t v258;
  uint64_t **v259;
  uint64_t *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t **v263;
  uint64_t *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t *v268;
  unsigned int v269;
  uint64_t v270;
  uint64_t **v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  _DWORD *v275;
  uint64_t v276;
  uint64_t *v277;
  unsigned int v278;
  uint64_t v279;
  unsigned int v280;
  BOOL v281;
  uint64_t v282;
  uint64_t **v283;
  uint64_t *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  uint64_t v289;
  unsigned int v290;
  BOOL v291;
  uint64_t v292;
  uint64_t **v293;
  uint64_t *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t **v297;
  uint64_t *v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t **v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unsigned int v305;
  BOOL v306;
  uint64_t v307;
  uint64_t **v308;
  uint64_t *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t **v312;
  uint64_t *v313;
  uint64_t v314;
  uint64_t v315;
  int v316;
  uint64_t v317;
  unsigned int v318;
  uint64_t v319;
  uint64_t **v320;
  uint64_t *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t **v324;
  uint64_t *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t **v328;
  uint64_t *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t **v332;
  uint64_t *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  unint64_t *v337;
  unsigned int v338;
  uint64_t v339;
  uint64_t **v340;
  uint64_t *v341;
  uint64_t v342;
  uint64_t v343;
  unsigned int v344;
  uint64_t v345;
  uint64_t **v346;
  uint64_t *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t **v350;
  uint64_t *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t *v356;
  uint64_t v357;
  unint64_t *v358;
  unint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t *v363;
  uint64_t v364;
  uint64_t **v365;
  uint64_t *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t **v369;
  uint64_t *v370;
  uint64_t v371;
  uint64_t v372;
  unsigned int v373;
  BOOL v374;
  uint64_t v375;
  uint64_t **v376;
  uint64_t *v377;
  uint64_t v378;
  uint64_t v379;
  unint64_t v380;
  unint64_t v381;
  unsigned int v382;
  uint64_t v383;
  uint64_t **v384;
  uint64_t *v385;
  uint64_t v386;
  uint64_t v387;
  unint64_t v388;
  uint64_t v389;
  unsigned int v390;
  uint64_t v391;
  uint64_t **v392;
  uint64_t *v393;
  uint64_t v394;
  uint64_t v395;
  unsigned int v396;
  uint64_t v397;
  uint64_t **v398;
  uint64_t *v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  unint64_t v403;
  unint64_t *v404;
  unsigned int v405;
  uint64_t v406;
  uint64_t **v407;
  uint64_t *v408;
  uint64_t v409;
  uint64_t v410;
  unsigned int v411;
  BOOL v412;
  uint64_t v413;
  uint64_t **v414;
  uint64_t *v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t **v418;
  uint64_t *v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t **v422;
  uint64_t *v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t **v426;
  uint64_t *v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t **v430;
  uint64_t *v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t **v434;
  uint64_t *v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t **v438;
  uint64_t *v439;
  uint64_t v440;
  uint64_t v441;
  int v442;
  uint64_t v443;
  unsigned int v444;
  uint64_t v445;
  uint64_t **v446;
  uint64_t *v447;
  uint64_t v448;
  uint64_t v449;
  unint64_t v450;
  unsigned int v451;
  uint64_t v452;
  uint64_t **v453;
  uint64_t *v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t **v457;
  uint64_t *v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t **v461;
  uint64_t *v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t i;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  unsigned int v471;
  BOOL v472;
  uint64_t v473;
  uint64_t **v474;
  uint64_t *v475;
  uint64_t v476;
  uint64_t v477;
  unsigned int v478;
  uint64_t v479;
  uint64_t **v480;
  uint64_t *v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t **v484;
  uint64_t *v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t *v488;
  uint64_t **v489;
  uint64_t *v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t *v493;
  unsigned int v494;
  uint64_t v495;
  uint64_t **v496;
  uint64_t *v497;
  uint64_t v498;
  uint64_t v499;
  char *v500;
  uint64_t v501;
  uint64_t **v502;
  uint64_t *v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t **v506;
  uint64_t *v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t **v511;
  uint64_t *v512;
  uint64_t v513;
  uint64_t v514;
  unint64_t v515;
  uint64_t v516;
  unsigned int v517;
  uint64_t v518;
  uint64_t **v519;
  uint64_t *v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t **v530;
  uint64_t *v531;
  uint64_t v532;
  uint64_t v533;
  BOOL v534;
  uint64_t **v535;
  uint64_t *v536;
  uint64_t v537;
  uint64_t v538;
  BOOL v539;
  BOOL v540;
  BOOL v541;
  BOOL v542;
  BOOL v543;
  int *v544;
  BOOL v545;
  BOOL v546;
  BOOL v547;
  uint64_t **v548;
  uint64_t *v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  int v559;
  uint64_t v560;

  if (!a2)
    return 1;
  v4 = a2 + 28;
  v5 = *(_DWORD *)(a2 + 28) & 0x7F;
  if ((*(_DWORD *)(a2 + 28) & 0x200) != 0)
  {
    if (v5 == 38)
      return sub_22E4B07FC(a1, a2);
    return 1;
  }
  switch(v5)
  {
    case 0:
      result = sub_22E4C43EC((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v8 = *v7;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v10 = *(_QWORD *)v9 + 8 * *(unsigned int *)(v9 + 8);
      }
      else
      {
        v10 = 0;
      }
      while (2)
      {
        if (v8 == (uint64_t *)v10)
          return 1;
        if ((sub_22E4C4488((uint64_t)a1, *v8) & 1) != 0)
        {
          ++v8;
          continue;
        }
        break;
      }
      return 0;
    case 1:
      v248 = *(unint64_t **)(a2 + 96);
      if (v248)
      {
        result = sub_22E4B0C6C(a1, *v248, (uint64_t)(v248 + 1));
        if (!(_DWORD)result)
          return result;
      }
      v249 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
      result = sub_22E4A103C(a1, v249, 0);
      if (!(_DWORD)result)
        return result;
      v250 = *(unsigned int *)(a2 + 112);
      if (!(_DWORD)v250)
        goto LABEL_454;
      v251 = 16 * v250;
      v252 = (_QWORD *)(*(_QWORD *)(a2 + 104) + 8);
      while (1)
      {
        if (*v252)
        {
          result = sub_22E4A103C(a1, *v252, 0);
          if (!(_DWORD)result)
            break;
        }
        v252 += 2;
        v251 -= 16;
        if (!v251)
        {
LABEL_454:
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v254 = *v253;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v256 = *(_QWORD *)v255 + 8 * *(unsigned int *)(v255 + 8);
            }
            else
            {
              v256 = 0;
            }
            while (v254 != (uint64_t *)v256)
            {
              if ((sub_22E4C4488((uint64_t)a1, *v254) & 1) == 0)
                return 0;
              ++v254;
            }
          }
          return 1;
        }
      }
      return result;
    case 2:
      result = sub_22E4A103C(a1, *(_QWORD *)(a2 + 80) & 0xFFFFFFFFFFFFFFF8, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v217 = *v216;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v219 = *(_QWORD *)v218 + 8 * *(unsigned int *)(v218 + 8);
      }
      else
      {
        v219 = 0;
      }
      while (2)
      {
        if (v217 == (uint64_t *)v219)
          return 1;
        if ((sub_22E4C4488((uint64_t)a1, *v217) & 1) != 0)
        {
          ++v217;
          continue;
        }
        break;
      }
      return 0;
    case 3:
      result = sub_22E4AC974(a1);
      if (!(_DWORD)result)
        return result;
      v231 = *(_QWORD *)(a2 + 48);
      if (!v231)
        goto LABEL_421;
      v232 = *(unsigned int *)(v231 + 8);
      if (!(_DWORD)v232)
        goto LABEL_421;
      v233 = v231 + 16;
      while ((sub_22E4B1628((uint64_t)a1, v233) & 1) != 0)
      {
        v233 += 32;
        if (!--v232)
        {
LABEL_421:
          v234 = *(_DWORD *)v4 & 0x7F;
          v235 = v234 > 0x39 || ((1 << v234) & 0x3F0003E01011066) == 0;
          if (v235
            && (v234 - 70 <= 0xD ? (v541 = ((1 << (v234 - 70)) & 0x2803) == 0) : (v541 = 1), v541 && v234 - 19 > 4))
          {
            v236 = 0;
          }
          else
          {
            v236 = sub_22EFCAE04(a2);
          }
          result = sub_22E4C43EC((uint64_t)a1, v236);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v238 = *v237;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v240 = *(_QWORD *)v239 + 8 * *(unsigned int *)(v239 + 8);
            }
            else
            {
              v240 = 0;
            }
            while (v238 != (uint64_t *)v240)
            {
              if ((sub_22E4C4488((uint64_t)a1, *v238) & 1) == 0)
                return 0;
              ++v238;
            }
          }
          return 1;
        }
      }
      return 0;
    case 4:
      result = sub_22E4C43EC((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v173 = *v172;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v175 = *(_QWORD *)v174 + 8 * *(unsigned int *)(v174 + 8);
      }
      else
      {
        v175 = 0;
      }
      while (2)
      {
        if (v173 == (uint64_t *)v175)
          return 1;
        if ((sub_22E4C4488((uint64_t)a1, *v173) & 1) != 0)
        {
          ++v173;
          continue;
        }
        break;
      }
      return 0;
    case 5:
      result = sub_22E4C43EC((uint64_t)a1, a2 + 40);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v298 = *v297;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v300 = *(_QWORD *)v299 + 8 * *(unsigned int *)(v299 + 8);
      }
      else
      {
        v300 = 0;
      }
      while (2)
      {
        if (v298 == (uint64_t *)v300)
          return 1;
        if ((sub_22E4C4488((uint64_t)a1, *v298) & 1) != 0)
        {
          ++v298;
          continue;
        }
        break;
      }
      return 0;
    case 6:
      result = sub_22E4C43EC((uint64_t)a1, a2 + 40);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v325 = *v324;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v327 = *(_QWORD *)v326 + 8 * *(unsigned int *)(v326 + 8);
      }
      else
      {
        v327 = 0;
      }
      while (2)
      {
        if (v325 == (uint64_t *)v327)
          return 1;
        if ((sub_22E4C4488((uint64_t)a1, *v325) & 1) != 0)
        {
          ++v325;
          continue;
        }
        break;
      }
      return 0;
    case 7:
      result = sub_22E4A103C(a1, *(_QWORD *)(a2 + 40), 0);
      if (!(_DWORD)result)
        return result;
      v241 = *(_DWORD *)v4 & 0x7F;
      v242 = v241 > 0x39 || ((1 << v241) & 0x3F0003E01011066) == 0;
      v243 = !v242 || v241 - 70 <= 0xD && ((1 << (v241 - 70)) & 0x2803) != 0 || v241 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E4C43EC((uint64_t)a1, v243);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v245 = *v244;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v247 = *(_QWORD *)v246 + 8 * *(unsigned int *)(v246 + 8);
      }
      else
      {
        v247 = 0;
      }
      while (2)
      {
        if (v245 == (uint64_t *)v247)
          return 1;
        if ((sub_22E4C4488((uint64_t)a1, *v245) & 1) != 0)
        {
          ++v245;
          continue;
        }
        break;
      }
      return 0;
    case 8:
      v336 = *(_QWORD *)(a2 + 40);
      v337 = (unint64_t *)(v336 & 0xFFFFFFFFFFFFFFF8);
      if ((v336 & 4) != 0 && v337)
      {
        if ((sub_22E4B0C6C(a1, *v337, (uint64_t)(v337 + 1)) & 1) == 0)
          return 0;
      }
      else
      {
        result = sub_22E4AC974(a1);
        if (!(_DWORD)result)
          return result;
      }
      v478 = *(_DWORD *)v4 & 0x7F;
      if (v478 <= 0x39 && ((1 << v478) & 0x3F0003E01011066) != 0
        || v478 - 70 <= 0xD && ((1 << (v478 - 70)) & 0x2803) != 0
        || v478 - 19 <= 4)
      {
        v479 = sub_22EFCAE04(a2);
      }
      else
      {
        v479 = 0;
      }
      result = sub_22E4C43EC((uint64_t)a1, v479);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v481 = *v480;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v483 = *(_QWORD *)v482 + 8 * *(unsigned int *)(v482 + 8);
      }
      else
      {
        v483 = 0;
      }
      while (2)
      {
        if (v481 == (uint64_t *)v483)
          return 1;
        if ((sub_22E4C4488((uint64_t)a1, *v481) & 1) != 0)
        {
          ++v481;
          continue;
        }
        break;
      }
      return 0;
    case 9:
      v204 = *(_QWORD *)(a2 + 48);
      v205 = (unint64_t *)(v204 & 0xFFFFFFFFFFFFFFF8);
      if ((v204 & 4) != 0 && v205)
      {
        if ((sub_22E4B0C6C(a1, *v205, (uint64_t)(v205 + 1)) & 1) == 0)
          return 0;
      }
      else
      {
        result = sub_22E4AC974(a1);
        if (!(_DWORD)result)
          return result;
      }
      v465 = *(unsigned int *)(a2 + 36);
      if (!(_DWORD)v465)
        goto LABEL_859;
      for (i = 0; i != v465; ++i)
      {
        v467 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8 * i);
        v468 = *(_DWORD *)(v467 + 12) & 0x1FFFFFFF;
        if ((_DWORD)v468)
        {
          v469 = v467 + 16;
          v470 = 8 * v468;
          while ((sub_22E4AC974(a1) & 1) != 0)
          {
            v469 += 8;
            v470 -= 8;
            if (!v470)
              goto LABEL_858;
          }
          return 0;
        }
LABEL_858:
        ;
      }
LABEL_859:
      v471 = *(_DWORD *)v4 & 0x7F;
      v472 = v471 > 0x39 || ((1 << v471) & 0x3F0003E01011066) == 0;
      if (v472 && (v471 - 70 <= 0xD ? (v547 = ((1 << (v471 - 70)) & 0x2803) == 0) : (v547 = 1), v547 && v471 - 19 > 4))
        v473 = 0;
      else
        v473 = sub_22EFCAE04(a2);
      result = sub_22E4C43EC((uint64_t)a1, v473);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v475 = *v474;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v477 = *(_QWORD *)v476 + 8 * *(unsigned int *)(v476 + 8);
        }
        else
        {
          v477 = 0;
        }
        while (v475 != (uint64_t *)v477)
        {
          if ((sub_22E4C4488((uint64_t)a1, *v475) & 1) == 0)
            return 0;
          ++v475;
        }
      }
      return 1;
    case 10:
      result = sub_22E4C43EC((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v333 = *v332;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v335 = *(_QWORD *)v334 + 8 * *(unsigned int *)(v334 + 8);
      }
      else
      {
        v335 = 0;
      }
      while (2)
      {
        if (v333 == (uint64_t *)v335)
          return 1;
        if ((sub_22E4C4488((uint64_t)a1, *v333) & 1) != 0)
        {
          ++v333;
          continue;
        }
        break;
      }
      return 0;
    case 11:
      return (sub_22E4B0844((uint64_t)a1, a2) & 1) != 0;
    case 12:
      result = sub_22E4C43EC((uint64_t)a1, a2 + 40);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v201 = *v200;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v203 = *(_QWORD *)v202 + 8 * *(unsigned int *)(v202 + 8);
      }
      else
      {
        v203 = 0;
      }
      while (2)
      {
        if (v201 == (uint64_t *)v203)
          return 1;
        if ((sub_22E4C4488((uint64_t)a1, *v201) & 1) != 0)
        {
          ++v201;
          continue;
        }
        break;
      }
      return 0;
    case 13:
      if (!sub_22E4B0B2C(a1, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72)))
        return 0;
      v316 = *(_DWORD *)(a2 + 24);
      v317 = *(_QWORD *)(a2 + 80);
      v558 = *(_QWORD *)(a2 + 40);
      v559 = v316;
      v560 = v317;
      if (!sub_22E4B0BB4((uint64_t)a1, &v558))
        return 0;
      if ((v318 = *(_DWORD *)v4 & 0x7F, v318 <= 0x39) && ((1 << v318) & 0x3F0003E01011066) != 0
        || v318 - 70 <= 0xD && ((1 << (v318 - 70)) & 0x2803) != 0
        || v318 - 19 <= 4)
      {
        v319 = sub_22EFCAE04(a2);
      }
      else
      {
        v319 = 0;
      }
      if (!sub_22E4C43EC((uint64_t)a1, v319))
        return 0;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v321 = *v320;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v323 = *(_QWORD *)v322 + 8 * *(unsigned int *)(v322 + 8);
      }
      else
      {
        v323 = 0;
      }
      while (2)
      {
        if (v321 == (uint64_t *)v323)
          return 1;
        if ((sub_22E4C4488((uint64_t)a1, *v321) & 1) != 0)
        {
          ++v321;
          continue;
        }
        break;
      }
      return 0;
    case 14:
      result = sub_22E4C43EC((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v141 = *v140;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v143 = *(_QWORD *)v142 + 8 * *(unsigned int *)(v142 + 8);
      }
      else
      {
        v143 = 0;
      }
      while (2)
      {
        if (v141 == (uint64_t *)v143)
          return 1;
        if ((sub_22E4C4488((uint64_t)a1, *v141) & 1) != 0)
        {
          ++v141;
          continue;
        }
        break;
      }
      return 0;
    case 15:
      result = sub_22E4C43EC((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v221 = *v220;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v223 = *(_QWORD *)v222 + 8 * *(unsigned int *)(v222 + 8);
      }
      else
      {
        v223 = 0;
      }
      while (2)
      {
        if (v221 == (uint64_t *)v223)
          return 1;
        if ((sub_22E4C4488((uint64_t)a1, *v221) & 1) != 0)
        {
          ++v221;
          continue;
        }
        break;
      }
      return 0;
    case 16:
      result = sub_22E4C43EC((uint64_t)a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v123 = *v122;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v125 = *(_QWORD *)v124 + 8 * *(unsigned int *)(v124 + 8);
      }
      else
      {
        v125 = 0;
      }
      while (2)
      {
        if (v123 == (uint64_t *)v125)
          return 1;
        if ((sub_22E4C4488((uint64_t)a1, *v123) & 1) != 0)
        {
          ++v123;
          continue;
        }
        break;
      }
      return 0;
    case 17:
      result = sub_22E4B0B2C(a1, *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80));
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v264 = *v263;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v266 = *(_QWORD *)v265 + 8 * *(unsigned int *)(v265 + 8);
      }
      else
      {
        v266 = 0;
      }
      while (2)
      {
        if (v264 == (uint64_t *)v266)
          return 1;
        if ((sub_22E4C4488((uint64_t)a1, *v264) & 1) != 0)
        {
          ++v264;
          continue;
        }
        break;
      }
      return 0;
    case 18:
      result = sub_22E4C43EC((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v329 = *v328;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v331 = *(_QWORD *)v330 + 8 * *(unsigned int *)(v330 + 8);
      }
      else
      {
        v331 = 0;
      }
      while (2)
      {
        if (v329 == (uint64_t *)v331)
          return 1;
        if ((sub_22E4C4488((uint64_t)a1, *v329) & 1) != 0)
        {
          ++v329;
          continue;
        }
        break;
      }
      return 0;
    case 19:
      v361 = *(_QWORD *)(a2 + 112);
      if (!v361)
        goto LABEL_650;
      v362 = *(unsigned int *)(v361 + 8);
      if (!(_DWORD)v362)
        goto LABEL_650;
      v363 = (uint64_t *)(v361 + 16);
      v364 = 8 * v362;
      while ((sub_22E4B095C(a1, *v363) & 1) != 0)
      {
        ++v363;
        v364 -= 8;
        if (!v364)
        {
LABEL_650:
          result = sub_22E4C43EC((uint64_t)a1, a2 + 48);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v366 = *v365;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v368 = *(_QWORD *)v367 + 8 * *(unsigned int *)(v367 + 8);
            }
            else
            {
              v368 = 0;
            }
            while (v366 != (uint64_t *)v368)
            {
              if ((sub_22E4C4488((uint64_t)a1, *v366) & 1) == 0)
                return 0;
              ++v366;
            }
          }
          return 1;
        }
      }
      return 0;
    case 20:
      result = sub_22E4C43EC((uint64_t)a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v284 = *v283;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v286 = *(_QWORD *)v285 + 8 * *(unsigned int *)(v285 + 8);
      }
      else
      {
        v286 = 0;
      }
      while (2)
      {
        if (v284 == (uint64_t *)v286)
          return 1;
        if ((sub_22E4C4488((uint64_t)a1, *v284) & 1) != 0)
        {
          ++v284;
          continue;
        }
        break;
      }
      return 0;
    case 21:
      result = sub_22E4C43EC((uint64_t)a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v313 = *v312;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v315 = *(_QWORD *)v314 + 8 * *(unsigned int *)(v314 + 8);
      }
      else
      {
        v315 = 0;
      }
      while (2)
      {
        if (v313 == (uint64_t *)v315)
          return 1;
        if ((sub_22E4C4488((uint64_t)a1, *v313) & 1) != 0)
        {
          ++v313;
          continue;
        }
        break;
      }
      return 0;
    case 22:
      v354 = *(_QWORD *)(a2 + 112);
      if (!v354)
        goto LABEL_637;
      v355 = *(unsigned int *)(v354 + 8);
      if (!(_DWORD)v355)
        goto LABEL_637;
      v356 = (uint64_t *)(v354 + 16);
      v357 = 8 * v355;
      while ((sub_22E4B095C(a1, *v356) & 1) != 0)
      {
        ++v356;
        v357 -= 8;
        if (!v357)
        {
LABEL_637:
          v358 = (unint64_t *)sub_22F259044(a2);
          if (v358)
          {
            result = sub_22E4B0C6C(a1, *v358, (uint64_t)(v358 + 1));
            if (!(_DWORD)result)
              return result;
          }
          v359 = *(_QWORD *)(a2 + 120);
          if (!v359)
          {
            sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 96) + 88), *(_QWORD *)(a2 + 96));
            v359 = *(_QWORD *)(a2 + 120);
          }
          if (v359 < 8)
            v360 = 0;
          else
            v360 = *(_QWORD *)(v359 & 0xFFFFFFFFFFFFFFF8);
          if (v360 == a2)
          {
            v552 = sub_22F2590A8(a2);
            v553 = sub_22F25910C(a2);
            v554 = sub_22F259178(a2);
            v555 = sub_22F2591DC(a2);
            if (v552 != v553 && v554 != v555)
            {
              v556 = v554 + 4;
              v557 = v552 + 8;
              do
              {
                if (v557 == v553)
                  break;
                v557 += 8;
                v31 = v556 == v555;
                v556 += 4;
              }
              while (!v31);
            }
          }
          result = sub_22E4C43EC((uint64_t)a1, a2 + 48);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v531 = *v530;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v533 = *(_QWORD *)v532 + 8 * *(unsigned int *)(v532 + 8);
            }
            else
            {
              v533 = 0;
            }
            while (v531 != (uint64_t *)v533)
            {
              if ((sub_22E4C4488((uint64_t)a1, *v531) & 1) == 0)
                return 0;
              ++v531;
            }
          }
          return 1;
        }
      }
      return 0;
    case 23:
      v388 = *(_QWORD *)(a2 + 104);
      if (!v388)
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 96) + 88), *(_QWORD *)(a2 + 96));
        v388 = *(_QWORD *)(a2 + 104);
      }
      if (v388 < 8)
        v389 = 0;
      else
        v389 = *(_QWORD *)(v388 & 0xFFFFFFFFFFFFFFF8);
      if (v389 == a2)
      {
        v523 = sub_22F259248(a2);
        v525 = v524;
        v526 = sub_22F2592CC(a2);
        if (v523 != v525 && v526 != v527)
        {
          v528 = v526 + 4;
          v529 = v523 + 8;
          do
          {
            if (v529 == v525)
              break;
            v529 += 8;
            v31 = v528 == v527;
            v528 += 4;
          }
          while (!v31);
        }
      }
      result = sub_22E4C43EC((uint64_t)a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v485 = *v484;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v487 = *(_QWORD *)v486 + 8 * *(unsigned int *)(v486 + 8);
      }
      else
      {
        v487 = 0;
      }
      while (2)
      {
        if (v485 == (uint64_t *)v487)
          return 1;
        if ((sub_22E4C4488((uint64_t)a1, *v485) & 1) != 0)
        {
          ++v485;
          continue;
        }
        break;
      }
      return 0;
    case 24:
      v207 = *(unint64_t **)(a2 + 88);
      if (v207)
      {
        result = sub_22E4B0C6C(a1, *v207, (uint64_t)(v207 + 1));
        if (!(_DWORD)result)
          return result;
      }
      v208 = *(unsigned int *)(a2 + 104);
      if (!(_DWORD)v208)
        goto LABEL_379;
      v209 = *(_QWORD *)(a2 + 96);
      v210 = 8 * v208;
      while ((sub_22E4AC974(a1) & 1) != 0)
      {
        v209 += 8;
        v210 -= 8;
        if (!v210)
        {
LABEL_379:
          if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)a2 + 72))(a2))
          {
            v211 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
            result = sub_22E4A103C(a1, v211, 0);
            if (!(_DWORD)result)
              return result;
          }
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v213 = *v212;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v215 = *(_QWORD *)v214 + 8 * *(unsigned int *)(v214 + 8);
            }
            else
            {
              v215 = 0;
            }
            while (v213 != (uint64_t *)v215)
            {
              if ((sub_22E4C4488((uint64_t)a1, *v213) & 1) == 0)
                return 0;
              ++v213;
            }
          }
          return 1;
        }
      }
      return 0;
    case 25:
      v206 = *(unint64_t **)(a2 + 64);
      if (v206)
      {
        if ((sub_22E4B0C6C(a1, *v206, (uint64_t)(v206 + 1)) & 1) == 0)
          return 0;
      }
      else
      {
        result = sub_22E4A088C(a1, *(_QWORD *)(a2 + 56));
        if (!(_DWORD)result)
          return result;
      }
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v507 = *v506;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v509 = *(_QWORD *)v508 + 8 * *(unsigned int *)(v508 + 8);
      }
      else
      {
        v509 = 0;
      }
      while (2)
      {
        if (v507 == (uint64_t *)v509)
          return 1;
        if ((sub_22E4C4488((uint64_t)a1, *v507) & 1) != 0)
        {
          ++v507;
          continue;
        }
        break;
      }
      return 0;
    case 26:
      result = sub_22E4C4A24((uint64_t)a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      v411 = *(_DWORD *)v4 & 0x7F;
      v412 = v411 > 0x39 || ((1 << v411) & 0x3F0003E01011066) == 0;
      v413 = !v412 || v411 - 70 <= 0xD && ((1 << (v411 - 70)) & 0x2803) != 0 || v411 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E4C43EC((uint64_t)a1, v413);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v415 = *v414;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v417 = *(_QWORD *)v416 + 8 * *(unsigned int *)(v416 + 8);
      }
      else
      {
        v417 = 0;
      }
      while (2)
      {
        if (v415 == (uint64_t *)v417)
          return 1;
        if ((sub_22E4C4488((uint64_t)a1, *v415) & 1) != 0)
        {
          ++v415;
          continue;
        }
        break;
      }
      return 0;
    case 27:
      result = sub_22E4C4A24((uint64_t)a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22E4A103C(a1, *(_QWORD *)(a2 + 64), 0);
      if (!(_DWORD)result)
        return result;
      if ((v112 = *(_DWORD *)v4 & 0x7F, v112 <= 0x39) && ((1 << v112) & 0x3F0003E01011066) != 0
        || v112 - 70 <= 0xD && ((1 << (v112 - 70)) & 0x2803) != 0
        || v112 - 19 <= 4)
      {
        v113 = sub_22EFCAE04(a2);
      }
      else
      {
        v113 = 0;
      }
      result = sub_22E4C43EC((uint64_t)a1, v113);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v115 = *v114;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v117 = *(_QWORD *)v116 + 8 * *(unsigned int *)(v116 + 8);
      }
      else
      {
        v117 = 0;
      }
      while (2)
      {
        if (v115 == (uint64_t *)v117)
          return 1;
        if ((sub_22E4C4488((uint64_t)a1, *v115) & 1) != 0)
        {
          ++v115;
          continue;
        }
        break;
      }
      return 0;
    case 28:
      result = sub_22E4C4A24((uint64_t)a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22E4AC974(a1);
      if (!(_DWORD)result)
        return result;
      if ((v390 = *(_DWORD *)v4 & 0x7F, v390 <= 0x39) && ((1 << v390) & 0x3F0003E01011066) != 0
        || v390 - 70 <= 0xD && ((1 << (v390 - 70)) & 0x2803) != 0
        || v390 - 19 <= 4)
      {
        v391 = sub_22EFCAE04(a2);
      }
      else
      {
        v391 = 0;
      }
      result = sub_22E4C43EC((uint64_t)a1, v391);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v393 = *v392;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v395 = *(_QWORD *)v394 + 8 * *(unsigned int *)(v394 + 8);
      }
      else
      {
        v395 = 0;
      }
      while (2)
      {
        if (v393 == (uint64_t *)v395)
          return 1;
        if ((sub_22E4C4488((uint64_t)a1, *v393) & 1) != 0)
        {
          ++v393;
          continue;
        }
        break;
      }
      return 0;
    case 29:
      result = sub_22E4C4A24((uint64_t)a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22E4AC974(a1);
      if (!(_DWORD)result)
        return result;
      if ((v396 = *(_DWORD *)v4 & 0x7F, v396 <= 0x39) && ((1 << v396) & 0x3F0003E01011066) != 0
        || v396 - 70 <= 0xD && ((1 << (v396 - 70)) & 0x2803) != 0
        || v396 - 19 <= 4)
      {
        v397 = sub_22EFCAE04(a2);
      }
      else
      {
        v397 = 0;
      }
      result = sub_22E4C43EC((uint64_t)a1, v397);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v399 = *v398;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v401 = *(_QWORD *)v400 + 8 * *(unsigned int *)(v400 + 8);
      }
      else
      {
        v401 = 0;
      }
      while (2)
      {
        if (v399 == (uint64_t *)v401)
          return 1;
        if ((sub_22E4C4488((uint64_t)a1, *v399) & 1) != 0)
        {
          ++v399;
          continue;
        }
        break;
      }
      return 0;
    case 30:
      result = sub_22E4AC974(a1);
      if (!(_DWORD)result)
        return result;
      result = sub_22E4C4A24((uint64_t)a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      if ((v338 = *(_DWORD *)v4 & 0x7F, v338 <= 0x39) && ((1 << v338) & 0x3F0003E01011066) != 0
        || v338 - 70 <= 0xD && ((1 << (v338 - 70)) & 0x2803) != 0
        || v338 - 19 <= 4)
      {
        v339 = sub_22EFCAE04(a2);
      }
      else
      {
        v339 = 0;
      }
      result = sub_22E4C43EC((uint64_t)a1, v339);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v341 = *v340;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v343 = *(_QWORD *)v342 + 8 * *(unsigned int *)(v342 + 8);
      }
      else
      {
        v343 = 0;
      }
      while (2)
      {
        if (v341 == (uint64_t *)v343)
          return 1;
        if ((sub_22E4C4488((uint64_t)a1, *v341) & 1) != 0)
        {
          ++v341;
          continue;
        }
        break;
      }
      return 0;
    case 31:
      result = sub_22E4C4A24((uint64_t)a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22E4AC974(a1);
      if (!(_DWORD)result)
        return result;
      if ((v257 = *(_DWORD *)v4 & 0x7F, v257 <= 0x39) && ((1 << v257) & 0x3F0003E01011066) != 0
        || v257 - 70 <= 0xD && ((1 << (v257 - 70)) & 0x2803) != 0
        || v257 - 19 <= 4)
      {
        v258 = sub_22EFCAE04(a2);
      }
      else
      {
        v258 = 0;
      }
      result = sub_22E4C43EC((uint64_t)a1, v258);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v260 = *v259;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v262 = *(_QWORD *)v261 + 8 * *(unsigned int *)(v261 + 8);
      }
      else
      {
        v262 = 0;
      }
      while (2)
      {
        if (v260 == (uint64_t *)v262)
          return 1;
        if ((sub_22E4C4488((uint64_t)a1, *v260) & 1) != 0)
        {
          ++v260;
          continue;
        }
        break;
      }
      return 0;
    case 32:
      result = sub_22E4AC974(a1);
      if (!(_DWORD)result)
        return result;
      if (*(_QWORD *)(a2 + 72) >= 8uLL && (*(_QWORD *)(a2 + 72) & 6) != 2)
      {
        v544 = sub_22F259350(a2);
        result = sub_22E4B1628((uint64_t)a1, (uint64_t)v544);
        if (!(_DWORD)result)
          return result;
      }
      result = sub_22E4C4A24((uint64_t)a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      if ((v344 = *(_DWORD *)v4 & 0x7F, v344 <= 0x39) && ((1 << v344) & 0x3F0003E01011066) != 0
        || v344 - 70 <= 0xD && ((1 << (v344 - 70)) & 0x2803) != 0
        || v344 - 19 <= 4)
      {
        v345 = sub_22EFCAE04(a2);
      }
      else
      {
        v345 = 0;
      }
      result = sub_22E4C43EC((uint64_t)a1, v345);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v347 = *v346;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v349 = *(_QWORD *)v348 + 8 * *(unsigned int *)(v348 + 8);
      }
      else
      {
        v349 = 0;
      }
      if (v347 == (uint64_t *)v349)
        return 1;
      while ((sub_22E4C4488((uint64_t)a1, *v347) & 1) != 0)
      {
        if (++v347 == (uint64_t *)v349)
          return 1;
      }
      return 0;
    case 33:
      v144 = *(_QWORD *)(a2 + 120);
      if ((v144 & 4) == 0)
        goto LABEL_252;
      v145 = 0;
      while (1)
      {
        v146 = v144 & 0xFFFFFFFFFFFFFFF8;
        if (v145 >= *(unsigned int *)(v146 + 16))
          break;
        sub_22E4C4A24((uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v146 + 24) + 8 * v145++));
        v144 = *(_QWORD *)(a2 + 120);
        if ((v144 & 4) == 0)
        {
LABEL_252:
          v147 = 0;
          v148 = 0;
          goto LABEL_946;
        }
      }
      v147 = *(_QWORD *)v146;
      v148 = *(_QWORD *)(v146 + 8);
LABEL_946:
      result = sub_22E4B0B2C(a1, v147, v148);
      if (!(_DWORD)result)
        return result;
      v510 = *(_QWORD *)(a2 + 128);
      if ((v510 & 4) != 0 && (v510 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        result = sub_22E4B0C6C(a1, *(_QWORD *)(v510 & 0xFFFFFFFFFFFFFFF8), (v510 & 0xFFFFFFFFFFFFFFF8) + 8);
        if (!(_DWORD)result)
          return result;
      }
      result = sub_22E4C43EC((uint64_t)a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v512 = *v511;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v514 = *(_QWORD *)v513 + 8 * *(unsigned int *)(v513 + 8);
      }
      else
      {
        v514 = 0;
      }
      if (v512 == (uint64_t *)v514)
        return 1;
      while ((sub_22E4C4488((uint64_t)a1, *v512) & 1) != 0)
      {
        if (++v512 == (uint64_t *)v514)
          return 1;
      }
      return 0;
    case 34:
      result = sub_22E4C4AC4(a1, a2);
      if (!(_DWORD)result)
        return result;
      result = sub_22E4C43EC((uint64_t)a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v119 = *v118;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v121 = *(_QWORD *)v120 + 8 * *(unsigned int *)(v120 + 8);
      }
      else
      {
        v121 = 0;
      }
      if (v119 == (uint64_t *)v121)
        return 1;
      while ((sub_22E4C4488((uint64_t)a1, *v119) & 1) != 0)
      {
        if (++v119 == (uint64_t *)v121)
          return 1;
      }
      return 0;
    case 35:
      result = sub_22E4C4B38(a1, a2);
      if (!(_DWORD)result)
        return result;
      result = sub_22E4C43EC((uint64_t)a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v101 = *v100;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v103 = *(_QWORD *)v102 + 8 * *(unsigned int *)(v102 + 8);
      }
      else
      {
        v103 = 0;
      }
      if (v101 == (uint64_t *)v103)
        return 1;
      while ((sub_22E4C4488((uint64_t)a1, *v101) & 1) != 0)
      {
        if (++v101 == (uint64_t *)v103)
          return 1;
      }
      return 0;
    case 36:
      v104 = *(unint64_t ***)(a2 + 160);
      if (v104)
      {
        if (*v104)
        {
          result = sub_22E4B0C6C(a1, **v104, (uint64_t)(*v104 + 1));
          if (!(_DWORD)result)
            return result;
        }
      }
      v105 = *(_QWORD *)(a2 + 120);
      if ((v105 & 4) != 0)
      {
        v488 = (uint64_t *)(v105 & 0xFFFFFFFFFFFFFFF8);
        v106 = *v488;
        v107 = v488[1];
      }
      else
      {
        v106 = 0;
        v107 = 0;
      }
      result = sub_22E4B0B2C(a1, v106, v107);
      if (!(_DWORD)result)
        return result;
      if (sub_22EFD5760(a2) != 2)
        return 1;
      result = sub_22E4C43EC((uint64_t)a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v490 = *v489;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v492 = *(_QWORD *)v491 + 8 * *(unsigned int *)(v491 + 8);
      }
      else
      {
        v492 = 0;
      }
      if (v490 == (uint64_t *)v492)
        return 1;
      while ((sub_22E4C4488((uint64_t)a1, *v490) & 1) != 0)
      {
        if (++v490 == (uint64_t *)v492)
          return 1;
      }
      return 0;
    case 37:
      v63 = *(_QWORD *)(a2 + 184);
      if (!v63)
        goto LABEL_104;
      v64 = *(_DWORD *)(v63 + 12) & 0x1FFFFFFF;
      if (!(_DWORD)v64)
        goto LABEL_104;
      v65 = v63 + 16;
      v66 = 8 * v64;
      while ((sub_22E4AC974(a1) & 1) != 0)
      {
        v65 += 8;
        v66 -= 8;
        if (!v66)
        {
LABEL_104:
          v67 = *(_QWORD *)(a2 + 192);
          v68 = *(unsigned int *)(v67 + 8);
          if ((_DWORD)v68)
          {
            v69 = v67 + 16;
            while ((sub_22E4B1628((uint64_t)a1, v69) & 1) != 0)
            {
              v69 += 32;
              if (!--v68)
                goto LABEL_108;
            }
            return 0;
          }
LABEL_108:
          result = sub_22E4C4B38(a1, a2);
          if (!(_DWORD)result)
            return result;
          result = sub_22E4C43EC((uint64_t)a1, a2 + 64);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v71 = *v70;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v73 = *(_QWORD *)v72 + 8 * *(unsigned int *)(v72 + 8);
            }
            else
            {
              v73 = 0;
            }
            if (v71 != (uint64_t *)v73)
            {
              while ((sub_22E4C4488((uint64_t)a1, *v71) & 1) != 0)
              {
                if (++v71 == (uint64_t *)v73)
                  return 1;
              }
              return 0;
            }
          }
          return 1;
        }
      }
      return 0;
    case 38:
      v402 = *(_QWORD *)(a2 + 48);
      if (v402)
      {
        result = sub_22E4A088C(a1, v402 & 0xFFFFFFFFFFFFFFF0);
        if (!(_DWORD)result)
          return result;
      }
      result = sub_22E4B07FC(a1, a2);
      if (!(_DWORD)result)
        return result;
      v403 = *(_QWORD *)(a2 + 72);
      if (v403 >= 8 && (*(_QWORD *)(a2 + 72) & 6) != 2)
      {
        v404 = (unint64_t *)(v403 & 0xFFFFFFFFFFFFFFF8);
        if ((*(_QWORD *)(a2 + 72) & 6) == 4 && v404)
          v404 = (unint64_t *)v404[1];
        result = sub_22E4B0C6C(a1, *v404, (uint64_t)(v404 + 1));
        if (!(_DWORD)result)
          return result;
      }
      if ((v405 = *(_DWORD *)v4 & 0x7F, v405 <= 0x39) && ((1 << v405) & 0x3F0003E01011066) != 0
        || v405 - 70 <= 0xD && ((1 << (v405 - 70)) & 0x2803) != 0
        || v405 - 19 <= 4)
      {
        v406 = sub_22EFCAE04(a2);
      }
      else
      {
        v406 = 0;
      }
      result = sub_22E4C43EC((uint64_t)a1, v406);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v408 = *v407;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v410 = *(_QWORD *)v409 + 8 * *(unsigned int *)(v409 + 8);
      }
      else
      {
        v410 = 0;
      }
      if (v408 == (uint64_t *)v410)
        return 1;
      while ((sub_22E4C4488((uint64_t)a1, *v408) & 1) != 0)
      {
        if (++v408 == (uint64_t *)v410)
          return 1;
      }
      return 0;
    case 39:
      return (sub_22E4B095C(a1, a2) & 1) != 0;
    case 40:
      v176 = *(_QWORD *)(a2 + 80);
      v177 = (unint64_t *)(v176 & 0xFFFFFFFFFFFFFFF8);
      if ((v176 & 4) != 0)
        v177 = (unint64_t *)*v177;
      result = sub_22E4B0C6C(a1, *v177, (uint64_t)(v177 + 1));
      if (!(_DWORD)result)
        return result;
      if ((v178 = *(_DWORD *)v4 & 0x7F, v178 <= 0x39) && ((1 << v178) & 0x3F0003E01011066) != 0
        || v178 - 70 <= 0xD && ((1 << (v178 - 70)) & 0x2803) != 0
        || v178 - 19 <= 4)
      {
        v179 = sub_22EFCAE04(a2);
      }
      else
      {
        v179 = 0;
      }
      result = sub_22E4C43EC((uint64_t)a1, v179);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v181 = *v180;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v183 = *(_QWORD *)v182 + 8 * *(unsigned int *)(v182 + 8);
      }
      else
      {
        v183 = 0;
      }
      if (v181 == (uint64_t *)v183)
        return 1;
      while ((sub_22E4C4488((uint64_t)a1, *v181) & 1) != 0)
      {
        if (++v181 == (uint64_t *)v183)
          return 1;
      }
      return 0;
    case 41:
      v267 = *(_QWORD *)(a2 + 80);
      v268 = (unint64_t *)(v267 & 0xFFFFFFFFFFFFFFF8);
      if ((v267 & 4) != 0)
        v268 = (unint64_t *)*v268;
      result = sub_22E4B0C6C(a1, *v268, (uint64_t)(v268 + 1));
      if (!(_DWORD)result)
        return result;
      if ((v269 = *(_DWORD *)v4 & 0x7F, v269 <= 0x39) && ((1 << v269) & 0x3F0003E01011066) != 0
        || v269 - 70 <= 0xD && ((1 << (v269 - 70)) & 0x2803) != 0
        || v269 - 19 <= 4)
      {
        v270 = sub_22EFCAE04(a2);
      }
      else
      {
        v270 = 0;
      }
      result = sub_22E4C43EC((uint64_t)a1, v270);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v272 = *v271;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v274 = *(_QWORD *)v273 + 8 * *(unsigned int *)(v273 + 8);
      }
      else
      {
        v274 = 0;
      }
      if (v272 == (uint64_t *)v274)
        return 1;
      while ((sub_22E4C4488((uint64_t)a1, *v272) & 1) != 0)
      {
        if (++v272 == (uint64_t *)v274)
          return 1;
      }
      return 0;
    case 42:
      result = sub_22E4B0B2C(a1, *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80));
      if (!(_DWORD)result)
        return result;
      v373 = *(_DWORD *)v4 & 0x7F;
      v374 = v373 > 0x39 || ((1 << v373) & 0x3F0003E01011066) == 0;
      v375 = !v374 || v373 - 70 <= 0xD && ((1 << (v373 - 70)) & 0x2803) != 0 || v373 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E4C43EC((uint64_t)a1, v375);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v377 = *v376;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v379 = *(_QWORD *)v378 + 8 * *(unsigned int *)(v378 + 8);
      }
      else
      {
        v379 = 0;
      }
      if (v377 == (uint64_t *)v379)
        return 1;
      while ((sub_22E4C4488((uint64_t)a1, *v377) & 1) != 0)
      {
        if (++v377 == (uint64_t *)v379)
          return 1;
      }
      return 0;
    case 43:
      result = sub_22E4C43EC((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v41 = *v40;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v43 = *(_QWORD *)v42 + 8 * *(unsigned int *)(v42 + 8);
      }
      else
      {
        v43 = 0;
      }
      if (v41 == (uint64_t *)v43)
        return 1;
      while ((sub_22E4C4488((uint64_t)a1, *v41) & 1) != 0)
      {
        if (++v41 == (uint64_t *)v43)
          return 1;
      }
      return 0;
    case 44:
      result = sub_22E4B0B2C(a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64));
      if (!(_DWORD)result)
        return result;
      v133 = *(_DWORD *)v4 & 0x7F;
      v134 = v133 > 0x39 || ((1 << v133) & 0x3F0003E01011066) == 0;
      v135 = !v134 || v133 - 70 <= 0xD && ((1 << (v133 - 70)) & 0x2803) != 0 || v133 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E4C43EC((uint64_t)a1, v135);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v137 = *v136;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v139 = *(_QWORD *)v138 + 8 * *(unsigned int *)(v138 + 8);
      }
      else
      {
        v139 = 0;
      }
      if (v137 == (uint64_t *)v139)
        return 1;
      while ((sub_22E4C4488((uint64_t)a1, *v137) & 1) != 0)
      {
        if (++v137 == (uint64_t *)v139)
          return 1;
      }
      return 0;
    case 45:
      result = sub_22E4C43EC((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v351 = *v350;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v353 = *(_QWORD *)v352 + 8 * *(unsigned int *)(v352 + 8);
      }
      else
      {
        v353 = 0;
      }
      if (v351 == (uint64_t *)v353)
        return 1;
      while ((sub_22E4C4488((uint64_t)a1, *v351) & 1) != 0)
      {
        if (++v351 == (uint64_t *)v353)
          return 1;
      }
      return 0;
    case 46:
      result = sub_22E4C43EC((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v435 = *v434;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v437 = *(_QWORD *)v436 + 8 * *(unsigned int *)(v436 + 8);
      }
      else
      {
        v437 = 0;
      }
      if (v435 == (uint64_t *)v437)
        return 1;
      while ((sub_22E4C4488((uint64_t)a1, *v435) & 1) != 0)
      {
        if (++v435 == (uint64_t *)v437)
          return 1;
      }
      return 0;
    case 47:
      result = sub_22E4C43EC((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v79 = *v78;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v81 = *(_QWORD *)v80 + 8 * *(unsigned int *)(v80 + 8);
      }
      else
      {
        v81 = 0;
      }
      if (v79 == (uint64_t *)v81)
        return 1;
      while ((sub_22E4C4488((uint64_t)a1, *v79) & 1) != 0)
      {
        if (++v79 == (uint64_t *)v81)
          return 1;
      }
      return 0;
    case 48:
      result = sub_22E4C43EC((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v150 = *v149;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v152 = *(_QWORD *)v151 + 8 * *(unsigned int *)(v151 + 8);
      }
      else
      {
        v152 = 0;
      }
      if (v150 == (uint64_t *)v152)
        return 1;
      while ((sub_22E4C4488((uint64_t)a1, *v150) & 1) != 0)
      {
        if (++v150 == (uint64_t *)v152)
          return 1;
      }
      return 0;
    case 49:
      result = sub_22E4C4BB0(a1, a2);
      if (!(_DWORD)result)
        return result;
      v171 = *(_QWORD *)(a2 + 72);
      if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      {
        v515 = v171 & 0xFFFFFFFFFFFFFFFCLL;
        v516 = *(_QWORD *)(a2 + 72) & 3;
        if ((_DWORD)v516 && (_DWORD)v516 != 3)
          v515 = *(_QWORD *)(v515 + 8);
        if ((sub_22E4A103C(a1, v515, 0) & 1) == 0)
          return 0;
      }
      else if ((v171 & 3) != 0 && (v171 & 3) != 3)
      {
        result = sub_22E4A103C(a1, v171 & 0xFFFFFFFFFFFFFFFCLL, 0);
        if (!(_DWORD)result)
          return result;
      }
      v517 = *(_DWORD *)v4 & 0x7F;
      if (v517 <= 0x39 && ((1 << v517) & 0x3F0003E01011066) != 0
        || v517 - 70 <= 0xD && ((1 << (v517 - 70)) & 0x2803) != 0
        || v517 - 19 <= 4)
      {
        v518 = sub_22EFCAE04(a2);
      }
      else
      {
        v518 = 0;
      }
      result = sub_22E4C43EC((uint64_t)a1, v518);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v520 = *v519;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v522 = *(_QWORD *)v521 + 8 * *(unsigned int *)(v521 + 8);
        }
        else
        {
          v522 = 0;
        }
        for (; v520 != (uint64_t *)v522; ++v520)
        {
          if ((sub_22E4C4488((uint64_t)a1, *v520) & 1) == 0)
            return 0;
        }
      }
      return 1;
    case 50:
      result = sub_22E4C4BB0(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      {
        v33 = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_DWORD *)(a2 + 72) & 3) != 0 && (*(_DWORD *)(a2 + 72) & 3) != 3)
          v33 = *(_QWORD *)(v33 + 8);
        result = sub_22E4A103C(a1, v33, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v34 = *(_DWORD *)v4 & 0x7F, v34 <= 0x39) && ((1 << v34) & 0x3F0003E01011066) != 0
        || (v34 - 70 <= 0xD ? (v542 = ((1 << (v34 - 70)) & 0x2803) == 0) : (v542 = 1), !v542 || v34 - 19 <= 4))
      {
        v35 = sub_22EFCAE04(a2);
      }
      else
      {
        v35 = 0;
      }
      result = sub_22E4C43EC((uint64_t)a1, v35);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v37 = *v36;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v39 = *(_QWORD *)v38 + 8 * *(unsigned int *)(v38 + 8);
      }
      else
      {
        v39 = 0;
      }
      if (v37 == (uint64_t *)v39)
        return 1;
      while ((sub_22E4C4488((uint64_t)a1, *v37) & 1) != 0)
      {
        if (++v37 == (uint64_t *)v39)
          return 1;
      }
      return 0;
    case 51:
      result = sub_22E4C4BB0(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      {
        v450 = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_DWORD *)(a2 + 72) & 3) != 0 && (*(_DWORD *)(a2 + 72) & 3) != 3)
          v450 = *(_QWORD *)(v450 + 8);
        result = sub_22E4A103C(a1, v450, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v451 = *(_DWORD *)v4 & 0x7F, v451 <= 0x39) && ((1 << v451) & 0x3F0003E01011066) != 0
        || (v451 - 70 <= 0xD ? (v543 = ((1 << (v451 - 70)) & 0x2803) == 0) : (v543 = 1), !v543 || v451 - 19 <= 4))
      {
        v452 = sub_22EFCAE04(a2);
      }
      else
      {
        v452 = 0;
      }
      result = sub_22E4C43EC((uint64_t)a1, v452);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v454 = *v453;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v456 = *(_QWORD *)v455 + 8 * *(unsigned int *)(v455 + 8);
      }
      else
      {
        v456 = 0;
      }
      if (v454 == (uint64_t *)v456)
        return 1;
      while ((sub_22E4C4488((uint64_t)a1, *v454) & 1) != 0)
      {
        if (++v454 == (uint64_t *)v456)
          return 1;
      }
      return 0;
    case 52:
      result = sub_22E4C4C7C(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v431 = *v430;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v433 = *(_QWORD *)v432 + 8 * *(unsigned int *)(v432 + 8);
      }
      else
      {
        v433 = 0;
      }
      if (v431 == (uint64_t *)v433)
        return 1;
      while ((sub_22E4C4488((uint64_t)a1, *v431) & 1) != 0)
      {
        if (++v431 == (uint64_t *)v433)
          return 1;
      }
      return 0;
    case 53:
      result = sub_22E4C4C7C(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v75 = *v74;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v77 = *(_QWORD *)v76 + 8 * *(unsigned int *)(v76 + 8);
      }
      else
      {
        v77 = 0;
      }
      if (v75 == (uint64_t *)v77)
        return 1;
      while ((sub_22E4C4488((uint64_t)a1, *v75) & 1) != 0)
      {
        if (++v75 == (uint64_t *)v77)
          return 1;
      }
      return 0;
    case 54:
      result = sub_22E4C4C7C(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v419 = *v418;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v421 = *(_QWORD *)v420 + 8 * *(unsigned int *)(v420 + 8);
      }
      else
      {
        v421 = 0;
      }
      if (v419 == (uint64_t *)v421)
        return 1;
      while ((sub_22E4C4488((uint64_t)a1, *v419) & 1) != 0)
      {
        if (++v419 == (uint64_t *)v421)
          return 1;
      }
      return 0;
    case 55:
      result = sub_22E4C4C7C(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v427 = *v426;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v429 = *(_QWORD *)v428 + 8 * *(unsigned int *)(v428 + 8);
      }
      else
      {
        v429 = 0;
      }
      if (v427 == (uint64_t *)v429)
        return 1;
      while ((sub_22E4C4488((uint64_t)a1, *v427) & 1) != 0)
      {
        if (++v427 == (uint64_t *)v429)
          return 1;
      }
      return 0;
    case 56:
      result = sub_22E4C4C7C(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v83 = *v82;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v85 = *(_QWORD *)v84 + 8 * *(unsigned int *)(v84 + 8);
      }
      else
      {
        v85 = 0;
      }
      if (v83 == (uint64_t *)v85)
        return 1;
      while ((sub_22E4C4488((uint64_t)a1, *v83) & 1) != 0)
      {
        if (++v83 == (uint64_t *)v85)
          return 1;
      }
      return 0;
    case 57:
      result = sub_22E4C4C7C(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v370 = *v369;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v372 = *(_QWORD *)v371 + 8 * *(unsigned int *)(v371 + 8);
      }
      else
      {
        v372 = 0;
      }
      if (v370 == (uint64_t *)v372)
        return 1;
      while ((sub_22E4C4488((uint64_t)a1, *v370) & 1) != 0)
      {
        if (++v370 == (uint64_t *)v372)
          return 1;
      }
      return 0;
    case 58:
      result = sub_22E4C4BB0(a1, a2);
      if (!(_DWORD)result)
        return result;
      v153 = *(_DWORD *)v4 & 0x7F;
      v154 = v153 > 0x39 || ((1 << v153) & 0x3F0003E01011066) == 0;
      v155 = !v154 || v153 - 70 <= 0xD && ((1 << (v153 - 70)) & 0x2803) != 0 || v153 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E4C43EC((uint64_t)a1, v155);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v157 = *v156;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v159 = *(_QWORD *)v158 + 8 * *(unsigned int *)(v158 + 8);
      }
      else
      {
        v159 = 0;
      }
      if (v157 == (uint64_t *)v159)
        return 1;
      while ((sub_22E4C4488((uint64_t)a1, *v157) & 1) != 0)
      {
        if (++v157 == (uint64_t *)v159)
          return 1;
      }
      return 0;
    case 59:
      result = sub_22E4C4BB0(a1, a2);
      if (!(_DWORD)result)
        return result;
      v380 = *(_QWORD *)(a2 + 72);
      if (v380 >= 4 && (*(_QWORD *)(a2 + 72) & 3) != 1)
      {
        v381 = v380 & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_QWORD *)(a2 + 72) & 3) == 2 && v381)
          v381 = *(_QWORD *)(v381 + 8);
        result = sub_22E4A103C(a1, v381, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v382 = *(_DWORD *)v4 & 0x7F, v382 <= 0x39) && ((1 << v382) & 0x3F0003E01011066) != 0
        || v382 - 70 <= 0xD && ((1 << (v382 - 70)) & 0x2803) != 0
        || v382 - 19 <= 4)
      {
        v383 = sub_22EFCAE04(a2);
      }
      else
      {
        v383 = 0;
      }
      result = sub_22E4C43EC((uint64_t)a1, v383);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v385 = *v384;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v387 = *(_QWORD *)v386 + 8 * *(unsigned int *)(v386 + 8);
      }
      else
      {
        v387 = 0;
      }
      if (v385 == (uint64_t *)v387)
        return 1;
      while ((sub_22E4C4488((uint64_t)a1, *v385) & 1) != 0)
      {
        if (++v385 == (uint64_t *)v387)
          return 1;
      }
      return 0;
    case 60:
      result = sub_22E4C5040(a1, a2);
      if (!(_DWORD)result)
        return result;
      v184 = *(_DWORD *)v4 & 0x7F;
      v185 = v184 > 0x39 || ((1 << v184) & 0x3F0003E01011066) == 0;
      v186 = !v185 || v184 - 70 <= 0xD && ((1 << (v184 - 70)) & 0x2803) != 0 || v184 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E4C43EC((uint64_t)a1, v186);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v188 = *v187;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v190 = *(_QWORD *)v189 + 8 * *(unsigned int *)(v189 + 8);
      }
      else
      {
        v190 = 0;
      }
      if (v188 == (uint64_t *)v190)
        return 1;
      while ((sub_22E4C4488((uint64_t)a1, *v188) & 1) != 0)
      {
        if (++v188 == (uint64_t *)v190)
          return 1;
      }
      return 0;
    case 61:
      result = sub_22E4C5040(a1, a2);
      if (!(_DWORD)result)
        return result;
      v287 = *(unsigned int *)(a2 + 100);
      if (!(_DWORD)v287)
        goto LABEL_514;
      v288 = a2 + 104;
      v289 = 8 * v287;
      while ((sub_22E4AC974(a1) & 1) != 0)
      {
        v288 += 8;
        v289 -= 8;
        if (!v289)
        {
LABEL_514:
          v290 = *(_DWORD *)v4 & 0x7F;
          v291 = v290 > 0x39 || ((1 << v290) & 0x3F0003E01011066) == 0;
          if (v291
            && (v290 - 70 <= 0xD ? (v545 = ((1 << (v290 - 70)) & 0x2803) == 0) : (v545 = 1), v545 && v290 - 19 > 4))
          {
            v292 = 0;
          }
          else
          {
            v292 = sub_22EFCAE04(a2);
          }
          result = sub_22E4C43EC((uint64_t)a1, v292);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) == 0)
            return 1;
          sub_22EFC8E88(a2);
          v294 = *v293;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v296 = *(_QWORD *)v295 + 8 * *(unsigned int *)(v295 + 8);
          }
          else
          {
            v296 = 0;
          }
          if (v294 == (uint64_t *)v296)
            return 1;
          while ((sub_22E4C4488((uint64_t)a1, *v294) & 1) != 0)
          {
            if (++v294 == (uint64_t *)v296)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 62:
      result = sub_22E4C5040(a1, a2);
      if (!(_DWORD)result)
        return result;
      v305 = *(_DWORD *)v4 & 0x7F;
      v306 = v305 > 0x39 || ((1 << v305) & 0x3F0003E01011066) == 0;
      v307 = !v306 || v305 - 70 <= 0xD && ((1 << (v305 - 70)) & 0x2803) != 0 || v305 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E4C43EC((uint64_t)a1, v307);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v309 = *v308;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v311 = *(_QWORD *)v310 + 8 * *(unsigned int *)(v310 + 8);
      }
      else
      {
        v311 = 0;
      }
      if (v309 == (uint64_t *)v311)
        return 1;
      while ((sub_22E4C4488((uint64_t)a1, *v309) & 1) != 0)
      {
        if (++v309 == (uint64_t *)v311)
          return 1;
      }
      return 0;
    case 63:
      result = sub_22E4C5040(a1, a2);
      if (!(_DWORD)result)
        return result;
      v224 = *(_DWORD *)v4 & 0x7F;
      v225 = v224 > 0x39 || ((1 << v224) & 0x3F0003E01011066) == 0;
      v226 = !v225 || v224 - 70 <= 0xD && ((1 << (v224 - 70)) & 0x2803) != 0 || v224 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E4C43EC((uint64_t)a1, v226);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v228 = *v227;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v230 = *(_QWORD *)v229 + 8 * *(unsigned int *)(v229 + 8);
      }
      else
      {
        v230 = 0;
      }
      if (v228 == (uint64_t *)v230)
        return 1;
      while ((sub_22E4C4488((uint64_t)a1, *v228) & 1) != 0)
      {
        if (++v228 == (uint64_t *)v230)
          return 1;
      }
      return 0;
    case 64:
      result = sub_22E4C5040(a1, a2);
      if (!(_DWORD)result)
        return result;
      v191 = *(_DWORD *)(a2 + 96) & 0x600;
      if (v191 != 1024)
        goto LABEL_343;
      result = sub_22E4A103C(a1, *(_QWORD *)(a2 + 88) & 0xFFFFFFFFFFFFFFF8, 0);
      if (!(_DWORD)result)
        return result;
      v191 = *(_DWORD *)(a2 + 96) & 0x600;
LABEL_343:
      if (v191 != 1024 && v191 != 512 && *(_QWORD *)(a2 + 88) >= 8uLL)
      {
        v192 = sub_22EFBC5B4(a2);
        v193 = v192;
        if (v192 && (*(_BYTE *)v192 & 0xFE) == 0xAC)
          v193 = *(_QWORD *)(v192 + 16);
        result = sub_22E4A103C(a1, v193, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v194 = *(_DWORD *)v4 & 0x7F, v194 <= 0x39) && ((1 << v194) & 0x3F0003E01011066) != 0
        || v194 - 70 <= 0xD && ((1 << (v194 - 70)) & 0x2803) != 0
        || v194 - 19 <= 4)
      {
        v195 = sub_22EFCAE04(a2);
      }
      else
      {
        v195 = 0;
      }
      result = sub_22E4C43EC((uint64_t)a1, v195);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v197 = *v196;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v199 = *(_QWORD *)v198 + 8 * *(unsigned int *)(v198 + 8);
      }
      else
      {
        v199 = 0;
      }
      if (v197 == (uint64_t *)v199)
        return 1;
      while ((sub_22E4C4488((uint64_t)a1, *v197) & 1) != 0)
      {
        if (++v197 == (uint64_t *)v199)
          return 1;
      }
      return 0;
    case 65:
      v301 = *(unint64_t ***)(a2 + 120);
      if (v301)
      {
        if (*v301)
        {
          result = sub_22E4B0C6C(a1, **v301, (uint64_t)(*v301 + 1));
          if (!(_DWORD)result)
            return result;
        }
      }
      v302 = *(_QWORD *)(a2 + 56);
      if ((v302 & 4) != 0)
      {
        v493 = (uint64_t *)(v302 & 0xFFFFFFFFFFFFFFF8);
        v303 = *v493;
        v304 = v493[1];
      }
      else
      {
        v303 = 0;
        v304 = 0;
      }
      result = sub_22E4B0B2C(a1, v303, v304);
      if (!(_DWORD)result)
        return result;
      if (sub_22EFBC2B0(a2) != 2)
        return 1;
      v494 = *(_DWORD *)v4 & 0x7F;
      if (v494 <= 0x39 && ((1 << v494) & 0x3F0003E01011066) != 0
        || v494 - 70 <= 0xD && ((1 << (v494 - 70)) & 0x2803) != 0
        || v494 - 19 <= 4)
      {
        v495 = sub_22EFCAE04(a2);
      }
      else
      {
        v495 = 0;
      }
      result = sub_22E4C43EC((uint64_t)a1, v495);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v497 = *v496;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v499 = *(_QWORD *)v498 + 8 * *(unsigned int *)(v498 + 8);
      }
      else
      {
        v499 = 0;
      }
      if (v497 == (uint64_t *)v499)
        return 1;
      while ((sub_22E4C4488((uint64_t)a1, *v497) & 1) != 0)
      {
        if (++v497 == (uint64_t *)v499)
          return 1;
      }
      return 0;
    case 66:
      v44 = *(_QWORD *)(a2 + 424);
      if (!v44)
        goto LABEL_68;
      v45 = *(_DWORD *)(v44 + 12) & 0x1FFFFFFF;
      if (!(_DWORD)v45)
        goto LABEL_68;
      v46 = v44 + 16;
      v47 = 8 * v45;
      while ((sub_22E4AC974(a1) & 1) != 0)
      {
        v46 += 8;
        v47 -= 8;
        if (!v47)
        {
LABEL_68:
          v48 = *(_QWORD *)(a2 + 432);
          v49 = *(unsigned int *)(v48 + 8);
          if ((_DWORD)v49)
          {
            v50 = v48 + 16;
            while ((sub_22E4B1628((uint64_t)a1, v50) & 1) != 0)
            {
              v50 += 32;
              if (!--v49)
                goto LABEL_72;
            }
          }
          else
          {
LABEL_72:
            result = sub_22E4C5040(a1, a2);
            if (!(_DWORD)result)
              return result;
            v51 = *(_DWORD *)v4 & 0x7F;
            v52 = v51 > 0x39 || ((1 << v51) & 0x3F0003E01011066) == 0;
            if (v52
              && (v51 - 70 <= 0xD ? (v546 = ((1 << (v51 - 70)) & 0x2803) == 0) : (v546 = 1), v546 && v51 - 19 > 4))
            {
              v53 = 0;
            }
            else
            {
              v53 = sub_22EFCAE04(a2);
            }
            result = sub_22E4C43EC((uint64_t)a1, v53);
            if (!(_DWORD)result)
              return result;
            if ((*(_BYTE *)(v4 + 1) & 1) == 0)
              return 1;
            sub_22EFC8E88(a2);
            v55 = *v54;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v57 = *(_QWORD *)v56 + 8 * *(unsigned int *)(v56 + 8);
            }
            else
            {
              v57 = 0;
            }
            if (v55 == (uint64_t *)v57)
              return 1;
            while ((sub_22E4C4488((uint64_t)a1, *v55) & 1) != 0)
            {
              if (++v55 == (uint64_t *)v57)
                return 1;
            }
          }
          return 0;
        }
      }
      return 0;
    case 67:
      result = sub_22E4A103C(a1, *(_QWORD *)(a2 + 56), 0);
      if (!(_DWORD)result)
        return result;
      v126 = *(_DWORD *)v4 & 0x7F;
      v127 = v126 > 0x39 || ((1 << v126) & 0x3F0003E01011066) == 0;
      v128 = !v127 || v126 - 70 <= 0xD && ((1 << (v126 - 70)) & 0x2803) != 0 || v126 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E4C43EC((uint64_t)a1, v128);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v130 = *v129;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v132 = *(_QWORD *)v131 + 8 * *(unsigned int *)(v131 + 8);
      }
      else
      {
        v132 = 0;
      }
      if (v130 == (uint64_t *)v132)
        return 1;
      while ((sub_22E4C4488((uint64_t)a1, *v130) & 1) != 0)
      {
        if (++v130 == (uint64_t *)v132)
          return 1;
      }
      return 0;
    case 68:
      result = sub_22E4C43EC((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v462 = *v461;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v464 = *(_QWORD *)v463 + 8 * *(unsigned int *)(v463 + 8);
      }
      else
      {
        v464 = 0;
      }
      if (v462 == (uint64_t *)v464)
        return 1;
      while ((sub_22E4C4488((uint64_t)a1, *v462) & 1) != 0)
      {
        if (++v462 == (uint64_t *)v464)
          return 1;
      }
      return 0;
    case 69:
      result = sub_22E4C43EC((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v109 = *v108;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v111 = *(_QWORD *)v110 + 8 * *(unsigned int *)(v110 + 8);
      }
      else
      {
        v111 = 0;
      }
      if (v109 == (uint64_t *)v111)
        return 1;
      while ((sub_22E4C4488((uint64_t)a1, *v109) & 1) != 0)
      {
        if (++v109 == (uint64_t *)v111)
          return 1;
      }
      return 0;
    case 70:
      v21 = *(_DWORD **)(a2 + 56);
      v24 = *v21;
      v23 = (uint64_t *)(v21 + 4);
      v22 = v24;
      if (!v24)
        return (sub_22E4A088C(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
      v25 = 8 * v22;
      while ((sub_22E4C50A0(a1, *v23) & 1) != 0)
      {
        ++v23;
        v25 -= 8;
        if (!v25)
          return (sub_22E4A088C(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
      }
      return 0;
    case 71:
      result = sub_22E4A103C(a1, *(_QWORD *)(a2 + 88), 0);
      if ((_DWORD)result)
      {
        v62 = *(_QWORD *)(a2 + 96);
        if (!v62)
          return (sub_22E4A088C(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
        result = sub_22E4A103C(a1, v62, 0);
        if ((_DWORD)result)
          return (sub_22E4A088C(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
      }
      return result;
    case 72:
      result = sub_22E4C43EC((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v423 = *v422;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v425 = *(_QWORD *)v424 + 8 * *(unsigned int *)(v424 + 8);
      }
      else
      {
        v425 = 0;
      }
      if (v423 == (uint64_t *)v425)
        return 1;
      while ((sub_22E4C4488((uint64_t)a1, *v423) & 1) != 0)
      {
        if (++v423 == (uint64_t *)v425)
          return 1;
      }
      return 0;
    case 73:
      result = sub_22E4C43EC((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v439 = *v438;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v441 = *(_QWORD *)v440 + 8 * *(unsigned int *)(v440 + 8);
      }
      else
      {
        v441 = 0;
      }
      if (v439 == (uint64_t *)v441)
        return 1;
      while ((sub_22E4C4488((uint64_t)a1, *v439) & 1) != 0)
      {
        if (++v439 == (uint64_t *)v441)
          return 1;
      }
      return 0;
    case 74:
      if (!sub_22E4B0B2C(a1, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72)))
        return 0;
      v442 = *(_DWORD *)(a2 + 24);
      v443 = *(_QWORD *)(a2 + 80);
      v558 = *(_QWORD *)(a2 + 40);
      v559 = v442;
      v560 = v443;
      if (!sub_22E4B0BB4((uint64_t)a1, &v558))
        return 0;
      if ((v444 = *(_DWORD *)v4 & 0x7F, v444 <= 0x39) && ((1 << v444) & 0x3F0003E01011066) != 0
        || v444 - 70 <= 0xD && ((1 << (v444 - 70)) & 0x2803) != 0
        || v444 - 19 <= 4)
      {
        v445 = sub_22EFCAE04(a2);
      }
      else
      {
        v445 = 0;
      }
      if (!sub_22E4C43EC((uint64_t)a1, v445))
        return 0;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v447 = *v446;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v449 = *(_QWORD *)v448 + 8 * *(unsigned int *)(v448 + 8);
      }
      else
      {
        v449 = 0;
      }
      while (2)
      {
        if (v447 == (uint64_t *)v449)
          return 1;
        if ((sub_22E4C4488((uint64_t)a1, *v447) & 1) != 0)
        {
          ++v447;
          continue;
        }
        break;
      }
      return 0;
    case 75:
      v86 = *(unsigned int **)(a2 + 40);
      v87 = *v86;
      v88 = v86[1];
      if (!(_DWORD)v88)
        goto LABEL_146;
      v89 = &v86[2 * v87 + 4];
      v90 = 8 * v88;
      while ((sub_22E4A103C(a1, *(_QWORD *)v89, 0) & 1) != 0)
      {
        v89 += 2;
        v90 -= 8;
        if (!v90)
        {
          v86 = *(unsigned int **)(a2 + 40);
          v87 = *v86;
LABEL_146:
          if ((_DWORD)v87)
          {
            v91 = (uint64_t *)(v86 + 4);
            v92 = 8 * v87;
            while ((sub_22E4C50A0(a1, *v91) & 1) != 0)
            {
              ++v91;
              v92 -= 8;
              if (!v92)
                goto LABEL_150;
            }
          }
          else
          {
LABEL_150:
            v93 = *(_DWORD *)v4 & 0x7F;
            v94 = v93 > 0x39 || ((1 << v93) & 0x3F0003E01011066) == 0;
            if (v94
              && (v93 - 70 <= 0xD ? (v540 = ((1 << (v93 - 70)) & 0x2803) == 0) : (v540 = 1), v540 && v93 - 19 > 4))
            {
              v95 = 0;
            }
            else
            {
              v95 = sub_22EFCAE04(a2);
            }
            result = sub_22E4C43EC((uint64_t)a1, v95);
            if (!(_DWORD)result)
              return result;
            if ((*(_BYTE *)(v4 + 1) & 1) == 0)
              return 1;
            sub_22EFC8E88(a2);
            v97 = *v96;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v99 = *(_QWORD *)v98 + 8 * *(unsigned int *)(v98 + 8);
            }
            else
            {
              v99 = 0;
            }
            if (v97 == (uint64_t *)v99)
              return 1;
            while ((sub_22E4C4488((uint64_t)a1, *v97) & 1) != 0)
            {
              if (++v97 == (uint64_t *)v99)
                return 1;
            }
          }
          return 0;
        }
      }
      return 0;
    case 76:
      v275 = *(_DWORD **)(a2 + 40);
      v278 = *v275;
      v277 = (uint64_t *)(v275 + 4);
      v276 = v278;
      if (!v278)
        goto LABEL_1013;
      v279 = 8 * v276;
      while ((sub_22E4C50A0(a1, *v277) & 1) != 0)
      {
        ++v277;
        v279 -= 8;
        if (!v279)
        {
          v280 = *(_DWORD *)v4 & 0x7F;
          v281 = v280 > 0x39 || ((1 << v280) & 0x3F0003E01011066) == 0;
          if (v281
            && (v280 - 70 <= 0xD ? (v539 = ((1 << (v280 - 70)) & 0x2803) == 0) : (v539 = 1), v539 && v280 - 19 > 4))
          {
LABEL_1013:
            v282 = 0;
          }
          else
          {
            v282 = sub_22EFCAE04(a2);
          }
          result = sub_22E4C43EC((uint64_t)a1, v282);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) == 0)
            return 1;
          sub_22EFC8E88(a2);
          v549 = *v548;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v551 = *(_QWORD *)v550 + 8 * *(unsigned int *)(v550 + 8);
          }
          else
          {
            v551 = 0;
          }
          if (v549 == (uint64_t *)v551)
            return 1;
          while ((sub_22E4C4488((uint64_t)a1, *v549) & 1) != 0)
          {
            if (++v549 == (uint64_t *)v551)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 77:
      v26 = *(unsigned int **)(a2 + 40);
      v27 = v26[1];
      if (!(_DWORD)v27)
        goto LABEL_998;
      v28 = &v26[2 * *v26 + 4];
      v29 = 8 * v27;
      while ((sub_22E4A103C(a1, *(_QWORD *)v28, 0) & 1) != 0)
      {
        v28 += 2;
        v29 -= 8;
        if (!v29)
        {
          v30 = *(_DWORD *)v4 & 0x7F;
          v31 = v30 > 0x39 || ((1 << v30) & 0x3F0003E01011066) == 0;
          if (v31 && (v30 - 70 <= 0xD ? (v534 = ((1 << (v30 - 70)) & 0x2803) == 0) : (v534 = 1), v534 && v30 - 19 > 4))
LABEL_998:
            v32 = 0;
          else
            v32 = sub_22EFCAE04(a2);
          result = sub_22E4C43EC((uint64_t)a1, v32);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) == 0)
            return 1;
          sub_22EFC8E88(a2);
          v536 = *v535;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v538 = *(_QWORD *)v537 + 8 * *(unsigned int *)(v537 + 8);
          }
          else
          {
            v538 = 0;
          }
          if (v536 == (uint64_t *)v538)
            return 1;
          while ((sub_22E4C4488((uint64_t)a1, *v536) & 1) != 0)
          {
            if (++v536 == (uint64_t *)v538)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 78:
      result = sub_22E4C43EC((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v458 = *v457;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v460 = *(_QWORD *)v459 + 8 * *(unsigned int *)(v459 + 8);
      }
      else
      {
        v460 = 0;
      }
      if (v458 == (uint64_t *)v460)
        return 1;
      while ((sub_22E4C4488((uint64_t)a1, *v458) & 1) != 0)
      {
        if (++v458 == (uint64_t *)v460)
          return 1;
      }
      return 0;
    case 79:
      result = sub_22E4C43EC((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v18 = *v17;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v20 = *(_QWORD *)v19 + 8 * *(unsigned int *)(v19 + 8);
      }
      else
      {
        v20 = 0;
      }
      if (v18 == (uint64_t *)v20)
        return 1;
      while ((sub_22E4C4488((uint64_t)a1, *v18) & 1) != 0)
      {
        if (++v18 == (uint64_t *)v20)
          return 1;
      }
      return 0;
    case 80:
      result = sub_22E4C43EC((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v59 = *v58;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v61 = *(_QWORD *)v60 + 8 * *(unsigned int *)(v60 + 8);
      }
      else
      {
        v61 = 0;
      }
      if (v59 == (uint64_t *)v61)
        return 1;
      while ((sub_22E4C4488((uint64_t)a1, *v59) & 1) != 0)
      {
        if (++v59 == (uint64_t *)v61)
          return 1;
      }
      return 0;
    case 81:
      v166 = sub_22EFCAE04(a2);
      result = sub_22E4C43EC((uint64_t)a1, v166);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v168 = *v167;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v170 = *(_QWORD *)v169 + 8 * *(unsigned int *)(v169 + 8);
      }
      else
      {
        v170 = 0;
      }
      if (v168 == (uint64_t *)v170)
        return 1;
      while ((sub_22E4C4488((uint64_t)a1, *v168) & 1) != 0)
      {
        if (++v168 == (uint64_t *)v170)
          return 1;
      }
      return 0;
    case 82:
      result = sub_22E4A103C(a1, *(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFFCLL, 0);
      if (!(_DWORD)result)
        return result;
      result = sub_22E4A103C(a1, *(_QWORD *)(a2 + 48), 0);
      if (!(_DWORD)result)
        return result;
      if ((v160 = *(_DWORD *)v4 & 0x7F, v160 <= 0x39) && ((1 << v160) & 0x3F0003E01011066) != 0
        || v160 - 70 <= 0xD && ((1 << (v160 - 70)) & 0x2803) != 0
        || v160 - 19 <= 4)
      {
        v161 = sub_22EFCAE04(a2);
      }
      else
      {
        v161 = 0;
      }
      result = sub_22E4C43EC((uint64_t)a1, v161);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v163 = *v162;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v165 = *(_QWORD *)v164 + 8 * *(unsigned int *)(v164 + 8);
      }
      else
      {
        v165 = 0;
      }
      if (v163 == (uint64_t *)v165)
        return 1;
      break;
    case 83:
      v11 = *(_QWORD *)(a2 + 88);
      v12 = *(_BYTE **)(v11 + 19016);
      v13 = *(_BYTE **)(v11 + 19024);
      v14 = v13 - v12;
      if (v13 == v12)
      {
        v15 = 0;
        v16 = 0;
      }
      else
      {
        if (v14 < 0)
          abort();
        v15 = (char *)operator new(v13 - v12);
        memmove(v15, v12, v14);
        v16 = &v15[8 * (v14 >> 3)];
      }
      if (v16 - v15 == 8 && (*(_DWORD *)(*(_QWORD *)v15 + 28) & 0x7F) == 0x53)
      {
        operator delete(v15);
        result = sub_22E4C43EC((uint64_t)a1, a2 + 40);
        if (!(_DWORD)result)
          return result;
      }
      else
      {
        if (v15 != v16)
        {
          v500 = v15;
          do
          {
            if ((*(_DWORD *)(*(_QWORD *)v500 + 28) & 0x7Fu) - 1 >= 2
              && ((*(_DWORD *)(*(_QWORD *)v500 + 28) & 0x7Fu) - 35 > 2
               || (v501 = *(_QWORD *)(*(_QWORD *)v500 + 128)) == 0
               || ((*(unsigned __int16 *)(v501 + 8) | (*(unsigned __int8 *)(v501 + 10) << 16)) & 0x100000) == 0)
              && !sub_22E4AC974(a1))
            {
              if (v15)
                operator delete(v15);
              return 0;
            }
            v500 += 8;
          }
          while (v500 != v16);
        }
        if (v15)
          operator delete(v15);
      }
      if ((*(_BYTE *)(v4 + 1) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v503 = *v502;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v505 = *(_QWORD *)v504 + 8 * *(unsigned int *)(v504 + 8);
        }
        else
        {
          v505 = 0;
        }
        for (; v503 != (uint64_t *)v505; ++v503)
        {
          if ((sub_22E4C4488((uint64_t)a1, *v503) & 1) == 0)
            return 0;
        }
      }
      return 1;
    default:
      return 1;
  }
  while ((sub_22E4C4488((uint64_t)a1, *v163) & 1) != 0)
  {
    if (++v163 == (uint64_t *)v165)
      return 1;
  }
  return 0;
}

uint64_t sub_22E4B07FC(char *a1, uint64_t a2)
{
  uint64_t result;

  if ((*(_BYTE *)(a2 + 60) & 4) != 0)
  {
    if (*(_QWORD *)(a2 + 152))
    {
      if ((sub_22E4A103C(a1, *(_QWORD *)(a2 + 152), 0) & 1) == 0)
        return 0;
    }
    else
    {
      result = sub_22E4B0A8C(a1, a2 + 80);
      if (!(_DWORD)result)
        return result;
    }
  }
  return 1;
}

uint64_t sub_22E4B0844(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;

  result = sub_22E4A103C(a1, *(_QWORD *)(a2 + 40), 0);
  if ((_DWORD)result)
  {
    v5 = *(_DWORD *)(a2 + 28) & 0x7F;
    v6 = v5 > 0x39 || ((1 << v5) & 0x3F0003E01011066) == 0;
    if (v6 && (v5 - 70 <= 0xD ? (v8 = ((1 << (v5 - 70)) & 0x2803) == 0) : (v8 = 1), v8 && v5 - 19 > 4))
      v7 = 0;
    else
      v7 = sub_22EFCAE04(a2);
    result = sub_22E4C43EC(a1, v7);
    if ((_DWORD)result)
    {
      if ((*(_BYTE *)(a2 + 29) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v10 = *v9;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v12 = *(_QWORD *)v11 + 8 * *(unsigned int *)(v11 + 8);
      }
      else
      {
        v12 = 0;
      }
      if (v10 == v12)
      {
        return 1;
      }
      else
      {
        v13 = v10 + 8;
        do
        {
          result = sub_22E4C4488(a1, *(_QWORD *)(v13 - 8));
          if ((_DWORD)result)
            v14 = v13 == v12;
          else
            v14 = 1;
          v13 += 8;
        }
        while (!v14);
      }
    }
  }
  return result;
}

uint64_t sub_22E4B095C(char *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  uint64_t result;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  if (!*(_DWORD *)(a2 + 96))
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 80);
  v5 = (unint64_t *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 4) != 0)
    v5 = (unint64_t *)*v5;
  result = sub_22E4B0C6C(a1, *v5, (uint64_t)(v5 + 1));
  if ((_DWORD)result)
  {
LABEL_5:
    v7 = *(_DWORD *)(a2 + 28) & 0x7F;
    v8 = v7 > 0x39 || ((1 << v7) & 0x3F0003E01011066) == 0;
    if (v8 && (v7 - 70 <= 0xD ? (v10 = ((1 << (v7 - 70)) & 0x2803) == 0) : (v10 = 1), v10 && v7 - 19 > 4))
      v9 = 0;
    else
      v9 = sub_22EFCAE04(a2);
    result = sub_22E4C43EC((uint64_t)a1, v9);
    if ((_DWORD)result)
    {
      if ((*(_BYTE *)(a2 + 29) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v12 = *v11;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v14 = *(_QWORD *)v13 + 8 * *(unsigned int *)(v13 + 8);
      }
      else
      {
        v14 = 0;
      }
      if (v12 == v14)
      {
        return 1;
      }
      else
      {
        v15 = v12 + 8;
        do
        {
          result = sub_22E4C4488((uint64_t)a1, *(_QWORD *)(v15 - 8));
          if ((_DWORD)result)
            v16 = v15 == v14;
          else
            v16 = 1;
          v15 += 8;
        }
        while (!v16);
      }
    }
  }
  return result;
}

uint64_t sub_22E4B0A8C(char *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v10;
  __int128 v11;
  uint64_t v12;

  result = sub_22E4B0B2C(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
  {
    v11 = *(_OWORD *)(a2 + 24);
    v12 = *(_QWORD *)(a2 + 40);
    result = sub_22E4B0BB4((uint64_t)a1, (uint64_t *)&v11);
    if ((_DWORD)result)
    {
      v5 = *(_QWORD *)(a2 + 64);
      if (v5 && (v6 = *(unsigned int *)(v5 + 8), (_DWORD)v6))
      {
        v7 = v5 + 16;
        v8 = v6 - 1;
        do
        {
          result = sub_22E4B1628((uint64_t)a1, v7);
          v10 = v8-- != 0;
          if (!(_DWORD)result)
            break;
          v7 += 32;
        }
        while (v10);
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_22E4B0B2C(char *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = a2;
  v9[1] = a3;
  if (!a2)
    return 1;
  v5 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v5 || (result = sub_22E4B0B2C(a1, v5, a3), (_DWORD)result))
  {
    if (*(_QWORD *)(a2 + 16) && (*(_BYTE *)(a2 + 8) & 4) != 0)
    {
      v7 = sub_22F0AB4E0((uint64_t)v9);
      return sub_22E4B0C6C(a1, v7, v8);
    }
    return 1;
  }
  return result;
}

uint64_t sub_22E4B0BB4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t result;
  unint64_t v8;
  int v9;
  unint64_t v10;

  v2 = *a2;
  v3 = *a2 & 7;
  v4 = v3;
  if ((_DWORD)v3 == 7)
  {
    v5 = *(_DWORD *)(v2 & 0xFFFFFFFFFFFFFFF8);
    if (v5 >= 3)
      v5 = 3;
    v4 = v5 | 8;
  }
  if ((v4 - 3) < 3)
  {
    if ((v3 - 3) <= 2)
    {
      v6 = (_QWORD *)a2[2];
      if (v6)
      {
        if ((sub_22E4B0C6C(a1, *v6, v6 + 1) & 1) == 0)
          return 0;
      }
    }
    return 1;
  }
  if (v4 != 8)
    return 1;
  if ((~(_BYTE)v2 & 7) != 0)
    goto LABEL_15;
  v8 = v2 & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_DWORD *)v8;
  if (*(_DWORD *)v8 >= 3u)
    v9 = 3;
  if (v9)
LABEL_15:
    v10 = 0;
  else
    v10 = *(_QWORD *)(v8 + 16) & 0xFFFFFFFFFFFFFFF9;
  result = sub_22E4B1740(a1, v10);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t sub_22E4B0C6C(char *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  char v59;
  int v60;
  int v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;

  if (!a2)
    return 1;
  v4 = a2;
  while (2)
  {
    v6 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
    if ((v4 & 0xF) != 0)
    {
LABEL_4:
      if ((v6 & 0xFFFFFFFFFFFFFFF0) != 0)
        v7 = *(_QWORD *)((char *)&unk_22F4570A8
                       + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
      else
        v7 = 1;
      a3 = (a3 + v7 - 1) & -v7;
      v4 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
      goto LABEL_49;
    }
    switch(*(_BYTE *)(v6 + 16))
    {
      case 0:
      case 1:
      case 0x16:
      case 0x17:
      case 0x36:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9)
          goto LABEL_157;
        v4 = *(_QWORD *)(v4 + 32);
        v8 = 1;
        if (v4 >= 0x10 && (v4 & 0xF) == 0)
          v8 = *(_QWORD *)((char *)&unk_22F4570A8
                         + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
        v9 = a3 + v8 - 1;
        goto LABEL_48;
      case 2:
      case 3:
      case 4:
      case 5:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9)
          goto LABEL_157;
        v15 = *(_QWORD *)(v4 + 32);
        v16 = 1;
        if (v15 >= 0x10 && (v15 & 0xF) == 0)
          v16 = *(_QWORD *)((char *)&unk_22F4570A8
                          + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
        result = sub_22E4B0C6C(a1, v15, (a3 + v16 + 15) & -v16);
        if (!(_DWORD)result)
          return result;
        v17 = *(_QWORD *)(a3 + 8);
        return sub_22E4A103C(a1, v17, 0);
      case 6:
      case 0x37:
      case 0x38:
        goto LABEL_157;
      case 7:
      case 0x25:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9)
          goto LABEL_157;
        v4 = *(_QWORD *)(v4 + 32);
        v8 = 1;
        if (v4 >= 0x10 && (v4 & 0xF) == 0)
          v8 = *(_QWORD *)((char *)&unk_22F4570A8
                         + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
        v9 = a3 + v8 + 7;
        goto LABEL_48;
      case 8:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9)
          goto LABEL_157;
        v4 = *(_QWORD *)(v4 + 32);
        v8 = 1;
        if (v4 >= 0x10 && (v4 & 0xF) == 0)
          v8 = *(_QWORD *)((char *)&unk_22F4570A8
                         + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
        v9 = v8 + a3;
        goto LABEL_48;
      case 9:
      case 0xB:
      case 0x1B:
      case 0x22:
      case 0x23:
      case 0x2C:
      case 0x2F:
      case 0x32:
      case 0x34:
      case 0x35:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 9)
          return 1;
        goto LABEL_157;
      case 0xA:
      case 0x20:
      case 0x24:
      case 0x26:
      case 0x27:
      case 0x28:
      case 0x29:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9)
          goto LABEL_157;
        v4 = *(_QWORD *)(v4 + 32);
        goto LABEL_10;
      case 0xC:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 9)
          goto LABEL_66;
        goto LABEL_157;
      case 0xD:
      case 0x30:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9)
          goto LABEL_157;
        v17 = *(_QWORD *)(v4 + 24);
        return sub_22E4A103C(a1, v17, 0);
      case 0xE:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9)
          goto LABEL_157;
        result = sub_22E4A088C(a1, *(_QWORD *)(v4 + 24));
        if (!(_DWORD)result)
          return result;
        if (!*(_QWORD *)(v4 + 40))
          return 1;
        result = sub_22E4B0B2C(a1, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 16));
        if (!(_DWORD)result)
          return result;
        v19 = *(_DWORD *)(a3 + 28);
        v68 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 40);
        v69 = v19;
        sub_22EFC6DC4((uint64_t)&v70, v68);
        result = sub_22E4B0BB4((uint64_t)a1, &v68);
        if (!(_DWORD)result)
          return result;
        v20 = *(unsigned int *)(v4 + 20);
        if (!(_DWORD)v20)
          return 1;
        v21 = v4 + 48;
        v22 = (uint64_t *)(a3 + 56);
        v23 = v20 - 1;
        do
        {
          v24 = *v22++;
          v71 = *(_OWORD *)v21;
          v72 = *(_QWORD *)(v21 + 16);
          v73 = v24;
          result = sub_22E4B1628((uint64_t)a1, (uint64_t)&v71);
          v25 = v23-- != 0;
          v26 = v25;
          if (!(_DWORD)result)
            break;
          v21 += 24;
        }
        while ((v26 & 1) != 0);
        return result;
      case 0xF:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9)
          goto LABEL_157;
        result = sub_22E4B1740((uint64_t)a1, *(_QWORD *)(v4 + 40));
        if (!(_DWORD)result)
          return result;
        v18 = *(_QWORD *)(v4 + 24);
        return sub_22E4A088C(a1, v18);
      case 0x10:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9)
          goto LABEL_157;
        v27 = *(_QWORD *)(v4 + 40);
        goto LABEL_92;
      case 0x11:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9)
          goto LABEL_157;
        v17 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFFCLL;
        return sub_22E4A103C(a1, v17, 0);
      case 0x12:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9)
          goto LABEL_157;
        return sub_22E4B0B2C(a1, *(_QWORD *)(v4 + 32), *(_QWORD *)(a3 + 8));
      case 0x13:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9)
          goto LABEL_157;
        v27 = *(_QWORD *)(v4 + 40);
        if (!v27)
          goto LABEL_93;
LABEL_92:
        result = sub_22E4A103C(a1, v27, 0);
        if (!(_DWORD)result)
          return result;
LABEL_93:
        v18 = *(_QWORD *)(v4 + 48);
        return sub_22E4A088C(a1, v18);
      case 0x14:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9)
          goto LABEL_157;
        v28 = *(_QWORD *)(a3 + 8);
        if (v28)
        {
          v29 = *(_QWORD *)(v4 + 32);
          if (v29)
          {
            result = sub_22E4B0B2C(a1, v29, v28);
            if (!(_DWORD)result)
              return result;
          }
        }
        v30 = *(unsigned int *)(v4 + 20);
        if (!(_DWORD)v30)
          return 1;
        v31 = v4 + 48;
        v32 = (uint64_t *)(a3 + 32);
        v33 = v30 - 1;
        do
        {
          v34 = *v32++;
          v71 = *(_OWORD *)v31;
          v72 = *(_QWORD *)(v31 + 16);
          v73 = v34;
          result = sub_22E4B1628((uint64_t)a1, (uint64_t)&v71);
          v25 = v33-- != 0;
          v35 = v25;
          if (!(_DWORD)result)
            break;
          v31 += 24;
        }
        while ((v35 & 1) != 0);
        return result;
      case 0x15:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9)
          goto LABEL_157;
        v36 = *(_QWORD *)(v4 + 48);
        if (v36)
        {
          result = sub_22E4A103C(a1, v36, 0);
          if (!(_DWORD)result)
            return result;
        }
        v18 = *(_QWORD *)(v4 + 40);
        return sub_22E4A088C(a1, v18);
      case 0x18:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9)
          goto LABEL_157;
        v12 = *(_QWORD *)(v4 + 32);
        if (v12)
        {
          result = sub_22E4B0B2C(a1, v12, *(_QWORD *)(a3 + 8));
          if (!(_DWORD)result)
            return result;
        }
        v4 = *(_QWORD *)(v4 + 40);
        goto LABEL_44;
      case 0x19:
        *(_QWORD *)&v71 = v4;
        *((_QWORD *)&v71 + 1) = a3;
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9)
          goto LABEL_157;
        v37 = *(_QWORD *)(v4 + 24);
        v38 = sub_22E47EE80(&v71);
        return sub_22E4B0C6C(a1, v37, v38);
      case 0x1A:
        *(_QWORD *)&v71 = v4;
        *((_QWORD *)&v71 + 1) = a3;
        result = sub_22E4B18D0(a1, v4);
        if (!(_DWORD)result)
          return result;
        v39 = *(_QWORD *)(v4 + 24);
        v40 = sub_22E47EE80(&v71);
        result = sub_22E4B0C6C(a1, v39, v40);
        if (!(_DWORD)result)
          return result;
        v41 = v71;
        v42 = *(_QWORD *)(v71 + 16);
        if (*(_BYTE *)(v71 + 16) == 25 || (v42 & 0x3FFFC000000000) == 0)
          goto LABEL_126;
        v44 = 0;
        v45 = (unsigned __int16)(v42 >> 38);
        do
        {
          if (*(_QWORD *)(*((_QWORD *)&v71 + 1) + 8 * v44 + 16))
          {
            if ((sub_22E4AC974(a1) & 1) == 0)
              return 0;
          }
          else if (v44 < (unsigned __int16)(*(_QWORD *)(v41 + 16) >> 38))
          {
            result = sub_22E4A088C(a1, *(_QWORD *)(v41 + 40 + 8 * v44));
            if (!(_DWORD)result)
              return result;
          }
          ++v44;
        }
        while (v45 != v44);
        v42 = *(_QWORD *)(v41 + 16);
LABEL_126:
        if ((v42 & 0x3C0000000000000) == 0x80000000000000)
        {
          v46 = (_DWORD *)((v41 + 8 * (unsigned __int16)(v42 >> 38) + 4 * ((v42 >> 59) & 1) + 47) & 0xFFFFFFFFFFFFFFF8);
          v49 = *v46;
          v48 = v46 + 2;
          v47 = v49;
          if (v49)
          {
            v50 = 8 * v47;
            while ((sub_22E4A088C(a1, *v48) & 1) != 0)
            {
              ++v48;
              v50 -= 8;
              if (!v50)
                goto LABEL_131;
            }
            return 0;
          }
        }
LABEL_131:
        v51 = sub_22F257D3C(v41);
        if (!v51)
          return 1;
        result = sub_22E4A103C(a1, v51, 0);
        if ((_DWORD)result)
          return 1;
        return result;
      case 0x1C:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9)
          goto LABEL_157;
        v4 = *(_QWORD *)(v4 + 24);
LABEL_10:
        v8 = 1;
        if (v4 >= 0x10 && (v4 & 0xF) == 0)
          v8 = *(_QWORD *)((char *)&unk_22F4570A8
                         + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
        v9 = a3 + v8 + 3;
        goto LABEL_48;
      case 0x1D:
      case 0x1E:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9)
          goto LABEL_157;
        result = sub_22E4A103C(a1, *(_QWORD *)(a3 + 16), 0);
        if (!(_DWORD)result)
          return result;
        result = sub_22E4A103C(a1, *(_QWORD *)(a3 + 24), 0);
        if (!(_DWORD)result)
          return result;
LABEL_66:
        v18 = *(_QWORD *)(v4 + 32);
        return sub_22E4A088C(a1, v18);
      case 0x1F:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9)
          goto LABEL_157;
        v14 = *(_QWORD **)(a3 + 8);
        if (v14)
        {
          if ((sub_22E4B0C6C(a1, *v14, v14 + 1) & 1) == 0)
            return 0;
        }
        else
        {
          result = sub_22E4A088C(a1, *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFF0);
          if (!(_DWORD)result)
            return result;
        }
        v4 = *(_QWORD *)(v4 + 32);
LABEL_44:
        v8 = 1;
        if (v4 >= 0x10 && (v4 & 0xF) == 0)
          v8 = *(_QWORD *)((char *)&unk_22F4570A8
                         + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
        v9 = a3 + v8 + 15;
LABEL_48:
        a3 = v9 & -v8;
        goto LABEL_49;
      case 0x21:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9)
          goto LABEL_157;
        v52 = *(_QWORD *)(v4 + 24);
        v53 = *(_QWORD *)(v52 & 0xFFFFFFFFFFFFFFF0);
        if (v53 != v4)
        {
          v54 = 1;
          if (v52 >= 0x10 && (v52 & 0xF) == 0)
            v54 = *(_QWORD *)((char *)&unk_22F4570A8
                            + ((uint64_t)((unint64_t)*(unsigned int *)(v53 + 16) << 56) >> 53));
          result = sub_22E4B0C6C(a1, v52, (a3+ (((HIWORD(*(_DWORD *)(v4 + 16)) & 0x3F8) + 4 * (*(_DWORD *)(v4 + 16) >> 26) + 31) & 0x7F8)+ v54- 1) & -v54);
          if (!(_DWORD)result)
            return result;
        }
        v55 = (*(_DWORD *)(v4 + 16) >> 19) & 0x7F;
        if (!(_DWORD)v55)
          return 1;
        v56 = (_QWORD *)(a3 + 24);
        v57 = v55 - 1;
        do
        {
          v58 = (_QWORD *)*v56++;
          result = sub_22E4B0C6C(a1, *v58, v58 + 1);
          v25 = v57-- != 0;
          v59 = v25;
        }
        while ((_DWORD)result && (v59 & 1) != 0);
        return result;
      case 0x2A:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9)
          goto LABEL_157;
        v60 = *(_DWORD *)(v4 + 20);
        *((_QWORD *)&v71 + 1) = *(_QWORD *)(v4 + 40);
        LODWORD(v71) = 8;
        DWORD1(v71) = v60;
        return sub_22E4B1804((uint64_t)a1, (uint64_t)&v71);
      case 0x2B:
        v18 = *(_QWORD *)(v4 + 8);
        if (*(_BYTE *)(*(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0) + 16) != 9)
          return sub_22E4A088C(a1, v18);
        goto LABEL_157;
      case 0x2D:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9)
          goto LABEL_157;
        v61 = sub_22E4B1940(v4);
        if (v61)
          *a1 = 0;
        return v61 ^ 1u;
      case 0x2E:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9)
          goto LABEL_157;
        result = sub_22E4B1740((uint64_t)a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v62 = *(unsigned int *)(v4 + 20);
        if (!(_DWORD)v62)
          return 1;
        v63 = v4 + 40;
        v64 = (uint64_t *)(a3 + 16);
        v65 = v62 - 1;
        do
        {
          v66 = *v64++;
          v71 = *(_OWORD *)v63;
          v72 = *(_QWORD *)(v63 + 16);
          v73 = v66;
          result = sub_22E4B1628((uint64_t)a1, (uint64_t)&v71);
          v25 = v65-- != 0;
          v67 = v25;
          if (!(_DWORD)result)
            break;
          v63 += 24;
        }
        while ((v67 & 1) != 0);
        return result;
      case 0x31:
      case 0x33:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 9)
        {
          v10 = *(unint64_t **)(a3 + 16);
          v11 = *v10;
          a3 = (uint64_t)(v10 + 1);
          v4 = v11;
LABEL_49:
          if (!v4)
            return 1;
          continue;
        }
LABEL_157:
        result = 0;
        *a1 = 0;
        return result;
      case 0x39:
        goto LABEL_4;
      default:
        return 1;
    }
  }
}

uint64_t sub_22E4B1628(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v11;

  result = 1;
  switch(*(_DWORD *)a2)
  {
    case 1:
      v6 = (_QWORD *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL);
      if (v6)
        result = sub_22E4B0C6C(a1, *v6, v6 + 1);
      else
        result = sub_22E4A088C(a1, *(_QWORD *)(a2 + 8));
      break;
    case 5:
    case 6:
      v5 = (_QWORD *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL);
      if (!*v5 || (result = sub_22E4B0B2C(a1, *v5, v5[1]), (_DWORD)result))
        result = sub_22E4B1740(a1, *(_QWORD *)(a2 + 8));
      break;
    case 7:
      result = sub_22E4A103C(a1, *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL, 0);
      break;
    case 8:
      v7 = *(unsigned int *)(a2 + 4);
      if ((_DWORD)v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        v9 = v7 - 1;
        do
        {
          result = sub_22E4B1804(a1, v8);
          v11 = v9-- != 0;
          if (!(_DWORD)result)
            break;
          v8 += 24;
        }
        while (v11);
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_22E4B1740(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t result;
  char v5;

  v2 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((a2 & 6) != 6 || v2 == 0)
  {
    if ((a2 & 6) != 4)
      return 1;
    if (!v2)
      return 1;
    result = sub_22E4B17A0(a1, *(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF8);
    if ((_DWORD)result)
      return 1;
  }
  else
  {
    v5 = sub_22E4B17A0(a1, *(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF8);
    return (v5 & 1) != 0;
  }
  return result;
}

uint64_t sub_22E4B17A0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (!a2)
    return 1;
  v4 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v4 || (result = sub_22E4B17A0(a1, v4), (_DWORD)result))
  {
    v6 = *(_QWORD *)(a2 + 16);
    if (v6 && (*(_BYTE *)(a2 + 8) & 4) != 0)
      return sub_22E4A088C(a1, v6 & 0xFFFFFFFFFFFFFFF0);
    return 1;
  }
  return result;
}

uint64_t sub_22E4B1804(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v8;

  result = 1;
  switch(*(_DWORD *)a2)
  {
    case 1:
      result = sub_22E4A088C(a1, *(_QWORD *)(a2 + 8));
      break;
    case 5:
    case 6:
      result = sub_22E4B1740(a1, *(_QWORD *)(a2 + 8));
      break;
    case 7:
      result = sub_22E4A103C(a1, *(_QWORD *)(a2 + 8), 0);
      break;
    case 8:
      v4 = *(unsigned int *)(a2 + 4);
      if ((_DWORD)v4)
      {
        v5 = *(_QWORD *)(a2 + 8);
        v6 = v4 - 1;
        do
        {
          result = sub_22E4B1804(a1, v5);
          v8 = v6-- != 0;
          if (!(_DWORD)result)
            break;
          v5 += 24;
        }
        while (v8);
      }
      break;
    default:
      return result;
  }
  return result;
}

BOOL sub_22E4B18D0(char *a1, uint64_t a2)
{
  _BOOL8 v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v7;
  unint64_t StatusReg;
  char v9;
  BOOL v10;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9)
  {
    v2 = 0;
  }
  else
  {
    v3 = *(_QWORD *)(a2 + 16);
    v4 = (v3 >> 54) & 0xE;
    v5 = ((v3 >> 54) & 0xF) - 9;
    v7 = (_DWORD)v4 == 4 || v5 >= 0xFFFFFFFD || *a1 == 0;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0));
    v9 = !v7;
    *a1 = v9;
    v10 = (*(_BYTE *)(a2 + 19) & 1) == 0;
    _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0), StatusReg);
    v2 = !v10 && v10;
  }
  *a1 = v2;
  return v2;
}

uint64_t sub_22E4B1940(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = sub_22F114198(*(_QWORD *)(a1 + 24));
  if (v1)
    v2 = (*(_DWORD *)(v1 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD;
  else
    v2 = 0;
  if (!v2)
    return 0;
  if (*(_QWORD *)(v1 + 40) < 8uLL || (*(_QWORD *)(v1 + 40) & 7) != 0)
    return 1;
  if ((*(_DWORD *)(v1 + 28) & 0x7E) != 0x24)
    return 0;
  v5 = *(_QWORD *)(v1 + 168);
  v6 = *(_DWORD *)(v5 + 8);
  if (!v6)
    return 0;
  v7 = *(_QWORD *)v5;
  v8 = 24 * v6 - 24;
  do
  {
    result = sub_22E4B19E0(v7);
    if ((result & 1) != 0)
      break;
    v7 += 24;
    v9 = v8;
    v8 -= 24;
  }
  while (v9);
  return result;
}

uint64_t sub_22E4B19E0(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;

  if (*(_DWORD *)a1 == 1)
  {
    v6 = 0;
    sub_22E4B1A70(&v6, *(_QWORD *)(a1 + 8));
    return v6 != 0;
  }
  if (*(_DWORD *)a1 != 8)
    return 0;
  v1 = *(_DWORD *)(a1 + 4);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(a1 + 8);
  v3 = 24 * v1 - 24;
  do
  {
    result = sub_22E4B19E0(v2);
    if ((result & 1) != 0)
      break;
    v2 += 24;
    v5 = v3;
    v3 -= 24;
  }
  while (v5);
  return result;
}

uint64_t sub_22E4B1A70(_BYTE *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _DWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  _DWORD v47[2];
  uint64_t v48;

  if (a2 < 0x10)
    return 1;
  while (2)
  {
    v4 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
    v5 = *(_DWORD *)(v4 + 16);
    result = 1;
    switch((char)v5)
    {
      case 0:
      case 1:
      case 4:
      case 6:
      case 7:
      case 8:
      case 10:
      case 12:
      case 29:
      case 32:
      case 36:
      case 37:
      case 38:
      case 39:
      case 54:
      case 55:
      case 56:
        goto LABEL_5;
      case 2:
        result = sub_22E4B1A70(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        if ((*(_BYTE *)(v4 + 19) & 2) == 0)
          return 1;
        v14 = *(_QWORD *)(v4 + 56);
        if (!v14)
          return 1;
        goto LABEL_49;
      case 3:
        result = sub_22E4B1A70(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v14 = *(_QWORD *)(v4 + 48);
        if (v14)
          goto LABEL_49;
        return 1;
      case 5:
        result = sub_22E4B1A70(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v13 = *(_QWORD *)(v4 + 40);
        return sub_22E4B1F30((uint64_t)a1, v13, 0);
      case 13:
      case 48:
        v13 = *(_QWORD *)(v4 + 24);
        return sub_22E4B1F30((uint64_t)a1, v13, 0);
      case 14:
        result = sub_22E4B1A70(a1, *(_QWORD *)(v4 + 24));
        if (!(_DWORD)result)
          return result;
        v15 = *(_QWORD *)(v4 + 40);
        if (!v15)
          return 1;
        result = sub_22E4BD868(a1, v15);
        if (!(_DWORD)result)
          return result;
        v16 = *(unsigned int *)(v4 + 20);
        if (!(_DWORD)v16)
          return 1;
        v17 = v4 + 48;
        v18 = v16 - 1;
        do
        {
          result = sub_22E4C24C0((uint64_t)a1, v17);
          v19 = v18-- != 0;
          v20 = v19;
          if (!(_DWORD)result)
            break;
          v17 += 24;
        }
        while ((v20 & 1) != 0);
        return result;
      case 15:
        result = sub_22E4C23FC((uint64_t)a1, *(_QWORD *)(v4 + 40));
        if ((_DWORD)result)
          goto LABEL_19;
        return result;
      case 16:
        v7 = *(_QWORD *)(v4 + 40);
        goto LABEL_22;
      case 17:
        v13 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFFCLL;
        return sub_22E4B1F30((uint64_t)a1, v13, 0);
      case 18:
        return sub_22E4C245C((uint64_t)a1, *(_QWORD *)(v4 + 32));
      case 19:
        v7 = *(_QWORD *)(v4 + 40);
        if (!v7)
          goto LABEL_23;
LABEL_22:
        result = sub_22E4B1F30((uint64_t)a1, v7, 0);
        if (!(_DWORD)result)
          return result;
LABEL_23:
        v6 = (unint64_t *)(v4 + 48);
        goto LABEL_6;
      case 20:
        result = sub_22E4C245C((uint64_t)a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v21 = *(unsigned int *)(v4 + 20);
        if (!(_DWORD)v21)
          return 1;
        v22 = v4 + 48;
        v23 = v21 - 1;
        do
        {
          result = sub_22E4C24C0((uint64_t)a1, v22);
          v19 = v23-- != 0;
          v24 = v19;
          if (!(_DWORD)result)
            break;
          v22 += 24;
        }
        while ((v24 & 1) != 0);
        return result;
      case 21:
        v8 = *(_QWORD *)(v4 + 48);
        if (v8)
        {
          result = sub_22E4B1F30((uint64_t)a1, v8, 0);
          if (!(_DWORD)result)
            return result;
        }
        goto LABEL_31;
      case 22:
        goto LABEL_34;
      case 23:
        v9 = *(_QWORD *)(v4 + 64);
        if (!v9)
          goto LABEL_5;
        goto LABEL_35;
      case 24:
        v10 = *(_QWORD *)(v4 + 32);
        if (v10)
        {
          result = sub_22E4C245C((uint64_t)a1, v10);
          if (!(_DWORD)result)
            return result;
        }
LABEL_31:
        v6 = (unint64_t *)(v4 + 40);
        goto LABEL_6;
      case 25:
      case 28:
      case 49:
LABEL_19:
        v6 = (unint64_t *)(v4 + 24);
        goto LABEL_6;
      case 26:
        result = sub_22E4B1A70(a1, *(_QWORD *)(v4 + 24));
        if (!(_DWORD)result)
          return result;
        v25 = *(_QWORD *)(v4 + 16);
        v26 = (unsigned __int16)(v25 >> 38);
        if (!(unsigned __int16)(v25 >> 38))
          goto LABEL_82;
        v27 = 8 * v26;
        v28 = (_QWORD *)(v4 + 40);
        break;
      case 30:
        v11 = *(_QWORD *)(v4 + 48);
        if (v11)
        {
          result = sub_22E4B1F30((uint64_t)a1, v11, 0);
          if (!(_DWORD)result)
            return result;
        }
LABEL_34:
        v9 = *(_QWORD *)(v4 + 56);
        if (!v9)
          goto LABEL_5;
LABEL_35:
        result = sub_22E4B1F30((uint64_t)a1, v9, 0);
        if (!(_DWORD)result)
          return result;
LABEL_5:
        v6 = (unint64_t *)(v4 + 32);
LABEL_6:
        a2 = *v6;
        if (*v6 < 0x10)
          return 1;
        continue;
      case 31:
        v12 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFF0;
        goto LABEL_40;
      case 33:
        v35 = *(_QWORD *)(v4 + 24);
        if (*(_QWORD *)(v35 & 0xFFFFFFFFFFFFFFF0) != v4)
        {
          result = sub_22E4B1A70(a1, v35);
          if (!(_DWORD)result)
            return result;
        }
        v36 = (*(_QWORD *)(v4 + 16) >> 19) & 0x7FLL;
        if (!v36)
          return 1;
        v37 = (uint64_t *)(v4 + 48);
        v38 = 8 * v36 - 8;
        do
        {
          v39 = *v37++;
          result = sub_22E4B1A70(a1, v39);
          if ((_DWORD)result)
            v40 = v38 == 0;
          else
            v40 = 1;
          v38 -= 8;
        }
        while (!v40);
        return result;
      case 40:
        while ((v5 & 0x100000) != 0)
        {
          v4 = *(_QWORD *)(*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v4)
          {
            v5 = *(_DWORD *)(v4 + 16);
            if ((v5 & 0xFE) == 0x28)
              continue;
          }
          v4 = sub_22F10CF48(v4);
          v5 = *(_DWORD *)(v4 + 16);
        }
        goto LABEL_5;
      case 41:
        while ((v5 & 0x100000) != 0)
        {
          v4 = *(_QWORD *)(*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v4)
          {
            v5 = *(_DWORD *)(v4 + 16);
            if ((v5 & 0xFE) == 0x28)
              continue;
          }
          v4 = sub_22F10CF48(v4);
          v5 = *(_DWORD *)(v4 + 16);
        }
        goto LABEL_5;
      case 42:
        v41 = *(_DWORD *)(v4 + 20);
        v48 = *(_QWORD *)(v4 + 40);
        v47[0] = 8;
        v47[1] = v41;
        return sub_22E4C24C0((uint64_t)a1, (uint64_t)v47);
      case 43:
        v6 = (unint64_t *)(v4 + 8);
        goto LABEL_6;
      case 45:
        v42 = sub_22E4B1940(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
        if (v42)
          *a1 = 1;
        return v42 ^ 1u;
      case 46:
        result = sub_22E4C23FC((uint64_t)a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v43 = *(unsigned int *)(v4 + 20);
        if (!(_DWORD)v43)
          return 1;
        v44 = v4 + 40;
        v45 = v43 - 1;
        do
        {
          result = sub_22E4C24C0((uint64_t)a1, v44);
          v19 = v45-- != 0;
          v46 = v19;
          if (!(_DWORD)result)
            break;
          v44 += 24;
        }
        while ((v46 & 1) != 0);
        return result;
      case 51:
        v12 = *(_QWORD *)(v4 + 24);
LABEL_40:
        result = sub_22E4B1A70(a1, v12);
        if (!(_DWORD)result)
          return result;
        goto LABEL_5;
      default:
        return result;
    }
    break;
  }
  do
  {
    if ((sub_22E4B1A70(a1, *v28) & 1) == 0)
      return 0;
    ++v28;
    v27 -= 8;
  }
  while (v27);
  v25 = *(_QWORD *)(v4 + 16);
  v26 = (unsigned __int16)(v25 >> 38);
LABEL_82:
  if ((v25 & 0x3C0000000000000) == 0x80000000000000)
  {
    v29 = (_DWORD *)((v4 + 40 + 8 * v26 + 4 * ((v25 >> 59) & 1) + 7) & 0xFFFFFFFFFFFFFFF8);
    v32 = *v29;
    v31 = v29 + 2;
    v30 = v32;
    if (v32)
    {
      v33 = 8 * v30;
      while ((sub_22E4B1A70(a1, *v31) & 1) != 0)
      {
        ++v31;
        v33 -= 8;
        if (!v33)
          goto LABEL_87;
      }
      return 0;
    }
  }
LABEL_87:
  v34 = sub_22F257D3C(v4);
  if (!v34)
    return 1;
  v14 = v34;
LABEL_49:
  result = sub_22E4B1F30((uint64_t)a1, v14, 0);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t sub_22E4B1F30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unsigned int v5;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD v17[10];

  v17[8] = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    if (a3)
    {
      v4 = a2 & 0xFFFFFFFFFFFFFFFBLL;
      v5 = *(_DWORD *)(a3 + 8);
      if (v5 >= *(_DWORD *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v5 = *(_DWORD *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v5) = v4;
      ++*(_DWORD *)(a3 + 8);
    }
    else
    {
      v17[0] = a2 & 0xFFFFFFFFFFFFFFFBLL;
      v16 = 0x800000001;
      v7 = 1;
      do
      {
        v8 = v7;
        v9 = &v17[v7];
        v10 = *(v9 - 1);
        if ((v10 & 4) != 0)
        {
          v7 = v8 - 1;
          LODWORD(v16) = v8 - 1;
        }
        else
        {
          *(v9 - 1) = v10 | 4;
          v11 = *(unsigned __int8 *)(v10 & 0xFFFFFFFFFFFFFFF8) - 1;
          if (v11 <= 0xEB)
            __asm { BR              X9 }
          v7 = v16;
          if ((_DWORD)v8 != (_DWORD)v16)
          {
            v12 = &v17[v16 - 1];
            if (&v17[v8] < v12)
            {
              v13 = &v17[v8 + 1];
              do
              {
                v14 = *(v13 - 1);
                *(v13 - 1) = *v12;
                *v12-- = v14;
              }
              while (v13++ < v12);
            }
          }
        }
      }
      while (v7);
    }
  }
  return 1;
}

uint64_t sub_22E4BD868(_BYTE *a1, unint64_t a2)
{
  unint64_t v4;
  int v5;
  uint64_t result;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  char *v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t **v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t **v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  BOOL v52;
  uint64_t v53;
  uint64_t **v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t **v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t **v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t **v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t **v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t **v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int *v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int *v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  unsigned int v93;
  BOOL v94;
  uint64_t v95;
  uint64_t **v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t **v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t **v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t **v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t **v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t **v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t **v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  BOOL v127;
  uint64_t v128;
  uint64_t **v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  BOOL v134;
  uint64_t v135;
  uint64_t **v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t **v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t **v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153;
  BOOL v154;
  uint64_t v155;
  uint64_t **v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t **v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t **v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t **v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t *v177;
  unsigned int v178;
  uint64_t v179;
  uint64_t **v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int v184;
  BOOL v185;
  uint64_t v186;
  uint64_t **v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  unint64_t v192;
  unint64_t v193;
  unsigned int v194;
  uint64_t v195;
  uint64_t **v196;
  uint64_t *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t **v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t *v205;
  unint64_t *v206;
  unint64_t *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t **v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t **v216;
  uint64_t *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t **v220;
  uint64_t *v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int v224;
  BOOL v225;
  uint64_t v226;
  uint64_t **v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unsigned int v234;
  BOOL v235;
  uint64_t v236;
  uint64_t **v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t v240;
  unsigned int v241;
  BOOL v242;
  uint64_t v243;
  uint64_t **v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  _QWORD *v252;
  uint64_t **v253;
  uint64_t *v254;
  uint64_t v255;
  uint64_t v256;
  unsigned int v257;
  uint64_t v258;
  uint64_t **v259;
  uint64_t *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t **v263;
  uint64_t *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t *v268;
  unsigned int v269;
  uint64_t v270;
  uint64_t **v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  _DWORD *v275;
  uint64_t v276;
  uint64_t *v277;
  unsigned int v278;
  uint64_t v279;
  unsigned int v280;
  BOOL v281;
  uint64_t v282;
  uint64_t **v283;
  uint64_t *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  uint64_t v289;
  unsigned int v290;
  BOOL v291;
  uint64_t v292;
  uint64_t **v293;
  uint64_t *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t **v297;
  uint64_t *v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t **v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unsigned int v305;
  BOOL v306;
  uint64_t v307;
  uint64_t **v308;
  uint64_t *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t **v312;
  uint64_t *v313;
  uint64_t v314;
  uint64_t v315;
  int v316;
  uint64_t v317;
  unsigned int v318;
  uint64_t v319;
  uint64_t **v320;
  uint64_t *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t **v324;
  uint64_t *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t **v328;
  uint64_t *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t **v332;
  uint64_t *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  unint64_t *v337;
  unsigned int v338;
  uint64_t v339;
  uint64_t **v340;
  uint64_t *v341;
  uint64_t v342;
  uint64_t v343;
  unsigned int v344;
  uint64_t v345;
  uint64_t **v346;
  uint64_t *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t **v350;
  uint64_t *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t *v356;
  uint64_t v357;
  unint64_t *v358;
  unint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t *v363;
  uint64_t v364;
  uint64_t **v365;
  uint64_t *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t **v369;
  uint64_t *v370;
  uint64_t v371;
  uint64_t v372;
  unsigned int v373;
  BOOL v374;
  uint64_t v375;
  uint64_t **v376;
  uint64_t *v377;
  uint64_t v378;
  uint64_t v379;
  unint64_t v380;
  unint64_t v381;
  unsigned int v382;
  uint64_t v383;
  uint64_t **v384;
  uint64_t *v385;
  uint64_t v386;
  uint64_t v387;
  unint64_t v388;
  uint64_t v389;
  unsigned int v390;
  uint64_t v391;
  uint64_t **v392;
  uint64_t *v393;
  uint64_t v394;
  uint64_t v395;
  unsigned int v396;
  uint64_t v397;
  uint64_t **v398;
  uint64_t *v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  unint64_t v403;
  unint64_t *v404;
  unsigned int v405;
  uint64_t v406;
  uint64_t **v407;
  uint64_t *v408;
  uint64_t v409;
  uint64_t v410;
  unsigned int v411;
  BOOL v412;
  uint64_t v413;
  uint64_t **v414;
  uint64_t *v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t **v418;
  uint64_t *v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t **v422;
  uint64_t *v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t **v426;
  uint64_t *v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t **v430;
  uint64_t *v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t **v434;
  uint64_t *v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t **v438;
  uint64_t *v439;
  uint64_t v440;
  uint64_t v441;
  int v442;
  uint64_t v443;
  unsigned int v444;
  uint64_t v445;
  uint64_t **v446;
  uint64_t *v447;
  uint64_t v448;
  uint64_t v449;
  unint64_t v450;
  unsigned int v451;
  uint64_t v452;
  uint64_t **v453;
  uint64_t *v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t **v457;
  uint64_t *v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t **v461;
  uint64_t *v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t i;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  unsigned int v471;
  BOOL v472;
  uint64_t v473;
  uint64_t **v474;
  uint64_t *v475;
  uint64_t v476;
  uint64_t v477;
  unsigned int v478;
  uint64_t v479;
  uint64_t **v480;
  uint64_t *v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t **v484;
  uint64_t *v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t *v488;
  uint64_t **v489;
  uint64_t *v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t *v493;
  unsigned int v494;
  uint64_t v495;
  uint64_t **v496;
  uint64_t *v497;
  uint64_t v498;
  uint64_t v499;
  char *v500;
  uint64_t v501;
  uint64_t **v502;
  uint64_t *v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t **v506;
  uint64_t *v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t **v511;
  uint64_t *v512;
  uint64_t v513;
  uint64_t v514;
  unint64_t v515;
  uint64_t v516;
  unsigned int v517;
  uint64_t v518;
  uint64_t **v519;
  uint64_t *v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t **v530;
  uint64_t *v531;
  uint64_t v532;
  uint64_t v533;
  BOOL v534;
  uint64_t **v535;
  uint64_t *v536;
  uint64_t v537;
  uint64_t v538;
  BOOL v539;
  BOOL v540;
  BOOL v541;
  BOOL v542;
  BOOL v543;
  int *v544;
  BOOL v545;
  BOOL v546;
  BOOL v547;
  uint64_t **v548;
  uint64_t *v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  int v559;
  uint64_t v560;

  if (!a2)
    return 1;
  v4 = a2 + 28;
  v5 = *(_DWORD *)(a2 + 28) & 0x7F;
  if ((*(_DWORD *)(a2 + 28) & 0x200) != 0)
  {
    if (v5 == 38)
      return sub_22E4C16F0(a1, a2);
    return 1;
  }
  switch(v5)
  {
    case 0:
      result = sub_22E4C258C((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v8 = *v7;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v10 = *(_QWORD *)v9 + 8 * *(unsigned int *)(v9 + 8);
      }
      else
      {
        v10 = 0;
      }
      while (2)
      {
        if (v8 == (uint64_t *)v10)
          return 1;
        if ((sub_22E4C2628((uint64_t)a1, *v8) & 1) != 0)
        {
          ++v8;
          continue;
        }
        break;
      }
      return 0;
    case 1:
      v248 = *(unint64_t **)(a2 + 96);
      if (v248)
      {
        result = sub_22E4C1B60(a1, *v248, (uint64_t)(v248 + 1));
        if (!(_DWORD)result)
          return result;
      }
      v249 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
      result = sub_22E4B1F30(a1, v249, 0);
      if (!(_DWORD)result)
        return result;
      v250 = *(unsigned int *)(a2 + 112);
      if (!(_DWORD)v250)
        goto LABEL_454;
      v251 = 16 * v250;
      v252 = (_QWORD *)(*(_QWORD *)(a2 + 104) + 8);
      while (1)
      {
        if (*v252)
        {
          result = sub_22E4B1F30(a1, *v252, 0);
          if (!(_DWORD)result)
            break;
        }
        v252 += 2;
        v251 -= 16;
        if (!v251)
        {
LABEL_454:
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v254 = *v253;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v256 = *(_QWORD *)v255 + 8 * *(unsigned int *)(v255 + 8);
            }
            else
            {
              v256 = 0;
            }
            while (v254 != (uint64_t *)v256)
            {
              if ((sub_22E4C2628((uint64_t)a1, *v254) & 1) == 0)
                return 0;
              ++v254;
            }
          }
          return 1;
        }
      }
      return result;
    case 2:
      result = sub_22E4B1F30(a1, *(_QWORD *)(a2 + 80) & 0xFFFFFFFFFFFFFFF8, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v217 = *v216;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v219 = *(_QWORD *)v218 + 8 * *(unsigned int *)(v218 + 8);
      }
      else
      {
        v219 = 0;
      }
      while (2)
      {
        if (v217 == (uint64_t *)v219)
          return 1;
        if ((sub_22E4C2628((uint64_t)a1, *v217) & 1) != 0)
        {
          ++v217;
          continue;
        }
        break;
      }
      return 0;
    case 3:
      result = sub_22E4BD868(a1);
      if (!(_DWORD)result)
        return result;
      v231 = *(_QWORD *)(a2 + 48);
      if (!v231)
        goto LABEL_421;
      v232 = *(unsigned int *)(v231 + 8);
      if (!(_DWORD)v232)
        goto LABEL_421;
      v233 = v231 + 16;
      while ((sub_22E4C22E4((uint64_t)a1, v233) & 1) != 0)
      {
        v233 += 32;
        if (!--v232)
        {
LABEL_421:
          v234 = *(_DWORD *)v4 & 0x7F;
          v235 = v234 > 0x39 || ((1 << v234) & 0x3F0003E01011066) == 0;
          if (v235
            && (v234 - 70 <= 0xD ? (v541 = ((1 << (v234 - 70)) & 0x2803) == 0) : (v541 = 1), v541 && v234 - 19 > 4))
          {
            v236 = 0;
          }
          else
          {
            v236 = sub_22EFCAE04(a2);
          }
          result = sub_22E4C258C((uint64_t)a1, v236);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v238 = *v237;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v240 = *(_QWORD *)v239 + 8 * *(unsigned int *)(v239 + 8);
            }
            else
            {
              v240 = 0;
            }
            while (v238 != (uint64_t *)v240)
            {
              if ((sub_22E4C2628((uint64_t)a1, *v238) & 1) == 0)
                return 0;
              ++v238;
            }
          }
          return 1;
        }
      }
      return 0;
    case 4:
      result = sub_22E4C258C((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v173 = *v172;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v175 = *(_QWORD *)v174 + 8 * *(unsigned int *)(v174 + 8);
      }
      else
      {
        v175 = 0;
      }
      while (2)
      {
        if (v173 == (uint64_t *)v175)
          return 1;
        if ((sub_22E4C2628((uint64_t)a1, *v173) & 1) != 0)
        {
          ++v173;
          continue;
        }
        break;
      }
      return 0;
    case 5:
      result = sub_22E4C258C((uint64_t)a1, a2 + 40);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v298 = *v297;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v300 = *(_QWORD *)v299 + 8 * *(unsigned int *)(v299 + 8);
      }
      else
      {
        v300 = 0;
      }
      while (2)
      {
        if (v298 == (uint64_t *)v300)
          return 1;
        if ((sub_22E4C2628((uint64_t)a1, *v298) & 1) != 0)
        {
          ++v298;
          continue;
        }
        break;
      }
      return 0;
    case 6:
      result = sub_22E4C258C((uint64_t)a1, a2 + 40);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v325 = *v324;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v327 = *(_QWORD *)v326 + 8 * *(unsigned int *)(v326 + 8);
      }
      else
      {
        v327 = 0;
      }
      while (2)
      {
        if (v325 == (uint64_t *)v327)
          return 1;
        if ((sub_22E4C2628((uint64_t)a1, *v325) & 1) != 0)
        {
          ++v325;
          continue;
        }
        break;
      }
      return 0;
    case 7:
      result = sub_22E4B1F30(a1, *(_QWORD *)(a2 + 40), 0);
      if (!(_DWORD)result)
        return result;
      v241 = *(_DWORD *)v4 & 0x7F;
      v242 = v241 > 0x39 || ((1 << v241) & 0x3F0003E01011066) == 0;
      v243 = !v242 || v241 - 70 <= 0xD && ((1 << (v241 - 70)) & 0x2803) != 0 || v241 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E4C258C((uint64_t)a1, v243);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v245 = *v244;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v247 = *(_QWORD *)v246 + 8 * *(unsigned int *)(v246 + 8);
      }
      else
      {
        v247 = 0;
      }
      while (2)
      {
        if (v245 == (uint64_t *)v247)
          return 1;
        if ((sub_22E4C2628((uint64_t)a1, *v245) & 1) != 0)
        {
          ++v245;
          continue;
        }
        break;
      }
      return 0;
    case 8:
      v336 = *(_QWORD *)(a2 + 40);
      v337 = (unint64_t *)(v336 & 0xFFFFFFFFFFFFFFF8);
      if ((v336 & 4) != 0 && v337)
      {
        if ((sub_22E4C1B60(a1, *v337, (uint64_t)(v337 + 1)) & 1) == 0)
          return 0;
      }
      else
      {
        result = sub_22E4BD868(a1);
        if (!(_DWORD)result)
          return result;
      }
      v478 = *(_DWORD *)v4 & 0x7F;
      if (v478 <= 0x39 && ((1 << v478) & 0x3F0003E01011066) != 0
        || v478 - 70 <= 0xD && ((1 << (v478 - 70)) & 0x2803) != 0
        || v478 - 19 <= 4)
      {
        v479 = sub_22EFCAE04(a2);
      }
      else
      {
        v479 = 0;
      }
      result = sub_22E4C258C((uint64_t)a1, v479);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v481 = *v480;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v483 = *(_QWORD *)v482 + 8 * *(unsigned int *)(v482 + 8);
      }
      else
      {
        v483 = 0;
      }
      while (2)
      {
        if (v481 == (uint64_t *)v483)
          return 1;
        if ((sub_22E4C2628((uint64_t)a1, *v481) & 1) != 0)
        {
          ++v481;
          continue;
        }
        break;
      }
      return 0;
    case 9:
      v204 = *(_QWORD *)(a2 + 48);
      v205 = (unint64_t *)(v204 & 0xFFFFFFFFFFFFFFF8);
      if ((v204 & 4) != 0 && v205)
      {
        if ((sub_22E4C1B60(a1, *v205, (uint64_t)(v205 + 1)) & 1) == 0)
          return 0;
      }
      else
      {
        result = sub_22E4BD868(a1);
        if (!(_DWORD)result)
          return result;
      }
      v465 = *(unsigned int *)(a2 + 36);
      if (!(_DWORD)v465)
        goto LABEL_859;
      for (i = 0; i != v465; ++i)
      {
        v467 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8 * i);
        v468 = *(_DWORD *)(v467 + 12) & 0x1FFFFFFF;
        if ((_DWORD)v468)
        {
          v469 = v467 + 16;
          v470 = 8 * v468;
          while ((sub_22E4BD868(a1) & 1) != 0)
          {
            v469 += 8;
            v470 -= 8;
            if (!v470)
              goto LABEL_858;
          }
          return 0;
        }
LABEL_858:
        ;
      }
LABEL_859:
      v471 = *(_DWORD *)v4 & 0x7F;
      v472 = v471 > 0x39 || ((1 << v471) & 0x3F0003E01011066) == 0;
      if (v472 && (v471 - 70 <= 0xD ? (v547 = ((1 << (v471 - 70)) & 0x2803) == 0) : (v547 = 1), v547 && v471 - 19 > 4))
        v473 = 0;
      else
        v473 = sub_22EFCAE04(a2);
      result = sub_22E4C258C((uint64_t)a1, v473);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v475 = *v474;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v477 = *(_QWORD *)v476 + 8 * *(unsigned int *)(v476 + 8);
        }
        else
        {
          v477 = 0;
        }
        while (v475 != (uint64_t *)v477)
        {
          if ((sub_22E4C2628((uint64_t)a1, *v475) & 1) == 0)
            return 0;
          ++v475;
        }
      }
      return 1;
    case 10:
      result = sub_22E4C258C((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v333 = *v332;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v335 = *(_QWORD *)v334 + 8 * *(unsigned int *)(v334 + 8);
      }
      else
      {
        v335 = 0;
      }
      while (2)
      {
        if (v333 == (uint64_t *)v335)
          return 1;
        if ((sub_22E4C2628((uint64_t)a1, *v333) & 1) != 0)
        {
          ++v333;
          continue;
        }
        break;
      }
      return 0;
    case 11:
      return (sub_22E4C1738((uint64_t)a1, a2) & 1) != 0;
    case 12:
      result = sub_22E4C258C((uint64_t)a1, a2 + 40);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v201 = *v200;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v203 = *(_QWORD *)v202 + 8 * *(unsigned int *)(v202 + 8);
      }
      else
      {
        v203 = 0;
      }
      while (2)
      {
        if (v201 == (uint64_t *)v203)
          return 1;
        if ((sub_22E4C2628((uint64_t)a1, *v201) & 1) != 0)
        {
          ++v201;
          continue;
        }
        break;
      }
      return 0;
    case 13:
      if (!sub_22E4C1A20(a1, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72)))
        return 0;
      v316 = *(_DWORD *)(a2 + 24);
      v317 = *(_QWORD *)(a2 + 80);
      v558 = *(_QWORD *)(a2 + 40);
      v559 = v316;
      v560 = v317;
      if (!sub_22E4C1AA8((uint64_t)a1, &v558))
        return 0;
      if ((v318 = *(_DWORD *)v4 & 0x7F, v318 <= 0x39) && ((1 << v318) & 0x3F0003E01011066) != 0
        || v318 - 70 <= 0xD && ((1 << (v318 - 70)) & 0x2803) != 0
        || v318 - 19 <= 4)
      {
        v319 = sub_22EFCAE04(a2);
      }
      else
      {
        v319 = 0;
      }
      if (!sub_22E4C258C((uint64_t)a1, v319))
        return 0;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v321 = *v320;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v323 = *(_QWORD *)v322 + 8 * *(unsigned int *)(v322 + 8);
      }
      else
      {
        v323 = 0;
      }
      while (2)
      {
        if (v321 == (uint64_t *)v323)
          return 1;
        if ((sub_22E4C2628((uint64_t)a1, *v321) & 1) != 0)
        {
          ++v321;
          continue;
        }
        break;
      }
      return 0;
    case 14:
      result = sub_22E4C258C((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v141 = *v140;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v143 = *(_QWORD *)v142 + 8 * *(unsigned int *)(v142 + 8);
      }
      else
      {
        v143 = 0;
      }
      while (2)
      {
        if (v141 == (uint64_t *)v143)
          return 1;
        if ((sub_22E4C2628((uint64_t)a1, *v141) & 1) != 0)
        {
          ++v141;
          continue;
        }
        break;
      }
      return 0;
    case 15:
      result = sub_22E4C258C((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v221 = *v220;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v223 = *(_QWORD *)v222 + 8 * *(unsigned int *)(v222 + 8);
      }
      else
      {
        v223 = 0;
      }
      while (2)
      {
        if (v221 == (uint64_t *)v223)
          return 1;
        if ((sub_22E4C2628((uint64_t)a1, *v221) & 1) != 0)
        {
          ++v221;
          continue;
        }
        break;
      }
      return 0;
    case 16:
      result = sub_22E4C258C((uint64_t)a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v123 = *v122;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v125 = *(_QWORD *)v124 + 8 * *(unsigned int *)(v124 + 8);
      }
      else
      {
        v125 = 0;
      }
      while (2)
      {
        if (v123 == (uint64_t *)v125)
          return 1;
        if ((sub_22E4C2628((uint64_t)a1, *v123) & 1) != 0)
        {
          ++v123;
          continue;
        }
        break;
      }
      return 0;
    case 17:
      result = sub_22E4C1A20(a1, *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80));
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v264 = *v263;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v266 = *(_QWORD *)v265 + 8 * *(unsigned int *)(v265 + 8);
      }
      else
      {
        v266 = 0;
      }
      while (2)
      {
        if (v264 == (uint64_t *)v266)
          return 1;
        if ((sub_22E4C2628((uint64_t)a1, *v264) & 1) != 0)
        {
          ++v264;
          continue;
        }
        break;
      }
      return 0;
    case 18:
      result = sub_22E4C258C((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v329 = *v328;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v331 = *(_QWORD *)v330 + 8 * *(unsigned int *)(v330 + 8);
      }
      else
      {
        v331 = 0;
      }
      while (2)
      {
        if (v329 == (uint64_t *)v331)
          return 1;
        if ((sub_22E4C2628((uint64_t)a1, *v329) & 1) != 0)
        {
          ++v329;
          continue;
        }
        break;
      }
      return 0;
    case 19:
      v361 = *(_QWORD *)(a2 + 112);
      if (!v361)
        goto LABEL_650;
      v362 = *(unsigned int *)(v361 + 8);
      if (!(_DWORD)v362)
        goto LABEL_650;
      v363 = (uint64_t *)(v361 + 16);
      v364 = 8 * v362;
      while ((sub_22E4C1850(a1, *v363) & 1) != 0)
      {
        ++v363;
        v364 -= 8;
        if (!v364)
        {
LABEL_650:
          result = sub_22E4C258C((uint64_t)a1, a2 + 48);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v366 = *v365;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v368 = *(_QWORD *)v367 + 8 * *(unsigned int *)(v367 + 8);
            }
            else
            {
              v368 = 0;
            }
            while (v366 != (uint64_t *)v368)
            {
              if ((sub_22E4C2628((uint64_t)a1, *v366) & 1) == 0)
                return 0;
              ++v366;
            }
          }
          return 1;
        }
      }
      return 0;
    case 20:
      result = sub_22E4C258C((uint64_t)a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v284 = *v283;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v286 = *(_QWORD *)v285 + 8 * *(unsigned int *)(v285 + 8);
      }
      else
      {
        v286 = 0;
      }
      while (2)
      {
        if (v284 == (uint64_t *)v286)
          return 1;
        if ((sub_22E4C2628((uint64_t)a1, *v284) & 1) != 0)
        {
          ++v284;
          continue;
        }
        break;
      }
      return 0;
    case 21:
      result = sub_22E4C258C((uint64_t)a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v313 = *v312;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v315 = *(_QWORD *)v314 + 8 * *(unsigned int *)(v314 + 8);
      }
      else
      {
        v315 = 0;
      }
      while (2)
      {
        if (v313 == (uint64_t *)v315)
          return 1;
        if ((sub_22E4C2628((uint64_t)a1, *v313) & 1) != 0)
        {
          ++v313;
          continue;
        }
        break;
      }
      return 0;
    case 22:
      v354 = *(_QWORD *)(a2 + 112);
      if (!v354)
        goto LABEL_637;
      v355 = *(unsigned int *)(v354 + 8);
      if (!(_DWORD)v355)
        goto LABEL_637;
      v356 = (uint64_t *)(v354 + 16);
      v357 = 8 * v355;
      while ((sub_22E4C1850(a1, *v356) & 1) != 0)
      {
        ++v356;
        v357 -= 8;
        if (!v357)
        {
LABEL_637:
          v358 = (unint64_t *)sub_22F259044(a2);
          if (v358)
          {
            result = sub_22E4C1B60(a1, *v358, (uint64_t)(v358 + 1));
            if (!(_DWORD)result)
              return result;
          }
          v359 = *(_QWORD *)(a2 + 120);
          if (!v359)
          {
            sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 96) + 88), *(_QWORD *)(a2 + 96));
            v359 = *(_QWORD *)(a2 + 120);
          }
          if (v359 < 8)
            v360 = 0;
          else
            v360 = *(_QWORD *)(v359 & 0xFFFFFFFFFFFFFFF8);
          if (v360 == a2)
          {
            v552 = sub_22F2590A8(a2);
            v553 = sub_22F25910C(a2);
            v554 = sub_22F259178(a2);
            v555 = sub_22F2591DC(a2);
            if (v552 != v553 && v554 != v555)
            {
              v556 = v554 + 4;
              v557 = v552 + 8;
              do
              {
                if (v557 == v553)
                  break;
                v557 += 8;
                v31 = v556 == v555;
                v556 += 4;
              }
              while (!v31);
            }
          }
          result = sub_22E4C258C((uint64_t)a1, a2 + 48);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v531 = *v530;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v533 = *(_QWORD *)v532 + 8 * *(unsigned int *)(v532 + 8);
            }
            else
            {
              v533 = 0;
            }
            while (v531 != (uint64_t *)v533)
            {
              if ((sub_22E4C2628((uint64_t)a1, *v531) & 1) == 0)
                return 0;
              ++v531;
            }
          }
          return 1;
        }
      }
      return 0;
    case 23:
      v388 = *(_QWORD *)(a2 + 104);
      if (!v388)
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 96) + 88), *(_QWORD *)(a2 + 96));
        v388 = *(_QWORD *)(a2 + 104);
      }
      if (v388 < 8)
        v389 = 0;
      else
        v389 = *(_QWORD *)(v388 & 0xFFFFFFFFFFFFFFF8);
      if (v389 == a2)
      {
        v523 = sub_22F259248(a2);
        v525 = v524;
        v526 = sub_22F2592CC(a2);
        if (v523 != v525 && v526 != v527)
        {
          v528 = v526 + 4;
          v529 = v523 + 8;
          do
          {
            if (v529 == v525)
              break;
            v529 += 8;
            v31 = v528 == v527;
            v528 += 4;
          }
          while (!v31);
        }
      }
      result = sub_22E4C258C((uint64_t)a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v485 = *v484;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v487 = *(_QWORD *)v486 + 8 * *(unsigned int *)(v486 + 8);
      }
      else
      {
        v487 = 0;
      }
      while (2)
      {
        if (v485 == (uint64_t *)v487)
          return 1;
        if ((sub_22E4C2628((uint64_t)a1, *v485) & 1) != 0)
        {
          ++v485;
          continue;
        }
        break;
      }
      return 0;
    case 24:
      v207 = *(unint64_t **)(a2 + 88);
      if (v207)
      {
        result = sub_22E4C1B60(a1, *v207, (uint64_t)(v207 + 1));
        if (!(_DWORD)result)
          return result;
      }
      v208 = *(unsigned int *)(a2 + 104);
      if (!(_DWORD)v208)
        goto LABEL_379;
      v209 = *(_QWORD *)(a2 + 96);
      v210 = 8 * v208;
      while ((sub_22E4BD868(a1) & 1) != 0)
      {
        v209 += 8;
        v210 -= 8;
        if (!v210)
        {
LABEL_379:
          if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)a2 + 72))(a2))
          {
            v211 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
            result = sub_22E4B1F30(a1, v211, 0);
            if (!(_DWORD)result)
              return result;
          }
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v213 = *v212;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v215 = *(_QWORD *)v214 + 8 * *(unsigned int *)(v214 + 8);
            }
            else
            {
              v215 = 0;
            }
            while (v213 != (uint64_t *)v215)
            {
              if ((sub_22E4C2628((uint64_t)a1, *v213) & 1) == 0)
                return 0;
              ++v213;
            }
          }
          return 1;
        }
      }
      return 0;
    case 25:
      v206 = *(unint64_t **)(a2 + 64);
      if (v206)
      {
        if ((sub_22E4C1B60(a1, *v206, (uint64_t)(v206 + 1)) & 1) == 0)
          return 0;
      }
      else
      {
        result = sub_22E4B1A70(a1, *(_QWORD *)(a2 + 56));
        if (!(_DWORD)result)
          return result;
      }
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v507 = *v506;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v509 = *(_QWORD *)v508 + 8 * *(unsigned int *)(v508 + 8);
      }
      else
      {
        v509 = 0;
      }
      while (2)
      {
        if (v507 == (uint64_t *)v509)
          return 1;
        if ((sub_22E4C2628((uint64_t)a1, *v507) & 1) != 0)
        {
          ++v507;
          continue;
        }
        break;
      }
      return 0;
    case 26:
      result = sub_22E4C2BC4((uint64_t)a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      v411 = *(_DWORD *)v4 & 0x7F;
      v412 = v411 > 0x39 || ((1 << v411) & 0x3F0003E01011066) == 0;
      v413 = !v412 || v411 - 70 <= 0xD && ((1 << (v411 - 70)) & 0x2803) != 0 || v411 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E4C258C((uint64_t)a1, v413);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v415 = *v414;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v417 = *(_QWORD *)v416 + 8 * *(unsigned int *)(v416 + 8);
      }
      else
      {
        v417 = 0;
      }
      while (2)
      {
        if (v415 == (uint64_t *)v417)
          return 1;
        if ((sub_22E4C2628((uint64_t)a1, *v415) & 1) != 0)
        {
          ++v415;
          continue;
        }
        break;
      }
      return 0;
    case 27:
      result = sub_22E4C2BC4((uint64_t)a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22E4B1F30(a1, *(_QWORD *)(a2 + 64), 0);
      if (!(_DWORD)result)
        return result;
      if ((v112 = *(_DWORD *)v4 & 0x7F, v112 <= 0x39) && ((1 << v112) & 0x3F0003E01011066) != 0
        || v112 - 70 <= 0xD && ((1 << (v112 - 70)) & 0x2803) != 0
        || v112 - 19 <= 4)
      {
        v113 = sub_22EFCAE04(a2);
      }
      else
      {
        v113 = 0;
      }
      result = sub_22E4C258C((uint64_t)a1, v113);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v115 = *v114;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v117 = *(_QWORD *)v116 + 8 * *(unsigned int *)(v116 + 8);
      }
      else
      {
        v117 = 0;
      }
      while (2)
      {
        if (v115 == (uint64_t *)v117)
          return 1;
        if ((sub_22E4C2628((uint64_t)a1, *v115) & 1) != 0)
        {
          ++v115;
          continue;
        }
        break;
      }
      return 0;
    case 28:
      result = sub_22E4C2BC4((uint64_t)a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22E4BD868(a1);
      if (!(_DWORD)result)
        return result;
      if ((v390 = *(_DWORD *)v4 & 0x7F, v390 <= 0x39) && ((1 << v390) & 0x3F0003E01011066) != 0
        || v390 - 70 <= 0xD && ((1 << (v390 - 70)) & 0x2803) != 0
        || v390 - 19 <= 4)
      {
        v391 = sub_22EFCAE04(a2);
      }
      else
      {
        v391 = 0;
      }
      result = sub_22E4C258C((uint64_t)a1, v391);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v393 = *v392;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v395 = *(_QWORD *)v394 + 8 * *(unsigned int *)(v394 + 8);
      }
      else
      {
        v395 = 0;
      }
      while (2)
      {
        if (v393 == (uint64_t *)v395)
          return 1;
        if ((sub_22E4C2628((uint64_t)a1, *v393) & 1) != 0)
        {
          ++v393;
          continue;
        }
        break;
      }
      return 0;
    case 29:
      result = sub_22E4C2BC4((uint64_t)a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22E4BD868(a1);
      if (!(_DWORD)result)
        return result;
      if ((v396 = *(_DWORD *)v4 & 0x7F, v396 <= 0x39) && ((1 << v396) & 0x3F0003E01011066) != 0
        || v396 - 70 <= 0xD && ((1 << (v396 - 70)) & 0x2803) != 0
        || v396 - 19 <= 4)
      {
        v397 = sub_22EFCAE04(a2);
      }
      else
      {
        v397 = 0;
      }
      result = sub_22E4C258C((uint64_t)a1, v397);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v399 = *v398;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v401 = *(_QWORD *)v400 + 8 * *(unsigned int *)(v400 + 8);
      }
      else
      {
        v401 = 0;
      }
      while (2)
      {
        if (v399 == (uint64_t *)v401)
          return 1;
        if ((sub_22E4C2628((uint64_t)a1, *v399) & 1) != 0)
        {
          ++v399;
          continue;
        }
        break;
      }
      return 0;
    case 30:
      result = sub_22E4BD868(a1);
      if (!(_DWORD)result)
        return result;
      result = sub_22E4C2BC4((uint64_t)a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      if ((v338 = *(_DWORD *)v4 & 0x7F, v338 <= 0x39) && ((1 << v338) & 0x3F0003E01011066) != 0
        || v338 - 70 <= 0xD && ((1 << (v338 - 70)) & 0x2803) != 0
        || v338 - 19 <= 4)
      {
        v339 = sub_22EFCAE04(a2);
      }
      else
      {
        v339 = 0;
      }
      result = sub_22E4C258C((uint64_t)a1, v339);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v341 = *v340;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v343 = *(_QWORD *)v342 + 8 * *(unsigned int *)(v342 + 8);
      }
      else
      {
        v343 = 0;
      }
      while (2)
      {
        if (v341 == (uint64_t *)v343)
          return 1;
        if ((sub_22E4C2628((uint64_t)a1, *v341) & 1) != 0)
        {
          ++v341;
          continue;
        }
        break;
      }
      return 0;
    case 31:
      result = sub_22E4C2BC4((uint64_t)a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22E4BD868(a1);
      if (!(_DWORD)result)
        return result;
      if ((v257 = *(_DWORD *)v4 & 0x7F, v257 <= 0x39) && ((1 << v257) & 0x3F0003E01011066) != 0
        || v257 - 70 <= 0xD && ((1 << (v257 - 70)) & 0x2803) != 0
        || v257 - 19 <= 4)
      {
        v258 = sub_22EFCAE04(a2);
      }
      else
      {
        v258 = 0;
      }
      result = sub_22E4C258C((uint64_t)a1, v258);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v260 = *v259;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v262 = *(_QWORD *)v261 + 8 * *(unsigned int *)(v261 + 8);
      }
      else
      {
        v262 = 0;
      }
      while (2)
      {
        if (v260 == (uint64_t *)v262)
          return 1;
        if ((sub_22E4C2628((uint64_t)a1, *v260) & 1) != 0)
        {
          ++v260;
          continue;
        }
        break;
      }
      return 0;
    case 32:
      result = sub_22E4BD868(a1);
      if (!(_DWORD)result)
        return result;
      if (*(_QWORD *)(a2 + 72) >= 8uLL && (*(_QWORD *)(a2 + 72) & 6) != 2)
      {
        v544 = sub_22F259350(a2);
        result = sub_22E4C22E4((uint64_t)a1, (uint64_t)v544);
        if (!(_DWORD)result)
          return result;
      }
      result = sub_22E4C2BC4((uint64_t)a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      if ((v344 = *(_DWORD *)v4 & 0x7F, v344 <= 0x39) && ((1 << v344) & 0x3F0003E01011066) != 0
        || v344 - 70 <= 0xD && ((1 << (v344 - 70)) & 0x2803) != 0
        || v344 - 19 <= 4)
      {
        v345 = sub_22EFCAE04(a2);
      }
      else
      {
        v345 = 0;
      }
      result = sub_22E4C258C((uint64_t)a1, v345);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v347 = *v346;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v349 = *(_QWORD *)v348 + 8 * *(unsigned int *)(v348 + 8);
      }
      else
      {
        v349 = 0;
      }
      if (v347 == (uint64_t *)v349)
        return 1;
      while ((sub_22E4C2628((uint64_t)a1, *v347) & 1) != 0)
      {
        if (++v347 == (uint64_t *)v349)
          return 1;
      }
      return 0;
    case 33:
      v144 = *(_QWORD *)(a2 + 120);
      if ((v144 & 4) == 0)
        goto LABEL_252;
      v145 = 0;
      while (1)
      {
        v146 = v144 & 0xFFFFFFFFFFFFFFF8;
        if (v145 >= *(unsigned int *)(v146 + 16))
          break;
        sub_22E4C2BC4((uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v146 + 24) + 8 * v145++));
        v144 = *(_QWORD *)(a2 + 120);
        if ((v144 & 4) == 0)
        {
LABEL_252:
          v147 = 0;
          v148 = 0;
          goto LABEL_946;
        }
      }
      v147 = *(_QWORD *)v146;
      v148 = *(_QWORD *)(v146 + 8);
LABEL_946:
      result = sub_22E4C1A20(a1, v147, v148);
      if (!(_DWORD)result)
        return result;
      v510 = *(_QWORD *)(a2 + 128);
      if ((v510 & 4) != 0 && (v510 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        result = sub_22E4C1B60(a1, *(_QWORD *)(v510 & 0xFFFFFFFFFFFFFFF8), (v510 & 0xFFFFFFFFFFFFFFF8) + 8);
        if (!(_DWORD)result)
          return result;
      }
      result = sub_22E4C258C((uint64_t)a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v512 = *v511;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v514 = *(_QWORD *)v513 + 8 * *(unsigned int *)(v513 + 8);
      }
      else
      {
        v514 = 0;
      }
      if (v512 == (uint64_t *)v514)
        return 1;
      while ((sub_22E4C2628((uint64_t)a1, *v512) & 1) != 0)
      {
        if (++v512 == (uint64_t *)v514)
          return 1;
      }
      return 0;
    case 34:
      result = sub_22E4C2C64(a1, a2);
      if (!(_DWORD)result)
        return result;
      result = sub_22E4C258C((uint64_t)a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v119 = *v118;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v121 = *(_QWORD *)v120 + 8 * *(unsigned int *)(v120 + 8);
      }
      else
      {
        v121 = 0;
      }
      if (v119 == (uint64_t *)v121)
        return 1;
      while ((sub_22E4C2628((uint64_t)a1, *v119) & 1) != 0)
      {
        if (++v119 == (uint64_t *)v121)
          return 1;
      }
      return 0;
    case 35:
      result = sub_22E4C2CD8(a1, a2);
      if (!(_DWORD)result)
        return result;
      result = sub_22E4C258C((uint64_t)a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v101 = *v100;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v103 = *(_QWORD *)v102 + 8 * *(unsigned int *)(v102 + 8);
      }
      else
      {
        v103 = 0;
      }
      if (v101 == (uint64_t *)v103)
        return 1;
      while ((sub_22E4C2628((uint64_t)a1, *v101) & 1) != 0)
      {
        if (++v101 == (uint64_t *)v103)
          return 1;
      }
      return 0;
    case 36:
      v104 = *(unint64_t ***)(a2 + 160);
      if (v104)
      {
        if (*v104)
        {
          result = sub_22E4C1B60(a1, **v104, (uint64_t)(*v104 + 1));
          if (!(_DWORD)result)
            return result;
        }
      }
      v105 = *(_QWORD *)(a2 + 120);
      if ((v105 & 4) != 0)
      {
        v488 = (uint64_t *)(v105 & 0xFFFFFFFFFFFFFFF8);
        v106 = *v488;
        v107 = v488[1];
      }
      else
      {
        v106 = 0;
        v107 = 0;
      }
      result = sub_22E4C1A20(a1, v106, v107);
      if (!(_DWORD)result)
        return result;
      if (sub_22EFD5760(a2) != 2)
        return 1;
      result = sub_22E4C258C((uint64_t)a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v490 = *v489;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v492 = *(_QWORD *)v491 + 8 * *(unsigned int *)(v491 + 8);
      }
      else
      {
        v492 = 0;
      }
      if (v490 == (uint64_t *)v492)
        return 1;
      while ((sub_22E4C2628((uint64_t)a1, *v490) & 1) != 0)
      {
        if (++v490 == (uint64_t *)v492)
          return 1;
      }
      return 0;
    case 37:
      v63 = *(_QWORD *)(a2 + 184);
      if (!v63)
        goto LABEL_104;
      v64 = *(_DWORD *)(v63 + 12) & 0x1FFFFFFF;
      if (!(_DWORD)v64)
        goto LABEL_104;
      v65 = v63 + 16;
      v66 = 8 * v64;
      while ((sub_22E4BD868(a1) & 1) != 0)
      {
        v65 += 8;
        v66 -= 8;
        if (!v66)
        {
LABEL_104:
          v67 = *(_QWORD *)(a2 + 192);
          v68 = *(unsigned int *)(v67 + 8);
          if ((_DWORD)v68)
          {
            v69 = v67 + 16;
            while ((sub_22E4C22E4((uint64_t)a1, v69) & 1) != 0)
            {
              v69 += 32;
              if (!--v68)
                goto LABEL_108;
            }
            return 0;
          }
LABEL_108:
          result = sub_22E4C2CD8(a1, a2);
          if (!(_DWORD)result)
            return result;
          result = sub_22E4C258C((uint64_t)a1, a2 + 64);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v71 = *v70;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v73 = *(_QWORD *)v72 + 8 * *(unsigned int *)(v72 + 8);
            }
            else
            {
              v73 = 0;
            }
            if (v71 != (uint64_t *)v73)
            {
              while ((sub_22E4C2628((uint64_t)a1, *v71) & 1) != 0)
              {
                if (++v71 == (uint64_t *)v73)
                  return 1;
              }
              return 0;
            }
          }
          return 1;
        }
      }
      return 0;
    case 38:
      v402 = *(_QWORD *)(a2 + 48);
      if (v402)
      {
        result = sub_22E4B1A70(a1, v402 & 0xFFFFFFFFFFFFFFF0);
        if (!(_DWORD)result)
          return result;
      }
      result = sub_22E4C16F0(a1, a2);
      if (!(_DWORD)result)
        return result;
      v403 = *(_QWORD *)(a2 + 72);
      if (v403 >= 8 && (*(_QWORD *)(a2 + 72) & 6) != 2)
      {
        v404 = (unint64_t *)(v403 & 0xFFFFFFFFFFFFFFF8);
        if ((*(_QWORD *)(a2 + 72) & 6) == 4 && v404)
          v404 = (unint64_t *)v404[1];
        result = sub_22E4C1B60(a1, *v404, (uint64_t)(v404 + 1));
        if (!(_DWORD)result)
          return result;
      }
      if ((v405 = *(_DWORD *)v4 & 0x7F, v405 <= 0x39) && ((1 << v405) & 0x3F0003E01011066) != 0
        || v405 - 70 <= 0xD && ((1 << (v405 - 70)) & 0x2803) != 0
        || v405 - 19 <= 4)
      {
        v406 = sub_22EFCAE04(a2);
      }
      else
      {
        v406 = 0;
      }
      result = sub_22E4C258C((uint64_t)a1, v406);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v408 = *v407;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v410 = *(_QWORD *)v409 + 8 * *(unsigned int *)(v409 + 8);
      }
      else
      {
        v410 = 0;
      }
      if (v408 == (uint64_t *)v410)
        return 1;
      while ((sub_22E4C2628((uint64_t)a1, *v408) & 1) != 0)
      {
        if (++v408 == (uint64_t *)v410)
          return 1;
      }
      return 0;
    case 39:
      return (sub_22E4C1850(a1, a2) & 1) != 0;
    case 40:
      v176 = *(_QWORD *)(a2 + 80);
      v177 = (unint64_t *)(v176 & 0xFFFFFFFFFFFFFFF8);
      if ((v176 & 4) != 0)
        v177 = (unint64_t *)*v177;
      result = sub_22E4C1B60(a1, *v177, (uint64_t)(v177 + 1));
      if (!(_DWORD)result)
        return result;
      if ((v178 = *(_DWORD *)v4 & 0x7F, v178 <= 0x39) && ((1 << v178) & 0x3F0003E01011066) != 0
        || v178 - 70 <= 0xD && ((1 << (v178 - 70)) & 0x2803) != 0
        || v178 - 19 <= 4)
      {
        v179 = sub_22EFCAE04(a2);
      }
      else
      {
        v179 = 0;
      }
      result = sub_22E4C258C((uint64_t)a1, v179);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v181 = *v180;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v183 = *(_QWORD *)v182 + 8 * *(unsigned int *)(v182 + 8);
      }
      else
      {
        v183 = 0;
      }
      if (v181 == (uint64_t *)v183)
        return 1;
      while ((sub_22E4C2628((uint64_t)a1, *v181) & 1) != 0)
      {
        if (++v181 == (uint64_t *)v183)
          return 1;
      }
      return 0;
    case 41:
      v267 = *(_QWORD *)(a2 + 80);
      v268 = (unint64_t *)(v267 & 0xFFFFFFFFFFFFFFF8);
      if ((v267 & 4) != 0)
        v268 = (unint64_t *)*v268;
      result = sub_22E4C1B60(a1, *v268, (uint64_t)(v268 + 1));
      if (!(_DWORD)result)
        return result;
      if ((v269 = *(_DWORD *)v4 & 0x7F, v269 <= 0x39) && ((1 << v269) & 0x3F0003E01011066) != 0
        || v269 - 70 <= 0xD && ((1 << (v269 - 70)) & 0x2803) != 0
        || v269 - 19 <= 4)
      {
        v270 = sub_22EFCAE04(a2);
      }
      else
      {
        v270 = 0;
      }
      result = sub_22E4C258C((uint64_t)a1, v270);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v272 = *v271;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v274 = *(_QWORD *)v273 + 8 * *(unsigned int *)(v273 + 8);
      }
      else
      {
        v274 = 0;
      }
      if (v272 == (uint64_t *)v274)
        return 1;
      while ((sub_22E4C2628((uint64_t)a1, *v272) & 1) != 0)
      {
        if (++v272 == (uint64_t *)v274)
          return 1;
      }
      return 0;
    case 42:
      result = sub_22E4C1A20(a1, *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80));
      if (!(_DWORD)result)
        return result;
      v373 = *(_DWORD *)v4 & 0x7F;
      v374 = v373 > 0x39 || ((1 << v373) & 0x3F0003E01011066) == 0;
      v375 = !v374 || v373 - 70 <= 0xD && ((1 << (v373 - 70)) & 0x2803) != 0 || v373 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E4C258C((uint64_t)a1, v375);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v377 = *v376;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v379 = *(_QWORD *)v378 + 8 * *(unsigned int *)(v378 + 8);
      }
      else
      {
        v379 = 0;
      }
      if (v377 == (uint64_t *)v379)
        return 1;
      while ((sub_22E4C2628((uint64_t)a1, *v377) & 1) != 0)
      {
        if (++v377 == (uint64_t *)v379)
          return 1;
      }
      return 0;
    case 43:
      result = sub_22E4C258C((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v41 = *v40;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v43 = *(_QWORD *)v42 + 8 * *(unsigned int *)(v42 + 8);
      }
      else
      {
        v43 = 0;
      }
      if (v41 == (uint64_t *)v43)
        return 1;
      while ((sub_22E4C2628((uint64_t)a1, *v41) & 1) != 0)
      {
        if (++v41 == (uint64_t *)v43)
          return 1;
      }
      return 0;
    case 44:
      result = sub_22E4C1A20(a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64));
      if (!(_DWORD)result)
        return result;
      v133 = *(_DWORD *)v4 & 0x7F;
      v134 = v133 > 0x39 || ((1 << v133) & 0x3F0003E01011066) == 0;
      v135 = !v134 || v133 - 70 <= 0xD && ((1 << (v133 - 70)) & 0x2803) != 0 || v133 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E4C258C((uint64_t)a1, v135);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v137 = *v136;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v139 = *(_QWORD *)v138 + 8 * *(unsigned int *)(v138 + 8);
      }
      else
      {
        v139 = 0;
      }
      if (v137 == (uint64_t *)v139)
        return 1;
      while ((sub_22E4C2628((uint64_t)a1, *v137) & 1) != 0)
      {
        if (++v137 == (uint64_t *)v139)
          return 1;
      }
      return 0;
    case 45:
      result = sub_22E4C258C((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v351 = *v350;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v353 = *(_QWORD *)v352 + 8 * *(unsigned int *)(v352 + 8);
      }
      else
      {
        v353 = 0;
      }
      if (v351 == (uint64_t *)v353)
        return 1;
      while ((sub_22E4C2628((uint64_t)a1, *v351) & 1) != 0)
      {
        if (++v351 == (uint64_t *)v353)
          return 1;
      }
      return 0;
    case 46:
      result = sub_22E4C258C((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v435 = *v434;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v437 = *(_QWORD *)v436 + 8 * *(unsigned int *)(v436 + 8);
      }
      else
      {
        v437 = 0;
      }
      if (v435 == (uint64_t *)v437)
        return 1;
      while ((sub_22E4C2628((uint64_t)a1, *v435) & 1) != 0)
      {
        if (++v435 == (uint64_t *)v437)
          return 1;
      }
      return 0;
    case 47:
      result = sub_22E4C258C((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v79 = *v78;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v81 = *(_QWORD *)v80 + 8 * *(unsigned int *)(v80 + 8);
      }
      else
      {
        v81 = 0;
      }
      if (v79 == (uint64_t *)v81)
        return 1;
      while ((sub_22E4C2628((uint64_t)a1, *v79) & 1) != 0)
      {
        if (++v79 == (uint64_t *)v81)
          return 1;
      }
      return 0;
    case 48:
      result = sub_22E4C258C((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v150 = *v149;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v152 = *(_QWORD *)v151 + 8 * *(unsigned int *)(v151 + 8);
      }
      else
      {
        v152 = 0;
      }
      if (v150 == (uint64_t *)v152)
        return 1;
      while ((sub_22E4C2628((uint64_t)a1, *v150) & 1) != 0)
      {
        if (++v150 == (uint64_t *)v152)
          return 1;
      }
      return 0;
    case 49:
      result = sub_22E4C2D50(a1, a2);
      if (!(_DWORD)result)
        return result;
      v171 = *(_QWORD *)(a2 + 72);
      if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      {
        v515 = v171 & 0xFFFFFFFFFFFFFFFCLL;
        v516 = *(_QWORD *)(a2 + 72) & 3;
        if ((_DWORD)v516 && (_DWORD)v516 != 3)
          v515 = *(_QWORD *)(v515 + 8);
        if ((sub_22E4B1F30(a1, v515, 0) & 1) == 0)
          return 0;
      }
      else if ((v171 & 3) != 0 && (v171 & 3) != 3)
      {
        result = sub_22E4B1F30(a1, v171 & 0xFFFFFFFFFFFFFFFCLL, 0);
        if (!(_DWORD)result)
          return result;
      }
      v517 = *(_DWORD *)v4 & 0x7F;
      if (v517 <= 0x39 && ((1 << v517) & 0x3F0003E01011066) != 0
        || v517 - 70 <= 0xD && ((1 << (v517 - 70)) & 0x2803) != 0
        || v517 - 19 <= 4)
      {
        v518 = sub_22EFCAE04(a2);
      }
      else
      {
        v518 = 0;
      }
      result = sub_22E4C258C((uint64_t)a1, v518);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v520 = *v519;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v522 = *(_QWORD *)v521 + 8 * *(unsigned int *)(v521 + 8);
        }
        else
        {
          v522 = 0;
        }
        for (; v520 != (uint64_t *)v522; ++v520)
        {
          if ((sub_22E4C2628((uint64_t)a1, *v520) & 1) == 0)
            return 0;
        }
      }
      return 1;
    case 50:
      result = sub_22E4C2D50(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      {
        v33 = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_DWORD *)(a2 + 72) & 3) != 0 && (*(_DWORD *)(a2 + 72) & 3) != 3)
          v33 = *(_QWORD *)(v33 + 8);
        result = sub_22E4B1F30(a1, v33, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v34 = *(_DWORD *)v4 & 0x7F, v34 <= 0x39) && ((1 << v34) & 0x3F0003E01011066) != 0
        || (v34 - 70 <= 0xD ? (v542 = ((1 << (v34 - 70)) & 0x2803) == 0) : (v542 = 1), !v542 || v34 - 19 <= 4))
      {
        v35 = sub_22EFCAE04(a2);
      }
      else
      {
        v35 = 0;
      }
      result = sub_22E4C258C((uint64_t)a1, v35);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v37 = *v36;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v39 = *(_QWORD *)v38 + 8 * *(unsigned int *)(v38 + 8);
      }
      else
      {
        v39 = 0;
      }
      if (v37 == (uint64_t *)v39)
        return 1;
      while ((sub_22E4C2628((uint64_t)a1, *v37) & 1) != 0)
      {
        if (++v37 == (uint64_t *)v39)
          return 1;
      }
      return 0;
    case 51:
      result = sub_22E4C2D50(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      {
        v450 = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_DWORD *)(a2 + 72) & 3) != 0 && (*(_DWORD *)(a2 + 72) & 3) != 3)
          v450 = *(_QWORD *)(v450 + 8);
        result = sub_22E4B1F30(a1, v450, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v451 = *(_DWORD *)v4 & 0x7F, v451 <= 0x39) && ((1 << v451) & 0x3F0003E01011066) != 0
        || (v451 - 70 <= 0xD ? (v543 = ((1 << (v451 - 70)) & 0x2803) == 0) : (v543 = 1), !v543 || v451 - 19 <= 4))
      {
        v452 = sub_22EFCAE04(a2);
      }
      else
      {
        v452 = 0;
      }
      result = sub_22E4C258C((uint64_t)a1, v452);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v454 = *v453;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v456 = *(_QWORD *)v455 + 8 * *(unsigned int *)(v455 + 8);
      }
      else
      {
        v456 = 0;
      }
      if (v454 == (uint64_t *)v456)
        return 1;
      while ((sub_22E4C2628((uint64_t)a1, *v454) & 1) != 0)
      {
        if (++v454 == (uint64_t *)v456)
          return 1;
      }
      return 0;
    case 52:
      result = sub_22E4C2E1C(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v431 = *v430;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v433 = *(_QWORD *)v432 + 8 * *(unsigned int *)(v432 + 8);
      }
      else
      {
        v433 = 0;
      }
      if (v431 == (uint64_t *)v433)
        return 1;
      while ((sub_22E4C2628((uint64_t)a1, *v431) & 1) != 0)
      {
        if (++v431 == (uint64_t *)v433)
          return 1;
      }
      return 0;
    case 53:
      result = sub_22E4C2E1C(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v75 = *v74;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v77 = *(_QWORD *)v76 + 8 * *(unsigned int *)(v76 + 8);
      }
      else
      {
        v77 = 0;
      }
      if (v75 == (uint64_t *)v77)
        return 1;
      while ((sub_22E4C2628((uint64_t)a1, *v75) & 1) != 0)
      {
        if (++v75 == (uint64_t *)v77)
          return 1;
      }
      return 0;
    case 54:
      result = sub_22E4C2E1C(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v419 = *v418;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v421 = *(_QWORD *)v420 + 8 * *(unsigned int *)(v420 + 8);
      }
      else
      {
        v421 = 0;
      }
      if (v419 == (uint64_t *)v421)
        return 1;
      while ((sub_22E4C2628((uint64_t)a1, *v419) & 1) != 0)
      {
        if (++v419 == (uint64_t *)v421)
          return 1;
      }
      return 0;
    case 55:
      result = sub_22E4C2E1C(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v427 = *v426;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v429 = *(_QWORD *)v428 + 8 * *(unsigned int *)(v428 + 8);
      }
      else
      {
        v429 = 0;
      }
      if (v427 == (uint64_t *)v429)
        return 1;
      while ((sub_22E4C2628((uint64_t)a1, *v427) & 1) != 0)
      {
        if (++v427 == (uint64_t *)v429)
          return 1;
      }
      return 0;
    case 56:
      result = sub_22E4C2E1C(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v83 = *v82;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v85 = *(_QWORD *)v84 + 8 * *(unsigned int *)(v84 + 8);
      }
      else
      {
        v85 = 0;
      }
      if (v83 == (uint64_t *)v85)
        return 1;
      while ((sub_22E4C2628((uint64_t)a1, *v83) & 1) != 0)
      {
        if (++v83 == (uint64_t *)v85)
          return 1;
      }
      return 0;
    case 57:
      result = sub_22E4C2E1C(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v370 = *v369;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v372 = *(_QWORD *)v371 + 8 * *(unsigned int *)(v371 + 8);
      }
      else
      {
        v372 = 0;
      }
      if (v370 == (uint64_t *)v372)
        return 1;
      while ((sub_22E4C2628((uint64_t)a1, *v370) & 1) != 0)
      {
        if (++v370 == (uint64_t *)v372)
          return 1;
      }
      return 0;
    case 58:
      result = sub_22E4C2D50(a1, a2);
      if (!(_DWORD)result)
        return result;
      v153 = *(_DWORD *)v4 & 0x7F;
      v154 = v153 > 0x39 || ((1 << v153) & 0x3F0003E01011066) == 0;
      v155 = !v154 || v153 - 70 <= 0xD && ((1 << (v153 - 70)) & 0x2803) != 0 || v153 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E4C258C((uint64_t)a1, v155);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v157 = *v156;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v159 = *(_QWORD *)v158 + 8 * *(unsigned int *)(v158 + 8);
      }
      else
      {
        v159 = 0;
      }
      if (v157 == (uint64_t *)v159)
        return 1;
      while ((sub_22E4C2628((uint64_t)a1, *v157) & 1) != 0)
      {
        if (++v157 == (uint64_t *)v159)
          return 1;
      }
      return 0;
    case 59:
      result = sub_22E4C2D50(a1, a2);
      if (!(_DWORD)result)
        return result;
      v380 = *(_QWORD *)(a2 + 72);
      if (v380 >= 4 && (*(_QWORD *)(a2 + 72) & 3) != 1)
      {
        v381 = v380 & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_QWORD *)(a2 + 72) & 3) == 2 && v381)
          v381 = *(_QWORD *)(v381 + 8);
        result = sub_22E4B1F30(a1, v381, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v382 = *(_DWORD *)v4 & 0x7F, v382 <= 0x39) && ((1 << v382) & 0x3F0003E01011066) != 0
        || v382 - 70 <= 0xD && ((1 << (v382 - 70)) & 0x2803) != 0
        || v382 - 19 <= 4)
      {
        v383 = sub_22EFCAE04(a2);
      }
      else
      {
        v383 = 0;
      }
      result = sub_22E4C258C((uint64_t)a1, v383);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v385 = *v384;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v387 = *(_QWORD *)v386 + 8 * *(unsigned int *)(v386 + 8);
      }
      else
      {
        v387 = 0;
      }
      if (v385 == (uint64_t *)v387)
        return 1;
      while ((sub_22E4C2628((uint64_t)a1, *v385) & 1) != 0)
      {
        if (++v385 == (uint64_t *)v387)
          return 1;
      }
      return 0;
    case 60:
      result = sub_22E4C31E0(a1, a2);
      if (!(_DWORD)result)
        return result;
      v184 = *(_DWORD *)v4 & 0x7F;
      v185 = v184 > 0x39 || ((1 << v184) & 0x3F0003E01011066) == 0;
      v186 = !v185 || v184 - 70 <= 0xD && ((1 << (v184 - 70)) & 0x2803) != 0 || v184 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E4C258C((uint64_t)a1, v186);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v188 = *v187;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v190 = *(_QWORD *)v189 + 8 * *(unsigned int *)(v189 + 8);
      }
      else
      {
        v190 = 0;
      }
      if (v188 == (uint64_t *)v190)
        return 1;
      while ((sub_22E4C2628((uint64_t)a1, *v188) & 1) != 0)
      {
        if (++v188 == (uint64_t *)v190)
          return 1;
      }
      return 0;
    case 61:
      result = sub_22E4C31E0(a1, a2);
      if (!(_DWORD)result)
        return result;
      v287 = *(unsigned int *)(a2 + 100);
      if (!(_DWORD)v287)
        goto LABEL_514;
      v288 = a2 + 104;
      v289 = 8 * v287;
      while ((sub_22E4BD868(a1) & 1) != 0)
      {
        v288 += 8;
        v289 -= 8;
        if (!v289)
        {
LABEL_514:
          v290 = *(_DWORD *)v4 & 0x7F;
          v291 = v290 > 0x39 || ((1 << v290) & 0x3F0003E01011066) == 0;
          if (v291
            && (v290 - 70 <= 0xD ? (v545 = ((1 << (v290 - 70)) & 0x2803) == 0) : (v545 = 1), v545 && v290 - 19 > 4))
          {
            v292 = 0;
          }
          else
          {
            v292 = sub_22EFCAE04(a2);
          }
          result = sub_22E4C258C((uint64_t)a1, v292);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) == 0)
            return 1;
          sub_22EFC8E88(a2);
          v294 = *v293;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v296 = *(_QWORD *)v295 + 8 * *(unsigned int *)(v295 + 8);
          }
          else
          {
            v296 = 0;
          }
          if (v294 == (uint64_t *)v296)
            return 1;
          while ((sub_22E4C2628((uint64_t)a1, *v294) & 1) != 0)
          {
            if (++v294 == (uint64_t *)v296)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 62:
      result = sub_22E4C31E0(a1, a2);
      if (!(_DWORD)result)
        return result;
      v305 = *(_DWORD *)v4 & 0x7F;
      v306 = v305 > 0x39 || ((1 << v305) & 0x3F0003E01011066) == 0;
      v307 = !v306 || v305 - 70 <= 0xD && ((1 << (v305 - 70)) & 0x2803) != 0 || v305 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E4C258C((uint64_t)a1, v307);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v309 = *v308;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v311 = *(_QWORD *)v310 + 8 * *(unsigned int *)(v310 + 8);
      }
      else
      {
        v311 = 0;
      }
      if (v309 == (uint64_t *)v311)
        return 1;
      while ((sub_22E4C2628((uint64_t)a1, *v309) & 1) != 0)
      {
        if (++v309 == (uint64_t *)v311)
          return 1;
      }
      return 0;
    case 63:
      result = sub_22E4C31E0(a1, a2);
      if (!(_DWORD)result)
        return result;
      v224 = *(_DWORD *)v4 & 0x7F;
      v225 = v224 > 0x39 || ((1 << v224) & 0x3F0003E01011066) == 0;
      v226 = !v225 || v224 - 70 <= 0xD && ((1 << (v224 - 70)) & 0x2803) != 0 || v224 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E4C258C((uint64_t)a1, v226);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v228 = *v227;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v230 = *(_QWORD *)v229 + 8 * *(unsigned int *)(v229 + 8);
      }
      else
      {
        v230 = 0;
      }
      if (v228 == (uint64_t *)v230)
        return 1;
      while ((sub_22E4C2628((uint64_t)a1, *v228) & 1) != 0)
      {
        if (++v228 == (uint64_t *)v230)
          return 1;
      }
      return 0;
    case 64:
      result = sub_22E4C31E0(a1, a2);
      if (!(_DWORD)result)
        return result;
      v191 = *(_DWORD *)(a2 + 96) & 0x600;
      if (v191 != 1024)
        goto LABEL_343;
      result = sub_22E4B1F30(a1, *(_QWORD *)(a2 + 88) & 0xFFFFFFFFFFFFFFF8, 0);
      if (!(_DWORD)result)
        return result;
      v191 = *(_DWORD *)(a2 + 96) & 0x600;
LABEL_343:
      if (v191 != 1024 && v191 != 512 && *(_QWORD *)(a2 + 88) >= 8uLL)
      {
        v192 = sub_22EFBC5B4(a2);
        v193 = v192;
        if (v192 && (*(_BYTE *)v192 & 0xFE) == 0xAC)
          v193 = *(_QWORD *)(v192 + 16);
        result = sub_22E4B1F30(a1, v193, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v194 = *(_DWORD *)v4 & 0x7F, v194 <= 0x39) && ((1 << v194) & 0x3F0003E01011066) != 0
        || v194 - 70 <= 0xD && ((1 << (v194 - 70)) & 0x2803) != 0
        || v194 - 19 <= 4)
      {
        v195 = sub_22EFCAE04(a2);
      }
      else
      {
        v195 = 0;
      }
      result = sub_22E4C258C((uint64_t)a1, v195);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v197 = *v196;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v199 = *(_QWORD *)v198 + 8 * *(unsigned int *)(v198 + 8);
      }
      else
      {
        v199 = 0;
      }
      if (v197 == (uint64_t *)v199)
        return 1;
      while ((sub_22E4C2628((uint64_t)a1, *v197) & 1) != 0)
      {
        if (++v197 == (uint64_t *)v199)
          return 1;
      }
      return 0;
    case 65:
      v301 = *(unint64_t ***)(a2 + 120);
      if (v301)
      {
        if (*v301)
        {
          result = sub_22E4C1B60(a1, **v301, (uint64_t)(*v301 + 1));
          if (!(_DWORD)result)
            return result;
        }
      }
      v302 = *(_QWORD *)(a2 + 56);
      if ((v302 & 4) != 0)
      {
        v493 = (uint64_t *)(v302 & 0xFFFFFFFFFFFFFFF8);
        v303 = *v493;
        v304 = v493[1];
      }
      else
      {
        v303 = 0;
        v304 = 0;
      }
      result = sub_22E4C1A20(a1, v303, v304);
      if (!(_DWORD)result)
        return result;
      if (sub_22EFBC2B0(a2) != 2)
        return 1;
      v494 = *(_DWORD *)v4 & 0x7F;
      if (v494 <= 0x39 && ((1 << v494) & 0x3F0003E01011066) != 0
        || v494 - 70 <= 0xD && ((1 << (v494 - 70)) & 0x2803) != 0
        || v494 - 19 <= 4)
      {
        v495 = sub_22EFCAE04(a2);
      }
      else
      {
        v495 = 0;
      }
      result = sub_22E4C258C((uint64_t)a1, v495);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v497 = *v496;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v499 = *(_QWORD *)v498 + 8 * *(unsigned int *)(v498 + 8);
      }
      else
      {
        v499 = 0;
      }
      if (v497 == (uint64_t *)v499)
        return 1;
      while ((sub_22E4C2628((uint64_t)a1, *v497) & 1) != 0)
      {
        if (++v497 == (uint64_t *)v499)
          return 1;
      }
      return 0;
    case 66:
      v44 = *(_QWORD *)(a2 + 424);
      if (!v44)
        goto LABEL_68;
      v45 = *(_DWORD *)(v44 + 12) & 0x1FFFFFFF;
      if (!(_DWORD)v45)
        goto LABEL_68;
      v46 = v44 + 16;
      v47 = 8 * v45;
      while ((sub_22E4BD868(a1) & 1) != 0)
      {
        v46 += 8;
        v47 -= 8;
        if (!v47)
        {
LABEL_68:
          v48 = *(_QWORD *)(a2 + 432);
          v49 = *(unsigned int *)(v48 + 8);
          if ((_DWORD)v49)
          {
            v50 = v48 + 16;
            while ((sub_22E4C22E4((uint64_t)a1, v50) & 1) != 0)
            {
              v50 += 32;
              if (!--v49)
                goto LABEL_72;
            }
          }
          else
          {
LABEL_72:
            result = sub_22E4C31E0(a1, a2);
            if (!(_DWORD)result)
              return result;
            v51 = *(_DWORD *)v4 & 0x7F;
            v52 = v51 > 0x39 || ((1 << v51) & 0x3F0003E01011066) == 0;
            if (v52
              && (v51 - 70 <= 0xD ? (v546 = ((1 << (v51 - 70)) & 0x2803) == 0) : (v546 = 1), v546 && v51 - 19 > 4))
            {
              v53 = 0;
            }
            else
            {
              v53 = sub_22EFCAE04(a2);
            }
            result = sub_22E4C258C((uint64_t)a1, v53);
            if (!(_DWORD)result)
              return result;
            if ((*(_BYTE *)(v4 + 1) & 1) == 0)
              return 1;
            sub_22EFC8E88(a2);
            v55 = *v54;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v57 = *(_QWORD *)v56 + 8 * *(unsigned int *)(v56 + 8);
            }
            else
            {
              v57 = 0;
            }
            if (v55 == (uint64_t *)v57)
              return 1;
            while ((sub_22E4C2628((uint64_t)a1, *v55) & 1) != 0)
            {
              if (++v55 == (uint64_t *)v57)
                return 1;
            }
          }
          return 0;
        }
      }
      return 0;
    case 67:
      result = sub_22E4B1F30(a1, *(_QWORD *)(a2 + 56), 0);
      if (!(_DWORD)result)
        return result;
      v126 = *(_DWORD *)v4 & 0x7F;
      v127 = v126 > 0x39 || ((1 << v126) & 0x3F0003E01011066) == 0;
      v128 = !v127 || v126 - 70 <= 0xD && ((1 << (v126 - 70)) & 0x2803) != 0 || v126 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E4C258C((uint64_t)a1, v128);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v130 = *v129;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v132 = *(_QWORD *)v131 + 8 * *(unsigned int *)(v131 + 8);
      }
      else
      {
        v132 = 0;
      }
      if (v130 == (uint64_t *)v132)
        return 1;
      while ((sub_22E4C2628((uint64_t)a1, *v130) & 1) != 0)
      {
        if (++v130 == (uint64_t *)v132)
          return 1;
      }
      return 0;
    case 68:
      result = sub_22E4C258C((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v462 = *v461;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v464 = *(_QWORD *)v463 + 8 * *(unsigned int *)(v463 + 8);
      }
      else
      {
        v464 = 0;
      }
      if (v462 == (uint64_t *)v464)
        return 1;
      while ((sub_22E4C2628((uint64_t)a1, *v462) & 1) != 0)
      {
        if (++v462 == (uint64_t *)v464)
          return 1;
      }
      return 0;
    case 69:
      result = sub_22E4C258C((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v109 = *v108;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v111 = *(_QWORD *)v110 + 8 * *(unsigned int *)(v110 + 8);
      }
      else
      {
        v111 = 0;
      }
      if (v109 == (uint64_t *)v111)
        return 1;
      while ((sub_22E4C2628((uint64_t)a1, *v109) & 1) != 0)
      {
        if (++v109 == (uint64_t *)v111)
          return 1;
      }
      return 0;
    case 70:
      v21 = *(_DWORD **)(a2 + 56);
      v24 = *v21;
      v23 = (uint64_t *)(v21 + 4);
      v22 = v24;
      if (!v24)
        return (sub_22E4B1A70(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
      v25 = 8 * v22;
      while ((sub_22E4C3240(a1, *v23) & 1) != 0)
      {
        ++v23;
        v25 -= 8;
        if (!v25)
          return (sub_22E4B1A70(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
      }
      return 0;
    case 71:
      result = sub_22E4B1F30(a1, *(_QWORD *)(a2 + 88), 0);
      if ((_DWORD)result)
      {
        v62 = *(_QWORD *)(a2 + 96);
        if (!v62)
          return (sub_22E4B1A70(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
        result = sub_22E4B1F30(a1, v62, 0);
        if ((_DWORD)result)
          return (sub_22E4B1A70(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
      }
      return result;
    case 72:
      result = sub_22E4C258C((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v423 = *v422;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v425 = *(_QWORD *)v424 + 8 * *(unsigned int *)(v424 + 8);
      }
      else
      {
        v425 = 0;
      }
      if (v423 == (uint64_t *)v425)
        return 1;
      while ((sub_22E4C2628((uint64_t)a1, *v423) & 1) != 0)
      {
        if (++v423 == (uint64_t *)v425)
          return 1;
      }
      return 0;
    case 73:
      result = sub_22E4C258C((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v439 = *v438;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v441 = *(_QWORD *)v440 + 8 * *(unsigned int *)(v440 + 8);
      }
      else
      {
        v441 = 0;
      }
      if (v439 == (uint64_t *)v441)
        return 1;
      while ((sub_22E4C2628((uint64_t)a1, *v439) & 1) != 0)
      {
        if (++v439 == (uint64_t *)v441)
          return 1;
      }
      return 0;
    case 74:
      if (!sub_22E4C1A20(a1, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72)))
        return 0;
      v442 = *(_DWORD *)(a2 + 24);
      v443 = *(_QWORD *)(a2 + 80);
      v558 = *(_QWORD *)(a2 + 40);
      v559 = v442;
      v560 = v443;
      if (!sub_22E4C1AA8((uint64_t)a1, &v558))
        return 0;
      if ((v444 = *(_DWORD *)v4 & 0x7F, v444 <= 0x39) && ((1 << v444) & 0x3F0003E01011066) != 0
        || v444 - 70 <= 0xD && ((1 << (v444 - 70)) & 0x2803) != 0
        || v444 - 19 <= 4)
      {
        v445 = sub_22EFCAE04(a2);
      }
      else
      {
        v445 = 0;
      }
      if (!sub_22E4C258C((uint64_t)a1, v445))
        return 0;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v447 = *v446;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v449 = *(_QWORD *)v448 + 8 * *(unsigned int *)(v448 + 8);
      }
      else
      {
        v449 = 0;
      }
      while (2)
      {
        if (v447 == (uint64_t *)v449)
          return 1;
        if ((sub_22E4C2628((uint64_t)a1, *v447) & 1) != 0)
        {
          ++v447;
          continue;
        }
        break;
      }
      return 0;
    case 75:
      v86 = *(unsigned int **)(a2 + 40);
      v87 = *v86;
      v88 = v86[1];
      if (!(_DWORD)v88)
        goto LABEL_146;
      v89 = &v86[2 * v87 + 4];
      v90 = 8 * v88;
      while ((sub_22E4B1F30(a1, *(_QWORD *)v89, 0) & 1) != 0)
      {
        v89 += 2;
        v90 -= 8;
        if (!v90)
        {
          v86 = *(unsigned int **)(a2 + 40);
          v87 = *v86;
LABEL_146:
          if ((_DWORD)v87)
          {
            v91 = (uint64_t *)(v86 + 4);
            v92 = 8 * v87;
            while ((sub_22E4C3240(a1, *v91) & 1) != 0)
            {
              ++v91;
              v92 -= 8;
              if (!v92)
                goto LABEL_150;
            }
          }
          else
          {
LABEL_150:
            v93 = *(_DWORD *)v4 & 0x7F;
            v94 = v93 > 0x39 || ((1 << v93) & 0x3F0003E01011066) == 0;
            if (v94
              && (v93 - 70 <= 0xD ? (v540 = ((1 << (v93 - 70)) & 0x2803) == 0) : (v540 = 1), v540 && v93 - 19 > 4))
            {
              v95 = 0;
            }
            else
            {
              v95 = sub_22EFCAE04(a2);
            }
            result = sub_22E4C258C((uint64_t)a1, v95);
            if (!(_DWORD)result)
              return result;
            if ((*(_BYTE *)(v4 + 1) & 1) == 0)
              return 1;
            sub_22EFC8E88(a2);
            v97 = *v96;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v99 = *(_QWORD *)v98 + 8 * *(unsigned int *)(v98 + 8);
            }
            else
            {
              v99 = 0;
            }
            if (v97 == (uint64_t *)v99)
              return 1;
            while ((sub_22E4C2628((uint64_t)a1, *v97) & 1) != 0)
            {
              if (++v97 == (uint64_t *)v99)
                return 1;
            }
          }
          return 0;
        }
      }
      return 0;
    case 76:
      v275 = *(_DWORD **)(a2 + 40);
      v278 = *v275;
      v277 = (uint64_t *)(v275 + 4);
      v276 = v278;
      if (!v278)
        goto LABEL_1013;
      v279 = 8 * v276;
      while ((sub_22E4C3240(a1, *v277) & 1) != 0)
      {
        ++v277;
        v279 -= 8;
        if (!v279)
        {
          v280 = *(_DWORD *)v4 & 0x7F;
          v281 = v280 > 0x39 || ((1 << v280) & 0x3F0003E01011066) == 0;
          if (v281
            && (v280 - 70 <= 0xD ? (v539 = ((1 << (v280 - 70)) & 0x2803) == 0) : (v539 = 1), v539 && v280 - 19 > 4))
          {
LABEL_1013:
            v282 = 0;
          }
          else
          {
            v282 = sub_22EFCAE04(a2);
          }
          result = sub_22E4C258C((uint64_t)a1, v282);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) == 0)
            return 1;
          sub_22EFC8E88(a2);
          v549 = *v548;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v551 = *(_QWORD *)v550 + 8 * *(unsigned int *)(v550 + 8);
          }
          else
          {
            v551 = 0;
          }
          if (v549 == (uint64_t *)v551)
            return 1;
          while ((sub_22E4C2628((uint64_t)a1, *v549) & 1) != 0)
          {
            if (++v549 == (uint64_t *)v551)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 77:
      v26 = *(unsigned int **)(a2 + 40);
      v27 = v26[1];
      if (!(_DWORD)v27)
        goto LABEL_998;
      v28 = &v26[2 * *v26 + 4];
      v29 = 8 * v27;
      while ((sub_22E4B1F30(a1, *(_QWORD *)v28, 0) & 1) != 0)
      {
        v28 += 2;
        v29 -= 8;
        if (!v29)
        {
          v30 = *(_DWORD *)v4 & 0x7F;
          v31 = v30 > 0x39 || ((1 << v30) & 0x3F0003E01011066) == 0;
          if (v31 && (v30 - 70 <= 0xD ? (v534 = ((1 << (v30 - 70)) & 0x2803) == 0) : (v534 = 1), v534 && v30 - 19 > 4))
LABEL_998:
            v32 = 0;
          else
            v32 = sub_22EFCAE04(a2);
          result = sub_22E4C258C((uint64_t)a1, v32);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) == 0)
            return 1;
          sub_22EFC8E88(a2);
          v536 = *v535;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v538 = *(_QWORD *)v537 + 8 * *(unsigned int *)(v537 + 8);
          }
          else
          {
            v538 = 0;
          }
          if (v536 == (uint64_t *)v538)
            return 1;
          while ((sub_22E4C2628((uint64_t)a1, *v536) & 1) != 0)
          {
            if (++v536 == (uint64_t *)v538)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 78:
      result = sub_22E4C258C((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v458 = *v457;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v460 = *(_QWORD *)v459 + 8 * *(unsigned int *)(v459 + 8);
      }
      else
      {
        v460 = 0;
      }
      if (v458 == (uint64_t *)v460)
        return 1;
      while ((sub_22E4C2628((uint64_t)a1, *v458) & 1) != 0)
      {
        if (++v458 == (uint64_t *)v460)
          return 1;
      }
      return 0;
    case 79:
      result = sub_22E4C258C((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v18 = *v17;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v20 = *(_QWORD *)v19 + 8 * *(unsigned int *)(v19 + 8);
      }
      else
      {
        v20 = 0;
      }
      if (v18 == (uint64_t *)v20)
        return 1;
      while ((sub_22E4C2628((uint64_t)a1, *v18) & 1) != 0)
      {
        if (++v18 == (uint64_t *)v20)
          return 1;
      }
      return 0;
    case 80:
      result = sub_22E4C258C((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v59 = *v58;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v61 = *(_QWORD *)v60 + 8 * *(unsigned int *)(v60 + 8);
      }
      else
      {
        v61 = 0;
      }
      if (v59 == (uint64_t *)v61)
        return 1;
      while ((sub_22E4C2628((uint64_t)a1, *v59) & 1) != 0)
      {
        if (++v59 == (uint64_t *)v61)
          return 1;
      }
      return 0;
    case 81:
      v166 = sub_22EFCAE04(a2);
      result = sub_22E4C258C((uint64_t)a1, v166);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v168 = *v167;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v170 = *(_QWORD *)v169 + 8 * *(unsigned int *)(v169 + 8);
      }
      else
      {
        v170 = 0;
      }
      if (v168 == (uint64_t *)v170)
        return 1;
      while ((sub_22E4C2628((uint64_t)a1, *v168) & 1) != 0)
      {
        if (++v168 == (uint64_t *)v170)
          return 1;
      }
      return 0;
    case 82:
      result = sub_22E4B1F30(a1, *(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFFCLL, 0);
      if (!(_DWORD)result)
        return result;
      result = sub_22E4B1F30(a1, *(_QWORD *)(a2 + 48), 0);
      if (!(_DWORD)result)
        return result;
      if ((v160 = *(_DWORD *)v4 & 0x7F, v160 <= 0x39) && ((1 << v160) & 0x3F0003E01011066) != 0
        || v160 - 70 <= 0xD && ((1 << (v160 - 70)) & 0x2803) != 0
        || v160 - 19 <= 4)
      {
        v161 = sub_22EFCAE04(a2);
      }
      else
      {
        v161 = 0;
      }
      result = sub_22E4C258C((uint64_t)a1, v161);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v163 = *v162;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v165 = *(_QWORD *)v164 + 8 * *(unsigned int *)(v164 + 8);
      }
      else
      {
        v165 = 0;
      }
      if (v163 == (uint64_t *)v165)
        return 1;
      break;
    case 83:
      v11 = *(_QWORD *)(a2 + 88);
      v12 = *(_BYTE **)(v11 + 19016);
      v13 = *(_BYTE **)(v11 + 19024);
      v14 = v13 - v12;
      if (v13 == v12)
      {
        v15 = 0;
        v16 = 0;
      }
      else
      {
        if (v14 < 0)
          abort();
        v15 = (char *)operator new(v13 - v12);
        memmove(v15, v12, v14);
        v16 = &v15[8 * (v14 >> 3)];
      }
      if (v16 - v15 == 8 && (*(_DWORD *)(*(_QWORD *)v15 + 28) & 0x7F) == 0x53)
      {
        operator delete(v15);
        result = sub_22E4C258C((uint64_t)a1, a2 + 40);
        if (!(_DWORD)result)
          return result;
      }
      else
      {
        if (v15 != v16)
        {
          v500 = v15;
          do
          {
            if ((*(_DWORD *)(*(_QWORD *)v500 + 28) & 0x7Fu) - 1 >= 2
              && ((*(_DWORD *)(*(_QWORD *)v500 + 28) & 0x7Fu) - 35 > 2
               || (v501 = *(_QWORD *)(*(_QWORD *)v500 + 128)) == 0
               || ((*(unsigned __int16 *)(v501 + 8) | (*(unsigned __int8 *)(v501 + 10) << 16)) & 0x100000) == 0)
              && !sub_22E4BD868(a1))
            {
              if (v15)
                operator delete(v15);
              return 0;
            }
            v500 += 8;
          }
          while (v500 != v16);
        }
        if (v15)
          operator delete(v15);
      }
      if ((*(_BYTE *)(v4 + 1) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v503 = *v502;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v505 = *(_QWORD *)v504 + 8 * *(unsigned int *)(v504 + 8);
        }
        else
        {
          v505 = 0;
        }
        for (; v503 != (uint64_t *)v505; ++v503)
        {
          if ((sub_22E4C2628((uint64_t)a1, *v503) & 1) == 0)
            return 0;
        }
      }
      return 1;
    default:
      return 1;
  }
  while ((sub_22E4C2628((uint64_t)a1, *v163) & 1) != 0)
  {
    if (++v163 == (uint64_t *)v165)
      return 1;
  }
  return 0;
}

uint64_t sub_22E4C16F0(_BYTE *a1, uint64_t a2)
{
  uint64_t result;

  if ((*(_BYTE *)(a2 + 60) & 4) != 0)
  {
    if (*(_QWORD *)(a2 + 152))
    {
      if ((sub_22E4B1F30(a1, *(_QWORD *)(a2 + 152), 0) & 1) == 0)
        return 0;
    }
    else
    {
      result = sub_22E4C1980(a1, a2 + 80);
      if (!(_DWORD)result)
        return result;
    }
  }
  return 1;
}

uint64_t sub_22E4C1738(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;

  result = sub_22E4B1F30(a1, *(_QWORD *)(a2 + 40), 0);
  if ((_DWORD)result)
  {
    v5 = *(_DWORD *)(a2 + 28) & 0x7F;
    v6 = v5 > 0x39 || ((1 << v5) & 0x3F0003E01011066) == 0;
    if (v6 && (v5 - 70 <= 0xD ? (v8 = ((1 << (v5 - 70)) & 0x2803) == 0) : (v8 = 1), v8 && v5 - 19 > 4))
      v7 = 0;
    else
      v7 = sub_22EFCAE04(a2);
    result = sub_22E4C258C(a1, v7);
    if ((_DWORD)result)
    {
      if ((*(_BYTE *)(a2 + 29) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v10 = *v9;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v12 = *(_QWORD *)v11 + 8 * *(unsigned int *)(v11 + 8);
      }
      else
      {
        v12 = 0;
      }
      if (v10 == v12)
      {
        return 1;
      }
      else
      {
        v13 = v10 + 8;
        do
        {
          result = sub_22E4C2628(a1, *(_QWORD *)(v13 - 8));
          if ((_DWORD)result)
            v14 = v13 == v12;
          else
            v14 = 1;
          v13 += 8;
        }
        while (!v14);
      }
    }
  }
  return result;
}

uint64_t sub_22E4C1850(_BYTE *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  uint64_t result;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  if (!*(_DWORD *)(a2 + 96))
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 80);
  v5 = (unint64_t *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 4) != 0)
    v5 = (unint64_t *)*v5;
  result = sub_22E4C1B60(a1, *v5, (uint64_t)(v5 + 1));
  if ((_DWORD)result)
  {
LABEL_5:
    v7 = *(_DWORD *)(a2 + 28) & 0x7F;
    v8 = v7 > 0x39 || ((1 << v7) & 0x3F0003E01011066) == 0;
    if (v8 && (v7 - 70 <= 0xD ? (v10 = ((1 << (v7 - 70)) & 0x2803) == 0) : (v10 = 1), v10 && v7 - 19 > 4))
      v9 = 0;
    else
      v9 = sub_22EFCAE04(a2);
    result = sub_22E4C258C((uint64_t)a1, v9);
    if ((_DWORD)result)
    {
      if ((*(_BYTE *)(a2 + 29) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v12 = *v11;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v14 = *(_QWORD *)v13 + 8 * *(unsigned int *)(v13 + 8);
      }
      else
      {
        v14 = 0;
      }
      if (v12 == v14)
      {
        return 1;
      }
      else
      {
        v15 = v12 + 8;
        do
        {
          result = sub_22E4C2628((uint64_t)a1, *(_QWORD *)(v15 - 8));
          if ((_DWORD)result)
            v16 = v15 == v14;
          else
            v16 = 1;
          v15 += 8;
        }
        while (!v16);
      }
    }
  }
  return result;
}

uint64_t sub_22E4C1980(_BYTE *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v10;
  __int128 v11;
  uint64_t v12;

  result = sub_22E4C1A20(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
  {
    v11 = *(_OWORD *)(a2 + 24);
    v12 = *(_QWORD *)(a2 + 40);
    result = sub_22E4C1AA8((uint64_t)a1, (uint64_t *)&v11);
    if ((_DWORD)result)
    {
      v5 = *(_QWORD *)(a2 + 64);
      if (v5 && (v6 = *(unsigned int *)(v5 + 8), (_DWORD)v6))
      {
        v7 = v5 + 16;
        v8 = v6 - 1;
        do
        {
          result = sub_22E4C22E4((uint64_t)a1, v7);
          v10 = v8-- != 0;
          if (!(_DWORD)result)
            break;
          v7 += 32;
        }
        while (v10);
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_22E4C1A20(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = a2;
  v9[1] = a3;
  if (!a2)
    return 1;
  v5 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v5 || (result = sub_22E4C1A20(a1, v5, a3), (_DWORD)result))
  {
    if (*(_QWORD *)(a2 + 16) && (*(_BYTE *)(a2 + 8) & 4) != 0)
    {
      v7 = sub_22F0AB4E0((uint64_t)v9);
      return sub_22E4C1B60(a1, v7, v8);
    }
    return 1;
  }
  return result;
}

uint64_t sub_22E4C1AA8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t result;
  unint64_t v8;
  int v9;
  unint64_t v10;

  v2 = *a2;
  v3 = *a2 & 7;
  v4 = v3;
  if ((_DWORD)v3 == 7)
  {
    v5 = *(_DWORD *)(v2 & 0xFFFFFFFFFFFFFFF8);
    if (v5 >= 3)
      v5 = 3;
    v4 = v5 | 8;
  }
  if ((v4 - 3) < 3)
  {
    if ((v3 - 3) <= 2)
    {
      v6 = (_QWORD *)a2[2];
      if (v6)
      {
        if ((sub_22E4C1B60(a1, *v6, v6 + 1) & 1) == 0)
          return 0;
      }
    }
    return 1;
  }
  if (v4 != 8)
    return 1;
  if ((~(_BYTE)v2 & 7) != 0)
    goto LABEL_15;
  v8 = v2 & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_DWORD *)v8;
  if (*(_DWORD *)v8 >= 3u)
    v9 = 3;
  if (v9)
LABEL_15:
    v10 = 0;
  else
    v10 = *(_QWORD *)(v8 + 16) & 0xFFFFFFFFFFFFFFF9;
  result = sub_22E4C23FC(a1, v10);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t sub_22E4C1B60(_BYTE *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v10;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  char v65;
  int v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;

  if (a2)
  {
    v4 = a2;
    do
    {
      v6 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
      if ((v4 & 0xF) != 0)
      {
LABEL_4:
        if ((v6 & 0xFFFFFFFFFFFFFFF0) != 0)
          v7 = *(_QWORD *)((char *)&unk_22F4570A8
                         + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
        else
          v7 = 1;
        a3 = (a3 + v7 - 1) & -v7;
        v4 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
      }
      else
      {
        result = 1;
        switch(*(_BYTE *)(v6 + 16))
        {
          case 0:
          case 1:
          case 0x16:
          case 0x17:
          case 0x36:
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F4570A8
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = a3 + v20 - 1;
            goto LABEL_62;
          case 2:
          case 3:
          case 4:
          case 5:
            v21 = *(_QWORD *)(v4 + 32);
            if (v21 >= 0x10 && (*(_QWORD *)(v4 + 32) & 0xFLL) == 0)
              v74 = *(_QWORD *)((char *)&unk_22F4570A8
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v74 = 1;
            result = sub_22E4C1B60(a1, v21, (a3 + v74 + 15) & -v74);
            if (!(_DWORD)result)
              return result;
            v23 = *(_QWORD *)(a3 + 8);
            return sub_22E4B1F30(a1, v23, 0);
          case 6:
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F4570A8
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = a3 + v20 + 11;
            goto LABEL_62;
          case 7:
          case 0x25:
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F4570A8
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = a3 + v20 + 7;
            goto LABEL_62;
          case 8:
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F4570A8
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = v20 + a3;
            goto LABEL_62;
          case 0xA:
          case 0x20:
          case 0x24:
          case 0x26:
          case 0x27:
          case 0x28:
          case 0x29:
            v4 = *(_QWORD *)(v4 + 32);
            goto LABEL_9;
          case 0xC:
          case 0x37:
          case 0x38:
            goto LABEL_76;
          case 0xD:
          case 0x30:
            v23 = *(_QWORD *)(v4 + 24);
            return sub_22E4B1F30(a1, v23, 0);
          case 0xE:
            result = sub_22E4B1A70(a1, *(_QWORD *)(v4 + 24));
            if (!(_DWORD)result)
              return result;
            if (!*(_QWORD *)(v4 + 40))
              return 1;
            result = sub_22E4C1A20(a1, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 16));
            if (!(_DWORD)result)
              return result;
            v25 = *(_DWORD *)(a3 + 28);
            v75 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 40);
            v76 = v25;
            sub_22EFC6DC4((uint64_t)&v77, v75);
            result = sub_22E4C1AA8((uint64_t)a1, &v75);
            if (!(_DWORD)result)
              return result;
            v26 = *(unsigned int *)(v4 + 20);
            if (!(_DWORD)v26)
              return 1;
            v27 = v4 + 48;
            v28 = (uint64_t *)(a3 + 56);
            v29 = v26 - 1;
            do
            {
              v30 = *v28++;
              v78 = *(_OWORD *)v27;
              v79 = *(_QWORD *)(v27 + 16);
              v80 = v30;
              result = sub_22E4C22E4((uint64_t)a1, (uint64_t)&v78);
              v31 = v29-- != 0;
              v32 = v31;
              if (!(_DWORD)result)
                break;
              v27 += 24;
            }
            while ((v32 & 1) != 0);
            return result;
          case 0xF:
            result = sub_22E4C23FC((uint64_t)a1, *(_QWORD *)(v4 + 40));
            if (!(_DWORD)result)
              return result;
            v24 = *(_QWORD *)(v4 + 24);
            return sub_22E4B1A70(a1, v24);
          case 0x10:
            v33 = *(_QWORD *)(v4 + 40);
            goto LABEL_96;
          case 0x11:
            v23 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFFCLL;
            return sub_22E4B1F30(a1, v23, 0);
          case 0x12:
            return sub_22E4C1A20(a1, *(_QWORD *)(v4 + 32), *(_QWORD *)(a3 + 8));
          case 0x13:
            v33 = *(_QWORD *)(v4 + 40);
            if (!v33)
              goto LABEL_97;
LABEL_96:
            result = sub_22E4B1F30(a1, v33, 0);
            if (!(_DWORD)result)
              return result;
LABEL_97:
            v24 = *(_QWORD *)(v4 + 48);
            return sub_22E4B1A70(a1, v24);
          case 0x14:
            v34 = *(_QWORD *)(a3 + 8);
            if (v34)
            {
              v35 = *(_QWORD *)(v4 + 32);
              if (v35)
              {
                result = sub_22E4C1A20(a1, v35, v34);
                if (!(_DWORD)result)
                  return result;
              }
            }
            v36 = *(unsigned int *)(v4 + 20);
            if (!(_DWORD)v36)
              return 1;
            v37 = v4 + 48;
            v38 = (uint64_t *)(a3 + 32);
            v39 = v36 - 1;
            do
            {
              v40 = *v38++;
              v78 = *(_OWORD *)v37;
              v79 = *(_QWORD *)(v37 + 16);
              v80 = v40;
              result = sub_22E4C22E4((uint64_t)a1, (uint64_t)&v78);
              v31 = v39-- != 0;
              v41 = v31;
              if (!(_DWORD)result)
                break;
              v37 += 24;
            }
            while ((v41 & 1) != 0);
            return result;
          case 0x15:
            v42 = *(_QWORD *)(v4 + 48);
            if (v42)
            {
              result = sub_22E4B1F30(a1, v42, 0);
              if (!(_DWORD)result)
                return result;
            }
            v24 = *(_QWORD *)(v4 + 40);
            return sub_22E4B1A70(a1, v24);
          case 0x18:
            v17 = *(_QWORD *)(v4 + 32);
            if (v17)
            {
              result = sub_22E4C1A20(a1, v17, *(_QWORD *)(a3 + 8));
              if (!(_DWORD)result)
                return result;
            }
            v4 = *(_QWORD *)(v4 + 40);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              goto LABEL_60;
            v20 = 1;
            goto LABEL_61;
          case 0x19:
            *(_QWORD *)&v78 = v4;
            *((_QWORD *)&v78 + 1) = a3;
            v43 = *(_QWORD *)(v4 + 24);
            v44 = sub_22E47EE80(&v78);
            return sub_22E4C1B60(a1, v43, v44);
          case 0x1A:
            *(_QWORD *)&v78 = v4;
            *((_QWORD *)&v78 + 1) = a3;
            v45 = *(_QWORD *)(v4 + 24);
            v46 = sub_22E47EE80(&v78);
            result = sub_22E4C1B60(a1, v45, v46);
            if (!(_DWORD)result)
              return result;
            v47 = v78;
            v48 = *(_QWORD *)(v78 + 16);
            if (*(_BYTE *)(v78 + 16) == 25 || (v48 & 0x3FFFC000000000) == 0)
              goto LABEL_126;
            v50 = 0;
            v51 = (unsigned __int16)(v48 >> 38);
            do
            {
              if (*(_QWORD *)(*((_QWORD *)&v78 + 1) + 8 * v50 + 16))
              {
                if ((sub_22E4BD868(a1) & 1) == 0)
                  return 0;
              }
              else if (v50 < (unsigned __int16)(*(_QWORD *)(v47 + 16) >> 38))
              {
                result = sub_22E4B1A70(a1, *(_QWORD *)(v47 + 40 + 8 * v50));
                if (!(_DWORD)result)
                  return result;
              }
              ++v50;
            }
            while (v51 != v50);
            v48 = *(_QWORD *)(v47 + 16);
LABEL_126:
            if ((v48 & 0x3C0000000000000) == 0x80000000000000)
            {
              v52 = (_DWORD *)((v47 + 8 * (unsigned __int16)(v48 >> 38) + 4 * ((v48 >> 59) & 1) + 47) & 0xFFFFFFFFFFFFFFF8);
              v55 = *v52;
              v54 = v52 + 2;
              v53 = v55;
              if (v55)
              {
                v56 = 8 * v53;
                while ((sub_22E4B1A70(a1, *v54) & 1) != 0)
                {
                  ++v54;
                  v56 -= 8;
                  if (!v56)
                    goto LABEL_131;
                }
                return 0;
              }
            }
LABEL_131:
            v57 = sub_22F257D3C(v47);
            if (!v57)
              return 1;
            result = sub_22E4B1F30(a1, v57, 0);
            if ((_DWORD)result)
              return 1;
            return result;
          case 0x1C:
            v4 = *(_QWORD *)(v4 + 24);
LABEL_9:
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F4570A8
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = a3 + v20 + 3;
            goto LABEL_62;
          case 0x1D:
          case 0x1E:
            result = sub_22E4B1F30(a1, *(_QWORD *)(a3 + 16), 0);
            if (!(_DWORD)result)
              return result;
            result = sub_22E4B1F30(a1, *(_QWORD *)(a3 + 24), 0);
            if (!(_DWORD)result)
              return result;
LABEL_76:
            v24 = *(_QWORD *)(v4 + 32);
            return sub_22E4B1A70(a1, v24);
          case 0x1F:
            v19 = *(_QWORD **)(a3 + 8);
            if (v19)
            {
              if ((sub_22E4C1B60(a1, *v19, v19 + 1) & 1) == 0)
                return 0;
            }
            else
            {
              result = sub_22E4B1A70(a1, *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFF0);
              if (!(_DWORD)result)
                return result;
            }
            v4 = *(_QWORD *)(v4 + 32);
            v20 = 1;
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
LABEL_60:
              v20 = *(_QWORD *)((char *)&unk_22F4570A8
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
LABEL_61:
            v10 = a3 + v20 + 15;
LABEL_62:
            a3 = v10 & -v20;
            break;
          case 0x21:
            v58 = *(_QWORD *)(v4 + 24);
            v59 = *(_QWORD *)(v58 & 0xFFFFFFFFFFFFFFF0);
            if (v59 != v4)
            {
              v60 = 1;
              if (v58 >= 0x10 && (v58 & 0xF) == 0)
                v60 = *(_QWORD *)((char *)&unk_22F4570A8
                                + ((uint64_t)((unint64_t)*(unsigned int *)(v59 + 16) << 56) >> 53));
              result = sub_22E4C1B60(a1, v58, (a3+ (((HIWORD(*(_DWORD *)(v4 + 16)) & 0x3F8) + 4 * (*(_DWORD *)(v4 + 16) >> 26) + 31) & 0x7F8)+ v60- 1) & -v60);
              if (!(_DWORD)result)
                return result;
            }
            v61 = (*(_DWORD *)(v4 + 16) >> 19) & 0x7F;
            if (!(_DWORD)v61)
              return 1;
            v62 = (_QWORD *)(a3 + 24);
            v63 = v61 - 1;
            do
            {
              v64 = (_QWORD *)*v62++;
              result = sub_22E4C1B60(a1, *v64, v64 + 1);
              v31 = v63-- != 0;
              v65 = v31;
            }
            while ((_DWORD)result && (v65 & 1) != 0);
            return result;
          case 0x2A:
            v66 = *(_DWORD *)(v4 + 20);
            *((_QWORD *)&v78 + 1) = *(_QWORD *)(v4 + 40);
            LODWORD(v78) = 8;
            DWORD1(v78) = v66;
            return sub_22E4C24C0((uint64_t)a1, (uint64_t)&v78);
          case 0x2B:
            v24 = *(_QWORD *)(v4 + 8);
            return sub_22E4B1A70(a1, v24);
          case 0x2D:
            v67 = sub_22E4B1940(v4);
            if (v67)
              *a1 = 1;
            return v67 ^ 1u;
          case 0x2E:
            result = sub_22E4C23FC((uint64_t)a1, *(_QWORD *)(v4 + 32));
            if (!(_DWORD)result)
              return result;
            v68 = *(unsigned int *)(v4 + 20);
            if (!(_DWORD)v68)
              return 1;
            v69 = v4 + 40;
            v70 = (uint64_t *)(a3 + 16);
            v71 = v68 - 1;
            do
            {
              v72 = *v70++;
              v78 = *(_OWORD *)v69;
              v79 = *(_QWORD *)(v69 + 16);
              v80 = v72;
              result = sub_22E4C22E4((uint64_t)a1, (uint64_t)&v78);
              v31 = v71-- != 0;
              v73 = v31;
              if (!(_DWORD)result)
                break;
              v69 += 24;
            }
            while ((v73 & 1) != 0);
            return result;
          case 0x31:
          case 0x33:
            v13 = *(unint64_t **)(a3 + 16);
            v14 = *v13;
            a3 = (uint64_t)(v13 + 1);
            v4 = v14;
            break;
          case 0x39:
            goto LABEL_4;
          default:
            return result;
        }
      }
    }
    while (v4);
  }
  return 1;
}

uint64_t sub_22E4C22E4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v11;

  result = 1;
  switch(*(_DWORD *)a2)
  {
    case 1:
      v6 = (_QWORD *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL);
      if (v6)
        result = sub_22E4C1B60(a1, *v6, v6 + 1);
      else
        result = sub_22E4B1A70(a1, *(_QWORD *)(a2 + 8));
      break;
    case 5:
    case 6:
      v5 = (_QWORD *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL);
      if (!*v5 || (result = sub_22E4C1A20(a1, *v5, v5[1]), (_DWORD)result))
        result = sub_22E4C23FC(a1, *(_QWORD *)(a2 + 8));
      break;
    case 7:
      result = sub_22E4B1F30(a1, *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL, 0);
      break;
    case 8:
      v7 = *(unsigned int *)(a2 + 4);
      if ((_DWORD)v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        v9 = v7 - 1;
        do
        {
          result = sub_22E4C24C0(a1, v8);
          v11 = v9-- != 0;
          if (!(_DWORD)result)
            break;
          v8 += 24;
        }
        while (v11);
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_22E4C23FC(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t result;
  char v5;

  v2 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((a2 & 6) != 6 || v2 == 0)
  {
    if ((a2 & 6) != 4)
      return 1;
    if (!v2)
      return 1;
    result = sub_22E4C245C(a1, *(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF8);
    if ((_DWORD)result)
      return 1;
  }
  else
  {
    v5 = sub_22E4C245C(a1, *(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF8);
    return (v5 & 1) != 0;
  }
  return result;
}

uint64_t sub_22E4C245C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (!a2)
    return 1;
  v4 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v4 || (result = sub_22E4C245C(a1, v4), (_DWORD)result))
  {
    v6 = *(_QWORD *)(a2 + 16);
    if (v6 && (*(_BYTE *)(a2 + 8) & 4) != 0)
      return sub_22E4B1A70(a1, v6 & 0xFFFFFFFFFFFFFFF0);
    return 1;
  }
  return result;
}

uint64_t sub_22E4C24C0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v8;

  result = 1;
  switch(*(_DWORD *)a2)
  {
    case 1:
      result = sub_22E4B1A70(a1, *(_QWORD *)(a2 + 8));
      break;
    case 5:
    case 6:
      result = sub_22E4C23FC(a1, *(_QWORD *)(a2 + 8));
      break;
    case 7:
      result = sub_22E4B1F30(a1, *(_QWORD *)(a2 + 8), 0);
      break;
    case 8:
      v4 = *(unsigned int *)(a2 + 4);
      if ((_DWORD)v4)
      {
        v5 = *(_QWORD *)(a2 + 8);
        v6 = v4 - 1;
        do
        {
          result = sub_22E4C24C0(a1, v5);
          v8 = v6-- != 0;
          if (!(_DWORD)result)
            break;
          v5 += 24;
        }
        while (v8);
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_22E4C258C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (!a2)
    return 1;
  if ((*(_WORD *)(a2 + 8) & 0x80) != 0)
    sub_22EFCC320(a2);
  v4 = *(_QWORD *)(a2 + 16);
  if (!v4)
    return 1;
  while (1)
  {
    if ((*(_DWORD *)(v4 + 28) & 0x7Fu) - 1 >= 2
      && ((*(_DWORD *)(v4 + 28) & 0x7Fu) - 35 > 2
       || (v5 = *(_QWORD *)(v4 + 128)) == 0
       || ((*(unsigned __int16 *)(v5 + 8) | (*(unsigned __int8 *)(v5 + 10) << 16)) & 0x100000) == 0))
    {
      result = sub_22E4BD868(a1);
      if (!(_DWORD)result)
        break;
    }
    v4 = *(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (!v4)
      return 1;
  }
  return result;
}

uint64_t sub_22E4C2628(uint64_t a1, uint64_t a2)
{
  if (a2)
    __asm { BR              X10 }
  return 1;
}

void sub_22E4C26AC()
{
  uint64_t v0;
  uint64_t v1;

  if (sub_22E4B1F30(v0, *(_QWORD *)(v1 + 40), 0))
    JUMPOUT(0x22E4C2668);
  JUMPOUT(0x22E4C269CLL);
}

void sub_22E4C26C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  v2 = *(unsigned int *)(v1 + 48);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 56);
    v4 = 8 * v2;
    while ((sub_22E4B1F30(v0, *v3, 0) & 1) != 0)
    {
      ++v3;
      v4 -= 8;
      if (!v4)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v5 = *(unsigned int *)(v1 + 64);
    if (!(_DWORD)v5)
      JUMPOUT(0x22E4C2698);
    v6 = *(uint64_t **)(v1 + 72);
    v7 = 8 * v5 - 8;
    do
    {
      v8 = *v6++;
      if (sub_22E4B1F30(v0, v8, 0))
        v9 = v7 == 0;
      else
        v9 = 1;
      v7 -= 8;
    }
    while (!v9);
  }
  JUMPOUT(0x22E4C269CLL);
}

void sub_22E4C2800()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E4B1F30(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E4C269CLL);
}

void sub_22E4C2838()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E4B1F30(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E4C269CLL);
}

void sub_22E4C2870()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E4B1F30(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E4C269CLL);
}

void sub_22E4C28A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  if (sub_22E4B1F30(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if (!(_DWORD)v2)
      JUMPOUT(0x22E4C2698);
    v3 = *(uint64_t **)(v1 + 56);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E4B1F30(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E4C269CLL);
}

void sub_22E4C28F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E4B1F30(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E4C269CLL);
}

void sub_22E4C292C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  if (sub_22E4B1F30(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 56);
    if ((_DWORD)v2)
    {
      v3 = *(uint64_t **)(v1 + 64);
      v4 = 8 * v2;
      do
      {
        if ((sub_22E4B1F30(v0, *v3, 0) & 1) == 0)
          JUMPOUT(0x22E4C27F8);
        ++v3;
        v4 -= 8;
      }
      while (v4);
    }
    v5 = *(unsigned int *)(v1 + 72);
    if (!(_DWORD)v5)
      JUMPOUT(0x22E4C2698);
    v6 = *(uint64_t **)(v1 + 80);
    v7 = 8 * v5 - 8;
    do
    {
      v8 = *v6++;
      if (sub_22E4B1F30(v0, v8, 0))
        v9 = v7 == 0;
      else
        v9 = 1;
      v7 -= 8;
    }
    while (!v9);
  }
  JUMPOUT(0x22E4C269CLL);
}

void sub_22E4C29A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E4B1F30(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E4C269CLL);
}

void sub_22E4C29E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E4B1F30(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E4C269CLL);
}

void sub_22E4C2A18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  if (sub_22E4B1F30(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if (!(_DWORD)v2)
      JUMPOUT(0x22E4C2698);
    v3 = *(uint64_t **)(v1 + 56);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E4B1F30(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E4C269CLL);
}

void sub_22E4C2A64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  if (sub_22E4B1F30(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if (!(_DWORD)v2)
      JUMPOUT(0x22E4C2698);
    v3 = *(uint64_t **)(v1 + 56);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E4B1F30(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E4C269CLL);
}

void sub_22E4C2AB0()
{
  JUMPOUT(0x22E4C2684);
}

void sub_22E4C2AB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (sub_22E4B1F30(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if ((_DWORD)v2)
    {
      v3 = *(uint64_t **)(v1 + 56);
      v4 = 8 * v2;
      while ((sub_22E4B1F30(v0, *v3, 0) & 1) != 0)
      {
        ++v3;
        v4 -= 8;
        if (!v4)
          goto LABEL_6;
      }
LABEL_33:
      JUMPOUT(0x22E4C27F8);
    }
LABEL_6:
    v5 = *(unsigned int *)(v1 + 64);
    if ((_DWORD)v5)
    {
      v6 = *(uint64_t **)(v1 + 72);
      v7 = 8 * v5;
      while ((sub_22E4B1F30(v0, *v6, 0) & 1) != 0)
      {
        ++v6;
        v7 -= 8;
        if (!v7)
          goto LABEL_10;
      }
      goto LABEL_33;
    }
LABEL_10:
    v8 = *(unsigned int *)(v1 + 80);
    if ((_DWORD)v8)
    {
      v9 = *(uint64_t **)(v1 + 88);
      v10 = 8 * v8;
      while ((sub_22E4B1F30(v0, *v9, 0) & 1) != 0)
      {
        ++v9;
        v10 -= 8;
        if (!v10)
          goto LABEL_14;
      }
      goto LABEL_33;
    }
LABEL_14:
    v11 = *(unsigned int *)(v1 + 96);
    if ((_DWORD)v11)
    {
      v12 = *(uint64_t **)(v1 + 104);
      v13 = 8 * v11;
      while ((sub_22E4B1F30(v0, *v12, 0) & 1) != 0)
      {
        ++v12;
        v13 -= 8;
        if (!v13)
          goto LABEL_18;
      }
      goto LABEL_33;
    }
LABEL_18:
    v14 = *(unsigned int *)(v1 + 128);
    if (!(_DWORD)v14)
      JUMPOUT(0x22E4C2698);
    v15 = *(uint64_t **)(v1 + 136);
    v16 = 8 * v14 - 8;
    do
    {
      v17 = *v15++;
      if (sub_22E4B1F30(v0, v17, 0))
        v18 = v16 == 0;
      else
        v18 = 1;
      v16 -= 8;
    }
    while (!v18);
  }
  JUMPOUT(0x22E4C269CLL);
}

uint64_t sub_22E4C2BC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  if (!a2)
    return 1;
  v4 = a2 + 16;
  v5 = *(_DWORD *)(a2 + 12);
  if ((v5 & 0x1FFFFFFF) != 0)
  {
    v6 = 8 * (v5 & 0x1FFFFFFF);
    v7 = a2 + 16;
    while ((sub_22E4BD868(a1) & 1) != 0)
    {
      v7 += 8;
      v6 -= 8;
      if (!v6)
      {
        v5 = *(_DWORD *)(a2 + 12);
        goto LABEL_7;
      }
    }
    return 0;
  }
  else
  {
LABEL_7:
    if ((v5 & 0x40000000) == 0)
      return 1;
    v8 = *(_QWORD *)(v4 + 8 * (v5 & 0x1FFFFFFF));
    if (!v8)
      return 1;
    result = sub_22E4B1F30(a1, v8, 0);
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

uint64_t sub_22E4C2C64(_BYTE *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a2 + 120);
  if ((v3 & 4) != 0)
  {
    v5 = 0;
    while (1)
    {
      v6 = v3 & 0xFFFFFFFFFFFFFFF8;
      if (v5 >= *(unsigned int *)(v6 + 16))
        break;
      sub_22E4C2BC4((uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v5++));
      v3 = *(_QWORD *)(a2 + 120);
      if ((v3 & 4) == 0)
        goto LABEL_5;
    }
    v7 = *(_QWORD *)v6;
    v8 = *(_QWORD *)(v6 + 8);
  }
  else
  {
LABEL_5:
    v7 = 0;
    v8 = 0;
  }
  return sub_22E4C1A20(a1, v7, v8);
}

uint64_t sub_22E4C2CD8(_BYTE *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;

  result = sub_22E4C2C64(a1, a2);
  if ((_DWORD)result)
  {
    if ((*(_BYTE *)(a2 + 74) & 1) == 0)
      return 1;
    v5 = sub_22E46A3A0(a2);
    if (v5 == v6)
    {
      return 1;
    }
    else
    {
      v7 = v6;
      v8 = v5 + 24;
      do
      {
        result = sub_22E4C1B60(a1, **(_QWORD **)(v8 - 8), *(_QWORD *)(v8 - 8) + 8);
        if ((_DWORD)result)
          v9 = v8 == v7;
        else
          v9 = 1;
        v8 += 24;
      }
      while (!v9);
    }
  }
  return result;
}

uint64_t sub_22E4C2D50(_BYTE *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  unint64_t *v11;

  v4 = *(_QWORD *)(a2 + 56);
  if ((v4 & 4) != 0)
  {
    v5 = 0;
    while (1)
    {
      v6 = v4 & 0xFFFFFFFFFFFFFFF8;
      if (v5 >= *(unsigned int *)(v6 + 16))
        break;
      sub_22E4C2BC4((uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v5++));
      v4 = *(_QWORD *)(a2 + 56);
      if ((v4 & 4) == 0)
        goto LABEL_5;
    }
    v7 = *(_QWORD *)v6;
    v8 = *(_QWORD *)(v6 + 8);
  }
  else
  {
LABEL_5:
    v7 = 0;
    v8 = 0;
  }
  result = sub_22E4C1A20(a1, v7, v8);
  if ((_DWORD)result)
  {
    v10 = *(_QWORD *)(a2 + 56);
    if ((v10 & 4) != 0)
    {
      v11 = *(unint64_t **)((v10 & 0xFFFFFFFFFFFFFFF8) + 32);
      if (v11)
        return (sub_22E4C1B60(a1, *v11, (uint64_t)(v11 + 1)) & 1) != 0;
    }
    else if (v10 >= 8)
    {
      v11 = (unint64_t *)(v10 & 0xFFFFFFFFFFFFFFF8);
      return (sub_22E4C1B60(a1, *v11, (uint64_t)(v11 + 1)) & 1) != 0;
    }
    result = sub_22E4B1A70(a1, *(_QWORD *)(a2 + 48));
    if (!(_DWORD)result)
      return result;
    return 1;
  }
  return result;
}

uint64_t sub_22E4C2E1C(_BYTE *a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  _BOOL4 v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;

  v4 = *(_QWORD *)(a2 + 56);
  if ((v4 & 4) != 0)
  {
    v5 = 0;
    while (1)
    {
      v6 = v4 & 0xFFFFFFFFFFFFFFF8;
      if (v5 >= *(unsigned int *)(v6 + 16))
        break;
      sub_22E4C2BC4((uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v5++));
      v4 = *(_QWORD *)(a2 + 56);
      if ((v4 & 4) == 0)
        goto LABEL_5;
    }
    v7 = *(_QWORD *)v6;
    v8 = *(_QWORD *)(v6 + 8);
  }
  else
  {
LABEL_5:
    v7 = 0;
    v8 = 0;
  }
  result = sub_22E4C1A20(a1, v7, v8);
  if ((_DWORD)result)
  {
    v10 = *(_DWORD *)(a2 + 24);
    v11 = *(_QWORD *)(a2 + 152);
    v38 = *(_QWORD *)(a2 + 40);
    v39 = v10;
    v40 = v11;
    result = sub_22E4C1AA8((uint64_t)a1, &v38);
    if ((_DWORD)result)
    {
      v12 = *(_QWORD *)(a2 + 144) & 0xFFFFFFFFFFFFFFF8;
      if ((*(_QWORD *)(a2 + 144) & 6) == 4 && v12 != 0 && (*(_BYTE *)(v12 + 16) & 6) != 0)
      {
        v14 = *(_QWORD *)(v12 + 32);
        if (v14)
        {
          v15 = *(unsigned int *)(v14 + 8);
          if ((_DWORD)v15)
          {
            v16 = v14 + 16;
            while ((sub_22E4C22E4((uint64_t)a1, v16) & 1) != 0)
            {
              v16 += 32;
              if (!--v15)
                goto LABEL_19;
            }
            return 0;
          }
        }
      }
LABEL_19:
      v17 = *(_QWORD *)(a2 + 56);
      v18 = (unint64_t *)(v17 & 0xFFFFFFFFFFFFFFF8);
      if ((v17 & 4) != 0)
        v18 = (unint64_t *)v18[4];
      if (v18)
      {
        result = sub_22E4C1B60(a1, *v18, (uint64_t)(v18 + 1));
        if (!(_DWORD)result)
          return result;
        v17 = *(_QWORD *)(a2 + 56);
      }
      if ((v17 & 4) == 0
        || (v19 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFFF8) + 40)) == 0
        || (result = sub_22E4B1F30(a1, v19, 0), (_DWORD)result))
      {
        if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x37)
        {
          v20 = sub_22EFD7ED0(a2);
          v21 = sub_22EFD7ED0(a2) + 8 * ((*(_QWORD *)(a2 + 80) >> 40) & 0x1FFFFFLL);
          while (v20 != v21)
          {
            v22 = *(_QWORD *)v20;
            if ((*(_WORD *)(*(_QWORD *)v20 + 28) & 4) != 0)
            {
              v23 = (unint64_t *)(*(_QWORD *)v22 & 0xFFFFFFFFFFFFFFF8);
              if ((*(_QWORD *)v22 & 6) != 0 || v23 == 0)
                goto LABEL_37;
              result = sub_22E4C1B60(a1, *v23, (uint64_t)(v23 + 1));
              if (!(_DWORD)result)
                return result;
              if ((*(_WORD *)(v22 + 28) & 4) != 0)
              {
LABEL_37:
                result = sub_22E4B1F30(a1, *(_QWORD *)(v22 + 8), 0);
                if (!(_DWORD)result)
                  return result;
              }
            }
            v20 += 8;
          }
        }
        v25 = sub_22E49F868(a2) && (*(_BYTE *)(a2 + 83) & 2) == 0;
        if ((*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 < 0xFFFFFFFC)
          goto LABEL_70;
        v26 = *(_WORD *)(a2 + 80) & 0x7F;
        v27 = -40;
        if (v26 > 0x46)
        {
          if (v26 == 83)
            goto LABEL_60;
          if (v26 == 71)
          {
            v27 = -56;
            goto LABEL_60;
          }
          if (v26 != 81)
          {
LABEL_55:
            v28 = v26 - 52;
            v29 = v26 - 33 >= 5;
            v30 = -48;
            if (!v29)
              v30 = -64;
            if (v28 >= 6)
              v27 = v30;
            else
              v27 = -72;
          }
        }
        else
        {
          if (v26 > 0x18)
            goto LABEL_54;
          if (v26 == 16)
          {
LABEL_46:
            v27 = -48;
            goto LABEL_60;
          }
          if (((1 << v26) & 0x1066) == 0)
          {
            if (v26 == 24)
              goto LABEL_46;
LABEL_54:
            if (v26 == 70)
            {
              v27 = -64;
              goto LABEL_60;
            }
            goto LABEL_55;
          }
        }
LABEL_60:
        v31 = *(_QWORD *)(a2 + 72 + v27 + 16);
        v32 = (_QWORD *)(v31 & 0xFFFFFFFFFFFFFFF8);
        if ((v31 & 4) != 0)
          v32 = (_QWORD *)*v32;
        if (v32)
        {
          v33 = v32[8];
          if (v33)
          {
            if (((*(unsigned __int16 *)(v33 + 8) | (*(unsigned __int8 *)(v33 + 10) << 16)) & 0x100000) != 0)
            {
              v34 = sub_22EFD462C((unint64_t)(v32 - 8));
              if (v34)
              {
                if ((*(_DWORD *)(v34 + 28) & 0x7F) != 0x1D || (v34 = *(_QWORD *)(v34 + 48)) != 0)
                {
                  if (v34 == a2
                    || (v35 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v34 + 32))(v34),
                        v35 == (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2)))
                  {
                    if (!v25)
                      return 1;
LABEL_71:
                    v36 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
                    result = sub_22E4B1F30(a1, v36, 0);
                    if (!(_DWORD)result)
                      return result;
                    if ((*(_WORD *)(a2 + 80) & 0x80) != 0)
                      sub_22EFCC320(a2 + 72);
                    v37 = *(_QWORD *)(a2 + 88);
                    if (v37)
                    {
                      do
                      {
                        if ((*(_DWORD *)(v37 + 28) & 0x7E) == 0x2E)
                        {
                          result = sub_22E4BD868(a1);
                          if (!(_DWORD)result)
                            break;
                        }
                        result = 1;
                        v37 = *(_QWORD *)(v37 + 8) & 0xFFFFFFFFFFFFFFF8;
                      }
                      while (v37);
                      return result;
                    }
                    return 1;
                  }
                }
              }
            }
          }
        }
LABEL_70:
        if (!v25)
          return 1;
        goto LABEL_71;
      }
    }
  }
  return result;
}

uint64_t sub_22E4C31E0(_BYTE *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;

  result = sub_22E4C2D50(a1, a2);
  if ((_DWORD)result)
  {
    if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x40)
      return 1;
    if ((*(_BYTE *)(a2 + 97) & 8) != 0)
      return 1;
    v5 = sub_22EFBC5B4(a2);
    result = sub_22E4B1F30(a1, v5, 0);
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

uint64_t sub_22E4C3240(_BYTE *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *mm;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *i2;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *n;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *ii;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *nn;
  uint64_t v79;
  uint64_t v80;
  _QWORD *i1;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *i;
  uint64_t v92;
  uint64_t v93;
  _QWORD *j;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *jj;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *kk;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *k;
  uint64_t v175;
  uint64_t v176;
  _QWORD *m;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  __int128 v208;
  uint64_t v209;

  if (!a2)
    return 1;
  switch(*(_DWORD *)(a2 + 8))
  {
    case 3:
      v85 = (_QWORD *)(a2 + 24);
      result = sub_22E4B1F30(a1, *(_QWORD *)(a2 + 24 + 8 * *(unsigned int *)(a2 + 16)), 0);
      if ((_DWORD)result)
      {
        v86 = *(unsigned int *)(a2 + 16);
        if (!(_DWORD)v86)
          return 1;
        v87 = 8 * v86;
        do
        {
          if ((sub_22E4B1F30(a1, *v85, 0) & 1) == 0)
            return 0;
          ++v85;
          v87 -= 8;
        }
        while (v87);
        return 1;
      }
      return result;
    case 4:
    case 7:
    case 0xC:
    case 0x13:
    case 0x15:
    case 0x23:
    case 0x3C:
    case 0x3D:
    case 0x46:
    case 0x4B:
      v5 = *(_QWORD *)(a2 + 16);
      return (sub_22E4B1F30(a1, v5, 0) & 1) != 0;
    case 5:
      v137 = (_QWORD *)(a2 + 24);
      result = sub_22E4B1F30(a1, *(_QWORD *)(a2 + 24 + 8 * *(unsigned int *)(a2 + 16)), 0);
      if (!(_DWORD)result)
        return result;
      v138 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v138)
        return 1;
      v139 = 8 * v138;
      while ((sub_22E4B1F30(a1, *v137, 0) & 1) != 0)
      {
        ++v137;
        v139 -= 8;
        if (!v139)
          return 1;
      }
      return 0;
    case 6:
      result = sub_22E4B1F30(a1, *(_QWORD *)(a2 + 24), 0);
      if (!(_DWORD)result)
        return result;
      v134 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v134)
        return 1;
      v135 = (_QWORD *)(a2 + 40);
      v136 = 8 * v134;
      while ((sub_22E4B1F30(a1, *v135, 0) & 1) != 0)
      {
        ++v135;
        v136 -= 8;
        if (!v136)
          return 1;
      }
      return 0;
    case 0xE:
      v88 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v88)
        return 1;
      v89 = a2 + 24;
      v90 = 8 * v88;
      for (i = (_QWORD *)(a2 + 24); (sub_22E4B1F30(a1, *i, 0) & 1) != 0; ++i)
      {
        v90 -= 8;
        if (!v90)
        {
          v92 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v92)
            return 1;
          v93 = 8 * v92;
          for (j = (_QWORD *)(v89 + 8 * v92); (sub_22E4B1F30(a1, *j, 0) & 1) != 0; ++j)
          {
            v93 -= 8;
            if (!v93)
            {
              v95 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v95)
                return 1;
              v96 = (_QWORD *)(v89 + 8 * v95 + 8 * v95);
              v97 = 8 * v95;
              while ((sub_22E4B1F30(a1, *v96, 0) & 1) != 0)
              {
                ++v96;
                v97 -= 8;
                if (!v97)
                {
                  v98 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v98)
                    return 1;
                  v99 = (_QWORD *)(v89 + 8 * v98 + 8 * v98 + 8 * v98);
                  v100 = 8 * v98;
                  while ((sub_22E4B1F30(a1, *v99, 0) & 1) != 0)
                  {
                    ++v99;
                    v100 -= 8;
                    if (!v100)
                      return 1;
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0xF:
      v171 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v171)
        return 1;
      v172 = a2 + 24;
      v173 = 8 * v171;
      for (k = (_QWORD *)(a2 + 24); (sub_22E4B1F30(a1, *k, 0) & 1) != 0; ++k)
      {
        v173 -= 8;
        if (!v173)
        {
          v175 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v175)
            return 1;
          v176 = 8 * v175;
          for (m = (_QWORD *)(v172 + 8 * v175); (sub_22E4B1F30(a1, *m, 0) & 1) != 0; ++m)
          {
            v176 -= 8;
            if (!v176)
            {
              v178 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v178)
                return 1;
              v179 = (_QWORD *)(v172 + 8 * v178 + 8 * v178);
              v180 = 8 * v178;
              while ((sub_22E4B1F30(a1, *v179, 0) & 1) != 0)
              {
                ++v179;
                v180 -= 8;
                if (!v180)
                {
                  v181 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v181)
                    return 1;
                  v182 = (_QWORD *)(v172 + 8 * v181 + 8 * v181 + 8 * v181);
                  v183 = 8 * v181;
                  while ((sub_22E4B1F30(a1, *v182, 0) & 1) != 0)
                  {
                    ++v182;
                    v183 -= 8;
                    if (!v183)
                      return 1;
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x12:
      v184 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v184)
        return 1;
      v185 = (_QWORD *)(a2 + 40);
      v186 = 8 * v184;
      while ((sub_22E4B1F30(a1, *v185, 0) & 1) != 0)
      {
        ++v185;
        v186 -= 8;
        if (!v186)
          return 1;
      }
      return 0;
    case 0x14:
    case 0x58:
      v5 = *(_QWORD *)(a2 + 24);
      return (sub_22E4B1F30(a1, v5, 0) & 1) != 0;
    case 0x16:
      result = sub_22E4B1F30(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 40);
      return (sub_22E4B1F30(a1, v5, 0) & 1) != 0;
    case 0x18:
      result = sub_22E4B1F30(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 48);
      return (sub_22E4B1F30(a1, v5, 0) & 1) != 0;
    case 0x1A:
      v193 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v193)
        return 1;
      v194 = (_QWORD *)(a2 + 24);
      v195 = 8 * v193;
      while ((sub_22E4B1F30(a1, *v194, 0) & 1) != 0)
      {
        ++v194;
        v195 -= 8;
        if (!v195)
          return 1;
      }
      return 0;
    case 0x1B:
    case 0x1C:
    case 0x21:
    case 0x24:
    case 0x34:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3E:
    case 0x4E:
      result = sub_22E4B1F30(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 32);
      return (sub_22E4B1F30(a1, v5, 0) & 1) != 0;
    case 0x1D:
      v40 = a2 + 40;
      v41 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v41)
        goto LABEL_72;
      v42 = 8 * v41;
      v43 = (_QWORD *)(a2 + 40);
      while ((sub_22E4B1F30(a1, *v43, 0) & 1) != 0)
      {
        ++v43;
        v42 -= 8;
        if (!v42)
        {
LABEL_72:
          result = sub_22E4B1F30(a1, *(_QWORD *)(a2 + 24), 0);
          if (!(_DWORD)result)
            return result;
          v44 = *(unsigned int *)(a2 + 16);
          if ((_DWORD)v44)
          {
            v45 = 8 * v44;
            for (n = (_QWORD *)(v40 + 8 * v44); (sub_22E4B1F30(a1, *n, 0) & 1) != 0; ++n)
            {
              v45 -= 8;
              if (!v45)
              {
                v47 = *(unsigned int *)(a2 + 16);
                if (!(_DWORD)v47)
                  return 1;
                v48 = (_QWORD *)(v40 + 8 * v47 + 8 * v47);
                v49 = 8 * v47;
                while ((sub_22E4B1F30(a1, *v48, 0) & 1) != 0)
                {
                  ++v48;
                  v49 -= 8;
                  if (!v49)
                    return 1;
                }
                return 0;
              }
            }
            return 0;
          }
          return 1;
        }
      }
      return 0;
    case 0x1E:
      v82 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v82)
        return 1;
      v83 = (_QWORD *)(a2 + 24);
      v84 = 8 * v82;
      while ((sub_22E4B1F30(a1, *v83, 0) & 1) != 0)
      {
        ++v83;
        v84 -= 8;
        if (!v84)
          return 1;
      }
      return 0;
    case 0x1F:
      v187 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v187)
        return 1;
      v188 = (_QWORD *)(a2 + 104);
      v189 = 8 * v187;
      while ((sub_22E4B1F30(a1, *v188, 0) & 1) != 0)
      {
        ++v188;
        v189 -= 8;
        if (!v189)
          return 1;
      }
      return 0;
    case 0x22:
      v199 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v199)
        return 1;
      v200 = (_QWORD *)(a2 + 80);
      v201 = 8 * v199;
      while ((sub_22E4B1F30(a1, *v200, 0) & 1) != 0)
      {
        ++v200;
        v201 -= 8;
        if (!v201)
          return 1;
      }
      return 0;
    case 0x25:
      if (!sub_22E4C1A20(a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64)))
        return 0;
      v208 = *(_OWORD *)(a2 + 72);
      v209 = *(_QWORD *)(a2 + 88);
      if (!sub_22E4C1AA8((uint64_t)a1, (uint64_t *)&v208))
        return 0;
      v56 = a2 + 96;
      v57 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v57)
        goto LABEL_98;
      v58 = 8 * v57;
      v59 = (_QWORD *)(a2 + 96);
      while ((sub_22E4B1F30(a1, *v59, 0) & 1) != 0)
      {
        ++v59;
        v58 -= 8;
        if (!v58)
        {
LABEL_98:
          if (sub_22E4B1F30(a1, *(_QWORD *)(a2 + 24), 0)
            && sub_22E4B1F30(a1, *(_QWORD *)(a2 + 40), 0))
          {
            v60 = *(unsigned int *)(a2 + 16);
            if (!(_DWORD)v60)
              return 1;
            v61 = 8 * v60;
            for (ii = (_QWORD *)(v56 + 8 * v60); (sub_22E4B1F30(a1, *ii, 0) & 1) != 0; ++ii)
            {
              v61 -= 8;
              if (!v61)
              {
                v63 = *(unsigned int *)(a2 + 16);
                if (!(_DWORD)v63)
                  return 1;
                v64 = (_QWORD *)(v56 + 8 * v63 + 8 * v63);
                v65 = 8 * v63;
                while ((sub_22E4B1F30(a1, *v64, 0) & 1) != 0)
                {
                  ++v64;
                  v65 -= 8;
                  if (!v65)
                  {
                    v66 = *(unsigned int *)(a2 + 16);
                    if (!(_DWORD)v66)
                      return 1;
                    v67 = (_QWORD *)(v56 + 8 * v66 + 8 * v66 + 8 * v66);
                    v68 = 8 * v66;
                    while ((sub_22E4B1F30(a1, *v67, 0) & 1) != 0)
                    {
                      ++v67;
                      v68 -= 8;
                      if (!v68)
                      {
                        v69 = *(unsigned int *)(a2 + 16);
                        if (!(_DWORD)v69)
                          return 1;
                        v70 = (_QWORD *)(v56 + 8 * v69 + 8 * v69 + 8 * v69 + 8 * v69);
                        v71 = 8 * v69;
                        while ((sub_22E4B1F30(a1, *v70, 0) & 1) != 0)
                        {
                          ++v70;
                          v71 -= 8;
                          if (!v71)
                          {
                            v72 = *(unsigned int *)(a2 + 16);
                            if (!(_DWORD)v72)
                              return 1;
                            v73 = (_QWORD *)(v56 + 8 * v72 + 8 * v72 + 8 * v72 + 8 * v72 + 8 * v72);
                            v74 = 8 * v72;
                            while ((sub_22E4B1F30(a1, *v73, 0) & 1) != 0)
                            {
                              ++v73;
                              v74 -= 8;
                              if (!v74)
                                return 1;
                            }
                            return 0;
                          }
                        }
                        return 0;
                      }
                    }
                    return 0;
                  }
                }
                return 0;
              }
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x27:
      v168 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v168)
        return 1;
      v169 = (_QWORD *)(a2 + 24);
      v170 = 8 * v168;
      while ((sub_22E4B1F30(a1, *v169, 0) & 1) != 0)
      {
        ++v169;
        v170 -= 8;
        if (!v170)
          return 1;
      }
      return 0;
    case 0x29:
      v53 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v53)
        return 1;
      v54 = (_QWORD *)(a2 + 32);
      v55 = 8 * v53;
      while ((sub_22E4B1F30(a1, *v54, 0) & 1) != 0)
      {
        ++v54;
        v55 -= 8;
        if (!v55)
          return 1;
      }
      return 0;
    case 0x2A:
      v50 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v50)
        return 1;
      v51 = (_QWORD *)(a2 + 80);
      v52 = 8 * v50;
      while ((sub_22E4B1F30(a1, *v51, 0) & 1) != 0)
      {
        ++v51;
        v52 -= 8;
        if (!v52)
          return 1;
      }
      return 0;
    case 0x2B:
      v101 = a2 + 64;
      v102 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v102)
        goto LABEL_164;
      v103 = 8 * v102;
      v104 = (_QWORD *)(a2 + 64);
      while ((sub_22E4B1F30(a1, *v104, 0) & 1) != 0)
      {
        ++v104;
        v103 -= 8;
        if (!v103)
        {
LABEL_164:
          result = sub_22E4B1F30(a1, *(_QWORD *)(a2 + 24), 0);
          if (!(_DWORD)result)
            return result;
          result = sub_22E4B1F30(a1, *(_QWORD *)(a2 + 40), 0);
          if (!(_DWORD)result)
            return result;
          v105 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v105)
            return 1;
          v106 = 8 * v105;
          for (jj = (_QWORD *)(v101 + 8 * v105); (sub_22E4B1F30(a1, *jj, 0) & 1) != 0; ++jj)
          {
            v106 -= 8;
            if (!v106)
            {
              v108 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v108)
                return 1;
              v109 = (_QWORD *)(v101 + 8 * v108 + 8 * v108);
              v110 = 8 * v108;
              while ((sub_22E4B1F30(a1, *v109, 0) & 1) != 0)
              {
                ++v109;
                v110 -= 8;
                if (!v110)
                {
                  v111 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v111)
                    return 1;
                  v112 = (_QWORD *)(v101 + 8 * v111 + 8 * v111 + 8 * v111);
                  v113 = 8 * v111;
                  while ((sub_22E4B1F30(a1, *v112, 0) & 1) != 0)
                  {
                    ++v112;
                    v113 -= 8;
                    if (!v113)
                    {
                      v114 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v114)
                        return 1;
                      v115 = (_QWORD *)(v101 + 8 * v114 + 8 * v114 + 8 * v114 + 8 * v114);
                      v116 = 8 * v114;
                      while ((sub_22E4B1F30(a1, *v115, 0) & 1) != 0)
                      {
                        ++v115;
                        v116 -= 8;
                        if (!v116)
                          return 1;
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x2C:
      v117 = a2 + 64;
      v118 = *(unsigned int *)(a2 + 16);
      result = sub_22E4B1F30(a1, *(_QWORD *)(a2 + 64 + 8 * v118 + 8 * v118 + 8 * v118 + 8 * v118 + 8 * v118), 0);
      if (!(_DWORD)result)
        return result;
      result = sub_22E4B1F30(a1, *(_QWORD *)(v117+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8), 0);
      if (!(_DWORD)result)
        return result;
      v119 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v119)
        goto LABEL_191;
      v120 = 8 * v119;
      v121 = (_QWORD *)(a2 + 64);
      while ((sub_22E4B1F30(a1, *v121, 0) & 1) != 0)
      {
        ++v121;
        v120 -= 8;
        if (!v120)
        {
LABEL_191:
          result = sub_22E4B1F30(a1, *(_QWORD *)(a2 + 24), 0);
          if (!(_DWORD)result)
            return result;
          result = sub_22E4B1F30(a1, *(_QWORD *)(a2 + 40), 0);
          if (!(_DWORD)result)
            return result;
          v122 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v122)
            return 1;
          v123 = 8 * v122;
          for (kk = (_QWORD *)(v117 + 8 * v122); (sub_22E4B1F30(a1, *kk, 0) & 1) != 0; ++kk)
          {
            v123 -= 8;
            if (!v123)
            {
              v125 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v125)
                return 1;
              v126 = (_QWORD *)(v117 + 8 * v125 + 8 * v125);
              v127 = 8 * v125;
              while ((sub_22E4B1F30(a1, *v126, 0) & 1) != 0)
              {
                ++v126;
                v127 -= 8;
                if (!v127)
                {
                  v128 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v128)
                    return 1;
                  v129 = (_QWORD *)(v117 + 8 * v128 + 8 * v128 + 8 * v128);
                  v130 = 8 * v128;
                  while ((sub_22E4B1F30(a1, *v129, 0) & 1) != 0)
                  {
                    ++v129;
                    v130 -= 8;
                    if (!v130)
                    {
                      v131 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v131)
                        return 1;
                      v132 = (_QWORD *)(v117 + 8 * v131 + 8 * v131 + 8 * v131 + 8 * v131);
                      v133 = 8 * v131;
                      while ((sub_22E4B1F30(a1, *v132, 0) & 1) != 0)
                      {
                        ++v132;
                        v133 -= 8;
                        if (!v133)
                          return 1;
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x2E:
      v190 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v190)
        return 1;
      v191 = (_QWORD *)(a2 + 136);
      v192 = 8 * v190;
      while ((sub_22E4B1F30(a1, *v191, 0) & 1) != 0)
      {
        ++v191;
        v192 -= 8;
        if (!v192)
          return 1;
      }
      return 0;
    case 0x35:
      v6 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v6)
        return 1;
      v7 = a2 + 24;
      v8 = 8 * v6;
      for (mm = (_QWORD *)(a2 + 24); (sub_22E4B1F30(a1, *mm, 0) & 1) != 0; ++mm)
      {
        v8 -= 8;
        if (!v8)
        {
          v10 = *(unsigned int *)(a2 + 16);
          v11 = (uint64_t *)(v7 + 8 * v10);
          v208 = (unint64_t)v11;
          if ((_DWORD)v10)
          {
            v12 = 0;
            v13 = &v11[v10];
            while (1)
            {
              if ((v12 & 3) != 0)
              {
                if ((v12 & 0xFFFFFFFFFFFFFFFCLL) != 0)
                  v14 = (_QWORD *)((v12 & 0xFFFFFFFFFFFFFFFCLL) + 40);
                else
                  v14 = (_QWORD *)sub_22F3AC1A8(*v11);
                if ((sub_22E4B1F30(a1, *v14, 0) & 1) == 0)
                  return 0;
                if (v12 < 4)
                  sub_22F3F2FE0((uint64_t)&v208, 1);
                else
                  sub_22F0D8720((uint64_t)&v208);
              }
              else
              {
                if (!sub_22E4B1F30(a1, *v11, 0))
                  return 0;
                *(_QWORD *)&v208 = v11 + 1;
              }
              v12 = *((_QWORD *)&v208 + 1);
              v11 = (uint64_t *)v208;
              if ((uint64_t *)v208 == v13 && *((_QWORD *)&v208 + 1) == 0)
                return 1;
            }
          }
          return 1;
        }
      }
      return 0;
    case 0x3F:
      v75 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v75)
        return 1;
      v76 = a2 + 24;
      v77 = 8 * v75;
      for (nn = (_QWORD *)(a2 + 24); (sub_22E4B1F30(a1, *nn, 0) & 1) != 0; ++nn)
      {
        v77 -= 8;
        if (!v77)
        {
          v79 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v79)
            return 1;
          v80 = 8 * v79;
          for (i1 = (_QWORD *)(v76 + 8 * v79); (sub_22E4B1F30(a1, *i1, 0) & 1) != 0; ++i1)
          {
            v80 -= 8;
            if (!v80)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 0x42:
      if (!sub_22E4C1A20(a1, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72)))
        return 0;
      v208 = *(_OWORD *)(a2 + 80);
      v209 = *(_QWORD *)(a2 + 96);
      if (!sub_22E4C1AA8((uint64_t)a1, (uint64_t *)&v208))
        return 0;
      v140 = a2 + 104;
      v141 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v141)
        goto LABEL_228;
      v142 = 8 * v141;
      v143 = (_QWORD *)(a2 + 104);
      while ((sub_22E4B1F30(a1, *v143, 0) & 1) != 0)
      {
        ++v143;
        v142 -= 8;
        if (!v142)
        {
LABEL_228:
          if (sub_22E4B1F30(a1, *(_QWORD *)(a2 + 24), 0)
            && sub_22E4B1F30(a1, *(_QWORD *)(a2 + 40), 0))
          {
            v144 = *(unsigned int *)(a2 + 16);
            if ((_DWORD)v144)
            {
              v145 = 8 * v144;
              v146 = (_QWORD *)(v140 + 8 * v144);
              while ((sub_22E4B1F30(a1, *v146, 0) & 1) != 0)
              {
                ++v146;
                v145 -= 8;
                if (!v145)
                {
                  v147 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v147)
                    goto LABEL_246;
                  v148 = (_QWORD *)(v140 + 8 * v147 + 8 * v147);
                  v149 = 8 * v147;
                  while ((sub_22E4B1F30(a1, *v148, 0) & 1) != 0)
                  {
                    ++v148;
                    v149 -= 8;
                    if (!v149)
                    {
                      v150 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v150)
                        goto LABEL_246;
                      v151 = (_QWORD *)(v140 + 8 * v150 + 8 * v150 + 8 * v150);
                      v152 = 8 * v150;
                      while ((sub_22E4B1F30(a1, *v151, 0) & 1) != 0)
                      {
                        ++v151;
                        v152 -= 8;
                        if (!v152)
                        {
                          v153 = *(unsigned int *)(a2 + 16);
                          if (!(_DWORD)v153)
                            goto LABEL_246;
                          v154 = (_QWORD *)(v140 + 8 * v153 + 8 * v153 + 8 * v153 + 8 * v153);
                          v155 = 8 * v153;
                          while ((sub_22E4B1F30(a1, *v154, 0) & 1) != 0)
                          {
                            ++v154;
                            v155 -= 8;
                            if (!v155)
                              goto LABEL_246;
                          }
                          return 0;
                        }
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
            }
            else
            {
LABEL_246:
              if (*(_DWORD *)(a2 + 48) != 1)
                return 1;
              v156 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v156)
                return 1;
              v157 = (_QWORD *)(v140 + 8 * v156 + 8 * v156 + 8 * v156 + 8 * v156 + 8 * v156);
              v158 = 8 * v156;
              while ((sub_22E4B1F30(a1, *v157, 0) & 1) != 0)
              {
                ++v157;
                v158 -= 8;
                if (!v158)
                {
                  v159 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v159)
                    return 1;
                  v160 = (_QWORD *)(v140 + 8 * v159 + 8 * v159 + 8 * v159 + 8 * v159 + 8 * v159 + 8 * v159);
                  v161 = 8 * v159;
                  while ((sub_22E4B1F30(a1, *v160, 0) & 1) != 0)
                  {
                    ++v160;
                    v161 -= 8;
                    if (!v161)
                    {
                      v162 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v162)
                        return 1;
                      v163 = (_QWORD *)(v140 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162);
                      v164 = 8 * v162;
                      while ((sub_22E4B1F30(a1, *v163, 0) & 1) != 0)
                      {
                        ++v163;
                        v164 -= 8;
                        if (!v164)
                          return 1;
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x47:
      result = sub_22E4B1F30(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 64);
      return (sub_22E4B1F30(a1, v5, 0) & 1) != 0;
    case 0x49:
      v202 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v202)
        return 1;
      v203 = (_QWORD *)(a2 + 24);
      v204 = 8 * v202;
      while ((sub_22E4B1F30(a1, *v203, 0) & 1) != 0)
      {
        ++v203;
        v204 -= 8;
        if (!v204)
          return 1;
      }
      return 0;
    case 0x4C:
      v165 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v165)
        return 1;
      v166 = (_QWORD *)(a2 + 24);
      v167 = 8 * v165;
      while ((sub_22E4B1F30(a1, *v166, 0) & 1) != 0)
      {
        ++v166;
        v167 -= 8;
        if (!v167)
          return 1;
      }
      return 0;
    case 0x4D:
      if (!sub_22E4C1A20(a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64)))
        return 0;
      v208 = *(_OWORD *)(a2 + 72);
      v209 = *(_QWORD *)(a2 + 88);
      if (!sub_22E4C1AA8((uint64_t)a1, (uint64_t *)&v208))
        return 0;
      v24 = a2 + 96;
      v25 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v25)
        goto LABEL_49;
      v26 = 8 * v25;
      v27 = (_QWORD *)(a2 + 96);
      while ((sub_22E4B1F30(a1, *v27, 0) & 1) != 0)
      {
        ++v27;
        v26 -= 8;
        if (!v26)
        {
LABEL_49:
          if (sub_22E4B1F30(a1, *(_QWORD *)(a2 + 24), 0)
            && sub_22E4B1F30(a1, *(_QWORD *)(a2 + 40), 0))
          {
            v28 = *(unsigned int *)(a2 + 16);
            if (!(_DWORD)v28)
              return 1;
            v29 = 8 * v28;
            for (i2 = (_QWORD *)(v24 + 8 * v28); (sub_22E4B1F30(a1, *i2, 0) & 1) != 0; ++i2)
            {
              v29 -= 8;
              if (!v29)
              {
                v31 = *(unsigned int *)(a2 + 16);
                if (!(_DWORD)v31)
                  return 1;
                v32 = (_QWORD *)(v24 + 8 * v31 + 8 * v31);
                v33 = 8 * v31;
                while ((sub_22E4B1F30(a1, *v32, 0) & 1) != 0)
                {
                  ++v32;
                  v33 -= 8;
                  if (!v33)
                  {
                    v34 = *(unsigned int *)(a2 + 16);
                    if (!(_DWORD)v34)
                      return 1;
                    v35 = (_QWORD *)(v24 + 8 * v34 + 8 * v34 + 8 * v34);
                    v36 = 8 * v34;
                    while ((sub_22E4B1F30(a1, *v35, 0) & 1) != 0)
                    {
                      ++v35;
                      v36 -= 8;
                      if (!v36)
                      {
                        v37 = *(unsigned int *)(a2 + 16);
                        if (!(_DWORD)v37)
                          return 1;
                        v38 = (_QWORD *)(v24 + 8 * v37 + 8 * v37 + 8 * v37 + 8 * v37);
                        v39 = 8 * v37;
                        while ((sub_22E4B1F30(a1, *v38, 0) & 1) != 0)
                        {
                          ++v38;
                          v39 -= 8;
                          if (!v39)
                            return 1;
                        }
                        return 0;
                      }
                    }
                    return 0;
                  }
                }
                return 0;
              }
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x51:
      v16 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v16)
        return 1;
      v17 = (_QWORD *)(a2 + 104);
      v18 = 8 * v16;
      while ((sub_22E4B1F30(a1, *v17, 0) & 1) != 0)
      {
        ++v17;
        v18 -= 8;
        if (!v18)
          return 1;
      }
      return 0;
    case 0x59:
      v205 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v205)
        return 1;
      v206 = (_QWORD *)(a2 + 80);
      v207 = 8 * v205;
      while ((sub_22E4B1F30(a1, *v206, 0) & 1) != 0)
      {
        ++v206;
        v207 -= 8;
        if (!v207)
          return 1;
      }
      return 0;
    case 0x5A:
      v196 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v196)
        return 1;
      v197 = (_QWORD *)(a2 + 80);
      v198 = 8 * v196;
      while ((sub_22E4B1F30(a1, *v197, 0) & 1) != 0)
      {
        ++v197;
        v198 -= 8;
        if (!v198)
          return 1;
      }
      return 0;
    case 0x5B:
      v19 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v19)
        return 1;
      v20 = 0;
      v21 = a2 + 24;
      v22 = 2 * v19;
      break;
    default:
      return 1;
  }
  while (1)
  {
    v23 = *(_QWORD *)(v21 + 8 * (v20 + 1));
    result = sub_22E4B1F30(a1, *(_QWORD *)(v21 + 8 * v20), 0);
    if (!(_DWORD)result)
      break;
    if ((sub_22E4B1F30(a1, v23, 0) & 1) == 0)
      return 0;
    v20 += 2;
    if (v22 == v20)
      return 1;
  }
  return result;
}

uint64_t sub_22E4C42F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v9;
  _QWORD *v10;
  uint64_t result;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;

  if (!a2)
    return 1;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4 == v3)
    v5 = 0;
  else
    v5 = *(uint64_t **)(a2 + 24);
  if (v4 == v3)
    v6 = 0;
  else
    v6 = *(uint64_t **)(a2 + 16);
  v14 = 0;
  v15 = 0;
  v13 = v6;
  if (v6 == v5)
    return 1;
  v9 = 0;
  while (1)
  {
    if ((v9 & 3) == 0)
    {
      result = sub_22E4B1F30(a1, *v6, a3);
      if (!(_DWORD)result)
        return result;
      v13 = v6 + 1;
      goto LABEL_18;
    }
    v10 = (_QWORD *)((v9 & 0xFFFFFFFFFFFFFFFCLL) != 0 ? (v9 & 0xFFFFFFFFFFFFFFFCLL) + 40 : sub_22F3AC1A8(*v6));
    if ((sub_22E4B1F30(a1, *v10, a3) & 1) == 0)
      return 0;
    if (v9 < 4)
      sub_22F3F2FE0((uint64_t)&v13, 1);
    else
      sub_22F0D8720((uint64_t)&v13);
LABEL_18:
    v6 = v13;
    v9 = v14;
    if (v13 == v5 && v14 == 0)
      return 1;
  }
}

uint64_t sub_22E4C43EC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (!a2)
    return 1;
  if ((*(_WORD *)(a2 + 8) & 0x80) != 0)
    sub_22EFCC320(a2);
  v4 = *(_QWORD *)(a2 + 16);
  if (!v4)
    return 1;
  while (1)
  {
    if ((*(_DWORD *)(v4 + 28) & 0x7Fu) - 1 >= 2
      && ((*(_DWORD *)(v4 + 28) & 0x7Fu) - 35 > 2
       || (v5 = *(_QWORD *)(v4 + 128)) == 0
       || ((*(unsigned __int16 *)(v5 + 8) | (*(unsigned __int8 *)(v5 + 10) << 16)) & 0x100000) == 0))
    {
      result = sub_22E4AC974(a1);
      if (!(_DWORD)result)
        break;
    }
    v4 = *(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (!v4)
      return 1;
  }
  return result;
}

uint64_t sub_22E4C4488(uint64_t a1, uint64_t a2)
{
  if (a2)
    __asm { BR              X10 }
  return 1;
}

void sub_22E4C450C()
{
  uint64_t v0;
  uint64_t v1;

  if (sub_22E4A103C(v0, *(_QWORD *)(v1 + 40), 0))
    JUMPOUT(0x22E4C44C8);
  JUMPOUT(0x22E4C44FCLL);
}

void sub_22E4C4528()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  v2 = *(unsigned int *)(v1 + 48);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 56);
    v4 = 8 * v2;
    while ((sub_22E4A103C(v0, *v3, 0) & 1) != 0)
    {
      ++v3;
      v4 -= 8;
      if (!v4)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v5 = *(unsigned int *)(v1 + 64);
    if (!(_DWORD)v5)
      JUMPOUT(0x22E4C44F8);
    v6 = *(uint64_t **)(v1 + 72);
    v7 = 8 * v5 - 8;
    do
    {
      v8 = *v6++;
      if (sub_22E4A103C(v0, v8, 0))
        v9 = v7 == 0;
      else
        v9 = 1;
      v7 -= 8;
    }
    while (!v9);
  }
  JUMPOUT(0x22E4C44FCLL);
}

void sub_22E4C4660()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E4A103C(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E4C44FCLL);
}

void sub_22E4C4698()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E4A103C(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E4C44FCLL);
}

void sub_22E4C46D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E4A103C(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E4C44FCLL);
}

void sub_22E4C4708()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  if (sub_22E4A103C(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if (!(_DWORD)v2)
      JUMPOUT(0x22E4C44F8);
    v3 = *(uint64_t **)(v1 + 56);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E4A103C(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E4C44FCLL);
}

void sub_22E4C4754()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E4A103C(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E4C44FCLL);
}

void sub_22E4C478C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  if (sub_22E4A103C(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 56);
    if ((_DWORD)v2)
    {
      v3 = *(uint64_t **)(v1 + 64);
      v4 = 8 * v2;
      do
      {
        if ((sub_22E4A103C(v0, *v3, 0) & 1) == 0)
          JUMPOUT(0x22E4C4658);
        ++v3;
        v4 -= 8;
      }
      while (v4);
    }
    v5 = *(unsigned int *)(v1 + 72);
    if (!(_DWORD)v5)
      JUMPOUT(0x22E4C44F8);
    v6 = *(uint64_t **)(v1 + 80);
    v7 = 8 * v5 - 8;
    do
    {
      v8 = *v6++;
      if (sub_22E4A103C(v0, v8, 0))
        v9 = v7 == 0;
      else
        v9 = 1;
      v7 -= 8;
    }
    while (!v9);
  }
  JUMPOUT(0x22E4C44FCLL);
}

void sub_22E4C4808()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E4A103C(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E4C44FCLL);
}

void sub_22E4C4840()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E4A103C(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E4C44FCLL);
}

void sub_22E4C4878()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  if (sub_22E4A103C(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if (!(_DWORD)v2)
      JUMPOUT(0x22E4C44F8);
    v3 = *(uint64_t **)(v1 + 56);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E4A103C(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E4C44FCLL);
}

void sub_22E4C48C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  if (sub_22E4A103C(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if (!(_DWORD)v2)
      JUMPOUT(0x22E4C44F8);
    v3 = *(uint64_t **)(v1 + 56);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E4A103C(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E4C44FCLL);
}

void sub_22E4C4910()
{
  JUMPOUT(0x22E4C44E4);
}

void sub_22E4C4918()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (sub_22E4A103C(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if ((_DWORD)v2)
    {
      v3 = *(uint64_t **)(v1 + 56);
      v4 = 8 * v2;
      while ((sub_22E4A103C(v0, *v3, 0) & 1) != 0)
      {
        ++v3;
        v4 -= 8;
        if (!v4)
          goto LABEL_6;
      }
LABEL_33:
      JUMPOUT(0x22E4C4658);
    }
LABEL_6:
    v5 = *(unsigned int *)(v1 + 64);
    if ((_DWORD)v5)
    {
      v6 = *(uint64_t **)(v1 + 72);
      v7 = 8 * v5;
      while ((sub_22E4A103C(v0, *v6, 0) & 1) != 0)
      {
        ++v6;
        v7 -= 8;
        if (!v7)
          goto LABEL_10;
      }
      goto LABEL_33;
    }
LABEL_10:
    v8 = *(unsigned int *)(v1 + 80);
    if ((_DWORD)v8)
    {
      v9 = *(uint64_t **)(v1 + 88);
      v10 = 8 * v8;
      while ((sub_22E4A103C(v0, *v9, 0) & 1) != 0)
      {
        ++v9;
        v10 -= 8;
        if (!v10)
          goto LABEL_14;
      }
      goto LABEL_33;
    }
LABEL_14:
    v11 = *(unsigned int *)(v1 + 96);
    if ((_DWORD)v11)
    {
      v12 = *(uint64_t **)(v1 + 104);
      v13 = 8 * v11;
      while ((sub_22E4A103C(v0, *v12, 0) & 1) != 0)
      {
        ++v12;
        v13 -= 8;
        if (!v13)
          goto LABEL_18;
      }
      goto LABEL_33;
    }
LABEL_18:
    v14 = *(unsigned int *)(v1 + 128);
    if (!(_DWORD)v14)
      JUMPOUT(0x22E4C44F8);
    v15 = *(uint64_t **)(v1 + 136);
    v16 = 8 * v14 - 8;
    do
    {
      v17 = *v15++;
      if (sub_22E4A103C(v0, v17, 0))
        v18 = v16 == 0;
      else
        v18 = 1;
      v16 -= 8;
    }
    while (!v18);
  }
  JUMPOUT(0x22E4C44FCLL);
}

uint64_t sub_22E4C4A24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  if (!a2)
    return 1;
  v4 = a2 + 16;
  v5 = *(_DWORD *)(a2 + 12);
  if ((v5 & 0x1FFFFFFF) != 0)
  {
    v6 = 8 * (v5 & 0x1FFFFFFF);
    v7 = a2 + 16;
    while ((sub_22E4AC974(a1) & 1) != 0)
    {
      v7 += 8;
      v6 -= 8;
      if (!v6)
      {
        v5 = *(_DWORD *)(a2 + 12);
        goto LABEL_7;
      }
    }
    return 0;
  }
  else
  {
LABEL_7:
    if ((v5 & 0x40000000) == 0)
      return 1;
    v8 = *(_QWORD *)(v4 + 8 * (v5 & 0x1FFFFFFF));
    if (!v8)
      return 1;
    result = sub_22E4A103C(a1, v8, 0);
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

uint64_t sub_22E4C4AC4(char *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a2 + 120);
  if ((v3 & 4) != 0)
  {
    v5 = 0;
    while (1)
    {
      v6 = v3 & 0xFFFFFFFFFFFFFFF8;
      if (v5 >= *(unsigned int *)(v6 + 16))
        break;
      sub_22E4C4A24((uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v5++));
      v3 = *(_QWORD *)(a2 + 120);
      if ((v3 & 4) == 0)
        goto LABEL_5;
    }
    v7 = *(_QWORD *)v6;
    v8 = *(_QWORD *)(v6 + 8);
  }
  else
  {
LABEL_5:
    v7 = 0;
    v8 = 0;
  }
  return sub_22E4B0B2C(a1, v7, v8);
}

uint64_t sub_22E4C4B38(char *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;

  result = sub_22E4C4AC4(a1, a2);
  if ((_DWORD)result)
  {
    if ((*(_BYTE *)(a2 + 74) & 1) == 0)
      return 1;
    v5 = sub_22E46A3A0(a2);
    if (v5 == v6)
    {
      return 1;
    }
    else
    {
      v7 = v6;
      v8 = v5 + 24;
      do
      {
        result = sub_22E4B0C6C(a1, **(_QWORD **)(v8 - 8), *(_QWORD *)(v8 - 8) + 8);
        if ((_DWORD)result)
          v9 = v8 == v7;
        else
          v9 = 1;
        v8 += 24;
      }
      while (!v9);
    }
  }
  return result;
}

uint64_t sub_22E4C4BB0(char *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  unint64_t *v11;

  v4 = *(_QWORD *)(a2 + 56);
  if ((v4 & 4) != 0)
  {
    v5 = 0;
    while (1)
    {
      v6 = v4 & 0xFFFFFFFFFFFFFFF8;
      if (v5 >= *(unsigned int *)(v6 + 16))
        break;
      sub_22E4C4A24((uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v5++));
      v4 = *(_QWORD *)(a2 + 56);
      if ((v4 & 4) == 0)
        goto LABEL_5;
    }
    v7 = *(_QWORD *)v6;
    v8 = *(_QWORD *)(v6 + 8);
  }
  else
  {
LABEL_5:
    v7 = 0;
    v8 = 0;
  }
  result = sub_22E4B0B2C(a1, v7, v8);
  if ((_DWORD)result)
  {
    v10 = *(_QWORD *)(a2 + 56);
    if ((v10 & 4) != 0)
    {
      v11 = *(unint64_t **)((v10 & 0xFFFFFFFFFFFFFFF8) + 32);
      if (v11)
        return (sub_22E4B0C6C(a1, *v11, (uint64_t)(v11 + 1)) & 1) != 0;
    }
    else if (v10 >= 8)
    {
      v11 = (unint64_t *)(v10 & 0xFFFFFFFFFFFFFFF8);
      return (sub_22E4B0C6C(a1, *v11, (uint64_t)(v11 + 1)) & 1) != 0;
    }
    result = sub_22E4A088C(a1, *(_QWORD *)(a2 + 48));
    if (!(_DWORD)result)
      return result;
    return 1;
  }
  return result;
}

uint64_t sub_22E4C4C7C(char *a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  _BOOL4 v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;

  v4 = *(_QWORD *)(a2 + 56);
  if ((v4 & 4) != 0)
  {
    v5 = 0;
    while (1)
    {
      v6 = v4 & 0xFFFFFFFFFFFFFFF8;
      if (v5 >= *(unsigned int *)(v6 + 16))
        break;
      sub_22E4C4A24((uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v5++));
      v4 = *(_QWORD *)(a2 + 56);
      if ((v4 & 4) == 0)
        goto LABEL_5;
    }
    v7 = *(_QWORD *)v6;
    v8 = *(_QWORD *)(v6 + 8);
  }
  else
  {
LABEL_5:
    v7 = 0;
    v8 = 0;
  }
  result = sub_22E4B0B2C(a1, v7, v8);
  if ((_DWORD)result)
  {
    v10 = *(_DWORD *)(a2 + 24);
    v11 = *(_QWORD *)(a2 + 152);
    v38 = *(_QWORD *)(a2 + 40);
    v39 = v10;
    v40 = v11;
    result = sub_22E4B0BB4((uint64_t)a1, &v38);
    if ((_DWORD)result)
    {
      v12 = *(_QWORD *)(a2 + 144) & 0xFFFFFFFFFFFFFFF8;
      if ((*(_QWORD *)(a2 + 144) & 6) == 4 && v12 != 0 && (*(_BYTE *)(v12 + 16) & 6) != 0)
      {
        v14 = *(_QWORD *)(v12 + 32);
        if (v14)
        {
          v15 = *(unsigned int *)(v14 + 8);
          if ((_DWORD)v15)
          {
            v16 = v14 + 16;
            while ((sub_22E4B1628((uint64_t)a1, v16) & 1) != 0)
            {
              v16 += 32;
              if (!--v15)
                goto LABEL_19;
            }
            return 0;
          }
        }
      }
LABEL_19:
      v17 = *(_QWORD *)(a2 + 56);
      v18 = (unint64_t *)(v17 & 0xFFFFFFFFFFFFFFF8);
      if ((v17 & 4) != 0)
        v18 = (unint64_t *)v18[4];
      if (v18)
      {
        result = sub_22E4B0C6C(a1, *v18, (uint64_t)(v18 + 1));
        if (!(_DWORD)result)
          return result;
        v17 = *(_QWORD *)(a2 + 56);
      }
      if ((v17 & 4) == 0
        || (v19 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFFF8) + 40)) == 0
        || (result = sub_22E4A103C(a1, v19, 0), (_DWORD)result))
      {
        if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x37)
        {
          v20 = sub_22EFD7ED0(a2);
          v21 = sub_22EFD7ED0(a2) + 8 * ((*(_QWORD *)(a2 + 80) >> 40) & 0x1FFFFFLL);
          while (v20 != v21)
          {
            v22 = *(_QWORD *)v20;
            if ((*(_WORD *)(*(_QWORD *)v20 + 28) & 4) != 0)
            {
              v23 = (unint64_t *)(*(_QWORD *)v22 & 0xFFFFFFFFFFFFFFF8);
              if ((*(_QWORD *)v22 & 6) != 0 || v23 == 0)
                goto LABEL_37;
              result = sub_22E4B0C6C(a1, *v23, (uint64_t)(v23 + 1));
              if (!(_DWORD)result)
                return result;
              if ((*(_WORD *)(v22 + 28) & 4) != 0)
              {
LABEL_37:
                result = sub_22E4A103C(a1, *(_QWORD *)(v22 + 8), 0);
                if (!(_DWORD)result)
                  return result;
              }
            }
            v20 += 8;
          }
        }
        v25 = sub_22E49F868(a2) && (*(_BYTE *)(a2 + 83) & 2) == 0;
        if ((*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 < 0xFFFFFFFC)
          goto LABEL_70;
        v26 = *(_WORD *)(a2 + 80) & 0x7F;
        v27 = -40;
        if (v26 > 0x46)
        {
          if (v26 == 83)
            goto LABEL_60;
          if (v26 == 71)
          {
            v27 = -56;
            goto LABEL_60;
          }
          if (v26 != 81)
          {
LABEL_55:
            v28 = v26 - 52;
            v29 = v26 - 33 >= 5;
            v30 = -48;
            if (!v29)
              v30 = -64;
            if (v28 >= 6)
              v27 = v30;
            else
              v27 = -72;
          }
        }
        else
        {
          if (v26 > 0x18)
            goto LABEL_54;
          if (v26 == 16)
          {
LABEL_46:
            v27 = -48;
            goto LABEL_60;
          }
          if (((1 << v26) & 0x1066) == 0)
          {
            if (v26 == 24)
              goto LABEL_46;
LABEL_54:
            if (v26 == 70)
            {
              v27 = -64;
              goto LABEL_60;
            }
            goto LABEL_55;
          }
        }
LABEL_60:
        v31 = *(_QWORD *)(a2 + 72 + v27 + 16);
        v32 = (_QWORD *)(v31 & 0xFFFFFFFFFFFFFFF8);
        if ((v31 & 4) != 0)
          v32 = (_QWORD *)*v32;
        if (v32)
        {
          v33 = v32[8];
          if (v33)
          {
            if (((*(unsigned __int16 *)(v33 + 8) | (*(unsigned __int8 *)(v33 + 10) << 16)) & 0x100000) != 0)
            {
              v34 = sub_22EFD462C((unint64_t)(v32 - 8));
              if (v34)
              {
                if ((*(_DWORD *)(v34 + 28) & 0x7F) != 0x1D || (v34 = *(_QWORD *)(v34 + 48)) != 0)
                {
                  if (v34 == a2
                    || (v35 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v34 + 32))(v34),
                        v35 == (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2)))
                  {
                    if (!v25)
                      return 1;
LABEL_71:
                    v36 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
                    result = sub_22E4A103C(a1, v36, 0);
                    if (!(_DWORD)result)
                      return result;
                    if ((*(_WORD *)(a2 + 80) & 0x80) != 0)
                      sub_22EFCC320(a2 + 72);
                    v37 = *(_QWORD *)(a2 + 88);
                    if (v37)
                    {
                      do
                      {
                        if ((*(_DWORD *)(v37 + 28) & 0x7E) == 0x2E)
                        {
                          result = sub_22E4AC974(a1);
                          if (!(_DWORD)result)
                            break;
                        }
                        result = 1;
                        v37 = *(_QWORD *)(v37 + 8) & 0xFFFFFFFFFFFFFFF8;
                      }
                      while (v37);
                      return result;
                    }
                    return 1;
                  }
                }
              }
            }
          }
        }
LABEL_70:
        if (!v25)
          return 1;
        goto LABEL_71;
      }
    }
  }
  return result;
}

uint64_t sub_22E4C5040(char *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;

  result = sub_22E4C4BB0(a1, a2);
  if ((_DWORD)result)
  {
    if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x40)
      return 1;
    if ((*(_BYTE *)(a2 + 97) & 8) != 0)
      return 1;
    v5 = sub_22EFBC5B4(a2);
    result = sub_22E4A103C(a1, v5, 0);
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

uint64_t sub_22E4C50A0(char *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *mm;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *i2;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *n;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *ii;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *nn;
  uint64_t v79;
  uint64_t v80;
  _QWORD *i1;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *i;
  uint64_t v92;
  uint64_t v93;
  _QWORD *j;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *jj;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *kk;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *k;
  uint64_t v175;
  uint64_t v176;
  _QWORD *m;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  __int128 v208;
  uint64_t v209;

  if (!a2)
    return 1;
  switch(*(_DWORD *)(a2 + 8))
  {
    case 3:
      v85 = (_QWORD *)(a2 + 24);
      result = sub_22E4A103C(a1, *(_QWORD *)(a2 + 24 + 8 * *(unsigned int *)(a2 + 16)), 0);
      if ((_DWORD)result)
      {
        v86 = *(unsigned int *)(a2 + 16);
        if (!(_DWORD)v86)
          return 1;
        v87 = 8 * v86;
        do
        {
          if ((sub_22E4A103C(a1, *v85, 0) & 1) == 0)
            return 0;
          ++v85;
          v87 -= 8;
        }
        while (v87);
        return 1;
      }
      return result;
    case 4:
    case 7:
    case 0xC:
    case 0x13:
    case 0x15:
    case 0x23:
    case 0x3C:
    case 0x3D:
    case 0x46:
    case 0x4B:
      v5 = *(_QWORD *)(a2 + 16);
      return (sub_22E4A103C(a1, v5, 0) & 1) != 0;
    case 5:
      v137 = (_QWORD *)(a2 + 24);
      result = sub_22E4A103C(a1, *(_QWORD *)(a2 + 24 + 8 * *(unsigned int *)(a2 + 16)), 0);
      if (!(_DWORD)result)
        return result;
      v138 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v138)
        return 1;
      v139 = 8 * v138;
      while ((sub_22E4A103C(a1, *v137, 0) & 1) != 0)
      {
        ++v137;
        v139 -= 8;
        if (!v139)
          return 1;
      }
      return 0;
    case 6:
      result = sub_22E4A103C(a1, *(_QWORD *)(a2 + 24), 0);
      if (!(_DWORD)result)
        return result;
      v134 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v134)
        return 1;
      v135 = (_QWORD *)(a2 + 40);
      v136 = 8 * v134;
      while ((sub_22E4A103C(a1, *v135, 0) & 1) != 0)
      {
        ++v135;
        v136 -= 8;
        if (!v136)
          return 1;
      }
      return 0;
    case 0xE:
      v88 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v88)
        return 1;
      v89 = a2 + 24;
      v90 = 8 * v88;
      for (i = (_QWORD *)(a2 + 24); (sub_22E4A103C(a1, *i, 0) & 1) != 0; ++i)
      {
        v90 -= 8;
        if (!v90)
        {
          v92 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v92)
            return 1;
          v93 = 8 * v92;
          for (j = (_QWORD *)(v89 + 8 * v92); (sub_22E4A103C(a1, *j, 0) & 1) != 0; ++j)
          {
            v93 -= 8;
            if (!v93)
            {
              v95 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v95)
                return 1;
              v96 = (_QWORD *)(v89 + 8 * v95 + 8 * v95);
              v97 = 8 * v95;
              while ((sub_22E4A103C(a1, *v96, 0) & 1) != 0)
              {
                ++v96;
                v97 -= 8;
                if (!v97)
                {
                  v98 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v98)
                    return 1;
                  v99 = (_QWORD *)(v89 + 8 * v98 + 8 * v98 + 8 * v98);
                  v100 = 8 * v98;
                  while ((sub_22E4A103C(a1, *v99, 0) & 1) != 0)
                  {
                    ++v99;
                    v100 -= 8;
                    if (!v100)
                      return 1;
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0xF:
      v171 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v171)
        return 1;
      v172 = a2 + 24;
      v173 = 8 * v171;
      for (k = (_QWORD *)(a2 + 24); (sub_22E4A103C(a1, *k, 0) & 1) != 0; ++k)
      {
        v173 -= 8;
        if (!v173)
        {
          v175 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v175)
            return 1;
          v176 = 8 * v175;
          for (m = (_QWORD *)(v172 + 8 * v175); (sub_22E4A103C(a1, *m, 0) & 1) != 0; ++m)
          {
            v176 -= 8;
            if (!v176)
            {
              v178 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v178)
                return 1;
              v179 = (_QWORD *)(v172 + 8 * v178 + 8 * v178);
              v180 = 8 * v178;
              while ((sub_22E4A103C(a1, *v179, 0) & 1) != 0)
              {
                ++v179;
                v180 -= 8;
                if (!v180)
                {
                  v181 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v181)
                    return 1;
                  v182 = (_QWORD *)(v172 + 8 * v181 + 8 * v181 + 8 * v181);
                  v183 = 8 * v181;
                  while ((sub_22E4A103C(a1, *v182, 0) & 1) != 0)
                  {
                    ++v182;
                    v183 -= 8;
                    if (!v183)
                      return 1;
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x12:
      v184 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v184)
        return 1;
      v185 = (_QWORD *)(a2 + 40);
      v186 = 8 * v184;
      while ((sub_22E4A103C(a1, *v185, 0) & 1) != 0)
      {
        ++v185;
        v186 -= 8;
        if (!v186)
          return 1;
      }
      return 0;
    case 0x14:
    case 0x58:
      v5 = *(_QWORD *)(a2 + 24);
      return (sub_22E4A103C(a1, v5, 0) & 1) != 0;
    case 0x16:
      result = sub_22E4A103C(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 40);
      return (sub_22E4A103C(a1, v5, 0) & 1) != 0;
    case 0x18:
      result = sub_22E4A103C(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 48);
      return (sub_22E4A103C(a1, v5, 0) & 1) != 0;
    case 0x1A:
      v193 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v193)
        return 1;
      v194 = (_QWORD *)(a2 + 24);
      v195 = 8 * v193;
      while ((sub_22E4A103C(a1, *v194, 0) & 1) != 0)
      {
        ++v194;
        v195 -= 8;
        if (!v195)
          return 1;
      }
      return 0;
    case 0x1B:
    case 0x1C:
    case 0x21:
    case 0x24:
    case 0x34:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3E:
    case 0x4E:
      result = sub_22E4A103C(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 32);
      return (sub_22E4A103C(a1, v5, 0) & 1) != 0;
    case 0x1D:
      v40 = a2 + 40;
      v41 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v41)
        goto LABEL_72;
      v42 = 8 * v41;
      v43 = (_QWORD *)(a2 + 40);
      while ((sub_22E4A103C(a1, *v43, 0) & 1) != 0)
      {
        ++v43;
        v42 -= 8;
        if (!v42)
        {
LABEL_72:
          result = sub_22E4A103C(a1, *(_QWORD *)(a2 + 24), 0);
          if (!(_DWORD)result)
            return result;
          v44 = *(unsigned int *)(a2 + 16);
          if ((_DWORD)v44)
          {
            v45 = 8 * v44;
            for (n = (_QWORD *)(v40 + 8 * v44); (sub_22E4A103C(a1, *n, 0) & 1) != 0; ++n)
            {
              v45 -= 8;
              if (!v45)
              {
                v47 = *(unsigned int *)(a2 + 16);
                if (!(_DWORD)v47)
                  return 1;
                v48 = (_QWORD *)(v40 + 8 * v47 + 8 * v47);
                v49 = 8 * v47;
                while ((sub_22E4A103C(a1, *v48, 0) & 1) != 0)
                {
                  ++v48;
                  v49 -= 8;
                  if (!v49)
                    return 1;
                }
                return 0;
              }
            }
            return 0;
          }
          return 1;
        }
      }
      return 0;
    case 0x1E:
      v82 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v82)
        return 1;
      v83 = (_QWORD *)(a2 + 24);
      v84 = 8 * v82;
      while ((sub_22E4A103C(a1, *v83, 0) & 1) != 0)
      {
        ++v83;
        v84 -= 8;
        if (!v84)
          return 1;
      }
      return 0;
    case 0x1F:
      v187 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v187)
        return 1;
      v188 = (_QWORD *)(a2 + 104);
      v189 = 8 * v187;
      while ((sub_22E4A103C(a1, *v188, 0) & 1) != 0)
      {
        ++v188;
        v189 -= 8;
        if (!v189)
          return 1;
      }
      return 0;
    case 0x22:
      v199 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v199)
        return 1;
      v200 = (_QWORD *)(a2 + 80);
      v201 = 8 * v199;
      while ((sub_22E4A103C(a1, *v200, 0) & 1) != 0)
      {
        ++v200;
        v201 -= 8;
        if (!v201)
          return 1;
      }
      return 0;
    case 0x25:
      if (!sub_22E4B0B2C(a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64)))
        return 0;
      v208 = *(_OWORD *)(a2 + 72);
      v209 = *(_QWORD *)(a2 + 88);
      if (!sub_22E4B0BB4((uint64_t)a1, (uint64_t *)&v208))
        return 0;
      v56 = a2 + 96;
      v57 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v57)
        goto LABEL_98;
      v58 = 8 * v57;
      v59 = (_QWORD *)(a2 + 96);
      while ((sub_22E4A103C(a1, *v59, 0) & 1) != 0)
      {
        ++v59;
        v58 -= 8;
        if (!v58)
        {
LABEL_98:
          if (sub_22E4A103C(a1, *(_QWORD *)(a2 + 24), 0)
            && sub_22E4A103C(a1, *(_QWORD *)(a2 + 40), 0))
          {
            v60 = *(unsigned int *)(a2 + 16);
            if (!(_DWORD)v60)
              return 1;
            v61 = 8 * v60;
            for (ii = (_QWORD *)(v56 + 8 * v60); (sub_22E4A103C(a1, *ii, 0) & 1) != 0; ++ii)
            {
              v61 -= 8;
              if (!v61)
              {
                v63 = *(unsigned int *)(a2 + 16);
                if (!(_DWORD)v63)
                  return 1;
                v64 = (_QWORD *)(v56 + 8 * v63 + 8 * v63);
                v65 = 8 * v63;
                while ((sub_22E4A103C(a1, *v64, 0) & 1) != 0)
                {
                  ++v64;
                  v65 -= 8;
                  if (!v65)
                  {
                    v66 = *(unsigned int *)(a2 + 16);
                    if (!(_DWORD)v66)
                      return 1;
                    v67 = (_QWORD *)(v56 + 8 * v66 + 8 * v66 + 8 * v66);
                    v68 = 8 * v66;
                    while ((sub_22E4A103C(a1, *v67, 0) & 1) != 0)
                    {
                      ++v67;
                      v68 -= 8;
                      if (!v68)
                      {
                        v69 = *(unsigned int *)(a2 + 16);
                        if (!(_DWORD)v69)
                          return 1;
                        v70 = (_QWORD *)(v56 + 8 * v69 + 8 * v69 + 8 * v69 + 8 * v69);
                        v71 = 8 * v69;
                        while ((sub_22E4A103C(a1, *v70, 0) & 1) != 0)
                        {
                          ++v70;
                          v71 -= 8;
                          if (!v71)
                          {
                            v72 = *(unsigned int *)(a2 + 16);
                            if (!(_DWORD)v72)
                              return 1;
                            v73 = (_QWORD *)(v56 + 8 * v72 + 8 * v72 + 8 * v72 + 8 * v72 + 8 * v72);
                            v74 = 8 * v72;
                            while ((sub_22E4A103C(a1, *v73, 0) & 1) != 0)
                            {
                              ++v73;
                              v74 -= 8;
                              if (!v74)
                                return 1;
                            }
                            return 0;
                          }
                        }
                        return 0;
                      }
                    }
                    return 0;
                  }
                }
                return 0;
              }
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x27:
      v168 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v168)
        return 1;
      v169 = (_QWORD *)(a2 + 24);
      v170 = 8 * v168;
      while ((sub_22E4A103C(a1, *v169, 0) & 1) != 0)
      {
        ++v169;
        v170 -= 8;
        if (!v170)
          return 1;
      }
      return 0;
    case 0x29:
      v53 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v53)
        return 1;
      v54 = (_QWORD *)(a2 + 32);
      v55 = 8 * v53;
      while ((sub_22E4A103C(a1, *v54, 0) & 1) != 0)
      {
        ++v54;
        v55 -= 8;
        if (!v55)
          return 1;
      }
      return 0;
    case 0x2A:
      v50 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v50)
        return 1;
      v51 = (_QWORD *)(a2 + 80);
      v52 = 8 * v50;
      while ((sub_22E4A103C(a1, *v51, 0) & 1) != 0)
      {
        ++v51;
        v52 -= 8;
        if (!v52)
          return 1;
      }
      return 0;
    case 0x2B:
      v101 = a2 + 64;
      v102 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v102)
        goto LABEL_164;
      v103 = 8 * v102;
      v104 = (_QWORD *)(a2 + 64);
      while ((sub_22E4A103C(a1, *v104, 0) & 1) != 0)
      {
        ++v104;
        v103 -= 8;
        if (!v103)
        {
LABEL_164:
          result = sub_22E4A103C(a1, *(_QWORD *)(a2 + 24), 0);
          if (!(_DWORD)result)
            return result;
          result = sub_22E4A103C(a1, *(_QWORD *)(a2 + 40), 0);
          if (!(_DWORD)result)
            return result;
          v105 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v105)
            return 1;
          v106 = 8 * v105;
          for (jj = (_QWORD *)(v101 + 8 * v105); (sub_22E4A103C(a1, *jj, 0) & 1) != 0; ++jj)
          {
            v106 -= 8;
            if (!v106)
            {
              v108 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v108)
                return 1;
              v109 = (_QWORD *)(v101 + 8 * v108 + 8 * v108);
              v110 = 8 * v108;
              while ((sub_22E4A103C(a1, *v109, 0) & 1) != 0)
              {
                ++v109;
                v110 -= 8;
                if (!v110)
                {
                  v111 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v111)
                    return 1;
                  v112 = (_QWORD *)(v101 + 8 * v111 + 8 * v111 + 8 * v111);
                  v113 = 8 * v111;
                  while ((sub_22E4A103C(a1, *v112, 0) & 1) != 0)
                  {
                    ++v112;
                    v113 -= 8;
                    if (!v113)
                    {
                      v114 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v114)
                        return 1;
                      v115 = (_QWORD *)(v101 + 8 * v114 + 8 * v114 + 8 * v114 + 8 * v114);
                      v116 = 8 * v114;
                      while ((sub_22E4A103C(a1, *v115, 0) & 1) != 0)
                      {
                        ++v115;
                        v116 -= 8;
                        if (!v116)
                          return 1;
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x2C:
      v117 = a2 + 64;
      v118 = *(unsigned int *)(a2 + 16);
      result = sub_22E4A103C(a1, *(_QWORD *)(a2 + 64 + 8 * v118 + 8 * v118 + 8 * v118 + 8 * v118 + 8 * v118), 0);
      if (!(_DWORD)result)
        return result;
      result = sub_22E4A103C(a1, *(_QWORD *)(v117+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8), 0);
      if (!(_DWORD)result)
        return result;
      v119 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v119)
        goto LABEL_191;
      v120 = 8 * v119;
      v121 = (_QWORD *)(a2 + 64);
      while ((sub_22E4A103C(a1, *v121, 0) & 1) != 0)
      {
        ++v121;
        v120 -= 8;
        if (!v120)
        {
LABEL_191:
          result = sub_22E4A103C(a1, *(_QWORD *)(a2 + 24), 0);
          if (!(_DWORD)result)
            return result;
          result = sub_22E4A103C(a1, *(_QWORD *)(a2 + 40), 0);
          if (!(_DWORD)result)
            return result;
          v122 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v122)
            return 1;
          v123 = 8 * v122;
          for (kk = (_QWORD *)(v117 + 8 * v122); (sub_22E4A103C(a1, *kk, 0) & 1) != 0; ++kk)
          {
            v123 -= 8;
            if (!v123)
            {
              v125 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v125)
                return 1;
              v126 = (_QWORD *)(v117 + 8 * v125 + 8 * v125);
              v127 = 8 * v125;
              while ((sub_22E4A103C(a1, *v126, 0) & 1) != 0)
              {
                ++v126;
                v127 -= 8;
                if (!v127)
                {
                  v128 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v128)
                    return 1;
                  v129 = (_QWORD *)(v117 + 8 * v128 + 8 * v128 + 8 * v128);
                  v130 = 8 * v128;
                  while ((sub_22E4A103C(a1, *v129, 0) & 1) != 0)
                  {
                    ++v129;
                    v130 -= 8;
                    if (!v130)
                    {
                      v131 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v131)
                        return 1;
                      v132 = (_QWORD *)(v117 + 8 * v131 + 8 * v131 + 8 * v131 + 8 * v131);
                      v133 = 8 * v131;
                      while ((sub_22E4A103C(a1, *v132, 0) & 1) != 0)
                      {
                        ++v132;
                        v133 -= 8;
                        if (!v133)
                          return 1;
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x2E:
      v190 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v190)
        return 1;
      v191 = (_QWORD *)(a2 + 136);
      v192 = 8 * v190;
      while ((sub_22E4A103C(a1, *v191, 0) & 1) != 0)
      {
        ++v191;
        v192 -= 8;
        if (!v192)
          return 1;
      }
      return 0;
    case 0x35:
      v6 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v6)
        return 1;
      v7 = a2 + 24;
      v8 = 8 * v6;
      for (mm = (_QWORD *)(a2 + 24); (sub_22E4A103C(a1, *mm, 0) & 1) != 0; ++mm)
      {
        v8 -= 8;
        if (!v8)
        {
          v10 = *(unsigned int *)(a2 + 16);
          v11 = (uint64_t *)(v7 + 8 * v10);
          v208 = (unint64_t)v11;
          if ((_DWORD)v10)
          {
            v12 = 0;
            v13 = &v11[v10];
            while (1)
            {
              if ((v12 & 3) != 0)
              {
                if ((v12 & 0xFFFFFFFFFFFFFFFCLL) != 0)
                  v14 = (_QWORD *)((v12 & 0xFFFFFFFFFFFFFFFCLL) + 40);
                else
                  v14 = (_QWORD *)sub_22F3AC1A8(*v11);
                if ((sub_22E4A103C(a1, *v14, 0) & 1) == 0)
                  return 0;
                if (v12 < 4)
                  sub_22F3F2FE0((uint64_t)&v208, 1);
                else
                  sub_22F0D8720((uint64_t)&v208);
              }
              else
              {
                if (!sub_22E4A103C(a1, *v11, 0))
                  return 0;
                *(_QWORD *)&v208 = v11 + 1;
              }
              v12 = *((_QWORD *)&v208 + 1);
              v11 = (uint64_t *)v208;
              if ((uint64_t *)v208 == v13 && *((_QWORD *)&v208 + 1) == 0)
                return 1;
            }
          }
          return 1;
        }
      }
      return 0;
    case 0x3F:
      v75 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v75)
        return 1;
      v76 = a2 + 24;
      v77 = 8 * v75;
      for (nn = (_QWORD *)(a2 + 24); (sub_22E4A103C(a1, *nn, 0) & 1) != 0; ++nn)
      {
        v77 -= 8;
        if (!v77)
        {
          v79 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v79)
            return 1;
          v80 = 8 * v79;
          for (i1 = (_QWORD *)(v76 + 8 * v79); (sub_22E4A103C(a1, *i1, 0) & 1) != 0; ++i1)
          {
            v80 -= 8;
            if (!v80)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 0x42:
      if (!sub_22E4B0B2C(a1, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72)))
        return 0;
      v208 = *(_OWORD *)(a2 + 80);
      v209 = *(_QWORD *)(a2 + 96);
      if (!sub_22E4B0BB4((uint64_t)a1, (uint64_t *)&v208))
        return 0;
      v140 = a2 + 104;
      v141 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v141)
        goto LABEL_228;
      v142 = 8 * v141;
      v143 = (_QWORD *)(a2 + 104);
      while ((sub_22E4A103C(a1, *v143, 0) & 1) != 0)
      {
        ++v143;
        v142 -= 8;
        if (!v142)
        {
LABEL_228:
          if (sub_22E4A103C(a1, *(_QWORD *)(a2 + 24), 0)
            && sub_22E4A103C(a1, *(_QWORD *)(a2 + 40), 0))
          {
            v144 = *(unsigned int *)(a2 + 16);
            if ((_DWORD)v144)
            {
              v145 = 8 * v144;
              v146 = (_QWORD *)(v140 + 8 * v144);
              while ((sub_22E4A103C(a1, *v146, 0) & 1) != 0)
              {
                ++v146;
                v145 -= 8;
                if (!v145)
                {
                  v147 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v147)
                    goto LABEL_246;
                  v148 = (_QWORD *)(v140 + 8 * v147 + 8 * v147);
                  v149 = 8 * v147;
                  while ((sub_22E4A103C(a1, *v148, 0) & 1) != 0)
                  {
                    ++v148;
                    v149 -= 8;
                    if (!v149)
                    {
                      v150 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v150)
                        goto LABEL_246;
                      v151 = (_QWORD *)(v140 + 8 * v150 + 8 * v150 + 8 * v150);
                      v152 = 8 * v150;
                      while ((sub_22E4A103C(a1, *v151, 0) & 1) != 0)
                      {
                        ++v151;
                        v152 -= 8;
                        if (!v152)
                        {
                          v153 = *(unsigned int *)(a2 + 16);
                          if (!(_DWORD)v153)
                            goto LABEL_246;
                          v154 = (_QWORD *)(v140 + 8 * v153 + 8 * v153 + 8 * v153 + 8 * v153);
                          v155 = 8 * v153;
                          while ((sub_22E4A103C(a1, *v154, 0) & 1) != 0)
                          {
                            ++v154;
                            v155 -= 8;
                            if (!v155)
                              goto LABEL_246;
                          }
                          return 0;
                        }
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
            }
            else
            {
LABEL_246:
              if (*(_DWORD *)(a2 + 48) != 1)
                return 1;
              v156 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v156)
                return 1;
              v157 = (_QWORD *)(v140 + 8 * v156 + 8 * v156 + 8 * v156 + 8 * v156 + 8 * v156);
              v158 = 8 * v156;
              while ((sub_22E4A103C(a1, *v157, 0) & 1) != 0)
              {
                ++v157;
                v158 -= 8;
                if (!v158)
                {
                  v159 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v159)
                    return 1;
                  v160 = (_QWORD *)(v140 + 8 * v159 + 8 * v159 + 8 * v159 + 8 * v159 + 8 * v159 + 8 * v159);
                  v161 = 8 * v159;
                  while ((sub_22E4A103C(a1, *v160, 0) & 1) != 0)
                  {
                    ++v160;
                    v161 -= 8;
                    if (!v161)
                    {
                      v162 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v162)
                        return 1;
                      v163 = (_QWORD *)(v140 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162);
                      v164 = 8 * v162;
                      while ((sub_22E4A103C(a1, *v163, 0) & 1) != 0)
                      {
                        ++v163;
                        v164 -= 8;
                        if (!v164)
                          return 1;
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x47:
      result = sub_22E4A103C(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 64);
      return (sub_22E4A103C(a1, v5, 0) & 1) != 0;
    case 0x49:
      v202 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v202)
        return 1;
      v203 = (_QWORD *)(a2 + 24);
      v204 = 8 * v202;
      while ((sub_22E4A103C(a1, *v203, 0) & 1) != 0)
      {
        ++v203;
        v204 -= 8;
        if (!v204)
          return 1;
      }
      return 0;
    case 0x4C:
      v165 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v165)
        return 1;
      v166 = (_QWORD *)(a2 + 24);
      v167 = 8 * v165;
      while ((sub_22E4A103C(a1, *v166, 0) & 1) != 0)
      {
        ++v166;
        v167 -= 8;
        if (!v167)
          return 1;
      }
      return 0;
    case 0x4D:
      if (!sub_22E4B0B2C(a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64)))
        return 0;
      v208 = *(_OWORD *)(a2 + 72);
      v209 = *(_QWORD *)(a2 + 88);
      if (!sub_22E4B0BB4((uint64_t)a1, (uint64_t *)&v208))
        return 0;
      v24 = a2 + 96;
      v25 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v25)
        goto LABEL_49;
      v26 = 8 * v25;
      v27 = (_QWORD *)(a2 + 96);
      while ((sub_22E4A103C(a1, *v27, 0) & 1) != 0)
      {
        ++v27;
        v26 -= 8;
        if (!v26)
        {
LABEL_49:
          if (sub_22E4A103C(a1, *(_QWORD *)(a2 + 24), 0)
            && sub_22E4A103C(a1, *(_QWORD *)(a2 + 40), 0))
          {
            v28 = *(unsigned int *)(a2 + 16);
            if (!(_DWORD)v28)
              return 1;
            v29 = 8 * v28;
            for (i2 = (_QWORD *)(v24 + 8 * v28); (sub_22E4A103C(a1, *i2, 0) & 1) != 0; ++i2)
            {
              v29 -= 8;
              if (!v29)
              {
                v31 = *(unsigned int *)(a2 + 16);
                if (!(_DWORD)v31)
                  return 1;
                v32 = (_QWORD *)(v24 + 8 * v31 + 8 * v31);
                v33 = 8 * v31;
                while ((sub_22E4A103C(a1, *v32, 0) & 1) != 0)
                {
                  ++v32;
                  v33 -= 8;
                  if (!v33)
                  {
                    v34 = *(unsigned int *)(a2 + 16);
                    if (!(_DWORD)v34)
                      return 1;
                    v35 = (_QWORD *)(v24 + 8 * v34 + 8 * v34 + 8 * v34);
                    v36 = 8 * v34;
                    while ((sub_22E4A103C(a1, *v35, 0) & 1) != 0)
                    {
                      ++v35;
                      v36 -= 8;
                      if (!v36)
                      {
                        v37 = *(unsigned int *)(a2 + 16);
                        if (!(_DWORD)v37)
                          return 1;
                        v38 = (_QWORD *)(v24 + 8 * v37 + 8 * v37 + 8 * v37 + 8 * v37);
                        v39 = 8 * v37;
                        while ((sub_22E4A103C(a1, *v38, 0) & 1) != 0)
                        {
                          ++v38;
                          v39 -= 8;
                          if (!v39)
                            return 1;
                        }
                        return 0;
                      }
                    }
                    return 0;
                  }
                }
                return 0;
              }
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x51:
      v16 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v16)
        return 1;
      v17 = (_QWORD *)(a2 + 104);
      v18 = 8 * v16;
      while ((sub_22E4A103C(a1, *v17, 0) & 1) != 0)
      {
        ++v17;
        v18 -= 8;
        if (!v18)
          return 1;
      }
      return 0;
    case 0x59:
      v205 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v205)
        return 1;
      v206 = (_QWORD *)(a2 + 80);
      v207 = 8 * v205;
      while ((sub_22E4A103C(a1, *v206, 0) & 1) != 0)
      {
        ++v206;
        v207 -= 8;
        if (!v207)
          return 1;
      }
      return 0;
    case 0x5A:
      v196 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v196)
        return 1;
      v197 = (_QWORD *)(a2 + 80);
      v198 = 8 * v196;
      while ((sub_22E4A103C(a1, *v197, 0) & 1) != 0)
      {
        ++v197;
        v198 -= 8;
        if (!v198)
          return 1;
      }
      return 0;
    case 0x5B:
      v19 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v19)
        return 1;
      v20 = 0;
      v21 = a2 + 24;
      v22 = 2 * v19;
      break;
    default:
      return 1;
  }
  while (1)
  {
    v23 = *(_QWORD *)(v21 + 8 * (v20 + 1));
    result = sub_22E4A103C(a1, *(_QWORD *)(v21 + 8 * v20), 0);
    if (!(_DWORD)result)
      break;
    if ((sub_22E4A103C(a1, v23, 0) & 1) == 0)
      return 0;
    v20 += 2;
    if (v22 == v20)
      return 1;
  }
  return result;
}

uint64_t sub_22E4C6154(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v9;
  _QWORD *v10;
  uint64_t result;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;

  if (!a2)
    return 1;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4 == v3)
    v5 = 0;
  else
    v5 = *(uint64_t **)(a2 + 24);
  if (v4 == v3)
    v6 = 0;
  else
    v6 = *(uint64_t **)(a2 + 16);
  v14 = 0;
  v15 = 0;
  v13 = v6;
  if (v6 == v5)
    return 1;
  v9 = 0;
  while (1)
  {
    if ((v9 & 3) == 0)
    {
      result = sub_22E4A103C(a1, *v6, a3);
      if (!(_DWORD)result)
        return result;
      v13 = v6 + 1;
      goto LABEL_18;
    }
    v10 = (_QWORD *)((v9 & 0xFFFFFFFFFFFFFFFCLL) != 0 ? (v9 & 0xFFFFFFFFFFFFFFFCLL) + 40 : sub_22F3AC1A8(*v6));
    if ((sub_22E4A103C(a1, *v10, a3) & 1) == 0)
      return 0;
    if (v9 < 4)
      sub_22F3F2FE0((uint64_t)&v13, 1);
    else
      sub_22F0D8720((uint64_t)&v13);
LABEL_18:
    v6 = v13;
    v9 = v14;
    if (v13 == v5 && v14 == 0)
      return 1;
  }
}

void sub_22E4C624C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_22E49000C(a2, *(_QWORD *)a1, **(_QWORD **)(a1 + 8), 1);
}

void sub_22E4C6260(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_22E49000C(a2, *(_QWORD *)a1, **(_QWORD **)(a1 + 8), 1);
}

void sub_22E4C6274(uint64_t a1, unint64_t a2)
{
  unsigned int v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = *(_DWORD *)(a2 + 28) & 0x7F;
  if (v4 <= 0x20)
  {
    if (v4 == 13)
    {
      if (!*(_BYTE *)(a1 + 2892))
      {
        v21 = *(_QWORD *)(a1 + 2880);
        if (v21)
          sub_22E49E6C0(v21, a2);
      }
    }
    else if (v4 == 14)
    {
      if (!*(_BYTE *)(a1 + 2892))
      {
        v22 = *(_QWORD *)(a1 + 2880);
        if (v22)
          sub_22F2579F4(v22, a2);
      }
    }
    else if (v4 == 17 && !*(_BYTE *)(a1 + 2892))
    {
      v7 = *(_QWORD *)(a1 + 2880);
      if (v7)
        sub_22E49E7E4(v7, a2);
    }
  }
  else if ((*(_DWORD *)(a2 + 28) & 0x7Fu) > 0x3B)
  {
    if (v4 - 60 >= 2)
    {
      if (v4 == 70)
      {
        sub_22F259678(*(_QWORD *)(a1 + 144), a2);
      }
      else if (v4 == 71)
      {
        sub_22F259604(*(_QWORD *)(a1 + 144), a2, a1);
      }
    }
    else
    {
      sub_22E4C652C((_QWORD *)a1, a2);
      if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x3D)
      {
        v8 = *(unsigned int *)(a2 + 100);
        if ((_DWORD)v8)
        {
          v9 = a2 + 104;
          v10 = 8 * v8;
          do
          {
            v11 = *(unsigned __int8 **)(*(_QWORD *)v9 + 64);
            if (v11)
            {
              v12 = sub_22EFFED0C(v11);
              if (*v12 == 161)
              {
                v13 = *((_QWORD *)v12 + 2);
                if (v13)
                  sub_22E4C652C((_QWORD *)a1, v13);
              }
            }
            v9 += 8;
            v10 -= 8;
          }
          while (v10);
        }
      }
    }
  }
  else
  {
    switch(v4)
    {
      case '!':
        if (!*(_BYTE *)(a1 + 2892))
        {
          v5 = *(uint64_t **)(a1 + 2880);
          if (v5)
          {
            if (sub_22EFC3500(a2))
            {
              v6 = sub_22EF64864(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), a2);
              goto LABEL_33;
            }
          }
        }
        break;
      case '"':
      case '#':
        if (!*(_BYTE *)(a1 + 2892))
        {
          v5 = *(uint64_t **)(a1 + 2880);
          if (v5)
          {
            if (sub_22EFC3500(a2))
            {
              v6 = sub_22EF6477C(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), a2);
LABEL_33:
              sub_22E49F030(v5, v6);
            }
          }
        }
        break;
      case '(':
      case ')':
        v14 = *(_QWORD *)((*(_QWORD *)(a2 + 80) & 0xFFFFFFFFFFFFFFF8)
                        + ((2 * *(_QWORD *)(a2 + 80)) & 8));
        if (!*(_BYTE *)(a1 + 2892))
        {
          v15 = *(uint64_t **)(a1 + 2880);
          if (v15)
            sub_22E49F030(v15, v14);
        }
        if ((*(_BYTE *)(*(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0) + 17) & 8) != 0)
          sub_22E61DFC4(a1);
        break;
      case ',':
        if (!*(_BYTE *)(a1 + 2892))
        {
          v16 = *(_QWORD **)(a1 + 2880);
          if (v16)
            sub_22F2577D0(v16, a2);
        }
        break;
      case '-':
        v17 = *(unsigned int *)(a2 + 56);
        if ((_DWORD)v17)
        {
          v18 = (uint64_t *)(a2 + 64);
          v19 = 8 * v17;
          do
          {
            v20 = *v18++;
            sub_22E4C6274(a1, v20);
            v19 -= 8;
          }
          while (v19);
        }
        break;
      default:
        return;
    }
  }
}

void sub_22E4C652C(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  void (*v6)(void);
  uint64_t v7;
  BOOL v8;
  _BYTE v9[96];

  if ((*(_BYTE *)(a2 + 96) & 5) != 1)
  {
    if (sub_22E3CB5E0(a2))
    {
      v4 = *(_QWORD *)((*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v4 & 8) != 0)
      {
        v5 = *(_DWORD *)((v4 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800;
        if (v5 == 24576)
        {
          v6 = *(void (**)(void))(**(_QWORD **)(a1[18] + 800) + 40);
          goto LABEL_15;
        }
        if (v5 == 4096)
        {
          v6 = *(void (**)(void))(**(_QWORD **)(a1[18] + 792) + 24);
LABEL_15:
          v6();
          return;
        }
      }
      sub_22E4C8440((uint64_t)a1, a2, (uint64_t)v9);
      sub_22E4C9320(a1, v9);
      sub_22E4C9A74((uint64_t)a1, (uint64_t)v9);
    }
    else
    {
      v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v7)
        v8 = (*(_DWORD *)(v7 + 16) & 0xFF800FF) == 116391947;
      else
        v8 = 0;
      if (!v8)
      {
        sub_22F29B88C(a1[18], a2, 0);
        sub_22E4C6660((uint64_t)a1, a2);
      }
    }
  }
}

void sub_22E4C6660(uint64_t a1, uint64_t a2)
{
  llvm::Value *v4;
  unint64_t v5;
  uint64_t v6;
  llvm::GlobalValue *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  _QWORD *v42;
  int v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t PointerBitCastOrAddrSpaceCast;
  int v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  _QWORD v51[3];
  _QWORD *v52;
  __int128 v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;

  v4 = sub_22E4C6BBC(*(_QWORD **)(a1 + 144), (_QWORD *)a2);
  v5 = sub_22EF5B404(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), a2, 0);
  v6 = sub_22E66C868(*(_QWORD *)(a1 + 144) + 280, *(_QWORD *)(a2 + 48), 0);
  v52 = (_QWORD *)a2;
  *(_QWORD *)&v53 = v4;
  *((_QWORD *)&v53 + 1) = v6;
  v54 = v5;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  sub_22E3CEC9C(a1 + 2904, &v52, &v53, (uint64_t)v51);
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 8) != 0)
    sub_22E61DFC4(a1);
  v7 = (llvm::GlobalValue *)llvm::Value::stripPointerCasts(v4);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 152);
  v9 = (*(_BYTE *)(v8 + 68) & 0x20) != 0 && (*(_WORD *)(v8 + 96) & 0x80) != 0 && sub_22E469D10(a2);
  if (sub_22EFBC5B4(a2) && !v9)
    v7 = (llvm::GlobalValue *)sub_22F259734(a1, a2, (uint64_t)v7);
  llvm::GlobalObject::setAlignment();
  if (sub_22E4C7444(a2))
    sub_22F29A604(*(_QWORD *)(a1 + 144), a2, v7);
  if ((*(_BYTE *)(a2 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a2);
    v11 = *(uint64_t **)v10;
    v12 = *(unsigned int *)(v10 + 8);
    v13 = *(uint64_t **)v10;
    if ((_DWORD)v12)
    {
      v15 = 8 * v12;
      v13 = *(uint64_t **)v10;
      while (*(_WORD *)(*v13 + 32) != 281)
      {
        ++v13;
        v15 -= 8;
        if (!v15)
          goto LABEL_20;
      }
    }
    if (v13 != &v11[v12])
    {
      do
        v14 = *v11++;
      while (*(_WORD *)(v14 + 32) != 281);
      llvm::Value::getContext(v7);
      *((_QWORD *)v7 + 9) = llvm::AttributeSet::addAttribute();
    }
  }
LABEL_20:
  if ((*(_BYTE *)(a2 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a2);
    v17 = *(uint64_t **)v16;
    v18 = *(unsigned int *)(v16 + 8);
    v19 = *(uint64_t **)v16;
    if ((_DWORD)v18)
    {
      v21 = 8 * v18;
      v19 = *(uint64_t **)v16;
      while (*(_WORD *)(*v19 + 32) != 282)
      {
        ++v19;
        v21 -= 8;
        if (!v21)
          goto LABEL_28;
      }
    }
    if (v19 != &v17[v18])
    {
      do
        v20 = *v17++;
      while (*(_WORD *)(v20 + 32) != 282);
      llvm::Value::getContext(v7);
      *((_QWORD *)v7 + 9) = llvm::AttributeSet::addAttribute();
    }
  }
LABEL_28:
  if ((*(_BYTE *)(a2 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a2);
    v23 = *(uint64_t **)v22;
    v24 = *(unsigned int *)(v22 + 8);
    v25 = *(uint64_t **)v22;
    if ((_DWORD)v24)
    {
      v27 = 8 * v24;
      v25 = *(uint64_t **)v22;
      while (*(_WORD *)(*v25 + 32) != 284)
      {
        ++v25;
        v27 -= 8;
        if (!v27)
          goto LABEL_36;
      }
    }
    if (v25 != &v23[v24])
    {
      do
        v26 = *v23++;
      while (*(_WORD *)(v26 + 32) != 284);
      llvm::Value::getContext(v7);
      *((_QWORD *)v7 + 9) = llvm::AttributeSet::addAttribute();
    }
  }
LABEL_36:
  if ((*(_BYTE *)(a2 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a2);
    v29 = *(uint64_t **)v28;
    v30 = *(unsigned int *)(v28 + 8);
    v31 = *(uint64_t **)v28;
    if ((_DWORD)v30)
    {
      v33 = 8 * v30;
      v31 = *(uint64_t **)v28;
      while (*(_WORD *)(*v31 + 32) != 283)
      {
        ++v31;
        v33 -= 8;
        if (!v33)
          goto LABEL_44;
      }
    }
    if (v31 != &v29[v30])
    {
      do
        v32 = *v29++;
      while (*(_WORD *)(v32 + 32) != 283);
      llvm::Value::getContext(v7);
      *((_QWORD *)v7 + 9) = llvm::AttributeSet::addAttribute();
    }
  }
LABEL_44:
  if ((*(_BYTE *)(a2 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a2);
    v35 = *(uint64_t **)v34;
    v36 = *(unsigned int *)(v34 + 8);
    v37 = *(uint64_t **)v34;
    if ((_DWORD)v36)
    {
      v39 = 8 * v36;
      v37 = *(uint64_t **)v34;
      while (*(_WORD *)(*v37 + 32) != 305)
      {
        ++v37;
        v39 -= 8;
        if (!v39)
          goto LABEL_52;
      }
    }
    if (v37 != &v35[v36])
    {
      do
        v38 = *v35++;
      while (*(_WORD *)(v38 + 32) != 305);
      llvm::GlobalObject::setSection();
    }
  }
LABEL_52:
  if (sub_22E4C74A4(a2))
  {
    v40 = *(_QWORD *)(a1 + 144);
    v52 = v7;
    v41 = (uint64_t *)(v40 + 1416);
  }
  else
  {
    if (!sub_22E4671B0(a2))
      goto LABEL_59;
    v42 = *(_QWORD **)(a1 + 144);
    v52 = v7;
    v43 = *(_DWORD *)(v42[27] + 76);
    v44 = v42 + 177;
    v45 = v42 + 180;
    if (v43 == 3)
      v41 = v45;
    else
      v41 = v44;
  }
  sub_22E62C508(v41, (uint64_t *)&v52);
LABEL_59:
  PointerBitCastOrAddrSpaceCast = llvm::ConstantExpr::getPointerBitCastOrAddrSpaceCast();
  v51[0] = a2;
  v52 = 0;
  v47 = sub_22E3CED3C((uint64_t *)(a1 + 2904), v51, &v52);
  v48 = (uint64_t)v52;
  if (!v47)
    v48 = *(_QWORD *)(a1 + 2904) + 56 * *(unsigned int *)(a1 + 2920);
  *(_QWORD *)(v48 + 8) = PointerBitCastOrAddrSpaceCast;
  *(_QWORD *)(v48 + 16) = v6;
  *(_QWORD *)(v48 + 24) = v5;
  *(_DWORD *)(v48 + 32) = 0;
  *(_QWORD *)(v48 + 40) = 0;
  *(_QWORD *)(v48 + 48) = 0;
  v49 = (uint64_t *)(*(_QWORD *)(a1 + 144) + 1864);
  v52 = (_QWORD *)a2;
  sub_22F25AD1C(v49, &v52)[1] = PointerBitCastOrAddrSpaceCast;
  sub_22E697DB4(*(uint64_t **)(*(_QWORD *)(a1 + 144) + 3480), v7, a2, 0);
  if (!*(_BYTE *)(a1 + 2892))
  {
    v50 = *(_QWORD *)(a1 + 2880);
    if (v50)
    {
      if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 184) + 96) & 0x1800000000000000) != 0)
      {
        sub_22E48F304(*(_QWORD *)(a1 + 2880), *(_DWORD *)(a2 + 24));
        sub_22E49DBF0(v50, (uint64_t)v7, (uint64_t *)a2);
      }
    }
  }
}

llvm::Value *sub_22E4C6BBC(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v4;
  llvm::Value *v5;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  const void *v10;
  std::string::size_type v11;
  std::string *p_dst;
  uint64_t v13;
  unint64_t v14;
  __int16 v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::string::size_type v23;
  unint64_t v24;
  const void *v25;
  std::string::size_type v26;
  std::string *v27;
  std::string::size_type v28;
  const void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  std::string *v33;
  std::string::size_type v34;
  std::string *v35;
  std::string::size_type size;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  unint64_t v55;
  uint64_t v56;
  unsigned int v57;
  std::string __dst;
  __int16 v59;
  std::string v60;
  void *__p[2];
  std::string::size_type v62;
  std::string v63;

  v4 = a1 + 233;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  v5 = (llvm::Value *)sub_22F25AD1C(a1 + 233, &__dst)[1];
  if (v5)
    return v5;
  v7 = a2[6];
  __p[0] = 0;
  __p[1] = 0;
  v62 = 0;
  if (sub_22E3D1740((uint64_t)a2))
  {
    v8 = sub_22E624994((uint64_t)a1, (uint64_t)a2, 0);
    if (v9 <= 0x7FFFFFFFFFFFFFF7)
    {
      v10 = v8;
      v11 = v9;
      if (v9 >= 0x17)
      {
        v21 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v9 | 7) != 0x17)
          v21 = v9 | 7;
        v22 = v21 + 1;
        p_dst = (std::string *)operator new(v21 + 1);
        __dst.__r_.__value_.__l.__size_ = v11;
        __dst.__r_.__value_.__r.__words[2] = v22 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v9;
        p_dst = &__dst;
        if (!v9)
          goto LABEL_23;
      }
      memmove(p_dst, v10, v11);
LABEL_23:
      p_dst->__r_.__value_.__s.__data_[v11] = 0;
      if (SHIBYTE(v62) < 0)
        operator delete(__p[0]);
      *(_OWORD *)__p = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
      v23 = __dst.__r_.__value_.__r.__words[2];
      goto LABEL_61;
    }
LABEL_111:
    abort();
  }
  if ((*(_BYTE *)(a1[19] + 1) & 1) == 0)
  {
    memset(&v60, 0, sizeof(v60));
    v13 = a2[2];
    v14 = v13 & 0xFFFFFFFFFFFFFFF8;
    if ((v13 & 4) != 0)
      v14 = *(_QWORD *)v14;
    v15 = *(_WORD *)(v14 + 8);
    if (v14 && (v15 & 0x7F) == 2)
    {
      v16 = sub_22EFCB24C(v14 - 40);
      v14 = sub_22EFCAE04(v16);
      v15 = *(_WORD *)(v14 + 8);
    }
    if ((v15 & 0x7Eu) - 58 >= 0xFFFFFFFA)
    {
      v24 = v14 - 72;
      if (sub_22E462B18(v14 - 72))
        v24 = v24 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(v24) + 96) & 0x80) == 0);
      v17 = (uint64_t)sub_22E624994((uint64_t)a1, v24, 0);
    }
    else
    {
      if ((v15 & 0x7F) != 1)
      {
        v63.__r_.__value_.__r.__words[0] = *(_QWORD *)(v14 - 8);
        sub_22F1D3A38((uint64_t *)&v63, (char *)&__dst);
        goto LABEL_43;
      }
      v17 = sub_22F2996A8(a1, 0, 0, v14 - 40);
    }
    if (v18 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_111;
    v25 = (const void *)v17;
    v26 = v18;
    if (v18 >= 0x17)
    {
      v31 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v18 | 7) != 0x17)
        v31 = v18 | 7;
      v32 = v31 + 1;
      v27 = (std::string *)operator new(v31 + 1);
      __dst.__r_.__value_.__l.__size_ = v26;
      __dst.__r_.__value_.__r.__words[2] = v32 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v18;
      v27 = &__dst;
      if (!v18)
        goto LABEL_41;
    }
    memmove(v27, v25, v26);
LABEL_41:
    v27->__r_.__value_.__s.__data_[v26] = 0;
LABEL_43:
    v60 = __dst;
    sub_22EFC683C(a2 + 5, &v63);
    v33 = std::string::insert(&v63, 0, ".");
    v34 = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v35 = &__dst;
    else
      v35 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
    else
      size = __dst.__r_.__value_.__l.__size_;
    std::string::append(&v60, (const std::string::value_type *)v35, size);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v63.__r_.__value_.__l.__data_);
    goto LABEL_58;
  }
  v19 = sub_22E624994((uint64_t)a1, (uint64_t)a2, 0);
  if (v19)
  {
    v28 = v20;
    if (v20 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_111;
    v29 = v19;
    if (v20 >= 0x17)
    {
      v37 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17)
        v37 = v20 | 7;
      v38 = v37 + 1;
      v30 = operator new(v37 + 1);
      v60.__r_.__value_.__l.__size_ = v28;
      v60.__r_.__value_.__r.__words[2] = v38 | 0x8000000000000000;
      v60.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
    }
    else
    {
      *((_BYTE *)&v60.__r_.__value_.__s + 23) = v20;
      v30 = &v60;
      if (!v20)
        goto LABEL_57;
    }
    memmove(v30, v29, v28);
LABEL_57:
    *((_BYTE *)v30 + v28) = 0;
    goto LABEL_58;
  }
  memset(&v60, 0, sizeof(v60));
LABEL_58:
  if (SHIBYTE(v62) < 0)
    operator delete(__p[0]);
  *(_OWORD *)__p = *(_OWORD *)&v60.__r_.__value_.__l.__data_;
  v23 = v60.__r_.__value_.__r.__words[2];
LABEL_61:
  v62 = v23;
  sub_22E66C868((uint64_t)(a1 + 35), v7, 0);
  v57 = sub_22E633E44((uint64_t)a1, (uint64_t)a2);
  v39 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v39 & 8) != 0
    && ((v40 = *(_DWORD *)((v39 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800, v40 == 4096) || v40 == 24576)
    || sub_22E469D10((uint64_t)a2)
    || sub_22E4C7388((uint64_t)a2))
  {
    v41 = v7;
    llvm::UndefValue::get();
  }
  else
  {
    v41 = v7;
    sub_22E507208(a1, v7);
  }
  v5 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x58);
  sub_22F10AFE4(v41, a1[18]);
  v59 = 260;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  llvm::GlobalVariable::GlobalVariable();
  sub_22EF5B404(a1[18], (unint64_t)a2, 0);
  llvm::GlobalObject::setAlignment();
  v42 = *(_DWORD *)(a1[27] + 76);
  if ((v42 - 8) >= 2
    && v42 != 5
    && (*((_DWORD *)v5 + 8) & 0xFu) <= 0xA
    && ((1 << (*((_DWORD *)v5 + 8) & 0xF)) & 0x63C) != 0)
  {
    llvm::Value::getName(v5);
    llvm::Module::getOrInsertComdat();
    llvm::GlobalObject::setComdat();
  }
  sub_22EFBB794((uint64_t)a2);
  if (v43)
    sub_22E628BA0((uint64_t)a1, (uint64_t)v5, (uint64_t)a2);
  sub_22F29966C((uint64_t)a1, (unsigned int *)v5, (uint64_t)a2);
  v44 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v44 & 8) != 0)
  {
    v47 = *(_DWORD *)((v44 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    if (v57 == v47 >> 11)
      goto LABEL_76;
    v46 = v47 >> 11;
    v45 = sub_22E699F3C(a1);
  }
  else
  {
    if (!v57)
      goto LABEL_76;
    v45 = sub_22E699F3C(a1);
    v46 = 0;
  }
  v48 = llvm::PointerType::get();
  v5 = (llvm::Value *)(*(uint64_t (**)(uint64_t, _QWORD *, llvm::Value *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v45 + 224))(v45, a1, v5, v57, v46, v48);
LABEL_76:
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  sub_22F25AD1C(v4, &__dst)[1] = v5;
  v49 = a2[2];
  v50 = v49 & 0xFFFFFFFFFFFFFFF8;
  if ((v49 & 4) != 0)
    v50 = *(_QWORD *)v50;
  v51 = *(_WORD *)(v50 + 8) & 0x7F;
  v52 = -40;
  if (v51 <= 0x46)
  {
    if (v51 <= 0x18)
    {
      if (v51 == 16)
      {
LABEL_81:
        v52 = -48;
        goto LABEL_94;
      }
      if (((1 << v51) & 0x1066) != 0)
        goto LABEL_94;
      if (v51 == 24)
        goto LABEL_81;
    }
    if (v51 == 70)
    {
LABEL_92:
      v52 = -64;
      goto LABEL_94;
    }
    goto LABEL_90;
  }
  if (v51 == 83)
    goto LABEL_94;
  if (v51 == 71)
  {
    v52 = -56;
    goto LABEL_94;
  }
  if (v51 != 81)
  {
LABEL_90:
    if (v51 - 52 >= 6)
    {
      if (v51 - 33 >= 5)
        goto LABEL_81;
      goto LABEL_92;
    }
    v52 = -72;
  }
LABEL_94:
  v53 = v50 + v52;
  v54 = *(_DWORD *)(v50 + v52 + 28);
  if ((v54 & 0x7Fu) - 1 <= 1)
  {
    v55 = sub_22EFCB24C(v53);
    if (!v55)
      goto LABEL_107;
    v53 = v55;
    v54 = *(_DWORD *)(v55 + 28);
  }
  if ((v54 & 0x7F) == 0x39)
  {
    v53 = v53 & 0xFFFFFFFFFFFFFFF8 | 2;
LABEL_101:
    if (v53 >= 8)
    {
      if ((*(_BYTE *)(a1[19] + 76) & 8) != 0)
      {
        v56 = a1[101];
        LOBYTE(v4) = *(_BYTE *)(v56 + 2944);
        *(_BYTE *)(v56 + 2944) = 0;
      }
      sub_22E6280CC((uint64_t)a1, v53, 0, 0);
      if ((*(_BYTE *)(a1[19] + 76) & 8) != 0)
        *(_BYTE *)(a1[101] + 2944) = (_BYTE)v4;
    }
    goto LABEL_107;
  }
  if ((v54 & 0x7F) == 0x37)
  {
    v53 = v53 & 0xFFFFFFFFFFFFFFF8 | 1;
    goto LABEL_101;
  }
  if ((v54 & 0x7Eu) - 58 >= 0xFFFFFFFA)
  {
    if (sub_22E462B18(v53))
      v53 = v53 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(v53) + 96) & 0x80) == 0);
    goto LABEL_101;
  }
LABEL_107:
  if (SHIBYTE(v62) < 0)
    operator delete(__p[0]);
  return v5;
}

BOOL sub_22E4C7388(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 368)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22E4C73E8(uint64_t this, char a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;

  v2 = this;
  v3 = *(_DWORD *)(this + 32) & 0xF;
  v4 = *(_DWORD *)(this + 32) & 0xFFFFFFCF | (16 * (a2 & 3));
  *(_DWORD *)(this + 32) = v4;
  if ((v3 - 7) < 2)
    goto LABEL_6;
  if (16 * (a2 & 3))
  {
    this = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)this);
    if ((this & 1) == 0)
    {
      v4 = *(_DWORD *)(v2 + 32);
LABEL_6:
      *(_DWORD *)(v2 + 32) = v4 | 0x4000;
    }
  }
  return this;
}

BOOL sub_22E4C7444(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 77)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E4C74A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v2 = *(_QWORD *)v1;
  v3 = *(unsigned int *)(v1 + 8);
  v4 = *(_QWORD *)v1 + 8 * v3;
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    while (*(_WORD *)(*(_QWORD *)v2 + 32) != 298)
    {
      v2 += 8;
      v5 -= 8;
      if (!v5)
      {
        v2 = v4;
        return v2 != v4;
      }
    }
  }
  return v2 != v4;
}

void sub_22E4C7504(uint64_t a1, unint64_t a2, llvm::Type **a3, int a4)
{
  unsigned __int16 v8;
  llvm::Type *v9;
  uint64_t NullValue;
  uint64_t v12;
  llvm::Type **v13;
  uint64_t v14;
  __int128 v15;
  _QWORD v16[4];
  __int16 v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v13 = a3;
  if ((*(_BYTE *)(a1 + 1867) & 8) != 0)
  {
    v8 = sub_22F114DF4(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
    if (v8 >= 0x100u && v8 == 0)
    {
      *(_BYTE *)(a1 + 1880) = 1;
      v17 = 257;
      NullValue = llvm::Constant::getNullValue(*a3, v9);
      v12 = sub_22E3C18F4(a1 + 272, 33, (uint64_t *)a3, NullValue, (uint64_t)v16);
      v16[0] = sub_22E4DE978(a1, a4);
      v16[1] = sub_22F25E758(a1, a2);
      v16[2] = llvm::ConstantInt::get();
      v16[3] = llvm::ConstantInt::get();
      v14 = v12;
      v15 = xmmword_22F457288;
      sub_22E4DEC4C((_QWORD *)a1, (uint64_t)&v14, 1, 0x16u, (uint64_t)v16, 4, &v13, 1);
      *(_BYTE *)(a1 + 1880) = 0;
    }
  }
}

void sub_22E4C7674(uint64_t a1, unsigned __int8 *a2, std::string::size_type a3, uint64_t *a4, uint64_t a5, __n128 a6)
{
  int v6;
  unsigned __int8 *v9;
  _OWORD *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  unsigned int v24;
  llvm::Type **v25;
  unint64_t v26;
  int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  llvm::Type **v44;
  unint64_t v45;
  int v46;
  char v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t *v52;
  _OWORD *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  char v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  uint64_t v60;
  unsigned __int8 *v61;
  unsigned int v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  unsigned int v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int128 *v81;
  __int128 v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  _OWORD v86[8];
  uint64_t v87;
  _OWORD v88[8];
  uint64_t v89;
  _OWORD v90[8];
  uint64_t v91;
  _OWORD v92[3];
  _QWORD v93[3];
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  _OWORD v102[3];
  _OWORD v103[3];
  _QWORD v104[2];
  __int128 v105;
  __int128 v106;
  _OWORD v107[8];
  uint64_t v108;
  _OWORD v109[8];
  uint64_t v110;
  _QWORD v111[6];
  char v112;
  _OWORD v113[2];
  __n128 v114;
  __int128 v115[3];
  __int128 v116;
  __int128 v117;
  __int128 v118;
  _BYTE v119[128];
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;

  v6 = a5;
  v9 = a2;
  v11 = a4 + 9;
  v12 = (*((_DWORD *)a4 + 18) >> 6) & 7;
  if (!v12)
  {
    v24 = *((_DWORD *)a4 + 19);
    if ((v24 & 0xC) != 0)
    {
      v63 = *(_OWORD *)(a4 + 3);
      v113[0] = *(_OWORD *)(a4 + 1);
      v113[1] = v63;
      v114 = *(__n128 *)(a4 + 5);
      v25 = (llvm::Type **)sub_22F289F48(a1, v24, (uint64_t)v9, v113, v114);
      *((_DWORD *)a4 + 19) = 0;
      if (!v6)
        goto LABEL_10;
    }
    else
    {
      *(_QWORD *)v119 = a1;
      *(_QWORD *)&v119[8] = a1 + 272;
      v119[16] = 0;
      *(_QWORD *)&v119[24] = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
      v25 = (llvm::Type **)sub_22E50E974((uint64_t *)v119, v9);
      if (!v6)
      {
LABEL_10:
        v26 = a4[8];
        sub_22EFF605C((uint64_t)v9);
        sub_22E4C7504(a1, v26, v25, v27);
        v111[1] = 0;
        v111[0] = v25;
        v112 = 0;
        v28 = *((_OWORD *)a4 + 6);
        v109[7] = *((_OWORD *)a4 + 7);
        v110 = a4[16];
        v29 = *((_OWORD *)a4 + 3);
        v109[2] = *((_OWORD *)a4 + 2);
        v109[3] = v29;
        v30 = *((_OWORD *)a4 + 4);
        v109[5] = *((_OWORD *)a4 + 5);
        v109[6] = v28;
        v109[4] = v30;
        v31 = *((_OWORD *)a4 + 1);
        v109[0] = *(_OWORD *)a4;
        v109[1] = v31;
        sub_22E4DAAE0(a1, v111, v109, 1, *(double *)&v31);
        return;
      }
    }
    v64 = *(_OWORD *)(a4 + 3);
    v123 = *(_OWORD *)(a4 + 1);
    v124 = v64;
    v125 = *(_OWORD *)(a4 + 5);
    sub_22F2469BC(a1, &v123, a3, 1, (uint64_t)v119);
    v65 = *(_OWORD *)&v119[16];
    *(_OWORD *)(a4 + 1) = *(_OWORD *)v119;
    *(_OWORD *)(a4 + 3) = v65;
    *(_OWORD *)(a4 + 5) = *(_OWORD *)&v119[32];
    goto LABEL_10;
  }
  v13 = *a2;
  if (v13 == 121)
  {
    v14 = *((_QWORD *)a2 + 2);
    v9 = (unsigned __int8 *)(*(_QWORD *)(v14 + 72) & 0xFFFFFFFFFFFFFFFCLL);
    if ((*(_BYTE *)(v14 + 68) & 1) != 0)
      v9 = *(unsigned __int8 **)v9;
    v13 = *v9;
  }
  if (v13 == 173)
  {
    v15 = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000);
    v16 = *(_QWORD *)(a1 + 2312);
    v17 = *(_BYTE *)(a1 + 2893);
    *(_BYTE *)(a1 + 2893) = 0;
    v18 = *(_QWORD *)(a1 + 2872);
    *(_QWORD *)(a1 + 2872) = v15;
    v19 = *((_QWORD *)v9 + 2);
    v20 = *((_OWORD *)a4 + 3);
    v107[2] = *((_OWORD *)a4 + 2);
    v107[3] = v20;
    v108 = a4[16];
    v21 = *((_OWORD *)a4 + 7);
    v107[6] = *((_OWORD *)a4 + 6);
    v107[7] = v21;
    v22 = *((_OWORD *)a4 + 5);
    v107[4] = *((_OWORD *)a4 + 4);
    v107[5] = v22;
    v23 = *((_OWORD *)a4 + 1);
    v107[0] = *(_OWORD *)a4;
    v107[1] = v23;
    sub_22E4C7674(a1, v19, a3, v107, a5);
    *(_BYTE *)(a1 + 2893) = v17;
    sub_22E48B274(a1, v15, v16, 0, 0);
    *(_QWORD *)(a1 + 2872) = v18;
    return;
  }
  if (v12 == 1 || (a5 & 1) != 0)
  {
    if (v12 == 1)
    {
      LOBYTE(v32) = 0;
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  if (a3 && (*(_DWORD *)(a3 + 28) & 0x7Fu) - 60 <= 6 && sub_22E4CC568(a3, v9))
  {
LABEL_20:
    v34 = *a4;
    v35 = a4[1];
    v36 = a4[2];
    v37 = *(_OWORD *)(a4 + 5);
    v123 = *(_OWORD *)(a4 + 3);
    v124 = v37;
    v38 = a4[8];
    v84 = a4[7];
    v85 = v34;
    v39 = v11[1];
    *(_OWORD *)v119 = *v11;
    *(_OWORD *)&v119[16] = v39;
    v40 = v11[3];
    *(_OWORD *)&v119[32] = v11[2];
    *(_OWORD *)&v119[48] = v40;
    if (v6)
    {
      *(_QWORD *)&v103[0] = v35;
      *((_QWORD *)&v103[0] + 1) = v36;
      v75 = *(_OWORD *)(a4 + 5);
      v103[1] = *(_OWORD *)(a4 + 3);
      v103[2] = v75;
      sub_22F2469BC(a1, v103, a3, 0, (uint64_t)v104);
      v35 = v104[0];
      v36 = v104[1];
      v123 = v105;
      v124 = v106;
    }
    v41 = *(_QWORD **)(a1 + 144);
    v42 = sub_22E699F3C(v41);
    v43 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v42 + 192))(v42, v41, v36, v38);
    if (v12 == 3)
    {
      *(_QWORD *)&v102[0] = v35;
      *((_QWORD *)&v102[0] + 1) = v36;
      v102[1] = v123;
      v102[2] = v124;
      sub_22E5644CC((_QWORD *)a1, v102, v43);
    }
    else
    {
      v94 = v123;
      v95 = v124;
      v98 = *(_OWORD *)v119;
      v99 = *(_OWORD *)&v119[16];
      v100 = *(_OWORD *)&v119[32];
      v93[0] = v85;
      v93[1] = v35;
      v93[2] = v36;
      v96 = v84;
      v97 = v38;
      v101 = *(_OWORD *)&v119[48];
      a6.n128_f64[0] = sub_22E4E87FC(a1, v43, (uint64_t)v93, 1u);
    }
    v32 = 1;
    goto LABEL_26;
  }
  v32 = 0;
LABEL_26:
  if (v12 == 4)
  {
    v33 = sub_22E564980(a1, v9, a6);
LABEL_34:
    v44 = (llvm::Type **)v33;
    if (!v6)
    {
LABEL_35:
      v45 = a4[8];
      sub_22EFF605C((uint64_t)v9);
      sub_22E4C7504(a1, v45, v44, v46);
      v47 = v32 ^ 1;
      if (v12 != 2)
        v47 = 1;
      v48 = *((_OWORD *)a4 + 7);
      if ((v47 & 1) != 0)
      {
        v86[6] = *((_OWORD *)a4 + 6);
        v86[7] = v48;
        v87 = a4[16];
        v49 = *((_OWORD *)a4 + 3);
        v86[2] = *((_OWORD *)a4 + 2);
        v86[3] = v49;
        v50 = *((_OWORD *)a4 + 5);
        v86[4] = *((_OWORD *)a4 + 4);
        v86[5] = v50;
        v51 = *((_OWORD *)a4 + 1);
        v86[0] = *(_OWORD *)a4;
        v86[1] = v51;
        sub_22E4E87FC(a1, (uint64_t)v44, (uint64_t)v86, 1u);
      }
      else
      {
        v90[6] = *((_OWORD *)a4 + 6);
        v90[7] = v48;
        v91 = a4[16];
        v66 = *((_OWORD *)a4 + 3);
        v90[2] = *((_OWORD *)a4 + 2);
        v90[3] = v66;
        v67 = *((_OWORD *)a4 + 5);
        v90[4] = *((_OWORD *)a4 + 4);
        v90[5] = v67;
        v68 = *((_OWORD *)a4 + 1);
        v90[0] = *(_OWORD *)a4;
        v90[1] = v68;
        sub_22EFF605C((uint64_t)v9);
        v70 = sub_22F25F748(a1, (uint64_t)v90, v69);
        v71 = *((_OWORD *)a4 + 7);
        v88[6] = *((_OWORD *)a4 + 6);
        v88[7] = v71;
        v89 = a4[16];
        v72 = *((_OWORD *)a4 + 3);
        v88[2] = *((_OWORD *)a4 + 2);
        v88[3] = v72;
        v73 = *((_OWORD *)a4 + 5);
        v88[4] = *((_OWORD *)a4 + 4);
        v88[5] = v73;
        v74 = *((_OWORD *)a4 + 1);
        v88[0] = *(_OWORD *)a4;
        v88[1] = v74;
        sub_22E4E87FC(a1, (uint64_t)v44, (uint64_t)v88, 1u);
        sub_22F27328C((llvm::Value *)a1, v70, 0);
      }
      return;
    }
LABEL_45:
    v55 = *(_OWORD *)(a4 + 3);
    v123 = *(_OWORD *)(a4 + 1);
    v124 = v55;
    v125 = *(_OWORD *)(a4 + 5);
    sub_22F2469BC(a1, &v123, a3, 1, (uint64_t)v119);
    v56 = *(_OWORD *)&v119[16];
    *(_OWORD *)(a4 + 1) = *(_OWORD *)v119;
    *(_OWORD *)(a4 + 3) = v56;
    *(_OWORD *)(a4 + 5) = *(_OWORD *)&v119[32];
    goto LABEL_35;
  }
  if (v12 != 3)
  {
    if (v12 != 2)
    {
      v44 = 0;
      if (!v6)
        goto LABEL_35;
      goto LABEL_45;
    }
    if (!a3 || (*(_DWORD *)(a3 + 28) & 0x7Fu) - 60 > 6 || (*(char *)(a3 + 96) & 0x80000000) == 0)
    {
      v33 = (uint64_t)sub_22E563BF8(a1, v9, a6);
      goto LABEL_34;
    }
LABEL_19:
    v33 = sub_22E564B88(a1, v9, a6);
    goto LABEL_34;
  }
  if ((v32 & 1) != 0)
  {
LABEL_40:
    *(_QWORD *)v119 = a1;
    *(_QWORD *)&v119[8] = a1 + 272;
    v119[16] = 0;
    *(_QWORD *)&v119[24] = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
    v52 = (uint64_t *)sub_22E50E974((uint64_t *)v119, v9);
    if (v6)
    {
      v76 = *(_OWORD *)(a4 + 3);
      v123 = *(_OWORD *)(a4 + 1);
      v124 = v76;
      v125 = *(_OWORD *)(a4 + 5);
      sub_22F2469BC(a1, &v123, a3, 1, (uint64_t)v119);
      v77 = *(_OWORD *)&v119[16];
      *(_OWORD *)(a4 + 1) = *(_OWORD *)v119;
      *(_OWORD *)(a4 + 3) = v77;
      *(_OWORD *)(a4 + 5) = *(_OWORD *)&v119[32];
    }
    v53 = a4 + 1;
    v54 = *(_OWORD *)(a4 + 3);
    if (v32)
    {
      *(_OWORD *)v119 = *v53;
      *(_OWORD *)&v119[16] = v54;
      *(_OWORD *)&v119[32] = *(_OWORD *)(a4 + 5);
      sub_22E56435C((_QWORD *)a1, (uint64_t)v119, v52, (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 832) + 336), 230, 1);
    }
    else
    {
      v92[0] = *v53;
      v92[1] = v54;
      v92[2] = *(_OWORD *)(a4 + 5);
      sub_22E5644CC((_QWORD *)a1, v92, (uint64_t)v52);
    }
    return;
  }
  v57 = 0;
  v58 = v9;
  while (1)
  {
    do
    {
      v59 = v58;
      LODWORD(v60) = *v58;
      if (v60 > 0xD5)
      {
        if ((_DWORD)v60 == 233)
        {
          LODWORD(v60) = *(_DWORD *)v58;
          if ((*(_DWORD *)v58 & 0x7C0000) != 0x300000)
            break;
          v61 = v58 + 16;
        }
        else
        {
          if ((_DWORD)v60 != 214)
            break;
          v61 = v58 + 24;
        }
      }
      else if ((_DWORD)v60 == 155)
      {
        if ((**((_DWORD **)v58 + 2) & 0x18000) != 0)
          goto LABEL_40;
        v61 = v58 + 24;
        if (!v59[48])
          v61 = v59 + 32;
        LOBYTE(v60) = -101;
      }
      else
      {
        if ((_DWORD)v60 != 176)
          break;
        v60 = *((unsigned int *)v58 + 5);
        if ((_DWORD)v60 == -1)
          goto LABEL_40;
        v61 = &v58[8 * v60 + 40];
        LOBYTE(v60) = -80;
      }
      v58 = *(unsigned __int8 **)v61;
    }
    while (v58 != v59);
    if ((v60 + 102) < 0xF5u)
      goto LABEL_40;
    v62 = (*(_DWORD *)v59 >> 18) & 0x7F;
    if (v62 <= 4)
      break;
    if (v62 != 5 && v62 != 44)
      goto LABEL_40;
LABEL_68:
    v58 = (unsigned __int8 *)*((_QWORD *)v59 + 2);
    v57 = 1;
  }
  if (v62 == 1)
    goto LABEL_68;
  if (v62 != 4)
    goto LABEL_40;
  v78 = *((_QWORD *)v59 + 2);
  v79 = *(_QWORD *)((*(_QWORD *)(v78 + 8) & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v79 & 8) == 0 || (*(_QWORD *)((v79 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x1C0) != 0xC0)
    goto LABEL_40;
  sub_22E4D8D7C(v119);
  v116 = *(_OWORD *)&v119[8];
  v117 = *(_OWORD *)&v119[24];
  v118 = *(_OWORD *)&v119[40];
  if ((v57 & 1) != 0)
  {
    v115[0] = *(_OWORD *)&v119[8];
    v115[1] = *(_OWORD *)&v119[24];
    v115[2] = *(_OWORD *)&v119[40];
    v80 = a4[2];
    LOWORD(v125) = 257;
    sub_22E3BEE6C((uint64_t *)(a1 + 272), v115, v80, (uint64_t)&v123, (uint64_t)&v116);
  }
  v81 = (__int128 *)(a4 + 1);
  v82 = *(_OWORD *)(a4 + 3);
  if ((*(_DWORD *)v78 & 0x300) == 0x100)
  {
    v123 = *v81;
    v124 = v82;
    v125 = *(_OWORD *)(a4 + 5);
    v120 = v116;
    v121 = v117;
    v122 = v118;
    v83 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 832) + 200);
  }
  else
  {
    v123 = *v81;
    v124 = v82;
    v125 = *(_OWORD *)(a4 + 5);
    v120 = v116;
    v121 = v117;
    v122 = v118;
    v83 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 832) + 240);
  }
  sub_22E564668((_QWORD *)a1, (uint64_t)&v123, (uint64_t)&v120, v83);
}

void sub_22E4C7EF4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v10;
  uint64_t v11;
  char v12;
  BOOL v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int16 v19;
  int v20;
  uint64_t *v21;
  _QWORD *v22;
  unint64_t v23;
  std::string::size_type v24;
  const void *v25;
  std::string *p_dst;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  std::string *v30;
  void *v31;
  char v32;
  void *v33;
  unint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  const void *v37;
  std::string::size_type v38;
  std::string *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  std::string *v43;
  std::string *v44;
  std::string::size_type v45;
  std::string *v46;
  uint64_t v47;
  std::string::size_type v48;
  uint64_t v49;
  const char *v50;
  unint64_t v51;
  _DWORD *v52;
  unsigned int v53;
  uint64_t v54;
  std::string v55;
  std::string v56;
  void *v57[2];
  std::string::size_type v58;
  std::string __dst;
  uint64_t v60;
  __int16 v61;
  void *__p[4];
  __int128 v63;
  void *v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  __dst.__r_.__value_.__r.__words[0] = a2;
  v10 = sub_22F25AF78((uint64_t *)(a1 + 1320), &__dst);
  v11 = v10[1];
  if (v11 && *(_QWORD *)(v11 - 32) == a3)
  {
    v12 = *(_WORD *)(v11 + 34);
    v13 = (v12 & 0x3F) == 0;
    v14 = (v12 & 0x3F) - 1;
    if (v13)
      v14 = 0;
    v15 = 1 << v14;
    if (v13)
      v15 = 0;
    if (v15 < a4)
      llvm::GlobalObject::setAlignment();
    goto LABEL_9;
  }
  sub_22F29B808(a1);
  memset(__p, 0, 24);
  if (!sub_22E3CB5E0(a2))
  {
    v22 = sub_22E624994(a1, a2, 0);
    if (!v22)
    {
      v27 = 0;
      memset(&__dst, 0, sizeof(__dst));
LABEL_30:
      v30 = std::string::append(&__dst, ".const");
      v31 = (void *)v30->__r_.__value_.__r.__words[0];
      *(_QWORD *)&v63 = v30->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)&v63 + 7) = *(std::string::size_type *)((char *)&v30->__r_.__value_.__r.__words[1] + 7);
      v32 = HIBYTE(v30->__r_.__value_.__r.__words[2]);
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      if (v27)
        operator delete(__p[0]);
      __p[0] = v31;
      __p[1] = (void *)v63;
      *(void **)((char *)&__p[1] + 7) = *(void **)((char *)&v63 + 7);
      HIBYTE(__p[2]) = v32;
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_59;
      v33 = (void *)__dst.__r_.__value_.__r.__words[0];
      goto LABEL_58;
    }
    v24 = v23;
    if (v23 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_61;
    v25 = v22;
    if (v23 >= 0x17)
    {
      v28 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v23 | 7) != 0x17)
        v28 = v23 | 7;
      v29 = v28 + 1;
      p_dst = (std::string *)operator new(v28 + 1);
      __dst.__r_.__value_.__l.__size_ = v24;
      __dst.__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v23;
      p_dst = &__dst;
      if (!v23)
        goto LABEL_29;
    }
    memmove(p_dst, v25, v24);
LABEL_29:
    p_dst->__r_.__value_.__s.__data_[v24] = 0;
    v27 = SHIBYTE(__p[2]) < 0;
    goto LABEL_30;
  }
  v18 = sub_22EFC8010(a2);
  v19 = *(_WORD *)(v18 + 8);
  if ((v19 & 0x7Eu) - 58 >= 0xFFFFFFFA)
  {
    if ((*(_DWORD *)(v18 - 44) & 0x7F) == 0x39 || (*(_DWORD *)(v18 - 44) & 0x7F) == 0x37)
    {
      v21 = (uint64_t *)(v18 - 32);
      goto LABEL_23;
    }
    v34 = v18 - 72;
    if (sub_22E462B18(v18 - 72))
      v34 = v34 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(v34) + 96) & 0x80) == 0);
    v35 = sub_22E624994(a1, v34, 0);
    if (v36 <= 0x7FFFFFFFFFFFFFF7)
    {
      v37 = v35;
      v38 = v36;
      if (v36 >= 0x17)
      {
        v40 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v36 | 7) != 0x17)
          v40 = v36 | 7;
        v41 = v40 + 1;
        v42 = v35;
        v43 = (std::string *)operator new(v40 + 1);
        v37 = v42;
        v39 = v43;
        v55.__r_.__value_.__l.__size_ = v38;
        v55.__r_.__value_.__r.__words[2] = v41 | 0x8000000000000000;
        v55.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
      }
      else
      {
        *((_BYTE *)&v55.__r_.__value_.__s + 23) = v36;
        v39 = &v55;
        if (!v36)
          goto LABEL_46;
      }
      memmove(v39, v37, v38);
LABEL_46:
      v39->__r_.__value_.__s.__data_[v38] = 0;
      goto LABEL_47;
    }
LABEL_61:
    abort();
  }
  v20 = v19 & 0x7F;
  if (v20 == 1)
  {
    *((_BYTE *)&v55.__r_.__value_.__s + 23) = 7;
    strcpy((char *)&v55, "<block>");
  }
  else
  {
    if (v20 == 24)
    {
      v21 = (uint64_t *)(v18 - 8);
LABEL_23:
      sub_22EFC683C(v21, &v55);
      goto LABEL_47;
    }
    *((_BYTE *)&v55.__r_.__value_.__s + 23) = 10;
    strcpy((char *)&v55, "<captured>");
  }
LABEL_47:
  v44 = std::string::insert(&v55, 0, "__const.");
  v45 = v44->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__r.__words[2] = v45;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  v46 = std::string::append(&v56, ".");
  v47 = 0;
  v48 = v46->__r_.__value_.__r.__words[2];
  *(_OWORD *)v57 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
  v58 = v48;
  v46->__r_.__value_.__l.__size_ = 0;
  v46->__r_.__value_.__r.__words[2] = 0;
  v46->__r_.__value_.__r.__words[0] = 0;
  v49 = *(_QWORD *)(a2 + 40);
  v50 = "";
  if ((v49 & 7) == 0)
  {
    v51 = v49 & 0xFFFFFFFFFFFFFFF8;
    if (v51)
    {
      v52 = *(_DWORD **)(v51 + 16);
      v53 = *v52;
      v50 = (const char *)(v52 + 4);
      v47 = v53;
    }
  }
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v57;
  __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)v50;
  v60 = v47;
  v61 = 1284;
  llvm::Twine::str((llvm::Twine *)&__dst);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  *(_OWORD *)__p = v63;
  __p[2] = v64;
  HIBYTE(v64) = 0;
  LOBYTE(v63) = 0;
  if (SHIBYTE(v58) < 0)
    operator delete(v57[0]);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_59;
  v33 = (void *)v55.__r_.__value_.__r.__words[0];
LABEL_58:
  operator delete(v33);
LABEL_59:
  v54 = llvm::User::operator new((llvm::User *)0x58);
  v61 = 260;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  llvm::GlobalVariable::GlobalVariable();
  llvm::GlobalObject::setAlignment();
  *(_DWORD *)(v54 + 32) = *(_DWORD *)(v54 + 32) & 0xFFFFFF3F | 0x80;
  v10[1] = v54;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
LABEL_9:
  v16 = v10[1];
  v17 = *(_QWORD *)(v16 + 24);
  *(_QWORD *)a5 = v16;
  *(_QWORD *)(a5 + 8) = v17;
  *(_QWORD *)(a5 + 16) = a4;
  *(_DWORD *)(a5 + 24) = 0;
  *(_QWORD *)(a5 + 32) = 0;
  *(_QWORD *)(a5 + 40) = 0;
}

double sub_22E4C8440@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  _QWORD *v7;
  _OWORD *v8;
  int v9;
  unint64_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  _BOOL4 v18;
  unint64_t v19;
  unint64_t v20;
  _OWORD *v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  double result;
  uint64_t v33;
  unint64_t *v34;
  __int128 v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  llvm::Type **False;
  llvm::Type *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  llvm::Type *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  unint64_t v58;
  _DWORD *v59;
  unsigned int v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  BOOL v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  llvm::Type *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t Declaration;
  uint64_t v78;
  llvm::Value *v79;
  uint64_t v80;
  llvm::Instruction *v81;
  uint64_t v82;
  llvm::Type *v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t i;
  uint64_t v93;
  llvm::Type **v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  llvm::Type *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  int v112;
  uint64_t *v113;
  _DWORD *v114;
  uint64_t v115;
  BOOL v116;
  uint64_t v117;
  uint64_t ScalarSizeInBits;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  int v123;
  uint64_t v124;
  int v125;
  unsigned int v126;
  _QWORD *v127;
  int v128;
  int v129;
  unint64_t v130;
  uint64_t v131;
  __int128 v132;
  _OWORD *v133;
  uint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unsigned int v140;
  int v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  __int128 v145;
  llvm::Value *v146;
  uint64_t v147;
  uint64_t v148;
  _DWORD *v149;
  llvm::DataLayout *DataLayout;
  uint64_t v151;
  unint64_t v152;
  int v153;
  BOOL v154;
  unint64_t ABITypeAlignment;
  unint64_t v156;
  uint64_t v157;
  _DWORD *v158;
  uint64_t v159;
  _OWORD *v160;
  uint64_t *v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  std::string::size_type v167;
  _QWORD v168[3];
  int v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD v172[3];
  int v173;
  uint64_t v174;
  uint64_t v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  unint64_t v183;
  _QWORD v184[3];
  int v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD v188[4];
  __int16 v189;
  _QWORD v190[4];
  __int16 v191;
  void *v192;
  __int128 v193;
  _BYTE v194[16];
  _QWORD *v195;
  uint64_t v196;
  _BYTE v197[32];
  _BYTE v198[56];
  uint64_t v199;

  v199 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a2 + 48);
  v183 = v6;
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = 0;
  v166 = a3 + 8;
  *(_QWORD *)(a3 + 40) = 0;
  v7 = (_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 72) = 0;
  v161 = (uint64_t *)(a3 + 72);
  *(_QWORD *)(a3 + 80) = 0;
  v8 = (_OWORD *)(a3 + 80);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_WORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  v9 = 0;
  if (sub_22E49C868(a2))
    v9 = (*(unsigned __int8 *)(a2 + 98) >> 5) & 1;
  *(_BYTE *)(a3 + 64) = v9;
  v162 = sub_22EF5B404(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), a2, 0);
  v10 = v6 & 0xFFFFFFFFFFFFFFF0;
  if ((*(_BYTE *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 17) & 8) != 0)
    sub_22E61DFC4(a1);
  if (*(_BYTE *)(a1 + 2892))
  {
    v164 = 0;
    v11 = 0;
    v12 = *(_QWORD *)(a1 + 144);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 144);
    v164 = *(_QWORD *)(a1 + 2880);
    if (v164)
    {
      v11 = (*(_QWORD *)(*(_QWORD *)(v12 + 184) + 96) & 0x1800000000000000) != 0;
    }
    else
    {
      v164 = 0;
      v11 = 0;
    }
  }
  v180 = 0uLL;
  DWORD2(v181) = 0;
  *(_QWORD *)&v181 = 0;
  v179 = 0uLL;
  v176 = 0uLL;
  DWORD2(v177) = 0;
  *(_QWORD *)&v177 = 0;
  v178 = 0uLL;
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 152) + 72);
  v167 = a2;
  if ((v13 & 0x2000000000) != 0)
  {
    sub_22E5F5574(a1, a2, (uint64_t)&v176);
  }
  else
  {
    if ((_DWORD)v13)
    {
      (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t, unint64_t))(**(_QWORD **)(v12 + 808) + 584))(v198, *(_QWORD *)(v12 + 808), a1, a2);
    }
    else
    {
      memset(v198, 0, 28);
      *(_QWORD *)&v198[32] = 0;
      *(_QWORD *)&v198[40] = 0;
    }
    v176 = *(_OWORD *)v198;
    v177 = *(_OWORD *)&v198[16];
    v178 = *(_OWORD *)&v198[32];
  }
  v14 = *(uint64_t **)(a1 + 144);
  v15 = v14[19];
  if ((*(_QWORD *)(v15 + 140) & 0x800000000) != 0)
  {
    v16 = (*(unsigned __int8 *)(v167 + 97) >> 2) & 1;
    if ((*(_DWORD *)(v167 + 28) & 0x7F) == 0x40)
      v16 = 0;
    v165 = v16;
  }
  else
  {
    v165 = 0;
  }
  if (*(_DWORD *)(v15 + 72))
  {
    v17 = v176;
    if ((_QWORD)v176)
    {
      v180 = v176;
      v181 = v177;
      v182 = v178;
      v18 = v11;
      if ((BYTE8(v177) & 3) != 0)
        v17 = sub_22F28ABCC(&v176, a1);
      v19 = *((_QWORD *)&v176 + 1);
      v21 = (_OWORD *)v166;
      v20 = v167;
      if ((_QWORD)v177)
      {
        v22 = __clz(v177) ^ 0x3F;
        v17 = v17 & 0xFFFFFFFFFFFFFFF8 | (v22 >> 3);
        v19 = *((_QWORD *)&v176 + 1) & 0xFFFFFFFFFFFFFFF8 | v22 & 7;
      }
      v23 = 0;
      *(_QWORD *)&v179 = v17;
      *((_QWORD *)&v179 + 1) = v19;
      goto LABEL_153;
    }
  }
  v160 = (_OWORD *)(a3 + 80);
  v24 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v10 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v24 == 5)
  {
    sub_22E47E098(a1);
    v18 = v11;
    if (!*(_BYTE *)(a1 + 2893))
    {
      v70 = *(llvm::Type **)(a1 + 96);
      v71 = *(unsigned __int8 *)(a1 + 130);
      *(_QWORD *)v198 = "saved_stack";
      *(_WORD *)&v198[32] = 259;
      v72 = sub_22E4D83CC(a1, v70, v71, (uint64_t)v198, 0, 0);
      v74 = 0;
      if (v72 <= 7)
        v75 = 0;
      else
        v75 = v72 & 0xFFFFFFFFFFFFFFF8;
      if (v72 <= 7)
        v76 = 0;
      else
        v76 = v73 & 0xFFFFFFFFFFFFFFF8;
      if (v72 >= 8)
        v74 = 1 << (v73 & 7 | (8 * (v72 & 7)));
      Declaration = llvm::Intrinsic::getDeclaration();
      v78 = 0;
      if (Declaration)
        v78 = *(_QWORD *)(Declaration + 24);
      *(_WORD *)&v198[32] = 257;
      v79 = sub_22E462B78((uint64_t *)(a1 + 272), v78, Declaration, 0, 0, (uint64_t)v198, 0);
      v168[0] = v75;
      v168[1] = v76;
      v168[2] = v74;
      v169 = 0;
      v170 = 0;
      v171 = 0;
      sub_22E3BEDDC(a1 + 272, v79, v168, 0);
      *(_BYTE *)(a1 + 2893) = 1;
      v80 = sub_22E4899EC(a1 + 1984, 2, 56);
      *(_QWORD *)v80 = off_24FA637C8;
      *(_QWORD *)(v80 + 8) = v75;
      *(_QWORD *)(v80 + 16) = v76;
      *(_QWORD *)(v80 + 24) = v74;
      *(_DWORD *)(v80 + 32) = 0;
      *(_QWORD *)(v80 + 40) = 0;
      *(_QWORD *)(v80 + 48) = 0;
    }
    v81 = sub_22F297B68(a1, v6);
    v83 = (llvm::Type *)sub_22E66C868(*(_QWORD *)(a1 + 144) + 280, v82, 0);
    *(_QWORD *)v198 = "vla";
    *(_WORD *)&v198[32] = 259;
    v84 = (unint64_t)v198;
    v85 = sub_22E4D83CC(a1, v83, v162, (uint64_t)v198, (uint64_t)v81, (unint64_t *)&v179);
    v87 = 0;
    v88 = v85 & 0xFFFFFFFFFFFFFFF8;
    if (v85 <= 7)
      v88 = 0;
    v89 = v86 & 0xFFFFFFFFFFFFFFF8;
    if (v85 <= 7)
      v89 = 0;
    if (v85 >= 8)
      v87 = 1 << (v86 & 7 | (8 * (v85 & 7)));
    *(_QWORD *)&v180 = v88;
    *((_QWORD *)&v180 + 1) = v89;
    *(_QWORD *)&v181 = v87;
    DWORD2(v181) = 0;
    v182 = 0uLL;
    *(_QWORD *)v198 = &v198[16];
    *(_QWORD *)&v198[8] = 0x400000000;
    v195 = v197;
    v196 = 0x400000000;
    v90 = *(_QWORD *)(v167 + 48);
    v163 = a1 + 272;
    v91 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), v90);
    for (i = v164; v91; v91 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), v90))
    {
      if (*(_BYTE *)(v91 + 16) != 5)
        break;
      v93 = sub_22E6211F8(a1, v90);
      v94 = (llvm::Type **)v93;
      v96 = v95;
      if (*(_BYTE *)(v93 + 16) != 16 || v93 == 0)
      {
        v98 = *(unsigned int *)(a1 + 2888);
        *(_DWORD *)(a1 + 2888) = v98 + 1;
        v84 = v84 & 0xFFFFFFFF00000000 | v98;
        v190[0] = "__vla_expr";
        v190[2] = v84;
        v191 = 2051;
        v192 = v194;
        v193 = xmmword_22F4559F0;
        llvm::Twine::toVector();
        v99 = v192;
        v100 = v193;
        v101 = sub_22E4C9F04(*(llvm::StringMapImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144) + 15192), v192, v193);
        v102 = v196;
        if (v196 >= (unint64_t)HIDWORD(v196))
        {
          v157 = v101;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v101 = v157;
          v102 = v196;
        }
        v195[v102] = v101;
        LODWORD(v196) = v196 + 1;
        v103 = *v94;
        v189 = 261;
        v188[0] = v99;
        v188[1] = v100;
        v104 = sub_22E4D84FC(a1, v103, (uint64_t)v188);
        v106 = 0;
        v107 = v104 & 0xFFFFFFFFFFFFFFF8;
        if (v104 <= 7)
          v108 = 0;
        else
          v108 = v104 & 0xFFFFFFFFFFFFFFF8;
        v109 = v105 & 0xFFFFFFFFFFFFFFF8;
        if (v104 <= 7)
          v109 = 0;
        v184[0] = v108;
        v184[1] = v109;
        if (v104 >= 8)
          v106 = 1 << (v105 & 7 | (8 * (v104 & 7)));
        v184[2] = v106;
        v185 = 0;
        v186 = 0;
        v187 = 0;
        sub_22E3BEDDC(v163, v94, v184, 0);
        v110 = *(_QWORD *)(v90 & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v110 + 8) & 0xF) != 0)
          v110 = (unint64_t)sub_22F10D2BC(v90);
        v90 = v96;
        sub_22F2599E0((uint64_t)v198, v107, v110 & 0xFFFFFFFFFFFFFFF0);
        if (v192 != v194)
          free(v192);
        i = v164;
      }
      else
      {
        v111 = *(_QWORD *)(v90 & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v111 + 8) & 0xF) != 0)
          v111 = (unint64_t)sub_22F10D2BC(v90);
        v90 = v96;
        sub_22F2599E0((uint64_t)v198, (uint64_t)v94, v111 & 0xFFFFFFFFFFFFFFF0);
      }
    }
    v20 = v167;
    if (v18 && *(_DWORD *)&v198[8])
    {
      v112 = 0;
      v113 = *(uint64_t **)v198;
      v114 = (_DWORD *)(i + 1344);
      v115 = 16 * *(unsigned int *)&v198[8];
      v158 = (_DWORD *)(i + 1344);
      do
      {
        if (*v113)
          v116 = *(_BYTE *)(*v113 + 16) == 16;
        else
          v116 = 0;
        if (v116)
        {
          v131 = llvm::ValueAsMetadata::get();
        }
        else
        {
          v159 = v195[v112];
          v117 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
          ScalarSizeInBits = llvm::Type::getScalarSizeInBits(*(llvm::Type **)(a1 + 88));
          v119 = sub_22EF60A6C(v117, ScalarSizeInBits, 0);
          v120 = v119;
          v121 = *(_QWORD *)(v20 + 16);
          v122 = (_QWORD *)(v121 & 0xFFFFFFFFFFFFFFF8);
          if ((v121 & 4) != 0)
            v122 = (_QWORD *)*v122;
          v123 = v112 + 1;
          v124 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
          v20 = v167;
          v125 = *(_DWORD *)(v167 + 24);
          v126 = sub_22F11598C(v119);
          v127 = (_QWORD *)sub_22E3CD3D4(v124 + 2032, v126 + 8, 3);
          *v127 = v120;
          v128 = v125;
          v129 = v125;
          v112 = v123;
          v130 = sub_22EFBB670(v124, (uint64_t)v122, v128, v129, v159, v120, (uint64_t)v127, 4);
          *(_DWORD *)(v130 + 28) |= 0x200u;
          v131 = sub_22E49CDF8(v164, v130, *v113, v163, 0);
          v114 = v158;
        }
        v190[0] = v113[1];
        sub_22F25AAF8(v114, v190)[1] = v131;
        v113 += 2;
        v115 -= 16;
      }
      while (v115);
    }
    if (v195 != (_QWORD *)v197)
      free(v195);
    v8 = v160;
    v21 = (_OWORD *)v166;
    if (*(_BYTE **)v198 != &v198[16])
      free(*(void **)v198);
    goto LABEL_152;
  }
  if (sub_22EFBC5B4(v167))
  {
    if (v24 == 45 || (v24 & 0xFEu) - 2 <= 3)
    {
      if ((*(_DWORD *)(v167 + 28) & 0x7F) == 0x40 || (*(_DWORD *)(v167 + 96) & 0x8000) == 0)
      {
        if ((sub_22F111438(&v183, v14[18]) & 1) == 0
          && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22EF5BA38(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), v6) & 0xFFFFFFFFFFFFFFF0)+ 8) & 0xFFFFFFFFFFFFFFF0)+ 16) != 32)
        {
          goto LABEL_49;
        }
        v26 = sub_22EFBC5B4(v167);
        if (!sub_22EFFFBEC(v26, *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), 0, 0, v27, v28, v29, v30))
          goto LABEL_49;
        v14 = *(uint64_t **)(a1 + 144);
        v15 = v14[19];
      }
      if ((*(_DWORD *)(v15 + 52) & 0x40000000) == 0
        || (v33 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFF0) + 8), (v33 & 8) != 0)
        && (*(_QWORD *)((v33 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) == 0x1800)
      {
        v31 = v165;
        if ((*(_BYTE *)(v14[23] + 29) & 0x20) == 0)
          v31 = 1;
        if (((v31 | v9) & 1) == 0 && sub_22E62D664((uint64_t)v14, v6, 1))
        {
          sub_22E4C6660(a1, v167);
          *(_QWORD *)v166 = 0;
          *(_QWORD *)(v166 + 8) = 0;
          *(_DWORD *)(v166 + 24) = 0;
          *(_QWORD *)(v166 + 16) = 0;
          *v7 = 0;
          v7[1] = 0;
          return result;
        }
      }
      *(_BYTE *)(a3 + 65) = 1;
    }
  }
LABEL_49:
  if (v165)
  {
    v34 = (unint64_t *)(a1 + 1736);
    v35 = *(_OWORD *)(a1 + 1752);
    v180 = *(_OWORD *)(a1 + 1736);
    v181 = v35;
    v182 = *(_OWORD *)(a1 + 1768);
    v8 = (_OWORD *)(a3 + 80);
    v18 = v11;
    v20 = v167;
    if ((*(_BYTE *)(a1 + 1760) & 3) != 0)
      v36 = sub_22F28ABCC(v34, a1);
    else
      v36 = *v34;
    v37 = *(_QWORD *)(a1 + 1744);
    v38 = *(_QWORD *)(a1 + 1752);
    if (v38)
    {
      v39 = __clz(v38) ^ 0x3F;
      v36 = v36 & 0xFFFFFFFFFFFFFFF8 | (v39 >> 3);
      v37 = v37 & 0xFFFFFFFFFFFFFFF8 | v39 & 7;
    }
    v23 = 0;
    *(_QWORD *)&v179 = v36;
    *((_QWORD *)&v179 + 1) = v37;
    v40 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v10 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (!v40)
    {
      v21 = (_OWORD *)v166;
      goto LABEL_153;
    }
    v21 = (_OWORD *)v166;
    if (*(_BYTE *)(v40 + 16) == 45)
    {
      v41 = sub_22F114198(*(_QWORD *)(v40 + 24));
      v42 = v41;
      if (v41
        && (*(_DWORD *)(v41 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD
        && (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v41 + 104) + 96), *(_QWORD *)(v41 + 104)),
            (**(_QWORD **)(v42 + 128) & 0x100000000000) == 0)
        || (*(_BYTE *)(v42 + 75) & 0x40) != 0)
      {
        False = (llvm::Type **)llvm::ConstantInt::getFalse();
        v44 = *False;
        *(_QWORD *)v198 = "nrvo";
        *(_WORD *)&v198[32] = 259;
        v45 = sub_22E4D83CC(a1, v44, 1uLL, (uint64_t)v198, 0, (unint64_t *)&v179);
        v47 = v46;
        sub_22E47E098(a1);
        v48 = 0;
        v49 = v45 & 0xFFFFFFFFFFFFFFF8;
        if (v45 <= 7)
          v50 = 0;
        else
          v50 = v45 & 0xFFFFFFFFFFFFFFF8;
        v51 = v47 & 0xFFFFFFFFFFFFFFF8;
        if (v45 <= 7)
          v51 = 0;
        v172[0] = v50;
        v172[1] = v51;
        if (v45 >= 8)
          v48 = 1 << (v47 & 7 | (8 * (v45 & 7)));
        v172[2] = v48;
        v173 = 0;
        v174 = 0;
        v175 = 0;
        sub_22E3BEDDC(a1 + 272, False, v172, 0);
        v20 = v167;
        *(_QWORD *)v198 = v167;
        v23 = 0;
        sub_22F25B1D8((uint64_t *)(a1 + 1960), v198)[1] = v49;
        *(_QWORD *)(a3 + 56) = v49;
        v8 = (_OWORD *)(a3 + 80);
        goto LABEL_153;
      }
LABEL_152:
      v23 = 0;
    }
  }
  else
  {
    v8 = (_OWORD *)(a3 + 80);
    v18 = v11;
    v20 = v167;
    if (v9)
    {
      v52 = sub_22E3CAE34(a1, v167);
      v53 = *(llvm::Type **)v52;
      v54 = *((_QWORD *)v52 + 2);
      v21 = (_OWORD *)v166;
    }
    else
    {
      v53 = (llvm::Type *)sub_22E66C868(*(_QWORD *)(a1 + 144) + 280, v6, 0);
      v21 = (_OWORD *)v166;
      v54 = v162;
    }
    v55 = 0;
    v56 = *(_QWORD *)(v167 + 40);
    v57 = "";
    if ((v56 & 7) == 0)
    {
      v58 = v56 & 0xFFFFFFFFFFFFFFF8;
      if (v58)
      {
        v59 = *(_DWORD **)(v58 + 16);
        v60 = *v59;
        v57 = (const char *)(v59 + 4);
        v55 = v60;
      }
    }
    *(_WORD *)&v198[32] = 261;
    *(_QWORD *)v198 = v57;
    *(_QWORD *)&v198[8] = v55;
    v61 = sub_22E4D83CC(a1, v53, v54, (uint64_t)v198, 0, (unint64_t *)&v179);
    v63 = 0;
    if (v61 <= 7)
      v64 = 0;
    else
      v64 = v61 & 0xFFFFFFFFFFFFFFF8;
    if (v61 <= 7)
      v65 = 0;
    else
      v65 = v62 & 0xFFFFFFFFFFFFFFF8;
    if (v61 >= 8)
      v63 = 1 << (v62 & 7 | (8 * (v61 & 7)));
    v66 = 0;
    *(_QWORD *)&v180 = v64;
    *((_QWORD *)&v180 + 1) = v65;
    *(_QWORD *)&v181 = v63;
    DWORD2(v181) = 0;
    v182 = 0uLL;
    if ((*(_DWORD *)(v167 + 28) & 0x7F) != 0x40 && (*(_DWORD *)(v167 + 96) & 0x200) != 0)
      v66 = *(_DWORD *)(*(_QWORD *)(a1 + 152) + 148) == 11;
    v23 = 0;
    if (*(_QWORD *)(a1 + 320) && !v66)
    {
      if (!*(_BYTE *)(a1 + 1528))
      {
        *(_QWORD *)v198 = v167;
        v195 = 0;
        if (sub_22E46706C((uint64_t *)(a1 + 1504), v198, &v195))
        {
          v67 = v195;
          v68 = *(_QWORD *)(a1 + 1504);
          v69 = *(unsigned int *)(a1 + 1520);
        }
        else
        {
          v68 = *(_QWORD *)(a1 + 1504);
          v69 = *(unsigned int *)(a1 + 1520);
          v67 = (void *)(v68 + 8 * v69);
        }
        if (v67 == (void *)(v68 + 8 * v69))
        {
          v147 = *(_QWORD *)(a1 + 144);
          if ((*(_BYTE *)(*(_QWORD *)(v147 + 152) + 1) & 1) != 0
            || ((v148 = *(_QWORD *)(a1 + 5840)) != 0 ? (v149 = (_DWORD *)(v148 + 56)) : (v149 = (_DWORD *)(a1 + 3024)),
                !*v149))
          {
            DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(v147 + 200));
            sub_22E3C304C((uint64_t)DataLayout, (uint64_t)v53);
            v152 = (unint64_t)(v151 + 7) >> 3;
            v154 = v153 == 1;
            ABITypeAlignment = llvm::DataLayout::getABITypeAlignment(DataLayout, v53);
            v156 = ABITypeAlignment + v152;
            v8 = v160;
            v23 = sub_22E4C9CC0(a1, (v156 - 1) / ABITypeAlignment * ABITypeAlignment, v154, v179 & 0xFFFFFFFFFFFFFFF8);
            *v161 = v23;
            goto LABEL_153;
          }
        }
      }
      goto LABEL_152;
    }
  }
LABEL_153:
  *(_OWORD *)&v198[8] = v180;
  *(_OWORD *)&v198[24] = v181;
  *(_OWORD *)&v198[40] = v182;
  *(_QWORD *)v198 = v20;
  sub_22E3CEC9C(a1 + 2904, v198, (__int128 *)&v198[8], (uint64_t)&v195);
  v132 = v181;
  *v21 = v180;
  v21[1] = v132;
  v21[2] = v182;
  *v8 = v179;
  if (v18 && *(_QWORD *)(a1 + 320))
  {
    if ((v165 & 1) != 0)
    {
      v133 = v8;
      v134 = *(_QWORD *)(a1 + 1784);
      sub_22E48F304(v164, *(_DWORD *)(v20 + 24));
      if (v134)
      {
        v135 = (unint64_t *)(a1 + 1784);
        if ((*(_BYTE *)(a1 + 1808) & 3) != 0)
          v136 = sub_22F28ABCC(v135, a1);
        else
          v136 = *v135;
        v8 = v133;
        v137 = *(_QWORD *)(a1 + 1792);
        v138 = *(_QWORD *)(a1 + 1800);
        v139 = v164;
        if (v138)
        {
          v140 = __clz(v138) ^ 0x3F;
          v136 = v136 & 0xFFFFFFFFFFFFFFF8 | (v140 >> 3);
          v137 = v137 & 0xFFFFFFFFFFFFFFF8 | v140 & 7;
        }
        *(_QWORD *)&v179 = v136;
        *((_QWORD *)&v179 + 1) = v137;
        v141 = 1;
      }
      else
      {
        v141 = 0;
        v8 = v133;
        v139 = v164;
      }
    }
    else
    {
      v139 = v164;
      sub_22E48F304(v164, *(_DWORD *)(v20 + 24));
      v141 = 0;
    }
    sub_22E49CDF8(v139, v20, v179 & 0xFFFFFFFFFFFFFFF8, a1 + 272, v141);
  }
  if (sub_22E4C7444(v20) && *(_QWORD *)(a1 + 320))
  {
    if ((BYTE8(v181) & 3) != 0)
      v146 = (llvm::Value *)sub_22F28ABCC(&v180, a1);
    else
      v146 = (llvm::Value *)v180;
    sub_22F298078((uint64_t *)a1, v20, v146);
    if (!v23)
      goto LABEL_169;
  }
  else if (!v23)
  {
    goto LABEL_169;
  }
  v142 = *(_QWORD *)v8;
  v143 = (_QWORD *)sub_22E4899EC(a1 + 1984, 11, 24);
  *v143 = &unk_24FA632F8;
  v143[1] = v142 & 0xFFFFFFFFFFFFFFF8;
  v143[2] = v23;
LABEL_169:
  if ((~*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 184) + 104) & 0x180) == 0
    && !sub_22E619D68(*(_QWORD *)(v20 + 48)))
  {
    v144 = sub_22E4899EC(a1 + 1984, 2, 56);
    *(_QWORD *)v144 = off_24FA63690;
    v145 = v181;
    *(_OWORD *)(v144 + 8) = v180;
    *(_OWORD *)(v144 + 24) = v145;
    result = *(double *)&v182;
    *(_OWORD *)(v144 + 40) = v182;
  }
  return result;
}

_QWORD *sub_22E4C9320(_QWORD *result, _BYTE *a2)
{
  __int128 *v2;
  uint64_t v4;
  std::string::size_type v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  int v25;
  llvm::Constant *v26;
  uint64_t v27;
  llvm::Constant *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41[3];
  _BYTE v42[48];
  _OWORD v43[8];
  uint64_t v44;
  _QWORD v45[6];
  char v46;
  __int128 v47[8];
  uint64_t v48;
  _OWORD v49[3];
  __int128 v50[3];
  _OWORD v51[3];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t *v55;
  int v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  char v60;
  _OWORD v61[2];
  _OWORD v62[8];
  uint64_t v63;
  unsigned __int8 *v64;
  uint64_t v65;
  uint64_t v66[2];
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  _BYTE v79[64];
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;

  v85 = *MEMORY[0x24BDAC8D0];
  v2 = (__int128 *)(a2 + 8);
  if (*((_QWORD *)a2 + 1))
  {
    v4 = (uint64_t)result;
    v5 = *(_QWORD *)a2;
    v6 = *(_DWORD *)(*(_QWORD *)a2 + 24);
    v66[0] = 0;
    v66[1] = (uint64_t)result;
    sub_22E48EE24(v66, v6, 0);
    v7 = *(_QWORD *)(v5 + 48);
    v65 = v7;
    v8 = (unsigned __int8 *)sub_22EFBC5B4(v5);
    v9 = v8;
    v64 = v8;
    if (!*(_QWORD *)(v4 + 320))
    {
      if (!v8 || !sub_22E61F04C((uint64_t)v8, 0))
        return sub_22E48F084(v66);
      sub_22E47E098(v4);
    }
    if (a2[64])
      sub_22E3CBD4C(v4, (uint64_t)a2);
    if (!v9 && sub_22F111C54(&v65) == 3)
    {
      v10 = v2[1];
      v76 = *v2;
      v77 = v10;
      v78 = v2[2];
      sub_22E6281E0(*(_QWORD **)(v4 + 144), v7, (uint64_t)&v57);
      v52 = v76;
      v53 = v77;
      v54 = v78;
      v11 = *(_QWORD *)(*(_QWORD *)(v4 + 144) + 144);
      v70 = v57;
      v71 = v58;
      *(_QWORD *)&v72 = v59;
      memset(&v79[8], 0, 28);
      *(_QWORD *)&v79[40] = 0;
      *(_QWORD *)&v79[48] = 0;
      v80 = 0uLL;
      *(_QWORD *)((char *)&v81 + 4) = 2;
      *(_DWORD *)v79 = 0;
      v82 = 0u;
      v83 = 0u;
      sub_22E3C113C((uint64_t)v79, &v52, v7, 2, &v70, v11);
      if (a2[64])
      {
        v76 = *(_OWORD *)&v79[8];
        v77 = *(_OWORD *)&v79[24];
        v78 = *(_OWORD *)&v79[40];
        sub_22F2469BC(v4, &v76, v5, 1, (uint64_t)&v52);
        *(_OWORD *)&v79[8] = v52;
        *(_OWORD *)&v79[24] = v53;
        *(_OWORD *)&v79[40] = v54;
      }
      v62[6] = v82;
      v62[7] = v83;
      v63 = v84;
      v62[2] = *(_OWORD *)&v79[32];
      v62[3] = *(_OWORD *)&v79[48];
      v62[4] = v80;
      v62[5] = v81;
      v62[0] = *(_OWORD *)v79;
      v62[1] = *(_OWORD *)&v79[16];
      sub_22E5500E0(v4, (uint64_t)v62);
      return sub_22E48F084(v66);
    }
    if ((*(_BYTE *)(v5 + 29) & 1) != 0)
    {
      sub_22EFC8E88(v5);
      v12 = *(uint64_t **)v14;
      v13 = *(unsigned int *)(v14 + 8);
    }
    else
    {
      v12 = 0;
      v13 = 0;
    }
    v15 = (uint64_t)sub_22E4CC844(v61, (__n128 *)(v4 + 5856), v12, v13, (uint64_t)v9);
    v16 = a2[64];
    if (v9 && a2[64])
    {
      v15 = sub_22E4CA494(v5, v9);
      v60 = v15 ^ 1;
      if ((v15 & 1) != 0)
      {
        v17 = v2[1];
        v57 = *v2;
        v58 = v17;
        v59 = v2[2];
        v18 = 1;
        goto LABEL_23;
      }
      if (a2[64])
        goto LABEL_32;
    }
    else
    {
      v60 = 1;
      if (v16)
      {
LABEL_32:
        v24 = v2[1];
        *(_OWORD *)v79 = *v2;
        *(_OWORD *)&v79[16] = v24;
        *(_OWORD *)&v79[32] = v2[2];
        sub_22F2469BC(v4, v79, *(_QWORD *)a2, 0, (uint64_t)&v57);
        goto LABEL_22;
      }
    }
    v19 = v2[1];
    v57 = *v2;
    v58 = v19;
    v59 = v2[2];
LABEL_22:
    v18 = 0;
LABEL_23:
    v20 = *(_DWORD *)(v5 + 28);
    if ((v20 & 0x7F) != 0x40 && (*(_BYTE *)(v5 + 97) & 0x80) != 0)
      goto LABEL_35;
    if ((v20 & 0x100) == 0)
      goto LABEL_36;
    sub_22EFC8E88(v5);
    v21 = *(unsigned int *)(v15 + 8);
    if ((_DWORD)v21)
    {
      v22 = 8 * v21;
      v23 = *(_QWORD *)v15;
      while (*(_WORD *)(*(_QWORD *)v23 + 32) != 338)
      {
        v23 += 8;
        v22 -= 8;
        if (!v22)
          goto LABEL_36;
      }
    }
    else
    {
      v23 = *(_QWORD *)v15;
    }
    if (v23 == *(_QWORD *)v15 + 8 * v21)
LABEL_36:
      v25 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 144) + 144) + 2000) + 249) & 3;
    else
LABEL_35:
      v25 = 0;
    v56 = v25;
    *(_QWORD *)&v52 = &v56;
    *((_QWORD *)&v52 + 1) = v5;
    *(_QWORD *)&v53 = v4;
    *((_QWORD *)&v53 + 1) = &v64;
    *(_QWORD *)&v54 = a2;
    *((_QWORD *)&v54 + 1) = &v60;
    v55 = &v65;
    if (sub_22E4C9FC8(v15, (uint64_t)v9))
    {
      v51[0] = v57;
      v51[1] = v58;
      v51[2] = v59;
      sub_22E4CA688((unint64_t)&v52, (uint64_t *)v51);
LABEL_58:
      sub_22E4CDB5C((uint64_t)v61);
      return sub_22E48F084(v66);
    }
    if (a2[65] || sub_22EFBCA2C(v5, *(_QWORD *)(*(_QWORD *)(v4 + 144) + 144)))
    {
      *(_QWORD *)v79 = *(_QWORD *)(v4 + 144);
      *(_QWORD *)&v79[8] = v4;
      *(_DWORD *)&v79[16] = 1;
      v79[20] = 0;
      *(_QWORD *)&v79[32] = &v79[48];
      *(_QWORD *)&v79[40] = 0x400000000;
      v26 = (llvm::Constant *)sub_22E506394(v79, v5);
      v79[16] = 0;
      if (*(_BYTE **)&v79[32] == &v79[48])
      {
        if (!v26)
          goto LABEL_53;
      }
      else
      {
        free(*(void **)&v79[32]);
        if (!v26)
          goto LABEL_53;
      }
      if ((llvm::Constant::isZeroValue(v26) & 1) != 0
        || !v56
        || (v27 = *(_QWORD *)(v4 + 144),
            v28 = (llvm::Constant *)sub_22E4CB01C(v27, (llvm::Type *)(v56 == 2), (uint64_t)v26),
            (v26 = (llvm::Constant *)sub_22E4CA02C(v27, 0, v28)) != 0))
      {
        if (a2[65])
        {
          v29 = *(_QWORD *)(v4 + 144);
          v30 = (uint64_t *)(v4 + 272);
          v41[0] = v57;
          v41[1] = v58;
          v41[2] = v59;
          v31 = *(_QWORD *)(v29 + 8);
          *(_WORD *)&v79[32] = 257;
          sub_22E3BEE6C(v30, v41, v31, (uint64_t)v79, (uint64_t)v42);
          if ((v65 & 4) != 0)
            v33 = 1;
          else
            v33 = (*(unsigned __int8 *)((v65 & 0xFFFFFFFFFFFFFFF0) + 8) >> 2) & 1;
          sub_22E4CB504(v29, v5, (uint64_t)v42, v33, v30, (uint64_t)v26, 0, v32, 0, 0);
        }
        else
        {
          v70 = v57;
          v71 = v58;
          v72 = v59;
          v34 = v65;
          sub_22E6281E0(*(_QWORD **)(v4 + 144), v65, (uint64_t)&v67);
          v76 = v70;
          v77 = v71;
          v78 = v72;
          v35 = *(_QWORD *)(*(_QWORD *)(v4 + 144) + 144);
          v73 = v67;
          v74 = v68;
          v75 = v69;
          memset(&v79[8], 0, 28);
          *(_QWORD *)&v79[40] = 0;
          *(_QWORD *)&v79[48] = 0;
          v80 = 0uLL;
          *(_QWORD *)((char *)&v81 + 4) = 2;
          *(_DWORD *)v79 = 0;
          v82 = 0u;
          v83 = 0u;
          sub_22E3C113C((uint64_t)v79, &v76, v34, 2, &v73, v35);
          LOBYTE(v81) = v81 | 4;
          v45[0] = v26;
          v45[1] = 0;
          v46 = 0;
          v43[6] = v82;
          v43[7] = v83;
          v44 = v84;
          v43[2] = *(_OWORD *)&v79[32];
          v43[3] = *(_OWORD *)&v79[48];
          v43[0] = *(_OWORD *)v79;
          v43[1] = *(_OWORD *)&v79[16];
          v43[4] = v80;
          v43[5] = v81;
          sub_22E4DAAE0(v4, v45, v43, 1, *(double *)&v80);
        }
        goto LABEL_58;
      }
    }
LABEL_53:
    v36 = *(_QWORD *)(v4 + 144);
    if ((*(_BYTE *)(*(_QWORD *)(v36 + 152) + 104) & 0x20) != 0
      && (v37 = sub_22EF5BA38(*(_QWORD *)(v36 + 144), *(_QWORD *)(v5 + 48)),
          sub_22F10C618(*(_QWORD *)(v37 & 0xFFFFFFFFFFFFFFF0))))
    {
      v38 = *(_QWORD *)(v5 + 48);
      v50[0] = v57;
      v50[1] = v58;
      v50[2] = v59;
      sub_22E486680((_QWORD *)v4, v38, v50, 0);
    }
    else
    {
      v49[0] = v57;
      v49[1] = v58;
      v49[2] = v59;
      sub_22E4CA688((unint64_t)&v52, (uint64_t *)v49);
    }
    v70 = v57;
    v71 = v58;
    v72 = v59;
    v39 = v65;
    sub_22E6281E0(*(_QWORD **)(v4 + 144), v65, (uint64_t)&v67);
    v76 = v70;
    v77 = v71;
    v78 = v72;
    v40 = *(_QWORD *)(*(_QWORD *)(v4 + 144) + 144);
    v73 = v67;
    v74 = v68;
    v75 = v69;
    memset(&v79[8], 0, 28);
    *(_QWORD *)&v79[40] = 0;
    *(_QWORD *)&v79[48] = 0;
    v80 = 0uLL;
    *(_QWORD *)((char *)&v81 + 4) = 2;
    *(_DWORD *)v79 = 0;
    v82 = 0u;
    v83 = 0u;
    sub_22E3C113C((uint64_t)v79, &v76, v39, 2, &v73, v40);
    LOBYTE(v81) = v81 | 4;
    v47[6] = v82;
    v47[7] = v83;
    v48 = v84;
    v47[2] = *(_OWORD *)&v79[32];
    v47[3] = *(_OWORD *)&v79[48];
    v47[0] = *(_OWORD *)v79;
    v47[1] = *(_OWORD *)&v79[16];
    v47[4] = v80;
    v47[5] = v81;
    sub_22E4CB220(v4, v64, v5, v47, v18);
    goto LABEL_58;
  }
  return result;
}

__n128 sub_22E4C9A74(uint64_t a1, uint64_t a2)
{
  __n128 *v2;
  uint64_t v5;
  int v6;
  __n128 result;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;

  v2 = (__n128 *)(a2 + 8);
  if (*(_QWORD *)(a2 + 8) && *(_QWORD *)(a1 + 320))
  {
    v5 = *(_QWORD *)a2;
    v6 = sub_22EFBEA2C(*(_QWORD *)a2, *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144));
    if (v6)
      result.n128_f64[0] = sub_22F259BA4(a1, a2, v6);
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 152) + 246) & 6) != 0 && sub_22E4CBAA4(v5))
    {
      v8 = (_QWORD *)sub_22E4899EC(a1 + 1984, 2, 16);
      *v8 = off_24FA63750;
      v8[1] = v5;
    }
    if ((*(_BYTE *)(v5 + 29) & 1) != 0)
    {
      result.n128_f64[0] = sub_22EFC8E88(v5);
      v10 = *(uint64_t **)v9;
      v11 = *(unsigned int *)(v9 + 8);
      v12 = *(uint64_t **)v9;
      if ((_DWORD)v11)
      {
        v13 = 8 * v11;
        v12 = *(uint64_t **)v9;
        while (*(_WORD *)(*v12 + 32) != 143)
        {
          ++v12;
          v13 -= 8;
          if (!v13)
            goto LABEL_20;
        }
      }
      if (v12 != &v10[v11])
      {
        do
        {
          v15 = *v10++;
          v14 = v15;
        }
        while (*(_WORD *)(v15 + 32) != 143);
        v16 = *(_QWORD *)(v14 + 40);
        v17 = *(_QWORD *)(a1 + 144);
        if (sub_22E462B18(v16))
          v18 = v16 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(v16) + 96) & 0x80) == 0);
        else
          v18 = v16;
        v19 = sub_22E6336F0(v17, v18, 0, 0, 0, 0, 0);
        v20 = sub_22E46CF40((_QWORD **)(*(_QWORD *)(a1 + 144) + 280), v16);
        v21 = (_QWORD *)sub_22E4899EC(a1 + 1984, 3, 32);
        *v21 = off_24FA63778;
        v21[1] = v19;
        v21[2] = v20;
        v21[3] = v5;
      }
    }
LABEL_20:
    if (*(_BYTE *)(a2 + 64) && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 152) + 244) & 0x60000) != 0x20000)
    {
      v22 = *(_QWORD *)(*(_QWORD *)a2 + 48);
      v23 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFFF0) + 8);
      v24 = 8;
      if ((v23 & 8) != 0)
      {
        if ((*(_QWORD *)((v23 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x30) == 0x10)
          v24 = 24;
        else
          v24 = 8;
      }
      v27 = *v2;
      v28 = v2[1];
      v29 = v2[2];
      v25 = sub_22F246888(v22);
      v26 = sub_22E4899EC(a1 + 1984, 3, 64);
      *(_QWORD *)v26 = off_24FA2E980;
      *(__n128 *)(v26 + 8) = v27;
      *(__n128 *)(v26 + 24) = v28;
      result = v29;
      *(__n128 *)(v26 + 40) = v29;
      *(_DWORD *)(v26 + 56) = v24;
      *(_BYTE *)(v26 + 60) = 0;
      *(_BYTE *)(v26 + 61) = v25;
    }
  }
  return result;
}

uint64_t sub_22E4C9CC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t Declaration;
  uint64_t v12;
  llvm::Value *v13;
  _QWORD v15[4];
  __int16 v16;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 6060))
    return 0;
  v6 = llvm::ConstantInt::get();
  v7 = (uint64_t *)(a1 + 272);
  v8 = *(_QWORD *)(a1 + 112);
  v16 = 257;
  v9 = sub_22E3C1740((uint64_t *)(a1 + 272), 49, a4, v8, (uint64_t)v15);
  v10 = *(_QWORD *)(a1 + 144);
  Declaration = *(_QWORD *)(v10 + 3464);
  if (Declaration
    || (v15[0] = *(_QWORD *)(v10 + 112),
        Declaration = llvm::Intrinsic::getDeclaration(),
        (*(_QWORD *)(v10 + 3464) = Declaration) != 0))
  {
    v12 = *(_QWORD *)(Declaration + 24);
  }
  else
  {
    v12 = 0;
  }
  v17[0] = v6;
  v17[1] = v9;
  v16 = 257;
  v13 = sub_22E462B78(v7, v12, Declaration, (uint64_t)v17, 2, (uint64_t)v15, 0);
  llvm::Value::getContext(v13);
  *((_QWORD *)v13 + 8) = llvm::AttributeList::addAttributeAtIndex();
  return v6;
}

uint64_t sub_22E4C9DFC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t Declaration;
  uint64_t v10;
  llvm::Value *v11;
  uint64_t result;
  _QWORD v13[4];
  __int16 v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  v5 = a1 + 34;
  v6 = a1[14];
  v14 = 257;
  v7 = sub_22E3C1740(a1 + 34, 49, a3, v6, (uint64_t)v13);
  v8 = a1[18];
  Declaration = *(_QWORD *)(v8 + 3472);
  if (Declaration
    || (v13[0] = *(_QWORD *)(v8 + 112),
        Declaration = llvm::Intrinsic::getDeclaration(),
        (*(_QWORD *)(v8 + 3472) = Declaration) != 0))
  {
    v10 = *(_QWORD *)(Declaration + 24);
  }
  else
  {
    v10 = 0;
  }
  v15[0] = a2;
  v15[1] = v7;
  v14 = 257;
  v11 = sub_22E462B78(v5, v10, Declaration, (uint64_t)v15, 2, (uint64_t)v13, 0);
  llvm::Value::getContext(v11);
  result = llvm::AttributeList::addAttributeAtIndex();
  *((_QWORD *)v11 + 8) = result;
  return result;
}

uint64_t sub_22E4C9F04(llvm::StringMapImpl *a1, _WORD *a2, size_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;
  _QWORD *v9;
  uint64_t v11;

  v11 = 0;
  v6 = sub_22E3CF018(a1, a2, a3, &v11);
  v7 = *v6;
  result = *(_QWORD *)(*v6 + 8);
  if (!result)
  {
    v9 = (_QWORD *)sub_22E3CD3D4((uint64_t)a1 + 24, 24, 3);
    *v9 = *v9 & 0xFFFFFE0000000000 | 5;
    v9[1] = 0;
    *(_QWORD *)(v7 + 8) = v9;
    v9[2] = v7;
    if (a3 == 6 && *(_DWORD *)a2 == 1869639017 && a2[2] == 29810)
      **(_QWORD **)(v7 + 8) |= 0x1080000000uLL;
    return *(_QWORD *)(v7 + 8);
  }
  return result;
}

uint64_t sub_22E4C9FC8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (!a2)
    return 1;
  if ((*(_BYTE *)a2 & 0xFE) == 0x76)
  {
    v3 = *(_QWORD *)(a2 + 16);
    if (v3)
    {
      if ((*(_BYTE *)(v3 + 82) & 0x80) != 0 && !sub_22EFC0EB8(v3) && (*(_BYTE *)(a2 + 2) & 0x40) == 0)
        return 1;
    }
  }
  return 0;
}

uint64_t sub_22E4CA02C(uint64_t a1, uint64_t a2, llvm::Constant *a3)
{
  llvm::Constant *v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  BOOL v9;
  llvm::Type *v11;
  llvm::Constant *v12;
  llvm::Type *v13;
  char isNullValue;
  uint64_t v15;
  uint64_t v16;
  llvm::DataLayout *DataLayout;
  uint64_t StructLayout;
  llvm::LLVMContext *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  llvm::Constant *v25;
  uint64_t NullValue;
  uint64_t v27;
  uint64_t v28;
  llvm::Type *v29;
  uint64_t AggregateElement;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  llvm::Type *v35;
  llvm::Constant *v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  int v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  llvm::ArrayType *Int8Ty;
  uint64_t v48;
  uint64_t v49;
  llvm::Constant *v50;
  unsigned int v51;
  unsigned int v52;
  _QWORD v53[10];

  v3 = a3;
  v5 = a1;
  v53[8] = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)a3;
  v7 = *(unsigned __int8 *)(*(_QWORD *)a3 + 8);
  if (*(_QWORD *)a3)
    v8 = v7 == 16;
  else
    v8 = 0;
  if (v8)
  {
    DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(a1 + 200));
    StructLayout = llvm::DataLayout::getStructLayout();
    Int8Ty = (llvm::ArrayType *)llvm::Type::getInt8Ty(*(llvm::Type **)(v5 + 232), v19);
    v52 = 0;
    v48 = v6;
    v20 = *(unsigned int *)(v6 + 12);
    v50 = v3;
    v46 = (_DWORD *)StructLayout;
    if ((_DWORD)v20)
    {
      v21 = 0;
      v22 = 0;
      v49 = StructLayout + 16;
      LOBYTE(v23) = 1;
      do
      {
        v24 = *(_QWORD *)(v49 + 8 * v21);
        if (v24 > v22)
        {
          v25 = (llvm::Constant *)llvm::ArrayType::get(Int8Ty, (llvm::Type *)(v24 - v22));
          if ((_DWORD)a2 == 1)
            NullValue = sub_22F2A2864(v5, (uint64_t)v25);
          else
            NullValue = llvm::Constant::getNullValue(v25, v25);
          v27 = NullValue;
          v28 = v52;
          if (v52 >= 8uLL)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v28 = v52;
          }
          v53[v28] = v27;
          ++v52;
        }
        if (llvm::Constant::isZeroValue(v3))
          AggregateElement = llvm::Constant::getNullValue(*(llvm::Constant **)(*(_QWORD *)(v48 + 16) + 8 * v21), v29);
        else
          AggregateElement = llvm::Constant::getAggregateElement(v3);
        v31 = (uint64_t *)AggregateElement;
        v32 = v5;
        v33 = sub_22E4CA02C(v5, a2, AggregateElement);
        v34 = v52;
        if (v52 >= 8uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v34 = v52;
        }
        v23 = (v31 == (uint64_t *)v33) & v23;
        v53[v34] = v33;
        ++v52;
        v35 = (llvm::Type *)*v31;
        sub_22E3C304C((uint64_t)DataLayout, *v31);
        llvm::DataLayout::getABITypeAlignment(DataLayout, v35);
        v22 = llvm::TypeSize::operator unsigned long long() + v24;
        ++v21;
        v3 = v50;
        v5 = v32;
      }
      while (v20 != v21);
    }
    else
    {
      v22 = 0;
      v23 = 1;
    }
    if (*v46 <= v22)
    {
      v38 = v52;
      v37 = v48;
      if (!v23)
        goto LABEL_40;
    }
    else
    {
      v36 = (llvm::Constant *)llvm::ArrayType::get(Int8Ty, (llvm::Type *)(*v46 - v22));
      v8 = (_DWORD)a2 == 1;
      v37 = v48;
      if (v8)
        v39 = sub_22F2A2864(v5, (uint64_t)v36);
      else
        v39 = llvm::Constant::getNullValue(v36, v36);
      v40 = v39;
      v41 = v52;
      if (v52 >= 8)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v41 = v52;
      }
      v53[v41] = v40;
      v38 = v52 + 1;
      v3 = v50;
      if (!v23)
        goto LABEL_40;
    }
    if (v38 == *(_DWORD *)(v37 + 12))
      return (uint64_t)v3;
LABEL_40:
    llvm::ConstantStruct::getTypeForElements();
    return llvm::ConstantStruct::get();
  }
  if (v6)
    v9 = v7 == 17;
  else
    v9 = 0;
  if (v9)
  {
    v51 = 0;
    v11 = *(llvm::Type **)(v6 + 32);
    if (v11)
    {
      v12 = *(llvm::Constant **)(v6 + 24);
      isNullValue = llvm::Constant::isNullValue(a3);
      if ((isNullValue & 1) != 0)
      {
        v15 = llvm::Constant::getNullValue(v12, v13);
        v16 = sub_22E4CA02C(a1, a2, v15);
      }
      else
      {
        v16 = 0;
      }
      v43 = 1;
      do
      {
        if ((isNullValue & 1) == 0)
        {
          v44 = llvm::Constant::getAggregateElement(v3);
          v16 = sub_22E4CA02C(a1, a2, v44);
        }
        v45 = v51;
        if (v51 >= 8uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v45 = v51;
        }
        v53[v45] = v16;
        ++v51;
        v8 = v11 == (llvm::Type *)v43++;
      }
      while (!v8);
      if (*(llvm::Constant **)v53[0] != v12)
      {
        llvm::ArrayType::get(*(llvm::ArrayType **)v53[0], v11);
        return llvm::ConstantArray::get();
      }
    }
  }
  return (uint64_t)v3;
}

BOOL sub_22E4CA494(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 result;
  BOOL v11;
  _DWORD *v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned int v15;
  unsigned __int8 **v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  _BYTE **v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v3 = sub_22EFFBBCC(a2);
  v4 = *v3;
  if (v4 == 224)
  {
    v12 = (_DWORD *)*((_QWORD *)v3 + 2);
    v15 = *v12;
    v14 = (unsigned __int8 **)(v12 + 4);
    v13 = v15;
    if (v15 >= 0x100)
    {
      v16 = (unsigned __int8 **)((char *)v14 + ((v13 >> 5) & 0x7FFFFF8));
      while (1)
      {
        v17 = (uint64_t)*v14;
        v18 = **v14;
        if ((v18 + 21) >= 0x7Bu)
        {
          if ((sub_22E4CA494(a1) & 1) != 0)
            return 1;
        }
        else
        {
          if (v18 != 12)
            return 1;
          v19 = *(_QWORD *)(v17 + 8);
          if ((v19 & 1) != 0)
          {
            v20 = (uint64_t *)((v19 & 0xFFFFFFFFFFFFFFFELL) + 8);
            v21 = &v20[*(unsigned int *)(v19 & 0xFFFFFFFFFFFFFFFELL)];
          }
          else
          {
            if (v19)
              v20 = (uint64_t *)(v17 + 8);
            else
              v20 = 0;
            if (v19)
              v21 = (uint64_t *)(v17 + 16);
            else
              v21 = 0;
          }
          while (v20 != v21)
          {
            if (*v20)
              v22 = (*(_DWORD *)(*v20 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9;
            else
              v22 = 0;
            if (v22 && sub_22EFBC5B4(*v20) && (sub_22E4CA494(a1) & 1) != 0)
              return 1;
            ++v20;
          }
        }
        if (++v14 == v16)
          return 0;
      }
    }
    return 0;
  }
  if (v4 != 114)
  {
    sub_22F0D492C((uint64_t)v3);
    v28 = v30;
    v23 = v32;
    v29 = v31;
    v24 = v33;
    while (1)
    {
      v25 = v28;
      if ((_QWORD)v28 == v23 && *((_QWORD *)&v28 + 1) == v24)
        break;
      if ((BYTE8(v28) & 3) != 0)
      {
        if ((*((_QWORD *)&v28 + 1) & 0xFFFFFFFFFFFFFFFCLL) != 0)
          v27 = (_BYTE **)((*((_QWORD *)&v28 + 1) & 0xFFFFFFFFFFFFFFFCLL) + 40);
        else
          v27 = (_BYTE **)sub_22F3AC1A8(*(_QWORD *)v28);
        if ((sub_22E4CD1B0(a1, *v27) & 1) != 0)
          return 1;
        if (*((_QWORD *)&v25 + 1) >= 4uLL)
          sub_22F0D8720((uint64_t)&v28);
        else
          sub_22F3F2FE0((uint64_t)&v28, 1);
      }
      else
      {
        if ((sub_22E4CD1B0(a1, *(_BYTE **)v28) & 1) != 0)
          return 1;
        *(_QWORD *)&v28 = v25 + 8;
      }
    }
    return 0;
  }
  v5 = *((_QWORD *)v3 + 2);
  v6 = *(unsigned int *)(v5 + 112);
  if (!(_DWORD)v6)
    return 0;
  v7 = *(uint64_t **)(v5 + 104);
  v8 = 16 * v6 - 16;
  do
  {
    v9 = *v7;
    v7 += 2;
    result = (v9 & 0xFFFFFFFFFFFFFFF8) == a1;
    v11 = (v9 & 0xFFFFFFFFFFFFFFF8) == a1 || v8 == 0;
    v8 -= 16;
  }
  while (!v11);
  return result;
}

unint64_t sub_22E4CA688(unint64_t result, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  unint64_t v20;
  uint64_t v21;
  llvm::Constant *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  llvm::Type *v31;
  uint64_t v32;
  llvm::Constant *NullValue;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  llvm::Constant *v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  llvm::Constant *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  llvm::PHINode *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t *v73;
  llvm::GetElementPtrInst *v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  _OWORD v78[3];
  _OWORD v79[3];
  __int128 v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  _QWORD v89[3];
  char v90;
  _BYTE v91[32];
  __int16 v92;
  __int128 v93;
  _BYTE v94[32];

  if (**(_DWORD **)result)
  {
    v2 = result;
    v3 = *(_QWORD *)(result + 8);
    if ((*(_BYTE *)(v3 + 29) & 2) == 0)
    {
      v5 = *(_QWORD **)(result + 16);
      v6 = *(_QWORD *)(v5[18] + 144);
      v7 = *(_BYTE *)(*(_QWORD *)(v6 + 2000) + 160);
      if ((v7 & 4) != 0)
      {
        v8 = *(_QWORD *)(v3 + 16);
        v9 = v8 & 0xFFFFFFFFFFFFFFF8;
        if ((v8 & 4) != 0)
          v9 = *(_QWORD *)v9;
        while (v9)
        {
          result = sub_22EFC84D4(v9);
          if ((result & 1) != 0)
            return result;
          v10 = *(_WORD *)(v9 + 8) & 0x7F;
          v11 = -40;
          if (v10 > 0x46)
          {
            if (v10 != 83)
            {
              if (v10 == 71)
              {
                v11 = -56;
              }
              else if (v10 != 81)
              {
                goto LABEL_19;
              }
            }
          }
          else
          {
            if (v10 > 0x18)
              goto LABEL_18;
            if (v10 == 16)
              goto LABEL_11;
            if (((1 << v10) & 0x1066) != 0)
              goto LABEL_25;
            if (v10 == 24)
            {
LABEL_11:
              v11 = -48;
            }
            else
            {
LABEL_18:
              if (v10 != 70)
              {
LABEL_19:
                v12 = v10 - 52;
                if (v10 - 33 >= 5)
                  v13 = -48;
                else
                  v13 = -64;
                if (v12 >= 6)
                  v11 = v13;
                else
                  v11 = -72;
                goto LABEL_25;
              }
              v11 = -64;
            }
          }
LABEL_25:
          v14 = *(_QWORD *)(v9 + v11 + 16);
          v9 = v14 & 0xFFFFFFFFFFFFFFF8;
          if ((v14 & 4) != 0)
            v9 = *(_QWORD *)v9;
        }
      }
      if ((v7 & 8) == 0
        || (v15 = *(_QWORD *)(v3 + 48), v15 < 0x10)
        || (v16 = *(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0)) == 0
        || (*(_DWORD *)(v16 + 16) & 0xFEu) - 6 < 0xFFFFFFFC
        || (v17 = *(_QWORD *)(v16 + 32), v17 < 0x10)
        || (v18 = *(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF0)) == 0
        || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
      {
        if ((v7 & 2) == 0
          || (*(_QWORD *)&v93 = *(_QWORD *)(v3 + 48), result = sub_22F111438(&v93, v6), (result & 1) != 0))
        {
          v19 = **(_BYTE ***)(v2 + 24);
          if (!v19
            || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v5[18] + 144) + 2000) + 160) & 1) == 0
            || (*v19 & 0xFE) != 0x76)
          {
            if (*(_BYTE *)(*(_QWORD *)(v2 + 32) + 64) && !**(_BYTE **)(v2 + 40))
            {
              v45 = *((_OWORD *)a2 + 1);
              v78[0] = *(_OWORD *)a2;
              v78[1] = v45;
              v78[2] = *((_OWORD *)a2 + 2);
              sub_22F2469BC((uint64_t)v5, v78, *(_QWORD *)(v2 + 8), 0, (uint64_t)&v93);
              v46 = *(_OWORD *)v94;
              *(_OWORD *)a2 = v93;
              *((_OWORD *)a2 + 1) = v46;
              *((_OWORD *)a2 + 2) = *(_OWORD *)&v94[16];
            }
            v20 = **(_QWORD **)(v2 + 48);
            v21 = *(_QWORD *)(v2 + 8);
            v23 = *a2;
            v22 = (llvm::Constant *)a2[1];
            v24 = a2[2];
            v76 = *(_OWORD *)(a2 + 3);
            v77 = a2[5];
            v25 = *(_QWORD *)(v5[18] + 144);
            v26 = *(_QWORD *)(v25 + 2000);
            v27 = *(_WORD *)(v26 + 249);
            v28 = HIDWORD(*(_QWORD *)(v26 + 152));
            result = sub_22EF5CCD0(v25, *(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v93);
            if ((v20 & 4) != 0)
              v29 = 1;
            else
              v29 = (*(unsigned __int8 *)((v20 & 0xFFFFFFFFFFFFFFF0) + 8) >> 2) & 1;
            v30 = v27 & 3;
            if ((_QWORD)v93)
            {
              if (v30 == 2)
              {
                result = sub_22E6374B0(v5[18]);
                if ((result & 1) == 0)
                {
                  v41 = v5[18];
                  *(_OWORD *)&v94[8] = v76;
                  *(_QWORD *)v94 = v24;
                  *(_QWORD *)&v94[24] = v77;
                  v42 = (llvm::Constant *)sub_22F2A2864(v41, (uint64_t)v22);
                  v43 = sub_22E4CA02C(v41, 1, v42);
                  *(_QWORD *)&v93 = v23;
                  *((_QWORD *)&v93 + 1) = v22;
                  return sub_22E4CB504(v41, v21, (uint64_t)&v93, v29, v5 + 34, v43, 1, v44, 0, 0);
                }
              }
              else if (v30 == 1)
              {
                result = sub_22E6374B0(v5[18]);
                if ((result & 1) == 0)
                {
                  v32 = v5[18];
                  *(_OWORD *)&v94[8] = v76;
                  *(_QWORD *)v94 = v24;
                  *(_QWORD *)&v94[24] = v77;
                  NullValue = (llvm::Constant *)llvm::Constant::getNullValue(v22, v31);
                  v34 = sub_22E4CA02C(v32, 0, NullValue);
                  *(_QWORD *)&v93 = v23;
                  *((_QWORD *)&v93 + 1) = v22;
                  return sub_22E4CB504(v32, v21, (uint64_t)&v93, v29, v5 + 34, v34, 1, v35, v28, v28 != 0);
                }
              }
            }
            else
            {
              result = sub_22EF5C728(*(_QWORD *)(v5[18] + 144), v20);
              if (result && *(_BYTE *)(result + 16) == 5)
              {
                v36 = (uint64_t *)sub_22F297878((uint64_t)v5, result);
                v38 = v37;
                result = sub_22EF5CCD0(*(_QWORD *)(v5[18] + 144), *(_QWORD *)(v37 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v93);
                v75 = v93;
                if (v30 == 2)
                {
                  result = sub_22E6374B0(v5[18]);
                  if ((result & 1) == 0)
                  {
                    v47 = v5[18];
                    v48 = (llvm::Constant *)sub_22F2A2864(v47, (uint64_t)v22);
                    v71 = sub_22E4CA02C(v47, 1, v48);
                    v70 = sub_22EF5D130(*(_QWORD *)(v5[18] + 144), v38);
                    *(_QWORD *)&v93 = "vla-setup.loop";
                    *(_WORD *)&v94[16] = 259;
                    v69 = (_QWORD *)operator new();
                    llvm::BasicBlock::BasicBlock();
                    *(_QWORD *)&v93 = "vla-init.loop";
                    *(_WORD *)&v94[16] = 259;
                    v72 = (_QWORD *)operator new();
                    llvm::BasicBlock::BasicBlock();
                    *(_QWORD *)&v93 = "vla-init.cont";
                    *(_WORD *)&v94[16] = 259;
                    v49 = (_QWORD *)operator new();
                    llvm::BasicBlock::BasicBlock();
                    v50 = llvm::ConstantInt::get();
                    *(_QWORD *)&v93 = "vla.iszerosized";
                    *(_WORD *)&v94[16] = 259;
                    v73 = v36;
                    v51 = sub_22E3C18F4((uint64_t)(v5 + 34), 32, v36, v50, (uint64_t)&v93);
                    v52 = llvm::User::operator new((llvm::User *)0x40);
                    MEMORY[0x23489C09C](v52, v49, v69, v51, 0);
                    *(_WORD *)&v94[16] = 257;
                    sub_22E3C12C8(v5 + 34, v52, (uint64_t)&v93);
                    sub_22E5ED9B4(v5, v69, 0);
                    if (v75 != 1)
                    {
                      v53 = llvm::ConstantInt::get();
                      *(_WORD *)&v94[16] = 257;
                      v73 = (uint64_t *)sub_22E3BDEA8((uint64_t)(v5 + 34), (uint64_t)v36, v53, (uint64_t)&v93, 1, 0);
                    }
                    v54 = (uint64_t *)llvm::ConstantInt::get();
                    *(_QWORD *)&v85 = v23;
                    *((_QWORD *)&v85 + 1) = v22;
                    v87 = v76;
                    v86 = v24;
                    v88 = v77;
                    v55 = v5[1];
                    *(_QWORD *)&v93 = "vla.begin";
                    *(_WORD *)&v94[16] = 259;
                    sub_22E3BEE6C(v5 + 34, &v85, v55, (uint64_t)&v93, (uint64_t)v89);
                    v56 = v89[1];
                    if ((v90 & 3) != 0)
                      v57 = (uint64_t *)sub_22F28ABCC(v89, v5);
                    else
                      v57 = (uint64_t *)v89[0];
                    *(_QWORD *)&v93 = "vla.end";
                    *(_WORD *)&v94[16] = 259;
                    v74 = sub_22E3E5044(v5 + 34, v56, v57, v73, (uint64_t)&v93);
                    v58 = v5[40];
                    sub_22E5ED9B4(v5, v72, 0);
                    v59 = llvm::PointerType::get();
                    *(_QWORD *)&v93 = "vla.cur";
                    *(_WORD *)&v94[16] = 259;
                    v60 = (llvm::PHINode *)sub_22E3C4B80(v5 + 34, v59, 2, (uint64_t)&v93);
                    if ((v90 & 3) != 0)
                      v61 = sub_22F28ABCC(v89, v5);
                    else
                      v61 = v89[0];
                    sub_22E3C4C50(v60, v61, v58);
                    v62 = v5[1];
                    *(_QWORD *)&v80 = v60;
                    *((_QWORD *)&v80 + 1) = v62;
                    v81 = (v75 | v24) & -(v75 | v24);
                    v82 = 0;
                    v83 = 0;
                    v84 = 0;
                    v63 = v5[18];
                    sub_22E4C7EF4(v63, v21, v71, v70, (uint64_t)&v93);
                    v64 = *(_QWORD *)(v63 + 8);
                    v92 = 257;
                    sub_22E3BEE6C(v5 + 34, &v93, v64, (uint64_t)v91, (uint64_t)v79);
                    sub_22E3E4F38((uint64_t)(v5 + 34), &v80, v79);
                    llvm::Instruction::addAnnotationMetadata();
                    v65 = v5[1];
                    *(_QWORD *)&v93 = "vla.next";
                    *(_WORD *)&v94[16] = 259;
                    v66 = (uint64_t *)sub_22E3E5044(v5 + 34, v65, (uint64_t *)v60, v54, (uint64_t)&v93);
                    *(_QWORD *)&v93 = "vla-init.isdone";
                    *(_WORD *)&v94[16] = 259;
                    v67 = sub_22E3C18F4((uint64_t)(v5 + 34), 32, v66, (uint64_t)v74, (uint64_t)&v93);
                    v68 = llvm::User::operator new((llvm::User *)0x40);
                    MEMORY[0x23489C09C](v68, v49, v72, v67, 0);
                    *(_WORD *)&v94[16] = 257;
                    sub_22E3C12C8(v5 + 34, v68, (uint64_t)&v93);
                    sub_22E3C4C50(v60, (uint64_t)v66, (uint64_t)v72);
                    return sub_22E5ED9B4(v5, v49, 0);
                  }
                }
                else if (v30 == 1)
                {
                  result = sub_22E6374B0(v5[18]);
                  if ((result & 1) == 0)
                  {
                    if (v75 != 1)
                    {
                      v39 = llvm::ConstantInt::get();
                      *(_WORD *)&v94[16] = 257;
                      v36 = (uint64_t *)sub_22E3BDEA8((uint64_t)(v5 + 34), (uint64_t)v36, v39, (uint64_t)&v93, 1, 0);
                    }
                    if (v28)
                    {
                      v40 = llvm::ConstantInt::get();
                      *(_WORD *)&v94[16] = 257;
                      sub_22E3C18F4((uint64_t)(v5 + 34), 34, v36, v40, (uint64_t)&v93);
                      *(_WORD *)&v94[16] = 257;
                      llvm::IRBuilderBase::CreateSelect();
                    }
                    *(_QWORD *)&v93 = v23;
                    *((_QWORD *)&v93 + 1) = v22;
                    *(_OWORD *)&v94[8] = v76;
                    *(_QWORD *)v94 = v24;
                    *(_QWORD *)&v94[24] = v77;
                    llvm::ConstantInt::get();
                    sub_22F2483D8((uint64_t)(v5 + 34), &v93);
                    return llvm::Instruction::addAnnotationMetadata();
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_22E4CB01C(uint64_t a1, llvm::Type *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  void *v18[2];
  _QWORD v19[9];

  v19[8] = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)a3;
  if (*(unsigned __int8 *)(a3 + 16) - 11 > 1)
  {
    v7 = a3;
    if ((*(_DWORD *)(v5 + 8) & 0xFC | 2) == 0x12 && sub_22E4CD2BC(a3))
    {
      v8 = *(_DWORD *)(v7 + 20) & 0x7FFFFFF;
      v18[0] = v19;
      v18[1] = (void *)0x800000000;
      sub_22E4639CC((uint64_t)v18, v8, 0);
      v9 = *(_DWORD *)(v7 + 20) & 0x7FFFFFF;
      if ((_DWORD)v9)
      {
        v10 = 0;
        v11 = 0;
        v12 = 32 * v9;
        do
        {
          v13 = *(_DWORD *)(v7 + 20);
          if ((v13 & 0x40000000) != 0)
            v14 = *(_QWORD *)(v7 - 8);
          else
            v14 = v7 - 32 * (v13 & 0x7FFFFFF);
          v15 = sub_22E4CB01C(a1, a2, *(_QWORD *)(v14 + v11));
          *(_QWORD *)((char *)v18[0] + v10) = v15;
          v11 += 32;
          v10 += 8;
        }
        while (v12 != v11);
      }
      v16 = *(unsigned __int8 *)(v5 + 8);
      if (v16 == 16)
      {
        v17 = llvm::ConstantStruct::get();
      }
      else if (v16 == 17)
      {
        v17 = llvm::ConstantArray::get();
      }
      else
      {
        v17 = llvm::ConstantVector::get();
      }
      v7 = v17;
      if (v18[0] != v19)
        free(v18[0]);
    }
    return v7;
  }
  else if ((_DWORD)a2 == 1)
  {
    return sub_22F2A2864(a1, *(_QWORD *)a3);
  }
  else
  {
    return llvm::Constant::getNullValue(*(llvm::Constant **)a3, a2);
  }
}

unint64_t sub_22E4CB220(uint64_t a1, unsigned __int8 *a2, std::string::size_type a3, __int128 *a4, uint64_t a5)
{
  uint64_t v10;
  int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v17;
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _OWORD v39[3];
  uint64_t v40;
  char v41;
  _OWORD v42[8];
  uint64_t v43;
  _OWORD v44[8];
  uint64_t v45;
  _OWORD v46[8];
  uint64_t v47;
  _OWORD v48[3];
  uint64_t v49;
  _OWORD v50[3];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;

  v10 = *(_QWORD *)(a3 + 48);
  v11 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if ((v11 & 0xFE) == 0x28)
  {
    sub_22E4DDB88(a1, (uint64_t)a2, (uint64_t)&v54);
    if ((_DWORD)a5)
    {
      v24 = *(__int128 *)((char *)a4 + 24);
      v50[0] = *(__int128 *)((char *)a4 + 8);
      v50[1] = v24;
      v50[2] = *(__int128 *)((char *)a4 + 40);
      sub_22F2469BC(a1, v50, a3, 1, (uint64_t)&v51);
      v25 = v52;
      *(__int128 *)((char *)a4 + 8) = v51;
      *(__int128 *)((char *)a4 + 24) = v25;
      *(__int128 *)((char *)a4 + 40) = v53;
    }
    v48[0] = v54;
    v48[1] = v55;
    v48[2] = v56;
    v49 = v57;
    v12 = a4[7];
    v46[6] = a4[6];
    v46[7] = v12;
    v47 = *((_QWORD *)a4 + 16);
    v13 = a4[3];
    v46[2] = a4[2];
    v46[3] = v13;
    v14 = a4[5];
    v46[4] = a4[4];
    v46[5] = v14;
    v15 = a4[1];
    v46[0] = *a4;
    v46[1] = v15;
    return sub_22E4DAAE0(a1, v48, v46, 1, *(double *)&v15);
  }
  else
  {
    v17 = sub_22E619D68(v10);
    if (v17)
    {
      if (v17 == 2)
      {
        if (v11 == 6)
        {
          v33 = a4[7];
          v42[6] = a4[6];
          v42[7] = v33;
          v43 = *((_QWORD *)a4 + 16);
          v34 = a4[3];
          v42[2] = a4[2];
          v42[3] = v34;
          v35 = a4[5];
          v42[4] = a4[4];
          v42[5] = v35;
          v36 = a4[1];
          v42[0] = *a4;
          v42[1] = v36;
          return sub_22F244FC0(a1, (uint64_t)a2, (uint64_t)v42);
        }
        else
        {
          if ((*(_DWORD *)(a3 + 28) & 0x7Fu) - 60 >= 7)
          {
            v18 = 17;
            if ((*(_DWORD *)(a3 + 28) & 0x7Fu) - 52 >= 0xFFFFFFFD)
            {
              if (sub_22E4EF360(a1, a3))
                v18 = 17;
              else
                v18 = 1;
            }
          }
          else
          {
            v18 = 1;
          }
          v23 = *(__int128 *)((char *)a4 + 24);
          v39[0] = *(__int128 *)((char *)a4 + 8);
          v39[1] = v23;
          v39[2] = *(__int128 *)((char *)a4 + 40);
          v40 = *((_QWORD *)a4 + 9);
          v41 = v18;
          return sub_22E4EF100(a1, a2, v39);
        }
      }
      else
      {
        v26 = sub_22F262930(a1, a2, 0, 0);
        v28 = v27;
        if ((_DWORD)a5)
        {
          v37 = *(__int128 *)((char *)a4 + 24);
          v51 = *(__int128 *)((char *)a4 + 8);
          v52 = v37;
          v53 = *(__int128 *)((char *)a4 + 40);
          sub_22F2469BC(a1, &v51, a3, 1, (uint64_t)&v54);
          v38 = v55;
          *(__int128 *)((char *)a4 + 8) = v54;
          *(__int128 *)((char *)a4 + 24) = v38;
          *(__int128 *)((char *)a4 + 40) = v56;
        }
        v29 = a4[7];
        v60 = a4[6];
        v61 = v29;
        v62 = *((_QWORD *)a4 + 16);
        v30 = a4[3];
        v56 = a4[2];
        v57 = v30;
        v31 = a4[5];
        v58 = a4[4];
        v59 = v31;
        v32 = a4[1];
        v54 = *a4;
        v55 = v32;
        *(_QWORD *)&v51 = a1;
        *((_QWORD *)&v51 + 1) = a1 + 272;
        LOWORD(v52) = 0;
        return sub_22E5025C8((uint64_t *)&v51, v26, v28, (uint64_t)&v54, 1);
      }
    }
    else
    {
      v19 = a4[7];
      v44[6] = a4[6];
      v44[7] = v19;
      v45 = *((_QWORD *)a4 + 16);
      v20 = a4[3];
      v44[2] = a4[2];
      v44[3] = v20;
      v21 = a4[5];
      v44[4] = a4[4];
      v44[5] = v21;
      v22 = a4[1];
      v44[0] = *a4;
      v44[1] = v22;
      return sub_22E4C7674(a1, a2, a3, v44, a5);
    }
  }
}

uint64_t sub_22E4CB504(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10)
{
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  llvm::DataLayout *DataLayout;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  BOOL v24;
  unint64_t ABITypeAlignment;
  unint64_t v26;
  unsigned int v27;
  __int128 v28;
  int v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  _OWORD v44[3];
  _OWORD v45[3];
  _OWORD v46[3];
  _OWORD v47[3];
  _OWORD v48[3];
  _OWORD v49[3];
  int v50;
  _OWORD v51[3];
  __int128 v52[3];
  __int128 v53[3];
  _OWORD v54[3];
  _OWORD v55[3];
  __int128 v56[3];
  _BYTE v57[48];
  _BYTE v58[32];
  __int16 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;

  v15 = result;
  if ((*(_DWORD *)(*(_QWORD *)(result + 216) + 56) & 0xFFFFFFFE) == 0x30)
  {
    if (*(unsigned __int8 *)(a6 + 16) - 11 >= 2)
    {
      v16 = *(_OWORD *)(a3 + 16);
      v56[0] = *(_OWORD *)a3;
      v56[1] = v16;
      v56[2] = *(_OWORD *)(a3 + 32);
      v17 = *(_QWORD *)a6;
      LOWORD(v62) = 257;
      sub_22E3BEE6C(a5, v56, v17, (uint64_t)&v60, (uint64_t)v57);
      return sub_22E4CD34C(v15, (llvm::LLVMContext *)v57, (unsigned __int8 *)a6, a4, a5, a7);
    }
    return result;
  }
  v18 = *(_QWORD *)a6;
  DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(result + 200));
  sub_22E3C304C((uint64_t)DataLayout, v18);
  v21 = (unint64_t)(v20 + 7) >> 3;
  v22 = a7;
  v24 = v23 == 1;
  ABITypeAlignment = llvm::DataLayout::getABITypeAlignment(DataLayout, (llvm::Type *)v18);
  *(_QWORD *)&v60 = (ABITypeAlignment + v21 - 1) / ABITypeAlignment * ABITypeAlignment;
  *((_QWORD *)&v60 + 1) = v24;
  result = llvm::TypeSize::operator unsigned long long();
  if (!result)
    return result;
  v26 = result;
  if ((*(_DWORD *)(v18 + 8) & 0xFE) == 0x12)
    v27 = *(unsigned __int8 *)(**(_QWORD **)(v18 + 16) + 8);
  else
    v27 = *(_DWORD *)(v18 + 8);
  if ((v27 | 2) == 0xF || v27 <= 6)
  {
    v28 = *(_OWORD *)(a3 + 16);
    v55[0] = *(_OWORD *)a3;
    v55[1] = v28;
    v55[2] = *(_OWORD *)(a3 + 32);
    result = sub_22E3BEDDC(a5, a6, v55, a4);
    if (!(_DWORD)v22)
      return result;
    return llvm::Instruction::addAnnotationMetadata();
  }
  llvm::ConstantInt::get();
  if (*(_BYTE *)(a6 + 16) == 13)
    goto LABEL_32;
  LODWORD(v60) = 6;
  if (v26 >= 0x21)
  {
    if (!sub_22E4CD880(a6, &v60))
    {
      llvm::Module::getDataLayout(*(llvm::Module **)(v15 + 200));
      result = llvm::isBytewiseValue();
      if (result)
      {
        if (*(unsigned __int8 *)(result + 16) - 11 >= 2 && *(_DWORD *)(result + 32) >= 0x41u)
          llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(result + 24));
        v42 = *(_OWORD *)(a3 + 16);
        v51[0] = *(_OWORD *)a3;
        v51[1] = v42;
        v51[2] = *(_OWORD *)(a3 + 32);
        llvm::ConstantInt::get();
        result = sub_22F2483D8((uint64_t)a5, v51);
        if (!(_DWORD)v22)
          return result;
        return llvm::Instruction::addAnnotationMetadata();
      }
      goto LABEL_20;
    }
LABEL_32:
    if (a10 && v26 > a9)
      llvm::ConstantInt::get();
    v35 = *(_OWORD *)(a3 + 16);
    v54[0] = *(_OWORD *)a3;
    v54[1] = v35;
    v54[2] = *(_OWORD *)(a3 + 32);
    llvm::ConstantInt::get();
    sub_22F2483D8((uint64_t)a5, v54);
    if ((_DWORD)v22)
      llvm::Instruction::addAnnotationMetadata();
    result = llvm::Constant::isNullValue((llvm::Constant *)a6);
    if ((result & 1) == 0 && *(unsigned __int8 *)(a6 + 16) - 11 >= 2)
    {
      v36 = *(_OWORD *)(a3 + 16);
      v53[0] = *(_OWORD *)a3;
      v53[1] = v36;
      v53[2] = *(_OWORD *)(a3 + 32);
      v59 = 257;
      sub_22E3BEE6C(a5, v53, v18, (uint64_t)v58, (uint64_t)&v60);
      v37 = v61;
      *(_OWORD *)a3 = v60;
      *(_OWORD *)(a3 + 16) = v37;
      *(_OWORD *)(a3 + 32) = v62;
      v38 = *(_OWORD *)(a3 + 16);
      v52[0] = *(_OWORD *)a3;
      v52[1] = v38;
      v52[2] = *(_OWORD *)(a3 + 32);
      return sub_22E4CD684(a6, v52, a4, a5, v22);
    }
    return result;
  }
  result = llvm::Module::getDataLayout(*(llvm::Module **)(v15 + 200));
LABEL_20:
  if (v26 > 0x40 || (*(_QWORD *)(*(_QWORD *)(v15 + 184) + 32) & 0x1800) == 0)
    goto LABEL_30;
  v29 = *(unsigned __int8 *)(v18 + 8);
  if (v29 != 17)
  {
    if (v29 == 16 && v18 == *(_QWORD *)(a3 + 8))
    {
      v50 = 0;
      if ((*(_DWORD *)(a6 + 20) & 0x7FFFFFF) != 0)
      {
        v30 = 0;
        do
        {
          v31 = *(_OWORD *)(a3 + 16);
          v49[0] = *(_OWORD *)a3;
          v49[1] = v31;
          v49[2] = *(_OWORD *)(a3 + 32);
          v59 = 257;
          sub_22E3C408C(a5, (uint64_t)v49, v30, (uint64_t)v58, (uint64_t)&v60);
          v48[0] = v60;
          v48[1] = v61;
          v48[2] = v62;
          v59 = 257;
          v32 = sub_22E3C2EA8((uint64_t)a5, a6, (uint64_t)&v50, 1, (uint64_t)v58);
          result = sub_22E4CB504(v15, a2, v48, a4, a5, v32, v22);
          v30 = (v50 + 1);
          v50 = v30;
        }
        while ((_DWORD)v30 != (*(_DWORD *)(a6 + 20) & 0x7FFFFFF));
      }
      return result;
    }
LABEL_30:
    v33 = *(_OWORD *)(a3 + 16);
    v45[0] = *(_OWORD *)a3;
    v45[1] = v33;
    v45[2] = *(_OWORD *)(a3 + 32);
    sub_22E4C7EF4(v15, a2, a6, *(_QWORD *)(a3 + 16), (uint64_t)&v60);
    v34 = *(_QWORD *)(v15 + 8);
    v59 = 257;
    sub_22E3BEE6C(a5, &v60, v34, (uint64_t)v58, (uint64_t)v44);
    result = sub_22E3E4F38((uint64_t)a5, v45, v44);
    if (!(_DWORD)v22)
      return result;
    return llvm::Instruction::addAnnotationMetadata();
  }
  if (v18 != *(_QWORD *)(a3 + 8))
    goto LABEL_30;
  v50 = 0;
  if (*(_QWORD *)(v18 + 32))
  {
    v39 = 0;
    do
    {
      v40 = *(_OWORD *)(a3 + 16);
      v47[0] = *(_OWORD *)a3;
      v47[1] = v40;
      v47[2] = *(_OWORD *)(a3 + 32);
      v59 = 257;
      sub_22E486A58(a5, (uint64_t)v47, v39, (uint64_t)v58, (uint64_t)&v60);
      v46[0] = v60;
      v46[1] = v61;
      v46[2] = v62;
      v59 = 257;
      v41 = sub_22E3C2EA8((uint64_t)a5, a6, (uint64_t)&v50, 1, (uint64_t)v58);
      result = sub_22E4CB504(v15, a2, v46, a4, a5, v41, v22);
      v39 = ++v50;
    }
    while (*(_QWORD *)(v18 + 32) != v50);
  }
  return result;
}

BOOL sub_22E4CBAA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 263)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22E4CBB04(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  _DWORD *v10;
  const char *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  int v24;
  unint64_t v25;
  _DWORD *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t result;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  unint64_t v49;
  _DWORD *v50;
  unsigned int v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t i;
  uint64_t v65;
  uint64_t v66;
  llvm::Value *v67;
  _BOOL4 v68;
  _BOOL4 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  BOOL v75;
  llvm::Value *(*v76)(uint64_t *, _OWORD *);
  uint64_t v77;
  int v78;
  llvm::Type *v79;
  llvm::Constant **v80;
  uint64_t NullValue;
  uint64_t v82;
  BOOL v83;
  unsigned int v84;
  _OWORD v85[8];
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  _OWORD v90[3];
  _OWORD v91[3];
  _OWORD v92[8];
  uint64_t v93;
  _OWORD v94[3];
  _BYTE v95[64];
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  __int128 v101[3];
  __int128 v102[3];
  unint64_t v103;
  unint64_t v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  _OWORD v108[3];
  _OWORD v109[2];
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  _BYTE v114[56];
  __int128 v115[2];
  uint64_t v116;

  v8 = *(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_QWORD *)(a2 + 40) & 7) != 0 || v8 == 0)
  {
    v12 = 0;
    v11 = "";
  }
  else
  {
    v10 = *(_DWORD **)(v8 + 16);
    v13 = *v10;
    v11 = (const char *)(v10 + 4);
    v12 = v13;
  }
  *(_WORD *)&v95[32] = 261;
  *(_QWORD *)v95 = v11;
  *(_QWORD *)&v95[8] = v12;
  llvm::Value::setName();
  v14 = *(_QWORD *)(a2 + 48);
  if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x3E && *(_QWORD *)(a1 + 1912))
  {
    if (*(_BYTE *)(a3 + 48))
    {
      v15 = *(_OWORD *)(a3 + 16);
      v108[0] = *(_OWORD *)a3;
      v108[1] = v15;
      v108[2] = *(_OWORD *)(a3 + 32);
      *(_WORD *)&v95[32] = 257;
      v16 = sub_22E3C2A7C((uint64_t *)(a1 + 272), (uint64_t)v108, (uint64_t)v95);
    }
    else
    {
      v16 = *(_QWORD *)a3;
    }
    return (uint64_t)sub_22E3CB3E4(a1, a2, a4, v16);
  }
  v84 = a4;
  v105 = 0uLL;
  DWORD2(v106) = 0;
  *(_QWORD *)&v106 = 0;
  v107 = 0uLL;
  v104 = 0;
  v103 = 0;
  v17 = sub_22E619D68(v14);
  v18 = *(unsigned __int8 *)(a3 + 48);
  v83 = *(_BYTE *)(a3 + 48) == 0;
  if (!*(_BYTE *)(a3 + 48))
  {
    v34 = *(_QWORD *)(a1 + 144);
    if (*(_DWORD *)(*(_QWORD *)(v34 + 152) + 72))
    {
      (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t, unint64_t))(**(_QWORD **)(v34 + 808) + 584))(v95, *(_QWORD *)(v34 + 808), a1, a2);
      v34 = *(_QWORD *)(a1 + 144);
      if (*(_DWORD *)(*(_QWORD *)(v34 + 152) + 72) && *(_QWORD *)v95)
      {
        v105 = *(_OWORD *)v95;
        v106 = *(_OWORD *)&v95[16];
        v107 = *(_OWORD *)&v95[32];
        v36 = *(_QWORD *)&v95[8];
        v35 = *(_QWORD *)v95;
        if ((_QWORD)v106)
        {
          v37 = __clz(v106) ^ 0x3F;
          v35 = v105 & 0xFFFFFFFFFFFFFFF8 | (v37 >> 3);
          v36 = *(_QWORD *)&v95[8] & 0xFFFFFFFFFFFFFFF8 | v37 & 7;
        }
        v103 = v35;
        v104 = v36;
LABEL_51:
        v43 = *(_QWORD *)a3;
        goto LABEL_52;
      }
    }
    else
    {
      memset(v95, 0, 28);
      *(_QWORD *)&v95[40] = 0;
      *(_QWORD *)&v95[32] = 0;
    }
    v45 = sub_22EF5B404(*(_QWORD *)(v34 + 144), a2, 0);
    v46 = 0;
    v47 = *(_QWORD *)(a2 + 40);
    v48 = "";
    if ((v47 & 7) == 0)
    {
      v49 = v47 & 0xFFFFFFFFFFFFFFF8;
      if (v49)
      {
        v50 = *(_DWORD **)(v49 + 16);
        v51 = *v50;
        v48 = (const char *)(v50 + 4);
        v46 = v51;
      }
    }
    *(_WORD *)&v114[32] = 773;
    *(_QWORD *)v114 = v48;
    *(_QWORD *)&v114[8] = v46;
    *(_QWORD *)&v114[16] = ".addr";
    v52 = sub_22E4D85B8(a1, v14, v45, (uint64_t)v114, &v103);
    v54 = 0;
    v55 = v52 & 0xFFFFFFFFFFFFFFF8;
    if (v52 <= 7)
      v55 = 0;
    v56 = v53 & 0xFFFFFFFFFFFFFFF8;
    if (v52 <= 7)
      v56 = 0;
    if (v52 >= 8)
      v54 = 1 << (v53 & 7 | (8 * (v52 & 7)));
    *(_QWORD *)&v105 = v55;
    *((_QWORD *)&v105 + 1) = v56;
    *(_QWORD *)&v106 = v54;
    DWORD2(v106) = 0;
    v107 = 0uLL;
    goto LABEL_51;
  }
  v19 = *(_OWORD *)(a3 + 16);
  v105 = *(_OWORD *)a3;
  v106 = v19;
  v107 = *(_OWORD *)(a3 + 32);
  v102[0] = v105;
  v102[1] = v19;
  v102[2] = v107;
  v20 = sub_22E66C868(*(_QWORD *)(a1 + 144) + 280, v14, 0);
  v21 = 0;
  v22 = *(_QWORD *)(a2 + 40);
  v23 = "";
  v24 = v17;
  if ((v22 & 7) == 0)
  {
    v25 = v22 & 0xFFFFFFFFFFFFFFF8;
    if (v25)
    {
      v26 = *(_DWORD **)(v25 + 16);
      v27 = *v26;
      v23 = (const char *)(v26 + 4);
      v21 = v27;
    }
  }
  *(_WORD *)&v95[32] = 261;
  *(_QWORD *)v95 = v23;
  *(_QWORD *)&v95[8] = v21;
  sub_22E3BEE6C((uint64_t *)(a1 + 272), v102, v20, (uint64_t)v95, (uint64_t)&v105);
  LODWORD(v28) = *(_DWORD *)(*(_QWORD *)(a1 + 144) + 132);
  if ((BYTE8(v106) & 3) != 0)
    v29 = sub_22F28ABCC(&v105, a1);
  else
    v29 = v105;
  if ((_QWORD)v106)
  {
    v30 = __clz(v106);
    v31 = v30 ^ 0x3F;
    v32 = v29 & 0xFFFFFFFFFFFFFFF8 | ((v30 ^ 0x3Fu) >> 3);
    v33 = *((_QWORD *)&v105 + 1) & 0xFFFFFFFFFFFFFFF8 | v31 & 7;
  }
  else
  {
    v32 = v29;
    v33 = *((_QWORD *)&v105 + 1);
  }
  v103 = v32;
  v104 = v33;
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 152) + 52) & 0x40000000) != 0)
    v28 = 4;
  else
    v28 = v28;
  v38 = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 152) + 52) >> 28) & 4;
  if ((_DWORD)v28 != (_DWORD)v38)
  {
    v39 = llvm::PointerType::get();
    v40 = sub_22E699F3C(*(_QWORD **)(a1 + 144));
    *(_QWORD *)&v105 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v40 + 216))(v40, a1, v29, v28, v38, v39, 1);
    DWORD2(v106) = 0;
    v107 = 0uLL;
  }
  v41 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v41 + 16) == 45)
  {
    v17 = v24;
    if (!*(_BYTE *)(a1 + 1881)
      && (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v41 + 24)) + 76) & 4) != 0
      && (v42 = sub_22EFBEA2C(a2, *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144))) != 0)
    {
      v101[0] = v105;
      v101[1] = v106;
      v101[2] = v107;
      sub_22F259F50(a1, v42, v101, v14);
      v72 = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000);
      *(_QWORD *)v95 = a2;
      v43 = 0;
      sub_22F25B470((uint64_t *)(a1 + 2928), v95)[1] = v72;
    }
    else
    {
      v43 = 0;
    }
  }
  else
  {
    v43 = 0;
    v17 = v24;
  }
LABEL_52:
  v111 = v105;
  v112 = v106;
  v113 = v107;
  sub_22E6281E0(*(_QWORD **)(a1 + 144), v14, (uint64_t)v109);
  *(_OWORD *)v114 = v111;
  *(_OWORD *)&v114[16] = v112;
  *(_OWORD *)&v114[32] = v113;
  v57 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
  v115[0] = v109[0];
  v115[1] = v109[1];
  v116 = v110;
  memset(&v95[8], 0, 28);
  *(_QWORD *)&v95[48] = 0;
  *(_QWORD *)&v95[40] = 0;
  v96 = 0uLL;
  *(_QWORD *)((char *)&v97 + 4) = 2;
  *(_DWORD *)v95 = 0;
  v98 = 0u;
  v99 = 0u;
  sub_22E3C113C((uint64_t)v95, (__int128 *)v114, v14, 2, v115, v57);
  if (v17
    || (v58 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF0) + 8), (v58 & 8) == 0)
    || (v59 = (*(_DWORD *)((v58 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 6) & 7) == 0)
  {
LABEL_55:
    if (v18)
      goto LABEL_57;
    goto LABEL_56;
  }
  v68 = sub_22F24EBE4(a2);
  if (*(char *)(a2 + 96) < 0)
    v59 = 1;
  if (*(_BYTE *)(a3 + 48) && !v43)
  {
    v94[0] = v105;
    v94[1] = v106;
    v94[2] = v107;
    *(_WORD *)&v114[32] = 257;
    v43 = sub_22E3C2A7C((uint64_t *)(a1 + 272), (uint64_t)v94, (uint64_t)v114);
  }
  if (v59 == 2)
  {
    if (!v68)
    {
      v73 = *(_QWORD **)(a1 + 144);
      if ((*(_BYTE *)(v73[23] + 33) & 0x18) == 0)
      {
        v74 = sub_22E507208(v73, *(_QWORD *)(a2 + 48));
        v92[6] = v98;
        v92[7] = v99;
        v93 = v100;
        v92[2] = *(_OWORD *)&v95[32];
        v92[3] = *(_OWORD *)&v95[48];
        v92[4] = v96;
        v92[5] = v97;
        v92[0] = *(_OWORD *)v95;
        v92[1] = *(_OWORD *)&v95[16];
        sub_22E4E87FC(a1, v74, v92, 1);
        v91[0] = *(_OWORD *)&v95[8];
        v91[1] = *(_OWORD *)&v95[24];
        v91[2] = *(_OWORD *)&v95[40];
        sub_22F273398((_QWORD *)a1, (uint64_t)v91, v43, 1);
        v75 = 0;
        v17 = 0;
        goto LABEL_101;
      }
      v43 = sub_22E563CC4((_QWORD *)a1, v43, (uint64_t *)(v73[104] + 248), 222, 0);
    }
    v17 = 0;
    v75 = v83;
LABEL_101:
    v87 = v105;
    v88 = v106;
    v89 = v107;
    if (sub_22E4CBAA4(a2))
      v76 = sub_22F273CC4;
    else
      v76 = sub_22F273CF8;
    if ((**(_QWORD **)(*(_QWORD *)(a1 + 144) + 184) & 0x200) != 0)
      v77 = 3;
    else
      v77 = 2;
    *(_OWORD *)v114 = v87;
    *(_OWORD *)&v114[16] = v88;
    *(_OWORD *)&v114[32] = v89;
    sub_22F259E14(a1, v77, (__int128 *)v114, *(_QWORD *)(a2 + 48), (uint64_t)v76, v77 & 1);
    if (!v75)
      goto LABEL_57;
LABEL_56:
    v85[6] = v98;
    v85[7] = v99;
    v86 = v100;
    v85[2] = *(_OWORD *)&v95[32];
    v85[3] = *(_OWORD *)&v95[48];
    v85[4] = v96;
    v85[5] = v97;
    v85[0] = *(_OWORD *)v95;
    v85[1] = *(_OWORD *)&v95[16];
    sub_22E4E87FC(a1, v43, v85, 1);
    goto LABEL_57;
  }
  if (v68)
  {
    v69 = sub_22E4CBAA4(a2);
    if ((**(_QWORD **)(*(_QWORD *)(a1 + 144) + 184) & 0x200) != 0)
      v70 = 3;
    else
      v70 = 2;
    v71 = sub_22E4899EC(a1 + 1984, v70, 24);
    *(_QWORD *)v71 = off_24FA63890;
    *(_QWORD *)(v71 + 8) = v43;
    *(_DWORD *)(v71 + 16) = v69;
  }
  if (v59 != 3)
  {
    v87 = v105;
    v88 = v106;
    v89 = v107;
    v17 = 0;
    goto LABEL_55;
  }
  v90[0] = v105;
  v90[1] = v106;
  v90[2] = v107;
  sub_22E5644CC((_QWORD *)a1, v90, v43);
  v111 = v105;
  v112 = v106;
  v113 = v107;
  sub_22F259E14(a1, 3, &v111, *(_QWORD *)(a2 + 48), (uint64_t)sub_22F273D2C, 1);
  v17 = 0;
LABEL_57:
  *(_OWORD *)&v114[8] = v105;
  *(_OWORD *)&v114[24] = v106;
  *(_OWORD *)&v114[40] = v107;
  *(_QWORD *)v114 = a2;
  sub_22E3CEC9C(a1 + 2904, v114, (__int128 *)&v114[8], (uint64_t)&v111);
  v60 = *(_QWORD *)(a1 + 1592);
  if (v60)
  {
    if ((*(_BYTE *)(v60 + 29) & 2) == 0)
    {
      v61 = *(_QWORD *)(a1 + 4192);
      if ((v61 == a2 || (*(_BYTE *)(a2 + 29) & 2) == 0)
        && (((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 184) + 104) & 0x100) != 0
          || (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 184) + 104) & 0x180) == 0x80)
         && v61 == a2
         || (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 184) + 104) & 0x100) != 0 && !v17))
      {
        *(_OWORD *)v114 = v105;
        *(_OWORD *)&v114[16] = v106;
        *(_OWORD *)&v114[32] = v107;
        v62 = sub_22E4899EC(a1 + 1984, 2, 56);
        *(_QWORD *)v62 = off_24FA63690;
        *(_OWORD *)(v62 + 8) = *(_OWORD *)v114;
        *(_OWORD *)(v62 + 24) = *(_OWORD *)&v114[16];
        *(_OWORD *)(v62 + 40) = *(_OWORD *)&v114[32];
      }
    }
  }
  if (!*(_BYTE *)(a1 + 2892))
  {
    v65 = *(_QWORD *)(a1 + 2880);
    if (v65)
    {
      if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 184) + 96) & 0x1800000000000000) != 0
        && !*(_BYTE *)(a1 + 1881))
      {
        v66 = sub_22E49BF68(*(_QWORD *)(a1 + 2880), a2, v103 & 0xFFFFFFFFFFFFFFF8, v84 | 0x100000000, a1 + 272, 0);
        if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x40)
        {
          *(_QWORD *)&v111 = a2;
          *((_QWORD *)&v111 + 1) = v66;
          sub_22F2543D4((uint64_t)v114, v65 + 2712, (uint64_t *)&v111, (_QWORD *)&v111 + 1);
        }
      }
    }
  }
  result = sub_22E4C7444(a2);
  if ((_DWORD)result)
  {
    if ((BYTE8(v106) & 3) != 0)
      v67 = (llvm::Value *)sub_22F28ABCC(&v105, a1);
    else
      v67 = (llvm::Value *)v105;
    result = sub_22F298078((uint64_t *)a1, a2, v67);
  }
  v63 = *(_QWORD *)(a1 + 5904);
  if (v63)
  {
    for (i = *(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0); ; i = *(_QWORD *)(result + 40))
    {
      result = sub_22F10D774(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0));
      if (!result)
        break;
      v78 = *(_DWORD *)(result + 16) >> 19;
      if ((v78 - 34) < 3)
        break;
      if (v78 == 33)
      {
        *(_BYTE *)(a1 + 1880) = 1;
        v80 = *(llvm::Constant ***)a3;
        *(_WORD *)&v114[32] = 257;
        NullValue = llvm::Constant::getNullValue(*v80, v79);
        v82 = sub_22E3C18F4(a1 + 272, 33, (uint64_t *)v80, NullValue, (uint64_t)v114);
        LOWORD(v113) = 257;
        result = sub_22E3E49C4(a1 + 272, v63, v82, (uint64_t)&v111);
        *(_QWORD *)(a1 + 5904) = result;
        *(_BYTE *)(a1 + 1880) = 0;
        return result;
      }
    }
  }
  return result;
}

BOOL sub_22E4CC568(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  int v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  _QWORD *v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;

  if ((*a2 + 21) >= 0x7Bu)
  {
    v3 = sub_22EFFBBCC(a2);
    a2 = v3;
    v4 = *v3;
    if (v4 == 114)
    {
      v6 = *((_QWORD *)v3 + 2);
      v7 = *(unsigned int *)(v6 + 112);
      if ((_DWORD)v7)
      {
        v8 = *(_QWORD **)(v6 + 104);
        v9 = 16 * v7;
        while ((*v8 & 0xFFFFFFFFFFFFFFF8) != a1)
        {
          v8 += 2;
          v9 -= 16;
          if (!v9)
            goto LABEL_9;
        }
        return 1;
      }
    }
    else if (v4 == 161)
    {
      return *((_QWORD *)v3 + 2) == a1;
    }
  }
LABEL_9:
  sub_22F0D492C((uint64_t)a2);
  v16 = v18;
  v10 = v20;
  v17 = v19;
  v11 = v21;
  v13 = *((_QWORD *)&v18 + 1);
  v12 = (uint64_t *)v18;
  if ((_QWORD)v18 == v20 && *((_QWORD *)&v18 + 1) == v21)
    return 0;
  while (1)
  {
    v15 = v12;
    if ((v13 & 3) != 0)
    {
      if ((v13 & 0xFFFFFFFFFFFFFFFCLL) != 0)
        v15 = (_QWORD *)((v13 & 0xFFFFFFFFFFFFFFFCLL) + 40);
      else
        v15 = (_QWORD *)sub_22F3AC1A8(*v12);
    }
    if (*v15 && (sub_22E4CC568(a1) & 1) != 0)
      break;
    if ((v13 & 3) != 0)
    {
      if (v13 >= 4)
        sub_22F0D8720((uint64_t)&v16);
      else
        sub_22F3F2FE0((uint64_t)&v16, 1);
    }
    else
    {
      *(_QWORD *)&v16 = v12 + 1;
    }
    v13 = *((_QWORD *)&v16 + 1);
    v12 = (uint64_t *)v16;
    if (v16 == __PAIR128__(v11, v10))
      return 0;
  }
  return 1;
}

uint64_t sub_22E4CC6C8(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  llvm *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD v14[9];

  v14[8] = *MEMORY[0x24BDAC8D0];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v8 = 0;
    v9 = v14;
    do
    {
      v10 = *(_QWORD *)(a1 + v8 + 8);
      if ((unint64_t)(v10 + 1) >= 2)
      {
        *v9 = v10;
        v9[1] = *(_QWORD *)(a1 + v8 + 16);
        v9 += 2;
      }
      v8 += 16;
    }
    while (v8 != 64);
    if (a2 > 4)
    {
      *(_DWORD *)a1 &= ~1u;
      v11 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](16 * a2, 8);
      *(_QWORD *)(a1 + 16) = v11;
    }
    return sub_22F25AC0C(a1, v14, v9);
  }
  else
  {
    v6 = *(llvm **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](16 * a2, 8);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_22F25AC0C(a1, v6, (_QWORD *)v6 + 2 * v7);
    return llvm::deallocate_buffer(v6, (void *)(16 * v7));
  }
}

_OWORD *sub_22E4CC844(_OWORD *a1, __n128 *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  __int128 v13;
  void *v14;
  __n128 v16;
  unint64_t v17;
  __n128 v18;
  __int128 v19;
  llvm *v20[2];
  unsigned int v21;
  void *__p[2];
  unint64_t v23;

  *a1 = 0u;
  a1[1] = 0u;
  if (a5)
  {
    v20[0] = 0;
    v20[1] = 0;
    v21 = 0;
    __p[1] = 0;
    v23 = 0;
    __p[0] = 0;
    if (a4)
    {
      v6 = a3;
      v8 = &a3[a4];
      do
      {
        v9 = *v6;
        if (*v6)
        {
          if (*(_WORD *)(v9 + 32) == 398)
          {
            v10 = *(unsigned int *)(v9 + 36);
            if ((_DWORD)v10)
            {
              v11 = *(__int128 **)(v9 + 40);
              v12 = 16 * v10;
              do
              {
                v13 = *v11++;
                v19 = v13;
                sub_22E4CC988((uint64_t)v20, (uint64_t)&v19);
                v12 -= 16;
              }
              while (v12);
            }
          }
        }
        ++v6;
      }
      while (v6 != v8);
      v14 = __p[0];
      if (__p[0] == __p[1])
      {
        if (!__p[0])
          goto LABEL_12;
      }
      else
      {
        sub_22F25ACCC((uint64_t)a1 + 8, a2);
        sub_22E4CD0BC((uint64_t)v20);
        v16 = *(__n128 *)__p;
        v17 = v23;
        __p[0] = 0;
        __p[1] = 0;
        v23 = 0;
        v14 = (void *)a2->n128_u64[0];
        if (a2->n128_u64[0])
        {
          a2->n128_u64[1] = (unint64_t)v14;
          v18 = v16;
          operator delete(v14);
          v16 = v18;
          v14 = __p[0];
        }
        *a2 = v16;
        a2[1].n128_u64[0] = v17;
        *(_QWORD *)a1 = a2;
        if (!v14)
          goto LABEL_12;
      }
      __p[1] = v14;
      operator delete(v14);
    }
LABEL_12:
    llvm::deallocate_buffer(v20[0], (void *)(16 * v21));
  }
  return a1;
}

uint64_t sub_22E4CC988(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  unsigned int HashValue;
  uint64_t v7;
  int v8;
  const void *v9;
  size_t v10;
  int i;
  unsigned int v12;
  uint64_t v13;
  const void *v14;
  uint64_t result;
  BOOL v16;
  uint64_t v17;
  unint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  int v28;

  v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)a1;
    HashValue = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue();
    v7 = 0;
    v8 = v4 - 1;
    v9 = *(const void **)a2;
    v10 = *(_QWORD *)(a2 + 8);
    for (i = 1; ; i = v28 + 1)
    {
      v28 = i;
      v12 = HashValue & v8;
      v13 = v5 + 16 * (HashValue & v8);
      v14 = *(const void **)v13;
      if (*(_QWORD *)v13 == -1)
      {
        if (v9 == (const void *)-1)
          return 0;
      }
      else if (v14 == (const void *)-2)
      {
        if (v9 == (const void *)-2)
          return 0;
      }
      else if (v10 == *(_QWORD *)(v13 + 8))
      {
        if (!v10)
          return 0;
        result = memcmp(v9, *(const void **)v13, v10);
        if (!(_DWORD)result)
          return result;
      }
      if (v14 == (const void *)-1)
        break;
      if (v7)
        v16 = 0;
      else
        v16 = v14 == (const void *)-2;
      if (v16)
        v7 = v5 + 16 * v12;
      HashValue = v28 + v12;
    }
    if (v7)
      v17 = v7;
    else
      v17 = v5 + 16 * v12;
  }
  else
  {
    v17 = 0;
  }
  *(_OWORD *)sub_22E4CCD0C(a1, a2, (const void **)a2, v17) = *(_OWORD *)a2;
  v19 = *(_OWORD **)(a1 + 32);
  v18 = *(_QWORD *)(a1 + 40);
  if ((unint64_t)v19 >= v18)
  {
    v21 = *(_OWORD **)(a1 + 24);
    v22 = v19 - v21;
    v23 = v22 + 1;
    if ((unint64_t)(v22 + 1) >> 60)
      abort();
    v24 = v18 - (_QWORD)v21;
    if (v24 >> 3 > v23)
      v23 = v24 >> 3;
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0)
      v25 = 0xFFFFFFFFFFFFFFFLL;
    else
      v25 = v23;
    if (v25)
    {
      if (v25 >> 60)
        sub_22E3B3F8C();
      v26 = (char *)operator new(16 * v25);
    }
    else
    {
      v26 = 0;
    }
    v27 = &v26[16 * v22];
    *(_OWORD *)v27 = *(_OWORD *)a2;
    v20 = v27 + 16;
    if (v19 != v21)
    {
      do
      {
        *((_OWORD *)v27 - 1) = *(v19 - 1);
        v27 -= 16;
        --v19;
      }
      while (v19 != v21);
      v19 = *(_OWORD **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 24) = v27;
    *(_QWORD *)(a1 + 32) = v20;
    *(_QWORD *)(a1 + 40) = &v26[16 * v25];
    if (v19)
      operator delete(v19);
  }
  else
  {
    *v19 = *(_OWORD *)a2;
    v20 = v19 + 1;
  }
  *(_QWORD *)(a1 + 32) = v20;
  return 1;
}

uint64_t sub_22E4CCB74(uint64_t result, int a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = result;
  if (a2)
  {
    v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    *(_DWORD *)(result + 16) = v4;
    result = MEMORY[0x23489D23C](16 * v4, 8);
    *(_QWORD *)v2 = result;
    *(_QWORD *)(v2 + 8) = 0;
    v5 = *(unsigned int *)(v2 + 16);
    if ((_DWORD)v5)
    {
      v6 = 16 * v5;
      do
      {
        *(_OWORD *)result = xmmword_22F4572A0;
        result += 16;
        v6 -= 16;
      }
      while (v6);
    }
  }
  else
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 16) = 0;
  }
  return result;
}

uint64_t sub_22E4CCC08(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  unsigned int HashValue;
  uint64_t v8;
  int v9;
  const void *v10;
  int i;
  unsigned int v12;
  uint64_t v13;
  const void *v14;
  size_t v15;
  uint64_t result;
  BOOL v17;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    HashValue = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue();
    v8 = 0;
    v9 = v4 - 1;
    v10 = *(const void **)a2;
    for (i = 1; ; ++i)
    {
      v12 = HashValue & v9;
      v13 = v6 + 16 * (HashValue & v9);
      v14 = *(const void **)v13;
      if (*(_QWORD *)v13 == -1)
      {
        if (v10 == (const void *)-1)
          goto LABEL_11;
      }
      else if (v14 == (const void *)-2)
      {
        if (v10 == (const void *)-2)
          goto LABEL_11;
      }
      else
      {
        v15 = *(_QWORD *)(a2 + 8);
        if (v15 == *(_QWORD *)(v13 + 8) && (!v15 || !memcmp(v10, *(const void **)v13, v15)))
        {
LABEL_11:
          result = 1;
          goto LABEL_12;
        }
      }
      if (v14 == (const void *)-1)
        break;
      if (v8)
        v17 = 0;
      else
        v17 = v14 == (const void *)-2;
      if (v17)
        v8 = v6 + 16 * v12;
      HashValue = i + v12;
    }
    result = 0;
    if (v8)
      v13 = v8;
  }
  else
  {
    v13 = 0;
    result = 0;
  }
LABEL_12:
  *a3 = v13;
  return result;
}

uint64_t sub_22E4CCD0C(uint64_t a1, uint64_t a2, const void **a3, uint64_t a4)
{
  int v6;
  unsigned int v7;
  int v10;
  uint64_t v11;
  unsigned int HashValue;
  uint64_t v13;
  int v14;
  const void *v15;
  int i;
  unsigned int v17;
  const void *v18;
  size_t v19;
  BOOL v20;
  uint64_t v21;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_22E4CCEA0(a1, 2 * v7);
    v10 = *(_DWORD *)(a1 + 16);
    if (v10)
    {
      v11 = *(_QWORD *)a1;
      HashValue = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue();
      v13 = 0;
      v14 = v10 - 1;
      v15 = *a3;
      for (i = 1; ; ++i)
      {
        v17 = HashValue & v14;
        a4 = v11 + 16 * (HashValue & v14);
        v18 = *(const void **)a4;
        if (*(_QWORD *)a4 == -1)
        {
          if (v15 == (const void *)-1)
            goto LABEL_4;
        }
        else if (v18 == (const void *)-2)
        {
          if (v15 == (const void *)-2)
            goto LABEL_4;
        }
        else
        {
          v19 = (size_t)a3[1];
          if (v19 == *(_QWORD *)(a4 + 8) && (!v19 || !memcmp(v15, *(const void **)a4, v19)))
            goto LABEL_4;
        }
        if (v18 == (const void *)-1)
          break;
        if (v13)
          v20 = 0;
        else
          v20 = v18 == (const void *)-2;
        if (v20)
          v13 = v11 + 16 * v17;
        HashValue = i + v17;
      }
      if (v13)
        a4 = v13;
    }
    else
    {
      a4 = 0;
    }
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
    sub_22E4CCEA0(a1, v7);
    v21 = 0;
    sub_22E4CCC08((uint64_t *)a1, (uint64_t)a3, &v21);
    a4 = v21;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)a4 != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_OWORD *sub_22E4CCEA0(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_OWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22E4CCF64(a1, v4, &v4[2 * v3]);
    return (_OWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result++ = xmmword_22F4572A0;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22E4CCF64(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  const void *v12;
  size_t v13;
  int i;
  unsigned int v15;
  uint64_t v16;
  const void *v17;
  BOOL v18;
  int v19;
  uint64_t *v20;

  v3 = a2;
  v4 = result;
  *(_QWORD *)(result + 8) = 0;
  v5 = *(unsigned int *)(result + 16);
  if ((_DWORD)v5)
  {
    v6 = *(_OWORD **)result;
    v7 = 16 * v5;
    do
    {
      *v6++ = xmmword_22F4572A0;
      v7 -= 16;
    }
    while (v7);
  }
  if (a2 != a3)
  {
    v20 = a3;
    do
    {
      result = *v3;
      if ((unint64_t)*v3 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v8 = *(_QWORD *)v4;
        v9 = *(_DWORD *)(v4 + 16);
        result = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue();
        v10 = 0;
        v11 = v9 - 1;
        v12 = (const void *)*v3;
        v13 = v3[1];
        for (i = 1; ; i = v19 + 1)
        {
          v19 = i;
          v15 = result & v11;
          v16 = v8 + 16 * (result & v11);
          v17 = *(const void **)v16;
          if (*(_QWORD *)v16 == -1)
          {
            if (v12 == (const void *)-1)
              goto LABEL_26;
          }
          else if (v17 == (const void *)-2)
          {
            if (v12 == (const void *)-2)
              goto LABEL_26;
          }
          else if (v13 == *(_QWORD *)(v16 + 8))
          {
            if (!v13)
              goto LABEL_26;
            result = memcmp(v12, *(const void **)v16, v13);
            if (!(_DWORD)result)
              goto LABEL_26;
          }
          if (v17 == (const void *)-1)
            break;
          if (v10)
            v18 = 0;
          else
            v18 = v17 == (const void *)-2;
          if (v18)
            v10 = v8 + 16 * v15;
          result = v19 + v15;
        }
        if (v10)
          v16 = v10;
LABEL_26:
        *(_OWORD *)v16 = *(_OWORD *)v3;
        ++*(_DWORD *)(v4 + 8);
        a3 = v20;
      }
      v3 += 2;
    }
    while (v3 != a3);
  }
  return result;
}

uint64_t sub_22E4CD0BC(uint64_t result)
{
  uint64_t v1;
  _OWORD *v2;
  uint64_t v3;

  if (*(_QWORD *)(result + 8))
  {
    v1 = *(unsigned int *)(result + 16);
    if (v1 <= 4 * *(_DWORD *)(result + 8) || v1 < 0x41)
    {
      if ((_DWORD)v1)
      {
        v2 = *(_OWORD **)result;
        v3 = 16 * v1;
        do
        {
          *v2++ = xmmword_22F4572A0;
          v3 -= 16;
        }
        while (v3);
      }
      *(_QWORD *)(result + 8) = 0;
    }
    else
    {
      return sub_22E4CD110(result);
    }
  }
  return result;
}

uint64_t sub_22E4CD110(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  llvm *v6;
  uint64_t v7;

  v1 = result;
  v2 = *(unsigned int *)(result + 16);
  v3 = *(_DWORD *)(result + 8);
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == (_DWORD)v2)
  {
    *(_QWORD *)(result + 8) = 0;
    if ((_DWORD)v2)
    {
      v6 = *(llvm **)result;
      v7 = 16 * v2;
      do
      {
        *(_OWORD *)v6 = xmmword_22F4572A0;
        v6 = (llvm *)((char *)v6 + 16);
        v7 -= 16;
      }
      while (v7);
    }
  }
  else
  {
    llvm::deallocate_buffer(*(llvm **)result, (void *)(16 * v2));
    return sub_22E4CCB74(v1, v5);
  }
  return result;
}

uint64_t sub_22E4CD1B0(uint64_t a1, _BYTE *a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  _QWORD *v7;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if ((*a2 + 21) >= 0x7Bu)
    return sub_22E4CA494(a1);
  sub_22F0D492C((uint64_t)a2);
  v9 = v11;
  v3 = v13;
  v10 = v12;
  v4 = v14;
  while (1)
  {
    while (1)
    {
      v5 = v9;
      if ((_QWORD)v9 == v3 && *((_QWORD *)&v9 + 1) == v4)
        return 0;
      if ((BYTE8(v9) & 3) != 0)
        break;
      if ((sub_22E4CD1B0(a1, *(_QWORD *)v9) & 1) != 0)
        return 1;
      *(_QWORD *)&v9 = v5 + 8;
    }
    v7 = (_QWORD *)((*((_QWORD *)&v9 + 1) & 0xFFFFFFFFFFFFFFFCLL) != 0
                  ? (*((_QWORD *)&v9 + 1) & 0xFFFFFFFFFFFFFFFCLL) + 40
                  : sub_22F3AC1A8(*(_QWORD *)v9));
    if ((sub_22E4CD1B0(a1, *v7) & 1) != 0)
      break;
    if (*((_QWORD *)&v5 + 1) >= 4uLL)
      sub_22F0D8720((uint64_t)&v9);
    else
      sub_22F3F2FE0((uint64_t)&v9, 1);
  }
  return 1;
}

uint64_t sub_22E4CD2BC(uint64_t a1)
{
  uint64_t result;
  int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(unsigned __int8 *)(a1 + 16) - 11 < 2)
    return 1;
  if ((*(_DWORD *)(*(_QWORD *)a1 + 8) & 0xFC | 2) != 0x12)
    return 0;
  v2 = *(_DWORD *)(a1 + 20);
  if ((v2 & 0x40000000) == 0)
  {
    v3 = v2 & 0x7FFFFFF;
    v4 = (uint64_t *)(a1 - 32 * v3);
    if (v3)
      goto LABEL_6;
    return 0;
  }
  v4 = *(uint64_t **)(a1 - 8);
  v3 = v2 & 0x7FFFFFF;
  if (!v3)
    return 0;
LABEL_6:
  v5 = 32 * v3 - 32;
  do
  {
    v6 = *v4;
    v4 += 4;
    result = sub_22E4CD2BC(v6);
    if ((result & 1) != 0)
      break;
    v7 = v5;
    v5 -= 32;
  }
  while (v7);
  return result;
}

uint64_t sub_22E4CD34C(uint64_t result, llvm::LLVMContext *a2, unsigned __int8 *a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned __int8 *v24;
  uint64_t v25;
  __int128 v26;
  __n128 v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned __int8 *v33;
  uint64_t v34;
  __int128 v35;
  __n128 v36;
  llvm::DataLayout *DataLayout;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _OWORD v42[3];
  _BYTE v43[48];
  _OWORD v44[3];
  _BYTE v45[48];
  _QWORD v46[4];
  __int16 v47;
  _OWORD v48[3];
  _BYTE v49[48];
  _OWORD v50[3];
  _OWORD v51[4];

  if ((*(_DWORD *)(*(_QWORD *)a3 + 8) & 0xFE) != 0x10)
  {
    v18 = *((_OWORD *)a2 + 1);
    v51[0] = *(_OWORD *)a2;
    v51[1] = v18;
    v51[2] = *((_OWORD *)a2 + 2);
    result = sub_22E3BEDDC(a5, a3, v51, a4);
    if ((a6 & 1) == 0)
      return result;
    return llvm::Instruction::addAnnotationMetadata();
  }
  v11 = result;
  v12 = a3[16];
  if (v12 == 13)
  {
    llvm::Type::getInt8Ty(*(llvm::Type **)(result + 232), a2);
    DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(v11 + 200));
    llvm::DataLayout::getIntPtrType(DataLayout, *(llvm::LLVMContext **)(v11 + 232));
    v38 = *((_OWORD *)a2 + 1);
    v50[0] = *(_OWORD *)a2;
    v50[1] = v38;
    v50[2] = *((_OWORD *)a2 + 2);
    llvm::ConstantInt::get();
    v39 = llvm::Module::getDataLayout(*(llvm::Module **)(v11 + 200));
    sub_22E3C304C(v39, *(_QWORD *)a3);
    v46[0] = (unint64_t)(v40 + 7) >> 3;
    v46[1] = v41 == 1;
    llvm::TypeSize::operator unsigned long long();
    llvm::ConstantInt::get();
    result = sub_22F2483D8((uint64_t)a5, v50);
    if ((a6 & 1) == 0)
      return result;
    return llvm::Instruction::addAnnotationMetadata();
  }
  if ((v12 & 0xFE) == 0xE)
  {
    result = llvm::ConstantDataSequential::getNumElements((llvm::ConstantDataSequential *)a3);
    if ((_DWORD)result)
    {
      v13 = 0;
      v14 = result;
      do
      {
        result = llvm::ConstantDataSequential::getElementAsConstant((llvm::ConstantDataSequential *)a3);
        if (*(unsigned __int8 *)(result + 16) - 11 >= 2)
        {
          v15 = result;
          v16 = *((_OWORD *)a2 + 1);
          v48[0] = *(_OWORD *)a2;
          v48[1] = v16;
          v48[2] = *((_OWORD *)a2 + 2);
          v47 = 257;
          v17 = sub_22E486A58(a5, (uint64_t)v48, v13, (uint64_t)v46, (uint64_t)v49);
          result = sub_22E4CD34C(v11, v49, v15, a4, a5, a6, v17);
        }
        ++v13;
      }
      while (v14 != v13);
    }
  }
  else if (v12 == 9)
  {
    v19 = *((_DWORD *)a3 + 5);
    v20 = v19 & 0x7FFFFFF;
    if ((v19 & 0x7FFFFFF) != 0)
    {
      v21 = 0;
      v22 = 0;
      do
      {
        v23 = *((_DWORD *)a3 + 5);
        if ((v23 & 0x40000000) != 0)
          v24 = (unsigned __int8 *)*((_QWORD *)a3 - 1);
        else
          v24 = &a3[-32 * (v23 & 0x7FFFFFF)];
        v25 = *(_QWORD *)&v24[v21];
        if (*(unsigned __int8 *)(v25 + 16) - 11 >= 2)
        {
          v26 = *((_OWORD *)a2 + 1);
          v44[0] = *(_OWORD *)a2;
          v44[1] = v26;
          v44[2] = *((_OWORD *)a2 + 2);
          v47 = 257;
          v27 = sub_22E3C408C(a5, (uint64_t)v44, v22, (uint64_t)v46, (uint64_t)v45);
          result = sub_22E4CD34C(v11, v45, v25, a4, a5, a6, v27);
        }
        ++v22;
        v21 += 32;
      }
      while (v20 != v22);
    }
  }
  else
  {
    v28 = *((_DWORD *)a3 + 5);
    v29 = v28 & 0x7FFFFFF;
    if ((v28 & 0x7FFFFFF) != 0)
    {
      v30 = 0;
      v31 = 0;
      do
      {
        v32 = *((_DWORD *)a3 + 5);
        if ((v32 & 0x40000000) != 0)
          v33 = (unsigned __int8 *)*((_QWORD *)a3 - 1);
        else
          v33 = &a3[-32 * (v32 & 0x7FFFFFF)];
        v34 = *(_QWORD *)&v33[v30];
        if (*(unsigned __int8 *)(v34 + 16) - 11 >= 2)
        {
          v35 = *((_OWORD *)a2 + 1);
          v42[0] = *(_OWORD *)a2;
          v42[1] = v35;
          v42[2] = *((_OWORD *)a2 + 2);
          v47 = 257;
          v36 = sub_22E486A58(a5, (uint64_t)v42, v31, (uint64_t)v46, (uint64_t)v43);
          result = sub_22E4CD34C(v11, v43, v34, a4, a5, a6, v36);
        }
        ++v31;
        v30 += 32;
      }
      while (v29 != v31);
    }
  }
  return result;
}

uint64_t sub_22E4CD684(uint64_t result, __int128 *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  llvm::ConstantDataSequential *v9;
  unsigned int v10;
  __int128 v12;
  int v13;
  uint64_t v14;
  unsigned __int8 *ElementAsConstant;
  __int128 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _DWORD *v22;
  unsigned __int8 *v23;
  __int128 v24;
  _BYTE v25[48];
  _BYTE v26[32];
  __int16 v27;
  _BYTE v28[48];
  _OWORD v29[3];
  __int128 v30;
  __int128 v31;
  __int128 v32;

  v9 = (llvm::ConstantDataSequential *)result;
  v10 = *(unsigned __int8 *)(result + 16);
  if (v10 > 0x11 || ((1 << v10) & 0x30430) == 0)
  {
    if ((v10 & 0xFE) == 0xE)
    {
      result = llvm::ConstantDataSequential::getNumElements((llvm::ConstantDataSequential *)result);
      if ((_DWORD)result)
      {
        v13 = result;
        v14 = 0;
        do
        {
          ElementAsConstant = (unsigned __int8 *)llvm::ConstantDataSequential::getElementAsConstant(v9);
          result = llvm::Constant::isNullValue((llvm::Constant *)ElementAsConstant);
          if ((result & 1) == 0 && ElementAsConstant[16] - 11 >= 2)
          {
            v16 = a2[1];
            v30 = *a2;
            v31 = v16;
            v32 = a2[2];
            v27 = 257;
            sub_22E4CD9C8((uint64_t)v28, a4, (uint64_t)&v30, v14, (uint64_t)v26);
            result = sub_22E4CD684(ElementAsConstant, v28, a3, a4, a5);
          }
          v14 = (v14 + 1);
        }
        while (v13 != (_DWORD)v14);
      }
    }
    else
    {
      v17 = *(_DWORD *)(result + 20);
      v18 = v17 & 0x7FFFFFF;
      if ((v17 & 0x7FFFFFF) != 0)
      {
        v19 = 0;
        v20 = 0;
        do
        {
          v21 = *((_DWORD *)v9 + 5);
          if ((v21 & 0x40000000) != 0)
            v22 = (_DWORD *)*((_QWORD *)v9 - 1);
          else
            v22 = (_DWORD *)((char *)v9 - 32 * (v21 & 0x7FFFFFF));
          v23 = *(unsigned __int8 **)&v22[v19];
          result = llvm::Constant::isNullValue((llvm::Constant *)v23);
          if ((result & 1) == 0 && v23[16] - 11 >= 2)
          {
            v24 = a2[1];
            v30 = *a2;
            v31 = v24;
            v32 = a2[2];
            v27 = 257;
            sub_22E4CD9C8((uint64_t)v25, a4, (uint64_t)&v30, v20, (uint64_t)v26);
            result = sub_22E4CD684(v23, v25, a3, a4, a5);
          }
          ++v20;
          v19 += 8;
        }
        while (v18 != v20);
      }
    }
  }
  else
  {
    v12 = a2[1];
    v29[0] = *a2;
    v29[1] = v12;
    v29[2] = a2[2];
    result = sub_22E3BEDDC(a4, result, v29, a3);
    if ((_DWORD)a5)
      return llvm::Instruction::addAnnotationMetadata();
  }
  return result;
}

uint64_t sub_22E4CD880(uint64_t a1, _DWORD *a2)
{
  unsigned int v2;
  BOOL v3;
  uint64_t result;
  _DWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  _DWORD *v11;
  BOOL v12;
  int v13;
  int NumElements;
  int v15;
  int v16;
  uint64_t ElementAsConstant;

  v2 = *(unsigned __int8 *)(a1 + 16);
  v3 = v2 == 13 || v2 == 19;
  if (v3 || v2 - 11 < 2)
    return 1;
  v6 = (_DWORD *)a1;
  if (v2 > 0x11)
    goto LABEL_24;
  if (((1 << v2) & 0x30430) != 0)
  {
    if ((llvm::Constant::isNullValue((llvm::Constant *)a1) & 1) == 0)
      return (*a2)-- != 0;
    return 1;
  }
  if (((1 << v2) & 0x300) != 0)
  {
    v7 = *(_DWORD *)(a1 + 20) & 0x7FFFFFF;
    if (!(_DWORD)v7)
      return 1;
    v8 = 0;
    v9 = 32 * v7 - 32;
    do
    {
      v10 = v6[5];
      if ((v10 & 0x40000000) != 0)
        v11 = (_DWORD *)*((_QWORD *)v6 - 1);
      else
        v11 = &v6[-8 * (v10 & 0x7FFFFFF)];
      result = sub_22E4CD880(*(_QWORD *)&v11[v8 / 4], a2);
      if ((_DWORD)result)
        v12 = v9 == v8;
      else
        v12 = 1;
      v8 += 32;
    }
    while (!v12);
  }
  else
  {
LABEL_24:
    v13 = v2 & 0xFE;
    if (v13 == 14)
    {
      NumElements = llvm::ConstantDataSequential::getNumElements((llvm::ConstantDataSequential *)a1);
      if (NumElements)
      {
        v15 = 0;
        v16 = NumElements - 1;
        do
        {
          ElementAsConstant = llvm::ConstantDataSequential::getElementAsConstant((llvm::ConstantDataSequential *)v6);
          LODWORD(a1) = sub_22E4CD880(ElementAsConstant, a2);
          if (!(_DWORD)a1)
            break;
          v3 = v16 == v15++;
        }
        while (!v3);
      }
      else
      {
        LOBYTE(a1) = 1;
      }
    }
    return (v13 == 14) & a1;
  }
  return result;
}

uint64_t sub_22E4CD9C8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  llvm::DataLayout *DataLayout;
  llvm::LLVMContext *v11;
  __int128 v12;
  __int128 v13;
  uint64_t *v14;
  llvm::GetElementPtrInst *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  _OWORD v23[3];

  DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a2[6] + 56) + 40));
  v11 = *(llvm::LLVMContext **)(a3 + 8);
  v12 = *(_OWORD *)(a3 + 16);
  v13 = *(_OWORD *)(a3 + 32);
  v23[0] = *(_OWORD *)a3;
  v23[1] = v12;
  v23[2] = v13;
  if ((BYTE8(v12) & 3) != 0)
    v14 = (uint64_t *)sub_22F28ABCC(v23, a2[17]);
  else
    v14 = *(uint64_t **)&v23[0];
  v15 = sub_22E3C4170(a2, v11, v14, 0, a4, a5);
  llvm::PointerType::get();
  v22 = *(_DWORD *)(llvm::DataLayout::getPointerAlignElem(DataLayout) + 12);
  if (v22 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v21);
  else
    v21 = 0;
  llvm::GetElementPtrInst::accumulateConstantOffset(v15, DataLayout, (llvm::APInt *)&v21);
  v16 = *((_QWORD *)v15 + 9);
  v17 = v22;
  result = v21;
  if (v22 > 0x40)
    v19 = *(_QWORD *)v21;
  else
    v19 = v21 << -(char)v22 >> -(char)v22;
  v20 = v19 | *(_QWORD *)(a3 + 16);
  *(_QWORD *)a1 = v15;
  *(_QWORD *)(a1 + 8) = v16;
  *(_QWORD *)(a1 + 16) = v20 & -v20;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  if (v17 >= 0x41)
  {
    if (result)
      return MEMORY[0x2348A0E84](result, 0x1000C8000313F17);
  }
  return result;
}

uint64_t sub_22E4CDB5C(uint64_t result)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_QWORD *)result)
  {
    v2 = result;
    sub_22F25ACCC(*(_QWORD *)result, (__n128 *)(result + 8));
    result = v2;
  }
  v1 = *(void **)(result + 8);
  if (v1)
  {
    *(_QWORD *)(result + 16) = v1;
    v3 = result;
    operator delete(v1);
    return v3;
  }
  return result;
}

_QWORD *sub_22E4CDBB4(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F25AEC4(a1, v4, (_QWORD *)v4 + 2 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

_QWORD *sub_22E4CDC74(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F25B124(a1, v4, (_QWORD *)v4 + 2 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22E4CDD34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  _QWORD *v7;

  v6 = *(_DWORD *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a1 + 8);
  }
  v7 = (_QWORD *)(*(_QWORD *)a1 + 16 * v6);
  *v7 = a2;
  v7[1] = a3;
  LODWORD(v7) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = (_DWORD)v7;
  return *(_QWORD *)a1 + 16 * v7 - 16;
}

_QWORD *sub_22E4CDDAC(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F25B380(a1, v4, (_QWORD *)v4 + 2 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22E4CDE6C(uint64_t a1, _QWORD *a2, char a3)
{
  int v5;
  _QWORD *v6;
  __int128 v7;
  uint64_t result;
  _QWORD *v9;
  llvm::LLVMContext *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  __int128 v14;

  if ((a3 & 1) == 0 && *(_QWORD *)(a1 + 8))
  {
    v9 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    *(_QWORD *)&v13[0] = "nrvo.skipdtor";
    LOWORD(v14) = 259;
    v6 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v10 = *(llvm::LLVMContext **)(a1 + 8);
    *(_QWORD *)&v13[0] = "nrvo.val";
    LOWORD(v14) = 259;
    v11 = sub_22F253798((uint64_t)(a2 + 34), v10, (uint64_t)v13);
    v12 = llvm::User::operator new((llvm::User *)0x40);
    MEMORY[0x23489C09C](v12, v6, v9, v11, 0);
    LOWORD(v14) = 257;
    sub_22E3C12C8(a2 + 34, v12, (uint64_t)v13);
    sub_22E5ED9B4(a2, v9, 0);
    v5 = 1;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = *(_OWORD *)(a1 + 32);
  v13[0] = *(_OWORD *)(a1 + 16);
  v13[1] = v7;
  v14 = *(_OWORD *)(a1 + 48);
  result = (*(uint64_t (**)(_QWORD, _QWORD *, _QWORD, uint64_t, _QWORD, _QWORD, _OWORD *, _QWORD))(**(_QWORD **)(a2[18] + 224) + 472))(*(_QWORD *)(a2[18] + 224), a2, *(_QWORD *)(a1 + 72), 1, 0, 0, v13, *(_QWORD *)(a1 + 64));
  if (v5)
    return sub_22E5ED9B4(a2, v6, 0);
  return result;
}

void sub_22E4CE024()
{
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22E4CE038(uint64_t a1, _QWORD *a2, char a3)
{
  int v5;
  _QWORD *v6;
  __int128 v7;
  _QWORD *v8;
  llvm::LLVMContext *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12[2];
  __int128 v13;

  if ((a3 & 1) == 0 && *(_QWORD *)(a1 + 8))
  {
    v8 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    *(_QWORD *)&v12[0] = "nrvo.skipdtor";
    LOWORD(v13) = 259;
    v6 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v9 = *(llvm::LLVMContext **)(a1 + 8);
    *(_QWORD *)&v12[0] = "nrvo.val";
    LOWORD(v13) = 259;
    v10 = sub_22F253798((uint64_t)(a2 + 34), v9, (uint64_t)v12);
    v11 = llvm::User::operator new((llvm::User *)0x40);
    MEMORY[0x23489C09C](v11, v6, v8, v10, 0);
    LOWORD(v13) = 257;
    sub_22E3C12C8(a2 + 34, v11, (uint64_t)v12);
    sub_22E5ED9B4(a2, v8, 0);
    v5 = 1;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = *(_OWORD *)(a1 + 32);
  v12[0] = *(_OWORD *)(a1 + 16);
  v12[1] = v7;
  v13 = *(_OWORD *)(a1 + 48);
  sub_22E54F920((uint64_t)a2, v12, *(_QWORD *)(a1 + 64));
  if (v5)
    sub_22E5ED9B4(a2, v6, 0);
}

void sub_22E4CE1D4()
{
  JUMPOUT(0x2348A0E9CLL);
}

llvm::APInt *sub_22E4CE1E8(uint64_t a1, _QWORD *a2, char a3)
{
  int v3;
  __int128 v4;
  _OWORD v6[3];

  v3 = (a3 & 1) == 0 && *(_BYTE *)(a1 + 72) != 0;
  v4 = *(_OWORD *)(a1 + 24);
  v6[0] = *(_OWORD *)(a1 + 8);
  v6[1] = v4;
  v6[2] = *(_OWORD *)(a1 + 40);
  return sub_22F25A27C(a2, (uint64_t)v6, *(_QWORD *)(a1 + 56), *(void (**)(_QWORD *, void **, uint64_t))(a1 + 64), v3);
}

llvm::Value *sub_22E4CE240(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[136];
  uint64_t v9;
  _BYTE v10[32];

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v4 + 48);
  v9 = 0;
  sub_22EFF69F0((uint64_t)v10, v3, v4, 0, v5, 1, 0, &v9, 0);
  sub_22E4E2474(a2, (uint64_t)v10, (uint64_t)v8);
  v6 = sub_22F25F748(a2, (uint64_t)v8, 0);
  return sub_22F2743B0(a2, v6);
}

void sub_22E4CE2C0(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _BYTE v21[56];
  _BYTE v22[32];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  char v29;
  __int16 v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char v35;
  void *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  _BYTE v43[192];
  void *v44;
  uint64_t v45;
  _BYTE v46[16];
  void *v47;
  uint64_t v48;
  _QWORD v49[6];

  v49[5] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
  v5 = a1[3];
  v6 = *(_QWORD *)(v5 + 48);
  v36 = 0;
  sub_22EFF69F0((uint64_t)v22, v4, v5, 0, v6, 1, 0, &v36, 0);
  sub_22E4E2474(a2, (uint64_t)v22, (uint64_t)&v36);
  v32 = v37;
  v33 = v38;
  v34 = v39;
  sub_22E5E0440(a2, (uint64_t)&v32, v40, &v23);
  v7 = v23;
  v8 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a2 + 144) + 280), *(llvm::LLVMContext **)(a1[2] + 80));
  WORD4(v38) = 257;
  v9 = sub_22E3C1740((uint64_t *)(a2 + 272), 49, v7, v8, (uint64_t)&v36);
  v36 = (char *)&v37 + 8;
  *(_QWORD *)&v37 = 0x800000000;
  v41 = v43;
  v42 = 0x100000000;
  v44 = v46;
  v45 = 0x100000000;
  v47 = v49;
  v48 = 0x200000000;
  v49[4] = 0;
  v10 = sub_22EF5B848(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 144), *(_QWORD *)(a1[3] + 48), 0);
  v23 = v9;
  v24 = 0;
  v29 = 0;
  v30 = 0;
  v31 = v10;
  v11 = sub_22E3C187C((uint64_t)&v36, (unint64_t)&v23, 1);
  v12 = (char *)v36 + 152 * v37;
  v13 = *(_OWORD *)(v11 + 16);
  *(_OWORD *)v12 = *(_OWORD *)v11;
  *((_OWORD *)v12 + 1) = v13;
  v14 = *(_QWORD *)(v11 + 144);
  v15 = *(_OWORD *)(v11 + 128);
  v16 = *(_OWORD *)(v11 + 96);
  *((_OWORD *)v12 + 7) = *(_OWORD *)(v11 + 112);
  *((_OWORD *)v12 + 8) = v15;
  *((_QWORD *)v12 + 18) = v14;
  *((_OWORD *)v12 + 6) = v16;
  v17 = *(_OWORD *)(v11 + 80);
  v18 = *(_OWORD *)(v11 + 32);
  v19 = *(_OWORD *)(v11 + 48);
  *((_OWORD *)v12 + 4) = *(_OWORD *)(v11 + 64);
  *((_OWORD *)v12 + 5) = v17;
  *((_OWORD *)v12 + 2) = v18;
  *((_OWORD *)v12 + 3) = v19;
  LODWORD(v37) = v37 + 1;
  v28 = 0;
  v24 = 0;
  v25 = 0;
  v20 = a1[2];
  v23 = a1[1];
  v27 = 0;
  v26 = 0;
  v32 = 0uLL;
  DWORD2(v33) = 0;
  *(_QWORD *)&v33 = 0;
  v34 = 0uLL;
  v35 = 0;
  sub_22E47A004(a2, v20, (uint64_t)&v23, (uint64_t)&v32, (uint64_t)&v36, 0, 0, 0, (uint64_t)v21, 0);
  if (v47 != v49)
    free(v47);
  if (v44 != v46)
    free(v44);
  if (v41 != v43)
    free(v41);
  if (v36 != (char *)&v37 + 8)
    free(v36);
}

llvm::APInt *sub_22E4CE550(uint64_t a1, _QWORD *a2, char a3)
{
  __int128 v6;
  unint64_t v7;
  void (*v8)(_QWORD *, void **, uint64_t);
  _BOOL4 v10;
  _OWORD v12[3];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v6 = *(_OWORD *)(a1 + 24);
  v13 = *(_OWORD *)(a1 + 8);
  v14 = v6;
  v15 = *(_OWORD *)(a1 + 40);
  v16 = *(_QWORD *)(a1 + 56);
  sub_22F24FD44((uint64_t)a2, (uint64_t)&v13, (uint64_t *)v12);
  v7 = *(_QWORD *)(a1 + 64);
  v8 = *(void (**)(_QWORD *, void **, uint64_t))(a1 + 72);
  v10 = (a3 & 1) == 0 && *(_BYTE *)(a1 + 80) != 0;
  v13 = v12[0];
  v14 = v12[1];
  v15 = v12[2];
  return sub_22F25A27C(a2, (uint64_t)&v13, v7, v8, v10);
}

uint64_t sub_22E4CE5E0()
{
  return 1;
}

llvm::Value *sub_22E4CE5E8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  __int128 v3;
  uint64_t Declaration;
  uint64_t v5;
  _BYTE v7[32];
  __int16 v8;
  _OWORD v9[3];
  uint64_t v10;

  v2 = (uint64_t *)(a2 + 272);
  v3 = *(_OWORD *)(a1 + 24);
  v9[0] = *(_OWORD *)(a1 + 8);
  v9[1] = v3;
  v9[2] = *(_OWORD *)(a1 + 40);
  v8 = 257;
  v10 = sub_22E3C2A7C((uint64_t *)(a2 + 272), (uint64_t)v9, (uint64_t)v7);
  Declaration = llvm::Intrinsic::getDeclaration();
  if (Declaration)
    v5 = *(_QWORD *)(Declaration + 24);
  else
    v5 = 0;
  v8 = 257;
  return sub_22E462B78(v2, v5, Declaration, (uint64_t)&v10, 1, (uint64_t)v7, 0);
}

void sub_22E4CE690(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;

  v2 = a1[1];
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (a1[2] < a2)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v2 = a1[1];
      }
      if (a2 != v2)
        bzero((void *)(*a1 + v2), a2 - v2);
    }
    a1[1] = a2;
  }
}

uint64_t sub_22E4CE700(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  uint64_t *v5;
  _BYTE v7[32];
  __int16 v8;
  _OWORD v9[3];

  v4 = *(_OWORD *)(a1 + 32);
  v9[0] = *(_OWORD *)(a1 + 16);
  v9[1] = v4;
  v9[2] = *(_OWORD *)(a1 + 48);
  v8 = 257;
  v5 = (uint64_t *)sub_22E3C2A7C(a2 + 34, (uint64_t)v9, (uint64_t)v7);
  return sub_22E4CE768(a2, *(uint64_t **)(a1 + 8), v5, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 80), *(void (**)(_QWORD *, void **, uint64_t))(a1 + 72));
}

uint64_t sub_22E4CE768(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, void (*a6)(_QWORD *, void **, uint64_t))
{
  unint64_t v8;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD v17[4];
  __int16 v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[5];

  v8 = a4;
  v21[4] = *MEMORY[0x24BDAC8D0];
  v12 = sub_22E66C868(a1[18] + 280, a4, 0);
  v13 = sub_22EF5C728(*(_QWORD *)(a1[18] + 144), v8);
  if (v13)
  {
    v14 = 0;
    do
    {
      if (*(_BYTE *)(v13 + 16) != 5)
        ++v14;
      v8 = *(_QWORD *)(v13 + 32);
      v13 = sub_22EF5C728(*(_QWORD *)(a1[18] + 144), v8);
    }
    while (v13);
    if (v14)
    {
      v15 = llvm::ConstantInt::get();
      v19 = v21;
      v20 = 0x400000000;
      sub_22E4639CC((uint64_t)&v19, (v14 + 1), v15);
      v17[0] = "pad.arraybegin";
      v18 = 259;
      a2 = (uint64_t *)sub_22E486CB4(a1 + 34, v12, a2, (uint64_t **)v19, v20, (uint64_t)v17);
      v17[0] = "pad.arrayend";
      v18 = 259;
      a3 = (uint64_t *)sub_22E486CB4(a1 + 34, v12, a3, (uint64_t **)v19, v20, (uint64_t)v17);
      if (v19 != v21)
        free(v19);
    }
  }
  return sub_22F25A3F8(a1, a2, (uint64_t)a3, v8, a5, a6, 1, 0);
}

uint64_t sub_22E4CE918(uint64_t a1, _QWORD *a2)
{
  uint64_t *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(_QWORD *, void **, uint64_t);
  uint64_t *v9;
  _OWORD v11[3];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _BYTE v16[32];
  __int16 v17;

  v4 = (uint64_t *)sub_22F24BFC0((uint64_t)a2, *(_QWORD *)(a1 + 8));
  v5 = *(_OWORD *)(a1 + 32);
  v12 = *(_OWORD *)(a1 + 16);
  v13 = v5;
  v14 = *(_OWORD *)(a1 + 48);
  v15 = *(_QWORD *)(a1 + 64);
  sub_22F24FD44((uint64_t)a2, (uint64_t)&v12, (uint64_t *)v11);
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 80);
  v8 = *(void (**)(_QWORD *, void **, uint64_t))(a1 + 88);
  v12 = v11[0];
  v13 = v11[1];
  v14 = v11[2];
  v17 = 257;
  v9 = (uint64_t *)sub_22E3C2A7C(a2 + 34, (uint64_t)&v12, (uint64_t)v16);
  return sub_22E4CE768(a2, v4, v9, v6, v7, v8);
}

uint64_t sub_22E4CE9D4(uint64_t a1, _QWORD *a2)
{
  return sub_22E4CE768(a2, *(uint64_t **)(a1 + 8), *(uint64_t **)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 40), *(void (**)(_QWORD *, void **, uint64_t))(a1 + 32));
}

uint64_t sub_22E4CE9EC(uint64_t a1, _QWORD *a2)
{
  uint64_t *v4;
  uint64_t *v5;

  v4 = (uint64_t *)sub_22F24BFC0((uint64_t)a2, *(_QWORD *)(a1 + 8));
  v5 = (uint64_t *)sub_22F24BFC0((uint64_t)a2, *(_QWORD *)(a1 + 16));
  return sub_22E4CE768(a2, v4, v5, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(void (**)(_QWORD *, void **, uint64_t))(a1 + 40));
}

_QWORD *sub_22E4CEA44(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F25B580(a1, v4, (_QWORD *)v4 + 2 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

llvm::Value *sub_22E4CEB04(uint64_t a1, llvm::Value *a2)
{
  return sub_22F27328C(a2, *(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 16));
}

llvm::Value *sub_22E4CEB18(llvm::Value *result)
{
  uint64_t v1;
  llvm::Value *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v5[32];
  __int16 v6;
  _QWORD v7[4];

  v7[3] = *MEMORY[0x24BDAC8D0];
  v1 = *((_QWORD *)result + 18);
  if ((*(_BYTE *)(*(_QWORD *)(v1 + 184) + 33) & 0x18) != 0 && (*(_BYTE *)(*(_QWORD *)(v1 + 152) + 104) & 0x20) == 0)
  {
    v2 = result;
    v7[2] = llvm::PointerType::get();
    v3 = sub_22F29B990();
    v7[0] = llvm::ConstantInt::getSigned();
    v7[1] = llvm::ConstantExpr::getBitCast();
    if (v3)
      v4 = *(_QWORD *)(v3 + 24);
    else
      v4 = 0;
    v6 = 257;
    return sub_22E462B78((uint64_t *)v2 + 34, v4, v3, (uint64_t)v7, 2, (uint64_t)v5, 0);
  }
  return result;
}

void sub_22E4CEC30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  llvm::LLVMContext *v10;
  uint64_t AddrSpaceCast;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  llvm::Value *v33;
  uint64_t v34;
  uint64_t v35;
  llvm::Value *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t **v42;
  __n128 v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  int v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  void (*v62)(_QWORD *, void **, uint64_t);
  int v63;
  llvm::Value *v64;
  llvm::Value *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  llvm::Value *v71;
  uint64_t v72;
  llvm::Type *v73;
  uint64_t NullValue;
  uint64_t v75;
  int v76;
  llvm::ConstantPointerNull *v77;
  uint64_t v78;
  int v79;
  unsigned __int8 *v80;
  _QWORD v81[3];
  int v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  _OWORD v94[2];
  uint64_t v95;
  __int128 v96[2];
  uint64_t v97;
  _BYTE v98[64];
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v7 = v0;
  v104 = *MEMORY[0x24BDAC8D0];
  v8 = sub_22EFBC5B4(v5);
  v9 = *(_QWORD *)(v6 + 48);
  v10 = (llvm::LLVMContext *)sub_22EF5CF80(*(_QWORD *)(*(_QWORD *)(v7 + 144) + 144), v9);
  AddrSpaceCast = v4;
  if (llvm::GlobalValue::getAddressSpace((llvm::GlobalValue *)v4) != (_DWORD)v10)
  {
    if (*(_QWORD *)(*(_QWORD *)v4 + 24))
      llvm::PointerType::get();
    else
      llvm::PointerType::get(**(llvm::PointerType ***)v4, v10);
    AddrSpaceCast = llvm::ConstantExpr::getAddrSpaceCast();
  }
  v12 = *(_QWORD *)(v4 + 24);
  v13 = sub_22EF5B404(*(_QWORD *)(*(_QWORD *)(v7 + 144) + 144), v6, 0);
  v14 = __clz(v13) ^ 0x3F;
  v15 = AddrSpaceCast & 0xFFFFFFFFFFFFFFF8 | (v14 >> 3);
  v16 = v12 & 0xFFFFFFFFFFFFFFF8 | v14 & 7;
  if (v13)
    v17 = v15;
  else
    v17 = AddrSpaceCast;
  if (v13)
    v12 = v16;
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
  {
    sub_22E4DDB88(v7, v8, (uint64_t)v98);
    v18 = *(_QWORD *)v98;
    v19 = v17 & 0xFFFFFFFFFFFFFFF8;
    if (v17 <= 7)
      v19 = 0;
    v20 = v12 & 0xFFFFFFFFFFFFFFF8;
    if (v17 <= 7)
      v20 = 0;
    v21 = 1 << (v12 & 7 | (8 * (v17 & 7)));
    if (v17 < 8)
      v21 = 0;
    *(_QWORD *)&v85 = v19;
    *((_QWORD *)&v85 + 1) = v20;
    *(_QWORD *)&v86 = v21;
    DWORD2(v86) = 0;
    v87 = 0uLL;
    sub_22E6281E0(*(_QWORD **)(v7 + 144), v9, (uint64_t)v96);
    sub_22E4E8134(v7, v18, (uint64_t)&v85, 0, v9, 2, (uint64_t)v96, 0, 0);
    return;
  }
  v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 144) + 152) + 72);
  if ((_DWORD)v22)
    v23 = (v22 & 0x200000000) == 0;
  else
    v23 = 0;
  if (v23 && sub_22F25B62C(v6))
  {
    v38 = *(_QWORD *)(*(_QWORD *)(v7 + 144) + 808);
    v39 = v17 & 0xFFFFFFFFFFFFFFF8;
    if (v17 <= 7)
      v39 = 0;
    v40 = v12 & 0xFFFFFFFFFFFFFFF8;
    if (v17 <= 7)
      v40 = 0;
    v81[0] = v39;
    v81[1] = v40;
    v41 = 1 << (v12 & 7 | (8 * (v17 & 7)));
    if (v17 < 8)
      v41 = 0;
    v81[2] = v41;
    v82 = 0;
    v83 = 0;
    v84 = 0;
    v43.n128_f64[0] = sub_22EFC8E88(v6);
    v44 = *v42;
    v45 = *((unsigned int *)v42 + 2);
    if ((_DWORD)v45 && *(_WORD *)(*v44 + 32) != 247)
    {
      v46 = 8 * v45 - 8;
      v47 = *v42;
      do
      {
        v48 = v47[1];
        ++v47;
        v46 -= 8;
      }
      while (*(_WORD *)(v48 + 32) != 247);
    }
    do
    {
      v50 = *v44++;
      v49 = v50;
    }
    while (*(_WORD *)(v50 + 32) != 247);
    (*(void (**)(uint64_t, unint64_t, _QWORD *, _QWORD, uint64_t, uint64_t, __n128))(*(_QWORD *)v38
                                                                                                  + 312))(v38, v6, v81, *(unsigned int *)(v49 + 16), v2, v7, v43);
  }
  if ((_DWORD)v2)
  {
    v24 = 0;
    v25 = *(_QWORD *)(v6 + 48);
    if (v17 <= 7)
      v26 = 0;
    else
      v26 = v17 & 0xFFFFFFFFFFFFFFF8;
    if (v17 <= 7)
      v27 = 0;
    else
      v27 = v12 & 0xFFFFFFFFFFFFFFF8;
    if (v17 >= 8)
      v24 = 1 << (v12 & 7 | (8 * (v17 & 7)));
    sub_22E6281E0(*(_QWORD **)(v7 + 144), *(_QWORD *)(v6 + 48), (uint64_t)v94);
    *(_QWORD *)&v85 = v26;
    *((_QWORD *)&v85 + 1) = v27;
    *(_QWORD *)&v86 = v24;
    DWORD2(v86) = 0;
    v87 = 0uLL;
    v28 = *(_QWORD *)(*(_QWORD *)(v7 + 144) + 144);
    v96[0] = v94[0];
    v96[1] = v94[1];
    v97 = v95;
    memset(&v98[8], 0, 28);
    *(_QWORD *)&v98[40] = 0;
    *(_QWORD *)&v98[48] = 0;
    v99 = 0uLL;
    *(_QWORD *)((char *)&v100 + 4) = 2;
    *(_DWORD *)v98 = 0;
    v101 = 0u;
    v102 = 0u;
    sub_22E3C113C((uint64_t)v98, &v85, v25, 2, v96, v28);
    v80 = (unsigned __int8 *)sub_22EFBC5B4(v6);
    v29 = sub_22E619D68(v25);
    if (v29)
    {
      if (v29 == 2)
      {
        v85 = *(_OWORD *)&v98[8];
        v86 = *(_OWORD *)&v98[24];
        v87 = *(_OWORD *)&v98[40];
        *(_QWORD *)&v88 = *((_QWORD *)&v99 + 1);
        BYTE8(v88) = 1;
        sub_22E4EF100(v7, (uint64_t)v80, (uint64_t)&v85);
      }
      else
      {
        v91 = v101;
        v92 = v102;
        v93 = v103;
        v87 = *(_OWORD *)&v98[32];
        v88 = *(_OWORD *)&v98[48];
        v89 = v99;
        v90 = v100;
        v85 = *(_OWORD *)v98;
        v86 = *(_OWORD *)&v98[16];
        sub_22F262998(v7, (uint64_t)v80, (uint64_t)&v85, 1);
      }
    }
    else
    {
      v30 = *(_QWORD *)(v7 + 144);
      v31 = BYTE8(v99) & 0x30;
      if (v31 == 16)
      {
        v35 = *(_QWORD *)(v30 + 784);
        if (!v35)
        {
          sub_22F298C2C(*(_QWORD **)(v7 + 144));
          v35 = *(_QWORD *)(v30 + 784);
          v30 = *(_QWORD *)(v7 + 144);
        }
        *(_QWORD *)&v85 = v7;
        *((_QWORD *)&v85 + 1) = v7 + 272;
        LOBYTE(v86) = 0;
        *((_QWORD *)&v86 + 1) = *(_QWORD *)(v30 + 232);
        v36 = sub_22E50E974((uint64_t *)&v85, v80);
        *(_QWORD *)&v85 = v26;
        *((_QWORD *)&v85 + 1) = v27;
        if (v17 < 8)
          v37 = 0;
        else
          v37 = 1 << (v12 & 7 | (8 * (v17 & 7)));
        *(_QWORD *)&v86 = v37;
        DWORD2(v86) = 0;
        v87 = 0uLL;
        (*(void (**)(uint64_t, uint64_t, llvm::Value *, __int128 *))(*(_QWORD *)v35 + 304))(v35, v7, v36, &v85);
      }
      else if (v31 == 32)
      {
        v32 = *(_QWORD *)(v30 + 784);
        if (!v32)
        {
          sub_22F298C2C(*(_QWORD **)(v7 + 144));
          v32 = *(_QWORD *)(v30 + 784);
          v30 = *(_QWORD *)(v7 + 144);
        }
        *(_QWORD *)&v85 = v7;
        *((_QWORD *)&v85 + 1) = v7 + 272;
        LOBYTE(v86) = 0;
        *((_QWORD *)&v86 + 1) = *(_QWORD *)(v30 + 232);
        v33 = sub_22E50E974((uint64_t *)&v85, v80);
        *(_QWORD *)&v85 = v26;
        *((_QWORD *)&v85 + 1) = v27;
        if (v17 < 8)
          v34 = 0;
        else
          v34 = 1 << (v12 & 7 | (8 * (v17 & 7)));
        *(_QWORD *)&v86 = v34;
        DWORD2(v86) = 0;
        v87 = 0uLL;
        sub_22EFBB794(v6);
        (*(void (**)(uint64_t, uint64_t, llvm::Value *, __int128 *, BOOL))(*(_QWORD *)v32 + 312))(v32, v7, v33, &v85, v51 != 0);
      }
      else
      {
        v91 = v101;
        v92 = v102;
        v93 = v103;
        v87 = *(_OWORD *)&v98[32];
        v88 = *(_OWORD *)&v98[48];
        v89 = v99;
        v90 = v100;
        v85 = *(_OWORD *)v98;
        v86 = *(_OWORD *)&v98[16];
        sub_22E4C7674(v7, v80, v6, (uint64_t *)&v85, 0, *(__n128 *)&v98[16]);
      }
    }
  }
  if (sub_22E62D664(*(_QWORD *)(v7 + 144), *(_QWORD *)(v6 + 48), 1))
  {
    sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(v7 + 144) + 144), *(_QWORD *)(*(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v98);
    sub_22E4CEB18((llvm::Value *)v7);
    return;
  }
  *(_QWORD *)&v96[0] = v17;
  *((_QWORD *)&v96[0] + 1) = v12;
  v52 = sub_22EFBEA2C(v6, *(_QWORD *)(*(_QWORD *)(v7 + 144) + 144));
  if (v52 > 4 || v52 == 1)
  {
    v54 = v52;
    v55 = *(_QWORD *)(v7 + 144);
    v56 = *(_QWORD *)(v6 + 48);
    v57 = sub_22F10C2A4(*(_QWORD *)(v56 & 0xFFFFFFFFFFFFFFF0));
    if (!v57
      || (v67 = v57, (*(_DWORD *)(v57 + 28) & 0x7Fu) - 35 > 2)
      || (v68 = *(_QWORD *)(v55 + 224),
          v69 = sub_22EFD10F8(v57),
          (*(unsigned int (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v68 + 40))(v68, v69 & 0xFFFFFFFFFFFFFFF8 | 1, 0))&& ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v55 + 224) + 64))(*(_QWORD *)(v55 + 224)) & 1) == 0&& (**(_QWORD **)(v55 + 184) & 0x20000) != 0)
    {
      sub_22E66C868(*(_QWORD *)(v7 + 144) + 280, v56, 0);
      *(_QWORD *)&v96[0] = sub_22F25BEB0((uint64_t)v96);
      *((_QWORD *)&v96[0] + 1) = v58;
      sub_22E618EBC((uint64_t)v98, v55, 0);
      v59 = 0;
      v60 = *(_QWORD *)&v96[0] & 0xFFFFFFFFFFFFFFF8;
      if (*(_QWORD *)&v96[0] <= 7uLL)
        v60 = 0;
      v61 = *((_QWORD *)&v96[0] + 1) & 0xFFFFFFFFFFFFFFF8;
      if (*(_QWORD *)&v96[0] <= 7uLL)
        v61 = 0;
      *(_QWORD *)&v85 = v60;
      *((_QWORD *)&v85 + 1) = v61;
      if (*(_QWORD *)&v96[0] >= 8uLL)
        v59 = 1 << (BYTE8(v96[0]) & 7 | (8 * (v96[0] & 7)));
      *(_QWORD *)&v86 = v59;
      DWORD2(v86) = 0;
      v87 = 0uLL;
      if (v54 == 4)
        v62 = (void (*)(_QWORD *, void **, uint64_t))sub_22E54F920;
      else
        v62 = (void (*)(_QWORD *, void **, uint64_t))sub_22F25105C;
      v63 = sub_22F245DD4(v7, v54);
      v64 = sub_22F25BC50((uint64_t)v98, &v85, v56, v62, v63, v6);
      v65 = v64;
      if (v64)
        v66 = *((_QWORD *)v64 + 3);
      else
        v66 = 0;
      sub_22E619434((uint64_t)v98);
      NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)(v7 + 96), v73);
      goto LABEL_97;
    }
    v70 = sub_22EFD10F8(v67);
    v66 = sub_22E46A4BC(v55, v70 & 0xFFFFFFFFFFFFFFF8 | 1, 0, 0, 0, 0, 0);
    v65 = v71;
    v72 = *(_QWORD *)(v7 + 144);
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v72 + 144) + 2000) + 52) & 0x40000000) != 0)
    {
      v75 = sub_22E699F3C((_QWORD *)v55);
      v76 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v75 + 232))(v75);
      sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(v7 + 144) + 280), (llvm::LLVMContext *)v56);
      v77 = (llvm::ConstantPointerNull *)llvm::PointerType::get();
      v78 = *(_QWORD *)((*(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v78 & 8) != 0)
        v79 = *(_DWORD *)((v78 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11;
      else
        v79 = 0;
      if (v76 != v79)
      {
        NullValue = llvm::ConstantPointerNull::get(v77, v77);
        goto LABEL_97;
      }
    }
    else
    {
      sub_22E66CB04((llvm::Type ***)(v72 + 280), (llvm::LLVMContext *)v56);
      llvm::PointerType::get();
    }
    NullValue = llvm::ConstantExpr::getBitCast();
LABEL_97:
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t, llvm::Value *, uint64_t))(**(_QWORD **)(v55 + 224)
                                                                                               + 688))(*(_QWORD *)(v55 + 224), v7, v6, v66, v65, NullValue);
  }
}

uint64_t sub_22E4CF4E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  llvm::Value *v3;
  llvm::Value *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  llvm::Value *v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unsigned int v17;
  int8x16_t v18;
  llvm::Value *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[2];
  uint64_t v29;
  _BYTE v30[144];
  _QWORD v31[4];
  __int16 v32;
  uint64_t v33[742];
  void *v34;
  __int128 v35;
  _QWORD v36[34];

  v0 = MEMORY[0x24BDAC7A8]();
  v26 = v2;
  v27 = v1;
  v4 = v3;
  v6 = v5;
  v7 = v0;
  v36[32] = *MEMORY[0x24BDAC8D0];
  v8 = llvm::FunctionType::get();
  v34 = v36;
  v35 = xmmword_22F44E320;
  sub_22F242C48((uint64_t)v31, (uint64_t)&v34);
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 144) + 224) + 16);
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v9 + 160))(v9, v6, v31);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v31);
  v11 = sub_22E46BBB8((_QWORD **)(*(_QWORD *)(v7 + 144) + 280), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 144) + 288) + 16392), 0, 0, 0, 0, 0, v10, 0, 0, -1);
  v12 = *(_QWORD *)(v7 + 144);
  v32 = 261;
  v31[0] = v34;
  v31[1] = v35;
  v13 = sub_22E4CF82C(v12, v8, (uint64_t)v31, v11, *(_DWORD *)(v6 + 24), 0, 7);
  sub_22E618EBC((uint64_t)v31, *(_QWORD *)(v7 + 144), 0);
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 144) + 144) + 16392);
  memset(&v30[16], 0, 128);
  *(_QWORD *)v30 = &v30[16];
  *(_QWORD *)&v30[8] = 0x1000000000;
  v15 = *(_DWORD *)(v6 + 24);
  v16 = sub_22EFBC5B4(v6);
  sub_22EFF605C(v16);
  sub_22E61A8FC((uint64_t)v31, v6 | 2, 0, v14, v13, v11, (uint64_t *)v30, v15, v18, v17);
  if (*(_BYTE **)v30 != &v30[16])
    free(*(void **)v30);
  v28[0] = 0;
  v28[1] = (uint64_t)v31;
  sub_22E48EE24(v28, 0, 0);
  v29 = v26;
  *(_WORD *)&v30[32] = 257;
  v19 = sub_22E462B78(v33, v27, (uint64_t)v4, (uint64_t)&v29, 1, (uint64_t)v30, 0);
  v20 = llvm::Value::stripPointerCastsAndAliases(v4);
  if (v20 && !*(_BYTE *)(v20 + 16))
    *((_WORD *)v19 + 9) = (*(_WORD *)(v20 + 18) >> 2) & 0xFFC | *((_WORD *)v19 + 9) & 0xF003;
  sub_22E619DE8((uint64_t)v31, 0);
  *(_WORD *)v30 = sub_22EF72F20(*(_QWORD *)(*(_QWORD *)(v7 + 144) + 144), 0, 0, 0);
  v30[2] = 0;
  *(_OWORD *)&v30[4] = 0uLL;
  memset(&v30[24], 0, 52);
  v21 = *(_QWORD *)(*(_QWORD *)(v7 + 144) + 144);
  v22 = *(_QWORD *)(v21 + 16392);
  v29 = *(_QWORD *)(v21 + 16816);
  v23 = sub_22EF63D8C(v21, v22, &v29, 1uLL, (__int128 *)v30, 0);
  v24 = sub_22F28A778(*(uint64_t **)(v7 + 144), v13, v23, 0, 0);
  sub_22E48F084(v28);
  sub_22E619434((uint64_t)v31);
  if (v34 != v36)
    free(v34);
  return v24;
}

llvm::Value *sub_22E4CF82C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, char a6, uint64_t a7)
{
  uint64_t v14;
  llvm::Value *v15;
  const char *v16;
  uint64_t v17;

  v14 = *(_QWORD *)(a1 + 200);
  v15 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x78);
  MEMORY[0x23489F6FC](v15, a2, a7, 0xFFFFFFFFLL, a3, v14);
  if ((*(_QWORD *)(*(_QWORD *)(a1 + 152) + 8) & 0x2000000000) == 0 && (a6 & 1) == 0)
  {
    v16 = (const char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 216) + 648))(*(_QWORD *)(a1 + 216));
    if (v16)
    {
      strlen(v16);
      llvm::GlobalObject::setSection();
    }
  }
  if ((_DWORD)a7 == 7)
    sub_22E62BF18((uint64_t *)a1, 0, 0, v15, a4);
  *((_WORD *)v15 + 9) = *((_WORD *)v15 + 9) & 0xC00F | (16 * *(_WORD *)(a1 + 136));
  v17 = *(_QWORD *)(a1 + 152);
  if ((*(_QWORD *)(v17 + 8) & 0x100000000000) == 0)
  {
    llvm::Function::addFnAttr();
    v17 = *(_QWORD *)(a1 + 152);
  }
  if ((*(_BYTE *)(v17 + 256) & 1) != 0 && (sub_22E62D1E8(a1, 1, 0, v15, a5) & 1) == 0)
    llvm::Function::addFnAttr();
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 152) + 256) & 8) != 0 && (sub_22E62D1E8(a1, 8, 0, v15, a5) & 1) == 0)
    llvm::Function::addFnAttr();
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 152) + 256) & 0x10) != 0 && (sub_22E62D1E8(a1, 16, 0, v15, a5) & 1) == 0)
    llvm::Function::addFnAttr();
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 152) + 256) & 0x20) != 0 && (sub_22E62D1E8(a1, 32, 0, v15, a5) & 1) == 0)
    llvm::Function::addFnAttr();
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 152) + 256) & 0x40) != 0 && (sub_22E62D1E8(a1, 64, 0, v15, a5) & 1) == 0)
    llvm::Function::addFnAttr();
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 152) + 257) & 0x20) != 0 && (sub_22E62D1E8(a1, 0x2000, 0, v15, a5) & 1) == 0)
    llvm::Function::addFnAttr();
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 152) + 257) & 2) != 0 && (sub_22E62D1E8(a1, 512, 0, v15, a5) & 1) == 0)
    llvm::Function::addFnAttr();
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 152) + 257) & 4) != 0 && (sub_22E62D1E8(a1, 1024, 0, v15, a5) & 1) == 0)
    llvm::Function::addFnAttr();
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 152) + 262) & 0x10) != 0
    && (sub_22E62D1E8(a1, 0x10000000000000, 0, v15, a5) & 1) == 0)
  {
    llvm::Function::addFnAttr();
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 152) + 262) & 0x20) != 0
    && (sub_22E62D1E8(a1, 0x20000000000000, 0, v15, a5) & 1) == 0)
  {
    llvm::Function::addFnAttr();
  }
  return v15;
}

llvm::Value *sub_22E4CFB3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  llvm::Value *v3;
  llvm::Value *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::Value *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unsigned int v21;
  int8x16_t v22;
  llvm::Value *v23;
  uint64_t v24;
  llvm::Type *v25;
  llvm::Type **NullValue;
  uint64_t v28;
  uint64_t v29;
  _OWORD v30[3];
  _BYTE v31[32];
  __int16 v32;
  uint64_t v33;
  uint64_t v34[2];
  _QWORD v35[3];
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  int v44;
  void *v45;
  uint64_t v46;
  _BYTE v47[128];
  uint64_t v48[4];
  __int16 v49;
  uint64_t v50[183];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  void *v54;
  __int128 v55;
  _QWORD v56[34];

  v0 = MEMORY[0x24BDAC7A8]();
  v28 = v2;
  v29 = v1;
  v4 = v3;
  v6 = v5;
  v7 = v0;
  v56[32] = *MEMORY[0x24BDAC8D0];
  v54 = v56;
  v55 = xmmword_22F44E320;
  sub_22F242C48((uint64_t)v48, (uint64_t)&v54);
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 144) + 224) + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v8 + 160))(v8, v6, v48);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v48);
  v9 = *(_QWORD *)(v7 + 144);
  v48[0] = *(_QWORD *)(*(_QWORD *)(v9 + 144) + 16480);
  v11 = sub_22E46BBB8((_QWORD **)(v9 + 280), v48[0], 0, 0, v48, 1, 0, v10, 0, 0, -1);
  v48[0] = *(_QWORD *)(*(_QWORD *)(v7 + 144) + 72);
  v12 = llvm::FunctionType::get();
  v13 = *(_QWORD *)(v7 + 144);
  v49 = 261;
  v48[0] = (uint64_t)v54;
  v48[1] = v55;
  v14 = sub_22E4CF82C(v13, v12, (uint64_t)v48, v11, *(_DWORD *)(v6 + 24), 0, 7);
  sub_22E618EBC((uint64_t)v48, *(_QWORD *)(v7 + 144), 0);
  v45 = v47;
  v46 = 0x1000000000;
  v15 = *(_QWORD *)(*(_QWORD *)(v7 + 144) + 144);
  v16 = *(_QWORD *)(v15 + 16480);
  sub_22EA41AB8((uint64_t)v35, 62, 0, 0);
  v37 = 0;
  v38 = v16;
  v39 = 0;
  v40 = 0;
  v41 = v15 | 2;
  v42 = v35;
  v43 = 0;
  v35[0] = &off_24FAC3008;
  v44 = 1310720;
  v36 |= 0x200u;
  v17 = v46;
  if (v46 >= HIDWORD(v46))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v17 = v46;
  }
  *((_QWORD *)v45 + v17) = v35;
  LODWORD(v46) = v46 + 1;
  v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 144) + 144) + 16480);
  v19 = *(_DWORD *)(v6 + 24);
  v20 = sub_22EFBC5B4(v6);
  sub_22EFF605C(v20);
  sub_22E61A8FC((uint64_t)v48, v6 | 2, 0, v18, v14, v11, (uint64_t *)&v45, v19, v22, v21);
  v34[0] = 0;
  v34[1] = (uint64_t)v48;
  sub_22E48EE24(v34, 0, 0);
  v33 = v28;
  v32 = 257;
  v23 = sub_22E462B78(v50, v29, (uint64_t)v4, (uint64_t)&v33, 1, (uint64_t)v31, 0);
  v24 = llvm::Value::stripPointerCastsAndAliases(v4);
  if (v24 && !*(_BYTE *)(v24 + 16))
    *((_WORD *)v23 + 9) = (*(_WORD *)(v24 + 18) >> 2) & 0xFFC | *((_WORD *)v23 + 9) & 0xF003;
  NullValue = (llvm::Type **)llvm::Constant::getNullValue(*(llvm::Constant **)(*(_QWORD *)(v7 + 144) + 72), v25);
  v30[0] = v51;
  v30[1] = v52;
  v30[2] = v53;
  sub_22E3BEDDC((uint64_t)v50, NullValue, (uint64_t)v30);
  sub_22E619DE8((uint64_t)v48, 0);
  sub_22E48F084(v34);
  if (v45 != v47)
    free(v45);
  sub_22E619434((uint64_t)v48);
  if (v54 != v56)
    free(v54);
  return v14;
}

llvm::Value *sub_22E4CFECC(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  llvm::Value *v5;
  uint64_t v6;
  llvm::Value *v7;
  BOOL v8;
  uint64_t v10[4];
  __int16 v11;
  _QWORD *v12;

  v10[0] = *a2;
  v4 = llvm::FunctionType::get();
  v6 = sub_22E633A04(*(_QWORD *)(a1 + 144), v4, "atexit", 6uLL, 0, 1, 0);
  v7 = v5;
  if (*((_BYTE *)v5 + 16))
    v8 = 1;
  else
    v8 = v5 == 0;
  if (!v8)
    llvm::Function::addFnAttr();
  v12 = a2;
  v11 = 257;
  return sub_22F24EEDC(a1, v6, v7, (uint64_t)&v12, 1, (uint64_t)v10);
}

void sub_22E4CFF88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::Value *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  llvm::Value *v22;
  int *v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  llvm::Value **v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  llvm::Value **v52;
  llvm::Value *v53;
  unint64_t *v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  llvm::Value **v67;
  unint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  llvm::Value **v76;
  llvm::Value *v77;
  __int128 v78;
  uint64_t *v79;
  __int128 v80;
  uint64_t v81;
  __int16 v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  _BYTE v86[24];
  _BYTE v87[256];
  _BYTE *v88;
  uint64_t v89;
  _BYTE v90[128];
  uint64_t v91;

  v0 = MEMORY[0x24BDAC7A8]();
  v3 = v2;
  v5 = v4;
  v6 = v1;
  v7 = v0;
  v91 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(v0 + 152);
  if ((*(_WORD *)(v8 + 96) & 0x1080) == 0x80)
  {
    if (sub_22E466E5C(v1) || sub_22E466EBC(v6) || sub_22E469D10(v6))
      return;
    v8 = *(_QWORD *)(v7 + 152);
  }
  if (!*(_DWORD *)(v8 + 72)
    || ((*(uint64_t (**)(_QWORD, unint64_t, uint64_t, uint64_t))(**(_QWORD **)(v7 + 808) + 320))(*(_QWORD *)(v7 + 808), v6, v5, v3) & 1) == 0)
  {
    *(_QWORD *)v86 = v6;
    *(_QWORD *)&v80 = 0;
    if (!sub_22F25AFD8((uint64_t *)(v7 + 2152), v86, &v80)
      || (_QWORD)v80 == *(_QWORD *)(v7 + 2152) + 16 * *(unsigned int *)(v7 + 2168)
      || *(_DWORD *)(v80 + 8) != -1)
    {
      v9 = llvm::FunctionType::get();
      *(_QWORD *)v86 = v87;
      *(_OWORD *)&v86[8] = xmmword_22F44E320;
      sub_22F242C48((uint64_t)&v80, (uint64_t)v86);
      (*(void (**)(_QWORD, unint64_t, __int128 *))(**(_QWORD **)(*(_QWORD *)(v7 + 224) + 16) + 152))(*(_QWORD *)(*(_QWORD *)(v7 + 224) + 16), v6, &v80);
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v80);
      v82 = 261;
      v80 = *(_OWORD *)v86;
      v11 = sub_22E46BBB8((_QWORD **)(v7 + 280), *(_QWORD *)(*(_QWORD *)(v7 + 288) + 16392), 0, 0, 0, 0, 0, v10, 0, 0, -1);
      v12 = sub_22E4CF82C(v7, v9, (uint64_t)&v80, v11, *(_DWORD *)(v6 + 24), 0, 7);
      v13 = 0;
      if ((*(_BYTE *)(v6 + 29) & 1) != 0)
      {
        sub_22EFC8E88(v6);
        v15 = *(uint64_t **)v14;
        v16 = *(unsigned int *)(v14 + 8);
        v17 = *(uint64_t **)v14;
        if ((_DWORD)v16)
        {
          v19 = 8 * v16;
          v17 = *(uint64_t **)v14;
          while (*(_WORD *)(*v17 + 32) != 367)
          {
            ++v17;
            v19 -= 8;
            if (!v19)
              goto LABEL_20;
          }
        }
        if (v17 == &v15[v16])
        {
LABEL_20:
          v13 = 0;
        }
        else
        {
          do
          {
            v18 = *v15++;
            v13 = v18;
          }
          while (*(_WORD *)(v18 + 32) != 367);
        }
      }
      sub_22E618EBC((uint64_t)&v80, v7, 0);
      if (sub_22F2556D0(v6))
        v84 = 0;
      v79 = (uint64_t *)(v7 + 2152);
      v21 = *(_QWORD *)(v6 + 56);
      if ((v21 & 4) != 0 && (v66 = v21 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(v66 + 16)))
      {
        v22 = v12;
        v23 = **(int ***)(v66 + 24);
      }
      else
      {
        v22 = v12;
        v23 = (int *)(v6 + 64);
      }
      v85 = *v23;
      v24 = *(_QWORD *)(*(_QWORD *)(v83 + 144) + 16392);
      v25 = sub_22E46BBB8((_QWORD **)(v83 + 280), *(_QWORD *)(*(_QWORD *)(v83 + 288) + 16392), 0, 0, 0, 0, 0, v20, 0, 0, -1);
      memset(v90, 0, sizeof(v90));
      v88 = v90;
      v89 = 0x1000000000;
      sub_22E61A8FC((uint64_t)&v80, v6 & 0xFFFFFFFFFFFFFFF8 | 1, 0, v24, v22, v25, (uint64_t *)&v88, 0, (int8x16_t)0x1000000000uLL, 0);
      if (v88 != v90)
        free(v88);
      v88 = 0;
      v89 = (uint64_t)&v80;
      sub_22E48EE24((uint64_t *)&v88, 0, 0);
      if ((*(_DWORD *)(v5 + 32) & 0xE) == 2
        || (*(_DWORD *)(v5 + 32) & 0xE) == 4
        || (sub_22EFBB794(v6), v26 == 2) && (sub_22EFBC2B0(v6) & 0xFFFFFFFD) != 0)
      {
        sub_22F25B764((uint64_t)&v80, v6, v5, v3);
      }
      else
      {
        sub_22E4CEC30();
      }
      sub_22E619DE8((uint64_t)&v80, 0);
      sub_22E48F084(&v88);
      sub_22E619434((uint64_t)&v80);
      v27 = 0;
      v28 = *(_DWORD *)(*(_QWORD *)(v7 + 216) + 76);
      if ((v28 - 8) >= 2 && v28 != 5)
      {
        if (sub_22EFB948C(v6) <= 2)
          v27 = 0;
        else
          v27 = v5;
      }
      sub_22EFBB794(v6);
      if (v29)
      {
        v30 = *(llvm::Value ***)(v7 + 2088);
        v31 = *(_QWORD *)(v7 + 2096);
        if ((unint64_t)v30 >= v31)
        {
          v38 = *(_QWORD **)(v7 + 2080);
          v39 = v30 - (llvm::Value **)v38;
          v40 = v39 + 1;
          if ((unint64_t)(v39 + 1) >> 61)
            goto LABEL_122;
          v41 = v31 - (_QWORD)v38;
          if (v41 >> 2 > v40)
            v40 = v41 >> 2;
          if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
            v42 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v42 = v40;
          if (v42)
          {
            if (v42 >> 61)
              goto LABEL_123;
            v43 = (char *)operator new(8 * v42);
          }
          else
          {
            v43 = 0;
          }
          v52 = (llvm::Value **)&v43[8 * v39];
          *v52 = v22;
          v32 = v52 + 1;
          if (v30 != v38)
          {
            do
            {
              v53 = *--v30;
              *--v52 = v53;
            }
            while (v30 != v38);
            v30 = *(llvm::Value ***)(v7 + 2080);
          }
          *(_QWORD *)(v7 + 2080) = v52;
          *(_QWORD *)(v7 + 2088) = v32;
          *(_QWORD *)(v7 + 2096) = &v43[8 * v42];
          if (v30)
            operator delete(v30);
        }
        else
        {
          *v30 = v22;
          v32 = v30 + 1;
        }
        *(_QWORD *)(v7 + 2088) = v32;
        v54 = *(unint64_t **)(v7 + 2112);
        v55 = *(_QWORD *)(v7 + 2120);
        if ((unint64_t)v54 < v55)
        {
          *v54 = v6;
          v56 = v54 + 1;
LABEL_94:
          *(_QWORD *)(v7 + 2112) = v56;
          goto LABEL_95;
        }
        v57 = *(_QWORD **)(v7 + 2104);
        v58 = v54 - v57;
        v59 = v58 + 1;
        if (!((unint64_t)(v58 + 1) >> 61))
        {
          v60 = v55 - (_QWORD)v57;
          if (v60 >> 2 > v59)
            v59 = v60 >> 2;
          if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8)
            v61 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v61 = v59;
          if (!v61)
          {
            v62 = 0;
            goto LABEL_89;
          }
          if (!(v61 >> 61))
          {
            v62 = (char *)operator new(8 * v61);
LABEL_89:
            v63 = (unint64_t *)&v62[8 * v58];
            *v63 = v6;
            v56 = v63 + 1;
            if (v54 != v57)
            {
              do
              {
                v64 = *--v54;
                *--v63 = v64;
              }
              while (v54 != v57);
              v54 = *(unint64_t **)(v7 + 2104);
            }
            *(_QWORD *)(v7 + 2104) = v63;
            *(_QWORD *)(v7 + 2112) = v56;
            *(_QWORD *)(v7 + 2120) = &v62[8 * v61];
            if (v54)
              operator delete(v54);
            goto LABEL_94;
          }
LABEL_123:
          sub_22E3B3F8C();
        }
LABEL_122:
        abort();
      }
      if (v13 && (_DWORD)v3)
      {
        sub_22F25B890(v7, v5);
      }
      else
      {
        if ((*(_BYTE *)(v6 + 29) & 1) != 0)
        {
          sub_22EFC8E88(v6);
          v34 = *(uint64_t **)v33;
          v35 = *(unsigned int *)(v33 + 8);
          v36 = *(uint64_t **)v33;
          if ((_DWORD)v35)
          {
            v37 = 8 * v35;
            v36 = *(uint64_t **)v33;
            while (*(_WORD *)(*v36 + 32) != 192)
            {
              ++v36;
              v37 -= 8;
              if (!v37)
                goto LABEL_59;
            }
          }
          if (v36 != &v34[v35])
          {
            do
            {
              v45 = *v34++;
              v44 = v45;
            }
            while (*(_WORD *)(v45 + 32) != 192);
            v46 = *(unsigned int *)(v7 + 2184);
            v47 = *(unsigned int *)(v44 + 36) | (unint64_t)(v46 << 32);
            if (v46 >= *(_DWORD *)(v7 + 2188))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v46 = *(unsigned int *)(v7 + 2184);
            }
            v48 = (unint64_t *)(*(_QWORD *)(v7 + 2176) + 16 * v46);
            *v48 = v47;
            v48[1] = (unint64_t)v22;
            ++*(_DWORD *)(v7 + 2184);
            goto LABEL_95;
          }
        }
LABEL_59:
        if ((sub_22EFBC2B0(v6) & 0xFFFFFFFD) != 0
          || sub_22EF732CC(*(_QWORD **)(v7 + 144), v6) == 2
          || sub_22E46B3EC(v6))
        {
          LODWORD(v80) = 0xFFFF;
          *((_QWORD *)&v80 + 1) = v22;
          v81 = v27;
          v49 = *(_QWORD *)(v7 + 1472);
          if (v49 < *(_QWORD *)(v7 + 1480))
          {
            v78 = v80;
            *(_QWORD *)(v49 + 16) = v81;
            *(_OWORD *)v49 = v78;
            v50 = (char *)(v49 + 24);
          }
          else
          {
            v50 = sub_22E63BB48((void **)(v7 + 1464), (uint64_t)&v80);
          }
          *(_QWORD *)(v7 + 1472) = v50;
          if (v27)
          {
            v51 = *(_QWORD *)(v7 + 216);
            if (*(_DWORD *)(v51 + 76) == 3 || *(_DWORD *)(v51 + 148) == 11)
            {
              *(_QWORD *)&v80 = v27;
              sub_22E62C508((uint64_t *)(v7 + 1416), (uint64_t *)&v80);
            }
            if (*(_QWORD *)(v5 + 48) && (*(_DWORD *)(*(_QWORD *)(v7 + 216) + 76) | 4) == 7)
              llvm::GlobalObject::setComdat();
          }
          goto LABEL_95;
        }
        v88 = (_BYTE *)v6;
        *(_QWORD *)&v80 = 0;
        if (sub_22F25AFD8(v79, &v88, &v80)
          && (_QWORD)v80 != *(_QWORD *)(v7 + 2152) + 16 * *(unsigned int *)(v7 + 2168))
        {
          v65 = *(unsigned int *)(v80 + 8);
          if ((_DWORD)v65 != -1)
            *(_QWORD *)(*(_QWORD *)(v7 + 2128) + 8 * v65) = v22;
          goto LABEL_95;
        }
        v67 = *(llvm::Value ***)(v7 + 2136);
        v68 = *(_QWORD *)(v7 + 2144);
        if ((unint64_t)v67 >= v68)
        {
          v70 = *(_QWORD **)(v7 + 2128);
          v71 = v67 - (llvm::Value **)v70;
          v72 = v71 + 1;
          if ((unint64_t)(v71 + 1) >> 61)
            goto LABEL_122;
          v73 = v68 - (_QWORD)v70;
          if (v73 >> 2 > v72)
            v72 = v73 >> 2;
          if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8)
            v74 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v74 = v72;
          if (v74)
          {
            if (v74 >> 61)
              goto LABEL_123;
            v75 = (char *)operator new(8 * v74);
          }
          else
          {
            v75 = 0;
          }
          v76 = (llvm::Value **)&v75[8 * v71];
          *v76 = v22;
          v69 = v76 + 1;
          if (v67 != v70)
          {
            do
            {
              v77 = *--v67;
              *--v76 = v77;
            }
            while (v67 != v70);
            v67 = *(llvm::Value ***)(v7 + 2128);
          }
          *(_QWORD *)(v7 + 2128) = v76;
          *(_QWORD *)(v7 + 2136) = v69;
          *(_QWORD *)(v7 + 2144) = &v75[8 * v74];
          if (v67)
            operator delete(v67);
        }
        else
        {
          *v67 = v22;
          v69 = v67 + 1;
        }
        *(_QWORD *)(v7 + 2136) = v69;
      }
LABEL_95:
      *(_QWORD *)&v80 = v6;
      *((_DWORD *)sub_22E4D1AD8(v79, &v80) + 2) = -1;
      if (*(_BYTE **)v86 != v87)
        free(*(void **)v86);
    }
  }
}

uint64_t sub_22E4D0840(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = (uint64_t *)(a1 + 2152);
  v21 = a2;
  v22 = 0;
  result = sub_22F25AFD8((uint64_t *)(a1 + 2152), &v21, &v22);
  if (!(_DWORD)result
    || v22 == *(_QWORD *)(a1 + 2152) + 16 * *(unsigned int *)(a1 + 2168)
    || *(_DWORD *)(v22 + 8) != -1)
  {
    v8 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 800) + 112))(*(_QWORD *)(a1 + 800), a2, a3);
    v21 = a2;
    v22 = 0;
    if (!sub_22F25AFD8(v6, &v21, &v22)
      || v22 == *(_QWORD *)(a1 + 2152) + 16 * *(unsigned int *)(a1 + 2168))
    {
      v10 = *(uint64_t **)(a1 + 2136);
      v11 = *(_QWORD *)(a1 + 2144);
      if ((unint64_t)v10 >= v11)
      {
        v13 = *(_QWORD **)(a1 + 2128);
        v14 = v10 - v13;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 61)
          abort();
        v16 = v11 - (_QWORD)v13;
        if (v16 >> 2 > v15)
          v15 = v16 >> 2;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          if (v17 >> 61)
            sub_22E3B3F8C();
          v18 = (char *)operator new(8 * v17);
        }
        else
        {
          v18 = 0;
        }
        v19 = (uint64_t *)&v18[8 * v14];
        *v19 = v8;
        v12 = v19 + 1;
        if (v10 != v13)
        {
          do
          {
            v20 = *--v10;
            *--v19 = v20;
          }
          while (v10 != v13);
          v10 = *(uint64_t **)(a1 + 2128);
        }
        *(_QWORD *)(a1 + 2128) = v19;
        *(_QWORD *)(a1 + 2136) = v12;
        *(_QWORD *)(a1 + 2144) = &v18[8 * v17];
        if (v10)
          operator delete(v10);
      }
      else
      {
        *v10 = v8;
        v12 = v10 + 1;
      }
      *(_QWORD *)(a1 + 2136) = v12;
    }
    else
    {
      v9 = *(unsigned int *)(v22 + 8);
      if ((_DWORD)v9 != -1)
        *(_QWORD *)(*(_QWORD *)(a1 + 2128) + 8 * v9) = v8;
    }
    v22 = a2;
    result = (uint64_t)sub_22E4D1AD8(v6, &v22);
    *(_DWORD *)(result + 8) = -1;
  }
  return result;
}

void sub_22E4D0A00(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  if (a2)
  {
    v4 = (_QWORD *)a1[267];
    v5 = a1[268];
    if ((unint64_t)v4 >= v5)
    {
      v7 = (_QWORD *)a1[266];
      v8 = v4 - v7;
      v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 61)
        abort();
      v10 = v5 - (_QWORD)v7;
      if (v10 >> 2 > v9)
        v9 = v10 >> 2;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
        v11 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v11 = v9;
      if (v11)
      {
        if (v11 >> 61)
          sub_22E3B3F8C();
        v12 = (char *)operator new(8 * v11);
      }
      else
      {
        v12 = 0;
      }
      v13 = &v12[8 * v8];
      *(_QWORD *)v13 = a2;
      v6 = v13 + 8;
      if (v4 != v7)
      {
        do
        {
          v14 = *--v4;
          *((_QWORD *)v13 - 1) = v14;
          v13 -= 8;
        }
        while (v4 != v7);
        v4 = (_QWORD *)a1[266];
      }
      a1[266] = v13;
      a1[267] = v6;
      a1[268] = &v12[8 * v11];
      if (v4)
        operator delete(v4);
    }
    else
    {
      *v4 = a2;
      v6 = v4 + 1;
    }
    a1[267] = v6;
  }
}

uint64_t sub_22E4D0AF4()
{
  uint64_t result;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  unsigned int v11;
  _DWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  _DWORD *v16;
  unsigned int v17;
  std::string *v18;
  std::string::size_type v19;
  llvm::Value *v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  __int128 v25;
  unint64_t v26;
  const void *v27;
  size_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  llvm::Value *v33;
  unint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  std::string v39;
  void *__p[2];
  std::string::size_type v41;
  _BYTE v42[24];
  _WORD v43[3092];
  char *v44;
  uint64_t v45;
  _QWORD v46[2];
  __int16 v47;
  uint64_t v48;

  result = MEMORY[0x24BDAC7A8]();
  v1 = result;
  v48 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(result + 2128);
  v3 = *(_QWORD **)(result + 2136);
  if (v2 == v3)
  {
LABEL_6:
    if (!*(_DWORD *)(result + 2184))
      return result;
  }
  else
  {
    v4 = v3 - 1;
    while (!*v4)
    {
      *(_QWORD *)(result + 2136) = v4;
      if (v4-- == v2)
        goto LABEL_6;
    }
  }
  v38 = llvm::FunctionType::get();
  v37 = sub_22E46BBB8((_QWORD **)(v1 + 280), *(_QWORD *)(*(_QWORD *)(v1 + 288) + 16392), 0, 0, 0, 0, 0, v6, 0, 0, -1);
  v7 = *(unsigned int *)(v1 + 2184);
  if ((_DWORD)v7)
  {
    v44 = (char *)v46;
    v45 = 0x800000000;
    if ((_DWORD)v7 == 1)
    {
      v8 = *(_QWORD *)(v1 + 2176);
      v9 = (_DWORD *)(v8 + 16);
    }
    else
    {
      qsort(*(void **)(v1 + 2176), v7, 0x10uLL, (int (__cdecl *)(const void *, const void *))sub_22F25C114);
      v10 = *(unsigned int *)(v1 + 2184);
      if (!(_DWORD)v10)
      {
LABEL_32:
        *(_DWORD *)(v1 + 2184) = 0;
        if (v44 != (char *)v46)
          free(v44);
        goto LABEL_34;
      }
      v8 = *(_QWORD *)(v1 + 2176);
      v9 = (_DWORD *)(v8 + 16 * v10);
    }
    do
    {
      v11 = *(_DWORD *)v8;
      v12 = v9;
      if (v9 != (_DWORD *)(v8 + 16))
      {
        v13 = (uint64_t)((uint64_t)v9 - v8 - 16) >> 4;
        v12 = (_DWORD *)(v8 + 16);
        do
        {
          v14 = v13 >> 1;
          v15 = &v12[4 * (v13 >> 1)];
          v17 = *v15;
          v16 = v15 + 4;
          v13 += ~(v13 >> 1);
          if (v11 < v17)
            v13 = v14;
          else
            v12 = v16;
        }
        while (v13);
      }
      LODWORD(v45) = 0;
      sub_22E4D10CC((uint64_t)&v39, v11);
      v18 = std::string::insert(&v39, 0, "_GLOBAL__I_");
      v19 = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v41 = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      v43[4] = 260;
      *(_QWORD *)v42 = __p;
      v20 = sub_22E4CF82C(v1, v38, (uint64_t)v42, v37, 0, 0, 7);
      if (SHIBYTE(v41) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v39.__r_.__value_.__l.__data_);
      if (v8 < (unint64_t)v12)
      {
        v21 = v45;
        do
        {
          v22 = *(_QWORD *)(v8 + 8);
          if (v21 >= HIDWORD(v45))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v21 = v45;
          }
          *(_QWORD *)&v44[8 * v21] = v22;
          v21 = v45 + 1;
          LODWORD(v45) = v45 + 1;
          v8 += 16;
        }
        while (v8 < (unint64_t)v12);
      }
      sub_22E618EBC((uint64_t)v42, v1, 0);
      sub_22E4D1298((uint64_t)v42, v20, (llvm::Value **)v44, v45, 0, 0);
      sub_22E619434((uint64_t)v42);
      *(_DWORD *)v42 = v11;
      *(_QWORD *)&v42[8] = v20;
      *(_QWORD *)&v42[16] = 0;
      v23 = *(_QWORD *)(v1 + 1472);
      if (v23 < *(_QWORD *)(v1 + 1480))
      {
        v25 = *(_OWORD *)v42;
        *(_QWORD *)(v23 + 16) = *(_QWORD *)&v42[16];
        *(_OWORD *)v23 = v25;
        v24 = (char *)(v23 + 24);
      }
      else
      {
        v24 = sub_22E63BB48((void **)(v1 + 1464), (uint64_t)v42);
      }
      *(_QWORD *)(v1 + 1472) = v24;
    }
    while ((_DWORD *)v8 != v9);
    goto LABEL_32;
  }
LABEL_34:
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 224) + 56))(*(_QWORD *)(v1 + 224));
  if ((_DWORD)result && *(_QWORD *)(v1 + 2128) == *(_QWORD *)(v1 + 2136))
    return result;
  v27 = (const void *)llvm::sys::path::filename();
  v28 = v26;
  *(_QWORD *)v42 = v43;
  *(_OWORD *)&v42[8] = xmmword_22F44E310;
  if (v26 < 0x81)
  {
    v29 = 0;
    if (!v26)
      goto LABEL_39;
    goto LABEL_38;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod();
  v29 = *(_QWORD *)&v42[8];
  if (v28)
  {
LABEL_38:
    memcpy((void *)(*(_QWORD *)v42 + v29), v27, v28);
    v29 = *(_QWORD *)&v42[8];
  }
LABEL_39:
  v30 = v29 + v28;
  *(_QWORD *)&v42[8] = v30;
  if (v30)
    goto LABEL_43;
  *(_QWORD *)&v42[8] = 0;
  if (*(_QWORD *)&v42[16] <= 5uLL)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v30 = *(_QWORD *)&v42[8];
  }
  v31 = *(_QWORD *)v42 + v30;
  *(_WORD *)(v31 + 4) = 15980;
  *(_DWORD *)v31 = 1819635260;
  v30 = *(_QWORD *)&v42[8] + 6;
  *(_QWORD *)&v42[8] += 6;
  if (*(_QWORD *)&v42[8])
  {
LABEL_43:
    v32 = 0;
    do
    {
      if ((word_22F4ADB24[*(unsigned __int8 *)(*(_QWORD *)v42 + v32)] & 0x1E8) == 0)
      {
        *(_BYTE *)(*(_QWORD *)v42 + v32) = 95;
        v30 = *(_QWORD *)&v42[8];
      }
      ++v32;
    }
    while (v32 < v30);
  }
  v47 = 1283;
  v44 = "_GLOBAL__sub_I_";
  v46[0] = *(_QWORD *)v42;
  v46[1] = v30;
  v33 = sub_22E4CF82C(v1, v38, (uint64_t)&v44, v37, 0, 0, 7);
  if (*(_WORD **)v42 != v43)
    free(*(void **)v42);
  sub_22E618EBC((uint64_t)v42, v1, 0);
  sub_22E4D1298((uint64_t)v42, v33, *(llvm::Value ***)(v1 + 2128), (uint64_t)(*(_QWORD *)(v1 + 2136) - *(_QWORD *)(v1 + 2128)) >> 3, 0, 0);
  sub_22E619434((uint64_t)v42);
  *(_DWORD *)v42 = 0xFFFF;
  *(_QWORD *)&v42[8] = v33;
  *(_QWORD *)&v42[16] = 0;
  v34 = *(_QWORD *)(v1 + 1472);
  if (v34 < *(_QWORD *)(v1 + 1480))
  {
    v36 = *(_OWORD *)v42;
    *(_QWORD *)(v34 + 16) = *(_QWORD *)&v42[16];
    *(_OWORD *)v34 = v36;
    result = v34 + 24;
  }
  else
  {
    result = (uint64_t)sub_22E63BB48((void **)(v1 + 1464), (uint64_t)v42);
  }
  *(_QWORD *)(v1 + 1472) = result;
  v35 = *(_QWORD *)(v1 + 152);
  if ((*(_DWORD *)(v35 + 52) & 0x40000000) != 0)
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, llvm::Value *))(**(_QWORD **)(v1 + 792) + 56))(*(_QWORD *)(v1 + 792), 0, 0, v33);
    *((_WORD *)v33 + 9) = *((_WORD *)v33 + 9) & 0xC00F | 0x4C0;
    v35 = *(_QWORD *)(v1 + 152);
  }
  if ((*(_BYTE *)(v35 + 68) & 0x40) != 0 && (*(_WORD *)(v35 + 96) & 0x80) != 0)
  {
    *((_WORD *)v33 + 9) = *((_WORD *)v33 + 9) & 0xC00F | 0x5B0;
    result = llvm::Function::addFnAttr();
  }
  *(_QWORD *)(v1 + 2136) = *(_QWORD *)(v1 + 2128);
  return result;
}

void sub_22E4D10CC(uint64_t a1, int a2)
{
  char *v3;
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  std::string::size_type v10;
  std::string *p_p;
  uint64_t v12;
  uint64_t v13;
  char v14;
  BOOL v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string::size_type v18;
  std::string *v19;
  std::string::size_type v20;
  char v21;
  std::string __p;
  _QWORD v23[3];

  v23[2] = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    LODWORD(v4) = a2;
    v3 = &__p.__r_.__value_.__s.__data_[21];
    v4 = v4;
    do
    {
      *--v3 = (v4 % 0xA) | 0x30;
      v5 = v4 > 9;
      v4 /= 0xAuLL;
    }
    while (v5);
  }
  else
  {
    v3 = &__p.__r_.__value_.__s.__data_[20];
    __p.__r_.__value_.__s.__data_[20] = 48;
  }
  sub_22E3B4274((_QWORD *)a1, v3, &__p.__r_.__value_.__s.__data_[21], (char *)&__p.__r_.__value_.__r.__words[2] + 5 - v3);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 23);
  v8 = v7;
  v9 = v7 & 0x7F;
  if (v8 >= 0)
    v6 = v9;
  v10 = 6 - v6;
  if ((unint64_t)(6 - v6) >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v10 >= 0x17)
  {
    v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v12 = v10 | 7;
    v13 = v12 + 1;
    p_p = (std::string *)operator new(v12 + 1);
    __p.__r_.__value_.__l.__size_ = v10;
    __p.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    goto LABEL_15;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 6 - v6;
  p_p = &__p;
  if (v6 != 6)
LABEL_15:
    memset(p_p, 48, v10);
  p_p->__r_.__value_.__s.__data_[v10] = 0;
  v14 = *(_BYTE *)(a1 + 23);
  v15 = v14 < 0;
  if (v14 >= 0)
    v16 = (const std::string::value_type *)a1;
  else
    v16 = *(const std::string::value_type **)a1;
  v17 = v14 & 0x7F;
  if (v15)
    v18 = *(_QWORD *)(a1 + 8);
  else
    v18 = v17;
  v19 = std::string::append(&__p, v16, v18);
  v20 = v19->__r_.__value_.__r.__words[0];
  v23[0] = v19->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v23 + 7) = *(std::string::size_type *)((char *)&v19->__r_.__value_.__r.__words[1] + 7);
  v21 = HIBYTE(v19->__r_.__value_.__r.__words[2]);
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(_QWORD *)a1 = v20;
  *(_QWORD *)(a1 + 8) = v23[0];
  *(_QWORD *)(a1 + 15) = *(_QWORD *)((char *)v23 + 7);
  *(_BYTE *)(a1 + 23) = v21;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

_QWORD *sub_22E4D1298(uint64_t a1, llvm::Value *a2, llvm::Value **a3, int a4, unint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  llvm::Constant **v18;
  llvm::Type *v19;
  uint64_t NullValue;
  int v21;
  _QWORD *v22;
  uint64_t BranchWeights;
  uint64_t v24;
  llvm::Type **v25;
  llvm::DataLayout *DataLayout;
  llvm::Type *v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  unint64_t ABITypeAlignment;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  llvm::Value *v37;
  uint64_t v38;
  uint64_t v39;
  llvm::Value *v41;
  unint64_t v42;
  _QWORD v43[3];
  int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[3];
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51[2];
  uint64_t v52[2];
  void *v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;

  LODWORD(v8) = a4;
  v63 = *MEMORY[0x24BDAC8D0];
  v52[0] = 0;
  v52[1] = a1;
  sub_22E48EE24(v52, 0, 1);
  v12 = *(_QWORD *)(a1 + 144);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 144) + 16392);
  v15 = sub_22E46BBB8((_QWORD **)(v12 + 280), *(_QWORD *)(*(_QWORD *)(v12 + 288) + 16392), 0, 0, 0, 0, 0, v14, 0, 0, -1);
  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  v57 = 0u;
  v58 = 0u;
  v55 = 0u;
  v56 = 0u;
  v53 = &v55;
  v54 = 0x1000000000;
  sub_22E61A8FC(a1, 0, 0, v13, a2, v15, (uint64_t *)&v53, 0, (int8x16_t)0x1000000000uLL, 0);
  if (v53 != &v55)
    free(v53);
  v51[0] = 0;
  v51[1] = a1;
  sub_22E48EE24(v51, 0, 0);
  v16 = 0;
  if (a5 >= 8)
  {
    v42 = a5 & 0xFFFFFFFFFFFFFFF8;
    v47[0] = a5 & 0xFFFFFFFFFFFFFFF8;
    v47[1] = a6 & 0xFFFFFFFFFFFFFFF8;
    v17 = 1 << (a6 & 7 | (8 * (a5 & 7)));
    v47[2] = v17;
    v48 = 0;
    v49 = 0;
    v50 = 0;
    LOWORD(v56) = 257;
    v18 = (llvm::Constant **)sub_22E3C2A7C((uint64_t *)(a1 + 272), (uint64_t)v47, (uint64_t)&v53);
    v53 = "guard.uninitialized";
    LOWORD(v56) = 259;
    NullValue = llvm::Constant::getNullValue(*v18, v19);
    v21 = v8;
    v8 = sub_22E3C18F4(a1 + 272, 32, (uint64_t *)v18, NullValue, (uint64_t)&v53);
    v53 = "init";
    LOWORD(v56) = 259;
    v22 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v53 = "exit";
    LOWORD(v56) = 259;
    v16 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v53 = *(void **)(*(_QWORD *)(a1 + 144) + 232);
    BranchWeights = llvm::MDBuilder::createBranchWeights((llvm::MDBuilder *)&v53);
    v24 = v8;
    LODWORD(v8) = v21;
    sub_22E3D26FC((uint64_t *)(a1 + 272), v24, (uint64_t)v22, (uint64_t)v16, BranchWeights, 0);
    sub_22E5ED9B4((_QWORD *)a1, v22, 0);
    v25 = (llvm::Type **)llvm::ConstantInt::get();
    v43[0] = v42;
    v43[1] = a6 & 0xFFFFFFFFFFFFFFF8;
    v43[2] = v17;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    sub_22E3BEDDC(a1 + 272, v25, (uint64_t)v43);
    DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a1 + 144) + 200));
    v27 = *v18;
    sub_22E3C304C((uint64_t)DataLayout, (uint64_t)v27);
    v29 = (unint64_t)(v28 + 7) >> 3;
    LOBYTE(v17) = v30 == 1;
    ABITypeAlignment = llvm::DataLayout::getABITypeAlignment(DataLayout, v27);
    v53 = (void *)((ABITypeAlignment + v29 - 1) / ABITypeAlignment * ABITypeAlignment);
    v54 = v17 & 1;
    llvm::TypeSize::operator unsigned long long();
    sub_22E4CEB18((llvm::Value *)a1);
  }
  v32 = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000);
  v33 = *(_QWORD *)(a1 + 2312);
  v34 = *(_BYTE *)(a1 + 2893);
  *(_BYTE *)(a1 + 2893) = 0;
  v35 = *(_QWORD *)(a1 + 2872);
  *(_QWORD *)(a1 + 2872) = v32;
  v36 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 152);
  if ((*(_WORD *)(v36 + 148) & 2) != 0 && (*(_BYTE *)(v36 + 1) & 1) != 0)
  {
    v41 = sub_22F273784(a1);
    sub_22F273D5C(a1, (uint64_t)v41);
  }
  v8 = v8;
  if ((_DWORD)v8)
  {
    do
    {
      v37 = *a3;
      if (*a3)
      {
        v38 = *((_QWORD *)v37 + 3);
        LOWORD(v56) = 257;
        sub_22E479C7C(a1, v38, v37, 0, 0, (uint64_t)&v53);
      }
      ++a3;
      --v8;
    }
    while (v8);
  }
  *(_BYTE *)(a1 + 2893) = v34;
  sub_22E48B274((_QWORD *)a1, v32, v33, 0, 0);
  *(_QWORD *)(a1 + 2872) = v35;
  if (v16)
  {
    v39 = llvm::User::operator new((llvm::User *)0x40);
    llvm::BranchInst::BranchInst();
    LOWORD(v56) = 257;
    sub_22E3C12C8((uint64_t *)(a1 + 272), v39, (uint64_t)&v53);
    sub_22E5ED9B4((_QWORD *)a1, v16, 0);
  }
  sub_22E48F084(v51);
  sub_22E48F084(v52);
  return sub_22E619DE8(a1, 0);
}

void sub_22E4D1710()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  unint64_t v6;
  _DWORD *v7;
  llvm::Value *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _DWORD *v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int *v18;
  _DWORD *v19;
  unsigned int v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  int v25;
  std::string *v26;
  std::string::size_type v27;
  llvm::Value *v28;
  _QWORD *v29;
  uint64_t v30;
  std::string v31;
  void *__p[2];
  std::string::size_type v33;
  _QWORD v34[4];
  __int16 v35;
  char *v36;
  uint64_t v37;
  _QWORD v38[42];

  v0 = MEMORY[0x24BDAC7A8]();
  v1 = v0;
  v38[40] = *MEMORY[0x24BDAC8D0];
  if (!*(_DWORD *)(v0 + 2328) && !*(_DWORD *)(v0 + 2664))
    return;
  v2 = llvm::FunctionType::get();
  v4 = sub_22E46BBB8((_QWORD **)(v1 + 280), *(_QWORD *)(*(_QWORD *)(v1 + 288) + 16392), 0, 0, 0, 0, 0, v3, 0, 0, -1);
  v5 = *(unsigned int *)(v1 + 2664);
  if ((_DWORD)v5)
  {
    v36 = (char *)v38;
    v37 = 0x800000000;
    if ((_DWORD)v5 == 1)
    {
      v6 = *(_QWORD *)(v1 + 2656);
      v7 = (_DWORD *)(v6 + 16);
    }
    else
    {
      qsort(*(void **)(v1 + 2656), v5, 0x10uLL, (int (__cdecl *)(const void *, const void *))sub_22F25C114);
      v14 = *(unsigned int *)(v1 + 2664);
      if (!(_DWORD)v14)
      {
LABEL_45:
        *(_DWORD *)(v1 + 2664) = 0;
        sub_22F25C174((void **)&v36);
        goto LABEL_4;
      }
      v6 = *(_QWORD *)(v1 + 2656);
      v7 = (_DWORD *)(v6 + 16 * v14);
    }
    do
    {
      v15 = v7;
      if (v7 != (_DWORD *)(v6 + 16))
      {
        v16 = (uint64_t)((uint64_t)v7 - v6 - 16) >> 4;
        v15 = (_DWORD *)(v6 + 16);
        do
        {
          v17 = v16 >> 1;
          v18 = &v15[4 * (v16 >> 1)];
          v20 = *v18;
          v19 = v18 + 4;
          v16 += ~(v16 >> 1);
          if (*(_DWORD *)v6 < v20)
            v16 = v17;
          else
            v15 = v19;
        }
        while (v16);
      }
      if ((_DWORD)v37)
      {
        v21 = v36;
        v22 = 40 * v37;
        do
        {
          v23 = *(_QWORD *)&v21[v22 - 16];
          if (v23 != -8192 && v23 != -4096 && v23 != 0)
            llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v21[v22 - 32]);
          v22 -= 40;
        }
        while (v22);
      }
      LODWORD(v37) = 0;
      v25 = *(_DWORD *)v6;
      sub_22E4D10CC((uint64_t)&v31, *(_DWORD *)v6);
      v26 = std::string::insert(&v31, 0, "_GLOBAL__a_");
      v27 = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v33 = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      v35 = 260;
      v34[0] = __p;
      v28 = sub_22E4CF82C(v1, v2, (uint64_t)v34, v4, 0, 0, 7);
      if (SHIBYTE(v33) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
      while (v6 < (unint64_t)v15)
      {
        v29 = *(_QWORD **)(v6 + 8);
        if (v29)
          v30 = v29[3];
        else
          v30 = 0;
        v34[0] = v30;
        __p[0] = v29;
        v31.__r_.__value_.__r.__words[0] = 0;
        sub_22F25B9C4((uint64_t)&v36, v34, (uint64_t *)__p);
        v6 += 16;
      }
      sub_22E618EBC((uint64_t)v34, v1, 0);
      sub_22F25BA64((uint64_t)v34, v28, (uint64_t)v36, v37);
      sub_22E619434((uint64_t)v34);
      sub_22E629CDC(v1, (uint64_t)v28, v25, 0);
    }
    while ((_DWORD *)v6 != v7);
    goto LABEL_45;
  }
LABEL_4:
  if (*(_DWORD *)(v1 + 2328))
  {
    v34[0] = "_GLOBAL__D_a";
    v35 = 259;
    v8 = sub_22E4CF82C(v1, v2, (uint64_t)v34, v4, 0, 0, 7);
    sub_22E618EBC((uint64_t)v34, v1, 0);
    sub_22F25BA64((uint64_t)v34, v8, *(_QWORD *)(v1 + 2320), *(_DWORD *)(v1 + 2328));
    sub_22E619434((uint64_t)v34);
    sub_22E629CDC(v1, (uint64_t)v8, 0xFFFF, 0);
    v9 = *(unsigned int *)(v1 + 2328);
    if ((_DWORD)v9)
    {
      v10 = *(_QWORD *)(v1 + 2320);
      v11 = 40 * v9;
      do
      {
        v12 = *(_QWORD *)(v10 + v11 - 16);
        if (v12 != -8192 && v12 != -4096 && v12 != 0)
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v10 + v11 - 32));
        v11 -= 40;
      }
      while (v11);
    }
    *(_DWORD *)(v1 + 2328) = 0;
  }
}

_QWORD *sub_22E4D1AD8(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F25AFD8(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22E4D1B3C((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    *((_DWORD *)v5 + 2) = 0;
  }
  return v5;
}

_QWORD *sub_22E4D1B3C(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E4D1BEC(a1, v7);
  v9 = 0;
  sub_22F25AFD8((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_22E4D1BEC(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22E4D1CAC(a1, (uint64_t)v4, (uint64_t)v4 + 16 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22E4D1CAC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_22F25AFD8((uint64_t *)v5, (_QWORD *)a2, &v10);
      v9 = v10;
      *v10 = *(_QWORD *)a2;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

char **sub_22E4D1D58(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  char **v9;
  char **v10;

  v4 = *(_DWORD **)(a1 + 216);
  v5 = *(_QWORD *)(a1 + 152);
  if (a2 && (*(_BYTE *)(a2 + 84) & 2) != 0)
  {
    if (v4[14] == 41)
      return &off_24FA63A80;
    else
      return &off_24FA63A90;
  }
  else
  {
    v6 = *(_QWORD *)v5;
    if ((*(_QWORD *)v5 & 0x4000) != 0)
    {
      if ((v6 & 0x100) == 0)
        return sub_22E4D1E44((uint64_t)v4, v5);
      if (v4[17] != 15 || (v4[18] & 0xFFFFFFEF) != 0)
        return (char **)((_QWORD *(*)(char **__return_ptr))((char *)&loc_22E4D1E0C
                                                                     + 4 * byte_22F4572B8[*(unsigned int *)(v5 + 400)]))(&off_24FA63968);
    }
    else
    {
      if ((v6 & 0x100) != 0)
        return sub_22E4D1F38((uint64_t)v4, v5);
      if (v4[17] != 15 || (v4[18] & 0xFFFFFFEF) != 0)
      {
        v8 = *(_DWORD *)(v5 + 240) & 7;
        v9 = &off_24FA638C8;
        v10 = &off_24FA638E8;
        if (v8 != 2)
          v10 = &off_24FA638C8;
        if (v8 != 3)
          v9 = v10;
        if (v8 == 1)
          return &off_24FA638D8;
        else
          return v9;
      }
    }
    return &off_24FA63A60;
  }
}

char **sub_22E4D1E44(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 68) != 15 || (*(_DWORD *)(a1 + 72) & 0xFFFFFFEF) != 0)
    __asm { BR              X10 }
  return &off_24FA63A60;
}

void sub_22E4D1F10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10)
{
  uint64_t v10;

  a9 = 0x8000000700000001;
  a10 = 0;
  if (!sub_22E3B38EC((_DWORD *)(v10 + 404), &a9))
    JUMPOUT(0x22E4D1F00);
  JUMPOUT(0x22E4D1E90);
}

char **sub_22E4D1F38(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(a1 + 68);
  if (v2 == 15 && (*(_DWORD *)(a1 + 72) & 0xFFFFFFEF) == 0)
    return &off_24FA63A60;
  if (v2 == 21)
    return &off_24FA63988;
  if ((*(_DWORD *)(a2 + 240) & 7u) - 1 < 3)
    return (char **)*(&off_24FA63AA0 + (*(_DWORD *)(a2 + 240) & 7) - 1);
  if ((*(_DWORD *)(a2 + 240) & 7) == 4)
    return &off_24FA63A70;
  return &off_24FA63908;
}

char **sub_22E4D1FAC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = a1[200];
  if (!v1)
    v1 = a1[236];
  v2 = a1[18];
  if (v1)
  {
    if ((*(_DWORD *)(v1 + 28) & 0x7Eu) - 52 >= 6)
      v3 = 0;
    else
      v3 = v1;
  }
  else
  {
    v3 = 0;
  }
  return sub_22E4D1D58(v2, v3);
}

uint64_t sub_22E4D1FE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  BOOL v5;
  uint64_t v6;
  uint64_t i;
  llvm::BasicBlock *v8;
  uint64_t LandingPadInst;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  llvm::Value **v21;
  _QWORD *Name;
  unint64_t v24;
  uint64_t v26;
  llvm::Value *v27;
  _QWORD *v28;
  unint64_t v29;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 1;
  while (1)
  {
    v2 = *(_QWORD *)(v1 + 24);
    v3 = *(unsigned __int8 *)(v2 + 16);
    if (!v2 || v3 != 5)
      break;
    if (*(_WORD *)(v2 + 18) != 49 || (sub_22E4D1FE4() & 1) == 0)
      return 0;
LABEL_53:
    v1 = *(_QWORD *)(v1 + 8);
    if (!v1)
      return 1;
  }
  if (v2)
    v5 = v3 == 0;
  else
    v5 = 0;
  if (!v5)
    return 0;
  v6 = v2 + 72;
  for (i = *(_QWORD *)(v2 + 80); ; i = *(_QWORD *)(i + 8))
  {
    if (i == v6)
      goto LABEL_53;
    v8 = i ? (llvm::BasicBlock *)(i - 24) : 0;
    if (llvm::BasicBlock::isLandingPad(v8))
    {
      LandingPadInst = llvm::BasicBlock::getLandingPadInst(v8);
      v10 = *(_DWORD *)(LandingPadInst + 20);
      v11 = v10 & 0x7FFFFFF;
      if ((v10 & 0x7FFFFFF) != 0)
        break;
    }
LABEL_50:
    ;
  }
  v12 = LandingPadInst;
  v13 = 0;
  while (1)
  {
    v14 = *(_DWORD *)(v12 + 20);
    if ((v14 & 0x40000000) != 0)
      v15 = *(_QWORD *)(v12 - 8);
    else
      v15 = v12 - 32 * (v14 & 0x7FFFFFF);
    v16 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v15 + 32 * v13));
    v17 = *(_DWORD *)(v12 + 20);
    if ((v17 & 0x40000000) != 0)
      v18 = *(_QWORD *)(v12 - 8);
    else
      v18 = v12 - 32 * (v17 & 0x7FFFFFF);
    if (*(_BYTE *)(**(_QWORD **)(v18 + 32 * v13) + 8) != 17)
    {
      if (*(_BYTE *)(v16 + 16) == 3 && v16 != 0)
      {
        Name = (_QWORD *)llvm::Value::getName((llvm::Value *)v16);
        if (v24 >= 0xB && *Name == 0x5448455F434A424FLL && *(_QWORD *)((char *)Name + 3) == 0x4550595448455F43)
          return 0;
      }
      goto LABEL_49;
    }
    v19 = *(_DWORD *)(v16 + 20);
    if ((v19 & 0x40000000) != 0)
      break;
    v20 = v19 & 0x7FFFFFF;
    v21 = (llvm::Value **)(v16 - 32 * v20);
    if (v20)
      goto LABEL_41;
LABEL_49:
    if (++v13 == v11)
      goto LABEL_50;
  }
  v21 = *(llvm::Value ***)(v16 - 8);
  v20 = v19 & 0x7FFFFFF;
  if (!v20)
    goto LABEL_49;
LABEL_41:
  v26 = 32 * v20;
  while (1)
  {
    v27 = (llvm::Value *)llvm::Value::stripPointerCasts(*v21);
    if (v27)
    {
      v28 = (_QWORD *)llvm::Value::getName(v27);
      if (v29 >= 0xB && *v28 == 0x5448455F434A424FLL && *(_QWORD *)((char *)v28 + 3) == 0x4550595448455F43)
        return 0;
    }
    v21 += 4;
    v26 -= 32;
    if (!v26)
      goto LABEL_49;
  }
}

uint64_t sub_22E4D21C8(uint64_t a1, const char **a2)
{
  uint64_t v4;
  const char *v5;
  size_t v6;
  uint64_t v7;

  v4 = llvm::FunctionType::get();
  v5 = *a2;
  if (v5)
    v6 = strlen(v5);
  else
    v6 = 0;
  sub_22E633A04(a1, v4, v5, v6, 0, 1, 0);
  return v7;
}

_QWORD *sub_22E4D223C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  llvm::LLVMContext *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD v23[3];
  _BYTE v24[32];
  __int16 v25;
  __int128 v26[3];
  __int128 v27;
  __int128 v28;
  __int128 v29;

  if ((*(_BYTE *)(a3 + 24) & 3) != 0)
    v6 = sub_22F28ABCC((_OWORD *)a3, a1);
  else
    v6 = *(_QWORD *)a3;
  if (a1[729])
  {
    v8 = sub_22E4648A4((uint64_t)a1, v6);
    v9 = sub_22E4899EC((uint64_t)(a1 + 248), 1u, 16);
    *(_QWORD *)v9 = off_24FA639D0;
    *((_QWORD *)v9 + 1) = v8;
    v11 = sub_22E489C10((uint64_t)a1, v10);
    sub_22F2531F0((uint64_t)a1, v11, v12);
  }
  else
  {
    v7 = sub_22E4899EC((uint64_t)(a1 + 248), 1u, 16);
    *(_QWORD *)v7 = off_24FA639A8;
    *((_QWORD *)v7 + 1) = v6;
  }
  v13 = a1[249];
  v14 = a1[250];
  v15 = sub_22E66C868(a1[18] + 280, *(_QWORD *)(a2 + 8), 0);
  v16 = *(_OWORD *)(a3 + 16);
  v26[0] = *(_OWORD *)a3;
  v26[1] = v16;
  v26[2] = *(_OWORD *)(a3 + 32);
  v25 = 257;
  sub_22E3BEE6C(a1 + 34, v26, v15, (uint64_t)v24, (uint64_t)&v27);
  v23[1] = v28;
  v23[2] = v29;
  v23[0] = v27;
  v17 = *(_QWORD *)(a2 + 8);
  v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v18 & 8) != 0)
  {
    v20 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    v19 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
  }
  else
  {
    v19 = 0;
    v20 = 0;
  }
  sub_22E4DA890((uint64_t)a1, a2, v23, v19 | v20 | (v18 | v17) & 7, 1);
  if ((BYTE8(v28) & 3) != 0)
    v21 = sub_22F28ABCC(&v27, a1);
  else
    v21 = v27;
  return sub_22F25343C(a1, (llvm::LLVMContext *)(v13 - v14), v21);
}

char *sub_22E4D23EC(char *result, uint64_t a2)
{
  uint64_t *v2;
  int v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;

  if (!a2)
    return result;
  v2 = (uint64_t *)result;
  if ((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)result + 18) + 152) + 8) & 0x400000000000) == 0)
    return result;
  v4 = *(_DWORD *)(a2 + 28);
  if ((v4 & 0x7Eu) - 52 >= 6)
  {
    if ((v4 & 0x7F) != 2 || (*(_BYTE *)(a2 + 80) & 4) == 0)
      return result;
    return sub_22F2530F4(v2 + 248);
  }
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v5)
    v6 = *(_BYTE *)(v5 + 16) == 26;
  else
    v6 = 0;
  if (!v6)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
      return result;
    result = (char *)sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0));
    v5 = (uint64_t)result;
    if (!result)
      return result;
  }
  v7 = *(_QWORD *)(v5 + 16);
  v8 = (v7 >> 54) & 0xF;
  if ((_DWORD)v8 != 2 && ((_DWORD)v8 != 1 || (*(_BYTE *)(*(_QWORD *)(v2[18] + 152) + 1) & 8) != 0))
  {
    result = (char *)sub_22F113A44(v5);
    if ((_DWORD)result || (*(_QWORD *)(*(_QWORD *)(v2[18] + 152) + 8) & 0x800000000000) != 0)
      return result;
    return sub_22F2530F4(v2 + 248);
  }
  v9 = *(_DWORD *)(v2[19] + 148);
  if (v9 == 11)
    return result;
  v10 = v2[18];
  if ((*(_DWORD *)(*(_QWORD *)(v10 + 152) + 240) & 7) == 4)
  {
    if ((_DWORD)v8 != 1)
    {
      v11 = *(_QWORD *)(v10 + 208);
      *(_DWORD *)(v11 + 312) = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(v11 + 316) = 7167;
      if (*(char *)(v11 + 311) < 0)
      {
        **(_BYTE **)(v11 + 288) = 0;
        *(_QWORD *)(v11 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v11 + 288) = 0;
        *(_BYTE *)(v11 + 311) = 0;
      }
      v35 = v11 + 320;
      v36 = 0;
      v37 = v11;
      v38 = 1;
      *(_BYTE *)(v11 + 320) = 0;
      *(_DWORD *)(v11 + 664) = 0;
      v12 = *(unsigned int *)(v11 + 776);
      if ((_DWORD)v12)
      {
        v13 = *(_QWORD *)(v11 + 768);
        v14 = 56 * v12;
        do
        {
          if (*(char *)(v13 + v14 - 9) < 0)
            operator delete(*(void **)(v13 + v14 - 32));
          v14 -= 56;
        }
        while (v14);
      }
      *(_DWORD *)(v11 + 776) = 0;
      v15 = sub_22EFC17CC(a2);
      sub_22E4D6448(v11 + 656, v15, 1);
      return (char *)sub_22E3BB0B8((uint64_t)&v35);
    }
    return sub_22F2530F4(v2 + 248);
  }
  if ((_DWORD)v8 == 2 && v9 == 7 && (*(_DWORD *)(*(_QWORD *)(v10 + 152) + 240) & 7) == 0)
  {
    v18 = *(_QWORD *)(v10 + 208);
    *(_DWORD *)(v18 + 312) = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(v18 + 316) = 7167;
    if (*(char *)(v18 + 311) < 0)
    {
      **(_BYTE **)(v18 + 288) = 0;
      *(_QWORD *)(v18 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v18 + 288) = 0;
      *(_BYTE *)(v18 + 311) = 0;
    }
    v35 = v18 + 320;
    v36 = 0;
    v37 = v18;
    v38 = 1;
    *(_BYTE *)(v18 + 320) = 0;
    *(_DWORD *)(v18 + 664) = 0;
    v19 = *(unsigned int *)(v18 + 776);
    if ((_DWORD)v19)
    {
      v20 = *(_QWORD *)(v18 + 768);
      v21 = 56 * v19;
      do
      {
        if (*(char *)(v20 + v21 - 9) < 0)
          operator delete(*(void **)(v20 + v21 - 32));
        v21 -= 56;
      }
      while (v21);
    }
    *(_DWORD *)(v18 + 776) = 0;
    v22 = sub_22EFC17CC(a2);
    sub_22E4D6448(v18 + 656, v22, 1);
    sub_22E3BB0B8((uint64_t)&v35);
    v7 = *(_QWORD *)(v5 + 16);
  }
  if ((v7 & 0x3C0000000000000) != 0x80000000000000)
    return sub_22F25300C(v2 + 248, 0);
  v23 = (unsigned int *)((v5 + 40 + 8 * (unsigned __int16)(v7 >> 38) + 4 * ((v7 >> 59) & 1) + 7) & 0xFFFFFFFFFFFFFFF8);
  v24 = *v23;
  result = sub_22F25300C(v2 + 248, *v23);
  if ((_DWORD)v24)
  {
    v25 = 0;
    v26 = result + 32;
    do
    {
      v27 = *(_QWORD *)(((v5
                        + 40
                        + 8 * (unsigned __int16)(*(_QWORD *)(v5 + 16) >> 38)
                        + 4 * ((*(_QWORD *)(v5 + 16) >> 59) & 1)
                        + 7) & 0xFFFFFFFFFFFFFFF8)
                      + 8 * ((*(_QWORD *)(v5 + 16) & 0x3C0000000000000) == 0x80000000000000)
                      + 8 * v25);
      v28 = v27 & 0xFFFFFFFFFFFFFFF0;
      v29 = *(_QWORD *)(v27 & 0xFFFFFFFFFFFFFFF0);
      if (v29)
      {
        v30 = *(_DWORD *)(v29 + 16);
        if ((v30 & 0xFE) == 0x28)
          goto LABEL_61;
      }
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
      {
        v33 = *(_QWORD *)(((v5
                          + 40
                          + 8 * (unsigned __int16)(*(_QWORD *)(v5 + 16) >> 38)
                          + 4 * ((*(_QWORD *)(v5 + 16) >> 59) & 1)
                          + 7) & 0xFFFFFFFFFFFFFFF8)
                        + 8 * ((*(_QWORD *)(v5 + 16) & 0x3C0000000000000) == 0x80000000000000)
                        + 8 * v25);
        v34 = v27 & 0xFFFFFFFFFFFFFFF0;
        v29 = sub_22F10CF48(v29);
        if (v29)
        {
          v30 = *(_DWORD *)(v29 + 16);
LABEL_61:
          if ((v30 & 0x100000) != 0)
          {
            do
            {
              v29 = *(_QWORD *)(*(_QWORD *)(v29 + 32) & 0xFFFFFFFFFFFFFFF0);
              if (v29)
              {
                v32 = *(_DWORD *)(v29 + 16);
                if ((v32 & 0xFE) == 0x28)
                  continue;
              }
              v29 = sub_22F10CF48(v29);
              v32 = *(_DWORD *)(v29 + 16);
            }
            while ((v32 & 0x100000) != 0);
          }
          v27 = *(_QWORD *)(v29 + 32);
          v28 = v27 & 0xFFFFFFFFFFFFFFF0;
          goto LABEL_55;
        }
        v27 = v33;
        v28 = v34;
      }
LABEL_55:
      v31 = *(_QWORD *)v28;
      if ((*(_BYTE *)(*(_QWORD *)v28 + 8) & 0xF) != 0)
        v31 = (unint64_t)sub_22F10D2BC(v27);
      result = (char *)sub_22F29C578(v2[18], (llvm::Type *)(v31 & 0xFFFFFFFFFFFFFFF0), 1);
      *(_QWORD *)&v26[8 * v25++] = result;
    }
    while (v25 != v24);
  }
  return result;
}

uint64_t sub_22E4D27F8(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  int v3;
  int v5;
  _QWORD *v6;

  v1 = a1;
  v2 = *(_QWORD *)(*a1 & 0xFFFFFFFFFFFFFFF0);
  if (!v2 || (v3 = *(_DWORD *)(v2 + 16), (v3 & 0xFE) != 0x28))
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
      return *v1;
    v6 = v1;
    v2 = sub_22F10CF48(v2);
    v1 = v6;
    if (!v2)
      return *v1;
    v3 = *(_DWORD *)(v2 + 16);
  }
  if ((v3 & 0x100000) != 0)
  {
    do
    {
      v2 = *(_QWORD *)(*(_QWORD *)(v2 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (v2)
      {
        v5 = *(_DWORD *)(v2 + 16);
        if ((v5 & 0xFE) == 0x28)
          continue;
      }
      v2 = sub_22F10CF48(v2);
      v5 = *(_DWORD *)(v2 + 16);
    }
    while ((v5 & 0x100000) != 0);
  }
  v1 = (_QWORD *)(v2 + 32);
  return *v1;
}

uint64_t sub_22E4D28A4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  llvm::LLVMContext *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  llvm::Value *v23;
  llvm::Value *v24;
  uint64_t v25;
  _QWORD v26[4];
  __int16 v27;

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 144) + 152) + 8) & 0x400000000000) == 0 || !a2)
    return result;
  v2 = result;
  v3 = *(_DWORD *)(a2 + 28);
  if ((v3 & 0x7Eu) - 52 >= 6)
  {
    if ((v3 & 0x7F) != 2 || (*(_BYTE *)(a2 + 80) & 4) == 0)
      return result;
    goto LABEL_22;
  }
  result = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (result)
    v4 = *(_BYTE *)(result + 16) == 26;
  else
    v4 = 0;
  if (!v4)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
      return result;
    result = sub_22F10CF48(result);
    if (!result)
      return result;
  }
  v5 = (*(_QWORD *)(result + 16) >> 54) & 0xFLL;
  if ((_DWORD)v5 != 2 && ((_DWORD)v5 != 1 || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v2 + 144) + 152) + 1) & 8) != 0))
  {
    result = sub_22F113A44(result);
    if ((_DWORD)result)
      return result;
LABEL_22:
    v6 = *(_QWORD *)(v2 + 2000);
    if (v6 != *(_QWORD *)(v2 + 1992))
      goto LABEL_23;
    return result;
  }
  if (*(_DWORD *)(*(_QWORD *)(v2 + 152) + 148) != 11)
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 144) + 152) + 240) & 7) == 4)
    {
      if ((_DWORD)v5 == 1)
      {
        v6 = *(_QWORD *)(v2 + 2000);
LABEL_23:
        *(_QWORD *)(v2 + 2016) = *(_QWORD *)(v6 + 16);
        *(_QWORD *)(v2 + 2000) = v6 + 32;
      }
    }
    else
    {
      v7 = v2 + 1984;
      v8 = *(_QWORD *)(v2 + 2000);
      v9 = *(_QWORD *)(v8 + 8);
      if (v9)
      {
        if (*(_QWORD *)(v9 + 8))
        {
          sub_22E5EDB60((_QWORD *)v2, *(_QWORD **)(v8 + 8));
          if (*(_DWORD *)(v8 + 24) >= 8u)
          {
            v11 = (uint64_t *)sub_22F25C518((_QWORD *)v2);
            v26[0] = "ehspec.unexpected";
            v27 = 259;
            v12 = (_QWORD *)operator new();
            llvm::BasicBlock::BasicBlock();
            llvm::Type::getInt32Ty(*(llvm::Type **)(v2 + 336), v13);
            v14 = llvm::ConstantInt::get();
            v26[0] = "ehspec.fails";
            v27 = 259;
            v15 = sub_22E3C18F4(v2 + 272, 40, v11, v14, (uint64_t)v26);
            v16 = sub_22E4D3138((_QWORD *)v2, 0);
            v17 = llvm::User::operator new((llvm::User *)0x40);
            MEMORY[0x23489C09C](v17, v12, v16, v15, 0);
            v27 = 257;
            sub_22E3C12C8((uint64_t *)(v2 + 272), v17, (uint64_t)v26);
            sub_22E5ED9B4((_QWORD *)v2, v12, 0);
          }
          v18 = v2;
          v19 = (uint64_t *)(v2 + 272);
          sub_22F25C464(v18, (uint64_t)v26);
          v25 = sub_22E3C43AC(v19, (uint64_t)v26, "exn");
          v20 = *(_QWORD *)(v18 + 144);
          v26[0] = *(_QWORD *)(v20 + 96);
          v21 = llvm::FunctionType::get();
          v22 = sub_22E633A04(v20, v21, "__cxa_call_unexpected", 21, 0, 0, 0);
          v27 = 257;
          v24 = sub_22E479C7C(v18, v22, v23, (uint64_t)&v25, 1, (uint64_t)v26);
          llvm::Value::getContext(v24);
          *((_QWORD *)v24 + 8) = llvm::AttributeList::addAttributeAtIndex();
          sub_22F24866C((uint64_t)v19);
        }
        else
        {
          v10 = MEMORY[0x23489C078](*(_QWORD *)(v8 + 8));
          MEMORY[0x2348A0E9C](v10, 0x1020C4012B667A0);
        }
      }
      return sub_22F253068(v7);
    }
  }
  return result;
}

void sub_22E4D2C10(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  llvm::BasicBlock *v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v15;
  uint64_t v16;
  llvm::BasicBlock *v17;
  uint64_t FirstNonPHI;
  int v19;
  uint64_t v20;
  uint64_t v21;
  llvm::BasicBlock **v22;
  char v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  llvm::BasicBlock *v34;
  llvm::BasicBlock *v35;
  uint64_t v36;
  llvm::Value *Declaration;
  uint64_t v38;
  llvm::BasicBlock *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t *v43;
  _QWORD *v44;
  _BOOL4 v45;
  uint64_t v46;
  BOOL v47;
  _QWORD v48[4];
  __int16 v49;
  void *v50[2];
  _QWORD v51[26];

  v51[24] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 2000);
  v5 = *(llvm::BasicBlock **)(v4 + 8);
  if (v5 && *((_QWORD *)v5 + 1))
  {
    v9 = *(unsigned int *)(a2 + 12);
    sub_22E4D3A78((_QWORD *)a1, *(_QWORD *)(a1 + 2000));
    v50[0] = v51;
    v50[1] = (void *)0x800000000;
    sub_22F25DE94((uint64_t)v50, (_BYTE *)(v4 + 32), (_BYTE *)(v4 + 32 + 24 * v9));
    v10 = *(_QWORD *)(a1 + 2000);
    *(_QWORD *)(a1 + 2016) = *(_QWORD *)(v10 + 16);
    *(_QWORD *)(a1 + 2000) = v10 + ((24 * (*(_DWORD *)(v10 + 24) >> 3) + 39) & 0x7FFFFFFF8);
    v48[0] = "try.cont";
    v49 = 259;
    v11 = operator new();
    llvm::BasicBlock::BasicBlock();
    if (*(_QWORD *)(a1 + 320))
    {
      v12 = llvm::User::operator new((llvm::User *)0x40);
      llvm::BranchInst::BranchInst();
      v49 = 257;
      sub_22E3C12C8((uint64_t *)(a1 + 272), v12, (uint64_t)v48);
    }
    v13 = *(_QWORD *)(a1 + 1600);
    if (a3)
    {
      v15 = (*(_DWORD *)(v13 + 28) & 0x7F) == 0x39 || (*(_DWORD *)(v13 + 28) & 0x7F) == 55;
      v45 = v15;
    }
    else
    {
      v45 = 0;
    }
    if (!v13)
      v13 = *(_QWORD *)(a1 + 1888);
    if (v13)
    {
      if ((*(_DWORD *)(v13 + 28) & 0x7Eu) - 52 >= 6)
        v16 = 0;
      else
        v16 = v13;
    }
    else
    {
      v16 = 0;
    }
    v40 = *(_QWORD *)(a1 + 2616);
    if (sub_22E4D1D58(*(_QWORD *)(a1 + 144), v16) == &off_24FA63A70)
    {
      FirstNonPHI = llvm::BasicBlock::getFirstNonPHI(v5);
      v19 = *(_DWORD *)(FirstNonPHI + 20);
      if ((*(_WORD *)(FirstNonPHI + 18) & 1) != 0)
      {
        if ((v19 & 0x40000000) != 0)
          v21 = *(_QWORD *)(FirstNonPHI - 8);
        else
          v21 = FirstNonPHI - 32 * (v19 & 0x7FFFFFF);
        v22 = (llvm::BasicBlock **)(v21 + 64);
      }
      else
      {
        if ((v19 & 0x40000000) != 0)
          v20 = *(_QWORD *)(FirstNonPHI - 8);
        else
          v20 = FirstNonPHI - 32 * (v19 & 0x7FFFFFF);
        v22 = (llvm::BasicBlock **)(v20 + 32);
      }
      v17 = *v22;
      *(_QWORD *)(a1 + 2616) = llvm::BasicBlock::getFirstNonPHI(*v22);
    }
    else
    {
      v17 = 0;
    }
    v39 = v17;
    v44 = (_QWORD *)v11;
    v41 = a2;
    v23 = 0;
    if ((_DWORD)v9)
    {
      v42 = (_QWORD *)(a1 + 320);
      v43 = (uint64_t *)(a1 + 272);
      v24 = (uint64_t *)(a2 + 8 * v9 + 16);
      v25 = 24 * (v9 - 1);
      do
      {
        v47 = *(_QWORD *)((char *)v50[0] + v25) == 0;
        sub_22E5EDB60((_QWORD *)a1, *(_QWORD **)((char *)v50[0] + v25 + 16));
        v26 = *v24;
        v27 = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000);
        v28 = *(_QWORD *)(a1 + 2312);
        v29 = *(_BYTE *)(a1 + 2893);
        *(_BYTE *)(a1 + 2893) = 0;
        v30 = *(_QWORD *)(a1 + 2872);
        *(_QWORD *)(a1 + 2872) = v27;
        v46 = *(_QWORD *)(a1 + 2616);
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 144) + 224) + 248))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 224), a1, v26);
        sub_22E3CB7B0((_QWORD *)a1, v26, 0);
        sub_22E5E5158(a1, *(_QWORD *)(v26 + 24), 0, 0);
        if (v45 && *v42)
        {
          (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 144) + 224) + 216))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 224), a1, 0);
          sub_22F24866C((uint64_t)v43);
          *v42 = 0;
          *(_QWORD *)(a1 + 328) = 0;
        }
        *(_BYTE *)(a1 + 2893) = v29;
        sub_22E48B274(a1, v27, v28, 0, 0);
        *(_QWORD *)(a1 + 2872) = v30;
        if (*(_QWORD *)(a1 + 320))
        {
          v31 = llvm::User::operator new((llvm::User *)0x40);
          llvm::BranchInst::BranchInst();
          v49 = 257;
          sub_22E3C12C8(v43, v31, (uint64_t)v48);
        }
        v23 |= v47;
        *(_QWORD *)(a1 + 2616) = v46;
        --v24;
        v25 -= 24;
        LODWORD(v9) = v9 - 1;
      }
      while ((_DWORD)v9);
    }
    v32 = *(_QWORD *)(a1 + 1600);
    if (!v32)
      v32 = *(_QWORD *)(a1 + 1888);
    if (v32)
    {
      if ((*(_DWORD *)(v32 + 28) & 0x7Eu) - 52 >= 6)
        v33 = 0;
      else
        v33 = v32;
    }
    else
    {
      v33 = 0;
    }
    v34 = v39;
    if (!((sub_22E4D1D58(*(_QWORD *)(a1 + 144), v33) != &off_24FA63A70) | v23 & 1))
    {
      while (1)
      {
        v35 = (llvm::BasicBlock *)*((_QWORD *)v34 + 5);
        if (v35 == (llvm::BasicBlock *)((char *)v34 + 40))
          break;
        v36 = (uint64_t)v35 - 24;
        if (!v35)
          v36 = 0;
        if (*(unsigned __int8 *)(v36 + 16) - 29 > 0xA)
          break;
        v34 = (llvm::BasicBlock *)*((_QWORD *)v35 - 11);
      }
      *(_QWORD *)(a1 + 320) = v34;
      *(_QWORD *)(a1 + 328) = (char *)v34 + 40;
      Declaration = (llvm::Value *)llvm::Intrinsic::getDeclaration();
      if (Declaration)
        v38 = *((_QWORD *)Declaration + 3);
      else
        v38 = 0;
      sub_22F24EF20(a1, v38, Declaration, 0, 0);
    }
    sub_22E5ED9B4((_QWORD *)a1, v44, 0);
    sub_22E3CB7B0((_QWORD *)a1, v41, 0);
    *(_QWORD *)(a1 + 2616) = v40;
    if (v50[0] != v51)
      free(v50[0]);
  }
  else
  {
    sub_22F25D300(*(_QWORD *)(a1 + 2000));
    v6 = *(_QWORD *)(a1 + 2000);
    *(_QWORD *)(a1 + 2016) = *(_QWORD *)(v6 + 16);
    *(_QWORD *)(a1 + 2000) = v6 + ((24 * (*(_DWORD *)(v6 + 24) >> 3) + 39) & 0x7FFFFFFF8);
  }
}

uint64_t sub_22E4D3138(_QWORD *a1, char a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char **v10;
  char *v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  llvm::Value *v16;
  llvm::Value *v17;
  llvm::Value *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[4];
  __int16 v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  result = a1[331];
  if (!result)
  {
    v6 = a1[40];
    v5 = a1[41];
    v27[0] = "eh.resume";
    v28 = 259;
    operator new();
    v7 = llvm::BasicBlock::BasicBlock();
    v8 = 0;
    a1[331] = v7;
    a1[40] = v7;
    a1[41] = v7 + 40;
    v9 = a1[200];
    if (!v9)
      v9 = a1[236];
    if (v9)
    {
      if ((*(_DWORD *)(v9 + 28) & 0x7Eu) - 52 >= 6)
        v8 = 0;
      else
        v8 = v9;
    }
    v10 = sub_22E4D1D58(a1[18], v8);
    v11 = v10[1];
    if (!v11 || (a2 & 1) != 0)
    {
      sub_22F25C464((uint64_t)a1, (uint64_t)v27);
      v19 = (_QWORD *)sub_22E3C43AC(a1 + 34, (uint64_t)v27, "exn");
      v20 = (uint64_t *)sub_22F25C518(a1);
      v21 = *v20;
      v27[0] = *v19;
      v27[1] = v21;
      llvm::StructType::get();
      v22 = llvm::UndefValue::get();
      LODWORD(v26) = 0;
      v27[0] = "lpad.val";
      v28 = 259;
      v23 = sub_22E4210EC((uint64_t)(a1 + 34), v22, (uint64_t)v19, (uint64_t)&v26, 1, (uint64_t)v27);
      LODWORD(v26) = 1;
      v27[0] = "lpad.val";
      v28 = 259;
      v24 = sub_22E4210EC((uint64_t)(a1 + 34), v23, (uint64_t)v20, (uint64_t)&v26, 1, (uint64_t)v27);
      v25 = llvm::User::operator new((llvm::User *)0x40);
      MEMORY[0x23489C168](v25, v24, 0);
      v28 = 257;
      sub_22F245A34(a1 + 34, v25, (uint64_t)v27);
      if (v6)
        goto LABEL_11;
    }
    else
    {
      v12 = a1[18];
      v13 = strlen(v10[1]);
      v27[0] = *(_QWORD *)(v12 + 96);
      v14 = llvm::FunctionType::get();
      v15 = sub_22E633A04(v12, v14, v11, v13, 0, 0, 0);
      v17 = v16;
      sub_22F25C464((uint64_t)a1, (uint64_t)v27);
      v26 = sub_22E3C43AC(a1 + 34, (uint64_t)v27, "exn");
      v28 = 257;
      v18 = sub_22E479C7C((uint64_t)a1, v15, v17, (uint64_t)&v26, 1, (uint64_t)v27);
      llvm::Value::getContext(v18);
      *((_QWORD *)v18 + 8) = llvm::AttributeList::addAttributeAtIndex();
      sub_22F24866C((uint64_t)(a1 + 34));
      if (v6)
      {
LABEL_11:
        sub_22E3CB840((uint64_t)(a1 + 34), v6, v5);
        return a1[331];
      }
    }
    a1[40] = 0;
    a1[41] = 0;
    return a1[331];
  }
  return result;
}

uint64_t sub_22E4D3430(uint64_t a1, const char **a2)
{
  llvm::LLVMContext *v3;

  sub_22E4D21C8(a1, a2);
  llvm::Type::getInt8Ty(*(llvm::Type **)(a1 + 232), v3);
  llvm::Module::getDataLayout(*(llvm::Module **)(a1 + 200));
  llvm::PointerType::get();
  return llvm::ConstantExpr::getBitCast();
}

uint64_t sub_22E4D3488(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  _QWORD *v5;
  int v7;
  llvm::ConstantPointerNull **v8;
  uint64_t v9;
  uint64_t v10;
  llvm::Type **v11;
  llvm::Type **v12;
  uint64_t v13;
  llvm::Type *v14;
  uint64_t v15;
  llvm::PointerType *v16;
  const void **v17;
  _BYTE *v18;
  int v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  const void **v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  llvm::ConstantPointerNull ***v29;
  llvm::ConstantPointerNull **v30;
  unint64_t v31;
  uint64_t v32;
  llvm::ConstantPointerNull **v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _WORD *v37;
  _WORD *v38;
  uint64_t v39;
  int v40;
  _WORD v41[16];
  _QWORD v42[3];
  int v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[48];
  uint64_t v47[2];
  void *v48;
  uint64_t v49;
  _BYTE v50[16];
  __int16 v51;
  llvm::ConstantPointerNull ***v52;
  uint64_t v53;
  _QWORD v54[6];

  v54[4] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2016);
  v3 = *(_BYTE *)(v2 + 24) & 7;
  if (v3 < 2 || v3 == 3)
  {
    v5 = *(_QWORD **)v2;
    if (*(_QWORD *)v2)
      return (uint64_t)v5;
  }
  else if (v3 == 2)
  {
    return sub_22F25D0D4(a1);
  }
  v35 = *(_QWORD *)(a1 + 328);
  v36 = *(_QWORD *)(a1 + 320);
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  v7 = *(_DWORD *)(a1 + 5848);
  v47[0] = 0;
  v47[1] = a1;
  sub_22E48EE24(v47, v7, 0);
  v48 = "lpad";
  v51 = 259;
  v5 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  sub_22E5ED9B4((_QWORD *)a1, v5, 0);
  v8 = (llvm::ConstantPointerNull **)(a1 + 96);
  v9 = *(_QWORD *)(a1 + 24);
  v48 = *(void **)(a1 + 96);
  v49 = v9;
  llvm::StructType::get();
  v41[0] = 257;
  v51 = 257;
  v10 = llvm::LandingPadInst::Create();
  sub_22F245A34((uint64_t *)(a1 + 272), v10, (uint64_t)&v37);
  LODWORD(v37) = 0;
  v51 = 257;
  v11 = (llvm::Type **)sub_22E3C2EA8(a1 + 272, v10, (uint64_t)&v37, 1, (uint64_t)&v48);
  sub_22F25C464(a1, (uint64_t)v46);
  sub_22E3BEDDC(a1 + 272, v11, (uint64_t)v46);
  LODWORD(v37) = 1;
  v51 = 257;
  v12 = (llvm::Type **)sub_22E3C2EA8(a1 + 272, v10, (uint64_t)&v37, 1, (uint64_t)&v48);
  v13 = *(_QWORD *)(a1 + 2664);
  if (!v13)
  {
    v14 = *(llvm::Type **)(a1 + 24);
    v48 = "ehselector.slot";
    v51 = 259;
    v13 = sub_22E4D8348(a1, v14, (uint64_t)&v48, 0);
    *(_QWORD *)(a1 + 2664) = v13;
  }
  v15 = *(_QWORD *)(a1 + 24);
  v42[0] = v13;
  v42[1] = v15;
  v42[2] = 4;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  sub_22E3BEDDC(a1 + 272, v12, (uint64_t)v42);
  v52 = (llvm::ConstantPointerNull ***)v54;
  v53 = 0x400000000;
  v37 = v41;
  v38 = v41;
  v39 = 4;
  v40 = 0;
  v17 = *(const void ***)(a1 + 2000);
  v48 = v17;
  v18 = *(_BYTE **)(a1 + 1992);
  if (v17 == (const void **)v18)
  {
LABEL_32:
    v34 = v36;
    goto LABEL_33;
  }
  LOBYTE(v19) = 0;
  while (1)
  {
    v20 = (_BYTE)v17[3] & 7;
    if (((_BYTE)v17[3] & 7) != 0)
      break;
    if ((v19 & 1) != 0)
    {
      sub_22E47E120((uint64_t *)&v48);
      v17 = (const void **)v48;
      LOBYTE(v19) = 1;
      if (v48 == v18)
      {
        v34 = v36;
LABEL_59:
        *(_WORD *)(v10 + 18) |= 1u;
        goto LABEL_33;
      }
    }
    else
    {
      v19 = (*((unsigned __int8 *)v17 + 24) >> 4) & 1;
LABEL_28:
      sub_22E47E120((uint64_t *)&v48);
      v17 = (const void **)v48;
      if (v48 == v18)
      {
        v34 = v36;
        if ((v19 & 1) == 0)
          goto LABEL_33;
        goto LABEL_59;
      }
    }
  }
  if (v20 == 2)
    goto LABEL_31;
  if (v20 != 3)
  {
    v21 = *((unsigned int *)v17 + 6);
    if (v21 >= 8)
    {
      v22 = v21 >> 3;
      v23 = v17 + 4;
      while (*v23)
      {
        sub_22E3BA850((uint64_t)&v37, *v23);
        if ((_BYTE)v16)
          llvm::LandingPadInst::addClause();
        v23 += 3;
        if (!--v22)
          goto LABEL_28;
      }
LABEL_31:
      llvm::ConstantPointerNull::get(*v8, v16);
      llvm::LandingPadInst::addClause();
      goto LABEL_32;
    }
    goto LABEL_28;
  }
  v25 = *((unsigned int *)v17 + 6);
  v26 = v53;
  if (v25 >= 8)
  {
    v28 = v25 >> 3;
    v29 = (llvm::ConstantPointerNull ***)(v17 + 4);
    do
    {
      v30 = *v29;
      if (v26 >= HIDWORD(v53))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v26 = v53;
      }
      v52[v26] = v30;
      v26 = v53 + 1;
      LODWORD(v53) = v53 + 1;
      ++v29;
      --v28;
    }
    while (v28);
  }
  v48 = v50;
  v49 = 0x800000000;
  if (v26)
    v8 = *v52;
  llvm::ArrayType::get(*v8, (llvm::Type *)v26);
  v27 = v49;
  if ((_DWORD)v53)
  {
    v31 = 0;
    v32 = 8 * v53;
    do
    {
      v33 = v52[v31 / 8];
      if (v27 >= HIDWORD(v49))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v27 = v49;
      }
      *((_QWORD *)v48 + v27) = v33;
      v27 = v49 + 1;
      LODWORD(v49) = v49 + 1;
      v31 += 8;
    }
    while (v32 != v31);
  }
  llvm::ConstantArray::get();
  llvm::LandingPadInst::addClause();
  if ((v19 & 1) != 0)
    *(_WORD *)(v10 + 18) |= 1u;
  v34 = v36;
  if (v48 != v50)
    free(v48);
LABEL_33:
  sub_22F25C964((_QWORD *)a1, *(_QWORD *)(a1 + 2016));
  v24 = llvm::User::operator new((llvm::User *)0x40);
  llvm::BranchInst::BranchInst();
  v51 = 257;
  sub_22E3C12C8((uint64_t *)(a1 + 272), v24, (uint64_t)&v48);
  if (v34)
  {
    sub_22E3CB840(a1 + 272, v34, v35);
  }
  else
  {
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 328) = 0;
  }
  if (v38 != v37)
    free(v38);
  if (v52 != v54)
    free(v52);
  sub_22E48F084(v47);
  return (uint64_t)v5;
}

void sub_22E4D3A14(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[250];
  v3 = *(_QWORD *)(v2 + 8);
  if (v3 && *(_QWORD *)(v3 + 8))
  {
    sub_22E4D3A78(a1, v2);
    v2 = a1[250];
  }
  a1[252] = *(_QWORD *)(v2 + 16);
  a1[250] = v2 + ((24 * (*(_DWORD *)(v2 + 24) >> 3) + 39) & 0x7FFFFFFF8);
}

void sub_22E4D3A78(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char **v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int i;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  llvm::Value *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  llvm::LLVMContext *v26;
  uint64_t v27;
  llvm::BasicBlock *v28;
  unsigned int v29;
  unsigned int v30;
  llvm::CatchSwitchInst *v31;
  llvm::BasicBlock *v32;
  llvm::Type *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  llvm::LLVMContext *v39;
  uint64_t v40;
  llvm::BasicBlock *v41;
  unsigned int v42;
  unsigned int v43;
  llvm::CatchSwitchInst *v44;
  llvm::Type *v45;
  uint64_t v46;
  llvm::BasicBlock **v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  llvm::LLVMContext *v52;
  llvm::Type *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  llvm::BasicBlock *v57;
  _QWORD *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t NullValue;
  uint64_t v62;
  uint64_t Declaration;
  uint64_t v64;
  uint64_t v65;
  llvm::Value *v66;
  uint64_t v67;
  uint64_t *v68;
  llvm::Type *v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  _QWORD *v73;
  int v74;
  int v75;
  uint64_t v76;
  llvm::Value *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t *v93;
  uint64_t *v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD v98[4];
  __int16 v99;
  uint64_t v100[4];
  __int16 v101;
  char *v102;
  uint64_t v103;
  _BYTE v104[16];
  __int16 v105;
  uint64_t v106;

  v3 = a1;
  v106 = *MEMORY[0x24BDAC8D0];
  v4 = a1[200];
  if (!v4)
    v4 = a1[236];
  v5 = a1[18];
  if (v4)
  {
    if ((*(_DWORD *)(v4 + 28) & 0x7Eu) - 52 >= 6)
      v6 = 0;
    else
      v6 = v4;
  }
  else
  {
    v6 = 0;
  }
  v96 = (uint64_t)v3;
  if (sub_22E4D1D58(v5, v6) == &off_24FA63A70)
  {
    v25 = v3 + 34;
    v85 = v3[41];
    v87 = v3[40];
    sub_22E5EDB60(v3, *(_QWORD **)(a2 + 8));
    v27 = v3[327];
    if (!v27)
      v27 = llvm::ConstantTokenNone::get(*(llvm::ConstantTokenNone **)(v3[18] + 232), v26);
    v28 = sub_22F25C964(v3, *(_QWORD *)(a2 + 16));
    v29 = *(_DWORD *)(a2 + 24);
    v30 = v29 >> 3;
    v101 = 257;
    v105 = 257;
    v31 = (llvm::CatchSwitchInst *)llvm::User::operator new((llvm::User *)0x40);
    MEMORY[0x23489CE94](v31, v27, v28, v29 >> 3, &v102, 0);
    sub_22F245A34(v3 + 34, (uint64_t)v31, (uint64_t)v100);
    v102 = "catch.start";
    v105 = 259;
    v32 = (llvm::BasicBlock *)operator new();
    llvm::BasicBlock::BasicBlock();
    llvm::CatchSwitchInst::addHandler(v31, v32);
    sub_22E5EDB60(v3, v32);
    v34 = v104;
    v102 = v104;
    v103 = 0x400000000;
    v95 = v29 >> 3;
    if (v29 >= 8)
    {
      LODWORD(v35) = 0;
      v36 = a2;
      v59 = (uint64_t *)(a2 + 32);
      if (v30 <= 1)
        v60 = 1;
      else
        v60 = v30;
      do
      {
        NullValue = *v59;
        if (!*v59)
        {
          NullValue = llvm::Constant::getNullValue((llvm::Constant *)v3[12], v33);
          LODWORD(v35) = v103;
        }
        if (v35 >= HIDWORD(v103))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          LODWORD(v35) = v103;
        }
        *(_QWORD *)&v102[8 * v35] = NullValue;
        v35 = (v103 + 1);
        LODWORD(v103) = v103 + 1;
        v59 += 3;
        --v60;
      }
      while (v60);
      v34 = v102;
    }
    else
    {
      v35 = 0;
      v36 = a2;
    }
    v101 = 257;
    v62 = sub_22F25DA88(v3 + 34, (uint64_t)v31, (uint64_t)v34, v35, (uint64_t)v100);
    Declaration = llvm::Intrinsic::getDeclaration();
    v64 = llvm::Intrinsic::getDeclaration();
    v65 = 0;
    if (Declaration)
      v65 = *(_QWORD *)(Declaration + 24);
    v98[0] = v62;
    v101 = 257;
    v66 = sub_22E462B78(v25, v65, Declaration, (uint64_t)v98, 1, (uint64_t)v100, 0);
    sub_22F25C464(v96, (uint64_t)v100);
    sub_22E3BEDDC(v25, v66, v100, 0);
    if (v64)
      v67 = *(_QWORD *)(v64 + 24);
    else
      v67 = 0;
    v97 = v62;
    v99 = 257;
    v68 = v25;
    v93 = (uint64_t *)sub_22E462B78(v25, v67, v64, (uint64_t)&v97, 1, (uint64_t)v98, 0);
    v91 = llvm::Intrinsic::getDeclaration();
    if ((*(_DWORD *)(v36 + 24) & 0xFFFFFFF8) == 8 && !*(_QWORD *)(v36 + 32))
    {
      v83 = llvm::User::operator new((llvm::User *)0x40);
      llvm::BranchInst::BranchInst();
      v99 = 257;
      sub_22E3C12C8(v25, v83, (uint64_t)v98);
      v81 = v87;
      if (v87)
      {
        v82 = (uint64_t)v25;
LABEL_98:
        sub_22E3CB840(v82, v81, v85);
      }
      else
      {
        *(_QWORD *)(v96 + 320) = 0;
        *(_QWORD *)(v96 + 328) = 0;
      }
      goto LABEL_102;
    }
    v70 = v36 + 32;
    v71 = 1;
    while (1)
    {
      v72 = *(_QWORD *)(v70 + 24 * (v71 - 1));
      if (!v72)
        v72 = llvm::Constant::getNullValue(*(llvm::Constant **)(v96 + 96), v69);
      if (v95 == v71)
        break;
      if (!*(_QWORD *)(v70 + 24 * v71))
      {
        v74 = 0;
        v73 = *(_QWORD **)(v70 + 24 * v71 + 16);
        goto LABEL_89;
      }
      v98[0] = "catch.fallthrough";
      v99 = 259;
      v73 = (_QWORD *)operator new();
      llvm::BasicBlock::BasicBlock();
      v75 = 0;
      v74 = 1;
LABEL_90:
      if (v91)
        v76 = *(_QWORD *)(v91 + 24);
      else
        v76 = 0;
      v97 = v72;
      v99 = 257;
      v77 = sub_22E462B78(v68, v76, v91, (uint64_t)&v97, 1, (uint64_t)v98, 0);
      llvm::Value::getContext(v77);
      *((_QWORD *)v77 + 8) = llvm::AttributeList::addAttributeAtIndex();
      v98[0] = "matches";
      v99 = 259;
      v78 = sub_22E3C18F4((uint64_t)v68, 32, v93, (uint64_t)v77, (uint64_t)v98);
      v70 = v36 + 32;
      v79 = *(_QWORD *)(v36 + 32 + 24 * (v71 - 1) + 16);
      v80 = llvm::User::operator new((llvm::User *)0x40);
      MEMORY[0x23489C09C](v80, v79, v73, v78, 0);
      v99 = 257;
      sub_22E3C12C8(v68, v80, (uint64_t)v98);
      if (v74)
        sub_22E5ED9B4((_QWORD *)v96, v73, 0);
      ++v71;
      if (v75)
      {
        v81 = v87;
        if (v87)
        {
          v82 = (uint64_t)v68;
          goto LABEL_98;
        }
        *(_QWORD *)(v96 + 320) = 0;
        *(_QWORD *)(v96 + 328) = 0;
LABEL_102:
        if (v102 != v104)
          free(v102);
        return;
      }
    }
    v98[0] = "rethrow";
    v99 = 259;
    v73 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v74 = 1;
LABEL_89:
    v75 = 1;
    goto LABEL_90;
  }
  v7 = v3[200];
  if (!v7)
    v7 = v3[236];
  if (v7)
  {
    if ((*(_DWORD *)(v7 + 28) & 0x7Eu) - 52 >= 6)
      v8 = 0;
    else
      v8 = v7;
  }
  else
  {
    v8 = 0;
  }
  v9 = sub_22E4D1D58(v3[18], v8);
  v10 = *(_QWORD **)(a2 + 8);
  if (v9 != &off_24FA63A70 && v9 != &off_24FA63A60 && v9 != &off_24FA63A80 && v9 != &off_24FA63A90)
  {
    if ((*(_DWORD *)(a2 + 24) & 0xFFFFFFF8) == 8 && !*(_QWORD *)(a2 + 32))
      return;
    v11 = v3 + 34;
    v88 = v3[40];
    v84 = v3 + 40;
    v86 = v3[41];
    sub_22E5EDB60(v3, v10);
    v90 = llvm::Intrinsic::getDeclaration();
    v94 = (uint64_t *)sub_22F25C518(v3);
    v92 = *(_DWORD *)(a2 + 24) >> 3;
    v89 = a2;
    v12 = a2 + 32;
    for (i = 1; ; ++i)
    {
      v100[0] = *(_QWORD *)(v12 + 24 * (i - 1));
      v14 = v3[12];
      v105 = 257;
      v100[0] = sub_22E3C1740(v11, 49, v100[0], v14, (uint64_t)&v102);
      if (v92 == i)
      {
        v15 = sub_22F25C964(v3, *(_QWORD *)(v89 + 16));
      }
      else
      {
        if (*(_QWORD *)(v12 + 24 * i))
        {
          v102 = "catch.fallthrough";
          v105 = 259;
          v15 = (_QWORD *)operator new();
          llvm::BasicBlock::BasicBlock();
          v16 = 0;
          goto LABEL_29;
        }
        v15 = *(_QWORD **)(v12 + 24 * i + 16);
      }
      v16 = 1;
LABEL_29:
      if (v90)
        v17 = *(_QWORD *)(v90 + 24);
      else
        v17 = 0;
      v105 = 257;
      v18 = sub_22E462B78(v11, v17, v90, (uint64_t)v100, 1, (uint64_t)&v102, 0);
      llvm::Value::getContext(v18);
      *((_QWORD *)v18 + 8) = llvm::AttributeList::addAttributeAtIndex();
      v102 = "matches";
      v105 = 259;
      v19 = sub_22E3C18F4((uint64_t)v11, 32, v94, (uint64_t)v18, (uint64_t)&v102);
      v20 = *(_QWORD *)(v12 + 24 * (i - 1) + 16);
      v21 = llvm::User::operator new((llvm::User *)0x40);
      MEMORY[0x23489C09C](v21, v20, v15, v19, 0);
      v105 = 257;
      sub_22E3C12C8(v11, v21, (uint64_t)&v102);
      if (v16)
      {
        v22 = v88;
        if (v88)
        {
          v23 = (uint64_t)v11;
          v24 = v86;
          goto LABEL_63;
        }
        v58 = v84;
LABEL_100:
        *v58 = 0;
        v58[1] = 0;
        return;
      }
      v3 = (_QWORD *)v96;
      sub_22E5ED9B4((_QWORD *)v96, v15, 0);
    }
  }
  v37 = v3[40];
  v38 = v3[41];
  sub_22E5EDB60(v3, v10);
  v40 = v3[327];
  if (!v40)
    v40 = llvm::ConstantTokenNone::get(*(llvm::ConstantTokenNone **)(v3[18] + 232), v39);
  v41 = sub_22F25C964(v3, *(_QWORD *)(a2 + 16));
  v42 = *(_DWORD *)(a2 + 24);
  v43 = v42 >> 3;
  v101 = 257;
  v105 = 257;
  v44 = (llvm::CatchSwitchInst *)llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x23489CE94](v44, v40, v41, v42 >> 3, &v102, 0);
  sub_22F245A34(v3 + 34, (uint64_t)v44, (uint64_t)v100);
  if (v42 >= 8)
  {
    if (v43 <= 1)
      v46 = 1;
    else
      v46 = v43;
    v47 = (llvm::BasicBlock **)(a2 + 48);
    do
    {
      v48 = (uint64_t)*(v47 - 2);
      if (!v48)
        v48 = llvm::Constant::getNullValue((llvm::Constant *)v3[12], v45);
      v49 = (uint64_t)*v47 + 40;
      v3[40] = *v47;
      v3[41] = v49;
      v50 = v3[200];
      if (!v50)
        v50 = v3[236];
      if (v50)
      {
        if ((*(_DWORD *)(v50 + 28) & 0x7Eu) - 52 >= 6)
          v51 = 0;
        else
          v51 = v50;
      }
      else
      {
        v51 = 0;
      }
      if (sub_22E4D1D58(v3[18], v51) == &off_24FA63A60)
      {
        v100[0] = v48;
        llvm::Type::getInt32Ty((llvm::Type *)v3[42], v52);
        v100[1] = llvm::ConstantInt::get();
        v100[2] = llvm::Constant::getNullValue((llvm::Constant *)v3[12], v53);
        v105 = 257;
        v54 = v3 + 34;
        v55 = (uint64_t)v44;
        v56 = 3;
      }
      else
      {
        v100[0] = v48;
        v105 = 257;
        v54 = v3 + 34;
        v55 = (uint64_t)v44;
        v56 = 1;
      }
      sub_22F25DA88(v54, v55, (uint64_t)v100, v56, (uint64_t)&v102);
      v57 = *v47;
      v47 += 3;
      llvm::CatchSwitchInst::addHandler(v44, v57);
      --v46;
    }
    while (v46);
  }
  if (!v37)
  {
    v58 = v3 + 40;
    goto LABEL_100;
  }
  v23 = (uint64_t)(v3 + 34);
  v22 = v37;
  v24 = v38;
LABEL_63:
  sub_22E3CB840(v23, v22, v24);
}

uint64_t sub_22E4D4524()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned __int8 *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  llvm::Constant *v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL8 v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t BitCast;
  const char *v34;
  __int16 v35;
  __int128 v36;
  __int128 v37;
  void *v38[2];
  _BYTE v39[72];
  _BYTE v40[144];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43[169];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v3 = v0;
  v47 = *MEMORY[0x24BDAC8D0];
  sub_22E618EBC((uint64_t)v40, *(_QWORD *)(v0 + 144), 1);
  v42 = v3;
  v4 = *(unsigned __int8 **)(v2 + 24);
  v5 = *v4;
  v6 = v3 + 1984;
  if (v5 == 95)
  {
    v7 = sub_22F25D960((uint64_t)v40, v3, *((_DWORD **)v4 + 2));
    v8 = (_QWORD *)sub_22E4899EC(v6, 3, 16);
    *v8 = off_24FA63A48;
    v8[1] = v7;
  }
  else
  {
    if (v5 == 94)
      v9 = v4;
    else
      v9 = 0;
    v10 = sub_22F253090((uint64_t *)(v3 + 1984), 1u);
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 144) + 144) + 16480);
    v34 = "__exception_code";
    v35 = 259;
    v12 = sub_22F25E4D4(v3, v11, (uint64_t)&v34, 0);
    v14 = 0;
    v15 = v12 & 0xFFFFFFFFFFFFFFF8;
    if (v12 <= 7)
      v15 = 0;
    v16 = v13 & 0xFFFFFFFFFFFFFFF8;
    if (v12 <= 7)
      v16 = 0;
    *(_QWORD *)&v36 = v15;
    *((_QWORD *)&v36 + 1) = v16;
    if (v12 >= 8)
      v14 = 1 << (v13 & 7 | (8 * (v12 & 7)));
    *(_QWORD *)&v37 = v14;
    DWORD2(v37) = 0;
    v38[0] = 0;
    v38[1] = 0;
    v17 = (_OWORD *)sub_22E4D6FB0(v3 + 2672, (unint64_t)&v36);
    v18 = (_OWORD *)(*(_QWORD *)(v3 + 2672) + 48 * *(unsigned int *)(v3 + 2680));
    v20 = v17[1];
    v19 = v17[2];
    *v18 = *v17;
    v18[1] = v20;
    v18[2] = v19;
    ++*(_DWORD *)(v3 + 2680);
    *(_QWORD *)&v36 = *(_QWORD *)(v3 + 144);
    *((_QWORD *)&v36 + 1) = v3;
    LODWORD(v37) = 0;
    BYTE4(v37) = 0;
    v38[0] = v39;
    v38[1] = (void *)0x400000000;
    v21 = *((_QWORD *)v9 + 2);
    v22 = *(_QWORD *)(*(_QWORD *)(v36 + 144) + 16480);
    LOBYTE(v37) = 1;
    v23 = (llvm::Constant *)sub_22F262C28(&v36, v21, v22);
    LOBYTE(v37) = 0;
    if (v38[0] != v39)
      free(v38[0]);
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 144) + 216) + 56) != 41
      && v23
      && llvm::Constant::isOneValue(v23))
    {
      *(_QWORD *)&v36 = "__except";
      LOWORD(v38[0]) = 259;
      operator new();
      v24 = llvm::BasicBlock::BasicBlock();
      *((_QWORD *)v10 + 4) = 0;
      *((_QWORD *)v10 + 5) = 0;
    }
    else
    {
      v25 = *((_QWORD *)v9 + 2);
      sub_22E4D56A4((uint64_t)v40, v3, 1, (_DWORD *)v25);
      *(_QWORD *)&v36 = v40;
      *((_QWORD *)&v36 + 1) = v43;
      LOBYTE(v37) = 0;
      *((_QWORD *)&v37 + 1) = *(_QWORD *)(v41 + 232);
      v27 = sub_22E50E974(&v36, v25, v26);
      v28 = sub_22E66CB04((llvm::Type ***)(v41 + 280), *(llvm::LLVMContext **)(*(_QWORD *)(v41 + 144) + 16488));
      v29 = sub_22F110930(*(_QWORD *)(*(_QWORD *)(v25 + 8) & 0xFFFFFFFFFFFFFFF0));
      LOWORD(v38[0]) = 257;
      v30 = sub_22E3BF45C(v43, v27, v28, v29, (uint64_t)&v36);
      v36 = v44;
      v37 = v45;
      *(_OWORD *)v38 = v46;
      sub_22E3BEDDC(v43, v30, &v36, 0);
      sub_22F0D60E4(v25);
      sub_22E619DE8((uint64_t)v40, v31);
      BitCast = llvm::ConstantExpr::getBitCast();
      *(_QWORD *)&v36 = "__except.ret";
      LOWORD(v38[0]) = 259;
      operator new();
      v24 = llvm::BasicBlock::BasicBlock();
      *((_QWORD *)v10 + 4) = BitCast;
      *((_DWORD *)v10 + 10) = 0;
    }
    *((_QWORD *)v10 + 6) = v24;
  }
  return sub_22E619434((uint64_t)v40);
}

uint64_t sub_22E4D48D4(uint64_t result, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  char v6;
  _QWORD *v7;
  llvm::LLVMContext *v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  _QWORD *v13;
  unsigned __int8 *v14;
  int v15;
  int j;
  uint64_t Successor;
  _QWORD *i;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (**(_QWORD ***)(*(_QWORD *)(result + 2584) + 8 * *(unsigned int *)(result + 2592) - 8) != a2)
  {
    v5 = result;
    result = sub_22E3BA850(a3, a2);
    if (v6)
    {
      if (a2[7])
      {
        v7 = a2 + 5;
        if ((_QWORD *)a2[5] != a2 + 5)
        {
          result = llvm::BasicBlock::getFirstNonPHI((llvm::BasicBlock *)a2);
          v9 = *(unsigned __int8 *)(result + 16) - 38;
          v10 = v9 > 0x38;
          v11 = (1 << v9) & 0x100060000000001;
          if (v10 || v11 == 0)
          {
            for (i = (_QWORD *)a2[6]; i != v7; i = (_QWORD *)i[1])
            {
              if (i)
                v19 = i - 3;
              else
                v19 = 0;
              v20 = *((unsigned __int8 *)v19 + 16);
              if (i && v20 == 60 || i && v20 == 61)
              {
                *((_WORD *)v19 + 9) |= 1u;
              }
              else if (v20 == 84)
              {
                v21 = *(v19 - 4);
                if (v21)
                {
                  if (!*(_BYTE *)(v21 + 16) && *(_QWORD *)(v21 + 24) == v19[9] && (*(_BYTE *)(v21 + 33) & 0x20) != 0)
                  {
                    v22 = (*(_DWORD *)(v21 + 36) - 194) > 5
                       || ((1 << (*(_BYTE *)(v21 + 36) + 62)) & 0x2D) == 0;
                    if (!v22 && i != 0)
                    {
                      llvm::Type::getInt1Ty(*(llvm::Type **)(v5 + 336), v8);
                      result = llvm::ConstantInt::get();
                      v24 = (uint64_t)&i[-4 * (*((_DWORD *)i - 1) & 0x7FFFFFF) - 3];
                      v25 = (uint64_t *)(v24 + 96);
                      if (*(_QWORD *)(v24 + 96))
                      {
                        **(_QWORD **)(v24 + 112) = *(_QWORD *)(v24 + 104);
                        v26 = *(_QWORD *)(v24 + 104);
                        if (v26)
                          *(_QWORD *)(v26 + 16) = *(_QWORD *)(v24 + 112);
                      }
                      *v25 = result;
                      if (result)
                      {
                        v28 = *(_QWORD *)(result + 8);
                        result += 8;
                        v27 = v28;
                        *(_QWORD *)(v24 + 104) = v28;
                        if (v28)
                          *(_QWORD *)(v27 + 16) = v24 + 104;
                        *(_QWORD *)(v24 + 112) = result;
                        *(_QWORD *)result = v25;
                      }
                    }
                  }
                }
              }
            }
          }
          v13 = (_QWORD *)*v7;
          if ((_QWORD *)*v7 != v7)
          {
            if (v13)
              v14 = (unsigned __int8 *)(v13 - 3);
            else
              v14 = 0;
            if (v14[16] - 29 <= 0xA)
            {
              result = llvm::Instruction::getNumSuccessors((llvm::Instruction *)v14);
              if ((_DWORD)result)
              {
                v15 = result;
                for (j = 0; j != v15; ++j)
                {
                  Successor = llvm::Instruction::getSuccessor((llvm::Instruction *)v14);
                  result = sub_22E4D48D4(v5, Successor, a3);
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

_QWORD *sub_22E4D4B00(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v3;
  int v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  llvm::Value *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  llvm::BasicBlock *v18;
  uint64_t v19;
  uint64_t FirstNonPHI;
  _QWORD *v21;
  uint64_t v22;
  uint64_t Declaration;
  uint64_t v24;
  llvm::Value *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _OWORD v30[3];
  _QWORD v31[4];
  __int16 v32;
  _QWORD v33[2];

  v33[1] = *MEMORY[0x24BDAC8D0];
  v3 = *(unsigned __int8 **)(a2 + 24);
  v4 = *v3;
  if (v4 == 95)
    return sub_22E48A190(a1, 0);
  v6 = *(_QWORD *)(a1 + 144);
  if ((*(_QWORD *)(*(_QWORD *)(v6 + 152) + 8) & 0x800000000000) != 0 && *(_QWORD *)(a1 + 320))
  {
    v8 = llvm::FunctionType::get();
    v9 = sub_22E633A04(v6, v8, "llvm.seh.try.end", 16, 0, 0, 0);
    v32 = 257;
    v11 = sub_22F24F1F4((_QWORD *)a1, v9, v10, 0, 0, (uint64_t)v31);
    *(_WORD *)(v11 + 18) = *(_WORD *)(v11 + 18) & 0xF003 | (4 * *(_WORD *)(a1 + 136));
    v3 = *(unsigned __int8 **)(a2 + 24);
    v4 = *v3;
  }
  if (v4 == 94)
    v12 = v3;
  else
    v12 = 0;
  v13 = *(_QWORD *)(a1 + 2000);
  v14 = *(_QWORD *)(v13 + 8);
  if (v14 && *(_QWORD *)(v14 + 8))
  {
    v31[0] = "__try.cont";
    v32 = 259;
    v16 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    if (*(_QWORD *)(a1 + 320))
    {
      v17 = llvm::User::operator new((llvm::User *)0x40);
      llvm::BranchInst::BranchInst();
      v32 = 257;
      sub_22E3C12C8((uint64_t *)(a1 + 272), v17, (uint64_t)v31);
    }
    sub_22E4D3A78((_QWORD *)a1, v13);
    v18 = *(llvm::BasicBlock **)(v13 + 48);
    v19 = *(_QWORD *)(a1 + 2000);
    *(_QWORD *)(a1 + 2016) = *(_QWORD *)(v19 + 16);
    *(_QWORD *)(a1 + 2000) = v19 + ((24 * (*(_DWORD *)(v19 + 24) >> 3) + 39) & 0x7FFFFFFF8);
    sub_22E5EDB60((_QWORD *)a1, v18);
    FirstNonPHI = llvm::BasicBlock::getFirstNonPHI(v18);
    v31[0] = "__except";
    v32 = 259;
    v21 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v22 = llvm::User::operator new((llvm::User *)0x40);
    MEMORY[0x23489CE7C](v22, FirstNonPHI, v21, 0);
    v32 = 257;
    sub_22F245A34((uint64_t *)(a1 + 272), v22, (uint64_t)v31);
    sub_22E5ED9B4((_QWORD *)a1, v21, 0);
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 216) + 56) != 41)
    {
      Declaration = llvm::Intrinsic::getDeclaration();
      if (Declaration)
        v24 = *(_QWORD *)(Declaration + 24);
      else
        v24 = 0;
      v33[0] = FirstNonPHI;
      v32 = 257;
      v25 = sub_22E462B78((uint64_t *)(a1 + 272), v24, Declaration, (uint64_t)v33, 1, (uint64_t)v31, 0);
      v26 = *(_QWORD *)(a1 + 2672) + 48 * *(unsigned int *)(a1 + 2680);
      v28 = *(_OWORD *)(v26 - 32);
      v27 = *(_OWORD *)(v26 - 16);
      v30[0] = *(_OWORD *)(v26 - 48);
      v30[1] = v28;
      v30[2] = v27;
      sub_22E3BEDDC(a1 + 272, v25, v30, 0);
    }
    sub_22E5E5158(a1, *((_QWORD *)v12 + 3), 0, 0);
    --*(_DWORD *)(a1 + 2680);
    if (*(_QWORD *)(a1 + 320))
    {
      v29 = llvm::User::operator new((llvm::User *)0x40);
      llvm::BranchInst::BranchInst();
      v32 = 257;
      sub_22E3C12C8((uint64_t *)(a1 + 272), v29, (uint64_t)v31);
    }
    return (_QWORD *)sub_22E5ED9B4((_QWORD *)a1, v16, 0);
  }
  else
  {
    result = (_QWORD *)sub_22F25D300(*(_QWORD *)(a1 + 2000));
    v15 = *(_QWORD *)(a1 + 2000);
    *(_QWORD *)(a1 + 2016) = *(_QWORD *)(v15 + 16);
    *(_QWORD *)(a1 + 2000) = v15 + ((24 * (*(_DWORD *)(v15 + 24) >> 3) + 39) & 0x7FFFFFFF8);
    --*(_DWORD *)(a1 + 2680);
  }
  return result;
}

void sub_22E4D4F1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  llvm::Value *v10;
  llvm::Instruction *v11;
  llvm::Value *v12;
  llvm::Value *v13;
  _DWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t Name;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t Declaration;
  uint64_t BitCast;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[3];
  __int16 v32;
  _QWORD v33[3];
  _QWORD v34[3];
  void *v35[2];
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[4];

  v38[3] = *MEMORY[0x24BDAC8D0];
  sub_22F253558((uint64_t)v35, *(llvm::Value **)(a2 + 1840), 0, 0, 0);
  v38[2] = a2;
  if ((*(_BYTE *)(a4 + 24) & 3) != 0)
  {
    v10 = (llvm::Value *)sub_22F28ABCC(a4, a2);
  }
  else
  {
    v10 = *(llvm::Value **)a4;
    if (*(_QWORD *)a4 && *((_BYTE *)v10 + 16) == 59)
    {
      v26 = *(_DWORD *)(a3 + 3000);
      v30 = *(_QWORD *)a4;
      LODWORD(v31[0]) = v26;
      sub_22F25DFC4((uint64_t)v33, a3 + 2992, &v30, v31);
      Declaration = llvm::Intrinsic::getDeclaration();
      BitCast = llvm::ConstantExpr::getBitCast();
      if (Declaration)
        v29 = *(_QWORD *)(Declaration + 24);
      else
        v29 = 0;
      v34[0] = BitCast;
      v34[1] = a5;
      v34[2] = llvm::ConstantInt::get();
      v32 = 257;
      v13 = sub_22E462B78((uint64_t *)v35, v29, Declaration, (uint64_t)v34, 3, (uint64_t)&v30, 0);
      goto LABEL_12;
    }
  }
  v11 = (llvm::Instruction *)llvm::Value::stripPointerCasts(v10);
  v12 = (llvm::Value *)llvm::Instruction::clone(v11);
  v13 = v12;
  v14 = (_DWORD *)((char *)v12 - 32 * (*((_DWORD *)v12 + 5) & 0x7FFFFFF));
  v15 = v14 + 8;
  if (*((_QWORD *)v14 + 4))
  {
    **((_QWORD **)v14 + 6) = *((_QWORD *)v14 + 5);
    v16 = *((_QWORD *)v14 + 5);
    if (v16)
      *(_QWORD *)(v16 + 16) = *((_QWORD *)v14 + 6);
  }
  *v15 = a5;
  if (a5)
  {
    v19 = *(_QWORD *)(a5 + 8);
    v18 = (_QWORD *)(a5 + 8);
    v17 = v19;
    *((_QWORD *)v14 + 5) = v19;
    if (v19)
      *(_QWORD *)(v17 + 16) = v14 + 10;
    *((_QWORD *)v14 + 6) = v18;
    *v18 = v15;
  }
  llvm::Instruction::insertBefore(v12, *(llvm::Instruction **)(a2 + 1840));
LABEL_12:
  v20 = llvm::PointerType::get();
  v32 = 257;
  v21 = sub_22E3C1740((uint64_t *)v35, 49, (uint64_t)v13, v20, (uint64_t)&v30);
  Name = llvm::Value::getName(*(llvm::Value **)a4);
  v32 = 261;
  v30 = Name;
  v31[0] = v23;
  llvm::Value::setName();
  v24 = *(_QWORD *)(a4 + 8);
  v25 = *(_QWORD *)(a4 + 16);
  *(_QWORD *)a1 = v21;
  *(_QWORD *)(a1 + 8) = v24;
  *(_QWORD *)(a1 + 16) = v25;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v38);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v37);
  if (v35[0] != &v36)
    free(v35[0]);
}

void sub_22E4D5194(uint64_t a1, _DWORD *a2)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  _QWORD *v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v3 = *(unsigned __int8 *)a2;
  if ((v3 & 0xFE) != 0x70)
  {
    if (v3 == 233)
      goto LABEL_6;
LABEL_5:
    __asm { BR              X10 }
  }
  if ((*a2 & 0xFC0000u) >= 0x840000)
    goto LABEL_5;
LABEL_6:
  sub_22F0D492C((uint64_t)a2);
  v10 = v12;
  v4 = v14;
  v11 = v13;
  v5 = v15;
  v7 = *((_QWORD *)&v12 + 1);
  v6 = (uint64_t *)v12;
  if ((_QWORD)v12 != v14 || *((_QWORD *)&v12 + 1) != v15)
  {
    do
    {
      v9 = v6;
      if ((v7 & 3) != 0)
      {
        if ((v7 & 0xFFFFFFFFFFFFFFFCLL) != 0)
          v9 = (_QWORD *)((v7 & 0xFFFFFFFFFFFFFFFCLL) + 40);
        else
          v9 = (_QWORD *)sub_22F3AC1A8(*v6);
      }
      if (*v9)
        sub_22E4D5194(a1);
      if ((v7 & 3) != 0)
      {
        if (v7 >= 4)
          sub_22F0D8720((uint64_t)&v10);
        else
          sub_22F3F2FE0((uint64_t)&v10, 1);
      }
      else
      {
        *(_QWORD *)&v10 = v6 + 1;
      }
      v7 = *((_QWORD *)&v10 + 1);
      v6 = (uint64_t *)v10;
    }
    while (v10 != __PAIR128__(v5, v4));
  }
}

void sub_22E4D52BC()
{
  _QWORD *v0;
  uint64_t v1;

  sub_22E4D6180(v0, v1);
  JUMPOUT(0x22E4D51FCLL);
}

void sub_22E4D52CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if ((*(_BYTE *)(v14 + 2) & 0x40) != 0)
    sub_22F25DB24(v13 + 16, (uint64_t *)(v13 + 8));
  if ((*(_DWORD *)(*(_QWORD *)(v14 + 16) + 28) & 0x7Fu) - 60 >= 7)
    v15 = 0;
  else
    v15 = *(_QWORD *)(v14 + 16);
  a13 = v15;
  if (v15 && ((sub_22E3CEC2C(v15) & 1) != 0 || (*(_DWORD *)(v15 + 28) & 0x7F) == 0x40) && sub_22E3CB5E0(v15))
    sub_22F25DB24(v13 + 16, &a13);
  JUMPOUT(0x22E4D51FCLL);
}

uint64_t sub_22E4D534C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  llvm::LLVMContext *v8;
  llvm::GetElementPtrInst *v9;
  uint64_t v10;
  uint64_t v11;
  llvm::Type *v12;
  __int16 v13;
  uint64_t v14;
  __int128 v15;
  _OWORD *v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  llvm::Type *v20;
  unint64_t v21;
  llvm::LLVMContext *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  llvm::GetElementPtrInst *v26;
  __int16 v27;
  uint64_t v28;
  llvm::Type *v29;
  unsigned __int8 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _OWORD v43[3];
  _OWORD v44[3];
  const char *v45;
  __int16 v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 144);
  if (*(_DWORD *)(*(_QWORD *)(v5 + 216) + 56) == 41)
  {
    v8 = *(llvm::LLVMContext **)(a1 + 8);
    LOWORD(v51) = 257;
    v9 = sub_22E3E51B0((uint64_t *)(a1 + 272), v8, a4, 4294967276, (uint64_t)&v47);
    *(_QWORD *)(a1 + 2736) = v9;
    v10 = llvm::PointerType::get();
    LOWORD(v51) = 257;
    v11 = sub_22E3C1740((uint64_t *)(a1 + 272), 49, (uint64_t)v9, v10, (uint64_t)&v47);
    *(_QWORD *)(a1 + 2736) = v11;
    v12 = *(llvm::Type **)(a1 + 96);
    v13 = (63 - __clz(*(unsigned __int8 *)(a1 + 130))) | 0x100;
    LOWORD(v51) = 257;
    *(_QWORD *)(a1 + 2736) = sub_22E3C3200((uint64_t *)(a1 + 272), v12, v11, v13, 0, (uint64_t)&v47);
    v14 = *(_QWORD *)(a2 + 2672) + 48 * *(unsigned int *)(a2 + 2680);
    v15 = *(_OWORD *)(v14 - 32);
    v44[0] = *(_OWORD *)(v14 - 48);
    v44[1] = v15;
    v44[2] = *(_OWORD *)(v14 - 16);
    sub_22E4D4F1C((uint64_t)&v47, a1, a2, (uint64_t)v44, a3);
    v16 = (_OWORD *)sub_22E4D6FB0(a1 + 2672, (unint64_t)&v47);
    v17 = (_OWORD *)(*(_QWORD *)(a1 + 2672) + 48 * *(unsigned int *)(a1 + 2680));
  }
  else
  {
    v36 = *(_QWORD *)(a1 + 1624);
    if ((*(_WORD *)(v36 + 18) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments(*(llvm::Function **)(a1 + 1624));
      v5 = *(_QWORD *)(a1 + 144);
    }
    *(_QWORD *)(a1 + 2736) = *(_QWORD *)(v36 + 88);
    v37 = *(_QWORD *)(*(_QWORD *)(v5 + 144) + 16480);
    v45 = "__exception_code";
    v46 = 259;
    v38 = sub_22F25E4D4(a1, v37, (uint64_t)&v45, 0);
    v40 = 0;
    v41 = v38 & 0xFFFFFFFFFFFFFFF8;
    if (v38 <= 7)
      v41 = 0;
    v42 = v39 & 0xFFFFFFFFFFFFFFF8;
    if (v38 <= 7)
      v42 = 0;
    v47 = v41;
    v48 = v42;
    if (v38 >= 8)
      v40 = 1 << (v39 & 7 | (8 * (v38 & 7)));
    v49 = v40;
    v50 = 0;
    v51 = 0;
    v52 = 0;
    v16 = (_OWORD *)sub_22E4D6FB0(a1 + 2672, (unint64_t)&v47);
    v17 = (_OWORD *)(*(_QWORD *)(a1 + 2672) + 48 * *(unsigned int *)(a1 + 2680));
  }
  v19 = v16[1];
  v18 = v16[2];
  *v17 = *v16;
  v17[1] = v19;
  v17[2] = v18;
  ++*(_DWORD *)(a1 + 2680);
  v20 = (llvm::Type *)llvm::PointerType::get();
  v21 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 96);
  v47 = (unint64_t)v20;
  v48 = v21;
  v22 = (llvm::LLVMContext *)llvm::StructType::get();
  v23 = *(_QWORD *)(a1 + 2736);
  v24 = llvm::PointerType::get();
  LOWORD(v51) = 257;
  v25 = (uint64_t *)sub_22E3C1740((uint64_t *)(a1 + 272), 49, v23, v24, (uint64_t)&v47);
  LOWORD(v51) = 257;
  v26 = sub_22E3C4170((uint64_t *)(a1 + 272), v22, v25, 0, 0, (uint64_t)&v47);
  v27 = (63 - __clz(*(unsigned __int8 *)(a1 + 130))) | 0x100;
  LOWORD(v51) = 257;
  v28 = sub_22E3C3200((uint64_t *)(a1 + 272), v20, (uint64_t)v26, v27, 0, (uint64_t)&v47);
  v29 = *(llvm::Type **)(a1 + 24);
  v30 = 63 - __clz(*(unsigned __int8 *)(a1 + 128));
  LOWORD(v51) = 257;
  v31 = sub_22E3C3200((uint64_t *)(a1 + 272), v29, v28, v30 | 0x100u, 0, (uint64_t)&v47);
  v32 = *(_QWORD *)(a1 + 2672) + 48 * *(unsigned int *)(a1 + 2680);
  v34 = *(_OWORD *)(v32 - 32);
  v33 = *(_OWORD *)(v32 - 16);
  v43[0] = *(_OWORD *)(v32 - 48);
  v43[1] = v34;
  v43[2] = v33;
  return sub_22E3BEDDC(a1 + 272, v31, v43, 0);
}

void sub_22E4D56A4(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  llvm::StringMapImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  llvm::Value *v25;
  unsigned int v26;
  int8x16_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t Declaration;
  llvm::LLVMContext *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t BitCast;
  uint64_t v39;
  uint64_t *v40;
  uint64_t i;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  unint64_t v45;
  _OWORD *v46;
  _OWORD *v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  llvm::Value *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE v69[64];
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  _OWORD v75[3];
  _OWORD v76[3];
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  _QWORD v81[3];
  int v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  _BYTE v87[128];
  void *v88;
  __int128 v89;
  _BYTE v90[128];
  _OWORD v91[8];
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  void *v96[2];
  uint64_t v97;
  llvm::Type *v98;
  uint64_t v99;
  _QWORD v100[3];
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int64x2_t v104;
  int64x2_t v105;
  uint64_t *v106;
  uint64_t v107;
  _BYTE v108[32];
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;

  v112 = *MEMORY[0x24BDAC8D0];
  sub_22F0D5A50((uint64_t)a4);
  v9 = v8;
  v88 = v90;
  v89 = xmmword_22F44E310;
  sub_22F242C48((uint64_t)&v101, (uint64_t)&v88);
  v10 = 176;
  if (a3)
    v10 = 168;
  (*(void (**)(void))(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 224) + 16) + v10))();
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v101);
  v85 = v87;
  v86 = 0x1000000000;
  v11 = *(_QWORD *)(a1 + 144);
  if (*(_DWORD *)(*(_QWORD *)(v11 + 216) + 56) != 41 || (a3 & 1) == 0)
  {
    v12 = *(_QWORD *)(v11 + 144);
    v13 = *(llvm::StringMapImpl **)(v12 + 15192);
    if (a3)
    {
      v14 = sub_22E3CB704(v13, "exception_pointers", 0x12uLL);
      v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144) + 16816);
    }
    else
    {
      v14 = sub_22E3CB704(v13, "abnormal_termination", 0x14uLL);
      v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144) + 16512);
    }
    *((_QWORD *)v85 + v86) = sub_22EFC4364(v12, 0, v9, v14, v15, 5);
    LODWORD(v86) = v86 + 1;
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
    v17 = sub_22E3CB704(*(llvm::StringMapImpl **)(v16 + 15192), "frame_pointer", 0xDuLL);
    v18 = sub_22EFC4364(v16, 0, v9, v17, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144) + 16816), 5);
    v19 = v86;
    if (v86 >= HIDWORD(v86))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v19 = v86;
    }
    *((_QWORD *)v85 + v19) = v18;
    LODWORD(v86) = v86 + 1;
    v11 = *(_QWORD *)(a1 + 144);
  }
  v20 = 16392;
  if (a3)
    v20 = 16488;
  v21 = *(_QWORD *)(*(_QWORD *)(v11 + 144) + v20);
  v22 = sub_22F24E348(v11 + 280, v21, (uint64_t *)&v85);
  v23 = sub_22E46F2EC(*(_QWORD *)(a1 + 144) + 280, v22);
  v104.i16[4] = 261;
  v101 = (uint64_t)v88;
  v102 = v89;
  v24 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 200);
  v25 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x78);
  MEMORY[0x23489F6FC](v25, v23, 7, 0xFFFFFFFFLL, &v101, v24);
  *(_BYTE *)(a1 + 1896) = 1;
  sub_22F0D5A50((uint64_t)a4);
  sub_22E61A8FC(a1, 0, 0, v21, v25, v22, (uint64_t *)&v85, v26, v27, v26);
  *(_QWORD *)(a1 + 1888) = *(_QWORD *)(a2 + 1888);
  sub_22E62BF18(*(uint64_t **)(a1 + 144), 0, 0, *(llvm::Value **)(a1 + 1624), v22);
  v28 = *(_QWORD *)(a2 + 4192);
  v101 = a2;
  v102 = v28;
  v103 = 1;
  v104 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v105 = v104;
  v106 = (uint64_t *)v108;
  v107 = 0x400000000;
  *(_QWORD *)&v110 = 0;
  v109 = 0uLL;
  DWORD2(v110) = 0;
  v111 = 0uLL;
  sub_22E4D5194((uint64_t)&v101, a4);
  v29 = *(_QWORD *)(a1 + 144);
  if (!(_DWORD)v107 && !(_QWORD)v109 && *(_DWORD *)(*(_QWORD *)(v29 + 216) + 56) != 41)
  {
    if (a3)
      sub_22E4D534C(a1, a2, 0, 0);
    goto LABEL_57;
  }
  sub_22F253558((uint64_t)v96, *(llvm::Value **)(a1 + 1840), 0, 0, 0);
  v100[2] = v29;
  if (a3 && *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 216) + 56) == 41)
  {
    *(_QWORD *)&v91[0] = *(_QWORD *)(a1 + 112);
    Declaration = llvm::Intrinsic::getDeclaration();
    v32 = Declaration;
    if (Declaration)
      v33 = *(_QWORD *)(Declaration + 24);
    else
      v33 = 0;
    llvm::Type::getInt32Ty(v98, v31);
    *(_QWORD *)&v93 = llvm::ConstantInt::get();
    *(_WORD *)&v69[32] = 257;
    v35 = (uint64_t *)sub_22E462B78((uint64_t *)v96, v33, v32, (uint64_t)&v93, 1, (uint64_t)v69, 0);
  }
  else
  {
    v34 = *(_QWORD *)(a1 + 1624);
    if ((*(_WORD *)(v34 + 18) & 1) != 0)
      llvm::Function::BuildLazyArguments(*(llvm::Function **)(a1 + 1624));
    v35 = (uint64_t *)(*(_QWORD *)(v34 + 88) + 40);
    v36 = (uint64_t)v35;
    if (!a3)
      goto LABEL_32;
  }
  v37 = llvm::Intrinsic::getDeclaration();
  BitCast = llvm::ConstantExpr::getBitCast();
  if (v37)
    v39 = *(_QWORD *)(v37 + 24);
  else
    v39 = 0;
  *(_QWORD *)&v91[0] = BitCast;
  *((_QWORD *)&v91[0] + 1) = v35;
  *(_WORD *)&v69[32] = 257;
  v36 = (uint64_t)sub_22E462B78((uint64_t *)v96, v39, v37, (uint64_t)v91, 2, (uint64_t)v69, 0);
  if (*(_QWORD *)(a2 + 160))
  {
    v50 = *(_QWORD *)(a2 + 2904);
    v51 = *(unsigned int *)(a2 + 2920);
    v52 = (_QWORD *)(v50 + 56 * v51);
    if (*(_DWORD *)(a2 + 2912))
    {
      if ((_DWORD)v51)
      {
        v54 = 56 * v51;
        v53 = *(_QWORD **)(a2 + 2904);
        while ((*v53 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v53 += 7;
          v54 -= 56;
          if (!v54)
            goto LABEL_72;
        }
      }
      else
      {
        v53 = *(_QWORD **)(a2 + 2904);
      }
    }
    else
    {
LABEL_72:
      v53 = (_QWORD *)(v50 + 56 * v51);
    }
    v55 = (_QWORD *)(v50 + 56 * v51);
    while (1)
    {
LABEL_74:
      if (v53 == v55)
      {
        v57 = v35;
        v58 = 0;
        goto LABEL_83;
      }
      if ((*(_DWORD *)(*v53 + 28) & 0x7F) == 0x3E
        && *(_QWORD *)(*v53 + 48) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144) + 16816))
      {
        break;
      }
      v56 = v53 + 7;
      v53 = v52;
      if (v56 != v52)
      {
        v53 = v56;
        while ((*v53 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v53 += 7;
          if (v53 == v52)
          {
            v53 = v52;
            goto LABEL_74;
          }
        }
      }
    }
    v57 = v35;
    v58 = v53[1];
LABEL_83:
    v59 = *(_DWORD *)(a2 + 3000);
    *(_QWORD *)v69 = v58;
    *(_DWORD *)&v69[8] = v59;
    sub_22F25DFC4((uint64_t)v91, a2 + 2992, (uint64_t *)v69, &v69[8]);
    v60 = llvm::Intrinsic::getDeclaration();
    v61 = llvm::ConstantExpr::getBitCast();
    if (v60)
      v62 = *(_QWORD *)(v60 + 24);
    else
      v62 = 0;
    *(_QWORD *)&v93 = v61;
    *((_QWORD *)&v93 + 1) = v36;
    *(_QWORD *)&v94 = llvm::ConstantInt::get();
    *(_WORD *)&v69[32] = 257;
    v63 = sub_22E462B78((uint64_t *)v96, v62, v60, (uint64_t)&v93, 3, (uint64_t)v69, 0);
    v64 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 104);
    *(_WORD *)&v69[32] = 257;
    v65 = sub_22E3C1740((uint64_t *)v96, 49, (uint64_t)v63, v64, (uint64_t)v69);
    v66 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 96);
    v67 = *(unsigned __int8 *)(a1 + 130);
    v81[0] = v65;
    v81[1] = v66;
    v81[2] = v67;
    v82 = 0;
    v83 = 0;
    v84 = 0;
    *(_WORD *)&v69[32] = 257;
    v36 = sub_22E3C2A7C((uint64_t *)v96, (uint64_t)v81, (uint64_t)v69);
    v35 = v57;
  }
LABEL_32:
  if ((_DWORD)v107)
  {
    v40 = v106;
    for (i = 8 * v107; i; i -= 8)
    {
      v42 = *v40;
      v80 = v42;
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v42 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 8) != 0)
      {
        sub_22E6285D0(*(_QWORD *)(a1 + 144), v42, "VLA captured by SEH");
      }
      else
      {
        *(_QWORD *)&v93 = v42;
        *(_QWORD *)v69 = 0;
        if (sub_22F246C54((uint64_t *)(a2 + 1928), &v93, v69)
          && *(_QWORD *)v69 != *(_QWORD *)(a2 + 1928) + 16 * *(unsigned int *)(a2 + 1944))
        {
          v68 = *(_QWORD *)(*(_QWORD *)v69 + 8);
          sub_22F25E108((uint64_t *)(a1 + 1928), &v80)[1] = v68;
        }
        else
        {
          *(_QWORD *)&v93 = v80;
          *(_QWORD *)v69 = 0;
          if (!sub_22E3CED3C((uint64_t *)(a2 + 2904), &v93, v69))
            goto LABEL_36;
          if (*(_QWORD *)v69 == *(_QWORD *)(a2 + 2904) + 56 * *(unsigned int *)(a2 + 2920))
            goto LABEL_36;
          v43 = *(_OWORD *)(*(_QWORD *)v69 + 24);
          v76[0] = *(_OWORD *)(*(_QWORD *)v69 + 8);
          v76[1] = v43;
          v76[2] = *(_OWORD *)(*(_QWORD *)v69 + 40);
          sub_22E4D4F1C((uint64_t)&v77, a1, a2, (uint64_t)v76, v36);
          *(_OWORD *)&v69[8] = v77;
          *(_OWORD *)&v69[24] = v78;
          *(_OWORD *)&v69[40] = v79;
          *(_QWORD *)v69 = v80;
          sub_22E3CEC9C(a1 + 2904, v69, (__int128 *)&v69[8], (uint64_t)&v93);
          if ((*(_DWORD *)(v80 + 28) & 0x7F) != 0x3E)
            goto LABEL_36;
          *(_QWORD *)(a1 + 4216) = *(_QWORD *)(a2 + 4216);
          *(_QWORD *)(a1 + 4224) = *(_QWORD *)(a2 + 4224);
          v75[0] = v77;
          v75[1] = v78;
          v75[2] = v79;
          v44 = sub_22E3C43AC((uint64_t *)v96, (uint64_t)v75, "this");
          *(_QWORD *)(a1 + 4200) = v44;
          v45 = *(_QWORD *)(a2 + 1952);
          if (v45)
          {
            *(_QWORD *)(a1 + 1952) = v45;
            sub_22F2605EC(a1, v45, (uint64_t)v69);
            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1952) + 48) & 0xFFFFFFFFFFFFFFF0)
                                                  + 8) & 0xFFFFFFFFFFFFFFF0)
                          + 16) == 39)
            {
              v91[5] = v71;
              v91[6] = v72;
              v91[7] = v73;
              v92 = v74;
              v91[2] = *(_OWORD *)&v69[32];
              v91[3] = *(_OWORD *)&v69[48];
              v91[4] = v70;
              v91[0] = *(_OWORD *)v69;
              v91[1] = *(_OWORD *)&v69[16];
              sub_22E4D7B28((_QWORD *)a1, (uint64_t)v91, 0, (uint64_t)&v93);
              *(_QWORD *)(a1 + 4208) = v93;
              goto LABEL_36;
            }
            v93 = *(_OWORD *)&v69[8];
            v94 = *(_OWORD *)&v69[24];
            v95 = *(_OWORD *)&v69[40];
            if ((v69[32] & 3) != 0)
              v44 = sub_22F28ABCC(&v93, a1);
            else
              v44 = v93;
          }
          *(_QWORD *)(a1 + 4208) = v44;
        }
      }
LABEL_36:
      ++v40;
    }
  }
  if ((_QWORD)v109)
  {
    v93 = v109;
    v94 = v110;
    v95 = v111;
    sub_22E4D4F1C((uint64_t)v69, a1, a2, (uint64_t)&v93, v36);
    v46 = (_OWORD *)sub_22E4D6FB0(a1 + 2672, (unint64_t)v69);
    v47 = (_OWORD *)(*(_QWORD *)(a1 + 2672) + 48 * *(unsigned int *)(a1 + 2680));
    v49 = v46[1];
    v48 = v46[2];
    *v47 = *v46;
    v47[1] = v49;
    v47[2] = v48;
    ++*(_DWORD *)(a1 + 2680);
  }
  if (a3)
    sub_22E4D534C(a1, a2, v36, v35);
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v100);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v99);
  if (v96[0] != &v97)
    free(v96[0]);
LABEL_57:
  if (v106 != (uint64_t *)v108)
    free(v106);
  if ((v103 & 1) == 0)
    llvm::deallocate_buffer((llvm *)v104.i64[0], (void *)(8 * v104.u32[2]));
  if (v85 != v87)
    free(v85);
  if (v88 != v90)
    free(v88);
}

void **sub_22E4D6138(void **a1)
{
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)(a1 + 16));
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)(a1 + 15));
  if (*a1 != a1 + 2)
    free(*a1);
  return a1;
}

__n128 sub_22E4D6180(_QWORD *a1, uint64_t a2)
{
  __n128 result;
  uint64_t v4;
  __int128 v5;

  if (*(_DWORD *)(*(_QWORD *)(*a1 + 152) + 56) == 41 && sub_22EFFA8F0(a2) - 727 <= 1 && !a1[13])
  {
    v4 = *(_QWORD *)(*a1 + 2672) + 48 * *(unsigned int *)(*a1 + 2680);
    v5 = *(_OWORD *)(v4 - 32);
    result = *(__n128 *)(v4 - 16);
    *(_OWORD *)(a1 + 13) = *(_OWORD *)(v4 - 48);
    *(_OWORD *)(a1 + 15) = v5;
    *(__n128 *)(a1 + 17) = result;
  }
  return result;
}

uint64_t sub_22E4D61F4(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  llvm *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD v14[5];

  v14[4] = *MEMORY[0x24BDAC8D0];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v8 = v14;
    for (i = 8; i != 40; i += 8)
    {
      v10 = *(_QWORD *)(a1 + i);
      if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
        *v8++ = v10;
    }
    if (a2 > 4)
    {
      *(_DWORD *)a1 &= ~1u;
      v11 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](8 * a2, 8);
      *(_QWORD *)(a1 + 16) = v11;
    }
    return sub_22F25DDD0(a1, v14, v8);
  }
  else
  {
    v6 = *(llvm **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](8 * a2, 8);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_22F25DDD0(a1, v6, (_QWORD *)v6 + v7);
    return llvm::deallocate_buffer(v6, (void *)(8 * v7));
  }
}

llvm::Value *sub_22E4D6360(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  llvm::Value *v7;
  _QWORD v9[4];
  __int16 v10;

  v4 = *(_QWORD *)(a2 + 144);
  v9[0] = *(_QWORD *)(v4 + 96);
  v5 = llvm::FunctionType::get();
  v6 = sub_22E633A04(v4, v5, "__cxa_free_exception", 0x14uLL, 0, 0, 0);
  v10 = 257;
  return sub_22F24EEDC(a2, v6, v7, a1 + 8, 1, (uint64_t)v9);
}

llvm::Value *sub_22E4D6400(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v5[2];

  v3 = sub_22F24BFC0(a2, *(_QWORD *)(a1 + 8));
  v5[0] = off_24FA639A8;
  v5[1] = v3;
  return sub_22E4D6360((uint64_t)v5, a2);
}

uint64_t sub_22E4D6448(uint64_t result, uint64_t a2, int a3)
{
  unsigned int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_DWORD *)(result + 8);
  if (v3 >= *(_DWORD *)(result + 12))
  {
    v7 = result;
    v5 = a3;
    v6 = a2;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    a3 = v5;
    a2 = v6;
    result = v7;
    v3 = *(_DWORD *)(v7 + 8);
  }
  v4 = *(_QWORD *)result + 12 * v3;
  *(_QWORD *)v4 = a2;
  *(_DWORD *)(v4 + 8) = a3;
  ++*(_DWORD *)(result + 8);
  return result;
}

uint64_t sub_22E4D64BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  llvm::Type **v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  _QWORD *v18;
  llvm::LLVMContext *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  llvm::Value *v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  uint64_t v27;
  llvm::Value *v28;
  uint64_t *v29;
  uint64_t v30;
  llvm::Type *v31;
  __int16 v32;
  uint64_t v33;
  llvm::LLVMContext *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD v40[3];
  int v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  __int16 v45;
  uint64_t v46;
  _QWORD v47[3];
  int v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[4];
  __int16 v52;

  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 16);
    v6 = *(_QWORD *)(a1 + 24);
    v7 = sub_22E4899EC(a2 + 1984, 3u, 32);
    *(_QWORD *)v7 = off_24FA63A20;
    *((_QWORD *)v7 + 1) = v5;
    *((_QWORD *)v7 + 2) = v6;
    *((_QWORD *)v7 + 3) = v4;
  }
  v8 = sub_22E48B6FC(a2, (llvm::LLVMContext *)a2);
  v10 = v8 & 0xFFFFFFFFFFFFFFF8;
  if (v8 <= 7)
    v10 = 0;
  v11 = v9 & 0xFFFFFFFFFFFFFFF8;
  if (v8 <= 7)
    v11 = 0;
  v47[0] = v10;
  v47[1] = v11;
  v12 = 1 << (v9 & 7 | (8 * (v8 & 7)));
  if (v8 < 8)
    v12 = 0;
  v47[2] = v12;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v13 = (llvm::Type **)sub_22E3C43AC((uint64_t *)(a2 + 272), (uint64_t)v47, "cleanup.dest.saved");
  sub_22E5E5158(a2, *(unsigned __int8 **)(a1 + 8), 0, 0);
  if (*(_QWORD *)(a2 + 320))
  {
    v51[0] = "finally.rethrow";
    v52 = 259;
    v17 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v51[0] = "finally.cont";
    v52 = 259;
    v18 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v19 = *(llvm::LLVMContext **)(a1 + 16);
    v51[0] = "finally.shouldthrow";
    v52 = 259;
    v20 = sub_22F253798(a2 + 272, v19, (uint64_t)v51);
    v21 = llvm::User::operator new((llvm::User *)0x40);
    MEMORY[0x23489C09C](v21, v17, v18, v20, 0);
    v52 = 257;
    sub_22E3C12C8((uint64_t *)(a2 + 272), v21, (uint64_t)v51);
    sub_22E5ED9B4((_QWORD *)a2, v17, 0);
    v23 = *(llvm::Value **)(a1 + 48);
    v22 = *(_QWORD *)(a1 + 56);
    v24 = *(_QWORD *)(a1 + 40);
    if (v22)
    {
      v31 = *(llvm::Type **)(a2 + 96);
      v32 = (63 - __clz(*(unsigned __int8 *)(a2 + 130))) | 0x100;
      v52 = 257;
      v46 = sub_22E3C3200((uint64_t *)(a2 + 272), v31, v22, v32, 0, (uint64_t)v51);
      v45 = 257;
      v29 = &v46;
      v25 = &v44;
      v26 = (_QWORD *)a2;
      v27 = v24;
      v28 = v23;
      v30 = 1;
    }
    else
    {
      v52 = 257;
      v25 = (char *)v51;
      v26 = (_QWORD *)a2;
      v27 = v24;
      v28 = v23;
      v29 = 0;
      v30 = 0;
    }
    v33 = sub_22F24F1F4(v26, v27, v28, (uint64_t)v29, v30, (uint64_t)v25);
    *(_WORD *)(v33 + 18) = *(_WORD *)(v33 + 18) & 0xF003 | (4 * *(_WORD *)(a2 + 136));
    sub_22F24866C(a2 + 272);
    sub_22E5ED9B4((_QWORD *)a2, v18, 0);
    v35 = sub_22E48B6FC(a2, v34);
    v37 = 0;
    v38 = v35 & 0xFFFFFFFFFFFFFFF8;
    if (v35 <= 7)
      v38 = 0;
    v39 = v36 & 0xFFFFFFFFFFFFFFF8;
    if (v35 <= 7)
      v39 = 0;
    v40[0] = v38;
    v40[1] = v39;
    if (v35 >= 8)
      v37 = 1 << (v36 & 7 | (8 * (v35 & 7)));
    v40[2] = v37;
    v41 = 0;
    v42 = 0;
    v43 = 0;
    sub_22E3BEDDC(a2 + 272, v13, (uint64_t)v40);
  }
  if (*(_QWORD *)(a1 + 32))
  {
    v14 = *(_QWORD *)(a2 + 320);
    v15 = *(_QWORD *)(a2 + 328);
    *(_QWORD *)(a2 + 320) = 0;
    *(_QWORD *)(a2 + 328) = 0;
    sub_22E48A190(a2, 0);
    if (v14)
    {
      sub_22E3CB840(a2 + 272, v14, v15);
    }
    else
    {
      *(_QWORD *)(a2 + 320) = 0;
      *(_QWORD *)(a2 + 328) = 0;
    }
  }
  return sub_22E47E098(a2);
}

uint64_t sub_22E4D6800(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  llvm::LLVMContext *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::Value *v10;
  uint64_t v11;
  _QWORD v13[4];
  __int16 v14;

  v4 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v13[0] = "finally.cleanup.cont";
  v14 = 259;
  v5 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v6 = (llvm::LLVMContext *)a1[1];
  v13[0] = "finally.endcatch";
  v14 = 259;
  v7 = sub_22F253798(a2 + 272, v6, (uint64_t)v13);
  v8 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x23489C09C](v8, v4, v5, v7, 0);
  v14 = 257;
  sub_22E3C12C8((uint64_t *)(a2 + 272), v8, (uint64_t)v13);
  sub_22E5ED9B4((_QWORD *)a2, v4, 0);
  v9 = a1[2];
  v10 = (llvm::Value *)a1[3];
  v14 = 257;
  v11 = sub_22F24F1F4((_QWORD *)a2, v9, v10, 0, 0, (uint64_t)v13);
  *(_WORD *)(v11 + 18) = *(_WORD *)(v11 + 18) & 0xF003 | (4 * *(_WORD *)(a2 + 136));
  return sub_22E5ED9B4((_QWORD *)a2, v5, 0);
}

uint64_t sub_22E4D6980(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 16 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v10 = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v8 = v6;
        v13 = v5 + v9++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 16 * (v13 & v4));
        v7 = *v6;
        v10 = 1;
        if (*v6 == a3)
          goto LABEL_7;
      }
      v10 = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    v10 = 0;
  }
LABEL_7:
  *a4 = v6;
  return v10;
}

uint64_t *sub_22E4D6A14(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t *v16;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 < 3 * v6)
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
    {
      sub_22E4D6B48(a1, v6);
      v16 = 0;
      sub_22E4D6980(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v16);
      a3 = v16;
    }
LABEL_4:
    v7 = *a3;
    goto LABEL_5;
  }
  sub_22E4D6B48(a1, 2 * v6);
  v7 = *a2;
  v9 = *(_DWORD *)(a1 + 16) - 1;
  v10 = ((*a2 >> 4) ^ (*a2 >> 9)) & v9;
  a3 = (uint64_t *)(*(_QWORD *)a1 + 16 * v10);
  v11 = *a3;
  if (*a2 != *a3)
  {
    v12 = 0;
    v13 = 1;
    while (v11 != -4096)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v11 == -8192;
      if (v14)
        v12 = a3;
      v15 = v10 + v13++;
      v10 = v15 & v9;
      a3 = (uint64_t *)(*(_QWORD *)a1 + 16 * v10);
      v11 = *a3;
      if (v7 == *a3)
        goto LABEL_5;
    }
    if (v12)
      a3 = v12;
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_22E4D6B48(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  llvm *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = v4;
      do
      {
        v13 = *(_QWORD *)v12;
        if ((*(_QWORD *)v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v14 = *(_DWORD *)(a1 + 16) - 1;
          v15 = v14 & ((v13 >> 4) ^ (v13 >> 9));
          v16 = *(_QWORD *)a1 + 16 * v15;
          v17 = *(_QWORD *)v16;
          if (v13 != *(_QWORD *)v16)
          {
            v18 = 0;
            v19 = 1;
            while (v17 != -4096)
            {
              if (v18)
                v20 = 0;
              else
                v20 = v17 == -8192;
              if (v20)
                v18 = v16;
              v21 = v15 + v19++;
              v15 = v21 & v14;
              v16 = *(_QWORD *)a1 + 16 * (v21 & v14);
              v17 = *(_QWORD *)v16;
              if (v13 == *(_QWORD *)v16)
                goto LABEL_23;
            }
            if (v18)
              v16 = v18;
          }
LABEL_23:
          *(_QWORD *)v16 = v13;
          *(_DWORD *)(v16 + 8) = *((_DWORD *)v12 + 2);
          ++*(_DWORD *)(a1 + 8);
        }
        v12 = (llvm *)((char *)v12 + 16);
      }
      while (v12 != (llvm *)((char *)v4 + 16 * v3));
    }
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v22 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v22)
    {
      v23 = 16 * v22;
      do
      {
        *result = -4096;
        result += 2;
        v23 -= 16;
      }
      while (v23);
    }
  }
  return result;
}

_OWORD *sub_22E4D6CC4(void **a1, _OWORD *a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  _OWORD *v12;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = (v2 - (_BYTE *)*a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    abort();
  v8 = (_BYTE *)a1[2] - v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  if (v9)
  {
    if (v9 >> 60)
      sub_22E3B3F8C();
    v10 = (char *)operator new(16 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[16 * v4];
  *(_OWORD *)v11 = *a2;
  v12 = v11 + 16;
  if (v2 != v3)
  {
    do
    {
      *((_OWORD *)v11 - 1) = *((_OWORD *)v2 - 1);
      v11 -= 16;
      v2 -= 16;
    }
    while (v2 != v3);
    v2 = (char *)*a1;
  }
  *a1 = v11;
  a1[1] = v12;
  a1[2] = &v10[16 * v9];
  if (v2)
    operator delete(v2);
  return v12;
}

uint64_t sub_22E4D6DA8(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 16 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v10 = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v8 = v6;
        v13 = v5 + v9++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 16 * (v13 & v4));
        v7 = *v6;
        v10 = 1;
        if (*v6 == a3)
          goto LABEL_9;
      }
      v10 = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    v10 = 0;
  }
LABEL_9:
  *a4 = v6;
  return v10;
}

_QWORD *sub_22E4D6E3C(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
LABEL_3:
    sub_22E4D6EF0(a1, v6);
    v8 = 0;
    sub_22E4D6DA8(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    a3 = v8;
    goto LABEL_4;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
    goto LABEL_3;
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_22E4D6EF0(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F25E05C(a1, (uint64_t)v4, (uint64_t)v4 + 16 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

unint64_t sub_22E4D6FB0(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  unint64_t v5;
  unint64_t v7;

  v2 = a2;
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = *(_QWORD *)a1 + 48 * v3;
    if (*(_QWORD *)a1 <= a2 && v5 > a2)
    {
      v7 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      return *(_QWORD *)a1 + v7;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
  }
  return v2;
}

void sub_22E4D7028(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t *v6;
  llvm::LLVMContext *v7;
  uint64_t Declaration;
  uint64_t v9;
  llvm::Value *v10;
  uint64_t v11;
  uint64_t v12;
  llvm::LLVMContext *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  llvm::Type *v20;
  uint64_t NullValue;
  unint64_t v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  unint64_t v31;
  char *v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v49[56];
  _QWORD v50[3];
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  char v60;
  __int16 v61;
  llvm::LLVMContext *v62;
  _QWORD v63[3];
  int v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  void *v68;
  uint64_t v69;
  _BYTE v70[1216];
  void *v71;
  uint64_t v72;
  _BYTE v73[192];
  void *v74;
  uint64_t v75;
  _BYTE v76[16];
  void *v77;
  uint64_t v78;
  _QWORD v79[7];

  v79[5] = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a2 + 144);
  v6 = *(uint64_t **)(v5 + 144);
  v68 = v70;
  v69 = 0x800000000;
  v71 = v73;
  v72 = 0x100000000;
  v74 = v76;
  v75 = 0x100000000;
  v77 = v79;
  v78 = 0x200000000;
  v79[4] = 0;
  v7 = (llvm::LLVMContext *)v6[2064];
  v47 = v6[2102];
  if (*(_BYTE *)(a2 + 1896))
  {
    v11 = *(_QWORD *)(a2 + 1624);
    if ((*(_WORD *)(v11 + 18) & 1) != 0)
      llvm::Function::BuildLazyArguments(*(llvm::Function **)(a2 + 1624));
    v10 = (llvm::Value *)(*(_QWORD *)(v11 + 88) + 40);
  }
  else
  {
    Declaration = llvm::Intrinsic::getDeclaration();
    v9 = 0;
    if (Declaration)
      v9 = *(_QWORD *)(Declaration + 24);
    LOWORD(v58) = 257;
    v10 = sub_22E462B78((uint64_t *)(a2 + 272), v9, Declaration, 0, 0, (uint64_t)&v54, 0);
  }
  sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a2 + 144) + 280), v7);
  v12 = llvm::ConstantInt::get();
  if ((a3 & 9) == 8)
  {
    v14 = sub_22E48B6FC(a2, v13);
    v16 = 0;
    v17 = v14 & 0xFFFFFFFFFFFFFFF8;
    if (v14 <= 7)
      v17 = 0;
    v18 = v15 & 0xFFFFFFFFFFFFFFF8;
    if (v14 <= 7)
      v18 = 0;
    if (v14 >= 8)
      v16 = 1 << (v15 & 7 | (8 * (v14 & 7)));
    v50[0] = v17;
    v50[1] = v18;
    v50[2] = v16;
    v51 = 0;
    v52 = 0;
    v53 = 0;
    v19 = (uint64_t *)sub_22E3C43AC((uint64_t *)(a2 + 272), (uint64_t)v50, "cleanup.dest");
    NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)(v5 + 24), v20);
    LOWORD(v58) = 257;
    v12 = sub_22E3C18F4(a2 + 272, 33, v19, NullValue, (uint64_t)&v54);
  }
  v54 = v12;
  v55 = 0;
  v60 = 0;
  v61 = 0;
  v62 = v7;
  v22 = sub_22E3C187C((uint64_t)&v68, (unint64_t)&v54, 1);
  v23 = (char *)v68 + 152 * v69;
  v24 = *(_OWORD *)(v22 + 16);
  *(_OWORD *)v23 = *(_OWORD *)v22;
  *((_OWORD *)v23 + 1) = v24;
  v25 = *(_QWORD *)(v22 + 144);
  v26 = *(_OWORD *)(v22 + 128);
  v27 = *(_OWORD *)(v22 + 96);
  *((_OWORD *)v23 + 7) = *(_OWORD *)(v22 + 112);
  *((_OWORD *)v23 + 8) = v26;
  *((_QWORD *)v23 + 18) = v25;
  *((_OWORD *)v23 + 6) = v27;
  v28 = *(_OWORD *)(v22 + 80);
  v29 = *(_OWORD *)(v22 + 32);
  v30 = *(_OWORD *)(v22 + 48);
  *((_OWORD *)v23 + 4) = *(_OWORD *)(v22 + 64);
  *((_OWORD *)v23 + 5) = v28;
  *((_OWORD *)v23 + 2) = v29;
  *((_OWORD *)v23 + 3) = v30;
  LODWORD(v69) = v69 + 1;
  v54 = (uint64_t)v10;
  v55 = 0;
  v60 = 0;
  v61 = 0;
  v62 = (llvm::LLVMContext *)v47;
  v31 = sub_22E3C187C((uint64_t)&v68, (unint64_t)&v54, 1);
  v32 = (char *)v68 + 152 * v69;
  v33 = *(_OWORD *)(v31 + 16);
  *(_OWORD *)v32 = *(_OWORD *)v31;
  *((_OWORD *)v32 + 1) = v33;
  v34 = *(_QWORD *)(v31 + 144);
  v35 = *(_OWORD *)(v31 + 128);
  v36 = *(_OWORD *)(v31 + 96);
  *((_OWORD *)v32 + 7) = *(_OWORD *)(v31 + 112);
  *((_OWORD *)v32 + 8) = v35;
  *((_QWORD *)v32 + 18) = v34;
  *((_OWORD *)v32 + 6) = v36;
  v37 = *(_OWORD *)(v31 + 80);
  v38 = *(_OWORD *)(v31 + 32);
  v39 = *(_OWORD *)(v31 + 48);
  *((_OWORD *)v32 + 4) = *(_OWORD *)(v31 + 64);
  *((_OWORD *)v32 + 5) = v37;
  *((_OWORD *)v32 + 2) = v38;
  *((_OWORD *)v32 + 3) = v39;
  LODWORD(v69) = v69 + 1;
  v45 = sub_22F24E200(v5 + 280, v6[2049], &v68, v40, v41, v42, v43, v44);
  v46 = *(_QWORD *)(a1 + 8);
  v59 = 0;
  v55 = 0;
  v56 = 0;
  v54 = v46;
  v58 = 0;
  v57 = 0;
  memset(v63, 0, sizeof(v63));
  v64 = 0;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  sub_22E47A004(a2, v45, (uint64_t)&v54, (uint64_t)v63, (uint64_t)&v68, 0, 0, 0, (uint64_t)v49, 0);
  if (v77 != v79)
    free(v77);
  if (v74 != v76)
    free(v74);
  if (v71 != v73)
    free(v71);
  if (v68 != v70)
    free(v68);
}

uint64_t sub_22E4D73E0(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t *v6;
  __int128 v7;
  size_t size;
  void **v9;
  std::string *v10;
  uint64_t v11;
  _OWORD v13[3];
  void *__p[2];
  char v15;
  _QWORD v16[4];
  __int16 v17;
  _OWORD v18[3];
  _OWORD v19[3];
  std::string v20;

  *((_BYTE *)&v20.__r_.__value_.__s + 23) = 9;
  strcpy((char *)&v20, "wide_ptr.");
  std::string::append(&v20, off_24FA63C58[(int)a3]);
  v6 = (uint64_t *)(a1 + 272);
  v7 = a2[1];
  v18[0] = *a2;
  v18[1] = v7;
  v18[2] = a2[2];
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&v20.__r_.__value_.__s + 23) & 0x7F;
  else
    size = v20.__r_.__value_.__l.__size_;
  sub_22E3B8BF4((uint64_t)__p, size + 5);
  if (v15 >= 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if (size)
  {
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v20;
    else
      v10 = (std::string *)v20.__r_.__value_.__r.__words[0];
    memmove(v9, v10, size);
  }
  strcpy((char *)v9 + size, ".addr");
  v17 = 260;
  v16[0] = __p;
  sub_22E3C408C(v6, (uint64_t)v18, a3, (uint64_t)v16, (uint64_t)v19);
  if (v15 < 0)
    operator delete(__p[0]);
  v13[0] = v19[0];
  v13[1] = v19[1];
  v13[2] = v19[2];
  v17 = 260;
  v16[0] = &v20;
  v11 = sub_22E3C2A7C(v6, (uint64_t)v13, (uint64_t)v16);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  return v11;
}

_QWORD *sub_22E4D7560(_QWORD *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v8;
  uint64_t *v9;
  _QWORD *v10;
  llvm::Constant **v11;
  _QWORD *v12;
  llvm::Type *v13;
  uint64_t NullValue;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[4];
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  if (!((unint64_t)a3 | (unint64_t)a4))
    return result;
  v32 = v5;
  v33 = v6;
  v8 = a4;
  v9 = a3;
  v10 = result;
  result = (_QWORD *)sub_22F25E214(result, a2);
  v11 = (llvm::Constant **)result;
  if (v9)
  {
    result = (_QWORD *)sub_22F25E214(v10, v9);
    v9 = result;
    if (!v8)
    {
LABEL_4:
      if (a5)
        goto LABEL_5;
LABEL_14:
      v19 = 0;
      goto LABEL_15;
    }
  }
  else if (!v8)
  {
    goto LABEL_4;
  }
  result = (_QWORD *)sub_22F25E214(v10, v8);
  v8 = result;
  if (!a5)
    goto LABEL_14;
LABEL_5:
  v30[0] = "boundscheck.notnull";
  v31 = 259;
  v12 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  NullValue = llvm::Constant::getNullValue(*v11, v13);
  v31 = 257;
  v15 = sub_22E3C18F4((uint64_t)(v10 + 34), 33, (uint64_t *)v11, NullValue, (uint64_t)v30);
  v16 = v15;
  if (v15 && *(unsigned __int8 *)(v15 + 16) >= 0x1Cu)
    llvm::Instruction::addAnnotationMetadata();
  v17 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x23489C09C](v17, v12, 0, v16, 0);
  v31 = 257;
  v18 = sub_22E3C12C8(v10 + 34, v17, (uint64_t)v30);
  v19 = v18;
  if (v18 && *(unsigned __int8 *)(v18 + 16) >= 0x1Cu)
    llvm::Instruction::addAnnotationMetadata();
  result = (_QWORD *)sub_22E5ED9B4(v10, v12, 0);
LABEL_15:
  if (v9)
  {
    v31 = 257;
    v26 = sub_22E3C18F4((uint64_t)(v10 + 34), 36, (uint64_t *)v11, (uint64_t)v9, (uint64_t)v30);
    v27 = v26;
    if (v26 && *(unsigned __int8 *)(v26 + 16) >= 0x1Cu)
      llvm::Instruction::addAnnotationMetadata();
    result = (_QWORD *)sub_22F25E298((uint64_t)v10, v27, 2);
    if (!v8)
    {
LABEL_17:
      if (!v19)
        return result;
      goto LABEL_18;
    }
  }
  else if (!v8)
  {
    goto LABEL_17;
  }
  v31 = 257;
  v28 = sub_22E3C18F4((uint64_t)(v10 + 34), 35, (uint64_t *)v11, (uint64_t)v8, (uint64_t)v30);
  v29 = v28;
  if (v28 && *(unsigned __int8 *)(v28 + 16) >= 0x1Cu)
    llvm::Instruction::addAnnotationMetadata();
  result = (_QWORD *)sub_22F25E298((uint64_t)v10, v29, 3);
  if (v19)
  {
LABEL_18:
    v20 = v10[40];
    v21 = (_QWORD *)(v19 - 64);
    if (*(_QWORD *)(v19 - 64))
    {
      **(_QWORD **)(v19 - 48) = *(_QWORD *)(v19 - 56);
      v22 = *(_QWORD *)(v19 - 56);
      if (v22)
        *(_QWORD *)(v22 + 16) = *(_QWORD *)(v19 - 48);
    }
    *v21 = v20;
    if (v20)
    {
      v25 = *(_QWORD *)(v20 + 8);
      v23 = (_QWORD *)(v20 + 8);
      v24 = v25;
      *(_QWORD *)(v19 - 56) = v25;
      if (v25)
        *(_QWORD *)(v24 + 16) = v19 - 56;
      *(_QWORD *)(v19 - 48) = v23;
      *v23 = v21;
    }
  }
  return result;
}

uint64_t *sub_22E4D7830(_QWORD *a1, uint64_t a2, char a3, uint64_t a4, int a5, uint64_t *a6, uint64_t **a7, int a8)
{
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  _OWORD v21[3];
  _OWORD v22[3];
  _OWORD v23[3];
  _QWORD v24[3];
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  v14 = *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v14 || *(_BYTE *)(v14 + 16) != 39)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
      v14 = sub_22F10CF48(v14);
    else
      v14 = 0;
  }
  memset(v24, 0, sizeof(v24));
  v25 = 0;
  v27 = 0;
  v28 = 0;
  v26 = 0;
  v29 = 0;
  sub_22E4D79C0(&v30, a1, a2, v24, 0);
  v23[0] = v30;
  v23[1] = v31;
  v23[2] = v32;
  v15 = (uint64_t *)sub_22E4D73E0((uint64_t)a1, v23, 0);
  v22[0] = v30;
  v22[1] = v31;
  v22[2] = v32;
  v16 = sub_22E4D73E0((uint64_t)a1, v22, 1);
  v17 = 0;
  if ((*(_BYTE *)(v14 + 40) & 7) == 2)
  {
    v21[0] = v30;
    v21[1] = v31;
    v21[2] = v32;
    v17 = (uint64_t *)sub_22E4D73E0((uint64_t)a1, v21, 2);
  }
  if ((a3 & 1) != 0 || a5)
  {
    if (a5)
      v18 = 0;
    else
      v18 = (uint64_t *)v16;
    sub_22E4D7560(a1, v15, v18, v17, a8);
  }
  if (a6)
    *a6 = v16;
  if (a7)
    *a7 = v17;
  return v15;
}

uint64_t sub_22E4D79C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  int v11;
  uint64_t result;
  char v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  _OWORD v20[4];
  const char *v21;
  __int16 v22;
  __int128 v23;
  __int128 v24;
  _OWORD v25[2];

  v10 = *(_QWORD *)(a2 + 8);
  v11 = sub_22E619D68(v10);
  if (v11)
  {
    if (v11 != 2)
    {
      result = sub_22F262930(a1, (unsigned __int8 *)a2, a4, a4);
      LOBYTE(v14) = *(_BYTE *)(a5 + 48);
      *(_QWORD *)a5 = result;
      *(_QWORD *)(a5 + 8) = v18;
      LOBYTE(v14) = v14 & 0xF8 | 2;
      goto LABEL_4;
    }
    if ((a4 & 1) == 0 && !*(_QWORD *)a3)
    {
      v21 = "agg-temp";
      v22 = 259;
      sub_22E4211F0(a1, v10, (uint64_t)&v21, 0, (uint64_t)&v23);
      v19 = v24;
      *a3 = v23;
      a3[1] = v19;
      a3[2] = v25[0];
      *(_OWORD *)((char *)a3 + 41) = *(_OWORD *)((char *)v25 + 9);
    }
    v15 = a3[1];
    v20[0] = *a3;
    v20[1] = v15;
    v16 = a3[3];
    v20[2] = a3[2];
    v20[3] = v16;
    result = (uint64_t)sub_22E4EF100(a1, a2, (uint64_t)v20);
    if (*(_QWORD *)a3)
    {
      v17 = a3[1];
      *(_OWORD *)a5 = *a3;
      *(_OWORD *)(a5 + 16) = v17;
      *(_OWORD *)(a5 + 32) = a3[2];
      v14 = *(_BYTE *)(a5 + 48) & 0xF8 | (*((unsigned __int8 *)a3 + 48) >> 2) & 1 | 4;
      goto LABEL_4;
    }
    v13 = *(_BYTE *)(a5 + 48);
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
  }
  else
  {
    *(_QWORD *)&v23 = a1;
    *((_QWORD *)&v23 + 1) = a1 + 272;
    LOBYTE(v24) = a4;
    *((_QWORD *)&v24 + 1) = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
    result = (uint64_t)sub_22E50E974((uint64_t *)&v23, (unsigned __int8 *)a2);
    v13 = *(_BYTE *)(a5 + 48);
    *(_QWORD *)a5 = result;
    *(_QWORD *)(a5 + 8) = 0;
  }
  LOBYTE(v14) = v13 & 0xF8;
LABEL_4:
  *(_BYTE *)(a5 + 48) = v14;
  return result;
}

void sub_22E4D7B28(_QWORD *a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  unsigned int v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  llvm::GetElementPtrInst *v49;
  uint64_t v50;
  llvm::Type **v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  llvm::Type **v60;
  __int128 v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  unsigned int v71;
  llvm::Type **v72;
  __int128 v73;
  __int128 v74;
  unsigned int v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  BOOL v86;
  _OWORD v87[8];
  uint64_t v88;
  _OWORD v89[8];
  uint64_t v90;
  _OWORD v91[3];
  _OWORD v92[8];
  uint64_t v93;
  _OWORD v94[3];
  _OWORD v95[3];
  _OWORD v96[3];
  _BYTE v97[64];
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  _OWORD v101[3];
  _OWORD v102[3];
  _OWORD v103[8];
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  uint64_t *v111[3];

  v5 = (uint64_t)a1;
  v111[2] = *(uint64_t **)MEMORY[0x24BDAC8D0];
  v7 = *(_DWORD *)(a2 + 76);
  if ((v7 & 0xC) != 0)
  {
    *(_DWORD *)(a2 + 76) = 0;
    v32 = *(_OWORD *)(a2 + 112);
    v103[6] = *(_OWORD *)(a2 + 96);
    v103[7] = v32;
    v104 = *(_QWORD *)(a2 + 128);
    v33 = *(_OWORD *)(a2 + 48);
    v103[2] = *(_OWORD *)(a2 + 32);
    v103[3] = v33;
    v34 = *(_OWORD *)(a2 + 80);
    v103[4] = *(_OWORD *)(a2 + 64);
    v103[5] = v34;
    v35 = *(_OWORD *)(a2 + 16);
    v103[0] = *(_OWORD *)a2;
    v103[1] = v35;
    sub_22E4D7B28(&v105, a1, v103, a3);
    v36 = *(_QWORD *)(a2 + 64);
    v37 = *(_OWORD *)(a2 + 24);
    v102[0] = *(_OWORD *)(a2 + 8);
    v102[1] = v37;
    v102[2] = *(_OWORD *)(a2 + 40);
    v12 = sub_22F28A088(v5, v7, v105, v36, v102, 0);
    goto LABEL_46;
  }
  v8 = *(_DWORD *)(a2 + 72);
  if ((v8 & 0x30) == 0x10)
  {
    v9 = *(_OWORD *)(a2 + 24);
    v105 = *(_OWORD *)(a2 + 8);
    v106 = v9;
    v107 = *(_OWORD *)(a2 + 40);
    v10 = a1[18];
    v11 = *(_QWORD *)(v10 + 784);
    if (!v11)
    {
      sub_22F298C2C(*(_QWORD **)(v5 + 144));
      v11 = *(_QWORD *)(v10 + 784);
    }
    v101[0] = v105;
    v101[1] = v106;
    v101[2] = v107;
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *))(*(_QWORD *)v11 + 296))(v11, v5, v101);
    goto LABEL_46;
  }
  if ((v8 & 0x1C0) != 0xC0)
  {
    switch(*(_DWORD *)a2)
    {
      case 0:
        v16 = *(_QWORD *)(a2 + 64);
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) == 29)
        {
          v17 = *(_QWORD *)(a2 + 8);
          v18 = *(_QWORD *)(a2 + 16);
          v19 = *(_QWORD *)(a2 + 24);
          v20 = *(_DWORD *)(a2 + 36);
          v21 = *(unsigned __int8 *)(a2 + 80);
          v22 = *(unsigned int *)(a2 + 84);
          v23 = *(_OWORD *)(a2 + 104);
          v98 = *(_OWORD *)(a2 + 88);
          v99 = v23;
          v100 = *(_QWORD *)(a2 + 120);
          v24 = a3;
          if (v17)
            v25 = v18;
          else
            v25 = 0;
          if (v17 && v19)
          {
            v26 = __clz(v19) ^ 0x3F;
            v17 = v17 & 0xFFFFFFFFFFFFFFF8 | (v26 >> 3);
            v25 = v25 & 0xFFFFFFFFFFFFFFF8 | v26 & 7;
          }
          v27 = sub_22E4EBBB0(v17, v25, v5, 1);
          if (v27 < 8)
          {
            v29 = 0;
            v30 = 0;
            v31 = 0;
          }
          else
          {
            v29 = v28 & 0xFFFFFFFFFFFFFFF8;
            v30 = v27 & 0xFFFFFFFFFFFFFFF8;
            v31 = 1 << (v28 & 7 | (8 * (v27 & 7)));
          }
          v108 = v98;
          v109 = v99;
          v110 = v100;
          *(_QWORD *)&v105 = v30;
          *((_QWORD *)&v105 + 1) = v29;
          *(_QWORD *)&v106 = v31;
          DWORD2(v106) = 0;
          HIDWORD(v106) = v20;
          v79 = (v8 >> 2) & 1;
          v80 = (v21 >> 6) & 1;
          v107 = 0uLL;
          a1 = (_QWORD *)v5;
          v81 = v16;
          v78 = v24;
          v76 = v22;
        }
        else
        {
          v73 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)v97 = *(_OWORD *)a2;
          *(_OWORD *)&v97[16] = v73;
          v74 = *(_OWORD *)(a2 + 48);
          *(_OWORD *)&v97[32] = *(_OWORD *)(a2 + 32);
          *(_OWORD *)&v97[48] = v74;
          v75 = *(unsigned __int8 *)(a2 + 80);
          v76 = *(unsigned int *)(a2 + 84);
          v77 = *(_OWORD *)(a2 + 104);
          v108 = *(_OWORD *)(a2 + 88);
          v109 = v77;
          v110 = *(_QWORD *)(a2 + 120);
          v78 = a3;
          v105 = *(_OWORD *)&v97[8];
          v106 = *(_OWORD *)&v97[24];
          v79 = (v8 >> 2) & 1;
          v80 = (v75 >> 6) & 1;
          v107 = *(_OWORD *)&v97[40];
          v81 = v16;
        }
        v12 = sub_22E4E6994(a1, &v105, v79, v81, v78, v76, &v108, v80);
        goto LABEL_46;
      case 1:
        v38 = sub_22E3E4B64(*(_QWORD *)(*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFFFF0));
        v39 = sub_22E3E4B64(*(_QWORD *)(*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFFFF0));
        if (!v39
          || (*(_DWORD *)(v39 + 16) & 0x780000) != 0x80000
          || (v40 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0),
              *(_BYTE *)(v40 + 16) == 56)
          && ((v41 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v40 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)) != 0
            ? (v42 = (*(_DWORD *)(v41 + 16) & 0xFF800FF) == 87031819)
            : (v42 = 0),
              v42
           && (*(_BYTE *)(*(_QWORD *)(v5 + 152) + *(_QWORD *)(**(_QWORD **)(v5 + 152) - 24) + 160) & 0x20) != 0))
        {
          v70 = *(_OWORD *)(a2 + 24);
          v94[0] = *(_OWORD *)(a2 + 8);
          v94[1] = v70;
          v94[2] = *(_OWORD *)(a2 + 40);
          v71 = *(_DWORD *)(a2 + 72);
          LOWORD(v107) = 257;
          v72 = (llvm::Type **)sub_22E4E7B2C(v5, v94, (v71 >> 2) & 1, (v71 >> 9) & 3, (uint64_t)&v105);
          v62 = sub_22E4E7BB4(v5, v72, *(_QWORD *)(a2 + 64));
          v63 = (uint64_t *)(v5 + 272);
          v64 = *(_QWORD *)(a2 + 56);
          *(_QWORD *)&v105 = "vecext";
          LOWORD(v107) = 259;
LABEL_40:
          v12 = sub_22E420480(v63, v62, v64, (uint64_t)&v105);
        }
        else
        {
          v43 = *(_OWORD *)(a2 + 24);
          v105 = *(_OWORD *)(a2 + 8);
          v106 = v43;
          v107 = *(_OWORD *)(a2 + 40);
          v44 = *((_QWORD *)&v105 + 1);
          if (*(_BYTE *)(*((_QWORD *)&v105 + 1) + 8) == 16)
          {
            v45 = *(_OWORD *)(a2 + 24);
            v96[0] = *(_OWORD *)(a2 + 8);
            v96[1] = v45;
            v96[2] = *(_OWORD *)(a2 + 40);
            LOWORD(v110) = 257;
            sub_22E3C408C((uint64_t *)(v5 + 272), (uint64_t)v96, 0, (uint64_t)&v108, (uint64_t)&v105);
            v44 = *((_QWORD *)&v105 + 1);
          }
          if ((BYTE8(v106) & 3) != 0)
            v46 = (uint64_t *)sub_22F28ABCC(&v105, v5);
          else
            v46 = (uint64_t *)v105;
          v47 = (uint64_t *)llvm::ConstantInt::get();
          v48 = *(uint64_t **)(a2 + 56);
          v111[0] = v47;
          v111[1] = v48;
          LOWORD(v110) = 257;
          v49 = sub_22E486CB4((uint64_t *)(v5 + 272), v44, v46, v111, 2, (uint64_t)&v108);
          v50 = **(_QWORD **)(*((_QWORD *)&v105 + 1) + 16);
          *(_QWORD *)&v105 = v49;
          *((_QWORD *)&v105 + 1) = v50;
          DWORD2(v106) = 0;
          v107 = 0uLL;
          v95[0] = v105;
          v95[1] = v106;
          v95[2] = 0uLL;
          LODWORD(v50) = *(_DWORD *)(a2 + 72);
          LOWORD(v110) = 257;
          v51 = (llvm::Type **)sub_22E4E7B2C(v5, v95, (v50 >> 2) & 1, (v50 >> 9) & 3, (uint64_t)&v108);
          v12 = sub_22E4E7BB4(v5, v51, *(_QWORD *)(v38 + 32));
        }
        break;
      case 3:
        v56 = *(_OWORD *)(a2 + 112);
        v92[6] = *(_OWORD *)(a2 + 96);
        v92[7] = v56;
        v93 = *(_QWORD *)(a2 + 128);
        v57 = *(_OWORD *)(a2 + 48);
        v92[2] = *(_OWORD *)(a2 + 32);
        v92[3] = v57;
        v58 = *(_OWORD *)(a2 + 80);
        v92[4] = *(_OWORD *)(a2 + 64);
        v92[5] = v58;
        v59 = *(_OWORD *)(a2 + 16);
        v92[0] = *(_OWORD *)a2;
        v92[1] = v59;
        sub_22E4E89BC((uint64_t)a1, (uint64_t)v92, a4);
        return;
      case 4:
        sub_22F25F7B4(a4, (uint64_t)a1, *(_QWORD *)(*(_QWORD *)(a2 + 8) + 24), *(llvm::LLVMContext **)(a2 + 64));
        return;
      case 5:
        v60 = *(llvm::Type ***)(a2 + 56);
        if ((*(_BYTE *)(*(_QWORD *)(a1[18] + 184) + 33) & 0x18) != 0)
        {
          v85 = *(_QWORD *)(*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFFFF0);
          if (v85)
            v86 = *(_BYTE *)(v85 + 16) == 29;
          else
            v86 = 0;
          if (!v86)
            sub_22F10CF48(v85);
          *(_QWORD *)&v108 = v5 + 272;
          LOWORD(v107) = 257;
          sub_22F25F908((uint64_t *)&v108, v60);
          v8 = *(_DWORD *)(a2 + 72);
        }
        v61 = *(_OWORD *)(a2 + 24);
        v91[0] = *(_OWORD *)(a2 + 8);
        v91[1] = v61;
        v91[2] = *(_OWORD *)(a2 + 40);
        LOWORD(v107) = 257;
        v62 = sub_22E4E7B2C(v5, v91, (v8 >> 2) & 1, (v8 >> 9) & 3, (uint64_t)&v105);
        v63 = (uint64_t *)(v5 + 272);
        *(_QWORD *)&v105 = "matrixext";
        LOWORD(v107) = 259;
        v64 = (uint64_t)v60;
        goto LABEL_40;
      case 6:
        v65 = *(_QWORD *)(a1[18] + 800);
        v66 = *(_OWORD *)(a2 + 48);
        v89[2] = *(_OWORD *)(a2 + 32);
        v89[3] = v66;
        v67 = *(_OWORD *)(a2 + 16);
        v89[0] = *(_OWORD *)a2;
        v89[1] = v67;
        v90 = *(_QWORD *)(a2 + 128);
        v68 = *(_OWORD *)(a2 + 112);
        v89[6] = *(_OWORD *)(a2 + 96);
        v89[7] = v68;
        v69 = *(_OWORD *)(a2 + 80);
        v89[4] = *(_OWORD *)(a2 + 64);
        v89[5] = v69;
        (*(void (**)(uint64_t, uint64_t, _OWORD *))(*(_QWORD *)v65 + 72))(v65, v5, v89);
        return;
      default:
        v52 = *(_OWORD *)(a2 + 112);
        v87[6] = *(_OWORD *)(a2 + 96);
        v87[7] = v52;
        v88 = *(_QWORD *)(a2 + 128);
        v53 = *(_OWORD *)(a2 + 48);
        v87[2] = *(_OWORD *)(a2 + 32);
        v87[3] = v53;
        v54 = *(_OWORD *)(a2 + 80);
        v87[4] = *(_OWORD *)(a2 + 64);
        v87[5] = v54;
        v55 = *(_OWORD *)(a2 + 16);
        v87[0] = *(_OWORD *)a2;
        v87[1] = v55;
        sub_22E4E8DFC((uint64_t)a1, (uint64_t)v87, a3, a4);
        return;
    }
    goto LABEL_46;
  }
  v13 = a1[18];
  v14 = (__int128 *)(a2 + 8);
  if ((*(_WORD *)(*(_QWORD *)(v13 + 152) + 148) & 2) == 0)
  {
    v15 = *(_OWORD *)(a2 + 24);
    v105 = *v14;
    v106 = v15;
    v107 = *(_OWORD *)(a2 + 40);
    v12 = sub_22E564218(a1, (uint64_t)&v105, (uint64_t *)(*(_QWORD *)(v13 + 832) + 224));
LABEL_46:
    v84 = *(_BYTE *)(a4 + 48);
    *(_QWORD *)a4 = v12;
    *(_QWORD *)(a4 + 8) = 0;
    goto LABEL_47;
  }
  v82 = *(_OWORD *)(a2 + 24);
  v105 = *v14;
  v106 = v82;
  v107 = *(_OWORD *)(a2 + 40);
  v83 = sub_22E564218(a1, (uint64_t)&v105, (uint64_t *)(*(_QWORD *)(v13 + 832) + 232));
  sub_22F272F6C(v5, *(_QWORD *)(a2 + 64), v83);
  v84 = *(_BYTE *)(a4 + 48);
  *(_QWORD *)a4 = v83;
  *(_QWORD *)(a4 + 8) = 0;
LABEL_47:
  *(_BYTE *)(a4 + 48) = v84 & 0xF8;
}

unint64_t sub_22E4D82D4(uint64_t a1, llvm::Type *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t result;
  int v7;

  result = sub_22E4D8348(a1, a2, a4, a5);
  v7 = __clz(a3);
  *(_WORD *)(result + 18) = *(_WORD *)(result + 18) & 0xFFC0 | (63 - v7);
  if (a3)
    return result & 0xFFFFFFFFFFFFFFF8 | ((v7 ^ 0x3Fu) >> 3);
  return result;
}

uint64_t sub_22E4D8348(uint64_t a1, llvm::Type *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
    return sub_22E3E4D88(a1 + 272, a2, a4, a3);
  llvm::User::operator new((llvm::User *)0x48);
  llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a1 + 144) + 200));
  return llvm::AllocaInst::AllocaInst();
}

unint64_t sub_22E4D83CC(uint64_t a1, llvm::Type *a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t *a6)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __int128 v22;

  v10 = sub_22E4D82D4(a1, a2, a3, a4, a5);
  if (a6)
  {
    *a6 = v10;
    a6[1] = v11;
  }
  v12 = v10 & 0xFFFFFFFFFFFFFFF8;
  if (*(_DWORD *)(a1 + 132))
  {
    v20 = v10 & 0xFFFFFFFFFFFFFFF8;
    v21 = a1 + 272;
    v22 = *(_OWORD *)(a1 + 320);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 272));
    if (!a5)
    {
      v19 = sub_22F25E470(a1);
      sub_22E48C138(a1 + 272, v19);
    }
    v15 = sub_22E699F3C(*(_QWORD **)(a1 + 144));
    v16 = *(unsigned int *)(a1 + 132);
    v17 = llvm::PointerType::get();
    v18 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v15 + 216))(v15, a1, v20, v16, 0, v17, 1);
    sub_22E4EEB90(&v21);
    v12 = v18;
  }
  v13 = v12 & 0xFFFFFFFFFFFFFFF8 | ((__clz(a3) ^ 0x3F) >> 3);
  if (a3)
    return v13;
  else
    return v12;
}

unint64_t sub_22E4D84FC(uint64_t a1, llvm::Type *a2, uint64_t a3)
{
  llvm::DataLayout *DataLayout;
  unint64_t PrefTypeAlignment;

  DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a1 + 144) + 200));
  PrefTypeAlignment = llvm::DataLayout::getPrefTypeAlignment(DataLayout, a2);
  return sub_22E4D83CC(a1, a2, PrefTypeAlignment, a3, 0, 0);
}

unint64_t sub_22E4D8554(uint64_t a1, llvm::LLVMContext *a2, uint64_t a3)
{
  unint64_t v6;
  llvm::Type *v7;

  v6 = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), (uint64_t)a2);
  v7 = (llvm::Type *)sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 144) + 280), a2);
  return sub_22E4D83CC(a1, v7, v6, a3, 0, 0);
}

unint64_t sub_22E4D85B8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t *a5)
{
  llvm::Type *v10;
  unint64_t result;
  char v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE v17[32];
  __int16 v18;

  v10 = (llvm::Type *)sub_22E66C868(*(_QWORD *)(a1 + 144) + 280, a2, 0);
  result = sub_22E4D83CC(a1, v10, a3, a4, 0, a5);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 29)
  {
    v13 = result;
    v14 = v12;
    llvm::FixedVectorType::get();
    v15 = llvm::PointerType::get();
    v18 = 257;
    result = sub_22E3C1740((uint64_t *)(a1 + 272), 49, v13 & 0xFFFFFFFFFFFFFFF8, v15, (uint64_t)v17);
    v16 = result & 0xFFFFFFFFFFFFFFF8 | ((__clz(1 << (v14 & 7 | (8 * (v13 & 7u)))) ^ 0x3F) >> 3);
    if (result)
      return v16;
  }
  return result;
}

llvm::Value *sub_22E4D86E0(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  __n128 v5;
  char v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  __n128 v14;
  uint64_t v15;
  llvm::Value *v16;
  unint64_t v17;
  llvm::Value *result;
  _QWORD *v19;
  uint64_t v20;
  llvm::Value *v21;
  llvm::Value *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  BOOL v26;
  int v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  __int16 v38;
  char v39;
  _QWORD *v40;
  _QWORD *v41;
  char v42;
  uint64_t v43;

  v4 = sub_22E3CF180((uint64_t)(a1 + 488), a2);
  if (v6)
    a1[502] = v4;
  v7 = *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v7)
    v8 = *(_BYTE *)(v7 + 16) == 31;
  else
    v8 = 0;
  if (v8)
    goto LABEL_19;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31)
  {
    v23 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0));
    if (v23)
    {
      v7 = v23;
LABEL_19:
      v32 = a1;
      v33 = a1 + 34;
      LOBYTE(v34) = 0;
      v35 = *(_QWORD *)(a1[18] + 232);
      v24 = sub_22E50E974(&v32, a2, v5);
      return (llvm::Value *)(*(uint64_t (**)(_QWORD, _QWORD *, uint64_t, uint64_t))(**(_QWORD **)(a1[18] + 224)
                                                                                          + 200))(*(_QWORD *)(a1[18] + 224), a1, v24, v7);
    }
  }
  v9 = a1[18];
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 144) + 16400);
  sub_22EFF605C(a2);
  v12 = v11;
  v32 = a1;
  LODWORD(v33) = 4;
  LOBYTE(v34) = 0;
  v39 = 0;
  v13 = sub_22F0013BC((unsigned int *)a2, *(_QWORD *)(v9 + 152));
  sub_22E61990C((uint64_t)&v32, v13);
  v15 = *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0);
  if ((v15 && *(_BYTE *)(v15 + 16) == 39
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39
     && (v15 = sub_22F10CF48(v15)) != 0)
    && ((v25 = *(_BYTE *)(v15 + 40) & 7, v26 = v25 > 4, v27 = (1 << v25) & 0x13, !v26) ? (v28 = v27 == 0) : (v28 = 1),
        v28))
  {
    v29 = v15;
    v30 = sub_22E4D7830(a1, a2, 0, 0, 0, 0, 0, 0);
    v31 = sub_22EF5B848(*(_QWORD *)(a1[18] + 144), *(_QWORD *)(v29 + 32), 0);
    result = sub_22E50EA40((uint64_t)a1, (llvm::Value *)v30, v31, v10, v12);
  }
  else if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                     + 16) == 12)
  {
    v21 = (llvm::Value *)sub_22F262930(a1, a2, 0, 0);
    result = sub_22F263430((uint64_t)a1, v21, v22, *(_QWORD *)(a2 + 8), v10, v12);
  }
  else
  {
    v40 = a1;
    v41 = a1 + 34;
    v42 = 0;
    v43 = *(_QWORD *)(a1[18] + 232);
    v16 = (llvm::Value *)sub_22E50E974(&v40, a2, v14);
    v17 = *(_QWORD *)(a2 + 8);
    v40 = a1;
    v41 = a1 + 34;
    v42 = 0;
    v43 = *(_QWORD *)(a1[18] + 232);
    result = sub_22E50EA80((uint64_t *)&v40, v16, v17, v10, v12, 0);
  }
  v19 = v32;
  *((_DWORD *)v32 + 697) = (_DWORD)v33;
  *(_WORD *)((char *)v19 + 373) = WORD2(v33);
  if (v39)
  {
    v20 = v34;
    *(_DWORD *)(v34 + 96) = v35;
    *(_QWORD *)(v20 + 88) = v36;
    *(_BYTE *)(v20 + 100) = v37;
    *(_WORD *)(v20 + 101) = v38;
  }
  return result;
}

void sub_22E4D89CC(_QWORD *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v4;
  _BYTE v5[136];
  __int128 v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  if ((a2[1] & 3) != 0)
  {
    v4 = sub_22EFFF40C(a2, *(_QWORD *)(a1[18] + 144));
    if ((*v4 & 0xFE) == 0x66 && (*(_DWORD *)v4 & 0x1C00) == 0x400)
      sub_22E4D8A8C(a1, (uint64_t)v4);
    else
      sub_22E4D8D7C((uint64_t)a1, (unsigned int *)a2, (uint64_t)v5);
  }
  else
  {
    v6 = 0uLL;
    v8 = 0;
    v7 = 0;
    v10 = 0;
    v11 = 0;
    v9 = 0;
    v12 = 0;
    sub_22E4D79C0((uint64_t)a1, (uint64_t)a2, &v6, 1, (uint64_t)v5);
  }
}

int32x2_t sub_22E4D8A8C(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t result;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD v15[4];
  __int16 v16;
  char v17;
  _QWORD *v18;
  _QWORD v19[3];
  _QWORD v20[4];
  __int16 v21;

  v4 = *(_DWORD *)a2;
  if ((*(_DWORD *)a2 & 0x300) != 0)
  {
    v18 = a1;
    v19[0] = 0;
    v19[2] = 0;
    if (v4 != 103)
      sub_22F253B0C((uint64_t)a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 24), (uint64_t)v19);
    result = (int32x2_t)sub_22E4EC838((uint64_t)v15, a1, (_BYTE *)a2).n128_u64[0];
    if (!v17)
    {
      v15[0] = "cond.true";
      v16 = 259;
      v6 = (_QWORD *)operator new();
      llvm::BasicBlock::BasicBlock();
      v20[0] = "cond.false";
      v21 = 259;
      v7 = (_QWORD *)operator new();
      llvm::BasicBlock::BasicBlock();
      v15[0] = "cond.end";
      v16 = 259;
      v8 = (_QWORD *)operator new();
      llvm::BasicBlock::BasicBlock();
      v20[0] = a1[40];
      v9 = 32;
      if (*(_BYTE *)a2 == 103)
        v9 = 24;
      v10 = *(unsigned __int8 **)(a2 + v9);
      v11 = sub_22E3CF180((uint64_t)(a1 + 488), a2);
      if (v12)
        v13 = v11;
      else
        v13 = 0;
      sub_22E61F8F8(a1, v10, (uint64_t)v6, (uint64_t)v7, v13, 0);
      sub_22E5ED9B4(a1, v6, 0);
      sub_22E3CB7B0(a1, a2, 0);
      if (!a1[729])
        a1[729] = v20;
      sub_22E4D89CC(a1);
      if ((_QWORD *)a1[729] == v20)
        a1[729] = 0;
      v14 = llvm::User::operator new((llvm::User *)0x40);
      llvm::BranchInst::BranchInst();
      v16 = 257;
      sub_22E3C12C8(a1 + 34, v14, (uint64_t)v15);
      sub_22E5ED9B4(a1, v7, 0);
      if (!a1[729])
        a1[729] = v20;
      sub_22E4D89CC(a1);
      if ((_QWORD *)a1[729] == v20)
        a1[729] = 0;
      sub_22E5ED9B4(a1, v8, 0);
    }
    if (v19[0])
      return sub_22F254324((uint64_t)v19, (uint64_t)a1);
  }
  else
  {
    sub_22F261638((uint64_t)a1, a2, (uint64_t)v15);
  }
  return result;
}

_QWORD *sub_22E4D8D7C@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  __n128 v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _DWORD *v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  const std::string::value_type *Name;
  std::string::size_type v87;
  const std::string::value_type *v88;
  std::string::size_type v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 *v97;
  __int128 *p_dst;
  uint64_t v99;
  uint64_t v100;
  int v101;
  unint64_t v103;
  std::string::size_type v104;
  const std::string::value_type *v105;
  uint64_t v106;
  uint64_t v107;
  size_t v108;
  __int128 *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _DWORD *i;
  int v121;
  _DWORD **v122;
  uint64_t v123;
  uint64_t v124;
  __int128 *v125;
  uint64_t v126;
  _QWORD *v127;
  _BYTE *v128;
  uint64_t v129;
  uint64_t v130;
  const char *v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unsigned __int8 *v141;
  llvm::Type **v142;
  unsigned __int8 *v143;
  llvm::Value *v144;
  llvm::LLVMContext *ScalarSizeInBits;
  uint64_t v146;
  BOOL v147;
  uint64_t v148;
  llvm::Instruction *v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unsigned int v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  BOOL v161;
  int v162;
  uint64_t v163;
  char v164;
  unint64_t v165;
  uint64_t v166;
  int v167;
  unsigned __int8 **v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  std::string *v174;
  std::string::size_type v175;
  const std::string::value_type *v176;
  std::string::size_type v177;
  const char *v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  __int128 v185;
  __int128 v186;
  unint64_t v187;
  unsigned int v188;
  __int128 v189;
  uint64_t v190;
  llvm::Type **v191;
  __int128 v192;
  uint64_t *v193;
  uint64_t *v194;
  uint64_t *v195;
  uint64_t *v196;
  uint64_t *v197;
  uint64_t v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  __int128 v206;
  __int128 v207;
  uint64_t v208;
  uint64_t v209[2];
  int v210;
  uint64_t *v211;
  uint64_t *v212;
  _BYTE v213[48];
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  uint64_t v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  uint64_t v223;
  _BYTE v224[32];
  __int128 v225;
  uint64_t v226;
  char v227;
  __int128 __dst;
  __int128 v229;
  __int128 v230;
  char v231;
  _BYTE v232[48];
  _BYTE __p[136];
  uint64_t v234;
  _BYTE v235[64];
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  uint64_t v240;
  uint64_t v241;

  v241 = *MEMORY[0x24BDAC8D0];
  v209[0] = 0;
  v209[1] = a1;
  sub_22EFF605C((uint64_t)a2);
  sub_22E48EE24(v209, v6, 0);
  switch(*(_BYTE *)a2)
  {
    case 0x66:
    case 0x67:
      sub_22E4E52C0(a3, (uint64_t *)a1, (uint64_t)a2);
      return sub_22E48F084(v209);
    case 0x6B:
      sub_22E4E0AF8(a3, (_QWORD *)a1, (uint64_t)a2, 0, v7);
      return sub_22E48F084(v209);
    case 0x6E:
      sub_22F25F3B8((_QWORD *)a3, (_QWORD *)a1, a2);
      return sub_22E48F084(v209);
    case 0x70:
      v24 = (*a2 >> 18) & 0x3F;
      if (v24 == 32)
      {
        sub_22E4D89CC(a1);
        sub_22E47E098(a1);
        goto LABEL_106;
      }
      if (v24 < 2)
      {
        sub_22F260DC0(a1, (uint64_t)a2, a3);
        return sub_22E48F084(v209);
      }
      v25 = *((_QWORD *)a2 + 1);
      v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v25 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v26 && *(_BYTE *)(v26 + 16) == 39 && (*(_DWORD *)(v26 + 40) & 6) == 2)
        goto LABEL_217;
      v27 = sub_22E619D68(v25);
      if (v27)
      {
        if (v27 != 1)
          goto LABEL_217;
        sub_22F262A9C(a1, (uint64_t)a2, a3);
      }
      else
      {
        v29 = *((_QWORD *)a2 + 2);
        v30 = *(_QWORD *)((*(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFF0) + 8);
        if ((v30 & 8) != 0)
        {
          v31 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFFF0) + 0x18);
          if ((v31 & 0xC00000000) != 0)
          {
            v184 = HIDWORD(v31);
            sub_22E4E0888(a1, (unsigned __int8 *)v29, 1u, a3);
            v185 = *(_OWORD *)(a3 + 16);
            *(_OWORD *)__p = *(_OWORD *)a3;
            *(_OWORD *)&__p[16] = v185;
            v186 = *(_OWORD *)(a3 + 48);
            *(_OWORD *)&__p[32] = *(_OWORD *)(a3 + 32);
            *(_OWORD *)&__p[48] = v186;
            v187 = *(_QWORD *)(a3 + 64);
            v188 = *(_DWORD *)(a3 + 72);
            v189 = *(_OWORD *)(a3 + 96);
            v237 = *(_OWORD *)(a3 + 80);
            v238 = v189;
            v239 = *(_OWORD *)(a3 + 112);
            v240 = *(_QWORD *)(a3 + 128);
            v190 = *((_QWORD *)a2 + 3);
            *(_OWORD *)v232 = *(_OWORD *)&__p[8];
            *(_OWORD *)&v232[16] = *(_OWORD *)&__p[24];
            *(_OWORD *)&v232[32] = *(_OWORD *)&__p[40];
            v191 = (llvm::Type **)sub_22F289F48(a1, v184, v190, v232, *(__n128 *)&__p[40]);
            sub_22E4C7504(a1, v187, v191, a2[1]);
            __dst = (unint64_t)v191;
            v231 = 0;
            *(_OWORD *)v235 = *(_OWORD *)__p;
            *(_OWORD *)&v235[16] = *(_OWORD *)&__p[16];
            *(_OWORD *)&v235[32] = *(_OWORD *)&__p[32];
            *(_OWORD *)&v235[48] = *(_OWORD *)&__p[48];
            *(_QWORD *)&v236 = v187;
            *((_QWORD *)&v236 + 1) = v188;
            sub_22E4DAAE0(a1, &__dst, v235, 0, *(double *)&__p[32]);
            return sub_22E48F084(v209);
          }
          v32 = (v31 >> 6) & 7;
          if (v32 == 2)
          {
            sub_22E564C34((llvm::Value *)a1, (uint64_t)a2, 0, (uint64_t)__p, v28);
            goto LABEL_16;
          }
          if (v32 == 4)
          {
            sub_22F27410C(a1, (uint64_t)a2, (uint64_t)__p, v28);
            goto LABEL_16;
          }
        }
        v33 = *((_QWORD *)a2 + 3);
        memset(v224, 0, 28);
        v226 = 0;
        v225 = 0uLL;
        v227 = 0;
        sub_22E4D79C0(__p, a1, v33, v224, 0);
        sub_22E4E0888(a1, *((unsigned __int8 **)a2 + 2), 1u, a3);
        if ((__p[48] & 6) == 0)
          sub_22E4C7504(a1, *(_QWORD *)(a3 + 64), *(llvm::Type ***)__p, a2[1]);
        v220 = *(_OWORD *)__p;
        v221 = *(_OWORD *)&__p[16];
        v222 = *(_OWORD *)&__p[32];
        v223 = *(_QWORD *)&__p[48];
        v34 = *(_OWORD *)(a3 + 112);
        v217 = *(_OWORD *)(a3 + 96);
        v218 = v34;
        v219 = *(_QWORD *)(a3 + 128);
        v35 = *(_OWORD *)(a3 + 48);
        *(_OWORD *)&v213[32] = *(_OWORD *)(a3 + 32);
        v214 = v35;
        v36 = *(_OWORD *)(a3 + 80);
        v215 = *(_OWORD *)(a3 + 64);
        v216 = v36;
        v37 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)v213 = *(_OWORD *)a3;
        *(_OWORD *)&v213[16] = v37;
        sub_22E4DAAE0(a1, &v220, v213, 0, *(double *)&v37);
        v38 = *(_QWORD *)(a1 + 144);
        if (*(_DWORD *)(*(_QWORD *)(v38 + 152) + 72))
          (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v38 + 808) + 616))(*(_QWORD *)(v38 + 808), a1, *((_QWORD *)a2 + 2));
      }
      return sub_22E48F084(v209);
    case 0x71:
      v21 = *((_QWORD *)a2 + 1) & 0xFFFFFFFFFFFFFFF0;
      v22 = *(_QWORD *)v21;
      if (*(_QWORD *)v21)
        v23 = *(_BYTE *)(*(_QWORD *)v21 + 16) == 6;
      else
        v23 = 0;
      if (v23
        || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v22 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 6
        && (v22 = sub_22F10CF48(v22)) != 0)
      {
        v21 = *(_QWORD *)(v22 + 32) & 0xFFFFFFFFFFFFFFF0;
      }
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v21 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 12)
        sub_22F262B08(a1, (uint64_t)a2);
      else
        sub_22E511A28(a1, a2, a3);
      return sub_22E48F084(v209);
    case 0x73:
      sub_22F25F230((_QWORD *)a3, a1, (uint64_t)a2);
      return sub_22E48F084(v209);
    case 0x74:
      sub_22F25F0B4(a3, a1, a2);
      return sub_22E48F084(v209);
    case 0x76:
    case 0x77:
      sub_22F25EFE8(a3, a1, (uint64_t)a2);
      return sub_22E48F084(v209);
    case 0x78:
      if (*(_QWORD *)(a1 + 4184))
      {
        sub_22EFBC5B4(*((_QWORD *)a2 + 2));
        goto LABEL_106;
      }
      *(_QWORD *)(a1 + 4184) = a2;
      sub_22EFBC5B4(*((_QWORD *)a2 + 2));
      sub_22E4D8D7C((_QWORD *)a3);
      goto LABEL_124;
    case 0x79:
      v62 = *(_QWORD *)(a1 + 4184);
      if (!v62)
        *(_QWORD *)(a1 + 4184) = a2;
      v63 = *(_QWORD *)(a1 + 4208);
      v64 = *(_QWORD *)(a1 + 4224);
      *(_QWORD *)(a1 + 4208) = *(_QWORD *)(a1 + 4232);
      *(_QWORD *)(a1 + 4224) = *(_QWORD *)(a1 + 4248);
      sub_22E4D8D7C((_QWORD *)a3);
      *(_QWORD *)(a1 + 4208) = v63;
      *(_QWORD *)(a1 + 4224) = v64;
      if (!v62)
LABEL_124:
        *(_QWORD *)(a1 + 4184) = 0;
      return sub_22E48F084(v209);
    case 0x82:
    case 0x9B:
    case 0xB0:
    case 0xD6:
    case 0xE2:
      goto LABEL_106;
    case 0x87:
      v8 = sub_22E500874((_QWORD *)a1, (uint64_t)a2);
      v9 = *((_QWORD *)a2 + 1);
      v10 = a3;
      v11 = 0;
      v12 = 0;
      goto LABEL_6;
    case 0x89:
      sub_22F25F1B0(a3, a1, (uint64_t)a2);
      return sub_22E48F084(v209);
    case 0x8A:
    case 0x8C:
    case 0x8D:
    case 0x8E:
      memset(v235, 0, 28);
      memset(&v235[32], 0, 17);
      sub_22E4ECB90((uint64_t *)a1, a2, (__int128 *)v235, __p);
      if ((__p[48] & 6) == 0)
      {
        v8 = *(_QWORD *)__p;
        v9 = *((_QWORD *)a2 + 1);
        v10 = a3;
        v11 = 1;
        goto LABEL_5;
      }
      *(_OWORD *)v224 = *(_OWORD *)__p;
      *(_OWORD *)&v224[16] = *(_OWORD *)&__p[16];
      v225 = *(_OWORD *)&__p[32];
      v95 = *((_QWORD *)a2 + 1);
      sub_22E6281E0(*(_QWORD **)(a1 + 144), v95, (uint64_t)&v220);
      *(_OWORD *)v213 = *(_OWORD *)v224;
      *(_OWORD *)&v213[16] = *(_OWORD *)&v224[16];
      *(_OWORD *)&v213[32] = v225;
      v96 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
      __dst = v220;
      v229 = v221;
      *(_QWORD *)&v230 = v222;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_DWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      *(_QWORD *)(a3 + 48) = 0;
      *(_QWORD *)(a3 + 64) = 0;
      *(_QWORD *)(a3 + 72) = 0;
      *(_QWORD *)(a3 + 84) = 2;
      *(_DWORD *)a3 = 0;
      *(_OWORD *)(a3 + 96) = 0u;
      *(_OWORD *)(a3 + 112) = 0u;
      v97 = (__int128 *)v213;
      p_dst = &__dst;
      goto LABEL_104;
    case 0x90:
    case 0x91:
    case 0x92:
    case 0x93:
    case 0x94:
    case 0x95:
    case 0x96:
    case 0x98:
    case 0x99:
      sub_22E4E5ABC(a3, a1, (uint64_t)a2);
      return sub_22E48F084(v209);
    case 0x9C:
      if ((a2[6] & 4) == 0)
      {
        v45 = *((_QWORD *)a2 + 1);
        if ((*(_BYTE *)(*(_QWORD *)(v45 & 0xFFFFFFFFFFFFFFF0) + 17) & 8) != 0)
        {
          sub_22E61DFC4(a1);
          v45 = *((_QWORD *)a2 + 1);
        }
        *(_QWORD *)__p = ".compoundliteral";
        *(_WORD *)&__p[32] = 259;
        v46 = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), v45);
        v47 = sub_22E4D85B8(a1, v45, v46, (uint64_t)__p, 0);
        v49 = 0;
        if (v47 <= 7)
          v50 = 0;
        else
          v50 = v47 & 0xFFFFFFFFFFFFFFF8;
        if (v47 <= 7)
          v51 = 0;
        else
          v51 = v48 & 0xFFFFFFFFFFFFFFF8;
        if (v47 >= 8)
          v49 = 1 << (v48 & 7 | (8 * (v47 & 7)));
        v52 = *((_QWORD *)a2 + 4);
        v53 = *((_QWORD *)a2 + 1);
        sub_22E6281E0(*(_QWORD **)(a1 + 144), v53, (uint64_t)v213);
        *(_QWORD *)__p = v50;
        *(_QWORD *)&__p[8] = v51;
        *(_QWORD *)&__p[16] = v49;
        *(_DWORD *)&__p[24] = 0;
        *(_QWORD *)&__p[40] = 0;
        *(_QWORD *)&__p[32] = 0;
        v54 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
        *(_OWORD *)v235 = *(_OWORD *)v213;
        *(_OWORD *)&v235[16] = *(_OWORD *)&v213[16];
        *(_QWORD *)&v235[32] = *(_QWORD *)&v213[32];
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)(a3 + 24) = 0;
        *(_QWORD *)(a3 + 8) = 0;
        *(_DWORD *)(a3 + 32) = 0;
        *(_QWORD *)(a3 + 40) = 0;
        *(_QWORD *)(a3 + 48) = 0;
        *(_QWORD *)(a3 + 64) = 0;
        *(_QWORD *)(a3 + 72) = 0;
        *(_QWORD *)(a3 + 84) = 2;
        *(_DWORD *)a3 = 0;
        *(_OWORD *)(a3 + 96) = 0u;
        *(_OWORD *)(a3 + 112) = 0u;
        sub_22E3C113C(a3, (__int128 *)__p, v53, 0, (__int128 *)v235, v54);
        v55 = 0;
        v56 = 0;
        *(_QWORD *)__p = v50;
        *(_QWORD *)&__p[8] = v51;
        *(_QWORD *)&__p[16] = v49;
        *(_DWORD *)&__p[24] = 0;
        *(_QWORD *)&__p[40] = 0;
        *(_QWORD *)&__p[32] = 0;
        v57 = *((_QWORD *)a2 + 1);
        v58 = *(_QWORD *)((v57 & 0xFFFFFFFFFFFFFFF0) + 8);
        if ((v58 & 8) != 0)
        {
          v56 = *(_QWORD *)((v58 & 0xFFFFFFFFFFFFFFF0) + 0x18);
          v55 = *(_QWORD *)((v58 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
        }
        sub_22E4DA890(a1, v52, __p, v55 | v56 | (v58 | v57) & 7, 1);
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 152) + 1) & 1) == 0)
        {
          v59 = sub_22F115260(*((_QWORD *)a2 + 1));
          if (v59)
          {
            v60 = v59;
            if (sub_22F245DD4(a1, v59))
              v61 = 3;
            else
              v61 = 2;
            *(_QWORD *)v235 = v50;
            *(_QWORD *)&v235[8] = v51;
            *(_QWORD *)&v235[16] = v49;
            *(_DWORD *)&v235[24] = 0;
            *(_OWORD *)&v235[32] = 0uLL;
            sub_22F259FCC((_QWORD *)a1, (llvm::LLVMContext *)v61, (__int128 *)v235, *((_QWORD *)a2 + 1), (uint64_t)off_24FA63CA8[v60 - 1], v60 & 1);
          }
        }
        return sub_22E48F084(v209);
      }
      v90 = sub_22E508918(*(_QWORD *)(a1 + 144), 0, a2);
      v92 = 0;
      if (v90 <= 7)
        v93 = 0;
      else
        v93 = v90 & 0xFFFFFFFFFFFFFFF8;
      if (v90 <= 7)
        v94 = 0;
      else
        v94 = v91 & 0xFFFFFFFFFFFFFFF8;
      if (v90 >= 8)
        v92 = 1 << (v91 & 7 | (8 * (v90 & 7)));
      v95 = *((_QWORD *)a2 + 1);
      sub_22E6281E0(*(_QWORD **)(a1 + 144), v95, (uint64_t)v213);
      *(_QWORD *)__p = v93;
      *(_QWORD *)&__p[8] = v94;
      *(_QWORD *)&__p[16] = v92;
      *(_DWORD *)&__p[24] = 0;
      *(_QWORD *)&__p[40] = 0;
      *(_QWORD *)&__p[32] = 0;
      v96 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
      *(_OWORD *)v235 = *(_OWORD *)v213;
      *(_OWORD *)&v235[16] = *(_OWORD *)&v213[16];
      *(_QWORD *)&v235[32] = *(_QWORD *)&v213[32];
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_DWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      *(_QWORD *)(a3 + 48) = 0;
      *(_QWORD *)(a3 + 64) = 0;
      *(_QWORD *)(a3 + 72) = 0;
      *(_QWORD *)(a3 + 84) = 2;
      *(_DWORD *)a3 = 0;
      *(_OWORD *)(a3 + 96) = 0u;
      *(_OWORD *)(a3 + 112) = 0u;
      v97 = (__int128 *)__p;
      p_dst = (__int128 *)v235;
LABEL_104:
      v99 = a3;
      v100 = v95;
      v101 = 0;
      goto LABEL_128;
    case 0x9F:
      sub_22F253690(a1, (uint64_t)a2, a3);
      return sub_22E48F084(v209);
    case 0xA0:
      sub_22F253714(a1, (uint64_t)a2, a3);
      return sub_22E48F084(v209);
    case 0xA1:
      v42 = a3;
      v43 = a1;
      v44 = (uint64_t)a2;
      goto LABEL_74;
    case 0xA7:
      sub_22E4E4A14(a3, a1, (uint64_t)a2);
      return sub_22E48F084(v209);
    case 0xA8:
    case 0xB6:
    case 0xEA:
      goto LABEL_217;
    case 0xAB:
      v140 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (!v140 || *(_BYTE *)(v140 + 16) != 39 || (*(_DWORD *)(v140 + 40) & 6) != 2)
        goto LABEL_189;
LABEL_217:
      sub_22F261638(a1, (uint64_t)a2, a3);
      return sub_22E48F084(v209);
    case 0xAC:
      *(_QWORD *)__p = *(_QWORD *)(a1 + 144);
      *(_QWORD *)&__p[8] = a1;
      *(_DWORD *)&__p[16] = 0;
      __p[20] = 0;
      *(_QWORD *)&__p[32] = &__p[48];
      *(_QWORD *)&__p[40] = 0x400000000;
      v13 = sub_22E507114((_QWORD **)__p, (uint64_t)a2);
      if (*(_BYTE **)&__p[32] != &__p[48])
        free(*(void **)&__p[32]);
      if (v13)
      {
        v14 = sub_22EFFED0C(*((unsigned __int8 **)a2 + 2));
        v15 = sub_22EFFA9C0((uint64_t)v14, *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144));
        v9 = sub_22F10ACF8(*(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0));
        v10 = a3;
        v8 = v13;
        v11 = 0;
LABEL_5:
        v12 = 1;
LABEL_6:
        sub_22E619C24(v8, v9, v11, v12, a1, v10);
      }
      else
      {
LABEL_106:
        sub_22E4D8D7C((_QWORD *)a3);
      }
      return sub_22E48F084(v209);
    case 0xAD:
      v78 = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000);
      v79 = *(_QWORD *)(a1 + 2312);
      v80 = *(_BYTE *)(a1 + 2893);
      *(_BYTE *)(a1 + 2893) = 0;
      v81 = *(_QWORD *)(a1 + 2872);
      *(_QWORD *)(a1 + 2872) = v78;
      sub_22E4D8D7C(__p);
      if (*(_DWORD *)__p)
      {
        v82 = *(_OWORD *)&__p[112];
        *(_OWORD *)(a3 + 96) = *(_OWORD *)&__p[96];
        *(_OWORD *)(a3 + 112) = v82;
        *(_QWORD *)(a3 + 128) = *(_QWORD *)&__p[128];
        v83 = *(_OWORD *)&__p[48];
        *(_OWORD *)(a3 + 32) = *(_OWORD *)&__p[32];
        *(_OWORD *)(a3 + 48) = v83;
        v84 = *(_OWORD *)&__p[80];
        *(_OWORD *)(a3 + 64) = *(_OWORD *)&__p[64];
        *(_OWORD *)(a3 + 80) = v84;
        v85 = *(_OWORD *)&__p[16];
        *(_OWORD *)a3 = *(_OWORD *)__p;
        *(_OWORD *)(a3 + 16) = v85;
        *(_BYTE *)(a1 + 2893) = v80;
        sub_22E48B274(a1, v78, v79, 0, 0);
        *(_QWORD *)(a1 + 2872) = v81;
      }
      else
      {
        v206 = *(_OWORD *)&__p[16];
        v207 = *(_OWORD *)&__p[32];
        v208 = *(_QWORD *)&__p[48];
        *(_QWORD *)v224 = *(_QWORD *)&__p[8];
        *(_QWORD *)v235 = v224;
        *(_BYTE *)(a1 + 2893) = v80;
        sub_22E48B274(a1, v78, v79, v235, 1);
        *(_QWORD *)(a1 + 2872) = v81;
        v96 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
        *(_OWORD *)v213 = *(_OWORD *)&__p[88];
        *(_OWORD *)&v213[16] = *(_OWORD *)&__p[104];
        *(_QWORD *)(a3 + 84) = 2;
        *(_OWORD *)(a3 + 96) = 0u;
        *(_OWORD *)(a3 + 112) = 0u;
        *(_OWORD *)&v235[24] = v207;
        v117 = *(_QWORD *)v224;
        v100 = *(_QWORD *)&__p[64];
        v101 = *(_DWORD *)&__p[84];
        *(_QWORD *)&v213[32] = *(_QWORD *)&__p[120];
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        *(_DWORD *)(a3 + 32) = 0;
        *(_QWORD *)(a3 + 24) = 0;
        *(_QWORD *)(a3 + 40) = 0;
        *(_QWORD *)(a3 + 48) = 0;
        *(_QWORD *)(a3 + 64) = 0;
        *(_QWORD *)(a3 + 72) = 0;
        *(_DWORD *)a3 = 0;
        *(_QWORD *)v235 = v117;
        *(_QWORD *)&v235[40] = v208;
        *(_OWORD *)&v235[8] = v206;
        v97 = (__int128 *)v235;
        p_dst = (__int128 *)v213;
        v99 = a3;
LABEL_128:
        sub_22E3C113C(v99, v97, v100, v101, p_dst, v96);
      }
      return sub_22E48F084(v209);
    case 0xB4:
      sub_22F25EFB4((_QWORD *)a3, a1, (uint64_t)a2);
      return sub_22E48F084(v209);
    case 0xB9:
      v65 = a2[1];
      if ((v65 & 0x80000000) == 0)
      {
        v66 = v65 - 1;
        if ((_DWORD)v66)
        {
          v67 = (uint64_t *)(a2 + 6);
          v68 = 8 * v66;
          do
          {
            v69 = *v67;
            if (sub_22F253D04(*v67))
            {
              v70 = *(_QWORD *)(v69 + 16);
              memset(v213, 0, 28);
              *(_QWORD *)&v214 = 0;
              *(_OWORD *)&v213[32] = 0uLL;
              BYTE8(v214) &= 0xC0u;
              sub_22E4D79C0(v224, a1, v70, v213, 0);
              v71 = *(_QWORD *)(v69 + 8);
              sub_22E6281E0(*(_QWORD **)(a1 + 144), v71, (uint64_t)&v220);
              *(_OWORD *)__p = *(_OWORD *)v224;
              *(_OWORD *)&__p[16] = *(_OWORD *)&v224[16];
              *(_OWORD *)&__p[32] = v225;
              v72 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
              __dst = v220;
              v229 = v221;
              *(_QWORD *)&v230 = v222;
              memset(&v235[8], 0, 28);
              *(_QWORD *)&v235[40] = 0;
              *(_QWORD *)&v235[48] = 0;
              v236 = 0uLL;
              *(_QWORD *)((char *)&v237 + 4) = 2;
              *(_DWORD *)v235 = 0;
              v238 = 0u;
              v239 = 0u;
              sub_22E3C113C((uint64_t)v235, (__int128 *)__p, v71, 2, &__dst, v72);
              *(_QWORD *)__p = v69;
              *(_OWORD *)&__p[104] = v238;
              *(_OWORD *)&__p[120] = v239;
              v234 = v240;
              *(_OWORD *)&__p[40] = *(_OWORD *)&v235[32];
              *(_OWORD *)&__p[56] = *(_OWORD *)&v235[48];
              *(_OWORD *)&__p[72] = v236;
              *(_OWORD *)&__p[88] = v237;
              *(_OWORD *)&__p[8] = *(_OWORD *)v235;
              *(_OWORD *)&__p[24] = *(_OWORD *)&v235[16];
              sub_22F253D5C(a1 + 4064, __p, (uint64_t)&__p[8], (uint64_t)&__dst);
            }
            else
            {
              sub_22F253B0C(a1, v69, *(_QWORD *)(v69 + 16), (uint64_t)__p);
            }
            ++v67;
            v68 -= 8;
          }
          while (v68);
        }
      }
      sub_22E4D8D7C((_QWORD *)a3);
      v73 = a2[1];
      if ((v73 & 0x80000000) != 0)
      {
        v74 = (v73 & 0x7FFFFFFF) - 1;
        if ((_DWORD)v74)
        {
          v75 = (uint64_t *)(a2 + 6);
          v76 = 8 * v74;
          do
          {
            v77 = *v75++;
            sub_22F260F50(a1, v77);
            v76 -= 8;
          }
          while (v76);
        }
      }
      return sub_22E48F084(v209);
    case 0xBA:
      sub_22E4DBA2C(a3, a1, (uint64_t)a2);
      return sub_22E48F084(v209);
    case 0xBB:
      sub_22E4D8D7C(__p);
      v141 = (unsigned __int8 *)*((_QWORD *)a2 + 3);
      *(_QWORD *)v235 = a1;
      *(_QWORD *)&v235[8] = a1 + 272;
      v235[16] = 0;
      *(_QWORD *)&v235[24] = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
      v142 = (llvm::Type **)sub_22E50E974((uint64_t *)v235, v141);
      v143 = (unsigned __int8 *)*((_QWORD *)a2 + 4);
      *(_QWORD *)v235 = a1;
      *(_QWORD *)&v235[8] = a1 + 272;
      v235[16] = 0;
      *(_QWORD *)&v235[24] = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
      v144 = sub_22E50E974((uint64_t *)v235, v143);
      ScalarSizeInBits = (llvm::LLVMContext *)llvm::Type::getScalarSizeInBits(*v142);
      v146 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 2) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v146)
        v147 = *(_BYTE *)(v146 + 16) == 29;
      else
        v147 = 0;
      if (!v147)
        sub_22F10CF48(v146);
      llvm::Type::getIntNTy(*(llvm::Type **)(a1 + 336), ScalarSizeInBits);
      v148 = llvm::ConstantInt::get();
      *(_WORD *)&v213[32] = 257;
      v149 = sub_22E3BDEA8(a1 + 272, (uint64_t)v144, v148, (uint64_t)v213, 0, 0);
      LOWORD(v225) = 257;
      v150 = (*(uint64_t (**)(_QWORD, llvm::Instruction *, llvm::Type **, _QWORD, _QWORD))(**(_QWORD **)(a1 + 344) + 16))(*(_QWORD *)(a1 + 344), v149, v142, 0, 0);
      if (!v150)
      {
        *(_WORD *)&v235[32] = 257;
        v151 = llvm::BinaryOperator::Create();
        v150 = sub_22E3C12C8((uint64_t *)(a1 + 272), v151, (uint64_t)v224);
      }
      v152 = *(_QWORD *)&__p[8];
      if (*(_QWORD *)&__p[8])
        v153 = *(_QWORD *)&__p[16];
      else
        v153 = 0;
      if (*(_QWORD *)&__p[8] && *(_QWORD *)&__p[24])
      {
        v154 = __clz(*(unint64_t *)&__p[24]) ^ 0x3F;
        v152 = *(_QWORD *)&__p[8] & 0xFFFFFFFFFFFFFFF8 | (v154 >> 3);
        v153 = v153 & 0xFFFFFFFFFFFFFFF8 | v154 & 7;
      }
      v155 = sub_22E4EBBB0(v152, v153, a1, 1);
      v157 = 0;
      v158 = v155 & 0xFFFFFFFFFFFFFFF8;
      if (v155 <= 7)
        v158 = 0;
      v159 = v156 & 0xFFFFFFFFFFFFFFF8;
      if (v155 <= 7)
        v159 = 0;
      *(_QWORD *)v235 = v158;
      *(_QWORD *)&v235[8] = v159;
      if (v155 >= 8)
        v157 = 1 << (v156 & 7 | (8 * (v155 & 7)));
      *(_QWORD *)&v235[16] = v157;
      *(_DWORD *)&v235[24] = 0;
      *(_OWORD *)&v235[32] = 0uLL;
      v160 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 8);
      *(_DWORD *)v213 = 0;
      memset(&v213[8], 0, 32);
      sub_22F260568(a3, v235, v150, v160, *(int *)&__p[84], (uint64_t)v213);
      return sub_22E48F084(v209);
    case 0xBC:
      v39 = sub_22E4E685C(a1, (uint64_t)a2);
      v40 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      if (v39)
      {
        v41 = v39;
        sub_22E4D89CC(a1);
        v42 = a3;
        v43 = a1;
        v44 = v41;
LABEL_74:
        sub_22E4E2474(v43, v44, v42);
        return sub_22E48F084(v209);
      }
      if ((*((_BYTE *)a2 + 2) & 4) == 0)
      {
        sub_22E4E0888(a1, *((unsigned __int8 **)a2 + 2), 3u, (uint64_t)__p);
LABEL_227:
        v164 = __p[80];
        *(_WORD *)v213 = *(_WORD *)&__p[81];
        v213[2] = __p[83];
        v165 = *((_QWORD *)a2 + 3);
        if (!v165 || (*(_DWORD *)(v165 + 28) & 0x7Fu) - 52 < 0xFFFFFFFD)
        {
          if ((*(_DWORD *)(v165 + 28) & 0x7Eu) - 52 >= 6)
            v169 = 0;
          else
            v169 = *((_QWORD *)a2 + 3);
          if (v169)
          {
            if (sub_22E462B18(v169))
              v169 = v169 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(v169) + 96) & 0x80) == 0);
            sub_22E4EA21C(a3, a1, (uint64_t)a2, v169, 0);
          }
          return sub_22E48F084(v209);
        }
        *(_OWORD *)&v235[8] = *(_OWORD *)&__p[8];
        *(_QWORD *)v235 = *(_QWORD *)__p;
        *(_QWORD *)&v235[24] = *(_QWORD *)&__p[24];
        *(_QWORD *)&v235[32] = *(_QWORD *)&__p[32];
        *(_OWORD *)&v235[40] = *(_OWORD *)&__p[40];
        *(_QWORD *)&v235[56] = *(_QWORD *)&__p[56];
        v236 = *(_OWORD *)&__p[64];
        LOBYTE(v237) = __p[80];
        *(_WORD *)((char *)&v237 + 1) = *(_WORD *)v213;
        BYTE3(v237) = v213[2];
        *(_QWORD *)((char *)&v237 + 4) = *(_QWORD *)&__p[84];
        HIDWORD(v237) = *(_DWORD *)&__p[92];
        v238 = *(_OWORD *)&__p[96];
        v239 = *(_OWORD *)&__p[112];
        v240 = *(_QWORD *)&__p[128];
        sub_22E4DD05C(a1, (uint64_t)v235, v165, a3);
        sub_22E4E9E9C(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), (unsigned __int8 *)a2, a3, 0);
        v166 = *(_QWORD *)(a1 + 144);
        if (!*(_DWORD *)(*(_QWORD *)(v166 + 152) + 72))
          return sub_22E48F084(v209);
        while (1)
        {
          v167 = *v40;
          if (v167 == 133)
          {
            if (!sub_22E5B89F8(*(_QWORD *)(v166 + 808), v165))
            {
LABEL_248:
              if ((v164 & 0x40) == 0)
                return sub_22E48F084(v209);
            }
            *(_BYTE *)(a3 + 80) |= 0x40u;
            return sub_22E48F084(v209);
          }
          if (v167 == 148)
            goto LABEL_248;
          if ((v167 + 102) >= 0xF5u)
            goto LABEL_236;
          if (v167 != 214)
            break;
          v168 = (unsigned __int8 **)(v40 + 24);
LABEL_238:
          v40 = *v168;
        }
        if (v167 != 233 || (*(_DWORD *)v40 & 0x7C0000) != 0x300000)
          goto LABEL_248;
LABEL_236:
        v168 = (unsigned __int8 **)(v40 + 16);
        goto LABEL_238;
      }
      v211 = 0;
      v212 = 0;
      v210 = 2;
      *(_DWORD *)v232 = 0;
      memset(&v232[8], 0, 32);
      sub_22E4DFD40(v224, a1);
      if (v212)
      {
        v192 = *(_OWORD *)v224;
        v193 = (uint64_t *)llvm::ConstantInt::get();
        *(_WORD *)&__p[32] = 257;
        v205 = a1 + 272;
        v194 = (uint64_t *)sub_22E42129C((uint64_t *)(a1 + 272), *((uint64_t *)&v192 + 1), (uint64_t *)v192, v193, (uint64_t)__p);
        v195 = v212;
        if (v211)
          v196 = v211;
        else
          v196 = (uint64_t *)v192;
        v197 = (uint64_t *)sub_22F25E214((_QWORD *)a1, v196);
        v198 = sub_22F25E214((_QWORD *)a1, (uint64_t *)v192);
        v199 = (uint64_t *)sub_22F25E214((_QWORD *)a1, v194);
        v200 = sub_22F25E214((_QWORD *)a1, v195);
        if (v199 != (uint64_t *)v200)
        {
          *(_WORD *)&__p[32] = 257;
          v203 = sub_22E3C18F4(v205, 37, v199, v200, (uint64_t)__p);
          v204 = v203;
          if (v203 && *(unsigned __int8 *)(v203 + 16) >= 0x1Cu)
            llvm::Instruction::addAnnotationMetadata();
          sub_22F25E298(a1, v204, 2);
        }
        if (v197 != (uint64_t *)v198)
        {
          *(_WORD *)&__p[32] = 257;
          v201 = sub_22E3C18F4(v205, 37, v197, v198, (uint64_t)__p);
          v202 = v201;
          if (v201 && *(unsigned __int8 *)(v201 + 16) >= 0x1Cu)
            llvm::Instruction::addAnnotationMetadata();
          sub_22F25E298(a1, v202, 3);
        }
      }
      v118 = sub_22F10ACF8(*(_QWORD *)(*((_QWORD *)v40 + 1) & 0xFFFFFFFFFFFFFFF0));
      v119 = 33587200;
      for (i = v40; ; i = *v122)
      {
        v121 = *(unsigned __int8 *)i;
        if (v121 == 133)
        {
LABEL_226:
          v162 = a2[10];
          __dst = *(_OWORD *)v224;
          v229 = *(_OWORD *)&v224[16];
          v230 = v225;
          sub_22E484AD4(a1, 3u, v162, (uint64_t)&__dst, v118, 0, v119, 0, 0);
          *(_OWORD *)v213 = *(_OWORD *)v224;
          *(_OWORD *)&v213[16] = *(_OWORD *)&v224[16];
          *(_OWORD *)&v213[32] = v225;
          v220 = *(_OWORD *)v232;
          v221 = *(_OWORD *)&v232[16];
          *(_QWORD *)&v222 = *(_QWORD *)&v232[32];
          v163 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
          memset(&__p[8], 0, 28);
          *(_QWORD *)&__p[48] = 0;
          *(_QWORD *)&__p[40] = 0;
          *(_OWORD *)&__p[64] = 0uLL;
          *(_QWORD *)&__p[84] = 2;
          *(_DWORD *)__p = 0;
          memset(&__p[96], 0, 32);
          sub_22E3C113C((uint64_t)__p, (__int128 *)v213, v118, v210, &v220, v163);
          goto LABEL_227;
        }
        if (v121 == 148)
          goto LABEL_218;
        if ((v121 + 102) >= 0xF5u)
          goto LABEL_137;
        if (v121 != 214)
          break;
        v122 = (_DWORD **)(i + 6);
LABEL_139:
        ;
      }
      if (v121 != 233 || (*i & 0x7C0000) != 0x300000)
      {
LABEL_218:
        if (*v40 == 161
          || ((v224[24] & 3) == 0 ? (v161 = *(_QWORD *)v224 == 0) : (v161 = 1),
              !v161 && *(_BYTE *)(*(_QWORD *)v224 + 16) == 19))
        {
          v119 = 0x2000000;
        }
        else
        {
          v119 = 0;
        }
        goto LABEL_226;
      }
LABEL_137:
      v122 = (_DWORD **)(i + 4);
      goto LABEL_139;
    case 0xBF:
      sub_22E4E3DF8(a1, (uint64_t)a2, 1, a3);
      return sub_22E48F084(v209);
    case 0xC4:
      sub_22F25EF0C(a3, a1, (uint64_t)a2);
      return sub_22E48F084(v209);
    case 0xC6:
      sub_22E51186C(a1, (uint64_t)a2, a3);
      return sub_22E48F084(v209);
    case 0xC7:
      sub_22F25F56C(a3, a1, (uint64_t)a2);
      return sub_22E48F084(v209);
    case 0xC8:
      sub_22F25F4A0(a3, a1, (uint64_t)a2);
      return sub_22E48F084(v209);
    case 0xCF:
      sub_22F25EDAC(a3, a1, (uint64_t)a2);
      return sub_22E48F084(v209);
    case 0xD2:
      sub_22E4ECAD8(a1, (uint64_t)a2, a3);
      return sub_22E48F084(v209);
    case 0xD8:
      if ((*((_BYTE *)a2 + 2) & 0x40) != 0)
        v20 = (_DWORD *)*((_QWORD *)a2 + 2);
      else
        v20 = 0;
      Name = (const std::string::value_type *)llvm::Value::getName(*(llvm::Value **)(a1 + 1624));
      v88 = Name;
      if (v87)
      {
        if (*Name == 1)
        {
          v88 = Name + 1;
          v89 = v87 - 1;
        }
        else
        {
          v89 = v87;
        }
      }
      else
      {
        v89 = 0;
      }
      v103 = ((unint64_t)*a2 >> 18) & 0xF;
      v104 = qword_22F457660[v103];
      v105 = off_24FA63C70[v103];
      memset(v224, 0, 24);
      std::string::reserve((std::string *)v224, v89 + v104 + 1);
      std::string::append((std::string *)v224, v105, v104);
      std::string::append((std::string *)v224, ".", 1uLL);
      std::string::append((std::string *)v224, v88, v89);
      v106 = *(_QWORD *)(a1 + 1600);
      if (v106 && (*(_DWORD *)(v106 + 28) & 0x7F) == 1)
      {
        v107 = v20[1];
        v108 = ((*v20 >> 21) & 7u) * v20[4];
        if (v108 >= 0x17)
        {
          if ((v108 | 7) == 0x17)
            v123 = (v108 & 0xFFFFFFF8) + 8;
          else
            v123 = v108 | 7;
          v124 = v20[1];
          v125 = (__int128 *)operator new(v123 + 1);
          v107 = v124;
          v109 = v125;
          *((_QWORD *)&__dst + 1) = v108;
          *(_QWORD *)&v229 = v123 - 0x7FFFFFFFFFFFFFFFLL;
          *(_QWORD *)&__dst = v125;
        }
        else
        {
          BYTE7(v229) = ((*v20 >> 21) & 7) * *((_BYTE *)v20 + 16);
          v109 = &__dst;
          if (!(_DWORD)v108)
          {
LABEL_145:
            *((_BYTE *)v109 + v108) = 0;
            v126 = BYTE7(v229) & 0x7F;
            if (SBYTE7(v229) < 0)
              v126 = *((_QWORD *)&__dst + 1);
            v127 = *(_QWORD **)(a1 + 144);
            if (v126)
            {
              v170 = *(_QWORD *)(v127[28] + 16);
              v171 = v170 + 56;
              v172 = *(unsigned int *)(v170 + 64);
              *(_QWORD *)v235 = v106;
              *(_QWORD *)&v235[8] = v172;
              sub_22F2611B4(v171, v235, &v235[8], (uint64_t)__p);
              v173 = *(_DWORD *)(*(_QWORD *)__p + 8);
              if (v173)
              {
                *(_WORD *)&__p[32] = 264;
                *(_DWORD *)__p = v173 + 1;
                llvm::Twine::str((llvm::Twine *)__p);
                v174 = std::string::insert((std::string *)v213, 0, "_");
                v175 = v174->__r_.__value_.__r.__words[2];
                *(_OWORD *)v235 = *(_OWORD *)&v174->__r_.__value_.__l.__data_;
                *(_QWORD *)&v235[16] = v175;
                v174->__r_.__value_.__l.__size_ = 0;
                v174->__r_.__value_.__r.__words[2] = 0;
                v174->__r_.__value_.__r.__words[0] = 0;
                if (v235[23] >= 0)
                  v176 = v235;
                else
                  v176 = *(const std::string::value_type **)v235;
                if (v235[23] >= 0)
                  v177 = v235[23] & 0x7F;
                else
                  v177 = *(_QWORD *)&v235[8];
                std::string::append((std::string *)&__dst, v176, v177);
                if ((v235[23] & 0x80000000) != 0)
                  operator delete(*(void **)v235);
                if ((v213[23] & 0x80000000) != 0)
                  operator delete(*(void **)v213);
              }
              if (v224[23] >= 0)
                v178 = v224;
              else
                v178 = *(const char **)v224;
              v179 = sub_22F29BB8C(*(_QWORD **)(a1 + 144), (uint64_t)&__dst, v178);
              v181 = 0;
              if (v179 <= 7)
                v182 = 0;
              else
                v182 = v179 & 0xFFFFFFFFFFFFFFF8;
              if (v179 <= 7)
                v183 = 0;
              else
                v183 = v180 & 0xFFFFFFFFFFFFFFF8;
              if (v179 >= 8)
                v181 = 1 << (v180 & 7 | (8 * (v179 & 7)));
              v138 = *((_QWORD *)a2 + 1);
              sub_22E6281E0(*(_QWORD **)(a1 + 144), v138, (uint64_t)v213);
              *(_QWORD *)__p = v182;
              *(_QWORD *)&__p[8] = v183;
              *(_QWORD *)&__p[16] = v181;
              goto LABEL_170;
            }
            if (v89 >= 0x7FFFFFFFFFFFFFF8)
              abort();
            if (v89 >= 0x17)
            {
              v129 = (v89 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v89 | 7) != 0x17)
                v129 = v89 | 7;
              v130 = v129 + 1;
              v128 = operator new(v129 + 1);
              *(_QWORD *)&__p[16] = v130 | 0x8000000000000000;
              *(_QWORD *)__p = v128;
              *(_QWORD *)&__p[8] = v89;
            }
            else
            {
              __p[23] = v89;
              v128 = __p;
              if (!v89)
                goto LABEL_156;
            }
            memmove(v128, v88, v89);
LABEL_156:
            v128[v89] = 0;
            if (v224[23] >= 0)
              v131 = v224;
            else
              v131 = *(const char **)v224;
            v132 = sub_22F29BB8C(v127, (uint64_t)__p, v131);
            v134 = v133;
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
            v135 = 0;
            if (v132 <= 7)
              v136 = 0;
            else
              v136 = v132 & 0xFFFFFFFFFFFFFFF8;
            if (v132 <= 7)
              v137 = 0;
            else
              v137 = v134 & 0xFFFFFFFFFFFFFFF8;
            if (v132 >= 8)
              v135 = 1 << (v134 & 7 | (8 * (v132 & 7)));
            v138 = *((_QWORD *)a2 + 1);
            sub_22E6281E0(*(_QWORD **)(a1 + 144), v138, (uint64_t)v213);
            *(_QWORD *)__p = v136;
            *(_QWORD *)&__p[8] = v137;
            *(_QWORD *)&__p[16] = v135;
LABEL_170:
            *(_DWORD *)&__p[24] = 0;
            *(_QWORD *)&__p[40] = 0;
            *(_QWORD *)&__p[32] = 0;
            v139 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
            *(_OWORD *)v235 = *(_OWORD *)v213;
            *(_OWORD *)&v235[16] = *(_OWORD *)&v213[16];
            *(_QWORD *)&v235[32] = *(_QWORD *)&v213[32];
            *(_QWORD *)(a3 + 16) = 0;
            *(_QWORD *)(a3 + 24) = 0;
            *(_QWORD *)(a3 + 8) = 0;
            *(_DWORD *)(a3 + 32) = 0;
            *(_QWORD *)(a3 + 40) = 0;
            *(_QWORD *)(a3 + 48) = 0;
            *(_QWORD *)(a3 + 64) = 0;
            *(_QWORD *)(a3 + 72) = 0;
            *(_QWORD *)(a3 + 84) = 2;
            *(_DWORD *)a3 = 0;
            *(_OWORD *)(a3 + 96) = 0u;
            *(_OWORD *)(a3 + 112) = 0u;
            sub_22E3C113C(a3, (__int128 *)__p, v138, 0, (__int128 *)v235, v139);
            if (SBYTE7(v229) < 0)
              operator delete((void *)__dst);
            goto LABEL_172;
          }
        }
        memmove(v109, &v20[v107 + 5], v108);
        goto LABEL_145;
      }
      v110 = sub_22E6363A4(*(_QWORD *)(a1 + 144), (uint64_t)v20);
      v112 = 0;
      if (v110 <= 7)
        v113 = 0;
      else
        v113 = v110 & 0xFFFFFFFFFFFFFFF8;
      if (v110 <= 7)
        v114 = 0;
      else
        v114 = v111 & 0xFFFFFFFFFFFFFFF8;
      if (v110 >= 8)
        v112 = 1 << (v111 & 7 | (8 * (v110 & 7)));
      v115 = *((_QWORD *)a2 + 1);
      sub_22E6281E0(*(_QWORD **)(a1 + 144), v115, (uint64_t)v213);
      *(_QWORD *)__p = v113;
      *(_QWORD *)&__p[8] = v114;
      *(_QWORD *)&__p[16] = v112;
      *(_DWORD *)&__p[24] = 0;
      *(_QWORD *)&__p[40] = 0;
      *(_QWORD *)&__p[32] = 0;
      v116 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
      *(_OWORD *)v235 = *(_OWORD *)v213;
      *(_OWORD *)&v235[16] = *(_OWORD *)&v213[16];
      *(_QWORD *)&v235[32] = *(_QWORD *)&v213[32];
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_DWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      *(_QWORD *)(a3 + 48) = 0;
      *(_QWORD *)(a3 + 64) = 0;
      *(_QWORD *)(a3 + 72) = 0;
      *(_QWORD *)(a3 + 84) = 2;
      *(_DWORD *)a3 = 0;
      *(_OWORD *)(a3 + 96) = 0u;
      *(_OWORD *)(a3 + 112) = 0u;
      sub_22E3C113C(a3, (__int128 *)__p, v115, 0, (__int128 *)v235, v116);
LABEL_172:
      if ((v224[23] & 0x80000000) != 0)
        operator delete(*(void **)v224);
      return sub_22E48F084(v209);
    case 0xD9:
      memset(v235, 0, 28);
      memset(&v235[32], 0, 25);
      sub_22E4EE6C8(a1, a2, 1, (__int128 *)v235, (uint64_t)__p);
LABEL_16:
      v16 = *(_OWORD *)&__p[112];
      *(_OWORD *)(a3 + 96) = *(_OWORD *)&__p[96];
      *(_OWORD *)(a3 + 112) = v16;
      *(_QWORD *)(a3 + 128) = *(_QWORD *)&__p[128];
      v17 = *(_OWORD *)&__p[48];
      *(_OWORD *)(a3 + 32) = *(_OWORD *)&__p[32];
      *(_OWORD *)(a3 + 48) = v17;
      v18 = *(_OWORD *)&__p[80];
      *(_OWORD *)(a3 + 64) = *(_OWORD *)&__p[64];
      *(_OWORD *)(a3 + 80) = v18;
      v19 = *(_OWORD *)&__p[16];
      *(_OWORD *)a3 = *(_OWORD *)__p;
      *(_OWORD *)(a3 + 16) = v19;
      return sub_22E48F084(v209);
    case 0xE0:
      sub_22F25F6CC(a3, a1, (uint64_t)a2);
      return sub_22E48F084(v209);
    case 0xE1:
      sub_22F25EE58(a3, a1, (uint64_t)a2);
      return sub_22E48F084(v209);
    case 0xE9:
      sub_22E4E385C((_QWORD *)a3, a1, a2);
      return sub_22E48F084(v209);
    default:
LABEL_189:
      sub_22F25ED04(a3, a1, (uint64_t)a2, "l-value expression");
      return sub_22E48F084(v209);
  }
}

void sub_22E4DA890(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4, int a5)
{
  uint64_t v10;
  int v11;
  __int128 v12;
  char v13;
  llvm::Value *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  _OWORD v20[8];
  uint64_t v21;
  _QWORD v22[6];
  char v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _OWORD v33[3];
  uint64_t v34;
  char v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  _OWORD v48[2];
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;

  v10 = *(_QWORD *)(a2 + 8);
  v11 = sub_22E619D68(v10);
  if (v11)
  {
    if (v11 == 2)
    {
      v12 = a3[1];
      v33[0] = *a3;
      v33[1] = v12;
      v33[2] = a3[2];
      v34 = a4;
      if (a5)
        v13 = 0;
      else
        v13 = 8;
      v35 = v13 | a5 | 0x10;
      sub_22E4EF100(a1, a2, v33);
    }
    else
    {
      v18 = a3[1];
      v56 = *a3;
      v57 = v18;
      v58 = a3[2];
      sub_22E6281E0(*(_QWORD **)(a1 + 144), v10, (uint64_t)&v53);
      v24 = v56;
      v25 = v57;
      v26 = v58;
      v19 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
      v50 = v53;
      v51 = v54;
      *(_QWORD *)&v52 = v55;
      v38 = 0;
      v39 = 0;
      v40 = 0;
      v37 = 0;
      v41 = 0;
      v42 = 0;
      v43 = 0;
      v44 = 0;
      v45 = 2;
      v36 = 0;
      v46 = 0u;
      v47 = 0u;
      sub_22E3C113C((uint64_t)&v36, &v24, v10, 2, &v50, v19);
      sub_22F262998(a1, a2, (uint64_t)&v36, 0);
    }
  }
  else
  {
    *(_QWORD *)&v24 = a1;
    *((_QWORD *)&v24 + 1) = a1 + 272;
    LOBYTE(v25) = 0;
    *((_QWORD *)&v25 + 1) = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
    v14 = sub_22E50E974((uint64_t *)&v24, (unsigned __int8 *)a2);
    v15 = a3[1];
    v50 = *a3;
    v51 = v15;
    v52 = a3[2];
    v16 = *(_QWORD *)(a2 + 8);
    sub_22E6281E0(*(_QWORD **)(a1 + 144), v16, (uint64_t)v48);
    v56 = v50;
    v57 = v51;
    v58 = v52;
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
    v53 = v48[0];
    v54 = v48[1];
    v55 = v49;
    v25 = 0uLL;
    LODWORD(v26) = 0;
    *((_QWORD *)&v24 + 1) = 0;
    *((_QWORD *)&v26 + 1) = 0;
    *(_QWORD *)&v27 = 0;
    v28 = 0uLL;
    *(_QWORD *)((char *)&v29 + 4) = 2;
    LODWORD(v24) = 0;
    v30 = 0u;
    v31 = 0u;
    sub_22E3C113C((uint64_t)&v24, &v56, v16, 2, &v53, v17);
    v22[0] = v14;
    v22[1] = 0;
    v23 = 0;
    v20[6] = v30;
    v20[7] = v31;
    v21 = v32;
    v20[2] = v26;
    v20[3] = v27;
    v20[4] = v28;
    v20[5] = v29;
    v20[0] = v24;
    v20[1] = v25;
    sub_22E4DAAE0(a1, (uint64_t)v22, (uint64_t)v20, 0);
  }
}

void sub_22E4DAAE0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v6;
  unsigned int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(void);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  llvm::GetElementPtrInst *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  __int128 *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  llvm::Constant *v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  llvm::LLVMContext *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t AggregateElement;
  unsigned int *v60;
  uint64_t v61;
  uint64_t v62;
  llvm::Type **v63;
  __int128 v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  unsigned int v69;
  __int128 v70;
  unsigned int v71;
  llvm::Type **v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  llvm::Type **v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int128 *v88;
  _OWORD *v89;
  __int128 v90;
  uint64_t v91;
  unsigned int *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  unsigned int *v109;
  __int128 *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  BOOL v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  llvm::Instruction *v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int v136;
  int v137;
  uint64_t v138;
  _QWORD *v139;
  int v140;
  unsigned int v141;
  int v142;
  int v143;
  uint64_t v144;
  unsigned int *v145;
  uint64_t v146;
  uint64_t v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  uint64_t v152;
  unsigned int v153;
  llvm::Constant *v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _OWORD v160[8];
  uint64_t v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  _OWORD v165[3];
  _OWORD v166[6];
  _OWORD v167[3];
  _OWORD v168[8];
  uint64_t v169;
  _OWORD v170[3];
  _OWORD v171[8];
  uint64_t v172;
  _OWORD v173[3];
  uint64_t v174;
  _OWORD v175[3];
  _OWORD v176[3];
  _OWORD v177[8];
  uint64_t v178;
  _OWORD v179[3];
  uint64_t v180;
  __int128 v181;
  __int128 v182;
  _OWORD v183[3];
  _OWORD v184[3];
  _OWORD v185[3];
  _OWORD v186[3];
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  _DWORD *v196;
  uint64_t v197;
  _WORD v198[12];
  uint64_t v199;

  v6 = a1;
  v199 = *MEMORY[0x24BDAC8D0];
  switch(*(_DWORD *)a3)
  {
    case 0:
      v8 = *(_DWORD *)(a3 + 76);
      if ((v8 & 0xC) != 0)
      {
        v120 = *(_QWORD *)a2;
        v121 = *(_QWORD *)(a3 + 64);
        v122 = *(_OWORD *)(a3 + 24);
        v170[0] = *(_OWORD *)(a3 + 8);
        v170[1] = v122;
        v170[2] = *(_OWORD *)(a3 + 40);
        *(_QWORD *)a2 = sub_22F289FF0(a1, v8, v120, v121, v170, 0);
        *(_QWORD *)(a2 + 8) = 0;
        *(_BYTE *)(a2 + 48) = 0;
      }
      v9 = (*(_DWORD *)(a3 + 72) >> 6) & 7;
      switch(v9)
      {
        case 3:
          v89 = (_OWORD *)(a3 + 8);
          v90 = *(_OWORD *)(a3 + 24);
          if (a4)
          {
            v167[0] = *v89;
            v167[1] = v90;
            v167[2] = *(_OWORD *)(a3 + 40);
            sub_22E5644CC((_QWORD *)v6, v167, *(_QWORD *)a2);
          }
          else
          {
            v190 = *v89;
            v191 = v90;
            v192 = *(_OWORD *)(a3 + 40);
            sub_22E56435C((_QWORD *)v6, (uint64_t)&v190, *(uint64_t **)a2, (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v6 + 144) + 832) + 336), 230, 1);
          }
          return;
        case 4:
          v147 = sub_22F2728A8((_QWORD *)v6, *(_QWORD *)(a3 + 64), *(_QWORD *)a2);
          break;
        case 2:
          if (!a4)
          {
            v148 = *(_OWORD *)(a3 + 112);
            v168[6] = *(_OWORD *)(a3 + 96);
            v168[7] = v148;
            v169 = *(_QWORD *)(a3 + 128);
            v149 = *(_OWORD *)(a3 + 48);
            v168[2] = *(_OWORD *)(a3 + 32);
            v168[3] = v149;
            v150 = *(_OWORD *)(a3 + 80);
            v168[4] = *(_OWORD *)(a3 + 64);
            v168[5] = v150;
            v151 = *(_OWORD *)(a3 + 16);
            v168[0] = *(_OWORD *)a3;
            v168[1] = v151;
            sub_22F2734E0(v6, (uint64_t)v168, *(_QWORD *)a2, 1);
            return;
          }
          v147 = (uint64_t)sub_22F2731AC((_QWORD *)v6, *(_QWORD *)(a3 + 64), *(_QWORD *)a2);
          break;
        default:
          goto LABEL_7;
      }
      *(_QWORD *)a2 = v147;
      *(_QWORD *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 48) = 0;
LABEL_7:
      if ((*(_DWORD *)(a3 + 72) & 0x30) == 0x10)
      {
        v11 = *(_QWORD *)a2;
        if ((*(_BYTE *)(a3 + 80) & 4) == 0)
        {
          v97 = *(_OWORD *)(a3 + 24);
          v190 = *(_OWORD *)(a3 + 8);
          v191 = v97;
          v192 = *(_OWORD *)(a3 + 40);
          v98 = *(_QWORD *)(v6 + 144);
          v99 = *(_QWORD *)(v98 + 784);
          if (!v99)
          {
            sub_22F298C2C(*(_QWORD **)(v6 + 144));
            v99 = *(_QWORD *)(v98 + 784);
          }
          v166[3] = v190;
          v166[4] = v191;
          v166[5] = v192;
          v15 = *(void (**)(void))(*(_QWORD *)v99 + 304);
          goto LABEL_61;
        }
        goto LABEL_63;
      }
      if ((*(_DWORD *)(a3 + 72) & 0x30) != 0x20)
      {
        v11 = *(_QWORD *)a2;
        goto LABEL_63;
      }
      v10 = *(unsigned __int8 *)(a3 + 80);
      v11 = *(_QWORD *)a2;
      if ((v10 & 4) != 0)
      {
LABEL_63:
        v100 = *(_OWORD *)(a3 + 112);
        v160[6] = *(_OWORD *)(a3 + 96);
        v160[7] = v100;
        v161 = *(_QWORD *)(a3 + 128);
        v101 = *(_OWORD *)(a3 + 48);
        v160[2] = *(_OWORD *)(a3 + 32);
        v160[3] = v101;
        v102 = *(_OWORD *)(a3 + 80);
        v160[4] = *(_OWORD *)(a3 + 64);
        v160[5] = v102;
        v103 = *(_OWORD *)(a3 + 16);
        v160[0] = *(_OWORD *)a3;
        v160[1] = v103;
        sub_22E4E87FC(v6, v11, (uint64_t)v160, a4);
        return;
      }
      v12 = *(_OWORD *)(a3 + 24);
      v190 = *(_OWORD *)(a3 + 8);
      v191 = v12;
      v192 = *(_OWORD *)(a3 + 40);
      if ((v10 & 1) != 0)
      {
        v125 = *(_QWORD *)(v6 + 88);
        sub_22E4DFD40(v6, *(unsigned __int8 **)(a3 + 128), 0, 0, 0, 0, (uint64_t)&v187);
        if ((BYTE8(v188) & 3) != 0)
          v126 = sub_22F28ABCC(&v187, v6);
        else
          v126 = v187;
        *(_QWORD *)&v193 = "sub.ptr.rhs.cast";
        LOWORD(v195) = 259;
        v127 = sub_22E3C1740((uint64_t *)(v6 + 272), 47, v126, v125, (uint64_t)&v193);
        if ((BYTE8(v191) & 3) != 0)
          v128 = sub_22F28ABCC(&v190, v6);
        else
          v128 = v190;
        *(_QWORD *)&v193 = "sub.ptr.lhs.cast";
        LOWORD(v195) = 259;
        v129 = sub_22E3C1740((uint64_t *)(v6 + 272), 47, v128, v125, (uint64_t)&v193);
        *(_QWORD *)&v193 = "ivar.offset";
        LOWORD(v195) = 259;
        v130 = sub_22E3E48CC(v6 + 272, v129, v127, (uint64_t)&v193, 0, 0);
        v131 = *(_QWORD *)(v6 + 144);
        v132 = *(_QWORD *)(v131 + 784);
        if (!v132)
        {
          sub_22F298C2C(*(_QWORD **)(v6 + 144));
          v132 = *(_QWORD *)(v131 + 784);
        }
        v166[0] = v187;
        v166[1] = v188;
        v166[2] = v189;
        (*(void (**)(uint64_t, uint64_t, uint64_t, _OWORD *, llvm::Instruction *))(*(_QWORD *)v132 + 320))(v132, v6, v11, v166, v130);
      }
      else
      {
        v13 = *(_QWORD *)(v6 + 144);
        v14 = *(_QWORD *)(v13 + 784);
        if ((v10 & 8) == 0)
        {
          if (!v14)
          {
            sub_22F298C2C(*(_QWORD **)(v6 + 144));
            v14 = *(_QWORD *)(v13 + 784);
          }
          v162 = v190;
          v163 = v191;
          v164 = v192;
          v15 = *(void (**)(void))(*(_QWORD *)v14 + 328);
LABEL_61:
          v15();
          return;
        }
        if (!v14)
        {
          sub_22F298C2C(*(_QWORD **)(v6 + 144));
          v14 = *(_QWORD *)(v13 + 784);
          v10 = *(unsigned __int8 *)(a3 + 80);
        }
        v165[0] = v190;
        v165[1] = v191;
        v165[2] = v192;
        (*(void (**)(uint64_t, uint64_t, uint64_t, _OWORD *, _QWORD))(*(_QWORD *)v14 + 312))(v14, v6, v11, v165, (v10 >> 4) & 1);
      }
      return;
    case 1:
      v16 = sub_22E3E4B64(*(_QWORD *)(*(_QWORD *)(a3 + 64) & 0xFFFFFFFFFFFFFFF0));
      if (!v16
        || (*(_DWORD *)(v16 + 16) & 0x780000) != 0x80000
        || (v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 64) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0),
            *(_BYTE *)(v17 + 16) == 56)
        && ((v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)) != 0
          ? (v19 = (*(_DWORD *)(v18 + 16) & 0xFF800FF) == 87031819)
          : (v19 = 0),
            v19 && (*(_BYTE *)(*(_QWORD *)(v6 + 152) + *(_QWORD *)(**(_QWORD **)(v6 + 152) - 24) + 160) & 0x20) != 0))
      {
        v70 = *(_OWORD *)(a3 + 24);
        v184[0] = *(_OWORD *)(a3 + 8);
        v184[1] = v70;
        v184[2] = *(_OWORD *)(a3 + 40);
        v71 = *(_DWORD *)(a3 + 72);
        LOWORD(v192) = 257;
        v72 = (llvm::Type **)sub_22E4E7B2C(v6, v184, (v71 >> 2) & 1, (v71 >> 9) & 3, (uint64_t)&v190);
        v73 = sub_22E4E7BB4(v6, v72, *(_QWORD *)(a3 + 64));
        v74 = *(_QWORD *)a2;
        v75 = *(_QWORD *)(a3 + 56);
        *(_QWORD *)&v190 = "vecins";
        LOWORD(v192) = 259;
        v76 = sub_22E3ED5D4((uint64_t *)(v6 + 272), v73, v74, v75, (uint64_t)&v190);
        v30 = sub_22E4E7F50(v6, v76, *(_QWORD *)(a3 + 64));
        v77 = *(_OWORD *)(a3 + 24);
        v183[0] = *(_OWORD *)(a3 + 8);
        v183[1] = v77;
        v183[2] = *(_OWORD *)(a3 + 40);
        v78 = *(_DWORD *)(a3 + 72);
        v32 = (v78 >> 2) & 1;
        v33 = (v78 >> 9) & 3;
        v34 = v183;
      }
      else
      {
        v20 = *(_OWORD *)(a3 + 24);
        v190 = *(_OWORD *)(a3 + 8);
        v191 = v20;
        v192 = *(_OWORD *)(a3 + 40);
        v21 = *((_QWORD *)&v190 + 1);
        if (*(_BYTE *)(*((_QWORD *)&v190 + 1) + 8) == 16)
        {
          v22 = *(_OWORD *)(a3 + 24);
          v186[0] = *(_OWORD *)(a3 + 8);
          v186[1] = v22;
          v186[2] = *(_OWORD *)(a3 + 40);
          LOWORD(v189) = 257;
          sub_22E3C408C((uint64_t *)(v6 + 272), (uint64_t)v186, 0, (uint64_t)&v187, (uint64_t)&v190);
          v21 = *((_QWORD *)&v190 + 1);
        }
        if ((BYTE8(v191) & 3) != 0)
          v23 = (uint64_t *)sub_22F28ABCC(&v190, v6);
        else
          v23 = (uint64_t *)v190;
        v24 = llvm::ConstantInt::get();
        v25 = *(_QWORD *)(a3 + 56);
        *(_QWORD *)&v193 = v24;
        *((_QWORD *)&v193 + 1) = v25;
        LOWORD(v189) = 257;
        v26 = sub_22E486CB4((uint64_t *)(v6 + 272), v21, v23, (uint64_t **)&v193, 2, (uint64_t)&v187);
        v27 = **(_QWORD **)(*((_QWORD *)&v190 + 1) + 16);
        *(_QWORD *)&v190 = v26;
        *((_QWORD *)&v190 + 1) = v27;
        DWORD2(v191) = 0;
        v192 = 0uLL;
        v28 = *(_QWORD *)a2;
        v29 = sub_22E3E4B64(*(_QWORD *)(*(_QWORD *)(a3 + 64) & 0xFFFFFFFFFFFFFFF0));
        v30 = sub_22E4E7F50(v6, v28, *(_QWORD *)(v29 + 32));
        v185[0] = v190;
        v185[1] = v191;
        v185[2] = v192;
        v31 = *(_DWORD *)(a3 + 72);
        v32 = (v31 >> 2) & 1;
        v33 = (v31 >> 9) & 3;
        v34 = v185;
      }
      goto LABEL_53;
    case 3:
      v158 = *(_QWORD *)a2;
      v41 = *(_QWORD *)(a3 + 8);
      v40 = *(_QWORD *)(a3 + 16);
      v42 = *(_OWORD *)(a3 + 40);
      v181 = *(_OWORD *)(a3 + 24);
      v182 = v42;
      v43 = *(llvm::Constant **)(a3 + 56);
      v44 = *(_QWORD *)(a3 + 64);
      v45 = *(_DWORD *)(a3 + 72);
      v46 = sub_22E3E4B64(*(_QWORD *)(v44 & 0xFFFFFFFFFFFFFFF0));
      v48 = v46;
      if (*(_BYTE *)(v40 + 8) == 17)
      {
        if (v46)
        {
          v154 = v43;
          v156 = v40;
          v49 = v46;
          v50 = *(unsigned int *)(v46 + 20);
          if ((_DWORD)v50)
          {
            v51 = 0;
            v52 = (uint64_t *)(v6 + 272);
            v53 = (v45 >> 9) & 3;
            v54 = (v45 >> 2) & 1;
            do
            {
              llvm::Type::getInt32Ty(*(llvm::Type **)(v6 + 336), v47);
              v55 = llvm::ConstantInt::get();
              LOWORD(v192) = 257;
              v56 = sub_22E420480(v52, v158, v55, (uint64_t)&v190);
              v57 = v6;
              v58 = sub_22E4E7F50(v6, v56, *(_QWORD *)(v49 + 32));
              AggregateElement = llvm::Constant::getAggregateElement(v154);
              v60 = (unsigned int *)(AggregateElement + 24);
              if (*(_DWORD *)(AggregateElement + 32) >= 0x41u)
                v60 = *(unsigned int **)v60;
              v61 = *v60;
              *(_QWORD *)&v187 = v41;
              *((_QWORD *)&v187 + 1) = v156;
              v188 = v181;
              v189 = v182;
              v198[8] = 257;
              sub_22E486A58(v52, (uint64_t)&v187, v61, (uint64_t)&v196, (uint64_t)&v190);
              v193 = v190;
              v194 = v191;
              v195 = v192;
              v62 = v58;
              v6 = v57;
              sub_22E4E8774(v57, v62, &v193, v54, v53);
              ++v51;
            }
            while (v50 != v51);
          }
          return;
        }
        v91 = llvm::Constant::getAggregateElement(v43);
        v92 = (unsigned int *)(v91 + 24);
        if (*(_DWORD *)(v91 + 32) >= 0x41u)
          v92 = *(unsigned int **)v92;
        v93 = *v92;
        *(_QWORD *)&v187 = v41;
        *((_QWORD *)&v187 + 1) = v40;
        v188 = v181;
        v189 = v182;
        LOWORD(v195) = 257;
        sub_22E486A58((uint64_t *)(v6 + 272), (uint64_t)&v187, v93, (uint64_t)&v193, (uint64_t)&v190);
        v30 = sub_22E4E7F50(v6, v158, v44);
        v193 = v190;
        v194 = v191;
        v195 = v192;
        v32 = (v45 >> 2) & 1;
        v33 = (v45 >> 9) & 3;
        v34 = &v193;
LABEL_53:
        v94 = v6;
LABEL_54:
        sub_22E4E8774(v94, v30, v34, v32, v33);
        return;
      }
      *(_QWORD *)&v190 = v41;
      *((_QWORD *)&v190 + 1) = v40;
      v191 = v181;
      v192 = v182;
      v79 = (v45 >> 2) & 1;
      v80 = (v45 >> 9) & 3;
      LOWORD(v189) = 257;
      v81 = (llvm::Type **)sub_22E4E7B2C(v6, &v190, v79, v80, (uint64_t)&v187);
      if (v48)
        v44 = *(_QWORD *)(v48 + 32);
      v82 = sub_22EF63724(*(_QWORD *)(*(_QWORD *)(v6 + 144) + 144), v44, *((unsigned int *)*v81 + 8), 0);
      v83 = sub_22E4E7BB4(v6, v81, v82);
      v84 = v83;
      if (!v48)
      {
        llvm::Constant::getAggregateElement(v43);
        v95 = llvm::ConstantInt::get();
        LOWORD(v189) = 257;
        v96 = sub_22E3ED5D4((uint64_t *)(v6 + 272), v84, v158, v95, (uint64_t)&v187);
LABEL_121:
        v30 = sub_22E4E7F50(v6, v96, v82);
        *(_QWORD *)&v187 = v41;
        *((_QWORD *)&v187 + 1) = v40;
        v188 = v181;
        v189 = v182;
        v34 = &v187;
        v94 = v6;
        v32 = v79;
        v33 = v80;
        goto LABEL_54;
      }
      v85 = *(unsigned int *)(v48 + 20);
      v86 = *(unsigned int *)(*(_QWORD *)v83 + 32);
      v155 = v79;
      if ((_DWORD)v86 == (_DWORD)v85)
      {
        *(_QWORD *)&v193 = &v194;
        HIDWORD(v193) = 4;
        v87 = v6;
        if (v85 < 5)
        {
          if (!(_DWORD)v85)
          {
            v111 = 0;
            DWORD2(v193) = 0;
            v110 = &v194;
LABEL_78:
            LOWORD(v189) = 257;
            v112 = llvm::PoisonValue::get();
            v96 = sub_22E3ED3CC(v87 + 272, v158, v112, (uint64_t)v110, v111, (uint64_t)&v187);
            if ((__int128 *)v193 != &v194)
              free((void *)v193);
            v6 = v87;
            v79 = v155;
            goto LABEL_121;
          }
          v88 = &v194;
        }
        else
        {
          DWORD2(v193) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v88 = (__int128 *)v193;
        }
        bzero(v88, 4 * v85);
        v107 = 0;
        DWORD2(v193) = v85;
        do
        {
          v108 = llvm::Constant::getAggregateElement(v43);
          v109 = (unsigned int *)(v108 + 24);
          if (*(_DWORD *)(v108 + 32) >= 0x41u)
            v109 = *(unsigned int **)v109;
          v110 = (__int128 *)v193;
          *(_DWORD *)(v193 + 4 * *v109) = v107++;
        }
        while ((_DWORD)v85 != v107);
        v111 = DWORD2(v193);
        goto LABEL_78;
      }
      *(_QWORD *)&v193 = &v194;
      *((_QWORD *)&v193 + 1) = 0x400000000;
      LODWORD(v104) = 0;
      if ((_DWORD)v85)
      {
        v105 = 0;
        do
        {
          if (v104 >= HIDWORD(v193))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            LODWORD(v104) = DWORD2(v193);
          }
          *(_DWORD *)(v193 + 4 * v104) = v105;
          LODWORD(v104) = ++DWORD2(v193);
          ++v105;
        }
        while ((_DWORD)v85 != v105);
      }
      v153 = v80;
      v157 = v40;
      if ((_DWORD)v104 == (_DWORD)v86)
      {
        v106 = v6;
      }
      else
      {
        v113 = v104;
        v106 = v6;
        if (v104 <= v86)
        {
          v133 = v86 - v104;
          v104 = v104;
          if (v86 > HIDWORD(v193))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v104 = DWORD2(v193);
          }
          memset((void *)(v193 + 4 * v104), 255, 4 * (v86 - v113));
          v114 = (DWORD2(v193) + v133);
          DWORD2(v193) += v133;
          goto LABEL_101;
        }
        DWORD2(v193) = v86;
      }
      v114 = v86;
LABEL_101:
      v134 = v193;
      LOWORD(v189) = 257;
      v135 = llvm::PoisonValue::get();
      v152 = v106 + 272;
      v159 = sub_22E3ED3CC(v106 + 272, v158, v135, v134, v114, (uint64_t)&v187);
      v136 = 0;
      v137 = 0;
      v196 = v198;
      v197 = 0x400000000;
      do
      {
        if (v136 >= HIDWORD(v197))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v136 = v197;
        }
        v196[v136] = v137;
        v136 = v197 + 1;
        LODWORD(v197) = v197 + 1;
        ++v137;
      }
      while ((_DWORD)v86 != v137);
      v138 = llvm::Constant::getAggregateElement(v43);
      v139 = (_QWORD *)(v138 + 24);
      v80 = v153;
      if (*(_DWORD *)(v138 + 32) >= 0x41u)
        v139 = (_QWORD *)*v139;
      v140 = *(_DWORD *)v139;
      v141 = v197;
      if ((_DWORD)v197 == v140)
        v142 = v85 - 1;
      else
        v142 = v85;
      if (v142)
      {
        v143 = 0;
        v6 = v106;
        v40 = v157;
        do
        {
          v144 = llvm::Constant::getAggregateElement(v43);
          v145 = (unsigned int *)(v144 + 24);
          if (*(_DWORD *)(v144 + 32) >= 0x41u)
            v145 = *(unsigned int **)v145;
          v146 = (uint64_t)v196;
          v196[*v145] = v86 + v143++;
        }
        while (v142 != v143);
        v141 = v197;
      }
      else
      {
        v146 = (uint64_t)v196;
        v6 = v106;
        v40 = v157;
      }
      LOWORD(v189) = 257;
      v96 = sub_22E3ED3CC(v152, v84, v159, v146, v141, (uint64_t)&v187);
      v79 = v155;
      if (v196 != (_DWORD *)v198)
        free(v196);
      if ((__int128 *)v193 != &v194)
        free((void *)v193);
      goto LABEL_121;
    case 4:
      v115 = *(_OWORD *)(a2 + 16);
      v179[0] = *(_OWORD *)a2;
      v179[1] = v115;
      v179[2] = *(_OWORD *)(a2 + 32);
      v180 = *(_QWORD *)(a2 + 48);
      v116 = *(_OWORD *)(a3 + 112);
      v177[6] = *(_OWORD *)(a3 + 96);
      v177[7] = v116;
      v178 = *(_QWORD *)(a3 + 128);
      v117 = *(_OWORD *)(a3 + 48);
      v177[2] = *(_OWORD *)(a3 + 32);
      v177[3] = v117;
      v118 = *(_OWORD *)(a3 + 80);
      v177[4] = *(_OWORD *)(a3 + 64);
      v177[5] = v118;
      v119 = *(_OWORD *)(a3 + 16);
      v177[0] = *(_OWORD *)a3;
      v177[1] = v119;
      sub_22F25F9A4(a1, (uint64_t *)v179, (uint64_t)v177);
      return;
    case 5:
      v63 = *(llvm::Type ***)(a3 + 56);
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 184) + 33) & 0x18) != 0)
      {
        v123 = *(_QWORD *)(*(_QWORD *)(a3 + 64) & 0xFFFFFFFFFFFFFFF0);
        if (v123)
          v124 = *(_BYTE *)(v123 + 16) == 29;
        else
          v124 = 0;
        if (!v124)
          sub_22F10CF48(v123);
        *(_QWORD *)&v187 = v6 + 272;
        LOWORD(v192) = 257;
        sub_22F25F908((uint64_t *)&v187, v63);
      }
      v64 = *(_OWORD *)(a3 + 24);
      v176[0] = *(_OWORD *)(a3 + 8);
      v176[1] = v64;
      v176[2] = *(_OWORD *)(a3 + 40);
      v65 = *(_DWORD *)(a3 + 72);
      LOWORD(v192) = 257;
      v66 = sub_22E4E7B2C(v6, v176, (v65 >> 2) & 1, (v65 >> 9) & 3, (uint64_t)&v190);
      v67 = *(_QWORD *)a2;
      *(_QWORD *)&v190 = "matins";
      LOWORD(v192) = 259;
      v30 = sub_22E3ED5D4((uint64_t *)(v6 + 272), v66, v67, (uint64_t)v63, (uint64_t)&v190);
      v68 = *(_OWORD *)(a3 + 24);
      v175[0] = *(_OWORD *)(a3 + 8);
      v175[1] = v68;
      v175[2] = *(_OWORD *)(a3 + 40);
      v69 = *(_DWORD *)(a3 + 72);
      v32 = (v69 >> 2) & 1;
      v33 = (v69 >> 9) & 3;
      v34 = v175;
      goto LABEL_53;
    default:
      v35 = *(_OWORD *)(a2 + 16);
      v173[0] = *(_OWORD *)a2;
      v173[1] = v35;
      v173[2] = *(_OWORD *)(a2 + 32);
      v174 = *(_QWORD *)(a2 + 48);
      v36 = *(_OWORD *)(a3 + 112);
      v171[6] = *(_OWORD *)(a3 + 96);
      v171[7] = v36;
      v172 = *(_QWORD *)(a3 + 128);
      v37 = *(_OWORD *)(a3 + 48);
      v171[2] = *(_OWORD *)(a3 + 32);
      v171[3] = v37;
      v38 = *(_OWORD *)(a3 + 80);
      v171[4] = *(_OWORD *)(a3 + 64);
      v171[5] = v38;
      v39 = *(_OWORD *)(a3 + 16);
      v171[0] = *(_OWORD *)a3;
      v171[1] = v39;
      sub_22E4E9128(a1, (uint64_t *)v173, (uint64_t)v171, 0);
      return;
  }
}

void sub_22E4DBA2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  llvm::GlobalValue *v13;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  llvm::GlobalValue *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  llvm::GlobalValue *v35;
  uint64_t v36;
  uint64_t BitCast;
  unsigned int v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  llvm::DataLayout *DataLayout;
  llvm::Type *v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  BOOL v56;
  unint64_t ABITypeAlignment;
  uint64_t v58;
  uint64_t v59;
  std::string::size_type v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  _BOOL8 v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  int v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  unsigned __int8 *v107;
  llvm::Value *v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  llvm::DataLayout *v119;
  llvm::Type *v120;
  uint64_t v121;
  unint64_t v122;
  int v123;
  BOOL v124;
  unint64_t v125;
  uint64_t v126;
  llvm::LLVMContext *v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  __int128 v146;
  unsigned __int8 *v147;
  __int128 v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD v153[2];
  unint64_t v154;
  _OWORD v155[8];
  uint64_t v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  uint64_t v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  uint64_t v174;
  _QWORD v175[3];
  int v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD v179[2];
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD v187[3];
  int v188;
  uint64_t v189;
  uint64_t v190;
  __int128 v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  _QWORD v196[3];
  int v197;
  uint64_t v198;
  uint64_t v199;
  __int128 v200;
  llvm::GlobalValue *v201;
  unint64_t v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD v207[3];
  int v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  char v212;
  __int128 v213;
  __n128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  uint64_t v221;
  _OWORD v222[2];
  uint64_t v223;
  __int128 v224;
  __int128 v225;
  uint64_t v226;
  __int128 v227;
  __int128 v228;
  uint64_t v229;
  char *v230;
  uint64_t v231;
  _QWORD v232[5];

  v3 = a3;
  v232[2] = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a3 + 16);
  v7 = v6 & 0xFFFFFFFFFFFFFFF8;
  if ((v6 & 4) != 0)
    v7 = *(_QWORD *)(v7 + 40);
  v8 = *(_QWORD *)((*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v8 & 8) == 0 || (*(_WORD *)((v8 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x180) == 0)
  {
    v230 = (char *)v232;
    v231 = 0x200000000;
    *(_QWORD *)&v227 = &v228;
    *((_QWORD *)&v227 + 1) = 0x200000000;
    v27 = sub_22EFF59A4((unsigned __int8 *)v7, (uint64_t)&v230, (uint64_t)&v227);
    if ((_DWORD)v231)
    {
      v28 = v230;
      v29 = 8 * v231;
      do
      {
        v28 += 8;
        sub_22E4D89CC(a2);
        v29 -= 8;
      }
      while (v29);
    }
    if (*v27 == 210
      && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v27 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                  + 16) == 45)
    {
      sub_22E4ECAD8(a2, (uint64_t)v27, a1);
LABEL_179:
      if ((__int128 *)v227 != &v228)
        free((void *)v227);
      if (v230 != (char *)v232)
        free(v230);
      return;
    }
    v141 = a1;
    v200 = 0uLL;
    v30 = sub_22E4DC938(a2, v3, (uint64_t)v27, (unint64_t *)&v200);
    v32 = v31;
    v33 = v30 & 0xFFFFFFFFFFFFFFF8;
    v34 = llvm::Value::stripPointerCasts((llvm::Value *)(v30 & 0xFFFFFFFFFFFFFFF8));
    v147 = v27;
    v142 = v3;
    if (v34)
    {
      v35 = (llvm::GlobalValue *)v34;
      if (*(_BYTE *)(v34 + 16) == 3)
      {
        v36 = sub_22E66C868(*(_QWORD *)(a2 + 144) + 280, *((_QWORD *)v27 + 1), 0);
        llvm::PointerType::get();
        BitCast = llvm::ConstantExpr::getBitCast();
        v38 = __clz(1 << (v32 & 7 | (8 * (v30 & 7)))) ^ 0x3F;
        v39 = BitCast & 0xFFFFFFFFFFFFFFF8 | (v38 >> 3);
        v40 = v36 & 0xFFFFFFFFFFFFFFF8 | v38 & 7;
        if (BitCast)
          v30 = v39;
        else
          v30 = 0;
        if (BitCast)
          v32 = v40;
        else
          v32 = 0;
        if ((llvm::GlobalValue::isDeclaration(v35) & 1) != 0)
        {
          sub_22E507208(*(_QWORD **)(a2 + 144), *((_QWORD *)v27 + 1));
          llvm::GlobalVariable::setInitializer();
          v41 = 0;
          v33 = v30 & 0xFFFFFFFFFFFFFFF8;
          if (v30 <= 7)
            v42 = 0;
          else
            v42 = v30 & 0xFFFFFFFFFFFFFFF8;
          v43 = v32 & 0xFFFFFFFFFFFFFFF8;
          if (v30 <= 7)
            v44 = 0;
          else
            v44 = v32 & 0xFFFFFFFFFFFFFFF8;
          v196[0] = v42;
          v196[1] = v44;
          if (v30 >= 8)
            v41 = 1 << (v32 & 7 | (8 * (v30 & 7)));
          v196[2] = v41;
          v197 = 0;
          v199 = 0;
          v198 = 0;
          sub_22E4DA890(a2, v27, v196, 0, 1);
        }
        else
        {
          v33 = v30 & 0xFFFFFFFFFFFFFFF8;
          v43 = v32 & 0xFFFFFFFFFFFFFFF8;
        }
LABEL_116:
        v85 = 0;
        if (v30 <= 7)
          v86 = 0;
        else
          v86 = v33;
        if (v30 <= 7)
          v87 = 0;
        else
          v87 = v43;
        v181 = v86;
        v182 = v87;
        if (v30 >= 8)
          v85 = 1 << (v32 & 7 | (8 * (v30 & 7)));
        v183 = v85;
        v184 = 0;
        v186 = 0;
        v185 = 0;
        sub_22E4DCC04();
        if (!DWORD2(v227))
        {
LABEL_170:
          v113 = 0;
          if (v30 <= 7)
            v114 = 0;
          else
            v114 = v33;
          if (v30 <= 7)
            v115 = 0;
          else
            v115 = v43;
          if (v30 >= 8)
            v113 = 1 << (v32 & 7 | (8 * (v30 & 7)));
          v116 = *(_QWORD *)(v3 + 8);
          sub_22E6281E0(*(_QWORD **)(a2 + 144), v116, (uint64_t)&v224);
          *(_QWORD *)&v166 = v114;
          *((_QWORD *)&v166 + 1) = v115;
          *(_QWORD *)&v167 = v113;
          DWORD2(v167) = 0;
          v168 = 0uLL;
          v117 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
          v157 = v224;
          v158 = v225;
          *(_QWORD *)&v159 = v226;
          *(_QWORD *)(v141 + 16) = 0;
          *(_QWORD *)(v141 + 24) = 0;
          *(_QWORD *)(v141 + 8) = 0;
          *(_DWORD *)(v141 + 32) = 0;
          *(_QWORD *)(v141 + 40) = 0;
          *(_QWORD *)(v141 + 48) = 0;
          *(_QWORD *)(v141 + 64) = 0;
          *(_QWORD *)(v141 + 72) = 0;
          *(_QWORD *)(v141 + 84) = 2;
          *(_DWORD *)v141 = 0;
          *(_OWORD *)(v141 + 96) = 0u;
          *(_OWORD *)(v141 + 112) = 0u;
          sub_22E3C113C(v141, &v166, v116, 0, &v157, v117);
          goto LABEL_179;
        }
        v88 = v227;
        v89 = 24 * DWORD2(v227);
        while (1)
        {
          v90 = v88 + v89;
          v91 = *(_DWORD *)(v88 + v89 - 24);
          if (v91 == 2)
            break;
          if (v91 == 1)
          {
            v101 = 0;
            if (v30 <= 7)
              v102 = 0;
            else
              v102 = v30 & 0xFFFFFFFFFFFFFFF8;
            if (v30 <= 7)
              v103 = 0;
            else
              v103 = v32 & 0xFFFFFFFFFFFFFFF8;
            if (v30 >= 8)
              v101 = 1 << (v32 & 7 | (8 * (v30 & 7)));
            v104 = *((_QWORD *)v147 + 1);
            sub_22E6281E0(*(_QWORD **)(a2 + 144), v104, (uint64_t)v222);
            *(_QWORD *)&v157 = v102;
            *((_QWORD *)&v157 + 1) = v103;
            *(_QWORD *)&v158 = v101;
            DWORD2(v158) = 0;
            v159 = 0uLL;
            v105 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
            v224 = v222[0];
            v225 = v222[1];
            v226 = v223;
            v167 = 0uLL;
            *((_QWORD *)&v166 + 1) = 0;
            LODWORD(v168) = 0;
            *((_QWORD *)&v168 + 1) = 0;
            *(_QWORD *)&v169 = 0;
            v170 = 0uLL;
            *(_QWORD *)((char *)&v171 + 4) = 2;
            LODWORD(v166) = 0;
            v172 = 0u;
            v173 = 0u;
            sub_22E3C113C((uint64_t)&v166, &v157, v104, 0, &v224, v105);
            v155[6] = v172;
            v155[7] = v173;
            v156 = v174;
            v155[2] = v168;
            v155[3] = v169;
            v155[4] = v170;
            v155[5] = v171;
            v155[0] = v166;
            v155[1] = v167;
            sub_22E4DD05C(a2, (uint64_t)v155, *(_QWORD *)(v88 + v89 - 16), (uint64_t)&v157);
            v172 = v163;
            v173 = v164;
            v174 = v165;
            v168 = v159;
            v169 = v160;
            v170 = v161;
            v171 = v162;
            v166 = v157;
            v167 = v158;
            v30 = *((_QWORD *)&v157 + 1);
            if (*((_QWORD *)&v157 + 1))
              v32 = v158;
            else
              v32 = 0;
            if (*((_QWORD *)&v157 + 1) && *((_QWORD *)&v167 + 1))
            {
              v106 = __clz(*((unint64_t *)&v167 + 1)) ^ 0x3F;
              v30 = *((_QWORD *)&v157 + 1) & 0xFFFFFFFFFFFFFFF8 | (v106 >> 3);
              v32 = v32 & 0xFFFFFFFFFFFFFFF8 | v106 & 7;
            }
            v27 = v147;
            goto LABEL_168;
          }
          if (!v91)
          {
            v92 = v30 & 0xFFFFFFFFFFFFFFF8;
            if (v30 <= 7)
              v92 = 0;
            v93 = v32 & 0xFFFFFFFFFFFFFFF8;
            if (v30 <= 7)
              v93 = 0;
            v175[0] = v92;
            v175[1] = v93;
            v94 = 1 << (v32 & 7 | (8 * (v30 & 7)));
            if (v30 < 8)
              v94 = 0;
            v175[2] = v94;
            v176 = 0;
            v177 = 0;
            v178 = 0;
            v96 = *(_QWORD *)(v88 + v89 - 16);
            v95 = *(_QWORD *)(v88 + v89 - 8);
            v97 = (uint64_t *)sub_22EFFB554((unsigned __int8 *)v96);
            v98 = &v97[*(unsigned int *)(v96 + 4)];
            sub_22EFF605C((uint64_t)v27);
            sub_22E48032C((_QWORD *)a2, (uint64_t)v175, v95, v97, v98, 0, v99, (uint64_t)v179);
            v30 = v179[0];
            v32 = v179[0] ? v179[1] : 0;
            if (v179[0])
            {
              v100 = v180;
              if (v180)
                goto LABEL_167;
            }
          }
LABEL_168:
          v89 -= 24;
          if (!v89)
          {
            v33 = v30 & 0xFFFFFFFFFFFFFFF8;
            v43 = v32 & 0xFFFFFFFFFFFFFFF8;
            v3 = v142;
            goto LABEL_170;
          }
        }
        v107 = *(unsigned __int8 **)(v90 - 8);
        *(_QWORD *)&v166 = a2;
        *((_QWORD *)&v166 + 1) = a2 + 272;
        LOBYTE(v167) = 0;
        *((_QWORD *)&v167 + 1) = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 232);
        v108 = sub_22E50E974((uint64_t *)&v166, v107);
        v109 = v30 & 0xFFFFFFFFFFFFFFF8;
        if (v30 <= 7)
          v109 = 0;
        v110 = v32 & 0xFFFFFFFFFFFFFFF8;
        if (v30 <= 7)
          v110 = 0;
        *(_QWORD *)&v148 = v109;
        *((_QWORD *)&v148 + 1) = v110;
        v111 = 1 << (v32 & 7 | (8 * (v30 & 7)));
        if (v30 < 8)
          v111 = 0;
        v149 = v111;
        v150 = 0;
        v151 = 0;
        v152 = 0;
        sub_22E47FFCC(a2, (uint64_t)v27, &v148, (uint64_t)v108, *(_QWORD *)(v90 - 16), 0, 0, (uint64_t)v153);
        v30 = v153[0];
        if (v153[0])
          v32 = v153[1];
        else
          v32 = 0;
        if (!v153[0])
          goto LABEL_168;
        v100 = v154;
        if (!v154)
          goto LABEL_168;
LABEL_167:
        v112 = __clz(v100) ^ 0x3F;
        v30 = v30 & 0xFFFFFFFFFFFFFFF8 | (v112 >> 3);
        v32 = v32 & 0xFFFFFFFFFFFFFFF8 | v112 & 7;
        goto LABEL_168;
      }
    }
    v45 = *(_QWORD *)(v3 + 16);
    if ((v45 & 4) == 0 || (v118 = sub_22F3B2674(v45 & 0xFFFFFFFFFFFFFFF8)) == 0)
    {
      if (*(_BYTE *)(a2 + 6060))
      {
        if (!*(_QWORD *)(a2 + 5832)
          || sub_22F115260(*((_QWORD *)v27 + 1))
          || (*(_WORD *)(a2 + 1864) & 0x210) != 0
          || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 184) + 34) & 0x80) != 0)
        {
          v47 = 0;
          v145 = 0;
          v46 = 0;
        }
        else
        {
          v46 = *(uint64_t **)(a2 + 5832);
          *(_QWORD *)(a2 + 5832) = 0;
          v47 = *(_QWORD *)(a2 + 320);
          v145 = *(_QWORD *)(a2 + 328);
          v48 = *v46;
          if (*v46)
          {
            v49 = *(_QWORD *)(v48 + 40);
            if (v49)
              v50 = v49 - 24;
            else
              v50 = 0;
            sub_22E3CB840(a2 + 272, v48, v50 + 24);
          }
          else
          {
            *(_QWORD *)(a2 + 320) = 0;
            *(_QWORD *)(a2 + 328) = 0;
          }
        }
        DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a2 + 144) + 200));
        v52 = (llvm::Type *)(*((_QWORD *)&v200 + 1) & 0xFFFFFFFFFFFFFFF8);
        sub_22E3C304C((uint64_t)DataLayout, *((_QWORD *)&v200 + 1) & 0xFFFFFFFFFFFFFFF8);
        v54 = (unint64_t)(v53 + 7) >> 3;
        v56 = v55 == 1;
        ABITypeAlignment = llvm::DataLayout::getABITypeAlignment(DataLayout, v52);
        v58 = sub_22E4C9CC0(a2, (ABITypeAlignment + v54 - 1) / ABITypeAlignment * ABITypeAlignment, v56, v200 & 0xFFFFFFFFFFFFFFF8);
        if (v58)
          sub_22E47DD24(a2, 11, v200, *((uint64_t *)&v200 + 1), v58);
        v27 = v147;
        if (v46)
        {
          *(_QWORD *)(a2 + 5832) = v46;
          if (v47)
          {
            sub_22E3CB840(a2 + 272, v47, v145);
          }
          else
          {
            *(_QWORD *)(a2 + 320) = 0;
            *(_QWORD *)(a2 + 328) = 0;
          }
        }
      }
      goto LABEL_95;
    }
    if (v118 != 1
      || (v119 = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a2 + 144) + 200)),
          v120 = (llvm::Type *)(*((_QWORD *)&v200 + 1) & 0xFFFFFFFFFFFFFFF8),
          sub_22E3C304C((uint64_t)v119, *((_QWORD *)&v200 + 1) & 0xFFFFFFFFFFFFFFF8),
          v122 = (unint64_t)(v121 + 7) >> 3,
          v124 = v123 == 1,
          v125 = llvm::DataLayout::getABITypeAlignment(v119, v120),
          (v126 = sub_22E4C9CC0(a2, (v125 + v122 - 1) / v125 * v125, v124, v200 & 0xFFFFFFFFFFFFFFF8)) == 0))
    {
LABEL_95:
      v74 = *(_QWORD *)(a2 + 144);
      if ((*(_BYTE *)(*(_QWORD *)(v74 + 152) + 104) & 0x20) != 0)
      {
        v75 = sub_22EF5BA38(*(_QWORD *)(v74 + 144), *((_QWORD *)v27 + 1));
        if (sub_22F10C618(*(_QWORD *)(v75 & 0xFFFFFFFFFFFFFFF0)))
        {
          v76 = 0;
          v77 = *((_QWORD *)v27 + 1);
          if (v30 <= 7)
            v78 = 0;
          else
            v78 = v30 & 0xFFFFFFFFFFFFFFF8;
          v79 = v32 & 0xFFFFFFFFFFFFFFF8;
          if (v30 <= 7)
            v79 = 0;
          *(_QWORD *)&v191 = v78;
          *((_QWORD *)&v191 + 1) = v79;
          if (v30 >= 8)
            v76 = 1 << (v32 & 7 | (8 * (v30 & 7)));
          v80 = 0;
          v192 = v76;
          v193 = 0;
          v195 = 0;
          v194 = 0;
          v81 = *(_QWORD *)(v142 + 16);
          if ((v81 & 4) != 0)
            v80 = sub_22F3B2674(v81 & 0xFFFFFFFFFFFFFFF8) == 1;
          sub_22E486680((_QWORD *)a2, v77, &v191, v80);
        }
      }
      v82 = 0;
      if (v30 <= 7)
        v83 = 0;
      else
        v83 = v30 & 0xFFFFFFFFFFFFFFF8;
      v43 = v32 & 0xFFFFFFFFFFFFFFF8;
      if (v30 <= 7)
        v84 = 0;
      else
        v84 = v32 & 0xFFFFFFFFFFFFFFF8;
      v187[0] = v83;
      v187[1] = v84;
      if (v30 >= 8)
        v82 = 1 << (v32 & 7 | (8 * (v30 & 7)));
      v187[2] = v82;
      v188 = 0;
      v190 = 0;
      v189 = 0;
      sub_22E4DA890(a2, v27, v187, 0, 1);
      v3 = v142;
      goto LABEL_116;
    }
    v128 = v126;
    v146 = v200;
    if (*(_QWORD *)(a2 + 5832))
    {
      v129 = sub_22E489C10(a2, v127);
      v143 = v130;
      v144 = sub_22E4648A4(a2, v128);
      if (v129 <= 7)
        v131 = 11;
      else
        v131 = -2147483637;
      v132 = *(_QWORD *)(a2 + 2312);
      v133 = 40;
      if (v129 > 7)
        v133 = 56;
      v134 = v133 + v132;
      if (__CFADD__(v133, v132))
        goto LABEL_197;
      if (*(_QWORD *)(a2 + 2320) >= v134)
      {
        v135 = *(_QWORD *)(a2 + 2312);
      }
      else
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v135 = *(_QWORD *)(a2 + 2312);
        if (v135 == v134)
          goto LABEL_197;
      }
      bzero((void *)(*(_QWORD *)(a2 + 2304) + v135), v134 - v135);
LABEL_197:
      *(_QWORD *)(a2 + 2312) = v134;
      v136 = *(_QWORD *)(a2 + 2304) + v132;
      *(_DWORD *)v136 = 32;
      *(_DWORD *)(v136 + 4) = v131;
      *(_QWORD *)(v136 + 8) = &unk_24FA63320;
      *(_OWORD *)(v136 + 16) = v146;
      *(_QWORD *)(v136 + 32) = v144;
      if (v129 >= 8)
      {
        *(_QWORD *)(v136 + 40) = v129;
        *(_QWORD *)(v136 + 48) = v143;
      }
      goto LABEL_95;
    }
    v137 = *(_QWORD *)(a2 + 2312);
    v138 = v137 + 32;
    if (v137 <= 0xFFFFFFFFFFFFFFDFLL)
    {
      if (*(_QWORD *)(a2 + 2320) >= v138)
      {
        v139 = *(_QWORD *)(a2 + 2312);
        goto LABEL_203;
      }
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v139 = *(_QWORD *)(a2 + 2312);
      if (v139 != v138)
LABEL_203:
        bzero((void *)(*(_QWORD *)(a2 + 2304) + v139), v138 - v139);
    }
    *(_QWORD *)(a2 + 2312) = v138;
    v140 = (_QWORD *)(*(_QWORD *)(a2 + 2304) + v137);
    *v140 = 0xB00000018;
    v140[1] = &unk_24FA632F8;
    v140[2] = v146 & 0xFFFFFFFFFFFFFFF8;
    v140[3] = v128;
    goto LABEL_95;
  }
  v10 = sub_22E4DC938(a2, a3, v7, 0);
  v12 = v11;
  v13 = (llvm::GlobalValue *)(v10 & 0xFFFFFFFFFFFFFFF8);
  if (*(_BYTE *)((v10 & 0xFFFFFFFFFFFFFFF8) + 16) != 3 || v13 == 0)
    goto LABEL_17;
  v15 = sub_22E66C868(*(_QWORD *)(a2 + 144) + 280, *(_QWORD *)(v7 + 8), 0);
  llvm::PointerType::get();
  v16 = llvm::ConstantExpr::getBitCast();
  v17 = __clz(1 << (v12 & 7 | (8 * (v10 & 7)))) ^ 0x3F;
  v18 = v16 & 0xFFFFFFFFFFFFFFF8 | (v17 >> 3);
  v19 = v15 & 0xFFFFFFFFFFFFFFF8 | v17 & 7;
  if (v16)
    v10 = v18;
  else
    v10 = 0;
  if (v16)
    v12 = v19;
  else
    v12 = 0;
  if ((llvm::GlobalValue::isDeclaration(v13) & 1) != 0)
  {
    sub_22E507208(*(_QWORD **)(a2 + 144), *(_QWORD *)(v7 + 8));
    llvm::GlobalVariable::setInitializer();
    v13 = (llvm::GlobalValue *)(v10 & 0xFFFFFFFFFFFFFFF8);
LABEL_17:
    if (v10 <= 7)
      v20 = 0;
    else
      v20 = v13;
    if (v10 <= 7)
      v21 = 0;
    else
      v21 = v12 & 0xFFFFFFFFFFFFFFF8;
    if (v10 >= 8)
      v22 = 1 << (v12 & 7 | (8 * (v10 & 7)));
    else
      v22 = 0;
    v23 = *(_QWORD *)(v3 + 8);
    sub_22E6281E0(*(_QWORD **)(a2 + 144), v23, (uint64_t)&v227);
    *(_QWORD *)&v166 = v20;
    *((_QWORD *)&v166 + 1) = v21;
    *(_QWORD *)&v167 = v22;
    DWORD2(v167) = 0;
    v168 = 0uLL;
    v24 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
    v157 = v227;
    v158 = v228;
    *(_QWORD *)&v159 = v229;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 84) = 2;
    *(_DWORD *)a1 = 0;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    sub_22E3C113C(a1, &v166, v23, 0, &v157, v24);
    v25 = *(_QWORD *)(v7 + 8);
    if (sub_22E619D68(v25))
    {
      if (v10 < 8)
        v26 = 0;
      else
        v26 = 1 << (v12 & 7 | (8 * (v10 & 7)));
      v66 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v66 & 8) != 0)
      {
        v68 = *(_QWORD *)((v66 & 0xFFFFFFFFFFFFFFF0) + 0x18);
        v67 = *(_QWORD *)((v66 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
      }
      else
      {
        v67 = 0;
        v68 = 0;
      }
      v207[0] = v20;
      v207[1] = v21;
      v207[2] = v26;
      v208 = 0;
      v210 = 0;
      v209 = 0;
      v211 = v67 | v68 | (v66 | v25) & 7;
      v212 = 1;
      sub_22E4EF100(a2, v7, v207);
    }
    else
    {
      v59 = *(_QWORD *)(v3 + 16);
      if ((v59 & 4) != 0)
        v60 = *(_QWORD *)((v59 & 0xFFFFFFFFFFFFFFF8) + 48);
      else
        v60 = 0;
      v69 = *(_OWORD *)(a1 + 112);
      v219 = *(_OWORD *)(a1 + 96);
      v220 = v69;
      v221 = *(_QWORD *)(a1 + 128);
      v70 = *(_OWORD *)(a1 + 48);
      v215 = *(_OWORD *)(a1 + 32);
      v216 = v70;
      v71 = *(_OWORD *)(a1 + 64);
      v218 = *(_OWORD *)(a1 + 80);
      v217 = v71;
      v72 = *(_OWORD *)a1;
      v214 = *(__n128 *)(a1 + 16);
      v213 = v72;
      sub_22E4C7674(a2, (unsigned __int8 *)v7, v60, (uint64_t *)&v213, 0, v214);
    }
    v201 = v20;
    v202 = v21;
    if (v10 < 8)
      v73 = 0;
    else
      v73 = 1 << (v12 & 7 | (8 * (v10 & 7)));
    v203 = v73;
    v204 = 0;
    v206 = 0;
    v205 = 0;
    sub_22E4DCC04();
    return;
  }
  if (v10 <= 7)
    v61 = 0;
  else
    v61 = v10 & 0xFFFFFFFFFFFFFFF8;
  if (v10 <= 7)
    v62 = 0;
  else
    v62 = v12 & 0xFFFFFFFFFFFFFFF8;
  if (v10 >= 8)
    v63 = 1 << (v12 & 7 | (8 * (v10 & 7)));
  else
    v63 = 0;
  v64 = *(_QWORD *)(v3 + 8);
  sub_22E6281E0(*(_QWORD **)(a2 + 144), v64, (uint64_t)&v227);
  *(_QWORD *)&v166 = v61;
  *((_QWORD *)&v166 + 1) = v62;
  *(_QWORD *)&v167 = v63;
  DWORD2(v167) = 0;
  v168 = 0uLL;
  v65 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
  v157 = v227;
  v158 = v228;
  *(_QWORD *)&v159 = v229;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 84) = 2;
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  sub_22E3C113C(a1, &v166, v64, 0, &v157, v65);
}

uint64_t sub_22E4DC938(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int v13;
  unint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];
  int v24;
  char v25;
  void *v26;
  uint64_t v27;
  _QWORD v28[9];

  v28[8] = *MEMORY[0x24BDAC8D0];
  v8 = sub_22E699F3C(*(_QWORD **)(a1 + 144));
  v9 = *(_QWORD *)(a2 + 16);
  if ((v9 & 4) != 0 && sub_22F3B2674(v9 & 0xFFFFFFFFFFFFFFF8) > 1)
    return sub_22F29BD48(*(_QWORD **)(a1 + 144), (unsigned __int8 *)a2, (unsigned __int8 *)a3);
  v10 = *(_QWORD *)(a3 + 8);
  v11 = *(uint64_t **)(a1 + 144);
  if ((*(_BYTE *)(v11[23] + 29) & 0x20) == 0)
    goto LABEL_9;
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                  + 16) != 45
    && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu)
     - 2 > 3)
  {
    goto LABEL_9;
  }
  v13 = sub_22E62D664((uint64_t)v11, *(_QWORD *)(a3 + 8), 1);
  v11 = *(uint64_t **)(a1 + 144);
  if (!v13 || (*(_DWORD *)(v11[27] + 56) & 0xFFFFFFFE) == 0x30)
    goto LABEL_9;
  v23[0] = *(_QWORD *)(a1 + 144);
  v23[1] = a1;
  v24 = 1;
  v25 = 0;
  v26 = v28;
  v27 = 0x400000000;
  v16 = sub_22F262C28(v23, a3, v10);
  LOBYTE(v24) = 0;
  if (v26 != v28)
    free(v26);
  v11 = *(uint64_t **)(a1 + 144);
  if (v16)
  {
    v17 = sub_22F29B808((uint64_t)v11);
    v18 = llvm::User::operator new((llvm::User *)0x58);
    v23[0] = ".ref.tmp";
    LOWORD(v26) = 259;
    llvm::GlobalVariable::GlobalVariable();
    v19 = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), v10);
    v20 = __clz(v19);
    llvm::GlobalObject::setAlignment();
    result = v18;
    if ((_DWORD)v17)
    {
      v21 = *(_QWORD *)(a1 + 144);
      v22 = llvm::PointerType::get();
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v8 + 224))(v8, v21, v18, v17, 0, v22);
    }
    if (v19)
      return result & 0xFFFFFFFFFFFFFFF8 | ((v20 ^ 0x3Fu) >> 3);
  }
  else
  {
LABEL_9:
    v23[0] = "ref.tmp";
    LOWORD(v26) = 259;
    v14 = sub_22EF5D130(v11[18], v10);
    return sub_22E4D85B8(a1, v10, v14, (uint64_t)v23, a4);
  }
  return result;
}

void sub_22E4DCC04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 *v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  llvm::Value *(*v13)(uint64_t *, _OWORD *);
  unint64_t *v14;
  _QWORD *i;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, _OWORD *, uint64_t);
  __int128 *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 *v32;
  _QWORD *v33;
  uint64_t (*v34)(uint64_t, _OWORD *, uint64_t);
  __int128 v35;
  unint64_t v36;
  int v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  llvm::Value *v45;
  llvm::Value *v46;
  uint64_t v47;
  llvm::Value *v48;
  llvm::Type *v49;
  uint64_t NullValue;
  int v51;
  _OWORD v52[3];
  _OWORD v53[3];
  _OWORD v54[3];
  _OWORD v55[3];
  _OWORD v56[3];
  _BYTE v57[6208];
  uint64_t v58;

  v0 = MEMORY[0x24BDAC7A8]();
  v4 = v3;
  v5 = v1;
  v6 = v0;
  v58 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)((*(_QWORD *)(v1 + 8) & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v7 & 8) != 0)
  {
    v8 = (*(_DWORD *)((v7 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 6) & 7;
    if ((v8 - 2) < 2)
    {
      v9 = *(_QWORD *)(v1 + 16);
      if ((v9 & 4) != 0)
      {
        v10 = sub_22F3B2674(v9 & 0xFFFFFFFFFFFFFFF8);
        if ((v10 & 0xFFFFFFFE) == 2)
          return;
      }
      else
      {
        v10 = 0;
      }
      if (v8 == 2)
      {
        v11 = *(_QWORD *)(v5 + 16);
        if ((v11 & 4) != 0 && (v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF8) + 48)) != 0)
        {
          v13 = sub_22F273CF8;
          if ((*(_DWORD *)(v12 + 28) & 0x7Fu) - 60 <= 6 && sub_22E4CBAA4(v12))
            v13 = sub_22F273CC4;
        }
        else
        {
          v13 = sub_22F273CF8;
        }
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 144) + 184) + 1) & 2) != 0)
          v29 = 3;
        else
          v29 = 2;
      }
      else
      {
        v13 = sub_22F273D2C;
        v29 = 3;
      }
      LOBYTE(v25) = v29 & 1;
      if (!v10)
      {
        v35 = v4[1];
        v56[0] = *v4;
        v56[1] = v35;
        v56[2] = v4[2];
        v24 = *(_QWORD *)(v5 + 8);
        v27 = v56;
        v28 = v6;
        v26 = (uint64_t (*)(uint64_t, _OWORD *, uint64_t))v13;
LABEL_41:
        sub_22F259E14(v28, v29, v27, v24, (uint64_t)v26, v25);
        return;
      }
      v30 = v4[1];
      v55[0] = *v4;
      v55[1] = v30;
      v55[2] = v4[2];
      v31 = *(_QWORD *)(v5 + 8);
      v32 = v55;
      v33 = (_QWORD *)v6;
      v34 = (uint64_t (*)(uint64_t, _OWORD *, uint64_t))v13;
LABEL_36:
      sub_22F259FCC(v33, (llvm::LLVMContext *)v29, v32, v31, (uint64_t)v34, v25);
      return;
    }
    if (v8 == 4)
      return;
  }
  v14 = (unint64_t *)(v2 + 8);
  for (i = (_QWORD *)(v2 + 8); ; i = (_QWORD *)(v19 + 32))
  {
    v16 = *(_QWORD *)(*i & 0xFFFFFFFFFFFFFFF0);
    if (v16)
      v17 = (*(_DWORD *)(v16 + 16) & 0xFEu) - 6 > 0xFFFFFFFB;
    else
      v17 = 0;
    if (v17)
    {
      v19 = *(_QWORD *)(*i & 0xFFFFFFFFFFFFFFF0);
      continue;
    }
    v18 = *(_QWORD *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF0);
    if ((*(_DWORD *)(v18 + 16) & 0xFEu) - 2 > 3)
      break;
    v19 = sub_22F10CF48(v16);
    if (!v19)
    {
      v18 = *(_QWORD *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF0);
      v51 = *(unsigned __int8 *)(v18 + 16);
      goto LABEL_24;
    }
  }
  v51 = *(_DWORD *)(v18 + 16);
LABEL_24:
  if (v51 != 45)
    return;
  v20 = sub_22F114198(*(_QWORD *)(v18 + 24));
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v20 + 104) + 96), *(_QWORD *)(v20 + 104));
  if ((**(_QWORD **)(v20 + 128) & 0x100000000000) != 0)
    return;
  v21 = sub_22EFD10F8(v20);
  if (!v21)
    return;
  v22 = *(_QWORD *)(v5 + 16);
  if ((v22 & 4) == 0)
    goto LABEL_28;
  v36 = v21;
  v37 = sub_22F3B2674(v22 & 0xFFFFFFFFFFFFFFF8);
  if ((v37 - 2) < 2)
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v14 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) & 0xFEu)
       - 2 > 3)
    {
      v44 = sub_22E46A4BC(*(_QWORD *)(v6 + 144), v36 & 0xFFFFFFFFFFFFFFF8 | 1, 0, 0, 0, 0, 0);
      v46 = v45;
      if ((*((_BYTE *)v4 + 24) & 3) == 0)
      {
        v47 = *(_QWORD *)v4;
LABEL_61:
        (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, llvm::Value *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v6 + 144) + 224)
                                                                                         + 688))(*(_QWORD *)(*(_QWORD *)(v6 + 144) + 224), v6, *(_QWORD *)((*(_QWORD *)(v5 + 16) & 0xFFFFFFFFFFFFFFF8) + 48), v44, v46, v47);
        return;
      }
      NullValue = sub_22F28ABCC(v4, v6);
    }
    else
    {
      sub_22E618EBC((uint64_t)v57, *(_QWORD *)(v6 + 144), 0);
      v38 = v4[2];
      v39 = *v4;
      v54[1] = v4[1];
      v54[2] = v38;
      v54[0] = v39;
      v40 = *(_QWORD *)(v5 + 16);
      if ((v40 & 4) != 0 && (v41 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFFFF8) + 48)) != 0)
      {
        if ((*(_DWORD *)(v41 + 28) & 0x7Fu) - 60 >= 7)
          v42 = 0;
        else
          v42 = v41;
      }
      else
      {
        v42 = 0;
      }
      v48 = sub_22F25BC50((uint64_t)v57, v54, *v14, (void (*)(_QWORD *, void **, uint64_t))sub_22F25105C, (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 144) + 152) + 8) >> 44) & 1, v42);
      v46 = v48;
      if (v48)
        v44 = *((_QWORD *)v48 + 3);
      else
        v44 = 0;
      sub_22E619434((uint64_t)v57);
      NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)(v6 + 96), v49);
    }
    v47 = NullValue;
    goto LABEL_61;
  }
  if (v37 == 1)
  {
    v43 = v4[1];
    v52[0] = *v4;
    v52[1] = v43;
    v52[2] = v4[2];
    v31 = *v14;
    v25 = (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 144) + 152) + 8) >> 44) & 1;
    v34 = sub_22F25105C;
    v32 = v52;
    v33 = (_QWORD *)v6;
    v29 = 3;
    goto LABEL_36;
  }
  if (!v37)
  {
LABEL_28:
    v23 = v4[1];
    v53[0] = *v4;
    v53[1] = v23;
    v53[2] = v4[2];
    v24 = *v14;
    v25 = (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 144) + 152) + 8) >> 44) & 1;
    v26 = sub_22F25105C;
    v27 = v53;
    v28 = v6;
    v29 = 3;
    goto LABEL_41;
  }
}

double sub_22E4DD05C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  int v15;
  int *v16;
  __int128 v17;
  __int128 v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  BOOL v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unsigned int v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unsigned int v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  int v68;
  uint64_t *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  unint64_t v75;
  _DWORD *v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  const char *v85;
  unint64_t v86;
  _DWORD *v87;
  unsigned int v88;
  int v89;
  uint64_t v90;
  double result;
  unsigned int v92;
  int v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  const char *v98;
  unint64_t v99;
  _DWORD *v100;
  unsigned int v101;
  unint64_t v102;
  int v103;
  uint64_t IntNTy;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  _OWORD v111[3];
  __int128 v112[3];
  _OWORD v113[8];
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  __int128 v124[3];
  __int128 v125[3];
  __int128 v126;
  __int128 v127;
  __int128 v128;
  _OWORD v129[3];
  int v130;
  int v131;
  __int128 v132;
  __int128 v133;
  _OWORD v134[3];
  _QWORD v135[2];
  __int128 v136;
  __int128 v137;
  __int128 v138[3];
  _QWORD v139[2];
  __int128 v140;
  __int128 v141;
  _QWORD v142[2];
  __int128 v143;
  __int128 v144;
  __int128 v145[2];
  uint64_t v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;

  v8 = *(_DWORD *)(a2 + 84);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
  v10 = sub_22EF5DD84(v9, *(_QWORD *)(a3 + 48), *(_DWORD *)(a2 + 72) >> 11);
  v11 = sub_22EF5DE18(v9, v10, (*(_DWORD *)(a2 + 72) >> 9) & 3);
  if ((*(_BYTE *)(a3 + 68) & 1) == 0)
  {
    v12 = *(_QWORD *)(a3 + 16);
    v13 = v12 & 0xFFFFFFFFFFFFFFF8;
    if ((v12 & 4) != 0)
      v13 = *(_QWORD *)v13;
    if (v13)
      v14 = (*(_WORD *)(v13 + 8) & 0x7Eu) - 38 >= 0xFFFFFFFC;
    else
      v14 = 0;
    v15 = !v14;
    if (v15)
      v16 = 0;
    else
      v16 = (int *)(v13 - 64);
    v130 = 0;
    if (*(_DWORD *)(a2 + 88) == 1
      || sub_22E4EC31C((uint64_t)v16)
      || *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                          + 16)
       - 55 <= 1
      || (v16[18] & 0xE000) == 0x4000)
    {
      LODWORD(v129[0]) = 1;
      memset((char *)v129 + 8, 0, 32);
    }
    else
    {
      v22 = *(_OWORD *)(a2 + 104);
      v129[0] = *(_OWORD *)(a2 + 88);
      v129[1] = v22;
      *(_QWORD *)&v129[2] = *(_QWORD *)(a2 + 120);
      v23 = *((_QWORD *)&v129[0] + 1);
      v24 = *(_QWORD *)(a1 + 144);
      if (!*((_QWORD *)&v129[0] + 1))
      {
        v25 = *(_QWORD *)(v24 + 264);
        if (v25)
        {
          v23 = sub_22E66B230(v25, *(_QWORD *)(a2 + 64));
          v24 = *(_QWORD *)(a1 + 144);
        }
        else
        {
          v23 = 0;
        }
        *((_QWORD *)&v129[0] + 1) = v23;
      }
      v26 = *(_QWORD *)(v24 + 144);
      v27 = *(_QWORD *)(a3 + 16);
      v28 = v27 & 0xFFFFFFFFFFFFFFF8;
      if ((v27 & 4) != 0)
        v28 = *(_QWORD *)v28;
      v29 = (*(_WORD *)(v28 + 8) & 0x7E) - 34;
      if (v28)
        v30 = v28 - 64;
      else
        v30 = 0;
      if (v29 >= 4)
        v31 = 0;
      else
        v31 = v30;
      v109 = sub_22F0C975C(v26, v31);
      v32 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144) + 16408) & 0xFFFFFFFFFFFFFFF0));
      if (v23)
        *((_QWORD *)&v129[1] + 1) += *(_QWORD *)(*(_QWORD *)(v109 + 48) + 8 * sub_22EFC306C(a3))
                                   / (unint64_t)v32;
      v33 = *(_QWORD *)(a1 + 144);
      v34 = *(_QWORD *)(v33 + 264);
      if (v34)
      {
        v34 = sub_22E66B034(v34, v11);
        v33 = *(_QWORD *)(a1 + 144);
      }
      *(_QWORD *)&v129[1] = v34;
      sub_22EF5CCD0(*(_QWORD *)(v33 + 144), *(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v115);
      *(_QWORD *)&v129[2] = v115;
    }
    v17 = *(_OWORD *)(a2 + 40);
    v18 = *(_OWORD *)(a2 + 8);
    v127 = *(_OWORD *)(a2 + 24);
    v128 = v17;
    v126 = v18;
    if ((v16[7] & 0x7Fu) - 38 < 0xFFFFFFFD)
      v19 = 1;
    else
      v19 = v15;
    if ((v19 & 1) == 0
      && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 184) + 39) & 4) != 0
      && sub_22E463414((uint64_t)v16))
    {
      if ((BYTE8(v127) & 3) != 0)
        sub_22F28ABCC(&v126, a1);
      *(_QWORD *)&v126 = llvm::IRBuilderBase::CreateStripInvariantGroup();
      DWORD2(v127) = 0;
      v128 = 0uLL;
    }
    v20 = *(_DWORD *)(a2 + 72);
    if ((v16[18] & 0xE000) == 0x4000)
    {
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 184) + 39) & 4) != 0 && sub_22E4EC37C(v11))
        *(_QWORD *)&v126 = llvm::IRBuilderBase::CreateLaunderInvariantGroup();
      if (*(_BYTE *)(a1 + 1897) || !*(_BYTE *)(a1 + 2892) && *(_QWORD *)(a1 + 2880) && sub_22E4EC2BC((uint64_t)v16))
      {
        if (*(_BYTE *)(a1 + 2892))
          v21 = 0;
        else
          v21 = *(_QWORD *)(a1 + 2880);
        sub_22F255EDC(v21, *(_QWORD *)(a2 + 64), v16[6]);
        if ((BYTE8(v127) & 3) != 0)
          sub_22F28ABCC(&v126, a1);
        v70 = sub_22EFC306C(a3);
        sub_22E4EC1DC((unint64_t)v16, v70);
        *(_QWORD *)&v126 = llvm::IRBuilderBase::CreatePreserveUnionAccessIndex();
        DWORD2(v127) = 0;
        v128 = 0uLL;
      }
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) & 0xFE) == 0x28)
      {
        v125[0] = v126;
        v125[1] = v127;
        v125[2] = v128;
        v71 = sub_22E66C868(*(_QWORD *)(a1 + 144) + 280, v11, 0);
        v72 = 0;
        v73 = *(_QWORD *)(a3 + 40);
        v74 = "";
        if ((v73 & 7) == 0)
        {
          v75 = v73 & 0xFFFFFFFFFFFFFFF8;
          if (v75)
          {
            v76 = *(_DWORD **)(v75 + 16);
            v77 = *v76;
            v74 = (const char *)(v76 + 4);
            v72 = v77;
          }
        }
        LOWORD(v117) = 261;
        *(_QWORD *)&v115 = v74;
        *((_QWORD *)&v115 + 1) = v72;
        sub_22E3BEE6C((uint64_t *)(a1 + 272), v125, v71, (uint64_t)&v115, (uint64_t)&v126);
      }
    }
    else if (*(_BYTE *)(a1 + 1897) || !*(_BYTE *)(a1 + 2892) && *(_QWORD *)(a1 + 2880) && sub_22E4EC2BC((uint64_t)v16))
    {
      v59 = *(_QWORD *)(a2 + 64);
      v60 = *(_QWORD *)(a3 + 16);
      v61 = v60 & 0xFFFFFFFFFFFFFFF8;
      if ((v60 & 4) != 0)
        v61 = *(_QWORD *)v61;
      v62 = (*(_WORD *)(v61 + 8) & 0x7E) - 34;
      if (v61)
        v63 = v61 - 64;
      else
        v63 = 0;
      if (v62 >= 4)
        v64 = 0;
      else
        v64 = v63;
      if (*(_BYTE *)(a1 + 2892))
        v65 = 0;
      else
        v65 = *(_QWORD *)(a1 + 2880);
      sub_22F255EDC(v65, v59, *(_DWORD *)(v64 + 24));
      v66 = sub_22E66DD94(*(_QWORD *)(a1 + 144) + 280, v64);
      v67 = sub_22E4EC264(v66, a3);
      v115 = v126;
      v116 = v127;
      v117 = v128;
      v68 = sub_22EFC306C(a3);
      sub_22E4EC1DC(v64, v68);
      sub_22F2606D0((uint64_t)&v126, a1 + 272, (uint64_t)&v115, v67);
    }
    else
    {
      v124[0] = v126;
      v124[1] = v127;
      v124[2] = v128;
      sub_22E4EC484(&v126, (_QWORD *)a1, v124, a3);
    }
    v78 = *(_QWORD *)(a1 + 144);
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) & 0xFE) == 0x28)
    {
      v147 = v126;
      v148 = v127;
      v149 = v128;
      v145[0] = v129[0];
      v145[1] = v129[1];
      v146 = *(_QWORD *)&v129[2];
      v79 = *(_QWORD *)(v78 + 144);
      v116 = 0uLL;
      *((_QWORD *)&v115 + 1) = 0;
      LODWORD(v117) = 0;
      *((_QWORD *)&v117 + 1) = 0;
      *(_QWORD *)&v118 = 0;
      v119 = 0uLL;
      *(_QWORD *)((char *)&v120 + 4) = 2;
      LODWORD(v115) = 0;
      v121 = 0u;
      v122 = 0u;
      sub_22E3C113C((uint64_t)&v115, &v147, v11, 0, v145, v79);
      if ((v20 & 4) != 0)
        DWORD2(v119) |= 4u;
      v113[6] = v121;
      v113[7] = v122;
      v114 = v123;
      v113[2] = v117;
      v113[3] = v118;
      v113[4] = v119;
      v113[5] = v120;
      v113[0] = v115;
      v113[1] = v116;
      sub_22E4E96BC(a1, (uint64_t)v113, &v130, (uint64_t)v129, &v147);
      v126 = v147;
      v127 = v148;
      v128 = v149;
      v11 = sub_22F10ACF8(*(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0));
      v80 = 0;
      v81 = 0;
      v78 = *(_QWORD *)(a1 + 144);
    }
    else
    {
      v81 = v20 & 6;
      v80 = (v20 >> 9) & 3;
    }
    v112[0] = v126;
    v112[1] = v127;
    v112[2] = v128;
    v82 = sub_22E66C868(v78 + 280, v11, 0);
    v83 = 0;
    v84 = *(_QWORD *)(a3 + 40);
    v85 = "";
    if ((v84 & 7) == 0)
    {
      v86 = v84 & 0xFFFFFFFFFFFFFFF8;
      if (v86)
      {
        v87 = *(_DWORD **)(v86 + 16);
        v88 = *v87;
        v85 = (const char *)(v87 + 4);
        v83 = v88;
      }
    }
    LOWORD(v149) = 261;
    *(_QWORD *)&v147 = v85;
    *((_QWORD *)&v147 + 1) = v83;
    sub_22E3BEE6C((uint64_t *)(a1 + 272), v112, v82, (uint64_t)&v147, (uint64_t)&v115);
    v126 = v115;
    v127 = v116;
    v128 = v117;
    if (sub_22E4C7444(a3))
    {
      v111[0] = v126;
      v111[1] = v127;
      v111[2] = v128;
      sub_22E6215AC((uint64_t *)a1, a3, (uint64_t)v111, (uint64_t)&v115);
      v126 = v115;
      v127 = v116;
      v128 = v117;
    }
    v115 = v126;
    v116 = v127;
    v117 = v128;
    v89 = v130;
    v147 = v129[0];
    v148 = v129[1];
    *(_QWORD *)&v149 = *(_QWORD *)&v129[2];
    v90 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 32) = 0;
    *(_QWORD *)(a4 + 40) = 0;
    *(_QWORD *)(a4 + 48) = 0;
    *(_QWORD *)(a4 + 64) = 0;
    *(_QWORD *)(a4 + 72) = 0;
    *(_QWORD *)(a4 + 84) = 2;
    *(_DWORD *)a4 = 0;
    *(_OWORD *)(a4 + 96) = 0u;
    *(_OWORD *)(a4 + 112) = 0u;
    *(_QWORD *)&result = sub_22E3C113C(a4, &v115, v11, v89, &v147, v90).n128_u64[0];
    v92 = *(_DWORD *)(a4 + 72);
    v93 = (v92 >> 9) & 3;
    if (v93 <= v80)
      v93 = v80;
    v94 = v81 | (v93 << 9) | v92 & 0xFFFFF9FF;
    if ((*(_DWORD *)(a4 + 72) & 0x30) == 0x10)
      v95 = v94 & 0xFFFFFFCF;
    else
      v95 = v94;
    *(_DWORD *)(a4 + 72) = v95;
    return result;
  }
  v35 = *(_QWORD *)(a3 + 16);
  v36 = v35 & 0xFFFFFFFFFFFFFFF8;
  if ((v35 & 4) != 0)
    v36 = *(_QWORD *)v36;
  v37 = (*(_WORD *)(v36 + 8) & 0x7E) - 34;
  if (v36)
    v38 = v36 - 64;
  else
    v38 = 0;
  if (v37 >= 4)
    v39 = 0;
  else
    v39 = v38;
  v40 = sub_22E66DD94(*(_QWORD *)(a1 + 144) + 280, v39);
  v41 = a3;
  if ((*(_BYTE *)(a3 + 29) & 0x80) != 0)
    v41 = sub_22EFB5D7C(a3);
  v42 = sub_22E47ED6C(v40 + 40, v41);
  v43 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 144) + 216) + 448))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 216));
  if (v44 >= 5 && (*(_DWORD *)v43 == 1668309345 ? (v45 = *(_BYTE *)(v43 + 4) == 115) : (v45 = 0), v45))
  {
    v110 = 0;
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 184) + 92) & 0x20000) != 0 && *(_DWORD *)(v42 + 28))
    {
      v46 = *(_QWORD *)(a3 + 48);
      if (((*(_DWORD *)(a2 + 72) | v46) & 4) != 0)
        v47 = 1;
      else
        v47 = (*(unsigned __int8 *)((v46 & 0xFFFFFFFFFFFFFFF0) + 8) >> 2) & 1;
      v110 = v47;
    }
  }
  else
  {
    v110 = 0;
  }
  v108 = v42;
  v48 = *(_QWORD *)(a2 + 8);
  v49 = *(_QWORD *)(a2 + 16);
  v50 = *(_OWORD *)(a2 + 40);
  v126 = *(_OWORD *)(a2 + 24);
  v127 = v50;
  v51 = sub_22E4EC264(v40, a3);
  v52 = *(_QWORD *)(a3 + 16);
  v53 = v52 & 0xFFFFFFFFFFFFFFF8;
  if ((v52 & 4) != 0)
    v53 = *(_QWORD *)v53;
  v54 = (*(_WORD *)(v53 + 8) & 0x7E) - 34;
  if (v53)
    v55 = v53 - 64;
  else
    v55 = 0;
  if (v54 >= 4)
    v56 = 0;
  else
    v56 = v55;
  if ((v110 & 1) == 0)
  {
    if (*(_BYTE *)(a1 + 1897) || !*(_BYTE *)(a1 + 2892) && *(_QWORD *)(a1 + 2880) && sub_22E4EC2BC(v56))
    {
      v107 = v51;
      if (*(_BYTE *)(a1 + 2892))
        v69 = 0;
      else
        v69 = *(uint64_t **)(a1 + 2880);
      v102 = sub_22EF6477C(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), v56);
      sub_22F255EA8(v69, v102, *(_DWORD *)(v56 + 24));
      v139[0] = v48;
      v139[1] = v49;
      v140 = v126;
      v141 = v127;
      v103 = sub_22EFC306C(a3);
      sub_22E4EC1DC(v56, v103);
      sub_22F2606D0((uint64_t)&v115, a1 + 272, (uint64_t)v139, v107);
      v49 = *((_QWORD *)&v115 + 1);
      v48 = v115;
      v126 = v116;
      v127 = v117;
    }
    else if ((_DWORD)v51)
    {
      v96 = 0;
      v142[0] = v48;
      v142[1] = v49;
      v143 = v126;
      v144 = v127;
      v97 = *(_QWORD *)(a3 + 40);
      v98 = "";
      v57 = v108;
      if ((v97 & 7) == 0)
      {
        v99 = v97 & 0xFFFFFFFFFFFFFFF8;
        if (v99)
        {
          v100 = *(_DWORD **)(v99 + 16);
          v101 = *v100;
          v98 = (const char *)(v100 + 4);
          v96 = v101;
        }
      }
      LOWORD(v149) = 261;
      *(_QWORD *)&v147 = v98;
      *((_QWORD *)&v147 + 1) = v96;
      sub_22E3C408C((uint64_t *)(a1 + 272), (uint64_t)v142, v51, (uint64_t)&v147, (uint64_t)&v115);
      v49 = *((_QWORD *)&v115 + 1);
      v48 = v115;
      v126 = v116;
      v127 = v117;
      goto LABEL_141;
    }
    v57 = v108;
LABEL_141:
    v58 = (unsigned int *)(v57 + 12);
    goto LABEL_142;
  }
  v57 = v108;
  v58 = (unsigned int *)(v108 + 28);
LABEL_142:
  IntNTy = llvm::Type::getIntNTy(*(llvm::Type **)(*(_QWORD *)(a1 + 144) + 232), (llvm::LLVMContext *)*v58);
  if (v49 != IntNTy)
  {
    *(_QWORD *)&v138[0] = v48;
    *((_QWORD *)&v138[0] + 1) = v49;
    v138[1] = v126;
    v138[2] = v127;
    LOWORD(v149) = 257;
    sub_22E3BEE6C((uint64_t *)(a1 + 272), v138, IntNTy, (uint64_t)&v147, (uint64_t)&v115);
    v49 = *((_QWORD *)&v115 + 1);
    v48 = v115;
    v126 = v116;
    v127 = v117;
  }
  if (v110)
  {
    v105 = *(unsigned int *)(v57 + 32);
    if (*(_DWORD *)(v57 + 32))
    {
      v135[0] = v48;
      v135[1] = v49;
      v136 = v126;
      v137 = v127;
      LOWORD(v149) = 257;
      sub_22F2486C4((uint64_t *)(a1 + 272), (uint64_t)v135, v105, (uint64_t)&v147, (uint64_t)&v115);
      v49 = *((_QWORD *)&v115 + 1);
      v48 = v115;
      v126 = v116;
      v127 = v117;
    }
  }
  v106 = sub_22EF5DE18(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), v11 & 0xFFFFFFFFFFFFFFF8 | *(_DWORD *)(a2 + 72) & 6 | (v11 & 7), (*(_DWORD *)(a2 + 72) >> 9) & 3);
  *(_QWORD *)&v134[0] = v48;
  *((_QWORD *)&v134[0] + 1) = v49;
  v134[1] = v126;
  v134[2] = v127;
  v131 = 0;
  v132 = 0u;
  v133 = 0u;
  *(_QWORD *)&result = sub_22F2607C4(v134, v57 + 8, v106, v8, (uint64_t)&v131, a4).n128_u64[0];
  return result;
}

void sub_22E4DDB88(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  llvm::Constant **v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  llvm::Constant **v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  _OWORD v17[3];
  llvm::Constant **v18;

  sub_22E4D8D7C(&v12);
  v17[0] = v13;
  v17[1] = v14;
  v17[2] = v15;
  sub_22E5E0440(a1, (uint64_t)v17, v16, &v18);
  v6 = v18;
  if ((*(_QWORD *)(a1 + 1864) & 0x10042008000) != 0)
  {
    v8 = *(_QWORD *)(a2 + 8);
    if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                          + 16)
       - 25 >= 2)
    {
      v9 = a2;
      v10 = v18;
      sub_22EFF605C(v9);
      sub_22E4DDC84(a1, 2u, v11, v10, v8, 0, 0, 0, 0);
      v6 = v10;
    }
  }
  v7 = *(_BYTE *)(a3 + 48);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 48) = v7 & 0xF8;
}

void sub_22E4DDC84(uint64_t a1, unsigned int a2, int a3, llvm::Constant **this, unint64_t a5, unint64_t a6, uint64_t a7, int a8, uint64_t a9)
{
  unsigned int v15;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  unsigned int v20;
  llvm::Type *v21;
  uint64_t v22;
  uint64_t NullValue;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  char *v28;
  __int128 v29;
  unsigned __int8 *v30;
  uint64_t Declaration;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  char *v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  void *v46;
  unint64_t v47;
  char *v48;
  __int128 v49;
  int v50;
  _QWORD *v51;
  llvm::Type *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  llvm::Type ***v64;
  llvm::Type *v65;
  llvm::Constant **v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  llvm::LLVMContext *v73;
  uint64_t v74;
  llvm::LLVMContext *v75;
  uint64_t v76;
  uint64_t v77;
  llvm::Instruction *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  llvm::Instruction *v82;
  uint64_t v83;
  uint64_t v84;
  llvm::Instruction *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  llvm::LLVMContext *v91;
  llvm::Type *v92;
  llvm::GetElementPtrInst *v93;
  __int16 v94;
  uint64_t *v95;
  llvm::Type **v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t False;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t True;
  uint64_t v108;
  uint64_t *v109;
  _QWORD *v110;
  uint64_t *v111;
  _QWORD v112[3];
  int v113;
  uint64_t v114;
  uint64_t v115;
  _BYTE v116[32];
  __int16 v117;
  uint64_t v118;
  llvm::Constant **v119;
  llvm::Type **v120[2];
  uint64_t *v121[2];
  void *v122;
  __int128 v123;
  uint64_t v124;
  __int16 v125;
  void *v126;
  uint64_t v127;
  _BYTE v128[72];
  _BYTE v129[24];
  __int16 v130;
  uint64_t v131;
  llvm::Value *v132;
  uint64_t v133;
  uint64_t v134;
  __int16 v135;
  uint64_t v136;

  v136 = *MEMORY[0x24BDAC8D0];
  v119 = this;
  if ((*(_QWORD *)(a1 + 1864) & 0x10042008000) != 0)
  {
    v15 = *((_DWORD *)*this + 2);
    if ((v15 & 0xFE) == 0x12)
      v15 = *(_DWORD *)(**((_QWORD **)*this + 2) + 8);
    if (v15 <= 0xFF && (a5 & 4) == 0)
    {
      v111 = (uint64_t *)(a5 & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)((a5 & 0xFFFFFFFFFFFFFFF0) + 8) & 4) == 0)
      {
        *(_BYTE *)(a1 + 1880) = 1;
        v126 = v128;
        v127 = 0x300000000;
        v17 = llvm::Value::stripPointerCasts((llvm::Value *)this);
        if (*(_BYTE *)(v17 + 16) == 59)
          v18 = v17;
        else
          v18 = 0;
        v103 = a2;
        v104 = v18;
        v19 = (a7 & 0x2000000 | v18) != 0;
        v20 = (a2 < 0xC) & (0xB40u >> a2);
        v105 = 0;
        True = llvm::ConstantInt::getTrue();
        v22 = 0;
        if ((v20 | ((*(_BYTE *)(a1 + 1867) & 2) >> 1)) == 1 && !v19)
        {
          v125 = 257;
          NullValue = llvm::Constant::getNullValue(*this, v21);
          v24 = (void *)sub_22E3C18F4(a1 + 272, 33, (uint64_t *)this, NullValue, (uint64_t)&v122);
          if (v24 == (void *)True)
          {
            v22 = 0;
            v19 = 1;
            v105 = True;
          }
          else
          {
            v105 = (uint64_t)v24;
            if (v20)
            {
              v122 = "null";
              v125 = 259;
              v25 = (uint64_t)v24;
              v22 = operator new();
              llvm::BasicBlock::BasicBlock();
              v122 = "not.null";
              v125 = 259;
              v26 = (_QWORD *)operator new();
              llvm::BasicBlock::BasicBlock();
              sub_22E3D26FC((uint64_t *)(a1 + 272), v25, (uint64_t)v26, v22, 0, 0);
              sub_22E5ED9B4((_QWORD *)a1, v26, 0);
              v19 = 0;
            }
            else
            {
              v122 = v24;
              v123 = xmmword_22F457590;
              v27 = sub_22E4EF088((uint64_t)&v126, (unint64_t)&v122, 1);
              v19 = 0;
              v22 = 0;
              v28 = (char *)v126 + 24 * v127;
              v29 = *(_OWORD *)v27;
              *((_QWORD *)v28 + 2) = *(_QWORD *)(v27 + 16);
              *(_OWORD *)v28 = v29;
              LODWORD(v127) = v127 + 1;
            }
          }
        }
        if ((*(_BYTE *)(a1 + 1867) & 0x40) != 0 && (a7 & 0x40000000) == 0 && (sub_22F1110EC(*v111, 0) & 1) == 0)
        {
          sub_22E472C84(*(_QWORD *)(a1 + 144), a5);
          v30 = (unsigned __int8 *)llvm::ConstantInt::get();
          if (a9)
          {
            v125 = 257;
            v30 = (unsigned __int8 *)sub_22E3BDEA8(a1 + 272, (uint64_t)v30, a9, (uint64_t)&v122, 0, 0);
          }
          if (!v30 || v30[16] > 0x14u || (llvm::Constant::isNullValue((llvm::Constant *)v30) & 1) == 0)
          {
            *(_OWORD *)v129 = *(_OWORD *)(a1 + 88);
            Declaration = llvm::Intrinsic::getDeclaration();
            False = llvm::ConstantInt::getFalse();
            v100 = llvm::ConstantInt::getFalse();
            v32 = llvm::ConstantInt::getFalse();
            v33 = *(_QWORD *)(a1 + 96);
            v125 = 257;
            v34 = sub_22E3C1740((uint64_t *)(a1 + 272), 49, (uint64_t)this, v33, (uint64_t)&v122);
            if (Declaration)
              v35 = *(_QWORD *)(Declaration + 24);
            else
              v35 = 0;
            v131 = v34;
            v132 = (llvm::Value *)False;
            v133 = v100;
            v134 = v32;
            v125 = 257;
            v36 = (uint64_t *)sub_22E462B78((uint64_t *)(a1 + 272), v35, Declaration, (uint64_t)&v131, 4, (uint64_t)&v122, 0);
            v117 = 257;
            v122 = (void *)sub_22E3C18F4(a1 + 272, 35, v36, (uint64_t)v30, (uint64_t)v116);
            v123 = xmmword_22F4575A0;
            v37 = sub_22E4EF088((uint64_t)&v126, (unint64_t)&v122, 1);
            v38 = (char *)v126 + 24 * v127;
            v39 = *(_OWORD *)v37;
            *((_QWORD *)v38 + 2) = *(_QWORD *)(v37 + 16);
            *(_OWORD *)v38 = v39;
            LODWORD(v127) = v127 + 1;
          }
        }
        v40 = 0;
        v118 = 0;
        if ((*(_BYTE *)(a1 + 1865) & 0x80) != 0 && (a7 & 0x8000) == 0)
        {
          if ((sub_22F1110EC(*v111, 0) & 1) != 0)
          {
            v41 = v104;
          }
          else
          {
            v41 = v104;
            if (!a6)
              a6 = sub_22E62D754(*(_QWORD **)(a1 + 144), a5, 0, 0, 1);
          }
          if (a6 < 2 || v41 && 1 << *(_WORD *)(v41 + 18) >= a6)
          {
            v40 = 0;
          }
          else
          {
            v42 = *(_QWORD *)(a1 + 88);
            v125 = 257;
            v40 = sub_22E3C1740((uint64_t *)(a1 + 272), 47, (uint64_t)this, v42, (uint64_t)&v122);
            v118 = v40;
            v43 = llvm::ConstantInt::get();
            v125 = 257;
            v44 = (uint64_t *)sub_22E3E49C4(a1 + 272, v40, v43, (uint64_t)&v122);
            v45 = llvm::ConstantInt::get();
            v125 = 257;
            v46 = (void *)sub_22E3C18F4(a1 + 272, 32, v44, v45, (uint64_t)&v122);
            if (v46 != (void *)True)
            {
              v122 = v46;
              v123 = xmmword_22F457650;
              v47 = sub_22E4EF088((uint64_t)&v126, (unint64_t)&v122, 1);
              v48 = (char *)v126 + 24 * v127;
              v49 = *(_OWORD *)v47;
              *((_QWORD *)v48 + 2) = *(_QWORD *)(v47 + 16);
              *(_OWORD *)v48 = v49;
              v50 = v127 + 1;
              LODWORD(v127) = v127 + 1;
LABEL_46:
              if (v50)
              {
                v122 = (void *)sub_22E4DE978(a1, a3);
                *(_QWORD *)&v123 = sub_22F25E758(a1, a5);
                *((_QWORD *)&v123 + 1) = llvm::ConstantInt::get();
                v124 = llvm::ConstantInt::get();
                if (v40)
                  v64 = (llvm::Type ***)&v118;
                else
                  v64 = &v119;
                sub_22E4DEC4C((_QWORD *)a1, (uint64_t)v126, v127, 0x16u, (uint64_t)&v122, 4, v64, 1);
              }
              if ((*(_BYTE *)(a1 + 1869) & 1) != 0)
              {
                v51 = (_QWORD *)v22;
                if ((a7 & 0x10000000000) == 0 && sub_22F25E6C8(v103, a5))
                {
                  if (!v19)
                  {
                    v53 = v105;
                    if (!v105)
                    {
                      v54 = (uint64_t *)v119;
                      v125 = 257;
                      v55 = llvm::Constant::getNullValue(*v119, v52);
                      v56 = v54;
                      v51 = (_QWORD *)v22;
                      v53 = sub_22E3C18F4(a1 + 272, 33, v56, v55, (uint64_t)&v122);
                    }
                    v57 = v53;
                    if (!v51)
                    {
                      v122 = "vptr.null";
                      v125 = 259;
                      v51 = (_QWORD *)operator new();
                      llvm::BasicBlock::BasicBlock();
                    }
                    v122 = "vptr.not.null";
                    v125 = 259;
                    v58 = (uint64_t)v51;
                    v59 = operator new();
                    llvm::BasicBlock::BasicBlock();
                    sub_22E3D26FC((uint64_t *)(a1 + 272), v57, v59, v58, 0, 0);
                    v60 = (_QWORD *)v59;
                    v51 = (_QWORD *)v58;
                    sub_22E5ED9B4((_QWORD *)a1, v60, 0);
                  }
                  v122 = &v124;
                  v123 = xmmword_22F44E300;
                  sub_22F242C48((uint64_t)v116, (uint64_t)&v122);
                  v61 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 224) + 16);
                  v62 = *v111;
                  if ((*(_BYTE *)(*v111 + 8) & 0xF) != 0)
                    v62 = (uint64_t)sub_22F10D2BC(a5);
                  (*(void (**)(uint64_t, unint64_t, _BYTE *))(*(_QWORD *)v61 + 112))(v61, v62 & 0xFFFFFFFFFFFFFFF0, v116);
                  if ((sub_22F422AE0(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144) + 2008), 0x10000000000, 0) & 1) == 0)
                  {
                    v110 = v51;
                    llvm::hash_value();
                    v108 = llvm::ConstantInt::get();
                    v65 = (llvm::Type *)llvm::PointerType::get();
                    v66 = v119;
                    v67 = sub_22E66C868(*(_QWORD *)(a1 + 144) + 280, a5, 0);
                    v68 = *(unsigned __int8 *)(a1 + 130);
                    v112[0] = v66;
                    v112[1] = v67;
                    v112[2] = v68;
                    v113 = 0;
                    v114 = 0;
                    v115 = 0;
                    v69 = sub_22F10C2A4(*v111);
                    v70 = 0;
                    if (v69)
                    {
                      if ((*(_DWORD *)(v69 + 28) & 0x7Fu) - 35 >= 3)
                        v70 = 0;
                      else
                        v70 = v69;
                    }
                    v71 = sub_22E484FA4((_QWORD *)a1, (uint64_t)v112, v65, v70, 2);
                    v72 = *(_QWORD *)(a1 + 32);
                    v135 = 257;
                    v106 = sub_22E3D3028((uint64_t *)(a1 + 272), v71, v72, (uint64_t)&v131);
                    llvm::Type::getInt64Ty(*(llvm::Type **)(a1 + 336), v73);
                    v74 = llvm::ConstantInt::get();
                    llvm::Type::getInt64Ty(*(llvm::Type **)(a1 + 336), v75);
                    v76 = llvm::ConstantInt::get();
                    v135 = 257;
                    v77 = sub_22E3ED05C((uint64_t *)(a1 + 272), v108, v106, (uint64_t)&v131);
                    v130 = 257;
                    v78 = sub_22E3BDEA8(a1 + 272, v77, v74, (uint64_t)v129, 0, 0);
                    v135 = 257;
                    v79 = sub_22E3E4A40(a1 + 272, (uint64_t)v78, v76, (uint64_t)&v131, 0);
                    v130 = 257;
                    v80 = sub_22E3ED05C((uint64_t *)(a1 + 272), v79, (uint64_t)v78, (uint64_t)v129);
                    v135 = 257;
                    v81 = sub_22E3ED05C((uint64_t *)(a1 + 272), v106, v80, (uint64_t)&v131);
                    v130 = 257;
                    v82 = sub_22E3BDEA8(a1 + 272, v81, v74, (uint64_t)v129, 0, 0);
                    v135 = 257;
                    v83 = sub_22E3E4A40(a1 + 272, (uint64_t)v82, v76, (uint64_t)&v131, 0);
                    v130 = 257;
                    v84 = sub_22E3ED05C((uint64_t *)(a1 + 272), v83, (uint64_t)v82, (uint64_t)v129);
                    v135 = 257;
                    v85 = sub_22E3BDEA8(a1 + 272, v84, v74, (uint64_t)&v131, 0, 0);
                    v86 = *(_QWORD *)(a1 + 88);
                    v135 = 257;
                    v87 = sub_22E3C1740((uint64_t *)(a1 + 272), 38, (uint64_t)v85, v86, (uint64_t)&v131);
                    v88 = llvm::ArrayType::get(*(llvm::ArrayType **)(a1 + 88), (llvm::Type *)0x80);
                    v109 = (uint64_t *)sub_22F29B660(*(_QWORD *)(a1 + 144), v88, (uint64_t)"__ubsan_vptr_type_cache", 23);
                    v89 = llvm::ConstantInt::get();
                    v135 = 257;
                    v90 = (uint64_t *)sub_22E3E49C4(a1 + 272, v87, v89, (uint64_t)&v131);
                    llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 336), v91);
                    v121[0] = (uint64_t *)llvm::ConstantInt::get();
                    v121[1] = v90;
                    v92 = *(llvm::Type **)(a1 + 88);
                    v135 = 257;
                    v93 = sub_22E486CB4((uint64_t *)(a1 + 272), v88, v109, v121, 2, (uint64_t)&v131);
                    v94 = (63 - __clz(*(unsigned __int8 *)(a1 + 130))) | 0x100;
                    v130 = 257;
                    v95 = (uint64_t *)sub_22E3C3200((uint64_t *)(a1 + 272), v92, (uint64_t)v93, v94, 0, (uint64_t)v129);
                    v135 = 257;
                    v96 = (llvm::Type **)v87;
                    v97 = sub_22E3C18F4(a1 + 272, 32, v95, v87, (uint64_t)&v131);
                    v131 = sub_22E4DE978(a1, a3);
                    v132 = sub_22F25E758(a1, a5);
                    v98 = *(_QWORD *)(a1 + 144);
                    v99 = *v111;
                    if ((*(_BYTE *)(*v111 + 8) & 0xF) != 0)
                      v99 = (uint64_t)sub_22F10D2BC(a5);
                    v133 = sub_22F29C578(v98, (llvm::Type *)(v99 & 0xFFFFFFFFFFFFFFF0), 0);
                    v134 = llvm::ConstantInt::get();
                    v120[0] = v119;
                    v120[1] = v96;
                    *(_QWORD *)v129 = v97;
                    *(_OWORD *)&v129[8] = xmmword_22F4575B0;
                    sub_22E4DEC4C((_QWORD *)a1, (uint64_t)v129, 1, 4u, (uint64_t)&v131, 4, v120, 2);
                    v51 = v110;
                  }
                  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v116);
                  if (v122 != &v124)
                    free(v122);
                }
              }
              else
              {
                v51 = (_QWORD *)v22;
              }
              if (v51)
              {
                v63 = llvm::User::operator new((llvm::User *)0x40);
                llvm::BranchInst::BranchInst();
                v125 = 257;
                sub_22E3C12C8((uint64_t *)(a1 + 272), v63, (uint64_t)&v122);
                sub_22E5ED9B4((_QWORD *)a1, v51, 0);
              }
              if (v126 != v128)
                free(v126);
              *(_BYTE *)(a1 + 1880) = 0;
              return;
            }
          }
        }
        v50 = v127;
        goto LABEL_46;
      }
    }
  }
}

uint64_t sub_22E4DE978(uint64_t a1, int a2)
{
  llvm::Type *v3;
  char *v4;
  llvm::LLVMContext *v5;
  void **NullValue;
  llvm::LLVMContext *v7;
  size_t v9;
  int v10;
  unint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  size_t v16;
  _QWORD *v17;
  void **p_dst;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *__s;
  void **__dst;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  sub_22F1E2F68(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144) + 1992), a2, 1, (uint64_t)&__s);
  v4 = __s;
  if (!__s)
  {
    NullValue = (void **)llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 96), v3);
    goto LABEL_3;
  }
  v9 = strlen(__s);
  v10 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 184) + 88);
  if (v10 < 0)
  {
    llvm::sys::path::rbegin();
    llvm::sys::path::rend();
    if ((llvm::sys::path::reverse_iterator::operator==() & 1) == 0)
    {
      do
      {
        if (__CFADD__(v10++, 1))
          break;
        llvm::sys::path::reverse_iterator::operator++();
      }
      while (!llvm::sys::path::reverse_iterator::operator==());
    }
    v12 = llvm::sys::path::reverse_iterator::operator-();
  }
  else
  {
    if (!v10)
      goto LABEL_20;
    llvm::sys::path::begin();
    llvm::sys::path::end();
    if ((llvm::sys::path::const_iterator::operator==() & 1) == 0)
    {
      v14 = v10 - 1;
      do
      {
        v15 = v14;
        llvm::sys::path::const_iterator::operator++();
        if ((llvm::sys::path::const_iterator::operator==() & 1) != 0)
          break;
        v14 = v15 - 1;
      }
      while (v15);
    }
    if ((llvm::sys::path::const_iterator::operator==() & 1) != 0)
    {
      v4 = (char *)llvm::sys::path::filename();
      v9 = v16;
      goto LABEL_20;
    }
    llvm::sys::path::begin();
    v12 = llvm::sys::path::const_iterator::operator-();
  }
  if (v9 >= v12)
    v13 = v12;
  else
    v13 = v9;
  v4 += v13;
  v9 -= v13;
LABEL_20:
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v17 = *(_QWORD **)(a1 + 144);
  if (v9 >= 0x17)
  {
    v19 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v19 = v9 | 7;
    v20 = v19 + 1;
    p_dst = (void **)operator new(v19 + 1);
    v24 = v9;
    v25 = v20 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v25) = v9;
    p_dst = (void **)&__dst;
    if (!v9)
      goto LABEL_28;
  }
  memmove(p_dst, v4, v9);
LABEL_28:
  *((_BYTE *)p_dst + v9) = 0;
  v21 = sub_22F29BB8C(v17, (uint64_t)&__dst, ".src");
  if (SHIBYTE(v25) < 0)
    operator delete(__dst);
  NullValue = (void **)(v21 & 0xFFFFFFFFFFFFFFF8);
  sub_22F2A2EA8(*(uint64_t **)(*(_QWORD *)(a1 + 144) + 3480), (llvm::Value *)(v21 & 0xFFFFFFFFFFFFFFF8));
LABEL_3:
  __dst = NullValue;
  llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 336), v5);
  v24 = llvm::ConstantInt::get();
  llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 336), v7);
  v25 = llvm::ConstantInt::get();
  llvm::ConstantStruct::getTypeForElements();
  return llvm::ConstantStruct::get();
}

void sub_22E4DEC4C(_QWORD *a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, uint64_t a6, llvm::Type ***a7, uint64_t a8)
{
  uint64_t v11;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  int v29;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  llvm::Value *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  int v53;
  _BOOL4 v54;
  int v55;
  size_t v57;
  char *v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  _QWORD v63[2];
  char *v64;
  size_t v65;
  __int16 v66;
  void *v67;
  uint64_t v68;
  _BYTE v69[32];
  char *v70;
  uint64_t v71;
  _QWORD v72[2];
  __int16 v73;
  uint64_t v74;

  LODWORD(v11) = a3;
  v74 = *MEMORY[0x24BDAC8D0];
  v14 = (&off_24FA63AB8)[2 * a4];
  if (v14)
    v57 = strlen((&off_24FA63AB8)[2 * a4]);
  else
    v57 = 0;
  v62 = 0uLL;
  v61 = 0;
  v58 = v14;
  v59 = a4;
  if ((int)v11 >= 1)
  {
    v11 = v11;
    v15 = a2 + 16;
    do
    {
      v16 = *(_QWORD *)(a1[18] + 184);
      if ((*(_OWORD *)(v16 + 1256) & *(_OWORD *)(v15 - 8)) == 0)
      {
        if ((*(_OWORD *)(v16 + 1240) & *(_OWORD *)(v15 - 8)) == 0)
          v17 = (uint64_t *)&v62 + 1;
        else
          v17 = (uint64_t *)&v62;
      }
      else
      {
        v17 = &v61;
      }
      v18 = *(_QWORD *)(v15 - 16);
      v19 = *v17;
      if (*v17)
      {
        v73 = 257;
        v18 = sub_22E3E49C4((uint64_t)(a1 + 34), v19, v18, (uint64_t)&v70);
      }
      v15 += 24;
      *v17 = v18;
      --v11;
    }
    while (v11);
    if (v61)
      sub_22E4EA298((uint64_t)a1, v61, a4, "", 0);
  }
  v20 = *((_QWORD *)&v62 + 1);
  v21 = *((_QWORD *)&v62 + 1) != 0;
  if (v62 != 0)
  {
    if (*((_QWORD *)&v62 + 1))
      v22 = (_QWORD)v62 == 0;
    else
      v22 = 1;
    v23 = !v22;
    if (v22)
    {
      if (*((_QWORD *)&v62 + 1))
        v24 = *((_QWORD *)&v62 + 1);
      else
        v24 = v62;
    }
    else
    {
      v73 = 257;
      v24 = sub_22E3E49C4((uint64_t)(a1 + 34), *((uint64_t *)&v62 + 1), v62, (uint64_t)&v70);
    }
    v25 = *(_QWORD *)(a2 + 8);
    v26 = *(_QWORD *)(a2 + 16);
    v27 = v25 == 0x10000000000 || v25 == 0x400000;
    v54 = v21;
    v53 = v23;
    if (!v27 || v26)
    {
      if (v25 == 0x100000000 && !v26)
      {
        v28 = v24;
        v55 = 0;
        goto LABEL_45;
      }
      v28 = v24;
      v29 = v25 != 0x4000000000 || v26 != 0;
    }
    else
    {
      v28 = v24;
      v29 = 2;
    }
    v55 = v29;
LABEL_45:
    v70 = "cont";
    v73 = 259;
    v31 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v73 = 1283;
    v70 = "handler.";
    v72[0] = v14;
    v72[1] = v57;
    v32 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v33 = llvm::User::operator new((llvm::User *)0x40);
    MEMORY[0x23489C09C](v33, v31, v32, v28, 0);
    v73 = 257;
    v52 = a1 + 34;
    sub_22E3C12C8(a1 + 34, v33, (uint64_t)&v70);
    v60 = *(_QWORD *)(a1[18] + 232);
    llvm::MDBuilder::createBranchWeights((llvm::MDBuilder *)&v60);
    llvm::Instruction::setMetadata();
    sub_22E5ED9B4(a1, v32, 0);
    v70 = (char *)v72;
    v71 = 0x400000000;
    v67 = v69;
    v68 = 0x400000000;
    v34 = v54;
    v35 = v59;
    if ((*(_BYTE *)(*(_QWORD *)(a1[18] + 184) + 36) & 1) == 0)
    {
      if ((unint64_t)(a8 + 1) >= 5)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        if (a8 + 1 > (unint64_t)HIDWORD(v68))
          llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (a6)
      {
        llvm::ConstantStruct::getTypeForElements();
        llvm::ConstantStruct::get();
        v40 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x58);
        v66 = 257;
        v41 = llvm::GlobalVariable::GlobalVariable();
        *(_DWORD *)(v41 + 32) = *(_DWORD *)(v41 + 32) & 0xFFFFFF3F | 0x80;
        sub_22F2A2EA8(*(uint64_t **)(a1[18] + 3480), v40);
        v42 = a1[12];
        v66 = 257;
        v43 = sub_22E3C1740(v52, 49, (uint64_t)v40, v42, (uint64_t)v63);
        v44 = v71;
        if (v71 >= HIDWORD(v71))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v44 = v71;
        }
        *(_QWORD *)&v70[8 * v44] = v43;
        LODWORD(v71) = v71 + 1;
        v45 = a1[12];
        v46 = v68;
        if (v68 >= HIDWORD(v68))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v46 = v68;
        }
        *((_QWORD *)v67 + v46) = v45;
        LODWORD(v68) = v68 + 1;
        if (!a8)
          goto LABEL_62;
        goto LABEL_51;
      }
      for (; a8; --a8)
      {
LABEL_51:
        v36 = sub_22E4E7984(a1, *a7);
        v37 = v71;
        if (v71 >= (unint64_t)HIDWORD(v71))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v37 = v71;
        }
        *(_QWORD *)&v70[8 * v37] = v36;
        LODWORD(v71) = v71 + 1;
        v38 = a1[11];
        v39 = v68;
        if (v68 >= (unint64_t)HIDWORD(v68))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v39 = v68;
        }
        *((_QWORD *)v67 + v39) = v38;
        LODWORD(v68) = v68 + 1;
        ++a7;
      }
    }
LABEL_62:
    v47 = llvm::FunctionType::get();
    if (v53)
    {
      v66 = 1283;
      v63[0] = "non_fatal.";
      v64 = v58;
      v65 = v57;
      v48 = (_QWORD *)operator new();
      llvm::BasicBlock::BasicBlock();
      v66 = 1283;
      v63[0] = "fatal.";
      v64 = v58;
      v65 = v57;
      v49 = (_QWORD *)operator new();
      llvm::BasicBlock::BasicBlock();
      v50 = llvm::User::operator new((llvm::User *)0x40);
      MEMORY[0x23489C09C](v50, v48, v49, v20, 0);
      v66 = 257;
      v51 = v50;
      v35 = v59;
      sub_22E3C12C8(v52, v51, (uint64_t)v63);
      sub_22E5ED9B4(a1, v49, 0);
      sub_22E4EA8F0((uint64_t)a1, v47, (uint64_t)v70, v71, v59, v55, 1);
      sub_22E5ED9B4(a1, v48, 0);
      v34 = 0;
    }
    sub_22E4EA8F0((uint64_t)a1, v47, (uint64_t)v70, v71, v35, v55, v34);
    sub_22E5ED9B4(a1, v31, 0);
    if (v67 != v69)
      free(v67);
    if (v70 != (char *)v72)
      free(v70);
  }
}

uint64_t sub_22E4DF3BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::Instruction *v12;
  uint64_t *v13;
  uint64_t v14;

  if (a2 && *(unsigned __int8 *)(a2 + 16) <= 0x14u && a3 && *(unsigned __int8 *)(a3 + 16) <= 0x14u)
  {
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 104))(*(_QWORD *)(a1 + 72));
    if (v7)
      v8 = *(unsigned __int8 *)(v7 + 16) >= 0x1Cu;
    else
      v8 = 0;
    if (v8)
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v7, a4, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
      v9 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v9)
      {
        v10 = *(_QWORD *)a1;
        v11 = v10 + 16 * v9;
        do
        {
          llvm::Instruction::setMetadata();
          v10 += 16;
        }
        while (v10 != v11);
      }
    }
  }
  else
  {
    if ((a5 & 1) != 0)
    {
      v12 = (llvm::Instruction *)llvm::BinaryOperator::Create();
      llvm::Instruction::setIsExact(v12);
      v13 = (uint64_t *)a1;
      v14 = (uint64_t)v12;
    }
    else
    {
      v14 = llvm::BinaryOperator::Create();
      v13 = (uint64_t *)a1;
    }
    return sub_22E3C12C8(v13, v14, a4);
  }
  return v7;
}

void sub_22E4DF4E0(uint64_t a1, uint64_t a2, unsigned __int8 *a3, llvm::Type **a4, unint64_t a5, int a6)
{
  unsigned __int8 *v9;
  llvm::LLVMContext *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  _DWORD *v20;
  int v21;
  BOOL v22;
  _QWORD *v23;
  unsigned int v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unsigned __int8 *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BOOL8 v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  llvm::Type **v67;
  _BYTE v68[32];
  __int128 v69;
  _QWORD v70[6];

  v9 = a3;
  v70[5] = *MEMORY[0x24BDAC8D0];
  v67 = a4;
  *(_BYTE *)(a1 + 1880) = 1;
  if (!sub_22E3E4B64(*(_QWORD *)(*((_QWORD *)a3 + 1) & 0xFFFFFFFFFFFFFFF0)))
  {
    do
    {
      v16 = (uint64_t)v9;
      LODWORD(v17) = *v9;
      if (v17 > 0xD5)
      {
        if ((_DWORD)v17 == 233)
        {
          LODWORD(v17) = *(_DWORD *)v9;
          if ((*(_DWORD *)v9 & 0x7C0000) != 0x300000)
            break;
          v18 = v9 + 16;
        }
        else
        {
          if ((_DWORD)v17 != 214)
            break;
          v18 = v9 + 24;
        }
      }
      else if ((_DWORD)v17 == 155)
      {
        if ((**((_DWORD **)v9 + 2) & 0x18000) != 0)
          goto LABEL_74;
        v18 = v9 + 24;
        if (!v9[48])
          v18 = v9 + 32;
        LOBYTE(v17) = -101;
      }
      else
      {
        if ((_DWORD)v17 != 176)
          break;
        v17 = *((unsigned int *)v9 + 5);
        if ((_DWORD)v17 == -1)
          goto LABEL_74;
        v18 = &v9[8 * v17 + 40];
        LOBYTE(v17) = -80;
      }
      v9 = *(unsigned __int8 **)v18;
    }
    while (*(_QWORD *)v18 != v16);
    if ((v17 + 102) < 0xF5u || (*(_DWORD *)v16 & 0x1FC0000) != 0x300000)
      goto LABEL_74;
    v19 = *(unsigned __int8 **)(v16 + 16);
    v20 = *(_DWORD **)(*((_QWORD *)v19 + 1) & 0xFFFFFFFFFFFFFFF0);
    v21 = v20[4];
    if (v20)
      v22 = (v20[4] & 0xFEu) - 6 > 0xFFFFFFFB;
    else
      v22 = 0;
    if (!v22)
    {
      v20 = (_DWORD *)sub_22F10CF48((uint64_t)v20);
      v21 = v20[4];
    }
    if (v21 != 4)
    {
      if (v21 != 2)
        goto LABEL_67;
      v23 = v20 + 10;
      v24 = v20[12];
      if (v24 >= 0x41)
      {
        if (v24 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v20 + 10)) > 0x40)
          goto LABEL_67;
        v23 = (_QWORD *)*v23;
      }
      if (*v23 <= 1uLL)
        goto LABEL_33;
LABEL_67:
      v13 = *(_QWORD *)(*(_QWORD *)(v16 + 16) + 8);
      v33 = *(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0);
      v34 = *(_DWORD *)(v33 + 16);
      if (v33)
        v35 = (*(_DWORD *)(v33 + 16) & 0xFEu) - 6 > 0xFFFFFFFB;
      else
        v35 = 0;
      if (!v35)
      {
        v33 = sub_22F10CF48(*(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0));
        v34 = *(_DWORD *)(v33 + 16);
      }
      if (v34 == 2)
      {
        v14 = llvm::ConstantInt::get();
        goto LABEL_3;
      }
      if (v34 == 5)
      {
        v14 = (uint64_t)sub_22F297878(a1, v33);
        goto LABEL_3;
      }
      goto LABEL_74;
    }
    do
    {
LABEL_33:
      v25 = v19;
      LODWORD(v26) = *v19;
      if (v26 > 0xD5)
      {
        if ((_DWORD)v26 == 233)
        {
          LODWORD(v26) = *(_DWORD *)v19;
          if ((*(_DWORD *)v19 & 0x7C0000) != 0x300000)
            goto LABEL_67;
          v27 = v19 + 16;
        }
        else
        {
          if ((_DWORD)v26 != 214)
            break;
          v27 = v19 + 24;
        }
      }
      else if ((_DWORD)v26 == 155)
      {
        if ((**((_DWORD **)v19 + 2) & 0x18000) != 0)
          goto LABEL_67;
        v27 = v19 + 24;
        if (!v19[48])
          v27 = v19 + 32;
        LOBYTE(v26) = -101;
      }
      else
      {
        if ((_DWORD)v26 != 176)
          break;
        v26 = *((unsigned int *)v19 + 5);
        if ((_DWORD)v26 == -1)
          goto LABEL_67;
        v27 = &v19[8 * v26 + 40];
        LOBYTE(v26) = -80;
      }
      v19 = *(unsigned __int8 **)v27;
    }
    while (*(unsigned __int8 **)v27 != v25);
    if (v26 == 199)
    {
      if (*(_QWORD *)(*((_QWORD *)v25 + 2) + 80))
        goto LABEL_67;
    }
    else
    {
      if (v26 != 188)
        goto LABEL_67;
      v28 = *((_QWORD *)v25 + 3);
      if (!v28 || (*(_DWORD *)(v28 + 28) & 0x7Fu) - 52 < 0xFFFFFFFD)
        goto LABEL_67;
      v29 = *(_QWORD *)(v28 + 16);
      v30 = v29 & 0xFFFFFFFFFFFFFFF8;
      if ((v29 & 4) != 0)
        v30 = *(_QWORD *)v30;
      v31 = (*(_WORD *)(v30 + 8) & 0x7E) - 34;
      if (v30)
        v32 = v30 - 64;
      else
        v32 = 0;
      if (v31 >= 4)
        v32 = 0;
      if ((*(_DWORD *)(v32 + 72) & 0xE000) != 0x4000)
      {
        do
        {
          if ((*(_DWORD *)(v28 + 28) & 0x7Fu) - 49 < 3)
            break;
          v28 = *(_QWORD *)(v28 + 8) & 0xFFFFFFFFFFFFFFF8;
        }
        while (v28);
        while (1)
        {
          v28 = *(_QWORD *)(v28 + 8) & 0xFFFFFFFFFFFFFFF8;
          if (!v28)
            break;
          if ((*(_DWORD *)(v28 + 28) & 0x7Fu) - 49 < 3)
            goto LABEL_67;
        }
      }
    }
LABEL_74:
    v36 = *(_QWORD *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF0);
    v37 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v36 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    if (v37 == 39 || v37 == 32)
    {
      v36 = *(_QWORD *)(sub_22F10ACF8(*(_QWORD *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF0)) & 0xFFFFFFFFFFFFFFF0);
    }
    else if ((v37 & 0xFEu) - 2 <= 3)
    {
      while (1)
      {
        if (v36 && (*(_DWORD *)(v36 + 16) & 0xFEu) - 6 > 0xFFFFFFFB)
        {
          v66 = v36;
        }
        else
        {
          if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v36 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3)
            break;
          v66 = sub_22F10CF48(v36);
          if (!v66)
            break;
        }
        v36 = *(_QWORD *)(*(_QWORD *)(v66 + 32) & 0xFFFFFFFFFFFFFFF0);
      }
    }
    v38 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
    sub_22EF5CCD0(v38, *(_QWORD *)(v36 & 0xFFFFFFFFFFFFFFF0), (uint64_t)v68);
    if (!*(_QWORD *)v68)
      goto LABEL_4;
    v39 = sub_22EFFA6B0((unsigned __int8 *)v16);
    if (*v39 != 161)
      goto LABEL_4;
    v40 = *((_QWORD *)v39 + 2);
    if (!v40 || (*(_DWORD *)(v40 + 28) & 0x17F) != 0x140)
      goto LABEL_4;
    sub_22EFC8E88(*((_QWORD *)v39 + 2));
    v42 = *(uint64_t **)v41;
    v43 = *(unsigned int *)(v41 + 8);
    v44 = *(uint64_t **)v41;
    if ((_DWORD)v43)
    {
      v45 = 8 * v43;
      v44 = *(uint64_t **)v41;
      while (*(_WORD *)(*v44 + 32) != 83)
      {
        ++v44;
        v45 -= 8;
        if (!v45)
          goto LABEL_4;
      }
    }
    if (v44 == &v42[v43])
      goto LABEL_4;
    do
    {
      v47 = *v42++;
      v46 = v47;
    }
    while (*(_WORD *)(v47 + 32) != 83);
    if (*(_DWORD *)(v46 + 36) > 1u)
      goto LABEL_4;
    v48 = sub_22F247A84(a1 + 2952, v40);
    if ((*(_BYTE *)(a1 + 2952) & 1) != 0)
    {
      v49 = a1 + 2960;
      v50 = 2;
    }
    else
    {
      v49 = *(_QWORD *)(a1 + 2960);
      v50 = *(unsigned int *)(a1 + 2968);
    }
    if (v49 + 16 * v50 == v48)
      goto LABEL_4;
    v70[0] = *(_QWORD *)(v48 + 8);
    *(_QWORD *)v68 = 0;
    v51 = sub_22E3CED3C((uint64_t *)(a1 + 2904), v70, v68);
    v52 = *(_QWORD *)v68;
    if (!v51)
      v52 = *(_QWORD *)(a1 + 2904) + 56 * *(unsigned int *)(a1 + 2920);
    *(_OWORD *)v68 = *(_OWORD *)(v52 + 8);
    *(_OWORD *)&v68[16] = *(_OWORD *)(v52 + 24);
    v69 = *(_OWORD *)(v52 + 40);
    v53 = sub_22EF67C8C(v38);
    sub_22EFF605C(v16);
    v55 = v54;
    sub_22E6281E0(*(_QWORD **)(a1 + 144), v53, (uint64_t)v70);
    v56 = sub_22E4E6994(a1, (uint64_t)v68, 0, v53, v55, 2, (uint64_t)v70, 0);
    v57 = llvm::ConstantInt::get();
    LOWORD(v69) = 257;
    v58 = sub_22E4DF3BC(a1 + 272, v56, v57, (uint64_t)v68, 0);
    if (!v58)
      goto LABEL_4;
    v15 = v58;
    v13 = *(_QWORD *)(v16 + 8);
LABEL_101:
    v59 = sub_22F110A40(*(_QWORD *)(a5 & 0xFFFFFFFFFFFFFFF0));
    v60 = *(_QWORD *)(a1 + 88);
    LOWORD(v69) = 257;
    v61 = (uint64_t *)sub_22E3BF45C((uint64_t *)(a1 + 272), (uint64_t)a4, v60, v59, (uint64_t)v68);
    v62 = *(_QWORD *)(a1 + 88);
    LOWORD(v69) = 257;
    v63 = sub_22E3BF45C((uint64_t *)(a1 + 272), v15, v62, 0, (uint64_t)v68);
    sub_22EFF605C(a2);
    v70[0] = sub_22E4DE978(a1, v64);
    v70[1] = sub_22F25E758(a1, v13);
    v70[2] = sub_22F25E758(a1, a5);
    LOWORD(v69) = 257;
    if (a6)
      v65 = 36;
    else
      v65 = 37;
    *(_QWORD *)v68 = sub_22E3C18F4(a1 + 272, v65, v61, v63, (uint64_t)v68);
    *(_OWORD *)&v68[8] = xmmword_22F4575C0;
    sub_22E4DEC4C((_QWORD *)a1, (uint64_t)v68, 1, 0x12u, (uint64_t)v70, 3, &v67, 1);
    goto LABEL_4;
  }
  v13 = *((_QWORD *)v9 + 1);
  llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 336), v12);
  v14 = llvm::ConstantInt::get();
LABEL_3:
  v15 = v14;
  if (v14)
    goto LABEL_101;
LABEL_4:
  *(_BYTE *)(a1 + 1880) = 0;
}

uint64_t sub_22E4DFC28(_QWORD *a1, uint64_t a2, int a3)
{
  llvm::Value *v5;
  uint64_t v6;

  v5 = sub_22E4D86E0(a1, a2);
  v6 = (uint64_t)v5;
  if (v5 && *((unsigned __int8 *)v5 + 16) >= 0x1Cu)
  {
    sub_22F29EDF0(dword_22F457698[a3]);
    llvm::Instruction::addAnnotationMetadata();
  }
  return sub_22F25E298((uint64_t)a1, v6, a3);
}

uint64_t sub_22E4DFCA0(_QWORD *a1)
{
  llvm::detail::DoubleAPFloat *v1;
  uint64_t v2;

  v1 = (llvm::detail::DoubleAPFloat *)(a1 + 1);
  v2 = a1[1];
  if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) == v2)
    return llvm::detail::DoubleAPFloat::changeSign(v1);
  else
    return llvm::detail::IEEEFloat::changeSign(v1);
}

uint64_t *sub_22E4DFCE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;

  if (a3)
  {
    v3 = *(_QWORD *)(a2 + 8);
    if ((*(_BYTE *)(*(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF0) + 17) & 8) != 0)
    {
      v5 = a2;
      v6 = a1;
      sub_22E61DFC4(a3, v3);
      a2 = v5;
      a1 = v6;
    }
  }
  result = *(uint64_t **)(a1 + 824);
  if (result)
    return sub_22E49EFC4(result, *(_QWORD *)(a2 + 8));
  return result;
}

double sub_22E4DFD40@<D0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, int *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t **a6@<X5>, uint64_t a7@<X8>)
{
  unsigned int *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  __int128 v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  _BOOL4 v21;
  int v22;
  double result;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  __int128 v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  uint64_t v40;
  unsigned int v41;
  BOOL v42;
  int v43;
  BOOL v44;
  void *v45;
  uint64_t v46;
  unint64_t v47;
  unsigned int v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[56];
  int v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  _OWORD v56[3];
  _OWORD v57[3];
  _OWORD v58[3];
  __int128 v59[3];
  _BYTE v60[48];
  _OWORD v61[3];
  int v62;
  _BYTE v63[40];
  int v64;
  _BYTE v65[36];
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  do
  {
    v13 = (unsigned int *)a2;
    LODWORD(v14) = *a2;
    if (v14 > 0xD5)
    {
      if ((_DWORD)v14 == 233)
      {
        LODWORD(v14) = *(_DWORD *)a2;
        if ((*(_DWORD *)a2 & 0x7C0000) != 0x300000)
          break;
        v15 = a2 + 16;
      }
      else
      {
        if ((_DWORD)v14 != 214)
          break;
        v15 = a2 + 24;
      }
    }
    else if ((_DWORD)v14 == 155)
    {
      if ((**((_DWORD **)a2 + 2) & 0x18000) != 0)
        goto LABEL_63;
      v15 = a2 + 24;
      if (!a2[48])
        v15 = a2 + 32;
      LOBYTE(v14) = -101;
    }
    else
    {
      if ((_DWORD)v14 != 176)
        break;
      v14 = *((unsigned int *)a2 + 5);
      if ((_DWORD)v14 == -1)
        goto LABEL_63;
      v15 = &a2[8 * v14 + 40];
      LOBYTE(v14) = -80;
    }
    a2 = *(unsigned __int8 **)v15;
  }
  while (*(unsigned int **)v15 != v13);
  if ((v14 + 102) < 0xF5u)
  {
LABEL_59:
    if (v14 == 233)
    {
      if ((*v13 & 0x7C0000) == 0x100000)
      {
        v39 = (unsigned int *)*((_QWORD *)v13 + 2);
LABEL_76:
        sub_22E4D8D7C(a1, v39, (uint64_t)v51);
        if (a3)
          *a3 = v52;
        if (a4)
        {
          v49 = v54;
          *(_OWORD *)a4 = v53;
          *(_OWORD *)(a4 + 16) = v49;
          *(_QWORD *)(a4 + 32) = v55;
        }
        v50 = *(_OWORD *)&v51[24];
        *(_OWORD *)a7 = *(_OWORD *)&v51[8];
        *(_OWORD *)(a7 + 16) = v50;
        result = *(double *)&v51[40];
        *(_OWORD *)(a7 + 32) = *(_OWORD *)&v51[40];
        return result;
      }
    }
    else if ((v14 + 113) >= 0xFBu)
    {
      v48 = sub_22EFFA8F0((uint64_t)v13) - 1188;
      if (v48 <= 0x27 && ((1 << v48) & 0x8000000003) != 0)
      {
        v39 = *(unsigned int **)((char *)&v13[2 * (((unint64_t)*v13 >> 18) & 1) + 2]
                               + ((unint64_t)*v13 >> 24));
        goto LABEL_76;
      }
    }
LABEL_63:
    v40 = *(_QWORD *)(*((_QWORD *)v13 + 1) & 0xFFFFFFFFFFFFFFF0);
    if ((v40 && *(_BYTE *)(v40 + 16) == 39
       || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v40 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39
       && (v40 = sub_22F10CF48(v40)) != 0)
      && ((v41 = *(_BYTE *)(v40 + 40) & 7, v42 = v41 > 4, v43 = (1 << v41) & 0x13, !v42) ? (v44 = v43 == 0) : (v44 = 1),
          v44))
    {
      v45 = sub_22E4D7830((_QWORD *)a1, (uint64_t)v13, 0, 0, 0, a5, a6, 0);
    }
    else
    {
      *(_QWORD *)v51 = a1;
      *(_QWORD *)&v51[8] = a1 + 272;
      v51[16] = 0;
      *(_QWORD *)&v51[24] = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
      v45 = sub_22E50E974((uint64_t *)v51, (unsigned __int8 *)v13);
    }
    v46 = (uint64_t)v45;
    v47 = sub_22F10ACF8(*(_QWORD *)(*((_QWORD *)v13 + 1) & 0xFFFFFFFFFFFFFFF0));
    sub_22E3D2FA0(a1, v46, v47, 0, 1, a3, a4, (_QWORD *)a7);
    return result;
  }
  if ((v14 + 103) >= 0xF6u)
    sub_22E4DFCE0(*(_QWORD *)(a1 + 144), v13);
  v16 = (*v13 >> 18) & 0x7F;
  switch(v16)
  {
    case 1:
    case 5:
      goto LABEL_25;
    case 2:
    case 3:
    case 4:
    case 6:
    case 9:
    case 10:
    case 11:
      goto LABEL_58;
    case 7:
    case 8:
      if (a4)
      {
        sub_22E6281E0(*(_QWORD **)(a1 + 144), *((_QWORD *)v13 + 1), (uint64_t)v51);
        v17 = *(_OWORD *)&v51[16];
        *(_OWORD *)a4 = *(_OWORD *)v51;
        *(_OWORD *)(a4 + 16) = v17;
        *(_QWORD *)(a4 + 32) = *(_QWORD *)&v51[32];
      }
      sub_22E4DFD40(v51, a1);
      v18 = sub_22F10AEAC(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v13 + 2) + 8) & 0xFFFFFFFFFFFFFFF0));
      v56[0] = *(_OWORD *)v51;
      v56[1] = *(_OWORD *)&v51[16];
      v56[2] = *(_OWORD *)&v51[32];
      v19 = (uint64_t *)sub_22EFFB554((unsigned __int8 *)v13);
      v20 = &v19[v13[1]];
      v21 = sub_22E50E85C((uint64_t)v13);
      sub_22EFF605C((uint64_t)v13);
      *(_QWORD *)&result = sub_22E48032C((_QWORD *)a1, (uint64_t)v56, v18, v19, v20, v21, v22, a7).n128_u64[0];
      return result;
    case 12:
      return sub_22E4E04F0(a1, *((_QWORD *)v13 + 2), a3, a4, a7);
    default:
      if (v16 != 66)
        goto LABEL_58;
LABEL_25:
      v24 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v13 + 2) + 8) & 0xFFFFFFFFFFFFFFF0);
      if ((!v24 || *(_BYTE *)(v24 + 16) != 39)
        && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v24 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39
         || (v24 = sub_22F10CF48(v24)) == 0)
        || ((v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)) != 0
          ? (v26 = (*(_DWORD *)(v25 + 16) & 0xFF800FF) == 86507531)
          : (v26 = 0),
            v26))
      {
LABEL_58:
        LOBYTE(v14) = *(_BYTE *)v13;
        goto LABEL_59;
      }
      v64 = 2;
      *(_DWORD *)v63 = 0;
      memset(&v63[8], 0, 32);
      sub_22E4DFD40(v51, a1);
      if (a3)
        *a3 = v64;
      if (a4)
      {
        v27 = *(_OWORD *)&v63[16];
        *(_OWORD *)a4 = *(_OWORD *)v63;
        *(_OWORD *)(a4 + 16) = v27;
        *(_QWORD *)(a4 + 32) = *(_QWORD *)&v63[32];
      }
      if ((*(_BYTE *)v13 + 113) <= 9u)
      {
        v62 = 2;
        *(_DWORD *)v60 = 0;
        memset(&v60[8], 0, 32);
        v28 = *(_QWORD **)(a1 + 144);
        v29 = sub_22F10ACF8(*(_QWORD *)(*((_QWORD *)v13 + 1) & 0xFFFFFFFFFFFFFFF0));
        v30 = sub_22E62D754(v28, v29, &v62, (uint64_t)v60, 1);
        if (a4)
        {
          if (*(_QWORD *)(*(_QWORD *)(a1 + 144) + 264))
          {
            if (*(_DWORD *)a4 == 1 || (v31 = *(_DWORD *)v60, *(_DWORD *)v60 == 1))
            {
              memset(&v65[4], 0, 32);
              v31 = 1;
            }
            else
            {
              *(_OWORD *)v65 = *(_OWORD *)&v60[4];
              *(_OWORD *)&v65[16] = *(_OWORD *)&v60[20];
              *(_DWORD *)&v65[32] = *(_DWORD *)&v60[36];
            }
          }
          else
          {
            v31 = 0;
            memset(&v65[4], 0, 32);
          }
          *(_DWORD *)a4 = v31;
          v32 = *(_OWORD *)&v65[16];
          *(_OWORD *)(a4 + 4) = *(_OWORD *)v65;
          *(_OWORD *)(a4 + 20) = v32;
          *(_DWORD *)(a4 + 36) = *(_DWORD *)&v65[32];
        }
        if (v64)
        {
          if (a3)
            *a3 = v62;
          *(_QWORD *)&v51[16] = v30;
        }
      }
      if ((*(_BYTE *)(a1 + 1870) & 1) != 0
        && (*v13 & 0x1FC0000) == 0x40000
        && ((v33 = *(_QWORD *)(*((_QWORD *)v13 + 1) & 0xFFFFFFFFFFFFFFF0)) != 0 && *(_BYTE *)(v33 + 16) == 39
         || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v33 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39
         && (v33 = sub_22F10CF48(v33)) != 0))
      {
        v34 = *(_QWORD *)(v33 + 32);
        v61[0] = *(_OWORD *)v51;
        v61[1] = *(_OWORD *)&v51[16];
        v61[2] = *(_OWORD *)&v51[32];
        sub_22F0D5A50((uint64_t)v13);
        sub_22E485DB4(a1, v34, (uint64_t)v61, 1, 3u, v35);
      }
      v36 = sub_22F10ACF8(*(_QWORD *)(*((_QWORD *)v13 + 1) & 0xFFFFFFFFFFFFFFF0));
      v37 = sub_22E66C868(*(_QWORD *)(a1 + 144) + 280, v36, 0);
      v59[0] = *(_OWORD *)v51;
      v59[1] = *(_OWORD *)&v51[16];
      v59[2] = *(_OWORD *)&v51[32];
      *(_WORD *)&v65[32] = 257;
      sub_22E3BEE6C((uint64_t *)(a1 + 272), v59, v37, (uint64_t)v65, (uint64_t)v60);
      *(_OWORD *)v51 = *(_OWORD *)v60;
      *(_OWORD *)&v51[16] = *(_OWORD *)&v60[16];
      *(_OWORD *)&v51[32] = *(_OWORD *)&v60[32];
      if ((*v13 & 0x1FC0000) == 0x1080000)
      {
        v58[0] = *(_OWORD *)v51;
        v58[1] = *(_OWORD *)&v51[16];
        v58[2] = *(_OWORD *)&v51[32];
        v38 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 144) + 280), *((llvm::LLVMContext **)v13 + 1));
        *(_WORD *)&v65[32] = 257;
        sub_22E3C1624((uint64_t *)(a1 + 272), (uint64_t)v58, v38, v37, (uint64_t)v65, (uint64_t)v60);
        *(_OWORD *)v51 = *(_OWORD *)v60;
        *(_OWORD *)&v51[16] = *(_OWORD *)&v60[16];
        *(_OWORD *)&v51[32] = *(_OWORD *)&v60[32];
      }
      v57[1] = *(_OWORD *)&v51[16];
      v57[2] = *(_OWORD *)&v51[32];
      v57[0] = *(_OWORD *)v51;
      *(_QWORD *)&result = sub_22E5E01E0(a1, (uint64_t)v57, *(_QWORD *)(*((_QWORD *)v13 + 2) + 8), *((_QWORD *)v13 + 1), a7).n128_u64[0];
      break;
  }
  return result;
}

double sub_22E4E04F0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  double result;
  __int128 v16[3];
  const char *v17;
  __int16 v18;
  _OWORD v19[3];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23[3];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  int v31;

  sub_22E4D8D7C(&v27);
  v24 = v28;
  v25 = v29;
  v26 = v30;
  v10 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 144) + 280), *(llvm::LLVMContext **)(a2 + 8));
  v23[0] = v24;
  v23[1] = v25;
  v23[2] = v26;
  LOWORD(v22) = 257;
  sub_22E3BEE6C((uint64_t *)(a1 + 272), v23, v10, (uint64_t)&v20, (uint64_t)&v24);
  v11 = *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 5)
  {
    v19[0] = v24;
    v19[1] = v25;
    v19[2] = v26;
    v17 = "arraydecay";
    v18 = 259;
    sub_22E486A58((uint64_t *)(a1 + 272), (uint64_t)v19, 0, (uint64_t)&v17, (uint64_t)&v20);
    v24 = v20;
    v25 = v21;
    v26 = v22;
    v11 = *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0);
  }
  if (!v11 || (*(_DWORD *)(v11 + 16) & 0xFEu) - 6 <= 0xFFFFFFFB)
    v11 = sub_22F10CF48(v11);
  v12 = *(_QWORD *)(v11 + 32);
  if (a3)
    *a3 = v31;
  if (a4)
  {
    sub_22E6281E0(*(_QWORD **)(a1 + 144), v12, (uint64_t)&v20);
    v13 = v21;
    *(_OWORD *)a4 = v20;
    *(_OWORD *)(a4 + 16) = v13;
    *(_QWORD *)(a4 + 32) = v22;
  }
  v16[0] = v24;
  v16[1] = v25;
  v16[2] = v26;
  v14 = sub_22E66C868(*(_QWORD *)(a1 + 144) + 280, v12, 0);
  LOWORD(v22) = 257;
  *(_QWORD *)&result = sub_22E3BEE6C((uint64_t *)(a1 + 272), v16, v14, (uint64_t)&v20, a5).n128_u64[0];
  return result;
}

unint64_t sub_22E4E06B0@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  char v18;
  const char *v19;
  __int16 v20;

  v4 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v5)
    v6 = (*(_DWORD *)(v5 + 16) & 0xFF800FF) == 86507531;
  else
    v6 = 0;
  if (v6)
  {
    v17 = *(_BYTE *)(a3 + 48);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
LABEL_16:
    v16 = v17 & 0xF8;
    goto LABEL_17;
  }
  v8 = result;
  v9 = sub_22E619D68(a2);
  if (!v9)
  {
    sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(v8 + 144) + 280), (llvm::LLVMContext *)a2);
    result = llvm::UndefValue::get();
    v17 = *(_BYTE *)(a3 + 48);
    *(_QWORD *)a3 = result;
    *(_QWORD *)(a3 + 8) = 0;
    goto LABEL_16;
  }
  if (v9 == 2)
  {
    v19 = "undef.agg.tmp";
    v20 = 259;
    v10 = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(v8 + 144) + 144), a2);
    result = sub_22E4D85B8(v8, a2, v10, (uint64_t)&v19, 0);
    v12 = result & 0xFFFFFFFFFFFFFFF8;
    if (result <= 7)
      v12 = 0;
    v13 = v11 & 0xFFFFFFFFFFFFFFF8;
    if (result <= 7)
      v13 = 0;
    v14 = 1 << (v11 & 7 | (8 * (result & 7)));
    v15 = *(_BYTE *)(a3 + 48);
    if (result < 8)
      v14 = 0;
    *(_QWORD *)a3 = v12;
    *(_QWORD *)(a3 + 8) = v13;
    *(_QWORD *)(a3 + 16) = v14;
    *(_DWORD *)(a3 + 24) = 0;
    v16 = v15 & 0xF8 | 4;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
  }
  else
  {
    if (*(_BYTE *)(v4 + 16) != 12)
      v4 = sub_22F10CF48(v4);
    sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(v8 + 144) + 280), *(llvm::LLVMContext **)(v4 + 32));
    result = llvm::UndefValue::get();
    v18 = *(_BYTE *)(a3 + 48);
    *(_QWORD *)a3 = result;
    *(_QWORD *)(a3 + 8) = result;
    v16 = v18 & 0xF8 | 2;
  }
LABEL_17:
  *(_BYTE *)(a3 + 48) = v16;
  return result;
}

BOOL sub_22E4E0824(_DWORD *a1)
{
  int v1;
  _DWORD **v2;

  while (1)
  {
    v1 = *(unsigned __int8 *)a1;
    if (v1 == 133 || v1 == 148)
      return v1 == 133;
    if ((v1 + 102) >= 0xF5u)
      goto LABEL_8;
    if (v1 == 233)
    {
      if ((*a1 & 0x7C0000) != 0x300000)
        return v1 == 133;
LABEL_8:
      v2 = (_DWORD **)(a1 + 4);
      goto LABEL_9;
    }
    if (v1 != 214)
      return v1 == 133;
    v2 = (_DWORD **)(a1 + 6);
LABEL_9:
    a1 = *v2;
  }
}

__n128 sub_22E4E0888@<Q0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  __n128 v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  __n128 result;
  int v16;
  uint64_t v17;
  _DWORD **i;
  _DWORD *v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int v25;
  _OWORD v26[8];
  uint64_t v27;

  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_DWORD *)(a4 + 32) = 0;
  *(_QWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 40) = 0;
  *(_QWORD *)(a4 + 48) = 0;
  *(_QWORD *)(a4 + 64) = 0;
  *(_QWORD *)(a4 + 72) = 0;
  *(_QWORD *)(a4 + 84) = 2;
  v8 = 0uLL;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  if (*a2 != 107)
    goto LABEL_19;
  if ((*(_BYTE *)(a1 + 1866) & 1) == 0)
  {
    v9 = a2 + 24;
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v11 = *(_DWORD *)(v10 + 16);
    if (v10)
      v12 = v11 == 11;
    else
      v12 = 0;
    if (v12)
    {
      if (((*(_DWORD *)(v10 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
        goto LABEL_15;
    }
    else if (v10 && v11 == 44)
    {
      v13 = sub_22F114198(*(_QWORD *)(v10 + 24));
      if ((*(_BYTE *)(v13 + 74) & 1) == 0 && *(_QWORD *)(v13 + 128) <= 7uLL
        || (*(_QWORD *)(sub_22F114198(*(_QWORD *)(v10 + 24)) + 72) & 0x8000000000) != 0)
      {
LABEL_15:
        v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        if (v14 && *(_BYTE *)(v14 + 16) == 39 && (*(_DWORD *)(v14 + 40) & 6) == 2)
          goto LABEL_18;
LABEL_19:
        sub_22E4D8D7C((_QWORD *)a4);
        goto LABEL_20;
      }
    }
    else if (v11 != 9)
    {
      goto LABEL_15;
    }
    v9 = a2 + 16;
    goto LABEL_15;
  }
LABEL_18:
  result.n128_f64[0] = sub_22E4E0AF8(a4, (_QWORD *)a1, (uint64_t)a2, 1, v8);
LABEL_20:
  v16 = *a2;
  if (v16 != 161 && !*(_DWORD *)a4)
  {
    if (v16 == 188)
    {
      v17 = 33587200;
      for (i = (_DWORD **)(a2 + 16); ; i = (_DWORD **)(v19 + 6))
      {
        while (1)
        {
          v19 = *i;
          v20 = *(unsigned __int8 *)v19;
          if (v20 == 133)
            goto LABEL_37;
          if (v20 == 148)
            goto LABEL_34;
          if ((v20 + 102) < 0xF5u)
            break;
LABEL_30:
          i = (_DWORD **)(v19 + 4);
        }
        if (v20 != 214)
        {
          if (v20 != 233 || (*v19 & 0x7C0000) != 0x300000)
          {
LABEL_34:
            if (**((unsigned __int8 **)a2 + 2) != 161)
              break;
            v17 = 0x2000000;
            goto LABEL_37;
          }
          goto LABEL_30;
        }
      }
    }
    v17 = 0;
LABEL_37:
    sub_22EFF605C((uint64_t)a2);
    v21 = *(_OWORD *)(a4 + 112);
    v26[6] = *(_OWORD *)(a4 + 96);
    v26[7] = v21;
    v27 = *(_QWORD *)(a4 + 128);
    v22 = *(_OWORD *)(a4 + 48);
    v26[2] = *(_OWORD *)(a4 + 32);
    v26[3] = v22;
    v23 = *(_OWORD *)(a4 + 80);
    v26[4] = *(_OWORD *)(a4 + 64);
    v26[5] = v23;
    v24 = *(_OWORD *)(a4 + 16);
    v26[0] = *(_OWORD *)a4;
    v26[1] = v24;
    sub_22E4E23C0(a1, a3, v25, (uint64_t)v26, *((_QWORD *)a2 + 1), v17, 0, 0);
  }
  return result;
}

double sub_22E4E0AF8(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, __n128 a5)
{
  _QWORD *v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  int v19;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  BOOL v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  int v46;
  BOOL v47;
  uint64_t v48;
  unsigned __int8 **v49;
  uint64_t v50;
  int v51;
  BOOL v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  BOOL v85;
  int v86;
  uint64_t v87;
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  __n128 v93;
  uint64_t v94;
  unsigned __int8 *v95;
  unsigned __int8 *v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  __int128 v105;
  double result;
  __int128 v107;
  unsigned __int8 *v108;
  unsigned __int8 *v109;
  uint64_t v110;
  int v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  unsigned __int8 *v116;
  unint64_t v117;
  __int16 v118;
  int v119;
  unsigned __int8 *v120;
  uint64_t v121;
  int v122;
  unsigned __int8 *v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  unsigned int v128;
  unsigned int v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  unsigned __int8 *v133;
  __int128 v134;
  uint64_t v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  int v152;
  uint64_t v153;
  unsigned __int8 *v154;
  unint64_t v155;
  __int16 v156;
  unsigned __int8 *v157;
  uint64_t v158;
  int v159;
  unsigned int v160;
  unsigned __int8 *v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  __n128 v166;
  llvm::Constant *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t AggregateElement;
  unsigned int *v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  int v175;
  unsigned __int8 *v176;
  uint64_t *v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  unsigned int v181;
  int v182;
  uint64_t v183;
  int v184;
  unsigned int v185;
  unsigned int v186;
  uint64_t v187;
  int v188;
  unint64_t v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  unsigned __int8 *v193;
  __int128 v194;
  uint64_t v195;
  llvm::Instruction *v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  int v200;
  int v201;
  unsigned __int8 *v202;
  uint64_t *v203;
  uint64_t v204;
  int v205;
  uint64_t v206;
  unsigned int v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  int v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  int v217;
  __int128 v218;
  __int128 v219;
  __int128 v220[3];
  __int128 v221;
  uint64_t v222;
  uint64_t v223;
  __int128 v224;
  __int128 v225[3];
  __int128 v226[3];
  __int128 v227[3];
  _BYTE v228[40];
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232[3];
  _BYTE v233[56];
  __int128 v234;
  __int128 v235;
  __int128 v236;
  uint64_t *v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  _BYTE v241[56];
  llvm::Constant *v242;
  uint64_t v243;
  int v244;
  int v245;
  _QWORD v246[5];
  unsigned __int8 v247;
  char v248;
  unsigned __int8 *v249;
  const char *v250;
  __int16 v251;
  _BYTE v252[48];
  __int128 v253;
  __int128 v254;
  __int128 v255;
  _BYTE v256[36];
  _OWORD v257[2];
  __int128 v258;
  uint64_t v259;

  v259 = *MEMORY[0x24BDAC8D0];
  v249 = (unsigned __int8 *)a3;
  v248 = a4;
  v9 = (_QWORD *)(a3 + 24);
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_DWORD *)(v10 + 16);
  if (v10)
    v12 = v11 == 11;
  else
    v12 = 0;
  if (!v12)
  {
    if (v10 && v11 == 44)
    {
      v13 = sub_22F114198(*(_QWORD *)(v10 + 24));
      if ((*(_BYTE *)(v13 + 74) & 1) == 0)
      {
        v14 = (uint64_t)v9;
        if (*(_QWORD *)(v13 + 128) <= 7uLL)
          goto LABEL_13;
      }
      v15 = sub_22F114198(*(_QWORD *)(v10 + 24));
      v14 = (uint64_t)v9;
      if ((*(_QWORD *)(v15 + 72) & 0x8000000000) != 0)
        goto LABEL_13;
    }
    else
    {
      v14 = a3 + 24;
      if (v11 != 9)
        goto LABEL_13;
    }
    goto LABEL_12;
  }
  v14 = a3 + 24;
  if (((*(_DWORD *)(v10 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
LABEL_12:
    v14 = a3 + 16;
LABEL_13:
  v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v14 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v16 && *(_BYTE *)(v16 + 16) == 39
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39
    && (v16 = sub_22F10CF48(v16)) != 0)
  {
    v17 = *(_BYTE *)(v16 + 40) & 7;
    v18 = v17 > 4;
    v19 = (1 << v17) & 0x13;
    if (v18 || v19 == 0)
      return sub_22F260294(a1, a2, a3, a4);
  }
  v23 = *(_QWORD *)(a3 + 16);
  v21 = *(_QWORD *)(a3 + 24);
  v22 = (_QWORD *)(a3 + 16);
  v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v25 = *(_DWORD *)(v24 + 16);
  if (v24)
    v26 = v25 == 11;
  else
    v26 = 0;
  if (v26)
  {
    v28 = v22;
    if (((*(_DWORD *)(v24 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
      goto LABEL_33;
    goto LABEL_32;
  }
  if (!v24 || v25 != 44)
  {
    v28 = v22;
    if (v25 != 9)
      goto LABEL_33;
LABEL_32:
    v28 = v9;
    goto LABEL_33;
  }
  v27 = sub_22F114198(*(_QWORD *)(v24 + 24));
  if ((*(_BYTE *)(v27 + 74) & 1) != 0 || (v28 = v22, *(_QWORD *)(v27 + 128) > 7uLL))
  {
    v29 = sub_22F114198(*(_QWORD *)(v24 + 24));
    v28 = v22;
    if ((*(_QWORD *)(v29 + 72) & 0x8000000000) == 0)
      goto LABEL_32;
  }
LABEL_33:
  v30 = *v9;
  if (v23 != *v28)
  {
    v31 = 0;
    goto LABEL_52;
  }
  v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v30 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v33 = *(_DWORD *)(v32 + 16);
  if (v32)
    v34 = v33 == 11;
  else
    v34 = 0;
  if (!v34)
  {
    if (v32 && v33 == 44)
    {
      v35 = sub_22F114198(*(_QWORD *)(v32 + 24));
      if ((*(_BYTE *)(v35 + 74) & 1) == 0)
      {
        v36 = v22;
        if (*(_QWORD *)(v35 + 128) <= 7uLL)
          goto LABEL_51;
      }
      v37 = sub_22F114198(*(_QWORD *)(v32 + 24));
      v36 = v22;
      if ((*(_QWORD *)(v37 + 72) & 0x8000000000) != 0)
        goto LABEL_51;
    }
    else
    {
      v36 = v22;
      if (v33 != 9)
        goto LABEL_51;
    }
    goto LABEL_50;
  }
  v36 = v22;
  if (((*(_DWORD *)(v32 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
LABEL_50:
    v36 = v9;
LABEL_51:
  v38 = *v36;
  *(_QWORD *)v241 = a2;
  *(_QWORD *)&v241[8] = a2 + 34;
  v241[16] = 0;
  *(_QWORD *)&v241[24] = *(_QWORD *)(a2[18] + 232);
  v31 = sub_22E50E974(v241, v38, a5);
  v30 = *v9;
LABEL_52:
  v247 = 0;
  v246[0] = v31;
  v246[1] = &v249;
  v246[2] = a2;
  v246[3] = &v247;
  v246[4] = &v248;
  v39 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v30 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v40 = *(_DWORD *)(v39 + 16);
  if (v39)
    v41 = v40 == 11;
  else
    v41 = 0;
  if (v41)
  {
    if (((*(_DWORD *)(v39 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
      goto LABEL_64;
    goto LABEL_63;
  }
  if (!v39 || v40 != 44)
  {
    if (v40 != 9)
      goto LABEL_64;
LABEL_63:
    v9 = v22;
    goto LABEL_64;
  }
  v42 = sub_22F114198(*(_QWORD *)(v39 + 24));
  if (((*(_BYTE *)(v42 + 74) & 1) != 0 || *(_QWORD *)(v42 + 128) > 7uLL)
    && (*(_QWORD *)(sub_22F114198(*(_QWORD *)(v39 + 24)) + 72) & 0x8000000000) == 0)
  {
    goto LABEL_63;
  }
LABEL_64:
  v43 = v249;
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v9 + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 16)
     - 55 > 1)
    goto LABEL_80;
  v44 = v249 + 24;
  v45 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v249 + 3) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v46 = *(_DWORD *)(v45 + 16);
  if (v45)
    v47 = v46 == 11;
  else
    v47 = 0;
  if (v47)
  {
    if (((*(_DWORD *)(v45 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
      goto LABEL_79;
    goto LABEL_78;
  }
  if (!v45 || v46 != 44)
  {
    if (v46 != 9)
      goto LABEL_79;
LABEL_78:
    v44 = v43 + 16;
    goto LABEL_79;
  }
  v48 = sub_22F114198(*(_QWORD *)(v45 + 24));
  if (((*(_BYTE *)(v48 + 74) & 1) != 0 || *(_QWORD *)(v48 + 128) > 7uLL)
    && (*(_QWORD *)(sub_22F114198(*(_QWORD *)(v45 + 24)) + 72) & 0x8000000000) == 0)
  {
    goto LABEL_78;
  }
LABEL_79:
  v43 = v249;
  if (**(unsigned __int8 **)v44 != 167)
  {
    v64 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v249 + 3) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v65 = *(_DWORD *)(v64 + 16);
    if (!v64 || v65 != 11)
    {
      if (v64)
      {
        if (v65 == 44)
        {
          v68 = sub_22F114198(*(_QWORD *)(v64 + 24));
          if ((*(_BYTE *)(v68 + 74) & 1) != 0 || *(_QWORD *)(v68 + 128) > 7uLL)
            sub_22F114198(*(_QWORD *)(v64 + 24));
        }
      }
    }
    sub_22E4D8D7C(v241);
    v94 = sub_22E4EB480((uint64_t)v246, 0, v93);
    v238 = *(_OWORD *)&v241[8];
    v239 = *(_OWORD *)&v241[24];
    v240 = *(_OWORD *)&v241[40];
    v95 = v249;
    v96 = v249 + 24;
    v97 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v249 + 3) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v98 = *(_DWORD *)(v97 + 16);
    if (v97 && v98 == 11)
    {
      if (((*(_DWORD *)(v97 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
        goto LABEL_170;
    }
    else if (v97 && v98 == 44)
    {
      v99 = sub_22F114198(*(_QWORD *)(v97 + 24));
      if ((*(_BYTE *)(v99 + 74) & 1) == 0 && *(_QWORD *)(v99 + 128) <= 7uLL
        || (*(_QWORD *)(sub_22F114198(*(_QWORD *)(v97 + 24)) + 72) & 0x8000000000) != 0)
      {
        goto LABEL_170;
      }
    }
    else if (v98 != 9)
    {
LABEL_170:
      v100 = *(_QWORD *)(*(_QWORD *)v96 + 8);
      v101 = v244;
      memset(&v256[4], 0, 32);
      *(_DWORD *)a1 = 1;
      *(_QWORD *)(a1 + 56) = v94;
      v102 = *(_QWORD *)((v100 & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v102 & 8) != 0)
      {
        v104 = *(_QWORD *)((v102 & 0xFFFFFFFFFFFFFFF0) + 0x18);
        v103 = *(_QWORD *)((v102 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
      }
      else
      {
        v103 = 0;
        v104 = 0;
      }
      v105 = v239;
      *(_OWORD *)(a1 + 8) = v238;
      *(_OWORD *)(a1 + 24) = v105;
      *(_OWORD *)(a1 + 40) = v240;
      *(_OWORD *)(a1 + 92) = *(_OWORD *)v256;
      result = *(double *)&v256[16];
      *(_OWORD *)(a1 + 108) = *(_OWORD *)&v256[16];
      *(_DWORD *)(a1 + 124) = *(_DWORD *)&v256[32];
      *(_QWORD *)(a1 + 64) = v100;
      *(_QWORD *)(a1 + 72) = v103 | v104 | (v102 | v100) & 7;
      *(_DWORD *)(a1 + 84) = v101;
      *(_DWORD *)(a1 + 88) = 0;
      *(_BYTE *)(a1 + 80) &= 0x80u;
      *(_QWORD *)(a1 + 128) = 0;
      return result;
    }
    v96 = v95 + 16;
    goto LABEL_170;
  }
LABEL_80:
  v49 = (unsigned __int8 **)(v43 + 24);
  v50 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v43 + 3) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v51 = *(_DWORD *)(v50 + 16);
  if (v50)
    v52 = v51 == 11;
  else
    v52 = 0;
  if (v52)
  {
    if (((*(_DWORD *)(v50 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
      goto LABEL_92;
    goto LABEL_91;
  }
  if (!v50 || v51 != 44)
  {
    if (v51 != 9)
      goto LABEL_92;
LABEL_91:
    v49 = (unsigned __int8 **)(v43 + 16);
    goto LABEL_92;
  }
  v53 = sub_22F114198(*(_QWORD *)(v50 + 24));
  if (((*(_BYTE *)(v53 + 74) & 1) != 0 || *(_QWORD *)(v53 + 128) > 7uLL)
    && (*(_QWORD *)(sub_22F114198(*(_QWORD *)(v50 + 24)) + 72) & 0x8000000000) == 0)
  {
    goto LABEL_91;
  }
LABEL_92:
  if (**v49 == 167)
  {
    v144 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v249 + 3) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v145 = *(_DWORD *)(v144 + 16);
    if (!v144 || v145 != 11)
    {
      if (v144)
      {
        if (v145 == 44)
        {
          v148 = sub_22F114198(*(_QWORD *)(v144 + 24));
          if ((*(_BYTE *)(v148 + 74) & 1) != 0 || *(_QWORD *)(v148 + 128) > 7uLL)
            sub_22F114198(*(_QWORD *)(v144 + 24));
        }
      }
    }
    sub_22E4D8D7C(v241);
    v237 = (uint64_t *)sub_22E4EB480((uint64_t)v246, 1, v166);
    *(_OWORD *)v233 = *(_OWORD *)v241;
    *(_OWORD *)&v233[16] = *(_OWORD *)&v241[16];
    *(_OWORD *)&v233[32] = *(_OWORD *)&v241[32];
    v167 = v242;
    *(_QWORD *)&v233[48] = *(_QWORD *)&v241[48];
    v168 = *(_QWORD *)(v243 & 0xFFFFFFFFFFFFFFF0);
    if (!v168 || *(unsigned __int8 *)(v168 + 16) - 57 <= 0xFFFFFFFD)
      v168 = sub_22F10CF48(v168);
    v169 = sub_22E66C868(a2[18] + 280, *(_QWORD *)(v168 + 32), 0);
    *(_OWORD *)v252 = *(_OWORD *)&v233[8];
    *(_OWORD *)&v252[16] = *(_OWORD *)&v233[24];
    *(_OWORD *)&v252[32] = *(_OWORD *)&v233[40];
    *(_QWORD *)&v257[0] = "conv.ptr.element";
    LOWORD(v258) = 259;
    sub_22E3BEE6C(a2 + 34, (__int128 *)v252, v169, (uint64_t)v257, (uint64_t)&v253);
    AggregateElement = llvm::Constant::getAggregateElement(v167);
    v171 = (unsigned int *)(AggregateElement + 24);
    if (*(_DWORD *)(AggregateElement + 32) >= 0x41u)
      v171 = *(unsigned int **)v171;
    v172 = *v171;
    v257[0] = v253;
    v257[1] = v254;
    v258 = v255;
    v250 = "vector.elt";
    v251 = 259;
    sub_22F2486C4(a2 + 34, (uint64_t)v257, v172, (uint64_t)&v250, (uint64_t)&v234);
    v173 = *(_QWORD *)(v243 & 0xFFFFFFFFFFFFFFF0);
    if (!v173 || *(unsigned __int8 *)(v173 + 16) - 57 <= 0xFFFFFFFD)
      v173 = sub_22F10CF48(v173);
    v174 = *(_QWORD *)(v173 + 32);
    v232[0] = v234;
    v232[1] = v235;
    v232[2] = v236;
    v175 = v247;
    v176 = v249;
    v177 = (uint64_t *)(v249 + 24);
    v178 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v249 + 3) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v179 = *(_DWORD *)(v178 + 16);
    if (v178 && v179 == 11)
    {
      if (((*(_DWORD *)(v178 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
        goto LABEL_270;
    }
    else if (v178 && v179 == 44)
    {
      v180 = sub_22F114198(*(_QWORD *)(v178 + 24));
      if ((*(_BYTE *)(v180 + 74) & 1) == 0 && *(_QWORD *)(v180 + 128) <= 7uLL
        || (*(_QWORD *)(sub_22F114198(*(_QWORD *)(v178 + 24)) + 72) & 0x8000000000) != 0)
      {
        goto LABEL_270;
      }
    }
    else if (v179 != 9)
    {
LABEL_270:
      sub_22EFF605C(*v177);
      *(_QWORD *)v252 = "arrayidx";
      *(_WORD *)&v252[32] = 259;
      sub_22E4EB808((uint64_t)&v253, (uint64_t)a2, v232, &v237, 1, v174, 1, v175 != 0, v181, 0, 0, (const char **)v252);
      v235 = v254;
      v236 = v255;
      v234 = v253;
      v229 = v253;
      v230 = v254;
      v231 = v255;
      v182 = v244;
      if (v245 == 1)
      {
        *(_DWORD *)v228 = 1;
        memset(&v228[8], 0, 32);
      }
      else
      {
        sub_22E6281E0((_QWORD *)a2[18], v174, (uint64_t)v228);
      }
      v253 = v229;
      v254 = v230;
      v255 = v231;
      v183 = *(_QWORD *)(a2[18] + 144);
      *(_OWORD *)v252 = *(_OWORD *)v228;
      *(_OWORD *)&v252[16] = *(_OWORD *)&v228[16];
      *(_QWORD *)&v252[32] = *(_QWORD *)&v228[32];
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 40) = 0;
      *(_QWORD *)(a1 + 48) = 0;
      *(_QWORD *)(a1 + 64) = 0;
      *(_QWORD *)(a1 + 72) = 0;
      *(_QWORD *)(a1 + 84) = 2;
      *(_DWORD *)a1 = 0;
      *(_OWORD *)(a1 + 96) = 0u;
      *(_OWORD *)(a1 + 112) = 0u;
      *(_QWORD *)&result = sub_22E3C113C(a1, &v253, v174, v182, (__int128 *)v252, v183).n128_u64[0];
      return result;
    }
    v177 = (uint64_t *)(v176 + 16);
    goto LABEL_270;
  }
  LODWORD(v250) = 2;
  *(_DWORD *)v252 = 0;
  memset(&v252[8], 0, 32);
  v54 = sub_22EF5C728(*(_QWORD *)(a2[18] + 144), *((_QWORD *)v249 + 1));
  if (v54)
  {
    v55 = v54;
    if (*(_BYTE *)(v54 + 16) == 5)
    {
      v146 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v249 + 3) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      v147 = *(_DWORD *)(v146 + 16);
      if (!v146 || v147 != 11)
      {
        if (v146)
        {
          if (v147 == 44)
          {
            v165 = sub_22F114198(*(_QWORD *)(v146 + 24));
            if ((*(_BYTE *)(v165 + 74) & 1) != 0 || *(_QWORD *)(v165 + 128) > 7uLL)
              sub_22F114198(*(_QWORD *)(v146 + 24));
          }
        }
      }
      sub_22E4DFD40(v241, a2);
      v194 = *(_OWORD *)&v241[16];
      v213 = *(_OWORD *)&v241[32];
      v219 = *(_OWORD *)v241;
      v195 = sub_22E4EB480((uint64_t)v246, 1, *(__n128 *)&v241[32]);
      v196 = sub_22F297878((uint64_t)a2, v55);
      if ((*(_WORD *)(*(_QWORD *)(a2[18] + 152) + 248) & 0xC00) == 0x400)
      {
        *(_WORD *)&v241[32] = 257;
        v197 = v195;
        v198 = 0;
      }
      else
      {
        *(_WORD *)&v241[32] = 257;
        v197 = v195;
        v198 = 1;
      }
      *(_QWORD *)&v257[0] = sub_22E3BDEA8((uint64_t)(a2 + 34), v197, (uint64_t)v196, (uint64_t)v241, 0, v198);
      v227[0] = v219;
      v227[1] = v194;
      v227[2] = v213;
      v199 = *(_QWORD *)(v55 + 32);
      v200 = *(_WORD *)(*(_QWORD *)(a2[18] + 152) + 248) & 0xC00;
      v201 = v247;
      v202 = v249;
      v203 = (uint64_t *)(v249 + 24);
      v204 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v249 + 3) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      v205 = *(_DWORD *)(v204 + 16);
      if (v204 && v205 == 11)
      {
        if (((*(_DWORD *)(v204 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
          goto LABEL_307;
      }
      else if (v204 && v205 == 44)
      {
        v206 = sub_22F114198(*(_QWORD *)(v204 + 24));
        if ((*(_BYTE *)(v206 + 74) & 1) == 0 && *(_QWORD *)(v206 + 128) <= 7uLL
          || (*(_QWORD *)(sub_22F114198(*(_QWORD *)(v204 + 24)) + 72) & 0x8000000000) != 0)
        {
          goto LABEL_307;
        }
      }
      else if (v205 != 9)
      {
LABEL_307:
        sub_22EFF605C(*v203);
        *(_QWORD *)&v253 = "arrayidx";
        LOWORD(v255) = 259;
        sub_22E4EB808((uint64_t)v241, (uint64_t)a2, v227, (uint64_t **)v257, 1, v199, v200 != 1024, v201 != 0, v207, 0, 0, (const char **)&v253);
        goto LABEL_210;
      }
      v203 = (uint64_t *)(v202 + 16);
      goto LABEL_307;
    }
  }
  v56 = sub_22E4EBB74(*(_QWORD *)(*((_QWORD *)v249 + 1) & 0xFFFFFFFFFFFFFFF0));
  if (v56)
  {
    v57 = v56;
    v58 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v249 + 3) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v59 = *(_DWORD *)(v58 + 16);
    if (!v58 || v59 != 11)
    {
      if (v58)
      {
        if (v59 == 44)
        {
          v66 = sub_22F114198(*(_QWORD *)(v58 + 24));
          if ((*(_BYTE *)(v66 + 74) & 1) != 0 || *(_QWORD *)(v66 + 128) > 7uLL)
            sub_22F114198(*(_QWORD *)(v58 + 24));
        }
      }
    }
    sub_22E4DFD40(v241, a2);
    v69 = *(_OWORD *)v241;
    v70 = *(_OWORD *)&v241[16];
    v214 = *(_OWORD *)&v241[32];
    v71 = sub_22E4EB480((uint64_t)v246, 1, *(__n128 *)&v241[32]);
    sub_22EF5CCD0(*(_QWORD *)(a2[18] + 144), v57, (uint64_t)v241);
    v72 = *(_QWORD *)v241;
    v73 = llvm::ConstantInt::get();
    *(_WORD *)&v241[32] = 257;
    *(_QWORD *)&v234 = sub_22E3BDEA8((uint64_t)(a2 + 34), v71, v73, (uint64_t)v241, 0, 0);
    v226[0] = v69;
    v226[1] = v70;
    v226[2] = v214;
    v74 = a2[1];
    LOWORD(v255) = 257;
    sub_22E3BEE6C(a2 + 34, v226, v74, (uint64_t)&v253, (uint64_t)v241);
    v75 = *(_QWORD *)&v241[16];
    if (*(_BYTE *)(v71 + 16) == 16)
    {
      v76 = (_QWORD *)(v71 + 24);
      if (*(_DWORD *)(v71 + 32) >= 0x41u)
        v76 = (_QWORD *)*v76;
      v77 = (*v76 * v72) | *(_QWORD *)&v241[16];
    }
    else
    {
      v77 = *(_QWORD *)&v241[16] | v72;
    }
    v78 = *(_OWORD *)v241;
    v79 = *(_QWORD *)&v241[24];
    v80 = *(_OWORD *)&v241[32];
    v81 = v77 & -v77;
    v82 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v249 + 3) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0;
    v83 = *(_QWORD *)v82;
    v84 = *(unsigned __int8 *)(*(_QWORD *)v82 + 16);
    if (*(_QWORD *)v82)
      v85 = v84 == 11;
    else
      v85 = 0;
    v86 = !v85;
    if (v83)
    {
      if (v84 == 44)
      {
        if (v86)
        {
          v215 = *(_OWORD *)&v241[32];
          v87 = sub_22F114198(*(_QWORD *)(v83 + 24));
          v80 = v215;
          if ((*(_BYTE *)(v87 + 74) & 1) != 0 || *(_QWORD *)(v87 + 128) >= 8uLL)
          {
            sub_22F114198(*(_QWORD *)(v83 + 24));
            v80 = v215;
          }
        }
      }
    }
    *(_QWORD *)&v257[0] = "arrayidx";
    LOWORD(v258) = 259;
    *(_OWORD *)v241 = v78;
    *(_QWORD *)&v241[16] = v75;
    *(_QWORD *)&v241[24] = v79;
    *(_OWORD *)&v241[32] = v80;
    sub_22E4EEF7C((uint64_t)&v253, a2 + 34, (uint64_t)v241, (uint64_t **)&v234, 1, *((unint64_t *)&v78 + 1), v81, (uint64_t)v257);
    v225[0] = v253;
    v225[1] = v254;
    v225[2] = v255;
    LOWORD(v255) = 257;
    sub_22E3BEE6C(a2 + 34, v225, *((uint64_t *)&v69 + 1), (uint64_t)&v253, (uint64_t)v241);
    goto LABEL_210;
  }
  v60 = v249;
  v61 = v249 + 24;
  v62 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v249 + 3) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v63 = *(_DWORD *)(v62 + 16);
  if (v62 && v63 == 11)
  {
    if (((*(_DWORD *)(v62 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
      goto LABEL_148;
    goto LABEL_147;
  }
  if (!v62 || v63 != 44)
  {
    if (v63 != 9)
      goto LABEL_148;
LABEL_147:
    v61 = v60 + 16;
    goto LABEL_148;
  }
  v67 = sub_22F114198(*(_QWORD *)(v62 + 24));
  if (((*(_BYTE *)(v67 + 74) & 1) != 0 || *(_QWORD *)(v67 + 128) > 7uLL)
    && (*(_QWORD *)(sub_22F114198(*(_QWORD *)(v62 + 24)) + 72) & 0x8000000000) == 0)
  {
    goto LABEL_147;
  }
LABEL_148:
  v88 = *(_BYTE **)v61;
  if ((**(_BYTE **)v61 + 102) < 0xF5u
    || (*(_DWORD *)v88 & 0x1FC0000) != 0x300000
    || (v89 = *((_QWORD *)v88 + 2),
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v89 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                 + 16) == 5))
  {
    v90 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v249 + 3) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v91 = *(_DWORD *)(v90 + 16);
    if (!v90 || v91 != 11)
    {
      if (v90)
      {
        if (v91 == 44)
        {
          v92 = sub_22F114198(*(_QWORD *)(v90 + 24));
          if ((*(_BYTE *)(v92 + 74) & 1) != 0 || *(_QWORD *)(v92 + 128) > 7uLL)
            sub_22F114198(*(_QWORD *)(v90 + 24));
        }
      }
    }
    sub_22E4DFD40(v241, a2);
    v107 = *(_OWORD *)&v241[16];
    v209 = *(_OWORD *)&v241[32];
    v216 = *(_OWORD *)v241;
    *(_QWORD *)&v257[0] = sub_22E4EB480((uint64_t)v246, 1, *(__n128 *)&v241[32]);
    v108 = v249;
    v109 = v249 + 24;
    v110 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v249 + 3) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v111 = *(_DWORD *)(v110 + 16);
    if (v110 && v111 == 11)
    {
      v113 = v209;
      v112 = v216;
      if (((*(_DWORD *)(v110 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
        goto LABEL_185;
    }
    else if (v110 && v111 == 44)
    {
      v114 = sub_22F114198(*(_QWORD *)(v110 + 24));
      if ((*(_BYTE *)(v114 + 74) & 1) == 0 && *(_QWORD *)(v114 + 128) <= 7uLL)
      {
        v113 = v209;
        v112 = v216;
        goto LABEL_185;
      }
      v115 = sub_22F114198(*(_QWORD *)(v110 + 24));
      v113 = v209;
      v112 = v216;
      if ((*(_QWORD *)(v115 + 72) & 0x8000000000) != 0)
        goto LABEL_185;
    }
    else
    {
      v113 = v209;
      v112 = v216;
      if (v111 != 9)
      {
LABEL_185:
        *(_QWORD *)&v234 = *(_QWORD *)(*(_QWORD *)v109 + 8);
        v220[0] = v112;
        v220[1] = v107;
        v220[2] = v113;
        v116 = v249;
        v117 = *((_QWORD *)v249 + 1);
        v118 = *(_WORD *)(*(_QWORD *)(a2[18] + 152) + 248);
        v119 = v247;
        v120 = v249 + 24;
        v121 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v249 + 3) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        v122 = *(_DWORD *)(v121 + 16);
        if (v121 && v122 == 11)
        {
          v123 = v249 + 16;
          v124 = (uint64_t *)(v249 + 24);
          if (((*(_DWORD *)(v121 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
            goto LABEL_197;
        }
        else if (v121 && v122 == 44)
        {
          v125 = sub_22F114198(*(_QWORD *)(v121 + 24));
          if ((*(_BYTE *)(v125 + 74) & 1) == 0 && *(_QWORD *)(v125 + 128) <= 7uLL)
          {
            v123 = v116 + 16;
            v124 = (uint64_t *)v120;
            goto LABEL_197;
          }
          v126 = sub_22F114198(*(_QWORD *)(v121 + 24));
          v123 = v116 + 16;
          v124 = (uint64_t *)v120;
          if ((*(_QWORD *)(v126 + 72) & 0x8000000000) != 0)
            goto LABEL_197;
        }
        else
        {
          v123 = v249 + 16;
          v124 = (uint64_t *)(v249 + 24);
          if (v122 != 9)
          {
LABEL_197:
            v127 = v118 & 0xC00;
            sub_22EFF605C(*v124);
            v129 = v128;
            v130 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v120 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
            v131 = *(_DWORD *)(v130 + 16);
            if (v130 && v131 == 11)
            {
              if (((*(_DWORD *)(v130 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
                goto LABEL_209;
            }
            else if (v130 && v131 == 44)
            {
              v132 = sub_22F114198(*(_QWORD *)(v130 + 24));
              if ((*(_BYTE *)(v132 + 74) & 1) == 0 && *(_QWORD *)(v132 + 128) <= 7uLL
                || (*(_QWORD *)(sub_22F114198(*(_QWORD *)(v130 + 24)) + 72) & 0x8000000000) != 0)
              {
                goto LABEL_209;
              }
            }
            else if (v131 != 9)
            {
LABEL_209:
              v133 = *(unsigned __int8 **)v120;
              *(_QWORD *)&v253 = "arrayidx";
              LOWORD(v255) = 259;
              sub_22E4EB808((uint64_t)v241, (uint64_t)a2, v220, (uint64_t **)v257, 1, v117, v127 != 1024, v119 != 0, v129, (unint64_t *)&v234, v133, (const char **)&v253);
LABEL_210:
              v134 = *(_OWORD *)v241;
              v136 = *(_QWORD *)&v241[24];
              v135 = *(_QWORD *)&v241[16];
              v137 = *(_OWORD *)&v241[32];
              goto LABEL_211;
            }
            v120 = v123;
            goto LABEL_209;
          }
        }
        v124 = (uint64_t *)v123;
        goto LABEL_197;
      }
    }
    v109 = v108 + 16;
    goto LABEL_185;
  }
  if (*(_BYTE *)v89 == 107)
    sub_22E4E0AF8(v241, a2, v89, 1);
  else
    sub_22E4D8D7C(v241);
  v149 = *(_QWORD *)&v241[24];
  v150 = *(_QWORD *)&v241[32];
  v208 = *(_OWORD *)&v241[40];
  v210 = *(_OWORD *)&v241[8];
  v151 = v244;
  v152 = v245;
  v153 = sub_22E4EB480((uint64_t)v246, 1, *(__n128 *)&v241[40]);
  *(_QWORD *)&v234 = *(_QWORD *)(v89 + 8);
  v221 = v210;
  v222 = v149;
  v223 = v150;
  v224 = v208;
  *(_QWORD *)&v257[0] = llvm::ConstantInt::get();
  *((_QWORD *)&v257[0] + 1) = v153;
  v154 = v249;
  v155 = *((_QWORD *)v249 + 1);
  v156 = *(_WORD *)(*(_QWORD *)(a2[18] + 152) + 248);
  v157 = v249 + 24;
  v158 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v249 + 3) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v159 = *(_DWORD *)(v158 + 16);
  v217 = v152;
  v211 = v247;
  if (v158 && v159 == 11)
  {
    v160 = ((*(_DWORD *)(v158 + 16) >> 19) & 0x1FE) - 166;
    v161 = v249 + 16;
    v162 = (uint64_t *)(v249 + 24);
    if (v160 >= 0x14)
      goto LABEL_276;
    goto LABEL_275;
  }
  if (v158 && v159 == 44)
  {
    v163 = sub_22F114198(*(_QWORD *)(v158 + 24));
    if ((*(_BYTE *)(v163 + 74) & 1) == 0 && *(_QWORD *)(v163 + 128) <= 7uLL)
    {
      v161 = v154 + 16;
      v162 = (uint64_t *)v157;
      goto LABEL_276;
    }
    v164 = sub_22F114198(*(_QWORD *)(v158 + 24));
    v161 = v154 + 16;
    v162 = (uint64_t *)v157;
    if ((*(_QWORD *)(v164 + 72) & 0x8000000000) != 0)
      goto LABEL_276;
    goto LABEL_275;
  }
  v161 = v249 + 16;
  v162 = (uint64_t *)(v249 + 24);
  if (v159 == 9)
LABEL_275:
    v162 = (uint64_t *)v161;
LABEL_276:
  v184 = v156 & 0xC00;
  sub_22EFF605C(*v162);
  v186 = v185;
  v187 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v157 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v188 = *(_DWORD *)(v187 + 16);
  if (v187 && v188 == 11)
  {
    v189 = v155;
    v190 = v211;
    if (((*(_DWORD *)(v187 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
      goto LABEL_288;
    goto LABEL_287;
  }
  if (v187 && v188 == 44)
  {
    v191 = sub_22F114198(*(_QWORD *)(v187 + 24));
    if ((*(_BYTE *)(v191 + 74) & 1) == 0 && *(_QWORD *)(v191 + 128) <= 7uLL)
    {
      v189 = v155;
      v190 = v211;
      goto LABEL_288;
    }
    v192 = sub_22F114198(*(_QWORD *)(v187 + 24));
    v189 = v155;
    v190 = v211;
    if ((*(_QWORD *)(v192 + 72) & 0x8000000000) != 0)
      goto LABEL_288;
    goto LABEL_287;
  }
  v189 = v155;
  v190 = v211;
  if (v188 == 9)
LABEL_287:
    v157 = v161;
LABEL_288:
  v193 = *(unsigned __int8 **)v157;
  *(_QWORD *)&v253 = "arrayidx";
  LOWORD(v255) = 259;
  sub_22E4EB808((uint64_t)v241, (uint64_t)a2, &v221, (uint64_t **)v257, 2, v189, v184 != 1024, v190 != 0, v186, (unint64_t *)&v234, v193, (const char **)&v253);
  v134 = *(_OWORD *)v241;
  v136 = *(_QWORD *)&v241[24];
  v135 = *(_QWORD *)&v241[16];
  v137 = *(_OWORD *)&v241[32];
  LODWORD(v250) = v151;
  if (v217 == 1)
  {
    *(_DWORD *)v241 = 1;
    memset(&v241[8], 0, 32);
  }
  else
  {
    v212 = *(_OWORD *)&v241[32];
    v218 = *(_OWORD *)v241;
    sub_22E6281E0((_QWORD *)a2[18], *((_QWORD *)v249 + 1), (uint64_t)v241);
    v137 = v212;
    v134 = v218;
  }
  *(_OWORD *)v252 = *(_OWORD *)v241;
  *(_OWORD *)&v252[16] = *(_OWORD *)&v241[16];
  *(_QWORD *)&v252[32] = *(_QWORD *)&v241[32];
LABEL_211:
  v138 = *((_QWORD *)v249 + 1);
  v139 = (int)v250;
  v253 = *(_OWORD *)v252;
  v254 = *(_OWORD *)&v252[16];
  *(_QWORD *)&v255 = *(_QWORD *)&v252[32];
  *(_OWORD *)v241 = v134;
  *(_QWORD *)&v241[16] = v135;
  *(_QWORD *)&v241[24] = v136;
  *(_OWORD *)&v241[32] = v137;
  v140 = *(_QWORD *)(a2[18] + 144);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 84) = 2;
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)&result = sub_22E3C113C(a1, (__int128 *)v241, v138, v139, &v253, v140).n128_u64[0];
  v141 = a2[18];
  v142 = *(_QWORD *)(v141 + 152);
  if ((*(_BYTE *)(v142 + 1) & 0x40) != 0 && (*(_BYTE *)(v142 + 246) & 6) != 0)
  {
    if (sub_22EFFE8E8((unint64_t)v249, *(_QWORD *)(v141 + 144)))
      v143 = 0;
    else
      v143 = 4;
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a1 + 80) & 0xFB | v143;
    sub_22E4E9E9C(*(_QWORD *)(a2[18] + 144), v249, a1, 0);
  }
  return result;
}

void sub_22E4E23C0(uint64_t a1, unsigned int a2, int a3, uint64_t a4, unint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  llvm::Constant **v16;

  if ((*(_QWORD *)(a1 + 1864) & 0x10042008000) != 0)
  {
    if (*(_QWORD *)(a4 + 8))
      v16 = (llvm::Constant **)sub_22F289EE8(a4 + 8, a1);
    else
      v16 = 0;
    sub_22E4DDC84(a1, a2, a3, v16, a5, *(_QWORD *)(a4 + 24), a6, a7, a8);
  }
}

void sub_22E4E2474(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __int128 *v21;
  int v22;
  int v23;
  int v24;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t *v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  llvm *v50;
  unint64_t v51;
  __int128 v52;
  llvm::Function *v53;
  unint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 *v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  int v84;
  unint64_t v85;
  unint64_t v86;
  int v87;
  int v88;
  uint64_t v89;
  unint64_t v90;
  __int128 v91;
  unsigned int v92;
  unsigned int v93;
  __int128 *v94;
  char v95;
  int v96;
  uint64_t v97;
  unint64_t v98;
  _QWORD *v99;
  unsigned int v100;
  unint64_t v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  const void *v112;
  size_t v113;
  uint64_t v114;
  llvm::NamedMDNode *inserted;
  uint64_t v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  __int128 v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  char v140;
  uint64_t v141;
  __int128 v142;
  __int128 v143;
  llvm::Value *v144;
  __int128 v145;
  __int128 v146;
  unint64_t v147;
  unint64_t v148;
  __int128 v149;
  unint64_t v150;
  int v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  __int128 v155;
  unint64_t v156;
  int v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD v161[3];
  int v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  __int128 v166[3];
  _OWORD v167[3];
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  uint64_t v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;
  _BYTE v177[48];
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  uint64_t v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  uint64_t v187;

  v187 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  if (v8)
    v9 = (*(_DWORD *)(v8 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9;
  else
    v9 = 0;
  if (v9)
  {
    if ((*(_BYTE *)(v8 + 96) & 7) == 5 && sub_22E3D1740(*(_QWORD *)(a2 + 16)) && (sub_22E3CEC2C(v8) & 1) == 0)
    {
      v63 = *(_QWORD *)(a1 + 144);
      *(_QWORD *)v177 = &v177[24];
      *(_OWORD *)&v177[8] = xmmword_22F4576D0;
      qmemcpy(&v177[24], "llvm.named.register.", 20);
      if ((*(_BYTE *)(v8 + 29) & 1) == 0)
        goto LABEL_180;
      sub_22EFC8E88(v8);
      v65 = *(uint64_t **)v64;
      v66 = *(unsigned int *)(v64 + 8);
      v67 = *(uint64_t **)v64;
      if ((_DWORD)v66)
      {
        v111 = 8 * v66;
        v67 = *(uint64_t **)v64;
        while (*(_WORD *)(*v67 + 32) != 109)
        {
          ++v67;
          v111 -= 8;
          if (!v111)
            goto LABEL_180;
        }
      }
      if (v67 == &v65[v66])
      {
LABEL_180:
        v68 = 0;
      }
      else
      {
        do
        {
          v69 = *v65++;
          v68 = v69;
        }
        while (*(_WORD *)(v69 + 32) != 109);
      }
      v112 = *(const void **)(v68 + 40);
      v113 = *(unsigned int *)(v68 + 36);
      v114 = *(_QWORD *)&v177[8];
      if (*(_QWORD *)&v177[16] < *(_QWORD *)&v177[8] + v113)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v114 = *(_QWORD *)&v177[8];
      }
      if ((_DWORD)v113)
      {
        memcpy((void *)(*(_QWORD *)v177 + v114), v112, v113);
        v114 = *(_QWORD *)&v177[8];
      }
      *(_QWORD *)&v177[8] = v114 + v113;
      inserted = (llvm::NamedMDNode *)llvm::Module::getOrInsertNamedMetadata();
      if (!llvm::NamedMDNode::getNumOperands(inserted))
      {
        *(_QWORD *)&v184 = llvm::MDString::get();
        llvm::MDTuple::getImpl();
        llvm::NamedMDNode::addOperand();
      }
      sub_22EF5B404(*(_QWORD *)(v63 + 144), v8, 0);
      llvm::NamedMDNode::getOperand(inserted);
      v116 = llvm::MetadataAsValue::get();
      sub_22F261140(a3, v116, *(_QWORD *)(v8 + 48));
      if (*(_BYTE **)v177 != &v177[24])
        free(*(void **)v177);
      return;
    }
    if (sub_22EFBF028(v8))
    {
      if (!*(_BYTE *)(a1 + 2892))
      {
        v29 = *(uint64_t **)(a1 + 2880);
        if (v29)
        {
          if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 184) + 96) & 0x1E00000000000000uLL) >= 0x800000000000001)
            sub_22F257430(v29, v8);
        }
      }
      v10 = *(_QWORD *)(a1 + 144);
      if ((*(_DWORD *)(*(_QWORD *)(v10 + 184) + 92) & 0x200000) != 0)
      {
        sub_22E623CA4();
        v10 = *(_QWORD *)(a1 + 144);
      }
      (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(v10 + 800) + 64))(*(_QWORD *)(v10 + 800), v8);
      return;
    }
    if ((*(_DWORD *)a2 & 0x1800000) == 0x1000000)
    {
      if ((*(_DWORD *)a2 & 0x400000) != 0
        || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) & 0xFE) == 0x28)
      {
        goto LABEL_139;
      }
      if (sub_22E3CB5E0(v8))
      {
        v11 = *(_QWORD *)(v8 + 16);
        v12 = (_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF8);
        if ((v11 & 4) != 0)
          v12 = (_QWORD *)*v12;
        v13 = *(_QWORD *)(a1 + 1600);
        if (v13)
        {
          v14 = *(_DWORD *)(v13 + 28) & 0x7F;
          if (v14 <= 0x39 && ((1 << v14) & 0x3F0003E01011066) != 0
            || v14 - 70 <= 0xD && ((1 << (v14 - 70)) & 0x2803) != 0
            || v14 - 19 <= 4)
          {
            v13 = sub_22EFCAE04(v13);
          }
          else
          {
            v13 = 0;
          }
        }
        if (v12 == (_QWORD *)v13)
          goto LABEL_25;
LABEL_139:
        v84 = 0;
        v85 = v8;
        while (!sub_22EFBC5B4(v85))
        {
          if ((*(_BYTE *)(v85 + 72) & 3) != 0)
          {
            if (v84)
              goto LABEL_146;
            v84 = 1;
          }
          v86 = sub_22E3CD31C((uint64_t *)(v85 + 72), v85);
          if (v86 != v8)
          {
            v85 = v86;
            if (v86)
              continue;
          }
LABEL_146:
          v85 = v8;
          break;
        }
        *(_QWORD *)v177 = *(_QWORD *)(a1 + 144);
        *(_QWORD *)&v177[8] = a1;
        *(_DWORD *)&v177[16] = 0;
        v177[20] = 0;
        *(_QWORD *)&v177[32] = &v178;
        *(_QWORD *)&v177[40] = 0x400000000;
        v87 = *(_DWORD *)(a2 + 4);
        v88 = sub_22EFBCF80(v85);
        v89 = sub_22F262D70((_QWORD **)v177, v87, v88, *(_QWORD *)(v85 + 48));
        if (*(__int128 **)&v177[32] != &v178)
          free(*(void **)&v177[32]);
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v85 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                        + 16) & 0xFE) == 0x28)
        {
          v90 = sub_22E62D754(*(_QWORD **)(a1 + 144), *(_QWORD *)(a2 + 8), 0, 0, 1);
          sub_22E3D2FA0(a1, v89, v7, v90, 0, 0, 0, v177);
        }
        else
        {
          v122 = *(_QWORD *)(a1 + 144);
          v123 = sub_22EF5B404(*(_QWORD *)(v122 + 144), v85, 0);
          sub_22E4C7EF4(v122, v85, v89, v123, (uint64_t)v177);
          v124 = *(_OWORD *)&v177[16];
          v143 = *(_OWORD *)v177;
          v146 = *(_OWORD *)&v177[32];
          v125 = sub_22E66C868(*(_QWORD *)(a1 + 144) + 280, *(_QWORD *)(v85 + 48), 0);
          sub_22EF5CF80(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), *(_QWORD *)(v85 + 48));
          v126 = llvm::PointerType::get();
          v167[0] = v143;
          v167[1] = v124;
          v167[2] = v146;
          LOWORD(v186) = 257;
          sub_22F245864((uint64_t *)(a1 + 272), v167, v126, v125, (uint64_t)&v184, (uint64_t)v177);
        }
        v91 = *(_OWORD *)&v177[16];
        v142 = *(_OWORD *)&v177[32];
        v145 = *(_OWORD *)v177;
        sub_22E6281E0(*(_QWORD **)(a1 + 144), v7, (uint64_t)&v168);
        *(_OWORD *)v177 = v145;
        *(_OWORD *)&v177[16] = v91;
        *(_OWORD *)&v177[32] = v142;
        goto LABEL_37;
      }
      v75 = *(_QWORD *)(v8 + 80);
      if (!v75)
        goto LABEL_139;
      v76 = 0;
      v77 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
      v78 = *(_QWORD *)(v8 + 80);
      while (sub_22EFBBF74(v78, v77) != 2)
      {
        if ((*(_BYTE *)(v78 + 72) & 3) != 0)
        {
          if (v76)
            goto LABEL_139;
          v76 = 1;
        }
        v79 = sub_22E3CD31C((uint64_t *)(v78 + 72), v78);
        if (v79 != v75)
        {
          v78 = v79;
          if (v79)
            continue;
        }
        goto LABEL_139;
      }
      v80 = *(_QWORD *)(a1 + 144);
      v81 = *(_QWORD *)(v80 + 152);
      if (*(_DWORD *)(v81 + 72) || (*(_BYTE *)(v81 + 68) & 0x20) != 0 || (*(_DWORD *)(v81 + 52) & 0x40000000) != 0)
        goto LABEL_139;
      v3 = 1;
      v82 = sub_22F29B88C(v80, v78, 1);
      if (v82 > 8 || ((1 << v82) & 0x1A9) == 0)
        goto LABEL_139;
    }
LABEL_25:
    if ((*(_BYTE *)(a2 + 2) & 0x40) == 0)
      goto LABEL_26;
    v61 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v8 + 32))(v8);
    *(_QWORD *)v177 = v61;
    *(_QWORD *)&v184 = 0;
    if ((sub_22F246C54((uint64_t *)(a1 + 1928), v177, &v184) & 1) != 0)
    {
      v62 = *(_QWORD *)(v184 + 8);
      if (v62)
      {
        sub_22E4E9B08(a3, a1, v62, *(_QWORD *)(a1 + 4200));
        return;
      }
    }
    if (!*(_QWORD *)(a1 + 1856))
    {
      sub_22E3CAAF4(a1, v61, (uint64_t)&v168);
      v184 = v168;
      v185 = v169;
      v186 = v170;
      sub_22E6281E0(*(_QWORD **)(a1 + 144), v7, (uint64_t)&v171);
      *(_OWORD *)v177 = v184;
      *(_OWORD *)&v177[16] = v185;
      *(_OWORD *)&v177[32] = v186;
LABEL_173:
      v20 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
      v174 = v171;
      v175 = v172;
      v176 = v173;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_DWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      *(_QWORD *)(a3 + 48) = 0;
      *(_QWORD *)(a3 + 64) = 0;
      *(_QWORD *)(a3 + 72) = 0;
      *(_QWORD *)(a3 + 84) = 2;
      *(_DWORD *)a3 = 0;
      *(_OWORD *)(a3 + 96) = 0u;
      *(_OWORD *)(a3 + 112) = 0u;
      v21 = &v174;
      goto LABEL_38;
    }
    *(_QWORD *)&v184 = v61;
    *(_QWORD *)v177 = 0;
    if (!sub_22E3CED3C((uint64_t *)(a1 + 2904), &v184, v177)
      || (v70 = *(_QWORD *)v177, *(_QWORD *)v177 == *(_QWORD *)(a1 + 2904) + 56 * *(unsigned int *)(a1 + 2920)))
    {
      v101 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 1856) + 32))(*(_QWORD *)(a1 + 1856), v61);
      v102 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1856) + 24))(*(_QWORD *)(a1 + 1856));
      sub_22E4E9B08(a3, a1, v101, v102);
      v103 = *(_OWORD *)(a3 + 24);
      v168 = *(_OWORD *)(a3 + 8);
      v169 = v103;
      v170 = *(_OWORD *)(a3 + 40);
      if ((BYTE8(v103) & 3) != 0)
        v104 = sub_22F28ABCC(&v168, a1);
      else
        v104 = v168;
      v105 = *((_QWORD *)&v168 + 1);
      v106 = sub_22EF5B404(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), v61, 0);
      v107 = *(_QWORD *)(a3 + 64);
      v108 = *(_OWORD *)(a3 + 104);
      v174 = *(_OWORD *)(a3 + 88);
      v175 = v108;
      v176 = *(_QWORD *)(a3 + 120);
      *(_QWORD *)&v184 = v104;
      *((_QWORD *)&v184 + 1) = v105;
      *(_QWORD *)&v185 = v106;
      DWORD2(v185) = 0;
      v186 = 0uLL;
      v109 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
      memset(&v177[8], 0, 28);
      *(_QWORD *)&v177[40] = 0;
      *(_QWORD *)&v178 = 0;
      v179 = 0uLL;
      *(_QWORD *)((char *)&v180 + 4) = 2;
      *(_DWORD *)v177 = 0;
      v181 = 0u;
      v182 = 0u;
      v110 = 0;
    }
    else
    {
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_DWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      *(_QWORD *)(a3 + 48) = 0;
      *(_QWORD *)(a3 + 64) = 0;
      *(_QWORD *)(a3 + 72) = 0;
      *(_QWORD *)(a3 + 84) = 2;
      *(_OWORD *)(a3 + 96) = 0u;
      *(_OWORD *)(a3 + 112) = 0u;
      v71 = *(_QWORD *)(v61 + 48);
      v72 = (__int128 *)(v70 + 8);
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v71 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) & 0xFE) == 0x28)
      {
        v73 = *v72;
        v74 = v72[2];
        v166[1] = v72[1];
        v166[2] = v74;
        v166[0] = v73;
        sub_22E4E9BF4(a1, v166, v71, 0, (uint64_t)v177);
LABEL_191:
        v117 = v182;
        *(_OWORD *)(a3 + 96) = v181;
        *(_OWORD *)(a3 + 112) = v117;
        *(_QWORD *)(a3 + 128) = v183;
        v118 = v178;
        *(_OWORD *)(a3 + 32) = *(_OWORD *)&v177[32];
        *(_OWORD *)(a3 + 48) = v118;
        v119 = v180;
        *(_OWORD *)(a3 + 64) = v179;
        *(_OWORD *)(a3 + 80) = v119;
        v120 = *(_OWORD *)&v177[16];
        *(_OWORD *)a3 = *(_OWORD *)v177;
        *(_OWORD *)(a3 + 16) = v120;
        v121 = *(_QWORD *)(a1 + 144);
        if (*(_DWORD *)(*(_QWORD *)(v121 + 152) + 72) && sub_22E5B89F8(*(_QWORD *)(v121 + 808), v61))
          *(_BYTE *)(a3 + 80) |= 0x40u;
        return;
      }
      v168 = *v72;
      v169 = v72[1];
      v170 = v72[2];
      sub_22E6281E0(*(_QWORD **)(a1 + 144), v7, (uint64_t)&v171);
      v184 = v168;
      v185 = v169;
      v186 = v170;
      v109 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
      v174 = v171;
      v175 = v172;
      v176 = v173;
      memset(&v177[8], 0, 28);
      *(_QWORD *)&v177[40] = 0;
      *(_QWORD *)&v178 = 0;
      v179 = 0uLL;
      *(_QWORD *)((char *)&v180 + 4) = 2;
      *(_DWORD *)v177 = 0;
      v181 = 0u;
      v182 = 0u;
      v107 = v7;
      v110 = 2;
    }
    sub_22E3C113C((uint64_t)v177, &v184, v107, v110, &v174, v109);
    goto LABEL_191;
  }
LABEL_26:
  if (sub_22E4E9AA8(v8))
  {
    v15 = sub_22F29AF48(*(_QWORD *)(a1 + 144), v8);
LABEL_28:
    v17 = 0;
    if (v15 <= 7)
      v18 = 0;
    else
      v18 = v15 & 0xFFFFFFFFFFFFFFF8;
    if (v15 <= 7)
      v19 = 0;
    else
      v19 = v16 & 0xFFFFFFFFFFFFFFF8;
    if (v15 >= 8)
      v17 = 1 << (v16 & 7 | (8 * (v15 & 7)));
LABEL_36:
    sub_22E6281E0(*(_QWORD **)(a1 + 144), v7, (uint64_t)&v168);
    *(_QWORD *)v177 = v18;
    *(_QWORD *)&v177[8] = v19;
    *(_QWORD *)&v177[16] = v17;
    *(_DWORD *)&v177[24] = 0;
    *(_QWORD *)&v177[32] = 0;
    *(_QWORD *)&v177[40] = 0;
LABEL_37:
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
    v184 = v168;
    v185 = v169;
    *(_QWORD *)&v186 = v170;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 64) = 0;
    *(_QWORD *)(a3 + 72) = 0;
    *(_QWORD *)(a3 + 84) = 2;
    *(_DWORD *)a3 = 0;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 112) = 0u;
    v21 = &v184;
LABEL_38:
    sub_22E3C113C(a3, (__int128 *)v177, v7, 0, v21, v20);
    return;
  }
  v22 = *(_DWORD *)(v8 + 28);
  v23 = v22 & 0x7F;
  if ((v23 - 67) >= 0xFFFFFFF9)
  {
    v24 = sub_22EFB948C(v8);
    if (v24 != 3 && v24 != 0)
      goto LABEL_53;
    if ((*(_DWORD *)(v8 + 28) & 0x7F) == 0x40)
      goto LABEL_59;
    v26 = *(_QWORD *)(v8 + 16);
    v27 = v26 & 0xFFFFFFFFFFFFFFF8;
    if ((v26 & 4) != 0)
      v27 = *(_QWORD *)v27;
    if ((*(_WORD *)(v27 + 8) & 0x7Eu) - 34 > 3)
    {
LABEL_59:
      *(_QWORD *)&v184 = v8;
      *(_QWORD *)v177 = 0;
      if (!sub_22E3CED3C((uint64_t *)(a1 + 2904), &v184, v177)
        || *(_QWORD *)v177 == *(_QWORD *)(a1 + 2904) + 56 * *(unsigned int *)(a1 + 2920))
      {
        v95 = *(_BYTE *)(v8 + 96);
        if ((v95 & 7) == 2 || (*(_BYTE *)(v8 + 96) & 7) == 0 && (v95 & 0x18) == 0x10)
        {
          v96 = *(_DWORD *)(v8 + 28) & 0x7F;
          if (v96 != 64 && v96 != 62)
          {
            v97 = *(_QWORD *)(v8 + 16);
            v98 = v97 & 0xFFFFFFFFFFFFFFF8;
            if ((v97 & 4) != 0)
              v98 = *(_QWORD *)(v98 + 8);
            sub_22EFCBB30(v98);
          }
        }
        v99 = *(_QWORD **)(a1 + 144);
        sub_22F29B88C((uint64_t)v99, v8, 0);
        v144 = sub_22E4C6BBC(v99, (_QWORD *)v8);
        v141 = sub_22E66C868(*(_QWORD *)(a1 + 144) + 280, *(_QWORD *)(v8 + 48), 0);
        v30 = sub_22EF5B404(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), v8, 0);
        v31 = 0;
        v33 = 0;
        v32 = 0;
      }
      else
      {
        v144 = *(llvm::Value **)(*(_QWORD *)v177 + 8);
        v30 = *(_QWORD *)(*(_QWORD *)v177 + 24);
        v141 = *(_QWORD *)(*(_QWORD *)v177 + 16);
        v31 = *(_DWORD *)(*(_QWORD *)v177 + 32);
        v3 = *(_DWORD *)(*(_QWORD *)v177 + 36);
        v33 = *(_QWORD *)(*(_QWORD *)v177 + 40);
        v32 = *(_QWORD *)(*(_QWORD *)v177 + 48);
      }
      v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 152) + 72);
      if ((_DWORD)v34)
        v35 = (v34 & 0x200000000) == 0;
      else
        v35 = 0;
      if (v35 && sub_22F25B62C(v8))
      {
        v161[0] = v144;
        v161[1] = v141;
        v161[2] = v30;
        v162 = v31;
        v163 = v3;
        v164 = v33;
        v165 = v32;
        v42 = sub_22E66C868(*(_QWORD *)(a1 + 144) + 280, *(_QWORD *)(v8 + 48), 0);
        sub_22EFF605C(a2);
        v93 = v92;
        v94 = (__int128 *)v161;
LABEL_171:
        sub_22E4E9CFC(a3, a1, v8, v7, v94, v42, v93);
        return;
      }
      if (sub_22E49C868(v8) && (*(_BYTE *)(v8 + 98) & 0x20) != 0)
      {
        *(_QWORD *)&v155 = v144;
        *((_QWORD *)&v155 + 1) = v141;
        v156 = v30;
        v157 = v31;
        v158 = v3;
        v159 = v33;
        v160 = v32;
        v140 = 1;
        sub_22F2469BC(a1, &v155, v8, 1, (uint64_t)v177);
        v144 = *(llvm::Value **)v177;
        v30 = *(_QWORD *)&v177[16];
        v141 = *(_QWORD *)&v177[8];
        v31 = *(_DWORD *)&v177[24];
        v3 = *(_DWORD *)&v177[28];
        v33 = *(_QWORD *)&v177[32];
        v32 = *(_QWORD *)&v177[40];
      }
      else
      {
        v140 = 0;
      }
      v36 = *(_QWORD *)(v8 + 48);
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v36 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) & 0xFE) == 0x28)
      {
        *(_QWORD *)&v149 = v144;
        *((_QWORD *)&v149 + 1) = v141;
        v150 = v30;
        v151 = v31;
        v152 = v3;
        v153 = v33;
        v154 = v32;
        sub_22E4E9BF4(a1, &v149, v36, 0, a3);
      }
      else
      {
        sub_22E6281E0(*(_QWORD **)(a1 + 144), v7, (uint64_t)&v168);
        *(_QWORD *)v177 = v144;
        *(_QWORD *)&v177[8] = v141;
        *(_QWORD *)&v177[16] = v30;
        *(_DWORD *)&v177[24] = v31;
        *(_DWORD *)&v177[28] = v3;
        *(_QWORD *)&v177[32] = v33;
        *(_QWORD *)&v177[40] = v32;
        v55 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
        v184 = v168;
        v185 = v169;
        *(_QWORD *)&v186 = v170;
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)(a3 + 24) = 0;
        *(_QWORD *)(a3 + 8) = 0;
        *(_DWORD *)(a3 + 32) = 0;
        *(_QWORD *)(a3 + 40) = 0;
        *(_QWORD *)(a3 + 48) = 0;
        *(_QWORD *)(a3 + 64) = 0;
        *(_QWORD *)(a3 + 72) = 0;
        *(_QWORD *)(a3 + 84) = 2;
        *(_DWORD *)a3 = 0;
        *(_OWORD *)(a3 + 96) = 0u;
        *(_OWORD *)(a3 + 112) = 0u;
        sub_22E3C113C(a3, (__int128 *)v177, v7, 0, &v184, v55);
      }
      if (sub_22E3CB5E0(v8))
      {
        v56 = v140;
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                        + 16) & 0xFE) == 0x28)
          v56 = 1;
        if ((v56 & 1) == 0)
        {
          *(_DWORD *)(a3 + 72) &= 0xFFFFFFCF;
          *(_BYTE *)(a3 + 80) |= 4u;
        }
        if (!sub_22E4CBAA4(v8))
          *(_BYTE *)(a3 + 80) |= 0x20u;
      }
    }
    else
    {
LABEL_53:
      v7 = *(_QWORD *)(a2 + 8);
      sub_22EFBB794(v8);
      if (v28 == 2
        && (*(unsigned int (**)(_QWORD, unint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 144) + 224)
                                                                    + 704))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 224), v8))
      {
        (*(void (**)(_QWORD, uint64_t, unint64_t, unint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 144)
                                                                                                  + 224)
                                                                                    + 712))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 224), a1, v8, v7);
        return;
      }
      v38 = *(_QWORD **)(a1 + 144);
      if ((*(_BYTE *)(v38[19] + 76) & 8) != 0)
      {
        v39 = sub_22EF95D10(v8);
        v38 = *(_QWORD **)(a1 + 144);
        if (v40)
        {
          if (*(_DWORD *)(v39 + 36) || *(_BYTE *)(v38[101] + 4248))
          {
            v127 = sub_22EF5B848(v38[18], *(_QWORD *)(v8 + 48), 0);
            v128 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 144) + 808)
                                                                       + 304))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 808), v8);
            v130 = 0;
            v131 = v128 & 0xFFFFFFFFFFFFFFF8;
            if (v128 <= 7)
              v131 = 0;
            v147 = v131;
            if (v128 <= 7)
              v132 = 0;
            else
              v132 = v129 & 0xFFFFFFFFFFFFFFF8;
            if (v128 >= 8)
              v130 = 1 << (v129 & 7 | (8 * (v128 & 7)));
            v133 = *(_QWORD *)(v127 & 0xFFFFFFFFFFFFFFF0);
            if (!v133 || *(_BYTE *)(v133 + 16) != 39)
              v133 = sub_22F10CF48(*(_QWORD *)(v127 & 0xFFFFFFFFFFFFFFF0));
            *(_QWORD *)v177 = v147;
            *(_QWORD *)&v177[8] = v132;
            *(_QWORD *)&v177[16] = v130;
            *(_DWORD *)&v177[24] = 0;
            *(_QWORD *)&v177[32] = 0;
            *(_QWORD *)&v177[40] = 0;
            LOWORD(v176) = 257;
            v134 = sub_22E3C2A7C((uint64_t *)(a1 + 272), (uint64_t)v177, (uint64_t)&v174);
            v135 = *(_QWORD *)(v133 + 32);
            v148 = sub_22E62D754(*(_QWORD **)(a1 + 144), v135, 0, 0, 1);
            v136 = sub_22E66C868(*(_QWORD *)(a1 + 144) + 280, v135, 0);
            v138 = sub_22E5DE820(*(_QWORD *)(a1 + 144), v135);
            v38 = *(_QWORD **)(a1 + 144);
            if (v134)
            {
              v139 = v137;
              sub_22E6281E0(v38, v7, (uint64_t)&v171);
              *(_QWORD *)v177 = v134;
              *(_QWORD *)&v177[8] = v136;
              *(_QWORD *)&v177[16] = v148;
              *(_QWORD *)&v177[24] = v138;
              *(_QWORD *)&v177[32] = v139;
              *(_QWORD *)&v177[40] = 0;
              goto LABEL_173;
            }
          }
        }
      }
      v41 = sub_22E6315B8((uint64_t)v38, v8, 0, 0);
      v42 = sub_22E66C868(*(_QWORD *)(a1 + 144) + 280, *(_QWORD *)(v8 + 48), 0);
      v43 = llvm::PointerType::get();
      *(_WORD *)&v177[32] = 261;
      *(_QWORD *)v177 = 0;
      *(_QWORD *)&v177[8] = 0;
      v44 = sub_22E3C1740((uint64_t *)(a1 + 272), 49, v41, v43, (uint64_t)v177);
      v45 = sub_22EF5B404(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), v8, 0);
      v46 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 152) + 72);
      if ((_DWORD)v46 && (v46 & 0x200000000) == 0 && sub_22F25B62C(v8))
      {
        *(_QWORD *)&v184 = v44;
        *((_QWORD *)&v184 + 1) = v42;
        *(_QWORD *)&v185 = v45;
        DWORD2(v185) = 0;
        v186 = 0uLL;
        sub_22EFF605C(a2);
        v93 = v100;
        v94 = &v184;
        goto LABEL_171;
      }
      v47 = *(_QWORD *)(v8 + 48);
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v47 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) & 0xFE) == 0x28)
      {
        *(_QWORD *)&v168 = v44;
        *((_QWORD *)&v168 + 1) = v42;
        *(_QWORD *)&v169 = v45;
        DWORD2(v169) = 0;
        v170 = 0uLL;
        sub_22E4E9BF4(a1, &v168, v47, 0, a3);
      }
      else
      {
        sub_22E6281E0(*(_QWORD **)(a1 + 144), v7, (uint64_t)&v171);
        *(_QWORD *)v177 = v44;
        *(_QWORD *)&v177[8] = v42;
        *(_QWORD *)&v177[16] = v45;
        *(_DWORD *)&v177[24] = 0;
        *(_QWORD *)&v177[32] = 0;
        *(_QWORD *)&v177[40] = 0;
        v57 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
        v174 = v171;
        v175 = v172;
        v176 = v173;
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)(a3 + 24) = 0;
        *(_QWORD *)(a3 + 8) = 0;
        *(_DWORD *)(a3 + 32) = 0;
        *(_QWORD *)(a3 + 40) = 0;
        *(_QWORD *)(a3 + 48) = 0;
        *(_QWORD *)(a3 + 64) = 0;
        *(_QWORD *)(a3 + 72) = 0;
        *(_QWORD *)(a3 + 84) = 2;
        *(_DWORD *)a3 = 0;
        *(_OWORD *)(a3 + 96) = 0u;
        *(_OWORD *)(a3 + 112) = 0u;
        sub_22E3C113C(a3, (__int128 *)v177, v7, 0, &v174, v57);
      }
    }
    sub_22E4E9E9C(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), (unsigned __int8 *)a2, a3, 0);
    return;
  }
  if ((v22 & 0x7Eu) - 58 >= 0xFFFFFFFA)
  {
    if (sub_22E462B18(v8))
      v37 = v8 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(v8) + 96) & 0x80) == 0);
    else
      v37 = v8;
    v48 = sub_22E4EA21C(a3, a1, a2, v37, 0);
    v49 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144) + 15088);
    if ((*(unsigned int (**)(uint64_t, double))(*(_QWORD *)v49 + 856))(v49, v48))
    {
      v50 = *(llvm **)(*(_QWORD *)(a1 + 144) + 824);
      if (v50)
      {
        v51 = *(_QWORD *)(a3 + 64);
        v52 = *(_OWORD *)(a3 + 24);
        v184 = *(_OWORD *)(a3 + 8);
        v185 = v52;
        v186 = *(_OWORD *)(a3 + 40);
        sub_22E5E0440(a1, (uint64_t)&v184, v51, v177);
        v53 = (llvm::Function *)llvm::Value::stripPointerCasts(*(llvm::Value **)v177);
        if (!llvm::Function::getSubprogram(v53))
        {
          if (sub_22E462B18(v8))
            v54 = v8 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(v8) + 96) & 0x80) == 0);
          else
            v54 = v8;
          sub_22E49B570(v50, v54, 0, *(_DWORD *)(v8 + 24), v7, (uint64_t)v53);
        }
      }
    }
  }
  else
  {
    if (v23 == 69)
    {
      v15 = sub_22F29A81C(*(_QWORD *)(a1 + 144), v8);
      goto LABEL_28;
    }
    if (v23 == 48)
    {
      sub_22E4D8D7C((_QWORD *)a3);
    }
    else
    {
      if (v23 == 72)
        v58 = v8;
      else
        v58 = 0;
      if (v58)
      {
        v59 = sub_22F29AD00(*(_QWORD **)(a1 + 144), v58);
        if (v59 <= 7)
          v18 = 0;
        else
          v18 = v59 & 0xFFFFFFFFFFFFFFF8;
        if (v59 <= 7)
          v19 = 0;
        else
          v19 = v60 & 0xFFFFFFFFFFFFFFF8;
        if (v59 >= 8)
          v17 = 1 << (v60 & 7 | (8 * (v59 & 7)));
        else
          v17 = 0;
        goto LABEL_36;
      }
    }
  }
}

_QWORD *sub_22E4E385C(_QWORD *a1, uint64_t a2, _DWORD *a3)
{
  int v3;

  v3 = (*a3 >> 18) & 0x1F;
  if (v3 != 12)
    __asm { BR              X11 }
  return sub_22E4D8D7C(a1);
}

uint64_t sub_22E4E38F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD v13[8];
  uint64_t v14;
  uint64_t v15[2];
  char v16;
  uint64_t v17;

  sub_22E4D8D7C((_QWORD *)v0);
  v4 = *(_DWORD *)v2 & 0x7C0000;
  v5 = *(_OWORD *)(v0 + 112);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                + 16) == 12)
  {
    v13[6] = *(_OWORD *)(v0 + 96);
    v13[7] = v5;
    v14 = *(_QWORD *)(v0 + 128);
    v10 = *(_OWORD *)(v0 + 48);
    v13[2] = *(_OWORD *)(v0 + 32);
    v13[3] = v10;
    v11 = *(_OWORD *)(v0 + 80);
    v13[4] = *(_OWORD *)(v0 + 64);
    v13[5] = v11;
    v12 = *(_OWORD *)(v0 + 16);
    v13[0] = *(_OWORD *)v0;
    v13[1] = v12;
    return sub_22F25E99C(v1, v2, (uint64_t)v13, v4 == 0x80000, 1);
  }
  else
  {
    *(_OWORD *)(v3 - 128) = *(_OWORD *)(v0 + 96);
    *(_OWORD *)(v3 - 112) = v5;
    *(_QWORD *)(v3 - 96) = *(_QWORD *)(v0 + 128);
    v6 = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v3 - 192) = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v3 - 176) = v6;
    v7 = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v3 - 160) = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v3 - 144) = v7;
    v8 = *(_OWORD *)(v0 + 16);
    *(_OWORD *)(v3 - 224) = *(_OWORD *)v0;
    *(_OWORD *)(v3 - 208) = v8;
    v15[0] = v1;
    v15[1] = v1 + 272;
    v16 = 0;
    v17 = *(_QWORD *)(*(_QWORD *)(v1 + 144) + 232);
    return sub_22E51001C(v15, v2, (__int128 *)(v3 - 224), v4 == 0x80000, 1);
  }
}

uint64_t sub_22E4E3D70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return sub_22F261638(v1, v2, v0);
}

void sub_22E4E3DF8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v8;
  unint64_t v9;
  llvm::Type *v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t *NullValue;
  unint64_t v22;
  __n128 v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL4 v27;
  unsigned int v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  __n128 v38;
  unint64_t v39;
  unint64_t v40;
  const llvm::APInt *v41;
  uint64_t v42;
  __n128 v43;
  int v44;
  int v45;
  _BOOL4 v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  _BOOL8 v50;
  uint64_t v51;
  uint64_t v52;
  _BOOL8 v53;
  uint64_t v54;
  int v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t *v58;
  llvm::Instruction *v59;
  uint64_t v60;
  unint64_t v61;
  _BOOL4 v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BOOL8 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  __int128 v72;
  unsigned int v73;
  __int128 v74;
  __int128 v75[3];
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  _BYTE v80[56];
  int v81;
  int v82;
  __int128 v83[3];
  __int128 v84;
  __int128 v85;
  __int128 v86;
  _OWORD v87[3];
  int v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t *v93;
  int v94;
  uint64_t v95;
  int v96;
  uint64_t *v97;
  const char *v98;
  uint64_t *v99;
  __int16 v100;
  uint64_t v101;

  v101 = *MEMORY[0x24BDAC8D0];
  v8 = sub_22F00338C(*(unsigned __int8 **)(a2 + 16));
  v9 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), v8);
  if (v9)
    v12 = *(_QWORD *)(v9 + 32);
  else
    v12 = sub_22F10ACF8(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0));
  v97 = 0;
  if ((a3 & 1) != 0 || !*(_DWORD *)(a2 + 48))
  {
    v17 = *(_QWORD *)(a2 + 24);
    if (v17)
    {
      *(_QWORD *)v80 = a1;
      *(_QWORD *)&v80[8] = a1 + 272;
      v80[16] = 0;
      *(_QWORD *)&v80[24] = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
      v18 = sub_22E50E974(v80, v17, v11);
      v19 = *(_QWORD *)(a1 + 88);
      v20 = sub_22F110B20(*(_QWORD *)(*(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF0));
      *(_WORD *)&v80[32] = 257;
      NullValue = (uint64_t *)sub_22E3BF45C((uint64_t *)(a1 + 272), v18, v19, v20, (uint64_t)v80);
    }
    else
    {
      NullValue = (uint64_t *)llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 88), v10);
    }
    v97 = NullValue;
    goto LABEL_35;
  }
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
  v14 = *(_QWORD *)(a2 + 32);
  DWORD2(v87[0]) = 1;
  *(_QWORD *)&v87[0] = 0;
  BYTE12(v87[0]) = 0;
  if (v14)
  {
    sub_22F00905C(v14, v13, 0, (uint64_t)v80);
    if (v80[16])
    {
      llvm::APInt::zextOrTrunc((llvm::APInt *)v80);
      if (DWORD2(v87[0]) >= 0x41 && *(_QWORD *)&v87[0])
        MEMORY[0x2348A0E84](*(_QWORD *)&v87[0], 0x1000C8000313F17);
      v14 = 0;
      *(_QWORD *)&v87[0] = v95;
      DWORD2(v87[0]) = v96;
      v96 = 0;
      if (v80[16] && *(_DWORD *)&v80[8] >= 0x41u)
      {
        if (*(_QWORD *)v80)
          MEMORY[0x2348A0E84](*(_QWORD *)v80, 0x1000C8000313F17);
        v14 = 0;
      }
    }
    v15 = *(_QWORD *)(a2 + 24);
    LODWORD(v99) = *(unsigned __int8 *)(a1 + 129);
    if (v99 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v98);
    else
      v98 = 0;
    BYTE4(v99) = 0;
    if (v15)
    {
      sub_22F00905C(v15, v13, 0, (uint64_t)v80);
      if (v80[16])
      {
        llvm::APInt::zextOrTrunc((llvm::APInt *)v80);
        if (v99 >= 0x41 && v98)
          MEMORY[0x2348A0E84](v98, 0x1000C8000313F17);
        v15 = 0;
        v98 = (const char *)v93;
        LODWORD(v99) = v94;
        v94 = 0;
        if (v80[16] && *(_DWORD *)&v80[8] >= 0x41u)
        {
          if (*(_QWORD *)v80)
            MEMORY[0x2348A0E84](*(_QWORD *)v80, 0x1000C8000313F17);
          v15 = 0;
        }
      }
      if (v14)
      {
        if (!v15)
          goto LABEL_59;
LABEL_66:
        v73 = a3;
        *(_QWORD *)&v84 = a1;
        *((_QWORD *)&v84 + 1) = a1 + 272;
        LOBYTE(v85) = 0;
        *((_QWORD *)&v85 + 1) = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
        v48 = sub_22E50E974(&v84, v15, v16);
        v49 = *(_QWORD *)(a1 + 88);
        v50 = sub_22F110B20(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0));
        *(_WORD *)&v80[32] = 257;
        v42 = sub_22E3BF45C((uint64_t *)(a1 + 272), v48, v49, v50, (uint64_t)v80);
        if (!v14)
        {
          v54 = llvm::ConstantInt::get();
          v71 = 0;
          goto LABEL_69;
        }
        v71 = 1;
LABEL_68:
        *(_QWORD *)&v84 = a1;
        *((_QWORD *)&v84 + 1) = a1 + 272;
        LOBYTE(v85) = 0;
        *((_QWORD *)&v85 + 1) = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
        v51 = sub_22E50E974(&v84, v14, v43);
        v52 = *(_QWORD *)(a1 + 88);
        v53 = sub_22F110B20(*(_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0));
        *(_WORD *)&v80[32] = 257;
        v54 = sub_22E3BF45C((uint64_t *)(a1 + 272), v51, v52, v53, (uint64_t)v80);
LABEL_69:
        *(_QWORD *)v80 = "lb_add_len";
        *(_WORD *)&v80[32] = 259;
        v55 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 152) + 248) & 0xC00;
        v56 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, BOOL))(**(_QWORD **)(a1 + 344)
                                                                                           + 16))(*(_QWORD *)(a1 + 344), v42, v54, 0, v55 != 1024);
        if (!v56)
          v56 = (uint64_t *)sub_22E3C122C((uint64_t *)(a1 + 272), 13, v42, v54, (uint64_t)v80, 0, v55 != 1024);
        v97 = v56;
        a3 = v73;
        if (v71)
        {
          v57 = llvm::ConstantInt::get();
          *(_QWORD *)v80 = "idx_sub_1";
          *(_WORD *)&v80[32] = 259;
          v97 = (uint64_t *)sub_22E3E48CC(a1 + 272, (uint64_t)v56, v57, (uint64_t)v80, 0, (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 152) + 248) & 0xC00) != 1024);
        }
LABEL_87:
        if (v99 >= 0x41 && v98)
          MEMORY[0x2348A0E84](v98, 0x1000C8000313F17);
        goto LABEL_90;
      }
      llvm::APInt::operator--();
      if (v15)
        goto LABEL_66;
    }
    else
    {
      if (v14)
      {
LABEL_59:
        v73 = a3;
        llvm::APInt::operator--();
        v42 = llvm::ConstantInt::get();
        v71 = 0;
        goto LABEL_68;
      }
      llvm::APInt::operator--();
    }
    sub_22E4EBD50((llvm::APInt *)v87, (uint64_t)v80);
    v97 = (uint64_t *)llvm::ConstantInt::get();
    if (*(_DWORD *)&v80[8] >= 0x41u && *(_QWORD *)v80)
      MEMORY[0x2348A0E84](*(_QWORD *)v80, 0x1000C8000313F17);
    goto LABEL_87;
  }
  v35 = v8;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
    v35 = *((_QWORD *)sub_22EFFA6B0(*(unsigned __int8 **)(a2 + 16)) + 1);
  v36 = sub_22EF5C728(v13, v35);
  if (!v36 || *(_BYTE *)(v36 + 16) != 5)
  {
    v39 = sub_22EF5C728(v13, v35);
    if (*(_BYTE *)(v39 + 16) == 2)
      v40 = v39;
    else
      v40 = 0;
    v41 = (const llvm::APInt *)(v40 + 40);
    v92 = *(_DWORD *)(v40 + 48);
    if (v92 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v91, v41);
    else
      v91 = *(_QWORD *)v41;
    *(_QWORD *)&v87[0] = v91;
    DWORD2(v87[0]) = v92;
    v92 = 0;
    goto LABEL_75;
  }
  v37 = *(_QWORD *)(v36 + 40);
  sub_22F00905C(v37, v13, 0, (uint64_t)v80);
  if (v80[16])
  {
    if (DWORD2(v87[0]) > 0x40 || *(_DWORD *)&v80[8] > 0x40u)
    {
      llvm::APInt::assignSlowCase((llvm::APInt *)v87, (const llvm::APInt *)v80);
      BYTE12(v87[0]) = v80[12];
      if (v80[16] && *(_DWORD *)&v80[8] >= 0x41u && *(_QWORD *)v80)
        MEMORY[0x2348A0E84](*(_QWORD *)v80, 0x1000C8000313F17);
    }
    else
    {
      *(_QWORD *)&v87[0] = *(_QWORD *)v80;
      DWORD2(v87[0]) = *(_DWORD *)&v80[8];
      BYTE12(v87[0]) = v80[12];
    }
    goto LABEL_75;
  }
  if (!v37)
  {
LABEL_75:
    llvm::APInt::zextOrTrunc((llvm::APInt *)v87);
    if (DWORD2(v87[0]) >= 0x41 && *(_QWORD *)&v87[0])
      MEMORY[0x2348A0E84](*(_QWORD *)&v87[0], 0x1000C8000313F17);
    *(_QWORD *)&v87[0] = v89;
    DWORD2(v87[0]) = v90;
    v90 = 0;
    llvm::APInt::operator--();
    v58 = (uint64_t *)llvm::ConstantInt::get();
    goto LABEL_79;
  }
  *(_QWORD *)v80 = a1;
  *(_QWORD *)&v80[8] = a1 + 272;
  v80[16] = 0;
  *(_QWORD *)&v80[24] = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
  v64 = a3;
  v65 = sub_22E50E974(v80, v37, v38);
  v66 = *(_QWORD *)(a1 + 88);
  v67 = sub_22F110B20(*(_QWORD *)(*(_QWORD *)(v37 + 8) & 0xFFFFFFFFFFFFFFF0));
  *(_WORD *)&v80[32] = 257;
  v68 = sub_22E3BF45C((uint64_t *)(a1 + 272), v65, v66, v67, (uint64_t)v80);
  v69 = llvm::ConstantInt::get();
  *(_QWORD *)v80 = "len_sub_1";
  *(_WORD *)&v80[32] = 259;
  v70 = v68;
  a3 = v64;
  v58 = (uint64_t *)sub_22E3E48CC(a1 + 272, v70, v69, (uint64_t)v80, 0, (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 152) + 248) & 0xC00) != 1024);
LABEL_79:
  v97 = v58;
LABEL_90:
  if (DWORD2(v87[0]) >= 0x41 && *(_QWORD *)&v87[0])
    MEMORY[0x2348A0E84](*(_QWORD *)&v87[0], 0x1000C8000313F17);
LABEL_35:
  v88 = 2;
  LODWORD(v87[0]) = 0;
  memset((char *)v87 + 8, 0, 32);
  v22 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), v12);
  if (v22)
  {
    v24 = v22;
    if (*(_BYTE *)(v22 + 16) == 5)
    {
      sub_22E4EBDC8(v80, a1, *(unsigned __int8 **)(a2 + 16), &v88, (uint64_t)v87, (llvm::LLVMContext *)v8, *(_QWORD *)(v22 + 32), a3);
      v59 = sub_22F297878(a1, v24);
      if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 152) + 248) & 0xC00) == 0x400)
      {
        LOWORD(v86) = 257;
        v60 = 0;
      }
      else
      {
        LOWORD(v86) = 257;
        v60 = 1;
      }
      v97 = (uint64_t *)sub_22E3BDEA8(a1 + 272, (uint64_t)v97, (uint64_t)v59, (uint64_t)&v84, 0, v60);
      v83[0] = *(_OWORD *)v80;
      v83[1] = *(_OWORD *)&v80[16];
      v83[2] = *(_OWORD *)&v80[32];
      v61 = *(_QWORD *)(v24 + 32);
      v62 = (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 152) + 248) & 0xC00) != 1024;
      sub_22EFF605C(*(_QWORD *)(a2 + 16));
      v98 = "arrayidx";
      v100 = 259;
      sub_22E4EB808((uint64_t)&v84, a1, v83, &v97, 1, v61, v62, 0, v63, 0, 0, &v98);
      goto LABEL_41;
    }
  }
  v25 = *(_QWORD *)(a2 + 16);
  if ((*(_BYTE *)v25 + 102) < 0xF5u
    || (*(_DWORD *)v25 & 0x1FC0000) != 0x300000
    || (v26 = *(_QWORD *)(v25 + 16),
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v26 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                 + 16) == 5))
  {
    sub_22E4EBDC8(v80, a1, (unsigned __int8 *)v25, &v88, (uint64_t)v87, (llvm::LLVMContext *)v8, v12, a3);
    v75[0] = *(_OWORD *)v80;
    v75[1] = *(_OWORD *)&v80[16];
    v75[2] = *(_OWORD *)&v80[32];
    v27 = (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 152) + 248) & 0xC00) != 1024;
    sub_22EFF605C(*(_QWORD *)(a2 + 16));
    v98 = "arrayidx";
    v100 = 259;
    sub_22E4EB808((uint64_t)&v84, a1, v75, &v97, 1, v12, v27, 0, v28, 0, 0, &v98);
LABEL_41:
    v29 = v84;
    v31 = *((_QWORD *)&v85 + 1);
    v30 = v85;
    v32 = v86;
    goto LABEL_42;
  }
  if (*(_BYTE *)v26 == 107)
    sub_22E4E0AF8((uint64_t)v80, (_QWORD *)a1, *(_QWORD *)(v25 + 16), 1, v23);
  else
    sub_22E4D8D7C(v80);
  v44 = v81;
  v45 = v82;
  v76 = *(_OWORD *)&v80[8];
  v77 = *(_QWORD *)&v80[24];
  v78 = *(_QWORD *)&v80[32];
  v79 = *(_OWORD *)&v80[40];
  v98 = (const char *)llvm::ConstantInt::get();
  v99 = v97;
  v46 = (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 152) + 248) & 0xC00) != 1024;
  sub_22EFF605C(*(_QWORD *)(a2 + 16));
  *(_QWORD *)&v84 = "arrayidx";
  LOWORD(v86) = 259;
  sub_22E4EB808((uint64_t)v80, a1, &v76, (uint64_t **)&v98, 2, v12, v46, 0, v47, 0, 0, (const char **)&v84);
  v29 = *(_OWORD *)v80;
  v31 = *(_QWORD *)&v80[24];
  v30 = *(_QWORD *)&v80[16];
  v32 = *(_OWORD *)&v80[32];
  v88 = v44;
  if (v45 == 1)
  {
    *(_DWORD *)v80 = 1;
    memset(&v80[8], 0, 32);
  }
  else
  {
    v72 = *(_OWORD *)&v80[32];
    v74 = *(_OWORD *)v80;
    sub_22E6281E0(*(_QWORD **)(a1 + 144), v12, (uint64_t)v80);
    v32 = v72;
    v29 = v74;
  }
  v87[0] = *(_OWORD *)v80;
  v87[1] = *(_OWORD *)&v80[16];
  *(_QWORD *)&v87[2] = *(_QWORD *)&v80[32];
LABEL_42:
  v33 = v88;
  v84 = v87[0];
  v85 = v87[1];
  *(_QWORD *)&v86 = *(_QWORD *)&v87[2];
  *(_OWORD *)v80 = v29;
  *(_QWORD *)&v80[16] = v30;
  *(_QWORD *)&v80[24] = v31;
  *(_OWORD *)&v80[32] = v32;
  v34 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 32) = 0;
  *(_QWORD *)(a4 + 40) = 0;
  *(_QWORD *)(a4 + 48) = 0;
  *(_QWORD *)(a4 + 64) = 0;
  *(_QWORD *)(a4 + 72) = 0;
  *(_QWORD *)(a4 + 84) = 2;
  *(_DWORD *)a4 = 0;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  sub_22E3C113C(a4, (__int128 *)v80, v12, v33, &v84, v34);
}

void sub_22E4E4A14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  llvm::Constant *v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t AggregateElement;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  llvm::Value *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  _DWORD v87[2];
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  llvm::Constant *v95;
  unint64_t v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  llvm::Constant *v112;
  unint64_t v113;
  int v114;
  __int128 v115;
  int v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  int v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  llvm::Constant *v137;
  unint64_t v138;
  _BYTE v139[20];
  int v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  _BYTE v144[40];
  uint64_t v145;

  v145 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a3 + 16);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                + 16) == 39)
  {
    v123 = 2;
    *(_DWORD *)v144 = 0;
    memset(&v144[8], 0, 32);
    sub_22E4DFD40(&v120, a2);
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (!v7 || *(_BYTE *)(v7 + 16) != 39)
      v7 = sub_22F10CF48(v7);
    v8 = *(_QWORD *)(v7 + 32);
    v124 = *(_OWORD *)v144;
    v125 = *(_OWORD *)&v144[16];
    v126 = *(_QWORD *)&v144[32];
    v127 = v120;
    v128 = v121;
    v129 = v122;
    v9 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
    v131 = 0;
    *((_QWORD *)&v130 + 1) = 0;
    v133 = 0;
    v132 = 0;
    v136 = 0;
    v135 = 0;
    *(_QWORD *)v139 = 0;
    v138 = 0;
    *(_QWORD *)&v139[12] = 2;
    LODWORD(v130) = 0;
    v141 = 0u;
    v142 = 0u;
    sub_22E3C113C((uint64_t)&v130, &v127, v8, v123, &v124, v9);
    v10 = v130;
    v58 = DWORD1(v130);
    v62 = v131;
    v63 = *((_QWORD *)&v130 + 1);
    v11 = v132;
    v12 = v133;
    v65 = v134;
    v67 = v136;
    v68 = v135;
    v13 = v137;
    v14 = v138;
    v57 = *(_QWORD *)&v139[4];
    v59 = *(_QWORD *)&v139[12];
    v56 = v140;
    v55 = v141;
    v54 = *((_QWORD *)&v142 + 1);
    v15 = v142;
    v16 = *(_DWORD *)v139 & 0xFFFFFFCF;
    goto LABEL_8;
  }
  if ((*(_BYTE *)(v6 + 1) & 3) != 0)
  {
    sub_22E4D8D7C(&v130);
    v10 = v130;
    v58 = DWORD1(v130);
    v62 = v131;
    v63 = *((_QWORD *)&v130 + 1);
    v11 = v132;
    v12 = v133;
    v65 = v134;
    v67 = v136;
    v68 = v135;
    v13 = v137;
    v14 = v138;
    v57 = *(_QWORD *)&v139[4];
    v59 = *(_QWORD *)&v139[12];
    v16 = *(_DWORD *)v139;
    v56 = v140;
    v55 = v141;
    v54 = *((_QWORD *)&v142 + 1);
    v15 = v142;
LABEL_8:
    v53 = v143;
    goto LABEL_9;
  }
  *(_QWORD *)&v130 = a2;
  *((_QWORD *)&v130 + 1) = a2 + 272;
  LOBYTE(v131) = 0;
  v132 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 232);
  v61 = sub_22E50E974((uint64_t *)&v130, (unsigned __int8 *)v6);
  v42 = *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8);
  *(_QWORD *)&v130 = "tmp";
  LOWORD(v133) = 259;
  v43 = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 144), v42);
  v44 = sub_22E4D85B8(a2, v42, v43, (uint64_t)&v130, 0);
  v46 = 0;
  if (v44 <= 7)
    v47 = 0;
  else
    v47 = v44 & 0xFFFFFFFFFFFFFFF8;
  if (v44 <= 7)
    v48 = 0;
  else
    v48 = v45 & 0xFFFFFFFFFFFFFFF8;
  if (v44 >= 8)
    v46 = 1 << (v45 & 7 | (8 * (v44 & 7)));
  v49 = *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8);
  sub_22E6281E0(*(_QWORD **)(a2 + 144), v49, (uint64_t)&v124);
  *(_QWORD *)&v127 = v47;
  *((_QWORD *)&v127 + 1) = v48;
  *(_QWORD *)&v128 = v46;
  DWORD2(v128) = 0;
  v129 = 0uLL;
  v50 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
  v120 = v124;
  v121 = v125;
  *(_QWORD *)&v122 = v126;
  v131 = 0;
  *((_QWORD *)&v130 + 1) = 0;
  v133 = 0;
  v132 = 0;
  v136 = 0;
  v135 = 0;
  *(_QWORD *)v139 = 0;
  v138 = 0;
  *(_QWORD *)&v139[12] = 2;
  LODWORD(v130) = 0;
  v141 = 0u;
  v142 = 0u;
  sub_22E3C113C((uint64_t)&v130, &v127, v49, 0, &v120, v50);
  v10 = v130;
  v11 = v132;
  v12 = v133;
  v13 = v137;
  v14 = v138;
  v16 = *(_DWORD *)v139;
  v15 = v142;
  v58 = DWORD1(v130);
  v105 = v130;
  v62 = v131;
  v63 = *((_QWORD *)&v130 + 1);
  v106 = v131;
  v107 = v132;
  v108 = v133;
  v65 = v134;
  v109 = v134;
  v67 = v136;
  v68 = v135;
  v110 = v135;
  v111 = v136;
  v112 = v137;
  v113 = v138;
  v57 = *(_QWORD *)&v139[4];
  v59 = *(_QWORD *)&v139[12];
  v115 = *(_OWORD *)&v139[4];
  v114 = *(_DWORD *)v139;
  v56 = v140;
  v116 = v140;
  v55 = v141;
  v117 = v141;
  v118 = v142;
  v53 = v143;
  v54 = *((_QWORD *)&v142 + 1);
  v119 = v143;
  sub_22E4E87FC(a2, (uint64_t)v61, (uint64_t)&v105, 1u);
LABEL_9:
  v60 = sub_22EF5DE18(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 144), *(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8 | (v16 | *(_QWORD *)(a3 + 8)) & 7, (v16 >> 9) & 3);
  *(_QWORD *)v144 = &v144[16];
  *(_QWORD *)&v144[8] = 0x400000000;
  sub_22F0028D8(a3, (uint64_t)v144);
  if (v10 == 6)
  {
    v51 = a3;
    v52 = a1;
    v17 = v15;
    *(_QWORD *)&v130 = "shadow.global.builtin";
    LOWORD(v133) = 259;
    v18 = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 144), v14);
    v19 = sub_22E4D85B8(a2, v14, v18, (uint64_t)&v130, 0);
    v21 = 0;
    if (v19 <= 7)
      v22 = 0;
    else
      v22 = v19 & 0xFFFFFFFFFFFFFFF8;
    if (v19 <= 7)
      v23 = 0;
    else
      v23 = v20 & 0xFFFFFFFFFFFFFFF8;
    if (v19 >= 8)
      v21 = 1 << (v20 & 7 | (8 * (v19 & 7)));
    v24 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 800);
    v87[0] = 6;
    v87[1] = v58;
    v88 = v63;
    v89 = v62;
    v90 = v11;
    v91 = v12;
    v92 = v65;
    v93 = v68;
    v94 = v67;
    v95 = v13;
    v96 = v14;
    v98 = v57;
    v99 = v59;
    v97 = v16;
    v100 = v56;
    v101 = v55;
    v102 = v17;
    v103 = v54;
    v104 = v53;
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, _DWORD *))(*(_QWORD *)v24 + 72))(&v130, v24, a2, v87);
    v25 = v130;
    *(_QWORD *)&v127 = v22;
    *((_QWORD *)&v127 + 1) = v23;
    *(_QWORD *)&v128 = v21;
    DWORD2(v128) = 0;
    v129 = 0uLL;
    sub_22E6281E0(*(_QWORD **)(a2 + 144), v14, (uint64_t)&v120);
    sub_22E4E8134(a2, v25, (uint64_t)&v127, 0, v14, 2, (uint64_t)&v120, 0, 0);
    v26 = *(_QWORD *)(*(_QWORD *)(v51 + 16) + 8);
    sub_22E6281E0(*(_QWORD **)(a2 + 144), v26, (uint64_t)&v124);
    *(_QWORD *)&v127 = v22;
    *((_QWORD *)&v127 + 1) = v23;
    *(_QWORD *)&v128 = v21;
    DWORD2(v128) = 0;
    v129 = 0uLL;
    v27 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
    v120 = v124;
    v121 = v125;
    *(_QWORD *)&v122 = v126;
    v131 = 0;
    *((_QWORD *)&v130 + 1) = 0;
    v133 = 0;
    v132 = 0;
    v136 = 0;
    v135 = 0;
    *(_QWORD *)v139 = 0;
    v138 = 0;
    *(_QWORD *)&v139[12] = 2;
    LODWORD(v130) = 0;
    v141 = 0u;
    v142 = 0u;
    sub_22E3C113C((uint64_t)&v130, &v127, v26, 2, &v120, v27);
    v28 = *((_QWORD *)&v130 + 1);
    v29 = v131;
    v11 = v132;
    v12 = v133;
    v30 = v134;
    v67 = v136;
    v68 = v135;
    v13 = v137;
    v31 = *(_DWORD *)&v139[12];
    a1 = v52;
    if ((_DWORD)v130)
      goto LABEL_19;
LABEL_26:
    v40 = llvm::ConstantDataVector::get();
    *(_QWORD *)&v81 = v28;
    *((_QWORD *)&v81 + 1) = v29;
    v82 = v11;
    v83 = v12;
    v84 = v30;
    v85 = v68;
    v86 = v67;
    v78 = 0;
    v79 = 0u;
    v80 = 0u;
    sub_22E4EC158(a1, &v81, v40, v60, v31, (uint64_t)&v78);
    goto LABEL_29;
  }
  v31 = v59;
  v29 = v62;
  v28 = v63;
  v30 = v65;
  if (!v10)
    goto LABEL_26;
LABEL_19:
  *(_QWORD *)&v130 = &v131;
  *((_QWORD *)&v130 + 1) = 0x400000000;
  if (*(_DWORD *)&v144[8])
  {
    v66 = v30;
    v64 = v12;
    v32 = v11;
    v33 = a1;
    v34 = v29;
    v35 = v28;
    v36 = 0;
    v37 = 4 * *(unsigned int *)&v144[8];
    do
    {
      AggregateElement = llvm::Constant::getAggregateElement(v13);
      v39 = DWORD2(v130);
      if (DWORD2(v130) >= (unint64_t)HIDWORD(v130))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v39 = DWORD2(v130);
      }
      *(_QWORD *)(v130 + 8 * v39) = AggregateElement;
      ++DWORD2(v130);
      v36 += 4;
    }
    while (v37 != v36);
    v28 = v35;
    v29 = v34;
    a1 = v33;
    v11 = v32;
    v12 = v64;
    v30 = v66;
  }
  v41 = llvm::ConstantVector::get();
  *(_QWORD *)&v72 = v28;
  *((_QWORD *)&v72 + 1) = v29;
  v73 = v11;
  v74 = v12;
  v75 = v30;
  v76 = v68;
  v77 = v67;
  v69 = 0;
  v70 = 0u;
  v71 = 0u;
  sub_22E4EC158(a1, &v72, v41, v60, v31, (uint64_t)&v69);
  if ((uint64_t *)v130 != &v131)
    free((void *)v130);
LABEL_29:
  if (*(_BYTE **)v144 != &v144[16])
    free(*(void **)v144);
}

void sub_22E4E52C0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned __int8 *v32;
  int v33;
  char v34;
  uint64_t v35;
  int v36;
  char v37;
  _BYTE *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _OWORD v49[2];
  uint64_t v50;
  _OWORD v51[2];
  uint64_t v52;
  _OWORD v53[2];
  uint64_t v54;
  _OWORD v55[3];
  _OWORD v56[3];
  __int128 v57;
  _BYTE v58[136];
  _BYTE v59[65];
  __int128 v60;
  _BYTE v61[55];
  uint64_t *v62;
  _QWORD v63[3];
  _BYTE v64[49];
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _BYTE v69[23];
  __int128 v70[2];
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  _BYTE v79[23];
  uint64_t v80;

  v80 = *MEMORY[0x24BDAC8D0];
  v6 = *(_DWORD *)a3;
  if ((*(_DWORD *)a3 & 0x300) != 0)
  {
    v62 = a2;
    v63[0] = 0;
    v63[2] = 0;
    if (v6 != 103)
      sub_22F253B0C((uint64_t)a2, *(_QWORD *)(a3 + 56), *(_QWORD *)(a3 + 24), (uint64_t)v63);
    sub_22E4EC838((uint64_t)&v57, a2, (_BYTE *)a3);
    if (v58[120])
    {
      v7 = *(_OWORD *)&v58[96];
      *(_OWORD *)(a1 + 96) = *(_OWORD *)&v58[80];
      *(_OWORD *)(a1 + 112) = v7;
      *(_QWORD *)(a1 + 128) = *(_QWORD *)&v58[112];
      v8 = *(_OWORD *)&v58[32];
      *(_OWORD *)(a1 + 32) = *(_OWORD *)&v58[16];
      *(_OWORD *)(a1 + 48) = v8;
      v9 = *(_OWORD *)&v58[64];
      *(_OWORD *)(a1 + 64) = *(_OWORD *)&v58[48];
      *(_OWORD *)(a1 + 80) = v9;
      v10 = *(_OWORD *)v58;
      *(_OWORD *)a1 = v57;
      *(_OWORD *)(a1 + 16) = v10;
    }
    else
    {
      *(_QWORD *)v64 = "cond.true";
      *(_WORD *)&v64[32] = 259;
      v11 = (_QWORD *)operator new();
      *(_QWORD *)&v57 = llvm::BasicBlock::BasicBlock();
      *(_QWORD *)&v72 = "cond.false";
      LOWORD(v74) = 259;
      v12 = (_QWORD *)operator new();
      llvm::BasicBlock::BasicBlock();
      v58[0] = 0;
      v59[0] = 0;
      *(_QWORD *)v64 = "cond.end";
      *(_WORD *)&v64[32] = 259;
      v48 = (_QWORD *)operator new();
      llvm::BasicBlock::BasicBlock();
      *(_QWORD *)&v70[0] = a2[40];
      v13 = 32;
      if (*(_BYTE *)a3 == 103)
        v13 = 24;
      v14 = *(unsigned __int8 **)(a3 + v13);
      v15 = sub_22E3CF180((uint64_t)(a2 + 488), a3);
      if (v16)
        v17 = v15;
      else
        v17 = 0;
      sub_22E61F8F8(a2, v14, (uint64_t)v11, (uint64_t)v12, v17, 0);
      sub_22E5ED9B4(a2, v11, 0);
      sub_22E3CB7B0(a2, a3, 0);
      if (!a2[729])
        a2[729] = (uint64_t)v70;
      v18 = 40;
      if (*(_BYTE *)a3 == 103)
        v18 = 32;
      v19 = *(unsigned __int8 **)(a3 + v18);
      do
      {
        v20 = (uint64_t)v19;
        v21 = *v19;
        if (v21 > 0xD5)
        {
          if (v21 == 233)
          {
            if ((*(_DWORD *)v19 & 0x7C0000) != 0x300000)
              goto LABEL_32;
            v21 = *(_DWORD *)v19;
            v23 = v19 + 16;
          }
          else
          {
            if (v21 != 214)
              break;
            v23 = v19 + 24;
          }
        }
        else if (v21 == 155)
        {
          if ((**((_DWORD **)v19 + 2) & 0x18000) != 0)
            goto LABEL_32;
          v23 = v19 + 24;
          if (!*(_BYTE *)(v20 + 48))
            v23 = (unsigned __int8 *)(v20 + 32);
          v21 = 155;
        }
        else
        {
          if (v21 != 176)
            break;
          v22 = *((unsigned int *)v19 + 5);
          if ((_DWORD)v22 == -1)
            goto LABEL_32;
          v23 = &v19[8 * v22 + 40];
          v21 = 176;
        }
        v19 = *(unsigned __int8 **)v23;
      }
      while (v19 != (unsigned __int8 *)v20);
      if (v21 != 134)
      {
LABEL_32:
        sub_22E4D8D7C(v64);
        v24 = 0;
        v78 = v68;
        *(_OWORD *)v79 = *(_OWORD *)v69;
        *(_QWORD *)&v79[15] = *(_QWORD *)&v69[15];
        v25 = v64[0];
        v74 = *(_OWORD *)&v64[33];
        v75 = v65;
        v76 = v66;
        v77 = v67;
        v72 = *(_OWORD *)&v64[1];
        v73 = *(_OWORD *)&v64[17];
        goto LABEL_33;
      }
      sub_22F25C5A0(a2, v20, 0);
      v25 = 0;
      v24 = 1;
LABEL_33:
      *(_OWORD *)&v58[81] = v77;
      *(_OWORD *)&v58[97] = v78;
      *(_OWORD *)&v58[113] = *(_OWORD *)v79;
      *(_OWORD *)&v58[17] = v73;
      *(_OWORD *)&v58[33] = v74;
      *(_OWORD *)&v58[49] = v75;
      *(_OWORD *)&v58[65] = v76;
      v58[0] = v25;
      *(_QWORD *)&v58[128] = *(_QWORD *)&v79[15];
      *(_OWORD *)&v58[1] = v72;
      if ((__int128 *)a2[729] == v70)
        a2[729] = 0;
      v47 = a2[40];
      if ((v24 & 1) == 0)
      {
        v26 = llvm::User::operator new((llvm::User *)0x40);
        llvm::BranchInst::BranchInst();
        *(_WORD *)&v64[32] = 257;
        sub_22E3C12C8(a2 + 34, v26, (uint64_t)v64);
      }
      sub_22E5ED9B4(a2, v12, 0);
      if (!a2[729])
        a2[729] = (uint64_t)v70;
      v27 = 48;
      if (*(_BYTE *)a3 == 103)
        v27 = 40;
      v28 = *(unsigned __int8 **)(a3 + v27);
      do
      {
        v29 = (uint64_t)v28;
        v30 = *v28;
        if (v30 > 0xD5)
        {
          if (v30 == 233)
          {
            if ((*(_DWORD *)v28 & 0x7C0000) != 0x300000)
              goto LABEL_58;
            v30 = *(_DWORD *)v28;
            v32 = v28 + 16;
          }
          else
          {
            if (v30 != 214)
              break;
            v32 = v28 + 24;
          }
        }
        else if (v30 == 155)
        {
          if ((**((_DWORD **)v28 + 2) & 0x18000) != 0)
            goto LABEL_58;
          v32 = v28 + 24;
          if (!*(_BYTE *)(v29 + 48))
            v32 = (unsigned __int8 *)(v29 + 32);
          v30 = 155;
        }
        else
        {
          if (v30 != 176)
            break;
          v31 = *((unsigned int *)v28 + 5);
          if ((_DWORD)v31 == -1)
            goto LABEL_58;
          v32 = &v28[8 * v31 + 40];
          v30 = 176;
        }
        v28 = *(unsigned __int8 **)v32;
      }
      while (v28 != (unsigned __int8 *)v29);
      if (v30 != 134)
      {
LABEL_58:
        sub_22E4D8D7C(v64);
        v33 = 0;
        v78 = v68;
        *(_OWORD *)v79 = *(_OWORD *)v69;
        *(_QWORD *)&v79[15] = *(_QWORD *)&v69[15];
        v34 = v64[0];
        v74 = *(_OWORD *)&v64[33];
        v75 = v65;
        v76 = v66;
        v77 = v67;
        v72 = *(_OWORD *)&v64[1];
        v73 = *(_OWORD *)&v64[17];
        goto LABEL_59;
      }
      sub_22F25C5A0(a2, v29, 0);
      v34 = 0;
      v33 = 1;
LABEL_59:
      *(_OWORD *)&v61[16] = v78;
      *(_OWORD *)&v61[32] = *(_OWORD *)v79;
      *(_OWORD *)v61 = v77;
      *(_OWORD *)&v59[17] = v73;
      *(_OWORD *)&v59[33] = v74;
      *(_OWORD *)&v59[49] = v75;
      v60 = v76;
      v59[0] = v34;
      *(_QWORD *)&v61[47] = *(_QWORD *)&v79[15];
      *(_OWORD *)&v59[1] = v72;
      if ((__int128 *)a2[729] == v70)
        a2[729] = 0;
      v35 = a2[40];
      sub_22E5ED9B4(a2, v48, 0);
      if (*(_DWORD *)v58)
        v36 = v24;
      else
        v36 = 1;
      if (v36 == 1 && (!*(_DWORD *)v59 ? (v37 = 1) : (v37 = v33), (v37 & 1) != 0))
      {
        if (((v24 | v33) & 1) != 0)
        {
          v38 = v58;
          if (v24)
            v38 = v59;
          v39 = *((_OWORD *)v38 + 7);
          *(_OWORD *)(a1 + 96) = *((_OWORD *)v38 + 6);
          *(_OWORD *)(a1 + 112) = v39;
          *(_QWORD *)(a1 + 128) = *((_QWORD *)v38 + 16);
          v40 = *((_OWORD *)v38 + 3);
          *(_OWORD *)(a1 + 32) = *((_OWORD *)v38 + 2);
          *(_OWORD *)(a1 + 48) = v40;
          v41 = *((_OWORD *)v38 + 5);
          *(_OWORD *)(a1 + 64) = *((_OWORD *)v38 + 4);
          *(_OWORD *)(a1 + 80) = v41;
          v42 = *((_OWORD *)v38 + 1);
          *(_OWORD *)a1 = *(_OWORD *)v38;
          *(_OWORD *)(a1 + 16) = v42;
        }
        else
        {
          v56[0] = *(_OWORD *)&v58[8];
          v56[1] = *(_OWORD *)&v58[24];
          v56[2] = *(_OWORD *)&v58[40];
          v55[0] = *(_OWORD *)&v59[8];
          v55[1] = *(_OWORD *)&v59[24];
          v55[2] = *(_OWORD *)&v59[40];
          sub_22E5DE93C(a2, (uint64_t)v56, (uint64_t)v55, v47, v35, a2[40], *(_QWORD *)(a3 + 8), &v72);
          if (*(int *)&v58[84] <= *(int *)&v61[3])
            v43 = *(_DWORD *)&v61[3];
          else
            v43 = *(_DWORD *)&v58[84];
          v44 = a2[18];
          v51[0] = *(_OWORD *)&v58[88];
          v51[1] = *(_OWORD *)&v58[104];
          v52 = *(_QWORD *)&v58[120];
          v49[0] = *(_OWORD *)&v61[7];
          v49[1] = *(_OWORD *)&v61[23];
          v50 = *(_QWORD *)&v61[39];
          sub_22F29957C(v44, (uint64_t)v51, (uint64_t)v49, (uint64_t)v53);
          *(_OWORD *)v64 = v72;
          *(_OWORD *)&v64[16] = v73;
          *(_OWORD *)&v64[32] = v74;
          v45 = *(_QWORD *)(a3 + 8);
          v70[0] = v53[0];
          v70[1] = v53[1];
          v71 = v54;
          v46 = *(_QWORD *)(a2[18] + 144);
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)(a1 + 24) = 0;
          *(_QWORD *)(a1 + 8) = 0;
          *(_DWORD *)(a1 + 32) = 0;
          *(_QWORD *)(a1 + 40) = 0;
          *(_QWORD *)(a1 + 48) = 0;
          *(_QWORD *)(a1 + 64) = 0;
          *(_QWORD *)(a1 + 72) = 0;
          *(_QWORD *)(a1 + 84) = 2;
          *(_DWORD *)a1 = 0;
          *(_OWORD *)(a1 + 96) = 0u;
          *(_OWORD *)(a1 + 112) = 0u;
          sub_22E3C113C(a1, (__int128 *)v64, v45, v43, v70, v46);
        }
      }
      else
      {
        sub_22F25ED04(a1, (uint64_t)a2, a3, "conditional operator");
      }
    }
    if (v63[0])
      sub_22F254324((uint64_t)v63, (uint64_t)a2);
  }
  else
  {
    sub_22F261638((uint64_t)a2, a3, a1);
  }
}

void sub_22E4E5ABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

_QWORD *sub_22E4E5B20()
{
  _QWORD *v0;

  return sub_22E4D8D7C(v0);
}

void sub_22E4E5B4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  _DWORD v21[94];

  v7 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                       + 8) & 0xFFFFFFFFFFFFFFF0)
                               + 24));
  sub_22E4D8D7C(v1, *(unsigned int **)(v2 + 16), (uint64_t)v21);
  v8 = *(_OWORD *)(v5 + 24);
  v4[9] = *(_OWORD *)(v5 + 8);
  v4[10] = v8;
  v4[11] = *(_OWORD *)(v5 + 40);
  v9 = (uint64_t *)sub_22EFFB554((unsigned __int8 *)v2);
  v10 = &v9[*(unsigned int *)(v2 + 4)];
  sub_22EFF605C(v2);
  sub_22E48032C((_QWORD *)v1, (uint64_t)&v20, v7, v9, v10, 0, v11, v6 - 176);
  v12 = *(_OWORD *)(v5 + 200);
  v4[6] = *(_OWORD *)(v5 + 184);
  v4[7] = v12;
  v4[8] = *(_OWORD *)(v5 + 216);
  v13 = *(_QWORD *)(v2 + 8);
  v14 = v21[21];
  if (v21[22] == 1)
  {
    LODWORD(v18[0]) = 1;
    v4[4] = 0u;
    v4[5] = 0u;
  }
  else
  {
    sub_22E6281E0(*(_QWORD **)(v1 + 144), v13, (uint64_t)v18);
  }
  v15 = v4[7];
  *(_OWORD *)(v5 + 232) = v4[6];
  *(_OWORD *)(v5 + 248) = v15;
  *(_OWORD *)(v3 + 32) = v4[8];
  v16 = v18[1];
  *(_OWORD *)(v5 + 136) = v18[0];
  v17 = *(_QWORD *)(*(_QWORD *)(v1 + 144) + 144);
  *(_OWORD *)(v5 + 152) = v16;
  *(_QWORD *)(v6 - 192) = v19;
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_DWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 72) = 0;
  *(_QWORD *)(v0 + 84) = 2;
  *(_DWORD *)v0 = 0;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 112) = 0u;
  sub_22E3C113C(v0, (__int128 *)(v6 - 128), v13, v14, (__int128 *)(v6 - 224), v17);
}

double sub_22E4E6354()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v3 && *(_BYTE *)(v3 + 16) == 39 && (*(_DWORD *)(v3 + 40) & 6) == 2)
    JUMPOUT(0x22E4E638CLL);
  return sub_22F25ED04(v0, v1, v2, "unexpected cast lvalue");
}

uint64_t sub_22E4E63B8()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  int v7;

  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v4 || *(_BYTE *)(v4 + 16) != 39)
    v4 = sub_22F10CF48(v4);
  v5 = *(_BYTE *)(v4 + 40) & 7;
  v6 = v5 > 4;
  v7 = (1 << v5) & 0x13;
  if (!v6 && v7 != 0)
    JUMPOUT(0x22E4E63FCLL);
  return sub_22F261638(v2, v3, v1);
}

uint64_t sub_22E4E6434(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31[2];
  int v32;
  char v33;
  void *v34;
  uint64_t v35;
  _BYTE v36[64];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_DWORD *)(v2 + 28) & 0x7F;
  if (v3 == 64)
    return 0;
  if ((v3 - 67) < 0xFFFFFFF9)
  {
    if (v3 == 67)
    {
LABEL_20:
      LOWORD(v37) = 0;
      v38 = 0;
      LODWORD(v39) = 0;
      v4 = 0;
      if ((sub_22F005120((unsigned __int8 *)a2, (uint64_t)&v37, *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), 0) & 1) == 0)
        goto LABEL_24;
      goto LABEL_21;
    }
    return 0;
  }
  v8 = (uint64_t *)(v2 + 48);
  v9 = *(_QWORD *)((*(_QWORD *)(v2 + 48) & 0xFFFFFFFFFFFFFFF0) + 8);
  v10 = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0);
  if (!v10 || (v11 = *(_DWORD *)(v10 + 16), (v11 & 0xFE) != 0x28))
  {
    if ((sub_22E4EECE4(*(_QWORD *)(v2 + 48) & 7 | v9) & 1) != 0)
      goto LABEL_20;
    return 0;
  }
  if ((v11 & 0x100000) != 0)
  {
    do
    {
      while (1)
      {
        v10 = *(_QWORD *)(*(_QWORD *)(v10 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (!v10)
          break;
        v12 = *(_DWORD *)(v10 + 16);
        if ((v12 & 0xFE) != 0x28)
          break;
        if ((v12 & 0x100000) == 0)
          goto LABEL_15;
      }
      v10 = sub_22F10CF48(v10);
    }
    while ((*(_DWORD *)(v10 + 16) & 0x100000) != 0);
  }
LABEL_15:
  v13 = sub_22E4EECE4(*(_QWORD *)(v10 + 32));
  LOWORD(v37) = 0;
  v38 = 0;
  LODWORD(v39) = 0;
  if ((v13 & 1) != 0
    && sub_22F005120((unsigned __int8 *)a2, (uint64_t)&v37, *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), 0))
  {
LABEL_21:
    v18 = 0;
    v8 = (uint64_t *)(a2 + 8);
    goto LABEL_22;
  }
  if (!sub_22F005B20(a2, &v37, *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), 0, v14, v15, v16, v17))
  {
LABEL_23:
    v4 = 0;
    goto LABEL_24;
  }
  v18 = 1;
LABEL_22:
  if ((_BYTE)v37)
    goto LABEL_23;
  v19 = *v8;
  v20 = *(_QWORD *)(a1 + 144);
  if ((*(_WORD *)(*(_QWORD *)(v20 + 152) + 96) & 0x80) != 0 && (_DWORD)v39 == 7 && (*(_BYTE *)(a2 + 2) & 0x40) != 0)
  {
    v21 = *(_QWORD *)(a1 + 1600);
    if (v21)
    {
      if ((*(_DWORD *)(v21 + 28) & 0x7Eu) - 54 <= 3)
      {
        v22 = *(_WORD *)(v21 + 80) & 0x7F;
        v23 = -40;
        if (v22 > 0x46)
        {
          switch(v22)
          {
            case 'S':
              goto LABEL_46;
            case 'G':
              v23 = -56;
              goto LABEL_46;
            case 'Q':
LABEL_46:
              v24 = *(_QWORD *)(v21 + 72 + v23 + 16);
              v25 = (_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF8);
              if ((v24 & 4) != 0)
                v25 = (_QWORD *)*v25;
              if (v25)
                v26 = v25 - 8;
              else
                v26 = 0;
              v27 = v26[16];
              if (v27)
              {
                if (((*(unsigned __int16 *)(v27 + 8) | (*(unsigned __int8 *)(v27 + 10) << 16)) & 0x100000) != 0)
                {
                  v28 = *(_QWORD *)(v21 + 40);
                  if ((v28 & 7) == 6 && *(_DWORD *)(v28 & 0xFFFFFFFFFFFFFFF8) == 42 && (v40 & 3) == 0)
                  {
                    v29 = v40 & 0xFFFFFFFFFFFFFFFCLL;
                    if ((v40 & 0xFFFFFFFFFFFFFFFCLL) != 0 && (*(_DWORD *)(v29 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9)
                    {
                      v30 = *v8;
                      if (!sub_22E466E5C(v29))
                        goto LABEL_23;
                      v20 = *(_QWORD *)(a1 + 144);
                      v19 = v30;
                    }
                  }
                }
              }
              goto LABEL_60;
          }
        }
        else
        {
          if (v22 <= 0x18)
          {
            if (v22 == 16)
            {
LABEL_34:
              v23 = -48;
              goto LABEL_46;
            }
            if (((1 << v22) & 0x1066) != 0)
              goto LABEL_46;
            if (v22 == 24)
              goto LABEL_34;
          }
          if (v22 == 70)
          {
LABEL_44:
            v23 = -64;
            goto LABEL_46;
          }
        }
        if (v22 - 52 >= 6)
        {
          if (v22 - 33 >= 5)
            goto LABEL_34;
          goto LABEL_44;
        }
        v23 = -72;
        goto LABEL_46;
      }
    }
  }
LABEL_60:
  v31[0] = v20;
  v31[1] = a1;
  v32 = 1;
  v33 = 0;
  v34 = v36;
  v35 = 0x400000000;
  v4 = sub_22E50650C(v31, &v39, v19);
  LOBYTE(v32) = 0;
  if (v34 == v36)
  {
    if (v4)
      goto LABEL_62;
  }
  else
  {
    free(v34);
    if (v4)
    {
LABEL_62:
      if ((*(_DWORD *)(v2 + 28) & 0x7Fu) - 60 > 6
        || (sub_22EF736B8(*(_QWORD **)(*(_QWORD *)(a1 + 144) + 144), v2) & 1) == 0)
      {
        sub_22E621260(a1, a2, (uint64_t)&v39);
      }
      if (v18)
        v4 |= 4uLL;
      else
        v4 &= ~4uLL;
    }
  }
LABEL_24:
  if (v39 >= 2)
    sub_22EF53BC0(&v39);
  return v4;
}

uint64_t sub_22E4E6824(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_22E4E685C(a1, a2);
  if (result)
    return sub_22E4E6434(a1, result);
  return result;
}

uint64_t sub_22E4E685C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a2 + 24);
  if (v2)
    v3 = (*(_DWORD *)(v2 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9;
  else
    v3 = 0;
  if (!v3)
    return 0;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
  v6 = *(_DWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 8);
  v8 = (*(_DWORD *)a2 >> 8) & 3;
  v9 = (*(_DWORD *)a2 >> 22) & 3;
  v11 = *(_QWORD *)(v2 + 40);
  v12 = v6;
  sub_22EFC6D6C((uint64_t)&v13, v11);
  v10 = sub_22E3CD3D4(v5 + 2032, 32, 3);
  return sub_22EFF6AE4(v10, v5, 0, 0, 0, v2, 0, (uint64_t)&v11, 0, 0, v7, v8, SHIWORD(v8), v9);
}

unint64_t sub_22E4E6920(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v7;
  _BYTE v8[136];
  _QWORD v9[7];

  v3 = *a2;
  if ((*a2 & 4) == 0)
    return v3 & 0xFFFFFFFFFFFFFFF8;
  sub_22E619C24(v3 & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(a3 + 8), 0, 1, (uint64_t)a1, (uint64_t)v8);
  sub_22EFF605C(a3);
  sub_22E4D7B28(a1, (uint64_t)v8, v7, (uint64_t)v9);
  return v9[0];
}

uint64_t sub_22E4E6994(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4, unsigned int a5, int a6, uint64_t a7, int a8)
{
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  llvm::Type **v30;
  uint64_t v31;
  uint64_t v32;
  llvm::LLVMContext *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  llvm::LLVMContext *v50;
  uint64_t v51;
  __int128 v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t Range;
  uint64_t v58;
  llvm::Type **v59;
  uint64_t v61;
  uint64_t v62;
  _OWORD v64[2];
  uint64_t v65;
  _OWORD v66[3];
  __int128 v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  _OWORD v74[8];
  uint64_t v75;
  __int128 v76[2];
  __int128 v77;
  _OWORD v78[8];
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  _OWORD v89[3];
  __int128 v90[3];
  _OWORD v91[3];
  _OWORD v92[3];
  _OWORD v93[3];
  uint64_t v94;
  __int128 v95[2];
  uint64_t v96;
  uint64_t v97;

  v97 = *MEMORY[0x24BDAC8D0];
  v15 = (uint64_t *)(a4 & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_22E3E4B64(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0));
  if (v16)
  {
    v17 = *v15;
    if ((*(_DWORD *)(v16 + 16) & 0x780000) == 0x80000)
    {
      v18 = *(_QWORD *)(*(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF0);
      if (*(_BYTE *)(v18 + 16) != 56
        || ((v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)) != 0
          ? (v20 = (*(_DWORD *)(v19 + 16) & 0xFF800FF) == 87031819)
          : (v20 = 0),
            !v20
         || (*(_BYTE *)(*(_QWORD *)(a1 + 152) + *(_QWORD *)(**(_QWORD **)(a1 + 152) - 24) + 160) & 0x20) == 0))
      {
        v21 = *(_QWORD *)(a2 + 8);
        if (!v21 || *(_BYTE *)(v21 + 8) != 17)
        {
          v22 = *(_OWORD *)(a2 + 16);
          v93[0] = *(_OWORD *)a2;
          v93[1] = v22;
          v93[2] = *(_OWORD *)(a2 + 32);
          LOWORD(v77) = 257;
          sub_22E3C408C((uint64_t *)(a1 + 272), (uint64_t)v93, 0, (uint64_t)v76, (uint64_t)&v80);
          v23 = v81;
          *(_OWORD *)a2 = v80;
          *(_OWORD *)(a2 + 16) = v23;
          *(_OWORD *)(a2 + 32) = v82;
          v21 = *(_QWORD *)(a2 + 8);
        }
        sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 144) + 280), (llvm::LLVMContext *)a4);
        v24 = llvm::UndefValue::get();
        v25 = *(unsigned int *)(v21 + 32);
        if (*(_DWORD *)(v21 + 32))
        {
          v26 = 0;
          do
          {
            v27 = *(_OWORD *)(a2 + 16);
            v92[0] = *(_OWORD *)a2;
            v92[1] = v27;
            v92[2] = *(_OWORD *)(a2 + 32);
            LOWORD(v77) = 257;
            sub_22E486A58((uint64_t *)(a1 + 272), (uint64_t)v92, v26, (uint64_t)v76, (uint64_t)&v80);
            v91[0] = v80;
            v91[1] = v81;
            v91[2] = v82;
            v28 = v15[1];
            if ((v28 & 8) != 0)
              v29 = (*(_DWORD *)((v28 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 9) & 3;
            else
              v29 = 0;
            LOWORD(v77) = 257;
            v30 = (llvm::Type **)sub_22E4E7B2C(a1, v91, a3, v29, (uint64_t)v76);
            v31 = sub_22E3E4B64(*v15);
            v32 = sub_22E4E7BB4(a1, v30, *(_QWORD *)(v31 + 32));
            llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 336), v33);
            v34 = llvm::ConstantInt::get();
            LOWORD(v77) = 257;
            v24 = sub_22E3ED5D4((uint64_t *)(a1 + 272), v24, v32, v34, (uint64_t)v76);
            ++v26;
          }
          while (v25 != v26);
        }
        return v24;
      }
    }
  }
  else
  {
    v17 = *v15;
  }
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 55 > 1
    || (v35 = *(_QWORD *)(a1 + 144), (*(_DWORD *)(*(_QWORD *)(v35 + 184) + 92) & 0x20) != 0)
    || ((*(_BYTE *)(a2 + 24) & 3) != 0 ? (v36 = sub_22F28ABCC(a2, a1)) : (v36 = *(_QWORD *)a2),
        !sub_22E4E7DBC(v35, v36, a4)))
  {
    v41 = *(_OWORD *)(a2 + 16);
    v76[0] = *(_OWORD *)a2;
    v76[1] = v41;
    v77 = *(_OWORD *)(a2 + 32);
    v42 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
    v43 = *(_OWORD *)(a7 + 16);
    v95[0] = *(_OWORD *)a7;
    v95[1] = v43;
    v96 = *(_QWORD *)(a7 + 32);
    v81 = 0uLL;
    *((_QWORD *)&v80 + 1) = 0;
    LODWORD(v82) = 0;
    *(_QWORD *)&v83 = 0;
    *((_QWORD *)&v82 + 1) = 0;
    v84 = 0uLL;
    *(_QWORD *)((char *)&v85 + 4) = 2;
    LODWORD(v80) = 0;
    v86 = 0u;
    v87 = 0u;
    sub_22E3C113C((uint64_t)&v80, v76, a4, a6, v95, v42);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 6)
      goto LABEL_48;
    v78[6] = v86;
    v78[7] = v87;
    v79 = v88;
    v78[2] = v82;
    v78[3] = v83;
    v78[4] = v84;
    v78[5] = v85;
    v78[0] = v80;
    v78[1] = v81;
    if (sub_22E3BF6AC(a1, (uint64_t)v78))
    {
LABEL_48:
      v74[6] = v86;
      v74[7] = v87;
      v75 = v88;
      v74[2] = v82;
      v74[3] = v83;
      v74[4] = v84;
      v74[5] = v85;
      v74[0] = v80;
      v74[1] = v81;
      v67 = 0uLL;
      v69 = 0;
      v68 = 0;
      v71 = 0;
      v72 = 0;
      v70 = 0;
      v73 = 0;
      sub_22F24512C(a1, (uint64_t)v74, a5, &v67, (uint64_t)v76);
      return *(_QWORD *)&v76[0];
    }
    v44 = *(_OWORD *)(a2 + 16);
    v66[0] = *(_OWORD *)a2;
    v66[1] = v44;
    v66[2] = *(_OWORD *)(a2 + 32);
    v45 = v15[1];
    v46 = a5;
    if ((v45 & 8) != 0)
      v47 = (*(_DWORD *)((v45 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 9) & 3;
    else
      v47 = 0;
    LOWORD(v77) = 257;
    v48 = (uint64_t *)sub_22E4E7B2C(a1, v66, a3, v47, (uint64_t)v76);
    v49 = v48;
    if (v48 && *((_BYTE *)v48 + 16) == 60)
    {
      if (a8)
      {
        llvm::Value::getContext((llvm::Value *)v48);
        llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 336), v50);
        llvm::ConstantInt::get();
        *(_QWORD *)&v76[0] = llvm::ValueAsMetadata::get();
        llvm::MDTuple::getImpl();
        llvm::Module::getMDKindID();
        llvm::Instruction::setMetadata();
      }
      v51 = *(_QWORD *)(a1 + 144);
      v52 = *(_OWORD *)(a7 + 16);
      v64[0] = *(_OWORD *)a7;
      v64[1] = v52;
      v65 = *(_QWORD *)(a7 + 32);
      sub_22E6282B8(v51, (uint64_t)v49, (uint64_t)v64);
      if ((sub_22E4E765C(a1, v49, a4, v46) & 1) == 0)
      {
        v53 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 184) + 32);
        if ((v53 & 0x1800) != 0)
        {
          DWORD2(v76[0]) = 1;
          *(_QWORD *)&v76[0] = 0;
          DWORD2(v95[0]) = 1;
          *(_QWORD *)&v95[0] = 0;
          v54 = (v53 >> 57) & 1;
          v55 = sub_22E4E7578(a4);
          v56 = sub_22E4E709C(a1, a4, (unint64_t *)v76, (unint64_t *)v95, v54, v55);
          Range = 0;
          if (v56)
          {
            v94 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
            Range = llvm::MDBuilder::createRange((llvm::MDBuilder *)&v94, (const llvm::APInt *)v76, (const llvm::APInt *)v95);
          }
          if (DWORD2(v95[0]) >= 0x41 && *(_QWORD *)&v95[0])
            MEMORY[0x2348A0E84](*(_QWORD *)&v95[0], 0x1000C8000313F17);
          if (DWORD2(v76[0]) >= 0x41 && *(_QWORD *)&v76[0])
            MEMORY[0x2348A0E84](*(_QWORD *)&v76[0], 0x1000C8000313F17);
          if (Range)
            llvm::Instruction::setMetadata();
        }
      }
    }
    v58 = a1;
    v59 = (llvm::Type **)v49;
  }
  else
  {
    v37 = llvm::FixedVectorType::get();
    v38 = *(_OWORD *)(a2 + 16);
    v90[0] = *(_OWORD *)a2;
    v90[1] = v38;
    v90[2] = *(_OWORD *)(a2 + 32);
    *(_QWORD *)&v76[0] = "castToVec4";
    LOWORD(v77) = 259;
    sub_22E3BEE6C((uint64_t *)(a1 + 272), v90, v37, (uint64_t)v76, (uint64_t)&v80);
    v89[0] = v80;
    v89[1] = v81;
    v89[2] = v82;
    v39 = v15[1];
    if ((v39 & 8) != 0)
      v40 = (*(_DWORD *)((v39 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 9) & 3;
    else
      v40 = 0;
    *(_QWORD *)&v76[0] = "loadVec4";
    LOWORD(v77) = 259;
    v61 = sub_22E4E7B2C(a1, v89, a3, v40, (uint64_t)v76);
    *(_QWORD *)&v95[0] = 0x100000000;
    DWORD2(v95[0]) = 2;
    *(_QWORD *)&v76[0] = "extractVec";
    LOWORD(v77) = 259;
    v62 = llvm::PoisonValue::get();
    v59 = (llvm::Type **)sub_22E3ED3CC(a1 + 272, v61, v62, (uint64_t)v95, 3, (uint64_t)v76);
    v58 = a1;
  }
  return sub_22E4E7BB4(v58, v59, a4);
}

uint64_t sub_22E4E709C(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, int a5, int a6)
{
  _BOOL4 v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  llvm::Type *v18;
  unsigned int ScalarSizeInBits;
  unsigned int v20;
  unint64_t v21;
  int v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  unint64_t v28;
  unsigned int v29;
  unint64_t v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  int v35;
  unint64_t v36;
  unsigned int v37;
  unint64_t v38;
  unsigned int v39;
  unint64_t v40;
  unsigned int v41;

  v10 = 0;
  v11 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 44)
    v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  else
    v12 = 0;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 152) + 1) & 1) != 0 && a5 && v12)
    v10 = (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v12 + 24)) + 77) & 2) == 0;
  v13 = a6 | v10;
  if ((_DWORD)v13 == 1)
  {
    if (a6)
    {
      v41 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), *v11);
      if (v41 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v40);
      else
        v40 = 0;
      if (*((_DWORD *)a3 + 2) >= 0x41u && *a3)
        MEMORY[0x2348A0E84](*a3, 0x1000C8000313F17);
      *a3 = v40;
      *((_DWORD *)a3 + 2) = v41;
      v14 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), *v11);
      v41 = v14;
      if (v14 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v40);
      }
      else
      {
        v15 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v14;
        if (!v14)
          LOBYTE(v15) = 0;
        v40 = v15 & 2;
      }
      if (*((_DWORD *)a4 + 2) >= 0x41u && *a4)
        MEMORY[0x2348A0E84](*a4, 0x1000C8000313F17);
      *a4 = v40;
      *((_DWORD *)a4 + 2) = v41;
      return v13;
    }
    v16 = sub_22F114198(*(_QWORD *)(v12 + 24));
    v17 = sub_22E496830(v16);
    v18 = (llvm::Type *)sub_22E66C868(*(_QWORD *)(a1 + 144) + 280, v17, 0);
    ScalarSizeInBits = llvm::Type::getScalarSizeInBits(v18);
    v20 = ScalarSizeInBits;
    v21 = *(_QWORD *)(v16 + 72);
    v22 = (v21 >> 23);
    if ((v21 >> 31))
    {
      if ((v21 >> 31) <= (v22 + 1))
        v23 = v22 + 1;
      else
        v23 = (v21 >> 31);
      v39 = ScalarSizeInBits;
      if (ScalarSizeInBits > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v38);
        v26 = v23 - 1;
        v41 = v39;
        if (v39 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v40, (const llvm::APInt *)&v38);
          goto LABEL_32;
        }
        v25 = v38;
      }
      else
      {
        v24 = 0xFFFFFFFFFFFFFFFFLL >> -(char)ScalarSizeInBits;
        if (!ScalarSizeInBits)
          LOBYTE(v24) = 0;
        v25 = v24 & 1;
        v38 = v25;
        v26 = v23 - 1;
        v41 = ScalarSizeInBits;
      }
      v40 = v25;
LABEL_32:
      sub_22E463264((llvm::APInt *)&v40, v26);
      if (*((_DWORD *)a4 + 2) >= 0x41u && *a4)
        MEMORY[0x2348A0E84](*a4, 0x1000C8000313F17);
      *a4 = v40;
      v27 = v41;
      *((_DWORD *)a4 + 2) = v41;
      v41 = 0;
      if (v39 >= 0x41 && v38)
      {
        MEMORY[0x2348A0E84](v38, 0x1000C8000313F17);
        v27 = *((_DWORD *)a4 + 2);
      }
      v37 = v27;
      if (v27 >= 0x41)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v36, (const llvm::APInt *)a4);
        v27 = v37;
        if (v37 > 0x40)
        {
          llvm::APInt::flipAllBitsSlowCase((llvm::APInt *)&v36);
          goto LABEL_45;
        }
        a4 = &v36;
      }
      if (v27)
        v28 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v27;
      else
        v28 = 0;
      v36 = v28 & ~*a4;
LABEL_45:
      llvm::APInt::operator++();
      v29 = v37;
      v30 = v36;
      v37 = 0;
      if (*((_DWORD *)a3 + 2) > 0x40u && *a3)
      {
        MEMORY[0x2348A0E84](*a3, 0x1000C8000313F17);
        v31 = v37;
        *a3 = v30;
        *((_DWORD *)a3 + 2) = v29;
        if (v31 >= 0x41 && v36)
          MEMORY[0x2348A0E84](v36, 0x1000C8000313F17);
      }
      else
      {
        *a3 = v36;
        *((_DWORD *)a3 + 2) = v29;
      }
      return v13;
    }
    v39 = ScalarSizeInBits;
    if (ScalarSizeInBits > 0x40)
    {
      v35 = (v21 >> 23);
      llvm::APInt::initSlowCase((llvm::APInt *)&v38);
      v41 = v39;
      if (v39 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v40, (const llvm::APInt *)&v38);
        v22 = v35;
LABEL_56:
        sub_22E463264((llvm::APInt *)&v40, v22);
        if (*((_DWORD *)a4 + 2) >= 0x41u && *a4)
          MEMORY[0x2348A0E84](*a4, 0x1000C8000313F17);
        *a4 = v40;
        *((_DWORD *)a4 + 2) = v41;
        v41 = 0;
        if (v39 >= 0x41 && v38)
          MEMORY[0x2348A0E84](v38, 0x1000C8000313F17);
        v41 = v20;
        if (v20 > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)&v40);
        else
          v40 = 0;
        if (*((_DWORD *)a3 + 2) >= 0x41u && *a3)
          MEMORY[0x2348A0E84](*a3, 0x1000C8000313F17);
        *a3 = v40;
        *((_DWORD *)a3 + 2) = v41;
        return v13;
      }
      v33 = v38;
      v22 = v35;
    }
    else
    {
      v32 = 0xFFFFFFFFFFFFFFFFLL >> -(char)ScalarSizeInBits;
      if (!ScalarSizeInBits)
        LOBYTE(v32) = 0;
      v33 = v32 & 1;
      v38 = v33;
      v41 = ScalarSizeInBits;
    }
    v40 = v33;
    goto LABEL_56;
  }
  return v13;
}

uint64_t sub_22E4E7578(uint64_t a1)
{
  unint64_t i;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  for (i = a1 & 0xFFFFFFFFFFFFFFF0; ; i = *(_QWORD *)(result + 32) & 0xFFFFFFFFFFFFFFF0)
  {
    result = *(_QWORD *)i;
    v3 = *(_QWORD *)(*(_QWORD *)i + 8);
    v4 = *(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF0);
    if (v4)
      v5 = (*(_DWORD *)(v4 + 16) & 0xFF800FF) == 87031819;
    else
      v5 = 0;
    if (v5)
      return 1;
    if (*(_DWORD *)(v4 + 16) == 44)
      break;
    if (*(_BYTE *)(result + 16) != 6)
    {
      if (*(_BYTE *)(*(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF0) + 16) != 6)
        return 0;
      result = sub_22F10CF48(result);
      if (!result)
        return result;
    }
  }
  v6 = sub_22F114198(*(_QWORD *)(v4 + 24));
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22E496830(v6) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v7)
    v8 = *(_DWORD *)(v7 + 16) == 11;
  else
    v8 = 0;
  if (!v8)
    return 0;
  return (*(_DWORD *)(v7 + 16) & 0xFF80000) == 87031808;
}

uint64_t sub_22E4E765C(uint64_t a1, uint64_t *a2, unint64_t a3, int a4)
{
  uint64_t v4;
  _BOOL4 v9;
  _BOOL4 v10;
  uint64_t v11;
  BOOL v12;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  llvm::Value *v22;
  __int128 *v23;
  llvm::Type **v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  __int128 v30;
  __int16 v31;
  uint64_t v32[5];
  _QWORD v33[3];

  v33[2] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 1864);
  if ((v4 & 0xA0000) == 0)
    return 0;
  if ((sub_22E4E7578(a3) & 1) != 0)
  {
    v9 = 1;
  }
  else
  {
    v29 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
    bzero(&v30, 0x2C0uLL);
    v9 = sub_22F3E9660((uint64_t)&v29, a3, "BOOL", 4uLL, v32);
  }
  if ((v4 & 0x80000) != 0)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v12 = v11 && *(_BYTE *)(v11 + 16) == 44;
    v10 = v12;
  }
  else
  {
    v10 = 0;
  }
  if ((v9 & (v4 >> 17) | v10) != 1 || v9 && (*(_DWORD *)(*a2 + 8) & 0xFFFFFF00) == 0x100)
    return 0;
  v28 = 1;
  v27 = 0;
  v26 = 1;
  v25 = 0;
  if (sub_22E4E709C(a1, a3, &v27, &v25, 1, v9))
  {
    *(_BYTE *)(a1 + 1880) = 1;
    llvm::APInt::operator--();
    v14 = v28;
    if (v28 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v27) != v14)
        goto LABEL_27;
    }
    else if (v27)
    {
LABEL_27:
      v15 = llvm::ConstantInt::get();
      v31 = 257;
      v16 = sub_22E3C18F4(a1 + 272, 41, a2, v15, (uint64_t)&v29);
      v17 = llvm::ConstantInt::get();
      v31 = 257;
      v18 = sub_22E3C18F4(a1 + 272, 39, a2, v17, (uint64_t)&v29);
      v31 = 257;
      v19 = sub_22E3E49C4(a1 + 272, v16, v18, (uint64_t)&v29);
LABEL_30:
      v21 = v19;
      v33[0] = sub_22E4DE978(a1, a4);
      v22 = sub_22F25E758(a1, a3);
      v23 = (__int128 *)&unk_22F4575E0;
      v33[1] = v22;
      if (v10)
        v23 = (__int128 *)&unk_22F4575F0;
      v30 = *v23;
      v29 = v21;
      v24 = (llvm::Type **)sub_22E4E7984((_QWORD *)a1, (llvm::Type **)a2);
      sub_22E4DEC4C((_QWORD *)a1, (uint64_t)&v29, 1, 0xAu, (uint64_t)v33, 2, &v24, 1);
      *(_BYTE *)(a1 + 1880) = 0;
      goto LABEL_17;
    }
    v20 = llvm::ConstantInt::get();
    v31 = 257;
    v19 = sub_22E3C18F4(a1 + 272, 37, a2, v20, (uint64_t)&v29);
    goto LABEL_30;
  }
LABEL_17:
  if (v26 >= 0x41 && v25)
    MEMORY[0x2348A0E84](v25, 0x1000C8000313F17);
  if (v28 >= 0x41)
  {
    if (v27)
      MEMORY[0x2348A0E84](v27, 0x1000C8000313F17);
  }
  return 1;
}

uint64_t sub_22E4E7984(_QWORD *a1, llvm::Type **a2)
{
  uint64_t v2;
  uint64_t v3;
  llvm::Type *v4;
  unsigned int v6;
  llvm::LLVMContext *PrimitiveSizeInBits;
  uint64_t IntNTy;
  llvm::DataLayout *DataLayout;
  unint64_t PrefTypeAlignment;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD v20[3];
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[4];
  __int16 v25;

  v2 = (uint64_t)a2;
  v3 = a1[11];
  v4 = *a2;
  if (*a2 != (llvm::Type *)v3)
  {
    v6 = *((_DWORD *)v4 + 2);
    if (v6 <= 6u)
    {
      PrimitiveSizeInBits = (llvm::LLVMContext *)llvm::Type::getPrimitiveSizeInBits(*a2);
      if (PrimitiveSizeInBits <= *(_DWORD *)(v3 + 8) >> 8)
      {
        IntNTy = llvm::Type::getIntNTy(*(llvm::Type **)(a1[18] + 232), PrimitiveSizeInBits);
        v25 = 257;
        v2 = sub_22E3C1740(a1 + 34, 49, v2, IntNTy, (uint64_t)v24);
        v4 = *(llvm::Type **)v2;
        v6 = *(_DWORD *)(*(_QWORD *)v2 + 8);
      }
    }
    if (v6 != 15)
    {
      if (v6 == 13 && v6 >> 8 <= *(_DWORD *)(v3 + 8) >> 8)
      {
        v17 = a1 + 34;
        v25 = 257;
        v18 = 39;
        return sub_22E3C1740(v17, v18, v2, v3, (uint64_t)v24);
      }
      v24[0] = "tmp";
      v25 = 259;
      DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(a1[18] + 200));
      PrefTypeAlignment = llvm::DataLayout::getPrefTypeAlignment(DataLayout, v4);
      v11 = sub_22E4D83CC((uint64_t)a1, v4, PrefTypeAlignment, (uint64_t)v24, 0, 0);
      v13 = v11 & 0xFFFFFFFFFFFFFFF8;
      if (v11 <= 7)
        v14 = 0;
      else
        v14 = v11 & 0xFFFFFFFFFFFFFFF8;
      v15 = v12 & 0xFFFFFFFFFFFFFFF8;
      if (v11 <= 7)
        v15 = 0;
      v20[0] = v14;
      v20[1] = v15;
      v16 = 1 << (v12 & 7 | (8 * (v11 & 7)));
      if (v11 < 8)
        v16 = 0;
      v20[2] = v16;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      sub_22E3BEDDC(a1 + 34, v2, v20, 0);
      v2 = v13;
    }
    v17 = a1 + 34;
    v25 = 257;
    v18 = 47;
    return sub_22E3C1740(v17, v18, v2, v3, (uint64_t)v24);
  }
  return v2;
}

uint64_t sub_22E4E7B2C(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v9;
  __int128 v10;
  _OWORD v11[3];
  _OWORD v12[3];

  v6 = *(_QWORD *)(a1 + 144);
  if ((*(_BYTE *)(*(_QWORD *)(v6 + 152) + 104) & 0x20) != 0)
  {
    v9 = *(_QWORD *)(v6 + 800);
    v10 = a2[1];
    v12[0] = *a2;
    v12[1] = v10;
    v12[2] = a2[2];
    return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 88))(v9, a1, v12, a3, a4, a5);
  }
  else
  {
    v7 = a2[1];
    v11[0] = *a2;
    v11[1] = v7;
    v11[2] = a2[2];
    return sub_22E485864((uint64_t *)(a1 + 272), (uint64_t)v11, a3, a5);
  }
}

uint64_t sub_22E4E7BB4(uint64_t a1, llvm::Type **a2, uint64_t a3)
{
  llvm::LLVMContext *v6;
  uint64_t Int1Ty;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  llvm::LLVMContext *v16;
  llvm::Type *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  _QWORD v24[4];
  __int16 v25;

  if (sub_22E4E7578(a3))
  {
    Int1Ty = llvm::Type::getInt1Ty(*(llvm::Type **)(a1 + 336), v6);
    v24[0] = "toBOOL";
    v25 = 259;
    v8 = (uint64_t *)(a1 + 272);
    return sub_22E3C1740(v8, 38, (uint64_t)a2, Int1Ty, (uint64_t)v24);
  }
  v9 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v10 + 16) == 56)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v12 = v11 && (*(_DWORD *)(v11 + 16) & 0xFF800FF) == 87031819;
    if (v12 && (*(_BYTE *)(*(_QWORD *)(a1 + 152) + *(_QWORD *)(**(_QWORD **)(a1 + 152) - 24) + 160) & 0x20) != 0)
    {
      v19 = *a2;
      llvm::Type::getInt1Ty(*(llvm::Type **)(a1 + 336), v6);
      v24[0] = llvm::Type::getPrimitiveSizeInBits(v19);
      v24[1] = v20;
      llvm::TypeSize::operator unsigned long long();
      v21 = llvm::FixedVectorType::get();
      v25 = 257;
      v22 = sub_22E3C1740((uint64_t *)(a1 + 272), 49, (uint64_t)a2, v21, (uint64_t)v24);
      v23 = *(_DWORD *)(sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 144) + 280), (llvm::LLVMContext *)a3) + 32);
      v24[0] = "extractvec";
      v25 = 259;
      return sub_22E6227D8(a1, v22, v23, (uint64_t)v24);
    }
  }
  v13 = sub_22E3E4B64(v9);
  if (v13)
  {
    v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v14 && (*(_DWORD *)(v14 + 16) & 0xFF800FF) == 87031819)
    {
      sub_22E3E4B64(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0));
      llvm::Type::getInt1Ty(*(llvm::Type **)(a1 + 336), v16);
      Int1Ty = llvm::FixedVectorType::get();
      v24[0] = "toBOOL";
      v25 = 259;
      v8 = (uint64_t *)(a1 + 272);
      return sub_22E3C1740(v8, 38, (uint64_t)a2, Int1Ty, (uint64_t)v24);
    }
  }
  return (uint64_t)a2;
}

uint64_t sub_22E4E7DBC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  v6 = a3 & 0xFFFFFFFFFFFFFFF0;
  if (*(_DWORD *)(sub_22E3E4B64(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0)) + 20) != 3)
    goto LABEL_19;
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v6 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v7 + 16) == 56)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v9 = v8 && (*(_DWORD *)(v8 + 16) & 0xFF800FF) == 87031819;
    if (v9 && (*(_BYTE *)(*(_QWORD *)(a1 + 216) + *(_QWORD *)(**(_QWORD **)(a1 + 216) - 24) + 160) & 0x20) != 0)
      goto LABEL_19;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 152) + 104) & 0x20) != 0)
  {
    v10 = 1;
    if (!sub_22E62D664(a1, a3, 1))
      return v10 & 1;
    v11 = *(unsigned __int8 *)(a2 + 16);
    if (v11 != 3)
    {
      if (v11 != 62)
      {
        if (v11 != 5 || (v11 = *(unsigned __int16 *)(a2 + 18), v11 != 34))
        {
          v16 = 1;
LABEL_29:
          v10 = v16 | v11;
          return v10 & 1;
        }
      }
      v12 = *(_DWORD *)(a2 + 20);
      if ((v12 & 0x40000000) != 0)
      {
        v14 = *(uint64_t **)(a2 - 8);
        if (*(_BYTE *)(*v14 + 16) != 3)
        {
LABEL_28:
          v16 = 0;
          LOBYTE(v11) = 1;
          goto LABEL_29;
        }
        v13 = v12 & 0x7FFFFFF;
      }
      else
      {
        v13 = v12 & 0x7FFFFFF;
        v14 = (uint64_t *)(a2 - 32 * v13);
        if (*(_BYTE *)(*v14 + 16) != 3)
          goto LABEL_28;
      }
      v17 = v14 + 4;
      v18 = 32 * v13 - 32;
      do
      {
        LOBYTE(v11) = v18 != 0;
        if (!v18)
          break;
        v19 = *v17;
        v17 += 4;
        v18 -= 32;
      }
      while (*(_BYTE *)(v19 + 16) == 16);
      v16 = 0;
      goto LABEL_29;
    }
LABEL_19:
    v10 = 0;
    return v10 & 1;
  }
  v10 = 1;
  return v10 & 1;
}

uint64_t sub_22E4E7F50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::Type *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t IntNTy;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v18;
  uint64_t v19;
  _QWORD v20[4];
  __int16 v21;

  if (sub_22E4E7578(a3))
  {
    v6 = *(llvm::Type **)a2;
LABEL_17:
    if (llvm::Type::isIntegerTy(v6))
    {
      IntNTy = sub_22E66C868(*(_QWORD *)(a1 + 144) + 280, a3, 0);
      v20[0] = "fromBOOL";
      v21 = 259;
      v15 = (uint64_t *)(a1 + 272);
      v16 = 39;
      return sub_22E3C1740(v15, v16, a2, IntNTy, (uint64_t)v20);
    }
    return a2;
  }
  v7 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v8 + 16) != 56
    || ((v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)) != 0
      ? (v10 = (*(_DWORD *)(v9 + 16) & 0xFF800FF) == 87031819)
      : (v10 = 0),
        !v10 || (*(_BYTE *)(*(_QWORD *)(a1 + 152) + *(_QWORD *)(**(_QWORD **)(a1 + 152) - 24) + 160) & 0x20) == 0))
  {
    v11 = sub_22E3E4B64(v7);
    if (!v11)
      return a2;
    v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (!v12 || (*(_DWORD *)(v12 + 16) & 0xFF800FF) != 87031819)
      return a2;
    v6 = *(llvm::Type **)(*(_QWORD *)a2 + 24);
    goto LABEL_17;
  }
  if (*(_BYTE *)(v7 + 16) != 56)
    v7 = sub_22F10CF48(v7);
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
  {
    v18 = *(_DWORD *)(v7 + 20);
    if (v18 <= 8)
      v19 = 8;
    else
      v19 = v18;
    v20[0] = "insertvec";
    v21 = 259;
    a2 = sub_22E6227D8(a1, a2, v19, (uint64_t)v20);
    IntNTy = llvm::Type::getIntNTy(*(llvm::Type **)(a1 + 336), (llvm::LLVMContext *)v19);
    v21 = 257;
    v15 = (uint64_t *)(a1 + 272);
    v16 = 49;
    return sub_22E3C1740(v15, v16, a2, IntNTy, (uint64_t)v20);
  }
  return a2;
}

double sub_22E4E8134(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, int a6, uint64_t a7, unsigned int a8, char a9)
{
  unsigned __int8 *v15;
  uint64_t v16;
  double result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  llvm::LLVMContext *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  double v41;
  unsigned int v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  llvm::Value *v57;
  uint64_t v58;
  llvm::LLVMContext *v59;
  uint64_t v60;
  __int128 v61;
  int v62;
  _OWORD v65[2];
  uint64_t v66;
  _OWORD v67[3];
  __int128 v68[8];
  uint64_t v69;
  _QWORD v70[3];
  char v71;
  _OWORD v72[8];
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  __int128 v83[3];
  __int128 v84;
  __int128 v85;
  __int128 v86;
  _OWORD v87[3];
  _OWORD v88[3];
  __int128 v89[2];
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;

  v94 = *MEMORY[0x24BDAC8D0];
  v15 = (unsigned __int8 *)(a5 & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_22E3E4B64(*(_QWORD *)(a5 & 0xFFFFFFFFFFFFFFF0));
  if (v16)
  {
    v18 = *(_QWORD *)v15;
    if ((*(_DWORD *)(v16 + 16) & 0x780000) == 0x80000)
    {
      v19 = *(_QWORD *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF0);
      if (*(_BYTE *)(v19 + 16) != 56
        || ((v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)) != 0
          ? (v21 = (*(_DWORD *)(v20 + 16) & 0xFF800FF) == 87031819)
          : (v21 = 0),
            !v21
         || (*(_BYTE *)(*(_QWORD *)(a1 + 152) + *(_QWORD *)(**(_QWORD **)(a1 + 152) - 24) + 160) & 0x20) == 0))
      {
        v22 = *(_QWORD *)(a3 + 8);
        if (!v22 || *(_BYTE *)(v22 + 8) != 17)
        {
          v23 = *(_OWORD *)(a3 + 16);
          v88[0] = *(_OWORD *)a3;
          v88[1] = v23;
          v88[2] = *(_OWORD *)(a3 + 32);
          LOWORD(v93) = 257;
          sub_22E3C408C((uint64_t *)(a1 + 272), (uint64_t)v88, 0, (uint64_t)&v91, (uint64_t)&v74);
          v24 = v75;
          *(_OWORD *)a3 = v74;
          *(_OWORD *)(a3 + 16) = v24;
          result = *(double *)&v76;
          *(_OWORD *)(a3 + 32) = v76;
          v22 = *(_QWORD *)(a3 + 8);
        }
        v25 = *(unsigned int *)(v22 + 32);
        if (*(_DWORD *)(v22 + 32))
        {
          v26 = 0;
          do
          {
            v27 = *(_OWORD *)(a3 + 16);
            v87[0] = *(_OWORD *)a3;
            v87[1] = v27;
            v87[2] = *(_OWORD *)(a3 + 32);
            LOWORD(v76) = 257;
            sub_22E486A58((uint64_t *)(a1 + 272), (uint64_t)v87, v26, (uint64_t)&v74, (uint64_t)&v91);
            llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 336), v28);
            v29 = llvm::ConstantInt::get();
            LOWORD(v76) = 257;
            v30 = sub_22E420480((uint64_t *)(a1 + 272), a2, v29, (uint64_t)&v74);
            v84 = v91;
            v85 = v92;
            v86 = v93;
            if ((a5 & 4) != 0)
              v31 = 1;
            else
              v31 = (v15[8] >> 2) & 1;
            v32 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
            v33 = *(_QWORD *)v15;
            if (!*(_QWORD *)v15 || *(unsigned __int8 *)(v33 + 16) - 57 <= 0xFFFFFFFD)
              v33 = sub_22F10CF48(v33);
            v34 = *(_QWORD *)(v33 + 32);
            v35 = *((_QWORD *)v15 + 1);
            if ((v35 & 8) != 0)
            {
              v37 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFFFF0) + 0x18);
              v36 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
            }
            else
            {
              v36 = 0;
              v37 = 0;
            }
            v38 = v37 | (v35 | a5) & 7;
            if (((v38 | v36) & 0xCFFFFFFF8) != 0)
            {
              *(_QWORD *)&v74 = v38 | v36;
              v39 = sub_22E491354((unsigned int *)&v74, v34);
              v40 = sub_22EF5DBC4(v32, v39, v74);
            }
            else
            {
              v40 = v38 & 7 | v34;
            }
            v74 = v84;
            v75 = v85;
            v76 = v86;
            v41 = sub_22E6281E0(*(_QWORD **)(a1 + 144), v40, (uint64_t)v89);
            LOBYTE(v62) = a9;
            sub_22E4E8134(a1, v30, &v74, v31, v40, 2, v89, a8, v41, v62);
            ++v26;
          }
          while (v25 != v26);
        }
        return result;
      }
    }
  }
  else
  {
    v18 = *(_QWORD *)v15;
  }
  v42 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 55;
  v43 = (uint64_t *)sub_22E4E7F50(a1, a2, a5);
  v44 = (uint64_t)v43;
  if (v42 <= 1)
  {
    v45 = *v43;
    v46 = *(_QWORD *)(a1 + 144);
    if ((*(_DWORD *)(*(_QWORD *)(v46 + 184) + 92) & 0x20) == 0)
    {
      v47 = (*(_BYTE *)(a3 + 24) & 3) != 0 ? sub_22F28ABCC(a3, a1) : *(_QWORD *)a3;
      if (sub_22E4E7DBC(v46, v47, a5))
      {
        v91 = xmmword_22F4576E0;
        *(_QWORD *)&v74 = "extractVec";
        LOWORD(v76) = 259;
        v48 = llvm::PoisonValue::get();
        v44 = sub_22E3ED3CC(a1 + 272, v44, v48, (uint64_t)&v91, 4, (uint64_t)&v74);
        v45 = llvm::FixedVectorType::get();
      }
    }
    if (*(_QWORD *)(a3 + 8) != v45)
    {
      v49 = *(_OWORD *)(a3 + 16);
      v83[0] = *(_OWORD *)a3;
      v83[1] = v49;
      v83[2] = *(_OWORD *)(a3 + 32);
      *(_QWORD *)&v91 = "storetmp";
      LOWORD(v93) = 259;
      sub_22E3BEE6C((uint64_t *)(a1 + 272), v83, v45, (uint64_t)&v91, (uint64_t)&v74);
      v50 = v75;
      *(_OWORD *)a3 = v74;
      *(_OWORD *)(a3 + 16) = v50;
      *(_OWORD *)(a3 + 32) = v76;
    }
  }
  v51 = *(_OWORD *)(a3 + 16);
  v91 = *(_OWORD *)a3;
  v92 = v51;
  v93 = *(_OWORD *)(a3 + 32);
  v52 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
  v53 = *(_OWORD *)(a7 + 16);
  v89[0] = *(_OWORD *)a7;
  v89[1] = v53;
  v90 = *(_QWORD *)(a7 + 32);
  *((_QWORD *)&v74 + 1) = 0;
  v75 = 0uLL;
  LODWORD(v76) = 0;
  *((_QWORD *)&v76 + 1) = 0;
  *(_QWORD *)&v77 = 0;
  v78 = 0uLL;
  *(_QWORD *)((char *)&v79 + 4) = 2;
  LODWORD(v74) = 0;
  v80 = 0u;
  v81 = 0u;
  sub_22E3C113C((uint64_t)&v74, &v91, a5, a6, v89, v52);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 6)
    goto LABEL_50;
  if ((a8 & 1) != 0)
    goto LABEL_41;
  v72[6] = v80;
  v72[7] = v81;
  v73 = v82;
  v72[2] = v76;
  v72[3] = v77;
  v72[4] = v78;
  v72[5] = v79;
  v72[0] = v74;
  v72[1] = v75;
  if (sub_22E3BF6AC(a1, (uint64_t)v72))
  {
LABEL_50:
    v70[0] = v44;
    v70[1] = 0;
    v71 = 0;
    v68[6] = v80;
    v68[7] = v81;
    v69 = v82;
    v68[2] = v76;
    v68[3] = v77;
    v68[4] = v78;
    v68[5] = v79;
    v68[0] = v74;
    v68[1] = v75;
    *(_QWORD *)&result = sub_22F2453C8((_QWORD *)a1, (uint64_t)v70, v68, a8).n128_u64[0];
  }
  else
  {
LABEL_41:
    v54 = *(_OWORD *)(a3 + 16);
    v67[0] = *(_OWORD *)a3;
    v67[1] = v54;
    v67[2] = *(_OWORD *)(a3 + 32);
    v55 = *((_QWORD *)v15 + 1);
    if ((v55 & 8) != 0)
      v56 = (*(_DWORD *)((v55 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 9) & 3;
    else
      v56 = 0;
    v57 = (llvm::Value *)sub_22E4E8774(a1, v44, v67, a4, v56);
    if (v57)
    {
      v58 = (uint64_t)v57;
      if (*((_BYTE *)v57 + 16) == 61)
      {
        if (a9)
        {
          llvm::Value::getContext(v57);
          llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 336), v59);
          llvm::ConstantInt::get();
          *(_QWORD *)&v91 = llvm::ValueAsMetadata::get();
          llvm::MDTuple::getImpl();
          llvm::Module::getMDKindID();
          llvm::Instruction::setMetadata();
        }
        v60 = *(_QWORD *)(a1 + 144);
        v61 = *(_OWORD *)(a7 + 16);
        v65[0] = *(_OWORD *)a7;
        v65[1] = v61;
        v66 = *(_QWORD *)(a7 + 32);
        sub_22E6282B8(v60, v58, (uint64_t)v65);
      }
    }
  }
  return result;
}

uint64_t sub_22E4E8774(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v10;
  __int128 v11;
  _OWORD v12[3];
  _OWORD v13[3];

  v7 = *(_QWORD *)(a1 + 144);
  if ((*(_BYTE *)(*(_QWORD *)(v7 + 152) + 104) & 0x20) != 0)
  {
    v10 = *(_QWORD *)(v7 + 800);
    v11 = a3[1];
    v13[0] = *a3;
    v13[1] = v11;
    v13[2] = a3[2];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t))(*(_QWORD *)v10 + 96))(v10, a1, a2, v13, a4, a5);
  }
  else
  {
    v8 = a3[1];
    v12[0] = *a3;
    v12[1] = v8;
    v12[2] = a3[2];
    return sub_22E3BEDDC(a1 + 272, a2, v12, a4);
  }
}

double sub_22E4E87FC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  int v11;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  char v17;
  int v18;
  __int128 v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _OWORD v36[2];
  uint64_t v37;
  _OWORD v38[3];
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  _OWORD v42[2];
  uint64_t v43;
  _QWORD v44[3];
  int v45;
  uint64_t v46;
  uint64_t v47;

  v6 = *(_QWORD *)(a3 + 64);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 29)
  {
    v34 = *(_QWORD *)(a3 + 64);
    v13 = *(_QWORD *)(a3 + 8);
    v14 = *(_QWORD *)(a3 + 16);
    v15 = *(_QWORD *)(a3 + 24);
    v16 = *(_DWORD *)(a3 + 72);
    v17 = *(_BYTE *)(a3 + 80);
    v18 = *(_DWORD *)(a3 + 84);
    v19 = *(_OWORD *)(a3 + 104);
    v39 = *(_OWORD *)(a3 + 88);
    v40 = v19;
    v41 = *(_QWORD *)(a3 + 120);
    if (!v13)
      v14 = 0;
    v20 = __clz(v15) ^ 0x3F;
    v21 = v13 & 0xFFFFFFFFFFFFFFF8 | (v20 >> 3);
    v22 = v14 & 0xFFFFFFFFFFFFFFF8 | v20 & 7;
    v23 = v15 == 0;
    if (v15)
      v24 = v21;
    else
      v24 = v13;
    if (v23)
      v22 = v14;
    if (v13)
      v25 = v24;
    else
      v25 = 0;
    if (v13)
      v26 = v22;
    else
      v26 = v14;
    v28 = a1;
    v29 = sub_22E4EBBB0(v25, v26, a1, (*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 18);
    if (v29 < 8)
    {
      v31 = 0;
      v32 = 0;
      v33 = 0;
    }
    else
    {
      v31 = v30 & 0xFFFFFFFFFFFFFFF8;
      v32 = v29 & 0xFFFFFFFFFFFFFFF8;
      v33 = 1 << (v30 & 7 | (8 * (v29 & 7)));
    }
    v44[0] = v32;
    v44[1] = v31;
    v44[2] = v33;
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v42[0] = v39;
    v42[1] = v40;
    v43 = v41;
    return sub_22E4E8134(v28, a2, (uint64_t)v44, (v16 >> 2) & 1, v34, v18, (uint64_t)v42, a4, (v17 & 0x40) != 0);
  }
  else
  {
    v7 = *(_OWORD *)(a3 + 24);
    v38[0] = *(_OWORD *)(a3 + 8);
    v38[1] = v7;
    v38[2] = *(_OWORD *)(a3 + 40);
    v8 = (*(_DWORD *)(a3 + 72) >> 2) & 1;
    v9 = *(_DWORD *)(a3 + 84);
    v10 = *(_OWORD *)(a3 + 104);
    v36[0] = *(_OWORD *)(a3 + 88);
    v36[1] = v10;
    v11 = (*(unsigned __int8 *)(a3 + 80) >> 6) & 1;
    v37 = *(_QWORD *)(a3 + 120);
    return sub_22E4E8134(a1, a2, (uint64_t)v38, v8, v6, v9, (uint64_t)v36, a4, v11);
  }
}

void sub_22E4E89BC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  llvm::LLVMContext **v6;
  uint64_t v7;
  uint64_t v8;
  llvm::Constant *v9;
  llvm::LLVMContext **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  llvm::Constant *v14;
  uint64_t AggregateElement;
  unsigned int *v16;
  uint64_t v17;
  __int128 v18;
  unsigned int v19;
  llvm::Type **v20;
  uint64_t v21;
  llvm::LLVMContext *v22;
  uint64_t v23;
  __int128 v24;
  unsigned int v25;
  llvm::Type **v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  int j;
  uint64_t v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  unsigned int *v39;
  uint64_t v40;
  __int128 v41;
  unsigned int v42;
  llvm::Type **v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  _OWORD v51[3];
  _OWORD v52[3];
  _OWORD v53[3];
  _OWORD v54[3];
  _OWORD v55[3];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _DWORD *v59;
  uint64_t v60;
  _BYTE v61[16];
  __int16 v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  v6 = (llvm::LLVMContext **)(a2 + 64);
  v7 = sub_22E3E4B64(*(_QWORD *)(*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFFFF0));
  v8 = v7;
  v9 = *(v6 - 1);
  v10 = v6 - 7;
  if (*((_BYTE *)*(v6 - 6) + 8) == 17)
  {
    if (v7)
    {
      sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 144) + 280), *v6);
      v11 = llvm::UndefValue::get();
      v12 = *(unsigned int *)(v8 + 20);
      if ((_DWORD)v12)
      {
        for (i = 0; i != v12; ++i)
        {
          v14 = v9;
          AggregateElement = llvm::Constant::getAggregateElement(v9);
          v16 = (unsigned int *)(AggregateElement + 24);
          if (*(_DWORD *)(AggregateElement + 32) >= 0x41u)
            v16 = *(unsigned int **)v16;
          v17 = *v16;
          v18 = *((_OWORD *)v10 + 1);
          v53[0] = *(_OWORD *)v10;
          v53[1] = v18;
          v53[2] = *((_OWORD *)v10 + 2);
          v62 = 257;
          sub_22E486A58((uint64_t *)(a1 + 272), (uint64_t)v53, v17, (uint64_t)&v59, (uint64_t)&v56);
          v52[0] = v56;
          v52[1] = v57;
          v52[2] = v58;
          v19 = *(_DWORD *)(a2 + 72);
          v62 = 257;
          v20 = (llvm::Type **)sub_22E4E7B2C(a1, v52, (v19 >> 2) & 1, (v19 >> 9) & 3, (uint64_t)&v59);
          v21 = sub_22E4E7BB4(a1, v20, *(_QWORD *)(v8 + 32));
          llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 336), v22);
          v23 = llvm::ConstantInt::get();
          v62 = 257;
          v11 = sub_22E3ED5D4((uint64_t *)(a1 + 272), v11, v21, v23, (uint64_t)&v59);
          v9 = v14;
        }
      }
    }
    else
    {
      v38 = llvm::Constant::getAggregateElement(v9);
      v39 = (unsigned int *)(v38 + 24);
      if (*(_DWORD *)(v38 + 32) >= 0x41u)
        v39 = *(unsigned int **)v39;
      v40 = *v39;
      v41 = *(_OWORD *)(v6 - 5);
      v55[0] = *(_OWORD *)v10;
      v55[1] = v41;
      v55[2] = *(_OWORD *)(v6 - 3);
      v62 = 257;
      sub_22E486A58((uint64_t *)(a1 + 272), (uint64_t)v55, v40, (uint64_t)&v59, (uint64_t)&v56);
      v54[0] = v56;
      v54[1] = v57;
      v54[2] = v58;
      v42 = *(_DWORD *)(a2 + 72);
      v62 = 257;
      v43 = (llvm::Type **)sub_22E4E7B2C(a1, v54, (v42 >> 2) & 1, (v42 >> 9) & 3, (uint64_t)&v59);
      v11 = sub_22E4E7BB4(a1, v43, *(_QWORD *)(a2 + 64));
    }
    v44 = *(_BYTE *)(a3 + 48);
    *(_QWORD *)a3 = v11;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 48) = v44 & 0xF8;
  }
  else
  {
    v24 = *(_OWORD *)(v6 - 5);
    v51[0] = *(_OWORD *)v10;
    v51[1] = v24;
    v51[2] = *(_OWORD *)(v6 - 3);
    v25 = *(_DWORD *)(a2 + 72);
    LOWORD(v58) = 257;
    v26 = (llvm::Type **)sub_22E4E7B2C(a1, v51, (v25 >> 2) & 1, (v25 >> 9) & 3, (uint64_t)&v56);
    v27 = (uint64_t *)(v8 + 32);
    if (!v8)
      v27 = (uint64_t *)v6;
    v28 = sub_22EF63724(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), *v27, *((unsigned int *)*v26 + 8), 0);
    v29 = sub_22E4E7BB4(a1, v26, v28);
    if (v8)
    {
      v30 = *(_DWORD *)(v8 + 20);
      v59 = v61;
      v60 = 0x400000000;
      if (v30)
      {
        for (j = 0; j != v30; ++j)
        {
          v32 = llvm::Constant::getAggregateElement(v9);
          v33 = (_QWORD *)(v32 + 24);
          if (*(_DWORD *)(v32 + 32) >= 0x41u)
            v33 = (_QWORD *)*v33;
          v34 = *(_DWORD *)v33;
          v35 = v60;
          if (v60 >= (unint64_t)HIDWORD(v60))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v35 = v60;
          }
          v59[v35] = v34;
          v36 = (v60 + 1);
          LODWORD(v60) = v60 + 1;
        }
        v37 = v59;
      }
      else
      {
        v36 = 0;
        v37 = v61;
      }
      LOWORD(v58) = 257;
      v48 = llvm::PoisonValue::get();
      v49 = sub_22E3ED3CC(a1 + 272, v29, v48, (uint64_t)v37, v36, (uint64_t)&v56);
      v50 = *(_BYTE *)(a3 + 48);
      *(_QWORD *)a3 = v49;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 48) = v50 & 0xF8;
      if (v59 != (_DWORD *)v61)
        free(v59);
    }
    else
    {
      llvm::Constant::getAggregateElement(v9);
      v45 = llvm::ConstantInt::get();
      LOWORD(v58) = 257;
      v46 = sub_22E420480((uint64_t *)(a1 + 272), v29, v45, (uint64_t)&v56);
      v47 = *(_BYTE *)(a3 + 48);
      *(_QWORD *)a3 = v46;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 48) = v47 & 0xF8;
    }
  }
}

uint64_t sub_22E4E8DFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int *v8;
  uint64_t v9;
  __int128 v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t result;
  char v29;
  unsigned int v30;
  int v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  _QWORD v35[4];
  __int16 v36;
  _OWORD v37[3];

  v8 = *(unsigned int **)(a2 + 56);
  v9 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 144) + 280), *(llvm::LLVMContext **)(a2 + 64));
  v10 = *(_OWORD *)(a2 + 24);
  v37[0] = *(_OWORD *)(a2 + 8);
  v37[1] = v10;
  v37[2] = *(_OWORD *)(a2 + 40);
  v11 = *(_DWORD *)(a2 + 72);
  v35[0] = "bf.load";
  v36 = 259;
  v12 = sub_22E4E7B2C(a1, v37, (v11 >> 2) & 1, (v11 >> 9) & 3, (uint64_t)v35);
  if ((*(_BYTE *)(a2 + 72) & 4) != 0
    && (v13 = v8 + 5, v8[5])
    && (v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 144) + 216) + 448))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 216)),
        v15 > 4))
  {
    v30 = bswap32(*(_DWORD *)v14);
    if (v30 == 1633775715)
    {
      v31 = *(unsigned __int8 *)(v14 + 4) - 115;
    }
    else if (v30 < 0x61617063)
    {
      v31 = -1;
    }
    else
    {
      v31 = 1;
    }
    v16 = *v8;
    if (v31)
    {
      v17 = (unsigned __int16)*v8;
      v13 = v8 + 1;
    }
    else
    {
      v17 = *((unsigned __int16 *)v8 + 8);
    }
  }
  else
  {
    v13 = v8 + 1;
    v16 = *v8;
    v17 = (unsigned __int16)*v8;
  }
  v18 = *v13;
  if ((v16 & 0x80000000) != 0)
  {
    v22 = (HIWORD(v16) & 0x7FFF) + v17;
    v23 = v18 - v22;
    if (v18 != v22)
    {
      v35[0] = "bf.shl";
      v36 = 259;
      v24 = llvm::ConstantInt::get();
      v12 = (uint64_t)sub_22E3ED744(a1 + 272, v12, v24, (uint64_t)v35, 0, 0);
    }
    if (v23 + v17)
    {
      v35[0] = "bf.ashr";
      v36 = 259;
      v25 = llvm::ConstantInt::get();
      v12 = sub_22E3EA5BC(a1 + 272, v12, v25, (uint64_t)v35, 0);
    }
  }
  else
  {
    if (v17)
    {
      v35[0] = "bf.lshr";
      v36 = 259;
      v19 = llvm::ConstantInt::get();
      v12 = sub_22E3E4A40(a1 + 272, v12, v19, (uint64_t)v35, 0);
      v16 = *v8;
    }
    v20 = HIWORD(v16) & 0x7FFF;
    if (v20 + v17 < v18)
    {
      v34 = v18;
      if (v18 > 0x40)
      {
        v32 = HIWORD(v16) & 0x7FFF;
        llvm::APInt::initSlowCase((llvm::APInt *)&v33);
        v20 = v32;
      }
      else
      {
        v33 = 0;
      }
      sub_22E4EEDA4((llvm::APInt *)&v33, 0, v20);
      v35[0] = "bf.clear";
      v36 = 259;
      v21 = llvm::ConstantInt::get();
      v12 = sub_22E3E49C4(a1 + 272, v12, v21, (uint64_t)v35);
      if (v34 >= 0x41 && v33)
        MEMORY[0x2348A0E84](v33, 0x1000C8000313F17);
    }
  }
  v26 = *v8;
  v35[0] = "bf.cast";
  v36 = 259;
  v27 = (uint64_t *)sub_22E3BF45C((uint64_t *)(a1 + 272), v12, v9, v26 >> 31, (uint64_t)v35);
  result = sub_22E4E765C(a1, v27, *(_QWORD *)(a2 + 64), a3);
  v29 = *(_BYTE *)(a4 + 48);
  *(_QWORD *)a4 = v27;
  *(_QWORD *)(a4 + 8) = 0;
  *(_BYTE *)(a4 + 48) = v29 & 0xF8;
  return result;
}

uint64_t sub_22E4E9128(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  llvm::Instruction *v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  llvm::Instruction *v43;
  uint64_t v44;
  llvm::Type **v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  _OWORD v50[3];
  _OWORD v51[3];
  unint64_t v52;
  unsigned int v53;
  unint64_t v54;
  unsigned int v55;
  _OWORD v56[3];
  _QWORD v57[4];
  __int16 v58;
  __int128 v59;
  __int128 v60;

  v8 = *(unsigned int **)(a3 + 56);
  v9 = sub_22E66C868(*(_QWORD *)(a1 + 144) + 280, *(_QWORD *)(a3 + 64), 0);
  v10 = *(_QWORD *)(a3 + 16);
  v49 = *(_QWORD *)(a3 + 8);
  v11 = *(_OWORD *)(a3 + 40);
  v59 = *(_OWORD *)(a3 + 24);
  v60 = v11;
  v12 = *a2;
  v13 = v8;
  v58 = 257;
  v14 = sub_22E3BF45C((uint64_t *)(a1 + 272), v12, v10, 0, (uint64_t)v57);
  v15 = *(_QWORD *)(a1 + 144);
  if ((*(_DWORD *)(*(_QWORD *)(v15 + 184) + 92) & 0x20000) != 0
    && (*(_BYTE *)(a3 + 72) & 4) != 0
    && (v17 = v8 + 5, v13[5])
    && (v25 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v15 + 216) + 448))(*(_QWORD *)(v15 + 216)), v26 > 4)
    && bswap32(*(_DWORD *)v25) == 1633775715
    && *(_BYTE *)(v25 + 4) == 115)
  {
    v16 = *v13;
    v18 = *((unsigned __int16 *)v13 + 8);
  }
  else
  {
    v17 = v13 + 1;
    v16 = *v13;
    v18 = (unsigned __int16)*v13;
  }
  v19 = *v17;
  if (v19 == (HIWORD(v16) & 0x7FFF))
  {
    if ((*(_BYTE *)(a3 + 72) & 4) != 0)
    {
      v20 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 144) + 216) + 448))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 216));
      if (v21 >= 5)
      {
        v22 = *(_DWORD *)v20 == 1668309345 && *(_BYTE *)(v20 + 4) == 115;
        if (v22 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 184) + 92) & 0x4000) != 0)
        {
          *(_QWORD *)&v51[0] = v49;
          *((_QWORD *)&v51[0] + 1) = v10;
          v51[1] = v59;
          v51[2] = v60;
          v23 = (*(_DWORD *)(a3 + 72) >> 9) & 3;
          v57[0] = "bf.load";
          v58 = 259;
          sub_22E4E7B2C(a1, v51, 1, v23, (uint64_t)v57);
        }
      }
    }
    v24 = v14;
  }
  else
  {
    v47 = v9;
    *(_QWORD *)&v56[0] = v49;
    *((_QWORD *)&v56[0] + 1) = v10;
    v56[1] = v59;
    v56[2] = v60;
    v27 = *(_DWORD *)(a3 + 72);
    v57[0] = "bf.load";
    v58 = 259;
    v46 = sub_22E4E7B2C(a1, v56, (v27 >> 2) & 1, (v27 >> 9) & 3, (uint64_t)v57);
    v48 = a4;
    if ((sub_22E4E7578(*(_QWORD *)(a3 + 64)) & 1) == 0)
    {
      v28 = *((_WORD *)v13 + 1) & 0x7FFF;
      v55 = v19;
      if (v19 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v54);
      else
        v54 = 0;
      sub_22E4EEDA4((llvm::APInt *)&v54, 0, v28);
      v57[0] = "bf.value";
      v58 = 259;
      v29 = llvm::ConstantInt::get();
      v14 = sub_22E3E49C4(a1 + 272, v14, v29, (uint64_t)v57);
      if (v55 >= 0x41)
      {
        if (v54)
          MEMORY[0x2348A0E84](v54, 0x1000C8000313F17);
      }
    }
    v30 = (llvm::Instruction *)v14;
    if (v18)
    {
      v57[0] = "bf.shl";
      v58 = 259;
      v31 = llvm::ConstantInt::get();
      v30 = sub_22E3ED744(a1 + 272, v14, v31, (uint64_t)v57, 0, 0);
    }
    v32 = v13;
    v33 = (*((_WORD *)v13 + 1) & 0x7FFF) + v18;
    v53 = v19;
    if (v19 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v52);
    else
      v52 = 0;
    sub_22E4EEDA4((llvm::APInt *)&v52, v18, v33);
    v34 = v53;
    if (v53 > 0x40)
    {
      llvm::APInt::flipAllBitsSlowCase((llvm::APInt *)&v52);
      v34 = v53;
      v36 = v52;
    }
    else
    {
      v35 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v53;
      if (!v53)
        v35 = 0;
      v36 = v35 & ~v52;
      v52 = v36;
    }
    v13 = v32;
    v55 = v34;
    v54 = v36;
    v53 = 0;
    v57[0] = "bf.clear";
    v58 = 259;
    v37 = llvm::ConstantInt::get();
    v38 = sub_22E3E49C4(a1 + 272, v46, v37, (uint64_t)v57);
    if (v55 >= 0x41 && v54)
      MEMORY[0x2348A0E84](v54, 0x1000C8000313F17);
    if (v53 >= 0x41 && v52)
      MEMORY[0x2348A0E84](v52, 0x1000C8000313F17);
    v57[0] = "bf.set";
    v58 = 259;
    v24 = sub_22E3E58D4(a1 + 272, v38, (uint64_t)v30, (uint64_t)v57);
    v9 = v47;
    a4 = v48;
  }
  *(_QWORD *)&v50[0] = v49;
  *((_QWORD *)&v50[0] + 1) = v10;
  v50[1] = v59;
  v50[2] = v60;
  result = sub_22E4E8774(a1, v24, v50, (*(_DWORD *)(a3 + 72) >> 2) & 1, (*(_DWORD *)(a3 + 72) >> 9) & 3);
  if (a4)
  {
    v40 = *v13;
    if ((*v13 & 0x80000000) != 0 && v19 != (HIWORD(v40) & 0x7FFF))
    {
      v57[0] = "bf.result.shl";
      v58 = 259;
      v41 = llvm::ConstantInt::get();
      v42 = v13;
      v43 = sub_22E3ED744(a1 + 272, v14, v41, (uint64_t)v57, 0, 0);
      v57[0] = "bf.result.ashr";
      v58 = 259;
      v44 = llvm::ConstantInt::get();
      v14 = sub_22E3EA5BC(a1 + 272, (uint64_t)v43, v44, (uint64_t)v57, 0);
      v40 = *v42;
    }
    v57[0] = "bf.result.cast";
    v58 = 259;
    v45 = (llvm::Type **)sub_22E3BF45C((uint64_t *)(a1 + 272), v14, v9, v40 >> 31, (uint64_t)v57);
    result = sub_22E4E7BB4(a1, v45, *(_QWORD *)(a3 + 64));
    *a4 = result;
  }
  return result;
}

unint64_t sub_22E4E96BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  __int128 v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _OWORD v20[2];
  uint64_t v21;
  _BYTE v22[32];
  __int16 v23;
  _OWORD v24[3];

  v10 = *(_OWORD *)(a2 + 24);
  v24[0] = *(_OWORD *)(a2 + 8);
  v24[1] = v10;
  v24[2] = *(_OWORD *)(a2 + 40);
  v11 = *(_DWORD *)(a2 + 72);
  v23 = 257;
  v12 = sub_22E4E7B2C(a1, v24, (v11 >> 2) & 1, (v11 >> 9) & 3, (uint64_t)v22);
  v13 = v12;
  if (v12 && *(_BYTE *)(v12 + 16) == 60)
  {
    v14 = *(_QWORD *)(a1 + 144);
    v15 = *(_OWORD *)(a2 + 104);
    v20[0] = *(_OWORD *)(a2 + 88);
    v20[1] = v15;
    v21 = *(_QWORD *)(a2 + 120);
    sub_22E6282B8(v14, v13, (uint64_t)v20);
  }
  v16 = sub_22E66C868(*(_QWORD *)(a1 + 144) + 280, *(_QWORD *)(a2 + 64), 0);
  v23 = 257;
  v17 = sub_22E3C1740((uint64_t *)(a1 + 272), 49, v13, v16, (uint64_t)v22);
  v18 = sub_22F10ACF8(*(_QWORD *)(*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFFFF0));
  return sub_22E3D2FA0(a1, v17, v18, 0, 1, a3, a4, a5);
}

double sub_22E4E97E0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  double result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD v17[8];
  uint64_t v18;
  _OWORD v19[3];
  _BYTE v20[40];
  int v21;
  __int128 v22[2];
  uint64_t v23;
  __int128 v24[3];

  v21 = 2;
  *(_DWORD *)v20 = 0;
  memset(&v20[8], 0, 32);
  v6 = *(_OWORD *)(a2 + 112);
  v17[6] = *(_OWORD *)(a2 + 96);
  v17[7] = v6;
  v18 = *(_QWORD *)(a2 + 128);
  v7 = *(_OWORD *)(a2 + 48);
  v17[2] = *(_OWORD *)(a2 + 32);
  v17[3] = v7;
  v8 = *(_OWORD *)(a2 + 80);
  v17[4] = *(_OWORD *)(a2 + 64);
  v17[5] = v8;
  v9 = *(_OWORD *)(a2 + 16);
  v17[0] = *(_OWORD *)a2;
  v17[1] = v9;
  sub_22E4E96BC(a1, (uint64_t)v17, &v21, (uint64_t)v20, v19);
  v14 = v19[0];
  v15 = v19[1];
  v16 = v19[2];
  v10 = sub_22F10ACF8(*(_QWORD *)(*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFFFF0));
  v11 = v21;
  v22[0] = *(_OWORD *)v20;
  v22[1] = *(_OWORD *)&v20[16];
  v23 = *(_QWORD *)&v20[32];
  v24[0] = v14;
  v24[1] = v15;
  v24[2] = v16;
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 84) = 2;
  *(_DWORD *)a3 = 0;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_QWORD *)&result = sub_22E3C113C(a3, v24, v10, v11, v22, v12).n128_u64[0];
  return result;
}

unint64_t sub_22E4E98F8@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, _DWORD *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  __int128 v11;
  uint64_t v12;
  _BYTE v14[32];
  __int16 v15;
  _OWORD v16[3];

  v11 = a2[1];
  v16[0] = *a2;
  v16[1] = v11;
  v16[2] = a2[2];
  v15 = 257;
  v12 = sub_22E3C2A7C((uint64_t *)(a1 + 272), (uint64_t)v16, (uint64_t)v14);
  return sub_22E3D2FA0(a1, v12, *(_QWORD *)(a3 + 32), 0, 1, a4, a5, a6);
}

unint64_t sub_22E4E9988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t result;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  llvm::LLVMContext *v15;
  unint64_t v16;
  unsigned __int16 v17;

  v8 = a2 & 0xFFFFFFFFFFFFFFF8;
  if (sub_22E4E9AA8(a2 & 0xFFFFFFFFFFFFFFF8))
    return sub_22F29AF48(a1, v8) & 0xFFFFFFFFFFFFFFF8;
  result = sub_22E6336F0(a1, a2, a3, a4, 0, 0, 0);
  if ((*(_BYTE *)(v8 + 82) & 0x30) == 0)
  {
    v16 = result;
    v10 = *(_QWORD *)(*(_QWORD *)(v8 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (v10)
      v11 = *(_BYTE *)(v10 + 16) == 26;
    else
      v11 = 0;
    if (v11
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
      && (v10 = sub_22F10CF48(v10)) != 0)
    {
      v12 = *(_QWORD *)(a1 + 144);
      v13 = *(_QWORD *)(v10 + 24);
      v17 = 0;
      v14 = sub_22F369930(v12, v13, &v17);
      v15 = (llvm::LLVMContext *)sub_22EF5B848(*(_QWORD *)(a1 + 144), v14, 0);
      sub_22E66CB04((llvm::Type ***)(a1 + 280), v15);
      return llvm::ConstantExpr::getBitCast();
    }
    else
    {
      return v16;
    }
  }
  return result;
}

BOOL sub_22E4E9AA8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 351)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

double sub_22E4E9B08(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v15;
  uint64_t v16;
  _OWORD v17[8];
  uint64_t v18;
  _OWORD v19[8];
  uint64_t v20;

  v7 = *(_QWORD *)(a3 + 16);
  v8 = v7 & 0xFFFFFFFFFFFFFFF8;
  if ((v7 & 4) != 0)
    v8 = *(_QWORD *)v8;
  v9 = (*(_WORD *)(v8 + 8) & 0x7E) - 34;
  if (v8)
    v10 = v8 - 64;
  else
    v10 = 0;
  if (v9 >= 4)
    v11 = 0;
  else
    v11 = v10;
  v12 = *(_QWORD *)(v11 + 48);
  if (v12)
  {
    v13 = v12 & 0xFFFFFFFFFFFFFFF0;
  }
  else
  {
    v16 = a4;
    v15 = sub_22EF6462C(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 144), v11);
    a4 = v16;
    v13 = v15;
  }
  sub_22E619C24(a4, v13, 0, 1, a2, (uint64_t)v19);
  v17[6] = v19[6];
  v17[7] = v19[7];
  v18 = v20;
  v17[2] = v19[2];
  v17[3] = v19[3];
  v17[4] = v19[4];
  v17[5] = v19[5];
  v17[0] = v19[0];
  v17[1] = v19[1];
  return sub_22E4DD05C(a2, (uint64_t)v17, a3, a1);
}

double sub_22E4E9BF4@<D0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  __int128 v9;
  uint64_t v10;
  _OWORD v12[8];
  uint64_t v13;
  _OWORD v14[2];
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28[2];
  uint64_t v29;
  __int128 v30[3];

  v9 = a2[1];
  v16 = *a2;
  v17 = v9;
  v18 = a2[2];
  sub_22E6281E0(*(_QWORD **)(a1 + 144), a3, (uint64_t)v14);
  v30[0] = v16;
  v30[1] = v17;
  v30[2] = v18;
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
  v28[0] = v14[0];
  v28[1] = v14[1];
  v29 = v15;
  v20 = 0uLL;
  LODWORD(v21) = 0;
  *((_QWORD *)&v19 + 1) = 0;
  *((_QWORD *)&v21 + 1) = 0;
  *(_QWORD *)&v22 = 0;
  v23 = 0uLL;
  *(_QWORD *)((char *)&v24 + 4) = 2;
  LODWORD(v19) = 0;
  v25 = 0u;
  v26 = 0u;
  sub_22E3C113C((uint64_t)&v19, v30, a3, a4, v28, v10);
  v12[6] = v25;
  v12[7] = v26;
  v13 = v27;
  v12[2] = v21;
  v12[3] = v22;
  v12[4] = v23;
  v12[5] = v24;
  v12[0] = v19;
  v12[1] = v20;
  return sub_22E4E97E0(a1, (uint64_t)v12, a5);
}

double sub_22E4E9CFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t a6, unsigned int a7)
{
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  double result;
  __int128 v22[3];
  _OWORD v23[3];
  _OWORD v24[3];
  _OWORD v25[2];
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30[2];
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  v12 = *(_QWORD *)(a2 + 144);
  if ((*(_BYTE *)(*(_QWORD *)(v12 + 152) + 76) & 0x20) != 0)
  {
    v15 = a5[1];
    v24[0] = *a5;
    v24[1] = v15;
    v24[2] = a5[2];
    sub_22E5F5C98(a2, a3, (uint64_t)v24, (uint64_t)&v32);
  }
  else
  {
    v13 = *(_QWORD *)(v12 + 808);
    v14 = a5[1];
    v23[0] = *a5;
    v23[1] = v14;
    v23[2] = a5[2];
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, _OWORD *, _QWORD))(*(_QWORD *)v13 + 296))(&v32, v13, a2, a3, v23, a7);
  }
  v16 = v33;
  *a5 = v32;
  a5[1] = v16;
  a5[2] = v34;
  v17 = a5[1];
  v22[0] = *a5;
  v22[1] = v17;
  v22[2] = a5[2];
  LOWORD(v29) = 257;
  sub_22E3BEE6C((uint64_t *)(a2 + 272), v22, a6, (uint64_t)&v27, (uint64_t)&v32);
  v18 = v33;
  *a5 = v32;
  a5[1] = v18;
  a5[2] = v34;
  v19 = a5[1];
  v27 = *a5;
  v28 = v19;
  v29 = a5[2];
  sub_22E6281E0(*(_QWORD **)(a2 + 144), a4, (uint64_t)v25);
  v32 = v27;
  v33 = v28;
  v34 = v29;
  v20 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
  v30[0] = v25[0];
  v30[1] = v25[1];
  v31 = v26;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 84) = 2;
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)&result = sub_22E3C113C(a1, &v32, a4, 0, v30, v20).n128_u64[0];
  return result;
}

void sub_22E4E9E9C(uint64_t a1, unsigned __int8 *a2, uint64_t a3, char a4)
{
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  char v19;
  char v20;

  if ((*(_BYTE *)(*(_QWORD *)(a1 + 2000) + 246) & 6) == 0)
    return;
  while (1)
  {
    while (1)
    {
      v7 = *a2;
      if (v7 > 0x98)
        break;
      if (v7 != 144 && v7 != 152)
      {
        if (v7 != 107)
          return;
        v10 = a2 + 24;
        v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        v12 = *(_DWORD *)(v11 + 16);
        if (v11)
          v13 = v12 == 11;
        else
          v13 = 0;
        if (v13)
        {
          if (((*(_DWORD *)(v11 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
            goto LABEL_51;
        }
        else if (v11 && v12 == 44)
        {
          v14 = sub_22F114198(*(_QWORD *)(v11 + 24));
          if ((*(_BYTE *)(v14 + 74) & 1) == 0 && *(_QWORD *)(v14 + 128) <= 7uLL
            || (*(_QWORD *)(sub_22F114198(*(_QWORD *)(v11 + 24)) + 72) & 0x8000000000) != 0)
          {
LABEL_51:
            sub_22E4E9E9C(a1, *v10, a3, 0);
            v19 = *(_BYTE *)(a3 + 80);
            if ((v19 & 3) == 1)
            {
LABEL_52:
              v17 = v19 & 0xFE;
            }
            else
            {
              if ((v19 & 0xA) != 8)
                return;
              v17 = v19 & 0xF7;
            }
LABEL_55:
            *(_BYTE *)(a3 + 80) = v17;
            return;
          }
        }
        else if (v12 != 9)
        {
          goto LABEL_51;
        }
        v10 = a2 + 16;
        goto LABEL_51;
      }
LABEL_11:
      a2 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
    }
    if (*a2 > 0xBBu)
      break;
    if (v7 == 153)
      goto LABEL_11;
    if (v7 == 161)
    {
      v15 = *((_QWORD *)a2 + 2);
      if (v15 && (*(_DWORD *)(v15 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9 && !sub_22E3CB5E0(*((_QWORD *)a2 + 2)))
      {
        *(_BYTE *)(a3 + 80) |= 8u;
        sub_22EFBB794(v15);
        *(_BYTE *)(a3 + 80) = *(_BYTE *)(a3 + 80) & 0xEF | (16 * (v16 != 0));
      }
      goto LABEL_41;
    }
    if (v7 != 176)
      return;
    a4 = 0;
    a2 = *(unsigned __int8 **)&a2[8 * (*((_DWORD *)a2 + 5) + 1) + 32];
  }
  if (*a2 > 0xE8u)
  {
    if (v7 != 233)
      return;
    goto LABEL_11;
  }
  switch(v7)
  {
    case 0xBCu:
      sub_22E4E9E9C(a1, *((_QWORD *)a2 + 2), a3, 1);
LABEL_41:
      v17 = *(_BYTE *)(a3 + 80) & 0xFD | (2
                                        * ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) & 0xFFFFFFFFFFFFFFF0)
                                                                              + 8) & 0xFFFFFFFFFFFFFFF0)
                                                      + 16) & 0xFEu)
                                         - 2 < 4));
      goto LABEL_55;
    case 0xC7u:
      if ((a4 & 1) == 0)
        goto LABEL_48;
      v18 = *(_QWORD *)(*((_QWORD *)a2 + 1) & 0xFFFFFFFFFFFFFFF0);
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
        goto LABEL_48;
      if (*(_BYTE *)(v18 + 16) != 39)
        v18 = sub_22F10CF48(v18);
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) != 45)
      {
LABEL_48:
        v20 = *(_BYTE *)(a3 + 80) | 1;
        *(_BYTE *)(a3 + 80) = v20;
        *(_QWORD *)(a3 + 128) = *((_QWORD *)a2 + 3);
        v17 = v20 & 0xFD | (2
                          * ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) & 0xFFFFFFFFFFFFFFF0)
                                                                + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 16) & 0xFEu)
                           - 2 < 4));
        goto LABEL_55;
      }
LABEL_47:
      v19 = *(_BYTE *)(a3 + 80);
      goto LABEL_52;
    case 0xD6u:
      sub_22E4E9E9C(a1, *((_QWORD *)a2 + 3), a3, a4 & 1);
      if ((*(_BYTE *)(a3 + 80) & 1) != 0)
      {
        v8 = *(_QWORD *)(*((_QWORD *)a2 + 1) & 0xFFFFFFFFFFFFFFF0);
        v9 = *(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0;
        if (*(_BYTE *)(*(_QWORD *)v9 + 16) == 39)
        {
          if (*(_BYTE *)(v8 + 16) != 39)
            v8 = sub_22F10CF48(v8);
          v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0;
        }
        if (*(_BYTE *)(*(_QWORD *)v9 + 16) == 45)
          goto LABEL_47;
      }
      break;
  }
}

double sub_22E4EA21C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v8 = a4 & 0xFFFFFFFFFFFFFFF8;
  v9 = sub_22F28A8C0(*(uint64_t **)(a2 + 144), a4, a5, 0);
  v10 = sub_22EF5B404(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 144), v8, 0);
  return sub_22F247F68(a2, v9, *(_QWORD *)(a3 + 8), v10, 0, a1);
}

uint64_t sub_22E4EA298(uint64_t a1, uint64_t a2, unsigned int a3, const void *a4, size_t a5)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  signed int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  const void *v28;
  char **v29;
  uint64_t Declaration;
  uint64_t v31;
  llvm::Value *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  llvm::Value *v36;
  uint64_t v37;
  char **p_dst;
  uint64_t v39;
  uint64_t v40;
  uint64_t v43;
  _QWORD v44[2];
  char **v45;
  char *__dst;
  size_t v47;
  unint64_t v48;
  __int16 v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  __dst = "cont";
  v49 = 259;
  v9 = operator new();
  llvm::BasicBlock::BasicBlock();
  v10 = *(unsigned int *)(a1 + 5984);
  v11 = a3;
  if (v10 <= a3)
  {
    v12 = a3 + 1;
    if (v10 != a3 + 1)
    {
      if (v10 <= v12)
      {
        if (*(unsigned int *)(a1 + 5988) < (unint64_t)v12)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v10 = *(unsigned int *)(a1 + 5984);
        }
        if (v12 != v10)
          bzero((void *)(*(_QWORD *)(a1 + 5976) + 8 * v10), 8 * (v12 - v10));
      }
      *(_DWORD *)(a1 + 5984) = v12;
    }
  }
  v13 = *(_QWORD *)(a1 + 5976);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 272));
  llvm::DebugLoc::get((llvm::DebugLoc *)&__dst);
  if (__dst)
    llvm::MetadataTracking::untrack();
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 184);
  if ((*(_BYTE *)(v14 + 33) & 0x18) == 0 || *(_QWORD *)(v13 + 8 * a3) == 0)
    goto LABEL_26;
  v16 = *(_QWORD *)(a1 + 1600);
  if (v16)
  {
    if (!sub_22E4728AC(v16))
    {
      v17 = (_QWORD *)v9;
      v14 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 184);
      goto LABEL_15;
    }
LABEL_26:
    v17 = (_QWORD *)v9;
    v18 = a4;
LABEL_27:
    __dst = "trap";
    v49 = 259;
    v26 = operator new();
    *(_QWORD *)(v13 + 8 * v11) = llvm::BasicBlock::BasicBlock();
    v27 = llvm::User::operator new((llvm::User *)0x40);
    MEMORY[0x23489C09C](v27, v17, v26, a2, 0);
    v49 = 257;
    sub_22E3C12C8((uint64_t *)(a1 + 272), v27, (uint64_t)&__dst);
    v28 = v18;
    if (a5)
      llvm::Instruction::addAnnotationMetadata();
    sub_22E5ED9B4((_QWORD *)a1, *(_QWORD **)(v13 + 8 * v11), 0);
    llvm::DebugLoc::DebugLoc();
    sub_22E48EFBC(v44, a1, &v43);
    if (v43)
      llvm::MetadataTracking::untrack();
    v29 = (char **)llvm::ConstantInt::get();
    v25 = v17;
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 184) + 45) & 1) != 0)
    {
      __dst = *v29;
      llvm::FunctionType::get();
      v35 = sub_22E633A04();
      v45 = v29;
      v49 = 257;
      v32 = sub_22F24EEDC(a1, v35, v36, (uint64_t)&v45, 1, (uint64_t)&__dst);
      v37 = llvm::User::operator new((llvm::User *)0x40);
      llvm::BranchInst::BranchInst();
      v49 = 257;
      sub_22E3C12C8((uint64_t *)(a1 + 272), v37, (uint64_t)&__dst);
      if (!a5)
      {
LABEL_53:
        llvm::Value::getContext(v32);
        *((_QWORD *)v32 + 8) = llvm::AttributeList::addAttributeAtIndex();
        sub_22E48F084(v44);
        return sub_22E5ED9B4((_QWORD *)a1, v25, 0);
      }
    }
    else
    {
      Declaration = llvm::Intrinsic::getDeclaration();
      v31 = 0;
      if (Declaration)
        v31 = *(_QWORD *)(Declaration + 24);
      v45 = v29;
      v49 = 257;
      v32 = sub_22E462B78((uint64_t *)(a1 + 272), v31, Declaration, (uint64_t)&v45, 1, (uint64_t)&__dst, 0);
      v33 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 184);
      if (*(char *)(v33 + 687) < 0)
        v34 = *(_QWORD *)(v33 + 672);
      else
        v34 = *(unsigned __int8 *)(v33 + 687);
      if (v34)
      {
        llvm::Attribute::get();
        llvm::Value::getContext(v32);
        *((_QWORD *)v32 + 8) = llvm::AttributeList::addAttributeAtIndex();
      }
      llvm::Value::getContext(v32);
      *((_QWORD *)v32 + 8) = llvm::AttributeList::addAttributeAtIndex();
      sub_22F24866C(a1 + 272);
      if (!a5)
        goto LABEL_53;
    }
    if (v28)
    {
      if (a5 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      if (a5 >= 0x17)
      {
        v39 = (a5 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((a5 | 7) != 0x17)
          v39 = a5 | 7;
        v40 = v39 + 1;
        p_dst = (char **)operator new(v39 + 1);
        v47 = a5;
        v48 = v40 | 0x8000000000000000;
        __dst = (char *)p_dst;
      }
      else
      {
        HIBYTE(v48) = a5;
        p_dst = &__dst;
      }
      memmove(p_dst, v28, a5);
      *((_BYTE *)p_dst + a5) = 0;
    }
    else
    {
      __dst = 0;
      v47 = 0;
      v48 = 0;
    }
    llvm::Instruction::addAnnotationMetadata();
    if (SHIBYTE(v48) < 0)
      operator delete(__dst);
    goto LABEL_53;
  }
  v17 = (_QWORD *)v9;
LABEL_15:
  v18 = a4;
  if ((*(_BYTE *)(v14 + 45) & 1) != 0)
    goto LABEL_27;
  v19 = *(_QWORD *)(*(_QWORD *)(v13 + 8 * v11) + 48);
  if (v19)
    v20 = v19 - 24;
  else
    v20 = 0;
  llvm::DebugLoc::get((llvm::DebugLoc *)(v20 + 48));
  llvm::Instruction::applyMergedLocation();
  v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 8 * v11) + 48) + 8);
  if (v21)
    v22 = v21 - 24;
  else
    v22 = 0;
  llvm::DebugLoc::get((llvm::DebugLoc *)(v22 + 48));
  llvm::Instruction::applyMergedLocation();
  if (a5)
    llvm::Instruction::addAnnotationMetadata();
  v23 = *(_QWORD *)(v13 + 8 * v11);
  v24 = llvm::User::operator new((llvm::User *)0x40);
  v25 = v17;
  MEMORY[0x23489C09C](v24, v17, v23, a2, 0);
  v49 = 257;
  sub_22E3C12C8((uint64_t *)(a1 + 272), v24, (uint64_t)&__dst);
  if (a5)
    llvm::Instruction::addAnnotationMetadata();
  return sub_22E5ED9B4((_QWORD *)a1, v25, 0);
}

void sub_22E4EA8F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, int a7)
{
  int v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  std::string::size_type v15;
  std::string *p_dst;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  std::string *v21;
  std::string::size_type v22;
  uint64_t v23;
  unint64_t v24;
  BOOL v25;
  std::string *v26;
  std::string::size_type v27;
  std::string *v28;
  std::string::size_type size;
  int v30;
  const llvm::AttrBuilder *v31;
  uint64_t v32;
  std::string *v33;
  std::string::size_type v34;
  uint64_t v35;
  uint64_t v36;
  llvm::Value *v37;
  llvm::Value *v38;
  uint64_t v39;
  llvm::Value *v40;
  uint64_t *v41;
  std::string v45;
  uint64_t v46[2];
  char v47;
  std::string v48;
  __int16 v49;
  std::string __dst;
  _QWORD v51[11];

  v51[9] = *MEMORY[0x24BDAC8D0];
  LOBYTE(v46[0]) = 0;
  v47 = 0;
  v41 = (uint64_t *)(a1 + 272);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 272));
  if (__dst.__r_.__value_.__r.__words[0])
  {
    llvm::MetadataTracking::untrack();
  }
  else
  {
    v46[0] = 0;
    v46[1] = a1;
    sub_22E48EE24(v46, 0, 0);
    v47 = 1;
  }
  if (a6)
    v11 = a7;
  else
    v11 = 0;
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 184) + 32);
  v13 = (&off_24FA63AB8)[2 * a5];
  if (!v13)
  {
    memset(&__dst, 0, sizeof(__dst));
    goto LABEL_18;
  }
  v14 = strlen((&off_24FA63AB8)[2 * a5]);
  if (v14 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v15 = v14;
  if (v14 >= 0x17)
  {
    v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v17 = v14 | 7;
    v18 = v11;
    v19 = v17 + 1;
    p_dst = (std::string *)operator new(v17 + 1);
    v20 = v19 | 0x8000000000000000;
    v11 = v18;
    __dst.__r_.__value_.__l.__size_ = v15;
    __dst.__r_.__value_.__r.__words[2] = v20;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v14;
    p_dst = &__dst;
    if (!v14)
      goto LABEL_17;
  }
  memmove(p_dst, v13, v15);
LABEL_17:
  p_dst->__r_.__value_.__s.__data_[v15] = 0;
LABEL_18:
  v21 = std::string::insert(&__dst, 0, "__ubsan_handle_");
  v22 = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (((0x3BD7FBFuLL >> a5) & 1) == 0 && (v12 & 0x100000000) == 0)
  {
    v23 = 0;
    v24 = LODWORD((&off_24FA63AB8)[2 * a5 + 1]);
    do
    {
      __dst.__r_.__value_.__s.__data_[v23-- + 20] = (v24 % 0xA) | 0x30;
      v25 = v24 > 9;
      v24 /= 0xAuLL;
    }
    while (v25);
    sub_22E3B4274(&v48, &__dst.__r_.__value_.__s.__data_[v23 + 21], &__dst.__r_.__value_.__s.__data_[21], -v23);
    v26 = std::string::insert(&v48, 0, "_v");
    v27 = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = &__dst;
    else
      v28 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
    else
      size = __dst.__r_.__value_.__l.__size_;
    std::string::append(&v45, (const std::string::value_type *)v28, size);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
  }
  if ((v12 & 0x100000000) != 0)
    std::string::append(&v45, "_minimal");
  if (v11)
    std::string::append(&v45, "_abort");
  if (a6 == 2)
    v30 = 0;
  else
    v30 = a7;
  __dst.__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v51;
  __dst.__r_.__value_.__r.__words[2] = 0x800000000;
  if (v30 == 1)
  {
    llvm::AttrBuilder::addAttribute();
    llvm::AttrBuilder::addAttribute();
  }
  llvm::AttrBuilder::addUWTableAttr();
  v32 = *(_QWORD *)(a1 + 144);
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v33 = &v45;
  else
    v33 = (std::string *)v45.__r_.__value_.__r.__words[0];
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v34 = *((_BYTE *)&v45.__r_.__value_.__s + 23) & 0x7F;
  else
    v34 = v45.__r_.__value_.__l.__size_;
  v35 = llvm::AttributeList::get(*(llvm::AttributeList **)(v32 + 232), (llvm::LLVMContext *)0xFFFFFFFFLL, (uint64_t)&__dst, v31);
  v36 = sub_22E633A04(v32, a2, v33, v34, v35, 1, 0);
  v49 = 257;
  v38 = sub_22F24EEDC(a1, v36, v37, a3, a4, (uint64_t)&v48);
  if (v30)
  {
    v40 = v38;
    llvm::Value::getContext(v38);
    *((_QWORD *)v40 + 8) = llvm::AttributeList::addAttributeAtIndex();
    sub_22F24866C((uint64_t)v41);
  }
  else
  {
    v39 = llvm::User::operator new((llvm::User *)0x40);
    llvm::BranchInst::BranchInst();
    v49 = 257;
    sub_22E3C12C8(v41, v39, (uint64_t)&v48);
  }
  if ((_QWORD *)__dst.__r_.__value_.__l.__size_ != v51)
    free((void *)__dst.__r_.__value_.__l.__size_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (v47)
    sub_22E48F084(v46);
}

void sub_22E4EAD24(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::Value *v11;
  int8x16_t v12;
  int v13;
  unsigned int v14;
  int v15;
  char *v16;
  _QWORD *v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  int v21;
  char *v22;
  _QWORD *v23;
  unint64_t v24;
  unsigned int v25;
  llvm::PointerType *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  llvm::LLVMContext *v32;
  uint64_t v33;
  llvm::Type **v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t Declaration;
  uint64_t v42;
  llvm::Value *v43;
  uint64_t v44;
  llvm::Type **v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  llvm::Type **v52;
  _QWORD v53[3];
  int v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[3];
  unsigned int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  int v67;
  _QWORD v68[3];
  unsigned int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  int v78;
  llvm::Type **v79[3];
  llvm::Value *v80;
  uint64_t v81;
  uint64_t v82;
  __int16 v83;
  void *v84[2];
  __int128 v85;
  __int128 v86;
  _QWORD *v87;
  __int128 v88;
  int v89;
  __int128 v90;
  int v91;
  __int128 v92;
  int v93;
  __int128 v94;
  int v95;
  __int128 v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD v99[19];

  v99[16] = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(a1 + 1880) = 1;
  v97 = v99;
  v98 = 0x1000000000;
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
  v3 = *(_QWORD *)(v2 + 16816);
  sub_22EA41AB8((uint64_t)v68, 62, 0, 0);
  v71 = 0;
  v72 = v3;
  v73 = 0;
  v74 = 0;
  v75 = v2 | 2;
  v76 = v68;
  v77 = 0;
  v68[0] = &off_24FAC3008;
  v78 = 1310720;
  v70 |= 0x200u;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
  v5 = *(_QWORD *)(v4 + 16816);
  sub_22EA41AB8((uint64_t)v57, 62, 0, 0);
  v60 = 0;
  v61 = v5;
  v62 = 0;
  v63 = 0;
  v64 = v4 | 2;
  v65 = v57;
  v66 = 0;
  v57[0] = &off_24FAC3008;
  v67 = 1310720;
  v59 |= 0x200u;
  v6 = v98;
  if (v98 >= HIDWORD(v98))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = v98;
  }
  v97[v6] = v68;
  v7 = v98 + 1;
  LODWORD(v98) = v7;
  if (v7 >= HIDWORD(v98))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = v98;
  }
  v97[v7] = v57;
  LODWORD(v98) = v98 + 1;
  v8 = sub_22F24E348(*(_QWORD *)(a1 + 144) + 280, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144) + 16392), (uint64_t *)&v97);
  v87 = *(_QWORD **)(a1 + 96);
  *(_QWORD *)&v88 = v87;
  v9 = llvm::FunctionType::get();
  v84[0] = "__cfi_check_fail";
  LOWORD(v86) = 259;
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 200);
  v11 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x78);
  MEMORY[0x23489F6FC](v11, v9, 5, 0xFFFFFFFFLL, v84, v10);
  sub_22E62A548(*(_QWORD *)(a1 + 144), 0, 0, v8, v11, 0);
  sub_22E62A5F4(*(uint64_t **)(a1 + 144), 0, v11);
  v13 = *((_DWORD *)v11 + 8);
  v14 = v13 & 0xFFFFFFCF | 0x10;
  *((_DWORD *)v11 + 8) = v14;
  if ((v13 & 0xFu) - 7 >= 2)
  {
    if ((llvm::GlobalValue::hasExternalWeakLinkage(v11) & 1) != 0)
      goto LABEL_9;
    v14 = *((_DWORD *)v11 + 8);
  }
  *((_DWORD *)v11 + 8) = v14 | 0x4000;
LABEL_9:
  sub_22E61A8FC(a1, 0, 0, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144) + 16392), v11, v8, (uint64_t *)&v97, 0, v12, 0);
  *(_OWORD *)(a1 + 1864) = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 152) + 256);
  v87 = v68;
  v84[0] = 0;
  v15 = sub_22E3CED3C((uint64_t *)(a1 + 2904), &v87, v84);
  v16 = (char *)v84[0];
  if (!v15)
    v16 = (char *)(*(_QWORD *)(a1 + 2904) + 56 * *(unsigned int *)(a1 + 2920));
  *(_OWORD *)v84 = *(_OWORD *)(v16 + 8);
  v85 = *(_OWORD *)(v16 + 24);
  v86 = *(_OWORD *)(v16 + 40);
  v17 = *(_QWORD **)(a1 + 144);
  v18 = *(_QWORD *)(v17[18] + 16816);
  v19 = v69;
  sub_22E6281E0(v17, v18, (uint64_t)&v87);
  v20 = (uint64_t *)sub_22E4E6994(a1, (uint64_t)v84, 0, v18, v19, 2, (uint64_t)&v87, 0);
  v87 = v57;
  v84[0] = 0;
  v21 = sub_22E3CED3C((uint64_t *)(a1 + 2904), &v87, v84);
  v22 = (char *)v84[0];
  if (!v21)
    v22 = (char *)(*(_QWORD *)(a1 + 2904) + 56 * *(unsigned int *)(a1 + 2920));
  *(_OWORD *)v84 = *(_OWORD *)(v22 + 8);
  v85 = *(_OWORD *)(v22 + 24);
  v86 = *(_OWORD *)(v22 + 40);
  v23 = *(_QWORD **)(a1 + 144);
  v24 = *(_QWORD *)(v23[18] + 16816);
  v25 = v58;
  sub_22E6281E0(v23, v24, (uint64_t)&v87);
  v52 = (llvm::Type **)sub_22E4E6994(a1, (uint64_t)v84, 0, v24, v25, 2, (uint64_t)&v87, 0);
  v27 = llvm::ConstantPointerNull::get(*(llvm::ConstantPointerNull **)(a1 + 96), v26);
  LOWORD(v86) = 257;
  v28 = sub_22E3C18F4(a1 + 272, 33, v20, v27, (uint64_t)v84);
  sub_22E4EA298(a1, v28, 2u, "", 0);
  v29 = *(void **)(a1 + 24);
  v84[0] = *(void **)(a1 + 96);
  v84[1] = v29;
  *(_QWORD *)&v85 = v29;
  v30 = (void *)llvm::StructType::get();
  v31 = *(_QWORD *)(a1 + 96);
  v84[0] = *(void **)(a1 + 8);
  v84[1] = v30;
  *(_QWORD *)&v85 = v31;
  v32 = (llvm::LLVMContext *)llvm::StructType::get();
  v33 = llvm::PointerType::get();
  LOWORD(v86) = 257;
  v34 = (llvm::Type **)v20;
  v35 = (uint64_t *)sub_22E3CA9BC((uint64_t *)(a1 + 272), (uint64_t)v20, v33, (uint64_t)v84);
  LOWORD(v90) = 257;
  v36 = sub_22F24F7D0(a1 + 272, v32, v35, 0, 0, (uint64_t)&v87);
  v37 = *(_QWORD *)(a1 + 8);
  v38 = *(unsigned __int8 *)(a1 + 128);
  v53[0] = v36;
  v53[1] = v37;
  v53[2] = v38;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  LOWORD(v86) = 257;
  v39 = (uint64_t *)sub_22E3C2A7C((uint64_t *)(a1 + 272), (uint64_t)v53, (uint64_t)v84);
  llvm::MDString::get();
  v40 = llvm::MetadataAsValue::get();
  Declaration = llvm::Intrinsic::getDeclaration();
  if (Declaration)
    v42 = *(_QWORD *)(Declaration + 24);
  else
    v42 = 0;
  v80 = (llvm::Value *)v52;
  v81 = v40;
  LOWORD(v86) = 257;
  v43 = sub_22E462B78((uint64_t *)(a1 + 272), v42, Declaration, (uint64_t)&v80, 2, (uint64_t)v84, 0);
  v44 = *(_QWORD *)(a1 + 88);
  LOWORD(v90) = 257;
  v45 = (llvm::Type **)sub_22E3C1740((uint64_t *)(a1 + 272), 39, (uint64_t)v43, v44, (uint64_t)&v87);
  v46 = 0;
  v88 = xmmword_22F455B20;
  LODWORD(v87) = 0;
  v89 = 1;
  v90 = xmmword_22F457600;
  v92 = xmmword_22F457610;
  v91 = 2;
  v93 = 3;
  v94 = xmmword_22F4575D0;
  v95 = 4;
  v96 = xmmword_22F457620;
  v84[0] = &v85;
  v84[1] = (void *)0x500000000;
  do
  {
    v47 = (uint64_t)(&v87)[v46 + 1];
    v48 = *(_QWORD *)((char *)&v88 + v46 * 8 + 8);
    v49 = llvm::ConstantInt::get();
    v83 = 257;
    v50 = sub_22E3C18F4(a1 + 272, 33, v39, v49, (uint64_t)&v80);
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 152) + 256) & v47 | *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 152)
                                                                                           + 264) & v48)
    {
      v80 = (llvm::Value *)v50;
      v81 = v47;
      v82 = v48;
      v79[0] = v34;
      v79[1] = v52;
      v79[2] = v45;
      sub_22E4DEC4C((_QWORD *)a1, (uint64_t)&v80, 1, 2u, 0, 0, v79, 3);
    }
    else
    {
      sub_22E4EA298(a1, v50, 2u, "", 0);
    }
    v46 += 3;
  }
  while (v46 != 15);
  sub_22E619DE8(a1, 0);
  v51 = *(_QWORD *)(a1 + 144);
  v80 = v11;
  sub_22E62C508((uint64_t *)(v51 + 1416), (uint64_t *)&v80);
  if (v84[0] != &v85)
    free(v84[0]);
  if (v97 != v99)
    free(v97);
  *(_BYTE *)(a1 + 1880) = 0;
}

uint64_t sub_22E4EB480(uint64_t a1, int a2, __n128 a3)
{
  uint64_t v5;
  llvm::Type **v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  unint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  unsigned __int8 **v32;
  uint64_t v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v39[2];
  char v40;
  uint64_t v41;
  __int16 v42;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(llvm::Type ***)a1;
  v7 = **(_QWORD **)(a1 + 8);
  v10 = *(_QWORD *)(v7 + 16);
  v9 = (_QWORD *)(v7 + 16);
  v8 = v10;
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9[1] + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_DWORD *)(v11 + 16);
  if (v11)
    v13 = v12 == 11;
  else
    v13 = 0;
  if (v13)
  {
    if (((*(_DWORD *)(v11 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
      goto LABEL_13;
    goto LABEL_12;
  }
  if (!v11 || v12 != 44)
  {
    if (v12 != 9)
      goto LABEL_13;
LABEL_12:
    ++v9;
    goto LABEL_13;
  }
  v14 = sub_22F114198(*(_QWORD *)(v11 + 24));
  if (((*(_BYTE *)(v14 + 74) & 1) != 0 || *(_QWORD *)(v14 + 128) > 7uLL)
    && (*(_QWORD *)(sub_22F114198(*(_QWORD *)(v11 + 24)) + 72) & 0x8000000000) == 0)
  {
    goto LABEL_12;
  }
LABEL_13:
  v15 = *(uint64_t **)(a1 + 8);
  if (v8 == *v9)
    goto LABEL_27;
  v16 = *v15;
  v17 = *v15 + 24;
  v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v17 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_DWORD *)(v18 + 16);
  if (v18)
    v20 = v19 == 11;
  else
    v20 = 0;
  if (!v20)
  {
    if (v18 && v19 == 44)
    {
      v21 = sub_22F114198(*(_QWORD *)(v18 + 24));
      if (((*(_BYTE *)(v21 + 74) & 1) != 0 || *(_QWORD *)(v21 + 128) > 7uLL)
        && (*(_QWORD *)(sub_22F114198(*(_QWORD *)(v18 + 24)) + 72) & 0x8000000000) == 0)
      {
        goto LABEL_26;
      }
    }
    else if (v19 == 9)
    {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (((*(_DWORD *)(v18 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
LABEL_25:
    v17 = v16 + 16;
LABEL_26:
  v22 = *(_QWORD *)v17;
  v39[0] = v5;
  v39[1] = v5 + 272;
  v40 = 0;
  v41 = *(_QWORD *)(*(_QWORD *)(v5 + 144) + 232);
  v6 = (llvm::Type **)sub_22E50E974(v39, v22, a3);
  v15 = *(uint64_t **)(a1 + 8);
LABEL_27:
  v23 = *v15;
  v24 = *v15 + 24;
  v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v24 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v26 = *(_DWORD *)(v25 + 16);
  if (v25)
    v27 = v26 == 11;
  else
    v27 = 0;
  if (v27)
  {
    if (((*(_DWORD *)(v25 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
      goto LABEL_39;
    goto LABEL_38;
  }
  if (!v25 || v26 != 44)
  {
    if (v26 == 9)
      goto LABEL_39;
LABEL_38:
    v24 = v23 + 16;
    goto LABEL_39;
  }
  v28 = sub_22F114198(*(_QWORD *)(v25 + 24));
  if ((*(_BYTE *)(v28 + 74) & 1) == 0 && *(_QWORD *)(v28 + 128) <= 7uLL
    || (*(_QWORD *)(sub_22F114198(*(_QWORD *)(v25 + 24)) + 72) & 0x8000000000) != 0)
  {
    goto LABEL_38;
  }
LABEL_39:
  v29 = *(_QWORD *)(*(_QWORD *)v24 + 8);
  v30 = sub_22F110A40(*(_QWORD *)(v29 & 0xFFFFFFFFFFFFFFF0));
  **(_BYTE **)(a1 + 24) |= v30;
  if ((*(_BYTE *)(v5 + 1866) & 1) != 0)
  {
    v31 = **(_QWORD **)(a1 + 8);
    v32 = (unsigned __int8 **)(v31 + 24);
    v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v31 + 24) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v34 = *(_DWORD *)(v33 + 16);
    if (v33)
      v35 = v34 == 11;
    else
      v35 = 0;
    if (v35)
    {
      if (((*(_DWORD *)(v33 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
      {
LABEL_56:
        sub_22E4DF4E0(v5, v31, *v32, v6, v29, **(unsigned __int8 **)(a1 + 32));
        goto LABEL_57;
      }
    }
    else if (v33 && v34 == 44)
    {
      v36 = sub_22F114198(*(_QWORD *)(v33 + 24));
      if ((*(_BYTE *)(v36 + 74) & 1) == 0 && *(_QWORD *)(v36 + 128) <= 7uLL
        || (*(_QWORD *)(sub_22F114198(*(_QWORD *)(v33 + 24)) + 72) & 0x8000000000) != 0)
      {
        goto LABEL_56;
      }
    }
    else if (v34 != 9)
    {
      goto LABEL_56;
    }
    v32 = (unsigned __int8 **)(v31 + 16);
    goto LABEL_56;
  }
LABEL_57:
  if (a2)
  {
    v37 = *(_QWORD *)(v5 + 88);
    if (*v6 != (llvm::Type *)v37)
    {
      v39[0] = "idxprom";
      v42 = 259;
      return sub_22E3BF45C((uint64_t *)(v5 + 272), (uint64_t)v6, v37, v30, (uint64_t)v39);
    }
  }
  return (uint64_t)v6;
}

__n128 sub_22E4EB808(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t **a4, uint64_t a5, unint64_t a6, int a7, int a8, uint64_t a9, unint64_t *a10, unsigned __int8 *a11, const char **a12)
{
  unint64_t v14;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t PreserveArrayAccessIndex;
  uint64_t v27;
  __n128 result;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  unsigned __int8 *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _OWORD v43[3];
  _OWORD v44[4];

  v14 = a6;
  v20 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 144), a6);
  v39 = a8;
  if (v20 && *(_BYTE *)(v20 + 16) == 5)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
    do
    {
      v14 = *(_QWORD *)(v20 + 32);
      v20 = sub_22EF5C728(v21, v14);
    }
    while (v20 && *(_BYTE *)(v20 + 16) == 5);
  }
  sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 144), *(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0), (uint64_t)v44);
  v22 = *((_QWORD *)a3 + 2);
  v23 = a4[a5 - 1];
  if (!v23 || *((_BYTE *)v23 + 16) != 16)
  {
    v25 = (v22 | *(_QWORD *)&v44[0]) & -(v22 | *(_QWORD *)&v44[0]);
    goto LABEL_16;
  }
  v24 = v23 + 3;
  if (*((_DWORD *)v23 + 8) >= 0x41u)
    v24 = (_QWORD *)v23[3];
  v25 = ((*v24 * *(_QWORD *)&v44[0]) | v22) & -((*v24 * *(_QWORD *)&v44[0]) | v22);
  if (*(_BYTE *)(a2 + 1897))
    goto LABEL_11;
  if (!a11 || *(_BYTE *)(a2 + 2892) || !*(_QWORD *)(a2 + 2880))
    goto LABEL_16;
  v32 = sub_22EFFEB40(a11);
  v33 = *v32;
  if (v33 == 188)
  {
    v37 = *((_QWORD *)v32 + 3);
  }
  else
  {
    if (v33 != 161)
      goto LABEL_16;
    v34 = *((_QWORD *)v32 + 2);
    if (!v34 || (*(_DWORD *)(v34 + 28) & 0x7Fu) - 67 < 0xFFFFFFF9)
      goto LABEL_16;
    v35 = *(_QWORD *)(*(_QWORD *)(v34 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (!v35 || *(_BYTE *)(v35 + 16) != 39)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v35 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
        goto LABEL_16;
      v35 = sub_22F10CF48(v35);
      if (!v35)
        goto LABEL_16;
    }
    v36 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(v35 + 32) & 0xFFFFFFFFFFFFFFF0));
    if (!v36 || *(_BYTE *)(v36 + 16) != 45)
      goto LABEL_16;
    v37 = sub_22F114198(*(_QWORD *)(v36 + 24));
  }
  if (!sub_22E4EC2BC(v37))
  {
LABEL_16:
    v40 = *a3;
    v41 = a3[1];
    v42 = a3[2];
    v29 = sub_22E66C868(*(_QWORD *)(a2 + 144) + 280, v14, 0);
    v44[0] = v40;
    v44[1] = v41;
    v44[2] = v42;
    if (a7)
      sub_22E51449C(a2, (uint64_t)v44, a4, a5, v29, v39, 0, a9, (uint64_t)v43, v25, a12);
    else
      sub_22E4EEF7C((uint64_t)v43, (uint64_t *)(a2 + 272), (uint64_t)v44, a4, a5, v29, v25, (uint64_t)a12);
    v30 = v43[1];
    *a3 = v43[0];
    a3[1] = v30;
    a3[2] = v43[2];
    v31 = a3[1];
    *(_OWORD *)a1 = *a3;
    *(_OWORD *)(a1 + 16) = v31;
    result = (__n128)a3[2];
    *(__n128 *)(a1 + 32) = result;
    return result;
  }
LABEL_11:
  if (a10)
  {
    if (*(_BYTE *)(a2 + 2892))
      v38 = 0;
    else
      v38 = *(_QWORD *)(a2 + 2880);
    sub_22F255EDC(v38, *a10, a9);
  }
  if ((*((_BYTE *)a3 + 24) & 3) != 0)
    sub_22F28ABCC(a3, a2);
  PreserveArrayAccessIndex = llvm::IRBuilderBase::CreatePreserveArrayAccessIndex();
  v27 = sub_22E66C868(*(_QWORD *)(a2 + 144) + 280, v14, 0);
  *(_QWORD *)a1 = PreserveArrayAccessIndex;
  *(_QWORD *)(a1 + 8) = v27;
  *(_QWORD *)(a1 + 16) = v25;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

uint64_t sub_22E4EBB74(uint64_t result)
{
  if (!result || *(unsigned __int8 *)(result + 16) - 35 <= 0xFFFFFFFD)
  {
    if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 33 <= 1)
      return sub_22F10CF48(result);
    else
      return 0;
  }
  return result;
}

unint64_t sub_22E4EBBB0(unint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  char v5;
  unint64_t v7;
  int v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[6];
  _BYTE v31[32];
  __int16 v32;
  __int128 v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[6];

  v5 = a2;
  v7 = a2 & 0xFFFFFFFFFFFFFFF8;
  v8 = *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v8 == 17)
    v9 = a2 & 0xFFFFFFFFFFFFFFF8;
  else
    v9 = 0;
  if (v9)
    v10 = a4 == 0;
  else
    v10 = 1;
  if (!v10)
  {
    v18 = llvm::FixedVectorType::get();
    v19 = 0;
    v20 = a1 & 0xFFFFFFFFFFFFFFF8;
    if (a1 > 7)
    {
      v21 = v7;
    }
    else
    {
      v20 = 0;
      v21 = 0;
    }
    *(_QWORD *)&v33 = v20;
    *((_QWORD *)&v33 + 1) = v21;
    if (a1 >= 8)
      v19 = 1 << (v5 & 7 | (8 * (a1 & 7u)));
    v34 = v19;
    v35 = 0;
    v36 = 0;
    v37 = 0;
    v32 = 257;
    sub_22E3BEE6C((uint64_t *)(a3 + 272), &v33, v18, (uint64_t)v31, (uint64_t)v38);
    v16 = v38[0];
    v17 = v38[2];
LABEL_26:
    v22 = v16 & 0xFFFFFFFFFFFFFFF8 | ((__clz(v17) ^ 0x3F) >> 3);
    if (v17)
      v23 = v22;
    else
      v23 = v16;
    if (v16)
      return v23;
    else
      return 0;
  }
  if ((v8 & 0xFE) == 0x12)
    v11 = a2 & 0xFFFFFFFFFFFFFFF8;
  else
    v11 = 0;
  if (v11 && (a4 & 1) == 0)
  {
    v12 = llvm::ArrayType::get(*(llvm::ArrayType **)(v11 + 24), (llvm::Type *)*(unsigned int *)(v11 + 32));
    v13 = 0;
    v14 = a1 & 0xFFFFFFFFFFFFFFF8;
    if (a1 > 7)
    {
      v15 = v7;
    }
    else
    {
      v14 = 0;
      v15 = 0;
    }
    *(_QWORD *)&v25 = v14;
    *((_QWORD *)&v25 + 1) = v15;
    if (a1 >= 8)
      v13 = 1 << (v5 & 7 | (8 * (a1 & 7u)));
    v26 = v13;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v32 = 257;
    sub_22E3BEE6C((uint64_t *)(a3 + 272), &v25, v12, (uint64_t)v31, (uint64_t)v30);
    v16 = v30[0];
    v17 = v30[2];
    goto LABEL_26;
  }
  return a1;
}

uint64_t sub_22E4EBD50@<X0>(llvm::APInt *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unsigned int v8;

  v8 = *((_DWORD *)a1 + 2);
  if (v8 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v7, a1);
  else
    v7 = *(_QWORD *)a1;
  result = llvm::APInt::operator+=();
  v5 = v7;
  v6 = *((_BYTE *)a1 + 12);
  *(_DWORD *)(a2 + 8) = v8;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 12) = v6;
  return result;
}

void sub_22E4EBDC8(_QWORD *a1, uint64_t a2, unsigned __int8 *a3, int *a4, uint64_t a5, llvm::LLVMContext *a6, unint64_t a7, uint64_t a8)
{
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _QWORD v47[3];
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  __int128 v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[6];
  __int128 v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE v66[40];
  uint64_t v67;
  uint64_t v68;
  int v69;
  _BYTE v70[36];
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v15 = sub_22EFFA6B0(a3);
  if (*v15 == 191)
  {
    v44 = a5;
    v45 = (uint64_t)a1;
    v46 = a7;
    sub_22E4E3DF8(v66, a2, v15, a8);
    v16 = *(_QWORD *)&v66[8];
    v17 = *(_QWORD *)&v66[16];
    v18 = *(_QWORD *)&v66[24];
    v19 = *(_DWORD *)&v66[32];
    v20 = *(_DWORD *)&v66[36];
    v21 = v67;
    v22 = v68;
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((unint64_t)a6 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) & 0xFEu)
       - 2 > 3)
    {
      v42 = *(_QWORD *)&v66[8];
      v43 = *(_QWORD *)&v66[16];
      v34 = v68;
      v52 = 2;
      *(_DWORD *)v66 = 0;
      memset(&v66[8], 0, 32);
      v35 = sub_22E62D754(*(_QWORD **)(a2 + 144), v46, &v52, (uint64_t)v66, 0);
      *a4 = v52;
      if (*(_QWORD *)(*(_QWORD *)(a2 + 144) + 264))
      {
        v36 = v45;
        if (*(_DWORD *)v44 == 1 || (v37 = *(_DWORD *)v66, *(_DWORD *)v66 == 1))
        {
          v38 = v35;
          memset(&v70[4], 0, 32);
          v37 = 1;
        }
        else
        {
          v38 = v35;
          *(_OWORD *)v70 = *(_OWORD *)&v66[4];
          *(_OWORD *)&v70[16] = *(_OWORD *)&v66[20];
          *(_DWORD *)&v70[32] = *(_DWORD *)&v66[36];
        }
      }
      else
      {
        v38 = v35;
        v37 = 0;
        memset(&v70[4], 0, 32);
        v36 = v45;
      }
      *(_DWORD *)v44 = v37;
      v39 = *(_OWORD *)&v70[16];
      *(_OWORD *)(v44 + 4) = *(_OWORD *)v70;
      *(_OWORD *)(v44 + 20) = v39;
      *(_DWORD *)(v44 + 36) = *(_DWORD *)&v70[32];
      v47[0] = v42;
      v47[1] = v43;
      v47[2] = v18;
      v48 = v19;
      v49 = v20;
      v50 = v21;
      v51 = v34;
      *(_WORD *)&v70[32] = 257;
      v40 = sub_22E3C2A7C((uint64_t *)(a2 + 272), (uint64_t)v47, (uint64_t)v70);
      v41 = sub_22E66C868(*(_QWORD *)(a2 + 144) + 280, v46, 0);
      *(_QWORD *)v36 = v40;
      *(_QWORD *)(v36 + 8) = v41;
      *(_QWORD *)(v36 + 16) = v38;
      *(_DWORD *)(v36 + 24) = 0;
      *(_QWORD *)(v36 + 32) = 0;
      *(_QWORD *)(v36 + 40) = 0;
    }
    else
    {
      *a4 = v69;
      v23 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a2 + 144) + 280), a6);
      v24 = a2;
      v25 = (uint64_t *)(a2 + 272);
      *(_QWORD *)&v60 = v16;
      *((_QWORD *)&v60 + 1) = v17;
      v61 = v18;
      v62 = v19;
      v63 = v20;
      v64 = v21;
      v65 = v22;
      *(_WORD *)&v70[32] = 257;
      sub_22E3BEE6C(v25, &v60, v23, (uint64_t)v70, (uint64_t)v66);
      v26 = *(_QWORD *)v66;
      v27 = *(_QWORD *)&v66[8];
      v28 = *(_QWORD *)&v66[16];
      v29 = *(_DWORD *)&v66[24];
      v30 = *(_DWORD *)&v66[28];
      v31 = *(_QWORD *)&v66[32];
      v32 = v67;
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((unint64_t)a6 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) != 5)
      {
        v59[0] = *(_QWORD *)v66;
        v59[1] = *(_QWORD *)&v66[8];
        v59[2] = *(_QWORD *)&v66[16];
        v59[3] = *(_QWORD *)&v66[24];
        v59[4] = *(_QWORD *)&v66[32];
        v59[5] = v67;
        *(_QWORD *)v70 = "arraydecay";
        *(_WORD *)&v70[32] = 259;
        sub_22E486A58(v25, (uint64_t)v59, 0, (uint64_t)v70, (uint64_t)v66);
        v26 = *(_QWORD *)v66;
        v27 = *(_QWORD *)&v66[8];
        v28 = *(_QWORD *)&v66[16];
        v29 = *(_DWORD *)&v66[24];
        v30 = *(_DWORD *)&v66[28];
        v31 = *(_QWORD *)&v66[32];
        v32 = v67;
      }
      *(_QWORD *)&v53 = v26;
      *((_QWORD *)&v53 + 1) = v27;
      v54 = v28;
      v55 = v29;
      v56 = v30;
      v57 = v31;
      v58 = v32;
      v33 = sub_22E66C868(*(_QWORD *)(v24 + 144) + 280, v46, 0);
      *(_WORD *)&v66[32] = 257;
      sub_22E3BEE6C(v25, &v53, v33, (uint64_t)v66, v45);
    }
  }
  else
  {
    sub_22E4DFD40(a1, a2);
  }
}

__n128 sub_22E4EC158(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  unint64_t v12;
  uint64_t v13;

  *(_DWORD *)a1 = 3;
  *(_QWORD *)(a1 + 56) = a3;
  v6 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v6 & 8) != 0)
  {
    v8 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = a2[1];
  *(_OWORD *)(a1 + 8) = *a2;
  *(_OWORD *)(a1 + 24) = v9;
  *(_OWORD *)(a1 + 40) = a2[2];
  result = *(__n128 *)a6;
  v11 = *(_OWORD *)(a6 + 16);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)a6;
  v12 = v7 | v8 | (v6 | a4) & 7;
  *(_OWORD *)(a1 + 104) = v11;
  v13 = *(_QWORD *)(a6 + 32);
  *(_QWORD *)(a1 + 64) = a4;
  *(_QWORD *)(a1 + 72) = v12;
  *(_DWORD *)(a1 + 84) = a5;
  *(_BYTE *)(a1 + 80) &= 0x80u;
  *(_QWORD *)(a1 + 120) = v13;
  *(_QWORD *)(a1 + 128) = 0;
  return result;
}

uint64_t sub_22E4EC1DC(unint64_t a1, int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  int v6;
  int v7;

  v3 = sub_22EFC3500(a1);
  v4 = sub_22EFC3B90(v3);
  v5 = 0;
  if (a2 && v4)
  {
    v6 = 0;
    v5 = 0;
LABEL_4:
    v7 = (*(_BYTE *)(v4 + 68) & 1) != 0 && *(_QWORD *)(v4 + 40) == 0;
    v5 += v7;
    ++v6;
    while (1)
    {
      v4 = *(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v4)
        break;
      if ((*(_DWORD *)(v4 + 28) & 0x7Fu) - 49 <= 2)
      {
        if (v6 != a2)
          goto LABEL_4;
        return (a2 - v5);
      }
    }
  }
  return (a2 - v5);
}

uint64_t sub_22E4EC264(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  unint64_t v5;

  if ((*(_BYTE *)(a2 + 29) & 0x80) != 0)
    a2 = sub_22EFB5D7C(a2);
  v4 = 0;
  v5 = a2;
  result = sub_22E46AA2C((uint64_t *)(a1 + 16), &v5, &v4);
  if ((_DWORD)result)
    return *(unsigned int *)(v4 + 8);
  return result;
}

BOOL sub_22E4EC2BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 116)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E4EC31C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 208)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22E4EC37C(uint64_t a1)
{
  uint64_t v1;
  _BOOL8 v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v1 = sub_22F10C2A4(*(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0));
  v2 = v1;
  if (v1)
  {
    if ((*(_DWORD *)(v1 + 28) & 0x7Fu) - 35 > 2)
      return 0;
    if (sub_22E463414(v1))
      return 1;
    v4 = sub_22E46A3A0(v2);
    if (v4 != v5)
    {
      v6 = v4;
      v7 = v5;
      do
      {
        v8 = *(_QWORD *)(**(_QWORD **)(v6 + 16) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v8 + 8) & 0xF) != 0)
          v8 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v6 + 16));
        if ((sub_22E4EC37C(v8 & 0xFFFFFFFFFFFFFFF0) & 1) != 0)
          return 1;
        v6 += 24;
      }
      while (v6 != v7);
    }
    v9 = sub_22EFC3B90(v2);
    if (!v9)
      return 0;
    v10 = v9;
    if ((sub_22E4EC37C(*(_QWORD *)(v9 + 48)) & 1) != 0)
      return 1;
    do
    {
      v10 = *(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF8;
      v2 = v10 != 0;
    }
    while (v10 && ((*(_DWORD *)(v10 + 28) & 0x7Fu) - 49 > 2 || !sub_22E4EC37C(*(_QWORD *)(v10 + 48))));
  }
  return v2;
}

void sub_22E4EC484(__int128 *a1, _QWORD *a2, __int128 *a3, unint64_t a4)
{
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  const char *v23;
  unint64_t v24;
  _DWORD *v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD v30[3];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _OWORD v34[3];
  _BYTE v35[32];
  __int16 v36;
  __int128 v37[2];
  __int128 v38;

  if (sub_22EFC2FDC(a4, *(_QWORD *)(a2[18] + 144)))
  {
    v8 = a3[1];
    v31 = *a3;
    v32 = v8;
    v33 = a3[2];
    v9 = *(_QWORD *)(a2[18] + 144);
    v10 = sub_22F0CBBE4(v9, a4);
    v11 = sub_22EF5CDF0(v9, *(_QWORD *)(*(_QWORD *)(v9 + 16408) & 0xFFFFFFFFFFFFFFF0));
    if (v11 <= v10)
    {
      v27 = a2 + 34;
      v37[0] = v31;
      v37[1] = v32;
      v38 = v33;
      v28 = a2[1];
      v36 = 257;
      v29 = v10 / v11;
      sub_22E3BEE6C(v27, v37, v28, (uint64_t)v35, (uint64_t)&v31);
      v34[0] = v31;
      v34[1] = v32;
      v34[2] = v33;
      v36 = 257;
      sub_22F24D74C(v27, (uint64_t)v34, v29, (uint64_t)v35, (uint64_t)a1);
    }
    else
    {
      v12 = v32;
      *a1 = v31;
      a1[1] = v12;
      a1[2] = v33;
    }
  }
  else
  {
    v13 = *(_QWORD *)(a4 + 16);
    v14 = v13 & 0xFFFFFFFFFFFFFFF8;
    if ((v13 & 4) != 0)
      v14 = *(_QWORD *)v14;
    v15 = (*(_WORD *)(v14 + 8) & 0x7E) - 34;
    if (v14)
      v16 = v14 - 64;
    else
      v16 = 0;
    if (v15 >= 4)
      v17 = 0;
    else
      v17 = v16;
    v18 = sub_22E66DD94(a2[18] + 280, v17);
    v19 = sub_22E4EC264(v18, a4);
    v20 = 0;
    v21 = a3[1];
    v30[0] = *a3;
    v30[1] = v21;
    v30[2] = a3[2];
    v22 = *(_QWORD *)(a4 + 40);
    v23 = "";
    if ((v22 & 7) == 0)
    {
      v24 = v22 & 0xFFFFFFFFFFFFFFF8;
      if (v24)
      {
        v25 = *(_DWORD **)(v24 + 16);
        v26 = *v25;
        v23 = (const char *)(v25 + 4);
        v20 = v26;
      }
    }
    LOWORD(v38) = 261;
    *(_QWORD *)&v37[0] = v23;
    *((_QWORD *)&v37[0] + 1) = v20;
    sub_22E3C408C(a2 + 34, (uint64_t)v30, v19, (uint64_t)v37, (uint64_t)a1);
  }
}

double sub_22E4EC638@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  unint64_t v14;
  _DWORD *v15;
  unsigned int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  double result;
  uint64_t v22;
  _BYTE v23[40];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27[3];
  __int128 v28[3];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _OWORD v32[8];
  uint64_t v33;
  __int128 v34[2];
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  v8 = *(_QWORD *)(a3 + 48);
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
  {
    v9 = *(_OWORD *)(a2 + 24);
    v28[0] = *(_OWORD *)(a2 + 8);
    v28[1] = v9;
    v28[2] = *(_OWORD *)(a2 + 40);
    sub_22E4EC484(&v29, a1, v28, a3);
    v10 = sub_22E66C868(a1[18] + 280, v8, 0);
    v11 = 0;
    v27[0] = v29;
    v27[1] = v30;
    v27[2] = v31;
    v12 = *(_QWORD *)(a3 + 40);
    v13 = "";
    if ((v12 & 7) == 0)
    {
      v14 = v12 & 0xFFFFFFFFFFFFFFF8;
      if (v14)
      {
        v15 = *(_DWORD **)(v14 + 16);
        v16 = *v15;
        v13 = (const char *)(v15 + 4);
        v11 = v16;
      }
    }
    LOWORD(v35) = 261;
    *(_QWORD *)&v34[0] = v13;
    *((_QWORD *)&v34[0] + 1) = v11;
    sub_22E3BEE6C(a1 + 34, v27, v10, (uint64_t)v34, (uint64_t)&v36);
    v30 = v37;
    v31 = v38;
    v29 = v36;
    v24 = v36;
    v25 = v37;
    v26 = v38;
    if (*(_DWORD *)(a2 + 88) == 1)
    {
      *(_DWORD *)v23 = 1;
      memset(&v23[8], 0, 32);
    }
    else
    {
      sub_22E6281E0((_QWORD *)a1[18], v8, (uint64_t)v23);
    }
    v36 = v24;
    v37 = v25;
    v38 = v26;
    v22 = *(_QWORD *)(a1[18] + 144);
    v34[0] = *(_OWORD *)v23;
    v34[1] = *(_OWORD *)&v23[16];
    v35 = *(_QWORD *)&v23[32];
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 32) = 0;
    *(_QWORD *)(a4 + 40) = 0;
    *(_QWORD *)(a4 + 48) = 0;
    *(_QWORD *)(a4 + 64) = 0;
    *(_QWORD *)(a4 + 72) = 0;
    *(_QWORD *)(a4 + 84) = 2;
    *(_DWORD *)a4 = 0;
    *(_OWORD *)(a4 + 96) = 0u;
    *(_OWORD *)(a4 + 112) = 0u;
    *(_QWORD *)&result = sub_22E3C113C(a4, &v36, v8, 0, v34, v22).n128_u64[0];
  }
  else
  {
    v17 = *(_OWORD *)(a2 + 112);
    v32[6] = *(_OWORD *)(a2 + 96);
    v32[7] = v17;
    v33 = *(_QWORD *)(a2 + 128);
    v18 = *(_OWORD *)(a2 + 48);
    v32[2] = *(_OWORD *)(a2 + 32);
    v32[3] = v18;
    v19 = *(_OWORD *)(a2 + 80);
    v32[4] = *(_OWORD *)(a2 + 64);
    v32[5] = v19;
    v20 = *(_OWORD *)(a2 + 16);
    v32[0] = *(_OWORD *)a2;
    v32[1] = v20;
    return sub_22E4DD05C((uint64_t)a1, (uint64_t)v32, a3, a4);
  }
  return result;
}

__n128 sub_22E4EC838(uint64_t a1, _QWORD *a2, _BYTE *a3)
{
  uint64_t v6;
  uint64_t v7;
  __n128 result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __n128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  unsigned __int8 v37;
  _OWORD v38[2];
  uint64_t v39;
  __int128 v40[2];
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;

  v6 = 32;
  if (*a3 == 103)
    v6 = 24;
  v7 = *(_QWORD *)&a3[v6];
  v37 = 0;
  if (!sub_22E61F3B0((uint64_t)a2, v7, &v37, 0))
    goto LABEL_13;
  v9 = 40;
  v10 = 32;
  if (*a3 != 103)
  {
    v10 = 40;
    v9 = 48;
  }
  v11 = *(_QWORD *)&a3[v9];
  v12 = *(_QWORD *)&a3[v10];
  v13 = v37;
  v14 = v37 ? v11 : v12;
  v15 = (unsigned __int8 *)(v37 ? v12 : v11);
  if ((sub_22E61F04C(v14, 0) & 1) == 0)
  {
    if (v13)
      sub_22E3CB7B0(a2, (uint64_t)a3, 0);
    v16 = v15;
    do
    {
      v17 = (uint64_t)v16;
      v18 = *v16;
      if (v18 > 0xD5)
      {
        if (v18 == 233)
        {
          if ((*(_DWORD *)v16 & 0x7C0000) != 0x300000)
            goto LABEL_33;
          v18 = *(_DWORD *)v16;
          v20 = v16 + 16;
        }
        else
        {
          if (v18 != 214)
            break;
          v20 = v16 + 24;
        }
      }
      else if (v18 == 155)
      {
        if ((**((_DWORD **)v16 + 2) & 0x18000) != 0)
          goto LABEL_33;
        v20 = v16 + 24;
        if (!*(_BYTE *)(v17 + 48))
          v20 = (unsigned __int8 *)(v17 + 32);
        v18 = 155;
      }
      else
      {
        if (v18 != 176)
          break;
        v19 = *((unsigned int *)v16 + 5);
        if ((_DWORD)v19 == -1)
          goto LABEL_33;
        v20 = &v16[8 * v19 + 40];
        v18 = 176;
      }
      v16 = *(unsigned __int8 **)v20;
    }
    while (v16 != (unsigned __int8 *)v17);
    if (v18 != 134)
    {
LABEL_33:
      sub_22E4D8D7C((_QWORD *)a1);
      *(_BYTE *)(a1 + 136) = 1;
      return result;
    }
    sub_22F25C5A0(a2, v17, 1);
    v21 = sub_22E66CB04((llvm::Type ***)(a2[18] + 280), *(llvm::LLVMContext **)(v14 + 8));
    llvm::PointerType::get();
    v22 = llvm::UndefValue::get();
    v23 = *(_QWORD *)(v14 + 8);
    sub_22E6281E0((_QWORD *)a2[18], v23, (uint64_t)v38);
    *(_QWORD *)&v42 = v22;
    *((_QWORD *)&v42 + 1) = v21;
    v43 = 1;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v24 = *(_QWORD *)(a2[18] + 144);
    v40[0] = v38[0];
    v40[1] = v38[1];
    v41 = v39;
    *((_QWORD *)&v28 + 1) = 0;
    v29 = 0uLL;
    LODWORD(v30) = 0;
    *((_QWORD *)&v30 + 1) = 0;
    *(_QWORD *)&v31 = 0;
    v32 = 0uLL;
    *(_QWORD *)((char *)&v33 + 4) = 2;
    LODWORD(v28) = 0;
    v35 = 0u;
    v34 = 0u;
    sub_22E3C113C((uint64_t)&v28, &v42, v23, 2, v40, v24);
    v25 = v35;
    *(_OWORD *)(a1 + 96) = v34;
    *(_OWORD *)(a1 + 112) = v25;
    *(_QWORD *)(a1 + 128) = v36;
    v26 = v31;
    *(_OWORD *)(a1 + 32) = v30;
    *(_OWORD *)(a1 + 48) = v26;
    v27 = v33;
    *(_OWORD *)(a1 + 64) = v32;
    *(_OWORD *)(a1 + 80) = v27;
    result = v29;
    *(_OWORD *)a1 = v28;
    *(__n128 *)(a1 + 16) = result;
    *(_BYTE *)(a1 + 136) = 1;
  }
  else
  {
LABEL_13:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 136) = 0;
  }
  return result;
}

_QWORD *sub_22E4ECAD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v13 = a2;
  v14 = 0;
  result = (_QWORD *)sub_22F253E24((uint64_t *)(a1 + 4064), &v13, &v14);
  if (!(_DWORD)result)
    return sub_22E4D8D7C((_QWORD *)a3);
  v6 = v14;
  if (v14 == *(_QWORD *)(a1 + 4064) + 144 * *(unsigned int *)(a1 + 4080))
    return sub_22E4D8D7C((_QWORD *)a3);
  *(_OWORD *)a3 = *(_OWORD *)(v14 + 8);
  v7 = *(_OWORD *)(v6 + 24);
  v8 = *(_OWORD *)(v6 + 40);
  v9 = *(_OWORD *)(v6 + 72);
  *(_OWORD *)(a3 + 48) = *(_OWORD *)(v6 + 56);
  *(_OWORD *)(a3 + 64) = v9;
  *(_OWORD *)(a3 + 16) = v7;
  *(_OWORD *)(a3 + 32) = v8;
  v10 = *(_OWORD *)(v6 + 88);
  v11 = *(_OWORD *)(v6 + 104);
  v12 = *(_OWORD *)(v6 + 120);
  *(_QWORD *)(a3 + 128) = *(_QWORD *)(v6 + 136);
  *(_OWORD *)(a3 + 96) = v11;
  *(_OWORD *)(a3 + 112) = v12;
  *(_OWORD *)(a3 + 80) = v10;
  return result;
}

void sub_22E4ECB90(uint64_t *a1@<X0>, unsigned int *a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X8>)
{
  unsigned __int8 **v8;
  unsigned __int8 *v9;
  __int128 v10;
  int v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  unint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  _OWORD v30[3];
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  _OWORD v40[3];
  uint64_t v41;
  _OWORD v42[3];
  uint64_t v43;
  _OWORD v44[2];
  __n128 v45;
  uint64_t v46;

  v8 = (unsigned __int8 **)((char *)a2 + ((unint64_t)*a2 >> 24));
  v9 = *v8;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)*v8 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                + 16) == 10)
  {
    v10 = a3[1];
    v44[0] = *a3;
    v44[1] = v10;
    v45 = (__n128)a3[2];
    v46 = *((_QWORD *)a3 + 6);
    sub_22F246068((uint64_t)a1, a2, (uint64_t)v44, a4, v45);
    return;
  }
  v11 = *a2;
  switch(v11)
  {
    case 139:
      v39 = *((_QWORD *)a3 + 6);
      v13 = a3[2];
      v37 = a3[1];
      v38 = v13;
      v36 = *a3;
      (*(void (**)(_QWORD, uint64_t *, unsigned int *, __int128 *))(**(_QWORD **)(a1[18] + 816) + 16))(*(_QWORD *)(a1[18] + 816), a1, a2, &v36);
      return;
    case 141:
      v14 = sub_22EFFA604(*v8);
      if (v14 && (*(_DWORD *)(v14 + 28) & 0x7Eu) - 54 <= 3)
      {
        v15 = a3[1];
        v36 = *a3;
        v37 = v15;
        v38 = a3[2];
        v39 = *((_QWORD *)a3 + 6);
        sub_22E4FAABC();
        return;
      }
      break;
    case 140:
      v12 = a3[1];
      v42[0] = *a3;
      v42[1] = v12;
      v42[2] = a3[2];
      v43 = *((_QWORD *)a3 + 6);
      sub_22E4FA808((uint64_t)a1, (uint64_t)a2, (uint64_t)v42, a4);
      return;
  }
  v16 = sub_22EFFA604(v9);
  if (!v16 || (*(_BYTE *)(v16 + 29) & 1) == 0)
    goto LABEL_21;
  v17.n128_f64[0] = sub_22EFC8E88(v16);
  v19 = *(uint64_t **)v18;
  v20 = *(unsigned int *)(v18 + 8);
  v21 = *(uint64_t **)v18;
  if ((_DWORD)v20)
  {
    v22 = 8 * v20;
    v21 = *(uint64_t **)v18;
    while (*(_WORD *)(*v21 + 32) != 336)
    {
      ++v21;
      v22 -= 8;
      if (!v22)
        goto LABEL_21;
    }
  }
  if (v21 != &v19[v20])
  {
    do
    {
      v24 = *v19++;
      v23 = v24;
    }
    while (*(_WORD *)(v24 + 32) != 336);
    v25 = a3[1];
    v40[0] = *a3;
    v40[1] = v25;
    v40[2] = a3[2];
    v41 = *((_QWORD *)a3 + 6);
    sub_22E60C49C((uint64_t)a1, a2, v23, (uint64_t)v40, a4);
  }
  else
  {
LABEL_21:
    sub_22E4ECEB0(a1, *(unsigned __int8 **)((char *)a2 + *((unsigned __int8 *)a2 + 3)), (uint64_t)&v36, v17);
    if ((_QWORD)v36 == 2)
    {
      sub_22E4FA654(a1, *((uint64_t *)&v36 + 1), (uint64_t)a4);
    }
    else if ((_QWORD)v36 == 1)
    {
      v26 = *((_QWORD *)&v36 + 1);
      if (sub_22E462B18(*((uint64_t *)&v36 + 1)))
        sub_22EFC8868(v26);
      v27 = a3[1];
      v32 = *a3;
      v33 = v27;
      v34 = a3[2];
      v35 = *((_QWORD *)a3 + 6);
      sub_22E3D3240();
    }
    else
    {
      v28 = *(_QWORD *)(*(_QWORD *)((char *)a2 + *((unsigned __int8 *)a2 + 3)) + 8);
      v29 = a3[1];
      v30[0] = *a3;
      v30[1] = v29;
      v30[2] = a3[2];
      v31 = *((_QWORD *)a3 + 6);
      sub_22E4ED3C4((uint64_t)a1, v28, (uint64_t)&v36, a2, (uint64_t)v30, 0, a4);
    }
  }
}

void sub_22E4ECEB0(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  unsigned int *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 **v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  BOOL v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  unint64_t v35;
  _OWORD v36[3];
  uint64_t v37[6];

  if (!a2)
    goto LABEL_20;
  do
  {
LABEL_2:
    v6 = (unsigned int *)a2;
    LODWORD(v7) = *a2;
    if (v7 > 0xD5)
    {
      if ((_DWORD)v7 == 233)
      {
        LODWORD(v7) = *(_DWORD *)a2;
        if ((*(_DWORD *)a2 & 0x7C0000) != 0x300000)
          goto LABEL_67;
        v8 = a2 + 16;
      }
      else
      {
        if ((_DWORD)v7 != 214)
          break;
        v8 = a2 + 24;
      }
    }
    else if ((_DWORD)v7 == 155)
    {
      if ((**((_DWORD **)a2 + 2) & 0x18000) != 0)
        goto LABEL_67;
      v8 = a2 + 24;
      if (!a2[48])
        v8 = a2 + 32;
      LOBYTE(v7) = -101;
    }
    else
    {
      if ((_DWORD)v7 != 176)
        break;
      v7 = *((unsigned int *)a2 + 5);
      if ((_DWORD)v7 == -1)
        goto LABEL_67;
      v8 = &a2[8 * v7 + 40];
      LOBYTE(v7) = -80;
    }
    a2 = *(unsigned __int8 **)v8;
  }
  while (*(unsigned int **)v8 != v6);
  if (v7 <= 0xA0u)
  {
    if (v7 == 153)
    {
      while (1)
      {
        v10 = (*v6 >> 18) & 0x7F;
        if (v10 != 13 && v10 != 64)
          break;
        v9 = (unsigned __int8 **)(v6 + 4);
LABEL_25:
        a2 = *v9;
        if (*v9)
          goto LABEL_2;
LABEL_20:
        v6 = 0;
      }
      if (v10 == 4
        && ((v12 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v6 + 2) + 8) & 0xFFFFFFFFFFFFFFF0)) != 0
         && *(_BYTE *)(v12 + 16) == 39
         || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39
         && (v12 = sub_22F10CF48(v12)) != 0))
      {
        sub_22E5DED80((uint64_t)a1, (unsigned __int8 *)v6, (uint64_t *)&v31, a4);
        v13 = *(_QWORD *)(v12 + 32);
        v14 = sub_22EFFA604((unsigned __int8 *)v6);
        if (v14)
        {
          if ((*(_DWORD *)(v14 + 28) & 0x7Fu) - 60 >= 7)
            v15 = 0;
          else
            v15 = v14;
        }
        else
        {
          v15 = 0;
        }
        v18 = *(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0);
        if (v18)
          v19 = *(_BYTE *)(v18 + 16) == 26;
        else
          v19 = 0;
        if (!v19)
        {
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
            v18 = sub_22F10CF48(v18);
          else
            v18 = 0;
        }
        *(_QWORD *)a3 = v31;
        *(_QWORD *)(a3 + 8) = v18;
        *(_QWORD *)(a3 + 16) = v15;
        *(_QWORD *)(a3 + 24) = 0;
        *(_OWORD *)(a3 + 32) = v32;
        return;
      }
      goto LABEL_67;
    }
    if (v7 == 129)
    {
      *(_QWORD *)a3 = 2;
      *(_QWORD *)(a3 + 8) = v6;
      return;
    }
  }
  else
  {
    switch(v7)
    {
      case 0xE2u:
        v9 = (unsigned __int8 **)(v6 + 6);
        goto LABEL_25;
      case 0xA1u:
        v11 = *((_QWORD *)v6 + 2);
        if (v11 && (*(_DWORD *)(v11 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
          goto LABEL_45;
        goto LABEL_67;
      case 0xBCu:
        v11 = *((_QWORD *)v6 + 3);
        if (v11 && (*(_DWORD *)(v11 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
        {
          sub_22E4D89CC(a1);
LABEL_45:
          if (sub_22E462B18(v11))
            v11 = v11 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(v11) + 96) & 0x80) == 0);
          sub_22E4EDEB0((uint64_t)a1, v11, 0, a3);
          return;
        }
LABEL_67:
        v22 = *((_QWORD *)v6 + 1);
        v23 = *(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF0);
        if (v23 && *(_BYTE *)(v23 + 16) == 39)
          goto LABEL_69;
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v23 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
        {
          v23 = sub_22F10CF48(*(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF0));
          if (v23)
          {
LABEL_69:
            v31 = a1;
            *(_QWORD *)&v32 = a1 + 34;
            BYTE8(v32) = 0;
            *(_QWORD *)&v33 = *(_QWORD *)(a1[18] + 232);
            v24 = sub_22E50E974(&v31, v6, a4);
            v22 = *(_QWORD *)(v23 + 32);
LABEL_74:
            v25 = sub_22EFFA604((unsigned __int8 *)v6);
            if (v25)
            {
              if ((*(_DWORD *)(v25 + 28) & 0x7Fu) - 60 >= 7)
                v26 = 0;
              else
                v26 = v25;
            }
            else
            {
              v26 = 0;
            }
            v27 = *(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF0);
            if (v27)
              v28 = *(_BYTE *)(v27 + 16) == 26;
            else
              v28 = 0;
            if (!v28)
            {
              if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v27 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
                v27 = sub_22F10CF48(*(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF0));
              else
                v27 = 0;
            }
            v29 = sub_22F289B84(a1[18], v22);
            *(_QWORD *)a3 = v24;
            *(_QWORD *)(a3 + 8) = v27;
            *(_QWORD *)(a3 + 16) = v26;
            *(_QWORD *)(a3 + 24) = 0;
            *(_QWORD *)(a3 + 32) = v29;
            *(_QWORD *)(a3 + 40) = v30;
            return;
          }
          v22 = *((_QWORD *)v6 + 1);
        }
        sub_22E4D8D7C(&v31);
        v36[0] = v32;
        v36[1] = v33;
        v36[2] = v34;
        sub_22E5E0440((uint64_t)a1, (uint64_t)v36, v35, v37);
        v24 = v37[0];
        goto LABEL_74;
    }
  }
  if ((v7 + 113) < 0xFBu)
    goto LABEL_67;
  v16 = sub_22EFFA8F0((uint64_t)v6);
  if (v16 == 1262)
  {
    if ((*(_BYTE *)(*(_QWORD *)(a1[18] + 184) + 1348) & 3) != 0)
      goto LABEL_67;
LABEL_51:
    v17 = (uint64_t *)((char *)&v6[2 * (((unint64_t)*v6 >> 18) & 1)] + ((unint64_t)*v6 >> 24));
    sub_22E4EE2DC(a3, a1, v17[1], v17[2], v17[3], a4);
    return;
  }
  if (v16 == 1261)
  {
    v21 = (_QWORD *)((char *)&v6[2 * (((unint64_t)*v6 >> 18) & 1)] + ((unint64_t)*v6 >> 24));
    if (!sub_22F260C28(a1[18], *(_QWORD *)(v21[1] + 8), v21[4], v21[5]))
      goto LABEL_67;
    goto LABEL_51;
  }
  if (v16 != 1259)
    goto LABEL_67;
  v20 = (_QWORD *)((char *)&v6[2 * (((unint64_t)*v6 >> 18) & 1)] + ((unint64_t)*v6 >> 24));
  if (!sub_22F260C28(a1[18], *(_QWORD *)(v20[1] + 8), v20[2], v20[3]))
    goto LABEL_67;
  sub_22E4ECEB0(a1, *(_QWORD *)((char *)&v6[2 * (((unint64_t)*v6 >> 18) & 1) + 2] + ((unint64_t)*v6 >> 24)));
  if (*(_QWORD *)a3 >= 4uLL)
  {
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
  }
}

void sub_22E4ED3C4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  llvm::Type **v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  unint64_t v36;
  unsigned __int8 **v37;
  uint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  _BOOL8 v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  llvm::MDString *v57;
  uint64_t v58;
  uint64_t v59;
  llvm::Type **v60;
  uint64_t Declaration;
  uint64_t v62;
  llvm::Type **v63;
  uint64_t v64;
  int v65;
  _BOOL4 v66;
  uint64_t v67;
  unint64_t v68;
  llvm::Type **v69;
  unint64_t v70;
  void **v71;
  uint64_t v72;
  llvm::Type *v73;
  llvm::Type *v74;
  uint64_t v75;
  llvm::LLVMContext *v76;
  uint64_t v77;
  uint64_t v78;
  __int16 v79;
  uint64_t *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  llvm::Type *v85;
  __int16 v86;
  uint64_t v87;
  uint64_t *v88;
  void *v89;
  int v90;
  uint64_t v91;
  uint64_t *v92;
  _QWORD *v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v98;
  _OWORD v99[3];
  uint64_t v100;
  _QWORD v101[3];
  int v102;
  uint64_t v103;
  uint64_t v104;
  _OWORD v105[5];
  uint64_t v106;
  llvm::Type **v107;
  uint64_t v108;
  __int16 v109;
  void *v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  _BYTE v116[192];
  void *v117;
  uint64_t v118;
  _BYTE v119[16];
  void *v120;
  uint64_t v121;
  _QWORD v122[5];
  llvm::Type **v123;
  __int128 v124;
  __int16 v125;
  char v126;
  __int16 v127;
  uint64_t v128;
  uint64_t v129;

  v129 = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
  v11 = *(_QWORD *)(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0) + 32);
  v12 = *(_OWORD *)(a3 + 16);
  v105[0] = *(_OWORD *)a3;
  v105[1] = v12;
  v13 = *(_OWORD *)(a3 + 64);
  v14 = *(_OWORD *)(a3 + 32);
  v105[3] = *(_OWORD *)(a3 + 48);
  v105[4] = v13;
  v15 = *(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFFFF8;
  v106 = *(_QWORD *)(a3 + 80);
  v105[2] = v14;
  v16 = *(_QWORD **)(a1 + 144);
  v98 = v15;
  if ((*(_BYTE *)(v16[19] + 1) & 1) != 0 && (*(_BYTE *)(a1 + 1866) & 0x40) != 0)
  {
    v17 = a2;
    if (!v15 || (*(_DWORD *)(v15 + 28) & 0x7Eu) - 52 >= 6)
    {
      v18 = sub_22E699F3C(v16);
      v19 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 152))(v18, *(_QWORD *)(a1 + 144));
      if (v19)
      {
        v71 = (void **)v19;
        v95 = v10 | v17 & 7;
        *(_BYTE *)(a1 + 1880) = 1;
        v72 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
        LODWORD(v110) = 0;
        v111 = 0u;
        v112 = 0u;
        v113 = 0;
        v73 = (llvm::Type *)sub_22EF5F294(v72, v11, (__int128 *)&v110);
        v94 = sub_22F29C578(*(_QWORD *)(a1 + 144), v73, 1);
        v75 = *(_QWORD *)(a1 + 24);
        v110 = *v71;
        v74 = (llvm::Type *)v110;
        *(_QWORD *)&v111 = v75;
        v76 = (llvm::LLVMContext *)llvm::StructType::get();
        v77 = llvm::PointerType::get();
        WORD4(v112) = 257;
        v92 = (uint64_t *)sub_22E3C1740((uint64_t *)(a1 + 272), 49, *(uint64_t *)&v105[0], v77, (uint64_t)&v110);
        WORD4(v112) = 257;
        v78 = sub_22F24F7D0(a1 + 272, v76, v92, 0, 0, (uint64_t)&v110);
        v79 = (63 - __clz(*(unsigned __int8 *)(a1 + 128))) | 0x100;
        WORD4(v112) = 257;
        v80 = (uint64_t *)sub_22E3C3200((uint64_t *)(a1 + 272), v74, v78, v79, 0, (uint64_t)&v110);
        WORD4(v112) = 257;
        v81 = sub_22E3C18F4(a1 + 272, 32, v80, (uint64_t)v71, (uint64_t)&v110);
        v110 = "cont";
        WORD4(v112) = 259;
        v93 = (_QWORD *)operator new();
        llvm::BasicBlock::BasicBlock();
        v110 = "typecheck";
        WORD4(v112) = 259;
        v82 = (_QWORD *)operator new();
        llvm::BasicBlock::BasicBlock();
        v83 = llvm::User::operator new((llvm::User *)0x40);
        MEMORY[0x23489C09C](v83, v82, v93, v81, 0);
        WORD4(v112) = 257;
        sub_22E3C12C8((uint64_t *)(a1 + 272), v83, (uint64_t)&v110);
        sub_22E5ED9B4((_QWORD *)a1, v82, 0);
        WORD4(v112) = 257;
        v84 = sub_22F24F7D0(a1 + 272, v76, v92, 0, 1, (uint64_t)&v110);
        v85 = *(llvm::Type **)(a1 + 24);
        v86 = (63 - __clz(*(unsigned __int8 *)(a1 + 130))) | 0x100;
        WORD4(v112) = 257;
        v87 = sub_22E3C3200((uint64_t *)(a1 + 272), v85, v84, v86, 0, (uint64_t)&v110);
        v88 = (uint64_t *)sub_22F2975BC(a1, *(uint64_t *)&v105[0], v87);
        WORD4(v112) = 257;
        v89 = (void *)sub_22E3C18F4(a1 + 272, 32, v88, v94, (uint64_t)&v110);
        sub_22EFFAE7C(a4);
        v107 = (llvm::Type **)sub_22E4DE978(a1, v90);
        v108 = (uint64_t)sub_22F25E758(a1, v95);
        v110 = v89;
        v111 = xmmword_22F457640;
        v123 = *(llvm::Type ***)&v105[0];
        *(_QWORD *)&v124 = v88;
        *((_QWORD *)&v124 + 1) = v94;
        sub_22E4DEC4C((_QWORD *)a1, (uint64_t)&v110, 1, 6u, (uint64_t)&v107, 2, &v123, 3);
        v91 = llvm::User::operator new((llvm::User *)0x40);
        llvm::BranchInst::BranchInst();
        WORD4(v112) = 257;
        v15 = v98;
        sub_22E3C12C8((uint64_t *)(a1 + 272), v91, (uint64_t)&v110);
        sub_22E5ED9B4((_QWORD *)a1, v93, 0);
        *(_BYTE *)(a1 + 1880) = 0;
      }
    }
  }
  v20 = *(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(a1 + 1869) & 0x40) != 0 && (!v15 || (*(_DWORD *)(v15 + 28) & 0x7Eu) - 52 >= 6))
  {
    *(_BYTE *)(a1 + 1880) = 1;
    sub_22F298290((void **)a1);
    v55 = *(_QWORD *)(a1 + 144);
    if ((*(_BYTE *)(*(_QWORD *)(v55 + 184) + 36) & 2) != 0)
      v56 = sub_22E62BF98(v55, v20 & 0xFFFFFFFFFFFFFFF0);
    else
      v56 = sub_22E6371C0(v55, v20 & 0xFFFFFFFFFFFFFFF0, v55 + 3552, "", 0);
    v57 = (llvm::MDString *)v56;
    v58 = llvm::MetadataAsValue::get();
    v59 = *(_QWORD *)(a1 + 96);
    WORD4(v112) = 257;
    v60 = (llvm::Type **)sub_22E3C1740((uint64_t *)(a1 + 272), 49, *(uint64_t *)&v105[0], v59, (uint64_t)&v110);
    Declaration = llvm::Intrinsic::getDeclaration();
    v62 = 0;
    if (Declaration)
      v62 = *(_QWORD *)(Declaration + 24);
    v123 = v60;
    *(_QWORD *)&v124 = v58;
    WORD4(v112) = 257;
    v63 = (llvm::Type **)sub_22E462B78((uint64_t *)(a1 + 272), v62, Declaration, (uint64_t)&v123, 2, (uint64_t)&v110, 0);
    v64 = sub_22E62A49C(*(_QWORD *)(a1 + 144), v57);
    v110 = 0;
    v111 = 0uLL;
    v110 = (void *)llvm::ConstantInt::get();
    sub_22EFFAE7C(a4);
    *(_QWORD *)&v111 = sub_22E4DE978(a1, v65);
    *((_QWORD *)&v111 + 1) = sub_22F25E758(a1, v20 & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 184) + 35) & 0x80) != 0 && v64)
    {
      sub_22F25FBF0((_QWORD *)a1, 0x400000000000, 0, (uint64_t)v63, v64, (uint64_t)v60);
    }
    else
    {
      v123 = v63;
      v124 = xmmword_22F457620;
      v107 = v60;
      v108 = llvm::UndefValue::get();
      sub_22E4DEC4C((_QWORD *)a1, (uint64_t)&v123, 1, 2u, (uint64_t)&v110, 3, &v107, 2);
    }
    *(_BYTE *)(a1 + 1880) = 0;
  }
  v110 = (char *)&v111 + 8;
  *(_QWORD *)&v111 = 0x800000000;
  v114 = v116;
  v115 = 0x100000000;
  v117 = v119;
  v118 = 0x100000000;
  v120 = v122;
  v121 = 0x200000000;
  v122[4] = 0;
  if (a6)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 96);
    v109 = 257;
    v22 = (llvm::Type **)sub_22E3C1740((uint64_t *)(a1 + 272), 49, a6, v21, (uint64_t)&v107);
    v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144) + 16816);
    v123 = v22;
    *(_QWORD *)&v124 = 0;
    v126 = 0;
    v127 = 0;
    v128 = v23;
    v24 = sub_22E3C187C((uint64_t)&v110, (unint64_t)&v123, 1);
    v25 = (char *)v110 + 152 * v111;
    v26 = *(_OWORD *)(v24 + 16);
    *(_OWORD *)v25 = *(_OWORD *)v24;
    *((_OWORD *)v25 + 1) = v26;
    v27 = *(_QWORD *)(v24 + 144);
    v28 = *(_OWORD *)(v24 + 128);
    v29 = *(_OWORD *)(v24 + 96);
    *((_OWORD *)v25 + 7) = *(_OWORD *)(v24 + 112);
    *((_OWORD *)v25 + 8) = v28;
    *((_QWORD *)v25 + 18) = v27;
    *((_OWORD *)v25 + 6) = v29;
    v30 = *(_OWORD *)(v24 + 80);
    v31 = *(_OWORD *)(v24 + 32);
    v32 = *(_OWORD *)(v24 + 48);
    *((_OWORD *)v25 + 4) = *(_OWORD *)(v24 + 64);
    *((_OWORD *)v25 + 5) = v30;
    *((_OWORD *)v25 + 2) = v31;
    *((_OWORD *)v25 + 3) = v32;
    LODWORD(v111) = v111 + 1;
  }
  if (*(unsigned __int8 *)a4 == 141)
  {
    v33 = *a4;
    v34 = a4[1] & 0x3F;
    if (v34 > 0x28)
      goto LABEL_58;
    if (((1 << v34) & 0x33FC8000) != 0)
    {
      v35 = 2;
      goto LABEL_19;
    }
    if (((1 << v34) & 0x1980C000000) != 0)
      v35 = 1;
    else
LABEL_58:
      v35 = 0;
  }
  else
  {
    v35 = 0;
    v33 = *a4;
  }
LABEL_19:
  if (*(_BYTE *)(v20 + 16) == 26)
    v36 = v20 & 0xFFFFFFFFFFFFFFFBLL;
  else
    v36 = 0;
  v37 = (unsigned __int8 **)((char *)a4 + ((unint64_t)v33 >> 24));
  v38 = (uint64_t)&v37[((v33 >> 18) & 1) + 1];
  v39 = (unint64_t *)(v38 + 8 * a4[4]);
  v40 = sub_22EFFA604(*v37);
  if (v40)
  {
    if ((*(_DWORD *)(v40 + 28) & 0x7Eu) - 52 >= 6)
      v41 = 0;
    else
      v41 = v40;
  }
  else
  {
    v41 = 0;
  }
  sub_22E477B1C(a1, (uint64_t)&v110, v36, v38, v39, v41, 0, v35);
  v44 = sub_22E46D9A0(*(_QWORD *)(a1 + 144) + 280, *(_QWORD **)(*(_QWORD *)(a1 + 144) + 280), (unsigned int *)&v110, v20, a6 != 0, a6 != 0, v42, v43);
  if (a6 || *(_BYTE *)(v20 + 16) == 25)
  {
    sub_22E46F2EC(*(_QWORD *)(a1 + 144) + 280, v44);
    v45 = llvm::PointerType::get();
    v123 = (llvm::Type **)"callee.knr.cast";
    v125 = 259;
    *(_QWORD *)&v105[0] = sub_22E3C1740((uint64_t *)(a1 + 272), 49, *(uint64_t *)&v105[0], v45, (uint64_t)&v123);
  }
  v46 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 152);
  if ((*(_BYTE *)(v46 + 68) & 0x40) != 0
    && (*(_WORD *)(v46 + 96) & 0x80) == 0
    && *(unsigned __int8 *)a4 == 139
    && (!v98 || (*(_DWORD *)(v98 + 28) & 0x7Eu) - 52 >= 6))
  {
    v47 = llvm::PointerType::get();
    v125 = 257;
    v48 = sub_22E3C1740((uint64_t *)(a1 + 272), 49, *(uint64_t *)&v105[0], v47, (uint64_t)&v123);
    v49 = **(_QWORD **)&v105[0];
    v50 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 144) + 130);
    v101[0] = v48;
    v101[1] = v49;
    v101[2] = v50;
    v102 = 0;
    v103 = 0;
    v104 = 0;
    v125 = 257;
    *(_QWORD *)&v105[0] = sub_22E3C2A7C((uint64_t *)(a1 + 272), (uint64_t)v101, (uint64_t)&v123);
  }
  v107 = 0;
  v51 = *(_OWORD *)(a5 + 16);
  v99[0] = *(_OWORD *)a5;
  v99[1] = v51;
  v99[2] = *(_OWORD *)(a5 + 32);
  v100 = *(_QWORD *)(a5 + 48);
  v52 = *(_QWORD *)(a1 + 1904) == (_QWORD)a4;
  sub_22EFF605C((uint64_t)a4);
  sub_22E47A004(a7, a1, v44, v105, v99, &v110, &v107, v52, v53, 0);
  if (!*(_BYTE *)(a1 + 2892))
  {
    v54 = *(_QWORD *)(a1 + 2880);
    if (v54)
    {
      if (v98 && (*(_DWORD *)(v98 + 28) & 0x7Eu) - 52 <= 5)
      {
        v123 = (llvm::Type **)&v124 + 1;
        *(_QWORD *)&v124 = 0x1000000000;
        v66 = sub_22E462B18(v98);
        v67 = v98;
        if (v66)
          v67 = v98 | ((*(_WORD *)(sub_22EFC8868(v98) + 96) & 0x80) == 0);
        v68 = sub_22E61E37C(a1, v67, 0, (uint64_t)&v123);
        v69 = v107;
        v70 = sub_22F2568F8(v54, v98, v68, (uint64_t *)&v123);
        sub_22E49B804(v54, (uint64_t)v69, v70, v98);
        if (v123 != (llvm::Type **)((char *)&v124 + 8))
          free(v123);
      }
    }
  }
  if (v120 != v122)
    free(v120);
  if (v117 != v119)
    free(v117);
  if (v114 != v116)
    free(v114);
  if (v110 != (char *)&v111 + 8)
    free(v110);
}

void sub_22E4EDEB0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v8;
  int v9;
  int v10;
  unint64_t v11;
  llvm::Value *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  const char *v18;
  uint64_t v19;
  unsigned int v20;
  const void *Name;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  size_t v25;
  unint64_t v26;
  llvm::GlobalValue *v27;
  uint64_t v28;
  uint64_t Function;
  uint64_t v30;
  uint64_t AddressSpace;
  _QWORD v32[4];
  __int16 v33;
  void *__p[2];
  char v35;

  v8 = a2 & 0xFFFFFFFFFFFFFFF8;
  v9 = sub_22EFC01DC(a2 & 0xFFFFFFFFFFFFFFF8, 0);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)(v8 + 40) & 0xFFFFFFFFFFFFFFF8;
    if ((*(_QWORD *)(v8 + 40) & 7) != 0 || v11 == 0)
    {
      v19 = 0;
      v18 = "";
    }
    else
    {
      v17 = *(_DWORD **)(v11 + 16);
      v20 = *v17;
      v18 = (const char *)(v17 + 4);
      v19 = v20;
    }
    v33 = 773;
    v32[0] = v18;
    v32[1] = v19;
    v32[2] = ".inline";
    llvm::Twine::str((llvm::Twine *)v32);
    Name = (const void *)llvm::Value::getName(*(llvm::Value **)(a1 + 1624));
    v23 = v22;
    if (v35 >= 0)
      v24 = __p;
    else
      v24 = (void **)__p[0];
    if (v35 >= 0)
      v25 = v35 & 0x7F;
    else
      v25 = (size_t)__p[1];
    if (v23 != v25 || v25 && memcmp(Name, v24, v25))
    {
      if (!v8)
      {
LABEL_27:
        v27 = (llvm::GlobalValue *)sub_22F28A8C0(*(uint64_t **)(a1 + 144), a2, a3, 0);
        v28 = *((_QWORD *)v27 + 5);
        Function = llvm::Module::getFunction();
        if (!Function)
        {
          v30 = *((_QWORD *)v27 + 3);
          AddressSpace = llvm::GlobalValue::getAddressSpace(v27);
          v33 = 260;
          v32[0] = __p;
          Function = llvm::User::operator new((llvm::User *)0x78);
          MEMORY[0x23489F6FC](Function, v30, 7, AddressSpace, v32, v28);
          llvm::Function::addFnAttr();
        }
        *(_QWORD *)a4 = Function;
        *(_QWORD *)(a4 + 8) = 0;
        *(_QWORD *)(a4 + 16) = a2;
        *(_QWORD *)(a4 + 24) = a3;
        *(_DWORD *)(a4 + 32) = 0;
        *(_QWORD *)(a4 + 40) = 0;
        goto LABEL_31;
      }
      v26 = v8;
      while (sub_22EFC0170(v26))
      {
        if ((*(_BYTE *)(v26 + 104) & 3) == 0)
        {
          v26 = sub_22E3CD31C((uint64_t *)(v26 + 104), v26);
          if (v26)
            continue;
        }
        goto LABEL_27;
      }
    }
    *(_QWORD *)a4 = 1;
    *(_QWORD *)(a4 + 8) = v8;
    *(_DWORD *)(a4 + 16) = v10;
LABEL_31:
    if (v35 < 0)
      operator delete(__p[0]);
    return;
  }
  v13 = (llvm::Value *)sub_22E4E9988(*(_QWORD *)(a1 + 144), a2, a3, 0);
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 152);
  if ((*(_BYTE *)(v14 + 68) & 0x20) != 0 && (*(_WORD *)(v14 + 96) & 0x80) == 0 && sub_22E462B18(v8))
  {
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 816);
    v16 = llvm::Value::stripPointerCasts(v13);
    v13 = (llvm::Value *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 64))(v15, v16);
  }
  *(_QWORD *)a4 = v13;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = a2;
  *(_QWORD *)(a4 + 24) = a3;
  *(_DWORD *)(a4 + 32) = 0;
  *(_QWORD *)(a4 + 40) = 0;
}

uint64_t sub_22E4EE114(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v5 = 0;
  v6 = 0;
  LODWORD(v7) = 0;
  sub_22F00554C(a2, (uint64_t)&v5, a1, 0, 0);
  v2 = (uint64_t *)&v8;
  if (v9 >= 0x41)
    v2 = v8;
  v3 = *v2;
  if (v7 >= 2)
    sub_22EF53BC0(&v7);
  return v3;
}

uint64_t sub_22E4EE1BC(uint64_t result)
{
  if (result && *(_BYTE *)(result + 16) == 39)
    return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                    + 8) & 0xFFFFFFFFFFFFFFF0)
                                            + 16)
         - 25 < 2;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
    return 0;
  result = sub_22F10CF48(result);
  if (result)
    return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                    + 8) & 0xFFFFFFFFFFFFFFF0)
                                            + 16)
         - 25 < 2;
  return result;
}

uint64_t sub_22E4EE230(uint64_t result)
{
  int v1;
  int v2;

  if (result)
  {
    v1 = *(_DWORD *)(result + 16);
    if ((v1 & 0xFE) == 0x28)
      goto LABEL_8;
  }
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
    return 0;
  result = sub_22F10CF48(result);
  if (result)
  {
    v1 = *(_DWORD *)(result + 16);
LABEL_8:
    if ((v1 & 0x100000) != 0)
    {
      do
      {
        result = *(_QWORD *)(*(_QWORD *)(result + 32) & 0xFFFFFFFFFFFFFFF0);
        if (result)
        {
          v2 = *(_DWORD *)(result + 16);
          if ((v2 & 0xFE) == 0x28)
            continue;
        }
        result = sub_22F10CF48(result);
        v2 = *(_DWORD *)(result + 16);
      }
      while ((v2 & 0x100000) != 0);
    }
    return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                    + 8) & 0xFFFFFFFFFFFFFFF0)
                                            + 16)
         - 25 < 2;
  }
  return result;
}

uint64_t sub_22E4EE2DC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  uint64_t *v11;
  uint64_t v12;
  int v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  BOOL v19;
  uint64_t *v20;
  uint64_t *v21;
  char v22;
  uint64_t v23;
  __int16 v24;

  v11 = a2 + 34;
  v20 = a2;
  v21 = a2 + 34;
  v22 = 0;
  v23 = *(_QWORD *)(a2[18] + 232);
  v12 = sub_22E50E974(&v20, a3, a6);
  v13 = sub_22E4EE114(*(_QWORD *)(a2[18] + 144), a4);
  v20 = a2;
  v21 = v11;
  v22 = 0;
  v23 = *(_QWORD *)(a2[18] + 232);
  v15 = sub_22E50E974(&v20, a5, v14);
  if (*(_BYTE *)(*(_QWORD *)v15 + 8) == 15)
  {
    v16 = a2[11];
    v24 = 257;
    v15 = sub_22E3C1740(v11, 47, v15, v16, (uint64_t)&v20);
  }
  v17 = *(_QWORD *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v17 || *(_BYTE *)(v17 + 16) != 39)
    v17 = sub_22F10CF48(v17);
  result = *(_QWORD *)(*(_QWORD *)(v17 + 32) & 0xFFFFFFFFFFFFFFF0);
  if (result)
    v19 = *(_BYTE *)(result + 16) == 26;
  else
    v19 = 0;
  if (!v19)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
      result = sub_22F10CF48(result);
    else
      result = 0;
  }
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = (16 * v13) | 3;
  *(_QWORD *)(a1 + 40) = v15;
  return result;
}

double sub_22E4EE438(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  _BYTE v13[32];
  __int16 v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  v6 = sub_22F29A81C(*(_QWORD *)(a2 + 144), *(_QWORD *)(a3 + 24));
  v8 = v6 & 0xFFFFFFFFFFFFFFF8;
  if (v6 <= 7)
    v8 = 0;
  v9 = v7 & 0xFFFFFFFFFFFFFFF8;
  if (v6 <= 7)
    v9 = 0;
  *(_QWORD *)&v15 = v8;
  *((_QWORD *)&v15 + 1) = v9;
  v10 = 1 << (v7 & 7 | (8 * (v6 & 7)));
  if (v6 < 8)
    v10 = 0;
  v16 = v10;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v11 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a2 + 144) + 280), *(llvm::LLVMContext **)(a3 + 8));
  v14 = 257;
  *(_QWORD *)&result = sub_22E3BEE6C((uint64_t *)(a2 + 272), &v15, v11, (uint64_t)v13, a1).n128_u64[0];
  return result;
}

uint64_t sub_22E4EE4E8@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  __int128 v9;
  uint64_t v10;
  uint64_t result;
  __int128 v12;
  int v13;
  uint64_t v14;
  _BYTE v15[48];
  _BYTE v16[64];
  __int128 v17;
  _BYTE v18[48];
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25[2];
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v9 = a2[1];
  v22 = *a2;
  v23 = v9;
  v24 = a2[2];
  sub_22E6281E0(*(_QWORD **)(a1 + 144), a3, (uint64_t)v20);
  v27 = v22;
  v28 = v23;
  v29 = v24;
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
  v25[0] = v20[0];
  v25[1] = v20[1];
  v26 = v21;
  memset(&v16[8], 0, 28);
  *(_QWORD *)&v16[40] = 0;
  *(_QWORD *)&v16[48] = 0;
  v17 = 0uLL;
  *(_QWORD *)&v18[4] = 2;
  *(_DWORD *)v16 = 0;
  memset(&v18[16], 0, 32);
  sub_22E3C113C((uint64_t)v16, &v27, a3, 0, v25, v10);
  result = sub_22E619D68(a3);
  if ((_DWORD)result)
  {
    if ((_DWORD)result == 2)
    {
      v12 = *(_OWORD *)&v16[24];
      *(_OWORD *)a5 = *(_OWORD *)&v16[8];
      *(_OWORD *)(a5 + 16) = v12;
      *(_OWORD *)(a5 + 32) = *(_OWORD *)&v16[40];
      v13 = *(_BYTE *)(a5 + 48) & 0xF8 | (BYTE8(v17) >> 2) & 1 | 4;
    }
    else
    {
      v33 = *(_OWORD *)&v18[16];
      v34 = *(_OWORD *)&v18[32];
      v35 = v19;
      v29 = *(_OWORD *)&v16[32];
      v30 = *(_OWORD *)&v16[48];
      v31 = v17;
      v32 = *(_OWORD *)v18;
      v27 = *(_OWORD *)v16;
      v28 = *(_OWORD *)&v16[16];
      *(_QWORD *)&v22 = a1;
      *((_QWORD *)&v22 + 1) = a1 + 272;
      LOWORD(v23) = 0;
      result = sub_22E5027E0((uint64_t)&v22, (uint64_t)&v27, a4);
      LOBYTE(v13) = *(_BYTE *)(a5 + 48);
      *(_QWORD *)a5 = result;
      *(_QWORD *)(a5 + 8) = v14;
      LOBYTE(v13) = v13 & 0xF8 | 2;
    }
  }
  else
  {
    *(_QWORD *)v15 = *(_QWORD *)&v16[8];
    *(_OWORD *)&v15[8] = *(_OWORD *)&v16[16];
    *(_OWORD *)&v15[24] = *(_OWORD *)&v16[32];
    *(_QWORD *)&v15[40] = *(_QWORD *)&v16[48];
    v22 = *(_OWORD *)&v18[8];
    v23 = *(_OWORD *)&v18[24];
    *(_QWORD *)&v24 = *(_QWORD *)&v18[40];
    v27 = *(_OWORD *)v15;
    v28 = *(_OWORD *)&v15[16];
    v29 = *(_OWORD *)&v15[32];
    result = sub_22E4E6994(a1, (uint64_t)&v27, (DWORD2(v17) >> 2) & 1, v17, a4, *(int *)&v18[4], (uint64_t)&v22, (v18[0] >> 6) & 1);
    LOBYTE(v13) = *(_BYTE *)(a5 + 48);
    *(_QWORD *)a5 = result;
    *(_QWORD *)(a5 + 8) = 0;
    LOBYTE(v13) = v13 & 0xF8;
  }
  *(_BYTE *)(a5 + 48) = v13;
  return result;
}

void sub_22E4EE6C8(uint64_t a1@<X0>, unsigned int *a2@<X1>, int a3@<W2>, __int128 *a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  unsigned int v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  char *v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  _OWORD *v43;
  uint64_t v44;
  _OWORD v45[4];
  _OWORD v46[4];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  _OWORD v56[4];
  __int128 v57;
  uint64_t v58;
  _OWORD v59[2];
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  _BYTE v64[136];
  uint64_t v65;
  __int128 v66[2];
  uint64_t v67;
  char *v68;
  uint64_t v69;
  _QWORD v70[15];

  v70[12] = *MEMORY[0x24BDAC8D0];
  v68 = (char *)v70;
  v69 = 0x400000000;
  v9 = *a2;
  if (v9 >> 26)
    v10 = *(_QWORD *)((char *)a2 + ((v9 >> 23) & 0x1F8) + 16);
  else
    v10 = 0;
  *(_QWORD *)(a5 + 136) = 0;
  v11 = (_OWORD *)(a5 + 136);
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_DWORD *)(a5 + 32) = 0;
  *(_QWORD *)(a5 + 24) = 0;
  *(_QWORD *)(a5 + 40) = 0;
  *(_QWORD *)(a5 + 48) = 0;
  *(_QWORD *)(a5 + 64) = 0;
  *(_QWORD *)(a5 + 72) = 0;
  *(_QWORD *)(a5 + 84) = 2;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_QWORD *)(a5 + 144) = 0;
  *(_BYTE *)(a5 + 184) &= 0xF9u;
  v12 = (v9 >> 18);
  if (8 * v12 != 8)
  {
    v13 = (uint64_t *)(a2 + 6);
    v44 = a1 + 4064;
    v43 = a4 + 1;
    v14 = 8 * v12 - 8;
    do
    {
      v15 = *v13;
      if (*(unsigned __int8 *)*v13 == 210)
      {
        if ((*(_BYTE *)(v15 + 2) & 4) == 0)
        {
          *(_QWORD *)&v57 = 0;
          v58 = 0;
          if (v15 == v10)
          {
            if ((*(_BYTE *)(v10 + 1) & 3) != 0
              || (a3 & 1) != 0
              || sub_22E619D68(*(_QWORD *)(v10 + 8)) != 2)
            {
              sub_22F253B0C(a1, v10, *(_QWORD *)(v10 + 16), (uint64_t)v64);
              v57 = *(_OWORD *)v64;
              v58 = *(_QWORD *)&v64[16];
              if (a3)
              {
                sub_22E4D8D7C((_QWORD *)a5);
              }
              else
              {
                v32 = a4[1];
                v46[0] = *a4;
                v46[1] = v32;
                v33 = a4[3];
                v46[2] = a4[2];
                v46[3] = v33;
                sub_22E4D79C0(v64, a1, v10, v46, 0);
                v34 = *(_OWORD *)&v64[16];
                *v11 = *(_OWORD *)v64;
                *(_OWORD *)(a5 + 152) = v34;
                *(_OWORD *)(a5 + 168) = *(_OWORD *)&v64[32];
                *(_BYTE *)(a5 + 184) = v64[48];
              }
            }
            else
            {
              v16 = *(_QWORD *)(v10 + 16);
              v17 = a4[1];
              v56[0] = *a4;
              v56[1] = v17;
              v18 = a4[3];
              v56[2] = a4[2];
              v56[3] = v18;
              sub_22E4EF100(a1, v16, v56);
              v19 = a4[1];
              v61 = *a4;
              v62 = v19;
              v63 = a4[2];
              v42 = *(_QWORD *)(v10 + 8);
              sub_22E6281E0(*(_QWORD **)(a1 + 144), v42, (uint64_t)v59);
              *(_OWORD *)v64 = v61;
              *(_OWORD *)&v64[16] = v62;
              *(_OWORD *)&v64[32] = v63;
              v20 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
              v66[0] = v59[0];
              v66[1] = v59[1];
              v67 = v60;
              v48 = 0uLL;
              *((_QWORD *)&v47 + 1) = 0;
              LODWORD(v49) = 0;
              *((_QWORD *)&v49 + 1) = 0;
              *(_QWORD *)&v50 = 0;
              v51 = 0uLL;
              *(_QWORD *)((char *)&v52 + 4) = 2;
              LODWORD(v47) = 0;
              v53 = 0u;
              v54 = 0u;
              sub_22E3C113C((uint64_t)&v47, (__int128 *)v64, v42, 0, v66, v20);
              *(_QWORD *)v64 = v10;
              *(_OWORD *)&v64[104] = v53;
              *(_OWORD *)&v64[120] = v54;
              v65 = v55;
              *(_OWORD *)&v64[40] = v49;
              *(_OWORD *)&v64[56] = v50;
              *(_OWORD *)&v64[72] = v51;
              *(_OWORD *)&v64[88] = v52;
              *(_OWORD *)&v64[8] = v47;
              *(_OWORD *)&v64[24] = v48;
              sub_22F253D5C(v44, v64, (uint64_t)&v64[8], (uint64_t)&v61);
              *(_QWORD *)&v57 = v10;
              BYTE8(v57) = 1;
              v58 = 0;
              v21 = *(_QWORD *)a4;
              if (*(_QWORD *)a4)
              {
                v22 = *((_QWORD *)a4 + 1);
                v23 = v43[1];
                *(_OWORD *)v64 = *v43;
                *(_OWORD *)&v64[16] = v23;
                v24 = v41 & 0xFFFFFFF8 | (*((unsigned __int8 *)a4 + 48) >> 2) & 1 | 4;
              }
              else
              {
                v22 = 0;
                v24 = v41 & 0xFFFFFFF8;
              }
              *(_QWORD *)(a5 + 136) = v21;
              *(_QWORD *)(a5 + 144) = v22;
              v35 = *(_OWORD *)&v64[16];
              *(_OWORD *)(a5 + 152) = *(_OWORD *)v64;
              *(_OWORD *)(a5 + 168) = v35;
              v41 = v24;
              *(_BYTE *)(a5 + 184) = v24;
            }
          }
          else
          {
            sub_22F253B0C(a1, v15, *(_QWORD *)(v15 + 16), (uint64_t)v64);
            v57 = *(_OWORD *)v64;
            v58 = *(_QWORD *)&v64[16];
          }
          v36 = sub_22E4EF088((uint64_t)&v68, (unint64_t)&v57, 1);
          v37 = &v68[24 * v69];
          v38 = *(_OWORD *)v36;
          *((_QWORD *)v37 + 2) = *(_QWORD *)(v36 + 16);
          *(_OWORD *)v37 = v38;
          LODWORD(v69) = v69 + 1;
        }
      }
      else if (v15 == v10)
      {
        if (a3)
        {
          sub_22E4D8D7C(v64);
          v25 = *(_OWORD *)&v64[112];
          *(_OWORD *)(a5 + 96) = *(_OWORD *)&v64[96];
          *(_OWORD *)(a5 + 112) = v25;
          *(_QWORD *)(a5 + 128) = *(_QWORD *)&v64[128];
          v26 = *(_OWORD *)&v64[48];
          *(_OWORD *)(a5 + 32) = *(_OWORD *)&v64[32];
          *(_OWORD *)(a5 + 48) = v26;
          v27 = *(_OWORD *)&v64[80];
          *(_OWORD *)(a5 + 64) = *(_OWORD *)&v64[64];
          *(_OWORD *)(a5 + 80) = v27;
          v28 = *(_OWORD *)&v64[16];
          *(_OWORD *)a5 = *(_OWORD *)v64;
          *(_OWORD *)(a5 + 16) = v28;
        }
        else
        {
          v29 = a4[1];
          v45[0] = *a4;
          v45[1] = v29;
          v30 = a4[3];
          v45[2] = a4[2];
          v45[3] = v30;
          sub_22E4D79C0(v64, a1, v10, v45, 0);
          v31 = *(_OWORD *)&v64[16];
          *v11 = *(_OWORD *)v64;
          *(_OWORD *)(a5 + 152) = v31;
          *(_OWORD *)(a5 + 168) = *(_OWORD *)&v64[32];
          *(_BYTE *)(a5 + 184) = v64[48];
        }
      }
      else
      {
        sub_22E4D89CC(a1);
      }
      ++v13;
      v14 -= 8;
    }
    while (v14);
    if ((_DWORD)v69)
    {
      v39 = 0;
      v40 = 24 * v69;
      do
      {
        sub_22F254324((uint64_t)&v68[v39], a1);
        v39 += 24;
      }
      while (v40 != v39);
    }
  }
  if (v68 != (char *)v70)
    free(v68);
}

uint64_t *sub_22E4EEB90(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = a1[1];
  if (v3)
  {
    sub_22E3CB840(v2, v3, a1[2]);
  }
  else
  {
    *(_QWORD *)(v2 + 48) = 0;
    *(_QWORD *)(v2 + 56) = 0;
  }
  v4 = *a1;
  v7 = a1[3];
  if (v7)
  {
    llvm::MetadataTracking::track();
    v5 = v7;
  }
  else
  {
    v5 = 0;
  }
  sub_22E3CF21C(v4, 0, v5);
  if (v7)
    llvm::MetadataTracking::untrack();
  if (a1[3])
    llvm::MetadataTracking::untrack();
  return a1;
}

llvm::APFloatBase *sub_22E4EEC3C(llvm::APFloatBase *a1, uint64_t a2)
{
  if (llvm::APFloatBase::PPCDoubleDouble(a1) == a2)
    llvm::detail::DoubleAPFloat::DoubleAPFloat();
  else
    llvm::detail::IEEEFloat::IEEEFloat();
  return a1;
}

uint64_t *sub_22E4EEC9C(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) == v2)
    sub_22E463170((llvm::APFloatBase *)(a1 + 1));
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)a1);
  return a1;
}

uint64_t sub_22E4EECE4(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  BOOL v5;
  unint64_t v6;

  if ((a1 & 8) != 0)
    v1 = *(_DWORD *)((a1 & 0xFFFFFFFFFFFFFFF0) + 0x18);
  else
    v1 = 0;
  if (((v1 | a1) & 5) != 1)
    return 0;
  v2 = *(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0);
  result = 1;
  if (!v2 || *(_BYTE *)(v2 + 16) != 45)
    return result;
  v4 = sub_22F114198(*(_QWORD *)(v2 + 24));
  if (v4)
    v5 = (*(_DWORD *)(v4 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD;
  else
    v5 = 0;
  if (!v5)
    return 1;
  v6 = v4;
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v4 + 104) + 96), *(_QWORD *)(v4 + 104));
  if ((**(_QWORD **)(v6 + 128) & 0x80000) != 0)
    return 0;
  result = sub_22EFD12A8(v6);
  if ((_DWORD)result)
  {
    result = sub_22E49F698(v6);
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

llvm::APInt *sub_22E4EEDA4(llvm::APInt *this, unsigned int a2, unsigned int a3)
{
  unint64_t v3;

  if (a2 != a3)
  {
    if (a2 > 0x3F || a3 > 0x40)
    {
      return (llvm::APInt *)llvm::APInt::setBitsSlowCase(this);
    }
    else
    {
      v3 = 0xFFFFFFFFFFFFFFFFLL >> (a2 - a3) << a2;
      if (*((_DWORD *)this + 2) > 0x40u)
        **(_QWORD **)this |= v3;
      else
        *(_QWORD *)this |= v3;
    }
  }
  return this;
}

_QWORD *sub_22E4EEE00(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F2612F0(a1, (uint64_t)v4, (uint64_t)v4 + 16 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

_QWORD *sub_22E4EEEC0(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F261544(a1, v4, (_QWORD *)v4 + 2 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = 0;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22E4EEF7C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t a5, unint64_t a6, unint64_t a7, uint64_t a8)
{
  __int128 v16;
  uint64_t *v17;
  uint64_t result;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD v25[3];

  v16 = *(_OWORD *)(a3 + 16);
  v25[0] = *(_OWORD *)a3;
  v25[1] = v16;
  v25[2] = *(_OWORD *)(a3 + 32);
  if ((BYTE8(v16) & 3) != 0)
    v17 = (uint64_t *)sub_22F28ABCC(v25, a2[17]);
  else
    v17 = *(uint64_t **)&v25[0];
  result = sub_22E42F314(a2, *(_QWORD *)(a3 + 8), v17, a4, a5, a8);
  v19 = __clz(a7) ^ 0x3F;
  v20 = result & 0xFFFFFFFFFFFFFFF8 | (v19 >> 3);
  v21 = a6 & 0xFFFFFFFFFFFFFFF8 | v19 & 7;
  if (!a7)
  {
    v21 = a6;
    v20 = result;
  }
  v22 = v20 & 0xFFFFFFFFFFFFFFF8;
  if (v20 <= 7)
    v22 = 0;
  v23 = v21 & 0xFFFFFFFFFFFFFFF8;
  if (v20 <= 7)
    v23 = 0;
  *(_QWORD *)a1 = v22;
  *(_QWORD *)(a1 + 8) = v23;
  v24 = 1 << (v21 & 7 | (8 * (v20 & 7)));
  if (v20 < 8)
    v24 = 0;
  *(_QWORD *)(a1 + 16) = v24;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

unint64_t sub_22E4EF088(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v8;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v6 = *(_QWORD *)a1 + 24 * v4;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
  }
  return v3;
}

_QWORD *sub_22E4EF100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::LLVMContext *v12;
  __int128 v13;
  __int128 v14;
  BOOL v15;
  int v16;
  __int128 v18;
  uint64_t v19;
  llvm::LLVMContext *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  BOOL v26;
  _OWORD v27[2];
  __int128 v28;
  __int128 v29[3];

  if ((*(_BYTE *)(a3 + 56) & 4) == 0 && (*(_BYTE *)(a3 + 48) & 4) == 0)
  {
    if (*(_QWORD *)a3)
    {
      v6 = *(_QWORD *)(a1 + 144);
      if ((*(_BYTE *)(*(_QWORD *)(v6 + 152) + 1) & 1) == 0
        || (v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22EF5BA38(*(_QWORD *)(v6 + 144), *(_QWORD *)(a2 + 8)) & 0xFFFFFFFFFFFFFFF0)
                                       + 8) & 0xFFFFFFFFFFFFFFF0)) == 0
        || *(_BYTE *)(v9 + 16) != 45
        || (v10 = sub_22F114198(*(_QWORD *)(v9 + 24)),
            sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v10 + 104) + 96), *(_QWORD *)(v10 + 104)),
            (**(_DWORD **)(v10 + 128) & 1) == 0))
      {
        v7 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
        v8 = *(_QWORD *)(a2 + 8);
        if ((*(_BYTE *)(a3 + 56) & 0x10) != 0)
          sub_22EF5CC54(v7, v8, &v21);
        else
          sub_22EF5CCD0(v7, *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v21);
        v11 = v21;
        if ((uint64_t)v21 >= 17 && v11 >= 4 * sub_22E4EFA94((unsigned __int8 *)a2, a1))
        {
          llvm::Type::getInt64Ty(*(llvm::Type **)(a1 + 336), v12);
          llvm::ConstantInt::get();
          v18 = *(_OWORD *)(a3 + 16);
          v21 = *(_OWORD *)a3;
          v22 = v18;
          v23 = *(_OWORD *)(a3 + 32);
          v29[0] = v21;
          v29[1] = v18;
          v29[2] = v23;
          v19 = *(_QWORD *)(a1 + 8);
          LOWORD(v28) = 257;
          sub_22E3BEE6C((uint64_t *)(a1 + 272), v29, v19, (uint64_t)v27, (uint64_t)&v21);
          v27[0] = v21;
          v27[1] = v22;
          v28 = v23;
          llvm::Type::getInt8Ty(*(llvm::Type **)(a1 + 336), v20);
          llvm::ConstantInt::get();
          sub_22F2483D8(a1 + 272, v27);
          *(_BYTE *)(a3 + 56) |= 4u;
        }
      }
    }
  }
  v13 = *(_OWORD *)(a3 + 16);
  v22 = *(_OWORD *)a3;
  v23 = v13;
  v14 = *(_OWORD *)(a3 + 48);
  v24 = *(_OWORD *)(a3 + 32);
  v25 = v14;
  v15 = *(_QWORD *)a3 == 0;
  *(_QWORD *)&v21 = a1;
  *((_QWORD *)&v21 + 1) = a1 + 272;
  v26 = v15;
  *(_QWORD *)&v29[0] = 0;
  *((_QWORD *)&v29[0] + 1) = a1;
  sub_22EFF605C(a2);
  sub_22E48EE24((uint64_t *)v29, v16, 0);
  sub_22E4F0158(&v21, (unsigned __int8 *)a2);
  return sub_22E48F084(v29);
}

_QWORD *sub_22E4EF304(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v7[2];

  v4 = *a1;
  v7[0] = 0;
  v7[1] = v4;
  sub_22EFF605C(a2);
  sub_22E48EE24(v7, v5, 0);
  sub_22E4F0158(a1, a2);
  return sub_22E48F084(v7);
}

BOOL sub_22E4EF360(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = sub_22E4EF458(a2);
  if (result)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                  + 16) == 45)
    {
      v5 = *(_QWORD *)(a2 + 16);
      v6 = v5 & 0xFFFFFFFFFFFFFFF8;
      if ((v5 & 4) != 0)
        v6 = *(_QWORD *)v6;
      v7 = (*(_WORD *)(v6 + 8) & 0x7E) - 34;
      if (v6)
        v8 = v6 - 64;
      else
        v8 = 0;
      if (v7 >= 4)
        v9 = 0;
      else
        v9 = v8;
      v10 = sub_22F0C975C(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), v9);
      v11 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * sub_22EFC306C(a2));
      v12 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0))+ v11;
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
      v14 = **(_QWORD **)(v10 + 72);
      return v12 > sub_22EF5CDF0(v13, *(_QWORD *)(*(_QWORD *)(v13 + 16408) & 0xFFFFFFFFFFFFFFF0)) * v14;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL sub_22E4EF458(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 241)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

unint64_t sub_22E4EF4B8(_QWORD *a1, __int128 *a2, __int128 *a3, unint64_t a4, int a5, uint64_t a6)
{
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t result;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t (*v27)(void);
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  llvm::LLVMContext *v37;
  llvm::Instruction *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(void);
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t *v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD v60[2];
  uint64_t v61;
  _OWORD v62[2];
  uint64_t v63;
  _OWORD v64[2];
  uint64_t v65;
  _OWORD v66[3];
  _OWORD v67[3];
  _OWORD v68[3];
  _OWORD v69[15];
  __int128 v70[3];
  _QWORD v71[4];
  __int16 v72;
  __int128 v73[3];
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;

  v12 = *(__int128 *)((char *)a2 + 24);
  v116 = *(__int128 *)((char *)a2 + 8);
  v117 = v12;
  v118 = *(__int128 *)((char *)a2 + 40);
  v13 = *(__int128 *)((char *)a3 + 24);
  v113 = *(__int128 *)((char *)a3 + 8);
  v114 = v13;
  v115 = *(__int128 *)((char *)a3 + 40);
  v14 = *(_QWORD *)(a1[18] + 152);
  if ((*(_BYTE *)(v14 + 1) & 1) != 0)
  {
    v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v15)
    {
      if (*(_BYTE *)(v15 + 16) == 45)
      {
        v16 = sub_22F114198(*(_QWORD *)(v15 + 24));
        result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v16 + 104) + 96), *(_QWORD *)(v16 + 104));
        if ((**(_QWORD **)(v16 + 128) & 0x200) != 0)
          return result;
        v14 = *(_QWORD *)(a1[18] + 152);
      }
    }
  }
  if ((*(_WORD *)(v14 + 96) & 0x80) != 0)
  {
    if (sub_22F1151E0(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0)))
    {
      v18 = sub_22E699F3C((_QWORD *)a1[18]);
      v19 = a2[7];
      v110 = a2[6];
      v111 = v19;
      v112 = *((_QWORD *)a2 + 16);
      v20 = a2[3];
      v106 = a2[2];
      v107 = v20;
      v21 = a2[4];
      v109 = a2[5];
      v108 = v21;
      v22 = *a2;
      v105 = a2[1];
      v104 = v22;
      v23 = a3[2];
      v98 = a3[3];
      v97 = v23;
      v103 = *((_QWORD *)a3 + 16);
      v24 = a3[6];
      v102 = a3[7];
      v101 = v24;
      v25 = a3[5];
      v99 = a3[4];
      v100 = v25;
      v26 = a3[1];
      v95 = *a3;
      v96 = v26;
      v27 = *(uint64_t (**)(void))(*(_QWORD *)v18 + 320);
    }
    else
    {
      if (!sub_22F115220(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0)))
        goto LABEL_12;
      v28 = sub_22E699F3C((_QWORD *)a1[18]);
      v29 = a2[7];
      v92 = a2[6];
      v93 = v29;
      v94 = *((_QWORD *)a2 + 16);
      v30 = a2[3];
      v88 = a2[2];
      v89 = v30;
      v31 = a2[5];
      v90 = a2[4];
      v91 = v31;
      v32 = a2[1];
      v86 = *a2;
      v87 = v32;
      v33 = a3[3];
      v79 = a3[2];
      v80 = v33;
      v85 = *((_QWORD *)a3 + 16);
      v34 = a3[7];
      v83 = a3[6];
      v84 = v34;
      v35 = a3[5];
      v81 = a3[4];
      v82 = v35;
      v36 = a3[1];
      v77 = *a3;
      v78 = v36;
      v27 = *(uint64_t (**)(void))(*(_QWORD *)v28 + 328);
    }
    result = v27();
    if ((result & 1) != 0)
      return result;
  }
LABEL_12:
  if (a5)
    sub_22EF5CC54(*(_QWORD *)(a1[18] + 144), a4, &v74);
  else
    sub_22EF5CCD0(*(_QWORD *)(a1[18] + 144), *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v74);
  if ((_QWORD)v74
    || (v37 = (llvm::LLVMContext *)sub_22EF5C728(*(_QWORD *)(a1[18] + 144), a4)) == 0
    || *((_BYTE *)v37 + 16) != 5
    || (v71[0] = 0,
        v38 = sub_22E620E9C((uint64_t)a1, v37, v71, (uint64_t)&v116),
        sub_22EF5CCD0(*(_QWORD *)(a1[18] + 144), *(_QWORD *)(v71[0] & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v74),
        v39 = llvm::ConstantInt::get(),
        LOWORD(v76) = 257,
        (v40 = (uint64_t)sub_22E3BDEA8((uint64_t)(a1 + 34), (uint64_t)v38, v39, (uint64_t)&v74, 1, 0)) == 0))
  {
    v40 = llvm::ConstantInt::get();
  }
  v73[0] = v116;
  v73[1] = v117;
  v73[2] = v118;
  v41 = a1[1];
  v72 = 257;
  sub_22E3BEE6C(a1 + 34, v73, v41, (uint64_t)v71, (uint64_t)&v74);
  v116 = v74;
  v117 = v75;
  v118 = v76;
  v70[0] = v113;
  v70[1] = v114;
  v70[2] = v115;
  v42 = a1[1];
  LOWORD(v76) = 257;
  sub_22E3BEE6C(a1 + 34, v70, v42, (uint64_t)&v74, (uint64_t)&v113);
  v43 = a1[18];
  if ((*(_BYTE *)(*(_QWORD *)(v43 + 152) + 246) & 6) != 0)
  {
    v44 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v45 = *(unsigned __int8 *)(v44 + 16);
    if (v44 && v45 == 45)
    {
      if ((*(_BYTE *)(sub_22F114198(*(_QWORD *)(v44 + 24)) + 75) & 2) != 0)
      {
        v46 = a1[18];
        v47 = *(_QWORD *)(v46 + 784);
        if (!v47)
        {
          sub_22F298C2C((_QWORD *)a1[18]);
          v47 = *(_QWORD *)(v46 + 784);
        }
        v69[12] = v116;
        v69[13] = v117;
        v69[14] = v118;
        v69[9] = v113;
        v69[10] = v114;
        v69[11] = v115;
        v48 = *(uint64_t (**)(void))(*(_QWORD *)v47 + 352);
        return v48();
      }
    }
    else if ((v45 & 0xFEu) - 2 <= 3)
    {
      v49 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22EF5BA38(*(_QWORD *)(v43 + 144), a4) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v49)
      {
        if (*(_BYTE *)(v49 + 16) == 45 && (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v49 + 24)) + 75) & 2) != 0)
        {
          v58 = a1[18];
          v59 = *(_QWORD *)(v58 + 784);
          if (!v59)
          {
            sub_22F298C2C((_QWORD *)a1[18]);
            v59 = *(_QWORD *)(v58 + 784);
          }
          v69[6] = v116;
          v69[7] = v117;
          v69[8] = v118;
          v69[3] = v113;
          v69[4] = v114;
          v69[5] = v115;
          v48 = *(uint64_t (**)(void))(*(_QWORD *)v59 + 352);
          return v48();
        }
      }
    }
  }
  v50 = *((_DWORD *)a2 + 18);
  v51 = *((_DWORD *)a3 + 18);
  if ((((unsigned __int16)v50 | (unsigned __int16)v51) & 0x600) != 0)
  {
    v57 = *(_QWORD *)(a1[18] + 800);
    v69[0] = v116;
    v69[1] = v117;
    v69[2] = v118;
    v68[0] = v113;
    v68[1] = v114;
    v68[2] = v115;
    return (*(uint64_t (**)(uint64_t, _QWORD *, _OWORD *, _QWORD, _OWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v57 + 104))(v57, a1, v69, (v50 >> 9) & 3, v68, (v51 >> 9) & 3, v40, a6);
  }
  else
  {
    v67[0] = v116;
    v67[1] = v117;
    v67[2] = v118;
    v66[0] = v113;
    v66[1] = v114;
    v66[2] = v115;
    v52 = sub_22E3E4F38((uint64_t)(a1 + 34), v67, v66);
    v53 = *(uint64_t **)(a1[18] + 264);
    if (v53 && sub_22E66B658(v53, a4))
      llvm::Instruction::setMetadata();
    result = a1[18];
    if ((*(_BYTE *)(*(_QWORD *)(result + 184) + 34) & 0x20) != 0)
    {
      v54 = *(__int128 *)((char *)a2 + 104);
      v64[0] = *(__int128 *)((char *)a2 + 88);
      v64[1] = v54;
      v65 = *((_QWORD *)a2 + 15);
      v55 = *(__int128 *)((char *)a3 + 104);
      v62[0] = *(__int128 *)((char *)a3 + 88);
      v62[1] = v55;
      v63 = *((_QWORD *)a3 + 15);
      sub_22F29957C(result, (uint64_t)v64, (uint64_t)v62, (uint64_t)&v74);
      v56 = a1[18];
      v60[0] = v74;
      v60[1] = v75;
      v61 = v76;
      return sub_22E6282B8(v56, v52, (uint64_t)v60);
    }
  }
  return result;
}

uint64_t sub_22E4EFA94(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  _QWORD v23[3];

  if (*a1 == 186)
  {
    v3 = *((_QWORD *)a1 + 2);
    a1 = (unsigned __int8 *)(v3 & 0xFFFFFFFFFFFFFFF8);
    if ((v3 & 4) != 0)
      a1 = (unsigned __int8 *)*((_QWORD *)a1 + 5);
  }
  v4 = sub_22EFFF40C(a1, *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144));
  if ((sub_22E4EFD40(v4, a2) & 1) != 0)
    return 0;
  if (*v4 != 180)
    goto LABEL_19;
  v6 = v4;
  while (sub_22EFFD7E8((uint64_t)v6))
  {
    v6 = (unsigned __int8 *)**((_QWORD **)v6 + 2);
    if (*v6 != 180)
      goto LABEL_19;
  }
  if ((sub_22E66DE5C(*(_QWORD *)(a2 + 144) + 280, *((_QWORD *)v6 + 1)) & 1) == 0)
  {
LABEL_19:
    sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 144), *(_QWORD *)(*((_QWORD *)v4 + 1) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v23);
    return v23[0];
  }
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v4 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v7 && *(_BYTE *)(v7 + 16) == 45 && !sub_22F10E06C(v7))
  {
    v12 = sub_22F114198(*(_QWORD *)(v7 + 24));
    v13 = v12;
    if (v12)
      v14 = (*(_DWORD *)(v12 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD;
    else
      v14 = 0;
    if (v14
      && (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v12 + 104) + 96), *(_QWORD *)(v12 + 104)),
          *(_DWORD *)(*(_QWORD *)(v13 + 128) + 16)))
    {
      v15 = 0;
      v5 = 0;
      do
      {
        v16 = v15 + 1;
        v5 += sub_22E4EFA94(*(_QWORD *)(*((_QWORD *)v6 + 2) + 8 * v15), a2);
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v13 + 104) + 96), *(_QWORD *)(v13 + 104));
        v15 = v16;
      }
      while (v16 != *(_DWORD *)(*(_QWORD *)(v13 + 128) + 16));
    }
    else
    {
      v5 = 0;
      v16 = 0;
    }
    v17 = sub_22EFC3B90(v13);
    if (v17)
    {
      v18 = v17;
LABEL_33:
      v19 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                               + 16);
      if (v19 != 4)
      {
        v20 = *((_QWORD *)v6 + 2);
        if (v16 != ((unint64_t)(*((_QWORD *)v6 + 3) - v20) >> 3))
        {
          if ((*(_BYTE *)(v18 + 68) & 1) == 0 || *(_QWORD *)(v18 + 40))
          {
            v21 = v16 + 1;
            if ((v19 & 0xFE) == 0x28)
            {
              v22 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 152) + *(_QWORD *)(**(_QWORD **)(a2 + 152) - 24));
              v5 += v22
                  / sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 144) + 16408) & 0xFFFFFFFFFFFFFFF0));
            }
            else
            {
              v5 += sub_22E4EFA94(*(_QWORD *)(v20 + 8 * v16), a2);
            }
            v16 = v21;
          }
          while (1)
          {
            v18 = *(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8;
            if (!v18)
              break;
            if ((*(_DWORD *)(v18 + 28) & 0x7Fu) - 49 <= 2)
              goto LABEL_33;
          }
        }
      }
    }
  }
  else
  {
    v8 = *((_QWORD *)v6 + 3) - *((_QWORD *)v6 + 2);
    if ((v8 & 0x7FFFFFFF8) == 0)
      return 0;
    v9 = 0;
    v5 = 0;
    v10 = (v8 >> 3);
    do
      v5 += sub_22E4EFA94(*(_QWORD *)(*((_QWORD *)v6 + 2) + 8 * v9++), a2);
    while (v10 != v9);
  }
  return v5;
}

uint64_t sub_22E4EFD40(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  llvm::APFloatBase *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD **v10;
  _BOOL8 v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v19;
  _BOOL8 v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD v23[3];

  v23[2] = *MEMORY[0x24BDAC8D0];
  do
  {
    v3 = (unint64_t)a1;
    LODWORD(v4) = *a1;
    if (v4 > 0xD5)
    {
      if ((_DWORD)v4 == 233)
      {
        LODWORD(v4) = *(_DWORD *)a1;
        if ((*(_DWORD *)a1 & 0x7C0000) != 0x300000)
          break;
        v5 = a1 + 16;
      }
      else
      {
        if ((_DWORD)v4 != 214)
          break;
        v5 = a1 + 24;
      }
    }
    else if ((_DWORD)v4 == 155)
    {
      if ((**((_DWORD **)a1 + 2) & 0x18000) != 0)
        return 0;
      v5 = a1 + 24;
      if (!a1[48])
        v5 = a1 + 32;
      LOBYTE(v4) = -101;
    }
    else
    {
      if ((_DWORD)v4 != 176)
        break;
      v4 = *((unsigned int *)a1 + 5);
      if ((_DWORD)v4 == -1)
        return 0;
      v5 = &a1[8 * v4 + 40];
      LOBYTE(v4) = -80;
    }
    a1 = *(unsigned __int8 **)v5;
  }
  while (*(_QWORD *)v5 != v3);
  if ((v4 + 102) >= 0xF5u)
    __asm { BR              X11 }
  if (v4 > 0xB2u)
  {
    if (v4 != 179)
    {
      if (v4 == 181)
      {
        sub_22F257F94(v3 + 16, (llvm::APInt *)&v21);
        v19 = v22;
        if (v22 >= 0x41)
        {
          if (v19 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v21) > 0x40)
          {
            v20 = 0;
            v11 = 0;
            if (!v21)
              return v11;
          }
          else
          {
            v20 = *v21 == 0;
          }
          MEMORY[0x2348A0E84](v21, 0x1000C8000313F17);
          return v20;
        }
        return v21 == 0;
      }
LABEL_31:
      if ((v4 + 102) >= 0xF5u)
      {
        if ((*(_DWORD *)v3 & 0x1FC0000) == 0x380000
          && sub_22E66DE5C(*(_QWORD *)(a2 + 144) + 280, *(_QWORD *)(v3 + 8)))
        {
          return sub_22F0005B0(v3, *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144), 1, v13, v14, v15, v16, v17) ^ 1;
        }
      }
      else if (v4 == 154)
      {
        return *(_DWORD *)(v3 + 16) == 0;
      }
      return 0;
    }
LABEL_27:
    if ((sub_22E66DE5C(*(_QWORD *)(a2 + 144) + 280, *(_QWORD *)(v3 + 8)) & 1) != 0)
      return 1;
    LOBYTE(v4) = *(_BYTE *)v3;
    goto LABEL_31;
  }
  if (v4 == 131)
    goto LABEL_27;
  if (v4 != 170)
    goto LABEL_31;
  v6 = llvm::APFloatBase::EnumToSemantics();
  v7 = (llvm::APFloatBase *)sub_22E4F00CC(v3 + 16, v6, (uint64_t)&v21);
  v8 = v22;
  v9 = llvm::APFloatBase::PPCDoubleDouble(v7);
  v10 = (_QWORD **)v23[0];
  if (v9 != v8)
    v10 = &v21;
  v11 = (*((_BYTE *)v10 + 28) & 0xF) == 3;
  if (v9 == v8)
    sub_22E463170((llvm::APFloatBase *)v23);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v22);
  return v11;
}

uint64_t sub_22E4F00CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  llvm::APFloatBase *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unsigned int v9;

  v5 = sub_22F257F94(a1, (llvm::APInt *)&v8);
  v6 = a3 + 8;
  if (llvm::APFloatBase::PPCDoubleDouble(v5) == a2)
    result = MEMORY[0x23489F288](v6, a2, &v8);
  else
    result = llvm::detail::IEEEFloat::IEEEFloat();
  if (v9 >= 0x41)
  {
    result = v8;
    if (v8)
      return MEMORY[0x2348A0E84](v8, 0x1000C8000313F17);
  }
  return result;
}

void sub_22E4F0158(_QWORD *a1, unsigned __int8 *a2)
{
  int v4;
  int v5;
  char v6;
  unsigned __int8 *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  _BOOL4 v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  _BOOL4 v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  unsigned int v41;
  BOOL v42;
  BOOL v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  int v49;
  _QWORD *v50;
  int v51;
  __int128 v52;
  __int128 *v53;
  __int128 *v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 *v69;
  uint64_t Select;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned __int8 *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned __int8 *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned __int8 *v91;
  unsigned __int8 *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned __int8 *v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  unint64_t v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  char *v106;
  int v107;
  uint64_t *v108;
  uint64_t *v109;
  __int128 v110[3];
  __int128 v111;
  __int128 v112;
  __int128 v113;
  unint64_t v114;
  char v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  char v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  char v133;
  _OWORD v134[3];
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  _OWORD v141[3];
  char v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  uint64_t v160;
  _BYTE v161[64];
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  uint64_t v166;
  uint64_t v167;

  v167 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  if (a2 && (v4 & 0xFE) == 0x70)
  {
    switch((*(_DWORD *)a2 >> 18) & 0x3F)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
        sub_22E4F3948(a1, (uint64_t)a2);
        return;
      case 9:
        v7 = sub_22EFB1C68(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 144) + 18648, *((_QWORD *)a2 + 1));
        v8 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 8) & 0xFFFFFFFFFFFFFFF0;
        v9 = *(_QWORD *)v8;
        v10 = *(_QWORD *)(*(_QWORD *)v8 + 8) & 0xFFFFFFFFFFFFFFF0;
        v11 = *(_QWORD *)v10;
        v12 = *(_DWORD *)(*(_QWORD *)v10 + 16);
        if (*(_QWORD *)v10)
          v13 = v12 == 11;
        else
          v13 = 0;
        if (v13)
        {
          if (((*(_DWORD *)(*(_QWORD *)v10 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
            goto LABEL_78;
        }
        else if (v11 && v12 == 44)
        {
          v14 = sub_22F114198(*(_QWORD *)(v11 + 24));
          if ((*(_BYTE *)(v14 + 74) & 1) != 0)
          {
            v9 = *(_QWORD *)v8;
            goto LABEL_78;
          }
          v9 = *(_QWORD *)v8;
          if (*(_QWORD *)(v14 + 128) > 7uLL)
            goto LABEL_78;
          v10 = *(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0;
        }
        else if (v12 == 9)
        {
          goto LABEL_78;
        }
        v40 = *(_QWORD *)v10;
        v41 = *(_DWORD *)(*(_QWORD *)v10 + 16);
        if (v40)
          v42 = v41 == 11;
        else
          v42 = 0;
        if ((!v42 || ((v41 >> 19) & 0x1FE) - 210 >= 8) && (!v40 || (v41 & 0xFF800FF) != 114294795))
        {
          v44 = v41 > 0x27u;
          v45 = (1 << v41) & 0x8080001000;
          if (v44 || v45 == 0)
          {
            sub_22E628400(*(_QWORD *)(*a1 + 144), (uint64_t)a2, "aggregate three-way comparison");
            return;
          }
        }
LABEL_78:
        v56 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
        v57 = *((_QWORD *)a2 + 2);
        v58 = *a1;
        memset(v161, 0, 28);
        memset(&v161[32], 0, 25);
        sub_22E4D79C0(&v152, v58, v57, v161, 0);
        if ((v155 & 6) == 4)
        {
          v60 = *(_QWORD *)(v57 + 8);
          v61 = *a1;
          v111 = v152;
          v112 = v153;
          v113 = v154;
          sub_22E5E0440(v61, (uint64_t)&v111, v60, &v116);
          v59 = (uint64_t *)v116;
          goto LABEL_82;
        }
        if ((v155 & 6) == 0)
        {
          v59 = (uint64_t *)v152;
LABEL_82:
          v108 = 0;
          v109 = v59;
          goto LABEL_84;
        }
        v108 = (uint64_t *)*((_QWORD *)&v152 + 1);
        v109 = (uint64_t *)v152;
LABEL_84:
        v62 = *((_QWORD *)a2 + 3);
        v63 = *a1;
        memset(v161, 0, 28);
        memset(&v161[32], 0, 25);
        sub_22E4D79C0(&v152, v63, v62, v161, 0);
        if ((v155 & 6) == 4)
        {
          v66 = *(_QWORD *)(v62 + 8);
          v67 = *a1;
          v111 = v152;
          v112 = v153;
          v113 = v154;
          sub_22E5E0440(v67, (uint64_t)&v111, v66, &v116);
          v64 = 0;
          v65 = v116;
        }
        else
        {
          if ((v155 & 6) != 0)
            v64 = *((_QWORD *)&v152 + 1);
          else
            v64 = 0;
          v65 = v152;
        }
        v68 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v8 + 8) & 0xFFFFFFFFFFFFFFF0);
        if (v68 && (*(_DWORD *)(v68 + 16) & 0xFF800FF) == 0x6D0000B)
        {
          v69 = sub_22F3AA5C4((uint64_t)v7, v7[112] != 2);
          sub_22F3AA55C((uint64_t)v69, (uint64_t)v161);
          Select = llvm::ConstantInt::get();
          if (*(_DWORD *)&v161[8] >= 0x41u)
          {
            if (*(_QWORD *)v161)
              MEMORY[0x2348A0E84](*(_QWORD *)v161, 0x1000C8000313F17);
          }
        }
        else
        {
          v71 = *a1;
          v72 = a1[1];
          if (v56 == 12)
            v73 = ".r";
          else
            v73 = "";
          v74 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 8);
          v105 = v64;
          v106 = v73;
          v107 = v56;
          if (v7[112])
          {
            v88 = sub_22E4F6850(v72, v71, v74, v109, v65, 0, v73);
            if (v56 == 12)
            {
              v89 = sub_22E4F6850(a1[1], *a1, *(_QWORD *)(*((_QWORD *)a2 + 2) + 8), v108, v64, 0, ".i");
              v90 = a1[1];
              *(_QWORD *)v161 = "and.eq";
              *(_WORD *)&v161[32] = 259;
              sub_22E3E49C4(v90, v88, v89, (uint64_t)v161);
            }
            v91 = sub_22F3AA5C4((uint64_t)v7, 2);
            sub_22F3AA55C((uint64_t)v91, (uint64_t)v161);
            llvm::ConstantInt::get();
            if (*(_DWORD *)&v161[8] >= 0x41u && *(_QWORD *)v161)
              MEMORY[0x2348A0E84](*(_QWORD *)v161, 0x1000C8000313F17);
            v92 = sub_22F3AA5C4((uint64_t)v7, 3);
            sub_22F3AA55C((uint64_t)v92, (uint64_t)v161);
            llvm::ConstantInt::get();
            if (*(_DWORD *)&v161[8] >= 0x41u && *(_QWORD *)v161)
              MEMORY[0x2348A0E84](*(_QWORD *)v161, 0x1000C8000313F17);
            *(_QWORD *)v161 = "sel.lt";
            *(_WORD *)&v161[32] = 259;
            llvm::IRBuilderBase::CreateSelect();
            v93 = sub_22E4F6850(a1[1], *a1, *(_QWORD *)(*((_QWORD *)a2 + 2) + 8), v109, v65, 2, v106);
            if (v107 == 12)
            {
              v94 = sub_22E4F6850(a1[1], *a1, *(_QWORD *)(*((_QWORD *)a2 + 2) + 8), v108, v64, 2, ".i");
              v95 = a1[1];
              *(_QWORD *)v161 = "and.eq";
              *(_WORD *)&v161[32] = 259;
              sub_22E3E49C4(v95, v93, v94, (uint64_t)v161);
            }
            v96 = sub_22F3AA5C4((uint64_t)v7, v7[112] != 2);
            sub_22F3AA55C((uint64_t)v96, (uint64_t)v161);
            llvm::ConstantInt::get();
            if (*(_DWORD *)&v161[8] >= 0x41u && *(_QWORD *)v161)
              MEMORY[0x2348A0E84](*(_QWORD *)v161, 0x1000C8000313F17);
            *(_QWORD *)v161 = "sel.eq";
            *(_WORD *)&v161[32] = 259;
          }
          else
          {
            v75 = sub_22E4F6850(v72, v71, v74, v109, v65, 2, v73);
            if (v56 == 12)
            {
              v76 = sub_22E4F6850(a1[1], *a1, *(_QWORD *)(*((_QWORD *)a2 + 2) + 8), v108, v64, 2, ".i");
              v77 = a1[1];
              *(_QWORD *)v161 = "and.eq";
              *(_WORD *)&v161[32] = 259;
              sub_22E3E49C4(v77, v75, v76, (uint64_t)v161);
            }
            v78 = sub_22F3AA5C4((uint64_t)v7, v7[112] != 2);
            sub_22F3AA55C((uint64_t)v78, (uint64_t)v161);
            llvm::ConstantInt::get();
            if (*(_DWORD *)&v161[8] >= 0x41u && *(_QWORD *)v161)
              MEMORY[0x2348A0E84](*(_QWORD *)v161, 0x1000C8000313F17);
            v79 = sub_22F3AA5C4((uint64_t)v7, 4);
            sub_22F3AA55C((uint64_t)v79, (uint64_t)v161);
            llvm::ConstantInt::get();
            if (*(_DWORD *)&v161[8] >= 0x41u && *(_QWORD *)v161)
              MEMORY[0x2348A0E84](*(_QWORD *)v161, 0x1000C8000313F17);
            *(_QWORD *)v161 = "sel.eq";
            *(_WORD *)&v161[32] = 259;
            llvm::IRBuilderBase::CreateSelect();
            v80 = sub_22E4F6850(a1[1], *a1, *(_QWORD *)(*((_QWORD *)a2 + 2) + 8), v109, v65, 1, v106);
            if (v56 == 12)
            {
              v81 = sub_22E4F6850(a1[1], *a1, *(_QWORD *)(*((_QWORD *)a2 + 2) + 8), v108, v105, 1, ".i");
              v82 = a1[1];
              *(_QWORD *)v161 = "and.eq";
              *(_WORD *)&v161[32] = 259;
              sub_22E3E49C4(v82, v80, v81, (uint64_t)v161);
            }
            v83 = sub_22F3AA5C4((uint64_t)v7, 3);
            sub_22F3AA55C((uint64_t)v83, (uint64_t)v161);
            llvm::ConstantInt::get();
            if (*(_DWORD *)&v161[8] >= 0x41u && *(_QWORD *)v161)
              MEMORY[0x2348A0E84](*(_QWORD *)v161, 0x1000C8000313F17);
            *(_QWORD *)v161 = "sel.gt";
            *(_WORD *)&v161[32] = 259;
            llvm::IRBuilderBase::CreateSelect();
            v84 = sub_22E4F6850(a1[1], *a1, *(_QWORD *)(*((_QWORD *)a2 + 2) + 8), v109, v65, 0, v106);
            if (v56 == 12)
            {
              v85 = sub_22E4F6850(a1[1], *a1, *(_QWORD *)(*((_QWORD *)a2 + 2) + 8), v108, v105, 0, ".i");
              v86 = a1[1];
              *(_QWORD *)v161 = "and.eq";
              *(_WORD *)&v161[32] = 259;
              sub_22E3E49C4(v86, v84, v85, (uint64_t)v161);
            }
            v87 = sub_22F3AA5C4((uint64_t)v7, 2);
            sub_22F3AA55C((uint64_t)v87, (uint64_t)v161);
            llvm::ConstantInt::get();
            if (*(_DWORD *)&v161[8] >= 0x41u && *(_QWORD *)v161)
              MEMORY[0x2348A0E84](*(_QWORD *)v161, 0x1000C8000313F17);
            *(_QWORD *)v161 = "sel.lt";
            *(_WORD *)&v161[32] = 259;
          }
          Select = llvm::IRBuilderBase::CreateSelect();
        }
        sub_22E4F6780(a1, *((_QWORD *)a2 + 1));
        v97 = *a1;
        v98 = *((_OWORD *)a1 + 2);
        v116 = *((_OWORD *)a1 + 1);
        v117 = v98;
        v118 = *((_OWORD *)a1 + 3);
        v99 = *((_QWORD *)a2 + 1);
        sub_22E6281E0(*(_QWORD **)(v97 + 144), v99, (uint64_t)&v130);
        v152 = v116;
        v153 = v117;
        v154 = v118;
        v100 = *(_QWORD *)(*(_QWORD *)(v97 + 144) + 144);
        v111 = v130;
        v112 = v131;
        *(_QWORD *)&v113 = v132;
        memset(&v161[8], 0, 28);
        *(_QWORD *)&v161[48] = 0;
        *(_QWORD *)&v161[40] = 0;
        v162 = 0uLL;
        *(_QWORD *)((char *)&v163 + 4) = 2;
        *(_DWORD *)v161 = 0;
        v165 = 0u;
        v164 = 0u;
        sub_22E3C113C((uint64_t)v161, &v152, v99, 2, &v111, v100);
        v101 = (_QWORD *)*a1;
        v127 = v164;
        v128 = v165;
        v129 = v166;
        v123 = *(_OWORD *)&v161[32];
        v124 = *(_OWORD *)&v161[48];
        v125 = v162;
        v126 = v163;
        v121 = *(_OWORD *)v161;
        v122 = *(_OWORD *)&v161[16];
        v102 = sub_22EFC3B90(*((_QWORD *)v7 + 13));
        sub_22E4EC638(v101, (uint64_t)&v121, v102, (uint64_t)&v152);
        v103 = *a1;
        v134[0] = (unint64_t)Select;
        LOBYTE(v135) = 0;
        v149 = v158;
        v150 = v159;
        v151 = v160;
        v145 = v154;
        v146 = v155;
        v147 = v156;
        v148 = v157;
        v143 = v152;
        v144 = v153;
        sub_22E4DAAE0(v103, (uint64_t)v134, (uint64_t)&v143, 1u);
        return;
      case 0x15:
        if (sub_22E4F6AB8(*((_QWORD *)a2 + 2))
          && sub_22F0005B0(*((_QWORD *)a2 + 3), *(_QWORD *)(*(_QWORD *)(*a1 + 144) + 144), 1, v15, v16, v17, v18, v19))
        {
          sub_22E4F6780(a1, *(_QWORD *)(*((_QWORD *)a2 + 3) + 8));
          v20 = *((_QWORD *)a2 + 3);
          v21 = *a1;
          *(_QWORD *)v161 = 0;
          *(_QWORD *)&v161[8] = v21;
          sub_22EFF605C(v20);
          sub_22E48EE24((uint64_t *)v161, v22, 0);
          sub_22E4F0158(a1, v20);
          sub_22E48F084(v161);
          sub_22E4E0888(*a1, *((unsigned __int8 **)a2 + 2), 1u, (uint64_t)v161);
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v162 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                        + 16) != 6)
          {
            v23 = *a1;
            v158 = v164;
            v159 = v165;
            v160 = v166;
            v154 = *(_OWORD *)&v161[32];
            v155 = *(_OWORD *)&v161[48];
            v156 = v162;
            v157 = v163;
            v152 = *(_OWORD *)v161;
            v153 = *(_OWORD *)&v161[16];
            if (!sub_22E3BF6AC(v23, (uint64_t)&v152))
            {
              v24 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 8);
              v25 = sub_22E4F6FEC(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 152) + 244), v24);
              v116 = *(_OWORD *)&v161[8];
              v117 = *(_OWORD *)&v161[24];
              v118 = *(_OWORD *)&v161[40];
              v119 = *((_QWORD *)&v162 + 1);
              if (v25)
                v26 = 27;
              else
                v26 = 25;
              v120 = v26;
              sub_22E4F6D3C(a1, v24, (uint64_t)&v116, (uint64_t)(a1 + 2));
              return;
            }
          }
          v50 = (_QWORD *)*a1;
          if (a1[2])
          {
            v104 = *((_OWORD *)a1 + 2);
            v130 = *((_OWORD *)a1 + 1);
            v131 = v104;
            v132 = *((_OWORD *)a1 + 3);
            v55 = (*((unsigned __int8 *)a1 + 64) >> 2) & 1 | 4;
          }
          else
          {
            LOBYTE(v55) = 0;
            v130 = 0uLL;
          }
          v133 = v55;
          v127 = v164;
          v128 = v165;
          v129 = v166;
          v123 = *(_OWORD *)&v161[32];
          v124 = *(_OWORD *)&v161[48];
          v125 = v162;
          v126 = v163;
          v121 = *(_OWORD *)v161;
          v122 = *(_OWORD *)&v161[16];
          v53 = &v130;
          v54 = &v121;
LABEL_136:
          sub_22F2453C8(v50, (uint64_t)v53, v54, 0);
          return;
        }
        sub_22E4E0888(*a1, *((unsigned __int8 **)a2 + 2), 1u, (uint64_t)v161);
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v162 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) == 6)
          goto LABEL_71;
        v30 = *a1;
        v149 = v164;
        v150 = v165;
        v151 = v166;
        v145 = *(_OWORD *)&v161[32];
        v146 = *(_OWORD *)&v161[48];
        v147 = v162;
        v148 = v163;
        v143 = *(_OWORD *)v161;
        v144 = *(_OWORD *)&v161[16];
        if (sub_22E3BF6AC(v30, (uint64_t)&v143))
        {
LABEL_71:
          sub_22E4F6780(a1, *(_QWORD *)(*((_QWORD *)a2 + 3) + 8));
          v47 = *((_QWORD *)a2 + 3);
          v48 = *a1;
          *(_QWORD *)&v116 = 0;
          *((_QWORD *)&v116 + 1) = v48;
          sub_22EFF605C(v47);
          sub_22E48EE24((uint64_t *)&v116, v49, 0);
          sub_22E4F0158(a1, v47);
          sub_22E48F084(&v116);
          v50 = (_QWORD *)*a1;
          if (a1[2])
          {
            v52 = *((_OWORD *)a1 + 2);
            v141[0] = *((_OWORD *)a1 + 1);
            v141[1] = v52;
            v141[2] = *((_OWORD *)a1 + 3);
            v51 = (*((unsigned __int8 *)a1 + 64) >> 2) & 1 | 4;
          }
          else
          {
            LOBYTE(v51) = 0;
            v141[0] = 0uLL;
          }
          v142 = v51;
          v138 = v164;
          v139 = v165;
          v140 = v166;
          v134[2] = *(_OWORD *)&v161[32];
          v135 = *(_OWORD *)&v161[48];
          v136 = v162;
          v137 = v163;
          v134[0] = *(_OWORD *)v161;
          v134[1] = *(_OWORD *)&v161[16];
          v53 = v141;
          v54 = v134;
          goto LABEL_136;
        }
        v31 = sub_22E4F6FEC(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 152) + 244), *(_QWORD *)(*((_QWORD *)a2 + 2) + 8));
        v116 = *(_OWORD *)&v161[8];
        v117 = *(_OWORD *)&v161[24];
        v118 = *(_OWORD *)&v161[40];
        v32 = *((_QWORD *)&v162 + 1);
        v33 = *((_QWORD *)&v162 + 1) & 0xFFFFFFFF00000000;
        if (v31)
          v34 = 27;
        else
          v34 = 25;
        if ((BYTE8(v162) & 4) == 0)
        {
          v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 2) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
          if (v35)
          {
            if (*(_BYTE *)(v35 + 16) == 45)
              v32 |= (*(_QWORD *)(sub_22F114198(*(_QWORD *)(v35 + 24)) + 72) >> 24) & 4;
          }
        }
        v36 = *a1;
        v37 = *((_QWORD *)a2 + 3);
        v111 = v116;
        v112 = v117;
        v113 = v118;
        v114 = v32 | v33;
        v115 = v34;
        sub_22E4EF100(v36, v37, &v111);
        sub_22E4F7088(a1, *((_QWORD *)a2 + 1), (__int128 *)v161, 1);
        if (a1[2] && (a1[9] & 1) == 0 && sub_22F115260(*((_QWORD *)a2 + 1)) == 4)
        {
          v38 = *a1;
          v39 = *((_OWORD *)a1 + 2);
          v110[0] = *((_OWORD *)a1 + 1);
          v110[1] = v39;
          v110[2] = *((_OWORD *)a1 + 3);
          sub_22F259F50(v38, 4, v110, *((_QWORD *)a2 + 1));
        }
        break;
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
        sub_22E4F3C40(a1, (uint64_t)a2);
        return;
      case 0x20:
        sub_22E4D89CC(*a1);
        v27 = *((_QWORD *)a2 + 3);
        v28 = *a1;
        *(_QWORD *)v161 = 0;
        *(_QWORD *)&v161[8] = v28;
        sub_22EFF605C(v27);
        sub_22E48EE24((uint64_t *)v161, v29, 0);
        sub_22E4F0158(a1, v27);
        sub_22E48F084(v161);
        return;
      default:
        goto LABEL_9;
    }
  }
  else
  {
    if (!a2 || v4 != 233)
LABEL_9:
      __asm { BR              X10 }
    switch((*(_DWORD *)a2 >> 18) & 0x1F)
    {
      case 0:
        v5 = 0;
        goto LABEL_19;
      case 1:
        v5 = 1;
LABEL_19:
        v6 = 0;
        goto LABEL_20;
      case 2:
        v5 = 0;
        goto LABEL_16;
      case 3:
        v5 = 1;
LABEL_16:
        v6 = 1;
LABEL_20:
        sub_22E4F73BC(a1, (uint64_t)a2, v5, v6);
        break;
      case 4:
        sub_22E4F28AC((_QWORD **)a1, (uint64_t)a2);
        break;
      case 5:
        sub_22E4F7F10((uint64_t)a1, (uint64_t)a2);
        break;
      case 0xC:
      case 0xD:
        sub_22E4EF304(a1, *((_QWORD *)a2 + 2));
        break;
      default:
        sub_22E628400(*(_QWORD *)(*a1 + 144), (uint64_t)a2, "aggregate expression");
        break;
    }
  }
}

void sub_22E4F28AC(_QWORD **a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned __int8 *v24;
  uint64_t v25;
  int v26;
  unsigned __int8 *v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  void (**v51)(_QWORD *);
  uint64_t v52;
  uint64_t v53;
  int v54;
  unsigned __int8 **v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  unsigned int v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t *v76;
  llvm::LLVMContext *v77;
  uint64_t *v78;
  llvm::LLVMContext *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  _OWORD v98[8];
  uint64_t v99;
  _OWORD v100[3];
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  _OWORD v119[2];
  uint64_t v120;
  _BYTE v121[64];
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  _QWORD v130[3];
  _QWORD *v131;
  _QWORD v132[3];
  _QWORD *v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;

  v137 = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4)
  {
    do
    {
      v5 = v4;
      v6 = *v4;
      if (v6 > 0xD5)
      {
        if (v6 == 233)
        {
          if ((*(_DWORD *)v4 & 0x7C0000) != 0x300000)
            goto LABEL_20;
          v6 = *(_DWORD *)v4;
          v8 = v4 + 16;
        }
        else
        {
          if (v6 != 214)
            break;
          v8 = v4 + 24;
        }
      }
      else if (v6 == 155)
      {
        if ((**((_DWORD **)v4 + 2) & 0x18000) != 0)
          goto LABEL_49;
        v8 = v4 + 24;
        if (!v5[48])
          v8 = v5 + 32;
        v6 = 155;
      }
      else
      {
        if (v6 != 176)
          break;
        v7 = *((unsigned int *)v4 + 5);
        if ((_DWORD)v7 == -1)
          goto LABEL_49;
        v8 = &v4[8 * v7 + 40];
        v6 = 176;
      }
      v4 = *(unsigned __int8 **)v8;
    }
    while (v4 != v5);
    if (v6 != 233)
      goto LABEL_49;
  }
  else
  {
    v5 = 0;
  }
LABEL_20:
  v9 = 0;
  v10 = (uint64_t)v5;
  do
  {
    v11 = (*(_DWORD *)v10 >> 18) & 0x1F;
    if (v11 == 5)
    {
      v12 = 1;
    }
    else
    {
      if (v11 != 4)
        break;
      v12 = -1;
    }
    v9 += v12;
    v13 = *(unsigned __int8 **)(v10 + 16);
    if (!v13)
    {
      v14 = 0;
      v10 = 0;
      continue;
    }
    while (1)
    {
      v10 = (uint64_t)v13;
      v14 = *v13;
      if (v14 > 0xD5)
        break;
      if (v14 == 155)
      {
        if ((**((_DWORD **)v13 + 2) & 0x18000) != 0)
          goto LABEL_46;
        v16 = v13 + 24;
        if (!*(_BYTE *)(v10 + 48))
          v16 = (unsigned __int8 *)(v10 + 32);
        v14 = 155;
      }
      else
      {
        if (v14 != 176)
          goto LABEL_43;
        v15 = *((unsigned int *)v13 + 5);
        if ((_DWORD)v15 == -1)
          goto LABEL_46;
        v16 = &v13[8 * v15 + 40];
        v14 = 176;
      }
LABEL_40:
      v13 = *(unsigned __int8 **)v16;
      if (v13 == (unsigned __int8 *)v10)
        goto LABEL_43;
    }
    if (v14 != 233)
    {
      if (v14 != 214)
        continue;
      v16 = v13 + 24;
      goto LABEL_40;
    }
    if ((*(_DWORD *)v13 & 0x7C0000) == 0x300000)
    {
      v14 = *(_DWORD *)v13;
      v16 = v13 + 16;
      goto LABEL_40;
    }
    v14 = 233;
LABEL_43:
    ;
  }
  while (v14 == 233);
LABEL_46:
  if (v9 == 1 && (*(_DWORD *)sub_22EFFEB40((unsigned __int8 *)v10) & 0x300) == 0x100)
  {
    v17 = (uint64_t)*a1;
    *(_QWORD *)v121 = 0;
    *(_QWORD *)&v121[8] = v17;
    sub_22EFF605C(v10);
    sub_22E48EE24((uint64_t *)v121, v18, 0);
    sub_22E4F0158(a1, v10);
    sub_22E48F084(v121);
    return;
  }
LABEL_49:
  sub_22E4F6780(a1, *(_QWORD *)(a2 + 8));
  v19 = (uint64_t)*a1;
  v20 = *((_OWORD *)a1 + 2);
  v134 = *((_OWORD *)a1 + 1);
  v135 = v20;
  v136 = *((_OWORD *)a1 + 3);
  v21 = *(_QWORD *)(a2 + 8);
  sub_22E6281E0(*(_QWORD **)(v19 + 144), v21, (uint64_t)v119);
  *(_OWORD *)v121 = v134;
  *(_OWORD *)&v121[16] = v135;
  *(_OWORD *)&v121[32] = v136;
  v22 = *(_QWORD *)(*(_QWORD *)(v19 + 144) + 144);
  v127 = v119[0];
  v128 = v119[1];
  *(_QWORD *)&v129 = v120;
  v111 = 0uLL;
  LODWORD(v112) = 0;
  *((_QWORD *)&v110 + 1) = 0;
  *(_QWORD *)&v113 = 0;
  *((_QWORD *)&v112 + 1) = 0;
  v114 = 0uLL;
  *(_QWORD *)((char *)&v115 + 4) = 2;
  LODWORD(v110) = 0;
  v116 = 0u;
  v117 = 0u;
  sub_22E3C113C((uint64_t)&v110, (__int128 *)v121, v21, 2, &v127, v22);
  v23 = *v5;
  if (v23 == 188)
  {
    v29 = *((_QWORD *)v5 + 3);
    if (v29 && (*(_DWORD *)(v29 + 28) & 0x7Fu) - 52 >= 0xFFFFFFFD)
    {
      v30 = *(_QWORD *)(v29 + 16);
      v31 = v30 & 0xFFFFFFFFFFFFFFF8;
      v32 = v30 & 0xFFFFFFFFFFFFFFF8;
      if ((v30 & 4) != 0)
        v32 = *(_QWORD *)v31;
      v33 = (*(_WORD *)(v32 + 8) & 0x7E) - 34;
      if (v32)
        v34 = v32 - 64;
      else
        v34 = 0;
      if (v33 >= 4)
        v34 = 0;
      if ((*(_BYTE *)(v34 + 73) & 0xE0) == 0)
      {
        v65 = *((_QWORD *)v5 + 2);
        if ((v30 & 4) != 0)
          v31 = *(_QWORD *)v31;
        v66 = (*(_WORD *)(v31 + 8) & 0x7E) - 34;
        if (v31)
          v67 = v31 - 64;
        else
          v67 = 0;
        if (v66 >= 4)
          v68 = 0;
        else
          v68 = v67;
        v69 = sub_22E66DD94((*a1)[18] + 280, v68);
        v70 = sub_22E4EC264(v69, v29);
        if ((v5[2] & 4) != 0)
        {
          v73 = *(_QWORD *)(*(_QWORD *)(v65 + 8) & 0xFFFFFFFFFFFFFFF0);
          if (!v73 || *(_BYTE *)(v73 + 16) != 39)
            v73 = sub_22F10CF48(v73);
          v74 = *(_BYTE *)(v73 + 40) & 7;
          if (v74 <= 4 && ((1 << v74) & 0x13) != 0)
          {
            v75 = (uint64_t)(*a1 + 34);
            *(_QWORD *)v121 = *a1;
            *(_QWORD *)&v121[8] = v75;
            v121[16] = 0;
            *(_QWORD *)&v121[24] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v121 + 144) + 232);
            v76 = (uint64_t *)sub_22E50E974((uint64_t *)v121, (unsigned __int8 *)v65);
          }
          else
          {
            v76 = sub_22E4D7830(*a1, v65, 1, 3, 0, 0, 0, 0);
          }
          v78 = v76;
          llvm::Type::getInt32Ty((llvm::Type *)a1[1][8], v77);
          *(_QWORD *)&v134 = llvm::ConstantInt::get();
          llvm::Type::getInt32Ty((llvm::Type *)a1[1][8], v79);
          *((_QWORD *)&v134 + 1) = llvm::ConstantInt::get();
          v80 = (uint64_t)*a1;
          v81 = sub_22F10ACF8(*(_QWORD *)(*(_QWORD *)(v65 + 8) & 0xFFFFFFFFFFFFFFF0));
          v82 = sub_22E66C868(*(_QWORD *)(v80 + 144) + 280, v81, 0);
          v83 = a1[1];
          *(_WORD *)&v121[32] = 257;
          v72 = (uint64_t *)sub_22E486CB4(v83, v82, v78, (uint64_t **)&v134, 2, (uint64_t)v121);
        }
        else
        {
          sub_22E4D8D7C((uint64_t)*a1, (unsigned int *)v65, (uint64_t)v121);
          v71 = a1[1];
          v100[0] = *(_OWORD *)&v121[8];
          v100[1] = *(_OWORD *)&v121[24];
          v100[2] = *(_OWORD *)&v121[40];
          LOWORD(v129) = 257;
          sub_22E3C408C(v71, (uint64_t)v100, v70, (uint64_t)&v127, (uint64_t)&v134);
          v72 = (uint64_t *)v134;
        }
        v84 = sub_22F10ACF8(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0));
        *(_QWORD *)&v134 = sub_22EF5B848(*(_QWORD *)((*a1)[18] + 144), v84, 0);
        v85 = a1[1];
        v86 = sub_22E66C868((*a1)[18] + 280, v84, 0);
        v87 = (uint64_t *)llvm::ConstantInt::get();
        *(_WORD *)&v121[32] = 257;
        v88 = sub_22E42129C(v85, v86, v72, v87, (uint64_t)v121);
        v98[6] = v116;
        v98[7] = v117;
        v99 = v118;
        v98[2] = v112;
        v98[3] = v113;
        v98[4] = v114;
        v98[5] = v115;
        v98[0] = v110;
        v98[1] = v111;
        v132[0] = &unk_24FA63CD8;
        v132[1] = a1;
        v132[2] = &v134;
        v133 = v132;
        sub_22E4F7C18((uint64_t)a1, (uint64_t)v98, (uint64_t)v72, v88, (uint64_t)v72, (uint64_t)v132);
        v50 = v133;
        if (v133 == v132)
        {
          v51 = (void (**)(_QWORD *))(v132[0] + 32);
          v50 = v132;
          goto LABEL_80;
        }
        goto LABEL_77;
      }
    }
LABEL_65:
    sub_22E4D8D7C((uint64_t)*a1, (unsigned int *)v5, (uint64_t)v121);
    v35 = (uint64_t)*a1;
    v127 = *(_OWORD *)&v121[8];
    v128 = *(_OWORD *)&v121[24];
    v129 = *(_OWORD *)&v121[40];
    sub_22E5E0440(v35, (uint64_t)&v127, v122, &v134);
    v36 = (uint64_t *)v134;
    v37 = *(_QWORD *)&v121[16];
    v38 = a1[1];
    v39 = (uint64_t *)llvm::ConstantInt::get();
    LOWORD(v136) = 257;
    v47 = sub_22E42129C(v38, v37, v36, v39, (uint64_t)&v134);
    v95 = v116;
    v96 = v117;
    v97 = v118;
    v91 = v112;
    v92 = v113;
    v93 = v114;
    v94 = v115;
    v89 = v110;
    v90 = v111;
    if (qword_253E4BCB8)
    {
      if ((uint64_t *)qword_253E4BCB8 == &qword_253E4BCA0)
      {
        v131 = v130;
        (*(void (**)(uint64_t *, _QWORD *))(qword_253E4BCA0 + 24))(&qword_253E4BCA0, v130);
      }
      else
      {
        v131 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)qword_253E4BCB8 + 16))(qword_253E4BCB8, v40, v41, v42, v43, v44, v45, v46, v89, *((_QWORD *)&v89 + 1), v90, *((_QWORD *)&v90 + 1), v91, *((_QWORD *)&v91 + 1), v92, *((_QWORD *)&v92 + 1), v93);
      }
    }
    else
    {
      v131 = 0;
    }
    sub_22E4F7C18((uint64_t)a1, (uint64_t)&v89, (uint64_t)v36, v47, (uint64_t)v36, (uint64_t)v130);
    v50 = v131;
    if (v131 == v130)
    {
      v51 = (void (**)(_QWORD *))(v130[0] + 32);
      v50 = v130;
      goto LABEL_80;
    }
LABEL_77:
    if (!v50)
      return;
    v51 = (void (**)(_QWORD *))(*v50 + 40);
LABEL_80:
    (*v51)(v50);
    return;
  }
  if (v23 != 107)
    goto LABEL_65;
  v103 = v112;
  v104 = v113;
  v109 = v118;
  v107 = v116;
  v108 = v117;
  v105 = v114;
  v106 = v115;
  v101 = v110;
  v102 = v111;
  v24 = v5 + 24;
  v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 3) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v26 = *(_DWORD *)(v25 + 16);
  if (v25 && v26 == 11)
  {
    v27 = v5 + 16;
    v28 = (uint64_t *)(v5 + 24);
    if (((*(_DWORD *)(v25 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
      goto LABEL_83;
LABEL_82:
    v28 = (uint64_t *)v27;
  }
  else if (v25 && v26 == 44)
  {
    v48 = sub_22F114198(*(_QWORD *)(v25 + 24));
    if ((*(_BYTE *)(v48 + 74) & 1) != 0 || *(_QWORD *)(v48 + 128) > 7uLL)
    {
      v49 = sub_22F114198(*(_QWORD *)(v25 + 24));
      v27 = v5 + 16;
      v28 = (uint64_t *)(v5 + 24);
      if ((*(_QWORD *)(v49 + 72) & 0x8000000000) != 0)
        goto LABEL_83;
      goto LABEL_82;
    }
    v27 = v5 + 16;
    v28 = (uint64_t *)(v5 + 24);
  }
  else
  {
    v27 = v5 + 16;
    v28 = (uint64_t *)(v5 + 24);
    if (v26 == 9)
      goto LABEL_82;
  }
LABEL_83:
  v52 = *v28;
  v53 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v24 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v54 = *(_DWORD *)(v53 + 16);
  if (v53 && v54 == 11)
  {
    v55 = (unsigned __int8 **)v27;
    if (((*(_DWORD *)(v53 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
      goto LABEL_95;
LABEL_94:
    v55 = (unsigned __int8 **)(v5 + 24);
  }
  else if (v53 && v54 == 44)
  {
    v56 = sub_22F114198(*(_QWORD *)(v53 + 24));
    if ((*(_BYTE *)(v56 + 74) & 1) != 0 || (v55 = (unsigned __int8 **)v27, *(_QWORD *)(v56 + 128) > 7uLL))
    {
      v57 = sub_22F114198(*(_QWORD *)(v53 + 24));
      v55 = (unsigned __int8 **)v27;
      if ((*(_QWORD *)(v57 + 72) & 0x8000000000) == 0)
        goto LABEL_94;
    }
  }
  else
  {
    v55 = (unsigned __int8 **)v27;
    if (v54 == 9)
      goto LABEL_94;
  }
LABEL_95:
  v58 = *v55;
  v59 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v24 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v60 = *(_DWORD *)(v59 + 16);
  if (v59 && v60 == 11)
  {
    if (((*(_DWORD *)(v59 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
      goto LABEL_107;
    goto LABEL_106;
  }
  if (!v59 || v60 != 44)
  {
    if (v60 != 9)
      goto LABEL_107;
    goto LABEL_106;
  }
  v61 = sub_22F114198(*(_QWORD *)(v59 + 24));
  if (((*(_BYTE *)(v61 + 74) & 1) != 0 || *(_QWORD *)(v61 + 128) > 7uLL)
    && (*(_QWORD *)(sub_22F114198(*(_QWORD *)(v59 + 24)) + 72) & 0x8000000000) == 0)
  {
LABEL_106:
    v27 = v5 + 24;
  }
LABEL_107:
  v62 = *(_QWORD *)(*(_QWORD *)v27 + 8);
  v63 = (uint64_t)(*a1 + 34);
  *(_QWORD *)v121 = *a1;
  *(_QWORD *)&v121[8] = v63;
  v121[16] = 0;
  *(_QWORD *)&v121[24] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v121 + 144) + 232);
  v64 = (uint64_t *)sub_22E50E974((uint64_t *)v121, v58);
  v124 = v107;
  v125 = v108;
  v126 = v109;
  *(_OWORD *)&v121[32] = v103;
  *(_OWORD *)&v121[48] = v104;
  v122 = v105;
  v123 = v106;
  *(_OWORD *)v121 = v101;
  *(_OWORD *)&v121[16] = v102;
  sub_22E4F7590((uint64_t *)a1, (uint64_t)v121, (uint64_t)v5, v52, v64, v62, 0);
}

int32x2_t sub_22E4F32E0(uint64_t *a1, unint64_t *a2, llvm::GetElementPtrInst *a3)
{
  uint64_t v6;
  uint64_t v7;
  int32x2_t result;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  llvm::GetElementPtrInst *v15;
  llvm::GetElementPtrInst *v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  llvm::PHINode *v23;
  uint64_t *v24;
  llvm::GetElementPtrInst *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  int v54;
  _QWORD *v55;
  _QWORD *v56;
  llvm::PHINode *v57;
  _BYTE *v58;
  _OWORD v59[8];
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  char v66;
  char v67;
  _BYTE v68[64];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  _QWORD v78[3];
  _OWORD v79[2];
  uint64_t v80;
  __int128 v81[2];
  uint64_t v82;
  uint64_t *v83[5];

  v83[2] = *(uint64_t **)MEMORY[0x24BDAC8D0];
  v6 = *a1;
  v7 = a2[2];
  v77 = v6;
  v78[0] = 0;
  v78[2] = 0;
  if (v7)
    sub_22F253B0C(v6, v7, *(_QWORD *)(v7 + 16), (uint64_t)v78);
  sub_22E4F8444((__int128 *)v68, a1, a2[1]);
  v74 = *(_OWORD *)v68;
  v75 = *(_OWORD *)&v68[16];
  v76 = *(_OWORD *)&v68[32];
  sub_22F2617A0((llvm::APInt *)v68, a2[1]);
  if (*(_DWORD *)&v68[8] >= 0x41u)
    v9 = *(uint64_t **)v68;
  else
    v9 = (uint64_t *)v68;
  v10 = *v9;
  if (*(_DWORD *)&v68[8] >= 0x41u && *(_QWORD *)v68)
    MEMORY[0x2348A0E84]();
  if (v10)
  {
    v11 = (uint64_t *)llvm::ConstantInt::get();
    v83[0] = v11;
    v83[1] = v11;
    v12 = (uint64_t *)a1[1];
    v13 = *((_QWORD *)&v74 + 1);
    if ((BYTE8(v75) & 3) != 0)
      v14 = (uint64_t *)sub_22F28ABCC(&v74, *a1);
    else
      v14 = (uint64_t *)v74;
    *(_QWORD *)v68 = "arrayinit.begin";
    *(_WORD *)&v68[32] = 259;
    v15 = sub_22E486CB4(v12, v13, v14, v83, 2, (uint64_t)v68);
    v53 = (uint64_t *)v15;
    if (a3)
      v16 = a3;
    else
      v16 = v15;
    v56 = v16;
    v17 = (_BYTE *)a2[3];
    if (*v17 != 106)
      v17 = 0;
    v58 = v17;
    v18 = *(_QWORD *)(sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 144), a2[1]) + 32);
    sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 144), *(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0), (uint64_t)v68);
    v51 = (v75 | *(_QWORD *)v68) & -(uint64_t)(v75 | *(_QWORD *)v68);
    v19 = sub_22E66C868(*(_QWORD *)(*a1 + 144) + 280, v18, 0);
    v49 = *(_QWORD *)(a1[1] + 48);
    *(_QWORD *)v68 = "arrayinit.body";
    *(_WORD *)&v68[32] = 259;
    v20 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v55 = v20;
    sub_22E5ED9B4((_QWORD *)*a1, v20, 0);
    v21 = (uint64_t *)a1[1];
    v22 = *v11;
    *(_QWORD *)v68 = "arrayinit.index";
    *(_WORD *)&v68[32] = 259;
    v23 = (llvm::PHINode *)sub_22E3C4B80(v21, v22, 2, (uint64_t)v68);
    sub_22E3C4C50(v23, (uint64_t)v11, v49);
    v24 = (uint64_t *)a1[1];
    *(_WORD *)&v68[32] = 257;
    v50 = v19;
    v25 = sub_22E3E5044(v24, v19, v53, (uint64_t *)v23, (uint64_t)v68);
    v26 = sub_22F115260(v18);
    v57 = v23;
    if (!sub_22F245DD4(*a1, v26) || v58)
    {
      v54 = 0;
      v31 = *a1;
      v32 = *(_QWORD *)(*a1 + 1992) - *(_QWORD *)(*a1 + 2000);
      v45 = -1;
      v30 = v51;
    }
    else
    {
      v27 = (uint64_t)v56;
      v28 = *(_QWORD *)v25;
      if (*v56 != *(_QWORD *)v25)
      {
        v29 = (uint64_t *)a1[1];
        *(_WORD *)&v68[32] = 257;
        v27 = sub_22E3C1740(v29, 49, (uint64_t)v56, v28, (uint64_t)v68);
      }
      v30 = v51;
      v54 = v26;
      v56 = (_QWORD *)v27;
      sub_22F25A708(*a1, v27, (uint64_t)v25, v18, v51, (uint64_t)off_24FA63E30[v26 - 1]);
      v31 = *a1;
      v32 = *(_QWORD *)(*a1 + 1992) - *(_QWORD *)(*a1 + 2000);
      v45 = v32;
    }
    v52 = *(_QWORD *)(v31 + 2312);
    v47 = *(_BYTE *)(v31 + 2893);
    *(_BYTE *)(v31 + 2893) = 0;
    v48 = *(_QWORD *)(v31 + 2872);
    *(_QWORD *)(v31 + 2872) = v32;
    v46 = *(_QWORD *)(v31 + 4280);
    *(_QWORD *)(v31 + 4280) = v57;
    sub_22E6281E0(*(_QWORD **)(v31 + 144), v18, (uint64_t)v79);
    *(_QWORD *)&v61 = v25;
    *((_QWORD *)&v61 + 1) = v50;
    *(_QWORD *)&v62 = v30;
    DWORD2(v62) = 0;
    v63 = 0uLL;
    v33 = *(_QWORD *)(*(_QWORD *)(v31 + 144) + 144);
    v81[0] = v79[0];
    v81[1] = v79[1];
    v82 = v80;
    memset(&v68[8], 0, 28);
    *(_QWORD *)&v68[40] = 0;
    *(_QWORD *)&v68[48] = 0;
    v69 = 0uLL;
    *(_QWORD *)((char *)&v70 + 4) = 2;
    *(_DWORD *)v68 = 0;
    v71 = 0u;
    v72 = 0u;
    sub_22E3C113C((uint64_t)v68, &v61, v18, 2, v81, v33);
    if (v58)
    {
      v62 = *(_OWORD *)&v68[8];
      v63 = *(_OWORD *)&v68[24];
      v64 = *(_OWORD *)&v68[40];
      v35 = *a1 + 272;
      *(_QWORD *)&v61 = *a1;
      *((_QWORD *)&v61 + 1) = v35;
      v65 = *((_QWORD *)&v69 + 1);
      v66 = 1;
      v67 = 0;
      sub_22E4F32E0(&v61, v58, v56);
    }
    else
    {
      v34 = (unsigned __int8 *)a2[3];
      v59[6] = v71;
      v59[7] = v72;
      v60 = v73;
      v59[2] = *(_OWORD *)&v68[32];
      v59[3] = *(_OWORD *)&v68[48];
      v59[4] = v69;
      v59[5] = v70;
      v59[0] = *(_OWORD *)v68;
      v59[1] = *(_OWORD *)&v68[16];
      sub_22E4F8518((uint64_t)a1, v34, (uint64_t)v59);
    }
    *(_QWORD *)(v31 + 4280) = v46;
    *(_BYTE *)(v31 + 2893) = v47;
    sub_22E48B274(v31, v32, v52, 0, 0);
    *(_QWORD *)(v31 + 2872) = v48;
    v36 = a1[1];
    v37 = llvm::ConstantInt::get();
    *(_QWORD *)v68 = "arrayinit.next";
    *(_WORD *)&v68[32] = 259;
    v38 = (uint64_t *)sub_22F26180C(v36, (uint64_t)v57, v37, (uint64_t)v68);
    sub_22E3C4C50(v57, (uint64_t)v38, *(_QWORD *)(a1[1] + 48));
    v39 = a1[1];
    v40 = llvm::ConstantInt::get();
    *(_QWORD *)v68 = "arrayinit.done";
    *(_WORD *)&v68[32] = 259;
    v41 = sub_22E3C18F4(v39, 32, v38, v40, (uint64_t)v68);
    *(_QWORD *)v68 = "arrayinit.end";
    *(_WORD *)&v68[32] = 259;
    v42 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v43 = (uint64_t *)a1[1];
    v44 = llvm::User::operator new((llvm::User *)0x40);
    MEMORY[0x23489C09C](v44, v42, v55, v41, 0);
    *(_WORD *)&v68[32] = 257;
    sub_22E3C12C8(v43, v44, (uint64_t)v68);
    sub_22E5ED9B4((_QWORD *)*a1, v42, 0);
    if (v54)
      sub_22F25343C((_QWORD *)*a1, (llvm::LLVMContext *)v45, (uint64_t)v57);
  }
  if (v78[0])
    return sub_22F254324((uint64_t)v78, v77);
  return result;
}

void sub_22E4F3948(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  _OWORD v42[2];
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47[2];
  uint64_t v48;

  if ((*(_BYTE *)(a2 + 2) & 0xF8) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
    {
      v5 = *(_QWORD *)(a2 + 16);
      v6 = *(_QWORD *)(a2 + 24);
      sub_22E4F6780(a1, v4);
      v7 = *a1;
      v8 = *((_OWORD *)a1 + 2);
      v44 = *((_OWORD *)a1 + 1);
      v45 = v8;
      v46 = *((_OWORD *)a1 + 3);
      v9 = *(_QWORD *)(a2 + 8);
      sub_22E6281E0(*(_QWORD **)(v7 + 144), v9, (uint64_t)v42);
      v33 = v44;
      v34 = v45;
      v35 = v46;
      v10 = *(_QWORD *)(*(_QWORD *)(v7 + 144) + 144);
      v47[0] = v42[0];
      v47[1] = v42[1];
      v48 = v43;
      v25 = 0uLL;
      LODWORD(v26) = 0;
      *((_QWORD *)&v24 + 1) = 0;
      *((_QWORD *)&v26 + 1) = 0;
      *(_QWORD *)&v27 = 0;
      v28 = 0uLL;
      *(_QWORD *)((char *)&v29 + 4) = 2;
      LODWORD(v24) = 0;
      v31 = 0u;
      v30 = 0u;
      sub_22E3C113C((uint64_t)&v24, &v33, v9, 2, v47, v10);
      v11 = (*(_DWORD *)a2 >> 18) & 0x3F;
      if (v11 == 6)
      {
        v39 = v30;
        v40 = v31;
        v41 = v32;
        v35 = v26;
        v36 = v27;
        v37 = v28;
        v38 = v29;
        v33 = v24;
        v34 = v25;
        v15 = *(_QWORD *)(v6 + 8);
        v16 = *a1 + 272;
        *(_QWORD *)&v44 = *a1;
        *((_QWORD *)&v44 + 1) = v16;
        LOBYTE(v45) = 0;
        *((_QWORD *)&v45 + 1) = *(_QWORD *)(*(_QWORD *)(v44 + 144) + 232);
        v17 = (uint64_t *)sub_22E50E974((uint64_t *)&v44, (unsigned __int8 *)v6);
        v18 = a1;
        v19 = a2;
        v20 = v5;
        v21 = v15;
        v22 = 1;
      }
      else
      {
        if (v11 != 5
          || ((v12 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 16),
               v12 != 39)
            ? (v13 = v6)
            : (v13 = v5),
              v14 = *(_QWORD *)(v13 + 8),
              *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                       + 16) == 39))
        {
          sub_22E628400(*(_QWORD *)(*a1 + 144), a2, "aggregate binary expression");
          return;
        }
        if (v12 == 39)
          v5 = v6;
        v39 = v30;
        v40 = v31;
        v41 = v32;
        v35 = v26;
        v36 = v27;
        v37 = v28;
        v38 = v29;
        v33 = v24;
        v34 = v25;
        v23 = *a1 + 272;
        *(_QWORD *)&v44 = *a1;
        *((_QWORD *)&v44 + 1) = v23;
        LOBYTE(v45) = 0;
        *((_QWORD *)&v45 + 1) = *(_QWORD *)(*(_QWORD *)(v44 + 144) + 232);
        v17 = (uint64_t *)sub_22E50E974((uint64_t *)&v44, (unsigned __int8 *)v13);
        v18 = a1;
        v19 = a2;
        v20 = v5;
        v21 = v14;
        v22 = 0;
      }
      sub_22E4F7590(v18, (uint64_t)&v33, v19, v20, v17, v21, v22);
    }
    else
    {
      sub_22E628400(*(_QWORD *)(*a1 + 144), a2, "aggregate binary expression");
    }
  }
  else
  {
    sub_22F260DC0(*a1, a2, (uint64_t)&v33);
    sub_22E4F7088(a1, *(_QWORD *)(a2 + 8), &v33, 1);
  }
}

double sub_22E4F3C40(uint64_t *a1, uint64_t a2)
{
  int v4;
  double result;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  __int128 v12[8];
  uint64_t v13;
  _OWORD v14[8];
  uint64_t v15;
  uint64_t v16[2];
  char v17;
  uint64_t v18;

  v4 = (*(_DWORD *)a2 >> 18) & 0x3F;
  if ((v4 - 27) > 0xFFFFFFFD)
  {
    v6 = v4 != 25;
    sub_22E4D8D7C(*a1, *(unsigned int **)(a2 + 16), (uint64_t)v12);
    v14[6] = v12[6];
    v14[7] = v12[7];
    v15 = v13;
    v14[2] = v12[2];
    v14[3] = v12[3];
    v14[4] = v12[4];
    v14[5] = v12[5];
    v14[0] = v12[0];
    v14[1] = v12[1];
    v8 = *(_QWORD *)(a2 + 16);
    v7 = *(_QWORD *)(a2 + 24);
    v9 = *(_QWORD *)(v7 + 8);
    v10 = *a1 + 272;
    v16[0] = *a1;
    v16[1] = v10;
    v17 = 0;
    v18 = *(_QWORD *)(*(_QWORD *)(v16[0] + 144) + 232);
    v11 = (uint64_t *)sub_22E50E974(v16, (unsigned __int8 *)v7);
    sub_22E4F7590(a1, (uint64_t)v14, a2, v8, v11, v9, v6);
    *(_QWORD *)&result = sub_22E4F7088(a1, *(_QWORD *)(a2 + 8), v12, 1).n128_u64[0];
  }
  else
  {
    sub_22E628400(*(_QWORD *)(*a1 + 144), a2, "aggregate binary expression");
  }
  return result;
}

void sub_22E4F3D6C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  llvm::GetElementPtrInst *v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _OWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  llvm::GetElementPtrInst *v38;
  uint64_t v39;
  _OWORD v40[8];
  uint64_t v41;
  _QWORD v42[6];
  char v43;
  _OWORD v44[8];
  uint64_t v45;
  _QWORD v46[6];
  char v47;
  _OWORD v48[8];
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  _OWORD v59[8];
  uint64_t v60;
  _QWORD v61[6];
  char v62;
  _OWORD v63[8];
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  __int128 v83[4];
  __int128 v84;
  __int128 v85;
  __int128 v86;
  _BYTE v87[8];
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91[2];
  uint64_t v92;
  uint64_t *v93[2];
  _OWORD v94[2];
  uint64_t v95;
  uint64_t v96;

  v96 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 144) + 144);
  sub_22E4D8D7C(v4, *(unsigned int **)(a2 + 16), (uint64_t)v87);
  v84 = v88;
  v85 = v89;
  v86 = v90;
  v6 = sub_22EF5C728(v5, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8));
  if (v6)
  {
    if (*(_BYTE *)(v6 + 16) == 2)
      v7 = v6;
    else
      v7 = 0;
  }
  else
  {
    v7 = 0;
  }
  v8 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                               + 24));
  v9 = sub_22EFC3B90(v8);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)(*(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
    {
      v12 = sub_22F10ACF8(v11);
      if ((*(_QWORD *)((v12 & 0xFFFFFFFFFFFFFFF0) + 8) | v12 & 7) == (*(_QWORD *)((*(_QWORD *)(v7 + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                                   + 8) | *(_QWORD *)(v7 + 32) & 7))
      {
        sub_22E4F8444(v83, a1, *(_QWORD *)(a2 + 8));
        v14 = *a1;
        v50 = v83[0];
        v51 = v83[1];
        v52 = v83[2];
        v15 = *(_QWORD *)(a2 + 8);
        sub_22E6281E0(*(_QWORD **)(v14 + 144), v15, (uint64_t)v94);
        v65 = v50;
        v66 = v51;
        v67 = v52;
        v16 = *(_QWORD *)(*(_QWORD *)(v14 + 144) + 144);
        v91[0] = v94[0];
        v91[1] = v94[1];
        v92 = v95;
        LODWORD(v76) = 0;
        *((_QWORD *)&v74 + 1) = 0;
        v75 = 0uLL;
        *(_QWORD *)&v77 = 0;
        *((_QWORD *)&v76 + 1) = 0;
        v78 = 0uLL;
        *(_QWORD *)((char *)&v79 + 4) = 2;
        LODWORD(v74) = 0;
        v80 = 0u;
        v81 = 0u;
        sub_22E3C113C((uint64_t)&v74, &v65, v15, 2, v91, v16);
        v17 = (_QWORD *)*a1;
        v63[6] = v80;
        v63[7] = v81;
        v64 = v82;
        v63[2] = v76;
        v63[3] = v77;
        v63[4] = v78;
        v63[5] = v79;
        v63[0] = v74;
        v63[1] = v75;
        sub_22E4EC638(v17, (uint64_t)v63, v10, (uint64_t)&v65);
        v18 = (uint64_t *)llvm::ConstantInt::get();
        *(_QWORD *)&v94[0] = v18;
        *((_QWORD *)&v94[0] + 1) = v18;
        v19 = (uint64_t *)a1[1];
        v20 = *((_QWORD *)&v84 + 1);
        if ((BYTE8(v85) & 3) != 0)
          v21 = (uint64_t *)sub_22F28ABCC(&v84, *a1);
        else
          v21 = (uint64_t *)v84;
        *(_QWORD *)&v50 = "arraystart";
        LOWORD(v52) = 259;
        v22 = sub_22E486CB4(v19, v20, v21, (uint64_t **)v94, 2, (uint64_t)&v50);
        v23 = *a1;
        v61[1] = 0;
        v61[0] = v22;
        v62 = 0;
        v59[6] = v71;
        v59[7] = v72;
        v60 = v73;
        v59[2] = v67;
        v59[3] = v68;
        v59[4] = v69;
        v59[5] = v70;
        v59[0] = v65;
        v59[1] = v66;
        sub_22E4DAAE0(v23, (uint64_t)v61, (uint64_t)v59, 0);
        do
        {
          v10 = *(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF8;
          if (!v10)
            goto LABEL_9;
        }
        while ((*(_DWORD *)(v10 + 28) & 0x7Fu) - 49 >= 3);
        v24 = (uint64_t *)llvm::ConstantInt::get();
        v25 = (_QWORD *)*a1;
        v48[6] = v80;
        v48[7] = v81;
        v49 = v82;
        v48[2] = v76;
        v48[3] = v77;
        v48[4] = v78;
        v48[5] = v79;
        v48[0] = v74;
        v48[1] = v75;
        sub_22E4EC638(v25, (uint64_t)v48, v10, (uint64_t)&v50);
        v26 = *(_QWORD *)(v10 + 48);
        v27 = v26 & 0xFFFFFFFFFFFFFFF0;
        v28 = *(_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF0);
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v28 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
        {
          v29 = sub_22F10ACF8(v28);
          if ((*(_QWORD *)((v29 & 0xFFFFFFFFFFFFFFF0) + 8) | v29 & 7) == (*(_QWORD *)((*(_QWORD *)(v7 + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                                       + 8) | *(_QWORD *)(v7 + 32) & 7))
          {
            v93[0] = v18;
            v93[1] = v24;
            v35 = (uint64_t *)a1[1];
            v36 = *((_QWORD *)&v84 + 1);
            if ((BYTE8(v85) & 3) != 0)
              v37 = (uint64_t *)sub_22F28ABCC(&v84, *a1);
            else
              v37 = (uint64_t *)v84;
            *(_QWORD *)&v91[0] = "arrayend";
            LOWORD(v92) = 259;
            v38 = sub_22E486CB4(v35, v36, v37, v93, 2, (uint64_t)v91);
            v39 = *a1;
            v46[0] = v38;
            v46[1] = 0;
            v47 &= 0xF8u;
            v44[6] = v56;
            v44[7] = v57;
            v45 = v58;
            v44[2] = v52;
            v44[3] = v53;
            v44[4] = v54;
            v44[5] = v55;
            v44[0] = v50;
            v44[1] = v51;
            v33 = v46;
            v34 = v44;
            v32 = v39;
LABEL_26:
            sub_22E4DAAE0(v32, (uint64_t)v33, (uint64_t)v34, 0);
            return;
          }
          v26 = *(_QWORD *)(v10 + 48);
          v27 = v26 & 0xFFFFFFFFFFFFFFF0;
        }
        v30 = sub_22EF67C8C(v5);
        v31 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFFF0) + 8) | v30 & 7;
        v32 = *a1;
        if ((*(_QWORD *)(v27 + 8) | v26 & 7) != v31)
        {
          v13 = *(_QWORD *)(v32 + 144);
          goto LABEL_10;
        }
        v42[0] = v24;
        v42[1] = 0;
        v43 &= 0xF8u;
        v40[6] = v56;
        v40[7] = v57;
        v41 = v58;
        v40[2] = v52;
        v40[3] = v53;
        v40[4] = v54;
        v40[5] = v55;
        v40[0] = v50;
        v40[1] = v51;
        v33 = v42;
        v34 = v40;
        goto LABEL_26;
      }
    }
  }
LABEL_9:
  v13 = *(_QWORD *)(*a1 + 144);
LABEL_10:
  sub_22E628400(v13, a2, "weird std::initializer_list");
}

void sub_22E4F428C(_QWORD **a1, uint64_t a2)
{
  _QWORD v4[2];
  uint64_t v5;

  v5 = a2;
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22EFFA9C0(a2, *(_QWORD *)((*a1)[18] + 144)) & 0xFFFFFFFFFFFFFFF0)
                                          + 8) & 0xFFFFFFFFFFFFFFF0)
                  + 16) & 0xFE) == 0x28)
  {
    sub_22E4F7F10((uint64_t)a1, a2);
  }
  else
  {
    v4[0] = a1;
    v4[1] = &v5;
    sub_22E4F89F8(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD))sub_22E4F8CA8, (uint64_t)v4);
  }
}

void sub_22E4F4328(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  llvm::Instruction *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  llvm::Type *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 *v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  _QWORD *v45;
  unsigned __int8 *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  unsigned int v50;
  uint64_t v51;
  _QWORD *v52;
  unsigned __int8 *v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  llvm::Type *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  void *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t *v72;
  llvm::GetElementPtrInst *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  llvm::GetElementPtrInst *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned __int8 *v91;
  uint64_t v92;
  uint64_t *v93;
  unsigned __int8 *v94;
  uint64_t *v95;
  int v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  int v100;
  uint64_t *v101;
  llvm::GetElementPtrInst *v102;
  _QWORD *v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t *v115;
  uint64_t v116;
  llvm::PHINode *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t *v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t *v130;
  uint64_t v131;
  llvm::Type *v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  llvm::LLVMContext *v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  uint64_t *v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  llvm::GetElementPtrInst *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  _QWORD *v161;
  __int128 v162[3];
  _OWORD v163[8];
  uint64_t v164;
  _OWORD v165[8];
  uint64_t v166;
  _OWORD v167[8];
  uint64_t v168;
  _OWORD v169[8];
  uint64_t v170;
  _OWORD v171[8];
  uint64_t v172;
  _OWORD v173[8];
  uint64_t v174;
  __int128 v175[3];
  _OWORD v176[3];
  uint64_t v177;
  char v178;
  _OWORD v179[3];
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  uint64_t v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  char v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  uint64_t v204;
  __int128 v205;
  __int128 v206;
  uint64_t v207;
  uint64_t v208;
  _QWORD v209[3];
  int v210;
  uint64_t v211;
  uint64_t v212;
  __int128 v213;
  __int128 v214;
  uint64_t v215;
  uint64_t v216;
  __int128 v217;
  __int128 v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  _OWORD v222[2];
  uint64_t v223;
  __int128 v224;
  __int128 v225;
  uint64_t v226;
  void *v227[2];
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  uint64_t v235;
  _BYTE v236[64];
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  uint64_t v241;
  uint64_t *v242[5];

  v3 = a1;
  v242[2] = *(uint64_t **)MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 2) & 4) != 0)
    sub_22E628400(*(_QWORD *)(*a1 + 144), a2, "GNU array range designator extension");
  if (sub_22EFFD7E8(a2))
  {
    v4 = **(_QWORD **)(a2 + 16);
    v5 = (_QWORD *)*v3;
    v227[0] = 0;
    v227[1] = v5;
    sub_22EFF605C(v4);
    sub_22E48EE24((uint64_t *)v227, v6, 0);
    sub_22E4F0158(v3, v4);
    sub_22E48F084(v227);
    return;
  }
  sub_22E4F8444(&v192, v3, *(_QWORD *)(a2 + 8));
  v7 = (_QWORD *)*v3;
  *(_OWORD *)v236 = v192;
  *(_OWORD *)&v236[16] = v193;
  *(_OWORD *)&v236[32] = v194;
  v8 = *(_QWORD *)(a2 + 8);
  sub_22E6281E0((_QWORD *)v7[18], v8, (uint64_t)&v217);
  *(_OWORD *)v227 = *(_OWORD *)v236;
  v228 = *(_OWORD *)&v236[16];
  v229 = *(_OWORD *)&v236[32];
  v9 = *(_QWORD *)(v7[18] + 144);
  v196 = v217;
  v197 = v218;
  *(_QWORD *)&v198 = v219;
  LODWORD(v185) = 0;
  *((_QWORD *)&v183 + 1) = 0;
  v184 = 0uLL;
  *(_QWORD *)&v186 = 0;
  *((_QWORD *)&v185 + 1) = 0;
  v187 = 0uLL;
  *(_QWORD *)((char *)&v188 + 4) = 2;
  LODWORD(v183) = 0;
  v189 = 0u;
  v190 = 0u;
  sub_22E3C113C((uint64_t)&v183, (__int128 *)v227, v8, 2, &v196, v9);
  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v160 = v3;
  if ((*(_DWORD *)(v11 + 16) & 0xFEu) - 2 > 3)
  {
    v12 = (*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3;
    v13 = sub_22F114198(*(_QWORD *)(v11 + 24));
    v14 = v13;
    v15 = 0;
    v16 = 0;
    v227[0] = &v228;
    v227[1] = (void *)0x1000000000;
    if (v13 && (*(_DWORD *)(v13 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD)
    {
      v17 = sub_22E46A3A0(v13);
      if (v17 == v18)
      {
        v16 = 0;
        v15 = 0;
      }
      else
      {
        v19 = v17;
        v20 = v18;
        v15 = 0;
        v16 = 0;
        do
        {
          v21 = *(_QWORD *)(**(_QWORD **)(v19 + 16) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v21 + 8) & 0xF) != 0)
            v21 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v19 + 16));
          v22 = sub_22F10C2A4(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0));
          if (v22)
          {
            if ((*(_DWORD *)(v22 + 28) & 0x7Fu) - 35 >= 3)
              v23 = 0;
            else
              v23 = v22;
          }
          else
          {
            v23 = 0;
          }
          v24 = (_QWORD *)*v3;
          v179[0] = v192;
          v179[1] = v193;
          v179[2] = v194;
          sub_22E4801BC(v24, v179, v14, v23, 0, v236);
          v176[0] = *(_OWORD *)v236;
          v176[1] = *(_OWORD *)&v236[16];
          v176[2] = *(_OWORD *)&v236[32];
          if (sub_22F261728(*v3, v14, v23, *(_BYTE *)(v19 + 12) & 1))
            v25 = 17;
          else
            v25 = 1;
          v26 = *v3;
          v27 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v15);
          v177 = 0;
          v178 = v25;
          sub_22E4EF100(v26, v27, v176);
          v28 = *(_QWORD *)(**(_QWORD **)(v19 + 16) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v28 + 8) & 0xF) != 0)
            v28 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v19 + 16));
          v29 = sub_22F115260(v28 & 0xFFFFFFFFFFFFFFF0);
          if (v29)
          {
            v30 = v29;
            v31 = *v3;
            v175[0] = *(_OWORD *)v236;
            v175[1] = *(_OWORD *)&v236[16];
            v175[2] = *(_OWORD *)&v236[32];
            v32 = *(_QWORD *)(**(_QWORD **)(v19 + 16) & 0xFFFFFFFFFFFFFFF0);
            if ((*(_BYTE *)(v32 + 8) & 0xF) != 0)
            {
              v158 = v31;
              v32 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v19 + 16));
              v31 = v158;
            }
            sub_22F259F50(v31, v30, v175, v32 & 0xFFFFFFFFFFFFFFF0);
            v34 = *(_QWORD *)(*v3 + 1992);
            v35 = *(_QWORD *)(*v3 + 2000);
            v36 = LODWORD(v227[1]);
            if (LODWORD(v227[1]) >= (unint64_t)HIDWORD(v227[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v36 = LODWORD(v227[1]);
            }
            *((_QWORD *)v227[0] + v36) = v34 - v35;
            ++LODWORD(v227[1]);
            v3 = v160;
            if (!v16)
            {
              v37 = *v160;
              llvm::Constant::getNullValue(*(llvm::Constant **)(*v160 + 96), v33);
              LOWORD(v219) = 257;
              v16 = (llvm::Instruction *)llvm::User::operator new((llvm::User *)0x40);
              LOWORD(v198) = 257;
              llvm::LoadInst::LoadInst();
              (*(void (**)(_QWORD, llvm::Instruction *, __int128 *, _QWORD, _QWORD))(**(_QWORD **)(v37 + 352)
                                                                                              + 16))(*(_QWORD *)(v37 + 352), v16, &v217, *(_QWORD *)(v37 + 320), *(_QWORD *)(v37 + 328));
              v38 = *(unsigned int *)(v37 + 280);
              if ((_DWORD)v38)
              {
                v39 = *(_QWORD *)(v37 + 272);
                v40 = v39 + 16 * v38;
                do
                {
                  llvm::Instruction::setMetadata();
                  v39 += 16;
                }
                while (v39 != v40);
              }
              v3 = v160;
            }
          }
          ++v15;
          v19 += 24;
        }
        while (v19 != v20);
      }
    }
    v41 = (__int128 *)(*v3 + 4232);
    v42 = *(_OWORD *)(*v3 + 4248);
    v196 = *v41;
    v197 = v42;
    v198 = v41[2];
    v43 = v193;
    *v41 = v192;
    v41[1] = v43;
    v41[2] = v194;
    if ((*(_DWORD *)(v14 + 72) & 0xE000) == 0x4000)
    {
      v44 = *(_QWORD *)(a2 + 56);
      if ((v44 & 2) != 0 && (v44 & 0xFFFFFFFFFFFFFFFCLL) != 0)
      {
        v45 = (_QWORD *)*v3;
        v173[6] = v189;
        v173[7] = v190;
        v174 = v191;
        v173[2] = v185;
        v173[3] = v186;
        v173[4] = v187;
        v173[5] = v188;
        v173[0] = v183;
        v173[1] = v184;
        sub_22E4EC638(v45, (uint64_t)v173, v44 & 0xFFFFFFFFFFFFFFFCLL, (uint64_t)v236);
        if ((_DWORD)v12)
        {
          v46 = **(unsigned __int8 ***)(a2 + 16);
          v171[6] = v239;
          v171[7] = v240;
          v172 = v241;
          v171[2] = *(_OWORD *)&v236[32];
          v171[3] = *(_OWORD *)&v236[48];
          v171[4] = v237;
          v171[5] = v238;
          v171[0] = *(_OWORD *)v236;
          v171[1] = *(_OWORD *)&v236[16];
          sub_22E4F8518((uint64_t)v3, v46, (uint64_t)v171);
        }
        else
        {
          v169[6] = v239;
          v169[7] = v240;
          v170 = v241;
          v169[2] = *(_OWORD *)&v236[32];
          v169[3] = *(_OWORD *)&v236[48];
          v169[4] = v237;
          v169[5] = v238;
          v169[0] = *(_OWORD *)v236;
          v169[1] = *(_OWORD *)&v236[16];
          sub_22E4F877C(v3, (uint64_t)v169);
        }
      }
    }
    else
    {
      v47 = sub_22EFC3B90(v14);
      if (v47)
      {
        v48 = v47;
        v49 = (uint64_t *)(v47 + 48);
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v47 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) != 4)
        {
LABEL_48:
          if ((*(_BYTE *)(v48 + 68) & 1) != 0 && !*(_QWORD *)(v48 + 40))
            goto LABEL_63;
          if (v15 != (_DWORD)v12
            || (v195 & 4) == 0
            || (sub_22E66DE5C(*(_QWORD *)(*v3 + 144) + 280, *(_QWORD *)(a2 + 8)) & 1) == 0)
          {
            v52 = (_QWORD *)*v3;
            v167[6] = v189;
            v167[7] = v190;
            v168 = v191;
            v167[2] = v185;
            v167[3] = v186;
            v167[4] = v187;
            v167[5] = v188;
            v167[0] = v183;
            v167[1] = v184;
            sub_22E4EC638(v52, (uint64_t)v167, v48, (uint64_t)v236);
            LOBYTE(v238) = v238 | 4;
            if (v15 >= v12)
            {
              v163[6] = v239;
              v163[7] = v240;
              v164 = v241;
              v163[2] = *(_OWORD *)&v236[32];
              v163[3] = *(_OWORD *)&v236[48];
              v163[4] = v237;
              v163[5] = v238;
              v163[0] = *(_OWORD *)v236;
              v163[1] = *(_OWORD *)&v236[16];
              sub_22E4F877C(v3, (uint64_t)v163);
            }
            else
            {
              v53 = *(unsigned __int8 **)(*(_QWORD *)(a2 + 16) + 8 * v15);
              v165[6] = v239;
              v165[7] = v240;
              v166 = v241;
              v165[2] = *(_OWORD *)&v236[32];
              v165[3] = *(_OWORD *)&v236[48];
              v165[4] = v237;
              v165[5] = v238;
              v165[0] = *(_OWORD *)v236;
              v165[1] = *(_OWORD *)&v236[16];
              sub_22E4F8518((uint64_t)v3, v53, (uint64_t)v165);
              ++v15;
            }
            v54 = sub_22F115260(*v49);
            if (v54 && (v56 = v54, sub_22F245DD4(*v3, v54)))
            {
              v57 = *v3;
              v162[0] = *(_OWORD *)&v236[8];
              v162[1] = *(_OWORD *)&v236[24];
              v162[2] = *(_OWORD *)&v236[40];
              sub_22F259E14(v57, 1, v162, *v49, (uint64_t)off_24FA63E30[v56 - 1], 0);
              v59 = *(_QWORD *)(*v3 + 1992);
              v60 = *(_QWORD *)(*v3 + 2000);
              v61 = LODWORD(v227[1]);
              if (LODWORD(v227[1]) >= (unint64_t)HIDWORD(v227[1]))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v61 = LODWORD(v227[1]);
              }
              *((_QWORD *)v227[0] + v61) = v59 - v60;
              ++LODWORD(v227[1]);
              if (!v16)
              {
                v62 = *v3;
                llvm::Constant::getNullValue(*(llvm::Constant **)(*v3 + 96), v58);
                LOWORD(v215) = 257;
                v16 = (llvm::Instruction *)llvm::User::operator new((llvm::User *)0x40);
                LOWORD(v219) = 257;
                llvm::LoadInst::LoadInst();
                (*(void (**)(_QWORD, llvm::Instruction *, __int128 *, _QWORD, _QWORD))(**(_QWORD **)(v62 + 352)
                                                                                                + 16))(*(_QWORD *)(v62 + 352), v16, &v213, *(_QWORD *)(v62 + 320), *(_QWORD *)(v62 + 328));
                v63 = *(unsigned int *)(v62 + 280);
                if ((_DWORD)v63)
                {
                  v64 = *(_QWORD *)(v62 + 272);
                  v65 = v64 + 16 * v63;
                  do
                  {
                    llvm::Instruction::setMetadata();
                    v64 += 16;
                  }
                  while (v64 != v65);
                }
              }
            }
            else if (!*(_DWORD *)v236)
            {
              if (*(_QWORD *)&v236[8])
              {
                v55 = sub_22F289EE8((uint64_t)&v236[8], *v3);
                if (v55)
                {
                  if (*(_BYTE *)(v55 + 16) == 62 && !*(_QWORD *)(v55 + 8))
                    llvm::Instruction::eraseFromParent((llvm::Instruction *)v55);
                }
              }
            }
LABEL_63:
            while (1)
            {
              v48 = *(_QWORD *)(v48 + 8) & 0xFFFFFFFFFFFFFFF8;
              if (!v48)
                break;
              if ((*(_DWORD *)(v48 + 28) & 0x7Fu) - 49 <= 2)
              {
                v49 = (uint64_t *)(v48 + 48);
                if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v48 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                              + 16) != 4)
                  goto LABEL_48;
                break;
              }
            }
          }
        }
      }
      if (LODWORD(v227[1]))
      {
        v50 = LODWORD(v227[1]) - 1;
        do
        {
          v51 = v50;
          sub_22F25343C((_QWORD *)*v3, *((llvm::LLVMContext **)v227[0] + v50--), (uint64_t)v16);
        }
        while (v51);
      }
      if (v16)
        llvm::Instruction::eraseFromParent(v16);
    }
    v66 = v197;
    *v41 = v196;
    v41[1] = v66;
    v41[2] = v198;
    v67 = v227[0];
    if (v227[0] != &v228)
      goto LABEL_77;
    return;
  }
  v180 = v192;
  v181 = v193;
  v182 = v194;
  v68 = *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16);
  v69 = (v68 >> 3);
  v145 = *(_QWORD *)(*((_QWORD *)&v192 + 1) + 32);
  v221 = *(_QWORD *)(sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(*v3 + 144) + 144), v10) + 32);
  v242[0] = (uint64_t *)llvm::ConstantInt::get();
  v242[1] = v242[0];
  v70 = (uint64_t *)v3[1];
  v71 = *((_QWORD *)&v180 + 1);
  if ((BYTE8(v181) & 3) != 0)
    v72 = (uint64_t *)sub_22F28ABCC(&v180, *v3);
  else
    v72 = (uint64_t *)v180;
  v227[0] = "arrayinit.begin";
  LOWORD(v229) = 259;
  v73 = sub_22E486CB4(v70, v71, v72, v242, 2, (uint64_t)v227);
  sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(*v3 + 144) + 144), *(_QWORD *)(v221 & 0xFFFFFFFFFFFFFFF0), (uint64_t)v227);
  v74 = (unint64_t)v227[0];
  v75 = v181;
  v159 = sub_22E66C868(*(_QWORD *)(*v3 + 144) + 280, v221, 0);
  v146 = (uint64_t *)v73;
  v148 = (v68 >> 3);
  if (v74 * v69 < 0x11
    || !sub_22F111968(&v221, *(_QWORD *)(*(_QWORD *)(*v3 + 144) + 144))
    || (v76 = *v3, v77 = *(_QWORD *)(*v3 + 144), (*(_DWORD *)(*(_QWORD *)(v77 + 216) + 56) & 0xFFFFFFFE) == 0x30))
  {
LABEL_85:
    v144 = v68;
    v155 = (v75 | v74) & -(uint64_t)(v75 | v74);
    v78 = sub_22F115260(v221);
    v79 = sub_22F245DD4(*v3, v78);
    v80 = *v3;
    v156 = a2;
    if (v79)
    {
      v132 = *(llvm::Type **)v73;
      v133 = *(unsigned __int8 *)(v80 + 130);
      v227[0] = "arrayinit.endOfInit";
      LOWORD(v229) = 259;
      v134 = sub_22E4D83CC(v80, v132, v133, (uint64_t)v227, 0, 0);
      v136 = 0;
      if (v134 <= 7)
        v137 = 0;
      else
        v137 = v134 & 0xFFFFFFFFFFFFFFF8;
      v138 = v135 & 0xFFFFFFFFFFFFFFF8;
      if (v134 <= 7)
        v138 = 0;
      v150 = (void *)v138;
      if (v134 >= 8)
        v136 = 1 << (v135 & 7 | (8 * (v134 & 7)));
      v139 = v3[1];
      *(_QWORD *)&v217 = v137;
      *((_QWORD *)&v217 + 1) = v138;
      *(_QWORD *)&v218 = v136;
      DWORD2(v218) = 0;
      v220 = 0;
      v219 = 0;
      v140 = (void *)v137;
      v143 = sub_22E3BEDDC(v139, v73, &v217, 0);
      v141 = *v3;
      v152 = v140;
      *(_QWORD *)&v213 = v140;
      *((_QWORD *)&v213 + 1) = v150;
      v149 = v136;
      *(_QWORD *)&v214 = v136;
      DWORD2(v214) = 0;
      v216 = 0;
      v215 = 0;
      v147 = v78;
      sub_22F25A7E8(v141, (uint64_t)v73, &v213, v221, v155, (uint64_t)off_24FA63E30[v78 - 1]);
      v81 = *(_QWORD *)(*v3 + 1992) - *(_QWORD *)(*v3 + 2000);
    }
    else
    {
      v152 = 0;
      v149 = 0;
      v150 = 0;
      v143 = 0;
      v147 = 0;
      v81 = -1;
    }
    v142 = (llvm::LLVMContext *)v81;
    v151 = (uint64_t *)llvm::ConstantInt::get();
    v82 = (uint64_t *)v73;
    if (v69)
    {
      v83 = 0;
      v82 = (uint64_t *)v73;
      do
      {
        if (v83)
        {
          v84 = (uint64_t)v3;
          v85 = (uint64_t *)v3[1];
          v227[0] = "arrayinit.element";
          LOWORD(v229) = 259;
          v86 = sub_22E3E5044(v85, v159, v82, v151, (uint64_t)v227);
          if (v152)
          {
            v87 = v3[1];
            v209[0] = v152;
            v209[1] = v150;
            v209[2] = v149;
            v210 = 0;
            v211 = 0;
            v212 = 0;
            sub_22E3BEDDC(v87, v86, v209, 0);
          }
        }
        else
        {
          v84 = (uint64_t)v3;
          v86 = (llvm::GetElementPtrInst *)v82;
        }
        v88 = *(_QWORD *)v84;
        v89 = v221;
        sub_22E6281E0(*(_QWORD **)(*(_QWORD *)v84 + 144), v221, (uint64_t)&v224);
        v82 = (uint64_t *)v86;
        *(_QWORD *)&v196 = v86;
        *((_QWORD *)&v196 + 1) = v159;
        *(_QWORD *)&v197 = v155;
        DWORD2(v197) = 0;
        v198 = 0uLL;
        v90 = *(_QWORD *)(*(_QWORD *)(v88 + 144) + 144);
        v205 = v224;
        v206 = v225;
        v207 = v226;
        v228 = 0uLL;
        v227[1] = 0;
        LODWORD(v229) = 0;
        *((_QWORD *)&v229 + 1) = 0;
        *(_QWORD *)&v230 = 0;
        v231 = 0uLL;
        *(_QWORD *)((char *)&v232 + 4) = 2;
        LODWORD(v227[0]) = 0;
        v233 = 0u;
        v234 = 0u;
        sub_22E3C113C((uint64_t)v227, &v196, v89, 2, &v205, v90);
        v91 = *(unsigned __int8 **)(*(_QWORD *)(v156 + 16) + v83);
        v239 = v233;
        v240 = v234;
        v241 = v235;
        *(_OWORD *)&v236[32] = v229;
        *(_OWORD *)&v236[48] = v230;
        v238 = v232;
        v237 = v231;
        *(_OWORD *)&v236[16] = v228;
        *(_OWORD *)v236 = *(_OWORD *)v227;
        sub_22E4F8518(v84, v91, (uint64_t)v236);
        v83 += 8;
      }
      while (8 * v148 != v83);
    }
    v92 = *(_QWORD *)(v156 + 56);
    v93 = (uint64_t *)(v92 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v92 & 2) != 0)
      v94 = 0;
    else
      v94 = (unsigned __int8 *)(v92 & 0xFFFFFFFFFFFFFFFCLL);
    if (v94)
    {
      v95 = v3;
      v96 = v147;
      v97 = v145;
      while (1)
      {
        v98 = *(unsigned __int8 *)v93;
        if (v98 != 180)
          break;
        if (((v93[3] - v93[2]) & 0x7FFFFFFF8) != 0)
          goto LABEL_109;
        v99 = v93[7];
        LOBYTE(v100) = 1;
        if ((v99 & 2) == 0)
        {
          v93 = (uint64_t *)(v99 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v99 & 0xFFFFFFFFFFFFFFFCLL) != 0)
            continue;
        }
        goto LABEL_110;
      }
      if (v98 == 179)
      {
        LOBYTE(v100) = 1;
        goto LABEL_110;
      }
      if ((v98 & 0xFE) != 0x76 || sub_22EFC0EB8(v93[2]))
      {
LABEL_109:
        LOBYTE(v100) = 0;
        goto LABEL_110;
      }
      v100 = *(unsigned __int8 *)(v93[2] + 82) >> 7;
    }
    else
    {
      LOBYTE(v100) = 1;
      v95 = v3;
      v96 = v147;
      v97 = v145;
    }
LABEL_110:
    if (v97 != v148
      && ((v100 & (*((unsigned __int8 *)v95 + 72) >> 2)) != 1
       || (sub_22E66DE5C(*(_QWORD *)(*v95 + 144) + 280, v221) & 1) == 0))
    {
      if ((v144 & 0x7FFFFFFF8) != 0)
      {
        v101 = (uint64_t *)v95[1];
        v227[0] = "arrayinit.start";
        LOWORD(v229) = 259;
        v102 = sub_22E3E5044(v101, v159, v82, v151, (uint64_t)v227);
        if (v152)
        {
          v103 = (_QWORD *)v95[1];
          *(_QWORD *)&v205 = v152;
          *((_QWORD *)&v205 + 1) = v150;
          *(_QWORD *)&v206 = v149;
          DWORD2(v206) = 0;
          v208 = 0;
          v207 = 0;
          sub_22E3BEDDC(v103, v102, &v205, 0);
        }
      }
      else
      {
        v102 = (llvm::GetElementPtrInst *)v82;
      }
      v111 = (uint64_t *)v95[1];
      v112 = (uint64_t *)llvm::ConstantInt::get();
      v227[0] = "arrayinit.end";
      LOWORD(v229) = 259;
      v157 = sub_22E3E5044(v111, v159, v146, v112, (uint64_t)v227);
      v113 = *(_QWORD *)(v95[1] + 48);
      v227[0] = "arrayinit.body";
      LOWORD(v229) = 259;
      v114 = (_QWORD *)operator new();
      llvm::BasicBlock::BasicBlock();
      sub_22E5ED9B4((_QWORD *)*v95, v114, 0);
      v115 = (uint64_t *)v95[1];
      v116 = *(_QWORD *)v102;
      v227[0] = "arrayinit.cur";
      LOWORD(v229) = 259;
      v117 = (llvm::PHINode *)sub_22E3C4B80(v115, v116, 2, (uint64_t)v227);
      sub_22E3C4C50(v117, (uint64_t)v102, v113);
      v118 = *v95;
      v119 = *(_QWORD *)(*v95 + 1992) - *(_QWORD *)(*v95 + 2000);
      v120 = *(_QWORD *)(*v95 + 2312);
      v121 = *(_BYTE *)(*v95 + 2893);
      *(_BYTE *)(v118 + 2893) = 0;
      v153 = v120;
      v154 = *(_QWORD *)(v118 + 2872);
      *(_QWORD *)(v118 + 2872) = v119;
      v122 = v221;
      sub_22E6281E0(*(_QWORD **)(v118 + 144), v221, (uint64_t)v222);
      *(_QWORD *)&v196 = v117;
      *((_QWORD *)&v196 + 1) = v159;
      *(_QWORD *)&v197 = v155;
      DWORD2(v197) = 0;
      v198 = 0uLL;
      v123 = *(_QWORD *)(*(_QWORD *)(v118 + 144) + 144);
      v224 = v222[0];
      v225 = v222[1];
      v226 = v223;
      v228 = 0uLL;
      v227[1] = 0;
      LODWORD(v229) = 0;
      *(_QWORD *)&v230 = 0;
      *((_QWORD *)&v229 + 1) = 0;
      v231 = 0uLL;
      *(_QWORD *)((char *)&v232 + 4) = 2;
      LODWORD(v227[0]) = 0;
      v234 = 0u;
      v233 = 0u;
      sub_22E3C113C((uint64_t)v227, &v196, v122, 2, &v224, v123);
      v161 = v114;
      v202 = v233;
      v203 = v234;
      v204 = v235;
      v198 = v229;
      v199 = v230;
      v201 = v232;
      v200 = v231;
      v197 = v228;
      v196 = *(_OWORD *)v227;
      if (v94)
        sub_22E4F8518((uint64_t)v95, v94, (uint64_t)&v196);
      else
        sub_22E4F877C(v95, (uint64_t)&v196);
      *(_BYTE *)(v118 + 2893) = v121;
      sub_22E48B274(v118, v119, v153, 0, 0);
      *(_QWORD *)(v118 + 2872) = v154;
      v124 = (uint64_t *)v95[1];
      v227[0] = "arrayinit.next";
      LOWORD(v229) = 259;
      v125 = (uint64_t *)sub_22E3E5044(v124, v159, (uint64_t *)v117, v151, (uint64_t)v227);
      if (v152)
      {
        v126 = (_QWORD *)v95[1];
        v227[0] = v152;
        v227[1] = v150;
        *(_QWORD *)&v228 = v149;
        DWORD2(v228) = 0;
        v229 = 0uLL;
        sub_22E3BEDDC(v126, v125, v227, 0);
      }
      v127 = v95[1];
      *(_QWORD *)&v224 = "arrayinit.done";
      LOWORD(v226) = 259;
      v128 = sub_22E3C18F4(v127, 32, v125, (uint64_t)v157, (uint64_t)&v224);
      *(_QWORD *)&v224 = "arrayinit.end";
      LOWORD(v226) = 259;
      v129 = (_QWORD *)operator new();
      llvm::BasicBlock::BasicBlock();
      v130 = (uint64_t *)v95[1];
      v131 = llvm::User::operator new((llvm::User *)0x40);
      MEMORY[0x23489C09C](v131, v129, v161, v128, 0);
      LOWORD(v226) = 257;
      sub_22E3C12C8(v130, v131, (uint64_t)&v224);
      sub_22E3C4C50(v117, (uint64_t)v125, *(_QWORD *)(v95[1] + 48));
      sub_22E5ED9B4((_QWORD *)*v95, v129, 0);
    }
    if (v96)
      sub_22F25343C((_QWORD *)*v95, v142, v143);
    return;
  }
  v104 = 0;
  *(_QWORD *)v236 = *(_QWORD *)(*v3 + 144);
  *(_QWORD *)&v236[8] = v76;
  *(_DWORD *)&v236[16] = 0;
  v236[20] = 0;
  *(_QWORD *)&v236[32] = &v236[48];
  *(_QWORD *)&v236[40] = 0x400000000;
  v105 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v105 & 8) != 0)
    v104 = *(_DWORD *)((v105 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11;
  v236[17] = 1;
  *(_DWORD *)&v236[24] = v104;
  if (!sub_22F262E6C(v236, a2, v10))
  {
    v236[19] = 1;
    if (*(_BYTE **)&v236[32] != &v236[48])
      free(*(void **)&v236[32]);
    v69 = (v68 >> 3);
    goto LABEL_85;
  }
  v106 = llvm::User::operator new((llvm::User *)0x58);
  sub_22E62D664(v77, v10, 1);
  v227[0] = "constinit";
  LOWORD(v229) = 259;
  llvm::GlobalVariable::GlobalVariable();
  sub_22E507758((uint64_t)v236, v106);
  v107 = sub_22EF5D130(*(_QWORD *)(v77 + 144), v10);
  llvm::GlobalObject::setAlignment();
  v108 = *(_QWORD *)(v106 + 24);
  v109 = *v3;
  sub_22E6281E0(*(_QWORD **)(*v3 + 144), v10, (uint64_t)&v213);
  *(_QWORD *)&v196 = v106;
  *((_QWORD *)&v196 + 1) = v108;
  *(_QWORD *)&v197 = v107;
  DWORD2(v197) = 0;
  v198 = 0uLL;
  v110 = *(_QWORD *)(*(_QWORD *)(v109 + 144) + 144);
  v217 = v213;
  v218 = v214;
  v219 = v215;
  v228 = 0uLL;
  v227[1] = 0;
  LODWORD(v229) = 0;
  *(_QWORD *)&v230 = 0;
  *((_QWORD *)&v229 + 1) = 0;
  v231 = 0uLL;
  *(_QWORD *)((char *)&v232 + 4) = 2;
  LODWORD(v227[0]) = 0;
  v234 = 0u;
  v233 = 0u;
  sub_22E3C113C((uint64_t)v227, &v196, v10, 2, &v217, v110);
  sub_22E4F7088(v3, v10, (__int128 *)v227, 1);
  v67 = *(void **)&v236[32];
  if (*(_BYTE **)&v236[32] != &v236[48])
LABEL_77:
    free(v67);
}

void sub_22E4F58AC(_OWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  llvm::Instruction *v10;
  unsigned __int8 **v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  llvm::Type *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30[3];
  _OWORD v31[8];
  uint64_t v32;
  _OWORD v33[8];
  uint64_t v34;
  _OWORD v35[8];
  uint64_t v36;
  _BYTE v37[64];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52[4];
  _OWORD v53[2];
  uint64_t v54;
  __int128 v55[2];
  uint64_t v56;
  __int128 v57;
  _OWORD v58[8];
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  sub_22E4F8444(v52, a1, *(_QWORD *)(a2 + 8));
  v4 = *(_QWORD *)a1;
  *(_OWORD *)v37 = v52[0];
  *(_OWORD *)&v37[16] = v52[1];
  *(_OWORD *)&v37[32] = v52[2];
  v5 = *(_QWORD *)(a2 + 8);
  sub_22E6281E0(*(_QWORD **)(v4 + 144), v5, (uint64_t)v53);
  v57 = *(_OWORD *)v37;
  v58[0] = *(_OWORD *)&v37[16];
  v58[1] = *(_OWORD *)&v37[32];
  v6 = *(_QWORD *)(*(_QWORD *)(v4 + 144) + 144);
  v55[0] = v53[0];
  v55[1] = v53[1];
  v56 = v54;
  LODWORD(v45) = 0;
  *((_QWORD *)&v43 + 1) = 0;
  v44 = 0uLL;
  *(_QWORD *)&v46 = 0;
  *((_QWORD *)&v45 + 1) = 0;
  v47 = 0uLL;
  *(_QWORD *)((char *)&v48 + 4) = 2;
  LODWORD(v43) = 0;
  v49 = 0u;
  v50 = 0u;
  sub_22E3C113C((uint64_t)&v43, &v57, v5, 2, v55, v6);
  *(_QWORD *)&v57 = v58;
  *((_QWORD *)&v57 + 1) = 0x1000000000;
  v7 = sub_22F3C61E8(a2);
  v8 = sub_22EFC3B90(v7);
  if (*(_WORD *)(a2 + 4))
  {
    v9 = v8;
    v10 = 0;
    v11 = (unsigned __int8 **)(a2 + 32);
    v12 = a2 + 32 + 8 * *(unsigned __int16 *)(a2 + 4);
    do
    {
      v13 = *(_QWORD **)a1;
      v35[6] = v49;
      v35[7] = v50;
      v36 = v51;
      v35[2] = v45;
      v35[3] = v46;
      v35[4] = v47;
      v35[5] = v48;
      v35[0] = v43;
      v35[1] = v44;
      sub_22E4EC638(v13, (uint64_t)v35, v9, (uint64_t)v37);
      if ((~*(_DWORD *)(v9 + 72) & 3) != 0)
      {
        v16 = *v11;
        v31[6] = v40;
        v31[7] = v41;
        v32 = v42;
        v31[2] = *(_OWORD *)&v37[32];
        v31[3] = *(_OWORD *)&v37[48];
        v31[4] = v38;
        v31[5] = v39;
        v31[0] = *(_OWORD *)v37;
        v31[1] = *(_OWORD *)&v37[16];
        sub_22E4F8518((uint64_t)a1, v16, (uint64_t)v31);
        v17 = sub_22F115260(*(_QWORD *)(v9 + 48));
        if (v17)
        {
          v18 = v17;
          if (sub_22F245DD4(*(_QWORD *)a1, v17))
          {
            if (!v10)
            {
              v20 = *(_QWORD *)a1;
              llvm::Constant::getNullValue(*(llvm::Constant **)(*(_QWORD *)a1 + 96), v19);
              LOWORD(v54) = 257;
              v10 = (llvm::Instruction *)llvm::User::operator new((llvm::User *)0x40);
              LOWORD(v56) = 257;
              llvm::LoadInst::LoadInst();
              (*(void (**)(_QWORD, llvm::Instruction *, _OWORD *, _QWORD, _QWORD))(**(_QWORD **)(v20 + 352)
                                                                                            + 16))(*(_QWORD *)(v20 + 352), v10, v53, *(_QWORD *)(v20 + 320), *(_QWORD *)(v20 + 328));
              v21 = *(unsigned int *)(v20 + 280);
              if ((_DWORD)v21)
              {
                v26 = *(_QWORD *)(v20 + 272);
                v29 = v26 + 16 * v21;
                do
                {
                  llvm::Instruction::setMetadata();
                  v26 += 16;
                }
                while (v26 != v29);
              }
            }
            v22 = *(_QWORD *)a1;
            v30[0] = *(_OWORD *)&v37[8];
            v30[1] = *(_OWORD *)&v37[24];
            v30[2] = *(_OWORD *)&v37[40];
            sub_22F259E14(v22, 1, v30, *(_QWORD *)(v9 + 48), (uint64_t)off_24FA63E30[v18 - 1], 0);
            v23 = *(_QWORD *)(*(_QWORD *)a1 + 1992);
            v24 = *(_QWORD *)(*(_QWORD *)a1 + 2000);
            v25 = DWORD2(v57);
            if (DWORD2(v57) >= (unint64_t)HIDWORD(v57))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v25 = DWORD2(v57);
            }
            *(_QWORD *)(v57 + 8 * v25) = v23 - v24;
            ++DWORD2(v57);
          }
        }
      }
      else
      {
        v14 = *(_QWORD *)a1;
        v15 = *(_QWORD *)(v9 + 72) & 0xFFFFFFFFFFFFFFFCLL;
        v33[6] = v40;
        v33[7] = v41;
        v34 = v42;
        v33[2] = *(_OWORD *)&v37[32];
        v33[3] = *(_OWORD *)&v37[48];
        v33[4] = v38;
        v33[5] = v39;
        v33[0] = *(_OWORD *)v37;
        v33[1] = *(_OWORD *)&v37[16];
        sub_22E4FA2C4(v14, v15, (uint64_t)v33);
      }
      ++v11;
      do
        v9 = *(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v9 && (*(_DWORD *)(v9 + 28) & 0x7Fu) - 49 > 2);
    }
    while (v11 != (unsigned __int8 **)v12);
  }
  else
  {
    v10 = 0;
  }
  if (DWORD2(v57))
  {
    v27 = DWORD2(v57) - 1;
    do
    {
      v28 = v27;
      sub_22F25343C(*(_QWORD **)a1, *(llvm::LLVMContext **)(v57 + 8 * v27--), (uint64_t)v10);
    }
    while (v28);
  }
  if (v10)
    llvm::Instruction::eraseFromParent(v10);
  if ((_OWORD *)v57 != v58)
    free((void *)v57);
}

uint64_t sub_22E4F5CAC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  unsigned int v17;
  int v18;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v24;
  const char *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  llvm::GetElementPtrInst *v58;
  uint64_t v59;
  uint64_t result;
  uint64_t (**v61)(void);
  llvm::Constant *v62;
  llvm::Type *v63;
  unint64_t v64;
  unint64_t v65;
  llvm::Type *v66;
  llvm::Type *v67;
  uint64_t NullValue;
  uint64_t v69;
  char *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  llvm::GetElementPtrInst *v75;
  unint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  char v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unsigned int v98;
  char v99;
  _QWORD v100[3];
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  _OWORD v106[3];
  uint64_t v107;
  const char *v108;
  unint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  llvm::Constant *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  __int16 v125;
  unint64_t v126;
  _QWORD v127[4];
  __int16 v128;
  _QWORD v129[3];
  _QWORD *v130;
  _BYTE v131[24];
  __int128 v132;
  __int128 v133;
  __int128 v134;
  int v135;
  void *v136;
  uint64_t v137;
  _BYTE v138[192];
  void *v139;
  uint64_t v140;
  _BYTE v141[16];
  void *v142;
  uint64_t v143;
  _QWORD v144[5];
  uint64_t *v145;
  uint64_t v146;
  unint64_t v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;

  v151 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 144) + 144);
  v6 = *(_QWORD *)(a2 + 16);
  memset(v100, 0, sizeof(v100));
  v101 = 0;
  v103 = 0;
  v104 = 0;
  v102 = 0;
  v105 = 0;
  sub_22E4D79C0(v106, v4, v6, v100, 0);
  v94 = *(uint64_t **)&v106[0];
  v7 = *a1;
  v8 = sub_22F10ACF8(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0));
  v91 = sub_22E66C868(*(_QWORD *)(v7 + 144) + 280, v8, 0);
  v9 = sub_22F10DCA4(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 8) & 0xFFFFFFFFFFFFFFF0));
  v98 = 1;
  v97 = 0;
  v99 = 0;
  sub_22F010028(*(_QWORD *)(v9 + 40), (llvm::APInt *)&v97, v5, 0);
  v10 = sub_22F10ACF8(v9);
  v11 = *a1;
  v12 = *(_QWORD *)(*a1 + 144);
  v92 = a2;
  v93 = a1;
  if ((*(_QWORD *)(*(_QWORD *)(v12 + 152) + 8) & 0x40000000000000) != 0)
    goto LABEL_54;
  v13 = v98;
  if (v98 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v97) == v13)
      goto LABEL_6;
LABEL_54:
    v86 = *(_QWORD *)(v12 + 144);
    v62 = (llvm::Constant *)sub_22E66C868(v12 + 280, v10, 0);
    *(_QWORD *)v131 = "terminated_by.loop_cond";
    WORD4(v132) = 259;
    v90 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    *(_QWORD *)v131 = "terminated_by.loop_cont";
    WORD4(v132) = 259;
    v87 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    *(_QWORD *)v131 = "terminated_by.loop_end";
    WORD4(v132) = 259;
    v89 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v63 = *(llvm::Type **)(v11 + 88);
    v64 = *(unsigned __int8 *)(v11 + 131);
    *(_QWORD *)v131 = "terminated_by.len";
    WORD4(v132) = 259;
    v65 = sub_22E4D83CC(v11, v63, v64, (uint64_t)v131, 0, 0);
    v67 = v66;
    NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)(v11 + 88), v66);
    v69 = 0;
    if (v65 <= 7)
      v70 = 0;
    else
      v70 = (char *)(v65 & 0xFFFFFFFFFFFFFFF8);
    v71 = (unint64_t)v67 & 0xFFFFFFFFFFFFFFF8;
    if (v65 <= 7)
      v71 = 0;
    *(_QWORD *)v131 = v70;
    v96 = v71;
    *(_QWORD *)&v131[8] = v71;
    if (v65 >= 8)
      v69 = 1 << (v67 & 7 | (8 * (v65 & 7u)));
    *(_QWORD *)&v131[16] = v69;
    LODWORD(v132) = 0;
    *(_QWORD *)&v133 = 0;
    *((_QWORD *)&v132 + 1) = 0;
    sub_22E3BEDDC(v11 + 272, NullValue, v131, 0);
    v72 = sub_22F25E308(v11, (llvm::APInt *)&v97, v62);
    sub_22E5ED9B4((_QWORD *)v11, v90, 0);
    v73 = 0;
    *(_QWORD *)&v121 = v70;
    *((_QWORD *)&v121 + 1) = v96;
    if (v65 >= 8)
      v73 = 1 << (v67 & 7 | (8 * (v65 & 7u)));
    v88 = (char)v67;
    *(_QWORD *)&v122 = v73;
    DWORD2(v122) = 0;
    v123 = 0uLL;
    v74 = (uint64_t *)sub_22E3C43AC((uint64_t *)(v11 + 272), (uint64_t)&v121, "terminated_by.len");
    LOWORD(v119) = 257;
    v75 = sub_22E3E5044((uint64_t *)(v11 + 272), (uint64_t)v62, v94, v74, (uint64_t)&v115);
    v76 = sub_22EF5D130(v86, v10);
    v115 = (uint64_t)v75;
    v116 = v62;
    v117 = v76;
    LODWORD(v118) = 0;
    v119 = 0;
    v120 = 0;
    v77 = (uint64_t *)sub_22E3C43AC((uint64_t *)(v11 + 272), (uint64_t)&v115, "terminated_by.elem");
    v108 = "terminted_by.check_terminator";
    LOWORD(v112) = 259;
    v78 = sub_22E3C18F4(v11 + 272, 32, v77, v72, (uint64_t)&v108);
    v79 = llvm::User::operator new((llvm::User *)0x40);
    MEMORY[0x23489C09C](v79, v89, v87, v78, 0);
    LOWORD(v112) = 257;
    sub_22E3C12C8((uint64_t *)(v11 + 272), v79, (uint64_t)&v108);
    sub_22E5ED9B4((_QWORD *)v11, v87, 0);
    v80 = llvm::ConstantInt::get();
    v145 = (uint64_t *)"terminated_by.new_len";
    LOWORD(v149) = 259;
    v81 = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v11 + 344) + 16))(*(_QWORD *)(v11 + 344), v74, v80, 0, 0);
    if (!v81)
    {
      LOWORD(v112) = 257;
      v82 = llvm::BinaryOperator::Create();
      v81 = sub_22E3C12C8((uint64_t *)(v11 + 272), v82, (uint64_t)&v145);
    }
    v108 = v70;
    v109 = v96;
    if (v65 < 8)
      v83 = 0;
    else
      v83 = 1 << (v88 & 7 | (8 * (v65 & 7u)));
    v50 = a1;
    v52 = v94;
    v51 = v91;
    v49 = v92;
    v110 = v83;
    v111 = 0;
    v112 = 0;
    v113 = 0;
    sub_22E3BEDDC(v11 + 272, v81, &v108, 0);
    v84 = llvm::User::operator new((llvm::User *)0x40);
    llvm::BranchInst::BranchInst();
    LOWORD(v149) = 257;
    sub_22E3C12C8((uint64_t *)(v11 + 272), v84, (uint64_t)&v145);
    sub_22E5ED9B4((_QWORD *)v11, v89, 0);
    v85 = 0;
    v145 = (uint64_t *)v70;
    v146 = v96;
    if (v65 >= 8)
      v85 = 1 << (v88 & 7 | (8 * (v65 & 7u)));
    v147 = v85;
    v148 = 0;
    v149 = 0;
    v150 = 0;
    v128 = 257;
    v48 = (uint64_t *)sub_22E3C2A7C((uint64_t *)(v11 + 272), (uint64_t)&v145, (uint64_t)v127);
    goto LABEL_36;
  }
  if (v97)
    goto LABEL_54;
LABEL_6:
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_DWORD *)(v14 + 16);
  if (v14)
    v16 = *(_DWORD *)(v14 + 16) == 11;
  else
    v16 = 0;
  if (!v16)
    goto LABEL_54;
  v17 = ((v15 >> 19) & 0x1FF) - 167;
  v18 = 1 << ((v15 >> 19) + 89);
  if (v17 > 0xD || ((1 << ((v15 >> 19) + 89)) & 0x3807) == 0)
    goto LABEL_54;
  v95 = v11;
  sub_22EFF605C(a2);
  v21 = v20;
  v22 = *(_QWORD *)(v12 + 144);
  if (v17 > 0xC || (v18 & 0x1803) == 0)
  {
    v24 = (uint64_t *)(v22 + 16416);
    v25 = "__builtin_wcslen";
    v26 = 446;
  }
  else
  {
    v24 = (uint64_t *)(v22 + 16408);
    v25 = "__builtin_strlen";
    v26 = 434;
  }
  v27 = *v24;
  v28 = sub_22E3CB704(*(llvm::StringMapImpl **)(v22 + 15192), v25, 0x10uLL);
  v29 = sub_22EF67C8C(v22);
  v30 = sub_22EF5B848(v22, v27 | 1, 0);
  v145 = (uint64_t *)&v147;
  v147 = v30;
  v146 = 0x100000001;
  *(_WORD *)v131 = 0;
  v131[2] = 0;
  *(_OWORD *)&v131[4] = 0uLL;
  v132 = 0u;
  v133 = 0u;
  v134 = 0u;
  v135 = 0;
  v31 = sub_22EF63D8C(v22, v29, (uint64_t *)&v147, 1uLL, (__int128 *)v131, 0);
  v32 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*(_QWORD *)(v22 + 1960) + 80) + 72), *(_QWORD *)(*(_QWORD *)(v22 + 1960) + 80));
  if (v32)
    v33 = v32 + 40;
  else
    v33 = 0;
  *(_QWORD *)v131 = v28;
  *(_DWORD *)&v131[8] = 0;
  sub_22EFC6D6C((uint64_t)&v131[16], v28);
  v34 = sub_22EFC4400(v22, v33, 0, (uint64_t *)v131, v31, 0, 1, 0, 0, 1, 0, 0);
  v35 = sub_22E3D13C8(*(_QWORD *)(v95 + 144), v34, v26);
  if (sub_22E462B18(v34))
    v34 = v34 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(v34) + 96) & 0x80) == 0);
  v115 = v35;
  v116 = 0;
  v117 = v34;
  v118 = 0;
  LODWORD(v119) = 0;
  v120 = 0;
  *(_QWORD *)v131 = &v131[16];
  *(_QWORD *)&v131[8] = 0x800000000;
  v136 = v138;
  v137 = 0x100000000;
  v139 = v141;
  v140 = 0x100000000;
  v142 = v144;
  v143 = 0x200000000;
  v144[4] = 0;
  v121 = v106[0];
  v122 = v106[1];
  v123 = v106[2];
  v124 = v107;
  v125 = 0;
  v126 = v30;
  v36 = sub_22E3C187C((uint64_t)v131, (unint64_t)&v121, 1);
  v37 = *(_QWORD *)v131 + 152 * *(unsigned int *)&v131[8];
  v38 = *(_OWORD *)(v36 + 16);
  *(_OWORD *)v37 = *(_OWORD *)v36;
  *(_OWORD *)(v37 + 16) = v38;
  v39 = *(_QWORD *)(v36 + 144);
  v40 = *(_OWORD *)(v36 + 128);
  v41 = *(_OWORD *)(v36 + 96);
  *(_OWORD *)(v37 + 112) = *(_OWORD *)(v36 + 112);
  *(_OWORD *)(v37 + 128) = v40;
  *(_QWORD *)(v37 + 144) = v39;
  *(_OWORD *)(v37 + 96) = v41;
  v42 = *(_OWORD *)(v36 + 80);
  v43 = *(_OWORD *)(v36 + 32);
  v44 = *(_OWORD *)(v36 + 48);
  *(_OWORD *)(v37 + 64) = *(_OWORD *)(v36 + 64);
  *(_OWORD *)(v37 + 80) = v42;
  *(_OWORD *)(v37 + 32) = v43;
  *(_OWORD *)(v37 + 48) = v44;
  ++*(_DWORD *)&v131[8];
  v47 = sub_22E46D9A0(*(_QWORD *)(v95 + 144) + 280, *(_QWORD **)(*(_QWORD *)(v95 + 144) + 280), (unsigned int *)v131, *(_QWORD *)(v31 & 0xFFFFFFFFFFFFFFF0), 0, 0, v45, v46);
  v127[0] = 0;
  v109 = 0;
  v110 = 0;
  v108 = 0;
  v111 = 0;
  v112 = 0;
  v113 = 0;
  v114 = 0;
  sub_22E47A004(v95, v47, (uint64_t)&v115, (uint64_t)&v108, (uint64_t)v131, v127, 0, v21, (uint64_t)&v121, 0);
  v48 = (uint64_t *)v121;
  if (v142 != v144)
    free(v142);
  v49 = v92;
  v50 = v93;
  v51 = v91;
  if (v139 != v141)
    free(v139);
  if (v136 != v138)
    free(v136);
  if (*(_BYTE **)v131 != &v131[16])
    free(*(void **)v131);
  if (v145 != (uint64_t *)&v147)
    free(v145);
  v52 = v94;
LABEL_36:
  if (*(_BYTE *)(v49 + 32))
  {
    v53 = llvm::ConstantInt::get();
    v54 = v50[1];
    LOWORD(v123) = 257;
    v55 = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v54 + 72) + 16))(*(_QWORD *)(v54 + 72), v48, v53, 0, 0);
    if (!v55)
    {
      WORD4(v132) = 257;
      v56 = llvm::BinaryOperator::Create();
      v55 = sub_22E3C12C8((uint64_t *)v54, v56, (uint64_t)&v121);
    }
    v48 = (uint64_t *)v55;
  }
  v57 = (uint64_t *)v50[1];
  *(_QWORD *)v131 = "terminated_by.upper";
  WORD4(v132) = 259;
  v58 = sub_22E3E5044(v57, v51, v52, v48, (uint64_t)v131);
  v59 = *(_QWORD *)(v49 + 8);
  if (qword_253E4BCB8)
  {
    if ((uint64_t *)qword_253E4BCB8 == &qword_253E4BCA0)
    {
      v130 = v129;
      (*(void (**)(uint64_t *, _QWORD *))(qword_253E4BCA0 + 24))(&qword_253E4BCA0, v129);
    }
    else
    {
      v130 = (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)qword_253E4BCB8 + 16))();
    }
  }
  else
  {
    v130 = 0;
  }
  sub_22E4F9EBC(v50, v59, (uint64_t)v52, (uint64_t)v58, (uint64_t)v52, v129);
  result = (uint64_t)v130;
  if (v130 == v129)
  {
    v61 = (uint64_t (**)(void))(v129[0] + 32);
  }
  else
  {
    if (!v130)
      goto LABEL_50;
    v61 = (uint64_t (**)(void))(*v130 + 40);
  }
  result = (*v61)();
LABEL_50:
  if (v98 >= 0x41)
  {
    result = v97;
    if (v97)
      return MEMORY[0x2348A0E84](v97, 0x1000C8000313F17);
  }
  return result;
}

void sub_22E4F6780(_QWORD *a1, unint64_t a2)
{
  __int128 *v2;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  __int128 v10;
  __int128 v11[3];
  const char *v12;
  __int16 v13;
  _OWORD v14[2];
  _OWORD v15[2];

  v2 = (__int128 *)(a1 + 2);
  if (!a1[2])
  {
    v5 = *a1;
    v12 = "agg.tmp.ensured";
    v13 = 259;
    sub_22E4211F0(v5, a2, (uint64_t)&v12, 0, (uint64_t)v14);
    v6 = v14[1];
    *v2 = v14[0];
    v2[1] = v6;
    v2[2] = v15[0];
    *(__int128 *)((char *)v2 + 41) = *(_OWORD *)((char *)v15 + 9);
    v7 = *(_QWORD *)(*a1 + 144);
    if ((*(_BYTE *)(*(_QWORD *)(v7 + 152) + 104) & 0x20) != 0)
    {
      v8 = sub_22EF5BA38(*(_QWORD *)(v7 + 144), a2);
      if (sub_22F10C618(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0)))
      {
        v9 = (_QWORD *)*a1;
        v10 = v2[1];
        v11[0] = *v2;
        v11[1] = v10;
        v11[2] = v2[2];
        sub_22E486680(v9, a2, v11, 0);
      }
    }
  }
}

uint64_t sub_22E4F6850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, int a6, _BYTE *a7)
{
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  BOOL v17;
  unsigned int v19;
  uint64_t v20;
  char *v21;
  int v22;
  __int16 v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  BOOL v28;
  uint64_t v29;
  int v30;
  __int16 v31;
  char v32;
  char v33;
  char *v34;
  _BYTE *v35;
  __int16 v36;

  v13 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  if (v14)
    v15 = *(_BYTE *)(v14 + 16) == 12;
  else
    v15 = 0;
  if (v15
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 12
    && (v14 = sub_22F10CF48(v14)) != 0)
  {
    v13 = (uint64_t *)(*(_QWORD *)(v14 + 32) & 0xFFFFFFFFFFFFFFF0);
  }
  v16 = *v13;
  if (*v13)
    v17 = *(_BYTE *)(*v13 + 16) == 31;
  else
    v17 = 0;
  if (v17)
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 144) + 224)
                                                                                           + 192))(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 224), a2, a4, a5, v16, 0);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31)
  {
    v16 = sub_22F10CF48(*v13);
    if (v16)
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 144) + 224)
                                                                                             + 192))(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 224), a2, a4, a5, v16, 0);
  }
  v19 = dword_22F457994[a6];
  v20 = *v13;
  v21 = off_24FA63E50[a6];
  if (sub_22F110DD0(*v13))
  {
    v22 = *a7;
    if (*v21)
    {
      v34 = v21;
      if (v22)
      {
        v35 = a7;
        v23 = 771;
      }
      else
      {
        v23 = 259;
      }
      v36 = v23;
    }
    else
    {
      if (*a7)
        v32 = 3;
      else
        v32 = 1;
      v34 = a7;
      LOBYTE(v36) = v32;
      HIBYTE(v36) = 1;
    }
    return llvm::IRBuilderBase::CreateFCmpHelper();
  }
  else
  {
    v24 = 36 - 2 * a6;
    v25 = *(_QWORD *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF0);
    v26 = *(unsigned __int8 *)(v25 + 16);
    if (v25)
      v27 = v26 == 11;
    else
      v27 = 0;
    v28 = v27 || v25 == 0;
    if (!v28 && v26 == 44)
    {
      sub_22F114198(*(_QWORD *)(v25 + 24));
      v20 = *v13;
    }
    if (sub_22F110B20(v20))
      v29 = v19;
    else
      v29 = v24;
    v30 = *a7;
    if (*v21)
    {
      v34 = v21;
      if (v30)
      {
        v35 = a7;
        v31 = 771;
      }
      else
      {
        v31 = 259;
      }
      v36 = v31;
    }
    else
    {
      if (*a7)
        v33 = 3;
      else
        v33 = 1;
      v34 = a7;
      LOBYTE(v36) = v33;
      HIBYTE(v36) = 1;
    }
    return sub_22E3C18F4(a1, v29, a4, a5, (uint64_t)&v34);
  }
}

uint64_t sub_22E4F6AB8(uint64_t result)
{
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t *v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;

  while (1)
  {
    do
    {
      v1 = (unsigned __int8 *)result;
      LODWORD(v2) = *(unsigned __int8 *)result;
      if (v2 > 0xD5)
      {
        if ((_DWORD)v2 == 233)
        {
          LODWORD(v2) = *(_DWORD *)result;
          if ((*(_DWORD *)result & 0x7C0000) != 0x300000)
            goto LABEL_39;
          v3 = (uint64_t *)(result + 16);
        }
        else
        {
          if ((_DWORD)v2 != 214)
            break;
          v3 = (uint64_t *)(result + 24);
        }
      }
      else if ((_DWORD)v2 == 155)
      {
        if ((**(_DWORD **)(result + 16) & 0x18000) != 0)
          return 0;
        v3 = (uint64_t *)(result + 24);
        if (!*(_BYTE *)(result + 48))
          v3 = (uint64_t *)(result + 32);
        LOBYTE(v2) = -101;
      }
      else
      {
        if ((_DWORD)v2 != 176)
          break;
        v2 = *(unsigned int *)(result + 20);
        if ((_DWORD)v2 == -1)
          return 0;
        v3 = (uint64_t *)(result + 8 * v2 + 40);
        LOBYTE(v2) = -80;
      }
      result = *v3;
    }
    while ((unsigned __int8 *)*v3 != v1);
    if (v2 == 161)
      break;
    if ((v2 & 0xFE) == 0x66)
    {
      if (v2 == 103)
        v6 = 32;
      else
        v6 = 40;
      if ((sub_22E4F6AB8(*(_QWORD *)&v1[v6]) & 1) != 0)
        return 1;
      v7 = (uint64_t *)(v1 + 40);
      v9 = *v1;
      v8 = (uint64_t *)(v1 + 48);
      if (v9 == 103)
        v5 = v7;
      else
        v5 = v8;
      goto LABEL_40;
    }
    if ((v2 & 0xFE) == 0x70)
    {
      if ((*(_DWORD *)v1 & 0xF80000) == 0)
        goto LABEL_39;
      v4 = (*(_DWORD *)v1 >> 18) & 0x3F;
      if ((v4 - 21) <= 0xA)
        goto LABEL_39;
      if (v4 != 32)
        return 0;
      v5 = (uint64_t *)(v1 + 24);
      goto LABEL_40;
    }
    if (v2 == 210)
    {
      result = *((_QWORD *)v1 + 2);
      if (!result)
        return result;
    }
    else
    {
      if ((v2 + 102) >= 0xF5u)
      {
        if ((*(_DWORD *)v1 & 0x1FC0000) == 0x100000)
          return 0;
LABEL_39:
        v5 = (uint64_t *)(v1 + 16);
        goto LABEL_40;
      }
      if (v2 != 107)
      {
        if (v2 != 188 && v2 != 233)
          return 0;
        goto LABEL_39;
      }
      v5 = (uint64_t *)(v1 + 24);
      v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 3) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      v11 = *(_DWORD *)(v10 + 16);
      if (v10)
        v12 = v11 == 11;
      else
        v12 = 0;
      if (v12)
      {
        if (((*(_DWORD *)(v10 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
          goto LABEL_39;
      }
      else if (v10 && v11 == 44)
      {
        v13 = sub_22F114198(*(_QWORD *)(v10 + 24));
        if (((*(_BYTE *)(v13 + 74) & 1) != 0 || *(_QWORD *)(v13 + 128) > 7uLL)
          && (*(_QWORD *)(sub_22F114198(*(_QWORD *)(v10 + 24)) + 72) & 0x8000000000) == 0)
        {
          goto LABEL_39;
        }
      }
      else if (v11 == 9)
      {
        goto LABEL_39;
      }
LABEL_40:
      result = *v5;
    }
  }
  result = 0;
  v14 = *((_QWORD *)v1 + 2);
  if (v14 && (*(_DWORD *)(v14 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9)
    return sub_22E49C868(*((_QWORD *)v1 + 2));
  return result;
}

unint64_t sub_22E4F6D3C(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23[8];
  uint64_t v24;
  __int128 v25[8];
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _OWORD v51[2];
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;

  if ((*(_BYTE *)(a3 + 56) & 2) != 0)
  {
    v18 = *(_QWORD *)(*(_QWORD *)(*a1 + 144) + 144);
    if ((*(_BYTE *)(a3 + 56) & 0x10) != 0)
      sub_22EF5CC54(v18, a2, &v36);
    else
      sub_22EF5CCD0(v18, *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v36);
    llvm::ConstantInt::get();
    v19 = *(_QWORD *)(*a1 + 144);
    v20 = *(_QWORD *)(v19 + 784);
    if (!v20)
    {
      sub_22F298C2C(*(_QWORD **)(*a1 + 144));
      v20 = *(_QWORD *)(v19 + 784);
    }
    v21 = *(_OWORD *)(a3 + 16);
    v48 = *(_OWORD *)a3;
    v49 = v21;
    v50 = *(_OWORD *)(a3 + 32);
    v22 = *(_OWORD *)(a4 + 16);
    v45 = *(_OWORD *)a4;
    v46 = v22;
    v47 = *(_OWORD *)(a4 + 32);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 352))(v20);
  }
  else
  {
    v8 = *a1;
    v9 = *(_OWORD *)(a3 + 16);
    v59 = *(_OWORD *)a3;
    v60 = v9;
    v61 = *(_OWORD *)(a3 + 32);
    sub_22E6281E0(*(_QWORD **)(v8 + 144), a2, (uint64_t)&v56);
    v27 = v59;
    v28 = v60;
    v29 = v61;
    v10 = *(_QWORD *)(*(_QWORD *)(v8 + 144) + 144);
    v53 = v56;
    v54 = v57;
    *(_QWORD *)&v55 = v58;
    v37 = 0uLL;
    LODWORD(v38) = 0;
    *((_QWORD *)&v36 + 1) = 0;
    *((_QWORD *)&v38 + 1) = 0;
    *(_QWORD *)&v39 = 0;
    v40 = 0uLL;
    *(_QWORD *)((char *)&v41 + 4) = 2;
    LODWORD(v36) = 0;
    v43 = 0u;
    v42 = 0u;
    sub_22E3C113C((uint64_t)&v36, &v27, a2, 2, &v53, v10);
    v11 = *a1;
    v12 = *(_OWORD *)(a4 + 16);
    v53 = *(_OWORD *)a4;
    v54 = v12;
    v55 = *(_OWORD *)(a4 + 32);
    sub_22E6281E0(*(_QWORD **)(v11 + 144), a2, (uint64_t)v51);
    v59 = v53;
    v60 = v54;
    v61 = v55;
    v13 = *(_QWORD *)(*(_QWORD *)(v11 + 144) + 144);
    v56 = v51[0];
    v57 = v51[1];
    v58 = v52;
    v28 = 0uLL;
    LODWORD(v29) = 0;
    *((_QWORD *)&v27 + 1) = 0;
    *((_QWORD *)&v29 + 1) = 0;
    *(_QWORD *)&v30 = 0;
    v31 = 0uLL;
    *(_QWORD *)((char *)&v32 + 4) = 2;
    LODWORD(v27) = 0;
    v33 = 0u;
    v34 = 0u;
    sub_22E3C113C((uint64_t)&v27, &v59, a2, 2, &v56, v13);
    v14 = (_QWORD *)*a1;
    v25[6] = v42;
    v25[7] = v43;
    v26 = v44;
    v25[2] = v38;
    v25[3] = v39;
    v25[4] = v40;
    v25[5] = v41;
    v25[0] = v36;
    v25[1] = v37;
    v23[6] = v33;
    v23[7] = v34;
    v24 = v35;
    v23[2] = v29;
    v23[3] = v30;
    v23[4] = v31;
    v23[5] = v32;
    v15 = (*(unsigned __int8 *)(a3 + 56) >> 4) & 1;
    v16 = ((*(_DWORD *)(a3 + 48) | *(_DWORD *)(a4 + 48)) >> 2) & 1;
    v23[0] = v27;
    v23[1] = v28;
    return sub_22E4EF4B8(v14, v25, v23, a2, v15, v16);
  }
}

BOOL sub_22E4F6FEC(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 result;

  result = (a1 & 0x60000) != 0
        && (v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)) != 0
        && *(_BYTE *)(v2 + 16) == 45
        && ((v3 = sub_22F114198(*(_QWORD *)(v2 + 24)), v4 = v3, (*(_DWORD *)(v3 + 28) & 0x7Fu) - 35 > 2)
         || !sub_22E3CD2C4(v3)
         && (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v4 + 104) + 96), *(_QWORD *)(v4 + 104)),
             (**(_QWORD **)(v4 + 128) & 0x100000000000) != 0))
        && (*(_BYTE *)(v4 + 75) & 2) != 0;
  return result;
}

__n128 sub_22E4F7088(uint64_t *a1, unint64_t a2, __int128 *a3, int a4)
{
  __int128 *v4;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __n128 result;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BOOL4 v24;
  __int128 v25;
  char v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  _OWORD v40[8];
  uint64_t v41;
  _OWORD v42[8];
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  _OWORD v80[8];
  uint64_t v81;
  _OWORD v82[8];
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  unint64_t v93;
  _OWORD v94[2];
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99[2];
  uint64_t v100;

  v93 = a2;
  v4 = (__int128 *)(a1 + 2);
  if (a1[2])
  {
    v9 = *a1;
    v10 = *((_OWORD *)a1 + 2);
    v96 = *v4;
    v97 = v10;
    v98 = *((_OWORD *)a1 + 3);
    v11 = a1[8] & 4 | a2;
    sub_22E6281E0(*(_QWORD **)(v9 + 144), v11, (uint64_t)v94);
    v35 = v96;
    v36 = v97;
    v37 = v98;
    v12 = *(_QWORD *)(*(_QWORD *)(v9 + 144) + 144);
    v99[0] = v94[0];
    v99[1] = v94[1];
    v100 = v95;
    LODWORD(v86) = 0;
    *((_QWORD *)&v84 + 1) = 0;
    v85 = 0uLL;
    *(_QWORD *)&v87 = 0;
    *((_QWORD *)&v86 + 1) = 0;
    v88 = 0uLL;
    *(_QWORD *)((char *)&v89 + 4) = 2;
    LODWORD(v84) = 0;
    v90 = 0u;
    v91 = 0u;
    sub_22E3C113C((uint64_t)&v84, &v35, v11, 2, v99, v12);
    if (a4)
    {
      if (sub_22F111B38(&v93) == 5)
      {
        v13 = *a1;
        if ((a1[9] & 8) != 0)
        {
          v59 = v90;
          v60 = v91;
          v61 = v92;
          v55 = v86;
          v56 = v87;
          v57 = v88;
          v58 = v89;
          v53 = v84;
          v54 = v85;
          v27 = a3[7];
          v50 = a3[6];
          v51 = v27;
          v52 = *((_QWORD *)a3 + 16);
          v28 = a3[3];
          v46 = a3[2];
          v47 = v28;
          v29 = a3[5];
          v48 = a3[4];
          v49 = v29;
          v30 = a3[1];
          v44 = *a3;
          v45 = v30;
          sub_22E55081C();
        }
        else
        {
          v42[6] = v90;
          v42[7] = v91;
          v43 = v92;
          v42[2] = v86;
          v42[3] = v87;
          v42[4] = v88;
          v42[5] = v89;
          v42[0] = v84;
          v42[1] = v85;
          v14 = a3[7];
          v40[6] = a3[6];
          v40[7] = v14;
          v41 = *((_QWORD *)a3 + 16);
          v15 = a3[3];
          v40[2] = a3[2];
          v40[3] = v15;
          v16 = a3[5];
          v40[4] = a3[4];
          v40[5] = v16;
          v17 = a3[1];
          v40[0] = *a3;
          v40[1] = v17;
          sub_22E550520(v13, (uint64_t)v42, (uint64_t)v40);
        }
        return result;
      }
    }
    else if (sub_22F111B38(&v93) == 5)
    {
      v19 = *a1;
      if ((a1[9] & 8) != 0)
      {
        v82[6] = v90;
        v82[7] = v91;
        v83 = v92;
        v82[2] = v86;
        v82[3] = v87;
        v82[5] = v89;
        v82[4] = v88;
        v82[1] = v85;
        v82[0] = v84;
        v31 = a3[6];
        v80[7] = a3[7];
        v81 = *((_QWORD *)a3 + 16);
        v32 = a3[3];
        v80[2] = a3[2];
        v80[3] = v32;
        v33 = a3[4];
        v80[5] = a3[5];
        v80[6] = v31;
        v80[4] = v33;
        v34 = a3[1];
        v80[0] = *a3;
        v80[1] = v34;
        sub_22E551798(v19, (uint64_t)v82, (uint64_t)v80);
      }
      else
      {
        v77 = v90;
        v78 = v91;
        v79 = v92;
        v73 = v86;
        v74 = v87;
        v75 = v88;
        v76 = v89;
        v71 = v84;
        v72 = v85;
        v20 = a3[7];
        v68 = a3[6];
        v69 = v20;
        v70 = *((_QWORD *)a3 + 16);
        v21 = a3[3];
        v64 = a3[2];
        v65 = v21;
        v22 = a3[5];
        v66 = a3[4];
        v67 = v22;
        v23 = a3[1];
        v62 = *a3;
        v63 = v23;
        sub_22E550FA8();
      }
      return result;
    }
    v24 = sub_22E4F6FEC(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 152) + 244), a2);
    v25 = *(__int128 *)((char *)a3 + 24);
    v35 = *(__int128 *)((char *)a3 + 8);
    v36 = v25;
    v37 = *(__int128 *)((char *)a3 + 40);
    v38 = *((_QWORD *)a3 + 9);
    if (v24)
      v26 = 27;
    else
      v26 = 25;
    v39 = v26;
    sub_22E4F6D3C(a1, a2, (uint64_t)v4, (uint64_t)&v35);
  }
  return result;
}

void sub_22E4F73BC(uint64_t *a1, uint64_t a2, int a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;

  sub_22E4D8D7C(*a1, *(unsigned int **)(a2 + 16), (uint64_t)&v34);
  if ((a4 & 1) != 0)
  {
    v28 = v40;
    v30 = v41;
    v32 = v42;
    v20 = v36;
    v22 = v37;
    v24 = v38;
    v26 = v39;
    v16 = v34;
    v18 = v35;
    v8 = *(_QWORD *)(a2 + 16);
    v9 = *(_QWORD *)(*(_QWORD *)(*a1 + 144) + 144);
    v10 = (uint64_t *)llvm::ConstantInt::get();
    v11 = sub_22EF60A6C(v9, 32, 1);
    v49 = v28;
    v50 = v30;
    v51 = v32;
    v45 = v20;
    v46 = v22;
    v47 = v24;
    v48 = v26;
    v43 = v16;
    v44 = v18;
    sub_22E4F7590(a1, (uint64_t)&v43, a2, v8, v10, v11, a3);
    sub_22E4F7088(a1, *(_QWORD *)(a2 + 8), &v34, 1);
  }
  else
  {
    sub_22E4F7088(a1, *(_QWORD *)(a2 + 8), &v34, 1);
    v29 = v40;
    v31 = v41;
    v33 = v42;
    v21 = v36;
    v23 = v37;
    v25 = v38;
    v27 = v39;
    v17 = v34;
    v19 = v35;
    v12 = *(_QWORD *)(a2 + 16);
    v13 = *(_QWORD *)(*(_QWORD *)(*a1 + 144) + 144);
    v14 = (uint64_t *)llvm::ConstantInt::get();
    v15 = sub_22EF60A6C(v13, 32, 1);
    v49 = v29;
    v50 = v31;
    v51 = v33;
    v45 = v21;
    v46 = v23;
    v47 = v25;
    v48 = v27;
    v43 = v17;
    v44 = v19;
    sub_22E4F7590(a1, (uint64_t)&v43, a2, v12, v14, v15, a3);
  }
}

void sub_22E4F7590(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, unint64_t a6, int a7)
{
  uint64_t *v8;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BOOL4 v59;
  _OWORD v62[3];
  _OWORD v63[3];
  _BYTE v64[64];
  _BYTE v65[64];
  _OWORD v66[4];
  uint64_t v67;
  llvm::Type **v68;
  _BYTE v69[32];
  __int16 v70;
  _OWORD v71[3];
  _OWORD v72[2];
  __int128 v73;
  _OWORD v74[3];
  _OWORD v75[3];
  __int128 v76;
  __int128 v77;
  __int128 v78;
  _OWORD v79[3];
  _OWORD v80[3];
  _OWORD v81[3];
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;

  v8 = a5;
  v68 = (llvm::Type **)a5;
  v59 = sub_22F110A40(*(_QWORD *)(a6 & 0xFFFFFFFFFFFFFFF0));
  sub_22F261638(*a1, a4, (uint64_t)v66);
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v65 = *(_OWORD *)a2;
  *(_OWORD *)&v65[16] = v12;
  v13 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v65[32] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v65[48] = v13;
  v14 = *(_QWORD *)(a2 + 64);
  *(_OWORD *)v64 = v66[0];
  *(_OWORD *)&v64[16] = v66[1];
  *(_OWORD *)&v64[32] = v66[2];
  *(_OWORD *)&v64[48] = v66[3];
  v15 = v67;
  v16 = (uint64_t *)a1[1];
  v80[0] = *(_OWORD *)&v64[8];
  v80[1] = *(_OWORD *)&v64[24];
  v80[2] = *(_OWORD *)&v64[40];
  LOWORD(v90) = 257;
  sub_22E3C408C(v16, (uint64_t)v80, 0, (uint64_t)&v88, (uint64_t)v81);
  v17 = (uint64_t *)a1[1];
  v79[0] = v81[0];
  v79[1] = v81[1];
  v79[2] = v81[2];
  LOWORD(v90) = 257;
  v18 = (uint64_t *)sub_22E3C2A7C(v17, (uint64_t)v79, (uint64_t)&v88);
  v19 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0);
  if (!v20 || *(_BYTE *)(v20 + 16) != 39)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
      v20 = sub_22F10CF48(v20);
    else
      v20 = 0;
  }
  v21 = *(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0);
  if (!v21 || *(_BYTE *)(v21 + 16) != 39)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
      v21 = sub_22F10CF48(*(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0));
    else
      v21 = 0;
  }
  if ((*(_BYTE *)(v20 + 40) & 7) == 3)
  {
    v22 = (uint64_t *)a1[1];
    v23 = *(_QWORD *)(*a1 + 88);
    *(_QWORD *)&v88 = "bound.ptr.arith.old";
    LOWORD(v90) = 259;
    v58 = sub_22E3C1740(v22, 47, (uint64_t)v18, v23, (uint64_t)&v88);
  }
  else
  {
    v58 = 0;
  }
  if (*v8)
  {
    if (*(_DWORD *)(*v8 + 8) == 13)
    {
      v24 = *(_QWORD *)(*a1 + 88);
      if ((*(_DWORD *)(v24 + 8) ^ *(_DWORD *)(*v8 + 8)) >= 0x100)
      {
        v25 = (uint64_t *)a1[1];
        *(_QWORD *)&v88 = "idxprom";
        LOWORD(v90) = 259;
        v8 = (uint64_t *)sub_22E3BF45C(v25, (uint64_t)v8, v24, v59, (uint64_t)&v88);
      }
    }
  }
  if (a7)
  {
    v26 = a1[1];
    *(_QWORD *)&v88 = "idx.neg";
    LOWORD(v90) = 259;
    v8 = (uint64_t *)sub_22E42E798(v26, (uint64_t)v8, (uint64_t)&v88, 0, 0);
  }
  v27 = sub_22F10ACF8(*v19);
  v28 = (uint64_t *)a1[1];
  v29 = sub_22E66C868(*(_QWORD *)(*a1 + 144) + 280, v27, 0);
  *(_QWORD *)&v88 = "bound.ptr.arith";
  LOWORD(v90) = 259;
  v30 = sub_22E42129C(v28, v29, v18, v8, (uint64_t)&v88);
  v31 = (uint64_t *)a1[1];
  v85 = *(_OWORD *)&v65[8];
  v86 = *(_OWORD *)&v65[24];
  v87 = *(_OWORD *)&v65[40];
  LOWORD(v84) = 257;
  sub_22E3C408C(v31, (uint64_t)&v85, 0, (uint64_t)&v82, (uint64_t)&v88);
  v32 = a1[1];
  v82 = v88;
  v83 = v89;
  v84 = v90;
  sub_22E3BEDDC(v32, v30, &v82, 0);
  v33 = (uint64_t *)a1[1];
  v75[0] = *(_OWORD *)&v64[8];
  v75[1] = *(_OWORD *)&v64[24];
  v75[2] = *(_OWORD *)&v64[40];
  LOWORD(v90) = 257;
  sub_22E3C408C(v33, (uint64_t)v75, 1, (uint64_t)&v88, (uint64_t)&v76);
  v34 = (uint64_t *)a1[1];
  v74[0] = v76;
  v74[1] = v77;
  v74[2] = v78;
  LOWORD(v73) = 257;
  v35 = sub_22E3C2A7C(v34, (uint64_t)v74, (uint64_t)v72);
  v36 = (uint64_t *)a1[1];
  v85 = *(_OWORD *)&v65[8];
  v86 = *(_OWORD *)&v65[24];
  v87 = *(_OWORD *)&v65[40];
  LOWORD(v84) = 257;
  sub_22E3C408C(v36, (uint64_t)&v85, 1, (uint64_t)&v82, (uint64_t)&v88);
  v37 = a1[1];
  v82 = v88;
  v83 = v89;
  v84 = v90;
  sub_22E3BEDDC(v37, v35, &v82, 0);
  if ((*(_DWORD *)(v21 + 40) & 7) == 2)
  {
    v38 = (uint64_t *)a1[1];
    if ((*(_DWORD *)(v20 + 40) & 7) == 2)
    {
      v72[0] = *(_OWORD *)&v64[8];
      v72[1] = *(_OWORD *)&v64[24];
      v73 = *(_OWORD *)&v64[40];
      LOWORD(v87) = 257;
      sub_22E3C408C(v38, (uint64_t)v72, 2, (uint64_t)&v85, (uint64_t)&v88);
      v77 = v89;
      v78 = v90;
      v76 = v88;
      v39 = (uint64_t *)a1[1];
      v71[0] = v88;
      v71[1] = v89;
      v71[2] = v90;
      v70 = 257;
      v40 = sub_22E3C2A7C(v39, (uint64_t)v71, (uint64_t)v69);
      v41 = (uint64_t *)a1[1];
      v85 = *(_OWORD *)&v65[8];
      v86 = *(_OWORD *)&v65[24];
      v87 = *(_OWORD *)&v65[40];
      LOWORD(v84) = 257;
      sub_22E3C408C(v41, (uint64_t)&v85, 2, (uint64_t)&v82, (uint64_t)&v88);
      v42 = a1[1];
      v82 = v88;
      v83 = v89;
      v84 = v90;
      v43 = v40;
    }
    else
    {
      v85 = *(_OWORD *)&v65[8];
      v86 = *(_OWORD *)&v65[24];
      v87 = *(_OWORD *)&v65[40];
      LOWORD(v84) = 257;
      sub_22E3C408C(v38, (uint64_t)&v85, 2, (uint64_t)&v82, (uint64_t)&v88);
      v42 = a1[1];
      v82 = v88;
      v83 = v89;
      v84 = v90;
      v43 = v30;
    }
    sub_22E3BEDDC(v42, v43, &v82, 0);
  }
  if ((*(_BYTE *)(v20 + 40) & 7) == 3)
  {
    v52 = (uint64_t *)a1[1];
    v53 = *(_QWORD *)(*a1 + 88);
    *(_QWORD *)&v88 = "bound.ptr.arith.new";
    LOWORD(v90) = 259;
    v54 = (uint64_t *)sub_22E3C1740(v52, 47, v30, v53, (uint64_t)&v88);
    v55 = a1[1];
    LOWORD(v90) = 257;
    v56 = sub_22E3C18F4(v55, 35, v54, v58, (uint64_t)&v88);
    v57 = v56;
    if (v56 && *(unsigned __int8 *)(v56 + 16) >= 0x1Cu)
      llvm::Instruction::addAnnotationMetadata();
    sub_22F25E298(*a1, v57, 9);
  }
  v44 = *(_QWORD *)(*a1 + 1864);
  if ((v44 & 0x10000) != 0)
  {
    sub_22E4DF4E0(*a1, a3, (unsigned __int8 *)a4, v68, a6, 0);
    v44 = *(_QWORD *)(*a1 + 1864);
  }
  if ((v44 & 0x80000000) != 0)
  {
    v45 = (uint64_t *)a1[1];
    v63[0] = *(_OWORD *)((char *)v66 + 8);
    v63[1] = *(_OWORD *)((char *)&v66[1] + 8);
    v63[2] = *(_OWORD *)((char *)&v66[2] + 8);
    LOWORD(v87) = 257;
    sub_22E3C408C(v45, (uint64_t)v63, 0, (uint64_t)&v85, (uint64_t)&v88);
    v46 = (uint64_t *)a1[1];
    v62[0] = v88;
    v62[1] = v89;
    v62[2] = v90;
    LOWORD(v87) = 257;
    v47 = (uint64_t *)sub_22E3C2A7C(v46, (uint64_t)v62, (uint64_t)&v85);
    v48 = sub_22F10ACF8(*(_QWORD *)(*(_QWORD *)(a4 + 8) & 0xFFFFFFFFFFFFFFF0));
    v49 = *a1;
    v50 = sub_22E66C868(*(_QWORD *)(v49 + 144) + 280, v48, 0);
    sub_22EFF605C(a3);
    *(_QWORD *)&v85 = "add.ptr";
    LOWORD(v87) = 259;
    sub_22E513CE8(v49, v50, v47, (uint64_t **)&v68, 1, v59, a7, v51, (uint64_t)&v85);
  }
}

uint64_t sub_22E4F7C18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t result;
  int v21;
  uint64_t *v22;
  __int128 v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  __int128 v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;

  v12 = *(_QWORD *)(*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFFFF0);
  if (!v12 || *(_BYTE *)(v12 + 16) != 39)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
      v12 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFFFF0));
    else
      v12 = 0;
  }
  v13 = *(uint64_t **)(a1 + 8);
  v14 = *(_OWORD *)(a2 + 24);
  v38 = *(_OWORD *)(a2 + 8);
  v39 = v14;
  v40 = *(_OWORD *)(a2 + 40);
  LOWORD(v37) = 257;
  v15 = sub_22E3C408C(v13, (uint64_t)&v38, 0, (uint64_t)&v35, (uint64_t)&v41);
  v16 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)&v35 = a3;
  v17 = *(_QWORD *)(a6 + 24);
  if (!v17)
    goto LABEL_15;
  v18 = (__int128 *)(a2 + 8);
  v19 = (*(uint64_t (**)(uint64_t, __int128 *, __n128))(*(_QWORD *)v17 + 48))(v17, &v35, v15);
  v35 = v41;
  v36 = v42;
  v37 = v43;
  result = sub_22E3BEDDC(v16, v19, &v35, 0);
  v21 = *(_DWORD *)(v12 + 40);
  if ((v21 & 6) == 2)
  {
    v22 = *(uint64_t **)(a1 + 8);
    v23 = *(_OWORD *)(a2 + 24);
    v38 = *v18;
    v39 = v23;
    v40 = *(_OWORD *)(a2 + 40);
    LOWORD(v37) = 257;
    v24 = sub_22E3C408C(v22, (uint64_t)&v38, 1, (uint64_t)&v35, (uint64_t)&v41);
    v25 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)&v35 = a4;
    v26 = *(_QWORD *)(a6 + 24);
    if (!v26)
      goto LABEL_15;
    v27 = (*(uint64_t (**)(uint64_t, __int128 *, __n128))(*(_QWORD *)v26 + 48))(v26, &v35, v24);
    v35 = v41;
    v36 = v42;
    v37 = v43;
    result = sub_22E3BEDDC(v25, v27, &v35, 0);
    v21 = *(_DWORD *)(v12 + 40);
    v28 = 2;
  }
  else
  {
    v28 = 1;
  }
  if ((v21 & 7) != 2)
    return result;
  v29 = *(uint64_t **)(a1 + 8);
  v30 = v18[1];
  v38 = *v18;
  v39 = v30;
  v40 = v18[2];
  LOWORD(v37) = 257;
  v31 = sub_22E3C408C(v29, (uint64_t)&v38, v28, (uint64_t)&v35, (uint64_t)&v41);
  v32 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)&v35 = a5;
  v33 = *(_QWORD *)(a6 + 24);
  if (!v33)
  {
LABEL_15:
    sub_22E4A06C4();
    JUMPOUT(0x22E4F7E40);
  }
  v34 = (*(uint64_t (**)(uint64_t, __int128 *, __n128))(*(_QWORD *)v33 + 48))(v33, &v35, v31);
  v35 = v41;
  v36 = v42;
  v37 = v43;
  return sub_22E3BEDDC(v32, v34, &v35, 0);
}

void sub_22E4F7E44()
{
  JUMPOUT(0x2348A0E9CLL);
}

__n128 sub_22E4F7E58(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24FA63CD8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_22E4F7E90(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24FA63CD8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_22E4F7EB0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[32];
  __int16 v7;

  v2 = *a2;
  v3 = *(uint64_t **)(*(_QWORD *)(a1 + 8) + 8);
  v4 = sub_22E66C868(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 144) + 280, **(_QWORD **)(a1 + 16), 0);
  v7 = 257;
  return sub_22E3C1740(v3, 49, v2, v4, (uint64_t)v6);
}

double sub_22E4F7F10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  unsigned int v10;
  _BYTE v11[56];
  _OWORD v12[4];
  _OWORD v13[8];
  uint64_t v14;
  _OWORD v15[8];
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v4 && *(_BYTE *)(v4 + 16) == 39 && (*(_DWORD *)(v4 + 40) & 6) == 2)
    sub_22E4E0888(*(_QWORD *)a1, (unsigned __int8 *)a2, 0, (uint64_t)&v17);
  else
    sub_22E4D8D7C(*(_QWORD *)a1, (unsigned int *)a2, (uint64_t)&v17);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 6)
    goto LABEL_10;
  v5 = *(_QWORD *)a1;
  v15[6] = v23;
  v15[7] = v24;
  v16 = v25;
  v15[2] = v19;
  v15[3] = v20;
  v15[4] = v21;
  v15[5] = v22;
  v15[0] = v17;
  v15[1] = v18;
  if (sub_22E3BF6AC(v5, (uint64_t)v15))
  {
LABEL_10:
    v13[5] = v22;
    v13[6] = v23;
    v13[7] = v24;
    v13[1] = v18;
    v13[2] = v19;
    v13[3] = v20;
    v13[4] = v21;
    v7 = *(_QWORD *)a1;
    v14 = v25;
    v13[0] = v17;
    sub_22EFF605C(a2);
    v8 = *(_OWORD *)(a1 + 32);
    v12[0] = *(_OWORD *)(a1 + 16);
    v12[1] = v8;
    v9 = *(_OWORD *)(a1 + 64);
    v12[2] = *(_OWORD *)(a1 + 48);
    v12[3] = v9;
    *(_QWORD *)&result = sub_22F24512C(v7, (uint64_t)v13, v10, v12, (uint64_t)v11).n128_u64[0];
  }
  else
  {
    *(_QWORD *)&result = sub_22E4F7088((uint64_t *)a1, *(_QWORD *)(a2 + 8), &v17, 1).n128_u64[0];
  }
  return result;
}

int32x2_t sub_22E4F8098(_QWORD **a1, unsigned __int8 *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unsigned __int8 **v8;
  unsigned __int8 *v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  char v13;
  _BOOL4 v14;
  _QWORD *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int32x2_t result;
  int v31;
  __int128 v32;
  __int128 v33[3];
  uint64_t v34;
  _QWORD *v35;
  _QWORD v36[3];
  const char *v37;
  uint64_t v38;
  __int16 v39;

  v4 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v5 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v37 = "cond.end";
  v39 = 259;
  v6 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v7 = *a1;
  v35 = *a1;
  v36[0] = 0;
  v36[2] = 0;
  if (*a2 == 103)
  {
    v34 = v7[40];
LABEL_3:
    v8 = (unsigned __int8 **)(a2 + 24);
    goto LABEL_4;
  }
  sub_22F253B0C((uint64_t)v7, *((_QWORD *)a2 + 7), *((_QWORD *)a2 + 3), (uint64_t)v36);
  v31 = *a2;
  v7 = *a1;
  v34 = (*a1)[40];
  if (v31 == 103)
    goto LABEL_3;
  v8 = (unsigned __int8 **)(a2 + 32);
LABEL_4:
  v9 = *v8;
  v10 = sub_22E3CF180((uint64_t)(v7 + 488), (uint64_t)a2);
  if (v11)
    v12 = v10;
  else
    v12 = 0;
  sub_22E61F8F8(v7, v9, (uint64_t)v4, (uint64_t)v5, v12, 0);
  v13 = *((_BYTE *)a1 + 72);
  v14 = (v13 & 1) == 0 && sub_22F115260(*((_QWORD *)a2 + 1)) == 4;
  *((_BYTE *)a1 + 72) = (_BYTE)a1[9] & 0xFE | (v13 | v14) & 1;
  v15 = *a1;
  if (!(*a1)[729])
    v15[729] = &v34;
  v16 = (v13 | v14) & 1;
  sub_22E5ED9B4(v15, v4, 0);
  sub_22E3CB7B0(*a1, (uint64_t)a2, 0);
  v17 = 40;
  if (*a2 == 103)
    v17 = 32;
  v18 = *(_QWORD *)&a2[v17];
  v19 = (uint64_t)*a1;
  v37 = 0;
  v38 = v19;
  sub_22EFF605C(v18);
  sub_22E48EE24((uint64_t *)&v37, v20, 0);
  sub_22E4F0158(a1, v18);
  sub_22E48F084(&v37);
  v21 = (uint64_t)*a1;
  if ((uint64_t *)(*a1)[729] == &v34)
    *(_QWORD *)(v21 + 5832) = 0;
  v22 = (uint64_t *)(v21 + 272);
  v23 = llvm::User::operator new((llvm::User *)0x40);
  llvm::BranchInst::BranchInst();
  v39 = 257;
  sub_22E3C12C8(v22, v23, (uint64_t)&v37);
  *((_BYTE *)a1 + 72) = (_BYTE)a1[9] & 0xFE | v16;
  v24 = *a1;
  if (!(*a1)[729])
    v24[729] = &v34;
  sub_22E5ED9B4(v24, v5, 0);
  v25 = 48;
  if (*a2 == 103)
    v25 = 40;
  v26 = *(_QWORD *)&a2[v25];
  v27 = (uint64_t)*a1;
  v37 = 0;
  v38 = v27;
  sub_22EFF605C(v26);
  sub_22E48EE24((uint64_t *)&v37, v28, 0);
  sub_22E4F0158(a1, v26);
  sub_22E48F084(&v37);
  v29 = *a1;
  if ((uint64_t *)(*a1)[729] == &v34)
    v29[729] = 0;
  if (v14)
  {
    v32 = *((_OWORD *)a1 + 2);
    v33[0] = *((_OWORD *)a1 + 1);
    v33[1] = v32;
    v33[2] = *((_OWORD *)a1 + 3);
    sub_22F259F50((uint64_t)v29, 4, v33, *((_QWORD *)a2 + 1));
    v29 = *a1;
  }
  sub_22E5ED9B4(v29, v6, 0);
  if (v36[0])
    return sub_22F254324((uint64_t)v36, (uint64_t)v35);
  return result;
}

void sub_22E4F8444(__int128 *a1, _OWORD *a2, unint64_t a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;
  __int128 v13[3];
  const char *v14;
  __int16 v15;

  if (*((_QWORD *)a2 + 2))
  {
    v4 = a2[2];
    *a1 = a2[1];
    a1[1] = v4;
    v5 = a2[4];
    a1[2] = a2[3];
    a1[3] = v5;
  }
  else
  {
    v8 = *(_QWORD *)a2;
    v14 = "agg.tmp.ensured";
    v15 = 259;
    sub_22E4211F0(v8, a3, (uint64_t)&v14, 0, (uint64_t)a1);
    v9 = *(_QWORD *)(*(_QWORD *)a2 + 144);
    if ((*(_BYTE *)(*(_QWORD *)(v9 + 152) + 104) & 0x20) != 0)
    {
      v10 = sub_22EF5BA38(*(_QWORD *)(v9 + 144), a3);
      if (sub_22F10C618(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0)))
      {
        v11 = *(_QWORD **)a2;
        v12 = a1[1];
        v13[0] = *a1;
        v13[1] = v12;
        v13[2] = a1[2];
        sub_22E486680(v11, a3, v13, 0);
      }
    }
  }
}

void sub_22E4F8518(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE *v17;
  _OWORD *v18;
  int v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __n128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _OWORD v37[8];
  uint64_t v38;
  _QWORD v39[6];
  char v40;
  _OWORD v41[8];
  uint64_t v42;
  _OWORD v43[3];
  uint64_t v44;
  char v45;
  _OWORD v46[8];
  uint64_t v47;
  _OWORD v48[8];
  uint64_t v49;
  _BYTE v50[56];
  _OWORD v51[8];
  uint64_t v52;
  uint64_t v53[2];
  char v54;
  uint64_t v55;

  v6 = *(_QWORD *)(a3 + 64);
  if ((*(_BYTE *)(a1 + 72) & 4) == 0 || (sub_22E4EFD40(a2, *(_QWORD *)a1) & 1) == 0)
  {
    v7 = *a2;
    if (v7 == 131)
    {
LABEL_6:
      v8 = *(_OWORD *)(a3 + 112);
      v51[6] = *(_OWORD *)(a3 + 96);
      v51[7] = v8;
      v52 = *(_QWORD *)(a3 + 128);
      v9 = *(_OWORD *)(a3 + 48);
      v51[2] = *(_OWORD *)(a3 + 32);
      v51[3] = v9;
      v10 = *(_OWORD *)(a3 + 80);
      v51[4] = *(_OWORD *)(a3 + 64);
      v51[5] = v10;
      v11 = *(_OWORD *)(a3 + 16);
      v51[0] = *(_OWORD *)a3;
      v51[1] = v11;
      sub_22E4F877C((uint64_t *)a1, (uint64_t)v51);
      return;
    }
    if (v7 != 190)
    {
      if (v7 == 179)
        goto LABEL_6;
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) & 0xFE) == 0x28)
      {
        sub_22E4DDB88(*(_QWORD *)a1, (uint64_t)a2, (uint64_t)v50);
        v12 = *(_QWORD *)a1;
        v13 = *(_OWORD *)(a3 + 112);
        v48[6] = *(_OWORD *)(a3 + 96);
        v48[7] = v13;
        v49 = *(_QWORD *)(a3 + 128);
        v14 = *(_OWORD *)(a3 + 48);
        v48[2] = *(_OWORD *)(a3 + 32);
        v48[3] = v14;
        v15 = *(_OWORD *)(a3 + 80);
        v48[4] = *(_OWORD *)(a3 + 64);
        v48[5] = v15;
        v16 = *(_OWORD *)(a3 + 16);
        v48[0] = *(_OWORD *)a3;
        v48[1] = v16;
        v17 = v50;
        v18 = v48;
LABEL_14:
        sub_22E4DAAE0(v12, (uint64_t)v17, (uint64_t)v18, 0);
        return;
      }
      v19 = sub_22E619D68(v6);
      if (!v19)
      {
        v23 = *(_QWORD *)a1;
        if (!*(_DWORD *)a3)
        {
          v28 = *(_OWORD *)(a3 + 112);
          v41[6] = *(_OWORD *)(a3 + 96);
          v41[7] = v28;
          v42 = *(_QWORD *)(a3 + 128);
          v29 = *(_OWORD *)(a3 + 48);
          v41[2] = *(_OWORD *)(a3 + 32);
          v41[3] = v29;
          v30 = *(_OWORD *)(a3 + 80);
          v41[4] = *(_OWORD *)(a3 + 64);
          v41[5] = v30;
          v31 = *(__n128 *)(a3 + 16);
          v41[0] = *(_OWORD *)a3;
          v41[1] = v31;
          sub_22E4C7674(v23, a2, 0, (uint64_t *)v41, 0, v31);
          return;
        }
        v53[0] = v23;
        v53[1] = v23 + 272;
        v54 = 0;
        v55 = *(_QWORD *)(*(_QWORD *)(v23 + 144) + 232);
        v39[0] = sub_22E50E974(v53, a2);
        v39[1] = 0;
        v40 = 0;
        v24 = *(_OWORD *)(a3 + 112);
        v37[6] = *(_OWORD *)(a3 + 96);
        v37[7] = v24;
        v38 = *(_QWORD *)(a3 + 128);
        v25 = *(_OWORD *)(a3 + 48);
        v37[2] = *(_OWORD *)(a3 + 32);
        v37[3] = v25;
        v26 = *(_OWORD *)(a3 + 80);
        v37[4] = *(_OWORD *)(a3 + 64);
        v37[5] = v26;
        v27 = *(_OWORD *)(a3 + 16);
        v37[0] = *(_OWORD *)a3;
        v37[1] = v27;
        v17 = v39;
        v18 = v37;
        v12 = v23;
        goto LABEL_14;
      }
      if (v19 == 2)
      {
        v20 = *(_QWORD *)a1;
        v21 = *(_BYTE *)(a1 + 72);
        v22 = *(_OWORD *)(a3 + 24);
        v43[0] = *(_OWORD *)(a3 + 8);
        v43[1] = v22;
        v43[2] = *(_OWORD *)(a3 + 40);
        v44 = *(_QWORD *)(a3 + 72);
        v45 = v21 & 4 | 0x11;
        sub_22E4EF100(v20, a2, v43);
      }
      else
      {
        v32 = *(_QWORD *)a1;
        v33 = *(_OWORD *)(a3 + 112);
        v46[6] = *(_OWORD *)(a3 + 96);
        v46[7] = v33;
        v47 = *(_QWORD *)(a3 + 128);
        v34 = *(_OWORD *)(a3 + 48);
        v46[2] = *(_OWORD *)(a3 + 32);
        v46[3] = v34;
        v35 = *(_OWORD *)(a3 + 80);
        v46[4] = *(_OWORD *)(a3 + 64);
        v46[5] = v35;
        v36 = *(_OWORD *)(a3 + 16);
        v46[0] = *(_OWORD *)a3;
        v46[1] = v36;
        sub_22F262998(v32, (uint64_t)a2, (uint64_t)v46, 1);
      }
    }
  }
}

double sub_22E4F877C(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  double result;
  int v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD v27[3];
  _OWORD v28[8];
  uint64_t v29;
  _OWORD v30[3];
  _QWORD v31[2];
  _OWORD v32[8];
  uint64_t v33;
  uint64_t v34[6];
  char v35;

  v4 = *(_QWORD *)(a2 + 64);
  if ((a1[9] & 4) == 0 || (sub_22E66DE5C(*(_QWORD *)(*a1 + 144) + 280, *(_QWORD *)(a2 + 64)) & 1) == 0)
  {
    v6 = sub_22E619D68(v4);
    v7 = *a1;
    if (v6)
    {
      v8 = *(_OWORD *)(a2 + 24);
      v27[0] = *(_OWORD *)(a2 + 8);
      v27[1] = v8;
      v27[2] = *(_OWORD *)(a2 + 40);
      sub_22E620824(v7, (uint64_t)v27, *(_QWORD *)(a2 + 64));
    }
    else
    {
      v9 = sub_22E507208(*(_QWORD **)(v7 + 144), v4);
      if (*(_DWORD *)a2 == 2)
      {
        v10 = *a1;
        v34[0] = v9;
        v34[1] = 0;
        v35 = 0;
        v11 = *(_OWORD *)(a2 + 112);
        v32[6] = *(_OWORD *)(a2 + 96);
        v32[7] = v11;
        v33 = *(_QWORD *)(a2 + 128);
        v12 = *(_OWORD *)(a2 + 48);
        v32[2] = *(_OWORD *)(a2 + 32);
        v32[3] = v12;
        v13 = *(_OWORD *)(a2 + 80);
        v32[4] = *(_OWORD *)(a2 + 64);
        v32[5] = v13;
        v14 = *(_OWORD *)(a2 + 16);
        v32[0] = *(_OWORD *)a2;
        v32[1] = v14;
        sub_22E4E9128(v10, v34, (uint64_t)v32, 0);
      }
      else
      {
        v15 = *(_QWORD *)((*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFFFF0) + 8);
        if ((v15 & 8) != 0)
        {
          v16 = HIDWORD(*(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFF0) + 0x18));
          if ((v16 & 0xC) != 0 && (*(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x2000000000) != 0)
          {
            v23 = *a1;
            v24 = *(_OWORD *)(a2 + 24);
            v30[0] = *(_OWORD *)(a2 + 8);
            v30[1] = v24;
            v30[2] = *(_OWORD *)(a2 + 40);
            v25 = sub_22F289E38(v23, v16, (uint64_t)v30);
            v31[0] = v25;
            v31[1] = v26;
            if ((v25 & 2) != 0)
              v9 = sub_22E62243C(*a1, v31, v9, 249);
          }
        }
        v18 = *a1;
        v19 = *(_OWORD *)(a2 + 112);
        v28[6] = *(_OWORD *)(a2 + 96);
        v28[7] = v19;
        v29 = *(_QWORD *)(a2 + 128);
        v20 = *(_OWORD *)(a2 + 48);
        v28[2] = *(_OWORD *)(a2 + 32);
        v28[3] = v20;
        v21 = *(_OWORD *)(a2 + 80);
        v28[4] = *(_OWORD *)(a2 + 64);
        v28[5] = v21;
        v22 = *(_OWORD *)(a2 + 16);
        v28[0] = *(_OWORD *)a2;
        v28[1] = v22;
        return sub_22E4E87FC(v18, v9, (uint64_t)v28, 1u);
      }
    }
  }
  return result;
}

double sub_22E4F891C(uint64_t *a1, unint64_t a2, __int128 *a3)
{
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  double result;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[2];
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25[2];
  uint64_t v26;
  __int128 v27[3];

  v5 = *a1;
  v6 = a3[1];
  v22 = *a3;
  v23 = v6;
  v24 = a3[2];
  sub_22E6281E0(*(_QWORD **)(v5 + 144), a2, (uint64_t)v20);
  v27[0] = v22;
  v27[1] = v23;
  v27[2] = v24;
  v7 = *(_QWORD *)(*(_QWORD *)(v5 + 144) + 144);
  v25[0] = v20[0];
  v25[1] = v20[1];
  v26 = v21;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  *((_QWORD *)&v9 + 1) = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 2;
  LODWORD(v9) = 0;
  v18 = 0u;
  v19 = 0u;
  sub_22E3C113C((uint64_t)&v9, v27, a2, 2, v25, v7);
  *(_QWORD *)&result = sub_22E4F7088(a1, a2, &v9, 0).n128_u64[0];
  return result;
}

void sub_22E4F89F8(_QWORD **a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, _QWORD, _QWORD), uint64_t a4)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  void (*v9)(_QWORD *__return_ptr, _QWORD, _QWORD);
  int v10;
  _BOOL4 v11;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  __int128 v21;
  char v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  llvm::DataLayout *DataLayout;
  llvm::Type *v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  BOOL v33;
  unint64_t ABITypeAlignment;
  uint64_t v35;
  void (*v36)(_QWORD *__return_ptr, _QWORD, _QWORD);
  uint64_t v37;
  __int128 v38[3];
  uint64_t v39;
  _OWORD v40[3];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[4];
  __int128 v45;
  char v46;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *((_BYTE *)a1 + 72);
  if ((v7 & 1) != 0)
  {
    v11 = 0;
    if (((_BYTE)a1[9] & 8) != 0)
      goto LABEL_3;
LABEL_5:
    if ((v7 & 2) == 0 && v11)
    {
      v13 = (unint64_t)a1[2];
      v42 = 0;
      v43 = 0;
      if (!v13)
        goto LABEL_21;
    }
    else
    {
      v42 = 0;
      v43 = 0;
      if ((v7 & 2) != 0)
        goto LABEL_21;
      v13 = (unint64_t)a1[2];
    }
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v18 = (unint64_t)a1[3];
    v17 = (uint64_t)a1[4];
    v19 = a1[5];
    v20 = -1;
    v21 = *((_OWORD *)a1 + 3);
    goto LABEL_14;
  }
  v8 = a4;
  v9 = a3;
  v10 = sub_22F115260(*(_QWORD *)(a2 + 8));
  a3 = v9;
  a4 = v8;
  v11 = v10 == 4;
  v7 = *((_BYTE *)a1 + 72);
  if ((v7 & 8) == 0)
    goto LABEL_5;
LABEL_3:
  v42 = 0;
  v43 = 0;
LABEL_21:
  v36 = a3;
  v37 = a4;
  v25 = (uint64_t)*a1;
  v44[0] = "tmp";
  LOWORD(v45) = 259;
  v26 = sub_22F25E4D4(v25, v6, (uint64_t)v44, (unint64_t *)&v42);
  if (v26 <= 7)
    v13 = 0;
  else
    v13 = v26 & 0xFFFFFFFFFFFFFFF8;
  if (v26 <= 7)
    v18 = 0;
  else
    v18 = v27 & 0xFFFFFFFFFFFFFFF8;
  if (v26 >= 8)
    v17 = 1 << (v27 & 7 | (8 * (v26 & 7)));
  else
    v17 = 0;
  DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)((*a1)[18] + 200));
  v29 = (llvm::Type *)sub_22E66C868((*a1)[18] + 280, v6, 0);
  sub_22E3C304C((uint64_t)DataLayout, (uint64_t)v29);
  v31 = (unint64_t)(v30 + 7) >> 3;
  v33 = v32 == 1;
  ABITypeAlignment = llvm::DataLayout::getABITypeAlignment(DataLayout, v29);
  v16 = sub_22E4C9CC0((uint64_t)*a1, (ABITypeAlignment + v31 - 1) / ABITypeAlignment * ABITypeAlignment, v33, v42 & 0xFFFFFFFFFFFFFFF8);
  if (v16)
  {
    v35 = *(_QWORD *)a1[1][7];
    if (v35)
      v15 = v35 - 24;
    else
      v15 = 0;
    sub_22E47DD24((uint64_t)*a1, 11, v42, v43, v16);
    v20 = (*a1)[249] - (*a1)[250];
    v19 = 0;
  }
  else
  {
    v15 = 0;
    v19 = 0;
    v20 = -1;
  }
  v14 = 1;
  v21 = 0uLL;
  a3 = v36;
  a4 = v37;
LABEL_14:
  v22 = (2 * *((_BYTE *)a1 + 80)) | (((_BYTE)a1[8] & 4) != 0) | (4 * ((_BYTE)a1[9] & 1));
  v44[0] = v13;
  v44[1] = v18;
  v44[2] = v17;
  v44[3] = v19;
  v45 = v21;
  v46 = v22;
  a3(v40, a4, v44);
  if (v14)
  {
    v23 = *(_QWORD *)(a2 + 8);
    v38[0] = v40[0];
    v38[1] = v40[1];
    v38[2] = v40[2];
    v39 = v41;
    sub_22E4F891C((uint64_t *)a1, v23, v38);
    if (v15)
      v24 = v11;
    else
      v24 = 1;
    if ((v24 & 1) == 0)
    {
      sub_22F25343C(*a1, (llvm::LLVMContext *)v20, v15);
      sub_22E4C9DFC(*a1, v16, v42 & 0xFFFFFFFFFFFFFFF8);
    }
  }
}

void sub_22E4F8CA8(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned int **v3;
  uint64_t *v4;
  unsigned int *v5;
  __int128 v6;
  __int128 v7[3];
  uint64_t v8;

  v3 = *(unsigned int ***)(a1 + 8);
  v4 = **(uint64_t ***)a1;
  v5 = *v3;
  v6 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v6;
  v7[2] = *(_OWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  sub_22E4ECB90(v4, v5, v7, a3);
}

double sub_22E4F8CF0(_QWORD **a1, uint64_t a2)
{
  double result;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _QWORD **v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  _QWORD *v35;
  llvm::LLVMContext *v36;
  __int128 v37;
  uint64_t *v38;
  uint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t *v64;
  _QWORD *v65;
  uint64_t *v66;
  uint64_t *v67;
  _QWORD *v68;
  uint64_t *v69;
  uint64_t *v70;
  _QWORD *v71;
  void (**v72)(void);
  __int128 *v73;
  void (**v74)(__int128 *);
  unsigned __int8 *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  int v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  unsigned __int8 *v87;
  int v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  int v97;
  BOOL v98;
  BOOL v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  llvm::Value *v103;
  _BOOL4 v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  __int128 v109;
  _QWORD *v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  __int128 v124;
  llvm::Constant **v125;
  uint64_t *v126;
  llvm::GetElementPtrInst *v127;
  uint64_t v128;
  llvm::Type *v129;
  uint64_t v130;
  uint64_t NullValue;
  uint64_t v132;
  __int128 v133;
  uint64_t *v134;
  __int128 v135[3];
  __int128 v136[3];
  char v137;
  _OWORD v138[3];
  _OWORD v139[4];
  _QWORD *v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  _QWORD *v144;
  char v145;
  _BYTE v146[7];
  _QWORD *v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;
  _OWORD v151[3];
  _OWORD v152[3];
  _OWORD v153[3];
  __int128 v154[3];
  __int128 v155[3];
  _QWORD v156[3];
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  __int128 v172;
  __int128 v173;
  __int128 v174[3];
  _QWORD v175[3];
  int v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char v180;
  _OWORD v181[3];
  _OWORD v182[3];
  __int128 v183;
  __int128 v184;
  __int128 v185;
  _BYTE v186[64];
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  uint64_t v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  uint64_t v212;
  uint64_t v213;

  v213 = *MEMORY[0x24BDAC8D0];
  if (a2 && (*(_BYTE *)a2 + 103) >= 0xF6u)
    sub_22E4DFCE0((*a1)[18], a2);
  v5 = *(_DWORD *)a2;
  v6 = (*(_DWORD *)a2 >> 18) & 0x7F;
  if (v6 > 0x3C)
  {
    if (v6 - 61 < 2)
    {
      v20 = *(_QWORD *)(a2 + 16);
      if (a1[2]
        && ((v80 = v5 & 0x1FC0000, v81 = *(_QWORD *)(v20 + 8), v82 = *(_QWORD *)(a2 + 8), (v5 & 0x1FC0000) != 0xF80000)
          ? (v83 = *(_QWORD *)(v20 + 8))
          : (v83 = *(_QWORD *)(a2 + 8)),
            v84 = sub_22F29EC90((*a1)[18], v83),
            v20 = *(_QWORD *)(a2 + 16),
            v84))
      {
        v85 = (uint64_t)*a1;
        v86 = (*a1)[18];
        v87 = sub_22EFFF40C(*(unsigned __int8 **)(a2 + 16), *(_QWORD *)(v86 + 144));
        if ((*v87 + 102) < 0xF5u
          || (v80 == 16252928 ? (v88 = 61) : (v88 = 62),
              ((*(_DWORD *)v87 >> 18) & 0x7F) != v88 || (v20 = *((_QWORD *)v87 + 2)) == 0))
        {
          if (v80 == 16252928)
          {
            v108 = a1[2];
            v109 = *(_OWORD *)(a1 + 5);
            v204 = *(_OWORD *)(a1 + 3);
            v205 = v109;
            v110 = a1[8];
            *(_QWORD *)&v206 = a1[7];
            v111 = *((_BYTE *)a1 + 72);
            LODWORD(v195) = *(_DWORD *)((char *)a1 + 73);
            *(_DWORD *)((char *)&v195 + 3) = *((_DWORD *)a1 + 19);
            if (v108 && sub_22F29EC90(v86, v82))
            {
              if (((_BYTE)a1[9] & 4) == 0)
              {
                v132 = (uint64_t)*a1;
                v133 = *((_OWORD *)a1 + 2);
                v151[0] = *((_OWORD *)a1 + 1);
                v151[1] = v133;
                v151[2] = *((_OWORD *)a1 + 3);
                sub_22E620824(v132, (uint64_t)v151, v82);
              }
              v134 = *a1 + 34;
              v148 = v204;
              v149 = v205;
              v147 = v108;
              v150 = v206;
              LOWORD(v185) = 257;
              sub_22E3C408C(v134, (uint64_t)&v147, 0, (uint64_t)&v183, (uint64_t)v186);
              v204 = *(_OWORD *)&v186[8];
              v205 = *(_OWORD *)&v186[24];
              v108 = *(_QWORD **)v186;
              *(_QWORD *)&v206 = *(_QWORD *)&v186[40];
              v111 = v111 & 0xB | 4;
            }
            v141 = v204;
            v112 = (uint64_t)*a1;
            v113 = *(_QWORD *)(a2 + 16);
            v142 = v205;
            v140 = v108;
            v143 = v206;
            v144 = v110;
            v145 = v111;
            *(_DWORD *)v146 = v195;
            *(_DWORD *)&v146[3] = *(_DWORD *)((char *)&v195 + 3);
            sub_22E4EF100(v112, v113, &v140);
          }
          else
          {
            *(_QWORD *)&v204 = "atomic-to-nonatomic.temp";
            LOWORD(v206) = 259;
            sub_22E4211F0(v85, v81, (uint64_t)&v204, 0, (uint64_t)v186);
            v120 = (uint64_t)*a1;
            v121 = *(_QWORD *)(a2 + 16);
            v139[0] = *(_OWORD *)v186;
            v139[1] = *(_OWORD *)&v186[16];
            v139[2] = *(_OWORD *)&v186[32];
            v139[3] = *(_OWORD *)&v186[48];
            sub_22E4EF100(v120, v121, v139);
            v122 = a1[1];
            v138[0] = *(_OWORD *)v186;
            v138[1] = *(_OWORD *)&v186[16];
            v138[2] = *(_OWORD *)&v186[32];
            LOWORD(v185) = 257;
            sub_22E3C408C(v122, (uint64_t)v138, 0, (uint64_t)&v183, (uint64_t)&v204);
            v136[1] = v205;
            v136[2] = v206;
            v136[0] = v204;
            v137 = ((v186[48] & 4) != 0) | 4;
            return sub_22E4F891C((uint64_t *)a1, v82, v136);
          }
          return result;
        }
        *(_QWORD *)v186 = 0;
        *(_QWORD *)&v186[8] = v85;
      }
      else
      {
        v21 = (uint64_t)*a1;
        *(_QWORD *)v186 = 0;
        *(_QWORD *)&v186[8] = v21;
      }
      sub_22EFF605C(v20);
      sub_22E48EE24((uint64_t *)v186, v22, 0);
      v23 = a1;
      v24 = v20;
    }
    else
    {
      if (v6 != 66)
      {
        if (v6 == 68)
        {
          v19 = *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0);
          if (!v19 || *(_BYTE *)(v19 + 16) != 39)
          {
            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
              v19 = sub_22F10CF48(v19);
            else
              v19 = 0;
          }
          v50 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 8) & 0xFFFFFFFFFFFFFFF0);
          if (!v50 || *(_BYTE *)(v50 + 16) != 39)
          {
            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v50 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
              v50 = sub_22F10CF48(v50);
            else
              v50 = 0;
          }
          sub_22E4F6780(a1, *(_QWORD *)(a2 + 8));
          v51 = (uint64_t)*a1;
          v52 = *((_OWORD *)a1 + 2);
          v183 = *((_OWORD *)a1 + 1);
          v184 = v52;
          v185 = *((_OWORD *)a1 + 3);
          v53 = *(_QWORD *)(a2 + 8);
          sub_22E6281E0(*(_QWORD **)(v51 + 144), v53, (uint64_t)&v192);
          v204 = v183;
          v205 = v184;
          v206 = v185;
          v54 = *(_QWORD *)(*(_QWORD *)(v51 + 144) + 144);
          v195 = v192;
          v196 = v193;
          *(_QWORD *)&v197 = v194;
          memset(&v186[8], 0, 28);
          *(_QWORD *)&v186[48] = 0;
          *(_QWORD *)&v186[40] = 0;
          v187 = 0uLL;
          *(_QWORD *)((char *)&v188 + 4) = 2;
          *(_DWORD *)v186 = 0;
          v190 = 0u;
          v189 = 0u;
          sub_22E3C113C((uint64_t)v186, &v204, v53, 2, &v195, v54);
          v55 = *(_BYTE *)(v50 + 40) & 7;
          if (v55 <= 4 && ((1 << v55) & 0x13) != 0)
          {
            v75 = *(unsigned __int8 **)(a2 + 16);
            v76 = (uint64_t)(*a1 + 34);
            *(_QWORD *)&v204 = *a1;
            *((_QWORD *)&v204 + 1) = v76;
            LOBYTE(v205) = 0;
            *((_QWORD *)&v205 + 1) = *(_QWORD *)(*(_QWORD *)(v204 + 144) + 232);
            v59 = (uint64_t *)sub_22E50E974((uint64_t *)&v204, v75);
            v77 = *(_QWORD *)(v50 + 32);
            v78 = *(_QWORD *)(v77 & 0xFFFFFFFFFFFFFFF0);
            v79 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v78 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 25;
            if (v79 > 1)
            {
              v61 = v59;
            }
            else
            {
              v61 = (uint64_t *)sub_22F25E214(*a1, v59);
              v77 = *(_QWORD *)(v50 + 32);
              v78 = *(_QWORD *)(v77 & 0xFFFFFFFFFFFFFFF0);
            }
            if (!sub_22F2618AC(v78))
            {
              v89 = (uint64_t *)llvm::ConstantInt::get();
              v90 = a1[1];
              v91 = sub_22E66C868((*a1)[18] + 280, v77, 0);
              *(_QWORD *)&v204 = "upper";
              LOWORD(v206) = 259;
              v61 = (uint64_t *)sub_22E3E5044(v90, v91, v61, v89, (uint64_t)&v204);
              if (v79 <= 1)
              {
                v92 = *v59;
                v93 = a1[1];
                LOWORD(v206) = 257;
                v61 = (uint64_t *)sub_22E3CA9BC(v93, (uint64_t)v61, v92, (uint64_t)&v204);
              }
            }
          }
          else
          {
            v56 = (uint64_t)*a1;
            v57 = *(_QWORD *)(a2 + 16);
            *(_QWORD *)&v205 = 0;
            v204 = 0uLL;
            DWORD2(v205) = 0;
            *(_QWORD *)&v207 = 0;
            v206 = 0uLL;
            BYTE8(v207) = 0;
            sub_22E4D79C0(&v183, v56, v57, &v204, 0);
            v58 = (uint64_t)*a1;
            v201 = v183;
            v202 = v184;
            v203 = v185;
            v59 = (uint64_t *)sub_22E4D73E0(v58, &v201, 0);
            v60 = (uint64_t)*a1;
            v198 = v183;
            v199 = v184;
            v200 = v185;
            v61 = (uint64_t *)sub_22E4D73E0(v60, &v198, 1);
            if ((*(_BYTE *)(v50 + 40) & 7) == 2)
            {
              v114 = (uint64_t)*a1;
              v182[0] = v183;
              v182[1] = v184;
              v182[2] = v185;
              v115 = sub_22E4D73E0(v114, v182, 2);
              v116 = (uint64_t)a1[1];
              LOWORD(v197) = 257;
              v117 = sub_22E3C18F4(v116, 35, v59, v115, (uint64_t)&v195);
              v118 = v117;
              if (v117 && *(unsigned __int8 *)(v117 + 16) >= 0x1Cu)
                llvm::Instruction::addAnnotationMetadata();
              sub_22F25E298((uint64_t)*a1, v118, 4);
            }
          }
          v62 = a1[1];
          v195 = *(_OWORD *)&v186[8];
          v196 = *(_OWORD *)&v186[24];
          v197 = *(_OWORD *)&v186[40];
          LOWORD(v194) = 257;
          sub_22E3C408C(v62, (uint64_t)&v195, 0, (uint64_t)&v192, (uint64_t)&v183);
          v63 = (uint64_t)v59;
          if (*v59 != *((_QWORD *)&v183 + 1))
          {
            v64 = a1[1];
            LOWORD(v194) = 257;
            v63 = sub_22E3D3028(v64, v59, *((uint64_t *)&v183 + 1), (uint64_t)&v192);
          }
          v65 = a1[1];
          v192 = v183;
          v193 = v184;
          v194 = v185;
          sub_22E3BEDDC(v65, v63, &v192, 0);
          v66 = a1[1];
          v195 = *(_OWORD *)&v186[8];
          v196 = *(_OWORD *)&v186[24];
          v197 = *(_OWORD *)&v186[40];
          LOWORD(v194) = 257;
          sub_22E3C408C(v66, (uint64_t)&v195, 1, (uint64_t)&v192, (uint64_t)&v183);
          if (*v61 != *((_QWORD *)&v183 + 1))
          {
            v67 = a1[1];
            LOWORD(v194) = 257;
            v61 = (uint64_t *)sub_22E3D3028(v67, v61, *((uint64_t *)&v183 + 1), (uint64_t)&v192);
          }
          v68 = a1[1];
          v192 = v183;
          v193 = v184;
          v194 = v185;
          sub_22E3BEDDC(v68, v61, &v192, 0);
          if ((*(_DWORD *)(v19 + 40) & 7) == 2)
          {
            v69 = a1[1];
            v195 = *(_OWORD *)&v186[8];
            v196 = *(_OWORD *)&v186[24];
            v197 = *(_OWORD *)&v186[40];
            LOWORD(v194) = 257;
            sub_22E3C408C(v69, (uint64_t)&v195, 2, (uint64_t)&v192, (uint64_t)&v183);
            if (*v59 != *((_QWORD *)&v183 + 1))
            {
              v70 = a1[1];
              LOWORD(v194) = 257;
              v59 = (uint64_t *)sub_22E3D3028(v70, v59, *((uint64_t *)&v183 + 1), (uint64_t)&v192);
            }
            v71 = a1[1];
            v192 = v183;
            v193 = v184;
            v194 = v185;
            sub_22E3BEDDC(v71, v59, &v192, 0);
          }
        }
        return result;
      }
LABEL_27:
      v32 = *(_QWORD *)(a2 + 16);
      v33 = (uint64_t)*a1;
      *(_QWORD *)v186 = 0;
      *(_QWORD *)&v186[8] = v33;
      sub_22EFF605C(v32);
      sub_22E48EE24((uint64_t *)v186, v34, 0);
      v23 = a1;
      v24 = v32;
    }
    sub_22E4F0158(v23, v24);
    sub_22E48F084(v186);
    return result;
  }
  switch(v6)
  {
    case 1u:
      v7 = *(_QWORD *)((*a1)[18] + 144);
      v8 = sub_22F10ACF8(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0));
      *(_QWORD *)&v182[0] = sub_22EF5B848(v7, v8, 0);
      *(_QWORD *)&v201 = &off_24FA63D20;
      *((_QWORD *)&v201 + 1) = a1;
      *(_QWORD *)&v202 = v182;
      *((_QWORD *)&v202 + 1) = &v201;
      v9 = (uint64_t)*a1;
      v10 = *(_QWORD *)(a2 + 16);
      memset(v186, 0, 28);
      memset(&v186[32], 0, 25);
      sub_22E4D79C0(&v204, v9, v10, v186, 0);
      v11 = *(_QWORD *)(a2 + 8);
      v12 = (uint64_t)*a1;
      v183 = v204;
      v184 = v205;
      v185 = v206;
      v13 = sub_22E4D73E0(v12, &v183, 0);
      v14 = (uint64_t)*a1;
      v195 = v204;
      v196 = v205;
      v197 = v206;
      v15 = sub_22E4D73E0(v14, &v195, 1);
      v16 = 0;
      v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v17 && *(_BYTE *)(v17 + 16) == 39)
      {
        if ((*(_BYTE *)(v17 + 40) & 7) == 2)
        {
          v18 = (uint64_t)*a1;
          v192 = v204;
          v193 = v205;
          v194 = v206;
          v16 = sub_22E4D73E0(v18, &v192, 2);
        }
        else
        {
          v16 = 0;
        }
      }
      if (*((_QWORD *)&v202 + 1))
      {
        if (*((__int128 **)&v202 + 1) == &v201)
        {
          *((_QWORD *)&v199 + 1) = &v198;
          (*(void (**)(uint64_t, uint64_t))(v201 + 24))((uint64_t)&v201, (uint64_t)&v198);
        }
        else
        {
          *((_QWORD *)&v199 + 1) = (*(uint64_t (**)(void))(**((_QWORD **)&v202 + 1) + 16))();
        }
      }
      else
      {
        *((_QWORD *)&v199 + 1) = 0;
      }
      sub_22E4F9EBC(a1, v11, v13, v15, v16, &v198);
      if (*((__int128 **)&v199 + 1) == &v198)
      {
        v72 = (void (**)(void))(v198 + 32);
      }
      else
      {
        if (!*((_QWORD *)&v199 + 1))
          goto LABEL_69;
        v72 = (void (**)(void))(**((_QWORD **)&v199 + 1) + 40);
      }
      (*v72)();
LABEL_69:
      v73 = (__int128 *)*((_QWORD *)&v202 + 1);
      if (*((__int128 **)&v202 + 1) != &v201)
        goto LABEL_70;
      v74 = (void (**)(__int128 *))(v201 + 32);
      v73 = &v201;
      goto LABEL_73;
    case 3u:
      if (a1[2])
      {
        sub_22E4D8D7C((uint64_t)*a1, *(unsigned int **)(a2 + 16), (uint64_t)v186);
        v155[0] = *(_OWORD *)&v186[8];
        v155[1] = *(_OWORD *)&v186[24];
        v155[2] = *(_OWORD *)&v186[40];
        v25 = a1[1];
        v26 = (*a1)[1];
        LOWORD(v185) = 257;
        sub_22E3BEE6C(v25, v155, v26, (uint64_t)&v183, (uint64_t)&v204);
        v27 = *((_OWORD *)a1 + 2);
        v154[0] = *((_OWORD *)a1 + 1);
        v154[1] = v27;
        v154[2] = *((_OWORD *)a1 + 3);
        v28 = a1[1];
        v29 = (*a1)[1];
        LOWORD(v197) = 257;
        sub_22E3BEE6C(v28, v154, v29, (uint64_t)&v195, (uint64_t)&v183);
        sub_22EF5CCD0(*(_QWORD *)((*a1)[18] + 144), *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v195);
        llvm::ConstantInt::get();
        v30 = (uint64_t)a1[1];
        v153[0] = v183;
        v153[1] = v184;
        v153[2] = v185;
        v152[0] = v204;
        v152[1] = v205;
        v152[2] = v206;
        sub_22E3E4F38(v30, v153, v152);
        return result;
      }
      v47 = (uint64_t)*a1;
      v48 = *(_QWORD *)(a2 + 16);
      memset(v156, 0, sizeof(v156));
      v157 = 0;
      v160 = 0;
      v158 = 0;
      v159 = 0;
      v161 = 0;
      v49 = v156;
      goto LABEL_40;
    case 4u:
      v31 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8);
      if ((v31 & 4) == 0 && (*(_BYTE *)((v31 & 0xFFFFFFFFFFFFFFF0) + 8) & 4) == 0)
        goto LABEL_27;
      if (((_BYTE)a1[9] & 1) != 0 || sub_22F115260(*(_QWORD *)(a2 + 8)) != 4)
      {
        sub_22E4F6780(a1, *(_QWORD *)(a2 + 8));
        goto LABEL_27;
      }
      *((_BYTE *)a1 + 72) |= 1u;
      sub_22E4F6780(a1, *(_QWORD *)(a2 + 8));
      sub_22E4EF304((uint64_t *)a1, *(_QWORD *)(a2 + 16));
      v123 = (uint64_t)*a1;
      v124 = *((_OWORD *)a1 + 2);
      v135[0] = *((_OWORD *)a1 + 1);
      v135[1] = v124;
      v135[2] = *((_OWORD *)a1 + 3);
      return sub_22F259F50(v123, 4, v135, *(_QWORD *)(a2 + 8));
    case 5u:
    case 0x14u:
    case 0x15u:
      goto LABEL_27;
    case 9u:
      sub_22E4E0888((uint64_t)*a1, *(unsigned __int8 **)(a2 + 16), 0, (uint64_t)v186);
      v35 = *a1;
      if (*(_DWORD *)v186)
      {
        sub_22E628400(v35[18], a2, "non-simple lvalue dynamic_cast");
      }
      else
      {
        v181[0] = *(_OWORD *)&v186[8];
        v181[1] = *(_OWORD *)&v186[24];
        v181[2] = *(_OWORD *)&v186[40];
        sub_22E500B7C(v35, v181, a2);
      }
      if (a1[2])
        sub_22E628400((*a1)[18], a2, "lvalue dynamic_cast with a destination");
      return result;
    case 0xBu:
      if (a1[2])
      {
        v36 = *(llvm::LLVMContext **)(*(_QWORD *)(a2 + 16) + 8);
        v37 = *((_OWORD *)a1 + 2);
        v174[0] = *((_OWORD *)a1 + 1);
        v174[1] = v37;
        v174[2] = *((_OWORD *)a1 + 3);
        v38 = a1[1];
        v39 = sub_22E66CB04((llvm::Type ***)((*a1)[18] + 280), v36);
        *(_WORD *)&v186[32] = 257;
        sub_22E3BEE6C(v38, v174, v39, (uint64_t)v186, (uint64_t)&v183);
        v40 = *(unsigned __int8 **)(a2 + 16);
        v41 = (uint64_t)*a1;
        v204 = v183;
        v205 = v184;
        v206 = v185;
        sub_22E6281E0(*(_QWORD **)(v41 + 144), (uint64_t)v36, (uint64_t)&v192);
        *(_OWORD *)v186 = v204;
        *(_OWORD *)&v186[16] = v205;
        *(_OWORD *)&v186[32] = v206;
        v42 = *(_QWORD *)(*(_QWORD *)(v41 + 144) + 144);
        v195 = v192;
        v196 = v193;
        *(_QWORD *)&v197 = v194;
        v165 = 0;
        v166 = 0;
        v163 = 0;
        v164 = 0;
        v168 = 0;
        v167 = 0;
        v170 = 0;
        v169 = 0;
        v171 = 2;
        v162 = 0;
        v172 = 0u;
        v173 = 0u;
        sub_22E3C113C((uint64_t)&v162, (__int128 *)v186, (uint64_t)v36, 2, &v195, v42);
        sub_22E4F8518((uint64_t)a1, v40, (uint64_t)&v162);
      }
      else
      {
        v47 = (uint64_t)*a1;
        v48 = *(_QWORD *)(a2 + 16);
        memset(v175, 0, sizeof(v175));
        v176 = 0;
        v179 = 0;
        v177 = 0;
        v178 = 0;
        v180 = 0;
        v49 = v175;
LABEL_40:
        sub_22E4D79C0(v186, v47, v48, v49, 1);
      }
      return result;
    case 0xCu:
      sub_22E4E04F0((uint64_t)*a1, *(_QWORD *)(a2 + 16), 0, 0, (uint64_t)v186);
      v94 = *(uint64_t **)v186;
      v95 = sub_22F40989C(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 8), *(_QWORD *)((*a1)[18] + 144));
      v96 = *(_QWORD *)(v95 & 0xFFFFFFFFFFFFFFF0);
      v97 = *(unsigned __int8 *)(v96 + 16);
      if (v96)
        v98 = v97 == 2;
      else
        v98 = 0;
      if (v98)
      {
        v119 = llvm::ConstantInt::get();
LABEL_116:
        v125 = (llvm::Constant **)v119;
        goto LABEL_117;
      }
      if (v96)
        v99 = v97 == 5;
      else
        v99 = 0;
      if (v99)
      {
        v119 = (uint64_t)sub_22F297878((uint64_t)*a1, v96);
        goto LABEL_116;
      }
      if (v97 == 4)
        v100 = *(_QWORD *)(v95 & 0xFFFFFFFFFFFFFFF0);
      else
        v100 = 0;
      v101 = *(_QWORD *)(v100 + 40);
      v102 = (uint64_t)*a1;
      if (!v101)
      {
        v119 = llvm::ConstantInt::get();
        goto LABEL_116;
      }
      *(_QWORD *)&v204 = *a1;
      *((_QWORD *)&v204 + 1) = v102 + 272;
      LOBYTE(v205) = 0;
      *((_QWORD *)&v205 + 1) = *(_QWORD *)(*(_QWORD *)(v102 + 144) + 232);
      v103 = sub_22E50E974((uint64_t *)&v204, (unsigned __int8 *)v101);
      v104 = sub_22F110A40(*(_QWORD *)(*(_QWORD *)(v101 + 8) & 0xFFFFFFFFFFFFFFF0));
      v105 = a1[1];
      v106 = (*a1)[11];
      LOWORD(v206) = 257;
      if (v104)
        v107 = 40;
      else
        v107 = 39;
      v125 = (llvm::Constant **)sub_22E3C1740(v105, v107, (uint64_t)v103, v106, (uint64_t)&v204);
      if (sub_22F110C5C(*(_QWORD *)(*(_QWORD *)(v101 + 8) & 0xFFFFFFFFFFFFFFF0)))
      {
        v130 = (uint64_t)a1[1];
        NullValue = llvm::Constant::getNullValue(*v125, v129);
        *(_QWORD *)&v204 = "count.positive";
        LOWORD(v206) = 259;
        sub_22E3C18F4(v130, 39, (uint64_t *)v125, NullValue, (uint64_t)&v204);
        llvm::IRBuilderBase::CreateAssumption();
      }
LABEL_117:
      v126 = a1[1];
      *(_QWORD *)&v204 = "upper";
      LOWORD(v206) = 259;
      v127 = sub_22E3E5044(v126, *(uint64_t *)&v186[8], v94, (uint64_t *)v125, (uint64_t)&v204);
      v128 = *(_QWORD *)(a2 + 8);
      if (qword_253E4BCB8)
      {
        if ((uint64_t *)qword_253E4BCB8 == &qword_253E4BCA0)
        {
          *((_QWORD *)&v205 + 1) = &v204;
          (*(void (**)(uint64_t *, __int128 *))(qword_253E4BCA0 + 24))(&qword_253E4BCA0, &v204);
        }
        else
        {
          *((_QWORD *)&v205 + 1) = (*(uint64_t (**)(void))(*(_QWORD *)qword_253E4BCB8 + 16))();
        }
      }
      else
      {
        *((_QWORD *)&v205 + 1) = 0;
      }
      sub_22E4F9EBC(a1, v128, (uint64_t)v94, (uint64_t)v127, (uint64_t)v94, &v204);
      v73 = (__int128 *)*((_QWORD *)&v205 + 1);
      if (*((__int128 **)&v205 + 1) == &v204)
      {
        v74 = (void (**)(__int128 *))(v204 + 32);
        v73 = &v204;
        goto LABEL_73;
      }
LABEL_70:
      if (v73)
      {
        v74 = (void (**)(__int128 *))(*(_QWORD *)v73 + 40);
LABEL_73:
        (*v74)(v73);
      }
      return result;
    case 0xEu:
      sub_22E4F6780(a1, *(_QWORD *)(a2 + 8));
      v43 = (uint64_t)*a1;
      v44 = *((_OWORD *)a1 + 2);
      v183 = *((_OWORD *)a1 + 1);
      v184 = v44;
      v185 = *((_OWORD *)a1 + 3);
      v45 = *(_QWORD *)(a2 + 8);
      sub_22E6281E0(*(_QWORD **)(v43 + 144), v45, (uint64_t)&v192);
      v204 = v183;
      v205 = v184;
      v206 = v185;
      v46 = *(_QWORD *)(*(_QWORD *)(v43 + 144) + 144);
      v195 = v192;
      v196 = v193;
      *(_QWORD *)&v197 = v194;
      memset(&v186[8], 0, 28);
      *(_QWORD *)&v186[48] = 0;
      *(_QWORD *)&v186[40] = 0;
      v187 = 0uLL;
      *(_QWORD *)((char *)&v188 + 4) = 2;
      *(_DWORD *)v186 = 0;
      v190 = 0u;
      v189 = 0u;
      sub_22E3C113C((uint64_t)v186, &v204, v45, 2, &v195, v46);
      v210 = v189;
      v211 = v190;
      v212 = v191;
      v206 = *(_OWORD *)&v186[32];
      v207 = *(_OWORD *)&v186[48];
      v208 = v187;
      v209 = v188;
      v204 = *(_OWORD *)v186;
      v205 = *(_OWORD *)&v186[16];
      return sub_22E4F877C((uint64_t *)a1, (uint64_t)&v204);
    default:
      return result;
  }
}

_QWORD *sub_22E4F9EBC(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t (**v16)(_QWORD *);
  _OWORD v17[8];
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _OWORD v28[2];
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33[2];
  uint64_t v34;
  __int128 v35[3];
  _QWORD v36[3];
  _QWORD *v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  if (result[2])
  {
    v11 = (uint64_t)result;
    v12 = *result;
    v13 = *((_OWORD *)result + 2);
    v30 = *((_OWORD *)result + 1);
    v31 = v13;
    v32 = *((_OWORD *)result + 3);
    sub_22E6281E0(*(_QWORD **)(v12 + 144), a2, (uint64_t)v28);
    v35[0] = v30;
    v35[1] = v31;
    v35[2] = v32;
    v14 = *(_QWORD *)(*(_QWORD *)(v12 + 144) + 144);
    v33[0] = v28[0];
    v33[1] = v28[1];
    v34 = v29;
    v20 = 0uLL;
    LODWORD(v21) = 0;
    *((_QWORD *)&v19 + 1) = 0;
    *((_QWORD *)&v21 + 1) = 0;
    *(_QWORD *)&v22 = 0;
    v23 = 0uLL;
    *(_QWORD *)((char *)&v24 + 4) = 2;
    LODWORD(v19) = 0;
    v25 = 0u;
    v26 = 0u;
    sub_22E3C113C((uint64_t)&v19, v35, a2, 2, v33, v14);
    v17[6] = v25;
    v17[7] = v26;
    v18 = v27;
    v17[2] = v21;
    v17[3] = v22;
    v17[4] = v23;
    v17[5] = v24;
    v17[0] = v19;
    v17[1] = v20;
    v15 = (_QWORD *)a6[3];
    if (v15)
    {
      if (v15 == a6)
      {
        v37 = v36;
        (*(void (**)(_QWORD *, _QWORD *))(*a6 + 24))(a6, v36);
      }
      else
      {
        v37 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v15 + 16))(v15);
      }
    }
    else
    {
      v37 = 0;
    }
    sub_22E4F7C18(v11, (uint64_t)v17, a3, a4, a5, (uint64_t)v36);
    result = v37;
    if (v37 == v36)
    {
      v16 = (uint64_t (**)(_QWORD *))(v36[0] + 32);
      result = v36;
    }
    else
    {
      if (!v37)
        return result;
      v16 = (uint64_t (**)(_QWORD *))(*v37 + 40);
    }
    return (_QWORD *)(*v16)(result);
  }
  return result;
}

void sub_22E4FA0A4()
{
  JUMPOUT(0x2348A0E9CLL);
}

__n128 sub_22E4FA0B8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24FA63D20;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_22E4FA0F0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FA63D20;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_22E4FA110(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[32];
  __int16 v7;

  v2 = *a2;
  v3 = *(uint64_t **)(*(_QWORD *)(a1 + 8) + 8);
  v4 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 144) + 280), **(llvm::LLVMContext ***)(a1 + 16));
  v7 = 257;
  return sub_22E3C1740(v3, 49, v2, v4, (uint64_t)v6);
}

void sub_22E4FA170()
{
  JUMPOUT(0x2348A0E9CLL);
}

__n128 sub_22E4FA184(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24FA63D68;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_22E4FA1BC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FA63D68;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_22E4FA1DC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  _BYTE v7[32];
  __int16 v8;

  v2 = *a2;
  v3 = *(uint64_t **)(a1 + 16);
  v4 = *(uint64_t **)(*(_QWORD *)(a1 + 8) + 8);
  v5 = *v3;
  v8 = 257;
  return sub_22E3C1740(v4, 49, v2, v5, (uint64_t)v7);
}

void sub_22E4FA21C()
{
  JUMPOUT(0x2348A0E9CLL);
}

__n128 sub_22E4FA230(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24FA63DB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_22E4FA268(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FA63DB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_22E4FA288(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  _BYTE v7[32];
  __int16 v8;

  v2 = *a2;
  v3 = *(uint64_t **)(a1 + 16);
  v4 = *(uint64_t **)(*(_QWORD *)(a1 + 8) + 8);
  v5 = *v3;
  v8 = 257;
  return sub_22E3C1740(v4, 49, v2, v5, (uint64_t)v7);
}

uint64_t sub_22E4FA2C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v10[4];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[6];
  char v18;

  v16 = *(_QWORD *)(a2 + 40);
  v17[0] = sub_22F25E108((uint64_t *)(a1 + 4112), &v16)[1];
  v17[1] = 0;
  v18 = 0;
  v5 = *(_OWORD *)(a3 + 48);
  v10[2] = *(_OWORD *)(a3 + 32);
  v10[3] = v5;
  v6 = *(_OWORD *)(a3 + 16);
  v10[0] = *(_OWORD *)a3;
  v10[1] = v6;
  v15 = *(_QWORD *)(a3 + 128);
  v7 = *(_OWORD *)(a3 + 112);
  v13 = *(_OWORD *)(a3 + 96);
  v14 = v7;
  v8 = *(_OWORD *)(a3 + 80);
  v11 = *(_OWORD *)(a3 + 64);
  v12 = v8;
  return sub_22E4DAAE0(a1, v17, v10, 0, *(double *)&v11);
}

void sub_22E4FA34C(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  _OWORD v7[3];
  uint64_t v8;

  v3 = a1[1];
  v4 = **a1;
  v5 = *v3;
  v6 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v6;
  v7[2] = *(_OWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  sub_22E55C6BC(v4, v5, (uint64_t)v7, a3);
}

void sub_22E4FA398()
{
  JUMPOUT(0x2348A0E9CLL);
}

_QWORD *sub_22E4FA3AC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FA63DF8;
  return result;
}

void sub_22E4FA3D0(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FA63DF8;
}

uint64_t sub_22E4FA3E8(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

uint64_t sub_22E4FA3F0()
{
  qword_253E4BCA0 = (uint64_t)&off_24FA63DF8;
  qword_253E4BCB8 = (uint64_t)&qword_253E4BCA0;
  return __cxa_atexit((void (*)(void *))sub_22F2615EC, &qword_253E4BCA0, &dword_22E3A8000);
}

uint64_t sub_22E4FA41C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unsigned __int8 *a6, uint64_t a7, uint64_t a8)
{
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  _BOOL4 v40;
  unint64_t v41;
  unint64_t v42;
  unsigned __int8 **v43;
  uint64_t v44;
  unint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  char v52;
  __int16 v53;
  unint64_t v54;

  v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 144) + 224) + 416))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 224));
  v17 = sub_22E46BAF0(*(_QWORD *)(a1 + 144) + 280, v16, a2);
  v50 = a3;
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v54 = v17;
  v18 = sub_22E3C187C(a7, (unint64_t)&v50, 1);
  v19 = *(_QWORD *)a7 + 152 * *(unsigned int *)(a7 + 8);
  v20 = *(_OWORD *)(v18 + 16);
  *(_OWORD *)v19 = *(_OWORD *)v18;
  *(_OWORD *)(v19 + 16) = v20;
  v21 = *(_QWORD *)(v18 + 144);
  v22 = *(_OWORD *)(v18 + 128);
  v23 = *(_OWORD *)(v18 + 96);
  *(_OWORD *)(v19 + 112) = *(_OWORD *)(v18 + 112);
  *(_OWORD *)(v19 + 128) = v22;
  *(_QWORD *)(v19 + 144) = v21;
  *(_OWORD *)(v19 + 96) = v23;
  v24 = *(_OWORD *)(v18 + 80);
  v25 = *(_OWORD *)(v18 + 32);
  v26 = *(_OWORD *)(v18 + 48);
  *(_OWORD *)(v19 + 64) = *(_OWORD *)(v18 + 64);
  *(_OWORD *)(v19 + 80) = v24;
  *(_OWORD *)(v19 + 32) = v25;
  *(_OWORD *)(v19 + 48) = v26;
  v27 = *(_DWORD *)(a7 + 8) + 1;
  *(_DWORD *)(a7 + 8) = v27;
  if (a4)
  {
    v50 = a4;
    v51 = 0;
    v52 = 0;
    v53 = 0;
    v54 = a5;
    v28 = sub_22E3C187C(a7, (unint64_t)&v50, 1);
    v29 = *(_QWORD *)a7 + 152 * *(unsigned int *)(a7 + 8);
    v30 = *(_OWORD *)(v28 + 16);
    *(_OWORD *)v29 = *(_OWORD *)v28;
    *(_OWORD *)(v29 + 16) = v30;
    v31 = *(_QWORD *)(v28 + 144);
    v32 = *(_OWORD *)(v28 + 128);
    v33 = *(_OWORD *)(v28 + 96);
    *(_OWORD *)(v29 + 112) = *(_OWORD *)(v28 + 112);
    *(_OWORD *)(v29 + 128) = v32;
    *(_QWORD *)(v29 + 144) = v31;
    *(_OWORD *)(v29 + 96) = v33;
    v34 = *(_OWORD *)(v28 + 80);
    v35 = *(_OWORD *)(v28 + 32);
    v36 = *(_OWORD *)(v28 + 48);
    *(_OWORD *)(v29 + 64) = *(_OWORD *)(v28 + 64);
    *(_OWORD *)(v29 + 80) = v34;
    *(_OWORD *)(v29 + 32) = v35;
    *(_OWORD *)(v29 + 48) = v36;
    v27 = *(_DWORD *)(a7 + 8) + 1;
    *(_DWORD *)(a7 + 8) = v27;
  }
  v37 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (!v37 || *(_BYTE *)(v37 + 16) != 26)
  {
    v37 = sub_22F10CF48(v37);
    v27 = *(_DWORD *)(a7 + 8);
  }
  v38 = sub_22E46DC6C(v37, v27);
  v39 = *(unsigned int *)(a7 + 8);
  if (a8)
  {
    sub_22E5010F0(a7, a8);
  }
  else if (a6)
  {
    v40 = *a6 == 141;
    v41 = v37 & 0xFFFFFFFFFFFFFFFBLL;
    v42 = *(unsigned int *)a6;
    v43 = (unsigned __int8 **)&a6[v42 >> 24];
    v44 = (uint64_t)&v43[((v42 >> 18) & 1) + 1];
    v45 = (unint64_t *)(v44 + 8 * *((unsigned int *)a6 + 4));
    v46 = v44 + 8 * v40;
    v47 = sub_22EFFA604(*v43);
    if (v47)
    {
      if ((*(_DWORD *)(v47 + 28) & 0x7Eu) - 52 >= 6)
        v48 = 0;
      else
        v48 = v47;
    }
    else
    {
      v48 = 0;
    }
    sub_22E477B1C(a1, a7, v41, v46, v45, v48, 0, 0);
  }
  return (v38 | (unint64_t)(v39 << 32)) - 0x100000000;
}

_QWORD *sub_22E4FA654@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[3];
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v5 = 0;
  v6 = *(_QWORD *)(a2 + 64);
  if ((v6 & 1) == 0)
  {
    v7 = (uint64_t *)(v6 & 0xFFFFFFFFFFFFFFFELL);
    if (v7)
      v5 = *v7;
  }
  v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v8 & 8) != 0 && (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x180) == 0x80)
  {
    v9 = *(_QWORD *)(a2 + 16);
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      sub_22E4DFD40(&v34, a1);
      v11 = v34;
      v12 = v35;
      v13 = v36;
      v15 = v37;
      v14 = HIDWORD(v37);
      v17 = v38;
      v16 = v39;
      result = *(_QWORD **)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0);
      if (!result || *((_BYTE *)result + 16) != 39)
      {
        v19 = v34;
        v23 = v39;
        result = (_QWORD *)sub_22F10CF48((uint64_t)result);
        v16 = v23;
        v11 = v19;
      }
    }
    else
    {
      result = sub_22E4D8D7C(&v34);
      v11 = v35;
      v12 = v36;
      v13 = v37;
      v15 = v38;
      v14 = HIDWORD(v38);
      v17 = v39;
      v16 = v40;
    }
    v20 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF0) + 8);
    if ((v20 & 8) != 0)
    {
      v21 = (*(_DWORD *)((v20 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 6) & 7;
      if (v21 == 3)
      {
        v24[0] = v11;
        v24[1] = v12;
        v24[2] = v13;
        v25 = v15;
        v26 = v14;
        v27 = v17;
        v28 = v16;
        result = sub_22E56455C(a1, (uint64_t)v24);
      }
      else if (v21 == 2)
      {
        v29[0] = v11;
        v29[1] = v12;
        v29[2] = v13;
        v30 = v15;
        v31 = v14;
        v32 = v17;
        v33 = v16;
        LOWORD(v38) = 257;
        v22 = sub_22E485864(a1 + 34, (uint64_t)v29, ((unint64_t)(v20 | v5) >> 2) & 1, (uint64_t)&v34);
        result = sub_22F27328C((llvm::Value *)a1, v22, 1);
      }
    }
  }
  else
  {
    result = (_QWORD *)sub_22E4D89CC(a1);
  }
  v18 = *(_BYTE *)(a3 + 48);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 48) = v18 & 0xF8;
  return result;
}

void sub_22E4FA808(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[3];
  uint64_t v21;
  _QWORD v22[4];
  int v23;
  uint64_t v24;
  _OWORD v25[3];
  uint64_t v26;

  v8 = *(unsigned __int8 **)(a2 + *(unsigned __int8 *)(a2 + 3));
  do
  {
    v9 = v8;
    LODWORD(v10) = *v8;
    if (v10 > 0xD5)
    {
      if ((_DWORD)v10 == 233)
      {
        LOBYTE(v10) = *(_DWORD *)v8;
        if ((*(_DWORD *)v8 & 0x7C0000) != 0x300000)
          break;
        v11 = v8 + 16;
      }
      else
      {
        if ((_DWORD)v10 != 214)
          break;
        v11 = v8 + 24;
      }
    }
    else if ((_DWORD)v10 == 155)
    {
      if ((**((_DWORD **)v8 + 2) & 0x18000) != 0)
        goto LABEL_18;
      v11 = v8 + 24;
      if (!v9[48])
        v11 = v9 + 32;
      LOBYTE(v10) = -101;
    }
    else
    {
      if ((_DWORD)v10 != 176)
        break;
      v10 = *((unsigned int *)v8 + 5);
      if ((_DWORD)v10 == -1)
        goto LABEL_18;
      v11 = &v8[8 * v10 + 40];
      LOBYTE(v10) = -80;
    }
    v8 = *(unsigned __int8 **)v11;
  }
  while (v8 != v9);
  if ((v10 & 0xFE) == 0x70)
  {
    v19 = *(_OWORD *)(a3 + 16);
    v25[0] = *(_OWORD *)a3;
    v25[1] = v19;
    v25[2] = *(_OWORD *)(a3 + 32);
    v26 = *(_QWORD *)(a3 + 48);
    sub_22F261B1C(a1, (unsigned int *)a2, (uint64_t)v25, a4);
    return;
  }
LABEL_18:
  v12 = *((_QWORD *)v9 + 3);
  if ((*(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v12 + 32))(v12) + 80) & 0xE000) == 0x4000
    || (*(_QWORD *)(v12 + 40) & 7) == 6
    && (*(_DWORD *)(*(_QWORD *)(v12 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) <= 3)
  {
    v13 = *(_QWORD *)(a1 + 144);
    if (sub_22E462B18(v12))
      v14 = v12 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(v12) + 96) & 0x80) == 0);
    else
      v14 = v12;
    v15 = sub_22E6336F0(v13, v14, 0, 0, 0, 0, 0);
    if (sub_22E462B18(v12))
      v16 = v12 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(v12) + 96) & 0x80) == 0);
    else
      v16 = v12;
    v22[0] = v15;
    v22[1] = 0;
    v22[2] = v16;
    v22[3] = 0;
    v23 = 0;
    v24 = 0;
    v17 = sub_22EF5B848(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), *(_QWORD *)(v12 + 48), 0);
    v18 = *(_OWORD *)(a3 + 16);
    v20[0] = *(_OWORD *)a3;
    v20[1] = v18;
    v20[2] = *(_OWORD *)(a3 + 32);
    v21 = *(_QWORD *)(a3 + 48);
    sub_22E4ED3C4(a1, v17, (uint64_t)v22, (unsigned int *)a2, (uint64_t)v20, 0, a4);
  }
  else
  {
    sub_22E4FAABC();
  }
}

void sub_22E4FAABC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unsigned __int8 **v44;
  unsigned __int8 **v45;
  unint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  char v53;
  void *v54;
  char v55;
  unint64_t v56;
  _QWORD **v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  _DWORD *v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unsigned int v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  _BOOL4 v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  _BOOL4 v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _BOOL8 v103;
  unsigned int v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  uint64_t v115;
  BOOL v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  void **v139;
  uint64_t v140;
  __int128 v141;
  uint64_t v142;
  unsigned int v143;
  unint64_t v144;
  uint64_t v145;
  int v146;
  unsigned __int8 *v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  _OWORD v152[3];
  _OWORD v153[3];
  _OWORD v154[3];
  __int128 v155;
  _BYTE v156[44];
  __int128 v157;
  int v158;
  uint64_t v159;
  _OWORD v160[3];
  _OWORD v161[8];
  uint64_t v162;
  _OWORD v163[8];
  uint64_t v164;
  _OWORD v165[8];
  uint64_t v166;
  _OWORD v167[3];
  __int128 v168;
  __int128 v169;
  __int128 v170;
  _BYTE v171[40];
  int v172;
  _BYTE v173[64];
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  uint64_t v178;
  __int128 v179[2];
  uint64_t v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  uint64_t v184;
  void *v185[2];
  _BYTE v186[1216];
  void *v187;
  uint64_t v188;
  _BYTE v189[192];
  void *v190;
  uint64_t v191;
  _BYTE v192[16];
  void *v193;
  uint64_t v194;
  _QWORD v195[5];
  _BYTE v196[64];
  _BYTE v197[32];
  __int128 v198;
  __int128 v199;
  uint64_t v200;
  void *v201;
  uint64_t v202;
  _BYTE v203[192];
  void *v204;
  uint64_t v205;
  _BYTE v206[16];
  void *v207;
  uint64_t v208;
  _BYTE v209[32];
  uint64_t v210;
  uint64_t v211;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v146 = v3;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v14 = v0;
  v16 = v15;
  v211 = *MEMORY[0x24BDAC8D0];
  v17 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v10 + 32))(v10);
  v18 = (*(_BYTE *)(v17 + 82) & 0xC) != 0 || sub_22EFD7260(v17) != 0;
  v138 = v7 ^ 1;
  v143 = v18 & (v7 ^ 1);
  if (v143 != 1
    || !sub_22EFD6C34(v11, (unsigned __int8 *)v2, (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 144) + 152) + 8) & 0x2000000000) != 0))
  {
LABEL_6:
    v144 = 0;
LABEL_7:
    v147 = (unsigned __int8 *)v2;
    goto LABEL_8;
  }
  v22 = sub_22F3C0E40((unsigned __int8 *)v2);
  v23 = sub_22EFD683C(v11, v22, 0);
  v144 = v23;
  v24 = *(_WORD *)(v23 + 80) & 0x7F;
  v25 = -40;
  if (v24 <= 0x46)
  {
    if (v24 <= 0x18)
    {
      if (v24 == 16)
      {
LABEL_21:
        v25 = -48;
        goto LABEL_241;
      }
      if (((1 << v24) & 0x1066) != 0)
        goto LABEL_241;
      if (v24 == 24)
        goto LABEL_21;
    }
    if (v24 == 70)
    {
LABEL_225:
      v25 = -64;
      goto LABEL_241;
    }
    goto LABEL_223;
  }
  if (v24 == 83)
    goto LABEL_241;
  if (v24 == 71)
  {
    v25 = -56;
    goto LABEL_241;
  }
  if (v24 != 81)
  {
LABEL_223:
    if (v24 - 52 >= 6)
    {
      if (v24 - 33 >= 5)
        goto LABEL_21;
      goto LABEL_225;
    }
    v25 = -72;
  }
LABEL_241:
  v112 = *(_QWORD *)(v23 + 72 + v25 + 16);
  v113 = (_QWORD *)(v112 & 0xFFFFFFFFFFFFFFF8);
  if ((v112 & 4) != 0)
    v113 = (_QWORD *)*v113;
  if (v113)
    v114 = v113 - 8;
  else
    v114 = 0;
  v147 = sub_22EFFF320((unsigned __int8 *)v2);
  v115 = *(_QWORD *)(*(_QWORD *)(v144 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v115)
    v116 = *(unsigned __int8 *)(v115 + 16) - 27 > 0xFFFFFFFD;
  else
    v116 = 0;
  if (!v116)
    v115 = sub_22F10CF48(v115);
  v117 = *(_QWORD *)(v115 + 24) & 7 | *(_QWORD *)((*(_QWORD *)(v115 + 24) & 0xFFFFFFFFFFFFFFF0) + 8);
  v118 = *(_QWORD *)(*(_QWORD *)(v11 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (!v118 || *(unsigned __int8 *)(v118 + 16) - 27 <= 0xFFFFFFFD)
    v118 = sub_22F10CF48(v118);
  if (v117 != (*(_QWORD *)(v118 + 24) & 7 | *(_QWORD *)((*(_QWORD *)(v118 + 24) & 0xFFFFFFFFFFFFFFF0) + 8)))
    goto LABEL_6;
  if ((_QWORD *)sub_22E4FC000(*((_QWORD *)v147 + 1)) != v114)
  {
    v119 = sub_22E4FC000(*(_QWORD *)(v2 + 8));
    v120 = v144;
    if ((_QWORD *)v119 != v114)
      v120 = 0;
    v144 = v120;
    goto LABEL_7;
  }
LABEL_8:
  v19 = *(_QWORD *)(v11 + 80);
  v145 = v16;
  v140 = v9;
  v131 = v5;
  if ((v19 & 0x800000) != 0)
    goto LABEL_35;
  if ((v19 & 0x2000000) == 0)
  {
LABEL_41:
    v31 = 0;
    v32 = 0;
    goto LABEL_61;
  }
  v20 = v19 & 0x7F;
  v21 = -40;
  if (v20 <= 70)
  {
    if (v20 <= 0x18)
    {
      if (v20 == 16)
      {
LABEL_13:
        v21 = -48;
        goto LABEL_29;
      }
      if (((1 << v20) & 0x1066) != 0)
        goto LABEL_29;
      if (v20 == 24)
        goto LABEL_13;
    }
    if (v20 == 70)
    {
LABEL_27:
      v21 = -64;
      goto LABEL_29;
    }
    goto LABEL_25;
  }
  if (v20 == 83)
    goto LABEL_29;
  if (v20 == 71)
  {
    v21 = -56;
    goto LABEL_29;
  }
  if (v20 != 81)
  {
LABEL_25:
    if ((v20 - 52) >= 6)
    {
      if ((v20 - 33) >= 5)
        goto LABEL_13;
      goto LABEL_27;
    }
    v21 = -72;
  }
LABEL_29:
  v26 = *(_QWORD *)(v11 + 72 + v21 + 16);
  v27 = (_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF8);
  if ((v26 & 4) != 0)
    v27 = (_QWORD *)*v27;
  if (v27)
    v28 = v27 - 8;
  else
    v28 = 0;
  if ((v28[9] & 0xE000) != 0x4000)
    goto LABEL_41;
LABEL_35:
  if ((sub_22EFD3B9C(v11) & 1) != 0 || sub_22EFD3F30(v11))
  {
    v29 = *(_WORD *)(v11 + 80) & 0x7F;
    v30 = -40;
    if (v29 > 0x46)
    {
      switch(v29)
      {
        case 'S':
          goto LABEL_54;
        case 'G':
          v30 = -56;
          goto LABEL_54;
        case 'Q':
          goto LABEL_54;
      }
    }
    else
    {
      if (v29 <= 0x18)
      {
        if (v29 == 16)
          goto LABEL_40;
        if (((1 << v29) & 0x1066) != 0)
          goto LABEL_54;
        if (v29 == 24)
        {
LABEL_40:
          v30 = -48;
LABEL_54:
          v33 = *(_QWORD *)(v11 + 72 + v30 + 16);
          v34 = (_QWORD *)(v33 & 0xFFFFFFFFFFFFFFF8);
          if ((v33 & 4) != 0)
            v34 = (_QWORD *)*v34;
          if (v34)
            v35 = (unint64_t)(v34 - 8);
          else
            v35 = 0;
          v32 = sub_22EFC3DB8(v35, 0) ^ 1;
          goto LABEL_60;
        }
      }
      if (v29 == 70)
      {
LABEL_52:
        v30 = -64;
        goto LABEL_54;
      }
    }
    if (v29 - 52 < 6)
    {
      v30 = -72;
      goto LABEL_54;
    }
    if (v29 - 33 < 5)
      goto LABEL_52;
    goto LABEL_40;
  }
  v32 = 0;
LABEL_60:
  v31 = 1;
LABEL_61:
  v185[0] = v186;
  v185[1] = (void *)0x800000000;
  v187 = v189;
  v188 = 0x100000000;
  v190 = v192;
  v191 = 0x100000000;
  v193 = v195;
  v194 = 0x200000000;
  v195[4] = 0;
  v36 = 0uLL;
  v141 = xmmword_22F4579A0;
  if (*(unsigned __int8 *)v13 != 141)
  {
    v39 = 0;
    v41 = 0;
    v139 = 0;
    v40 = 0;
LABEL_68:
    v135 = 0u;
    v136 = 0;
    v133 = 0u;
    v134 = 0u;
    v132 = 0u;
    goto LABEL_78;
  }
  v37 = *(_QWORD *)v13;
  v38 = HIDWORD(*(_QWORD *)v13) & 0x3FLL;
  if ((v38 - 18) >= 8)
  {
    v39 = 0;
    v40 = 0;
    if (v38 > 0x1D || ((1 << v38) & 0x30008000) == 0)
    {
      v41 = 0;
      v139 = 0;
      goto LABEL_68;
    }
  }
  if (v32)
  {
    sub_22E4D8D7C(v196);
    v36 = 0uLL;
    v139 = 0;
    v39 = *(_QWORD *)&v196[24];
    v40 = *(_QWORD *)&v196[32];
    v134 = *(_OWORD *)&v196[40];
    v135 = *(_OWORD *)&v196[8];
    v129 = *(_QWORD *)&v196[56];
    v130 = *(_QWORD *)v196;
    v41 = *(_QWORD *)v197;
    v141 = *(_OWORD *)&v197[8];
    v136 = *(_QWORD *)&v197[24];
    v132 = v199;
    v133 = v198;
    v128 = v200;
  }
  else
  {
    v42 = *(_QWORD *)(*(_QWORD *)(v11 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (!v42 || *(_BYTE *)(v42 + 16) != 26)
    {
      v42 = sub_22F10CF48(v42);
      LODWORD(v37) = *(_DWORD *)v13;
    }
    v43 = v42 & 0xFFFFFFFFFFFFFFFBLL;
    v44 = (unsigned __int8 **)(v13 + ((unint64_t)v37 >> 24));
    v45 = &v44[(v37 >> 18) & 1];
    v46 = (unint64_t *)&v45[*(unsigned int *)(v13 + 16) + 1];
    v47 = (uint64_t)(v45 + 2);
    v48 = sub_22EFFA604(*v44);
    if (v48)
    {
      if ((*(_DWORD *)(v48 + 28) & 0x7Eu) - 52 >= 6)
        v49 = 0;
      else
        v49 = v48;
    }
    else
    {
      v49 = 0;
    }
    v139 = v185;
    sub_22E477B1C(v14, (uint64_t)v185, v43, v47, v46, v49, 0, 2);
    v39 = 0;
    v41 = 0;
    v40 = 0;
    v135 = 0u;
    v136 = 0;
    v133 = 0u;
    v134 = 0u;
    v132 = 0u;
    v36 = 0uLL;
  }
LABEL_78:
  v137 = v40;
  memset(&v173[8], 0, 28);
  *(_QWORD *)&v173[48] = 0;
  *(_QWORD *)&v173[40] = 0;
  v174 = 0uLL;
  *(_QWORD *)((char *)&v175 + 4) = 2;
  v176 = v36;
  v177 = v36;
  if (v146)
  {
    v172 = 2;
    *(_DWORD *)v171 = 0;
    memset(&v171[8], 0, 32);
    sub_22E4DFD40(&v181, v14);
    v168 = v181;
    v169 = v182;
    v170 = v183;
    v50 = sub_22F10ACF8(*(_QWORD *)(*((_QWORD *)v147 + 1) & 0xFFFFFFFFFFFFFFF0));
    v179[0] = *(_OWORD *)v171;
    v179[1] = *(_OWORD *)&v171[16];
    v180 = 0;
    v155 = v168;
    *(_OWORD *)v156 = v169;
    *(_OWORD *)&v156[16] = v170;
    v51 = *(_QWORD *)(*(_QWORD *)(v14 + 144) + 144);
    memset(&v196[8], 0, 28);
    *(_QWORD *)&v196[48] = 0;
    *(_QWORD *)&v196[40] = 0;
    *(_OWORD *)v197 = 0uLL;
    *(_QWORD *)&v197[20] = 2;
    *(_DWORD *)v196 = 0;
    v199 = 0u;
    v198 = 0u;
    sub_22E3C113C((uint64_t)v196, &v155, v50, 2, v179, v51);
    v176 = v198;
    v177 = v199;
    v178 = v200;
    *(_OWORD *)&v173[32] = *(_OWORD *)&v196[32];
    *(_OWORD *)&v173[48] = *(_OWORD *)&v196[48];
    v175 = *(_OWORD *)&v197[16];
    v174 = *(_OWORD *)v197;
    *(_OWORD *)&v173[16] = *(_OWORD *)&v196[16];
    *(_OWORD *)v173 = *(_OWORD *)v196;
  }
  else
  {
    sub_22E4D8D7C(v173);
  }
  if ((*(_DWORD *)(v11 + 28) & 0x7F) != 0x37)
  {
    if (v31)
    {
      if ((*(_DWORD *)(v11 + 28) & 0x7F) == 0x39)
      {
        v55 = *(_BYTE *)(v145 + 48);
        *(_QWORD *)v145 = 0;
        *(_QWORD *)(v145 + 8) = 0;
        *(_BYTE *)(v145 + 48) = v55 & 0xF8;
        goto LABEL_210;
      }
      if (v32)
      {
        if (*(unsigned __int8 *)v13 == 141)
        {
          *(_OWORD *)&v196[8] = v135;
          *(_QWORD *)v196 = v130;
          *(_QWORD *)&v196[24] = v39;
          *(_QWORD *)&v196[32] = v137;
          *(_OWORD *)&v196[40] = v134;
          *(_QWORD *)&v196[56] = v129;
          *(_QWORD *)v197 = v41;
          *(_OWORD *)&v197[8] = v141;
          *(_QWORD *)&v197[24] = v136;
          v198 = v133;
          v199 = v132;
          v200 = v128;
        }
        else
        {
          sub_22E4D8D7C(v196);
        }
        v165[6] = v176;
        v165[7] = v177;
        v166 = v178;
        v165[2] = *(_OWORD *)&v173[32];
        v165[3] = *(_OWORD *)&v173[48];
        v165[4] = v174;
        v165[5] = v175;
        v165[0] = *(_OWORD *)v173;
        v165[1] = *(_OWORD *)&v173[16];
        v163[6] = v198;
        v163[7] = v199;
        v164 = v200;
        v163[2] = *(_OWORD *)&v196[32];
        v163[3] = *(_OWORD *)&v196[48];
        v163[4] = *(_OWORD *)v197;
        v163[5] = *(_OWORD *)&v197[16];
        v163[0] = *(_OWORD *)v196;
        v163[1] = *(_OWORD *)&v196[16];
        sub_22E4FC06C((_QWORD *)v14, (uint64_t)v165, (uint64_t)v163, *(_QWORD *)(v13 + 8));
        v181 = *(_OWORD *)&v173[8];
        v182 = *(_OWORD *)&v173[24];
        v183 = *(_OWORD *)&v173[40];
        sub_22E5E0440(v14, (uint64_t)&v181, v174, &v155);
        v67 = *(_BYTE *)(v145 + 48);
        *(_QWORD *)v145 = v155;
        *(_QWORD *)(v145 + 8) = 0;
        *(_BYTE *)(v145 + 48) = v67 & 0xF8;
        goto LABEL_210;
      }
    }
    if (v144)
      v56 = v144;
    else
      v56 = v11;
    v57 = (_QWORD **)(*(_QWORD *)(v14 + 144) + 280);
    if (v56 && (*(_DWORD *)(v56 + 28) & 0x7F) == 0x39)
      v58 = sub_22E46C584(v57, v56 & 0xFFFFFFFFFFFFFFF8 | 1, 0);
    else
      v58 = sub_22E46C3D4(v57, (_QWORD *)v56);
    v59 = v58;
    v142 = sub_22E46F2EC(*(_QWORD *)(v14 + 144) + 280, v58);
    v60 = *(_QWORD *)(*(_QWORD *)(v14 + 144) + 144);
    sub_22EFF605C(v13);
    v62 = v61;
    if (*(unsigned __int8 *)v13 != 140)
      goto LABEL_108;
    v63 = (_DWORD *)sub_22F060ED0(v13);
    if (sub_22E4E0824(v63))
    {
      v64 = 33587200;
      goto LABEL_109;
    }
    if (*(unsigned __int8 *)v63 == 161)
      v64 = 0x2000000;
    else
LABEL_108:
      v64 = 0;
LABEL_109:
    v162 = v178;
    v161[6] = v176;
    v161[7] = v177;
    v161[2] = *(_OWORD *)&v173[32];
    v161[3] = *(_OWORD *)&v173[48];
    v161[4] = v174;
    v161[5] = v175;
    v161[0] = *(_OWORD *)v173;
    v161[1] = *(_OWORD *)&v173[16];
    v65 = *(_WORD *)(v56 + 80) & 0x7F;
    v66 = -40;
    if (v65 > 0x46)
    {
      switch(v65)
      {
        case 'S':
          goto LABEL_127;
        case 'G':
          v66 = -56;
          goto LABEL_127;
        case 'Q':
LABEL_127:
          v68 = *(_QWORD *)(v56 + 72 + v66 + 16);
          v69 = (_QWORD *)(v68 & 0xFFFFFFFFFFFFFFF8);
          if ((v68 & 4) != 0)
            v69 = (_QWORD *)*v69;
          if (v69)
            v70 = (uint64_t)(v69 - 8);
          else
            v70 = 0;
          v71 = sub_22EF6477C(v60, v70);
          sub_22E4E23C0(v14, 4u, v62, (uint64_t)v161, v71, v64, 0, 0);
          v72 = v144;
          if (v144)
            v73 = 0;
          else
            v73 = v143;
          if (v56 && (*(_DWORD *)(v56 + 28) & 0x7F) == 0x39)
          {
            if ((_DWORD)v73)
            {
              v74 = *(_QWORD *)(*(_QWORD *)(v14 + 144) + 224);
              v160[0] = *(_OWORD *)&v173[8];
              v160[1] = *(_OWORD *)&v173[24];
              v160[2] = *(_OWORD *)&v173[40];
              (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)v74 + 536))(v74, v14, v56, 1, v160, v13 | 4);
              v75 = v145;
            }
            else
            {
              v82 = v56 & 0xFFFFFFFFFFFFFFF8 | 1;
              *(_QWORD *)v196 = 0;
              if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 144) + 152) + 8) & 0x2000000000) != 0
                && ((v83 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v56 + 32))(v56),
                     (*(_BYTE *)(v83 + 82) & 0xC) != 0)
                  ? (v84 = 0)
                  : (v84 = sub_22EFD7260(v83) == 0),
                    ((v84 | v138) & 1) == 0))
              {
                sub_22E46A6A8(v14, v56, v131, (uint64_t *)v196);
              }
              else
              {
                v108 = *(_QWORD *)(v14 + 144);
                v109 = v56 & 0xFFFFFFFFFFFFFFF8 | 1;
                if (v144)
                {
                  *(_QWORD *)v196 = sub_22E6336F0(v108, v109, 0, v142, 0, 0, 0);
                }
                else
                {
                  sub_22E46A4BC(v108, v109, 0, v59, v142, 0, 0);
                  *(_QWORD *)v196 = v110;
                }
                *(_QWORD *)&v196[8] = 0;
                *(_OWORD *)&v196[16] = v82;
                *(_DWORD *)&v196[32] = 0;
                *(_QWORD *)&v196[40] = 0;
              }
              v75 = v145;
              v111 = *((_QWORD *)v147 + 1);
              if (v146)
                v111 = sub_22F10ACF8(*(_QWORD *)(v111 & 0xFFFFFFFFFFFFFFF0));
              v181 = *(_OWORD *)&v173[8];
              v182 = *(_OWORD *)&v173[24];
              v183 = *(_OWORD *)&v173[40];
              sub_22E5E0440(v14, (uint64_t)&v181, v174, &v155);
              sub_22F261904(v14, v82, 0, (uint64_t)v196, v155, v111, 0, 0, &v155, (unsigned __int8 *)v13);
            }
            v76 = *(_BYTE *)(v75 + 48);
            *(_QWORD *)v75 = 0;
            *(_QWORD *)(v75 + 8) = 0;
            *(_BYTE *)(v75 + 48) = v76 & 0xF8;
            goto LABEL_210;
          }
          *(_QWORD *)&v155 = 0;
          if ((_DWORD)v73)
          {
            v78 = (uint64_t)v139;
            v77 = v140;
            if (sub_22E462B18(v11))
              v79 = v11 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(v11) + 96) & 0x80) == 0);
            else
              v79 = v11;
            *(_OWORD *)&v196[4] = *(_OWORD *)&v173[8];
            *(_OWORD *)&v196[20] = *(_OWORD *)&v173[24];
            *(_OWORD *)&v196[36] = *(_OWORD *)&v173[40];
            *(_OWORD *)&v156[12] = *(_OWORD *)v196;
            *(_QWORD *)&v155 = 3;
            *((_QWORD *)&v155 + 1) = v13;
            *(_QWORD *)v156 = v79;
            *(_OWORD *)&v156[28] = *(_OWORD *)&v196[16];
            v157 = *(_OWORD *)&v196[32];
            *(_DWORD *)&v156[8] = 0;
            v158 = *(_DWORD *)&v173[52];
            v159 = v142;
            goto LABEL_195;
          }
          v78 = (uint64_t)v139;
          v77 = v140;
          if ((*(_BYTE *)(v14 + 1870) & 2) == 0)
          {
LABEL_174:
            if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 144) + 152) + 8) & 0x2000000000) != 0
              && ((v88 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v11 + 32))(v11),
                   (*(_BYTE *)(v88 + 82) & 0xC) == 0)
                ? (v89 = sub_22EFD7260(v88) == 0)
                : (v89 = 0),
                  ((v89 | v138) & 1) == 0))
            {
              sub_22E46A6A8(v14, v11, v131, (uint64_t *)&v155);
            }
            else
            {
              v90 = *(_QWORD *)(v14 + 144);
              if (v72)
              {
                if (sub_22E462B18(v72))
                  v91 = v72 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(v72) + 96) & 0x80) == 0);
                else
                  v91 = v72;
                v93 = sub_22E6336F0(v90, v91, 0, v142, 0, 0, 0);
                if (sub_22E462B18(v72))
                  v72 = v72 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(v72) + 96) & 0x80) == 0);
                v155 = (unint64_t)v93;
                *(_QWORD *)v156 = v72;
              }
              else
              {
                if (sub_22E462B18(v11))
                  v92 = v11 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(v11) + 96) & 0x80) == 0);
                else
                  v92 = v11;
                v94 = sub_22E6336F0(v90, v92, 0, v142, 0, 0, 0);
                if (sub_22E462B18(v11))
                  v95 = v11 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(v11) + 96) & 0x80) == 0);
                else
                  v95 = v11;
                v155 = (unint64_t)v94;
                *(_QWORD *)v156 = v95;
              }
              *(_QWORD *)&v156[8] = 0;
              *(_DWORD *)&v156[16] = 0;
              *(_QWORD *)&v156[24] = 0;
            }
LABEL_195:
            v96 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v11 + 32))(v11);
            if ((*(_BYTE *)(v96 + 82) & 0xC) != 0 || sub_22EFD7260(v96))
            {
              v97 = *(_QWORD *)(*(_QWORD *)(v14 + 144) + 224);
              if (sub_22E462B18(v56))
                v98 = v56 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(v56) + 96) & 0x80) == 0);
              else
                v98 = v56;
              v153[0] = *(_OWORD *)&v173[8];
              v153[1] = *(_OWORD *)&v173[24];
              v153[2] = *(_OWORD *)&v173[40];
              (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t, unint64_t, _QWORD, _OWORD *, uint64_t))(*(_QWORD *)v97 + 424))(v152, v97, v14, v98, 0, v153, v73);
              *(_OWORD *)&v173[8] = v152[0];
              *(_OWORD *)&v173[24] = v152[1];
              *(_OWORD *)&v173[40] = v152[2];
            }
            v148 = *(_OWORD *)v77;
            v149 = *(_OWORD *)(v77 + 16);
            v150 = *(_OWORD *)(v77 + 32);
            v151 = *(_QWORD *)(v77 + 48);
            v181 = *(_OWORD *)&v173[8];
            v182 = *(_OWORD *)&v173[24];
            v183 = *(_OWORD *)&v173[40];
            sub_22E5E0440(v14, (uint64_t)&v181, v174, v196);
            v99 = *(_QWORD *)v196;
            v100 = *(_QWORD *)(*(_QWORD *)(v56 + 48) & 0xFFFFFFFFFFFFFFF0);
            if (!v100 || *(_BYTE *)(v100 + 16) != 26)
              v100 = sub_22F10CF48(v100);
            *(_QWORD *)v196 = &v196[16];
            *(_QWORD *)&v196[8] = 0x800000000;
            v201 = v203;
            v202 = 0x100000000;
            v204 = v206;
            v205 = 0x100000000;
            v207 = v209;
            v208 = 0x200000000;
            v210 = 0;
            v101 = sub_22E4FA41C(v14, v56, v99, 0, 0, (unsigned __int8 *)v13, (uint64_t)v196, v78);
            v102 = sub_22E46DCFC(*(_QWORD *)(v14 + 144) + 280, v196, v100, v101, SHIDWORD(v101));
            v181 = v148;
            v182 = v149;
            v183 = v150;
            v184 = v151;
            v103 = *(_QWORD *)(v14 + 1904) == v13;
            sub_22EFF605C(v13);
            sub_22E47A004((_QWORD *)v145, v14, v102, &v155, &v181, v196, 0, v103, v104, 0);
            if (v207 != v209)
              free(v207);
            if (v204 != v206)
              free(v204);
            if (v201 != v203)
              free(v201);
            v54 = *(void **)v196;
            if (*(_BYTE **)v196 != &v196[16])
              goto LABEL_219;
            goto LABEL_210;
          }
          v80 = *(_WORD *)(v11 + 80) & 0x7F;
          v81 = -40;
          if (v80 > 0x46)
          {
            switch(v80)
            {
              case 'S':
                goto LABEL_168;
              case 'G':
                v81 = -56;
                goto LABEL_168;
              case 'Q':
LABEL_168:
                v85 = *(_QWORD *)(v11 + 72 + v81 + 16);
                v86 = (_QWORD *)(v85 & 0xFFFFFFFFFFFFFFF8);
                if ((v85 & 4) != 0)
                  v86 = (_QWORD *)*v86;
                if (v86)
                  v87 = (uint64_t)(v86 - 8);
                else
                  v87 = 0;
                if (!sub_22E463414(v87))
                  goto LABEL_174;
                v105 = *(_QWORD *)(*(_QWORD *)(v14 + 144) + 224);
                v154[0] = *(_OWORD *)&v173[8];
                v154[1] = *(_OWORD *)&v173[24];
                v154[2] = *(_OWORD *)&v173[40];
                v106 = *(_WORD *)(v56 + 80) & 0x7F;
                v107 = -40;
                if (v106 > 0x46)
                {
                  switch(v106)
                  {
                    case 'S':
                      goto LABEL_270;
                    case 'G':
                      v107 = -56;
                      goto LABEL_270;
                    case 'Q':
                      goto LABEL_270;
                  }
                }
                else
                {
                  if (v106 <= 0x18)
                  {
                    if (v106 == 16)
                      goto LABEL_229;
                    if (((1 << v106) & 0x1066) != 0)
                      goto LABEL_270;
                    if (v106 == 24)
                    {
LABEL_229:
                      v107 = -48;
LABEL_270:
                      v121 = *(_QWORD *)(v56 + 72 + v107 + 16);
                      v122 = (_QWORD *)(v121 & 0xFFFFFFFFFFFFFFF8);
                      if ((v121 & 4) != 0)
                        v122 = (_QWORD *)*v122;
                      if (v122)
                        v123 = v122 - 8;
                      else
                        v123 = 0;
                      v124 = (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, _QWORD *))(*(_QWORD *)v105 + 728))(v105, v14, v154, v123);
                      v126 = v125;
                      sub_22EFFAE7C((unsigned int *)v13);
                      sub_22F251958(v14, v126, v124, 1u, v127);
                      v72 = v144;
                      goto LABEL_174;
                    }
                  }
                  if (v106 == 70)
                  {
LABEL_268:
                    v107 = -64;
                    goto LABEL_270;
                  }
                }
                if (v106 - 52 < 6)
                {
                  v107 = -72;
                  goto LABEL_270;
                }
                if (v106 - 33 < 5)
                  goto LABEL_268;
                goto LABEL_229;
            }
          }
          else
          {
            if (v80 <= 0x18)
            {
              if (v80 == 16)
              {
LABEL_147:
                v81 = -48;
                goto LABEL_168;
              }
              if (((1 << v80) & 0x1066) != 0)
                goto LABEL_168;
              if (v80 == 24)
                goto LABEL_147;
            }
            if (v80 == 70)
            {
LABEL_166:
              v81 = -64;
              goto LABEL_168;
            }
          }
          if (v80 - 52 >= 6)
          {
            if (v80 - 33 >= 5)
              goto LABEL_147;
            goto LABEL_166;
          }
          v81 = -72;
          goto LABEL_168;
      }
    }
    else
    {
      if (v65 <= 0x18)
      {
        if (v65 == 16)
        {
LABEL_112:
          v66 = -48;
          goto LABEL_127;
        }
        if (((1 << v65) & 0x1066) != 0)
          goto LABEL_127;
        if (v65 == 24)
          goto LABEL_112;
      }
      if (v65 == 70)
      {
LABEL_125:
        v66 = -64;
        goto LABEL_127;
      }
    }
    if (v65 - 52 >= 6)
    {
      if (v65 - 33 >= 5)
        goto LABEL_112;
      goto LABEL_125;
    }
    v66 = -72;
    goto LABEL_127;
  }
  *(_QWORD *)v196 = &v196[16];
  *(_QWORD *)&v196[8] = 0x800000000;
  v201 = v203;
  v202 = 0x100000000;
  v204 = v206;
  v205 = 0x100000000;
  v207 = v209;
  v208 = 0x200000000;
  v210 = 0;
  v181 = *(_OWORD *)&v173[8];
  v182 = *(_OWORD *)&v173[24];
  v183 = *(_OWORD *)&v173[40];
  sub_22E5E0440(v14, (uint64_t)&v181, v174, &v155);
  sub_22E4FA41C(v14, v11, v155, 0, 0, (unsigned __int8 *)v13, (uint64_t)v196, 0);
  v167[0] = *(_OWORD *)&v173[8];
  v167[1] = *(_OWORD *)&v173[24];
  v167[2] = *(_OWORD *)&v173[40];
  sub_22EFF605C(v13);
  sub_22E484118(v14, v11, 0, 0, 0, v167, v196, 0, v52, 0, 0);
  v53 = *(_BYTE *)(v145 + 48);
  *(_QWORD *)v145 = 0;
  *(_QWORD *)(v145 + 8) = 0;
  *(_BYTE *)(v145 + 48) = v53 & 0xF8;
  if (v207 != v209)
    free(v207);
  if (v204 != v206)
    free(v204);
  if (v201 != v203)
    free(v201);
  v54 = *(void **)v196;
  if (*(_BYTE **)v196 != &v196[16])
LABEL_219:
    free(v54);
LABEL_210:
  if (v193 != v195)
    free(v193);
  if (v190 != v192)
    free(v190);
  if (v187 != v189)
    free(v187);
  if (v185[0] != v186)
    free(v185[0]);
}

