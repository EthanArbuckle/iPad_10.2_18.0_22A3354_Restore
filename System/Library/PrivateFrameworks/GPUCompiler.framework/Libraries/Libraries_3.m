uint64_t sub_22E5832E4(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  llvm::LLVMContext *v6;

  v4 = sub_22E3B4314((llvm::StringMapImpl *)(a1 + 528), a2, a3);
  v5 = *v4;
  v6 = *(llvm::LLVMContext **)(*v4 + 8);
  if (!v6)
  {
    v6 = (llvm::LLVMContext *)sub_22E58343C(a1);
    *(_QWORD *)(v5 + 8) = v6;
  }
  return sub_22E5835F4(*(llvm::Type **)(a1 + 16), v6);
}

uint64_t sub_22E58334C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v10;
  uint64_t v11;

  v10 = *a3;
  sub_22E670C54(a3, a3[6]);
  v11 = sub_22F29F614(v10);
  if (a5)
    llvm::GlobalObject::setSection();
  if (a7)
    sub_22E6242E0(*(uint64_t **)(a1 + 8), v11);
  return v11;
}

uint64_t sub_22E58343C(uint64_t a1)
{
  uint64_t v2;

  llvm::ConstantDataArray::getString();
  v2 = llvm::User::operator new((llvm::User *)0x58);
  llvm::GlobalVariable::GlobalVariable();
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 76) == 5)
    llvm::GlobalObject::setSection();
  *(_DWORD *)(v2 + 32) = *(_DWORD *)(v2 + 32) & 0xFFFFFF3F | 0x80;
  llvm::GlobalObject::setAlignment();
  sub_22E6242E0(*(uint64_t **)(a1 + 8), v2);
  return v2;
}

uint64_t sub_22E5835F4(llvm::Type *a1, llvm::LLVMContext *a2)
{
  llvm::LLVMContext *v3;

  llvm::Type::getInt32Ty(a1, a2);
  llvm::ConstantInt::get();
  llvm::Type::getInt32Ty(a1, v3);
  llvm::ConstantInt::get();
  return llvm::ConstantExpr::getGetElementPtr();
}

uint64_t sub_22E583694(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _BYTE v10[32];
  __int16 v11;
  _QWORD v12[3];
  int v13;
  uint64_t v14;
  uint64_t v15;

  v4 = sub_22E583714(a1, a3);
  v6 = v4 & 0xFFFFFFFFFFFFFFF8;
  if (v4 <= 7)
    v6 = 0;
  v7 = v5 & 0xFFFFFFFFFFFFFFF8;
  if (v4 <= 7)
    v7 = 0;
  v12[0] = v6;
  v12[1] = v7;
  v8 = 1 << (v5 & 7 | (8 * (v4 & 7)));
  if (v4 < 8)
    v8 = 0;
  v12[2] = v8;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v11 = 257;
  return sub_22E3C2A7C((uint64_t *)(a2 + 272), (uint64_t)v12, (uint64_t)v10);
}

unint64_t sub_22E583714(uint64_t a1, uint64_t a2)
{
  int v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t BitCast;
  uint64_t v9;
  const char *v11;
  __int16 v12;
  uint64_t v13;

  v13 = a2;
  v4 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 130);
  v5 = sub_22F27729C(a1 + 1272, &v13);
  v6 = v5[1];
  if (!v6)
  {
    v7 = v5;
    sub_22E5837EC(a1, a2);
    BitCast = llvm::ConstantExpr::getBitCast();
    v11 = "OBJC_SELECTOR_REFERENCES_";
    v12 = 259;
    v9 = sub_22E583898(a1, (uint64_t)&v11, BitCast, (uint64_t)"__OBJC,__message_refs,literal_pointers,no_dead_strip", 52);
    v7[1] = v9;
    *(_BYTE *)(v9 + 80) |= 2u;
    v6 = v7[1];
  }
  if (v4)
    return v6 & 0xFFFFFFFFFFFFFFF8;
  else
    return v6;
}

uint64_t sub_22E5837EC(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  llvm::LLVMContext *v4;
  _QWORD *v5;
  void *__p;
  char v8;
  uint64_t v9;

  v9 = a2;
  v3 = sub_22F27729C(a1 + 560, &v9);
  v4 = (llvm::LLVMContext *)v3[1];
  if (!v4)
  {
    v5 = v3;
    sub_22F1D3A38(&v9, (char *)&__p);
    v4 = (llvm::LLVMContext *)sub_22E58343C(a1);
    v5[1] = v4;
    if (v8 < 0)
    {
      operator delete(__p);
      v4 = (llvm::LLVMContext *)v5[1];
    }
  }
  return sub_22E5835F4(*(llvm::Type **)(a1 + 16), v4);
}

uint64_t sub_22E583898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  v7 = llvm::User::operator new((llvm::User *)0x58);
  llvm::GlobalVariable::GlobalVariable();
  if (a5)
    llvm::GlobalObject::setSection();
  llvm::GlobalObject::setAlignment();
  sub_22E6242E0(*(uint64_t **)(a1 + 8), v7);
  return v7;
}

_QWORD *sub_22E5839C0(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F277474(a1, v4, (_QWORD *)v4 + 2 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -1;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

unint64_t sub_22E583A80(uint64_t a1)
{
  unint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = *(_QWORD *)(a1 + 1320);
  if (result <= 0xF)
  {
    v3 = sub_22F36E1B8(a1);
    v4 = *(_QWORD *)(v3 + 48);
    if (v4)
      return v4 & 0xFFFFFFFFFFFFFFF0;
    else
      return sub_22EF6462C(a1, v3);
  }
  return result;
}

unint64_t sub_22E583AD4(uint64_t a1)
{
  unint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = *(_QWORD *)(a1 + 1328);
  if (result <= 0xF)
  {
    v3 = sub_22F36E27C(a1);
    v4 = *(_QWORD *)(v3 + 48);
    if (v4)
      return v4 & 0xFFFFFFFFFFFFFFF0;
    else
      return sub_22EF6462C(a1, v3);
  }
  return result;
}

unint64_t sub_22E583B28(uint64_t a1)
{
  uint64_t *v1;
  unsigned int v2;
  llvm::detail::DoubleAPFloat *v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v15;
  unsigned int v16;

  if (*(_DWORD *)a1 == 2)
  {
    v1 = (uint64_t *)(a1 + 16);
    v2 = *(_DWORD *)(a1 + 24);
    if (*(_BYTE *)(a1 + 28))
    {
      if (v2 < 0x41)
        goto LABEL_15;
    }
    else if (v2 <= 0x40)
    {
      v10 = *v1 << -(char)v2 >> -(char)v2;
LABEL_16:
      v11 = ((v10 << 32) - 1) ^ ((unint64_t)((v10 << 32) - 1) >> 22);
      v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
      v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
      return v13 ^ (v13 >> 31);
    }
    v1 = (uint64_t *)*v1;
LABEL_15:
    v10 = *v1;
    goto LABEL_16;
  }
  v3 = (llvm::detail::DoubleAPFloat *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 40);
  if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) == v4)
    llvm::detail::DoubleAPFloat::bitcastToAPInt(v3);
  else
    llvm::detail::IEEEFloat::bitcastToAPInt(v3);
  v5 = &v15;
  if (v16 >= 0x41)
    v5 = v15;
  v6 = ((*v5 << 32) - 1) ^ ((unint64_t)((*v5 << 32) - 1) >> 22);
  v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  v9 = v8 ^ (v8 >> 31);
  if (v16 >= 0x41 && v15)
    MEMORY[0x2348A0E84]();
  return v9;
}

uint64_t *sub_22E583C60(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  *(_QWORD *)a1 = MEMORY[0x23489D23C]((_QWORD *)v8, 72 * v8, 8);
  if (!v4)
    return sub_22F276F70(a1);
  sub_22F277B30(a1, v4, &v4[9 * v3]);
  return (uint64_t *)llvm::deallocate_buffer((llvm *)v4, (void *)(72 * v3));
}

uint64_t sub_22E583D0C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  const char *v5;
  size_t v6;
  void *v7;

  llvm::ArrayType::get(***(llvm::ArrayType ****)a2, *(llvm::Type **)(a2 + 8));
  llvm::ConstantArray::get();
  v3 = llvm::User::operator new((llvm::User *)0x58);
  llvm::GlobalVariable::GlobalVariable();
  llvm::GlobalObject::setAlignment();
  *(_DWORD *)(v3 + 32) = *(_DWORD *)(v3 + 32) & 0xFFFFFF3F | 0x80;
  v4 = *(_DWORD *)(a1 + 24);
  if (v4 == 2)
    v5 = "__DATA,__objc_arraydata,regular,no_dead_strip";
  else
    v5 = "__OBJC,__array_data,regular,no_dead_strip";
  if (v4 == 2)
    v6 = 45;
  else
    v6 = 41;
  v7 = operator new(0x30uLL);
  memcpy(v7, v5, v6);
  *((_BYTE *)v7 + v6) = 0;
  llvm::GlobalObject::setSection();
  operator delete(v7);
  return v3;
}

void sub_22E583E40(unsigned __int8 *a1, char *a2, uint64_t *a3)
{
  unint64_t v6;
  const std::nothrow_t *v7;
  unint64_t v8;
  uint64_t *v9;
  BOOL v10;
  uint64_t *v11;

  v6 = (a2 - (char *)a1) >> 3;
  if (a2 - (char *)a1 < 1025)
  {
LABEL_5:
    sub_22E583F0C(a1, a2, a3, v6, 0, 0);
  }
  else
  {
    v7 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
    v8 = (a2 - (char *)a1) >> 3;
    while (1)
    {
      v9 = (uint64_t *)operator new(8 * v8, v7);
      if (v9)
        break;
      v10 = v8 > 1;
      v8 >>= 1;
      if (!v10)
        goto LABEL_5;
    }
    v11 = v9;
    sub_22E583F0C(a1, a2, a3, v6, v9, v8);
    operator delete(v11);
  }
}

unsigned __int8 *sub_22E583F0C(unsigned __int8 *result, char *a2, uint64_t *a3, unint64_t a4, uint64_t *a5, uint64_t a6)
{
  char *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  _DWORD *v13;
  unsigned int v14;
  _DWORD *v15;
  unsigned int v16;
  size_t v17;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  _DWORD *v27;
  unsigned int v28;
  _DWORD *v29;
  unsigned int v30;
  size_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  _DWORD *v35;
  unsigned int v36;
  _DWORD *v37;
  unsigned int v38;
  size_t v39;
  int v40;
  uint64_t *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  _DWORD *v54;
  unsigned int v55;
  _DWORD *v56;
  unsigned int v57;
  size_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;

  if (a4 < 2)
    return result;
  v7 = a2;
  v8 = result;
  if (a4 == 2)
  {
    v9 = *((_QWORD *)a2 - 1);
    v10 = *(_QWORD *)result;
    v11 = *a3 + 40;
    v12 = sub_22EFFEB40(*(unsigned __int8 **)(v11 + 16 * v9));
    result = sub_22EFFEB40(*(unsigned __int8 **)(v11 + 16 * v10));
    v13 = (_DWORD *)*((_QWORD *)v12 + 2);
    v14 = ((*v13 >> 21) & 7) * v13[4];
    v15 = (_DWORD *)*((_QWORD *)result + 2);
    v16 = ((*v15 >> 21) & 7) * v15[4];
    if (v16 >= v14)
      v17 = v14;
    else
      v17 = v16;
    if ((_DWORD)v17 && (result = (unsigned __int8 *)memcmp(&v13[v13[1] + 5], &v15[v15[1] + 5], v17), (_DWORD)result))
    {
      if ((result & 0x80000000) == 0)
        return result;
    }
    else if (v14 >= v16)
    {
      return result;
    }
    *(_QWORD *)v8 = v9;
    *((_QWORD *)v7 - 1) = v10;
    return result;
  }
  if ((uint64_t)a4 > 128)
  {
    v42 = a5;
    v43 = a4 >> 1;
    v44 = (char *)&result[8 * (a4 >> 1)];
    v45 = a4 - (a4 >> 1);
    v46 = a4 >> 1;
    if ((uint64_t)a4 > a6)
    {
      sub_22E583F0C(result, v44, a3, v46, a5, a6);
      sub_22E583F0C(&v8[8 * (a4 >> 1)], a2, a3, v45, v42, a6);
      return sub_22E5847A0(v8, v44, a2, a3, v43, v45, v42, a6);
    }
    sub_22E58437C(result, (unsigned __int8 *)v44, a3, v46, a5);
    v47 = &v42[v43];
    result = sub_22E58437C(&v8[8 * (a4 >> 1)], (unsigned __int8 *)a2, a3, a4 - (a4 >> 1), v47);
    v48 = &v42[a4];
    v49 = *a3 + 40;
    v50 = v47;
    while (1)
    {
      if (v50 == v48)
      {
        if (v42 != v47)
        {
          v60 = 0;
          do
          {
            *(_QWORD *)&v8[v60 * 8] = v42[v60];
            ++v60;
          }
          while (&v42[v60] != v47);
        }
        return result;
      }
      v51 = *v50;
      v52 = *v42;
      v53 = sub_22EFFEB40(*(unsigned __int8 **)(v49 + 16 * *v50));
      result = sub_22EFFEB40(*(unsigned __int8 **)(v49 + 16 * v52));
      v54 = (_DWORD *)*((_QWORD *)v53 + 2);
      v55 = ((*v54 >> 21) & 7) * v54[4];
      v56 = (_DWORD *)*((_QWORD *)result + 2);
      v57 = ((*v56 >> 21) & 7) * v56[4];
      if (v57 >= v55)
        v58 = v55;
      else
        v58 = v57;
      if ((_DWORD)v58 && (result = (unsigned __int8 *)memcmp(&v54[v54[1] + 5], &v56[v56[1] + 5], v58), (_DWORD)result))
      {
        if ((result & 0x80000000) != 0)
          goto LABEL_54;
      }
      else if (v55 < v57)
      {
LABEL_54:
        *(_QWORD *)v8 = v51;
        ++v50;
        goto LABEL_55;
      }
      *(_QWORD *)v8 = v52;
      ++v42;
LABEL_55:
      v8 += 8;
      if (v42 == v47)
      {
        if (v50 != v48)
        {
          v59 = 0;
          do
          {
            *(_QWORD *)&v8[v59 * 8] = v50[v59];
            ++v59;
          }
          while (&v50[v59] != v48);
        }
        return result;
      }
    }
  }
  if (result == (unsigned __int8 *)a2)
    return result;
  v19 = result + 8;
  if (result + 8 == (unsigned __int8 *)a2)
    return result;
  v20 = 0;
  v21 = *a3 + 40;
  v22 = result;
  do
  {
    v23 = v22;
    v22 = v19;
    v24 = *(_QWORD *)v23;
    v62 = *((_QWORD *)v23 + 1);
    v25 = *(unsigned __int8 **)(v21 + 16 * v62);
    v26 = sub_22EFFEB40(v25);
    result = sub_22EFFEB40(*(unsigned __int8 **)(v21 + 16 * v24));
    v27 = (_DWORD *)*((_QWORD *)v26 + 2);
    v28 = ((*v27 >> 21) & 7) * v27[4];
    v29 = (_DWORD *)*((_QWORD *)result + 2);
    v30 = ((*v29 >> 21) & 7) * v29[4];
    if (v30 >= v28)
      v31 = v28;
    else
      v31 = v30;
    if ((_DWORD)v31 && (result = (unsigned __int8 *)memcmp(&v27[v27[1] + 5], &v29[v29[1] + 5], v31), (_DWORD)result))
    {
      if ((result & 0x80000000) == 0)
        goto LABEL_38;
    }
    else if (v28 >= v30)
    {
      goto LABEL_38;
    }
    v32 = v20;
    while (1)
    {
      *(_QWORD *)&v8[v32 + 8] = v24;
      if (!v32)
      {
        v33 = v8;
        goto LABEL_37;
      }
      v33 = v23;
      v24 = *(_QWORD *)&v8[v32 - 8];
      v34 = sub_22EFFEB40(v25);
      result = sub_22EFFEB40(*(unsigned __int8 **)(v21 + 16 * v24));
      v35 = (_DWORD *)*((_QWORD *)v34 + 2);
      v36 = ((*v35 >> 21) & 7) * v35[4];
      v37 = (_DWORD *)*((_QWORD *)result + 2);
      v38 = ((*v37 >> 21) & 7) * v37[4];
      v39 = v38 >= v36 ? v36 : v38;
      if (!(_DWORD)v39)
        break;
      result = (unsigned __int8 *)memcmp(&v35[v35[1] + 5], &v37[v37[1] + 5], v39);
      if (!(_DWORD)result)
        break;
      v40 = ((int)result >> 31) | 1;
LABEL_33:
      v23 = v33 - 8;
      v32 -= 8;
      if (v40 != -1)
        goto LABEL_37;
    }
    if (v36 < v38)
    {
      v40 = -1;
      goto LABEL_33;
    }
    v33 = &v8[v32];
LABEL_37:
    v7 = a2;
    *(_QWORD *)v33 = v62;
LABEL_38:
    v19 = v22 + 8;
    v20 += 8;
  }
  while (v22 + 8 != (unsigned __int8 *)v7);
  return result;
}

unsigned __int8 *sub_22E58437C(unsigned __int8 *result, unsigned __int8 *a2, uint64_t *a3, unint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  unsigned __int8 *v7;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  _DWORD *v15;
  unsigned int v16;
  _DWORD *v17;
  unsigned int v18;
  size_t v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  _DWORD *v29;
  unsigned int v30;
  _DWORD *v31;
  unsigned int v32;
  size_t v33;
  unsigned int *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  _DWORD *v39;
  unsigned int v40;
  _DWORD *v41;
  unsigned int v42;
  size_t v43;
  unsigned __int8 *v44;
  uint64_t v45;
  unsigned __int8 *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 *v49;
  _DWORD *v50;
  unsigned int v51;
  _DWORD *v52;
  unsigned int v53;
  size_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v58;

  if (!a4)
    return result;
  v5 = a5;
  v7 = result;
  if (a4 == 1)
  {
LABEL_42:
    *v5 = *(_QWORD *)v7;
    return result;
  }
  if (a4 == 2)
  {
    v11 = a2 - 8;
    v10 = *((_QWORD *)a2 - 1);
    v12 = *(_QWORD *)result;
    v13 = *a3 + 40;
    v14 = sub_22EFFEB40(*(unsigned __int8 **)(v13 + 16 * v10));
    result = sub_22EFFEB40(*(unsigned __int8 **)(v13 + 16 * v12));
    v15 = (_DWORD *)*((_QWORD *)v14 + 2);
    v16 = ((*v15 >> 21) & 7) * v15[4];
    v17 = (_DWORD *)*((_QWORD *)result + 2);
    v18 = ((*v17 >> 21) & 7) * v17[4];
    if (v18 >= v16)
      v19 = v16;
    else
      v19 = v18;
    if ((_DWORD)v19 && (result = (unsigned __int8 *)memcmp(&v15[v15[1] + 5], &v17[v17[1] + 5], v19), (_DWORD)result))
    {
      if ((result & 0x80000000) != 0)
        goto LABEL_41;
    }
    else if (v16 < v18)
    {
LABEL_41:
      *v5++ = v10;
      goto LABEL_42;
    }
    v10 = v12;
    v7 = v11;
    goto LABEL_41;
  }
  if ((uint64_t)a4 > 8)
  {
    v44 = &result[8 * (a4 >> 1)];
    sub_22E583F0C(result, v44, a3, a4 >> 1, a5, a4 >> 1);
    result = (unsigned __int8 *)sub_22E583F0C(&v7[8 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
    v45 = *a3 + 40;
    v46 = &v7[8 * (a4 >> 1)];
    while (1)
    {
      if (v46 == a2)
      {
        if (v7 != v44)
        {
          v56 = 0;
          do
          {
            v5[v56] = *(_QWORD *)&v7[v56 * 8];
            ++v56;
          }
          while (&v7[v56 * 8] != v44);
        }
        return result;
      }
      v47 = *(_QWORD *)v46;
      v48 = *(_QWORD *)v7;
      v49 = sub_22EFFEB40(*(unsigned __int8 **)(v45 + 16 * *(_QWORD *)v46));
      result = sub_22EFFEB40(*(unsigned __int8 **)(v45 + 16 * v48));
      v50 = (_DWORD *)*((_QWORD *)v49 + 2);
      v51 = ((*v50 >> 21) & 7) * v50[4];
      v52 = (_DWORD *)*((_QWORD *)result + 2);
      v53 = ((*v52 >> 21) & 7) * v52[4];
      if (v53 >= v51)
        v54 = v51;
      else
        v54 = v53;
      if ((_DWORD)v54 && (result = (unsigned __int8 *)memcmp(&v50[v50[1] + 5], &v52[v52[1] + 5], v54), (_DWORD)result))
      {
        if ((result & 0x80000000) != 0)
          goto LABEL_54;
      }
      else if (v51 < v53)
      {
LABEL_54:
        *v5 = v47;
        v46 += 8;
        goto LABEL_55;
      }
      *v5 = v48;
      v7 += 8;
LABEL_55:
      ++v5;
      if (v7 == v44)
      {
        if (v46 != a2)
        {
          v55 = 0;
          do
          {
            v5[v55] = *(_QWORD *)&v46[v55 * 8];
            ++v55;
          }
          while (&v46[v55 * 8] != a2);
        }
        return result;
      }
    }
  }
  if (result == a2)
    return result;
  v20 = *a3;
  v21 = (unsigned int *)(result + 8);
  *a5 = *(_QWORD *)result;
  if (result + 8 == a2)
    return result;
  v22 = 0;
  v23 = v20 + 40;
  v24 = a5;
  v25 = a5;
  do
  {
    v26 = *v25;
    v58 = v25 + 1;
    v27 = *(_QWORD *)v21;
    v28 = sub_22EFFEB40(*(unsigned __int8 **)(v23 + 16 * *(_QWORD *)v21));
    result = sub_22EFFEB40(*(unsigned __int8 **)(v23 + 16 * v26));
    v29 = (_DWORD *)*((_QWORD *)v28 + 2);
    v30 = ((*v29 >> 21) & 7) * v29[4];
    v31 = (_DWORD *)*((_QWORD *)result + 2);
    v32 = ((*v31 >> 21) & 7) * v31[4];
    if (v32 >= v30)
      v33 = v30;
    else
      v33 = v32;
    if ((_DWORD)v33 && (result = (unsigned __int8 *)memcmp(&v29[v29[1] + 5], &v31[v31[1] + 5], v33), (_DWORD)result))
    {
      if ((result & 0x80000000) == 0)
        goto LABEL_21;
    }
    else if (v30 >= v32)
    {
LABEL_21:
      v34 = (unsigned int *)a2;
      v25 = v58;
      *v58 = v27;
      goto LABEL_37;
    }
    v24[1] = v26;
    v35 = v5;
    if (v24 == v5)
      goto LABEL_36;
    v36 = v22;
    while (1)
    {
      v37 = *(_QWORD *)((char *)v5 + v36 - 8);
      v38 = sub_22EFFEB40(*(unsigned __int8 **)(v23 + 16 * *v21));
      result = sub_22EFFEB40(*(unsigned __int8 **)(v23 + 16 * v37));
      v39 = (_DWORD *)*((_QWORD *)v38 + 2);
      v40 = ((*v39 >> 21) & 7) * v39[4];
      v41 = (_DWORD *)*((_QWORD *)result + 2);
      v42 = ((*v41 >> 21) & 7) * v41[4];
      if (v42 >= v40)
        v43 = v40;
      else
        v43 = v42;
      if ((_DWORD)v43)
      {
        result = (unsigned __int8 *)memcmp(&v39[v39[1] + 5], &v41[v41[1] + 5], v43);
        if ((_DWORD)result)
        {
          if ((result & 0x80000000) == 0)
          {
            v35 = (_QWORD *)((char *)v5 + v36);
            goto LABEL_36;
          }
          goto LABEL_33;
        }
      }
      if (v40 >= v42)
        break;
LABEL_33:
      --v24;
      *(_QWORD *)((char *)v5 + v36) = v37;
      v36 -= 8;
      if (!v36)
      {
        v35 = v5;
        goto LABEL_36;
      }
    }
    v35 = v24;
LABEL_36:
    *v35 = *(_QWORD *)v21;
    v34 = (unsigned int *)a2;
    v25 = v58;
LABEL_37:
    v21 += 2;
    v22 += 8;
    v24 = v25;
  }
  while (v21 != v34);
  return result;
}

unsigned __int8 *sub_22E5847A0(unsigned __int8 *result, char *a2, char *a3, _QWORD *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t a8)
{
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unsigned int v15;
  _DWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  unsigned int v19;
  size_t v20;
  uint64_t v21;
  unsigned int *v22;
  unint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  _DWORD *v27;
  unsigned int v28;
  size_t v29;
  int v30;
  int v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _DWORD *v37;
  unsigned int v38;
  unsigned int *v39;
  _DWORD *v40;
  unsigned int v41;
  size_t v42;
  int v43;
  int v44;
  unsigned int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  int64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int *v62;
  unsigned int *v63;
  BOOL v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int *v68;
  uint64_t v69;
  _QWORD *v70;
  unsigned int *v71;
  _QWORD *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int8 *v76;
  _DWORD *v77;
  unsigned int v78;
  _DWORD *v79;
  unsigned int v80;
  size_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 *v88;
  _DWORD *v89;
  unsigned int v90;
  _DWORD *v91;
  unsigned int v92;
  size_t v93;
  unint64_t v94;
  uint64_t v95;
  _QWORD *__src;
  char *v97;
  _DWORD *v100;
  uint64_t v101;
  unsigned int *__s2;
  _DWORD *__s2a;
  uint64_t v104;
  uint64_t v105;

  v104 = a6;
  if (!a6)
    return result;
  v11 = (char *)result;
  do
  {
    if (a5 <= a8 || v104 <= a8)
    {
      if (a5 > v104)
      {
        if (a2 == a3)
          return result;
        v69 = 0;
        do
        {
          a7[v69] = *(_QWORD *)&a2[v69 * 8];
          ++v69;
        }
        while (&a2[v69 * 8] != a3);
        if (!(v69 * 8))
          return result;
        v70 = &a7[v69];
        v105 = *a4 + 40;
        v71 = (unsigned int *)(a3 - 8);
        while (1)
        {
          if (a2 == v11)
          {
            if (v70 != a7)
            {
              v94 = 0;
              do
              {
                *(_QWORD *)&v71[v94 / 4] = v70[v94 / 8 - 1];
                v94 -= 8;
              }
              while (&v70[v94 / 8] != a7);
            }
            return result;
          }
          v72 = a7;
          v73 = a2 - 8;
          v74 = *((_QWORD *)a2 - 1);
          v75 = *(v70 - 1);
          v76 = sub_22EFFEB40(*(unsigned __int8 **)(v105 + 16 * v75));
          result = sub_22EFFEB40(*(unsigned __int8 **)(v105 + 16 * v74));
          v77 = (_DWORD *)*((_QWORD *)v76 + 2);
          v78 = ((*v77 >> 21) & 7) * v77[4];
          v79 = (_DWORD *)*((_QWORD *)result + 2);
          v80 = ((*v79 >> 21) & 7) * v79[4];
          v81 = v80 >= v78 ? v78 : v80;
          if ((_DWORD)v81)
          {
            result = (unsigned __int8 *)memcmp(&v77[v77[1] + 5], &v79[v79[1] + 5], v81);
            if ((_DWORD)result)
              break;
          }
          if (v78 >= v80)
            goto LABEL_108;
LABEL_109:
          *(_QWORD *)v71 = v74;
          v71 -= 2;
          a2 = v73;
          a7 = v72;
          if (v70 == v72)
            return result;
        }
        if ((result & 0x80000000) != 0)
          goto LABEL_109;
LABEL_108:
        v74 = v75;
        v73 = a2;
        --v70;
        goto LABEL_109;
      }
      if (v11 == a2)
        return result;
      v82 = 0;
      do
      {
        a7[v82 / 8] = *(_QWORD *)&v11[v82];
        v82 += 8;
      }
      while (&v11[v82] != a2);
      if (!v82)
        return result;
      v83 = *a4 + 40;
      v84 = a7;
      while (1)
      {
        if (a2 == a3)
          return (unsigned __int8 *)memmove(v11, v84, (char *)a7 - (char *)v84 + v82);
        v85 = a3;
        v86 = *(_QWORD *)a2;
        v87 = *v84;
        v88 = sub_22EFFEB40(*(unsigned __int8 **)(v83 + 16 * *(_QWORD *)a2));
        result = sub_22EFFEB40(*(unsigned __int8 **)(v83 + 16 * v87));
        v89 = (_DWORD *)*((_QWORD *)v88 + 2);
        v90 = ((*v89 >> 21) & 7) * v89[4];
        v91 = (_DWORD *)*((_QWORD *)result + 2);
        v92 = ((*v91 >> 21) & 7) * v91[4];
        if (v92 >= v90)
          v93 = v90;
        else
          v93 = v92;
        if ((_DWORD)v93
          && (result = (unsigned __int8 *)memcmp(&v89[v89[1] + 5], &v91[v91[1] + 5], v93), (_DWORD)result))
        {
          if ((result & 0x80000000) != 0)
            goto LABEL_125;
        }
        else if (v90 < v92)
        {
LABEL_125:
          *(_QWORD *)v11 = v86;
          a2 += 8;
          goto LABEL_126;
        }
        *(_QWORD *)v11 = v87;
        ++v84;
LABEL_126:
        a3 = v85;
        v11 += 8;
        if (&a7[v82 / 8] == v84)
          return result;
      }
    }
    if (!a5)
      return result;
    v12 = *(_QWORD *)a2;
    v13 = *a4 + 40;
    v14 = (_DWORD *)*((_QWORD *)sub_22EFFEB40(*(unsigned __int8 **)(v13 + 16 * *(_QWORD *)a2)) + 2);
    v15 = ((*v14 >> 21) & 7) * v14[4];
    v16 = &v14[v14[1] + 5];
    while (1)
    {
      v17 = *(_QWORD *)v11;
      result = sub_22EFFEB40(*(unsigned __int8 **)(v13 + 16 * *(_QWORD *)v11));
      v18 = (_DWORD *)*((_QWORD *)result + 2);
      v19 = ((*v18 >> 21) & 7) * v18[4];
      v20 = v19 >= v15 ? v15 : v19;
      if (!(_DWORD)v20)
        break;
      result = (unsigned __int8 *)memcmp(v16, &v18[v18[1] + 5], v20);
      if (!(_DWORD)result)
        break;
      if ((result & 0x80000000) != 0)
        goto LABEL_17;
LABEL_15:
      v11 += 8;
      if (!--a5)
        return result;
    }
    if (v15 >= v19)
      goto LABEL_15;
LABEL_17:
    v21 = v104;
    __src = a7;
    v97 = a3;
    if (a5 < v104)
    {
      if (v104 < 0)
        v21 = v104 + 1;
      v95 = v21 >> 1;
      a3 = &a2[8 * (v21 >> 1)];
      v22 = (unsigned int *)a2;
      if (v11 != a2)
      {
        v23 = (a2 - v11) >> 3;
        v24 = (unsigned int *)*((_QWORD *)sub_22EFFEB40(*(unsigned __int8 **)(v13 + 16 * *(unsigned int *)a3)) + 2);
        v25 = ((*v24 >> 21) & 7) * v24[4];
        v100 = v24 + 5;
        __s2 = v24;
        v22 = (unsigned int *)v11;
        do
        {
          v26 = &v22[2 * (v23 >> 1)];
          v27 = (_DWORD *)*((_QWORD *)sub_22EFFEB40(*(unsigned __int8 **)(v13 + 16 * *v26)) + 2);
          v28 = ((*v27 >> 21) & 7) * v27[4];
          if (v28 >= v25)
            v29 = v25;
          else
            v29 = v28;
          if ((_DWORD)v29 && (v30 = memcmp(&v100[__s2[1]], &v27[v27[1] + 5], v29)) != 0)
          {
            v31 = (v30 >> 31) | 1;
          }
          else
          {
            if (v25 < v28)
              v31 = -1;
            else
              v31 = 1;
            if (v25 == v28)
              v31 = 0;
          }
          if (v31 == -1)
          {
            v23 >>= 1;
          }
          else
          {
            v22 = v26 + 2;
            v23 += ~(v23 >> 1);
          }
        }
        while (v23);
      }
      v32 = ((char *)v22 - v11) >> 3;
      v33 = (unsigned int *)a2;
      v34 = v95;
      goto LABEL_62;
    }
    if (a5 == 1)
    {
      *(_QWORD *)v11 = v12;
      *(_QWORD *)a2 = v17;
      return result;
    }
    if (a5 >= 0)
      v35 = a5;
    else
      v35 = a5 + 1;
    v101 = v35 >> 1;
    v22 = (unsigned int *)&v11[8 * (v35 >> 1)];
    if (a3 != a2)
    {
      v36 = (a3 - a2) >> 3;
      v37 = (_DWORD *)*((_QWORD *)sub_22EFFEB40(*(unsigned __int8 **)(v13 + 16 * *v22)) + 2);
      v38 = ((*v37 >> 21) & 7) * v37[4];
      __s2a = &v37[v37[1] + 5];
      a3 = a2;
      do
      {
        v39 = (unsigned int *)&a3[8 * (v36 >> 1)];
        v40 = (_DWORD *)*((_QWORD *)sub_22EFFEB40(*(unsigned __int8 **)(v13 + 16 * *v39)) + 2);
        v41 = ((*v40 >> 21) & 7) * v40[4];
        if (v38 >= v41)
          v42 = v41;
        else
          v42 = v38;
        if ((_DWORD)v42 && (v43 = memcmp(&v40[v40[1] + 5], __s2a, v42)) != 0)
        {
          v44 = (v43 >> 31) | 1;
        }
        else
        {
          if (v41 < v38)
            v44 = -1;
          else
            v44 = 1;
          if (v41 == v38)
            v44 = 0;
        }
        if (v44 == -1)
          v36 += ~(v36 >> 1);
        else
          v36 >>= 1;
        if (v44 == -1)
          a3 = (char *)(v39 + 2);
      }
      while (v36);
    }
    v33 = (unsigned int *)a2;
    v34 = (a3 - a2) >> 3;
    v32 = v101;
LABEL_62:
    v45 = (unsigned int *)a3;
    if (v22 != v33)
    {
      v45 = v22;
      if (v33 != (unsigned int *)a3)
      {
        if (v22 + 2 == v33)
        {
          v52 = *(_QWORD *)v22;
          v53 = a3 - (char *)v33;
          memmove(v22, v33, a3 - (char *)v33);
          v45 = (unsigned int *)((char *)v22 + v53);
          *(_QWORD *)v45 = v52;
        }
        else if (v33 + 2 == (unsigned int *)a3)
        {
          v54 = *((_QWORD *)a3 - 1);
          v45 = v22 + 2;
          if (a3 - 8 != (char *)v22)
            memmove(v22 + 2, v22, a3 - 8 - (char *)v22);
          *(_QWORD *)v22 = v54;
        }
        else
        {
          v46 = ((char *)v33 - (char *)v22) >> 3;
          if (v46 == (a3 - (char *)v33) >> 3)
          {
            v47 = 0;
            do
            {
              v48 = *(_QWORD *)&v22[v47];
              *(_QWORD *)&v22[v47] = *(_QWORD *)&v33[v47];
              v49 = (uint64_t)&v22[v47 + 2];
              *(_QWORD *)&v33[v47] = v48;
              v50 = (uint64_t)&v33[v47 + 2];
              v47 += 2;
            }
            while ((unsigned int *)v49 != v33 && v50 != (_QWORD)a3);
            v45 = v33;
          }
          else
          {
            v55 = (a3 - (char *)v33) >> 3;
            v56 = ((char *)v33 - (char *)v22) >> 3;
            do
            {
              v57 = v56;
              v56 = v55;
              v55 = v57 % v55;
            }
            while (v55);
            if (v56)
            {
              v58 = &v22[2 * v56];
              do
              {
                v60 = *((_QWORD *)v58 - 1);
                v58 -= 2;
                v59 = v60;
                v61 = &v58[2 * v46];
                v62 = v58;
                do
                {
                  v63 = v62;
                  v62 = v61;
                  *(_QWORD *)v63 = *(_QWORD *)v61;
                  v64 = __OFSUB__(v46, (a3 - (char *)v61) >> 3);
                  v66 = v46 - ((a3 - (char *)v61) >> 3);
                  v65 = (v66 < 0) ^ v64;
                  v61 = &v22[2 * v66];
                  if (v65)
                    v61 = &v62[2 * v46];
                }
                while (v61 != v58);
                *(_QWORD *)v62 = v59;
              }
              while (v58 != v22);
            }
            v45 = &v22[2 * ((a3 - (char *)v33) >> 3)];
          }
        }
      }
    }
    a5 -= v32;
    v67 = v104 - v34;
    if (v32 + v34 >= a5 + v104 - v34)
    {
      result = (unsigned __int8 *)sub_22E5847A0(v45, a3, v97, a4, a5, v67, __src, a8);
      a3 = (char *)v22;
      a7 = __src;
      v67 = v34;
      a5 = v32;
      v97 = (char *)v45;
    }
    else
    {
      v68 = v22;
      a7 = __src;
      result = (unsigned __int8 *)sub_22E5847A0(v11, v68, v45, a4, v32, v34, __src, a8);
      v11 = (char *)v45;
    }
    v104 = v67;
    a2 = a3;
    a3 = v97;
  }
  while (v67);
  return result;
}

void sub_22E584F38(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _BYTE v15[24];

  sub_22F2782A4((uint64_t)v15, (uint64_t)a1, a2);
  if (v15[16])
  {
    v5 = (_QWORD *)a1[4];
    v4 = a1[5];
    if ((unint64_t)v5 >= v4)
    {
      v7 = (_QWORD *)a1[3];
      v8 = v5 - v7;
      v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 61)
        abort();
      v10 = v4 - (_QWORD)v7;
      if (v10 >> 2 > v9)
        v9 = v10 >> 2;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
        v11 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v11 = v9;
      if (v11)
      {
        if (v11 >> 61)
          sub_22E3B3F8C();
        v12 = (char *)operator new(8 * v11);
      }
      else
      {
        v12 = 0;
      }
      v13 = &v12[8 * v8];
      *(_QWORD *)v13 = *a2;
      v6 = v13 + 8;
      if (v5 != v7)
      {
        do
        {
          v14 = *--v5;
          *((_QWORD *)v13 - 1) = v14;
          v13 -= 8;
        }
        while (v5 != v7);
        v5 = (_QWORD *)a1[3];
      }
      a1[3] = v13;
      a1[4] = v6;
      a1[5] = &v12[8 * v11];
      if (v5)
        operator delete(v5);
    }
    else
    {
      *v5 = *a2;
      v6 = v5 + 1;
    }
    a1[4] = v6;
  }
}

uint64_t sub_22E585048(uint64_t a1, uint64_t *a2, int a3, uint64_t *a4, uint64_t a5)
{
  int v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  void **v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t BitCast;
  void *v39;
  uint64_t v40;
  uint64_t *v41;
  const char *v42;
  const char *v43;
  uint64_t v44;
  const char *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  __int16 v50;
  const char *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  __int16 v55;
  void **v56;
  uint64_t *v57;
  uint64_t v58;
  _QWORD v59[2];
  uint64_t v60;
  uint64_t v61;
  void **v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD v65[2];
  uint64_t v66;
  uint64_t v67;
  void **v68;
  uint64_t *v69;
  uint64_t v70;
  _BYTE v71[11];
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  _BYTE v77[128];
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  switch(a3)
  {
    case 0:
      v8 = 0;
      v9 = "OBJC_CATEGORY_INSTANCE_METHODS_";
      goto LABEL_11;
    case 1:
      v8 = 0;
      v9 = "OBJC_CATEGORY_CLASS_METHODS_";
      goto LABEL_13;
    case 2:
      v8 = 0;
      v9 = "OBJC_INSTANCE_METHODS_";
      v12 = 22;
      v11 = 40;
      v10 = "__OBJC,__inst_meth,regular,no_dead_strip";
      if (a5)
        goto LABEL_16;
      goto LABEL_26;
    case 3:
      v8 = 0;
      v9 = "OBJC_CLASS_METHODS_";
      v12 = 19;
      v11 = 39;
      v10 = "__OBJC,__cls_meth,regular,no_dead_strip";
      if (a5)
        goto LABEL_16;
      goto LABEL_26;
    case 4:
      v8 = 1;
      v9 = "OBJC_PROTOCOL_INSTANCE_METHODS_";
LABEL_11:
      v12 = 31;
      goto LABEL_15;
    case 5:
      v8 = 1;
      v9 = "OBJC_PROTOCOL_CLASS_METHODS_";
LABEL_13:
      v12 = 28;
      goto LABEL_25;
    case 6:
      v8 = 1;
      v9 = "OBJC_PROTOCOL_INSTANCE_METHODS_OPT_";
      v12 = 35;
LABEL_15:
      v11 = 44;
      v10 = "__OBJC,__cat_inst_meth,regular,no_dead_strip";
      if (a5)
        goto LABEL_16;
      goto LABEL_26;
    case 7:
      v8 = 1;
      v9 = "OBJC_PROTOCOL_CLASS_METHODS_OPT_";
      v12 = 32;
LABEL_25:
      v11 = 43;
      v10 = "__OBJC,__cat_cls_meth,regular,no_dead_strip";
      if (!a5)
        goto LABEL_26;
      goto LABEL_16;
    default:
      v10 = 0;
      v11 = 0;
      v9 = 0;
      v12 = 0;
      v8 = 0;
      if (a5)
      {
LABEL_16:
        v42 = v9;
        v43 = v10;
        v44 = v11;
        if (v8)
        {
          v74 = *(_QWORD *)(a1 + 8);
          v75 = v77;
          v76 = 0x1000000000;
          v79 = 0;
          v80 = 0;
          v78 = 0;
          v66 = 0;
          v67 = 0;
          v62 = (void **)&v74;
          v63 = 0;
          v64 = 0;
          memset(v65, 0, 11);
          v81 = 1;
          sub_22F246F08((uint64_t *)&v62);
          v13 = *(_QWORD *)(a1 + 2720);
          v56 = v62;
          v57 = (uint64_t *)&v62;
          v58 = *((unsigned int *)v62 + 4);
          memset(v59, 0, 11);
          BYTE1(v65[1]) = 1;
          v60 = 0;
          v61 = v13;
          v14 = 8 * a5;
          do
          {
            v15 = (_QWORD *)*a4;
            v16 = *(_QWORD *)(a1 + 2720);
            v68 = v56;
            v69 = (uint64_t *)&v56;
            v70 = *((unsigned int *)v56 + 4);
            v72 = 0;
            v73 = v16;
            memset(v71, 0, sizeof(v71));
            BYTE1(v59[1]) = 1;
            if (v16)
              v71[10] = (*(_DWORD *)(v16 + 8) & 0x200) != 0;
            sub_22E5837EC(a1, v15[5]);
            sub_22F275848((uint64_t *)&v68);
            v17 = sub_22E586218(a1, v15, 0);
            v18 = v68;
            v19 = *((unsigned int *)v68 + 4);
            if (v19 >= *((unsigned int *)v68 + 5))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v19 = *((unsigned int *)v18 + 4);
            }
            *((_QWORD *)v18[1] + v19) = v17;
            ++*((_DWORD *)v18 + 4);
            sub_22F2759F0((uint64_t *)&v68, (uint64_t *)&v56);
            ++a4;
            v14 -= 8;
          }
          while (v14);
          sub_22F2758B8((uint64_t)&v56, (uint64_t *)&v62);
          v30 = *((unsigned __int8 *)a2 + 32);
          if (v30 == 1)
          {
            v31 = (uint64_t)v43;
            v51 = v42;
            v52 = v12;
            v55 = 261;
            v32 = v44;
          }
          else
          {
            v31 = (uint64_t)v43;
            v32 = v44;
            if (*((_BYTE *)a2 + 32))
            {
              v36 = a2[1];
              if (*((_BYTE *)a2 + 33) == 1)
              {
                v37 = (uint64_t *)*a2;
              }
              else
              {
                LOBYTE(v30) = 2;
                v37 = a2;
              }
              v51 = v42;
              v52 = v12;
              v53 = v37;
              v54 = v36;
              LOBYTE(v55) = 5;
              HIBYTE(v55) = v30;
            }
            else
            {
              v55 = 256;
            }
          }
          sub_22E58334C(a1, (uint64_t)&v51, (uint64_t *)&v62, v31, v32, *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 130), 1);
          BitCast = llvm::ConstantExpr::getBitCast();
          v68 = (void **)&v78;
          sub_22E3CEB30(&v68);
          v39 = v75;
          if (v75 == v77)
            return BitCast;
        }
        else
        {
          v74 = *(_QWORD *)(a1 + 8);
          v75 = v77;
          v76 = 0x1000000000;
          v79 = 0;
          v80 = 0;
          v78 = 0;
          v66 = 0;
          v67 = 0;
          v62 = (void **)&v74;
          v63 = 0;
          v64 = 0;
          memset(v65, 0, 11);
          v81 = 1;
          sub_22F247080((uint64_t *)&v62, *(llvm::ConstantPointerNull **)(a1 + 2528));
          sub_22F246F08((uint64_t *)&v62);
          v23 = *(_QWORD *)(a1 + 2640);
          v56 = v62;
          v57 = (uint64_t *)&v62;
          v58 = *((unsigned int *)v62 + 4);
          memset(v59, 0, 11);
          BYTE1(v65[1]) = 1;
          v60 = 0;
          v61 = v23;
          v24 = 8 * a5;
          do
          {
            v25 = (_QWORD *)*a4;
            if (!sub_22EFDBD9C(*a4))
            {
              v68 = 0;
              sub_22F24C318(*(_QWORD *)(a1 + 1152), *(_DWORD *)(a1 + 1168), (uint64_t)v25, &v68);
              v26 = *(_QWORD *)(a1 + 2640);
              v68 = v56;
              v69 = (uint64_t *)&v56;
              v70 = *((unsigned int *)v56 + 4);
              v72 = 0;
              v73 = v26;
              memset(v71, 0, sizeof(v71));
              BYTE1(v59[1]) = 1;
              if (v26)
                v71[10] = (*(_DWORD *)(v26 + 8) & 0x200) != 0;
              sub_22E5837EC(a1, v25[5]);
              sub_22F275848((uint64_t *)&v68);
              v27 = sub_22E586218(a1, v25, 0);
              v28 = v68;
              v29 = *((unsigned int *)v68 + 4);
              if (v29 >= *((unsigned int *)v68 + 5))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v29 = *((unsigned int *)v28 + 4);
              }
              *((_QWORD *)v28[1] + v29) = v27;
              ++*((_DWORD *)v28 + 4);
              sub_22F275848((uint64_t *)&v68);
              sub_22F2759F0((uint64_t *)&v68, (uint64_t *)&v56);
            }
            ++a4;
            v24 -= 8;
          }
          while (v24);
          sub_22F2758B8((uint64_t)&v56, (uint64_t *)&v62);
          v33 = *((unsigned __int8 *)a2 + 32);
          if (v33 == 1)
          {
            v34 = (uint64_t)v43;
            v46 = v42;
            v47 = v12;
            v50 = 261;
            v35 = v44;
          }
          else
          {
            v34 = (uint64_t)v43;
            v35 = v44;
            if (*((_BYTE *)a2 + 32))
            {
              v40 = a2[1];
              if (*((_BYTE *)a2 + 33) == 1)
              {
                v41 = (uint64_t *)*a2;
              }
              else
              {
                LOBYTE(v33) = 2;
                v41 = a2;
              }
              v46 = v42;
              v47 = v12;
              v48 = v41;
              v49 = v40;
              LOBYTE(v50) = 5;
              HIBYTE(v50) = v33;
            }
            else
            {
              v50 = 256;
            }
          }
          sub_22E58334C(a1, (uint64_t)&v46, (uint64_t *)&v62, v34, v35, *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 130), 1);
          BitCast = llvm::ConstantExpr::getBitCast();
          v68 = (void **)&v78;
          sub_22E3CEB30(&v68);
          v39 = v75;
          if (v75 == v77)
            return BitCast;
        }
        free(v39);
        return BitCast;
      }
LABEL_26:
      v20 = v8 == 0;
      v21 = 2832;
      if (!v20)
        v21 = 2736;
      return llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + v21), (llvm::Type *)a2);
  }
}

uint64_t sub_22E5856C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::Type *v6;
  uint64_t NullValue;
  uint64_t v9;
  llvm::ConstantPointerNull *v10;
  void **v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  const char *v18;
  uint64_t v19;
  __int128 v20;
  _OWORD v21[2];
  uint64_t v22;
  uint64_t v23[3];
  _QWORD v24[4];
  void **v25[7];
  void *__p;
  uint64_t *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  _BYTE v31[128];
  _QWORD v32[3];
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  sub_22E55C27C(a3, a4, (char **)&__p);
  if (__p == v27)
  {
    NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 2752), v6);
  }
  else
  {
    v28 = *(_QWORD *)(a1 + 8);
    v29 = v31;
    v30 = 0x1000000000;
    memset(v32, 0, sizeof(v32));
    v25[5] = 0;
    v25[6] = 0;
    v25[0] = (void **)&v28;
    memset(&v25[1], 0, 27);
    v33 = 1;
    sub_22F247080((uint64_t *)v25, *(llvm::ConstantPointerNull **)(a1 + 2752));
    v9 = sub_22F278330((uint64_t *)v25);
    v10 = *(llvm::ConstantPointerNull **)(a1 + 2696);
    v11 = v25[0];
    v23[0] = (uint64_t)v25[0];
    v23[1] = (uint64_t)v25;
    v23[2] = *((unsigned int *)v25[0] + 4);
    v24[0] = 0;
    *(_DWORD *)((char *)v24 + 7) = 0;
    BYTE1(v25[4]) = 1;
    v24[2] = 0;
    v24[3] = v10;
    v12 = (uint64_t *)__p;
    v13 = v27;
    if (__p != v27)
    {
      do
      {
        v14 = sub_22E5862E0((_QWORD *)a1, *v12);
        v15 = *((unsigned int *)v11 + 4);
        if (v15 >= *((unsigned int *)v11 + 5))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v15 = *((unsigned int *)v11 + 4);
        }
        *((_QWORD *)v11[1] + v15) = v14;
        ++*((_DWORD *)v11 + 4);
        ++v12;
      }
      while (v12 != v13);
      v10 = *(llvm::ConstantPointerNull **)(a1 + 2696);
    }
    sub_22F247080(v23, v10);
    sub_22F2758B8((uint64_t)v23, (uint64_t *)v25);
    *((_QWORD *)v25[0][1] + v9) = llvm::ConstantInt::get();
    v16 = *(_QWORD *)(a1 + 8);
    v17 = *(_DWORD *)(*(_QWORD *)(v16 + 216) + 76);
    if (v17 == 5)
      v18 = "__OBJC,__cat_cls_meth,regular,no_dead_strip";
    else
      v18 = 0;
    if (v17 == 5)
      v19 = 43;
    else
      v19 = 0;
    v20 = *(_OWORD *)(a2 + 16);
    v21[0] = *(_OWORD *)a2;
    v21[1] = v20;
    v22 = *(_QWORD *)(a2 + 32);
    sub_22E58334C(a1, (uint64_t)v21, (uint64_t *)v25, (uint64_t)v18, v19, *(unsigned __int8 *)(v16 + 130), 0);
    NullValue = llvm::ConstantExpr::getBitCast();
    v25[0] = (void **)v32;
    sub_22E3CEB30(v25);
    if (v29 != v31)
      free(v29);
  }
  if (__p)
  {
    v27 = (uint64_t *)__p;
    operator delete(__p);
  }
  return NullValue;
}

uint64_t sub_22E58591C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  int v13;
  llvm::Type *v14;
  void *v16;
  uint64_t BitCast;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  llvm::Type *v22;
  unint64_t v23;
  llvm::Type *v24;
  uint64_t v25;
  const void *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  uint64_t i;
  unint64_t v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  const void *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  llvm::DataLayout *DataLayout;
  llvm::Type *v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  BOOL v69;
  unint64_t ABITypeAlignment;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void **v84;
  size_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  _OWORD v95[2];
  uint64_t v96;
  uint64_t v97[7];
  uint64_t v98[7];
  void **v99[7];
  uint64_t v100;
  _BYTE *v101;
  uint64_t v102;
  int v103;
  _BYTE v104[128];
  void *__p[2];
  char v106;
  uint64_t OSVersion;
  void *v108;
  uint64_t v109;
  _BYTE v110[128];
  _QWORD v111[3];
  char v112;
  uint64_t *v113;
  uint64_t v114;
  _QWORD v115[18];

  v115[16] = *MEMORY[0x24BDAC8D0];
  if ((_DWORD)a6)
  {
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 216);
    v13 = *(_DWORD *)(v12 + 68);
    if ((v13 & 0xFFFFFFF7) == 3)
    {
      if ((llvm::Triple::isMacOSXVersionLT((llvm::Triple *)(v12 + 32)) & 1) != 0)
        return llvm::Constant::getNullValue(*(llvm::Constant **)(a5 + 144), v14);
      v13 = *(_DWORD *)(v12 + 68);
    }
    if (v13 == 28 || v13 == 7)
    {
      OSVersion = llvm::Triple::getOSVersion((llvm::Triple *)(v12 + 32));
      v108 = v16;
      v100 = 9;
      v101 = 0;
      if (sub_22E3B38EC(&OSVersion, &v100))
        return llvm::Constant::getNullValue(*(llvm::Constant **)(a5 + 144), v14);
    }
  }
  v91 = a2;
  v92 = a3;
  v93 = a5;
  v113 = v115;
  v114 = 0x1000000000;
  v100 = (uint64_t)v104;
  v101 = v104;
  v102 = 16;
  v103 = 0;
  v94 = a4;
  if (!a4)
    goto LABEL_16;
  if ((*(_DWORD *)(a4 + 28) & 0x7F) != 0x16)
    goto LABEL_16;
  v19 = sub_22E496488(a4);
  if (v19 == v20)
    goto LABEL_16;
  v42 = v19;
  v43 = v20;
  do
  {
    v44 = sub_22F256388(v42);
    if (v44 == v45)
      goto LABEL_71;
    v47 = v44;
    v48 = v45;
    do
    {
      v49 = *(_DWORD *)(v47 + 72);
      if ((_DWORD)a6 != (unsigned __int16)(v49 & 0x4000) >> 14)
        goto LABEL_114;
      if ((v49 & 0x18000) != 0x8000)
        goto LABEL_108;
      v50 = v47;
      if ((*(_DWORD *)(v47 + 28) & 0x7F) == 0x53)
        goto LABEL_107;
      for (i = *(_QWORD *)(v47 + 16); ; i = *(_QWORD *)(v52 + v54 + 16))
      {
        v52 = i & 0xFFFFFFFFFFFFFFF8;
        if ((i & 4) != 0)
          v52 = *(_QWORD *)v52;
        v53 = *(_WORD *)(v52 + 8) & 0x7F;
        if (v53 == 83)
          break;
        v54 = -40;
        if ((*(_WORD *)(v52 + 8) & 0x7Fu) > 0x46)
        {
          if (v53 == 71)
          {
            v54 = -56;
            continue;
          }
          if (v53 != 81)
            goto LABEL_97;
        }
        else
        {
          if (v53 > 0x18)
            goto LABEL_96;
          if (v53 == 16)
            goto LABEL_90;
          if (((1 << v53) & 0x1066) == 0)
          {
            if (v53 == 24)
            {
LABEL_90:
              v54 = -48;
              continue;
            }
LABEL_96:
            if (v53 == 70)
            {
              v54 = -64;
              continue;
            }
LABEL_97:
            v55 = v53 - 52;
            if (v53 - 33 >= 5)
              v56 = -48;
            else
              v56 = -64;
            if (v55 >= 6)
              v54 = v56;
            else
              v54 = -72;
            continue;
          }
        }
      }
      v50 = v52 - 40;
LABEL_107:
      if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v50 + 88) + 2000) + 148) & 0x80) != 0)
      {
LABEL_108:
        v57 = *(_QWORD *)(v47 + 40);
        if ((v57 & 7) != 0)
          v58 = 0;
        else
          v58 = (const void *)(v57 & 0xFFFFFFFFFFFFFFF8);
        sub_22E3BA850((uint64_t)&v100, v58);
        v59 = v114;
        if (v114 >= (unint64_t)HIDWORD(v114))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v59 = v114;
        }
        v113[v59] = v47;
        LODWORD(v114) = v114 + 1;
      }
      do
LABEL_114:
        v47 = *(_QWORD *)(v47 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v47 && (*(_DWORD *)(v47 + 28) & 0x7F) != 0x19);
    }
    while (v47 != v48);
    do
    {
LABEL_71:
      v42 = *(_QWORD *)(v42 + 128);
      if (!v42)
        break;
    }
    while ((*(_BYTE *)(v42 + 28) & 0x80) != 0 || *(_QWORD *)(v42 + 40) >= 8uLL && (*(_QWORD *)(v42 + 40) & 7) == 0);
  }
  while (v42 != v43);
LABEL_16:
  v21 = sub_22F256388(v94);
  if ((llvm::Type *)v21 == v22)
    goto LABEL_56;
  v23 = v21;
  v24 = v22;
  while (2)
  {
    if ((_DWORD)a6 != (*(_BYTE *)(v23 + 73) & 0x40) >> 6)
      goto LABEL_53;
    v25 = *(_QWORD *)(v23 + 40);
    v26 = (v25 & 7) != 0 ? 0 : (const void *)(v25 & 0xFFFFFFFFFFFFFFF8);
    sub_22E3BA850((uint64_t)&v100, v26);
    if (!(_BYTE)v22)
      goto LABEL_53;
    if ((*(_DWORD *)(v23 + 72) & 0x18000) != 0x8000)
      goto LABEL_50;
    v27 = v23;
    if ((*(_DWORD *)(v23 + 28) & 0x7F) == 0x53)
      goto LABEL_49;
    v28 = *(_QWORD *)(v23 + 16);
    while (2)
    {
      v29 = v28 & 0xFFFFFFFFFFFFFFF8;
      if ((v28 & 4) != 0)
        v29 = *(_QWORD *)v29;
      v30 = *(_WORD *)(v29 + 8) & 0x7F;
      if (v30 != 83)
      {
        v31 = -40;
        if ((*(_WORD *)(v29 + 8) & 0x7Fu) > 0x46)
        {
          if (v30 == 71)
          {
            v31 = -56;
          }
          else if (v30 != 81)
          {
            goto LABEL_39;
          }
        }
        else
        {
          if (v30 > 0x18)
            goto LABEL_38;
          if (v30 == 16)
            goto LABEL_32;
          if (((1 << v30) & 0x1066) == 0)
          {
            if (v30 == 24)
            {
LABEL_32:
              v31 = -48;
            }
            else
            {
LABEL_38:
              if (v30 == 70)
              {
                v31 = -64;
              }
              else
              {
LABEL_39:
                v32 = v30 - 52;
                if (v30 - 33 >= 5)
                  v33 = -48;
                else
                  v33 = -64;
                if (v32 >= 6)
                  v31 = v33;
                else
                  v31 = -72;
              }
            }
          }
        }
        v28 = *(_QWORD *)(v29 + v31 + 16);
        continue;
      }
      break;
    }
    v27 = v29 - 40;
LABEL_49:
    if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 88) + 2000) + 148) & 0x80) != 0)
    {
LABEL_50:
      v34 = v114;
      if (v114 >= (unint64_t)HIDWORD(v114))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v34 = v114;
      }
      v113[v34] = v23;
      LODWORD(v114) = v114 + 1;
    }
    do
LABEL_53:
      v23 = *(_QWORD *)(v23 + 8) & 0xFFFFFFFFFFFFFFF8;
    while (v23 && (*(_DWORD *)(v23 + 28) & 0x7F) != 0x19);
    if ((llvm::Type *)v23 != v24)
      continue;
    break;
  }
LABEL_56:
  v35 = *(_DWORD *)(v94 + 28) & 0x7F;
  if (v94 && v35 == 22)
  {
    v60 = (uint64_t *)sub_22F276134(v94);
    v61 = sub_22F2761B0(v94);
    v36 = a5;
    if (v60 != (uint64_t *)v61)
    {
      v62 = (uint64_t *)v61;
      do
      {
        v63 = *v60++;
        sub_22E586350((uint64_t)&v100, (uint64_t)&v113, v63, a6);
      }
      while (v60 != v62);
    }
  }
  else
  {
    v36 = a5;
    if (v94)
    {
      if (v35 == 19)
      {
        v37 = *(_QWORD *)(v94 + 120) & 0xFFFFFFFFFFFFFFF8;
        v38 = *(unsigned int *)(v37 + 24);
        if ((_DWORD)v38)
        {
          v39 = *(uint64_t **)(v37 + 16);
          v40 = 8 * v38;
          do
          {
            v41 = *v39++;
            sub_22E586350((uint64_t)&v100, (uint64_t)&v113, v41, a6);
            v40 -= 8;
          }
          while (v40);
        }
      }
    }
  }
  if ((_DWORD)v114)
  {
    DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a1 + 8) + 200));
    v65 = *(llvm::Type **)(v36 + 128);
    sub_22E3C304C((uint64_t)DataLayout, (uint64_t)v65);
    v67 = (unint64_t)(v66 + 7) >> 3;
    v69 = v68 == 1;
    ABITypeAlignment = llvm::DataLayout::getABITypeAlignment(DataLayout, v65);
    OSVersion = (ABITypeAlignment + v67 - 1) / ABITypeAlignment * ABITypeAlignment;
    v108 = (void *)v69;
    llvm::TypeSize::operator unsigned long long();
    OSVersion = *(_QWORD *)(a1 + 8);
    v108 = v110;
    v109 = 0x1000000000;
    memset(v111, 0, sizeof(v111));
    v99[5] = 0;
    v99[6] = 0;
    v99[0] = (void **)&OSVersion;
    memset(&v99[1], 0, 27);
    v112 = 1;
    sub_22F246F08((uint64_t *)v99);
    sub_22F246F08((uint64_t *)v99);
    v71 = *(_QWORD *)(v36 + 128);
    v98[0] = (uint64_t)v99[0];
    v98[1] = (uint64_t)v99;
    v98[2] = *((unsigned int *)v99[0] + 4);
    memset(&v98[3], 0, 11);
    BYTE1(v99[4]) = 1;
    v98[5] = 0;
    v98[6] = v71;
    if ((_DWORD)v114)
    {
      v75 = v113;
      v76 = 8 * v114;
      do
      {
        v77 = *v75;
        v78 = *(_QWORD *)(v36 + 128);
        v97[0] = v98[0];
        v97[1] = (uint64_t)v98;
        v97[2] = *(unsigned int *)(v98[0] + 16);
        v97[5] = 0;
        v97[6] = v78;
        memset(&v97[3], 0, 11);
        BYTE1(v98[4]) = 1;
        if (v78)
          BYTE2(v97[4]) = (*(_DWORD *)(v78 + 8) & 0x200) != 0;
        v79 = *(_QWORD *)(v77 + 40);
        if ((v79 & 7) != 0)
          v80 = 0;
        else
          v80 = v79 & 0xFFFFFFFFFFFFFFF8;
        v81 = sub_22E586474(a1, v80);
        v82 = v97[0];
        v83 = *(unsigned int *)(v97[0] + 16);
        if (v83 >= *(unsigned int *)(v97[0] + 20))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v83 = *(unsigned int *)(v82 + 16);
        }
        *(_QWORD *)(*(_QWORD *)(v82 + 8) + 8 * v83) = v81;
        ++*(_DWORD *)(v82 + 16);
        sub_22EF6C7E4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v77, v92, (uint64_t)__p);
        if (v106 >= 0)
          v84 = __p;
        else
          v84 = (void **)__p[0];
        if (v106 >= 0)
          v85 = v106 & 0x7F;
        else
          v85 = (size_t)__p[1];
        v86 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 15192), v84, v85);
        v87 = sub_22E586474(a1, v86);
        if (v106 < 0)
          operator delete(__p[0]);
        v88 = v97[0];
        v89 = *(unsigned int *)(v97[0] + 16);
        v36 = v93;
        if (v89 >= *(unsigned int *)(v97[0] + 20))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v89 = *(unsigned int *)(v88 + 16);
        }
        *(_QWORD *)(*(_QWORD *)(v88 + 8) + 8 * v89) = v87;
        ++*(_DWORD *)(v88 + 16);
        sub_22F2759F0(v97, v98);
        ++v75;
        v76 -= 8;
      }
      while (v76);
    }
    sub_22F2758B8((uint64_t)v98, (uint64_t *)v99);
    v72 = *(_QWORD *)(a1 + 8);
    if (*(_DWORD *)(*(_QWORD *)(v72 + 216) + 76) == 5)
    {
      if (*(_DWORD *)(a1 + 24) == 2)
        v73 = 20;
      else
        v73 = 39;
      if (*(_DWORD *)(a1 + 24) == 2)
        v74 = "__DATA, __objc_const";
      else
        v74 = "__OBJC,__property,regular,no_dead_strip";
    }
    else
    {
      v73 = 0;
      v74 = 0;
    }
    v90 = *(_OWORD *)(v91 + 16);
    v95[0] = *(_OWORD *)v91;
    v95[1] = v90;
    v96 = *(_QWORD *)(v91 + 32);
    sub_22E58334C(a1, (uint64_t)v95, (uint64_t *)v99, (uint64_t)v74, v73, *(unsigned __int8 *)(v72 + 130), 1);
    BitCast = llvm::ConstantExpr::getBitCast();
    v99[0] = (void **)v111;
    sub_22E3CEB30(v99);
    if (v108 != v110)
      free(v108);
  }
  else
  {
    BitCast = llvm::Constant::getNullValue(*(llvm::Constant **)(v36 + 144), v22);
  }
  if (v101 != (_BYTE *)v100)
    free(v101);
  if (v113 != v115)
    free(v113);
  return BitCast;
}

uint64_t sub_22E586218(uint64_t a1, _QWORD *a2, int a3)
{
  std::string *p_p;
  size_t size;
  uint64_t *v6;
  uint64_t v7;
  llvm::LLVMContext *v8;
  uint64_t v9;
  std::string __p;

  sub_22EF6C204(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), a2, a3, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    size = __p.__r_.__value_.__l.__size_;
  v6 = sub_22E3B4314((llvm::StringMapImpl *)(a1 + 1120), p_p, size);
  v7 = *v6;
  v8 = *(llvm::LLVMContext **)(*v6 + 8);
  if (!v8)
  {
    v8 = (llvm::LLVMContext *)sub_22E58343C(a1);
    *(_QWORD *)(v7 + 8) = v8;
  }
  v9 = sub_22E5835F4(*(llvm::Type **)(a1 + 16), v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v9;
}

uint64_t sub_22E5862E0(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;

  v4 = a1 + 165;
  v5 = *(_QWORD *)(a2 + 40);
  if ((v5 & 7) != 0)
    v6 = 0;
  else
    v6 = v5 & 0xFFFFFFFFFFFFFFF8;
  v10 = 0;
  v11 = v6;
  v7 = sub_22F275208(v4, &v11, &v10);
  v8 = 400;
  if (v7)
    v8 = 168;
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + v8))(a1, a2);
}

uint64_t sub_22E586350(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  char v19;
  unint64_t v20;

  v8 = sub_22F256388(a3);
  if (v8 != v9)
  {
    v15 = v8;
    v16 = v9;
    do
    {
      if ((_DWORD)a4 == (*(_BYTE *)(v15 + 73) & 0x40) >> 6)
      {
        v17 = *(_QWORD *)(v15 + 40);
        v18 = (v17 & 7) != 0 ? 0 : (const void *)(v17 & 0xFFFFFFFFFFFFFFF8);
        sub_22E3BA850(a1, v18);
        if (v19)
        {
          v20 = *(unsigned int *)(a2 + 8);
          if (v20 >= *(unsigned int *)(a2 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v20 = *(unsigned int *)(a2 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a2 + 8 * v20) = v15;
          ++*(_DWORD *)(a2 + 8);
        }
      }
      do
        v15 = *(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v15 && (*(_DWORD *)(v15 + 28) & 0x7F) != 0x19);
    }
    while (v15 != v16);
  }
  result = sub_22F259248(a3);
  if ((uint64_t *)result != v11)
  {
    v12 = (uint64_t *)result;
    v13 = v11;
    do
    {
      v14 = *v12++;
      result = sub_22E586350(a1, a2, v14, a4);
    }
    while (v12 != v13);
  }
  return result;
}

uint64_t sub_22E586474(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  llvm::LLVMContext *v4;
  _QWORD *v5;
  uint64_t v7;

  v7 = a2;
  v3 = sub_22F24C2B0(a1 + 1224, &v7);
  v4 = (llvm::LLVMContext *)v3[1];
  if (!v4)
  {
    v5 = v3;
    v4 = (llvm::LLVMContext *)sub_22E58343C(a1);
    v5[1] = v4;
  }
  return sub_22E5835F4(*(llvm::Type **)(a1 + 16), v4);
}

_QWORD *sub_22E5864E8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  _QWORD *result;
  unint64_t v7;
  unint64_t v9;

  v2 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v7 = v5 + 16 * v4;
    if (v5 <= a2 && v7 > a2)
    {
      v9 = a2 - v5;
      sub_22F27893C(a1);
      v5 = *(_QWORD *)a1;
      v2 = *(_QWORD *)a1 + v9;
    }
    else
    {
      sub_22F27893C(a1);
      v5 = *(_QWORD *)a1;
    }
  }
  result = sub_22E58269C((_QWORD *)(v5 + 16 * *(unsigned int *)(a1 + 8)), v2);
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_22E586570(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;
  uint64_t result;
  _QWORD v16[2];
  _QWORD v17[2];
  uint64_t v18[33];

  v2 = a2;
  v18[32] = *MEMORY[0x24BDAC8D0];
  if (a2 >= 0x11)
  {
    v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40)
      v2 = v6 + 1;
    else
      v2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v9 = 0;
    v17[0] = -4096;
    v17[1] = 0;
    v16[0] = -8192;
    v16[1] = 0;
    v10 = v18;
    do
    {
      v11 = (uint64_t *)(a1 + v9 + 8);
      if (sub_22E583260((uint64_t)v11, (uint64_t)v17))
      {
        v12 = *v11;
      }
      else
      {
        v13 = sub_22E583260(a1 + v9 + 8, (uint64_t)v16);
        v12 = *v11;
        if ((v13 & 1) == 0)
        {
          *v10 = v12;
          v10[1] = *(_QWORD *)(a1 + v9 + 16);
          v12 = -4096;
          *v11 = -4096;
          v10 += 2;
        }
      }
      if (v12 != -8192 && v12 != -4096 && v12 != 0)
        MEMORY[0x2348A0E84]();
      v9 += 16;
    }
    while (v9 != 256);
    if (v2 > 0x10)
    {
      *(_DWORD *)a1 &= ~1u;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](16 * v2, 8);
      *(_QWORD *)(a1 + 16) = v2;
    }
    sub_22F27878C(a1, v18, v10);
    if (v16[0] != -8192 && v16[0] != -4096 && v16[0])
      MEMORY[0x2348A0E84]();
    result = v17[0];
    if (v17[0] != -8192 && v17[0] != -4096 && v17[0])
      return MEMORY[0x2348A0E84]();
  }
  else
  {
    v7 = *(uint64_t **)(a1 + 8);
    v8 = *(unsigned int *)(a1 + 16);
    if (v2 > 0x10)
    {
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](16 * v2, 8);
      *(_QWORD *)(a1 + 16) = v2;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_22F27878C(a1, v7, &v7[2 * v8]);
    return llvm::deallocate_buffer((llvm *)v7, (void *)(16 * v8));
  }
  return result;
}

uint64_t sub_22E5867C8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  llvm *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = result;
  v2 = *(unsigned int *)(result + 16);
  v3 = *(_DWORD *)(result + 8);
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == (_DWORD)v2)
  {
    *(_QWORD *)(result + 8) = 0;
    if ((_DWORD)v2)
    {
      v6 = *(llvm **)result;
      v7 = 16 * v2;
      do
      {
        *(_QWORD *)v6 = -4096;
        v6 = (llvm *)((char *)v6 + 16);
        v7 -= 16;
      }
      while (v7);
    }
  }
  else
  {
    result = llvm::deallocate_buffer(*(llvm **)result, (void *)(16 * v2));
    if (v5)
    {
      v8 = (4 * v5 / 3u + 1) | ((unint64_t)(4 * v5 / 3u + 1) >> 1);
      v9 = v8 | (v8 >> 2) | ((v8 | (v8 >> 2)) >> 4);
      LODWORD(v9) = (((v9 | (v9 >> 8)) >> 16) | v9 | (v9 >> 8)) + 1;
      *(_DWORD *)(v1 + 16) = v9;
      result = MEMORY[0x23489D23C](16 * v9, 8);
      *(_QWORD *)v1 = result;
      *(_QWORD *)(v1 + 8) = 0;
      v10 = *(unsigned int *)(v1 + 16);
      if ((_DWORD)v10)
      {
        v11 = 16 * v10;
        do
        {
          *(_QWORD *)result = -4096;
          result += 16;
          v11 -= 16;
        }
        while (v11);
      }
    }
    else
    {
      *(_QWORD *)v1 = 0;
      *(_QWORD *)(v1 + 8) = 0;
      *(_DWORD *)(v1 + 16) = 0;
    }
  }
  return result;
}

uint64_t sub_22E5868C8(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v4;

  if ((a2 & 8) == 0)
    return 0;
  result = sub_22EFDD1E0(*(_QWORD *)(a3 + 88));
  if (result)
  {
    v4 = result;
    do
    {
      result = sub_22E586C30(*(_QWORD *)(v4 + 48));
      if ((result & 1) != 0)
        break;
      v4 = *(_QWORD *)(v4 + 80);
    }
    while (v4);
  }
  return result;
}

uint64_t sub_22E586910(size_t a1, llvm::PointerType *a2, uint64_t a3, int a4, uint64_t a5)
{
  llvm::Constant *v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  llvm::Constant *v15;
  llvm::Type *v16;
  llvm::DataLayout *DataLayout;
  llvm::Type *v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  BOOL v23;
  unint64_t ABITypeAlignment;
  uint64_t v25;
  void **v26;
  unsigned int v27;
  void **v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  _QWORD v36[4];
  __int16 v37;
  void **v38[7];
  _QWORD v39[4];
  __int16 v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  _BYTE v44[128];
  _QWORD v45[3];
  char v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  if ((_DWORD)a5)
  {
    v8 = (llvm::Constant *)llvm::ConstantPointerNull::get(*(llvm::ConstantPointerNull **)(*(_QWORD *)(a1 + 8) + 96), a2);
    v9 = "_OBJC_$_CLASS_PROP_LIST_";
  }
  else
  {
    v8 = (llvm::Constant *)sub_22E586DD8(a1, a2, 0, a3, 0, a4);
    v9 = "_OBJC_$_PROP_LIST_";
  }
  v10 = *((_QWORD *)a2 + 11);
  v11 = *(_QWORD *)(v10 + 40);
  if ((v11 & 7) != 0)
    v12 = 0;
  else
    v12 = v11 & 0xFFFFFFFFFFFFFFF8;
  v13 = *(unsigned int **)(v12 + 16);
  v14 = *v13;
  v39[0] = v9;
  v39[2] = v13 + 4;
  v39[3] = v14;
  v40 = 1283;
  v15 = (llvm::Constant *)sub_22E58591C(a1, (uint64_t)v39, (uint64_t)a2, v10, a1 + 2488, a5);
  if (llvm::Constant::isNullValue(v8) && llvm::Constant::isNullValue(v15))
    return llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 2792), v16);
  DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a1 + 8) + 200));
  v19 = *(llvm::Type **)(a1 + 2784);
  sub_22E3C304C((uint64_t)DataLayout, (uint64_t)v19);
  v21 = (unint64_t)(v20 + 7) >> 3;
  v23 = v22 == 1;
  ABITypeAlignment = llvm::DataLayout::getABITypeAlignment(DataLayout, v19);
  v41 = (ABITypeAlignment + v21 - 1) / ABITypeAlignment * ABITypeAlignment;
  v42 = (void *)v23;
  llvm::TypeSize::operator unsigned long long();
  v41 = *(_QWORD *)(a1 + 8);
  v42 = v44;
  v43 = 0x1000000000;
  memset(v45, 0, sizeof(v45));
  v25 = *(_QWORD *)(a1 + 2784);
  v38[0] = (void **)&v41;
  memset(&v38[1], 0, 27);
  v46 = 1;
  v38[5] = 0;
  v38[6] = (void **)v25;
  if (v25)
    BYTE2(v38[4]) = (*(_DWORD *)(v25 + 8) & 0x200) != 0;
  sub_22F246F08((uint64_t *)v38);
  v26 = v38[0];
  v27 = *((_DWORD *)v38[0] + 4);
  if (v27 >= *((_DWORD *)v38[0] + 5))
  {
    v35 = v38[0];
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v26 = v35;
    v27 = *((_DWORD *)v35 + 4);
  }
  *((_QWORD *)v26[1] + v27) = v8;
  ++*((_DWORD *)v26 + 4);
  v28 = v38[0];
  v29 = *((_DWORD *)v38[0] + 4);
  if (v29 >= *((_DWORD *)v38[0] + 5))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v29 = *((_DWORD *)v28 + 4);
  }
  *((_QWORD *)v28[1] + v29) = v15;
  ++*((_DWORD *)v28 + 4);
  v30 = *(_QWORD *)(*((_QWORD *)a2 + 11) + 40);
  if ((v30 & 7) != 0)
    v31 = 0;
  else
    v31 = v30 & 0xFFFFFFFFFFFFFFF8;
  v32 = *(unsigned int **)(v31 + 16);
  v33 = *v32;
  v37 = 1283;
  v36[0] = "OBJC_CLASSEXT_";
  v36[2] = v32 + 4;
  v36[3] = v33;
  v34 = sub_22E58334C(a1, (uint64_t)v36, (uint64_t *)v38, (uint64_t)"__OBJC,__class_ext,regular,no_dead_strip", 40, *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 130), 1);
  v38[0] = (void **)v45;
  sub_22E3CEB30(v38);
  if (v42 != v44)
    free(v42);
  return v34;
}

uint64_t sub_22E586C30(uint64_t a1)
{
  uint64_t v1;
  _BOOL8 v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v1 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v1 & 8) != 0 && (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x1C0) == 0xC0)
    return 1;
  v2 = 0;
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v3 && *(_BYTE *)(v3 + 16) == 45)
  {
    v4 = sub_22F114198(*(_QWORD *)(v3 + 24));
    v5 = sub_22EFC3B90(v4);
    if (!v5)
      return 0;
    v6 = v5;
    if ((sub_22E586C30(*(_QWORD *)(v5 + 48)) & 1) != 0)
      return 1;
    do
    {
      v6 = *(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF8;
      v2 = v6 != 0;
    }
    while (v6 && ((*(_DWORD *)(v6 + 28) & 0x7Fu) - 49 > 2 || !sub_22E586C30(*(_QWORD *)(v6 + 48))));
  }
  return v2;
}

uint64_t sub_22E586CF0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  llvm::LLVMContext *v7;
  uint64_t v8;
  void *__p[2];
  uint64_t v11;
  int v12;

  __p[0] = 0;
  __p[1] = 0;
  v11 = 0;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
  v4 = *(_QWORD *)(a2 + 48);
  v12 = 7;
  sub_22EF6B358(v3, v4);
  v5 = sub_22E3B4314((llvm::StringMapImpl *)(a1 + 1120), __p, 0);
  v6 = *v5;
  v7 = *(llvm::LLVMContext **)(*v5 + 8);
  if (!v7)
  {
    v7 = (llvm::LLVMContext *)sub_22E58343C(a1);
    *(_QWORD *)(v6 + 8) = v7;
  }
  v8 = sub_22E5835F4(*(llvm::Type **)(a1 + 16), v7);
  if (SHIBYTE(v11) < 0)
    operator delete(__p[0]);
  return v8;
}

uint64_t sub_22E586DD8(size_t a1, llvm::Type *a2, unint64_t a3, uint64_t a4, int a5, int a6)
{
  _QWORD *v10;
  llvm::Constant *v11;
  uint64_t v12;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  llvm::Type *v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t NullValue;
  const char *v29;
  unint64_t v30;
  size_t v32;
  void **v33;
  unint64_t v34;
  unsigned int *v35;
  const void *v36;
  unsigned int v37;
  uint64_t v38;
  const char *v39;
  void *__dst[2];
  uint64_t v41;
  void *v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45[3];
  char v46;
  char v47;
  void *v48;
  uint64_t v49;
  _BYTE v50[128];
  void *v51;
  uint64_t v52;
  _QWORD v53[34];

  v53[32] = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD **)(a1 + 8);
  v11 = (llvm::Constant *)v10[12];
  v12 = v10[19];
  if ((*(_BYTE *)(v12 + 246) & 6) != 0)
  {
    v16 = (_QWORD *)((char *)a2 + 88);
    v34 = *((_QWORD *)a2 + 11);
    v51 = v53;
    v52 = 0x2000000000;
    sub_22F368A6C(v10[18], v34, 1, (uint64_t)&v51);
    v23 = 0;
  }
  else
  {
    if ((a6 ^ 1 | a5) == 1 && (*(_WORD *)(v12 + 148) & 2) == 0)
      return llvm::Constant::getNullValue(v11, a2);
    v16 = (_QWORD *)((char *)a2 + 88);
    v15 = *((_QWORD *)a2 + 11);
    v51 = v53;
    v52 = 0x2000000000;
    v17 = sub_22EFDD1E0(v15);
    if (v17)
    {
      v19 = v17;
      v20 = v52;
      do
      {
        if (v20 >= HIDWORD(v52))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v20 = v52;
        }
        *((_QWORD *)v51 + v20) = v19;
        v20 = v52 + 1;
        LODWORD(v52) = v52 + 1;
        v19 = *(_QWORD *)(v19 + 80);
      }
      while (v19);
    }
    if (*(_DWORD *)(a1 + 24) != 2)
    {
      if ((_DWORD)v52)
        a3 = sub_22F2791D4(a1, *(_QWORD *)(a1 + 8), (unint64_t)a2, *(_QWORD *)v51);
      else
        a3 = 0;
    }
    v22 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 130);
    v23 = (a3 + v22 - 1) / v22 * v22;
  }
  if ((_DWORD)v52)
  {
    v45[0] = *(_QWORD *)(a1 + 8);
    v45[1] = v23;
    v45[2] = a4;
    v46 = a5;
    v47 = 0;
    v48 = v50;
    v49 = 0x800000000;
    v24 = (uint64_t *)v51;
    v25 = 8 * v52;
    do
    {
      v26 = *v24;
      if ((*(_BYTE *)(*v24 + 68) & 1) == 0)
      {
        v27 = sub_22F2791D4(a1, *(_QWORD *)(a1 + 8), (unint64_t)a2, *v24);
        sub_22E5876F4((unsigned int *)v45, *(_QWORD *)(v26 + 48), v27);
      }
      ++v24;
      v25 -= 8;
    }
    while (v25);
    if (!(_DWORD)v49)
    {
      NullValue = llvm::Constant::getNullValue(v11, v18);
LABEL_52:
      if (v48 != v50)
        free(v48);
      goto LABEL_54;
    }
    v42 = &v44;
    v43 = xmmword_22F4559B0;
    NullValue = sub_22E5871D0(v45, a1, (const char **)&v42);
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 152) + 52) & 0x200000) == 0 || !(_QWORD)v43)
    {
LABEL_50:
      if (v42 != &v44)
        free(v42);
      goto LABEL_52;
    }
    if (a5)
      v29 = "strong";
    else
      v29 = "weak";
    v30 = *(_QWORD *)(*v16 + 40) & 0xFFFFFFFFFFFFFFF8;
    if ((*(_QWORD *)(*v16 + 40) & 7) != 0 || v30 == 0)
    {
      v32 = 0;
      HIBYTE(v41) = 0;
      v33 = __dst;
    }
    else
    {
      v35 = *(unsigned int **)(v30 + 16);
      v37 = *v35;
      v36 = v35 + 4;
      v32 = v37;
      if (v37 >= 0x17uLL)
      {
        if ((v32 | 7) == 0x17)
          v38 = (v32 & 0xFFFFFFF8) + 8;
        else
          v38 = v32 | 7;
        v33 = (void **)operator new(v38 + 1);
        __dst[1] = (void *)v32;
        v41 = v38 - 0x7FFFFFFFFFFFFFFFLL;
        __dst[0] = v33;
      }
      else
      {
        HIBYTE(v41) = v32;
        v33 = __dst;
        if (!v32)
          goto LABEL_45;
      }
      memmove(v33, v36, v32);
    }
LABEL_45:
    *((_BYTE *)v33 + v32) = 0;
    v39 = (const char *)__dst;
    if (v41 < 0)
      v39 = (const char *)__dst[0];
    printf("\n%s ivar layout for class '%s': ", v29, v39);
    if (SHIBYTE(v41) < 0)
      operator delete(__dst[0]);
    sub_22E587660((unsigned __int8 *)v42, v43);
    goto LABEL_50;
  }
  NullValue = llvm::Constant::getNullValue(v11, v18);
LABEL_54:
  if (v51 != v53)
    free(v51);
  return NullValue;
}

uint64_t sub_22E5871D0(uint64_t *a1, size_t a2, const char **a3)
{
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  char v24;
  int v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  const char *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  char v39;
  const char *v40;
  llvm::LLVMContext *v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;

  v4 = a2;
  if (*((_BYTE *)a1 + 25))
  {
    a2 = *((unsigned int *)a1 + 10);
    if (a2 >= 2)
      qsort((void *)a1[4], a2, 0x10uLL, (int (__cdecl *)(const void *, const void *))sub_22E587B00);
  }
  v6 = *a1;
  v7 = *(unsigned __int8 *)(*a1 + 130);
  v8 = *((unsigned int *)a1 + 10);
  if ((_DWORD)v8)
  {
    v44 = v4;
    v9 = 0;
    v10 = a1[4];
    v11 = v10 + 16 * v8;
    v12 = a3 + 3;
    while (1)
    {
      v13 = *(_QWORD *)v10 - a1[1];
      if (!((uint64_t)v13 % (uint64_t)v7) && (v13 & 0x8000000000000000) == 0)
      {
        v14 = v13 / v7;
        v15 = *(_DWORD *)(v10 + 8) + v13 / v7;
        v16 = v13 / v7 - v9;
        if ((v13 / v7) > v9)
        {
          v17 = (uint64_t)a3[1];
          if (v17)
          {
            v18 = (uint64_t)&(*a3)[v17];
            v19 = *(unsigned __int8 *)(v18 - 1);
            if ((v19 & 0xF) == 0)
            {
              v20 = v19 >> 4;
              if (v19 >> 4 != 15)
              {
                v21 = v20 ^ 0xF;
                if ((v20 ^ 0xF) >= v16)
                  v21 = v16;
                v16 -= v21;
                *(_BYTE *)(v18 - 1) = 16 * (v21 + (*(_BYTE *)(v18 - 1) >> 4));
                v17 = (uint64_t)a3[1];
              }
            }
          }
          if (v16 >= 0xF)
          {
            do
            {
              if (v17 + 1 > (unint64_t)a3[2])
              {
                v42 = v12;
                llvm::SmallVectorBase<unsigned long long>::grow_pod();
                v12 = v42;
                v17 = (uint64_t)a3[1];
              }
              (*a3)[v17] = -16;
              v17 = (uint64_t)(a3[1] + 1);
              a3[1] = (const char *)v17;
              v16 -= 15;
            }
            while (v16 > 0xE);
          }
          if (v16)
          {
            if (v17 + 1 > (unint64_t)a3[2])
            {
              v43 = v12;
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
              v12 = v43;
              v17 = (uint64_t)a3[1];
            }
            (*a3)[v17] = 16 * v16;
            v17 = (uint64_t)(a3[1] + 1);
            a3[1] = (const char *)v17;
          }
          goto LABEL_26;
        }
        if (v9 < v15)
        {
          v17 = (uint64_t)a3[1];
          LODWORD(v14) = v9;
LABEL_26:
          v22 = v15 - v14;
          if (v17)
          {
            v23 = (uint64_t)&(*a3)[v17];
            v24 = *(_BYTE *)(v23 - 1);
            v25 = v24 & 0xF;
            if (v25 != 15)
            {
              v26 = v25 ^ 0xF;
              if ((v25 ^ 0xFu) >= v22)
                v26 = v15 - v14;
              v22 -= v26;
              *(_BYTE *)(v23 - 1) = (v25 + v26) | v24 & 0xF0;
            }
          }
          if (v22 >= 0xF)
          {
            v27 = (uint64_t)a3[1];
            do
            {
              if (v27 + 1 > (unint64_t)a3[2])
              {
                v28 = v12;
                llvm::SmallVectorBase<unsigned long long>::grow_pod();
                v12 = v28;
                v27 = (uint64_t)a3[1];
              }
              (*a3)[v27] = 15;
              v27 = (uint64_t)(a3[1] + 1);
              a3[1] = (const char *)v27;
              v22 -= 15;
            }
            while (v22 > 0xE);
          }
          if (v22)
          {
            v29 = a3[1];
            if (v29 + 1 > a3[2])
            {
              v30 = v12;
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
              v12 = v30;
              v29 = a3[1];
            }
            v29[(_QWORD)*a3] = v22;
            ++a3[1];
          }
          v9 = v15;
        }
      }
      v10 += 16;
      if (v10 == v11)
      {
        v6 = *a1;
        v4 = v44;
        goto LABEL_44;
      }
    }
  }
  v9 = 0;
LABEL_44:
  v31 = (uint64_t)a3[1];
  if (!v31)
    return llvm::ConstantPointerNull::get(*(llvm::ConstantPointerNull **)(v6 + 96), (llvm::PointerType *)a2);
  if ((*(_BYTE *)(*(_QWORD *)(v6 + 152) + 246) & 6) != 0)
  {
    v32 = (uint64_t)(~a1[1] + a1[2] + v7) / (uint64_t)v7;
    v33 = v32 - v9;
    if (v32 > v9)
    {
      v34 = (uint64_t)&(*a3)[v31];
      v35 = *(unsigned __int8 *)(v34 - 1);
      if ((v35 & 0xF) == 0)
      {
        v36 = v35 >> 4;
        if (v35 >> 4 != 15)
        {
          v37 = v36 ^ 0xF;
          if ((v36 ^ 0xF) >= v33)
            v37 = v33;
          v33 -= v37;
          *(_BYTE *)(v34 - 1) = 16 * (v37 + (*(_BYTE *)(v34 - 1) >> 4));
          v31 = (uint64_t)a3[1];
        }
      }
      if (v33 >= 0xF)
      {
        do
        {
          if (v31 + 1 > (unint64_t)a3[2])
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
            v31 = (uint64_t)a3[1];
          }
          (*a3)[v31] = -16;
          v31 = (uint64_t)(a3[1] + 1);
          a3[1] = (const char *)v31;
          v33 -= 15;
        }
        while (v33 > 0xE);
      }
      if (v33)
      {
        v39 = 16 * v33;
        if (v31 + 1 > (unint64_t)a3[2])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v31 = (uint64_t)a3[1];
        }
        (*a3)[v31] = v39;
        v31 = (uint64_t)(a3[1] + 1);
        a3[1] = (const char *)v31;
      }
    }
  }
  if (v31 + 1 > (unint64_t)a3[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v31 = (uint64_t)a3[1];
  }
  (*a3)[v31] = 0;
  v40 = *a3;
  ++a3[1];
  if (v40)
    strlen(v40);
  v41 = (llvm::LLVMContext *)sub_22E58343C(v4);
  return sub_22E5835F4(*(llvm::Type **)(*a1 + 232), v41);
}

uint64_t sub_22E587660(unsigned __int8 *a1, unsigned int a2)
{
  uint64_t v2;
  unsigned int v4;

  v2 = a2;
  if (a2)
  {
    do
    {
      v4 = *a1++;
      if (v4 > 0xF)
        printf("0x%x%s");
      else
        printf("0x0%x%s");
      --v2;
    }
    while (v2);
  }
  return putchar(10);
}

unint64_t sub_22E5876F4(unsigned int *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t result;
  uint64_t i;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  unsigned int v27;
  uint64_t *v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31[3];

  v4 = a2;
  result = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)a1 + 144), a2);
  if (!result || *(_BYTE *)(result + 16) != 4)
  {
    i = 1;
    goto LABEL_6;
  }
  for (i = 0; ; i *= *v8)
  {
    v4 = *(_QWORD *)(result + 32);
LABEL_6:
    result = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)a1 + 144), v4);
    if (!result || *(_BYTE *)(result + 16) != 2)
      break;
    v8 = (_QWORD *)(result + 40);
    if (*(_DWORD *)(result + 48) >= 0x41u)
      v8 = (_QWORD *)*v8;
  }
  if (i)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v9 && *(_BYTE *)(v9 + 16) == 45)
    {
      v10 = a1[10];
      result = sub_22E58792C(a1, v9, a3);
      v11 = a1[10];
      if (i != 1 && (_DWORD)v11 != (_DWORD)v10)
      {
        v13 = v11 - v10;
        result = sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)a1 + 144), v9, (uint64_t)v31);
        v14 = v13;
        v15 = v31[0];
        v16 = a1 + 12;
        v17 = a1[10];
        v18 = 16 * v10;
        v19 = 1;
        do
        {
          v20 = v18;
          v21 = v14;
          do
          {
            v22 = *((_QWORD *)a1 + 4);
            v23 = *(_QWORD *)(v22 + v20);
            v24 = *(_QWORD *)(v22 + v20 + 8);
            if (v17 >= a1[11])
            {
              v30 = v16;
              v29 = v14;
              result = llvm::SmallVectorBase<unsigned int>::grow_pod();
              v16 = v30;
              v14 = v29;
              v22 = *((_QWORD *)a1 + 4);
              v17 = a1[10];
            }
            v25 = (_QWORD *)(v22 + 16 * v17);
            *v25 = v23 + v19 * v15;
            v25[1] = v24;
            v17 = a1[10] + 1;
            a1[10] = v17;
            v20 += 16;
            --v21;
          }
          while (v21);
          ++v19;
        }
        while (v19 != i);
      }
    }
    else
    {
      result = sub_22E587A14(*(_QWORD *)(*(_QWORD *)a1 + 144), v4);
      if (*((_BYTE *)a1 + 24))
        v26 = 2;
      else
        v26 = 1;
      if ((_DWORD)result == v26)
      {
        v27 = a1[10];
        if (v27 >= a1[11])
        {
          result = llvm::SmallVectorBase<unsigned int>::grow_pod();
          v27 = a1[10];
        }
        v28 = (uint64_t *)(*((_QWORD *)a1 + 4) + 16 * v27);
        *v28 = a3;
        v28[1] = i;
        ++a1[10];
      }
    }
  }
  return result;
}

unint64_t sub_22E58792C(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t result;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v5 = sub_22F114198(*(_QWORD *)(a2 + 24));
  v6 = v5;
  if ((*(_DWORD *)(v5 + 72) & 0xE000) == 0x4000)
    a1[25] = 1;
  result = sub_22EFC3B90(v5);
  if (result)
  {
    v8 = result;
    v9 = 0;
LABEL_5:
    if ((*(_BYTE *)(v8 + 68) & 1) == 0)
    {
      if (!v9)
        v9 = sub_22F0C975C(*(_QWORD *)(*(_QWORD *)a1 + 144), v6);
      v10 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * sub_22EFC306C(v8));
      v11 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)a1 + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 16408) & 0xFFFFFFFFFFFFFFF0));
      result = sub_22E5876F4(a1, *(_QWORD *)(v8 + 48), v10 / v11 + a3);
    }
    while (1)
    {
      v8 = *(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v8)
        break;
      if ((*(_DWORD *)(v8 + 28) & 0x7Fu) - 49 < 3)
        goto LABEL_5;
    }
  }
  return result;
}

uint64_t sub_22E587A14(uint64_t a1, uint64_t a2)
{
  char i;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  for (i = 0; ; i = 1)
  {
    v4 = a2 & 0xFFFFFFFFFFFFFFF0;
    v5 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
    if ((v5 & 8) == 0)
      goto LABEL_7;
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    if ((v6 & 0x30) == 0x10)
      return 1;
    if ((v6 & 0x30) == 0x20)
      return 2;
    v7 = (v6 >> 6) & 7;
    if (!(i & 1 | ((_DWORD)v7 == 0)))
      break;
    if ((_DWORD)v7)
      return 0;
LABEL_7:
    v8 = *(_QWORD *)v4;
    v9 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    v10 = 2;
    if (v9 == 10 || v9 == 32)
      return v10;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 2000) + 246) & 6) == 0)
      return 0;
    if (*(_BYTE *)(v8 + 16) != 39)
    {
      if (v9 != 39)
        return 0;
      v8 = sub_22F10CF48(v8);
      if (!v8)
        return 0;
    }
    a2 = *(_QWORD *)(v8 + 32);
  }
  return dword_22F45AE60[v7 - 1];
}

uint64_t sub_22E587B00(_QWORD *a1, _QWORD *a2)
{
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  else
    return *a2 < *a1;
}

void sub_22E587B1C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, unint64_t a5, uint64_t a6, llvm::Value *a7, llvm::LLVMContext *a8, char a9, uint64_t *a10, uint64_t a11, unint64_t a12, _QWORD *a13)
{
  llvm::Type ***v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  llvm::LLVMContext *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  unint64_t v34;
  char *v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  _BOOL4 v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  __int128 v58;
  llvm::Value *v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  size_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  llvm::LLVMContext *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  std::string *v81;
  std::string::size_type v82;
  const char *v83;
  size_t v84;
  uint64_t v85;
  _BOOL4 v87;
  uint64_t v88;
  uint64_t v90;
  _OWORD v92[3];
  uint64_t v93;
  _OWORD v94[3];
  uint64_t v95;
  _OWORD v96[3];
  uint64_t v97;
  llvm::Value *v98;
  uint64_t v99;
  _BYTE v100[32];
  __int128 v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  _BYTE v105[1216];
  void *v106;
  uint64_t v107;
  _BYTE v108[192];
  void *v109;
  uint64_t v110;
  _BYTE v111[16];
  void *v112;
  uint64_t v113;
  _QWORD v114[5];
  __int128 v115;
  uint64_t v116;
  int v117;
  int v118;
  uint64_t v119;
  char v120;
  __int16 v121;
  llvm::LLVMContext *v122;
  uint64_t v123;

  v123 = *MEMORY[0x24BDAC8D0];
  v18 = (llvm::Type ***)(*(_QWORD *)(a2 + 8) + 280);
  v19 = *(_QWORD *)(a3[18] + 144);
  v20 = sub_22F36E228(v19);
  v21 = *(_QWORD *)(v20 + 48);
  if (v21)
    v22 = (llvm::LLVMContext *)(v21 & 0xFFFFFFFFFFFFFFF0);
  else
    v22 = (llvm::LLVMContext *)sub_22EF6462C(v19, v20);
  sub_22E66CB04(v18, v22);
  v23 = llvm::UndefValue::get();
  v103 = v105;
  v104 = 0x800000000;
  v106 = v108;
  v107 = 0x100000000;
  v109 = v111;
  v110 = 0x100000000;
  v112 = v114;
  v113 = 0x200000000;
  v114[4] = 0;
  if ((a9 & 1) == 0)
  {
    v24 = a13[8];
    LOWORD(v118) = 257;
    a7 = (llvm::Value *)sub_22E3C1740(a3 + 34, 49, (uint64_t)a7, v24, (uint64_t)&v115);
  }
  v115 = (unint64_t)a7;
  v120 = 0;
  v121 = 0;
  v122 = a8;
  v25 = sub_22E3C187C((uint64_t)&v103, (unint64_t)&v115, 1);
  v26 = (char *)v103 + 152 * v104;
  v27 = *(_OWORD *)(v25 + 16);
  *(_OWORD *)v26 = *(_OWORD *)v25;
  *((_OWORD *)v26 + 1) = v27;
  v28 = *(_QWORD *)(v25 + 144);
  v29 = *(_OWORD *)(v25 + 128);
  v30 = *(_OWORD *)(v25 + 96);
  *((_OWORD *)v26 + 7) = *(_OWORD *)(v25 + 112);
  *((_OWORD *)v26 + 8) = v29;
  *((_QWORD *)v26 + 18) = v28;
  *((_OWORD *)v26 + 6) = v30;
  v31 = *(_OWORD *)(v25 + 80);
  v32 = *(_OWORD *)(v25 + 32);
  v33 = *(_OWORD *)(v25 + 48);
  *((_OWORD *)v26 + 4) = *(_OWORD *)(v25 + 64);
  *((_OWORD *)v26 + 5) = v31;
  *((_OWORD *)v26 + 2) = v32;
  *((_OWORD *)v26 + 3) = v33;
  LODWORD(v104) = v104 + 1;
  v115 = (unint64_t)v23;
  v120 = 0;
  v121 = 0;
  v122 = v22;
  v34 = sub_22E3C187C((uint64_t)&v103, (unint64_t)&v115, 1);
  v35 = (char *)v103 + 152 * v104;
  v36 = *(_OWORD *)(v34 + 16);
  *(_OWORD *)v35 = *(_OWORD *)v34;
  *((_OWORD *)v35 + 1) = v36;
  v37 = *(_QWORD *)(v34 + 144);
  v38 = *(_OWORD *)(v34 + 128);
  v39 = *(_OWORD *)(v34 + 96);
  *((_OWORD *)v35 + 7) = *(_OWORD *)(v34 + 112);
  *((_OWORD *)v35 + 8) = v38;
  *((_QWORD *)v35 + 18) = v37;
  *((_OWORD *)v35 + 6) = v39;
  v40 = *(_OWORD *)(v34 + 80);
  v41 = *(_OWORD *)(v34 + 32);
  v42 = *(_OWORD *)(v34 + 48);
  *((_OWORD *)v35 + 4) = *(_OWORD *)(v34 + 64);
  *((_OWORD *)v35 + 5) = v40;
  *((_OWORD *)v35 + 2) = v41;
  *((_OWORD *)v35 + 3) = v42;
  LODWORD(v104) = v104 + 1;
  sub_22E5010F0((uint64_t)&v103, (uint64_t)a10);
  v43 = sub_22F2796B8(a2, a11, a5, &v103);
  v88 = v44;
  v45 = sub_22E596480(a2, (uint64_t)a3, a11, a9, a12, a7);
  v87 = v45;
  v90 = v43;
  if (a11 && sub_22EFDBD9C(a11))
  {
    sub_22EFDC9F0(a11);
    v46 = sub_22E588370(a2, (_QWORD *)a11);
    v47 = 0;
    v48 = 0;
LABEL_9:
    v49 = v88;
    goto LABEL_10;
  }
  v48 = v45;
  if (sub_22F24E490(*(_QWORD **)(a2 + 8), v43))
  {
    if (*(_DWORD *)(a2 + 24) == 2)
    {
      if (a9)
      {
        v61 = a13[15];
        *(_QWORD *)&v115 = a13[5];
        *((_QWORD *)&v115 + 1) = v61;
        v116 = a13[10];
        v62 = a13[1];
        v63 = llvm::FunctionType::get();
        v64 = "objc_msgSendSuper2_stret";
        v65 = v62;
        v66 = 24;
LABEL_49:
        v70 = 0;
LABEL_50:
        sub_22E633A04(v65, v63, v64, v66, v70, 0, 0);
LABEL_56:
        v46 = v71;
LABEL_67:
        v47 = 1;
        goto LABEL_9;
      }
    }
    else if (a9)
    {
      v68 = a13[15];
      *(_QWORD *)&v115 = a13[5];
      *((_QWORD *)&v115 + 1) = v68;
      v116 = a13[10];
      v69 = a13[1];
      v63 = llvm::FunctionType::get();
      v64 = "objc_msgSendSuper_stret";
      v65 = v69;
      v66 = 23;
      goto LABEL_49;
    }
    sub_22E5889A4((uint64_t)a13);
    goto LABEL_56;
  }
  v67 = *(_QWORD *)(a2 + 8);
  if (sub_22E46F1EC(v67, a5))
  {
    if (*(_DWORD *)(a2 + 24) == 2)
    {
      if (!a9)
        goto LABEL_58;
LABEL_54:
      sub_22E588ACC((uint64_t)a13);
LABEL_66:
      v46 = v73;
      v48 = 0;
      goto LABEL_67;
    }
    if (!a9)
    {
LABEL_58:
      sub_22E588A38((uint64_t)a13);
      goto LABEL_66;
    }
LABEL_64:
    sub_22E588B60((uint64_t)a13);
    goto LABEL_66;
  }
  if (sub_22E46F24C(v67, a5))
  {
    if (*(_DWORD *)(a2 + 24) == 2)
    {
      if (a9)
        goto LABEL_54;
    }
    else if (a9)
    {
      goto LABEL_64;
    }
    sub_22E588BF4((uint64_t)a13, v72);
    goto LABEL_66;
  }
  if (v48)
  {
    v74 = *(unsigned __int8 *)(v43 + 72);
    if (v74 == 2)
    {
      v48 = 1;
    }
    else if (v74 == 8)
    {
      v48 = (*(unsigned __int16 *)(v43 + 73) >> 1) & 1;
    }
    else
    {
      v48 = 0;
    }
  }
  if ((a9 & 1) != 0)
  {
    if (*(_DWORD *)(a2 + 24) == 2)
      sub_22E588ACC((uint64_t)a13);
    else
      sub_22E588B60((uint64_t)a13);
    goto LABEL_56;
  }
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 184) + 32) & 0x80) == 0)
  {
    v75 = a13[10];
    *(_QWORD *)&v115 = a13[8];
    *((_QWORD *)&v115 + 1) = v75;
    v76 = a13[1];
    v77 = llvm::FunctionType::get();
    *(_DWORD *)v100 = 38;
    v70 = llvm::AttributeList::get();
    v64 = "objc_msgSend";
    v65 = v76;
    v63 = v77;
    v66 = 12;
    goto LABEL_50;
  }
  *(_QWORD *)&v96[0] = a6;
  *(_QWORD *)&v115 = 0;
  if (!sub_22F277304(*(_QWORD *)(a2 + 1200), *(_DWORD *)(a2 + 1216), v96, &v115)
    || (_QWORD)v115 == *(_QWORD *)(a2 + 1200) + 16 * *(unsigned int *)(a2 + 1216))
  {
    v78 = a13[10];
    *(_QWORD *)&v115 = a13[8];
    *((_QWORD *)&v115 + 1) = v78;
    v79 = llvm::FunctionType::get();
    v80 = *(_QWORD *)(a2 + 8);
    sub_22F1D3A38((uint64_t *)v96, v100);
    v81 = std::string::insert((std::string *)v100, 0, "objc_msgSend$");
    v82 = v81->__r_.__value_.__r.__words[2];
    v115 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
    v116 = v82;
    v81->__r_.__value_.__l.__size_ = 0;
    v81->__r_.__value_.__r.__words[2] = 0;
    v81->__r_.__value_.__r.__words[0] = 0;
    if (v116 >= 0)
      v83 = (const char *)&v115;
    else
      v83 = (const char *)v115;
    if (v116 >= 0)
      v84 = HIBYTE(v116) & 0x7F;
    else
      v84 = *((_QWORD *)&v115 + 1);
    sub_22E633A04(v80, v79, v83, v84, 0, 0, 0);
    v46 = v85;
    if (SHIBYTE(v116) < 0)
      operator delete((void *)v115);
    if ((v100[23] & 0x80000000) != 0)
      operator delete(*(void **)v100);
    *(_QWORD *)v100 = *(_QWORD *)&v96[0];
    *(_QWORD *)&v100[8] = v46;
    sub_22F278A34((uint64_t)&v115, a2 + 1200, v100, (uint64_t *)&v100[8]);
  }
  else
  {
    v46 = *(_QWORD *)(v115 + 8);
  }
  v49 = v88;
  v47 = 0;
LABEL_10:
  LOWORD(v118) = 257;
  v50 = sub_22E3C1740(a3 + 34, 49, v46, v49, (uint64_t)&v115);
  if ((*(_BYTE *)(a4 + 48) & 2) != 0)
    v51 = 0;
  else
    v51 = v48;
  if (a11 && (v51 & 1) == 0)
  {
    v52 = *(unsigned int *)(a11 + 104);
    if (!(_DWORD)v52)
    {
LABEL_19:
      v55 = 0;
      v99 = 0;
      if (!v47)
        goto LABEL_24;
      goto LABEL_23;
    }
    v53 = *(uint64_t **)(a11 + 96);
    v54 = 8 * v52;
    while ((sub_22EFBF328(*v53) & 1) == 0)
    {
      ++v53;
      v54 -= 8;
      if (!v54)
        goto LABEL_19;
    }
    v99 = 0;
    goto LABEL_37;
  }
  v55 = 0;
  v99 = 0;
  if (v51)
  {
LABEL_37:
    sub_22E588548(&v99, a3, (llvm::Constant **)a7);
    v55 = a11;
    if (!v47)
      goto LABEL_24;
    goto LABEL_23;
  }
  if (v47)
  {
LABEL_23:
    v56 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a2 + 24))(a2, a3, a6);
    v57 = v103;
    *((_QWORD *)v103 + 19) = v56;
    v57[20] = 0;
    *((_BYTE *)v57 + 200) = 0;
    *((_WORD *)v57 + 144) = 0;
    v57[37] = v22;
  }
LABEL_24:
  v98 = 0;
  v119 = 0;
  v116 = 0;
  v115 = (unint64_t)v50;
  v118 = 0;
  v117 = 0;
  v58 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)v100 = *(_OWORD *)a4;
  *(_OWORD *)&v100[16] = v58;
  v101 = *(_OWORD *)(a4 + 32);
  v102 = *(_QWORD *)(a4 + 48);
  sub_22E47A004((unint64_t)a3, v90, (uint64_t)&v115, (uint64_t)v100, (uint64_t)&v103, &v98, 0, 0, (uint64_t)v96, 0);
  if (a11 && sub_22E47260C(a11) && !v87)
  {
    v59 = v98;
    llvm::Value::getContext(v98);
    *((_QWORD *)v59 + 8) = llvm::AttributeList::addAttributeAtIndex();
  }
  v60 = *(_OWORD *)(a4 + 16);
  v94[0] = *(_OWORD *)a4;
  v94[1] = v60;
  v94[2] = *(_OWORD *)(a4 + 32);
  v92[0] = v96[0];
  v92[1] = v96[1];
  v95 = *(_QWORD *)(a4 + 48);
  v92[2] = v96[2];
  v93 = v97;
  sub_22E58869C(a1, &v99, (uint64_t)a3, (uint64_t)v94, (uint64_t)v92, a5, a10, v55);
  if (v112 != v114)
    free(v112);
  if (v109 != v111)
    free(v109);
  if (v106 != v108)
    free(v106);
  if (v103 != v105)
    free(v103);
}

uint64_t sub_22E588370(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::Function *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__p[2];
  char v20;
  _QWORD v21[4];
  __int16 v22;

  v4 = (*(uint64_t (**)(_QWORD *))(*a2 + 32))(a2);
  v21[0] = 0;
  v5 = sub_22F24C318(*(_QWORD *)(a1 + 1176), *(_DWORD *)(a1 + 1192), v4, v21);
  v6 = *(unsigned int *)(a1 + 1192);
  if (v5)
    v7 = v21[0];
  else
    v7 = *(_QWORD *)(a1 + 1176) + 16 * v6;
  if (v7 == *(_QWORD *)(a1 + 1176) + 16 * v6)
  {
    v9 = 0;
  }
  else
  {
    if (!(*(uint64_t (**)(_QWORD *))(*a2 + 64))(a2) || *(_QWORD *)(v4 + 80) == a2[10])
      return *(_QWORD *)(v7 + 8);
    v9 = *(llvm::Function **)(v7 + 8);
  }
  v10 = *(_QWORD *)(a1 + 8) + 280;
  v11 = sub_22E46D060(v10, (uint64_t)a2, *(_QWORD *)(a2[15] + 48));
  v12 = sub_22E46F2EC(v10, v11);
  if (v9)
  {
    v22 = 257;
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 200);
    v8 = llvm::User::operator new((llvm::User *)0x78);
    MEMORY[0x23489F6FC](v8, v12, 0, 0xFFFFFFFFLL, v21, v13);
    llvm::Value::takeName();
    llvm::ConstantExpr::getBitCast();
    llvm::Value::replaceAllUsesWith();
    llvm::Function::eraseFromParent(v9);
    *(_QWORD *)(v7 + 8) = v8;
  }
  else
  {
    v15 = a1 + 1176;
    sub_22E5966F4(a1, (uint64_t)a2, 0, __p);
    v22 = 260;
    v21[0] = __p;
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 200);
    v8 = llvm::User::operator new((llvm::User *)0x78);
    v17 = v4;
    v18 = MEMORY[0x23489F6FC](v8, v12, 0, 0xFFFFFFFFLL, v21, v16);
    sub_22F2543D4((uint64_t)v21, v15, &v17, &v18);
    if (v20 < 0)
      operator delete(__p[0]);
  }
  return v8;
}

uint64_t sub_22E588548(uint64_t *a1, _QWORD *a2, llvm::Constant **a3)
{
  _QWORD *v6;
  llvm::Type *v7;
  uint64_t NullValue;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[4];
  __int16 v14;

  operator new();
  *a1 = llvm::BasicBlock::BasicBlock();
  v13[0] = "msgSend.call";
  v6 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v14 = 257;
  NullValue = llvm::Constant::getNullValue(*a3, v7);
  v9 = sub_22E3C18F4((uint64_t)(a2 + 34), 32, (uint64_t *)a3, NullValue, (uint64_t)v13);
  v10 = *a1;
  v11 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x23489C09C](v11, v10, v6, v9, 0);
  v14 = 257;
  sub_22E3C12C8(a2 + 34, v11, (uint64_t)v13);
  return sub_22E5ED9B4(a2, v6, 0);
}

void sub_22E58869C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t *a7, uint64_t a8)
{
  _QWORD *v11;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  llvm::Type **v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  llvm::PHINode *v25;
  char v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  llvm::Constant **v30;
  llvm::Constant *v31;
  llvm::Type *v32;
  uint64_t NullValue;
  llvm::PHINode *v34;
  llvm::PHINode *v35;
  char v36;
  char v37;
  uint64_t *v38;
  uint64_t v39;
  _OWORD v41[3];
  _QWORD v42[4];
  __int16 v43;

  v11 = (_QWORD *)*a2;
  if (!v11)
  {
LABEL_19:
    v28 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a5;
    *(_OWORD *)(a1 + 16) = v28;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a5 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a5 + 48);
    return;
  }
  v16 = (uint64_t *)(a3 + 272);
  v38 = (uint64_t *)(a3 + 272);
  v39 = *(_QWORD *)(a3 + 320);
  if (v39)
  {
    v42[0] = "msgSend.cont";
    v17 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v18 = llvm::User::operator new((llvm::User *)0x40);
    llvm::BranchInst::BranchInst();
    v43 = 257;
    sub_22E3C12C8(v16, v18, (uint64_t)v42);
    v11 = (_QWORD *)*a2;
  }
  else
  {
    v17 = 0;
  }
  sub_22E5ED9B4((_QWORD *)a3, v11, 0);
  if (a8)
    sub_22E5965BC((llvm::Value *)a3, a8, a7);
  if ((*(_BYTE *)(a5 + 48) & 6) == 4)
  {
    if ((*(_BYTE *)(a4 + 48) & 2) == 0)
    {
      v27 = *(_OWORD *)(a5 + 16);
      v41[0] = *(_OWORD *)a5;
      v41[1] = v27;
      v41[2] = *(_OWORD *)(a5 + 32);
      sub_22E620824(a3, (uint64_t)v41, a6);
    }
LABEL_17:
    if (v17)
      sub_22E5ED9B4((_QWORD *)a3, v17, 0);
    goto LABEL_19;
  }
  if ((*(_BYTE *)(a5 + 48) & 6) == 0)
  {
    v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a6 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v19)
      v20 = (*(_DWORD *)(v19 + 16) & 0xFF800FF) == 86507531;
    else
      v20 = 0;
    if (!v20)
    {
      v21 = (llvm::Type **)sub_22E507208(*(_QWORD **)(a3 + 144), a6);
      v22 = sub_22E4E7BB4(a3, v21, a6);
      v23 = (uint64_t *)v22;
      if (v17)
      {
        sub_22E5ED9B4((_QWORD *)a3, v17, 0);
        v24 = *v23;
        v43 = 257;
        v25 = (llvm::PHINode *)sub_22E3C4B80(v38, v24, 2, (uint64_t)v42);
        sub_22E3C4C50(v25, *(_QWORD *)a5, v39);
        sub_22E3C4C50(v25, (uint64_t)v23, *a2);
        v26 = *(_BYTE *)(a1 + 48);
        *(_QWORD *)a1 = v25;
      }
      else
      {
        v26 = *(_BYTE *)(a1 + 48);
        *(_QWORD *)a1 = v22;
      }
      *(_QWORD *)(a1 + 8) = 0;
      v37 = v26 & 0xF8;
      goto LABEL_23;
    }
    goto LABEL_17;
  }
  sub_22E5ED9B4((_QWORD *)a3, v17, 0);
  v30 = *(llvm::Constant ***)a5;
  v29 = *(_QWORD *)(a5 + 8);
  v31 = *v30;
  NullValue = llvm::Constant::getNullValue(*v30, v32);
  v43 = 257;
  v34 = (llvm::PHINode *)sub_22E3C4B80(v38, (uint64_t)v31, 2, (uint64_t)v42);
  sub_22E3C4C50(v34, (uint64_t)v30, v39);
  sub_22E3C4C50(v34, NullValue, *a2);
  v43 = 257;
  v35 = (llvm::PHINode *)sub_22E3C4B80(v38, (uint64_t)v31, 2, (uint64_t)v42);
  sub_22E3C4C50(v35, v29, v39);
  sub_22E3C4C50(v35, NullValue, *a2);
  v36 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)a1 = v34;
  *(_QWORD *)(a1 + 8) = v35;
  v37 = v36 & 0xF8 | 2;
LABEL_23:
  *(_BYTE *)(a1 + 48) = v37;
}

uint64_t sub_22E5889A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = llvm::FunctionType::get();
  return sub_22E633A04(v1, v2, "objc_msgSend_stret", 0x12uLL, 0, 0, 0);
}

uint64_t sub_22E588A38(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = llvm::FunctionType::get();
  return sub_22E633A04(v1, v2, "objc_msgSend_fpret", 0x12uLL, 0, 0, 0);
}

uint64_t sub_22E588ACC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = llvm::FunctionType::get();
  return sub_22E633A04(v1, v2, "objc_msgSendSuper2", 0x12uLL, 0, 0, 0);
}

uint64_t sub_22E588B60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = llvm::FunctionType::get();
  return sub_22E633A04(v1, v2, "objc_msgSendSuper", 0x11uLL, 0, 0, 0);
}

uint64_t sub_22E588BF4(uint64_t a1, llvm::LLVMContext *a2)
{
  uint64_t v3;
  uint64_t v4;

  llvm::Type::getX86_FP80Ty(*(llvm::Type **)a1, a2);
  llvm::StructType::get();
  v3 = *(_QWORD *)(a1 + 8);
  v4 = llvm::FunctionType::get();
  return sub_22E633A04(v3, v4, "objc_msgSend_fp2ret", 0x13uLL, 0, 0, 0);
}

llvm::Value *sub_22E588CAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::StringMapImpl *v7;
  void *v8;
  size_t v9;
  uint64_t v10;

  if (sub_22F278AC4(a3))
    return sub_22E588D38(a2, a3, a1 + 2488);
  v7 = *(llvm::StringMapImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 15192);
  v8 = sub_22F3B5E40(a3);
  v10 = sub_22E3CB704(v7, v8, v9);
  return (llvm::Value *)sub_22E589014(a1, a2, v10);
}

llvm::Value *sub_22E588D38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD **v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  unint64_t v21;
  const void *v22;
  size_t v23;
  void *p_dst;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  llvm::LLVMContext *v28;
  uint64_t v29;
  llvm::Value *v30;
  uint64_t v32;
  void *__dst;
  uint64_t v34;
  _QWORD v35[2];
  __int16 v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a3 + 8);
  v7 = (_QWORD **)(v6 + 280);
  v8 = *(_QWORD *)(v6 + 144);
  __dst = v35;
  v34 = 0x100000000;
  v9 = sub_22EF5B848(v8, *(_QWORD *)(v8 + 16408) | 1, 0);
  v35[0] = v9 & 7 | *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFF0) + 8);
  LODWORD(v34) = 1;
  v10 = sub_22F36E27C(v8);
  v12 = *(_QWORD *)(v10 + 48);
  if (v12)
    v13 = v12 & 0xFFFFFFFFFFFFFFF0;
  else
    v13 = sub_22EF6462C(v8, v10);
  v14 = sub_22E46BBB8(v7, v13 & 7 | *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFF0) + 8), 0, 0, (uint64_t *)__dst, v34, 0, v11, 0, 0, -1);
  v15 = sub_22E46F2EC((uint64_t)v7, v14);
  v16 = sub_22E633A04(*(_QWORD *)(a3 + 8), v15, "objc_lookUpClass", 0x10uLL, 0, 0, 0);
  v18 = v17;
  if (__dst != v35)
    free(__dst);
  v19 = *(_QWORD **)(a1 + 144);
  v20 = sub_22F3B5E40(a2);
  if (v21 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v22 = v20;
  v23 = v21;
  if (v21 >= 0x17)
  {
    v25 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17)
      v25 = v21 | 7;
    v26 = v25 + 1;
    p_dst = operator new(v25 + 1);
    v34 = v23;
    v35[0] = v26 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_13;
  }
  HIBYTE(v35[0]) = v21;
  p_dst = &__dst;
  if (v21)
LABEL_13:
    memmove(p_dst, v22, v23);
  *((_BYTE *)p_dst + v23) = 0;
  v27 = sub_22F29BB8C(v19, (uint64_t)&__dst, 0);
  if (SHIBYTE(v35[0]) < 0)
    operator delete(__dst);
  v28 = (llvm::LLVMContext *)sub_22EF5B848(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144) + 16408) | 1, 0);
  v29 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 144) + 280), v28);
  v36 = 257;
  v32 = sub_22E3C1740((uint64_t *)(a1 + 272), 49, v27 & 0xFFFFFFFFFFFFFFF8, v29, (uint64_t)&__dst);
  v36 = 257;
  v30 = sub_22E462B78((uint64_t *)(a1 + 272), v16, v18, (uint64_t)&v32, 1, (uint64_t)&__dst, 0);
  llvm::Value::getContext(v30);
  *((_QWORD *)v30 + 8) = llvm::AttributeList::addAttributeAtIndex();
  return v30;
}

uint64_t sub_22E589014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t BitCast;
  llvm::Type *v9;
  __int16 v10;
  _BYTE v12[32];
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;

  v16 = a3;
  sub_22E584F38((_QWORD *)(a1 + 432), &v16);
  v5 = sub_22F24C2B0(a1 + 1248, &v16);
  v6 = v5[1];
  if (!v6)
  {
    v7 = v5;
    sub_22E5832E4(a1, (const void *)(*(_QWORD *)(v16 + 16) + 16), **(unsigned int **)(v16 + 16));
    BitCast = llvm::ConstantExpr::getBitCast();
    v14 = "OBJC_CLASS_REFERENCES_";
    v15 = 259;
    v6 = sub_22E583898(a1, (uint64_t)&v14, BitCast, (uint64_t)"__OBJC,__cls_refs,literal_pointers,no_dead_strip", 48);
    v7[1] = v6;
  }
  v9 = *(llvm::Type **)(v6 + 24);
  v10 = (63 - __clz(*(unsigned __int8 *)(a2 + 130))) | 0x100;
  v13 = 257;
  return sub_22E3C3200((uint64_t *)(a2 + 272), v9, v6, v10, 0, (uint64_t)v12);
}

uint64_t sub_22E589100(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  llvm::Type ***v4;
  uint64_t v5;
  uint64_t *v6;
  llvm::LLVMContext *v7;

  result = *(_QWORD *)(a1 + 88);
  if (!result)
  {
    v3 = *(_QWORD *)(a1 + 8);
    v4 = (llvm::Type ***)(v3 + 280);
    v5 = *(_QWORD *)(v3 + 144);
    v6 = sub_22F36E2EC(v5);
    v7 = (llvm::LLVMContext *)sub_22F36D148(v5, v6, 0);
    sub_22E66CB04(v4, v7);
    result = llvm::PointerType::get();
    *(_QWORD *)(a1 + 88) = result;
  }
  return result;
}

unint64_t sub_22E58916C(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  _QWORD *v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  for (i = 0; i != 192; i += 48)
  {
    v4 = (_QWORD *)(a1 + i);
    *v4 = a1 + i + 16;
    v4[1] = 0x400000000;
  }
  result = sub_22F2781C0(a2);
  if (result != v6)
  {
    v7 = result;
    v8 = v6;
    do
    {
      v9 = a1
         + 48
         * (((*(_QWORD *)(v7 + 56) >> 17) & 1 | (2 * ((*(_QWORD *)(v7 + 56) & 0x3000000) == 0x2000000))) ^ 1);
      v10 = *(unsigned int *)(v9 + 8);
      if (v10 >= *(unsigned int *)(v9 + 12))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = *(unsigned int *)(v9 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v9 + 8 * v10) = v7;
      ++*(_DWORD *)(v9 + 8);
      do
        v7 = *(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v7 && (*(_DWORD *)(v7 + 28) & 0x7F) != 0x18);
    }
    while (v7 != v8);
  }
  return result;
}

uint64_t sub_22E589264(uint64_t a1, uint64_t a2, int a3, llvm::Type *a4, uint64_t a5)
{
  uint64_t v7;
  int v8;
  const char *v9;
  uint64_t v10;
  __int128 v12;
  _OWORD v13[2];
  uint64_t v14;

  if (!a4)
    return llvm::Constant::getNullValue(*(llvm::Constant **)(a5 + 48), (llvm::Type *)a2);
  llvm::ArrayType::get(*(llvm::ArrayType **)(a5 + 40), a4);
  v7 = llvm::ConstantArray::get();
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 76) == 5)
  {
    v8 = *(_DWORD *)(a1 + 24);
    if (v8 == 2)
      v9 = "__DATA, __objc_const";
    else
      v9 = 0;
    if (v8 == 2)
      v10 = 20;
    else
      v10 = 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  v12 = *(_OWORD *)(a2 + 16);
  v13[0] = *(_OWORD *)a2;
  v13[1] = v12;
  v14 = *(_QWORD *)(a2 + 32);
  sub_22E583898(a1, (uint64_t)v13, v7, (uint64_t)v9, v10);
  return llvm::ConstantExpr::getBitCast();
}

uint64_t sub_22E58934C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18[5];

  v18[4] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(v2 + 144);
  v4 = sub_22F36E1B8(v3);
  v5 = *(_QWORD *)(v4 + 48);
  if (v5)
    v6 = v5 & 0xFFFFFFFFFFFFFFF0;
  else
    v6 = sub_22EF6462C(v3, v4);
  v7 = sub_22EF64498(v3, v6);
  v8 = sub_22F36E228(v3);
  v9 = *(_QWORD *)(v8 + 48);
  if (v9)
    v10 = v9 & 0xFFFFFFFFFFFFFFF0;
  else
    v10 = sub_22EF6462C(v3, v8);
  v11 = (_QWORD **)(v2 + 280);
  v18[0] = v7;
  v18[1] = sub_22EF64498(v3, v10);
  v12 = sub_22EF5B0AC(v3, *(_DWORD *)(*(_QWORD *)(v3 + 15088) + *(_QWORD *)(**(_QWORD **)(v3 + 15088) - 24) + 120));
  v13 = *(_QWORD *)(v3 + 16400);
  v18[2] = *(_QWORD *)(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0) + 8);
  v18[3] = v13;
  v15 = sub_22E46BBB8(v11, v7, 0, 0, v18, 4, 0, v14, 0, 0, -1);
  v16 = sub_22E46F2EC((uint64_t)v11, v15);
  return sub_22E633A04(*(_QWORD *)(a1 + 8), v16, "objc_getProperty", 0x10uLL, 0, 0, 0);
}

uint64_t sub_22E5894A4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16[4];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(v2 + 144);
  v4 = sub_22F36E1B8((uint64_t)v3);
  v5 = *(_QWORD *)(v4 + 48);
  if (v5)
    v6 = v5 & 0xFFFFFFFFFFFFFFF0;
  else
    v6 = sub_22EF6462C((uint64_t)v3, v4);
  v7 = sub_22EF64498((uint64_t)v3, v6);
  v8 = sub_22F36E228((uint64_t)v3);
  v9 = *(_QWORD *)(v8 + 48);
  if (v9)
    v10 = v9 & 0xFFFFFFFFFFFFFFF0;
  else
    v10 = sub_22EF6462C((uint64_t)v3, v8);
  v11 = (_QWORD **)(v2 + 280);
  v16[0] = v7;
  v16[1] = sub_22EF64498((uint64_t)v3, v10);
  v16[2] = *(_QWORD *)(*(_QWORD *)(sub_22EF5B0AC((uint64_t)v3, *(_DWORD *)(v3[1886] + *(_QWORD *)(*(_QWORD *)v3[1886] - 24) + 120)) & 0xFFFFFFFFFFFFFFF0)+ 8);
  v16[3] = v7;
  v17 = v3[2050];
  v18 = v17;
  v13 = sub_22E46BBB8(v11, v3[2049], 0, 0, v16, 6, 0, v12, 0, 0, -1);
  v14 = sub_22E46F2EC((uint64_t)v11, v13);
  return sub_22E633A04(*(_QWORD *)(a1 + 8), v14, "objc_setProperty", 0x10uLL, 0, 0, 0);
}

uint64_t sub_22E589600(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  const char *v19;
  size_t v20;
  uint64_t v22[5];

  v22[4] = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(v6 + 144);
  v8 = sub_22F36E1B8(v7);
  v9 = *(_QWORD *)(v8 + 48);
  if (v9)
    v10 = v9 & 0xFFFFFFFFFFFFFFF0;
  else
    v10 = sub_22EF6462C(v7, v8);
  v11 = sub_22EF64498(v7, v10);
  v12 = sub_22F36E228(v7);
  v13 = *(_QWORD *)(v12 + 48);
  if (v13)
    v14 = v13 & 0xFFFFFFFFFFFFFFF0;
  else
    v14 = sub_22EF6462C(v7, v12);
  v22[0] = v11;
  v22[1] = sub_22EF64498(v7, v14);
  v22[2] = v11;
  v22[3] = *(_QWORD *)(*(_QWORD *)(sub_22EF5B0AC(v7, *(_DWORD *)(*(_QWORD *)(v7 + 15088)+ *(_QWORD *)(**(_QWORD **)(v7 + 15088) - 24)+ 120)) & 0xFFFFFFFFFFFFFFF0)+ 8);
  v16 = sub_22E46BBB8((_QWORD **)(v6 + 280), *(_QWORD *)(v7 + 16392), 0, 0, v22, 4, 0, v15, 0, 0, -1);
  v17 = sub_22E46F2EC(v6 + 280, v16);
  v18 = a3 ^ 1;
  if (((a2 ^ 1) & 1) != 0 || v18)
  {
    if ((a2 ^ 1 | a3) == 1)
    {
      if (v18 | a2)
        v19 = "objc_setProperty_nonatomic";
      else
        v19 = "objc_setProperty_nonatomic_copy";
    }
    else
    {
      v19 = "objc_setProperty_atomic";
    }
  }
  else
  {
    v19 = "objc_setProperty_atomic_copy";
  }
  v20 = strlen(v19);
  return sub_22E633A04(*(_QWORD *)(a1 + 8), v17, v19, v20, 0, 0, 0);
}

uint64_t sub_22E5898E0(uint64_t a1)
{
  uint64_t v2;
  _QWORD **v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[6];

  v12[5] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8);
  v3 = (_QWORD **)(v2 + 280);
  v4 = *(_QWORD **)(v2 + 144);
  v12[0] = v4[2102];
  v12[1] = v12[0];
  v5 = sub_22EF67C8C((uint64_t)v4);
  v6 = v4[2050];
  v12[2] = v5;
  v12[3] = v6;
  v7 = v4[2049];
  v12[4] = v6;
  v9 = sub_22E46BBB8(v3, v7, 0, 0, v12, 5, 0, v8, 0, 0, -1);
  v10 = sub_22E46F2EC((uint64_t)v3, v9);
  return sub_22E633A04(*(_QWORD *)(a1 + 8), v10, "objc_copyStruct", 0xFuLL, 0, 0, 0);
}

uint64_t sub_22E5899FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _QWORD **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16[4];

  v16[3] = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD *)(a1 + 8);
  v10 = (_QWORD **)(v9 + 280);
  v11 = *(_QWORD *)(v9 + 144);
  v16[0] = *(_QWORD *)(v11 + 16816);
  v16[1] = v16[0];
  v12 = *(_QWORD *)(v11 + 16392);
  v16[2] = v16[0];
  v13 = sub_22E46BBB8(v10, v12, 0, 0, v16, 3, 0, a8, 0, 0, -1);
  v14 = sub_22E46F2EC((uint64_t)v10, v13);
  return sub_22E633A04(*(_QWORD *)(a1 + 8), v14, "objc_copyCppObjectAtomic", 0x18uLL, 0, 0, 0);
}

uint64_t sub_22E589AFC(uint64_t a1)
{
  uint64_t v2;
  _QWORD **v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[2];

  v12[1] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8);
  v3 = (_QWORD **)(v2 + 280);
  v4 = *(_QWORD *)(v2 + 144);
  v5 = sub_22F36E1B8(v4);
  v6 = *(_QWORD *)(v5 + 48);
  if (v6)
    v7 = v6 & 0xFFFFFFFFFFFFFFF0;
  else
    v7 = sub_22EF6462C(v4, v5);
  v12[0] = sub_22EF64498(v4, v7);
  v9 = sub_22E46BBB8(v3, *(_QWORD *)(v4 + 16392), 0, 0, v12, 1, 0, v8, 0, 0, -1);
  v10 = sub_22E46F2EC((uint64_t)v3, v9);
  return sub_22E633A04(*(_QWORD *)(a1 + 8), v10, "objc_enumerationMutation", 0x18uLL, 0, 0, 0);
}

void sub_22E589C68(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  llvm::Value *v11;
  llvm::Type *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  llvm::Type *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  const char *v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  llvm *v33;
  llvm::LLVMContext *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  llvm *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  llvm::Type *Int1Ty;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  __int128 v61;
  uint64_t v62;
  llvm::Value *v63;
  llvm::LLVMContext *v64;
  uint64_t v65;
  uint64_t v66;
  llvm::Value *v67;
  llvm::Value *v68;
  _QWORD *v69;
  _QWORD *v70;
  llvm::Type *v71;
  uint64_t NullValue;
  uint64_t v73;
  uint64_t v74;
  llvm::Type **True;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  llvm::Type **False;
  uint64_t *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  int v89;
  unsigned int v90;
  uint64_t i;
  uint64_t v92;
  int v93;
  uint64_t v94;
  llvm::InlineAsm *v95;
  uint64_t v96;
  llvm::Value *v97;
  int v98;
  uint64_t v99;
  _QWORD *v100;
  llvm::Type **v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  llvm::InlineAsm *v105;
  uint64_t FunctionType;
  uint64_t v107;
  llvm::Value *v108;
  llvm::Value *v109;
  llvm *v110;
  uint64_t v111;
  llvm::Value *v112;
  llvm::LLVMContext *v113;
  llvm::Value *v114;
  unsigned int v115;
  int v116;
  llvm::Type **v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  BOOL v124;
  uint64_t v125;
  std::string::size_type v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  llvm::Value *v130;
  llvm::Constant **v131;
  _QWORD *v132;
  llvm::Type *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  char v139;
  uint64_t v140;
  uint64_t v141;
  llvm::Type **v142;
  int v143;
  llvm::Value *v144;
  llvm::Value *v145;
  int v146;
  uint64_t v147;
  llvm *v148;
  uint64_t v149;
  unint64_t v150;
  char v151;
  uint64_t v152;
  uint64_t v153;
  llvm::Value *v154;
  uint64_t v155;
  llvm::Value *v156;
  llvm::Type **v157;
  llvm::Type **v158;
  llvm::Type *v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  llvm::Value *v167;
  uint64_t v168;
  llvm::Value *v169;
  llvm::Value *v170;
  llvm::Type *v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  int v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  int v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  llvm::IRBuilderDefaultInserter *v193;
  llvm::IRBuilderDefaultInserter *v194;
  _QWORD *v195;
  llvm *v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t *v200;
  _QWORD *v201;
  unint64_t v202;
  unint64_t v203;
  uint64_t v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  _QWORD v208[3];
  int v209;
  uint64_t v210;
  uint64_t v211;
  _QWORD v212[3];
  int v213;
  uint64_t v214;
  uint64_t v215;
  _QWORD *v216;
  _QWORD v217[3];
  int v218;
  uint64_t v219;
  uint64_t v220;
  _QWORD v221[3];
  int v222;
  uint64_t v223;
  uint64_t v224;
  _QWORD v225[2];
  int v226;
  _QWORD v227[2];
  int v228;
  _QWORD v229[2];
  int v230;
  _QWORD v231[3];
  int v232;
  uint64_t v233;
  uint64_t v234;
  _QWORD v235[3];
  int v236;
  uint64_t v237;
  uint64_t v238;
  _QWORD *v239;
  _QWORD v240[3];
  int v241;
  uint64_t v242;
  uint64_t v243;
  _QWORD v244[3];
  int v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  _QWORD v252[3];
  int v253;
  uint64_t v254;
  uint64_t v255;
  llvm *v256[2];
  unsigned int v257;
  __int16 v258;
  _QWORD v259[2];
  uint64_t *v260[3];
  const char *v261;
  void *v262;
  uint64_t v263;
  uint64_t v264;
  __int16 v265;
  llvm *v266[2];
  unsigned int v267;
  llvm::InlineAsm *v268;
  llvm::InlineAsm *v269;
  std::string v270;
  __int16 v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t *v275;
  _QWORD *v276;
  uint64_t v277;
  int v278;
  __int16 v279;
  char v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  _QWORD v284[5];

  v284[3] = *MEMORY[0x24BDAC8D0];
  v6 = *a3;
  v265 = 261;
  v261 = "finally.end";
  v262 = (void *)11;
  v197 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v184 = *(_QWORD *)(a2 + 2008);
  v183 = *(_DWORD *)(a2 + 2640);
  *(_DWORD *)(a2 + 2640) = v183 + 1;
  v265 = 261;
  v261 = "finally.rethrow";
  v262 = (void *)15;
  v201 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v186 = *(_QWORD *)(a2 + 2008);
  v187 = *(_DWORD *)(a2 + 2640);
  *(_DWORD *)(a2 + 2640) = v187 + 1;
  v205 = v6;
  if (v6 == 90)
  {
    v188 = 0;
    v191 = 0;
    v7 = 0;
  }
  else
  {
    v270.__r_.__value_.__r.__words[0] = 0;
    v8 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
    v261 = (const char *)a2;
    v262 = (void *)(a2 + 272);
    LOBYTE(v263) = 0;
    v264 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 232);
    v270.__r_.__value_.__r.__words[0] = (std::string::size_type)sub_22E50E974((uint64_t *)&v261, v8);
    v9 = *(_QWORD *)(a1 + 2552);
    v265 = 257;
    v270.__r_.__value_.__r.__words[0] = sub_22E3C1740((uint64_t *)(a2 + 272), 49, (uint64_t)v270.__r_.__value_.__l.__data_, v9, (uint64_t)&v261);
    v10 = sub_22E58B4B0(a1 + 2488);
    v265 = 257;
    sub_22F24EEDC(a2, v10, v11, (uint64_t)&v270, 1, (uint64_t)&v261);
    v12 = *(llvm::Type **)v270.__r_.__value_.__l.__data_;
    v13 = *(unsigned __int8 *)(a2 + 130);
    v261 = "sync.arg";
    v265 = 259;
    v14 = sub_22E4D83CC(a2, v12, v13, (uint64_t)&v261, 0, 0);
    v7 = 0;
    if (v14 <= 7)
      v16 = 0;
    else
      v16 = v14 & 0xFFFFFFFFFFFFFFF8;
    if (v14 <= 7)
      v17 = 0;
    else
      v17 = v15 & 0xFFFFFFFFFFFFFFF8;
    if (v14 >= 8)
      v7 = 1 << (v15 & 7 | (8 * (v14 & 7)));
    v188 = v17;
    v191 = v16;
    v252[0] = v16;
    v252[1] = v17;
    v252[2] = v7;
    v253 = 0;
    v255 = 0;
    v254 = 0;
    sub_22E3BEDDC(a2 + 272, (llvm::Type **)v270.__r_.__value_.__l.__data_, (uint64_t)v252);
  }
  v18 = *(llvm::Type **)(a1 + 2840);
  v19 = *(unsigned __int8 *)(a2 + 130);
  v261 = "exceptiondata.ptr";
  v265 = 259;
  v20 = sub_22E4D83CC(a2, v18, v19, (uint64_t)&v261, 0, 0);
  v22 = 0;
  if (v20 <= 7)
    v23 = 0;
  else
    v23 = v20 & 0xFFFFFFFFFFFFFFF8;
  v24 = v21 & 0xFFFFFFFFFFFFFFF8;
  if (v20 <= 7)
    v24 = 0;
  v196 = (llvm *)v23;
  *(_QWORD *)&v249 = v23;
  *((_QWORD *)&v249 + 1) = v24;
  if (v20 >= 8)
    v22 = 1 << (v21 & 7 | (8 * (v20 & 7)));
  *(_QWORD *)&v250 = v22;
  DWORD2(v250) = 0;
  v251 = 0uLL;
  v261 = (const char *)a2;
  v262 = &v264;
  v263 = 0x1400000000;
  v266[1] = 0;
  v266[0] = 0;
  v267 = 0;
  v256[1] = 0;
  v256[0] = 0;
  v257 = 0;
  v25 = (const char *)a2;
  v26 = *(uint64_t **)(a2 + 1736);
  if (v26)
  {
    if ((*(_DWORD *)(a2 + 1760) & 3) != 0)
      v26 = 0;
    v260[0] = v26;
    v25 = (const char *)a2;
    if (v26)
    {
      sub_22E58B7DC((uint64_t)&v270, (uint64_t)v256, (uint64_t *)v260);
      v25 = v261;
    }
  }
  v193 = (llvm::IRBuilderDefaultInserter *)a3;
  v195 = (_QWORD *)a1;
  v199 = a2;
  v27 = *((_QWORD *)v25 + 328);
  if (v27 >= 8)
  {
    v260[0] = (uint64_t *)(v27 & 0xFFFFFFFFFFFFFFF8);
    sub_22E58B7DC((uint64_t)&v270, (uint64_t)v256, (uint64_t *)v260);
    v25 = v261;
  }
  v28 = *(_QWORD *)(*((_QWORD *)v25 + 203) + 80);
  if (v28)
    v29 = v28 - 24;
  else
    v29 = 0;
  v30 = v29 + 40;
  v31 = *(_QWORD *)(v29 + 48);
  v32 = v257;
  v33 = v256[0];
  if (v31 != v29 + 40)
  {
    v44 = v257 - 1;
    while (1)
    {
      v45 = v31 ? v31 - 24 : 0;
      if (*(_BYTE *)(v45 + 16) == 59)
      {
        if (!(_DWORD)v32)
          goto LABEL_54;
        v46 = v44 & ((v45 >> 4) ^ (v45 >> 9));
        v47 = *((_QWORD *)v33 + v46);
        if (v45 != v47)
          break;
      }
LABEL_57:
      v31 = *(_QWORD *)(v31 + 8);
      if (v31 == v30)
        goto LABEL_30;
    }
    v48 = 1;
    while (v47 != -4096)
    {
      v49 = v46 + v48++;
      v46 = v49 & v44;
      v47 = *((_QWORD *)v33 + v46);
      if (v45 == v47)
        goto LABEL_57;
    }
LABEL_54:
    v50 = v263;
    if (v263 >= (unint64_t)HIDWORD(v263))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v50 = v263;
    }
    *((_QWORD *)v262 + v50) = v45;
    LODWORD(v263) = v263 + 1;
    goto LABEL_57;
  }
LABEL_30:
  v198 = a1 + 2488;
  llvm::deallocate_buffer(v33, (void *)(8 * v32));
  v35 = v263;
  v36 = v199;
  if ((_DWORD)v263)
  {
    v37 = *(_QWORD *)(v199 + 1624);
    v38 = v37 + 72;
    v39 = *(_QWORD *)(v37 + 80);
    if (v39 != v37 + 72)
    {
      do
      {
        v40 = (llvm *)(v39 - 24);
        if (!v39)
          v40 = 0;
        v256[0] = v40;
        sub_22F278BC8((uint64_t)&v270, (uint64_t)v266, (uint64_t *)v256);
        v39 = *(_QWORD *)(v39 + 8);
      }
      while (v39 != v38);
      v35 = v263;
    }
    v270.__r_.__value_.__r.__words[0] = (std::string::size_type)&v270.__r_.__value_.__r.__words[2];
    v270.__r_.__value_.__l.__size_ = 0x1000000000;
    sub_22E4639CC((uint64_t)&v270, v35, 0);
    if ((_DWORD)v263)
    {
      v41 = 0;
      v42 = 8 * v263;
      do
      {
        *(_QWORD *)(v270.__r_.__value_.__r.__words[0] + v41) = **(_QWORD **)((char *)v262 + v41);
        v41 += 8;
      }
      while (v42 != v41);
    }
    llvm::FunctionType::get();
    if ((std::string::size_type *)v270.__r_.__value_.__l.__data_ != &v270.__r_.__value_.__r.__words[2])
      free(v270.__r_.__value_.__l.__data_);
    memset(&v270, 0, sizeof(v270));
    v43 = v263;
    if ((_DWORD)v263)
    {
      v51 = 0;
      do
      {
        if (v51)
          std::string::push_back(&v270, 44);
        std::string::append(&v270, "*m");
        ++v51;
      }
      while (v43 != v51);
    }
    v268 = (llvm::InlineAsm *)llvm::InlineAsm::get();
    if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v270.__r_.__value_.__l.__data_);
    memset(&v270, 0, sizeof(v270));
    v52 = v263;
    if ((_DWORD)v263)
    {
      v53 = 0;
      do
      {
        if (v53)
          std::string::push_back(&v270, 44);
        std::string::append(&v270, "=*m");
        ++v53;
      }
      while (v52 != v53);
    }
    v269 = (llvm::InlineAsm *)llvm::InlineAsm::get();
    if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v270.__r_.__value_.__l.__data_);
  }
  Int1Ty = (llvm::Type *)llvm::Type::getInt1Ty(*(llvm::Type **)(v199 + 336), v34);
  v270.__r_.__value_.__r.__words[0] = (std::string::size_type)"_call_try_exit";
  v271 = 259;
  v55 = sub_22E4D83CC(v199, Int1Ty, 1uLL, (uint64_t)&v270, 0, 0);
  v57 = 0;
  if (v55 <= 7)
    v58 = 0;
  else
    v58 = v55 & 0xFFFFFFFFFFFFFFF8;
  v59 = v56 & 0xFFFFFFFFFFFFFFF8;
  if (v55 <= 7)
    v59 = 0;
  v202 = v59;
  v203 = v58;
  if (v55 >= 8)
    v57 = 1 << (v56 & 7 | (8 * (v55 & 7)));
  v204 = v57;
  v60 = sub_22E4899EC(v199 + 1984, 3u, 168);
  *(_QWORD *)v60 = off_24FA65308;
  *((_QWORD *)v60 + 1) = v193;
  *((_QWORD *)v60 + 2) = v191;
  *((_QWORD *)v60 + 3) = v188;
  *((_QWORD *)v60 + 4) = v7;
  *((_DWORD *)v60 + 10) = 0;
  *((_QWORD *)v60 + 6) = 0;
  *((_QWORD *)v60 + 7) = 0;
  *((_QWORD *)v60 + 8) = v203;
  *((_QWORD *)v60 + 9) = v202;
  *((_QWORD *)v60 + 10) = v204;
  *((_DWORD *)v60 + 22) = 0;
  *((_QWORD *)v60 + 12) = 0;
  *((_QWORD *)v60 + 13) = 0;
  v61 = v250;
  *((_OWORD *)v60 + 7) = v249;
  *((_OWORD *)v60 + 8) = v61;
  *((_OWORD *)v60 + 9) = v251;
  *((_QWORD *)v60 + 20) = v198;
  v62 = sub_22E58B544(v198);
  v256[0] = v196;
  v271 = 257;
  sub_22F24EEDC(v199, v62, v63, (uint64_t)v256, 1, (uint64_t)&v270);
  llvm::Type::getInt32Ty(*(llvm::Type **)(v199 + 336), v64);
  v260[0] = (uint64_t *)llvm::ConstantInt::get();
  v260[1] = v260[0];
  v260[2] = v260[0];
  v248 = 0;
  v65 = *(_QWORD *)(a1 + 2840);
  v270.__r_.__value_.__r.__words[0] = (std::string::size_type)"setjmp_buffer";
  v271 = 259;
  v248 = sub_22E42F314((uint64_t *)(v199 + 272), v65, (uint64_t *)v196, v260, 3, (uint64_t)&v270);
  v66 = sub_22E58B5E0(v198);
  v270.__r_.__value_.__r.__words[0] = (std::string::size_type)"setjmp_result";
  v271 = 259;
  v68 = sub_22F24EEDC(v199, v66, v67, (uint64_t)&v248, 1, (uint64_t)&v270);
  llvm::Value::getContext(v68);
  *((_QWORD *)v68 + 8) = llvm::AttributeList::addAttributeAtIndex();
  v270.__r_.__value_.__r.__words[0] = (std::string::size_type)"try";
  v271 = 259;
  v69 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v270.__r_.__value_.__r.__words[0] = (std::string::size_type)"try.handler";
  v271 = 259;
  v70 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v270.__r_.__value_.__r.__words[0] = (std::string::size_type)"did_catch_exception";
  v271 = 259;
  NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)v68, v71);
  v73 = sub_22E3C18F4(v199 + 272, 33, (uint64_t *)v68, NullValue, (uint64_t)&v270);
  v74 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x23489C09C](v74, v70, v69, v73, 0);
  v271 = 257;
  sub_22E3C12C8((uint64_t *)(v199 + 272), v74, (uint64_t)&v270);
  sub_22E5ED9B4((_QWORD *)v199, v69, 0);
  True = (llvm::Type **)llvm::ConstantInt::getTrue();
  v244[0] = v203;
  v244[1] = v202;
  v76 = v204;
  v244[2] = v204;
  v245 = 0;
  v247 = 0;
  v246 = 0;
  v200 = (uint64_t *)(v199 + 272);
  sub_22E3BEDDC(v199 + 272, True, (uint64_t)v244);
  v77 = 24;
  if (v205 == 90)
    v77 = 16;
  sub_22E5E5158(v199, *(unsigned __int8 **)((char *)v193 + v77), 0, 0);
  v78 = *(_QWORD *)(v199 + 320);
  v192 = *(_QWORD *)(v199 + 328);
  *(_QWORD *)(v199 + 320) = 0;
  *(_QWORD *)(v199 + 328) = 0;
  sub_22E5ED9B4((_QWORD *)v199, v70, 0);
  v79 = v263;
  if ((_DWORD)v263)
  {
    v104 = (uint64_t)v261;
    v105 = v269;
    if (v269)
    {
      FunctionType = llvm::InlineAsm::getFunctionType(v269);
      v79 = v263;
    }
    else
    {
      FunctionType = 0;
    }
    v271 = 257;
    v144 = sub_22F24EEDC(v104, FunctionType, v105, (uint64_t)v262, v79, (uint64_t)&v270);
    if ((_DWORD)v263)
    {
      v145 = v144;
      v146 = 0;
      v147 = 8 * v263;
      do
      {
        llvm::Attribute::get();
        LODWORD(v270.__r_.__value_.__l.__data_) = v146;
        llvm::Value::getContext(v145);
        *((_QWORD *)v145 + 8) = llvm::AttributeList::addParamAttribute();
        ++v146;
        v147 -= 8;
      }
      while (v147);
    }
  }
  if (v205 != 90 || !*((_WORD *)v193 + 6))
  {
    False = (llvm::Type **)llvm::ConstantInt::getFalse();
    v240[0] = v203;
    v240[1] = v202;
    v240[2] = v204;
    v241 = 0;
    v243 = 0;
    v242 = 0;
    v81 = (uint64_t *)(v199 + 272);
    sub_22E3BEDDC((uint64_t)v200, False, (uint64_t)v240);
    v185 = 0;
    v181 = 0;
    v182 = 0;
    v239 = v201;
    v82 = &v239;
LABEL_85:
    v82[1] = v186;
    *((_DWORD *)v82 + 4) = v187;
    sub_22E48BA00((_QWORD *)v36, (uint64_t)v82);
    goto LABEL_86;
  }
  v111 = sub_22E58B6AC(v198);
  v256[0] = v196;
  v270.__r_.__value_.__r.__words[0] = (std::string::size_type)"caught";
  v271 = 259;
  v114 = sub_22F24EEDC(v199, v111, v112, (uint64_t)v256, 1, (uint64_t)&v270);
  v115 = *(_DWORD *)(v199 + 2800);
  if (v115 >= *(_DWORD *)(v199 + 2804))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v115 = *(_DWORD *)(v199 + 2800);
  }
  *(_QWORD *)(*(_QWORD *)(v199 + 2792) + 8 * v115) = v114;
  ++*(_DWORD *)(v199 + 2800);
  if (((*((unsigned __int16 *)v193 + 6) | (*((unsigned __int8 *)v193 + 14) << 16)) & 0x10000) != 0
    && *((_QWORD *)v193 + *((unsigned __int16 *)v193 + 6) + 3))
  {
    v159 = *(llvm::Type **)v114;
    v160 = *(unsigned __int8 *)(v199 + 130);
    v270.__r_.__value_.__r.__words[0] = (std::string::size_type)"propagating_exception";
    v271 = 259;
    v161 = sub_22E4D83CC(v199, v159, v160, (uint64_t)&v270, 0, 0);
    v163 = 0;
    if (v161 <= 7)
      v164 = 0;
    else
      v164 = v161 & 0xFFFFFFFFFFFFFFF8;
    v165 = v162 & 0xFFFFFFFFFFFFFFF8;
    if (v161 <= 7)
      v165 = 0;
    v182 = v165;
    if (v161 >= 8)
      v163 = 1 << (v162 & 7 | (8 * (v161 & 7)));
    v185 = v164;
    v235[0] = v164;
    v235[1] = v165;
    v181 = v163;
    v235[2] = v163;
    v236 = 0;
    v238 = 0;
    v237 = 0;
    sub_22E3BEDDC((uint64_t)v200, (llvm::Type **)v114, (uint64_t)v235);
    v166 = sub_22E58B544(v198);
    v256[0] = v196;
    v271 = 257;
    sub_22F24EEDC(v199, v166, v167, (uint64_t)v256, 1, (uint64_t)&v270);
    v168 = sub_22E58B5E0(v198);
    v270.__r_.__value_.__r.__words[0] = (std::string::size_type)"setjmp.result";
    v271 = 259;
    v170 = sub_22F24EEDC(v199, v168, v169, (uint64_t)&v248, 1, (uint64_t)&v270);
    llvm::Value::getContext(v170);
    *((_QWORD *)v170 + 8) = llvm::AttributeList::addAttributeAtIndex();
    v270.__r_.__value_.__r.__words[0] = (std::string::size_type)"did_catch_exception";
    v271 = 259;
    v172 = llvm::Constant::getNullValue(*(llvm::Constant **)v170, v171);
    v173 = sub_22E3C18F4((uint64_t)v200, 33, (uint64_t *)v170, v172, (uint64_t)&v270);
    v270.__r_.__value_.__r.__words[0] = (std::string::size_type)"catch";
    v271 = 259;
    v174 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v270.__r_.__value_.__r.__words[0] = (std::string::size_type)"catch_for_catch";
    v271 = 259;
    v175 = operator new();
    llvm::BasicBlock::BasicBlock();
    v176 = llvm::User::operator new((llvm::User *)0x40);
    v178 = (_QWORD *)v175;
    v177 = v173;
    v116 = 1;
    MEMORY[0x23489C09C](v176, v175, v174, v177, 0);
    v271 = 257;
    sub_22E3C12C8(v200, v176, (uint64_t)&v270);
    sub_22E5ED9B4((_QWORD *)v199, v174, 0);
  }
  else
  {
    v116 = 0;
    v185 = 0;
    v181 = 0;
    v182 = 0;
    v178 = 0;
  }
  llvm::Type::getInt1Ty(*(llvm::Type **)(v199 + 336), v113);
  v117 = (llvm::Type **)llvm::ConstantInt::get();
  v231[0] = v203;
  v231[1] = v202;
  v231[2] = v204;
  v232 = 0;
  v234 = 0;
  v233 = 0;
  sub_22E3BEDDC((uint64_t)v200, v117, (uint64_t)v231);
  if (*((_WORD *)v193 + 6))
  {
    v179 = v116;
    v180 = (uint64_t)v114;
    v190 = v78;
    v118 = (char *)v193 + 24;
    v119 = 8 * *((unsigned __int16 *)v193 + 6);
    while (1)
    {
      v120 = *(_QWORD *)v118;
      v121 = *(_QWORD *)(*(_QWORD *)v118 + 8);
      if (!v121)
        break;
      v122 = *(_QWORD *)(*(_QWORD *)(v121 + 48) & 0xFFFFFFFFFFFFFFF0);
      if (!v122 || *(_BYTE *)(v122 + 16) != 32)
        v122 = sub_22F10CF48(v122);
      if (sub_22E5761BC(v122) || sub_22E491464(v122))
        break;
      v123 = *(_QWORD *)(*(_QWORD *)(v122 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (v123)
        v124 = *(unsigned __int8 *)(v123 + 16) - 35 > 0xFFFFFFFD;
      else
        v124 = 0;
      v207 = v119;
      if (!v124)
        v123 = sub_22F10CF48(v123);
      v125 = sub_22F272660(v123);
      v259[0] = sub_22E588CAC((uint64_t)v195, v199, v125);
      v259[1] = v114;
      v126 = v195[319];
      v270.__r_.__value_.__r.__words[0] = v195[347];
      v270.__r_.__value_.__l.__size_ = v126;
      v127 = v195[312];
      v128 = llvm::FunctionType::get();
      v129 = sub_22E633A04(v127, v128, "objc_exception_match", 0x14uLL, 0, 0, 0);
      v270.__r_.__value_.__r.__words[0] = (std::string::size_type)"match";
      v271 = 259;
      v131 = (llvm::Constant **)sub_22F24EEDC(v199, v129, v130, (uint64_t)v259, 2, (uint64_t)&v270);
      v270.__r_.__value_.__r.__words[0] = (std::string::size_type)"match";
      v271 = 259;
      v132 = (_QWORD *)operator new();
      llvm::BasicBlock::BasicBlock();
      v270.__r_.__value_.__r.__words[0] = (std::string::size_type)"catch.next";
      v271 = 259;
      v194 = (llvm::IRBuilderDefaultInserter *)operator new();
      llvm::BasicBlock::BasicBlock();
      v256[0] = (llvm *)"matched";
      v258 = 259;
      v134 = llvm::Constant::getNullValue(*v131, v133);
      v135 = sub_22E3C18F4((uint64_t)v200, 33, (uint64_t *)v131, v134, (uint64_t)v256);
      v136 = llvm::User::operator new((llvm::User *)0x40);
      MEMORY[0x23489C09C](v136, v132, v194, v135, 0);
      v271 = 257;
      sub_22E3C12C8(v200, v136, (uint64_t)&v270);
      sub_22E5ED9B4((_QWORD *)v199, v132, 0);
      v137 = *(_QWORD *)(v199 + 1992) - *(_QWORD *)(v199 + 2000);
      v138 = *(_QWORD *)(v199 + 2312);
      v139 = *(_BYTE *)(v199 + 2893);
      *(_BYTE *)(v199 + 2893) = 0;
      v140 = *(_QWORD *)(v199 + 2872);
      *(_QWORD *)(v199 + 2872) = v137;
      sub_22F2596F0((_QWORD *)v199, v121);
      v141 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(v199 + 144) + 280), *(llvm::LLVMContext **)(v121 + 48));
      v271 = 257;
      v142 = (llvm::Type **)sub_22E3C1740(v200, 49, v180, v141, (uint64_t)&v270);
      sub_22E59635C((uint64_t)v195, v199, v142, v121);
      sub_22E5E5158(v199, *(unsigned __int8 **)(v120 + 16), 0, 0);
      *(_BYTE *)(v199 + 2893) = v139;
      sub_22E48B274((_QWORD *)v199, v137, v138, 0, 0);
      *(_QWORD *)(v199 + 2872) = v140;
      v227[0] = v197;
      v227[1] = v184;
      v228 = v183;
      sub_22E48BA00((_QWORD *)v199, (uint64_t)v227);
      v114 = (llvm::Value *)v180;
      sub_22E5ED9B4((_QWORD *)v199, v194, 0);
      v118 += 8;
      v119 = v207 - 8;
      if (v207 == 8)
      {
        v143 = 1;
        v36 = v199;
        goto LABEL_163;
      }
    }
    v36 = v199;
    v149 = *(_QWORD *)(v199 + 1992) - *(_QWORD *)(v199 + 2000);
    v150 = *(_QWORD *)(v199 + 2312);
    v151 = *(_BYTE *)(v199 + 2893);
    *(_BYTE *)(v199 + 2893) = 0;
    v152 = *(_QWORD *)(v199 + 2872);
    *(_QWORD *)(v199 + 2872) = v149;
    if (v121)
    {
      sub_22F2596F0((_QWORD *)v199, v121);
      sub_22E59635C((uint64_t)v195, v199, (llvm::Type **)v114, v121);
    }
    sub_22E5E5158(v199, *(unsigned __int8 **)(v120 + 16), 0, 0);
    *(_BYTE *)(v199 + 2893) = v151;
    sub_22E48B274((_QWORD *)v199, v149, v150, 0, 0);
    *(_QWORD *)(v199 + 2872) = v152;
    v229[0] = v197;
    v229[1] = v184;
    v230 = v183;
    sub_22E48BA00((_QWORD *)v199, (uint64_t)v229);
    v143 = 0;
LABEL_163:
    v76 = v204;
    v78 = v190;
    v116 = v179;
  }
  else
  {
    v143 = 1;
  }
  --*(_DWORD *)(v36 + 2800);
  if (*((_QWORD *)v114 + 1))
  {
    if (!v143)
      goto LABEL_174;
LABEL_177:
    v225[0] = v201;
    v225[1] = v186;
    v226 = v187;
    sub_22E48BA00((_QWORD *)v36, (uint64_t)v225);
    if (!v116)
      goto LABEL_175;
LABEL_178:
    sub_22E5ED9B4((_QWORD *)v36, v178, 0);
    v155 = sub_22E58B6AC(v198);
    v256[0] = v196;
    v270.__r_.__value_.__r.__words[0] = (std::string::size_type)"caught";
    v271 = 259;
    v157 = (llvm::Type **)sub_22F24EEDC(v36, v155, v156, (uint64_t)v256, 1, (uint64_t)&v270);
    v221[0] = v185;
    v221[1] = v182;
    v221[2] = v181;
    v222 = 0;
    v223 = 0;
    v224 = 0;
    v81 = (uint64_t *)(v199 + 272);
    sub_22E3BEDDC((uint64_t)v200, v157, (uint64_t)v221);
    v158 = (llvm::Type **)llvm::ConstantInt::getFalse();
    v217[0] = v203;
    v217[1] = v202;
    v217[2] = v76;
    v218 = 0;
    v219 = 0;
    v220 = 0;
    sub_22E3BEDDC((uint64_t)v200, v158, (uint64_t)v217);
    v216 = v201;
    v82 = &v216;
    goto LABEL_85;
  }
  llvm::Instruction::eraseFromParent(v114);
  if (v143)
    goto LABEL_177;
LABEL_174:
  if (v116)
    goto LABEL_178;
LABEL_175:
  v81 = (uint64_t *)(v199 + 272);
LABEL_86:
  if ((_DWORD)v263)
  {
    v189 = v78;
    v83 = *(_QWORD *)(*((_QWORD *)v261 + 18) + 232);
    v270.__r_.__value_.__r.__words[0] = (std::string::size_type)&v270.__r_.__value_.__r.__words[2];
    v270.__r_.__value_.__l.__size_ = 0x200000000;
    v274 = v83;
    v275 = &v283;
    v276 = v284;
    v277 = 0;
    v278 = 0;
    v279 = 512;
    v280 = 7;
    v272 = 0;
    v273 = 0;
    v281 = 0;
    v282 = 0;
    v283 = MEMORY[0x24BED83B8] + 16;
    v284[0] = &off_24FA66C70;
    v284[1] = 0;
    v284[2] = v261;
    v84 = *((_QWORD *)v261 + 203);
    v85 = *(_QWORD *)(v84 + 80);
    v206 = v84 + 72;
    if (v85 != v84 + 72)
    {
      while (1)
      {
        if (v85)
          v86 = v85 - 24;
        else
          v86 = 0;
        if (!v267)
          goto LABEL_99;
        v87 = ((v86 >> 4) ^ (v86 >> 9)) & (v267 - 1);
        v88 = *((_QWORD *)v266[0] + v87);
        if (v86 != v88)
          break;
LABEL_93:
        v85 = *(_QWORD *)(v85 + 8);
        if (v85 == v206)
          goto LABEL_119;
      }
      v89 = 1;
      while (v88 != -4096)
      {
        v90 = v87 + v89++;
        v87 = v90 & (v267 - 1);
        v88 = *((_QWORD *)v266[0] + v87);
        if (v86 == v88)
          goto LABEL_93;
      }
LABEL_99:
      for (i = *(_QWORD *)(v86 + 48); i != v86 + 40; i = *(_QWORD *)(i + 8))
      {
        if (i)
          v92 = i - 24;
        else
          v92 = 0;
        v93 = *(unsigned __int8 *)(v92 + 16);
        if (v93 != 33)
        {
          if (v93 != 84)
            continue;
          v94 = *(_QWORD *)(v92 - 32);
          if (v94)
          {
            if (!*(_BYTE *)(v94 + 16)
              && *(_QWORD *)(v94 + 24) == *(_QWORD *)(v92 + 72)
              && (*(_BYTE *)(v94 + 33) & 0x20) != 0)
            {
              continue;
            }
          }
        }
        if ((llvm::AttributeList::hasFnAttr() & 1) == 0 && (llvm::CallBase::hasFnAttrOnCalledFunction() & 1) == 0)
        {
          sub_22E3CB840((uint64_t)&v270, v86, i);
          v95 = v268;
          v96 = v268 ? llvm::InlineAsm::getFunctionType(v268) : 0;
          v258 = 257;
          v97 = sub_22E462B78((uint64_t *)&v270, v96, (uint64_t)v95, (uint64_t)v262, v263, (uint64_t)v256, 0);
          llvm::Value::getContext(v97);
          *((_QWORD *)v97 + 8) = llvm::AttributeList::addAttributeAtIndex();
          *((_WORD *)v97 + 9) = *((_WORD *)v97 + 9) & 0xF003 | (4 * *((_WORD *)v261 + 68));
          if ((_DWORD)v263)
          {
            v98 = 0;
            v99 = 8 * v263;
            do
            {
              llvm::Attribute::get();
              LODWORD(v256[0]) = v98;
              llvm::Value::getContext(v97);
              *((_QWORD *)v97 + 8) = llvm::AttributeList::addParamAttribute();
              ++v98;
              v99 -= 8;
            }
            while (v99);
          }
        }
      }
      goto LABEL_93;
    }
LABEL_119:
    llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v284);
    llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v283);
    if ((std::string::size_type *)v270.__r_.__value_.__l.__data_ != &v270.__r_.__value_.__r.__words[2])
      free(v270.__r_.__value_.__l.__data_);
    v36 = v199;
    v81 = (uint64_t *)(v199 + 272);
    v76 = v204;
    v78 = v189;
  }
  v100 = (_QWORD *)(v36 + 320);
  if (v78)
  {
    sub_22E3CB840((uint64_t)v81, v78, v192);
    if (*v100)
    {
      v101 = (llvm::Type **)llvm::ConstantInt::getTrue();
      v212[0] = v203;
      v212[1] = v202;
      v212[2] = v76;
      v213 = 0;
      v214 = 0;
      v215 = 0;
      sub_22E3BEDDC((uint64_t)v81, v101, (uint64_t)v212);
    }
  }
  else
  {
    *v100 = 0;
    *(_QWORD *)(v36 + 328) = 0;
  }
  sub_22E48A190(v36, 0);
  sub_22E5ED9B4((_QWORD *)v36, v197, 1);
  v103 = *(_QWORD *)(v36 + 320);
  v102 = *(_QWORD *)(v36 + 328);
  *v100 = 0;
  *(_QWORD *)(v36 + 328) = 0;
  sub_22E5ED9B4((_QWORD *)v36, v201, 1);
  if (*(_QWORD *)(v36 + 320))
  {
    if (v185)
    {
      v208[0] = v185;
      v208[1] = v182;
      v208[2] = v181;
      v209 = 0;
      v210 = 0;
      v211 = 0;
      v271 = 257;
      v148 = (llvm *)sub_22E3C2A7C(v81, (uint64_t)v208, (uint64_t)&v270);
    }
    else
    {
      v107 = sub_22E58B6AC(v198);
      v109 = v108;
      if ((BYTE8(v250) & 3) != 0)
        v110 = (llvm *)sub_22F28ABCC(&v249, (_QWORD *)v36);
      else
        v110 = (llvm *)v249;
      v256[0] = v110;
      v271 = 257;
      v148 = sub_22F24EEDC(v36, v107, v109, (uint64_t)v256, 1, (uint64_t)&v270);
    }
    v256[0] = v148;
    v153 = sub_22E58B748(v198);
    v271 = 257;
    sub_22F24EEDC(v36, v153, v154, (uint64_t)v256, 1, (uint64_t)&v270);
    sub_22F24866C((uint64_t)v81);
    if (v103)
      goto LABEL_128;
  }
  else if (v103)
  {
LABEL_128:
    sub_22E3CB840((uint64_t)v81, v103, v102);
    goto LABEL_168;
  }
  *v100 = 0;
  *(_QWORD *)(v36 + 328) = 0;
LABEL_168:
  llvm::deallocate_buffer(v266[0], (void *)(8 * v267));
  if (v262 != &v264)
    free(v262);
}

uint64_t sub_22E58B4B0(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::FunctionType::get();
  return sub_22E633A04(*(_QWORD *)(a1 + 8), v2, "objc_sync_enter", 0xFuLL, 0, 0, 0);
}

uint64_t sub_22E58B544(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  llvm::PointerType::get();
  v2 = *(_QWORD *)(a1 + 8);
  v3 = llvm::FunctionType::get();
  return sub_22E633A04(v2, v3, "objc_exception_try_enter", 0x18uLL, 0, 0, 0);
}

uint64_t sub_22E58B5E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  llvm::PointerType::get();
  v2 = *(_QWORD *)(a1 + 8);
  v3 = llvm::FunctionType::get();
  v4 = llvm::AttributeList::get();
  return sub_22E633A04(v2, v3, "_setjmp", 7uLL, v4, 0, 0);
}

uint64_t sub_22E58B6AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  llvm::PointerType::get();
  v2 = *(_QWORD *)(a1 + 8);
  v3 = llvm::FunctionType::get();
  return sub_22E633A04(v2, v3, "objc_exception_extract", 0x16uLL, 0, 0, 0);
}

uint64_t sub_22E58B748(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::FunctionType::get();
  return sub_22E633A04(*(_QWORD *)(a1 + 8), v2, "objc_exception_throw", 0x14uLL, 0, 0, 0);
}

uint64_t sub_22E58B7DC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t *v7;
  unsigned int v8;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t *v12;

  v12 = 0;
  result = sub_22E58B8E0(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
  v7 = v12;
  v8 = *(_DWORD *)(a2 + 16);
  if ((result & 1) != 0)
  {
    v10 = 0;
    goto LABEL_8;
  }
  v9 = *(_DWORD *)(a2 + 8);
  if (4 * v9 + 4 < 3 * v8)
  {
    if (v8 + ~v9 - *(_DWORD *)(a2 + 12) > v8 >> 3)
      goto LABEL_5;
  }
  else
  {
    v8 *= 2;
  }
  sub_22E58B974(a2, v8);
  v12 = 0;
  result = sub_22E58B8E0(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
  v7 = v12;
LABEL_5:
  ++*(_DWORD *)(a2 + 8);
  if (*v7 != -4096)
    --*(_DWORD *)(a2 + 12);
  *v7 = *a3;
  v8 = *(_DWORD *)(a2 + 16);
  v10 = 1;
LABEL_8:
  v11 = *(_QWORD *)a2 + 8 * v8;
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_22E58B8E0(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 8 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v10 = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v8 = v6;
        v13 = v5 + v9++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 8 * (v13 & v4));
        v7 = *v6;
        v10 = 1;
        if (*v6 == a3)
          goto LABEL_7;
      }
      v10 = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    v10 = 0;
  }
LABEL_7:
  *a4 = v6;
  return v10;
}

_QWORD *sub_22E58B974(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](8 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F278B24(a1, v4, &v4[v3]);
    return (_QWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(8 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 8 * v10;
      do
      {
        *result++ = -4096;
        v11 -= 8;
      }
      while (v11);
    }
  }
  return result;
}

_QWORD *sub_22E58BA34(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](8 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F278D90(a1, v4, &v4[v3]);
    return (_QWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(8 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 8 * v10;
      do
      {
        *result++ = -4096;
        v11 -= 8;
      }
      while (v11);
    }
  }
  return result;
}

llvm::Value *sub_22E58BAF4(uint64_t a1, _QWORD *a2, char a3)
{
  _QWORD *v6;
  _QWORD *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  llvm::Value *v15;
  llvm::Value *v16;
  _OWORD *v17;
  uint64_t v18;
  llvm::Value *result;
  llvm::LLVMContext *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  llvm::Type **v28;
  llvm::LLVMContext *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  __int128 v35;
  uint64_t v36;
  llvm::Value *v37;
  _OWORD v38[3];
  _QWORD v39[3];
  int v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[3];
  int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[4];
  __int16 v48;
  _OWORD v49[3];
  _QWORD v50[4];
  __int16 v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v6 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v50[0] = "finally.no_call_exit";
  v51 = 259;
  v7 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v8 = *(_OWORD *)(a1 + 80);
  v49[0] = *(_OWORD *)(a1 + 64);
  v49[1] = v8;
  v49[2] = *(_OWORD *)(a1 + 96);
  v48 = 257;
  v9 = sub_22E3C2A7C(a2 + 34, (uint64_t)v49, (uint64_t)v47);
  v10 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x23489C09C](v10, v6, v7, v9, 0);
  v51 = 257;
  sub_22E3C12C8(a2 + 34, v10, (uint64_t)v50);
  sub_22E5ED9B4(a2, v6, 0);
  v11 = *(_QWORD *)(a1 + 160);
  v50[0] = llvm::PointerType::get();
  v12 = *(_QWORD *)(v11 + 8);
  v13 = llvm::FunctionType::get();
  v14 = sub_22E633A04(v12, v13, "objc_exception_try_exit", 0x17uLL, 0, 0, 0);
  v16 = v15;
  v17 = (_OWORD *)(a1 + 112);
  if ((*(_BYTE *)(a1 + 136) & 3) != 0)
    v18 = sub_22F28ABCC(v17, a2);
  else
    v18 = *(_QWORD *)v17;
  v47[0] = v18;
  v51 = 257;
  sub_22F24EEDC((uint64_t)a2, v14, v16, (uint64_t)v47, 1, (uint64_t)v50);
  result = (llvm::Value *)sub_22E5ED9B4(a2, v7, 0);
  v21 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)v21 == 90)
  {
    if (((*(unsigned __int16 *)(v21 + 12) | (*(unsigned __int8 *)(v21 + 14) << 16)) & 0x10000) != 0)
    {
      v22 = *(_QWORD *)(v21 + 8 * (*(unsigned __int16 *)(v21 + 12) + 1) + 16);
      if (v22)
      {
        if ((a3 & 1) == 0)
        {
          v23 = sub_22E48B6FC((uint64_t)a2, v20);
          v25 = 0;
          v26 = v23 & 0xFFFFFFFFFFFFFFF8;
          if (v23 <= 7)
            v26 = 0;
          v27 = v24 & 0xFFFFFFFFFFFFFFF8;
          if (v23 <= 7)
            v27 = 0;
          v43[0] = v26;
          v43[1] = v27;
          if (v23 >= 8)
            v25 = 1 << (v24 & 7 | (8 * (v23 & 7)));
          v43[2] = v25;
          v44 = 0;
          v45 = 0;
          v46 = 0;
          v51 = 257;
          v28 = (llvm::Type **)sub_22E3C2A7C(a2 + 34, (uint64_t)v43, (uint64_t)v50);
          sub_22E5E5158((uint64_t)a2, *(unsigned __int8 **)(v22 + 16), 0, 0);
          if (a2[40])
          {
            v30 = sub_22E48B6FC((uint64_t)a2, v29);
            v32 = 0;
            v33 = v30 & 0xFFFFFFFFFFFFFFF8;
            if (v30 <= 7)
              v33 = 0;
            v34 = v31 & 0xFFFFFFFFFFFFFFF8;
            if (v30 <= 7)
              v34 = 0;
            v39[0] = v33;
            v39[1] = v34;
            if (v30 >= 8)
              v32 = 1 << (v31 & 7 | (8 * (v30 & 7)));
            v39[2] = v32;
            v40 = 0;
            v41 = 0;
            v42 = 0;
            return (llvm::Value *)sub_22E3BEDDC((uint64_t)(a2 + 34), v28, (uint64_t)v39);
          }
          else
          {
            return (llvm::Value *)sub_22E47E098((uint64_t)a2);
          }
        }
      }
    }
  }
  else
  {
    v35 = *(_OWORD *)(a1 + 32);
    v38[0] = *(_OWORD *)(a1 + 16);
    v38[1] = v35;
    v38[2] = *(_OWORD *)(a1 + 48);
    v51 = 257;
    v47[0] = sub_22E3C2A7C(a2 + 34, (uint64_t)v38, (uint64_t)v50);
    v36 = sub_22E58BEA4(*(_QWORD *)(a1 + 160));
    v51 = 257;
    return sub_22F24EEDC((uint64_t)a2, v36, v37, (uint64_t)v47, 1, (uint64_t)v50);
  }
  return result;
}

uint64_t sub_22E58BEA4(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::FunctionType::get();
  return sub_22E633A04(*(_QWORD *)(a1 + 8), v2, "objc_sync_exit", 0xEuLL, 0, 0, 0);
}

uint64_t sub_22E58BF38(uint64_t a1)
{
  uint64_t v2;

  llvm::PointerType::get();
  v2 = llvm::FunctionType::get();
  return sub_22E633A04(*(_QWORD *)(a1 + 8), v2, "objc_read_weak", 0xEuLL, 0, 0, 0);
}

uint64_t sub_22E58BFD0(uint64_t a1)
{
  uint64_t v2;

  llvm::PointerType::get();
  v2 = llvm::FunctionType::get();
  return sub_22E633A04(*(_QWORD *)(a1 + 8), v2, "objc_assign_weak", 0x10uLL, 0, 0, 0);
}

uint64_t sub_22E58C06C(uint64_t a1)
{
  uint64_t v2;

  llvm::PointerType::get();
  v2 = llvm::FunctionType::get();
  return sub_22E633A04(*(_QWORD *)(a1 + 8), v2, "objc_assign_global", 0x12uLL, 0, 0, 0);
}

uint64_t sub_22E58C108(uint64_t a1)
{
  uint64_t v2;

  llvm::PointerType::get();
  v2 = llvm::FunctionType::get();
  return sub_22E633A04(*(_QWORD *)(a1 + 8), v2, "objc_assign_threadlocal", 0x17uLL, 0, 0, 0);
}

uint64_t sub_22E58C1A4(uint64_t a1)
{
  uint64_t v2;

  llvm::PointerType::get();
  v2 = llvm::FunctionType::get();
  return sub_22E633A04(*(_QWORD *)(a1 + 8), v2, "objc_assign_ivar", 0x10uLL, 0, 0, 0);
}

uint64_t sub_22E58C248(uint64_t a1)
{
  uint64_t v2;

  llvm::PointerType::get();
  v2 = llvm::FunctionType::get();
  return sub_22E633A04(*(_QWORD *)(a1 + 8), v2, "objc_assign_strongCast", 0x16uLL, 0, 0, 0);
}

uint64_t sub_22E58C2E4(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::FunctionType::get();
  return sub_22E633A04(*(_QWORD *)(a1 + 8), v2, "objc_memmove_collectable", 0x18uLL, 0, 0, 0);
}

void sub_22E58C378(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t StructLayout;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL4 v23;
  int v24;
  char v26;
  unint64_t v27;
  __n128 v28;
  uint64_t v29;

  *(_DWORD *)(a1 + 40) = 0;
  v26 = 0;
  v5 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 216) + *(_QWORD *)(**(_QWORD **)(a2 + 216) - 24));
  v6 = *(_QWORD *)(a3 + 352);
  llvm::Module::getDataLayout(*(llvm::Module **)(a2 + 200));
  StructLayout = llvm::DataLayout::getStructLayout();
  v8 = *(_QWORD *)(a3 + 400);
  if (v8)
  {
    v9 = *(_QWORD *)(a3 + 392);
    v28.n128_u32[0] = 1;
    v28.n128_u64[1] = v9;
    v29 = v8;
    sub_22E467108(a1 + 32, &v28);
  }
  v10 = *(unsigned int *)(v6 + 112);
  if ((_DWORD)v10)
  {
    v11 = *(_QWORD **)(v6 + 104);
    v12 = StructLayout + 16;
    v13 = 16 * v10;
    while (1)
    {
      v14 = *(_QWORD *)((*v11 & 0xFFFFFFFFFFFFFFF8) + 48);
      v27 = *v11 & 0xFFFFFFFFFFFFFFF8;
      v28.n128_u64[0] = 0;
      v15 = sub_22F246C54((uint64_t *)(a3 + 32), &v27, &v28);
      v16 = v28.n128_u64[0];
      if (!v15)
        v16 = *(_QWORD *)(a3 + 32) + 16 * *(unsigned int *)(a3 + 48);
      v17 = **(_QWORD **)(v16 + 8);
      if ((v17 & 1) == 0)
        goto LABEL_15;
      v18 = *(_QWORD *)(v12 + 8 * (v17 >> 1));
      if ((*v11 & 2) != 0)
        break;
      v19 = *(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0);
      v20 = *(_QWORD *)(*(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF0);
      if (!v20 || *(_BYTE *)(v20 + 16) != 45)
      {
        sub_22EF5CCD0(*(_QWORD *)(a2 + 144), v19, (uint64_t)&v28);
        v22 = v28.n128_u64[0];
        v21 = *v11 & 2;
        goto LABEL_14;
      }
      sub_22E58CCCC(a1, *(_QWORD *)(*(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF0), v18, &v26, 0);
LABEL_15:
      v11 += 2;
      v13 -= 16;
      if (!v13)
        return;
    }
    v21 = *v11 & 2;
    v22 = v5 >> 3;
LABEL_14:
    v23 = v21 != 0;
    v24 = sub_22E58D1B8(a1, v14, 0);
    sub_22E58CC60(a1, v23, v24, v18, v22);
    goto LABEL_15;
  }
}

uint64_t sub_22E58C530(uint64_t a1, llvm::Type *a2)
{
  int v2;
  uint64_t NullValue;
  size_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  std::string *v38;
  unint64_t v39;
  int v40;
  llvm::LLVMContext *v41;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  int v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  std::string v52;
  void *v53;
  __int128 v54;
  _QWORD v55[3];

  v2 = (int)a2;
  v55[2] = *MEMORY[0x24BDAC8D0];
  NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)(*(_QWORD *)(a1 + 8) + 96), a2);
  v5 = *(unsigned int *)(a1 + 40);
  if (!(_DWORD)v5)
    return NullValue;
  v6 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216)
                          + *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 216) - 24));
  if ((_DWORD)v5 == 1)
  {
    v51 = v2;
    v53 = v55;
    v54 = xmmword_22F44E350;
    v7 = 1;
  }
  else
  {
    qsort(*(void **)(a1 + 32), v5, 0x18uLL, (int (__cdecl *)(const void *, const void *))sub_22E58D228);
    v7 = *(_DWORD *)(a1 + 40);
    v53 = v55;
    v54 = xmmword_22F44E350;
    if (!v7)
    {
      v9 = 0;
      goto LABEL_49;
    }
    v51 = v2;
  }
  v9 = 0;
  v10 = 0;
  v11 = v6 >> 3;
  v12 = v7 - 1;
  do
  {
    v13 = v10;
    v14 = *(_QWORD *)(a1 + 32);
    v15 = (int *)(v14 + 24 * v10);
    v16 = *v15;
    v17 = *((_QWORD *)v15 + 1);
    v18 = v10 + 1;
    if (v18 >= v7)
    {
      v23 = v17;
LABEL_18:
      v24 = v23 - v17 + *(_QWORD *)(v14 + 24 * v13 + 16);
      goto LABEL_19;
    }
    if (v16 == *(_DWORD *)(v14 + 24 * v18))
    {
      v19 = v14 + 24 * v10 + 32;
      while (v7 - 2 != v13)
      {
        v20 = *(_DWORD *)(v19 + 16);
        ++v13;
        v19 += 24;
        if (v16 != v20)
        {
          v21 = *(_QWORD *)(v19 - 24);
          v22 = *(_QWORD *)(v14 + 24 * v13 + 8);
          v18 = v13 + 1;
          v10 = v13;
          goto LABEL_16;
        }
      }
      v23 = *(_QWORD *)v19;
      LODWORD(v13) = v12;
      v10 = v12;
      goto LABEL_18;
    }
    v22 = v17;
    v21 = v17;
LABEL_16:
    v24 = v21 + *(_QWORD *)(v14 + 24 * v18 + 8) - (v17 + v22);
LABEL_19:
    if (v16 == 1)
    {
      v25 = v24 % v11;
      LOBYTE(v16) = 2;
      v24 = v24 / v11 * v11;
    }
    else
    {
      v25 = 0;
    }
    v26 = v24 / v11;
    if ((v24 / v11) >= 0x10)
    {
      do
      {
        if (v9 + 1 > *((_QWORD *)&v54 + 1))
        {
          v50 = v12;
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v12 = v50;
          v9 = v54;
        }
        *((_BYTE *)v53 + v9) = (16 * v16) | 0xF;
        v9 = v54 + 1;
        *(_QWORD *)&v54 = v54 + 1;
        LODWORD(v26) = v26 - 16;
      }
      while (v26 > 0xF);
    }
    if ((_DWORD)v26)
    {
      if (v9 + 1 > *((_QWORD *)&v54 + 1))
      {
        v27 = v12;
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v12 = v27;
        v9 = v54;
      }
      *((_BYTE *)v53 + v9) = (v26 - 1) | (16 * v16);
      v9 = v54 + 1;
      *(_QWORD *)&v54 = v54 + 1;
    }
    if (v25 >= 1)
    {
      if (v9 + 1 > *((_QWORD *)&v54 + 1))
      {
        v28 = v12;
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v12 = v28;
        v9 = v54;
      }
      *((_BYTE *)v53 + v9) = (v25 - 1) | 0x10;
      v9 = v54 + 1;
      *(_QWORD *)&v54 = v54 + 1;
    }
    ++v10;
  }
  while (v10 < v7);
  if (!v9)
  {
    v2 = v51;
    goto LABEL_49;
  }
  v2 = v51;
  while ((*((char *)v53 + v9 - 1) >> 4) - 1 <= 1u)
  {
    *(_QWORD *)&v54 = --v9;
    if (!v9)
      goto LABEL_49;
  }
  if (v9 > 3)
  {
LABEL_49:
    if (v9 + 1 > *((_QWORD *)&v54 + 1))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v9 = v54;
    }
    *((_BYTE *)v53 + v9) = 0;
    *(_QWORD *)&v54 = v54 + 1;
    memset(&v52, 0, sizeof(v52));
    v32 = v54;
    if ((_DWORD)v54)
    {
      v33 = 0;
      do
        std::string::push_back(&v52, *((_BYTE *)v53 + v33++));
      while (v32 != v33);
    }
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 152) + 52) & 0x200000) != 0)
    {
      if (v2)
        printf("\n Byref variable layout: ");
      else
        printf("\n Block variable layout: ");
      v34 = *((_BYTE *)&v52.__r_.__value_.__s + 23) & 0x7F;
      if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v34 = v52.__r_.__value_.__r.__words[1];
      v35 = v34;
      if (v34)
      {
        v36 = 0;
        v37 = v34 - 1;
        do
        {
          if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v38 = &v52;
          else
            v38 = (std::string *)v52.__r_.__value_.__r.__words[0];
          v39 = v38->__r_.__value_.__s.__data_[v36];
          if (v39 > 0x6F)
          {
            v40 = 1;
          }
          else
          {
            v40 = dword_22F45AE6C[v39 >> 4];
            printf(off_24FA65570[v39 >> 4]);
          }
          printf("%d", v40 + (v39 & 0xF));
          if (v36 >= v37)
            putchar(10);
          else
            printf(", ");
          ++v36;
        }
        while (v35 != v36);
      }
    }
    v41 = (llvm::LLVMContext *)sub_22E58343C(a1);
    v8 = sub_22E5835F4(*(llvm::Type **)(a1 + 16), v41);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
    goto LABEL_74;
  }
  if ((_DWORD)v9 == 1)
  {
    v30 = *(unsigned __int8 *)v53;
    v43 = v30 >> 4;
    if (v30 >> 4 == 3)
    {
      v44 = 0;
      v45 = 0;
      v31 = (v30 & 0xF) + 1;
      goto LABEL_93;
    }
    if (v43 != 4)
    {
      if (v43 != 5)
        goto LABEL_49;
      v31 = 0;
LABEL_88:
      v44 = 0;
      goto LABEL_89;
    }
    v31 = 0;
LABEL_92:
    v45 = 0;
    v44 = (v30 & 0xF) + 1;
    goto LABEL_93;
  }
  if ((_DWORD)v9 != 2)
  {
    if ((*(_BYTE *)v53 & 0xF0) == 0x30)
    {
      LOBYTE(v29) = *((_BYTE *)v53 + 1);
      if ((v29 & 0xF0) == 0x40)
      {
        LOBYTE(v30) = *((_BYTE *)v53 + 2);
        if ((v30 & 0xF0) == 0x50)
        {
          v31 = (*(_BYTE *)v53 & 0xF) + 1;
          goto LABEL_85;
        }
      }
    }
    goto LABEL_49;
  }
  v29 = *(unsigned __int8 *)v53;
  if (v29 >> 4 == 3)
  {
    v31 = (v29 & 0xF) + 1;
    v30 = *((unsigned __int8 *)v53 + 1);
    if (v30 >> 4 != 4)
    {
      if (v30 >> 4 != 5)
        goto LABEL_49;
      goto LABEL_88;
    }
    goto LABEL_92;
  }
  if (v29 >> 4 != 4)
    goto LABEL_49;
  LOBYTE(v30) = *((_BYTE *)v53 + 1);
  if ((v30 & 0xF0) != 0x50)
    goto LABEL_49;
  v31 = 0;
LABEL_85:
  v44 = (v29 & 0xF) + 1;
LABEL_89:
  v45 = (v30 & 0xF) + 1;
LABEL_93:
  if (v31 == 16 || v44 == 16 || v45 == 16)
    goto LABEL_49;
  v48 = v44 != 0;
  if (v31)
    ++v48;
  if (v45)
    ++v48;
  if (v48 != (_DWORD)v9)
    goto LABEL_49;
  v49 = ((unint64_t)v31 << 8) + 16 * v44;
  if (v45)
  {
    v49 += v45;
  }
  else if (!v49)
  {
    goto LABEL_49;
  }
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 152) + 52) & 0x200000) != 0)
  {
    if (v51)
      printf("\n Inline BYREF variable layout: ");
    else
      printf("\n Inline block variable layout: ");
    printf("0x0%llx", v49);
    if (v49 >= 0x100)
      printf(", BL_STRONG:%d", v49 >> 8);
    if (v49 >> 4)
      printf(", BL_BYREF:%d", v49 >> 4);
    if ((v49 & 0xF) != 0)
      printf(", BL_WEAK:%d", v49 & 0xF);
    puts(", BL_OPERATOR:0");
  }
  v8 = llvm::ConstantInt::get();
LABEL_74:
  if (v53 != v55)
    free(v53);
  return v8;
}

double sub_22E58CC60(uint64_t a1, int a2, int a3, unint64_t a4, uint64_t a5)
{
  unsigned __int32 v5;
  double result;
  __n128 v7;
  uint64_t v8;

  if (a2)
  {
    v5 = 4;
  }
  else
  {
    switch(a3)
    {
      case 1:
        v5 = 6;
        break;
      case 3:
        v5 = 5;
        break;
      case 2:
        v5 = 3;
        break;
      default:
        v5 = 1;
        break;
    }
  }
  v7.n128_u32[0] = v5;
  v7.n128_u64[1] = a4;
  v8 = a5;
  *(_QWORD *)&result = sub_22E467108(a1 + 32, &v7).n128_u64[0];
  return result;
}

void sub_22E58CCCC(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, int a5)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t i;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t j;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unsigned __int32 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  int v55;
  _BOOL4 v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  __n128 v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  _QWORD v72[18];

  v72[16] = *MEMORY[0x24BDAC8D0];
  v10 = sub_22F114198(*(_QWORD *)(a2 + 24));
  v11 = sub_22EFC3B90(v10);
  v70 = v72;
  v71 = 0x1000000000;
  sub_22F271D38((uint64_t)&v70, v11, 0);
  sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 8) + 280), (llvm::LLVMContext *)(a2 & 0xFFFFFFFFFFFFFFF0));
  llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a1 + 8) + 200));
  llvm::DataLayout::getStructLayout();
  v67 = v71;
  if (v10)
    v56 = (*(_DWORD *)(v10 + 72) & 0xE000) == 0x4000;
  else
    v56 = 0;
  if (!(_DWORD)v71)
    goto LABEL_59;
  v55 = a5;
  v12 = 0;
  v58 = 0;
  v59 = 0;
  v57 = 0;
  v13 = 0;
  v66 = v70;
  v60 = a4;
  v63 = v10;
  do
  {
    v14 = v66[v12];
    v15 = *(_QWORD *)(*(_QWORD *)(sub_22F0C975C(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v10) + 48) + 8 * v12);
    v16 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 16408) & 0xFFFFFFFFFFFFFFF0));
    v17 = *(_QWORD *)(v14 + 40);
    v18 = v15 / v16;
    if (v17 < 8 || (v17 & 7) != 0 || (*(_BYTE *)(v14 + 68) & 1) != 0)
    {
      v13 = v15 / v16;
    }
    else
    {
      v65 = v13;
      v19 = *(_QWORD *)(v14 + 48);
      v20 = v19 & 0xFFFFFFFFFFFFFFF0;
      v21 = *(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0);
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45)
        goto LABEL_12;
      if (sub_22F10E06C(v21))
      {
        v21 = *(_QWORD *)v20;
LABEL_12:
        v10 = v63;
        if (sub_22F10E06C(v21))
          *a4 = 1;
        sub_22E58CCCC(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v20 + 8) & 0xFFFFFFFFFFFFFFF0), v18 + a3, a4, 0);
        v14 = 0;
LABEL_15:
        v13 = v65;
        goto LABEL_17;
      }
      v22 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v19);
      if (v22)
      {
        v23 = (unint64_t *)(v22 + 40);
        if (*(_DWORD *)(v22 + 48) >= 0x41u)
          v23 = (unint64_t *)*v23;
        for (i = *v23; ; i *= *v25)
        {
          v19 = *(_QWORD *)(v22 + 32);
          v22 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v19);
          if (!v22)
            break;
          v25 = (_QWORD *)(v22 + 40);
          if (*(_DWORD *)(v22 + 48) >= 0x41u)
            v25 = (_QWORD *)*v25;
        }
        v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        if (*(_BYTE *)(v26 + 16) == 45 && i != 0)
        {
          v34 = *(int *)(a1 + 40);
          sub_22E58CCCC(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0), v18 + a3, v60, 0);
          if (i < 2)
          {
            v14 = 0;
          }
          else
          {
            v54 = a3;
            v35 = *(_DWORD *)(a1 + 40);
            v64 = v35 - 1;
            v62 = v35 - v34;
            v61 = 24 * v34;
            for (j = 1; j != i; ++j)
            {
              v37 = v26;
              sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v26, (uint64_t)&v68);
              v38 = v34;
              if ((int)v34 <= v64)
              {
                v39 = v68.n128_u64[0] * j;
                v40 = v61;
                v41 = v62;
                do
                {
                  v42 = *(_QWORD *)(a1 + 32) + v40;
                  v43 = *(_DWORD *)v42;
                  v45 = *(_QWORD *)(v42 + 8);
                  v44 = *(_QWORD *)(v42 + 16);
                  v68.n128_u32[0] = v43;
                  v68.n128_u64[1] = v45 + v39;
                  v69 = v44;
                  sub_22E467108(a1 + 32, &v68);
                  v40 += 24;
                  --v41;
                }
                while (v41);
              }
              v34 = v38;
              v26 = v37;
            }
            v14 = 0;
            a3 = v54;
          }
          a4 = v60;
          v10 = v63;
          goto LABEL_15;
        }
      }
      sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(*(_QWORD *)(v14 + 48) & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v68);
      v28 = v68.n128_u64[0];
      v13 = v65;
      if (v56)
      {
        v30 = v57;
        v29 = v58;
        v31 = (int64_t)v68.n128_u64[0] <= v58;
        if (v68.n128_i64[0] > v58)
        {
          v30 = v18;
          v29 = v68.n128_u64[0];
        }
        v57 = v30;
        v58 = v29;
        v32 = v59;
        if (!v31)
          v32 = v14;
        v59 = v32;
      }
      else
      {
        v33 = sub_22E58D1B8(a1, v19, v55);
        sub_22E58CC60(a1, 0, v33, v18 + a3, v28);
      }
      v14 = 0;
      a4 = v60;
      v10 = v63;
    }
LABEL_17:
    ++v12;
  }
  while (v12 != v67);
  if (v14)
  {
    if ((*(_BYTE *)(v14 + 68) & 1) != 0)
    {
      v50 = sub_22EFC2EF4(v14, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144));
      LODWORD(v51) = v50 >> 3;
      if ((v50 & 7) != 0)
        v51 = (v51 + 1);
      else
        v51 = v51;
      v48 = v13;
      v49 = v13 + v51;
      v46 = (uint64_t *)(v14 + 48);
    }
    else
    {
      v47 = *(_QWORD *)(v14 + 48);
      v46 = (uint64_t *)(v14 + 48);
      sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(v47 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v68);
      v48 = v13;
      v49 = v68.n128_u64[0];
    }
    v52 = sub_22E58D1B8(a1, *v46, v55);
    sub_22E58CC60(a1, 0, v52, v48 + a3, v49);
  }
  if (v59)
  {
    v53 = sub_22E58D1B8(a1, *(_QWORD *)(v59 + 48), v55);
    sub_22E58CC60(a1, 0, v53, v57 + a3, v58);
  }
LABEL_59:
  if (v70 != v72)
    free(v70);
}

uint64_t sub_22E58D1B8(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;

  v3 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v3 & 8) == 0 || (v4 = (*(_DWORD *)((v3 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 6) & 7, !(_DWORD)v4))
  {
    if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 152) + 148) & 2) == 0
      && ((v5 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                   + 16),
           v5 != 32)
        ? (v6 = v5 == 10)
        : (v6 = 1),
          v6))
    {
      if (a3)
        return 1;
      else
        return 2;
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

uint64_t sub_22E58D228(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 < v3)
    return 0xFFFFFFFFLL;
  else
    return v3 < v2;
}

uint64_t sub_22E58D244(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_24FA65330;
  v2 = *(void **)(a1 + 2952);
  if (v2)
  {
    *(_QWORD *)(a1 + 2960) = v2;
    operator delete(v2);
  }
  llvm::deallocate_buffer(*(llvm **)(a1 + 2928), (void *)(8 * *(unsigned int *)(a1 + 2944)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 2904), (void *)(16 * *(unsigned int *)(a1 + 2920)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 2880), (void *)(16 * *(unsigned int *)(a1 + 2896)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 2856), (void *)(16 * *(unsigned int *)(a1 + 2872)));
  return sub_22E582D4C(a1);
}

void sub_22E58D2D0(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_24FA65330;
  v2 = *(void **)(a1 + 2952);
  if (v2)
  {
    *(_QWORD *)(a1 + 2960) = v2;
    operator delete(v2);
  }
  llvm::deallocate_buffer(*(llvm **)(a1 + 2928), (void *)(8 * *(unsigned int *)(a1 + 2944)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 2904), (void *)(16 * *(unsigned int *)(a1 + 2920)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 2880), (void *)(16 * *(unsigned int *)(a1 + 2896)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 2856), (void *)(16 * *(unsigned int *)(a1 + 2872)));
  sub_22E582D4C(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E58D370(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  llvm::GlobalValue *v8;
  int v9;
  llvm::GlobalValue *v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  void *__p;
  char v24;

  v2 = *(unsigned int *)(a1 + 1496);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = 8 * v2;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 1488) + v3);
      v6 = sub_22F3B4E88(v5);
      if (v6)
      {
        v7 = v6;
        if (sub_22EFCA55C(v5))
        {
          if ((sub_22EFCA55C(v7) & 1) == 0)
          {
            v8 = *(llvm::GlobalValue **)(*(_QWORD *)(a1 + 1344) + v3);
            v9 = *((_DWORD *)v8 + 8);
            *((_DWORD *)v8 + 8) = v9 & 0xFFFFFFF0;
            if ((v9 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v8) & 1) == 0)
              *((_DWORD *)v8 + 8) |= 0x4000u;
            v10 = *(llvm::GlobalValue **)(*(_QWORD *)(a1 + 2952) + v3);
            v11 = *((_DWORD *)v10 + 8);
            *((_DWORD *)v10 + 8) = v11 & 0xFFFFFFF0;
            if ((v11 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v10) & 1) == 0)
              *((_DWORD *)v10 + 8) |= 0x4000u;
          }
        }
      }
      v3 += 8;
    }
    while (v4 != v3);
  }
  v12 = *(_QWORD *)(a1 + 1344);
  v13 = *(_DWORD *)(a1 + 1352);
  sub_22E582BA0((uint64_t)&__p, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 76));
  sub_22E591B94(a1, v12, v13);
  if (v24 < 0)
    operator delete(__p);
  v14 = *(_QWORD *)(a1 + 1632);
  v15 = *(_DWORD *)(a1 + 1640);
  sub_22E582BA0((uint64_t)&__p, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 76));
  sub_22E591B94(a1, v14, v15);
  if (v24 < 0)
    operator delete(__p);
  v16 = *(_QWORD *)(a1 + 1776);
  v17 = *(_DWORD *)(a1 + 1784);
  sub_22E582BA0((uint64_t)&__p, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 76));
  sub_22E591B94(a1, v16, v17);
  if (v24 < 0)
    operator delete(__p);
  v18 = *(_QWORD *)(a1 + 1920);
  v19 = *(_DWORD *)(a1 + 1928);
  sub_22E582BA0((uint64_t)&__p, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 76));
  sub_22E591B94(a1, v18, v19);
  if (v24 < 0)
    operator delete(__p);
  v20 = *(_QWORD *)(a1 + 2064);
  v21 = *(_DWORD *)(a1 + 2072);
  sub_22E582BA0((uint64_t)&__p, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 76));
  sub_22E591B94(a1, v20, v21);
  if (v24 < 0)
    operator delete(__p);
  sub_22E57AE44(a1);
  return 0;
}

unint64_t sub_22E58D6E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  unint64_t result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  result = sub_22E591E0C(a1, a2);
  v6 = result & 0xFFFFFFFFFFFFFFF8;
  if (result <= 7)
    v6 = 0;
  v7 = v5 & 0xFFFFFFFFFFFFFFF8;
  if (result <= 7)
    v7 = 0;
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v7;
  v8 = 1 << (v5 & 7 | (8 * (result & 7)));
  if (result < 8)
    v8 = 0;
  *(_QWORD *)(a3 + 16) = v8;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  return result;
}

uint64_t sub_22E58D740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_22E591D38(a1, a2, *(_QWORD *)(a3 + 40));
}

uint64_t sub_22E58D748(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t GlobalVariable;
  uint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if ((v4 && *(_BYTE *)(v4 + 16) == 32
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
     && (v4 = sub_22F10CF48(v4)) != 0)
    && sub_22E5761BC(v4)
    || ((v5 = *v3) != 0 && *(_BYTE *)(v5 + 16) == 32
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
     && (v5 = sub_22F10CF48(v5)) != 0)
    && sub_22E491464(v5))
  {
    GlobalVariable = llvm::Module::getGlobalVariable();
    if (!GlobalVariable)
    {
      GlobalVariable = llvm::User::operator new((llvm::User *)0x58);
      llvm::GlobalVariable::GlobalVariable();
      v7 = *(_QWORD *)(a1 + 8);
      if (*(_DWORD *)(*(_QWORD *)(v7 + 216) + 76) == 1)
        *(_DWORD *)(GlobalVariable + 32) = *(_DWORD *)(GlobalVariable + 32) & 0xFFFFFCFF | (sub_22E591FFC(v7, "OBJC_EHTYPE_id", 0xEuLL) << 8);
    }
    return GlobalVariable;
  }
  else
  {
    v9 = *v3;
    if (!*v3 || *(_BYTE *)(v9 + 16) != 32)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32)
        v9 = sub_22F10CF48(v9);
      else
        v9 = 0;
    }
    v10 = sub_22F40A120(v9);
    v11 = sub_22F409D88(v10);
    return sub_22E592110(a1, v11, 0);
  }
}

void sub_22E58D8FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  size_t v5;
  void *v6;
  size_t v7;
  uint64_t v8;
  size_t v9;
  char *v10;
  _QWORD *v11;
  const void *p_p;
  size_t v13;
  uint64_t v14;
  _DWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  unint64_t v27;
  _DWORD *v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  llvm::Constant *v32;
  llvm::Value *v33;
  _DWORD *v34;
  uint64_t v35;
  unsigned int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void **v40;
  llvm::Constant *v41;
  llvm::Value *v42;
  uint64_t v43;
  unsigned int v44;
  int isNullValue;
  unint64_t v46;
  unint64_t v47;
  llvm::DataLayout *DataLayout;
  llvm::Type *v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  BOOL v53;
  unint64_t ABITypeAlignment;
  uint64_t v55;
  _QWORD *v56;
  unsigned int *v57;
  unsigned int v58;
  unint64_t v59;
  size_t v60;
  void *v61;
  size_t v62;
  char *v63;
  unsigned int v64;
  unint64_t v65;
  unsigned int *v66;
  const void *v67;
  size_t v68;
  unsigned int v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  unint64_t v75;
  _DWORD *v76;
  unsigned int v77;
  llvm::Constant *v78;
  llvm::Constant *v79;
  llvm::Constant *v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  int v87;
  char v88;
  uint64_t v89;
  _QWORD v90[4];
  __int16 v91;
  _QWORD v92[4];
  __int16 v93;
  _QWORD v94[4];
  __int16 v95;
  _QWORD v96[4];
  __int16 v97;
  _QWORD v98[3];
  uint64_t v99;
  char *v100;
  void **v101;
  __int16 v102;
  void **v103;
  __int16 v104;
  void *v105[2];
  char v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  void *v110[4];
  void *__p;
  __int128 v112;
  uint64_t v113;
  __int16 v114;
  void *v115;
  uint64_t v116;
  _BYTE v117[64];
  void *v118;
  uint64_t v119;
  _QWORD v120[2];
  __int16 v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  _BYTE v125[128];
  _QWORD v126[3];
  char v127;
  char *v128;
  __int128 v129;
  __int128 v130;
  char v131;
  uint64_t v132;

  v132 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 88);
  v131 = 95;
  v128 = (char *)&v130;
  v130 = *(_OWORD *)"_OBJC_$_CATEGORY_";
  v129 = xmmword_22F45ADC0;
  v6 = sub_22F3B5E40(v4);
  v7 = v5;
  v8 = 17;
  if (v5 + 17 <= 0x40)
  {
    if (!v5)
      goto LABEL_4;
    goto LABEL_3;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod();
  v8 = v129;
  if (v7)
  {
LABEL_3:
    memcpy(&v128[v8], v6, v7);
    v8 = v129;
  }
LABEL_4:
  v9 = v8 + v7;
  *(_QWORD *)&v129 = v9;
  if (*((_QWORD *)&v129 + 1) < v9 + 3)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v9 = v129;
  }
  v10 = &v128[v9];
  v10[2] = 95;
  *(_WORD *)v10 = 9311;
  *(_QWORD *)&v129 = v129 + 3;
  v11 = (_QWORD *)(a2 + 40);
  sub_22EFC683C((uint64_t *)(a2 + 40), &__p);
  if (v112 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  if (v112 >= 0)
    v13 = HIBYTE(v112) & 0x7F;
  else
    v13 = v112;
  v14 = v129;
  if (*((_QWORD *)&v129 + 1) < (unint64_t)v129 + v13)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v14 = v129;
  }
  if (v13)
  {
    memcpy(&v128[v14], p_p, v13);
    v14 = v129;
  }
  *(_QWORD *)&v129 = v14 + v13;
  if (SHIBYTE(v112) < 0)
    operator delete(__p);
  v122 = *(_QWORD *)(a1 + 8);
  v123 = v125;
  v124 = 0x1000000000;
  memset(v126, 0, sizeof(v126));
  v15 = *(_DWORD **)(a1 + 2768);
  v107 = &v122;
  v108 = 0;
  v109 = 0;
  memset(v110, 0, 11);
  v127 = 1;
  v110[2] = 0;
  v110[3] = v15;
  if (v15)
    BYTE2(v110[1]) = (v15[2] & 0x200) != 0;
  if ((*v11 & 7) != 0)
    v16 = 0;
  else
    v16 = *v11 & 0xFFFFFFFFFFFFFFF8;
  v17 = sub_22E5832E4(a1, (const void *)(*(_QWORD *)(v16 + 16) + 16), **(unsigned int **)(v16 + 16));
  v18 = (uint64_t)v107;
  v19 = *((_DWORD *)v107 + 4);
  if (v19 >= *((_DWORD *)v107 + 5))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v19 = *((_DWORD *)v107 + 4);
  }
  *(_QWORD *)(v107[1] + 8 * v19) = v17;
  ++*(_DWORD *)(v18 + 16);
  v20 = sub_22E5926A0(a1, v4, 0, 0);
  v21 = (uint64_t)v107;
  v22 = *((_DWORD *)v107 + 4);
  if (v22 >= *((_DWORD *)v107 + 5))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v22 = *((_DWORD *)v107 + 4);
  }
  *(_QWORD *)(v107[1] + 8 * v22) = v20;
  ++*(_DWORD *)(v21 + 16);
  v23 = sub_22F3B5E40(v4);
  v24 = 0;
  v121 = 773;
  v118 = v23;
  v119 = v25;
  v120[0] = "_$_";
  v26 = "";
  if ((*v11 & 7) == 0)
  {
    v27 = *v11 & 0xFFFFFFFFFFFFFFF8;
    if (v27)
    {
      v28 = *(_DWORD **)(v27 + 16);
      v29 = *v28;
      v26 = (const char *)(v28 + 4);
      v24 = v29;
    }
  }
  __p = &v118;
  *((_QWORD *)&v112 + 1) = v26;
  v113 = v24;
  v114 = 1282;
  llvm::Twine::str((llvm::Twine *)&__p);
  v118 = v120;
  v119 = 0x1000000000;
  v115 = v117;
  v116 = 0x800000000;
  v30 = sub_22F2781C0(a2);
  if (v30 != v31)
  {
    v37 = v30;
    v38 = v31;
    do
    {
      if (!sub_22EFDBD9C(v37))
      {
        if ((*(_BYTE *)(v37 + 58) & 2) != 0)
        {
          v39 = v119;
          v40 = &v118;
          if (v119 >= (unint64_t)HIDWORD(v119))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v39 = v119;
          }
        }
        else
        {
          v39 = v116;
          v40 = &v115;
          if (v116 >= (unint64_t)HIDWORD(v116))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v39 = v116;
          }
        }
        *((_QWORD *)*v40 + v39) = v37;
        ++*((_DWORD *)v40 + 2);
      }
      do
        v37 = *(_QWORD *)(v37 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v37 && (*(_DWORD *)(v37 + 28) & 0x7F) != 0x18);
    }
    while (v37 != v38);
  }
  v104 = 260;
  v103 = v105;
  v32 = (llvm::Constant *)sub_22E592970(a1, (llvm::Type *)&v103, 0, (_QWORD **)v118, v119);
  v33 = v32;
  v34 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 184) + 1372);
  if ((*(_BYTE *)v34 & 3) != 0 && (llvm::Constant::isNullValue(v32) & 1) == 0)
  {
    sub_22F28A5C0((uint64_t)&v107, v33, v34);
  }
  else
  {
    v35 = (uint64_t)v107;
    v36 = *((_DWORD *)v107 + 4);
    if (v36 >= *((_DWORD *)v107 + 5))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v36 = *(_DWORD *)(v35 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(v35 + 8) + 8 * v36) = v33;
    ++*(_DWORD *)(v35 + 16);
  }
  v102 = 260;
  v101 = v105;
  v41 = (llvm::Constant *)sub_22E592970(a1, (llvm::Type *)&v101, 1, (_QWORD **)v115, v116);
  v42 = v41;
  if ((*(_BYTE *)v34 & 3) != 0 && (llvm::Constant::isNullValue(v41) & 1) == 0)
  {
    sub_22F28A5C0((uint64_t)&v107, v42, v34);
  }
  else
  {
    v43 = (uint64_t)v107;
    v44 = *((_DWORD *)v107 + 4);
    if (v44 >= *((_DWORD *)v107 + 5))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v44 = *(_DWORD *)(v43 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(v43 + 8) + 8 * v44) = v42;
    ++*(_DWORD *)(v43 + 16);
  }
  if (llvm::Constant::isNullValue(v33))
    isNullValue = llvm::Constant::isNullValue(v42);
  else
    isNullValue = 0;
  if ((*v11 & 7) != 0)
    v46 = 0;
  else
    v46 = *v11 & 0xFFFFFFFFFFFFFFF8;
  v47 = sub_22EFDD7A0(v4, v46);
  if (!v47)
  {
    sub_22F247080((uint64_t *)&v107, *(llvm::ConstantPointerNull **)(a1 + 2704));
    sub_22F247080((uint64_t *)&v107, *(llvm::ConstantPointerNull **)(a1 + 2632));
    sub_22F247080((uint64_t *)&v107, *(llvm::ConstantPointerNull **)(a1 + 2632));
    if (!isNullValue)
      goto LABEL_64;
LABEL_99:
    LOBYTE(v110[1]) = 1;
    if (v108)
    {
      *(_BYTE *)(v108 + 33) = 0;
      v89 = (uint64_t)v107;
    }
    else
    {
      v89 = (uint64_t)v107;
      *((_BYTE *)v107 + 176) = 0;
    }
    sub_22E670B38(v89, v109);
    goto LABEL_103;
  }
  v59 = v47;
  __p = &v113;
  v112 = xmmword_22F44E320;
  sub_22F242C48((uint64_t)v98, (uint64_t)&__p);
  v61 = sub_22F3B5E40(v4);
  v62 = v60;
  v63 = v100;
  if (v60 <= v99 - (uint64_t)v100)
  {
    if (v60)
    {
      memcpy(v100, v61, v60);
      v63 = &v100[v62];
      v100 += v62;
    }
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v98, (const char *)v61);
    v63 = v100;
  }
  if ((unint64_t)(v99 - (_QWORD)v63) > 2)
  {
    v63[2] = 95;
    *(_WORD *)v63 = 9311;
    v100 += 3;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v98, "_$_");
  }
  if ((*v11 & 7) == 0)
  {
    v65 = *v11 & 0xFFFFFFFFFFFFFFF8;
    if (v65)
    {
      v66 = *(unsigned int **)(v65 + 16);
      v69 = *v66;
      v67 = v66 + 4;
      v68 = v69;
      if (v69 <= (unint64_t)(v99 - (_QWORD)v100))
      {
        if (v68)
        {
          memcpy(v100, v67, v68);
          v100 += v68;
        }
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v98, (const char *)v67);
      }
    }
  }
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v98);
  v70 = sub_22F3B5E40(v4);
  v71 = 0;
  v95 = 1283;
  v94[0] = "_OBJC_CATEGORY_PROTOCOLS_$_";
  v94[2] = v70;
  v94[3] = v72;
  v98[0] = v94;
  v98[2] = "_$_";
  LOWORD(v100) = 770;
  v73 = *(_QWORD *)(v59 + 40);
  v74 = "";
  if ((v73 & 7) == 0)
  {
    v75 = v73 & 0xFFFFFFFFFFFFFFF8;
    if (v75)
    {
      v76 = *(_DWORD **)(v75 + 16);
      v77 = *v76;
      v74 = (const char *)(v76 + 4);
      v71 = v77;
    }
  }
  v96[0] = v98;
  v96[2] = v74;
  v96[3] = v71;
  v97 = 1282;
  v78 = (llvm::Constant *)sub_22E592F04(a1, (uint64_t)v96, *(_QWORD *)((*(_QWORD *)(v59 + 120) & 0xFFFFFFFFFFFFFFF8) + 16), *(_QWORD *)((*(_QWORD *)(v59 + 120) & 0xFFFFFFFFFFFFFFF8) + 16)+ 8 * *(unsigned int *)((*(_QWORD *)(v59 + 120) & 0xFFFFFFFFFFFFFFF8) + 24));
  v93 = 1283;
  v92[0] = "_OBJC_$_PROP_LIST_";
  v92[2] = __p;
  v92[3] = v112;
  v79 = (llvm::Constant *)sub_22E58591C(a1, (uint64_t)v92, a2, v59, a1 + 2488, 0);
  v91 = 1283;
  v90[0] = "_OBJC_$_CLASS_PROP_LIST_";
  v90[2] = __p;
  v90[3] = v112;
  v80 = (llvm::Constant *)sub_22E58591C(a1, (uint64_t)v90, a2, v59, a1 + 2488, 1);
  v81 = (uint64_t)v107;
  v82 = *((_DWORD *)v107 + 4);
  if (v82 >= *((_DWORD *)v107 + 5))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v82 = *(_DWORD *)(v81 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v81 + 8) + 8 * v82) = v78;
  ++*(_DWORD *)(v81 + 16);
  v83 = (uint64_t)v107;
  v84 = *((_DWORD *)v107 + 4);
  if (v84 >= *((_DWORD *)v107 + 5))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v84 = *(_DWORD *)(v83 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v83 + 8) + 8 * v84) = v79;
  ++*(_DWORD *)(v83 + 16);
  v85 = (uint64_t)v107;
  v86 = *((_DWORD *)v107 + 4);
  if (v86 >= *((_DWORD *)v107 + 5))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v86 = *(_DWORD *)(v85 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v85 + 8) + 8 * v86) = v80;
  ++*(_DWORD *)(v85 + 16);
  v87 = llvm::Constant::isNullValue(v78);
  if (v87)
  {
    v87 = llvm::Constant::isNullValue(v79);
    if (v87)
      LOBYTE(v87) = llvm::Constant::isNullValue(v80);
  }
  v88 = isNullValue & v87;
  if (__p != &v113)
    free(__p);
  if ((v88 & 1) != 0)
    goto LABEL_99;
LABEL_64:
  DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a1 + 8) + 200));
  v49 = *(llvm::Type **)(a1 + 2768);
  sub_22E3C304C((uint64_t)DataLayout, (uint64_t)v49);
  v51 = (unint64_t)(v50 + 7) >> 3;
  v53 = v52 == 1;
  ABITypeAlignment = llvm::DataLayout::getABITypeAlignment(DataLayout, v49);
  __p = (void *)((ABITypeAlignment + v51 - 1) / ABITypeAlignment * ABITypeAlignment);
  *(_QWORD *)&v112 = v53;
  llvm::TypeSize::operator unsigned long long();
  sub_22F246F08((uint64_t *)&v107);
  v114 = 261;
  __p = v128;
  *(_QWORD *)&v112 = v129;
  v55 = sub_22E593264((uint64_t *)&v107, (uint64_t)&__p, *(_QWORD *)(a1 + 8));
  sub_22E6242E0(*(uint64_t **)(a1 + 8), v55);
  if (!sub_22F278E34(v4))
  {
    v56 = (_QWORD *)(a1 + 1776);
    v57 = (unsigned int *)(a1 + 1784);
    v58 = *(_DWORD *)(a1 + 1784);
    if (v58 < *(_DWORD *)(a1 + 1788))
      goto LABEL_70;
    goto LABEL_117;
  }
  v56 = (_QWORD *)(a1 + 1920);
  v57 = (unsigned int *)(a1 + 1928);
  v58 = *(_DWORD *)(a1 + 1928);
  if (v58 >= *(_DWORD *)(a1 + 1932))
  {
LABEL_117:
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v58 = *v57;
  }
LABEL_70:
  *(_QWORD *)(*v56 + 8 * v58) = v55;
  ++*v57;
  if (sub_22E5933A4(*(llvm::StringMapImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 15192), a2))
  {
    v64 = *(_DWORD *)(a1 + 2072);
    if (v64 >= *(_DWORD *)(a1 + 2076))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v64 = *(_DWORD *)(a1 + 2072);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 2064) + 8 * v64) = v55;
    ++*(_DWORD *)(a1 + 2072);
  }
LABEL_103:
  sub_22F278254(a1 + 1152);
  if (v115 != v117)
    free(v115);
  if (v118 != v120)
    free(v118);
  if (v106 < 0)
    operator delete(v105[0]);
  __p = v126;
  sub_22E3CEB30((void ***)&__p);
  if (v123 != v125)
    free(v123);
  if (v128 != (char *)&v130)
    free(v128);
}

void sub_22E58E470(size_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  llvm::ConstantPointerNull *v8;
  llvm::PointerType *v9;
  llvm::DataLayout *DataLayout;
  llvm::Type *v11;
  unsigned int v12;
  unint64_t v13;
  _BOOL4 v14;
  int v15;
  char v16;
  char v17;
  char v18;
  llvm::Value *v19;
  llvm::Value *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  llvm::Value *v24;
  unsigned int *v25;
  unsigned int **v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  unsigned int **v35;
  unsigned int *v36;
  char v37;
  char v38;
  char v39;
  uint64_t v40;
  _BOOL4 v41;
  char v42;
  llvm::Value *v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  llvm::Value *v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  if (!*(_QWORD *)(a1 + 2840))
  {
    v4 = llvm::User::operator new((llvm::User *)0x58);
    *(_QWORD *)(a1 + 2840) = llvm::GlobalVariable::GlobalVariable();
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_DWORD **)(v5 + 216);
    if (v6[19] == 1)
    {
      *(_DWORD *)(v4 + 32) = *(_DWORD *)(v4 + 32) & 0xFFFFFCFF | (sub_22E591FFC(v5, "_objc_empty_cache", 0x11uLL) << 8);
      v6 = *(_DWORD **)(*(_QWORD *)(a1 + 8) + 216);
    }
    if ((v6[17] & 0xFFFFFFF7) == 3 && llvm::Triple::isMacOSXVersionLT((llvm::Triple *)(v6 + 8)))
    {
      llvm::User::operator new((llvm::User *)0x58);
      v7 = llvm::GlobalVariable::GlobalVariable();
    }
    else
    {
      v8 = (llvm::ConstantPointerNull *)llvm::PointerType::get();
      v7 = llvm::ConstantPointerNull::get(v8, v9);
    }
    *(_QWORD *)(a1 + 2848) = v7;
  }
  DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a1 + 8) + 200));
  v11 = *(llvm::Type **)(a1 + 2712);
  sub_22E3C304C((uint64_t)DataLayout, (uint64_t)v11);
  llvm::DataLayout::getABITypeAlignment(DataLayout, v11);
  v12 = llvm::TypeSize::operator unsigned long long();
  v13 = *(_QWORD *)(a2 + 88);
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 76) == 1)
  {
    if ((*(_BYTE *)(v13 + 29) & 1) != 0)
    {
      sub_22EFC8E88(*(_QWORD *)(a2 + 88));
      v56 = *(_QWORD *)v55;
      v57 = *(unsigned int *)(v55 + 8);
      v58 = *(_QWORD *)v55 + 8 * v57;
      if ((_DWORD)v57)
      {
        v59 = 8 * v57;
        while (*(_WORD *)(*(_QWORD *)v56 + 32) != 155)
        {
          v56 += 8;
          v59 -= 8;
          if (!v59)
          {
            v56 = v58;
            break;
          }
        }
      }
      v14 = v56 != v58;
    }
    else
    {
      v14 = 0;
    }
    v15 = !v14;
  }
  else
  {
    v15 = (sub_22EFB9558(*(_QWORD *)(a2 + 88)) & 0x18) == 0;
  }
  if (v15)
    v16 = 17;
  else
    v16 = 1;
  if ((*(_BYTE *)(a2 + 132) & 3) != 0)
    v17 = 4;
  else
    v17 = 0;
  v18 = v17 | v16;
  if (sub_22F3B46CC(v13))
  {
    v21 = *(_QWORD *)(a2 + 88);
    do
    {
      v22 = v21;
      v21 = sub_22F3B46CC(v21);
    }
    while (v21);
    v23 = sub_22F3B46CC(v13);
    v20 = (llvm::Value *)sub_22E5926A0(a1, v22, 1, 0);
    v19 = (llvm::Value *)sub_22E5926A0(a1, v23, 1, 0);
  }
  else
  {
    v18 |= 2u;
    v19 = (llvm::Value *)sub_22E5926A0(a1, v13, 0, 0);
    v20 = (llvm::Value *)sub_22E5926A0(a1, v13, 1, 0);
  }
  v24 = (llvm::Value *)sub_22E593408(a1, v18, v12, v12, (unint64_t *)a2);
  v25 = (unsigned int *)sub_22E5941F4(a1, v13, 1, v20, v19, v24, v15);
  sub_22F29966C(*(_QWORD *)(a1 + 8), v25, v13);
  v26 = *(unsigned int ***)(a1 + 2960);
  v27 = *(_QWORD *)(a1 + 2968);
  if ((unint64_t)v26 >= v27)
  {
    v29 = *(_QWORD **)(a1 + 2952);
    v30 = v26 - (unsigned int **)v29;
    v31 = v30 + 1;
    if ((unint64_t)(v30 + 1) >> 61)
      abort();
    v32 = v27 - (_QWORD)v29;
    if (v32 >> 2 > v31)
      v31 = v32 >> 2;
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
      v33 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v33 = v31;
    if (v33)
    {
      if (v33 >> 61)
        sub_22E3B3F8C();
      v34 = (char *)operator new(8 * v33);
    }
    else
    {
      v34 = 0;
    }
    v35 = (unsigned int **)&v34[8 * v30];
    *v35 = v25;
    v28 = v35 + 1;
    if (v26 != v29)
    {
      do
      {
        v36 = *--v26;
        *--v35 = v36;
      }
      while (v26 != v29);
      v26 = *(unsigned int ***)(a1 + 2952);
    }
    *(_QWORD *)(a1 + 2952) = v35;
    *(_QWORD *)(a1 + 2960) = v28;
    *(_QWORD *)(a1 + 2968) = &v34[8 * v33];
    if (v26)
      operator delete(v26);
  }
  else
  {
    *v26 = v25;
    v28 = v26 + 1;
  }
  *(_QWORD *)(a1 + 2960) = v28;
  if (v15)
    v37 = 16;
  else
    v37 = 0;
  if ((*(_BYTE *)(a2 + 132) & 3) != 0)
    v38 = 4;
  else
    v38 = 0;
  v39 = v38 | v37;
  v40 = v13;
  do
  {
    v41 = sub_22E5927B0(v40);
    if (v41)
      break;
    v40 = sub_22F3B46CC(v40);
  }
  while (v40);
  if (v41)
    v42 = v39 | 0x20;
  else
    v42 = v39;
  if (sub_22F3B46CC(v13))
  {
    v44 = sub_22F3B46CC(v13);
    v43 = (llvm::Value *)sub_22E5926A0(a1, v44, 0, 0);
  }
  else
  {
    v43 = 0;
    v42 |= 2u;
  }
  v45 = sub_22F0CBDC4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(a2 + 88), a2);
  v46 = *(_DWORD *)(v45 + 8);
  v47 = *(unint64_t **)(v45 + 48);
  LODWORD(v48) = v46;
  if (((*(_QWORD *)(v45 + 56) - (_QWORD)v47) & 0x7FFFFFFF8) != 0)
  {
    v49 = *v47;
    v48 = v49
        / sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 16408) & 0xFFFFFFFFFFFFFFF0));
  }
  v50 = (llvm::Value *)sub_22E593408(a1, v42, v48, v46, (unint64_t *)a2);
  v51 = (unsigned int *)sub_22E5941F4(a1, v13, 0, (llvm::Value *)v25, v43, v50, v15);
  sub_22F29966C(*(_QWORD *)(a1 + 8), v51, v13);
  v52 = *(_DWORD *)(a1 + 1352);
  if (v52 >= *(_DWORD *)(a1 + 1356))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v52 = *(_DWORD *)(a1 + 1352);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 1344) + 8 * v52) = v51;
  ++*(_DWORD *)(a1 + 1352);
  v53 = *(_DWORD *)(a1 + 1496);
  if (v53 >= *(_DWORD *)(a1 + 1500))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v53 = *(_DWORD *)(a1 + 1496);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 1488) + 8 * v53) = v13;
  ++*(_DWORD *)(a1 + 1496);
  if (sub_22E5933A4(*(llvm::StringMapImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 15192), a2))
  {
    v54 = *(_DWORD *)(a1 + 1640);
    if (v54 >= *(_DWORD *)(a1 + 1644))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v54 = *(_DWORD *)(a1 + 1640);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 1632) + 8 * v54) = v51;
    ++*(_DWORD *)(a1 + 1640);
  }
  if ((v42 & 0x20) != 0)
    sub_22E592110(a1, v13, 1);
  sub_22F278254(a1 + 1152);
  if (sub_22E55D960(v13))
    sub_22F29B8D0(*(const char **)(a1 + 8), v13, (uint64_t)v51);
}

void sub_22E58EACC(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, llvm::Value *a6@<X5>, uint64_t *a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __int128 v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  llvm::LLVMContext *v28;
  _OWORD v29[3];
  uint64_t v30;
  _OWORD v31[3];
  uint64_t v32;

  if (sub_22E594840((uint64_t)a1, a5))
  {
    v19 = *(_OWORD *)(a3 + 16);
    v31[0] = *(_OWORD *)a3;
    v31[1] = v19;
    v31[2] = *(_OWORD *)(a3 + 32);
    v32 = *(_QWORD *)(a3 + 48);
    v20 = *(_QWORD *)(a2[18] + 144);
    v21 = sub_22F36E1B8(v20);
    v22 = *(_QWORD *)(v21 + 48);
    if (v22)
      v23 = v22 & 0xFFFFFFFFFFFFFFF0;
    else
      v23 = sub_22EF6462C(v20, v21);
    sub_22E594D34(a9, a1, a2, (uint64_t)v31, a4, a5, (uint64_t)a6, v23, 0, (uint64_t)a7, a10);
  }
  else
  {
    v24 = *(_OWORD *)(a3 + 16);
    v29[0] = *(_OWORD *)a3;
    v29[1] = v24;
    v29[2] = *(_OWORD *)(a3 + 32);
    v30 = *(_QWORD *)(a3 + 48);
    v25 = *(_QWORD *)(a2[18] + 144);
    v26 = sub_22F36E1B8(v25);
    v27 = *(_QWORD *)(v26 + 48);
    if (v27)
      v28 = (llvm::LLVMContext *)(v27 & 0xFFFFFFFFFFFFFFF0);
    else
      v28 = (llvm::LLVMContext *)sub_22EF6462C(v25, v26);
    sub_22E587B1C(a9, (uint64_t)a1, a2, (uint64_t)v29, a4, a5, a6, v28, 0, a7, a10, a8, a1 + 311);
  }
}

void sub_22E58EC2C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>, char a9, uint64_t *a10, uint64_t a11)
{
  llvm::Type *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  llvm::Type **v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  llvm::Type *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  llvm::Type ***v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  llvm::LLVMContext *v43;
  uint64_t v44;
  llvm::Type **v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  unint64_t v49;
  unint64_t v50;
  llvm::Value *v52;
  _OWORD v56[3];
  uint64_t v57;
  _OWORD v58[3];
  uint64_t v59;
  _QWORD v60[3];
  int v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE v64[48];
  _QWORD v65[3];
  int v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE v69[48];
  uint64_t v70[4];
  __int16 v71;
  void *v72;
  char v73;

  v15 = *(llvm::Type **)(a1 + 2600);
  v16 = *(unsigned __int8 *)(a2 + 130);
  v70[0] = (uint64_t)"objc_super";
  v71 = 259;
  v17 = sub_22E4D83CC(a2, v15, v16, (uint64_t)v70, 0, 0);
  v19 = v18;
  v20 = *(_QWORD *)(a1 + 2552);
  v71 = 257;
  v21 = (llvm::Type **)sub_22E3C1740((uint64_t *)(a2 + 272), 49, a7, v20, (uint64_t)v70);
  v22 = 0;
  v52 = (llvm::Value *)(v17 & 0xFFFFFFFFFFFFFFF8);
  if (v17 <= 7)
    v23 = 0;
  else
    v23 = v17 & 0xFFFFFFFFFFFFFFF8;
  v24 = v19 & 0xFFFFFFFFFFFFFFF8;
  if (v17 <= 7)
    v24 = 0;
  v49 = v24;
  v50 = v23;
  v65[0] = v23;
  v65[1] = v24;
  if (v17 >= 8)
    v22 = 1 << (v19 & 7 | (8 * (v17 & 7)));
  v65[2] = v22;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v71 = 257;
  sub_22E3C408C((uint64_t *)(a2 + 272), (uint64_t)v65, 0, (uint64_t)v70, (uint64_t)v69);
  sub_22E3BEDDC(a2 + 272, v21, (uint64_t)v69);
  if (a9)
  {
    sub_22EFCA55C(a6);
    v25 = *(unsigned __int8 *)(a2 + 130);
    v26 = *(_QWORD *)(a6 + 40);
    if ((v26 & 7) != 0)
      v27 = 0;
    else
      v27 = v26 & 0xFFFFFFFFFFFFFFF8;
    v70[0] = v27;
    v28 = sub_22F24C2B0(a1 + 2880, v70);
    v29 = v28[1];
    if (!v29)
    {
      v30 = v28;
      sub_22E5926A0(a1, a6, 1, 0);
      sub_22E582BA0((uint64_t)&v72, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 76));
      llvm::User::operator new((llvm::User *)0x58);
      v70[0] = (uint64_t)"OBJC_CLASSLIST_SUP_REFS_$_";
      v71 = 259;
      v30[1] = llvm::GlobalVariable::GlobalVariable();
      llvm::GlobalObject::setAlignment();
      llvm::GlobalObject::setSection();
      sub_22E6242E0(*(uint64_t **)(a1 + 8), v30[1]);
      if (v73 < 0)
        operator delete(v72);
      v29 = v30[1];
    }
    v31 = *(llvm::Type **)(a1 + 2720);
    v71 = 257;
    v32 = sub_22E3C3200((uint64_t *)(a2 + 272), v31, v29, (63 - __clz(v25)) | 0x100u, 0, (uint64_t)v70);
  }
  else
  {
    v33 = *(_QWORD *)(a6 + 40);
    if ((v33 & 7) != 0)
      v34 = 0;
    else
      v34 = v33 & 0xFFFFFFFFFFFFFFF8;
    v70[0] = v34;
    v35 = sub_22F24C2B0(a1 + 2856, v70);
    v36 = v35[1];
    if (!v36)
    {
      v37 = v35;
      sub_22E595664(a1, a6);
      sub_22E582BA0((uint64_t)&v72, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 76));
      llvm::User::operator new((llvm::User *)0x58);
      v70[0] = (uint64_t)"OBJC_CLASSLIST_SUP_REFS_$_";
      v71 = 259;
      v37[1] = llvm::GlobalVariable::GlobalVariable();
      llvm::GlobalObject::setAlignment();
      llvm::GlobalObject::setSection();
      sub_22E6242E0(*(uint64_t **)(a1 + 8), v37[1]);
      if (v73 < 0)
        operator delete(v72);
      v36 = v37[1];
    }
    v32 = (uint64_t)sub_22E595708(a1, a2, a6, v36);
  }
  v38 = v32;
  v39 = (llvm::Type ***)(*(_QWORD *)(a1 + 8) + 280);
  v40 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
  v41 = sub_22F36E27C(v40);
  v42 = *(_QWORD *)(v41 + 48);
  if (v42)
    v43 = (llvm::LLVMContext *)(v42 & 0xFFFFFFFFFFFFFFF0);
  else
    v43 = (llvm::LLVMContext *)sub_22EF6462C(v40, v41);
  v44 = sub_22E66CB04(v39, v43);
  v71 = 257;
  v45 = (llvm::Type **)sub_22E3C1740((uint64_t *)(a2 + 272), 49, v38, v44, (uint64_t)v70);
  v60[0] = v50;
  v60[1] = v49;
  if (v17 < 8)
    v46 = 0;
  else
    v46 = 1 << (v19 & 7 | (8 * (v17 & 7)));
  v60[2] = v46;
  v61 = 0;
  v62 = 0;
  v63 = 0;
  v71 = 257;
  sub_22E3C408C((uint64_t *)(a2 + 272), (uint64_t)v60, 1, (uint64_t)v70, (uint64_t)v64);
  sub_22E3BEDDC(a2 + 272, v45, (uint64_t)v64);
  if (sub_22E594840(a1, a5))
  {
    v47 = *(_OWORD *)(a3 + 16);
    v58[0] = *(_OWORD *)a3;
    v58[1] = v47;
    v58[2] = *(_OWORD *)(a3 + 32);
    v59 = *(_QWORD *)(a3 + 48);
    sub_22E594D34(a8, (uint64_t *)a1, (_QWORD *)a2, (uint64_t)v58, a4, a5, (uint64_t)v52, *(_QWORD *)(a1 + 2592), 1, (uint64_t)a10, a11);
  }
  else
  {
    v48 = *(_OWORD *)(a3 + 16);
    v56[0] = *(_OWORD *)a3;
    v56[1] = v48;
    v56[2] = *(_OWORD *)(a3 + 32);
    v57 = *(_QWORD *)(a3 + 48);
    sub_22E587B1C(a8, a1, (_QWORD *)a2, (uint64_t)v56, a4, a5, v52, *(llvm::LLVMContext **)(a1 + 2592), 1, a10, a11, a6, (_QWORD *)(a1 + 2488));
  }
}

uint64_t sub_22E58F184(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  const std::string::value_type *v6;
  std::string::size_type v7;
  unint64_t v8;
  uint64_t GlobalVariable;
  uint64_t v10;
  uint64_t *v11;
  llvm::Type *v12;
  __int16 v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  __int16 v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  void *__p;
  char v23;
  __int16 v24;
  std::string v25;

  (*(void (**)(_QWORD *, uint64_t))(*a1 + 168))(a1, a3);
  sub_22E589100((uint64_t)(a1 + 311));
  llvm::ConstantExpr::getBitCast();
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&v25.__r_.__value_.__r.__words[1] = xmmword_22F455390;
  strcpy(v25.__r_.__value_.__l.__data_, "_OBJC_PROTOCOL_REFERENCE_$_");
  v6 = (const std::string::value_type *)sub_22F3B5E40(a3);
  std::string::append(&v25, v6, v7);
  v8 = *(unsigned __int8 *)(a2 + 130);
  GlobalVariable = llvm::Module::getGlobalVariable();
  if (GlobalVariable)
  {
    v10 = GlobalVariable;
    v11 = (uint64_t *)(a2 + 272);
    v12 = *(llvm::Type **)(v10 + 24);
    v13 = (63 - __clz(v8)) | 0x100;
    v24 = 257;
    goto LABEL_13;
  }
  v14 = llvm::User::operator new((llvm::User *)0x58);
  v24 = 260;
  __p = &v25;
  llvm::GlobalVariable::GlobalVariable();
  sub_22E582BA0((uint64_t)&__p, *(_DWORD *)(*(_QWORD *)(a1[1] + 216) + 76));
  llvm::GlobalObject::setSection();
  if (v23 < 0)
    operator delete(__p);
  v15 = *(_DWORD *)(v14 + 32);
  v16 = v15 & 0xFFFFFFCF | 0x10;
  *(_DWORD *)(v14 + 32) = v16;
  if ((v15 & 0xFu) - 7 >= 2)
  {
    if ((llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v14) & 1) != 0)
      goto LABEL_9;
    v16 = *(_DWORD *)(v14 + 32);
  }
  *(_DWORD *)(v14 + 32) = v16 | 0x4000;
LABEL_9:
  v17 = (63 - __clz(v8)) | 0x100;
  llvm::GlobalObject::setAlignment();
  v18 = a1[1];
  v19 = *(_DWORD *)(*(_QWORD *)(v18 + 216) + 76);
  if (v19 > 9 || ((1 << v19) & 0x320) == 0)
  {
    llvm::Module::getOrInsertComdat();
    llvm::GlobalObject::setComdat();
    v18 = a1[1];
  }
  __p = (void *)v14;
  sub_22E62C508((uint64_t *)(v18 + 1416), (uint64_t *)&__p);
  v11 = (uint64_t *)(a2 + 272);
  v12 = *(llvm::Type **)(v14 + 24);
  v24 = 257;
  v10 = v14;
  v13 = v17;
LABEL_13:
  v20 = sub_22E3C3200(v11, v12, v10, v13, 0, (uint64_t)&__p);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  return v20;
}

llvm::GlobalValue *sub_22E58F460(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD **v6;
  _QWORD *v7;
  llvm::GlobalValue *v8;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  llvm::DataLayout *DataLayout;
  llvm::Type *v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  BOOL v57;
  unint64_t ABITypeAlignment;
  void *v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD ***v63;
  uint64_t v64;
  _QWORD **v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  _OWORD *v76;
  size_t v77;
  void *v78;
  size_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  void *v85;
  int v86;
  unsigned int v87;
  uint64_t v88;
  char *v89;
  size_t v90;
  void *v91;
  size_t v92;
  llvm::GlobalValue *v93;
  uint64_t v94;
  unsigned int v95;
  llvm::DataLayout *v96;
  int v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t i;
  _QWORD **v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  void *__p;
  uint64_t v106;
  char v107;
  uint64_t v108;
  char *v109;
  _QWORD v110[4];
  __int16 v111;
  _QWORD v112[4];
  __int16 v113;
  _QWORD v114[4];
  __int16 v115;
  _QWORD v116[4];
  __int16 v117;
  uint64_t v118[6];
  uint64_t v119;
  _QWORD **v120;
  unsigned int v121;
  _QWORD **v122;
  unsigned int v123;
  _QWORD **v124;
  unsigned int v125;
  _QWORD **v126;
  unsigned int v127;
  _BYTE v128[32];
  void *v129;
  __int128 v130;
  uint64_t v131;
  __int16 v132;
  uint64_t v133;
  void *v134;
  uint64_t v135;
  _BYTE v136[128];
  _QWORD v137[3];
  char v138;
  uint64_t v139;

  v139 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 1296;
  v5 = a2[5];
  if ((v5 & 7) != 0)
    v6 = 0;
  else
    v6 = (_QWORD **)(v5 & 0xFFFFFFFFFFFFFFF8);
  v120 = v6;
  v7 = sub_22F24C2B0(a1 + 1296, (uint64_t *)&v120);
  v8 = (llvm::GlobalValue *)v7[1];
  if (v8 && !llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v7[1]))
    return v8;
  v10 = a2[13];
  if (!v10)
  {
    sub_22E3CD31C((uint64_t *)(a2[12] + 88), a2[12]);
    v10 = a2[13];
  }
  if (v10 < 8)
    v11 = 0;
  else
    v11 = *(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF8);
  if (v11)
    v12 = v11;
  else
    v12 = (unint64_t)a2;
  sub_22E58916C((uint64_t)&v120, v12);
  v133 = *(_QWORD *)(a1 + 8);
  v134 = v136;
  v135 = 0x1000000000;
  memset(v137, 0, sizeof(v137));
  v13 = *(_QWORD *)(a1 + 2680);
  v118[0] = (uint64_t)&v133;
  memset(&v118[1], 0, 27);
  v138 = 1;
  v118[5] = 0;
  v119 = v13;
  if (v13)
    BYTE2(v118[4]) = (*(_DWORD *)(v13 + 8) & 0x200) != 0;
  sub_22F247080(v118, *(llvm::ConstantPointerNull **)(a1 + 2552));
  v14 = sub_22F3B5E40(v12);
  v16 = sub_22E5832E4(a1, v14, v15);
  v17 = v118[0];
  v18 = *(_DWORD *)(v118[0] + 16);
  if (v18 >= *(_DWORD *)(v118[0] + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v18 = *(_DWORD *)(v17 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v17 + 8) + 8 * v18) = v16;
  ++*(_DWORD *)(v17 + 16);
  v117 = 1283;
  v116[0] = "_OBJC_$_PROTOCOL_REFS_";
  v116[2] = sub_22F3B5E40(v12);
  v116[3] = v19;
  v20 = *(_QWORD *)(v12 + 104);
  if (!v20)
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v12 + 96) + 88), *(_QWORD *)(v12 + 96));
    v20 = *(_QWORD *)(v12 + 104);
  }
  if (v20 >= 8)
  {
    v21 = v20 & 0xFFFFFFFFFFFFFFF8;
    v22 = *(_QWORD *)(v21 + 8);
LABEL_26:
    v24 = *(_QWORD *)(v21 + 8) + 8 * *(unsigned int *)(v21 + 16);
    goto LABEL_28;
  }
  if (!v20)
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v12 + 96) + 88), *(_QWORD *)(v12 + 96));
    v23 = *(_QWORD *)(v12 + 104);
    if (v23 >= 8)
    {
      v22 = 0;
      v21 = v23 & 0xFFFFFFFFFFFFFFF8;
      goto LABEL_26;
    }
  }
  v22 = 0;
  v24 = 0;
LABEL_28:
  v25 = sub_22E592F04(a1, (uint64_t)v116, v22, v24);
  v26 = v118[0];
  v27 = *(_DWORD *)(v118[0] + 16);
  if (v27 >= *(_DWORD *)(v118[0] + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v27 = *(_DWORD *)(v26 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v26 + 8) + 8 * v27) = v25;
  ++*(_DWORD *)(v26 + 16);
  v28 = sub_22F3B5E40(v12);
  v132 = 261;
  v129 = v28;
  *(_QWORD *)&v130 = v29;
  v30 = sub_22E592970(a1, (llvm::Type *)&v129, 4, v120, v121);
  v31 = v118[0];
  v32 = *(_DWORD *)(v118[0] + 16);
  if (v32 >= *(_DWORD *)(v118[0] + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v32 = *(_DWORD *)(v31 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v31 + 8) + 8 * v32) = v30;
  ++*(_DWORD *)(v31 + 16);
  v33 = sub_22F3B5E40(v12);
  v132 = 261;
  v129 = v33;
  *(_QWORD *)&v130 = v34;
  v35 = sub_22E592970(a1, (llvm::Type *)&v129, 5, v122, v123);
  v36 = v118[0];
  v37 = *(_DWORD *)(v118[0] + 16);
  if (v37 >= *(_DWORD *)(v118[0] + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v37 = *(_DWORD *)(v36 + 16);
  }
  v104 = a1 + 2488;
  *(_QWORD *)(*(_QWORD *)(v36 + 8) + 8 * v37) = v35;
  ++*(_DWORD *)(v36 + 16);
  v38 = sub_22F3B5E40(v12);
  v132 = 261;
  v129 = v38;
  *(_QWORD *)&v130 = v39;
  v40 = sub_22E592970(a1, (llvm::Type *)&v129, 6, v124, v125);
  v41 = v118[0];
  v42 = *(_DWORD *)(v118[0] + 16);
  if (v42 >= *(_DWORD *)(v118[0] + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v42 = *(_DWORD *)(v41 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v41 + 8) + 8 * v42) = v40;
  ++*(_DWORD *)(v41 + 16);
  v43 = sub_22F3B5E40(v12);
  v132 = 261;
  v129 = v43;
  *(_QWORD *)&v130 = v44;
  v45 = sub_22E592970(a1, (llvm::Type *)&v129, 7, v126, v127);
  v46 = v118[0];
  v47 = *(_DWORD *)(v118[0] + 16);
  if (v47 >= *(_DWORD *)(v118[0] + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v47 = *(_DWORD *)(v46 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v46 + 8) + 8 * v47) = v45;
  ++*(_DWORD *)(v46 + 16);
  v115 = 1283;
  v114[0] = "_OBJC_$_PROP_LIST_";
  v114[2] = sub_22F3B5E40(v12);
  v114[3] = v48;
  v49 = sub_22E58591C(a1, (uint64_t)v114, 0, v12, v104, 0);
  v50 = v118[0];
  v51 = *(_DWORD *)(v118[0] + 16);
  if (v51 >= *(_DWORD *)(v118[0] + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v51 = *(_DWORD *)(v50 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v50 + 8) + 8 * v51) = v49;
  ++*(_DWORD *)(v50 + 16);
  DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a1 + 8) + 200));
  v53 = *(llvm::Type **)(a1 + 2680);
  sub_22E3C304C((uint64_t)DataLayout, (uint64_t)v53);
  v55 = (unint64_t)(v54 + 7) >> 3;
  v57 = v56 == 1;
  ABITypeAlignment = llvm::DataLayout::getABITypeAlignment(DataLayout, v53);
  v129 = (void *)((ABITypeAlignment + v55 - 1) / ABITypeAlignment * ABITypeAlignment);
  *(_QWORD *)&v130 = v57;
  llvm::TypeSize::operator unsigned long long();
  sub_22F246F08(v118);
  sub_22F246F08(v118);
  v103 = v12;
  v59 = sub_22F3B5E40(v12);
  v60 = 0;
  v61 = 0;
  v113 = 1283;
  v112[0] = "_OBJC_$_PROTOCOL_METHOD_TYPES_";
  v112[2] = v59;
  v112[3] = v62;
  v129 = (char *)&v130 + 8;
  *(_QWORD *)&v130 = 0x800000000;
  do
  {
    v63 = &(&v120)[6 * v61];
    v64 = *((unsigned int *)v63 + 2);
    if ((_DWORD)v64)
    {
      v65 = *v63;
      v66 = 8 * v64;
      do
      {
        v67 = sub_22E586218(a1, *v65, 1);
        v68 = v130;
        if (v130 >= (unint64_t)DWORD1(v130))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v68 = v130;
        }
        *((_QWORD *)v129 + v68) = v67;
        v60 = v130 + 1;
        LODWORD(v130) = v130 + 1;
        ++v65;
        v66 -= 8;
      }
      while (v66);
    }
    ++v61;
  }
  while (v61 != 4);
  v69 = sub_22E589264(a1, (uint64_t)v112, (int)v129, (llvm::Type *)v60, v104);
  v70 = v118[0];
  v71 = *(_DWORD *)(v118[0] + 16);
  if (v71 >= *(_DWORD *)(v118[0] + 20))
  {
    v102 = v69;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v69 = v102;
    v71 = *(_DWORD *)(v70 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v70 + 8) + 8 * v71) = v69;
  ++*(_DWORD *)(v70 + 16);
  if (v129 != (char *)&v130 + 8)
    free(v129);
  sub_22F247080(v118, *(llvm::ConstantPointerNull **)(a1 + 2528));
  v111 = 1283;
  v110[0] = "_OBJC_$_CLASS_PROP_LIST_";
  v110[2] = sub_22F3B5E40(v103);
  v110[3] = v72;
  v73 = sub_22E58591C(a1, (uint64_t)v110, 0, v103, v104, 1);
  v74 = v118[0];
  v75 = *(_DWORD *)(v118[0] + 16);
  if (v75 >= *(_DWORD *)(v118[0] + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v75 = *(_DWORD *)(v74 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v74 + 8) + 8 * v75) = v73;
  ++*(_DWORD *)(v74 + 16);
  if (v8)
  {
    v80 = *((_DWORD *)v8 + 8);
    *((_DWORD *)v8 + 8) = v80 & 0xFFFFFFF0 | 4;
    if ((v80 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v8) & 1) == 0)
      *((_DWORD *)v8 + 8) |= 0x4000u;
    v81 = v118[0];
    sub_22E670C54(v118, v119);
    sub_22F29F5C8(v81);
  }
  else
  {
    v129 = &v131;
    v130 = xmmword_22F44E300;
    sub_22F242C48((uint64_t)&__p, (uint64_t)&v129);
    v76 = v109;
    if ((unint64_t)(v108 - (_QWORD)v109) > 0x10)
    {
      v109[16] = 95;
      *v76 = *(_OWORD *)"_OBJC_PROTOCOL_$_";
      v109 += 17;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "_OBJC_PROTOCOL_$_");
    }
    v78 = sub_22F3B5E40(v103);
    v79 = v77;
    if (v77 <= v108 - (uint64_t)v109)
    {
      if (v77)
      {
        memcpy(v109, v78, v77);
        v109 += v79;
      }
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&__p, (const char *)v78);
    }
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    v82 = v118[0];
    sub_22E670C54(v118, v119);
    LOWORD(v109) = 261;
    __p = v129;
    v106 = v130;
    v8 = (llvm::GlobalValue *)sub_22F29F614(v82);
    v83 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 76);
    if (v83 > 9 || ((1 << v83) & 0x320) == 0)
    {
      llvm::Module::getOrInsertComdat();
      llvm::GlobalObject::setComdat();
    }
    v84 = *(_QWORD *)(v103 + 40);
    if ((v84 & 7) != 0)
      v85 = 0;
    else
      v85 = (void *)(v84 & 0xFFFFFFFFFFFFFFF8);
    __p = v85;
    sub_22F24C2B0(v4, (uint64_t *)&__p)[1] = v8;
    if (v129 != &v131)
      free(v129);
  }
  v86 = *((_DWORD *)v8 + 8);
  v87 = v86 & 0xFFFFFFCF | 0x10;
  *((_DWORD *)v8 + 8) = v87;
  if ((v86 & 0xFu) - 7 >= 2)
  {
    if ((llvm::GlobalValue::hasExternalWeakLinkage(v8) & 1) != 0)
      goto LABEL_76;
    v87 = *((_DWORD *)v8 + 8);
  }
  *((_DWORD *)v8 + 8) = v87 | 0x4000;
LABEL_76:
  v88 = *(_QWORD *)(a1 + 8);
  v129 = v8;
  sub_22E62C508((uint64_t *)(v88 + 1416), (uint64_t *)&v129);
  v129 = &v131;
  v130 = xmmword_22F44E300;
  sub_22F242C48((uint64_t)&__p, (uint64_t)&v129);
  v89 = v109;
  if ((unint64_t)(v108 - (_QWORD)v109) > 0x16)
  {
    *(_OWORD *)v109 = *(_OWORD *)"_OBJC_LABEL_PROTOCOL_$_";
    *(_QWORD *)(v89 + 15) = *(_QWORD *)"TOCOL_$_";
    v109 += 23;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "_OBJC_LABEL_PROTOCOL_$_");
  }
  v91 = sub_22F3B5E40(v103);
  v92 = v90;
  if (v90 <= v108 - (uint64_t)v109)
  {
    if (v90)
    {
      memcpy(v109, v91, v90);
      v109 += v92;
    }
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&__p, (const char *)v91);
  }
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
  v93 = (llvm::GlobalValue *)llvm::User::operator new((llvm::User *)0x58);
  LOWORD(v109) = 261;
  __p = v129;
  v106 = v130;
  llvm::GlobalVariable::GlobalVariable();
  v94 = *(_QWORD *)(a1 + 8);
  v95 = *(_DWORD *)(*(_QWORD *)(v94 + 216) + 76);
  if (v95 > 9 || ((1 << v95) & 0x320) == 0)
  {
    llvm::Module::getOrInsertComdat();
    llvm::GlobalObject::setComdat();
    v94 = *(_QWORD *)(a1 + 8);
  }
  v96 = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(v94 + 200));
  llvm::DataLayout::getABITypeAlignment(v96, *(llvm::Type **)(a1 + 2688));
  llvm::GlobalObject::setAlignment();
  sub_22E582BA0((uint64_t)&__p, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 76));
  llvm::GlobalObject::setSection();
  if (v107 < 0)
    operator delete(__p);
  v97 = *((_DWORD *)v93 + 8);
  v98 = v97 & 0xFFFFFFCF | 0x10;
  *((_DWORD *)v93 + 8) = v98;
  if ((v97 & 0xFu) - 7 < 2)
    goto LABEL_90;
  if ((llvm::GlobalValue::hasExternalWeakLinkage(v93) & 1) == 0)
  {
    v98 = *((_DWORD *)v93 + 8);
LABEL_90:
    *((_DWORD *)v93 + 8) = v98 | 0x4000;
  }
  v99 = *(_QWORD *)(a1 + 8);
  __p = v93;
  sub_22E62C508((uint64_t *)(v99 + 1416), (uint64_t *)&__p);
  if (v129 != &v131)
    free(v129);
  v129 = v137;
  sub_22E3CEB30((void ***)&v129);
  if (v134 != v136)
    free(v134);
  for (i = 0; i != -24; i -= 6)
  {
    v101 = (&v126)[i];
    if (&v128[i * 8] != (_BYTE *)v101)
      free(v101);
  }
  return v8;
}

uint64_t sub_22E590080(uint64_t a1)
{
  return sub_22E58934C(a1 + 2488);
}

uint64_t sub_22E590088(uint64_t a1)
{
  return sub_22E5894A4(a1 + 2488);
}

uint64_t sub_22E590090(uint64_t a1, int a2, int a3)
{
  return sub_22E589600(a1 + 2488, a2, a3);
}

uint64_t sub_22E590098(uint64_t a1)
{
  return sub_22E5898E0(a1 + 2488);
}

uint64_t sub_22E5900A0(uint64_t a1)
{
  return sub_22E5898E0(a1 + 2488);
}

uint64_t sub_22E5900A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_22E5899FC(a1 + 2488, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_22E5900B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_22E5899FC(a1 + 2488, a2, a3, a4, a5, a6, a7, a8);
}

llvm::Value *sub_22E5900B8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v7;
  unint64_t v8;

  if (sub_22EFCA55C(a3))
    sub_22E5926A0(a1, a3, 0, 0);
  if (sub_22F278AC4(a3))
    return sub_22E588D38(a2, a3, a1 + 2488);
  v7 = *(_QWORD *)(a3 + 40);
  if ((v7 & 7) != 0)
    v8 = 0;
  else
    v8 = v7 & 0xFFFFFFFFFFFFFFF8;
  return sub_22E5958B0(a1, a2, v8, a3);
}

llvm::Value *sub_22E590148(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 15192), "NSAutoreleasePool", 0x11uLL);
  return sub_22E5958B0(a1, a2, v4, 0);
}

uint64_t sub_22E590194(uint64_t a1)
{
  return sub_22E589AFC(a1 + 2488);
}

void sub_22E59019C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;

  v6 = a1 + 2488;
  v7 = sub_22E58B4B0(a1 + 2488);
  v9 = v8;
  v10 = sub_22E58BEA4(v6);
  sub_22F279528(v12, a1, a2, a3, v7, v9, v10, v11);
}

void sub_22E590208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *(_QWORD *)(a1 + 2496);
  v7 = llvm::FunctionType::get();
  v8 = sub_22E633A04(v6, v7, "objc_begin_catch", 0x10uLL, 0, 0, 0);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 2496);
  v12 = llvm::FunctionType::get();
  v13 = sub_22E633A04(v11, v12, "objc_end_catch", 0xEuLL, 0, 0, 0);
  v15 = v14;
  v16 = llvm::FunctionType::get();
  v17 = sub_22E633A04(*(_QWORD *)(a1 + 2496), v16, "objc_exception_rethrow", 0x16uLL, 0, 0, 0);
  sub_22E595B8C(a1, a2, a3, v8, v10, v13, v15, v19, v17, v18);
}

uint64_t sub_22E590354(uint64_t a1, uint64_t a2, uint64_t a3, int a4, __n128 a5)
{
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  llvm::Value *v11;
  llvm::Value *v12;
  _QWORD *v13;
  uint64_t v14;
  llvm::Value *v15;
  uint64_t *v16;
  uint64_t v17;
  llvm::Value *v18;
  uint64_t v19;
  uint64_t v20;
  llvm::Value *v21;
  llvm::Value *v22;
  uint64_t v23;
  uint64_t result;
  _BYTE v25[32];
  __int16 v26;
  uint64_t v27;

  v8 = *(unsigned __int8 **)(a3 + 16);
  if (v8)
  {
    v18 = sub_22F273FC8(a2, v8, a5);
    v19 = *(_QWORD *)(a1 + 2552);
    v26 = 257;
    v27 = sub_22E3C1740((uint64_t *)(a2 + 272), 49, (uint64_t)v18, v19, (uint64_t)v25);
    v20 = sub_22E58B748(a1 + 2488);
    v22 = v21;
    v26 = 257;
    v16 = &v27;
    v13 = (_QWORD *)a2;
    v14 = v20;
    v15 = v22;
    v17 = 1;
  }
  else
  {
    v9 = llvm::FunctionType::get();
    v10 = sub_22E633A04(*(_QWORD *)(a1 + 2496), v9, "objc_exception_rethrow", 0x16uLL, 0, 0, 0);
    v12 = v11;
    v26 = 257;
    v13 = (_QWORD *)a2;
    v14 = v10;
    v15 = v12;
    v16 = 0;
    v17 = 0;
  }
  v23 = sub_22F24F1F4(v13, v14, v15, (uint64_t)v16, v17, (uint64_t)v25);
  *(_WORD *)(v23 + 18) = *(_WORD *)(v23 + 18) & 0xF003 | (4 * *(_WORD *)(a2 + 136));
  llvm::Value::getContext((llvm::Value *)v23);
  *(_QWORD *)(v23 + 64) = llvm::AttributeList::addAttributeAtIndex();
  result = sub_22F24866C(a2 + 272);
  if (a4)
  {
    *(_QWORD *)(a2 + 320) = 0;
    *(_QWORD *)(a2 + 328) = 0;
  }
  return result;
}

uint64_t sub_22E590494(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::Value *v9;
  llvm::Value *v10;
  _QWORD v12[4];
  __int16 v13;
  uint64_t v14;

  v5 = *(_QWORD *)(a3 + 8);
  if ((*(_BYTE *)(a3 + 24) & 3) != 0)
    v6 = sub_22F28ABCC((_OWORD *)a3, a2);
  else
    v6 = *(_QWORD *)a3;
  v7 = *(_QWORD *)(a1 + 2560);
  v13 = 257;
  v14 = sub_22E3C1740(a2 + 34, 49, v6, v7, (uint64_t)v12);
  v8 = sub_22E58BF38(a1 + 2488);
  v12[0] = "weakread";
  v13 = 259;
  v10 = sub_22F24EEDC((uint64_t)a2, v8, v9, (uint64_t)&v14, 1, (uint64_t)v12);
  v13 = 257;
  return sub_22E3C1740(a2 + 34, 49, (uint64_t)v10, v5, (uint64_t)v12);
}

llvm::Value *sub_22E590578(_QWORD *a1, _QWORD *a2, llvm::Type **a3, uint64_t a4)
{
  uint64_t v5;
  llvm::Type *v8;
  llvm::DataLayout *DataLayout;
  uint64_t v10;
  unint64_t v11;
  int v12;
  BOOL v13;
  unint64_t ABITypeAlignment;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  llvm::Value *v27;
  _QWORD v29[4];
  __int16 v30;
  _QWORD v31[6];

  v5 = (uint64_t)a3;
  v31[5] = *MEMORY[0x24BDAC8D0];
  v8 = *a3;
  if (*((_BYTE *)*a3 + 8) != 15)
  {
    DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(a1[1] + 200));
    sub_22E3C304C((uint64_t)DataLayout, (uint64_t)v8);
    v11 = (unint64_t)(v10 + 7) >> 3;
    v13 = v12 == 1;
    ABITypeAlignment = llvm::DataLayout::getABITypeAlignment(DataLayout, v8);
    v29[0] = (ABITypeAlignment + v11 - 1) / ABITypeAlignment * ABITypeAlignment;
    v29[1] = v13;
    v15 = llvm::TypeSize::operator unsigned long long();
    v16 = 315;
    if (v15 == 4)
    {
      v16 = 314;
      v17 = v29;
    }
    else
    {
      v17 = v31;
    }
    v18 = a1[v16];
    *((_WORD *)v17 + 16) = 257;
    v19 = sub_22E3C1740(a2 + 34, 49, v5, v18, (uint64_t)v17);
    v20 = a1[316];
    v30 = 257;
    v5 = sub_22E3C1740(a2 + 34, 48, v19, v20, (uint64_t)v29);
  }
  v21 = a1[319];
  v30 = 257;
  v22 = sub_22E3C1740(a2 + 34, 49, v5, v21, (uint64_t)v29);
  if ((*(_BYTE *)(a4 + 24) & 3) != 0)
    v23 = sub_22F28ABCC((_OWORD *)a4, a2);
  else
    v23 = *(_QWORD *)a4;
  v24 = a1[320];
  v30 = 257;
  v25 = sub_22E3C1740(a2 + 34, 49, v23, v24, (uint64_t)v29);
  v31[0] = v22;
  v31[1] = v25;
  v26 = sub_22E58BFD0((uint64_t)(a1 + 311));
  v29[0] = "weakassign";
  v30 = 259;
  return sub_22F24EEDC((uint64_t)a2, v26, v27, (uint64_t)v31, 2, (uint64_t)v29);
}

llvm::Value *sub_22E590760(_QWORD *a1, _QWORD *a2, llvm::Type **a3, uint64_t a4, char a5)
{
  uint64_t v7;
  llvm::Type *v10;
  llvm::DataLayout *DataLayout;
  uint64_t v12;
  unint64_t v13;
  int v14;
  BOOL v15;
  unint64_t ABITypeAlignment;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  llvm::Value *v30;
  llvm::Value *v31;
  const char *v32;
  llvm::Value *v33;
  _QWORD v35[4];
  __int16 v36;
  _QWORD v37[6];

  v7 = (uint64_t)a3;
  v37[5] = *MEMORY[0x24BDAC8D0];
  v10 = *a3;
  if (*((_BYTE *)*a3 + 8) != 15)
  {
    DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(a1[1] + 200));
    sub_22E3C304C((uint64_t)DataLayout, (uint64_t)v10);
    v13 = (unint64_t)(v12 + 7) >> 3;
    v15 = v14 == 1;
    ABITypeAlignment = llvm::DataLayout::getABITypeAlignment(DataLayout, v10);
    v35[0] = (ABITypeAlignment + v13 - 1) / ABITypeAlignment * ABITypeAlignment;
    v35[1] = v15;
    v17 = llvm::TypeSize::operator unsigned long long();
    v18 = 315;
    if (v17 == 4)
    {
      v18 = 314;
      v19 = v35;
    }
    else
    {
      v19 = v37;
    }
    v20 = a1[v18];
    *((_WORD *)v19 + 16) = 257;
    v21 = sub_22E3C1740(a2 + 34, 49, v7, v20, (uint64_t)v19);
    v22 = a1[316];
    v36 = 257;
    v7 = sub_22E3C1740(a2 + 34, 48, v21, v22, (uint64_t)v35);
  }
  v23 = a1[319];
  v36 = 257;
  v24 = sub_22E3C1740(a2 + 34, 49, v7, v23, (uint64_t)v35);
  if ((*(_BYTE *)(a4 + 24) & 3) != 0)
    v25 = sub_22F28ABCC((_OWORD *)a4, a2);
  else
    v25 = *(_QWORD *)a4;
  v26 = a1[320];
  v36 = 257;
  v27 = sub_22E3C1740(a2 + 34, 49, v25, v26, (uint64_t)v35);
  v37[0] = v24;
  v37[1] = v27;
  v28 = (uint64_t)(a1 + 311);
  if ((a5 & 1) != 0)
  {
    v29 = sub_22E58C108(v28);
    v31 = v30;
    v32 = "threadlocalassign";
  }
  else
  {
    v29 = sub_22E58C06C(v28);
    v31 = v33;
    v32 = "globalassign";
  }
  v35[0] = v32;
  v36 = 259;
  return sub_22F24EEDC((uint64_t)a2, v29, v31, (uint64_t)v37, 2, (uint64_t)v35);
}

llvm::Value *sub_22E590970(_QWORD *a1, _QWORD *a2, llvm::Type **a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  llvm::Type *v10;
  llvm::DataLayout *DataLayout;
  uint64_t v12;
  unint64_t v13;
  int v14;
  BOOL v15;
  unint64_t ABITypeAlignment;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  llvm::Value *v29;
  _QWORD v31[4];
  __int16 v32;
  _QWORD v33[6];

  v7 = (uint64_t)a3;
  v33[5] = *MEMORY[0x24BDAC8D0];
  v10 = *a3;
  if (*((_BYTE *)*a3 + 8) != 15)
  {
    DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(a1[1] + 200));
    sub_22E3C304C((uint64_t)DataLayout, (uint64_t)v10);
    v13 = (unint64_t)(v12 + 7) >> 3;
    v15 = v14 == 1;
    ABITypeAlignment = llvm::DataLayout::getABITypeAlignment(DataLayout, v10);
    v31[0] = (ABITypeAlignment + v13 - 1) / ABITypeAlignment * ABITypeAlignment;
    v31[1] = v15;
    v17 = llvm::TypeSize::operator unsigned long long();
    v18 = 315;
    if (v17 == 4)
    {
      v18 = 314;
      v19 = v31;
    }
    else
    {
      v19 = v33;
    }
    v20 = a1[v18];
    *((_WORD *)v19 + 16) = 257;
    v21 = sub_22E3C1740(a2 + 34, 49, v7, v20, (uint64_t)v19);
    v22 = a1[316];
    v32 = 257;
    v7 = sub_22E3C1740(a2 + 34, 48, v21, v22, (uint64_t)v31);
  }
  v23 = a1[319];
  v32 = 257;
  v24 = sub_22E3C1740(a2 + 34, 49, v7, v23, (uint64_t)v31);
  if ((*(_BYTE *)(a4 + 24) & 3) != 0)
    v25 = sub_22F28ABCC((_OWORD *)a4, a2);
  else
    v25 = *(_QWORD *)a4;
  v26 = a1[320];
  v32 = 257;
  v27 = sub_22E3C1740(a2 + 34, 49, v25, v26, (uint64_t)v31);
  v33[0] = v24;
  v33[1] = v27;
  v33[2] = a5;
  v28 = sub_22E58C1A4((uint64_t)(a1 + 311));
  v32 = 257;
  return sub_22F24EEDC((uint64_t)a2, v28, v29, (uint64_t)v33, 3, (uint64_t)v31);
}

llvm::Value *sub_22E590B58(_QWORD *a1, _QWORD *a2, llvm::Type **a3, uint64_t a4)
{
  uint64_t v5;
  llvm::Type *v8;
  llvm::DataLayout *DataLayout;
  uint64_t v10;
  unint64_t v11;
  int v12;
  BOOL v13;
  unint64_t ABITypeAlignment;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  llvm::Value *v27;
  _QWORD v29[4];
  __int16 v30;
  _QWORD v31[6];

  v5 = (uint64_t)a3;
  v31[5] = *MEMORY[0x24BDAC8D0];
  v8 = *a3;
  if (*((_BYTE *)*a3 + 8) != 15)
  {
    DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(a1[1] + 200));
    sub_22E3C304C((uint64_t)DataLayout, (uint64_t)v8);
    v11 = (unint64_t)(v10 + 7) >> 3;
    v13 = v12 == 1;
    ABITypeAlignment = llvm::DataLayout::getABITypeAlignment(DataLayout, v8);
    v29[0] = (ABITypeAlignment + v11 - 1) / ABITypeAlignment * ABITypeAlignment;
    v29[1] = v13;
    v15 = llvm::TypeSize::operator unsigned long long();
    v16 = 315;
    if (v15 == 4)
    {
      v16 = 314;
      v17 = v29;
    }
    else
    {
      v17 = v31;
    }
    v18 = a1[v16];
    *((_WORD *)v17 + 16) = 257;
    v19 = sub_22E3C1740(a2 + 34, 49, v5, v18, (uint64_t)v17);
    v20 = a1[316];
    v30 = 257;
    v5 = sub_22E3C1740(a2 + 34, 48, v19, v20, (uint64_t)v29);
  }
  v21 = a1[319];
  v30 = 257;
  v22 = sub_22E3C1740(a2 + 34, 49, v5, v21, (uint64_t)v29);
  if ((*(_BYTE *)(a4 + 24) & 3) != 0)
    v23 = sub_22F28ABCC((_OWORD *)a4, a2);
  else
    v23 = *(_QWORD *)a4;
  v24 = a1[320];
  v30 = 257;
  v25 = sub_22E3C1740(a2 + 34, 49, v23, v24, (uint64_t)v29);
  v31[0] = v22;
  v31[1] = v25;
  v26 = sub_22E58C248((uint64_t)(a1 + 311));
  v29[0] = "weakassign";
  v30 = 259;
  return sub_22F24EEDC((uint64_t)a2, v26, v27, (uint64_t)v31, 2, (uint64_t)v29);
}

double sub_22E590D40@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned int a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t *v16;

  v13 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  if (v13)
    v14 = *(unsigned __int8 *)(v13 + 16) - 35 > 0xFFFFFFFD;
  else
    v14 = 0;
  if (!v14)
    v13 = sub_22F10CF48(v13);
  v15 = sub_22F272660(v13);
  v16 = (uint64_t *)(*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 344))(a1, a2, v15, a5);
  return sub_22F279218(a2, v15, a4, a5, a6, v16, a7);
}

uint64_t sub_22E590DEC(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  llvm::Type *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v20[4];
  __int16 v21;

  if (sub_22E5947B8(a3))
  {
    v16 = a1[1];
    v17 = sub_22F3B4E88(a3);
    sub_22F2791D4((uint64_t)a1, v16, v17, a4);
    v11 = llvm::ConstantInt::get();
  }
  else
  {
    v8 = sub_22E5944D0((uint64_t)a1, a4);
    v9 = *(llvm::Type **)(v8 + 24);
    v10 = *(unsigned __int8 *)(a2 + 131);
    v20[0] = "ivar";
    v21 = 259;
    v11 = sub_22E3C3200((uint64_t *)(a2 + 272), v9, v8, (63 - __clz(v10)) | 0x100u, 0, (uint64_t)v20);
    v12 = *(_QWORD *)(a2 + 1592);
    if (v12)
    {
      if ((*(_DWORD *)(v12 + 28) & 0x7F) == 0x18
        && (*(_BYTE *)(v12 + 58) & 2) != 0
        && !sub_22EFDBD9C(*(_QWORD *)(a2 + 1592)))
      {
        v13 = sub_22EFDC9F0(v12);
        if (v13)
        {
          v14 = v13;
          v15 = sub_22EFDE1AC(a4);
          if (sub_22E595B08((uint64_t)v15, v14))
          {
            llvm::Module::getMDKindID();
            llvm::MDTuple::getImpl();
            llvm::Instruction::setMetadata();
          }
        }
      }
    }
  }
  if (a1[318] == a1[314])
  {
    v18 = a1[315];
    v20[0] = "ivar.conv";
    v21 = 259;
    return sub_22E3BF45C((uint64_t *)(a2 + 272), v11, v18, 1, (uint64_t)v20);
  }
  return v11;
}

llvm::Value *sub_22E590FA0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  llvm::Value *v20;
  __int128 v22[3];
  __int128 v23[3];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _QWORD v27[4];
  __int16 v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v10 = a2 + 34;
  v11 = *(_OWORD *)(a4 + 16);
  v23[0] = *(_OWORD *)a4;
  v23[1] = v11;
  v23[2] = *(_OWORD *)(a4 + 32);
  v12 = a2[1];
  v28 = 257;
  sub_22E3BEE6C(a2 + 34, v23, v12, (uint64_t)v27, (uint64_t)&v24);
  v13 = v25;
  *(_OWORD *)a4 = v24;
  *(_OWORD *)(a4 + 16) = v13;
  *(_OWORD *)(a4 + 32) = v26;
  v14 = *(_OWORD *)(a3 + 16);
  v22[0] = *(_OWORD *)a3;
  v22[1] = v14;
  v22[2] = *(_OWORD *)(a3 + 32);
  v15 = a2[1];
  v28 = 257;
  sub_22E3BEE6C(v10, v22, v15, (uint64_t)v27, (uint64_t)&v24);
  v16 = v25;
  *(_OWORD *)a3 = v24;
  *(_OWORD *)(a3 + 16) = v16;
  *(_OWORD *)(a3 + 32) = v26;
  if ((*(_BYTE *)(a3 + 24) & 3) != 0)
    v17 = sub_22F28ABCC((_OWORD *)a3, a2);
  else
    v17 = *(_QWORD *)a3;
  v27[0] = v17;
  if ((*(_BYTE *)(a4 + 24) & 3) != 0)
    v18 = sub_22F28ABCC((_OWORD *)a4, a2);
  else
    v18 = *(_QWORD *)a4;
  v27[1] = v18;
  v27[2] = a5;
  v19 = sub_22E58C2E4(a1 + 2488);
  LOWORD(v26) = 257;
  return sub_22F24EEDC((uint64_t)a2, v19, v20, (uint64_t)v27, 3, (uint64_t)&v24);
}

uint64_t sub_22E591114(uint64_t a1)
{
  return *(_QWORD *)(a1 + 2720);
}

uint64_t sub_22E59111C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  uint64_t result;
  _OWORD *v9;
  size_t v10;
  void *v11;
  size_t v12;
  unsigned int v13;
  _QWORD v14[3];
  uint64_t v15;
  char *v16;
  void *v17;
  __int128 v18;
  _QWORD v19[9];

  v19[8] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 1296;
  v5 = *(_QWORD *)(a2 + 40);
  if ((v5 & 7) != 0)
    v6 = 0;
  else
    v6 = (void *)(v5 & 0xFFFFFFFFFFFFFFF8);
  v17 = v6;
  v7 = sub_22F24C2B0(v4, (uint64_t *)&v17);
  result = v7[1];
  if (!result)
  {
    v17 = v19;
    v18 = xmmword_22F44E300;
    sub_22F242C48((uint64_t)v14, (uint64_t)&v17);
    v9 = v16;
    if ((unint64_t)(v15 - (_QWORD)v16) > 0x10)
    {
      v16[16] = 95;
      *v9 = *(_OWORD *)"_OBJC_PROTOCOL_$_";
      v16 += 17;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v14, "_OBJC_PROTOCOL_$_");
    }
    v11 = sub_22F3B5E40(a2);
    v12 = v10;
    if (v10 <= v15 - (uint64_t)v16)
    {
      if (v10)
      {
        memcpy(v16, v11, v10);
        v16 += v12;
      }
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v14, (const char *)v11);
    }
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v14);
    llvm::User::operator new((llvm::User *)0x58);
    LOWORD(v16) = 261;
    v14[0] = v17;
    v14[1] = v18;
    v7[1] = llvm::GlobalVariable::GlobalVariable();
    v13 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 76);
    if (v13 > 9 || ((1 << v13) & 0x320) == 0)
    {
      llvm::Module::getOrInsertComdat();
      llvm::GlobalObject::setComdat();
    }
    if (v17 != v19)
      free(v17);
    return v7[1];
  }
  return result;
}

uint64_t sub_22E591320(_QWORD *a1)
{
  uint64_t BitCast;
  uint64_t v3;
  char v4;
  void *v5;
  uint64_t v6;
  BOOL v7;
  void **p_p;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p;
  __int128 v15;

  BitCast = a1[278];
  if (BitCast)
    return BitCast;
  v3 = *(_QWORD *)(a1[1] + 152);
  if (*(char *)(v3 + 447) < 0)
  {
    if (*(_QWORD *)(v3 + 432))
      goto LABEL_4;
LABEL_6:
    v5 = operator new(0x20uLL);
    __p = v5;
    v15 = xmmword_22F45ADD0;
    strcpy((char *)v5, "OBJC_CLASS_$_NSConstantString");
    v4 = 0x80;
    v6 = 29;
    goto LABEL_7;
  }
  if (!*(_BYTE *)(v3 + 447))
    goto LABEL_6;
LABEL_4:
  std::operator+<char>();
  v4 = HIBYTE(v15);
  v5 = __p;
  v6 = v15;
LABEL_7:
  v7 = v4 < 0;
  if (v4 >= 0)
    p_p = &__p;
  else
    p_p = (void **)v5;
  v9 = v4 & 0x7F;
  if (v7)
    v10 = v6;
  else
    v10 = v9;
  sub_22E592810((uint64_t)a1, (uint64_t)p_p, v10, 0, 0, 0);
  llvm::PointerType::get();
  BitCast = llvm::ConstantExpr::getBitCast();
  v11 = a1[278];
  if (v11 != BitCast)
  {
    if (v11 && v11 != -8192 && v11 != -4096)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 276));
    a1[278] = BitCast;
    if (BitCast != -8192 && BitCast != -4096 && BitCast != 0)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(a1 + 276));
  }
  if (SHIBYTE(v15) < 0)
    operator delete(__p);
  return BitCast;
}

uint64_t sub_22E591488(_QWORD *a1)
{
  uint64_t BitCast;
  uint64_t v3;
  char v4;
  void *v5;
  uint64_t v6;
  BOOL v7;
  void **p_p;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p;
  __int128 v15;

  BitCast = a1[281];
  if (BitCast)
    return BitCast;
  v3 = *(_QWORD *)(a1[1] + 152);
  if (*(char *)(v3 + 735) < 0)
  {
    if (*(_QWORD *)(v3 + 720))
      goto LABEL_4;
LABEL_6:
    v5 = operator new(0x20uLL);
    __p = v5;
    v15 = xmmword_22F45ADE0;
    strcpy((char *)v5, "OBJC_CLASS_$_NSConstantArray");
    v4 = 0x80;
    v6 = 28;
    goto LABEL_7;
  }
  if (!*(_BYTE *)(v3 + 735))
    goto LABEL_6;
LABEL_4:
  std::operator+<char>();
  v4 = HIBYTE(v15);
  v5 = __p;
  v6 = v15;
LABEL_7:
  v7 = v4 < 0;
  if (v4 >= 0)
    p_p = &__p;
  else
    p_p = (void **)v5;
  v9 = v4 & 0x7F;
  if (v7)
    v10 = v6;
  else
    v10 = v9;
  sub_22E592810((uint64_t)a1, (uint64_t)p_p, v10, 0, 0, 0);
  (*(void (**)(_QWORD *))(*a1 + 392))(a1);
  BitCast = llvm::ConstantExpr::getBitCast();
  v11 = a1[281];
  if (v11 != BitCast)
  {
    if (v11 && v11 != -8192 && v11 != -4096)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 279));
    a1[281] = BitCast;
    if (BitCast != -8192 && BitCast != -4096 && BitCast != 0)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(a1 + 279));
  }
  if (SHIBYTE(v15) < 0)
    operator delete(__p);
  return BitCast;
}

uint64_t sub_22E5915F0(_QWORD *a1)
{
  uint64_t BitCast;
  uint64_t v3;
  char v4;
  void *v5;
  uint64_t v6;
  BOOL v7;
  void **p_p;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p;
  __int128 v15;

  BitCast = a1[284];
  if (BitCast)
    return BitCast;
  v3 = *(_QWORD *)(a1[1] + 152);
  if (*(char *)(v3 + 759) < 0)
  {
    if (*(_QWORD *)(v3 + 744))
      goto LABEL_4;
LABEL_6:
    v5 = operator new(0x28uLL);
    __p = v5;
    v15 = xmmword_22F45ADF0;
    strcpy((char *)v5, "OBJC_CLASS_$_NSConstantDictionary");
    v4 = 0x80;
    v6 = 33;
    goto LABEL_7;
  }
  if (!*(_BYTE *)(v3 + 759))
    goto LABEL_6;
LABEL_4:
  std::operator+<char>();
  v4 = HIBYTE(v15);
  v5 = __p;
  v6 = v15;
LABEL_7:
  v7 = v4 < 0;
  if (v4 >= 0)
    p_p = &__p;
  else
    p_p = (void **)v5;
  v9 = v4 & 0x7F;
  if (v7)
    v10 = v6;
  else
    v10 = v9;
  sub_22E592810((uint64_t)a1, (uint64_t)p_p, v10, 0, 0, 0);
  (*(void (**)(_QWORD *))(*a1 + 392))(a1);
  BitCast = llvm::ConstantExpr::getBitCast();
  v11 = a1[284];
  if (v11 != BitCast)
  {
    if (v11 && v11 != -8192 && v11 != -4096)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 282));
    a1[284] = BitCast;
    if (BitCast != -8192 && BitCast != -4096 && BitCast != 0)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(a1 + 282));
  }
  if (SHIBYTE(v15) < 0)
    operator delete(__p);
  return BitCast;
}

uint64_t sub_22E591754(_QWORD *a1)
{
  uint64_t BitCast;
  uint64_t v3;
  char v4;
  void *v5;
  uint64_t v6;
  BOOL v7;
  void **p_p;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p;
  __int128 v15;

  BitCast = a1[287];
  if (BitCast)
    return BitCast;
  v3 = *(_QWORD *)(a1[1] + 152);
  if (*(char *)(v3 + 783) < 0)
  {
    if (*(_QWORD *)(v3 + 768))
      goto LABEL_4;
LABEL_6:
    v5 = operator new(0x28uLL);
    __p = v5;
    v15 = xmmword_22F45ADA0;
    strcpy((char *)v5, "OBJC_CLASS_$_NSConstantIntegerNumber");
    v4 = 0x80;
    v6 = 36;
    goto LABEL_7;
  }
  if (!*(_BYTE *)(v3 + 783))
    goto LABEL_6;
LABEL_4:
  std::operator+<char>();
  v4 = HIBYTE(v15);
  v5 = __p;
  v6 = v15;
LABEL_7:
  v7 = v4 < 0;
  if (v4 >= 0)
    p_p = &__p;
  else
    p_p = (void **)v5;
  v9 = v4 & 0x7F;
  if (v7)
    v10 = v6;
  else
    v10 = v9;
  sub_22E592810((uint64_t)a1, (uint64_t)p_p, v10, 0, 0, 0);
  (*(void (**)(_QWORD *))(*a1 + 392))(a1);
  BitCast = llvm::ConstantExpr::getBitCast();
  v11 = a1[287];
  if (v11 != BitCast)
  {
    if (v11 && v11 != -8192 && v11 != -4096)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 285));
    a1[287] = BitCast;
    if (BitCast != -8192 && BitCast != -4096 && BitCast != 0)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(a1 + 285));
  }
  if (SHIBYTE(v15) < 0)
    operator delete(__p);
  return BitCast;
}

uint64_t sub_22E5918C0(_QWORD *a1)
{
  uint64_t BitCast;
  uint64_t v3;
  char v4;
  void *v5;
  uint64_t v6;
  BOOL v7;
  void **p_p;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p;
  __int128 v15;

  BitCast = a1[290];
  if (BitCast)
    return BitCast;
  v3 = *(_QWORD *)(a1[1] + 152);
  if (*(char *)(v3 + 807) < 0)
  {
    if (*(_QWORD *)(v3 + 792))
      goto LABEL_4;
LABEL_6:
    v5 = operator new(0x28uLL);
    __p = v5;
    v15 = xmmword_22F45AE00;
    strcpy((char *)v5, "OBJC_CLASS_$_NSConstantFloatNumber");
    v4 = 0x80;
    v6 = 34;
    goto LABEL_7;
  }
  if (!*(_BYTE *)(v3 + 807))
    goto LABEL_6;
LABEL_4:
  std::operator+<char>();
  v4 = HIBYTE(v15);
  v5 = __p;
  v6 = v15;
LABEL_7:
  v7 = v4 < 0;
  if (v4 >= 0)
    p_p = &__p;
  else
    p_p = (void **)v5;
  v9 = v4 & 0x7F;
  if (v7)
    v10 = v6;
  else
    v10 = v9;
  sub_22E592810((uint64_t)a1, (uint64_t)p_p, v10, 0, 0, 0);
  (*(void (**)(_QWORD *))(*a1 + 392))(a1);
  BitCast = llvm::ConstantExpr::getBitCast();
  v11 = a1[290];
  if (v11 != BitCast)
  {
    if (v11 && v11 != -8192 && v11 != -4096)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 288));
    a1[290] = BitCast;
    if (BitCast != -8192 && BitCast != -4096 && BitCast != 0)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(a1 + 288));
  }
  if (SHIBYTE(v15) < 0)
    operator delete(__p);
  return BitCast;
}

uint64_t sub_22E591A28(_QWORD *a1)
{
  uint64_t BitCast;
  uint64_t v3;
  char v4;
  void *v5;
  uint64_t v6;
  BOOL v7;
  void **p_p;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p;
  __int128 v15;

  BitCast = a1[293];
  if (BitCast)
    return BitCast;
  v3 = *(_QWORD *)(a1[1] + 152);
  if (*(char *)(v3 + 831) < 0)
  {
    if (*(_QWORD *)(v3 + 816))
      goto LABEL_4;
LABEL_6:
    v5 = operator new(0x28uLL);
    __p = v5;
    v15 = xmmword_22F45AD80;
    strcpy((char *)v5, "OBJC_CLASS_$_NSConstantDoubleNumber");
    v4 = 0x80;
    v6 = 35;
    goto LABEL_7;
  }
  if (!*(_BYTE *)(v3 + 831))
    goto LABEL_6;
LABEL_4:
  std::operator+<char>();
  v4 = HIBYTE(v15);
  v5 = __p;
  v6 = v15;
LABEL_7:
  v7 = v4 < 0;
  if (v4 >= 0)
    p_p = &__p;
  else
    p_p = (void **)v5;
  v9 = v4 & 0x7F;
  if (v7)
    v10 = v6;
  else
    v10 = v9;
  sub_22E592810((uint64_t)a1, (uint64_t)p_p, v10, 0, 0, 0);
  (*(void (**)(_QWORD *))(*a1 + 392))(a1);
  BitCast = llvm::ConstantExpr::getBitCast();
  v11 = a1[293];
  if (v11 != BitCast)
  {
    if (v11 && v11 != -8192 && v11 != -4096)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 291));
    a1[293] = BitCast;
    if (BitCast != -8192 && BitCast != -4096 && BitCast != 0)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(a1 + 291));
  }
  if (SHIBYTE(v15) < 0)
    operator delete(__p);
  return BitCast;
}

void sub_22E591B94(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  llvm::Type **v7;
  uint64_t v8;
  llvm::DataLayout *DataLayout;
  void *v10;
  llvm::Type *v11;
  _QWORD v12[9];

  v12[8] = *MEMORY[0x24BDAC8D0];
  v3 = a3;
  if (a3)
  {
    v10 = v12;
    v11 = (llvm::Type *)0x800000000;
    sub_22E4639CC((uint64_t)&v10, a3, 0);
    v5 = 0;
    v6 = 8 * v3;
    do
    {
      *(_QWORD *)((char *)v10 + v5) = llvm::ConstantExpr::getBitCast();
      v5 += 8;
    }
    while (v6 != v5);
    llvm::ArrayType::get(*(llvm::ArrayType **)(a1 + 2528), (llvm::Type *)v11);
    v7 = (llvm::Type **)llvm::ConstantArray::get();
    v8 = llvm::User::operator new((llvm::User *)0x58);
    llvm::GlobalVariable::GlobalVariable();
    DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a1 + 8) + 200));
    llvm::DataLayout::getABITypeAlignment(DataLayout, *v7);
    llvm::GlobalObject::setAlignment();
    llvm::GlobalObject::setSection();
    sub_22E6242E0(*(uint64_t **)(a1 + 8), v8);
    if (v10 != v12)
      free(v10);
  }
}

uint64_t sub_22E591D38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[32];
  __int16 v12;
  _QWORD v13[3];
  int v14;
  uint64_t v15;
  uint64_t v16;

  v4 = sub_22E591E0C(a1, a3);
  v6 = v5 & 0xFFFFFFFFFFFFFFF8;
  v7 = v4 & 0xFFFFFFFFFFFFFFF8;
  if (v4 < 8)
  {
    v6 = 0;
    v7 = 0;
  }
  v13[0] = v7;
  v13[1] = v6;
  v8 = 1 << (v5 & 7 | (8 * (v4 & 7)));
  if (v4 < 8)
    v8 = 0;
  v13[2] = v8;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v12 = 257;
  v9 = sub_22E3C2A7C((uint64_t *)(a2 + 272), (uint64_t)v13, (uint64_t)v11);
  llvm::Module::getMDKindID();
  llvm::MDTuple::getImpl();
  llvm::Instruction::setMetadata();
  return v9;
}

unint64_t sub_22E591E0C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void *__p;
  char v11;
  uint64_t v12;

  v12 = a2;
  v4 = sub_22F27729C(a1 + 1272, &v12);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 130);
  v6 = v4[1];
  if (!v6)
  {
    v7 = v4;
    sub_22E5837EC(a1, a2);
    llvm::ConstantExpr::getBitCast();
    sub_22E582BA0((uint64_t)&__p, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 76));
    llvm::User::operator new((llvm::User *)0x58);
    v8 = llvm::GlobalVariable::GlobalVariable();
    v7[1] = v8;
    *(_BYTE *)(v8 + 80) |= 2u;
    llvm::GlobalObject::setSection();
    llvm::GlobalObject::setAlignment();
    sub_22E6242E0(*(uint64_t **)(a1 + 8), v7[1]);
    if (v11 < 0)
      operator delete(__p);
    v6 = v7[1];
  }
  if (v5)
    return v6 & 0xFFFFFFFFFFFFFFF8;
  else
    return v6;
}

uint64_t sub_22E591FFC(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  BOOL v11;
  uint64_t result;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;

  v4 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(a1 + 144) + 15192), a2, a3);
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 1960) + 80);
  v6 = sub_22E3CD31C((uint64_t *)(v5 + 72), v5);
  if (v6)
    v7 = v6 + 40;
  else
    v7 = 0;
  v8 = sub_22EFCE144(v7, v4);
  if (!v8)
    return 1;
  while (1)
  {
    v9 = v8 & 0xFFFFFFFFFFFFFFF8;
    if ((v8 & 4) == 0 || !v9)
      break;
    v10 = *(_DWORD *)(*(_QWORD *)v9 + 28);
    if (*(_QWORD *)v9)
      v11 = (*(_DWORD *)(*(_QWORD *)v9 + 28) & 0x7Fu) - 67 > 0xFFFFFFF8;
    else
      v11 = 0;
    if (v11)
    {
      v9 = *(_QWORD *)v9;
      goto LABEL_17;
    }
    v8 = *(_QWORD *)(v9 + 8);
    if (!v8)
      return 1;
  }
  result = 1;
  if (!v9)
    return result;
  v10 = *(_DWORD *)(v9 + 28);
  if ((v10 & 0x7Fu) - 67 < 0xFFFFFFF9)
    return result;
LABEL_17:
  if ((v10 & 0x100) == 0)
    return sub_22E49F808(v9);
  sub_22EFC8E88(v9);
  v14 = *((unsigned int *)v13 + 2);
  if ((_DWORD)v14)
  {
    v15 = 8 * v14;
    for (i = *v13; *(_WORD *)(*(_QWORD *)i + 32) != 155; i += 8)
    {
      v15 -= 8;
      if (!v15)
        return sub_22E49F808(v9);
    }
  }
  else
  {
    i = *v13;
  }
  if (i == *v13 + 8 * v14)
    return sub_22E49F808(v9);
  else
    return 2;
}

uint64_t sub_22E592110(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  void *v10;
  size_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t ElementPtr;
  llvm::Value *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  unsigned int v30;
  uint64_t v31;
  _DWORD *v32;
  unsigned int v33;
  void *v34;
  uint64_t v35;
  void *v36;
  llvm::GlobalValue *v37;
  int v38;
  unsigned int v39;
  void *v40;
  unsigned int *v41;
  void *__p[2];
  uint64_t v43;
  _QWORD v44[3];
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[3];
  void **v48;
  void *v49;
  uint64_t v50;
  size_t v51;
  __int16 v52;
  _QWORD v53[3];
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v6 = a1 + 2904;
  v7 = *(_QWORD *)(a2 + 40);
  if ((v7 & 7) != 0)
    v8 = 0;
  else
    v8 = v7 & 0xFFFFFFFFFFFFFFF8;
  v48 = (void **)v8;
  v9 = sub_22F24C2B0(v6, (uint64_t *)&v48);
  v10 = sub_22F3B5E40(a2);
  v12 = v11;
  if ((a3 & 1) == 0)
  {
    v13 = v9[1];
    if (!v13)
    {
      v15 = a2;
      while (!sub_22E5927B0(v15))
      {
        v15 = sub_22F3B46CC(v15);
        if (!v15)
          goto LABEL_10;
      }
      v52 = 1283;
      v48 = (void **)"OBJC_EHTYPE_$_";
      v50 = (uint64_t)v10;
      v51 = v12;
      llvm::Twine::str((llvm::Twine *)&v48);
      v41 = (unsigned int *)llvm::User::operator new((llvm::User *)0x58);
      v52 = 260;
      v48 = __p;
      v9[1] = llvm::GlobalVariable::GlobalVariable();
      sub_22F29966C(*(_QWORD *)(a1 + 8), v41, a2);
      v13 = v9[1];
      if (SHIBYTE(v43) < 0)
      {
        v40 = __p[0];
        goto LABEL_49;
      }
    }
    return v13;
  }
LABEL_10:
  HIBYTE(v47[2]) = 18;
  strcpy((char *)v47, "objc_ehtype_vtable");
  if (!llvm::Module::getGlobalVariable())
  {
    v16 = llvm::User::operator new((llvm::User *)0x58);
    v52 = 260;
    v48 = (void **)v47;
    llvm::GlobalVariable::GlobalVariable();
    v17 = *(_QWORD *)(a1 + 8);
    if (*(_DWORD *)(*(_QWORD *)(v17 + 216) + 76) == 1)
    {
      if (v47[2] >= 0)
        v18 = v47;
      else
        v18 = (_QWORD *)v47[0];
      if (v47[2] >= 0)
        v19 = HIBYTE(v47[2]) & 0x7F;
      else
        v19 = v47[1];
      *(_DWORD *)(v16 + 32) = *(_DWORD *)(v16 + 32) & 0xFFFFFCFF | (sub_22E591FFC(v17, v18, v19) << 8);
    }
  }
  v46 = llvm::ConstantInt::get();
  ElementPtr = llvm::ConstantExpr::getGetElementPtr();
  v21 = (llvm::Value *)ElementPtr;
  v22 = *(_QWORD *)(a1 + 8);
  v48 = (void **)v22;
  v49 = &v51;
  v50 = 0x1000000000;
  memset(v53, 0, sizeof(v53));
  v23 = *(_QWORD *)(a1 + 2824);
  __p[0] = &v48;
  __p[1] = 0;
  v43 = 0;
  memset(v44, 0, 11);
  v54 = 1;
  v44[2] = 0;
  v45 = v23;
  if (v23)
    BYTE2(v44[1]) = (*(_DWORD *)(v23 + 8) & 0x200) != 0;
  v24 = *(_DWORD *)(*(_QWORD *)(v22 + 184) + 1384);
  if ((v24 & 3) != 0)
  {
    v25 = (v24 >> 9) & 0xF;
    v26 = (v24 >> 2) & 1;
    v27 = llvm::ConstantInt::get();
    sub_22F28A6D0((uint64_t ***)__p, v21, v25, v26, v27);
  }
  else
  {
    v51 = ElementPtr;
    LODWORD(v50) = 1;
  }
  v28 = sub_22E5832E4(a1, v10, v12);
  v29 = __p[0];
  v30 = *((_DWORD *)__p[0] + 4);
  if (v30 >= *((_DWORD *)__p[0] + 5))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v30 = v29[4];
  }
  *(_QWORD *)(*((_QWORD *)v29 + 1) + 8 * v30) = v28;
  ++v29[4];
  v31 = sub_22E5926A0(a1, a2, 0, 0);
  v32 = __p[0];
  v33 = *((_DWORD *)__p[0] + 4);
  if (v33 >= *((_DWORD *)__p[0] + 5))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v33 = v32[4];
  }
  *(_QWORD *)(*((_QWORD *)v32 + 1) + 8 * v33) = v31;
  ++v32[4];
  if (v9[1])
  {
    v36 = __p[0];
    sub_22E670C54((uint64_t *)__p, v45);
    sub_22F29F5C8((uint64_t)v36);
    llvm::GlobalObject::setAlignment();
  }
  else
  {
    v34 = __p[0];
    sub_22E670C54((uint64_t *)__p, v45);
    v9[1] = sub_22F29F614((uint64_t)v34);
    v35 = a2;
    while (!sub_22E5927B0(v35))
    {
      v35 = sub_22F3B46CC(v35);
      if (!v35)
        goto LABEL_34;
    }
    sub_22F29966C(*(_QWORD *)(a1 + 8), (unsigned int *)v9[1], a2);
  }
LABEL_34:
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 76) != 1 && (sub_22EFB9558(a2) & 0x18) == 0)
  {
    v37 = (llvm::GlobalValue *)v9[1];
    v38 = *((_DWORD *)v37 + 8);
    v39 = v38 & 0xFFFFFFCF | 0x10;
    *((_DWORD *)v37 + 8) = v39;
    if ((v38 & 0xFu) - 7 < 2)
    {
LABEL_39:
      *((_DWORD *)v37 + 8) = v39 | 0x4000;
      goto LABEL_40;
    }
    if ((llvm::GlobalValue::hasExternalWeakLinkage(v37) & 1) == 0)
    {
      v39 = *((_DWORD *)v37 + 8);
      goto LABEL_39;
    }
  }
LABEL_40:
  if (a3 && *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 76) == 5)
    llvm::GlobalObject::setSection();
  v13 = v9[1];
  __p[0] = v53;
  sub_22E3CEB30((void ***)__p);
  if (v49 != &v51)
    free(v49);
  if (SHIBYTE(v47[2]) < 0)
  {
    v40 = (void *)v47[0];
LABEL_49:
    operator delete(v40);
  }
  return v13;
}

uint64_t sub_22E5926A0(uint64_t a1, unint64_t a2, int a3, char a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _QWORD v18[4];
  __int16 v19;
  void *__p[2];
  char v21;

  v8 = sub_22F3B5E40(a2);
  v10 = 13;
  if (a3)
    v10 = 17;
  v11 = "OBJC_CLASS_$_";
  if (a3)
    v11 = "OBJC_METACLASS_$_";
  v18[0] = v11;
  v18[1] = v10;
  v18[2] = v8;
  v18[3] = v9;
  v19 = 1285;
  v12 = __p;
  llvm::Twine::str((llvm::Twine *)v18);
  if (v21 >= 0)
  {
    v13 = v21 & 0x7F;
  }
  else
  {
    v12 = (void **)__p[0];
    v13 = (uint64_t)__p[1];
  }
  v14 = sub_22EFCA55C(a2);
  v15 = (a4 & 1) == 0 && *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 76) == 1 && sub_22E49F808(a2);
  v16 = sub_22E592810(a1, (uint64_t)v12, v13, a4, v14, v15);
  if (v21 < 0)
    operator delete(__p[0]);
  return v16;
}

BOOL sub_22E5927B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 257)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22E592810(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, int a6)
{
  uint64_t GlobalVariable;
  llvm::GlobalVariable *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  GlobalVariable = llvm::Module::getGlobalVariable();
  v10 = (llvm::GlobalVariable *)GlobalVariable;
  if (GlobalVariable && *(_QWORD *)(GlobalVariable + 24) == *(_QWORD *)(a1 + 2712))
  {
    v11 = GlobalVariable;
    if ((a4 & 1) != 0)
      return v11;
    goto LABEL_10;
  }
  v11 = llvm::User::operator new((llvm::User *)0x58);
  llvm::GlobalVariable::GlobalVariable();
  if (a6)
    *(_DWORD *)(v11 + 32) = *(_DWORD *)(v11 + 32) & 0xFFFFFCFF | 0x100;
  if (v10)
  {
    llvm::ConstantExpr::getBitCast();
    llvm::Value::replaceAllUsesWith();
    llvm::GlobalVariable::eraseFromParent(v10);
  }
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 200);
  llvm::SymbolTableListTraits<llvm::GlobalVariable>::addNodeToList();
  v13 = *(_QWORD *)(v12 + 8);
  *(_QWORD *)(v11 + 56) = v13;
  *(_QWORD *)(v11 + 64) = v12 + 8;
  *(_QWORD *)(v13 + 8) = v11 + 56;
  *(_QWORD *)(v12 + 8) = v11 + 56;
  if ((a4 & 1) == 0)
  {
LABEL_10:
    if (*(_QWORD *)(v11 + 24) != *(_QWORD *)(a1 + 2712))
      return llvm::ConstantExpr::getBitCast();
  }
  return v11;
}

uint64_t sub_22E592970(uint64_t a1, llvm::Type *a2, int a3, _QWORD **a4, uint64_t a5)
{
  int v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  llvm::DataLayout *DataLayout;
  llvm::Type *v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  BOOL v18;
  unint64_t ABITypeAlignment;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  llvm::Value *BitCast;
  int v30;
  __int16 v31;
  uint64_t v32;
  llvm::Type *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  const char *v38;
  uint64_t v40[7];
  uint64_t v41[7];
  unint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  _QWORD v45[4];
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  _BYTE v50[128];
  _QWORD v51[3];
  char v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  if (!a5)
    return llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 2672), a2);
  switch(a3)
  {
    case 0:
      v9 = 0;
      v10 = "_OBJC_$_CATEGORY_INSTANCE_METHODS_";
      goto LABEL_10;
    case 1:
      v9 = 0;
      v11 = "_OBJC_$_CATEGORY_CLASS_METHODS_";
      goto LABEL_12;
    case 2:
      v9 = 0;
      v38 = "_OBJC_$_INSTANCE_METHODS_";
      v12 = 25;
      goto LABEL_15;
    case 3:
      v9 = 0;
      v38 = "_OBJC_$_CLASS_METHODS_";
      v12 = 22;
      goto LABEL_15;
    case 4:
      v9 = 1;
      v10 = "_OBJC_$_PROTOCOL_INSTANCE_METHODS_";
LABEL_10:
      v38 = v10;
      v12 = 34;
      goto LABEL_15;
    case 5:
      v9 = 1;
      v11 = "_OBJC_$_PROTOCOL_CLASS_METHODS_";
LABEL_12:
      v38 = v11;
      v12 = 31;
      goto LABEL_15;
    case 6:
      v9 = 1;
      v38 = "_OBJC_$_PROTOCOL_INSTANCE_METHODS_OPT_";
      v12 = 38;
      goto LABEL_15;
    case 7:
      v9 = 1;
      v38 = "_OBJC_$_PROTOCOL_CLASS_METHODS_OPT_";
      v12 = 35;
LABEL_15:
      v37 = (uint64_t *)v12;
      break;
    default:
      v37 = 0;
      v38 = 0;
      v9 = 0;
      break;
  }
  v47 = *(_QWORD *)(a1 + 8);
  v48 = v50;
  v49 = 0x1000000000;
  memset(v51, 0, sizeof(v51));
  v41[5] = 0;
  v41[6] = 0;
  v41[0] = (uint64_t)&v47;
  memset(&v41[1], 0, 27);
  v52 = 1;
  DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(v47 + 200));
  v14 = *(llvm::Type **)(a1 + 2640);
  sub_22E3C304C((uint64_t)DataLayout, (uint64_t)v14);
  v16 = (unint64_t)(v15 + 7) >> 3;
  v18 = v17 == 1;
  ABITypeAlignment = llvm::DataLayout::getABITypeAlignment(DataLayout, v14);
  v42 = (ABITypeAlignment + v16 - 1) / ABITypeAlignment * ABITypeAlignment;
  v43 = (uint64_t *)v18;
  llvm::TypeSize::operator unsigned long long();
  sub_22F246F08(v41);
  sub_22F246F08(v41);
  v20 = *(_QWORD *)(a1 + 2640);
  v40[0] = v41[0];
  v40[1] = (uint64_t)v41;
  v40[2] = *(unsigned int *)(v41[0] + 16);
  memset(&v40[3], 0, 11);
  BYTE1(v41[4]) = 1;
  v40[5] = 0;
  v40[6] = v20;
  v21 = 8 * a5;
  do
  {
    v22 = *a4;
    v23 = *(_QWORD *)(a1 + 2640);
    v42 = v40[0];
    v43 = v40;
    v44 = (uint64_t *)*(unsigned int *)(v40[0] + 16);
    v45[2] = 0;
    v45[3] = v23;
    memset(v45, 0, 11);
    BYTE1(v40[4]) = 1;
    if (v23)
      BYTE2(v45[1]) = (*(_DWORD *)(v23 + 8) & 0x200) != 0;
    sub_22E5837EC(a1, v22[5]);
    v24 = sub_22E586218(a1, v22, 0);
    v46 = 0;
    sub_22F24C318(*(_QWORD *)(a1 + 1152), *(_DWORD *)(a1 + 1168), (uint64_t)v22, &v46);
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 184) + 33) & 2) != 0)
    {
      sub_22E591E0C(a1, v22[5]);
      sub_22F246EA4((uint64_t *)&v42, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24));
      sub_22F246EA4((uint64_t *)&v42, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24));
      if (v9)
        sub_22F246F08((uint64_t *)&v42);
      else
        sub_22F246EA4((uint64_t *)&v42, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24));
    }
    else
    {
      sub_22F275848((uint64_t *)&v42);
      v25 = v42;
      v26 = *(unsigned int *)(v42 + 16);
      if (v26 >= *(unsigned int *)(v42 + 20))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v26 = *(unsigned int *)(v25 + 16);
      }
      *(_QWORD *)(*(_QWORD *)(v25 + 8) + 8 * v26) = v24;
      ++*(_DWORD *)(v25 + 16);
      if (v9)
      {
        sub_22F247080((uint64_t *)&v42, *(llvm::ConstantPointerNull **)(a1 + 2528));
      }
      else
      {
        v27 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 184);
        if ((*(_BYTE *)(v27 + 1368) & 3) != 0)
        {
          v28 = (_DWORD *)(v27 + 1368);
          BitCast = (llvm::Value *)llvm::ConstantExpr::getBitCast();
          sub_22F28A5C0((uint64_t)&v42, BitCast, v28);
        }
        else
        {
          sub_22F275848((uint64_t *)&v42);
        }
      }
    }
    sub_22F2759F0((uint64_t *)&v42, v40);
    ++a4;
    v21 -= 8;
  }
  while (v21);
  sub_22F2758B8((uint64_t)v40, v41);
  v30 = *((unsigned __int8 *)a2 + 32);
  if (v30 == 1)
  {
    v42 = (unint64_t)v38;
    v43 = v37;
    v31 = 261;
  }
  else
  {
    if (*((_BYTE *)a2 + 32))
    {
      v32 = *((_QWORD *)a2 + 1);
      if (*((_BYTE *)a2 + 33) == 1)
      {
        v33 = *(llvm::Type **)a2;
      }
      else
      {
        LOBYTE(v30) = 2;
        v33 = a2;
      }
      v42 = (unint64_t)v38;
      v43 = v37;
      v44 = (uint64_t *)v33;
      v45[0] = v32;
      LOBYTE(v45[1]) = 5;
      BYTE1(v45[1]) = v30;
      goto LABEL_40;
    }
    v31 = 256;
  }
  LOWORD(v45[1]) = v31;
LABEL_40:
  v34 = sub_22E593264(v41, (uint64_t)&v42, *(_QWORD *)(a1 + 8));
  v35 = *(uint64_t **)(a1 + 8);
  if (*(_DWORD *)(v35[27] + 76) == 5 && (*(_BYTE *)(v35[23] + 33) & 2) != 0)
  {
    llvm::GlobalObject::setSection();
    v35 = *(uint64_t **)(a1 + 8);
  }
  sub_22E6242E0(v35, v34);
  v36 = llvm::ConstantExpr::getBitCast();
  v42 = (unint64_t)v51;
  sub_22E3CEB30((void ***)&v42);
  if (v48 != v50)
    free(v48);
  return v36;
}

uint64_t sub_22E592F04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::Type *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t NullValue;
  uint64_t v14;
  llvm::ConstantPointerNull *v15;
  void **v16;
  uint64_t v17;
  uint64_t *v18;
  void **v19;
  void **v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  void **v26;
  uint64_t v27;
  uint64_t v28[7];
  void **v29[7];
  void *__p;
  uint64_t *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _BYTE v35[128];
  _QWORD v36[3];
  char v37;
  void *v38;
  __int128 v39;
  _BYTE v40[256];
  uint64_t *v41;
  uint64_t v42;
  _QWORD v43[18];

  v43[16] = *MEMORY[0x24BDAC8D0];
  sub_22E55C27C(a3, a4, (char **)&__p);
  v7 = (uint64_t *)__p;
  v8 = v31;
  if (__p == v31)
  {
    NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 2704), v6);
  }
  else
  {
    v41 = v43;
    v42 = 0x1000000000;
    if ((unint64_t)((char *)v31 - (_BYTE *)__p) >= 0x81)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v7 = (uint64_t *)__p;
      v8 = v31;
    }
    if (v7 == v8)
    {
      v11 = v42;
    }
    else
    {
      do
      {
        v9 = sub_22E5862E0((_QWORD *)a1, *v7);
        v10 = v42;
        if (v42 >= (unint64_t)HIDWORD(v42))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v10 = v42;
        }
        v41[v10] = v9;
        v11 = v42 + 1;
        LODWORD(v42) = v42 + 1;
        ++v7;
      }
      while (v7 != v8);
    }
    if (v11)
    {
      v38 = v40;
      v39 = xmmword_22F44E320;
      llvm::Twine::toVector();
      if (llvm::Module::getGlobalVariable())
      {
        NullValue = llvm::ConstantExpr::getBitCast();
      }
      else
      {
        v32 = *(_QWORD *)(a1 + 8);
        v33 = v35;
        v34 = 0x1000000000;
        memset(v36, 0, sizeof(v36));
        v29[5] = 0;
        v29[6] = 0;
        v29[0] = (void **)&v32;
        memset(&v29[1], 0, 27);
        v37 = 1;
        v14 = sub_22F278330((uint64_t *)v29);
        v15 = *(llvm::ConstantPointerNull **)(a1 + 2688);
        v16 = v29[0];
        v27 = v14;
        v28[0] = (uint64_t)v29[0];
        v17 = *((unsigned int *)v29[0] + 4);
        v28[1] = (uint64_t)v29;
        v28[2] = v17;
        memset(&v28[3], 0, 11);
        BYTE1(v29[4]) = 1;
        v28[5] = 0;
        v28[6] = (uint64_t)v15;
        if ((_DWORD)v42)
        {
          v18 = v41;
          v19 = v29[0] + 1;
          v20 = v29[0] + 3;
          v21 = 8 * v42;
          v22 = v17;
          do
          {
            v23 = *v18;
            if (v22 >= *((_DWORD *)v16 + 5))
            {
              v25 = v20;
              v26 = v19;
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v20 = v25;
              v19 = v26;
              v22 = *((_DWORD *)v16 + 4);
            }
            *((_QWORD *)v16[1] + v22) = v23;
            v22 = *((_DWORD *)v16 + 4) + 1;
            *((_DWORD *)v16 + 4) = v22;
            ++v18;
            v21 -= 8;
          }
          while (v21);
          v15 = *(llvm::ConstantPointerNull **)(a1 + 2688);
        }
        sub_22F247080(v28, v15);
        sub_22F2758B8((uint64_t)v28, (uint64_t *)v29);
        *((_QWORD *)v29[0][1] + v27) = llvm::ConstantInt::get();
        v24 = sub_22E593264((uint64_t *)v29, a2, *(_QWORD *)(a1 + 8));
        sub_22E6242E0(*(uint64_t **)(a1 + 8), v24);
        NullValue = llvm::ConstantExpr::getBitCast();
        v29[0] = (void **)v36;
        sub_22E3CEB30(v29);
        if (v33 != v35)
          free(v33);
      }
      if (v38 != v40)
        free(v38);
    }
    else
    {
      NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 2704), v6);
    }
    if (v41 != v43)
      free(v41);
  }
  if (__p)
  {
    v31 = (uint64_t *)__p;
    operator delete(__p);
  }
  return NullValue;
}

uint64_t sub_22E593264(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void *__p[2];
  uint64_t v8;

  __p[0] = 0;
  __p[1] = 0;
  v8 = 0;
  if (*(_DWORD *)(*(_QWORD *)(a3 + 216) + 76) == 5)
    MEMORY[0x2348A0C14](__p, "__DATA, __objc_const");
  v4 = *a1;
  sub_22E670C54(a1, a1[6]);
  v5 = sub_22F29F614(v4);
  llvm::GlobalObject::setSection();
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
  return v5;
}

BOOL sub_22E5933A4(llvm::StringMapImpl *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_22E3CB704(a1, "load", 4uLL);
  return sub_22EFDA1A0(a2, v3 | 1, 0, 0) || sub_22F278E94(*(_QWORD *)(a2 + 88)) || sub_22F278E94(a2);
}

uint64_t sub_22E593408(size_t a1, char a2, unsigned int a3, unsigned int a4, unint64_t *a5)
{
  void *v10;
  unint64_t v11;
  const void *v12;
  void *v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  llvm::Type *v22;
  uint64_t NullValue;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  void *v28;
  size_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  llvm::Constant *v41;
  llvm::Value *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  llvm::DataLayout *DataLayout;
  llvm::Type *v58;
  uint64_t v59;
  unint64_t v60;
  int v61;
  BOOL v62;
  unint64_t ABITypeAlignment;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  llvm::Type *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  unsigned int v77;
  _DWORD *v78;
  unsigned int v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  llvm::DataLayout *v85;
  int v86;
  int v87;
  unsigned int *v88;
  unsigned int v89;
  int v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  llvm::Type *v101;
  llvm::DataLayout *v102;
  uint64_t v103;
  unint64_t v104;
  int v105;
  BOOL v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t BitCast;
  void **v112;
  llvm::Type *v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  void *v119;
  uint64_t v120;
  size_t v121;
  const char *v122;
  uint64_t v123;
  unint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  void **v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD v137[4];
  __int16 v138;
  _QWORD v139[4];
  __int16 v140;
  _QWORD v141[4];
  __int16 v142;
  _QWORD v143[4];
  __int16 v144;
  uint64_t v145[7];
  void *__dst[2];
  int64_t v147;
  unint64_t v148;
  _BOOL8 v149;
  uint64_t v150[2];
  unint64_t v151;
  _QWORD v152[4];
  unint64_t v153;
  void ***v154;
  uint64_t v155;
  void *v156[4];
  void *v157;
  uint64_t v158;
  _BYTE v159[65];
  uint64_t v160;
  void *v161;
  uint64_t v162;
  _BYTE v163[128];
  _QWORD v164[3];
  char v165;
  void *v166;
  __int128 v167;
  _BYTE v168[128];
  _QWORD v169[3];
  char v170;
  uint64_t v171;

  v171 = *MEMORY[0x24BDAC8D0];
  v10 = sub_22F3B5EB4((uint64_t)a5);
  if (v11 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v12 = v10;
  v13 = (void *)v11;
  if (v11 >= 0x17)
  {
    v15 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v15 = v11 | 7;
    v16 = v15 + 1;
    v14 = (void **)operator new(v15 + 1);
    __dst[1] = v13;
    v147 = v16 | 0x8000000000000000;
    __dst[0] = v14;
    goto LABEL_8;
  }
  HIBYTE(v147) = v11;
  v14 = __dst;
  if (v11)
LABEL_8:
    memmove(v14, v12, (size_t)v13);
  *((_BYTE *)v13 + (_QWORD)v14) = 0;
  v17 = a3;
  v18 = *(_QWORD *)(a1 + 8);
  v19 = *(_QWORD *)(v18 + 152);
  if ((*(_WORD *)(v19 + 148) & 2) != 0)
  {
    v127 = 0;
    v20 = a2 | 0x80;
  }
  else
  {
    v127 = sub_22E5868C8(*(_QWORD *)(v19 + 140), *(_WORD *)(v19 + 148), (uint64_t)a5);
    v20 = a2;
    v18 = *(_QWORD *)(a1 + 8);
  }
  v160 = v18;
  v161 = v163;
  v162 = 0x1000000000;
  memset(v164, 0, sizeof(v164));
  v21 = *(_QWORD *)(a1 + 2752);
  v145[0] = (uint64_t)&v160;
  memset(&v145[1], 0, 27);
  v165 = 1;
  v145[5] = 0;
  v145[6] = v21;
  if (v21)
    BYTE2(v145[4]) = (*(_DWORD *)(v21 + 8) & 0x200) != 0;
  sub_22F246F08(v145);
  sub_22F246F08(v145);
  sub_22F246F08(v145);
  v128 = a4;
  if ((v20 & 1) != 0)
    NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 2528), v22);
  else
    NullValue = sub_22E586DD8(a1, (llvm::Type *)a5, v17, a4, 1, 0);
  v24 = NullValue;
  v25 = v20 & 1;
  v26 = v145[0];
  v27 = *(_DWORD *)(v145[0] + 16);
  if (v27 >= *(_DWORD *)(v145[0] + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v27 = *(_DWORD *)(v26 + 16);
  }
  v129 = v17;
  *(_QWORD *)(*(_QWORD *)(v26 + 8) + 8 * v27) = v24;
  ++*(_DWORD *)(v26 + 16);
  v28 = sub_22F3B5EB4((uint64_t)a5);
  v30 = sub_22E5832E4(a1, v28, v29);
  v31 = v145[0];
  v32 = *(_DWORD *)(v145[0] + 16);
  if (v32 >= *(_DWORD *)(v145[0] + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v32 = *(_DWORD *)(v31 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v31 + 8) + 8 * v32) = v30;
  ++*(_DWORD *)(v31 + 16);
  v157 = v159;
  v158 = 0x1000000000;
  if (v25)
  {
    v38 = sub_22F27628C((uint64_t)a5);
    if (v38 != v39)
    {
      v46 = v38;
      v47 = v39;
      do
      {
        if (!sub_22EFDBD9C(v46))
        {
          v48 = v158;
          if (v158 >= (unint64_t)HIDWORD(v158))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v48 = v158;
          }
          *((_QWORD *)v157 + v48) = v46;
          LODWORD(v158) = v158 + 1;
        }
        do
          v46 = *(_QWORD *)(v46 + 8) & 0xFFFFFFFFFFFFFFF8;
        while (v46 && ((*(_DWORD *)(v46 + 28) & 0x7F) != 0x18 || (*(_BYTE *)(v46 + 58) & 2) != 0));
      }
      while (v46 != v47);
    }
  }
  else
  {
    v33 = sub_22F276230((uint64_t)a5);
    if (v33 != v34)
    {
      v35 = v33;
      v36 = v34;
      do
      {
        if (!sub_22EFDBD9C(v35))
        {
          v37 = v158;
          if (v158 >= (unint64_t)HIDWORD(v158))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v37 = v158;
          }
          *((_QWORD *)v157 + v37) = v35;
          LODWORD(v158) = v158 + 1;
        }
        do
          v35 = *(_QWORD *)(v35 + 8) & 0xFFFFFFFFFFFFFFF8;
        while (v35 && ((*(_DWORD *)(v35 + 28) & 0x7F) != 0x18 || (*(_BYTE *)(v35 + 58) & 2) == 0));
      }
      while (v35 != v36);
    }
  }
  v144 = 261;
  v143[0] = sub_22F3B5EB4((uint64_t)a5);
  v143[1] = v40;
  v41 = (llvm::Constant *)sub_22E592970(a1, (llvm::Type *)v143, v25 | 2u, (_QWORD **)v157, v158);
  v42 = v41;
  v43 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 184);
  if ((*(_BYTE *)(v43 + 1372) & 3) != 0 && (llvm::Constant::isNullValue(v41) & 1) == 0)
  {
    sub_22F28A5C0((uint64_t)v145, v42, (_DWORD *)(v43 + 1372));
  }
  else
  {
    v44 = v145[0];
    v45 = *(_DWORD *)(v145[0] + 16);
    if (v45 >= *(_DWORD *)(v145[0] + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v45 = *(_DWORD *)(v44 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(v44 + 8) + 8 * v45) = v42;
    ++*(_DWORD *)(v44 + 16);
  }
  v130 = a1 + 2488;
  v49 = a5[11];
  v50 = sub_22F3B5E40(v49);
  v142 = 1283;
  v141[0] = "_OBJC_CLASS_PROTOCOLS_$_";
  v141[2] = v50;
  v141[3] = v51;
  v52 = sub_22F276134(v49);
  v53 = sub_22F2761B0(v49);
  v54 = sub_22E592F04(a1, (uint64_t)v141, v52, v53);
  v55 = v145[0];
  v56 = *(_DWORD *)(v145[0] + 16);
  if (v56 >= *(_DWORD *)(v145[0] + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v56 = *(_DWORD *)(v55 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v55 + 8) + 8 * v56) = v54;
  ++*(_DWORD *)(v55 + 16);
  if (!v25)
  {
    v166 = *(void **)(a1 + 8);
    *(_QWORD *)&v167 = v168;
    *((_QWORD *)&v167 + 1) = 0x1000000000;
    memset(v169, 0, sizeof(v169));
    v135 = 0;
    v136 = 0;
    v131 = &v166;
    v132 = 0;
    v133 = 0;
    *(_QWORD *)&v134 = 0;
    *(_DWORD *)((char *)&v134 + 7) = 0;
    v170 = 1;
    DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*((llvm::Module **)v166 + 25));
    v58 = *(llvm::Type **)(a1 + 2728);
    sub_22E3C304C((uint64_t)DataLayout, (uint64_t)v58);
    v60 = (unint64_t)(v59 + 7) >> 3;
    v62 = v61 == 1;
    ABITypeAlignment = llvm::DataLayout::getABITypeAlignment(DataLayout, v58);
    v153 = (ABITypeAlignment + v60 - 1) / ABITypeAlignment * ABITypeAlignment;
    v154 = (void ***)v62;
    llvm::TypeSize::operator unsigned long long();
    sub_22F246F08((uint64_t *)&v131);
    v126 = sub_22F278330((uint64_t *)&v131);
    v64 = *(void **)(a1 + 2728);
    v153 = (unint64_t)v131;
    v154 = &v131;
    v155 = *((unsigned int *)v131 + 4);
    memset(v156, 0, 11);
    BYTE9(v134) = 1;
    v156[2] = 0;
    v156[3] = v64;
    v125 = a5[11];
    v65 = sub_22EFDD1E0(v125);
    if (!v65)
    {
LABEL_54:
      v66 = v153;
      v67 = *(unsigned int *)(v153 + 16);
      if (v67 == v155)
      {
        LOBYTE(v156[1]) = 1;
        v68 = v128;
        if (v154)
          *((_BYTE *)v154 + 33) = 0;
        else
          *(_BYTE *)(v153 + 176) = 0;
        sub_22E670B38(v66, v67);
        BYTE8(v134) = 1;
        if (v132)
        {
          *(_BYTE *)(v132 + 33) = 0;
          v112 = v131;
        }
        else
        {
          v112 = v131;
          *((_BYTE *)v131 + 176) = 0;
        }
        sub_22E670B38((uint64_t)v112, v133);
        BitCast = llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 2744), v113);
      }
      else
      {
        sub_22F2758B8((uint64_t)&v153, (uint64_t *)&v131);
        *((_QWORD *)v131[1] + v126) = llvm::ConstantInt::get();
        v108 = sub_22F3B5E40(v125);
        LOWORD(v152[1]) = 1283;
        v150[0] = (uint64_t)"_OBJC_$_INSTANCE_VARIABLES_";
        v151 = (unint64_t)v108;
        v152[0] = v109;
        v110 = sub_22E593264((uint64_t *)&v131, (uint64_t)v150, *(_QWORD *)(a1 + 8));
        sub_22E6242E0(*(uint64_t **)(a1 + 8), v110);
        BitCast = llvm::ConstantExpr::getBitCast();
        v68 = v128;
      }
      v131 = (void **)v169;
      sub_22E3CEB30(&v131);
      if ((_BYTE *)v167 != v168)
        free((void *)v167);
      v114 = v145[0];
      v115 = *(_DWORD *)(v145[0] + 16);
      if (v115 >= *(_DWORD *)(v145[0] + 20))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v115 = *(_DWORD *)(v114 + 16);
      }
      *(_QWORD *)(*(_QWORD *)(v114 + 8) + 8 * v115) = BitCast;
      ++*(_DWORD *)(v114 + 16);
      v116 = sub_22E586DD8(a1, (llvm::Type *)a5, v129, v68, 0, v127);
      v117 = v145[0];
      v118 = *(_DWORD *)(v145[0] + 16);
      if (v118 >= *(_DWORD *)(v145[0] + 20))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v118 = *(_DWORD *)(v117 + 16);
      }
      *(_QWORD *)(*(_QWORD *)(v117 + 8) + 8 * v118) = v116;
      ++*(_DWORD *)(v117 + 16);
      v119 = sub_22F3B5EB4((uint64_t)a5);
      v138 = 1283;
      v137[0] = "_OBJC_$_PROP_LIST_";
      v137[2] = v119;
      v137[3] = v120;
      v74 = sub_22E58591C(a1, (uint64_t)v137, (uint64_t)a5, a5[11], v130, 0);
      v75 = v145[0];
      v76 = (_QWORD *)(v145[0] + 8);
      v78 = (_DWORD *)(v145[0] + 16);
      v77 = *(_DWORD *)(v145[0] + 16);
      v79 = *(_DWORD *)(v145[0] + 20);
      v80 = "_OBJC_CLASS_RO_$_";
      goto LABEL_102;
    }
    v81 = v65;
    while (!*(_QWORD *)(v81 + 40))
    {
LABEL_62:
      v81 = *(_QWORD *)(v81 + 80);
      if (!v81)
        goto LABEL_54;
    }
    v82 = *(_QWORD *)(a1 + 2728);
    v150[0] = v153;
    v150[1] = (uint64_t)&v153;
    v151 = *(unsigned int *)(v153 + 16);
    v152[2] = 0;
    v152[3] = v82;
    memset(v152, 0, 11);
    BYTE1(v156[1]) = 1;
    if (v82)
      BYTE2(v152[1]) = (*(_DWORD *)(v82 + 8) & 0x200) != 0;
    v83 = a5[11];
    sub_22F2791D4(a1, *(_QWORD *)(a1 + 8), (unint64_t)a5, v81);
    v84 = sub_22E5944D0(a1, v81);
    llvm::ConstantInt::get();
    llvm::GlobalVariable::setInitializer();
    v85 = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a1 + 8) + 200));
    llvm::DataLayout::getABITypeAlignment(v85, *(llvm::Type **)(a1 + 2544));
    llvm::GlobalObject::setAlignment();
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 76) != 1)
    {
      v86 = *(_BYTE *)(v81 + 88) & 7;
      if (v86 == 1 || v86 == 4 || (sub_22EFB9558(v83) & 0x18) == 0)
      {
        v88 = (unsigned int *)(v84 + 32);
        v87 = *(_DWORD *)(v84 + 32);
        v89 = v87 & 0xFFFFFFCF | 0x10;
        *(_DWORD *)(v84 + 32) = v89;
        if ((v87 & 0xFu) - 7 < 2)
        {
LABEL_74:
          *v88 = v89 | 0x4000;
          goto LABEL_75;
        }
        if ((llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v84) & 1) == 0)
        {
          v89 = *v88;
          goto LABEL_74;
        }
      }
      else
      {
        v88 = (unsigned int *)(v84 + 32);
        v90 = *(_DWORD *)(v84 + 32);
        v89 = v90 & 0xFFFFFFCF;
        *(_DWORD *)(v84 + 32) = v90 & 0xFFFFFFCF;
        if ((v90 & 0xFu) - 7 <= 1)
          goto LABEL_74;
      }
    }
LABEL_75:
    if (sub_22E5947B8(v83))
      *(_BYTE *)(v84 + 80) |= 1u;
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 76) == 5)
      llvm::GlobalObject::setSection();
    v91 = v150[0];
    v92 = *(unsigned int *)(v150[0] + 16);
    if (v92 >= *(unsigned int *)(v150[0] + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v92 = *(unsigned int *)(v91 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(v91 + 8) + 8 * v92) = v84;
    ++*(_DWORD *)(v91 + 16);
    v93 = *(_QWORD *)(v81 + 40);
    if ((v93 & 7) != 0)
      v94 = 1;
    else
      v94 = v93 & 0xFFFFFFFFFFFFFFF8 | 1;
    v95 = sub_22E5837EC(a1, v94);
    v96 = v150[0];
    v97 = *(unsigned int *)(v150[0] + 16);
    if (v97 >= *(unsigned int *)(v150[0] + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v97 = *(unsigned int *)(v96 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(v96 + 8) + 8 * v97) = v95;
    ++*(_DWORD *)(v96 + 16);
    v98 = sub_22E586CF0(a1, v81);
    v99 = v150[0];
    v100 = *(unsigned int *)(v150[0] + 16);
    if (v100 >= *(unsigned int *)(v150[0] + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v100 = *(unsigned int *)(v99 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(v99 + 8) + 8 * v100) = v98;
    ++*(_DWORD *)(v99 + 16);
    v101 = (llvm::Type *)sub_22E66C868(*(_QWORD *)(a1 + 8) + 280, *(_QWORD *)(v81 + 48), 0);
    v102 = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a1 + 8) + 200));
    sub_22E3C304C((uint64_t)v102, (uint64_t)v101);
    v104 = (unint64_t)(v103 + 7) >> 3;
    v106 = v105 == 1;
    v107 = llvm::DataLayout::getABITypeAlignment(v102, v101);
    v148 = (v107 + v104 - 1) / v107 * v107;
    v149 = v106;
    llvm::TypeSize::operator unsigned long long();
    sub_22EF5C8B8(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(*(_QWORD *)(v81 + 48) & 0xFFFFFFFFFFFFFFF0));
    sub_22F246F08(v150);
    sub_22F246F08(v150);
    sub_22F2759F0(v150, (uint64_t *)&v153);
    goto LABEL_62;
  }
  sub_22F247080(v145, *(llvm::ConstantPointerNull **)(a1 + 2744));
  v70 = llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 2528), v69);
  v71 = v145[0];
  v72 = *(_DWORD *)(v145[0] + 16);
  if (v72 >= *(_DWORD *)(v145[0] + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v72 = *(_DWORD *)(v71 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v71 + 8) + 8 * v72) = v70;
  ++*(_DWORD *)(v71 + 16);
  v140 = 1283;
  v139[0] = "_OBJC_$_CLASS_PROP_LIST_";
  v139[2] = sub_22F3B5EB4((uint64_t)a5);
  v139[3] = v73;
  v74 = sub_22E58591C(a1, (uint64_t)v139, (uint64_t)a5, a5[11], v130, 1);
  v75 = v145[0];
  v76 = (_QWORD *)(v145[0] + 8);
  v78 = (_DWORD *)(v145[0] + 16);
  v77 = *(_DWORD *)(v145[0] + 16);
  v79 = *(_DWORD *)(v145[0] + 20);
  v80 = "_OBJC_METACLASS_RO_$_";
LABEL_102:
  if (v77 >= v79)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v77 = *(_DWORD *)(v75 + 16);
  }
  *(_QWORD *)(*v76 + 8 * v77) = v74;
  ++*v78;
  v166 = v168;
  v167 = xmmword_22F44E300;
  sub_22F242C48((uint64_t)&v131, (uint64_t)&v166);
  v121 = strlen(v80);
  if (v121 <= (_QWORD)v134 - *((_QWORD *)&v134 + 1))
  {
    if (v121)
    {
      memcpy(*((void **)&v134 + 1), v80, v121);
      *((_QWORD *)&v134 + 1) += v121;
    }
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v131, v80);
  }
  if (v147 >= 0)
    v122 = (const char *)__dst;
  else
    v122 = (const char *)__dst[0];
  llvm::raw_ostream::write((llvm::raw_ostream *)&v131, v122);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v131);
  WORD4(v134) = 261;
  v131 = (void **)v166;
  v132 = v167;
  v123 = sub_22E593264(v145, (uint64_t)&v131, *(_QWORD *)(a1 + 8));
  if (v166 != v168)
    free(v166);
  if (v157 != v159)
    free(v157);
  v166 = v164;
  sub_22E3CEB30((void ***)&v166);
  if (v161 != v163)
    free(v161);
  if (SHIBYTE(v147) < 0)
    operator delete(__dst[0]);
  return v123;
}

llvm::GlobalValue *sub_22E5941F4(uint64_t a1, unint64_t a2, int a3, llvm::Value *a4, llvm::Value *a5, llvm::Value *a6, int a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  unsigned int v17;
  uint64_t v18;
  void **v19;
  unsigned int v20;
  llvm::GlobalValue *v21;
  void **v22;
  uint64_t v23;
  llvm::DataLayout *DataLayout;
  int v25;
  unsigned int v26;
  void **v28[6];
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  _BYTE v33[128];
  _QWORD v34[3];
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v13 = *(_QWORD *)(a1 + 8);
  v30 = v13;
  v31 = v33;
  v32 = 0x1000000000;
  memset(v34, 0, sizeof(v34));
  v14 = *(_QWORD *)(a1 + 2712);
  v28[0] = (void **)&v30;
  memset(&v28[1], 0, 27);
  v35 = 1;
  v28[5] = 0;
  v29 = v14;
  if (v14)
    BYTE2(v28[4]) = (*(_DWORD *)(v14 + 8) & 0x200) != 0;
  sub_22F28A5C0((uint64_t)v28, a4, (_DWORD *)(*(_QWORD *)(v13 + 184) + 1404));
  if (a5)
    sub_22F28A5C0((uint64_t)v28, a5, (_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 184) + 1408));
  else
    sub_22F247080((uint64_t *)v28, *(llvm::ConstantPointerNull **)(a1 + 2720));
  v15 = *(_QWORD *)(a1 + 2840);
  v16 = v28[0];
  v17 = *((_DWORD *)v28[0] + 4);
  if (v17 >= *((_DWORD *)v28[0] + 5))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v17 = *((_DWORD *)v16 + 4);
  }
  *((_QWORD *)v16[1] + v17) = v15;
  ++*((_DWORD *)v16 + 4);
  v18 = *(_QWORD *)(a1 + 2848);
  v19 = v28[0];
  v20 = *((_DWORD *)v28[0] + 4);
  if (v20 >= *((_DWORD *)v28[0] + 5))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v20 = *((_DWORD *)v19 + 4);
  }
  *((_QWORD *)v19[1] + v20) = v18;
  ++*((_DWORD *)v19 + 4);
  sub_22F28A5C0((uint64_t)v28, a6, (_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 184) + 1376));
  v21 = (llvm::GlobalValue *)sub_22E5926A0(a1, a2, a3, 1);
  v22 = v28[0];
  sub_22E670C54((uint64_t *)v28, v29);
  sub_22F29F5C8((uint64_t)v22);
  v23 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(*(_QWORD *)(v23 + 216) + 76) == 5)
  {
    llvm::GlobalObject::setSection();
    v23 = *(_QWORD *)(a1 + 8);
  }
  DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(v23 + 200));
  llvm::DataLayout::getABITypeAlignment(DataLayout, *(llvm::Type **)(a1 + 2712));
  llvm::GlobalObject::setAlignment();
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 76) != 1 && a7)
  {
    v25 = *((_DWORD *)v21 + 8);
    v26 = v25 & 0xFFFFFFCF | 0x10;
    *((_DWORD *)v21 + 8) = v26;
    if ((v25 & 0xFu) - 7 >= 2)
    {
      if ((llvm::GlobalValue::hasExternalWeakLinkage(v21) & 1) != 0)
        goto LABEL_18;
      v26 = *((_DWORD *)v21 + 8);
    }
    *((_DWORD *)v21 + 8) = v26 | 0x4000;
  }
LABEL_18:
  v28[0] = (void **)v34;
  sub_22E3CEB30(v28);
  if (v31 != v33)
    free(v31);
  return v21;
}

uint64_t sub_22E5944D0(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  size_t v5;
  void *v6;
  size_t v7;
  size_t v8;
  size_t v9;
  size_t v10;
  uint64_t v11;
  const char *v12;
  unint64_t v13;
  _DWORD *v14;
  unsigned int v15;
  uint64_t GlobalVariable;
  char v17;
  _QWORD *v18;
  int v19;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  size_t v25;
  size_t v26;
  uint64_t v27;
  int v28;
  _BYTE v29[60];

  *(_QWORD *)&v29[52] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EFDE1AC(a2);
  v28 = 1596219218;
  v27 = *(_QWORD *)"OBJC_IVAR_$_";
  v6 = sub_22F3B5E40((uint64_t)v4);
  v7 = v5;
  if (v5 + 12 <= 0x40)
  {
    if (!v5)
      goto LABEL_4;
    goto LABEL_3;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod();
  if (v7)
LABEL_3:
    memcpy(v29, v6, v7);
LABEL_4:
  v8 = v7 + 12;
  v25 = v7 + 12;
  if (v7 + 13 > 0x40)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v8 = v7 + 12;
  }
  v9 = 0;
  *((_BYTE *)&v27 + v8) = 46;
  v10 = v25 + 1;
  v26 = v25 + 1;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = "";
  if ((v11 & 7) == 0)
  {
    v13 = v11 & 0xFFFFFFFFFFFFFFF8;
    if (v13)
    {
      v14 = *(_DWORD **)(v13 + 16);
      v15 = *v14;
      v12 = (const char *)(v14 + 4);
      v9 = v15;
    }
  }
  if (v9 + v10 > 0x40)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v10 = v26;
    if (!v9)
      goto LABEL_12;
    goto LABEL_11;
  }
  if (v9)
LABEL_11:
    memcpy((char *)&v27 + v10, v12, v9);
LABEL_12:
  GlobalVariable = llvm::Module::getGlobalVariable();
  if (!GlobalVariable)
  {
    GlobalVariable = llvm::User::operator new((llvm::User *)0x58);
    llvm::GlobalVariable::GlobalVariable();
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 76) == 1)
    {
      v17 = *(_BYTE *)(a2 + 88);
      v18 = sub_22EFDE1AC(a2);
      if (sub_22E49F808((uint64_t)v18))
      {
        v19 = 256;
LABEL_16:
        *(_DWORD *)(GlobalVariable + 32) = *(_DWORD *)(GlobalVariable + 32) & 0xFFFFFCFF | v19;
        return GlobalVariable;
      }
      if ((*((_BYTE *)v18 + 29) & 1) != 0)
      {
        sub_22EFC8E88((uint64_t)v18);
        v22 = *((unsigned int *)v21 + 2);
        if ((_DWORD)v22)
        {
          v23 = 8 * v22;
          for (i = *v21; *(_WORD *)(*(_QWORD *)i + 32) != 155; i += 8)
          {
            v23 -= 8;
            if (!v23)
              return GlobalVariable;
          }
        }
        else
        {
          i = *v21;
        }
        if (i != *v21 + 8 * v22 && (v17 & 7) != 1 && (v17 & 7) != 4)
        {
          v19 = 512;
          goto LABEL_16;
        }
      }
    }
  }
  return GlobalVariable;
}

uint64_t sub_22E5947B8(unint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = sub_22F3B4E88(a1);
  if (result)
  {
    result = sub_22F3B46CC(a1);
    if (result)
    {
      v3 = *(_QWORD *)(sub_22F3B46CC(a1) + 40);
      v4 = v3 & 7;
      v5 = v3 & 0xFFFFFFFFFFFFFFF8;
      if (v4)
        v6 = 1;
      else
        v6 = v5 == 0;
      if (v6)
        return 0;
      v7 = *(_QWORD *)(v5 + 16);
      return *(_DWORD *)v7 == 8 && *(_QWORD *)(v7 + 16) == 0x7463656A624F534ELL;
    }
  }
  return result;
}

uint64_t sub_22E594840(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[3];
  uint64_t v11[4];

  v11[3] = *MEMORY[0x24BDAC8D0];
  v9 = a2;
  v2 = *(_QWORD *)(a1 + 8);
  v3 = (*(_QWORD *)(*(_QWORD *)(v2 + 184) + 96) >> 41) & 3;
  if (!(_DWORD)v3)
    return 0;
  if ((_DWORD)v3 == 1)
    return 1;
  if (!*(_DWORD *)(a1 + 2936))
  {
    v11[0] = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(v2 + 144) + 15192), "alloc", 5uLL) | 1;
    sub_22F278EF4((uint64_t)v10, a1 + 2928, v11);
    v11[0] = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 15192), "class", 5uLL) | 1;
    sub_22F278EF4((uint64_t)v10, a1 + 2928, v11);
    v11[0] = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 15192), "self", 4uLL) | 1;
    sub_22F278EF4((uint64_t)v10, a1 + 2928, v11);
    v11[0] = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 15192), "isFlipped", 9uLL) | 1;
    sub_22F278EF4((uint64_t)v10, a1 + 2928, v11);
    v11[0] = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 15192), "length", 6uLL) | 1;
    sub_22F278EF4((uint64_t)v10, a1 + 2928, v11);
    v11[0] = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 15192), "count", 5uLL) | 1;
    sub_22F278EF4((uint64_t)v10, a1 + 2928, v11);
    v6 = *(_QWORD *)(a1 + 8);
    if ((*(_DWORD *)(*(_QWORD *)(v6 + 152) + 244) & 0x60000) != 0x20000)
    {
      v11[0] = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(v6 + 144) + 15192), "retain", 6uLL) | 1;
      sub_22F278EF4((uint64_t)v10, a1 + 2928, v11);
      v11[0] = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 15192), "release", 7uLL) | 1;
      sub_22F278EF4((uint64_t)v10, a1 + 2928, v11);
      v11[0] = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 15192), "autorelease", 0xBuLL) | 1;
      sub_22F278EF4((uint64_t)v10, a1 + 2928, v11);
      v6 = *(_QWORD *)(a1 + 8);
    }
    v11[0] = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(v6 + 144) + 15192), "allocWithZone", 0xDuLL) | 2;
    sub_22F278EF4((uint64_t)v10, a1 + 2928, v11);
    v11[0] = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 15192), "isKindOfClass", 0xDuLL) | 2;
    sub_22F278EF4((uint64_t)v10, a1 + 2928, v11);
    v11[0] = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 15192), "respondsToSelector", 0x12uLL) | 2;
    sub_22F278EF4((uint64_t)v10, a1 + 2928, v11);
    v11[0] = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 15192), "objectForKey", 0xCuLL) | 2;
    sub_22F278EF4((uint64_t)v10, a1 + 2928, v11);
    v11[0] = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 15192), "objectAtIndex", 0xDuLL) | 2;
    sub_22F278EF4((uint64_t)v10, a1 + 2928, v11);
    v11[0] = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 15192), "isEqualToString", 0xFuLL) | 2;
    sub_22F278EF4((uint64_t)v10, a1 + 2928, v11);
    v11[0] = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 15192), "isEqual", 7uLL) | 2;
    sub_22F278EF4((uint64_t)v10, a1 + 2928, v11);
    v7 = *(_QWORD *)(a1 + 8);
    if ((*(_BYTE *)(*(_QWORD *)(v7 + 152) + 246) & 6) != 0)
    {
      v11[0] = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(v7 + 144) + 15192), "hash", 4uLL) | 1;
      sub_22F278EF4((uint64_t)v10, a1 + 2928, v11);
      v11[0] = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 15192), "addObject", 9uLL) | 2;
      sub_22F278EF4((uint64_t)v10, a1 + 2928, v11);
      v11[0] = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 15192), "countByEnumeratingWithState", 0x1BuLL);
      v11[1] = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 15192), "objects", 7uLL);
      v11[2] = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 15192), "count", 5uLL);
      v8 = sub_22F1D3E5C(*(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 15200), 3u, v11);
      sub_22F278EF4((uint64_t)v10, a1 + 2928, &v8);
    }
  }
  return sub_22F278F7C(*(_QWORD *)(a1 + 2928), *(_DWORD *)(a1 + 2944), &v9, v10);
}

void sub_22E594D34(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  unint64_t v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  const std::string::value_type *v42;
  uint64_t v43;
  const char *v44;
  size_t v45;
  void *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  const std::string::value_type *v53;
  std::string::size_type v54;
  unsigned int v55;
  unsigned int v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _DWORD *v62;
  const std::string::value_type *v63;
  std::string::size_type v64;
  unsigned int v65;
  uint64_t GlobalVariable;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  unsigned int v81;
  llvm::GlobalValue *v82;
  int v83;
  unsigned int v84;
  llvm::Constant **v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v89;
  _OWORD v90[3];
  uint64_t v91;
  _OWORD v92[3];
  uint64_t v93;
  void *__p[2];
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  _OWORD v98[3];
  _QWORD v99[3];
  int v100;
  uint64_t v101;
  uint64_t v102;
  _OWORD v103[3];
  std::string v104;
  uint64_t v105;
  _OWORD v106[3];
  uint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  char v114;
  __int16 v115;
  uint64_t v116;
  _QWORD v117[3];
  char v118;
  void *v119;
  uint64_t v120;
  _BYTE v121[1216];
  void *v122;
  uint64_t v123;
  _BYTE v124[192];
  void *v125;
  uint64_t v126;
  _BYTE v127[16];
  void *v128;
  uint64_t v129;
  _QWORD v130[8];

  v130[5] = *MEMORY[0x24BDAC8D0];
  v119 = v121;
  v120 = 0x800000000;
  v122 = v124;
  v123 = 0x100000000;
  v125 = v127;
  v126 = 0x100000000;
  v128 = v130;
  v129 = 0x200000000;
  v130[4] = 0;
  if ((a9 & 1) == 0)
  {
    v17 = a2[319];
    LOWORD(v112) = 257;
    a7 = sub_22E3C1740(a3 + 34, 49, a7, v17, (uint64_t)&v108);
  }
  v85 = (llvm::Constant **)a7;
  v108 = a7;
  v109 = 0;
  v114 = 0;
  v115 = 0;
  v116 = a8;
  v18 = sub_22E3C187C((uint64_t)&v119, (unint64_t)&v108, 1);
  v19 = (char *)v119 + 152 * v120;
  v20 = *(_OWORD *)(v18 + 16);
  *(_OWORD *)v19 = *(_OWORD *)v18;
  *((_OWORD *)v19 + 1) = v20;
  v21 = *(_QWORD *)(v18 + 144);
  v22 = *(_OWORD *)(v18 + 128);
  v23 = *(_OWORD *)(v18 + 96);
  *((_OWORD *)v19 + 7) = *(_OWORD *)(v18 + 112);
  *((_OWORD *)v19 + 8) = v22;
  *((_QWORD *)v19 + 18) = v21;
  *((_OWORD *)v19 + 6) = v23;
  v24 = *(_OWORD *)(v18 + 80);
  v25 = *(_OWORD *)(v18 + 32);
  v26 = *(_OWORD *)(v18 + 48);
  *((_OWORD *)v19 + 4) = *(_OWORD *)(v18 + 64);
  *((_OWORD *)v19 + 5) = v24;
  *((_OWORD *)v19 + 2) = v25;
  *((_OWORD *)v19 + 3) = v26;
  LODWORD(v120) = v120 + 1;
  v27 = a2[350];
  v108 = 0;
  v109 = 0;
  v114 = 0;
  v115 = 0;
  v116 = v27;
  v28 = sub_22E3C187C((uint64_t)&v119, (unint64_t)&v108, 1);
  v29 = (char *)v119 + 152 * v120;
  v30 = *(_OWORD *)(v28 + 16);
  *(_OWORD *)v29 = *(_OWORD *)v28;
  *((_OWORD *)v29 + 1) = v30;
  v31 = *(_QWORD *)(v28 + 144);
  v32 = *(_OWORD *)(v28 + 128);
  v33 = *(_OWORD *)(v28 + 96);
  *((_OWORD *)v29 + 7) = *(_OWORD *)(v28 + 112);
  *((_OWORD *)v29 + 8) = v32;
  *((_QWORD *)v29 + 18) = v31;
  *((_OWORD *)v29 + 6) = v33;
  v34 = *(_OWORD *)(v28 + 80);
  v35 = *(_OWORD *)(v28 + 32);
  v36 = *(_OWORD *)(v28 + 48);
  *((_OWORD *)v29 + 4) = *(_OWORD *)(v28 + 64);
  *((_OWORD *)v29 + 5) = v34;
  *((_OWORD *)v29 + 2) = v35;
  *((_OWORD *)v29 + 3) = v36;
  LODWORD(v120) = v120 + 1;
  sub_22E5011A4((uint64_t)&v119, (uint64_t)v119 + 152 * v120, *(char **)a10, (char *)(*(_QWORD *)a10 + 152 * *(unsigned int *)(a10 + 8)));
  v37 = sub_22F2796B8((uint64_t)a2, a11, a5, &v119);
  v86 = v38;
  v87 = v37;
  v105 = 0;
  *((_BYTE *)&v104.__r_.__value_.__s + 23) = 1;
  LOWORD(v104.__r_.__value_.__l.__data_) = 95;
  if (sub_22F24E490((_QWORD *)a2[1], v37))
  {
    if (a9)
    {
      v39 = (void *)a2[352];
      v108 = a2[326];
      v109 = v39;
      v40 = a2[312];
      v41 = llvm::FunctionType::get();
      v42 = "objc_msgSendSuper2_stret_fixup";
      v43 = v40;
      v44 = "objc_msgSendSuper2_stret_fixup";
      v45 = 30;
      goto LABEL_12;
    }
    sub_22E588548(&v105, a3, v85);
    v48 = (void *)a2[349];
    v108 = a2[319];
    v109 = v48;
    v47 = a2[312];
    v41 = llvm::FunctionType::get();
    v42 = "objc_msgSend_stret_fixup";
    goto LABEL_11;
  }
  if ((a9 & 1) != 0)
  {
    v46 = (void *)a2[352];
    v108 = a2[326];
    v109 = v46;
    v47 = a2[312];
    v41 = llvm::FunctionType::get();
    v42 = "objc_msgSendSuper2_fixup";
LABEL_11:
    v43 = v47;
    v44 = v42;
    v45 = 24;
    goto LABEL_12;
  }
  if (sub_22E46F1EC(a2[1], a5))
  {
    v49 = (void *)a2[349];
    v108 = a2[319];
    v109 = v49;
    v47 = a2[312];
    v41 = llvm::FunctionType::get();
    v42 = "objc_msgSend_fpret_fixup";
    goto LABEL_11;
  }
  v57 = (void *)a2[349];
  v108 = a2[319];
  v109 = v57;
  v58 = a2[312];
  v41 = llvm::FunctionType::get();
  v42 = "objc_msgSend_fixup";
  v43 = v58;
  v44 = "objc_msgSend_fixup";
  v45 = 18;
LABEL_12:
  sub_22E633A04(v43, v41, v44, v45, 0, 0, 0);
  v51 = v50;
  std::string::append(&v104, v42);
  std::string::push_back(&v104, 95);
  v89 = a5;
  if ((a6 & 7) == 1)
  {
    if ((a6 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v52 = *(_DWORD **)((a6 & 0xFFFFFFFFFFFFFFF8) + 16);
      v55 = *v52;
      v53 = (const std::string::value_type *)(v52 + 4);
      v54 = v55;
    }
    else
    {
      v53 = 0;
      v54 = 0;
    }
    std::string::append(&v104, v53, v54);
  }
  else
  {
    if ((a6 & 7u) < 2)
      goto LABEL_29;
    if ((a6 & 7) == 2)
    {
      v56 = 1;
    }
    else
    {
      v56 = *(_DWORD *)(a6 & 0xFFFFFFFFFFFFFFF8) - 3;
      if (*(_DWORD *)(a6 & 0xFFFFFFFFFFFFFFF8) == 3)
        goto LABEL_29;
    }
    v59 = 0;
    v60 = v56;
    do
    {
      v61 = a6 & 0xFFFFFFFFFFFFFFF8;
      if ((a6 & 7) == 7)
        v61 = *(_QWORD *)((a6 & 0xFFFFFFFFFFFFFFF8) + 8 * v59 + 16);
      if (v61)
      {
        v62 = *(_DWORD **)(v61 + 16);
        v65 = *v62;
        v63 = (const std::string::value_type *)(v62 + 4);
        v64 = v65;
      }
      else
      {
        v63 = 0;
        v64 = 0;
      }
      std::string::append(&v104, v63, v64);
      std::string::push_back(&v104, 95);
      ++v59;
    }
    while (v60 != v59);
  }
LABEL_29:
  GlobalVariable = llvm::Module::getGlobalVariable();
  if (GlobalVariable)
    goto LABEL_30;
  v108 = a2[1];
  v109 = &v111;
  *((_QWORD *)&v106[2] + 1) = 0;
  v107 = 0;
  v106[0] = (unint64_t)&v108;
  memset(&v106[1], 0, 19);
  v118 = 1;
  memset(v117, 0, sizeof(v117));
  v111 = v51;
  v110 = 0x1000000001;
  v80 = sub_22E5837EC((uint64_t)a2, a6);
  v81 = v110;
  if (v110 >= HIDWORD(v110))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v81 = v110;
  }
  *((_QWORD *)v109 + v81) = v80;
  LODWORD(v110) = v110 + 1;
  sub_22E670C54((uint64_t *)v106, 0);
  LOWORD(v96) = 260;
  __p[0] = &v104;
  v82 = (llvm::GlobalValue *)sub_22F29F614((uint64_t)&v108);
  GlobalVariable = (uint64_t)v82;
  v83 = *((_DWORD *)v82 + 8);
  v84 = v83 & 0xFFFFFFCF | 0x10;
  *((_DWORD *)v82 + 8) = v84;
  if ((v83 & 0xFu) - 7 < 2)
    goto LABEL_56;
  if ((llvm::GlobalValue::hasExternalWeakLinkage(v82) & 1) == 0)
  {
    v84 = *(_DWORD *)(GlobalVariable + 32);
LABEL_56:
    *(_DWORD *)(GlobalVariable + 32) = v84 | 0x4000;
  }
  sub_22E582BA0((uint64_t)__p, *(_DWORD *)(*(_QWORD *)(a2[1] + 216) + 76));
  llvm::GlobalObject::setSection();
  if (SBYTE7(v95) < 0)
    operator delete(__p[0]);
  *(_QWORD *)&v106[0] = v117;
  sub_22E3CEB30((void ***)v106);
  if (v109 != &v111)
    free(v109);
LABEL_30:
  v67 = 0;
  if (a11 && (*(_WORD *)(*(_QWORD *)(a2[1] + 152) + 148) & 2) != 0)
  {
    v68 = *(unsigned int *)(a11 + 104);
    if ((_DWORD)v68)
    {
      v69 = *(uint64_t **)(a11 + 96);
      v70 = 8 * v68;
      while (!sub_22EFBF328(*v69))
      {
        ++v69;
        v70 -= 8;
        if (!v70)
          goto LABEL_36;
      }
      if (!v105)
        sub_22E588548(&v105, a3, v85);
      v67 = a11;
    }
    else
    {
LABEL_36:
      v67 = 0;
    }
  }
  v71 = a2[349];
  LOWORD(v112) = 257;
  v72 = sub_22E3C1740(a3 + 34, 49, GlobalVariable, v71, (uint64_t)&v108);
  v73 = a2[347];
  v74 = *((unsigned __int8 *)a3 + 130);
  v75 = v119;
  *((_QWORD *)v119 + 19) = v72;
  v75[20] = 0;
  *((_BYTE *)v75 + 200) = 0;
  v99[0] = v72;
  v99[1] = v73;
  v99[2] = v74;
  v100 = 0;
  v101 = 0;
  v102 = 0;
  LOWORD(v112) = 257;
  sub_22E3C408C(a3 + 34, (uint64_t)v99, 0, (uint64_t)&v108, (uint64_t)v103);
  v98[0] = v103[0];
  v98[1] = v103[1];
  v98[2] = v103[2];
  v76 = sub_22E3C43AC(a3 + 34, (uint64_t)v98, "msgSend_fn");
  LOWORD(v112) = 257;
  v77 = sub_22E3C1740(a3 + 34, 49, v76, v86, (uint64_t)&v108);
  v113 = 0;
  v110 = 0;
  v108 = v77;
  v109 = 0;
  v112 = 0;
  LODWORD(v111) = 0;
  v78 = *(_OWORD *)(a4 + 16);
  v106[0] = *(_OWORD *)a4;
  v106[1] = v78;
  v106[2] = *(_OWORD *)(a4 + 32);
  v107 = *(_QWORD *)(a4 + 48);
  sub_22E47A004((unint64_t)a3, v87, (uint64_t)&v108, (uint64_t)v106, (uint64_t)&v119, 0, 0, 0, (uint64_t)__p, 0);
  v79 = *(_OWORD *)(a4 + 16);
  v92[0] = *(_OWORD *)a4;
  v92[1] = v79;
  v92[2] = *(_OWORD *)(a4 + 32);
  v90[0] = *(_OWORD *)__p;
  v90[1] = v95;
  v93 = *(_QWORD *)(a4 + 48);
  v90[2] = v96;
  v91 = v97;
  sub_22E58869C(a1, &v105, (uint64_t)a3, (uint64_t)v92, (uint64_t)v90, v89, (uint64_t *)a10, v67);
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v104.__r_.__value_.__l.__data_);
  if (v128 != v130)
    free(v128);
  if (v125 != v127)
    free(v125);
  if (v122 != v124)
    free(v122);
  if (v119 != v121)
    free(v119);
}

void *sub_22E5955A0(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  void *result;
  uint64_t v10;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (void *)MEMORY[0x23489D23C](8 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F2790EC(a1, v4, (_QWORD *)v4 + v3);
    return (void *)llvm::deallocate_buffer(v4, (void *)(8 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
      return memset(result, 255, 8 * v10);
  }
  return result;
}

uint64_t sub_22E595664(uint64_t a1, unint64_t a2)
{
  uint64_t v3;

  v3 = sub_22E5926A0(a1, a2, 0, 0);
  if (sub_22F278E34(a2))
  {
    llvm::ConstantExpr::getPointerCast();
    llvm::ConstantInt::get();
    return llvm::ConstantExpr::getGetElementPtr();
  }
  return v3;
}

llvm::Value *sub_22E595708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::Type *v6;
  __int16 v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  llvm::Value *v13;
  uint64_t v14;
  llvm::Value *v15;
  int v16;
  uint64_t v17;
  int v18;
  __int16 v19;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x24BDAC8D0];
  if (a3 && sub_22F278E34(a3))
  {
    v20[0] = *(_QWORD *)(a1 + 2536);
    v10 = *(_QWORD *)(a1 + 2496);
    v11 = llvm::FunctionType::get();
    v17 = 0x2C00000026;
    v18 = 37;
    v12 = llvm::AttributeList::get();
    v14 = sub_22E633A04(v10, v11, "objc_loadClassref", 0x11uLL, v12, 0, 0);
    v15 = v13;
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 2496) + 216) + 76) != 1)
    {
      v16 = *((_DWORD *)v13 + 8);
      *((_DWORD *)v13 + 8) = v16 & 0xFFFFFFF0 | 9;
      if ((v16 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v13) & 1) == 0)
        *((_DWORD *)v15 + 8) |= 0x4000u;
    }
    v20[0] = a4;
    v17 = (uint64_t)"load_classref_result";
    v19 = 259;
    return sub_22E479C7C(a2, v14, v15, (uint64_t)v20, 1, (uint64_t)&v17);
  }
  else
  {
    v6 = *(llvm::Type **)(a4 + 24);
    v7 = (63 - __clz(*(unsigned __int8 *)(a2 + 130))) | 0x100;
    v19 = 257;
    return (llvm::Value *)sub_22E3C3200((uint64_t *)(a2 + 272), v6, a4, v7, 0, (uint64_t)&v17);
  }
}

llvm::Value *sub_22E5958B0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned int *v11;
  uint64_t v12;
  void **v13;
  uint64_t v14;
  _QWORD v16[4];
  __int16 v17;
  void *__p[2];
  char v19;
  uint64_t v20;

  v20 = a3;
  v8 = sub_22F24C2B0(a1 + 1248, &v20);
  v9 = v8[1];
  if (!v9)
  {
    v10 = v8;
    if (a4)
    {
      sub_22E595664(a1, a4);
    }
    else
    {
      v11 = *(unsigned int **)(a3 + 16);
      v12 = *v11;
      v16[0] = "OBJC_CLASS_$_";
      v16[1] = 13;
      v16[2] = v11 + 4;
      v16[3] = v12;
      v17 = 1285;
      llvm::Twine::str((llvm::Twine *)v16);
      if (v19 >= 0)
        v13 = __p;
      else
        v13 = (void **)__p[0];
      if (v19 >= 0)
        v14 = v19 & 0x7F;
      else
        v14 = (uint64_t)__p[1];
      sub_22E592810(a1, (uint64_t)v13, v14, 0, 0, 0);
      if (v19 < 0)
        operator delete(__p[0]);
    }
    sub_22E582BA0((uint64_t)__p, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 76));
    llvm::User::operator new((llvm::User *)0x58);
    v16[0] = "OBJC_CLASSLIST_REFERENCES_$_";
    v17 = 259;
    v10[1] = llvm::GlobalVariable::GlobalVariable();
    llvm::GlobalObject::setAlignment();
    if (!a4 || !sub_22F278E34(a4))
      llvm::GlobalObject::setSection();
    sub_22E6242E0(*(uint64_t **)(a1 + 8), v10[1]);
    if (v19 < 0)
      operator delete(__p[0]);
    v9 = v10[1];
  }
  return sub_22E595708(a1, a2, a4, v9);
}

uint64_t sub_22E595B08(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t result;

  if (!a2)
    return 0;
  v2 = a2;
  while (1)
  {
    if (a1)
    {
      if (v2 == a1)
        break;
      v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
      if (v4 == (*(uint64_t (**)(unint64_t))(*(_QWORD *)v2 + 32))(v2))
        break;
    }
    result = sub_22F3B46CC(v2);
    v2 = result;
    if (!result)
      return result;
  }
  return 1;
}

void sub_22E595B8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  llvm::Value *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  char **v21;
  uint64_t v22;
  BOOL v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned int v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  llvm::BasicBlock **v37;
  uint64_t v38;
  uint64_t FirstNonPHI;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 **v44;
  uint64_t v45;
  BOOL v46;
  char *v47;
  unint64_t v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  llvm::Type **v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 v61;
  __int128 v62;
  char *v63;
  int64_t v64;
  int v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  _QWORD *v83;
  llvm::Value *v84;
  uint64_t v85;
  _QWORD v86[2];
  int v87;
  char v88[32];
  __int16 v89;
  uint64_t v90;
  __int128 v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  _QWORD v101[42];

  v10 = MEMORY[0x24BDAC7A8]();
  v84 = v11;
  v85 = v12;
  v77 = v13;
  v72 = v14;
  v16 = v15;
  v18 = v17;
  v19 = (uint64_t *)v10;
  v101[40] = *MEMORY[0x24BDAC8D0];
  if (*(_WORD *)(v15 + 12))
  {
    LOWORD(v97) = 261;
    *(_QWORD *)&v95 = "eh.cont";
    *((_QWORD *)&v95 + 1) = 7;
    v20 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v80 = *(_QWORD *)(v18 + 2008);
    v79 = *(_DWORD *)(v18 + 2640);
    *(_DWORD *)(v18 + 2640) = v79 + 1;
  }
  else
  {
    v20 = 0;
    v79 = 0;
    v80 = -1;
  }
  v21 = sub_22E4D1FAC((_QWORD *)v18);
  v25 = v21 == &off_24FA63A80 || v21 == &off_24FA63A90 || v21 == &off_24FA63A60 || v21 == &off_24FA63A70;
  v26 = v25;
  *(_QWORD *)&v91 = 0;
  *((_QWORD *)&v91 + 1) = -1;
  v92 = 0;
  v93 = 0;
  v94 = 0;
  v27 = *(unsigned __int16 *)(v16 + 12) | (*(unsigned __int8 *)(v16 + 14) << 16);
  if (!v25 && (v27 & 0x10000) != 0)
  {
    v28 = *(_QWORD *)(v16 + 8 * (*(unsigned __int16 *)(v16 + 12) + 1) + 16);
    if (v28)
    {
      sub_22F25D358((uint64_t)&v91, v18, *(_QWORD *)(v28 + 16), v72, (uint64_t)v84, v77, v85, v22, a9, a10);
      LOWORD(v27) = *(_WORD *)(v16 + 12);
    }
  }
  v99 = v101;
  v100 = 0x800000000;
  v76 = v16;
  v81 = v26;
  if ((_WORD)v27)
  {
    v83 = v20;
    v54 = (uint64_t *)(v16 + 24);
    v55 = 8 * (unsigned __int16)v27;
    while (1)
    {
      v56 = *v54;
      v57 = *(_QWORD *)(*v54 + 8);
      v97 = 0;
      v95 = 0u;
      v96 = 0u;
      v58 = (char *)v99;
      if (v100 >= HIDWORD(v100))
      {
        if (v99 <= &v95 && (char *)v99 + 40 * v100 > (char *)&v95)
        {
          v64 = (char *)&v95 - (_BYTE *)v99;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v58 = (char *)v99;
          v59 = (char *)v99 + v64;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v59 = (char *)&v95;
          v58 = (char *)v99;
        }
      }
      else
      {
        v59 = (char *)&v95;
      }
      v60 = &v58[40 * v100];
      v61 = *(_OWORD *)v59;
      v62 = *((_OWORD *)v59 + 1);
      *((_QWORD *)v60 + 4) = *((_QWORD *)v59 + 4);
      *(_OWORD *)v60 = v61;
      *((_OWORD *)v60 + 1) = v62;
      LODWORD(v100) = v100 + 1;
      v63 = (char *)v99 + 40 * v100;
      *((_QWORD *)v63 - 5) = v57;
      *((_QWORD *)v63 - 4) = *(_QWORD *)(v56 + 16);
      *(_QWORD *)&v95 = "catch";
      LOWORD(v97) = 259;
      operator new();
      *((_QWORD *)v63 - 3) = llvm::BasicBlock::BasicBlock();
      *((_DWORD *)v63 - 2) = 0;
      if (!v57)
        break;
      *((_QWORD *)v63 - 2) = (*(uint64_t (**)(uint64_t *, _QWORD))(*v19 + 48))(v19, *(_QWORD *)(v57 + 48));
      ++v54;
      v55 -= 8;
      if (!v55)
        goto LABEL_75;
    }
    *((_QWORD *)v63 - 2) = (*(uint64_t (**)(uint64_t *))(*v19 + 56))(v19);
    *((_DWORD *)v63 - 2) = v65;
LABEL_75:
    v66 = sub_22F253090((uint64_t *)(v18 + 1984), v100);
    v16 = v76;
    v20 = v83;
    if ((_DWORD)v100)
    {
      v67 = 0;
      v68 = 40 * v100;
      v69 = v66 + 48;
      do
      {
        v70 = *(unsigned int *)((char *)v99 + v67 + 32);
        v71 = *(_QWORD *)((char *)v99 + v67 + 16);
        *(v69 - 2) = *(_QWORD *)((char *)v99 + v67 + 24);
        *(v69 - 1) = v70;
        *v69 = v71;
        v69 += 3;
        v67 += 40;
      }
      while (v68 != v67);
    }
  }
  if (v26)
  {
    if (((*(unsigned __int16 *)(v16 + 12) | (*(unsigned __int8 *)(v16 + 14) << 16)) & 0x10000) != 0)
    {
      v29 = *(_QWORD *)(v16 + 8 * (*(unsigned __int16 *)(v16 + 12) + 1) + 16);
      if (v29)
      {
        sub_22E618EBC((uint64_t)&v95, v19[1], 1);
        if (!*(_QWORD *)(v18 + 1888))
          *(_QWORD *)(v18 + 1888) = *(_QWORD *)(v18 + 1592);
        v30 = *(unsigned __int8 **)(v29 + 16);
        sub_22E4D56A4((uint64_t)&v95, v18, 0, v30);
        sub_22E5E5158((uint64_t)&v95, v30, 0, 0);
        sub_22F0D60E4((uint64_t)v30);
        sub_22E619DE8((uint64_t)&v95, v31);
        v32 = v98;
        v33 = sub_22E4899EC(v18 + 1984, 3u, 16);
        *(_QWORD *)v33 = off_24FA63A48;
        *((_QWORD *)v33 + 1) = v32;
        sub_22E619434((uint64_t)&v95);
      }
    }
  }
  v34 = v16 + 16;
  sub_22E5E5158(v18, *(unsigned __int8 **)(v16 + 16), 0, 0);
  if (*(_WORD *)(v16 + 12))
    sub_22E4D3A14((_QWORD *)v18);
  v75 = *(_QWORD *)(v18 + 320);
  v73 = *(_QWORD *)(v18 + 328);
  v74 = (uint64_t *)(v18 + 272);
  *(_QWORD *)(v18 + 320) = 0;
  *(_QWORD *)(v18 + 328) = 0;
  if ((_DWORD)v100)
  {
    v35 = 0;
    v82 = v18 + 1984;
    v78 = 40 * v100;
    do
    {
      v36 = (char *)v99;
      v37 = (llvm::BasicBlock **)((char *)v99 + v35);
      sub_22E5ED9B4((_QWORD *)v18, *(_QWORD **)((char *)v99 + v35 + 16), 0);
      v38 = *(_QWORD *)(v18 + 2616);
      if (!v26)
        goto LABEL_37;
      FirstNonPHI = llvm::BasicBlock::getFirstNonPHI(v37[2]);
      v40 = FirstNonPHI;
      if (!FirstNonPHI)
      {
        v41 = v20;
        goto LABEL_38;
      }
      if (*(_BYTE *)(FirstNonPHI + 16) == 80)
      {
        *(_QWORD *)(v18 + 2616) = FirstNonPHI;
        sub_22F25C464(v18, (uint64_t)&v95);
        if ((BYTE8(v96) & 3) != 0)
          v42 = sub_22F28ABCC(&v95, (_QWORD *)v18);
        else
          v42 = v95;
        v41 = v20;
        sub_22F2794C0(v40, 2u, v42);
      }
      else
      {
LABEL_37:
        v41 = v20;
        v40 = 0;
      }
LABEL_38:
      v90 = 0;
      v43 = sub_22F25C4D8(v18);
      v90 = v43;
      if (v84)
      {
        *(_QWORD *)&v95 = "exn.adjusted";
        LOWORD(v97) = 259;
        v43 = (uint64_t)sub_22F24EEDC(v18, v72, v84, (uint64_t)&v90, 1, (uint64_t)&v95);
      }
      v44 = (unsigned __int8 **)&v36[v35];
      sub_22F0D4E74(*(_QWORD *)&v36[v35 + 8]);
      sub_22E4889F4((uint64_t)&v95, v18, v45);
      if (v85)
      {
        v46 = *(_QWORD *)&v36[v35] == 0;
        v47 = sub_22E4899EC(v82, 3u, 32);
        *(_QWORD *)v47 = off_24FA655B8;
        v47[8] = v46;
        *((_QWORD *)v47 + 2) = v77;
        *((_QWORD *)v47 + 3) = v85;
      }
      v48 = *(_QWORD *)&v36[v35];
      if (v48)
      {
        v51 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(v18 + 144) + 280), *(llvm::LLVMContext **)(v48 + 48));
        v89 = 257;
        v52 = (llvm::Type **)sub_22E3C1740(v74, 49, v43, v51, (uint64_t)v88);
        sub_22F2596F0((_QWORD *)v18, v48);
        sub_22E59635C(v53, v18, v52, v48);
        if (!v40)
          goto LABEL_45;
LABEL_44:
        v49 = sub_22E4899EC(v82, 2u, 16);
        *(_QWORD *)v49 = &unk_24FA655E0;
        *((_QWORD *)v49 + 1) = v40;
        goto LABEL_45;
      }
      if (v40)
        goto LABEL_44;
LABEL_45:
      v50 = *(unsigned int *)(v18 + 2800);
      if (v50 >= *(unsigned int *)(v18 + 2804))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v50 = *(unsigned int *)(v18 + 2800);
      }
      *(_QWORD *)(*(_QWORD *)(v18 + 2792) + 8 * v50) = v43;
      ++*(_DWORD *)(v18 + 2800);
      sub_22E5E5158(v18, v44[1], 0, 0);
      --*(_DWORD *)(v18 + 2800);
      sub_22E488BE4((uint64_t)&v95);
      v20 = v41;
      v86[0] = v41;
      v86[1] = v80;
      v87 = v79;
      sub_22E48BA00((_QWORD *)v18, (uint64_t)v86);
      sub_22E488B4C((uint64_t)&v95);
      *(_QWORD *)(v18 + 2616) = v38;
      v35 += 40;
      v26 = v81;
    }
    while (v78 != v35);
  }
  if (v75)
  {
    sub_22E3CB840((uint64_t)v74, v75, v73);
  }
  else
  {
    *(_QWORD *)(v18 + 320) = 0;
    *(_QWORD *)(v18 + 328) = 0;
  }
  if ((v26 & 1) != 0
    || ((*(unsigned __int16 *)(v76 + 12) | (*(unsigned __int8 *)(v76 + 14) << 16)) & 0x10000) == 0
    || !*(_QWORD *)(v34 + 8 * (*(unsigned __int16 *)(v76 + 12) + 1)))
  {
    if (!v20)
      goto LABEL_61;
    goto LABEL_60;
  }
  sub_22F25D4E4(&v91, v18);
  if (v20)
LABEL_60:
    sub_22E5ED9B4((_QWORD *)v18, v20, 0);
LABEL_61:
  if (v99 != v101)
    free(v99);
}

uint64_t sub_22E59635C(uint64_t a1, uint64_t a2, llvm::Type **a3, uint64_t a4)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD v11[3];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v15 = a4;
  *(_QWORD *)&v12 = 0;
  v7 = sub_22E3CED3C((uint64_t *)(a2 + 2904), &v15, &v12);
  v8 = v12;
  if (!v7)
    v8 = *(_QWORD *)(a2 + 2904) + 56 * *(unsigned int *)(a2 + 2920);
  v12 = *(_OWORD *)(v8 + 8);
  v13 = *(_OWORD *)(v8 + 24);
  v14 = *(_OWORD *)(v8 + 40);
  v9 = *(_QWORD *)((*(_QWORD *)(a4 + 48) & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v9 & 8) != 0)
    __asm { BR              X11 }
  v11[0] = v12;
  v11[1] = v13;
  v11[2] = v14;
  return sub_22E3BEDDC(a2 + 272, a3, (uint64_t)v11);
}

void sub_22E59645C(__int128 *a1@<X8>, __int128 a2, __int128 a3, __int128 a4)
{
  uint64_t v4;
  _QWORD *v5;
  __int128 v6;

  v6 = a1[1];
  a2 = *a1;
  a3 = v6;
  a4 = a1[2];
  sub_22E5644CC(v5, &a2, v4);
  JUMPOUT(0x22E596448);
}

BOOL sub_22E596480(int a1, uint64_t a2, uint64_t a3, char a4, unint64_t a5, llvm::Value *this)
{
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  if ((a4 & 1) != 0)
    return 0;
  if (!a3 || (v8 = a5) == 0 || (*(_BYTE *)(a3 + 58) & 2) != 0)
  {
    v9 = *(_QWORD *)(a2 + 1600);
    if (!v9)
      return 1;
    if ((*(_DWORD *)(v9 + 28) & 0x7F) != 0x18)
      return 1;
    v10 = *(_QWORD *)(v9 + 120);
    v11 = *(_QWORD *)(v10 + 48);
    if ((v11 & 1) == 0 && (*(_BYTE *)((v11 & 0xFFFFFFFFFFFFFFF0) + 8) & 1) == 0)
      return 1;
    v12 = llvm::Value::stripPointerCasts(this);
    if (!v12)
      return 1;
    v13 = v12;
    if (*(_BYTE *)(v12 + 16) != 60)
      return 1;
    v21 = v10;
    *(_QWORD *)&v18 = 0;
    v14 = sub_22E3CED3C((uint64_t *)(a2 + 2904), &v21, &v18);
    v15 = v18;
    if (!v14)
      v15 = *(_QWORD *)(a2 + 2904) + 56 * *(unsigned int *)(a2 + 2920);
    v19 = *(_OWORD *)(v15 + 24);
    v18 = *(_OWORD *)(v15 + 8);
    v20 = *(_OWORD *)(v15 + 40);
    v16 = (BYTE8(v19) & 3) != 0 ? sub_22F28ABCC(&v18, (_QWORD *)a2) : v18;
    return v16 != *(_QWORD *)(v13 - 32);
  }
  do
  {
    v6 = sub_22EFCA55C(v8);
    if ((v6 & 1) != 0)
      break;
    v8 = sub_22F3B46CC(v8);
  }
  while (v8);
  return v6;
}

void sub_22E5965BC(llvm::Value *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11[3];
  _OWORD v12[3];
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v3 = *(unsigned int *)(a2 + 104);
  if ((_DWORD)v3)
  {
    v5 = *(uint64_t **)(a2 + 96);
    v6 = *a3;
    v7 = 8 * v3;
    do
    {
      v8 = *v5;
      if (sub_22F24EBE4(*v5))
      {
        sub_22E479748(v6, (uint64_t)a1, (uint64_t)&v13);
        sub_22F27328C(a1, v13, 0);
      }
      else
      {
        v9 = *(_QWORD *)(v8 + 48);
        v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        if (v10 && *(_BYTE *)(v10 + 16) == 45 && (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v10 + 24)) + 76) & 4) != 0)
        {
          sub_22E479748(v6, (uint64_t)a1, (uint64_t)&v13);
          if (sub_22F115260(v9) == 1)
          {
            v12[0] = v13;
            v12[1] = v14;
            v12[2] = v15;
            sub_22F25105C((uint64_t)a1, v12, v9);
          }
          else
          {
            v11[0] = v13;
            v11[1] = v14;
            v11[2] = v15;
            sub_22E54F920((uint64_t)a1, v11, v9);
          }
        }
      }
      ++v5;
      v6 += 152;
      v7 -= 8;
    }
    while (v7);
  }
}

void sub_22E5966F4(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v8 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 1;
  v10 = 0;
  v11 = 0;
  v9 = 0;
  v7 = MEMORY[0x24BED83D8] + 16;
  v15 = a4;
  llvm::raw_ostream::SetBufferAndMode();
  sub_22F0972FC(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 224) + 16), a2, (llvm::raw_ostream *)&v7, 1, a3);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v7);
}

llvm::Value *sub_22E59679C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  llvm::Value *v4;
  llvm::Value *result;
  _BYTE v6[32];
  __int16 v7;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(llvm::Value **)(a1 + 24);
  if (*(_BYTE *)(a1 + 8))
  {
    v7 = 257;
    result = (llvm::Value *)sub_22F24F1F4((_QWORD *)a2, v3, v4, 0, 0, (uint64_t)v6);
    *((_WORD *)result + 9) = *((_WORD *)result + 9) & 0xF003 | (4 * *(_WORD *)(a2 + 136));
  }
  else
  {
    v7 = 257;
    return sub_22F24EE8C(a2, v3, v4, (uint64_t)v6);
  }
  return result;
}

llvm::Value *sub_22E596814(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  llvm::Value *v4;
  _BYTE v6[32];
  __int16 v7;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(llvm::Value **)(a1 + 16);
  v7 = 257;
  return sub_22F24EEDC(a2, v3, v4, a1 + 24, 1, (uint64_t)v6);
}

void sub_22E596850(uint64_t a1, llvm::Type **a2, uint64_t a3)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  _QWORD v14[9];

  v14[8] = *MEMORY[0x24BDAC8D0];
  v13 = 0;
  if (a2 && a3)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0);
    v6 = v5 && *(_BYTE *)(v5 + 16) == 26;
    if (v6
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
      && (v5 = sub_22F10CF48(v5)) != 0)
    {
      v7 = *(_QWORD *)(v5 + 16);
      if ((v7 & 0x3FFFC000000000) != 0)
      {
        v8 = 0;
        v9 = (unsigned __int16)(v7 >> 38);
        do
        {
          v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 120) + 8 * v8) + 48) & 0xFFFFFFFFFFFFFFF0);
          if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
            sub_22F10ACF8(v10);
          llvm::Type::getInt32Ty(a2[42], (llvm::LLVMContext *)a2);
          llvm::ConstantInt::get();
          v11 = llvm::ValueAsMetadata::get();
          v12 = v13;
          if (v13 >= 8uLL)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v12 = v13;
          }
          v14[v12] = v11;
          ++v13;
          ++v8;
        }
        while (v9 != v8);
      }
    }
  }
  llvm::MDTuple::getImpl();
  llvm::Value::setMetadata();
}

void sub_22E596AF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  uint8x16_t v19;
  __int32 v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  _QWORD v32[10];

  v32[8] = *MEMORY[0x24BDAC8D0];
  v31 = 0;
  if (a2 && a3)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0);
    v5 = v4 && *(_BYTE *)(v4 + 16) == 26;
    if (v5
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
      && (v4 = sub_22F10CF48(v4)) != 0)
    {
      v6 = *(_QWORD *)(v4 + 16);
      if ((v6 & 0x3FFFC000000000) != 0)
      {
        v7 = 0;
        v8 = (unsigned __int16)(v6 >> 38);
        do
        {
          v9 = *(_QWORD *)(*(_QWORD *)(a3 + 120) + 8 * v7);
          v10 = *(_QWORD *)(*(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFFFF0);
          v11 = *(_QWORD *)(*(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF0);
          v12 = *(_DWORD *)(v11 + 16);
          v13 = v12 & 0xFF800FF;
          v15 = (v12 & 0xFF800FF) == 0x108000B || v13 == 17825803;
          if (v11)
          {
            *(int8x8_t *)v16.i8 = vand_s8((int8x8_t)vdup_n_s32(v12), (int8x8_t)0xFF000FF0FC000FFLL);
            v16.i64[1] = __PAIR64__(v16.u32[1], v13);
            v17 = vdupq_laneq_s32(v16, 2);
            v16.i32[3] = v12 & 0xFF800FF;
            v18 = vdupq_n_s32(v13);
            v19 = (uint8x16_t)vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v16, (int32x4_t)xmmword_22F45AEC0), (int16x8_t)vceqq_s32(v17, (int32x4_t)xmmword_22F45AEB0)), (int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v17, (int32x4_t)xmmword_22F45AED0), (int16x8_t)vceqq_s32(v17, (int32x4_t)xmmword_22F45AEE0)));
            v19.i8[0] = vmaxvq_u8(v19);
            v20 = v19.i32[0];
            *(int8x8_t *)v19.i8 = vmovn_s16(vuzp1q_s16((int16x8_t)vceqq_s32(v18, (int32x4_t)xmmword_22F45AEF0), (int16x8_t)vceqq_s32(v18, (int32x4_t)xmmword_22F45AF00)));
            v19.i8[0] = vmaxv_u8(*(uint8x8_t *)v19.i8);
            if ((v20 | v19.i32[0]) & 1 | ((v12 & 0xFF800FF) == 16777227 || v15))
              goto LABEL_20;
          }
          v26 = (v12 & 0xFF800FF) != 0x118000B || v11 == 0;
          if (!v26 || *(_DWORD *)(v11 + 16) == 38)
          {
LABEL_20:
            if (*(_BYTE *)(v10 + 16) == 50)
              v9 = *(_QWORD *)(v10 + 24);
            if ((*(_BYTE *)(v9 + 29) & 1) != 0)
            {
              sub_22EFC8E88(v9);
              v22 = *(uint64_t **)v21;
              v23 = *(unsigned int *)(v21 + 8);
              v24 = *(uint64_t **)v21;
              if ((_DWORD)v23)
              {
                v25 = 8 * v23;
                v24 = *(uint64_t **)v21;
                while (*(_WORD *)(*v24 + 32) != 491)
                {
                  ++v24;
                  v25 -= 8;
                  if (!v25)
                    goto LABEL_34;
                }
              }
              if (v24 != &v22[v23])
              {
                do
                {
                  v30 = *v22++;
                  v29 = v30;
                }
                while (*(_WORD *)(v30 + 32) != 491);
                if (!sub_22F27A238(v29))
                  sub_22F27A2BC(v29);
              }
            }
          }
LABEL_34:
          v27 = llvm::MDString::get();
          v28 = v31;
          if (v31 >= 8uLL)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v28 = v31;
          }
          v32[v28] = v27;
          ++v31;
          ++v7;
        }
        while (v7 != v8);
      }
    }
  }
  llvm::MDTuple::getImpl();
  llvm::Value::setMetadata();
}

void sub_22E596E94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  std::string *v15;
  std::string::size_type v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  uint8x16_t v25;
  __int32 v26;
  int v27;
  uint64_t v29;
  uint64_t v30;
  std::string v31;
  std::string __p;
  void *v33;
  uint64_t v34;
  _QWORD v35[10];

  v35[8] = *MEMORY[0x24BDAC8D0];
  v33 = v35;
  v34 = 0x800000000;
  if (a2 && a3)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0);
    v6 = v5 && *(_BYTE *)(v5 + 16) == 26;
    if (v6
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
      && (v5 = sub_22F10CF48(v5)) != 0)
    {
      v7 = *(_QWORD *)(v5 + 16);
      if ((v7 & 0x3FFFC000000000) != 0)
      {
        v8 = 0;
        v9 = (unsigned __int16)(v7 >> 38);
        while (1)
        {
          v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 120) + 8 * v8) + 48);
          v11 = v10 & 0xFFFFFFFFFFFFFFF0;
          v12 = *(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0);
          v13 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
          if (v13 == 38)
            break;
          if (v13 != 39)
            goto LABEL_17;
          v14 = sub_22F10ACF8(v12);
          sub_22E598094(&v31, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v14);
          v15 = std::string::append(&v31, "*");
          v16 = v15->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v16;
          v15->__r_.__value_.__l.__size_ = 0;
          v15->__r_.__value_.__r.__words[2] = 0;
          v15->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v31.__r_.__value_.__l.__data_);
LABEL_31:
          v29 = llvm::MDString::get();
          v30 = v34;
          if (v34 >= (unint64_t)HIDWORD(v34))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v30 = v34;
          }
          *((_QWORD *)v33 + v30) = v29;
          LODWORD(v34) = v34 + 1;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (v9 == ++v8)
            goto LABEL_39;
        }
        if (*(_BYTE *)(v12 + 16) != 38)
          v12 = sub_22F10CF48(v12);
        v10 = *(_QWORD *)(v12 + 32);
        v11 = v10 & 0xFFFFFFFFFFFFFFF0;
LABEL_17:
        sub_22E598094(&__p, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v10);
        v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v11 + 8) & 0xFFFFFFFFFFFFFFF0);
        v18 = *(_DWORD *)(v17 + 16);
        v19 = v18 & 0xFF800FF;
        v21 = (v18 & 0xFF800FF) == 0x108000B || v19 == 17825803;
        if (v17)
        {
          *(int8x8_t *)v22.i8 = vand_s8((int8x8_t)vdup_n_s32(v18), (int8x8_t)0xFF000FF0FC000FFLL);
          v22.i64[1] = __PAIR64__(v22.u32[1], v19);
          v23 = vdupq_laneq_s32(v22, 2);
          v22.i32[3] = v18 & 0xFF800FF;
          v24 = vdupq_n_s32(v19);
          v25 = (uint8x16_t)vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v22, (int32x4_t)xmmword_22F45AEC0), (int16x8_t)vceqq_s32(v23, (int32x4_t)xmmword_22F45AEB0)), (int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v23, (int32x4_t)xmmword_22F45AED0), (int16x8_t)vceqq_s32(v23, (int32x4_t)xmmword_22F45AEE0)));
          v25.i8[0] = vmaxvq_u8(v25);
          v26 = v25.i32[0];
          *(int8x8_t *)v25.i8 = vmovn_s16(vuzp1q_s16((int16x8_t)vceqq_s32(v24, (int32x4_t)xmmword_22F45AEF0), (int16x8_t)vceqq_s32(v24, (int32x4_t)xmmword_22F45AF00)));
          v25.i8[0] = vmaxv_u8(*(uint8x8_t *)v25.i8);
          if ((v26 | v25.i32[0]) & 1 | ((v18 & 0xFF800FF) == 16777227 || v21))
            goto LABEL_30;
        }
        v27 = v18 & 0xFF800FF;
        if (v17 && v27 == 18350091)
LABEL_30:
          sub_22E59834C(&__p);
        goto LABEL_31;
      }
    }
  }
LABEL_39:
  llvm::MDTuple::getImpl();
  llvm::Value::setMetadata();
  if (v33 != v35)
    free(v33);
}

void sub_22E597230(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  std::string *v15;
  std::string::size_type v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  uint8x16_t v25;
  __int32 v26;
  int v27;
  uint64_t v29;
  uint64_t v30;
  std::string v31;
  std::string __p;
  void *v33;
  uint64_t v34;
  _QWORD v35[10];

  v35[8] = *MEMORY[0x24BDAC8D0];
  v33 = v35;
  v34 = 0x800000000;
  if (a2 && a3)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0);
    v6 = v5 && *(_BYTE *)(v5 + 16) == 26;
    if (v6
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
      && (v5 = sub_22F10CF48(v5)) != 0)
    {
      v7 = *(_QWORD *)(v5 + 16);
      if ((v7 & 0x3FFFC000000000) != 0)
      {
        v8 = 0;
        v9 = (unsigned __int16)(v7 >> 38);
        while (1)
        {
          v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 120) + 8 * v8) + 48);
          v11 = (_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0);
          v12 = *(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0);
          v13 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
          if (v13 == 38)
            break;
          if (v13 != 39)
            goto LABEL_17;
          v14 = sub_22F10ACF8(v12);
          sub_22E598094(&v31, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF0) + 8) | v14 & 7);
          v15 = std::string::append(&v31, "*");
          v16 = v15->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v16;
          v15->__r_.__value_.__l.__size_ = 0;
          v15->__r_.__value_.__r.__words[2] = 0;
          v15->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v31.__r_.__value_.__l.__data_);
LABEL_31:
          v29 = llvm::MDString::get();
          v30 = v34;
          if (v34 >= (unint64_t)HIDWORD(v34))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v30 = v34;
          }
          *((_QWORD *)v33 + v30) = v29;
          LODWORD(v34) = v34 + 1;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (v9 == ++v8)
            goto LABEL_39;
        }
        if (*(_BYTE *)(v12 + 16) != 38)
          v12 = sub_22F10CF48(v12);
        v10 = *(_QWORD *)(v12 + 32);
        v11 = (_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0);
LABEL_17:
        sub_22E598094(&__p, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v11[1] | v10 & 7);
        v17 = *(_QWORD *)(*(_QWORD *)(*v11 + 8) & 0xFFFFFFFFFFFFFFF0);
        v18 = *(_DWORD *)(v17 + 16);
        v19 = v18 & 0xFF800FF;
        v21 = (v18 & 0xFF800FF) == 0x108000B || v19 == 17825803;
        if (v17)
        {
          *(int8x8_t *)v22.i8 = vand_s8((int8x8_t)vdup_n_s32(v18), (int8x8_t)0xFF000FF0FC000FFLL);
          v22.i64[1] = __PAIR64__(v22.u32[1], v19);
          v23 = vdupq_laneq_s32(v22, 2);
          v22.i32[3] = v18 & 0xFF800FF;
          v24 = vdupq_n_s32(v19);
          v25 = (uint8x16_t)vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v22, (int32x4_t)xmmword_22F45AEC0), (int16x8_t)vceqq_s32(v23, (int32x4_t)xmmword_22F45AEB0)), (int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v23, (int32x4_t)xmmword_22F45AED0), (int16x8_t)vceqq_s32(v23, (int32x4_t)xmmword_22F45AEE0)));
          v25.i8[0] = vmaxvq_u8(v25);
          v26 = v25.i32[0];
          *(int8x8_t *)v25.i8 = vmovn_s16(vuzp1q_s16((int16x8_t)vceqq_s32(v24, (int32x4_t)xmmword_22F45AEF0), (int16x8_t)vceqq_s32(v24, (int32x4_t)xmmword_22F45AF00)));
          v25.i8[0] = vmaxv_u8(*(uint8x8_t *)v25.i8);
          if ((v26 | v25.i32[0]) & 1 | ((v18 & 0xFF800FF) == 16777227 || v21))
            goto LABEL_30;
        }
        v27 = v18 & 0xFF800FF;
        if (v17 && v27 == 18350091)
LABEL_30:
          sub_22E59834C(&__p);
        goto LABEL_31;
      }
    }
  }
LABEL_39:
  llvm::MDTuple::getImpl();
  llvm::Value::setMetadata();
  if (v33 != v35)
    free(v33);
}

void sub_22E5975E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string::size_type size;
  const std::string::value_type *v17;
  std::string::size_type v18;
  const std::string::value_type *v19;
  uint64_t v20;
  uint64_t v21;
  std::string v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[9];

  v25[8] = *MEMORY[0x24BDAC8D0];
  v23 = v25;
  v24 = 0x800000000;
  if (a2 && a3)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0);
    v5 = v4 && *(_BYTE *)(v4 + 16) == 26;
    if (v5
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
      && (v4 = sub_22F10CF48(v4)) != 0)
    {
      v6 = *(_QWORD *)(v4 + 16);
      if ((v6 & 0x3FFFC000000000) != 0)
      {
        v7 = 0;
        v8 = (unsigned __int16)(v6 >> 38);
        do
        {
          v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 120) + 8 * v7) + 48);
          memset(&v22, 0, sizeof(v22));
          v10 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFFFF0);
          v11 = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0);
          v12 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
          if (v12 == 38)
          {
            MEMORY[0x2348A0C14](&v22, "pipe");
          }
          else if (v12 == 39)
          {
            if ((v9 & 2) != 0 || (*(_BYTE *)((v9 & 0xFFFFFFFFFFFFFFF0) + 8) & 2) != 0)
            {
              MEMORY[0x2348A0C14](&v22, "restrict");
              v11 = *v10;
            }
            v13 = sub_22F10ACF8(v11);
            v14 = v13;
            if ((v13 & 1) != 0
              || (v15 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFF0) + 8), (v15 & 1) != 0)
              || (v15 & 8) != 0 && (*(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) == 0x1800)
            {
              size = *((_BYTE *)&v22.__r_.__value_.__s + 23) & 0x7F;
              if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                size = v22.__r_.__value_.__l.__size_;
              if (size)
                v17 = " const";
              else
                v17 = "const";
              std::string::append(&v22, v17);
            }
            if ((v14 & 4) != 0 || (*(_BYTE *)((v14 & 0xFFFFFFFFFFFFFFF0) + 8) & 4) != 0)
            {
              v18 = *((_BYTE *)&v22.__r_.__value_.__s + 23) & 0x7F;
              if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v18 = v22.__r_.__value_.__l.__size_;
              if (v18)
                v19 = " volatile";
              else
                v19 = "volatile";
              std::string::append(&v22, v19);
            }
          }
          v20 = llvm::MDString::get();
          v21 = v24;
          if (v24 >= (unint64_t)HIDWORD(v24))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v21 = v24;
          }
          *((_QWORD *)v23 + v21) = v20;
          LODWORD(v24) = v24 + 1;
          if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v22.__r_.__value_.__l.__data_);
          ++v7;
        }
        while (v8 != v7);
      }
    }
  }
  llvm::MDTuple::getImpl();
  llvm::Value::setMetadata();
  if (v23 != v25)
    free(v23);
}

void sub_22E5978BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD v11[9];

  v11[8] = *MEMORY[0x24BDAC8D0];
  v10 = 0;
  if (a2 && a3)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0);
    v4 = v3 && *(_BYTE *)(v3 + 16) == 26;
    if (v4
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
      && (v3 = sub_22F10CF48(v3)) != 0)
    {
      v5 = *(_QWORD *)(v3 + 16);
      if ((v5 & 0x3FFFC000000000) != 0)
      {
        v6 = 0;
        v7 = (unsigned __int16)(v5 >> 38);
        do
        {
          v8 = llvm::MDString::get();
          v9 = v10;
          if (v10 >= 8uLL)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v9 = v10;
          }
          v11[v9] = v8;
          ++v10;
          ++v6;
        }
        while (v7 != v6);
      }
    }
  }
  llvm::MDTuple::getImpl();
  llvm::Value::setMetadata();
}

void sub_22E597A78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  llvm::LLVMContext *v15;

  if (a2 && a3 && (*(_BYTE *)(a3 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a3);
    v6 = *(uint64_t **)v5;
    v7 = *(unsigned int *)(v5 + 8);
    i = *(uint64_t **)v5;
    if ((_DWORD)v7)
    {
      v9 = 8 * v7;
      for (i = *(uint64_t **)v5; *(_WORD *)(*i + 32) != 345; ++i)
      {
        v9 -= 8;
        if (!v9)
          return;
      }
    }
    if (i != &v6[v7])
    {
      do
      {
        v11 = *v6++;
        v10 = v11;
      }
      while (*(_WORD *)(v11 + 32) != 345);
      v12 = (uint64_t *)(**(_QWORD **)(v10 + 40) & 0xFFFFFFFFFFFFFFF0);
      v13 = *v12;
      if (*v12 && *(_BYTE *)(v13 + 16) == 56)
      {
        v14 = *v12;
      }
      else
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 56)
          goto LABEL_19;
        v14 = sub_22F10CF48(v13);
        v13 = *v12;
      }
      if (sub_22F110930(v13) || !v14)
        goto LABEL_20;
      v13 = *(_QWORD *)(*(_QWORD *)(v14 + 32) & 0xFFFFFFFFFFFFFFF0);
LABEL_19:
      sub_22F110930(v13);
LABEL_20:
      sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 8) + 280), **(llvm::LLVMContext ***)(v10 + 40));
      llvm::UndefValue::get();
      llvm::ValueAsMetadata::get();
      llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 336), v15);
      llvm::ConstantInt::get();
      llvm::ValueAsMetadata::get();
      llvm::MDTuple::getImpl();
      llvm::Value::setMetadata();
    }
  }
}

void sub_22E597C44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  llvm::LLVMContext *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *i;
  uint64_t v9;
  uint64_t v10;
  llvm::LLVMContext *v11;
  llvm::LLVMContext *v12;

  if (a2 && a3 && (*(_BYTE *)(a3 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a3);
    v6 = *(uint64_t **)v4;
    v7 = *(unsigned int *)(v4 + 8);
    i = *(uint64_t **)v4;
    if ((_DWORD)v7)
    {
      v9 = 8 * v7;
      for (i = *(uint64_t **)v4; *(_WORD *)(*i + 32) != 355; ++i)
      {
        v9 -= 8;
        if (!v9)
          return;
      }
    }
    if (i != &v6[v7])
    {
      do
        v10 = *v6++;
      while (*(_WORD *)(v10 + 32) != 355);
      llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 336), v5);
      llvm::ConstantInt::get();
      llvm::ValueAsMetadata::get();
      llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 336), v11);
      llvm::ConstantInt::get();
      llvm::ValueAsMetadata::get();
      llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 336), v12);
      llvm::ConstantInt::get();
      llvm::ValueAsMetadata::get();
      llvm::MDTuple::getImpl();
      llvm::Value::setMetadata();
    }
  }
}

void sub_22E597DAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  llvm::LLVMContext *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *i;
  uint64_t v9;
  uint64_t v10;
  llvm::LLVMContext *v11;
  llvm::LLVMContext *v12;

  if (a2 && a3 && (*(_BYTE *)(a3 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a3);
    v6 = *(uint64_t **)v4;
    v7 = *(unsigned int *)(v4 + 8);
    i = *(uint64_t **)v4;
    if ((_DWORD)v7)
    {
      v9 = 8 * v7;
      for (i = *(uint64_t **)v4; *(_WORD *)(*i + 32) != 295; ++i)
      {
        v9 -= 8;
        if (!v9)
          return;
      }
    }
    if (i != &v6[v7])
    {
      do
        v10 = *v6++;
      while (*(_WORD *)(v10 + 32) != 295);
      llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 336), v5);
      llvm::ConstantInt::get();
      llvm::ValueAsMetadata::get();
      llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 336), v11);
      llvm::ConstantInt::get();
      llvm::ValueAsMetadata::get();
      llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 336), v12);
      llvm::ConstantInt::get();
      llvm::ValueAsMetadata::get();
      llvm::MDTuple::getImpl();
      llvm::Value::setMetadata();
    }
  }
}

void sub_22E597F14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  llvm::LLVMContext *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *i;
  uint64_t v9;
  uint64_t v10;

  if (a2 && a3 && (*(_BYTE *)(a3 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a3);
    v6 = *(uint64_t **)v4;
    v7 = *(unsigned int *)(v4 + 8);
    i = *(uint64_t **)v4;
    if ((_DWORD)v7)
    {
      v9 = 8 * v7;
      for (i = *(uint64_t **)v4; *(_WORD *)(*i + 32) != 270; ++i)
      {
        v9 -= 8;
        if (!v9)
          return;
      }
    }
    if (i != &v6[v7])
    {
      do
        v10 = *v6++;
      while (*(_WORD *)(v10 + 32) != 270);
      llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 336), v5);
      llvm::ConstantInt::get();
      llvm::ValueAsMetadata::get();
      llvm::MDTuple::getImpl();
      llvm::Value::setMetadata();
    }
  }
}

unsigned __int8 *sub_22E598034(unsigned __int8 *result)
{
  unsigned __int8 *v1;
  int v2;
  BOOL v3;

  v1 = result;
  if (*result != 114)
  {
    do
    {
      result = sub_22F3C22D4(v1);
      v2 = *result;
      if (v2 == 161)
      {
        result = (unsigned __int8 *)sub_22EFBC5B4(*((_QWORD *)result + 2));
        v2 = *result;
      }
      v3 = v2 == 114 || result == v1;
      v1 = result;
    }
    while (!v3);
  }
  return result;
}

void sub_22E598094(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void **v7;
  unint64_t v8;
  size_t v9;
  size_t v12;
  void **v13;
  void **p_dst;
  uint64_t v15;
  uint64_t v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  void **__dst;
  std::string::size_type v24;
  int64_t v25;
  std::string v26;
  void *__p[2];
  uint64_t v28;

  v4 = a2 + 15104;
  v5 = a3 & 0xFFFFFFFFFFFFFFF0;
  v6 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v6 + 8) & 0xF) != 0)
    v6 = (unint64_t)sub_22F10D2BC(a3);
  v26.__r_.__value_.__r.__words[0] = v6 & 0xFFFFFFFFFFFFFFF0;
  __p[1] = 0;
  v28 = 0;
  __p[0] = 0;
  v7 = __p;
  sub_22F119374((uint64_t *)&v26, (__int128 *)__p, v4);
  if (*(_QWORD *)(*(_QWORD *)v5 + 8) != (*(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF0))
    goto LABEL_19;
  if (v28 < 0)
    v7 = (void **)__p[0];
  v8 = HIBYTE(v28) & 0x7F;
  if (v28 < 0)
    v8 = (unint64_t)__p[1];
  v9 = v8 - 9;
  if (v8 < 9)
  {
    if (v8 < 7)
    {
LABEL_19:
      *(_OWORD *)a1 = *(_OWORD *)__p;
      a1[2] = v28;
      __p[1] = 0;
      v28 = 0;
      __p[0] = 0;
      goto LABEL_20;
    }
LABEL_15:
    if (*(_DWORD *)v7 != 1852270963 || *(_DWORD *)((char *)v7 + 3) != 543450478)
      goto LABEL_19;
    if (!v7)
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      goto LABEL_20;
    }
    v12 = v8 - 7;
    if (v8 - 7 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v12 >= 0x17)
      {
        v20 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v20 = v12 | 7;
        v21 = v20 + 1;
        v22 = operator new(v20 + 1);
        a1[1] = v12;
        a1[2] = v21 | 0x8000000000000000;
        *a1 = v22;
        a1 = v22;
      }
      else
      {
        *((_BYTE *)a1 + 23) = v12;
        if (v8 < 8)
          goto LABEL_54;
      }
      memmove(a1, (char *)v7 + 7, v12);
LABEL_54:
      *((_BYTE *)a1 + v12) = 0;
      goto LABEL_20;
    }
LABEL_55:
    abort();
  }
  if (*v7 != (void *)0x64656E6769736E75 || *((_BYTE *)v7 + 8) != 32)
    goto LABEL_15;
  if (v28 >= 0)
    v13 = __p;
  else
    v13 = (void **)__p[0];
  *((_BYTE *)&v26.__r_.__value_.__s + 23) = 1;
  LOWORD(v26.__r_.__value_.__l.__data_) = 117;
  if (v9 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_55;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    p_dst = (void **)operator new(v15 + 1);
    v24 = v9;
    v25 = v16 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v25) = v8 - 9;
    p_dst = (void **)&__dst;
    if (v8 < 0xA)
      goto LABEL_39;
  }
  memmove(p_dst, (char *)v13 + 9, v9);
LABEL_39:
  *((_BYTE *)p_dst + v9) = 0;
  if (v25 >= 0)
    v17 = (const std::string::value_type *)&__dst;
  else
    v17 = (const std::string::value_type *)__dst;
  if (v25 >= 0)
    v18 = HIBYTE(v25) & 0x7F;
  else
    v18 = v24;
  v19 = std::string::append(&v26, v17, v18);
  *(std::string *)a1 = *v19;
  v19->__r_.__value_.__r.__words[0] = 0;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v25) < 0)
    operator delete(__dst);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
LABEL_20:
  if (SHIBYTE(v28) < 0)
    operator delete(__p[0]);
}

std::string *sub_22E59834C(std::string *result)
{
  int v1;
  std::string *v2;
  uint64_t size;
  std::string *v4;
  std::string *v5;
  std::string *v6;
  uint64_t v7;
  std::string::size_type v9;
  std::string *v10;
  std::string::size_type v11;
  uint64_t v12;
  std::string *v13;
  std::string *v14;
  _BYTE v17[11];

  qmemcpy(v17, "__read_only", sizeof(v17));
  v1 = SHIBYTE(result->__r_.__value_.__r.__words[2]);
  if (v1 >= 0)
    v2 = result;
  else
    v2 = (std::string *)result->__r_.__value_.__r.__words[0];
  if (v1 >= 0)
    size = HIBYTE(result->__r_.__value_.__r.__words[2]);
  else
    size = result->__r_.__value_.__l.__size_;
  if (size >= 11)
  {
    v4 = result;
    v5 = v2;
    v6 = (std::string *)((char *)v2 + size);
    v7 = size;
    result = v2;
    while (1)
    {
      result = (std::string *)memchr(result, 95, v7 - 10);
      if (!result)
        goto LABEL_19;
      if (result->__r_.__value_.__r.__words[0] == *(_QWORD *)"__read_only"
        && *(std::string::size_type *)((char *)result->__r_.__value_.__r.__words + 3) == *(_QWORD *)&v17[3])
      {
        break;
      }
      result = (std::string *)((char *)result + 1);
      v7 = (char *)v6 - (char *)result;
      if ((char *)v6 - (char *)result < 11)
        goto LABEL_19;
    }
    if (result != v6)
    {
      v9 = (char *)result - (char *)v2;
      if ((char *)result - (char *)v2 != -1)
      {
        v10 = v4;
        v11 = 12;
        return std::string::erase(v10, v9, v11);
      }
    }
LABEL_19:
    if (size <= 11)
      return result;
    v12 = size;
    v13 = v2;
    while (1)
    {
      v14 = (std::string *)memchr(v13, 95, v12 - 11);
      if (!v14)
        goto LABEL_30;
      if (v14->__r_.__value_.__r.__words[0] == *(_QWORD *)"__write_only"
        && LODWORD(v14->__r_.__value_.__r.__words[1]) == 2037149295)
      {
        break;
      }
      v13 = (std::string *)((char *)&v14->__r_.__value_.__l.__data_ + 1);
      v12 = (char *)v6 - (char *)v13;
      if ((char *)v6 - (char *)v13 < 12)
        goto LABEL_30;
    }
    if (v14 != v6)
    {
      v9 = (char *)v14 - (char *)v2;
      if ((char *)v14 - (char *)v2 != -1)
      {
LABEL_39:
        v10 = v4;
        v11 = 13;
        return std::string::erase(v10, v9, v11);
      }
    }
LABEL_30:
    do
    {
      result = (std::string *)memchr(v5, 95, size - 11);
      if (!result)
        break;
      if (result->__r_.__value_.__r.__words[0] == *(_QWORD *)"__read_write"
        && LODWORD(result->__r_.__value_.__r.__words[1]) == 1702127986)
      {
        if (result == v6)
          return result;
        v9 = (char *)result - (char *)v2;
        if ((char *)result - (char *)v2 == -1)
          return result;
        goto LABEL_39;
      }
      v5 = (std::string *)((char *)&result->__r_.__value_.__l.__data_ + 1);
      size = (char *)v6 - ((char *)&result->__r_.__value_.__l.__data_ + 1);
    }
    while (size >= 12);
  }
  return result;
}

uint64_t sub_22E598530(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  int v12;
  void *v14[2];
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  void *__p;
  char v19;
  uint64_t v20;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 16;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)a1 = off_24FA656B0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 96) = llvm::Triple::getAIRVersion((llvm::Triple *)(*(_QWORD *)(a2 + 216) + 32));
  *(_QWORD *)(a1 + 104) = v4;
  llvm::Triple::getEffectiveMacCatalystVariant((llvm::Triple *)(*(_QWORD *)(a2 + 216) + 32));
  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_DWORD *)(v5 + 64) = 0;
  v20 = v5;
  llvm::air::AIRTargetInfoBuilder::setABI();
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 216) + 448))(*(_QWORD *)(a2 + 216));
  v6 = llvm::air::AIRTargetInfoBuilder::setABI();
  v7 = *(_QWORD *)(v6 + 48);
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)(a1 + 112) = v7;
  v8 = v20;
  v20 = 0;
  if (v8)
    MEMORY[0x2348A0E9C](v8, 0x1000C4069DB8102);
  if (v19 < 0)
    operator delete(__p);
  v9 = *(_QWORD *)(a2 + 232);
  v10 = *(_QWORD *)(a2 + 216);
  if (*(char *)(v10 + 55) < 0)
  {
    sub_22E3BB2B4(v14, *(void **)(v10 + 32), *(_QWORD *)(v10 + 40));
  }
  else
  {
    *(_OWORD *)v14 = *(_OWORD *)(v10 + 32);
    v15 = *(_QWORD *)(v10 + 48);
  }
  v16 = *(_OWORD *)(v10 + 56);
  v17 = *(_QWORD *)(v10 + 72);
  *(_QWORD *)(a1 + 120) = v9;
  v11 = (_BYTE *)(a1 + 128);
  if (SHIBYTE(v15) < 0)
  {
    sub_22E3BB2B4(v11, v14[0], (unint64_t)v14[1]);
    v12 = SHIBYTE(v15);
    *(_OWORD *)(a1 + 152) = v16;
    *(_QWORD *)(a1 + 168) = v17;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_OWORD *)(a1 + 192) = 0u;
    *(_OWORD *)(a1 + 208) = 0u;
    *(_OWORD *)(a1 + 224) = 0u;
    *(_OWORD *)(a1 + 240) = 0u;
    *(_OWORD *)(a1 + 256) = 0u;
    *(_OWORD *)(a1 + 272) = 0u;
    *(_OWORD *)(a1 + 288) = 0u;
    *(_OWORD *)(a1 + 304) = 0u;
    *(_OWORD *)(a1 + 320) = 0u;
    *(_OWORD *)(a1 + 336) = 0u;
    *(_OWORD *)(a1 + 352) = 0u;
    *(_OWORD *)(a1 + 368) = 0u;
    *(_OWORD *)(a1 + 384) = 0u;
    *(_OWORD *)(a1 + 400) = 0u;
    *(_OWORD *)(a1 + 416) = 0u;
    *(_OWORD *)(a1 + 432) = 0u;
    *(_OWORD *)(a1 + 448) = 0u;
    *(_OWORD *)(a1 + 464) = 0u;
    *(_OWORD *)(a1 + 480) = 0u;
    *(_OWORD *)(a1 + 496) = 0u;
    *(_OWORD *)(a1 + 512) = 0u;
    *(_OWORD *)(a1 + 528) = 0u;
    if (v12 < 0)
      operator delete(v14[0]);
  }
  else
  {
    *(_OWORD *)v11 = *(_OWORD *)v14;
    *(_QWORD *)(a1 + 144) = v15;
    *(_OWORD *)(a1 + 152) = v16;
    *(_QWORD *)(a1 + 168) = v17;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_OWORD *)(a1 + 192) = 0u;
    *(_OWORD *)(a1 + 208) = 0u;
    *(_OWORD *)(a1 + 224) = 0u;
    *(_OWORD *)(a1 + 240) = 0u;
    *(_OWORD *)(a1 + 256) = 0u;
    *(_OWORD *)(a1 + 272) = 0u;
    *(_OWORD *)(a1 + 288) = 0u;
    *(_OWORD *)(a1 + 304) = 0u;
    *(_OWORD *)(a1 + 320) = 0u;
    *(_OWORD *)(a1 + 336) = 0u;
    *(_OWORD *)(a1 + 352) = 0u;
    *(_OWORD *)(a1 + 368) = 0u;
    *(_OWORD *)(a1 + 384) = 0u;
    *(_OWORD *)(a1 + 400) = 0u;
    *(_OWORD *)(a1 + 416) = 0u;
    *(_OWORD *)(a1 + 432) = 0u;
    *(_OWORD *)(a1 + 448) = 0u;
    *(_OWORD *)(a1 + 464) = 0u;
    *(_OWORD *)(a1 + 480) = 0u;
    *(_OWORD *)(a1 + 496) = 0u;
    *(_OWORD *)(a1 + 512) = 0u;
    *(_OWORD *)(a1 + 528) = 0u;
  }
  *(_QWORD *)(a1 + 544) = llvm::air::AIRFunctionInfo::createAIRFunctionInfo();
  *(_OWORD *)(a1 + 552) = 0u;
  *(_DWORD *)(a1 + 568) = 0;
  *(_QWORD *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 584) = 0;
  return a1;
}

llvm::Value *sub_22E598798(uint64_t a1, uint64_t a2)
{
  uint64_t Declaration;
  uint64_t v4;
  uint64_t v5;
  llvm::Value *result;
  _BYTE v7[32];
  __int16 v8;

  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 544) + 64))(*(_QWORD *)(a1 + 544), 7692);
  Declaration = llvm::air::AIRFunctionInfo::getDeclaration();
  v4 = Declaration;
  if (Declaration)
    v5 = *(_QWORD *)(Declaration + 24);
  else
    v5 = 0;
  v8 = 257;
  result = sub_22E462B78((uint64_t *)(a2 + 272), v5, Declaration, 0, 0, (uint64_t)v7, 0);
  *((_QWORD *)result + 8) = *(_QWORD *)(v4 + 112);
  return result;
}

BOOL sub_22E598830(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  uint8x16_t v25;
  __int32 v26;
  int v27;
  BOOL v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v34;
  unsigned int v36[8];

  v4 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (v4)
    v5 = *(_BYTE *)(v4 + 16) == 26;
  else
    v5 = 0;
  if (!v5
    && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26 || (v4 = sub_22F10CF48(v4)) == 0)
    || (v6 = *(_QWORD *)(v4 + 16), (v6 & 0x3FFFC000000000) == 0))
  {
    v7 = 0;
    v8 = 0;
    v11 = 0;
    v30 = *(unsigned int **)(a1 + 112);
    v31 = *v30;
    v32 = v30[1];
    goto LABEL_49;
  }
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v34 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 8 * (unsigned __int16)(v6 >> 38);
  do
  {
    v13 = *(_QWORD *)(*(_QWORD *)a3 + 48) & 0xFFFFFFFFFFFFFFF0;
    v14 = *(_QWORD *)v13;
    if (*(_QWORD *)v13 && *(_BYTE *)(v14 + 16) == 39)
    {
LABEL_12:
      v16 = *(_DWORD *)((*(_QWORD *)((*(_QWORD *)(v14 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11;
      if (v16 == 3)
      {
        ++v8;
      }
      else if (v16 == 2)
      {
        ++v9;
      }
      else
      {
        ++v7;
      }
      goto LABEL_37;
    }
    v15 = *(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0;
    if (*(_BYTE *)(*(_QWORD *)v15 + 16) == 39)
    {
      v14 = sub_22F10CF48(v14);
      if (v14)
        goto LABEL_12;
      v14 = *(_QWORD *)v13;
      v15 = *(_QWORD *)(*(_QWORD *)v13 + 8) & 0xFFFFFFFFFFFFFFF0;
    }
    v17 = *(_QWORD *)v15;
    v18 = *(_DWORD *)(v17 + 16);
    v19 = v18 & 0xFF800FF;
    v21 = (v18 & 0xFF800FF) == 0x108000B || v19 == 17825803;
    if (v17)
    {
      *(int8x8_t *)v22.i8 = vand_s8((int8x8_t)vdup_n_s32(v18), (int8x8_t)0xFF000FF0FC000FFLL);
      v22.i64[1] = __PAIR64__(v22.u32[1], v19);
      v23 = vdupq_laneq_s32(v22, 2);
      v22.i32[3] = v18 & 0xFF800FF;
      v24 = vdupq_n_s32(v19);
      v25 = (uint8x16_t)vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v22, (int32x4_t)xmmword_22F45AEC0), (int16x8_t)vceqq_s32(v23, (int32x4_t)xmmword_22F45AEB0)), (int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v23, (int32x4_t)xmmword_22F45AED0), (int16x8_t)vceqq_s32(v23, (int32x4_t)xmmword_22F45AEE0)));
      v25.i8[0] = vmaxvq_u8(v25);
      v26 = v25.i32[0];
      *(int8x8_t *)v25.i8 = vmovn_s16(vuzp1q_s16((int16x8_t)vceqq_s32(v24, (int32x4_t)xmmword_22F45AEF0), (int16x8_t)vceqq_s32(v24, (int32x4_t)xmmword_22F45AF00)));
      v25.i8[0] = vmaxv_u8(*(uint8x8_t *)v25.i8);
      if ((v26 | v25.i32[0]) & 1 | ((v18 & 0xFF800FF) == 16777227 || v21))
        goto LABEL_36;
    }
    v27 = v18 & 0xFF800FF;
    if (v17 && v27 == 18350091)
    {
LABEL_36:
      ++v10;
    }
    else
    {
      if (v17)
        v29 = v19 == 116391947;
      else
        v29 = 0;
      if (v29)
      {
        ++v34;
      }
      else
      {
        ++v8;
        sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v14, (uint64_t)v36);
        if (v11 <= v36[0])
          v11 = v36[0];
      }
    }
LABEL_37:
    a3 += 8;
    v12 -= 8;
  }
  while (v12);
  v30 = *(unsigned int **)(a1 + 112);
  v31 = *v30;
  if (v7 > *v30)
    return 0;
  v32 = v30[1];
  if (v8 > v32 || v9 > v30[3] || v10 > v30[4] || v34 > v30[6])
    return 0;
LABEL_49:
  if (v31 <= v32)
    v31 = v32;
  return v8 + v7 <= v31 && v11 < v30[2];
}

uint64_t sub_22E598B7C(uint64_t a1, uint64_t a2, uint64_t a3, int8x16_t a4)
{
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int8x16_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  BOOL v20;
  BOOL v21;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  llvm::Type *Context;
  llvm::LLVMContext *v63;
  uint64_t Int8Ty;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  unsigned int v73;
  uint64_t v74;
  llvm::BasicBlock *v75;
  llvm::Type *v76;
  int8x16_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t *v80;
  int8x16_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  llvm::Type ***v88;
  llvm::LLVMContext *v89;
  llvm::Type *v90;
  llvm::DataLayout *v91;
  uint64_t *v92;
  llvm::GetElementPtrInst *v93;
  void **p_p;
  uint64_t v95;
  int v96;
  llvm::Type *v98;
  llvm::Type *v100;
  llvm::DataLayout *v101;
  uint64_t v102;
  uint64_t v103;
  llvm::Type *v104;
  llvm::DataLayout *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  llvm::Type *v109;
  uint64_t v110;
  llvm::DataLayout *v111;
  uint64_t v112;
  llvm::LLVMContext *v113;
  llvm::AttributeSet *v114;
  llvm::LLVMContext *v115;
  const llvm::AttrBuilder *v116;
  llvm::Type *v117;
  llvm::DataLayout *DataLayout;
  uint64_t v119;
  llvm::DataLayout *v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  char *v127;
  char *v128;
  char *v129;
  char *v130;
  char *v131;
  char *v132;
  uint64_t v133;
  llvm::Value *v134;
  uint64_t *v137;
  uint64_t v138;
  char v139;
  int8x16_t v140;
  uint64_t *v141;
  int8x16_t v142;
  uint64_t v143;
  _BYTE v145[32];
  __int16 v146;
  void *__p;
  char v148;
  __int16 v149;
  const char *v150;
  void *v151;
  uint64_t Name;
  uint64_t v153;
  __int16 v154;
  void *v155;
  uint64_t v156;
  _QWORD v157[2];
  __int16 v158;
  void *v159;
  uint64_t v160;
  _QWORD v161[2];
  __int16 v162;
  void *v163;
  uint64_t v164;
  _QWORD v165[2];
  __int16 v166;
  uint64_t v167;
  uint64_t v168;
  llvm::Type *v169;
  uint64_t *v170;
  uint64_t *v171;
  uint64_t v172;
  int v173;
  __int16 v174;
  char v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  _QWORD v182[10];

  v6 = a3;
  v182[8] = *MEMORY[0x24BDAC8D0];
  v180 = v182;
  v181 = 0x800000000;
  v8 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v8)
    v9 = *(_BYTE *)(v8 + 16) == 26;
  else
    v9 = 0;
  v10 = (unint64_t)&unk_22F45A000;
  if ((v9
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
     && (v8 = sub_22F10CF48(v8)) != 0)
    && (v11 = *(_QWORD *)(v8 + 16), (v11 & 0x3FFFC000000000) != 0))
  {
    v12 = 0;
    v13 = (unsigned __int16)(v11 >> 38);
    a4.i32[0] = 264241407;
    v142 = a4;
    v14 = (int8x16_t)xmmword_22F45AEA0;
    v139 = -1;
    do
    {
      v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 120) + 8 * v12) + 48);
      v16 = *(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0);
      v17 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v17 == 39)
      {
        v18 = *(_DWORD *)((*(_QWORD *)((sub_22F10ACF8(v16) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11;
        if (v18 != 1)
        {
          if (v18 == 2)
          {
            v15 = sub_22EF5B0AC(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 15088)+ *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 15088) - 24)+ 120));
          }
          else
          {
            v29 = sub_22EF5BA38(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v15);
            v30 = sub_22E59BB88(a1, v29);
            if (HIDWORD(v30))
              v31 = *(_DWORD *)(*(_QWORD *)(a1 + 112) + 8) >= v30;
            else
              v31 = 1;
            if (!v31)
            {
              v32 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
              v33 = *(_QWORD *)(v32 + 16392);
              v34 = sub_22F10ACF8(*(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0));
              v35 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFFFF0) + 8);
              if ((v35 & 8) != 0)
              {
                v37 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFFFF0) + 0x18);
                v36 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
              }
              else
              {
                v36 = 0;
                v37 = 0;
              }
              v38 = v37 | (v35 | v34) & 7;
              if (((v38 | v36) & 0xCFFFFFFF8) != 0)
              {
                v163 = (void *)(v38 | v36);
                v39 = sub_22E491354((unsigned int *)&v163, v33);
                v40 = sub_22EF5DBC4(v32, v39, (uint64_t)v163);
              }
              else
              {
                v40 = v38 & 7 | v33;
              }
              v41 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
              v10 = v10 & 0xFFFFFFFF00000000 | v139 & 0xE0;
              v42 = sub_22EF5B848(v41, v40, v10);
              v43 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFF0) + 8);
              if ((v43 & 8) != 0)
              {
                v45 = *(_QWORD *)((v43 & 0xFFFFFFFFFFFFFFF0) + 0x18);
                v44 = *(_QWORD *)((v43 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
              }
              else
              {
                v44 = 0;
                v45 = 0;
              }
              v139 &= 0xE0u;
              v46 = v45 | (v43 | v15) & 7;
              if (((v46 | v44) & 0xCFFFFFFF8) != 0)
              {
                v163 = (void *)(v46 | v44);
                v47 = sub_22E491354((unsigned int *)&v163, v42);
                v15 = sub_22EF5DBC4(v41, v47, (uint64_t)v163);
              }
              else
              {
                v15 = v46 & 7 | v42;
              }
            }
          }
        }
      }
      else
      {
        v14.i32[0] = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
        if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqq_s32(vdupq_lane_s32((int32x2_t)*(_OWORD *)&vandq_s8(v14, v142), 0), (int32x4_t)xmmword_22F45AEA0))) & 1) == 0)
        {
          v19 = v17 & 0xFF800FF;
          v20 = (v17 & 0xFF000FF) == 0x100000B || v19 == 17825803;
          v21 = v20 || v19 == 18350091;
          if (!v21 && v19 != 116391947)
          {
            v23 = sub_22E59BB88(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 120) + 8 * v12) + 48));
            v24 = *(_QWORD *)(a1 + 8);
            if (HIDWORD(v23))
              v25 = *(_DWORD *)(*(_QWORD *)(a1 + 112) + 8) >= v23;
            else
              v25 = 1;
            if (!v25)
            {
              v26 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFF0) + 8);
              if ((v26 & 8) != 0)
              {
                v28 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFFFF0) + 0x18);
                v27 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
              }
              else
              {
                v27 = 0;
                v28 = 0;
              }
              v48 = *(_QWORD *)(v24 + 144);
              v49 = *(_QWORD *)(v48 + 16392);
              v50 = v28 | (v26 | v15) & 7;
              if (((v50 | v27) & 0xCFFFFFFF8) != 0)
              {
                v163 = (void *)(v50 | v27);
                v51 = sub_22E491354((unsigned int *)&v163, v49);
                v15 = sub_22EF5DBC4(v48, v51, (uint64_t)v163);
                v24 = *(_QWORD *)(a1 + 8);
              }
              else
              {
                v15 = v50 & 7 | v49;
              }
            }
            v52 = *(_QWORD *)(v24 + 144);
            v53 = sub_22EF5DEB0(v52, v15);
            v54 = sub_22EF5DD84(v52, v53, 3);
            v4 = v4 & 0xFFFFFFFF00000000 | v5 & 0xE0;
            v15 = sub_22EF5B848(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v54, v4);
            v5 &= 0xFFFFFFE0;
          }
        }
      }
      v55 = sub_22E66C868(*(_QWORD *)(a1 + 8) + 280, v15, 0);
      v56 = v181;
      if (v181 >= (unint64_t)HIDWORD(v181))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v56 = v181;
      }
      v180[v56] = v55;
      v57 = v181 + 1;
      LODWORD(v181) = v181 + 1;
      ++v12;
    }
    while (v13 != v12);
    v6 = a3;
  }
  else
  {
    v57 = v181;
  }
  if (v57)
  {
    v158 = 1283;
    v155 = "__";
    v157[0] = llvm::Value::getName((llvm::Value *)v6);
    v157[1] = v58;
    v159 = &v155;
    v161[0] = "_args";
    v162 = 770;
    llvm::Twine::str((llvm::Twine *)&v159);
    v59 = llvm::StructType::create();
  }
  else
  {
    llvm::Function::getContext((llvm::Function *)v6);
    v154 = 1283;
    v150 = "__";
    Name = llvm::Value::getName((llvm::Value *)v6);
    v153 = v60;
    v163 = &v150;
    v165[0] = "_args";
    v166 = 770;
    llvm::Twine::str((llvm::Twine *)&v163);
    v59 = llvm::StructType::create();
  }
  v61 = v59;
  if (v148 < 0)
    operator delete(__p);
  Context = (llvm::Type *)llvm::Function::getContext((llvm::Function *)v6);
  Int8Ty = llvm::Type::getInt8Ty(Context, v63);
  v163 = (void *)llvm::PointerType::get();
  v138 = Int8Ty;
  v164 = llvm::PointerType::get();
  v65 = llvm::FunctionType::get();
  v66 = llvm::Value::getName((llvm::Value *)v6);
  v166 = 1283;
  v163 = "__entry_";
  v165[0] = v66;
  v165[1] = v67;
  v68 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 200);
  v69 = llvm::User::operator new((llvm::User *)0x78);
  v70 = MEMORY[0x23489F6FC](v69, v65, 0, 0xFFFFFFFFLL, &v163, v68);
  v71 = *(_DWORD *)(v6 + 32) & 0x30;
  v72 = *(_DWORD *)(v70 + 32);
  v73 = v72 & 0xFFFFFFCF | v71;
  *(_DWORD *)(v70 + 32) = v73;
  if ((v72 & 0xFu) - 7 >= 2)
  {
    if (!v71 || (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v69) & 1) != 0)
      goto LABEL_64;
    v73 = *(_DWORD *)(v69 + 32);
  }
  *(_DWORD *)(v69 + 32) = v73 | 0x4000;
LABEL_64:
  llvm::Function::getContext((llvm::Function *)v69);
  v163 = "entry";
  v166 = 259;
  v74 = operator new();
  v75 = (llvm::BasicBlock *)llvm::BasicBlock::BasicBlock();
  v76 = (llvm::Type *)llvm::BasicBlock::getContext(v75);
  v163 = v165;
  v164 = 0x200000000;
  v169 = v76;
  v170 = &v178;
  v171 = &v179;
  v172 = 0;
  v173 = 0;
  v174 = 512;
  v175 = 7;
  v177 = 0;
  v176 = 0;
  v178 = MEMORY[0x24BED83B8] + 16;
  v179 = MEMORY[0x24BED83F0] + 16;
  v167 = v74;
  v168 = v74 + 40;
  v159 = v161;
  v160 = 0x800000000;
  v155 = v157;
  v77.i32[1] = 6;
  v156 = 0x600000000;
  if ((*(_BYTE *)(v69 + 18) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments((llvm::Function *)v69);
    v78 = *(uint64_t **)(v69 + 88);
    v141 = v78;
    if ((*(_WORD *)(v69 + 18) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments((llvm::Function *)v69);
      v78 = *(uint64_t **)(v69 + 88);
    }
  }
  else
  {
    v78 = *(uint64_t **)(v69 + 88);
    v141 = v78;
  }
  if ((*(_WORD *)(v6 + 18) & 1) != 0)
    llvm::Function::BuildLazyArguments((llvm::Function *)v6);
  v143 = *(unsigned int *)(v61 + 12);
  if (!(_DWORD)v143)
  {
LABEL_130:
    v133 = *(_QWORD *)(v6 + 24);
    goto LABEL_132;
  }
  v79 = 0;
  v137 = v78 + 5;
  v80 = *(uint64_t **)(v6 + 88);
  v77.i32[0] = 264241407;
  v140 = v77;
  v81 = (int8x16_t)xmmword_22F45AEA0;
  do
  {
    v82 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 120) + 8 * v79) + 48);
    v83 = *(_QWORD *)(v82 & 0xFFFFFFFFFFFFFFF0);
    v84 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v83 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    if (v84 != 39)
    {
      v81.i32[0] = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v83 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
      if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqq_s32(vdupq_lane_s32((int32x2_t)*(_OWORD *)&vandq_s8(v81, v140), 0), (int32x4_t)xmmword_22F45AEA0))) & 1) == 0)
      {
        v96 = v84 & 0xFF800FF;
        if ((v84 & 0xFF000FF) != 0x100000B && v96 != 17825803)
        {
          v98 = *(llvm::Type **)(*(_QWORD *)(v61 + 16) + 8 * v79);
          if (v84 == 11)
          {
            if ((v84 & 0xFF80000) != 0x1180000 && v96 != 116391947)
            {
LABEL_109:
              v117 = (llvm::Type *)sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 8) + 280), *(llvm::LLVMContext **)(*(_QWORD *)(*(_QWORD *)(a2 + 120) + 8 * v79) + 48));
              v149 = 257;
              sub_22E3C4170((uint64_t *)&v163, (llvm::LLVMContext *)v61, v141, 0, v79, (uint64_t)&__p);
              DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a1 + 8) + 200));
              llvm::DataLayout::getABITypeAlign(DataLayout, v98);
              v146 = 257;
              v119 = llvm::User::operator new((llvm::User *)0x40);
              v154 = 257;
              llvm::LoadInst::LoadInst();
              (*(void (**)(uint64_t *, uint64_t, _BYTE *, uint64_t, uint64_t))(*v171 + 16))(v171, v119, v145, v167, v168);
              if ((_DWORD)v164)
              {
                v129 = (char *)v163;
                v130 = (char *)v163 + 16 * v164;
                do
                {
                  llvm::Instruction::setMetadata();
                  v129 += 16;
                }
                while (v129 != v130);
              }
              v120 = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a1 + 8) + 200));
              llvm::DataLayout::getABITypeAlign(v120, v117);
              v149 = 257;
              v102 = llvm::User::operator new((llvm::User *)0x40);
              v154 = 257;
              llvm::LoadInst::LoadInst();
              (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, uint64_t))(*v171 + 16))(v171, v102, &__p, v167, v168);
              if ((_DWORD)v164)
              {
                v121 = (char *)v163;
                v122 = (char *)v163 + 16 * v164;
                do
                {
                  llvm::Instruction::setMetadata();
                  v121 += 16;
                }
                while (v121 != v122);
              }
              goto LABEL_95;
            }
          }
          else if (v96 != 116391947)
          {
            if (v84 == 45)
            {
              if ((sub_22E59BCA8(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 120) + 8 * v79) + 48)) & 1) != 0)
                goto LABEL_102;
              v108 = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v82);
              sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(v82 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v150);
              v109 = (llvm::Type *)sub_22E66C868(*(_QWORD *)(a1 + 8) + 280, v82, 0);
              v110 = *(unsigned int *)(llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a1 + 8) + 200)) + 4);
              v154 = 257;
              v102 = sub_22F27B0C8((uint64_t)&v163, v109, v110, (uint64_t)&v150);
              *(_WORD *)(v102 + 18) = *(_WORD *)(v102 + 18) & 0xFFC0 | (63 - __clz(v108));
              v149 = 257;
              sub_22E3C4170((uint64_t *)&v163, (llvm::LLVMContext *)v61, v141, 0, v79, (uint64_t)&__p);
              v111 = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a1 + 8) + 200));
              llvm::DataLayout::getABITypeAlign(v111, v98);
              v146 = 257;
              v112 = llvm::User::operator new((llvm::User *)0x40);
              v154 = 257;
              llvm::LoadInst::LoadInst();
              (*(void (**)(uint64_t *, uint64_t, _BYTE *, uint64_t, uint64_t))(*v171 + 16))(v171, v112, v145, v167, v168);
              if ((_DWORD)v164)
              {
                v131 = (char *)v163;
                v132 = (char *)v163 + 16 * v164;
                do
                {
                  llvm::Instruction::setMetadata();
                  v131 += 16;
                }
                while (v131 != v132);
              }
              llvm::Type::getInt64Ty(v169, v113);
              llvm::ConstantInt::get();
              llvm::IRBuilderBase::CreateMemTransferInst();
              v114 = (llvm::AttributeSet *)llvm::Function::getContext((llvm::Function *)v69);
              v150 = (const char *)llvm::Function::getContext((llvm::Function *)v69);
              v151 = &v153;
              Name = 0x800000000;
              v115 = (llvm::LLVMContext *)llvm::AttrBuilder::addByValAttr();
              v103 = llvm::AttributeSet::get(v114, v115, v116);
              if (v151 != &v153)
                free(v151);
              goto LABEL_96;
            }
            goto LABEL_109;
          }
        }
      }
      v104 = (llvm::Type *)sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 8) + 280), *(llvm::LLVMContext **)(*(_QWORD *)(*(_QWORD *)(a2 + 120) + 8 * v79) + 48));
      v149 = 257;
      sub_22E3C4170((uint64_t *)&v163, (llvm::LLVMContext *)v61, v141, 0, v79, (uint64_t)&__p);
      v105 = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a1 + 8) + 200));
      llvm::DataLayout::getABITypeAlign(v105, v104);
      v146 = 257;
      v102 = llvm::User::operator new((llvm::User *)0x40);
      v154 = 257;
      llvm::LoadInst::LoadInst();
      (*(void (**)(uint64_t *, uint64_t, _BYTE *, uint64_t, uint64_t))(*v171 + 16))(v171, v102, v145, v167, v168);
      if ((_DWORD)v164)
      {
        v125 = (char *)v163;
        v126 = (char *)v163 + 16 * v164;
        do
        {
          llvm::Instruction::setMetadata();
          v125 += 16;
        }
        while (v125 != v126);
      }
      goto LABEL_95;
    }
    v85 = *(_QWORD *)((sub_22F10ACF8(v83) & 0xFFFFFFFFFFFFFFF0) + 8);
    if ((v85 & 8) != 0 && (*(_QWORD *)((v85 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) == 0x1000)
    {
      v86 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 8) + 280), (llvm::LLVMContext *)v82);
      v87 = *(_QWORD *)(a1 + 8);
      v88 = (llvm::Type ***)(v87 + 280);
      v89 = (llvm::LLVMContext *)sub_22EF5B0AC(*(_QWORD *)(v87 + 144), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v87 + 144) + 15088)+ *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v87 + 144) + 15088) - 24)+ 120));
      v90 = (llvm::Type *)sub_22E66CB04(v88, v89);
      v149 = 257;
      sub_22E3C4170((uint64_t *)&v163, (llvm::LLVMContext *)v61, v141, 0, v79, (uint64_t)&__p);
      v91 = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a1 + 8) + 200));
      llvm::DataLayout::getABITypeAlign(v91, v90);
      v146 = 257;
      v92 = (uint64_t *)llvm::User::operator new((llvm::User *)0x40);
      v154 = 257;
      llvm::LoadInst::LoadInst();
      (*(void (**)(uint64_t *, uint64_t *, _BYTE *, uint64_t, uint64_t))(*v171 + 16))(v171, v92, v145, v167, v168);
      if ((_DWORD)v164)
      {
        v127 = (char *)v163;
        v128 = (char *)v163 + 16 * v164;
        do
        {
          llvm::Instruction::setMetadata();
          v127 += 16;
        }
        while (v127 != v128);
      }
      v154 = 257;
      v93 = sub_22E3E5044((uint64_t *)&v163, v138, v137, v92, (uint64_t)&v150);
      v149 = 257;
      p_p = &__p;
      v95 = v86;
      goto LABEL_91;
    }
    v100 = (llvm::Type *)sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 8) + 280), (llvm::LLVMContext *)v82);
    v149 = 257;
    sub_22E3C4170((uint64_t *)&v163, (llvm::LLVMContext *)v61, v141, 0, v79, (uint64_t)&__p);
    v101 = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a1 + 8) + 200));
    llvm::DataLayout::getABITypeAlign(v101, v100);
    v146 = 257;
    v102 = llvm::User::operator new((llvm::User *)0x40);
    v154 = 257;
    llvm::LoadInst::LoadInst();
    (*(void (**)(uint64_t *, uint64_t, _BYTE *, uint64_t, uint64_t))(*v171 + 16))(v171, v102, v145, v167, v168);
    if ((_DWORD)v164)
    {
      v123 = (char *)v163;
      v124 = (char *)v163 + 16 * v164;
      do
      {
        llvm::Instruction::setMetadata();
        v123 += 16;
      }
      while (v123 != v124);
    }
    v95 = *v80;
    if (*(_QWORD *)v102 != *v80)
    {
      v154 = 257;
      p_p = (void **)&v150;
      v93 = (llvm::GetElementPtrInst *)v102;
LABEL_91:
      v102 = sub_22E3C1740((uint64_t *)&v163, 49, (uint64_t)v93, v95, (uint64_t)p_p);
LABEL_95:
      v103 = 0;
LABEL_96:
      if (!v102)
        goto LABEL_102;
      goto LABEL_97;
    }
    v103 = 0;
LABEL_97:
    v106 = v160;
    if (v160 >= (unint64_t)HIDWORD(v160))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v106 = v160;
    }
    *((_QWORD *)v159 + v106) = v102;
    LODWORD(v160) = v160 + 1;
    v107 = v156;
    if (v156 >= (unint64_t)HIDWORD(v156))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v107 = v156;
    }
    *((_QWORD *)v155 + v107) = v103;
    LODWORD(v156) = v156 + 1;
    v80 += 5;
LABEL_102:
    ++v79;
  }
  while (v79 != v143);
  v6 = a3;
  if (a3)
    goto LABEL_130;
  v133 = 0;
LABEL_132:
  v154 = 257;
  v134 = sub_22E462B78((uint64_t *)&v163, v133, v6, (uint64_t)v159, v160, (uint64_t)&v150, 0);
  llvm::Function::getContext((llvm::Function *)v69);
  *((_QWORD *)v134 + 8) = llvm::AttributeList::get();
  sub_22E3CF118((uint64_t *)&v163);
  if (v155 != v157)
    free(v155);
  if (v159 != v161)
    free(v159);
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)&v179);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v178);
  if (v163 != v165)
    free(v163);
  if (v180 != v182)
    free(v180);
  return v69;
}

uint64_t sub_22E599D14(uint64_t a1, uint64_t a2, unint64_t a3, int8x16_t a4)
{
  unint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int8x16_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  BOOL v29;
  uint64_t v31;
  llvm::Type ***v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  llvm::LLVMContext *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t Name;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  llvm::BasicBlock *v59;
  llvm::Type *Context;
  int8x16_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int32x4_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v76;
  int v77;
  unint64_t v78;
  llvm::Type *v79;
  uint64_t v80;
  uint64_t v81;
  llvm::LLVMContext *v82;
  uint64_t v83;
  llvm::AttributeSet *v84;
  llvm::LLVMContext *v85;
  const llvm::AttrBuilder *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  llvm::Value *v92;
  unint64_t v95;
  int v96;
  int8x16_t v97;
  int8x16_t v98;
  _BYTE v99[32];
  __int16 v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  __int16 v105;
  void *v106;
  uint64_t v107;
  _BYTE v108[48];
  void *v109;
  uint64_t v110;
  _BYTE v111[64];
  void *v112;
  uint64_t v113;
  _QWORD v114[2];
  __int16 v115;
  uint64_t v116;
  uint64_t v117;
  llvm::Type *v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t v121;
  int v122;
  __int16 v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  _QWORD v131[10];

  v4 = a3;
  v131[8] = *MEMORY[0x24BDAC8D0];
  v7 = v131;
  v129 = v131;
  v130 = 0x800000000;
  v8 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v8)
    v9 = *(_BYTE *)(v8 + 16) == 26;
  else
    v9 = 0;
  if (v9
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26 && (v8 = sub_22F10CF48(v8)) != 0)
  {
    v10 = *(_QWORD *)(v8 + 16);
    if ((v10 & 0x3FFFC000000000) != 0)
    {
      v11 = 0;
      v12 = (unsigned __int16)(v10 >> 38);
      a4.i32[0] = 264241407;
      v97 = a4;
      v13 = (int8x16_t)xmmword_22F45AEA0;
      v96 = 264241407;
      while (1)
      {
        v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 120) + 8 * v11) + 48);
        v15 = *(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0);
        v16 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v16 == 39)
          break;
        v13.i32[0] = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
        if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqq_s32(vdupq_lane_s32((int32x2_t)*(_OWORD *)&vandq_s8(v13, v97), 0), (int32x4_t)xmmword_22F45AEA0))) & 1) != 0)goto LABEL_39;
        v27 = v16 & 0xFF800FF;
        v28 = (v16 & 0xFF000FF) == 0x100000B || v27 == 17825803;
        v29 = v28 || v27 == 116391947;
        if (v29 || v27 == 18350091)
          goto LABEL_39;
        v31 = *(_QWORD *)(a1 + 8);
        v32 = (llvm::Type ***)(v31 + 280);
        v33 = *(_QWORD *)(v31 + 144);
        v34 = sub_22EF5DEB0(v33, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 120) + 8 * v11) + 48));
        v35 = sub_22EF5DD84(v33, v34, 3);
        v95 = v95 & 0xFFFFFFFF00000000 | v96 & 0xE0;
        v36 = (llvm::LLVMContext *)sub_22EF5B848(v33, v35, v96 & 0xE0);
        v37 = sub_22E66CB04(v32, v36);
        v96 &= 0xFFFFFFE0;
LABEL_40:
        v48 = v130;
        if (v130 >= (unint64_t)HIDWORD(v130))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v48 = v130;
        }
        v129[v48] = v37;
        LODWORD(v130) = v130 + 1;
        if (v12 == ++v11)
        {
          v4 = a3;
          goto LABEL_46;
        }
      }
      v17 = *(_QWORD *)((sub_22F10ACF8(v15) & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v17 & 8) == 0 || ((*(_DWORD *)((v17 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11) - 1) >= 2)
      {
        v18 = sub_22EF5BA38(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v14);
        v19 = sub_22E59BB88(a1, v18);
        if (HIDWORD(v19) && *(_DWORD *)(*(_QWORD *)(a1 + 112) + 8) < v19)
        {
          v21 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
          v22 = *(_QWORD *)(v21 + 16392);
          v23 = sub_22F10ACF8(*(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0));
          v24 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFFFF0) + 8);
          if ((v24 & 8) != 0)
          {
            v26 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFFFF0) + 0x18);
            v25 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
          }
          else
          {
            v25 = 0;
            v26 = 0;
          }
          v38 = v26 | (v24 | v23) & 7;
          if (((v38 | v25) & 0xCFFFFFFF8) != 0)
          {
            v112 = (void *)(v38 | v25);
            v39 = sub_22E491354((unsigned int *)&v112, v22);
            v40 = sub_22EF5DBC4(v21, v39, (uint64_t)v112);
          }
          else
          {
            v40 = v38 & 7 | v22;
          }
          v41 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
          v4 = v4 & 0xFFFFFFFF00000000 | v7 & 0xE0;
          v42 = sub_22EF5B848(v41, v40, v4);
          v43 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF0) + 8);
          if ((v43 & 8) != 0)
          {
            v45 = *(_QWORD *)((v43 & 0xFFFFFFFFFFFFFFF0) + 0x18);
            v44 = *(_QWORD *)((v43 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
          }
          else
          {
            v44 = 0;
            v45 = 0;
          }
          LOBYTE(v7) = v7 & 0xE0;
          v46 = v45 | (v43 | v14) & 7;
          if (((v46 | v44) & 0xCFFFFFFF8) != 0)
          {
            v112 = (void *)(v46 | v44);
            v47 = sub_22E491354((unsigned int *)&v112, v42);
            v14 = sub_22EF5DBC4(v41, v47, (uint64_t)v112);
          }
          else
          {
            v14 = v46 & 7 | v42;
          }
        }
      }
LABEL_39:
      v37 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 8) + 280), (llvm::LLVMContext *)v14);
      goto LABEL_40;
    }
  }
LABEL_46:
  v49 = llvm::FunctionType::get();
  Name = llvm::Value::getName((llvm::Value *)v4);
  v115 = 1283;
  v112 = "__entry_";
  v114[0] = Name;
  v114[1] = v51;
  v52 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 200);
  v53 = llvm::User::operator new((llvm::User *)0x78);
  v54 = MEMORY[0x23489F6FC](v53, v49, 0, 0xFFFFFFFFLL, &v112, v52);
  v55 = *(_DWORD *)(v4 + 32) & 0x30;
  v56 = *(_DWORD *)(v54 + 32);
  v57 = v56 & 0xFFFFFFCF | v55;
  *(_DWORD *)(v54 + 32) = v57;
  if ((v56 & 0xFu) - 7 >= 2)
  {
    if (!v55 || (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v53) & 1) != 0)
      goto LABEL_48;
    v57 = *(_DWORD *)(v53 + 32);
  }
  *(_DWORD *)(v53 + 32) = v57 | 0x4000;
LABEL_48:
  llvm::Function::getContext((llvm::Function *)v53);
  v112 = "entry";
  v115 = 259;
  v58 = operator new();
  v59 = (llvm::BasicBlock *)llvm::BasicBlock::BasicBlock();
  Context = (llvm::Type *)llvm::BasicBlock::getContext(v59);
  v112 = v114;
  v113 = 0x200000000;
  v118 = Context;
  v119 = &v127;
  v120 = &v128;
  v121 = 0;
  v122 = 0;
  v123 = 512;
  v124 = 7;
  v126 = 0;
  v125 = 0;
  v127 = MEMORY[0x24BED83B8] + 16;
  v128 = MEMORY[0x24BED83F0] + 16;
  v116 = v58;
  v117 = v58 + 40;
  v109 = v111;
  v110 = 0x800000000;
  v106 = v108;
  v61.i32[1] = 6;
  v107 = 0x600000000;
  if ((*(_BYTE *)(v53 + 18) & 1) != 0)
    llvm::Function::BuildLazyArguments((llvm::Function *)v53);
  v62 = *(_QWORD *)(v53 + 88);
  v63 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if ((!v63 || *(_BYTE *)(v63 + 16) != 26)
    && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v63 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26
     || (v63 = sub_22F10CF48(v63)) == 0)
    || (v64 = *(_QWORD *)(v63 + 16), (v64 & 0x3FFFC000000000) == 0))
  {
LABEL_94:
    v91 = *(_QWORD *)(v4 + 24);
    goto LABEL_96;
  }
  v65 = 0;
  v66 = (unsigned __int16)(v64 >> 38);
  v61.i32[0] = 264241407;
  v98 = v61;
  v67 = (int32x4_t)xmmword_22F45AEA0;
  do
  {
    v68 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 120) + 8 * v65) + 48);
    v69 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v68 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16);
    if (v69 == 39)
    {
      v70 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 8) + 280), *(llvm::LLVMContext **)(*(_QWORD *)(*(_QWORD *)(a2 + 120) + 8 * v65) + 48));
      v105 = 257;
      v71 = sub_22E3C1740((uint64_t *)&v112, 49, v62, v70, (uint64_t)&v101);
      v72 = v110;
      if (v110 >= (unint64_t)HIDWORD(v110))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v72 = v110;
      }
      goto LABEL_57;
    }
    v67.i32[0] = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v68 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                           + 16);
    v67 = vceqq_s32(vdupq_lane_s32((int32x2_t)*(_OWORD *)&vandq_s8((int8x16_t)v67, v98), 0), (int32x4_t)xmmword_22F45AEA0);
    *(int16x4_t *)v67.i8 = vmovn_s32(v67);
    if ((vmaxv_u16(*(uint16x4_t *)v67.i8) & 1) != 0)
      goto LABEL_70;
    v73 = v69 & 0xFF800FF;
    if ((v69 & 0xFF000FF) == 0x100000B || v73 == 17825803)
      goto LABEL_70;
    if (v69 == 11)
    {
      if ((v69 & 0xFF80000) == 0x1180000 || v73 == 116391947)
      {
LABEL_70:
        v76 = v110;
        if (v110 >= (unint64_t)HIDWORD(v110))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v76 = v110;
        }
        *((_QWORD *)v109 + v76) = v62;
        goto LABEL_73;
      }
LABEL_85:
      sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 8) + 280), *(llvm::LLVMContext **)(*(_QWORD *)(*(_QWORD *)(a2 + 120) + 8 * v65) + 48));
      sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v68);
      v100 = 257;
      v71 = llvm::User::operator new((llvm::User *)0x40);
      v105 = 257;
      llvm::LoadInst::LoadInst();
      (*(void (**)(uint64_t *, uint64_t, _BYTE *, uint64_t, uint64_t))(*v120 + 16))(v120, v71, v99, v116, v117);
      if ((_DWORD)v113)
      {
        v89 = (char *)v112;
        v90 = (char *)v112 + 16 * v113;
        do
        {
          llvm::Instruction::setMetadata();
          v89 += 16;
        }
        while (v89 != v90);
      }
      v72 = v110;
      if (v110 >= (unint64_t)HIDWORD(v110))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v72 = v110;
      }
LABEL_57:
      *((_QWORD *)v109 + v72) = v71;
LABEL_73:
      LODWORD(v110) = v110 + 1;
      v77 = v107;
      if (v107 >= HIDWORD(v107))
      {
        sub_22F27B40C((uint64_t)&v106);
      }
      else
      {
        *((_QWORD *)v106 + v107) = 0;
        LODWORD(v107) = v77 + 1;
      }
      goto LABEL_75;
    }
    if (v73 == 116391947)
      goto LABEL_70;
    if (v69 != 45)
      goto LABEL_85;
    if ((sub_22E59BCA8(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 120) + 8 * v65) + 48)) & 1) == 0)
    {
      v78 = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v68);
      sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(v68 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v101);
      v79 = (llvm::Type *)sub_22E66C868(*(_QWORD *)(a1 + 8) + 280, v68, 0);
      v80 = *(unsigned int *)(llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a1 + 8) + 200)) + 4);
      v105 = 257;
      v81 = sub_22F27B0C8((uint64_t)&v112, v79, v80, (uint64_t)&v101);
      *(_WORD *)(v81 + 18) = *(_WORD *)(v81 + 18) & 0xFFC0 | (63 - __clz(v78));
      llvm::Type::getInt64Ty(v118, v82);
      llvm::ConstantInt::get();
      llvm::IRBuilderBase::CreateMemTransferInst();
      v83 = v110;
      if (v110 >= (unint64_t)HIDWORD(v110))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v83 = v110;
      }
      *((_QWORD *)v109 + v83) = v81;
      LODWORD(v110) = v110 + 1;
      v84 = (llvm::AttributeSet *)llvm::Function::getContext((llvm::Function *)v53);
      v101 = llvm::Function::getContext((llvm::Function *)v53);
      v102 = &v104;
      v103 = 0x800000000;
      v85 = (llvm::LLVMContext *)llvm::AttrBuilder::addByValAttr();
      v87 = llvm::AttributeSet::get(v84, v85, v86);
      v88 = v107;
      if (v107 >= (unint64_t)HIDWORD(v107))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v88 = v107;
      }
      *((_QWORD *)v106 + v88) = v87;
      LODWORD(v107) = v107 + 1;
      if (v102 != &v104)
        free(v102);
    }
LABEL_75:
    v62 += 40;
    ++v65;
  }
  while (v65 != v66);
  v4 = a3;
  if (a3)
    goto LABEL_94;
  v91 = 0;
LABEL_96:
  v105 = 257;
  v92 = sub_22E462B78((uint64_t *)&v112, v91, v4, (uint64_t)v109, v110, (uint64_t)&v101, 0);
  llvm::Function::getContext((llvm::Function *)v53);
  *((_QWORD *)v92 + 8) = llvm::AttributeList::get();
  sub_22E3CF118((uint64_t *)&v112);
  if (v106 != v108)
    free(v106);
  if (v109 != v111)
    free(v109);
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)&v128);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v127);
  if (v112 != v114)
    free(v112);
  if (v129 != v131)
    free(v129);
  return v53;
}

uint64_t sub_22E59A888(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  BOOL v6;
  _BOOL4 v7;
  unint64_t *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  unsigned int v61;
  __int128 v62;
  int v63;
  __int128 v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  __int128 v72;
  int v73;
  uint64_t v74;
  __int128 v75;
  int v76;
  uint64_t v77;
  char *v78;
  __int128 v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  _DWORD *v88;
  uint64_t v89;
  const char *v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  int v122;
  int v123;
  int v124;
  void *v125;
  __int128 *v126;
  size_t v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t Impl;
  uint64_t v137;
  char *v138;
  char *v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t *i;
  uint64_t v161;
  uint64_t v162;
  int v163;
  unint64_t v164;
  int v165;
  uint64_t v166;
  unsigned int v167;
  unsigned int v168;
  unint64_t *v169;
  char *v170;
  int v171;
  unsigned int v172;
  unint64_t *v173;
  uint64_t v174;
  int v175;
  __int128 v176;
  uint64_t v177;
  __int128 v178;
  uint64_t v179;
  uint64_t *v180;
  __int128 v181;
  uint64_t v182;
  int v183;
  uint64_t *v184;
  __int128 v185;
  uint64_t v186;
  __int128 v187;
  uint64_t v188;
  uint64_t v189;

  v3 = a1;
  v189 = *MEMORY[0x24BDAC8D0];
  if (!sub_22E598830(a1, *(_QWORD *)(a2 + 48), *(_QWORD *)(a2 + 120)))
  {
    v178 = 0x8000000000000002;
    if (sub_22E3B38EC((_DWORD *)(v3 + 96), &v178))
    {
      sub_22E6285D0(*(_QWORD *)(v3 + 8), a2, "kernel function argument metadata");
      return 0;
    }
  }
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v5)
    v6 = *(unsigned __int8 *)(v5 + 16) - 27 > 0xFFFFFFFD;
  else
    v6 = 0;
  if (!v6)
    sub_22F10CF48(v5);
  llvm::MDTuple::getImpl();
  v7 = sub_22E598830(v3, *(_QWORD *)(a2 + 48), *(_QWORD *)(a2 + 120));
  v8 = *(unint64_t **)(a2 + 120);
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v9)
    v10 = *(_BYTE *)(v9 + 16) == 26;
  else
    v10 = 0;
  v174 = v3;
  v166 = a2;
  if (v10)
    goto LABEL_14;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
  {
    v9 = sub_22F10CF48(v9);
    if (!v9)
    {
      v11 = 0;
      goto LABEL_15;
    }
LABEL_14:
    v11 = (unsigned __int16)(*(_QWORD *)(v9 + 16) >> 38);
    goto LABEL_15;
  }
  v11 = 0;
LABEL_15:
  v173 = &v8[v11];
  if (!v7)
  {
    v58 = 0;
    v59 = 0;
    if (!v11)
    {
LABEL_196:
      llvm::air::AIStructTypeInfo::getImpl();
      v178 = 0x8000000500000002;
      sub_22E3B38EC((_DWORD *)(v3 + 96), &v178);
      Impl = llvm::air::AIBuffer::getImpl();
      v137 = llvm::air::AIBuffer::getImpl();
      *(_QWORD *)&v178 = Impl;
      *((_QWORD *)&v178 + 1) = v137;
      llvm::MDTuple::getImpl();
      if (v58)
      {
        if (v59 != v58)
        {
          v138 = v59 - 32;
          do
          {
            v139 = (char *)*((_QWORD *)v138 - 3);
            if (v138 != v139)
              free(v139);
            v140 = (char *)*((_QWORD *)v138 - 8);
            if (v138 - 40 != v140)
              free(v140);
            v141 = v138 - 88;
            v138 -= 120;
          }
          while (v141 != v58);
        }
        operator delete(v58);
      }
      goto LABEL_205;
    }
    v60 = 0;
    v61 = 0;
    v62 = xmmword_22F44E360;
    v172 = 1;
    v165 = 1;
    while (1)
    {
      v182 = 0;
      v178 = 0uLL;
      LODWORD(v179) = 0;
      v180 = &v182;
      v181 = v62;
      v183 = 0;
      v184 = &v186;
      v185 = v62;
      LODWORD(v187) = 0;
      if (v59 >= v60)
      {
        v65 = 0xEEEEEEEEEEEEEEEFLL * ((v59 - v58) >> 3) + 1;
        if (v65 > 0x222222222222222)
LABEL_234:
          abort();
        if (0xDDDDDDDDDDDDDDDELL * ((v60 - v58) >> 3) > v65)
          v65 = 0xDDDDDDDDDDDDDDDELL * ((v60 - v58) >> 3);
        if (0xEEEEEEEEEEEEEEEFLL * ((v60 - v58) >> 3) >= 0x111111111111111)
          v66 = 0x222222222222222;
        else
          v66 = v65;
        v167 = v61;
        if (v66)
        {
          if (v66 > 0x222222222222222)
LABEL_235:
            sub_22E3B3F8C();
          v67 = (char *)operator new(120 * v66);
          v62 = xmmword_22F44E360;
        }
        else
        {
          v67 = 0;
        }
        v68 = &v67[8 * ((v59 - v58) >> 3)];
        *(_QWORD *)v68 = 0;
        *((_QWORD *)v68 + 1) = 0;
        *((_DWORD *)v68 + 4) = 0;
        *((_QWORD *)v68 + 3) = v68 + 48;
        *((_OWORD *)v68 + 2) = v62;
        *((_DWORD *)v68 + 14) = 0;
        *((_QWORD *)v68 + 8) = v68 + 88;
        *(_OWORD *)(v68 + 72) = v62;
        *((_OWORD *)v68 + 6) = v187;
        *((_QWORD *)v68 + 14) = v188;
        if (v59 == v58)
        {
          v80 = &v67[8 * ((v59 - v58) >> 3)];
        }
        else
        {
          v69 = 0;
          do
          {
            v70 = &v68[v69];
            v71 = &v59[v69];
            v72 = *(_OWORD *)&v59[v69 - 120];
            v73 = *(_DWORD *)&v59[v69 - 104];
            *(_QWORD *)&v68[v69 - 96] = &v68[v69 - 72];
            v74 = (uint64_t)&v68[v69 - 96];
            *(_DWORD *)(v74 - 8) = v73;
            *(_OWORD *)(v74 - 24) = v72;
            v75 = xmmword_22F44E360;
            *(_OWORD *)(v74 + 8) = xmmword_22F44E360;
            if (*(_QWORD *)&v59[v69 - 88])
            {
              sub_22E3B2DB8(v74, (uint64_t)(v71 - 96));
              v75 = xmmword_22F44E360;
            }
            v76 = *((_DWORD *)v71 - 16);
            *((_QWORD *)v70 - 7) = v70 - 32;
            v77 = (uint64_t)(v70 - 56);
            *(_DWORD *)(v77 - 8) = v76;
            *(_OWORD *)(v77 + 8) = v75;
            if (*((_QWORD *)v71 - 6))
              sub_22E3B2DB8(v77, (uint64_t)&v59[v69 - 56]);
            v78 = &v68[v69];
            v79 = *(_OWORD *)&v59[v69 - 24];
            *((_QWORD *)v78 - 1) = *(_QWORD *)&v59[v69 - 8];
            *(_OWORD *)(v78 - 24) = v79;
            v69 -= 120;
          }
          while (&v59[v69] != v58);
          v80 = &v68[v69];
          v81 = v59 - 32;
          v3 = v174;
          do
          {
            v82 = (char *)*((_QWORD *)v81 - 3);
            if (v81 != v82)
              free(v82);
            v83 = (char *)*((_QWORD *)v81 - 8);
            if (v81 - 40 != v83)
              free(v83);
            v84 = v81 - 88;
            v81 -= 120;
          }
          while (v84 != v58);
        }
        v170 = &v67[120 * v66];
        v59 = v68 + 120;
        if (v58)
          operator delete(v58);
        v58 = v80;
        v61 = v167;
      }
      else
      {
        v170 = v60;
        *((_DWORD *)v59 + 4) = 0;
        *(_QWORD *)v59 = 0;
        *((_QWORD *)v59 + 1) = 0;
        *((_QWORD *)v59 + 3) = v59 + 48;
        *((_OWORD *)v59 + 2) = v62;
        if ((_QWORD)v181)
        {
          sub_22E3B2DB8((uint64_t)(v59 + 24), (uint64_t)&v180);
          v62 = xmmword_22F44E360;
        }
        v63 = v183;
        *((_QWORD *)v59 + 8) = v59 + 88;
        *((_DWORD *)v59 + 14) = v63;
        *(_OWORD *)(v59 + 72) = v62;
        if ((_QWORD)v185)
          sub_22E3B2DB8((uint64_t)(v59 + 64), (uint64_t)&v184);
        v64 = v187;
        *((_QWORD *)v59 + 14) = v188;
        *((_OWORD *)v59 + 6) = v64;
        v59 += 120;
      }
      if (v184 != &v186)
        free(v184);
      if (v180 != &v182)
        free(v180);
      v85 = sub_22EF5BA38(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 144), *(_QWORD *)(*v8 + 48));
      v86 = *(_QWORD *)(*v8 + 40) & 0xFFFFFFFFFFFFFFF8;
      if ((*(_QWORD *)(*v8 + 40) & 7) != 0 || v86 == 0)
      {
        v89 = 0;
        v90 = "";
      }
      else
      {
        v88 = *(_DWORD **)(v86 + 16);
        v91 = *v88;
        v90 = (const char *)(v88 + 4);
        v89 = v91;
      }
      LOWORD(v181) = 261;
      *(_QWORD *)&v178 = v90;
      *((_QWORD *)&v178 + 1) = v89;
      *((_DWORD *)v59 - 16) = 1;
      *((_QWORD *)v59 - 6) = 0;
      llvm::Twine::toVector();
      v92 = *v8;
      if ((*(_DWORD *)(*v8 + 96) >> 20) == 255)
      {
        v93 = sub_22EFC72E8(*v8);
        sub_22F36F2CC(v93, v92);
      }
      v94 = (uint64_t *)(v85 & 0xFFFFFFFFFFFFFFF0);
      v95 = *(_QWORD *)(v85 & 0xFFFFFFFFFFFFFFF0);
      v96 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v95 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
      v169 = v8;
      if (v96 == 39)
      {
        v97 = *(_QWORD *)((sub_22F10ACF8(v95) & 0xFFFFFFFFFFFFFFF0) + 8);
        if ((v97 & 8) == 0 || (*(_QWORD *)((v97 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) != 0x1000)
        {
          v100 = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 144), v85);
          sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 144), *v94, (uint64_t)&v178);
          v112 = v178;
          v116 = sub_22E699F3C(*(_QWORD **)(v3 + 8));
          (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v116 + 248))(&v178, v116, *(_QWORD *)(v3 + 8), v85, 1);
          v117 = *v8;
          v176 = v178;
          v177 = v179;
          v115 = sub_22E59BDC0(v3, v117);
          goto LABEL_171;
        }
        v168 = v61;
        v98 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 144);
        v99 = sub_22EF5B0AC(v98, *(_DWORD *)(*(_QWORD *)(v98 + 15088) + *(_QWORD *)(**(_QWORD **)(v98 + 15088) - 24) + 120));
        sub_22EF5CCD0(v98, *(_QWORD *)(v99 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v178);
        v100 = v178;
        v101 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 144);
        v102 = sub_22EF5B0AC(v101, *(_DWORD *)(*(_QWORD *)(v101 + 15088) + *(_QWORD *)(**(_QWORD **)(v101 + 15088) - 24) + 120));
        sub_22EF5CCD0(v101, *(_QWORD *)(v102 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v178);
        v163 = v178;
        v103 = *(_QWORD **)(v3 + 8);
        v104 = sub_22EF5B0AC(v103[18], *(_DWORD *)(*(_QWORD *)(v103[18] + 15088)+ *(_QWORD *)(**(_QWORD **)(v103[18] + 15088) - 24)+ 120));
        v105 = sub_22E699F3C(v103);
        (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v105 + 248))(&v178, v105, *(_QWORD *)(v3 + 8), v104, 1);
        v106 = *v8;
        v176 = v178;
        v177 = v179;
        v107 = *(_QWORD **)(v3 + 8);
        if ((*(_DWORD *)(v106 + 96) >> 20) == 255)
        {
          v108 = sub_22EFC72E8(v106);
          sub_22F36F2CC(v108, v106);
          v107 = *(_QWORD **)(v3 + 8);
        }
        v109 = sub_22EF5B0AC(v107[18], *(_DWORD *)(*(_QWORD *)(v107[18] + 15088)+ *(_QWORD *)(**(_QWORD **)(v107[18] + 15088) - 24)+ 120));
        v110 = sub_22E699F3C(v107);
        (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v110 + 248))(&v178, v110, *(_QWORD *)(v3 + 8), v109, 1);
        v61 = v168;
        v121 = llvm::air::AIIndirectConstant::getImpl();
        if (SHIBYTE(v179) < 0)
          operator delete((void *)v178);
        v112 = v163;
      }
      else
      {
        if ((v96 & 0xFE000FF) == 0x100000B || (v96 & 0xF0000FF) == 11)
        {
          v100 = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 144), v85);
          sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 144), *v94, (uint64_t)&v178);
          v112 = v178;
          v113 = sub_22E699F3C(*(_QWORD **)(v3 + 8));
          (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v113 + 248))(&v178, v113, *(_QWORD *)(v3 + 8), v85, 1);
          v114 = *v8;
          v176 = v178;
          v177 = v179;
          v115 = sub_22E59C0A4(v3, v114);
LABEL_171:
          v121 = v115;
          goto LABEL_172;
        }
        v118 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 144);
        if ((v96 & 0xFF800FF) == 0x6F0000B)
        {
          v100 = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 144), v85);
          sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 144), *v94, (uint64_t)&v178);
          v112 = v178;
          v119 = sub_22E699F3C(*(_QWORD **)(v3 + 8));
          (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v119 + 248))(&v178, v119, *(_QWORD *)(v3 + 8), v85, 1);
          v120 = *v8;
          v176 = v178;
          v177 = v179;
          v115 = sub_22E59C20C(v3, v120);
          goto LABEL_171;
        }
        v131 = sub_22EF5DEB0(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 144), v85);
        v132 = sub_22EF5DD84(v118, v131, 3);
        v164 = v164 & 0xFFFFFFFF00000000 | v165 & 0xE0;
        v133 = sub_22EF5B848(v118, v132, v165 & 0xE0);
        v100 = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 144), v133);
        sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 144), *(_QWORD *)(v133 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v178);
        v112 = v178;
        v134 = sub_22E699F3C(*(_QWORD **)(v3 + 8));
        (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v134 + 248))(&v178, v134, *(_QWORD *)(v3 + 8), v85, 1);
        v135 = *v8;
        v176 = v178;
        v177 = v179;
        v121 = sub_22E59C33C(v3, v135);
        v165 &= 0xFFFFFFE0;
      }
LABEL_172:
      v122 = (v61 + (unint64_t)v100 - 1) / v100 * v100;
      *((_DWORD *)v59 - 28) = v122;
      *((_DWORD *)v59 - 27) = v112;
      v123 = v112;
      v124 = SHIBYTE(v177);
      v125 = (void *)v176;
      if (v177 >= 0)
        v126 = &v176;
      else
        v126 = (__int128 *)v176;
      if (v177 >= 0)
        v127 = HIBYTE(v177) & 0x7F;
      else
        v127 = *((_QWORD *)&v176 + 1);
      *((_QWORD *)v59 - 11) = 0;
      if (*((_QWORD *)v59 - 10) < v127)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v128 = *((_QWORD *)v59 - 11);
LABEL_180:
        memcpy((void *)(*((_QWORD *)v59 - 12) + v128), v126, v127);
        v129 = *((_QWORD *)v59 - 11);
        goto LABEL_181;
      }
      v128 = 0;
      v129 = 0;
      if (v127)
        goto LABEL_180;
LABEL_181:
      *((_QWORD *)v59 - 11) = v129 + v127;
      *((_DWORD *)v59 - 6) = v121 != 0;
      *((_QWORD *)v59 - 2) = v121;
      if (v172 <= v100)
        v130 = v100;
      else
        v130 = v172;
      v172 = v130;
      if (v124 < 0)
        operator delete(v125);
      v61 = v122 + v123;
      v60 = v170;
      v8 = v169 + 1;
      v3 = v174;
      v62 = xmmword_22F44E360;
      if (v169 + 1 == v173)
        goto LABEL_196;
    }
  }
  if (v11)
  {
    v12 = 0;
    v13 = 0;
    v175 = 0;
    v171 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    while (1)
    {
      v17 = *v8;
      v18 = *(_QWORD *)(*(_QWORD *)(*v8 + 48) & 0xFFFFFFFFFFFFFFF0);
      v19 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v19 == 39)
      {
        v20 = *(_QWORD *)((sub_22F10ACF8(v18) & 0xFFFFFFFFFFFFFFF0) + 8);
        if ((v20 & 8) != 0)
          v21 = *(_DWORD *)((v20 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11;
        else
          v21 = 0;
        if (v21 == 2)
          v26 = (v13 + 1);
        else
          v26 = v13;
        if (v21 == 2)
          v27 = v12;
        else
          v27 = (v12 + 1);
        v28 = sub_22E59BDC0(v174, *v8);
        v29 = v28;
        if (v15 >= (uint64_t *)v14)
        {
          v32 = v15 - v16;
          v33 = v32 + 1;
          if ((unint64_t)(v32 + 1) >> 61)
            goto LABEL_234;
          if ((v14 - (char *)v16) >> 2 > v33)
            v33 = (v14 - (char *)v16) >> 2;
          if ((unint64_t)(v14 - (char *)v16) >= 0x7FFFFFFFFFFFFFF8)
            v34 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v34 = v33;
          if (v34)
          {
            if (v34 >> 61)
              goto LABEL_235;
            v35 = (char *)operator new(8 * v34);
          }
          else
          {
            v35 = 0;
          }
          v42 = (uint64_t *)&v35[8 * v32];
          *v42 = v29;
          v25 = v42 + 1;
          if (v15 != v16)
          {
            do
            {
              v43 = *--v15;
              *--v42 = v43;
            }
            while (v15 != v16);
            v15 = v16;
          }
          v16 = v42;
          v14 = &v35[8 * v34];
          if (v15)
            operator delete(v15);
        }
        else
        {
          *v15 = v28;
          v25 = v15 + 1;
        }
      }
      else
      {
        if ((v19 & 0xFE000FF) == 0x100000B || (v19 & 0xF0000FF) == 11)
        {
          v23 = sub_22E59C0A4(v174, v17);
          v24 = v23;
          if (v15 >= (uint64_t *)v14)
          {
            v36 = v15 - v16;
            v37 = v36 + 1;
            if ((unint64_t)(v36 + 1) >> 61)
              goto LABEL_234;
            if ((v14 - (char *)v16) >> 2 > v37)
              v37 = (v14 - (char *)v16) >> 2;
            if ((unint64_t)(v14 - (char *)v16) >= 0x7FFFFFFFFFFFFFF8)
              v38 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v38 = v37;
            if (v38)
            {
              if (v38 >> 61)
                goto LABEL_235;
              v39 = (char *)operator new(8 * v38);
            }
            else
            {
              v39 = 0;
            }
            v52 = (uint64_t *)&v39[8 * v36];
            *v52 = v24;
            v25 = v52 + 1;
            if (v15 != v16)
            {
              do
              {
                v53 = *--v15;
                *--v52 = v53;
              }
              while (v15 != v16);
              v15 = v16;
            }
            v16 = v52;
            v14 = &v39[8 * v38];
            if (v15)
              operator delete(v15);
          }
          else
          {
            *v15 = v23;
            v25 = v15 + 1;
          }
          ++v175;
        }
        else
        {
          if ((v19 & 0xFF800FF) != 0x6F0000B)
          {
            v27 = (v12 + 1);
            v40 = sub_22E59C33C(v174, v17);
            v41 = v40;
            if (v15 >= (uint64_t *)v14)
            {
              v48 = v15 - v16;
              v49 = v48 + 1;
              if ((unint64_t)(v48 + 1) >> 61)
                goto LABEL_234;
              if ((v14 - (char *)v16) >> 2 > v49)
                v49 = (v14 - (char *)v16) >> 2;
              if ((unint64_t)(v14 - (char *)v16) >= 0x7FFFFFFFFFFFFFF8)
                v50 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v50 = v49;
              if (v50)
              {
                if (v50 >> 61)
                  goto LABEL_235;
                v51 = (char *)operator new(8 * v50);
              }
              else
              {
                v51 = 0;
              }
              v56 = (uint64_t *)&v51[8 * v48];
              *v56 = v41;
              v25 = v56 + 1;
              if (v15 != v16)
              {
                do
                {
                  v57 = *--v15;
                  *--v56 = v57;
                }
                while (v15 != v16);
                v15 = v16;
              }
              v16 = v56;
              v14 = &v51[8 * v50];
              if (v15)
                operator delete(v15);
            }
            else
            {
              *v15 = v40;
              v25 = v15 + 1;
            }
            v26 = v13;
            goto LABEL_106;
          }
          v30 = sub_22E59C20C(v174, v17);
          v31 = v30;
          if (v15 >= (uint64_t *)v14)
          {
            v44 = v15 - v16;
            v45 = v44 + 1;
            if ((unint64_t)(v44 + 1) >> 61)
              goto LABEL_234;
            if ((v14 - (char *)v16) >> 2 > v45)
              v45 = (v14 - (char *)v16) >> 2;
            if ((unint64_t)(v14 - (char *)v16) >= 0x7FFFFFFFFFFFFFF8)
              v46 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v46 = v45;
            if (v46)
            {
              if (v46 >> 61)
                goto LABEL_235;
              v47 = (char *)operator new(8 * v46);
            }
            else
            {
              v47 = 0;
            }
            v54 = (uint64_t *)&v47[8 * v44];
            *v54 = v31;
            v25 = v54 + 1;
            if (v15 != v16)
            {
              do
              {
                v55 = *--v15;
                *--v54 = v55;
              }
              while (v15 != v16);
              v15 = v16;
            }
            v16 = v54;
            v14 = &v47[8 * v46];
            if (v15)
              operator delete(v15);
          }
          else
          {
            *v15 = v30;
            v25 = v15 + 1;
          }
          ++v171;
        }
        v26 = v13;
        v27 = v12;
      }
LABEL_106:
      ++v8;
      v12 = v27;
      v13 = v26;
      v15 = v25;
      if (v8 == v173)
        goto LABEL_194;
    }
  }
  v16 = 0;
LABEL_194:
  v3 = v174;
  llvm::MDTuple::getImpl();
  if (v16)
    operator delete(v16);
LABEL_205:
  if ((*(_BYTE *)(v166 + 29) & 1) != 0)
  {
    sub_22EFC8E88(v166);
    v143 = *(uint64_t **)v142;
    v144 = *(unsigned int *)(v142 + 8);
    v145 = *(uint64_t **)v142;
    if ((_DWORD)v144)
    {
      v146 = 8 * v144;
      v145 = *(uint64_t **)v142;
      while (*(_WORD *)(*v145 + 32) != 345)
      {
        ++v145;
        v146 -= 8;
        if (!v146)
          goto LABEL_215;
      }
    }
    if (v145 != &v143[v144])
    {
      do
      {
        v148 = *v143++;
        v147 = v148;
      }
      while (*(_WORD *)(v148 + 32) != 345);
      v149 = **(_QWORD **)(v147 + 40);
      v150 = sub_22E699F3C(*(_QWORD **)(v3 + 8));
      (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v150 + 248))(&v178, v150, *(_QWORD *)(v3 + 8), v149, 1);
      llvm::air::AIVecTypeHint::getImpl();
      if (SHIBYTE(v179) < 0)
        operator delete((void *)v178);
    }
  }
LABEL_215:
  if ((*(_BYTE *)(v166 + 29) & 1) != 0)
  {
    sub_22EFC8E88(v166);
    v152 = *(uint64_t **)v151;
    v153 = *(unsigned int *)(v151 + 8);
    v154 = *(uint64_t **)v151;
    if ((_DWORD)v153)
    {
      v155 = 8 * v153;
      v154 = *(uint64_t **)v151;
      while (*(_WORD *)(*v154 + 32) != 295)
      {
        ++v154;
        v155 -= 8;
        if (!v155)
          goto LABEL_224;
      }
    }
    if (v154 != &v152[v153])
    {
      do
        v156 = *v152++;
      while (*(_WORD *)(v156 + 32) != 295);
      llvm::air::AIGroupSizeImpl::getImpl();
    }
  }
LABEL_224:
  if ((*(_BYTE *)(v166 + 29) & 1) != 0)
  {
    sub_22EFC8E88(v166);
    v158 = *(uint64_t **)v157;
    v159 = *(unsigned int *)(v157 + 8);
    i = *(uint64_t **)v157;
    if ((_DWORD)v159)
    {
      v161 = 8 * v159;
      for (i = *(uint64_t **)v157; *(_WORD *)(*i + 32) != 355; ++i)
      {
        v161 -= 8;
        if (!v161)
          return llvm::air::AIKernelFunction::getImpl();
      }
    }
    if (i != &v158[v159])
    {
      do
        v162 = *v158++;
      while (*(_WORD *)(v162 + 32) != 355);
      llvm::air::AIGroupSizeImpl::getImpl();
    }
  }
  return llvm::air::AIKernelFunction::getImpl();
}

uint64_t sub_22E59BB88(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  BOOL v5;
  int v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD v14[6];

  v3 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (v4)
    v5 = *(_BYTE *)(v4 + 16) == 1;
  else
    v5 = 0;
  if (!v5)
  {
    v6 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    if (v6 == 1)
    {
      v4 = sub_22F10CF48(v4);
      if (v4)
        goto LABEL_7;
      v4 = *v3;
      v6 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v3 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    }
    if (v6 == 39)
      return 0;
    sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v4, (uint64_t)v14);
    v10 = v14[0];
    goto LABEL_17;
  }
LABEL_7:
  v7 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(v4 + 32));
  if (v7 && *(_BYTE *)(v7 + 16) == 2)
  {
    v8 = (_QWORD *)(v7 + 40);
    if (*(_DWORD *)(v7 + 48) >= 0x41u)
      v8 = (_QWORD *)*v8;
    v9 = (_QWORD *)*v8;
    sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *v3, (uint64_t)v14);
    v10 = v14[0] * (_DWORD)v9;
LABEL_17:
    v12 = v10 & 0xFFFFFF00;
    v11 = 0x100000000;
    return v10 | v11 | v12;
  }
  v11 = 0;
  LOBYTE(v10) = 0;
  v12 = 0;
  return v10 | v11 | v12;
}

uint64_t sub_22E59BCA8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  unint64_t i;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unsigned int v10;

  result = sub_22F10C2A4(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
  if (!result)
    return result;
  if ((*(_DWORD *)(result + 28) & 0x7Eu) - 34 > 3 || (*(_BYTE *)(result + 74) & 0x80) != 0)
    return 0;
  v4 = sub_22EFC3B90(result);
  if (!v4)
    return 1;
  v5 = v4;
LABEL_7:
  if ((*(_BYTE *)(v5 + 68) & 1) != 0 && !*(_QWORD *)(v5 + 40))
  {
LABEL_18:
    while (1)
    {
      v5 = *(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v5)
        return 1;
      if ((*(_DWORD *)(v5 + 28) & 0x7Fu) - 49 < 3)
        goto LABEL_7;
    }
  }
  for (i = *(_QWORD *)(v5 + 48); ; i = *(_QWORD *)(v8 + 32))
  {
    v7 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), i);
    if (!v7)
      break;
    v8 = v7;
    if (*(_BYTE *)(v7 + 16) != 2)
      break;
    v9 = (_QWORD *)(v7 + 40);
    v10 = *(_DWORD *)(v7 + 48);
    if (v10 >= 0x41)
    {
      if (v10 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v7 + 40)) > 0x40)
        continue;
      v9 = (_QWORD *)*v9;
    }
    if (!*v9)
      goto LABEL_18;
  }
  result = sub_22E59BCA8(a1, i);
  if ((_DWORD)result)
    goto LABEL_18;
  return result;
}

uint64_t sub_22E59BDC0(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Impl;
  void *v14[2];
  char v15;

  v4 = sub_22EF5BA38(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(a2 + 48));
  v5 = (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)((sub_22F10ACF8(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)) & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v6 & 8) != 0 && (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) == 0x1800)
    sub_22E59BB88(a1, v4);
  v7 = sub_22F10ACF8(*v5);
  sub_22F10AFE4(v7, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144));
  v14[0] = (void *)0x8000000500000002;
  v14[1] = 0;
  if ((sub_22E3B38EC((_DWORD *)(a1 + 96), v14) & 1) == 0)
    sub_22F10ACF8(*v5);
  v8 = sub_22F10ACF8(*v5);
  if (!sub_22E59C4AC(a1, v8))
  {
    v9 = sub_22F10ACF8(*v5);
    sub_22E59C680(a1, v9);
  }
  if ((*(_DWORD *)(a2 + 96) >> 20) == 255)
  {
    v10 = sub_22EFC72E8(a2);
    sub_22F36F2CC(v10, a2);
  }
  sub_22F27B164(a1, v4);
  sub_22F27B218(a1, v4);
  v11 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v11 + 248))(v14, v11, *(_QWORD *)(a1 + 8), v4, 1);
  Impl = llvm::air::AIBuffer::getImpl();
  if (v15 < 0)
    operator delete(v14[0]);
  return Impl;
}

uint64_t sub_22E59C0A4(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t Impl;
  void *__p;
  char v11;

  sub_22EF5BA38(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(a2 + 48));
  v4 = *(_QWORD **)(a1 + 8);
  if ((*(_DWORD *)(a2 + 96) >> 20) == 255)
  {
    v5 = sub_22EFC72E8(a2);
    sub_22F36F2CC(v5, a2);
    v4 = *(_QWORD **)(a1 + 8);
  }
  v6 = *(_QWORD *)(a2 + 48);
  v7 = sub_22E699F3C(v4);
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v7 + 248))(&__p, v7, *(_QWORD *)(a1 + 8), v6, 1);
  Impl = llvm::air::AITexture::getImpl();
  if (v11 < 0)
    operator delete(__p);
  return Impl;
}

uint64_t sub_22E59C20C(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t Impl;
  void *__p;
  char v11;

  v4 = *(_QWORD **)(a1 + 8);
  if ((*(_DWORD *)(a2 + 96) >> 20) == 255)
  {
    v5 = sub_22EFC72E8(a2);
    sub_22F36F2CC(v5, a2);
    v4 = *(_QWORD **)(a1 + 8);
  }
  v6 = *(_QWORD *)(a2 + 48);
  v7 = sub_22E699F3C(v4);
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v7 + 248))(&__p, v7, *(_QWORD *)(a1 + 8), v6, 1);
  Impl = llvm::air::AISampler::getImpl();
  if (v11 < 0)
    operator delete(__p);
  return Impl;
}

uint64_t sub_22E59C33C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t Impl;
  void *__p;
  char v10;

  if ((*(_DWORD *)(a2 + 96) >> 20) == 255)
  {
    v4 = sub_22EFC72E8(a2);
    sub_22F36F2CC(v4, a2);
  }
  sub_22E59C680(a1, *(_QWORD *)(a2 + 48));
  sub_22F27B164(a1, *(_QWORD *)(a2 + 48));
  sub_22F27B218(a1, *(_QWORD *)(a2 + 48));
  v5 = *(_QWORD *)(a2 + 48);
  v6 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v6 + 248))(&__p, v6, *(_QWORD *)(a1 + 8), v5, 1);
  Impl = llvm::air::AIConstant::getImpl();
  if (v10 < 0)
    operator delete(__p);
  return Impl;
}

uint64_t sub_22E59C4AC(uint64_t a1, unint64_t a2)
{
  uint64_t Impl;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v9;
  void *__p;
  char v11;
  _QWORD v12[4];

  if (!getenv("AIR_INLINE_TYPE_INFO"))
    return 0;
  v12[0] = 0x8000000700000002;
  v12[1] = 0;
  Impl = 0;
  if ((sub_22E3B38EC((_DWORD *)(a1 + 96), v12) & 1) != 0)
    return Impl;
  v5 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), a2);
  if (!v5 || *(_BYTE *)(v5 + 16) != 2)
    return 0;
  v6 = *(_QWORD *)(v5 + 32);
  v7 = (uint64_t *)(v6 & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45)
    sub_22E59C680(a1, v6);
  else
    sub_22E59C4AC(a1, v6);
  if ((sub_22F1110EC(*v7, 0) & 1) == 0)
  {
    sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *v7, (uint64_t)v12);
    sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v6);
  }
  v9 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD, unint64_t, uint64_t))(*(_QWORD *)v9 + 248))(&__p, v9, *(_QWORD *)(a1 + 8), a2, 1);
  LODWORD(v12[0]) = 0;
  Impl = llvm::air::AIInlineTypeInfo::getImpl();
  if (v11 < 0)
    operator delete(__p);
  return Impl;
}

uint64_t sub_22E59C680(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  int v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  int v23;
  uint64_t v24;
  char *v25;
  __int128 v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  size_t v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  _DWORD *v34;
  unsigned int v35;
  uint64_t v36;
  const void *p_p;
  size_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t Impl;
  uint64_t v43;
  void *__p;
  size_t v45;
  int v46;
  char v47;
  void *v48;
  __int128 v49;
  uint64_t v50;
  int v51;
  void *v52;
  __int128 v53;
  _DWORD v54[10];
  char *v55;
  uint64_t v56;
  _QWORD v57[62];

  v57[60] = *MEMORY[0x24BDAC8D0];
  if (!getenv("AIR_INLINE_TYPE_INFO")
    || (v55 = (char *)0x8000000700000002, v56 = 0, (sub_22E3B38EC((_DWORD *)(a1 + 96), &v55) & 1) != 0))
  {
    a2 = sub_22EF5BA38(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), a2);
  }
  v4 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45)
  {
    v5 = sub_22F10C2A4(v4);
    v43 = sub_22F0C975C(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v5);
    v55 = (char *)v57;
    v56 = 0x400000000;
    v6 = sub_22EFC3B90(v5);
    if (!v6)
    {
LABEL_50:
      Impl = llvm::air::AIStructTypeInfo::getImpl();
      sub_22E54E900(&v55);
      return Impl;
    }
    v7 = v6;
LABEL_7:
    v8 = *(_QWORD *)(v7 + 48);
    if (getenv("AIR_INLINE_TYPE_INFO")
      && (__p = (void *)0x8000000700000002, v45 = 0, (sub_22E3B38EC((_DWORD *)(a1 + 96), &__p) & 1) == 0))
    {
      v11 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v8);
      if (v11 && *(_BYTE *)(v11 + 16) == 2)
      {
        v12 = (_QWORD *)(v11 + 40);
        if (*(_DWORD *)(v11 + 48) >= 0x41u)
          v12 = (_QWORD *)*v12;
        v8 = *(_QWORD *)(v11 + 32);
        LODWORD(v10) = *(_DWORD *)v12;
LABEL_18:
        v13 = sub_22E59C4AC(a1, v8);
        if (v13)
        {
          v14 = v13 & 0xFFFFFFFFFFFFFFFBLL;
        }
        else
        {
          v15 = sub_22E59C680(a1, v8);
          if (v15)
            v14 = v15 | 4;
          else
            v14 = 0;
        }
        v50 = 0;
        __p = 0;
        v45 = 0;
        v46 = 0;
        v48 = &v50;
        v49 = xmmword_22F44E360;
        v51 = 0;
        v52 = v54;
        v53 = xmmword_22F44E360;
        v54[2] = 0;
        v16 = sub_22E54E990((uint64_t)&v55, (unint64_t)&__p, 1);
        v17 = v55;
        v18 = v56;
        v19 = &v55[120 * v56];
        v20 = *(_OWORD *)v16;
        *((_DWORD *)v19 + 4) = *(_DWORD *)(v16 + 16);
        *(_OWORD *)v19 = v20;
        *((_OWORD *)v19 + 2) = xmmword_22F44E360;
        *((_QWORD *)v19 + 3) = v19 + 48;
        v21 = (uint64_t)(v19 + 24);
        if (*(_QWORD *)(v16 + 32))
          sub_22E3B2DB8(v21, v16 + 24);
        v22 = &v17[120 * v18];
        v23 = *(_DWORD *)(v16 + 56);
        *((_QWORD *)v22 + 8) = v22 + 88;
        v24 = (uint64_t)(v22 + 64);
        *(_DWORD *)(v24 - 8) = v23;
        *(_OWORD *)(v24 + 8) = xmmword_22F44E360;
        if (*(_QWORD *)(v16 + 72))
          sub_22E3B2DB8(v24, v16 + 64);
        v25 = &v17[120 * v18];
        v26 = *(_OWORD *)(v16 + 96);
        *((_QWORD *)v25 + 14) = *(_QWORD *)(v16 + 112);
        *((_OWORD *)v25 + 6) = v26;
        LODWORD(v56) = v56 + 1;
        if (v52 != v54)
          free(v52);
        if (v48 != &v50)
          free(v48);
        v27 = &v55[120 * v56];
        *((_QWORD *)v27 - 15) = v14;
        v28 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
        v29 = *(_QWORD *)(*(_QWORD *)(v43 + 48) + 8 * sub_22EFC306C(v7));
        *((_DWORD *)v27 - 28) = v29 / sub_22EF5CDF0(v28, *(_QWORD *)(*(_QWORD *)(v28 + 16408) & 0xFFFFFFFFFFFFFFF0));
        sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&__p);
        v30 = 0;
        *((_DWORD *)v27 - 27) = (_DWORD)__p;
        *((_DWORD *)v27 - 26) = v10;
        v31 = *(_QWORD *)(v7 + 40);
        v32 = "";
        if ((v31 & 7) == 0)
        {
          v33 = v31 & 0xFFFFFFFFFFFFFFF8;
          if (v33)
          {
            v34 = *(_DWORD **)(v33 + 16);
            v35 = *v34;
            v32 = (char *)(v34 + 4);
            v30 = v35;
          }
        }
        LOWORD(v49) = 261;
        __p = v32;
        v45 = v30;
        *((_DWORD *)v27 - 16) = 1;
        *((_QWORD *)v27 - 6) = 0;
        llvm::Twine::toVector();
        v36 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
        (*(void (**)(void **__return_ptr, uint64_t, _QWORD, unint64_t, uint64_t))(*(_QWORD *)v36 + 248))(&__p, v36, *(_QWORD *)(a1 + 8), v8, 1);
        if (v47 >= 0)
          p_p = &__p;
        else
          p_p = __p;
        if (v47 >= 0)
          v38 = v47 & 0x7F;
        else
          v38 = v45;
        *((_QWORD *)v27 - 11) = 0;
        if (*((_QWORD *)v27 - 10) < v38)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v39 = *((_QWORD *)v27 - 11);
        }
        else
        {
          v39 = 0;
          v40 = 0;
          if (!v38)
          {
LABEL_43:
            *((_QWORD *)v27 - 11) = v40 + v38;
            if (v47 < 0)
              operator delete(__p);
            while (1)
            {
              v7 = *(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF8;
              if (!v7)
                goto LABEL_50;
              if ((*(_DWORD *)(v7 + 28) & 0x7Fu) - 49 < 3)
                goto LABEL_7;
            }
          }
        }
        memcpy((void *)(*((_QWORD *)v27 - 12) + v39), p_p, v38);
        v40 = *((_QWORD *)v27 - 11);
        goto LABEL_43;
      }
    }
    else
    {
      v9 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v8);
      v10 = v9;
      if (!v9)
        goto LABEL_18;
      if (*(_BYTE *)(v9 + 16) == 2)
      {
        v8 = sub_22EF5BA38(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v8);
        LODWORD(v10) = sub_22EF6A060(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v10);
        goto LABEL_18;
      }
    }
    LODWORD(v10) = 0;
    goto LABEL_18;
  }
  return 0;
}

uint64_t sub_22E59CB64(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_24FA656B0;
  v2 = *(void **)(a1 + 576);
  if (v2)
  {
    *(_QWORD *)(a1 + 584) = v2;
    operator delete(v2);
  }
  llvm::deallocate_buffer(*(llvm **)(a1 + 552), (void *)(32 * *(unsigned int *)(a1 + 568)));
  v3 = *(_QWORD *)(a1 + 544);
  *(_QWORD *)(a1 + 544) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
  v4 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  if (v4)
    MEMORY[0x2348A0E9C](v4, 0x1000C4069DB8102);
  return sub_22F27987C(a1);
}

uint64_t sub_22E59CBFC(uint64_t *a1, uint64_t a2, unsigned int a3, __int128 *a4, __int128 *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  llvm::PHINode *v27;
  uint64_t v28;
  uint64_t v29;
  llvm::PHINode *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v46;
  __int128 v47;
  uint64_t *v48;
  int v49;
  unsigned int *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71[3];
  unint64_t v72;
  _QWORD v73[4];
  __int16 v74;

  v6 = a6;
  v9 = *a1;
  v10 = *(_QWORD *)(*(_QWORD *)(*a1 + 32 * a3 + 16) + 16);
  if (a6)
  {
    if (*(_QWORD *)(a6 + 96)
      || v10 && (*(_DWORD *)(v10 + 28) & 0x7F) == 0x40 && (*(_DWORD *)(v10 + 96) & 0x600u) - 1536 > 0xFFFFFBFF)
    {
      v11 = a4[1];
      v58 = *a4;
      v59 = v11;
      v60 = a4[2];
      v12 = *(_QWORD *)(v10 + 48);
    }
    else
    {
      v46 = *(_QWORD *)(v10 + 88);
      v47 = a4[1];
      v58 = *a4;
      v59 = v47;
      v60 = a4[2];
      v12 = *(_QWORD *)(v10 + 48);
      if (v46 > 7)
        goto LABEL_6;
    }
    v50 = *(unsigned int **)(v9 + 32 * a3 + 24);
    v49 = 1;
    goto LABEL_7;
  }
  v13 = a4[1];
  v58 = *a4;
  v59 = v13;
  v60 = a4[2];
  v12 = *(_QWORD *)(v10 + 48);
LABEL_6:
  v50 = (unsigned int *)sub_22EFBC5B4(v10);
  v49 = 0;
LABEL_7:
  v14 = a5[1];
  v55 = *a5;
  v56 = v14;
  v57 = a5[2];
  v72 = 0;
  v15 = *(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0);
  if (v15)
    v16 = (*(_DWORD *)(v15 + 16) & 0xFEu) - 6 > 0xFFFFFFFB;
  else
    v16 = 0;
  if (!v16)
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 <= 3)
      v15 = sub_22F10CF48(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0));
    else
      v15 = 0;
  }
  v17 = (uint64_t *)sub_22E620E9C(a2, (llvm::LLVMContext *)v15, &v72, (uint64_t)&v58);
  if (v6)
  {
    v71[0] = v55;
    v71[1] = v56;
    v71[2] = v57;
    LOWORD(v69) = 257;
    sub_22E3BEE6C((uint64_t *)(a2 + 272), v71, *((uint64_t *)&v58 + 1), (uint64_t)&v66, (uint64_t)&v55);
    if ((BYTE8(v56) & 3) != 0)
      v48 = (uint64_t *)sub_22F28ABCC(&v55, a2);
    else
      v48 = (uint64_t *)v55;
  }
  else
  {
    v48 = 0;
  }
  if ((BYTE8(v59) & 3) != 0)
    v18 = (uint64_t *)sub_22F28ABCC(&v58, a2);
  else
    v18 = (uint64_t *)v58;
  LOWORD(v69) = 257;
  v19 = sub_22E42129C((uint64_t *)(a2 + 272), *((uint64_t *)&v58 + 1), v18, v17, (uint64_t)&v66);
  *(_QWORD *)&v66 = "omp.arrayinit.body";
  LOWORD(v69) = 259;
  v20 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  *(_QWORD *)&v66 = "omp.arrayinit.done";
  LOWORD(v69) = 259;
  v21 = operator new();
  llvm::BasicBlock::BasicBlock();
  *(_QWORD *)&v66 = "omp.arrayinit.isempty";
  LOWORD(v69) = 259;
  v51 = v19;
  v22 = sub_22E3C18F4(a2 + 272, 32, v18, v19, (uint64_t)&v66);
  v23 = llvm::User::operator new((llvm::User *)0x40);
  v53 = (_QWORD *)v21;
  MEMORY[0x23489C09C](v23, v21, v20, v22, 0);
  LOWORD(v69) = 257;
  sub_22E3C12C8((uint64_t *)(a2 + 272), v23, (uint64_t)&v66);
  v24 = *(_QWORD *)(a2 + 320);
  v52 = v20;
  sub_22E5ED9B4((_QWORD *)a2, v20, 0);
  sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 144), *(_QWORD *)(v72 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v66);
  v25 = v66;
  v54 = v6;
  if (v6)
  {
    v26 = *v48;
    *(_QWORD *)&v66 = "omp.arraycpy.srcElementPast";
    LOWORD(v69) = 259;
    v27 = (llvm::PHINode *)sub_22E3C4B80((uint64_t *)(a2 + 272), v26, 2, (uint64_t)&v66);
    sub_22E3C4C50(v27, (uint64_t)v48, v24);
    v6 = *((_QWORD *)&v55 + 1);
    v28 = (v56 | v25) & -(uint64_t)(v56 | v25);
  }
  else
  {
    v27 = 0;
    v28 = 0;
  }
  v29 = *v18;
  *(_QWORD *)&v66 = "omp.arraycpy.destElementPast";
  LOWORD(v69) = 259;
  v30 = (llvm::PHINode *)sub_22E3C4B80((uint64_t *)(a2 + 272), v29, 2, (uint64_t)&v66);
  sub_22E3C4C50(v30, (uint64_t)v18, v24);
  v31 = *((_QWORD *)&v58 + 1);
  v32 = (v59 | v25) & -(uint64_t)(v59 | v25);
  v33 = *(_QWORD *)(a2 + 1992) - *(_QWORD *)(a2 + 2000);
  v34 = *(_QWORD *)(a2 + 2312);
  v35 = *(_BYTE *)(a2 + 2893);
  *(_BYTE *)(a2 + 2893) = 0;
  v36 = *(_QWORD *)(a2 + 2872);
  *(_QWORD *)(a2 + 2872) = v33;
  if (v49)
  {
    *(_QWORD *)&v66 = v30;
    *((_QWORD *)&v66 + 1) = v31;
    v67 = v32;
    v68 = 0;
    v69 = 0;
    v70 = 0;
    *(_QWORD *)&v61 = v27;
    *((_QWORD *)&v61 + 1) = v6;
    v62 = v28;
    v63 = 0;
    v64 = 0;
    v65 = 0;
    v37 = v54;
    sub_22E59D660(a2, v54, v50, &v66, &v61, v72);
  }
  else
  {
    v38 = 0;
    v39 = 0;
    *(_QWORD *)&v66 = v30;
    *((_QWORD *)&v66 + 1) = v31;
    v67 = v32;
    v68 = 0;
    v69 = 0;
    v70 = 0;
    v40 = *(_QWORD *)((v72 & 0xFFFFFFFFFFFFFFF0) + 8);
    if ((v40 & 8) != 0)
    {
      v39 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFFFF0) + 0x18);
      v38 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
    }
    sub_22E4DA890(a2, v50, &v66, v38 | v39 | (v40 | v72) & 7, 0);
    v37 = v54;
  }
  *(_BYTE *)(a2 + 2893) = v35;
  sub_22E48B274(a2, v33, v34, 0, 0);
  *(_QWORD *)(a2 + 2872) = v36;
  if (v37)
  {
    v73[0] = "omp.arraycpy.dest.element";
    v74 = 259;
    v41 = sub_22E4363E4((uint64_t *)(a2 + 272), *((llvm::LLVMContext **)&v55 + 1), (uint64_t *)v27, 1, (uint64_t)v73);
    sub_22E3C4C50(v27, v41, *(_QWORD *)(a2 + 320));
  }
  v73[0] = "omp.arraycpy.dest.element";
  v74 = 259;
  v42 = (uint64_t *)sub_22E4363E4((uint64_t *)(a2 + 272), *((llvm::LLVMContext **)&v58 + 1), (uint64_t *)v30, 1, (uint64_t)v73);
  v73[0] = "omp.arraycpy.done";
  v74 = 259;
  v43 = sub_22E3C18F4(a2 + 272, 32, v42, v51, (uint64_t)v73);
  v44 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x23489C09C](v44, v53, v52, v43, 0);
  v74 = 257;
  sub_22E3C12C8((uint64_t *)(a2 + 272), v44, (uint64_t)v73);
  sub_22E3C4C50(v30, (uint64_t)v42, *(_QWORD *)(a2 + 320));
  return sub_22E5ED9B4((_QWORD *)a2, v53, 1);
}

int32x2_t sub_22E59D1E0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  llvm::Instruction *v11;
  int32x2_t result;
  llvm::Instruction *v13;
  uint64_t v14;
  llvm::Instruction **v15;
  int v16;
  uint64_t SizeOf;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t PtrDiff;
  uint64_t v23;
  uint64_t v24;
  llvm::Instruction *v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  llvm::Instruction **v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  char v36[24];
  uint64_t v37;
  __int128 v38;
  __int16 v39;
  char v40;
  char v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;

  v5 = a3;
  v6 = *(_QWORD *)a1 + 32 * a3;
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 16) + 16) + 48);
  if ((*(_BYTE *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 17) & 8) == 0)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 1248) + 272 * a3 + 64);
    v9 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0);
    if (!v9 || (v10 = *(_DWORD *)(v9 + 16), (v10 & 0xFE) != 0x28))
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28
        || (v9 = sub_22F10CF48(v9)) == 0)
      {
LABEL_5:
        v11 = sub_22F28CE84(a2, v8);
        v13 = v11;
        v14 = *(unsigned int *)(a1 + 2360);
        if (v14 >= *(_DWORD *)(a1 + 2364))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v14 = *(_QWORD *)(a1 + 2352) + 16 * *(unsigned int *)(a1 + 2360);
          *(_QWORD *)v14 = v13;
          *(_QWORD *)(v14 + 8) = 0;
          LODWORD(v14) = *(_DWORD *)(a1 + 2360);
        }
        else
        {
          v15 = (llvm::Instruction **)(*(_QWORD *)(a1 + 2352) + 16 * v14);
          *v15 = v11;
          v15[1] = 0;
        }
        *(_DWORD *)(a1 + 2360) = v14 + 1;
        return result;
      }
      v10 = *(_DWORD *)(v9 + 16);
    }
    if ((v10 & 0x100000) != 0)
    {
      do
      {
        v9 = *(_QWORD *)(*(_QWORD *)(v9 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v9)
        {
          v34 = *(_DWORD *)(v9 + 16);
          if ((v34 & 0xFE) == 0x28)
            continue;
        }
        v9 = sub_22F10CF48(v9);
        v34 = *(_DWORD *)(v9 + 16);
      }
      while ((v34 & 0x100000) != 0);
    }
    v8 = *(_QWORD *)(v9 + 32);
    goto LABEL_5;
  }
  v16 = **(unsigned __int8 **)(v6 + 8);
  SizeOf = llvm::ConstantExpr::getSizeOf();
  if (v16 == 191)
  {
    v18 = *(_QWORD *)(a1 + 1248) + 272 * v5;
    v19 = *(_QWORD *)(v18 + 200);
    v42 = *(_OWORD *)(v18 + 144);
    v43 = *(_OWORD *)(v18 + 160);
    v44 = *(_OWORD *)(v18 + 176);
    sub_22E5E0440(a2, (uint64_t)&v42, v19, &v37);
    v20 = *(_QWORD *)(a1 + 1248) + 272 * v5;
    v21 = *(_QWORD *)(v20 + 64);
    v42 = *(_OWORD *)(v20 + 8);
    v43 = *(_OWORD *)(v20 + 24);
    v44 = *(_OWORD *)(v20 + 40);
    sub_22E5E0440(a2, (uint64_t)&v42, v21, &v37);
    v39 = 257;
    PtrDiff = llvm::IRBuilderBase::CreatePtrDiff();
    v23 = llvm::ConstantInt::get();
    v39 = 257;
    v24 = (uint64_t)sub_22F26180C(a2 + 272, PtrDiff, v23, (uint64_t)&v37);
    v39 = 257;
    v25 = sub_22E3BDEA8(a2 + 272, v24, SizeOf, (uint64_t)&v37, 1, 0);
    goto LABEL_14;
  }
  v26 = *(_QWORD *)(*(_QWORD *)(a1 + 1248) + 272 * v5 + 64);
  v27 = *(_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF0);
  if (v27)
  {
    v28 = *(_DWORD *)(v27 + 16);
    if ((v28 & 0xFE) == 0x28)
      goto LABEL_30;
  }
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
  {
    v27 = sub_22F10CF48(v27);
    if (v27)
    {
      v28 = *(_DWORD *)(v27 + 16);
LABEL_30:
      if ((v28 & 0x100000) != 0)
      {
        do
        {
          v27 = *(_QWORD *)(*(_QWORD *)(v27 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v27)
          {
            v35 = *(_DWORD *)(v27 + 16);
            if ((v35 & 0xFE) == 0x28)
              continue;
          }
          v27 = sub_22F10CF48(v27);
          v35 = *(_DWORD *)(v27 + 16);
        }
        while ((v35 & 0x100000) != 0);
      }
      v26 = *(_QWORD *)(v27 + 32);
    }
  }
  v25 = sub_22F28CE84(a2, v26);
  v39 = 257;
  v24 = sub_22E4DF3BC(a2 + 272, (uint64_t)v25, SizeOf, (uint64_t)&v37, 1);
LABEL_14:
  v29 = *(unsigned int *)(a1 + 2360);
  if (v29 >= *(_DWORD *)(a1 + 2364))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v29 = *(_QWORD *)(a1 + 2352) + 16 * *(unsigned int *)(a1 + 2360);
    *(_QWORD *)v29 = v25;
    *(_QWORD *)(v29 + 8) = v24;
    LODWORD(v29) = *(_DWORD *)(a1 + 2360);
  }
  else
  {
    v30 = (llvm::Instruction **)(*(_QWORD *)(a1 + 2352) + 16 * v29);
    *v30 = v25;
    v30[1] = (llvm::Instruction *)v24;
  }
  *(_DWORD *)(a1 + 2360) = v29 + 1;
  v31 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 144), v7);
  if (*(_BYTE *)(v31 + 16) == 5)
    v32 = v31;
  else
    v32 = 0;
  v33 = *(_QWORD *)(v32 + 40);
  *(_QWORD *)&v42 = a2;
  v37 = v33;
  v38 = (unint64_t)v24;
  v41 = 0;
  sub_22F25406C(a2 + 4088, &v37, &v38, (uint64_t)v36);
  *((_QWORD *)&v42 + 1) = v33;
  LOBYTE(v43) = 0;
  v37 = v24;
  *(_QWORD *)&v38 = 0;
  v40 = 0;
  *((_QWORD *)&v43 + 1) = sub_22F297CB8(a2, &v37);
  sub_22E61DFC4(a2);
  if (v33)
    return sub_22F254324((uint64_t)&v42 + 8, a2);
  return result;
}

uint64_t sub_22E59D5F8(_BYTE *a1)
{
  unsigned __int8 **v1;
  unsigned __int8 *v2;
  uint64_t result;

  if ((*a1 + 113) < 0xFBu)
    return 0;
  v1 = *(unsigned __int8 ***)&a1[a1[3]];
  if (*(unsigned __int8 *)v1 != 210)
    return 0;
  v2 = sub_22EFFEB40(v1[2]);
  if (*v2 != 161)
    return 0;
  result = *((_QWORD *)v2 + 2);
  if (!result || (*(_DWORD *)(result + 28) & 0x7F) != 0x47)
    return 0;
  return result;
}

void sub_22E59D660(uint64_t a1, uint64_t a2, unsigned int *a3, __int128 *a4, __int128 *a5, unint64_t a6)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  unint64_t v42;
  _BYTE *v43;
  _OWORD *v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  _OWORD v52[3];
  uint64_t v53;
  _BYTE *v54;
  char v55;
  uint64_t v56;
  _BYTE v57[24];
  _OWORD v58[3];
  _OWORD v59[8];
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  std::string __p;
  __int128 v71;
  __int128 v72;
  _BYTE v73[24];
  _BYTE v74[136];
  uint64_t v75;
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD *)(a1 + 144);
  if (*(_QWORD *)(a2 + 96))
  {
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v9 + 808) + 80))(*(_QWORD *)(v9 + 808), a2);
    v20 = v19;
    v21 = *a3;
    v22 = (uint64_t *)((char *)a3 + (v21 >> 24));
    v23 = *v22;
    v24 = &v22[(v21 >> 18) & 1];
    v25 = sub_22EFFA6B0((unsigned __int8 *)v24[1]);
    v26 = sub_22EFFA6B0((unsigned __int8 *)v24[2]);
    v27 = *((_QWORD *)v25 + 2);
    v28 = *((_QWORD *)v26 + 2);
    v74[25] = 1;
    v29 = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000);
    v30 = *(_QWORD *)(a1 + 2312);
    v74[24] = *(_BYTE *)(a1 + 2893);
    *(_BYTE *)(a1 + 2893) = 0;
    v31 = *(_QWORD *)(a1 + 2872);
    *(_QWORD *)v74 = v29;
    *(_QWORD *)&v74[8] = v31;
    *(_QWORD *)&v74[16] = v30;
    *(_QWORD *)(a1 + 2872) = v29;
    *(_QWORD *)&v74[48] = 0;
    *(_OWORD *)&v74[32] = (unint64_t)a1;
    *(_DWORD *)&v74[56] = 0;
    memset(&v74[64], 0, 20);
    v32 = *(_QWORD *)(v27 + 16);
    v33 = a4[1];
    v61 = *a4;
    v62 = v33;
    v63 = a4[2];
    sub_22E5BC134((uint64_t *)&v74[40], a1, v32, (uint64_t)&v61);
    v34 = *(_QWORD *)(v28 + 16);
    v35 = a5[1];
    v61 = *a5;
    v62 = v35;
    v63 = a5[2];
    sub_22E5BC134((uint64_t *)&v74[40], *(uint64_t *)&v74[32], v34, (uint64_t)&v61);
    sub_22E5BC320((uint64_t)&v74[64], *(_QWORD *)&v74[32] + 2904);
    sub_22F2840EC((uint64_t)&v74[64]);
    *(_QWORD *)&v71 = a1;
    *(_QWORD *)&v61 = v23;
    *((_QWORD *)&v61 + 1) = v20;
    *(_QWORD *)&v62 = 0;
    BYTE8(v64) = 0;
    sub_22F25406C(a1 + 4088, &v61, (__int128 *)((char *)&v61 + 8), (uint64_t)&v53);
    *((_QWORD *)&v71 + 1) = v23;
    LOBYTE(v72) = 0;
    v61 = v20;
    LOBYTE(v64) = 0;
    *((_QWORD *)&v72 + 1) = sub_22F297CB8(a1, &v61);
    sub_22E4D89CC(a1);
    if (v23)
      sub_22F254324((uint64_t)&v71 + 8, a1);
    sub_22F283FC4((uint64_t)v74);
  }
  else
  {
    sub_22E507208((_QWORD *)v9, a6);
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 808);
    *(_QWORD *)v74 = "init";
    *(_QWORD *)&v74[8] = 4;
    sub_22F27BE70(&__p, v11, (uint64_t)v74, 1);
    llvm::User::operator new((llvm::User *)0x58);
    *(_WORD *)&v74[32] = 260;
    *(_QWORD *)v74 = &__p;
    v12 = llvm::GlobalVariable::GlobalVariable();
    sub_22E619C24(v12, a6, 0, 0, a1, (uint64_t)&v61);
    v13 = sub_22E619D68(a6);
    if (v13 == 2)
    {
      sub_22E5BBE34((uint64_t)v73, *(_DWORD *)(a2 + 24), a6, 1, 0, 0);
      *(_OWORD *)&v74[88] = v66;
      *(_OWORD *)&v74[104] = v67;
      *(_OWORD *)&v74[120] = v68;
      *(_OWORD *)&v74[24] = v62;
      *(_OWORD *)&v74[40] = v63;
      *(_OWORD *)&v74[56] = v64;
      *(_OWORD *)&v74[72] = v65;
      *(_OWORD *)&v74[8] = v61;
      *(_QWORD *)&v71 = a1;
      v36 = (char *)&v71 + 8;
      v75 = v69;
      *(_QWORD *)v74 = v73;
      sub_22F253D5C(a1 + 4064, v74, (uint64_t)&v74[8], (uint64_t)&v53);
      v37 = 0;
      v38 = 0;
      *((_QWORD *)&v71 + 1) = v73;
      LOBYTE(v72) = 1;
      *((_QWORD *)&v72 + 1) = 0;
      v39 = a4[2];
      v40 = *a4;
      v58[1] = a4[1];
      v58[2] = v39;
      v58[0] = v40;
      v41 = *(_QWORD *)((a6 & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v41 & 8) != 0)
      {
        v38 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFFFF0) + 0x18);
        v37 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
      }
      v42 = v37 | v38 | (v41 | a6) & 7;
      v43 = v73;
      v44 = v58;
    }
    else
    {
      if (v13 == 1)
      {
        *(_OWORD *)&v74[96] = v67;
        *(_OWORD *)&v74[112] = v68;
        *(_QWORD *)&v74[128] = v69;
        *(_OWORD *)&v74[32] = v63;
        *(_OWORD *)&v74[48] = v64;
        *(_OWORD *)&v74[64] = v65;
        *(_OWORD *)&v74[80] = v66;
        *(_OWORD *)v74 = v61;
        *(_OWORD *)&v74[16] = v62;
        v45 = *(_DWORD *)(a2 + 24);
        *(_QWORD *)&v71 = a1;
        *((_QWORD *)&v71 + 1) = a1 + 272;
        LOWORD(v72) = 0;
        v14 = sub_22E5027E0((uint64_t)&v71, (uint64_t)v74, v45);
        v15 = v46;
        v16 = 2;
      }
      else if (v13)
      {
        v14 = 0;
        v15 = 0;
        v16 = 0;
      }
      else
      {
        v59[6] = v67;
        v59[7] = v68;
        v60 = v69;
        v59[2] = v63;
        v59[3] = v64;
        v59[4] = v65;
        v59[5] = v66;
        v59[0] = v61;
        v59[1] = v62;
        sub_22E4D7B28((_QWORD *)a1, (uint64_t)v59, *(_DWORD *)(a2 + 24), (uint64_t)v74);
        v15 = *(_QWORD *)&v74[8];
        v14 = *(_QWORD *)v74;
        v71 = *(_OWORD *)&v74[16];
        v72 = *(_OWORD *)&v74[32];
        v16 = v74[48];
      }
      sub_22E5BBE34((uint64_t)v57, *(_DWORD *)(a2 + 24), a6, 0, 0, 0);
      v53 = a1;
      v36 = (char *)&v54;
      *(_QWORD *)v74 = v57;
      *(_QWORD *)&v74[8] = v14;
      *(_QWORD *)&v74[16] = v15;
      *(_OWORD *)&v74[24] = v71;
      *(_OWORD *)&v74[40] = v72;
      v74[56] = v16;
      sub_22F25406C(a1 + 4088, v74, (__int128 *)&v74[8], (uint64_t)v73);
      v54 = v57;
      v55 = 0;
      *(_QWORD *)v74 = v14;
      *(_QWORD *)&v74[8] = v15;
      *(_OWORD *)&v74[16] = v71;
      *(_OWORD *)&v74[32] = v72;
      v74[48] = v16;
      v47 = sub_22F297CB8(a1, v74);
      v48 = 0;
      v49 = 0;
      v56 = v47;
      v50 = a4[1];
      v52[0] = *a4;
      v52[1] = v50;
      v52[2] = a4[2];
      v51 = *(_QWORD *)((a6 & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v51 & 8) != 0)
      {
        v49 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFFFF0) + 0x18);
        v48 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
      }
      v42 = v48 | v49 | (v51 | a6) & 7;
      v43 = v57;
      v44 = v52;
    }
    sub_22E4DA890(a1, v43, v44, v42, 0);
    sub_22F254324((uint64_t)v36, a1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

_QWORD *sub_22E59DB9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, _OWORD *a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  _OWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t *PtrDiff;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  int v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  _OWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _OWORD *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _BYTE v93[48];
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  int v99;
  int v100;
  unsigned __int8 *v101;
  _BYTE v102[40];
  char v103[32];
  __int16 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  int v125;
  int v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  _BYTE v130[64];
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  __int128 v136[2];
  uint64_t v137;

  v101 = 0;
  v9 = a3;
  v10 = sub_22E59E51C(*(unsigned __int8 **)(*(_QWORD *)a1 + 32 * a3 + 8), &v101);
  result = (_QWORD *)(a1 + 2432);
  if (!v10)
  {
    v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 32 * v9 + 8) + 16);
    v33 = *(unsigned int *)(a1 + 2440);
    if (v33 >= *(_DWORD *)(a1 + 2444))
    {
      result = (_QWORD *)llvm::SmallVectorBase<unsigned int>::grow_pod();
      *(_QWORD *)(*(_QWORD *)(a1 + 2432) + 8 * *(unsigned int *)(a1 + 2440)) = v32;
      LODWORD(v33) = *(_DWORD *)(a1 + 2440);
    }
    else
    {
      *(_QWORD *)(*result + 8 * v33) = v32;
    }
    *(_DWORD *)(a1 + 2440) = v33 + 1;
    v34 = a4[1];
    *a5 = *a4;
    a5[1] = v34;
    a5[2] = a4[2];
    return result;
  }
  v12 = *(unsigned int *)(a1 + 2440);
  v85 = a5;
  v80 = a4;
  if (v12 >= *(_DWORD *)(a1 + 2444))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    *(_QWORD *)(*(_QWORD *)(a1 + 2432) + 8 * *(unsigned int *)(a1 + 2440)) = v10;
    LODWORD(v12) = *(_DWORD *)(a1 + 2440);
  }
  else
  {
    *(_QWORD *)(*result + 8 * v12) = v10;
  }
  *(_DWORD *)(a1 + 2440) = v12 + 1;
  sub_22E4D8D7C(&v94);
  v79 = v10;
  v13 = *(_QWORD *)(v10 + 48);
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 272 * v9 + 64);
  *(_QWORD *)v93 = *((_QWORD *)&v94 + 1);
  *(_OWORD *)&v93[8] = v95;
  *(_OWORD *)&v93[24] = v96;
  *(_QWORD *)&v93[40] = v97;
  v90 = v98;
  v92 = a2;
  v15 = v99;
  v16 = v100;
  v17 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0);
  v83 = a1;
  if (!v18 || (v19 = *(_DWORD *)(v18 + 16), (v19 & 0xFE) != 0x28))
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
      goto LABEL_7;
    v72 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 272 * v9 + 64);
    v18 = sub_22F10CF48(v18);
    if (!v18)
    {
      v14 = v72;
      goto LABEL_7;
    }
    v19 = *(_DWORD *)(v18 + 16);
    v14 = v72;
  }
  if ((v19 & 0x100000) != 0)
  {
    do
    {
      v74 = v14;
      v18 = *(_QWORD *)(*(_QWORD *)(v18 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (!v18 || (v75 = *(_DWORD *)(v18 + 16), (v75 & 0xFE) != 0x28))
      {
        v18 = sub_22F10CF48(v18);
        v75 = *(_DWORD *)(v18 + 16);
      }
      v14 = v74;
    }
    while ((v75 & 0x100000) != 0);
  }
  v13 = *(_QWORD *)(v18 + 32);
  v17 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF0);
LABEL_7:
  v20 = *v17;
  v21 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*v17 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  v22 = v21 == 39;
  v78 = v14;
  if (v21 == 39 || (v21 & 0xFE) == 0x28)
  {
    v86 = v14 & 7;
    v88 = v14 & 0xFFFFFFFFFFFFFFF0;
    if ((v17[1] | v13 & 7) != (*(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF0) + 8) | v86))
    {
      do
      {
        if (*(_BYTE *)(v20 + 16) == 39)
          v23 = v20;
        else
          v23 = 0;
        if (v22 && !v23)
          v23 = sub_22F10CF48(v20);
        if (v23)
        {
          v127 = *(_OWORD *)v93;
          v128 = *(_OWORD *)&v93[16];
          v129 = *(_OWORD *)&v93[32];
          sub_22F25FAEC(a2, &v127, v23, (uint64_t)v130);
          *(_QWORD *)v93 = *(_QWORD *)&v130[8];
          *(_OWORD *)&v93[8] = *(_OWORD *)&v130[16];
          *(_OWORD *)&v93[24] = *(_OWORD *)&v130[32];
          *(_QWORD *)&v93[40] = *(_QWORD *)&v130[48];
          v90 = v131;
          v15 = DWORD1(v132);
          v16 = DWORD2(v132);
        }
        else
        {
          sub_22E6281E0(*(_QWORD **)(a2 + 144), v13, (uint64_t)&v105);
          v120 = *(_OWORD *)v93;
          v121 = *(_OWORD *)&v93[16];
          v122 = *(_OWORD *)&v93[32];
          v24 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
          v108 = v105;
          v109 = v106;
          *(_QWORD *)&v110 = v107;
          memset(&v130[8], 0, 28);
          *(_QWORD *)&v130[40] = 0;
          *(_QWORD *)&v130[48] = 0;
          v131 = 0uLL;
          *(_QWORD *)((char *)&v132 + 4) = 2;
          *(_DWORD *)v130 = 0;
          v133 = 0u;
          v134 = 0u;
          sub_22E3C113C((uint64_t)v130, &v120, v13, 2, &v108, v24);
          v117 = v133;
          v118 = v134;
          v119 = v135;
          v113 = *(_OWORD *)&v130[32];
          v114 = *(_OWORD *)&v130[48];
          v115 = v131;
          v116 = v132;
          v111 = *(_OWORD *)v130;
          v112 = *(_OWORD *)&v130[16];
          sub_22E4E97E0(a2, (uint64_t)&v111, (uint64_t)&v120);
          *(_QWORD *)v93 = *((_QWORD *)&v120 + 1);
          *(_OWORD *)&v93[8] = v121;
          *(_OWORD *)&v93[24] = v122;
          *(_QWORD *)&v93[40] = v123;
          v90 = v124;
          v15 = v125;
          v16 = v126;
        }
        v13 = sub_22F10ACF8(*v17);
        v17 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF0);
        v20 = *(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0);
        v25 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
        v22 = v25 == 39;
      }
      while ((v25 == 39 || (v25 & 0xFE) == 0x28)
           && (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFF0) + 8) | v13 & 7) != (*(_QWORD *)(v88 + 8) | v86));
    }
  }
  v26 = (uint64_t *)(a2 + 272);
  v105 = *(_OWORD *)v93;
  v106 = *(_OWORD *)&v93[16];
  v107 = *(_OWORD *)&v93[32];
  v27 = sub_22E66C868(*(_QWORD *)(a2 + 144) + 280, v78, 0);
  v104 = 257;
  sub_22E3BEE6C((uint64_t *)(a2 + 272), &v105, v27, (uint64_t)v103, (uint64_t)&v108);
  if (v16 == 1)
  {
    *(_DWORD *)v102 = 1;
    memset(&v102[8], 0, 32);
    v29 = v9;
    v28 = a1;
    v30 = v80;
    v31 = v90;
  }
  else
  {
    v31 = v90;
    sub_22E6281E0(*(_QWORD **)(a2 + 144), v90, (uint64_t)v102);
    v29 = v9;
    v28 = v83;
    v30 = v80;
  }
  v120 = v108;
  v121 = v109;
  v122 = v110;
  v35 = *(_QWORD *)(*(_QWORD *)(v92 + 144) + 144);
  v136[0] = *(_OWORD *)v102;
  v136[1] = *(_OWORD *)&v102[16];
  v137 = *(_QWORD *)&v102[32];
  memset(&v130[8], 0, 28);
  *(_QWORD *)&v130[48] = 0;
  *(_QWORD *)&v130[40] = 0;
  v131 = 0uLL;
  *(_QWORD *)((char *)&v132 + 4) = 2;
  *(_DWORD *)v130 = 0;
  v133 = 0u;
  v134 = 0u;
  sub_22E3C113C((uint64_t)v130, &v120, v31, v15, v136, v35);
  v36 = *(_QWORD *)(v28 + 144) + 272 * v29;
  v37 = *(_OWORD *)(v36 + 24);
  v127 = *(_OWORD *)(v36 + 8);
  v128 = v37;
  v129 = *(_OWORD *)(v36 + 40);
  v38 = *((_QWORD *)&v127 + 1);
  v111 = *(_OWORD *)&v130[8];
  v112 = *(_OWORD *)&v130[24];
  v113 = *(_OWORD *)&v130[40];
  sub_22E5E0440(v92, (uint64_t)&v111, v131, &v120);
  if ((BYTE8(v128) & 3) != 0)
    sub_22F28ABCC(&v127, v92);
  LOWORD(v122) = 257;
  PtrDiff = (uint64_t *)llvm::IRBuilderBase::CreatePtrDiff();
  if ((*((_BYTE *)v30 + 24) & 3) != 0)
    v40 = sub_22F28ABCC(v30, v92);
  else
    v40 = *(_QWORD *)v30;
  v41 = llvm::PointerType::get();
  LOWORD(v122) = 257;
  v42 = (uint64_t *)sub_22E3C1338(v26, v40, v41, (uint64_t)&v120);
  LOWORD(v122) = 257;
  v43 = sub_22E42129C(v26, v38, v42, PtrDiff, (uint64_t)&v120);
  v44 = *(_QWORD *)(v79 + 48);
  v45 = *(_QWORD *)(*(_QWORD *)(v28 + 144) + 272 * v29 + 64);
  v46 = *((_QWORD *)&v94 + 1);
  v48 = *((_QWORD *)&v95 + 1);
  v47 = v95;
  v49 = (uint64_t *)(v44 & 0xFFFFFFFFFFFFFFF0);
  v50 = *(_QWORD *)(v44 & 0xFFFFFFFFFFFFFFF0);
  if (v50)
  {
    v51 = *(_DWORD *)(v50 + 16);
    if ((v51 & 0xFE) == 0x28)
      goto LABEL_83;
  }
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v50 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
  {
    v73 = *((_QWORD *)&v94 + 1);
    v50 = sub_22F10CF48(v50);
    if (v50)
    {
      v51 = *(_DWORD *)(v50 + 16);
      v46 = v73;
LABEL_83:
      if ((v51 & 0x100000) != 0)
      {
        do
        {
          v76 = v46;
          v50 = *(_QWORD *)(*(_QWORD *)(v50 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (!v50 || (v77 = *(_DWORD *)(v50 + 16), (v77 & 0xFE) != 0x28))
          {
            v50 = sub_22F10CF48(v50);
            v77 = *(_DWORD *)(v50 + 16);
          }
          v46 = v76;
        }
        while ((v77 & 0x100000) != 0);
      }
      v44 = *(_QWORD *)(v50 + 32);
      v49 = (uint64_t *)(v44 & 0xFFFFFFFFFFFFFFF0);
    }
  }
  v52 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*v49 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v52 != 39 && (v52 & 0xFE) != 0x28)
    goto LABEL_72;
  v53 = v45 & 0xFFFFFFFFFFFFFFF0;
  v54 = v45 & 7;
  if ((v49[1] | v44 & 7) == (*(_QWORD *)((v45 & 0xFFFFFFFFFFFFFFF0) + 8) | v54))
    goto LABEL_72;
  v81 = v48;
  v82 = v47;
  v84 = v43;
  v87 = 0;
  v89 = 0;
  v91 = 0;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  do
  {
    *(_QWORD *)&v111 = "tmp";
    LOWORD(v113) = 259;
    v58 = sub_22F25E4D4(v92, v44, (uint64_t)&v111, 0);
    v60 = v58;
    v61 = v59;
    if (v55)
    {
      *(_QWORD *)&v120 = v55;
      *((_QWORD *)&v120 + 1) = v56;
      *(_QWORD *)&v121 = v57;
      DWORD2(v121) = 0;
      v122 = 0uLL;
      sub_22E3BEDDC(v26, v58 & 0xFFFFFFFFFFFFFFF8, &v120, 0);
      if (v60 >= 8)
        v56 = v61 & 0xFFFFFFFFFFFFFFF8;
      else
        v56 = 0;
      if (v60 >= 8)
        v55 = v60 & 0xFFFFFFFFFFFFFFF8;
      else
        v55 = 0;
      if (v60 >= 8)
        v57 = 1 << (v61 & 7 | (8 * (v60 & 7)));
      else
        v57 = 0;
    }
    else
    {
      v62 = v59 & 0xFFFFFFFFFFFFFFF8;
      v63 = v59 & 7 | (8 * (v58 & 7));
      v64 = 1 << v63;
      if (v58 >= 8)
        v56 = v59 & 0xFFFFFFFFFFFFFFF8;
      else
        v56 = 0;
      if (v58 >= 8)
        v55 = v58 & 0xFFFFFFFFFFFFFFF8;
      else
        v55 = 0;
      if (v58 >= 8)
        v65 = 1 << v63;
      else
        v65 = 0;
      if (v58 < 8)
        v62 = 0;
      v89 = v62;
      v91 = v65;
      if (v58 >= 8)
        v66 = v58 & 0xFFFFFFFFFFFFFFF8;
      else
        v66 = 0;
      v87 = v66;
      if (v58 >= 8)
        v57 = v64;
      else
        v57 = 0;
    }
    v67 = sub_22F10ACF8(*v49);
    v44 = v67;
    v49 = (uint64_t *)(v67 & 0xFFFFFFFFFFFFFFF0);
    v68 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v67 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16);
  }
  while ((v68 == 39 || (v68 & 0xFE) == 0x28)
       && (*(_QWORD *)((v67 & 0xFFFFFFFFFFFFFFF0) + 8) | v67 & 7) != (*(_QWORD *)(v53 + 8) | v54));
  v47 = v82;
  v43 = v84;
  v48 = v81;
  if (v60 >= 8)
  {
    LOWORD(v113) = 257;
    v69 = sub_22E3C1338(v26, v84, v61 & 0xFFFFFFFFFFFFFFF8, (uint64_t)&v111);
    *(_QWORD *)&v111 = v60 & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)&v111 + 1) = v61 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)&v112 = 1 << (v61 & 7 | (8 * (v60 & 7)));
    DWORD2(v112) = 0;
    v113 = 0uLL;
    result = (_QWORD *)sub_22E3BEDDC(v26, v69, &v111, 0);
    *(_QWORD *)v85 = v87;
    *((_QWORD *)v85 + 1) = v89;
    *((_QWORD *)v85 + 2) = v91;
    v70 = v85 + 2;
    *((_DWORD *)v85 + 6) = 0;
  }
  else
  {
LABEL_72:
    v71 = llvm::PointerType::get();
    LOWORD(v113) = 257;
    result = (_QWORD *)sub_22E3C1338(v26, v43, v71, (uint64_t)&v111);
    *(_QWORD *)v85 = result;
    *((_QWORD *)v85 + 1) = v47;
    *((_QWORD *)v85 + 2) = v48;
    *((_DWORD *)v85 + 6) = 0;
    v70 = v85 + 2;
  }
  *v70 = 0;
  v70[1] = 0;
  return result;
}

uint64_t sub_22E59E51C(unsigned __int8 *a1, unsigned __int8 **a2)
{
  unsigned __int8 *v3;
  int v4;
  int v5;
  unsigned __int8 **v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  unsigned __int8 **v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t v16;

  v3 = a1;
  v4 = *a1;
  if (v4 != 107)
  {
    if (v4 != 191)
      return 0;
    do
    {
      v3 = sub_22EFFA6B0(*((unsigned __int8 **)v3 + 2));
      v5 = *v3;
    }
    while (v5 == 191);
    while (1)
    {
      if (v5 != 107)
        goto LABEL_23;
      v6 = (unsigned __int8 **)(v3 + 24);
      v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 3) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      v8 = *(_DWORD *)(v7 + 16);
      if (v7 && v8 == 11)
        break;
      if (v7 && v8 == 44)
      {
        v10 = sub_22F114198(*(_QWORD *)(v7 + 24));
        if (((*(_BYTE *)(v10 + 74) & 1) != 0 || *(_QWORD *)(v10 + 128) > 7uLL)
          && (*(_QWORD *)(sub_22F114198(*(_QWORD *)(v7 + 24)) + 72) & 0x8000000000) == 0)
        {
          goto LABEL_16;
        }
      }
      else if (v8 == 9)
      {
        goto LABEL_16;
      }
LABEL_17:
      v3 = sub_22EFFA6B0(*v6);
      v5 = *v3;
    }
    if (((*(_DWORD *)(v7 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
      goto LABEL_17;
LABEL_16:
    v6 = (unsigned __int8 **)(v3 + 16);
    goto LABEL_17;
  }
  do
  {
    v12 = (unsigned __int8 **)(v3 + 24);
    v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 3) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v14 = *(_DWORD *)(v13 + 16);
    if (v13)
      v15 = v14 == 11;
    else
      v15 = 0;
    if (v15)
    {
      if (((*(_DWORD *)(v13 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
        goto LABEL_33;
    }
    else if (v13 && v14 == 44)
    {
      v16 = sub_22F114198(*(_QWORD *)(v13 + 24));
      if (((*(_BYTE *)(v16 + 74) & 1) != 0 || *(_QWORD *)(v16 + 128) > 7uLL)
        && (*(_QWORD *)(sub_22F114198(*(_QWORD *)(v13 + 24)) + 72) & 0x8000000000) == 0)
      {
LABEL_33:
        v12 = (unsigned __int8 **)(v3 + 16);
      }
    }
    else if (v14 == 9)
    {
      goto LABEL_33;
    }
    v3 = sub_22EFFA6B0(*v12);
  }
  while (*v3 == 107);
LABEL_23:
  *a2 = v3;
  return *((_QWORD *)v3 + 2);
}

void sub_22E59E6E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  unsigned __int8 *v5;
  llvm::Module *v6;
  const std::error_category *v7;
  const std::error_category *v8;
  int v9;
  uint64_t v10;
  llvm::NamedMDNode *NamedMetadata;
  llvm::NamedMDNode *v12;
  int NumOperands;
  int v14;
  int i;
  uint64_t Operand;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  llvm::MDString *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  int v26;
  size_t v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  int *v34;
  size_t v35;
  const void *String;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  int v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  void *v50;
  size_t v51;
  size_t v52;
  std::string *v53;
  size_t size;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  void *v61;
  size_t v62;
  size_t v63;
  std::string *v64;
  size_t v65;
  _BYTE v66[8];
  std::string v67;
  std::error_code v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  __int16 v72;
  __int16 v73;
  unsigned __int8 *v74;
  char v75;
  std::error_code v76;
  char v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 152);
  if ((*(_BYTE *)(v1 + 76) & 8) == 0)
    return;
  if (*(char *)(v1 + 671) < 0)
  {
    if (!*(_QWORD *)(v1 + 656))
      return;
  }
  else if (!*(_BYTE *)(v1 + 671))
  {
    return;
  }
  v73 = 260;
  v69 = (const char *)(v1 + 648);
  llvm::MemoryBuffer::getFile();
  if ((v77 & 1) != 0)
  {
    v68 = v76;
    if (v76.__val_)
    {
      v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 208);
      *(_QWORD *)(v3 + 312) = 0x800000000;
      if (*(char *)(v3 + 311) < 0)
      {
        **(_BYTE **)(v3 + 288) = 0;
        *(_QWORD *)(v3 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v3 + 288) = 0;
        *(_BYTE *)(v3 + 311) = 0;
      }
      v69 = (const char *)(v3 + 320);
      v70 = 0;
      v71 = v3;
      v72 = 1;
      *(_BYTE *)(v3 + 320) = 0;
      *(_DWORD *)(v3 + 664) = 0;
      v45 = *(unsigned int *)(v3 + 776);
      if ((_DWORD)v45)
      {
        v46 = *(_QWORD *)(v3 + 768);
        v47 = 56 * v45;
        do
        {
          if (*(char *)(v46 + v47 - 9) < 0)
            operator delete(*(void **)(v46 + v47 - 32));
          v47 -= 56;
        }
        while (v47);
      }
      *(_DWORD *)(v3 + 776) = 0;
      v48 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 152);
      v49 = *(_BYTE *)(v48 + 671);
      if (v49 >= 0)
        v50 = (void *)(v48 + 648);
      else
        v50 = *(void **)(v48 + 648);
      v51 = *(_QWORD *)(v48 + 656);
      if (v49 >= 0)
        v52 = v49 & 0x7F;
      else
        v52 = v51;
      sub_22E3B89A8((unsigned __int8 **)&v69, v50, v52);
      std::error_code::message(&v67, &v68);
      if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v53 = &v67;
      else
        v53 = (std::string *)v67.__r_.__value_.__r.__words[0];
      if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = *((_BYTE *)&v67.__r_.__value_.__s + 23) & 0x7F;
      else
        size = v67.__r_.__value_.__l.__size_;
      sub_22E3B89A8((unsigned __int8 **)&v69, v53, size);
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v67.__r_.__value_.__l.__data_);
      sub_22E3BB0B8((uint64_t)&v69);
      goto LABEL_64;
    }
  }
  else
  {
    std::system_category();
  }
  MEMORY[0x23489C5F4](v66);
  llvm::MemoryBuffer::getMemBufferRef(*(llvm::MemoryBuffer **)&v76.__val_);
  llvm::parseBitcodeFile();
  v4 = v75;
  if ((v75 & 1) != 0)
  {
    v5 = v74;
    v74 = 0;
    v69 = (const char *)v5;
    v6 = (llvm::Module *)llvm::errorToErrorCodeAndEmitErrors();
    v8 = v7;
    if (v69)
      (*(void (**)(const char *))(*(_QWORD *)v69 + 8))(v69);
    sub_22E5C536C((uint64_t *)&v74);
    *(_QWORD *)&v68.__val_ = v6;
    v68.__cat_ = v8;
    if ((_DWORD)v6)
    {
      v9 = sub_22F41A810(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 208) + 32), 4, "Unable to parse host IR file '%0':'%1'", 0x26uLL);
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 208);
      *(_DWORD *)(v10 + 312) = 0;
      *(_DWORD *)(v10 + 316) = v9;
      if (*(char *)(v10 + 311) < 0)
      {
        **(_BYTE **)(v10 + 288) = 0;
        *(_QWORD *)(v10 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v10 + 288) = 0;
        *(_BYTE *)(v10 + 311) = 0;
      }
      v69 = (const char *)(v10 + 320);
      v70 = 0;
      v71 = v10;
      v72 = 1;
      *(_BYTE *)(v10 + 320) = 0;
      *(_DWORD *)(v10 + 664) = 0;
      v56 = *(unsigned int *)(v10 + 776);
      if ((_DWORD)v56)
      {
        v57 = *(_QWORD *)(v10 + 768);
        v58 = 56 * v56;
        do
        {
          if (*(char *)(v57 + v58 - 9) < 0)
            operator delete(*(void **)(v57 + v58 - 32));
          v58 -= 56;
        }
        while (v58);
      }
      *(_DWORD *)(v10 + 776) = 0;
      v59 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 152);
      v60 = *(_BYTE *)(v59 + 671);
      if (v60 >= 0)
        v61 = (void *)(v59 + 648);
      else
        v61 = *(void **)(v59 + 648);
      v62 = *(_QWORD *)(v59 + 656);
      if (v60 >= 0)
        v63 = v60 & 0x7F;
      else
        v63 = v62;
      sub_22E3B89A8((unsigned __int8 **)&v69, v61, v63);
      std::error_code::message(&v67, &v68);
      if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v64 = &v67;
      else
        v64 = (std::string *)v67.__r_.__value_.__r.__words[0];
      if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v65 = *((_BYTE *)&v67.__r_.__value_.__s + 23) & 0x7F;
      else
        v65 = v67.__r_.__value_.__l.__size_;
      sub_22E3B89A8((unsigned __int8 **)&v69, v64, v65);
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v67.__r_.__value_.__l.__data_);
      sub_22E3BB0B8((uint64_t)&v69);
      if ((v4 & 1) != 0)
        goto LABEL_42;
      goto LABEL_40;
    }
  }
  else
  {
    v6 = (llvm::Module *)v74;
    v74 = 0;
    sub_22E5C536C((uint64_t *)&v74);
    std::system_category();
  }
  v69 = "omp_offload.info";
  v73 = 259;
  NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v6, (const llvm::Twine *)&v69);
  if (NamedMetadata)
  {
    v12 = NamedMetadata;
    NumOperands = llvm::NamedMDNode::getNumOperands(NamedMetadata);
    if (NumOperands)
    {
      v14 = NumOperands;
      for (i = 0; i != v14; ++i)
      {
        Operand = llvm::NamedMDNode::getOperand(v12);
        v17 = Operand - 8 * *(unsigned int *)(Operand + 8);
        v18 = *(_QWORD *)(*(_QWORD *)v17 + 128);
        v19 = (_QWORD *)(v18 + 24);
        if (*(_DWORD *)(v18 + 32) >= 0x41u)
          v19 = (_QWORD *)*v19;
        v20 = *(llvm::MDString **)(v17 + 8);
        if (*v19)
        {
          String = (const void *)llvm::MDString::getString(v20);
          v37 = Operand - 8 * *(unsigned int *)(Operand + 8);
          v38 = *(_QWORD *)(*(_QWORD *)(v37 + 16) + 128);
          v39 = (_QWORD *)(v38 + 24);
          if (*(_DWORD *)(v38 + 32) >= 0x41u)
            v39 = (_QWORD *)*v39;
          v40 = *(_DWORD *)v39;
          v41 = *(_QWORD *)(*(_QWORD *)(v37 + 24) + 128);
          v42 = (_QWORD *)(v41 + 24);
          if (*(_DWORD *)(v41 + 32) >= 0x41u)
            v42 = (_QWORD *)*v42;
          v43 = (_QWORD *)*v42;
          LODWORD(v69) = v40;
          LODWORD(v67.__r_.__value_.__l.__data_) = (_DWORD)v43;
          sub_22F27F120((llvm::StringMapImpl *)(a1 + 2912), String, v35, (int *)&v67, (int *)&v69);
          ++*(_DWORD *)(a1 + 2880);
        }
        else
        {
          v21 = *((_QWORD *)v20 + 16);
          v22 = (_QWORD *)(v21 + 24);
          if (*(_DWORD *)(v21 + 32) >= 0x41u)
            v22 = (_QWORD *)*v22;
          v23 = *(_QWORD *)(*(_QWORD *)(v17 + 16) + 128);
          v24 = (_QWORD *)(v23 + 24);
          if (*(_DWORD *)(v23 + 32) >= 0x41u)
            v24 = (_QWORD *)*v24;
          v25 = *(_DWORD *)v22;
          v26 = *(_DWORD *)v24;
          v28 = (const void *)llvm::MDString::getString(*(llvm::MDString **)(v17 + 24));
          v29 = Operand - 8 * *(unsigned int *)(Operand + 8);
          v30 = *(_QWORD *)(*(_QWORD *)(v29 + 32) + 128);
          v31 = (_QWORD *)(v30 + 24);
          if (*(_DWORD *)(v30 + 32) >= 0x41u)
            v31 = (_QWORD *)*v31;
          v32 = *(_DWORD *)v31;
          v33 = *(_QWORD *)(*(_QWORD *)(v29 + 40) + 128);
          v34 = (int *)(v33 + 24);
          if (*(_DWORD *)(v33 + 32) >= 0x41u)
            v34 = *(int **)v34;
          sub_22F27F064(a1 + 2872, v25, v26, v28, v27, v32, *v34);
        }
      }
    }
  }
  if ((v4 & 1) != 0)
    goto LABEL_42;
LABEL_40:
  if (v6)
  {
    v44 = MEMORY[0x23489F15C](v6);
    MEMORY[0x2348A0E9C](v44, 0x10B2C407FF26C1CLL);
  }
LABEL_42:
  llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)v66);
LABEL_64:
  if ((v77 & 1) == 0)
  {
    v55 = *(_QWORD *)&v76.__val_;
    *(_QWORD *)&v76.__val_ = 0;
    if (v55)
      (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  }
}

uint64_t sub_22E59EC8C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  llvm::GlobalValue *v9;
  uint64_t v12;
  BOOL v13;

  if (*(_DWORD *)(result + 2692))
  {
    v1 = *(unsigned int *)(result + 2688);
    if ((_DWORD)v1)
    {
      v2 = 0;
      v3 = 8 * v1;
      do
      {
        *(_QWORD *)(*(_QWORD *)(result + 2680) + v2) = 0;
        v2 += 8;
      }
      while (v3 != v2);
    }
    *(_QWORD *)(result + 2692) = 0;
  }
  v4 = *(unsigned int *)(result + 2984);
  if ((_DWORD)v4)
  {
    for (i = *(uint64_t **)(result + 2976); !*i || *i == -8; ++i)
      ;
  }
  else
  {
    i = *(uint64_t **)(result + 2976);
  }
  v7 = *(_QWORD *)(result + 2976) + 8 * v4;
  if (i != (uint64_t *)v7)
  {
    v8 = *i;
    do
    {
      v9 = *(llvm::GlobalValue **)(v8 + 24);
      if (v9 != (llvm::GlobalValue *)-8192
        && v9 != (llvm::GlobalValue *)-4096
        && v9 != 0
        && v9
        && *((_BYTE *)v9 + 16) == 3)
      {
        result = llvm::GlobalValue::isDeclaration(v9);
        if ((_DWORD)result)
        {
          result = llvm::Value::getNumUses(v9);
          if (!(_DWORD)result)
            result = llvm::GlobalVariable::eraseFromParent(v9);
        }
      }
      do
      {
        v12 = i[1];
        ++i;
        v8 = v12;
        if (v12)
          v13 = v8 == -8;
        else
          v13 = 1;
      }
      while (v13);
    }
    while (i != (uint64_t *)v7);
  }
  return result;
}

llvm::Value *sub_22E59ED7C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  llvm::Value *v20;
  int8x16_t v21;
  int v22;
  uint64_t v23;
  __int128 v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  _OWORD v46[3];
  _OWORD v47[3];
  _OWORD v48[3];
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _QWORD v53[3];
  char v54;
  char v55;
  _QWORD *v56;
  uint64_t v57[2];
  int v58;
  _QWORD v59[2];
  int v60;
  std::string __p;
  _QWORD v62[3];
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  int v71;
  _QWORD v72[3];
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  int v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  _QWORD v85[4];
  __int16 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92[2];
  unsigned int v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD v96[19];

  v0 = MEMORY[0x24BDAC7A8]();
  v44 = v1;
  v3 = v2;
  v5 = v4;
  v42 = v6;
  v7 = (uint64_t *)v0;
  v96[16] = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(v0 + 144);
  v43 = sub_22EF5B848(v8, v9, 0);
  v94 = v96;
  v95 = 0x1000000000;
  v45 = v3;
  v10 = *(_DWORD *)(v3 + 24);
  sub_22EA41AB8((uint64_t)v72, 62, 0, v10);
  v74 = 0;
  v75 = v43 | 2;
  v76 = 0;
  v77 = v10;
  v78 = v8 | 2;
  v79 = v72;
  v80 = 0;
  v72[0] = &off_24FAC3008;
  v81 = 1310720;
  v73 |= 0x200u;
  v11 = *(_DWORD *)(v5 + 24);
  sub_22EA41AB8((uint64_t)v62, 62, 0, v11);
  v64 = 0;
  v65 = v43 | 2;
  v66 = 0;
  v67 = v11;
  v68 = v8 | 2;
  v69 = v62;
  v70 = 0;
  v62[0] = &off_24FAC3008;
  v71 = 1310720;
  v63 |= 0x200u;
  v12 = v95;
  if (v95 >= HIDWORD(v95))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v12 = v95;
  }
  v94[v12] = v72;
  v13 = v95 + 1;
  LODWORD(v95) = v13;
  if (v13 >= HIDWORD(v95))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v13 = v95;
  }
  v94[v13] = v62;
  LODWORD(v95) = v95 + 1;
  v14 = sub_22F24E348((uint64_t)(v7 + 35), *(_QWORD *)(v8 + 16392), (uint64_t *)&v94);
  v15 = sub_22E46F2EC((uint64_t)(v7 + 35), v14);
  v16 = "omp_initializer";
  v17 = v7[101];
  if (v44)
    v16 = "omp_combiner";
  v18 = 15;
  if (v44)
    v18 = 12;
  v85[0] = v16;
  v85[1] = v18;
  v85[2] = "";
  v85[3] = 0;
  sub_22F27BE70(&__p, v17, (uint64_t)v85, 2);
  v86 = 260;
  v85[0] = &__p;
  v19 = v7[25];
  v20 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x78);
  MEMORY[0x23489F6FC](v20, v15, 7, 0xFFFFFFFFLL, v85, v19);
  sub_22E62BF18(v7, 0, 0, v20, v14);
  if ((*(_BYTE *)(v7[19] + 28) & 8) != 0)
  {
    llvm::Function::removeFnAttr();
    llvm::Function::removeFnAttr();
    llvm::Function::addFnAttr();
  }
  sub_22E618EBC((uint64_t)v85, (uint64_t)v7, 0);
  sub_22E61A8FC((uint64_t)v85, 0, 0, *(_QWORD *)(v8 + 16392), v20, v14, (uint64_t *)&v94, *(_DWORD *)(v5 + 24), v21, *(unsigned int *)(v45 + 24));
  v55 = 1;
  v54 = v91;
  v91 = 0;
  v53[0] = v87 - v88;
  v53[1] = v90;
  v53[2] = v89;
  v90 = v87 - v88;
  v57[0] = 0;
  v57[1] = 0;
  v56 = v85;
  v58 = 0;
  v59[0] = 0;
  v59[1] = 0;
  v60 = 0;
  *(_QWORD *)&v82 = v62;
  v49 = 0;
  v22 = sub_22E3CED3C(v92, &v82, &v49);
  v23 = v49;
  if (!v22)
    v23 = v92[0] + 56 * v93;
  v24 = *(_OWORD *)(v23 + 24);
  v48[0] = *(_OWORD *)(v23 + 8);
  v48[1] = v24;
  v48[2] = *(_OWORD *)(v23 + 40);
  v25 = (uint64_t *)(v43 & 0xFFFFFFFFFFFFFFF0);
  v26 = *(_QWORD *)(v43 & 0xFFFFFFFFFFFFFFF0);
  if (!v26 || *(_BYTE *)(v26 + 16) != 39)
    v26 = sub_22F10CF48(*(_QWORD *)(v43 & 0xFFFFFFFFFFFFFFF0));
  sub_22F25FAEC((uint64_t)v85, v48, v26, (uint64_t)&v49);
  v82 = v50;
  v83 = v51;
  v84 = v52;
  sub_22E5BC134(v57, (uint64_t)v85, v5, (uint64_t)&v82);
  *(_QWORD *)&v82 = v72;
  v49 = 0;
  v27 = sub_22E3CED3C(v92, &v82, &v49);
  v28 = v49;
  if (!v27)
    v28 = v92[0] + 56 * v93;
  v29 = *(_OWORD *)(v28 + 24);
  v47[0] = *(_OWORD *)(v28 + 8);
  v47[1] = v29;
  v47[2] = *(_OWORD *)(v28 + 40);
  v30 = *v25;
  if (!*v25 || *(_BYTE *)(v30 + 16) != 39)
    v30 = sub_22F10CF48(*v25);
  sub_22F25FAEC((uint64_t)v85, v47, v30, (uint64_t)&v49);
  v82 = v50;
  v83 = v51;
  v84 = v52;
  sub_22E5BC134(v57, (uint64_t)v56, v45, (uint64_t)&v82);
  sub_22E5BC320((uint64_t)v59, (uint64_t)(v56 + 363));
  sub_22F2840EC((uint64_t)v59);
  if ((v44 & 1) == 0
    && ((*(_DWORD *)(v45 + 28) & 0x7F) != 0x40 || (*(_DWORD *)(v45 + 96) & 0x600u) - 1536 <= 0xFFFFFBFF)
    && *(_QWORD *)(v45 + 88) >= 8uLL)
  {
    v31 = sub_22EFBC5B4(v45);
    if ((sub_22E4C9FC8((uint64_t)v85, v31) & 1) == 0)
    {
      v32 = sub_22EFBC5B4(v45);
      *(_QWORD *)&v82 = v45;
      v49 = 0;
      v33 = sub_22E3CED3C(v92, &v82, &v49);
      v34 = 0;
      v35 = 0;
      v36 = v92[0] + 56 * v93;
      if (v33)
        v36 = v49;
      v37 = *(_OWORD *)(v36 + 8);
      v38 = *(_OWORD *)(v36 + 40);
      v46[1] = *(_OWORD *)(v36 + 24);
      v46[2] = v38;
      v46[0] = v37;
      v39 = *(_QWORD *)(v45 + 48);
      v40 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v40 & 8) != 0)
      {
        v35 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFFFF0) + 0x18);
        v34 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
      }
      sub_22E4DA890((uint64_t)v85, v32, v46, v34 | v35 | (v40 | v39) & 7, 1);
    }
  }
  if (v42)
    sub_22E4D89CC(v85, v42);
  sub_22F280698((uint64_t)v53);
  sub_22E619DE8((uint64_t)v85, 0);
  sub_22F283FC4((uint64_t)v53);
  sub_22E619434((uint64_t)v85);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v94 != v96)
    free(v94);
  return v20;
}

uint64_t sub_22E59F3C4(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  BOOL v6;
  uint64_t result;
  int v8;
  uint64_t v9;

  v9 = 0;
  v4 = sub_22F28501C(*(_QWORD *)(a1 + 2528), *(_DWORD *)(a1 + 2544), a2, &v9);
  v5 = v9;
  if (v4)
    v6 = v9 == *(_QWORD *)(a1 + 2528) + 24 * *(unsigned int *)(a1 + 2544);
  else
    v6 = 1;
  if (!v6)
    return *(_QWORD *)(v5 + 8);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 72))(a1, 0, a2);
  v9 = 0;
  v8 = sub_22F28501C(*(_QWORD *)(a1 + 2528), *(_DWORD *)(a1 + 2544), a2, &v9);
  result = 0;
  if (v8)
  {
    v5 = v9;
    return *(_QWORD *)(v5 + 8);
  }
  return result;
}

uint64_t sub_22E59F470(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  void *v8;
  uint64_t v9;
  _QWORD v10[3];

  v10[2] = *MEMORY[0x24BDAC8D0];
  v8 = v10;
  v9 = 0x400000000;
  sub_22F421BB4((uint64_t)&v8, *(_DWORD *)(a1 + 8));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 24)
                 + 8 * **(unsigned int **)(a1 + 24)
                 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 24) + 4)
                 + 16);
  if ((_DWORD)v9)
  {
    v5 = 4 * v9;
    v6 = v8;
    do
    {
      if (*v6 == a2)
        break;
      ++v6;
      v4 = *(_QWORD *)(v4 + 8 * *(unsigned int *)(v4 + 8) + 32);
      v5 -= 4;
    }
    while (v5);
  }
  if (v8 != v10)
    free(v8);
  return v4;
}

llvm::Value *sub_22E59F54C()
{
  uint64_t v0;
  __int128 *v1;
  __int128 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  BOOL v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  void (**v20)(void);
  _QWORD *v21;
  llvm::Value *v22;
  unsigned int v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD v28[2];
  uint64_t v29;
  _QWORD *v30;
  int v31;
  BOOL v32;
  int v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[1856];
  _QWORD *v42;
  uint64_t v43;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v14 = v13;
  v15 = v0;
  v43 = *MEMORY[0x24BDAC8D0];
  sub_22E618EBC((uint64_t)v41, v0, 1);
  v16 = 0;
  v17 = *v14;
  if (v17 > 0x41)
  {
    if (*v14 > 0x4Cu)
    {
      if (v17 != 77)
      {
        if (v17 != 78)
          goto LABEL_18;
        goto LABEL_15;
      }
    }
    else if (v17 != 66 && v17 != 68)
    {
      goto LABEL_18;
    }
    v18 = v14[32];
    goto LABEL_17;
  }
  if (*v14 <= 0x30u)
  {
    if (v17 != 31 && v17 != 39)
      goto LABEL_18;
    goto LABEL_15;
  }
  if (v17 == 49 || v17 == 56)
  {
LABEL_15:
    v18 = v14[36];
LABEL_17:
    v16 = v18 != 0;
  }
LABEL_18:
  v19 = *(_QWORD *)(v15 + 808);
  v28[0] = &off_24FA65B30;
  v28[1] = v41;
  v30 = v28;
  v31 = v8;
  v32 = v16;
  sub_22F2839B0(v19 + 48, (unint64_t)v28);
  if (v30 == v28)
  {
    v20 = (void (**)(void))(v28[0] + 32);
  }
  else
  {
    if (!v30)
      goto LABEL_23;
    v20 = (void (**)(void))(*v30 + 40);
  }
  (*v20)();
LABEL_23:
  sub_22E5BB2A4((uint64_t)v28, v12, 2);
  v33 = 0;
  v34 = *v2;
  v35 = *((_QWORD *)v2 + 2);
  v36 = v8;
  v37 = v16;
  v28[0] = &off_24FA65B78;
  v38 = v10;
  v39 = v6;
  v40 = v4;
  v21 = v42;
  v42 = v28;
  v22 = sub_22E5F06DC();
  v42 = v21;
  v28[0] = &off_24FA66C98;
  sub_22E49FAE8((uint64_t)&v29);
  v23 = *(_DWORD *)(v19 + 56) - 1;
  *(_DWORD *)(v19 + 56) = v23;
  v24 = *(_QWORD *)(v19 + 48) + 40 * v23;
  v25 = *(_QWORD **)(v24 + 24);
  if (v25 == (_QWORD *)v24)
  {
    v26 = 4;
    v25 = (_QWORD *)v24;
    goto LABEL_27;
  }
  if (v25)
  {
    v26 = 5;
LABEL_27:
    (*(void (**)(void))(*v25 + 8 * v26))();
  }
  sub_22E619434((uint64_t)v41);
  return v22;
}

_QWORD *sub_22E59F7AC(_QWORD *a1)
{
  *a1 = &off_24FA66C98;
  sub_22E49FAE8((uint64_t)(a1 + 2));
  return a1;
}

uint64_t sub_22E59F7E4(_QWORD *a1, uint64_t a2, int a3)
{
  unint64_t v7;
  char *__s;
  void *__p[2];
  uint64_t v11;
  unsigned int v12;

  v12 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(a1[1] + 184) + 96) & 0x1E00000000000000) == 0 || a3 == 0)
  {
    llvm::OpenMPIRBuilder::getOrCreateDefaultSrcLocStr((llvm::OpenMPIRBuilder *)(a1 + 6), &v12);
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    v11 = 0;
    v7 = *(_QWORD *)(a2 + 1592);
    if (v7 && (*(_DWORD *)(v7 + 28) & 0x7Eu) - 52 <= 5)
      sub_22EFB9E74(v7, __p);
    sub_22F1E2F68(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 144) + 1992), a3, 1, (uint64_t)&__s);
    if (__s)
      strlen(__s);
    llvm::OpenMPIRBuilder::getOrCreateSrcLocStr();
    if (SHIBYTE(v11) < 0)
      operator delete(__p[0]);
  }
  (*(void (**)(_QWORD *))(*a1 + 40))(a1);
  return llvm::OpenMPIRBuilder::getOrCreateIdent();
}

uint64_t sub_22E59F964(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t ThreadID;
  _DWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t RuntimeFunction;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  llvm::raw_ostream *v16;
  size_t v17;
  void *v18;
  _BYTE *v19;
  unint64_t v20;
  const char *v21;
  llvm::raw_ostream *v22;
  _BYTE *v23;
  llvm::raw_ostream *v24;
  _WORD *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD v31[8];
  uint64_t v32;
  int v33;
  void *__p;
  char v35;
  _BYTE v36[24];
  _BYTE *v37;
  _BYTE *v38;
  char *__s[2];
  __int128 v40;
  __int128 v41;
  _BYTE v42[64];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 152) + 76) & 0x20) != 0)
  {
    *(_QWORD *)v42 = &v42[24];
    *(_OWORD *)&v42[8] = xmmword_22F44E310;
    *(_OWORD *)v36 = *(_OWORD *)(a2 + 320);
    *(_QWORD *)&v36[16] = 0;
    sub_22F27C6B0(a1 + 48, (uint64_t *)v36);
    v33 = 0;
    sub_22F242C48((uint64_t)v36, (uint64_t)v42);
    sub_22F1E2F68(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 144) + 1992), a3, 1, (uint64_t)__s);
    if (v37 == v38)
    {
      v16 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)v36, ";");
    }
    else
    {
      *v38++ = 59;
      v16 = (llvm::raw_ostream *)v36;
    }
    if (__s[0])
    {
      v17 = strlen(__s[0]);
      v18 = (void *)*((_QWORD *)v16 + 4);
      if (v17 <= *((_QWORD *)v16 + 3) - (_QWORD)v18)
      {
        if (v17)
        {
          memcpy(v18, __s[0], v17);
          *((_QWORD *)v16 + 4) += v17;
        }
      }
      else
      {
        v16 = (llvm::raw_ostream *)llvm::raw_ostream::write(v16, __s[0]);
      }
    }
    v19 = (_BYTE *)*((_QWORD *)v16 + 4);
    if (*((_BYTE **)v16 + 3) == v19)
    {
      llvm::raw_ostream::write(v16, ";");
    }
    else
    {
      *v19 = 59;
      ++*((_QWORD *)v16 + 4);
    }
    v20 = *(_QWORD *)(a2 + 1592);
    if (v20 && (*(_DWORD *)(v20 + 28) & 0x7Eu) - 52 <= 5)
    {
      sub_22EFB9E74(v20, &__p);
      v21 = v35 >= 0 ? (const char *)&__p : (const char *)__p;
      llvm::raw_ostream::write((llvm::raw_ostream *)v36, v21);
      if (v35 < 0)
        operator delete(__p);
    }
    if (v37 == v38)
      llvm::raw_ostream::write((llvm::raw_ostream *)v36, ";");
    else
      *v38++ = 59;
    v22 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v23 = (_BYTE *)*((_QWORD *)v22 + 4);
    if (*((_BYTE **)v22 + 3) == v23)
    {
      llvm::raw_ostream::write(v22, ";");
    }
    else
    {
      *v23 = 59;
      ++*((_QWORD *)v22 + 4);
    }
    v24 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v25 = (_WORD *)*((_QWORD *)v24 + 4);
    if (*((_QWORD *)v24 + 3) - (_QWORD)v25 > 1uLL)
    {
      *v25 = 15163;
      *((_QWORD *)v24 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v24, ";;");
    }
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v36);
    llvm::OpenMPIRBuilder::getOrCreateSrcLocStr();
    llvm::OpenMPIRBuilder::getOrCreateIdent();
    ThreadID = llvm::OpenMPIRBuilder::getOrCreateThreadID();
    if (*(_BYTE **)v42 != &v42[24])
      free(*(void **)v42);
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 1624);
    *(_QWORD *)v42 = 0;
    if (!sub_22F258E38(*(_QWORD *)(a1 + 2504), *(_DWORD *)(a1 + 2520), v6, v42)
      || *(_QWORD *)v42 == *(_QWORD *)(a1 + 2504) + 32 * *(unsigned int *)(a1 + 2520)
      || (ThreadID = *(_QWORD *)(*(_QWORD *)v42 + 16)) == 0)
    {
      v8 = *(_DWORD **)(a2 + 1856);
      if (!v8 || v8[2] != 2 || !(*(uint64_t (**)(_QWORD))(*(_QWORD *)v8 + 64))(*(_QWORD *)(a2 + 1856)))
        goto LABEL_8;
      (*(void (**)(_BYTE *__return_ptr, _DWORD *, uint64_t))(*(_QWORD *)v8 + 72))(v42, v8, a2);
      v28 = *(_QWORD *)(*(_QWORD *)(a2 + 1840) + 40);
      v29 = *(_QWORD *)(a2 + 2016);
      if (!v29)
        goto LABEL_64;
      while (1)
      {
        v30 = *(_QWORD *)(a2 + 1992) - v29;
        if ((*(_BYTE *)(v30 + 24) & 7) != 0 || (*(_BYTE *)(v30 + 24) & 0x40) == 0)
          break;
        v29 = *(_QWORD *)(v30 + 16);
        if (!v29)
          goto LABEL_64;
      }
      if ((~*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 152) + 8) & 0x500000000000) != 0)
        goto LABEL_64;
      if (*(_QWORD *)(a2 + 320) == v28)
        goto LABEL_64;
      *(_OWORD *)__s = *(_OWORD *)&v42[8];
      v40 = *(_OWORD *)&v42[24];
      v41 = *(_OWORD *)&v42[40];
      sub_22E5E0440(a2, (uint64_t)__s, v43, v36);
      if (*(unsigned __int8 *)(*(_QWORD *)v36 + 16) < 0x1Cu)
        goto LABEL_64;
      *(_OWORD *)__s = *(_OWORD *)&v42[8];
      v40 = *(_OWORD *)&v42[24];
      v41 = *(_OWORD *)&v42[40];
      sub_22E5E0440(a2, (uint64_t)__s, v43, v36);
      if (*(_QWORD *)(*(_QWORD *)v36 + 40) == v28
        || (*(_OWORD *)__s = *(_OWORD *)&v42[8],
            v40 = *(_OWORD *)&v42[24],
            v41 = *(_OWORD *)&v42[40],
            sub_22E5E0440(a2, (uint64_t)__s, v43, v36),
            *(_QWORD *)(*(_QWORD *)v36 + 40) == *(_QWORD *)(a2 + 320)))
      {
LABEL_64:
        v31[6] = v45;
        v31[7] = v46;
        v32 = v47;
        v31[2] = *(_OWORD *)&v42[32];
        v31[3] = *(_OWORD *)&v42[48];
        v31[4] = v43;
        v31[5] = v44;
        v31[0] = *(_OWORD *)v42;
        v31[1] = *(_OWORD *)&v42[16];
        ThreadID = sub_22F25F748(a2, (uint64_t)v31, a3);
        if (*(_QWORD *)(a2 + 320) == v28)
          sub_22F27C610(a1 + 2504, (uint64_t *)(a2 + 1624))[2] = ThreadID;
      }
      else
      {
LABEL_8:
        v9 = sub_22F27C610(a1 + 2504, (uint64_t *)(a2 + 1624));
        if (!v9[3])
          sub_22F27C55C(a1, a2, 0);
        *(_QWORD *)v36 = a2 + 272;
        *(_OWORD *)&v36[8] = *(_OWORD *)(a2 + 320);
        llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a2 + 272));
        v10 = v9[3];
        *(_QWORD *)(a2 + 320) = *(_QWORD *)(v10 + 40);
        *(_QWORD *)(a2 + 328) = v10 + 24;
        *(_QWORD *)v42 = *(_QWORD *)(v10 + 48);
        if (*(_QWORD *)v42)
        {
          llvm::MetadataTracking::track();
          v11 = *(_QWORD *)v42;
        }
        else
        {
          v11 = 0;
        }
        sub_22E3CF21C(a2 + 272, 0, v11);
        if (*(_QWORD *)v42)
          llvm::MetadataTracking::untrack();
        RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
        v14 = v13;
        __s[0] = (char *)sub_22E59F7E4((_QWORD *)a1, a2, a3);
        *(_WORD *)&v42[32] = 257;
        ThreadID = (uint64_t)sub_22E462B78((uint64_t *)(a2 + 272), RuntimeFunction, v14, (uint64_t)__s, 1, (uint64_t)v42, 0);
        *(_WORD *)(ThreadID + 18) = *(_WORD *)(ThreadID + 18) & 0xF003 | (4 * *(_WORD *)(a2 + 136));
        v9[2] = ThreadID;
        v15 = *(_QWORD *)v36;
        if (*(_QWORD *)&v36[8])
        {
          sub_22E3CB840(*(uint64_t *)v36, *(uint64_t *)&v36[8], *(uint64_t *)&v36[16]);
          v15 = *(_QWORD *)v36;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)v36 + 48) = 0;
          *(_QWORD *)(v15 + 56) = 0;
        }
        *(_QWORD *)v42 = v37;
        if (v37)
        {
          llvm::MetadataTracking::track();
          v27 = *(_QWORD *)v42;
        }
        else
        {
          v27 = 0;
        }
        sub_22E3CF21C(v15, 0, v27);
        if (*(_QWORD *)v42)
          llvm::MetadataTracking::untrack();
        if (v37)
          llvm::MetadataTracking::untrack();
      }
    }
  }
  return ThreadID;
}

void sub_22E5A0014(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  _QWORD *v4;
  llvm::Instruction *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;

  v3 = (uint64_t *)(a2 + 1624);
  if (sub_22F258E38(*(_QWORD *)(a1 + 2504), *(_DWORD *)(a1 + 2520), *(_QWORD *)(a2 + 1624), &v25))
  {
    v4 = sub_22F27C610(a1 + 2504, v3);
    v5 = (llvm::Instruction *)v4[3];
    if (v5)
    {
      v4[3] = 0;
      llvm::Instruction::eraseFromParent(v5);
    }
    v25 = 0;
    if (sub_22F258E38(*(_QWORD *)(a1 + 2504), *(_DWORD *)(a1 + 2520), *v3, &v25))
    {
      *(_QWORD *)v25 = -8192;
      *(int32x2_t *)(a1 + 2512) = vadd_s32(*(int32x2_t *)(a1 + 2512), (int32x2_t)0x1FFFFFFFFLL);
    }
  }
  if (sub_22F285220(*(_QWORD *)(a1 + 2552), *(_DWORD *)(a1 + 2568), *v3, &v25))
  {
    v6 = sub_22F27C1CC(a1 + 2552, v3);
    v7 = *((unsigned int *)v6 + 4);
    if ((_DWORD)v7)
    {
      v8 = (uint64_t *)v6[1];
      v9 = 8 * v7;
      do
      {
        v10 = *v8;
        v25 = 0;
        if (sub_22F28501C(*(_QWORD *)(a1 + 2528), *(_DWORD *)(a1 + 2544), v10, &v25))
        {
          *(_QWORD *)v25 = -8192;
          *(int32x2_t *)(a1 + 2536) = vadd_s32(*(int32x2_t *)(a1 + 2536), (int32x2_t)0x1FFFFFFFFLL);
        }
        ++v8;
        v9 -= 8;
      }
      while (v9);
    }
    sub_22F27C734(a1 + 2552, *v3);
  }
  v11 = *v3;
  v25 = 0;
  if (sub_22F285220(*(_QWORD *)(a1 + 2600), *(_DWORD *)(a1 + 2616), v11, &v25))
  {
    v12 = (_QWORD *)v25;
    if (v25 != *(_QWORD *)(a1 + 2600) + 56 * *(unsigned int *)(a1 + 2616))
    {
      v13 = *(uint64_t **)(v25 + 8);
      v14 = *(unsigned int *)(v25 + 16);
      if ((_DWORD)v14)
      {
        v15 = 8 * v14;
        do
        {
          v16 = *v13;
          v25 = 0;
          if (sub_22F24C318(*(_QWORD *)(a1 + 2576), *(_DWORD *)(a1 + 2592), v16, &v25))
          {
            *(_QWORD *)v25 = -8192;
            *(int32x2_t *)(a1 + 2584) = vadd_s32(*(int32x2_t *)(a1 + 2584), (int32x2_t)0x1FFFFFFFFLL);
          }
          ++v13;
          v15 -= 8;
        }
        while (v15);
        v13 = (uint64_t *)v12[1];
      }
      if (v13 != v12 + 3)
        free(v13);
      *v12 = -8192;
      *(int32x2_t *)(a1 + 2608) = vadd_s32(*(int32x2_t *)(a1 + 2608), (int32x2_t)0x1FFFFFFFFLL);
    }
  }
  sub_22F27C7A8(a1 + 2624, *v3);
  v17 = *(_DWORD *)(a1 + 2664);
  if (v17)
  {
    v18 = *(_QWORD *)(a1 + 2648);
    v19 = v17 - 1;
    LODWORD(v20) = ((*v3 >> 4) ^ (*v3 >> 9)) & (v17 - 1);
    v21 = (uint64_t *)(v18 + 16 * v20);
    v22 = *v21;
    if (*v3 == *v21)
    {
LABEL_30:
      *v21 = -8192;
      *(int32x2_t *)(a1 + 2656) = vadd_s32(*(int32x2_t *)(a1 + 2656), (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      v23 = 1;
      while (v22 != -4096)
      {
        v24 = v20 + v23++;
        v20 = v24 & v19;
        v22 = *(_QWORD *)(v18 + 16 * v20);
        if (*v3 == v22)
        {
          v21 = (uint64_t *)(v18 + 16 * v20);
          goto LABEL_30;
        }
      }
    }
  }
}

uint64_t sub_22E5A029C(uint64_t a1, int a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  char v10;
  uint64_t result;
  char v12;
  const std::error_category *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::string *v20;
  size_t size;
  int v22;
  std::string v23;
  __int128 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  char v28;
  char v29;
  std::error_code v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;

  v10 = 1;
  sub_22F1E2F68(a1, a2, 1, (uint64_t)&v36);
  v33 = 1;
  if (*(_BYTE *)v36)
  {
    v31 = v36;
    v10 = 3;
  }
  v32 = v10;
  result = llvm::sys::fs::getUniqueID();
  if ((_DWORD)result)
  {
    sub_22F1E2F68(a1, a2, 0, (uint64_t)&v24);
    v36 = v24;
    v37 = v25;
    v12 = 1;
    v29 = 1;
    if (*(_BYTE *)v24)
    {
      v27 = v24;
      v12 = 3;
    }
    v28 = v12;
    result = llvm::sys::fs::getUniqueID();
    *(_QWORD *)&v30.__val_ = result;
    v30.__cat_ = v13;
    if ((_DWORD)result)
    {
      v14 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(v14 + 312) = 0x800000000;
      if (*(char *)(v14 + 311) < 0)
      {
        **(_BYTE **)(v14 + 288) = 0;
        *(_QWORD *)(v14 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v14 + 288) = 0;
        *(_BYTE *)(v14 + 311) = 0;
      }
      v15 = (unsigned __int8 *)(v14 + 320);
      v24 = (unint64_t)(v14 + 320);
      v25 = v14;
      v26 = 1;
      *(_BYTE *)(v14 + 320) = 0;
      *(_DWORD *)(v14 + 664) = 0;
      v16 = *(unsigned int *)(v14 + 776);
      if ((_DWORD)v16)
      {
        v17 = *(_QWORD *)(v14 + 768);
        v18 = 56 * v16;
        do
        {
          if (*(char *)(v17 + v18 - 9) < 0)
            operator delete(*(void **)(v17 + v18 - 32));
          v18 -= 56;
        }
        while (v18);
        LODWORD(v16) = *v15;
      }
      *(_DWORD *)(v14 + 776) = 0;
      v19 = v36;
      v15[v16 + 1] = 1;
      *(_BYTE *)(v14 + 320) = v16 + 1;
      *(_QWORD *)&v15[8 * v16 + 16] = v19;
      std::error_code::message(&v23, &v30);
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &v23;
      else
        v20 = (std::string *)v23.__r_.__value_.__r.__words[0];
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = *((_BYTE *)&v23.__r_.__value_.__s + 23) & 0x7F;
      else
        size = v23.__r_.__value_.__l.__size_;
      sub_22E3B89A8((unsigned __int8 **)&v24, v20, size);
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
      result = sub_22E3BB0B8((uint64_t)&v24);
    }
  }
  v22 = v35;
  *a3 = v34;
  *a4 = v22;
  *a5 = HIDWORD(v36);
  return result;
}

uint64_t sub_22E5A0488(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  llvm::Constant *v5;
  uint64_t v6;
  uint64_t v7;
  std::string __p;
  __int128 v10;
  __int128 v11;
  __int16 v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v10 = xmmword_24FA65A30;
  v11 = off_24FA65A40;
  sub_22F27BE70(&__p, a1, (uint64_t)&v10, 2);
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(llvm::Constant **)(v4 + 104);
  *(_QWORD *)&v10 = sub_22E624994(v4, a2, 0);
  *((_QWORD *)&v10 + 1) = v6;
  *(_QWORD *)&v11 = &__p;
  v12 = 1029;
  v7 = sub_22F27D020(a1, v5, (llvm::Twine *)&v10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v7;
}

llvm::Value *sub_22E5A0558()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  llvm::Value *v17;
  _QWORD *v18;
  size_t v19;
  char v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int8x16_t v36;
  int v37;
  uint64_t v38;
  __int128 v39;
  unint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  __int128 v51;
  unint64_t v52;
  unsigned int v53;
  llvm::Type **v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int8x16_t v61;
  int v62;
  uint64_t v63;
  __int128 v64;
  unint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)();
  int v70;
  int v71;
  llvm::Constant *v72;
  llvm::Type *v73;
  uint64_t NullValue;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int8x16_t v83;
  __int128 v84;
  llvm::Constant *v85;
  llvm::Type *v86;
  llvm::Constant *v87;
  llvm::Type *v88;
  __int128 v89;
  unint64_t v90;
  _OWORD v91[3];
  _OWORD v92[3];
  _QWORD v93[3];
  int v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100[2];
  uint64_t v101[2];
  _OWORD v102[3];
  __int128 v103;
  __int128 v104;
  __int128 v105;
  _OWORD v106[3];
  __int128 v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  std::string __p;
  std::string v116;
  unsigned int v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  std::string *v124;
  uint64_t v125;
  int v126;
  _QWORD v127[4];
  __int16 v128;
  void *v129;
  uint64_t v130;
  _BYTE v131[128];
  _OWORD v132[2];
  __int16 v133;
  _QWORD *v134;
  uint64_t v135[183];
  __int128 v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139[2];
  unsigned int v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;

  v0 = MEMORY[0x24BDAC7A8]();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = (_QWORD *)v0;
  v144 = *MEMORY[0x24BDAC8D0];
  v11 = *(_QWORD *)(v0 + 8);
  v12 = *(_QWORD *)(v11 + 144);
  if ((*(_BYTE *)(*(_QWORD *)(v11 + 152) + 76) & 4) != 0 && *(_BYTE *)(*(_QWORD *)(v12 + 15088) + 81))
    return 0;
  v13 = *(_QWORD *)(v1 + 80);
  if (!v13)
    return 0;
  v14 = 0;
  v15 = *(_QWORD *)(v1 + 80);
  while (sub_22EFBBF74(v15, v12) != 2)
  {
    if ((*(_BYTE *)(v15 + 72) & 3) != 0)
    {
      if (v14)
        return 0;
      v14 = 1;
    }
    v16 = sub_22E3CD31C((uint64_t *)(v15 + 72), v15);
    v17 = 0;
    if (v16 != v13)
    {
      v15 = v16;
      if (v16)
        continue;
    }
    return v17;
  }
  v18 = sub_22E624994(v10[1], v15, 0);
  sub_22E3B39D4((llvm::StringMapImpl *)(v10 + 533), v18, v19);
  v17 = 0;
  if ((v20 & 1) != 0)
  {
    v21 = 0;
    v22 = *(_QWORD *)(v15 + 48);
    v23 = v15;
    do
    {
      v24 = sub_22EFBC5B4(v23);
      if (v24)
        break;
      if ((*(_BYTE *)(v23 + 72) & 3) != 0)
      {
        if (v21)
          break;
        v21 = 1;
      }
      v25 = sub_22E3CD31C((uint64_t *)(v23 + 72), v23);
      if (v25 == v15)
        break;
      v23 = v25;
    }
    while (v25);
    v26 = 0;
    v27 = v10[1];
    if ((*(_BYTE *)(*(_QWORD *)(v27 + 152) + 1) & 1) != 0 && v5)
    {
      sub_22E618EBC((uint64_t)v132, v27, 0);
      v129 = v131;
      v130 = 0x1000000000;
      v30 = *(_QWORD *)(v10[1] + 144);
      v31 = *(_QWORD *)(v30 + 16816);
      sub_22EA41AB8((uint64_t)&v116, 62, 0, v7);
      v119 = 0;
      v120 = v31;
      v121 = 0;
      v122 = v7;
      v123 = v30 | 2;
      v124 = &v116;
      v125 = 0;
      v116.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24FAC3008;
      v126 = 1310720;
      v118 |= 0x200u;
      v32 = v130;
      if (v130 >= HIDWORD(v130))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v32 = v130;
      }
      *((_QWORD *)v129 + v32) = &v116;
      LODWORD(v130) = v130 + 1;
      v33 = sub_22F24E348(v10[1] + 280, *(_QWORD *)(*(_QWORD *)(v10[1] + 144) + 16816), (uint64_t *)&v129);
      v34 = sub_22E46F2EC(v10[1] + 280, v33);
      v141 = xmmword_24FA659B0;
      v142 = off_24FA659C0;
      sub_22F27BE70(&__p, (uint64_t)v10, (uint64_t)&v141, 2);
      v35 = v10[1];
      LOWORD(v143) = 260;
      *(_QWORD *)&v141 = &__p;
      v26 = (uint64_t)sub_22E4CF82C(v35, v34, (uint64_t)&v141, v33, v7, 0, 7);
      sub_22E61A8FC((uint64_t)v132, 0, 0, *(_QWORD *)(*(_QWORD *)(v10[1] + 144) + 16816), (llvm::Value *)v26, v33, (uint64_t *)&v129, v7, v36, v7);
      v127[0] = &v116;
      *(_QWORD *)&v141 = 0;
      v37 = sub_22E3CED3C(v139, v127, &v141);
      v38 = v139[0] + 56 * v140;
      if (v37)
        v38 = v141;
      v39 = *(_OWORD *)(v38 + 24);
      v112 = *(_OWORD *)(v38 + 8);
      v113 = v39;
      v114 = *(_OWORD *)(v38 + 40);
      v40 = *(_QWORD *)(*(_QWORD *)(v10[1] + 144) + 16816);
      v41 = v117;
      v141 = v112;
      v142 = v39;
      v143 = v114;
      sub_22E6281E0(v134, v40, (uint64_t)v127);
      v42 = sub_22E4E6994((uint64_t)v132, (uint64_t)&v141, 0, v40, v41, 2, (uint64_t)v127, 0);
      v43 = *(_QWORD *)(v9 + 16);
      *(_QWORD *)&v107 = v42;
      *((_QWORD *)&v107 + 1) = *((_QWORD *)&v132[0] + 1);
      v108 = v43;
      v109 = 0;
      v110 = 0;
      v111 = 0;
      v44 = sub_22E66C868((uint64_t)(v134 + 35), v22, 0);
      v128 = 257;
      sub_22E3BEE6C(v135, &v107, v44, (uint64_t)v127, (uint64_t)&v141);
      v45 = 0;
      v46 = 0;
      v106[0] = v141;
      v106[1] = v142;
      v106[2] = v143;
      v47 = *(_QWORD *)(v24 + 8);
      v48 = *(_QWORD *)((v47 & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v48 & 8) != 0)
      {
        v46 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFFFF0) + 0x18);
        v45 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
      }
      sub_22E4DA890((uint64_t)v132, v24, v106, v45 | v46 | (v48 | v47) & 7, 1);
      v127[0] = &v116;
      *(_QWORD *)&v141 = 0;
      v49 = sub_22E3CED3C(v139, v127, &v141);
      v50 = v139[0] + 56 * v140;
      if (v49)
        v50 = v141;
      v51 = *(_OWORD *)(v50 + 24);
      v103 = *(_OWORD *)(v50 + 8);
      v104 = v51;
      v105 = *(_OWORD *)(v50 + 40);
      v52 = *(_QWORD *)(*(_QWORD *)(v10[1] + 144) + 16816);
      v53 = v117;
      v141 = v103;
      v142 = v51;
      v143 = v105;
      sub_22E6281E0(v134, v52, (uint64_t)v127);
      v54 = (llvm::Type **)sub_22E4E6994((uint64_t)v132, (uint64_t)&v141, 0, v52, v53, 2, (uint64_t)v127, 0);
      v102[0] = v136;
      v102[1] = v137;
      v102[2] = v138;
      sub_22E3BEDDC((uint64_t)v135, v54, (uint64_t)v102);
      sub_22E619DE8((uint64_t)v132, 0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v129 != v131)
        free(v129);
      sub_22E619434((uint64_t)v132);
    }
    if (sub_22F115260(*(_QWORD *)(v15 + 48)))
    {
      v90 = v22;
      sub_22E618EBC((uint64_t)v132, v10[1], 0);
      v129 = v131;
      v130 = 0x1000000000;
      v55 = *(_QWORD *)(v10[1] + 144);
      v56 = *(_QWORD *)(v55 + 16816);
      sub_22EA41AB8((uint64_t)&v116, 62, 0, v7);
      v119 = 0;
      v120 = v56;
      v121 = 0;
      v122 = v7;
      v123 = v55 | 2;
      v124 = &v116;
      v125 = 0;
      v116.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24FAC3008;
      v126 = 1310720;
      v118 |= 0x200u;
      v57 = v130;
      if (v130 >= HIDWORD(v130))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v57 = v130;
      }
      *((_QWORD *)v129 + v57) = &v116;
      LODWORD(v130) = v130 + 1;
      v58 = sub_22F24E348(v10[1] + 280, *(_QWORD *)(*(_QWORD *)(v10[1] + 144) + 16392), (uint64_t *)&v129);
      v59 = sub_22E46F2EC(v10[1] + 280, v58);
      v141 = xmmword_24FA659D0;
      v142 = off_24FA659E0;
      sub_22F27BE70(&__p, (uint64_t)v10, (uint64_t)&v141, 2);
      v60 = v10[1];
      LOWORD(v143) = 260;
      *(_QWORD *)&v141 = &__p;
      v28 = (uint64_t)sub_22E4CF82C(v60, v59, (uint64_t)&v141, v58, v7, 0, 7);
      v101[0] = 0;
      v101[1] = (uint64_t)v132;
      sub_22E48EE24(v101, 0, 1);
      sub_22E61A8FC((uint64_t)v132, 0, 0, *(_QWORD *)(*(_QWORD *)(v10[1] + 144) + 16392), (llvm::Value *)v28, v58, (uint64_t *)&v129, v7, v61, v7);
      v100[0] = 0;
      v100[1] = (uint64_t)v132;
      sub_22E48EE24(v100, 0, 0);
      v127[0] = &v116;
      *(_QWORD *)&v141 = 0;
      v62 = sub_22E3CED3C(v139, v127, &v141);
      v63 = v139[0] + 56 * v140;
      if (v62)
        v63 = v141;
      v64 = *(_OWORD *)(v63 + 24);
      v97 = *(_OWORD *)(v63 + 8);
      v98 = v64;
      v99 = *(_OWORD *)(v63 + 40);
      v65 = *(_QWORD *)(*(_QWORD *)(v10[1] + 144) + 16816);
      v66 = v117;
      v141 = v97;
      v142 = v64;
      v143 = v99;
      sub_22E6281E0(v134, v65, (uint64_t)v127);
      v67 = sub_22E4E6994((uint64_t)v132, (uint64_t)&v141, 0, v65, v66, 2, (uint64_t)v127, 0);
      v68 = *(_QWORD *)(v9 + 16);
      v93[0] = v67;
      v93[1] = *((_QWORD *)&v132[0] + 1);
      v93[2] = v68;
      v94 = 0;
      v95 = 0;
      v96 = 0;
      v69 = off_24FA66238[(int)sub_22F115260(v90) - 1];
      v70 = sub_22F115260(v90);
      v71 = sub_22F245DD4((uint64_t)v132, v70);
      sub_22F25A27C(v132, (uint64_t)v93, v90, (void (*)(_QWORD *, void **, uint64_t))v69, v71);
      sub_22E619DE8((uint64_t)v132, 0);
      sub_22E48F084(v100);
      sub_22E48F084(v101);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v129 != v131)
        free(v129);
      sub_22E619434((uint64_t)v132);
    }
    else
    {
      v28 = 0;
    }
    if (!(v26 | v28))
      return 0;
    *(_QWORD *)&v141 = *(_QWORD *)(v10[1] + 96);
    *((_QWORD *)&v141 + 1) = v141;
    llvm::FunctionType::get();
    v72 = (llvm::Constant *)llvm::PointerType::get();
    NullValue = llvm::Constant::getNullValue(v72, v73);
    if (v26)
    {
      if (v28)
        goto LABEL_51;
    }
    else
    {
      *(_QWORD *)&v132[0] = *(_QWORD *)(v10[1] + 96);
      llvm::FunctionType::get();
      v85 = (llvm::Constant *)llvm::PointerType::get();
      v26 = llvm::Constant::getNullValue(v85, v86);
      if (v28)
      {
LABEL_51:
        if (!v3)
        {
LABEL_52:
          v75 = llvm::FunctionType::get();
          v132[0] = xmmword_24FA659F0;
          v132[1] = off_24FA65A00;
          sub_22F27BE70(&v116, (uint64_t)v10, (uint64_t)v132, 2);
          v76 = v10[1];
          v133 = 260;
          *(_QWORD *)&v132[0] = &v116;
          v78 = sub_22E46BBB8((_QWORD **)(v76 + 280), *(_QWORD *)(*(_QWORD *)(v76 + 288) + 16392), 0, 0, 0, 0, 0, v77, 0, 0, -1);
          v17 = sub_22E4CF82C(v76, v75, (uint64_t)v132, v78, 0, 0, 7);
          sub_22E618EBC((uint64_t)v132, v10[1], 0);
          v129 = v131;
          v130 = 0x1000000000;
          v79 = v10[1];
          v80 = *(_QWORD *)(*(_QWORD *)(v79 + 144) + 16392);
          v82 = sub_22E46BBB8((_QWORD **)(v79 + 280), *(_QWORD *)(*(_QWORD *)(v79 + 288) + 16392), 0, 0, 0, 0, 0, v81, 0, 0, -1);
          sub_22E61A8FC((uint64_t)v132, 0, 0, v80, v17, v82, (uint64_t *)&v129, v7, v83, v7);
          v84 = *(_OWORD *)(v9 + 16);
          v92[0] = *(_OWORD *)v9;
          v92[1] = v84;
          v92[2] = *(_OWORD *)(v9 + 32);
          sub_22F27D30C(v10, v132, (uint64_t)v92, v26, NullValue, v28, v7);
          sub_22E619DE8((uint64_t)v132, 0);
          if (v129 != v131)
            free(v129);
          sub_22E619434((uint64_t)v132);
          if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v116.__r_.__value_.__l.__data_);
          return v17;
        }
        goto LABEL_58;
      }
    }
    *(_QWORD *)&v132[0] = *(_QWORD *)(v10[1] + 96);
    llvm::FunctionType::get();
    v87 = (llvm::Constant *)llvm::PointerType::get();
    v28 = llvm::Constant::getNullValue(v87, v88);
    if (!v3)
      goto LABEL_52;
LABEL_58:
    v89 = *(_OWORD *)(v9 + 16);
    v91[0] = *(_OWORD *)v9;
    v91[1] = v89;
    v91[2] = *(_OWORD *)(v9 + 32);
    sub_22F27D30C(v10, v3, (uint64_t)v91, v26, NullValue, v28, v7);
    return 0;
  }
  return v17;
}

uint64_t sub_22E5A109C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  char v11;
  unint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  size_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  _OWORD *v29;
  uint64_t v30;
  llvm::raw_ostream *v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int *v34;
  const void *v35;
  size_t v36;
  unsigned int v37;
  void *v38;
  _WORD *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t BitCast;
  llvm::Type *v47;
  uint64_t v48;
  uint64_t v49;
  llvm::Type *v50;
  llvm::Value *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t AddrSpaceCast;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  llvm::Value *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t (*v76)();
  int v77;
  int v78;
  int v79;
  int v80;
  llvm::Value *v81;
  unint64_t v82;
  _QWORD v83[3];
  int v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  unint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  void **v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  void *v107;
  uint64_t v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  __int128 v113;
  _BYTE v114[128];
  _QWORD *v115;
  __int128 v116;
  _QWORD v117[18];

  v0 = MEMORY[0x24BDAC7A8]();
  v3 = v2;
  v5 = v4;
  v6 = v1;
  v7 = v0;
  v117[16] = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(*(_QWORD *)(v0 + 8) + 152);
  if (*(_QWORD *)(v8 + 624) == *(_QWORD *)(v8 + 632) && (*(_BYTE *)(v8 + 76) & 8) == 0)
    return 0;
  v10 = sub_22EF95D10(v1);
  if (!v11)
    goto LABEL_5;
  v13 = *(_DWORD *)(v10 + 36);
  if (v13 == 1 || !v13 && *(_BYTE *)(v7 + 4248))
    goto LABEL_5;
  v14 = v3;
  v15 = *(_QWORD *)(v7 + 8);
  v16 = *(_QWORD *)(v6 + 80);
  if (!v16)
  {
    v21 = 0;
    goto LABEL_22;
  }
  v17 = 0;
  v18 = *(_QWORD *)(v15 + 144);
  v19 = v16;
  while (1)
  {
    if (sub_22EFBBF74(v19, v18) == 2)
    {
      v21 = (_QWORD *)v19;
      goto LABEL_21;
    }
    if ((*(_BYTE *)(v19 + 72) & 3) != 0)
      break;
LABEL_17:
    v20 = sub_22E3CD31C((uint64_t *)(v19 + 72), v19);
    v21 = 0;
    if (v20 != v16)
    {
      v19 = v20;
      if (v20)
        continue;
    }
    goto LABEL_21;
  }
  if (!v17)
  {
    v17 = 1;
    goto LABEL_17;
  }
  v21 = 0;
LABEL_21:
  v15 = *(_QWORD *)(v7 + 8);
LABEL_22:
  v22 = sub_22E624994(v15, (uint64_t)v21, 0);
  sub_22E3B39D4((llvm::StringMapImpl *)(v7 + 4296), v22, v23);
  if ((v24 & 1) == 0)
  {
LABEL_5:
    v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 152) + 72);
    return (v12 >> 35) & 1;
  }
  v82 = v21[6];
  v25 = (*(uint64_t (**)(_QWORD *))(*v21 + 32))(v21);
  v26 = *(_QWORD *)(v25 + 56);
  if ((v26 & 4) != 0 && (v65 = v26 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(v65 + 16)))
    v27 = **(unsigned int ***)(v65 + 24);
  else
    v27 = (unsigned int *)(v25 + 64);
  v28 = *v27;
  v96 = 0;
  v95 = 0;
  sub_22E5A029C(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 144) + 1992), v28, (_DWORD *)&v96 + 1, &v96, &v95);
  v115 = v117;
  v116 = xmmword_22F44E310;
  v112 = v114;
  v113 = xmmword_22F44E310;
  sub_22F242C48((uint64_t)&v107, (uint64_t)&v115);
  v29 = (_OWORD *)v111;
  if ((unint64_t)(v110 - v111) > 0x10)
  {
    *(_BYTE *)(v111 + 16) = 95;
    *v29 = *(_OWORD *)"__omp_offloading_";
    v111 += 17;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v107, "__omp_offloading_");
  }
  v97 = &unk_24FA65F98;
  v98 = (uint64_t)"_%x";
  *(_QWORD *)&v99 = HIDWORD(v96);
  llvm::raw_ostream::operator<<();
  v92 = &unk_24FA65F98;
  v93 = (void **)"_%x_";
  v94 = v96;
  v30 = llvm::raw_ostream::operator<<();
  v31 = (llvm::raw_ostream *)v30;
  v32 = v21[5];
  if ((v32 & 7) == 0)
  {
    v33 = v32 & 0xFFFFFFFFFFFFFFF8;
    if (v33)
    {
      v34 = *(unsigned int **)(v33 + 16);
      v37 = *v34;
      v35 = v34 + 4;
      v36 = v37;
      v38 = *(void **)(v30 + 32);
      if ((unint64_t)v37 <= *((_QWORD *)v31 + 3) - (_QWORD)v38)
      {
        if (v36)
        {
          memcpy(v38, v35, v36);
          *((_QWORD *)v31 + 4) += v36;
        }
      }
      else
      {
        v31 = (llvm::raw_ostream *)llvm::raw_ostream::write(v31, (const char *)v35);
      }
    }
  }
  v39 = (_WORD *)*((_QWORD *)v31 + 4);
  if (*((_QWORD *)v31 + 3) - (_QWORD)v39 > 1uLL)
  {
    *v39 = 27743;
    *((_QWORD *)v31 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v31, "_l");
  }
  llvm::raw_ostream::operator<<();
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v107);
  v40 = 0;
  v41 = (uint64_t)v21;
  do
  {
    v42 = sub_22EFBC5B4(v41);
    if (v42)
      break;
    if ((*(_BYTE *)(v41 + 72) & 3) != 0)
    {
      if (v40)
        break;
      v40 = 1;
    }
    v43 = sub_22E3CD31C((uint64_t *)(v41 + 72), v41);
    if ((_QWORD *)v43 == v21)
      break;
    v41 = v43;
  }
  while (v43);
  v44 = *(_QWORD *)(v7 + 8);
  v45 = *(_QWORD *)(v44 + 152);
  if ((*(_BYTE *)(v45 + 1) & 1) != 0 && v14)
  {
    if ((*(_BYTE *)(v45 + 76) & 8) != 0)
    {
      sub_22E618EBC((uint64_t)&v107, v44, 0);
      v53 = sub_22E46BBB8((_QWORD **)(*(_QWORD *)(v7 + 8) + 280), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 288) + 16392), 0, 0, 0, 0, 0, v52, 0, 0, -1);
      v54 = sub_22E46F2EC(*(_QWORD *)(v7 + 8) + 280, v53);
      v55 = *(_QWORD *)(v7 + 8);
      LOWORD(v100) = 773;
      v97 = v115;
      v98 = v116;
      *(_QWORD *)&v99 = "_ctor";
      v81 = sub_22E4CF82C(v55, v54, (uint64_t)&v97, v53, v28, 0, 5);
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 216) + 56) == 30)
        *((_WORD *)v81 + 9) = *((_WORD *)v81 + 9) & 0xC00F | 0x5B0;
      v92 = 0;
      v93 = &v107;
      sub_22E48EE24((uint64_t *)&v92, 0, 1);
      v56 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 144) + 16392);
      v105 = 0u;
      v106 = 0u;
      v103 = 0u;
      v104 = 0u;
      v101 = 0u;
      v102 = 0u;
      v99 = 0u;
      v100 = 0u;
      v97 = &v99;
      v98 = 0x1000000000;
      sub_22E61A8FC((uint64_t)&v107, 0, 0, v56, v81, v53, (uint64_t *)&v97, v28, (int8x16_t)0x1000000000uLL, v28);
      if (v97 != &v99)
        free(v97);
      v97 = 0;
      v98 = (uint64_t)&v107;
      sub_22E48EE24((uint64_t *)&v97, 0, 0);
      AddrSpaceCast = v5;
      if (llvm::GlobalValue::getAddressSpace((llvm::GlobalValue *)v5))
      {
        if (*(_QWORD *)(*(_QWORD *)v5 + 24))
          llvm::PointerType::get();
        else
          llvm::PointerType::get(**(llvm::PointerType ***)v5, 0);
        AddrSpaceCast = llvm::ConstantExpr::getAddrSpaceCast();
      }
      v66 = *(_QWORD *)(v5 + 24);
      v67 = sub_22EF5B404(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 144), (unint64_t)v21, 0);
      v68 = 0;
      v69 = 0;
      *(_QWORD *)&v87 = AddrSpaceCast;
      *((_QWORD *)&v87 + 1) = v66;
      v88 = v67;
      v89 = 0;
      v90 = 0;
      v91 = 0;
      v70 = *(_QWORD *)(v42 + 8);
      v71 = *(_QWORD *)((v70 & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v71 & 8) != 0)
      {
        v69 = *(_QWORD *)((v71 & 0xFFFFFFFFFFFFFFF0) + 0x18);
        v68 = *(_QWORD *)((v71 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
      }
      sub_22E4DA890((uint64_t)&v107, v42, &v87, v68 | v69 | (v71 | v70) & 7, 1);
      sub_22E619DE8((uint64_t)&v107, 0);
      BitCast = llvm::ConstantExpr::getBitCast();
      sub_22E48F084(&v97);
      sub_22E48F084(&v92);
      sub_22E619434((uint64_t)&v107);
    }
    else
    {
      BitCast = llvm::User::operator new((llvm::User *)0x58);
      llvm::Constant::getNullValue(*(llvm::Constant **)(*(_QWORD *)(v7 + 8) + 8), v47);
      LOWORD(v111) = 773;
      v107 = v115;
      v108 = v116;
      v109 = "_ctor";
      llvm::GlobalVariable::GlobalVariable();
      v81 = (llvm::Value *)BitCast;
    }
    *(_QWORD *)&v113 = 0;
    v73 = v96;
    v72 = HIDWORD(v96);
    LOWORD(v111) = 773;
    v107 = v115;
    v108 = v116;
    v109 = "_ctor";
    llvm::Twine::toVector();
    sub_22F27D468(v7 + 2872, v72, v73, v112, v113, v95, (uint64_t)v81, BitCast, 2u);
  }
  if (sub_22F115260(v21[6]))
  {
    v48 = *(_QWORD *)(v7 + 8);
    if ((*(_BYTE *)(*(_QWORD *)(v48 + 152) + 76) & 8) != 0)
    {
      sub_22E618EBC((uint64_t)&v107, v48, 0);
      v59 = sub_22E46BBB8((_QWORD **)(*(_QWORD *)(v7 + 8) + 280), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 288) + 16392), 0, 0, 0, 0, 0, v58, 0, 0, -1);
      v60 = sub_22E46F2EC(*(_QWORD *)(v7 + 8) + 280, v59);
      v61 = *(_QWORD *)(v7 + 8);
      LOWORD(v100) = 773;
      v97 = v115;
      v98 = v116;
      *(_QWORD *)&v99 = "_dtor";
      v62 = sub_22E4CF82C(v61, v60, (uint64_t)&v97, v59, v28, 0, 5);
      v51 = v62;
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 216) + 56) == 30)
        *((_WORD *)v62 + 9) = *((_WORD *)v62 + 9) & 0xC00F | 0x5B0;
      v92 = 0;
      v93 = &v107;
      sub_22E48EE24((uint64_t *)&v92, 0, 1);
      v63 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 144) + 16392);
      v105 = 0u;
      v106 = 0u;
      v103 = 0u;
      v104 = 0u;
      v101 = 0u;
      v102 = 0u;
      v99 = 0u;
      v100 = 0u;
      v97 = &v99;
      v98 = 0x1000000000;
      sub_22E61A8FC((uint64_t)&v107, 0, 0, v63, v51, v59, (uint64_t *)&v97, v28, (int8x16_t)0x1000000000uLL, v28);
      if (v97 != &v99)
        free(v97);
      v97 = 0;
      v98 = (uint64_t)&v107;
      sub_22E48EE24((uint64_t *)&v97, 0, 0);
      v64 = v5;
      if (llvm::GlobalValue::getAddressSpace((llvm::GlobalValue *)v5))
      {
        if (*(_QWORD *)(*(_QWORD *)v5 + 24))
          llvm::PointerType::get();
        else
          llvm::PointerType::get(**(llvm::PointerType ***)v5, 0);
        v64 = llvm::ConstantExpr::getAddrSpaceCast();
      }
      v74 = *(_QWORD *)(v5 + 24);
      v75 = sub_22EF5B404(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 144), (unint64_t)v21, 0);
      v83[0] = v64;
      v83[1] = v74;
      v83[2] = v75;
      v84 = 0;
      v85 = 0;
      v86 = 0;
      v76 = off_24FA66238[(int)sub_22F115260(v82) - 1];
      v77 = sub_22F115260(v82);
      v78 = sub_22F245DD4((uint64_t)&v107, v77);
      sub_22F25A27C(&v107, (uint64_t)v83, v82, (void (*)(_QWORD *, void **, uint64_t))v76, v78);
      sub_22E619DE8((uint64_t)&v107, 0);
      v49 = llvm::ConstantExpr::getBitCast();
      sub_22E48F084(&v97);
      sub_22E48F084(&v92);
      sub_22E619434((uint64_t)&v107);
    }
    else
    {
      v49 = llvm::User::operator new((llvm::User *)0x58);
      llvm::Constant::getNullValue(*(llvm::Constant **)(*(_QWORD *)(v7 + 8) + 8), v50);
      LOWORD(v111) = 773;
      v107 = v115;
      v108 = v116;
      v109 = "_dtor";
      llvm::GlobalVariable::GlobalVariable();
      v51 = (llvm::Value *)v49;
    }
    *(_QWORD *)&v113 = 0;
    v79 = v96;
    v80 = HIDWORD(v96);
    LOWORD(v111) = 773;
    v107 = v115;
    v108 = v116;
    v109 = "_dtor";
    llvm::Twine::toVector();
    sub_22F27D468(v7 + 2872, v80, v79, v112, v113, v95, (uint64_t)v51, v49, 4u);
  }
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 152) + 72);
  if (v112 != v114)
    free(v112);
  if (v115 != v117)
    free(v115);
  return (v12 >> 35) & 1;
}

void sub_22E5A1B48(_QWORD *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  llvm::Constant *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  llvm::Instruction *v21;
  uint64_t v22;
  uint64_t *v23;
  llvm::Constant *v24;
  uint64_t RuntimeFunction;
  llvm::Value *v26;
  llvm::Value *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD v31[4];
  __int16 v32;
  _QWORD v33[4];
  __int16 v34;
  _BYTE v35[32];
  __int16 v36;
  _BYTE v37[32];
  __int16 v38;
  std::string __p;
  std::string v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v41 = xmmword_24FA65A10;
  v42 = off_24FA65A20;
  sub_22F27BE70(&v40, (uint64_t)a1, (uint64_t)&v41, 2);
  v12 = (llvm::Constant *)sub_22E66C868(*(_QWORD *)(a2 + 144) + 280, a3, 0);
  *(_QWORD *)&v41 = a4;
  *((_QWORD *)&v41 + 1) = a5;
  *(_QWORD *)&v42 = &v40;
  LOWORD(v43) = 1029;
  v13 = sub_22F27D020((uint64_t)a1, v12, (llvm::Twine *)&v41);
  v14 = v13;
  v15 = a1[1];
  v16 = *(_QWORD *)(*(_QWORD *)(v15 + 152) + 72);
  if ((_DWORD)v16)
    v17 = (v16 & 0x400000000) == 0;
  else
    v17 = 1;
  if (v17 || !*(_BYTE *)(*(_QWORD *)(v15 + 216) + 81))
  {
    v41 = xmmword_24FA65A30;
    v42 = off_24FA65A40;
    sub_22F27BE70(&__p, (uint64_t)a1, (uint64_t)&v41, 2);
    *(_QWORD *)&v41 = sub_22E59F7E4(a1, a2, 0);
    *((_QWORD *)&v41 + 1) = sub_22E59F964((uint64_t)a1, a2, 0);
    v20 = *(_QWORD *)(a1[1] + 96);
    v38 = 257;
    *(_QWORD *)&v42 = sub_22E3C1338((uint64_t *)(a2 + 272), v14, v20, (uint64_t)v37);
    v21 = sub_22F28CE84(a2, a3);
    v22 = *(_QWORD *)(a1[1] + 88);
    v36 = 257;
    v23 = (uint64_t *)(a2 + 272);
    *((_QWORD *)&v42 + 1) = sub_22E3BF45C((uint64_t *)(a2 + 272), (uint64_t)v21, v22, 0, (uint64_t)v35);
    v24 = *(llvm::Constant **)(a1[1] + 104);
    v31[0] = a4;
    v31[1] = a5;
    v31[2] = &v40;
    v32 = 1029;
    v33[0] = v31;
    v33[2] = &__p;
    v34 = 1026;
    v43 = sub_22F27D020((uint64_t)a1, v24, (llvm::Twine *)v33);
    RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
    v38 = 257;
    v27 = sub_22E479C7C(a2, RuntimeFunction, v26, (uint64_t)&v41, 5, (uint64_t)v37);
    v28 = llvm::PointerType::get();
    v36 = 257;
    v29 = sub_22E3C1338(v23, (uint64_t)v27, v28, (uint64_t)v35);
    v30 = sub_22EF5D130(*(_QWORD *)(a1[1] + 144), a3);
    *(_QWORD *)a6 = v29;
    *(_QWORD *)(a6 + 8) = v12;
    *(_QWORD *)(a6 + 16) = v30;
    *(_DWORD *)(a6 + 24) = 0;
    *(_QWORD *)(a6 + 32) = 0;
    *(_QWORD *)(a6 + 40) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_DWORD *)(v13 + 32) = *(_DWORD *)(v13 + 32) & 0xFFFFE3FF | 0x400;
    v18 = *(_QWORD *)(v13 + 24);
    v19 = sub_22EF5D130(*(_QWORD *)(a1[1] + 144), a3);
    *(_QWORD *)a6 = v14;
    *(_QWORD *)(a6 + 8) = v18;
    *(_QWORD *)(a6 + 16) = v19;
    *(_DWORD *)(a6 + 24) = 0;
    *(_QWORD *)(a6 + 32) = 0;
    *(_QWORD *)(a6 + 40) = 0;
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
}

double sub_22E5A1E28@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  _DWORD *v8;
  __int128 v9;
  double result;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[112];
  _OWORD v33[2];
  uint64_t v34;
  __int128 v35[2];
  uint64_t v36;

  v8 = *(_DWORD **)(a2 + 1856);
  if (v8 && v8[2] == 2 && (*(uint64_t (**)(_QWORD))(*(_QWORD *)v8 + 64))(*(_QWORD *)(a2 + 1856)))
  {
    (*(void (**)(_BYTE *__return_ptr, _DWORD *, uint64_t))(*(_QWORD *)v8 + 72))(v32, v8, a2);
    v9 = *(_OWORD *)&v32[24];
    *(_OWORD *)a4 = *(_OWORD *)&v32[8];
    *(_OWORD *)(a4 + 16) = v9;
    result = *(double *)&v32[40];
    *(_OWORD *)(a4 + 32) = *(_OWORD *)&v32[40];
  }
  else
  {
    v11 = sub_22E59F964(a1, a2, a3);
    v12 = sub_22EF60A6C(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 144), 32, 1);
    *(_QWORD *)v32 = ".threadid_temp.";
    *(_WORD *)&v32[32] = 259;
    v13 = sub_22F25E4D4(a2, v12, (uint64_t)v32, 0);
    v15 = v13 & 0xFFFFFFFFFFFFFFF8;
    if (v13 <= 7)
      v15 = 0;
    v16 = v14 & 0xFFFFFFFFFFFFFFF8;
    if (v13 <= 7)
      v16 = 0;
    *(_QWORD *)a4 = v15;
    *(_QWORD *)(a4 + 8) = v16;
    v17 = 1 << (v14 & 7 | (8 * (v13 & 7)));
    if (v13 < 8)
      v17 = 0;
    *(_QWORD *)(a4 + 16) = v17;
    *(_DWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 32) = 0;
    *(_QWORD *)(a4 + 40) = 0;
    sub_22E6281E0(*(_QWORD **)(a2 + 144), v12, (uint64_t)v33);
    v18 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)v32 = *(_OWORD *)a4;
    *(_OWORD *)&v32[16] = v18;
    *(_OWORD *)&v32[32] = *(_OWORD *)(a4 + 32);
    v19 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
    v35[0] = v33[0];
    v35[1] = v33[1];
    v36 = v34;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v21 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 2;
    v20 = 0;
    v31 = 0u;
    v30 = 0u;
    sub_22E3C113C((uint64_t)&v20, (__int128 *)v32, v12, 2, v35, v19);
    return sub_22E4E87FC(a2, v11, (uint64_t)&v20, 0);
  }
  return result;
}

uint64_t sub_22E5A1FF4(uint64_t a1, const char *a2, uint64_t a3)
{
  void **v4;
  void *v5;
  llvm::Constant *v6;
  uint64_t v7;
  std::string __p;
  void *v10[2];
  char v11;
  _QWORD v12[2];
  const char *v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v15 = 1283;
  v12[0] = "gomp_critical_user_";
  v13 = a2;
  v14 = a3;
  llvm::Twine::str((llvm::Twine *)v12);
  v4 = (void **)v10[0];
  if (v11 >= 0)
    v4 = v10;
  v5 = (void *)(v11 & 0x7F);
  if (v11 < 0)
    v5 = v10[1];
  v12[0] = v4;
  v12[1] = v5;
  v13 = "var";
  v14 = 3;
  sub_22F27BE70(&__p, a1, (uint64_t)v12, 2);
  v6 = *(llvm::Constant **)(a1 + 2672);
  v15 = 260;
  v12[0] = &__p;
  v7 = sub_22F27D020(a1, v6, (llvm::Twine *)v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v11 < 0)
    operator delete(v10[0]);
  return v7;
}

llvm::Value *sub_22E5A20FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12)
{
  llvm::Value *result;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  llvm::Value *v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  llvm::LLVMContext *v28;
  unint64_t v29;
  unint64_t v30;
  llvm::LLVMContext *v31;
  unint64_t v32;
  uint64_t v33;
  llvm::Type **v34;
  uint64_t *v35;
  llvm::Type **v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t i;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  llvm::Type **v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  llvm::Value *v61;
  int8x16_t v62;
  int v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  llvm::Instruction *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t RuntimeFunction;
  llvm::Value *v87;
  llvm::Value *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t *v93;
  unint64_t v94;
  unint64_t v95;
  llvm::Value *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD v107[3];
  int v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  _OWORD v116[3];
  _QWORD v117[3];
  int v118;
  uint64_t v119;
  uint64_t v120;
  llvm::Value *v121;
  unsigned int v122;
  _QWORD v123[3];
  int v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD v127[9];
  char v128;
  _QWORD *v129;
  _QWORD v130[3];
  int v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134[3];
  __int128 v135[3];
  __int128 v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  _OWORD v141[3];
  __int128 v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  _OWORD v147[2];
  __int128 v148;
  _OWORD v149[2];
  __int128 v150;
  _OWORD v151[3];
  std::string __p;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int v158;
  uint64_t v159;
  __int128 *v160;
  uint64_t v161;
  int v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int v168;
  uint64_t v169;
  __int128 *v170;
  uint64_t v171;
  int v172;
  _QWORD v173[2];
  _BYTE v174[56];
  unint64_t v175;
  unsigned __int8 v176;
  uint64_t v177[329];
  uint64_t v178[2];
  unsigned int v179;
  _QWORD *v180;
  uint64_t v181;
  _QWORD v182[2];
  llvm::Value *v183;
  uint64_t v184;
  uint64_t v185;

  result = (llvm::Value *)MEMORY[0x24BDAC7A8]();
  v185 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(v13 + 320))
  {
    v19 = v17;
    v20 = v15;
    v21 = v14;
    v22 = result;
    v101 = v13;
    v23 = *(_QWORD *)(*((_QWORD *)result + 1) + 144);
    v98 = v18;
    v104 = v23;
    v106 = v16;
    if (v17)
    {
      v29 = sub_22EF60A6C(v23, 32, 1);
      *(_QWORD *)v174 = ".omp.copyprivate.did_it";
      *(_WORD *)&v174[32] = 259;
      v30 = sub_22F25E4D4(v101, v29, (uint64_t)v174, 0);
      if (v30 <= 7)
        v24 = 0;
      else
        v24 = v30 & 0xFFFFFFFFFFFFFFF8;
      if (v30 <= 7)
        v32 = 0;
      else
        v32 = (unint64_t)v31 & 0xFFFFFFFFFFFFFFF8;
      if (v30 >= 8)
        v33 = 1 << (v31 & 7 | (8 * (v30 & 7u)));
      else
        v33 = 0;
      llvm::Type::getInt32Ty(*(llvm::Type **)(v101 + 336), v31);
      v34 = (llvm::Type **)llvm::ConstantInt::get();
      v130[0] = v24;
      v99 = v33;
      v100 = v32;
      v130[1] = v32;
      v130[2] = v33;
      v131 = 0;
      v133 = 0;
      v132 = 0;
      sub_22E3BEDDC(v101 + 272, v34, (uint64_t)v130);
    }
    else
    {
      v24 = 0;
      v99 = 0;
      v100 = 0;
    }
    v173[0] = sub_22E59F7E4(v22, v101, v20);
    v173[1] = sub_22E59F964((uint64_t)v22, v101, v20);
    v25 = v20;
    v127[0] = off_24FA65C78;
    v127[1] = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
    v127[2] = v26;
    v127[3] = v173;
    v127[4] = 2;
    v127[5] = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
    v127[6] = v27;
    v127[7] = v173;
    v127[8] = 2;
    v128 = 1;
    v129 = 0;
    *(_QWORD *)(v21 + 16) = v127;
    (*(void (**)(llvm::Value *, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v22 + 360))(v22, v101, 55, v21, 0);
    if (v24)
    {
      v96 = v22;
      v97 = v20;
      v35 = (uint64_t *)(v101 + 272);
      llvm::Type::getInt32Ty(*(llvm::Type **)(v101 + 336), v28);
      v36 = (llvm::Type **)llvm::ConstantInt::get();
      v94 = v24;
      v123[0] = v24;
      v123[1] = v100;
      v123[2] = v99;
      v124 = 0;
      v125 = 0;
      v126 = 0;
      sub_22E3BEDDC(v101 + 272, v36, (uint64_t)v123);
      sub_22E5EDA70(v101);
      sub_22E5ED9B4((_QWORD *)v101, v129, 1);
      v122 = 32;
      v37 = v19;
      v121 = (llvm::Value *)v19;
      v38 = sub_22EF5FE30(v104, *(_QWORD *)(v104 + 16816), (const llvm::APInt *)&v121, 0, 0, 0);
      *(_QWORD *)v174 = ".omp.copyprivate.cpr_list";
      *(_WORD *)&v174[32] = 259;
      v95 = v38;
      v39 = sub_22F25E4D4(v101, v38, (uint64_t)v174, 0);
      v41 = 0;
      if (v39 <= 7)
        v42 = 0;
      else
        v42 = v39 & 0xFFFFFFFFFFFFFFF8;
      if (v39 <= 7)
        v43 = 0;
      else
        v43 = v40 & 0xFFFFFFFFFFFFFFF8;
      if (v39 >= 8)
        v41 = 1 << (v40 & 7 | (8 * (v39 & 7)));
      v44 = v42;
      v45 = v41;
      if (v37)
      {
        for (i = 0; i != v37; ++i)
        {
          v117[0] = v44;
          v117[1] = v43;
          v117[2] = v45;
          v118 = 0;
          v119 = 0;
          v120 = 0;
          *(_WORD *)&v174[32] = 257;
          v47 = v43;
          v48 = v44;
          sub_22E486A58(v35, (uint64_t)v117, i, (uint64_t)v174, (uint64_t)&v153);
          sub_22E4D8D7C(v101, *(unsigned int **)(v106 + 8 * i), (uint64_t)v174);
          v163 = *(_OWORD *)&v174[8];
          v164 = *(_OWORD *)&v174[24];
          v165 = *(_OWORD *)&v174[40];
          sub_22E5E0440(v101, (uint64_t)&v163, v175, &v180);
          v49 = *(_QWORD *)(v101 + 96);
          LOWORD(v183) = 257;
          v50 = (llvm::Type **)sub_22E3C1338(v35, (uint64_t)v180, v49, (uint64_t)&v180);
          v116[0] = v153;
          v116[1] = v154;
          v116[2] = v155;
          sub_22E3BEDDC((uint64_t)v35, v50, (uint64_t)v116);
          v44 = v48;
          v43 = v47;
        }
      }
      v90 = v45;
      v91 = v43;
      v92 = v44;
      v93 = (uint64_t *)(v101 + 272);
      v51 = (uint64_t *)*((_QWORD *)v96 + 1);
      v89 = sub_22E66C868(*(_QWORD *)(v101 + 144) + 280, v95, 0);
      v52 = v51[18];
      v180 = v182;
      v181 = 0x1000000000;
      v53 = *(_QWORD *)(v52 + 16816);
      sub_22EA41AB8((uint64_t)&v163, 62, 0, v97);
      *((_QWORD *)&v165 + 1) = 0;
      v166 = v53;
      v167 = 0;
      v168 = v25;
      v169 = v52 | 2;
      v170 = &v163;
      v171 = 0;
      *(_QWORD *)&v163 = &off_24FAC3008;
      v172 = 1310720;
      HIDWORD(v164) |= 0x200u;
      v54 = *(_QWORD *)(v52 + 16816);
      sub_22EA41AB8((uint64_t)&v153, 62, 0, v97);
      *((_QWORD *)&v155 + 1) = 0;
      v156 = v54;
      v157 = 0;
      v158 = v25;
      v159 = v52 | 2;
      v160 = &v153;
      v161 = 0;
      *(_QWORD *)&v153 = &off_24FAC3008;
      v162 = 1310720;
      HIDWORD(v154) |= 0x200u;
      v55 = v181;
      if (v181 >= HIDWORD(v181))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v55 = v181;
      }
      v180[v55] = &v163;
      v56 = v181 + 1;
      LODWORD(v181) = v56;
      if (v56 >= HIDWORD(v181))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v56 = v181;
      }
      v180[v56] = &v153;
      LODWORD(v181) = v181 + 1;
      v57 = sub_22F24E348((uint64_t)(v51 + 35), *(_QWORD *)(v52 + 16392), (uint64_t *)&v180);
      v58 = v51[101];
      *(_OWORD *)v174 = xmmword_24FA65C98;
      *(_OWORD *)&v174[16] = *(_OWORD *)&off_24FA65CA8;
      *(_OWORD *)&v174[32] = xmmword_24FA65CB8;
      sub_22F27BE70(&__p, v58, (uint64_t)v174, 3);
      v59 = sub_22E46F2EC((uint64_t)(v51 + 35), v57);
      *(_WORD *)&v174[32] = 260;
      *(_QWORD *)v174 = &__p;
      v60 = v51[25];
      v61 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x78);
      MEMORY[0x23489F6FC](v61, v59, 7, 0xFFFFFFFFLL, v174, v60);
      sub_22E62BF18(v51, 0, 0, v61, v57);
      llvm::Function::addFnAttr();
      sub_22E618EBC((uint64_t)v174, (uint64_t)v51, 0);
      v88 = v61;
      sub_22E61A8FC((uint64_t)v174, 0, 0, *(_QWORD *)(v52 + 16392), v61, v57, (uint64_t *)&v180, v97, v62, v97);
      *(_QWORD *)&v149[0] = &v163;
      *(_QWORD *)&v151[0] = 0;
      v63 = sub_22E3CED3C(v178, v149, v151);
      v64 = *(_QWORD *)&v151[0];
      if (!v63)
        v64 = v178[0] + 56 * v179;
      v65 = *(_OWORD *)(v64 + 8);
      v66 = *(_OWORD *)(v64 + 40);
      v151[1] = *(_OWORD *)(v64 + 24);
      v151[2] = v66;
      v151[0] = v65;
      LOWORD(v150) = 257;
      v67 = sub_22E3C2A7C(v177, (uint64_t)v151, (uint64_t)v149);
      v68 = llvm::PointerType::get();
      LOWORD(v148) = 257;
      v69 = sub_22E3C1338(v177, v67, v68, (uint64_t)v147);
      v103 = v176;
      v105 = v69;
      *(_QWORD *)&v147[0] = &v153;
      *(_QWORD *)&v149[0] = 0;
      v70 = sub_22E3CED3C(v178, v147, v149);
      v71 = *(_QWORD *)&v149[0];
      if (!v70)
        v71 = v178[0] + 56 * v179;
      v72 = *(_OWORD *)(v71 + 8);
      v73 = *(_OWORD *)(v71 + 40);
      v149[1] = *(_OWORD *)(v71 + 24);
      v150 = v73;
      v149[0] = v72;
      LOWORD(v148) = 257;
      v74 = sub_22E3C2A7C(v177, (uint64_t)v149, (uint64_t)v147);
      v75 = llvm::PointerType::get();
      LOWORD(v145) = 257;
      v102 = sub_22E3C1338(v177, v74, v75, (uint64_t)&v142);
      if (a12)
      {
        v76 = 0;
        v77 = v176;
        do
        {
          v78 = *(_QWORD *)(*(_QWORD *)(v98 + 8 * v76) + 16);
          *(_QWORD *)&v142 = v105;
          *((_QWORD *)&v142 + 1) = v89;
          v143 = v103;
          v144 = 0;
          v145 = 0;
          v146 = 0;
          sub_22E5ADFC8((uint64_t)v147, (uint64_t)v174, &v142, v76, v78);
          v79 = *(_QWORD *)(*(_QWORD *)(a9 + 8 * v76) + 16);
          *(_QWORD *)&v136 = v102;
          *((_QWORD *)&v136 + 1) = v89;
          v137 = v77;
          v138 = 0;
          v139 = 0;
          v140 = 0;
          sub_22E5ADFC8((uint64_t)v141, (uint64_t)v174, &v136, v76, v79);
          v80 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v106 + 8 * v76) + 16) + 48);
          v135[0] = v147[0];
          v135[1] = v147[1];
          v135[2] = v148;
          v134[0] = v141[0];
          v134[1] = v141[1];
          v134[2] = v141[2];
          sub_22E5F21E0((uint64_t)v174, v80, v135, v134, v78, v79, *(_BYTE **)(a11 + 8 * v76++));
        }
        while (a12 != v76);
      }
      sub_22E619DE8((uint64_t)v174, 0);
      sub_22E619434((uint64_t)v174);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v180 != v182)
        free(v180);
      v81 = sub_22F28CE84(v101, v95);
      *(_QWORD *)&v111 = v92;
      *((_QWORD *)&v111 + 1) = v91;
      v112 = v90;
      v113 = 0;
      v114 = 0;
      v115 = 0;
      v82 = *(_QWORD *)(v101 + 96);
      v83 = *(_QWORD *)(v101 + 8);
      LOWORD(v183) = 257;
      sub_22F245864(v93, &v111, v82, v83, (uint64_t)&v180, (uint64_t)v174);
      v107[0] = v94;
      v107[1] = v100;
      v107[2] = v99;
      v108 = 0;
      v109 = 0;
      v110 = 0;
      LOWORD(v183) = 257;
      v84 = sub_22E3C2A7C(v93, (uint64_t)v107, (uint64_t)&v180);
      v180 = (_QWORD *)sub_22E59F7E4(v96, v101, v97);
      v181 = sub_22E59F964((uint64_t)v96, v101, v97);
      v182[0] = v81;
      if ((v174[24] & 3) != 0)
        v85 = sub_22F28ABCC(v174, (_QWORD *)v101);
      else
        v85 = *(_QWORD *)v174;
      v182[1] = v85;
      v183 = v88;
      v184 = v84;
      RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
      LOWORD(v165) = 257;
      result = sub_22E479C7C(v101, RuntimeFunction, v87, (uint64_t)&v180, 6, (uint64_t)&v163);
      if (v122 >= 0x41)
      {
        result = v121;
        if (v121)
          return (llvm::Value *)MEMORY[0x2348A0E84](v121, 0x1000C8000313F17);
      }
    }
    else
    {
      sub_22E5EDA70(v101);
      return (llvm::Value *)sub_22E5ED9B4((_QWORD *)v101, v129, 1);
    }
  }
  return result;
}

llvm::Value *sub_22E5A2B40(llvm::Value *result, uint64_t a2, unsigned int a3, uint64_t a4, int a5, char a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t RuntimeFunction;
  llvm::Value *v14;
  llvm::Constant **v15;
  _QWORD *v16;
  _QWORD *v17;
  llvm::Type *v18;
  uint64_t NullValue;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  llvm::Value *v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int16 v32;
  _QWORD v33[3];

  v9 = (uint64_t)result;
  v33[2] = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(a2 + 1856);
  if (v10)
  {
    if (*(_DWORD *)(v10 + 8) == 2)
      v11 = *(_QWORD *)(a2 + 1856);
    else
      v11 = 0;
  }
  else
  {
    v11 = 0;
  }
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 152) + 76) & 0x20) != 0)
  {
    v30 = *(_OWORD *)(a2 + 320);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a2 + 272));
    result = (llvm::Value *)llvm::OpenMPIRBuilder::createBarrier();
    if (result)
    {
      result = (llvm::Value *)sub_22E3CB840(a2 + 272, (uint64_t)result, v25);
    }
    else
    {
      *(_QWORD *)(a2 + 320) = 0;
      *(_QWORD *)(a2 + 328) = 0;
    }
    if (v31)
      return (llvm::Value *)llvm::MetadataTracking::untrack();
  }
  else if (*(_QWORD *)(a2 + 320))
  {
    v33[0] = sub_22E59F7E4(result, a2, a3);
    v33[1] = sub_22E59F964(v9, a2, a3);
    if (v11 && (a6 & 1) == 0 && *(_BYTE *)(v11 + 140))
    {
      RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
      v32 = 257;
      result = sub_22E479C7C(a2, RuntimeFunction, v14, (uint64_t)v33, 2, (uint64_t)&v30);
      if (a5)
      {
        v15 = (llvm::Constant **)result;
        *(_QWORD *)&v30 = ".cancel.exit";
        v32 = 259;
        v16 = (_QWORD *)operator new();
        llvm::BasicBlock::BasicBlock();
        *(_QWORD *)&v30 = ".cancel.continue";
        v32 = 259;
        v17 = (_QWORD *)operator new();
        llvm::BasicBlock::BasicBlock();
        v32 = 257;
        NullValue = llvm::Constant::getNullValue(*v15, v18);
        v20 = sub_22E3C18F4(a2 + 272, 33, (uint64_t *)v15, NullValue, (uint64_t)&v30);
        v21 = llvm::User::operator new((llvm::User *)0x40);
        MEMORY[0x23489C09C](v21, v16, v17, v20, 0);
        v32 = 257;
        sub_22E3C12C8((uint64_t *)(a2 + 272), v21, (uint64_t)&v30);
        sub_22E5ED9B4((_QWORD *)a2, v16, 0);
        v22 = *(_DWORD *)(v11 + 136) - 36;
        if (v22 <= 0x28 && ((1 << v22) & 0x14001000411) != 0)
          v23 = a2 + 1712;
        else
          v23 = *(_QWORD *)(a2 + 3440) + 56 * *(unsigned int *)(a2 + 3448) - 48;
        v24 = *(_OWORD *)v23;
        v29 = *(_QWORD *)(v23 + 16);
        v28 = v24;
        sub_22E48BA00((_QWORD *)a2, (uint64_t)&v28);
        return (llvm::Value *)sub_22E5ED9B4((_QWORD *)a2, v17, 1);
      }
    }
    else
    {
      v26 = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
      v32 = 257;
      return sub_22E479C7C(a2, v26, v27, (uint64_t)v33, 2, (uint64_t)&v30);
    }
  }
  return result;
}

uint64_t sub_22E5A2ECC(uint64_t a1, int a2, int a3, int a4)
{
  int v4;
  int v5;
  BOOL v6;
  int v7;
  int v8;
  char v9;
  int v10;
  char v11;

  if (a2 == 33)
    v4 = 45;
  else
    v4 = a2;
  if (a3 == 6)
    v5 = 0x20000000;
  else
    v5 = 0;
  v6 = a3 != 7 && a3 != 6;
  if (a3 == 7)
    v7 = 0x40000000;
  else
    v7 = v5;
  if (a3 == 8)
    v8 = v4;
  else
    v8 = a2;
  v9 = a3 == 8 || v6;
  if (a3 == 8)
    v10 = 0;
  else
    v10 = v7;
  switch(a4)
  {
    case 6:
      v10 = 0x20000000;
      return v10 | v8;
    case 8:
      if (v8 == 33)
        v8 = 45;
      break;
    case 7:
LABEL_25:
      v10 = 0x40000000;
      return v10 | v8;
  }
  v11 = v9 ^ 1;
  if (*(_DWORD *)(a1 + 72) < 0x32u)
    v11 = 1;
  if ((v11 & 1) == 0)
  {
    if ((v8 - 33) <= 0x3B && ((1 << (v8 - 33)) & 0xC00000300001003) != 0)
    {
      v10 = 0;
      return v10 | v8;
    }
    goto LABEL_25;
  }
  return v10 | v8;
}

llvm::Value *sub_22E5A2F8C(llvm::Value *result, uint64_t a2, uint64_t a3, uint64_t a4, llvm::Value *a5, int a6, int a7, int a8, unsigned int *a9)
{
  uint64_t v16;
  uint64_t v17;
  llvm::LLVMContext *v18;
  _OWORD *v19;
  uint64_t v20;
  _OWORD *v21;
  uint64_t v22;
  _OWORD *v23;
  uint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  _BYTE v27[32];
  __int16 v28;
  _QWORD v29[6];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)result + 40))
  {
    v16 = (uint64_t)result;
    v17 = *((_QWORD *)a9 + 25);
    if (!v17)
    {
      llvm::Type::getIntNTy(*((llvm::Type **)result + 42), (llvm::LLVMContext *)*a9);
      v17 = llvm::ConstantInt::get();
    }
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v29[0] = a2;
    v29[1] = a3;
    sub_22E5A2ECC(*(_QWORD *)(*(_QWORD *)(v16 + 144) + 152), a6, a7, a8);
    llvm::Type::getInt32Ty(*(llvm::Type **)(v16 + 336), v18);
    v29[2] = llvm::ConstantInt::get();
    v19 = a9 + 2;
    if ((a9[8] & 3) != 0)
      v20 = sub_22F28ABCC(v19, (_QWORD *)v16);
    else
      v20 = *(_QWORD *)v19;
    v29[3] = v20;
    v21 = a9 + 14;
    if ((a9[20] & 3) != 0)
      v22 = sub_22F28ABCC(v21, (_QWORD *)v16);
    else
      v22 = *(_QWORD *)v21;
    v29[4] = v22;
    v23 = a9 + 26;
    if ((a9[32] & 3) != 0)
      v24 = sub_22F28ABCC(v23, (_QWORD *)v16);
    else
      v24 = *(_QWORD *)v23;
    v29[5] = v24;
    v25 = a9 + 38;
    if ((a9[44] & 3) != 0)
      v26 = sub_22F28ABCC(v25, (_QWORD *)v16);
    else
      v26 = *(_QWORD *)v25;
    v30 = v26;
    llvm::Type::getIntNTy(*(llvm::Type **)(v16 + 336), (llvm::LLVMContext *)*a9);
    v31 = llvm::ConstantInt::get();
    v32 = v17;
    v28 = 257;
    return sub_22E479C7C(v16, a4, a5, (uint64_t)v29, 9, (uint64_t)v27);
  }
  return result;
}

BOOL sub_22E5A3158(uint64_t a1, unsigned int a2, int a3, int a4, uint64_t a5, uint64_t a6, int a7, char a8)
{
  unsigned int v10;
  int *v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int *v19;
  int v20;
  int v21;
  unsigned int v22;
  int Key;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  int *v28;
  int v29;
  int v30;
  unsigned int v31;

  if (a2)
  {
    v10 = a2 - 1;
    v11 = (int *)(a1 + 32 * ((37 * a3) & (a2 - 1)));
    v12 = *v11;
    if (*v11 == a3)
      goto LABEL_8;
    v13 = 1;
    LODWORD(v14) = (37 * a3) & v10;
    while (v12 != -1)
    {
      v15 = v14 + v13++;
      v14 = v15 & v10;
      v12 = *(_DWORD *)(a1 + 32 * v14);
      if (v12 == a3)
      {
        v11 = (int *)(a1 + 32 * v14);
        goto LABEL_8;
      }
    }
  }
  v11 = (int *)(a1 + 32 * a2);
LABEL_8:
  if ((int *)(a1 + 32 * a2) == v11)
    return 0;
  v16 = *((_QWORD *)v11 + 1);
  v17 = v11[6];
  if (!v17)
    goto LABEL_15;
  v18 = (v17 - 1) & (37 * a4);
  v19 = (int *)(v16 + 40 * v18);
  v20 = *v19;
  if (*v19 != a4)
  {
    v21 = 1;
    while (v20 != -1)
    {
      v22 = v18 + v21++;
      v18 = v22 & (v17 - 1);
      v19 = (int *)(v16 + 40 * v18);
      v20 = *v19;
      if (*v19 == a4)
        goto LABEL_16;
    }
LABEL_15:
    v19 = (int *)(v16 + 40 * v17);
  }
LABEL_16:
  if (v19 == (int *)(v16 + 40 * v17))
    return 0;
  Key = llvm::StringMapImpl::FindKey();
  if (Key == -1 || Key == (unint64_t)v19[4])
    return 0;
  v24 = *(_QWORD *)(*((_QWORD *)v19 + 1) + 8 * Key);
  v25 = *(_QWORD *)(v24 + 8);
  v26 = *(_DWORD *)(v24 + 24);
  if (!v26)
    goto LABEL_25;
  v27 = (v26 - 1) & (37 * a7);
  v28 = (int *)(v25 + 56 * v27);
  v29 = *v28;
  if (*v28 != a7)
  {
    v30 = 1;
    while (v29 != -1)
    {
      v31 = v27 + v30++;
      v27 = v31 & (v26 - 1);
      v28 = (int *)(v25 + 56 * v27);
      v29 = *v28;
      if (*v28 == a7)
        return v28 != (int *)(v25 + 56 * v26) && ((a8 & 1) != 0 || !*((_QWORD *)v28 + 3) && !*((_QWORD *)v28 + 6));
    }
LABEL_25:
    v28 = (int *)(v25 + 56 * v26);
  }
  return v28 != (int *)(v25 + 56 * v26) && ((a8 & 1) != 0 || !*((_QWORD *)v28 + 3) && !*((_QWORD *)v28 + 6));
}

void sub_22E5A3328(uint64_t a1, int a2, llvm::Value *this)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  llvm::Type *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t NullValue;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  std::string __p;
  std::string v23;
  uint64_t v24[7];
  void **v25;
  _QWORD v26[5];
  uint64_t v27;
  void *v28;
  uint64_t v29;
  _BYTE v30[128];
  _QWORD v31[3];
  char v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _QWORD v36[3];
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  llvm::Value::getName(this);
  llvm::ConstantDataArray::getString();
  v33 = xmmword_24FA65A50;
  v34 = *(_OWORD *)&off_24FA65A60;
  sub_22F27BE70(&v23, a1, (uint64_t)&v33, 2);
  llvm::User::operator new((llvm::User *)0x58);
  LOWORD(v35) = 260;
  *(_QWORD *)&v33 = &v23;
  v4 = llvm::GlobalVariable::GlobalVariable();
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(v4 + 32) & 0xFFFFFF3F | 0x80;
  v26[0] = llvm::ConstantExpr::getPointerBitCastOrAddrSpaceCast();
  v26[1] = llvm::ConstantExpr::getPointerBitCastOrAddrSpaceCast();
  v26[2] = llvm::ConstantInt::get();
  v26[3] = llvm::ConstantInt::get();
  v26[4] = llvm::ConstantInt::get();
  v33 = xmmword_24FA65A70;
  v34 = *(_OWORD *)&off_24FA65A80;
  v35 = xmmword_24FA65A90;
  sub_22F27BE70(&__p, a1, (uint64_t)&v33, 3);
  v5 = *(_QWORD *)(a1 + 8);
  v21 = sub_22F27F534(a1);
  v6 = sub_22F10C2A4(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0));
  v7 = (uint64_t *)sub_22E66DD94(v5 + 280, v6);
  v27 = v5;
  v28 = v30;
  v29 = 0x1000000000;
  memset(v31, 0, sizeof(v31));
  v8 = *v7;
  v24[0] = (uint64_t)&v27;
  memset(&v24[1], 0, 27);
  v32 = 1;
  v24[5] = 0;
  v24[6] = v8;
  if (v8)
    BYTE2(v24[4]) = (*(_DWORD *)(v8 + 8) & 0x200) != 0;
  *(_QWORD *)&v33 = v5;
  *((_QWORD *)&v33 + 1) = (char *)&v34 + 8;
  *(_QWORD *)&v34 = 0x1000000000;
  memset(v36, 0, sizeof(v36));
  v37 = 0;
  v9 = sub_22EFC3B90(v6);
  if (v9)
  {
    v10 = v9;
    v11 = 0;
    v12 = v26;
LABEL_5:
    v14 = sub_22E4EC264((uint64_t)v7, v10);
    v15 = v14 - v11;
    if (v14 <= v11)
    {
      v19 = v29;
    }
    else
    {
      v16 = 8 * v11;
      do
      {
        NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)(*(_QWORD *)(v8 + 16) + v16), v13);
        v18 = v29;
        if (v29 >= (unint64_t)HIDWORD(v29))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v18 = v29;
        }
        *((_QWORD *)v28 + v18) = NullValue;
        v19 = v29 + 1;
        LODWORD(v29) = v29 + 1;
        v16 += 8;
        --v15;
      }
      while (v15);
    }
    v20 = *v12;
    if (v19 >= HIDWORD(v29))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v19 = v29;
    }
    v11 = v14 + 1;
    *((_QWORD *)v28 + v19) = v20;
    LODWORD(v29) = v29 + 1;
    ++v12;
    while (1)
    {
      v10 = *(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v10)
        break;
      if ((*(_DWORD *)(v10 + 28) & 0x7Fu) - 49 < 3)
        goto LABEL_5;
    }
  }
  v25 = (void **)v36;
  sub_22E3CEB30(&v25);
  if (*((__int128 **)&v33 + 1) != (__int128 *)((char *)&v34 + 8))
    free(*((void **)&v33 + 1));
  sub_22EF5D1B0(*(_QWORD *)(v5 + 144), v21);
  sub_22E670C54(v24, v8);
  sub_22F29F614((uint64_t)&v27);
  *(_QWORD *)&v33 = v31;
  sub_22E3CEB30((void ***)&v33);
  if (v28 != v30)
    free(v28);
  llvm::GlobalObject::setSection();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
}

void sub_22E5A3780(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  char *v5;
  unsigned int v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t **i;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  int v40;
  unsigned int v41;
  char *v42;
  uint64_t **v43;
  unsigned int *v44;
  unsigned int v45;
  uint64_t *v46;
  BOOL v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int *v51;
  unsigned int v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  int v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  size_t v69;
  char *v70;
  char *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  BOOL v76;
  BOOL v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t (**v86)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int *v91;
  unsigned int *v92;
  uint64_t v93;
  uint64_t inserted;
  uint64_t v95;
  unsigned int *v96;
  unsigned int *v97;
  unsigned int *v98;
  uint64_t *v99;
  _QWORD v100[3];
  __int16 v101;
  uint64_t (*v102)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t *v103;
  uint64_t v104;
  __int16 v105;
  uint64_t v106;
  uint64_t v107;
  _OWORD v108[17];
  void *v109;
  unsigned int v110;
  int v111;
  _BYTE v112[512];
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;

  v119 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(*(_QWORD *)(v1 + 152) + 76) & 2) != 0)
    return;
  v2 = a1;
  if (!*(_DWORD *)(a1 + 2896) && !*(_DWORD *)(a1 + 2924))
    return;
  v95 = **(_QWORD **)(v1 + 200);
  v3 = *(unsigned int *)(a1 + 2880);
  v4 = v3;
  *(_OWORD *)((char *)v108 + 4) = 0uLL;
  v109 = v112;
  v111 = 16;
  if (v3 < 0x11)
  {
    if ((_DWORD)v3)
    {
      v7 = v112;
      do
      {
        *(_QWORD *)v7 = 0;
        *((_DWORD *)v7 + 2) = 0;
        *(_OWORD *)(v7 + 12) = v108[0];
        *((_DWORD *)v7 + 7) = v108[1];
        v7 += 32;
        --v3;
      }
      while (v3);
      v6 = v4;
    }
    else
    {
      v6 = 0;
    }
  }
  else
  {
    v110 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = (char *)v109;
    do
    {
      *(_QWORD *)v5 = 0;
      *((_DWORD *)v5 + 2) = 0;
      *(_OWORD *)(v5 + 12) = v108[0];
      *((_DWORD *)v5 + 7) = v108[1];
      v5 += 32;
      --v3;
    }
    while (v3);
    v6 = *(_DWORD *)(v2 + 2880);
  }
  v110 = v4;
  *(_QWORD *)&v108[0] = &v108[1];
  *((_QWORD *)&v108[0] + 1) = 0x1000000000;
  sub_22E5C5180((uint64_t)v108, v6, 0, 0);
  v106 = v95;
  v107 = v2;
  inserted = llvm::Module::getOrInsertNamedMetadata();
  v8 = *(_QWORD *)(v2 + 2888);
  v9 = *(unsigned int *)(v2 + 2904);
  v91 = (unsigned int *)(v8 + 32 * v9);
  if (*(_DWORD *)(v2 + 2896))
  {
    if ((_DWORD)v9)
    {
      v11 = 32 * v9;
      v10 = *(unsigned int **)(v2 + 2888);
      while (*v10 >= 0xFFFFFFFE)
      {
        v10 += 8;
        v11 -= 32;
        if (!v11)
        {
          v10 = (unsigned int *)(v8 + 32 * v9);
          break;
        }
      }
    }
    else
    {
      v10 = *(unsigned int **)(v2 + 2888);
    }
  }
  else
  {
    v10 = (unsigned int *)(v8 + 32 * v9);
  }
  v12 = (unsigned int *)(v8 + 32 * v9);
  v90 = v12;
  while (v10 != v12)
  {
    v13 = *((_QWORD *)v10 + 1);
    v14 = v10[6];
    if (v10[4])
    {
      if (v10[6])
      {
        v15 = 40 * v14;
        v16 = (unsigned int *)*((_QWORD *)v10 + 1);
        while (*v16 >= 0xFFFFFFFE)
        {
          v16 += 10;
          v15 -= 40;
          if (!v15)
            goto LABEL_29;
        }
      }
      else
      {
        v16 = (unsigned int *)*((_QWORD *)v10 + 1);
      }
    }
    else
    {
LABEL_29:
      v16 = (unsigned int *)(v13 + 40 * v14);
    }
    v92 = (unsigned int *)(v13 + 40 * v14);
    v96 = v10;
    while (v16 != v92)
    {
      v17 = v16[4];
      if ((_DWORD)v17)
      {
        for (i = (uint64_t **)*((_QWORD *)v16 + 1); !*i || *i + 1 == 0; ++i)
          ;
      }
      else
      {
        i = (uint64_t **)*((_QWORD *)v16 + 1);
      }
      v93 = *((_QWORD *)v16 + 1) + 8 * v17;
      if (i != (uint64_t **)v93)
      {
        v20 = *i;
        v97 = v16;
        do
        {
          v21 = v20[1];
          v22 = *((unsigned int *)v20 + 6);
          v23 = (unsigned int *)(v21 + 56 * v22);
          if (*((_DWORD *)v20 + 4))
          {
            if (*((_DWORD *)v20 + 6))
            {
              v24 = 56 * v22;
              v25 = (unsigned int *)v20[1];
              while (*v25 >= 0xFFFFFFFE)
              {
                v25 += 14;
                v24 -= 56;
                if (!v24)
                  goto LABEL_48;
              }
            }
            else
            {
              v25 = (unsigned int *)v20[1];
            }
          }
          else
          {
LABEL_48:
            v25 = (unsigned int *)(v21 + 56 * v22);
          }
          v98 = (unsigned int *)(v21 + 56 * v22);
          if (v25 != v98)
          {
            v99 = v20 + 4;
            do
            {
              v26 = *v10;
              v27 = *v16;
              v28 = (uint64_t *)*v20;
              v29 = *v25;
              llvm::ConstantInt::get();
              v113 = llvm::ValueAsMetadata::get();
              llvm::ConstantInt::get();
              v114 = llvm::ValueAsMetadata::get();
              llvm::ConstantInt::get();
              v115 = (uint64_t *)llvm::ValueAsMetadata::get();
              v116 = (_QWORD *)llvm::MDString::get();
              llvm::ConstantInt::get();
              v117 = llvm::ValueAsMetadata::get();
              llvm::ConstantInt::get();
              v118 = llvm::ValueAsMetadata::get();
              v30 = v2;
              v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 144) + 1992);
              v32 = *(_QWORD *)(v31 + 120);
              v33 = *(unsigned int *)(v31 + 136);
              v34 = (uint64_t *)(v32 + 16 * v33);
              if (*(_DWORD *)(v31 + 128))
              {
                if (*(_DWORD *)(v31 + 136))
                {
                  v35 = 16 * v33;
                  v36 = *(uint64_t **)(v31 + 120);
                  while ((*v36 | 0x1000) == 0xFFFFFFFFFFFFF000)
                  {
                    v36 += 2;
                    v35 -= 16;
                    if (!v35)
                      goto LABEL_57;
                  }
                }
                else
                {
                  v36 = *(uint64_t **)(v31 + 120);
                }
              }
              else
              {
LABEL_57:
                v36 = (uint64_t *)(v32 + 16 * v33);
              }
              v37 = (uint64_t *)(v32 + 16 * v33);
              while (1)
              {
LABEL_60:
                if (v36 == v37)
                {
                  v40 = 0;
                  goto LABEL_70;
                }
                v38 = *v36;
                if (*(_QWORD *)(*v36 + 48) == v26 && *(_QWORD *)(v38 + 56) == v27)
                  break;
                v39 = v36 + 2;
                v36 = v34;
                if (v39 != v34)
                {
                  v36 = v39;
                  while ((*v36 | 0x1000) == 0xFFFFFFFFFFFFF000)
                  {
                    v36 += 2;
                    if (v36 == v34)
                    {
                      v36 = v34;
                      goto LABEL_60;
                    }
                  }
                }
              }
              v41 = sub_22F1E1A48(v31, v38);
              v40 = sub_22F1E38E8((uint64_t *)v31, v41, v29, 1);
LABEL_70:
              v42 = (char *)v109 + 32 * v25[9];
              *(_QWORD *)v42 = v25 + 2;
              *((_DWORD *)v42 + 2) = v40;
              *((_QWORD *)v42 + 2) = v99;
              *((_QWORD *)v42 + 3) = v28;
              v43 = (uint64_t **)(*(_QWORD *)&v108[0] + 16 * v25[9]);
              *v43 = v99;
              v43[1] = v28;
              llvm::MDTuple::getImpl();
              llvm::NamedMDNode::addOperand();
              v44 = v25 + 14;
              v2 = v30;
              v10 = v96;
              v16 = v97;
              while (v44 != v23)
              {
                v45 = *v44;
                v44 += 14;
                if (v45 <= 0xFFFFFFFD)
                {
                  v25 = v44 - 14;
                  goto LABEL_75;
                }
              }
              v25 = v23;
LABEL_75:
              ;
            }
            while (v25 != v98);
          }
          do
          {
            v46 = i[1];
            ++i;
            v20 = v46;
            if (v46)
              v47 = v20 + 1 == 0;
            else
              v47 = 1;
          }
          while (v47);
        }
        while (i != (uint64_t **)v93);
      }
      v48 = v16 + 10;
      while (v48 != v92)
      {
        v49 = *v48;
        v48 += 10;
        if (v49 <= 0xFFFFFFFD)
        {
          v16 = v48 - 10;
          goto LABEL_86;
        }
      }
      v16 = v92;
LABEL_86:
      ;
    }
    v50 = v10 + 8;
    v51 = v91;
    while (v50 != v51)
    {
      v52 = *v50;
      v50 += 8;
      v51 = v91;
      if (v52 <= 0xFFFFFFFD)
      {
        v10 = v50 - 8;
        goto LABEL_92;
      }
    }
    v10 = v51;
LABEL_92:
    v12 = v90;
  }
  v113 = v95;
  v114 = (uint64_t)&v109;
  v115 = &v107;
  v116 = &v106;
  v117 = inserted;
  v102 = sub_22E5C5234;
  v103 = &v113;
  sub_22F27F4B4(*(_QWORD *)(v2 + 2912), *(_DWORD *)(v2 + 2920), (uint64_t)&v102);
  if (v110)
  {
    v53 = (char *)v109;
    v54 = (char *)v109 + 32 * v110;
    v55 = "Offloading entry for declare target variable %0 is incorrect: the address is invalid.";
    v56 = "Offloading entry for declare target variable is incorrect: the address is invalid.";
    do
    {
      v57 = *(_QWORD *)v53;
      v58 = *(_DWORD *)(*(_QWORD *)v53 + 32);
      if (*(_QWORD *)v53)
        v59 = v58 == 0;
      else
        v59 = 0;
      if (v59)
      {
        v65 = *(_QWORD *)(v57 + 40);
        if (v65 && (v66 = *(_QWORD *)(v57 + 16)) != 0)
        {
          (**(void (***)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))v2)(v2, v65, v66, 0, *(unsigned int *)(v57 + 24), 4);
        }
        else
        {
          v67 = *(_QWORD *)&v108[0] + 16 * *(unsigned int *)(v57 + 28);
          v68 = *(void **)v67;
          v69 = *(_QWORD *)(v67 + 8);
          if (llvm::Module::getNamedValue())
          {
            v70 = v56;
            v71 = v55;
            v72 = sub_22F41A810(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 208) + 32), 4, "Offloading entry for target region in %0 is incorrect: either the address or the ID is invalid.", 0x5FuLL);
            v73 = v2;
            v74 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 208);
            *(_DWORD *)(v74 + 312) = *((_DWORD *)v53 + 2);
            *(_DWORD *)(v74 + 316) = v72;
            if (*(char *)(v74 + 311) < 0)
            {
              **(_BYTE **)(v74 + 288) = 0;
              *(_QWORD *)(v74 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v74 + 288) = 0;
              *(_BYTE *)(v74 + 311) = 0;
            }
            v102 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(v74 + 320);
            v103 = 0;
            v104 = v74;
            v105 = 1;
            *(_BYTE *)(v74 + 320) = 0;
            *(_DWORD *)(v74 + 664) = 0;
            v80 = *(unsigned int *)(v74 + 776);
            if ((_DWORD)v80)
            {
              v81 = *(_QWORD *)(v74 + 768);
              v82 = 56 * v80;
              do
              {
                if (*(char *)(v81 + v82 - 9) < 0)
                  operator delete(*(void **)(v81 + v82 - 32));
                v82 -= 56;
              }
              while (v82);
            }
            *(_DWORD *)(v74 + 776) = 0;
            sub_22E3B89A8((unsigned __int8 **)&v102, v68, v69);
            sub_22E3BB0B8((uint64_t)&v102);
            v2 = v73;
            v55 = v71;
            v56 = v70;
          }
        }
        goto LABEL_129;
      }
      if (v58 != 1)
        v57 = 0;
      v60 = *(unsigned int *)(v57 + 24);
      if ((_DWORD)v60)
      {
        if ((_DWORD)v60 != 1)
        {
          v62 = *(_QWORD *)(v57 + 16);
LABEL_119:
          if (v62)
            v76 = *(unsigned __int8 *)(v62 + 16) > 3u;
          else
            v76 = 1;
          if (v76
            || ((*(_DWORD *)(v62 + 32) & 0x30) != 0x10 ? (v77 = (*(_DWORD *)(v62 + 32) & 0xFu) - 7 >= 2) : (v77 = 0), v77))
          {
            (**(void (***)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))v2)(v2, v62, v62, *(_QWORD *)(v57 + 40), v60, *(unsigned int *)(v57 + 48));
          }
          goto LABEL_129;
        }
        v61 = *(_QWORD *)(v2 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v61 + 152) + 76) & 8) == 0)
        {
          v62 = *(_QWORD *)(v57 + 16);
          if (v62)
            goto LABEL_119;
          v63 = sub_22F41A810(*(_QWORD *)(*(_QWORD *)(v61 + 208) + 32), 4, v56, 0x52uLL);
          v64 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 208);
          *(_DWORD *)(v64 + 312) = 0;
          *(_DWORD *)(v64 + 316) = v63;
          if (*(char *)(v64 + 311) < 0)
          {
            **(_BYTE **)(v64 + 288) = 0;
            *(_QWORD *)(v64 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v64 + 288) = 0;
            *(_BYTE *)(v64 + 311) = 0;
          }
          v100[0] = v64 + 320;
          v100[1] = 0;
          v100[2] = v64;
          v101 = 1;
          *(_BYTE *)(v64 + 320) = 0;
          *(_DWORD *)(v64 + 664) = 0;
          v87 = *(unsigned int *)(v64 + 776);
          if ((_DWORD)v87)
          {
            v88 = *(_QWORD *)(v64 + 768);
            v89 = 56 * v87;
            do
            {
              if (*(char *)(v88 + v89 - 9) < 0)
                operator delete(*(void **)(v88 + v89 - 32));
              v89 -= 56;
            }
            while (v89);
          }
          *(_DWORD *)(v64 + 776) = 0;
          v86 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))v100;
          goto LABEL_154;
        }
      }
      else
      {
        v75 = *(_QWORD **)(v2 + 8);
        if ((*(_BYTE *)(v75[19] + 76) & 8) != 0 && *(_BYTE *)(v75[101] + 4248))
          goto LABEL_129;
        v62 = *(_QWORD *)(v57 + 16);
        if (!v62)
        {
          v78 = sub_22F41A810(*(_QWORD *)(v75[26] + 32), 4, v55, 0x55uLL);
          v79 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 208);
          *(_DWORD *)(v79 + 312) = *((_DWORD *)v53 + 2);
          *(_DWORD *)(v79 + 316) = v78;
          if (*(char *)(v79 + 311) < 0)
          {
            **(_BYTE **)(v79 + 288) = 0;
            *(_QWORD *)(v79 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v79 + 288) = 0;
            *(_BYTE *)(v79 + 311) = 0;
          }
          v102 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(v79 + 320);
          v103 = 0;
          v104 = v79;
          v105 = 1;
          *(_BYTE *)(v79 + 320) = 0;
          *(_DWORD *)(v79 + 664) = 0;
          v83 = *(unsigned int *)(v79 + 776);
          if ((_DWORD)v83)
          {
            v84 = *(_QWORD *)(v79 + 768);
            v85 = 56 * v83;
            do
            {
              if (*(char *)(v84 + v85 - 9) < 0)
                operator delete(*(void **)(v84 + v85 - 32));
              v85 -= 56;
            }
            while (v85);
          }
          *(_DWORD *)(v79 + 776) = 0;
          sub_22E3B89A8((unsigned __int8 **)&v102, *((void **)v53 + 2), *((_QWORD *)v53 + 3));
          v86 = &v102;
LABEL_154:
          sub_22E3BB0B8((uint64_t)v86);
          goto LABEL_129;
        }
        if (*(_QWORD *)(v57 + 40))
          goto LABEL_119;
      }
LABEL_129:
      v53 += 32;
    }
    while (v53 != v54);
  }
  if (*(_OWORD **)&v108[0] != &v108[1])
    free(*(void **)&v108[0]);
  if (v109 != v112)
    free(v109);
}

uint64_t sub_22E5A4124(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = (unint64_t)sub_22EF579A8(a1, a3, 0);
  v7 = sub_22EFC7430(80, a1, a2, 0);
  v8 = sub_22EA41AB8(v7, 49, a2, 0);
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = a3;
  *(_QWORD *)(v8 + 56) = v6 & 0xFFFFFFFFFFFFFFFBLL;
  *(_QWORD *)v8 = &off_24FAC2F90;
  *(_QWORD *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 72) = 0;
  *(_DWORD *)(v8 + 28) &= 0xFFFF9FFF;
  sub_22EFCCFA0(a2, v7);
  return v7;
}

void sub_22E5A41C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  _OWORD *v10;
  unint64_t v11;
  llvm::Function *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  void *v60;
  unint64_t v61;
  _QWORD *v62;
  const std::nothrow_t *v63;
  unint64_t v64;
  uint64_t *v65;
  BOOL v66;
  uint64_t *v67;
  _QWORD *v68;
  int v69;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  unsigned int v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t **v90;
  uint64_t *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  unint64_t v99;
  llvm::LLVMContext *v100;
  llvm::PointerType *v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  __int128 *v108;
  unint64_t v109;
  unsigned int v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  llvm::Value *v128;
  int8x16_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unsigned int v136;
  double v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  unsigned int v149;
  unsigned int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  llvm::Value *v155;
  int8x16_t v156;
  int v157;
  uint64_t v158;
  __int128 v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  __int128 v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  llvm::PointerType *v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unsigned int v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unsigned int v196;
  unsigned int v197;
  unsigned int v198;
  unsigned int v199;
  unsigned int v200;
  uint64_t v201;
  uint64_t v202;
  llvm::LLVMContext *v203;
  uint64_t v204;
  llvm::LLVMContext *v205;
  char *v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  int v211;
  unsigned int *v212;
  _DWORD *v213;
  uint64_t v214;
  unsigned int v215;
  uint64_t v216;
  uint64_t Select;
  llvm::LLVMContext *v218;
  llvm::LLVMContext *v219;
  uint64_t v220;
  uint64_t *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unsigned __int8 *v231;
  unsigned int *v232;
  uint64_t v233;
  _DWORD *v234;
  uint64_t v235;
  unsigned int v236;
  uint64_t v237;
  uint64_t v238;
  _DWORD *v239;
  uint64_t *v240;
  uint64_t v241;
  unint64_t v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t *v247;
  uint64_t v248;
  unint64_t v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  _QWORD *v255;
  unint64_t v256;
  uint64_t v257;
  int v258;
  unint64_t v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  int v263;
  uint64_t RuntimeFunction;
  llvm::Value *v265;
  llvm::Value *v266;
  void *v267;
  uint64_t v268;
  llvm::Value *v269;
  unsigned int *v270;
  unsigned int *v271;
  uint64_t v272;
  uint64_t v273;
  unsigned int *v274;
  uint64_t v275;
  unsigned __int8 *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  llvm::Value *v282;
  llvm::Value *v283;
  unint64_t v284;
  unint64_t v285;
  int v286;
  llvm::Value *v287;
  uint64_t v288;
  unsigned int *v289;
  unsigned int v290;
  unsigned int *v291;
  uint64_t v292;
  unsigned int *v293;
  uint64_t v294;
  unint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t v298;
  void *v299;
  void *v300;
  uint64_t v301;
  unsigned int v302;
  int v303;
  char *v304;
  unsigned int v305;
  char *v306;
  uint64_t v307;
  int v308;
  uint64_t v309;
  _BYTE *v310;
  unint64_t v311;
  uint64_t v312;
  unint64_t v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unint64_t v318;
  unint64_t v319;
  unint64_t v320;
  unint64_t v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  uint64_t v326;
  unint64_t v327;
  llvm::Value *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  unsigned int v332;
  llvm::Value *v333;
  unint64_t v334;
  uint64_t v335;
  __int128 v336;
  uint64_t v337;
  uint64_t *v338;
  uint64_t v339;
  unsigned int v340;
  unsigned int v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  llvm::Value *v346;
  int8x16_t v347;
  int v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  unint64_t v354;
  unint64_t v355;
  int v356;
  int v357;
  unint64_t v358;
  uint64_t v359;
  uint64_t v360;
  llvm::Instruction *v361;
  int v362;
  uint64_t v363;
  uint64_t v364;
  unsigned __int8 *v365;
  unsigned __int8 *v366;
  uint64_t v367;
  unsigned __int8 *v368;
  uint64_t v369;
  unsigned __int8 *v370;
  uint64_t v371;
  unsigned __int8 *v372;
  llvm::Value *v373;
  uint64_t v374;
  uint64_t v375;
  unsigned int *v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  _QWORD *v380;
  unint64_t v381;
  unint64_t v382;
  unint64_t v383;
  uint64_t v384;
  uint64_t v385;
  unint64_t v386;
  unint64_t v387;
  uint64_t v388;
  unsigned int v389;
  unint64_t v390;
  _QWORD *v391;
  unint64_t v392;
  unint64_t v393;
  uint64_t v394;
  uint64_t v395;
  unint64_t v396;
  unint64_t v397;
  uint64_t v398;
  uint64_t v399;
  llvm::Instruction *v400;
  _DWORD *v401;
  uint64_t v402;
  uint64_t v403;
  unint64_t v404;
  unint64_t v405;
  unint64_t v406;
  int v407;
  uint64_t v408;
  __int128 v409;
  __int128 v410;
  uint64_t v411;
  uint64_t v412;
  __n128 v413;
  unsigned int *v414;
  uint64_t *v415;
  uint64_t v416;
  unsigned int v417;
  uint64_t v418;
  uint64_t *v419;
  uint64_t v420;
  uint64_t v421;
  unint64_t v422;
  unsigned int v423;
  unsigned int v424;
  unsigned int v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  llvm::Value *v430;
  int8x16_t v431;
  int v432;
  uint64_t v433;
  __int128 v434;
  uint64_t v435;
  uint64_t v436;
  unint64_t v437;
  unint64_t v438;
  unint64_t v439;
  int v440;
  uint64_t v441;
  unint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  unint64_t v446;
  uint64_t *v447;
  unsigned int v448;
  int v449;
  uint64_t v450;
  unsigned __int8 **v451;
  uint64_t v452;
  unsigned __int8 **v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  unint64_t v459;
  uint64_t v460;
  uint64_t v461;
  unint64_t v462;
  uint64_t *v463;
  uint64_t v464;
  unsigned int *v465;
  uint64_t *v466;
  uint64_t v467;
  unsigned int v468;
  uint64_t v469;
  uint64_t *v470;
  uint64_t *v471;
  uint64_t v472;
  unsigned __int8 **v473;
  unsigned __int8 *v474;
  unsigned __int8 *v475;
  uint64_t v476;
  __n128 v477;
  __n128 v478;
  uint64_t v479;
  unsigned __int8 *v480;
  uint64_t v481;
  unsigned int v482;
  uint64_t *v483;
  uint64_t v484;
  uint64_t v485;
  unint64_t v486;
  uint64_t v487;
  uint64_t v488;
  unint64_t v489;
  uint64_t v490;
  llvm::Instruction *v491;
  uint64_t *v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  llvm::Value *v500;
  uint64_t v501;
  int v502;
  uint64_t v503;
  uint64_t v504;
  unint64_t v505;
  unint64_t v506;
  uint64_t v507;
  unint64_t v508;
  uint64_t v509;
  uint64_t v510;
  void *v511;
  void *v512;
  uint64_t v513;
  uint64_t v514;
  llvm::ConstantPointerNull *v515;
  __int128 v516;
  uint64_t v517;
  uint64_t v518;
  unsigned __int8 **v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  int v524;
  int v525;
  uint64_t v526;
  unsigned int v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  llvm::ConstantPointerNull *v534;
  int v535;
  llvm::ConstantPointerNull *v536;
  unsigned int v537;
  unint64_t v538;
  int v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t *v543;
  uint64_t *v544;
  _OWORD *v545;
  uint64_t v546;
  uint64_t *v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  unsigned int v551;
  llvm::Instruction *v552;
  int v553;
  uint64_t v554;
  int v555;
  int v556;
  uint64_t v557;
  _QWORD *v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  unint64_t v565;
  llvm::Function *v566;
  llvm::Function *v567;
  uint64_t v568;
  unint64_t v569;
  uint64_t *v570;
  uint64_t v571;
  unint64_t v572;
  unint64_t v573;
  uint64_t v574;
  unint64_t v575;
  _QWORD *v576;
  uint64_t v577;
  uint64_t v578;
  unint64_t v579;
  uint64_t v580;
  unint64_t v581;
  uint64_t *v582;
  uint64_t v583;
  unint64_t v584;
  uint64_t v585;
  _OWORD v586[8];
  uint64_t v587;
  _OWORD v588[8];
  uint64_t v589;
  _OWORD v590[8];
  uint64_t v591;
  _OWORD v592[8];
  uint64_t v593;
  _OWORD v594[8];
  uint64_t v595;
  _OWORD v596[8];
  uint64_t v597;
  __int128 v598[8];
  uint64_t v599;
  _QWORD v600[3];
  int v601;
  uint64_t v602;
  uint64_t v603;
  __int128 v604[8];
  uint64_t v605;
  __int128 v606[8];
  uint64_t v607;
  _OWORD v608[8];
  uint64_t v609;
  _BYTE v610[136];
  _OWORD v611[8];
  uint64_t v612;
  _QWORD v613[4];
  unsigned int v614;
  unsigned int v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  int v620;
  int v621;
  int v622;
  int v623;
  unsigned int v624;
  int v625;
  llvm::ConstantPointerNull *v626;
  llvm::ConstantPointerNull *v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  _OWORD v631[8];
  uint64_t v632;
  _OWORD v633[8];
  uint64_t v634;
  _OWORD v635[8];
  uint64_t v636;
  _OWORD v637[8];
  uint64_t v638;
  _OWORD v639[3];
  _OWORD v640[3];
  _QWORD v641[4];
  unsigned int v642;
  unsigned int v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  int v648;
  int v649;
  int v650;
  int v651;
  unsigned int v652;
  int v653;
  llvm::ConstantPointerNull *v654;
  llvm::ConstantPointerNull *v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  _QWORD v659[9];
  int v660;
  int v661;
  int v662;
  unint64_t v663;
  int v664;
  llvm::ConstantPointerNull *v665;
  llvm::ConstantPointerNull *v666;
  __int128 v667;
  uint64_t v668;
  _OWORD v669[8];
  uint64_t v670;
  _OWORD v671[8];
  uint64_t v672;
  _OWORD v673[8];
  uint64_t v674;
  _OWORD v675[8];
  uint64_t v676;
  _OWORD v677[3];
  _OWORD v678[3];
  _OWORD v679[3];
  _BYTE v680[7];
  __int128 v681;
  __int128 v682;
  _OWORD v683[8];
  uint64_t v684;
  _OWORD v685[8];
  uint64_t v686;
  _OWORD v687[8];
  uint64_t v688;
  __int128 v689;
  __int128 v690;
  __int128 v691;
  __int128 v692;
  __int128 v693;
  __int128 v694;
  __int128 v695;
  __int128 v696;
  uint64_t v697;
  _OWORD v698[8];
  uint64_t v699;
  _OWORD v700[8];
  uint64_t v701;
  __int128 v702;
  __int128 v703;
  __int128 v704;
  __int128 v705;
  __int128 v706;
  __int128 v707;
  __int128 v708;
  __int128 v709;
  uint64_t v710;
  void *v711[2];
  __int128 v712;
  __int128 v713;
  __int128 v714;
  __int128 v715;
  __int128 v716;
  __int128 v717;
  __int128 v718;
  uint64_t v719;
  __int128 v720;
  __int128 v721;
  __int128 v722;
  __int128 v723;
  __int128 v724;
  __int128 v725;
  __int128 v726;
  __int128 v727;
  uint64_t v728;
  __int128 v729;
  __int128 v730;
  __int128 v731;
  __int128 v732;
  __int128 v733;
  __int128 v734;
  __int128 v735;
  __int128 v736;
  uint64_t v737;
  __int128 v738;
  __int128 v739;
  __int128 v740;
  __int128 v741;
  __int128 v742;
  __int128 v743;
  __int128 v744;
  __int128 v745;
  uint64_t v746;
  __int128 __p;
  __int128 v748;
  __int128 v749;
  __int128 v750;
  __int128 v751;
  __int128 v752;
  __int128 v753;
  __int128 v754;
  uint64_t v755;
  llvm *v756[2];
  __int128 v757;
  __int128 v758;
  __int128 v759;
  __int128 v760;
  __int128 v761;
  __int128 v762;
  __int128 v763;
  uint64_t v764;
  __int128 v765;
  __int128 v766;
  __int128 v767;
  __int128 v768;
  __int128 v769;
  __int128 v770;
  __int128 v771;
  __int128 v772;
  uint64_t v773;
  __int128 v774;
  __int128 v775;
  __int128 v776;
  __int128 v777;
  __int128 v778;
  __int128 v779;
  __int128 v780;
  __int128 v781;
  uint64_t v782;
  _OWORD v783[3];
  __int128 v784;
  __int128 v785;
  __int128 v786;
  __int128 v787;
  __int128 v788;
  __int128 v789;
  __int128 v790;
  __int128 v791;
  uint64_t v792;
  _OWORD v793[4];
  __int128 v794;
  __int128 v795;
  std::string v796;
  _QWORD v797[3];
  int v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  int v802;
  uint64_t v803;
  _QWORD *v804;
  uint64_t v805;
  int v806;
  _QWORD v807[3];
  int v808;
  uint64_t v809;
  unint64_t v810;
  uint64_t v811;
  int v812;
  uint64_t v813;
  _QWORD *v814;
  uint64_t v815;
  int v816;
  _OWORD v817[2];
  uint64_t v818;
  void *v819[2];
  __int128 v820;
  __int128 v821;
  __int128 v822;
  __int128 v823;
  __int128 v824;
  __int128 v825;
  __int128 v826;
  uint64_t v827;
  __int128 v828;
  __int128 v829;
  __int128 v830;
  __int128 v831;
  __int128 v832;
  __int128 v833;
  __int128 v834;
  __int128 v835;
  uint64_t v836;
  __int128 v837;
  __int128 v838;
  __int128 v839;
  __int128 v840;
  __int128 v841;
  __int128 v842;
  __int128 v843;
  __int128 v844;
  uint64_t v845;
  __int128 v846;
  __int128 v847;
  __int128 v848;
  __int128 v849;
  __int128 v850;
  __int128 v851;
  __int128 v852;
  __int128 v853;
  uint64_t v854;
  _BYTE v855[64];
  __int128 v856;
  __int128 v857;
  __int128 v858;
  __int128 v859;
  uint64_t v860;
  _BYTE v861[64];
  __int128 v862;
  __int128 v863;
  __int128 v864;
  __int128 v865;
  uint64_t v866;
  __int128 v867;
  __int128 v868;
  __int128 v869;
  __int128 v870;
  __int128 v871;
  __int128 v872;
  __int128 v873;
  __int128 v874;
  uint64_t v875;
  _BYTE v876[64];
  __int128 v877;
  __int128 v878;
  __int128 v879;
  __int128 v880;
  uint64_t v881;
  void *v882;
  uint64_t v883;
  _BYTE v884[160];
  void *v885[2];
  __int128 v886;
  __int128 v887;
  __int128 v888;
  __int128 v889;
  __int128 v890;
  __int128 v891;
  __int128 v892;
  uint64_t v893;
  _BYTE v894[64];
  __int128 v895;
  __int128 v896;
  __int128 v897;
  __int128 v898;
  uint64_t v899;
  __int128 v900;
  _BYTE v901[48];
  __int128 v902;
  __int128 v903;
  llvm::ConstantPointerNull *v904[2];
  __int128 v905;
  uint64_t v906;
  _QWORD *v907;
  uint64_t v908[183];
  __int128 v909;
  __int128 v910;
  __int128 v911;
  uint64_t v912[2];
  unsigned int v913;
  void *v914[2];
  __int128 v915;
  __int128 v916;
  __int128 v917;
  __int128 v918;
  __int128 v919;
  __int128 v920;
  __int128 v921;
  uint64_t v922;
  uint64_t v923;

  v9 = MEMORY[0x24BDAC7A8]();
  v545 = v10;
  v573 = v11;
  v566 = v12;
  v577 = v13;
  v560 = v14;
  v16 = v15;
  v17 = v9;
  v923 = *MEMORY[0x24BDAC8D0];
  v576 = v18;
  v19 = *(_QWORD *)(v18[1] + 144);
  v882 = v884;
  v20.n128_u64[0] = 0x400000000;
  v883 = 0x400000000;
  v21 = *(unsigned int *)(a9 + 8);
  if ((_DWORD)v21)
  {
    v22 = *(uint64_t **)a9;
    v23 = *(uint64_t **)(a9 + 48);
    v24 = 8 * v21;
    do
    {
      v26 = *v22++;
      v25 = v26;
      v27 = *(_QWORD *)(v26 + 16);
      v28 = sub_22EF5B404(v19, v27, 0);
      v29 = *v23++;
      v30 = *(_QWORD *)(v29 + 16);
      *(_QWORD *)&v900 = v25;
      *((_QWORD *)&v900 + 1) = v27;
      *(_OWORD *)v901 = v30;
      sub_22E5A96A4((uint64_t)&v882, v28, &v900);
      v24 -= 8;
    }
    while (v24);
  }
  v31 = *(unsigned int *)(a9 + 104);
  if ((_DWORD)v31)
  {
    v32 = *(uint64_t **)(a9 + 96);
    v33 = *(uint64_t **)(a9 + 192);
    v34 = 8 * v31;
    v35 = *(uint64_t **)(a9 + 144);
    do
    {
      v37 = *v32++;
      v36 = v37;
      v38 = *(_QWORD *)(v37 + 16);
      v39 = sub_22EF5B404(v19, v38, 0);
      v41 = *v35++;
      v40 = v41;
      v42 = *v33++;
      v43 = *(_QWORD *)(v40 + 16);
      v44 = *(_QWORD *)(v42 + 16);
      *(_QWORD *)&v900 = v36;
      *((_QWORD *)&v900 + 1) = v38;
      *(_QWORD *)v901 = v43;
      *(_QWORD *)&v901[8] = v44;
      sub_22E5A96A4((uint64_t)&v882, v39, &v900);
      v34 -= 8;
    }
    while (v34);
  }
  v45 = *(unsigned int *)(a9 + 248);
  if ((_DWORD)v45)
  {
    v46 = *(uint64_t **)(a9 + 240);
    v47 = *(uint64_t **)(a9 + 288);
    v48 = 8 * v45;
    do
    {
      v50 = *v46++;
      v49 = v50;
      v51 = *(_QWORD *)(v50 + 16);
      v52 = sub_22EF5B404(v19, v51, 0);
      v53 = *v47++;
      v54 = *(_QWORD *)(v53 + 16);
      *(_QWORD *)&v900 = v49;
      *((_QWORD *)&v900 + 1) = v51;
      *(_OWORD *)v901 = v54;
      sub_22E5A96A4((uint64_t)&v882, v52, &v900);
      v48 -= 8;
    }
    while (v48);
  }
  v55 = *(unsigned int *)(a9 + 536);
  if ((_DWORD)v55)
  {
    v56 = *(uint64_t **)(a9 + 528);
    v57 = 8 * v55;
    do
    {
      v58 = *v56;
      if (sub_22E5A978C(*v56))
        v59 = *(unsigned __int8 *)(v576[1] + 130);
      else
        v59 = sub_22EF5B404(v19, v58, 0);
      *(_QWORD *)&v900 = 0;
      *((_QWORD *)&v900 + 1) = v58;
      *(_OWORD *)v901 = 0uLL;
      sub_22E5A96A4((uint64_t)&v882, v59, &v900);
      ++v56;
      v57 -= 8;
    }
    while (v57);
  }
  v60 = v882;
  v61 = v883;
  v62 = (char *)v882 + 40 * v883;
  if ((_DWORD)v883)
  {
    v63 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
    v64 = v883;
    while (1)
    {
      v65 = (uint64_t *)operator new(40 * v64, v63);
      if (v65)
        break;
      v66 = v64 > 1;
      v64 >>= 1;
      if (!v66)
        goto LABEL_20;
    }
    v67 = v65;
    sub_22E5C5450((uint64_t)v60, v62, v61, v65, v64, v20);
    operator delete(v67);
  }
  else
  {
LABEL_20:
    sub_22E5C5450((uint64_t)v60, v62, v61, 0, 0, v20);
  }
  v68 = v576;
  v575 = sub_22EF60A6C(v19, 32, 1);
  sub_22F27F67C((uint64_t)v576, v575);
  v69 = *(_DWORD *)(v577 + 8);
  if ((v69 - 36) > 0x29 || ((1 << (v69 - 36)) & 0x30000000C03) == 0)
  {
    v71 = v576[353];
    if (v71 <= 0xF)
    {
      v327 = sub_22E5A9848(v576[1], v69, v575, v576[351]);
      v71 = sub_22EF6477C(v19, v327);
      v576[353] = v71;
    }
  }
  else
  {
    v71 = v576[354];
    if (v71 <= 0xF)
    {
      v72 = sub_22E5A9848(v576[1], v69, v575, v576[351]);
      v71 = sub_22EF6477C(v19, v72);
      v576[354] = v71;
    }
  }
  v576[352] = v71;
  v564 = sub_22F10C2A4(*(_QWORD *)(v71 & 0xFFFFFFFFFFFFFFF0));
  v73 = v576[1];
  v74 = v576[352];
  v75 = v882;
  v76 = v883;
  v77 = *(_QWORD *)(v73 + 144);
  v78 = sub_22F368234(v77, "kmp_task_t_with_privates", 0x18uLL, 0);
  sub_22EFC3340(v78);
  v574 = v78;
  if (v78)
    v79 = v78 + 64;
  else
    v79 = 0;
  sub_22E5A4124(v77, v79, v74);
  v563 = v17;
  v578 = v16;
  if (v76)
  {
    v571 = v79;
    v579 = v77;
    v80 = *(_QWORD *)(v73 + 144);
    v81 = sub_22F368234(v80, ".kmp_privates.t", 0xFuLL, 0);
    sub_22EFC3340(v81);
    v82 = &v75[5 * v76];
    v568 = v81;
    if (v81)
      v83 = v81 + 64;
    else
      v83 = 0;
    while (1)
    {
      v84 = v75[2];
      v85 = *(_QWORD *)(v84 + 48);
      v86 = *(_QWORD *)(v85 & 0xFFFFFFFFFFFFFFF0);
      if (v86)
      {
        v87 = *(_DWORD *)(v86 + 16);
        if ((v87 & 0xFE) == 0x28)
          goto LABEL_64;
      }
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v86 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
      {
        v86 = sub_22F10CF48(v86);
        if (v86)
          break;
      }
LABEL_38:
      if (!v75[1] && !v75[3] && !v75[4])
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v84 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) == 40)
        {
          v581 = v581 & 0xFFFFFFFF00000000 | v68 & 0xE0;
          v85 = sub_22EF5B848(v80, v85, v68 & 0xE0);
          LODWORD(v68) = v68 & 0xFFFFFFE0;
        }
        if (sub_22E5A978C(v84))
        {
          v584 = v584 & 0xFFFFFFFF00000000 | v17 & 0xE0;
          v85 = sub_22EF5B848(v80, v85, v17 & 0xE0);
          LODWORD(v17) = v17 & 0xFFFFFFE0;
        }
      }
      v88 = sub_22E5A4124(v80, v83, v85);
      if ((*(_BYTE *)(v84 + 29) & 1) != 0)
      {
        v89 = v88;
        sub_22EFC8E88(v84);
        v91 = *v90;
        sub_22EFC8E88(v84);
        v93 = *(_QWORD *)v92 + 8 * *(unsigned int *)(v92 + 8);
        while (1)
        {
          v94 = v91;
          if ((unint64_t)v91 >= v93)
          {
            v95 = (uint64_t *)v93;
            if ((uint64_t *)v93 == v91)
              break;
            while (*(_WORD *)(*v95 + 32) != 98)
            {
              if (++v95 == v91)
                goto LABEL_46;
            }
            v94 = v91;
          }
          else
          {
            while (*(_WORD *)(*v94 + 32) != 98)
            {
              if (++v94 == (uint64_t *)v93)
                goto LABEL_46;
            }
            v95 = (uint64_t *)v93;
          }
          if (v94 == v95)
            break;
          do
          {
            v97 = *v91++;
            v96 = v97;
          }
          while (*(_WORD *)(v97 + 32) != 98);
          sub_22EFCA95C(v89, v96);
        }
      }
LABEL_46:
      v75 += 5;
      if (v75 == v82)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v568 + 104))(v568);
        v99 = sub_22EF6477C(v579, v568);
        sub_22E5A4124(v579, v571, v99);
        v16 = v578;
        v68 = v576;
        goto LABEL_71;
      }
    }
    v87 = *(_DWORD *)(v86 + 16);
LABEL_64:
    if ((v87 & 0x100000) != 0)
    {
      do
      {
        v86 = *(_QWORD *)(*(_QWORD *)(v86 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v86)
        {
          v98 = *(_DWORD *)(v86 + 16);
          if ((v98 & 0xFE) == 0x28)
            continue;
        }
        v86 = sub_22F10CF48(v86);
        v98 = *(_DWORD *)(v86 + 16);
      }
      while ((v98 & 0x100000) != 0);
    }
    v85 = *(_QWORD *)(v86 + 32);
    goto LABEL_38;
  }
LABEL_71:
  (*(void (**)(uint64_t))(*(_QWORD *)v574 + 104))(v574);
  v100 = (llvm::LLVMContext *)sub_22EF6477C(v19, v574);
  v572 = sub_22EF5B848(v19, (uint64_t)v100, 0);
  sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(v16 + 144) + 280), v100);
  v557 = llvm::PointerType::get();
  v569 = (unint64_t)v100;
  v552 = sub_22F28CE84(v16, (unint64_t)v100);
  v565 = sub_22EF5B848(v19, v573, 0);
  if ((*((_WORD *)v566 + 9) & 1) != 0)
    llvm::Function::BuildLazyArguments(v566);
  v102 = a9;
  if ((_DWORD)v883)
  {
    v549 = *(_QWORD *)(*((_QWORD *)v566 + 11) + 120);
    v104 = sub_22EFC3B90(v574);
    do
      v104 = *(_QWORD *)(v104 + 8) & 0xFFFFFFFFFFFFFFF8;
    while (v104 && (*(_DWORD *)(v104 + 28) & 0x7Fu) - 49 > 2);
    v105 = *(_QWORD *)(v104 + 48);
    v558 = v882;
    v106 = v560;
    v544 = (uint64_t *)v68[1];
    v107 = v544[18];
    v108 = &v915;
    v914[0] = &v915;
    v914[1] = (void *)0x1000000000;
    v546 = v105;
    v109 = sub_22EF5B848(v107, v105, 0) | 3;
    sub_22EA41AB8((uint64_t)&v837, 62, 0, v560);
    *((_QWORD *)&v839 + 1) = 0;
    v840 = v109;
    LODWORD(v841) = v560;
    *((_QWORD *)&v841 + 1) = v107 | 2;
    v842 = (unint64_t)&v837;
    *(_QWORD *)&v837 = &off_24FAC3008;
    LODWORD(v843) = 1310720;
    HIDWORD(v838) |= 0x200u;
    v110 = v914[1];
    if (LODWORD(v914[1]) >= HIDWORD(v914[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v110 = v914[1];
    }
    *((_QWORD *)v914[0] + v110) = &v837;
    ++LODWORD(v914[1]);
    v756[1] = 0;
    v756[0] = 0;
    LODWORD(v757) = 0;
    v111 = *(unsigned int *)(a9 + 8);
    if ((_DWORD)v111)
    {
      v113 = 0;
      v102 = *(_QWORD *)a9;
      v114 = 8 * v111;
      do
      {
        v115 = *(_QWORD *)(v102 + 8 * v113);
        v116 = sub_22EF5B848(v107, *(_QWORD *)(v115 + 8), 0);
        v117 = sub_22EF5B848(v107, v116, 0);
        v118 = sub_22EFC4364(v107, 0, v560, 0, v117 | 3, 5);
        v119 = LODWORD(v914[1]);
        if (LODWORD(v914[1]) >= (unint64_t)HIDWORD(v914[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v119 = LODWORD(v914[1]);
        }
        *((_QWORD *)v914[0] + v119) = v118;
        ++LODWORD(v914[1]);
        v120 = *(_QWORD *)(v115 + 16);
        if (v120)
          v120 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v120 + 32))(v120);
        *(_QWORD *)&v900 = v120;
        *((_DWORD *)sub_22F283EC0((uint64_t *)v756, &v900) + 2) = ++v113;
        v114 -= 8;
      }
      while (v114);
      v112 = v113 + 1;
    }
    else
    {
      v112 = 1;
    }
    v121 = *(unsigned int *)(a9 + 104);
    if ((_DWORD)v121)
    {
      v240 = *(uint64_t **)(a9 + 96);
      v102 = 8 * v121;
      do
      {
        v241 = *v240;
        v242 = sub_22EF5B848(v107, *(_QWORD *)(*v240 + 8), 0);
        v243 = sub_22EF5B848(v107, v242, 0);
        v244 = sub_22EFC4364(v107, 0, v560, 0, v243 | 3, 5);
        v245 = LODWORD(v914[1]);
        if (LODWORD(v914[1]) >= (unint64_t)HIDWORD(v914[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v245 = LODWORD(v914[1]);
        }
        *((_QWORD *)v914[0] + v245) = v244;
        ++LODWORD(v914[1]);
        v246 = *(_QWORD *)(v241 + 16);
        if (v246)
          v246 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v246 + 32))(v246);
        *(_QWORD *)&v900 = v246;
        *((_DWORD *)sub_22F283EC0((uint64_t *)v756, &v900) + 2) = v112++;
        ++v240;
        v102 -= 8;
      }
      while (v102);
    }
    v122 = *(unsigned int *)(a9 + 248);
    if ((_DWORD)v122)
    {
      v247 = *(uint64_t **)(a9 + 240);
      v102 = 8 * v122;
      do
      {
        v248 = *v247;
        v249 = sub_22EF5B848(v107, *(_QWORD *)(*v247 + 8), 0);
        v250 = sub_22EF5B848(v107, v249, 0);
        v251 = sub_22EFC4364(v107, 0, v560, 0, v250 | 3, 5);
        v252 = LODWORD(v914[1]);
        if (LODWORD(v914[1]) >= (unint64_t)HIDWORD(v914[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v252 = LODWORD(v914[1]);
        }
        *((_QWORD *)v914[0] + v252) = v251;
        ++LODWORD(v914[1]);
        v253 = *(_QWORD *)(v248 + 16);
        if (v253)
          v253 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v253 + 32))(v253);
        *(_QWORD *)&v900 = v253;
        *((_DWORD *)sub_22F283EC0((uint64_t *)v756, &v900) + 2) = v112++;
        ++v247;
        v102 -= 8;
      }
      while (v102);
    }
    v123 = *(unsigned int *)(a9 + 536);
    if (!(_DWORD)v123)
    {
LABEL_92:
      v124 = sub_22F24E348((uint64_t)(v544 + 35), *(_QWORD *)(v107 + 16392), (uint64_t *)v914);
      v125 = sub_22E46F2EC((uint64_t)(v544 + 35), v124);
      v126 = v544[101];
      v900 = xmmword_24FA65CC8;
      *(_OWORD *)v901 = off_24FA65CD8;
      sub_22F27BE70((std::string *)&__p, v126, (uint64_t)&v900, 2);
      *(_WORD *)&v901[16] = 260;
      *(_QWORD *)&v900 = &__p;
      v127 = v544[25];
      v128 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x78);
      MEMORY[0x23489F6FC](v128, v125, 7, 0xFFFFFFFFLL, &v900, v127);
      sub_22E62BF18(v544, 0, 0, v128, v124);
      if ((*(_BYTE *)(v544[19] + 28) & 8) != 0)
      {
        llvm::Function::removeFnAttr();
        llvm::Function::removeFnAttr();
        llvm::Function::addFnAttr();
      }
      sub_22E618EBC((uint64_t)&v900, (uint64_t)v544, 0);
      sub_22E61A8FC((uint64_t)&v900, 0, 0, *(_QWORD *)(v107 + 16392), v128, v124, (uint64_t *)v914, v560, v129, v560);
      *(_QWORD *)v876 = &v837;
      *(_QWORD *)v894 = 0;
      v130 = sub_22E3CED3C(v912, v876, v894);
      v131 = *(_QWORD *)v894;
      if (!v130)
        v131 = v912[0] + 56 * v913;
      v784 = *(_OWORD *)(v131 + 8);
      v785 = *(_OWORD *)(v131 + 24);
      v786 = *(_OWORD *)(v131 + 40);
      v132 = *(_QWORD *)(v840 & 0xFFFFFFFFFFFFFFF0);
      if (!v132 || *(_BYTE *)(v132 + 16) != 39)
        v132 = sub_22F10CF48(v132);
      sub_22F25FAEC((uint64_t)&v900, &v784, v132, (uint64_t)v894);
      v133 = sub_22F10C2A4(*(_QWORD *)(v546 & 0xFFFFFFFFFFFFFFF0));
      v134 = sub_22EFC3B90(v133);
      if (v134)
      {
        v135 = v134;
        v136 = 0;
LABEL_101:
        v873 = v897;
        v874 = v898;
        v875 = v899;
        v869 = *(_OWORD *)&v894[32];
        v870 = *(_OWORD *)&v894[48];
        v872 = v896;
        v871 = v895;
        v868 = *(_OWORD *)&v894[16];
        v867 = *(_OWORD *)v894;
        v137 = sub_22E4DD05C((uint64_t)&v900, (uint64_t)&v867, v135, (uint64_t)v876);
        v138 = v558[5 * v136 + 2];
        if (v138)
          v138 = (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)v138 + 32))(v138, v137);
        *(_QWORD *)v861 = v138;
        v139 = sub_22F283EC0((uint64_t *)v756, v861);
        v140 = *((_QWORD *)v914[0] + *((unsigned int *)v139 + 2));
        *(_QWORD *)&v828 = v140;
        *(_QWORD *)v855 = 0;
        v141 = sub_22E3CED3C(v912, &v828, v855);
        v142 = v912[0] + 56 * v913;
        if (v141)
          v142 = *(_QWORD *)v855;
        v828 = *(_OWORD *)(v142 + 8);
        v829 = *(_OWORD *)(v142 + 24);
        v830 = *(_OWORD *)(v142 + 40);
        v143 = *(_QWORD *)(v140 + 48);
        sub_22E6281E0(v907, v143, (uint64_t)&v765);
        *(_OWORD *)v855 = v828;
        *(_OWORD *)&v855[16] = v829;
        *(_OWORD *)&v855[32] = v830;
        v144 = v907[18];
        *(_OWORD *)v819 = v765;
        v820 = v766;
        *(_QWORD *)&v821 = v767;
        memset(&v861[8], 0, 28);
        *(_QWORD *)&v861[40] = 0;
        *(_QWORD *)&v861[48] = 0;
        v862 = 0uLL;
        *(_QWORD *)((char *)&v863 + 4) = 2;
        *(_DWORD *)v861 = 0;
        v864 = 0u;
        v865 = 0u;
        sub_22E3C113C((uint64_t)v861, (__int128 *)v855, v143, 2, (__int128 *)v819, v144);
        v774 = *(_OWORD *)&v861[8];
        v775 = *(_OWORD *)&v861[24];
        v776 = *(_OWORD *)&v861[40];
        v145 = *(_QWORD *)(v862 & 0xFFFFFFFFFFFFFFF0);
        if (!v145 || *(_BYTE *)(v145 + 16) != 39)
          v145 = sub_22F10CF48(*(_QWORD *)(v862 & 0xFFFFFFFFFFFFFFF0));
        sub_22F25FAEC((uint64_t)&v900, &v774, v145, (uint64_t)v855);
        *(_OWORD *)v819 = *(_OWORD *)&v876[8];
        v820 = *(_OWORD *)&v876[24];
        v821 = *(_OWORD *)&v876[40];
        sub_22E5E0440((uint64_t)&v900, (uint64_t)v819, v877, &v828);
        v852 = v858;
        v853 = v859;
        v854 = v860;
        v848 = *(_OWORD *)&v855[32];
        v849 = *(_OWORD *)&v855[48];
        v851 = v857;
        v850 = v856;
        v847 = *(_OWORD *)&v855[16];
        v846 = *(_OWORD *)v855;
        sub_22E4E87FC((uint64_t)&v900, v828, (uint64_t)&v846, 0);
        ++v136;
        while (1)
        {
          v135 = *(_QWORD *)(v135 + 8) & 0xFFFFFFFFFFFFFFF8;
          if (!v135)
            break;
          if ((*(_DWORD *)(v135 + 28) & 0x7Fu) - 49 < 3)
            goto LABEL_101;
        }
      }
      sub_22E619DE8((uint64_t)&v900, 0);
      sub_22E619434((uint64_t)&v900);
      if (SBYTE7(v748) < 0)
        operator delete((void *)__p);
      llvm::deallocate_buffer(v756[0], (void *)(16 * v757));
      v68 = v576;
      v103 = v560;
      if (v914[0] != &v915)
        free(v914[0]);
      *(_WORD *)&v901[16] = 257;
      v548 = sub_22E3C1338((uint64_t *)(v578 + 272), (uint64_t)v128, v549, (uint64_t)&v900);
      goto LABEL_117;
    }
    v254 = *(_QWORD *)(a9 + 528);
    v583 = v254 + 8 * v123;
    while (1)
    {
      v255 = *(_QWORD **)v254;
      v256 = *(_QWORD *)(*(_QWORD *)v254 + 48);
      v257 = *(_QWORD *)(v256 & 0xFFFFFFFFFFFFFFF0);
      if (v257)
      {
        v258 = *(_DWORD *)(v257 + 16);
        if ((v258 & 0xFE) == 0x28)
          goto LABEL_247;
      }
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v257 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
      {
        v257 = sub_22F10CF48(v257);
        if (v257)
          break;
      }
LABEL_237:
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v255[6] & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) == 40)
      {
        v579 = v579 & 0xFFFFFFFF00000000 | v108 & 0xE0;
        v256 = sub_22EF5B848(v107, v256, v108 & 0xE0);
        LODWORD(v108) = v108 & 0xFFFFFFE0;
      }
      if (sub_22E5A978C((uint64_t)v255))
      {
        v102 = v102 & 0xFFFFFFFF00000000 | v106 & 0xE0;
        v256 = sub_22EF5B848(v107, v256, v102);
        v106 &= 0xFFFFFFE0;
      }
      v259 = sub_22EF5B848(v107, v256, 0);
      v260 = sub_22EF5B848(v107, v259, 0);
      v261 = sub_22EFC4364(v107, 0, v560, 0, v260 | 3, 5);
      v262 = LODWORD(v914[1]);
      if (LODWORD(v914[1]) >= (unint64_t)HIDWORD(v914[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v262 = LODWORD(v914[1]);
      }
      *((_QWORD *)v914[0] + v262) = v261;
      ++LODWORD(v914[1]);
      *(_QWORD *)&v900 = (*(uint64_t (**)(_QWORD *))(*v255 + 32))(v255);
      *((_DWORD *)sub_22F283EC0((uint64_t *)v756, &v900) + 2) = v112++;
      v254 += 8;
      if (v254 == v583)
        goto LABEL_92;
    }
    v258 = *(_DWORD *)(v257 + 16);
LABEL_247:
    if ((v258 & 0x100000) != 0)
    {
      do
      {
        v257 = *(_QWORD *)(*(_QWORD *)(v257 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v257)
        {
          v263 = *(_DWORD *)(v257 + 16);
          if ((v263 & 0xFE) == 0x28)
            continue;
        }
        v257 = sub_22F10CF48(v257);
        v263 = *(_DWORD *)(v257 + 16);
      }
      while ((v263 & 0x100000) != 0);
    }
    v256 = *(_QWORD *)(v257 + 32);
    goto LABEL_237;
  }
  v548 = llvm::ConstantPointerNull::get(*(llvm::ConstantPointerNull **)(*((_QWORD *)v566 + 11) + 120), v101);
  v103 = v560;
LABEL_117:
  v146 = (uint64_t *)v68[1];
  v555 = *(_DWORD *)(v577 + 8);
  v147 = v68[352];
  v148 = v146[18];
  v914[0] = &v915;
  v914[1] = (void *)0x1000000000;
  sub_22EA41AB8((uint64_t)v807, 62, 0, v103);
  v809 = 0;
  v810 = v575;
  v811 = 0;
  v812 = v103;
  v148 |= 2uLL;
  v813 = v148;
  v814 = v807;
  v815 = 0;
  v807[0] = &off_24FAC3008;
  v816 = 1310720;
  v808 |= 0x200u;
  sub_22EA41AB8((uint64_t)v797, 62, 0, v103);
  v799 = 0;
  v800 = v572 | 2;
  v801 = 0;
  v802 = v103;
  v803 = v148;
  v804 = v797;
  v805 = 0;
  v797[0] = &off_24FAC3008;
  v806 = 1310720;
  v798 |= 0x200u;
  v149 = v914[1];
  if (LODWORD(v914[1]) >= HIDWORD(v914[1]))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v149 = v914[1];
  }
  v585 = v103;
  *((_QWORD *)v914[0] + v149) = v807;
  v150 = LODWORD(v914[1]) + 1;
  LODWORD(v914[1]) = v150;
  if (v150 >= HIDWORD(v914[1]))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v150 = v914[1];
  }
  *((_QWORD *)v914[0] + v150) = v797;
  ++LODWORD(v914[1]);
  v151 = sub_22F24E348((uint64_t)(v146 + 35), v575, (uint64_t *)v914);
  v152 = sub_22E46F2EC((uint64_t)(v146 + 35), v151);
  v153 = v146[101];
  v900 = xmmword_24FA65CE8;
  *(_OWORD *)v901 = off_24FA65CF8;
  sub_22F27BE70(&v796, v153, (uint64_t)&v900, 2);
  *(_WORD *)&v901[16] = 260;
  *(_QWORD *)&v900 = &v796;
  v154 = v146[25];
  v155 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x78);
  MEMORY[0x23489F6FC](v155, v152, 7, 0xFFFFFFFFLL, &v900, v154);
  sub_22E62BF18(v146, 0, 0, v155, v151);
  llvm::Function::addFnAttr();
  sub_22E618EBC((uint64_t)&v900, (uint64_t)v146, 0);
  v580 = (uint64_t)v155;
  sub_22E61A8FC((uint64_t)&v900, 0, 0, v575, v155, v151, (uint64_t *)v914, v103, v156, v103);
  *(_QWORD *)v876 = v807;
  *(_QWORD *)v894 = 0;
  v157 = sub_22E3CED3C(v912, v876, v894);
  v158 = v912[0] + 56 * v913;
  if (v157)
    v158 = *(_QWORD *)v894;
  v795 = *(_OWORD *)(v158 + 40);
  v159 = *(_OWORD *)(v158 + 8);
  v794 = *(_OWORD *)(v158 + 24);
  v793[3] = v159;
  *(_OWORD *)v894 = v159;
  *(_OWORD *)&v894[16] = v794;
  *(_OWORD *)&v894[32] = v795;
  sub_22E6281E0(v907, v575, (uint64_t)v876);
  v160 = sub_22E4E6994((uint64_t)&v900, (uint64_t)v894, 0, v575, v103, 2, (uint64_t)v876, 0);
  *(_QWORD *)v876 = v797;
  *(_QWORD *)v894 = 0;
  v161 = sub_22E3CED3C(v912, v876, v894);
  v162 = *(_QWORD *)v894;
  if (!v161)
    v162 = v912[0] + 56 * v913;
  v163 = *(_OWORD *)(v162 + 24);
  v793[0] = *(_OWORD *)(v162 + 8);
  v793[1] = v163;
  v793[2] = *(_OWORD *)(v162 + 40);
  v547 = (uint64_t *)(v572 & 0xFFFFFFFFFFFFFFF0);
  v164 = *(_QWORD *)(v572 & 0xFFFFFFFFFFFFFFF0);
  if (!v164 || *(_BYTE *)(v164 + 16) != 39)
    v164 = sub_22F10CF48(*(_QWORD *)(v572 & 0xFFFFFFFFFFFFFFF0));
  sub_22F25FAEC((uint64_t)&v900, v793, v164, (uint64_t)v876);
  v543 = (uint64_t *)(v569 & 0xFFFFFFFFFFFFFFF0);
  v165 = sub_22F10C2A4(*(_QWORD *)(v569 & 0xFFFFFFFFFFFFFFF0));
  v864 = v879;
  v865 = v880;
  v866 = v881;
  *(_OWORD *)&v861[32] = *(_OWORD *)&v876[32];
  *(_OWORD *)&v861[48] = *(_OWORD *)&v876[48];
  v863 = v878;
  v862 = v877;
  *(_OWORD *)&v861[16] = *(_OWORD *)&v876[16];
  *(_OWORD *)v861 = *(_OWORD *)v876;
  v166 = sub_22EFC3B90(v165);
  sub_22E4DD05C((uint64_t)&v900, (uint64_t)v861, v166, (uint64_t)&v867);
  v167 = sub_22F10C2A4(*(_QWORD *)(v147 & 0xFFFFFFFFFFFFFFF0));
  v168 = sub_22EFC3B90(v167);
  v169 = 2;
  do
  {
    do
      v168 = *(_QWORD *)(v168 + 8) & 0xFFFFFFFFFFFFFFF8;
    while (v168 && (*(_DWORD *)(v168 + 28) & 0x7Fu) - 49 > 2);
    v66 = v169-- > 1;
  }
  while (v66);
  v852 = v873;
  v853 = v874;
  v854 = v875;
  v848 = v869;
  v849 = v870;
  v851 = v872;
  v850 = v871;
  v847 = v868;
  v846 = v867;
  sub_22E4DD05C((uint64_t)&v900, (uint64_t)&v846, v168, (uint64_t)v855);
  v837 = *(_OWORD *)&v855[8];
  v838 = *(_OWORD *)&v855[24];
  v839 = *(_OWORD *)&v855[40];
  sub_22E5E0440((uint64_t)&v900, (uint64_t)&v837, v856, v894);
  v170 = *(_QWORD *)v894;
  v171 = sub_22EFC3B90(v167);
  v834 = v873;
  v835 = v874;
  v836 = v875;
  v830 = v869;
  v831 = v870;
  v833 = v872;
  v832 = v871;
  v829 = v868;
  v828 = v867;
  sub_22E4DD05C((uint64_t)&v900, (uint64_t)&v828, v171, (uint64_t)&v837);
  v825 = v843;
  v826 = v844;
  v827 = v845;
  v821 = v839;
  v822 = v840;
  v824 = v842;
  v823 = v841;
  v820 = v838;
  *(_OWORD *)v819 = v837;
  v172 = sub_22F25F748((uint64_t)&v900, (uint64_t)v819, v585);
  v173 = sub_22E66C868((uint64_t)(v907 + 35), v565, 0);
  *(_WORD *)&v894[32] = 257;
  v559 = sub_22E3C1338(v908, v172, v173, (uint64_t)v894);
  v175 = sub_22EFC3B90(v165);
  while (1)
  {
    v175 = *(_QWORD *)(v175 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (!v175)
      break;
    if ((*(_DWORD *)(v175 + 28) & 0x7Fu) - 49 <= 2)
    {
      v790 = v879;
      v791 = v880;
      v792 = v881;
      v786 = *(_OWORD *)&v876[32];
      v787 = *(_OWORD *)&v876[48];
      v789 = v878;
      v788 = v877;
      v785 = *(_OWORD *)&v876[16];
      v784 = *(_OWORD *)v876;
      sub_22E4DD05C((uint64_t)&v900, (uint64_t)&v784, v175, (uint64_t)v894);
      v765 = *(_OWORD *)&v894[8];
      v766 = *(_OWORD *)&v894[24];
      v767 = *(_OWORD *)&v894[40];
      sub_22E5E0440((uint64_t)&v900, (uint64_t)&v765, v895, &v774);
      LOWORD(v776) = 257;
      v176 = sub_22E3C1338(v908, v774, (uint64_t)v904[0], (uint64_t)&v774);
      goto LABEL_137;
    }
  }
  v176 = llvm::ConstantPointerNull::get(v904[0], v174);
LABEL_137:
  v177 = v176;
  v783[0] = *(_OWORD *)&v876[8];
  v783[1] = *(_OWORD *)&v876[24];
  v783[2] = *(_OWORD *)&v876[40];
  LOWORD(v776) = 257;
  sub_22F245864(v908, v783, (uint64_t)v904[0], *((unint64_t *)&v900 + 1), (uint64_t)&v774, (uint64_t)v894);
  if ((v894[24] & 3) != 0)
    v178 = sub_22F28ABCC(v894, &v900);
  else
    v178 = *(_QWORD *)v894;
  *(_QWORD *)v894 = &v894[16];
  *(_QWORD *)&v894[16] = v160;
  *(_QWORD *)&v894[24] = v170;
  *(_QWORD *)&v894[32] = v177;
  *(_QWORD *)&v894[40] = v548;
  *(_QWORD *)&v894[48] = v178;
  *(_QWORD *)&v894[8] = 0x1000000005;
  v179 = 5;
  if ((v555 - 36) > 0x29)
  {
    v180 = v578;
  }
  else
  {
    v180 = v578;
    if (((1 << (v555 - 36)) & 0x30000000C03) != 0)
    {
      v181 = sub_22EFC3B90(v167);
      v182 = 5;
      do
      {
        do
          v181 = *(_QWORD *)(v181 + 8) & 0xFFFFFFFFFFFFFFF8;
        while (v181 && (*(_DWORD *)(v181 + 28) & 0x7Fu) - 49 > 2);
        v66 = v182-- > 1;
      }
      while (v66);
      v771 = v873;
      v772 = v874;
      v773 = v875;
      v767 = v869;
      v768 = v870;
      v770 = v872;
      v769 = v871;
      v766 = v868;
      v765 = v867;
      sub_22E4DD05C((uint64_t)&v900, (uint64_t)&v765, v181, (uint64_t)&v774);
      v762 = v780;
      v763 = v781;
      v764 = v782;
      v758 = v776;
      v759 = v777;
      v761 = v779;
      v760 = v778;
      v757 = v775;
      *(_OWORD *)v756 = v774;
      v183 = sub_22F25F748((uint64_t)&v900, (uint64_t)v756, v585);
      v184 = sub_22EFC3B90(v167);
      v185 = 6;
      do
      {
        do
          v184 = *(_QWORD *)(v184 + 8) & 0xFFFFFFFFFFFFFFF8;
        while (v184 && (*(_DWORD *)(v184 + 28) & 0x7Fu) - 49 > 2);
        v66 = v185-- > 1;
      }
      while (v66);
      v891 = v873;
      v892 = v874;
      v893 = v875;
      v887 = v869;
      v888 = v870;
      v890 = v872;
      v889 = v871;
      v886 = v868;
      *(_OWORD *)v885 = v867;
      sub_22E4DD05C((uint64_t)&v900, (uint64_t)v885, v184, (uint64_t)&__p);
      v744 = v753;
      v745 = v754;
      v746 = v755;
      v740 = v749;
      v741 = v750;
      v743 = v752;
      v742 = v751;
      v739 = v748;
      v738 = __p;
      v186 = sub_22F25F748((uint64_t)&v900, (uint64_t)&v738, v585);
      v187 = sub_22EFC3B90(v167);
      v188 = 7;
      do
      {
        do
          v187 = *(_QWORD *)(v187 + 8) & 0xFFFFFFFFFFFFFFF8;
        while (v187 && (*(_DWORD *)(v187 + 28) & 0x7Fu) - 49 > 2);
        v66 = v188-- > 1;
      }
      while (v66);
      v726 = v873;
      v727 = v874;
      v728 = v875;
      v722 = v869;
      v723 = v870;
      v725 = v872;
      v724 = v871;
      v721 = v868;
      v720 = v867;
      sub_22E4DD05C((uint64_t)&v900, (uint64_t)&v720, v187, (uint64_t)&v729);
      v717 = v735;
      v718 = v736;
      v719 = v737;
      v713 = v731;
      v714 = v732;
      v716 = v734;
      v715 = v733;
      v712 = v730;
      *(_OWORD *)v711 = v729;
      v189 = sub_22F25F748((uint64_t)&v900, (uint64_t)v711, v585);
      v190 = sub_22EFC3B90(v167);
      v191 = 8;
      do
      {
        do
          v190 = *(_QWORD *)(v190 + 8) & 0xFFFFFFFFFFFFFFF8;
        while (v190 && (*(_DWORD *)(v190 + 28) & 0x7Fu) - 49 > 2);
        v66 = v191-- > 1;
      }
      while (v66);
      v700[6] = v873;
      v700[7] = v874;
      v701 = v875;
      v700[2] = v869;
      v700[3] = v870;
      v700[5] = v872;
      v700[4] = v871;
      v700[1] = v868;
      v700[0] = v867;
      sub_22E4DD05C((uint64_t)&v900, (uint64_t)v700, v190, (uint64_t)&v702);
      v698[6] = v708;
      v698[7] = v709;
      v699 = v710;
      v698[2] = v704;
      v698[3] = v705;
      v698[5] = v707;
      v698[4] = v706;
      v698[1] = v703;
      v698[0] = v702;
      v192 = sub_22F25F748((uint64_t)&v900, (uint64_t)v698, v585);
      v193 = sub_22EFC3B90(v167);
      v194 = 9;
      do
      {
        do
          v193 = *(_QWORD *)(v193 + 8) & 0xFFFFFFFFFFFFFFF8;
        while (v193 && (*(_DWORD *)(v193 + 28) & 0x7Fu) - 49 > 2);
        v66 = v194-- > 1;
      }
      while (v66);
      v687[6] = v873;
      v687[7] = v874;
      v688 = v875;
      v687[2] = v869;
      v687[3] = v870;
      v687[5] = v872;
      v687[4] = v871;
      v687[1] = v868;
      v687[0] = v867;
      sub_22E4DD05C((uint64_t)&v900, (uint64_t)v687, v193, (uint64_t)&v689);
      v685[6] = v695;
      v685[7] = v696;
      v686 = v697;
      v685[2] = v691;
      v685[3] = v692;
      v685[5] = v694;
      v685[4] = v693;
      v685[1] = v690;
      v685[0] = v689;
      v195 = sub_22F25F748((uint64_t)&v900, (uint64_t)v685, v585);
      v196 = *(_DWORD *)&v894[8];
      if (*(_DWORD *)&v894[8] >= *(_DWORD *)&v894[12])
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v196 = *(_DWORD *)&v894[8];
      }
      *(_QWORD *)(*(_QWORD *)v894 + 8 * v196) = v183;
      v197 = *(_DWORD *)&v894[8] + 1;
      *(_DWORD *)&v894[8] = v197;
      if (v197 >= *(_DWORD *)&v894[12])
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v197 = *(_DWORD *)&v894[8];
      }
      *(_QWORD *)(*(_QWORD *)v894 + 8 * v197) = v186;
      v198 = *(_DWORD *)&v894[8] + 1;
      *(_DWORD *)&v894[8] = v198;
      if (v198 >= *(_DWORD *)&v894[12])
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v198 = *(_DWORD *)&v894[8];
      }
      *(_QWORD *)(*(_QWORD *)v894 + 8 * v198) = v189;
      v199 = *(_DWORD *)&v894[8] + 1;
      *(_DWORD *)&v894[8] = v199;
      v180 = v578;
      if (v199 >= *(_DWORD *)&v894[12])
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v199 = *(_DWORD *)&v894[8];
      }
      *(_QWORD *)(*(_QWORD *)v894 + 8 * v199) = v192;
      v200 = *(_DWORD *)&v894[8] + 1;
      *(_DWORD *)&v894[8] = v200;
      if (v200 >= *(_DWORD *)&v894[12])
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v200 = *(_DWORD *)&v894[8];
      }
      *(_QWORD *)(*(_QWORD *)v894 + 8 * v200) = v195;
      v179 = *(_DWORD *)&v894[8] + 1;
      *(_DWORD *)&v894[8] = v179;
      if (v179 >= *(_DWORD *)&v894[12])
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v179 = *(_DWORD *)&v894[8];
      }
    }
  }
  *(_QWORD *)(*(_QWORD *)v894 + 8 * v179) = v559;
  ++*(_DWORD *)&v894[8];
  if (v566)
    v201 = *((_QWORD *)v566 + 3);
  else
    v201 = 0;
  v202 = a9;
  (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v146[101] + 568))(v146[101], &v900, v585, v201);
  llvm::Type::getInt32Ty((llvm::Type *)v908[8], v203);
  __p = (unint64_t)llvm::ConstantInt::get();
  LOBYTE(v750) = v750 & 0xF8;
  v702 = v909;
  v703 = v910;
  v704 = v911;
  sub_22E6281E0(v907, v575, (uint64_t)v817);
  v729 = v702;
  v730 = v703;
  v731 = v704;
  v204 = v907[18];
  v689 = v817[0];
  v690 = v817[1];
  *(_QWORD *)&v691 = v818;
  LODWORD(v776) = 0;
  *((_QWORD *)&v774 + 1) = 0;
  v775 = 0uLL;
  *(_QWORD *)&v777 = 0;
  *((_QWORD *)&v776 + 1) = 0;
  v778 = 0uLL;
  *(_QWORD *)((char *)&v779 + 4) = 2;
  LODWORD(v774) = 0;
  v781 = 0u;
  v780 = 0u;
  sub_22E3C113C((uint64_t)&v774, &v729, v575, 2, &v689, v204);
  sub_22E4DAAE0((uint64_t)&v900, (uint64_t)&__p, (uint64_t)&v774, 0);
  sub_22E619DE8((uint64_t)&v900, 0);
  if (*(_BYTE **)v894 != &v894[16])
    free(*(void **)v894);
  sub_22E619434((uint64_t)&v900);
  if (SHIBYTE(v796.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v796.__r_.__value_.__l.__data_);
  if (v914[0] != &v915)
    free(v914[0]);
  if (!(_DWORD)v883)
  {
LABEL_203:
    v556 = 0;
    goto LABEL_205;
  }
  v206 = (char *)v882;
  v207 = (char *)v882 + 40 * v883;
  while (1)
  {
    if (!*((_QWORD *)v206 + 1) && !*((_QWORD *)v206 + 3) && !*((_QWORD *)v206 + 4))
      goto LABEL_192;
    v208 = *(_QWORD *)(*((_QWORD *)v206 + 2) + 48);
    v209 = *(_QWORD *)(v208 & 0xFFFFFFFFFFFFFFF0);
    if (!v209 || (v210 = *(_DWORD *)(v209 + 16), (v210 & 0xFE) != 0x28))
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v209 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
        goto LABEL_191;
      v209 = sub_22F10CF48(v209);
      if (!v209)
        goto LABEL_191;
      v210 = *(_DWORD *)(v209 + 16);
    }
    if ((v210 & 0x100000) != 0)
    {
      do
      {
        v209 = *(_QWORD *)(*(_QWORD *)(v209 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (!v209 || (v211 = *(_DWORD *)(v209 + 16), (v211 & 0xFE) != 0x28))
        {
          v209 = sub_22F10CF48(v209);
          v211 = *(_DWORD *)(v209 + 16);
        }
        v202 = a9;
        v180 = v578;
      }
      while ((v211 & 0x100000) != 0);
    }
    v208 = *(_QWORD *)(v209 + 32);
LABEL_191:
    if (sub_22F115260(v208))
      break;
LABEL_192:
    v206 += 40;
    if (v206 == v207)
      goto LABEL_203;
  }
  v556 = 1;
LABEL_205:
  v212 = *(unsigned int **)(v577 + 24);
  if (v212)
  {
    v215 = *v212;
    v213 = v212 + 4;
    v214 = v215;
    if (v215)
    {
      v216 = 8 * v214;
      do
      {
        if (*(_DWORD *)(*(_QWORD *)v213 + 8) == 21)
          break;
        v213 += 2;
        v216 -= 8;
      }
      while (v216);
    }
  }
  if (*(_QWORD *)(v202 + 848) >= 8uLL)
  {
    llvm::Type::getInt32Ty(*(llvm::Type **)(v180 + 336), v205);
    llvm::ConstantInt::get();
    llvm::Type::getInt32Ty(*(llvm::Type **)(v180 + 336), v219);
    llvm::ConstantInt::get();
    *(_WORD *)&v901[16] = 257;
    Select = llvm::IRBuilderBase::CreateSelect();
  }
  else
  {
    llvm::Type::getInt32Ty(*(llvm::Type **)(v180 + 336), v205);
    Select = llvm::ConstantInt::get();
  }
  v220 = Select;
  v221 = (uint64_t *)(v180 + 272);
  llvm::Type::getInt32Ty(*(llvm::Type **)(v180 + 336), v218);
  v222 = llvm::ConstantInt::get();
  *(_WORD *)&v901[16] = 257;
  v223 = sub_22E3E58D4(v180 + 272, v220, v222, (uint64_t)&v900);
  v224 = v180;
  v225 = (uint64_t *)(v573 & 0xFFFFFFFFFFFFFFF0);
  sub_22EF5CCD0(v19, *(_QWORD *)(v573 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v900);
  v226 = llvm::ConstantInt::get();
  v227 = sub_22E59F7E4(v576, v224, v585);
  v228 = sub_22E59F964((uint64_t)v576, v224, v585);
  v229 = v576[350];
  *(_WORD *)&v901[16] = 257;
  v582 = v221;
  v230 = sub_22E3C1338(v221, v580, v229, (uint64_t)&v900);
  v885[0] = &v886;
  *(_QWORD *)&v886 = v227;
  *((_QWORD *)&v886 + 1) = v228;
  *(_QWORD *)&v887 = v223;
  *((_QWORD *)&v887 + 1) = v552;
  *(_QWORD *)&v888 = v226;
  *((_QWORD *)&v888 + 1) = v230;
  v885[1] = (void *)0x800000006;
  v232 = *(unsigned int **)(v577 + 24);
  v233 = v563;
  if (!v232)
    goto LABEL_258;
  v236 = *v232;
  v234 = v232 + 4;
  v235 = v236;
  if (!v236)
    goto LABEL_258;
  v237 = 8 * v235;
  v238 = v237;
  v239 = v234;
  while (*(_DWORD *)(*(_QWORD *)v239 + 8) != 51)
  {
    v239 += 2;
    v238 -= 8;
    if (!v238)
      goto LABEL_258;
  }
  if (v238)
  {
    while (*(_DWORD *)(*(_QWORD *)v234 + 8) != 22)
    {
      v234 += 2;
      v237 -= 8;
      if (!v237)
        goto LABEL_318;
    }
    if (v237)
    {
      v231 = *(unsigned __int8 **)(*(_QWORD *)v234 + 40);
      if (v231)
      {
        *(_QWORD *)&v900 = v578;
        *((_QWORD *)&v900 + 1) = v582;
        v901[0] = 0;
        *(_QWORD *)&v901[8] = *(_QWORD *)(*(_QWORD *)(v578 + 144) + 232);
        v328 = sub_22E50E974((uint64_t *)&v900, v231);
        v329 = *(_QWORD *)(v578 + 32);
        *(_WORD *)&v901[16] = 257;
        v330 = sub_22E3BF45C(v582, (uint64_t)v328, v329, 1, (uint64_t)&v900);
        goto LABEL_319;
      }
    }
LABEL_318:
    llvm::Type::getInt64Ty(*(llvm::Type **)(v578 + 336), (llvm::LLVMContext *)v231);
    v330 = llvm::ConstantInt::get();
LABEL_319:
    v331 = v330;
    v332 = v885[1];
    if (LODWORD(v885[1]) >= HIDWORD(v885[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v332 = v885[1];
    }
    *((_QWORD *)v885[0] + v332) = v331;
    ++LODWORD(v885[1]);
    RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
    v266 = v333;
    v267 = v885[0];
    v268 = LODWORD(v885[1]);
    *(_WORD *)&v901[16] = 257;
  }
  else
  {
LABEL_258:
    RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
    v266 = v265;
    v267 = v885[0];
    v268 = LODWORD(v885[1]);
    *(_WORD *)&v901[16] = 257;
  }
  v269 = sub_22E479C7C(v578, RuntimeFunction, v266, (uint64_t)v267, v268, (uint64_t)&v900);
  v270 = *(unsigned int **)(v577 + 24);
  v567 = v269;
  if (v270)
  {
    v271 = v270 + 4;
    v272 = *v270;
    if ((_DWORD)v272)
    {
      v273 = 0;
      while (*(_DWORD *)(*(_QWORD *)&v271[v273] + 8) != 21)
      {
        v273 += 2;
        if (2 * v272 == v273)
          goto LABEL_270;
      }
      v274 = &v271[v273];
    }
    else
    {
      v274 = v270 + 4;
    }
    if (v274 != &v271[2 * v272])
    {
      v275 = *(_QWORD *)v274;
      if (*(_QWORD *)v274)
      {
        v276 = sub_22EFFA6B0(*(unsigned __int8 **)(v275 + 16));
        sub_22E4D8D7C(v578, (unsigned int *)v276, (uint64_t)&v900);
        v277 = sub_22E59F7E4(v576, v578, *(_DWORD *)v275);
        v278 = sub_22E59F964((uint64_t)v576, v578, *(_DWORD *)v275);
        v279 = *(_QWORD *)(v578 + 72);
        LOWORD(v916) = 257;
        v280 = sub_22E3BF45C(v582, v278, v279, 0, (uint64_t)v914);
        v281 = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
        *(_QWORD *)v894 = v277;
        *(_QWORD *)&v894[8] = v280;
        *(_QWORD *)&v894[16] = v269;
        LOWORD(v916) = 257;
        v283 = sub_22E479C7C(v578, v281, v282, (uint64_t)v894, 3, (uint64_t)v914);
        v284 = *(_QWORD *)(v19 + 16816);
        v285 = *((_QWORD *)v276 + 1);
        sub_22EFF605C((uint64_t)v276);
        v914[0] = (void *)v578;
        v914[1] = v582;
        LOBYTE(v915) = 0;
        *((_QWORD *)&v915 + 1) = *(_QWORD *)(*(_QWORD *)(v578 + 144) + 232);
        v287 = sub_22E50EA80((uint64_t *)v914, v283, v284, v285, v286, 0);
        v683[6] = *(_OWORD *)v904;
        v683[7] = v905;
        v684 = v906;
        v683[2] = *(_OWORD *)&v901[16];
        v683[3] = *(_OWORD *)&v901[32];
        v683[5] = v903;
        v683[4] = v902;
        v683[1] = *(_OWORD *)v901;
        v683[0] = v900;
        sub_22E4E87FC(v578, (uint64_t)v287, (uint64_t)v683, 0);
        v270 = *(unsigned int **)(v577 + 24);
      }
    }
LABEL_270:
    if (v270)
    {
      v290 = *v270;
      v289 = v270 + 4;
      v288 = v290;
      v291 = v289;
      if (v290)
      {
        v292 = 8 * v288;
        v291 = v289;
        while (*(_DWORD *)(*(_QWORD *)v291 + 8) != 3)
        {
          v291 += 2;
          v292 -= 8;
          if (!v292)
            goto LABEL_277;
        }
      }
      v293 = &v289[2 * v288];
      if (v291 != v293)
      {
        v550 = *(_QWORD *)(v576[1] + 144);
        v867 = 0uLL;
        DWORD2(v868) = 0;
        *(_QWORD *)&v868 = 0;
        v869 = 0uLL;
        if ((_DWORD)v288)
        {
          v378 = 8 * v288;
          while (*(_DWORD *)(*(_QWORD *)v289 + 8) != 3)
          {
            v289 += 2;
            v378 -= 8;
            if (!v378)
              goto LABEL_370;
          }
        }
        if (v289 == v293)
        {
LABEL_370:
          v362 = 0;
          v361 = 0;
          v379 = v550;
          v380 = v576;
        }
        else
        {
          v361 = 0;
          v362 = 0;
          v363 = *(_QWORD *)v289;
LABEL_354:
          v364 = *(unsigned int *)(v363 + 16);
          v365 = *(unsigned __int8 **)(v363 + 8 * v364 + 24);
          if (v365)
          {
            v366 = sub_22EFFA6B0(v365);
            v367 = *((unsigned int *)v366 + 7);
            if ((_DWORD)v367)
            {
              v368 = v366;
              v553 = v362;
              v369 = 0;
              v370 = v366 + 32;
              v371 = 32 * v367;
              do
              {
                v372 = *(unsigned __int8 **)(((unint64_t)&v370[8 * *((unsigned int *)v368 + 7)
                                                                    + 7
                                                                    + 24 * *((_DWORD *)v368 + 7)
                                                                    + 12 * *((_DWORD *)v368 + 7)] & 0xFFFFFFFFFFFFFFF8)
                                           + v369
                                           + 8);
                *(_QWORD *)&v900 = v578;
                *((_QWORD *)&v900 + 1) = v582;
                v901[0] = 0;
                *(_QWORD *)&v901[8] = *(_QWORD *)(*(_QWORD *)(v578 + 144) + 232);
                v373 = sub_22E50E974((uint64_t *)&v900, v372);
                v374 = *(_QWORD *)(v578 + 88);
                *(_WORD *)&v901[16] = 257;
                v375 = sub_22E3BF45C(v582, (uint64_t)v373, v374, 0, (uint64_t)&v900);
                if (v361)
                {
                  *(_WORD *)&v901[16] = 257;
                  v361 = sub_22E3BDEA8((uint64_t)v582, (uint64_t)v361, v375, (uint64_t)&v900, 1, 0);
                }
                else
                {
                  v361 = (llvm::Instruction *)v375;
                }
                v369 += 32;
              }
              while (v371 != v369);
              v233 = v563;
              v269 = v567;
              v225 = (uint64_t *)(v573 & 0xFFFFFFFFFFFFFFF0);
              v362 = v553;
            }
          }
          else
          {
            v362 += v364;
          }
          v376 = v289 + 2;
          while (v376 != v293)
          {
            v377 = *(_QWORD *)v376;
            v376 += 2;
            v363 = v377;
            if (*(_DWORD *)(v377 + 8) == 3)
            {
              v289 = v376 - 2;
              goto LABEL_354;
            }
          }
          v380 = v576;
          v379 = *(_QWORD *)(v576[1] + 144);
        }
        v381 = sub_22EF60A6C(v379, 32, 0);
        v382 = v380[356];
        if (v382 <= 0xF)
        {
          v383 = v381;
          v384 = sub_22F368234(v379, "kmp_task_affinity_info_t", 0x18uLL, 0);
          sub_22EFC3340(v384);
          if (v384)
            v385 = v384 + 64;
          else
            v385 = 0;
          v386 = sub_22EF5B0AC(v379, *(_DWORD *)(*(_QWORD *)(v379 + 15088) + *(_QWORD *)(**(_QWORD **)(v379 + 15088) - 24) + 124));
          sub_22E5A4124(v379, v385, v386);
          v387 = sub_22EF67C8C(v379);
          sub_22E5A4124(v379, v385, v387);
          sub_22E5A4124(v379, v385, v383);
          (*(void (**)(uint64_t))(*(_QWORD *)v384 + 104))(v384);
          v382 = sub_22EF6477C(v379, v384);
          v576[356] = v382;
        }
        if (v361)
        {
          v399 = llvm::ConstantInt::get();
          *(_WORD *)&v901[16] = 257;
          v400 = sub_22F26180C((uint64_t)v582, v399, (uint64_t)v361, (uint64_t)&v900);
          v401 = (_DWORD *)sub_22E3CD3D4(v550 + 2032, 24, 3);
          v402 = sub_22EF67C8C(v550);
          v403 = sub_22EF5CDF0(v550, *(_QWORD *)(v402 & 0xFFFFFFFFFFFFFFF0));
          v404 = sub_22EF60A6C(v550, v403, 0);
          sub_22E5BBE34((uint64_t)v401, v585, v404, 0, 0, 0);
          *(_OWORD *)&v901[8] = v681;
          v914[0] = (void *)v578;
          *(_QWORD *)&v900 = v401;
          *((_QWORD *)&v900 + 1) = v400;
          *(_QWORD *)v901 = 0;
          *(_OWORD *)&v901[24] = v682;
          v901[40] = 0;
          *(_DWORD *)&v901[41] = *(_DWORD *)v680;
          *(_DWORD *)&v901[44] = *(_DWORD *)&v680[3];
          sub_22F25406C(v578 + 4088, &v900, (__int128 *)((char *)&v900 + 8), (uint64_t)v894);
          v914[1] = v401;
          LOBYTE(v915) = 0;
          v900 = (unint64_t)v400;
          *(_OWORD *)v901 = v681;
          *(_OWORD *)&v901[16] = v682;
          v901[32] = 0;
          *(_DWORD *)&v901[33] = *(_DWORD *)v680;
          *(_DWORD *)&v901[36] = *(_DWORD *)&v680[3];
          *((_QWORD *)&v915 + 1) = sub_22F297CB8(v578, &v900);
          v405 = sub_22EF60740(v550, v576[356], v401, 0, 0, v585 | (v560 << 32));
          v406 = sub_22F3AD594(v550, v405, 5);
          sub_22E4C652C((_QWORD *)v578, v406);
          *(_QWORD *)v894 = v406;
          *(_QWORD *)&v900 = 0;
          v407 = sub_22E3CED3C((uint64_t *)(v578 + 2904), v894, &v900);
          v408 = v900;
          if (!v407)
            v408 = *(_QWORD *)(v578 + 2904) + 56 * *(unsigned int *)(v578 + 2920);
          v409 = *(_OWORD *)(v408 + 8);
          v410 = *(_OWORD *)(v408 + 24);
          v869 = *(_OWORD *)(v408 + 40);
          v868 = v410;
          v867 = v409;
          v411 = *(_QWORD *)(v578 + 24);
          *(_WORD *)&v901[16] = 257;
          v398 = sub_22E3BF45C(v582, (uint64_t)v400, v411, 0, (uint64_t)&v900);
          if (v914[1])
            sub_22F254324((uint64_t)&v914[1], (uint64_t)v914[0]);
          v391 = v576;
          v233 = v563;
        }
        else
        {
          v388 = sub_22EF67C8C(v550);
          v389 = sub_22EF5CDF0(v550, *(_QWORD *)(v388 & 0xFFFFFFFFFFFFFFF0));
          DWORD2(v900) = v389;
          if (v389 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v900);
          }
          else
          {
            v390 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v389;
            if (!v389)
              LODWORD(v390) = 0;
            *(_QWORD *)&v900 = v390 & v362;
          }
          v391 = v576;
          v392 = sub_22EF5FE30(v550, v382, (const llvm::APInt *)&v900, 0, 0, 0);
          if (DWORD2(v900) >= 0x41 && (_QWORD)v900)
            MEMORY[0x2348A0E84](v900, 0x1000C8000313F17);
          *(_QWORD *)&v900 = ".affs.arr.addr";
          *(_WORD *)&v901[16] = 259;
          v393 = sub_22F25E4D4(v578, v392, (uint64_t)&v900, 0);
          v395 = 0;
          v396 = v393 & 0xFFFFFFFFFFFFFFF8;
          if (v393 <= 7)
            v396 = 0;
          v397 = v394 & 0xFFFFFFFFFFFFFFF8;
          if (v393 <= 7)
            v397 = 0;
          if (v393 >= 8)
            v395 = 1 << (v394 & 7 | (8 * (v393 & 7)));
          *(_QWORD *)&v867 = v396;
          *((_QWORD *)&v867 + 1) = v397;
          *(_QWORD *)&v868 = v395;
          DWORD2(v868) = 0;
          v869 = 0uLL;
          v679[0] = v867;
          v679[1] = v868;
          v679[2] = 0uLL;
          *(_WORD *)&v901[16] = 257;
          sub_22E486A58(v582, (uint64_t)v679, 0, (uint64_t)&v900, (uint64_t)&v867);
          v398 = llvm::ConstantInt::get();
        }
        v412 = sub_22F10C2A4(*(_QWORD *)(v391[356] & 0xFFFFFFFFFFFFFFF0));
        if (v412)
        {
          if ((*(_DWORD *)(v412 + 28) & 0x7Eu) - 34 >= 4)
            v501 = 0;
          else
            v501 = v412;
          v531 = v501;
        }
        else
        {
          v531 = 0;
        }
        v414 = *(unsigned int **)(v577 + 24);
        if (v414)
        {
          v417 = *v414;
          v415 = (uint64_t *)(v414 + 4);
          v416 = v417;
          if (v417)
          {
            v418 = 8 * v416;
            v419 = v415;
            while (*(_DWORD *)(*v419 + 8) != 3)
            {
              ++v419;
              v418 -= 8;
              if (!v418)
                goto LABEL_404;
            }
          }
          else
          {
            v419 = v415;
          }
          v447 = &v415[v416];
          if (v419 == v447)
            goto LABEL_449;
          v529 = v398;
          v448 = 0;
          v449 = 0;
          v450 = *v419;
LABEL_435:
          v451 = (unsigned __int8 **)(v450 + 24);
          v452 = *(unsigned int *)(v450 + 16);
          v453 = &v451[v452];
          if (*v453)
          {
            v449 = 1;
          }
          else if ((_DWORD)v452)
          {
            v539 = v449;
            v454 = v578;
            do
            {
              v455 = sub_22E5A9A24((_QWORD *)v454, *v451, v413);
              v562 = v456;
              v677[0] = v867;
              v677[1] = v868;
              v677[2] = v869;
              *(_WORD *)&v855[32] = 257;
              sub_22F26D368(v582, (uint64_t)v677, v448, (uint64_t)v855, (uint64_t)v678);
              v457 = v576[356];
              *(_OWORD *)v894 = v678[0];
              *(_OWORD *)&v894[16] = v678[1];
              *(_OWORD *)&v894[32] = v678[2];
              sub_22E6281E0(*(_QWORD **)(v454 + 144), v457, (uint64_t)v861);
              *(_OWORD *)v914 = *(_OWORD *)v894;
              v915 = *(_OWORD *)&v894[16];
              v916 = *(_OWORD *)&v894[32];
              v458 = *(_QWORD *)(*(_QWORD *)(v454 + 144) + 144);
              *(_OWORD *)v876 = *(_OWORD *)v861;
              *(_OWORD *)&v876[16] = *(_OWORD *)&v861[16];
              *(_QWORD *)&v876[32] = *(_QWORD *)&v861[32];
              memset(v901, 0, 20);
              *((_QWORD *)&v900 + 1) = 0;
              *(_QWORD *)&v901[24] = 0;
              *(_QWORD *)&v901[32] = 0;
              v902 = 0uLL;
              *(_QWORD *)((char *)&v903 + 4) = 2;
              LODWORD(v900) = 0;
              *(_OWORD *)v904 = 0u;
              v905 = 0u;
              sub_22E3C113C((uint64_t)&v900, (__int128 *)v914, v457, 2, (__int128 *)v876, v458);
              v675[6] = *(_OWORD *)v904;
              v675[7] = v905;
              v676 = v906;
              v675[2] = *(_OWORD *)&v901[16];
              v675[3] = *(_OWORD *)&v901[32];
              v675[5] = v903;
              v675[4] = v902;
              v675[1] = *(_OWORD *)v901;
              v675[0] = v900;
              v459 = sub_22EFC3B90(v531);
              sub_22E4DD05C(v454, (uint64_t)v675, v459, (uint64_t)v914);
              v460 = *(_QWORD *)(v454 + 88);
              *(_WORD *)&v894[32] = 257;
              v461 = sub_22E3C1740(v582, 47, v455, v460, (uint64_t)v894);
              v673[6] = v920;
              v673[7] = v921;
              v674 = v922;
              v673[2] = v916;
              v673[3] = v917;
              v673[5] = v919;
              v673[4] = v918;
              v673[1] = v915;
              v673[0] = *(_OWORD *)v914;
              sub_22E4E87FC(v454, v461, (uint64_t)v673, 0);
              v671[6] = *(_OWORD *)v904;
              v671[7] = v905;
              v672 = v906;
              v671[2] = *(_OWORD *)&v901[16];
              v671[3] = *(_OWORD *)&v901[32];
              v671[5] = v903;
              v671[4] = v902;
              v671[1] = *(_OWORD *)v901;
              v671[0] = v900;
              v462 = sub_22EFC3B90(v531);
              do
                v462 = *(_QWORD *)(v462 + 8) & 0xFFFFFFFFFFFFFFF8;
              while (v462 && (*(_DWORD *)(v462 + 28) & 0x7Fu) - 49 > 2);
              v454 = v578;
              sub_22E4DD05C(v578, (uint64_t)v671, v462, (uint64_t)v894);
              v669[6] = v897;
              v669[7] = v898;
              v670 = v899;
              v669[2] = *(_OWORD *)&v894[32];
              v669[3] = *(_OWORD *)&v894[48];
              v669[5] = v896;
              v669[4] = v895;
              v669[1] = *(_OWORD *)&v894[16];
              v669[0] = *(_OWORD *)v894;
              v413.n128_f64[0] = sub_22E4E87FC(v578, v562, (uint64_t)v669, 0);
              ++v448;
              ++v451;
            }
            while (v451 != v453);
            v449 = v539;
          }
          v463 = v419 + 1;
          v233 = v563;
          v398 = v529;
          while (v463 != v447)
          {
            v464 = *v463++;
            v450 = v464;
            if (*(_DWORD *)(v464 + 8) == 3)
            {
              v419 = v463 - 1;
              goto LABEL_435;
            }
          }
          if ((v449 & 1) != 0)
          {
            v507 = sub_22EF67C8C(v550);
            *(_QWORD *)v861 = "affs.counter.addr";
            *(_WORD *)&v861[32] = 259;
            v508 = sub_22F25E4D4(v578, v507, (uint64_t)v861, 0);
            v510 = 0;
            if (v508 <= 7)
              v511 = 0;
            else
              v511 = (void *)(v508 & 0xFFFFFFFFFFFFFFF8);
            if (v508 <= 7)
              v512 = 0;
            else
              v512 = (void *)(v509 & 0xFFFFFFFFFFFFFFF8);
            v269 = v567;
            if (v508 >= 8)
              v510 = 1 << (v509 & 7 | (8 * (v508 & 7)));
            v513 = sub_22EF67C8C(v550);
            sub_22E6281E0(*(_QWORD **)(v578 + 144), v513, (uint64_t)v876);
            v914[0] = v511;
            v914[1] = v512;
            *(_QWORD *)&v915 = v510;
            DWORD2(v915) = 0;
            v916 = 0uLL;
            v514 = *(_QWORD *)(*(_QWORD *)(v578 + 144) + 144);
            *(_OWORD *)v894 = *(_OWORD *)v876;
            *(_OWORD *)&v894[16] = *(_OWORD *)&v876[16];
            *(_QWORD *)&v894[32] = *(_QWORD *)&v876[32];
            memset(v901, 0, 20);
            *((_QWORD *)&v900 + 1) = 0;
            *(_QWORD *)&v901[32] = 0;
            *(_QWORD *)&v901[24] = 0;
            v902 = 0uLL;
            *(_QWORD *)((char *)&v903 + 4) = 2;
            LODWORD(v900) = 0;
            v905 = 0u;
            *(_OWORD *)v904 = 0u;
            sub_22E3C113C((uint64_t)&v900, (__int128 *)v914, v513, 2, (__int128 *)v894, v514);
            v420 = *((_QWORD *)&v900 + 1);
            v528 = v900;
            v554 = *(_QWORD *)&v901[8];
            v561 = *(_QWORD *)v901;
            v527 = *(_DWORD *)&v901[20];
            v551 = *(_DWORD *)&v901[16];
            v541 = *(_QWORD *)&v901[32];
            v542 = *(_QWORD *)&v901[24];
            v526 = *(_QWORD *)&v901[40];
            v540 = v902;
            v538 = __PAIR64__(DWORD2(v902), HIDWORD(v902));
            v537 = DWORD2(v903);
            v535 = DWORD1(v903);
            v524 = HIDWORD(v903);
            v525 = v903;
            v536 = v904[0];
            v515 = v904[1];
            v516 = v905;
            v517 = v906;
            v518 = llvm::ConstantInt::get();
            v659[0] = v528;
            v659[1] = v420;
            v659[2] = v561;
            v659[3] = v554;
            v659[4] = __PAIR64__(v527, v551);
            v659[5] = v542;
            v659[6] = v541;
            v659[7] = v526;
            v659[8] = v540;
            v660 = HIDWORD(v538);
            v661 = v538;
            v662 = v525;
            v663 = __PAIR64__(v537, v535);
            v664 = v524;
            v665 = v536;
            v533 = v516;
            v534 = v515;
            v666 = v515;
            v532 = *((_QWORD *)&v516 + 1);
            v667 = v516;
            v523 = v517;
            v668 = v517;
            sub_22E4E87FC(v578, v518, (uint64_t)v659, 0);
            v391 = v576;
          }
          else
          {
LABEL_449:
            v420 = 0;
            v561 = 0;
            v554 = 0;
            v551 = 0;
            v541 = 0;
            v542 = 0;
            v538 = 0;
            v540 = 0;
            v537 = 0;
            v536 = 0;
            v533 = 0;
            v534 = 0;
            v532 = 0;
            v535 = 2;
            v391 = v576;
            v269 = v567;
          }
        }
        else
        {
LABEL_404:
          v420 = 0;
          v561 = 0;
          v554 = 0;
          v551 = 0;
          v541 = 0;
          v542 = 0;
          v538 = 0;
          v540 = 0;
          v537 = 0;
          v536 = 0;
          v533 = 0;
          v534 = 0;
          v532 = 0;
          v535 = 2;
        }
        v465 = *(unsigned int **)(v577 + 24);
        if (v465)
        {
          v468 = *v465;
          v466 = (uint64_t *)(v465 + 4);
          v467 = v468;
          if (v468)
          {
            v469 = 8 * v467;
            v470 = v466;
            while (*(_DWORD *)(*v470 + 8) != 3)
            {
              ++v470;
              v469 -= 8;
              if (!v469)
                goto LABEL_471;
            }
          }
          else
          {
            v470 = v466;
          }
          v471 = &v466[v467];
          if (v470 != v471)
          {
            v472 = *v470;
            v530 = v398;
LABEL_459:
            v473 = (unsigned __int8 **)(v472 + 24);
            v474 = *(unsigned __int8 **)(v472 + 24 + 8 * *(unsigned int *)(v472 + 16));
            if (v474)
            {
              v475 = sub_22EFFA6B0(v474);
              v476 = v578;
              sub_22E5A9CC0((uint64_t)&v900, v578, (uint64_t)v475, v477);
              v479 = *(unsigned int *)(v472 + 16);
              if ((_DWORD)v479)
              {
                v519 = &v473[v479];
                v520 = v420;
                do
                {
                  v480 = *v473;
                  v521 = sub_22E5A9A24((_QWORD *)v476, *v473, v478);
                  v522 = v481;
                  v641[0] = v528;
                  v641[1] = v420;
                  v641[2] = v561;
                  v641[3] = v554;
                  v642 = v551;
                  v643 = v527;
                  v644 = v542;
                  v645 = v541;
                  v646 = v526;
                  v647 = v540;
                  v648 = HIDWORD(v538);
                  v649 = v538;
                  v650 = v525;
                  v651 = v535;
                  v652 = v537;
                  v653 = v524;
                  v654 = v536;
                  v655 = v534;
                  v656 = v533;
                  v657 = v532;
                  v658 = v523;
                  sub_22EFF605C((uint64_t)v480);
                  v483 = (uint64_t *)sub_22F25F748(v476, (uint64_t)v641, v482);
                  v639[0] = v867;
                  v639[1] = v868;
                  v639[2] = v869;
                  LOWORD(v848) = 257;
                  sub_22F27F744(v582, v476, (uint64_t)v639, v483, (uint64_t)&v846, (uint64_t)v640);
                  v484 = v391[356];
                  *(_OWORD *)v876 = v640[0];
                  *(_OWORD *)&v876[16] = v640[1];
                  *(_OWORD *)&v876[32] = v640[2];
                  sub_22E6281E0(*(_QWORD **)(v476 + 144), v484, (uint64_t)v855);
                  *(_OWORD *)v894 = *(_OWORD *)v876;
                  *(_OWORD *)&v894[16] = *(_OWORD *)&v876[16];
                  *(_OWORD *)&v894[32] = *(_OWORD *)&v876[32];
                  v485 = *(_QWORD *)(*(_QWORD *)(v476 + 144) + 144);
                  *(_OWORD *)v861 = *(_OWORD *)v855;
                  *(_OWORD *)&v861[16] = *(_OWORD *)&v855[16];
                  *(_QWORD *)&v861[32] = *(_QWORD *)&v855[32];
                  v915 = 0uLL;
                  v914[1] = 0;
                  LODWORD(v916) = 0;
                  *((_QWORD *)&v916 + 1) = 0;
                  *(_QWORD *)&v917 = 0;
                  v918 = 0uLL;
                  *(_QWORD *)((char *)&v919 + 4) = 2;
                  LODWORD(v914[0]) = 0;
                  v920 = 0u;
                  v921 = 0u;
                  sub_22E3C113C((uint64_t)v914, (__int128 *)v894, v484, 2, (__int128 *)v861, v485);
                  v637[6] = v920;
                  v637[7] = v921;
                  v638 = v922;
                  v637[2] = v916;
                  v637[3] = v917;
                  v637[5] = v919;
                  v637[4] = v918;
                  v637[1] = v915;
                  v637[0] = *(_OWORD *)v914;
                  v486 = sub_22EFC3B90(v531);
                  sub_22E4DD05C(v476, (uint64_t)v637, v486, (uint64_t)v894);
                  v487 = *(_QWORD *)(v476 + 88);
                  *(_WORD *)&v876[32] = 257;
                  v488 = sub_22E3C1740(v582, 47, v521, v487, (uint64_t)v876);
                  v635[6] = v897;
                  v635[7] = v898;
                  v636 = v899;
                  v635[2] = *(_OWORD *)&v894[32];
                  v635[3] = *(_OWORD *)&v894[48];
                  v635[5] = v896;
                  v635[4] = v895;
                  v635[1] = *(_OWORD *)&v894[16];
                  v635[0] = *(_OWORD *)v894;
                  sub_22E4E87FC(v476, v488, (uint64_t)v635, 0);
                  v633[6] = v920;
                  v633[7] = v921;
                  v634 = v922;
                  v633[2] = v916;
                  v633[3] = v917;
                  v633[5] = v919;
                  v633[4] = v918;
                  v633[1] = v915;
                  v633[0] = *(_OWORD *)v914;
                  v489 = sub_22EFC3B90(v531);
                  do
                    v489 = *(_QWORD *)(v489 + 8) & 0xFFFFFFFFFFFFFFF8;
                  while (v489 && (*(_DWORD *)(v489 + 28) & 0x7Fu) - 49 > 2);
                  v476 = v578;
                  sub_22E4DD05C(v578, (uint64_t)v633, v489, (uint64_t)v876);
                  v631[6] = v879;
                  v631[7] = v880;
                  v632 = v881;
                  v631[2] = *(_OWORD *)&v876[32];
                  v631[3] = *(_OWORD *)&v876[48];
                  v631[5] = v878;
                  v631[4] = v877;
                  v631[1] = *(_OWORD *)&v876[16];
                  v631[0] = *(_OWORD *)v876;
                  sub_22E4E87FC(v578, v522, (uint64_t)v631, 0);
                  v490 = llvm::ConstantInt::get();
                  *(_WORD *)&v861[32] = 257;
                  v491 = sub_22F26180C((uint64_t)v582, (uint64_t)v483, v490, (uint64_t)v861);
                  v613[0] = v528;
                  v420 = v520;
                  v613[1] = v520;
                  v613[2] = v561;
                  v613[3] = v554;
                  v614 = v551;
                  v615 = v527;
                  v616 = v542;
                  v617 = v541;
                  v618 = v526;
                  v619 = v540;
                  v620 = HIDWORD(v538);
                  v621 = v538;
                  v622 = v525;
                  v623 = v535;
                  v624 = v537;
                  v625 = v524;
                  v626 = v536;
                  v627 = v534;
                  v628 = v533;
                  v629 = v532;
                  v630 = v523;
                  v478.n128_f64[0] = sub_22E4E87FC(v578, (uint64_t)v491, (uint64_t)v613, 0);
                  ++v473;
                  v391 = v576;
                }
                while (v473 != v519);
              }
              sub_22E5AA440(&v900);
              v398 = v530;
            }
            v492 = v470 + 1;
            v269 = v567;
            while (v492 != v471)
            {
              v493 = *v492++;
              v472 = v493;
              if (*(_DWORD *)(v493 + 8) == 3)
              {
                v470 = v492 - 1;
                goto LABEL_459;
              }
            }
          }
        }
LABEL_471:
        v494 = sub_22E59F7E4(v391, v578, v585);
        v495 = sub_22E59F964((uint64_t)v391, v578, v585);
        if ((BYTE8(v868) & 3) != 0)
          v496 = sub_22F28ABCC(&v867, (_QWORD *)v578);
        else
          v496 = v867;
        v497 = *(_QWORD *)(v391[1] + 96);
        *(_WORD *)&v901[16] = 257;
        v498 = sub_22E3C1338(v582, v496, v497, (uint64_t)&v900);
        v499 = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
        *(_QWORD *)&v900 = v494;
        *((_QWORD *)&v900 + 1) = v495;
        *(_QWORD *)v901 = v269;
        *(_QWORD *)&v901[8] = v398;
        *(_QWORD *)&v901[16] = v498;
        LOWORD(v916) = 257;
        sub_22E479C7C(v578, v499, v500, (uint64_t)&v900, 5, (uint64_t)v914);
      }
    }
  }
LABEL_277:
  *(_WORD *)&v901[16] = 257;
  v294 = sub_22E3C1338(v582, (uint64_t)v269, v557, (uint64_t)&v900);
  sub_22E619C24(v294, v569, 0, 0, v578, (uint64_t)&v784);
  v611[6] = v790;
  v611[7] = v791;
  v612 = v792;
  v611[2] = v786;
  v611[3] = v787;
  v611[5] = v789;
  v611[4] = v788;
  v611[1] = v785;
  v611[0] = v784;
  v295 = sub_22EFC3B90(v574);
  sub_22E4DD05C(v578, (uint64_t)v611, v295, (uint64_t)&v774);
  v296 = sub_22F10E26C(*v225);
  v297 = sub_22F114198(*(_QWORD *)(v296 + 24));
  if (sub_22EFC3B90(v297))
  {
    v608[6] = v780;
    v608[7] = v781;
    v609 = v782;
    v608[2] = v776;
    v608[3] = v777;
    v608[5] = v779;
    v608[4] = v778;
    v608[1] = v775;
    v608[0] = v774;
    v334 = sub_22EFC3B90(v564);
    v301 = v578;
    sub_22E4DD05C(v578, (uint64_t)v608, v334, (uint64_t)v610);
    v300 = (void *)sub_22F25F748(v578, (uint64_t)v610, v585);
    v299 = *(void **)(v578 + 8);
    v298 = sub_22E62D754((_QWORD *)v576[1], v573, 0, 0, 0);
    sub_22E6281E0(*(_QWORD **)(v578 + 144), v573, (uint64_t)v876);
    v914[0] = v300;
    v914[1] = v299;
    *(_QWORD *)&v915 = v298;
    DWORD2(v915) = 0;
    v916 = 0uLL;
    v335 = *(_QWORD *)(*(_QWORD *)(v578 + 144) + 144);
    *(_OWORD *)v894 = *(_OWORD *)v876;
    *(_OWORD *)&v894[16] = *(_OWORD *)&v876[16];
    *(_QWORD *)&v894[32] = *(_QWORD *)&v876[32];
    memset(v901, 0, 20);
    *((_QWORD *)&v900 + 1) = 0;
    *(_QWORD *)&v901[32] = 0;
    *(_QWORD *)&v901[24] = 0;
    v902 = 0uLL;
    *(_QWORD *)((char *)&v903 + 4) = 2;
    LODWORD(v900) = 0;
    v905 = 0u;
    *(_OWORD *)v904 = 0u;
    sub_22E3C113C((uint64_t)&v900, (__int128 *)v914, v573, 2, (__int128 *)v894, v335);
    v336 = v545[1];
    *(_OWORD *)v876 = *v545;
    *(_OWORD *)&v876[16] = v336;
    *(_OWORD *)&v876[32] = v545[2];
    sub_22E6281E0(*(_QWORD **)(v578 + 144), v573, (uint64_t)v861);
    *(_OWORD *)v894 = *(_OWORD *)v876;
    *(_OWORD *)&v894[16] = *(_OWORD *)&v876[16];
    *(_OWORD *)&v894[32] = *(_OWORD *)&v876[32];
    v337 = *(_QWORD *)(*(_QWORD *)(v578 + 144) + 144);
    v867 = *(_OWORD *)v861;
    v868 = *(_OWORD *)&v861[16];
    *(_QWORD *)&v869 = *(_QWORD *)&v861[32];
    LODWORD(v916) = 0;
    v914[1] = 0;
    v915 = 0uLL;
    *(_QWORD *)&v917 = 0;
    *((_QWORD *)&v916 + 1) = 0;
    v918 = 0uLL;
    *(_QWORD *)((char *)&v919 + 4) = 2;
    LODWORD(v914[0]) = 0;
    v921 = 0u;
    v920 = 0u;
    sub_22E3C113C((uint64_t)v914, (__int128 *)v894, v573, 2, &v867, v337);
    v606[6] = *(_OWORD *)v904;
    v606[7] = v905;
    v607 = v906;
    v606[2] = *(_OWORD *)&v901[16];
    v606[3] = *(_OWORD *)&v901[32];
    v606[5] = v903;
    v606[4] = v902;
    v606[1] = *(_OWORD *)v901;
    v606[0] = v900;
    v604[6] = v920;
    v604[7] = v921;
    v605 = v922;
    v604[2] = v916;
    v604[3] = v917;
    v604[5] = v919;
    v604[4] = v918;
    v604[1] = v915;
    v604[0] = *(_OWORD *)v914;
    sub_22E4EF4B8((_QWORD *)v578, v606, v604, v573, 0, 0);
  }
  else
  {
    v298 = 0;
    v299 = 0;
    v300 = 0;
    v301 = v578;
  }
  *(_QWORD *)v233 = 0;
  *(_QWORD *)(v233 + 8) = 0;
  *(_QWORD *)(v233 + 16) = 0;
  *(_QWORD *)(v233 + 40) = 0;
  *(_QWORD *)(v233 + 48) = 0;
  *(_QWORD *)(v233 + 32) = 0;
  *(_DWORD *)(v233 + 56) = 0;
  *(_QWORD *)(v233 + 64) = 0;
  *(_QWORD *)(v233 + 72) = 0;
  *(_QWORD *)(v233 + 88) = 0;
  *(_QWORD *)(v233 + 96) = 0;
  *(_QWORD *)(v233 + 108) = 2;
  *(_OWORD *)(v233 + 120) = 0u;
  *(_OWORD *)(v233 + 136) = 0u;
  *(_QWORD *)(v233 + 160) = 0;
  *(_QWORD *)(v233 + 168) = 0;
  if ((_DWORD)v883)
  {
    v600[0] = v300;
    v600[1] = v299;
    v600[2] = v298;
    v601 = 0;
    v603 = 0;
    v602 = 0;
    v598[6] = v790;
    v598[7] = v791;
    v599 = v792;
    v598[2] = v786;
    v598[3] = v787;
    v598[5] = v789;
    v598[4] = v788;
    v598[1] = v785;
    v598[0] = v784;
    sub_22E5AA52C(v301, v577, (uint64_t)v600, v598, v574, v573, v565, a9, (uint64_t)v882, v883, 0);
    v302 = *(_DWORD *)(v577 + 8) - 36;
    if (v302 <= 0x29 && ((1 << v302) & 0x30000000C03) != 0)
    {
      v303 = *(_DWORD *)(a9 + 248);
      v304 = (char *)v882;
      v305 = v883;
      if (v303)
        goto LABEL_406;
      if ((_DWORD)v883)
      {
        v306 = (char *)v882 + 40 * v883;
        while (1)
        {
          v307 = *((_QWORD *)v304 + 3);
          if (v307)
          {
            v308 = 0;
            v309 = *((_QWORD *)v304 + 3);
            while (1)
            {
              v310 = (_BYTE *)sub_22EFBC5B4(v309);
              if (v310)
                break;
              if ((*(_BYTE *)(v309 + 72) & 3) != 0)
              {
                if (v308)
                  goto LABEL_296;
                v308 = 1;
              }
              v311 = sub_22E3CD31C((uint64_t *)(v309 + 72), v309);
              if (v311 != v307)
              {
                v309 = v311;
                if (v311)
                  continue;
              }
              goto LABEL_296;
            }
            if ((*v310 & 0xFE) == 0x76 && !sub_22E4C9FC8(v301, (uint64_t)v310))
              break;
          }
LABEL_296:
          v304 += 40;
          if (v304 == v306)
            goto LABEL_297;
        }
        v303 = *(_DWORD *)(a9 + 248);
        v304 = (char *)v882;
        v305 = v883;
LABEL_406:
        v570 = (uint64_t *)v576[1];
        v421 = v570[18];
        v914[0] = &v915;
        v914[1] = (void *)0x1000000000;
        sub_22EA41AB8((uint64_t)&v765, 62, 0, v585);
        *((_QWORD *)&v767 + 1) = 0;
        v768 = v572;
        LODWORD(v769) = v585;
        *((_QWORD *)&v769 + 1) = v421 | 2;
        v770 = (unint64_t)&v765;
        *(_QWORD *)&v765 = &off_24FAC3008;
        LODWORD(v771) = 1310720;
        HIDWORD(v766) |= 0x200u;
        sub_22EA41AB8((uint64_t)v756, 62, 0, v585);
        *((_QWORD *)&v758 + 1) = 0;
        v759 = v572;
        LODWORD(v760) = v585;
        *((_QWORD *)&v760 + 1) = v421 | 2;
        *(_QWORD *)&v761 = v756;
        *((_QWORD *)&v761 + 1) = 0;
        v756[0] = (llvm *)&off_24FAC3008;
        LODWORD(v762) = 1310720;
        HIDWORD(v757) |= 0x200u;
        v422 = *(_QWORD *)(v421 + 16480);
        sub_22EA41AB8((uint64_t)&__p, 62, 0, v585);
        *((_QWORD *)&v749 + 1) = 0;
        v750 = v422;
        LODWORD(v751) = v585;
        *((_QWORD *)&v751 + 1) = v421 | 2;
        *(_QWORD *)&v752 = &__p;
        *((_QWORD *)&v752 + 1) = 0;
        *(_QWORD *)&__p = &off_24FAC3008;
        LODWORD(v753) = 1310720;
        HIDWORD(v748) |= 0x200u;
        v423 = v914[1];
        if (LODWORD(v914[1]) >= HIDWORD(v914[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v423 = v914[1];
        }
        *((_QWORD *)v914[0] + v423) = &v765;
        v424 = LODWORD(v914[1]) + 1;
        LODWORD(v914[1]) = v424;
        if (v424 >= HIDWORD(v914[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v424 = v914[1];
        }
        *((_QWORD *)v914[0] + v424) = v756;
        v425 = LODWORD(v914[1]) + 1;
        LODWORD(v914[1]) = v425;
        v233 = v563;
        if (v425 >= HIDWORD(v914[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v425 = v914[1];
        }
        *((_QWORD *)v914[0] + v425) = &__p;
        ++LODWORD(v914[1]);
        v426 = sub_22F24E348((uint64_t)(v570 + 35), *(_QWORD *)(v421 + 16392), (uint64_t *)v914);
        v427 = sub_22E46F2EC((uint64_t)(v570 + 35), v426);
        v428 = v570[101];
        v900 = xmmword_24FA65D08;
        *(_OWORD *)v901 = off_24FA65D18;
        sub_22F27BE70((std::string *)v711, v428, (uint64_t)&v900, 2);
        *(_WORD *)&v901[16] = 260;
        *(_QWORD *)&v900 = v711;
        v429 = v570[25];
        v430 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x78);
        MEMORY[0x23489F6FC](v430, v427, 7, 0xFFFFFFFFLL, &v900, v429);
        sub_22E62BF18(v570, 0, 0, v430, v426);
        llvm::Function::addFnAttr();
        sub_22E618EBC((uint64_t)&v900, (uint64_t)v570, 0);
        sub_22E61A8FC((uint64_t)&v900, 0, 0, *(_QWORD *)(v421 + 16392), v430, v426, (uint64_t *)v914, v585, v431, v585);
        *(_QWORD *)v876 = &v765;
        *(_QWORD *)v894 = 0;
        v432 = sub_22E3CED3C(v912, v876, v894);
        v433 = *(_QWORD *)v894;
        if (!v432)
          v433 = v912[0] + 56 * v913;
        v434 = *(_OWORD *)(v433 + 24);
        v738 = *(_OWORD *)(v433 + 8);
        v739 = v434;
        v740 = *(_OWORD *)(v433 + 40);
        v435 = *v547;
        if (!*v547 || *(_BYTE *)(v435 + 16) != 39)
          v435 = sub_22F10CF48(*v547);
        v436 = v564;
        sub_22F25FAEC((uint64_t)&v900, &v738, v435, (uint64_t)v894);
        if (v303)
        {
          v437 = sub_22EFC3B90(v564);
          v438 = 8;
          do
          {
            do
              v437 = *(_QWORD *)(v437 + 8) & 0xFFFFFFFFFFFFFFF8;
            while (v437 && (*(_DWORD *)(v437 + 28) & 0x7Fu) - 49 > 2);
            v66 = v438-- > 1;
          }
          while (v66);
          v873 = v897;
          v874 = v898;
          v875 = v899;
          v869 = *(_OWORD *)&v894[32];
          v870 = *(_OWORD *)&v894[48];
          v872 = v896;
          v871 = v895;
          v868 = *(_OWORD *)&v894[16];
          v867 = *(_OWORD *)v894;
          v439 = sub_22EFC3B90(v574);
          sub_22E4DD05C((uint64_t)&v900, (uint64_t)&v867, v439, (uint64_t)v876);
          v858 = v879;
          v859 = v880;
          v860 = v881;
          *(_OWORD *)&v855[32] = *(_OWORD *)&v876[32];
          *(_OWORD *)&v855[48] = *(_OWORD *)&v876[48];
          v857 = v878;
          v856 = v877;
          *(_OWORD *)&v855[16] = *(_OWORD *)&v876[16];
          *(_OWORD *)v855 = *(_OWORD *)v876;
          sub_22E4DD05C((uint64_t)&v900, (uint64_t)v855, v437, (uint64_t)v861);
          *(_QWORD *)&v837 = &__p;
          *(_QWORD *)&v846 = 0;
          v440 = sub_22E3CED3C(v912, &v837, &v846);
          v441 = v912[0] + 56 * v913;
          if (v440)
            v441 = v846;
          v731 = *(_OWORD *)(v441 + 40);
          v730 = *(_OWORD *)(v441 + 24);
          v729 = *(_OWORD *)(v441 + 8);
          v442 = *(_QWORD *)(v421 + 16480);
          v846 = v729;
          v847 = v730;
          v848 = v731;
          sub_22E6281E0(v907, v442, (uint64_t)&v837);
          v443 = sub_22E4E6994((uint64_t)&v900, (uint64_t)&v846, 0, v442, v585, 2, (uint64_t)&v837, 0);
          v852 = v864;
          v853 = v865;
          v854 = v866;
          v848 = *(_OWORD *)&v861[32];
          v849 = *(_OWORD *)&v861[48];
          v851 = v863;
          v850 = v862;
          v847 = *(_OWORD *)&v861[16];
          v846 = *(_OWORD *)v861;
          sub_22E4E87FC((uint64_t)&v900, v443, (uint64_t)&v846, 0);
          v436 = v564;
        }
        if (*(_DWORD *)(a9 + 104))
        {
          *(_QWORD *)v861 = v756;
          *(_QWORD *)v876 = 0;
          v502 = sub_22E3CED3C(v912, v861, v876);
          v503 = *(_QWORD *)v876;
          if (!v502)
            v503 = v912[0] + 56 * v913;
          v720 = *(_OWORD *)(v503 + 8);
          v721 = *(_OWORD *)(v503 + 24);
          v722 = *(_OWORD *)(v503 + 40);
          v504 = *v547;
          if (!*v547 || *(_BYTE *)(v504 + 16) != 39)
            v504 = sub_22F10CF48(*v547);
          sub_22F25FAEC((uint64_t)&v900, &v720, v504, (uint64_t)v876);
          v843 = v879;
          v844 = v880;
          v845 = v881;
          v839 = *(_OWORD *)&v876[32];
          v840 = *(_OWORD *)&v876[48];
          v842 = v878;
          v841 = v877;
          v838 = *(_OWORD *)&v876[16];
          v837 = *(_OWORD *)v876;
          v505 = sub_22EFC3B90(v574);
          sub_22E4DD05C((uint64_t)&v900, (uint64_t)&v837, v505, (uint64_t)v861);
          v825 = v864;
          v826 = v865;
          v827 = v866;
          v821 = *(_OWORD *)&v861[32];
          v822 = *(_OWORD *)&v861[48];
          v824 = v863;
          v823 = v862;
          v820 = *(_OWORD *)&v861[16];
          *(_OWORD *)v819 = *(_OWORD *)v861;
          v506 = sub_22EFC3B90(v436);
          sub_22E4DD05C((uint64_t)&v900, (uint64_t)v819, v506, (uint64_t)&v828);
          v444 = sub_22F25F748((uint64_t)&v900, (uint64_t)&v828, v585);
          v445 = *((_QWORD *)&v900 + 1);
          v446 = sub_22E62D754(v570, v573, 0, 0, 0);
        }
        else
        {
          v444 = 0;
          v445 = 0;
          v446 = 0;
        }
        *(_QWORD *)v861 = v444;
        *(_QWORD *)&v861[8] = v445;
        *(_QWORD *)&v861[16] = v446;
        *(_DWORD *)&v861[24] = 0;
        *(_OWORD *)&v861[32] = 0uLL;
        v879 = v897;
        v880 = v898;
        v881 = v899;
        *(_OWORD *)&v876[32] = *(_OWORD *)&v894[32];
        *(_OWORD *)&v876[48] = *(_OWORD *)&v894[48];
        v878 = v896;
        v877 = v895;
        *(_OWORD *)&v876[16] = *(_OWORD *)&v894[16];
        *(_OWORD *)v876 = *(_OWORD *)v894;
        sub_22E5AA52C((uint64_t)&v900, v577, (uint64_t)v861, (__int128 *)v876, v574, v573, v565, a9, (uint64_t)v304, v305, 1u);
        sub_22E619DE8((uint64_t)&v900, 0);
        sub_22E619434((uint64_t)&v900);
        if (SBYTE7(v712) < 0)
          operator delete(v711[0]);
        v301 = v578;
        if (v914[0] != &v915)
          free(v914[0]);
        *(_QWORD *)(v563 + 168) = v430;
      }
    }
  }
LABEL_297:
  v312 = v564;
  v313 = sub_22EFC3B90(v564);
  v314 = 3;
  do
  {
    do
      v313 = *(_QWORD *)(v313 + 8) & 0xFFFFFFFFFFFFFFF8;
    while (v313 && (*(_DWORD *)(v313 + 28) & 0x7Fu) - 49 > 2);
    v66 = v314-- > 1;
  }
  while (v66);
  v315 = sub_22F10E2FC(*(_QWORD *)(*(_QWORD *)(v313 + 48) & 0xFFFFFFFFFFFFFFF0));
  v316 = sub_22F114198(*(_QWORD *)(v315 + 24));
  v317 = a9;
  if (v556)
  {
    v338 = (uint64_t *)v576[1];
    v339 = v338[18];
    v914[0] = &v915;
    v914[1] = (void *)0x1000000000;
    sub_22EA41AB8((uint64_t)v855, 62, 0, v585);
    *(_QWORD *)&v855[40] = 0;
    *(_OWORD *)&v855[48] = v575;
    LODWORD(v856) = v585;
    v339 |= 2uLL;
    *((_QWORD *)&v856 + 1) = v339;
    v857 = (unint64_t)v855;
    *(_QWORD *)v855 = &off_24FAC3008;
    LODWORD(v858) = 1310720;
    *(_DWORD *)&v855[28] |= 0x200u;
    sub_22EA41AB8((uint64_t)&v846, 62, 0, v585);
    *((_QWORD *)&v848 + 1) = 0;
    v849 = v572 | 2;
    LODWORD(v850) = v585;
    *((_QWORD *)&v850 + 1) = v339;
    v851 = (unint64_t)&v846;
    *(_QWORD *)&v846 = &off_24FAC3008;
    LODWORD(v852) = 1310720;
    HIDWORD(v847) |= 0x200u;
    v340 = v914[1];
    if (LODWORD(v914[1]) >= HIDWORD(v914[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v340 = v914[1];
    }
    *((_QWORD *)v914[0] + v340) = v855;
    v341 = LODWORD(v914[1]) + 1;
    LODWORD(v914[1]) = v341;
    if (v341 >= HIDWORD(v914[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v341 = v914[1];
    }
    *((_QWORD *)v914[0] + v341) = &v846;
    ++LODWORD(v914[1]);
    v342 = sub_22F24E348((uint64_t)(v338 + 35), v575, (uint64_t *)v914);
    v343 = sub_22E46F2EC((uint64_t)(v338 + 35), v342);
    v344 = v338[101];
    v900 = xmmword_24FA65D28;
    *(_OWORD *)v901 = off_24FA65D38;
    sub_22F27BE70((std::string *)v819, v344, (uint64_t)&v900, 2);
    *(_WORD *)&v901[16] = 260;
    *(_QWORD *)&v900 = v819;
    v345 = v338[25];
    v346 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x78);
    MEMORY[0x23489F6FC](v346, v343, 7, 0xFFFFFFFFLL, &v900, v345);
    sub_22E62BF18(v338, 0, 0, v346, v342);
    llvm::Function::addFnAttr();
    sub_22E618EBC((uint64_t)&v900, (uint64_t)v338, 0);
    sub_22E61A8FC((uint64_t)&v900, 0, 0, v575, v346, v342, (uint64_t *)v914, v585, v347, v585);
    *(_QWORD *)v876 = &v846;
    *(_QWORD *)v894 = 0;
    v348 = sub_22E3CED3C(v912, v876, v894);
    v349 = *(_QWORD *)v894;
    if (!v348)
      v349 = v912[0] + 56 * v913;
    v837 = *(_OWORD *)(v349 + 8);
    v838 = *(_OWORD *)(v349 + 24);
    v839 = *(_OWORD *)(v349 + 40);
    v350 = *v547;
    if (!*v547 || *(_BYTE *)(v350 + 16) != 39)
      v350 = sub_22F10CF48(*v547);
    v233 = v563;
    v317 = a9;
    v301 = v578;
    sub_22F25FAEC((uint64_t)&v900, &v837, v350, (uint64_t)v894);
    v351 = sub_22F10C2A4(*v543);
    v352 = sub_22EFC3B90(v351);
    do
      v352 = *(_QWORD *)(v352 + 8) & 0xFFFFFFFFFFFFFFF8;
    while (v352 && (*(_DWORD *)(v352 + 28) & 0x7Fu) - 49 > 2);
    v873 = v897;
    v874 = v898;
    v875 = v899;
    v869 = *(_OWORD *)&v894[32];
    v870 = *(_OWORD *)&v894[48];
    v872 = v896;
    v871 = v895;
    v868 = *(_OWORD *)&v894[16];
    v867 = *(_OWORD *)v894;
    sub_22E4DD05C((uint64_t)&v900, (uint64_t)&v867, v352, (uint64_t)v876);
    v897 = v879;
    v898 = v880;
    v899 = v881;
    *(_OWORD *)&v894[32] = *(_OWORD *)&v876[32];
    *(_OWORD *)&v894[48] = *(_OWORD *)&v876[48];
    v896 = v878;
    v895 = v877;
    *(_OWORD *)&v894[16] = *(_OWORD *)&v876[16];
    *(_OWORD *)v894 = *(_OWORD *)v876;
    v353 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(v352 + 48) & 0xFFFFFFFFFFFFFFF0));
    v354 = sub_22EFC3B90(v353);
    if (v354)
    {
      v355 = v354;
LABEL_338:
      v356 = sub_22F115260(*(_QWORD *)(v355 + 48));
      if (v356)
      {
        v357 = v356;
        v864 = v897;
        v865 = v898;
        v866 = v899;
        *(_OWORD *)&v861[32] = *(_OWORD *)&v894[32];
        *(_OWORD *)&v861[48] = *(_OWORD *)&v894[48];
        v863 = v896;
        v862 = v895;
        *(_OWORD *)&v861[16] = *(_OWORD *)&v894[16];
        *(_OWORD *)v861 = *(_OWORD *)v894;
        sub_22E4DD05C((uint64_t)&v900, (uint64_t)v861, v355, (uint64_t)v876);
        v828 = *(_OWORD *)&v876[8];
        v829 = *(_OWORD *)&v876[24];
        v830 = *(_OWORD *)&v876[40];
        sub_22F259F50((uint64_t)&v900, v357, &v828, *(_QWORD *)(v355 + 48));
      }
      while (1)
      {
        v355 = *(_QWORD *)(v355 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (!v355)
          break;
        if ((*(_DWORD *)(v355 + 28) & 0x7Fu) - 49 < 3)
          goto LABEL_338;
      }
    }
    sub_22E619DE8((uint64_t)&v900, 0);
    sub_22E619434((uint64_t)&v900);
    if (SBYTE7(v820) < 0)
      operator delete(v819[0]);
    v312 = v564;
    if (v914[0] != &v915)
      free(v914[0]);
    v596[6] = v780;
    v596[7] = v781;
    v597 = v782;
    v596[2] = v776;
    v596[3] = v777;
    v596[5] = v779;
    v596[4] = v778;
    v596[1] = v775;
    v596[0] = v774;
    sub_22E4DD05C(v578, (uint64_t)v596, v313, (uint64_t)&v900);
    v594[6] = *(_OWORD *)v904;
    v594[7] = v905;
    v595 = v906;
    v594[2] = *(_OWORD *)&v901[16];
    v594[3] = *(_OWORD *)&v901[32];
    v594[5] = v903;
    v594[4] = v902;
    v594[1] = *(_OWORD *)v901;
    v594[0] = v900;
    v358 = sub_22EFC3B90(v316);
    do
      v358 = *(_QWORD *)(v358 + 8) & 0xFFFFFFFFFFFFFFF8;
    while (v358 && (*(_DWORD *)(v358 + 28) & 0x7Fu) - 49 > 2);
    sub_22E4DD05C(v578, (uint64_t)v594, v358, (uint64_t)v914);
    v359 = v576[350];
    *(_WORD *)&v894[32] = 257;
    v360 = sub_22E3C1338(v582, (uint64_t)v346, v359, (uint64_t)v894);
    v592[6] = v920;
    v592[7] = v921;
    v593 = v922;
    v592[2] = v916;
    v592[3] = v917;
    v592[4] = v918;
    v592[5] = v919;
    v592[0] = *(_OWORD *)v914;
    v592[1] = v915;
    sub_22E4E87FC(v578, v360, (uint64_t)v592, 0);
  }
  if ((*(_BYTE *)(v317 + 864) & 4) != 0)
  {
    v590[6] = v780;
    v590[7] = v781;
    v591 = v782;
    v590[2] = v776;
    v590[3] = v777;
    v590[4] = v778;
    v590[5] = v779;
    v590[0] = v774;
    v590[1] = v775;
    v318 = sub_22EFC3B90(v312);
    v319 = 4;
    do
    {
      do
        v318 = *(_QWORD *)(v318 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v318 && (*(_DWORD *)(v318 + 28) & 0x7Fu) - 49 > 2);
      v66 = v319-- > 1;
    }
    while (v66);
    sub_22E4DD05C(v301, (uint64_t)v590, v318, (uint64_t)&v900);
    v588[6] = *(_OWORD *)v904;
    v588[7] = v905;
    v589 = v906;
    v588[2] = *(_OWORD *)&v901[16];
    v588[3] = *(_OWORD *)&v901[32];
    v588[4] = v902;
    v588[5] = v903;
    v588[0] = v900;
    v588[1] = *(_OWORD *)v901;
    v320 = sub_22EFC3B90(v316);
    sub_22E4DD05C(v301, (uint64_t)v588, v320, (uint64_t)v914);
    v321 = *(_QWORD *)(v317 + 864) & 0xFFFFFFFFFFFFFFF8;
    v586[6] = v920;
    v586[7] = v921;
    v587 = v922;
    v586[2] = v916;
    v586[3] = v917;
    v586[4] = v918;
    v586[5] = v919;
    v586[0] = *(_OWORD *)v914;
    v586[1] = v915;
    sub_22E4E87FC(v301, v321, (uint64_t)v586, 0);
  }
  v322 = v778;
  *(_OWORD *)(v233 + 104) = v779;
  v323 = v781;
  *(_OWORD *)(v233 + 120) = v780;
  *(_OWORD *)(v233 + 136) = v323;
  v324 = v774;
  *(_OWORD *)(v233 + 40) = v775;
  v325 = v777;
  *(_OWORD *)(v233 + 56) = v776;
  *(_OWORD *)(v233 + 72) = v325;
  *(_OWORD *)(v233 + 88) = v322;
  *(_QWORD *)v233 = v567;
  *(_QWORD *)(v233 + 8) = v580;
  *(_QWORD *)(v233 + 16) = v294;
  v326 = v782;
  *(_OWORD *)(v233 + 24) = v324;
  *(_QWORD *)(v233 + 152) = v326;
  *(_QWORD *)(v233 + 160) = v312;
  if (v885[0] != &v886)
    free(v885[0]);
  if (v882 != v884)
    free(v882);
}

uint64_t sub_22E5A96A4(uint64_t result, uint64_t a2, __int128 *a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  BOOL v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  char *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;

  v3 = result;
  v4 = *(_DWORD *)(result + 8);
  if (v4 >= *(_DWORD *)(result + 12))
  {
    v15 = a2;
    v7 = a3[1];
    v16 = *a3;
    v17 = v7;
    v8 = *(_QWORD *)result + 40 * (unint64_t)v4 > (unint64_t)&v15;
    if (*(_QWORD *)result <= (unint64_t)&v15 && v8)
    {
      v14 = (char *)&v15 - *(_QWORD *)result;
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v9 = *(_QWORD *)v3;
      v10 = &v14[*(_QWORD *)v3];
    }
    else
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v9 = *(_QWORD *)v3;
      v10 = (char *)&v15;
    }
    v11 = v9 + 40 * *(unsigned int *)(v3 + 8);
    v12 = *(_OWORD *)v10;
    v13 = *((_OWORD *)v10 + 1);
    *(_QWORD *)(v11 + 32) = *((_QWORD *)v10 + 4);
    *(_OWORD *)v11 = v12;
    *(_OWORD *)(v11 + 16) = v13;
  }
  else
  {
    v5 = *(_QWORD *)result + 40 * v4;
    *(_QWORD *)v5 = a2;
    v6 = *a3;
    *(_OWORD *)(v5 + 24) = a3[1];
    *(_OWORD *)(v5 + 8) = v6;
  }
  ++*(_DWORD *)(v3 + 8);
  return result;
}

BOOL sub_22E5A978C(uint64_t a1)
{
  uint64_t v1;
  _BOOL8 result;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  result = sub_22F282498(v1);
  if (result)
  {
    if ((*(_BYTE *)(v1 + 29) & 1) == 0)
      goto LABEL_11;
    sub_22EFC8E88(v1);
    v4 = *(uint64_t **)v3;
    v5 = *(unsigned int *)(v3 + 8);
    v6 = *(uint64_t **)v3;
    if ((_DWORD)v5)
    {
      v7 = 8 * v5;
      v6 = *(uint64_t **)v3;
      while (*(_WORD *)(*v6 + 32) != 243)
      {
        ++v6;
        v7 -= 8;
        if (!v7)
          goto LABEL_11;
      }
    }
    if (v6 == &v4[v5])
    {
LABEL_11:
      v8 = 0;
    }
    else
    {
      do
      {
        v9 = *v4++;
        v8 = v9;
      }
      while (*(_WORD *)(v9 + 32) != 243);
    }
    return *(_DWORD *)(v8 + 36) != 1 || *(_QWORD *)(v8 + 40) != 0;
  }
  return result;
}

unint64_t sub_22E5A9848(uint64_t a1, int a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v8 = *(_QWORD *)(a1 + 144);
  v9 = sub_22F368234(v8, "kmp_cmplrdata_t", 0xFuLL, 2);
  sub_22EFC3340(v9);
  if (v9)
    v10 = v9 + 64;
  else
    v10 = 0;
  sub_22E5A4124(v8, v10, a3);
  sub_22E5A4124(v8, v10, a4);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 104))(v9);
  v11 = sub_22EF6477C(v8, v9);
  v12 = sub_22F368234(v8, "kmp_task_t", 0xAuLL, 0);
  sub_22EFC3340(v12);
  if (v12)
    v13 = v12 + 64;
  else
    v13 = 0;
  sub_22E5A4124(v8, v13, *(_QWORD *)(v8 + 16816));
  sub_22E5A4124(v8, v13, a4);
  sub_22E5A4124(v8, v13, a3);
  sub_22E5A4124(v8, v13, v11);
  sub_22E5A4124(v8, v13, v11);
  if ((a2 - 36) <= 0x29 && ((1 << (a2 - 36)) & 0x30000000C03) != 0)
  {
    v14 = sub_22EF60A6C(*(_QWORD *)(a1 + 144), 64, 0);
    v15 = sub_22EF60A6C(*(_QWORD *)(a1 + 144), 64, 1);
    sub_22E5A4124(v8, v13, v14);
    sub_22E5A4124(v8, v13, v14);
    sub_22E5A4124(v8, v13, v15);
    sub_22E5A4124(v8, v13, a3);
    sub_22E5A4124(v8, v13, *(_QWORD *)(v8 + 16816));
  }
  (*(void (**)(unint64_t))(*(_QWORD *)v12 + 104))(v12);
  return v12;
}

uint64_t sub_22E5A9A24(_QWORD *a1, unsigned __int8 *a2, __n128 a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  llvm::LLVMContext *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  llvm::Instruction *v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  llvm::Value *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  llvm::Value *v28;
  uint64_t v29;
  _QWORD *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  unint64_t v34;
  _OWORD v35[2];
  __int128 v36;
  _OWORD v37[4];

  if (*a2 == 192)
  {
    v15 = (uint64_t *)(a2 + 32);
    v16 = *(_QWORD *)&a2[8 * *((unsigned int *)a2 + 6) + 32];
    v30 = a1;
    *(_QWORD *)&v31 = a1 + 34;
    BYTE8(v31) = 0;
    *(_QWORD *)&v32 = *(_QWORD *)(a1[18] + 232);
    v5 = sub_22E50E974(&v30, v16, a3);
    v17 = sub_22F10ACF8(*(_QWORD *)(*(_QWORD *)(v15[*((unsigned int *)a2 + 6)] + 8) & 0xFFFFFFFFFFFFFFF0));
    v18 = sub_22F28CE84((uint64_t)a1, v17);
    v20 = *((unsigned int *)a2 + 6);
    if ((_DWORD)v20)
    {
      v29 = v5;
      v21 = 8 * v20;
      do
      {
        v22 = *v15++;
        v30 = a1;
        *(_QWORD *)&v31 = a1 + 34;
        BYTE8(v31) = 0;
        *(_QWORD *)&v32 = *(_QWORD *)(a1[18] + 232);
        v23 = (llvm::Value *)sub_22E50E974(&v30, v22, v19);
        v24 = *(_QWORD *)(v22 + 8);
        v25 = a1[18];
        v26 = sub_22EF67C8C(*(_QWORD *)(v25 + 144));
        sub_22EFF605C(v22);
        v30 = a1;
        *(_QWORD *)&v31 = a1 + 34;
        BYTE8(v31) = 0;
        *(_QWORD *)&v32 = *(_QWORD *)(v25 + 232);
        v28 = sub_22E50EA80((uint64_t *)&v30, v23, v24, v26, v27, 0);
        WORD4(v32) = 257;
        v18 = sub_22E3BDEA8((uint64_t)(a1 + 34), (uint64_t)v18, (uint64_t)v28, (uint64_t)&v30, 1, 0);
        v21 -= 8;
      }
      while (v21);
      return v29;
    }
  }
  else
  {
    sub_22E4D8D7C(&v30);
    v35[0] = v31;
    v35[1] = v32;
    v36 = v33;
    sub_22E5E0440((uint64_t)a1, (uint64_t)v35, v34, v37);
    v5 = *(_QWORD *)&v37[0];
    v6 = sub_22EFFA6B0(a2);
    if (*v6 == 191)
    {
      sub_22E4E3DF8((uint64_t)a1, (uint64_t)v6, 0, (uint64_t)&v30);
      v37[0] = v31;
      v37[1] = v32;
      v37[2] = v33;
      v7 = (llvm::LLVMContext *)*((_QWORD *)&v31 + 1);
      if ((BYTE8(v32) & 3) != 0)
        v8 = (uint64_t *)sub_22F28ABCC(v37, a1);
      else
        v8 = *(uint64_t **)&v37[0];
      LOWORD(v36) = 257;
      v9 = sub_22E4363E4(a1 + 34, v7, v8, 1, (uint64_t)v35);
      v10 = a1[11];
      LOWORD(v36) = 257;
      v11 = sub_22E3C1740(a1 + 34, 47, v5, v10, (uint64_t)v35);
      v12 = a1[11];
      LOWORD(v36) = 257;
      v13 = sub_22E3C1740(a1 + 34, 47, v9, v12, (uint64_t)v35);
      LOWORD(v36) = 257;
      sub_22E3E48CC((uint64_t)(a1 + 34), v13, v11, (uint64_t)v35, 1, 0);
    }
    else
    {
      sub_22F28CE84((uint64_t)a1, *((_QWORD *)a2 + 1));
    }
  }
  return v5;
}

uint64_t sub_22E5A9CC0(uint64_t a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _DWORD *v25;
  uint64_t v26;
  const char *v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  _QWORD **v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _OWORD v80[8];
  uint64_t v81;
  _OWORD v82[2];
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  _OWORD v99[2];
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104[2];
  uint64_t v105;
  __int128 v106[2];
  __int128 v107;
  _QWORD *v108;
  uint64_t v109;
  _QWORD v110[7];

  v110[4] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = -1;
  *(_QWORD *)(a1 + 8) = -1;
  *(_BYTE *)(a1 + 25) = 1;
  *(_QWORD *)(a1 + 32) = a2;
  v5 = *(_QWORD *)(a2 + 1992) - *(_QWORD *)(a2 + 2000);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 2312);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 2893);
  *(_BYTE *)(a2 + 2893) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 2872);
  *(_QWORD *)(a2 + 2872) = v5;
  *(_QWORD *)(a1 + 40) = 0;
  v6 = (uint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  v7 = a1 + 64;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 104) = a1 + 120;
  *(_QWORD *)(a1 + 88) = a2;
  *(_QWORD *)(a1 + 96) = a3;
  a4.n128_u64[0] = 0x400000000;
  *(_QWORD *)(a1 + 112) = 0x400000000;
  *(_QWORD *)(a1 + 216) = a1 + 232;
  v8 = a1 + 216;
  *(_QWORD *)(a1 + 224) = 0x400000000;
  if (a3)
  {
    v10 = a3;
    v73 = a1 + 104;
    v108 = v110;
    v109 = 0x400000000;
    v12 = *(unsigned int *)(a3 + 28);
    v13 = a2;
    if ((_DWORD)v12)
    {
      v72 = a1 + 64;
      v14 = 0;
      v15 = a3 + 32;
      v77 = a2 + 272;
      v74 = a1 + 216;
      v76 = 32 * v12;
      v16 = (uint64_t *)(a3 + 32);
      do
      {
        v17 = v15;
        v18 = *(_QWORD *)(((v15
                          + 8 * *(unsigned int *)(v10 + 28)
                          + 8 * (3 * *(_DWORD *)(v10 + 28))
                          + 4 * (3 * *(_DWORD *)(v10 + 28))
                          + 7) & 0xFFFFFFFFFFFFFFF8)
                        + v14
                        + 8);
        *(_QWORD *)&v90 = a2;
        *((_QWORD *)&v90 + 1) = v77;
        LOBYTE(v91) = 0;
        *((_QWORD *)&v91 + 1) = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 232);
        v19 = sub_22E50E974(&v90, v18, a4);
        v20 = v109;
        if (v109 >= (unint64_t)HIDWORD(v109))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v20 = v109;
        }
        v108[v20] = v19;
        LODWORD(v109) = v109 + 1;
        v21 = *v16;
        v22 = *(_QWORD *)(*v16 + 48);
        v23 = *(_QWORD *)(*v16 + 40) & 0xFFFFFFFFFFFFFFF8;
        if ((*(_QWORD *)(*v16 + 40) & 7) != 0 || v23 == 0)
        {
          v26 = 0;
          v27 = "";
        }
        else
        {
          v25 = *(_DWORD **)(v23 + 16);
          v28 = *v25;
          v27 = (const char *)(v25 + 4);
          v26 = v28;
        }
        LOWORD(v83) = 261;
        *(_QWORD *)&v82[0] = v27;
        *((_QWORD *)&v82[0] + 1) = v26;
        v29 = sub_22F25E4D4(a2, v22, (uint64_t)v82, 0);
        v31 = v29 & 0xFFFFFFFFFFFFFFF8;
        if (v29 <= 7)
          v31 = 0;
        v32 = v30 & 0xFFFFFFFFFFFFFFF8;
        if (v29 <= 7)
          v32 = 0;
        v33 = v30 & 7 | (8 * (v29 & 7));
        v34 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v90 = v31;
        *((_QWORD *)&v90 + 1) = v32;
        v35 = 1 << v33;
        if (v29 < 8)
          v35 = 0;
        *(_QWORD *)&v91 = v35;
        DWORD2(v91) = 0;
        v92 = 0uLL;
        sub_22E5BC134(v6, v34, v21, (uint64_t)&v90);
        v10 = a3;
        v36 = *(_QWORD *)(((v17
                          + 8 * *(unsigned int *)(a3 + 28)
                          + 8 * (3 * *(_DWORD *)(a3 + 28))
                          + 4 * (3 * *(_DWORD *)(a3 + 28))
                          + 7) & 0xFFFFFFFFFFFFFFF8)
                        + v14);
        v37 = *(_QWORD *)(v36 + 48);
        *(_QWORD *)&v82[0] = "counter.addr";
        LOWORD(v83) = 259;
        v38 = sub_22F25E4D4(a2, v37, (uint64_t)v82, 0);
        v40 = v38 & 0xFFFFFFFFFFFFFFF8;
        if (v38 <= 7)
          v40 = 0;
        v41 = v39 & 0xFFFFFFFFFFFFFFF8;
        if (v38 <= 7)
          v41 = 0;
        v42 = v39 & 7 | (8 * (v38 & 7));
        v43 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v90 = v40;
        *((_QWORD *)&v90 + 1) = v41;
        v44 = 1 << v42;
        if (v38 < 8)
          v44 = 0;
        *(_QWORD *)&v91 = v44;
        DWORD2(v91) = 0;
        v92 = 0uLL;
        sub_22E5BC134(v6, v43, v36, (uint64_t)&v90);
        v15 = v17;
        ++v16;
        v14 += 32;
      }
      while (v76 != v14);
      v13 = *(_QWORD *)(a1 + 32);
      v8 = v74;
      v7 = v72;
    }
    sub_22E5BC320(v7, v13 + 2904);
    sub_22F2840EC(v7);
    v45 = *(unsigned int *)(v10 + 28);
    if ((_DWORD)v45)
    {
      v46 = 0;
      v47 = 0;
      v71 = v10 + 32;
      v70 = 32 * v45;
      do
      {
        v48 = (v71
             + 8 * *(unsigned int *)(v10 + 28)
             + 8 * (3 * *(_DWORD *)(v10 + 28))
             + 4 * (3 * *(_DWORD *)(v10 + 28))
             + 7) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)&v101 = *(_QWORD *)(v48 + v47);
        *(_QWORD *)&v106[0] = 0;
        v49 = sub_22E3CED3C((uint64_t *)(a2 + 2904), &v101, v106);
        v50 = *(_QWORD *)&v106[0];
        if (!v49)
          v50 = *(_QWORD *)(a2 + 2904) + 56 * *(unsigned int *)(a2 + 2920);
        v101 = *(_OWORD *)(v50 + 8);
        v102 = *(_OWORD *)(v50 + 24);
        v103 = *(_OWORD *)(v50 + 40);
        v51 = *(_QWORD *)(*(_QWORD *)(v48 + v47) + 48);
        sub_22E6281E0(*(_QWORD **)(a2 + 144), v51, (uint64_t)v99);
        v106[0] = v101;
        v106[1] = v102;
        v107 = v103;
        v52 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
        v104[0] = v99[0];
        v104[1] = v99[1];
        v105 = v100;
        v91 = 0uLL;
        *((_QWORD *)&v90 + 1) = 0;
        LODWORD(v92) = 0;
        *((_QWORD *)&v92 + 1) = 0;
        *(_QWORD *)&v93 = 0;
        v94 = 0uLL;
        *(_QWORD *)((char *)&v95 + 4) = 2;
        LODWORD(v90) = 0;
        v96 = 0u;
        v97 = 0u;
        sub_22E3C113C((uint64_t)&v90, v106, v51, 2, v104, v52);
        v53 = llvm::ConstantInt::get();
        v87 = v96;
        v88 = v97;
        v89 = v98;
        v83 = v92;
        v84 = v93;
        v85 = v94;
        v86 = v95;
        v82[0] = v90;
        v82[1] = v91;
        sub_22E4E87FC(a2, v53, v82, 0);
        LOWORD(v107) = 261;
        *(_QWORD *)&v106[0] = "iter.cont";
        *((_QWORD *)&v106[0] + 1) = 9;
        operator new();
        v54 = llvm::BasicBlock::BasicBlock();
        v55 = *(_QWORD *)(a2 + 2008);
        v56 = *(_DWORD *)(a2 + 2640);
        *(_DWORD *)(a2 + 2640) = v56 + 1;
        *(_QWORD *)&v101 = v54;
        *((_QWORD *)&v101 + 1) = v55;
        LODWORD(v102) = v56;
        v57 = (_QWORD **)sub_22F283F24(v73, &v101);
        LOWORD(v107) = 261;
        *(_QWORD *)&v106[0] = "iter.exit";
        *((_QWORD *)&v106[0] + 1) = 9;
        operator new();
        v58 = llvm::BasicBlock::BasicBlock();
        v59 = *(_QWORD *)(a2 + 2008);
        v60 = *(_DWORD *)(a2 + 2640);
        *(_DWORD *)(a2 + 2640) = v60 + 1;
        *(_QWORD *)&v101 = v58;
        *((_QWORD *)&v101 + 1) = v59;
        LODWORD(v102) = v60;
        v61 = (uint64_t *)sub_22F283F24(v8, &v101);
        v62 = *(_QWORD *)((char *)v108 + v46);
        sub_22E5ED9B4((_QWORD *)a2, *v57, 0);
        v80[6] = v96;
        v80[7] = v97;
        v81 = v98;
        v80[2] = v92;
        v80[3] = v93;
        v80[4] = v94;
        v80[5] = v95;
        v80[0] = v90;
        v80[1] = v91;
        v63 = (uint64_t *)sub_22F25F748(a2, (uint64_t)v80, *(_DWORD *)(*(_QWORD *)(v48 + v47) + 24));
        v78 = v46;
        if (sub_22F110A40(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v48 + v47) + 48) & 0xFFFFFFFFFFFFFFF0)))
        {
          LOWORD(v107) = 257;
          v64 = (uint64_t *)(a2 + 272);
          v65 = a2 + 272;
          v66 = 40;
        }
        else
        {
          LOWORD(v107) = 257;
          v64 = (uint64_t *)(a2 + 272);
          v65 = a2 + 272;
          v66 = 36;
        }
        v75 = sub_22E3C18F4(v65, v66, v63, v62, (uint64_t)v106);
        *(_QWORD *)&v106[0] = "iter.body";
        LOWORD(v107) = 259;
        v67 = (_QWORD *)operator new();
        llvm::BasicBlock::BasicBlock();
        v68 = *v61;
        v69 = llvm::User::operator new((llvm::User *)0x40);
        MEMORY[0x23489C09C](v69, v67, v68, v75, 0);
        LOWORD(v107) = 257;
        sub_22E3C12C8(v64, v69, (uint64_t)v106);
        sub_22E5ED9B4((_QWORD *)a2, v67, 0);
        sub_22E4D89CC(a2);
        v47 += 32;
        v10 = a3;
        v46 = v78 + 8;
      }
      while (v70 != v47);
    }
    if (v108 != v110)
      free(v108);
  }
  return a1;
}

uint64_t sub_22E5AA440(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  __int128 v12;
  uint64_t v13;

  v2 = a1[12];
  if (v2)
  {
    v3 = *(unsigned int *)(v2 + 28);
    if ((_DWORD)v3)
    {
      v4 = v3 - 1;
      do
      {
        v5 = v4;
        sub_22E4D89CC(a1[11]);
        v6 = (_QWORD *)a1[11];
        v7 = a1[13] + 24 * v4;
        v8 = *(_QWORD *)(v7 + 16);
        v12 = *(_OWORD *)v7;
        v13 = v8;
        sub_22E48BA00(v6, (uint64_t)&v12);
        sub_22E5ED9B4((_QWORD *)a1[11], *(_QWORD **)(a1[27] + 24 * v4), v4 == 0);
        --v4;
      }
      while (v5);
    }
  }
  v9 = (_QWORD *)a1[27];
  if (v9 != a1 + 29)
    free(v9);
  v10 = (_QWORD *)a1[13];
  if (v10 != a1 + 15)
    free(v10);
  return sub_22F283FC4((uint64_t)a1);
}

uint64_t sub_22E5AA52C(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 a11)
{
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  std::string::size_type v33;
  int v34;
  uint64_t v35;
  unsigned __int8 *v36;
  unint64_t v37;
  unsigned __int8 *v38;
  double v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  unint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 *v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  unint64_t v114;
  int v115;
  __int128 v116[8];
  uint64_t v117;
  __int128 v118[8];
  uint64_t v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  __int128 v123;
  _OWORD v124[3];
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  __int128 v132;
  uint64_t v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  _OWORD v137[8];
  uint64_t v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  __int128 v143;
  uint64_t v144;
  uint64_t v145;
  __int128 v146;
  uint64_t v147;
  uint64_t v148;
  __int128 v149;
  uint64_t v150;
  __int128 v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _BYTE v155[32];
  _BYTE v156[24];
  uint64_t v157;
  uint64_t v158;
  _BYTE v159[24];
  __int128 v160;
  __int128 v161;
  uint64_t v162;
  _OWORD v163[8];
  uint64_t v164;
  _OWORD v165[3];
  _OWORD v166[3];
  _BYTE v167[64];
  _BYTE v168[32];
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  _OWORD v172[8];
  uint64_t v173;
  _OWORD v174[8];
  uint64_t v175;
  _OWORD v176[2];
  uint64_t v177;
  _BYTE v178[32];
  __int128 v179;
  __int128 v180;
  __int128 v181;
  uint64_t v182;
  _QWORD v183[2];
  _QWORD v184[14];

  v17 = a9;
  v184[11] = *MEMORY[0x24BDAC8D0];
  v103 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
  v18 = sub_22EFC3B90(a5);
  do
    v18 = *(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8;
  while (v18 && (*(_DWORD *)(v18 + 28) & 0x7Fu) - 49 > 2);
  v19 = a4[7];
  v172[6] = a4[6];
  v172[7] = v19;
  v173 = *((_QWORD *)a4 + 16);
  v20 = a4[3];
  v172[2] = a4[2];
  v172[3] = v20;
  v21 = a4[4];
  v172[5] = a4[5];
  v172[4] = v21;
  v22 = *a4;
  v172[1] = a4[1];
  v172[0] = v22;
  sub_22E4DD05C(a1, (uint64_t)v172, v18, (uint64_t)v174);
  v23 = 74;
  v24 = *(_DWORD *)(a2 + 8) - 36;
  if (v24 <= 0x29)
  {
    if (((1 << v24) & 0x30000000C03) != 0)
      v23 = 76;
    else
      v23 = 74;
  }
  v25 = a11;
  v26 = sub_22E59F470(a2, v23);
  sub_22E5BB2A4((uint64_t)v183, v26, 0);
  v27 = *(_DWORD *)(a2 + 8) - 56;
  if (v27 <= 0x2A && ((1 << v27) & 0x6000003CF9FLL) != 0)
  {
    v115 = 1;
    if (!*(_QWORD *)a3)
    {
      v28 = 0;
      v109 = 0;
      v110 = 0;
      v108 = 0;
      v29 = 0uLL;
      v111 = xmmword_22F4579A0;
      v112 = 0;
LABEL_12:
      v106 = v29;
      v107 = v29;
      v104 = v29;
      v105 = v29;
      goto LABEL_13;
    }
LABEL_64:
    v75 = *(_OWORD *)(a3 + 16);
    v165[0] = *(_OWORD *)a3;
    v165[1] = v75;
    v165[2] = *(_OWORD *)(a3 + 32);
    v76 = sub_22E66C868(*(_QWORD *)(a1 + 144) + 280, a7, 0);
    v77 = sub_22E66C868(*(_QWORD *)(a1 + 144) + 280, a6, 0);
    LOWORD(v177) = 257;
    sub_22F245864((uint64_t *)(a1 + 272), v165, v76, v77, (uint64_t)v176, (uint64_t)v166);
    v139 = v166[0];
    v140 = v166[1];
    v141 = v166[2];
    sub_22E6281E0(*(_QWORD **)(a1 + 144), a6, (uint64_t)&v180);
    *(_OWORD *)v155 = v139;
    *(_OWORD *)&v155[16] = v140;
    *(_OWORD *)v156 = v141;
    v78 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
    *(_OWORD *)v178 = v180;
    *(_OWORD *)&v178[16] = v181;
    *(_QWORD *)&v179 = v182;
    memset(&v167[8], 0, 28);
    *(_QWORD *)&v167[48] = 0;
    *(_QWORD *)&v167[40] = 0;
    *(_QWORD *)&v168[8] = 0;
    *(_QWORD *)v168 = 0;
    *(_QWORD *)&v168[20] = 2;
    *(_DWORD *)v167 = 0;
    v169 = 0u;
    v170 = 0u;
    sub_22E3C113C((uint64_t)v167, (__int128 *)v155, a6, 2, (__int128 *)v178, v78);
    v28 = *(_QWORD *)&v167[24];
    v112 = *(_QWORD *)&v167[32];
    v81 = *(_QWORD *)&v167[56];
    v82 = *(_QWORD *)v167;
    v111 = *(_OWORD *)&v168[8];
    v106 = *(_QWORD *)&v168[24];
    v107 = *(_OWORD *)&v167[8];
    v104 = v169;
    v105 = *(_OWORD *)&v167[40];
    v109 = v170;
    v110 = *(_QWORD *)v168;
    v108 = *((_QWORD *)&v170 + 1);
    v80 = v171;
    goto LABEL_13;
  }
  v28 = 0;
  v115 = 0;
  v29 = 0uLL;
  v111 = xmmword_22F4579A0;
  v112 = 0;
  if (!*(_DWORD *)(a8 + 104))
  {
    v109 = 0;
    v110 = 0;
    v108 = 0;
    goto LABEL_12;
  }
  v109 = 0;
  v110 = 0;
  v108 = 0;
  v106 = 0;
  v107 = 0uLL;
  v104 = 0uLL;
  v105 = 0uLL;
  if ((a11 & 1) != 0)
    goto LABEL_64;
LABEL_13:
  v102 = v28;
  v30 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(v18 + 48) & 0xFFFFFFFFFFFFFFF0));
  v31 = sub_22EFC3B90(v30);
  if (a10)
  {
    v32 = v31;
    while (1)
    {
      v33 = *(_QWORD *)(v17 + 24);
      if (*(_QWORD *)(v17 + 8) | v33)
        break;
      if (*(_QWORD *)(v17 + 32))
        goto LABEL_34;
      do
        v32 = *(_QWORD *)(v32 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v32 && (*(_DWORD *)(v32 + 28) & 0x7Fu) - 49 >= 3);
LABEL_36:
      v17 += 40;
      if (v17 == a9 + 40 * a10)
        goto LABEL_61;
    }
    if (!v33)
      goto LABEL_35;
    v34 = 0;
    v35 = *(_QWORD *)(v17 + 24);
    while (1)
    {
      v36 = (unsigned __int8 *)sub_22EFBC5B4(v35);
      if (v36)
        break;
      if ((*(_BYTE *)(v35 + 72) & 3) != 0)
      {
        if (v34)
          goto LABEL_34;
        v34 = 1;
      }
      v37 = sub_22E3CD31C((uint64_t *)(v35 + 72), v35);
      if (v37 != v33)
      {
        v35 = v37;
        if (v37)
          continue;
      }
      goto LABEL_34;
    }
    v38 = v36;
    if (v25)
    {
      if ((*v36 & 0xFE) != 0x76 || (sub_22E4C9FC8(a1, (uint64_t)v36) & 1) != 0)
      {
LABEL_35:
        do
LABEL_34:
          v32 = *(_QWORD *)(v32 + 8) & 0xFFFFFFFFFFFFFFF8;
        while (v32 && (*(_DWORD *)(v32 + 28) & 0x7Fu) - 49 > 2);
        goto LABEL_36;
      }
    }
    v163[6] = v174[6];
    v163[7] = v174[7];
    v164 = v175;
    v163[2] = v174[2];
    v163[3] = v174[3];
    v163[5] = v174[5];
    v163[4] = v174[4];
    v163[1] = v174[1];
    v163[0] = v174[0];
    v39 = sub_22E4DD05C(a1, (uint64_t)v163, v32, (uint64_t)v167);
    v40 = *(_QWORD *)(v17 + 32);
    if (!v40)
    {
      v116[6] = v169;
      v116[7] = v170;
      v117 = v171;
      v116[2] = *(_OWORD *)&v167[32];
      v116[3] = *(_OWORD *)&v167[48];
      v116[4] = *(_OWORD *)v168;
      v116[5] = *(_OWORD *)&v168[16];
      v116[0] = *(_OWORD *)v167;
      v116[1] = *(_OWORD *)&v167[16];
      sub_22E4CB220(a1, v38, v33, v116, 0);
      goto LABEL_34;
    }
    v41 = *(_QWORD *)(v17 + 16);
    v114 = *(_QWORD *)v168;
    *(_QWORD *)v155 = (*(uint64_t (**)(unint64_t, double))(*(_QWORD *)v41 + 32))(v41, v39);
    *(_QWORD *)&v139 = 0;
    v42 = sub_22F283C88((uint64_t)v184, v155, &v139);
    v43 = 0;
    if (v42)
      v43 = *(_QWORD *)(v139 + 8);
    v44 = v115;
    if (v43)
      v44 = 0;
    if (v44 == 1)
    {
      *(_QWORD *)v178 = v41;
      *(_QWORD *)&v139 = 0;
      v45 = sub_22E3CED3C((uint64_t *)(a1 + 2904), v178, &v139);
      v46 = v139;
      if (!v45)
        v46 = *(_QWORD *)(a1 + 2904) + 56 * *(unsigned int *)(a1 + 2920);
      *(_OWORD *)v178 = *(_OWORD *)(v46 + 8);
      *(_OWORD *)&v178[16] = *(_OWORD *)(v46 + 24);
      v179 = *(_OWORD *)(v46 + 40);
      sub_22E6281E0(*(_QWORD **)(a1 + 144), v114, (uint64_t)v176);
      v139 = *(_OWORD *)v178;
      v140 = *(_OWORD *)&v178[16];
      v141 = v179;
      v47 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
      v180 = v176[0];
      v181 = v176[1];
      v182 = v177;
      memset(&v155[8], 0, 24);
      *(_DWORD *)v156 = 0;
      *(_QWORD *)&v156[8] = 0;
      *(_QWORD *)&v156[16] = 0;
      v158 = 0;
      *(_QWORD *)v159 = 0;
      v48 = v114;
      *(_QWORD *)&v159[12] = 2;
      *(_DWORD *)v155 = 0;
      v160 = 0u;
      v161 = 0u;
      v49 = &v180;
      v50 = 2;
    }
    else
    {
      if (!a11)
      {
        *(_QWORD *)v155 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 16) + 32))(*(_QWORD *)(v17 + 16));
        *(_QWORD *)&v139 = 0;
        if ((sub_22F246C54((uint64_t *)(a1 + 1928), v155, &v139) & 1) == 0)
        {
          v71 = *(_QWORD *)(a1 + 1600);
          if (!v71 || (*(_DWORD *)(v71 + 28) & 0x7F) != 1)
          {
            *(_QWORD *)v155 = v178;
            *(_QWORD *)&v155[8] = nullsub_54;
            *(_QWORD *)&v155[16] = 0;
            sub_22E5B1184((uint64_t)&v139, a1, (uint64_t)v155, 89, 0, 1);
            sub_22E4D8D7C(a1, *(unsigned int **)(v17 + 8), (uint64_t)v155);
            v84 = *(_QWORD *)v155;
            v79 = *(_QWORD *)&v155[24];
            v56 = *(_QWORD *)v156;
            v98 = *(_OWORD *)&v156[8];
            v101 = *(_OWORD *)&v155[8];
            v95 = v157;
            v72 = v158;
            v61 = *(_QWORD *)&v159[16];
            v89 = v160;
            v92 = *(_OWORD *)v159;
            v86 = v161;
            v73 = v162;
            sub_22E5B12FC((uint64_t *)&v139);
            v64 = v73;
            v63 = v86;
            v62 = v89;
            v60 = v92;
            v59 = v72;
            v58 = v95;
            v54 = v84;
            v57 = v98;
            v53 = v101;
            v55 = v79;
LABEL_50:
            if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v114 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                            + 16) & 0xFEu)
               - 2 > 3)
            {
              v155[25] = 1;
              *(_QWORD *)v156 = a1;
              v68 = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000);
              *(_QWORD *)&v155[16] = *(_QWORD *)(a1 + 2312);
              v155[24] = *(_BYTE *)(a1 + 2893);
              *(_BYTE *)(a1 + 2893) = 0;
              v69 = *(_QWORD *)(a1 + 2872);
              *(_QWORD *)v155 = v68;
              *(_QWORD *)&v155[8] = v69;
              *(_QWORD *)(a1 + 2872) = v68;
              *(_QWORD *)&v156[8] = 0;
              *(_QWORD *)&v156[16] = 0;
              LODWORD(v157) = 0;
              v158 = 0;
              *(_QWORD *)v159 = 0;
              *(_DWORD *)&v159[8] = 0;
              v139 = v53;
              *(_QWORD *)&v140 = v55;
              *((_QWORD *)&v140 + 1) = v56;
              v141 = v57;
              sub_22E5BC134((uint64_t *)&v156[8], a1, v40, (uint64_t)&v139);
              sub_22E5BC320((uint64_t)&v158, *(_QWORD *)v156 + 2904);
              sub_22F2840EC((uint64_t)&v158);
              v70 = *(_QWORD *)(a1 + 1856);
              *(_QWORD *)(a1 + 1856) = v183;
              v118[6] = v169;
              v118[7] = v170;
              v119 = v171;
              v118[2] = *(_OWORD *)&v167[32];
              v118[3] = *(_OWORD *)&v167[48];
              v118[4] = *(_OWORD *)v168;
              v118[5] = *(_OWORD *)&v168[16];
              v118[0] = *(_OWORD *)v167;
              v118[1] = *(_OWORD *)&v167[16];
              sub_22E4CB220(a1, v38, v33, v118, 0);
              *(_QWORD *)(a1 + 1856) = v70;
              sub_22F283FC4((uint64_t)v155);
              v25 = a11;
            }
            else
            {
              if ((*v38 & 0xFE) != 0x76)
                goto LABEL_53;
              v97 = v57;
              v100 = v53;
              v65 = v55;
              v94 = v58;
              v66 = v59;
              v88 = v62;
              v91 = v60;
              v85 = v63;
              v83 = v64;
              v67 = sub_22E4C9FC8(a1, (uint64_t)v38);
              v64 = v83;
              v63 = v85;
              v62 = v88;
              v60 = v91;
              v59 = v66;
              v58 = v94;
              v57 = v97;
              v53 = v100;
              v55 = v65;
              if (!v67)
              {
                v124[0] = *(_OWORD *)&v167[8];
                v124[1] = *(_OWORD *)&v167[24];
                v124[2] = *(_OWORD *)&v167[40];
                v120 = v100;
                v121 = v65;
                v122 = v56;
                v123 = v97;
                *(_QWORD *)v155 = a1;
                *(_QWORD *)&v155[8] = v40;
                *(_QWORD *)&v155[16] = v38;
                *(_QWORD *)&v155[24] = v183;
                sub_22E5F1D68((_QWORD *)a1, (uint64_t)v124, (uint64_t)&v120, v114, (void (*)(uint64_t, __int128 *, _QWORD *))sub_22E5BBFE8, (uint64_t)v155);
                v25 = a11;
              }
              else
              {
LABEL_53:
                v137[6] = v169;
                v137[7] = v170;
                v138 = v171;
                v137[2] = *(_OWORD *)&v167[32];
                v137[3] = *(_OWORD *)&v167[48];
                v137[4] = *(_OWORD *)v168;
                v137[5] = *(_OWORD *)&v168[16];
                v137[0] = *(_OWORD *)v167;
                v137[1] = *(_OWORD *)&v167[16];
                v126 = v53;
                v125 = v54;
                v127 = v55;
                v128 = v56;
                v129 = v57;
                v130 = v58;
                v131 = v59;
                v132 = v60;
                v133 = v61;
                v134 = v62;
                v135 = v63;
                v136 = v64;
                sub_22E4FC06C((_QWORD *)a1, (uint64_t)v137, (uint64_t)&v125, v114);
                v25 = a11;
              }
            }
            goto LABEL_34;
          }
        }
        sub_22E4D8D7C(a1, *(unsigned int **)(v17 + 8), (uint64_t)v155);
        v53 = *(_OWORD *)&v155[8];
        v54 = *(_QWORD *)v155;
        v55 = *(_QWORD *)&v155[24];
        v56 = *(_QWORD *)v156;
        v57 = *(_OWORD *)&v156[8];
        v58 = v157;
        v59 = v158;
        v60 = *(_OWORD *)v159;
LABEL_49:
        v61 = *(_QWORD *)&v159[16];
        v62 = v160;
        v63 = v161;
        v64 = v162;
        goto LABEL_50;
      }
      v143 = v107;
      v142 = v82;
      v144 = v102;
      v145 = v112;
      v146 = v105;
      v147 = v81;
      v148 = v110;
      v149 = v111;
      v150 = v106;
      v151 = v104;
      v152 = v109;
      v153 = v108;
      v154 = v80;
      sub_22E4DD05C(a1, (uint64_t)&v142, v43, (uint64_t)v155);
      v99 = v158;
      v93 = *((_QWORD *)&v161 + 1);
      v96 = v161;
      v87 = *(_OWORD *)&v155[8];
      v90 = v160;
      v51 = *(_QWORD *)&v159[16];
      v52 = sub_22EF5B404(v103, v41, 0);
      v139 = v87;
      *(_QWORD *)&v140 = v52;
      DWORD2(v140) = 0;
      v141 = 0uLL;
      v47 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
      *(_QWORD *)v178 = v51;
      *(_OWORD *)&v178[8] = v90;
      *(_QWORD *)&v178[24] = v96;
      *(_QWORD *)&v179 = v93;
      memset(&v155[8], 0, 24);
      *(_DWORD *)v156 = 0;
      *(_QWORD *)&v156[8] = 0;
      *(_QWORD *)&v156[16] = 0;
      v158 = 0;
      *(_QWORD *)v159 = 0;
      *(_QWORD *)&v159[12] = 2;
      *(_DWORD *)v155 = 0;
      v160 = 0u;
      v161 = 0u;
      v49 = (__int128 *)v178;
      v48 = v99;
      v50 = 0;
    }
    sub_22E3C113C((uint64_t)v155, &v139, v48, v50, v49, v47);
    v53 = *(_OWORD *)&v155[8];
    v54 = *(_QWORD *)v155;
    v55 = *(_QWORD *)&v155[24];
    v56 = *(_QWORD *)v156;
    v57 = *(_OWORD *)&v156[8];
    v58 = v157;
    v59 = v158;
    v60 = *(_OWORD *)v159;
    goto LABEL_49;
  }
LABEL_61:
  v183[0] = &off_24FA66C98;
  return sub_22E49FAE8((uint64_t)v184);
}

double sub_22E5AB0F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  double result;
  __int128 v26;
  _OWORD v27[8];
  uint64_t v28;
  _OWORD v29[8];
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  _OWORD v49[3];
  _OWORD v50[3];
  __int128 v51[3];
  _OWORD v52[3];
  _BYTE v53[64];
  __int128 v54;
  _BYTE v55[48];
  uint64_t v56;
  unint64_t v57;
  __int128 v58[2];
  uint64_t v59;

  v10 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 144);
  v57 = 0;
  v11 = (uint64_t *)(a2 + 2840);
  sub_22E5AB384(v10, (unint64_t *)(a2 + 2840), &v57);
  v12 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(a2 + 2840) & 0xFFFFFFFFFFFFFFF0));
  v13 = sub_22EF5B848(v10, *(_QWORD *)(a2 + 2840), 0);
  v14 = *(_OWORD *)(a4 + 24);
  v51[0] = *(_OWORD *)(a4 + 8);
  v51[1] = v14;
  v51[2] = *(_OWORD *)(a4 + 40);
  v15 = sub_22E66C868(*(_QWORD *)(a3 + 144) + 280, v13, 0);
  LOWORD(v42) = 257;
  sub_22E3BEE6C((uint64_t *)(a3 + 272), v51, v15, (uint64_t)&v40, (uint64_t)v52);
  v16 = *(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0);
  if (!v16 || *(_BYTE *)(v16 + 16) != 39)
    v16 = sub_22F10CF48(*(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0));
  sub_22F25FAEC(a3, v52, v16, (uint64_t)v53);
  v49[0] = *(_OWORD *)&v53[8];
  v49[1] = *(_OWORD *)&v53[24];
  v49[2] = *(_OWORD *)&v53[40];
  v17 = (uint64_t *)llvm::ConstantInt::get();
  LOWORD(v42) = 257;
  sub_22F27F744((uint64_t *)(a3 + 272), a3, (uint64_t)v49, v17, (uint64_t)&v40, (uint64_t)v50);
  v31 = v50[0];
  v32 = v50[1];
  v33 = v50[2];
  v18 = *v11;
  v58[0] = *(_OWORD *)&v55[8];
  v58[1] = *(_OWORD *)&v55[24];
  v59 = *(_QWORD *)&v55[40];
  v19 = *(_QWORD *)(*(_QWORD *)(a3 + 144) + 144);
  *((_QWORD *)&v40 + 1) = 0;
  v41 = 0uLL;
  LODWORD(v42) = 0;
  *((_QWORD *)&v42 + 1) = 0;
  *(_QWORD *)&v43 = 0;
  v44 = 0uLL;
  *(_QWORD *)((char *)&v45 + 4) = 2;
  LODWORD(v40) = 0;
  v46 = 0u;
  v47 = 0u;
  sub_22E3C113C((uint64_t)&v40, &v31, v18, *(int *)&v55[4], v58, v19);
  v29[6] = v46;
  v29[7] = v47;
  v30 = v48;
  v29[2] = v42;
  v29[3] = v43;
  v29[4] = v44;
  v29[5] = v45;
  v29[0] = v40;
  v29[1] = v41;
  v20 = sub_22EFC3B90(v12);
  sub_22E4DD05C(a3, (uint64_t)v29, v20, (uint64_t)&v31);
  v27[6] = v37;
  v27[7] = v38;
  v28 = v39;
  v27[2] = v33;
  v27[3] = v34;
  v27[4] = v35;
  v27[5] = v36;
  v27[0] = v31;
  v27[1] = v32;
  v21 = sub_22F25F748(a3, (uint64_t)v27, a5);
  v22 = v54;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)v55;
  v23 = *(_OWORD *)&v55[32];
  *(_OWORD *)(a1 + 104) = *(_OWORD *)&v55[16];
  *(_OWORD *)(a1 + 120) = v23;
  v24 = *(_OWORD *)v53;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)&v53[16];
  result = *(double *)&v53[32];
  v26 = *(_OWORD *)&v53[48];
  *(_OWORD *)(a1 + 40) = *(_OWORD *)&v53[32];
  *(_OWORD *)(a1 + 56) = v26;
  *(_OWORD *)(a1 + 72) = v22;
  *(_QWORD *)a1 = v21;
  *(_QWORD *)(a1 + 136) = v56;
  *(_OWORD *)(a1 + 8) = v24;
  return result;
}

unint64_t sub_22E5AB384(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  uint64_t v6;
  unint64_t result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v6 = sub_22EF5CDF0(a1, *(_QWORD *)(*(_QWORD *)(a1 + 16400) & 0xFFFFFFFFFFFFFFF0));
  result = sub_22EF60A6C(a1, v6, 0);
  *a3 = result;
  if (*a2 <= 0xF)
  {
    v8 = sub_22F368234(a1, "kmp_depend_info", 0xFuLL, 0);
    sub_22EFC3340(v8);
    if (v8)
      v9 = v8 + 64;
    else
      v9 = 0;
    v10 = sub_22EF5B0AC(a1, *(_DWORD *)(*(_QWORD *)(a1 + 15088) + *(_QWORD *)(**(_QWORD **)(a1 + 15088) - 24) + 124));
    sub_22E5A4124(a1, v9, v10);
    v11 = sub_22EF67C8C(a1);
    sub_22E5A4124(a1, v9, v11);
    sub_22E5A4124(a1, v9, *a3);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 104))(v8);
    result = sub_22EF6477C(a1, v8);
    *a2 = result;
  }
  return result;
}

void sub_22E5AB48C(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X3>, unsigned int a5@<W4>, uint64_t a6@<X8>)
{
  _DWORD *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  _DWORD *v13;
  int v14;
  __n128 v15;
  int v16;
  uint64_t *v17;
  _DWORD *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  llvm::Instruction *v32;
  llvm::Instruction *v33;
  uint64_t v34;
  unsigned __int8 **v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  llvm::Instruction *v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  llvm::Instruction *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  _DWORD *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _DWORD *v108;
  uint64_t v109;
  unint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  unsigned int v115;
  int v116;
  uint64_t v118;
  uint64_t *v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  _DWORD *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t *v127;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  __int128 v134;
  uint64_t v135;
  int v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  __int128 v140;
  uint64_t v141;
  int v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  _OWORD v146[8];
  uint64_t v147;
  __int128 v148;
  uint64_t v149;
  int v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  _OWORD v154[8];
  uint64_t v155;
  __int128 v156;
  uint64_t v157;
  int v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD v162[3];
  int v163;
  uint64_t v164;
  uint64_t v165;
  _BYTE v166[7];
  __int128 v167;
  __int128 v168;
  unint64_t v169;
  _OWORD v170[8];
  uint64_t v171;
  _OWORD v172[8];
  uint64_t v173;
  _OWORD v174[3];
  const char *v175;
  __int16 v176;
  _OWORD v177[2];
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  uint64_t v184;
  _BYTE v185[64];
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  uint64_t v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  uint64_t v199;
  _OWORD v200[2];
  uint64_t v201;
  __int128 v202[2];
  uint64_t v203;
  __int128 v204;
  uint64_t v205;
  int v206;
  uint64_t v207;
  uint64_t v208;
  void *v209;
  uint64_t v210;
  _BYTE v211[32];
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  uint64_t v220;
  __int128 v221;
  _BYTE v222[48];
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  uint64_t v227;
  uint64_t v228;

  v228 = *MEMORY[0x24BDAC8D0];
  if (a4)
  {
    v7 = &a3[16 * a4];
    v8 = a3 + 6;
    v9 = a4 << 6;
    v10 = a4 << 6;
    while (1)
    {
      v11 = *v8;
      v8 += 16;
      if (v11)
        break;
      v10 -= 64;
      if (!v10)
        goto LABEL_5;
    }
    v12 = 0;
    v118 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
    v13 = a3;
    do
    {
      if (*v13 != 4)
      {
        if (*((_QWORD *)v13 + 1))
          v14 = 0;
        else
          v14 = v13[6];
        v12 += v14;
      }
      v13 += 16;
      v9 -= 64;
    }
    while (v9);
    v115 = v12;
    v116 = a4;
    v169 = 0;
    v120 = (uint64_t *)(a1 + 2840);
    sub_22E5AB384(v118, (unint64_t *)(a1 + 2840), &v169);
    v123 = llvm::ConstantInt::get();
    v122 = llvm::ConstantInt::get();
    v16 = 0;
    v121 = 0;
    v17 = (uint64_t *)(a2 + 272);
    v18 = a3;
    v133 = a2;
    v127 = (uint64_t *)(a2 + 272);
    v124 = v7;
    do
    {
      if (*v18 == 4)
      {
        v209 = v211;
        v210 = 0x400000000;
        *(_QWORD *)&v221 = v222;
        *((_QWORD *)&v221 + 1) = 0x400000000;
        v19 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
        v20 = (unsigned __int8 *)*((_QWORD *)v18 + 1);
        if (v20)
          v21 = sub_22EFFA6B0(v20);
        else
          v21 = 0;
        sub_22E5A9CC0((uint64_t)&v212, a2, (uint64_t)v21, v15);
        v34 = v18[6];
        if ((_DWORD)v34)
        {
          v35 = (unsigned __int8 **)*((_QWORD *)v18 + 2);
          v36 = 8 * v34;
          v131 = v19;
          do
          {
            v37 = *v35;
            sub_22EFFA6B0(*v35);
            sub_22E4D8D7C(&v191);
            v182 = v197;
            v183 = v198;
            v184 = v199;
            v178 = v193;
            v179 = v194;
            v181 = v196;
            v180 = v195;
            v177[1] = v192;
            v177[0] = v191;
            sub_22EFF605C((uint64_t)v37);
            sub_22E5AB0F0((uint64_t)v185, a1, a2, (uint64_t)v177, v38);
            v39 = *(_QWORD *)v185;
            v40 = sub_22F36D7FC(v19);
            v175 = "depobj.size.addr";
            v176 = 259;
            v41 = sub_22F25E4D4(a2, v40, (uint64_t)&v175, 0);
            v43 = 0;
            if (v41 <= 7)
              v44 = 0;
            else
              v44 = v41 & 0xFFFFFFFFFFFFFFF8;
            if (v41 <= 7)
              v45 = 0;
            else
              v45 = v42 & 0xFFFFFFFFFFFFFFF8;
            if (v41 >= 8)
              v43 = 1 << (v42 & 7 | (8 * (v41 & 7)));
            v46 = sub_22F36D7FC(v19);
            a2 = v133;
            sub_22E6281E0(*(_QWORD **)(v133 + 144), v46, (uint64_t)v200);
            *(_QWORD *)&v204 = v44;
            *((_QWORD *)&v204 + 1) = v45;
            v205 = v43;
            v206 = 0;
            v207 = 0;
            v208 = 0;
            v47 = *(_QWORD *)(*(_QWORD *)(v133 + 144) + 144);
            v202[0] = v200[0];
            v202[1] = v200[1];
            v203 = v201;
            memset(&v185[8], 0, 28);
            *(_QWORD *)&v185[40] = 0;
            *(_QWORD *)&v185[48] = 0;
            v186 = 0uLL;
            *(_QWORD *)((char *)&v187 + 4) = 2;
            *(_DWORD *)v185 = 0;
            v188 = 0u;
            v189 = 0u;
            v48 = v185;
            sub_22E3C113C((uint64_t)v185, &v204, v46, 2, v202, v47);
            v49 = llvm::ConstantInt::get();
            v174[0] = *(_OWORD *)&v185[8];
            v174[1] = *(_OWORD *)&v185[24];
            v174[2] = *(_OWORD *)&v185[40];
            v17 = v127;
            sub_22E3BEDDC(v127, v49, v174, 0);
            v172[6] = v188;
            v172[7] = v189;
            v173 = v190;
            v172[2] = *(_OWORD *)&v185[32];
            v172[3] = *(_OWORD *)&v185[48];
            v172[4] = v186;
            v172[5] = v187;
            v172[0] = *(_OWORD *)v185;
            v172[1] = *(_OWORD *)&v185[16];
            sub_22EFF605C((uint64_t)v37);
            v51 = sub_22F25F748(v133, (uint64_t)v172, v50);
            LOWORD(v207) = 257;
            v52 = sub_22F26180C((uint64_t)v127, v51, v39, (uint64_t)&v204);
            v170[6] = v188;
            v170[7] = v189;
            v171 = v190;
            v170[2] = *(_OWORD *)&v185[32];
            v170[3] = *(_OWORD *)&v185[48];
            v170[4] = v186;
            v170[5] = v187;
            v170[0] = *(_OWORD *)v185;
            v170[1] = *(_OWORD *)&v185[16];
            sub_22E4E87FC(v133, v52, v170, 0);
            v53 = v221;
            if (DWORD2(v221) >= HIDWORD(v221))
            {
              if ((unint64_t)v221 <= (unint64_t)v185
                && (unint64_t)v221 + 136 * DWORD2(v221) > (unint64_t)v185)
              {
                v61 = &v185[-v221];
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v53 = v221;
                v48 = &v61[v221];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v48 = v185;
                v53 = v221;
              }
            }
            v19 = v131;
            v54 = v53 + 136 * DWORD2(v221);
            *(_OWORD *)v54 = *(_OWORD *)v48;
            v55 = *((_OWORD *)v48 + 1);
            v56 = *((_OWORD *)v48 + 2);
            v57 = *((_OWORD *)v48 + 4);
            *(_OWORD *)(v54 + 48) = *((_OWORD *)v48 + 3);
            *(_OWORD *)(v54 + 64) = v57;
            *(_OWORD *)(v54 + 16) = v55;
            *(_OWORD *)(v54 + 32) = v56;
            v58 = *((_OWORD *)v48 + 5);
            v59 = *((_OWORD *)v48 + 6);
            v60 = *((_OWORD *)v48 + 7);
            *(_QWORD *)(v54 + 128) = *((_QWORD *)v48 + 16);
            *(_OWORD *)(v54 + 96) = v59;
            *(_OWORD *)(v54 + 112) = v60;
            *(_OWORD *)(v54 + 80) = v58;
            ++DWORD2(v221);
            ++v35;
            v36 -= 8;
          }
          while (v36);
        }
        sub_22E5AA440(&v212);
        if (DWORD2(v221))
        {
          v62 = 0;
          v63 = 0;
          v64 = 136 * DWORD2(v221);
          do
          {
            v217 = *(_OWORD *)(v221 + v63 + 80);
            v218 = *(_OWORD *)(v221 + v63 + 96);
            v219 = *(_OWORD *)(v221 + v63 + 112);
            v220 = *(_QWORD *)(v221 + v63 + 128);
            v213 = *(_OWORD *)(v221 + v63 + 16);
            v214 = *(_OWORD *)(v221 + v63 + 32);
            v215 = *(_OWORD *)(v221 + v63 + 48);
            v216 = *(_OWORD *)(v221 + v63 + 64);
            v212 = *(_OWORD *)(v221 + v63);
            sub_22EFF605C(*(_QWORD *)(*((_QWORD *)v18 + 2) + v62));
            v66 = sub_22F25F748(a2, (uint64_t)&v212, v65);
            v67 = v210;
            if (v210 >= (unint64_t)HIDWORD(v210))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v67 = v210;
            }
            *((_QWORD *)v209 + v67) = v66;
            LODWORD(v210) = v210 + 1;
            v63 += 136;
            v62 += 8;
          }
          while (v64 != v63);
        }
        v7 = v124;
        if ((_BYTE *)v221 != v222)
          free((void *)v221);
        v68 = (uint64_t *)v209;
        if ((_DWORD)v210)
        {
          v69 = 8 * v210;
          v70 = v123;
          do
          {
            v71 = *v68++;
            *(_WORD *)&v222[16] = 257;
            v72 = sub_22F26180C((uint64_t)v17, v70, v71, (uint64_t)&v221);
            v70 = (uint64_t)v72;
            v69 -= 8;
          }
          while (v69);
          v123 = (uint64_t)v72;
          v68 = (uint64_t *)v209;
          a2 = v133;
        }
        if (v68 != (uint64_t *)v211)
          free(v68);
        v16 = 1;
      }
      else
      {
        v22 = *((_QWORD *)v18 + 1);
        if (v22)
        {
          v23 = *(unsigned int *)(v22 + 28);
          if ((_DWORD)v23)
          {
            v24 = 0;
            v25 = 32 * v23;
            v26 = v122;
            do
            {
              v27 = *(_QWORD *)(((v22
                                + 32
                                + 8 * *(unsigned int *)(v22 + 28)
                                + 8 * (3 * *(_DWORD *)(v22 + 28))
                                + 4 * (3 * *(_DWORD *)(v22 + 28))
                                + 7) & 0xFFFFFFFFFFFFFFF8)
                              + v24
                              + 8);
              *(_QWORD *)&v221 = a2;
              *((_QWORD *)&v221 + 1) = v17;
              v222[0] = 0;
              *(_QWORD *)&v222[8] = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 232);
              v28 = sub_22E50E974(&v221, v27, v15);
              v29 = *(_QWORD *)(a2 + 88);
              *(_WORD *)&v222[16] = 257;
              v30 = sub_22E3BF45C(v17, v28, v29, 0, (uint64_t)&v221);
              v31 = llvm::ConstantInt::get();
              *(_WORD *)&v222[16] = 257;
              v32 = sub_22E3BDEA8((uint64_t)v17, v30, v31, (uint64_t)&v221, 1, 0);
              *(_WORD *)&v222[16] = 257;
              v33 = sub_22F26180C((uint64_t)v17, v26, (uint64_t)v32, (uint64_t)&v221);
              v26 = (uint64_t)v33;
              v24 += 32;
            }
            while (v25 != v24);
            v121 = 1;
            v122 = (uint64_t)v33;
            v7 = v124;
          }
          else
          {
            v121 = 1;
          }
        }
      }
      v18 += 16;
    }
    while (v18 != v7);
    if (((v16 | v121) & 1) != 0)
    {
      v73 = llvm::ConstantInt::get();
      LODWORD(v74) = v116;
      if ((v16 & 1) != 0)
      {
        *(_WORD *)&v222[16] = 257;
        v73 = (uint64_t)sub_22F26180C((uint64_t)v17, v123, v73, (uint64_t)&v221);
      }
      v132 = v16;
      if ((v121 & 1) != 0)
      {
        *(_WORD *)&v222[16] = 257;
        v73 = (uint64_t)sub_22F26180C((uint64_t)v17, v122, v73, (uint64_t)&v221);
      }
      v75 = v17;
      v76 = (_DWORD *)sub_22E3CD3D4(v118 + 2032, 24, 3);
      v77 = sub_22EF60A6C(v118, 64, 0);
      sub_22E5BBE34((uint64_t)v76, a5, v77, 0, 0, 0);
      *(_QWORD *)&v212 = a2;
      *(_QWORD *)&v221 = v76;
      *((_QWORD *)&v221 + 1) = v73;
      *(_QWORD *)v222 = 0;
      *(_OWORD *)&v222[8] = v167;
      *(_OWORD *)&v222[24] = v168;
      v222[40] = 0;
      *(_DWORD *)&v222[41] = *(_DWORD *)v166;
      *(_DWORD *)&v222[44] = *(_DWORD *)&v166[3];
      sub_22F25406C(a2 + 4088, &v221, (__int128 *)((char *)&v221 + 8), (uint64_t)v185);
      *((_QWORD *)&v212 + 1) = v76;
      LOBYTE(v213) = 0;
      v221 = (unint64_t)v73;
      *(_OWORD *)v222 = v167;
      *(_OWORD *)&v222[16] = v168;
      v222[32] = 0;
      *(_DWORD *)&v222[33] = *(_DWORD *)v166;
      *(_DWORD *)&v222[36] = *(_DWORD *)&v166[3];
      *((_QWORD *)&v213 + 1) = sub_22F297CB8(a2, &v221);
      v78 = sub_22EF60740(v118, *v120, v76, 0, 0, a5 | ((unint64_t)a5 << 32));
      v79 = sub_22F3AD594(v118, v78, 5);
      sub_22E4C652C((_QWORD *)a2, v79);
      *(_QWORD *)v185 = v79;
      *(_QWORD *)&v221 = 0;
      v80 = sub_22E3CED3C((uint64_t *)(a2 + 2904), v185, &v221);
      v81 = v221;
      if (!v80)
        v81 = *(_QWORD *)(a2 + 2904) + 56 * *(unsigned int *)(a2 + 2920);
      v130 = *(_QWORD *)(v81 + 8);
      v82 = *(_QWORD *)(v81 + 24);
      v129 = *(_QWORD *)(v81 + 16);
      v84 = *(_DWORD *)(v81 + 32);
      v83 = *(_DWORD *)(v81 + 36);
      v85 = *(_QWORD *)(v81 + 40);
      v86 = *(_QWORD *)(v81 + 48);
      v87 = *(_QWORD *)(a2 + 24);
      *(_WORD *)&v222[16] = 257;
      v125 = sub_22E3BF45C(v75, v73, v87, 0, (uint64_t)&v221);
      if (*((_QWORD *)&v212 + 1))
        sub_22F254324((uint64_t)&v212 + 8, v212);
    }
    else
    {
      v88 = *v120;
      DWORD2(v221) = 64;
      *(_QWORD *)&v221 = v115;
      v89 = sub_22EF5FE30(v118, v88, (const llvm::APInt *)&v221, 0, 0, 0);
      LODWORD(v74) = v116;
      if (DWORD2(v221) >= 0x41 && (_QWORD)v221)
        MEMORY[0x2348A0E84](v221, 0x1000C8000313F17);
      v132 = v16;
      *(_QWORD *)&v221 = ".dep.arr.addr";
      *(_WORD *)&v222[16] = 259;
      v90 = sub_22F25E4D4(a2, v89, (uint64_t)&v221, 0);
      v92 = 0;
      v93 = v90 & 0xFFFFFFFFFFFFFFF8;
      if (v90 <= 7)
        v93 = 0;
      v94 = v91 & 0xFFFFFFFFFFFFFFF8;
      if (v90 <= 7)
        v94 = 0;
      if (v90 >= 8)
        v92 = 1 << (v91 & 7 | (8 * (v90 & 7)));
      v162[0] = v93;
      v162[1] = v94;
      v162[2] = v92;
      v163 = 0;
      v165 = 0;
      v164 = 0;
      LOWORD(v214) = 257;
      sub_22E486A58(v17, (uint64_t)v162, 0, (uint64_t)&v212, (uint64_t)&v221);
      v129 = *((_QWORD *)&v221 + 1);
      v130 = v221;
      v82 = *(_QWORD *)v222;
      v84 = *(_DWORD *)&v222[8];
      v83 = *(_DWORD *)&v222[12];
      v85 = *(_QWORD *)&v222[16];
      v86 = *(_QWORD *)&v222[24];
      v125 = llvm::ConstantInt::get();
    }
    LODWORD(v172[0]) = 0;
    v74 = v74;
    if ((_DWORD)v74)
    {
      v95 = (uint64_t)a3;
      v96 = v74;
      do
      {
        if (*(_DWORD *)v95 != 4 && !*(_QWORD *)(v95 + 8))
        {
          *(_QWORD *)&v156 = v130;
          *((_QWORD *)&v156 + 1) = v129;
          v157 = v82;
          v158 = v84;
          v159 = v83;
          v160 = v85;
          v161 = v86;
          sub_22E5AC2F0((_QWORD *)a2, (unint64_t *)v120, (uint64_t)v172, v95, &v156);
        }
        v95 += 64;
        --v96;
      }
      while (v96);
    }
    v97 = sub_22EF67C8C(v118);
    *(_QWORD *)&v177[0] = "dep.counter.addr";
    LOWORD(v178) = 259;
    v98 = sub_22F25E4D4(a2, v97, (uint64_t)v177, 0);
    v100 = 0;
    v101 = v98 & 0xFFFFFFFFFFFFFFF8;
    if (v98 <= 7)
      v101 = 0;
    v126 = v101;
    if (v98 <= 7)
      v102 = 0;
    else
      v102 = v99 & 0xFFFFFFFFFFFFFFF8;
    if (v98 >= 8)
      v100 = 1 << (v99 & 7 | (8 * (v98 & 7)));
    v103 = sub_22EF67C8C(v118);
    sub_22E6281E0(*(_QWORD **)(v133 + 144), v103, (uint64_t)&v191);
    *(_QWORD *)&v212 = v126;
    *((_QWORD *)&v212 + 1) = v102;
    *(_QWORD *)&v213 = v100;
    DWORD2(v213) = 0;
    v214 = 0uLL;
    v104 = *(_QWORD *)(*(_QWORD *)(v133 + 144) + 144);
    *(_OWORD *)v185 = v191;
    *(_OWORD *)&v185[16] = v192;
    *(_QWORD *)&v185[32] = v193;
    memset(v222, 0, 20);
    *((_QWORD *)&v221 + 1) = 0;
    *(_QWORD *)&v222[32] = 0;
    *(_QWORD *)&v222[24] = 0;
    v223 = 0uLL;
    *(_QWORD *)((char *)&v224 + 4) = 2;
    LODWORD(v221) = 0;
    v225 = 0u;
    v226 = 0u;
    sub_22E3C113C((uint64_t)&v221, &v212, v103, 2, (__int128 *)v185, v104);
    v105 = llvm::ConstantInt::get();
    v154[6] = v225;
    v154[7] = v226;
    v155 = v227;
    v154[2] = *(_OWORD *)&v222[16];
    v154[3] = *(_OWORD *)&v222[32];
    v154[4] = v223;
    v154[5] = v224;
    v154[0] = v221;
    v154[1] = *(_OWORD *)v222;
    sub_22E4E87FC(v133, v105, v154, 0);
    if ((_DWORD)v74)
    {
      v106 = (uint64_t)a3;
      v107 = v74;
      do
      {
        if (*(_DWORD *)v106 != 4 && *(_QWORD *)(v106 + 8))
        {
          *(_QWORD *)&v148 = v130;
          *((_QWORD *)&v148 + 1) = v129;
          v149 = v82;
          v150 = v84;
          v151 = v83;
          v152 = v85;
          v153 = v86;
          sub_22E5AC2F0((_QWORD *)v133, (unint64_t *)v120, (uint64_t)&v221 + 2, v106, &v148);
        }
        v106 += 64;
        --v107;
      }
      while (v107);
      v108 = a3;
      if ((v132 & 1) != 0)
      {
        do
        {
          if (*v108 == 4)
          {
            v146[6] = v225;
            v146[7] = v226;
            v147 = v227;
            v146[2] = *(_OWORD *)&v222[16];
            v146[3] = *(_OWORD *)&v222[32];
            v146[4] = v223;
            v146[5] = v224;
            v146[0] = v221;
            v146[1] = *(_OWORD *)v222;
            *(_QWORD *)&v140 = v130;
            *((_QWORD *)&v140 + 1) = v129;
            v141 = v82;
            v142 = v84;
            v143 = v83;
            v144 = v85;
            v145 = v86;
            sub_22F27F858(a1, v133, *(_QWORD *)(a1 + 2840), (uint64_t)v146, (uint64_t)v108, &v140);
          }
          v108 += 16;
          --v74;
        }
        while (v74);
      }
    }
    *(_QWORD *)&v134 = v130;
    *((_QWORD *)&v134 + 1) = v129;
    v135 = v82;
    v136 = v84;
    v137 = v83;
    v138 = v85;
    v139 = v86;
    v109 = *(_QWORD *)(v133 + 96);
    v110 = *(_QWORD *)(v133 + 8);
    *(_WORD *)&v185[32] = 257;
    sub_22F245864(v127, &v134, v109, v110, (uint64_t)v185, (uint64_t)&v212);
    v111 = v213;
    v112 = v212;
    v113 = v214;
    *(_QWORD *)a6 = v125;
    *(_OWORD *)(a6 + 8) = v112;
    *(_OWORD *)(a6 + 24) = v111;
    *(_OWORD *)(a6 + 40) = v113;
  }
  else
  {
LABEL_5:
    *(_DWORD *)(a6 + 32) = 0;
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
    *(_QWORD *)(a6 + 40) = 0;
    *(_QWORD *)(a6 + 48) = 0;
  }
}

uint64_t sub_22E5AC2F0(_QWORD *a1, unint64_t *a2, uint64_t a3, uint64_t a4, _OWORD *a5)
{
  uint64_t v9;
  __n128 v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  __n128 v13;
  uint64_t v14;
  unsigned __int8 **v15;
  unsigned int *v16;
  uint64_t *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  unsigned int v24;
  uint64_t *v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  llvm::Instruction *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  unint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  unsigned __int8 **v66;
  uint64_t *v67;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned __int8 **v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  _OWORD v87[8];
  uint64_t v88;
  _OWORD v89[8];
  uint64_t v90;
  _OWORD v91[8];
  uint64_t v92;
  _QWORD v93[4];
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  _OWORD v120[8];
  uint64_t v121;
  _QWORD v122[4];
  int v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  _OWORD v149[8];
  uint64_t v150;
  _OWORD v151[8];
  uint64_t v152;
  _OWORD v153[3];
  _OWORD v154[3];
  _OWORD v155[8];
  uint64_t v156;
  _BYTE v157[32];
  __int16 v158;
  _OWORD v159[3];
  _OWORD v160[3];
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  uint64_t v169;
  uint64_t v170;
  _OWORD v171[2];
  uint64_t v172;
  __int128 v173[2];
  uint64_t v174;
  _QWORD v175[44];

  v175[41] = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD *)(a1[18] + 144);
  v170 = 0;
  sub_22E5AB384(v9, a2, (unint64_t *)&v170);
  v67 = (uint64_t *)a2;
  v86 = sub_22F10C2A4(*(_QWORD *)(*a2 & 0xFFFFFFFFFFFFFFF0));
  sub_22E66C868(a1[18] + 280, v170, 0);
  v11 = *(unsigned __int8 **)(a4 + 8);
  if (v11)
    v12 = sub_22EFFA6B0(v11);
  else
    v12 = 0;
  sub_22E5A9CC0((uint64_t)v175, (uint64_t)a1, (uint64_t)v12, v10);
  v14 = *(unsigned int *)(a4 + 24);
  if ((_DWORD)v14)
  {
    v15 = *(unsigned __int8 ***)(a4 + 16);
    v66 = &v15[v14];
    v63 = a3 & 0xFFFFFFFFFFFFFFFCLL;
    if ((a3 & 2) != 0)
      v16 = 0;
    else
      v16 = (unsigned int *)(a3 & 0xFFFFFFFFFFFFFFFCLL);
    v17 = a1 + 34;
    v65 = v16;
    v78 = a1 + 34;
    do
    {
      v77 = v15;
      v18 = *v15;
      v75 = sub_22E5A9A24(a1, *v15, v13);
      v76 = v19;
      v64 = (uint64_t)v18;
      if (v16)
      {
        v29 = a5[1];
        v159[0] = *a5;
        v159[1] = v29;
        v159[2] = a5[2];
        v30 = *v16;
        v158 = 257;
        sub_22F26D368(v17, (uint64_t)v159, v30, (uint64_t)v157, (uint64_t)v160);
        v27 = *v67;
        v111 = v160[0];
        v112 = v160[1];
        v28 = v160[2];
      }
      else
      {
        v20 = *(_OWORD *)(v63 + 112);
        v155[6] = *(_OWORD *)(v63 + 96);
        v155[7] = v20;
        v156 = *(_QWORD *)(v63 + 128);
        v21 = *(_OWORD *)(v63 + 48);
        v155[2] = *(_OWORD *)(v63 + 32);
        v155[3] = v21;
        v22 = *(_OWORD *)(v63 + 64);
        v155[5] = *(_OWORD *)(v63 + 80);
        v155[4] = v22;
        v23 = *(_OWORD *)v63;
        v155[1] = *(_OWORD *)(v63 + 16);
        v155[0] = v23;
        sub_22EFF605C((uint64_t)v18);
        v25 = (uint64_t *)sub_22F25F748((uint64_t)a1, (uint64_t)v155, v24);
        v26 = a5[1];
        v153[0] = *a5;
        v153[1] = v26;
        v153[2] = a5[2];
        v158 = 257;
        sub_22F27F744(v17, (uint64_t)a1, (uint64_t)v153, v25, (uint64_t)v157, (uint64_t)v154);
        v27 = *v67;
        v111 = v154[0];
        v112 = v154[1];
        v28 = v154[2];
      }
      v113 = v28;
      sub_22E6281E0((_QWORD *)a1[18], v27, (uint64_t)v171);
      v140 = v111;
      v141 = v112;
      v142 = v113;
      v31 = *(_QWORD *)(a1[18] + 144);
      v173[0] = v171[0];
      v173[1] = v171[1];
      v174 = v172;
      v162 = 0uLL;
      *((_QWORD *)&v161 + 1) = 0;
      LODWORD(v163) = 0;
      *((_QWORD *)&v163 + 1) = 0;
      *(_QWORD *)&v164 = 0;
      v165 = 0uLL;
      *(_QWORD *)((char *)&v166 + 4) = 2;
      LODWORD(v161) = 0;
      v167 = 0u;
      v168 = 0u;
      sub_22E3C113C((uint64_t)&v161, &v140, v27, 2, v173, v31);
      v32 = *((_QWORD *)&v164 + 1);
      v33 = DWORD2(v165);
      v34 = HIDWORD(v166);
      v35 = *((_QWORD *)&v167 + 1);
      v36 = *((_QWORD *)&v168 + 1);
      v79 = v169;
      v80 = v164;
      v69 = v168;
      v70 = v167;
      v81 = *((_QWORD *)&v163 + 1);
      v82 = v162;
      v71 = DWORD1(v166);
      v83 = DWORD1(v163);
      v84 = v163;
      v72 = HIDWORD(v165);
      v73 = v165;
      v74 = *((_QWORD *)&v161 + 1);
      v85 = *((_QWORD *)&v162 + 1);
      v151[0] = v161;
      v151[1] = v162;
      v151[2] = v163;
      v151[3] = v164;
      v151[4] = v165;
      v151[5] = v166;
      v151[6] = v167;
      v151[7] = v168;
      v152 = v169;
      v37 = v161;
      v38 = v166;
      v39 = DWORD2(v166);
      v40 = sub_22EFC3B90(v86);
      sub_22E4DD05C((uint64_t)a1, (uint64_t)v151, v40, (uint64_t)&v161);
      v41 = a1[11];
      LOWORD(v142) = 257;
      v42 = sub_22E3C1740(v78, 47, v75, v41, (uint64_t)&v140);
      v149[6] = v167;
      v149[7] = v168;
      v150 = v169;
      v149[2] = v163;
      v149[3] = v164;
      v149[5] = v166;
      v149[4] = v165;
      v149[1] = v162;
      v149[0] = v161;
      sub_22E4E87FC(a1, v42, v149, 0);
      v122[0] = v37;
      v122[1] = v74;
      v122[2] = v82;
      v122[3] = v85;
      v123 = v84;
      v124 = v83;
      v125 = v81;
      v126 = v80;
      v127 = v32;
      v128 = v73;
      v129 = v33;
      v130 = v72;
      v131 = v38;
      v132 = v71;
      v133 = v39;
      v134 = v34;
      v135 = v70;
      v136 = v35;
      v137 = v69;
      v138 = v36;
      v139 = v79;
      v43 = sub_22EFC3B90(v86);
      do
        v43 = *(_QWORD *)(v43 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v43 && (*(_DWORD *)(v43 + 28) & 0x7Fu) - 49 > 2);
      sub_22E4DD05C((uint64_t)a1, (uint64_t)v122, v43, (uint64_t)&v140);
      v120[6] = v146;
      v120[7] = v147;
      v121 = v148;
      v120[2] = v142;
      v120[3] = v143;
      v120[5] = v145;
      v120[4] = v144;
      v120[0] = v140;
      v120[1] = v141;
      sub_22E4E87FC(a1, v76, v120, 0);
      v93[0] = v37;
      v93[1] = v74;
      v93[2] = v82;
      v93[3] = v85;
      v94 = v84;
      v95 = v83;
      v96 = v81;
      v97 = v80;
      v98 = v32;
      v99 = v73;
      v100 = v33;
      v101 = v72;
      v102 = v38;
      v103 = v71;
      v104 = v39;
      v105 = v34;
      v106 = v70;
      v107 = v35;
      v108 = v69;
      v109 = v36;
      v110 = v79;
      v44 = sub_22EFC3B90(v86);
      v45 = 2;
      v16 = v65;
      v17 = a1 + 34;
      do
      {
        do
          v44 = *(_QWORD *)(v44 + 8) & 0xFFFFFFFFFFFFFFF8;
        while (v44 && (*(_DWORD *)(v44 + 28) & 0x7Fu) - 49 > 2);
      }
      while (v45-- > 1);
      sub_22E4DD05C((uint64_t)a1, (uint64_t)v93, v44, (uint64_t)&v111);
      v47 = llvm::ConstantInt::get();
      v91[6] = v117;
      v91[7] = v118;
      v92 = v119;
      v91[2] = v113;
      v91[3] = v114;
      v91[4] = v115;
      v91[5] = v116;
      v91[0] = v111;
      v91[1] = v112;
      sub_22E4E87FC(a1, v47, v91, 0);
      if (v65)
      {
        ++*v65;
      }
      else
      {
        v48 = *(_OWORD *)(v63 + 112);
        v89[6] = *(_OWORD *)(v63 + 96);
        v89[7] = v48;
        v90 = *(_QWORD *)(v63 + 128);
        v49 = *(_OWORD *)(v63 + 48);
        v89[2] = *(_OWORD *)(v63 + 32);
        v89[3] = v49;
        v50 = *(_OWORD *)(v63 + 80);
        v89[4] = *(_OWORD *)(v63 + 64);
        v89[5] = v50;
        v51 = *(_OWORD *)(v63 + 16);
        v89[0] = *(_OWORD *)v63;
        v89[1] = v51;
        sub_22EFF605C(v64);
        v53 = sub_22F25F748((uint64_t)a1, (uint64_t)v89, v52);
        v54 = llvm::ConstantInt::get();
        LOWORD(v174) = 257;
        v55 = sub_22F26180C((uint64_t)v78, v53, v54, (uint64_t)v173);
        v87[0] = *(_OWORD *)v63;
        v56 = *(_OWORD *)(v63 + 16);
        v57 = *(_OWORD *)(v63 + 32);
        v58 = *(_OWORD *)(v63 + 64);
        v87[3] = *(_OWORD *)(v63 + 48);
        v87[4] = v58;
        v87[1] = v56;
        v87[2] = v57;
        v59 = *(_OWORD *)(v63 + 80);
        v60 = *(_OWORD *)(v63 + 96);
        v61 = *(_OWORD *)(v63 + 112);
        v88 = *(_QWORD *)(v63 + 128);
        v87[6] = v60;
        v87[7] = v61;
        v87[5] = v59;
        sub_22E4E87FC(a1, v55, v87, 0);
      }
      v15 = v77 + 1;
    }
    while (v77 + 1 != v66);
  }
  return sub_22E5AA440(v175);
}

void sub_22E5ACAC0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  int v6;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  llvm::Instruction *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  llvm::PointerType *v32;
  uint64_t v33;
  uint64_t RuntimeFunction;
  llvm::Value *v35;
  llvm::Value *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  unint64_t v42;
  int *v43;
  unint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  uint64_t v60;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD v65[3];
  _OWORD v66[3];
  _OWORD v67[3];
  _OWORD v68[8];
  uint64_t v69;
  const char *v70;
  __int16 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  int v90;
  _OWORD v91[8];
  uint64_t v92;
  _OWORD v93[8];
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  unint64_t v113;
  _OWORD v114[2];
  uint64_t v115;
  __int128 v116[2];
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD v123[6];

  v123[3] = *MEMORY[0x24BDAC8D0];
  v6 = *(_DWORD *)(a3 + 24);
  if (v6)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
    *(_QWORD *)(a5 + 32) = 0;
    v62 = (_QWORD *)(a5 + 32);
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 24) = 0;
    *(_QWORD *)(a5 + 40) = 0;
    v113 = 0;
    v11 = (unint64_t *)(a1 + 2840);
    sub_22E5AB384(v10, (unint64_t *)(a1 + 2840), &v113);
    v63 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(a1 + 2840) & 0xFFFFFFFFFFFFFFF0));
    v12 = sub_22EF5D130(v10, *(_QWORD *)(a1 + 2840));
    v13 = v12;
    v14 = *(_QWORD *)(a3 + 8);
    v64 = v10;
    if (v14)
    {
      v58 = v12;
      v18 = llvm::ConstantInt::get();
      v20 = *(unsigned int *)(v14 + 28);
      v59 = v11;
      if ((_DWORD)v20)
      {
        v21 = 0;
        v22 = 32 * v20;
        do
        {
          v23 = *(_QWORD *)(((v14
                            + 32
                            + 8 * *(unsigned int *)(v14 + 28)
                            + 8 * (3 * *(_DWORD *)(v14 + 28))
                            + 4 * (3 * *(_DWORD *)(v14 + 28))
                            + 7) & 0xFFFFFFFFFFFFFFF8)
                          + v21
                          + 8);
          *(_QWORD *)&v104 = a2;
          *((_QWORD *)&v104 + 1) = a2 + 272;
          LOBYTE(v105) = 0;
          *((_QWORD *)&v105 + 1) = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 232);
          v24 = sub_22E50E974(&v104, v23, v19);
          v25 = *(_QWORD *)(a2 + 88);
          LOWORD(v106) = 257;
          v26 = sub_22E3BF45C((uint64_t *)(a2 + 272), v24, v25, 0, (uint64_t)&v104);
          LOWORD(v106) = 257;
          v18 = (uint64_t)sub_22E3BDEA8(a2 + 272, v18, v26, (uint64_t)&v104, 1, 0);
          v21 += 32;
        }
        while (v22 != v21);
      }
      v27 = llvm::ConstantInt::get();
      LOWORD(v106) = 257;
      v28 = sub_22F26180C(a2 + 272, v27, v18, (uint64_t)&v104);
      sub_22EF5CCD0(v10, *(_QWORD *)(*(_QWORD *)(a1 + 2840) & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v104);
      v13 = v58;
      v29 = llvm::ConstantInt::get();
      LOWORD(v106) = 257;
      v17 = (uint64_t)sub_22E3BDEA8(a2 + 272, (uint64_t)v28, v29, (uint64_t)&v104, 1, 0);
      v30 = *(_QWORD *)(a2 + 88);
      LOWORD(v106) = 257;
      v60 = sub_22E3BF45C((uint64_t *)(a2 + 272), v18, v30, 0, (uint64_t)&v104);
      v11 = v59;
    }
    else
    {
      v15 = *v11;
      DWORD2(v104) = 64;
      *(_QWORD *)&v104 = (v6 + 1);
      v16 = sub_22EF5FE30(v10, v15, (const llvm::APInt *)&v104, 0, 0, 0);
      if (DWORD2(v104) >= 0x41 && (_QWORD)v104)
        MEMORY[0x2348A0E84](v104, 0x1000C8000313F17);
      sub_22EF5CCD0(v10, *(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v104);
      v17 = llvm::ConstantInt::get();
      v60 = llvm::ConstantInt::get();
    }
    v31 = sub_22E59F964(a1, a2, a4);
    v33 = llvm::ConstantPointerNull::get(*(llvm::ConstantPointerNull **)(a2 + 96), v32);
    v123[0] = v31;
    v123[1] = v17;
    v123[2] = v33;
    RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
    *(_QWORD *)&v104 = ".dep.arr.addr";
    LOWORD(v106) = 259;
    v36 = sub_22E479C7C(a2, RuntimeFunction, v35, (uint64_t)v123, 3, (uint64_t)&v104);
    v37 = sub_22E66C868(*(_QWORD *)(a2 + 144) + 280, *(_QWORD *)(a1 + 2840), 0);
    v38 = llvm::PointerType::get();
    LOWORD(v106) = 257;
    *(_QWORD *)a5 = sub_22E3C1338((uint64_t *)(a2 + 272), (uint64_t)v36, v38, (uint64_t)&v104);
    *(_QWORD *)(a5 + 8) = v37;
    *(_QWORD *)(a5 + 16) = v13;
    *(_DWORD *)(a5 + 24) = 0;
    *v62 = 0;
    v62[1] = 0;
    v39 = *(_QWORD *)(a1 + 2840);
    sub_22E6281E0(*(_QWORD **)(a2 + 144), v39, (uint64_t)&v72);
    v40 = *(_OWORD *)(a5 + 16);
    v95 = *(_OWORD *)a5;
    v96 = v40;
    v97 = *(_OWORD *)(a5 + 32);
    v41 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
    v81 = v72;
    v82 = v73;
    *(_QWORD *)&v83 = v74;
    LODWORD(v106) = 0;
    *((_QWORD *)&v104 + 1) = 0;
    v105 = 0uLL;
    *(_QWORD *)&v107 = 0;
    *((_QWORD *)&v106 + 1) = 0;
    v108 = 0uLL;
    *(_QWORD *)((char *)&v109 + 4) = 2;
    LODWORD(v104) = 0;
    v110 = 0u;
    v111 = 0u;
    sub_22E3C113C((uint64_t)&v104, &v95, v39, 2, &v81, v41);
    v93[6] = v110;
    v93[7] = v111;
    v94 = v112;
    v93[2] = v106;
    v93[3] = v107;
    v93[4] = v108;
    v93[5] = v109;
    v93[0] = v104;
    v93[1] = v105;
    v42 = sub_22EFC3B90(v63);
    sub_22E4DD05C(a2, (uint64_t)v93, v42, (uint64_t)&v95);
    v91[6] = v101;
    v91[7] = v102;
    v92 = v103;
    v91[2] = v97;
    v91[3] = v98;
    v91[4] = v99;
    v91[5] = v100;
    v91[0] = v95;
    v91[1] = v96;
    sub_22E4E87FC(a2, v60, v91, 0);
    v90 = 1;
    v82 = 0uLL;
    *((_QWORD *)&v81 + 1) = 0;
    LODWORD(v83) = 0;
    *(_QWORD *)&v84 = 0;
    *((_QWORD *)&v83 + 1) = 0;
    v85 = 0uLL;
    *(_QWORD *)((char *)&v86 + 4) = 2;
    v87 = 0u;
    v88 = 0u;
    if (*(_QWORD *)(a3 + 8))
    {
      v44 = v11;
      v45 = sub_22EF67C8C(v64);
      v70 = "iterator.counter.addr";
      v71 = 259;
      v46 = sub_22F25E4D4(a2, v45, (uint64_t)&v70, 0);
      v48 = 0;
      if (v46 <= 7)
        v49 = 0;
      else
        v49 = v46 & 0xFFFFFFFFFFFFFFF8;
      if (v46 <= 7)
        v50 = 0;
      else
        v50 = v47 & 0xFFFFFFFFFFFFFFF8;
      if (v46 >= 8)
        v48 = 1 << (v47 & 7 | (8 * (v46 & 7)));
      v51 = sub_22EF67C8C(v64);
      sub_22E6281E0(*(_QWORD **)(a2 + 144), v51, (uint64_t)v114);
      *(_QWORD *)&v118 = v49;
      *((_QWORD *)&v118 + 1) = v50;
      v119 = v48;
      v120 = 0;
      v121 = 0;
      v122 = 0;
      v52 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
      v116[0] = v114[0];
      v116[1] = v114[1];
      v117 = v115;
      *((_QWORD *)&v72 + 1) = 0;
      v73 = 0uLL;
      LODWORD(v74) = 0;
      *((_QWORD *)&v74 + 1) = 0;
      *(_QWORD *)&v75 = 0;
      v76 = 0uLL;
      *(_QWORD *)((char *)&v77 + 4) = 2;
      LODWORD(v72) = 0;
      v78 = 0u;
      v79 = 0u;
      sub_22E3C113C((uint64_t)&v72, &v118, v51, 2, v116, v52);
      v87 = v78;
      v88 = v79;
      v89 = v80;
      v83 = v74;
      v84 = v75;
      v85 = v76;
      v86 = v77;
      v81 = v72;
      v82 = v73;
      v53 = llvm::ConstantInt::get();
      v68[6] = v87;
      v68[7] = v88;
      v69 = v89;
      v68[2] = v83;
      v68[3] = v84;
      v68[4] = v85;
      v68[5] = v86;
      v68[0] = v81;
      v68[1] = v82;
      sub_22E4E87FC(a2, v53, v68, 1);
      v43 = (int *)((char *)&v81 + 2);
      v11 = v44;
    }
    else
    {
      v43 = &v90;
    }
    v54 = *(_OWORD *)(a5 + 16);
    v67[0] = *(_OWORD *)a5;
    v67[1] = v54;
    v67[2] = *(_OWORD *)(a5 + 32);
    sub_22E5AC2F0((_QWORD *)a2, v11, (uint64_t)v43, a3, v67);
    v55 = *(_OWORD *)(a5 + 16);
    v65[0] = *(_OWORD *)a5;
    v65[1] = v55;
    v65[2] = *(_OWORD *)(a5 + 32);
    LOWORD(v74) = 257;
    sub_22F26D368((uint64_t *)(a2 + 272), (uint64_t)v65, 1, (uint64_t)&v72, (uint64_t)v66);
    v56 = *(_QWORD *)(a2 + 96);
    v57 = *(_QWORD *)(a2 + 8);
    LOWORD(v121) = 257;
    sub_22F245864((uint64_t *)(a2 + 272), v66, v56, v57, (uint64_t)&v118, a5);
  }
  else
  {
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_DWORD *)(a5 + 24) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    *(_QWORD *)(a5 + 32) = 0;
    *(_QWORD *)(a5 + 40) = 0;
  }
}

uint64_t sub_22E5AD210(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t *v18;
  int v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  llvm::PHINode *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD v42[3];
  _OWORD v43[8];
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _OWORD v60[8];
  uint64_t v61;
  _BYTE v62[32];
  _BYTE v63[32];
  _BYTE v64[32];
  _OWORD v65[2];
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;

  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
  v67 = 0;
  sub_22E5AB384(v9, (unint64_t *)(a1 + 2840), (unint64_t *)&v67);
  v40 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(a1 + 2840) & 0xFFFFFFFFFFFFFFF0));
  sub_22E66C868(a2[18] + 280, v67, 0);
  v10 = *(_OWORD *)(a3 + 112);
  v60[6] = *(_OWORD *)(a3 + 96);
  v60[7] = v10;
  v61 = *(_QWORD *)(a3 + 128);
  v11 = *(_OWORD *)(a3 + 48);
  v60[2] = *(_OWORD *)(a3 + 32);
  v60[3] = v11;
  v12 = *(_OWORD *)(a3 + 80);
  v60[4] = *(_OWORD *)(a3 + 64);
  v60[5] = v12;
  v13 = *(_OWORD *)(a3 + 16);
  v60[0] = *(_OWORD *)a3;
  v60[1] = v13;
  sub_22E5AB0F0((uint64_t)v62, a1, (uint64_t)a2, (uint64_t)v60, a5);
  v14 = *(uint64_t **)v62;
  v16 = *(_QWORD *)&v62[24];
  v15 = *(_QWORD *)&v62[16];
  v39 = *(_DWORD *)&v64[28];
  v17 = *(const char **)&v65[0];
  v38 = *(_OWORD *)((char *)v65 + 8);
  v36 = v66;
  v37 = *((_QWORD *)&v65[1] + 1);
  v57 = *(_OWORD *)&v62[16];
  v58 = *(_OWORD *)v63;
  v18 = *(uint64_t **)&v62[16];
  v59 = *(_OWORD *)&v63[16];
  v19 = v63[8] & 3;
  if ((v63[8] & 3) != 0)
    v18 = (uint64_t *)sub_22F28ABCC(&v57, a2);
  *(_WORD *)v63 = 257;
  v41 = sub_22E42129C(a2 + 34, v16, v18, v14, (uint64_t)v62);
  *(_QWORD *)v62 = "omp.body";
  *(_WORD *)v63 = 259;
  v20 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  *(_QWORD *)v62 = "omp.done";
  *(_WORD *)v63 = 259;
  v21 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v22 = a2[40];
  sub_22E5ED9B4(a2, v20, 0);
  v23 = llvm::PointerType::get();
  *(_QWORD *)v62 = "omp.elementPast";
  *(_WORD *)v63 = 259;
  v24 = (llvm::PHINode *)sub_22E3C4B80(a2 + 34, v23, 2, (uint64_t)v62);
  if (v19)
    v15 = sub_22F28ABCC(&v57, a2);
  sub_22E3C4C50(v24, v15, v22);
  *(_QWORD *)&v57 = v24;
  DWORD2(v58) = 0;
  v59 = 0uLL;
  v72 = v57;
  v73 = v58;
  v74 = 0uLL;
  v25 = *(_QWORD *)(a1 + 2840);
  v26 = *(_QWORD *)(a2[18] + 144);
  v68 = v17;
  v69 = v38;
  v70 = v37;
  v71 = v36;
  memset(&v62[8], 0, 24);
  *(_DWORD *)v63 = 0;
  *(_QWORD *)&v63[16] = 0;
  *(_QWORD *)&v63[8] = 0;
  *(_OWORD *)v64 = 0uLL;
  *(_QWORD *)&v64[20] = 2;
  *(_DWORD *)v62 = 0;
  memset(v65, 0, sizeof(v65));
  sub_22E3C113C((uint64_t)v62, &v72, v25, v39, (__int128 *)&v68, v26);
  v46 = *(_OWORD *)&v62[8];
  v45 = *(_QWORD *)v62;
  v47 = *(_QWORD *)&v62[24];
  v48 = *(_QWORD *)v63;
  v49 = *(_OWORD *)&v63[8];
  v50 = *(_QWORD *)&v63[24];
  v51 = *(_QWORD *)v64;
  v52 = *(_OWORD *)&v64[8];
  v53 = *(_QWORD *)&v64[24];
  v54 = v65[0];
  v55 = v65[1];
  v56 = v66;
  v27 = sub_22EFC3B90(v40);
  v28 = 2;
  do
  {
    do
      v27 = *(_QWORD *)(v27 + 8) & 0xFFFFFFFFFFFFFFF8;
    while (v27 && (*(_DWORD *)(v27 + 28) & 0x7Fu) - 49 > 2);
  }
  while (v28-- > 1);
  sub_22E4DD05C((uint64_t)a2, (uint64_t)&v45, v27, (uint64_t)v62);
  v30 = llvm::ConstantInt::get();
  v43[6] = v65[0];
  v43[7] = v65[1];
  v44 = v66;
  v43[2] = *(_OWORD *)v63;
  v43[3] = *(_OWORD *)&v63[16];
  v43[4] = *(_OWORD *)v64;
  v43[5] = *(_OWORD *)&v64[16];
  v43[0] = *(_OWORD *)v62;
  v43[1] = *(_OWORD *)&v62[16];
  sub_22E4E87FC(a2, v30, v43, 0);
  v42[0] = v57;
  v42[1] = v58;
  v42[2] = v59;
  v68 = "omp.elementNext";
  LOWORD(v71) = 259;
  sub_22F26D368(a2 + 34, (uint64_t)v42, 1, (uint64_t)&v68, (uint64_t)&v72);
  if ((BYTE8(v73) & 3) != 0)
    v31 = sub_22F28ABCC(&v72, a2);
  else
    v31 = v72;
  sub_22E3C4C50(v24, v31, a2[40]);
  if ((BYTE8(v73) & 3) != 0)
    v32 = (uint64_t *)sub_22F28ABCC(&v72, a2);
  else
    v32 = (uint64_t *)v72;
  v68 = "omp.isempty";
  LOWORD(v71) = 259;
  v33 = sub_22E3C18F4((uint64_t)(a2 + 34), 32, v32, v41, (uint64_t)&v68);
  v34 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x23489C09C](v34, v21, v20, v33, 0);
  LOWORD(v71) = 257;
  sub_22E3C12C8(a2 + 34, v34, (uint64_t)&v68);
  return sub_22E5ED9B4(a2, v21, 1);
}

llvm::Value *sub_22E5AD738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 **a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  llvm::Value *v29;
  int8x16_t v30;
  uint64_t *v31;
  int v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  llvm::Value *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  char v76[32];
  __int16 v77;
  _BYTE v78[7];
  __int128 v79;
  __int128 v80;
  _OWORD *v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  _OWORD v85[3];
  __int128 v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  _OWORD v91[3];
  __int128 v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  _OWORD v97[3];
  __int128 v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  _OWORD v103[3];
  _QWORD v104[3];
  char v105;
  char v106;
  _OWORD *v107;
  uint64_t v108[2];
  int v109;
  _QWORD v110[2];
  int v111;
  _OWORD v112[3];
  _OWORD v113[3];
  std::string __p;
  _QWORD v115[3];
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  int v124;
  _QWORD v125[3];
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  int v134;
  _QWORD v135[2];
  __int128 v136;
  __int128 v137;
  char v138;
  _BYTE v139[7];
  char v140[24];
  __int128 v141;
  _BYTE v142[40];
  char v143;
  _BYTE v144[7];
  _OWORD v145[2];
  __int128 v146;
  uint64_t v147;
  unsigned __int8 v148;
  uint64_t v149;
  uint64_t v150[215];
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char v155;
  uint64_t v156[2];
  unsigned int v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  _QWORD v161[19];

  v12 = MEMORY[0x24BDAC7A8]();
  v67 = v13;
  v68 = v14;
  *((_QWORD *)&v75 + 1) = v15;
  v17 = v16;
  v18 = v12;
  v161[16] = *MEMORY[0x24BDAC8D0];
  v19 = *(_QWORD *)(*(_QWORD *)(v12 + 8) + 144);
  v159 = v161;
  v160 = 0x1000000000;
  v20 = *(_QWORD *)(v19 + 16816);
  v21 = v16;
  sub_22EA41AB8((uint64_t)v125, 62, 0, v16);
  v127 = 0;
  v128 = v20;
  v129 = 0;
  v130 = v17;
  v131 = v19 | 2;
  v132 = v125;
  v133 = 0;
  v125[0] = &off_24FAC3008;
  v134 = 1310720;
  v126 |= 0x200u;
  v22 = *(_QWORD *)(v19 + 16816);
  sub_22EA41AB8((uint64_t)v115, 62, 0, v21);
  v117 = 0;
  v118 = v22;
  v119 = 0;
  v120 = v17;
  v121 = v19 | 2;
  v122 = v115;
  v123 = 0;
  v115[0] = &off_24FAC3008;
  v124 = 1310720;
  v116 |= 0x200u;
  v23 = v160;
  if (v160 >= HIDWORD(v160))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v23 = v160;
  }
  v24 = a9;
  v159[v23] = v125;
  v25 = v160 + 1;
  LODWORD(v160) = v25;
  if (v25 >= HIDWORD(v160))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v25 = v160;
  }
  v159[v25] = v115;
  LODWORD(v160) = v160 + 1;
  v26 = sub_22F24E348(*(_QWORD *)(v18 + 8) + 280, *(_QWORD *)(v19 + 16392), (uint64_t *)&v159);
  v145[0] = xmmword_24FA65AA0;
  v145[1] = *(_OWORD *)&off_24FA65AB0;
  v146 = xmmword_24FA65AC0;
  sub_22F27BE70(&__p, v18, (uint64_t)v145, 3);
  v27 = sub_22E46F2EC(*(_QWORD *)(v18 + 8) + 280, v26);
  LOWORD(v146) = 260;
  *(_QWORD *)&v145[0] = &__p;
  v28 = *(_QWORD *)(*(_QWORD *)(v18 + 8) + 200);
  v29 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x78);
  MEMORY[0x23489F6FC](v29, v27, 7, 0xFFFFFFFFLL, v145, v28);
  sub_22E62BF18(*(uint64_t **)(v18 + 8), 0, 0, v29, v26);
  llvm::Function::addFnAttr();
  sub_22E618EBC((uint64_t)v145, *(_QWORD *)(v18 + 8), 0);
  v66 = v29;
  sub_22E61A8FC((uint64_t)v145, 0, 0, *(_QWORD *)(v19 + 16392), v29, v26, (uint64_t *)&v159, v21, v30, v21);
  *(_QWORD *)&v141 = v125;
  v104[0] = 0;
  v31 = v156;
  v32 = sub_22E3CED3C(v156, &v141, v104);
  v33 = v104[0];
  if (!v32)
    v33 = v156[0] + 56 * v157;
  v34 = *(_OWORD *)(v33 + 8);
  v35 = *(_OWORD *)(v33 + 40);
  v113[1] = *(_OWORD *)(v33 + 24);
  v113[2] = v35;
  v113[0] = v34;
  LOWORD(v107) = 257;
  v36 = sub_22E3C2A7C(v150, (uint64_t)v113, (uint64_t)v104);
  v37 = llvm::PointerType::get();
  *(_WORD *)&v142[16] = 257;
  v38 = sub_22E3C1338(v150, v36, v37, (uint64_t)&v141);
  v74 = v148;
  *(_QWORD *)&v75 = v38;
  *(_QWORD *)&v141 = v115;
  v104[0] = 0;
  v39 = sub_22E3CED3C(v156, &v141, v104);
  v40 = v104[0];
  if (!v39)
    v40 = v156[0] + 56 * v157;
  v41 = *(_OWORD *)(v40 + 8);
  v42 = *(_OWORD *)(v40 + 40);
  v112[1] = *(_OWORD *)(v40 + 24);
  v112[2] = v42;
  v112[0] = v41;
  LOWORD(v107) = 257;
  v43 = sub_22E3C2A7C(v150, (uint64_t)v112, (uint64_t)v104);
  v44 = llvm::PointerType::get();
  *(_WORD *)&v142[16] = 257;
  v45 = sub_22E3C1338(v150, v43, v44, (uint64_t)&v141);
  v72 = v148;
  v73 = v45;
  v106 = 1;
  v104[2] = v153;
  v105 = v155;
  v155 = 0;
  v104[0] = v151 - v152;
  v104[1] = v154;
  v154 = v151 - v152;
  v108[1] = 0;
  v107 = v145;
  v108[0] = 0;
  v109 = 0;
  v110[1] = 0;
  v110[0] = 0;
  v111 = 0;
  v46 = a12;
  v47 = a12;
  if ((_DWORD)a12)
  {
    LODWORD(v48) = 0;
    v49 = a9;
    v51 = v67;
    v50 = v68;
    do
    {
      v52 = *(_QWORD *)(*(_QWORD *)v49 + 16);
      *(_QWORD *)&v98 = v73;
      *((_QWORD *)&v98 + 1) = *((_QWORD *)&v75 + 1);
      v99 = v72;
      v100 = 0;
      v101 = 0;
      v102 = 0;
      sub_22E5ADFC8((uint64_t)v103, (uint64_t)v145, &v98, v48, v52);
      v141 = v103[0];
      *(_OWORD *)v142 = v103[1];
      *(_OWORD *)&v142[16] = v103[2];
      sub_22E5BC134(v108, (uint64_t)v107, v52, (uint64_t)&v141);
      v53 = *(_QWORD *)(*(_QWORD *)v50 + 16);
      v92 = v75;
      v93 = v74;
      v94 = 0;
      v95 = 0;
      v96 = 0;
      sub_22E5ADFC8((uint64_t)v97, (uint64_t)v145, &v92, v48, v53);
      v141 = v97[0];
      *(_OWORD *)v142 = v97[1];
      *(_OWORD *)&v142[16] = v97[2];
      sub_22E5BC134(v108, (uint64_t)v107, v53, (uint64_t)&v141);
      v54 = *(_QWORD *)(*(_QWORD *)v51 + 8);
      if ((*(_BYTE *)(*(_QWORD *)(v54 & 0xFFFFFFFFFFFFFFF0) + 17) & 8) != 0)
      {
        v48 = (v48 + 1);
        v86 = v75;
        v87 = v74;
        v88 = 0;
        v89 = 0;
        v90 = 0;
        *(_WORD *)&v142[16] = 257;
        sub_22E486A58(v150, (uint64_t)&v86, v48, (uint64_t)&v141, (uint64_t)v91);
        v85[0] = v91[0];
        v85[1] = v91[1];
        v85[2] = v91[2];
        *(_WORD *)&v142[16] = 257;
        v69 = sub_22E3C2A7C(v150, (uint64_t)v85, (uint64_t)&v141);
        v55 = sub_22EF5C728(*(_QWORD *)(v149 + 144), v54);
        v56 = *(_BYTE *)(v55 + 16) == 5 ? v55 : 0;
        v57 = *(_QWORD *)(v56 + 40);
        v77 = 257;
        v70 = sub_22E3C1740(v150, 47, v69, v147, (uint64_t)v76);
        v81 = v145;
        *(_QWORD *)&v141 = v57;
        *((_QWORD *)&v141 + 1) = v70;
        *(_QWORD *)v142 = 0;
        *(_OWORD *)&v142[8] = v79;
        *(_OWORD *)&v142[24] = v80;
        v143 = v71 & 0xF8;
        *(_DWORD *)v144 = *(_DWORD *)v78;
        *(_DWORD *)&v144[3] = *(_DWORD *)&v78[3];
        sub_22F25406C((uint64_t)&v158, &v141, (__int128 *)((char *)&v141 + 8), (uint64_t)v140);
        v82 = v57;
        v83 = 0;
        v135[0] = v70;
        v135[1] = 0;
        v136 = v79;
        v137 = v80;
        v71 &= 0xFFFFFFF8;
        v138 = v71;
        *(_DWORD *)v139 = *(_DWORD *)v78;
        *(_DWORD *)&v139[3] = *(_DWORD *)&v78[3];
        v84 = sub_22F297CB8((uint64_t)v145, v135);
        sub_22E61DFC4((uint64_t)v145, v54);
        if (v82)
          sub_22F254324((uint64_t)&v82, (uint64_t)v81);
      }
      v51 += 8;
      LODWORD(v48) = v48 + 1;
      v50 += 8;
      v49 += 8;
      --v46;
    }
    while (v46);
    v31 = (uint64_t *)v107 + 363;
    v47 = a12;
  }
  sub_22E5BC320((uint64_t)v110, (uint64_t)v31);
  sub_22F2840EC((uint64_t)v110);
  v59 = v67;
  v58 = v68;
  if (v47)
  {
    v61 = 8 * v47;
    do
    {
      v62 = *(_QWORD *)(*(_QWORD *)v59 + 8);
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v62 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) & 0xFEu)
         - 2 > 3)
      {
        sub_22E5AE654(v145, *a11);
      }
      else
      {
        v63 = *(_QWORD *)(*(_QWORD *)v58 + 16);
        v64 = *(const char **)(*(_QWORD *)v24 + 16);
        v135[0] = *a11;
        *(_QWORD *)&v141 = sub_22E5C623C;
        *((_QWORD *)&v141 + 1) = v135;
        sub_22E5AE0F0((uint64_t)v145, v62, v63, v64, (uint64_t)&v141, 0, 0, 0);
      }
      v59 += 8;
      v58 += 8;
      v24 += 8;
      ++a11;
      v61 -= 8;
    }
    while (v61);
  }
  sub_22F280698((uint64_t)v104);
  sub_22E619DE8((uint64_t)v145, 0);
  sub_22F283FC4((uint64_t)v104);
  sub_22E619434((uint64_t)v145);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v159 != v161)
    free(v159);
  return v66;
}

unint64_t sub_22E5ADFC8(uint64_t a1, uint64_t a2, _OWORD *a3, unsigned int a4, unint64_t a5)
{
  uint64_t *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  _OWORD v15[3];
  _BYTE v16[32];
  __int16 v17;
  _OWORD v18[3];
  _OWORD v19[3];

  v8 = (uint64_t *)(a2 + 272);
  v9 = a3[1];
  v18[0] = *a3;
  v18[1] = v9;
  v18[2] = a3[2];
  v17 = 257;
  sub_22E486A58((uint64_t *)(a2 + 272), (uint64_t)v18, a4, (uint64_t)v16, (uint64_t)v19);
  v15[0] = v19[0];
  v15[1] = v19[1];
  v15[2] = v19[2];
  v17 = 257;
  v10 = sub_22E3C2A7C(v8, (uint64_t)v15, (uint64_t)v16);
  v11 = sub_22E66C868(*(_QWORD *)(a2 + 144) + 280, *(_QWORD *)(a5 + 48), 0);
  v12 = llvm::PointerType::get();
  v17 = 257;
  v13 = sub_22E3C1740(v8, 49, v10, v12, (uint64_t)v16);
  result = sub_22EF5B404(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 144), a5, 0);
  *(_QWORD *)a1 = v13;
  *(_QWORD *)(a1 + 8) = v11;
  *(_QWORD *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

uint64_t sub_22E5AE0F0(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  int v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  llvm::PHINode *v28;
  llvm::LLVMContext *v29;
  uint64_t v30;
  uint64_t v31;
  llvm::PHINode *v32;
  llvm::LLVMContext *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v47;
  _QWORD v52[3];
  char v53;
  char v54;
  uint64_t v55;
  uint64_t v56[2];
  int v57;
  _QWORD v58[2];
  int v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  const char *v67;
  llvm::LLVMContext *v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;

  v66 = 0;
  v67 = (const char *)a3;
  v52[0] = 0;
  v11 = (uint64_t *)(a1 + 2904);
  v12 = sub_22E3CED3C((uint64_t *)(a1 + 2904), &v67, v52);
  v13 = v52[0];
  if (!v12)
    v13 = *(_QWORD *)(a1 + 2904) + 56 * *(unsigned int *)(a1 + 2920);
  v14 = *(_OWORD *)(v13 + 8);
  v15 = *(_OWORD *)(v13 + 40);
  v64 = *(_OWORD *)(v13 + 24);
  v65 = v15;
  v63 = v14;
  v47 = (uint64_t)a4;
  v67 = a4;
  v52[0] = 0;
  v16 = sub_22E3CED3C(v11, &v67, v52);
  v17 = v52[0];
  if (!v16)
    v17 = *(_QWORD *)(a1 + 2904) + 56 * *(unsigned int *)(a1 + 2920);
  v18 = *(_OWORD *)(v17 + 24);
  v60 = *(_OWORD *)(v17 + 8);
  v61 = v18;
  v62 = *(_OWORD *)(v17 + 40);
  v19 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (!v19 || (*(_DWORD *)(v19 + 16) & 0xFEu) - 6 <= 0xFFFFFFFB)
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 <= 3)
      v19 = sub_22F10CF48(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
    else
      v19 = 0;
  }
  v20 = (uint64_t *)sub_22E620E9C(a1, (llvm::LLVMContext *)v19, &v66, (uint64_t)&v63);
  if ((BYTE8(v61) & 3) != 0)
    v42 = (uint64_t *)sub_22F28ABCC(&v60, (_QWORD *)a1);
  else
    v42 = (uint64_t *)v60;
  if ((BYTE8(v64) & 3) != 0)
    v21 = (uint64_t *)sub_22F28ABCC(&v63, (_QWORD *)a1);
  else
    v21 = (uint64_t *)v63;
  LOWORD(v55) = 257;
  v45 = sub_22E42129C((uint64_t *)(a1 + 272), *((uint64_t *)&v63 + 1), v21, v20, (uint64_t)v52);
  v52[0] = "omp.arraycpy.body";
  LOWORD(v55) = 259;
  v22 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v52[0] = "omp.arraycpy.done";
  LOWORD(v55) = 259;
  v44 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v52[0] = "omp.arraycpy.isempty";
  LOWORD(v55) = 259;
  v23 = sub_22E3C18F4(a1 + 272, 32, v21, v45, (uint64_t)v52);
  v24 = llvm::User::operator new((llvm::User *)0x40);
  v43 = v22;
  MEMORY[0x23489C09C](v24, v44, v22, v23, 0);
  LOWORD(v55) = 257;
  sub_22E3C12C8((uint64_t *)(a1 + 272), v24, (uint64_t)v52);
  v25 = *(_QWORD *)(a1 + 320);
  sub_22E5ED9B4((_QWORD *)a1, v22, 0);
  sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), *(_QWORD *)(v66 & 0xFFFFFFFFFFFFFFF0), (uint64_t)v52);
  v26 = v52[0];
  v27 = *v42;
  v52[0] = "omp.arraycpy.srcElementPast";
  LOWORD(v55) = 259;
  v28 = (llvm::PHINode *)sub_22E3C4B80((uint64_t *)(a1 + 272), v27, 2, (uint64_t)v52);
  sub_22E3C4C50(v28, (uint64_t)v42, v25);
  v29 = (llvm::LLVMContext *)*((_QWORD *)&v60 + 1);
  v30 = (v61 | v26) & -(uint64_t)(v61 | v26);
  v31 = *v21;
  v52[0] = "omp.arraycpy.destElementPast";
  LOWORD(v55) = 259;
  v32 = (llvm::PHINode *)sub_22E3C4B80((uint64_t *)(a1 + 272), v31, 2, (uint64_t)v52);
  sub_22E3C4C50(v32, (uint64_t)v21, v25);
  v33 = (llvm::LLVMContext *)*((_QWORD *)&v63 + 1);
  v34 = (v64 | v26) & -(uint64_t)(v64 | v26);
  v54 = 1;
  v35 = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000);
  v52[2] = *(_QWORD *)(a1 + 2312);
  v53 = *(_BYTE *)(a1 + 2893);
  *(_BYTE *)(a1 + 2893) = 0;
  v36 = *(_QWORD *)(a1 + 2872);
  v52[0] = v35;
  v52[1] = v36;
  *(_QWORD *)(a1 + 2872) = v35;
  v56[0] = 0;
  v56[1] = 0;
  v55 = a1;
  v57 = 0;
  v58[0] = 0;
  v58[1] = 0;
  v59 = 0;
  v67 = (const char *)v32;
  v68 = v33;
  v69 = v34;
  v70 = 0;
  v71 = 0;
  v72 = 0;
  sub_22E5BC134(v56, a1, a3, (uint64_t)&v67);
  v67 = (const char *)v28;
  v68 = v29;
  v69 = v30;
  v70 = 0;
  v71 = 0;
  v72 = 0;
  sub_22E5BC134(v56, v55, v47, (uint64_t)&v67);
  sub_22E5BC320((uint64_t)v58, v55 + 2904);
  sub_22F2840EC((uint64_t)v58);
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))a5)(*(_QWORD *)(a5 + 8), a1, a6, a7, a8);
  sub_22F280698((uint64_t)v52);
  v67 = "omp.arraycpy.dest.element";
  LOWORD(v71) = 259;
  v37 = (uint64_t *)sub_22E4363E4((uint64_t *)(a1 + 272), *((llvm::LLVMContext **)&v63 + 1), (uint64_t *)v32, 1, (uint64_t)&v67);
  v67 = "omp.arraycpy.src.element";
  LOWORD(v71) = 259;
  v38 = sub_22E4363E4((uint64_t *)(a1 + 272), v29, (uint64_t *)v28, 1, (uint64_t)&v67);
  v67 = "omp.arraycpy.done";
  LOWORD(v71) = 259;
  v39 = sub_22E3C18F4(a1 + 272, 32, v37, v45, (uint64_t)&v67);
  v40 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x23489C09C](v40, v44, v43, v39, 0);
  LOWORD(v71) = 257;
  sub_22E3C12C8((uint64_t *)(a1 + 272), v40, (uint64_t)&v67);
  sub_22E3C4C50(v32, (uint64_t)v37, *(_QWORD *)(a1 + 320));
  sub_22E3C4C50(v28, v38, *(_QWORD *)(a1 + 320));
  sub_22E5ED9B4((_QWORD *)a1, v44, 1);
  return sub_22F283FC4((uint64_t)v52);
}

int32x2_t sub_22E5AE654(_QWORD *a1, unsigned __int8 *a2)
{
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  uint64_t v6;
  int32x2_t result;
  uint64_t v8;
  unsigned __int8 **v9;
  char v10;
  uint64_t v11;
  char v12[24];
  unsigned __int8 **v13;
  __int128 v14;
  char v15;
  char v16;

  if ((*a2 + 113) >= 0xFBu
    && (v4 = *(unsigned __int8 ***)&a2[a2[3]], *(unsigned __int8 *)v4 == 210)
    && (v5 = sub_22EFFEB40(v4[2]), *v5 == 161)
    && (v6 = *((_QWORD *)v5 + 2)) != 0
    && (*(_DWORD *)(v6 + 28) & 0x7F) == 0x47)
  {
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[18] + 808) + 80))(*(_QWORD *)(a1[18] + 808));
    v13 = v4;
    v14 = (unint64_t)v8;
    v16 = 0;
    sub_22F25406C((uint64_t)(a1 + 511), &v13, &v14, (uint64_t)v12);
    v9 = v4;
    v10 = 0;
    v13 = (unsigned __int8 **)v8;
    *(_QWORD *)&v14 = 0;
    v15 = 0;
    v11 = sub_22F297CB8((uint64_t)a1, &v13);
    sub_22E4D89CC(a1, a2);
    return sub_22F254324((uint64_t)&v9, (uint64_t)a1);
  }
  else
  {
    sub_22E4D89CC(a1, a2);
  }
  return result;
}

void sub_22E5AE780(_QWORD *a1, uint64_t a2, unsigned int a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, __int128 a9, unsigned __int8 **a10, uint64_t a11, __int16 a12)
{
  uint64_t *v13;
  unsigned __int8 **v15;
  unsigned int **v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  llvm::Type **v44;
  unint64_t v45;
  unint64_t v46;
  llvm::Instruction *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  llvm::Type **v51;
  uint64_t v52;
  uint64_t v53;
  std::string *p_p;
  uint64_t size;
  uint64_t v56;
  llvm::Instruction *v57;
  uint64_t v58;
  uint64_t v59;
  llvm::LLVMContext *v60;
  uint64_t RuntimeFunction;
  llvm::Value *v62;
  llvm::Value *v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  llvm::LLVMContext *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  llvm::LLVMContext *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  __int128 v80;
  llvm::Value *v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  const char *v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  _QWORD v95[2];
  const char **v96;
  _BYTE v97[32];
  _BYTE v98[24];
  unsigned __int8 **v99;
  uint64_t v100;
  _QWORD v101[3];
  __int128 v102;
  __int128 v103;
  __int128 v104;
  unsigned __int8 **v105;
  uint64_t v106;
  std::string __p;
  _OWORD v108[3];
  _QWORD v109[3];
  int v110;
  uint64_t v111;
  uint64_t v112;
  _OWORD v113[3];
  _QWORD v114[3];
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  _QWORD v120[3];
  _QWORD v121[3];
  _QWORD v122[7];
  _BYTE v123[56];
  _QWORD *v124;
  unint64_t v125;
  char v126;
  uint64_t v127;
  uint64_t v128;

  v128 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 320))
  {
    v13 = a4;
    v15 = a10;
    v16 = (unsigned int **)a9;
    if ((a12 & 0x100) != 0)
    {
      v17 = *(_QWORD *)(a2 + 1992) - *(_QWORD *)(a2 + 2000);
      v18 = *(_QWORD *)(a2 + 2312);
      v19 = *(_BYTE *)(a2 + 2893);
      *(_BYTE *)(a2 + 2893) = 0;
      v20 = *(_QWORD *)(a2 + 2872);
      *(_QWORD *)(a2 + 2872) = v17;
      if (a11)
      {
        v21 = 8 * a11;
        do
        {
          v23 = *v15++;
          v22 = v23;
          v25 = *v13++;
          v24 = v25;
          v27 = *a6++;
          v26 = v27;
          v28 = *v16++;
          sub_22F28070C((uint64_t)a1, (_QWORD *)a2, v22, v24, v26, (uint64_t)v28);
          v21 -= 8;
        }
        while (v21);
      }
      *(_BYTE *)(a2 + 2893) = v19;
      sub_22E48B274((_QWORD *)a2, v17, v18, 0, 0);
      *(_QWORD *)(a2 + 2872) = v20;
    }
    else
    {
      v29 = *(_QWORD *)(a1[1] + 144);
      LODWORD(v30) = DWORD2(a9);
      if (a5)
      {
        v31 = 8 * a5;
        v30 = *((_QWORD *)&a9 + 1);
        v32 = a4;
        do
        {
          v33 = *v32++;
          v30 += ((unint64_t)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v33 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) >> 11) & 1;
          v31 -= 8;
        }
        while (v31);
      }
      *(_QWORD *)&v80 = a4;
      *((_QWORD *)&v80 + 1) = a5;
      v119 = 32;
      v118 = v30;
      v34 = sub_22EF5FE30(v29, *(_QWORD *)(v29 + 16816), (const llvm::APInt *)&v118, 0, 0, 0);
      *(_QWORD *)v123 = ".omp.reduction.red_list";
      *(_WORD *)&v123[32] = 259;
      v76 = v34;
      v35 = sub_22F25E4D4(a2, v34, (uint64_t)v123, 0);
      if (DWORD2(a9))
      {
        LODWORD(v37) = 0;
        v74 = a6;
        v75 = v35 & 0xFFFFFFFFFFFFFFF8;
        if (v35 <= 7)
          v38 = 0;
        else
          v38 = v35 & 0xFFFFFFFFFFFFFFF8;
        v39 = v36 & 0xFFFFFFFFFFFFFFF8;
        if (v35 <= 7)
          v39 = 0;
        v82 = v39;
        v84 = v38;
        if (v35 <= 7)
          v40 = 0;
        else
          v40 = 1 << (v36 & 7 | (8 * (v35 & 7)));
        v41 = DWORD2(a9);
        v42 = v80;
        do
        {
          v114[0] = v84;
          v114[1] = v82;
          v114[2] = v40;
          v115 = 0;
          v116 = 0;
          v117 = 0;
          *(_WORD *)&v123[32] = 257;
          sub_22E486A58((uint64_t *)(a2 + 272), (uint64_t)v114, v37, (uint64_t)v123, (uint64_t)&v102);
          sub_22E4D8D7C(a2, *v16, (uint64_t)v123);
          *(_OWORD *)v97 = *(_OWORD *)&v123[8];
          *(_OWORD *)&v97[16] = *(_OWORD *)&v123[24];
          *(_OWORD *)v98 = *(_OWORD *)&v123[40];
          sub_22E5E0440(a2, (uint64_t)v97, v125, &v86);
          v43 = *(_QWORD *)(a2 + 96);
          WORD4(v88) = 257;
          v44 = (llvm::Type **)sub_22E3C1338((uint64_t *)(a2 + 272), (uint64_t)v86, v43, (uint64_t)&v86);
          v113[0] = v102;
          v113[1] = v103;
          v113[2] = v104;
          sub_22E3BEDDC(a2 + 272, v44, (uint64_t)v113);
          if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v42 + 8) & 0xFFFFFFFFFFFFFFF0) + 17) & 8) != 0)
          {
            v37 = (v37 + 1);
            v109[0] = v84;
            v109[1] = v82;
            v109[2] = v40;
            v110 = 0;
            v111 = 0;
            v112 = 0;
            WORD4(v88) = 257;
            sub_22E486A58((uint64_t *)(a2 + 272), (uint64_t)v109, v37, (uint64_t)&v86, (uint64_t)v123);
            v102 = *(_OWORD *)v123;
            v103 = *(_OWORD *)&v123[16];
            v104 = *(_OWORD *)&v123[32];
            v45 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 144), *(_QWORD *)(*(_QWORD *)v42 + 8));
            v46 = 0;
            if (v45)
            {
              if (*(_BYTE *)(v45 + 16) == 5)
                v46 = v45;
              else
                v46 = 0;
            }
            v47 = sub_22F297878(a2, v46);
            v48 = *(_QWORD *)(a2 + 88);
            *(_WORD *)&v123[32] = 257;
            v49 = sub_22E3BF45C((uint64_t *)(a2 + 272), (uint64_t)v47, v48, 0, (uint64_t)v123);
            v50 = *(_QWORD *)(a2 + 96);
            *(_WORD *)&v123[32] = 257;
            v51 = (llvm::Type **)sub_22E3C1740((uint64_t *)(a2 + 272), 48, v49, v50, (uint64_t)v123);
            v108[0] = v102;
            v108[1] = v103;
            v108[2] = v104;
            sub_22E3BEDDC(a2 + 272, v51, (uint64_t)v108);
          }
          v42 += 8;
          LODWORD(v37) = v37 + 1;
          ++v16;
          --v41;
        }
        while (v41);
        a6 = v74;
        v16 = (unsigned int **)a9;
        v15 = a10;
      }
      else
      {
        v75 = v35 & 0xFFFFFFFFFFFFFFF8;
      }
      v52 = sub_22E66C868(*(_QWORD *)(a2 + 144) + 280, v76, 0);
      v81 = sub_22E5AD738((uint64_t)a1, a3, v52, v80, *((uint64_t *)&v80 + 1), (uint64_t)a6, a7, v53, (uint64_t)v16, *((uint64_t *)&a9 + 1), v15, a11);
      *(_QWORD *)v123 = "reduction";
      *(_QWORD *)&v123[8] = 9;
      sub_22F27BE70(&__p, (uint64_t)a1, (uint64_t)v123, 1);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
      else
        size = __p.__r_.__value_.__l.__size_;
      v85 = sub_22E5A1FF4((uint64_t)a1, (const char *)p_p, size);
      v83 = sub_22E59F7E4(a1, a2, a3);
      v56 = sub_22E59F964((uint64_t)a1, a2, a3);
      v57 = sub_22F28CE84(a2, v76);
      v58 = *(_QWORD *)(a2 + 96);
      *(_WORD *)&v123[32] = 257;
      v59 = sub_22E3C1338((uint64_t *)(a2 + 272), v75, v58, (uint64_t)v123);
      v122[0] = v83;
      v122[1] = v56;
      llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 336), v60);
      v122[2] = llvm::ConstantInt::get();
      v122[3] = v57;
      v122[4] = v59;
      v122[5] = v81;
      v122[6] = v85;
      RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
      *(_WORD *)&v123[32] = 257;
      v63 = sub_22E479C7C(a2, RuntimeFunction, v62, (uint64_t)v122, 7, (uint64_t)v123);
      *(_QWORD *)v123 = ".omp.reduction.default";
      *(_WORD *)&v123[32] = 259;
      v64 = (_QWORD *)operator new();
      llvm::BasicBlock::BasicBlock();
      v65 = llvm::User::operator new((llvm::User *)0x40);
      MEMORY[0x23489C204](v65, v63, v64, 2, 0);
      *(_WORD *)&v123[32] = 257;
      sub_22E3C12C8((uint64_t *)(a2 + 272), v65, (uint64_t)v123);
      *(_QWORD *)v123 = ".omp.reduction.case1";
      *(_WORD *)&v123[32] = 259;
      v66 = (_QWORD *)operator new();
      llvm::BasicBlock::BasicBlock();
      llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 336), v67);
      llvm::ConstantInt::get();
      llvm::SwitchInst::addCase();
      sub_22E5ED9B4((_QWORD *)a2, v66, 0);
      v121[0] = v83;
      v121[1] = v56;
      v121[2] = v85;
      v102 = v80;
      *(_QWORD *)&v103 = a6;
      *((_QWORD *)&v103 + 1) = a7;
      v104 = a9;
      v105 = a10;
      v106 = a11;
      v101[0] = &v102;
      v101[1] = sub_22E5C625C;
      v68 = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
      memset(&v123[8], 0, 32);
      *(_QWORD *)v123 = off_24FA65C78;
      *(_QWORD *)&v123[40] = v68;
      *(_QWORD *)&v123[48] = v69;
      v124 = v121;
      v125 = 3;
      v126 = 0;
      v127 = 0;
      v101[2] = v123;
      sub_22F27B464(v101, a2);
      sub_22E5EDA70(a2);
      v86 = ".omp.reduction.case2";
      WORD4(v88) = 259;
      v70 = (_QWORD *)operator new();
      llvm::BasicBlock::BasicBlock();
      llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 336), v71);
      llvm::ConstantInt::get();
      llvm::SwitchInst::addCase();
      sub_22E5ED9B4((_QWORD *)a2, v70, 0);
      *(_DWORD *)v97 = a3;
      *(_OWORD *)&v97[8] = v80;
      *(_QWORD *)&v97[24] = a6;
      *(_QWORD *)v98 = a7;
      *(_OWORD *)&v98[8] = a9;
      v99 = a10;
      v100 = a11;
      v95[0] = v97;
      v95[1] = sub_22E5C62C4;
      v96 = 0;
      if ((a12 & 1) == 0)
      {
        v120[0] = v83;
        v120[1] = v56;
        v120[2] = v85;
        v72 = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
        v86 = (const char *)off_24FA65C78;
        v87 = 0u;
        v88 = 0u;
        v89 = v72;
        v90 = v73;
        v91 = v120;
        v92 = 3;
        v93 = 0;
        v94 = 0;
        v96 = &v86;
      }
      sub_22F27B464(v95, a2);
      sub_22E5EDA70(a2);
      sub_22E5ED9B4((_QWORD *)a2, v64, 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v119 >= 0x41 && v118)
        MEMORY[0x2348A0E84](v118, 0x1000C8000313F17);
    }
  }
}

llvm::Value *sub_22E5AF03C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  llvm::Value *v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  llvm::Value *v25;
  llvm::Value *v26;
  __int128 *v27;
  void **v28;
  uint64_t v29;
  uint64_t v30;
  llvm::Value *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  llvm::GetElementPtrInst *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  llvm::Value *v55;
  int8x16_t v56;
  uint64_t v57;
  int v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void **v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  int v77;
  char *v78;
  uint64_t v79;
  uint64_t *v80;
  llvm::PointerType *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  llvm::Value *v90;
  int8x16_t v91;
  int v92;
  uint64_t v93;
  char *v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void **v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  llvm::Value *v120;
  int8x16_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void **v125;
  void *v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t RuntimeFunction;
  llvm::Value *v151;
  llvm::Value *v152;
  unint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unsigned __int8 *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  unsigned int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _OWORD v182[3];
  _OWORD v183[8];
  uint64_t v184;
  _OWORD v185[8];
  uint64_t v186;
  _OWORD v187[8];
  uint64_t v188;
  _OWORD v189[8];
  uint64_t v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  uint64_t v199;
  _OWORD v200[8];
  uint64_t v201;
  _OWORD v202[8];
  uint64_t v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  uint64_t v212;
  _OWORD v213[8];
  uint64_t v214;
  _OWORD v215[8];
  uint64_t v216;
  _OWORD v217[8];
  uint64_t v218;
  _OWORD v219[8];
  uint64_t v220;
  _OWORD v221[8];
  uint64_t v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  uint64_t v231;
  _OWORD v232[8];
  uint64_t v233;
  _OWORD v234[8];
  uint64_t v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  uint64_t v244;
  _OWORD v245[8];
  uint64_t v246;
  _OWORD v247[8];
  uint64_t v248;
  _OWORD v249[8];
  uint64_t v250;
  uint64_t v251;
  unsigned int v252;
  char v253[32];
  __int16 v254;
  __int128 v255[3];
  _OWORD v256[3];
  _OWORD v257[2];
  __int128 v258;
  void *v259[2];
  __int128 v260;
  __int128 v261;
  __int128 v262;
  uint64_t v263;
  uint64_t v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  void *v269[2];
  __int128 v270;
  __int128 v271;
  uint64_t v272;
  int v273;
  _QWORD v274[2];
  int v275;
  std::string v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  uint64_t v280;
  uint64_t v281;
  unsigned int v282;
  uint64_t v283;
  __int128 *v284;
  uint64_t v285;
  int v286;
  void *__p[2];
  __int128 v288;
  __int128 v289;
  uint64_t v290;
  uint64_t v291;
  unsigned int v292;
  uint64_t v293;
  void **v294;
  uint64_t v295;
  int v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  uint64_t v308;
  uint64_t *v309;
  uint64_t v310;
  uint64_t v311[18];
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  _BYTE v315[64];
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  uint64_t v320;
  _QWORD *v321;
  uint64_t v322[215];
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  void *v326;
  char v327;
  uint64_t v328[2];
  unsigned int v329;
  void *v330;
  uint64_t v331;
  _BYTE v332[16];
  __int16 v333;
  uint64_t v334;

  v0 = MEMORY[0x24BDAC7A8]();
  v178 = v5;
  v334 = *MEMORY[0x24BDAC8D0];
  if (!v1[40])
    return 0;
  v6 = v4;
  if (!*(_DWORD *)(v4 + 344))
    return 0;
  v9 = v1;
  v167 = v2;
  v158 = v3;
  v176 = (_QWORD *)v0;
  v10 = *(_QWORD *)(*(_QWORD *)(v0 + 8) + 144);
  v11 = sub_22F368234(v10, "kmp_taskred_input_t", 0x13uLL, 0);
  sub_22EFC3340(v11);
  if (v11)
    v12 = v11 + 64;
  else
    v12 = 0;
  v166 = sub_22E5A4124(v10, v12, *(_QWORD *)(v10 + 16816));
  v165 = sub_22E5A4124(v10, v12, *(_QWORD *)(v10 + 16816));
  v13 = sub_22EF67C8C(v10);
  v164 = sub_22E5A4124(v10, v12, v13);
  v163 = sub_22E5A4124(v10, v12, *(_QWORD *)(v10 + 16816));
  v162 = sub_22E5A4124(v10, v12, *(_QWORD *)(v10 + 16816));
  v161 = sub_22E5A4124(v10, v12, *(_QWORD *)(v10 + 16816));
  v14 = sub_22EF60A6C(v10, 32, 0);
  v160 = sub_22E5A4124(v10, v12, v14);
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v15 = sub_22EF6477C(v10, v11);
  v16 = *(unsigned int *)(v6 + 344);
  v252 = 64;
  v251 = v16;
  v159 = v15;
  v17 = sub_22EF5FE30(v10, v15, (const llvm::APInt *)&v251, 0, 0, 0);
  *(_QWORD *)v315 = ".rd_input.";
  *(_WORD *)&v315[32] = 259;
  v153 = sub_22F25E4D4((uint64_t)v9, v17, (uint64_t)v315, 0);
  v19 = v18;
  sub_22F27B534((unint64_t)v311, *(uint64_t **)(v6 + 336), *(unsigned int *)(v6 + 344), *(uint64_t **)(v6 + 384), *(unsigned int *)(v6 + 392), *(uint64_t **)(v6 + 432), *(unsigned int *)(v6 + 440), v20, *(uint64_t **)(v6 + 480));
  v154 = v16;
  if ((_DWORD)v16)
  {
    v33 = 0;
    v34 = v19 & 0xFFFFFFFFFFFFFFF8;
    v35 = 0;
    v157 = v34;
    v181 = 0;
    v156 = v9 + 34;
    v36 = 8;
    v175 = v6;
    v155 = v9;
    while (1)
    {
      v310 = 0;
      v309 = 0;
      v309 = (uint64_t *)llvm::ConstantInt::get();
      v310 = llvm::ConstantInt::get();
      *(_QWORD *)v315 = ".rd_input.gep.";
      *(_WORD *)&v315[32] = 259;
      v37 = sub_22E513CE8((uint64_t)v9, v157, (uint64_t *)(v153 & 0xFFFFFFFFFFFFFFF8), &v309, 2, 0, 0, v178, (uint64_t)v315);
      sub_22E619C24((uint64_t)v37, v159, 0, 0, (uint64_t)v9, (uint64_t)&v300);
      v247[6] = v306;
      v247[7] = v307;
      v248 = v308;
      v247[2] = v302;
      v247[3] = v303;
      v247[5] = v305;
      v247[4] = v304;
      v247[1] = v301;
      v247[0] = v300;
      sub_22E4DD05C((uint64_t)v9, (uint64_t)v247, v166, (uint64_t)v249);
      sub_22F27B6EC(v311, v9, v35);
      *(_OWORD *)v315 = *(_OWORD *)(v312 + v33);
      *(_OWORD *)&v315[16] = *(_OWORD *)(v312 + v33 + 16);
      *(_OWORD *)&v315[32] = *(_OWORD *)(v312 + v33 + 32);
      *(_OWORD *)&v315[48] = *(_OWORD *)(v312 + v33 + 48);
      v38 = *(_QWORD *)(v312 + v33 + 64);
      v236 = *(_OWORD *)&v315[8];
      v237 = *(_OWORD *)&v315[24];
      v238 = *(_OWORD *)&v315[40];
      sub_22E5E0440((uint64_t)v9, (uint64_t)&v236, v38, &v330);
      v39 = sub_22F25E214(v9, (uint64_t *)v330);
      v245[6] = v249[6];
      v245[7] = v249[7];
      v246 = v250;
      v245[2] = v249[2];
      v245[3] = v249[3];
      v245[5] = v249[5];
      v245[4] = v249[4];
      v245[1] = v249[1];
      v245[0] = v249[0];
      sub_22E4E87FC((uint64_t)v9, v39, (uint64_t)v245, 0);
      v234[6] = v306;
      v234[7] = v307;
      v235 = v308;
      v234[2] = v302;
      v234[3] = v303;
      v234[5] = v305;
      v234[4] = v304;
      v234[1] = v301;
      v234[0] = v300;
      sub_22E4DD05C((uint64_t)v9, (uint64_t)v234, v165, (uint64_t)&v236);
      v169 = v33;
      *(_OWORD *)v315 = *(_OWORD *)(v313 + v33);
      *(_OWORD *)&v315[16] = *(_OWORD *)(v313 + v33 + 16);
      *(_OWORD *)&v315[32] = *(_OWORD *)(v313 + v33 + 32);
      *(_OWORD *)&v315[48] = *(_OWORD *)(v313 + v33 + 48);
      v40 = *(_QWORD *)(v313 + v33 + 64);
      v223 = *(_OWORD *)&v315[8];
      v224 = *(_OWORD *)&v315[24];
      v225 = *(_OWORD *)&v315[40];
      sub_22E5E0440((uint64_t)v9, (uint64_t)&v223, v40, &v330);
      v41 = sub_22F25E214(v9, (uint64_t *)v330);
      v232[6] = v242;
      v232[7] = v243;
      v233 = v244;
      v232[2] = v238;
      v232[3] = v239;
      v232[5] = v241;
      v232[4] = v240;
      v232[1] = v237;
      v232[0] = v236;
      sub_22E4E87FC((uint64_t)v9, v41, (uint64_t)v232, 0);
      v179 = v35;
      sub_22E59D1E0((uint64_t)v311, (uint64_t)v9, v35);
      v180 = v36;
      v42 = *(_QWORD *)(v314 + v36 - 8);
      v168 = *(_QWORD *)(v314 + v36);
      v43 = *(_QWORD *)(v176[1] + 88);
      *(_WORD *)&v315[32] = 257;
      v44 = sub_22E3BF45C(v156, v42, v43, 0, (uint64_t)v315);
      v221[6] = v306;
      v221[7] = v307;
      v222 = v308;
      v221[2] = v302;
      v221[3] = v303;
      v221[5] = v305;
      v221[4] = v304;
      v221[1] = v301;
      v221[0] = v300;
      sub_22E4DD05C((uint64_t)v9, (uint64_t)v221, v164, (uint64_t)&v223);
      v219[6] = v229;
      v219[7] = v230;
      v220 = v231;
      v219[2] = v225;
      v219[3] = v226;
      v219[5] = v228;
      v219[4] = v227;
      v219[1] = v224;
      v219[0] = v223;
      sub_22E4E87FC((uint64_t)v9, v44, (uint64_t)v219, 0);
      v215[6] = v306;
      v215[7] = v307;
      v216 = v308;
      v215[2] = v302;
      v215[3] = v303;
      v215[5] = v305;
      v215[4] = v304;
      v215[1] = v301;
      v215[0] = v300;
      sub_22E4DD05C((uint64_t)v9, (uint64_t)v215, v163, (uint64_t)v217);
      v45 = (uint64_t *)v176[1];
      v46 = v45[18];
      v47 = *(_QWORD *)(v46 + 16816) | 2;
      v330 = v332;
      v331 = 0x1000000000;
      sub_22EA41AB8((uint64_t)&v204, 62, 0, v178);
      *((_QWORD *)&v206 + 1) = 0;
      v207 = (unint64_t)v47;
      LODWORD(v208) = v178;
      *((_QWORD *)&v208 + 1) = v46 | 2;
      *(_QWORD *)&v209 = &v204;
      *((_QWORD *)&v209 + 1) = 0;
      *(_QWORD *)&v204 = &off_24FAC3008;
      LODWORD(v210) = 1310720;
      HIDWORD(v205) |= 0x200u;
      sub_22EA41AB8((uint64_t)&v191, 62, 0, v178);
      *((_QWORD *)&v193 + 1) = 0;
      v194 = (unint64_t)v47;
      LODWORD(v195) = v178;
      *((_QWORD *)&v195 + 1) = v46 | 2;
      *(_QWORD *)&v196 = &v191;
      *((_QWORD *)&v196 + 1) = 0;
      *(_QWORD *)&v191 = &off_24FAC3008;
      LODWORD(v197) = 1310720;
      HIDWORD(v192) |= 0x200u;
      v48 = v331;
      v49 = HIDWORD(v331);
      if (v331 >= HIDWORD(v331))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        *((_QWORD *)v330 + v331) = &v204;
        v48 = v331;
        v49 = HIDWORD(v331);
      }
      else
      {
        *((_QWORD *)v330 + v331) = &v204;
      }
      v50 = (v48 + 1);
      LODWORD(v331) = v50;
      if (v50 >= v49)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        *((_QWORD *)v330 + v331) = &v191;
        LODWORD(v50) = v331;
      }
      else
      {
        *((_QWORD *)v330 + v50) = &v191;
      }
      LODWORD(v331) = v50 + 1;
      v51 = sub_22F24E348((uint64_t)(v45 + 35), *(_QWORD *)(v46 + 16392), (uint64_t *)&v330);
      v52 = sub_22E46F2EC((uint64_t)(v45 + 35), v51);
      v53 = v45[101];
      *(_OWORD *)v315 = xmmword_24FA65D48;
      *(_OWORD *)&v315[16] = off_24FA65D58;
      sub_22F27BE70((std::string *)v259, v53, (uint64_t)v315, 2);
      *(_WORD *)&v315[32] = 260;
      *(_QWORD *)v315 = v259;
      v54 = v45[25];
      v55 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x78);
      MEMORY[0x23489F6FC](v55, v52, 7, 0xFFFFFFFFLL, v315, v54);
      sub_22E62BF18(v45, 0, 0, v55, v51);
      llvm::Function::addFnAttr();
      sub_22E618EBC((uint64_t)v315, (uint64_t)v45, 0);
      sub_22E61A8FC((uint64_t)v315, 0, 0, *(_QWORD *)(v46 + 16392), v55, v51, (uint64_t *)&v330, v178, v56, v178);
      v57 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v311[0] + v181 + 16) + 16) + 48);
      *(_QWORD *)&v277 = &v204;
      __p[0] = 0;
      v58 = sub_22E3CED3C(v328, &v277, __p);
      v59 = (char *)(v328[0] + 56 * v329);
      if (v58)
        v59 = (char *)__p[0];
      v60 = *(_OWORD *)(v59 + 8);
      v61 = *(_OWORD *)(v59 + 24);
      v299 = *(_OWORD *)(v59 + 40);
      v298 = v61;
      v297 = v60;
      sub_22E66C868((uint64_t)(v321 + 35), v57, 0);
      v62 = llvm::PointerType::get();
      LOWORD(v289) = 257;
      sub_22E3BEE6C(v322, &v297, v62, (uint64_t)__p, (uint64_t)v269);
      v63 = sub_22EF5B848(v46, v57, 0);
      v64 = *(_QWORD *)(v63 & 0xFFFFFFFFFFFFFFF0);
      if (!v64 || *(_BYTE *)(v64 + 16) != 39)
        v64 = sub_22F10CF48(*(_QWORD *)(v63 & 0xFFFFFFFFFFFFFFF0));
      v65 = v179;
      sub_22E4E98F8((uint64_t)v315, v269, v64, 0, 0, &v277);
      v66 = 0;
      if (*(_QWORD *)(v314 + v180))
      {
        v67 = v45[101];
        v68 = sub_22EF67C8C(v45[18]);
        sub_22E5B0EC0(__p, (uint64_t)v45, "reduction_size", 0xEuLL, *(_QWORD *)(v311[0] + v181 + 8));
        if ((SBYTE7(v288) & 0x80u) == 0)
          v69 = __p;
        else
          v69 = (void **)__p[0];
        if ((SBYTE7(v288) & 0x80u) == 0)
          v70 = (void *)(BYTE7(v288) & 0x7F);
        else
          v70 = __p[1];
        (*(void (**)(__int128 *__return_ptr, uint64_t, _BYTE *, uint64_t, void **, void *))(*(_QWORD *)v67 + 328))(&v266, v67, v315, v68, v69, v70);
        if (SBYTE7(v288) < 0)
          operator delete(__p[0]);
        v71 = sub_22EF67C8C(v45[18]);
        *(_OWORD *)__p = v266;
        v288 = v267;
        v289 = v268;
        sub_22E6281E0(v321, v71, (uint64_t)&v262);
        v66 = sub_22E4E6994((uint64_t)v315, (uint64_t)__p, 0, v71, v178, 2, (uint64_t)&v262, 0);
        v65 = v179;
      }
      sub_22F27B978(v311[0], (uint64_t)v315, v65, v66);
      v72 = sub_22E59D5F8(*(_BYTE **)(v311[0] + v181 + 24));
      if (!v72)
        break;
      v73 = *(_QWORD *)(v72 + 96);
      if (!v73)
        goto LABEL_34;
      *(_QWORD *)&v266 = &v191;
      __p[0] = 0;
      v77 = sub_22E3CED3C(v328, &v266, __p);
      v78 = (char *)__p[0];
      if (!v77)
        v78 = (char *)(v328[0] + 56 * v329);
      v266 = *(_OWORD *)(v78 + 8);
      v267 = *(_OWORD *)(v78 + 24);
      v268 = *(_OWORD *)(v78 + 40);
      sub_22E4E98F8((uint64_t)v315, &v266, *(_QWORD *)(*(_QWORD *)(v45[18] + 16816) & 0xFFFFFFFFFFFFFFF0), 0, 0, __p);
      v75 = *(_OWORD *)__p;
      v74 = *((_QWORD *)&v288 + 1);
      v73 = v288;
      v76 = v289;
LABEL_38:
      *(_OWORD *)__p = v277;
      v288 = v278;
      v289 = v279;
      v262 = v75;
      v263 = v73;
      v264 = v74;
      v265 = v76;
      sub_22F27BA58(v311, (uint64_t)v315, v65, (__int128 *)__p, &v262, (void (*)(uint64_t, uint64_t))sub_22E5BC554, (uint64_t)v257);
      sub_22E619DE8((uint64_t)v315, 0);
      sub_22E619434((uint64_t)v315);
      if (SBYTE7(v260) < 0)
        operator delete(v259[0]);
      if (v330 != v332)
        free(v330);
      v79 = sub_22F25E214(v155, (uint64_t *)v55);
      v213[6] = v217[6];
      v213[7] = v217[7];
      v214 = v218;
      v213[2] = v217[2];
      v213[3] = v217[3];
      v213[5] = v217[5];
      v213[4] = v217[4];
      v213[1] = v217[1];
      v213[0] = v217[0];
      sub_22E4E87FC((uint64_t)v155, v79, (uint64_t)v213, 0);
      v202[6] = v306;
      v202[7] = v307;
      v203 = v308;
      v202[2] = v302;
      v202[3] = v303;
      v202[5] = v305;
      v202[4] = v304;
      v202[1] = v301;
      v202[0] = v300;
      sub_22E4DD05C((uint64_t)v155, (uint64_t)v202, v162, (uint64_t)&v204);
      v80 = (uint64_t *)v176[1];
      if (sub_22F115260(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v311[0] + v181 + 16) + 16) + 48)))
      {
        v83 = v80[18];
        v330 = v332;
        v331 = 0x1000000000;
        v84 = *(_QWORD *)(v83 + 16816);
        sub_22EA41AB8((uint64_t)&v191, 62, 0, v178);
        *((_QWORD *)&v193 + 1) = 0;
        v194 = v84;
        LODWORD(v195) = v178;
        *((_QWORD *)&v195 + 1) = v83 | 2;
        *(_QWORD *)&v196 = &v191;
        *((_QWORD *)&v196 + 1) = 0;
        *(_QWORD *)&v191 = &off_24FAC3008;
        LODWORD(v197) = 1310720;
        HIDWORD(v192) |= 0x200u;
        v85 = v331;
        if (v331 >= HIDWORD(v331))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          *((_QWORD *)v330 + v331) = &v191;
          v85 = v331;
        }
        else
        {
          *((_QWORD *)v330 + v331) = &v191;
        }
        LODWORD(v331) = v85 + 1;
        v86 = sub_22F24E348((uint64_t)(v80 + 35), *(_QWORD *)(v83 + 16392), (uint64_t *)&v330);
        v87 = sub_22E46F2EC((uint64_t)(v80 + 35), v86);
        v88 = v80[101];
        *(_OWORD *)v315 = xmmword_24FA65D68;
        *(_OWORD *)&v315[16] = off_24FA65D78;
        sub_22F27BE70((std::string *)v259, v88, (uint64_t)v315, 2);
        *(_WORD *)&v315[32] = 260;
        *(_QWORD *)v315 = v259;
        v89 = v80[25];
        v90 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x78);
        MEMORY[0x23489F6FC](v90, v87, 7, 0xFFFFFFFFLL, v315, v89);
        sub_22E62BF18(v80, 0, 0, v90, v86);
        llvm::Function::addFnAttr();
        sub_22E618EBC((uint64_t)v315, (uint64_t)v80, 0);
        sub_22E61A8FC((uint64_t)v315, 0, 0, *(_QWORD *)(v83 + 16392), v90, v86, (uint64_t *)&v330, v178, v91, v178);
        *(_QWORD *)&v277 = &v191;
        __p[0] = 0;
        v92 = sub_22E3CED3C(v328, &v277, __p);
        v93 = 0;
        v94 = (char *)(v328[0] + 56 * v329);
        if (v92)
          v94 = (char *)__p[0];
        v297 = *(_OWORD *)(v94 + 8);
        v298 = *(_OWORD *)(v94 + 24);
        v299 = *(_OWORD *)(v94 + 40);
        v95 = *(_QWORD *)(v83 + 16816);
        if (v95 >= 0x10)
          v93 = *(_QWORD *)(v95 & 0xFFFFFFFFFFFFFFF0);
        sub_22E4E98F8((uint64_t)v315, &v297, v93, 0, 0, v269);
        v96 = 0;
        if (*(_QWORD *)(v314 + v180))
        {
          v97 = v80[101];
          v98 = sub_22EF67C8C(v80[18]);
          sub_22E5B0EC0(__p, (uint64_t)v80, "reduction_size", 0xEuLL, *(_QWORD *)(v311[0] + v181 + 8));
          if ((SBYTE7(v288) & 0x80u) == 0)
            v99 = __p;
          else
            v99 = (void **)__p[0];
          if ((SBYTE7(v288) & 0x80u) == 0)
            v100 = (void *)(BYTE7(v288) & 0x7F);
          else
            v100 = __p[1];
          (*(void (**)(__int128 *__return_ptr, uint64_t, _BYTE *, uint64_t, void **, void *))(*(_QWORD *)v97 + 328))(&v277, v97, v315, v98, v99, v100);
          if (SBYTE7(v288) < 0)
            operator delete(__p[0]);
          v101 = sub_22EF67C8C(v80[18]);
          *(_OWORD *)__p = v277;
          v288 = v278;
          v289 = v279;
          sub_22E6281E0(v321, v101, (uint64_t)&v262);
          v96 = sub_22E4E6994((uint64_t)v315, (uint64_t)__p, 0, v101, v178, 2, (uint64_t)&v262, 0);
        }
        sub_22F27B978(v311[0], (uint64_t)v315, v179, v96);
        v266 = *(_OWORD *)v269;
        v267 = v270;
        v268 = v271;
        v102 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v311[0] + v181 + 16) + 16) + 48);
        v103 = sub_22F115260(v102);
        if (sub_22F115260(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v311[0] + v181 + 16) + 16) + 48)))
        {
          *(_OWORD *)__p = v266;
          v288 = v267;
          v289 = v268;
          v104 = sub_22E66C868((uint64_t)(v321 + 35), v102, 0);
          LOWORD(v279) = 257;
          sub_22E3BEE6C(v322, (__int128 *)__p, v104, (uint64_t)&v277, (uint64_t)&v266);
          v277 = v266;
          v278 = v267;
          v279 = v268;
          sub_22F259F50((uint64_t)v315, v103, &v277, v102);
        }
        sub_22E619DE8((uint64_t)v315, v178);
        sub_22E619434((uint64_t)v315);
        if (SBYTE7(v260) < 0)
          operator delete(v259[0]);
        v82 = v158;
        v65 = v179;
        if (v330 != v332)
          free(v330);
        if (v90)
        {
          v105 = sub_22F25E214(v155, (uint64_t *)v90);
          goto LABEL_69;
        }
      }
      else
      {
        v82 = v158;
      }
      v105 = llvm::ConstantPointerNull::get(*(llvm::ConstantPointerNull **)(v176[1] + 96), v81);
LABEL_69:
      v200[6] = v210;
      v200[7] = v211;
      v201 = v212;
      v200[2] = v206;
      v200[3] = v207;
      v200[5] = v209;
      v200[4] = v208;
      v200[1] = v205;
      v200[0] = v204;
      sub_22E4E87FC((uint64_t)v155, v105, (uint64_t)v200, 0);
      v189[6] = v306;
      v189[7] = v307;
      v190 = v308;
      v189[2] = v302;
      v189[3] = v303;
      v189[4] = v304;
      v189[5] = v305;
      v189[0] = v300;
      v189[1] = v301;
      v9 = v155;
      sub_22E4DD05C((uint64_t)v155, (uint64_t)v189, v161, (uint64_t)&v191);
      v172 = *(unsigned __int8 **)(*(_QWORD *)(v175 + 480) + 8 * v65);
      v106 = *(_QWORD *)(v167 + 8 * v65);
      v107 = v65;
      v108 = (uint64_t *)v176[1];
      v109 = *(_QWORD *)(v82 + 8 * v107);
      v110 = v108[18];
      v173 = v109;
      v174 = v106;
      v170 = *(_QWORD *)(v106 + 16);
      v171 = *(_QWORD *)(*(_QWORD *)(v175 + 432) + 8 * v107);
      v177 = *(_QWORD *)(v109 + 16);
      v330 = v332;
      v331 = 0x1000000000;
      v111 = *(_QWORD *)(v110 + 16816);
      sub_22EA41AB8((uint64_t)__p, 62, 0, v178);
      *((_QWORD *)&v289 + 1) = 0;
      v290 = v111;
      v291 = 0;
      v292 = v178;
      v293 = v110 | 2;
      v294 = __p;
      v295 = 0;
      __p[0] = &off_24FAC3008;
      v296 = 1310720;
      HIDWORD(v288) |= 0x200u;
      v112 = *(_QWORD *)(v110 + 16816);
      sub_22EA41AB8((uint64_t)&v277, 62, 0, v178);
      *((_QWORD *)&v279 + 1) = 0;
      v280 = v112;
      v281 = 0;
      v282 = v178;
      v283 = v110 | 2;
      v284 = &v277;
      v285 = 0;
      *(_QWORD *)&v277 = &off_24FAC3008;
      v286 = 1310720;
      HIDWORD(v278) |= 0x200u;
      v113 = v331;
      v114 = HIDWORD(v331);
      if (v331 >= HIDWORD(v331))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        *((_QWORD *)v330 + v331) = __p;
        v113 = v331;
        v114 = HIDWORD(v331);
      }
      else
      {
        *((_QWORD *)v330 + v331) = __p;
      }
      v115 = (v113 + 1);
      LODWORD(v331) = v115;
      if (v115 >= v114)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        *((_QWORD *)v330 + v331) = &v277;
        LODWORD(v115) = v331;
      }
      else
      {
        *((_QWORD *)v330 + v115) = &v277;
      }
      LODWORD(v331) = v115 + 1;
      v116 = sub_22F24E348((uint64_t)(v108 + 35), *(_QWORD *)(v110 + 16392), (uint64_t *)&v330);
      v117 = sub_22E46F2EC((uint64_t)(v108 + 35), v116);
      v118 = v108[101];
      *(_OWORD *)v315 = xmmword_24FA65D88;
      *(_OWORD *)&v315[16] = off_24FA65D98;
      sub_22F27BE70(&v276, v118, (uint64_t)v315, 2);
      *(_WORD *)&v315[32] = 260;
      *(_QWORD *)v315 = &v276;
      v119 = v108[25];
      v120 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x78);
      MEMORY[0x23489F6FC](v120, v117, 7, 0xFFFFFFFFLL, v315, v119);
      sub_22E62BF18(v108, 0, 0, v120, v116);
      llvm::Function::addFnAttr();
      sub_22E618EBC((uint64_t)v315, (uint64_t)v108, 0);
      sub_22E61A8FC((uint64_t)v315, 0, 0, *(_QWORD *)(v110 + 16392), v120, v116, (uint64_t *)&v330, v178, v121, v178);
      v122 = 0;
      if (*(_QWORD *)(v314 + v180))
      {
        v123 = v108[101];
        v124 = sub_22EF67C8C(v108[18]);
        sub_22E5B0EC0(v269, (uint64_t)v108, "reduction_size", 0xEuLL, *(_QWORD *)(v311[0] + v181 + 8));
        if ((SBYTE7(v270) & 0x80u) == 0)
          v125 = v269;
        else
          v125 = (void **)v269[0];
        if ((SBYTE7(v270) & 0x80u) == 0)
          v126 = (void *)(BYTE7(v270) & 0x7F);
        else
          v126 = v269[1];
        (*(void (**)(__int128 *__return_ptr, uint64_t, _BYTE *, uint64_t, void **, void *))(*(_QWORD *)v123 + 328))(&v297, v123, v315, v124, v125, v126);
        if (SBYTE7(v270) < 0)
          operator delete(v269[0]);
        v127 = sub_22EF67C8C(v108[18]);
        *(_OWORD *)v269 = v297;
        v270 = v298;
        v271 = v299;
        sub_22E6281E0(v321, v127, (uint64_t)&v266);
        v122 = sub_22E4E6994((uint64_t)v315, (uint64_t)v269, 0, v127, v178, 2, (uint64_t)&v266, 0);
      }
      sub_22F27B978(v311[0], (uint64_t)v315, v179, v122);
      BYTE9(v270) = 1;
      *(_QWORD *)&v271 = v315;
      *(_QWORD *)&v270 = v325;
      BYTE8(v270) = v327;
      v327 = 0;
      v269[0] = (void *)(v323 - v324);
      v269[1] = v326;
      v326 = (void *)(v323 - v324);
      *((_QWORD *)&v271 + 1) = 0;
      v272 = 0;
      v273 = 0;
      v274[0] = 0;
      v274[1] = 0;
      v275 = 0;
      *(_QWORD *)&v266 = __p;
      *(_QWORD *)&v297 = 0;
      v128 = sub_22E3CED3C(v328, &v266, &v297);
      v129 = v328[0] + 56 * v329;
      if (v128)
        v129 = v297;
      v130 = *(_OWORD *)(v129 + 8);
      v131 = *(_OWORD *)(v129 + 24);
      v261 = *(_OWORD *)(v129 + 40);
      v260 = v131;
      *(_OWORD *)v259 = v130;
      sub_22E66C868((uint64_t)(v321 + 35), *(_QWORD *)(v170 + 48), 0);
      v132 = llvm::PointerType::get();
      LOWORD(v258) = 257;
      sub_22E3BEE6C(v322, (__int128 *)v259, v132, (uint64_t)v257, (uint64_t)&v262);
      v133 = sub_22EF5B848(v110, *(_QWORD *)(v170 + 48), 0);
      v134 = *(_QWORD *)(v133 & 0xFFFFFFFFFFFFFFF0);
      if (!v134 || *(_BYTE *)(v134 + 16) != 39)
        v134 = sub_22F10CF48(*(_QWORD *)(v133 & 0xFFFFFFFFFFFFFFF0));
      v6 = v175;
      sub_22E4E98F8((uint64_t)v315, &v262, v134, 0, 0, &v266);
      v297 = v266;
      v298 = v267;
      v299 = v268;
      sub_22E5BC134((uint64_t *)&v271 + 1, v271, v170, (uint64_t)&v297);
      *(_QWORD *)&v257[0] = &v277;
      *(_QWORD *)&v297 = 0;
      v135 = sub_22E3CED3C(v328, v257, &v297);
      v136 = v328[0] + 56 * v329;
      if (v135)
        v136 = v297;
      v137 = *(_OWORD *)(v136 + 8);
      v138 = *(_OWORD *)(v136 + 24);
      v255[2] = *(_OWORD *)(v136 + 40);
      v255[1] = v138;
      v255[0] = v137;
      sub_22E66C868((uint64_t)(v321 + 35), *(_QWORD *)(v177 + 48), 0);
      v139 = llvm::PointerType::get();
      v254 = 257;
      sub_22E3BEE6C(v322, v255, v139, (uint64_t)v253, (uint64_t)v256);
      v140 = sub_22EF5B848(v110, *(_QWORD *)(v177 + 48), 0);
      v141 = *(_QWORD *)(v140 & 0xFFFFFFFFFFFFFFF0);
      if (!v141 || *(_BYTE *)(v141 + 16) != 39)
        v141 = sub_22F10CF48(*(_QWORD *)(v140 & 0xFFFFFFFFFFFFFFF0));
      sub_22E4E98F8((uint64_t)v315, v256, v141, 0, 0, v257);
      v297 = v257[0];
      v298 = v257[1];
      v299 = v258;
      sub_22E5BC134((uint64_t *)&v271 + 1, v271, v177, (uint64_t)&v297);
      sub_22E5BC320((uint64_t)v274, v271 + 2904);
      v142 = sub_22F2840EC((uint64_t)v274);
      sub_22F28070C(v142, v315, v172, v171, v174, v173);
      sub_22E619DE8((uint64_t)v315, 0);
      sub_22F283FC4((uint64_t)v269);
      sub_22E619434((uint64_t)v315);
      if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v276.__r_.__value_.__l.__data_);
      if (v330 != v332)
        free(v330);
      v143 = sub_22F25E214(v155, (uint64_t *)v120);
      v187[6] = v197;
      v187[7] = v198;
      v188 = v199;
      v187[2] = v193;
      v187[3] = v194;
      v187[4] = v195;
      v187[5] = v196;
      v187[0] = v191;
      v187[1] = v192;
      sub_22E4E87FC((uint64_t)v155, v143, (uint64_t)v187, 0);
      v185[6] = v306;
      v185[7] = v307;
      v186 = v308;
      v185[2] = v302;
      v185[3] = v303;
      v185[4] = v304;
      v185[5] = v305;
      v185[0] = v300;
      v185[1] = v301;
      sub_22E4DD05C((uint64_t)v155, (uint64_t)v185, v160, (uint64_t)v315);
      if (v168)
      {
        v144 = llvm::ConstantInt::get();
        v183[6] = v318;
        v183[7] = v319;
        v184 = v320;
        v183[2] = *(_OWORD *)&v315[32];
        v183[3] = *(_OWORD *)&v315[48];
        v183[4] = v316;
        v183[5] = v317;
        v183[0] = *(_OWORD *)v315;
        v183[1] = *(_OWORD *)&v315[16];
        sub_22E4E87FC((uint64_t)v155, v144, (uint64_t)v183, 0);
      }
      else
      {
        v182[0] = *(_OWORD *)&v315[8];
        v182[1] = *(_OWORD *)&v315[24];
        v182[2] = *(_OWORD *)&v315[40];
        sub_22E620824((uint64_t)v155, (uint64_t)v182, v316);
      }
      v35 = v179 + 1;
      v36 = v180 + 16;
      v33 = v169 + 272;
      v181 += 32;
      if (32 * v154 == v181)
        goto LABEL_9;
    }
    v73 = 0;
LABEL_34:
    v74 = 0;
    v75 = 0uLL;
    v76 = 0uLL;
    goto LABEL_38;
  }
LABEL_9:
  if (*(_BYTE *)(v6 + 886))
  {
    v145 = sub_22E59F7E4(v176, (uint64_t)v9, v178);
    v146 = sub_22E59F964((uint64_t)v176, (uint64_t)v9, v178);
    v147 = *(_QWORD *)(v176[1] + 72);
    *(_WORD *)&v315[32] = 257;
    v148 = sub_22E3BF45C(v9 + 34, v146, v147, 1, (uint64_t)v315);
    *(_QWORD *)v315 = v145;
    *(_QWORD *)&v315[8] = v148;
    *(_QWORD *)&v315[16] = llvm::ConstantInt::get();
    *(_QWORD *)&v315[24] = llvm::ConstantInt::get();
    v149 = *(_QWORD *)(v176[1] + 96);
    v333 = 257;
    *(_QWORD *)&v315[32] = sub_22E3C1338(v9 + 34, v153 & 0xFFFFFFFFFFFFFFF8, v149, (uint64_t)&v330);
    RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
    v152 = v151;
    v333 = 257;
    v27 = (__int128 *)v315;
    v28 = &v330;
    v29 = (uint64_t)v9;
    v30 = RuntimeFunction;
    v31 = v152;
    v32 = 5;
  }
  else
  {
    v21 = sub_22E59F964((uint64_t)v176, (uint64_t)v9, v178);
    v22 = *(_QWORD *)(v176[1] + 72);
    *(_WORD *)&v315[32] = 257;
    *(_QWORD *)&v300 = sub_22E3BF45C(v9 + 34, v21, v22, 1, (uint64_t)v315);
    *((_QWORD *)&v300 + 1) = llvm::ConstantInt::get();
    v23 = *(_QWORD *)(v176[1] + 96);
    v333 = 257;
    *(_QWORD *)&v301 = sub_22E3C1338(v9 + 34, v153 & 0xFFFFFFFFFFFFFFF8, v23, (uint64_t)&v330);
    v24 = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
    v26 = v25;
    *(_WORD *)&v315[32] = 257;
    v27 = &v300;
    v28 = (void **)v315;
    v29 = (uint64_t)v9;
    v30 = v24;
    v31 = v26;
    v32 = 3;
  }
  v7 = sub_22E479C7C(v29, v30, v31, (uint64_t)v27, v32, (uint64_t)v28);
  sub_22F284140((uint64_t)v311);
  if (v252 >= 0x41 && v251)
    MEMORY[0x2348A0E84](v251, 0x1000C8000313F17);
  return v7;
}

uint64_t sub_22E5B0D9C(uint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4, unsigned int a5)
{
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  llvm::Type **v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  void *v15;
  _OWORD v16[3];
  void *__p[2];
  char v18;
  _OWORD v19[2];
  __int128 v20;

  v6 = *(_QWORD *)(a4[294] + 16 * a5 + 8);
  if (v6)
  {
    v8 = (_QWORD *)result;
    v9 = a5;
    v10 = *(_QWORD *)(*(_QWORD *)(result + 8) + 88);
    LOWORD(v20) = 257;
    v11 = (llvm::Type **)sub_22E3BF45C((uint64_t *)(a2 + 272), v6, v10, 0, (uint64_t)v19);
    v12 = v8[1];
    v13 = sub_22EF67C8C(*(_QWORD *)(v12 + 144));
    sub_22E5B0EC0(__p, v12, "reduction_size", 0xEuLL, *(_QWORD *)(*a4 + 32 * v9 + 8));
    if (v18 >= 0)
      v14 = __p;
    else
      v14 = (void **)__p[0];
    if (v18 >= 0)
      v15 = (void *)(v18 & 0x7F);
    else
      v15 = __p[1];
    (*(void (**)(_OWORD *__return_ptr, _QWORD *, uint64_t, uint64_t, void **, void *))(*v8 + 328))(v19, v8, a2, v13, v14, v15);
    if (v18 < 0)
      operator delete(__p[0]);
    v16[0] = v19[0];
    v16[1] = v19[1];
    v16[2] = v20;
    return sub_22E3BEDDC(a2 + 272, v11, (uint64_t)v16);
  }
  return result;
}

void sub_22E5B0EC0(_QWORD *a1, uint64_t a2, const void *a3, size_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _DWORD *v15;
  uint64_t v16;
  const char *v17;
  unsigned int v18;
  llvm::raw_ostream *v19;
  std::string *p_p;
  llvm::raw_ostream *v21;
  _BYTE *v22;
  size_t v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  std::string __p;
  unsigned __int8 *v29;
  _BYTE v30[24];
  uint64_t v31;
  char *v32;
  uint64_t v33;
  _QWORD v34[2];
  void *v35;
  __int128 v36;
  _QWORD v37[33];

  v37[32] = *MEMORY[0x24BDAC8D0];
  v35 = v37;
  v36 = xmmword_22F44E320;
  sub_22F242C48((uint64_t)v30, (uint64_t)&v35);
  v10 = sub_22E59E51C((unsigned __int8 *)a5, &v29);
  if (!v10)
    v10 = *(_QWORD *)(a5 + 16);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
  v12 = *(_QWORD *)(a2 + 808);
  if ((sub_22E3CEC2C(v11) & 1) != 0 || (*(_DWORD *)(v11 + 28) & 0x7F) == 0x40)
  {
    v13 = *(_QWORD *)(v11 + 40) & 0xFFFFFFFFFFFFFFF8;
    if ((*(_QWORD *)(v11 + 40) & 7) != 0 || v13 == 0)
    {
      v16 = 0;
      v17 = "";
    }
    else
    {
      v15 = *(_DWORD **)(v13 + 16);
      v18 = *v15;
      v17 = (const char *)(v15 + 4);
      v16 = v18;
    }
    v34[0] = v17;
  }
  else
  {
    v34[0] = sub_22E624994(a2, v11, 0);
  }
  v34[1] = v16;
  sub_22F27BE70(&__p, v12, (uint64_t)v34, 1);
  if (a4 <= v31 - (uint64_t)v32)
  {
    if (a4)
    {
      memcpy(v32, a3, a4);
      v32 += a4;
    }
    v19 = (llvm::raw_ostream *)v30;
  }
  else
  {
    v19 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)v30, (const char *)a3);
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v21 = (llvm::raw_ostream *)llvm::raw_ostream::write(v19, (const char *)p_p);
  v22 = (_BYTE *)*((_QWORD *)v21 + 4);
  if (*((_BYTE **)v21 + 3) == v22)
  {
    llvm::raw_ostream::write(v21, "_");
  }
  else
  {
    *v22 = 95;
    ++*((_QWORD *)v21 + 4);
  }
  (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
  llvm::raw_ostream::operator<<();
  v23 = *(_QWORD *)(v33 + 8);
  if (v23 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v24 = *(const void **)v33;
  if (v23 >= 0x17)
  {
    v25 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v25 = v23 | 7;
    v26 = v25 + 1;
    v27 = operator new(v25 + 1);
    a1[1] = v23;
    a1[2] = v26 | 0x8000000000000000;
    *a1 = v27;
    a1 = v27;
    goto LABEL_30;
  }
  *((_BYTE *)a1 + 23) = v23;
  if (v23)
LABEL_30:
    memmove(a1, v24, v23);
  *((_BYTE *)a1 + v23) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v30);
  if (v35 != v37)
    free(v35);
}

uint64_t sub_22E5B1184(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  llvm *v17[2];
  unsigned int v18;

  *(_QWORD *)(a1 + 8) = 0;
  v12 = a1 + 8;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = a6;
  v13 = operator new();
  v14 = *(_QWORD *)(a2 + 1856);
  *(_DWORD *)(v13 + 8) = 2;
  *(_QWORD *)(v13 + 16) = 1;
  for (i = 24; i != 88; i += 16)
    *(_QWORD *)(v13 + i) = -4096;
  *(_QWORD *)(v13 + 88) = 0;
  *(_QWORD *)(v13 + 96) = 0;
  *(_DWORD *)(v13 + 104) = 2;
  *(_OWORD *)(v13 + 112) = *(_OWORD *)a3;
  *(_QWORD *)(v13 + 128) = *(_QWORD *)(a3 + 16);
  *(_DWORD *)(v13 + 136) = a4;
  *(_BYTE *)(v13 + 140) = a5;
  *(_QWORD *)v13 = &off_24FA65DB8;
  *(_QWORD *)(v13 + 144) = v14;
  if (v14 && *(_DWORD *)(v14 + 8) != 2)
    v14 = 0;
  *(_QWORD *)(v13 + 152) = v14;
  *(_QWORD *)(a2 + 1856) = v13;
  if (a6)
  {
    v17[0] = *(llvm **)(a2 + 1928);
    *(_QWORD *)(a2 + 1928) = 0;
    v17[1] = *(llvm **)(a2 + 1936);
    *(_QWORD *)(a2 + 1936) = 0;
    v18 = *(_DWORD *)(a2 + 1944);
    *(_DWORD *)(a2 + 1944) = 0;
    sub_22F2841C4(a2 + 1928, v12);
    sub_22F2841C4(v12, (uint64_t)v17);
    llvm::deallocate_buffer(v17[0], (void *)(16 * v18));
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 1952);
    *(_QWORD *)(a2 + 1952) = 0;
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 1912);
    *(_QWORD *)(a2 + 1912) = 0;
  }
  return a1;
}

uint64_t *sub_22E5B12FC(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  llvm *v7[2];
  unsigned int v8;

  v2 = *(_QWORD **)(*a1 + 1856);
  v3 = v2[18];
  (*(void (**)(_QWORD *))(*v2 + 8))(v2);
  v4 = *a1;
  *(_QWORD *)(*a1 + 1856) = v3;
  if (*((_BYTE *)a1 + 48))
  {
    v7[0] = *(llvm **)(v4 + 1928);
    *(_QWORD *)(v4 + 1928) = 0;
    v7[1] = *(llvm **)(v4 + 1936);
    *(_QWORD *)(v4 + 1936) = 0;
    v8 = *(_DWORD *)(v4 + 1944);
    *(_DWORD *)(v4 + 1944) = 0;
    sub_22F2841C4(v4 + 1928, (uint64_t)(a1 + 1));
    sub_22F2841C4((uint64_t)(a1 + 1), (uint64_t)v7);
    llvm::deallocate_buffer(v7[0], (void *)(16 * v8));
    v6 = *a1;
    *(_QWORD *)(v6 + 1952) = a1[4];
    *(_QWORD *)(v6 + 1912) = a1[5];
  }
  llvm::deallocate_buffer((llvm *)a1[1], (void *)(16 * *((unsigned int *)a1 + 6)));
  return a1;
}

void sub_22E5B13D0()
{
  uint64_t v0;
  uint64_t v1;
  __int128 *v2;
  __int128 *v3;
  int v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  size_t v8;
  size_t v9;
  const void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  llvm::raw_ostream *v17;
  _WORD *v18;
  uint64_t v19;
  __int128 v20;
  _QWORD *v21;
  uint64_t v22;
  llvm::Type *v23;
  uint64_t *v24;
  uint64_t v25;
  llvm::GlobalValue *v26;
  int v27;
  llvm::Type *v28;
  uint64_t v29;
  uint64_t *v30;
  const void *v31;
  uint64_t *v32;
  int v33;
  std::string __p;
  int v35;
  uint64_t v36;
  std::string v37;
  uint64_t v38;
  __int16 v39;
  _QWORD v40[2];
  uint64_t v41[11];
  int v42;
  __int128 v43;
  uint64_t v44;
  int v45;
  char v46;
  __int128 v47;
  _BYTE v48[24];
  uint64_t v49;
  _OWORD *v50;
  _QWORD *v51;
  _BYTE v52[24];
  _QWORD v53[10];

  v0 = MEMORY[0x24BDAC7A8]();
  v3 = v2;
  v33 = v4;
  v6 = v5;
  v32 = v7;
  v9 = v8;
  v11 = v10;
  v12 = v1;
  v13 = v0;
  v53[8] = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(v0 + 8);
  v15 = *(_QWORD *)(v14 + 152);
  v16 = (*(_BYTE *)(v15 + 76) & 8) != 0 || (*(_WORD *)(v15 + 96) & 0x10) == 0;
  v36 = 0;
  v35 = 0;
  sub_22E5A029C(*(_QWORD *)(*(_QWORD *)(v14 + 144) + 1992), *(_DWORD *)(v1 + 12), (_DWORD *)&v36 + 1, &v36, &v35);
  *(_QWORD *)v52 = v53;
  *(_OWORD *)&v52[8] = xmmword_22F44E300;
  sub_22F242C48((uint64_t)v48, (uint64_t)v52);
  v30 = v6;
  if ((unint64_t)(v49 - (_QWORD)v50) > 0xF)
    *v50++ = *(_OWORD *)"__omp_offloading";
  else
    llvm::raw_ostream::write((llvm::raw_ostream *)v48, "__omp_offloading");
  v40[0] = &unk_24FA65F98;
  v40[1] = "_%x";
  v41[0] = HIDWORD(v36);
  llvm::raw_ostream::operator<<();
  v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24FA65F98;
  v37.__r_.__value_.__l.__size_ = (std::string::size_type)"_%x_";
  v37.__r_.__value_.__r.__words[2] = v36;
  v17 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v18 = (_WORD *)*((_QWORD *)v17 + 4);
  if (v9 <= *((_QWORD *)v17 + 3) - (_QWORD)v18)
  {
    if (v9)
    {
      memcpy(v18, v11, v9);
      v18 = (_WORD *)(*((_QWORD *)v17 + 4) + v9);
      *((_QWORD *)v17 + 4) = v18;
    }
  }
  else
  {
    v17 = (llvm::raw_ostream *)llvm::raw_ostream::write(v17, (const char *)v11);
    v18 = (_WORD *)*((_QWORD *)v17 + 4);
  }
  v31 = v11;
  if (*((_QWORD *)v17 + 3) - (_QWORD)v18 > 1uLL)
  {
    *v18 = 27743;
    *((_QWORD *)v17 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v17, "_l");
  }
  llvm::raw_ostream::operator<<();
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v48);
  v19 = sub_22E59F470(v12, 56);
  sub_22E618EBC((uint64_t)v48, *(_QWORD *)(v13 + 8), 1);
  v20 = *(_OWORD *)v52;
  sub_22E5BB2A4((uint64_t)v40, v19, 2);
  v43 = *v3;
  v44 = *((_QWORD *)v3 + 2);
  v42 = 3;
  v45 = 56;
  v46 = 0;
  v40[0] = &off_24FA65E50;
  v47 = v20;
  v21 = v51;
  v51 = v40;
  if (v16)
    *v32 = (uint64_t)sub_22E5F06DC();
  if (v33)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) + 152) + 76) & 8) != 0)
    {
      v24 = v30;
      *v30 = llvm::ConstantExpr::getBitCast();
      v26 = (llvm::GlobalValue *)*v32;
      v27 = *(_DWORD *)(*v32 + 32);
      *(_DWORD *)(*v32 + 32) = v27 & 0xFFFFFFF0 | 5;
      if ((v27 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v26) & 1) == 0)
        *((_DWORD *)v26 + 8) |= 0x4000u;
      *(_DWORD *)(*v32 + 32) &= ~0x4000u;
      v25 = *v32;
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) + 216) + 56) == 30)
        *(_WORD *)(v25 + 18) = *(_WORD *)(v25 + 18) & 0xC00F | 0x5B0;
    }
    else
    {
      *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *(_OWORD *)v52;
      v37.__r_.__value_.__r.__words[2] = (std::string::size_type)"region_id";
      v38 = 9;
      sub_22F27BE70(&__p, v13, (uint64_t)&v37, 2);
      v22 = llvm::User::operator new((llvm::User *)0x58);
      llvm::Constant::getNullValue(*(llvm::Constant **)(*(_QWORD *)(v13 + 8) + 8), v23);
      v39 = 260;
      v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      llvm::GlobalVariable::GlobalVariable();
      v24 = v30;
      *v30 = v22;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v25 = *v32;
    }
    if (!v16)
    {
      v25 = llvm::User::operator new((llvm::User *)0x58);
      llvm::Constant::getNullValue(*(llvm::Constant **)(*(_QWORD *)(v13 + 8) + 8), v28);
      v39 = 261;
      *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *(_OWORD *)v52;
      llvm::GlobalVariable::GlobalVariable();
    }
    sub_22F27D468(v13 + 2872, SHIDWORD(v36), v36, v31, v9, v35, v25, *v24, 0);
    LODWORD(__p.__r_.__value_.__l.__data_) = -1;
    sub_22F281444((uint64_t)v48, v12, (int *)&__p);
    if (SLODWORD(__p.__r_.__value_.__l.__data_) >= 1)
    {
      if (*v32)
      {
        std::to_string(&v37, (int)__p.__r_.__value_.__l.__data_);
        llvm::Function::addFnAttr();
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v37.__r_.__value_.__l.__data_);
      }
    }
    sub_22F2816C4((uint64_t)v48, v12);
    if (v16)
    {
      v29 = sub_22E699F3C(*(_QWORD **)(v13 + 8));
      (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v29 + 16))(v29, 0, *v32, *(_QWORD *)(v13 + 8));
    }
  }
  v51 = v21;
  v40[0] = &off_24FA66C98;
  sub_22E49FAE8((uint64_t)v41);
  sub_22E619434((uint64_t)v48);
  if (*(_QWORD **)v52 != v53)
    free(*(void **)v52);
}

_QWORD *sub_22E5B1A14(_QWORD *a1)
{
  *a1 = &off_24FA66C98;
  sub_22E49FAE8((uint64_t)(a1 + 2));
  return a1;
}

unsigned __int8 *sub_22E5B1A48(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  int v4;
  unsigned __int8 **v5;
  unint64_t v6;
  unsigned __int8 **v7;
  unsigned int v8;
  unsigned __int8 **v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v26;
  BOOL v27;
  unsigned __int8 **v28;
  int v29;
  uint64_t v31;
  char v32;

  v2 = a2;
  if (!a2)
    return v2;
  while (1)
  {
    v4 = *v2;
    if (v4 == 8)
      break;
    if (v4 != 101)
      goto LABEL_9;
    v5 = (unsigned __int8 **)(v2 + 8);
LABEL_7:
    v2 = *v5;
    if (!*v5)
      return v2;
  }
  if ((*(_DWORD *)v2 & 0xFFFFFF00) == 0x100)
  {
    v5 = (unsigned __int8 **)(v2 + 16);
    goto LABEL_7;
  }
LABEL_9:
  if (*v2 != 8)
    return v2;
LABEL_10:
  v8 = *(_DWORD *)v2;
  v7 = (unsigned __int8 **)(v2 + 16);
  v6 = v8;
  if (v8 < 0x100)
    return 0;
  v9 = (unsigned __int8 **)((char *)v7 + ((v6 >> 5) & 0x7FFFFF8));
  v10 = v7;
  v2 = 0;
  while (2)
  {
    v11 = v2;
    v2 = *v10;
    v12 = **v10;
    if ((v12 + 21) < 0x7Bu)
    {
      if (v12 > 0x1C)
        goto LABEL_30;
LABEL_17:
      if (((1 << v12) & 0x10480006) != 0)
        goto LABEL_19;
      if (v12 == 12)
      {
        v18 = *((_QWORD *)v2 + 1);
        if ((v18 & 1) != 0)
        {
          v19 = (uint64_t *)((v18 & 0xFFFFFFFFFFFFFFFELL) + 8);
          v20 = &v19[*(unsigned int *)(v18 & 0xFFFFFFFFFFFFFFFELL)];
        }
        else
        {
          if (v18)
            v19 = (uint64_t *)(v2 + 8);
          else
            v19 = 0;
          if (v18)
            v20 = (uint64_t *)(v2 + 16);
          else
            v20 = 0;
        }
        if (v19 == v20)
          goto LABEL_19;
        while (1)
        {
          v21 = *v19;
          v22 = *(_DWORD *)(*v19 + 28) & 0x7F;
          if ((v22 > 0x39 || ((1 << v22) & 0x3F0003E01011076) == 0)
            && (v22 - 70 > 0xD || ((1 << (v22 - 70)) & 0x2803) == 0)
            && v22 - 19 >= 5
            && v22 - 33 >= 0xA)
          {
            v26 = v22 - 44 > 0x24 || ((1 << (v22 - 44)) & 0x1A88000001) == 0;
            v27 = !v26 || v22 == 13;
            if (!v27 && (v22 - 67 < 0xFFFFFFF9 || sub_22E3CB5E0(*v19) && (sub_22EFC9084(v21, 1) & 1) != 0))
              break;
          }
          if (++v19 == v20)
            goto LABEL_31;
        }
      }
      else
      {
LABEL_30:
        if (v12 == 84)
        {
LABEL_31:
          v2 = v11;
          goto LABEL_20;
        }
      }
      if (v11)
        return 0;
    }
    else
    {
      if (!sub_22F007CB0(*v10, a1, 1) && (v31 = a1, v32 = 0, sub_22F0015B4((uint64_t)&v31, v2), v32)
        || sub_22F0005B0((unint64_t)v2, a1, 1, v13, v14, v15, v16, v17))
      {
        v12 = *v2;
        goto LABEL_17;
      }
LABEL_19:
      v2 = v11;
    }
LABEL_20:
    if (++v10 != v9)
      continue;
    break;
  }
  while (v2)
  {
    v29 = *v2;
    if (v29 == 8)
    {
      if ((*(_DWORD *)v2 & 0xFFFFFF00) != 0x100)
      {
LABEL_69:
        if (*v2 == 8)
          goto LABEL_10;
        return v2;
      }
      v28 = (unsigned __int8 **)(v2 + 16);
    }
    else
    {
      if (v29 != 101)
        goto LABEL_69;
      v28 = (unsigned __int8 **)(v2 + 8);
    }
    v2 = *v28;
  }
  return v2;
}

uint64_t sub_22E5B1D08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  unsigned int v28[8];
  _OWORD v29[3];

  v3 = a2;
  v5 = *(_QWORD *)(a2 + 1856);
  *(_DWORD *)(a1 + 8) = 2;
  *(_QWORD *)(a1 + 16) = 1;
  for (i = 24; i != 88; i += 16)
    *(_QWORD *)(a1 + i) = -4096;
  v7 = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 2;
  *(_QWORD *)(a1 + 112) = sub_22E5BCB2C;
  *(_QWORD *)(a1 + 120) = sub_22F2842FC;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = 89;
  *(_BYTE *)(a1 + 140) = 0;
  *(_QWORD *)(a1 + 144) = v5;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 8) == 2)
      v7 = v5;
    else
      v7 = 0;
  }
  *(_QWORD *)a1 = &off_24FA65EB8;
  *(_QWORD *)(a1 + 160) = -1;
  *(_QWORD *)(a1 + 168) = -1;
  *(_QWORD *)(a1 + 152) = v7;
  *(_BYTE *)(a1 + 185) = 1;
  *(_QWORD *)(a1 + 192) = a2;
  v8 = *(_QWORD *)(a2 + 1992) - *(_QWORD *)(a2 + 2000);
  *(_QWORD *)(a1 + 160) = v8;
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 2312);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 2893);
  *(_BYTE *)(a2 + 2893) = 0;
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 2872);
  *(_QWORD *)(a2 + 2872) = v8;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  v9 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v9)
  {
    v10 = (uint64_t *)(a3 + (8 * v9 + 40));
    v11 = &v10[2 * v9];
    while (1)
    {
      v12 = *v10;
      if (((*v10 >> 1) & 3) - 1 > 1)
        goto LABEL_16;
      v13 = v12 & 0xFFFFFFFFFFFFFFF8;
      if ((sub_22E3CEC2C(v12 & 0xFFFFFFFFFFFFFFF8) & 1) != 0 || (*(_DWORD *)(v13 + 28) & 0x7F) == 0x40)
        goto LABEL_16;
      v14 = *(_QWORD *)(*(_QWORD *)(v3 + 144) + 144);
      v15 = *(_QWORD *)(v13 + 48);
      v16 = *(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0);
      if (v16)
      {
        v17 = *(_DWORD *)(v16 + 16);
        if ((v17 & 0xFE) == 0x28)
          goto LABEL_20;
      }
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
      {
        v21 = *(_QWORD *)(v13 + 48);
        v22 = *(_QWORD *)(*(_QWORD *)(v3 + 144) + 144);
        v16 = sub_22F10CF48(v16);
        v15 = v21;
        v14 = v22;
        if (v16)
          break;
      }
LABEL_15:
      v18 = *((_DWORD *)v10 + 2);
      v24 = 0;
      sub_22EFF69F0((uint64_t)v28, v14, v13, 0, v15, 1, v18, &v24, 0);
      sub_22E4D8D7C(v3, v28, (uint64_t)&v24);
      v29[0] = v25;
      v29[1] = v26;
      v29[2] = v27;
      sub_22E5BC134((uint64_t *)(a1 + 200), *(_QWORD *)(a1 + 192), v13, (uint64_t)v29);
LABEL_16:
      v10 += 2;
      if (v10 == v11)
      {
        v3 = *(_QWORD *)(a1 + 192);
        goto LABEL_28;
      }
    }
    v17 = *(_DWORD *)(v16 + 16);
LABEL_20:
    if ((v17 & 0x100000) != 0)
    {
      v23 = v14;
      do
      {
        v16 = *(_QWORD *)(*(_QWORD *)(v16 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (!v16 || (v19 = *(_DWORD *)(v16 + 16), (v19 & 0xFE) != 0x28))
        {
          v16 = sub_22F10CF48(v16);
          v19 = *(_DWORD *)(v16 + 16);
        }
        v14 = v23;
      }
      while ((v19 & 0x100000) != 0);
    }
    v15 = *(_QWORD *)(v16 + 32);
    goto LABEL_15;
  }
LABEL_28:
  sub_22E5BC320(a1 + 224, v3 + 2904);
  sub_22F2840EC(a1 + 224);
  return a1;
}

_QWORD *sub_22E5B1FB8(_QWORD *a1)
{
  sub_22F283FC4((uint64_t)(a1 + 20));
  *a1 = &off_24FA66C98;
  sub_22E49FAE8((uint64_t)(a1 + 2));
  return a1;
}

uint64_t sub_22E5B1FF8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  unsigned __int8 *v7;
  llvm::LLVMContext *v8;
  unsigned __int8 *v9;
  int v11;
  llvm::LLVMContext *v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  llvm::Value *v17;
  unsigned int *v18;
  unsigned int *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  _DWORD *v25;
  unint64_t *v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t *v29;
  unint64_t *v30;
  int v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  _DWORD *v36;
  uint64_t v37;
  unsigned int v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  unint64_t v49;
  unsigned __int8 *v50;
  llvm::Value *v51;
  uint64_t v52;
  uint64_t Select;
  int v54;
  unsigned __int8 *v55;
  llvm::LLVMContext *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  char v64[32];
  __int16 v65;
  uint64_t v66[2];
  char v67;
  uint64_t v68;
  __int16 v69;
  _BYTE v70[104];
  _QWORD v71[2];
  _WORD v72[72];
  _QWORD v73[12];

  v73[11] = *MEMORY[0x24BDAC8D0];
  v7 = sub_22E5B1A48(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), *(unsigned __int8 **)(a2 + 8 * *(unsigned int *)(a2 + 8) + 32));
  if (v7)
  {
    v9 = v7;
    if (*v7 - 21 <= 0x40)
    {
      v11 = *((_DWORD *)v7 + 2);
      if (!sub_22F421A78(v11))
      {
        v3 = (unint64_t)a3;
        if (!sub_22F421AC0(v11))
          return v3;
        goto LABEL_5;
      }
      v13 = (unsigned int *)*((_QWORD *)v9 + 3);
      if (!v13)
      {
        v17 = 0;
        goto LABEL_25;
      }
      v14 = v13 + 4;
      v15 = *v13;
      if ((_DWORD)v15)
      {
        v16 = 0;
        while (*(_DWORD *)(*(_QWORD *)&v14[v16] + 8) != 36)
        {
          v16 += 2;
          if (2 * v15 == v16)
            goto LABEL_17;
        }
        v18 = &v14[v16];
      }
      else
      {
        v18 = v13 + 4;
      }
      if (v18 == &v14[2 * v15])
      {
LABEL_17:
        v17 = 0;
LABEL_18:
        v21 = *v13;
        v19 = v13 + 4;
        v20 = v21;
        if (v21)
        {
          v22 = 8 * v20;
          v23 = v19;
          while (*(_DWORD *)(*(_QWORD *)v23 + 8) != 58)
          {
            v23 += 2;
            v22 -= 8;
            if (!v22)
              goto LABEL_25;
          }
        }
        else
        {
          v23 = v19;
        }
        if (v23 != &v19[2 * v20])
        {
          sub_22E5B1D08((uint64_t)v71, a1, a2);
          v34 = *(_QWORD *)(a1 + 1856);
          *(_QWORD *)(a1 + 1856) = v71;
          v35 = (unsigned int *)*((_QWORD *)v9 + 3);
          if (!v35)
            goto LABEL_54;
          v38 = *v35;
          v36 = v35 + 4;
          v37 = v38;
          if (v38)
          {
            v42 = 8 * v37;
            v39 = v36;
            while (*(_DWORD *)(*(_QWORD *)v39 + 8) != 58)
            {
              v39 += 2;
              v42 -= 8;
              if (!v42)
                goto LABEL_54;
            }
          }
          else
          {
            v39 = v36;
          }
          if (v39 == &v36[2 * v37])
LABEL_54:
            v40 = 0;
          else
            v40 = *(_QWORD *)v39;
          sub_22F0D4E74(*(_QWORD *)(v40 + 32));
          sub_22E4889F4((uint64_t)v70, a1, v43);
          v44 = *(_QWORD *)(v40 + 16);
          if (v44)
          {
            v45 = *(_QWORD *)(v44 + 8);
            if ((v45 & 1) != 0)
            {
              v46 = (uint64_t *)((v45 & 0xFFFFFFFFFFFFFFFELL) + 8);
              v48 = &v46[*(unsigned int *)(v45 & 0xFFFFFFFFFFFFFFFELL)];
            }
            else
            {
              if (v45)
                v46 = (uint64_t *)(v44 + 8);
              else
                v46 = 0;
              v47 = (uint64_t *)(v44 + 16);
              if (v45)
                v48 = v47;
              else
                v48 = 0;
            }
            while (v46 != v48)
            {
              v49 = *v46;
              if (sub_22F281CA0(*v46))
              {
                sub_22E4C8440(a1, v49, (uint64_t)v66);
                sub_22E4C9A74(a1, (uint64_t)v66);
              }
              else
              {
                sub_22E4C652C((_QWORD *)a1, v49);
              }
              ++v46;
            }
          }
          v50 = *(unsigned __int8 **)(v40 + 32);
          v66[0] = a1;
          v66[1] = a1 + 272;
          v67 = 0;
          v68 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
          v51 = sub_22E50E974(v66, v50);
          v52 = *(_QWORD *)(a1 + 24);
          v69 = 257;
          Select = sub_22E3BF45C((uint64_t *)(a1 + 272), (uint64_t)v51, v52, 0, (uint64_t)v66);
          if (a3)
          {
            v69 = 257;
            sub_22E3C18F4(a1 + 272, 36, a3, Select, (uint64_t)v66);
            v65 = 257;
            Select = llvm::IRBuilderBase::CreateSelect();
          }
          sub_22E488B4C((uint64_t)v70);
          *(_QWORD *)(a1 + 1856) = v34;
          sub_22F283FC4((uint64_t)v73);
          v71[0] = &off_24FA66C98;
          sub_22E49FAE8((uint64_t)v72);
          a3 = (uint64_t *)Select;
          if (v17)
            goto LABEL_28;
          return (uint64_t)a3;
        }
LABEL_25:
        if (!a3)
        {
          llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 336), v12);
          a3 = (uint64_t *)llvm::ConstantInt::get();
        }
        if (v17)
        {
LABEL_28:
          llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 336), v12);
          llvm::ConstantInt::get();
          v72[8] = 257;
          return llvm::IRBuilderBase::CreateSelect();
        }
        return (uint64_t)a3;
      }
      sub_22E5B1D08((uint64_t)v71, a1, a2);
      v24 = *(_QWORD *)(a1 + 1856);
      *(_QWORD *)(a1 + 1856) = v71;
      v25 = (_DWORD *)*((_QWORD *)v9 + 3);
      if (!v25)
        goto LABEL_74;
      v28 = *v25;
      v26 = (unint64_t *)(v25 + 4);
      v27 = v28;
      if (v28)
      {
        v41 = 8 * v27;
        v29 = v26;
        while (*(_DWORD *)(*v29 + 8) != 36)
        {
          ++v29;
          v41 -= 8;
          if (!v41)
            goto LABEL_74;
        }
      }
      else
      {
        v29 = v26;
      }
      v30 = &v26[v27];
      if (v29 == v30)
      {
LABEL_74:
        v17 = 0;
        v54 = 1;
        goto LABEL_75;
      }
      v3 = *v29;
      v31 = *(_DWORD *)(*v29 + 44);
      if (v31 != 89)
      {
        while (2)
        {
          if (v31 != 40)
          {
            v32 = v29 + 1;
            do
            {
              if (v32 == v30)
              {
                v3 = 0;
                goto LABEL_74;
              }
              v33 = *v32++;
              v3 = v33;
            }
            while (*(_DWORD *)(v33 + 8) != 36);
            v31 = *(_DWORD *)(v3 + 44);
            v29 = v32 - 1;
            if (v31 != 89)
              continue;
          }
          break;
        }
      }
      v63 = v24;
      v55 = *(unsigned __int8 **)(v3 + 32);
      v64[0] = 0;
      if (sub_22F005310(v55, (uint64_t)v64, *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), 0))
      {
        if (!v64[0])
        {
          llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 336), v56);
          v3 = llvm::ConstantInt::get();
          v54 = 0;
          v17 = 0;
LABEL_98:
          v24 = v63;
LABEL_75:
          *(_QWORD *)(a1 + 1856) = v24;
          sub_22F283FC4((uint64_t)v73);
          v71[0] = &off_24FA66C98;
          sub_22E49FAE8((uint64_t)v72);
          if (!v54)
            return v3;
          v13 = (unsigned int *)*((_QWORD *)v9 + 3);
          if (!v13)
            goto LABEL_25;
          goto LABEL_18;
        }
        v17 = 0;
      }
      else
      {
        sub_22F0D4E74((uint64_t)v55);
        sub_22E4889F4((uint64_t)v70, a1, v57);
        v58 = *(_QWORD *)(v3 + 16);
        if (v58)
        {
          v59 = *(_QWORD *)(v58 + 8);
          if ((v59 & 1) != 0)
          {
            v60 = (uint64_t *)((v59 & 0xFFFFFFFFFFFFFFFELL) + 8);
            v62 = &v60[*(unsigned int *)(v59 & 0xFFFFFFFFFFFFFFFELL)];
          }
          else
          {
            if (v59)
              v60 = (uint64_t *)(v58 + 8);
            else
              v60 = 0;
            v61 = (uint64_t *)(v58 + 16);
            if (v59)
              v62 = v61;
            else
              v62 = 0;
          }
          while (v60 != v62)
          {
            v3 = *v60;
            if (sub_22F281CA0(*v60))
            {
              sub_22E4C8440(a1, v3, (uint64_t)v66);
              sub_22E4C9A74(a1, (uint64_t)v66);
            }
            else
            {
              sub_22E4C652C((_QWORD *)a1, v3);
            }
            ++v60;
          }
        }
        v17 = sub_22E4D86E0((_QWORD *)a1, (uint64_t)v55);
        sub_22E488B4C((uint64_t)v70);
      }
      v54 = 1;
      goto LABEL_98;
    }
  }
  v3 = (unint64_t)a3;
  if (a3)
    return v3;
LABEL_5:
  llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 336), v8);
  return llvm::ConstantInt::get();
}

void sub_22E5B2624()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;
  _DWORD *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  llvm::Value *v28;
  int8x16_t v29;
  int v30;
  uint64_t v31;
  __int128 v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  __int128 v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  __int128 v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  __int128 v44;
  unint64_t v45;
  llvm::LLVMContext *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  int v51;
  uint64_t v52;
  __int128 v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  int v57;
  uint64_t v58;
  __int128 v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  llvm::PHINode *v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t RuntimeFunction;
  llvm::Value *v77;
  llvm::Value *v78;
  llvm::LLVMContext *v79;
  uint64_t v80;
  _QWORD *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  llvm::PointerType *v88;
  uint64_t v89;
  uint64_t v90;
  llvm::LLVMContext *v91;
  uint64_t v92;
  llvm::LLVMContext *v93;
  uint64_t v94;
  llvm::Constant **v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  llvm::Type *v100;
  uint64_t NullValue;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  llvm::LLVMContext *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  llvm::LLVMContext *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  llvm::LLVMContext *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  llvm::LLVMContext *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  llvm::LLVMContext *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  llvm::PHINode *v132;
  uint64_t v133;
  uint64_t v134;
  llvm::Value *v135;
  llvm::Value *v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  unsigned int v146;
  llvm *v147;
  unsigned int v148;
  uint64_t *v149;
  _QWORD *v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  llvm::LLVMContext *v158;
  uint64_t v159;
  llvm::Instruction *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  std::string *v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  llvm::Instruction *v176;
  uint64_t v177;
  _BYTE v178[32];
  __int16 v179;
  uint64_t v180;
  _QWORD *v181;
  llvm *v182;
  uint64_t v183;
  unsigned int v184;
  llvm *v185;
  uint64_t v186;
  unsigned int v187;
  llvm *v188;
  uint64_t v189;
  unsigned int v190;
  _QWORD v191[3];
  char v192;
  char v193;
  _QWORD *v194;
  uint64_t v195[2];
  int v196;
  _QWORD v197[2];
  int v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  uint64_t v217;
  std::string __p;
  _BYTE v219[72];
  _QWORD v220[3];
  int v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  int v225;
  uint64_t v226;
  _QWORD *v227;
  uint64_t v228;
  int v229;
  _QWORD v230[3];
  int v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  int v235;
  uint64_t v236;
  _QWORD *v237;
  uint64_t v238;
  int v239;
  _QWORD v240[3];
  int v241;
  uint64_t v242;
  unint64_t v243;
  uint64_t v244;
  int v245;
  uint64_t v246;
  _QWORD *v247;
  uint64_t v248;
  int v249;
  _QWORD v250[3];
  int v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  int v255;
  uint64_t v256;
  _QWORD *v257;
  uint64_t v258;
  int v259;
  _QWORD v260[3];
  int v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  int v265;
  uint64_t v266;
  _QWORD *v267;
  uint64_t v268;
  int v269;
  _QWORD v270[3];
  int v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  int v275;
  uint64_t v276;
  _QWORD *v277;
  uint64_t v278;
  int v279;
  uint64_t v280;
  llvm *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  llvm::PHINode *v285;
  uint64_t v286;
  std::string *v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  uint64_t *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t *v294;
  uint64_t v295;
  uint64_t v296;
  _QWORD *v297;
  uint64_t v298;
  _QWORD v299[6];
  uint64_t v300;
  _BYTE *v301;
  uint64_t v302;
  _BYTE v303[40];
  _QWORD *v304;
  uint64_t v305;
  _QWORD v306[6];
  _QWORD v307[26];
  _QWORD v308[26];
  uint64_t v309;
  _QWORD v310[4];
  const char *v311;
  uint64_t v312;
  _QWORD *v313;
  uint64_t v314;
  unsigned int v315;
  uint64_t v316;
  uint64_t v317;
  llvm::Type *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  char v324;
  uint64_t v325[2];
  unsigned int v326;
  void *v327;
  __int128 v328;
  _BYTE v329[64];
  void *v330[2];
  _QWORD v331[19];

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v5 = v0;
  v331[16] = *MEMORY[0x24BDAC8D0];
  v280 = v3;
  if ((sub_22F24C318(*(_QWORD *)(v0 + 2576), *(_DWORD *)(v0 + 2592), v3, v310) & 1) == 0)
  {
    v154 = v2;
    v6 = *(_QWORD *)(*(_QWORD *)(v5 + 8) + 144);
    v7 = *(_QWORD *)(v4 + 48);
    v174 = sub_22EF5B848(v6, v7, 0) | 2;
    v8 = sub_22EF60A6C(v6, 64, 1);
    v175 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * **(unsigned int **)(v4 + 56) + 16) + 16);
    v9 = *(unsigned int *)(v4 + 24);
    v171 = v7;
    sub_22EF5CCD0(v6, *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0), (uint64_t)v310);
    v159 = v310[0];
    v158 = (llvm::LLVMContext *)sub_22E66C868(*(_QWORD *)(v5 + 8) + 280, v7, 0);
    v10 = *(_QWORD *)(v6 + 16816);
    sub_22EA41AB8((uint64_t)v270, 62, 0, v9);
    v272 = 0;
    v273 = v10;
    v274 = 0;
    v275 = v9;
    v276 = v6 | 2;
    v277 = v270;
    v278 = 0;
    v270[0] = &off_24FAC3008;
    v279 = 1310720;
    v271 |= 0x200u;
    v11 = v5;
    v12 = *(_QWORD *)(v6 + 16816);
    sub_22EA41AB8((uint64_t)v260, 62, 0, v9);
    v262 = 0;
    v263 = v12;
    v264 = 0;
    v265 = v9;
    v266 = v6 | 2;
    v267 = v260;
    v268 = 0;
    v260[0] = &off_24FAC3008;
    v269 = 1310720;
    v261 |= 0x200u;
    v13 = *(_QWORD *)(v6 + 16816);
    sub_22EA41AB8((uint64_t)v250, 62, 0, v9);
    v252 = 0;
    v253 = v13;
    v254 = 0;
    v255 = v9;
    v256 = v6 | 2;
    v257 = v250;
    v258 = 0;
    v250[0] = &off_24FAC3008;
    v259 = 1310720;
    v251 |= 0x200u;
    sub_22EA41AB8((uint64_t)v240, 62, 0, v9);
    v242 = 0;
    v243 = v8;
    v244 = 0;
    v245 = v9;
    v246 = v6 | 2;
    v247 = v240;
    v248 = 0;
    v240[0] = &off_24FAC3008;
    v249 = 1310720;
    v241 |= 0x200u;
    sub_22EA41AB8((uint64_t)v230, 62, 0, v9);
    v232 = 0;
    v177 = v8;
    v233 = v8;
    v234 = 0;
    v235 = v9;
    v236 = v6 | 2;
    v237 = v230;
    v238 = 0;
    v230[0] = &off_24FAC3008;
    v239 = 1310720;
    v231 |= 0x200u;
    v14 = *(_QWORD *)(v6 + 16816);
    sub_22EA41AB8((uint64_t)v220, 62, 0, v9);
    v222 = 0;
    v223 = v14;
    v224 = 0;
    v225 = v9;
    v226 = v6 | 2;
    v227 = v220;
    v228 = 0;
    v220[0] = &off_24FAC3008;
    v229 = 1310720;
    v221 |= 0x200u;
    v330[0] = v331;
    v331[0] = v270;
    v331[1] = v260;
    v331[2] = v250;
    v331[3] = v240;
    v331[4] = v230;
    v162 = v6;
    v15 = *(_QWORD *)(v6 + 16392);
    v16 = *(_QWORD *)(v11 + 8);
    v331[5] = v220;
    v330[1] = (void *)0x1000000006;
    v17 = sub_22F24E348(v16 + 280, v15, (uint64_t *)v330);
    v18 = sub_22E46F2EC(*(_QWORD *)(v11 + 8) + 280, v17);
    v327 = v329;
    v328 = xmmword_22F44E300;
    sub_22F242C48((uint64_t)v219, (uint64_t)&v327);
    v163 = v11;
    v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) + 224) + 16);
    (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v19 + 184))(v19, v171, v219);
    v20 = 0;
    v310[0] = "omp_mapper";
    v310[1] = 10;
    v310[2] = v327;
    v310[3] = v328;
    v21 = *(_QWORD *)(v280 + 40);
    v22 = "";
    if ((v21 & 7) == 0)
    {
      v23 = v21 & 0xFFFFFFFFFFFFFFF8;
      if (v23)
      {
        v24 = *(_DWORD **)(v23 + 16);
        v25 = *v24;
        v22 = (const char *)(v24 + 4);
        v20 = v25;
      }
    }
    v311 = v22;
    v312 = v20;
    v26 = v11;
    sub_22F27BE70(&__p, v11, (uint64_t)v310, 3);
    LOWORD(v311) = 260;
    v310[0] = &__p;
    v27 = *(_QWORD *)(*(_QWORD *)(v11 + 8) + 200);
    v28 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x78);
    v217 = MEMORY[0x23489F6FC](v28, v18, 7, 0xFFFFFFFFLL, v310, v27);
    sub_22E62BF18(*(uint64_t **)(v11 + 8), 0, 0, v28, v17);
    llvm::Function::removeFnAttr();
    sub_22E618EBC((uint64_t)v310, *(_QWORD *)(v11 + 8), 0);
    sub_22E61A8FC((uint64_t)v310, 0, 0, *(_QWORD *)(v6 + 16392), v28, v17, (uint64_t *)v330, v9, v29, v9);
    v191[0] = v240;
    *(_QWORD *)&v288 = 0;
    v30 = sub_22E3CED3C(v325, v191, &v288);
    v31 = v288;
    if (!v30)
      v31 = v325[0] + 56 * v326;
    v32 = *(_OWORD *)(v31 + 24);
    v214 = *(_OWORD *)(v31 + 8);
    v215 = v32;
    v216 = *(_OWORD *)(v31 + 40);
    v33 = sub_22EF5B848(v6, v177, 0);
    v288 = v214;
    v289 = v215;
    v290 = v216;
    sub_22E6281E0(v313, v33, (uint64_t)v191);
    v172 = sub_22E4E6994((uint64_t)v310, (uint64_t)&v288, 0, v33, v9, 2, (uint64_t)v191, 0);
    v191[0] = v270;
    *(_QWORD *)&v288 = 0;
    v34 = sub_22E3CED3C(v325, v191, &v288);
    v35 = v288;
    if (!v34)
      v35 = v325[0] + 56 * v326;
    v36 = *(_OWORD *)(v35 + 24);
    v211 = *(_OWORD *)(v35 + 8);
    v212 = v36;
    v213 = *(_OWORD *)(v35 + 40);
    v37 = sub_22EF5B848(v6, *(_QWORD *)(v6 + 16816), 0);
    v288 = v211;
    v289 = v212;
    v290 = v213;
    sub_22E6281E0(v313, v37, (uint64_t)v191);
    v164 = (std::string *)sub_22E4E6994((uint64_t)v310, (uint64_t)&v288, 0, v37, v9, 2, (uint64_t)v191, 0);
    v191[0] = v260;
    *(_QWORD *)&v288 = 0;
    v38 = sub_22E3CED3C(v325, v191, &v288);
    v39 = v288;
    if (!v38)
      v39 = v325[0] + 56 * v326;
    v40 = *(_OWORD *)(v39 + 24);
    v208 = *(_OWORD *)(v39 + 8);
    v209 = v40;
    v210 = *(_OWORD *)(v39 + 40);
    v41 = sub_22EF5B848(v6, *(_QWORD *)(v6 + 16816), 0);
    v288 = v208;
    v289 = v209;
    v290 = v210;
    sub_22E6281E0(v313, v41, (uint64_t)v191);
    v157 = (uint64_t *)sub_22E4E6994((uint64_t)v310, (uint64_t)&v288, 0, v41, v9, 2, (uint64_t)v191, 0);
    v191[0] = v250;
    *(_QWORD *)&v288 = 0;
    v42 = sub_22E3CED3C(v325, v191, &v288);
    v43 = v288;
    if (!v42)
      v43 = v325[0] + 56 * v326;
    v44 = *(_OWORD *)(v43 + 24);
    v205 = *(_OWORD *)(v43 + 8);
    v206 = v44;
    v207 = *(_OWORD *)(v43 + 40);
    v45 = sub_22EF5B848(v6, *(_QWORD *)(v6 + 16816), 0);
    v288 = v205;
    v289 = v206;
    v290 = v207;
    sub_22E6281E0(v313, v45, (uint64_t)v191);
    v156 = sub_22E4E6994((uint64_t)v310, (uint64_t)&v288, 0, v45, v9, 2, (uint64_t)v191, 0);
    llvm::Type::getInt64Ty(v318, v46);
    v47 = llvm::ConstantInt::get();
    LOWORD(v290) = 257;
    v48 = (uint64_t *)sub_22E4DF3BC((uint64_t)&v314, v172, v47, (uint64_t)&v288, 1);
    v49 = sub_22E66C868(*(_QWORD *)(v11 + 8) + 280, v174, 0);
    LOWORD(v290) = 257;
    v50 = (uint64_t *)sub_22E3C1740(&v314, 49, v156, v49, (uint64_t)&v288);
    LOWORD(v290) = 257;
    v155 = sub_22E42129C(&v314, (uint64_t)v158, v50, v48, (uint64_t)&v288);
    v191[0] = v230;
    *(_QWORD *)&v288 = 0;
    v51 = sub_22E3CED3C(v325, v191, &v288);
    v52 = v288;
    if (!v51)
      v52 = v325[0] + 56 * v326;
    v53 = *(_OWORD *)(v52 + 24);
    v202 = *(_OWORD *)(v52 + 8);
    v203 = v53;
    v204 = *(_OWORD *)(v52 + 40);
    v54 = sub_22EF5B848(v6, v177, 0);
    v288 = v202;
    v289 = v203;
    v290 = v204;
    sub_22E6281E0(v313, v54, (uint64_t)v191);
    v55 = sub_22E4E6994((uint64_t)v310, (uint64_t)&v288, 0, v54, v9, 2, (uint64_t)v191, 0);
    v191[0] = v220;
    *(_QWORD *)&v288 = 0;
    v56 = v50;
    v57 = sub_22E3CED3C(v325, v191, &v288);
    v58 = v288;
    if (!v57)
      v58 = v325[0] + 56 * v326;
    v59 = *(_OWORD *)(v58 + 24);
    v199 = *(_OWORD *)(v58 + 8);
    v200 = v59;
    v201 = *(_OWORD *)(v58 + 40);
    v60 = sub_22EF5B848(v162, *(_QWORD *)(v162 + 16816), 0);
    v288 = v199;
    v289 = v200;
    v290 = v201;
    sub_22E6281E0(v313, v60, (uint64_t)v191);
    v61 = sub_22E4E6994((uint64_t)v310, (uint64_t)&v288, 0, v60, v9, 2, (uint64_t)v191, 0);
    *(_QWORD *)&v288 = "omp.arraymap.head";
    LOWORD(v290) = 259;
    v62 = (_QWORD *)operator new();
    v63 = llvm::BasicBlock::BasicBlock();
    v152 = v61;
    v153 = v48;
    v161 = v55;
    sub_22E5B3F00(v163, (uint64_t)v310, v164, v157, v156, v48, v55, v61, v159, v63, 1);
    sub_22E5ED9B4(v310, v62, 0);
    *(_QWORD *)&v288 = "omp.arraymap.body";
    LOWORD(v290) = 259;
    v64 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    *(_QWORD *)&v288 = "omp.done";
    LOWORD(v290) = 259;
    v65 = operator new();
    llvm::BasicBlock::BasicBlock();
    *(_QWORD *)&v288 = "omp.arraymap.isempty";
    LOWORD(v290) = 259;
    v66 = sub_22E3C18F4((uint64_t)&v314, 32, v56, v155, (uint64_t)&v288);
    v67 = llvm::User::operator new((llvm::User *)0x40);
    v151 = (_QWORD *)v65;
    MEMORY[0x23489C09C](v67, v65, v64, v66, 0);
    LOWORD(v290) = 257;
    (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v319 + 16))(v319, v67, &v288, v316, v317);
    if (v315)
    {
      v68 = v314;
      v69 = v314 + 16 * v315;
      do
      {
        llvm::Instruction::setMetadata();
        v68 += 16;
      }
      while (v68 != v69);
    }
    v70 = v316;
    sub_22E5ED9B4(v310, v64, 0);
    v71 = *v56;
    *(_QWORD *)&v288 = "omp.arraymap.ptrcurrent";
    LOWORD(v290) = 259;
    v72 = (llvm::PHINode *)sub_22E3C4B80(&v314, v71, 2, (uint64_t)&v288);
    sub_22E3C4C50(v72, (uint64_t)v56, v70);
    v191[0] = v250;
    *(_QWORD *)&v288 = 0;
    v73 = sub_22E3CED3C(v325, v191, &v288);
    v74 = v288;
    if (!v73)
      v74 = v325[0] + 56 * v326;
    v75 = (*(_QWORD *)(v74 + 24) | v159) & -(*(_QWORD *)(v74 + 24) | v159);
    v193 = 1;
    v191[2] = v322;
    v192 = v324;
    v324 = 0;
    v191[0] = v320 - v321;
    v191[1] = v323;
    v323 = v320 - v321;
    v195[0] = 0;
    v195[1] = 0;
    v194 = v310;
    v196 = 0;
    v197[0] = 0;
    v197[1] = 0;
    v198 = 0;
    v149 = (uint64_t *)v72;
    *(_QWORD *)&v288 = v72;
    *((_QWORD *)&v288 + 1) = v158;
    *(_QWORD *)&v289 = v75;
    DWORD2(v289) = 0;
    v290 = 0uLL;
    sub_22E5BC134(v195, (uint64_t)v310, v175, (uint64_t)&v288);
    sub_22E5BC320((uint64_t)v197, (uint64_t)(v194 + 363));
    sub_22F2840EC((uint64_t)v197);
    *(_QWORD *)&v288 = &v289;
    v291 = &v293;
    v294 = &v296;
    v297 = v299;
    v299[4] = &v300;
    v301 = v303;
    v304 = v306;
    v306[4] = v307;
    v307[24] = v308;
    v308[24] = &v309;
    v180 = v280 | 4;
    v181 = v310;
    *((_QWORD *)&v288 + 1) = 0x400000000;
    v292 = 0x400000000;
    v295 = 0x400000000;
    v298 = 0x400000000;
    v299[5] = 0x400000000;
    v302 = 0x400000000;
    v303[32] = 0;
    v305 = 0x400000000;
    v306[5] = 0x400000000;
    v307[25] = 0x400000000;
    v308[25] = 0x400000000;
    v182 = 0;
    v183 = 0;
    v184 = 0;
    v185 = 0;
    v186 = 0;
    v187 = 0;
    v188 = 0;
    v189 = 0;
    v190 = 0;
    v282 = 0;
    v281 = 0;
    v283 = 0;
    sub_22E5BCBA4();
    llvm::deallocate_buffer(v281, (void *)(8 * v283));
    v287 = v164;
    RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
    LOWORD(v285) = 257;
    v78 = sub_22E479C7C((uint64_t)v310, RuntimeFunction, v77, (uint64_t)&v287, 1, (uint64_t)&v281);
    llvm::Type::getInt64Ty(v318, v79);
    v80 = llvm::ConstantInt::get();
    LOWORD(v285) = 257;
    v160 = sub_22E3ED744((uint64_t)&v314, (uint64_t)v78, v80, (uint64_t)&v281, 0, 0);
    v150 = v64;
    v81 = v64;
    if ((_DWORD)v292)
    {
      v82 = 0;
      do
      {
        v83 = v291[2 * v82];
        v84 = sub_22E66C868(*(_QWORD *)(v26 + 8) + 280, *(_QWORD *)(v162 + 16816), 0);
        LOWORD(v285) = 257;
        v173 = sub_22E3C1740(&v314, 49, v83, v84, (uint64_t)&v281);
        v85 = v294[v82];
        v86 = sub_22E66C868(*(_QWORD *)(v26 + 8) + 280, *(_QWORD *)(v162 + 16816), 0);
        LOWORD(v285) = 257;
        v87 = sub_22E3C1740(&v314, 49, v85, v86, (uint64_t)&v281);
        v169 = v297[v82];
        v170 = v87;
        v89 = *(_QWORD *)(v26 + 8);
        if ((*(_QWORD *)(*(_QWORD *)(v89 + 184) + 96) & 0x1E00000000000000) != 0)
          v90 = sub_22E5B43B0((uint64_t)v310, (llvm::OpenMPIRBuilder *)(v163 + 48), (uint64_t *)(v288 + 16 * v82));
        else
          v90 = llvm::ConstantPointerNull::get(*(llvm::ConstantPointerNull **)(v89 + 96), v88);
        v168 = v90;
        llvm::Type::getInt64Ty(v318, v91);
        v92 = llvm::ConstantInt::get();
        LOWORD(v285) = 257;
        v176 = sub_22F26180C((uint64_t)&v314, v92, (uint64_t)v160, (uint64_t)&v281);
        llvm::Type::getInt64Ty(v318, v93);
        v94 = llvm::ConstantInt::get();
        LOWORD(v285) = 257;
        v95 = (llvm::Constant **)sub_22E3E49C4((uint64_t)&v314, v161, v94, (uint64_t)&v281);
        v281 = (llvm *)"omp.type.alloc";
        LOWORD(v285) = 259;
        v96 = (_QWORD *)operator new();
        llvm::BasicBlock::BasicBlock();
        v281 = (llvm *)"omp.type.alloc.else";
        LOWORD(v285) = 259;
        v97 = (_QWORD *)operator new();
        llvm::BasicBlock::BasicBlock();
        v281 = (llvm *)"omp.type.to";
        LOWORD(v285) = 259;
        v167 = (_QWORD *)operator new();
        llvm::BasicBlock::BasicBlock();
        v281 = (llvm *)"omp.type.to.else";
        LOWORD(v285) = 259;
        v98 = (_QWORD *)operator new();
        llvm::BasicBlock::BasicBlock();
        v281 = (llvm *)"omp.type.from";
        LOWORD(v285) = 259;
        v99 = (_QWORD *)operator new();
        llvm::BasicBlock::BasicBlock();
        v281 = (llvm *)"omp.type.end";
        LOWORD(v285) = 259;
        v81 = (_QWORD *)operator new();
        llvm::BasicBlock::BasicBlock();
        LOWORD(v285) = 257;
        NullValue = llvm::Constant::getNullValue(*v95, v100);
        v102 = sub_22E3C18F4((uint64_t)&v314, 32, (uint64_t *)v95, NullValue, (uint64_t)&v281);
        v103 = llvm::User::operator new((llvm::User *)0x40);
        MEMORY[0x23489C09C](v103, v96, v97, v102, 0);
        LOWORD(v285) = 257;
        (*(void (**)(uint64_t, uint64_t, llvm **, uint64_t, uint64_t))(*(_QWORD *)v319 + 16))(v319, v103, &v281, v316, v317);
        if (v315)
        {
          v104 = v314;
          v105 = v314 + 16 * v315;
          do
          {
            llvm::Instruction::setMetadata();
            v104 += 16;
          }
          while (v104 != v105);
        }
        sub_22E5ED9B4(v310, v96, 0);
        llvm::Type::getInt64Ty(v318, v106);
        v107 = llvm::ConstantInt::get();
        LOWORD(v285) = 257;
        v166 = sub_22E3E49C4((uint64_t)&v314, (uint64_t)v176, v107, (uint64_t)&v281);
        v108 = llvm::User::operator new((llvm::User *)0x40);
        llvm::BranchInst::BranchInst();
        LOWORD(v285) = 257;
        (*(void (**)(uint64_t, uint64_t, llvm **, uint64_t, uint64_t))(*(_QWORD *)v319 + 16))(v319, v108, &v281, v316, v317);
        if (v315)
        {
          v109 = v314;
          v110 = v314 + 16 * v315;
          do
          {
            llvm::Instruction::setMetadata();
            v109 += 16;
          }
          while (v109 != v110);
        }
        sub_22E5ED9B4(v310, v97, 0);
        llvm::Type::getInt64Ty(v318, v111);
        v112 = llvm::ConstantInt::get();
        LOWORD(v285) = 257;
        v113 = sub_22E3C18F4((uint64_t)&v314, 32, (uint64_t *)v95, v112, (uint64_t)&v281);
        v114 = llvm::User::operator new((llvm::User *)0x40);
        MEMORY[0x23489C09C](v114, v167, v98, v113, 0);
        LOWORD(v285) = 257;
        (*(void (**)(uint64_t, uint64_t, llvm **, uint64_t, uint64_t))(*(_QWORD *)v319 + 16))(v319, v114, &v281, v316, v317);
        if (v315)
        {
          v115 = v314;
          v116 = v314 + 16 * v315;
          do
          {
            llvm::Instruction::setMetadata();
            v115 += 16;
          }
          while (v115 != v116);
        }
        sub_22E5ED9B4(v310, v167, 0);
        llvm::Type::getInt64Ty(v318, v117);
        v118 = llvm::ConstantInt::get();
        LOWORD(v285) = 257;
        v165 = sub_22E3E49C4((uint64_t)&v314, (uint64_t)v176, v118, (uint64_t)&v281);
        v119 = llvm::User::operator new((llvm::User *)0x40);
        llvm::BranchInst::BranchInst();
        LOWORD(v285) = 257;
        (*(void (**)(uint64_t, uint64_t, llvm **, uint64_t, uint64_t))(*(_QWORD *)v319 + 16))(v319, v119, &v281, v316, v317);
        if (v315)
        {
          v120 = v314;
          v121 = v314 + 16 * v315;
          do
          {
            llvm::Instruction::setMetadata();
            v120 += 16;
          }
          while (v120 != v121);
        }
        sub_22E5ED9B4(v310, v98, 0);
        llvm::Type::getInt64Ty(v318, v122);
        v123 = llvm::ConstantInt::get();
        LOWORD(v285) = 257;
        v124 = sub_22E3C18F4((uint64_t)&v314, 32, (uint64_t *)v95, v123, (uint64_t)&v281);
        v125 = llvm::User::operator new((llvm::User *)0x40);
        MEMORY[0x23489C09C](v125, v99, v81, v124, 0);
        LOWORD(v285) = 257;
        (*(void (**)(uint64_t, uint64_t, llvm **, uint64_t, uint64_t))(*(_QWORD *)v319 + 16))(v319, v125, &v281, v316, v317);
        if (v315)
        {
          v126 = v314;
          v127 = v314 + 16 * v315;
          do
          {
            llvm::Instruction::setMetadata();
            v126 += 16;
          }
          while (v126 != v127);
        }
        sub_22E5ED9B4(v310, v99, 0);
        llvm::Type::getInt64Ty(v318, v128);
        v129 = llvm::ConstantInt::get();
        LOWORD(v285) = 257;
        v130 = sub_22E3E49C4((uint64_t)&v314, (uint64_t)v176, v129, (uint64_t)&v281);
        sub_22E5ED9B4(v310, v81, 0);
        v131 = *(_QWORD *)(*(_QWORD *)(v163 + 8) + 32);
        v281 = (llvm *)"omp.maptype";
        LOWORD(v285) = 259;
        v132 = (llvm::PHINode *)sub_22E3C4B80(&v314, v131, 4, (uint64_t)&v281);
        sub_22E3C4C50(v132, v166, (uint64_t)v96);
        sub_22E3C4C50(v132, v165, (uint64_t)v167);
        sub_22E3C4C50(v132, v130, (uint64_t)v99);
        sub_22E3C4C50(v132, (uint64_t)v176, (uint64_t)v98);
        v281 = (llvm *)v164;
        v282 = v173;
        v283 = v170;
        v284 = v169;
        v285 = v132;
        v286 = v168;
        v133 = *(_QWORD *)&v301[8 * v82];
        if (v133)
        {
          v136 = (llvm::Value *)sub_22F281D00(v163, v133);
          v26 = v163;
          if (v136)
            v137 = *((_QWORD *)v136 + 3);
          else
            v137 = 0;
          v179 = 257;
          sub_22F24EEDC((uint64_t)v310, v137, v136, (uint64_t)&v281, 6, (uint64_t)v178);
        }
        else
        {
          v134 = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
          v179 = 257;
          sub_22E479C7C((uint64_t)v310, v134, v135, (uint64_t)&v281, 6, (uint64_t)v178);
          v26 = v163;
        }
        ++v82;
      }
      while (v82 < v292);
    }
    v281 = (llvm *)"omp.arraymap.next";
    LOWORD(v285) = 259;
    v138 = (uint64_t *)sub_22E4363E4(&v314, v158, v149, 1, (uint64_t)&v281);
    sub_22E3C4C50((llvm::PHINode *)v149, (uint64_t)v138, (uint64_t)v81);
    v281 = (llvm *)"omp.arraymap.isdone";
    LOWORD(v285) = 259;
    v139 = sub_22E3C18F4((uint64_t)&v314, 32, v138, v155, (uint64_t)&v281);
    v281 = (llvm *)"omp.arraymap.exit";
    LOWORD(v285) = 259;
    v140 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v141 = llvm::User::operator new((llvm::User *)0x40);
    MEMORY[0x23489C09C](v141, v140, v150, v139, 0);
    LOWORD(v285) = 257;
    (*(void (**)(uint64_t, uint64_t, llvm **, uint64_t, uint64_t))(*(_QWORD *)v319 + 16))(v319, v141, &v281, v316, v317);
    if (v315)
    {
      v142 = v314;
      v143 = v314 + 16 * v315;
      do
      {
        llvm::Instruction::setMetadata();
        v142 += 16;
      }
      while (v142 != v143);
    }
    sub_22E5ED9B4(v310, v140, 0);
    sub_22E5B3F00(v26, (uint64_t)v310, v164, v157, v156, v153, v161, v152, v159, (uint64_t)v151, 0);
    sub_22E5ED9B4(v310, v151, 1);
    sub_22E619DE8((uint64_t)v310, 0);
    sub_22F2543D4((uint64_t)&v281, v163 + 2576, &v280, &v217);
    if (v154)
    {
      v144 = sub_22F27C1CC(v26 + 2600, (uint64_t *)(v154 + 1624));
      v145 = v280;
      v146 = *((_DWORD *)v144 + 4);
      if (v146 >= *((_DWORD *)v144 + 5))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v146 = *((_DWORD *)v144 + 4);
      }
      *(_QWORD *)(v144[1] + 8 * v146) = v145;
      ++*((_DWORD *)v144 + 4);
    }
    llvm::deallocate_buffer(v188, (void *)(16 * v190));
    v147 = v185;
    v148 = v187;
    sub_22F284814((uint64_t)v185, v187);
    llvm::deallocate_buffer(v147, (void *)(88 * v148));
    llvm::deallocate_buffer(v182, (void *)(16 * v184));
    sub_22E5B45E0((uint64_t)&v288);
    sub_22F283FC4((uint64_t)v191);
    sub_22E619434((uint64_t)v310);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v219);
    if (v327 != v329)
      free(v327);
    if (v330[0] != v331)
      free(v330[0]);
  }
}

llvm::Value *sub_22E5B3F00(uint64_t a1, uint64_t a2, std::string *a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  const char *v14;
  uint64_t v15;
  _QWORD *v16;
  llvm::LLVMContext *v17;
  uint64_t v18;
  uint64_t v19;
  llvm::LLVMContext *v20;
  uint64_t v21;
  llvm::Constant **v22;
  uint64_t v23;
  llvm::LLVMContext *v24;
  uint64_t v25;
  llvm::Constant **v26;
  llvm::Type *v27;
  uint64_t NullValue;
  uint64_t v29;
  uint64_t v30;
  llvm::Type *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  llvm::Type *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  llvm::LLVMContext *v39;
  uint64_t v40;
  llvm::Instruction *v41;
  llvm::LLVMContext *v42;
  uint64_t v43;
  uint64_t v44;
  llvm::LLVMContext *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t RuntimeFunction;
  llvm::Value *v49;
  std::string __p;
  std::string *p_p;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  _QWORD v63[4];
  __int16 v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  if (a11)
    v14 = ".init";
  else
    v14 = ".del";
  v15 = 4;
  v63[0] = "omp.array";
  v63[1] = 9;
  if (a11)
    v15 = 5;
  v63[2] = v14;
  v63[3] = v15;
  sub_22F27BE70(&__p, a1, (uint64_t)v63, 2);
  LOWORD(v61) = 260;
  p_p = &__p;
  v16 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  llvm::Type::getInt64Ty(*(llvm::Type **)(a2 + 336), v17);
  v18 = llvm::ConstantInt::get();
  p_p = (std::string *)"omp.arrayinit.isarray";
  LOWORD(v61) = 259;
  v19 = sub_22E3C18F4(a2 + 272, 38, a6, v18, (uint64_t)&p_p);
  llvm::Type::getInt64Ty(*(llvm::Type **)(a2 + 336), v20);
  v21 = llvm::ConstantInt::get();
  LOWORD(v61) = 257;
  v22 = (llvm::Constant **)sub_22E3E49C4(a2 + 272, a7, v21, (uint64_t)&p_p);
  if (a11)
  {
    LOWORD(v61) = 257;
    v23 = sub_22E3C18F4(a2 + 272, 33, a4, a5, (uint64_t)&p_p);
    llvm::Type::getInt64Ty(*(llvm::Type **)(a2 + 336), v24);
    v25 = llvm::ConstantInt::get();
    LOWORD(v61) = 257;
    v26 = (llvm::Constant **)sub_22E3E49C4(a2 + 272, a7, v25, (uint64_t)&p_p);
    LOWORD(v61) = 257;
    NullValue = llvm::Constant::getNullValue(*v26, v27);
    v29 = sub_22E3C18F4(a2 + 272, 33, (uint64_t *)v26, NullValue, (uint64_t)&p_p);
    LOWORD(v61) = 257;
    v30 = sub_22E3E49C4(a2 + 272, v23, v29, (uint64_t)&p_p);
    LOWORD(v61) = 257;
    v19 = sub_22E3E58D4(a2 + 272, v19, v30, (uint64_t)&p_p);
    p_p = (std::string *)"omp.array";
    v58 = 9;
    v59 = ".init";
    v60 = 5;
    v61 = ".delete";
    v62 = 7;
    sub_22F27BE70(&__p, a1, (uint64_t)&p_p, 3);
    v64 = 260;
    v63[0] = &__p;
    v32 = llvm::Constant::getNullValue(*v22, v31);
    v33 = a2 + 272;
    v34 = 32;
  }
  else
  {
    p_p = (std::string *)"omp.array";
    v58 = 9;
    v59 = ".del";
    v60 = 4;
    v61 = ".delete";
    v62 = 7;
    sub_22F27BE70(&__p, a1, (uint64_t)&p_p, 3);
    v64 = 260;
    v63[0] = &__p;
    v32 = llvm::Constant::getNullValue(*v22, v35);
    v33 = a2 + 272;
    v34 = 33;
  }
  v36 = sub_22E3C18F4(v33, v34, (uint64_t *)v22, v32, (uint64_t)v63);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LOWORD(v61) = 257;
  v37 = sub_22E3E49C4(a2 + 272, v19, v36, (uint64_t)&p_p);
  v38 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x23489C09C](v38, v16, a10, v37, 0);
  LOWORD(v61) = 257;
  sub_22E3C12C8((uint64_t *)(a2 + 272), v38, (uint64_t)&p_p);
  sub_22E5ED9B4((_QWORD *)a2, v16, 0);
  llvm::Type::getInt64Ty(*(llvm::Type **)(a2 + 336), v39);
  v40 = llvm::ConstantInt::get();
  LOWORD(v61) = 257;
  v41 = sub_22E3BDEA8(a2 + 272, (uint64_t)a6, v40, (uint64_t)&p_p, 1, 0);
  llvm::Type::getInt64Ty(*(llvm::Type **)(a2 + 336), v42);
  v43 = llvm::ConstantInt::get();
  LOWORD(v61) = 257;
  v44 = sub_22E3E49C4(a2 + 272, a7, v43, (uint64_t)&p_p);
  llvm::Type::getInt64Ty(*(llvm::Type **)(a2 + 336), v45);
  v46 = llvm::ConstantInt::get();
  LOWORD(v61) = 257;
  v47 = sub_22E3E58D4(a2 + 272, v44, v46, (uint64_t)&p_p);
  p_p = a3;
  v58 = (uint64_t)a4;
  v59 = (const char *)a5;
  v60 = (uint64_t)v41;
  v61 = (const char *)v47;
  v62 = a8;
  RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
  v64 = 257;
  return sub_22E479C7C(a2, RuntimeFunction, v49, (uint64_t)&p_p, 6, (uint64_t)v63);
}

uint64_t sub_22E5B43B0(uint64_t a1, llvm::OpenMPIRBuilder *this, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t SrcLocStr;
  int v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  char *__s[2];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  int v20;
  __int128 *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  unsigned int v25;

  v25 = 0;
  v3 = *a3;
  v4 = a3[1];
  if (*(_OWORD *)a3 == 0)
    return llvm::OpenMPIRBuilder::getOrCreateDefaultSrcLocStr(this, &v25);
  if (v3)
  {
    v8 = *(_DWORD *)(v3 + 24);
    v23 = 0uLL;
    v24 = 0;
    if (!v4)
      goto LABEL_17;
LABEL_13:
    sub_22E462F04((unint64_t *)&v22, *(unsigned int **)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144) + 2000));
    LODWORD(__s[1]) = 0;
    v18 = 0;
    v19 = 0;
    v20 = 1;
    v16 = 0;
    v17 = 0;
    v15 = 0;
    __s[0] = (char *)(MEMORY[0x24BED83D8] + 16);
    v21 = &v23;
    llvm::raw_ostream::SetBufferAndMode();
    sub_22F0D9044((_DWORD *)a3[1], (uint64_t)__s, 0, &v22, 0, "\n", 1uLL, 0);
    if (v17 != v15)
      llvm::raw_ostream::flush_nonempty((llvm::raw_ostream *)__s);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)__s);
    goto LABEL_20;
  }
  if (v4)
  {
    v9 = sub_22EFFBBCC((unsigned __int8 *)a3[1]);
    if (*v9 == 191
      && (v10 = sub_22EFFA6B0(*((unsigned __int8 **)v9 + 2)), *v10 == 188)
      && (v11 = *((_QWORD *)v10 + 3)) != 0)
    {
      v8 = *(_DWORD *)(v11 + 24);
    }
    else
    {
      sub_22EFF605C(v4);
      v8 = v12;
    }
    v23 = 0uLL;
    v24 = 0;
    goto LABEL_13;
  }
  v8 = MEMORY[0x18];
  v23 = 0uLL;
  v24 = 0;
LABEL_17:
  sub_22EFC683C((uint64_t *)(v3 + 40), __s);
  if (SHIBYTE(v24) < 0)
    operator delete((void *)v23);
  v23 = *(_OWORD *)__s;
  v24 = v15;
LABEL_20:
  sub_22F1E2F68(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144) + 1992), v8, 1, (uint64_t)__s);
  if (__s[0])
    strlen(__s[0]);
  SrcLocStr = llvm::OpenMPIRBuilder::getOrCreateSrcLocStr();
  if (SHIBYTE(v24) < 0)
    operator delete((void *)v23);
  return SrcLocStr;
}

uint64_t sub_22E5B45E0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  sub_22F284870((char **)(a1 + 824));
  sub_22F284870((char **)(a1 + 616));
  sub_22F284870((char **)(a1 + 408));
  v2 = *(void **)(a1 + 360);
  if (v2 != (void *)(a1 + 376))
    free(v2);
  v3 = *(void **)(a1 + 304);
  if (v3 != (void *)(a1 + 320))
    free(v3);
  v4 = *(void **)(a1 + 256);
  if (v4 != (void *)(a1 + 272))
    free(v4);
  v5 = *(void **)(a1 + 208);
  if (v5 != (void *)(a1 + 224))
    free(v5);
  v6 = *(void **)(a1 + 160);
  if (v6 != (void *)(a1 + 176))
    free(v6);
  v7 = *(void **)(a1 + 80);
  if (v7 != (void *)(a1 + 96))
    free(v7);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  return a1;
}

void sub_22E5B46A4(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 *v6;
  int v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v18;
  __int128 v20;
  uint64_t v21;
  int v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (a2)
  {
    v6 = a2;
    v8 = *a2;
    if ((v8 - 21) > 0x40)
    {
LABEL_15:
      if (v8 == 182)
      {
        sub_22F3C638C((uint64_t)v6);
        v6 = *(unsigned __int8 **)&v6[8 * *((unsigned __int16 *)v6 + 2) + 32];
      }
      sub_22F0D492C((uint64_t)v6);
      v20 = v23;
      v14 = v25;
      v21 = v24;
      v15 = v26;
      while (1)
      {
        v16 = v20;
        if ((_QWORD)v20 == v14 && *((_QWORD *)&v20 + 1) == v15)
          break;
        if ((BYTE8(v20) & 3) != 0)
        {
          if ((*((_QWORD *)&v20 + 1) & 0xFFFFFFFFFFFFFFFCLL) != 0)
          {
            sub_22E5B46A4(a1, *(_QWORD *)((*((_QWORD *)&v20 + 1) & 0xFFFFFFFFFFFFFFFCLL) + 40), a3, a4);
            sub_22F0D8720((uint64_t)&v20);
          }
          else
          {
            v18 = (_QWORD *)sub_22F3AC1A8(*(_QWORD *)v20);
            sub_22E5B46A4(a1, *v18, a3, a4);
            sub_22F3F2FE0((uint64_t)&v20, 1);
          }
        }
        else
        {
          sub_22E5B46A4(a1, *(_QWORD *)v20, a3, a4);
          *(_QWORD *)&v20 = v16 + 8;
        }
      }
    }
    else
    {
      while (1)
      {
        v9 = *((_DWORD *)v6 + 2) - 56;
        v10 = v9 > 0x2A;
        v11 = (1 << v9) & 0x6000001CF91;
        if (!v10 && v11 != 0)
          break;
        v13 = (unsigned int *)*((_QWORD *)v6 + 3);
        if (!v13)
          return;
        if (!*((_BYTE *)v13 + 8))
          return;
        v6 = *(unsigned __int8 **)&v13[2 * *v13 + 4 + 2 * v13[1]];
        if (!v6)
          return;
        while (1)
        {
          v8 = *v6;
          if (v8 != 7)
            break;
          v6 = *(unsigned __int8 **)&v6[8 * *((unsigned int *)v6 + 2) + 32];
        }
        if ((v8 - 21) >= 0x41)
          goto LABEL_15;
      }
      v22 = 0;
      LODWORD(v23) = 0;
      LODWORD(v20) = 0;
      sub_22E5A029C(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 1992), *((_DWORD *)v6 + 3), &v23, &v20, &v22);
      if (sub_22E5A3158(*(_QWORD *)(a1 + 2888), *(_DWORD *)(a1 + 2904), v23, v20, a3, a4, v22, 0))
        __asm { BR              X10 }
    }
  }
}

void sub_22E5B48A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_22F292224(*(_QWORD *)(v2 + 8), v1, v0, v3);
  JUMPOUT(0x22E5B4854);
}

void sub_22E5B48BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_22F2923A4(*(_QWORD *)(v2 + 8), v1, v0, v3);
  JUMPOUT(0x22E5B4854);
}

void sub_22E5B48D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_22F293078(*(_QWORD *)(v2 + 8), v1, v0, v3);
  JUMPOUT(0x22E5B4854);
}

void sub_22E5B48EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_22F2930D8(*(_QWORD *)(v2 + 8), v1, v0, v3);
  JUMPOUT(0x22E5B4854);
}

void sub_22E5B4904()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_22F292B08(*(_QWORD *)(v2 + 8), v1, v0, v3);
  JUMPOUT(0x22E5B4854);
}

void sub_22E5B491C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_22F293138(*(_QWORD *)(v2 + 8), v1, v0, v3);
  JUMPOUT(0x22E5B4854);
}

void sub_22E5B4934()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_22F28F3F4(*(_QWORD *)(v2 + 8), v1, v0, v3);
  JUMPOUT(0x22E5B4854);
}

void sub_22E5B494C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_22F2922E4(*(_QWORD *)(v2 + 8), v1, v0, v3);
  JUMPOUT(0x22E5B4854);
}

void sub_22E5B4964()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_22F292344(*(_QWORD *)(v2 + 8), v1, v0, v3);
  JUMPOUT(0x22E5B4854);
}

void sub_22E5B497C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_22F292B68(*(_QWORD *)(v2 + 8), v1, v0, v3);
  JUMPOUT(0x22E5B4854);
}

uint64_t sub_22E5B4998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = a2 & 0xFFFFFFFFFFFFFFF8;
  v6 = (*(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 28) & 0x7Eu) - 58 < 0xFFFFFFFA || (a2 & 0xFFFFFFFFFFFFFFF8) == 0;
  if ((*(_BYTE *)(*(_QWORD *)(v4 + 152) + 76) & 8) != 0)
  {
    if (!v6)
    {
      v8 = sub_22E624994(v4, a2, a3);
      v10 = v9;
      v11 = (unsigned __int8 *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v5 + 64))(v5);
      sub_22E5B46A4(a1, v11, (uint64_t)v8, v10);
      v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 152) + 72);
      v13 = sub_22EF95D10(v5);
      if (v14)
      {
        v15 = *(_DWORD *)(v13 + 40);
        if ((v12 & 0x800000000) != 0)
        {
          if (!v15)
            return 1;
        }
        else if (v15 == 1)
        {
          return 1;
        }
      }
    }
    sub_22EF95D10(v5);
    if (v19)
      return 0;
    v20 = (uint64_t *)(a1 + 2952);
    if (v5)
      v21 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v5 + 32))(v5);
    else
      v21 = 0;
    v22 = v21;
    v23 = 0;
    return sub_22F275208(v20, &v22, &v23) ^ 1;
  }
  if (v6)
    return 0;
  v16 = sub_22EF95D10(a2 & 0xFFFFFFFFFFFFFFF8);
  if (v17)
    v18 = *(unsigned int *)(v16 + 40) | 0x100000000;
  else
    v18 = 0;
  if ((_DWORD)v18 == 1)
    return HIDWORD(v18);
  else
    return 0;
}

uint64_t sub_22E5B4AE0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  int v7;
  _QWORD *i;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  char v30;
  int v31;
  unint64_t v32;
  uint64_t v33[3];

  v3 = a2 & 0xFFFFFFFFFFFFFFF8;
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 152) + 72);
  v5 = sub_22EF95D10(a2 & 0xFFFFFFFFFFFFFFF8);
  if (v6)
  {
    v7 = *(_DWORD *)(v5 + 40);
    if ((v4 & 0x800000000) != 0)
    {
      if (!v7)
        return 1;
    }
    else if (v7 == 1)
    {
      return 1;
    }
  }
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 152) + 76) & 8) == 0)
    return 0;
  for (i = (_QWORD *)(v3 + 48); ; i = (_QWORD *)(v12 + 32))
  {
    v10 = *(_QWORD *)(*i & 0xFFFFFFFFFFFFFFF0);
    if (v10)
      v11 = (*(_DWORD *)(v10 + 16) & 0xFEu) - 6 > 0xFFFFFFFB;
    else
      v11 = 0;
    if (v11)
    {
      v12 = *(_QWORD *)(*i & 0xFFFFFFFFFFFFFFF0);
      continue;
    }
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3)
      break;
    v12 = sub_22F10CF48(v10);
    if (!v12)
      break;
  }
  v13 = sub_22F10C2A4(v10);
  if (v13)
  {
    v14 = v13;
    if ((*(_DWORD *)(v13 + 28) & 0x7Fu) - 35 <= 2)
    {
      v15 = sub_22F282248(v13);
      if (v15 != v16)
      {
        v17 = v15;
        v18 = v16;
        do
        {
          v19 = sub_22E624994(*(_QWORD *)(a1 + 8), v17 & 0xFFFFFFFFFFFFFFF8, 0);
          v21 = v20;
          v33[0] = 0;
          v22 = (unsigned __int8 *)sub_22EFBF910(v17, v33);
          sub_22E5B46A4(a1, v22, (uint64_t)v19, v21);
          do
            v17 = *(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF8;
          while (v17 && (*(_DWORD *)(v17 + 28) & 0x7F) != 0x37);
        }
        while (v17 != v18);
      }
      v23 = sub_22EFD10F8(v14);
      if (v23)
      {
        v24 = v23;
        v25 = sub_22E624994(*(_QWORD *)(a1 + 8), v23 & 0xFFFFFFFFFFFFFFF8 | 1, 0);
        v27 = v26;
        v28 = (unsigned __int8 *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v24 + 64))(v24);
        sub_22E5B46A4(a1, v28, (uint64_t)v25, v27);
      }
    }
  }
  v29 = sub_22EF95D10(v3);
  if (!v30)
  {
LABEL_29:
    v32 = v3;
    sub_22F25DBA4((uint64_t)v33, a1 + 3008, &v32);
    return 1;
  }
  v31 = *(_DWORD *)(v29 + 36);
  if (v31)
  {
    if (v31 == 1)
      goto LABEL_29;
  }
  else if (*(_BYTE *)(a1 + 4248))
  {
    goto LABEL_29;
  }
  return 0;
}

uint64_t sub_22E5B4D08(uint64_t result, unint64_t a2, uint64_t a3)
{
  llvm::Value *v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  size_t v11;
  int v12;
  const void *Name;
  size_t v14;
  size_t v15;
  uint64_t v16;
  int v17;
  llvm::Constant *v18;
  uint64_t v19;
  _BOOL4 v20;
  uint64_t v21;
  size_t v22;
  size_t v23;
  std::string __p;
  uint64_t v25;
  _QWORD v26[4];
  __int16 v27;
  uint64_t v28;

  v3 = (llvm::Value *)a3;
  v5 = result;
  v28 = *MEMORY[0x24BDAC8D0];
  v25 = a3;
  v6 = *(_QWORD *)(*(_QWORD *)(result + 8) + 152);
  if (*(_QWORD *)(v6 + 624) != *(_QWORD *)(v6 + 632) || (*(_BYTE *)(v6 + 76) & 8) != 0)
  {
    result = sub_22EF95D10(a2);
    if (!v7 || *(_DWORD *)(result + 40) == 2)
    {
      v8 = sub_22EF95D10(a2);
      if (!v9)
      {
        result = *(_QWORD *)(v5 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(result + 152) + 76) & 8) != 0)
        {
          v10 = sub_22E624994(result, a2, 0);
          return sub_22F282284((llvm::StringMapImpl *)(v5 + 2976), v10, v11, &v25);
        }
        return result;
      }
      v12 = *(_DWORD *)(v8 + 36);
      if (v12 || *(_BYTE *)(v5 + 4248))
      {
        v20 = v12 == 1;
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 152) + 76) & 8) != 0)
        {
          Name = (const void *)llvm::Value::getName(v3);
          v15 = v23;
          v3 = 0;
        }
        else
        {
          v21 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v5 + 304))(v5, a2);
          Name = (const void *)llvm::Value::getName((llvm::Value *)(v21 & 0xFFFFFFFFFFFFFFF8));
          v15 = v22;
          v3 = (llvm::Value *)((*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v5 + 304))(v5, a2) & 0xFFFFFFFFFFFFFFF8);
        }
        v25 = (uint64_t)v3;
        v16 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 8) + 130);
        v17 = 4;
        return sub_22F27F23C(v5 + 2872, Name, v15, (uint64_t)v3, v16, v20, v17);
      }
      Name = sub_22E624994(*(_QWORD *)(v5 + 8), a2, 0);
      v15 = v14;
      v16 = 0;
      if (sub_22EFBC498(a2, *(_QWORD *)(*(_QWORD *)(v5 + 8) + 144)))
      {
        sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 144), *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v26);
        v16 = v26[0];
      }
      v17 = sub_22F29B88C(*(_QWORD *)(v5 + 8), a2, 0);
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 152) + 76) & 8) == 0 || sub_22EFB948C(a2) > 2)
      {
LABEL_21:
        v20 = 0;
        return sub_22F27F23C(v5 + 2872, Name, v15, (uint64_t)v3, v16, v20, v17);
      }
      result = llvm::StringMapImpl::FindKey();
      if ((_DWORD)result != -1 && (int)result != (unint64_t)*(unsigned int *)(v5 + 2920))
      {
        v26[0] = Name;
        v26[1] = v15;
        v26[2] = "ref";
        v26[3] = 3;
        sub_22F27BE70(&__p, v5, (uint64_t)v26, 2);
        if (!llvm::Module::getNamedValue())
        {
          v18 = *(llvm::Constant **)v3;
          v27 = 260;
          v26[0] = &__p;
          v19 = sub_22F27D020(v5, v18, (llvm::Twine *)v26);
          *(_BYTE *)(v19 + 80) |= 1u;
          *(_DWORD *)(v19 + 32) = *(_DWORD *)(v19 + 32) & 0xFFFFBFC0 | 0x4007;
          llvm::GlobalVariable::setInitializer();
          sub_22E6242E0(*(uint64_t **)(v5 + 8), v19);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_21;
      }
    }
  }
  return result;
}

uint64_t sub_22E5B502C(_QWORD *a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;

  v2 = (*(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 28) & 0x7Eu) - 52 < 6
    || (*(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 28) & 0x7F) == 71;
  v3 = 456;
  if (v2)
    v3 = 448;
  return (*(uint64_t (**)(void))(*a1 + v3))();
}

uint64_t sub_22E5B5064(uint64_t result, uint64_t a2)
{
  unsigned int *v2;
  _DWORD *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v8;

  v2 = *(unsigned int **)(a2 + 40);
  v5 = *v2;
  v3 = v2 + 4;
  v4 = v5;
  if (v5)
  {
    v6 = 8 * v4;
    do
    {
      v7 = *(_DWORD *)(*(_QWORD *)v3 + 8);
      if (v7 == 9)
      {
        v8 = *(_DWORD *)(*(_QWORD *)v3 + 16);
        if (v8)
        {
          if (v8 == 2)
          {
            *(_DWORD *)(result + 4252) = 2;
          }
          else if (v8 == 1)
          {
            *(_DWORD *)(result + 4252) = 6;
          }
        }
        else
        {
          *(_DWORD *)(result + 4252) = 7;
        }
      }
      else if (v7 == 83)
      {
        *(_BYTE *)(result + 4248) = 1;
      }
      v3 += 2;
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_22E5B50EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  _QWORD v11[2];
  char v12;

  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 152) + 76) & 8) == 0 || !*(_BYTE *)(a1 + 2944))
    return 1;
  v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  sub_22EF95D10(a2 & 0xFFFFFFFFFFFFFFF8);
  if (!v7)
  {
    if (v6)
      v8 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v6 + 32))(v6);
    else
      v8 = 0;
    v10 = v8;
    sub_22F275184(a1 + 2952, &v10, (uint64_t)v11);
    return v12 == 0;
  }
  if (!(*(unsigned int (**)(unint64_t))(*(_QWORD *)v6 + 72))(v6))
    return 1;
  v10 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v6 + 32))(v6);
  v11[0] = 0;
  if ((sub_22F275208((uint64_t *)(a1 + 2952), &v10, v11) & 1) != 0)
    return 1;
  sub_22E624994(*(_QWORD *)(a1 + 8), a2, a3);
  result = llvm::Module::getNamedValue();
  if (result)
  {
    if (*(_BYTE *)(result + 16))
      return 0;
    else
      return llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)result) ^ 1;
  }
  return result;
}

llvm::Value *sub_22E5B522C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  llvm::Value *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int8x16_t v12;
  uint64_t RuntimeFunction;
  llvm::Value *v14;
  llvm::Value *v15;
  uint64_t v16;
  std::string __p;
  void *v18[2];
  __int128 v19;
  __int16 v20;
  _BYTE v21[6208];
  uint64_t v22;

  v0 = MEMORY[0x24BDAC7A8]();
  v22 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v1 + 152);
  if (*(_QWORD *)(v2 + 624) == *(_QWORD *)(v2 + 632))
    return 0;
  if ((*(_BYTE *)(v2 + 76) & 0xA) != 0)
    return 0;
  v3 = v0;
  if (!*(_DWORD *)(v0 + 2896) && !*(_DWORD *)(v0 + 2924) && !*(_BYTE *)(v0 + 4257) && !*(_BYTE *)(v0 + 4256))
    return 0;
  v6 = *(_QWORD *)(v1 + 144);
  sub_22E618EBC((uint64_t)v21, v1, 0);
  v8 = sub_22E46BBB8((_QWORD **)(*(_QWORD *)(v3 + 8) + 280), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 288) + 16392), 0, 0, 0, 0, 0, v7, 0, 0, -1);
  v9 = sub_22E46F2EC(*(_QWORD *)(v3 + 8) + 280, v8);
  *(_OWORD *)v18 = xmmword_24FA65AD0;
  v19 = *(_OWORD *)&off_24FA65AE0;
  sub_22F27BE70(&__p, v3, (uint64_t)v18, 2);
  v10 = *(_QWORD *)(v3 + 8);
  v20 = 260;
  v18[0] = &__p;
  v4 = sub_22E4CF82C(v10, v9, (uint64_t)v18, v8, 0, 0, 7);
  v11 = *(_QWORD *)(v6 + 16392);
  v18[0] = &v19;
  v12.i64[0] = 0x1000000000;
  v18[1] = (void *)0x1000000000;
  sub_22E61A8FC((uint64_t)v21, 0, 0, v11, v4, v8, (uint64_t *)v18, 0, v12, 0);
  if (v18[0] != &v19)
    free(v18[0]);
  RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
  v15 = v14;
  v16 = llvm::ConstantInt::get();
  v20 = 257;
  sub_22E479C7C((uint64_t)v21, RuntimeFunction, v15, (uint64_t)&v16, 1, (uint64_t)v18);
  sub_22E619DE8((uint64_t)v21, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  sub_22E619434((uint64_t)v21);
  return v4;
}

uint64_t sub_22E5B5498(uint64_t result, _BYTE *a2, _BYTE *a3)
{
  uint64_t v3;
  size_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;

  v3 = result;
  v4 = a3 - a2;
  v5 = *(unsigned int *)(result + 8);
  if (v5 + ((a3 - a2) >> 3) > (unint64_t)*(unsigned int *)(result + 12))
  {
    v6 = a3;
    v7 = a2;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    a3 = v6;
    a2 = v7;
    LODWORD(v5) = *(_DWORD *)(v3 + 8);
  }
  if (a2 != a3)
  {
    result = (uint64_t)memcpy((void *)(*(_QWORD *)v3 + 8 * v5), a2, v4);
    LODWORD(v5) = *(_DWORD *)(v3 + 8);
  }
  *(_DWORD *)(v3 + 8) = v5 + (v4 >> 3);
  return result;
}

unint64_t sub_22E5B5524(uint64_t a1, uint64_t a2, llvm::Value *a3)
{
  unint64_t result;
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  llvm::APInt *v27;
  unsigned int v28;
  llvm::APInt *v29;
  unsigned int v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t *v37;
  unsigned int v38;
  llvm::APInt *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned __int8 **v42;
  unsigned __int8 **v43;
  unsigned __int8 *v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  llvm *v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  unsigned __int8 **v53;
  unsigned __int8 **v54;
  unsigned __int8 **v55;
  unsigned __int8 *v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  llvm *v60;
  uint64_t v61;
  int v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  _BYTE *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  unsigned __int8 **v70;
  uint64_t *v71;
  unsigned __int8 *v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  llvm *v76;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t v80;
  char *v81;
  _DWORD *v82;
  _QWORD *v83;
  char *v84;
  char *v85;
  unsigned __int8 *v86;
  _DWORD *v87;
  uint64_t v88;
  uint64_t v89;
  llvm *v90;
  uint64_t v91;
  int v92;
  int v93;
  char v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t *v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  char v109;
  char *v110;
  char *v111;
  uint64_t v112;
  char v113;
  _QWORD *v114;
  _BYTE *v115;
  _QWORD *v116;
  char v117;
  _BYTE *v118;
  unsigned int v119;
  uint64_t v120;
  unint64_t v121;
  unsigned int v122;
  int v123;
  unint64_t v124;
  uint64_t i;
  unint64_t v126;
  unsigned int v127;
  uint64_t v128;
  unsigned int v129;
  BOOL v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  BOOL v134;
  int v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  BOOL v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t *v149;
  unsigned int v150;
  char *v151;
  char *v152;
  _BYTE *v153;
  llvm::raw_ostream *v154;
  char *v155;
  char v156;
  _BYTE *v157;
  llvm::APInt *v158;
  unsigned int v159;
  _BYTE *v160;
  llvm::raw_ostream *v161;
  _BYTE *v162;
  llvm::raw_ostream *v163;
  size_t v164;
  const void *Name;
  size_t v166;
  void *v167;
  const void *v168;
  size_t v169;
  size_t v170;
  char *v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  _DWORD *v178;
  char *v179;
  uint64_t v180;
  char *v181;
  unsigned __int8 **v182;
  int v183;
  unint64_t v184;
  void *v186;
  unsigned int v187;
  char v188;
  uint64_t v189;
  unsigned int v190;
  int v191;
  llvm *v192;
  uint64_t v193;
  unsigned int v194;
  uint64_t v195;
  unsigned int v196;
  char v197;
  _QWORD v198[3];
  unint64_t v199;
  _DWORD *v200;
  void *v201;
  uint64_t v202;
  uint64_t v203;
  _WORD v204[4];
  void *v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  void *v209[4];
  uint64_t v210;
  uint64_t v211;

  v211 = *MEMORY[0x24BDAC8D0];
  v180 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
  result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 112) + 104), *(_QWORD *)(a2 + 112));
  if (result)
  {
    v4 = result;
    do
    {
      v5 = v4;
      v6 = 0;
      v192 = 0;
      v193 = 0;
      v194 = 0;
      if ((*(_DWORD *)(v4 + 28) & 0x7Eu) - 54 <= 3)
      {
        v209[0] = (void *)v4;
        LODWORD(v198[0]) = 0;
        sub_22F282A84((uint64_t)&v205, (uint64_t)&v192, v209, v198);
        v6 = v193;
      }
      v191 = v6;
      v7 = *(uint64_t **)(v4 + 120);
      v184 = v5;
      v8 = *(_QWORD *)(*(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFFFF0);
      if (v8)
        v9 = *(_BYTE *)(v8 + 16) == 26;
      else
        v9 = 0;
      if (v9
        || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
        && (v8 = sub_22F10CF48(v8)) != 0)
      {
        v10 = *(_QWORD *)(v8 + 16);
        if ((v10 & 0x3FFFC000000000) != 0)
        {
          v11 = v6 + 1;
          v12 = 8 * (unsigned __int16)(v10 >> 38);
          do
          {
            v13 = *v7++;
            v209[0] = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
            sub_22F282A84((uint64_t)&v205, (uint64_t)&v192, v209, &v191);
            v191 = v11++;
            v12 -= 8;
          }
          while (v12);
        }
      }
      v14 = v184;
      v16 = (uint64_t *)sub_22F255ABC(v184);
      while (1)
      {
        v17 = v16;
        if (v16 >= v15)
        {
          if (v16 == v15)
            break;
          v18 = v15;
          while (*(_WORD *)(*v18 + 32) != 479)
          {
            if (++v18 == v16)
              goto LABEL_342;
          }
          v17 = v16;
        }
        else
        {
          while (*(_WORD *)(*v17 + 32) != 479)
          {
            if (++v17 == v15)
              goto LABEL_342;
          }
          v18 = v15;
        }
        if (v17 == v18)
          break;
        do
        {
          v20 = *v16++;
          v19 = v20;
        }
        while (*(_WORD *)(v20 + 32) != 479);
        v176 = v15;
        v21 = v193;
        v22 = v193;
        memset(v209, 0, sizeof(v209));
        LODWORD(v209[0]) = 3;
        LODWORD(v209[2]) = 1;
        v210 = 1;
        v205 = &v207;
        v206 = 0x800000000;
        if (v193 <= 8)
        {
          v37 = &v208;
          if ((_DWORD)v193)
          {
            do
            {
              v38 = v209[2];
              *((_DWORD *)v37 - 2) = v209[0];
              *((_DWORD *)v37 + 2) = v38;
              if (v38 > 0x40)
                llvm::APInt::initSlowCase((llvm::APInt *)v37, (const llvm::APInt *)&v209[1]);
              else
                *v37 = (uint64_t)v209[1];
              *((_BYTE *)v37 + 12) = BYTE4(v209[2]);
              v39 = (llvm::APInt *)(v37 + 2);
              v40 = v210;
              *((_DWORD *)v37 + 6) = v210;
              if (v40 > 0x40)
                llvm::APInt::initSlowCase(v39, (const llvm::APInt *)&v209[3]);
              else
                *(void **)v39 = v209[3];
              *((_BYTE *)v37 + 28) = BYTE4(v210);
              v37 += 5;
              --v21;
            }
            while (v21);
          }
          LODWORD(v206) = v22;
        }
        else
        {
          v198[0] = 0;
          v23 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow();
          v24 = 0;
          v25 = 40 * v21;
          do
          {
            v26 = &v23[v24];
            *(_DWORD *)v26 = v209[0];
            v27 = (llvm::APInt *)&v23[v24 + 8];
            v28 = v209[2];
            *((_DWORD *)v26 + 4) = v209[2];
            if (v28 > 0x40)
              llvm::APInt::initSlowCase(v27, (const llvm::APInt *)&v209[1]);
            else
              *(void **)v27 = v209[1];
            v26[20] = BYTE4(v209[2]);
            v29 = (llvm::APInt *)&v23[v24 + 24];
            v30 = v210;
            *((_DWORD *)v26 + 8) = v210;
            if (v30 > 0x40)
              llvm::APInt::initSlowCase(v29, (const llvm::APInt *)&v209[3]);
            else
              *(void **)v29 = v209[3];
            v26[36] = BYTE4(v210);
            v24 += 40;
          }
          while (v25 != v24);
          v31 = (char *)v205;
          if ((_DWORD)v206)
          {
            v32 = 40 * v206;
            do
            {
              v33 = &v31[v32];
              if (*(_DWORD *)&v31[v32 - 8] >= 0x41u)
              {
                v34 = *((_QWORD *)v33 - 2);
                if (v34)
                  MEMORY[0x2348A0E84](v34, 0x1000C8000313F17);
              }
              if (*((_DWORD *)v33 - 6) >= 0x41u)
              {
                v35 = *(_QWORD *)&v31[v32 - 32];
                if (v35)
                  MEMORY[0x2348A0E84](v35, 0x1000C8000313F17);
              }
              v32 -= 40;
            }
            while (v32);
            v31 = (char *)v205;
          }
          v36 = v198[0];
          if (v31 != (char *)&v207)
            free(v31);
          v205 = v23;
          v206 = __PAIR64__(v36, v22);
        }
        if (v210 >= 0x41 && v209[3])
          MEMORY[0x2348A0E84](v209[3], 0x1000C8000313F17);
        if (LODWORD(v209[2]) >= 0x41 && v209[1])
          MEMORY[0x2348A0E84](v209[1], 0x1000C8000313F17);
        v41 = *(unsigned int *)(v19 + 48);
        if ((_DWORD)v41)
        {
          v42 = *(unsigned __int8 ***)(v19 + 56);
          v43 = &v42[v41];
          do
          {
            v44 = sub_22EFFA6B0(*v42);
            if (*v44 == 133)
            {
              v209[0] = (void *)v184;
              v45 = *((_DWORD *)sub_22E4D1AD8((uint64_t *)&v192, v209) + 2);
            }
            else
            {
              v46 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v44 + 2) + 32))(*((_QWORD *)v44 + 2));
              if (v194)
              {
                LODWORD(v47) = ((v46 >> 4) ^ (v46 >> 9)) & (v194 - 1);
                v48 = (llvm *)((char *)v192 + 16 * v47);
                v49 = *(_QWORD *)v48;
                if (v46 != *(_QWORD *)v48)
                {
                  v50 = 1;
                  while (v49 != -4096)
                  {
                    v51 = v47 + v50++;
                    v47 = v51 & (v194 - 1);
                    v49 = *((_QWORD *)v192 + 2 * v47);
                    if (v46 == v49)
                    {
                      v48 = (llvm *)((char *)v192 + 16 * v47);
                      goto LABEL_75;
                    }
                  }
                  v48 = (llvm *)((char *)v192 + 16 * v194);
                }
              }
              else
              {
                v48 = v192;
              }
LABEL_75:
              v45 = *((_DWORD *)v48 + 2);
            }
            *((_DWORD *)v205 + 10 * v45) = 2;
            ++v42;
          }
          while (v42 != v43);
        }
        v52 = *(unsigned int *)(v19 + 64);
        if ((_DWORD)v52)
        {
          v53 = *(unsigned __int8 ***)(v19 + 72);
          v54 = &v53[v52];
          v55 = *(unsigned __int8 ***)(v19 + 88);
          do
          {
            v56 = sub_22EFFA6B0(*v53);
            if (*v56 == 133)
            {
              v209[0] = (void *)v184;
              v57 = *((_DWORD *)sub_22E4D1AD8((uint64_t *)&v192, v209) + 2);
            }
            else
            {
              v58 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v56 + 2) + 32))(*((_QWORD *)v56 + 2));
              if (v194)
              {
                LODWORD(v59) = ((v58 >> 4) ^ (v58 >> 9)) & (v194 - 1);
                v60 = (llvm *)((char *)v192 + 16 * v59);
                v61 = *(_QWORD *)v60;
                if (v58 != *(_QWORD *)v60)
                {
                  v62 = 1;
                  while (v61 != -4096)
                  {
                    v63 = v59 + v62++;
                    v59 = v63 & (v194 - 1);
                    v61 = *((_QWORD *)v192 + 2 * v59);
                    if (v58 == v61)
                    {
                      v60 = (llvm *)((char *)v192 + 16 * v59);
                      goto LABEL_90;
                    }
                  }
                  v60 = (llvm *)((char *)v192 + 16 * v194);
                }
              }
              else
              {
                v60 = v192;
              }
LABEL_90:
              v57 = *((_DWORD *)v60 + 2);
            }
            if (*v55)
            {
              sub_22F007D7C(*v55, v180, 0, (uint64_t)v209);
            }
            else
            {
              v64 = *(unsigned __int16 *)(*(_QWORD *)(v180 + 15088) + 96);
              v65 = sub_22EF5CDF0(v180, *(_QWORD *)(*(_QWORD *)(v180 + 16408) & 0xFFFFFFFFFFFFFFF0));
              LODWORD(v209[1]) = 64;
              v209[0] = (void *)(v64 / v65);
              BYTE4(v209[1]) = 1;
            }
            v66 = v205;
            v67 = (char *)v205 + 40 * v57;
            v68 = v67 + 24;
            if (*((_DWORD *)v67 + 8) >= 0x41u && *(_QWORD *)v68)
              MEMORY[0x2348A0E84](*(_QWORD *)v68, 0x1000C8000313F17);
            *(void **)v68 = v209[0];
            *((_DWORD *)v68 + 2) = v209[1];
            v66[40 * v57 + 36] = BYTE4(v209[1]);
            ++v55;
            ++v53;
          }
          while (v53 != v54);
        }
        v69 = *(unsigned int *)(v19 + 96);
        if ((_DWORD)v69)
        {
          v70 = *(unsigned __int8 ***)(v19 + 104);
          v182 = &v70[v69];
          v71 = *(uint64_t **)(v19 + 136);
          while (2)
          {
            v72 = sub_22EFFA6B0(*v70);
            if (*v72 == 133)
            {
              v209[0] = (void *)v184;
              v73 = *((_DWORD *)sub_22E4D1AD8((uint64_t *)&v192, v209) + 2);
            }
            else
            {
              v74 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v72 + 2) + 32))(*((_QWORD *)v72 + 2));
              if (v194)
              {
                LODWORD(v75) = ((v74 >> 4) ^ (v74 >> 9)) & (v194 - 1);
                v76 = (llvm *)((char *)v192 + 16 * v75);
                v77 = *(_QWORD *)v76;
                if (v74 != *(_QWORD *)v76)
                {
                  v78 = 1;
                  while (v77 != -4096)
                  {
                    v79 = v75 + v78++;
                    v75 = v79 & (v194 - 1);
                    v77 = *((_QWORD *)v192 + 2 * v75);
                    if (v74 == v77)
                    {
                      v76 = (llvm *)((char *)v192 + 16 * v75);
                      goto LABEL_113;
                    }
                  }
                  v76 = (llvm *)((char *)v192 + 16 * v194);
                }
              }
              else
              {
                v76 = v192;
              }
LABEL_113:
              v73 = *((_DWORD *)v76 + 2);
              v80 = *(_QWORD *)(*(_QWORD *)(v74 + 48) & 0xFFFFFFFFFFFFFFF0);
              if (v80 && *(_BYTE *)(v80 + 16) == 39)
                sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(*(_QWORD *)(v80 + 32) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v209);
            }
            v81 = (char *)v205;
            v82 = (char *)v205 + 40 * v73;
            *v82 = 1;
            v83 = v82 + 2;
            if (v82[4] >= 0x41u && *v83)
              MEMORY[0x2348A0E84](*v83, 0x1000C8000313F17);
            *v83 = 1;
            v82[4] = 64;
            v84 = &v81[40 * v73];
            v84[20] = 1;
            v85 = v84 + 20;
            if (!*v71)
              goto LABEL_143;
            LOWORD(v209[0]) = 0;
            v209[1] = 0;
            LODWORD(v209[2]) = 0;
            if (sub_22F00554C(*v71, (uint64_t)v209, v180, 2, 0))
            {
              if (v82[4] > 0x40u || v210 > 0x40)
              {
                llvm::APInt::assignSlowCase((llvm::APInt *)(v82 + 2), (const llvm::APInt *)&v209[3]);
              }
              else
              {
                *v83 = v209[3];
                v82[4] = v210;
              }
              v94 = BYTE4(v210);
              goto LABEL_140;
            }
            v86 = sub_22EFFA6B0((unsigned __int8 *)*v71);
            if (v86)
            {
              v87 = (_DWORD *)*((_QWORD *)v86 + 2);
              if (v87)
              {
                if ((v87[7] & 0x7F) == 0x40)
                {
                  *v82 = 0;
                  v88 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v87 + 32))(v87);
                  if (v194)
                  {
                    LODWORD(v89) = ((v88 >> 4) ^ (v88 >> 9)) & (v194 - 1);
                    v90 = (llvm *)((char *)v192 + 16 * v89);
                    v91 = *(_QWORD *)v90;
                    if (v88 != *(_QWORD *)v90)
                    {
                      v92 = 1;
                      while (v91 != -4096)
                      {
                        v93 = v89 + v92++;
                        v89 = v93 & (v194 - 1);
                        v91 = *((_QWORD *)v192 + 2 * v89);
                        if (v88 == v91)
                        {
                          v90 = (llvm *)((char *)v192 + 16 * v89);
                          goto LABEL_136;
                        }
                      }
                      v90 = (llvm *)((char *)v192 + 16 * v194);
                    }
                  }
                  else
                  {
                    v90 = v192;
                  }
LABEL_136:
                  v95 = *((unsigned int *)v90 + 2);
                  if (v82[4] >= 0x41u && *v83)
                    MEMORY[0x2348A0E84](*v83, 0x1000C8000313F17);
                  *v83 = v95;
                  v82[4] = 64;
                  v94 = 1;
LABEL_140:
                  *v85 = v94;
                }
              }
            }
            if (LODWORD(v209[2]) >= 2)
              sub_22EF53BC0((uint64_t *)&v209[2]);
LABEL_143:
            if (*v82 == 1)
            {
              v190 = v82[4];
              if (v190 > 0x40)
                llvm::APInt::initSlowCase((llvm::APInt *)&v189, (const llvm::APInt *)(v82 + 2));
              else
                v189 = *v83;
              llvm::APInt::operator*=();
              v96 = v190;
              v97 = v189;
              v190 = 0;
              if (*((_DWORD *)v83 + 2) >= 0x41u && *v83)
                MEMORY[0x2348A0E84](*v83, 0x1000C8000313F17);
              *v83 = v97;
              *((_DWORD *)v83 + 2) = v96;
              if (v190 >= 0x41 && v189)
                MEMORY[0x2348A0E84](v189, 0x1000C8000313F17);
            }
            ++v71;
            if (++v70 == v182)
              break;
            continue;
          }
        }
        v98 = 1;
        v187 = 1;
        v186 = 0;
        v188 = 0;
        v99 = *(_QWORD *)(v19 + 40);
        if (v99)
        {
          sub_22F007D7C(*(unsigned __int8 **)(v19 + 40), v180, 0, (uint64_t)v209);
          if (v187 >= 0x41 && v186)
            MEMORY[0x2348A0E84](v186, 0x1000C8000313F17);
          v100 = (uint64_t *)v209[0];
          v186 = v209[0];
          v98 = v209[1];
          v187 = v209[1];
          v101 = BYTE4(v209[1]);
          v188 = BYTE4(v209[1]);
          sub_22EFF605C(v99);
          v103 = v102;
        }
        else
        {
          v100 = 0;
          v101 = 0;
          v103 = 0;
        }
        v104 = *(_DWORD *)(v19 + 36);
        v105 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 56);
        if ((v105 - 41) <= 1)
        {
          v183 = v206;
          v201 = v204;
          v203 = 2;
          if (v104 == 2)
          {
            v109 = 78;
          }
          else
          {
            if (v104 != 1)
            {
              if (v104)
                goto LABEL_326;
              v204[0] = 19790;
              v106 = 2;
LABEL_176:
              v202 = v106;
              v110 = (char *)v204;
              v178 = v205;
              v179 = (char *)v204 + v106;
              v111 = (char *)v205 + 40 * v206;
              v181 = (char *)v205 + 20;
LABEL_177:
              v112 = 0;
              v113 = *v110;
LABEL_178:
              v209[0] = &v209[3];
              *(_OWORD *)&v209[1] = xmmword_22F44E320;
              sub_22F242C48((uint64_t)v198, (uint64_t)v209);
              if (v199 - (unint64_t)v200 > 3)
              {
                *v200 = 1447516767;
                v115 = ++v200;
                v114 = v198;
                v116 = &v200;
              }
              else
              {
                v114 = (_QWORD *)llvm::raw_ostream::write((llvm::raw_ostream *)v198, "_ZGV");
                v116 = v114 + 4;
                v115 = (_BYTE *)v114[4];
              }
              v117 = *((_BYTE *)&unk_22F45B120 + 8 * v112);
              if ((unint64_t)v115 >= v114[3])
              {
                v114 = (_QWORD *)llvm::raw_ostream::write((llvm::raw_ostream *)v114);
              }
              else
              {
                *v116 = v115 + 1;
                *v115 = v117;
              }
              v118 = (_BYTE *)v114[4];
              if ((unint64_t)v118 >= v114[3])
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)v114);
              }
              else
              {
                v114[4] = v118 + 1;
                *v118 = v113;
              }
              v119 = v187;
              if (v187 > 0x40)
              {
                if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v186) != v119)
                {
LABEL_188:
                  llvm::APInt::print((llvm::APInt *)&v186, (llvm::raw_ostream *)v198);
                  goto LABEL_274;
                }
              }
              else if (v186)
              {
                goto LABEL_188;
              }
              v120 = *(_QWORD *)(*(_QWORD *)(v184 + 48) & 0xFFFFFFFFFFFFFFF0);
              if (!v120 || *(unsigned __int8 *)(v120 + 16) - 27 <= 0xFFFFFFFD)
                v120 = sub_22F10CF48(v120);
              v121 = *(_QWORD *)(v120 + 24);
              if (v121 < 0x10)
              {
                v122 = 0;
                goto LABEL_271;
              }
              v123 = *(_DWORD *)(v184 + 28);
              v124 = v184;
              if ((v123 & 0x7F) == 0x53)
                goto LABEL_220;
              for (i = *(_QWORD *)(v184 + 16); ; i = *(_QWORD *)(v126 + v128 + 16))
              {
                v126 = i & 0xFFFFFFFFFFFFFFF8;
                if ((i & 4) != 0)
                  v126 = *(_QWORD *)v126;
                v127 = *(_WORD *)(v126 + 8) & 0x7F;
                if (v127 == 83)
                {
                  v124 = v126 - 40;
LABEL_220:
                  v132 = *(_QWORD *)(v124 + 88);
                  v133 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v121 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
                  if (v133)
                    v134 = (*(_DWORD *)(v133 + 16) & 0xFF800FF) == 86507531;
                  else
                    v134 = 0;
                  if (v134)
                  {
                    if ((v123 & 0x7Eu) - 58 < 0xFFFFFFFC)
                    {
                      v135 = 0;
                      v121 = 0;
                      goto LABEL_252;
                    }
                    if (*v178 == 3)
                    {
                      v136 = *(_WORD *)(v184 + 80) & 0x7F;
                      v137 = -40;
                      if (v136 > 0x46)
                      {
                        if (v136 != 83)
                        {
                          if (v136 == 71)
                          {
                            v137 = -56;
                          }
                          else if (v136 != 81)
                          {
                            goto LABEL_241;
                          }
                        }
                      }
                      else
                      {
                        if (v136 > 0x18)
                          goto LABEL_240;
                        if (v136 == 16)
                          goto LABEL_231;
                        if (((1 << v136) & 0x1066) == 0)
                        {
                          if (v136 != 24)
                          {
LABEL_240:
                            if (v136 == 70)
                              goto LABEL_243;
LABEL_241:
                            if (v136 - 52 < 6)
                            {
                              v137 = -72;
                              goto LABEL_245;
                            }
                            if (v136 - 33 < 5)
                            {
LABEL_243:
                              v137 = -64;
                              goto LABEL_245;
                            }
                          }
LABEL_231:
                          v137 = -48;
                        }
                      }
LABEL_245:
                      v138 = *(_QWORD *)(v184 + 88 + v137);
                      v139 = (_QWORD *)(v138 & 0xFFFFFFFFFFFFFFF8);
                      if ((v138 & 4) != 0)
                        v139 = (_QWORD *)*v139;
                      if (v139)
                        v140 = (uint64_t)(v139 - 8);
                      else
                        v140 = 0;
                      v141 = sub_22EF6477C(v132, v140);
                      v121 = sub_22EF5B848(v132, v141, 0);
                      if (v121 > 0xF)
                        goto LABEL_263;
                    }
                    else
                    {
                      v121 = 0;
                    }
                    v135 = 1;
LABEL_252:
                    v142 = *(_QWORD *)(*(_QWORD *)(v184 + 48) & 0xFFFFFFFFFFFFFFF0);
                    if (v142)
                      v143 = *(_BYTE *)(v142 + 16) == 26;
                    else
                      v143 = 0;
                    if (v143
                      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v142 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
                      && (v142 = sub_22F10CF48(v142)) != 0)
                    {
                      v144 = *(_QWORD *)(v142 + 16);
                      if ((v144 & 0x3FFFC000000000) != 0)
                      {
                        v145 = 0;
                        v146 = (unsigned __int16)(v144 >> 38);
                        while (v178[10 * (v135 + v145)] != 3)
                        {
                          if (v146 == ++v145)
                            goto LABEL_263;
                        }
                        v121 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v184 + 120) + 8 * v145) + 48);
                      }
                    }
                  }
LABEL_263:
                  v147 = *(_QWORD *)(v132 + 16480);
                  if (v121 >= 0x10)
                    v148 = v121;
                  else
                    v148 = *(_QWORD *)(v132 + 16480);
                  v149 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v148 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
                  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v149 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45)
                  {
LABEL_269:
                    v149 = (uint64_t *)(v147 & 0xFFFFFFFFFFFFFFF0);
                  }
                  else if (sub_22F10E06C(*v149))
                  {
                    v147 = *(_QWORD *)(v132 + 16480);
                    goto LABEL_269;
                  }
                  v122 = sub_22EF5CDF0(v132, *v149);
LABEL_271:
                  v150 = *((_DWORD *)&unk_22F45B120 + 2 * v112 + 1);
                  v196 = 64;
                  v195 = v150 / v122;
                  v197 = 1;
                  llvm::APInt::print((llvm::APInt *)&v195, (llvm::raw_ostream *)v198);
                  if (v196 >= 0x41 && v195)
                    MEMORY[0x2348A0E84](v195, 0x1000C8000313F17);
LABEL_274:
                  v151 = v181;
                  if (v183)
                  {
                    while (2)
                    {
                      v152 = v151 - 20;
                      switch(*((_DWORD *)v151 - 5))
                      {
                        case 0:
                          v153 = v200;
                          if ((unint64_t)v200 >= v199)
                          {
                            v154 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)v198);
                          }
                          else
                          {
                            v200 = (_DWORD *)((char *)v200 + 1);
                            *v153 = 115;
                            v154 = (llvm::raw_ostream *)v198;
                          }
                          v158 = (llvm::APInt *)(v151 - 12);
                          goto LABEL_291;
                        case 1:
                          v157 = v200;
                          if ((unint64_t)v200 >= v199)
                          {
                            llvm::raw_ostream::write((llvm::raw_ostream *)v198);
                          }
                          else
                          {
                            v200 = (_DWORD *)((char *)v200 + 1);
                            *v157 = 108;
                          }
                          if (sub_22E508590((uint64_t)(v151 - 12), 1))
                          {
                            v154 = (llvm::raw_ostream *)v198;
                            v158 = (llvm::APInt *)(v151 - 12);
LABEL_291:
                            llvm::APInt::print(v158, v154);
                          }
                          goto LABEL_292;
                        case 2:
                          v155 = (char *)v200;
                          if ((unint64_t)v200 >= v199)
                            goto LABEL_285;
                          v200 = (_DWORD *)((char *)v200 + 1);
                          v156 = 117;
                          goto LABEL_282;
                        case 3:
                          v155 = (char *)v200;
                          if ((unint64_t)v200 >= v199)
                          {
LABEL_285:
                            llvm::raw_ostream::write((llvm::raw_ostream *)v198);
                          }
                          else
                          {
                            v200 = (_DWORD *)((char *)v200 + 1);
                            v156 = 118;
LABEL_282:
                            *v155 = v156;
                          }
LABEL_292:
                          v159 = *((_DWORD *)v151 + 3);
                          if (v159 > 0x40)
                          {
                            if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v151 + 4)) == v159)
                              goto LABEL_300;
                          }
                          else if (!*(_QWORD *)(v151 + 4))
                          {
                            goto LABEL_300;
                          }
                          v160 = v200;
                          if ((unint64_t)v200 >= v199)
                          {
                            v161 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)v198);
                          }
                          else
                          {
                            v200 = (_DWORD *)((char *)v200 + 1);
                            *v160 = 97;
                            v161 = (llvm::raw_ostream *)v198;
                          }
                          llvm::APInt::print((llvm::APInt *)(v151 + 4), v161);
LABEL_300:
                          v151 += 40;
                          if (v152 + 40 == v111)
                            break;
                          continue;
                        default:
                          goto LABEL_292;
                      }
                      break;
                    }
                  }
                  v162 = v200;
                  if ((unint64_t)v200 >= v199)
                  {
                    v163 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)v198);
                  }
                  else
                  {
                    v200 = (_DWORD *)((char *)v200 + 1);
                    *v162 = 95;
                    v163 = (llvm::raw_ostream *)v198;
                  }
                  Name = (const void *)llvm::Value::getName(a3);
                  v166 = v164;
                  v167 = (void *)*((_QWORD *)v163 + 4);
                  if (v164 <= *((_QWORD *)v163 + 3) - (_QWORD)v167)
                  {
                    if (v164)
                    {
                      memcpy(v167, Name, v164);
                      *((_QWORD *)v163 + 4) += v166;
                    }
                  }
                  else
                  {
                    llvm::raw_ostream::write(v163, (const char *)Name);
                  }
                  llvm::Function::addFnAttr();
                  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v198);
                  if (v209[0] != &v209[3])
                    free(v209[0]);
                  if (++v112 == 4)
                  {
                    if (++v110 == v179)
                    {
                      if (v201 != v204)
                        free(v201);
                      goto LABEL_326;
                    }
                    goto LABEL_177;
                  }
                  goto LABEL_178;
                }
                v128 = -40;
                if ((*(_WORD *)(v126 + 8) & 0x7Fu) > 0x46)
                {
                  if (v127 == 71)
                  {
                    v128 = -56;
                    continue;
                  }
                  if (v127 != 81)
                    goto LABEL_210;
                }
                else
                {
                  if (v127 > 0x18)
                    goto LABEL_209;
                  if (v127 == 16)
                    goto LABEL_203;
                  if (((1 << v127) & 0x1066) == 0)
                  {
                    if (v127 == 24)
                    {
LABEL_203:
                      v128 = -48;
                      continue;
                    }
LABEL_209:
                    if (v127 == 70)
                    {
                      v128 = -64;
                      continue;
                    }
LABEL_210:
                    v129 = v127 - 52;
                    v130 = v127 - 33 >= 5;
                    v131 = -64;
                    if (v130)
                      v131 = -48;
                    v130 = v129 >= 6;
                    v128 = -72;
                    if (v130)
                      v128 = v131;
                    continue;
                  }
                }
              }
            }
            v109 = 77;
          }
          LOBYTE(v204[0]) = v109;
          v106 = 1;
          goto LABEL_176;
        }
        if (v105 == 3)
        {
          if (v101)
          {
            v107 = (uint64_t *)&v186;
            if (v98 >= 0x41)
              v107 = v100;
            v108 = *v107;
          }
          else if (v98 > 0x40)
          {
            v108 = *v100;
          }
          else
          {
            v108 = (uint64_t)((_QWORD)v100 << -(char)v98) >> -(char)v98;
          }
          v168 = (const void *)llvm::Value::getName(a3);
          v170 = v169;
          if ((*(unsigned int (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 216)
                                                                             + 568))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216), "sve", 3))
          {
            sub_22E5B6A44(*(_QWORD *)(a1 + 8), v184, v108, (unsigned int *)v205, v206, v104, v168, v170, 115, (uint64_t)a3, v103);
          }
          if ((*(unsigned int (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 216)
                                                                             + 568))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216), "neon", 4))
          {
            sub_22E5B6A44(*(_QWORD *)(a1 + 8), v184, v108, (unsigned int *)v205, v206, v104, v168, v170, 110, (uint64_t)a3, v103);
          }
        }
LABEL_326:
        if (v187 >= 0x41 && v186)
          MEMORY[0x2348A0E84](v186, 0x1000C8000313F17);
        v171 = (char *)v205;
        if ((_DWORD)v206)
        {
          v172 = 40 * v206;
          do
          {
            v173 = &v171[v172];
            if (*(_DWORD *)&v171[v172 - 8] >= 0x41u)
            {
              v174 = *((_QWORD *)v173 - 2);
              if (v174)
                MEMORY[0x2348A0E84](v174, 0x1000C8000313F17);
            }
            if (*((_DWORD *)v173 - 6) >= 0x41u)
            {
              v175 = *(_QWORD *)&v171[v172 - 32];
              if (v175)
                MEMORY[0x2348A0E84](v175, 0x1000C8000313F17);
            }
            v172 -= 40;
          }
          while (v172);
          v171 = (char *)v205;
        }
        if (v171 != (char *)&v207)
          free(v171);
        v14 = v184;
        v15 = v176;
      }
LABEL_342:
      if ((*(_BYTE *)(v14 + 104) & 3) != 0)
        v4 = 0;
      else
        v4 = sub_22E3CD31C((uint64_t *)(v14 + 104), v14);
      result = llvm::deallocate_buffer(v192, (void *)(16 * v194));
    }
    while (v4);
  }
  return result;
}

void sub_22E5B6A44(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, int a6, const void *a7, size_t a8, char a9, uint64_t a10, int a11)
{
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int i;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int8x8_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  int *v44;
  unsigned int *v45;
  uint64_t v46;
  char *v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  char *v53;
  unsigned int v54;
  unsigned int v55;
  BOOL v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint8x8_t v61;
  int v62;
  uint64_t v63;
  int v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int *v68;
  unsigned int *v69;
  llvm::raw_ostream *v70;
  llvm::APInt *v71;
  char *v72;
  char v73;
  _BYTE *v74;
  unsigned int v75;
  _BYTE *v76;
  llvm::raw_ostream *v77;
  size_t v78;
  const void *v79;
  void **p_dst;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void **v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void **v90;
  size_t v91;
  const char *v92;
  uint64_t v93;
  char v94;
  void **v95;
  size_t v96;
  void **v97;
  size_t v98;
  const char *v99;
  int v100;
  char v101;
  const void *v102;
  size_t v103;
  void **v104;
  size_t v105;
  const void *v106;
  size_t v107;
  unsigned __int8 *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void **v112;
  void **v113;
  size_t v114;
  void **v115;
  _BYTE *v116;
  void **v117;
  _BYTE *v118;
  _BYTE *v119;
  _BYTE *v120;
  void **v121;
  void *v122;
  uint64_t v123;
  void **__dst;
  size_t v128;
  int64_t v129;
  _QWORD v130[3];
  __int16 v131;
  _QWORD v132[3];
  __int16 v133;
  _BYTE v134[24];
  void *v135;
  void *v136[4];
  uint64_t v137;
  void *v138;
  __int128 v139;
  _WORD v140[128];
  uint64_t v141;

  v141 = *MEMORY[0x24BDAC8D0];
  v16 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v16)
    v17 = *(unsigned __int8 *)(v16 + 16) - 27 > 0xFFFFFFFD;
  else
    v17 = 0;
  if (!v17)
    v16 = sub_22F10CF48(v16);
  v18 = *(_QWORD *)(v16 + 24);
  v19 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFF0) + 8);
  v20 = a2;
  if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x53)
  {
    v21 = *(_QWORD *)(a2 + 16);
    v22 = v21 & 0xFFFFFFFFFFFFFFF8;
    if ((v21 & 4) != 0)
      v22 = *(_QWORD *)v22;
    for (i = *(_WORD *)(v22 + 8) & 0x7F; i != 83; i = *(_WORD *)(v22 + 8) & 0x7F)
    {
      v24 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v24 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_20;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_19;
        if (i == 16)
          goto LABEL_13;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_26;
        if (i == 24)
        {
LABEL_13:
          v24 = -48;
        }
        else
        {
LABEL_19:
          if (i != 70)
          {
LABEL_20:
            v25 = i - 52;
            if ((i - 33) >= 5)
              v26 = -48;
            else
              v26 = -64;
            if (v25 >= 6)
              v24 = v26;
            else
              v24 = -72;
            goto LABEL_26;
          }
          v24 = -64;
        }
      }
LABEL_26:
      v27 = *(_QWORD *)(v22 + v24 + 16);
      v22 = v27 & 0xFFFFFFFFFFFFFFF8;
      if ((v27 & 4) != 0)
        v22 = *(_QWORD *)v22;
    }
    v20 = v22 - 40;
  }
  v28 = *(_QWORD *)(v20 + 88);
  v138 = (char *)&v139 + 8;
  v29.i32[1] = 8;
  *(_QWORD *)&v139 = 0x800000000;
  v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v30)
    v31 = (*(_DWORD *)(v30 + 16) & 0xFF800FF) == 86507531;
  else
    v31 = 0;
  if (!v31)
  {
    v32 = v18 & 7 | v19;
    *((_DWORD *)v138 + v139) = sub_22E5C3D7C(v32, 3u, v28);
    LODWORD(v139) = v139 + 1;
    sub_22E5C3E24(v32, v28);
  }
  v33 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if ((v33 && *(_BYTE *)(v33 + 16) == 26
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v33 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
     && (v33 = sub_22F10CF48(v33)) != 0)
    && (v34 = *(_QWORD *)(v33 + 16), (v34 & 0x3FFFC000000000) != 0))
  {
    v123 = a1;
    v36 = a3;
    v37 = 0;
    v38 = (unsigned __int16)(v34 >> 38);
    v39 = a4;
    do
    {
      v40 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 120) + 8 * v37) + 48);
      v41 = *a4;
      a4 += 10;
      v42 = sub_22E5C3D7C(v40 & 7 | *(_QWORD *)((v40 & 0xFFFFFFFFFFFFFFF0) + 8), v41, v28);
      v43 = v139;
      if (v139 >= (unint64_t)DWORD1(v139))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v43 = v139;
      }
      *((_DWORD *)v138 + v43) = v42;
      v35 = v139 + 1;
      LODWORD(v139) = v139 + 1;
      ++v37;
    }
    while (v38 != v37);
    a4 = v39;
    a3 = v36;
    a1 = v123;
  }
  else
  {
    v35 = v139;
  }
  v44 = (int *)v138;
  v45 = (unsigned int *)v138;
  if (v35)
  {
    v46 = v35;
    v44 = (int *)v138;
    v45 = (unsigned int *)v138;
    if (v35 != 1)
    {
      v47 = (char *)v138 + 4;
      v48 = *(_DWORD *)v138;
      v49 = 4 * v46;
      v50 = 4;
      v51 = *(_DWORD *)v138;
      v44 = (int *)v138;
      do
      {
        if (*(_DWORD *)((char *)v138 + v50) < v51)
        {
          v51 = *(_DWORD *)((char *)v138 + v50);
          v44 = (int *)((char *)v138 + v50);
        }
        v50 += 4;
      }
      while (v49 != v50);
      v52 = v49 - 4;
      v45 = (unsigned int *)v138;
      v53 = (char *)v138 + 4;
      do
      {
        v55 = *(_DWORD *)v53;
        v53 += 4;
        v54 = v55;
        v56 = v48 >= v55;
        if (v48 <= v55)
          v48 = v54;
        if (!v56)
          v45 = (unsigned int *)v47;
        v47 = v53;
        v52 -= 4;
      }
      while (v52);
    }
  }
  v57 = *v44;
  v58 = *v45;
  if (v138 != (char *)&v139 + 8)
    free(v138);
  if ((_DWORD)a3 == 1)
  {
    v59 = sub_22F41A810(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 32), 3, "The clause simdlen(1) has no effect when targeting aarch64.", 0x3BuLL);
    v60 = *(_QWORD *)(a1 + 208);
    *(_DWORD *)(v60 + 312) = a11;
    *(_DWORD *)(v60 + 316) = v59;
    if (*(char *)(v60 + 311) < 0)
    {
      **(_BYTE **)(v60 + 288) = 0;
      *(_QWORD *)(v60 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v60 + 288) = 0;
      *(_BYTE *)(v60 + 311) = 0;
    }
    v132[0] = v60 + 320;
    v132[1] = 0;
    v132[2] = v60;
    v133 = 1;
    *(_BYTE *)(v60 + 320) = 0;
    *(_DWORD *)(v60 + 664) = 0;
    v81 = *(unsigned int *)(v60 + 776);
    if ((_DWORD)v81)
    {
      v82 = *(_QWORD *)(v60 + 768);
      v83 = 56 * v81;
      do
      {
        if (*(char *)(v82 + v83 - 9) < 0)
          operator delete(*(void **)(v82 + v83 - 32));
        v83 -= 56;
      }
      while (v83);
    }
    *(_DWORD *)(v60 + 776) = 0;
    v84 = (void **)v132;
LABEL_124:
    sub_22E3BB0B8((uint64_t)v84);
    return;
  }
  if ((_DWORD)a3)
  {
    if (a9 == 110)
    {
      v29.i32[0] = a3;
      v61 = (uint8x8_t)vcnt_s8(v29);
      v61.i16[0] = vaddlv_u8(v61);
      if (v61.i32[0] >= 2u)
      {
        v62 = sub_22F41A810(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 32), 3, "The value specified in simdlen must be a power of 2 when targeting Advanced SIMD.", 0x51uLL);
        v63 = *(_QWORD *)(a1 + 208);
        *(_DWORD *)(v63 + 312) = a11;
        *(_DWORD *)(v63 + 316) = v62;
        if (*(char *)(v63 + 311) < 0)
        {
          **(_BYTE **)(v63 + 288) = 0;
          *(_QWORD *)(v63 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v63 + 288) = 0;
          *(_BYTE *)(v63 + 311) = 0;
        }
        v130[0] = v63 + 320;
        v130[1] = 0;
        v130[2] = v63;
        v131 = 1;
        *(_BYTE *)(v63 + 320) = 0;
        *(_DWORD *)(v63 + 664) = 0;
        v85 = *(unsigned int *)(v63 + 776);
        if ((_DWORD)v85)
        {
          v86 = *(_QWORD *)(v63 + 768);
          v87 = 56 * v85;
          do
          {
            if (*(char *)(v86 + v87 - 9) < 0)
              operator delete(*(void **)(v86 + v87 - 32));
            v87 -= 56;
          }
          while (v87);
        }
        *(_DWORD *)(v63 + 776) = 0;
        v84 = (void **)v130;
        goto LABEL_124;
      }
    }
  }
  if ((_DWORD)a3 && a9 == 115 && ((v58 * a3) > 0x800 || (((_DWORD)v58 * (_DWORD)a3) & 0x7F) != 0))
  {
    v65 = sub_22F41A810(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 32), 3, "The clause simdlen must fit the %0-bit lanes in the architectural constraints for SVE (min is 128-bit, max is 2048-bit, by steps of 128-bit)", 0x8CuLL);
    v66 = *(_QWORD *)(a1 + 208);
    *(_DWORD *)(v66 + 312) = a11;
    *(_DWORD *)(v66 + 316) = v65;
    if (*(char *)(v66 + 311) < 0)
    {
      **(_BYTE **)(v66 + 288) = 0;
      *(_QWORD *)(v66 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v66 + 288) = 0;
      *(_BYTE *)(v66 + 311) = 0;
    }
    v108 = (unsigned __int8 *)(v66 + 320);
    v138 = (void *)(v66 + 320);
    *(_QWORD *)&v139 = 0;
    *((_QWORD *)&v139 + 1) = v66;
    v140[0] = 1;
    *(_BYTE *)(v66 + 320) = 0;
    *(_DWORD *)(v66 + 664) = 0;
    v109 = *(unsigned int *)(v66 + 776);
    if ((_DWORD)v109)
    {
      v110 = *(_QWORD *)(v66 + 768);
      v111 = 56 * v109;
      do
      {
        if (*(char *)(v110 + v111 - 9) < 0)
          operator delete(*(void **)(v110 + v111 - 32));
        v111 -= 56;
      }
      while (v111);
      LODWORD(v109) = *v108;
    }
    *(_DWORD *)(v66 + 776) = 0;
    v108[v109 + 1] = 3;
    *(_BYTE *)(v66 + 320) = v109 + 1;
    *(_QWORD *)&v108[8 * v109 + 16] = v58;
    v84 = &v138;
    goto LABEL_124;
  }
  v138 = v140;
  v139 = xmmword_22F44E320;
  sub_22F242C48((uint64_t)v134, (uint64_t)&v138);
  if (a5)
  {
    v67 = &a4[10 * a5];
    v68 = a4 + 5;
    while (2)
    {
      v69 = v68 - 5;
      switch(*(v68 - 5))
      {
        case 0u:
          if ((unint64_t)v135 - (unint64_t)v136[0] > 1)
          {
            *(_WORD *)v136[0] = 29548;
            v136[0] = (char *)v136[0] + 2;
            v70 = (llvm::raw_ostream *)v134;
          }
          else
          {
            v70 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)v134, "ls");
          }
          v71 = (llvm::APInt *)(v68 - 3);
          goto LABEL_94;
        case 1u:
          v74 = v136[0];
          if (v136[0] >= v135)
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)v134);
          }
          else
          {
            ++v136[0];
            *v74 = 108;
          }
          if (sub_22E508590((uint64_t)(v68 - 3), 1))
          {
            v70 = (llvm::raw_ostream *)v134;
            v71 = (llvm::APInt *)(v68 - 3);
LABEL_94:
            llvm::APInt::print(v71, v70);
          }
          goto LABEL_95;
        case 2u:
          v72 = (char *)v136[0];
          if (v136[0] >= v135)
            goto LABEL_90;
          ++v136[0];
          v73 = 117;
          goto LABEL_87;
        case 3u:
          v72 = (char *)v136[0];
          if (v136[0] >= v135)
          {
LABEL_90:
            llvm::raw_ostream::write((llvm::raw_ostream *)v134);
          }
          else
          {
            ++v136[0];
            v73 = 118;
LABEL_87:
            *v72 = v73;
          }
LABEL_95:
          v75 = v68[3];
          if (v75 > 0x40)
          {
            if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v68 + 1)) == v75)
              goto LABEL_103;
          }
          else if (!*(_QWORD *)(v68 + 1))
          {
            goto LABEL_103;
          }
          v76 = v136[0];
          if (v136[0] >= v135)
          {
            v77 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)v134);
          }
          else
          {
            ++v136[0];
            *v76 = 97;
            v77 = (llvm::raw_ostream *)v134;
          }
          llvm::APInt::print((llvm::APInt *)(v68 + 1), v77);
LABEL_103:
          v68 += 10;
          if (v69 + 10 == v67)
            break;
          continue;
        default:
          goto LABEL_95;
      }
      break;
    }
  }
  v78 = *(_QWORD *)(v137 + 8);
  if (v78 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v79 = *(const void **)v137;
  if (v78 >= 0x17)
  {
    v88 = (v78 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v78 | 7) != 0x17)
      v88 = v78 | 7;
    v89 = v88 + 1;
    p_dst = (void **)operator new(v88 + 1);
    v128 = v78;
    v129 = v89 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_129;
  }
  HIBYTE(v129) = *(_QWORD *)(v137 + 8);
  p_dst = (void **)&__dst;
  if (v78)
LABEL_129:
    memmove(p_dst, v79, v78);
  *((_BYTE *)p_dst + v78) = 0;
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v134);
  if (v138 != v140)
    free(v138);
  if (!(_DWORD)a3)
  {
    if (a9 == 115)
    {
      if (v129 >= 0)
        v112 = (void **)&__dst;
      else
        v112 = __dst;
      v113 = v136;
      if (v129 >= 0)
        v114 = HIBYTE(v129) & 0x7F;
      else
        v114 = v128;
      v138 = v140;
      v139 = xmmword_22F44E320;
      sub_22F242C48((uint64_t)v134, (uint64_t)&v138);
      if ((unint64_t)v135 - (unint64_t)v136[0] > 3)
      {
        *(_DWORD *)v136[0] = 1447516767;
        v116 = (char *)v136[0] + 4;
        v136[0] = (char *)v136[0] + 4;
        v115 = (void **)v134;
        v117 = v136;
      }
      else
      {
        v115 = (void **)llvm::raw_ostream::write((llvm::raw_ostream *)v134, "_ZGV");
        v117 = v115 + 4;
        v116 = v115[4];
      }
      if (v116 >= v115[3])
      {
        v115 = (void **)llvm::raw_ostream::write((llvm::raw_ostream *)v115);
      }
      else
      {
        *v117 = v116 + 1;
        *v116 = 115;
      }
      v118 = v115[4];
      if (v115[3] == v118)
      {
        v115 = (void **)llvm::raw_ostream::write((llvm::raw_ostream *)v115, "M");
        v119 = v115[4];
      }
      else
      {
        *v118 = 77;
        v119 = (char *)v115[4] + 1;
        v115[4] = v119;
      }
      if (v115[3] == v119)
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v115, "x");
      }
      else
      {
        *v119 = 120;
        v115[4] = (char *)v115[4] + 1;
      }
      v120 = v136[0];
      if (v114 <= (unint64_t)v135 - (unint64_t)v136[0])
      {
        if (v114)
        {
          memcpy(v136[0], v112, v114);
          v120 = (char *)v136[0] + v114;
          v136[0] = (char *)v136[0] + v114;
        }
        v121 = (void **)v134;
      }
      else
      {
        v121 = (void **)llvm::raw_ostream::write((llvm::raw_ostream *)v134, (const char *)v112);
        v113 = v121 + 4;
        v120 = v121[4];
      }
      if (v121[3] == v120)
      {
        v121 = (void **)llvm::raw_ostream::write((llvm::raw_ostream *)v121, "_");
      }
      else
      {
        *v120 = 95;
        *v113 = (char *)*v113 + 1;
      }
      v122 = v121[4];
      if (a8 <= (_BYTE *)v121[3] - (_BYTE *)v122)
      {
        if (a8)
        {
          memcpy(v122, a7, a8);
          v121[4] = (char *)v121[4] + a8;
        }
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v121, (const char *)a7);
      }
      llvm::Function::addFnAttr();
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v134);
      if (v138 != v140)
        free(v138);
      goto LABEL_215;
    }
    if (a6 == 2)
    {
      if (v129 >= 0)
        v97 = (void **)&__dst;
      else
        v97 = __dst;
      if (v129 >= 0)
        v98 = HIBYTE(v129) & 0x7F;
      else
        v98 = v128;
      v99 = "N";
    }
    else
    {
      if (a6 != 1)
      {
        if (a6)
          goto LABEL_215;
        if (v129 >= 0)
          v95 = (void **)&__dst;
        else
          v95 = __dst;
        if (v129 >= 0)
          v96 = HIBYTE(v129) & 0x7F;
        else
          v96 = v128;
        sub_22E5C3C98(v57, "N", 1uLL, a9, v95, v96, a7, a8);
        if (v129 >= 0)
          v97 = (void **)&__dst;
        else
          v97 = __dst;
        if (v129 >= 0)
          v98 = HIBYTE(v129) & 0x7F;
        else
          v98 = v128;
        v99 = "M";
        v100 = v57;
        v101 = a9;
        v102 = a7;
        v103 = a8;
        goto LABEL_197;
      }
      if (v129 >= 0)
        v97 = (void **)&__dst;
      else
        v97 = __dst;
      if (v129 >= 0)
        v98 = HIBYTE(v129) & 0x7F;
      else
        v98 = v128;
      v99 = "M";
    }
    v100 = v57;
    v101 = a9;
    v102 = a7;
    v103 = a8;
LABEL_197:
    sub_22E5C3C98(v100, v99, 1uLL, v101, v97, v98, v102, v103);
    goto LABEL_215;
  }
  if (a9 == 115)
  {
    if (v129 >= 0)
      v90 = (void **)&__dst;
    else
      v90 = __dst;
    if (v129 >= 0)
      v91 = HIBYTE(v129) & 0x7F;
    else
      v91 = v128;
    v92 = "M";
    v93 = a3;
    v94 = 115;
  }
  else
  {
    if (a6 == 2)
    {
      if (v129 >= 0)
        v90 = (void **)&__dst;
      else
        v90 = __dst;
      if (v129 >= 0)
        v91 = HIBYTE(v129) & 0x7F;
      else
        v91 = v128;
      v92 = "N";
    }
    else
    {
      if (a6 != 1)
      {
        if (a6)
          goto LABEL_215;
        if (v129 >= 0)
          v104 = (void **)&__dst;
        else
          v104 = __dst;
        if (v129 >= 0)
          v105 = HIBYTE(v129) & 0x7F;
        else
          v105 = v128;
        sub_22E5C3A10(a3, "N", 1uLL, a9, v104, v105, a7, a8);
        if (v129 >= 0)
          v90 = (void **)&__dst;
        else
          v90 = __dst;
        if (v129 >= 0)
          v91 = HIBYTE(v129) & 0x7F;
        else
          v91 = v128;
        v92 = "M";
        v93 = a3;
        v94 = a9;
        v106 = a7;
        v107 = a8;
        goto LABEL_214;
      }
      if (v129 >= 0)
        v90 = (void **)&__dst;
      else
        v90 = __dst;
      if (v129 >= 0)
        v91 = HIBYTE(v129) & 0x7F;
      else
        v91 = v128;
      v92 = "M";
    }
    v93 = a3;
    v94 = a9;
  }
  v106 = a7;
  v107 = a8;
LABEL_214:
  sub_22E5C3A10(v93, v92, 1uLL, v94, v90, v91, v106, v107);
LABEL_215:
  if (SHIBYTE(v129) < 0)
    operator delete(__dst);
}

char *sub_22E5B77D4(char *result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned __int8 *v26;
  llvm::Value *v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  llvm::Value *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t Signed;
  uint64_t v36;
  uint64_t v37;
  uint64_t RuntimeFunction;
  llvm::Value *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD v52[3];
  int v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD v56[8];
  uint64_t v57;
  _OWORD v58[8];
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  _OWORD v69[8];
  uint64_t v70;
  _OWORD v71[8];
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  char v82[32];
  __int16 v83;
  _QWORD v84[3];
  int v85;
  uint64_t v86;
  uint64_t v87;
  _OWORD v88[3];
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  _QWORD v98[3];
  int v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  unsigned int v103;
  _OWORD v104[2];
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;

  v109 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 320))
  {
    v8 = result;
    v9 = *(_QWORD *)(*((_QWORD *)result + 1) + 144);
    v10 = sub_22EF60A6C(v9, 64, 1);
    v11 = *((_QWORD *)v8 + 357);
    v45 = a3;
    if (v11 > 0xF)
    {
      v51 = sub_22F10C2A4(*(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0));
      v14 = *((_QWORD *)v8 + 357);
    }
    else
    {
      v12 = sub_22F368234(v9, "kmp_dim", 7uLL, 0);
      sub_22EFC3340(v12);
      if (v12)
        v13 = v12 + 64;
      else
        v13 = 0;
      sub_22E5A4124(v9, v13, v10);
      sub_22E5A4124(v9, v13, v10);
      sub_22E5A4124(v9, v13, v10);
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 104))(v12);
      v51 = v12;
      v14 = sub_22EF6477C(v9, v12);
      *((_QWORD *)v8 + 357) = v14;
    }
    v103 = 32;
    v48 = a5;
    v102 = (char *)a5;
    v15 = sub_22EF5FE30(v9, v14, (const llvm::APInt *)&v102, 0, 0, 0);
    *(_QWORD *)&v89 = "dims";
    LOWORD(v91) = 259;
    v16 = sub_22F25E4D4(a2, v15, (uint64_t)&v89, 0);
    v18 = 0;
    if (v16 <= 7)
      v19 = 0;
    else
      v19 = v16 & 0xFFFFFFFFFFFFFFF8;
    v20 = v17 & 0xFFFFFFFFFFFFFFF8;
    if (v16 <= 7)
      v20 = 0;
    v49 = v20;
    v50 = v19;
    if (v16 >= 8)
      v18 = 1 << (v17 & 7 | (8 * (v16 & 7)));
    v98[0] = v19;
    v98[1] = v20;
    v47 = v18;
    v98[2] = v18;
    v99 = 0;
    v101 = 0;
    v100 = 0;
    sub_22E620824(a2, (uint64_t)v98, v15);
    if (a5)
    {
      v21 = 0;
      do
      {
        v84[0] = v50;
        v84[1] = v49;
        v84[2] = v47;
        v85 = 0;
        v86 = 0;
        v87 = 0;
        v83 = 257;
        sub_22E486A58((uint64_t *)(a2 + 272), (uint64_t)v84, v21, (uint64_t)v82, (uint64_t)v88);
        v22 = v8;
        v23 = *((_QWORD *)v8 + 357);
        v60 = v88[0];
        v61 = v88[1];
        v62 = v88[2];
        sub_22E6281E0(*(_QWORD **)(a2 + 144), v23, (uint64_t)v104);
        v73 = v60;
        v74 = v61;
        v75 = v62;
        v24 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
        v106 = v104[0];
        v107 = v104[1];
        v108 = v105;
        v90 = 0uLL;
        *((_QWORD *)&v89 + 1) = 0;
        LODWORD(v91) = 0;
        *((_QWORD *)&v91 + 1) = 0;
        *(_QWORD *)&v92 = 0;
        v93 = 0uLL;
        *(_QWORD *)((char *)&v94 + 4) = 2;
        LODWORD(v89) = 0;
        v95 = 0u;
        v96 = 0u;
        sub_22E3C113C((uint64_t)&v89, &v73, v23, 2, &v106, v24);
        v71[6] = v95;
        v71[7] = v96;
        v72 = v97;
        v71[2] = v91;
        v71[3] = v92;
        v71[4] = v93;
        v71[5] = v94;
        v71[0] = v89;
        v71[1] = v90;
        v25 = sub_22EFC3B90(v51);
        do
          v25 = *(_QWORD *)(v25 + 8) & 0xFFFFFFFFFFFFFFF8;
        while (v25 && (*(_DWORD *)(v25 + 28) & 0x7Fu) - 49 > 2);
        sub_22E4DD05C(a2, (uint64_t)v71, v25, (uint64_t)&v73);
        v26 = *(unsigned __int8 **)(a4 + 8 * v21);
        *(_QWORD *)&v60 = a2;
        *((_QWORD *)&v60 + 1) = a2 + 272;
        LOBYTE(v61) = 0;
        *((_QWORD *)&v61 + 1) = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 232);
        v27 = sub_22E50E974((uint64_t *)&v60, v26);
        v28 = *(_QWORD *)(a4 + 8 * v21);
        v29 = *(_QWORD *)(v28 + 8);
        sub_22EFF605C(v28);
        *(_QWORD *)&v60 = a2;
        *((_QWORD *)&v60 + 1) = a2 + 272;
        LOBYTE(v61) = 0;
        *((_QWORD *)&v61 + 1) = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 232);
        v31 = sub_22E50EA80((uint64_t *)&v60, v27, v29, v10, v30, 0);
        v69[6] = v79;
        v69[7] = v80;
        v70 = v81;
        v69[2] = v75;
        v69[3] = v76;
        v69[4] = v77;
        v69[5] = v78;
        v69[0] = v73;
        v69[1] = v74;
        sub_22E4E87FC(a2, (uint64_t)v31, (uint64_t)v69, 0);
        v58[6] = v95;
        v58[7] = v96;
        v59 = v97;
        v58[2] = v91;
        v58[3] = v92;
        v58[4] = v93;
        v58[5] = v94;
        v58[0] = v89;
        v58[1] = v90;
        v32 = sub_22EFC3B90(v51);
        v33 = 2;
        v8 = v22;
        do
        {
          do
            v32 = *(_QWORD *)(v32 + 8) & 0xFFFFFFFFFFFFFFF8;
          while (v32 && (*(_DWORD *)(v32 + 28) & 0x7Fu) - 49 > 2);
        }
        while (v33-- > 1);
        sub_22E4DD05C(a2, (uint64_t)v58, v32, (uint64_t)&v60);
        Signed = llvm::ConstantInt::getSigned();
        v56[6] = v66;
        v56[7] = v67;
        v57 = v68;
        v56[2] = v62;
        v56[3] = v63;
        v56[4] = v64;
        v56[5] = v65;
        v56[0] = v60;
        v56[1] = v61;
        sub_22E4E87FC(a2, Signed, (uint64_t)v56, 0);
        ++v21;
      }
      while (v21 != v48);
    }
    *(_QWORD *)&v106 = sub_22E59F7E4(v8, a2, *(_DWORD *)(v45 + 12));
    *((_QWORD *)&v106 + 1) = sub_22E59F964((uint64_t)v8, a2, *(_DWORD *)(v45 + 12));
    *(_QWORD *)&v107 = llvm::ConstantInt::getSigned();
    v52[0] = v50;
    v52[1] = v49;
    v52[2] = v47;
    v53 = 0;
    v54 = 0;
    v55 = 0;
    LOWORD(v75) = 257;
    sub_22E486A58((uint64_t *)(a2 + 272), (uint64_t)v52, 0, (uint64_t)&v73, (uint64_t)&v89);
    if ((BYTE8(v90) & 3) != 0)
      v36 = sub_22F28ABCC(&v89, (_QWORD *)a2);
    else
      v36 = v89;
    v37 = *(_QWORD *)(*((_QWORD *)v8 + 1) + 96);
    LOWORD(v62) = 257;
    *((_QWORD *)&v107 + 1) = sub_22E3C1338((uint64_t *)(a2 + 272), v36, v37, (uint64_t)&v60);
    RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
    LOWORD(v91) = 257;
    sub_22E479C7C(a2, RuntimeFunction, v39, (uint64_t)&v106, 4, (uint64_t)&v89);
    v40 = sub_22E59F7E4(v8, a2, *(_DWORD *)(v45 + 16));
    v41 = sub_22E59F964((uint64_t)v8, a2, *(_DWORD *)(v45 + 16));
    v42 = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
    v44 = v43;
    result = sub_22E4899EC(a2 + 1984, 3u, 40);
    *(_QWORD *)result = off_24FA65F48;
    *((_QWORD *)result + 1) = v42;
    *((_QWORD *)result + 2) = v44;
    *((_QWORD *)result + 3) = v40;
    *((_QWORD *)result + 4) = v41;
    if (v103 >= 0x41)
    {
      result = v102;
      if (v102)
        return (char *)MEMORY[0x2348A0E84](v102, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t sub_22E5B7E98(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v4;

  if (a3 && (*(_DWORD *)(a3 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
  {
    v3 = result;
    result = sub_22EF95D10(a3);
    if (v4)
      *(_BYTE *)(v3 + 4257) = 1;
  }
  return result;
}

__n128 sub_22E5B7EEC@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v6;
  __int128 v7;
  __n128 result;
  uint64_t v9;
  uint64_t v10;

  v9 = a2;
  v10 = 0;
  v5 = sub_22E3CED3C((uint64_t *)(a1 + 2904), &v9, &v10);
  v6 = v10;
  if (!v5)
    v6 = *(_QWORD *)(a1 + 2904) + 56 * *(unsigned int *)(a1 + 2920);
  v7 = *(_OWORD *)(v6 + 24);
  *(_OWORD *)a3 = *(_OWORD *)(v6 + 8);
  *(_OWORD *)(a3 + 16) = v7;
  result = *(__n128 *)(v6 + 40);
  *(__n128 *)(a3 + 32) = result;
  return result;
}

void sub_22E5B7F58(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  llvm::Value *v41;
  unsigned __int8 *v42;
  uint64_t *v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  llvm::Value *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t RuntimeFunction;
  llvm::Value *v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  unint64_t v55;
  _DWORD *v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  unint64_t v63;
  _DWORD *v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  char *v69;
  __int128 v70;
  _DWORD *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  llvm::Value *v77;
  llvm::Value *v78;
  llvm::Value *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  llvm::Instruction *v85;
  llvm::Instruction *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  int v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  std::string __p;
  _QWORD v97[3];
  int v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  const char *v106;
  uint64_t v107;
  const char *v108;
  uint64_t v109;
  uint64_t v110;

  v110 = *MEMORY[0x24BDAC8D0];
  if (!a3)
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 32) = 0;
    *(_QWORD *)(a4 + 40) = 0;
    return;
  }
  v8 = *(unsigned int *)(a1 + 2664);
  if ((_DWORD)v8)
  {
    v16 = a2[203];
    v17 = *(_QWORD *)(a1 + 2648);
    LODWORD(v18) = ((v16 >> 4) ^ (v16 >> 9)) & (v8 - 1);
    v19 = (uint64_t *)(v17 + 16 * v18);
    v20 = *v19;
    if (*v19 == v16)
    {
LABEL_14:
      if (v19 != (uint64_t *)(v17 + 16 * v8))
      {
        v23 = *(_QWORD *)(a1 + 3224) + 48 * *((unsigned int *)v19 + 2);
        v97[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
        v24 = sub_22F282F44(v23, v97);
        if (*(_QWORD *)(v23 + 32) != v24)
        {
          v9 = *(_QWORD *)(v24 + 8);
          v10 = *(_QWORD *)(v24 + 16);
          v95 = *(_QWORD *)(v24 + 24);
          v11 = *(_DWORD *)(v24 + 32);
          v90 = *(_DWORD *)(v24 + 36);
          v12 = *(_QWORD *)(v24 + 40);
          v13 = *(_QWORD *)(v24 + 48);
          v94 = *(_OWORD *)(v24 + 56);
          v93 = *(_QWORD *)(v24 + 72);
          v92 = *(_QWORD *)(v24 + 80);
          v14 = *(_OWORD *)(v24 + 88);
          goto LABEL_6;
        }
      }
    }
    else
    {
      v21 = 1;
      while (v20 != -4096)
      {
        v22 = v18 + v21++;
        v18 = v22 & (v8 - 1);
        v20 = *(_QWORD *)(v17 + 16 * v18);
        if (v20 == v16)
        {
          v19 = (uint64_t *)(v17 + 16 * v18);
          goto LABEL_14;
        }
      }
    }
  }
  v93 = 0;
  v9 = 0;
  v10 = 0;
  v95 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0uLL;
  v92 = 0;
  v94 = 0u;
LABEL_6:
  v91 = v14;
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
  if (!sub_22F282498(v15) || !sub_22E5A978C(a3))
  {
    *(_QWORD *)a4 = v9;
    *(_QWORD *)(a4 + 8) = v10;
    *(_QWORD *)(a4 + 16) = v95;
    *(_DWORD *)(a4 + 24) = v11;
    *(_DWORD *)(a4 + 28) = v90;
    *(_QWORD *)(a4 + 32) = v12;
    *(_QWORD *)(a4 + 40) = v13;
    return;
  }
  v25 = sub_22EF5B404(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v15, 0);
  v26 = *(_QWORD *)(v15 + 48);
  v27 = *(_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF0);
  v89 = v25;
  if ((*(_BYTE *)(v27 + 17) & 8) != 0)
  {
    v85 = sub_22F28CE84((uint64_t)a2, v26);
    v29 = llvm::ConstantInt::get();
    LOWORD(v100) = 257;
    v86 = sub_22F26180C((uint64_t)(a2 + 34), (uint64_t)v85, v29, (uint64_t)v97);
    v30 = llvm::ConstantInt::get();
    LOWORD(v100) = 257;
    v87 = sub_22E4DF3BC((uint64_t)(a2 + 34), (uint64_t)v86, v30, (uint64_t)v97, 0);
    v31 = llvm::ConstantInt::get();
    LOWORD(v100) = 257;
    v28 = (uint64_t)sub_22E3BDEA8((uint64_t)(a2 + 34), v87, v31, (uint64_t)v97, 1, 0);
  }
  else
  {
    sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v27, (uint64_t)v97);
    v28 = llvm::ConstantInt::get();
  }
  v83 = v28;
  v32 = *(_QWORD *)(v15 + 56);
  if ((v32 & 4) != 0 && (v72 = v32 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(v72 + 16)))
    v33 = **(unsigned int ***)(v72 + 24);
  else
    v33 = (unsigned int *)(v15 + 64);
  v80 = sub_22E59F964(a1, (uint64_t)a2, *v33);
  if ((*(_BYTE *)(v15 + 29) & 1) == 0)
    goto LABEL_30;
  sub_22EFC8E88(v15);
  v35 = *(uint64_t **)v34;
  v36 = *(unsigned int *)(v34 + 8);
  v37 = *(uint64_t **)v34;
  if ((_DWORD)v36)
  {
    v40 = 8 * v36;
    v37 = *(uint64_t **)v34;
    while (*(_WORD *)(*v37 + 32) != 243)
    {
      ++v37;
      v40 -= 8;
      if (!v40)
        goto LABEL_30;
    }
  }
  if (v37 == &v35[v36])
  {
LABEL_30:
    v38 = 0;
  }
  else
  {
    do
    {
      v39 = *v35++;
      v38 = v39;
    }
    while (*(_WORD *)(v39 + 32) != 243);
  }
  v88 = *(_QWORD *)(v38 + 40);
  v41 = sub_22E5B86AC((uint64_t)a2, v88);
  v42 = *(unsigned __int8 **)(v38 + 48);
  if (v42)
  {
    v77 = v41;
    v102 = a2;
    v103 = a2 + 34;
    LOBYTE(v104) = 0;
    v105 = *(_QWORD *)(a2[18] + 232);
    v47 = sub_22E50E974((uint64_t *)&v102, v42);
    v48 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 88);
    LOWORD(v100) = 257;
    v49 = sub_22E3BF45C(a2 + 34, (uint64_t)v47, v48, 0, (uint64_t)v97);
    v102 = &v104;
    HIDWORD(v103) = 4;
    v104 = v80;
    if (!v49)
    {
      v44 = 2;
      v45 = 1;
      v41 = v77;
      goto LABEL_37;
    }
    v43 = &v105;
    v44 = 3;
    v45 = 2;
    v46 = v49;
    v41 = v77;
  }
  else
  {
    v43 = &v104;
    v102 = &v104;
    HIDWORD(v103) = 4;
    v44 = 2;
    v45 = 1;
    v46 = v80;
  }
  *v43 = v46;
LABEL_37:
  *(&v104 + v45) = v83;
  *(&v104 + v44) = (uint64_t)v41;
  LODWORD(v103) = v44 + 1;
  RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
  v78 = v51;
  v81 = RuntimeFunction;
  v52 = 0;
  v74 = v103;
  v76 = (uint64_t)v102;
  v53 = *(_QWORD *)(v15 + 40);
  v54 = "";
  if ((v53 & 7) == 0)
  {
    v55 = v53 & 0xFFFFFFFFFFFFFFF8;
    if (v55)
    {
      v56 = *(_DWORD **)(v55 + 16);
      v57 = *v56;
      v54 = (const char *)(v56 + 4);
      v52 = v57;
    }
  }
  v106 = v54;
  v107 = v52;
  v108 = ".void.addr";
  v109 = 10;
  sub_22F27BE70(&__p, a1, (uint64_t)&v106, 2);
  LOWORD(v100) = 260;
  v97[0] = &__p;
  v79 = sub_22E479C7C((uint64_t)a2, v81, v78, v76, v74, (uint64_t)v97);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v58 = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
  v82 = v59;
  v84 = v58;
  v73 = sub_22EF5B848(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(v15 + 48), 0);
  v75 = sub_22E66C868(a2[18] + 280, v73, 0);
  v60 = 0;
  v61 = *(_QWORD *)(v15 + 40);
  v62 = "";
  if ((v61 & 7) == 0)
  {
    v63 = v61 & 0xFFFFFFFFFFFFFFF8;
    if (v63)
    {
      v64 = *(_DWORD **)(v63 + 16);
      v65 = *v64;
      v62 = (const char *)(v64 + 4);
      v60 = v65;
    }
  }
  v106 = v62;
  v107 = v60;
  v108 = ".addr";
  v109 = 5;
  sub_22F27BE70(&__p, a1, (uint64_t)&v106, 2);
  LOWORD(v100) = 260;
  v97[0] = &__p;
  v66 = sub_22E3C1338(a2 + 34, (uint64_t)v79, v75, (uint64_t)v97);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v9)
  {
    v97[0] = v9;
    v97[1] = v10;
    v97[2] = v95;
    v98 = v11;
    v99 = v90;
    v100 = v12;
    v101 = v13;
    sub_22E6281E0((_QWORD *)a2[18], v73, (uint64_t)&v106);
    sub_22E4E8134((uint64_t)a2, v66, (uint64_t)v97, 0, v73, 2, (uint64_t)&v106, 0, 0);
  }
  if ((_QWORD)v94)
  {
    *(_OWORD *)a4 = v94;
    *(_QWORD *)(a4 + 16) = v93;
    *(_QWORD *)(a4 + 24) = v92;
    *(_OWORD *)(a4 + 32) = v91;
  }
  else
  {
    v67 = sub_22E66C868(a2[18] + 280, *(_QWORD *)(v15 + 48), 0);
    *(_QWORD *)a4 = v66;
    *(_QWORD *)(a4 + 8) = v67;
    *(_QWORD *)(a4 + 16) = v89;
    *(_DWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 32) = 0;
    *(_QWORD *)(a4 + 40) = 0;
  }
  v68 = *(_DWORD *)(v15 + 24);
  v69 = sub_22E4899EC((uint64_t)(a2 + 248), 3u, 88);
  *(_QWORD *)v69 = off_24FA65F70;
  *((_QWORD *)v69 + 1) = v84;
  *((_QWORD *)v69 + 2) = v82;
  *((_DWORD *)v69 + 6) = v68;
  v70 = *(_OWORD *)(a4 + 16);
  *((_OWORD *)v69 + 2) = *(_OWORD *)a4;
  *((_OWORD *)v69 + 3) = v70;
  *((_OWORD *)v69 + 4) = *(_OWORD *)(a4 + 32);
  *((_QWORD *)v69 + 10) = v88;
  if ((_QWORD)v94)
  {
    v71 = (_DWORD *)a2[232];
    if (v71)
    {
      if (v71[2] == 2)
        (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)v71 + 80))(v71, a2);
    }
  }
  if (v102 != &v104)
    free(v102);
}

llvm::Value *sub_22E5B86AC(uint64_t a1, uint64_t a2)
{
  llvm::Value *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  llvm::Constant *v10;
  llvm::Type *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  if (a2)
  {
    v12 = a1;
    v13 = a1 + 272;
    v14 = 0;
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
    v4 = sub_22E50E974(&v12, (unsigned __int8 *)a2);
    v5 = *(_QWORD *)(a2 + 8);
    v6 = *(_QWORD *)(a1 + 144);
    v7 = *(_QWORD *)(*(_QWORD *)(v6 + 144) + 16816);
    sub_22EFF605C(a2);
    v12 = a1;
    v13 = a1 + 272;
    v14 = 0;
    v15 = *(_QWORD *)(v6 + 232);
    return sub_22E50EA80(&v12, v4, v5, v7, v8, 0);
  }
  else
  {
    v10 = (llvm::Constant *)sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 144) + 280), *(llvm::LLVMContext **)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144) + 16816));
    return (llvm::Value *)llvm::Constant::getNullValue(v10, v11);
  }
}

uint64_t sub_22E5B8788(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v4;
  _DWORD *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t *i;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  unsigned __int8 **v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  char v36[31];

  *(_QWORD *)a1 = a2;
  v4 = *(unsigned int **)(a3 + 24);
  if (v4)
  {
    v8 = *v4;
    v6 = v4 + 4;
    v7 = v8;
    if (v8)
    {
      v9 = 8 * v7;
      v10 = v6;
      while (*(_DWORD *)(*(_QWORD *)v10 + 8) != 53)
      {
        v10 += 2;
        v9 -= 8;
        if (!v9)
          goto LABEL_6;
      }
    }
    else
    {
      v10 = v6;
    }
    v11 = &v6[2 * v7];
    *(_BYTE *)(a1 + 8) = v10 != v11;
    if (v10 != v11)
    {
      v13 = sub_22F282FB8(*(_QWORD *)(a2 + 808) + 3048);
      v14 = *(unsigned int **)(a3 + 24);
      if (v14)
      {
        v15 = v13;
        v18 = *v14;
        v16 = (uint64_t *)(v14 + 4);
        v17 = v18;
        if (v18)
        {
          v19 = 8 * v17;
          for (i = v16; *(_DWORD *)(*i + 8) != 53; ++i)
          {
            v19 -= 8;
            if (!v19)
              return a1;
          }
        }
        else
        {
          i = v16;
        }
        v21 = &v16[v17];
        if (i != v21)
        {
          v22 = *i;
LABEL_20:
          v23 = *(unsigned int *)(v22 + 16);
          v24 = (uint64_t *)(v22 + 8 * v23 + 24);
          v34 = v24;
          v35 = 0;
          if ((_DWORD)v23)
          {
            v25 = 0;
            v26 = &v24[v23];
            do
            {
              v27 = (unsigned __int8 **)v24;
              if ((v25 & 3) != 0)
              {
                if ((v25 & 0xFFFFFFFFFFFFFFFCLL) != 0)
                  v27 = (unsigned __int8 **)((v25 & 0xFFFFFFFFFFFFFFFCLL) + 40);
                else
                  v27 = (unsigned __int8 **)sub_22F3AC1A8(*v24);
              }
              v28 = sub_22EFFA6B0(*v27);
              if (*v28 == 161)
                v29 = 16;
              else
                v29 = 24;
              v30 = *(_QWORD *)&v28[v29];
              if (v30)
                v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 32))(v30);
              v33 = v30;
              sub_22F285E70(v15, &v33, (uint64_t)v36);
              if ((v25 & 3) != 0)
              {
                if (v25 >= 4)
                  sub_22F0D8720((uint64_t)&v34);
                else
                  sub_22F3F2FE0((uint64_t)&v34, 1);
              }
              else
              {
                v34 = v24 + 1;
              }
              v24 = v34;
              v25 = v35;
            }
            while (v34 != v26 || v35);
          }
          v31 = i + 1;
          while (v31 != v21)
          {
            v32 = *v31++;
            v22 = v32;
            if (*(_DWORD *)(v32 + 8) == 53)
            {
              i = v31 - 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
  }
  else
  {
LABEL_6:
    *(_BYTE *)(a1 + 8) = 0;
  }
  return a1;
}

_BYTE *sub_22E5B8974(_BYTE *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)a1 = v4;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(a3 + 32);
  a1[8] = v5 != v6;
  if (v5 != v6)
  {
    v9 = *(_QWORD *)(v4 + 808);
    v11 = *(unsigned int *)(v9 + 3232);
    sub_22F283018((uint64_t)&v10, v9 + 2648, (uint64_t *)(a2 + 1624), &v11);
    sub_22F2830B0(*(_QWORD *)(*(_QWORD *)a1 + 808) + 3224, a3);
  }
  return a1;
}

BOOL sub_22E5B89F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 808);
  v3 = *(_DWORD *)(v2 + 3056);
  if (!v3)
    return 0;
  v5 = 40 * v3 - 40;
  v6 = *(_QWORD *)(v2 + 3048) + 8;
  do
  {
    if (a2)
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    else
      v7 = 0;
    v15 = v7;
    v8 = sub_22F287178(v6 - 8, &v15);
    if ((*(_BYTE *)(v6 - 8) & 1) != 0)
    {
      v9 = v6;
      v10 = 4;
    }
    else
    {
      v9 = *(_QWORD *)v6;
      v10 = *(unsigned int *)(v6 + 8);
    }
    v11 = v9 + 8 * v10;
    v12 = v11 == v8;
    result = v11 != v8;
    if (!v12)
      break;
    v14 = v5;
    v5 -= 40;
    v6 += 40;
  }
  while (v14);
  return result;
}

uint64_t sub_22E5B8ABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v8;
  _DWORD *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *i;
  uint64_t v19;
  unsigned int *v20;
  uint64_t *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  _BYTE *v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 **v34;
  uint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  _QWORD *v38;
  size_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _QWORD *v49;
  uint64_t *v50;
  void *__p;
  unsigned __int8 **v52;
  int v53;
  uint64_t v54;
  _QWORD v55[2];
  char v56;
  void *v57;
  __int128 v58;
  _BYTE v59[16];
  uint64_t v60;
  void *v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  __int128 v66;
  _QWORD v67[4];

  v67[2] = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)a1 = v5;
  v6 = *(_QWORD *)(v5 + 152);
  if (*(_DWORD *)(v6 + 72) <= 0x31u)
    goto LABEL_16;
  v8 = *(unsigned int **)(a3 + 24);
  if (!v8)
    goto LABEL_16;
  v13 = *v8;
  v11 = v8 + 4;
  v12 = v13;
  if (v13)
  {
    v14 = 8 * v12;
    v15 = v11;
    while (*(_DWORD *)(*(_QWORD *)v15 + 8) != 43)
    {
      v15 += 2;
      v14 -= 8;
      if (!v14)
        goto LABEL_16;
    }
  }
  else
  {
    v15 = v11;
  }
  v16 = &v11[2 * v12];
  if (v15 == v16)
    goto LABEL_16;
  if (!*(_DWORD *)(*(_QWORD *)v15 + 48))
  {
LABEL_18:
    *(_DWORD *)(a1 + 8) = 1;
    if (*(_DWORD *)(v6 + 72) < 0x32u)
      return a1;
    v19 = sub_22F28313C(*(_QWORD *)(v5 + 808) + 3432);
    v20 = *(unsigned int **)(a3 + 24);
    if (v20)
    {
      v23 = *v20;
      v21 = (uint64_t *)(v20 + 4);
      v22 = v23;
      if (v23)
      {
        v24 = 8 * v22;
        v25 = v21;
        while (*(_DWORD *)(*v25 + 8) != 43)
        {
          ++v25;
          v24 -= 8;
          if (!v24)
            goto LABEL_62;
        }
      }
      else
      {
        v25 = v21;
      }
      v26 = &v21[v22];
      if (v25 != v26)
      {
        v27 = v59;
        v28 = &v63;
        v29 = v67;
        v30 = *v25;
LABEL_28:
        if (!*(_DWORD *)(v30 + 48))
        {
          v33 = *(unsigned int *)(v30 + 16);
          if ((_DWORD)v33)
          {
            v34 = (unsigned __int8 **)(v30 + 64);
            v35 = 8 * v33;
            v49 = v29;
            v50 = v28;
            while (1)
            {
              v54 = v35;
              v52 = v34;
              v36 = *v34;
              v37 = *((_QWORD *)sub_22EFFA6B0(*v34) + 2);
              sub_22E5B0EC0(v55, *(_QWORD *)a1, "pl_cond", 7uLL, (uint64_t)v36);
              v38 = v56 >= 0 ? v55 : (_QWORD *)v55[0];
              v39 = v56 >= 0 ? v56 & 0x7F : v55[1];
              v57 = v59;
              v58 = xmmword_22F44E350;
              __p = (void *)v55[0];
              v53 = v56;
              if (v39 >= 0x11)
                break;
              v40 = 0;
              v41 = 0;
              if (v39)
                goto LABEL_43;
LABEL_44:
              v28 = v50;
              v60 = v37;
              v61 = v50;
              v62 = xmmword_22F44E350;
              *(_QWORD *)&v58 = v41 + v39;
              if (v41 + v39)
              {
                sub_22E3B2DB8((uint64_t)&v61, (uint64_t)&v57);
                v37 = v60;
              }
              v29 = v49;
              if (v37)
                v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 32))(v37);
              else
                v42 = 0;
              v27 = v59;
              v64 = v42;
              v65 = v49;
              v66 = xmmword_22F44E350;
              if ((_QWORD)v62)
                sub_22E3B2DB8((uint64_t)&v65, (uint64_t)&v61);
              sub_22F2831A8(v19, &v64);
              if (v65 != v49)
                free(v65);
              if (v61 != v50)
                free(v61);
              if (v57 != v59)
                free(v57);
              if (v53 < 0)
                operator delete(__p);
              v34 = v52 + 1;
              v35 = v54 - 8;
              if (v54 == 8)
                goto LABEL_29;
            }
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
            v27 = v57;
            v40 = v58;
LABEL_43:
            memcpy(&v27[v40], v38, v39);
            v41 = v58;
            goto LABEL_44;
          }
        }
LABEL_29:
        v31 = v25 + 1;
        while (v31 != v26)
        {
          v32 = *v31++;
          v30 = v32;
          if (*(_DWORD *)(v32 + 8) == 43)
          {
            v25 = v31 - 1;
            goto LABEL_28;
          }
        }
      }
    }
LABEL_62:
    *(_OWORD *)(v19 + 48) = *(_OWORD *)a4;
    v43 = *(_OWORD *)(a4 + 16);
    v44 = *(_OWORD *)(a4 + 32);
    v45 = *(_OWORD *)(a4 + 64);
    *(_OWORD *)(v19 + 96) = *(_OWORD *)(a4 + 48);
    *(_OWORD *)(v19 + 112) = v45;
    *(_OWORD *)(v19 + 64) = v43;
    *(_OWORD *)(v19 + 80) = v44;
    v46 = *(_OWORD *)(a4 + 80);
    v47 = *(_OWORD *)(a4 + 96);
    v48 = *(_OWORD *)(a4 + 112);
    *(_QWORD *)(v19 + 176) = *(_QWORD *)(a4 + 128);
    *(_OWORD *)(v19 + 144) = v47;
    *(_OWORD *)(v19 + 160) = v48;
    *(_OWORD *)(v19 + 128) = v46;
    *(_QWORD *)(v19 + 184) = *(_QWORD *)(a2 + 1624);
    return a1;
  }
  for (i = v15 + 2; i != v16; i += 2)
  {
    if (*(_DWORD *)(*(_QWORD *)i + 8) == 43 && !*(_DWORD *)(*(_QWORD *)i + 48))
      goto LABEL_18;
  }
LABEL_16:
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

_DWORD *sub_22E5B8E78(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 **v22;
  uint64_t i;
  unsigned __int8 *v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned __int8 *v32;
  uint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 **v43;
  uint64_t j;
  unsigned __int8 *v45;
  uint64_t v46;
  unsigned int v47;
  BOOL v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unsigned __int8 *v53;
  uint64_t v54;
  unsigned int *v55;
  uint64_t v56;
  unsigned int *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 **v64;
  uint64_t k;
  unsigned __int8 *v66;
  uint64_t v67;
  unsigned int v68;
  BOOL v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  unsigned __int8 *v74;
  uint64_t v75;
  unsigned int *v76;
  uint64_t v77;
  unsigned int *v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int *v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int8 **v85;
  uint64_t m;
  unsigned __int8 *v87;
  uint64_t v88;
  unsigned int v89;
  BOOL v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  unsigned __int8 *v95;
  uint64_t v96;
  unsigned int *v97;
  uint64_t v98;
  unsigned int *v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  unsigned int *v103;
  unsigned int *v104;
  uint64_t v105;
  uint64_t v106;
  unsigned __int8 **v107;
  uint64_t n;
  unsigned __int8 *v109;
  uint64_t v110;
  unsigned int v111;
  BOOL v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  unsigned __int8 *v117;
  uint64_t v118;
  unsigned int *v119;
  uint64_t v120;
  llvm *v121;
  llvm *v122;
  uint64_t v123;
  llvm *v124;
  llvm *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int *v132;
  uint64_t v133;
  uint64_t v134;
  llvm *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v139;
  llvm *v140;
  uint64_t v141;
  llvm *v142;
  llvm *v143;
  __int128 v144;
  uint64_t v145;
  llvm *v146;
  llvm *v147;
  uint64_t v148;
  unsigned int v149;
  unint64_t v150;
  llvm *v151;
  __int128 v152;
  _QWORD v153[2];
  uint64_t v154;
  void *v155;
  __int128 v156;
  _BYTE v157[16];
  int *v158;
  uint64_t v159;
  __int128 v160;
  _QWORD v161[4];

  v161[2] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)a1 = v4;
  a1[2] = 0;
  if (*(_DWORD *)(*(_QWORD *)(v4 + 152) + 72) >= 0x32u)
  {
    v147 = 0;
    v148 = 0;
    v149 = 0;
    v151 = 0;
    *(_QWORD *)&v152 = 0;
    DWORD2(v152) = 0;
    v7 = *(_DWORD *)(a3 + 8);
    if ((v7 - 36) <= 0x3E && ((1 << (v7 - 36)) & 0x6000035CF9100C03) != 0)
    {
      v158 = (int *)&v160;
      v159 = 0x400000000;
      sub_22F421BB4((uint64_t)&v158, v7);
      v8 = sub_22E59F470(a3, *v158);
      v9 = *(unsigned int *)(v8 + 8);
      if ((_DWORD)v9)
      {
        v10 = (uint64_t *)(v8 + (8 * v9 + 40));
        v11 = 16 * v9;
        do
        {
          v12 = *v10;
          if (((*v10 >> 1) & 3) - 1 <= 1)
          {
            v13 = v12 & 0xFFFFFFFFFFFFFFF8;
            if ((v12 & 0xFFFFFFFFFFFFFFF8) != 0)
              v13 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v13 + 32))(v13);
            v150 = v13;
            sub_22F275184((uint64_t)&v151, &v150, (uint64_t)&v154);
          }
          v10 += 2;
          v11 -= 16;
        }
        while (v11);
      }
      if (v158 != (int *)&v160)
        free(v158);
    }
    v14 = *(unsigned int **)(a3 + 24);
    if (v14)
    {
      v15 = v14 + 4;
      v16 = *v14;
      if ((_DWORD)v16)
      {
        v17 = 0;
        while (*(_DWORD *)(*(_QWORD *)&v15[v17] + 8) != 63)
        {
          v17 += 2;
          if (2 * v16 == v17)
            goto LABEL_52;
        }
        v18 = &v15[v17];
      }
      else
      {
        v18 = v14 + 4;
      }
      v19 = &v15[2 * v16];
      if (v18 != v19)
      {
        v20 = *(_QWORD *)v18;
LABEL_24:
        v21 = *(unsigned int *)(v20 + 16);
        if ((_DWORD)v21)
        {
          v22 = (unsigned __int8 **)(v20 + 24);
          for (i = 8 * v21; i; i -= 8)
          {
            v24 = *v22;
            v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)*v22 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
            v26 = *(_DWORD *)(v25 + 16);
            if (v25)
              v27 = v26 == 11;
            else
              v27 = 0;
            if (v27)
            {
              if (((v26 >> 19) & 0x1FF) - 166 < 0x35)
                goto LABEL_41;
            }
            else if (v25 && v26 == 44)
            {
              v28 = sub_22F114198(*(_QWORD *)(v25 + 24));
              if ((*(_BYTE *)(v28 + 74) & 1) != 0 || *(_QWORD *)(v28 + 128) >= 8uLL)
                goto LABEL_41;
            }
            else
            {
              v29 = v26;
              v30 = (1 << v26) & 0x8180001600;
              if (v29 <= 0x27 && v30 != 0)
              {
LABEL_41:
                v32 = sub_22EFFA6B0(v24);
                if (*v32 == 161)
                {
                  v33 = *((_QWORD *)v32 + 2);
                  if (v33)
                    v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 32))(v33);
                  v154 = v33;
                  sub_22F275184((uint64_t)&v151, &v154, (uint64_t)&v158);
                }
              }
            }
            ++v22;
          }
        }
        v34 = v18 + 2;
        while (v34 != v19)
        {
          v35 = *(_QWORD *)v34;
          v34 += 2;
          v20 = v35;
          if (*(_DWORD *)(v35 + 8) == 63)
          {
            v18 = v34 - 2;
            goto LABEL_24;
          }
        }
        v14 = *(unsigned int **)(a3 + 24);
      }
LABEL_52:
      if (v14)
      {
        v36 = v14 + 4;
        v37 = *v14;
        if ((_DWORD)v37)
        {
          v38 = 0;
          while (*(_DWORD *)(*(_QWORD *)&v36[v38] + 8) != 29)
          {
            v38 += 2;
            if (2 * v37 == v38)
              goto LABEL_90;
          }
          v39 = &v36[v38];
        }
        else
        {
          v39 = v14 + 4;
        }
        v40 = &v36[2 * v37];
        if (v39 != v40)
        {
          v41 = *(_QWORD *)v39;
LABEL_62:
          v42 = *(unsigned int *)(v41 + 16);
          if ((_DWORD)v42)
          {
            v43 = (unsigned __int8 **)(v41 + 40);
            for (j = 8 * v42; j; j -= 8)
            {
              v45 = *v43;
              v46 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)*v43 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
              v47 = *(_DWORD *)(v46 + 16);
              if (v46)
                v48 = v47 == 11;
              else
                v48 = 0;
              if (v48)
              {
                if (((v47 >> 19) & 0x1FF) - 166 < 0x35)
                  goto LABEL_79;
              }
              else if (v46 && v47 == 44)
              {
                v49 = sub_22F114198(*(_QWORD *)(v46 + 24));
                if ((*(_BYTE *)(v49 + 74) & 1) != 0 || *(_QWORD *)(v49 + 128) >= 8uLL)
                  goto LABEL_79;
              }
              else
              {
                v50 = v47;
                v51 = (1 << v47) & 0x8180001600;
                if (v50 <= 0x27 && v51 != 0)
                {
LABEL_79:
                  v53 = sub_22EFFA6B0(v45);
                  if (*v53 == 161)
                  {
                    v54 = *((_QWORD *)v53 + 2);
                    if (v54)
                      v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 32))(v54);
                    v154 = v54;
                    sub_22F275184((uint64_t)&v151, &v154, (uint64_t)&v158);
                  }
                }
              }
              ++v43;
            }
          }
          v55 = v39 + 2;
          while (v55 != v40)
          {
            v56 = *(_QWORD *)v55;
            v55 += 2;
            v41 = v56;
            if (*(_DWORD *)(v56 + 8) == 29)
            {
              v39 = v55 - 2;
              goto LABEL_62;
            }
          }
          v14 = *(unsigned int **)(a3 + 24);
        }
LABEL_90:
        if (v14)
        {
          v57 = v14 + 4;
          v58 = *v14;
          if ((_DWORD)v58)
          {
            v59 = 0;
            while (*(_DWORD *)(*(_QWORD *)&v57[v59] + 8) != 43)
            {
              v59 += 2;
              if (2 * v58 == v59)
                goto LABEL_128;
            }
            v60 = &v57[v59];
          }
          else
          {
            v60 = v14 + 4;
          }
          v61 = &v57[2 * v58];
          if (v60 != v61)
          {
            v62 = *(_QWORD *)v60;
LABEL_100:
            v63 = *(unsigned int *)(v62 + 16);
            if ((_DWORD)v63)
            {
              v64 = (unsigned __int8 **)(v62 + 64);
              for (k = 8 * v63; k; k -= 8)
              {
                v66 = *v64;
                v67 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)*v64 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
                v68 = *(_DWORD *)(v67 + 16);
                if (v67)
                  v69 = v68 == 11;
                else
                  v69 = 0;
                if (v69)
                {
                  if (((v68 >> 19) & 0x1FF) - 166 < 0x35)
                    goto LABEL_117;
                }
                else if (v67 && v68 == 44)
                {
                  v70 = sub_22F114198(*(_QWORD *)(v67 + 24));
                  if ((*(_BYTE *)(v70 + 74) & 1) != 0 || *(_QWORD *)(v70 + 128) >= 8uLL)
                    goto LABEL_117;
                }
                else
                {
                  v71 = v68;
                  v72 = (1 << v68) & 0x8180001600;
                  if (v71 <= 0x27 && v72 != 0)
                  {
LABEL_117:
                    v74 = sub_22EFFA6B0(v66);
                    if (*v74 == 161)
                    {
                      v75 = *((_QWORD *)v74 + 2);
                      if (v75)
                        v75 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v75 + 32))(v75);
                      v154 = v75;
                      sub_22F275184((uint64_t)&v151, &v154, (uint64_t)&v158);
                    }
                  }
                }
                ++v64;
              }
            }
            v76 = v60 + 2;
            while (v76 != v61)
            {
              v77 = *(_QWORD *)v76;
              v76 += 2;
              v62 = v77;
              if (*(_DWORD *)(v77 + 8) == 43)
              {
                v60 = v76 - 2;
                goto LABEL_100;
              }
            }
            v14 = *(unsigned int **)(a3 + 24);
          }
LABEL_128:
          if (v14)
          {
            v78 = v14 + 4;
            v79 = *v14;
            if ((_DWORD)v79)
            {
              v80 = 0;
              while (*(_DWORD *)(*(_QWORD *)&v78[v80] + 8) != 66)
              {
                v80 += 2;
                if (2 * v79 == v80)
                  goto LABEL_166;
              }
              v81 = &v78[v80];
            }
            else
            {
              v81 = v14 + 4;
            }
            v82 = &v78[2 * v79];
            if (v81 != v82)
            {
              v83 = *(_QWORD *)v81;
LABEL_138:
              v84 = *(unsigned int *)(v83 + 16);
              if ((_DWORD)v84)
              {
                v85 = (unsigned __int8 **)(v83 + 104);
                for (m = 8 * v84; m; m -= 8)
                {
                  v87 = *v85;
                  v88 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)*v85 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
                  v89 = *(_DWORD *)(v88 + 16);
                  if (v88)
                    v90 = v89 == 11;
                  else
                    v90 = 0;
                  if (v90)
                  {
                    if (((v89 >> 19) & 0x1FF) - 166 < 0x35)
                      goto LABEL_155;
                  }
                  else if (v88 && v89 == 44)
                  {
                    v91 = sub_22F114198(*(_QWORD *)(v88 + 24));
                    if ((*(_BYTE *)(v91 + 74) & 1) != 0 || *(_QWORD *)(v91 + 128) >= 8uLL)
                      goto LABEL_155;
                  }
                  else
                  {
                    v92 = v89;
                    v93 = (1 << v89) & 0x8180001600;
                    if (v92 <= 0x27 && v93 != 0)
                    {
LABEL_155:
                      v95 = sub_22EFFA6B0(v87);
                      if (*v95 == 161)
                      {
                        v96 = *((_QWORD *)v95 + 2);
                        if (v96)
                          v96 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v96 + 32))(v96);
                        v154 = v96;
                        sub_22F275184((uint64_t)&v151, &v154, (uint64_t)&v158);
                      }
                    }
                  }
                  ++v85;
                }
              }
              v97 = v81 + 2;
              while (v97 != v82)
              {
                v98 = *(_QWORD *)v97;
                v97 += 2;
                v83 = v98;
                if (*(_DWORD *)(v98 + 8) == 66)
                {
                  v81 = v97 - 2;
                  goto LABEL_138;
                }
              }
              v14 = *(unsigned int **)(a3 + 24);
            }
LABEL_166:
            if (v14)
            {
              v101 = *v14;
              v99 = v14 + 4;
              v100 = v101;
              if (v101)
              {
                v102 = 8 * v100;
                v103 = v99;
                while (*(_DWORD *)(*(_QWORD *)v103 + 8) != 44)
                {
                  v103 += 2;
                  v102 -= 8;
                  if (!v102)
                    goto LABEL_202;
                }
              }
              else
              {
                v103 = v99;
              }
              v104 = &v99[2 * v100];
              if (v103 != v104)
              {
                v105 = *(_QWORD *)v103;
LABEL_175:
                v106 = *(unsigned int *)(v105 + 16);
                if ((_DWORD)v106)
                {
                  v107 = (unsigned __int8 **)(v105 + 64);
                  for (n = 8 * v106; n; n -= 8)
                  {
                    v109 = *v107;
                    v110 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)*v107 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
                    v111 = *(_DWORD *)(v110 + 16);
                    if (v110)
                      v112 = v111 == 11;
                    else
                      v112 = 0;
                    if (v112)
                    {
                      if (((v111 >> 19) & 0x1FF) - 166 < 0x35)
                        goto LABEL_192;
                    }
                    else if (v110 && v111 == 44)
                    {
                      v113 = sub_22F114198(*(_QWORD *)(v110 + 24));
                      if ((*(_BYTE *)(v113 + 74) & 1) != 0 || *(_QWORD *)(v113 + 128) >= 8uLL)
                        goto LABEL_192;
                    }
                    else
                    {
                      v114 = v111;
                      v115 = (1 << v111) & 0x8180001600;
                      if (v114 <= 0x27 && v115 != 0)
                      {
LABEL_192:
                        v117 = sub_22EFFA6B0(v109);
                        if (*v117 == 161)
                        {
                          v118 = *((_QWORD *)v117 + 2);
                          if (v118)
                            v118 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v118 + 32))(v118);
                          v154 = v118;
                          sub_22F275184((uint64_t)&v151, &v154, (uint64_t)&v158);
                        }
                      }
                    }
                    ++v107;
                  }
                }
                v119 = v103 + 2;
                while (v119 != v104)
                {
                  v120 = *(_QWORD *)v119;
                  v119 += 2;
                  v105 = v120;
                  if (*(_DWORD *)(v120 + 8) == 44)
                  {
                    v103 = v119 - 2;
                    goto LABEL_175;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_202:
    v121 = v151;
    v122 = (llvm *)((char *)v151 + 8 * DWORD2(v152));
    if ((_DWORD)v152)
    {
      if (DWORD2(v152))
      {
        v123 = 8 * DWORD2(v152);
        v124 = v151;
        while ((*(_QWORD *)v124 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v124 = (llvm *)((char *)v124 + 8);
          v123 -= 8;
          if (!v123)
            goto LABEL_207;
        }
      }
      else
      {
        v124 = v151;
      }
    }
    else
    {
LABEL_207:
      v124 = (llvm *)((char *)v151 + 8 * DWORD2(v152));
    }
    v125 = (llvm *)((char *)v151 + 8 * DWORD2(v152));
    if (v124 == v125)
    {
      v137 = DWORD2(v152);
    }
    else
    {
      do
      {
        v126 = *(_QWORD *)v124;
        v127 = *(_QWORD *)(*(_QWORD *)a1 + 808);
        v128 = *(_QWORD *)(v127 + 3432);
        v129 = 200 * *(unsigned int *)(v127 + 3440);
        while (v129)
        {
          if (v126)
            v130 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v126 + 32))(v126);
          else
            v130 = 0;
          v131 = v128 + v129;
          v158 = 0;
          if (sub_22F24C318(*(_QWORD *)(v128 + v129 - 200), *(_DWORD *)(v128 + v129 - 184), v130, &v158))
          {
            v132 = v158;
            v133 = *(_QWORD *)(v131 - 200);
            v134 = *(unsigned int *)(v131 - 184);
          }
          else
          {
            v133 = *(_QWORD *)(v131 - 200);
            v134 = *(unsigned int *)(v131 - 184);
            v132 = (int *)(v133 + 16 * v134);
          }
          v129 -= 200;
          if (v132 != (int *)(v133 + 16 * v134))
          {
            if (!*(_BYTE *)(v128 + v129 + 192))
            {
              if (v126)
                v136 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v126 + 32))(v126);
              else
                v136 = 0;
              v154 = v136;
              sub_22F275184((uint64_t)&v147, &v154, (uint64_t)&v158);
            }
            break;
          }
        }
        v135 = (llvm *)((char *)v124 + 8);
        v124 = v122;
        if (v135 != v122)
        {
          v124 = v135;
          while ((*(_QWORD *)v124 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v124 = (llvm *)((char *)v124 + 8);
            if (v124 == v122)
            {
              v124 = v122;
              break;
            }
          }
        }
      }
      while (v124 != v125);
      v137 = DWORD2(v152);
      v121 = v151;
    }
    llvm::deallocate_buffer(v121, (void *)(8 * v137));
    if ((_DWORD)v148)
    {
      a1[2] = 2;
      v139 = sub_22F28313C(*(_QWORD *)(*(_QWORD *)a1 + 808) + 3432);
      v140 = (llvm *)((char *)v147 + 8 * v149);
      if ((_DWORD)v148)
      {
        if (v149)
        {
          v141 = 8 * v149;
          v142 = v147;
          while ((*(_QWORD *)v142 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v142 = (llvm *)((char *)v142 + 8);
            v141 -= 8;
            if (!v141)
              goto LABEL_240;
          }
        }
        else
        {
          v142 = v147;
        }
      }
      else
      {
LABEL_240:
        v142 = (llvm *)((char *)v147 + 8 * v149);
      }
      v143 = (llvm *)((char *)v147 + 8 * v149);
      if (v142 != v143)
      {
        v144 = xmmword_22F44E350;
        do
        {
          v145 = *(_QWORD *)v142;
          v153[0] = 0;
          v153[1] = 0;
          v151 = (llvm *)v153;
          v152 = v144;
          v154 = v145;
          v155 = v157;
          v156 = v144;
          if (v145)
          {
            v158 = (int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v145 + 32))(v145);
            v159 = (uint64_t)v161;
            v160 = xmmword_22F44E350;
            if ((_QWORD)v156)
              sub_22E3B2DB8((uint64_t)&v159, (uint64_t)&v155);
          }
          else
          {
            v158 = 0;
            v159 = (uint64_t)v161;
            v160 = v144;
          }
          sub_22F2831A8(v139, (uint64_t *)&v158);
          if ((_QWORD *)v159 != v161)
            free((void *)v159);
          if (v155 != v157)
            free(v155);
          if (v151 != (llvm *)v153)
            free(v151);
          v146 = (llvm *)((char *)v142 + 8);
          v142 = v140;
          v144 = xmmword_22F44E350;
          if (v146 != v140)
          {
            v142 = v146;
            while ((*(_QWORD *)v142 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v142 = (llvm *)((char *)v142 + 8);
              if (v142 == v140)
              {
                v142 = v140;
                break;
              }
            }
          }
        }
        while (v142 != v143);
      }
      *(_QWORD *)(v139 + 184) = *(_QWORD *)(a2 + 1624);
      *(_BYTE *)(v139 + 192) = 1;
    }
    llvm::deallocate_buffer(v147, (void *)(8 * v149));
  }
  return a1;
}

double sub_22E5B9A78@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  llvm::Constant *v20;
  llvm::Type *v21;
  uint64_t NullValue;
  __int128 v23;
  double result;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  unint64_t v35;
  _DWORD *v36;
  unsigned int v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  _OWORD v47[8];
  uint64_t v48;
  unint64_t v49;
  __int128 v50;
  __int128 v51;
  double v52[12];
  _OWORD v53[8];
  uint64_t v54;
  _OWORD v55[8];
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  _OWORD v78[2];
  uint64_t v79;
  __int128 v80[2];
  uint64_t v81;

  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
  v9 = *(_QWORD *)(a2 + 1624);
  *(_QWORD *)&v66 = 0;
  v10 = sub_22F258E38(*(_QWORD *)(a1 + 2624), *(_DWORD *)(a1 + 2640), v9, &v66);
  v11 = *(unsigned int *)(a1 + 2640);
  if (v10)
    v12 = v66;
  else
    v12 = *(_QWORD *)(a1 + 2624) + 32 * v11;
  if (v12 == *(_QWORD *)(a1 + 2624) + 32 * v11)
  {
    sub_22F2832CC((uint64_t)&v66, a1 + 2624, (uint64_t *)(a2 + 1624));
    v12 = v66;
  }
  v13 = 0;
  v76 = 0;
  v77 = 0;
  v75 = 0;
  v67 = 0uLL;
  *((_QWORD *)&v66 + 1) = 0;
  LODWORD(v68) = 0;
  *(_QWORD *)&v69 = 0;
  *((_QWORD *)&v68 + 1) = 0;
  v70 = 0uLL;
  *(_QWORD *)((char *)&v71 + 4) = 2;
  v72 = 0u;
  v73 = 0u;
  if (a3)
    v13 = (*(uint64_t (**)(_QWORD *))(*a3 + 32))(a3);
  *(_QWORD *)&v57 = 0;
  if (sub_22F2875F0(*(_QWORD *)(v12 + 8), *(_DWORD *)(v12 + 24), v13, &v57)
    && (_QWORD)v57 != *(_QWORD *)(v12 + 8) + 168 * *(unsigned int *)(v12 + 24))
  {
    v15 = *(_QWORD *)(v57 + 16);
    v14 = *(_QWORD *)(v57 + 24);
    v16 = *(_OWORD *)(v57 + 144);
    v72 = *(_OWORD *)(v57 + 128);
    v73 = v16;
    v74 = *(_QWORD *)(v57 + 160);
    v17 = *(_OWORD *)(v57 + 80);
    v68 = *(_OWORD *)(v57 + 64);
    v69 = v17;
    v18 = *(_OWORD *)(v57 + 112);
    v70 = *(_OWORD *)(v57 + 96);
    v71 = v18;
    v19 = *(_OWORD *)(v57 + 48);
    v66 = *(_OWORD *)(v57 + 32);
    v67 = v19;
    goto LABEL_11;
  }
  v25 = sub_22F368234(v8, "lasprivate.conditional", 0x16uLL, 0);
  sub_22EFC3340(v25);
  if (v25)
    v26 = v25 + 64;
  else
    v26 = 0;
  v27 = a3[6];
  v28 = *(_QWORD *)(v27 & 0xFFFFFFFFFFFFFFF0);
  if (v28)
  {
    v29 = *(_DWORD *)(v28 + 16);
    if ((v29 & 0xFE) == 0x28)
      goto LABEL_32;
  }
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
  {
    v44 = a3[6];
    v28 = sub_22F10CF48(v28);
    v27 = v44;
    if (v28)
    {
      v29 = *(_DWORD *)(v28 + 16);
LABEL_32:
      if ((v29 & 0x100000) != 0)
      {
        do
        {
          v28 = *(_QWORD *)(*(_QWORD *)(v28 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v28)
          {
            v45 = *(_DWORD *)(v28 + 16);
            if ((v45 & 0xFE) == 0x28)
              continue;
          }
          v28 = sub_22F10CF48(v28);
          v45 = *(_DWORD *)(v28 + 16);
        }
        while ((v45 & 0x100000) != 0);
      }
      v27 = *(_QWORD *)(v28 + 32);
    }
  }
  v76 = sub_22E5A4124(v8, v26, v27);
  v75 = sub_22E5A4124(v8, v26, *(_QWORD *)(v8 + 16408));
  (*(void (**)(uint64_t))(*(_QWORD *)v25 + 104))(v25);
  v30 = sub_22EF6477C(v8, v25);
  v77 = v30;
  v31 = sub_22EF5B404(v8, (unint64_t)a3, 0);
  v32 = 0;
  v33 = a3[5];
  v34 = "";
  v46 = v12 + 8;
  if ((v33 & 7) == 0)
  {
    v35 = v33 & 0xFFFFFFFFFFFFFFF8;
    if (v35)
    {
      v36 = *(_DWORD **)(v35 + 16);
      v37 = *v36;
      v34 = (const char *)(v36 + 4);
      v32 = v37;
    }
  }
  LOWORD(v59) = 261;
  *(_QWORD *)&v57 = v34;
  *((_QWORD *)&v57 + 1) = v32;
  v38 = sub_22E4D85B8(a2, v30, v31, (uint64_t)&v57, 0);
  v40 = 0;
  if (v38 <= 7)
    v41 = 0;
  else
    v41 = v38 & 0xFFFFFFFFFFFFFFF8;
  if (v38 <= 7)
    v42 = 0;
  else
    v42 = v39 & 0xFFFFFFFFFFFFFFF8;
  if (v38 >= 8)
    v40 = 1 << (v39 & 7 | (8 * (v38 & 7)));
  sub_22E6281E0(*(_QWORD **)(a2 + 144), v30, (uint64_t)v78);
  v49 = v41;
  *(_QWORD *)&v50 = v42;
  *((_QWORD *)&v50 + 1) = v40;
  LODWORD(v51) = 0;
  *((_QWORD *)&v51 + 1) = 0;
  v52[0] = 0.0;
  v43 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
  v80[0] = v78[0];
  v80[1] = v78[1];
  v81 = v79;
  v58 = 0uLL;
  *((_QWORD *)&v57 + 1) = 0;
  LODWORD(v59) = 0;
  *(_QWORD *)&v60 = 0;
  *((_QWORD *)&v59 + 1) = 0;
  v61 = 0uLL;
  *(_QWORD *)((char *)&v62 + 4) = 2;
  LODWORD(v57) = 0;
  v63 = 0u;
  v64 = 0u;
  sub_22E3C113C((uint64_t)&v57, (__int128 *)&v49, v30, 0, v80, v43);
  v72 = v63;
  v73 = v64;
  v74 = v65;
  v68 = v59;
  v69 = v60;
  v70 = v61;
  v71 = v62;
  v66 = v57;
  v67 = v58;
  v49 = (*(uint64_t (**)(_QWORD *))(*a3 + 32))(a3);
  sub_22F283360((uint64_t)&v57, v46, (uint64_t *)&v49, (uint64_t *)&v77, &v76, &v75, (uint64_t)&v66);
  v14 = v75;
  v15 = v76;
LABEL_11:
  v55[6] = v72;
  v55[7] = v73;
  v56 = v74;
  v55[2] = v68;
  v55[3] = v69;
  v55[4] = v70;
  v55[5] = v71;
  v55[0] = v66;
  v55[1] = v67;
  sub_22E4DD05C(a2, (uint64_t)v55, v14, (uint64_t)&v57);
  v20 = (llvm::Constant *)sub_22E66C868(*(_QWORD *)(a2 + 144) + 280, *(_QWORD *)(v8 + 16408), 0);
  NullValue = llvm::Constant::getNullValue(v20, v21);
  v53[6] = v63;
  v53[7] = v64;
  v54 = v65;
  v53[2] = v59;
  v53[3] = v60;
  v53[4] = v61;
  v53[5] = v62;
  v53[0] = v57;
  v53[1] = v58;
  sub_22E4E87FC(a2, NullValue, v53, 0);
  v47[6] = v72;
  v47[7] = v73;
  v48 = v74;
  v47[2] = v68;
  v47[3] = v69;
  v47[4] = v70;
  v47[5] = v71;
  v47[0] = v66;
  v47[1] = v67;
  sub_22E4DD05C(a2, (uint64_t)v47, v15, (uint64_t)&v49);
  v23 = v51;
  *a4 = v50;
  a4[1] = v23;
  result = v52[0];
  a4[2] = *(_OWORD *)v52;
  return result;
}

uint64_t sub_22E5B9F3C(_QWORD *a1, uint64_t a2, std::string::size_type a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  llvm::Constant *v14;
  uint64_t v15;
  llvm::Constant *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  std::string *p_p;
  uint64_t (*v25)(unsigned int *, _QWORD *, void (***)(_QWORD));
  uint64_t v26;
  std::string __p;
  uint64_t v28;
  uint64_t *v29;
  unsigned int v30;
  _OWORD v31[8];
  uint64_t v32;
  _QWORD v33[4];
  __int16 v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v14 = (llvm::Constant *)sub_22E66C868(*(_QWORD *)(a2 + 144) + 280, *(_QWORD *)(a3 + 64), 0);
  v35 = a4;
  v36 = a5;
  v37 = "iv";
  v38 = 2;
  sub_22F27BE70(&__p, (uint64_t)a1, (uint64_t)&v35, 2);
  v34 = 260;
  v33[0] = &__p;
  v15 = sub_22F27D020((uint64_t)a1, v14, (llvm::Twine *)v33);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  llvm::GlobalObject::setAlignment();
  sub_22E619C24(v15, *(_QWORD *)(a3 + 64), 0, 0, a2, (uint64_t)v33);
  v16 = (llvm::Constant *)sub_22E66C868(*(_QWORD *)(a2 + 144) + 280, *(_QWORD *)(a6 + 64), 0);
  v39 = 261;
  v35 = a4;
  v36 = a5;
  v17 = sub_22F27D020((uint64_t)a1, v16, (llvm::Twine *)&v35);
  llvm::GlobalObject::setAlignment();
  sub_22F283454(a2, v17, *(_QWORD *)(a6 + 64), *(_QWORD *)(a6 + 24), 2, (uint64_t)&v35);
  v18 = *(_OWORD *)(a3 + 112);
  v31[6] = *(_OWORD *)(a3 + 96);
  v31[7] = v18;
  v32 = *(_QWORD *)(a3 + 128);
  v19 = *(_OWORD *)(a3 + 48);
  v31[2] = *(_OWORD *)(a3 + 32);
  v31[3] = v19;
  v20 = *(_OWORD *)(a3 + 80);
  v31[4] = *(_OWORD *)(a3 + 64);
  v31[5] = v20;
  v21 = *(_OWORD *)(a3 + 16);
  v31[0] = *(_OWORD *)a3;
  v31[1] = v21;
  v22 = sub_22F25F748(a2, (uint64_t)v31, a7);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
  __p.__r_.__value_.__l.__size_ = a3;
  __p.__r_.__value_.__r.__words[2] = v22;
  v28 = a6;
  v29 = &v35;
  v30 = a7;
  if ((*(_BYTE *)(*(_QWORD *)(a1[1] + 152) + 76) & 2) != 0)
  {
    p_p = &__p;
    v25 = sub_22E5D0E38;
    v26 = 0;
    return sub_22F27B464(&p_p, a2);
  }
  else
  {
    p_p = &__p;
    v25 = sub_22E5D0E38;
    v26 = 0;
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, std::string **, _QWORD, _QWORD))(*a1 + 128))(a1, a2, a4, a5, &p_p, a7, 0);
  }
}

void sub_22E5BA1A8(uint64_t a1, _QWORD *a2, unsigned __int8 *a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  __int128 v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  _OWORD v34[8];
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  _OWORD v48[8];
  uint64_t v49;
  __int128 v50;
  char v51;
  _OWORD v52[8];
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  _OWORD v72[3];
  _OWORD v73[3];
  _BYTE v74[64];
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD v81[2];
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  _BYTE v91[24];
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  _OWORD v97[2];
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102[2];
  uint64_t v103;

  if (*(_DWORD *)(*(_QWORD *)(a2[18] + 152) + 72) >= 0x32u)
  {
    v4 = *(unsigned int *)(a1 + 3440);
    if ((_DWORD)v4)
    {
      v81[0] = *(_QWORD *)(a1 + 3432);
      v81[1] = v4;
      v82 = 0u;
      v83 = 0u;
      v86 = 0;
      v85 = 0uLL;
      LODWORD(v87) = 0;
      v88 = 0uLL;
      *(_QWORD *)v91 = 0;
      v90 = 0;
      *(_QWORD *)&v91[12] = 2;
      v95 = 0;
      v96 = 0;
      v93 = 0u;
      v92 = 0u;
      if (sub_22E5BA5E4((uint64_t)v81, a3))
      {
        v6 = v82;
        v7 = v84;
        v8 = v86;
        v9 = v87;
        v10 = v90;
        v11 = *(_QWORD *)&v91[16];
        v12 = v93;
        v13 = v94;
        v80 = v95;
        if (v95 == a2[203])
        {
          v14 = (uint64_t)a2;
          v32 = (uint64_t)a2;
          v33 = v83;
          v15 = v89;
          v28 = v85;
          v29 = v88;
          v30 = *(_OWORD *)v91;
          v31 = v92;
          sub_22E4D8D7C(v14, (unsigned int *)v82, (uint64_t)v74);
          v37 = v28;
          v38 = v8;
          v39 = v9;
          v40 = v29;
          v41 = v15;
          v42 = v10;
          v43 = v30;
          v44 = v11;
          v45 = v31;
          v46 = v12;
          v47 = v13;
          v34[6] = v77;
          v34[7] = v78;
          v35 = v79;
          v36 = v7;
          v34[2] = *(_OWORD *)&v74[32];
          v34[3] = *(_OWORD *)&v74[48];
          v34[4] = v75;
          v34[5] = v76;
          v34[0] = *(_OWORD *)v74;
          v34[1] = *(_OWORD *)&v74[16];
          sub_22EFF605C(v6);
          sub_22E5B9F3C((_QWORD *)a1, v32, (std::string::size_type)&v36, v33, *((uint64_t *)&v33 + 1), (uint64_t)v34, v16);
        }
        else
        {
          v17 = v82;
          v18 = sub_22F2878BC(a1 + 2624, &v80);
          if (*((_QWORD *)&v17 + 1))
            v19 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v17 + 1) + 32))(*((_QWORD *)&v17 + 1));
          else
            v19 = 0;
          *(_QWORD *)v74 = 0;
          v20 = sub_22F2875F0(v18[1], *((_DWORD *)v18 + 6), v19, v74);
          v21 = *(_QWORD *)v74;
          if (!v20)
            v21 = v18[1] + 168 * *((unsigned int *)v18 + 6);
          v22 = *(_QWORD *)(v21 + 8);
          v23 = *(_QWORD *)(v21 + 24);
          sub_22E4D8D7C((uint64_t)a2, (unsigned int *)v17, (uint64_t)v74);
          v72[0] = *(_OWORD *)&v74[8];
          v72[1] = *(_OWORD *)&v74[24];
          v72[2] = *(_OWORD *)&v74[40];
          v24 = sub_22EF5B848(*(_QWORD *)(a2[18] + 144), v22, 0);
          v25 = sub_22E66C868(a2[18] + 280, v24, 0);
          v26 = sub_22E66C868(a2[18] + 280, v22, 0);
          LOWORD(v65) = 257;
          sub_22F245864(a2 + 34, v72, v25, v26, (uint64_t)&v63, (uint64_t)v73);
          v99 = v73[0];
          v100 = v73[1];
          v101 = v73[2];
          sub_22E6281E0((_QWORD *)a2[18], v22, (uint64_t)v97);
          v54 = v99;
          v55 = v100;
          v56 = v101;
          v27 = *(_QWORD *)(a2[18] + 144);
          v102[0] = v97[0];
          v102[1] = v97[1];
          v103 = v98;
          LODWORD(v65) = 0;
          *((_QWORD *)&v63 + 1) = 0;
          v64 = 0uLL;
          *(_QWORD *)&v66 = 0;
          *((_QWORD *)&v65 + 1) = 0;
          v67 = 0uLL;
          *(_QWORD *)((char *)&v68 + 4) = 2;
          LODWORD(v63) = 0;
          v69 = 0u;
          v70 = 0u;
          sub_22E3C113C((uint64_t)&v63, &v54, v22, 0, v102, v27);
          v52[6] = v69;
          v52[7] = v70;
          v53 = v71;
          v52[2] = v65;
          v52[3] = v66;
          v52[4] = v67;
          v52[5] = v68;
          v52[0] = v63;
          v52[1] = v64;
          sub_22E4DD05C((uint64_t)a2, (uint64_t)v52, v23, (uint64_t)&v54);
          sub_22E66C868(a2[18] + 280, *(_QWORD *)(v23 + 48), 0);
          v50 = (unint64_t)llvm::ConstantInt::get();
          v51 = 0;
          v48[6] = v60;
          v48[7] = v61;
          v49 = v62;
          v48[2] = v56;
          v48[3] = v57;
          v48[4] = v58;
          v48[5] = v59;
          v48[0] = v54;
          v48[1] = v55;
          sub_22E3BF7BC(a2, &v50, (uint64_t)v48, 1, 1, 0);
        }
      }
    }
  }
}

uint64_t sub_22E5BA5E4(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  uint64_t result;

  v2 = *a2;
  if (a2 && (v2 & 0xFE) == 0x70)
  {
    v3 = *(_DWORD *)a2;
    switch((*(_DWORD *)a2 >> 18) & 0x3F)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
        return sub_22E5D0D2C(a1, (uint64_t)a2);
      default:
        goto LABEL_7;
    }
  }
  if (a2 && v2 == 233)
  {
    v3 = *(_DWORD *)a2;
    switch((*(_DWORD *)a2 >> 18) & 0x1F)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
        return sub_22E5D0D2C(a1, (uint64_t)a2);
      default:
LABEL_7:
        v2 = v3;
        break;
    }
  }
  __asm { BR              X10 }
  return result;
}

BOOL sub_22E5BA6AC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v2 = *v1;
  v3 = 200 * v1[1];
  v4 = *v1 + v3;
  while (v3)
  {
    v5 = *(_QWORD *)(v0 + 16);
    if (v5)
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
    else
      v6 = 0;
    v7 = sub_22F28783C(v4 - 200, v6);
    v8 = *(_QWORD *)(v4 - 168);
    v3 -= 200;
    v4 -= 200;
    if (v8 != v7)
    {
      v9 = v2 + v3;
      if (*(_BYTE *)(v2 + v3 + 192))
        return 0;
      v10 = v7;
      v1[2] = v0;
      v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v0 + 16) + 32))(*(_QWORD *)(v0 + 16));
      v13 = *(_QWORD *)(v10 + 8);
      v14 = *(_QWORD *)(v10 + 16);
      v1[3] = v12;
      v1[4] = v13;
      v1[5] = v14;
      *((_OWORD *)v1 + 3) = *(_OWORD *)(v9 + 48);
      v15 = *(_QWORD *)(v9 + 176);
      v17 = *(_OWORD *)(v9 + 144);
      v16 = *(_OWORD *)(v9 + 160);
      *((_OWORD *)v1 + 8) = *(_OWORD *)(v9 + 128);
      *((_OWORD *)v1 + 9) = v17;
      *((_OWORD *)v1 + 10) = v16;
      v1[22] = v15;
      v19 = *(_OWORD *)(v9 + 96);
      v18 = *(_OWORD *)(v9 + 112);
      v20 = *(_OWORD *)(v9 + 80);
      *((_OWORD *)v1 + 4) = *(_OWORD *)(v9 + 64);
      *((_OWORD *)v1 + 5) = v20;
      *((_OWORD *)v1 + 6) = v19;
      *((_OWORD *)v1 + 7) = v18;
      v1[23] = *(_QWORD *)(v9 + 184);
      return v1[2] == v0;
    }
  }
  return v1[2] == v0;
}

void sub_22E5BA80C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  llvm::Type *v27;
  uint64_t NullValue;
  int v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  int v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  llvm::Constant **v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  const char *v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  _OWORD v72[8];
  uint64_t v73;
  __int128 v74[3];
  const char *v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE v82[24];
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  _OWORD v89[8];
  uint64_t v90;
  _OWORD v91[8];
  uint64_t v92;
  _OWORD v93[8];
  uint64_t v94;
  _OWORD v95[2];
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  _OWORD v103[2];
  uint64_t v104;
  __int128 v105[2];
  uint64_t v106;
  __int128 v107[3];
  _DWORD *v108;
  uint64_t v109;
  _QWORD v110[5];

  v110[2] = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 152) + 72) >= 0x32u)
  {
    v5 = *(_DWORD *)(a1 + 3440);
    if (v5)
    {
      v9 = *(_QWORD *)(a1 + 3432);
      v10 = v9 + 200 * v5;
      v11 = 200 * v5;
      while (v11)
      {
        v12 = *(unsigned __int8 *)(v10 - 8);
        v10 -= 200;
        v11 -= 200;
        if (!v12)
        {
          v13 = *(_QWORD *)(v9 + v11 + 184);
          if (v13 == *(_QWORD *)(a2 + 1624))
          {
            *(_QWORD *)&v95[0] = 0;
            if ((sub_22F258E38(*(_QWORD *)(a1 + 2624), *(_DWORD *)(a1 + 2640), v13, v95) & 1) != 0)
              v14 = *(_QWORD *)&v95[0];
            else
              v14 = *(_QWORD *)(a1 + 2624) + 32 * *(unsigned int *)(a1 + 2640);
            v59 = v14;
            v108 = v110;
            v109 = 0x400000000;
            sub_22F421BB4((uint64_t)&v108, *(_DWORD *)(a3 + 8));
            v15 = sub_22E59F470(a3, v108[v109 - 1]);
            v16 = v9 + v11;
            v17 = *(uint64_t **)(v9 + v11 + 24);
            v18 = *(uint64_t **)(v16 + 32);
            if (v17 != v18)
            {
              v19 = v15;
              v58 = (uint64_t *)(a2 + 272);
              v57 = v16 + 48;
              do
              {
                v20 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)*v17 + 32))(*v17);
                if (sub_22F0D8458(v19, (uint64_t)v20))
                {
                  v21 = v20 ? (*(uint64_t (**)(_QWORD *))(*v20 + 32))(v20) : 0;
                  *(_QWORD *)&v93[0] = v21;
                  *(_QWORD *)&v95[0] = 0;
                  if (!sub_22F275208((uint64_t *)a4, v93, v95)
                    || *(_QWORD *)&v95[0] == *(_QWORD *)a4 + 8 * *(unsigned int *)(a4 + 16))
                  {
                    *(_QWORD *)&v95[0] = 0;
                    if ((sub_22F2875F0(*(_QWORD *)(v59 + 8), *(_DWORD *)(v59 + 24), *v17, v95) & 1) != 0)
                      v22 = *(_QWORD *)&v95[0];
                    else
                      v22 = *(_QWORD *)(v59 + 8) + 168 * *(unsigned int *)(v59 + 24);
                    v23 = *(_OWORD *)(v22 + 128);
                    v99 = *(_OWORD *)(v22 + 112);
                    v100 = v23;
                    v101 = *(_OWORD *)(v22 + 144);
                    v102 = *(_QWORD *)(v22 + 160);
                    v24 = *(_OWORD *)(v22 + 48);
                    v25 = *(_OWORD *)(v22 + 80);
                    v26 = *(_OWORD *)(v22 + 96);
                    v96 = *(_OWORD *)(v22 + 64);
                    v97 = v25;
                    v98 = v26;
                    v95[0] = *(_OWORD *)(v22 + 32);
                    v95[1] = v24;
                    v91[4] = v26;
                    v91[5] = v99;
                    v92 = v102;
                    v91[6] = v23;
                    v91[7] = v101;
                    v91[2] = v96;
                    v91[3] = v25;
                    v91[0] = v95[0];
                    v91[1] = v24;
                    sub_22E4DD05C(a2, (uint64_t)v91, *(_QWORD *)(v22 + 24), (uint64_t)v93);
                    v89[6] = v93[6];
                    v89[7] = v93[7];
                    v90 = v94;
                    v89[2] = v93[2];
                    v89[3] = v93[3];
                    v89[4] = v93[4];
                    v89[5] = v93[5];
                    v89[0] = v93[0];
                    v89[1] = v93[1];
                    v55 = (llvm::Constant **)sub_22F25F748(a2, (uint64_t)v89, *(_DWORD *)(a3 + 12));
                    LOWORD(v78) = 257;
                    NullValue = llvm::Constant::getNullValue(*v55, v27);
                    v53 = sub_22E3C18F4((uint64_t)v58, 33, (uint64_t *)v55, NullValue, (uint64_t)&v75);
                    v75 = "lpc.then";
                    LOWORD(v78) = 259;
                    v54 = (_QWORD *)operator new();
                    llvm::BasicBlock::BasicBlock();
                    v75 = "lpc.done";
                    LOWORD(v78) = 259;
                    v56 = (_QWORD *)operator new();
                    llvm::BasicBlock::BasicBlock();
                    v52 = llvm::User::operator new((llvm::User *)0x40);
                    MEMORY[0x23489C09C](v52, v54, v56, v53, 0);
                    LOWORD(v78) = 257;
                    sub_22E3C12C8(v58, v52, (uint64_t)&v75);
                    sub_22E5ED9B4((_QWORD *)a2, v54, 0);
                    *(_QWORD *)&v107[0] = v20;
                    v75 = 0;
                    v29 = sub_22E3CED3C((uint64_t *)(a2 + 2904), v107, &v75);
                    v30 = v75;
                    if (!v29)
                      v30 = (const char *)(*(_QWORD *)(a2 + 2904) + 56 * *(unsigned int *)(a2 + 2920));
                    v86 = *(_OWORD *)(v30 + 8);
                    v87 = *(_OWORD *)(v30 + 24);
                    v88 = *(_OWORD *)(v30 + 40);
                    v31 = v20[6];
                    v32 = *(_QWORD *)(v31 & 0xFFFFFFFFFFFFFFF0);
                    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v32 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
                    {
                      v74[0] = v86;
                      v74[1] = v87;
                      v74[2] = v88;
                      sub_22E4E9BF4(a2, v74, v31, 0, (uint64_t)&v75);
                      v33 = v76;
                      v34 = v75;
                      v35 = v77;
                      v36 = v78;
                      v37 = v79;
                      v38 = v80;
                      v39 = v81;
                      v40 = *(_OWORD *)v82;
                    }
                    else
                    {
                      v41 = *(_DWORD *)(v32 + 16);
                      if ((v41 & 0xFE) == 0x28)
                      {
                        if ((v41 & 0x100000) != 0)
                        {
                          do
                          {
                            v32 = *(_QWORD *)(*(_QWORD *)(v32 + 32) & 0xFFFFFFFFFFFFFFF0);
                            if (v32)
                            {
                              v51 = *(_DWORD *)(v32 + 16);
                              if ((v51 & 0xFE) == 0x28)
                                continue;
                            }
                            v32 = sub_22F10CF48(v32);
                            v51 = *(_DWORD *)(v32 + 16);
                          }
                          while ((v51 & 0x100000) != 0);
                        }
                        v31 = *(_QWORD *)(v32 + 32);
                      }
                      sub_22E6281E0(*(_QWORD **)(a2 + 144), v31, (uint64_t)v103);
                      v107[0] = v86;
                      v107[1] = v87;
                      v107[2] = v88;
                      v42 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
                      v105[0] = v103[0];
                      v105[1] = v103[1];
                      v106 = v104;
                      v77 = 0;
                      v76 = 0uLL;
                      LODWORD(v78) = 0;
                      v79 = 0uLL;
                      v81 = 0;
                      *(_QWORD *)v82 = 0;
                      *(_QWORD *)&v82[12] = 2;
                      LODWORD(v75) = 0;
                      v83 = 0u;
                      v84 = 0u;
                      sub_22E3C113C((uint64_t)&v75, v107, v31, 0, v105, v42);
                      v33 = v76;
                      v34 = v75;
                      v35 = v77;
                      v36 = v78;
                      v37 = v79;
                      v38 = v80;
                      v39 = v81;
                      v40 = *(_OWORD *)v82;
                    }
                    v72[0] = *(_OWORD *)v57;
                    v43 = *(_OWORD *)(v57 + 16);
                    v44 = *(_OWORD *)(v57 + 32);
                    v45 = *(_OWORD *)(v57 + 64);
                    v72[3] = *(_OWORD *)(v57 + 48);
                    v72[4] = v45;
                    v72[1] = v43;
                    v72[2] = v44;
                    v46 = *(_OWORD *)(v57 + 80);
                    v47 = *(_OWORD *)(v57 + 96);
                    v48 = *(_OWORD *)(v57 + 112);
                    v73 = *(_QWORD *)(v57 + 128);
                    v72[6] = v47;
                    v72[7] = v48;
                    v72[5] = v46;
                    v49 = v17[1];
                    v50 = v17[2];
                    v60 = v34;
                    v61 = v33;
                    v62 = v35;
                    v63 = v36;
                    v64 = v37;
                    v65 = v38;
                    v66 = v39;
                    v67 = v40;
                    v68 = *(_QWORD *)&v82[16];
                    v69 = v83;
                    v70 = v84;
                    v71 = v85;
                    sub_22E5B9F3C((_QWORD *)a1, a2, (std::string::size_type)v72, v49, v50, (uint64_t)&v60, *(_DWORD *)(a3 + 12));
                    v75 = 0;
                    *(_QWORD *)&v76 = a2;
                    sub_22E48EE24((uint64_t *)&v75, 0, 0);
                    sub_22E5ED9B4((_QWORD *)a2, v56, 1);
                    sub_22E48F084(&v75);
                  }
                }
                v17 += 6;
              }
              while (v17 != v18);
            }
            if (v108 != (_DWORD *)v110)
              free(v108);
          }
          return;
        }
      }
    }
  }
}

_QWORD *sub_22E5BAEF4(_QWORD *a1)
{
  *a1 = &off_24FA66C98;
  sub_22E49FAE8((uint64_t)(a1 + 2));
  return a1;
}

void sub_22E5BAF2C()
{
  JUMPOUT(0x2348A0E9CLL);
}

_QWORD *sub_22E5BAF40(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FA65B30;
  result[1] = v3;
  return result;
}

uint64_t sub_22E5BAF74(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FA65B30;
  a2[1] = v2;
  return result;
}

uint64_t sub_22E5BAF90(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *a2;
  v4 = a2[1];
  v5 = *(_QWORD *)(a1 + 8);
  v13 = v5 + 272;
  v14 = *(_OWORD *)(v5 + 320);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v5 + 272));
  v6 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    sub_22E3CB840(v6 + 272, v3, v4);
  }
  else
  {
    *(_QWORD *)(v6 + 320) = 0;
    *(_QWORD *)(v6 + 328) = 0;
  }
  v7 = *(_QWORD *)(a1 + 8);
  v11 = *(_OWORD *)(v7 + 1712);
  v12 = *(_QWORD *)(v7 + 1728);
  sub_22E48BA00((_QWORD *)v7, (uint64_t)&v11);
  v8 = v13;
  if ((_QWORD)v14)
  {
    sub_22E3CB840(v13, v14, *((uint64_t *)&v14 + 1));
    v8 = v13;
  }
  else
  {
    *(_QWORD *)(v13 + 48) = 0;
    *(_QWORD *)(v8 + 56) = 0;
  }
  v16 = v15;
  if (v15)
  {
    llvm::MetadataTracking::track();
    v9 = v16;
  }
  else
  {
    v9 = 0;
  }
  result = sub_22E3CF21C(v8, 0, v9);
  if (v16)
    result = llvm::MetadataTracking::untrack();
  if (v15)
    return llvm::MetadataTracking::untrack();
  return result;
}

unint64_t sub_22E5BB098(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  unint64_t v5;
  unint64_t v7;

  v2 = a2;
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = *(_QWORD *)a1 + 40 * v3;
    if (*(_QWORD *)a1 <= a2 && v5 > a2)
    {
      v7 = a2 - *(_QWORD *)a1;
      sub_22F283A5C(a1);
      return *(_QWORD *)a1 + v7;
    }
    else
    {
      sub_22F283A5C(a1);
    }
  }
  return v2;
}

void sub_22E5BB100(_QWORD *a1)
{
  *a1 = &off_24FA66C98;
  sub_22E49FAE8((uint64_t)(a1 + 2));
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E5BB144(uint64_t result, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2[40])
  {
    v5 = result;
    sub_22F2530F4(a2 + 248);
    if (a3)
      sub_22E3CB7B0(a2, a3, 0);
    result = sub_22F27B464((_QWORD *)(v5 + 112), (uint64_t)a2);
    v6 = a2[250];
    a2[252] = *(_QWORD *)(v6 + 16);
    a2[250] = v6 + 32;
  }
  return result;
}

uint64_t sub_22E5BB1B8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 152);
}

uint64_t sub_22E5BB1C4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 144);
}

double sub_22E5BB1CC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _OWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v13 = 0;
  v6 = sub_22E3CED3C((uint64_t *)(a2 + 2904), &v12, &v13);
  v7 = v13;
  if (!v6)
    v7 = *(_QWORD *)(a2 + 2904) + 56 * *(unsigned int *)(a2 + 2920);
  v8 = *(_OWORD *)(v7 + 24);
  v11[0] = *(_OWORD *)(v7 + 8);
  v11[1] = v8;
  v11[2] = *(_OWORD *)(v7 + 40);
  v9 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1) + 48) & 0xFFFFFFFFFFFFFFF0);
  if (!v9 || *(_BYTE *)(v9 + 16) != 39)
    v9 = sub_22F10CF48(v9);
  return sub_22F25FAEC(a2, v11, v9, a3);
}

uint64_t sub_22E5BB2A4(uint64_t a1, uint64_t a2, int a3)
{
  _DWORD *v5;
  uint64_t i;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unsigned int v12;
  uint64_t v14;

  *(_QWORD *)a1 = &off_24FA66C98;
  *(_DWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = 1;
  v5 = (_DWORD *)(a1 + 16);
  for (i = 24; i != 88; i += 16)
    *(_QWORD *)(a1 + i) = -4096;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v7 = sub_22EFC3B90(*(_QWORD *)(a2 + 24));
  v8 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v8)
  {
    v9 = v7;
    v10 = (_QWORD *)(a2 + (8 * v8 + 40));
    v11 = &v10[2 * v8];
    do
    {
      v12 = (*v10 >> 1) & 3;
      if (v12)
      {
        if (v12 == 1 || v12 == 2)
        {
          v14 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*v10 & 0xFFFFFFFFFFFFFFF8) + 32))(*v10 & 0xFFFFFFFFFFFFFFF8);
          sub_22F283C28(v5, &v14)[1] = v9;
        }
      }
      else
      {
        *(_QWORD *)(a1 + 96) = v9;
      }
      v10 += 2;
      do
        v9 = *(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v9 && (*(_DWORD *)(v9 + 28) & 0x7Fu) - 49 > 2);
    }
    while (v10 != v11);
  }
  return a1;
}

uint64_t sub_22E5BB3BC(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  llvm *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD v14[9];

  v14[8] = *MEMORY[0x24BDAC8D0];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v8 = 0;
    v9 = v14;
    do
    {
      v10 = *(_QWORD *)(a1 + v8 + 8);
      if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        *v9 = v10;
        v9[1] = *(_QWORD *)(a1 + v8 + 16);
        v9 += 2;
      }
      v8 += 16;
    }
    while (v8 != 64);
    if (a2 > 4)
    {
      *(_DWORD *)a1 &= ~1u;
      v11 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](16 * a2, 8);
      *(_QWORD *)(a1 + 16) = v11;
    }
    return sub_22F283DF4(a1, v14, v9);
  }
  else
  {
    v6 = *(llvm **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](16 * a2, 8);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_22F283DF4(a1, v6, (_QWORD *)v6 + 2 * v7);
    return llvm::deallocate_buffer(v6, (void *)(16 * v7));
  }
}

uint64_t sub_22E5BB538(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  llvm::LLVMContext *v12;
  __int128 v13;
  uint64_t v14;
  _OWORD v15[8];
  uint64_t v16;
  _OWORD v17[3];
  _OWORD v18[8];
  uint64_t v19;
  _QWORD v20[4];
  __int16 v21;

  if (*(_BYTE *)(result + 8))
  {
    v3 = result;
    v20[0] = *(_QWORD *)(result + 16);
    *(_QWORD *)&v18[0] = 0;
    v4 = sub_22E3CED3C((uint64_t *)(a2 + 2904), v20, v18);
    v5 = *(_QWORD *)&v18[0];
    if (!v4)
      v5 = *(_QWORD *)(a2 + 2904) + 56 * *(unsigned int *)(a2 + 2920);
    v6 = *(_OWORD *)(v5 + 24);
    v17[0] = *(_OWORD *)(v5 + 8);
    v17[1] = v6;
    v17[2] = *(_OWORD *)(v5 + 40);
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 48) & 0xFFFFFFFFFFFFFFF0);
    if (!v7 || *(_BYTE *)(v7 + 16) != 39)
      v7 = sub_22F10CF48(v7);
    sub_22F25FAEC(a2, v17, v7, (uint64_t)v18);
    v15[6] = v18[6];
    v15[7] = v18[7];
    v16 = v19;
    v15[2] = v18[2];
    v15[3] = v18[3];
    v15[4] = v18[4];
    v15[5] = v18[5];
    v15[0] = v18[0];
    v15[1] = v18[1];
    v8 = sub_22F25F748(a2, (uint64_t)v15, *(_DWORD *)(*(_QWORD *)(v3 + 16) + 24));
    v20[0] = ".untied.done.";
    v21 = 259;
    v9 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v10 = llvm::User::operator new((llvm::User *)0x40);
    MEMORY[0x23489C204](v10, v8, v9, 10, 0);
    v21 = 257;
    *(_QWORD *)(v3 + 48) = sub_22E3C12C8((uint64_t *)(a2 + 272), v10, (uint64_t)v20);
    sub_22E5ED9B4((_QWORD *)a2, v9, 0);
    v13 = *(_OWORD *)(a2 + 1712);
    v14 = *(_QWORD *)(a2 + 1728);
    sub_22E48BA00((_QWORD *)a2, (uint64_t)&v13);
    v20[0] = ".untied.jmp.";
    v21 = 259;
    v11 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    sub_22E5ED9B4((_QWORD *)a2, v11, 0);
    llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 336), v12);
    llvm::ConstantInt::get();
    llvm::SwitchInst::addCase();
    return sub_22E5BB7A4(v3, a2);
  }
  return result;
}

void sub_22E5BB790()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E5BB7A4(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  llvm::LLVMContext *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  llvm::LLVMContext *v14;
  _QWORD v15[2];
  int v16;
  _OWORD v17[8];
  uint64_t v18;
  _OWORD v19[3];
  _OWORD v20[8];
  uint64_t v21;
  _QWORD v22[4];
  __int16 v23;

  if (*(_BYTE *)(result + 8))
  {
    v3 = result;
    v22[0] = *(_QWORD *)(result + 16);
    *(_QWORD *)&v20[0] = 0;
    v4 = sub_22E3CED3C((uint64_t *)(a2 + 2904), v22, v20);
    v5 = *(_QWORD *)&v20[0];
    if (!v4)
      v5 = *(_QWORD *)(a2 + 2904) + 56 * *(unsigned int *)(a2 + 2920);
    v6 = *(_OWORD *)(v5 + 24);
    v19[0] = *(_OWORD *)(v5 + 8);
    v19[1] = v6;
    v19[2] = *(_OWORD *)(v5 + 40);
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 48) & 0xFFFFFFFFFFFFFFF0);
    if (!v7 || *(_BYTE *)(v7 + 16) != 39)
      v7 = sub_22F10CF48(v7);
    sub_22F25FAEC(a2, v19, v7, (uint64_t)v20);
    llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 336), v8);
    v9 = llvm::ConstantInt::get();
    v17[7] = v20[7];
    v18 = v21;
    v17[2] = v20[2];
    v17[3] = v20[3];
    v17[5] = v20[5];
    v17[6] = v20[6];
    v17[4] = v20[4];
    v17[0] = v20[0];
    v17[1] = v20[1];
    sub_22E4E87FC(a2, v9, (uint64_t)v17, 0);
    sub_22F27B464((_QWORD *)(v3 + 24), a2);
    v23 = 261;
    v22[0] = ".untied.next.";
    v22[1] = 13;
    v10 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v11 = *(_QWORD *)(a2 + 2008);
    v12 = *(_DWORD *)(a2 + 2640);
    *(_DWORD *)(a2 + 2640) = v12 + 1;
    sub_22E5EDA70(a2);
    v22[0] = ".untied.jmp.";
    v23 = 259;
    v13 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    sub_22E5ED9B4((_QWORD *)a2, v13, 0);
    llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 336), v14);
    llvm::ConstantInt::get();
    llvm::SwitchInst::addCase();
    v15[0] = v10;
    v15[1] = v11;
    v16 = v12;
    sub_22E48BA00((_QWORD *)a2, (uint64_t)v15);
    return sub_22E5ED9B4((_QWORD *)a2, v10, 0);
  }
  return result;
}

void sub_22E5BBA0C(_QWORD *a1)
{
  *a1 = &off_24FA66C98;
  sub_22E49FAE8((uint64_t)(a1 + 2));
  JUMPOUT(0x2348A0E9CLL);
}

const char *sub_22E5BBA50()
{
  return ".omp_outlined.";
}

uint64_t sub_22E5BBA60(uint64_t a1)
{
  return *(_QWORD *)(a1 + 144);
}

double sub_22E5BBA68@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  _OWORD v11[2];
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16[2];
  uint64_t v17;
  __int128 v18[3];

  *(_QWORD *)&v13 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)&v18[0] = 0;
  v6 = sub_22E3CED3C((uint64_t *)(a2 + 2904), &v13, v18);
  v7 = *(_QWORD *)&v18[0];
  if (!v6)
    v7 = *(_QWORD *)(a2 + 2904) + 56 * *(unsigned int *)(a2 + 2920);
  v13 = *(_OWORD *)(v7 + 8);
  v14 = *(_OWORD *)(v7 + 24);
  v15 = *(_OWORD *)(v7 + 40);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 48);
  sub_22E6281E0(*(_QWORD **)(a2 + 144), v8, (uint64_t)v11);
  v18[0] = v13;
  v18[1] = v14;
  v18[2] = v15;
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
  v16[0] = v11[0];
  v16[1] = v11[1];
  v17 = v12;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 84) = 2;
  *(_DWORD *)a3 = 0;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_QWORD *)&result = sub_22E3C113C(a3, v18, v8, 0, v16, v9).n128_u64[0];
  return result;
}

uint64_t sub_22E5BBB78(uint64_t a1, uint64_t a2)
{
  return sub_22E5BB7A4(*(_QWORD *)(a1 + 152), a2);
}

llvm::Constant **sub_22E5BBB80(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  llvm::Value *v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Constant **result;
  llvm::Type *v9;
  uint64_t *v10;
  uint64_t NullValue;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[4];
  __int16 v17;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(llvm::Value **)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v17 = 257;
  result = (llvm::Constant **)sub_22E479C7C((uint64_t)a2, v4, v5, v6, v7, (uint64_t)v16);
  if (*(_BYTE *)(a1 + 72))
  {
    v10 = (uint64_t *)result;
    v17 = 257;
    NullValue = llvm::Constant::getNullValue(*result, v9);
    v12 = sub_22E3C18F4((uint64_t)(a2 + 34), 33, v10, NullValue, (uint64_t)v16);
    v16[0] = "omp_if.then";
    v17 = 259;
    v13 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v16[0] = "omp_if.end";
    v17 = 259;
    v14 = operator new();
    *(_QWORD *)(a1 + 80) = llvm::BasicBlock::BasicBlock();
    v15 = llvm::User::operator new((llvm::User *)0x40);
    MEMORY[0x23489C09C](v15, v13, v14, v12, 0);
    v17 = 257;
    sub_22E3C12C8(a2 + 34, v15, (uint64_t)v16);
    return (llvm::Constant **)sub_22E5ED9B4(a2, v13, 0);
  }
  return result;
}

llvm::Value *sub_22E5BBCF4(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  llvm::Value *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[32];
  __int16 v9;

  v3 = a1[5];
  v4 = (llvm::Value *)a1[6];
  v5 = a1[7];
  v6 = a1[8];
  v9 = 257;
  return sub_22E479C7C(a2, v3, v4, v5, v6, (uint64_t)v8);
}

void sub_22E5BBD2C()
{
  JUMPOUT(0x2348A0E9CLL);
}

llvm::ValueHandleBase *sub_22E5BBD40(llvm::ValueHandleBase *this, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  llvm::ValueHandleBase *v5;
  BOOL v6;

  v2 = *((_QWORD *)this + 2);
  v3 = a2[2];
  if (v2 != v3)
  {
    v5 = this;
    v6 = v2 == -4096 || v2 == 0;
    if (!v6 && v2 != -8192)
    {
      this = (llvm::ValueHandleBase *)llvm::ValueHandleBase::RemoveFromUseList(this);
      v3 = a2[2];
    }
    *((_QWORD *)v5 + 2) = v3;
    if (v3 != -4096 && v3 != -8192 && v3 != 0)
      return (llvm::ValueHandleBase *)llvm::ValueHandleBase::AddToExistingUseList(v5, (llvm::ValueHandleBase **)(*a2 & 0xFFFFFFFFFFFFFFF8));
  }
  return this;
}

uint64_t sub_22E5BBDC4(llvm::ValueHandleBase *this, uint64_t a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 2);
  if (v3 != a2)
  {
    if (v3 && v3 != -8192 && v3 != -4096)
      llvm::ValueHandleBase::RemoveFromUseList(this);
    *((_QWORD *)this + 2) = a2;
    if (a2 != -8192 && a2 != -4096 && a2)
      llvm::ValueHandleBase::AddToUseList(this);
  }
  return a2;
}

uint64_t sub_22E5BBE34(uint64_t a1, int a2, uint64_t a3, char a4, char a5, uint64_t a6)
{
  unsigned int v7;
  char v9;
  int v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  *(_BYTE *)a1 = -46;
  if (byte_255E04EB3)
  {
    v13 = a6;
    v10 = a2;
    v12 = a3;
    v9 = a5;
    v11 = a4;
    sub_22F3F189C(210);
    a4 = v11;
    a5 = v9;
    a3 = v12;
    a2 = v10;
    a6 = v13;
  }
  v7 = ((a4 & 3) << 8) & 0xE3FF | ((a5 & 7) << 10) | *(_DWORD *)a1 & 0xFFF800FF;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a6;
  *(_DWORD *)a1 = v7;
  *(_DWORD *)(a1 + 4) = a2;
  *(_DWORD *)a1 = v7 & 0xFFFC1FFF | ((sub_22EFB2238(a1) & 0x1F) << 13);
  return a1;
}

uint64_t sub_22E5BBED4(uint64_t result, int a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = result;
  if (a2)
  {
    v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    *(_DWORD *)(result + 16) = v4;
    result = MEMORY[0x23489D23C](56 * v4, 8);
    *(_QWORD *)v2 = result;
    *(_QWORD *)(v2 + 8) = 0;
    v5 = *(unsigned int *)(v2 + 16);
    if ((_DWORD)v5)
    {
      v6 = 56 * v5;
      do
      {
        *(_QWORD *)result = -4096;
        result += 56;
        v6 -= 56;
      }
      while (v6);
    }
  }
  else
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 16) = 0;
  }
  return result;
}

unint64_t sub_22E5BBF6C(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  unint64_t v5;
  unint64_t v7;

  v2 = a2;
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = *(_QWORD *)a1 + 24 * v3;
    if (*(_QWORD *)a1 <= a2 && v5 > a2)
    {
      v7 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      return *(_QWORD *)a1 + v7;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
  }
  return v2;
}

uint64_t sub_22E5BBFE8(uint64_t *a1, __int128 *a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _QWORD v23[3];
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27[2];
  int v28;
  _QWORD v29[2];
  int v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  v17 = *a2;
  v18 = a2[1];
  v19 = a2[2];
  v20 = *a3;
  v21 = a3[1];
  v22 = a3[2];
  v4 = *a1;
  v25 = 1;
  v5 = *(_QWORD *)(v4 + 1992) - *(_QWORD *)(v4 + 2000);
  v6 = *(_QWORD *)(v4 + 2312);
  v24 = *(_BYTE *)(v4 + 2893);
  *(_BYTE *)(v4 + 2893) = 0;
  v7 = *(_QWORD *)(v4 + 2872);
  v23[0] = v5;
  v23[1] = v7;
  v23[2] = v6;
  *(_QWORD *)(v4 + 2872) = v5;
  v27[0] = 0;
  v27[1] = 0;
  v26 = v4;
  v28 = 0;
  v29[0] = 0;
  v29[1] = 0;
  v30 = 0;
  v8 = a1[1];
  v31 = v20;
  v32 = v21;
  v33 = v22;
  sub_22E5BC134(v27, v4, v8, (uint64_t)&v31);
  sub_22E5BC320((uint64_t)v29, v26 + 2904);
  sub_22F2840EC((uint64_t)v29);
  v9 = 0;
  v10 = 0;
  v11 = *a1;
  v12 = *(_QWORD *)(*a1 + 1856);
  *(_QWORD *)(*a1 + 1856) = a1[3];
  v13 = a1[2];
  v32 = v18;
  v33 = v19;
  v31 = v17;
  v14 = *(_QWORD *)(v13 + 8);
  v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v15 & 8) != 0)
  {
    v10 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    v9 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
  }
  sub_22E4DA890(v11, v13, &v31, v9 | v10 | (v15 | v14) & 7, 0);
  *(_QWORD *)(v11 + 1856) = v12;
  return sub_22F283FC4((uint64_t)v23);
}

uint64_t sub_22E5BC134(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[3];
  __int128 v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
  *(_QWORD *)&v22 = v7;
  v21[0] = 0;
  v8 = sub_22E3CED3C(a1, &v22, v21);
  if ((v8 & 1) == 0)
  {
    v21[0] = v7;
    *(_QWORD *)&v22 = 0;
    if (!sub_22E3CED3C((uint64_t *)(a2 + 2904), v21, &v22)
      || (_QWORD)v22 == *(_QWORD *)(a2 + 2904) + 56 * *(unsigned int *)(a2 + 2920))
    {
      v27 = v7;
      v22 = 0uLL;
      v24 = 0;
      v23 = 0;
      v25 = 0;
      v26 = 0;
      sub_22E3CEC9C((uint64_t)a1, &v27, &v22, (uint64_t)v21);
    }
    else
    {
      v21[0] = v7;
      sub_22F28404C((uint64_t)a1, v21, (__int128 *)(v22 + 8), (uint64_t)&v22);
    }
    v10 = *(_QWORD *)(v7 + 48);
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) & 0xFE) == 0x28)
    {
      *(_QWORD *)&v22 = "tmp";
      LOWORD(v25) = 259;
      v11 = sub_22F25E4D4(a2, v10, (uint64_t)&v22, 0);
      if (v11 <= 7)
        v13 = 0;
      else
        v13 = v11 & 0xFFFFFFFFFFFFFFF8;
      if (v11 <= 7)
        v14 = 0;
      else
        v14 = v12 & 0xFFFFFFFFFFFFFFF8;
      if (v11 >= 8)
        v15 = 1 << (v12 & 7 | (8 * (v11 & 7)));
      else
        v15 = 0;
      if ((*(_BYTE *)(a4 + 24) & 3) != 0)
        v16 = sub_22F28ABCC(a4, a2);
      else
        v16 = *(_QWORD *)a4;
      v17[0] = v13;
      v17[1] = v14;
      v17[2] = v15;
      v18 = 0;
      v19 = 0;
      v20 = 0;
      sub_22E3BEDDC(a2 + 272, v16, v17, 0);
      *(_QWORD *)a4 = v13;
      *(_QWORD *)(a4 + 8) = v14;
      *(_QWORD *)(a4 + 16) = v15;
      *(_DWORD *)(a4 + 24) = 0;
      *(_QWORD *)(a4 + 32) = 0;
      *(_QWORD *)(a4 + 40) = 0;
    }
    v21[0] = v7;
    sub_22F28404C((uint64_t)(a1 + 3), v21, (__int128 *)a4, (uint64_t)&v22);
  }
  return v8 ^ 1u;
}

uint64_t sub_22E5BC320(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v12[3];
  uint64_t v13;

  v3 = *(unsigned int *)(result + 16);
  v4 = *(_QWORD *)result + 56 * v3;
  if (*(_DWORD *)(result + 8))
  {
    if ((_DWORD)v3)
    {
      v5 = 56 * v3;
      v6 = *(_QWORD *)result;
      while ((*(_QWORD *)v6 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v6 += 56;
        v5 -= 56;
        if (!v5)
          goto LABEL_6;
      }
    }
    else
    {
      v6 = *(_QWORD *)result;
    }
  }
  else
  {
LABEL_6:
    v6 = *(_QWORD *)result + 56 * v3;
  }
  v7 = *(_QWORD *)result + 56 * v3;
  while (v6 != v7)
  {
    if (*(_QWORD *)(v6 + 8))
    {
      v13 = *(_QWORD *)v6;
      v12[0] = 0;
      result = sub_22E3CED3C((uint64_t *)a2, &v13, v12);
      if (!(_DWORD)result || (v8 = v12[0], v12[0] == *(_QWORD *)a2 + 56 * *(unsigned int *)(a2 + 16)))
      {
        result = sub_22F28404C(a2, (_QWORD *)v6, (__int128 *)(v6 + 8), (uint64_t)v12);
      }
      else
      {
        v9 = *(_OWORD *)(v6 + 8);
        v10 = *(_OWORD *)(v6 + 24);
        *(_OWORD *)(v12[0] + 40) = *(_OWORD *)(v6 + 40);
        *(_OWORD *)(v8 + 24) = v10;
        *(_OWORD *)(v8 + 8) = v9;
      }
    }
    else
    {
      v12[0] = 0;
      result = sub_22E3CED3C((uint64_t *)a2, (_QWORD *)v6, v12);
      if ((_DWORD)result)
      {
        *(_QWORD *)v12[0] = -8192;
        *(int32x2_t *)(a2 + 8) = vadd_s32(*(int32x2_t *)(a2 + 8), (int32x2_t)0x1FFFFFFFFLL);
      }
    }
    v11 = v6 + 56;
    v6 = v4;
    if (v11 != v4)
    {
      v6 = v11;
      while ((*(_QWORD *)v6 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v6 += 56;
        if (v6 == v4)
        {
          v6 = v4;
          break;
        }
      }
    }
  }
  return result;
}

uint64_t sub_22E5BC4B0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  llvm *v6;
  uint64_t v7;

  v1 = result;
  v2 = *(unsigned int *)(result + 16);
  v3 = *(_DWORD *)(result + 8);
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == (_DWORD)v2)
  {
    *(_QWORD *)(result + 8) = 0;
    if ((_DWORD)v2)
    {
      v6 = *(llvm **)result;
      v7 = 56 * v2;
      do
      {
        *(_QWORD *)v6 = -4096;
        v6 = (llvm *)((char *)v6 + 56);
        v7 -= 56;
      }
      while (v7);
    }
  }
  else
  {
    llvm::deallocate_buffer(*(llvm **)result, (void *)(56 * v2));
    return sub_22E5BBED4(v1, v5);
  }
  return result;
}

uint64_t sub_22E5BC554()
{
  return 0;
}

_QWORD *sub_22E5BC55C(_QWORD *a1)
{
  *a1 = &off_24FA66C98;
  sub_22E49FAE8((uint64_t)(a1 + 2));
  return a1;
}

void sub_22E5BC590(_QWORD *a1)
{
  *a1 = &off_24FA66C98;
  sub_22E49FAE8((uint64_t)(a1 + 2));
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E5BC5D4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 152) + 16))(*(_QWORD *)(a1 + 152));
}

uint64_t sub_22E5BC5E4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 152) + 24))(*(_QWORD *)(a1 + 152));
}

uint64_t sub_22E5BC5F4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 152);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

uint64_t sub_22E5BC60C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 152);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t sub_22E5BC624(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 144);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
  return result;
}

uint64_t sub_22E5BC64C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 152);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
  return result;
}

uint64_t sub_22E5BC664(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 152) + 72))(*(_QWORD *)(a1 + 152));
}

uint64_t sub_22E5BC674(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 152);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 80))(result);
  return result;
}

void sub_22E5BC68C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  llvm::PointerType *v13;
  uint64_t v14;
  _DWORD *v15;
  BOOL v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t RuntimeFunction;
  llvm::Value *v27;
  llvm::Value *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  llvm::Value *v35;
  uint64_t *v36;
  uint64_t *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  _OWORD v56[3];
  _OWORD v57[3];
  _BYTE v58[64];
  __int128 v59;
  _BYTE v60[48];
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 320))
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (v2)
    {
      v4 = *(uint64_t **)(a1 + 8);
      v5 = (uint64_t *)(a2 + 272);
      v37 = &v4[2 * v2];
      v36 = (uint64_t *)(a2 + 272);
      do
      {
        v6 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 808);
        v7 = *v4;
        v8 = v4[1];
        sub_22EFF605C(*v4);
        v10 = sub_22E59F964(v6, a2, v9);
        v11 = *(_QWORD *)(a2 + 72);
        *(_WORD *)&v58[32] = 257;
        v12 = sub_22E3BF45C(v5, v10, v11, 1, (uint64_t)v58);
        v14 = llvm::ConstantPointerNull::get(*(llvm::ConstantPointerNull **)(a2 + 96), v13);
        v15 = *(_DWORD **)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0);
        if (v15)
          v16 = (v15[4] & 0xFEu) - 6 > 0xFFFFFFFB;
        else
          v16 = 0;
        if (!v16)
          v15 = (_DWORD *)sub_22F10CF48((uint64_t)v15);
        v17 = v15[12];
        if (v17 < 0x41 || v17 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v15 + 10)) <= 0x40)
          v18 = v12;
        else
          v18 = v12;
        v19 = llvm::ConstantInt::get();
        sub_22E4D8D7C(a2, (unsigned int *)v8, (uint64_t)v58);
        v56[0] = *(_OWORD *)&v58[8];
        v56[1] = *(_OWORD *)&v58[24];
        v56[2] = *(_OWORD *)&v58[40];
        v21 = *(_QWORD *)(a2 + 96);
        v20 = *(_QWORD *)(a2 + 104);
        LOWORD(v49) = 257;
        v5 = v36;
        sub_22F245864(v36, v56, v20, v21, (uint64_t)&v47, (uint64_t)v57);
        v38 = v57[0];
        v39 = v57[1];
        v40 = v57[2];
        v22 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
        v23 = *(_QWORD *)(v22 + 16816);
        v62 = *(_OWORD *)&v60[8];
        v63 = *(_OWORD *)&v60[24];
        *(_QWORD *)&v64 = *(_QWORD *)&v60[40];
        v48 = 0uLL;
        *((_QWORD *)&v47 + 1) = 0;
        LODWORD(v49) = 0;
        *((_QWORD *)&v49 + 1) = 0;
        *(_QWORD *)&v50 = 0;
        v51 = 0uLL;
        *(_QWORD *)((char *)&v52 + 4) = 2;
        LODWORD(v47) = 0;
        v53 = 0u;
        v54 = 0u;
        sub_22E3C113C((uint64_t)&v47, &v38, v23, *(int *)&v60[4], &v62, v22);
        *(_OWORD *)&v60[16] = v53;
        *(_OWORD *)&v60[32] = v54;
        *(_OWORD *)&v58[32] = v49;
        *(_OWORD *)&v58[48] = v50;
        v59 = v51;
        *(_OWORD *)v60 = v52;
        *(_OWORD *)v58 = v47;
        *(_OWORD *)&v58[16] = v48;
        v61 = v55;
        sub_22EFF605C(v8);
        v25 = sub_22F25F748(a2, (uint64_t)&v47, v24);
        RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
        *(_QWORD *)&v62 = v18;
        *((_QWORD *)&v62 + 1) = v14;
        *(_QWORD *)&v63 = v19;
        *((_QWORD *)&v63 + 1) = v25;
        LOWORD(v40) = 257;
        v28 = sub_22E479C7C(a2, RuntimeFunction, v27, (uint64_t)&v62, 4, (uint64_t)&v38);
        v29 = sub_22EFFA6B0((unsigned __int8 *)v7);
        sub_22E4C652C((_QWORD *)a2, *((_QWORD *)v29 + 2));
        v30 = sub_22EFFA6B0((unsigned __int8 *)v7);
        sub_22E4D8D7C(a2, (unsigned int *)v30, (uint64_t)&v38);
        v31 = *(_QWORD *)(a2 + 144);
        v32 = *(_QWORD *)(*(_QWORD *)(v31 + 144) + 16816);
        v33 = *(_QWORD *)(v7 + 8);
        sub_22EFF605C(v7);
        *(_QWORD *)&v62 = a2;
        *((_QWORD *)&v62 + 1) = v36;
        LOBYTE(v63) = 0;
        *((_QWORD *)&v63 + 1) = *(_QWORD *)(v31 + 232);
        v35 = sub_22E50EA80((uint64_t *)&v62, v28, v32, v33, v34, 0);
        v68 = v44;
        v69 = v45;
        v70 = v46;
        v64 = v40;
        v65 = v41;
        v66 = v42;
        v67 = v43;
        v62 = v38;
        v63 = v39;
        sub_22E4E87FC(a2, (uint64_t)v35, (uint64_t)&v62, 0);
        v4 += 2;
      }
      while (v4 != v37);
    }
  }
}

llvm::Value *sub_22E5BCA68(llvm::Value *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  if (a2[40])
  {
    v2 = *((_QWORD *)result + 2);
    if (v2)
    {
      v4 = (uint64_t *)*((_QWORD *)result + 1);
      v5 = 16 * v2;
      do
      {
        v6 = *v4;
        v4 += 2;
        result = sub_22F2812BC(*(_QWORD *)(a2[18] + 808), a2, v6);
        v5 -= 16;
      }
      while (v5);
    }
  }
  return result;
}

void sub_22E5BCAC0()
{
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22E5BCAD4(_QWORD *a1)
{
  *a1 = &off_24FA66C98;
  sub_22E49FAE8((uint64_t)(a1 + 2));
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E5BCB18(uint64_t a1)
{
  return *(_QWORD *)(a1 + 144);
}

uint64_t sub_22E5BCB24()
{
  return 0;
}

void sub_22E5BCB30(_QWORD *a1)
{
  sub_22F283FC4((uint64_t)(a1 + 20));
  *a1 = &off_24FA66C98;
  sub_22E49FAE8((uint64_t)(a1 + 2));
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E5BCB80(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 152);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

uint64_t sub_22E5BCBA4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  _BOOL4 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _DWORD **v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned __int8 *v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t *v85;
  uint64_t *v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  int v94;
  BOOL v95;
  int v96;
  uint64_t v97;
  int v98;
  int *v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  llvm::Type *v105;
  uint64_t v106;
  uint64_t NullValue;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _DWORD **v111;
  _DWORD **v112;
  _DWORD *v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  int *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  unsigned __int8 *v128;
  uint64_t v130;
  uint64_t v131;
  __n128 v132;
  unsigned int v133;
  uint64_t *v134;
  uint64_t *v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t *v143;
  llvm::Type *v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t *v150;
  __n128 v151;
  unint64_t v152;
  unsigned int v153;
  unint64_t v154;
  unint64_t v155;
  unsigned int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unsigned int v164;
  char *v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  llvm::Type *v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t *v179;
  int v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int v189;
  uint64_t v190;
  uint64_t *v191;
  int v192;
  int v193;
  uint64_t v194;
  char *v195;
  char *i;
  char *v197;
  char *v198;
  char **v199;
  void *v200;
  char **v201;
  uint64_t v203;
  _QWORD *v204;
  _QWORD *v205;
  _QWORD *v206;
  _QWORD *v207;
  uint64_t v208;
  uint64_t *v209;
  uint64_t *v210;
  uint64_t *v211;
  _DWORD **v212;
  _QWORD *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  int *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  _DWORD *v225;
  int v226;
  int v227;
  int v228;
  uint64_t v229;
  unsigned int v230;
  unsigned int v231;
  unsigned int v232;
  int *v233;
  unint64_t v234;
  unint64_t *v235;
  int v236;
  int *v237;
  _QWORD v238[17];
  _BYTE v239[56];
  unint64_t v240;
  _QWORD v241[17];
  llvm *v242[2];
  unsigned int v243;
  void *__p;
  char *v245;
  uint64_t v246;
  _QWORD v247[2];
  llvm *v248[2];
  unsigned int v249;
  void *v250;
  unint64_t *v251;
  uint64_t v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  _QWORD v256[6];
  uint64_t *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  BOOL v275;
  _QWORD *v276;
  uint64_t v277;
  _QWORD v278[6];
  _QWORD v279[26];
  _QWORD v280[26];
  uint64_t v281;
  uint64_t v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  unint64_t v286;
  _QWORD *v287;
  uint64_t v288;
  _QWORD v289[10];
  _QWORD v290[6];
  _QWORD v291[6];
  _QWORD v292[6];
  _BYTE v293[40];
  _QWORD *v294;
  uint64_t v295;
  _QWORD v296[6];
  _QWORD v297[26];
  _QWORD v298[26];
  _DWORD v299[50];
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  int v303;
  uint64_t v304;
  uint64_t v305;
  int v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  int v310;
  __int128 v311;
  _QWORD v312[4];
  __int128 v313;
  _BYTE v314[28];
  uint64_t v315;
  uint64_t v316;
  __int16 v317;
  uint64_t v318;
  int64x2_t v319;
  int64x2_t v320;
  uint64_t *v321;
  uint64_t v322;
  uint64_t v323;
  _QWORD v324[2];
  uint64_t v325;
  uint64_t *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t *v332;
  uint64_t v333;
  uint64_t v334;
  _BYTE *v335;
  uint64_t v336;
  _BYTE v337[40];
  _QWORD *v338;
  uint64_t v339;
  _QWORD v340[6];
  _QWORD v341[26];
  _QWORD v342[26];
  _QWORD v343[27];

  v0 = MEMORY[0x24BDAC7A8]();
  v208 = v2;
  v3 = v0;
  v343[24] = *MEMORY[0x24BDAC8D0];
  v248[1] = 0;
  v248[0] = 0;
  v249 = 0;
  v252 = 0;
  v250 = 0;
  v251 = 0;
  v247[0] = v248;
  v247[1] = v4;
  v203 = v5;
  v204 = v1;
  v213 = &v1[v5];
  if (v5)
  {
    v6 = v1;
    do
    {
      v205 = v6;
      v7 = *v6;
      if (*v6 && *(_DWORD *)(v7 + 8) == 46)
      {
        v8 = 80;
        while (*(_DWORD *)(v7 + v8) != 10)
        {
          v8 += 4;
          if (v8 == 100)
          {
            v9 = v7 + 100;
            goto LABEL_10;
          }
        }
        v9 = v7 + v8;
LABEL_10:
        if (v9 == v7 + 100)
        {
          if (*(_DWORD *)(v7 + 120))
            v10 = 2;
          else
            v10 = 1;
          v230 = v10;
        }
        else
        {
          v230 = 0;
        }
        v11 = *(unsigned int *)(v7 + 16);
        v12 = *(unsigned int *)(v7 + 20);
        v13 = (2 * v11);
        v14 = (uint64_t *)(v7 + 136 + 8 * v13);
        v15 = &v14[v12];
        if ((_DWORD)v12)
          v16 = *(_DWORD *)v15;
        else
          v16 = 0;
        v17 = *(unsigned int *)(v7 + 28);
        if ((_DWORD)v17)
        {
          v18 = 0;
          v19 = *(unsigned int *)(v7 + 24);
          v209 = v15;
          v20 = ((unint64_t)v15 + 4 * (v19 + v12) + 7) & 0xFFFFFFFFFFFFFFF8;
          v218 = v20 + 16 * v17;
          v222 = (uint64_t)v15 + 4 * v12 + 4 * v19;
          if (*(_BYTE *)(v7 + 32))
            v21 = (uint64_t *)(v7 + 136 + 8 * v11);
          else
            v21 = 0;
          v22 = 8 * v13 + 12 * v12 + 136;
          v226 = *(unsigned __int8 *)(v7 + 32);
          v214 = 8 * *(unsigned __int8 *)(v7 + 32);
          v23 = 136;
          do
          {
            if (v226)
            {
              v24 = *v21;
              if (*v21)
                v24 = *(_QWORD *)(v24 + 16);
            }
            else
            {
              v24 = 0;
            }
            if (*(_DWORD *)(v7 + 128))
              v25 = *(_QWORD *)(v7 + v23);
            else
              v25 = 0;
            v26 = (int *)(v7 + v22);
            sub_22E5BE3FC((uint64_t)v247, *v14, v230, v20, (*(_DWORD *)(v7 + v22) - v18), *(unsigned int *)(v7 + 120), v7 + 80, 5, 0, 0, *(_DWORD *)v7 == 0, v24, v25, 0);
            if (v7 + v22 + 4 == v222)
              break;
            if (!--v16)
            {
              ++v14;
              v16 = *((_DWORD *)v209 + 1);
              v209 = (uint64_t *)((char *)v209 + 4);
            }
            v20 += 16 * (*v26 - v18);
            v23 += 8;
            v22 += 4;
            v21 = (uint64_t *)((char *)v21 + v214);
            v18 = *v26;
          }
          while (v20 != v218);
        }
      }
      v6 = v205 + 1;
    }
    while (v205 + 1 != v213);
    v27 = v204;
    do
    {
      v206 = v27;
      v28 = *v27;
      if (*v27 && *(_DWORD *)(v28 + 8) == 81)
      {
        v29 = 80;
        while (*(_DWORD *)(v28 + v29) != 1)
        {
          v29 += 4;
          if (v29 == 88)
          {
            v30 = v28 + 88;
            goto LABEL_44;
          }
        }
        v30 = v28 + v29;
LABEL_44:
        v31 = v30 == v28 + 88;
        v32 = *(unsigned int *)(v28 + 16);
        v33 = *(unsigned int *)(v28 + 20);
        v34 = (2 * v32);
        v35 = (uint64_t *)(v28 + 104 + 8 * v34);
        v36 = &v35[v33];
        if ((_DWORD)v33)
          v37 = *(_DWORD *)v36;
        else
          v37 = 0;
        v38 = *(unsigned int *)(v28 + 28);
        if ((_DWORD)v38)
        {
          v39 = 0;
          v231 = 2 * v31;
          v40 = *(unsigned int *)(v28 + 24);
          v210 = v36;
          v41 = ((unint64_t)v36 + 4 * (v40 + v33) + 7) & 0xFFFFFFFFFFFFFFF8;
          v219 = v41 + 16 * v38;
          v223 = (uint64_t)v36 + 4 * v33 + 4 * v40;
          if (*(_BYTE *)(v28 + 32))
            v42 = (uint64_t *)(v28 + 104 + 8 * v32);
          else
            v42 = 0;
          v43 = 8 * v34 + 12 * v33 + 104;
          v227 = *(unsigned __int8 *)(v28 + 32);
          v215 = 8 * *(unsigned __int8 *)(v28 + 32);
          v44 = 104;
          do
          {
            if (v227)
            {
              v45 = *v42;
              if (*v42)
                v45 = *(_QWORD *)(v45 + 16);
            }
            else
            {
              v45 = 0;
            }
            v46 = v28 + v43 + 4;
            sub_22E5BE3FC((uint64_t)v247, *v35, v231, v41, (*(_DWORD *)(v28 + v43) - v39), 1, 0, 0, v28 + 80, 2, *(_DWORD *)v28 == 0, v45, *(_QWORD *)(v28 + v44), 0);
            if (v46 == v223)
              break;
            if (!--v37)
            {
              ++v35;
              v37 = *((_DWORD *)v210 + 1);
              v210 = (uint64_t *)((char *)v210 + 4);
            }
            v41 += 16 * (*(_DWORD *)(v28 + v43) - v39);
            v44 += 8;
            v43 += 4;
            v42 = (uint64_t *)((char *)v42 + v215);
            v39 = *(_DWORD *)(v46 - 4);
          }
          while (v41 != v219);
        }
      }
      v27 = v206 + 1;
    }
    while (v206 + 1 != v213);
    v47 = v204;
    do
    {
      v207 = v47;
      v48 = *v47;
      if (*v47)
        v49 = *(_DWORD *)(*v47 + 8) == 31;
      else
        v49 = 0;
      if (v49)
      {
        v50 = 80;
        while (*(_DWORD *)(v48 + v50) != 1)
        {
          v50 += 4;
          if (v50 == 88)
          {
            v51 = v48 + 88;
            goto LABEL_72;
          }
        }
        v51 = v48 + v50;
LABEL_72:
        v52 = v51 == v48 + 88;
        v53 = *(unsigned int *)(v48 + 16);
        v54 = *(unsigned int *)(v48 + 20);
        v55 = (2 * v53);
        v56 = (uint64_t *)(v48 + 104 + 8 * v55);
        v57 = &v56[v54];
        if ((_DWORD)v54)
          v58 = *(_DWORD *)v57;
        else
          v58 = 0;
        v59 = *(unsigned int *)(v48 + 28);
        if ((_DWORD)v59)
        {
          v60 = 0;
          v232 = 2 * v52;
          v61 = *(unsigned int *)(v48 + 24);
          v211 = v57;
          v62 = ((unint64_t)v57 + 4 * (v61 + v54) + 7) & 0xFFFFFFFFFFFFFFF8;
          v220 = v62 + 16 * v59;
          v224 = (uint64_t)v57 + 4 * v54 + 4 * v61;
          if (*(_BYTE *)(v48 + 32))
            v63 = (uint64_t *)(v48 + 104 + 8 * v53);
          else
            v63 = 0;
          v64 = 8 * v55 + 12 * v54 + 104;
          v228 = *(unsigned __int8 *)(v48 + 32);
          v216 = 8 * *(unsigned __int8 *)(v48 + 32);
          v65 = 104;
          do
          {
            if (v228)
            {
              v66 = *v63;
              if (*v63)
                v66 = *(_QWORD *)(v66 + 16);
            }
            else
            {
              v66 = 0;
            }
            v67 = v48 + v64 + 4;
            sub_22E5BE3FC((uint64_t)v247, *v56, v232, v62, (*(_DWORD *)(v48 + v64) - v60), 2, 0, 0, v48 + 80, 2, *(_DWORD *)v48 == 0, v66, *(_QWORD *)(v48 + v65), 0);
            if (v67 == v224)
              break;
            if (!--v58)
            {
              ++v56;
              v58 = *((_DWORD *)v211 + 1);
              v211 = (uint64_t *)((char *)v211 + 4);
            }
            v62 += 16 * (*(_DWORD *)(v48 + v64) - v60);
            v65 += 8;
            v64 += 4;
            v63 = (uint64_t *)((char *)v63 + v216);
            v60 = *(_DWORD *)(v67 - 4);
          }
          while (v62 != v220);
        }
      }
      v47 = v207 + 1;
    }
    while (v207 + 1 != v213);
  }
  v242[1] = 0;
  v242[0] = 0;
  v243 = 0;
  v246 = 0;
  __p = 0;
  v245 = 0;
  v321 = &v323;
  v322 = 0x400000000;
  v324[0] = &v325;
  v324[1] = 0x400000000;
  v326 = &v328;
  v327 = 0x400000000;
  v329 = &v331;
  v330 = 0x400000000;
  v332 = &v334;
  v333 = 0x400000000;
  v335 = v337;
  v336 = 0x400000000;
  v337[32] = 0;
  v338 = v340;
  v339 = 0x400000000;
  v340[4] = v341;
  v340[5] = 0x400000000;
  v341[24] = v342;
  v341[25] = 0x400000000;
  v342[24] = v343;
  v342[25] = 0x400000000;
  if (v203)
  {
    v68 = (_DWORD **)v204;
    while (1)
    {
      v212 = v68;
      v225 = *v68;
      if (*v68)
      {
        if (v225[2] == 90)
        {
          v69 = v225[7];
          if ((_DWORD)v69)
            break;
        }
      }
LABEL_153:
      v68 = v212 + 1;
      if (v212 + 1 == v213)
        goto LABEL_154;
    }
    v70 = 0;
    v71 = v225[5];
    v72 = (uint64_t)&v225[2 * (3 * v225[4]) + 20 + 2 * v71];
    v73 = v225[6];
    v74 = (int *)(v72 + 4 * v71);
    v75 = (v72 + 4 * (v73 + v71) + 7) & 0xFFFFFFFFFFFFFFF8;
    v217 = v75 + 16 * v69;
    v221 = &v74[v73];
    while (1)
    {
      v76 = (*v74 - v70);
      v77 = v75 + 16 * v76;
      v78 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v77 - 8) + 32))(*(_QWORD *)(v77 - 8));
      v79 = v78;
      v80 = (unsigned __int8 *)(*(_QWORD *)(v77 - 16) & 0xFFFFFFFFFFFFFFFCLL);
      v81 = *v80 == 188 || v78 == 0;
      v236 = v70;
      v229 = v76;
      v233 = v74;
      v82 = v81 ? 0 : (*(uint64_t (**)(uint64_t))(*(_QWORD *)v78 + 32))(v78);
      v83 = sub_22E5BE9CC((uint64_t)v248, v82);
      if (v251 != (unint64_t *)v83)
      {
        v84 = *(_DWORD *)(v83 + 16);
        if (v84)
          break;
      }
LABEL_135:
      if (*v80 == 188)
      {
        sub_22E5BE3FC((uint64_t)v247, 0, 2, v75, v229, 6, 0, 0, 0, 0, *v225 == 0, 0, 0, 0);
        v282 = 0;
        v97 = sub_22E5BEA3C(v242, &v282);
        sub_22E5BECAC(v97, (uint64_t)v80, v79, 0);
        goto LABEL_138;
      }
      v100 = *(_QWORD *)(v3 + 8);
      sub_22E4D8D7C(v241);
      sub_22EFF605C((uint64_t)v80);
      v102 = sub_22F25F748(v100, (uint64_t)v241, v101);
      v103 = v322;
      v98 = v236;
      v99 = v233;
      if (v322 >= (unint64_t)HIDWORD(v322))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v103 = v322;
      }
      v104 = &v321[2 * v103];
      *v104 = v79;
      v104[1] = 0;
      LODWORD(v322) = v322 + 1;
      sub_22E5BED8C((uint64_t)v324, v102, v79);
      v106 = v327;
      if (v327 >= (unint64_t)HIDWORD(v327))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v106 = v327;
      }
      v326[v106] = v102;
      LODWORD(v327) = v327 + 1;
      NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)(*(_QWORD *)(v3 + 8) + 32), v105);
      v108 = v330;
      if (v330 >= (unint64_t)HIDWORD(v330))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v108 = v330;
      }
      v329[v108] = NullValue;
      v109 = v333;
      LODWORD(v330) = v330 + 1;
      if (v333 >= (unint64_t)HIDWORD(v333))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v109 = v333;
      }
      v332[v109] = 64;
      LODWORD(v333) = v333 + 1;
      v110 = v336;
      if (v336 >= (unint64_t)HIDWORD(v336))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v110 = v336;
      }
      *(_QWORD *)&v335[8 * v110] = 0;
      LODWORD(v336) = v336 + 1;
LABEL_139:
      if (v99 + 1 != v221)
      {
        v75 += 16 * (*v99 - v98);
        v74 = v99 + 1;
        v70 = *v99;
        if (v75 != v217)
          continue;
      }
      goto LABEL_153;
    }
    v85 = *(uint64_t **)(v83 + 8);
    v86 = &v85[90 * v84];
    while (1)
    {
      v87 = *((_DWORD *)v85 + 2);
      if (!v87)
        goto LABEL_124;
      v88 = *v85;
      v89 = 88 * v87;
      while (1)
      {
        v90 = *(_QWORD *)v88 + 16 * *(_QWORD *)(v88 + 8);
        if (*(_QWORD *)(v90 - 8) == v79)
          break;
        v88 += 88;
        v89 -= 88;
        if (!v89)
          goto LABEL_124;
      }
      if ((*(_DWORD *)(v79 + 28) & 0x7Fu) - 60 >= 7)
        v91 = 0;
      else
        v91 = v79;
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 144) + 808) + 4248) || *v80 == 188)
      {
LABEL_137:
        *(_BYTE *)(v88 + 56) = 1;
LABEL_138:
        v98 = v236;
        v99 = v233;
        goto LABEL_139;
      }
      v92 = *(_QWORD *)(v79 + 48) & 0xFFFFFFFFFFFFFFF0;
      v93 = *(_QWORD *)v92;
      if (!*(_QWORD *)v92 || (v94 = *(_DWORD *)(v93 + 16), (v94 & 0xFE) != 0x28))
      {
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v93 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
          goto LABEL_117;
        v93 = sub_22F10CF48(v93);
        if (!v93)
          goto LABEL_117;
        v94 = *(_DWORD *)(v93 + 16);
      }
      if ((v94 & 0x100000) != 0)
      {
        do
        {
          v93 = *(_QWORD *)(*(_QWORD *)(v93 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v93)
          {
            v96 = *(_DWORD *)(v93 + 16);
            if ((v96 & 0xFE) == 0x28)
              continue;
          }
          v93 = sub_22F10CF48(v93);
          v96 = *(_DWORD *)(v93 + 16);
        }
        while ((v96 & 0x100000) != 0);
      }
      v92 = *(_QWORD *)(v93 + 32) & 0xFFFFFFFFFFFFFFF0;
LABEL_117:
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v92 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39
        || v90 - 16 == *(_QWORD *)v88)
      {
        goto LABEL_137;
      }
      v95 = *(unsigned __int8 *)(*(_QWORD *)(v90 - 32) & 0xFFFFFFFFFFFFFFFCLL) == 188 || v91 == 0;
      if (v95 || sub_22E3CB5E0(v91))
        goto LABEL_137;
LABEL_124:
      v85 += 90;
      if (v85 == v86)
        goto LABEL_135;
    }
  }
LABEL_154:
  v318 = 1;
  v319 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v320 = v319;
  v111 = (_DWORD **)v204;
  if (v203)
  {
    do
    {
      v112 = v111;
      v113 = *v111;
      if (*v111)
      {
        if (v113[2] == 89)
        {
          v114 = v113[7];
          if ((_DWORD)v114)
          {
            v115 = 0;
            v116 = v113[5];
            v117 = (uint64_t)&v113[2 * v113[4] + 20 + 2 * v116];
            v118 = v113[6];
            v119 = (v117 + 4 * (v118 + v116) + 7) & 0xFFFFFFFFFFFFFFF8;
            v234 = v119 + 16 * v114;
            v120 = (int *)(v117 + 4 * v116);
            v237 = &v120[v118];
            do
            {
              v121 = (*v120 - v115);
              v122 = v119 + 16 * v121;
              v123 = *(_QWORD *)(v122 - 8);
              if (v123)
                v124 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v123 + 32))(*(_QWORD *)(v122 - 8));
              else
                v124 = 0;
              v257 = (uint64_t *)v124;
              sub_22F285E70((uint64_t)&v318, &v257, (uint64_t)&v282);
              if (BYTE8(v283))
              {
                v125 = (_QWORD *)(v122 - 16);
                v126 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v123 + 32))(v123);
                v127 = v126;
                v128 = (unsigned __int8 *)(*v125 & 0xFFFFFFFFFFFFFFFCLL);
                if (*v128 == 188 || v126 == 0)
                  v130 = 0;
                else
                  v130 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v126 + 32))(v126);
                v131 = sub_22E5BE9CC((uint64_t)v248, v130);
                if (v251 == (unint64_t *)v131 || (v133 = *(_DWORD *)(v131 + 16)) == 0)
                {
LABEL_177:
                  if (*v128 == 188)
                  {
                    sub_22E5BE3FC((uint64_t)v247, 0, 2, v119, v121, 6, 0, 0, 0, 0, *v113 == 0, 0, 0, 1);
                    v282 = 0;
                    v139 = sub_22E5BEA3C(v242, &v282);
                    sub_22E5BECAC(v139, (uint64_t)v128, v127, 1);
                  }
                  else
                  {
                    if ((v128[1] & 3) != 0)
                    {
                      sub_22E4D8D7C(&v282);
                      v140 = *(_QWORD *)(v3 + 8);
                      *(_OWORD *)v239 = v283;
                      *(_OWORD *)&v239[16] = v284;
                      *(_OWORD *)&v239[32] = v285;
                      sub_22E5E0440(v140, (uint64_t)v239, v286, &v257);
                      v141 = (uint64_t)v257;
                    }
                    else
                    {
                      v282 = *(_QWORD *)(v3 + 8);
                      *(_QWORD *)&v283 = v282 + 272;
                      BYTE8(v283) = 0;
                      *(_QWORD *)&v284 = *(_QWORD *)(*(_QWORD *)(v282 + 144) + 232);
                      v141 = sub_22E50E974(&v282, v128, v132);
                    }
                    v142 = *(unsigned int *)(v208 + 8);
                    if (v142 >= *(unsigned int *)(v208 + 12))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                      v142 = *(unsigned int *)(v208 + 8);
                    }
                    v143 = (uint64_t *)(*(_QWORD *)v208 + 16 * v142);
                    *v143 = v127;
                    v143[1] = 0;
                    ++*(_DWORD *)(v208 + 8);
                    sub_22E5BED8C(v208 + 80, v141, v127);
                    v145 = *(unsigned int *)(v208 + 168);
                    if (v145 >= *(unsigned int *)(v208 + 172))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                      v145 = *(unsigned int *)(v208 + 168);
                    }
                    *(_QWORD *)(*(_QWORD *)(v208 + 160) + 8 * v145) = v141;
                    ++*(_DWORD *)(v208 + 168);
                    v146 = llvm::Constant::getNullValue(*(llvm::Constant **)(*(_QWORD *)(v3 + 8) + 32), v144);
                    v147 = *(unsigned int *)(v208 + 216);
                    if (v147 >= *(unsigned int *)(v208 + 220))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                      v147 = *(unsigned int *)(v208 + 216);
                    }
                    *(_QWORD *)(*(_QWORD *)(v208 + 208) + 8 * v147) = v146;
                    ++*(_DWORD *)(v208 + 216);
                    v148 = *(unsigned int *)(v208 + 264);
                    if (v148 >= *(unsigned int *)(v208 + 268))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                      v148 = *(unsigned int *)(v208 + 264);
                    }
                    *(_QWORD *)(*(_QWORD *)(v208 + 256) + 8 * v148) = 64;
                    ++*(_DWORD *)(v208 + 264);
                    v149 = *(unsigned int *)(v208 + 312);
                    if (v149 >= *(unsigned int *)(v208 + 316))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                      v149 = *(unsigned int *)(v208 + 312);
                    }
                    *(_QWORD *)(*(_QWORD *)(v208 + 304) + 8 * v149) = 0;
                    ++*(_DWORD *)(v208 + 312);
                  }
                }
                else
                {
                  v134 = *(uint64_t **)(v131 + 8);
                  v135 = &v134[90 * v133];
                  while (1)
                  {
                    v136 = *((_DWORD *)v134 + 2);
                    if (v136)
                      break;
LABEL_176:
                    v134 += 90;
                    if (v134 == v135)
                      goto LABEL_177;
                  }
                  v137 = *v134;
                  v138 = *v134 + 88 * v136;
                  while (*(_QWORD *)(*(_QWORD *)v137 + 16 * *(_QWORD *)(v137 + 8) - 8) != v127)
                  {
                    v137 += 88;
                    if (v137 == v138)
                      goto LABEL_176;
                  }
                  *(_BYTE *)(v137 + 56) = 1;
                }
              }
              if (v120 + 1 == v237)
                break;
              v119 += 16 * (*v120 - v115);
              v115 = *v120++;
            }
            while (v119 != v234);
          }
        }
      }
      v111 = v112 + 1;
    }
    while (v112 + 1 != v213);
  }
  v150 = (unint64_t *)v250;
  v235 = v251;
  if (v250 != v251)
  {
    do
    {
      v282 = (uint64_t)&v283 + 8;
      *(_QWORD *)&v283 = 0x400000000;
      v287 = v289;
      v288 = 0x400000000;
      v289[8] = v290;
      v289[9] = 0x400000000;
      v290[4] = v291;
      v290[5] = 0x400000000;
      v291[4] = v292;
      v291[5] = 0x400000000;
      v292[4] = v293;
      v292[5] = 0x400000000;
      v293[32] = 0;
      v294 = v296;
      v295 = 0x400000000;
      v296[4] = v297;
      v296[5] = 0x400000000;
      v297[24] = v298;
      v297[25] = 0x400000000;
      v298[24] = v299;
      v298[25] = 0x400000000;
      v299[48] = 0;
      v300 = 0;
      v301 = 0;
      v303 = 0;
      v302 = 0;
      v306 = 0;
      v304 = 0;
      v305 = 0;
      v308 = 0;
      v309 = 0;
      v310 = 0;
      v307 = 0;
      v151 = 0uLL;
      v311 = 0u;
      memset(v312, 0, 28);
      v313 = 0u;
      memset(v314, 0, sizeof(v314));
      v317 = 0;
      v315 = 0;
      v316 = 0;
      v257 = &v259;
      v258 = 0x400000000;
      v260 = &v262;
      v261 = 0x400000000;
      v263 = &v265;
      v264 = 0x400000000;
      v266 = &v268;
      v267 = 0x400000000;
      v269 = &v271;
      v270 = 0x400000000;
      v272 = &v274;
      v273 = 0x400000000;
      v275 = 0;
      v276 = v278;
      v277 = 0x400000000;
      v278[4] = v279;
      v278[5] = 0x400000000;
      v279[24] = v280;
      v279[25] = 0x400000000;
      v280[24] = &v281;
      v280[25] = 0x400000000;
      v152 = *v150;
      v153 = *((_DWORD *)v150 + 4);
      if (v153)
      {
        v154 = v150[1];
        v155 = v154 + 720 * v153;
        do
        {
          v156 = *(_DWORD *)(v154 + 8);
          if (v156)
          {
            v157 = 88 * v156;
            v158 = *(_QWORD *)v154 + 40;
            do
            {
              v159 = v261;
              v160 = *(_QWORD **)(v158 - 40);
              v161 = *(_QWORD *)(v158 - 32);
              v275 = (v160[2 * v161 - 2] & 2) != 0;
              sub_22E5BEE04(v3, *(_DWORD *)(v158 - 24), *(_DWORD **)(v158 - 16), *(_QWORD *)(v158 - 8), *(_DWORD **)v158, *(_QWORD *)(v158 + 8), v160, v161, (uint64_t)&v257, (uint64_t)&v282, 0, *(_BYTE *)(v158 + 17), *(_QWORD *)(v158 + 24), *(_BYTE *)(v158 + 40), v152, *(_QWORD *)(v158 + 32), 0, 0);
              if (*(_BYTE *)(v158 + 16))
              {
                v260[2 * v159 + 1] = *(_QWORD *)(*(_QWORD *)(v158 - 40) + 16 * *(_QWORD *)(v158 - 32) - 8);
                v269[v159] |= 0x40uLL;
              }
              v158 += 88;
              v157 -= 88;
            }
            while (v157);
          }
          v154 += 720;
        }
        while (v154 != v155);
      }
      if (v243)
      {
        v162 = ((*v150 >> 4) ^ (*v150 >> 9)) & (v243 - 1);
        v163 = *((_QWORD *)v242[0] + 2 * v162);
        if (*v150 == v163)
        {
LABEL_208:
          if ((_DWORD)v162 != v243)
          {
            v164 = *((_DWORD *)v242[0] + 4 * v162 + 2);
            if ((char *)__p + 120 * v164 != v245)
            {
              v165 = (char *)__p + 120 * v164;
              v166 = *((unsigned int *)v165 + 4);
              if ((_DWORD)v166)
              {
                v167 = (uint64_t *)*((_QWORD *)v165 + 1);
                v168 = 24 * v166;
                do
                {
                  if (*((_BYTE *)v167 + 16))
                  {
                    v169 = *v167;
                    if ((*(_BYTE *)(*v167 + 1) & 3) != 0)
                    {
                      sub_22E4D8D7C(v239);
                      v170 = *(_QWORD *)(v3 + 8);
                      v253 = *(_OWORD *)&v239[8];
                      v254 = *(_OWORD *)&v239[24];
                      v255 = *(_OWORD *)&v239[40];
                      sub_22E5E0440(v170, (uint64_t)&v253, v240, v256);
                      v172 = v256[0];
                    }
                    else
                    {
                      *(_QWORD *)v239 = *(_QWORD *)(v3 + 8);
                      *(_QWORD *)&v239[8] = *(_QWORD *)v239 + 272;
                      v239[16] = 0;
                      *(_QWORD *)&v239[24] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v239 + 144) + 232);
                      v172 = sub_22E50E974(v239, v169, v151);
                    }
                    v173 = v270;
                    v174 = HIDWORD(v270);
                    v175 = 0xFFFF000000000040;
                    v176 = v172;
                  }
                  else
                  {
                    sub_22E4D8D7C(v239);
                    v187 = *(_QWORD *)(v3 + 8);
                    v253 = *(_OWORD *)&v239[8];
                    v254 = *(_OWORD *)&v239[24];
                    v255 = *(_OWORD *)&v239[40];
                    sub_22E5E0440(v187, (uint64_t)&v253, v240, v256);
                    v172 = v256[0];
                    v188 = *(_QWORD *)(v3 + 8);
                    sub_22E4D8D7C(v238);
                    sub_22EFF605C(*v167);
                    v176 = sub_22F25F748(v188, (uint64_t)v238, v189);
                    v173 = v270;
                    v174 = HIDWORD(v270);
                    v175 = 0xFFFF000000000050;
                  }
                  if (v173 >= v174)
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v173 = v270;
                  }
                  v269[v173] = v175;
                  LODWORD(v270) = v270 + 1;
                  v177 = v167[1];
                  v178 = v258;
                  if (v258 >= (unint64_t)HIDWORD(v258))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v178 = v258;
                  }
                  v179 = &v257[2 * v178];
                  *v179 = v177;
                  v179[1] = 0;
                  v180 = v261;
                  LODWORD(v258) = v258 + 1;
                  if (v261 >= HIDWORD(v261))
                  {
                    v190 = v167[1];
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v191 = &v260[2 * v261];
                    *v191 = v172;
                    v191[1] = v190;
                    v180 = v261;
                  }
                  else
                  {
                    v181 = v167[1];
                    v182 = &v260[2 * v261];
                    *v182 = v172;
                    v182[1] = v181;
                  }
                  LODWORD(v261) = v180 + 1;
                  v183 = v264;
                  if (v264 >= (unint64_t)HIDWORD(v264))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v183 = v264;
                  }
                  v263[v183] = v176;
                  LODWORD(v264) = v264 + 1;
                  v184 = llvm::Constant::getNullValue(*(llvm::Constant **)(*(_QWORD *)(v3 + 8) + 32), v171);
                  v185 = v267;
                  if (v267 >= (unint64_t)HIDWORD(v267))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v185 = v267;
                  }
                  v266[v185] = v184;
                  v186 = v273;
                  LODWORD(v267) = v267 + 1;
                  if (v273 >= (unint64_t)HIDWORD(v273))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v186 = v273;
                  }
                  v272[v186] = 0;
                  LODWORD(v273) = v273 + 1;
                  v167 += 3;
                  v168 -= 24;
                }
                while (v168);
              }
            }
          }
        }
        else
        {
          v192 = 1;
          while (v163 != -4096)
          {
            v193 = v162 + v192++;
            v162 = v193 & (v243 - 1);
            v163 = *((_QWORD *)v242[0] + 2 * v162);
            if (*v150 == v163)
              goto LABEL_208;
          }
        }
      }
      if (v312[0])
      {
        v194 = v277;
        if (v277 >= (unint64_t)HIDWORD(v277))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v194 = v277;
        }
        v276[v194] = 0;
        LODWORD(v277) = v277 + 1;
        sub_22E5C2354(v3, v208, (uint64_t)&v269, (uint64_t)&v282, v152, 1);
      }
      sub_22E5C27C8(v208, (uint64_t)&v257);
      sub_22E5B45E0((uint64_t)&v257);
      sub_22E5B45E0((uint64_t)&v282);
      v150 += 363;
    }
    while (v150 != v235);
  }
  sub_22E5C27C8(v208, (uint64_t)&v321);
  if ((v318 & 1) == 0)
    llvm::deallocate_buffer((llvm *)v319.i64[0], (void *)(8 * v319.u32[2]));
  sub_22E5B45E0((uint64_t)&v321);
  v195 = (char *)__p;
  if (__p)
  {
    for (i = v245; i != v195; i -= 120)
    {
      v197 = (char *)*((_QWORD *)i - 14);
      if (i - 96 != v197)
        free(v197);
    }
    operator delete(v195);
  }
  llvm::deallocate_buffer(v242[0], (void *)(16 * v243));
  v198 = (char *)v250;
  if (v250)
  {
    v199 = (char **)v251;
    v200 = v250;
    if (v251 != v250)
    {
      do
      {
        v201 = v199 - 363;
        sub_22E5C2970(v199 - 362);
        v199 = v201;
      }
      while (v201 != (char **)v198);
      v200 = v250;
    }
    v251 = (unint64_t *)v198;
    operator delete(v200);
  }
  return llvm::deallocate_buffer(v248[0], (void *)(16 * v249));
}

void sub_22E5BE3FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  unsigned int v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t *v58;
  char *v59;
  char **v60;
  char **v61;
  uint64_t v62;
  char **v63;
  char **v64;
  BOOL v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  char *v73;
  _QWORD *v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  int v82;
  void *__src;
  uint64_t v84;
  _BYTE v85[704];
  char *v86;
  uint64_t v87;
  _BYTE v88[2880];
  uint64_t v89;
  char *v90[362];
  uint64_t v91;
  char *v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;

  v14 = MEMORY[0x24BDAC7A8]();
  v17 = v16;
  v19 = v18;
  v21 = v20;
  v23 = v22;
  v25 = v24;
  v27 = v26;
  v28 = v15;
  v29 = (uint64_t *)v14;
  v103 = *MEMORY[0x24BDAC8D0];
  v30 = *(_QWORD *)(v14 + 8);
  if (v15)
    v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
  else
    v31 = 0;
  v89 = v31;
  v91 = 0;
  if (sub_22F275208((uint64_t *)v30, &v89, &v91))
  {
    v32 = v91;
    v33 = *(_QWORD *)v30;
    v34 = *(unsigned int *)(v30 + 16);
  }
  else
  {
    v33 = *(_QWORD *)v30;
    v34 = *(unsigned int *)(v30 + 16);
    v32 = *(_QWORD *)v30 + 8 * v34;
  }
  if (v32 == v33 + 8 * v34)
  {
    v35 = *v29;
    if (v28)
      v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 32))(v28);
    else
      v36 = 0;
    v37 = sub_22E5BE9CC(v35, v36);
    if (*(_QWORD *)(*v29 + 32) == v37)
    {
      v74 = (_QWORD *)*v29;
      v77 = v19;
      v78 = v23;
      v76 = v21;
      v42 = 0;
      __src = v85;
      v84 = 0x800000000;
      v86 = v88;
      v87 = 0x400000000;
      do
      {
        *(_QWORD *)&v88[v42] = &v88[v42 + 16];
        *(_QWORD *)&v88[v42 + 8] = 0x800000000;
        v43 = v84;
        if (&v88[v42] != (_BYTE *)&__src && v84 != 0)
        {
          v45 = v84;
          if (v84 < 9uLL || (llvm::SmallVectorBase<unsigned int>::grow_pod(), (v45 = v84) != 0))
            memcpy(*(void **)&v88[v42], __src, 88 * v45);
          *(_DWORD *)&v88[v42 + 8] = v43;
        }
        v42 += 720;
      }
      while (v42 != 2160);
      LODWORD(v87) = 3;
      v89 = v28;
      sub_22E5C2AA8((uint64_t)v90, (uint64_t)&v86);
      v46 = v89;
      if (v89)
        v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v89 + 32))(v89);
      v23 = v78;
      v47 = v74;
      v91 = v46;
      sub_22E5C2AA8((uint64_t)&v92, (uint64_t)v90);
      v81 = v91;
      v82 = 0;
      sub_22F28430C((uint64_t)&v79, (uint64_t)v74, &v81, &v82);
      v48 = v79;
      if (v80)
      {
        v50 = (uint64_t *)v74[4];
        v49 = v74[5];
        if ((unint64_t)v50 >= v49)
        {
          v52 = v74[3];
          v53 = 0x5E805A451CEA2343 * (((uint64_t)v50 - v52) >> 3);
          if ((unint64_t)(v53 + 1) > 0x1691473A88D0BFLL)
            abort();
          v54 = 0x5E805A451CEA2343 * ((uint64_t)(v49 - v52) >> 3);
          v55 = 2 * v54;
          if (2 * v54 <= v53 + 1)
            v55 = v53 + 1;
          if (v54 >= 0xB48A39D44685FLL)
            v56 = 0x1691473A88D0BFLL;
          else
            v56 = v55;
          v75 = v79;
          if (v56)
          {
            if (v56 > 0x1691473A88D0BFLL)
              sub_22E3B3F8C();
            v57 = (char *)operator new(2904 * v56);
          }
          else
          {
            v57 = 0;
          }
          v58 = (uint64_t *)&v57[2904 * v53];
          v59 = &v57[2904 * v56];
          *v58 = v91;
          sub_22E5C2AA8((uint64_t)(v58 + 1), (uint64_t)&v92);
          v51 = v58 + 363;
          v60 = (char **)v47[3];
          v61 = (char **)v47[4];
          if (v61 == v60)
          {
            v47[3] = v58;
            v47[4] = v51;
            v47[5] = v59;
            v19 = v77;
            v21 = v76;
          }
          else
          {
            do
            {
              v62 = (uint64_t)(v58 - 362);
              v58 -= 363;
              *v58 = (uint64_t)*(v61 - 363);
              sub_22E5C2AA8(v62, (uint64_t)(v61 - 362));
              v61 -= 363;
            }
            while (v61 != v60);
            v61 = (char **)v47[3];
            v63 = (char **)v47[4];
            v47[3] = v58;
            v47[4] = v51;
            v47[5] = v59;
            v21 = v76;
            if (v63 == v61)
            {
              v19 = v77;
            }
            else
            {
              v19 = v77;
              do
              {
                v64 = v63 - 363;
                sub_22E5C2970(v63 - 362);
                v63 = v64;
              }
              while (v64 != v61);
            }
          }
          v23 = v78;
          if (v61)
            operator delete(v61);
          v48 = v75;
        }
        else
        {
          *v50 = v91;
          sub_22E5C2AA8((uint64_t)(v50 + 1), (uint64_t)&v92);
          v51 = v50 + 363;
          v23 = v78;
        }
        v47[4] = v51;
        *(_DWORD *)(v48 + 8) = 485106499 * (((unint64_t)v51 - v47[3]) >> 3) - 1;
        v37 = (uint64_t)(v51 - 363);
      }
      else
      {
        v37 = v74[3] + 2904 * *(unsigned int *)(v79 + 8);
      }
      sub_22E5C2970(&v92);
      sub_22E5C2970(v90);
      sub_22E5C2970(&v86);
      if (__src != v85)
        free(__src);
    }
    v38 = *(_QWORD *)(v37 + 8) + 720 * v27;
    v39 = *(_DWORD *)(v38 + 8);
    if (v39 >= *(_DWORD *)(v38 + 12))
    {
      v91 = v25;
      v92 = v23;
      v93 = v21;
      v94 = v19;
      v95 = v17;
      v96 = a9;
      v97 = a10;
      v98 = 0;
      v99 = a11;
      v100 = a12;
      v101 = a13;
      v102 = a14;
      v65 = *(_QWORD *)v38 + 88 * (unint64_t)v39 > (unint64_t)&v91;
      if (*(_QWORD *)v38 <= (unint64_t)&v91 && v65)
      {
        v73 = (char *)&v91 - *(_QWORD *)v38;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v66 = *(_QWORD *)v38;
        v67 = (uint64_t *)&v73[*(_QWORD *)v38];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v66 = *(_QWORD *)v38;
        v67 = &v91;
      }
      v68 = v66 + 88 * *(unsigned int *)(v38 + 8);
      v69 = *((_OWORD *)v67 + 1);
      *(_OWORD *)v68 = *(_OWORD *)v67;
      *(_OWORD *)(v68 + 16) = v69;
      v70 = *((_OWORD *)v67 + 2);
      v71 = *((_OWORD *)v67 + 3);
      v72 = *((_OWORD *)v67 + 4);
      *(_QWORD *)(v68 + 80) = v67[10];
      *(_OWORD *)(v68 + 48) = v71;
      *(_OWORD *)(v68 + 64) = v72;
      *(_OWORD *)(v68 + 32) = v70;
      v41 = *(_DWORD *)(v38 + 8) + 1;
    }
    else
    {
      v40 = *(_QWORD *)v38 + 88 * v39;
      *(_QWORD *)v40 = v25;
      *(_QWORD *)(v40 + 8) = v23;
      *(_DWORD *)(v40 + 16) = v21;
      *(_QWORD *)(v40 + 24) = v19;
      *(_QWORD *)(v40 + 32) = v17;
      *(_QWORD *)(v40 + 40) = a9;
      *(_QWORD *)(v40 + 48) = a10;
      *(_BYTE *)(v40 + 56) = 0;
      *(_BYTE *)(v40 + 57) = a11;
      *(_QWORD *)(v40 + 64) = a12;
      *(_QWORD *)(v40 + 72) = a13;
      *(_BYTE *)(v40 + 80) = a14;
      v41 = v39 + 1;
    }
    *(_DWORD *)(v38 + 8) = v41;
  }
}

uint64_t sub_22E5BE9CC(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  uint64_t v5;

  v5 = 0;
  if (sub_22F24C318(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v5))
    v3 = v5 == *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  else
    v3 = 1;
  if (v3)
    return *(_QWORD *)(a1 + 32);
  else
    return *(_QWORD *)(a1 + 24) + 2904 * *(unsigned int *)(v5 + 8);
}

uint64_t sub_22E5BEA3C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v24;
  char v25;
  uint64_t v26;
  int v27;
  void *v28[2];
  _BYTE v29[96];
  uint64_t v30;
  void *v31[2];
  _QWORD v32[13];

  v32[12] = *MEMORY[0x24BDAC8D0];
  v26 = *a2;
  v27 = 0;
  sub_22F28430C((uint64_t)&v24, (uint64_t)a1, &v26, &v27);
  v4 = v24;
  if (v25)
  {
    v28[0] = v29;
    v28[1] = (void *)0x400000000;
    v30 = *a2;
    sub_22E5C2DCC((uint64_t)v31, (uint64_t)v28);
    v6 = (uint64_t *)a1[4];
    v5 = a1[5];
    if ((unint64_t)v6 >= v5)
    {
      v10 = a1[3];
      v11 = 0xEEEEEEEEEEEEEEEFLL * (((uint64_t)v6 - v10) >> 3);
      v12 = v11 + 1;
      if (v11 + 1 > 0x222222222222222)
        abort();
      v13 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v5 - v10) >> 3);
      if (2 * v13 > v12)
        v12 = 2 * v13;
      if (v13 >= 0x111111111111111)
        v14 = 0x222222222222222;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 > 0x222222222222222)
          sub_22E3B3F8C();
        v15 = (char *)operator new(120 * v14);
      }
      else
      {
        v15 = 0;
      }
      v16 = (uint64_t *)&v15[120 * v11];
      v17 = &v15[120 * v14];
      *v16 = v30;
      v7 = v16 + 15;
      sub_22E5C2DCC((uint64_t)(v16 + 1), (uint64_t)v31);
      v19 = (char *)a1[3];
      v18 = (char *)a1[4];
      if (v18 == v19)
      {
        a1[3] = v16;
        a1[4] = v7;
        a1[5] = v17;
      }
      else
      {
        do
        {
          v20 = *((_QWORD *)v18 - 15);
          v18 -= 120;
          *(v16 - 15) = v20;
          v16 -= 15;
          sub_22E5C2DCC((uint64_t)(v16 + 1), (uint64_t)(v18 + 8));
        }
        while (v18 != v19);
        v18 = (char *)a1[3];
        v21 = (char *)a1[4];
        a1[3] = v16;
        a1[4] = v7;
        a1[5] = v17;
        while (v21 != v18)
        {
          v22 = (char *)*((_QWORD *)v21 - 14);
          if (v21 - 96 != v22)
            free(v22);
          v21 -= 120;
        }
      }
      if (v18)
        operator delete(v18);
    }
    else
    {
      *v6 = v30;
      v7 = v6 + 15;
      sub_22E5C2DCC((uint64_t)(v6 + 1), (uint64_t)v31);
    }
    a1[4] = v7;
    if (v31[0] != v32)
      free(v31[0]);
    if (v28[0] != v29)
      free(v28[0]);
    v9 = a1[3];
    v8 = -286331153 * ((unint64_t)(a1[4] - v9) >> 3) - 1;
    *(_DWORD *)(v4 + 8) = v8;
  }
  else
  {
    v8 = *(_DWORD *)(v24 + 8);
    v9 = a1[3];
  }
  return v9 + 120 * v8 + 8;
}

uint64_t sub_22E5BECAC(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  char *v13;
  _QWORD v14[2];
  char v15;

  v4 = result;
  v5 = *(_DWORD *)(result + 8);
  if (v5 >= *(_DWORD *)(result + 12))
  {
    v14[0] = a2;
    v14[1] = a3;
    v15 = a4;
    v8 = *(_QWORD *)result + 24 * (unint64_t)v5 > (unint64_t)v14;
    if (*(_QWORD *)result <= (unint64_t)v14 && v8)
    {
      v13 = (char *)v14 - *(_QWORD *)result;
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v9 = *(_QWORD *)v4;
      v10 = &v13[*(_QWORD *)v4];
    }
    else
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v9 = *(_QWORD *)v4;
      v10 = (char *)v14;
    }
    v11 = v9 + 24 * *(unsigned int *)(v4 + 8);
    v12 = *(_OWORD *)v10;
    *(_QWORD *)(v11 + 16) = *((_QWORD *)v10 + 2);
    *(_OWORD *)v11 = v12;
    v7 = *(_DWORD *)(v4 + 8) + 1;
  }
  else
  {
    v6 = *(_QWORD *)result + 24 * v5;
    *(_QWORD *)v6 = a2;
    *(_QWORD *)(v6 + 8) = a3;
    *(_BYTE *)(v6 + 16) = a4;
    v7 = v5 + 1;
  }
  *(_DWORD *)(v4 + 8) = v7;
  return result;
}

uint64_t sub_22E5BED8C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v5 = result;
  v6 = *(unsigned int *)(result + 8);
  if (v6 >= *(_DWORD *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_QWORD *)v5 + 16 * *(unsigned int *)(v5 + 8);
    *(_QWORD *)v6 = a2;
    *(_QWORD *)(v6 + 8) = a3;
    LODWORD(v6) = *(_DWORD *)(v5 + 8);
  }
  else
  {
    v7 = (_QWORD *)(*(_QWORD *)result + 16 * v6);
    *v7 = a2;
    v7[1] = a3;
  }
  *(_DWORD *)(v5 + 8) = v6 + 1;
  return result;
}

void sub_22E5BEE04(uint64_t a1, int a2, _DWORD *a3, uint64_t a4, _DWORD *a5, uint64_t a6, _QWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 a11, unsigned __int8 a12, uint64_t a13, unsigned __int8 a14, unint64_t a15, unint64_t a16, uint64_t a17, uint64_t a18)
{
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unsigned __int8 *v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned __int8 **v27;
  uint64_t v28;
  int v29;
  BOOL v30;
  uint64_t v31;
  int v32;
  __n128 v33;
  unint64_t v34;
  unsigned __int8 *v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  unint64_t v55;
  void **v56;
  _BOOL4 v57;
  __int128 v59;
  _QWORD *v60;
  unsigned __int8 *v61;
  _BOOL4 v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 *v70;
  unint64_t v71;
  uint64_t v72;
  char v73;
  _QWORD *v74;
  uint64_t v75;
  char v76;
  unint64_t v77;
  uint64_t v78;
  _BOOL4 v79;
  uint64_t v80;
  unint64_t v81;
  unsigned __int8 *v82;
  int v83;
  unsigned __int8 *v84;
  unint64_t v85;
  int v86;
  _BOOL4 v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  char v91;
  _QWORD *v92;
  unint64_t v93;
  unsigned __int8 *v94;
  int v95;
  int v96;
  BOOL v97;
  unsigned __int8 *v98;
  _BOOL8 v100;
  _BOOL4 v102;
  int v103;
  uint64_t v104;
  _BOOL4 v105;
  _BOOL8 v106;
  _QWORD *v107;
  unint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  unsigned __int8 *v116;
  uint64_t v117;
  BOOL v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  int v135;
  unsigned __int8 *v136;
  uint64_t v137;
  uint64_t *v138;
  unint64_t v139;
  llvm::Instruction *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  llvm::Value *v149;
  int v150;
  llvm::Value *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  int v156;
  uint64_t v157;
  unsigned __int8 *v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t Select;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  llvm::Value *v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  int v173;
  llvm::Value *v174;
  uint64_t v175;
  BOOL v176;
  _BOOL4 v177;
  uint64_t v178;
  int v179;
  unint64_t v180;
  uint64_t *v181;
  void *v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  _QWORD *v190;
  char v191;
  BOOL v192;
  int v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  _BOOL4 v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unsigned int v202;
  unsigned int v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  uint64_t v207;
  __n128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __n128 v212;
  BOOL v213;
  void **v214;
  __int128 v215;
  uint64_t *v216;
  uint64_t v217;
  __n128 v218;
  llvm::Value *v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  int v226;
  llvm::Value *v227;
  uint64_t v228;
  llvm::Instruction *v229;
  uint64_t v230;
  uint64_t v231;
  char v232;
  unint64_t v233;
  int v234;
  int v235;
  uint64_t v236;
  __int128 v237;
  uint64_t v238;
  _QWORD *v239;
  uint64_t *v240;
  uint64_t v241;
  unint64_t v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __n128 v246;
  void **v247;
  unsigned int v248;
  const void *v249;
  _BYTE *v250;
  uint64_t v251;
  unsigned int v252;
  const void *v253;
  _BYTE *v254;
  uint64_t v255;
  void *v256;
  void **v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  void *v261;
  void **v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  _BYTE *v266;
  int v267;
  uint64_t v268;
  _BYTE *v269;
  int v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t PtrDiff;
  unint64_t v275;
  __int128 v276;
  uint64_t v277;
  _QWORD *v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  unint64_t v282;
  _QWORD *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  _QWORD *v287;
  _QWORD *v288;
  uint64_t *v289;
  _QWORD *v290;
  uint64_t *v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t *v294;
  void *v295;
  unint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  unint64_t v300;
  unint64_t v301;
  unint64_t v302;
  unint64_t v303;
  uint64_t *v304;
  uint64_t v305;
  unsigned int v306;
  uint64_t *v307;
  int v308;
  void *v309;
  unsigned int v310;
  uint64_t v311;
  _QWORD *v312;
  uint64_t *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unsigned int v318;
  unsigned int v319;
  unsigned int v320;
  unsigned int v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  __int128 *v326;
  _QWORD *v327;
  unsigned __int8 **v328;
  unint64_t v329;
  unint64_t v330;
  unint64_t v331;
  unint64_t v332;
  __n128 v333;
  unint64_t v334;
  unint64_t v335;
  uint64_t v336;
  int v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  __n128 v350;
  _QWORD *v351;
  llvm::Instruction *v352;
  uint64_t *v353;
  uint64_t v354;
  unsigned __int8 *v355;
  int v356;
  uint64_t v357;
  uint64_t *v358;
  uint64_t v359;
  int v360;
  BOOL v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  __n128 v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t *v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  llvm::Instruction *v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  __n128 v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t *v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  llvm::Instruction *v410;
  uint64_t v411;
  uint64_t v412;
  void *v413;
  void *v414;
  int v415;
  int v416;
  _BYTE *v417;
  unint64_t v418;
  uint64_t v419;
  unint64_t v420;
  unint64_t v421;
  uint64_t v422;
  _QWORD *v423;
  void **v424;
  void *__src;
  void *v426;
  void **v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  __n128 *v432;
  _OWORD *v433;
  _OWORD *v434;
  uint64_t v436;
  _OWORD *v437;
  char v442;
  _BOOL4 v443;
  int v444;
  int v445;
  int v446;
  unsigned int v447;
  _QWORD *v449;
  unint64_t v450;
  _QWORD *v452;
  _BOOL4 v453;
  _QWORD *v454;
  _QWORD *v455;
  unsigned int v456;
  int v457;
  int v458;
  char v459;
  unint64_t v460;
  unint64_t v461;
  uint64_t v462;
  _QWORD *__dst;
  int __dsta;
  unsigned __int8 *v465;
  uint64_t v466;
  uint64_t v467;
  _OWORD v469[3];
  _OWORD v470[3];
  _OWORD v471[3];
  _OWORD v472[8];
  uint64_t v473;
  _BYTE v474[48];
  _OWORD v475[3];
  _BYTE v476[48];
  __int128 v477;
  __int128 v478;
  __int128 v479;
  __int128 v480[3];
  _OWORD v481[8];
  uint64_t v482;
  __int128 v483;
  __int128 v484;
  __n128 v485;
  _OWORD v486[3];
  _OWORD v487[3];
  __int128 v488;
  __int128 v489;
  __n128 v490;
  _BYTE v491[40];
  int v492;
  __int128 v493[2];
  uint64_t v494;
  _BYTE v495[112];
  void *v496[2];
  __int128 v497;
  __int128 v498;
  _BYTE v499[64];
  __int128 v500;
  __int128 v501;
  __int128 v502;
  __int128 v503;
  uint64_t v504;
  _BYTE *v505;
  unint64_t v506;
  _BYTE v507[32];
  _BYTE *v508;
  unint64_t v509;
  _BYTE v510[32];
  _QWORD v511[2];
  uint64_t v512;
  _QWORD v513[2];
  uint64_t v514;
  char v515;
  _QWORD v516[2];
  uint64_t v517;
  _QWORD v518[2];
  uint64_t v519;
  _QWORD v520[2];
  uint64_t v521;
  _QWORD v522[2];
  uint64_t v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  uint64_t v527;

  v18 = a7;
  v19 = a1;
  v20 = a9;
  v527 = *MEMORY[0x24BDAC8D0];
  v21 = &a7[2 * a8];
  v488 = 0uLL;
  DWORD2(v489) = 0;
  *(_QWORD *)&v489 = 0;
  v490 = 0uLL;
  v22 = (unsigned __int8 *)(*(v21 - 2) & 0xFFFFFFFFFFFFFFFCLL);
  v23 = *v22;
  if (v23 == 107)
    v24 = *(v21 - 2) & 0xFFFFFFFFFFFFFFFCLL;
  else
    v24 = 0;
  if (v23 == 191)
    v25 = *(v21 - 2) & 0xFFFFFFFFFFFFFFFCLL;
  else
    v25 = 0;
  if (v23 == 192)
    v26 = *(v21 - 2) & 0xFFFFFFFFFFFFFFFCLL;
  else
    v26 = 0;
  v452 = &a7[2 * a8];
  if (v23 == 188)
  {
    sub_22F24FFF8(*(_QWORD **)(a1 + 8), &v488);
    v32 = 0;
    v444 = 0;
    goto LABEL_58;
  }
  v454 = v21 - 2;
  if (!v24)
    goto LABEL_25;
  v27 = (unsigned __int8 **)(v24 + 24);
  v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 24) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v29 = *(_DWORD *)(v28 + 16);
  if (v28)
    v30 = v29 == 11;
  else
    v30 = 0;
  if (v30)
  {
    if (((*(_DWORD *)(v28 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
      goto LABEL_24;
    goto LABEL_23;
  }
  if (!v28 || v29 != 44)
  {
    if (v29 != 9)
      goto LABEL_24;
LABEL_23:
    v27 = (unsigned __int8 **)(v24 + 16);
    goto LABEL_24;
  }
  v31 = sub_22F114198(*(_QWORD *)(v28 + 24));
  if (((*(_BYTE *)(v31 + 74) & 1) != 0 || *(_QWORD *)(v31 + 128) > 7uLL)
    && (*(_QWORD *)(sub_22F114198(*(_QWORD *)(v28 + 24)) + 72) & 0x8000000000) == 0)
  {
    goto LABEL_23;
  }
LABEL_24:
  if (*sub_22EFFA6B0(*v27) == 133)
  {
LABEL_27:
    sub_22E5F0080(*(_QWORD **)(v19 + 8), v22, v499);
    v32 = 0;
    v444 = 0;
    v488 = *(_OWORD *)&v499[8];
    v489 = *(_OWORD *)&v499[24];
    v33 = *(__n128 *)&v499[40];
    v490 = *(__n128 *)&v499[40];
LABEL_58:
    v42 = v21;
    goto LABEL_59;
  }
LABEL_25:
  if (v25 && *sub_22EFFA6B0(*(unsigned __int8 **)(v25 + 16)) == 133)
    goto LABEL_27;
  if (!v26
    || (v34 = v26 + 32,
        v35 = *(unsigned __int8 **)(v26 + 32 + 8 * *(unsigned int *)(v26 + 24)),
        *sub_22EFFBBCC(v35) != 133))
  {
    sub_22E5F0080(*(_QWORD **)(v19 + 8), v22, v499);
    v488 = *(_OWORD *)&v499[8];
    v489 = *(_OWORD *)&v499[24];
    v33 = *(__n128 *)&v499[40];
    v490 = *(__n128 *)&v499[40];
    v43 = *(v21 - 1);
    if (!v43 || (*(_DWORD *)(v43 + 28) & 0x7Fu) - 60 > 6 || (v44 = sub_22EF95D10(*(v21 - 1)), !v45))
    {
      v444 = 0;
LABEL_35:
      v46 = *(_QWORD *)(*(v21 - 1) + 48) & 0xFFFFFFFFFFFFFFF0;
      v47 = *(_QWORD *)v46;
      if (!*(_QWORD *)v46 || (v48 = *(_DWORD *)(v47 + 16), (v48 & 0xFE) != 0x28))
      {
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v47 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
          goto LABEL_38;
        v47 = sub_22F10CF48(v47);
        if (!v47)
        {
          v20 = a9;
          v18 = a7;
          v19 = a1;
          v21 = v452;
          goto LABEL_38;
        }
        v48 = *(_DWORD *)(v47 + 16);
        v20 = a9;
        v18 = a7;
        v19 = a1;
        v21 = v452;
      }
      if ((v48 & 0x100000) != 0)
      {
        v20 = a9;
        v18 = a7;
        v19 = a1;
        v21 = v452;
        do
        {
          v47 = *(_QWORD *)(*(_QWORD *)(v47 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v47)
          {
            v415 = *(_DWORD *)(v47 + 16);
            if ((v415 & 0xFE) == 0x28)
              continue;
          }
          v47 = sub_22F10CF48(v47);
          v415 = *(_DWORD *)(v47 + 16);
        }
        while ((v415 & 0x100000) != 0);
      }
      v46 = *(_QWORD *)(v47 + 32) & 0xFFFFFFFFFFFFFFF0;
LABEL_38:
      v49 = *(_QWORD *)v46;
      v50 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v46 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v50 != 39 && v50 != 32 || v454 == v18)
      {
        v32 = 0;
        goto LABEL_58;
      }
      if ((*(_DWORD *)(*(v21 - 1) + 28) & 0x7Fu) - 60 >= 7)
        v51 = 0;
      else
        v51 = *(v21 - 1);
      v52 = *(_QWORD *)(v19 + 8);
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v52 + 144) + 808) + 4248))
        v53 = 1;
      else
        v53 = v51 == 0;
      if (!v53)
      {
        if (!sub_22E3CB5E0(v51))
        {
          v32 = 1;
LABEL_298:
          v42 = v454;
          goto LABEL_59;
        }
        v52 = *(_QWORD *)(v19 + 8);
        v49 = *(_QWORD *)v46;
      }
      v487[0] = v488;
      v487[1] = v489;
      v487[2] = v490;
      if (!v49 || *(_BYTE *)(v49 + 16) != 39)
        v49 = sub_22F10CF48(v49);
      sub_22E4E98F8(v52, v487, v49, 0, 0, v499);
      v32 = 0;
      v488 = *(_OWORD *)v499;
      v489 = *(_OWORD *)&v499[16];
      v33 = *(__n128 *)&v499[32];
      v490 = *(__n128 *)&v499[32];
      goto LABEL_298;
    }
    v416 = *(_DWORD *)(v44 + 36);
    if (v416)
    {
      if (v416 == 1)
      {
        v417 = *(_BYTE **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 808);
LABEL_571:
        v418 = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)v417 + 304))(v417, v43);
        v420 = v418 & 0xFFFFFFFFFFFFFFF8;
        if (v418 <= 7)
          v420 = 0;
        v421 = v419 & 0xFFFFFFFFFFFFFFF8;
        if (v418 <= 7)
          v421 = 0;
        *(_QWORD *)&v488 = v420;
        *((_QWORD *)&v488 + 1) = v421;
        v422 = 1 << (v419 & 7 | (8 * (v418 & 7)));
        if (v418 < 8)
          v422 = 0;
        *(_QWORD *)&v489 = v422;
        DWORD2(v489) = 0;
        v490 = 0uLL;
        v444 = 1;
        goto LABEL_579;
      }
    }
    else
    {
      v417 = *(_BYTE **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 808);
      if (v417[4248])
        goto LABEL_571;
    }
    v444 = 0;
LABEL_579:
    v20 = a9;
    v18 = a7;
    v19 = a1;
    v21 = v452;
    goto LABEL_35;
  }
  *(_QWORD *)v499 = *(_QWORD *)(v19 + 8);
  *(_QWORD *)&v499[8] = *(_QWORD *)v499 + 272;
  v499[16] = 0;
  *(_QWORD *)&v499[24] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v499 + 144) + 232);
  v37 = sub_22E50E974(v499, v35, v36);
  v38 = *(_QWORD *)(v19 + 8);
  v39 = sub_22F10ACF8(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v34 + 8 * *(unsigned int *)(v26 + 24)) + 8) & 0xFFFFFFFFFFFFFFF0));
  v40 = sub_22E66C868(*(_QWORD *)(v38 + 144) + 280, v39, 0);
  v41 = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 8) + 144) + 144), *(_QWORD *)(*(_QWORD *)(v34 + 8 * *(unsigned int *)(v26 + 24)) + 8));
  v32 = 0;
  v444 = 0;
  *(_QWORD *)&v488 = v37;
  *((_QWORD *)&v488 + 1) = v40;
  v21 = v452;
  *(_QWORD *)&v489 = v41;
  DWORD2(v489) = 0;
  v42 = v452;
  v490 = 0uLL;
LABEL_59:
  v54 = *(unsigned __int8 *)(v20 + 352);
  if (v42 == v18)
    goto LABEL_433;
  v459 = 0;
  v465 = 0;
  v55 = 0;
  v446 = a11;
  v56 = (void **)v20;
  v57 = v54 == 0;
  v424 = v56 + 20;
  __src = v56 + 22;
  v427 = v56 + 26;
  v428 = (uint64_t)(v56 + 10);
  v426 = v56 + 28;
  v431 = (uint64_t)(v56 + 45);
  v59 = 0uLL;
  v430 = (uint64_t)(v56 + 38);
  v429 = (uint64_t)(v56 + 32);
  v437 = (_OWORD *)(a10 + 1144);
  v433 = (_OWORD *)(a10 + 1096);
  v434 = (_OWORD *)(a10 + 1040);
  v432 = (__n128 *)(a10 + 1192);
  v445 = 1;
  v466 = 1;
  v447 = v54;
  v453 = v57;
  while (1)
  {
    v60 = v42;
    if (v465)
      goto LABEL_73;
    v61 = (unsigned __int8 *)(*(v42 - 2) & 0xFFFFFFFFFFFFFFFCLL);
    v62 = *v61 == 188;
    if (*v61 != 188)
      v61 = 0;
    v465 = v61;
    if ((v32 & v62) != 1)
    {
      v459 |= v62;
      goto LABEL_73;
    }
    v63 = v55;
    v64 = a16;
    v65 = (uint64_t *)(*(_QWORD *)(v42[1] + 48) & 0xFFFFFFFFFFFFFFF0);
    v66 = *v65;
    if (*v65)
    {
      v67 = *(_DWORD *)(v66 + 16);
      if ((v67 & 0xFE) == 0x28)
        goto LABEL_288;
    }
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v66 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
    {
      v66 = sub_22F10CF48(v66);
      if (v66)
      {
        v67 = *(_DWORD *)(v66 + 16);
        v18 = a7;
        v19 = a1;
        v21 = v452;
        v54 = v447;
        v57 = v453;
LABEL_288:
        if ((v67 & 0x100000) != 0)
        {
          do
          {
            v66 = *(_QWORD *)(*(_QWORD *)(v66 + 32) & 0xFFFFFFFFFFFFFFF0);
            if (!v66 || (v235 = *(_DWORD *)(v66 + 16), (v235 & 0xFE) != 0x28))
            {
              v66 = sub_22F10CF48(v66);
              v235 = *(_DWORD *)(v66 + 16);
            }
            v18 = a7;
            v19 = a1;
            v21 = v452;
            v54 = v447;
            v57 = v453;
          }
          while ((v235 & 0x100000) != 0);
        }
        v65 = (uint64_t *)(*(_QWORD *)(v66 + 32) & 0xFFFFFFFFFFFFFFF0);
        goto LABEL_68;
      }
      v18 = a7;
      v19 = a1;
      v21 = v452;
      v54 = v447;
      v57 = v453;
    }
LABEL_68:
    v68 = *(_QWORD *)(v19 + 8);
    v486[0] = v488;
    v486[1] = v489;
    v486[2] = v490;
    v69 = *v65;
    if (!*v65 || *(_BYTE *)(v69 + 16) != 39)
      v69 = sub_22F10CF48(*v65);
    v55 = v63;
    sub_22E4E98F8(v68, v486, v69, 0, 0, v499);
    LOBYTE(v32) = 0;
    v488 = *(_OWORD *)v499;
    v489 = *(_OWORD *)&v499[16];
    v33 = *(__n128 *)&v499[32];
    v490 = *(__n128 *)&v499[32];
    v459 = 1;
    v59 = 0uLL;
    a16 = v64;
LABEL_73:
    v42 = v60 - 2;
    __dst = v60;
    if ((_DWORD)v54 || (v70 = (unsigned __int8 *)(*v42 & 0xFFFFFFFFFFFFFFFCLL), *v70 != 191) || !*((_DWORD *)v70 + 12))
    {
      v79 = 0;
      goto LABEL_81;
    }
    v71 = a16;
    v72 = v54;
    v73 = v32;
    v74 = v60 - 2;
    v75 = *((_QWORD *)v70 + 4);
    if (v75)
    {
      *(_WORD *)v499 = 0;
      *(_QWORD *)&v499[8] = 0;
      *(_DWORD *)&v499[16] = 0;
      if (!sub_22F00554C(v75, (uint64_t)v499, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 8) + 144) + 144), 0, 0))
      {
        v79 = 1;
        a16 = v71;
LABEL_154:
        if (*(_DWORD *)&v499[16] >= 2u)
        {
          v130 = a16;
          sub_22EF53BC0((uint64_t *)&v499[16]);
          a16 = v130;
        }
        v42 = v74;
        v59 = 0uLL;
        LOBYTE(v32) = v73;
        v54 = v72;
        goto LABEL_157;
      }
      v76 = v499[32];
      *(_DWORD *)&v495[8] = *(_DWORD *)&v499[32];
      if (*(_DWORD *)&v499[32] > 0x40u)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)v495, (const llvm::APInt *)&v499[24]);
        v76 = v495[8];
        v495[12] = v499[36];
        v77 = v55;
        if (*(_DWORD *)&v495[8] > 0x40u)
        {
          v129 = **(_QWORD **)v495;
          MEMORY[0x2348A0E84]();
          goto LABEL_153;
        }
        v78 = *(_QWORD *)v495;
      }
      else
      {
        v77 = v55;
        v78 = *(_QWORD *)&v499[24];
      }
      v129 = v78 << -v76 >> -v76;
LABEL_153:
      v79 = v129 != 1;
      a16 = v71;
      v55 = v77;
      v60 = __dst;
      goto LABEL_154;
    }
    v116 = sub_22EFFA6B0(*((unsigned __int8 **)v70 + 2));
    v117 = *(_QWORD *)(*(_QWORD *)((sub_22F00338C(v116) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v117)
      v118 = *(_BYTE *)(v117 + 16) == 2;
    else
      v118 = 0;
    if (!v118)
    {
      v79 = 1;
      v42 = v60 - 2;
      v59 = 0uLL;
      LOBYTE(v32) = v73;
      v54 = v72;
      v21 = v452;
      a16 = v71;
      goto LABEL_81;
    }
    v127 = *(_DWORD *)(v117 + 48);
    LOBYTE(v32) = v73;
    v128 = v127 > 0x40 ? **(_QWORD **)(v117 + 40) : (uint64_t)(*(_QWORD *)(v117 + 40) << -(char)v127) >> -(char)v127;
    v42 = v60 - 2;
    v59 = 0uLL;
    v54 = v72;
    a16 = v71;
    v79 = v128 != 1;
LABEL_157:
    v21 = v452;
LABEL_81:
    v80 = *(v60 - 2);
    v81 = a15;
    if (*(v60 - 1))
      v81 = *(v60 - 1);
    v82 = (unsigned __int8 *)(v80 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v80 & 0xFFFFFFFFFFFFFFFCLL) != 0)
      a16 = v80 & 0xFFFFFFFFFFFFFFFCLL;
    v83 = *v82;
    if (v83 == 191)
      v84 = (unsigned __int8 *)(v80 & 0xFFFFFFFFFFFFFFFCLL);
    else
      v84 = 0;
    if (v83 == 192)
      v85 = v80 & 0xFFFFFFFFFFFFFFFCLL;
    else
      v85 = 0;
    if (v85)
    {
      v86 = 1;
      goto LABEL_104;
    }
    if (v84)
    {
      v461 = a16;
      v456 = v55;
      v87 = v79;
      v88 = v18;
      v89 = v21;
      v90 = v54;
      v91 = v32;
      v92 = v42;
      v93 = v81;
      v94 = v84;
      v95 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((sub_22F00338C(v84) & 0xFFFFFFFFFFFFFFF0)
                                                                               + 8) & 0xFFFFFFFFFFFFFFF0)
                                                       + 8) & 0xFFFFFFFFFFFFFFF0)
                               + 16);
      if (v95 == 32)
      {
        v81 = v93;
        v42 = v92;
        v57 = v453;
        v59 = 0uLL;
        LOBYTE(v32) = v91;
        v54 = v90;
        v21 = v89;
        v18 = v88;
        v79 = v87;
        v84 = v94;
        v86 = 1;
        v55 = v456;
        a16 = v461;
        goto LABEL_104;
      }
      v81 = v93;
      v42 = v92;
      v57 = v453;
      v59 = 0uLL;
      LOBYTE(v32) = v91;
      v54 = v90;
      v21 = v89;
      v18 = v88;
      v79 = v87;
      v84 = v94;
      v86 = 1;
      v55 = v456;
      a16 = v461;
      if (v95 == 39)
        goto LABEL_104;
      v82 = (unsigned __int8 *)(*v42 & 0xFFFFFFFFFFFFFFFCLL);
    }
    v96 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v82 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                             + 16);
    v97 = v96 == 39 || v96 == 32;
    v86 = v97;
LABEL_104:
    v98 = (unsigned __int8 *)(*v42 & 0xFFFFFFFFFFFFFFFCLL);
    v100 = *v98 == 188
        && v81 != 0
        && *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v81 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                              + 16) == 40;
    v102 = v83 != 233 && (v83 & 0xFE) != 112 && v57;
    v103 = v102 & v86;
    v104 = v466;
    if (v83 == 191)
      v104 = v466 + 1;
    v466 = v104;
    v105 = v42 == v18 || v100;
    if (((v105 || v79) | v103) == 1)
      break;
    if ((v32 & 1) != 0)
    {
      v106 = v55;
      v107 = v42;
      v108 = a16;
      v109 = (uint64_t *)(*(_QWORD *)(*(v21 - 1) + 48) & 0xFFFFFFFFFFFFFFF0);
      v110 = *v109;
      v19 = a1;
      if (!*v109 || (v111 = *(_DWORD *)(v110 + 16), (v111 & 0xFE) != 0x28))
      {
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v110 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
          goto LABEL_126;
        v110 = sub_22F10CF48(v110);
        if (!v110)
        {
          v18 = a7;
          v19 = a1;
          v21 = v452;
          v54 = v447;
          v57 = v453;
LABEL_126:
          v112 = *(_QWORD *)(v19 + 8);
          v469[0] = v488;
          v469[1] = v489;
          v469[2] = v490;
          v113 = *v109;
          if (!*v109 || *(_BYTE *)(v113 + 16) != 39)
            v113 = sub_22F10CF48(*v109);
          sub_22E4E98F8(v112, v469, v113, 0, 0, v499);
          v488 = *(_OWORD *)v499;
          v489 = *(_OWORD *)&v499[16];
          v33 = *(__n128 *)&v499[32];
          v490 = *(__n128 *)&v499[32];
          v100 = v106;
          v42 = v107;
          v59 = 0uLL;
          a16 = v108;
          goto LABEL_131;
        }
        v111 = *(_DWORD *)(v110 + 16);
        v18 = a7;
        v19 = a1;
        v21 = v452;
        v54 = v447;
        v57 = v453;
      }
      if ((v111 & 0x100000) != 0)
      {
        do
        {
          v110 = *(_QWORD *)(*(_QWORD *)(v110 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (!v110 || (v234 = *(_DWORD *)(v110 + 16), (v234 & 0xFE) != 0x28))
          {
            v110 = sub_22F10CF48(v110);
            v234 = *(_DWORD *)(v110 + 16);
          }
          v18 = a7;
          v19 = a1;
          v21 = v452;
          v54 = v447;
          v57 = v453;
        }
        while ((v234 & 0x100000) != 0);
      }
      v109 = (uint64_t *)(*(_QWORD *)(v110 + 32) & 0xFFFFFFFFFFFFFFF0);
      goto LABEL_126;
    }
    v100 = v55;
    v19 = a1;
LABEL_131:
    v32 = 0;
    v55 = v100;
    if (v42 == v18)
      goto LABEL_432;
  }
  v496[1] = 0;
  v496[0] = 0;
  DWORD2(v497) = 0;
  *(_QWORD *)&v497 = 0;
  v498 = 0uLL;
  v462 = a16;
  v450 = v81;
  v455 = v42;
  v442 = v32;
  v436 = (uint64_t)v84;
  if (v85)
  {
    v457 = v55;
    v55 = v85 + 32;
    v119 = *(_QWORD *)(v85 + 32 + 8 * *(unsigned int *)(v85 + 24));
    *(_QWORD *)v499 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)&v499[8] = *(_QWORD *)v499 + 272;
    v499[16] = 0;
    *(_QWORD *)&v499[24] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v499 + 144) + 232);
    v54 = sub_22E50E974(v499, v119, v33);
    v120 = *(_QWORD *)(a1 + 8);
    v121 = sub_22F10ACF8(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v85 + 32 + 8 * *(unsigned int *)(v85 + 24)) + 8) & 0xFFFFFFFFFFFFFFF0));
    v122 = (void *)sub_22E66C868(*(_QWORD *)(v120 + 144) + 280, v121, 0);
    v123 = *(unsigned int *)(v85 + 24);
    v19 = a1;
    v124 = *(_QWORD *)(v55 + 8 * v123);
    LODWORD(v55) = v457;
    v125 = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 144), *(_QWORD *)(v124 + 8));
    v496[0] = (void *)v54;
    LODWORD(v54) = v447;
    v496[1] = v122;
    v126 = a9;
    *(_QWORD *)&v497 = v125;
    DWORD2(v497) = 0;
    v498 = 0uLL;
    v483 = *(_OWORD *)v496;
    v484 = v497;
    v485 = 0uLL;
  }
  else if (v100)
  {
    v114 = *(_QWORD **)(a1 + 8);
    v115 = *((_QWORD *)v98 + 2);
    memset(&v499[8], 0, 28);
    *(_QWORD *)&v499[40] = 0;
    *(_QWORD *)&v499[48] = 0;
    v500 = 0uLL;
    *(_QWORD *)((char *)&v501 + 4) = 2;
    v502 = v59;
    v503 = v59;
    if ((v98[2] & 4) != 0)
    {
      LODWORD(v493[0]) = 2;
      *(_DWORD *)v474 = 0;
      *(_OWORD *)&v474[8] = v59;
      *(_OWORD *)&v474[24] = v59;
      v423 = v114;
      sub_22E4DFD40(&v524, v114);
      v131 = sub_22F10ACF8(*(_QWORD *)(*(_QWORD *)(v115 + 8) & 0xFFFFFFFFFFFFFFF0));
      *(_OWORD *)v495 = v524;
      *(_OWORD *)&v495[16] = v525;
      *(_OWORD *)&v495[32] = v526;
      v477 = *(_OWORD *)v474;
      v478 = *(_OWORD *)&v474[16];
      *(_QWORD *)&v479 = *(_QWORD *)&v474[32];
      v132 = *(_QWORD *)(v423[18] + 144);
      memset(&v499[8], 0, 28);
      *(_QWORD *)&v499[40] = 0;
      *(_QWORD *)&v499[48] = 0;
      v500 = 0uLL;
      *(_QWORD *)((char *)&v501 + 4) = 2;
      *(_DWORD *)v499 = 0;
      v502 = 0u;
      v503 = 0u;
      sub_22E3C113C((uint64_t)v499, (__int128 *)v495, v131, v493[0], &v477, v132);
    }
    else
    {
      sub_22E5F0080(v114, (unsigned __int8 *)v115, v499);
    }
    v19 = a1;
    v133 = *(_QWORD **)(a1 + 8);
    v481[6] = v502;
    v481[7] = v503;
    v482 = v504;
    v481[2] = *(_OWORD *)&v499[32];
    v481[3] = *(_OWORD *)&v499[48];
    v481[5] = v501;
    v481[4] = v500;
    v481[0] = *(_OWORD *)v499;
    v481[1] = *(_OWORD *)&v499[16];
    sub_22E4EC638(v133, (uint64_t)v481, v450, (uint64_t)v495);
    v485 = *(__n128 *)&v495[40];
    v483 = *(_OWORD *)&v495[8];
    v484 = *(_OWORD *)&v495[24];
    v134 = *(_QWORD *)(a1 + 8);
    v480[0] = *(_OWORD *)&v495[8];
    v480[1] = *(_OWORD *)&v495[24];
    v480[2] = *(_OWORD *)&v495[40];
    sub_22E4E9BF4(v134, v480, *(_QWORD *)(v450 + 48), 2, (uint64_t)v495);
    *(_OWORD *)v496 = *(_OWORD *)&v495[8];
    v497 = *(_OWORD *)&v495[24];
    v498 = *(_OWORD *)&v495[40];
    v126 = a9;
  }
  else
  {
    v19 = a1;
    sub_22E5F0080(*(_QWORD **)(a1 + 8), v98, v499);
    *(_OWORD *)v496 = *(_OWORD *)&v499[8];
    v497 = *(_OWORD *)&v499[24];
    v498 = *(_OWORD *)&v499[40];
    v483 = *(_OWORD *)&v499[8];
    v484 = *(_OWORD *)&v499[24];
    v485 = *(__n128 *)&v499[40];
    v126 = a9;
  }
  if (!v465)
  {
    v135 = 0;
    goto LABEL_162;
  }
  if ((v86 | a14) == 1 && v465 == (unsigned __int8 *)(*v455 & 0xFFFFFFFFFFFFFFFCLL))
  {
    v135 = 1;
    goto LABEL_162;
  }
  v135 = v55 & (v86 ^ 1);
  if (v455 != v18 && (v135 & 1) == 0 && v100)
  {
    v135 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(__dst - 4) & 0xFFFFFFFFFFFFFFFCLL) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                      + 8) & 0xFFFFFFFFFFFFFFF0)
                              + 16) != 39;
    goto LABEL_172;
  }
LABEL_162:
  if (!a18 || v455 != v18)
  {
LABEL_172:
    __dsta = v135;
    v458 = v86;
    v136 = (unsigned __int8 *)(*v455 & 0xFFFFFFFFFFFFFFFCLL);
    v443 = v79;
    if (*v136 == 192)
    {
      v137 = *(_QWORD *)(v19 + 8);
      v138 = (uint64_t *)(v136 + 32);
      v139 = sub_22F10ACF8(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v136[8 * *((unsigned int *)v136 + 6) + 32] + 8) & 0xFFFFFFFFFFFFFFF0));
      v140 = sub_22F28CE84(v137, v139);
      v141 = *((unsigned int *)v136 + 6);
      if ((_DWORD)v141)
      {
        v142 = 8 * v141;
        do
        {
          v143 = *v138++;
          *(_QWORD *)v499 = *(_QWORD *)(v19 + 8);
          *(_QWORD *)&v499[8] = *(_QWORD *)v499 + 272;
          v499[16] = 0;
          *(_QWORD *)&v499[24] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v499 + 144) + 232);
          v144 = sub_22E50E974(v499, v143, v33);
          v145 = *(_QWORD *)(a1 + 8);
          v146 = *(_QWORD *)(v143 + 8);
          v147 = *(_QWORD *)(v145 + 144);
          v148 = sub_22EF67C8C(*(_QWORD *)(v147 + 144));
          sub_22EFF605C(v143);
          *(_QWORD *)v499 = v145;
          *(_QWORD *)&v499[8] = v145 + 272;
          v499[16] = 0;
          *(_QWORD *)&v499[24] = *(_QWORD *)(v147 + 232);
          v149 = (llvm::Value *)v144;
          v19 = a1;
          v151 = sub_22E50EA80((uint64_t *)v499, v149, v146, v148, v150, 0);
          v152 = *(_QWORD *)(a1 + 8) + 272;
          *(_WORD *)&v499[32] = 257;
          v140 = sub_22E3BDEA8(v152, (uint64_t)v140, (uint64_t)v151, (uint64_t)v499, 1, 0);
          v142 -= 8;
        }
        while (v142);
      }
      goto LABEL_207;
    }
    v153 = *(_QWORD *)((*((_QWORD *)v136 + 1) & 0xFFFFFFFFFFFFFFF0) + 8);
    v154 = *(_QWORD *)(v153 & 0xFFFFFFFFFFFFFFF0);
    if (v154 && (v155 = *(_DWORD *)(v154 + 16), (v155 & 0xFE) == 0x28))
    {
      if ((v155 & 0x100000) != 0)
      {
        do
        {
LABEL_180:
          while (1)
          {
            v154 = *(_QWORD *)(*(_QWORD *)(v154 + 32) & 0xFFFFFFFFFFFFFFF0);
            if (!v154)
              break;
            v156 = *(_DWORD *)(v154 + 16);
            if ((v156 & 0xFE) != 0x28)
              break;
            if ((v156 & 0x100000) == 0)
              goto LABEL_189;
          }
          v154 = sub_22F10CF48(v154);
        }
        while ((*(_DWORD *)(v154 + 16) & 0x100000) != 0);
      }
    }
    else
    {
      v157 = *((_QWORD *)v136 + 1) & 7 | v153;
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v154 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28
        || (v154 = sub_22F10CF48(v154)) == 0)
      {
LABEL_190:
        if (*v136 == 191)
        {
          v158 = sub_22EFFA6B0(*((unsigned __int8 **)v136 + 2));
          v159 = sub_22F00338C(v158);
          v160 = *(_QWORD *)((v159 & 0xFFFFFFFFFFFFFFF0) + 8);
          v161 = v159 & 7 | v160;
          if (*((_QWORD *)v136 + 4) || !*((_DWORD *)v136 + 12) || *((_QWORD *)v136 + 3))
          {
            v165 = (uint64_t *)(v160 & 0xFFFFFFFFFFFFFFF0);
            v166 = *(_QWORD *)(v160 & 0xFFFFFFFFFFFFFFF0);
            if ((!v166 || *(_BYTE *)(v166 + 16) != 39)
              && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v166 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
            {
              v166 = sub_22F10CF48(v166);
              if (!v166)
                v166 = *v165;
            }
            v140 = sub_22F28CE84(*(_QWORD *)(a1 + 8), *(_QWORD *)(v166 + 32) & 7 | *(_QWORD *)((*(_QWORD *)(v166 + 32) & 0xFFFFFFFFFFFFFFF0) + 8));
            v167 = *((_QWORD *)v136 + 4);
            if (v167)
            {
              *(_QWORD *)v499 = *(_QWORD *)(a1 + 8);
              *(_QWORD *)&v499[8] = *(_QWORD *)v499 + 272;
              v499[16] = 0;
              *(_QWORD *)&v499[24] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v499 + 144) + 232);
              v168 = (llvm::Value *)sub_22E50E974(v499, v167, v33);
              v169 = *(_QWORD *)(a1 + 8);
              v170 = *(_QWORD *)(v167 + 8);
              v171 = *(_QWORD *)(v169 + 144);
              v172 = sub_22EF67C8C(*(_QWORD *)(v171 + 144));
              sub_22EFF605C(v167);
              *(_QWORD *)v499 = v169;
              *(_QWORD *)&v499[8] = v169 + 272;
              v499[16] = 0;
              *(_QWORD *)&v499[24] = *(_QWORD *)(v171 + 232);
              v174 = sub_22E50EA80((uint64_t *)v499, v168, v170, v172, v173, 0);
              v175 = *(_QWORD *)(a1 + 8) + 272;
              *(_WORD *)&v499[32] = 257;
              v140 = sub_22E3BDEA8(v175, (uint64_t)v174, (uint64_t)v140, (uint64_t)v499, 1, 0);
              v19 = a1;
              goto LABEL_207;
            }
            if (!*((_DWORD *)v136 + 12))
            {
              v19 = a1;
              goto LABEL_207;
            }
            v216 = (uint64_t *)sub_22F28CE84(*(_QWORD *)(a1 + 8), v161);
            v217 = *((_QWORD *)v136 + 3);
            *(_QWORD *)v499 = *(_QWORD *)(a1 + 8);
            *(_QWORD *)&v499[8] = *(_QWORD *)v499 + 272;
            v499[16] = 0;
            *(_QWORD *)&v499[24] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v499 + 144) + 232);
            v219 = (llvm::Value *)sub_22E50E974(v499, v217, v218);
            v220 = *(_QWORD *)(a1 + 8);
            v221 = *((_QWORD *)v136 + 3);
            v222 = *(_QWORD *)(v221 + 8);
            v223 = *(_QWORD *)(v220 + 144);
            v224 = sub_22EF67C8C(*(_QWORD *)(v223 + 144));
            sub_22EFF605C(v221);
            *(_QWORD *)v499 = v220;
            *(_QWORD *)&v499[8] = v220 + 272;
            v499[16] = 0;
            *(_QWORD *)&v499[24] = *(_QWORD *)(v223 + 232);
            v225 = v224;
            v19 = a1;
            v227 = sub_22E50EA80((uint64_t *)v499, v219, v222, v225, v226, 0);
            v228 = *(_QWORD *)(a1 + 8) + 272;
            *(_WORD *)&v499[32] = 257;
            v229 = sub_22E3BDEA8(v228, (uint64_t)v227, (uint64_t)v140, (uint64_t)v499, 1, 0);
            v230 = *(_QWORD *)(a1 + 8) + 272;
            *(_WORD *)&v499[32] = 257;
            sub_22E3C18F4(v230, 34, v216, (uint64_t)v229, (uint64_t)v499);
            v231 = *(_QWORD *)(a1 + 8) + 272;
            *(_WORD *)&v499[32] = 257;
            sub_22E3E48CC(v231, (uint64_t)v216, (uint64_t)v229, (uint64_t)v499, 1, 0);
            llvm::ConstantInt::get();
            *(_WORD *)&v499[32] = 257;
            Select = llvm::IRBuilderBase::CreateSelect();
LABEL_197:
            v140 = (llvm::Instruction *)Select;
LABEL_207:
            v18 = a7;
            v42 = v455;
            v176 = v455 != a7 || a2 == 6;
            if (!v176 || __dsta != 1)
            {
              sub_22E5BED8C(a9, v450, v462);
              v21 = v452;
              if ((BYTE8(v489) & 3) != 0)
                v178 = sub_22F28ABCC(&v488, *(_QWORD *)(v19 + 8));
              else
                v178 = v488;
              v179 = v458;
              v180 = *(unsigned int *)(a9 + 88);
              if (v180 >= *(unsigned int *)(a9 + 92))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v180 = *(unsigned int *)(a9 + 88);
              }
              v181 = (uint64_t *)(*(_QWORD *)(a9 + 80) + 16 * v180);
              *v181 = v178;
              v181[1] = 0;
              ++*(_DWORD *)(a9 + 88);
              if ((BYTE8(v497) & 3) != 0)
                v182 = (void *)sub_22F28ABCC(v496, *(_QWORD *)(v19 + 8));
              else
                v182 = v496[0];
              v183 = *(unsigned int *)(a9 + 168);
              if (v183 >= *(unsigned int *)(a9 + 172))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v183 = *(unsigned int *)(a9 + 168);
              }
              *(_QWORD *)(*(_QWORD *)(a9 + 160) + 8 * v183) = v182;
              ++*(_DWORD *)(a9 + 168);
              v184 = *(_QWORD *)(v19 + 8);
              v185 = *(_QWORD *)(v184 + 32);
              *(_WORD *)&v499[32] = 257;
              v186 = sub_22E3BF45C((uint64_t *)(v184 + 272), (uint64_t)v140, v185, 1, (uint64_t)v499);
              v187 = *(unsigned int *)(a9 + 216);
              if (v187 >= *(unsigned int *)(a9 + 220))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v187 = *(unsigned int *)(a9 + 216);
              }
              *(_QWORD *)(*(_QWORD *)(a9 + 208) + 8 * v187) = v186;
              ++*(_DWORD *)(a9 + 216);
              v54 = v447;
              if (v447)
                v188 = v466;
              else
                v188 = 1;
              v189 = *(unsigned int *)(a9 + 368);
              v190 = v455;
              v191 = v442;
              if (v189 >= *(unsigned int *)(a9 + 372))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v191 = v442;
                v179 = v458;
                v190 = v455;
                v189 = *(unsigned int *)(a9 + 368);
              }
              *(_QWORD *)(*(_QWORD *)(a9 + 360) + 8 * v189) = v188;
              ++*(_DWORD *)(a9 + 368);
              if (a13)
                v192 = v190 == a7;
              else
                v192 = 0;
              v193 = v192;
              v194 = *(unsigned int *)(a9 + 312);
              if (v194 >= *(unsigned int *)(a9 + 316))
              {
                v232 = v191;
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v191 = v232;
                v179 = v458;
                v194 = *(unsigned int *)(a9 + 312);
              }
              v195 = a13;
              if (!v193)
                v195 = 0;
              *(_QWORD *)(*(_QWORD *)(a9 + 304) + 8 * v194) = v195;
              ++*(_DWORD *)(a9 + 312);
              v196 = sub_22E5C2E90(a2, a3, a4, a5, a6, a12, (v444 | v191 | v445 ^ 1) | v100, v446 & (v444 ^ 1u), v447 != 0);
              v197 = v196;
              if (v445 ^ 1 | v100)
              {
                v42 = v455;
                v198 = v455 != a7 && v100;
                if (v179 | v198)
                  v199 = v196 & 0xFFFFFFFFFFFFFBF0;
                else
                  v199 = v196;
                if ((v459 & 1) != 0)
                  v197 = v199 | 0xFFFF000000000000;
                else
                  v197 = v199;
                v459 = 0;
                a16 = v462;
              }
              else
              {
                a16 = v462;
                v42 = v455;
              }
              v59 = 0uLL;
              v177 = v443;
              v200 = *(unsigned int *)(a9 + 264);
              if (v200 >= *(unsigned int *)(a9 + 268))
              {
                v233 = a16;
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                a16 = v233;
                v59 = 0uLL;
                v42 = v455;
                v200 = *(unsigned int *)(a9 + 264);
              }
              *(_QWORD *)(*(_QWORD *)(a9 + 256) + 8 * v200) = v197;
              ++*(_DWORD *)(a9 + 264);
            }
            else
            {
              v21 = v452;
              v54 = v447;
              a16 = v462;
              v59 = 0uLL;
              v177 = v443;
            }
            if (v465)
            {
              v201 = a16;
              v202 = sub_22EFC306C(*((_QWORD *)v465 + 3));
              v203 = v202;
              if (*(_QWORD *)v437)
              {
                if (v202 >= *(_DWORD *)(a10 + 1032))
                {
                  v42 = v455;
                  v59 = 0uLL;
                  a16 = v201;
                  if (v202 > *(_DWORD *)(a10 + 1088))
                  {
                    *(_DWORD *)(a10 + 1088) = v202;
                    v209 = v484;
                    *v433 = v483;
                    *(_OWORD *)(a10 + 1112) = v209;
                    v33 = v485;
                    *(__n128 *)(a10 + 1128) = v485;
                  }
                }
                else
                {
                  *(_DWORD *)(a10 + 1032) = v202;
                  v204 = v484;
                  *v434 = v483;
                  *(_OWORD *)(a10 + 1056) = v204;
                  v33 = v485;
                  *(__n128 *)(a10 + 1072) = v485;
                  v42 = v455;
                  v59 = 0uLL;
                  a16 = v201;
                }
              }
              else
              {
                *(_DWORD *)(a10 + 1032) = v202;
                v205 = v484;
                *v434 = v483;
                *(_OWORD *)(a10 + 1056) = v205;
                *(__n128 *)(a10 + 1072) = v485;
                if (v177)
                {
                  sub_22E4E3DF8(*(_QWORD *)(v19 + 8), v436, 0, (uint64_t)v499);
                  v206 = *(_OWORD *)&v499[24];
                  v207 = a10 + 1096;
                  *v433 = *(_OWORD *)&v499[8];
                  *(_OWORD *)(a10 + 1112) = v206;
                  v208 = *(__n128 *)&v499[40];
                }
                else
                {
                  v210 = v484;
                  v207 = a10 + 1096;
                  *v433 = v483;
                  *(_OWORD *)(a10 + 1112) = v210;
                  v208 = v485;
                }
                *(__n128 *)(v207 + 32) = v208;
                v42 = v455;
                a16 = v201;
                *(_DWORD *)(a10 + 1088) = v203;
                v33 = (__n128)v488;
                v211 = v489;
                *v437 = v488;
                *(_OWORD *)(a10 + 1160) = v211;
                v212 = v490;
                *(__n128 *)(a10 + 1176) = v490;
                *v432 = v33;
                *(_OWORD *)(a10 + 1208) = v211;
                *(__n128 *)(a10 + 1224) = v212;
                v59 = 0uLL;
              }
            }
            v213 = !v177;
            if ((_DWORD)v54)
              v213 = 0;
            if (!v213)
              *(_BYTE *)(a10 + 1240) = 1;
            v57 = v453;
            if (v177)
              goto LABEL_432;
            if (v42 != a7)
            {
              v214 = v496;
              if (v100)
                v214 = (void **)&v483;
              v215 = *((_OWORD *)v214 + 1);
              v488 = *(_OWORD *)v214;
              v489 = v215;
              v33 = *((__n128 *)v214 + 2);
              v490 = v33;
            }
            v445 = 0;
            v446 = 0;
            goto LABEL_131;
          }
          v162 = *(_QWORD *)(a1 + 8);
          v163 = v161;
          v19 = a1;
        }
        else
        {
          v162 = *(_QWORD *)(v19 + 8);
          v163 = v157;
        }
        Select = (uint64_t)sub_22F28CE84(v162, v163);
        goto LABEL_197;
      }
      if ((*(_DWORD *)(v154 + 16) & 0x100000) != 0)
        goto LABEL_180;
    }
LABEL_189:
    v157 = *(_QWORD *)(v154 + 32) & 7 | *(_QWORD *)((*(_QWORD *)(v154 + 32) & 0xFFFFFFFFFFFFFFF0) + 8);
    goto LABEL_190;
  }
  v236 = a10;
  *(_DWORD *)(a10 + 1032) = 0;
  v237 = v484;
  *v434 = v483;
  *(_OWORD *)(a10 + 1056) = v237;
  *(__n128 *)(a10 + 1072) = v485;
  sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 8) + 144) + 144), *(_QWORD *)(*(_QWORD *)((*v18 & 0xFFFFFFFFFFFFFFFCLL) + 8) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v499);
  v238 = *(_QWORD *)v499;
  v239 = *(_QWORD **)(v19 + 8);
  v240 = v239 + 34;
  v475[0] = v483;
  v475[1] = v484;
  v475[2] = v485;
  v241 = v239[12];
  v242 = v239[1];
  *(_WORD *)&v499[32] = 257;
  sub_22F245864(v239 + 34, v475, v241, v242, (uint64_t)v499, (uint64_t)v476);
  *(_WORD *)&v495[32] = 257;
  sub_22F26D368(v240, (uint64_t)v476, v238 - 1, (uint64_t)v495, (uint64_t)&v477);
  *(_DWORD *)(a10 + 1088) = -1;
  v243 = v478;
  *v433 = v477;
  *(_OWORD *)(a10 + 1112) = v243;
  *(_OWORD *)(a10 + 1128) = v479;
  v244 = v489;
  *v437 = v488;
  *(_OWORD *)(a10 + 1160) = v244;
  *(__n128 *)(a10 + 1176) = v490;
  v245 = v498;
  v246 = *(__n128 *)v496;
  *(_OWORD *)(a10 + 1208) = v497;
  *(_OWORD *)(a10 + 1224) = v245;
  *v432 = v246;
  *(_QWORD *)v499 = &v499[16];
  *(_QWORD *)&v499[8] = 0x400000000;
  if (*(_DWORD *)(a10 + 8))
    sub_22E5C302C((uint64_t)v499, a10);
  *(_QWORD *)&v501 = &v502;
  *((_QWORD *)&v501 + 1) = 0x400000000;
  v247 = v424;
  if (*(_DWORD *)(a10 + 88))
    sub_22E5C302C((uint64_t)&v501, a10 + 80);
  v505 = v507;
  v506 = 0x400000000;
  v248 = *(_DWORD *)(a10 + 168);
  if (v248 && v499 != (_BYTE *)a10)
  {
    v249 = *(const void **)(a10 + 160);
    if (v249 == (const void *)(a10 + 176))
    {
      if (v248 < 5)
      {
        v250 = v507;
        v251 = *(unsigned int *)(a10 + 168);
        goto LABEL_308;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v251 = *(unsigned int *)(a10 + 168);
      if ((_DWORD)v251)
      {
        v249 = *(const void **)(a10 + 160);
        v250 = v505;
LABEL_308:
        memcpy(v250, v249, 8 * v251);
      }
      LODWORD(v506) = v248;
    }
    else
    {
      v505 = *(_BYTE **)(a10 + 160);
      v506 = __PAIR64__(*(_DWORD *)(a10 + 172), v248);
      *(_QWORD *)(a10 + 160) = a10 + 176;
      *(_DWORD *)(a10 + 172) = 0;
    }
    *(_DWORD *)(a10 + 168) = 0;
  }
  v508 = v510;
  v509 = 0x400000000;
  v252 = *(_DWORD *)(a10 + 216);
  if (v252 && v499 != (_BYTE *)a10)
  {
    v253 = *(const void **)(a10 + 208);
    if (v253 == (const void *)(a10 + 224))
    {
      if (v252 < 5)
      {
        v254 = v510;
        v255 = *(unsigned int *)(a10 + 216);
        goto LABEL_316;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v255 = *(unsigned int *)(a10 + 216);
      if ((_DWORD)v255)
      {
        v253 = *(const void **)(a10 + 208);
        v254 = v508;
LABEL_316:
        memcpy(v254, v253, 8 * v255);
      }
      LODWORD(v509) = v252;
    }
    else
    {
      v508 = *(_BYTE **)(a10 + 208);
      v509 = __PAIR64__(*(_DWORD *)(a10 + 220), v252);
      *(_QWORD *)(a10 + 208) = a10 + 224;
      *(_DWORD *)(a10 + 220) = 0;
    }
    *(_DWORD *)(a10 + 216) = 0;
  }
  v511[0] = &v512;
  v511[1] = 0x400000000;
  if (*(_DWORD *)(a10 + 264))
    sub_22E5C3280((uint64_t)v511, a10 + 256);
  v513[0] = &v514;
  v513[1] = 0x400000000;
  if (*(_DWORD *)(a10 + 312))
    sub_22F24C77C((uint64_t)v513, a10 + 304);
  v515 = *(_BYTE *)(a10 + 352);
  v516[0] = &v517;
  v516[1] = 0x400000000;
  if (*(_DWORD *)(a10 + 368))
    sub_22F24C77C((uint64_t)v516, a10 + 360);
  v518[0] = &v519;
  v518[1] = 0x400000000;
  if (*(_DWORD *)(a10 + 416))
    sub_22E5C3398((uint64_t)v518, a10 + 408);
  v520[0] = &v521;
  v520[1] = 0x400000000;
  if (*(_DWORD *)(a10 + 624))
    sub_22E5C3398((uint64_t)v520, a10 + 616);
  v522[0] = &v523;
  v522[1] = 0x400000000;
  if (*(_DWORD *)(a10 + 832))
    sub_22E5C3398((uint64_t)v522, a10 + 824);
  sub_22E5C302C(a10, v126);
  sub_22E5C302C(a10 + 80, v428);
  if (a10 != v126)
  {
    v256 = *v424;
    if (*v424 == __src)
    {
      v257 = (void **)(a10 + 160);
      v258 = *(unsigned int *)(v126 + 168);
      v259 = *(unsigned int *)(a10 + 168);
      if (v259 >= v258)
      {
        if ((_DWORD)v258)
          memmove(*v257, __src, 8 * v258);
        v236 = a10;
        *(_DWORD *)(a10 + 168) = v258;
        v126 = a9;
        v19 = a1;
        LODWORD(v54) = v447;
        v247 = v424;
      }
      else
      {
        if (*(_DWORD *)(a10 + 172) < v258)
        {
          *(_DWORD *)(a10 + 168) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
LABEL_336:
          v259 = 0;
        }
        else
        {
          if (!(_DWORD)v259)
            goto LABEL_336;
          memmove(*v257, __src, 8 * v259);
        }
        v260 = *(unsigned int *)(a9 + 168);
        if (v259 != v260)
          memcpy((char *)*v257 + 8 * v259, (char *)*v424 + 8 * v259, (_BYTE *)*v424 + 8 * v260 - ((_BYTE *)*v424 + 8 * v259));
        *(_DWORD *)(a10 + 168) = v258;
        v126 = a9;
      }
    }
    else
    {
      v413 = *(void **)(a10 + 160);
      if (v413 != (void *)(a10 + 176))
      {
        free(v413);
        v256 = *v424;
      }
      *(_QWORD *)(a10 + 160) = v256;
      *(_QWORD *)(a10 + 168) = *(_QWORD *)(v126 + 168);
      *(_QWORD *)(v126 + 160) = __src;
      *(_DWORD *)(v126 + 172) = 0;
    }
    *(_DWORD *)(v126 + 168) = 0;
    v261 = *(void **)(v126 + 208);
    if (v261 == v426)
    {
      v262 = (void **)(v236 + 208);
      v263 = *(unsigned int *)(v126 + 216);
      v264 = *(unsigned int *)(v236 + 216);
      if (v264 >= v263)
      {
        if ((_DWORD)v263)
          memmove(*v262, v426, 8 * v263);
        v236 = a10;
        *(_DWORD *)(a10 + 216) = v263;
        v126 = a9;
        v19 = a1;
        LODWORD(v54) = v447;
        v247 = v424;
      }
      else
      {
        if (*(_DWORD *)(v236 + 220) < v263)
        {
          *(_DWORD *)(v236 + 216) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
LABEL_344:
          v264 = 0;
        }
        else
        {
          if (!(_DWORD)v264)
            goto LABEL_344;
          memmove(*v262, v426, 8 * v264);
        }
        v265 = *(unsigned int *)(a9 + 216);
        if (v264 != v265)
          memcpy((char *)*v262 + 8 * v264, (char *)*v427 + 8 * v264, (_BYTE *)*v427 + 8 * v265 - ((_BYTE *)*v427 + 8 * v264));
        *(_DWORD *)(v236 + 216) = v263;
        v126 = a9;
      }
    }
    else
    {
      v414 = *(void **)(v236 + 208);
      if (v414 != (void *)(v236 + 224))
      {
        free(v414);
        v261 = *v427;
      }
      *(_QWORD *)(v236 + 208) = v261;
      *(_QWORD *)(v236 + 216) = *(_QWORD *)(v126 + 216);
      *(_QWORD *)(v126 + 208) = v426;
      *(_DWORD *)(v126 + 220) = 0;
    }
    *(_DWORD *)(v126 + 216) = 0;
  }
  sub_22E5C3280(v236 + 256, v429);
  sub_22F24C77C(v236 + 304, v430);
  *(_BYTE *)(v236 + 352) = *(_BYTE *)(v126 + 352);
  sub_22F24C77C(v236 + 360, v431);
  sub_22E5C3398(v236 + 408, v126 + 408);
  sub_22E5C3398(v236 + 616, v126 + 616);
  sub_22E5C3398(v236 + 824, v126 + 824);
  sub_22E5C302C(v126, (uint64_t)v499);
  sub_22E5C302C(v428, (uint64_t)&v501);
  if (v499 != (_BYTE *)v126)
  {
    v266 = v505;
    if (v505 == v507)
    {
      v267 = v506;
      v268 = *(unsigned int *)(a9 + 168);
      if (v268 >= v506)
      {
        if ((_DWORD)v506)
          memmove(*v424, v507, 8 * v506);
        *(_DWORD *)(a9 + 168) = v267;
        v19 = a1;
        LODWORD(v54) = v447;
      }
      else
      {
        if (*(_DWORD *)(a9 + 172) < v506)
        {
          *(_DWORD *)(a9 + 168) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
LABEL_354:
          v268 = 0;
        }
        else
        {
          if (!(_DWORD)v268)
            goto LABEL_354;
          memmove(*v247, v507, 8 * v268);
        }
        if (v268 != v506)
          memcpy((char *)*v247 + 8 * v268, &v505[8 * v268], 8 * v506 - 8 * v268);
        *(_DWORD *)(a9 + 168) = v267;
        v19 = a1;
      }
    }
    else
    {
      if (*v247 != __src)
      {
        free(*v247);
        v266 = v505;
      }
      *(_QWORD *)(a9 + 160) = v266;
      *(_QWORD *)(a9 + 168) = v506;
      v505 = v507;
      HIDWORD(v506) = 0;
    }
    LODWORD(v506) = 0;
    v269 = v508;
    if (v508 == v510)
    {
      v270 = v509;
      v271 = *(unsigned int *)(a9 + 216);
      if (v271 >= v509)
      {
        if ((_DWORD)v509)
          memmove(*v427, v510, 8 * v509);
        *(_DWORD *)(a9 + 216) = v270;
        v19 = a1;
        LODWORD(v54) = v447;
      }
      else
      {
        if (*(_DWORD *)(a9 + 220) < v509)
        {
          *(_DWORD *)(a9 + 216) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
LABEL_362:
          v271 = 0;
        }
        else
        {
          if (!(_DWORD)v271)
            goto LABEL_362;
          memmove(*v427, v510, 8 * v271);
        }
        if (v271 != v509)
          memcpy((char *)*v427 + 8 * v271, &v508[8 * v271], 8 * v509 - 8 * v271);
        *(_DWORD *)(a9 + 216) = v270;
        v19 = a1;
      }
    }
    else
    {
      if (*v427 != v426)
      {
        free(*v427);
        v269 = v508;
      }
      *(_QWORD *)(a9 + 208) = v269;
      *(_QWORD *)(a9 + 216) = v509;
      v508 = v510;
      HIDWORD(v509) = 0;
    }
    LODWORD(v509) = 0;
  }
  sub_22E5C3280(v429, (uint64_t)v511);
  sub_22F24C77C(v430, (uint64_t)v513);
  *(_BYTE *)(a9 + 352) = v515;
  sub_22F24C77C(v431, (uint64_t)v516);
  sub_22E5C3398(v126 + 408, (uint64_t)v518);
  sub_22E5C3398(v126 + 616, (uint64_t)v520);
  v272 = a9;
  sub_22E5C3398(v126 + 824, (uint64_t)v522);
  sub_22E5B45E0((uint64_t)v499);
  v273 = v466;
  if (!(_DWORD)v54)
    v273 = 1;
  v467 = v273;
  PtrDiff = 0;
  v275 = sub_22E5C2E90(a2, a3, a4, a5, a6, a12, 0, 0, (_DWORD)v54 != 0) | 0xFFFF000000000000;
  v460 = v275;
  v276 = 0uLL;
  v277 = a17;
  do
  {
    v278 = *(_QWORD **)v277;
    v279 = *(_QWORD *)(v277 + 8);
    memset(v474, 0, 28);
    *(_OWORD *)&v474[32] = 0uLL;
    if (v279)
    {
      v280 = 16 * v279;
      while (1)
      {
        v281 = v278[1];
        if (v281)
          break;
        v278 += 2;
        v280 -= 16;
        if (!v280)
          goto LABEL_389;
      }
      if ((*(_DWORD *)(v281 + 28) & 0x7Fu) - 52 >= 0xFFFFFFFD
        && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v281 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) == 40)
      {
        v282 = *v278 & 0xFFFFFFFFFFFFFFFCLL;
        v283 = *(_QWORD **)(v19 + 8);
        v284 = *(_QWORD *)(v282 + 16);
        memset(&v499[8], 0, 28);
        *(_QWORD *)&v499[40] = 0;
        *(_QWORD *)&v499[48] = 0;
        v500 = 0uLL;
        *(_QWORD *)((char *)&v501 + 4) = 2;
        v502 = v276;
        v503 = v276;
        if ((*(_BYTE *)(v282 + 2) & 4) != 0)
        {
          v492 = 2;
          *(_DWORD *)v491 = 0;
          *(_OWORD *)&v491[8] = v276;
          *(_OWORD *)&v491[24] = v276;
          v449 = v283;
          sub_22E4DFD40(&v524, v283);
          v285 = sub_22F10ACF8(*(_QWORD *)(*(_QWORD *)(v284 + 8) & 0xFFFFFFFFFFFFFFF0));
          *(_OWORD *)v495 = v524;
          *(_OWORD *)&v495[16] = v525;
          *(_OWORD *)&v495[32] = v526;
          v493[0] = *(_OWORD *)v491;
          v493[1] = *(_OWORD *)&v491[16];
          v494 = *(_QWORD *)&v491[32];
          v286 = *(_QWORD *)(v449[18] + 144);
          memset(&v499[8], 0, 28);
          *(_QWORD *)&v499[40] = 0;
          *(_QWORD *)&v499[48] = 0;
          v500 = 0uLL;
          *(_QWORD *)((char *)&v501 + 4) = 2;
          *(_DWORD *)v499 = 0;
          v502 = 0u;
          v503 = 0u;
          sub_22E3C113C((uint64_t)v499, (__int128 *)v495, v285, v492, v493, v286);
        }
        else
        {
          sub_22E5F0080(v283, (unsigned __int8 *)v284, v499);
        }
        v287 = *(_QWORD **)(v19 + 8);
        v472[6] = v502;
        v472[7] = v503;
        v473 = v504;
        v472[2] = *(_OWORD *)&v499[32];
        v472[3] = *(_OWORD *)&v499[48];
        v472[4] = v500;
        v472[5] = v501;
        v472[0] = *(_OWORD *)v499;
        v472[1] = *(_OWORD *)&v499[16];
        sub_22E4EC638(v287, (uint64_t)v472, v281, (uint64_t)v495);
        *(_OWORD *)v474 = *(_OWORD *)&v495[8];
        *(_OWORD *)&v474[16] = *(_OWORD *)&v495[24];
        *(_OWORD *)&v474[32] = *(_OWORD *)&v495[40];
        v275 = v460;
      }
      else
      {
        sub_22E5F0080(*(_QWORD **)(v19 + 8), (unsigned __int8 *)(*v278 & 0xFFFFFFFFFFFFFFFCLL), v499);
        *(_OWORD *)v474 = *(_OWORD *)&v499[8];
        *(_OWORD *)&v474[16] = *(_OWORD *)&v499[24];
        *(_OWORD *)&v474[32] = *(_OWORD *)&v499[40];
      }
      v288 = *(_QWORD **)(v19 + 8);
      if ((v474[24] & 3) != 0)
        v289 = (uint64_t *)sub_22F28ABCC(v474, *(_QWORD *)(v19 + 8));
      else
        v289 = *(uint64_t **)v474;
      sub_22F25E214(v288, v289);
      v290 = *(_QWORD **)(v19 + 8);
      if ((BYTE8(v497) & 3) != 0)
        v291 = (uint64_t *)sub_22F28ABCC(v496, v290);
      else
        v291 = (uint64_t *)v496[0];
      sub_22F25E214(v290, v291);
      *(_WORD *)&v499[32] = 257;
      PtrDiff = llvm::IRBuilderBase::CreatePtrDiff();
      v272 = a9;
      v19 = a1;
    }
LABEL_389:
    sub_22E5BED8C(v272, v450, v462);
    if ((BYTE8(v489) & 3) != 0)
      v292 = sub_22F28ABCC(&v488, *(_QWORD *)(v19 + 8));
    else
      v292 = v488;
    v293 = *(unsigned int *)(v272 + 88);
    if (v293 >= *(unsigned int *)(v272 + 92))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v293 = *(unsigned int *)(v272 + 88);
    }
    v294 = (uint64_t *)(*(_QWORD *)(v272 + 80) + 16 * v293);
    *v294 = v292;
    v294[1] = 0;
    ++*(_DWORD *)(v272 + 88);
    if ((BYTE8(v497) & 3) != 0)
      v295 = (void *)sub_22F28ABCC(v496, *(_QWORD *)(v19 + 8));
    else
      v295 = v496[0];
    v296 = *(unsigned int *)(v272 + 168);
    if (v296 >= *(unsigned int *)(v272 + 172))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v296 = *(unsigned int *)(v272 + 168);
    }
    *(_QWORD *)(*(_QWORD *)(v272 + 160) + 8 * v296) = v295;
    ++*(_DWORD *)(v272 + 168);
    v297 = *(_QWORD *)(v19 + 8);
    v298 = *(_QWORD *)(v297 + 32);
    *(_WORD *)&v499[32] = 257;
    v299 = sub_22E3BF45C((uint64_t *)(v297 + 272), PtrDiff, v298, 1, (uint64_t)v499);
    v300 = *(unsigned int *)(v272 + 216);
    if (v300 >= *(unsigned int *)(v272 + 220))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v300 = *(unsigned int *)(v272 + 216);
    }
    *(_QWORD *)(*(_QWORD *)(v272 + 208) + 8 * v300) = v299;
    ++*(_DWORD *)(v272 + 216);
    v301 = *(unsigned int *)(v272 + 264);
    if (v301 >= *(unsigned int *)(v272 + 268))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v301 = *(unsigned int *)(v272 + 264);
    }
    *(_QWORD *)(*(_QWORD *)(v272 + 256) + 8 * v301) = v275;
    ++*(_DWORD *)(v272 + 264);
    v302 = *(unsigned int *)(v272 + 312);
    if (v302 >= *(unsigned int *)(v272 + 316))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v302 = *(unsigned int *)(v272 + 312);
    }
    *(_QWORD *)(*(_QWORD *)(v272 + 304) + 8 * v302) = 0;
    ++*(_DWORD *)(v272 + 312);
    v303 = *(unsigned int *)(v272 + 368);
    if (v303 >= *(unsigned int *)(v272 + 372))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v303 = *(unsigned int *)(v272 + 368);
    }
    *(_QWORD *)(*(_QWORD *)(v272 + 360) + 8 * v303) = v467;
    ++*(_DWORD *)(v272 + 368);
    v304 = (uint64_t *)(*(_QWORD *)(v19 + 8) + 272);
    v471[0] = *(_OWORD *)v474;
    v471[1] = *(_OWORD *)&v474[16];
    v471[2] = *(_OWORD *)&v474[32];
    *(_WORD *)&v499[32] = 257;
    sub_22F26D368(v304, (uint64_t)v471, 1, (uint64_t)v499, (uint64_t)v496);
    v277 += 16;
    v276 = 0uLL;
  }
  while (v277 != a17 + 16 * a18);
  sub_22E5BED8C(v272, v450, v462);
  if ((BYTE8(v489) & 3) != 0)
    v305 = sub_22F28ABCC(&v488, *(_QWORD *)(v19 + 8));
  else
    v305 = v488;
  v306 = *(_DWORD *)(v272 + 88);
  if (v306 >= *(_DWORD *)(v272 + 92))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v306 = *(_DWORD *)(v272 + 88);
  }
  v307 = (uint64_t *)(*(_QWORD *)(v272 + 80) + 16 * v306);
  *v307 = v305;
  v307[1] = 0;
  ++*(_DWORD *)(v272 + 88);
  v308 = BYTE8(v497) & 3;
  if ((BYTE8(v497) & 3) != 0)
    v309 = (void *)sub_22F28ABCC(v496, *(_QWORD *)(v19 + 8));
  else
    v309 = v496[0];
  v310 = *(_DWORD *)(v272 + 168);
  if (v310 >= *(_DWORD *)(v272 + 172))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v310 = *(_DWORD *)(v272 + 168);
  }
  *(_QWORD *)(*(_QWORD *)(v272 + 160) + 8 * v310) = v309;
  ++*(_DWORD *)(v272 + 168);
  v311 = *(_QWORD *)(v19 + 8);
  v470[1] = v478;
  v470[2] = v479;
  v470[0] = v477;
  *(_WORD *)&v495[32] = 257;
  sub_22F26D368((uint64_t *)(v311 + 272), (uint64_t)v470, 1, (uint64_t)v495, (uint64_t)v499);
  if ((v499[24] & 3) != 0)
    sub_22F28ABCC(v499, *(_QWORD *)(v19 + 8));
  v312 = *(_QWORD **)(v19 + 8);
  if (v308)
    v313 = (uint64_t *)sub_22F28ABCC(v496, *(_QWORD *)(v19 + 8));
  else
    v313 = (uint64_t *)v496[0];
  sub_22F25E214(v312, v313);
  LOWORD(v526) = 257;
  v314 = llvm::IRBuilderBase::CreatePtrDiff();
  v315 = *(_QWORD *)(v19 + 8);
  v316 = *(_QWORD *)(v315 + 32);
  *(_WORD *)&v499[32] = 257;
  v317 = sub_22E3BF45C((uint64_t *)(v315 + 272), v314, v316, 1, (uint64_t)v499);
  v318 = *(_DWORD *)(a9 + 216);
  if (v318 >= *(_DWORD *)(a9 + 220))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v318 = *(_DWORD *)(a9 + 216);
  }
  *(_QWORD *)(*(_QWORD *)(a9 + 208) + 8 * v318) = v317;
  ++*(_DWORD *)(a9 + 216);
  v319 = *(_DWORD *)(a9 + 264);
  v21 = v452;
  LODWORD(v54) = v447;
  if (v319 >= *(_DWORD *)(a9 + 268))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v319 = *(_DWORD *)(a9 + 264);
  }
  *(_QWORD *)(*(_QWORD *)(a9 + 256) + 8 * v319) = v275;
  ++*(_DWORD *)(a9 + 264);
  v320 = *(_DWORD *)(a9 + 312);
  if (v320 >= *(_DWORD *)(a9 + 316))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v320 = *(_DWORD *)(a9 + 312);
  }
  *(_QWORD *)(*(_QWORD *)(a9 + 304) + 8 * v320) = 0;
  ++*(_DWORD *)(a9 + 312);
  v321 = *(_DWORD *)(a9 + 368);
  if (v321 >= *(_DWORD *)(a9 + 372))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v321 = *(_DWORD *)(a9 + 368);
  }
  *(_QWORD *)(*(_QWORD *)(a9 + 360) + 8 * v321) = v467;
  ++*(_DWORD *)(a9 + 368);
LABEL_432:
  if (!v465)
LABEL_433:
    *(_BYTE *)(a10 + 1241) = 1;
  if (!(_DWORD)v54)
    return;
  v322 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 8) + 144) + 144);
  v323 = llvm::ConstantInt::get();
  *(_QWORD *)v499 = &v499[16];
  *(_QWORD *)&v499[16] = v323;
  *(_QWORD *)&v499[8] = 0x400000001;
  v324 = llvm::ConstantInt::get();
  *(_QWORD *)v495 = &v495[16];
  *(_QWORD *)&v495[16] = v324;
  *(_QWORD *)&v495[8] = 0x400000001;
  *(_QWORD *)&v524 = &v525;
  *((_QWORD *)&v524 + 1) = 0x400000000;
  v325 = llvm::ConstantInt::get();
  v326 = &v497;
  v496[0] = &v497;
  *(_QWORD *)&v497 = v325;
  v496[1] = (void *)0x400000001;
  if (!a8)
    goto LABEL_481;
  v327 = a7;
  while (2)
  {
    v328 = (unsigned __int8 **)(*v327 & 0xFFFFFFFFFFFFFFFCLL);
    if (*(unsigned __int8 *)v328 == 191)
    {
      v329 = sub_22F00338C(v328[2]);
      v330 = sub_22EF5C728(v322, v329);
      if (v330)
      {
        if (*(_BYTE *)(v330 + 16) == 2)
          v331 = v330;
        else
          v331 = 0;
      }
      else
      {
        v331 = 0;
      }
      v332 = sub_22EF5C728(v322, v329);
      if (v332)
      {
        if (*(_BYTE *)(v332 + 16) == 5)
          v334 = v332;
        else
          v334 = 0;
      }
      else
      {
        v334 = 0;
      }
      if (DWORD2(v524))
        goto LABEL_459;
      v335 = v331;
      if (!v331)
      {
        v335 = v334;
        if (!v334)
          goto LABEL_467;
      }
      v336 = *(_QWORD *)(*(_QWORD *)(v335 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (v336)
      {
        if (v327 == a7)
          goto LABEL_456;
        v337 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v336 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v337 == 39 || v337 == 32)
        {
          v336 = *(_QWORD *)(sub_22F10ACF8(v336) & 0xFFFFFFFFFFFFFFF0);
          goto LABEL_456;
        }
        if ((v337 & 0xFEu) - 2 <= 3)
        {
          while (1)
          {
            if (v336 && (*(_DWORD *)(v336 + 16) & 0xFEu) - 6 > 0xFFFFFFFB)
            {
              v348 = v336;
            }
            else
            {
              if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v336 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3)
              {
                v21 = v452;
                break;
              }
              v348 = sub_22F10CF48(v336);
              v21 = v452;
              if (!v348)
                break;
            }
            v336 = *(_QWORD *)(*(_QWORD *)(v348 + 32) & 0xFFFFFFFFFFFFFFF0);
          }
        }
LABEL_456:
        sub_22EF5CCD0(v322, v336, (uint64_t)&v483);
        v338 = llvm::ConstantInt::get();
        v339 = DWORD2(v524);
        if (DWORD2(v524) >= (unint64_t)HIDWORD(v524))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v339 = DWORD2(v524);
        }
        *(_QWORD *)(v524 + 8 * v339) = v338;
        ++DWORD2(v524);
      }
LABEL_459:
      v19 = a1;
      if (a8 - 1 > (unint64_t)LODWORD(v496[1]))
      {
        if (v331)
        {
          v340 = llvm::ConstantInt::get();
          goto LABEL_464;
        }
        if (v334)
        {
          v341 = *(_QWORD *)(a1 + 8);
          v342 = (uint64_t *)(v341 + 272);
          v343 = *(_QWORD *)(v334 + 40);
          *(_QWORD *)&v483 = v341;
          *((_QWORD *)&v483 + 1) = v341 + 272;
          LOBYTE(v484) = 0;
          *((_QWORD *)&v484 + 1) = *(_QWORD *)(*(_QWORD *)(v341 + 144) + 232);
          v344 = sub_22E50E974(&v483, v343, v333);
          v345 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
          v485.n128_u16[0] = 257;
          v340 = sub_22E3BF45C(v342, v344, v345, 0, (uint64_t)&v483);
LABEL_464:
          v346 = v340;
          v347 = LODWORD(v496[1]);
          if (LODWORD(v496[1]) >= (unint64_t)HIDWORD(v496[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v347 = LODWORD(v496[1]);
          }
          *((_QWORD *)v496[0] + v347) = v346;
          ++LODWORD(v496[1]);
LABEL_467:
          v19 = a1;
        }
      }
    }
    v327 += 2;
    if (v327 != v21)
      continue;
    break;
  }
  v326 = (__int128 *)v496[0];
LABEL_481:
  v349 = llvm::ConstantInt::get();
  v351 = a7;
  if (a8)
  {
    v352 = (llvm::Instruction *)v349;
    v353 = (uint64_t *)v326 + 1;
    v354 = 16 * a8;
    while (1)
    {
      v355 = (unsigned __int8 *)(*v351 & 0xFFFFFFFFFFFFFFFCLL);
      v356 = *v355;
      if (v356 == 191)
      {
        v363 = *((_QWORD *)v355 + 3);
        v364 = *(_QWORD *)(v19 + 8);
        if (v363)
        {
          v365 = (uint64_t *)(v364 + 272);
          *(_QWORD *)&v483 = *(_QWORD *)(v19 + 8);
          *((_QWORD *)&v483 + 1) = v364 + 272;
          LOBYTE(v484) = 0;
          *((_QWORD *)&v484 + 1) = *(_QWORD *)(*(_QWORD *)(v364 + 144) + 232);
          v366 = sub_22E50E974(&v483, v363, v350);
          v367 = *(_QWORD *)(*(_QWORD *)(v19 + 8) + 32);
          v485.n128_u16[0] = 257;
          v368 = sub_22E3BF45C(v365, v366, v367, 0, (uint64_t)&v483);
        }
        else
        {
          v368 = llvm::ConstantInt::get();
        }
        v380 = v368;
        v381 = *(unsigned int *)&v499[8];
        if (*(unsigned int *)&v499[8] >= (unint64_t)*(unsigned int *)&v499[12])
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v381 = *(unsigned int *)&v499[8];
        }
        *(_QWORD *)(*(_QWORD *)v499 + 8 * v381) = v380;
        ++*(_DWORD *)&v499[8];
        v382 = *((_QWORD *)v355 + 4);
        if (v382)
        {
          *(_QWORD *)&v483 = *(_QWORD *)(v19 + 8);
          *((_QWORD *)&v483 + 1) = v483 + 272;
          LOBYTE(v484) = 0;
          *((_QWORD *)&v484 + 1) = *(_QWORD *)(*(_QWORD *)(v483 + 144) + 232);
          v383 = sub_22E50E974(&v483, v382, v369);
        }
        else if (*((_DWORD *)v355 + 12) || *((_DWORD *)v355 + 13))
        {
          v384 = *((_QWORD *)v355 + 5);
          if (!v384)
            goto LABEL_526;
          v385 = *(_QWORD *)(v19 + 8);
          v386 = (uint64_t *)(v385 + 272);
          *(_QWORD *)&v477 = v385;
          *((_QWORD *)&v477 + 1) = v385 + 272;
          LOBYTE(v478) = 0;
          *((_QWORD *)&v478 + 1) = *(_QWORD *)(*(_QWORD *)(v385 + 144) + 232);
          v387 = sub_22E50E974(&v477, v384, v369);
          v388 = *(_QWORD *)(*(_QWORD *)(v19 + 8) + 32);
          v485.n128_u16[0] = 257;
          v389 = sub_22E3BF45C(v386, v387, v388, 0, (uint64_t)&v483);
          if (v389)
          {
            v390 = v389;
            v391 = *(_QWORD *)(v19 + 8) + 272;
            v392 = *v353;
            v485.n128_u16[0] = 257;
            v393 = sub_22E3E48CC(v391, v392, v380, (uint64_t)&v483, 1, 0);
            LOWORD(v479) = 257;
            v383 = sub_22E4DF3BC(v391, (uint64_t)v393, v390, (uint64_t)&v477, 0);
          }
          else
          {
LABEL_526:
            v394 = *(_QWORD *)(v19 + 8) + 272;
            v395 = *v353;
            v485.n128_u16[0] = 257;
            v383 = (uint64_t)sub_22E3E48CC(v394, v395, v380, (uint64_t)&v483, 1, 0);
          }
        }
        else
        {
          v383 = llvm::ConstantInt::get();
        }
        v396 = *(_QWORD *)(v19 + 8);
        v397 = *(_QWORD *)(v396 + 32);
        v485.n128_u16[0] = 257;
        v398 = sub_22E3BF45C((uint64_t *)(v396 + 272), v383, v397, 0, (uint64_t)&v483);
        v400 = *(unsigned int *)&v495[8];
        if (*(unsigned int *)&v495[8] >= (unint64_t)*(unsigned int *)&v495[12])
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v400 = *(unsigned int *)&v495[8];
        }
        *(_QWORD *)(*(_QWORD *)v495 + 8 * v400) = v398;
        ++*(_DWORD *)&v495[8];
        v401 = *((_QWORD *)v355 + 5);
        if (v401)
        {
          v402 = *(_QWORD *)(v19 + 8);
          v403 = (uint64_t *)(v402 + 272);
          *(_QWORD *)&v483 = v402;
          *((_QWORD *)&v483 + 1) = v402 + 272;
          LOBYTE(v484) = 0;
          *((_QWORD *)&v484 + 1) = *(_QWORD *)(*(_QWORD *)(v402 + 144) + 232);
          v404 = sub_22E50E974(&v483, v401, v399);
          v405 = *(_QWORD *)(*(_QWORD *)(v19 + 8) + 32);
          v485.n128_u16[0] = 257;
          v406 = sub_22E3BF45C(v403, v404, v405, 0, (uint64_t)&v483);
        }
        else
        {
          v406 = 0;
        }
        v407 = *(_QWORD *)(v19 + 8) + 272;
        v408 = *(v353 - 1);
        v485.n128_u16[0] = 257;
        v352 = sub_22E3BDEA8(v407, (uint64_t)v352, v408, (uint64_t)&v483, 1, 0);
        if (v406)
        {
          v409 = *(_QWORD *)(v19 + 8) + 272;
          v485.n128_u16[0] = 257;
          v410 = sub_22E3BDEA8(v409, (uint64_t)v352, v406, (uint64_t)&v483, 1, 0);
          v411 = DWORD2(v524);
          if (DWORD2(v524) >= (unint64_t)HIDWORD(v524))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v411 = DWORD2(v524);
          }
          *(_QWORD *)(v524 + 8 * v411) = v410;
        }
        else
        {
          v412 = DWORD2(v524);
          if (DWORD2(v524) >= (unint64_t)HIDWORD(v524))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v412 = DWORD2(v524);
          }
          *(_QWORD *)(v524 + 8 * v412) = v352;
        }
        ++DWORD2(v524);
        v353 += v353 != (uint64_t *)((char *)v496[0] + 8 * LODWORD(v496[1]));
        goto LABEL_541;
      }
      if (v356 == 107)
        break;
LABEL_541:
      v351 += 2;
      v354 -= 16;
      if (!v354)
        goto LABEL_482;
    }
    v357 = *(_QWORD *)(v19 + 8);
    v358 = (uint64_t *)(v355 + 24);
    v359 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v355 + 3) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v360 = *(_DWORD *)(v359 + 16);
    if (v359)
      v361 = v360 == 11;
    else
      v361 = 0;
    if (v361)
    {
      if (((*(_DWORD *)(v359 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
      {
LABEL_507:
        v370 = *v358;
        *(_QWORD *)&v483 = v357;
        *((_QWORD *)&v483 + 1) = v357 + 272;
        LOBYTE(v484) = 0;
        *((_QWORD *)&v484 + 1) = *(_QWORD *)(*(_QWORD *)(v357 + 144) + 232);
        v371 = sub_22E50E974(&v483, v370, v350);
        v19 = a1;
        v372 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
        v485.n128_u16[0] = 257;
        v373 = sub_22E3BF45C((uint64_t *)(v357 + 272), v371, v372, 0, (uint64_t)&v483);
        v374 = *(unsigned int *)&v499[8];
        if (*(unsigned int *)&v499[8] >= (unint64_t)*(unsigned int *)&v499[12])
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v374 = *(unsigned int *)&v499[8];
        }
        *(_QWORD *)(*(_QWORD *)v499 + 8 * v374) = v373;
        ++*(_DWORD *)&v499[8];
        v375 = llvm::ConstantInt::get();
        v376 = *(unsigned int *)&v495[8];
        if (*(unsigned int *)&v495[8] >= (unint64_t)*(unsigned int *)&v495[12])
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v376 = *(unsigned int *)&v495[8];
        }
        *(_QWORD *)(*(_QWORD *)v495 + 8 * v376) = v375;
        ++*(_DWORD *)&v495[8];
        v377 = v524;
        v378 = DWORD2(v524);
        v379 = *(_QWORD *)(v524 + 8 * DWORD2(v524) - 8);
        if (DWORD2(v524) >= HIDWORD(v524))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v377 = v524;
          v378 = DWORD2(v524);
        }
        *(_QWORD *)(v377 + 8 * v378) = v379;
        ++DWORD2(v524);
        goto LABEL_541;
      }
    }
    else if (v359 && v360 == 44)
    {
      v362 = sub_22F114198(*(_QWORD *)(v359 + 24));
      if (((*(_BYTE *)(v362 + 74) & 1) != 0 || *(_QWORD *)(v362 + 128) > 7uLL)
        && (*(_QWORD *)(sub_22F114198(*(_QWORD *)(v359 + 24)) + 72) & 0x8000000000) == 0)
      {
        goto LABEL_507;
      }
    }
    else if (v360 == 9)
    {
      goto LABEL_507;
    }
    v358 = (uint64_t *)(v355 + 16);
    goto LABEL_507;
  }
LABEL_482:
  sub_22F284508(a9 + 408, (unint64_t)v499);
  sub_22F284508(a9 + 616, (unint64_t)v495);
  sub_22F284508(a9 + 824, (unint64_t)&v524);
  if (v496[0] != &v497)
    free(v496[0]);
  if ((__int128 *)v524 != &v525)
    free((void *)v524);
  if (*(_BYTE **)v495 != &v495[16])
    free(*(void **)v495);
  if (*(_BYTE **)v499 != &v499[16])
    free(*(void **)v499);
}

uint64_t sub_22E5C2354(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v11;
  BOOL v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t PtrDiff;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  _BYTE v56[32];
  __int16 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;

  v11 = result;
  if (*(_DWORD *)(a3 + 8) != 1
    || (**(_QWORD **)a3 <= 0xFFFEFFFFFFFFFFFFLL ? (v12 = *(_BYTE *)(a4 + 1240) == 0) : (v12 = 0), !v12))
  {
    v13 = *(_OWORD *)(a4 + 1056);
    v61 = *(_OWORD *)(a4 + 1040);
    v62 = v13;
    v63 = *(_OWORD *)(a4 + 1072);
    v14 = *(_OWORD *)(a4 + 1112);
    v58 = *(_OWORD *)(a4 + 1096);
    v59 = v14;
    v60 = *(_OWORD *)(a4 + 1128);
    if (*(_BYTE *)(a4 + 1241))
    {
      v15 = *(_OWORD *)(a4 + 1208);
      v61 = *(_OWORD *)(a4 + 1192);
      v62 = v15;
      v63 = *(_OWORD *)(a4 + 1224);
      v58 = v61;
      v59 = v15;
      v60 = v63;
    }
    v16 = *(_DWORD *)(a2 + 8);
    if (v16 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v16 = *(_DWORD *)(a2 + 8);
    }
    v17 = (_QWORD *)(*(_QWORD *)a2 + 16 * v16);
    *v17 = a5;
    v17[1] = 0;
    ++*(_DWORD *)(a2 + 8);
    v18 = (uint64_t *)(a4 + 1144);
    if ((*(_BYTE *)(a4 + 1168) & 3) != 0)
      v19 = sub_22F28ABCC(v18, *(_QWORD *)(v11 + 8));
    else
      v19 = *v18;
    v20 = *(_DWORD *)(a2 + 88);
    if (v20 >= *(_DWORD *)(a2 + 92))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v20 = *(_DWORD *)(a2 + 88);
    }
    v21 = (uint64_t *)(*(_QWORD *)(a2 + 80) + 16 * v20);
    *v21 = v19;
    v21[1] = 0;
    ++*(_DWORD *)(a2 + 88);
    if ((BYTE8(v62) & 3) != 0)
      v22 = sub_22F28ABCC(&v61, *(_QWORD *)(v11 + 8));
    else
      v22 = v61;
    v23 = *(_DWORD *)(a2 + 168);
    if (v23 >= *(_DWORD *)(a2 + 172))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v23 = *(_DWORD *)(a2 + 168);
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 160) + 8 * v23) = v22;
    ++*(_DWORD *)(a2 + 168);
    v24 = *(_DWORD *)(a2 + 312);
    if (v24 >= *(_DWORD *)(a2 + 316))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v24 = *(_DWORD *)(a2 + 312);
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 304) + 8 * v24) = 0;
    ++*(_DWORD *)(a2 + 312);
    if ((BYTE8(v59) & 3) != 0)
      v25 = (uint64_t *)sub_22F28ABCC(&v58, *(_QWORD *)(v11 + 8));
    else
      v25 = (uint64_t *)v58;
    v26 = (uint64_t *)(*(_QWORD *)(v11 + 8) + 272);
    v57 = 257;
    v27 = sub_22E4363E4(v26, *((llvm::LLVMContext **)&v58 + 1), v25, 1, (uint64_t)v56);
    v28 = *(_QWORD *)(v11 + 8);
    v29 = *(_QWORD *)(v28 + 96);
    v57 = 257;
    sub_22E3CA9BC((uint64_t *)(v28 + 272), v22, v29, (uint64_t)v56);
    v30 = *(_QWORD *)(v11 + 8);
    v31 = *(_QWORD *)(v30 + 96);
    v57 = 257;
    sub_22E3CA9BC((uint64_t *)(v30 + 272), v27, v31, (uint64_t)v56);
    v57 = 257;
    PtrDiff = llvm::IRBuilderBase::CreatePtrDiff();
    v33 = *(_QWORD *)(v11 + 8);
    v34 = *(_QWORD *)(v33 + 32);
    v57 = 257;
    result = sub_22E3BF45C((uint64_t *)(v33 + 272), PtrDiff, v34, 0, (uint64_t)v56);
    v35 = result;
    v36 = *(_DWORD *)(a2 + 216);
    if (v36 >= *(_DWORD *)(a2 + 220))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v36 = *(_DWORD *)(a2 + 216);
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 208) + 8 * v36) = v35;
    ++*(_DWORD *)(a2 + 216);
    if (a6)
      v37 = 0;
    else
      v37 = 32;
    v38 = *(_DWORD *)(a2 + 264);
    if (v38 >= *(_DWORD *)(a2 + 268))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v38 = *(_DWORD *)(a2 + 264);
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 256) + 8 * v38) = v37;
    v39 = *(_DWORD *)(a2 + 264) + 1;
    *(_DWORD *)(a2 + 264) = v39;
    v40 = *(unint64_t **)a3;
    v41 = *(unsigned int *)(a3 + 8);
    if ((_DWORD)v41)
    {
      v42 = 0;
      v43 = 8 * v41;
      while ((v40[v42 / 8] & 0x1000) == 0)
      {
        v42 += 8;
        if (v43 == v42)
          goto LABEL_35;
      }
      *(_QWORD *)(*(_QWORD *)(a2 + 256) + 8 * v39 - 8) |= 0x1000uLL;
      v40 = *(unint64_t **)a3;
    }
LABEL_35:
    *v40 &= ~0x20uLL;
    v44 = *(unsigned int *)(a3 + 8);
    if ((_DWORD)v44)
    {
      v45 = 0;
      v46 = *(unint64_t **)a3;
      v47 = *(_QWORD *)a3 + 8 * v44;
      v48 = 8 * v44;
      while ((v46[v45 / 8] & 0x2000) == 0)
      {
        v45 += 8;
        if (v48 == v45)
          goto LABEL_45;
      }
      v49 = *(_QWORD *)(a2 + 256) + 8 * *(unsigned int *)(a2 + 264);
      *(_QWORD *)(v49 - 8) |= 0x2000uLL;
      v50 = *(unsigned int *)(a3 + 8);
      if (!(_DWORD)v50)
        return result;
      v51 = *(unint64_t **)a3;
      v52 = 8 * v50;
      do
      {
        *v51++ |= 0x2000uLL;
        v52 -= 8;
      }
      while (v52);
      v53 = *(unsigned int *)(a3 + 8);
      if (!(_DWORD)v53)
        return result;
      v46 = *(unint64_t **)a3;
      v47 = *(_QWORD *)a3 + 8 * v53;
LABEL_45:
      v54 = ((unint64_t)(*(_DWORD *)(a2 + 88) - 1) << 48) + 0x1000000000000;
      do
      {
        if (*v46 > 0xFFFEFFFFFFFFFFFFLL || (*v46 & 0x10) == 0)
          *v46 = *v46 & 0xFFFFFFFFFFFFLL | v54;
        ++v46;
      }
      while (v46 != (unint64_t *)v47);
    }
  }
  return result;
}

void sub_22E5C27C8(uint64_t a1, uint64_t a2)
{
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(const void **)a2;
  v5 = *(unsigned int *)(a2 + 8);
  v6 = *(unsigned int *)(a1 + 8);
  if (v6 + v5 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
  }
  if ((_DWORD)v5)
  {
    memcpy((void *)(*(_QWORD *)a1 + 16 * v6), v4, 16 * v5);
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 8) = v6 + v5;
  v7 = *(const void **)(a2 + 80);
  v8 = *(unsigned int *)(a2 + 88);
  v9 = *(unsigned int *)(a1 + 88);
  if (v9 + v8 > (unint64_t)*(unsigned int *)(a1 + 92))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    LODWORD(v9) = *(_DWORD *)(a1 + 88);
  }
  if ((_DWORD)v8)
  {
    memcpy((void *)(*(_QWORD *)(a1 + 80) + 16 * v9), v7, 16 * v8);
    LODWORD(v9) = *(_DWORD *)(a1 + 88);
  }
  *(_DWORD *)(a1 + 88) = v9 + v8;
  sub_22E3D0148(a1 + 160, *(_BYTE **)(a2 + 160), (_BYTE *)(*(_QWORD *)(a2 + 160) + 8 * *(unsigned int *)(a2 + 168)));
  sub_22E3D0148(a1 + 208, *(_BYTE **)(a2 + 208), (_BYTE *)(*(_QWORD *)(a2 + 208) + 8 * *(unsigned int *)(a2 + 216)));
  v10 = *(const void **)(a2 + 256);
  v11 = *(unsigned int *)(a2 + 264);
  v12 = *(unsigned int *)(a1 + 264);
  if (v12 + v11 > (unint64_t)*(unsigned int *)(a1 + 268))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    LODWORD(v12) = *(_DWORD *)(a1 + 264);
  }
  if ((_DWORD)v11)
  {
    memcpy((void *)(*(_QWORD *)(a1 + 256) + 8 * v12), v10, 8 * v11);
    LODWORD(v12) = *(_DWORD *)(a1 + 264);
  }
  *(_DWORD *)(a1 + 264) = v12 + v11;
  sub_22F2633B0(a1 + 304, *(_BYTE **)(a2 + 304), (_BYTE *)(*(_QWORD *)(a2 + 304) + 8 * *(unsigned int *)(a2 + 312)));
  sub_22E5223E0(a1 + 360, *(_BYTE **)(a2 + 360), (_BYTE *)(*(_QWORD *)(a2 + 360) + 8 * *(unsigned int *)(a2 + 368)));
  sub_22F284710(a1 + 408, *(_QWORD *)(a2 + 408), *(_QWORD *)(a2 + 408) + 48 * *(unsigned int *)(a2 + 416));
  sub_22F284710(a1 + 616, *(_QWORD *)(a2 + 616), *(_QWORD *)(a2 + 616) + 48 * *(unsigned int *)(a2 + 624));
  sub_22F284710(a1 + 824, *(_QWORD *)(a2 + 824), *(_QWORD *)(a2 + 824) + 48 * *(unsigned int *)(a2 + 832));
}

char **sub_22E5C2970(char **a1)
{
  char *v2;
  unsigned int v3;
  uint64_t v4;
  char *v5;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  if (v3)
  {
    v4 = 720 * v3;
    do
    {
      v5 = *(char **)&v2[v4 - 720];
      if (&v2[v4 - 704] != v5)
        free(v5);
      v4 -= 720;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

_QWORD *sub_22E5C29E8(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F284454(a1, (uint64_t)v4, (uint64_t)v4 + 16 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22E5C2AA8(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  unsigned int v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  _DWORD *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  _DWORD *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  void *v20;

  v3 = (_DWORD *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x400000000;
  if (a1 != a2)
  {
    v5 = *(_DWORD *)(a2 + 8);
    if (v5)
    {
      v6 = *(_QWORD *)a2;
      if (*(_QWORD *)a2 != a2 + 16)
      {
        v7 = *(_DWORD *)(a2 + 12);
        *(_QWORD *)a1 = v6;
        *(_DWORD *)(a1 + 8) = v5;
        *(_DWORD *)(a1 + 12) = v7;
        *(_QWORD *)a2 = a2 + 16;
        *(_DWORD *)(a2 + 12) = 0;
LABEL_31:
        *(_DWORD *)(a2 + 8) = 0;
        return a1;
      }
      if (v5 <= 4)
      {
        v17 = v6 + 720 * v5;
        v9 = (_QWORD *)(a1 + 16);
      }
      else
      {
        v8 = (_QWORD *)llvm::SmallVectorBase<unsigned int>::mallocForGrow();
        v9 = v8;
        v10 = *(_DWORD **)a1;
        v11 = *(_DWORD *)(a1 + 8);
        if (v11)
        {
          v12 = 720 * v11;
          do
          {
            *v8 = v8 + 2;
            v8[1] = 0x800000000;
            if (v10[2])
              v8 = (_QWORD *)sub_22E5C2CA0((uint64_t)v8, (uint64_t)v10);
            v10 += 180;
            v8 += 90;
            v12 -= 720;
          }
          while (v12);
          v10 = *(_DWORD **)a1;
          v13 = *(_DWORD *)(a1 + 8);
          if (v13)
          {
            v14 = 180 * v13;
            do
            {
              v15 = *(_DWORD **)&v10[v14 - 180];
              if (&v10[v14 - 176] != v15)
                free(v15);
              v14 -= 180;
            }
            while (v14 * 4);
            v10 = *(_DWORD **)a1;
          }
        }
        if (v10 != v3)
          free(v10);
        *(_QWORD *)a1 = v9;
        *(_DWORD *)(a1 + 12) = 0;
        v6 = *(_QWORD *)a2;
        v16 = *(_DWORD *)(a2 + 8);
        if (!v16)
          goto LABEL_26;
        v17 = v6 + 720 * v16;
      }
      do
      {
        *v9 = v9 + 2;
        v9[1] = 0x800000000;
        if (*(_DWORD *)(v6 + 8))
          sub_22E5C2CA0((uint64_t)v9, v6);
        v6 += 720;
        v9 += 90;
      }
      while (v6 != v17);
      v6 = *(_QWORD *)a2;
LABEL_26:
      *(_DWORD *)(a1 + 8) = v5;
      v18 = *(_DWORD *)(a2 + 8);
      if (v18)
      {
        v19 = 720 * v18;
        do
        {
          v20 = *(void **)(v6 + v19 - 720);
          if ((void *)(v6 + v19 - 704) != v20)
            free(v20);
          v19 -= 720;
        }
        while (v19);
      }
      goto LABEL_31;
    }
  }
  return a1;
}

uint64_t sub_22E5C2CA0(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *v6;
  _DWORD *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_17;
    }
    v7 = (_DWORD *)(a2 + 8);
    v8 = *(_DWORD *)(a2 + 8);
    v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if (v8)
        memmove(*(void **)a1, v4, 88 * v8 - 7);
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v8)
    {
      if ((_DWORD)v9)
      {
        memmove(*(void **)a1, v4, 88 * v9 - 7);
        goto LABEL_14;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v9 = 0;
LABEL_14:
    v10 = *v7;
    if (v9 != v10)
      memcpy((void *)(*(_QWORD *)a1 + 88 * v9), (const void *)(*(_QWORD *)a2 + 88 * v9), *(_QWORD *)a2 + 88 * v10 - (*(_QWORD *)a2 + 88 * v9));
LABEL_16:
    *(_DWORD *)(a1 + 8) = v8;
LABEL_17:
    *v7 = 0;
  }
  return a1;
}

uint64_t sub_22E5C2DCC(uint64_t a1, uint64_t a2)
{
  void *v3;
  unsigned int v5;
  const void *v6;
  int v7;
  unsigned int v8;

  v3 = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x400000000;
  if (a1 != a2)
  {
    v5 = *(_DWORD *)(a2 + 8);
    if (v5)
    {
      v6 = *(const void **)a2;
      if (*(_QWORD *)a2 != a2 + 16)
      {
        *(_QWORD *)a1 = v6;
        v7 = *(_DWORD *)(a2 + 12);
        *(_DWORD *)(a1 + 8) = v5;
        *(_DWORD *)(a1 + 12) = v7;
        *(_QWORD *)a2 = a2 + 16;
        *(_DWORD *)(a2 + 12) = 0;
LABEL_11:
        *(_DWORD *)(a2 + 8) = 0;
        return a1;
      }
      if (v5 < 5)
      {
        v8 = v5;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = *(_DWORD *)(a2 + 8);
        if (!v8)
        {
LABEL_10:
          *(_DWORD *)(a1 + 8) = v5;
          goto LABEL_11;
        }
        v6 = *(const void **)a2;
        v3 = *(void **)a1;
      }
      memcpy(v3, v6, 24 * v8);
      goto LABEL_10;
    }
  }
  return a1;
}

uint64_t sub_22E5C2E90(int a1, _DWORD *a2, uint64_t a3, _DWORD *a4, uint64_t a5, int a6, int a7, int a8, char a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;

  v9 = 512;
  if (!a6)
    v9 = 0;
  switch(a1)
  {
    case 1:
      v9 |= 1uLL;
      break;
    case 2:
      v9 |= 2uLL;
      break;
    case 3:
      v9 |= 3uLL;
      break;
    case 4:
      v9 |= 8uLL;
      break;
    default:
      break;
  }
  if (a7)
    v9 |= 0x10uLL;
  if (a8)
    v10 = v9 | 0x20;
  else
    v10 = v9;
  v11 = 4 * a3;
  if (a3)
  {
    v12 = 4 * a3;
    v13 = a2;
    while (*v13 != 7)
    {
      ++v13;
      v12 -= 4;
      if (!v12)
      {
        v13 = &a2[a3];
        break;
      }
    }
    if (a3 != v13 - a2)
      v10 |= 4uLL;
    v14 = 4 * a3;
    v15 = a2;
    while (*v15 != 8)
    {
      ++v15;
      v14 -= 4;
      if (!v14)
      {
        v15 = &a2[a3];
        break;
      }
    }
    if (a3 != v15 - a2)
      v10 |= 0x400uLL;
    v16 = 4 * a3;
    v17 = a2;
    while (*v17 != 10)
    {
      ++v17;
      v16 -= 4;
      if (!v16)
      {
        v17 = &a2[a3];
        break;
      }
    }
  }
  else
  {
    v17 = a2;
  }
  if (a3 != v17 - a2)
    goto LABEL_39;
  if (a5)
  {
    v18 = 4 * a5;
    v19 = a4;
    while (*v19 != 1)
    {
      ++v19;
      v18 -= 4;
      if (!v18)
      {
        v19 = &a4[a5];
        break;
      }
    }
  }
  else
  {
    v19 = a4;
  }
  if (a5 != v19 - a4)
LABEL_39:
    v10 |= 0x1000uLL;
  v20 = a2;
  if (a3)
  {
    while (*v20 != 11)
    {
      ++v20;
      v11 -= 4;
      if (!v11)
      {
        v20 = &a2[a3];
        break;
      }
    }
  }
  if (a3 == v20 - a2)
    v21 = v10;
  else
    v21 = v10 | 0x2000;
  if (a9)
    return v21 | 0x100000000000;
  else
    return v21;
}

uint64_t sub_22E5C302C(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_17;
    }
    v7 = (_DWORD *)(a2 + 8);
    v8 = *(unsigned int *)(a2 + 8);
    v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if ((_DWORD)v8)
        memmove(*(void **)a1, v4, 16 * v8);
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v8)
    {
      if ((_DWORD)v9)
      {
        memmove(*(void **)a1, v4, 16 * v9);
        goto LABEL_14;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v9 = 0;
LABEL_14:
    v10 = *v7;
    if (v9 != v10)
      memcpy((void *)(*(_QWORD *)a1 + 16 * v9), (const void *)(*(_QWORD *)a2 + 16 * v9), *(_QWORD *)a2 + 16 * v10 - (*(_QWORD *)a2 + 16 * v9));
LABEL_16:
    *(_DWORD *)(a1 + 8) = v8;
LABEL_17:
    *v7 = 0;
  }
  return a1;
}

uint64_t sub_22E5C3144(uint64_t a1, const void **a2)
{
  const void *v3;
  const void **v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v11;
  const void **v12;
  uint64_t v13;
  const void **v14;
  const void **v15;

  if ((const void **)a1 != a2)
  {
    v4 = a2 + 2;
    v3 = *a2;
    if (*a2 != a2 + 2)
    {
      v11 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        v12 = a2;
        free(v11);
        a2 = v12;
        v3 = *v12;
      }
      *(_QWORD *)a1 = v3;
      v6 = a2 + 1;
      *(_QWORD *)(a1 + 8) = a2[1];
      *a2 = v4;
      *((_DWORD *)a2 + 3) = 0;
      goto LABEL_10;
    }
    v6 = a2 + 1;
    v5 = *((unsigned int *)a2 + 2);
    v7 = *(unsigned int *)(a1 + 8);
    if (v7 >= v5)
    {
      if ((_DWORD)v5)
        memmove(*(void **)a1, *a2, 8 * v5);
      goto LABEL_9;
    }
    if (*(_DWORD *)(a1 + 12) < v5)
    {
      *(_DWORD *)(a1 + 8) = 0;
      v14 = a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      a2 = v14;
    }
    else if ((_DWORD)v7)
    {
      v13 = *(unsigned int *)(a1 + 8);
      v15 = a2;
      memmove(*(void **)a1, v3, 8 * v7);
      v8 = v13;
      a2 = v15;
LABEL_7:
      v9 = *v6;
      if (v8 != v9)
        memcpy((void *)(*(_QWORD *)a1 + 8 * v8), (char *)*a2 + 8 * v8, (_BYTE *)*a2 + 8 * v9 - ((_BYTE *)*a2 + 8 * v8));
LABEL_9:
      *(_DWORD *)(a1 + 8) = v5;
LABEL_10:
      *v6 = 0;
      return a1;
    }
    v8 = 0;
    goto LABEL_7;
  }
  return a1;
}

uint64_t sub_22E5C3280(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_17;
    }
    v7 = (_DWORD *)(a2 + 8);
    v8 = *(unsigned int *)(a2 + 8);
    v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if ((_DWORD)v8)
        memmove(*(void **)a1, v4, 8 * v8);
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v8)
    {
      if ((_DWORD)v9)
      {
        memmove(*(void **)a1, v4, 8 * v9);
        goto LABEL_14;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v9 = 0;
LABEL_14:
    v10 = *v7;
    if (v9 != v10)
      memcpy((void *)(*(_QWORD *)a1 + 8 * v9), (const void *)(*(_QWORD *)a2 + 8 * v9), *(_QWORD *)a2 + 8 * v10 - (*(_QWORD *)a2 + 8 * v9));
LABEL_16:
    *(_DWORD *)(a1 + 8) = v8;
LABEL_17:
    *v7 = 0;
  }
  return a1;
}

uint64_t sub_22E5C3398(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  const void **v11;
  const void *v12;
  uint64_t v13;
  void **v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  const void **v27;
  const void *v28;
  uint64_t v29;
  void **v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  const void *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v70;
  int v75;
  int v76;

  v2 = a1;
  if (a1 != a2)
  {
    v3 = (_QWORD *)a2;
    v4 = *(char **)a2;
    if (*(_QWORD *)a2 == a2 + 16)
    {
      v5 = *(unsigned int *)(a2 + 8);
      v6 = *(unsigned int *)(a1 + 8);
      if (v6 < v5)
      {
        v75 = *(_DWORD *)(a2 + 8);
        if (*(_DWORD *)(a1 + 12) < v5)
        {
          if ((_DWORD)v6)
          {
            v48 = *(char **)a1;
            v49 = 48 * v6;
            do
            {
              v50 = *(char **)&v48[v49 - 48];
              if (&v48[v49 - 32] != v50)
                free(v50);
              v49 -= 48;
            }
            while (v49);
          }
          *(_DWORD *)(v2 + 8) = 0;
          sub_22F2845F4(v2);
        }
        else if ((_DWORD)v6)
        {
          v7 = 0;
          v8 = *(char **)a1;
          v70 = *(unsigned int *)(a1 + 8);
          v9 = 48 * v6;
          v10 = *(char **)a2;
          while (v4 == v8)
          {
LABEL_17:
            v10 += 48;
            v7 += 48;
            if (v9 == v7)
            {
              v3 = (_QWORD *)a2;
              v2 = a1;
              LODWORD(v5) = v75;
              v40 = v70;
              goto LABEL_66;
            }
          }
          v11 = (const void **)&v4[v7];
          v13 = (uint64_t)&v4[v7 + 16];
          v12 = *(const void **)&v4[v7];
          if ((const void *)v13 != v12)
          {
            v20 = &v8[v7];
            v21 = *(char **)&v8[v7];
            if (&v8[v7 + 16] != v21)
            {
              free(v21);
              v12 = *v11;
            }
            *(_QWORD *)v20 = v12;
            v15 = v10 + 8;
            v22 = &v4[v7];
            *((_QWORD *)v20 + 1) = *(_QWORD *)&v4[v7 + 8];
            *(_QWORD *)v22 = v13;
            *((_DWORD *)v22 + 3) = 0;
            goto LABEL_16;
          }
          v14 = (void **)&v8[v7];
          v15 = &v4[v7 + 8];
          v16 = *(unsigned int *)v15;
          v17 = &v8[v7];
          v18 = *(unsigned int *)&v8[v7 + 8];
          if (v18 >= v16)
          {
            if ((_DWORD)v16)
              memmove(*v14, v12, 8 * v16);
            goto LABEL_15;
          }
          if (*((_DWORD *)v17 + 3) < v16)
          {
            *((_DWORD *)v17 + 2) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v14 = (void **)&v8[v7];
          }
          else if ((_DWORD)v18)
          {
            memmove(*v14, v12, 8 * v18);
            v14 = (void **)&v8[v7];
LABEL_13:
            v19 = *(unsigned int *)v15;
            if (v18 != v19)
              memcpy((char *)*v14 + 8 * v18, (char *)*v11 + 8 * v18, (_BYTE *)*v11 + 8 * v19 - ((_BYTE *)*v11 + 8 * v18));
LABEL_15:
            *((_DWORD *)v17 + 2) = v16;
LABEL_16:
            *(_DWORD *)v15 = 0;
            goto LABEL_17;
          }
          v18 = 0;
          goto LABEL_13;
        }
        v40 = 0;
LABEL_66:
        v51 = *v3;
        v52 = *((unsigned int *)v3 + 2);
        if (v40 != v52)
        {
          v53 = v3;
          v54 = *(_QWORD *)v2;
          v55 = 48 * v40;
          v56 = 48 * v52;
          while (1)
          {
            v57 = v54 + v55;
            v58 = (void *)(v54 + v55 + 16);
            *(_QWORD *)v57 = v58;
            *(_QWORD *)(v57 + 8) = 0x400000000;
            if (v51 == v54)
              goto LABEL_76;
            v59 = v51 + v55;
            v60 = *(unsigned int *)(v51 + v55 + 8);
            if (!*(_DWORD *)(v51 + v55 + 8))
              goto LABEL_76;
            v61 = v51 + v55;
            v63 = v51 + v55 + 16;
            v62 = *(const void **)(v51 + v55);
            if ((const void *)v63 != v62)
            {
              *(_QWORD *)v57 = v62;
              v65 = *(_DWORD *)(v61 + 12);
              *(_DWORD *)(v57 + 8) = v60;
              *(_DWORD *)(v57 + 12) = v65;
              *(_QWORD *)v61 = v63;
              *(_DWORD *)(v61 + 12) = 0;
              goto LABEL_75;
            }
            if (v60 >= 5)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v64 = *(unsigned int *)(v59 + 8);
              if (!(_DWORD)v64)
                goto LABEL_74;
              v62 = *(const void **)v59;
              v58 = *(void **)v57;
            }
            else
            {
              v64 = *(unsigned int *)(v51 + v55 + 8);
            }
            memcpy(v58, v62, 8 * v64);
LABEL_74:
            *(_DWORD *)(v57 + 8) = v60;
LABEL_75:
            *(_DWORD *)(v59 + 8) = 0;
LABEL_76:
            v54 += 48;
            v51 += 48;
            v56 -= 48;
            if (v55 == v56)
            {
              v3 = v53;
              v51 = *v53;
              LODWORD(v5) = v75;
              break;
            }
          }
        }
        *(_DWORD *)(v2 + 8) = v5;
        v66 = *((unsigned int *)v3 + 2);
        if ((_DWORD)v66)
        {
          v67 = 48 * v66;
          do
          {
            v68 = *(void **)(v51 + v67 - 48);
            if ((void *)(v51 + v67 - 32) != v68)
              free(v68);
            v67 -= 48;
          }
          while (v67);
        }
        goto LABEL_86;
      }
      v23 = *(char **)a1;
      if (!(_DWORD)v5)
      {
        v39 = *(char **)a1;
LABEL_48:
        v41 = &v23[48 * v6];
        while (v41 != v39)
        {
          v43 = (char *)*((_QWORD *)v41 - 6);
          v41 -= 48;
          v42 = v43;
          if (v41 + 16 != v43)
            free(v42);
        }
        *(_DWORD *)(v2 + 8) = v5;
        v44 = *((unsigned int *)v3 + 2);
        if ((_DWORD)v44)
        {
          v45 = *v3;
          v46 = 48 * v44;
          do
          {
            v47 = *(void **)(v45 + v46 - 48);
            if ((void *)(v45 + v46 - 32) != v47)
              free(v47);
            v46 -= 48;
          }
          while (v46);
        }
LABEL_86:
        *((_DWORD *)v3 + 2) = 0;
        return v2;
      }
      v24 = 0;
      v76 = *(_DWORD *)(a2 + 8);
      v25 = 48 * v5;
      v26 = *(char **)a2;
      while (v4 == v23)
      {
LABEL_38:
        v26 += 48;
        v24 += 48;
        if (v25 == v24)
        {
          v3 = (_QWORD *)a2;
          v2 = a1;
          LODWORD(v6) = *(_DWORD *)(a1 + 8);
          v39 = &v23[v24];
          v23 = *(char **)a1;
          LODWORD(v5) = v76;
          goto LABEL_48;
        }
      }
      v27 = (const void **)&v4[v24];
      v29 = (uint64_t)&v4[v24 + 16];
      v28 = *(const void **)&v4[v24];
      if ((const void *)v29 != v28)
      {
        v36 = &v23[v24];
        v37 = *(char **)&v23[v24];
        if (&v23[v24 + 16] != v37)
        {
          free(v37);
          v28 = *v27;
        }
        *(_QWORD *)v36 = v28;
        v32 = v26 + 8;
        v38 = &v4[v24];
        *((_QWORD *)v36 + 1) = *(_QWORD *)&v4[v24 + 8];
        *(_QWORD *)v38 = v29;
        *((_DWORD *)v38 + 3) = 0;
        goto LABEL_37;
      }
      v30 = (void **)&v23[v24];
      v32 = &v4[v24 + 8];
      v31 = *(unsigned int *)v32;
      v33 = &v23[v24];
      v34 = *(unsigned int *)&v23[v24 + 8];
      if (v34 >= v31)
      {
        if ((_DWORD)v31)
          memmove(*v30, v28, 8 * v31);
        goto LABEL_36;
      }
      if (*((_DWORD *)v33 + 3) < v31)
      {
        *((_DWORD *)v33 + 2) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v30 = (void **)&v23[v24];
      }
      else if ((_DWORD)v34)
      {
        memmove(*v30, v28, 8 * v34);
        v30 = (void **)&v23[v24];
LABEL_34:
        v35 = *(unsigned int *)v32;
        if (v34 != v35)
          memcpy((char *)*v30 + 8 * v34, (char *)*v27 + 8 * v34, (_BYTE *)*v27 + 8 * v35 - ((_BYTE *)*v27 + 8 * v34));
LABEL_36:
        *((_DWORD *)v33 + 2) = v31;
LABEL_37:
        *(_DWORD *)v32 = 0;
        goto LABEL_38;
      }
      v34 = 0;
      goto LABEL_34;
    }
    sub_22F284568((char **)a1, (char **)a2);
  }
  return v2;
}

unint64_t sub_22E5C38CC(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  unint64_t v5;
  unint64_t v7;

  v2 = a2;
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = *(_QWORD *)a1 + 48 * v3;
    if (*(_QWORD *)a1 <= a2 && v5 > a2)
    {
      v7 = a2 - *(_QWORD *)a1;
      sub_22F2845F4(a1);
      return *(_QWORD *)a1 + v7;
    }
    else
    {
      sub_22F2845F4(a1);
    }
  }
  return v2;
}

uint64_t sub_22E5C3934(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
        memmove(*(void **)a1, *(const void **)a2, 8 * v4);
      goto LABEL_8;
    }
    if (*(_DWORD *)(a1 + 12) < v4)
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    else if ((_DWORD)v5)
    {
      v9 = *(unsigned int *)(a1 + 8);
      memmove(*(void **)a1, *(const void **)a2, 8 * v5);
      v6 = v9;
LABEL_6:
      v7 = *(unsigned int *)(a2 + 8);
      if (v6 != v7)
        memcpy((void *)(*(_QWORD *)a1 + 8 * v6), (const void *)(*(_QWORD *)a2 + 8 * v6), *(_QWORD *)a2 + 8 * v7 - (*(_QWORD *)a2 + 8 * v6));
LABEL_8:
      *(_DWORD *)(a1 + 8) = v4;
      return a1;
    }
    v6 = 0;
    goto LABEL_6;
  }
  return a1;
}

void sub_22E5C3A10(uint64_t a1, const void *a2, size_t a3, char a4, const void *a5, size_t a6, const void *a7, size_t a8)
{
  void **v14;
  void **v15;
  _BYTE *v16;
  void **v17;
  void *v18;
  _BYTE *v19;
  void **v20;
  void *v21;
  _BYTE v23[24];
  uint64_t v24;
  void *v25[4];
  void *v26;
  __int128 v27;
  _QWORD v28[34];

  v28[32] = *MEMORY[0x24BDAC8D0];
  v14 = v25;
  v26 = v28;
  v27 = xmmword_22F44E320;
  sub_22F242C48((uint64_t)v23, (uint64_t)&v26);
  if (v24 - (unint64_t)v25[0] > 3)
  {
    *(_DWORD *)v25[0] = 1447516767;
    v16 = (char *)v25[0] + 4;
    v25[0] = (char *)v25[0] + 4;
    v15 = (void **)v23;
    v17 = v25;
  }
  else
  {
    v15 = (void **)llvm::raw_ostream::write((llvm::raw_ostream *)v23, "_ZGV");
    v17 = v15 + 4;
    v16 = v15[4];
  }
  if (v16 >= v15[3])
  {
    v15 = (void **)llvm::raw_ostream::write((llvm::raw_ostream *)v15);
  }
  else
  {
    *v17 = v16 + 1;
    *v16 = a4;
  }
  v18 = v15[4];
  if (a3 <= (_BYTE *)v15[3] - (_BYTE *)v18)
  {
    if (a3)
    {
      memcpy(v18, a2, a3);
      v15[4] = (char *)v15[4] + a3;
    }
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v15, (const char *)a2);
  }
  llvm::raw_ostream::operator<<();
  v19 = v25[0];
  if (a6 <= v24 - (unint64_t)v25[0])
  {
    if (a6)
    {
      memcpy(v25[0], a5, a6);
      v19 = (char *)v25[0] + a6;
      v25[0] = (char *)v25[0] + a6;
    }
    v20 = (void **)v23;
  }
  else
  {
    v20 = (void **)llvm::raw_ostream::write((llvm::raw_ostream *)v23, (const char *)a5);
    v14 = v20 + 4;
    v19 = v20[4];
  }
  if (v20[3] == v19)
  {
    v20 = (void **)llvm::raw_ostream::write((llvm::raw_ostream *)v20, "_");
  }
  else
  {
    *v19 = 95;
    *v14 = (char *)*v14 + 1;
  }
  v21 = v20[4];
  if (a8 <= (_BYTE *)v20[3] - (_BYTE *)v21)
  {
    if (a8)
    {
      memcpy(v21, a7, a8);
      v20[4] = (char *)v20[4] + a8;
    }
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v20, (const char *)a7);
  }
  llvm::Function::addFnAttr();
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v23);
  if (v26 != v28)
    free(v26);
}

void sub_22E5C3C98(int a1, const void *a2, size_t a3, char a4, const void *a5, size_t a6, const void *a7, size_t a8)
{
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  if (a1 <= 31)
  {
    v16 = a1 == 8;
    if (a1 == 8)
      v17 = 8;
    else
      v17 = 4;
    if (v16)
      v15 = 16;
    else
      v15 = 8;
    goto LABEL_11;
  }
  if (a1 == 32)
  {
    v15 = 4;
    v17 = 2;
LABEL_11:
    sub_22E5C3F38(v17, a2, a3, a4, a5, a6, a7, a8);
    goto LABEL_12;
  }
  v15 = 2;
LABEL_12:
  sub_22E5C3F38(v15, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_22E5C3D7C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  BOOL v10;
  uint64_t v12;

  v5 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(unsigned __int8 *)(v7 + 16);
  if (v7)
    v9 = v8 == 11;
  else
    v9 = 0;
  v10 = v9 || a2 > 2;
  if (!v10 && v8 == 39 && (v12 = sub_22F10ACF8(v6), sub_22E5C3E24(v12, a3)))
  {
    v5 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFFFF0);
  }
  else if (!sub_22E5C3E24(a1, a3))
  {
    v5 = (uint64_t *)(sub_22F36D7FC(a3) & 0xFFFFFFFFFFFFFFF0);
  }
  return sub_22EF5CDF0(a3, *v5);
}

BOOL sub_22E5C3E24(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  int v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t v9;

  v2 = (uint64_t *)(*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_22EF5CDF0(a2, *v2);
  v4 = (v3 - 8) > 0x38 || ((1 << (v3 - 8)) & 0x100000001000101) == 0;
  if (v4 && v3 != 128)
    return 0;
  v5 = *v2;
  if (sub_22F10E0EC(*v2))
    return 1;
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_DWORD *)(v6 + 16);
  if (v6)
    v8 = v7 == 11;
  else
    v8 = 0;
  if (v8)
  {
    if (((*(_DWORD *)(v6 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
      return 1;
  }
  else
  {
    if (v6 && v7 == 44)
    {
      v9 = sub_22F114198(*(_QWORD *)(v6 + 24));
      if ((*(_BYTE *)(v9 + 74) & 1) == 0 && *(_QWORD *)(v9 + 128) <= 7uLL
        || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v6 + 24)) + 76) & 0x80) != 0)
      {
        return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v2 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39;
      }
      return 1;
    }
    if (v7 == 9)
      return 1;
  }
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v2 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39;
}

void sub_22E5C3F38(uint64_t a1, const void *a2, size_t a3, char a4, const void *a5, size_t a6, const void *a7, size_t a8)
{
  void **v14;
  void **v15;
  _BYTE *v16;
  void **v17;
  void *v18;
  _BYTE *v19;
  void **v20;
  void *v21;
  _BYTE v23[24];
  uint64_t v24;
  void *v25[4];
  void *v26;
  __int128 v27;
  _QWORD v28[34];

  v28[32] = *MEMORY[0x24BDAC8D0];
  v14 = v25;
  v26 = v28;
  v27 = xmmword_22F44E320;
  sub_22F242C48((uint64_t)v23, (uint64_t)&v26);
  if (v24 - (unint64_t)v25[0] > 3)
  {
    *(_DWORD *)v25[0] = 1447516767;
    v16 = (char *)v25[0] + 4;
    v25[0] = (char *)v25[0] + 4;
    v15 = (void **)v23;
    v17 = v25;
  }
  else
  {
    v15 = (void **)llvm::raw_ostream::write((llvm::raw_ostream *)v23, "_ZGV");
    v17 = v15 + 4;
    v16 = v15[4];
  }
  if (v16 >= v15[3])
  {
    v15 = (void **)llvm::raw_ostream::write((llvm::raw_ostream *)v15);
  }
  else
  {
    *v17 = v16 + 1;
    *v16 = a4;
  }
  v18 = v15[4];
  if (a3 <= (_BYTE *)v15[3] - (_BYTE *)v18)
  {
    if (a3)
    {
      memcpy(v18, a2, a3);
      v15[4] = (char *)v15[4] + a3;
    }
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v15, (const char *)a2);
  }
  llvm::raw_ostream::operator<<();
  v19 = v25[0];
  if (a6 <= v24 - (unint64_t)v25[0])
  {
    if (a6)
    {
      memcpy(v25[0], a5, a6);
      v19 = (char *)v25[0] + a6;
      v25[0] = (char *)v25[0] + a6;
    }
    v20 = (void **)v23;
  }
  else
  {
    v20 = (void **)llvm::raw_ostream::write((llvm::raw_ostream *)v23, (const char *)a5);
    v14 = v20 + 4;
    v19 = v20[4];
  }
  if (v20[3] == v19)
  {
    v20 = (void **)llvm::raw_ostream::write((llvm::raw_ostream *)v20, "_");
  }
  else
  {
    *v19 = 95;
    *v14 = (char *)*v14 + 1;
  }
  v21 = v20[4];
  if (a8 <= (_BYTE *)v20[3] - (_BYTE *)v21)
  {
    if (a8)
    {
      memcpy(v21, a7, a8);
      v20[4] = (char *)v20[4] + a8;
    }
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v20, (const char *)a7);
  }
  llvm::Function::addFnAttr();
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v23);
  if (v26 != v28)
    free(v26);
}

void sub_22E5C41C0(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  char *v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 16;
      do
      {
        v7 = (char *)*((_QWORD *)v6 - 3);
        if (v6 != v7)
          free(v7);
        v8 = v6 - 32;
        v6 -= 48;
      }
      while (v8 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_22E5C4240(uint64_t result, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 320))
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 8) + 8))(*(_QWORD *)(result + 8));
  return result;
}

unint64_t sub_22E5C425C(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v5;
  unint64_t v7;

  v2 = a2;
  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = *(_QWORD *)a1 + 32 * v3;
    if (*(_QWORD *)a1 <= a2 && v5 > a2)
    {
      v7 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      return *(_QWORD *)a1 + v7;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
  }
  return v2;
}

unint64_t sub_22E5C42D0(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  unint64_t v5;
  unint64_t v7;

  v2 = a2;
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = *(_QWORD *)a1 + 272 * v3;
    if (*(_QWORD *)a1 <= a2 && v5 > a2)
    {
      v7 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      return *(_QWORD *)a1 + v7;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
  }
  return v2;
}

_QWORD *sub_22E5C4348(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 24 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F285168(a1, (uint64_t)v4, (uint64_t)v4 + 24 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(24 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      do
      {
        *result = -4096;
        result += 3;
        v11 -= 24;
      }
      while (v11);
    }
  }
  return result;
}

_QWORD *sub_22E5C4414(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 56 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    v12 = 56 * v3;
    sub_22F28536C(a1, (uint64_t)v4, (uint64_t)v4 + v12);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)v12);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 56 * v10;
      do
      {
        *result = -4096;
        result += 7;
        v11 -= 56;
      }
      while (v11);
    }
  }
  return result;
}

llvm::Value *sub_22E5C44E0(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t RuntimeFunction;
  llvm::Value *v11;
  _OWORD v13[3];
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  _OWORD v19[3];
  _QWORD v20[6];
  _QWORD v21[4];

  v21[3] = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)*a1;
  v5 = sub_22E59F964(*a1, a2, *(_DWORD *)(a1[1] + 12));
  v21[0] = sub_22E59F7E4(v4, a2, *(_DWORD *)(a1[1] + 12));
  v21[1] = v5;
  v20[0] = a1[2];
  v14 = 0;
  v6 = sub_22E3CED3C((uint64_t *)(a2 + 2904), v20, &v14);
  v7 = v14;
  if (!v6)
    v7 = *(_QWORD *)(a2 + 2904) + 56 * *(unsigned int *)(a2 + 2920);
  v8 = *(_OWORD *)(v7 + 24);
  v13[0] = *(_OWORD *)(v7 + 8);
  v13[1] = v8;
  v13[2] = *(_OWORD *)(v7 + 40);
  v9 = *(_QWORD *)(*(_QWORD *)(a1[2] + 48) & 0xFFFFFFFFFFFFFFF0);
  if (!v9 || *(_BYTE *)(v9 + 16) != 39)
    v9 = sub_22F10CF48(v9);
  sub_22F25FAEC(a2, v13, v9, (uint64_t)&v14);
  v19[0] = v15;
  v19[1] = v16;
  v19[2] = v17;
  sub_22E5E0440(a2, (uint64_t)v19, v18, v20);
  v21[2] = v20[0];
  RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
  WORD4(v16) = 257;
  return sub_22E479C7C(a2, RuntimeFunction, v11, (uint64_t)v21, 3, (uint64_t)&v14);
}

_QWORD *sub_22E5C4668(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](32 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F285514(a1, (uint64_t)v4, (uint64_t)v4 + 32 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(32 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        *result = -4096;
        result += 4;
        v11 -= 32;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22E5C4728(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 16 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v10 = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v8 = v6;
        v13 = v5 + v9++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 16 * (v13 & v4));
        v7 = *v6;
        v10 = 1;
        if (*v6 == a3)
          goto LABEL_7;
      }
      v10 = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    v10 = 0;
  }
LABEL_7:
  *a4 = v6;
  return v10;
}

void sub_22E5C47BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t RuntimeFunction;
  llvm::Value *v12;
  _WORD v13[20];
  void *v14;
  uint64_t v15;
  _QWORD v16[2];
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 808);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = (uint64_t *)(a2 + 272);
  llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 336), (llvm::LLVMContext *)a2);
  v7 = llvm::ConstantInt::get();
  v8 = *(_QWORD *)(a1 + 8);
  v9 = sub_22F27C820(v4);
  LOWORD(v17) = 257;
  v10 = sub_22E3C1740(v6, 49, v8, v9, (uint64_t)&v14);
  v14 = v16;
  v16[0] = v5;
  v16[1] = v7;
  v17 = v10;
  v15 = 0x1000000003;
  sub_22E5B5498((uint64_t)&v14, *(_BYTE **)(a1 + 16), (_BYTE *)(*(_QWORD *)(a1 + 16) + 8 * *(_QWORD *)(a1 + 24)));
  RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
  v13[16] = 257;
  sub_22E479C7C(a2, RuntimeFunction, v12, (uint64_t)v14, v15, (uint64_t)v13);
  if (v14 != v16)
    free(v14);
}

void sub_22E5C4900(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t RuntimeFunction;
  llvm::Value *v7;
  llvm::Type *v8;
  unint64_t v9;
  llvm::LLVMContext *v10;
  llvm::LLVMContext *v11;
  llvm::Type **v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  llvm::Value *v23;
  uint64_t v24;
  _BYTE v25[32];
  __int16 v26;
  _QWORD v27[3];
  int v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  char v32;
  _QWORD v33[2];
  void *v34;
  uint64_t v35;
  _BYTE v36[16];
  __int16 v37;
  _QWORD v38[4];

  v38[2] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD **)(*(_QWORD *)(a2 + 144) + 808);
  v5 = sub_22E59F964((uint64_t)v4, a2, *(_DWORD *)(a1 + 40));
  v38[0] = *(_QWORD *)(a1 + 32);
  v38[1] = v5;
  RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
  v37 = 257;
  sub_22E479C7C(a2, RuntimeFunction, v7, (uint64_t)v38, 2, (uint64_t)&v34);
  (*(void (**)(__int128 *__return_ptr, _QWORD *, uint64_t, _QWORD))(*v4 + 24))(&v31, v4, a2, *(unsigned int *)(a1 + 40));
  v8 = *(llvm::Type **)(a2 + 24);
  v34 = ".bound.zero.addr";
  v37 = 259;
  v9 = sub_22E4D84FC(a2, v8, (uint64_t)&v34);
  v11 = v10;
  llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 336), v10);
  v12 = (llvm::Type **)llvm::ConstantInt::get();
  v13 = 0;
  v14 = v9 & 0xFFFFFFFFFFFFFFF8;
  if (v9 <= 7)
    v15 = 0;
  else
    v15 = v9 & 0xFFFFFFFFFFFFFFF8;
  v16 = (unint64_t)v11 & 0xFFFFFFFFFFFFFFF8;
  if (v9 <= 7)
    v16 = 0;
  v27[0] = v15;
  v27[1] = v16;
  if (v9 >= 8)
    v13 = 1 << (v11 & 7 | (8 * (v9 & 7u)));
  v27[2] = v13;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  sub_22E3BEDDC(a2 + 272, v12, (uint64_t)v27);
  v34 = v36;
  v35 = 0x1000000000;
  if ((v32 & 3) != 0)
  {
    v18 = sub_22F28ABCC(&v31, (_QWORD *)a2);
    v17 = v35;
    if (v35 >= HIDWORD(v35))
    {
      v24 = v18;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v18 = v24;
      v17 = v35;
    }
  }
  else
  {
    v17 = 0;
    v18 = v31;
  }
  *((_QWORD *)v34 + v17) = v18;
  v19 = v35 + 1;
  LODWORD(v35) = v19;
  if (v19 >= HIDWORD(v35))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v19 = v35;
  }
  *((_QWORD *)v34 + v19) = v14;
  LODWORD(v35) = v35 + 1;
  sub_22E5B5498((uint64_t)&v34, *(_BYTE **)(a1 + 16), (_BYTE *)(*(_QWORD *)(a1 + 16) + 8 * *(_QWORD *)(a1 + 24)));
  llvm::Function::removeFnAttr();
  llvm::Function::addFnAttr();
  v20 = *(_QWORD *)(a1 + 8);
  if (v20)
    v21 = *(_QWORD *)(v20 + 24);
  else
    v21 = 0;
  (*(void (**)(_QWORD *, uint64_t, _QWORD, uint64_t))(*v4 + 568))(v4, a2, *(unsigned int *)(a1 + 40), v21);
  v33[0] = sub_22E59F7E4(v4, a2, *(_DWORD *)(a1 + 40));
  v33[1] = v5;
  v22 = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
  v26 = 257;
  sub_22E479C7C(a2, v22, v23, (uint64_t)v33, 2, (uint64_t)v25);
  if (v34 != v36)
    free(v34);
}

uint64_t sub_22E5C4C00(uint64_t a1, _DWORD *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t result;
  int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  int v25;
  BOOL v26;
  int v27;

  v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    v5 = (37 * *a2) & (v4 - 1);
    result = *(_QWORD *)a1 + 32 * v5;
    v7 = *(_DWORD *)result;
    if (*a2 == *(_DWORD *)result)
      return result;
    v8 = 0;
    v9 = 1;
    while (v7 != -1)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == -2;
      if (v10)
        v8 = result;
      v11 = v5 + v9++;
      v5 = v11 & (v4 - 1);
      result = *(_QWORD *)a1 + 32 * v5;
      v7 = *(_DWORD *)result;
      if (*a2 == *(_DWORD *)result)
        return result;
    }
    if (v8)
      result = v8;
  }
  else
  {
    result = 0;
  }
  v12 = *(_DWORD *)(a1 + 8);
  if (4 * v12 + 4 >= 3 * v4)
  {
    sub_22E5C4E0C(a1, 2 * v4);
    v13 = *(_DWORD *)(a1 + 16);
    if (v13)
    {
      v14 = v13 - 1;
      v15 = (37 * *a2) & v14;
      result = *(_QWORD *)a1 + 32 * v15;
      v16 = *(_DWORD *)result;
      if (*a2 == *(_DWORD *)result)
        goto LABEL_15;
      v17 = 0;
      v18 = 1;
      while (v16 != -1)
      {
        if (v17)
          v19 = 0;
        else
          v19 = v16 == -2;
        if (v19)
          v17 = result;
        v20 = v15 + v18++;
        v15 = v20 & v14;
        result = *(_QWORD *)a1 + 32 * v15;
        v16 = *(_DWORD *)result;
        if (*a2 == *(_DWORD *)result)
          goto LABEL_15;
      }
LABEL_45:
      if (v17)
        result = v17;
      goto LABEL_15;
    }
LABEL_44:
    result = 0;
    goto LABEL_15;
  }
  if (v4 + ~v12 - *(_DWORD *)(a1 + 12) <= v4 >> 3)
  {
    sub_22E5C4E0C(a1, v4);
    v21 = *(_DWORD *)(a1 + 16);
    if (v21)
    {
      v22 = v21 - 1;
      v23 = (37 * *a2) & v22;
      result = *(_QWORD *)a1 + 32 * v23;
      v24 = *(_DWORD *)result;
      if (*a2 == *(_DWORD *)result)
        goto LABEL_15;
      v17 = 0;
      v25 = 1;
      while (v24 != -1)
      {
        if (v17)
          v26 = 0;
        else
          v26 = v24 == -2;
        if (v26)
          v17 = result;
        v27 = v23 + v25++;
        v23 = v27 & v22;
        result = *(_QWORD *)a1 + 32 * v23;
        v24 = *(_DWORD *)result;
        if (*a2 == *(_DWORD *)result)
          goto LABEL_15;
      }
      goto LABEL_45;
    }
    goto LABEL_44;
  }
LABEL_15:
  ++*(_DWORD *)(a1 + 8);
  if (*(_DWORD *)result != -1)
    --*(_DWORD *)(a1 + 12);
  *(_DWORD *)result = *a2;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

_DWORD *sub_22E5C4E0C(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;
  llvm *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  uint64_t v25;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_DWORD *)MEMORY[0x23489D23C](32 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        *result = -1;
        result += 8;
        v11 -= 32;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = v4;
      do
      {
        v13 = *(_DWORD *)v12;
        if (*(_DWORD *)v12 <= 0xFFFFFFFD)
        {
          v14 = *(_DWORD *)(a1 + 16) - 1;
          v15 = v14 & (37 * v13);
          v16 = *(_QWORD *)a1 + 32 * v15;
          v17 = *(_DWORD *)v16;
          if (v13 != *(_DWORD *)v16)
          {
            v20 = 0;
            v21 = 1;
            while (v17 != -1)
            {
              if (v20)
                v22 = 0;
              else
                v22 = v17 == -2;
              if (v22)
                v20 = v16;
              v23 = v15 + v21++;
              v15 = v23 & v14;
              v16 = *(_QWORD *)a1 + 32 * v15;
              v17 = *(_DWORD *)v16;
              if (v13 == *(_DWORD *)v16)
                goto LABEL_14;
            }
            if (v20)
              v16 = v20;
          }
LABEL_14:
          *(_DWORD *)v16 = v13;
          *(_QWORD *)(v16 + 8) = 0;
          *(_QWORD *)(v16 + 16) = 0;
          *(_DWORD *)(v16 + 24) = 0;
          *(_QWORD *)(v16 + 8) = *((_QWORD *)v12 + 1);
          *((_QWORD *)v12 + 1) = 0;
          *(_DWORD *)(v16 + 16) = *((_DWORD *)v12 + 4);
          *((_DWORD *)v12 + 4) = 0;
          v18 = *(_DWORD *)(v16 + 20);
          *(_DWORD *)(v16 + 20) = *((_DWORD *)v12 + 5);
          *((_DWORD *)v12 + 5) = v18;
          v19 = *(_DWORD *)(v16 + 24);
          *(_DWORD *)(v16 + 24) = *((_DWORD *)v12 + 6);
          *((_DWORD *)v12 + 6) = v19;
          ++*(_DWORD *)(a1 + 8);
          sub_22F284DC4((uint64_t)v12 + 8);
        }
        v12 = (llvm *)((char *)v12 + 32);
      }
      while (v12 != (llvm *)((char *)v4 + 32 * v3));
    }
    return (_DWORD *)llvm::deallocate_buffer(v4, (void *)(32 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v24 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v24)
    {
      v25 = 32 * v24;
      do
      {
        *result = -1;
        result += 8;
        v25 -= 32;
      }
      while (v25);
    }
  }
  return result;
}

_DWORD *sub_22E5C4FE8(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 40 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F2857C4(a1, (uint64_t)v4, (uint64_t)v4 + 40 * v3);
    return (_DWORD *)llvm::deallocate_buffer(v4, (void *)(40 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 40 * v10;
      do
      {
        *result = -1;
        result += 10;
        v11 -= 40;
      }
      while (v11);
    }
  }
  return result;
}

_DWORD *sub_22E5C50B4(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 56 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    v12 = 56 * v3;
    sub_22F285B5C(a1, (uint64_t)v4, (uint64_t)v4 + v12);
    return (_DWORD *)llvm::deallocate_buffer(v4, (void *)v12);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 56 * v10;
      do
      {
        *result = -1;
        result += 14;
        v11 -= 56;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22E5C5180(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;

  v7 = result;
  if (*(unsigned int *)(result + 12) >= a2)
  {
    v10 = *(unsigned int *)(result + 8);
    if (v10 >= a2)
      v11 = a2;
    else
      v11 = *(unsigned int *)(result + 8);
    if (v11)
    {
      v12 = *(_QWORD **)result;
      do
      {
        *v12 = a3;
        v12[1] = a4;
        v12 += 2;
        --v11;
      }
      while (v11);
    }
    v13 = v10 - a2;
    if (v10 < a2)
    {
      v14 = (_QWORD *)(*(_QWORD *)result + 16 * v10);
      do
      {
        *v14 = a3;
        v14[1] = a4;
        v14 += 2;
      }
      while (!__CFADD__(v13++, 1));
    }
  }
  else
  {
    *(_DWORD *)(result + 8) = 0;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(_QWORD **)v7;
    v9 = a2;
    do
    {
      *v8 = a3;
      v8[1] = a4;
      v8 += 2;
      --v9;
    }
    while (v9);
  }
  *(_DWORD *)(v7 + 8) = a2;
  return result;
}

uint64_t sub_22E5C5234(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  llvm::MDString::get();
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  v8 = **(_QWORD **)(a1 + 8) + 32 * *(unsigned int *)(a4 + 28);
  *(_QWORD *)v8 = a4;
  *(_DWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  llvm::MDTuple::getImpl();
  return llvm::NamedMDNode::addOperand();
}

void sub_22E5C5360(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

uint64_t *sub_22E5C536C(uint64_t *result)
{
  char v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  v1 = *((_BYTE *)result + 8);
  v2 = *result;
  *result = 0;
  if ((v1 & 1) != 0)
  {
    if (v2)
    {
      v3 = result;
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
      return v3;
    }
  }
  else if (v2)
  {
    v5 = result;
    v4 = v2;
    MEMORY[0x23489F15C](v2);
    MEMORY[0x2348A0E9C](v4, 0x10B2C407FF26C1CLL);
    return v5;
  }
  return result;
}

uint64_t sub_22E5C53F0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v1 = *(uint64_t **)a1;
  v2 = *(unsigned int *)(a1 + 8);
  i = *(uint64_t **)a1;
  if ((_DWORD)v2)
  {
    v4 = 8 * v2;
    for (i = *(uint64_t **)a1; *(_WORD *)(*i + 32) != 243; ++i)
    {
      v4 -= 8;
      if (!v4)
        return 0;
    }
  }
  if (i == &v1[v2])
    return 0;
  do
  {
    v6 = *v1++;
    result = v6;
  }
  while (*(_WORD *)(v6 + 32) != 243);
  return result;
}

double sub_22E5C5450(uint64_t a1, _QWORD *a2, unint64_t a3, uint64_t *a4, uint64_t a5, __n128 a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  _QWORD *v27;
  __n128 v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  __n128 *v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v42;
  __int128 v43;

  if (a3 >= 2)
  {
    v7 = a1;
    if (a3 == 2)
    {
      v8 = *(a2 - 5);
      v9 = *(_QWORD *)a1;
      if (v8 > *(_QWORD *)a1)
      {
        *(_QWORD *)a1 = v8;
        *(a2 - 5) = v9;
        a6 = *(__n128 *)(a1 + 24);
        v10 = *(_OWORD *)(a1 + 8);
        v11 = *((_OWORD *)a2 - 1);
        *(_OWORD *)(a1 + 8) = *((_OWORD *)a2 - 2);
        *(_OWORD *)(a1 + 24) = v11;
        *((_OWORD *)a2 - 2) = v10;
        *((__n128 *)a2 - 1) = a6;
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if ((_QWORD *)a1 != a2)
      {
        v18 = a1 + 40;
        if ((_QWORD *)(a1 + 40) != a2)
        {
          v19 = 0;
          v20 = a1;
          do
          {
            v21 = v18;
            v22 = *(_QWORD *)(v20 + 40);
            if (v22 > *(_QWORD *)v20)
            {
              v42 = *(_OWORD *)(v20 + 48);
              v43 = *(_OWORD *)(v20 + 64);
              v23 = *(_QWORD *)v20;
              v24 = v19;
              while (1)
              {
                v25 = a1 + v24;
                *(_QWORD *)(v25 + 40) = v23;
                v26 = *(_OWORD *)(a1 + v24 + 24);
                *(_OWORD *)(v25 + 48) = *(_OWORD *)(a1 + v24 + 8);
                *(_OWORD *)(v25 + 64) = v26;
                if (!v24)
                  break;
                v23 = *(_QWORD *)(v25 - 40);
                v24 -= 40;
                if (v22 <= v23)
                {
                  v27 = (_QWORD *)(a1 + v24 + 40);
                  goto LABEL_18;
                }
              }
              v27 = (_QWORD *)a1;
LABEL_18:
              *v27 = v22;
              a6.n128_u64[0] = v42;
              *(_OWORD *)(v25 + 8) = v42;
              *(_OWORD *)(v25 + 24) = v43;
            }
            v18 = v21 + 40;
            v19 += 40;
            v20 = v21;
          }
          while ((_QWORD *)(v21 + 40) != a2);
        }
      }
    }
    else
    {
      v14 = (uint64_t)a4;
      v15 = a3 >> 1;
      v16 = (_QWORD *)(a1 + 40 * (a3 >> 1));
      v17 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        v28 = sub_22E5C5708(a1, v16, v17, a4, a6);
        v29 = (uint64_t *)(v14 + 40 * v15);
        a6.n128_u64[0] = sub_22E5C5708(v7 + 40 * (a3 >> 1), a2, a3 - (a3 >> 1), v29, v28).n128_u64[0];
        v30 = v14 + 40 * a3;
        v31 = v29;
        while (v31 != (uint64_t *)v30)
        {
          v32 = (__n128 *)(v7 + 8);
          if (*v31 <= *(_QWORD *)v14)
          {
            *(_QWORD *)v7 = *(_QWORD *)v14;
            a6 = *(__n128 *)(v14 + 8);
            v34 = *(_OWORD *)(v14 + 24);
            *v32 = a6;
            *(_OWORD *)(v7 + 24) = v34;
            v14 += 40;
          }
          else
          {
            *(_QWORD *)v7 = *v31;
            a6 = *(__n128 *)(v31 + 1);
            v33 = *(_OWORD *)(v31 + 3);
            *v32 = a6;
            *(_OWORD *)(v7 + 24) = v33;
            v31 += 5;
          }
          v7 += 40;
          if ((uint64_t *)v14 == v29)
          {
            if (v31 != (uint64_t *)v30)
            {
              v35 = 0;
              do
              {
                v36 = &v31[v35];
                v37 = v7 + v35 * 8;
                *(_QWORD *)v37 = v31[v35];
                a6 = *(__n128 *)&v31[v35 + 1];
                *(_OWORD *)(v37 + 24) = *(_OWORD *)&v31[v35 + 3];
                *(__n128 *)(v37 + 8) = a6;
                v35 += 5;
              }
              while (v36 + 5 != (uint64_t *)v30);
            }
            return a6.n128_f64[0];
          }
        }
        if ((uint64_t *)v14 != v29)
        {
          v38 = 0;
          do
          {
            v39 = v7 + v38;
            v40 = v14 + v38;
            *(_QWORD *)v39 = *(_QWORD *)(v14 + v38);
            a6 = *(__n128 *)(v14 + v38 + 8);
            *(_OWORD *)(v39 + 24) = *(_OWORD *)(v14 + v38 + 24);
            *(__n128 *)(v39 + 8) = a6;
            v38 += 40;
          }
          while ((uint64_t *)(v40 + 40) != v29);
        }
      }
      else
      {
        sub_22E5C5450(a1, v16, v17, a4, a5);
        sub_22E5C5450(v7 + 40 * (a3 >> 1), a2, a3 - (a3 >> 1), v14, a5);
        a6.n128_u64[0] = sub_22E5C5998((_QWORD *)v7, (_QWORD *)(v7 + 40 * (a3 >> 1)), a2, a3 >> 1, a3 - (a3 >> 1), v14, a5).n128_u64[0];
      }
    }
  }
  return a6.n128_f64[0];
}

__n128 sub_22E5C5708(uint64_t a1, _QWORD *a2, unint64_t a3, uint64_t *a4, __n128 result)
{
  uint64_t *v5;
  _QWORD *v8;
  __int128 v9;
  __n128 *v10;
  __n128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __n128 v28;
  __int128 v29;
  _QWORD *v30;
  _QWORD *v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t *v35;
  __int128 v36;
  uint64_t v37;
  uint64_t *v38;
  __int128 v39;

  if (a3)
  {
    v5 = a4;
    v8 = (_QWORD *)a1;
    if (a3 == 2)
    {
      v10 = (__n128 *)(a2 - 5);
      if (*(a2 - 5) <= *(_QWORD *)a1)
      {
        v28 = *(__n128 *)a1;
        v29 = *(_OWORD *)(a1 + 16);
        a4[4] = *(_QWORD *)(a1 + 32);
        *(__n128 *)a4 = v28;
        *((_OWORD *)a4 + 1) = v29;
        result = *v10;
        v13 = *(_OWORD *)(a2 - 3);
        v14 = *(a2 - 1);
      }
      else
      {
        v11 = *v10;
        v12 = *(_OWORD *)(a2 - 3);
        a4[4] = *(a2 - 1);
        *(__n128 *)a4 = v11;
        *((_OWORD *)a4 + 1) = v12;
        result = *(__n128 *)a1;
        v13 = *(_OWORD *)(a1 + 16);
        v14 = *(_QWORD *)(a1 + 32);
      }
      a4[9] = v14;
      *(__n128 *)(a4 + 5) = result;
      *(_OWORD *)(a4 + 7) = v13;
    }
    else if (a3 == 1)
    {
      result = *(__n128 *)a1;
      v9 = *(_OWORD *)(a1 + 16);
      a4[4] = *(_QWORD *)(a1 + 32);
      *(__n128 *)a4 = result;
      *((_OWORD *)a4 + 1) = v9;
    }
    else if ((uint64_t)a3 > 8)
    {
      v30 = (_QWORD *)(a1 + 40 * (a3 >> 1));
      sub_22E5C5450(a1, v30, a3 >> 1, a4, a3 >> 1);
      sub_22E5C5450(&v8[5 * (a3 >> 1)], a2, a3 - (a3 >> 1), &v5[5 * (a3 >> 1)], a3 - (a3 >> 1));
      v31 = &v8[5 * (a3 >> 1)];
      while (v31 != a2)
      {
        if (*v31 <= *v8)
        {
          result = *(__n128 *)v8;
          v33 = *((_OWORD *)v8 + 1);
          v5[4] = v8[4];
          *(__n128 *)v5 = result;
          *((_OWORD *)v5 + 1) = v33;
          v8 += 5;
        }
        else
        {
          result = *(__n128 *)v31;
          v32 = *((_OWORD *)v31 + 1);
          v5[4] = v31[4];
          *(__n128 *)v5 = result;
          *((_OWORD *)v5 + 1) = v32;
          v31 += 5;
        }
        v5 += 5;
        if (v8 == v30)
        {
          if (v31 != a2)
          {
            v34 = 0;
            do
            {
              v35 = &v5[v34];
              result = *(__n128 *)&v31[v34];
              v36 = *(_OWORD *)&v31[v34 + 2];
              v35[4] = v31[v34 + 4];
              *(__n128 *)v35 = result;
              *((_OWORD *)v35 + 1) = v36;
              v34 += 5;
            }
            while (&v31[v34] != a2);
          }
          return result;
        }
      }
      if (v8 != v30)
      {
        v37 = 0;
        do
        {
          v38 = &v5[v37];
          result = *(__n128 *)&v8[v37];
          v39 = *(_OWORD *)&v8[v37 + 2];
          v38[4] = v8[v37 + 4];
          *(__n128 *)v38 = result;
          *((_OWORD *)v38 + 1) = v39;
          v37 += 5;
        }
        while (&v8[v37] != v30);
      }
    }
    else if ((_QWORD *)a1 != a2)
    {
      result = *(__n128 *)a1;
      v15 = *(_OWORD *)(a1 + 16);
      a4[4] = *(_QWORD *)(a1 + 32);
      *(__n128 *)a4 = result;
      *((_OWORD *)a4 + 1) = v15;
      v16 = (_QWORD *)(a1 + 40);
      if ((_QWORD *)(a1 + 40) != a2)
      {
        v17 = 0;
        v18 = a4;
        v19 = a4;
        do
        {
          v20 = v16;
          v21 = *v19;
          v19 += 5;
          if (v8[5] <= v21)
          {
            result = *(__n128 *)v16;
            v27 = *((_OWORD *)v16 + 1);
            v19[4] = v16[4];
            *(__n128 *)v19 = result;
            *((_OWORD *)v19 + 1) = v27;
          }
          else
          {
            v22 = *((_OWORD *)v18 + 1);
            *(_OWORD *)v19 = *(_OWORD *)v18;
            *((_OWORD *)v19 + 1) = v22;
            v19[4] = v18[4];
            v23 = a4;
            if (v18 != a4)
            {
              v24 = v17;
              while (1)
              {
                v23 = (uint64_t *)((char *)a4 + v24);
                v25 = *(uint64_t *)((char *)a4 + v24 - 40);
                if (*v20 <= v25)
                  break;
                *v23 = v25;
                v26 = *((_OWORD *)v23 - 1);
                *(_OWORD *)(v23 + 1) = *((_OWORD *)v23 - 2);
                *(_OWORD *)(v23 + 3) = v26;
                v24 -= 40;
                if (!v24)
                {
                  v23 = a4;
                  break;
                }
              }
            }
            *v23 = *v20;
            result = *((__n128 *)v8 + 3);
            *(_OWORD *)(v23 + 3) = *((_OWORD *)v8 + 4);
            *(__n128 *)(v23 + 1) = result;
          }
          v16 = v20 + 5;
          v17 += 40;
          v18 = v19;
          v8 = v20;
        }
        while (v20 + 5 != a2);
      }
    }
  }
  return result;
}

__n128 sub_22E5C5998(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  __int128 v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __n128 result;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __n128 *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  __n128 *v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  __n128 *v63;
  __int128 v64;
  __int128 v65;
  _QWORD *v66;
  __int128 v67;
  unint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __n128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;

  if (a5)
  {
    while (a4 > a7 && a5 > a7)
    {
      if (!a4)
        return result;
      v8 = 0;
      v9 = *a2;
      v10 = -a4;
      while (1)
      {
        v11 = a1[v8];
        if (v9 > v11)
          break;
        v8 += 5;
        if (__CFADD__(v10++, 1))
          return result;
      }
      v13 = &a1[v8];
      if (-v10 >= a5)
      {
        if (v10 == -1)
        {
          v66 = &a1[v8];
          *v66 = v9;
          *a2 = v11;
          v75 = *(__n128 *)&a1[v8 + 1];
          v78 = *(_OWORD *)&a1[v8 + 3];
          v67 = *(_OWORD *)(a2 + 1);
          *(_OWORD *)(v66 + 3) = *(_OWORD *)(a2 + 3);
          *(_OWORD *)(v66 + 1) = v67;
          result = v75;
          *(_OWORD *)(a2 + 3) = v78;
          *(__n128 *)(a2 + 1) = v75;
          return result;
        }
        if (v10 <= 0)
          v24 = -v10;
        else
          v24 = 1 - v10;
        v23 = v24 >> 1;
        v17 = &a1[5 * (v24 >> 1) + v8];
        v16 = a3;
        if (a3 != a2)
        {
          v25 = 0xCCCCCCCCCCCCCCCDLL * (a3 - a2);
          v16 = a2;
          do
          {
            v26 = v25 >> 1;
            v27 = &v16[5 * (v25 >> 1)];
            v29 = *v27;
            v28 = v27 + 5;
            v25 += ~(v25 >> 1);
            if (v29 > *v17)
              v16 = v28;
            else
              v25 = v26;
          }
          while (v25);
        }
        v15 = 0xCCCCCCCCCCCCCCCDLL * (v16 - a2);
      }
      else
      {
        if (a5 >= 0)
          v14 = a5;
        else
          v14 = a5 + 1;
        v15 = v14 >> 1;
        v16 = &a2[5 * (v14 >> 1)];
        v17 = a2;
        if (v13 != a2)
        {
          v18 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)a1 - v8 * 8) >> 3);
          v17 = &a1[v8];
          do
          {
            v19 = v18 >> 1;
            v20 = &v17[5 * (v18 >> 1)];
            v22 = *v20;
            v21 = v20 + 5;
            v18 += ~(v18 >> 1);
            if (*v16 > v22)
              v18 = v19;
            else
              v17 = v21;
          }
          while (v18);
        }
        v23 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v17 - (char *)a1 - v8 * 8) >> 3);
      }
      v30 = v16;
      if (v17 != a2)
      {
        v30 = v17;
        if (a2 != v16)
        {
          v31 = v17 + 5;
          v30 = a2;
          while (1)
          {
            v32 = *(v31 - 5);
            *(v31 - 5) = v9;
            *a2 = v32;
            v73 = *((_OWORD *)v31 - 2);
            v76 = *((_OWORD *)v31 - 1);
            v33 = *(_OWORD *)(a2 + 3);
            *((_OWORD *)v31 - 2) = *(_OWORD *)(a2 + 1);
            *((_OWORD *)v31 - 1) = v33;
            *(_OWORD *)(a2 + 3) = v76;
            *(_OWORD *)(a2 + 1) = v73;
            a2 += 5;
            if (a2 == v16)
              break;
            if (v31 == v30)
              v30 = a2;
            v9 = *a2;
            v31 += 5;
          }
          if (v31 != v30)
          {
            v34 = v31;
            v35 = v30;
            do
            {
              while (1)
              {
                v36 = *v34;
                *v34 = *v30;
                *v30 = v36;
                v74 = *(_OWORD *)(v34 + 1);
                v77 = *(_OWORD *)(v34 + 3);
                v37 = *(_OWORD *)(v30 + 1);
                *(_OWORD *)(v34 + 3) = *(_OWORD *)(v30 + 3);
                *(_OWORD *)(v34 + 1) = v37;
                *(_OWORD *)(v30 + 3) = v77;
                *(_OWORD *)(v30 + 1) = v74;
                v34 += 5;
                v30 += 5;
                if (v30 == v16)
                  break;
                if (v34 == v35)
                  v35 = v30;
              }
              v30 = v35;
            }
            while (v34 != v35);
            v30 = v31;
          }
        }
      }
      a4 = -(v23 + v10);
      v38 = a5 - v15;
      if (v23 + v15 >= a5 - (v23 + v15) - v10)
      {
        v46 = v16;
        v47 = a6;
        v48 = a7;
        sub_22E5C5998(v30, v46, a3, a4, a5 - v15);
        a7 = v48;
        a1 = v13;
        a6 = v47;
        v16 = v17;
        v38 = v15;
        a4 = v23;
        a3 = v30;
      }
      else
      {
        v39 = v13;
        v40 = v17;
        v41 = a3;
        v42 = v15;
        v43 = a6;
        v44 = a7;
        sub_22E5C5998(v39, v40, v30, v23, v42);
        a7 = v44;
        a3 = v41;
        a6 = v43;
        a1 = v30;
      }
      a5 = v38;
      a2 = v16;
      if (!v38)
        return result;
    }
    if (a4 <= a5)
    {
      if (a1 != a2)
      {
        v58 = 0;
        do
        {
          v59 = a6 + v58 * 8;
          result = *(__n128 *)&a1[v58];
          v60 = *(_OWORD *)&a1[v58 + 2];
          *(_QWORD *)(v59 + 32) = a1[v58 + 4];
          *(__n128 *)v59 = result;
          *(_OWORD *)(v59 + 16) = v60;
          v58 += 5;
        }
        while (&a1[v58] != a2);
        if (v58 * 8)
        {
          v61 = a6 + v58 * 8;
          v62 = a6 + v58 * 8 - 40;
          while (a2 != a3)
          {
            v63 = (__n128 *)(a1 + 1);
            if (*a2 <= *(_QWORD *)a6)
            {
              *a1 = *(_QWORD *)a6;
              result = *(__n128 *)(a6 + 8);
              v65 = *(_OWORD *)(a6 + 24);
              *v63 = result;
              *(_OWORD *)(a1 + 3) = v65;
              a6 += 40;
            }
            else
            {
              *a1 = *a2;
              result = *(__n128 *)(a2 + 1);
              v64 = *(_OWORD *)(a2 + 3);
              *v63 = result;
              *(_OWORD *)(a1 + 3) = v64;
              a2 += 5;
            }
            a1 += 5;
            if (v61 == a6)
              return result;
          }
          if (v61 != a6)
          {
            v70 = 0;
            do
            {
              v71 = &a1[v70 / 8];
              v72 = a6 + v70;
              *v71 = *(_QWORD *)(a6 + v70);
              result = *(__n128 *)(a6 + v70 + 8);
              *(_OWORD *)(v71 + 3) = *(_OWORD *)(a6 + v70 + 24);
              *(__n128 *)(v71 + 1) = result;
              v70 += 40;
            }
            while (v62 != v72);
          }
        }
      }
    }
    else if (a2 != a3)
    {
      v49 = 0;
      do
      {
        v50 = a6 + v49 * 8;
        result = *(__n128 *)&a2[v49];
        v51 = *(_OWORD *)&a2[v49 + 2];
        *(_QWORD *)(v50 + 32) = a2[v49 + 4];
        *(__n128 *)v50 = result;
        *(_OWORD *)(v50 + 16) = v51;
        v49 += 5;
      }
      while (&a2[v49] != a3);
      if (v49 * 8)
      {
        v52 = (__n128 *)(a6 + v49 * 8);
        v53 = a3 - 5;
        while (a2 != a1)
        {
          v54 = v52[-3].n128_i64[1];
          v55 = *(a2 - 5);
          v56 = v54 <= v55;
          if (v54 >= v55)
            v54 = *(a2 - 5);
          if (v56)
            v57 = v52;
          else
            v57 = (__n128 *)a2;
          if (v56)
            v52 = (__n128 *)((char *)v52 - 40);
          else
            a2 -= 5;
          *v53 = v54;
          result = v57[-2];
          *(__n128 *)(v53 + 3) = v57[-1];
          *(__n128 *)(v53 + 1) = result;
          v53 -= 5;
          if (v52 == (__n128 *)a6)
            return result;
        }
        if (v52 != (__n128 *)a6)
        {
          v68 = 0;
          do
          {
            v69 = &v53[v68 / 8];
            *v69 = *(_QWORD *)((char *)&v52[-2] + v68 - 8);
            result = *(__n128 *)((char *)v52 + v68 - 32);
            *(__n128 *)(v69 + 3) = *(__n128 *)((char *)v52 + v68 - 16);
            *(__n128 *)(v69 + 1) = result;
            v68 -= 40;
          }
          while ((__n128 *)((char *)v52 + v68) != (__n128 *)a6);
        }
      }
    }
  }
  return result;
}

_DWORD *sub_22E5C5E7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  llvm::LLVMContext *v11;
  uint64_t v12;
  uint64_t RuntimeFunction;
  llvm::Value *v14;
  llvm::Value *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  llvm::Value *v19;
  uint64_t v20;
  uint64_t v21;
  llvm::Value *v22;
  llvm::Value *v23;
  _DWORD *result;
  _OWORD v25[8];
  uint64_t v26;
  _OWORD v27[8];
  uint64_t v28;
  _OWORD v29[2];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v4 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v4 + 884))
  {
    v5 = sub_22EFC3B90(*(_QWORD *)(a1 + 152));
    v6 = 2;
    do
    {
      do
        v5 = *(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v5 && (*(_DWORD *)(v5 + 28) & 0x7Fu) - 49 > 2);
    }
    while (v6-- > 1);
    v8 = *(_OWORD *)(a1 + 112);
    v27[5] = *(_OWORD *)(a1 + 96);
    v27[6] = v8;
    v27[7] = *(_OWORD *)(a1 + 128);
    v28 = *(_QWORD *)(a1 + 144);
    v9 = *(_OWORD *)(a1 + 48);
    v27[1] = *(_OWORD *)(a1 + 32);
    v27[2] = v9;
    v10 = *(_OWORD *)(a1 + 80);
    v27[3] = *(_OWORD *)(a1 + 64);
    v27[4] = v10;
    v27[0] = *(_OWORD *)(a1 + 16);
    sub_22E4DD05C(a2, (uint64_t)v27, v5, (uint64_t)v29);
    llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 336), v11);
    v12 = llvm::ConstantInt::get();
    v25[6] = v34;
    v25[7] = v35;
    v26 = v36;
    v25[2] = v30;
    v25[3] = v31;
    v25[4] = v32;
    v25[5] = v33;
    v25[0] = v29[0];
    v25[1] = v29[1];
    sub_22E4E87FC(a2, v12, (uint64_t)v25, 0);
    v4 = *(_QWORD *)(a1 + 8);
  }
  if (*(_DWORD *)(v4 + 584))
  {
    RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
    v15 = v14;
    v16 = *(_QWORD *)(a1 + 168);
    LOWORD(v30) = 257;
    v17 = a2;
    v18 = RuntimeFunction;
    v19 = v15;
    v20 = 7;
  }
  else
  {
    v21 = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
    v23 = v22;
    v16 = *(_QWORD *)(a1 + 160);
    LOWORD(v30) = 257;
    v17 = a2;
    v18 = v21;
    v19 = v23;
    v20 = 3;
  }
  sub_22E479C7C(v17, v18, v19, v16, v20, (uint64_t)v29);
  result = *(_DWORD **)(a2 + 1856);
  if (result)
  {
    if (result[2] == 2)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)result + 80))(result, a2);
  }
  return result;
}

void sub_22E5C6030(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t RuntimeFunction;
  uint64_t v9;
  llvm::Value *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[4];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  _QWORD v26[3];
  uint64_t v27;
  __int128 v28;
  int v29;

  v4 = *(_QWORD *)(a2 + 1992) - *(_QWORD *)(a2 + 2000);
  v5 = *(_QWORD *)(a2 + 2312);
  v6 = *(_BYTE *)(a2 + 2893);
  *(_BYTE *)(a2 + 2893) = 0;
  v7 = *(_QWORD *)(a2 + 2872);
  *(_QWORD *)(a2 + 2872) = v4;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 48) + 584))
  {
    RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
    v9 = *(_QWORD *)(a1 + 56);
    LOWORD(v19) = 257;
    sub_22E479C7C(a2, RuntimeFunction, v10, v9, 6, (uint64_t)v18);
  }
  v27 = *(_QWORD *)(a1 + 40);
  v28 = *(_OWORD *)(a1 + 24);
  v29 = *(_DWORD *)(a1 + 64);
  v26[0] = &v27;
  v26[1] = sub_22E5C6198;
  v11 = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
  v13 = v12;
  v14 = *(_QWORD *)(a1 + 16);
  v15 = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
  v16 = *(_QWORD *)(a1 + 16);
  v18[0] = off_24FA65C78;
  v18[1] = v11;
  v18[2] = v13;
  v18[3] = v14;
  v19 = 3;
  v20 = v15;
  v21 = v17;
  v22 = v16;
  v23 = 3;
  v24 = 0;
  v25 = 0;
  v26[2] = v18;
  sub_22F27B464(v26, a2);
  *(_BYTE *)(a2 + 2893) = v6;
  sub_22E48B274((_QWORD *)a2, v4, v5, 0, 0);
  *(_QWORD *)(a2 + 2872) = v7;
}

uint64_t sub_22E5C6198(unsigned int *a1, uint64_t a2, void (***a3)(_QWORD))
{
  uint64_t v5;

  (**a3)(a3);
  if (*(_QWORD *)a1)
    v5 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  else
    v5 = 0;
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a2 + 144) + 808)
                                                                     + 568))(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 808), a2, a1[6], v5);
}

int32x2_t sub_22E5C623C(unsigned __int8 **a1, _QWORD *a2)
{
  return sub_22E5AE654(a2, *a1);
}

int32x2_t sub_22E5C624C(unsigned __int8 **a1, _QWORD *a2)
{
  return sub_22E5AE654(a2, *a1);
}

void sub_22E5C625C(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v2;
  unsigned __int8 **v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = a1[7];
  if (v2)
  {
    v4 = (unsigned __int8 **)a1[6];
    v5 = a1[4];
    v6 = a1[2];
    v7 = 8 * (_QWORD)v2;
    v8 = *a1;
    do
    {
      v10 = *v4++;
      v9 = v10;
      v12 = *v8++;
      v11 = v12;
      v14 = *v6++;
      v13 = v14;
      v15 = *v5++;
      sub_22F28070C((uint64_t)a1, a2, v9, v11, v13, v15);
      v7 -= 8;
    }
    while (v7);
  }
}

void sub_22E5C62C4(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _BYTE **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  _BYTE *v9;
  unsigned __int8 *v10;
  unsigned int *v11;
  unsigned __int8 *v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  __int128 *p_p;
  uint64_t v30;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  _QWORD v36[3];
  unsigned int v37;
  _OWORD v38[3];
  char v39;
  __int128 v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  __int128 v47;
  __int128 v48;
  __int128 __p;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 64);
  if (v2)
  {
    v4 = *(_BYTE ***)(a1 + 56);
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 24);
    for (i = 8 * v2; i; i -= 8)
    {
      v9 = *v4;
      if ((**v4 & 0xFE) == 0x70 && (*(_DWORD *)v9 & 0xFC0000) == 0x540000)
      {
        v11 = (unsigned int *)*((_QWORD *)v9 + 2);
        v10 = (unsigned __int8 *)*((_QWORD *)v9 + 3);
        if (!v10)
          goto LABEL_17;
        v12 = sub_22EFFA6B0(*((unsigned __int8 **)v9 + 3));
        v13 = *v12;
        v14 = v10;
        if ((v13 & 0xFE) == 0x66)
        {
          v15 = 32;
          if (v13 == 103)
            v15 = 24;
          v14 = *(unsigned __int8 **)&v12[v15];
        }
        v16 = sub_22EFFA6B0(v14);
        if ((*v16 & 0xFE) == 0x70)
        {
          v17 = *((_QWORD *)v16 + 3);
          v18 = (*(_DWORD *)v16 >> 18) & 0x3F;
          if (v11)
            goto LABEL_18;
        }
        else
        {
LABEL_17:
          v17 = 0;
          v18 = 32;
          if (v11)
          {
LABEL_18:
            v20 = *(_QWORD *)(*(_QWORD *)v7 + 16);
            v32 = v18;
            v33 = v20;
            v34 = *(_DWORD *)a1;
            v19 = *(_QWORD *)(*(_QWORD *)v5 + 8);
            if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                            + 16) & 0xFEu)
               - 2 > 3)
            {
              sub_22E4D8D7C((uint64_t)a2, v11, (uint64_t)&__p);
              if (v17)
              {
                v41 = 0;
                v40 = 0uLL;
                v42 = 0;
                v44 = 0;
                v45 = 0;
                v43 = 0;
                v46 = 0;
                sub_22E4D79C0((uint64_t)a2, v17, &v40, 0, (uint64_t)&v58);
                v26 = v58;
                v47 = v59;
                v48 = v60;
                v27 = v61;
              }
              else
              {
                v27 = 0;
                v26 = 0uLL;
              }
              v64 = v55;
              v65 = v56;
              v66 = v57;
              v60 = v51;
              v61 = v52;
              v62 = v53;
              v63 = v54;
              v58 = __p;
              v59 = v50;
              v38[0] = v26;
              v38[1] = v47;
              v38[2] = v48;
              v39 = v27;
              v36[0] = a2;
              v36[1] = v10;
              v36[2] = v33;
              v37 = v34;
              sub_22E5FDCF0(a2, (int *)&v58, v38, v32, 1, 2, v34, (uint64_t)&v35, (void (*)(_QWORD *__return_ptr, uint64_t, _OWORD *))sub_22E5C67FC, (uint64_t)v36);
              goto LABEL_15;
            }
            v21 = *(const char **)(*(_QWORD *)v6 + 16);
            *(_QWORD *)&__p = sub_22E5C66DC;
            *((_QWORD *)&__p + 1) = &v32;
            v22 = (uint64_t)a2;
            v23 = (uint64_t)v11;
            v24 = v17;
            v25 = (uint64_t)v10;
            goto LABEL_14;
          }
        }
      }
      *(_QWORD *)&v40 = v9;
      DWORD2(v40) = *(_DWORD *)a1;
      v19 = *(_QWORD *)(*(_QWORD *)v5 + 8);
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) & 0xFEu)
         - 2 > 3)
      {
        v28 = *(_QWORD *)(a2[18] + 808);
        *(_QWORD *)&v58 = "atomic_reduction";
        *((_QWORD *)&v58 + 1) = 16;
        sub_22F27BE70((std::string *)&__p, v28, (uint64_t)&v58, 1);
        if ((SBYTE7(v50) & 0x80u) == 0)
          p_p = &__p;
        else
          p_p = (__int128 *)__p;
        if ((SBYTE7(v50) & 0x80u) == 0)
          v30 = BYTE7(v50) & 0x7F;
        else
          v30 = *((_QWORD *)&__p + 1);
        v35 = v40;
        *(_QWORD *)&v58 = &v35;
        *((_QWORD *)&v58 + 1) = sub_22E5C6BC0;
        *(_QWORD *)&v59 = 0;
        (*(void (**)(uint64_t, _QWORD *, __int128 *, uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)v28 + 128))(v28, a2, p_p, v30, &v58, DWORD2(v40), 0);
        if (SBYTE7(v50) < 0)
          operator delete((void *)__p);
        goto LABEL_15;
      }
      v20 = *(_QWORD *)(*(_QWORD *)v7 + 16);
      v21 = *(const char **)(*(_QWORD *)v6 + 16);
      *(_QWORD *)&__p = sub_22E5C6ACC;
      *((_QWORD *)&__p + 1) = &v40;
      v22 = (uint64_t)a2;
      v23 = 0;
      v24 = 0;
      v25 = 0;
LABEL_14:
      sub_22E5AE0F0(v22, v19, v20, v21, (uint64_t)&__p, v23, v24, v25);
LABEL_15:
      v7 += 8;
      v6 += 8;
      v5 += 8;
      ++v4;
    }
  }
}

uint64_t sub_22E5C66DC(uint64_t a1, _QWORD *a2, unsigned int *a3, uint64_t a4, uint64_t a5)
{
  __int128 v9;
  char v10;
  int v11;
  unsigned int v12;
  _BYTE v14[64];
  _QWORD v15[3];
  unsigned int v16;
  _OWORD v17[3];
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  __int128 v36;
  _OWORD v37[8];
  uint64_t v38;

  sub_22E4D8D7C((uint64_t)a2, a3, (uint64_t)v37);
  if (a4)
  {
    v29 = 0;
    v28 = 0uLL;
    v30 = 0;
    v32 = 0;
    v33 = 0;
    v31 = 0;
    v34 = 0;
    sub_22E4D79C0((uint64_t)a2, a4, &v28, 0, (uint64_t)&v19);
    v9 = v19;
    v35 = v20;
    v36 = v21;
    v10 = v22;
  }
  else
  {
    v10 = 0;
    v9 = 0uLL;
  }
  v25 = v37[6];
  v26 = v37[7];
  v27 = v38;
  v21 = v37[2];
  v22 = v37[3];
  v23 = v37[4];
  v24 = v37[5];
  v19 = v37[0];
  v20 = v37[1];
  v17[0] = v9;
  v17[1] = v35;
  v17[2] = v36;
  v18 = v10;
  v11 = *(_DWORD *)a1;
  v12 = *(_DWORD *)(a1 + 16);
  v15[0] = a2;
  v15[1] = a5;
  v15[2] = *(_QWORD *)(a1 + 8);
  v16 = v12;
  return sub_22E5FDCF0(a2, (int *)&v19, v17, v11, 1, 2, v12, (uint64_t)v14, (void (*)(_QWORD *__return_ptr, uint64_t, _OWORD *))sub_22E5C67FC, (uint64_t)v15);
}

uint64_t sub_22E5C67FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v25;
  int v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  _QWORD v43[4];
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  _QWORD v52[3];
  char v53;
  char v54;
  uint64_t v55;
  uint64_t v56[2];
  int v57;
  _QWORD v58[2];
  int v59;
  _OWORD v60[2];
  uint64_t v61;

  v28 = *(_OWORD *)a2;
  v29 = *(_OWORD *)(a2 + 16);
  v30 = *(_OWORD *)(a2 + 32);
  v31 = *(_QWORD *)(a2 + 48);
  v5 = *(_QWORD *)a1;
  v54 = 1;
  v6 = *(_QWORD *)(v5 + 1992) - *(_QWORD *)(v5 + 2000);
  v7 = *(_QWORD *)(v5 + 2312);
  v53 = *(_BYTE *)(v5 + 2893);
  *(_BYTE *)(v5 + 2893) = 0;
  v8 = *(_QWORD *)(v5 + 2872);
  v52[0] = v6;
  v52[1] = v8;
  v52[2] = v7;
  *(_QWORD *)(v5 + 2872) = v6;
  v56[0] = 0;
  v56[1] = 0;
  v55 = v5;
  v57 = 0;
  v58[0] = 0;
  v58[1] = 0;
  v59 = 0;
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48);
  v43[0] = "tmp";
  LOWORD(v44) = 259;
  v10 = sub_22F25E4D4(v5, v9, (uint64_t)v43, 0);
  v27 = a3;
  if (v10 < 8)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
  }
  else
  {
    v12 = v11 & 0xFFFFFFFFFFFFFFF8;
    v13 = v10 & 0xFFFFFFFFFFFFFFF8;
    v14 = 1 << (v11 & 7 | (8 * (v10 & 7)));
  }
  v15 = *(_QWORD *)a1;
  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48);
  sub_22E6281E0(*(_QWORD **)(*(_QWORD *)a1 + 144), v16, (uint64_t)v60);
  *(_QWORD *)&v32 = v13;
  *((_QWORD *)&v32 + 1) = v12;
  v33 = v14;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v17 = *(_QWORD *)(*(_QWORD *)(v15 + 144) + 144);
  v39 = v60[0];
  v40 = v60[1];
  *(_QWORD *)&v41 = v61;
  memset(&v43[1], 0, 24);
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 2;
  LODWORD(v43[0]) = 0;
  v50 = 0u;
  v51 = 0u;
  sub_22E3C113C((uint64_t)v43, &v32, v16, 2, &v39, v17);
  v39 = v28;
  v40 = v29;
  v41 = v30;
  v42 = v31;
  v18 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48);
  v19 = *(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0);
  if (!v19 || (v20 = *(_DWORD *)(v19 + 16), (v20 & 0xFE) != 0x28))
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
      goto LABEL_7;
    v25 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48);
    v19 = sub_22F10CF48(v19);
    v18 = v25;
    if (!v19)
      goto LABEL_7;
    v20 = *(_DWORD *)(v19 + 16);
  }
  if ((v20 & 0x100000) != 0)
  {
    do
    {
      v19 = *(_QWORD *)(*(_QWORD *)(v19 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (v19)
      {
        v26 = *(_DWORD *)(v19 + 16);
        if ((v26 & 0xFE) == 0x28)
          continue;
      }
      v19 = sub_22F10CF48(v19);
      v26 = *(_DWORD *)(v19 + 16);
    }
    while ((v26 & 0x100000) != 0);
  }
  v18 = *(_QWORD *)(v19 + 32);
LABEL_7:
  sub_22E5FD990(v15, (uint64_t)v43, (uint64_t)&v39, v18, *(_DWORD *)(a1 + 24));
  v21 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)&v32 = v13;
  *((_QWORD *)&v32 + 1) = v12;
  v33 = v14;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  sub_22E5BC134(v56, v5, v21, (uint64_t)&v32);
  sub_22E5BC320((uint64_t)v58, v55 + 2904);
  sub_22F2840EC((uint64_t)v58);
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD *)(a1 + 8);
  v33 = 0;
  v32 = 0uLL;
  v34 = 0;
  v36 = 0;
  v37 = 0;
  v35 = 0;
  v38 = 0;
  sub_22E4D79C0(v22, v23, &v32, 0, v27);
  return sub_22F283FC4((uint64_t)v52);
}

void sub_22E5C6ACC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  std::string *p_p;
  std::string::size_type size;
  uint64_t v7;
  std::string __p;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 808);
  v9 = "atomic_reduction";
  v10 = 16;
  sub_22F27BE70(&__p, v4, (uint64_t)&v9, 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    size = __p.__r_.__value_.__l.__size_;
  v7 = *a1;
  v9 = (const char *)&v7;
  v10 = (uint64_t)sub_22E5C6BC0;
  v11 = 0;
  (*(void (**)(uint64_t, uint64_t, std::string *, std::string::size_type, const char **, _QWORD, _QWORD))(*(_QWORD *)v4 + 128))(v4, a2, p_p, size, &v9, *((unsigned int *)a1 + 2), 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

int32x2_t sub_22E5C6BC0(unsigned __int8 **a1, _QWORD *a2, void (***a3)(_QWORD))
{
  (**a3)(a3);
  return sub_22E5AE654(a2, *a1);
}

uint64_t sub_22E5C6BF8(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  llvm::LLVMContext *v5;
  uint64_t RuntimeFunction;
  llvm::Value *v7;
  llvm::Constant **v8;
  _QWORD *v9;
  _QWORD *v10;
  llvm::Type *v11;
  uint64_t NullValue;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  __int128 v17;
  __int128 v19;
  uint64_t v20;
  __int16 v21;
  _QWORD v22[4];

  v22[3] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD **)(*(_QWORD *)(a2 + 144) + 808);
  v22[0] = sub_22E59F7E4(v4, a2, *(_DWORD *)(a1 + 16));
  v22[1] = sub_22E59F964((uint64_t)v4, a2, *(_DWORD *)(a1 + 16));
  llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 336), v5);
  v22[2] = llvm::ConstantInt::get();
  RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
  v21 = 257;
  v8 = (llvm::Constant **)sub_22E479C7C(a2, RuntimeFunction, v7, (uint64_t)v22, 3, (uint64_t)&v19);
  *(_QWORD *)&v19 = ".cancel.exit";
  v21 = 259;
  v9 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  *(_QWORD *)&v19 = ".cancel.continue";
  v21 = 259;
  v10 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v21 = 257;
  NullValue = llvm::Constant::getNullValue(*v8, v11);
  v13 = sub_22E3C18F4(a2 + 272, 33, (uint64_t *)v8, NullValue, (uint64_t)&v19);
  v14 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x23489C09C](v14, v9, v10, v13, 0);
  v21 = 257;
  sub_22E3C12C8((uint64_t *)(a2 + 272), v14, (uint64_t)&v19);
  sub_22E5ED9B4((_QWORD *)a2, v9, 0);
  if (*(_DWORD *)(a1 + 20) == 40)
    (*(void (**)(_QWORD *, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))(*v4 + 184))(v4, a2, *(unsigned int *)(a1 + 16), 89, 0, 0);
  v15 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 136) - 36;
  if (v15 <= 0x28 && ((1 << v15) & 0x14001000411) != 0)
    v16 = a2 + 1712;
  else
    v16 = *(_QWORD *)(a2 + 3440) + 56 * *(unsigned int *)(a2 + 3448) - 48;
  v17 = *(_OWORD *)v16;
  v20 = *(_QWORD *)(v16 + 16);
  v19 = v17;
  sub_22E48BA00((_QWORD *)a2, (uint64_t)&v19);
  return sub_22E5ED9B4((_QWORD *)a2, v10, 1);
}

llvm::Value *sub_22E5C6ED8(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  llvm::Value *result;
  llvm::Value *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t RuntimeFunction;
  llvm::Value *v10;
  _BYTE v11[32];
  __int16 v12;
  _QWORD v13[4];

  v13[3] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD **)(a1 + 40);
  result = (llvm::Value *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(a1 + 16))(*(_QWORD *)(a1 + 24), a2, *(_QWORD *)a1);
  if (result)
  {
    v6 = result;
    v7 = sub_22E59F7E4(v4, a2, *(_DWORD *)(*(_QWORD *)(a1 + 32) + 12));
    v8 = *(_QWORD *)(a1 + 8);
    v13[0] = v7;
    v13[1] = v8;
    v13[2] = v6;
    RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
    v12 = 257;
    return sub_22E479C7C(a2, RuntimeFunction, v10, (uint64_t)v13, 3, (uint64_t)v11);
  }
  return result;
}

_QWORD *sub_22E5C6FB0(uint64_t *a1, _QWORD *a2)
{
  return sub_22E5F01E0(a2, *a1, a1[1]);
}

uint64_t sub_22E5C6FC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t *v25;
  __n128 v26;
  unsigned int v27;
  llvm::Instruction *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 *v35;
  unsigned int *v36;
  uint64_t *v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t *v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t *v69;
  llvm::Instruction *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  __n128 *v79;
  uint64_t i;
  unint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  BOOL v101;
  BOOL v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  BOOL v109;
  BOOL v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  unint64_t v115;
  _QWORD *v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  int *v120;
  int *v121;
  __n128 v122;
  int v123;
  _BYTE *v124;
  _BYTE *v125;
  unsigned int v126;
  unsigned int v127;
  int *v128;
  int *v129;
  int *v130;
  uint64_t *v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t *v134;
  BOOL v135;
  uint64_t *v136;
  int *v137;
  int *v138;
  _BYTE *v139;
  unsigned int v140;
  int *v141;
  BOOL v142;
  int *v143;
  int *v144;
  char v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  int v149;
  uint64_t v150;
  _DWORD *v151;
  int v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  _BYTE *v156;
  unsigned int v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t *v168;
  llvm::Instruction *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  llvm::Type *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  uint64_t NullValue;
  uint64_t v185;
  int v186;
  unint64_t v187;
  uint64_t *v188;
  llvm::Instruction *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unsigned int v198;
  uint64_t v199;
  int v200;
  uint64_t v202;
  uint64_t *v203;
  llvm::Instruction *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unsigned __int8 *v210;
  uint64_t v211;
  unint64_t v212;
  __n128 *v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t *v221;
  uint64_t v222;
  uint64_t *v223;
  int v224;
  _QWORD *v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  int v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  _QWORD *v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  unint64_t *v248;
  uint64_t v249;
  uint64_t v250;
  _QWORD *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t *v254;
  llvm::Instruction *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  int v263;
  __n128 *v264;
  uint64_t *v265;
  uint64_t *v266;
  unint64_t v267;
  BOOL v268;
  uint64_t v269;
  llvm *v270;
  uint64_t v271;
  int v272;
  int v273;
  uint64_t v274;
  uint64_t v275;
  unint64_t *v276;
  uint64_t v277;
  uint64_t v278;
  _QWORD *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t *v288;
  uint64_t v289;
  uint64_t v290;
  _QWORD *v291;
  uint64_t v292;
  uint64_t v293;
  _QWORD *v294;
  uint64_t v295;
  uint64_t v296;
  int v297;
  unint64_t v298;
  llvm::Instruction *v299;
  uint64_t v300;
  int v301;
  int v302;
  unsigned int v303;
  int v304;
  int v305;
  int v306;
  unsigned int v307;
  int v308;
  int v309;
  int v310;
  int v311;
  int v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  _QWORD *v331;
  uint64_t v332;
  uint64_t v333;
  unint64_t v334;
  uint64_t v335;
  uint64_t v336;
  _QWORD *v337;
  uint64_t *v338;
  uint64_t *v339;
  uint64_t *v340;
  _QWORD *v341;
  _QWORD *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  unint64_t v346;
  unint64_t v347;
  uint64_t v348;
  unint64_t v349;
  llvm *v350[2];
  unsigned int v351;
  llvm *v352[2];
  unsigned int v353;
  uint64_t v354;
  _QWORD *v355;
  llvm *v356;
  unsigned int v357;
  llvm *v358;
  unsigned int v359;
  llvm *v360;
  unsigned int v361;
  _OWORD v362[8];
  uint64_t v363;
  uint64_t v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  uint64_t v373;
  uint64_t v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  unint64_t v378;
  _OWORD v379[8];
  uint64_t v380;
  _BYTE v381[64];
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  uint64_t v386;
  unint64_t v387;
  llvm *v388[2];
  unsigned int v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  _QWORD v393[4];
  __int16 v394;
  char *v395;
  __int128 v396;
  _QWORD v397[9];
  _QWORD v398[10];
  _QWORD v399[6];
  _QWORD v400[6];
  _QWORD v401[6];
  _BYTE v402[40];
  _QWORD *v403;
  uint64_t v404;
  _QWORD v405[6];
  _QWORD v406[26];
  _QWORD v407[26];
  _DWORD v408[50];
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  int v412;
  uint64_t v413;
  uint64_t v414;
  int v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  int v419;
  __int128 v420;
  _QWORD v421[4];
  __int128 v422;
  _BYTE v423[28];
  uint64_t v424;
  uint64_t v425;
  __int16 v426;
  _QWORD *v427;
  uint64_t v428;
  _QWORD v429[8];
  _QWORD *v430;
  uint64_t v431;
  _QWORD v432[8];
  uint64_t *v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t *v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t *v439;
  uint64_t v440;
  uint64_t v441;
  _BYTE *v442;
  uint64_t v443;
  _BYTE v444[40];
  _QWORD *v445;
  uint64_t v446;
  _QWORD v447[6];
  _QWORD v448[26];
  _QWORD v449[26];
  uint64_t v450;
  _QWORD v451[2];
  uint64_t v452;
  uint64_t *v453;
  uint64_t v454;
  uint64_t v455;
  _QWORD *v456;
  uint64_t v457;
  _QWORD v458[6];
  uint64_t v459;
  _QWORD *v460;
  uint64_t v461;
  _QWORD v462[6];
  _BYTE v463[40];
  _QWORD *v464;
  uint64_t v465;
  _QWORD v466[6];
  _QWORD v467[26];
  _QWORD v468[26];
  uint64_t v469;
  _BYTE v470[64];
  __int128 v471;
  __int128 v472;
  __int128 v473;
  __int128 v474;
  uint64_t v475;
  _BYTE v476[64];
  __int128 v477;
  __int128 v478;
  __int128 v479;
  __int128 v480;
  uint64_t v481;
  __int128 v482;
  __int128 v483;
  __int128 v484;
  __int128 v485;
  __int128 v486;
  __int128 v487;
  __int128 v488;
  __int128 v489;
  uint64_t v490;
  uint64_t v491;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v3 = v0;
  v491 = *MEMORY[0x24BDAC8D0];
  v331 = *(_QWORD **)v0;
  v451[0] = &v452;
  v451[1] = 0x400000000;
  v453 = &v455;
  v454 = 0x400000000;
  v456 = v458;
  v457 = 0x400000000;
  v458[4] = &v459;
  v458[5] = 0x400000000;
  v460 = v462;
  v461 = 0x400000000;
  v462[4] = v463;
  v462[5] = 0x400000000;
  v463[32] = 0;
  v464 = v466;
  v465 = 0x400000000;
  v466[4] = v467;
  v466[5] = 0x400000000;
  v467[24] = v468;
  v467[25] = 0x400000000;
  v468[24] = &v469;
  v468[25] = 0x400000000;
  sub_22E5C9D18((uint64_t)&v354, *(_QWORD *)(v0 + 16), v1);
  v352[1] = 0;
  v352[0] = 0;
  v353 = 0;
  v350[1] = 0;
  v350[0] = 0;
  v351 = 0;
  v4 = sub_22EFC3B90(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 24));
  v332 = v3;
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(unsigned int *)(v5 + 8);
  if ((_DWORD)v6)
  {
    v22 = v4;
    v23 = (_QWORD *)(v5 + (8 * v6 + 40));
    v24 = &v23[2 * v6];
    v25 = **(uint64_t ***)(v3 + 48);
    v338 = (uint64_t *)(v2 + 272);
    v333 = v2;
    v337 = v24;
    while (1)
    {
      v427 = v429;
      v428 = 0x400000000;
      v430 = v432;
      v431 = 0x400000000;
      v433 = &v435;
      v434 = 0x400000000;
      v436 = &v438;
      v437 = 0x400000000;
      v439 = &v441;
      v440 = 0x400000000;
      v442 = v444;
      v443 = 0x400000000;
      v444[32] = 0;
      v445 = v447;
      v446 = 0x400000000;
      v447[4] = v448;
      v447[5] = 0x400000000;
      v448[24] = v449;
      v448[25] = 0x400000000;
      v449[24] = &v450;
      v449[25] = 0x400000000;
      v395 = (char *)&v396 + 8;
      *(_QWORD *)&v396 = 0x400000000;
      v397[7] = v398;
      v397[8] = 0x400000000;
      v398[8] = v399;
      v398[9] = 0x400000000;
      v399[4] = v400;
      v399[5] = 0x400000000;
      v400[4] = v401;
      v400[5] = 0x400000000;
      v401[4] = v402;
      v401[5] = 0x400000000;
      v402[32] = 0;
      v403 = v405;
      v404 = 0x400000000;
      v405[4] = v406;
      v405[5] = 0x400000000;
      v406[24] = v407;
      v406[25] = 0x400000000;
      v407[24] = v408;
      v407[25] = 0x400000000;
      v408[48] = 0;
      v409 = 0;
      v410 = 0;
      v412 = 0;
      v411 = 0;
      v415 = 0;
      v413 = 0;
      v414 = 0;
      v417 = 0;
      v418 = 0;
      v419 = 0;
      v416 = 0;
      v26 = 0uLL;
      v420 = 0u;
      memset(v421, 0, 28);
      v422 = 0u;
      memset(v423, 0, sizeof(v423));
      v426 = 0;
      v424 = 0;
      v425 = 0;
      v27 = (*v23 >> 1) & 3;
      if (v27 == 3)
      {
        v429[0] = 0;
        v429[1] = 0;
        LODWORD(v428) = 1;
        v432[0] = *v25;
        v432[1] = 0;
        LODWORD(v431) = 1;
        v435 = *v25;
        LODWORD(v434) = 1;
        v28 = sub_22F28CE84(v2, *(_QWORD *)(v22 + 48));
        v29 = *(_QWORD *)(v2 + 32);
        *(_WORD *)&v470[32] = 257;
        v30 = sub_22E3BF45C(v338, (uint64_t)v28, v29, 1, (uint64_t)v470);
        v31 = v437;
        if (v437 >= (unint64_t)HIDWORD(v437))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v31 = v437;
        }
        v436[v31] = v30;
        v32 = v440;
        LODWORD(v437) = v437 + 1;
        if (v440 >= (unint64_t)HIDWORD(v440))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v32 = v440;
        }
        v439[v32] = 800;
        LODWORD(v440) = v440 + 1;
        v33 = v443;
        if (v443 >= (unint64_t)HIDWORD(v443))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v33 = v443;
        }
        *(_QWORD *)&v442[8 * v33] = 0;
        LODWORD(v443) = v443 + 1;
        goto LABEL_320;
      }
      v34 = *v25;
      if (v27)
        v344 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*v23 & 0xFFFFFFFFFFFFFFF8) + 32))(*v23 & 0xFFFFFFFFFFFFFFF8);
      else
        v344 = 0;
      if (v361)
      {
        v60 = ((v344 >> 4) ^ (v344 >> 9)) & (v361 - 1);
        v61 = *((_QWORD *)v360 + 2 * v60);
        if (v344 == v61)
          goto LABEL_196;
        v62 = 1;
        while (v61 != -4096)
        {
          v63 = v60 + v62++;
          v60 = v63 & (v361 - 1);
          v61 = *((_QWORD *)v360 + 2 * v60);
          if (v344 == v61)
            goto LABEL_196;
        }
      }
      if (v359)
      {
        v64 = (v359 - 1) & ((v344 >> 4) ^ (v344 >> 9));
        v65 = *((_QWORD *)v358 + 11 * v64);
        if (v344 == v65)
        {
LABEL_66:
          v66 = v428;
          if (v428 >= (unint64_t)HIDWORD(v428))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v66 = v428;
          }
          v67 = &v427[2 * v66];
          *v67 = v344;
          v67[1] = 0;
          LODWORD(v428) = v428 + 1;
          sub_22E5BED8C((uint64_t)&v430, v34, v344);
          v68 = v434;
          if (v434 >= (unint64_t)HIDWORD(v434))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v68 = v434;
          }
          v433[v68] = v34;
          LODWORD(v434) = v434 + 1;
          v69 = v355 + 34;
          v70 = sub_22F28CE84((uint64_t)v355, *(_QWORD *)(*(_QWORD *)(v355[18] + 144) + 16816));
          v71 = v355[4];
          *(_WORD *)&v470[32] = 257;
          v72 = sub_22E3BF45C(v69, (uint64_t)v70, v71, 1, (uint64_t)v470);
          v73 = v437;
          if (v437 >= (unint64_t)HIDWORD(v437))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v73 = v437;
          }
          v436[v73] = v72;
          v74 = v440;
          LODWORD(v437) = v437 + 1;
          if ((*v23 & 6) == 2)
            v75 = 33;
          else
            v75 = 288;
          if (v440 >= (unint64_t)HIDWORD(v440))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v74 = v440;
          }
          v439[v74] = v75;
          LODWORD(v440) = v440 + 1;
          v76 = v443;
          if (v443 >= (unint64_t)HIDWORD(v443))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v76 = v443;
          }
          *(_QWORD *)&v442[8 * v76] = 0;
          LODWORD(v443) = v443 + 1;
          goto LABEL_196;
        }
        v302 = 1;
        while (v65 != -4096)
        {
          v303 = v64 + v302++;
          v64 = v303 & (v359 - 1);
          v65 = *((_QWORD *)v358 + 11 * v64);
          if (v344 == v65)
            goto LABEL_66;
        }
      }
      v35 = (__n128 *)&v476[16];
      *(_QWORD *)v476 = &v476[16];
      *(_QWORD *)&v476[8] = 0x400000000;
      v36 = *(unsigned int **)((v354 & 0xFFFFFFFFFFFFFFF8) + 24);
      v334 = v22;
      v339 = v25;
      v341 = v23;
      if (!v36)
        goto LABEL_83;
      v39 = *v36;
      v37 = (uint64_t *)(v36 + 4);
      v38 = v39;
      if (v39)
      {
        v77 = 8 * v38;
        v40 = v37;
        while (*(_DWORD *)(*v40 + 8) != 46)
        {
          ++v40;
          v77 -= 8;
          if (!v77)
          {
LABEL_83:
            v78 = 0;
            v79 = (__n128 *)&v476[16];
            goto LABEL_84;
          }
        }
      }
      else
      {
        v40 = v37;
      }
      v41 = &v37[v38];
      if (v40 == v41)
        goto LABEL_83;
      v42 = *v40;
      v43 = v344;
LABEL_40:
      v44 = v42 + 136;
      v46 = *(unsigned int *)(v42 + 16);
      v47 = v42 + 136 + 8 * v46;
      if (!*(_BYTE *)(v42 + 32))
        v47 = 0;
      v45 = *(unsigned int *)(v42 + 20);
      sub_22F2865FC((uint64_t)v470, v43, (_QWORD *)(v44 + 8 * (2 * v46)), v45, (_DWORD *)(v44 + 8 * (2 * v46) + 8 * v45), v45, (_DWORD *)(v44 + 8 * (2 * v46) + 8 * v45 + 4 * v45), *(unsigned int *)(v42 + 24), (v44 + 8 * (2 * v46) + 8 * v45 + 4 * (*(_DWORD *)(v42 + 24) + v45) + 7) & 0xFFFFFFFFFFFFFFF8, *(unsigned int *)(v42 + 28), *(_BYTE *)(v42 + 32), v47);
      v48 = *(_QWORD *)v470;
      v347 = ((v44
             + 8 * (2 * *(_DWORD *)(v42 + 16))
             + 8 * *(unsigned int *)(v42 + 20)
             + 4 * (*(_DWORD *)(v42 + 24) + *(_DWORD *)(v42 + 20))
             + 7) & 0xFFFFFFFFFFFFFFF8)
           + 16 * *(unsigned int *)(v42 + 28);
      if (*(_QWORD *)v470 != v347)
      {
        v49 = *(uint64_t **)&v470[32];
        v50 = *(_DWORD *)&v470[40];
        v51 = *(_DWORD *)&v470[44];
        v345 = *(_QWORD *)&v470[56];
        v52 = v470[24];
        v335 = v471;
        v336 = *(_QWORD *)&v470[16];
        v53 = *(_QWORD *)&v470[48] + 4;
        v343 = 8 * (v470[24] != 0);
        v54 = 136;
        do
        {
          if (v52)
          {
            v55 = *v49;
            if (*v49)
              v55 = *(_QWORD *)(v55 + 16);
          }
          else
          {
            v55 = 0;
          }
          v56 = 0;
          v57 = *(_DWORD *)(v53 - 4);
          *(_QWORD *)v381 = 0;
          *(_QWORD *)&v379[0] = 0;
          if (*(_DWORD *)(v42 + 128))
            v56 = *(_QWORD *)(v42 + v54);
          *(_QWORD *)&v379[0] = v56;
          *(_QWORD *)v470 = v48;
          *(_QWORD *)&v470[8] = (v57 - v51);
          *(_QWORD *)v381 = v55;
          LODWORD(v374) = *(_DWORD *)(v42 + 120);
          *(_QWORD *)&v482 = v42 + 80;
          *((_QWORD *)&v482 + 1) = 5;
          LOBYTE(v365) = *(_DWORD *)v42 == 0;
          sub_22F2863E0((unint64_t)v476, (__int128 *)v470, (int *)&v374, &v482, (char *)&v365, (uint64_t *)v381, (uint64_t *)v379);
          if (v53 == v345)
          {
            v50 = 0;
            v48 = v335;
          }
          else
          {
            v48 += 16 * (*(_DWORD *)(v53 - 4) - v51);
            if (!--v50)
            {
              v50 = *(_DWORD *)(v336 + 4);
              v336 += 4;
            }
            v51 = *(_DWORD *)(v53 - 4);
          }
          v54 += 8;
          v53 += 4;
          v49 = (uint64_t *)((char *)v49 + v343);
        }
        while (v48 != v347);
      }
      v58 = v40 + 1;
      v43 = v344;
      while (v58 != v41)
      {
        v59 = *v58++;
        v42 = v59;
        if (*(_DWORD *)(v59 + 8) == 46)
        {
          v40 = v58 - 1;
          goto LABEL_40;
        }
      }
      v35 = *(__n128 **)v476;
      v78 = *(unsigned int *)&v476[8];
      v79 = (__n128 *)(*(_QWORD *)v476 + ((unint64_t)*(unsigned int *)&v476[8] << 6));
      if (*(_DWORD *)&v476[8])
      {
        v212 = *(unsigned int *)&v476[8];
        while (1)
        {
          v213 = (__n128 *)operator new(v212 << 6, MEMORY[0x24BEDB6B8]);
          if (v213)
            break;
          v135 = v212 > 1;
          v212 >>= 1;
          if (!v135)
            goto LABEL_84;
        }
        v264 = v213;
        sub_22E5CBE14(v35, v79, v78, v213, v212, v26);
        operator delete(v264);
      }
      else
      {
        v78 = 0;
LABEL_84:
        sub_22E5CBE14(v35, v79, v78, 0, 0, v26);
      }
      *(_QWORD *)v470 = 1;
      for (i = 8; i != 360; i += 88)
        *(_QWORD *)&v470[i] = -4096;
      if (*(_DWORD *)&v476[8])
      {
        v87 = 0;
        v88 = *(_QWORD **)v476;
        v89 = *(_QWORD *)v476 + ((unint64_t)*(unsigned int *)&v476[8] << 6);
        v346 = v89;
        do
        {
          if (++v87 != *(unsigned int *)&v476[8])
          {
            v90 = *(_QWORD *)v476 + ((unint64_t)*(unsigned int *)&v476[8] << 6);
            v92 = *v88;
            v91 = v88[1];
            v93 = (_QWORD *)(*(_QWORD *)v476 + (v87 << 6));
            v94 = *v88 + 16 * v91;
            v95 = -16 * v91;
            do
            {
              v96 = 0;
              v97 = v93[1];
              v98 = *v93 + 16 * v97;
              v99 = -16 * v97;
              do
              {
                v100 = v96;
                v101 = v99 != v96;
                if (v95 == v100 || v99 == v100)
                  goto LABEL_114;
                if (*(unsigned __int8 *)(*(_QWORD *)(v94 + v100 - 16) & 0xFFFFFFFFFFFFFFFCLL) != *(unsigned __int8 *)(*(_QWORD *)(v98 + v100 - 16) & 0xFFFFFFFFFFFFFFFCLL))
                  break;
                v96 = v100 - 16;
              }
              while (*(_QWORD *)(v94 + v100 - 8) == *(_QWORD *)(v98 + v100 - 8));
              v101 = 1;
LABEL_114:
              v102 = v100 + 16 * v97 == 0;
              if (v95 != v100)
                v102 = v101;
              if (!v102)
              {
                v103 = -16 * v97;
                v104 = v98 + v100;
                v105 = v94 + v100;
                if (-16 * v97 != v100)
                  v105 = v104;
                v106 = v105 - 16;
                if (*(unsigned __int8 *)(*(_QWORD *)(v105 - 16) & 0xFFFFFFFFFFFFFFFCLL) == 188)
                {
                  v107 = *(_QWORD *)(v105 + 8);
                  if (!v107
                    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v107 + 48) & 0xFFFFFFFFFFFFFFF0)
                                                        + 8) & 0xFFFFFFFFFFFFFFF0)
                                + 16) != 39)
                  {
                    v108 = *(_QWORD *)(v105 - 8);
                    if (!v108
                      || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v108 + 48) & 0xFFFFFFFFFFFFFFF0)
                                                           + 8) & 0xFFFFFFFFFFFFFFF0)
                                   + 16) == 39
                        ? (v109 = v106 == v92)
                        : (v109 = 1),
                          !v109 ? (v110 = v106 == *v93) : (v110 = 1),
                          v110))
                    {
                      if (v95 == v100)
                        v111 = v88;
                      else
                        v111 = v93;
                      if (v103 == v100)
                        v112 = v92;
                      else
                        v112 = *v93;
                      v348 = v91;
                      if (v103 == v100)
                        v113 = v91;
                      else
                        v113 = v93[1];
                      *(_QWORD *)&v482 = v111;
                      v114 = sub_22F2864AC(v470, (uint64_t *)&v482);
                      v115 = *((unsigned int *)v114 + 4);
                      if (v115 >= *((unsigned int *)v114 + 5))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                        v115 = *((unsigned int *)v114 + 4);
                      }
                      v116 = (_QWORD *)(v114[1] + 16 * v115);
                      *v116 = v112;
                      v116[1] = v113;
                      ++*((_DWORD *)v114 + 4);
                      v89 = v346;
                      v91 = v348;
                    }
                  }
                }
              }
              v93 += 8;
            }
            while (v93 != (_QWORD *)v90);
          }
          v88 += 8;
        }
        while (v88 != (_QWORD *)v89);
      }
      *(_QWORD *)&v482 = &v483;
      *((_QWORD *)&v482 + 1) = 0x400000000;
      v81 = v344;
      if (*(_DWORD *)v470 >= 2u)
        break;
LABEL_153:
      v120 = sub_22F28651C((int *)v470);
      v123 = v470[0] & 1;
      v124 = *(_BYTE **)&v470[8];
      v125 = &v470[8];
      if ((v470[0] & 1) == 0)
        v125 = *(_BYTE **)&v470[8];
      v126 = *(_DWORD *)&v470[16];
      if ((v470[0] & 1) != 0)
        v127 = 4;
      else
        v127 = *(_DWORD *)&v470[16];
      v128 = (int *)&v125[88 * v127];
      if (v128 != v120)
      {
        v129 = v120;
        v130 = v121;
        do
        {
          v131 = (uint64_t *)*((_QWORD *)v129 + 1);
          v132 = v129[4];
          *(_QWORD *)v381 = &v482;
          if (v132 < 0x81)
          {
LABEL_164:
            v122 = sub_22E5CD3A4(v131, &v131[2 * v132], (uint64_t *)v381, v132, 0, 0, v122);
            goto LABEL_166;
          }
          v133 = v132;
          while (1)
          {
            v134 = (uint64_t *)operator new(16 * v133, MEMORY[0x24BEDB6B8]);
            if (v134)
              break;
            v135 = v133 > 1;
            v133 >>= 1;
            if (!v135)
              goto LABEL_164;
          }
          v136 = v134;
          sub_22E5CD3A4(v131, &v131[2 * v132], (uint64_t *)v381, v132, v134, v133, v122);
          operator delete(v136);
LABEL_166:
          while (1)
          {
            v129 += 22;
            if (v129 == v130)
              break;
            if ((*(_QWORD *)v129 | 0x1000) != 0xFFFFFFFFFFFFF000)
              goto LABEL_170;
          }
          v129 = v130;
LABEL_170:
          ;
        }
        while (v129 != v128);
        v124 = *(_BYTE **)&v470[8];
        v126 = *(_DWORD *)&v470[16];
        v123 = v470[0] & 1;
        v81 = v344;
      }
      v137 = sub_22F28651C((int *)v470);
      v139 = &v470[8];
      if (v123)
      {
        v140 = 4;
      }
      else
      {
        v139 = v124;
        v140 = v126;
      }
      v141 = (int *)&v139[88 * v140];
      v142 = v141 == v137;
      if (v141 != v137)
      {
        v143 = v137;
        v144 = v138;
        v145 = 1;
        do
        {
          sub_22E5BEE04((uint64_t)&v354, *(_DWORD *)(*(_QWORD *)v143 + 16), *(_DWORD **)(*(_QWORD *)v143 + 24), *(_QWORD *)(*(_QWORD *)v143 + 32), 0, 0, **(_QWORD ***)v143, *(_QWORD *)(*(_QWORD *)v143 + 8), (uint64_t)&v427, (uint64_t)&v395, v145 & 1, *(_BYTE *)(*(_QWORD *)v143 + 40), *(_QWORD *)(*(_QWORD *)v143 + 48), 0, v81, *(_QWORD *)(*(_QWORD *)v143 + 56), *((_QWORD *)v143 + 1), v143[4]);
          while (1)
          {
            v143 += 22;
            if (v143 == v144)
              break;
            if ((*(_QWORD *)v143 | 0x1000) != 0xFFFFFFFFFFFFF000)
              goto LABEL_182;
          }
          v143 = v144;
LABEL_182:
          v145 = 0;
        }
        while (v143 != v141);
      }
      if (*(_DWORD *)&v476[8])
      {
        v146 = *(_QWORD *)v476;
        v349 = *(_QWORD *)v476 + ((unint64_t)*(unsigned int *)&v476[8] << 6);
        do
        {
          v148 = *(_QWORD **)v146;
          v147 = *(_QWORD *)(v146 + 8);
          v149 = *(_DWORD *)(v146 + 16);
          v151 = *(_DWORD **)(v146 + 24);
          v150 = *(_QWORD *)(v146 + 32);
          v152 = *(unsigned __int8 *)(v146 + 40);
          v153 = *(_QWORD *)(v146 + 48);
          v154 = *(_QWORD *)(v146 + 56);
          v155 = sub_22F28659C((uint64_t)v470, v146);
          v156 = &v470[8];
          if ((v470[0] & 1) == 0)
            v156 = *(_BYTE **)&v470[8];
          v157 = *(_DWORD *)&v470[16];
          if ((v470[0] & 1) != 0)
            v157 = 4;
          if (&v156[88 * v157] == (_BYTE *)v155)
            sub_22E5BEE04((uint64_t)&v354, v149, v151, v150, 0, 0, v148, v147, (uint64_t)&v427, (uint64_t)&v395, v142, v152 != 0, v153, 0, v344, v154, 0, 0);
          v142 = 0;
          v146 += 64;
        }
        while (v146 != v349);
      }
      if ((__int128 *)v482 != &v483)
        free((void *)v482);
      sub_22F286950((uint64_t)v470);
      v2 = v333;
      v22 = v334;
      v25 = v339;
      v23 = v341;
      v24 = v337;
      if (*(_BYTE **)v476 != &v476[16])
        free(*(void **)v476);
LABEL_196:
      v158 = *v23;
      if ((*v23 & 6) != 0)
      {
        v159 = v158 & 0xFFFFFFFFFFFFFFF8;
        if ((v158 & 0xFFFFFFFFFFFFFFF8) != 0)
          v159 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v159 + 32))(v159);
        *(_QWORD *)v476 = v159;
      }
      else
      {
        *(_QWORD *)v476 = 0;
      }
      sub_22F275184((uint64_t)v350, v476, (uint64_t)v470);
      if (!(_DWORD)v431 && !v421[0])
      {
        v160 = *v25;
        v161 = *v23;
        v162 = (*v23 >> 1) & 3;
        if (v162 == 2)
        {
          v174 = v161 & 0xFFFFFFFFFFFFFFF8;
          v176 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)(v161 & 0xFFFFFFFFFFFFFFF8) + 32))(v161 & 0xFFFFFFFFFFFFFFF8);
          v177 = v428;
          if (v428 >= (unint64_t)HIDWORD(v428))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v177 = v428;
          }
          v178 = &v427[2 * v177];
          *v178 = v176;
          v178[1] = 0;
          v179 = v431;
          LODWORD(v428) = v428 + 1;
          if (v431 >= (unint64_t)HIDWORD(v431))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v179 = v431;
          }
          v180 = &v430[2 * v179];
          *v180 = v160;
          v180[1] = 0;
          v181 = v434;
          LODWORD(v431) = v431 + 1;
          if (v434 >= (unint64_t)HIDWORD(v434))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v181 = v434;
          }
          v433[v181] = v160;
          LODWORD(v434) = v434 + 1;
          v182 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v22 + 48) & 0xFFFFFFFFFFFFFFF0)
                                                            + 8) & 0xFFFFFFFFFFFFFFF0)
                                    + 16);
          if (v182 == 32 || v182 == 39)
          {
            v183 = v440;
            if (v440 >= (unint64_t)HIDWORD(v440))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v183 = v440;
            }
            v439[v183] = 0;
            LODWORD(v440) = v440 + 1;
            NullValue = llvm::Constant::getNullValue((llvm::Constant *)v355[4], v175);
          }
          else
          {
            v202 = v440;
            if (v440 >= (unint64_t)HIDWORD(v440))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v202 = v440;
            }
            v439[v202] = 256;
            LODWORD(v440) = v440 + 1;
            v203 = v355 + 34;
            v204 = sub_22F28CE84((uint64_t)v355, *(_QWORD *)(v22 + 48));
            v205 = v355[4];
            *(_WORD *)&v470[32] = 257;
            NullValue = sub_22E3BF45C(v203, (uint64_t)v204, v205, 1, (uint64_t)v470);
          }
          v206 = NullValue;
          v207 = v437;
          if (v437 >= (unint64_t)HIDWORD(v437))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v207 = v437;
          }
          v436[v207] = v206;
          LODWORD(v437) = v437 + 1;
          v208 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v174 + 32))(v174);
          if (!v357)
            goto LABEL_288;
          LODWORD(v209) = ((v208 >> 4) ^ (v208 >> 9)) & (v357 - 1);
          v210 = (unsigned __int8 *)v356 + 16 * v209;
          v211 = *(_QWORD *)v210;
          if (v208 != *(_QWORD *)v210)
          {
            v304 = 1;
            while (v211 != -4096)
            {
              v305 = v209 + v304++;
              v209 = v305 & (v357 - 1);
              v211 = *((_QWORD *)v356 + 2 * v209);
              if (v208 == v211)
              {
                v210 = (unsigned __int8 *)v356 + 16 * v209;
                goto LABEL_256;
              }
            }
            goto LABEL_288;
          }
LABEL_256:
          if ((_DWORD)v209 == v357)
            goto LABEL_288;
        }
        else
        {
          if (!v162)
          {
            v163 = v428;
            if (v428 >= (unint64_t)HIDWORD(v428))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v163 = v428;
            }
            v164 = &v427[2 * v163];
            *v164 = 0;
            v164[1] = 0;
            v165 = v431;
            LODWORD(v428) = v428 + 1;
            if (v431 >= (unint64_t)HIDWORD(v431))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v165 = v431;
            }
            v166 = &v430[2 * v165];
            *v166 = v160;
            v166[1] = 0;
            v167 = v434;
            LODWORD(v431) = v431 + 1;
            if (v434 >= (unint64_t)HIDWORD(v434))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v167 = v434;
            }
            v433[v167] = v160;
            LODWORD(v434) = v434 + 1;
            v168 = v355 + 34;
            v169 = sub_22F28CE84((uint64_t)v355, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v22 + 48) & 0xFFFFFFFFFFFFFFF0) + 32));
            v170 = v355[4];
            *(_WORD *)&v470[32] = 257;
            v171 = sub_22E3BF45C(v168, (uint64_t)v169, v170, 1, (uint64_t)v470);
            v172 = v437;
            if (v437 >= (unint64_t)HIDWORD(v437))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v172 = v437;
            }
            v436[v172] = v171;
            v173 = v440;
            LODWORD(v437) = v437 + 1;
            if (v440 >= (unint64_t)HIDWORD(v440))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v173 = v440;
            }
            v439[v173] = 3;
            LODWORD(v440) = v440 + 1;
            goto LABEL_288;
          }
          v185 = *(_QWORD *)(*(_QWORD *)(v22 + 48) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v185 + 18) & 0x10) != 0)
          {
            do
            {
              while (1)
              {
                v185 = *(_QWORD *)(*(_QWORD *)(v185 + 32) & 0xFFFFFFFFFFFFFFF0);
                if (!v185)
                  break;
                v186 = *(_DWORD *)(v185 + 16);
                if ((v186 & 0xFE) != 0x28)
                  break;
                if ((v186 & 0x100000) == 0)
                  goto LABEL_233;
              }
              v185 = sub_22F10CF48(v185);
            }
            while ((*(_DWORD *)(v185 + 16) & 0x100000) != 0);
          }
LABEL_233:
          v187 = *(_QWORD *)(v185 + 32);
          v188 = v355 + 34;
          v189 = sub_22F28CE84((uint64_t)v355, v187);
          v190 = v355[4];
          *(_WORD *)&v470[32] = 257;
          v191 = sub_22E3BF45C(v188, (uint64_t)v189, v190, 1, (uint64_t)v470);
          v192 = v437;
          if (v437 >= (unint64_t)HIDWORD(v437))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v192 = v437;
          }
          v436[v192] = v191;
          LODWORD(v437) = v437 + 1;
          v193 = *v23 & 0xFFFFFFFFFFFFFFF8;
          if (v193)
            v193 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v193 + 32))(v193);
          if (v357)
          {
            v198 = ((v193 >> 4) ^ (v193 >> 9)) & (v357 - 1);
            v199 = *((_QWORD *)v356 + 2 * v198);
            if (v193 != v199)
            {
              v306 = 1;
              while (v199 != -4096)
              {
                v307 = v198 + v306++;
                v198 = v307 & (v357 - 1);
                v199 = *((_QWORD *)v356 + 2 * v198);
                if (v193 == v199)
                  goto LABEL_243;
              }
              goto LABEL_238;
            }
LABEL_243:
            v200 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*v23 & 0xFFFFFFFFFFFFFFF8)
                                                                                      + 48) & 0xFFFFFFFFFFFFFFF0)
                                                              + 8) & 0xFFFFFFFFFFFFFFF0)
                                      + 16);
            if (v200 == 32 || v200 == 39)
              v197 = 17;
            else
              v197 = 129;
          }
          else
          {
LABEL_238:
            v194 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*v23 & 0xFFFFFFFFFFFFFFF8) + 32))(*v23 & 0xFFFFFFFFFFFFFFF8);
            if (!v361)
              goto LABEL_241;
            v195 = ((v194 >> 4) ^ (v194 >> 9)) & (v361 - 1);
            v196 = *((_QWORD *)v360 + 2 * v195);
            if (v194 == v196)
            {
LABEL_240:
              if ((_DWORD)v195 == v361)
                goto LABEL_241;
              v197 = sub_22E5C2E90(*(_DWORD *)(*((_QWORD *)v360 + 2 * v195 + 1) + 120), (_DWORD *)(*((_QWORD *)v360 + 2 * v195 + 1) + 80), 5, 0, 0, **((_DWORD **)v360 + 2 * v195 + 1) == 0, 0, 0, 0);
            }
            else
            {
              v310 = 1;
              while (v196 != -4096)
              {
                v311 = v195 + v310++;
                v195 = v311 & (v361 - 1);
                v196 = *((_QWORD *)v360 + 2 * v195);
                if (v194 == v196)
                  goto LABEL_240;
              }
LABEL_241:
              v197 = 3;
            }
          }
          v214 = v440;
          if (v440 >= (unint64_t)HIDWORD(v440))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v214 = v440;
          }
          v439[v214] = v197;
          LODWORD(v440) = v440 + 1;
          v215 = *v23 & 0xFFFFFFFFFFFFFFF8;
          if (v215)
            v216 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v215 + 32))(*v23 & 0xFFFFFFFFFFFFFFF8);
          else
            v216 = 0;
          if (v357)
          {
            LODWORD(v217) = ((v216 >> 4) ^ (v216 >> 9)) & (v357 - 1);
            v210 = (unsigned __int8 *)v356 + 16 * v217;
            v218 = *(_QWORD *)v210;
            if (v216 != *(_QWORD *)v210)
            {
              v308 = 1;
              while (v218 != -4096)
              {
                v309 = v217 + v308++;
                v217 = v309 & (v357 - 1);
                v218 = *((_QWORD *)v356 + 2 * v217);
                if (v216 == v218)
                {
                  v210 = (unsigned __int8 *)v356 + 16 * v217;
                  goto LABEL_271;
                }
              }
              v210 = (unsigned __int8 *)v356 + 16 * v357;
            }
          }
          else
          {
            v210 = (unsigned __int8 *)v356;
          }
LABEL_271:
          v219 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v215 + 32))(v215);
          v220 = v428;
          if (v428 >= (unint64_t)HIDWORD(v428))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v220 = v428;
          }
          v221 = &v427[2 * v220];
          *v221 = v219;
          v221[1] = 0;
          v222 = v431;
          LODWORD(v428) = v428 + 1;
          if (v431 >= (unint64_t)HIDWORD(v431))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v222 = v431;
          }
          v223 = &v430[2 * v222];
          *v223 = v160;
          v223[1] = 0;
          LODWORD(v431) = v431 + 1;
          if (v210 != (unsigned __int8 *)((char *)v356 + 16 * v357)
            && ((v224 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v187 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                           + 16),
                 v224 == 39)
             || v224 == 32))
          {
            v225 = v355;
            v226 = sub_22EF5B404(*(_QWORD *)(v355[18] + 144), v215, 0);
            sub_22F283454((uint64_t)v225, v160, v187, v226, 0, (uint64_t)v470);
            sub_22E4E96BC((uint64_t)v225, (uint64_t)v470, 0, 0, v476);
            if ((v476[24] & 3) != 0)
              v227 = sub_22F28ABCC(v476, v355);
            else
              v227 = *(_QWORD *)v476;
            v229 = v434;
            if (v434 >= (unint64_t)HIDWORD(v434))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v229 = v434;
            }
            v433[v229] = v227;
          }
          else
          {
            v228 = v434;
            if (v434 >= (unint64_t)HIDWORD(v434))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v228 = v434;
            }
            v433[v228] = v160;
          }
          LODWORD(v434) = v434 + 1;
          if (v210 == (unsigned __int8 *)((char *)v356 + 16 * v357))
          {
LABEL_288:
            v439[v440 - 1] |= 0x20uLL;
            goto LABEL_289;
          }
        }
        v263 = v210[8];
        v439[v440 - 1] |= 0x20uLL;
        if (v263)
LABEL_289:
          v439[v440 - 1] |= 0x200uLL;
        v230 = v443;
        if (v443 >= (unint64_t)HIDWORD(v443))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v230 = v443;
        }
        *(_QWORD *)&v442[8 * v230] = 0;
        LODWORD(v443) = v443 + 1;
      }
      v231 = *v23;
      if ((*v23 & 6) == 2)
      {
        v340 = v25;
        v342 = v23;
        v232 = v231 & 0xFFFFFFFFFFFFFFF8;
        v233 = *v25;
        v234 = *(_QWORD *)((v231 & 0xFFFFFFFFFFFFFFF8) + 48);
        v235 = *(_QWORD *)((v234 & 0xFFFFFFFFFFFFFFF0) + 8);
        v236 = *(_QWORD *)(v235 & 0xFFFFFFFFFFFFFFF0);
        if (v236 && (v237 = *(_DWORD *)(v236 + 16), (v237 & 0xFE) == 0x28))
        {
LABEL_410:
          if ((v237 & 0x100000) != 0)
          {
            do
            {
              v236 = *(_QWORD *)(*(_QWORD *)(v236 + 32) & 0xFFFFFFFFFFFFFFF0);
              if (!v236 || (v312 = *(_DWORD *)(v236 + 16), (v312 & 0xFE) != 0x28))
              {
                v236 = sub_22F10CF48(v236);
                v312 = *(_DWORD *)(v236 + 16);
              }
              v2 = v333;
            }
            while ((v312 & 0x100000) != 0);
          }
          v238 = *(_QWORD *)(v236 + 32);
        }
        else
        {
          v238 = v234 & 7 | v235;
          if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v236 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
          {
            v236 = sub_22F10CF48(v236);
            if (v236)
            {
              v237 = *(_DWORD *)(v236 + 16);
              goto LABEL_410;
            }
          }
        }
        v239 = sub_22F10C2A4(*(_QWORD *)(v238 & 0xFFFFFFFFFFFFFFF0));
        if (!v239
          || (v240 = v239, (*(_DWORD *)(v239 + 28) & 0x7Fu) - 35 > 2)
          || (v241 = *(_QWORD *)(v239 + 128)) == 0
          || ((*(unsigned __int16 *)(v241 + 8) | (*(unsigned __int8 *)(v241 + 10) << 16)) & 0x100000) == 0)
        {
LABEL_319:
          v25 = v340;
          v23 = v342;
          v24 = v337;
          goto LABEL_320;
        }
        v242 = sub_22E66C868(v355[18] + 280, v238, 0);
        v243 = sub_22EF5B404(*(_QWORD *)(v355[18] + 144), v232, 0);
        v244 = v355;
        sub_22E6281E0((_QWORD *)v355[18], v238, (uint64_t)v381);
        *(_QWORD *)v476 = v233;
        *(_QWORD *)&v476[8] = v242;
        *(_QWORD *)&v476[16] = v243;
        *(_DWORD *)&v476[24] = 0;
        *(_QWORD *)&v476[32] = 0;
        *(_QWORD *)&v476[40] = 0;
        v245 = *(_QWORD *)(v244[18] + 144);
        v482 = *(_OWORD *)v381;
        v483 = *(_OWORD *)&v381[16];
        *(_QWORD *)&v484 = *(_QWORD *)&v381[32];
        memset(&v470[8], 0, 28);
        *(_QWORD *)&v470[40] = 0;
        *(_QWORD *)&v470[48] = 0;
        v471 = 0uLL;
        *(_QWORD *)((char *)&v472 + 4) = 2;
        *(_DWORD *)v470 = 0;
        v473 = 0u;
        v474 = 0u;
        sub_22E3C113C((uint64_t)v470, (__int128 *)v476, v238, 2, &v482, v245);
        v388[1] = 0;
        v388[0] = 0;
        v389 = 0;
        v387 = 0;
        sub_22EFD4A20(v240, (uint64_t *)v388, &v387);
        v246 = v387;
        if (v387)
        {
          v488 = v473;
          v489 = v474;
          v490 = v475;
          v484 = *(_OWORD *)&v470[32];
          v485 = *(_OWORD *)&v470[48];
          v486 = v471;
          v487 = v472;
          v482 = *(_OWORD *)v470;
          v483 = *(_OWORD *)&v470[16];
          sub_22E4EC638(v355, (uint64_t)&v482, v387, (uint64_t)v476);
          v379[6] = v473;
          v379[7] = v474;
          v380 = v475;
          v379[2] = *(_OWORD *)&v470[32];
          v379[3] = *(_OWORD *)&v470[48];
          v379[4] = v471;
          v379[5] = v472;
          v379[0] = *(_OWORD *)v470;
          v379[1] = *(_OWORD *)&v470[16];
          sub_22E4DD05C((uint64_t)v355, (uint64_t)v379, v246, (uint64_t)v381);
          v365 = *(_OWORD *)&v476[8];
          v366 = *(_OWORD *)&v476[24];
          v367 = *(_OWORD *)&v476[40];
          sub_22E5E0440((uint64_t)v355, (uint64_t)&v365, v477, &v374);
          *(_QWORD *)&v362[0] = v374;
          v365 = *(_OWORD *)&v470[8];
          v366 = *(_OWORD *)&v470[24];
          v367 = *(_OWORD *)&v470[40];
          sub_22E5E0440((uint64_t)v355, (uint64_t)&v365, v471, &v374);
          *(_QWORD *)&v365 = v374;
          sub_22E5CDF1C((uint64_t)&v374, (uint64_t)v352, (uint64_t *)v362, (uint64_t *)&v365);
          v247 = v428;
          if (v428 >= (unint64_t)HIDWORD(v428))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v247 = v428;
          }
          v248 = &v427[2 * v247];
          *v248 = v232;
          v248[1] = 0;
          LODWORD(v428) = v428 + 1;
          v365 = *(_OWORD *)&v476[8];
          v366 = *(_OWORD *)&v476[24];
          v367 = *(_OWORD *)&v476[40];
          sub_22E5E0440((uint64_t)v355, (uint64_t)&v365, v477, &v374);
          v249 = v374;
          v250 = v431;
          if (v431 >= (unint64_t)HIDWORD(v431))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v250 = v431;
          }
          v251 = &v430[2 * v250];
          *v251 = v249;
          v251[1] = 0;
          LODWORD(v431) = v431 + 1;
          v365 = *(_OWORD *)&v381[8];
          v366 = *(_OWORD *)&v381[24];
          v367 = *(_OWORD *)&v381[40];
          sub_22E5E0440((uint64_t)v355, (uint64_t)&v365, v382, &v374);
          v252 = v374;
          v253 = v434;
          if (v434 >= (unint64_t)HIDWORD(v434))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v253 = v434;
          }
          v433[v253] = v252;
          LODWORD(v434) = v434 + 1;
          v254 = v355 + 34;
          v255 = sub_22F28CE84((uint64_t)v355, *(_QWORD *)(*(_QWORD *)(v355[18] + 144) + 16816));
          v256 = v355[4];
          WORD4(v376) = 257;
          v257 = sub_22E3BF45C(v254, (uint64_t)v255, v256, 1, (uint64_t)&v374);
          v258 = v437;
          if (v437 >= (unint64_t)HIDWORD(v437))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v258 = v437;
          }
          v436[v258] = v257;
          v259 = v440;
          LODWORD(v437) = v437 + 1;
          if (v440 >= (unint64_t)HIDWORD(v440))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v259 = v440;
          }
          v439[v259] = 0xFFFF000000000310;
          LODWORD(v440) = v440 + 1;
          v260 = v443;
          if (v443 >= (unint64_t)HIDWORD(v443))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v260 = v443;
          }
          *(_QWORD *)&v442[8 * v260] = 0;
          LODWORD(v443) = v443 + 1;
        }
        v261 = *(_QWORD *)(v240 + 128);
        if (!v261
          || ((*(unsigned __int16 *)(v261 + 8) | (*(unsigned __int8 *)(v261 + 10) << 16)) & 0x100000) == 0
          || (v262 = ((unint64_t)*(unsigned int *)(v261 + 104) >> 5) & 0x7FFF, !(_DWORD)v262))
        {
LABEL_318:
          llvm::deallocate_buffer(v388[0], (void *)(16 * v389));
          goto LABEL_319;
        }
        v265 = *(uint64_t **)(v261 + 128);
        v266 = &v265[2 * v262];
        while (2)
        {
          v267 = *v265 & 0xFFFFFFFFFFFFFFF8;
          if (!v267 || (*(_DWORD *)(v267 + 28) & 0x7Fu) - 60 > 6)
            goto LABEL_365;
          v268 = (*v265 & 0xFFFFFFFFFFFFFFFCLL) != 4 && (*v265 & 2) == 0;
          if (!v268
            && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v267 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                        + 16) != 39)
          {
            goto LABEL_365;
          }
          if (v389)
          {
            LODWORD(v269) = (v389 - 1) & ((v267 >> 4) ^ (v267 >> 9));
            v270 = (llvm *)((char *)v388[0] + 16 * v269);
            v271 = *(_QWORD *)v270;
            if (*(_QWORD *)v270 != v267)
            {
              v272 = 1;
              while (v271 != -4096)
              {
                v273 = v269 + v272++;
                v269 = v273 & (v389 - 1);
                v271 = *((_QWORD *)v388[0] + 2 * v269);
                if (v271 == v267)
                {
                  v270 = (llvm *)((char *)v388[0] + 16 * v269);
                  goto LABEL_348;
                }
              }
              v270 = (llvm *)((char *)v388[0] + 16 * v389);
            }
          }
          else
          {
            v270 = v388[0];
          }
LABEL_348:
          v384 = v473;
          v385 = v474;
          v386 = v475;
          *(_OWORD *)&v381[32] = *(_OWORD *)&v470[32];
          *(_OWORD *)&v381[48] = *(_OWORD *)&v470[48];
          v382 = v471;
          v383 = v472;
          *(_OWORD *)v381 = *(_OWORD *)v470;
          *(_OWORD *)&v381[16] = *(_OWORD *)&v470[16];
          sub_22E4EC638(v355, (uint64_t)v381, *((_QWORD *)v270 + 1), (uint64_t)v476);
          v274 = *v265;
          if ((unint64_t)*v265 < 4 || (v274 & 0xFFFFFFFFFFFFFFFCLL) == 4 || (v274 & 2) != 0)
          {
            v362[6] = v479;
            v362[7] = v480;
            v363 = v481;
            v362[2] = *(_OWORD *)&v476[32];
            v362[3] = *(_OWORD *)&v476[48];
            v362[4] = v477;
            v362[5] = v478;
            v362[0] = *(_OWORD *)v476;
            v362[1] = *(_OWORD *)&v476[16];
            sub_22E4D7B28(v355, (uint64_t)v362, *(_DWORD *)(v240 + 24), (uint64_t)&v374);
            v390 = *(_OWORD *)&v476[8];
            v391 = *(_OWORD *)&v476[24];
            v392 = *(_OWORD *)&v476[40];
            sub_22E5E0440((uint64_t)v355, (uint64_t)&v390, v477, v393);
            v364 = v393[0];
            v390 = *(_OWORD *)&v470[8];
            v391 = *(_OWORD *)&v470[24];
            v392 = *(_OWORD *)&v470[40];
            sub_22E5E0440((uint64_t)v355, (uint64_t)&v390, v471, v393);
            *(_QWORD *)&v390 = v393[0];
            sub_22E5CDF1C((uint64_t)v393, (uint64_t)v352, &v364, (uint64_t *)&v390);
            v275 = v428;
            if (v428 >= (unint64_t)HIDWORD(v428))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v275 = v428;
            }
            v276 = &v427[2 * v275];
            *v276 = v267;
            v276[1] = 0;
            LODWORD(v428) = v428 + 1;
            v390 = *(_OWORD *)&v476[8];
            v391 = *(_OWORD *)&v476[24];
            v392 = *(_OWORD *)&v476[40];
            sub_22E5E0440((uint64_t)v355, (uint64_t)&v390, v477, v393);
            v277 = v393[0];
            v278 = v431;
            if (v431 >= (unint64_t)HIDWORD(v431))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v278 = v431;
            }
            v279 = &v430[2 * v278];
            *v279 = v277;
            v279[1] = 0;
            v280 = v434;
            LODWORD(v431) = v431 + 1;
            v281 = v374;
            if (v434 >= (unint64_t)HIDWORD(v434))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v280 = v434;
            }
            v433[v280] = v281;
            LODWORD(v434) = v434 + 1;
            v282 = llvm::ConstantInt::get();
LABEL_358:
            v283 = v282;
            v284 = v437;
            if (v437 >= (unint64_t)HIDWORD(v437))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v284 = v437;
            }
            v436[v284] = v283;
            LODWORD(v437) = v437 + 1;
            v285 = v440;
            if (v440 >= (unint64_t)HIDWORD(v440))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v285 = v440;
            }
            v439[v285] = 0xFFFF000000000310;
            LODWORD(v440) = v440 + 1;
            v286 = v443;
            if (v443 >= (unint64_t)HIDWORD(v443))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v286 = v443;
            }
            *(_QWORD *)&v442[8 * v286] = 0;
            LODWORD(v443) = v443 + 1;
LABEL_365:
            v265 += 2;
            if (v265 == v266)
              goto LABEL_318;
            continue;
          }
          break;
        }
        v371 = v473;
        v372 = v474;
        v373 = v475;
        v367 = *(_OWORD *)&v470[32];
        v368 = *(_OWORD *)&v470[48];
        v369 = v471;
        v370 = v472;
        v365 = *(_OWORD *)v470;
        v366 = *(_OWORD *)&v470[16];
        sub_22E4DD05C((uint64_t)v355, (uint64_t)&v365, *((_QWORD *)v270 + 1), (uint64_t)&v374);
        v390 = *(_OWORD *)&v476[8];
        v391 = *(_OWORD *)&v476[24];
        v392 = *(_OWORD *)&v476[40];
        sub_22E5E0440((uint64_t)v355, (uint64_t)&v390, v477, v393);
        v364 = v393[0];
        v390 = *(_OWORD *)&v470[8];
        v391 = *(_OWORD *)&v470[24];
        v392 = *(_OWORD *)&v470[40];
        sub_22E5E0440((uint64_t)v355, (uint64_t)&v390, v471, v393);
        *(_QWORD *)&v390 = v393[0];
        sub_22E5CDF1C((uint64_t)v393, (uint64_t)v352, &v364, (uint64_t *)&v390);
        v287 = v428;
        if (v428 >= (unint64_t)HIDWORD(v428))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v287 = v428;
        }
        v288 = &v427[2 * v287];
        *v288 = v267;
        v288[1] = 0;
        LODWORD(v428) = v428 + 1;
        v390 = *(_OWORD *)&v476[8];
        v391 = *(_OWORD *)&v476[24];
        v392 = *(_OWORD *)&v476[40];
        sub_22E5E0440((uint64_t)v355, (uint64_t)&v390, v477, v393);
        v289 = v393[0];
        v290 = v431;
        if (v431 >= (unint64_t)HIDWORD(v431))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v290 = v431;
        }
        v291 = &v430[2 * v290];
        *v291 = v289;
        v291[1] = 0;
        LODWORD(v431) = v431 + 1;
        v390 = v375;
        v391 = v376;
        v392 = v377;
        sub_22E5E0440((uint64_t)v355, (uint64_t)&v390, v378, v393);
        v292 = v393[0];
        v293 = v434;
        if (v434 >= (unint64_t)HIDWORD(v434))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v293 = v434;
        }
        v433[v293] = v292;
        LODWORD(v434) = v434 + 1;
        v294 = v355;
        v295 = *(_QWORD *)((*(_QWORD *)(v267 + 48) & 0xFFFFFFFFFFFFFFF0) + 8);
        v296 = *(_QWORD *)(v295 & 0xFFFFFFFFFFFFFFF0);
        if (v296 && (v297 = *(_DWORD *)(v296 + 16), (v297 & 0xFE) == 0x28))
        {
LABEL_380:
          if ((v297 & 0x100000) != 0)
          {
            do
            {
              v296 = *(_QWORD *)(*(_QWORD *)(v296 + 32) & 0xFFFFFFFFFFFFFFF0);
              if (!v296 || (v301 = *(_DWORD *)(v296 + 16), (v301 & 0xFE) != 0x28))
              {
                v296 = sub_22F10CF48(v296);
                v301 = *(_DWORD *)(v296 + 16);
              }
              v2 = v333;
            }
            while ((v301 & 0x100000) != 0);
          }
          v298 = *(_QWORD *)(v296 + 32);
        }
        else
        {
          v298 = *(_QWORD *)(v267 + 48) & 7 | v295;
          if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v296 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
          {
            v296 = sub_22F10CF48(v296);
            if (v296)
            {
              v297 = *(_DWORD *)(v296 + 16);
              goto LABEL_380;
            }
          }
        }
        v299 = sub_22F28CE84((uint64_t)v294, v298);
        v300 = v355[4];
        v394 = 257;
        v282 = sub_22E3BF45C(v294 + 34, (uint64_t)v299, v300, 1, (uint64_t)v393);
        goto LABEL_358;
      }
LABEL_320:
      if (v421[0])
      {
        sub_22E5C27C8((uint64_t)v451, (uint64_t)&v395);
        sub_22E5C2354((uint64_t)&v354, (uint64_t)v451, (uint64_t)&v439, (uint64_t)&v395, 0, LODWORD(v397[8]) != 0);
      }
      sub_22E5C27C8((uint64_t)v451, (uint64_t)&v427);
      sub_22E5B45E0((uint64_t)&v395);
      sub_22E5B45E0((uint64_t)&v427);
      v23 += 2;
      do
        v22 = *(_QWORD *)(v22 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v22 && (*(_DWORD *)(v22 + 28) & 0x7Fu) - 49 > 2);
      ++v25;
      if (v23 == v24)
        goto LABEL_2;
    }
    v82 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v344 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v83 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v82 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    if (v83 != 39 && v83 != 32)
    {
      if ((v83 & 0xFEu) - 2 <= 3)
      {
        v84 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v344 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        if (v82)
          goto LABEL_418;
        while (1)
        {
LABEL_419:
          if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v84 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3)
            goto LABEL_425;
          v313 = sub_22F10CF48(v84);
          v81 = v344;
          if (!v313)
            goto LABEL_91;
          while (1)
          {
            v84 = *(_QWORD *)(*(_QWORD *)(v313 + 32) & 0xFFFFFFFFFFFFFFF0);
            if (!v84)
              break;
LABEL_418:
            if ((*(_DWORD *)(v84 + 16) & 0xFEu) - 6 <= 0xFFFFFFFB)
              goto LABEL_419;
            v313 = v84;
          }
        }
      }
LABEL_148:
      v117 = sub_22F10C2A4(v82);
      if (v117 && (*(_DWORD *)(v117 + 28) & 0x7Fu) - 35 <= 2)
      {
        sub_22E5CBA60((uint64_t)&v354, v117, (uint64_t)&v482, 0);
      }
      else
      {
        v118 = sub_22F10C2A4(v82);
        if (v118 && (*(_DWORD *)(v118 + 28) & 0x7Eu) - 34 >= 4)
          v118 = 0;
        v119 = sub_22EFC3B90(v118);
        sub_22F271D38((uint64_t)&v482, v119, 0);
      }
      goto LABEL_153;
    }
LABEL_90:
    v84 = *(_QWORD *)(sub_22F10ACF8(v82) & 0xFFFFFFFFFFFFFFF0);
    while (1)
    {
LABEL_91:
      if (v82 == v84)
        goto LABEL_148;
      v82 = *(_QWORD *)(*(_QWORD *)(v84 + 8) & 0xFFFFFFFFFFFFFFF0);
      v85 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v82 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v85 == 39 || v85 == 32)
        goto LABEL_90;
      if ((v85 & 0xFEu) - 2 > 3)
        goto LABEL_148;
      v84 = *(_QWORD *)(*(_QWORD *)(v84 + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v82)
      {
        do
        {
          if ((*(_DWORD *)(v84 + 16) & 0xFEu) - 6 <= 0xFFFFFFFB)
            break;
          v86 = v84;
LABEL_101:
          v84 = *(_QWORD *)(*(_QWORD *)(v86 + 32) & 0xFFFFFFFFFFFFFFF0);
        }
        while (v84);
      }
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v84 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3)
      {
LABEL_425:
        v81 = v344;
      }
      else
      {
        v86 = sub_22F10CF48(v84);
        v81 = v344;
        if (v86)
          goto LABEL_101;
      }
    }
  }
LABEL_2:
  v7 = v461;
  if ((_DWORD)v461)
  {
    v8 = 0;
    v9 = v352[0];
    v10 = v353;
    v11 = v353 - 1;
    v12 = 1;
    while (v460[v8] != 0xFFFF000000000310)
    {
LABEL_19:
      ++v8;
      ++v12;
      if (v8 == v7)
        goto LABEL_20;
    }
    if (v10)
    {
      v13 = v453[2 * v8];
      v14 = ((v13 >> 4) ^ (v13 >> 9)) & v11;
      v15 = *((_QWORD *)v9 + 2 * v14);
      if (v13 == v15)
      {
LABEL_7:
        v16 = *((_QWORD *)v9 + 2 * v14 + 1);
        goto LABEL_13;
      }
      v17 = 1;
      while (v15 != -4096)
      {
        v18 = v14 + v17++;
        v14 = v18 & v11;
        v15 = *((_QWORD *)v9 + 2 * v14);
        if (v13 == v15)
          goto LABEL_7;
      }
    }
    v16 = 0;
LABEL_13:
    v19 = v12;
    while (1)
    {
      v20 = v19 - 1;
      if (v19 == 1)
        break;
      v21 = v456[(v19-- - 2)];
      if (v21 == v16)
        goto LABEL_18;
    }
    v20 = 0x100000000;
LABEL_18:
    v460[v8] = (v20 << 48) | 0x310;
    goto LABEL_19;
  }
LABEL_20:
  sub_22E5BCBA4();
  LOWORD(v395) = 0;
  v396 = 0u;
  memset(v397, 0, 41);
  memset((char *)&v397[5] + 4, 0, 24);
  sub_22E5CA3DC(v2, (uint64_t)v451, (uint64_t)&v395, (llvm::OpenMPIRBuilder *)(v331 + 6), 0);
  LOBYTE(v427) = 0;
  sub_22E5CB6B4(v2, &v396, (_QWORD *)&v396 + 1, v397, &v397[1], &v397[4], &v397[3], (uint64_t)&v395, &v427);
  v314 = *(_QWORD *)(v332 + 24);
  *(_DWORD *)(v314 + 192) = HIDWORD(v397[5]);
  v315 = *(_QWORD *)(v2 + 96);
  v316 = *(unsigned __int8 *)(v331[1] + 130);
  *(_QWORD *)v314 = v396;
  *(_QWORD *)(v314 + 8) = v315;
  *(_QWORD *)(v314 + 16) = v316;
  *(_DWORD *)(v314 + 24) = 0;
  *(_QWORD *)(v314 + 32) = 0;
  *(_QWORD *)(v314 + 40) = 0;
  v317 = *(_QWORD *)(v2 + 96);
  v318 = *(unsigned __int8 *)(v331[1] + 130);
  v319 = *(_QWORD *)(v332 + 24);
  v320 = v397[0];
  *(_QWORD *)(v319 + 48) = *((_QWORD *)&v396 + 1);
  *(_QWORD *)(v319 + 56) = v317;
  *(_QWORD *)(v319 + 64) = v318;
  *(_DWORD *)(v319 + 72) = 0;
  *(_QWORD *)(v319 + 80) = 0;
  *(_QWORD *)(v319 + 88) = 0;
  v321 = *(_QWORD *)(v2 + 32);
  v322 = *(unsigned __int8 *)(v331[1] + 130);
  v323 = *(_QWORD *)(v332 + 24);
  *(_QWORD *)(v323 + 96) = v320;
  *(_QWORD *)(v323 + 104) = v321;
  *(_QWORD *)(v323 + 112) = v322;
  *(_DWORD *)(v323 + 120) = 0;
  *(_QWORD *)(v323 + 128) = 0;
  *(_QWORD *)(v323 + 136) = 0;
  v324 = *(_QWORD *)(v2 + 96);
  v325 = *(unsigned __int8 *)(v331[1] + 130);
  v326 = *(_QWORD *)(v332 + 24);
  v327 = v397[1];
  *(_QWORD *)(v326 + 144) = v397[3];
  *(_QWORD *)(v326 + 152) = v324;
  *(_QWORD *)(v326 + 160) = v325;
  *(_DWORD *)(v326 + 168) = 0;
  *(_QWORD *)(v326 + 176) = 0;
  *(_QWORD *)(v326 + 184) = 0;
  **(_QWORD **)(v332 + 32) = v327;
  **(_QWORD **)(v332 + 40) = v397[4];
  v328 = *(_QWORD *)(v332 + 16);
  if (*(_BYTE *)(v332 + 56))
  {
    v427 = *(_QWORD **)(v332 + 8);
    v428 = (uint64_t)sub_22E5CE380;
    v429[0] = 0;
    sub_22F290A9C(v2, v328, (uint64_t)&v427, *(__int128 **)(v332 + 24));
  }
  else
  {
    v329 = *(unsigned int *)(v328 + 8);
    v427 = *(_QWORD **)(v332 + 8);
    v428 = (uint64_t)sub_22E5CE380;
    v429[0] = 0;
    (*(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD **, _QWORD))(*v331 + 360))(v331, v2, v329, &v427, 0);
  }
  llvm::deallocate_buffer((llvm *)v397[6], (void *)(56 * LODWORD(v397[8])));
  llvm::deallocate_buffer(v350[0], (void *)(8 * v351));
  llvm::deallocate_buffer(v352[0], (void *)(16 * v353));
  llvm::deallocate_buffer(v360, (void *)(16 * v361));
  sub_22F284814((uint64_t)v358, v359);
  llvm::deallocate_buffer(v358, (void *)(88 * v359));
  llvm::deallocate_buffer(v356, (void *)(16 * v357));
  return sub_22E5B45E0((uint64_t)v451);
}

uint64_t sub_22E5C9D18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  _DWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  _DWORD *v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  _DWORD *v31;
  BOOL v32;
  unsigned int *v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  _DWORD *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t *v54;
  _QWORD *v55;
  unint64_t v56;
  unint64_t *v57;
  int v58;
  unsigned int *v59;
  uint64_t v60;
  unsigned int *v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int *i;
  unsigned int *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  int *v78;
  uint64_t *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  unsigned int *v91;
  uint64_t v92;
  uint64_t v94;
  unsigned int *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  _DWORD *v99;
  uint64_t *v100;
  int v101;
  unint64_t v102;
  int v103;
  int *v104;
  uint64_t v105;
  int v106;
  uint64_t v107[3];
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = a1 + 16;
  *(_QWORD *)(a1 + 40) = 0;
  v105 = a1 + 40;
  *(_QWORD *)(a1 + 64) = 0;
  v5 = a1 + 64;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  v6 = *(unsigned int **)(a2 + 24);
  if (v6)
  {
    v7 = a2;
    v8 = v6 + 4;
    v9 = *v6;
    if ((_DWORD)v9)
    {
      v10 = 0;
      while (*(_DWORD *)(*(_QWORD *)&v8[v10] + 8) != 29)
      {
        v10 += 2;
        if (2 * v9 == v10)
          goto LABEL_21;
      }
      v11 = &v8[v10];
    }
    else
    {
      v11 = v6 + 4;
    }
    v12 = &v8[2 * v9];
    if (v11 != v12)
    {
      v13 = *(_DWORD **)v11;
LABEL_11:
      v14 = v13[4];
      if ((_DWORD)v14)
      {
        v15 = 0;
        v16 = 8 * v14;
        do
        {
          v17 = *(_QWORD *)(*(_QWORD *)&v13[v15 / 4 + 10] + 16);
          if (v17)
            v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 32))(v17);
          v107[0] = v17;
          LOBYTE(v108) = *v13 == 0;
          sub_22F285F28((uint64_t)&v109, v4, v107, &v108);
          v15 += 8;
        }
        while (v16 != v15);
      }
      v18 = v11 + 2;
      while (v18 != v12)
      {
        v19 = *(_DWORD **)v18;
        v18 += 2;
        v13 = v19;
        if (v19[2] == 29)
        {
          v11 = v18 - 2;
          goto LABEL_11;
        }
      }
      v6 = *(unsigned int **)(v7 + 24);
    }
LABEL_21:
    if (v6)
    {
      v20 = v6 + 4;
      v21 = *v6;
      if ((_DWORD)v21)
      {
        v22 = 0;
        while (*(_DWORD *)(*(_QWORD *)&v20[v22] + 8) != 91)
        {
          v22 += 2;
          if (2 * v21 == v22)
            goto LABEL_49;
        }
        v23 = &v20[v22];
      }
      else
      {
        v23 = v6 + 4;
      }
      v24 = &v20[2 * v21];
      if (v23 != v24)
      {
        v25 = *(_QWORD *)v23;
LABEL_31:
        v26 = *(unsigned int *)(v25 + 16);
        if ((_DWORD)v26)
        {
          v27 = 0;
          v28 = v25 + 24;
          v29 = 2 * v26;
          while (1)
          {
            v30 = *(unsigned __int8 **)(v28 + 8 * (v27 + 1));
            if (!v30 || *v30 != 161)
              break;
            v31 = (_DWORD *)*((_QWORD *)v30 + 2);
            if (v31)
              goto LABEL_42;
LABEL_43:
            v107[0] = (uint64_t)v31;
            LOBYTE(v108) = 1;
            sub_22F285F28((uint64_t)&v109, v4, v107, &v108);
LABEL_39:
            v27 += 2;
            if (v29 == v27)
              goto LABEL_44;
          }
          v31 = (_DWORD *)*((_QWORD *)sub_22EFFA6B0(*(unsigned __int8 **)(v28 + 8 * v27)) + 2);
          if (v31)
            v32 = (v31[7] & 0x7Fu) - 67 >= 0xFFFFFFF9;
          else
            v32 = 0;
          if (!v32)
            goto LABEL_39;
LABEL_42:
          v31 = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v31 + 32))(v31);
          goto LABEL_43;
        }
LABEL_44:
        v33 = v23 + 2;
        while (v33 != v24)
        {
          v34 = *(_QWORD *)v33;
          v33 += 2;
          v25 = v34;
          if (*(_DWORD *)(v34 + 8) == 91)
          {
            v23 = v33 - 2;
            goto LABEL_31;
          }
        }
        v6 = *(unsigned int **)(v7 + 24);
      }
LABEL_49:
      if (v6)
      {
        v35 = v6 + 4;
        v36 = *v6;
        v94 = v5;
        if ((_DWORD)v36)
        {
          v37 = 0;
          while (*(_DWORD *)(*(_QWORD *)&v35[v37] + 8) != 42)
          {
            v37 += 2;
            if (2 * v36 == v37)
              goto LABEL_82;
          }
          v38 = &v35[v37];
        }
        else
        {
          v38 = v6 + 4;
        }
        v39 = &v35[2 * v36];
        if (v38 != v39)
        {
          v40 = *(_QWORD *)v38;
          v96 = v7;
LABEL_59:
          v41 = *(unsigned int *)(v40 + 20);
          v42 = (uint64_t *)(v40 + 8 * *(unsigned int *)(v40 + 16) + 80);
          v43 = &v42[v41];
          v95 = v38;
          if ((_DWORD)v41)
            v44 = *(_DWORD *)v43;
          else
            v44 = 0;
          v45 = *(unsigned int *)(v40 + 28);
          if ((_DWORD)v45)
          {
            v46 = 0;
            v47 = *(unsigned int *)(v40 + 24);
            v48 = ((unint64_t)v43 + 4 * (v47 + v41) + 7) & 0xFFFFFFFFFFFFFFF8;
            v98 = v48 + 16 * v45;
            v49 = (_DWORD *)v43 + v41;
            v99 = &v49[v47];
            v101 = *(unsigned __int8 *)(v40 + 32);
            if (*(_BYTE *)(v40 + 32))
              v50 = (uint64_t *)(v40 + 8 * *(unsigned int *)(v40 + 16) + 80);
            else
              v50 = 0;
            v97 = 8 * *(unsigned __int8 *)(v40 + 32);
            do
            {
              v103 = v44;
              if (v101)
              {
                v52 = *v50;
                v51 = v43;
                if (*v50)
                  v52 = *(_QWORD *)(v52 + 16);
              }
              else
              {
                v51 = v43;
                v52 = 0;
              }
              v53 = (*v49 - v46);
              v54 = v42;
              v109 = *v42;
              v110 = v48;
              v111 = v53;
              v112 = v52;
              v55 = sub_22F286124(v105, &v109);
              v56 = *((unsigned int *)v55 + 4);
              if (v56 >= *((unsigned int *)v55 + 5))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v56 = *((unsigned int *)v55 + 4);
              }
              v57 = (unint64_t *)(v55[1] + 16 * v56);
              *v57 = v48;
              v57[1] = v53;
              ++*((_DWORD *)v55 + 4);
              ++v49;
              v43 = v51;
              v7 = v96;
              if (v49 == v99)
                break;
              v42 = v54;
              v44 = v103 - 1;
              if (v103 == 1)
              {
                v42 = v54 + 1;
                v58 = *((_DWORD *)v43 + 1);
                v43 = (uint64_t *)((char *)v43 + 4);
                v44 = v58;
              }
              v48 += 16 * (*(v49 - 1) - v46);
              v50 = (uint64_t *)((char *)v50 + v97);
              v46 = *(v49 - 1);
            }
            while (v48 != v98);
          }
          v59 = v95 + 2;
          while (v59 != v39)
          {
            v60 = *(_QWORD *)v59;
            v59 += 2;
            v40 = v60;
            if (*(_DWORD *)(v60 + 8) == 42)
            {
              v38 = v59 - 2;
              goto LABEL_59;
            }
          }
          v6 = *(unsigned int **)(v7 + 24);
        }
LABEL_82:
        if (v6)
        {
          v63 = *v6;
          v61 = v6 + 4;
          v62 = v63;
          if (v63)
          {
            v64 = 8 * v62;
            for (i = v61; *(_DWORD *)(*(_QWORD *)i + 8) != 46; i += 2)
            {
              v64 -= 8;
              if (!v64)
                return a1;
            }
          }
          else
          {
            i = v61;
          }
          v66 = &v61[2 * v62];
          if (i != v66)
          {
LABEL_90:
            v108 = 0;
            v67 = *(_QWORD *)i;
            v108 = v67;
            if (*(_DWORD *)(v67 + 120) == 1)
            {
              v68 = *(unsigned int *)(v67 + 16);
              v69 = *(unsigned int *)(v67 + 20);
              v70 = (uint64_t *)(v67 + 136 + 8 * (2 * v68));
              v71 = &v70[v69];
              v72 = (_DWORD)v69 ? *(_DWORD *)v71 : 0;
              v73 = *(unsigned int *)(v67 + 28);
              if ((_DWORD)v73)
              {
                v74 = 0;
                v75 = *(unsigned int *)(v67 + 24);
                v76 = *(unsigned __int8 *)(v67 + 32);
                v77 = ((unint64_t)v71 + 4 * (v75 + v69) + 7) & 0xFFFFFFFFFFFFFFF8;
                v100 = v71;
                v102 = v77 + 16 * v73;
                v78 = (int *)v71 + v69;
                v104 = &v78[v75];
                if (*(_BYTE *)(v67 + 32))
                  v79 = (uint64_t *)(v67 + 136 + 8 * v68);
                else
                  v79 = 0;
                while (1)
                {
                  if ((_DWORD)v76)
                  {
                    v80 = *v79;
                    if (*v79)
                      v80 = *(_QWORD *)(v80 + 16);
                  }
                  else
                  {
                    v80 = 0;
                  }
                  v81 = (*v78 - v74);
                  v82 = *v70;
                  v109 = v82;
                  v110 = v77;
                  v111 = v81;
                  v112 = v80;
                  if (!v82)
                    goto LABEL_111;
                  v106 = v72;
                  v83 = v76;
                  v84 = v70;
                  v85 = (uint64_t *)(*(_QWORD *)((*(_QWORD *)(v82 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
                  v86 = *v85;
                  if (*v85)
                  {
                    v87 = *(_DWORD *)(v86 + 16);
                    if ((v87 & 0xFE) == 0x28)
                      goto LABEL_118;
                  }
                  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v86 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
                  {
                    v86 = sub_22F10CF48(v86);
                    if (v86)
                      break;
                  }
LABEL_106:
                  v88 = sub_22F10C2A4(*v85);
                  v70 = v84;
                  v76 = v83;
                  v72 = v106;
                  if (v88)
                  {
                    if ((*(_DWORD *)(v88 + 28) & 0x7Fu) - 35 <= 2)
                    {
                      v89 = *(_QWORD *)(v88 + 128);
                      if (v89)
                      {
                        if (((*(unsigned __int16 *)(v89 + 8) | (*(unsigned __int8 *)(v89 + 10) << 16)) & 0x100000) != 0)
                          sub_22F2543D4((uint64_t)v107, v94, &v109, &v108);
                      }
                    }
                  }
LABEL_111:
                  if (v78 + 1 != v104)
                  {
                    if (!--v72)
                    {
                      ++v70;
                      v72 = *((_DWORD *)v100 + 1);
                      v100 = (uint64_t *)((char *)v100 + 4);
                    }
                    v77 += 16 * (*v78 - v74);
                    v79 += v76;
                    v74 = *v78++;
                    if (v77 != v102)
                      continue;
                  }
                  goto LABEL_125;
                }
                v87 = *(_DWORD *)(v86 + 16);
LABEL_118:
                if ((v87 & 0x100000) != 0)
                {
                  do
                  {
                    v86 = *(_QWORD *)(*(_QWORD *)(v86 + 32) & 0xFFFFFFFFFFFFFFF0);
                    if (v86)
                    {
                      v90 = *(_DWORD *)(v86 + 16);
                      if ((v90 & 0xFE) == 0x28)
                        continue;
                    }
                    v86 = sub_22F10CF48(v86);
                    v90 = *(_DWORD *)(v86 + 16);
                  }
                  while ((v90 & 0x100000) != 0);
                }
                v85 = (uint64_t *)(*(_QWORD *)(v86 + 32) & 0xFFFFFFFFFFFFFFF0);
                goto LABEL_106;
              }
            }
LABEL_125:
            v91 = i + 2;
            while (v91 != v66)
            {
              v92 = *(_QWORD *)v91;
              v91 += 2;
              if (*(_DWORD *)(v92 + 8) == 46)
              {
                i = v91 - 2;
                goto LABEL_90;
              }
            }
          }
        }
      }
    }
  }
  return a1;
}

void sub_22E5CA3DC(uint64_t a1, uint64_t a2, uint64_t a3, llvm::OpenMPIRBuilder *a4, int a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  llvm::LLVMContext *v52;
  uint64_t *v53;
  llvm::GetElementPtrInst *v54;
  uint64_t v55;
  uint64_t v56;
  llvm::Type **v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  BOOL v61;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  llvm::LLVMContext *v88;
  uint64_t OffloadMaptypes;
  llvm::Constant *v90;
  llvm::Type *v91;
  char v92;
  char *v93;
  char *v94;
  uint64_t v95;
  llvm::Type *v96;
  uint64_t v97;
  unint64_t v98;
  llvm::Type **v99;
  llvm::LLVMContext *v100;
  uint64_t *v101;
  llvm::GetElementPtrInst *v102;
  uint64_t v103;
  void *v104;
  llvm::Type *v105;
  unint64_t v106;
  llvm::Type **v107;
  llvm::LLVMContext *v108;
  uint64_t *v109;
  llvm::GetElementPtrInst *v110;
  uint64_t v111;
  uint64_t v112;
  llvm::Type *v113;
  unint64_t v114;
  llvm::PointerType *v115;
  unint64_t v116;
  llvm::LLVMContext *v117;
  uint64_t *v118;
  llvm::GetElementPtrInst *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  llvm::Type **v124;
  uint64_t v125;
  uint64_t v126;
  llvm::Type **v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t OffloadMapnames;
  uint64_t v137;
  uint64_t v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  _OWORD v157[3];
  _QWORD v158[3];
  int v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD v162[3];
  int v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD v166[3];
  int v167;
  uint64_t v168;
  uint64_t v169;
  _OWORD v170[3];
  void *v171[2];
  uint64_t v172;
  void *v173[2];
  uint64_t v174;
  void *__dst[2];
  uint64_t v176;
  __int128 v177;
  unint64_t v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  __int128 v182;
  uint64_t v183;
  int v184;
  __int128 v185;
  int v186;
  _QWORD v187[3];
  int v188;
  uint64_t v189;
  uint64_t v190;
  __int128 v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  _OWORD v196[8];
  uint64_t v197;
  _OWORD v198[8];
  uint64_t v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  uint64_t v208;
  _OWORD v209[8];
  uint64_t v210;
  void *__src[2];
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  uint64_t v219;
  _BYTE v220[32];
  __int16 v221;
  _QWORD v222[3];
  int v223;
  uint64_t v224;
  uint64_t v225;
  _OWORD v226[3];
  uint64_t v227;
  unsigned int v228;
  _OWORD v229[2];
  uint64_t v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  uint64_t v239;
  _BYTE v240[32];
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  uint64_t v247;
  void *__p[2];
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  uint64_t v256;
  void *v257[2];
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  uint64_t v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  uint64_t v274;
  uint64_t v275;

  v6 = a3;
  v7 = a2;
  v275 = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD *)(a1 + 144);
  v10 = *(_QWORD *)(v9 + 144);
  *(_OWORD *)(a3 + 49) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 8) = 0u;
  v11 = *(unsigned int *)(a2 + 88);
  *(_DWORD *)(a3 + 68) = v11;
  if (!(_DWORD)v11)
    goto LABEL_2;
  DWORD2(v209[0]) = 32;
  *(_QWORD *)&v209[0] = v11;
  v13 = sub_22EF5FE30(v10, *(_QWORD *)(v10 + 16816), (const llvm::APInt *)v209, 0, 0, 0);
  *(_QWORD *)&v266 = ".offload_baseptrs";
  LOWORD(v268) = 259;
  *(_QWORD *)(v6 + 8) = sub_22F25E4D4(a1, v13, (uint64_t)&v266, 0) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)&v266 = ".offload_ptrs";
  LOWORD(v268) = 259;
  *(_QWORD *)(v6 + 16) = sub_22F25E4D4(a1, v13, (uint64_t)&v266, 0) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)&v266 = ".offload_mappers";
  LOWORD(v268) = 259;
  v14 = v13;
  v7 = a2;
  v15 = sub_22F25E4D4(a1, v14, (uint64_t)&v266, 0);
  if (v15 <= 7)
    v17 = 0;
  else
    v17 = v15 & 0xFFFFFFFFFFFFFFF8;
  if (v15 <= 7)
    v18 = 0;
  else
    v18 = v16 & 0xFFFFFFFFFFFFFFF8;
  v19 = 1 << (v16 & 7 | (8 * (v15 & 7)));
  if (v15 < 8)
    v19 = 0;
  v146 = v19;
  v148 = v18;
  v150 = v17;
  *(_QWORD *)(v6 + 48) = v17;
  v143 = sub_22EF60A6C(v10, 64, 1);
  v20 = *(unsigned int *)(a2 + 216);
  v21 = llvm::ConstantInt::get();
  *(_QWORD *)&v266 = &v267;
  *((_QWORD *)&v266 + 1) = 0x600000000;
  sub_22E4639CC((uint64_t)&v266, v20, v21);
  v22 = *(unsigned int *)(a2 + 216);
  *(_QWORD *)&v200 = 1;
  v154 = v9;
  if (v22 > 0x39)
  {
    v23 = operator new();
    *(_QWORD *)v23 = v23 + 16;
    *(_QWORD *)(v23 + 8) = 0x600000000;
    sub_22E47EDD0(v23, (v22 + 63) >> 6, 0);
    *(_DWORD *)(v23 + 64) = v22;
    LODWORD(v22) = *(_DWORD *)(a2 + 216);
  }
  else
  {
    v23 = (v22 << 58) | 1;
  }
  *(_QWORD *)&v200 = v23;
  if ((_DWORD)v22)
  {
    v58 = 0;
    do
    {
      v59 = *(_QWORD *)(*(_QWORD *)(a2 + 208) + 8 * v58);
      v60 = *(unsigned __int8 *)(v59 + 16);
      if (v59)
        v61 = v60 > 0x14;
      else
        v61 = 1;
      if (v61 || v60 < 4 || v60 == 5)
      {
        if ((v200 & 1) != 0)
          *(_QWORD *)&v200 = v200 & 0xFC00000000000000 | (2
                                                          * ((((unint64_t)v200 >> 1) & ~(-1 << ((unint64_t)v200 >> 58)) | (1 << v58)) & ~(-1 << ((unint64_t)v200 >> 58)))) | 1;
        else
          *(_QWORD *)(*(_QWORD *)v200 + 8 * (v58 >> 6)) |= 1 << v58;
      }
      else if (a5 && (*(_QWORD *)(*(_QWORD *)(a2 + 256) + 8 * v58) & 0x100000000000) != 0)
      {
        *(_QWORD *)(v266 + 8 * v58) = llvm::ConstantInt::get();
      }
      else
      {
        *(_QWORD *)(v266 + 8 * v58) = v59;
      }
      ++v58;
    }
    while (v22 != v58);
  }
  v152 = v10;
  if ((sub_22E5CE22C((unint64_t *)&v200) & 1) == 0)
  {
    llvm::ArrayType::get(*(llvm::ArrayType **)(v9 + 32), (llvm::Type *)DWORD2(v266));
    llvm::ConstantArray::get();
    v64 = *(_QWORD *)(v9 + 808);
    v257[0] = "offload_sizes";
    v257[1] = (void *)13;
    sub_22F27BE70((std::string *)__p, v64, (uint64_t)v257, 1);
    v65 = llvm::User::operator new((llvm::User *)0x58);
    LOWORD(v259) = 260;
    v257[0] = __p;
    v66 = llvm::GlobalVariable::GlobalVariable();
    *(_DWORD *)(v66 + 32) = *(_DWORD *)(v66 + 32) & 0xFFFFFF3F | 0x80;
    v6 = a3;
    if ((v200 & 1) != 0)
    {
      v68 = v10;
      if ((((unint64_t)v200 >> 1) & ~(-1 << ((unint64_t)v200 >> 58))) != 0)
      {
LABEL_79:
        v71 = sub_22EF5FE30(v68, v143, (const llvm::APInt *)v209, 0, 0, 0);
        v257[0] = ".offload_sizes";
        LOWORD(v259) = 259;
        v145 = v71;
        v72 = sub_22F25E4D4(a1, v71, (uint64_t)v257, 0);
        v74 = 0;
        if (v72 <= 7)
          v75 = 0;
        else
          v75 = v72 & 0xFFFFFFFFFFFFFFF8;
        if (v72 <= 7)
          v76 = 0;
        else
          v76 = v73 & 0xFFFFFFFFFFFFFFF8;
        if (v72 >= 8)
          v74 = 1 << (v73 & 7 | (8 * (v72 & 7)));
        *(_QWORD *)&v240[12] = 0;
        *(_QWORD *)&v240[4] = 0;
        v77 = llvm::PointerType::get();
        LOWORD(v259) = 257;
        v78 = sub_22E3C1338((uint64_t *)(a1 + 272), v65, v77, (uint64_t)v257);
        *(_QWORD *)&v182 = v75;
        *((_QWORD *)&v182 + 1) = v76;
        v9 = v154;
        v183 = v74;
        v184 = 0;
        v185 = *(_OWORD *)v240;
        v186 = *(_DWORD *)&v240[16];
        v79 = *(_QWORD *)(v154 + 32);
        v80 = sub_22EF60A6C(v10, 64, 0);
        *(_QWORD *)&v177 = v78;
        *((_QWORD *)&v177 + 1) = v79;
        v178 = sub_22E62D754((_QWORD *)v154, v80, 0, 0, 0);
        v179 = 0;
        v181 = 0;
        v180 = 0;
        sub_22F28CE84(a1, v145);
        sub_22E3E4F38(a1 + 272, &v182, &v177);
        v6 = a3;
        *(_QWORD *)(a3 + 24) = v75;
        goto LABEL_88;
      }
    }
    else
    {
      v67 = *(unsigned int *)(v200 + 8);
      v68 = v10;
      if ((_DWORD)v67)
      {
        v69 = *(_QWORD **)v200;
        v70 = 8 * v67;
        while (!*v69)
        {
          ++v69;
          v70 -= 8;
          if (!v70)
            goto LABEL_78;
        }
        goto LABEL_79;
      }
    }
LABEL_78:
    *(_QWORD *)(a3 + 24) = v65;
LABEL_88:
    if (SBYTE7(v249) < 0)
      operator delete(__p[0]);
    goto LABEL_90;
  }
  v24 = sub_22EF5FE30(v10, v143, (const llvm::APInt *)v209, 0, 0, 0);
  v257[0] = ".offload_sizes";
  LOWORD(v259) = 259;
  v6 = a3;
  *(_QWORD *)(a3 + 24) = sub_22F25E4D4(a1, v24, (uint64_t)v257, 0) & 0xFFFFFFFFFFFFFFF8;
LABEL_90:
  v81 = *(unsigned int *)(a2 + 264);
  v257[0] = &v258;
  v257[1] = (void *)0x400000000;
  sub_22E47EDD0((uint64_t)v257, v81, 0);
  v82 = *(unsigned int *)(a2 + 264);
  if ((_DWORD)v82)
  {
    v83 = *(uint64_t **)(a2 + 256);
    v84 = v257[0];
    v85 = 8 * v82;
    do
    {
      v86 = *v83++;
      *v84++ = v86;
      v85 -= 8;
    }
    while (v85);
  }
  v87 = *(_QWORD *)(v9 + 808);
  __p[0] = "offload_maptypes";
  __p[1] = (void *)16;
  sub_22F27BE70((std::string *)__src, v87, (uint64_t)__p, 1);
  if (SBYTE7(v212) < 0)
  {
    sub_22E3BB2B4(__dst, __src[0], (unint64_t)__src[1]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)__src;
    v176 = v212;
  }
  OffloadMaptypes = llvm::OpenMPIRBuilder::createOffloadMaptypes();
  if (SHIBYTE(v176) < 0)
    operator delete(__dst[0]);
  *(_QWORD *)(v6 + 32) = OffloadMaptypes;
  if ((*(_QWORD *)(*(_QWORD *)(v9 + 184) + 96) & 0x1E00000000000000) != 0)
  {
    v130 = *(unsigned int *)(a2 + 8);
    __p[0] = &v249;
    __p[1] = (void *)0x400000000;
    sub_22E4639CC((uint64_t)__p, v130, 0);
    v131 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v131)
    {
      v132 = *(uint64_t **)a2;
      v133 = (uint64_t *)__p[0];
      v134 = 16 * v131;
      do
      {
        *v133++ = sub_22E5B43B0(a1, a4, v132);
        v132 += 2;
        v134 -= 16;
      }
      while (v134);
    }
    v9 = v154;
    v135 = *(_QWORD *)(v154 + 808);
    *(_QWORD *)&v231 = "offload_mapnames";
    *((_QWORD *)&v231 + 1) = 16;
    sub_22F27BE70((std::string *)v240, v135, (uint64_t)&v231, 1);
    if ((v240[23] & 0x80000000) != 0)
    {
      sub_22E3BB2B4(v173, *(void **)v240, *(unint64_t *)&v240[8]);
    }
    else
    {
      *(_OWORD *)v173 = *(_OWORD *)v240;
      v174 = *(_QWORD *)&v240[16];
    }
    v6 = a3;
    OffloadMapnames = llvm::OpenMPIRBuilder::createOffloadMapnames();
    if (SHIBYTE(v174) < 0)
      operator delete(v173[0]);
    *(_QWORD *)(a3 + 56) = OffloadMapnames;
    if ((v240[23] & 0x80000000) != 0)
      operator delete(*(void **)v240);
    if (__p[0] != &v249)
      free(__p[0]);
  }
  else
  {
    llvm::Type::getInt8Ty(*(llvm::Type **)(a1 + 336), v88);
    v90 = (llvm::Constant *)llvm::PointerType::get();
    *(_QWORD *)(v6 + 56) = llvm::Constant::getNullValue(v90, v91);
  }
  if (*(_BYTE *)(v6 + 1) && LODWORD(v257[1]))
  {
    v92 = 0;
    v93 = (char *)v257[0];
    v94 = (char *)v257[0] + 8 * LODWORD(v257[1]);
    do
    {
      while ((*(_QWORD *)v93 & 0x1000) != 0)
      {
        *(_QWORD *)v93 &= ~0x1000uLL;
        v93 += 8;
        v92 = 1;
        if (v93 == v94)
          goto LABEL_109;
      }
      v93 += 8;
    }
    while (v93 != v94);
    if ((v92 & 1) == 0)
      goto LABEL_115;
LABEL_109:
    if (SBYTE7(v212) < 0)
    {
      sub_22E3BB2B4(v171, __src[0], (unint64_t)__src[1]);
    }
    else
    {
      *(_OWORD *)v171 = *(_OWORD *)__src;
      v172 = v212;
    }
    v95 = llvm::OpenMPIRBuilder::createOffloadMaptypes();
    if (SHIBYTE(v172) < 0)
      operator delete(v171[0]);
    *(_QWORD *)(v6 + 40) = v95;
  }
LABEL_115:
  v96 = (llvm::Type *)*(unsigned int *)(v6 + 68);
  if ((_DWORD)v96)
  {
    v97 = 0;
    v98 = 0;
    v140 = v6 + 72;
    do
    {
      v99 = *(llvm::Type ***)(*(_QWORD *)(v7 + 80) + v97);
      v100 = (llvm::LLVMContext *)llvm::ArrayType::get(*(llvm::ArrayType **)(v9 + 96), v96);
      v101 = *(uint64_t **)(v6 + 8);
      LOWORD(v250) = 257;
      v102 = sub_22E3C4170((uint64_t *)(a1 + 272), v100, v101, 0, v98, (uint64_t)__p);
      v103 = llvm::PointerType::get();
      LOWORD(v250) = 257;
      v104 = (void *)sub_22E3C1338((uint64_t *)(a1 + 272), (uint64_t)v102, v103, (uint64_t)__p);
      v105 = *v99;
      v106 = sub_22EF5D130(v152, *(_QWORD *)(v152 + 16816));
      __p[0] = v104;
      __p[1] = v105;
      *(_QWORD *)&v249 = v106;
      DWORD2(v249) = 0;
      v250 = 0uLL;
      v170[0] = *(_OWORD *)__p;
      v170[1] = v249;
      v170[2] = 0uLL;
      sub_22E3BEDDC(a1 + 272, v99, (uint64_t)v170);
      if (*(_BYTE *)a3)
      {
        *(_QWORD *)&v231 = 0;
        *(_QWORD *)&v231 = *(_QWORD *)(*(_QWORD *)(a2 + 80) + v97 + 8);
        if ((_QWORD)v231)
          sub_22F286A0C((uint64_t)v240, v140, &v231, (__int128 *)__p);
      }
      v107 = *(llvm::Type ***)(*(_QWORD *)(a2 + 160) + 8 * v98);
      v9 = v154;
      v108 = (llvm::LLVMContext *)llvm::ArrayType::get(*(llvm::ArrayType **)(v154 + 96), (llvm::Type *)*(unsigned int *)(a3 + 68));
      v109 = *(uint64_t **)(a3 + 16);
      LOWORD(v241) = 257;
      v110 = sub_22E3C4170((uint64_t *)(a1 + 272), v108, v109, 0, v98, (uint64_t)v240);
      v111 = llvm::PointerType::get();
      LOWORD(v241) = 257;
      v112 = sub_22E3C1338((uint64_t *)(a1 + 272), (uint64_t)v110, v111, (uint64_t)v240);
      v113 = *v107;
      v114 = sub_22EF5D130(v152, *(_QWORD *)(v152 + 16816));
      v166[0] = v112;
      v166[1] = v113;
      v166[2] = v114;
      v167 = 0;
      v168 = 0;
      v169 = 0;
      sub_22E3BEDDC(a1 + 272, v107, (uint64_t)v166);
      if ((v200 & 1) != 0)
        v116 = (1 << v98) & ((unint64_t)v200 >> 1) & ~(-1 << ((unint64_t)v200 >> 58));
      else
        v116 = *(_QWORD *)(*(_QWORD *)v200 + 8 * (v98 >> 6)) & (1 << v98);
      v6 = a3;
      v7 = a2;
      if (v116)
      {
        v117 = (llvm::LLVMContext *)llvm::ArrayType::get(*(llvm::ArrayType **)(v154 + 32), (llvm::Type *)*(unsigned int *)(a3 + 68));
        v118 = *(uint64_t **)(a3 + 24);
        LOWORD(v241) = 257;
        v119 = sub_22E3C4170((uint64_t *)(a1 + 272), v117, v118, 0, v98, (uint64_t)v240);
        v120 = *(_QWORD *)(v154 + 32);
        v121 = sub_22EF5D130(v152, v143);
        v122 = *(_QWORD *)(*(_QWORD *)(a2 + 208) + 8 * v98);
        v123 = *(_QWORD *)(v154 + 32);
        LOWORD(v241) = 257;
        v124 = (llvm::Type **)sub_22E3BF45C((uint64_t *)(a1 + 272), v122, v123, 1, (uint64_t)v240);
        v162[0] = v119;
        v162[1] = v120;
        v9 = v154;
        v6 = a3;
        v162[2] = v121;
        v163 = 0;
        v164 = 0;
        v165 = 0;
        sub_22E3BEDDC(a1 + 272, v124, (uint64_t)v162);
      }
      v125 = llvm::ConstantPointerNull::get(*(llvm::ConstantPointerNull **)(v9 + 96), v115);
      v126 = *(_QWORD *)(*(_QWORD *)(a2 + 304) + 8 * v98);
      if (v126)
      {
        v128 = sub_22F281D00(*(_QWORD *)(v9 + 808), v126);
        v129 = *(_QWORD *)(v9 + 96);
        LOWORD(v241) = 257;
        v127 = (llvm::Type **)sub_22E3CA9BC((uint64_t *)(a1 + 272), v128, v129, (uint64_t)v240);
        *(_BYTE *)(v6 + 64) = 1;
      }
      else
      {
        v127 = (llvm::Type **)v125;
      }
      v158[0] = v150;
      v158[1] = v148;
      v158[2] = v146;
      v159 = 0;
      v160 = 0;
      v161 = 0;
      LOWORD(v233) = 257;
      sub_22E486A58((uint64_t *)(a1 + 272), (uint64_t)v158, v98, (uint64_t)&v231, (uint64_t)v240);
      v157[0] = *(_OWORD *)v240;
      v157[1] = *(_OWORD *)&v240[16];
      v157[2] = v241;
      sub_22E3BEDDC(a1 + 272, v127, (uint64_t)v157);
      ++v98;
      v96 = (llvm::Type *)*(unsigned int *)(v6 + 68);
      v97 += 16;
    }
    while (v98 < (unint64_t)v96);
  }
  if (SBYTE7(v212) < 0)
    operator delete(__src[0]);
  if (v257[0] != &v258)
    free(v257[0]);
  sub_22E54C5D0((void ***)&v200);
  if ((__int128 *)v266 != &v267)
    free((void *)v266);
  if (DWORD2(v209[0]) >= 0x41 && *(_QWORD *)&v209[0])
    MEMORY[0x2348A0E84](*(_QWORD *)&v209[0], 0x1000C8000313F17);
LABEL_2:
  if (a5 && *(_DWORD *)(v7 + 416) && *(_DWORD *)(v6 + 68))
  {
    v138 = *(_QWORD *)(a1 + 144);
    v25 = *(_QWORD *)(v138 + 144);
    v26 = sub_22EF60A6C(v25, 64, 0);
    v27 = sub_22F368234(v25, "descriptor_dim", 0xEuLL, 0);
    sub_22EFC3340(v27);
    v28 = v7;
    v29 = v27 ? v27 + 64 : 0;
    sub_22E5A4124(v25, v29, v26);
    sub_22E5A4124(v25, v29, v26);
    sub_22E5A4124(v25, v29, v26);
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 104))(v27);
    v147 = sub_22EF6477C(v25, v27);
    v30 = *(unsigned int *)(v28 + 368);
    if ((_DWORD)v30)
    {
      v31 = 0;
      v32 = 0;
      v155 = (uint64_t *)(a1 + 272);
      v137 = *(unsigned int *)(v28 + 368);
      do
      {
        v33 = *(_QWORD *)(*(_QWORD *)(a2 + 360) + 8 * v31);
        if (v33 != 1)
        {
          v139 = v32;
          v228 = 32;
          v227 = v33;
          v34 = sub_22EF5FE30(v25, v147, (const llvm::APInt *)&v227, 0, 0, 0);
          *(_QWORD *)&v266 = "dims";
          LOWORD(v268) = 259;
          v35 = sub_22F25E4D4(a1, v34, (uint64_t)&v266, 0);
          v37 = v35 & 0xFFFFFFFFFFFFFFF8;
          if (v35 <= 7)
            v37 = 0;
          v151 = v37;
          v153 = 0;
          v38 = v36 & 0xFFFFFFFFFFFFFFF8;
          if (v35 <= 7)
            v38 = 0;
          v149 = v38;
          if (v35 >= 8)
            v153 = 1 << (v36 & 7 | (8 * (v35 & 7)));
          v39 = a2;
          v141 = v31;
          v144 = *(_QWORD *)(*(_QWORD *)(a2 + 360) + 8 * v31);
          if ((_DWORD)v144)
          {
            v40 = 0;
            do
            {
              v41 = (v144 + ~(_DWORD)v40);
              v222[0] = v151;
              v222[1] = v149;
              v222[2] = v153;
              v223 = 0;
              v224 = 0;
              v225 = 0;
              v221 = 257;
              sub_22E486A58(v155, (uint64_t)v222, v40, (uint64_t)v220, (uint64_t)v226);
              v231 = v226[0];
              v232 = v226[1];
              v233 = v226[2];
              sub_22E6281E0(*(_QWORD **)(a1 + 144), v147, (uint64_t)v229);
              *(_OWORD *)v257 = v231;
              v258 = v232;
              v259 = v233;
              v42 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
              v200 = v229[0];
              v201 = v229[1];
              *(_QWORD *)&v202 = v230;
              v267 = 0uLL;
              *((_QWORD *)&v266 + 1) = 0;
              LODWORD(v268) = 0;
              *((_QWORD *)&v268 + 1) = 0;
              *(_QWORD *)&v269 = 0;
              v270 = 0uLL;
              *(_QWORD *)((char *)&v271 + 4) = 2;
              LODWORD(v266) = 0;
              v272 = 0u;
              v273 = 0u;
              sub_22E3C113C((uint64_t)&v266, (__int128 *)v257, v147, 2, &v200, v42);
              v254 = v272;
              v255 = v273;
              v256 = v274;
              v250 = v268;
              v251 = v269;
              v253 = v271;
              v252 = v270;
              v249 = v267;
              *(_OWORD *)__p = v266;
              v43 = sub_22EFC3B90(v27);
              sub_22E4DD05C(a1, (uint64_t)__p, v43, (uint64_t)v257);
              v44 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v39 + 408) + 48 * v139) + 8 * v41);
              v245 = v263;
              v246 = v264;
              v247 = v265;
              v241 = v259;
              v242 = v260;
              v244 = v262;
              v243 = v261;
              *(_OWORD *)&v240[16] = v258;
              *(_OWORD *)v240 = *(_OWORD *)v257;
              sub_22E4E87FC(a1, v44, (uint64_t)v240, 0);
              v217 = v272;
              v218 = v273;
              v219 = v274;
              v213 = v268;
              v214 = v269;
              v216 = v271;
              v215 = v270;
              v212 = v267;
              *(_OWORD *)__src = v266;
              v45 = sub_22EFC3B90(v27);
              do
                v45 = *(_QWORD *)(v45 + 8) & 0xFFFFFFFFFFFFFFF8;
              while (v45 && (*(_DWORD *)(v45 + 28) & 0x7Fu) - 49 > 2);
              sub_22E4DD05C(a1, (uint64_t)__src, v45, (uint64_t)&v231);
              v46 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 616) + 48 * v139) + 8 * v41);
              v209[6] = v237;
              v209[7] = v238;
              v210 = v239;
              v209[2] = v233;
              v209[3] = v234;
              v209[5] = v236;
              v209[4] = v235;
              v209[1] = v232;
              v209[0] = v231;
              sub_22E4E87FC(a1, v46, (uint64_t)v209, 0);
              v198[6] = v272;
              v198[7] = v273;
              v199 = v274;
              v198[2] = v268;
              v198[3] = v269;
              v198[4] = v270;
              v198[5] = v271;
              v198[0] = v266;
              v198[1] = v267;
              v47 = sub_22EFC3B90(v27);
              v48 = 2;
              do
              {
                do
                  v47 = *(_QWORD *)(v47 + 8) & 0xFFFFFFFFFFFFFFF8;
                while (v47 && (*(_DWORD *)(v47 + 28) & 0x7Fu) - 49 > 2);
                v61 = v48-- > 1;
              }
              while (v61);
              sub_22E4DD05C(a1, (uint64_t)v198, v47, (uint64_t)&v200);
              v39 = a2;
              v49 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 824) + 48 * v139) + 8 * v41);
              v196[6] = v206;
              v196[7] = v207;
              v197 = v208;
              v196[2] = v202;
              v196[3] = v203;
              v196[4] = v204;
              v196[5] = v205;
              v196[0] = v200;
              v196[1] = v201;
              sub_22E4E87FC(a1, v49, (uint64_t)v196, 0);
              ++v40;
            }
            while (v40 != v144);
          }
          *(_QWORD *)&v191 = v151;
          *((_QWORD *)&v191 + 1) = v149;
          v192 = v153;
          v193 = 0;
          v194 = 0;
          v195 = 0;
          v50 = *(_QWORD *)(v138 + 96);
          v51 = *(_QWORD *)(v138 + 8);
          LOWORD(v259) = 257;
          sub_22F245864(v155, &v191, v50, v51, (uint64_t)v257, (uint64_t)&v266);
          v52 = (llvm::LLVMContext *)llvm::ArrayType::get(*(llvm::ArrayType **)(v138 + 96), (llvm::Type *)*(unsigned int *)(a3 + 68));
          v53 = *(uint64_t **)(a3 + 16);
          LOWORD(v259) = 257;
          v54 = sub_22E3C4170(v155, v52, v53, 0, v31, (uint64_t)v257);
          v55 = *(_QWORD *)(v138 + 96);
          v56 = *(unsigned __int8 *)(a1 + 130);
          if ((BYTE8(v267) & 3) != 0)
            v57 = (llvm::Type **)sub_22F28ABCC(&v266, (_QWORD *)a1);
          else
            v57 = (llvm::Type **)v266;
          v30 = v137;
          v187[0] = v54;
          v187[1] = v55;
          v187[2] = v56;
          v188 = 0;
          v189 = 0;
          v190 = 0;
          sub_22E3BEDDC((uint64_t)v155, v57, (uint64_t)v187);
          if (v228 >= 0x41)
          {
            if (v227)
              MEMORY[0x2348A0E84](v227, 0x1000C8000313F17);
          }
          v32 = v139 + 1;
          v31 = v141;
        }
        ++v31;
      }
      while (v31 != v30);
    }
  }
}

uint64_t sub_22E5CB6B4(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, uint64_t *a6, uint64_t *a7, uint64_t a8, _BYTE *a9)
{
  uint64_t *v9;
  llvm::ArrayType **v15;
  llvm::PointerType *v16;
  uint64_t *v19;
  llvm::LLVMContext *v20;
  uint64_t *v21;
  llvm::LLVMContext *v22;
  uint64_t *v23;
  llvm::LLVMContext *v24;
  uint64_t *v25;
  llvm::LLVMContext *v26;
  BOOL v27;
  uint64_t *v28;
  llvm::PointerType *v29;
  llvm::LLVMContext *v30;
  uint64_t *v31;
  uint64_t v32;
  llvm::PointerType *v33;
  llvm::PointerType *v34;
  llvm::ConstantPointerNull *v35;
  llvm::PointerType *v36;
  llvm::ConstantPointerNull *v37;
  llvm::PointerType *v38;
  llvm::PointerType *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  _BYTE v45[32];
  __int16 v46;

  v9 = a7;
  v15 = *(llvm::ArrayType ***)(a1 + 144);
  v16 = (llvm::PointerType *)*(unsigned int *)(a8 + 68);
  if (!(_DWORD)v16)
  {
    *a2 = llvm::ConstantPointerNull::get(v15[13], v16);
    *a3 = llvm::ConstantPointerNull::get(v15[13], v34);
    v35 = (llvm::ConstantPointerNull *)llvm::PointerType::get();
    *a4 = llvm::ConstantPointerNull::get(v35, v36);
    v37 = (llvm::ConstantPointerNull *)llvm::PointerType::get();
    *a5 = llvm::ConstantPointerNull::get(v37, v38);
    *a6 = llvm::ConstantPointerNull::get(v15[13], v39);
LABEL_14:
    result = llvm::ConstantPointerNull::get(v15[13], v33);
    goto LABEL_15;
  }
  v19 = (uint64_t *)(a1 + 272);
  v20 = (llvm::LLVMContext *)llvm::ArrayType::get(v15[12], v16);
  v21 = *(uint64_t **)(a8 + 8);
  v46 = 257;
  *a2 = sub_22E3C4170(v19, v20, v21, 0, 0, (uint64_t)v45);
  v22 = (llvm::LLVMContext *)llvm::ArrayType::get(v15[12], (llvm::Type *)*(unsigned int *)(a8 + 68));
  v23 = *(uint64_t **)(a8 + 16);
  v46 = 257;
  *a3 = sub_22E3C4170(v19, v22, v23, 0, 0, (uint64_t)v45);
  v24 = (llvm::LLVMContext *)llvm::ArrayType::get(v15[4], (llvm::Type *)*(unsigned int *)(a8 + 68));
  v25 = *(uint64_t **)(a8 + 24);
  v46 = 257;
  *a4 = sub_22E3C4170(v19, v24, v25, 0, 0, (uint64_t)v45);
  v26 = (llvm::LLVMContext *)llvm::ArrayType::get(v15[4], (llvm::Type *)*(unsigned int *)(a8 + 68));
  if (*(_QWORD *)(a8 + 40))
    v27 = *a9 == 0;
  else
    v27 = 1;
  if (v27)
    v28 = *(uint64_t **)(a8 + 32);
  else
    v28 = *(uint64_t **)(a8 + 40);
  v46 = 257;
  *a5 = sub_22E3C4170(v19, v26, v28, 0, 0, (uint64_t)v45);
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 184) + 96) & 0x1E00000000000000) != 0)
  {
    v30 = (llvm::LLVMContext *)llvm::ArrayType::get(v15[12], (llvm::Type *)*(unsigned int *)(a8 + 68));
    v31 = *(uint64_t **)(a8 + 56);
    v46 = 257;
    v32 = (uint64_t)sub_22E3C4170(v19, v30, v31, 0, 0, (uint64_t)v45);
  }
  else
  {
    v32 = llvm::ConstantPointerNull::get(v15[13], v29);
  }
  v9 = a7;
  *a6 = v32;
  if (!*(_BYTE *)(a8 + 64))
    goto LABEL_14;
  v40 = *(_QWORD *)(a8 + 48);
  v41 = (uint64_t)v15[13];
  v46 = 257;
  result = sub_22E3CA9BC(v19, v40, v41, (uint64_t)v45);
LABEL_15:
  *v9 = result;
  return result;
}

_QWORD *sub_22E5CB8D4(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F286070(a1, (uint64_t)v4, (uint64_t)v4 + 16 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

_QWORD *sub_22E5CB994(uint64_t a1, int a2)
{
  unsigned int v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *result;
  unsigned int v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 88 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F2862E8(a1, (uint64_t)v4, (uint64_t)v4 + 88 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(88 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (v10)
    {
      v11 = 88 * v10;
      do
      {
        *result = -4096;
        result += 11;
        v11 -= 88;
      }
      while (v11);
    }
  }
  return result;
}

void sub_22E5CBA60(uint64_t a1, unint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  unsigned int v42;
  int v43;
  _QWORD v44[5];

  v44[4] = *MEMORY[0x24BDAC8D0];
  v8 = sub_22E66DD94(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 280, a2);
  v9 = v8;
  v10 = v8 + 8;
  if (!a4)
    v10 = v8;
  v11 = *(unsigned int *)(*(_QWORD *)v10 + 12);
  v12 = v44;
  v41 = v44;
  v43 = 4;
  if (v11 < 5)
  {
    if (!(_DWORD)v11)
      goto LABEL_7;
  }
  else
  {
    v42 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v12 = v41;
  }
  bzero(v12, 8 * v11);
LABEL_7:
  v42 = v11;
  v13 = sub_22E46A3A0(a2);
  if (v13 != v14)
  {
    v15 = v13;
    v16 = v14;
    do
    {
      if ((*(_BYTE *)(v15 + 12) & 1) == 0)
      {
        v17 = *(_QWORD *)(**(_QWORD **)(v15 + 16) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v17 + 8) & 0xF) != 0)
          v17 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v15 + 16));
        v18 = sub_22F10C2A4(*(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF0));
        if ((*(_DWORD *)(v18 + 28) & 0x7Fu) - 35 >= 3)
          v19 = 0;
        else
          v19 = v18;
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v19 + 104) + 96), *(_QWORD *)(v19 + 104));
        if ((**(_QWORD **)(v19 + 128) & 0x200) == 0
          && **(_QWORD **)(sub_22F0C975C(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 144), v19) + 72))
        {
          v39 = 0;
          v40 = v19;
          v20 = sub_22F246C54((uint64_t *)(v9 + 64), &v40, &v39);
          v21 = 0;
          if (v20)
            v21 = *(unsigned int *)(v39 + 8);
          *((_QWORD *)v41 + v21) = v19 & 0xFFFFFFFFFFFFFFFBLL;
        }
      }
      v15 += 24;
    }
    while (v15 != v16);
  }
  v22 = sub_22E483108(a2);
  if (v22 != v23)
  {
    v24 = v22;
    v25 = v23;
    do
    {
      v26 = *(_QWORD *)(**(_QWORD **)(v24 + 16) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v26 + 8) & 0xF) != 0)
        v26 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v24 + 16));
      v27 = sub_22F10C2A4(*(_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF0));
      if ((*(_DWORD *)(v27 + 28) & 0x7Fu) - 35 >= 3)
        v28 = 0;
      else
        v28 = v27;
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v28 + 104) + 96), *(_QWORD *)(v28 + 104));
      if ((**(_QWORD **)(v28 + 128) & 0x200) == 0)
      {
        v39 = 0;
        v40 = v28;
        v29 = sub_22F246C54((uint64_t *)(v9 + 88), &v40, &v39);
        v30 = 0;
        if (v29)
          v30 = *(unsigned int *)(v39 + 8);
        if (*((_QWORD *)v41 + v30) <= 7uLL)
          *((_QWORD *)v41 + v30) = v28 & 0xFFFFFFFFFFFFFFFBLL;
      }
      v24 += 24;
    }
    while (v24 != v25);
  }
  v31 = sub_22EFC3B90(a2);
  if (v31)
  {
    v32 = v31;
LABEL_38:
    if ((*(_BYTE *)(v32 + 68) & 1) == 0
      && (sub_22EFC2FDC(v32, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 144)) & 1) == 0)
    {
      v33 = sub_22E4EC264(v9, v32);
      *((_QWORD *)v41 + v33) = v32 | 4;
    }
    while (1)
    {
      v32 = *(_QWORD *)(v32 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v32)
        break;
      if ((*(_DWORD *)(v32 + 28) & 0x7Fu) - 49 < 3)
        goto LABEL_38;
    }
  }
  v34 = (uint64_t *)v41;
  if (v42)
  {
    v35 = 8 * v42;
    do
    {
      v36 = *v34;
      if ((unint64_t)*v34 >= 8)
      {
        v37 = v36 & 0xFFFFFFFFFFFFFFF8;
        if ((v36 & 4) != 0 || !v37)
        {
          v38 = *(unsigned int *)(a3 + 8);
          if (v38 >= *(unsigned int *)(a3 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v38 = *(unsigned int *)(a3 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a3 + 8 * v38) = v37;
          ++*(_DWORD *)(a3 + 8);
        }
        else
        {
          sub_22E5CBA60(a1, v36 & 0xFFFFFFFFFFFFFFF8, a3, 1);
        }
      }
      ++v34;
      v35 -= 8;
    }
    while (v35);
    v34 = (uint64_t *)v41;
  }
  if (v34 != v44)
    free(v34);
}

double sub_22E5CBE14(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4, uint64_t a5, __n128 a6)
{
  __n128 *v7;
  __n128 *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  __n128 *v15;
  unint64_t v16;
  __n128 *v17;
  unint64_t v18;
  uint64_t v19;
  __n128 *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  __n128 *v25;
  __n128 *v26;
  __n128 *v27;
  _DWORD *v28;
  unint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  unsigned __int32 v37;
  uint64_t v38;
  BOOL v39;
  int v40;
  unsigned __int8 v43;
  __n128 *v44;
  __n128 *v45;
  uint64_t v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  char v55;
  BOOL v56;
  __n128 *v57;
  uint64_t v58;
  BOOL v59;
  int v60;
  __n128 v63;
  unsigned __int32 v64;
  unsigned __int8 v65;
  unint64_t v66;
  unint64_t v67;
  __n128 v68;
  __n128 *v69;
  __n128 *v70;
  __n128 *v71;
  __n128 *v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  _DWORD *v76;
  __n128 *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  _DWORD *v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  int v85;
  BOOL v86;
  __n128 *v87;
  __n128 *v89;
  unsigned __int8 v90;
  unint64_t v91;
  uint64_t v92;
  __n128 *v93;
  __n128 *v94;
  uint64_t v95;
  __n128 *v96;
  __n128 *v97;
  __n128 v99;

  if (a3 >= 2)
  {
    v7 = a1;
    if (a3 == 2)
    {
      v10 = a2[-3].n128_u64[1];
      v9 = a2[-2].n128_u64[0];
      v8 = (__n128 *)((char *)a2 - 40);
      if (v9)
      {
        v11 = 4 * v9;
        v12 = (_DWORD *)a2[-3].n128_u64[1];
        while (*v12 != 10)
        {
          ++v12;
          v11 -= 4;
          if (!v11)
          {
            v12 = (_DWORD *)(v10 + 4 * v9);
            break;
          }
        }
      }
      else
      {
        v12 = (_DWORD *)a2[-3].n128_u64[1];
      }
      v19 = (uint64_t)((uint64_t)v12 - v10) >> 2;
      v22 = a1[1].n128_u64[1];
      v21 = a1[2].n128_u64[0];
      v20 = (__n128 *)((char *)a1 + 24);
      if (v21)
      {
        v23 = 4 * v21;
        v24 = (_DWORD *)a1[1].n128_u64[1];
        while (*v24 != 10)
        {
          ++v24;
          v23 -= 4;
          if (!v23)
          {
            v24 = (_DWORD *)(v22 + 4 * v21);
            break;
          }
        }
      }
      else
      {
        v24 = (_DWORD *)a1[1].n128_u64[1];
      }
      v58 = (uint64_t)((uint64_t)v24 - v22) >> 2;
      if (a1[1].n128_u32[0])
        v59 = 1;
      else
        v59 = a2[-3].n128_u32[0] == 0;
      v60 = !v59;
      if (v58 == v21 && v19 != v9 || v60 != 0)
      {
        v63 = *a1;
        *a1 = a2[-4];
        a2[-4] = v63;
        v64 = a1[1].n128_u32[0];
        a1[1].n128_u32[0] = a2[-3].n128_u32[0];
        a2[-3].n128_u32[0] = v64;
        a6 = *v20;
        *v20 = *v8;
        *v8 = a6;
        v65 = a1[2].n128_u8[8];
        a1[2].n128_u8[8] = a2[-2].n128_u8[8];
        a2[-2].n128_u8[8] = v65;
        v66 = a1[3].n128_u64[0];
        a1[3].n128_u64[0] = a2[-1].n128_u64[0];
        a2[-1].n128_u64[0] = v66;
        v67 = a1[3].n128_u64[1];
        a1[3].n128_u64[1] = a2[-1].n128_u64[1];
        a2[-1].n128_u64[1] = v67;
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if (a1 != a2)
      {
        v25 = a1 + 4;
        if (&a1[4] != a2)
        {
          v26 = a1;
          do
          {
            v27 = v25;
            v28 = (_DWORD *)v26[5].n128_u64[1];
            v29 = v26[6].n128_u64[0];
            v30 = v28;
            if (v29)
            {
              v31 = 4 * v29;
              v30 = (_DWORD *)v26[5].n128_u64[1];
              while (*v30 != 10)
              {
                ++v30;
                v31 -= 4;
                if (!v31)
                {
                  v30 = &v28[v29];
                  break;
                }
              }
            }
            v33 = v26[1].n128_u64[1];
            v32 = v26[2].n128_u64[0];
            if (v32)
            {
              v34 = 4 * v32;
              v35 = (_DWORD *)v26[1].n128_u64[1];
              while (*v35 != 10)
              {
                ++v35;
                v34 -= 4;
                if (!v34)
                {
                  v35 = (_DWORD *)(v33 + 4 * v32);
                  break;
                }
              }
            }
            else
            {
              v35 = (_DWORD *)v26[1].n128_u64[1];
            }
            v36 = v30 - v28;
            v37 = v26[5].n128_u32[0];
            v38 = (uint64_t)((uint64_t)v35 - v33) >> 2;
            if (v26[1].n128_u32[0])
              v39 = 1;
            else
              v39 = v37 == 0;
            v40 = !v39;
            if (v38 == v32 && v36 != v29 || v40 != 0)
            {
              v99 = *v27;
              v43 = v26[6].n128_u8[8];
              a6 = v26[7];
              v44 = v27;
              while (1)
              {
                v45 = v44;
                v44 = v26;
                *v45 = *v26;
                v45[1].n128_u32[0] = v26[1].n128_u32[0];
                *(__n128 *)((char *)v45 + 24) = *(__n128 *)((char *)v26 + 24);
                v45[2].n128_u8[8] = v26[2].n128_u8[8];
                v45[3].n128_u64[0] = v26[3].n128_u64[0];
                v45[3].n128_u64[1] = v26[3].n128_u64[1];
                if (v26 == v7)
                  break;
                if (v29)
                {
                  v46 = 4 * v29;
                  v47 = v28;
                  while (*v47 != 10)
                  {
                    ++v47;
                    v46 -= 4;
                    if (!v46)
                    {
                      v47 = &v28[v29];
                      break;
                    }
                  }
                }
                else
                {
                  v47 = v28;
                }
                v49 = v44[-3].n128_i64[1];
                v48 = v44[-2].n128_i64[0];
                if (v48)
                {
                  v50 = 4 * v48;
                  v51 = (_DWORD *)v44[-3].n128_u64[1];
                  while (*v51 != 10)
                  {
                    ++v51;
                    v50 -= 4;
                    if (!v50)
                    {
                      v51 = (_DWORD *)(v49 + 4 * v48);
                      break;
                    }
                  }
                }
                else
                {
                  v51 = (_DWORD *)v44[-3].n128_u64[1];
                }
                v26 = v44 - 4;
                v52 = v47 - v28;
                v53 = ((uint64_t)v51 - v49) >> 2;
                if (v44[-3].n128_u32[0])
                  v54 = 1;
                else
                  v54 = v37 == 0;
                v55 = !v54;
                v56 = v53 != v48 || v52 == v29;
                if (v56 && (v55 & 1) == 0)
                {
                  v57 = v44;
                  goto LABEL_73;
                }
              }
              v57 = v7;
LABEL_73:
              *v57 = v99;
              v57[1].n128_u32[0] = v37;
              v44[1].n128_u64[1] = (unint64_t)v28;
              v57[2].n128_u64[0] = v29;
              v57[2].n128_u8[8] = v43;
              v57[3] = a6;
            }
            v25 = v27 + 4;
            v26 = v27;
          }
          while (&v27[4] != a2);
        }
      }
    }
    else
    {
      v15 = a4;
      v16 = a3 >> 1;
      v17 = &a1[4 * (a3 >> 1)];
      v18 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        v68 = sub_22E5CC3E0(a1, v17, v18, a4, a6);
        v69 = &v15[4 * v16];
        a6.n128_u64[0] = sub_22E5CC3E0(&v7[4 * (a3 >> 1)], a2, a3 - (a3 >> 1), v69, v68).n128_u64[0];
        v70 = &v15[4 * a3];
        v71 = v69;
        while (v71 != v70)
        {
          v74 = v71[1].n128_u64[1];
          v73 = v71[2].n128_u64[0];
          v72 = (__n128 *)((char *)v71 + 24);
          if (v73)
          {
            v75 = 4 * v73;
            v76 = (_DWORD *)v71[1].n128_u64[1];
            while (*v76 != 10)
            {
              ++v76;
              v75 -= 4;
              if (!v75)
              {
                v76 = (_DWORD *)(v74 + 4 * v73);
                break;
              }
            }
          }
          else
          {
            v76 = (_DWORD *)v71[1].n128_u64[1];
          }
          v79 = v15[1].n128_u64[1];
          v78 = v15[2].n128_u64[0];
          v77 = (__n128 *)((char *)v15 + 24);
          if (v78)
          {
            v80 = 4 * v78;
            v81 = (_DWORD *)v15[1].n128_u64[1];
            while (*v81 != 10)
            {
              ++v81;
              v80 -= 4;
              if (!v80)
              {
                v81 = (_DWORD *)(v79 + 4 * v78);
                break;
              }
            }
          }
          else
          {
            v81 = (_DWORD *)v15[1].n128_u64[1];
          }
          v82 = (uint64_t)((uint64_t)v76 - v74) >> 2;
          v83 = (uint64_t)((uint64_t)v81 - v79) >> 2;
          if (v15[1].n128_u32[0])
            v84 = 1;
          else
            v84 = v71[1].n128_u32[0] == 0;
          v85 = !v84;
          v86 = v83 != v78 || v82 == v73;
          v87 = (__n128 *)((char *)v7 + 24);
          if (v86 && v85 == 0)
          {
            *v7 = *v15;
            v7[1].n128_u32[0] = v15[1].n128_u32[0];
            a6 = *v77;
            *v87 = *v77;
            v89 = v15;
            v15 += 4;
          }
          else
          {
            *v7 = *v71;
            v7[1].n128_u32[0] = v71[1].n128_u32[0];
            a6 = *v72;
            *v87 = *v72;
            v89 = v71;
            v71 += 4;
          }
          v90 = v89[2].n128_u8[8];
          v7[3].n128_u64[0] = v89[3].n128_u64[0];
          v91 = v89[3].n128_u64[1];
          v7[2].n128_u8[8] = v90;
          v7[3].n128_u64[1] = v91;
          v7 += 4;
          if (v15 == v69)
          {
            if (v71 != v70)
            {
              v92 = 0;
              do
              {
                v93 = &v71[v92];
                v94 = &v7[v92];
                *v94 = v71[v92];
                v94[1].n128_u32[0] = v71[v92 + 1].n128_u32[0];
                a6 = *(__n128 *)((char *)&v71[v92 + 1] + 8);
                *(__n128 *)((char *)v94 + 24) = a6;
                v94[2].n128_u8[8] = v71[v92 + 2].n128_u8[8];
                v94[3].n128_u64[0] = v71[v92 + 3].n128_u64[0];
                v94[3].n128_u64[1] = v71[v92 + 3].n128_u64[1];
                v92 += 4;
              }
              while (&v93[4] != v70);
            }
            return a6.n128_f64[0];
          }
        }
        if (v15 != v69)
        {
          v95 = 0;
          do
          {
            v96 = &v7[v95];
            v97 = &v15[v95];
            *v96 = v15[v95];
            v96[1].n128_u32[0] = v15[v95 + 1].n128_u32[0];
            a6 = *(__n128 *)((char *)&v15[v95 + 1] + 8);
            *(__n128 *)((char *)v96 + 24) = a6;
            v96[2].n128_u8[8] = v15[v95 + 2].n128_u8[8];
            v96[3].n128_u64[0] = v15[v95 + 3].n128_u64[0];
            v96[3].n128_u64[1] = v15[v95 + 3].n128_u64[1];
            v95 += 4;
          }
          while (&v97[4] != v69);
        }
      }
      else
      {
        sub_22E5CBE14(a1, v17, v18, a4, a5);
        sub_22E5CBE14(&v7[4 * (a3 >> 1)], a2, a3 - (a3 >> 1), v15, a5);
        a6.n128_u64[0] = sub_22E5CC8F8((__int128 *)v7, (__int128 *)&v7[4 * (a3 >> 1)], (__int128 *)a2, a3 >> 1, a3 - (a3 >> 1), (__int128 *)v15, a5).n128_u64[0];
      }
    }
  }
  return a6.n128_f64[0];
}

__n128 sub_22E5CC3E0(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4, __n128 result)
{
  __n128 *v5;
  __n128 *v8;
  __n128 v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  __n128 v15;
  __n128 v16;
  __n128 *v17;
  __n128 *v18;
  __n128 *v19;
  __n128 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  __n128 *v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  int v33;
  __n128 v36;
  __n128 v37;
  __n128 *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  unsigned __int32 v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  _BOOL4 v51;
  BOOL v52;
  __n128 v54;
  __n128 v55;
  __n128 *v56;
  __n128 *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _DWORD *v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  int v69;
  __n128 v72;
  __n128 v73;
  __n128 v74;
  __n128 v75;
  uint64_t v76;
  __n128 *v77;
  __n128 v78;
  __n128 v79;
  __n128 *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _DWORD *v85;
  uint64_t v86;
  BOOL v87;
  int v88;
  __n128 v91;
  __n128 v92;
  __n128 v93;
  __n128 v94;
  __n128 v95;
  __n128 v96;
  __n128 v97;
  __n128 v98;
  __n128 v99;
  uint64_t v100;
  __n128 *v101;
  __n128 v102;
  __n128 v103;

  if (a3)
  {
    v5 = a4;
    v8 = a1;
    if (a3 == 2)
    {
      v12 = a2[-3].n128_i64[1];
      v11 = a2[-2].n128_i64[0];
      if (v11)
      {
        v13 = 4 * v11;
        v14 = (_DWORD *)a2[-3].n128_u64[1];
        while (*v14 != 10)
        {
          ++v14;
          v13 -= 4;
          if (!v13)
          {
            v14 = (_DWORD *)(v12 + 4 * v11);
            break;
          }
        }
      }
      else
      {
        v14 = (_DWORD *)a2[-3].n128_u64[1];
      }
      v80 = a2 - 4;
      v81 = ((uint64_t)v14 - v12) >> 2;
      v83 = a1[1].n128_i64[1];
      v82 = a1[2].n128_i64[0];
      if (v82)
      {
        v84 = 4 * v82;
        v85 = (_DWORD *)a1[1].n128_u64[1];
        while (*v85 != 10)
        {
          ++v85;
          v84 -= 4;
          if (!v84)
          {
            v85 = (_DWORD *)(v83 + 4 * v82);
            break;
          }
        }
      }
      else
      {
        v85 = (_DWORD *)a1[1].n128_u64[1];
      }
      v86 = ((uint64_t)v85 - v83) >> 2;
      if (a1[1].n128_u32[0])
        v87 = 1;
      else
        v87 = a2[-3].n128_u32[0] == 0;
      v88 = !v87;
      if ((v86 != v82 || v81 == v11) && v88 == 0)
      {
        v97 = *a1;
        v98 = a1[1];
        v99 = a1[3];
        a4[2] = a1[2];
        a4[3] = v99;
        *a4 = v97;
        a4[1] = v98;
        result = *v80;
        v94 = a2[-3];
        v95 = a2[-2];
        v96 = a2[-1];
      }
      else
      {
        v91 = *v80;
        v92 = a2[-3];
        v93 = a2[-1];
        a4[2] = a2[-2];
        a4[3] = v93;
        *a4 = v91;
        a4[1] = v92;
        result = *a1;
        v94 = a1[1];
        v95 = a1[2];
        v96 = a1[3];
      }
      a4[6] = v95;
      a4[7] = v96;
      a4[4] = result;
      a4[5] = v94;
    }
    else if (a3 == 1)
    {
      result = *a1;
      v9 = a1[1];
      v10 = a1[3];
      a4[2] = a1[2];
      a4[3] = v10;
      *a4 = result;
      a4[1] = v9;
    }
    else if ((uint64_t)a3 > 8)
    {
      v56 = &a1[4 * (a3 >> 1)];
      sub_22E5CBE14(a1, v56, a3 >> 1, a4, a3 >> 1);
      sub_22E5CBE14(&v8[4 * (a3 >> 1)], a2, a3 - (a3 >> 1), &v5[4 * (a3 >> 1)], a3 - (a3 >> 1));
      v57 = &v8[4 * (a3 >> 1)];
      while (v57 != a2)
      {
        v59 = v57[1].n128_i64[1];
        v58 = v57[2].n128_i64[0];
        if (v58)
        {
          v60 = 4 * v58;
          v61 = (_DWORD *)v57[1].n128_u64[1];
          while (*v61 != 10)
          {
            ++v61;
            v60 -= 4;
            if (!v60)
            {
              v61 = (_DWORD *)(v59 + 4 * v58);
              break;
            }
          }
        }
        else
        {
          v61 = (_DWORD *)v57[1].n128_u64[1];
        }
        v63 = v8[1].n128_i64[1];
        v62 = v8[2].n128_i64[0];
        if (v62)
        {
          v64 = 4 * v62;
          v65 = (_DWORD *)v8[1].n128_u64[1];
          while (*v65 != 10)
          {
            ++v65;
            v64 -= 4;
            if (!v64)
            {
              v65 = (_DWORD *)(v63 + 4 * v62);
              break;
            }
          }
        }
        else
        {
          v65 = (_DWORD *)v8[1].n128_u64[1];
        }
        v66 = ((uint64_t)v61 - v59) >> 2;
        v67 = ((uint64_t)v65 - v63) >> 2;
        if (v8[1].n128_u32[0])
          v68 = 1;
        else
          v68 = v57[1].n128_u32[0] == 0;
        v69 = !v68;
        if ((v67 != v62 || v66 == v58) && v69 == 0)
        {
          result = *v8;
          v74 = v8[1];
          v75 = v8[3];
          v5[2] = v8[2];
          v5[3] = v75;
          *v5 = result;
          v5[1] = v74;
          v8 += 4;
        }
        else
        {
          result = *v57;
          v72 = v57[1];
          v73 = v57[3];
          v5[2] = v57[2];
          v5[3] = v73;
          *v5 = result;
          v5[1] = v72;
          v57 += 4;
        }
        v5 += 4;
        if (v8 == v56)
        {
          if (v57 != a2)
          {
            v76 = 0;
            do
            {
              v77 = &v5[v76];
              result = v57[v76];
              v78 = v57[v76 + 1];
              v79 = v57[v76 + 3];
              v77[2] = v57[v76 + 2];
              v77[3] = v79;
              *v77 = result;
              v77[1] = v78;
              v76 += 4;
            }
            while (&v57[v76] != a2);
          }
          return result;
        }
      }
      if (v8 != v56)
      {
        v100 = 0;
        do
        {
          v101 = &v5[v100];
          result = v8[v100];
          v102 = v8[v100 + 1];
          v103 = v8[v100 + 3];
          v101[2] = v8[v100 + 2];
          v101[3] = v103;
          *v101 = result;
          v101[1] = v102;
          v100 += 4;
        }
        while (&v8[v100] != v56);
      }
    }
    else if (a1 != a2)
    {
      result = *a1;
      v15 = a1[1];
      v16 = a1[3];
      a4[2] = a1[2];
      a4[3] = v16;
      *a4 = result;
      a4[1] = v15;
      v17 = a1 + 4;
      if (&a1[4] != a2)
      {
        v18 = a4;
        do
        {
          v19 = v17;
          v22 = v8[5].n128_i64[1];
          v21 = v8[6].n128_i64[0];
          v20 = (__n128 *)((char *)v8 + 88);
          if (v21)
          {
            v23 = 4 * v21;
            v24 = (_DWORD *)v8[5].n128_u64[1];
            while (*v24 != 10)
            {
              ++v24;
              v23 -= 4;
              if (!v23)
              {
                v24 = (_DWORD *)(v22 + 4 * v21);
                break;
              }
            }
          }
          else
          {
            v24 = (_DWORD *)v8[5].n128_u64[1];
          }
          v26 = v18[1].n128_u64[1];
          v25 = v18[2].n128_u64[0];
          if (v25)
          {
            v27 = 4 * v25;
            v28 = (_DWORD *)v18[1].n128_u64[1];
            while (*v28 != 10)
            {
              ++v28;
              v27 -= 4;
              if (!v27)
              {
                v28 = (_DWORD *)(v26 + 4 * v25);
                break;
              }
            }
          }
          else
          {
            v28 = (_DWORD *)v18[1].n128_u64[1];
          }
          v29 = v18 + 4;
          v30 = ((uint64_t)v24 - v22) >> 2;
          v31 = (uint64_t)((uint64_t)v28 - v26) >> 2;
          if (v18[1].n128_u32[0])
            v32 = 1;
          else
            v32 = v8[5].n128_u32[0] == 0;
          v33 = !v32;
          if ((v31 != v25 || v30 == v21) && v33 == 0)
          {
            result = *v19;
            v54 = v19[1];
            v55 = v19[3];
            v18[6] = v19[2];
            v18[7] = v55;
            *v29 = result;
            v18[5] = v54;
          }
          else
          {
            v36 = v18[1];
            *v29 = *v18;
            v18[5] = v36;
            v37 = v18[3];
            v18[6] = v18[2];
            v18[7] = v37;
            v38 = a4;
            if (v18 != a4)
            {
              while (1)
              {
                v40 = v8[5].n128_i64[1];
                v39 = v8[6].n128_i64[0];
                if (v39)
                {
                  v41 = 4 * v39;
                  v42 = (_DWORD *)v8[5].n128_u64[1];
                  while (*v42 != 10)
                  {
                    ++v42;
                    v41 -= 4;
                    if (!v41)
                    {
                      v42 = (_DWORD *)(v40 + 4 * v39);
                      break;
                    }
                  }
                }
                else
                {
                  v42 = (_DWORD *)v8[5].n128_u64[1];
                }
                v44 = v18[-3].n128_u64[1];
                v43 = v18[-2].n128_u64[0];
                if (v43)
                {
                  v45 = 4 * v43;
                  v46 = (_DWORD *)v18[-3].n128_u64[1];
                  while (*v46 != 10)
                  {
                    ++v46;
                    v45 -= 4;
                    if (!v45)
                    {
                      v46 = (_DWORD *)(v44 + 4 * v43);
                      break;
                    }
                  }
                }
                else
                {
                  v46 = (_DWORD *)v18[-3].n128_u64[1];
                }
                v47 = v18[-3].n128_u32[0];
                v48 = ((uint64_t)v42 - v40) >> 2;
                v49 = (uint64_t)((uint64_t)v46 - v44) >> 2;
                v50 = v47 || v8[5].n128_u32[0] == 0;
                v51 = !v50;
                v52 = v49 != v43 || v48 == v39;
                if (v52 && !v51)
                  break;
                *v18 = v18[-4];
                v18[1].n128_u32[0] = v47;
                *(__n128 *)((char *)v18 + 24) = *(__n128 *)((char *)v18 - 40);
                v18[2].n128_u8[8] = v18[-2].n128_u8[8];
                v18[3] = v18[-1];
                v18 -= 4;
                if (v18 == a4)
                {
                  v38 = a4;
                  goto LABEL_69;
                }
              }
              v38 = v18;
            }
LABEL_69:
            *v38 = *v19;
            v38[1].n128_u32[0] = v8[5].n128_u32[0];
            result = *v20;
            *(__n128 *)((char *)v38 + 24) = *v20;
            v38[2].n128_u8[8] = v8[6].n128_u8[8];
            v38[3].n128_u64[0] = v8[7].n128_u64[0];
            v38[3].n128_u64[1] = v8[7].n128_u64[1];
          }
          v17 = v19 + 4;
          v18 = v29;
          v8 = v19;
        }
        while (&v19[4] != a2);
      }
    }
  }
  return result;
}

__n128 sub_22E5CC8F8(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t a4, uint64_t a5, __int128 *a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  BOOL v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  __int128 *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  unint64_t v34;
  __int128 *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  __int128 *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  uint64_t v52;
  _DWORD *v53;
  BOOL v54;
  __int128 *v55;
  __int128 *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  __int128 *v60;
  __int128 *v61;
  int v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  __int128 *v66;
  __int128 *v67;
  __n128 result;
  __int128 *v69;
  __int128 *v70;
  uint64_t v71;
  __int128 *v72;
  __int128 v73;
  __int128 v74;
  __int128 *v75;
  __n128 *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _DWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _DWORD *v84;
  _BOOL4 v86;
  BOOL v87;
  BOOL v88;
  __int128 *v89;
  __int128 *v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  __int128 *v94;
  __int128 v95;
  __int128 v96;
  __int128 *v97;
  uint64_t v98;
  __n128 *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _DWORD *v103;
  __n128 *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _DWORD *v108;
  uint64_t v109;
  uint64_t v110;
  BOOL v111;
  int v112;
  BOOL v113;
  __n128 *v114;
  __int128 *v116;
  char v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  __int128 *v123;
  unint64_t v124;
  __int128 *v125;
  __int128 *v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;

  if (a5)
  {
    v8 = a5;
    while (a4 > a7 && v8 > a7)
    {
      if (!a4)
        return result;
      v12 = *((_QWORD *)a2 + 3);
      v13 = *((_QWORD *)a2 + 4);
      while (1)
      {
        if (v13)
        {
          v14 = 4 * v13;
          v15 = (_DWORD *)*((_QWORD *)a2 + 3);
          while (*v15 != 10)
          {
            ++v15;
            v14 -= 4;
            if (!v14)
            {
              v15 = (_DWORD *)(v12 + 4 * v13);
              break;
            }
          }
        }
        else
        {
          v15 = (_DWORD *)*((_QWORD *)a2 + 3);
        }
        v17 = *((_QWORD *)a1 + 3);
        v16 = *((_QWORD *)a1 + 4);
        if (v16)
        {
          v18 = 4 * v16;
          v19 = (_DWORD *)*((_QWORD *)a1 + 3);
          while (*v19 != 10)
          {
            ++v19;
            v18 -= 4;
            if (!v18)
            {
              v19 = (_DWORD *)(v17 + 4 * v16);
              break;
            }
          }
        }
        else
        {
          v19 = (_DWORD *)*((_QWORD *)a1 + 3);
        }
        v20 = ((uint64_t)v15 - v12) >> 2;
        v21 = ((uint64_t)v19 - v17) >> 2;
        v22 = *((_DWORD *)a1 + 4) || *((_DWORD *)a2 + 4) == 0;
        v23 = !v22;
        v24 = v21 != v16 || v20 == v13;
        if (!v24 || v23)
          break;
        a1 += 4;
        if (!--a4)
          return result;
      }
      if (a4 < v8)
      {
        if (v8 >= 0)
          v25 = v8;
        else
          v25 = v8 + 1;
        v26 = v25 >> 1;
        v27 = &a2[4 * (v25 >> 1)];
        v28 = a2;
        if (a2 != a1)
        {
          v29 = ((char *)a2 - (char *)a1) >> 6;
          v30 = *((_QWORD *)v27 + 3);
          v31 = *((_QWORD *)v27 + 4);
          v28 = a1;
          do
          {
            while (1)
            {
              if (v31)
              {
                v32 = 4 * v31;
                v33 = (_DWORD *)*((_QWORD *)v27 + 3);
                while (*v33 != 10)
                {
                  ++v33;
                  v32 -= 4;
                  if (!v32)
                  {
                    v33 = (_DWORD *)(v30 + 4 * v31);
                    break;
                  }
                }
              }
              else
              {
                v33 = (_DWORD *)*((_QWORD *)v27 + 3);
              }
              v34 = v29 >> 1;
              v35 = &v28[4 * (v29 >> 1)];
              v37 = *((_QWORD *)v35 + 3);
              v36 = *((_QWORD *)v35 + 4);
              if (v36)
              {
                v38 = 4 * v36;
                v39 = (_DWORD *)*((_QWORD *)v35 + 3);
                while (*v39 != 10)
                {
                  ++v39;
                  v38 -= 4;
                  if (!v38)
                  {
                    v39 = (_DWORD *)(v37 + 4 * v36);
                    break;
                  }
                }
              }
              else
              {
                v39 = (_DWORD *)*((_QWORD *)v35 + 3);
              }
              if ((((uint64_t)v33 - v30) >> 2 == v31 || ((uint64_t)v39 - v37) >> 2 != v36)
                && (!*((_DWORD *)v27 + 4) || *((_DWORD *)v35 + 4) != 0))
              {
                break;
              }
              v29 >>= 1;
              if (!v34)
                goto LABEL_61;
            }
            v28 = v35 + 4;
            v29 += ~v34;
          }
          while (v29);
        }
LABEL_61:
        v41 = ((char *)v28 - (char *)a1) >> 6;
        goto LABEL_90;
      }
      if (a4 == 1)
      {
        v130 = *a1;
        *a1 = *a2;
        *a2 = v130;
        v119 = *((_DWORD *)a1 + 4);
        *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
        *((_DWORD *)a2 + 4) = v119;
        result = *(__n128 *)((char *)a1 + 24);
        *(__int128 *)((char *)a1 + 24) = *(__int128 *)((char *)a2 + 24);
        *(__int128 *)((char *)a2 + 24) = (__int128)result;
        LOBYTE(v119) = *((_BYTE *)a1 + 40);
        *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
        *((_BYTE *)a2 + 40) = v119;
        v120 = *((_QWORD *)a1 + 6);
        *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
        *((_QWORD *)a2 + 6) = v120;
        v121 = *((_QWORD *)a1 + 7);
        *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
        *((_QWORD *)a2 + 7) = v121;
        return result;
      }
      if (a4 >= 0)
        v42 = a4;
      else
        v42 = a4 + 1;
      v41 = v42 >> 1;
      v28 = &a1[4 * (v42 >> 1)];
      v27 = a3;
      if (a3 != a2)
      {
        v43 = ((char *)a3 - (char *)a2) >> 6;
        v44 = *((_QWORD *)v28 + 3);
        v45 = *((_QWORD *)v28 + 4);
        v27 = a2;
        do
        {
          v46 = v43 >> 1;
          v47 = &v27[4 * (v43 >> 1)];
          v49 = *((_QWORD *)v47 + 3);
          v48 = *((_QWORD *)v47 + 4);
          if (v48)
          {
            v50 = 4 * v48;
            v51 = (_DWORD *)*((_QWORD *)v47 + 3);
            while (*v51 != 10)
            {
              ++v51;
              v50 -= 4;
              if (!v50)
              {
                v51 = (_DWORD *)(v49 + 4 * v48);
                break;
              }
            }
            if (v45)
            {
LABEL_74:
              v52 = 4 * v45;
              v53 = (_DWORD *)*((_QWORD *)v28 + 3);
              while (*v53 != 10)
              {
                ++v53;
                v52 -= 4;
                if (!v52)
                {
                  v53 = (_DWORD *)(v44 + 4 * v45);
                  goto LABEL_80;
                }
              }
              goto LABEL_80;
            }
          }
          else
          {
            v51 = (_DWORD *)*((_QWORD *)v47 + 3);
            if (v45)
              goto LABEL_74;
          }
          v53 = (_DWORD *)*((_QWORD *)v28 + 3);
LABEL_80:
          if (((uint64_t)v51 - v49) >> 2 != v48 && ((uint64_t)v53 - v44) >> 2 == v45
            || (*((_DWORD *)v47 + 4) ? (v54 = *((_DWORD *)v28 + 4) == 0) : (v54 = 0), v54))
          {
            v27 = v47 + 4;
            v46 = v43 + ~v46;
          }
          v43 = v46;
        }
        while (v46);
      }
      v26 = ((char *)v27 - (char *)a2) >> 6;
LABEL_90:
      v55 = v27;
      if (v28 != a2)
      {
        v55 = v28;
        if (a2 != v27)
        {
          v56 = v28 + 4;
          v55 = a2;
          while (1)
          {
            v127 = *(v56 - 4);
            *(v56 - 4) = *a2;
            *a2 = v127;
            v57 = *((_DWORD *)v56 - 12);
            *((_DWORD *)v56 - 12) = *((_DWORD *)a2 + 4);
            *((_DWORD *)a2 + 4) = v57;
            v128 = *(__int128 *)((char *)v56 - 40);
            *(__int128 *)((char *)v56 - 40) = *(__int128 *)((char *)a2 + 24);
            *(__int128 *)((char *)a2 + 24) = v128;
            LOBYTE(v57) = *((_BYTE *)v56 - 24);
            *((_BYTE *)v56 - 24) = *((_BYTE *)a2 + 40);
            *((_BYTE *)a2 + 40) = v57;
            v58 = *((_QWORD *)v56 - 2);
            *((_QWORD *)v56 - 2) = *((_QWORD *)a2 + 6);
            *((_QWORD *)a2 + 6) = v58;
            v59 = *((_QWORD *)v56 - 1);
            *((_QWORD *)v56 - 1) = *((_QWORD *)a2 + 7);
            *((_QWORD *)a2 + 7) = v59;
            a2 += 4;
            if (a2 == v27)
              break;
            if (v56 == v55)
              v55 = a2;
            v56 += 4;
          }
          if (v56 != v55)
          {
            v60 = v56;
            v61 = v55;
            do
            {
              while (1)
              {
                v129 = *v60;
                *v60 = *v55;
                *v55 = v129;
                v62 = *((_DWORD *)v60 + 4);
                *((_DWORD *)v60 + 4) = *((_DWORD *)v55 + 4);
                *((_DWORD *)v55 + 4) = v62;
                v63 = *(__int128 *)((char *)v60 + 24);
                *(__int128 *)((char *)v60 + 24) = *(__int128 *)((char *)v55 + 24);
                *(__int128 *)((char *)v55 + 24) = v63;
                LOBYTE(v62) = *((_BYTE *)v60 + 40);
                *((_BYTE *)v60 + 40) = *((_BYTE *)v55 + 40);
                *((_BYTE *)v55 + 40) = v62;
                v64 = *((_QWORD *)v60 + 6);
                *((_QWORD *)v60 + 6) = *((_QWORD *)v55 + 6);
                *((_QWORD *)v55 + 6) = v64;
                v65 = *((_QWORD *)v60 + 7);
                *((_QWORD *)v60 + 7) = *((_QWORD *)v55 + 7);
                *((_QWORD *)v55 + 7) = v65;
                v60 += 4;
                v55 += 4;
                if (v55 == v27)
                  break;
                if (v60 == v61)
                  v61 = v55;
              }
              v55 = v61;
            }
            while (v60 != v61);
            v55 = v56;
          }
        }
      }
      a4 -= v41;
      v8 -= v26;
      if (v41 + v26 >= a4 + v8)
      {
        v69 = a3;
        v70 = a6;
        sub_22E5CC8F8(v55, v27, v69, a4, v8, a6, a7);
        a6 = v70;
        v27 = v28;
        v8 = v26;
        a4 = v41;
        a3 = v55;
      }
      else
      {
        v66 = v28;
        v67 = a6;
        sub_22E5CC8F8(a1, v66, v55, v41, v26, a6, a7);
        a6 = v67;
        a1 = v55;
      }
      a2 = v27;
      if (!v8)
        return result;
    }
    if (a4 <= v8)
    {
      if (a1 != a2)
      {
        v93 = 0;
        do
        {
          v94 = &a6[v93];
          result = (__n128)a1[v93];
          v95 = a1[v93 + 1];
          v96 = a1[v93 + 3];
          v94[2] = a1[v93 + 2];
          v94[3] = v96;
          *v94 = (__int128)result;
          v94[1] = v95;
          v93 += 4;
        }
        while (&a1[v93] != a2);
        if (v93 * 16)
        {
          v97 = &a6[v93];
          v98 = (uint64_t)&a6[v93 - 4];
          while (a2 != a3)
          {
            v101 = *((_QWORD *)a2 + 3);
            v100 = *((_QWORD *)a2 + 4);
            v99 = (__n128 *)((char *)a2 + 24);
            if (v100)
            {
              v102 = 4 * v100;
              v103 = (_DWORD *)*((_QWORD *)a2 + 3);
              while (*v103 != 10)
              {
                ++v103;
                v102 -= 4;
                if (!v102)
                {
                  v103 = (_DWORD *)(v101 + 4 * v100);
                  break;
                }
              }
            }
            else
            {
              v103 = (_DWORD *)*((_QWORD *)a2 + 3);
            }
            v106 = *((_QWORD *)a6 + 3);
            v105 = *((_QWORD *)a6 + 4);
            v104 = (__n128 *)((char *)a6 + 24);
            if (v105)
            {
              v107 = 4 * v105;
              v108 = (_DWORD *)*((_QWORD *)a6 + 3);
              while (*v108 != 10)
              {
                ++v108;
                v107 -= 4;
                if (!v107)
                {
                  v108 = (_DWORD *)(v106 + 4 * v105);
                  break;
                }
              }
            }
            else
            {
              v108 = (_DWORD *)*((_QWORD *)a6 + 3);
            }
            v109 = ((uint64_t)v103 - v101) >> 2;
            v110 = ((uint64_t)v108 - v106) >> 2;
            if (*((_DWORD *)a6 + 4))
              v111 = 1;
            else
              v111 = *((_DWORD *)a2 + 4) == 0;
            v112 = !v111;
            v113 = v110 != v105 || v109 == v100;
            v114 = (__n128 *)((char *)a1 + 24);
            if (v113 && v112 == 0)
            {
              *a1 = *a6;
              *((_DWORD *)a1 + 4) = *((_DWORD *)a6 + 4);
              result = *v104;
              *v114 = *v104;
              v116 = a6;
              a6 += 4;
            }
            else
            {
              *a1 = *a2;
              *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
              result = *v99;
              *v114 = *v99;
              v116 = a2;
              a2 += 4;
            }
            v117 = *((_BYTE *)v116 + 40);
            *((_QWORD *)a1 + 6) = *((_QWORD *)v116 + 6);
            v118 = *((_QWORD *)v116 + 7);
            *((_BYTE *)a1 + 40) = v117;
            *((_QWORD *)a1 + 7) = v118;
            a1 += 4;
            if (v97 == a6)
              return result;
          }
          if (v97 != a6)
          {
            v124 = 0;
            do
            {
              v125 = &a1[v124];
              v126 = &a6[v124];
              *v125 = a6[v124];
              *((_DWORD *)v125 + 4) = a6[v124 + 1];
              result = *(__n128 *)((char *)&a6[v124 + 1] + 8);
              *(__int128 *)((char *)v125 + 24) = (__int128)result;
              *((_BYTE *)v125 + 40) = BYTE8(a6[v124 + 2]);
              *((_QWORD *)v125 + 6) = *(_QWORD *)&a6[v124 + 3];
              *((_QWORD *)v125 + 7) = *((_QWORD *)&a6[v124 + 3] + 1);
              v124 += 4;
            }
            while ((__int128 *)v98 != v126);
          }
        }
      }
    }
    else if (a2 != a3)
    {
      v71 = 0;
      do
      {
        v72 = &a6[v71];
        result = (__n128)a2[v71];
        v73 = a2[v71 + 1];
        v74 = a2[v71 + 3];
        v72[2] = a2[v71 + 2];
        v72[3] = v74;
        *v72 = (__int128)result;
        v72[1] = v73;
        v71 += 4;
      }
      while (&a2[v71] != a3);
      if (v71 * 16)
      {
        v75 = &a6[v71];
        while (a2 != a1)
        {
          v78 = *((_QWORD *)v75 - 5);
          v77 = *((_QWORD *)v75 - 4);
          v76 = (__n128 *)((char *)v75 - 40);
          if (v77)
          {
            v79 = 4 * v77;
            v80 = (_DWORD *)*((_QWORD *)v75 - 5);
            while (*v80 != 10)
            {
              ++v80;
              v79 -= 4;
              if (!v79)
              {
                v80 = (_DWORD *)(v78 + 4 * v77);
                break;
              }
            }
          }
          else
          {
            v80 = (_DWORD *)*((_QWORD *)v75 - 5);
          }
          v82 = *((_QWORD *)a2 - 5);
          v81 = *((_QWORD *)a2 - 4);
          if (v81)
          {
            v83 = 4 * v81;
            v84 = (_DWORD *)*((_QWORD *)a2 - 5);
            while (*v84 != 10)
            {
              ++v84;
              v83 -= 4;
              if (!v83)
              {
                v84 = (_DWORD *)(v82 + 4 * v81);
                break;
              }
            }
          }
          else
          {
            v84 = (_DWORD *)*((_QWORD *)a2 - 5);
          }
          v86 = ((uint64_t)v80 - v78) >> 2 != v77 && v81 == ((uint64_t)v84 - v82) >> 2;
          if (*((_DWORD *)a2 - 12))
            v87 = 1;
          else
            v87 = *((_DWORD *)v75 - 12) == 0;
          if (!v87)
            v86 = 1;
          v88 = !v86;
          if (v86)
            v89 = a2 - 4;
          else
            v89 = v75 - 4;
          if (v88)
            v90 = v75;
          else
            v90 = a2;
          if (!v88)
            v76 = (__n128 *)((char *)a2 - 40);
          *(a3 - 4) = *v89;
          *((_DWORD *)a3 - 12) = *((_DWORD *)v90 - 12);
          result = *v76;
          *(__int128 *)((char *)a3 - 40) = (__int128)*v76;
          v91 = *((_BYTE *)v90 - 24);
          *((_QWORD *)a3 - 2) = *((_QWORD *)v90 - 2);
          v92 = *((_QWORD *)v90 - 1);
          *((_BYTE *)a3 - 24) = v91;
          *((_QWORD *)a3 - 1) = v92;
          a3 -= 4;
          if (v88)
            v75 -= 4;
          else
            a2 -= 4;
          if (v75 == a6)
            return result;
        }
        if (v75 != a6)
        {
          v122 = 0;
          do
          {
            v123 = &a3[v122];
            *(v123 - 4) = v75[v122 - 4];
            *((_DWORD *)v123 - 12) = v75[v122 - 3];
            result = *(__n128 *)((char *)&v75[v122 - 2] - 8);
            *(__int128 *)((char *)v123 - 40) = (__int128)result;
            *((_BYTE *)v123 - 24) = *((_BYTE *)&v75[v122 - 1] - 8);
            *((_QWORD *)v123 - 2) = *(_QWORD *)&v75[v122 - 1];
            *((_QWORD *)v123 - 1) = *((_QWORD *)&v75[v122 - 1] + 1);
            v122 -= 4;
          }
          while (&v75[v122] != a6);
        }
      }
    }
  }
  return result;
}

void sub_22E5CD1BC(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  unint64_t v4;
  unint64_t v5;
  int v6;
  llvm *v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  _BYTE v14[352];
  uint64_t v15;

  v2 = a2;
  v15 = *MEMORY[0x24BDAC8D0];
  if (a2 >= 5)
  {
    v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40)
      v2 = v6 + 1;
    else
      v2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v9 = 0;
    v10 = v14;
    do
    {
      v11 = a1 + v9;
      v12 = *(_QWORD *)(a1 + v9 + 8);
      if ((v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        *v10 = v12;
        v10[1] = v10 + 3;
        v13 = (void **)(v11 + 16);
        v10[2] = 0x400000000;
        if (*(_DWORD *)(v11 + 24))
          sub_22F2528D0((uint64_t)(v10 + 1), (uint64_t)v13);
        v10 += 11;
        if ((void *)(a1 + v9 + 32) != *v13)
          free(*v13);
      }
      v9 += 88;
    }
    while (v9 != 352);
    if (v2 > 4)
    {
      *(_DWORD *)a1 &= ~1u;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](88 * v2, 8);
      *(_QWORD *)(a1 + 16) = v2;
    }
    sub_22F286844(a1, (uint64_t)v14, (uint64_t)v10);
  }
  else
  {
    v7 = *(llvm **)(a1 + 8);
    v8 = *(_DWORD *)(a1 + 16);
    if (v2 > 4)
    {
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](88 * v2, 8);
      *(_QWORD *)(a1 + 16) = v2;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_22F286844(a1, (uint64_t)v7, (uint64_t)v7 + 88 * v8);
    llvm::deallocate_buffer(v7, (void *)(88 * v8));
  }
}

__n128 sub_22E5CD3A4(uint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t a4, uint64_t *a5, uint64_t a6, __n128 result)
{
  __n128 *v9;
  __n128 *v10;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  __n128 *v20;
  uint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  __n128 v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  __n128 v30;
  __n128 v31;
  unint64_t v32;
  unint64_t v33;

  if (a4 >= 2)
  {
    v9 = (__n128 *)a1;
    if (a4 == 2)
    {
      v10 = (__n128 *)(a2 - 2);
      if (sub_22E5CD600(*a3, *(a2 - 2), *(a2 - 1), *a1, a1[1]))
      {
        result = *v9;
        *v9 = *v10;
        *v10 = result;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v22 = a5;
      v23 = a4 >> 1;
      v24 = &a1[2 * (a4 >> 1)];
      v25 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        v26 = sub_22E5CD78C(a1, v24, a3, v25, a5, result);
        v27 = &v22[2 * v23];
        result.n128_u64[0] = sub_22E5CD78C((uint64_t *)&v9[a4 >> 1], a2, a3, a4 - (a4 >> 1), v27, v26).n128_u64[0];
        v28 = &v22[2 * a4];
        v29 = v27;
        while (v29 != v28)
        {
          if (sub_22E5CD600(*a3, *v29, v29[1], *v22, v22[1]))
          {
            v30 = *(__n128 *)v29;
            v29 += 2;
            result = v30;
          }
          else
          {
            v31 = *(__n128 *)v22;
            v22 += 2;
            result = v31;
          }
          *v9++ = result;
          if (v22 == v27)
          {
            if (v29 != v28)
            {
              v32 = 0;
              do
              {
                result = *(__n128 *)&v29[v32 / 8];
                v9[v32 / 0x10] = result;
                v32 += 16;
              }
              while (&v29[v32 / 8] != v28);
            }
            return result;
          }
        }
        if (v22 != v27)
        {
          v33 = 0;
          do
          {
            result = *(__n128 *)&v22[v33 / 8];
            v9[v33 / 0x10] = result;
            v33 += 16;
          }
          while (&v22[v33 / 8] != v27);
        }
      }
      else
      {
        sub_22E5CD3A4(a1, v24, a3, v25, a5, a6);
        sub_22E5CD3A4(&v9[a4 >> 1], a2, a3, a4 - (a4 >> 1), v22, a6);
        sub_22E5CD9B8((uint64_t)v9, (uint64_t *)&v9[a4 >> 1], a2, a3, a4 >> 1, a4 - (a4 >> 1), v22, a6);
      }
    }
    else if (a1 != a2)
    {
      v12 = a1 + 2;
      if (a1 + 2 != a2)
      {
        v13 = 0;
        v14 = a1;
        do
        {
          v15 = v12;
          if (sub_22E5CD600(*a3, v14[2], v14[3], *v14, v14[1]))
          {
            v16 = *v15;
            v17 = v14[3];
            v18 = v13;
            while (1)
            {
              v19 = (char *)v9 + v18;
              result = *(__n128 *)((char *)v9 + v18);
              *(__n128 *)((char *)v9 + v18 + 16) = result;
              if (!v18)
                break;
              v18 -= 16;
              if (!sub_22E5CD600(*a3, v16, v17, *((_QWORD *)v19 - 2), *((_QWORD *)v19 - 1)))
              {
                v20 = (__n128 *)((char *)v9 + v18 + 16);
                goto LABEL_15;
              }
            }
            v20 = v9;
LABEL_15:
            v20->n128_u64[0] = v16;
            v20->n128_u64[1] = v17;
          }
          v12 = v15 + 2;
          v13 += 16;
          v14 = v15;
        }
        while (v15 + 2 != a2);
      }
    }
  }
  return result;
}

BOOL sub_22E5CD600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unsigned int v28;

  v5 = 0;
  v6 = a2 + 16 * a3;
  v7 = a4 + 16 * a5;
  do
  {
    v8 = v5;
    if (-16 * a3 == v5)
      break;
    if (-16 * a5 == v5)
      break;
    if (*(unsigned __int8 *)(*(_QWORD *)(v6 + v5 - 16) & 0xFFFFFFFFFFFFFFFCLL) != *(unsigned __int8 *)(*(_QWORD *)(v7 + v5 - 16) & 0xFFFFFFFFFFFFFFFCLL))
      break;
    v9 = *(_QWORD *)(v6 + v5 - 8);
    v10 = *(_QWORD *)(v7 + v5 - 8);
    v5 -= 16;
  }
  while (v9 == v10);
  v11 = -16 * a5;
  v12 = v8 + 16 * a3 == 0;
  if (!(v8 + 16 * a3) && v11 == v8)
    return 0;
  if (-16 * a3 != v8 && v11 != v8)
  {
    v13 = *(_QWORD *)(v6 + v8 - 8);
    v14 = *(_QWORD *)(v7 + v8 - 8);
    v15 = *(_QWORD *)(v13 + 16);
    v16 = v15 & 0xFFFFFFFFFFFFFFF8;
    if ((v15 & 4) != 0)
      v16 = *(_QWORD *)v16;
    v17 = (*(_WORD *)(v16 + 8) & 0x7E) - 34;
    if (v16)
      v18 = v16 - 64;
    else
      v18 = 0;
    if (v17 >= 4)
      v18 = 0;
    v19 = *(_QWORD *)(v14 + 16);
    v20 = v19 & 0xFFFFFFFFFFFFFFF8;
    if ((v19 & 4) != 0)
      v20 = *(_QWORD *)v20;
    v21 = (*(_WORD *)(v20 + 8) & 0x7E) - 34;
    if (v20)
      v22 = v20 - 64;
    else
      v22 = 0;
    if (v21 >= 4)
      v22 = 0;
    if (v18 == v22)
    {
      v28 = sub_22EFC306C(v13);
      return v28 < sub_22EFC306C(v14);
    }
    else
    {
      v23 = *(_QWORD **)a1;
      v24 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v24)
      {
        v25 = 8 * v24;
        v26 = &v23[v24];
        while (*v23 != v13 && *v23 != v14)
        {
          ++v23;
          v25 -= 8;
          if (!v25)
          {
            v23 = v26;
            return *v23 == v13;
          }
        }
      }
      return *v23 == v13;
    }
  }
  return v12;
}

__n128 sub_22E5CD78C(uint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t a4, uint64_t *a5, __n128 result)
{
  uint64_t *v6;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  __n128 v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;

  if (a4)
  {
    v6 = a5;
    v10 = a1;
    if (a4 == 2)
    {
      v11 = a2 - 2;
      if (sub_22E5CD600(*a3, *(a2 - 2), *(a2 - 1), *a1, a1[1]))
      {
        *(_OWORD *)v6 = *(_OWORD *)v11;
        result = *(__n128 *)v10;
      }
      else
      {
        *(_OWORD *)v6 = *(_OWORD *)v10;
        result = *(__n128 *)v11;
      }
      *((__n128 *)v6 + 1) = result;
    }
    else if (a4 == 1)
    {
      result = *(__n128 *)a1;
      *(_OWORD *)a5 = *(_OWORD *)a1;
    }
    else if ((uint64_t)a4 > 8)
    {
      v19 = &a1[2 * (a4 >> 1)];
      sub_22E5CD3A4(a1, v19, a3, a4 >> 1, a5, a4 >> 1);
      sub_22E5CD3A4(&v10[2 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), &v6[2 * (a4 >> 1)], a4 - (a4 >> 1));
      v20 = &v10[2 * (a4 >> 1)];
      while (v20 != a2)
      {
        if (sub_22E5CD600(*a3, *v20, v20[1], *v10, v10[1]))
        {
          v21 = *(__n128 *)v20;
          v20 += 2;
          result = v21;
        }
        else
        {
          v22 = *(__n128 *)v10;
          v10 += 2;
          result = v22;
        }
        *(__n128 *)v6 = result;
        v6 += 2;
        if (v10 == v19)
        {
          if (v20 != a2)
          {
            v23 = 0;
            do
            {
              result = *(__n128 *)&v20[v23];
              *(__n128 *)&v6[v23] = result;
              v23 += 2;
            }
            while (&v20[v23] != a2);
          }
          return result;
        }
      }
      if (v10 != v19)
      {
        v24 = 0;
        do
        {
          result = *(__n128 *)&v10[v24];
          *(__n128 *)&v6[v24] = result;
          v24 += 2;
        }
        while (&v10[v24] != v19);
      }
    }
    else if (a1 != a2)
    {
      result = *(__n128 *)a1;
      *(_OWORD *)a5 = *(_OWORD *)a1;
      v12 = a1 + 2;
      if (a1 + 2 != a2)
      {
        v13 = 0;
        v14 = a5;
        do
        {
          v15 = v10;
          v16 = v14;
          v10 = v12;
          v14 += 2;
          v17 = v14;
          if (sub_22E5CD600(*a3, v15[2], v15[3], *v16, v16[1]))
          {
            *(_OWORD *)v14 = *(_OWORD *)v16;
            v17 = v6;
            if (v16 != v6)
            {
              v18 = v13;
              while (1)
              {
                v17 = (uint64_t *)((char *)v6 + v18);
                if (!sub_22E5CD600(*a3, *v10, v15[3], *(uint64_t *)((char *)v6 + v18 - 16), *(uint64_t *)((char *)v6 + v18 - 8)))break;
                *(_OWORD *)v17 = *(_OWORD *)((char *)v6 + v18 - 16);
                v18 -= 16;
                if (!v18)
                {
                  v17 = v6;
                  break;
                }
              }
            }
          }
          result = *(__n128 *)v10;
          *(_OWORD *)v17 = *(_OWORD *)v10;
          v12 = v10 + 2;
          v13 += 16;
        }
        while (v10 + 2 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_22E5CD9B8(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  __int128 v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  BOOL v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t *__src;
  uint64_t __srca;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t *v68;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;

  if (a6)
  {
    v9 = a6;
    v14 = (uint64_t *)result;
    while (a5 > a8 && v9 > a8)
    {
      if (!a5)
        return result;
      v15 = 0;
      v16 = -a5;
      while (1)
      {
        v17 = v14;
        v14 = (uint64_t *)((char *)v14 + v15 * 8);
        result = sub_22E5CD600(*a4, *a2, a2[1], *v14, v14[1]);
        if ((result & 1) != 0)
          break;
        v15 += 2;
        v18 = __CFADD__(v16++, 1);
        v14 = v17;
        if (v18)
          return result;
      }
      v19 = -v16;
      v67 = v9;
      v68 = a4;
      v65 = a8;
      v66 = a3;
      if (-v16 >= v9)
      {
        if (v16 == -1)
        {
          v73 = *(_OWORD *)&v17[v15];
          *(_OWORD *)&v17[v15] = *(_OWORD *)a2;
          *(_OWORD *)a2 = v73;
          return result;
        }
        if (v16 > 0)
          v19 = 1 - v16;
        __srca = v19 >> 1;
        v23 = &v17[2 * (v19 >> 1) + v15];
        v21 = a3;
        if (a3 != a2)
        {
          v28 = *v68;
          v29 = ((char *)a3 - (char *)a2) >> 4;
          v21 = a2;
          do
          {
            v30 = &v21[2 * (v29 >> 1)];
            v31 = sub_22E5CD600(v28, *v30, v30[1], *v23, v23[1]);
            if (v31)
              v29 += ~(v29 >> 1);
            else
              v29 >>= 1;
            if (v31)
              v21 = v30 + 2;
          }
          while (v29);
        }
        v64 = ((char *)v21 - (char *)a2) >> 4;
        v27 = __srca;
      }
      else
      {
        if (v9 >= 0)
          v20 = v9;
        else
          v20 = v9 + 1;
        __src = a2;
        v64 = v20 >> 1;
        v21 = &a2[2 * (v20 >> 1)];
        v22 = a4;
        v23 = a2;
        if (v14 != a2)
        {
          v24 = ((char *)a2 - (char *)v17 - v15 * 8) >> 4;
          v23 = v14;
          do
          {
            v25 = &v23[2 * (v24 >> 1)];
            v26 = v22;
            if (sub_22E5CD600(*v22, *v21, v21[1], *v25, v25[1]))
            {
              v24 >>= 1;
            }
            else
            {
              v23 = v25 + 2;
              v24 += ~(v24 >> 1);
            }
            v22 = v26;
          }
          while (v24);
        }
        v27 = ((char *)v23 - (char *)v17 - v15 * 8) >> 4;
        a2 = __src;
      }
      a3 = v21;
      if (v23 != a2)
      {
        a3 = v23;
        if (a2 != v21)
        {
          if (v23 + 2 == a2)
          {
            v71 = *(_OWORD *)v23;
            memmove(v23, a2, (char *)v21 - (char *)a2);
            a3 = (uint64_t *)((char *)v23 + (char *)v21 - (char *)a2);
            *(_OWORD *)a3 = v71;
          }
          else if (a2 + 2 == v21)
          {
            a3 = v23 + 2;
            v72 = *((_OWORD *)v21 - 1);
            if (v21 - 2 != v23)
              memmove(v23 + 2, v23, (char *)(v21 - 2) - (char *)v23);
            *(_OWORD *)v23 = v72;
          }
          else
          {
            v32 = ((char *)a2 - (char *)v23) >> 4;
            if (v32 == ((char *)v21 - (char *)a2) >> 4)
            {
              v33 = 0;
              do
              {
                v70 = *(_OWORD *)&v23[v33];
                *(_OWORD *)&v23[v33] = *(_OWORD *)&a2[v33];
                v34 = (uint64_t)&v23[v33 + 2];
                *(_OWORD *)&a2[v33] = v70;
                v35 = (uint64_t)&a2[v33 + 2];
                v33 += 2;
              }
              while ((uint64_t *)v34 != a2 && v35 != (_QWORD)v21);
              a3 = a2;
            }
            else
            {
              v37 = ((char *)v21 - (char *)a2) >> 4;
              v38 = ((char *)a2 - (char *)v23) >> 4;
              do
              {
                v39 = v38;
                v38 = v37;
                v37 = v39 % v37;
              }
              while (v37);
              if (v38)
              {
                v40 = &v23[2 * v38];
                do
                {
                  v41 = *((_OWORD *)v40 - 1);
                  v40 -= 2;
                  v42 = &v40[2 * v32];
                  v43 = v40;
                  do
                  {
                    v44 = v43;
                    v43 = v42;
                    *(_OWORD *)v44 = *(_OWORD *)v42;
                    v45 = __OFSUB__(v32, ((char *)v21 - (char *)v42) >> 4);
                    v47 = v32 - (((char *)v21 - (char *)v42) >> 4);
                    v46 = (v47 < 0) ^ v45;
                    v42 = &v23[2 * v47];
                    if (v46)
                      v42 = &v43[2 * v32];
                  }
                  while (v42 != v40);
                  *(_OWORD *)v43 = v41;
                }
                while (v40 != v23);
              }
              a3 = &v23[2 * (((char *)v21 - (char *)a2) >> 4)];
            }
          }
        }
      }
      a5 = -(v27 + v16);
      v48 = v67 - v64;
      if (v27 + v64 >= v67 - (v27 + v64) - v16)
      {
        v51 = v27;
        result = sub_22E5CD9B8(a3, v21, v66, v68, a5, v67 - v64, a7, v65);
        v21 = v23;
        a4 = v68;
        a8 = v65;
        v48 = v64;
        a5 = v51;
      }
      else
      {
        v49 = v23;
        a4 = v68;
        v50 = v27;
        a8 = v65;
        result = sub_22E5CD9B8(v14, v49, a3, v68, v50, v64, a7, v65);
        v14 = a3;
        a3 = v66;
      }
      a2 = v21;
      v9 = v48;
      if (!v48)
        return result;
    }
    if (a5 <= v9)
    {
      if (v14 != a2)
      {
        v56 = 0;
        do
        {
          *(_OWORD *)&a7[v56] = *(_OWORD *)&v14[v56];
          v56 += 2;
        }
        while (&v14[v56] != a2);
        if (v56 * 8)
        {
          v57 = a7;
          while (a2 != a3)
          {
            result = sub_22E5CD600(*a4, *a2, a2[1], *v57, v57[1]);
            if ((_DWORD)result)
            {
              v58 = *(_OWORD *)a2;
              a2 += 2;
              v59 = v58;
            }
            else
            {
              v60 = *(_OWORD *)v57;
              v57 += 2;
              v59 = v60;
            }
            *(_OWORD *)v14 = v59;
            v14 += 2;
            if (&a7[v56] == v57)
              return result;
          }
          return (uint64_t)memmove(v14, v57, (char *)a7 - (char *)v57 + v56 * 8);
        }
      }
    }
    else if (a2 != a3)
    {
      v52 = 0;
      do
      {
        *(_OWORD *)&a7[v52] = *(_OWORD *)&a2[v52];
        v52 += 2;
      }
      while (&a2[v52] != a3);
      if (v52 * 8)
      {
        v53 = &a7[v52];
        v54 = a3 - 2;
        while (a2 != v14)
        {
          result = sub_22E5CD600(*a4, *(v53 - 2), *(v53 - 1), *(a2 - 2), *(a2 - 1));
          if ((_DWORD)result)
            v55 = a2 - 2;
          else
            v55 = v53 - 2;
          if ((_DWORD)result)
            a2 -= 2;
          else
            v53 -= 2;
          *(_OWORD *)v54 = *(_OWORD *)v55;
          v54 -= 2;
          if (v53 == a7)
            return result;
        }
        if (v53 != a7)
        {
          v61 = 0;
          do
          {
            *(_OWORD *)&v54[v61] = *(_OWORD *)&v53[v61 - 2];
            v61 -= 2;
          }
          while (&v53[v61] != a7);
        }
      }
    }
  }
  return result;
}

uint64_t sub_22E5CDF1C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v9;
  unsigned int v10;
  int v11;
  char v12;
  uint64_t v13;
  uint64_t *v14;

  v14 = 0;
  result = sub_22E5CE02C(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v14);
  v9 = v14;
  v10 = *(_DWORD *)(a2 + 16);
  if ((result & 1) != 0)
  {
    v12 = 0;
    goto LABEL_7;
  }
  v11 = *(_DWORD *)(a2 + 8);
  if (4 * v11 + 4 >= 3 * v10)
  {
    v10 *= 2;
    goto LABEL_9;
  }
  if (v10 + ~v11 - *(_DWORD *)(a2 + 12) <= v10 >> 3)
  {
LABEL_9:
    sub_22E5CE0C0(a2, v10);
    v14 = 0;
    result = sub_22E5CE02C(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v14);
    v9 = v14;
  }
  ++*(_DWORD *)(a2 + 8);
  if (*v9 != -4096)
    --*(_DWORD *)(a2 + 12);
  *v9 = *a3;
  v9[1] = *a4;
  v10 = *(_DWORD *)(a2 + 16);
  v12 = 1;
LABEL_7:
  v13 = *(_QWORD *)a2 + 16 * v10;
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v13;
  *(_BYTE *)(a1 + 16) = v12;
  return result;
}

uint64_t sub_22E5CE02C(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 16 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v12 = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(a1 + 16 * (v11 & v4));
        v7 = *v6;
        v12 = 1;
        if (*v6 == a3)
          goto LABEL_13;
      }
      v12 = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    v12 = 0;
  }
LABEL_13:
  *a4 = v6;
  return v12;
}

_QWORD *sub_22E5CE0C0(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22E5CE180(a1, v4, &v4[2 * v3]);
    return (_QWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22E5CE180(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_22E5CE02C(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *a2;
      v10[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_22E5CE22C(unint64_t *a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v1 = *a1;
  if ((*a1 & 1) != 0)
    return (~(-1 << (v1 >> 58)) & ~(v1 >> 1)) == 0;
  v2 = *(unsigned int *)(v1 + 64);
  v3 = v2 >> 6;
  if (v2 < 0x40)
  {
LABEL_8:
    v7 = *(_DWORD *)(v1 + 64) & 0x3F;
    if (!v7)
      return 1;
    return *(_QWORD *)(*(_QWORD *)v1 + 8 * v3) == ~(-1 << v7);
  }
  v4 = *(uint64_t **)v1;
  if (v3 <= 1)
    v5 = 1;
  else
    v5 = v3;
  while (1)
  {
    v6 = *v4++;
    if (v6 != -1)
      return 0;
    if (!--v5)
      goto LABEL_8;
  }
}

_QWORD *sub_22E5CE2B4(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 56 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    v12 = 56 * v3;
    sub_22F286C00(a1, (uint64_t)v4, (uint64_t)v4 + v12);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)v12);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 56 * v10;
      do
      {
        *result = -4096;
        result += 7;
        v11 -= 56;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22E5CE380(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::LLVMContext *v10;
  llvm::Value *v11;
  uint64_t v12;
  void *v13[2];
  char v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 8);
  if ((v4 & 3) != 0)
  {
    if ((v4 & 0xFFFFFFFFFFFFFFFCLL) != 0)
    {
      v13[0] = (void *)a2;
      v13[1] = (void *)(a2 + 272);
      v14 = 0;
      v15 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 232);
      v11 = sub_22E50E974((uint64_t *)v13, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFCLL));
      v12 = *(_QWORD *)(a2 + 32);
      v16 = 257;
      sub_22E3BF45C((uint64_t *)(a2 + 272), (uint64_t)v11, v12, 1, (uint64_t)v13);
    }
    else
    {
      llvm::Type::getInt64Ty(*(llvm::Type **)(a2 + 336), 0);
      llvm::ConstantInt::get();
    }
    llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 336), v10);
    llvm::ConstantInt::get();
    sub_22F281A70(a2, *(_QWORD *)(a1 + 24));
    __asm { BR              X10 }
  }
  if (*(_BYTE *)(a1 + 120))
    return sub_22F24866C(a2 + 272);
  v5 = *(_QWORD *)(a1 + 72);
  if (*(_BYTE *)(a1 + 104))
  {
    v6 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v6 + 8) = 0;
    sub_22E5F01E0((_QWORD *)a2, *(_QWORD *)(a1 + 112), v6);
  }
  v7 = *(_QWORD *)(a1 + 80);
  if (v7)
    v8 = *(_QWORD *)(v7 + 24);
  else
    v8 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v5 + 568))(v5, a2, *(unsigned int *)(*(_QWORD *)(a1 + 88) + 12), v8);
}

uint64_t sub_22E5CF7C4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  __int128 v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  _BYTE v11[28];
  __int128 v12;
  _BYTE v13[28];
  __int128 v14;
  _BYTE v15[28];
  uint64_t v16;
  uint64_t v17;
  int v18;

  if (*((_BYTE *)a1 + 24))
  {
    v9 = 0;
    v8 = 0;
    v10 = 0u;
    memset(v11, 0, sizeof(v11));
    v12 = 0u;
    memset(v13, 0, sizeof(v13));
    v14 = 0u;
    memset(v15, 0, sizeof(v15));
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v2 = a1[2];
    v6[0] = a1[1];
    v6[1] = sub_22E5CF87C;
    v6[2] = 0;
    v7 = 0uLL;
    return sub_22F290A9C(a2, v2, (uint64_t)v6, &v7);
  }
  else
  {
    v4 = *(unsigned int *)(a1[2] + 8);
    v5 = *a1;
    *(_QWORD *)&v7 = a1[1];
    *((_QWORD *)&v7 + 1) = sub_22E5CF87C;
    v8 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __int128 *, _QWORD))(*(_QWORD *)v5 + 360))(v5, a2, v4, &v7, 0);
  }
}

uint64_t sub_22E5CF87C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*((_BYTE *)a1 + 48))
    return sub_22F24866C((uint64_t)(a2 + 34));
  v4 = *a1;
  if (*((_BYTE *)a1 + 32))
  {
    v5 = a1[3];
    *(_DWORD *)(v5 + 8) = 0;
    sub_22E5F01E0(a2, a1[5], v5);
  }
  v6 = a1[1];
  if (v6)
    v7 = *(_QWORD *)(v6 + 24);
  else
    v7 = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v4 + 568))(v4, a2, *(unsigned int *)(a1[2] + 12), v7);
}

uint64_t sub_22E5CF914(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  llvm::LLVMContext *v8;
  llvm::Value *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t RuntimeFunction;
  llvm::Value *v14;
  _BYTE v16[32];
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  llvm *v24[4];
  unsigned int v25;
  llvm *v26;
  unsigned int v27;
  llvm *v28;
  unsigned int v29;
  llvm *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[2];
  _QWORD v40[10];
  _QWORD v41[10];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _BYTE v45[40];
  _QWORD *v46;
  uint64_t v47;
  _QWORD v48[6];
  _QWORD v49[26];
  _QWORD v50[26];
  _QWORD v51[25];

  v51[24] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD **)a1;
  v39[0] = v40;
  v39[1] = 0x400000000;
  v40[8] = v41;
  v40[9] = 0x400000000;
  v41[8] = v42;
  v41[9] = 0x400000000;
  v42[4] = v43;
  v42[5] = 0x400000000;
  v43[4] = v44;
  v43[5] = 0x400000000;
  v44[4] = v45;
  v44[5] = 0x400000000;
  v45[32] = 0;
  v46 = v48;
  v47 = 0x400000000;
  v48[4] = v49;
  v48[5] = 0x400000000;
  v49[24] = v50;
  v49[25] = 0x400000000;
  v50[24] = v51;
  v50[25] = 0x400000000;
  sub_22E5C9D18((uint64_t)v24, *(_QWORD *)(a1 + 8), a2);
  v30 = 0;
  v31 = 0;
  v32 = 0;
  sub_22E5BCBA4();
  llvm::deallocate_buffer(v30, (void *)(8 * v32));
  sub_22E5CA3DC(a2, (uint64_t)v39, *(_QWORD *)(a1 + 24), (llvm::OpenMPIRBuilder *)(v4 + 6), 1);
  v22 = 0;
  v23 = 0;
  v20 = 0;
  v21 = 0;
  v18 = 0;
  v19 = 0;
  v5 = *(_QWORD *)(a1 + 24);
  LOBYTE(v30) = 0;
  sub_22E5CB6B4(a2, &v23, &v22, &v21, &v20, &v19, &v18, v5, &v30);
  v6 = *(unsigned __int8 **)(a1 + 16);
  if (v6)
  {
    v30 = (llvm *)a2;
    v31 = a2 + 272;
    LOBYTE(v32) = 0;
    v33 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 232);
    v9 = sub_22E50E974((uint64_t *)&v30, v6);
    v10 = *(_QWORD *)(a2 + 32);
    LOWORD(v34) = 257;
    v7 = sub_22E3BF45C((uint64_t *)(a2 + 272), (uint64_t)v9, v10, 1, (uint64_t)&v30);
  }
  else
  {
    llvm::Type::getInt64Ty(*(llvm::Type **)(a2 + 336), 0);
    v7 = llvm::ConstantInt::get();
  }
  v11 = v7;
  llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 336), v8);
  v12 = llvm::ConstantInt::get();
  v30 = (llvm *)sub_22E59F7E4(v4, a2, *(_DWORD *)(*(_QWORD *)(a1 + 8) + 12));
  v31 = v11;
  v32 = v12;
  v33 = v23;
  v34 = v22;
  v35 = v21;
  v36 = v20;
  v37 = v19;
  v38 = v18;
  RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
  v17 = 257;
  sub_22E479C7C(a2, RuntimeFunction, v14, (uint64_t)&v30, 9, (uint64_t)v16);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 24) + 80))
    sub_22F27B464(*(_QWORD **)(a1 + 32), a2);
  llvm::deallocate_buffer(v28, (void *)(16 * v29));
  sub_22F284814((uint64_t)v26, v27);
  llvm::deallocate_buffer(v26, (void *)(88 * v27));
  llvm::deallocate_buffer(v24[2], (void *)(16 * v25));
  return sub_22E5B45E0((uint64_t)v39);
}

_QWORD *sub_22E5CFC2C(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;

  if (*(_DWORD *)(*result + 80))
  {
    v2 = (_QWORD *)result[1];
    v2[2] = result[2];
    return (_QWORD *)sub_22F27B464(v2, a2);
  }
  return result;
}

llvm::Value *sub_22E5CFC4C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  llvm::Value *v7;
  uint64_t v8;
  uint64_t v9;
  llvm::LLVMContext *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t RuntimeFunction;
  llvm::Value *v14;
  _BYTE v16[32];
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD **)a1;
  v22 = 0;
  v23 = 0;
  v20 = 0;
  v21 = 0;
  v18 = 0;
  v19 = 0;
  v5 = *(_QWORD *)(a1 + 16);
  LOBYTE(v24) = 1;
  sub_22E5CB6B4(a2, &v23, &v22, &v21, &v20, &v19, &v18, v5, &v24);
  v6 = *(unsigned __int8 **)(a1 + 8);
  if (v6)
  {
    v24 = a2;
    v25 = a2 + 272;
    LOBYTE(v26) = 0;
    v27 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 232);
    v7 = sub_22E50E974(&v24, v6);
    v8 = *(_QWORD *)(a2 + 32);
    LOWORD(v28) = 257;
    v9 = sub_22E3BF45C((uint64_t *)(a2 + 272), (uint64_t)v7, v8, 1, (uint64_t)&v24);
  }
  else
  {
    llvm::Type::getInt64Ty(*(llvm::Type **)(a2 + 336), 0);
    v9 = llvm::ConstantInt::get();
  }
  v11 = v9;
  llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 336), v10);
  v12 = llvm::ConstantInt::get();
  v24 = sub_22E59F7E4(v4, a2, *(_DWORD *)(*(_QWORD *)(a1 + 24) + 12));
  v25 = v11;
  v26 = v12;
  v27 = v23;
  v28 = v22;
  v29 = v21;
  v30 = v20;
  v31 = v19;
  v32 = v18;
  RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
  v17 = 257;
  return sub_22E479C7C(a2, RuntimeFunction, v14, (uint64_t)&v24, 9, (uint64_t)v16);
}

uint64_t sub_22E5CFDF8(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  unsigned int *v7;
  uint64_t v8;
  _DWORD *v9;
  unsigned int v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  llvm::Value *(*v32)(uint64_t, uint64_t);
  uint64_t v33;
  llvm *v34;
  __int128 v35;
  _BYTE v36[41];
  __int128 v37;
  uint64_t v38;
  llvm *v39[4];
  unsigned int v40;
  llvm *v41;
  unsigned int v42;
  llvm *v43;
  unsigned int v44;
  _QWORD v45[2];
  _QWORD v46[10];
  _QWORD v47[10];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _BYTE v51[40];
  _QWORD *v52;
  uint64_t v53;
  _QWORD v54[6];
  _QWORD v55[26];
  _QWORD v56[26];
  _QWORD v57[26];

  v57[24] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD **)a1;
  v45[0] = v46;
  v45[1] = 0x400000000;
  v46[8] = v47;
  v46[9] = 0x400000000;
  v47[8] = v48;
  v47[9] = 0x400000000;
  v48[4] = v49;
  v48[5] = 0x400000000;
  v49[4] = v50;
  v49[5] = 0x400000000;
  v50[4] = v51;
  v50[5] = 0x400000000;
  v51[32] = 0;
  v52 = v54;
  v53 = 0x400000000;
  v54[4] = v55;
  v54[5] = 0x400000000;
  v55[24] = v56;
  v55[25] = 0x400000000;
  v56[24] = v57;
  v56[25] = 0x400000000;
  sub_22E5C9D18((uint64_t)v39, *(_QWORD *)(a1 + 16), a2);
  v34 = 0;
  sub_22E5BCBA4();
  llvm::deallocate_buffer(0, 0);
  v35 = 0u;
  memset(v36, 0, sizeof(v36));
  v37 = 0uLL;
  v38 = 0;
  sub_22E5CA3DC(a2, (uint64_t)v45, (uint64_t)&v34, (llvm::OpenMPIRBuilder *)(v4 + 6), 1);
  v5 = 0;
  v6 = 0;
  v7 = *(unsigned int **)(*(_QWORD *)(a1 + 16) + 24);
  if (v7)
  {
    v10 = *v7;
    v9 = v7 + 4;
    v8 = v10;
    v6 = v9;
    v5 = &v9[2 * v10];
    if (v10)
    {
      v12 = 8 * v8;
      while (*(_DWORD *)(*(_QWORD *)v9 + 8) != 18)
      {
        v9 += 2;
        v12 -= 8;
        if (!v12)
          goto LABEL_8;
      }
    }
    if (v9 != v5)
    {
      v11 = 1;
      goto LABEL_14;
    }
LABEL_8:
    if ((_DWORD)v8)
    {
      v13 = 8 * v8;
      while (*(_DWORD *)(*(_QWORD *)v6 + 8) != 51)
      {
        v6 += 2;
        v13 -= 8;
        if (!v13)
        {
          v6 = v5;
          break;
        }
      }
    }
  }
  v11 = v6 != v5;
LABEL_14:
  LOBYTE(v31) = 0;
  sub_22E5CB6B4(a2, &v35, (_QWORD *)&v35 + 1, v36, &v36[8], (uint64_t *)&v36[32], (uint64_t *)&v36[24], (uint64_t)&v34, &v31);
  v14 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v14 + 192) = v37;
  v15 = *(_QWORD *)(a2 + 96);
  v16 = *(unsigned __int8 *)(v4[1] + 130);
  *(_QWORD *)v14 = v35;
  *(_QWORD *)(v14 + 8) = v15;
  *(_QWORD *)(v14 + 16) = v16;
  *(_DWORD *)(v14 + 24) = 0;
  *(_QWORD *)(v14 + 32) = 0;
  *(_QWORD *)(v14 + 40) = 0;
  v17 = *(_QWORD *)(a2 + 96);
  v18 = *(unsigned __int8 *)(v4[1] + 130);
  v19 = *(_QWORD *)(a1 + 24);
  v20 = *(_QWORD *)v36;
  *(_QWORD *)(v19 + 48) = *((_QWORD *)&v35 + 1);
  *(_QWORD *)(v19 + 56) = v17;
  *(_QWORD *)(v19 + 64) = v18;
  *(_DWORD *)(v19 + 72) = 0;
  *(_QWORD *)(v19 + 80) = 0;
  *(_QWORD *)(v19 + 88) = 0;
  v21 = *(_QWORD *)(a2 + 32);
  v22 = *(unsigned __int8 *)(v4[1] + 130);
  v23 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v23 + 96) = v20;
  *(_QWORD *)(v23 + 104) = v21;
  *(_QWORD *)(v23 + 112) = v22;
  *(_DWORD *)(v23 + 120) = 0;
  *(_QWORD *)(v23 + 128) = 0;
  *(_QWORD *)(v23 + 136) = 0;
  v24 = *(_QWORD *)(a2 + 96);
  v25 = *(unsigned __int8 *)(v4[1] + 130);
  v26 = *(_QWORD *)(a1 + 24);
  v27 = *(_QWORD *)&v36[8];
  *(_QWORD *)(v26 + 144) = *(_QWORD *)&v36[24];
  *(_QWORD *)(v26 + 152) = v24;
  *(_QWORD *)(v26 + 160) = v25;
  *(_DWORD *)(v26 + 168) = 0;
  *(_QWORD *)(v26 + 176) = 0;
  *(_QWORD *)(v26 + 184) = 0;
  **(_QWORD **)(a1 + 32) = v27;
  **(_QWORD **)(a1 + 40) = *(_QWORD *)&v36[32];
  v28 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    v31 = *(_QWORD *)(a1 + 8);
    v32 = sub_22E5D01E0;
    v33 = 0;
    sub_22F290A9C(a2, v28, (uint64_t)&v31, *(__int128 **)(a1 + 24));
  }
  else
  {
    v29 = *(unsigned int *)(v28 + 8);
    v31 = *(_QWORD *)(a1 + 8);
    v32 = sub_22E5D01E0;
    v33 = 0;
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t *, _QWORD))(*v4 + 360))(v4, a2, v29, &v31, 0);
  }
  llvm::deallocate_buffer(*(llvm **)((char *)&v37 + 4), (void *)(56 * HIDWORD(v38)));
  llvm::deallocate_buffer(v43, (void *)(16 * v44));
  sub_22F284814((uint64_t)v41, v42);
  llvm::deallocate_buffer(v41, (void *)(88 * v42));
  llvm::deallocate_buffer(v39[2], (void *)(16 * v40));
  return sub_22E5B45E0((uint64_t)v45);
}

llvm::Value *sub_22E5D01E0(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  unsigned __int8 *v5;
  llvm::Value *v6;
  uint64_t v7;
  uint64_t v8;
  llvm::LLVMContext *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  _DWORD *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t RuntimeFunction;
  llvm::Value *v25;
  _BYTE v27[32];
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD **)a1;
  v5 = *(unsigned __int8 **)(a1 + 16);
  if (v5)
  {
    v29 = a2;
    v30 = a2 + 272;
    LOBYTE(v31) = 0;
    v32 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 232);
    v6 = sub_22E50E974(&v29, v5);
    v7 = *(_QWORD *)(a2 + 32);
    LOWORD(v33) = 257;
    v8 = sub_22E3BF45C((uint64_t *)(a2 + 272), (uint64_t)v6, v7, 1, (uint64_t)&v29);
  }
  else
  {
    llvm::Type::getInt64Ty(*(llvm::Type **)(a2 + 336), 0);
    v8 = llvm::ConstantInt::get();
  }
  v10 = v8;
  llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 336), v9);
  v11 = llvm::ConstantInt::get();
  v12 = sub_22E59F7E4(v4, a2, *(_DWORD *)(*(_QWORD *)(a1 + 8) + 12));
  v35 = 0;
  v33 = 0u;
  v34 = 0u;
  v29 = v12;
  v30 = v10;
  v31 = v11;
  v13 = *(_QWORD *)(a1 + 24);
  if ((*(_BYTE *)(v13 + 24) & 3) != 0)
  {
    v14 = sub_22F28ABCC((_OWORD *)v13, (_QWORD *)a2);
    v13 = *(_QWORD *)(a1 + 24);
  }
  else
  {
    v14 = *(_QWORD *)v13;
  }
  v32 = v14;
  if ((*(_BYTE *)(v13 + 72) & 3) != 0)
  {
    v15 = sub_22F28ABCC((_OWORD *)(v13 + 48), (_QWORD *)a2);
    v13 = *(_QWORD *)(a1 + 24);
  }
  else
  {
    v15 = *(_QWORD *)(v13 + 48);
  }
  *(_QWORD *)&v33 = v15;
  if ((*(_BYTE *)(v13 + 120) & 3) != 0)
  {
    v16 = sub_22F28ABCC((_OWORD *)(v13 + 96), (_QWORD *)a2);
    v13 = *(_QWORD *)(a1 + 24);
  }
  else
  {
    v16 = *(_QWORD *)(v13 + 96);
  }
  *((_QWORD *)&v33 + 1) = v16;
  v34 = *(_OWORD *)*(_QWORD *)(a1 + 32);
  if ((*(_BYTE *)(v13 + 168) & 3) != 0)
    v17 = sub_22F28ABCC((_OWORD *)(v13 + 144), (_QWORD *)a2);
  else
    v17 = *(_QWORD *)(v13 + 144);
  v35 = v17;
  v18 = *(_QWORD *)(a1 + 8);
  v19 = *(unsigned int **)(v18 + 24);
  if (v19)
  {
    v22 = *v19;
    v20 = v19 + 4;
    v21 = v22;
    if (v22)
    {
      v23 = 8 * v21;
      do
      {
        if (*(_DWORD *)(*(_QWORD *)v20 + 8) == 51)
          break;
        v20 += 2;
        v23 -= 8;
      }
      while (v23);
    }
  }
  RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
  v28 = 257;
  return sub_22E479C7C(a2, RuntimeFunction, v25, (uint64_t)&v29, 9, (uint64_t)v27);
}

llvm::Value *sub_22E5D0480(llvm::Value *result, uint64_t a2)
{
  llvm::Value *v2;
  uint64_t v3;
  _BYTE v4[32];
  __int16 v5;

  if (*(_QWORD *)(a2 + 320))
  {
    v3 = *((_QWORD *)result + 1);
    v2 = (llvm::Value *)*((_QWORD *)result + 2);
    v5 = 257;
    return sub_22E479C7C(a2, v3, v2, (uint64_t)result + 24, 2, (uint64_t)v4);
  }
  return result;
}

llvm::Value *sub_22E5D04C4(llvm::Value *result, _QWORD *a2)
{
  llvm::Value *v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Value *v8;
  _BYTE v9[32];
  __int16 v10;
  _QWORD v11[4];

  v11[3] = *MEMORY[0x24BDAC8D0];
  if (a2[40])
  {
    v3 = result;
    v11[0] = sub_22E59F964(*(_QWORD *)(a2[18] + 808), (uint64_t)a2, *((_DWORD *)result + 6));
    v4 = (_OWORD *)((char *)v3 + 32);
    if ((*((_BYTE *)v3 + 56) & 3) != 0)
      v5 = sub_22F28ABCC(v4, a2);
    else
      v5 = *(_QWORD *)v4;
    v6 = a2[12];
    v10 = 257;
    v11[1] = sub_22E3C1338(a2 + 34, v5, v6, (uint64_t)v9);
    v11[2] = sub_22E5B86AC((uint64_t)a2, *((_QWORD *)v3 + 10));
    v7 = *((_QWORD *)v3 + 1);
    v8 = (llvm::Value *)*((_QWORD *)v3 + 2);
    v10 = 257;
    return sub_22E479C7C((uint64_t)a2, v7, v8, (uint64_t)v11, 3, (uint64_t)v9);
  }
  return result;
}

uint64_t *sub_22E5D05AC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t *v16;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 < 3 * v6)
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
    {
      sub_22E5D06E0(a1, v6);
      v16 = 0;
      sub_22E5C4728(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v16);
      a3 = v16;
    }
LABEL_4:
    v7 = *a3;
    goto LABEL_5;
  }
  sub_22E5D06E0(a1, 2 * v6);
  v7 = *a2;
  v9 = *(_DWORD *)(a1 + 16) - 1;
  v10 = ((*a2 >> 4) ^ (*a2 >> 9)) & v9;
  a3 = (uint64_t *)(*(_QWORD *)a1 + 16 * v10);
  v11 = *a3;
  if (*a2 != *a3)
  {
    v12 = 0;
    v13 = 1;
    while (v11 != -4096)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v11 == -8192;
      if (v14)
        v12 = a3;
      v15 = v10 + v13++;
      v10 = v15 & v9;
      a3 = (uint64_t *)(*(_QWORD *)a1 + 16 * v10);
      v11 = *a3;
      if (v7 == *a3)
        goto LABEL_5;
    }
    if (v12)
      a3 = v12;
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_22E5D06E0(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22E5D07A0(a1, v4, &v4[2 * v3]);
    return (_QWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22E5D07A0(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  unsigned int v14;

  *(_QWORD *)(result + 8) = 0;
  v3 = *(unsigned int *)(result + 16);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD **)result;
    v5 = 16 * v3;
    do
    {
      *v4 = -4096;
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  for (; a2 != a3; a2 += 2)
  {
    v6 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v7 = *(_DWORD *)(result + 16) - 1;
      v8 = v7 & ((v6 >> 4) ^ (v6 >> 9));
      v9 = *(_QWORD *)result + 16 * v8;
      v10 = *(_QWORD *)v9;
      if (v6 != *(_QWORD *)v9)
      {
        v11 = 0;
        v12 = 1;
        while (v10 != -4096)
        {
          if (v11)
            v13 = 0;
          else
            v13 = v10 == -8192;
          if (v13)
            v11 = v9;
          v14 = v8 + v12++;
          v8 = v14 & v7;
          v9 = *(_QWORD *)result + 16 * (v14 & v7);
          v10 = *(_QWORD *)v9;
          if (v6 == *(_QWORD *)v9)
            goto LABEL_11;
        }
        if (v11)
          v9 = v11;
      }
LABEL_11:
      *(_QWORD *)v9 = v6;
      *(_DWORD *)(v9 + 8) = *((_DWORD *)a2 + 2);
      ++*(_DWORD *)(result + 8);
    }
  }
  return result;
}

unint64_t sub_22E5D0878(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  unint64_t v5;
  unint64_t v7;

  v2 = a2;
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = *(_QWORD *)a1 + 48 * v3;
    if (*(_QWORD *)a1 <= a2 && v5 > a2)
    {
      v7 = a2 - *(_QWORD *)a1;
      sub_22F287028(a1);
      return *(_QWORD *)a1 + v7;
    }
    else
    {
      sub_22F287028(a1);
    }
  }
  return v2;
}

void *sub_22E5D08E0(uint64_t a1, uint64_t a2)
{
  void *result;
  uint64_t v5;
  void *v6;

  result = (void *)llvm::deallocate_buffer(*(llvm **)a1, (void *)(16 * *(unsigned int *)(a1 + 16)));
  v5 = *(unsigned int *)(a2 + 16);
  *(_DWORD *)(a1 + 16) = v5;
  if ((_DWORD)v5)
  {
    v6 = (void *)MEMORY[0x23489D23C](16 * v5, 8);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    return memcpy(v6, *(const void **)a2, 16 * *(unsigned int *)(a1 + 16));
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  return result;
}

_QWORD *sub_22E5D0954(_QWORD *result, _BYTE *a2, _BYTE *a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;

  if (a4)
  {
    if (a4 >= 0x276276276276277)
      abort();
    v6 = result;
    v7 = 13 * a4;
    result = operator new(104 * a4);
    v8 = result;
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[v7];
    if (a2 != a3)
    {
      v9 = 104 * ((a3 - a2 - 104) / 0x68uLL) + 104;
      result = memcpy(result, a2, v9);
      v8 = (_QWORD *)((char *)v8 + v9);
    }
    v6[1] = v8;
  }
  return result;
}

void sub_22E5D0A14(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  void *__p;
  char *v19;
  char *v20;
  char *v21;
  _QWORD *v22;

  v4 = a1[2];
  v5 = a1[1];
  if (v5 >= v4)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 4);
    if (v7 + 1 > 0x555555555555555)
      abort();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *a1) >> 4);
    v9 = 2 * v8;
    if (2 * v8 <= v7 + 1)
      v9 = v7 + 1;
    if (v8 >= 0x2AAAAAAAAAAAAAALL)
      v10 = 0x555555555555555;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10 > 0x555555555555555)
      sub_22E3B3F8C();
    v11 = 3 * v10;
    v12 = (char *)operator new(48 * v10);
    v13 = &v12[48 * v7];
    __p = v12;
    v19 = v13;
    v21 = &v12[16 * v11];
    *(_QWORD *)v13 = *a2;
    *((_QWORD *)v13 + 1) = v13 + 32;
    *((_OWORD *)v13 + 1) = xmmword_22F44E350;
    if (a2[2])
      sub_22E3B2DB8((uint64_t)(v13 + 8), (uint64_t)(a2 + 1));
    v20 = v13 + 48;
    sub_22F287368(a1, &__p);
    v6 = a1[1];
    v14 = v19;
    if (v20 != v19)
    {
      v15 = v20 - 16;
      do
      {
        v16 = (char *)*((_QWORD *)v15 - 3);
        if (v15 != v16)
          free(v16);
        v17 = v15 - 32;
        v15 -= 48;
      }
      while (v17 != v14);
    }
    if (__p)
      operator delete(__p);
  }
  else
  {
    *(_QWORD *)v5 = *a2;
    *(_QWORD *)(v5 + 8) = v5 + 32;
    *(_OWORD *)(v5 + 16) = xmmword_22F44E350;
    if (a2[2])
      sub_22E3B2DB8(v5 + 8, (uint64_t)(a2 + 1));
    v6 = v5 + 48;
  }
  a1[1] = v6;
}

_QWORD *sub_22E5D0BA0(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](32 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F2874EC(a1, (uint64_t)v4, (uint64_t)v4 + 32 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(32 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        *result = -4096;
        result += 4;
        v11 -= 32;
      }
      while (v11);
    }
  }
  return result;
}

_QWORD *sub_22E5D0C60(uint64_t a1, int a2)
{
  unsigned int v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *result;
  unsigned int v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 168 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F28773C(a1, (uint64_t)v4, (uint64_t)v4 + 168 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(168 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (v10)
    {
      v11 = 168 * v10;
      do
      {
        *result = -4096;
        result += 21;
        v11 -= 168;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22E5D0D2C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  _BYTE **v8;
  _BYTE *v9;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  sub_22F0D492C(a2);
  v11 = v13;
  v3 = v15;
  v12 = v14;
  v4 = v16;
  v6 = *((_QWORD *)&v13 + 1);
  v5 = (uint64_t *)v13;
  if ((_QWORD)v13 == v15 && *((_QWORD *)&v13 + 1) == v16)
    return 0;
  while (1)
  {
    v8 = (_BYTE **)v5;
    if ((v6 & 3) != 0)
    {
      if ((v6 & 0xFFFFFFFFFFFFFFFCLL) != 0)
        v8 = (_BYTE **)((v6 & 0xFFFFFFFFFFFFFFFCLL) + 40);
      else
        v8 = (_BYTE **)sub_22F3AC1A8(*v5);
    }
    v9 = *v8;
    if (*v8 && ((*v9 + 21) < 0x7Bu || (v9[1] & 3) != 0) && (sub_22E5BA5E4(a1) & 1) != 0)
      break;
    if ((v6 & 3) != 0)
    {
      if (v6 >= 4)
        sub_22F0D8720((uint64_t)&v11);
      else
        sub_22F3F2FE0((uint64_t)&v11, 1);
    }
    else
    {
      *(_QWORD *)&v11 = v5 + 1;
    }
    v6 = *((_QWORD *)&v11 + 1);
    v5 = (uint64_t *)v11;
    if (v11 == __PAIR128__(v4, v3))
      return 0;
  }
  return 1;
}

uint64_t sub_22E5D0E38(unsigned int *a1, _QWORD *a2, void (***a3)(_QWORD))
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t *v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 *v27;
  int v28;
  uint64_t v29;
  __int128 *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  unsigned int v37;
  uint64_t v38;
  __int128 *v39;
  uint64_t v40;
  uint64_t v42[2];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  _OWORD v52[8];
  uint64_t v53;
  _OWORD v54[8];
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;

  (**a3)(a3);
  v5 = *(_QWORD *)a1;
  v6 = *(_OWORD *)(*(_QWORD *)a1 + 112);
  v54[6] = *(_OWORD *)(*(_QWORD *)a1 + 96);
  v54[7] = v6;
  v55 = *(_QWORD *)(v5 + 128);
  v7 = *(_OWORD *)(v5 + 48);
  v54[2] = *(_OWORD *)(v5 + 32);
  v54[3] = v7;
  v8 = *(_OWORD *)(v5 + 80);
  v54[4] = *(_OWORD *)(v5 + 64);
  v54[5] = v8;
  v9 = *(_OWORD *)(v5 + 16);
  v54[0] = *(_OWORD *)v5;
  v54[1] = v9;
  v10 = (uint64_t *)sub_22F25F748((uint64_t)a2, (uint64_t)v54, a1[10]);
  v11 = sub_22F110930(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 64) & 0xFFFFFFFFFFFFFFF0));
  v12 = *((_QWORD *)a1 + 2);
  LOWORD(v58) = 257;
  if (v11)
  {
    v13 = (uint64_t)(a2 + 34);
    v14 = 41;
  }
  else
  {
    v13 = (uint64_t)(a2 + 34);
    v14 = 37;
  }
  v15 = sub_22E3C18F4(v13, v14, v10, v12, (uint64_t)&v56);
  *(_QWORD *)&v56 = "lp_cond_then";
  LOWORD(v58) = 259;
  v16 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  *(_QWORD *)&v56 = "lp_cond_exit";
  LOWORD(v58) = 259;
  v17 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v18 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x23489C09C](v18, v16, v17, v15, 0);
  LOWORD(v58) = 257;
  sub_22E3C12C8(a2 + 34, v18, (uint64_t)&v56);
  sub_22E5ED9B4(a2, v16, 0);
  v19 = *((_QWORD *)a1 + 2);
  v20 = *(_QWORD *)a1;
  v52[0] = *(_OWORD *)*(_QWORD *)a1;
  v21 = *(_OWORD *)(v20 + 64);
  v23 = *(_OWORD *)(v20 + 16);
  v22 = *(_OWORD *)(v20 + 32);
  v52[3] = *(_OWORD *)(v20 + 48);
  v52[4] = v21;
  v52[1] = v23;
  v52[2] = v22;
  v25 = *(_OWORD *)(v20 + 96);
  v24 = *(_OWORD *)(v20 + 112);
  v26 = *(_OWORD *)(v20 + 80);
  v53 = *(_QWORD *)(v20 + 128);
  v52[6] = v25;
  v52[7] = v24;
  v52[5] = v26;
  sub_22E4E87FC((uint64_t)a2, v19, (uint64_t)v52, 0);
  v27 = (__int128 *)*((_QWORD *)a1 + 3);
  v28 = sub_22E619D68(*((_QWORD *)v27 + 8));
  if (v28 == 1)
  {
    v61 = v27[5];
    v62 = v27[6];
    v63 = v27[7];
    v64 = *((_QWORD *)v27 + 16);
    v57 = v27[1];
    v58 = v27[2];
    v59 = v27[3];
    v60 = v27[4];
    v56 = *v27;
    v37 = a1[10];
    *(_QWORD *)&v43 = a2;
    *((_QWORD *)&v43 + 1) = a2 + 34;
    LOWORD(v44) = 0;
    v38 = sub_22E5027E0((uint64_t)&v43, (uint64_t)&v56, v37);
    v39 = (__int128 *)*((_QWORD *)a1 + 4);
    v61 = v39[5];
    v62 = v39[6];
    v63 = v39[7];
    v64 = *((_QWORD *)v39 + 16);
    v57 = v39[1];
    v58 = v39[2];
    v59 = v39[3];
    v60 = v39[4];
    v56 = *v39;
    *(_QWORD *)&v43 = a2;
    *((_QWORD *)&v43 + 1) = a2 + 34;
    LOWORD(v44) = 0;
    sub_22E5025C8((uint64_t *)&v43, v38, v40, (uint64_t)&v56, 0);
  }
  else if (!v28)
  {
    v61 = v27[5];
    v62 = v27[6];
    v63 = v27[7];
    v64 = *((_QWORD *)v27 + 16);
    v57 = v27[1];
    v58 = v27[2];
    v59 = v27[3];
    v60 = v27[4];
    v56 = *v27;
    v29 = sub_22F25F748((uint64_t)a2, (uint64_t)&v56, a1[10]);
    v30 = (__int128 *)*((_QWORD *)a1 + 4);
    v31 = v30[1];
    v32 = v30[2];
    v33 = v30[4];
    v46 = v30[3];
    v47 = v33;
    v45 = v32;
    v34 = v30[5];
    v35 = v30[6];
    v36 = v30[7];
    v51 = *((_QWORD *)v30 + 16);
    v49 = v35;
    v50 = v36;
    v48 = v34;
    v43 = *v30;
    v44 = v31;
    sub_22E4E87FC((uint64_t)a2, v29, (uint64_t)&v43, 0);
  }
  sub_22E5EDA70((uint64_t)a2);
  v42[0] = 0;
  v42[1] = (uint64_t)a2;
  sub_22E48EE24(v42, 0, 1);
  sub_22E48F084(v42);
  return sub_22E5ED9B4(a2, v17, 1);
}

uint64_t sub_22E5D120C(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (*(_QWORD *)(result + 8))
  {
    v1 = *(unsigned int *)(result + 16);
    if (v1 <= 4 * *(_DWORD *)(result + 8) || v1 < 0x41)
    {
      if ((_DWORD)v1)
      {
        v2 = *(_QWORD **)result;
        v3 = 16 * v1;
        do
        {
          *v2 = -4096;
          v2 += 2;
          v3 -= 16;
        }
        while (v3);
      }
      *(_QWORD *)(result + 8) = 0;
    }
    else
    {
      return sub_22E5867C8(result);
    }
  }
  return result;
}

uint64_t sub_22E5D1260(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  llvm::Value *v22;
  uint64_t RuntimeFunction;
  unint64_t v24;
  _DWORD *v26;
  uint64_t v27;
  const char *v28;
  unsigned int v29;
  llvm::Value *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  unint64_t v35;
  _DWORD *v36;
  unsigned int v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  llvm::Instruction *v48;
  uint64_t v49;
  llvm::Instruction *v50;
  uint64_t v51;
  uint64_t v52;
  llvm::Value *v53;
  uint64_t v54;
  unint64_t v55;
  _DWORD *v57;
  uint64_t v58;
  const char *v59;
  unsigned int v60;
  llvm::Value *v61;
  llvm::Instruction *v62;
  llvm::Instruction *v63;
  uint64_t v64;
  llvm::Value **v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t *v68;
  unsigned int v69;
  llvm::SmallPtrSetImplBase *v70;
  uint64_t v71;
  uint64_t v72;
  void **v73;
  void **v74;
  uint64_t *v75;
  _OWORD v76[3];
  uint64_t v77;
  _OWORD v78[3];
  _OWORD v79[8];
  uint64_t v80;
  _OWORD v81[8];
  uint64_t v82;
  _BYTE v83[64];
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  _OWORD v89[2];
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94[2];
  uint64_t v95;
  __int128 v96[3];
  uint64_t v97;

  v5 = result;
  v97 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 152) + 76) & 0x10) == 0 || !*(_DWORD *)(result + 4472))
  {
    result = sub_22F2880A4(result + 4504, *(_QWORD *)(a2 + 1624));
    v6 = result;
    if ((*(_BYTE *)(v5 + 4504) & 1) != 0)
    {
      v7 = v5 + 4512;
      v8 = 4;
    }
    else
    {
      v7 = *(_QWORD *)(v5 + 4512);
      v8 = *(_DWORD *)(v5 + 4520);
    }
    if (v7 + 320 * v8 != result)
    {
      v75 = (uint64_t *)(a2 + 272);
      v9 = *(_QWORD *)(result + 32);
      v71 = *(_QWORD *)(result + 40);
      if (v9 != v71)
      {
        v69 = a3;
        v70 = (llvm::SmallPtrSetImplBase *)(result + 112);
        do
        {
          v12 = *(void **)v9;
          v13 = sub_22E3BA914(v70, *(void **)v9);
          v14 = *(_QWORD *)(v6 + 120);
          v15 = 128;
          if (v14 == *(_QWORD *)(v6 + 112))
            v15 = 132;
          v16 = *((_QWORD *)v12 + 6);
          v73 = (void **)(v14 + 8 * *(unsigned int *)(v6 + v15));
          v74 = v13;
          if (v13 == v73)
          {
            v72 = 0;
            v17 = *((_QWORD *)v12 + 6);
          }
          else
          {
            *(_QWORD *)&v91 = v12;
            *(_QWORD *)&v96[0] = 0;
            v18 = sub_22E3CED3C((uint64_t *)(a2 + 2904), &v91, v96);
            v19 = *(_QWORD *)&v96[0];
            if (!v18)
              v19 = *(_QWORD *)(a2 + 2904) + 56 * *(unsigned int *)(a2 + 2920);
            v91 = *(_OWORD *)(v19 + 8);
            v92 = *(_OWORD *)(v19 + 24);
            v93 = *(_OWORD *)(v19 + 40);
            v20 = *((_QWORD *)v12 + 6);
            sub_22E6281E0(*(_QWORD **)(a2 + 144), v20, (uint64_t)v89);
            v96[0] = v91;
            v96[1] = v92;
            v96[2] = v93;
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
            v94[0] = v89[0];
            v94[1] = v89[1];
            v95 = v90;
            memset(&v83[8], 0, 28);
            *(_QWORD *)&v83[40] = 0;
            *(_QWORD *)&v83[48] = 0;
            v84 = 0uLL;
            *(_QWORD *)((char *)&v85 + 4) = 2;
            *(_DWORD *)v83 = 0;
            v86 = 0u;
            v87 = 0u;
            sub_22E3C113C((uint64_t)v83, v96, v20, 2, v94, v21);
            v81[6] = v86;
            v81[7] = v87;
            v82 = v88;
            v81[2] = *(_OWORD *)&v83[32];
            v81[3] = *(_OWORD *)&v83[48];
            v81[4] = v84;
            v81[5] = v85;
            v81[0] = *(_OWORD *)v83;
            v81[1] = *(_OWORD *)&v83[16];
            v72 = sub_22F25F748(a2, (uint64_t)v81, v69);
            v17 = *((_QWORD *)v12 + 6);
          }
          *(_QWORD *)&v96[0] = 0;
          *(_QWORD *)&v96[0] = sub_22F28CE84(a2, v17);
          RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
          v24 = *((_QWORD *)v12 + 5) & 0xFFFFFFFFFFFFFFF8;
          if ((*((_QWORD *)v12 + 5) & 7) != 0 || v24 == 0)
          {
            v27 = 0;
            v28 = "";
          }
          else
          {
            v26 = *(_DWORD **)(v24 + 16);
            v29 = *v26;
            v28 = (const char *)(v26 + 4);
            v27 = v29;
          }
          *(_WORD *)&v83[32] = 261;
          *(_QWORD *)v83 = v28;
          *(_QWORD *)&v83[8] = v27;
          v30 = sub_22E479C7C(a2, RuntimeFunction, v22, (uint64_t)v96, 1, (uint64_t)v83);
          llvm::Attribute::get();
          llvm::Value::getContext(v30);
          *((_QWORD *)v30 + 8) = llvm::AttributeList::addAttributeAtIndex();
          sub_22E66C868(*(_QWORD *)(a2 + 144) + 280, v16, 0);
          v31 = llvm::PointerType::get();
          v32 = 0;
          v33 = *((_QWORD *)v12 + 5);
          v34 = "";
          if ((v33 & 7) == 0)
          {
            v35 = v33 & 0xFFFFFFFFFFFFFFF8;
            if (v35)
            {
              v36 = *(_DWORD **)(v35 + 16);
              v37 = *v36;
              v34 = (const char *)(v36 + 4);
              v32 = v37;
            }
          }
          *(_WORD *)&v83[32] = 773;
          *(_QWORD *)v83 = v34;
          *(_QWORD *)&v83[8] = v32;
          *(_QWORD *)&v83[16] = "_on_stack";
          v38 = sub_22E3C1338(v75, (uint64_t)v30, v31, (uint64_t)v83);
          sub_22E619C24(v38, v16, 1, 0, a2, (uint64_t)v83);
          v39 = *(_OWORD *)&v83[8];
          v40 = *(_OWORD *)&v83[40];
          *(_OWORD *)(v9 + 32) = *(_OWORD *)&v83[24];
          *(_OWORD *)(v9 + 48) = v40;
          *(_OWORD *)(v9 + 16) = v39;
          *(_QWORD *)(v9 + 8) = v30;
          if (v74 != v73)
          {
            v79[6] = v86;
            v79[7] = v87;
            v80 = v88;
            v79[2] = *(_OWORD *)&v83[32];
            v79[3] = *(_OWORD *)&v83[48];
            v79[4] = v84;
            v79[5] = v85;
            v79[0] = *(_OWORD *)v83;
            v79[1] = *(_OWORD *)&v83[16];
            sub_22E4E87FC(a2, v72, (uint64_t)v79, 0);
            v41 = *(uint64_t **)(v6 + 312);
            v78[0] = *(_OWORD *)&v83[8];
            v78[1] = *(_OWORD *)&v83[24];
            v78[2] = *(_OWORD *)&v83[40];
            sub_22E5BC134(v41, a2, (uint64_t)v12, (uint64_t)v78);
          }
          if (!*(_BYTE *)(a2 + 2892))
          {
            v42 = *(_QWORD *)(a2 + 2880);
            if (v42)
            {
              sub_22F257BAC(v42, *((_DWORD *)v12 + 6), &v77);
              v43 = (uint64_t *)((char *)v30 + 48);
              if (&v77 == v43)
              {
                if (v77)
                  llvm::MetadataTracking::untrack();
              }
              else
              {
                if (*v43)
                  llvm::MetadataTracking::untrack();
                v44 = v77;
                *v43 = v77;
                if (v44)
                {
                  llvm::MetadataTracking::retrack();
                  v77 = 0;
                }
              }
            }
          }
          v9 += 64;
        }
        while (v9 != v71);
      }
      v10 = *(unsigned int *)(v6 + 184);
      if ((_DWORD)v10)
      {
        v45 = *(unint64_t **)(v6 + 176);
        v46 = 8 * v10;
        do
        {
          v47 = *v45;
          v48 = sub_22F28CE84(a2, *(_QWORD *)(*v45 + 48));
          sub_22EF5B404(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 144), v47, 0);
          v49 = llvm::ConstantInt::get();
          *(_WORD *)&v83[32] = 257;
          v50 = sub_22F26180C((uint64_t)v75, (uint64_t)v48, v49, (uint64_t)v83);
          v51 = llvm::ConstantInt::get();
          *(_WORD *)&v83[32] = 257;
          v52 = sub_22E4DF3BC((uint64_t)v75, (uint64_t)v50, v51, (uint64_t)v83, 0);
          *(_WORD *)&v83[32] = 257;
          sub_22E3BDEA8((uint64_t)v75, v52, v51, (uint64_t)v83, 1, 0);
          *(_QWORD *)&v96[0] = 0;
          *(_QWORD *)&v96[0] = sub_22F28CE84(a2, *(_QWORD *)(v47 + 48));
          v54 = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
          v55 = *(_QWORD *)(v47 + 40) & 0xFFFFFFFFFFFFFFF8;
          if ((*(_QWORD *)(v47 + 40) & 7) != 0 || v55 == 0)
          {
            v58 = 0;
            v59 = "";
          }
          else
          {
            v57 = *(_DWORD **)(v55 + 16);
            v60 = *v57;
            v59 = (const char *)(v57 + 4);
            v58 = v60;
          }
          *(_WORD *)&v83[32] = 261;
          *(_QWORD *)v83 = v59;
          *(_QWORD *)&v83[8] = v58;
          v61 = sub_22E479C7C(a2, v54, v53, (uint64_t)v96, 1, (uint64_t)v83);
          llvm::Attribute::get();
          llvm::Value::getContext(v61);
          *((_QWORD *)v61 + 8) = llvm::AttributeList::addAttributeAtIndex();
          v62 = sub_22F28CE84(a2, *(_QWORD *)(v47 + 48));
          v63 = v62;
          v64 = *(unsigned int *)(v6 + 232);
          if (v64 >= *(_DWORD *)(v6 + 236))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v64 = *(_QWORD *)(v6 + 224) + 16 * *(unsigned int *)(v6 + 232);
            *(_QWORD *)v64 = v61;
            *(_QWORD *)(v64 + 8) = v63;
            LODWORD(v64) = *(_DWORD *)(v6 + 232);
          }
          else
          {
            v65 = (llvm::Value **)(*(_QWORD *)(v6 + 224) + 16 * v64);
            *v65 = v61;
            v65[1] = v62;
          }
          *(_DWORD *)(v6 + 232) = v64 + 1;
          v66 = *(_QWORD *)(v47 + 48);
          v67 = sub_22EF5B404(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 144), v47, 0);
          sub_22F283454(a2, (uint64_t)v61, v66, v67, 0, (uint64_t)v83);
          v68 = *(uint64_t **)(v6 + 312);
          v76[0] = *(_OWORD *)&v83[8];
          v76[1] = *(_OWORD *)&v83[24];
          v76[2] = *(_OWORD *)&v83[40];
          sub_22E5BC134(v68, a2, v47, (uint64_t)v76);
          ++v45;
          v46 -= 8;
        }
        while (v46);
      }
      v11 = *(_QWORD *)(v6 + 312) + 24;
      sub_22E5BC320(v11, a2 + 2904);
      return sub_22F2840EC(v11);
    }
  }
  return result;
}

uint64_t sub_22E5D1A28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  int v15;
  char v16;
  uint64_t result;
  uint64_t (**v18)();
  uint64_t v19;
  int *v20;
  int v21;

  v14 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(*(_QWORD *)(v14 + 152) + 76) & 0x40) == 0
    && sub_22E5D1E74(*(_QWORD *)(v14 + 144), a2))
  {
    __asm { BR              X10 }
  }
  v15 = *(_DWORD *)(a1 + 4472);
  v16 = *(_BYTE *)(a1 + 4476);
  *(_DWORD *)(a1 + 4472) = 0;
  *(_BYTE *)(a1 + 4476) = 1;
  v21 = 0;
  v18 = off_24FA66528;
  v19 = a1;
  v20 = &v21;
  *(_QWORD *)(a7 + 16) = &v18;
  *(_BYTE *)(a1 + 4478) = 1;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (**)(), uint64_t, int *))(*(_QWORD *)a1 + 8))(a1, a2, a3, a4, a5, a6, 1, a7, v18, v19, v20);
  *(_BYTE *)(a1 + 4478) = 0;
  *(_DWORD *)(a1 + 4472) = v15;
  *(_BYTE *)(a1 + 4476) = v16;
  return result;
}

uint64_t sub_22E5D1D64(uint64_t result, uint64_t a2, uint64_t a3)
{
  llvm::Type *v3;
  llvm::LLVMContext *v4;

  if (a3)
  {
    if (!*(_BYTE *)(a3 + 16))
    {
      v3 = *(llvm::Type **)(*(_QWORD *)(result + 8) + 232);
      llvm::Module::getOrInsertNamedMetadata();
      llvm::ValueAsMetadata::get();
      llvm::MDString::get();
      llvm::Type::getInt32Ty(v3, v4);
      llvm::ConstantInt::get();
      llvm::ValueAsMetadata::get();
      llvm::MDTuple::getImpl();
      llvm::NamedMDNode::addOperand();
      llvm::Attribute::get();
      return llvm::Function::addFnAttr();
    }
  }
  return result;
}

uint64_t sub_22E5D1E74(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  int v8;
  int v9;
  char v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;

  result = 1;
  if (((1 << (*(_BYTE *)(a2 + 8) - 56)) & 0x1C390) != 0)
    return result;
  if (*(_DWORD *)(a2 + 8) == 67)
    return 0;
  v5 = sub_22F28423C(a2);
  v6 = sub_22F3F1924(*(unsigned __int8 **)(v5 + 8 * *(unsigned int *)(v5 + 8) + 32), 1);
  result = (uint64_t)sub_22E5B1A48(a1, v6);
  if (!result)
    return result;
  v7 = result;
  if (*(unsigned __int8 *)result - 21 > 0x40)
    return 0;
  v8 = *(_DWORD *)(result + 8);
  v9 = *(_DWORD *)(a2 + 8);
  LODWORD(result) = sub_22F421A78(v8);
  v10 = result;
  if (v9 == 56)
    result = 1;
  else
    result = result;
  if (v9 == 56 && (v10 & 1) == 0)
  {
    if (v8 == 80)
    {
      v11 = (unsigned __int8 *)sub_22F28423C(v7);
      result = (uint64_t)sub_22F3F1924(v11, 1);
      if (!result)
        return result;
      v12 = sub_22E5B1A48(a1, (unsigned __int8 *)result);
      if (v12 && *v12 - 21 <= 0x40 && sub_22F421A78(*((_DWORD *)v12 + 2)))
        return 1;
    }
    return 0;
  }
  return result;
}

llvm::Value *sub_22E5D1F80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  llvm::Value *v3;
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t Name;
  uint64_t v16;
  uint64_t v17;
  llvm::Value *v18;
  int8x16_t v19;
  unint64_t v20;
  unint64_t v21;
  llvm::LLVMContext *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  llvm::Type **v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t RuntimeFunction;
  llvm::Value *v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unsigned int v54;
  unint64_t *v55;
  int v56;
  unint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  llvm::Value *v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  llvm::Value *v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  _OWORD v93[3];
  _QWORD v94[3];
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  _OWORD v102[3];
  _QWORD v103[3];
  int v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  _OWORD v111[3];
  __int128 v112;
  __int128 v113;
  __int128 v114;
  _QWORD v115[3];
  int v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD v128[3];
  int v129;
  __int128 v130;
  int v131;
  _QWORD v132[3];
  int v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  int v141;
  _QWORD v142[3];
  int v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  int v151;
  _BYTE v152[32];
  __int16 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  unint64_t v157;
  void *v158;
  uint64_t v159;
  _WORD v160[34];
  _BYTE v161[20];
  _QWORD v162[4];
  __int16 v163;
  unint64_t v164;
  llvm::Type *v165;
  _QWORD *v166;
  uint64_t v167[329];
  uint64_t v168;
  unsigned int v169;
  _QWORD *v170;
  uint64_t v171;
  _QWORD v172[19];

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v88 = v3;
  v4 = (uint64_t **)v0;
  v172[16] = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(*(_QWORD *)(v0 + 8) + 144);
  v6 = sub_22E59F470(v1, 40);
  v170 = v172;
  v171 = 0x1000000000;
  v7 = sub_22EF60A6C(v5, 16, 0);
  v8 = sub_22EF60A6C(v5, 32, 0);
  v9 = *(_DWORD *)(v2 + 12);
  sub_22EA41AB8((uint64_t)v142, 62, 0, v9);
  v144 = 0;
  v145 = v7;
  v146 = 0;
  v147 = v9;
  v148 = v5 | 2;
  v149 = v142;
  v150 = 0;
  v142[0] = &off_24FAC3008;
  v151 = 1310720;
  v143 |= 0x200u;
  v89 = v2;
  LODWORD(v7) = *(_DWORD *)(v2 + 12);
  sub_22EA41AB8((uint64_t)v132, 62, 0, v7);
  v134 = 0;
  v135 = v8;
  v136 = 0;
  v137 = v7;
  v138 = v5 | 2;
  v139 = v132;
  v140 = 0;
  v132[0] = &off_24FAC3008;
  v141 = 1310720;
  v133 |= 0x200u;
  v10 = v171;
  v11 = HIDWORD(v171);
  if (v171 >= HIDWORD(v171))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v170[v171] = v142;
    v10 = v171;
    v11 = HIDWORD(v171);
  }
  else
  {
    v170[v171] = v142;
  }
  v12 = (v10 + 1);
  LODWORD(v171) = v12;
  if (v12 >= v11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v170[v171] = v132;
    LODWORD(v12) = v171;
  }
  else
  {
    v170[v12] = v132;
  }
  LODWORD(v171) = v12 + 1;
  v13 = sub_22F24E348((uint64_t)(v4[1] + 35), *(_QWORD *)(v5 + 16392), (uint64_t *)&v170);
  v14 = sub_22E46F2EC((uint64_t)(v4[1] + 35), v13);
  Name = llvm::Value::getName(v88);
  v163 = 773;
  v162[0] = Name;
  v162[1] = v16;
  v162[2] = "_wrapper";
  v17 = v4[1][25];
  v18 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x78);
  MEMORY[0x23489F6FC](v18, v14, 7, 0xFFFFFFFFLL, v162, v17);
  llvm::Function::addFnAttr();
  sub_22E62BF18(v4[1], 0, 0, v18, v13);
  *((_DWORD *)v18 + 8) = *((_DWORD *)v18 + 8) & 0xFFFFBFC0 | 0x4007;
  llvm::Function::addFnAttr();
  sub_22E618EBC((uint64_t)v162, (uint64_t)v4[1], 1);
  v79 = v18;
  sub_22E61A8FC((uint64_t)v162, 0, 0, *(_QWORD *)(v5 + 16392), v18, v13, (uint64_t *)&v170, *(_DWORD *)(v2 + 12), v19, *(unsigned int *)(v2 + 12));
  v20 = sub_22EFC3B90(*(_QWORD *)(v6 + 24));
  v158 = ".zero.addr";
  v160[8] = 259;
  v21 = sub_22E4D84FC((uint64_t)v162, (llvm::Type *)v162[3], (uint64_t)&v158);
  v23 = 0;
  if (v21 <= 7)
    v24 = 0;
  else
    v24 = v21 & 0xFFFFFFFFFFFFFFF8;
  if (v21 <= 7)
    v25 = 0;
  else
    v25 = (unint64_t)v22 & 0xFFFFFFFFFFFFFFF8;
  if (v21 >= 8)
    v23 = 1 << (v22 & 7 | (8 * (v21 & 7u)));
  *(_QWORD *)&v161[12] = 0;
  *(_QWORD *)&v161[4] = 0;
  llvm::Type::getInt32Ty((llvm::Type *)v167[8], v22);
  v26 = (llvm::Type **)llvm::ConstantInt::get();
  v128[0] = v24;
  v128[1] = v25;
  v128[2] = v23;
  v129 = 0;
  v130 = *(_OWORD *)v161;
  v131 = *(_DWORD *)&v161[16];
  sub_22E3BEDDC((uint64_t)v167, v26, (uint64_t)v128);
  v158 = v160;
  v159 = 0x800000000;
  *(_QWORD *)&v120 = v132;
  *(_QWORD *)&v154 = 0;
  v27 = sub_22E3CED3C(&v168, &v120, &v154);
  v28 = v154;
  if (!v27)
    v28 = v168 + 56 * v169;
  v155 = *(_OWORD *)(v28 + 24);
  v154 = *(_OWORD *)(v28 + 8);
  v156 = *(_OWORD *)(v28 + 40);
  if ((BYTE8(v155) & 3) != 0)
    v29 = sub_22F28ABCC(&v154, v162);
  else
    v29 = v154;
  v30 = v159;
  v31 = HIDWORD(v159);
  if (v159 >= HIDWORD(v159))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    *((_QWORD *)v158 + v159) = v29;
    v30 = v159;
    v31 = HIDWORD(v159);
  }
  else
  {
    *((_QWORD *)v158 + v159) = v29;
  }
  v32 = (v30 + 1);
  LODWORD(v159) = v32;
  if (v32 >= v31)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    *((_QWORD *)v158 + v159) = v24;
    LODWORD(v32) = v159;
  }
  else
  {
    *((_QWORD *)v158 + v32) = v24;
  }
  LODWORD(v159) = v32 + 1;
  v33 = *(_DWORD *)(v6 + 8);
  *(_QWORD *)&v154 = "global_args";
  LOWORD(v156) = 259;
  v34 = sub_22E4D84FC((uint64_t)v162, v165, (uint64_t)&v154);
  v36 = v35;
  v157 = v34 & 0xFFFFFFFFFFFFFFF8;
  RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
  LOWORD(v156) = 257;
  sub_22E479C7C((uint64_t)v162, RuntimeFunction, v38, (uint64_t)&v157, 1, (uint64_t)&v154);
  if (*(_DWORD *)(v6 + 8) || (v39 = *(_DWORD *)(v89 + 8), sub_22F421B7C(v39)))
  {
    v40 = 0;
    if (v34 <= 7)
      v41 = 0;
    else
      v41 = v34 & 0xFFFFFFFFFFFFFFF8;
    v42 = v36 & 0xFFFFFFFFFFFFFFF8;
    if (v34 <= 7)
      v42 = 0;
    *(_QWORD *)&v123 = v41;
    *((_QWORD *)&v123 + 1) = v42;
    if (v34 >= 8)
      v40 = 1 << (v36 & 7 | (8 * (v34 & 7)));
    v124 = v40;
    v125 = 0;
    v127 = 0;
    v126 = 0;
    v43 = sub_22EF5B848(v166[18], *(_QWORD *)(v166[18] + 16816), 0);
    v44 = 0;
    if (v43 >= 0x10)
      v44 = *(_QWORD *)(v43 & 0xFFFFFFFFFFFFFFF0);
    sub_22E4E98F8((uint64_t)v162, &v123, v44, 0, 0, &v154);
    v86 = *((_QWORD *)&v154 + 1);
    v87 = v154;
    v85 = v155;
    v80 = HIDWORD(v155);
    v84 = DWORD2(v155);
    v82 = *((_QWORD *)&v156 + 1);
    v83 = v156;
    v39 = *(_DWORD *)(v89 + 8);
  }
  else
  {
    v86 = 0;
    v87 = 0;
    v85 = 0;
    v84 = 0;
    v82 = 0;
    v83 = 0;
  }
  if (sub_22F421B7C(v39))
  {
    v115[0] = v87;
    v115[1] = v86;
    v115[2] = v85;
    v116 = v84;
    v117 = v80;
    v118 = v83;
    v119 = v82;
    LOWORD(v156) = 257;
    sub_22F2486C4(v167, (uint64_t)v115, 0, (uint64_t)&v154, (uint64_t)&v120);
    v111[0] = v120;
    v111[1] = v121;
    v111[2] = v122;
    v61 = llvm::PointerType::get();
    LOWORD(v156) = 257;
    sub_22F245864(v167, v111, v61, v164, (uint64_t)&v154, (uint64_t)&v112);
    v108 = v112;
    v109 = v113;
    v110 = v114;
    v62 = v166[18];
    v63 = sub_22EF67C8C(v62);
    v64 = sub_22EF5B848(v62, v63, 0);
    sub_22EFF605C(*(_QWORD *)(*(_QWORD *)(v89 + 24) + 8 * **(unsigned int **)(v89 + 24) + 88));
    v66 = v65;
    v154 = v108;
    v155 = v109;
    v156 = v110;
    sub_22E6281E0(v166, v64, (uint64_t)v152);
    v67 = sub_22E4E6994((uint64_t)v162, (uint64_t)&v154, 0, v64, v66, 2, (uint64_t)v152, 0);
    v68 = v67;
    v69 = v159;
    if (v159 >= HIDWORD(v159))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      *((_QWORD *)v158 + v159) = v68;
      v69 = v159;
    }
    else
    {
      *((_QWORD *)v158 + v159) = v67;
    }
    LODWORD(v159) = v69 + 1;
    v103[0] = v87;
    v103[1] = v86;
    v103[2] = v85;
    v104 = v84;
    v105 = v80;
    v106 = v83;
    v107 = v82;
    v153 = 257;
    sub_22F2486C4(v167, (uint64_t)v103, 1, (uint64_t)v152, (uint64_t)&v154);
    v121 = v155;
    v122 = v156;
    v120 = v154;
    v102[0] = v154;
    v102[1] = v155;
    v102[2] = v156;
    v70 = llvm::PointerType::get();
    v153 = 257;
    sub_22F245864(v167, v102, v70, v164, (uint64_t)v152, (uint64_t)&v154);
    v113 = v155;
    v114 = v156;
    v112 = v154;
    v99 = v154;
    v100 = v155;
    v101 = v156;
    v71 = v166[18];
    v72 = sub_22EF67C8C(v71);
    v73 = sub_22EF5B848(v71, v72, 0);
    sub_22EFF605C(*(_QWORD *)(*(_QWORD *)(v89 + 24) + 8 * **(unsigned int **)(v89 + 24) + 96));
    v75 = v74;
    v154 = v99;
    v155 = v100;
    v156 = v101;
    sub_22E6281E0(v166, v73, (uint64_t)v152);
    v76 = sub_22E4E6994((uint64_t)v162, (uint64_t)&v154, 0, v73, v75, 2, (uint64_t)v152, 0);
    v77 = v76;
    v78 = v159;
    if (v159 >= HIDWORD(v159))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      *((_QWORD *)v158 + v159) = v77;
      v78 = v159;
    }
    else
    {
      *((_QWORD *)v158 + v159) = v76;
    }
    LODWORD(v159) = v78 + 1;
    v81 = 2;
  }
  else
  {
    v81 = 0;
  }
  v45 = *(unsigned int *)(v6 + 8);
  if ((_DWORD)v45)
  {
    v46 = 0;
    v47 = v6 + (8 * v33 + 40);
    v48 = v166[18];
    do
    {
      v49 = *(_QWORD *)(v20 + 48);
      v94[0] = v87;
      v94[1] = v86;
      v94[2] = v85;
      v95 = v84;
      v96 = v80;
      v97 = v83;
      v98 = v82;
      LOWORD(v156) = 257;
      sub_22F2486C4(v167, (uint64_t)v94, (v46 + v81), (uint64_t)&v154, (uint64_t)&v120);
      v93[0] = v120;
      v93[1] = v121;
      v93[2] = v122;
      v50 = sub_22EF5B848(v48, v49, 0);
      v51 = sub_22E66C868((uint64_t)(v166 + 35), v50, 0);
      v52 = sub_22E66C868((uint64_t)(v166 + 35), v49, 0);
      LOWORD(v156) = 257;
      sub_22F245864(v167, v93, v51, v52, (uint64_t)&v154, (uint64_t)&v112);
      v90 = v112;
      v91 = v113;
      v92 = v114;
      v53 = sub_22EF5B848(v48, v49, 0);
      v54 = *(_DWORD *)(v47 + 8);
      v154 = v90;
      v155 = v91;
      v156 = v92;
      sub_22E6281E0(v166, v53, (uint64_t)v152);
      v55 = (unint64_t *)sub_22E4E6994((uint64_t)v162, (uint64_t)&v154, 0, v53, v54, 2, (uint64_t)v152, 0);
      if ((*(_QWORD *)v47 & 6) == 4)
      {
        v56 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)v47 & 0xFFFFFFFFFFFFFFF8)
                                                                                 + 48) & 0xFFFFFFFFFFFFFFF0)
                                                         + 8) & 0xFFFFFFFFFFFFFFF0)
                                 + 16);
        if (v56 != 32 && v56 != 39)
        {
          v57 = sub_22F36D7FC(v48);
          v55 = (unint64_t *)sub_22E5D9770((uint64_t)v162, v55, v49, v57, *(_DWORD *)(v47 + 8));
        }
      }
      v58 = v159;
      if (v159 >= HIDWORD(v159))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        *((_QWORD *)v158 + v159) = v55;
        v58 = v159;
      }
      else
      {
        *((_QWORD *)v158 + v159) = v55;
      }
      LODWORD(v159) = v58 + 1;
      ++v46;
      v47 += 16;
      do
        v20 = *(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v20 && (*(_DWORD *)(v20 + 28) & 0x7Fu) - 49 > 2);
    }
    while (v46 != v45);
  }
  if (v88)
    v59 = *((_QWORD *)v88 + 3);
  else
    v59 = 0;
  ((void (*)(uint64_t **, _QWORD *, _QWORD, uint64_t))(*v4)[71])(v4, v162, *(unsigned int *)(v89 + 12), v59);
  sub_22E619DE8((uint64_t)v162, 0);
  if (v158 != v160)
    free(v158);
  sub_22E619434((uint64_t)v162);
  if (v170 != v172)
    free(v170);
  return v79;
}

llvm::Value *sub_22E5D2BA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t i;
  unsigned int v9;
  char v10;
  __n128 v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t *v18;
  unsigned int *v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  char **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  char **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  void *v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  int v51;
  unint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  llvm::Value *v59;
  uint64_t v61;
  int v62;
  _QWORD v63[4];
  int v64;
  _QWORD v65[2];
  unsigned int v66;
  void *v67;
  uint64_t v68;
  _QWORD v69[6];

  v69[4] = *MEMORY[0x24BDAC8D0];
  v64 = *(_DWORD *)(a2 + 12);
  v67 = v69;
  v68 = 0x400000000;
  v65[0] = 1;
  for (i = 1; i != 9; i += 2)
    v65[i] = -4096;
  v9 = *(_DWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 216) + 696))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216))
                 + 4);
  if (!*(_DWORD *)(a1 + 4472))
    goto LABEL_4;
  v19 = *(unsigned int **)(a2 + 24);
  if (v19)
  {
    v22 = *v19;
    v20 = (uint64_t *)(v19 + 4);
    v21 = v22;
    if (v22)
    {
      v42 = 8 * v21;
      v23 = v20;
      while (*(_DWORD *)(*v23 + 8) != 66)
      {
        ++v23;
        v42 -= 8;
        if (!v42)
          goto LABEL_42;
      }
    }
    else
    {
      v23 = v20;
    }
    v24 = &v20[v21];
    if (v23 != v24)
    {
      v25 = *v23;
LABEL_16:
      v26 = *(unsigned int *)(v25 + 16);
      if ((_DWORD)v26)
      {
        v27 = (char **)(v25 + 8 * v26 + 104);
        v28 = 8 * v26;
        do
        {
          v29 = sub_22E5DB1AC(*v27);
          v30 = v68;
          if (v68 >= (unint64_t)HIDWORD(v68))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v30 = v68;
          }
          *((_QWORD *)v67 + v30) = v29;
          LODWORD(v68) = v68 + 1;
          ++v27;
          v28 -= 8;
        }
        while (v28);
      }
      v31 = v23 + 1;
      while (v31 != v24)
      {
        v32 = *v31++;
        v25 = v32;
        if (*(_DWORD *)(v32 + 8) == 66)
        {
          v23 = v31 - 1;
          goto LABEL_16;
        }
      }
      if (!*(_DWORD *)(a1 + 4472))
      {
LABEL_4:
        v10 = sub_22F421B08(*(_DWORD *)(a2 + 8));
        v12 = a2;
        if ((v10 & 1) != 0)
          goto LABEL_75;
        v54 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
        v55 = sub_22F28423C(a2);
        v56 = sub_22F3F1924(*(unsigned __int8 **)(v55 + 8 * *(unsigned int *)(v55 + 8) + 32), 1);
        v57 = sub_22E5B1A48(v54, v56);
        v12 = a2;
        if (!v57
          || (v58 = v57, *v57 - 86 >= 0xFFFFFFBF)
          && (v62 = sub_22F421B08(*((_DWORD *)v57 + 2)), v12 = (uint64_t)v58, v62))
        {
LABEL_75:
          v13 = *(unsigned int **)(v12 + 24);
          if (v13)
          {
            v16 = *v13;
            v14 = (uint64_t *)(v13 + 4);
            v15 = v16;
            if (v16)
            {
              v17 = 8 * v15;
              v18 = v14;
              while (*(_DWORD *)(*v18 + 8) != 43)
              {
                ++v18;
                v17 -= 8;
                if (!v17)
                  goto LABEL_62;
              }
            }
            else
            {
              v18 = v14;
            }
            v33 = &v14[v15];
            if (v18 != v33)
            {
              v34 = *v18;
LABEL_28:
              v35 = *(unsigned int *)(v34 + 16);
              if ((_DWORD)v35)
              {
                v36 = (char **)(v34 + 64);
                v37 = 8 * v35;
                do
                {
                  v38 = sub_22E5DB1AC(*v36);
                  v39 = v68;
                  if (v68 >= (unint64_t)HIDWORD(v68))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v39 = v68;
                  }
                  *((_QWORD *)v67 + v39) = v38;
                  LODWORD(v68) = v68 + 1;
                  ++v36;
                  v37 -= 8;
                }
                while (v37);
              }
              v40 = v18 + 1;
              while (v40 != v33)
              {
                v41 = *v40++;
                v34 = v41;
                if (*(_DWORD *)(v41 + 8) == 43)
                {
                  v18 = v40 - 1;
                  goto LABEL_28;
                }
              }
            }
          }
        }
LABEL_62:
        if ((_DWORD)v68)
        {
          v52 = sub_22E5D30CC(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), 0, 0, (const void **)v67, v68, (uint64_t)v65, v9, v11);
          goto LABEL_65;
        }
LABEL_63:
        v52 = 0;
        goto LABEL_65;
      }
    }
  }
LABEL_42:
  if (!(_DWORD)v68)
    goto LABEL_63;
  *(_QWORD *)(a1 + 5856) = *(_QWORD *)(sub_22E59F470(a2, 80) + 16) & 0xFFFFFFFFFFFFFFF8;
  v43 = (_QWORD *)(a1 + 5864);
  if ((void **)(a1 + 5864) == &v67)
    goto LABEL_63;
  v44 = *(void **)(a1 + 5864);
  if (v44 == (void *)(a1 + 5880) || v67 == v69)
  {
    if (*(_DWORD *)(a1 + 5876) < v68)
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    v45 = *(_DWORD *)(a1 + 5872);
    if (HIDWORD(v68) < v45)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v45 = *(_DWORD *)(a1 + 5872);
    }
    v46 = v68;
    if (v45 >= v68)
      v47 = v68;
    else
      v47 = v45;
    if ((_DWORD)v47)
    {
      v48 = 0;
      do
      {
        v49 = (char *)v67;
        v50 = *(_QWORD *)(*v43 + v48);
        *(_QWORD *)(*v43 + v48) = *(_QWORD *)((char *)v67 + v48);
        *(_QWORD *)&v49[v48] = v50;
        v48 += 8;
      }
      while (8 * v47 != v48);
    }
    if (v46 < v45)
    {
      v51 = v45 - v46;
      memcpy((char *)v67 + 8 * v46, (const void *)(*(_QWORD *)(a1 + 5864) + 8 * v47), 8 * v45 - 8 * v47);
      v52 = 0;
      LODWORD(v68) = v51 + v68;
      *(_DWORD *)(a1 + 5872) = v47;
      goto LABEL_65;
    }
    if (v46 > v45)
    {
      v53 = v46 - v45;
      memcpy((void *)(*(_QWORD *)(a1 + 5864) + 8 * v45), (char *)v67 + 8 * v47, 8 * v46 - 8 * v47);
      v52 = 0;
      *(_DWORD *)(a1 + 5872) += v53;
      LODWORD(v68) = v47;
      goto LABEL_65;
    }
    goto LABEL_63;
  }
  v52 = 0;
  *(_QWORD *)(a1 + 5864) = v67;
  v67 = v44;
  v61 = *(_QWORD *)(a1 + 5872);
  *(_QWORD *)(a1 + 5872) = v68;
  v68 = v61;
LABEL_65:
  v63[0] = off_24FA66588;
  v63[1] = &v64;
  v63[2] = v52;
  v63[3] = v65;
  *(_QWORD *)(a5 + 16) = v63;
  v59 = sub_22F27C2C8(a1, a2);
  if ((v65[0] & 1) == 0)
    llvm::deallocate_buffer((llvm *)v65[1], (void *)(16 * v66));
  if (v67 != v69)
    free(v67);
  return v59;
}

unint64_t sub_22E5D30CC(uint64_t a1, unint64_t *a2, uint64_t a3, const void **a4, uint64_t a5, uint64_t a6, unsigned int a7, __n128 a8)
{
  unint64_t v8;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  __n128 *v25;
  unint64_t v26;
  const std::nothrow_t *v27;
  unint64_t v28;
  __n128 *v29;
  BOOL v30;
  __n128 *v31;
  __n128 *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  void **v44;
  unsigned int *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int64_t v53;
  unsigned int v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t **v64;
  uint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t (**v80)();
  const void **v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  int v93;
  __int16 v94;
  char v95;
  __n128 *v96;
  uint64_t v97;
  _QWORD v98[10];

  v98[8] = *MEMORY[0x24BDAC8D0];
  if (!(a3 | a5))
    return 0;
  v96 = (__n128 *)v98;
  a8.n128_u64[0] = 0x400000000;
  v97 = 0x400000000;
  if (a3)
  {
    v16 = 8 * a3;
    do
    {
      v18 = *a2++;
      v17 = v18;
      v19 = sub_22EF5B404(a1, v18, 0);
      if (v19 <= 128)
        v20 = 128;
      else
        v20 = v19;
      sub_22F2599E0((uint64_t)&v96, v20, v17);
      v16 -= 8;
    }
    while (v16);
  }
  v81 = &a4[a5];
  if (a5)
  {
    v21 = 8 * a5;
    v22 = (unint64_t *)a4;
    do
    {
      v23 = *v22++;
      v24 = sub_22EF5B404(a1, v23, 0);
      sub_22F2599E0((uint64_t)&v96, v24, v23);
      v21 -= 8;
    }
    while (v21);
  }
  v25 = v96;
  v26 = v97;
  if ((_DWORD)v97)
  {
    v27 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
    v28 = v97;
    while (1)
    {
      v29 = (__n128 *)operator new(16 * v28, v27);
      if (v29)
        break;
      v30 = v28 > 1;
      v28 >>= 1;
      if (!v30)
        goto LABEL_17;
    }
    v31 = v29;
    sub_22E5DB434(v25, &v25[v26], v26, v29, v28, a8);
    operator delete(v31);
  }
  else
  {
LABEL_17:
    sub_22E5DB434(v25, &v25[v26], v26, 0, 0, a8);
  }
  v8 = sub_22F368234(a1, "_globalized_locals_ty", 0x15uLL, 0);
  sub_22EFC3340(v8);
  sub_22F289150((uint64_t)&v88, a4, v81);
  if ((_DWORD)v97)
  {
    v32 = v96;
    v33 = v8 + 64;
    v78 = (char *)&v96[v97];
    if (!v8)
      v33 = 0;
    v77 = v33;
    v75 = a7;
    v79 = a6;
    v80 = &off_24FAC2F90;
    do
    {
      v34 = v32->n128_i64[1];
      v87 = v34;
      v35 = *(_QWORD *)(v34 + 48);
      v36 = *(_QWORD *)(v35 & 0xFFFFFFFFFFFFFFF0);
      v37 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v36 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
      v38 = *(_DWORD *)(v36 + 16);
      v39 = v38 & 0xFE;
      if (v37 == 40)
      {
        if (v39 == 40)
          goto LABEL_73;
        v36 = sub_22F10CF48(v36);
        v72 = v76;
        v73 = (int)v80;
        if (v36)
        {
LABEL_72:
          v38 = *(_DWORD *)(v36 + 16);
LABEL_73:
          while (1)
          {
            v72 = v76;
            if ((v38 & 0x100000) == 0)
              break;
            v36 = *(_QWORD *)(*(_QWORD *)(v36 + 32) & 0xFFFFFFFFFFFFFFF0);
            if (v36)
            {
              v38 = *(_DWORD *)(v36 + 16);
              if ((v38 & 0xFE) == 0x28)
                continue;
            }
            v36 = sub_22F10CF48(v36);
            goto LABEL_72;
          }
          v35 = *(_QWORD *)(v36 + 32);
          v73 = (int)v80;
        }
        v40 = v73 & 0xFFFFFFE0;
        v41 = v73 & 0xE0;
        v42 = v72 & 0xFFFFFFFF00000000;
        v76 = v42 | v41;
        v35 = sub_22EF5B848(a1, v35, v42 | v41);
        LODWORD(v80) = v40;
      }
      else
      {
        if (v39 != 40)
        {
          if ((v37 & 0xFE) != 0x28)
            goto LABEL_29;
          v36 = sub_22F10CF48(v36);
          if (!v36)
            goto LABEL_29;
          v38 = *(_DWORD *)(v36 + 16);
        }
        if ((v38 & 0x100000) != 0)
        {
          do
          {
            v36 = *(_QWORD *)(*(_QWORD *)(v36 + 32) & 0xFFFFFFFFFFFFFFF0);
            if (v36)
            {
              v74 = *(_DWORD *)(v36 + 16);
              if ((v74 & 0xFE) == 0x28)
                continue;
            }
            v36 = sub_22F10CF48(v36);
            v74 = *(_DWORD *)(v36 + 16);
          }
          while ((v74 & 0x100000) != 0);
        }
        v35 = *(_QWORD *)(v36 + 32);
      }
LABEL_29:
      v43 = *(_DWORD *)(v34 + 24);
      v44 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)&v88, (void *)v34);
      if (v89 == v88)
        v45 = (unsigned int *)&v90 + 1;
      else
        v45 = (unsigned int *)&v90;
      if (v44 == (void **)&v89[8 * *v45])
      {
        v85 = 32;
        v84 = v75;
        v46 = sub_22EF5FE30(a1, v35, (const llvm::APInt *)&v84, 0, 0, 0);
        v47 = *(_QWORD *)(v34 + 40);
        v48 = (unint64_t)sub_22EF579A8(a1, v46, 0);
        v49 = sub_22EFC7430(80, a1, v77, 0);
        v50 = v49;
        if ((v47 & 7) != 0)
          v51 = 0;
        else
          v51 = v47 & 0xFFFFFFFFFFFFFFF8;
        v52 = sub_22EA41AB8(v49, 49, v77, v43);
        *(_QWORD *)(v52 + 40) = v51;
        *(_QWORD *)(v52 + 48) = v46;
        *(_QWORD *)(v52 + 56) = v48 & 0xFFFFFFFFFFFFFFFBLL;
        *(_QWORD *)v52 = &off_24FAC2F90;
        *(_DWORD *)(v52 + 64) = v43;
        *(_DWORD *)(v52 + 68) = 0;
        *(_QWORD *)(v52 + 72) = 0;
        v86 = v52;
        *(_DWORD *)(v52 + 28) &= 0xFFFF9FFF;
        v53 = sub_22EF5B404(a1, v34, 0);
        v54 = 128;
        if (v53 > 128)
          v54 = v53;
        v83 = 32;
        v82 = v54;
        v55 = sub_22EF60A6C(a1, 32, 0);
        v56 = sub_22E3CD3D4(a1 + 2032, 32, 3);
        sub_22EFF8F1C(v56, a1, (uint64_t)&v82, v55, 0);
        v91 = 0uLL;
        v93 = 0;
        v92 = 0;
        v95 = 0;
        v94 = 478;
        v57 = sub_22F37CB90(a1, 1, v56, &v91);
        sub_22EFCA95C(v50, v57);
        if (v85 >= 0x41 && v84)
          MEMORY[0x2348A0E84](v84, 0x1000C8000313F17);
      }
      else
      {
        v58 = *(_QWORD *)(v34 + 40);
        v59 = v58 & 0xFFFFFFFFFFFFFFF8;
        v60 = (unint64_t)sub_22EF579A8(a1, v35, 0);
        v61 = sub_22EFC7430(80, a1, v77, 0);
        v50 = v61;
        if ((v58 & 7) != 0)
          v59 = 0;
        v62 = sub_22EA41AB8(v61, 49, v77, v43);
        *(_QWORD *)(v62 + 40) = v59;
        *(_QWORD *)(v62 + 48) = v35;
        *(_QWORD *)(v62 + 56) = v60 & 0xFFFFFFFFFFFFFFFBLL;
        *(_QWORD *)v62 = &off_24FAC2F90;
        *(_DWORD *)(v62 + 64) = v43;
        *(_DWORD *)(v62 + 68) = 0;
        *(_QWORD *)(v62 + 72) = 0;
        v86 = v62;
        *(_DWORD *)(v62 + 28) &= 0xFFFF9FFF;
        if ((*(_BYTE *)(v34 + 29) & 1) != 0)
        {
          sub_22EFC8E88(v34);
          v65 = *v64;
          sub_22EFC8E88(v34);
          v67 = *(_QWORD *)v66 + 8 * *(unsigned int *)(v66 + 8);
          v63 = v79;
          while (1)
          {
            v68 = v65;
            if ((unint64_t)v65 >= v67)
            {
              v69 = (uint64_t *)v67;
              if ((uint64_t *)v67 == v65)
                goto LABEL_45;
              while (*(_WORD *)(*v69 + 32) != 98)
              {
                if (++v69 == v65)
                  goto LABEL_45;
              }
              v68 = v65;
            }
            else
            {
              while (*(_WORD *)(*v68 + 32) != 98)
              {
                if (++v68 == (uint64_t *)v67)
                  goto LABEL_45;
              }
              v69 = (uint64_t *)v67;
            }
            if (v68 == v69)
              goto LABEL_45;
            do
            {
              v71 = *v65++;
              v70 = v71;
            }
            while (*(_WORD *)(v71 + 32) != 98);
            sub_22EFCA95C(v50, v70);
          }
        }
      }
      v63 = v79;
LABEL_45:
      sub_22EFCCFA0(v8 + 64, v50);
      sub_22F289088((uint64_t)&v91, v63, &v87, &v86);
      ++v32;
    }
    while (v32 != (__n128 *)v78);
  }
  (*(void (**)(unint64_t))(*(_QWORD *)v8 + 104))(v8);
  if (v89 != v88)
    free(v89);
  if (v96 != (__n128 *)v98)
    free(v96);
  return v8;
}

void sub_22E5D377C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, _BYTE *a6, uint64_t a7)
{
  llvm::Type *v13;
  unint64_t v14;
  llvm::LLVMContext *v15;
  llvm::LLVMContext *v16;
  llvm::Type **v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  __int128 v26;
  char v27;
  _QWORD v28[3];
  int v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  _WORD v34[64];
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 320))
  {
    v13 = *(llvm::Type **)(a2 + 24);
    v32 = ".zero.addr";
    v34[8] = 259;
    v14 = sub_22E4D84FC(a2, v13, (uint64_t)&v32);
    v16 = v15;
    llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 336), v15);
    v17 = (llvm::Type **)llvm::ConstantInt::get();
    v18 = 0;
    v19 = v14 & 0xFFFFFFFFFFFFFFF8;
    if (v14 <= 7)
      v20 = 0;
    else
      v20 = v14 & 0xFFFFFFFFFFFFFFF8;
    v21 = (unint64_t)v16 & 0xFFFFFFFFFFFFFFF8;
    if (v14 <= 7)
      v21 = 0;
    v28[0] = v20;
    v28[1] = v21;
    if (v14 >= 8)
      v18 = 1 << (v16 & 7 | (8 * (v14 & 7u)));
    v28[2] = v18;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    sub_22E3BEDDC(a2 + 272, v17, (uint64_t)v28);
    v32 = v34;
    v33 = 0x1000000000;
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 24))(&v26, a1, a2, a4);
    if ((v27 & 3) != 0)
      v22 = sub_22F28ABCC(&v26, (_QWORD *)a2);
    else
      v22 = v26;
    v23 = v33;
    if (v33 >= HIDWORD(v33))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v23 = v33;
    }
    *((_QWORD *)v32 + v23) = v22;
    v24 = v33 + 1;
    LODWORD(v33) = v24;
    if (v24 >= HIDWORD(v33))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v24 = v33;
    }
    *((_QWORD *)v32 + v24) = v19;
    LODWORD(v33) = v33 + 1;
    sub_22E5B5498((uint64_t)&v32, a6, &a6[8 * a7]);
    if (a5)
      v25 = *(_QWORD *)(a5 + 24);
    else
      v25 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a1 + 568))(a1, a2, a4, v25, a5, v32, v33);
    if (v32 != v34)
      free(v32);
  }
}

uint64_t sub_22E5D39C4(_QWORD *a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, unsigned int a6, unsigned __int8 *a7)
{
  _QWORD *v9;
  _QWORD *v10;
  uint64_t RuntimeFunction;
  llvm::Value *v12;
  uint64_t v13;
  llvm::Value *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  llvm::Type *v22;
  uint64_t NullValue;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  llvm::Value *v31;
  llvm::LLVMContext *v32;
  uint64_t v33;
  llvm::Instruction *v34;
  llvm::Value *v36;
  uint64_t *v37;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v45;
  _OWORD v46[8];
  uint64_t v47;
  _OWORD v48[8];
  uint64_t v49;
  _OWORD v50[8];
  uint64_t v51;
  _OWORD v52[8];
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  llvm::Value *v63;
  _OWORD v64[2];
  uint64_t v65;
  __int128 v66[2];
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;

  v45 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v9 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v40 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v39 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  *(_QWORD *)&v54 = "omp.critical.exit";
  v10 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
  LOWORD(v56) = 257;
  v63 = sub_22E479C7C(a2, RuntimeFunction, v12, 0, 0, (uint64_t)&v54);
  v13 = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
  LOWORD(v56) = 257;
  v37 = (uint64_t *)sub_22E479C7C(a2, v13, v14, 0, 0, (uint64_t)&v54);
  v36 = sub_22F288234(a2);
  v15 = sub_22EF60A6C(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 144), 32, 0);
  *(_QWORD *)&v54 = "critical_counter";
  LOWORD(v56) = 259;
  v16 = sub_22F25E4D4(a2, v15, (uint64_t)&v54, 0);
  if (v16 < 8)
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
  }
  else
  {
    v18 = v17 & 0xFFFFFFFFFFFFFFF8;
    v19 = v16 & 0xFFFFFFFFFFFFFFF8;
    v20 = 1 << (v17 & 7 | (8 * (v16 & 7)));
  }
  sub_22E6281E0(*(_QWORD **)(a2 + 144), v15, (uint64_t)v64);
  *(_QWORD *)&v68 = v19;
  *((_QWORD *)&v68 + 1) = v18;
  v69 = v20;
  v70 = 0;
  v71 = 0;
  v72 = 0;
  v21 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
  v66[0] = v64[0];
  v66[1] = v64[1];
  v67 = v65;
  v55 = 0uLL;
  *((_QWORD *)&v54 + 1) = 0;
  LODWORD(v56) = 0;
  *(_QWORD *)&v57 = 0;
  *((_QWORD *)&v56 + 1) = 0;
  v58 = 0uLL;
  *(_QWORD *)((char *)&v59 + 4) = 2;
  LODWORD(v54) = 0;
  v60 = 0u;
  v61 = 0u;
  sub_22E3C113C((uint64_t)&v54, &v68, v15, 2, v66, v21);
  NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)(a1[1] + 24), v22);
  v52[6] = v60;
  v52[7] = v61;
  v53 = v62;
  v52[2] = v56;
  v52[3] = v57;
  v52[4] = v58;
  v52[5] = v59;
  v52[0] = v54;
  v52[1] = v55;
  sub_22E4E87FC(a2, NullValue, (uint64_t)v52, 1u);
  sub_22E5ED9B4((_QWORD *)a2, v45, 0);
  v50[6] = v60;
  v50[7] = v61;
  v51 = v62;
  v50[2] = v56;
  v50[3] = v57;
  v50[4] = v58;
  v50[5] = v59;
  v50[0] = v54;
  v50[1] = v55;
  v24 = (uint64_t *)sub_22F25F748(a2, (uint64_t)v50, a6);
  LOWORD(v71) = 257;
  v25 = sub_22E3C18F4(a2 + 272, 40, v24, (uint64_t)v36, (uint64_t)&v68);
  v26 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x23489C09C](v26, v9, v10, v25, 0);
  LOWORD(v71) = 257;
  sub_22E3C12C8((uint64_t *)(a2 + 272), v26, (uint64_t)&v68);
  sub_22E5ED9B4((_QWORD *)a2, v9, 0);
  v48[6] = v60;
  v48[7] = v61;
  v49 = v62;
  v48[2] = v56;
  v48[3] = v57;
  v48[4] = v58;
  v48[5] = v59;
  v48[0] = v54;
  v48[1] = v55;
  v27 = sub_22F25F748(a2, (uint64_t)v48, a6);
  LOWORD(v71) = 257;
  v28 = sub_22E3C18F4(a2 + 272, 32, v37, v27, (uint64_t)&v68);
  v29 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x23489C09C](v29, v39, v40, v28, 0);
  LOWORD(v71) = 257;
  sub_22E3C12C8((uint64_t *)(a2 + 272), v29, (uint64_t)&v68);
  sub_22E5ED9B4((_QWORD *)a2, v39, 0);
  sub_22F27DA5C(a1, (_QWORD *)a2, a3, a4, a5, a6, a7);
  sub_22E5ED9B4((_QWORD *)a2, v40, 0);
  v30 = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
  LOWORD(v71) = 257;
  sub_22E479C7C(a2, v30, v31, (uint64_t)&v63, 1, (uint64_t)&v68);
  llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 336), v32);
  v33 = llvm::ConstantInt::get();
  LOWORD(v71) = 257;
  v34 = sub_22E520468(a2 + 272, v27, v33, (uint64_t)&v68);
  v46[6] = v60;
  v46[7] = v61;
  v47 = v62;
  v46[2] = v56;
  v46[3] = v57;
  v46[4] = v58;
  v46[5] = v59;
  v46[0] = v54;
  v46[1] = v55;
  sub_22E4E87FC(a2, (uint64_t)v34, (uint64_t)v46, 0);
  sub_22E5EDA70(a2);
  return sub_22E5ED9B4((_QWORD *)a2, v10, 1);
}

void sub_22E5D3FBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, unsigned __int8 **a10, uint64_t a11, __int16 a12, int a13)
{
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  llvm::Value *v50;
  int8x16_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t *v61;
  int v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t *v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  llvm::Constant **v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  llvm::Type *v75;
  uint64_t NullValue;
  uint64_t v77;
  llvm::LLVMContext *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  llvm::LLVMContext *v83;
  uint64_t v84;
  uint64_t v85;
  llvm::LLVMContext *v86;
  uint64_t v87;
  llvm::Constant **v88;
  llvm::Type *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  llvm::LLVMContext *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int **v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  llvm::Type **v111;
  unint64_t v112;
  unint64_t v113;
  llvm::Instruction *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  llvm::Type **v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  llvm::LLVMContext *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  llvm::Value *v155;
  uint64_t v156;
  _QWORD *v157;
  int8x16_t v158;
  uint64_t GlobalVariable;
  uint64_t v160;
  uint64_t v161;
  uint64_t RuntimeFunction;
  llvm::Value *v163;
  uint64_t v164;
  llvm::Value *v165;
  llvm::Value *v166;
  llvm::LLVMContext *v167;
  uint64_t v168;
  uint64_t v169;
  llvm::Value *v170;
  llvm::Value *v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unsigned int v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v186;
  int v187;
  _QWORD *v188;
  uint64_t v189;
  llvm::Type *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  llvm::Type *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  llvm::GetElementPtrInst *v205;
  uint64_t v206;
  llvm *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  _QWORD *v216;
  _QWORD *v217;
  int v218;
  uint64_t v219;
  __int128 v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  llvm::Type *v228;
  llvm::GetElementPtrInst *v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  __int128 v233;
  uint64_t v234;
  unsigned int v235;
  __int128 v236;
  unsigned int v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  llvm::Type *v247;
  uint64_t v248;
  unint64_t v249;
  unint64_t v250;
  uint64_t v251;
  unint64_t v252;
  unint64_t v253;
  _QWORD *v254;
  uint64_t v255;
  unint64_t v256;
  _QWORD *v257;
  unint64_t v258;
  uint64_t *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unsigned int v266;
  unsigned int v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  llvm::Instruction *v276;
  unint64_t v277;
  llvm::LLVMContext *v278;
  __n128 v279;
  _QWORD *v280;
  uint64_t v281;
  uint64_t v282;
  llvm::Value *v283;
  uint64_t *v284;
  _QWORD *v285;
  uint64_t i;
  unint64_t *v287;
  unint64_t v288;
  void **v289;
  unsigned int v290;
  uint64_t v291;
  unint64_t v292;
  unsigned int v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  llvm::Value *v306;
  int8x16_t v307;
  int v308;
  uint64_t v309;
  __int128 v310;
  int v311;
  uint64_t v312;
  uint64_t v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  unint64_t v317;
  uint64_t v318;
  uint64_t v319;
  llvm::Type *v320;
  int v321;
  uint64_t v322;
  unint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  unint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  unint64_t v332;
  uint64_t v333;
  unint64_t v334;
  uint64_t v335;
  uint64_t *v336;
  llvm::GetElementPtrInst *v337;
  uint64_t v338;
  uint64_t v339;
  int v340;
  unint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  llvm::Value *v356;
  int8x16_t v357;
  int v358;
  uint64_t v359;
  unint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  unint64_t v364;
  llvm::Type *v365;
  llvm::Type *v366;
  int v367;
  uint64_t v368;
  unint64_t v369;
  uint64_t *v370;
  uint64_t v371;
  unint64_t v372;
  unint64_t v373;
  uint64_t v374;
  unsigned int v375;
  uint64_t *v376;
  uint64_t v377;
  unint64_t v378;
  uint64_t v379;
  uint64_t *v380;
  uint64_t *v381;
  uint64_t v382;
  unint64_t v383;
  unint64_t v384;
  unint64_t v385;
  llvm::Instruction *v386;
  uint64_t v387;
  llvm::Type **v388;
  uint64_t v389;
  int v390;
  uint64_t v391;
  unint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t *v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  llvm::Value *v404;
  int8x16_t v405;
  int v406;
  uint64_t v407;
  __int128 v408;
  int v409;
  uint64_t v410;
  uint64_t v411;
  unint64_t v412;
  uint64_t v413;
  uint64_t v414;
  unint64_t v415;
  uint64_t v416;
  uint64_t v417;
  llvm::Type *v418;
  int v419;
  uint64_t v420;
  unint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  unint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  unint64_t v430;
  uint64_t v431;
  unint64_t v432;
  uint64_t v433;
  uint64_t *v434;
  llvm::GetElementPtrInst *v435;
  uint64_t v436;
  uint64_t v437;
  int v438;
  uint64_t v439;
  unint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t *v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  llvm::Value *v455;
  int8x16_t v456;
  int v457;
  uint64_t v458;
  unint64_t v459;
  uint64_t v460;
  uint64_t v461;
  unint64_t v462;
  llvm::Type *v463;
  uint64_t *v464;
  unint64_t v465;
  int v466;
  uint64_t v467;
  unint64_t v468;
  unsigned int v469;
  uint64_t v470;
  uint64_t *v471;
  uint64_t v472;
  unint64_t v473;
  uint64_t v474;
  uint64_t *v475;
  uint64_t *v476;
  uint64_t v477;
  unint64_t v478;
  unint64_t v479;
  unint64_t v480;
  llvm::Instruction *v481;
  uint64_t v482;
  llvm::Type **v483;
  uint64_t v484;
  int v485;
  uint64_t v486;
  unint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  llvm::LLVMContext *v491;
  uint64_t v492;
  llvm::Value *v493;
  _QWORD *v494;
  _QWORD *v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  llvm::Instruction *v501;
  BOOL v502;
  llvm::Value *v503;
  llvm::Value *v504;
  uint64_t v505;
  __int128 v506;
  llvm::Value *v507;
  uint64_t *v508;
  uint64_t v509;
  uint64_t v510;
  unsigned int v511;
  unint64_t v512;
  _QWORD *v513;
  unint64_t v514;
  uint64_t *v515;
  uint64_t *v516;
  uint64_t v517;
  unsigned int v518;
  uint64_t v519;
  llvm::Constant **v520;
  llvm::Value *v521;
  unint64_t v522;
  _QWORD *v523;
  llvm::Value *v524;
  uint64_t v525;
  uint64_t v526;
  unint64_t v527;
  unint64_t v528;
  unsigned int v529;
  uint64_t *v530;
  uint64_t *v531;
  _QWORD *v532;
  _QWORD *v533;
  _QWORD *v534;
  unsigned int v535;
  __int128 v536;
  unsigned int v537;
  unsigned int v538;
  __int128 v539;
  uint64_t v540;
  _QWORD *v541;
  __int128 v542;
  uint64_t v543;
  uint64_t *v544;
  unint64_t v545;
  uint64_t *v546;
  uint64_t v547;
  uint64_t v548;
  unint64_t v549;
  uint64_t v550;
  uint64_t *v551;
  uint64_t v552;
  unsigned int v553;
  unint64_t v554;
  unint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  int v560;
  __int128 v561;
  unint64_t v562;
  __int128 v563;
  unint64_t v564;
  llvm *v565;
  uint64_t *v566;
  uint64_t *v567;
  unint64_t v568;
  uint64_t *v569;
  uint64_t *v570;
  uint64_t v571;
  unint64_t v572;
  unint64_t v573;
  uint64_t v574;
  unint64_t v575;
  uint64_t v576;
  uint64_t v577[2];
  _OWORD v578[3];
  _QWORD v579[3];
  int v580;
  __int128 v581;
  int v582;
  _OWORD v583[3];
  _QWORD v584[3];
  int v585;
  __int128 v586;
  int v587;
  uint64_t v588;
  unsigned int v589;
  __int128 v590;
  __int128 v591;
  __int128 v592;
  __int128 v593;
  __int128 v594;
  __int128 v595;
  __int128 v596;
  __int128 v597;
  uint64_t v598;
  __int128 v599;
  __int128 v600;
  __int128 v601;
  __int128 v602;
  __int128 v603;
  __int128 v604;
  __int128 v605;
  __int128 v606;
  uint64_t v607;
  __int128 v608;
  __int128 v609;
  __int128 v610;
  __int128 v611;
  __int128 v612;
  __int128 v613;
  __int128 v614;
  __int128 v615;
  uint64_t v616;
  uint64_t v617;
  __int128 v618;
  __int128 v619;
  uint64_t v620;
  __int128 v621;
  __int128 v622;
  uint64_t v623;
  __int128 v624;
  __int128 v625;
  __int128 v626;
  __int128 v627;
  __int128 v628;
  __int128 v629;
  __int128 v630;
  __int128 v631;
  uint64_t v632;
  __int128 v633;
  __int128 v634;
  __int128 v635;
  unint64_t v636;
  uint64_t v637;
  unsigned int v638;
  uint64_t v639;
  __int128 *v640;
  uint64_t v641;
  int v642;
  __int128 v643;
  __int128 v644;
  __int128 v645;
  __int128 v646;
  _BYTE v647[32];
  uint64_t v648;
  uint64_t v649;
  unsigned int v650;
  uint64_t v651;
  __int128 *v652;
  uint64_t v653;
  int v654;
  __int128 v655;
  __int128 v656;
  __int128 v657;
  uint64_t v658;
  uint64_t v659;
  unsigned int v660;
  uint64_t v661;
  __int128 *v662;
  uint64_t v663;
  int v664;
  __int128 v665;
  __int128 v666;
  __int128 v667;
  uint64_t v668;
  uint64_t v669;
  unsigned int v670;
  uint64_t v671;
  __int128 *v672;
  uint64_t v673;
  int v674;
  __int128 v675;
  __int128 v676;
  uint64_t v677;
  __int128 v678;
  __int128 v679;
  __int128 v680;
  __int128 v681;
  __int128 v682;
  __int128 v683;
  _OWORD v684[3];
  void *v685[6];
  llvm *v686[2];
  __int128 v687;
  __int128 v688;
  _BYTE v689[20];
  __int128 v690;
  __int128 v691;
  __int128 v692;
  _BYTE v693[32];
  __int128 v694;
  uint64_t *v695;
  uint64_t v696;
  __int128 v697;
  _BYTE v698[32];
  _BYTE v699[64];
  __int128 v700;
  __int128 v701;
  __int128 v702;
  __int128 v703;
  uint64_t v704;
  _BYTE v705[56];
  llvm::Value *v706;
  unint64_t v707;
  llvm::Value *v708;
  llvm::Value *v709;
  uint64_t v710;
  uint64_t v711;
  unsigned __int8 v712;
  _QWORD *v713;
  uint64_t v714;
  uint64_t v715;
  unsigned int v716;
  uint64_t v717;
  uint64_t v718;
  llvm::Type *v719;
  uint64_t v720;
  uint64_t v721[2];
  unsigned int v722;
  void *v723;
  uint64_t v724;
  __int128 *v725;
  __int128 *v726;
  __int128 v727;
  unsigned __int8 **v728;
  uint64_t v729;
  _QWORD *v730;
  _BYTE v731[64];
  __int128 v732;
  __int128 v733;
  __int128 v734;
  __int128 v735;
  uint64_t v736;
  uint64_t v737;

  v13 = MEMORY[0x24BDAC7A8]();
  v737 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(v14 + 320))
    return;
  v20 = v19;
  v21 = v18;
  v22 = v15;
  v23 = v14;
  v24 = (_QWORD *)v13;
  v514 = v17;
  v515 = v16;
  v25 = sub_22F421A78(a13);
  if ((a12 & 0x100) != 0)
  {
    sub_22E5AE780(v24, v23, v22, v515, v514, v21, v20, v26, a9, a10, a11, a12);
    return;
  }
  v502 = v25;
  v511 = v22;
  v508 = v21;
  v509 = v20;
  *(_QWORD *)&v506 = sub_22E59F7E4(v24, v23, v22);
  *((_QWORD *)&v506 + 1) = sub_22E59F964((uint64_t)v24, v23, v22);
  v513 = v24;
  v510 = *(_QWORD *)(v24[1] + 144);
  LODWORD(v27) = DWORD2(a9);
  if (v514)
  {
    v28 = 8 * v514;
    v27 = *((_QWORD *)&a9 + 1);
    v29 = v515;
    do
    {
      v30 = *v29++;
      v27 += ((unint64_t)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v30 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) >> 11) & 1;
      v28 -= 8;
    }
    while (v28);
  }
  v548 = v22;
  v589 = 32;
  v588 = v27;
  v31 = sub_22EF5FE30(v510, *(_QWORD *)(v510 + 16816), (const llvm::APInt *)&v588, 0, 0, 0);
  *(_QWORD *)v705 = ".omp.reduction.red_list";
  *(_WORD *)&v705[32] = 259;
  v512 = v31;
  v32 = sub_22F25E4D4(v23, v31, (uint64_t)v705, 0);
  v34 = 0;
  v35 = v32 & 0xFFFFFFFFFFFFFFF8;
  if (v32 <= 7)
    v35 = 0;
  v574 = v35;
  v36 = v33 & 0xFFFFFFFFFFFFFFF8;
  if (v32 <= 7)
    v36 = 0;
  v568 = v36;
  if (v32 >= 8)
    v34 = 1 << (v33 & 7 | (8 * (v32 & 7)));
  *(_QWORD *)&v689[12] = 0;
  *(_QWORD *)&v689[4] = 0;
  v516 = (uint64_t *)(v23 + 272);
  v517 = v23;
  if (DWORD2(a9))
  {
    LODWORD(v106) = 0;
    v107 = (unsigned int **)a9;
    v108 = DWORD2(a9);
    v109 = v515;
    do
    {
      v584[0] = v574;
      v584[1] = v568;
      v584[2] = v34;
      v585 = 0;
      v586 = *(_OWORD *)v689;
      v587 = *(_DWORD *)&v689[16];
      *(_WORD *)&v705[32] = 257;
      sub_22E486A58(v516, (uint64_t)v584, v106, (uint64_t)v705, (uint64_t)v699);
      sub_22E4D8D7C(v517, *v107, (uint64_t)v705);
      *(_OWORD *)v731 = *(_OWORD *)&v705[8];
      *(_OWORD *)&v731[16] = *(_OWORD *)&v705[24];
      *(_OWORD *)&v731[32] = *(_OWORD *)&v705[40];
      sub_22E5E0440(v517, (uint64_t)v731, v707, &v723);
      v110 = *(_QWORD *)(v517 + 96);
      LOWORD(v727) = 257;
      v111 = (llvm::Type **)sub_22E3C1338(v516, (uint64_t)v723, v110, (uint64_t)&v723);
      v583[0] = *(_OWORD *)v699;
      v583[1] = *(_OWORD *)&v699[16];
      v583[2] = *(_OWORD *)&v699[32];
      sub_22E3BEDDC((uint64_t)v516, v111, (uint64_t)v583);
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v109 + 8) & 0xFFFFFFFFFFFFFFF0) + 17) & 8) != 0)
      {
        v106 = (v106 + 1);
        v579[0] = v574;
        v579[1] = v568;
        v579[2] = v34;
        v580 = 0;
        v581 = *(_OWORD *)v689;
        v582 = *(_DWORD *)&v689[16];
        LOWORD(v727) = 257;
        sub_22E486A58(v516, (uint64_t)v579, v106, (uint64_t)&v723, (uint64_t)v705);
        *(_OWORD *)v699 = *(_OWORD *)v705;
        *(_OWORD *)&v699[16] = *(_OWORD *)&v705[16];
        *(_OWORD *)&v699[32] = *(_OWORD *)&v705[32];
        v112 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(v517 + 144) + 144), *(_QWORD *)(*v109 + 8));
        if (v112)
        {
          if (*(_BYTE *)(v112 + 16) == 5)
            v113 = v112;
          else
            v113 = 0;
        }
        else
        {
          v113 = 0;
        }
        v114 = sub_22F297878(v517, v113);
        v115 = *(_QWORD *)(v517 + 88);
        *(_WORD *)&v705[32] = 257;
        v116 = sub_22E3BF45C(v516, (uint64_t)v114, v115, 0, (uint64_t)v705);
        v117 = *(_QWORD *)(v517 + 96);
        *(_WORD *)&v705[32] = 257;
        v118 = (llvm::Type **)sub_22E3C1740(v516, 48, v116, v117, (uint64_t)v705);
        v578[0] = *(_OWORD *)v699;
        v578[1] = *(_OWORD *)&v699[16];
        v578[2] = *(_OWORD *)&v699[32];
        sub_22E3BEDDC((uint64_t)v516, v118, (uint64_t)v578);
      }
      ++v109;
      LODWORD(v106) = v106 + 1;
      ++v107;
      --v108;
    }
    while (v108);
  }
  v37 = *(_QWORD *)(v517 + 96);
  *(_WORD *)&v705[32] = 257;
  v505 = sub_22E3C1338(v516, v574, v37, (uint64_t)v705);
  v38 = sub_22E66C868(*(_QWORD *)(v517 + 144) + 280, v512, 0);
  v507 = sub_22E5AD738((uint64_t)v24, v548, v38, (uint64_t)v515, v514, (uint64_t)v21, v509, v39, a9, *((uint64_t *)&a9 + 1), a10, a11);
  v501 = sub_22F28CE84(v517, v512);
  v40 = (uint64_t *)v24[1];
  v41 = v40[18];
  v42 = *(_QWORD *)(v41 + 16816);
  sub_22EA41AB8((uint64_t)v731, 62, 0, v548);
  *(_QWORD *)&v731[40] = 0;
  *(_OWORD *)&v731[48] = v42;
  LODWORD(v732) = v511;
  *((_QWORD *)&v732 + 1) = v41 | 2;
  *(_QWORD *)&v733 = v731;
  *((_QWORD *)&v733 + 1) = 0;
  *(_QWORD *)v731 = &off_24FAC3008;
  LODWORD(v734) = 1310720;
  *(_DWORD *)&v731[28] |= 0x200u;
  v43 = *(_QWORD *)(v41 + 16472);
  sub_22EA41AB8((uint64_t)v699, 62, 0, v548);
  *(_QWORD *)&v699[40] = 0;
  *(_OWORD *)&v699[48] = v43;
  LODWORD(v700) = v511;
  *((_QWORD *)&v700 + 1) = v41 | 2;
  v701 = (unint64_t)v699;
  *(_QWORD *)v699 = &off_24FAC3008;
  LODWORD(v702) = 1310720;
  *(_DWORD *)&v699[28] |= 0x200u;
  v44 = *(_QWORD *)(v41 + 16472);
  sub_22EA41AB8((uint64_t)&v633, 62, 0, v548);
  *((_QWORD *)&v635 + 1) = 0;
  v636 = v44;
  v637 = 0;
  v638 = v511;
  v639 = v41 | 2;
  v640 = &v633;
  v641 = 0;
  *(_QWORD *)&v633 = &off_24FAC3008;
  v642 = 1310720;
  HIDWORD(v634) |= 0x200u;
  v45 = *(_QWORD *)(v41 + 16472);
  sub_22EA41AB8((uint64_t)&v624, 62, 0, v548);
  *((_QWORD *)&v626 + 1) = 0;
  v627 = v45;
  LODWORD(v628) = v511;
  *((_QWORD *)&v628 + 1) = v41 | 2;
  v629 = (unint64_t)&v624;
  *(_QWORD *)&v624 = &off_24FAC3008;
  LODWORD(v630) = 1310720;
  HIDWORD(v625) |= 0x200u;
  v723 = &v725;
  v725 = (__int128 *)v731;
  v726 = (__int128 *)v699;
  v46 = *(_QWORD *)(v41 + 16392);
  *(_QWORD *)&v727 = &v633;
  *((_QWORD *)&v727 + 1) = &v624;
  v724 = 0x1000000004;
  v47 = sub_22F24E348((uint64_t)(v40 + 35), v46, (uint64_t *)&v723);
  v48 = sub_22E46F2EC((uint64_t)(v40 + 35), v47);
  *(_QWORD *)v705 = "_omp_reduction_shuffle_and_reduce_func";
  *(_WORD *)&v705[32] = 259;
  v49 = v40[25];
  v50 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x78);
  MEMORY[0x23489F6FC](v50, v48, 7, 0xFFFFFFFFLL, v705, v49);
  sub_22E62BF18(v40, 0, 0, v50, v47);
  llvm::Function::addFnAttr();
  v569 = v40;
  sub_22E618EBC((uint64_t)v705, (uint64_t)v40, 0);
  v504 = v50;
  sub_22E61A8FC((uint64_t)v705, 0, 0, *(_QWORD *)(v41 + 16392), v50, v47, (uint64_t *)&v723, v548, v51, v548);
  *(_QWORD *)&v599 = v731;
  *(_QWORD *)&v608 = 0;
  v52 = sub_22E3CED3C(v721, &v599, &v608);
  v53 = v721[0] + 56 * v722;
  if (v52)
    v53 = v608;
  v590 = *(_OWORD *)(v53 + 8);
  v591 = *(_OWORD *)(v53 + 24);
  v592 = *(_OWORD *)(v53 + 40);
  v54 = sub_22E66C868((uint64_t)(v713 + 35), v512, 0);
  v55 = *(_QWORD *)(v41 + 16816);
  v608 = v590;
  v609 = v591;
  v610 = v592;
  sub_22E6281E0(v713, v55, (uint64_t)&v599);
  v56 = sub_22E4E6994((uint64_t)v705, (uint64_t)&v608, 0, v55, 0, 2, (uint64_t)&v599, 0);
  v57 = llvm::PointerType::get();
  LOWORD(v610) = 257;
  *(_QWORD *)&v599 = sub_22E3C1338(&v715, v56, v57, (uint64_t)&v608);
  *((_QWORD *)&v599 + 1) = v54;
  *(_QWORD *)&v600 = v712;
  DWORD2(v600) = 0;
  v601 = 0uLL;
  *(_QWORD *)&v665 = v699;
  *(_QWORD *)&v608 = 0;
  v58 = sub_22E3CED3C(v721, &v665, &v608);
  v59 = v721[0] + 56 * v722;
  if (v58)
    v59 = v608;
  v667 = *(_OWORD *)(v59 + 40);
  v666 = *(_OWORD *)(v59 + 24);
  v665 = *(_OWORD *)(v59 + 8);
  v60 = *(_QWORD *)(v41 + 16472);
  v608 = v665;
  v609 = v666;
  v610 = v667;
  sub_22E6281E0(v713, v60, (uint64_t)&v655);
  v61 = (uint64_t *)sub_22E4E6994((uint64_t)v705, (uint64_t)&v608, 0, v60, 0, 2, (uint64_t)&v655, 0);
  *(_QWORD *)&v655 = &v633;
  *(_QWORD *)&v608 = 0;
  v62 = sub_22E3CED3C(v721, &v655, &v608);
  v63 = v721[0] + 56 * v722;
  if (v62)
    v63 = v608;
  v657 = *(_OWORD *)(v63 + 40);
  v656 = *(_OWORD *)(v63 + 24);
  v655 = *(_OWORD *)(v63 + 8);
  v64 = *(_QWORD *)(v41 + 16472);
  v608 = v655;
  v609 = v656;
  v610 = v657;
  sub_22E6281E0(v713, v64, (uint64_t)&v646);
  v65 = (uint64_t *)sub_22E4E6994((uint64_t)v705, (uint64_t)&v608, 0, v64, 0, 2, (uint64_t)&v646, 0);
  *(_QWORD *)&v646 = &v624;
  *(_QWORD *)&v608 = 0;
  v66 = sub_22E3CED3C(v721, &v646, &v608);
  v67 = v721[0] + 56 * v722;
  if (v66)
    v67 = v608;
  *(_OWORD *)&v647[16] = *(_OWORD *)(v67 + 40);
  *(_OWORD *)v647 = *(_OWORD *)(v67 + 24);
  v646 = *(_OWORD *)(v67 + 8);
  v68 = *(_QWORD *)(v41 + 16472);
  v608 = v646;
  v609 = *(_OWORD *)v647;
  v610 = *(_OWORD *)&v647[16];
  sub_22E6281E0(v713, v68, (uint64_t)v686);
  v69 = (llvm::Constant **)sub_22E4E6994((uint64_t)v705, (uint64_t)&v608, 0, v68, 0, 2, (uint64_t)v686, 0);
  v686[0] = (llvm *)".omp.reduction.remote_reduce_list";
  LOWORD(v688) = 259;
  v70 = sub_22F25E4D4((uint64_t)v705, v512, (uint64_t)v686, 0);
  v72 = 0;
  v73 = v70 & 0xFFFFFFFFFFFFFFF8;
  if (v70 <= 7)
    v73 = 0;
  v74 = v71 & 0xFFFFFFFFFFFFFFF8;
  if (v70 <= 7)
    v74 = 0;
  *(_QWORD *)&v608 = v73;
  *((_QWORD *)&v608 + 1) = v74;
  if (v70 >= 8)
    v72 = 1 << (v71 & 7 | (8 * (v70 & 7)));
  *(_QWORD *)&v609 = v72;
  DWORD2(v609) = 0;
  v610 = 0uLL;
  *(_OWORD *)v686 = v599;
  v687 = v600;
  v688 = v601;
  v681 = v608;
  v682 = v609;
  v683 = 0uLL;
  sub_22E5DBF48(0, (uint64_t)v705, v515, v514, v686, &v681, (uint64_t)v65);
  *(_WORD *)&v698[16] = 257;
  NullValue = llvm::Constant::getNullValue(*v69, v75);
  v77 = sub_22E3C18F4((uint64_t)&v715, 32, (uint64_t *)v69, NullValue, (uint64_t)&v697);
  llvm::Type::getInt16Ty(v719, v78);
  v79 = llvm::ConstantInt::get();
  *(_WORD *)&v698[16] = 257;
  v80 = sub_22E3C18F4((uint64_t)&v715, 32, (uint64_t *)v69, v79, (uint64_t)&v697);
  *(_WORD *)&v698[16] = 257;
  v81 = sub_22E3C18F4((uint64_t)&v715, 36, v61, (uint64_t)v65, (uint64_t)&v697);
  LOWORD(v680) = 257;
  v82 = sub_22E3E49C4((uint64_t)&v715, v80, v81, (uint64_t)&v678);
  llvm::Type::getInt16Ty(v719, v83);
  v84 = llvm::ConstantInt::get();
  *(_WORD *)&v698[16] = 257;
  v85 = sub_22E3C18F4((uint64_t)&v715, 32, (uint64_t *)v69, v84, (uint64_t)&v697);
  llvm::Type::getInt16Ty(v719, v86);
  v87 = llvm::ConstantInt::get();
  *(_WORD *)&v698[16] = 257;
  v88 = (llvm::Constant **)sub_22E3E49C4((uint64_t)&v715, (uint64_t)v61, v87, (uint64_t)&v697);
  LOWORD(v680) = 257;
  v90 = llvm::Constant::getNullValue(*v88, v89);
  v91 = sub_22E3C18F4((uint64_t)&v715, 32, (uint64_t *)v88, v90, (uint64_t)&v678);
  LOWORD(v645) = 257;
  v92 = sub_22E3E49C4((uint64_t)&v715, v85, v91, (uint64_t)&v643);
  llvm::Type::getInt16Ty(v719, v93);
  v94 = llvm::ConstantInt::get();
  *(_WORD *)&v698[16] = 257;
  v95 = sub_22E3C18F4((uint64_t)&v715, 38, v65, v94, (uint64_t)&v697);
  LOWORD(v680) = 257;
  v96 = sub_22E3E49C4((uint64_t)&v715, v92, v95, (uint64_t)&v678);
  *(_WORD *)&v698[16] = 257;
  v97 = sub_22E3E58D4((uint64_t)&v715, v77, v82, (uint64_t)&v697);
  *(_WORD *)&v698[16] = 257;
  v98 = sub_22E3E58D4((uint64_t)&v715, v97, v96, (uint64_t)&v697);
  *(_QWORD *)&v697 = "then";
  *(_WORD *)&v698[16] = 259;
  v99 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  *(_QWORD *)&v697 = "else";
  *(_WORD *)&v698[16] = 259;
  v100 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  *(_QWORD *)&v697 = "ifcont";
  *(_WORD *)&v698[16] = 259;
  v101 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v102 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x23489C09C](v102, v99, v100, v98, 0);
  *(_WORD *)&v698[16] = 257;
  (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v720 + 16))(v720, v102, &v697, v717, v718);
  if (v716)
  {
    v103 = v715;
    v104 = v715 + 16 * v716;
    do
    {
      llvm::Instruction::setMetadata();
      v103 += 16;
    }
    while (v103 != v104);
  }
  sub_22E5ED9B4(v705, v99, 0);
  if ((BYTE8(v600) & 3) != 0)
    v105 = sub_22F28ABCC(&v599, v705);
  else
    v105 = v599;
  *(_WORD *)&v698[16] = 257;
  v119 = sub_22E3C1338(&v715, v105, v711, (uint64_t)&v697);
  if ((BYTE8(v609) & 3) != 0)
    v120 = sub_22F28ABCC(&v608, v705);
  else
    v120 = v608;
  *(_WORD *)&v698[16] = 257;
  v121 = sub_22E3C1338(&v715, v120, v711, (uint64_t)&v697);
  v122 = v569[101];
  if (v507)
    v123 = *((_QWORD *)v507 + 3);
  else
    v123 = 0;
  *(_QWORD *)&v697 = v119;
  *((_QWORD *)&v697 + 1) = v121;
  (*(void (**)(uint64_t, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v122 + 568))(v122, v705, v548, v123);
  v124 = llvm::User::operator new((llvm::User *)0x40);
  llvm::BranchInst::BranchInst();
  *(_WORD *)&v698[16] = 257;
  (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v720 + 16))(v720, v124, &v697, v717, v718);
  if (v716)
  {
    v125 = v715;
    v126 = v715 + 16 * v716;
    do
    {
      llvm::Instruction::setMetadata();
      v125 += 16;
    }
    while (v125 != v126);
  }
  sub_22E5ED9B4(v705, v100, 0);
  v127 = llvm::User::operator new((llvm::User *)0x40);
  llvm::BranchInst::BranchInst();
  *(_WORD *)&v698[16] = 257;
  (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v720 + 16))(v720, v127, &v697, v717, v718);
  if (v716)
  {
    v128 = v715;
    v129 = v715 + 16 * v716;
    do
    {
      llvm::Instruction::setMetadata();
      v128 += 16;
    }
    while (v128 != v129);
  }
  sub_22E5ED9B4(v705, v101, 0);
  llvm::Type::getInt16Ty(v719, v130);
  v131 = llvm::ConstantInt::get();
  *(_WORD *)&v698[16] = 257;
  v132 = sub_22E3C18F4((uint64_t)&v715, 32, (uint64_t *)v69, v131, (uint64_t)&v697);
  *(_WORD *)&v698[16] = 257;
  v133 = sub_22E3C18F4((uint64_t)&v715, 35, v61, (uint64_t)v65, (uint64_t)&v697);
  LOWORD(v680) = 257;
  v134 = sub_22E3E49C4((uint64_t)&v715, v132, v133, (uint64_t)&v678);
  *(_QWORD *)&v697 = "then";
  *(_WORD *)&v698[16] = 259;
  v135 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  *(_QWORD *)&v697 = "else";
  *(_WORD *)&v698[16] = 259;
  v136 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  *(_QWORD *)&v697 = "ifcont";
  *(_WORD *)&v698[16] = 259;
  v137 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v138 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x23489C09C](v138, v135, v136, v134, 0);
  *(_WORD *)&v698[16] = 257;
  (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v720 + 16))(v720, v138, &v697, v717, v718);
  if (v716)
  {
    v139 = v715;
    v140 = v715 + 16 * v716;
    do
    {
      llvm::Instruction::setMetadata();
      v139 += 16;
    }
    while (v139 != v140);
  }
  sub_22E5ED9B4(v705, v135, 0);
  v697 = v608;
  *(_OWORD *)v698 = v609;
  *(_OWORD *)&v698[16] = v610;
  v678 = v599;
  v679 = v600;
  v680 = v601;
  sub_22E5DBF48(1, (uint64_t)v705, v515, v514, &v697, &v678, 0);
  v141 = llvm::User::operator new((llvm::User *)0x40);
  llvm::BranchInst::BranchInst();
  LOWORD(v645) = 257;
  (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v720 + 16))(v720, v141, &v643, v717, v718);
  v142 = v548;
  if (v716)
  {
    v143 = v715;
    v144 = v715 + 16 * v716;
    do
    {
      llvm::Instruction::setMetadata();
      v143 += 16;
    }
    while (v143 != v144);
  }
  sub_22E5ED9B4(v705, v136, 0);
  v145 = llvm::User::operator new((llvm::User *)0x40);
  llvm::BranchInst::BranchInst();
  LOWORD(v645) = 257;
  (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v720 + 16))(v720, v145, &v643, v717, v718);
  if (v716)
  {
    v146 = v715;
    v147 = v715 + 16 * v716;
    do
    {
      llvm::Instruction::setMetadata();
      v146 += 16;
    }
    while (v146 != v147);
  }
  sub_22E5ED9B4(v705, v137, 0);
  sub_22E619DE8((uint64_t)v705, 0);
  sub_22E619434((uint64_t)v705);
  if (v723 != &v725)
    free(v723);
  v148 = (uint64_t *)v513[1];
  v149 = v148[18];
  v150 = v148[25];
  v151 = *(_QWORD *)(v149 + 16816);
  sub_22EA41AB8((uint64_t)v731, 62, 0, v548);
  *(_QWORD *)&v731[40] = 0;
  *(_OWORD *)&v731[48] = v151;
  LODWORD(v732) = v511;
  *((_QWORD *)&v732 + 1) = v149 | 2;
  *(_QWORD *)&v733 = v731;
  *((_QWORD *)&v733 + 1) = 0;
  *(_QWORD *)v731 = &off_24FAC3008;
  LODWORD(v734) = 1310720;
  *(_DWORD *)&v731[28] |= 0x200u;
  v152 = sub_22EF60A6C(v149, 32, 1);
  sub_22EA41AB8((uint64_t)v699, 62, 0, v548);
  *(_QWORD *)&v699[40] = 0;
  *(_OWORD *)&v699[48] = v152;
  LODWORD(v700) = v511;
  *((_QWORD *)&v700 + 1) = v149 | 2;
  v701 = (unint64_t)v699;
  *(_QWORD *)v699 = &off_24FAC3008;
  LODWORD(v702) = 1310720;
  *(_DWORD *)&v699[28] |= 0x200u;
  v723 = &v725;
  v725 = (__int128 *)v731;
  v726 = (__int128 *)v699;
  v724 = 0x1000000002;
  v153 = sub_22F24E348((uint64_t)(v148 + 35), *(_QWORD *)(v149 + 16392), (uint64_t *)&v723);
  v154 = sub_22E46F2EC((uint64_t)(v148 + 35), v153);
  *(_QWORD *)v705 = "_omp_reduction_inter_warp_copy_func";
  *(_WORD *)&v705[32] = 259;
  v155 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x78);
  MEMORY[0x23489F6FC](v155, v154, 7, 0xFFFFFFFFLL, v705, v150);
  sub_22E62BF18(v148, 0, 0, v155, v153);
  llvm::Function::addFnAttr();
  v570 = v148;
  v156 = (uint64_t)v148;
  v157 = (_QWORD *)v149;
  sub_22E618EBC((uint64_t)v705, v156, 0);
  v503 = v155;
  sub_22E61A8FC((uint64_t)v705, 0, 0, *(_QWORD *)(v149 + 16392), v155, v153, (uint64_t *)&v723, v548, v158, v548);
  GlobalVariable = llvm::Module::getGlobalVariable();
  v160 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v714 + 696))(v714);
  v546 = (uint64_t *)GlobalVariable;
  if (!GlobalVariable)
  {
    llvm::ArrayType::get((llvm::ArrayType *)v570[3], (llvm::Type *)*(unsigned int *)(v160 + 4));
    v161 = llvm::User::operator new((llvm::User *)0x58);
    llvm::UndefValue::get();
    LOWORD(v635) = 261;
    *(_QWORD *)&v633 = "__openmp_nvptx_data_transfer_temporary_storage";
    *((_QWORD *)&v633 + 1) = 46;
    llvm::GlobalVariable::GlobalVariable();
    v546 = (uint64_t *)v161;
    sub_22E6242E0(v570, v161);
  }
  RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
  LOWORD(v635) = 257;
  v544 = (uint64_t *)sub_22E479C7C((uint64_t)v705, RuntimeFunction, v163, 0, 0, (uint64_t)&v633);
  (*(void (**)(uint64_t))(*(_QWORD *)v714 + 696))(v714);
  v164 = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
  LOWORD(v635) = 257;
  v166 = sub_22E479C7C((uint64_t)v705, v164, v165, 0, 0, (uint64_t)&v633);
  llvm::Type::getInt32Ty(v719, v167);
  v168 = llvm::ConstantInt::get();
  *(_QWORD *)&v633 = "nvptx_lane_id";
  LOWORD(v635) = 259;
  v520 = (llvm::Constant **)sub_22E3E49C4((uint64_t)&v715, (uint64_t)v166, v168, (uint64_t)&v633);
  (*(void (**)(uint64_t))(*(_QWORD *)v714 + 696))(v714);
  v169 = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
  LOWORD(v635) = 257;
  v171 = sub_22E479C7C((uint64_t)v705, v169, v170, 0, 0, (uint64_t)&v633);
  *(_QWORD *)&v633 = "nvptx_warp_id";
  LOWORD(v635) = 259;
  v172 = llvm::ConstantInt::get();
  v519 = sub_22E3EA5BC((uint64_t)&v715, (uint64_t)v171, v172, (uint64_t)&v633, 0);
  *(_QWORD *)&v624 = v731;
  *(_QWORD *)&v633 = 0;
  v173 = sub_22E3CED3C(v721, &v624, &v633);
  v174 = v721[0] + 56 * v722;
  if (v173)
    v174 = v633;
  v624 = *(_OWORD *)(v174 + 8);
  v625 = *(_OWORD *)(v174 + 24);
  v626 = *(_OWORD *)(v174 + 40);
  v175 = sub_22E66C868((uint64_t)(v713 + 35), v512, 0);
  v608 = v624;
  v609 = v625;
  v610 = v626;
  v176 = v157[2102];
  LODWORD(v620) = 0;
  v621 = 0u;
  v622 = 0u;
  v177 = sub_22E4E6994((uint64_t)v705, (uint64_t)&v608, 0, v176, v548, 2, (uint64_t)&v620, 0);
  *((_QWORD *)&v542 + 1) = v175;
  v178 = llvm::PointerType::get();
  LOWORD(v635) = 257;
  *(_QWORD *)&v542 = sub_22E3C1338(&v715, v177, v178, (uint64_t)&v633);
  if (v514)
  {
    v179 = 0;
    v540 = v712;
    v180 = v515;
    v541 = v157;
    do
    {
      v181 = *v180;
      sub_22EF5CCD0((uint64_t)v157, *(_QWORD *)(*(_QWORD *)(*v180 + 8) & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v633);
      v182 = v633;
      v183 = sub_22EF5D130((uint64_t)v157, *(_QWORD *)(v181 + 8));
      v184 = (v182 + v183 - 1) / v183 * v183;
      v518 = v179;
      if (v184)
      {
        v547 = v179;
        v185 = 4;
        v530 = v180;
        do
        {
          if (v185 <= v184)
          {
            v537 = v184;
            v186 = v184 / v185;
            v187 = sub_22EF5CDF0((uint64_t)v157, *(_QWORD *)(v157[2051] & 0xFFFFFFFFFFFFFFF0));
            v549 = sub_22EF60A6C((uint64_t)v157, v185 * v187, 1);
            v565 = (llvm *)sub_22E66C868((uint64_t)(v713 + 35), v549, 0);
            v553 = v185;
            if (v186 >= 2)
            {
              v245 = v157[2060];
              *(_QWORD *)&v633 = ".cnt.addr";
              LOWORD(v635) = 259;
              v246 = sub_22F25E4D4((uint64_t)v705, v245, (uint64_t)&v633, 0);
              v248 = 0;
              if (v246 <= 7)
                v249 = 0;
              else
                v249 = v246 & 0xFFFFFFFFFFFFFFF8;
              if (v246 <= 7)
                v250 = 0;
              else
                v250 = (unint64_t)v247 & 0xFFFFFFFFFFFFFFF8;
              if (v246 >= 8)
                v248 = 1 << (v247 & 7 | (8 * (v246 & 7u)));
              v251 = llvm::Constant::getNullValue((llvm::Constant *)v570[9], v247);
              v252 = v157[2060];
              *(_QWORD *)&v633 = v249;
              *((_QWORD *)&v633 + 1) = v250;
              *(_QWORD *)&v634 = v248;
              DWORD2(v634) = 0;
              v635 = 0uLL;
              sub_22E6281E0(v713, v252, (uint64_t)&v599);
              sub_22E4E8134((uint64_t)v705, v251, (uint64_t)&v633, 0, v252, 2, (uint64_t)&v599, 0, 0);
              *(_QWORD *)&v633 = "precond";
              v253 = v250;
              LOWORD(v635) = 259;
              v254 = (_QWORD *)operator new();
              llvm::BasicBlock::BasicBlock();
              *(_QWORD *)&v633 = "exit";
              LOWORD(v635) = 259;
              v255 = operator new();
              llvm::BasicBlock::BasicBlock();
              *(_QWORD *)&v633 = "body";
              LOWORD(v635) = 259;
              v256 = v253;
              v257 = (_QWORD *)operator new();
              llvm::BasicBlock::BasicBlock();
              *(_QWORD *)&v675 = 0;
              *((_QWORD *)&v675 + 1) = v705;
              sub_22E48EE24((uint64_t *)&v675, 0, 1);
              sub_22E48F084(&v675);
              sub_22E5ED9B4(v705, v254, 0);
              v258 = v157[2060];
              v528 = v249;
              *(_QWORD *)&v633 = v249;
              *((_QWORD *)&v633 + 1) = v256;
              v525 = v248;
              *(_QWORD *)&v634 = v248;
              DWORD2(v634) = 0;
              v635 = 0uLL;
              sub_22E6281E0(v713, v258, (uint64_t)&v599);
              v259 = (uint64_t *)sub_22E4E6994((uint64_t)v705, (uint64_t)&v633, 0, v258, v548, 2, (uint64_t)&v599, 0);
              v260 = llvm::ConstantInt::get();
              LOWORD(v635) = 257;
              v531 = v259;
              v261 = sub_22E3C18F4((uint64_t)&v715, 36, v259, v260, (uint64_t)&v633);
              v262 = llvm::User::operator new((llvm::User *)0x40);
              v523 = (_QWORD *)v255;
              MEMORY[0x23489C09C](v262, v257, v255, v261, 0);
              LOWORD(v635) = 257;
              (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v720 + 16))(v720, v262, &v633, v717, v718);
              if (v716)
              {
                v263 = v715;
                v264 = v715 + 16 * v716;
                do
                {
                  llvm::Instruction::setMetadata();
                  v263 += 16;
                }
                while (v263 != v264);
              }
              v527 = v256;
              sub_22E5ED9B4(v705, v257, 0);
              v142 = v548;
            }
            else
            {
              v527 = 0;
              v528 = 0;
              v523 = 0;
              v525 = 0;
              v531 = 0;
            }
            (*(void (**)(uint64_t, _BYTE *, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v570[101] + 184))(v570[101], v705, v142, 89, 0, 1);
            *(_QWORD *)&v633 = "then";
            LOWORD(v635) = 259;
            v188 = (_QWORD *)operator new();
            llvm::BasicBlock::BasicBlock();
            *(_QWORD *)&v633 = "else";
            LOWORD(v635) = 259;
            v189 = operator new();
            llvm::BasicBlock::BasicBlock();
            *(_QWORD *)&v633 = "ifcont";
            LOWORD(v635) = 259;
            v533 = (_QWORD *)operator new();
            llvm::BasicBlock::BasicBlock();
            *(_QWORD *)&v633 = "warp_master";
            LOWORD(v635) = 259;
            v191 = llvm::Constant::getNullValue(*v520, v190);
            v192 = sub_22E3C18F4((uint64_t)&v715, 32, (uint64_t *)v520, v191, (uint64_t)&v633);
            v193 = llvm::User::operator new((llvm::User *)0x40);
            v532 = (_QWORD *)v189;
            MEMORY[0x23489C09C](v193, v188, v189, v192, 0);
            LOWORD(v635) = 257;
            (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v720 + 16))(v720, v193, &v633, v717, v718);
            if (v716)
            {
              v194 = v715;
              v195 = v715 + 16 * v716;
              do
              {
                llvm::Instruction::setMetadata();
                v194 += 16;
              }
              while (v194 != v195);
            }
            sub_22E5ED9B4(v705, v188, 0);
            v590 = v542;
            *(_QWORD *)&v591 = v540;
            DWORD2(v591) = 0;
            v592 = 0uLL;
            LOWORD(v635) = 257;
            sub_22E486A58(&v715, (uint64_t)&v590, v547, (uint64_t)&v633, (uint64_t)&v599);
            v633 = v599;
            v634 = v600;
            v635 = v601;
            v196 = v157[2102];
            sub_22E6281E0(v713, v196, (uint64_t)&v697);
            *(_QWORD *)&v665 = sub_22E4E6994((uint64_t)v705, (uint64_t)&v633, 0, v196, 0, 2, (uint64_t)&v697, 0);
            *((_QWORD *)&v665 + 1) = *(_QWORD *)&v705[8];
            *(_QWORD *)&v666 = v553;
            DWORD2(v666) = 0;
            HIDWORD(v666) = v560;
            v667 = 0uLL;
            *(_WORD *)&v698[16] = 257;
            sub_22E3BEE6C(&v715, &v665, (uint64_t)v565, (uint64_t)&v697, (uint64_t)&v633);
            v198 = *((_QWORD *)&v633 + 1);
            v199 = v633;
            v200 = v634;
            v201 = DWORD2(v634);
            v560 = HIDWORD(v634);
            v203 = *((_QWORD *)&v635 + 1);
            v202 = v635;
            if (v186 >= 2)
            {
              v655 = v633;
              v656 = v634;
              v657 = v635;
              *(_WORD *)&v698[16] = 257;
              sub_22F27F744(&v715, (uint64_t)v705, (uint64_t)&v655, v531, (uint64_t)&v697, (uint64_t)&v633);
              v198 = *((_QWORD *)&v633 + 1);
              v199 = v633;
              v200 = v634;
              v201 = DWORD2(v634);
              v560 = HIDWORD(v634);
              v203 = *((_QWORD *)&v635 + 1);
              v202 = v635;
            }
            v535 = v186;
            v204 = v546[3];
            *(_QWORD *)&v697 = llvm::Constant::getNullValue((llvm::Constant *)v570[4], v197);
            *((_QWORD *)&v697 + 1) = v519;
            LOWORD(v635) = 257;
            v205 = sub_22E486CB4(&v715, v204, v546, (uint64_t **)&v697, 2, (uint64_t)&v633);
            v206 = llvm::PointerType::get();
            LOWORD(v635) = 257;
            v207 = (llvm *)sub_22E3C1740(&v715, 49, (uint64_t)v205, v206, (uint64_t)&v633);
            *(_QWORD *)&v646 = v199;
            *((_QWORD *)&v646 + 1) = v198;
            *(_QWORD *)v647 = v200;
            *(_DWORD *)&v647[8] = v201;
            *(_DWORD *)&v647[12] = v560;
            *(_QWORD *)&v647[16] = v202;
            *(_QWORD *)&v647[24] = v203;
            LODWORD(v685[0]) = 0;
            memset(&v685[1], 0, 32);
            v208 = sub_22E4E6994((uint64_t)v705, (uint64_t)&v646, 0, v549, v548, 2, (uint64_t)v685, 0);
            v686[0] = v207;
            v686[1] = v565;
            *(_QWORD *)&v687 = v553;
            DWORD2(v687) = 0;
            v688 = 0uLL;
            LODWORD(v684[0]) = 0;
            memset((char *)v684 + 8, 0, 32);
            sub_22E4E8134((uint64_t)v705, v208, (uint64_t)v686, 1, v549, 2, (uint64_t)v684, 0, 0);
            v209 = llvm::User::operator new((llvm::User *)0x40);
            llvm::BranchInst::BranchInst();
            LOWORD(v635) = 257;
            (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v720 + 16))(v720, v209, &v633, v717, v718);
            if (v716)
            {
              v210 = v715;
              v211 = v715 + 16 * v716;
              do
              {
                llvm::Instruction::setMetadata();
                v210 += 16;
              }
              while (v210 != v211);
            }
            sub_22E5ED9B4(v705, v532, 0);
            v212 = llvm::User::operator new((llvm::User *)0x40);
            llvm::BranchInst::BranchInst();
            LOWORD(v635) = 257;
            (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v720 + 16))(v720, v212, &v633, v717, v718);
            if (v716)
            {
              v213 = v715;
              v214 = v715 + 16 * v716;
              do
              {
                llvm::Instruction::setMetadata();
                v213 += 16;
              }
              while (v213 != v214);
            }
            sub_22E5ED9B4(v705, v533, 0);
            (*(void (**)(uint64_t, _BYTE *, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v570[101] + 184))(v570[101], v705, v548, 89, 0, 1);
            *(_QWORD *)&v633 = "then";
            LOWORD(v635) = 259;
            v215 = (_QWORD *)operator new();
            llvm::BasicBlock::BasicBlock();
            *(_QWORD *)&v633 = "else";
            LOWORD(v635) = 259;
            v216 = (_QWORD *)operator new();
            llvm::BasicBlock::BasicBlock();
            *(_QWORD *)&v633 = "ifcont";
            LOWORD(v635) = 259;
            v217 = (_QWORD *)operator new();
            llvm::BasicBlock::BasicBlock();
            *(_QWORD *)&v697 = v699;
            *(_QWORD *)&v633 = 0;
            v218 = sub_22E3CED3C(v721, &v697, &v633);
            v219 = v721[0] + 56 * v722;
            if (v218)
              v219 = v633;
            v683 = *(_OWORD *)(v219 + 40);
            v220 = *(_OWORD *)(v219 + 8);
            v682 = *(_OWORD *)(v219 + 24);
            v681 = v220;
            v221 = v541[2060];
            v633 = v220;
            v634 = v682;
            v635 = v683;
            sub_22E6281E0(v713, v221, (uint64_t)&v697);
            v222 = sub_22E4E6994((uint64_t)v705, (uint64_t)&v633, 0, v221, v548, 2, (uint64_t)&v697, 0);
            *(_QWORD *)&v633 = "is_active_thread";
            LOWORD(v635) = 259;
            v223 = sub_22E3C18F4((uint64_t)&v715, 36, v544, v222, (uint64_t)&v633);
            v224 = llvm::User::operator new((llvm::User *)0x40);
            MEMORY[0x23489C09C](v224, v215, v216, v223, 0);
            LOWORD(v635) = 257;
            (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v720 + 16))(v720, v224, &v633, v717, v718);
            if (v716)
            {
              v225 = v715;
              v226 = v715 + 16 * v716;
              do
              {
                llvm::Instruction::setMetadata();
                v225 += 16;
              }
              while (v225 != v226);
            }
            v534 = v217;
            sub_22E5ED9B4(v705, v215, 0);
            v227 = v546[3];
            *(_QWORD *)&v697 = llvm::Constant::getNullValue((llvm::Constant *)v570[4], v228);
            *((_QWORD *)&v697 + 1) = v544;
            LOWORD(v635) = 257;
            v229 = sub_22E486CB4(&v715, v227, v546, (uint64_t **)&v697, 2, (uint64_t)&v633);
            v230 = llvm::PointerType::get();
            LOWORD(v635) = 257;
            v231 = sub_22E3C1740(&v715, 49, (uint64_t)v229, v230, (uint64_t)&v633);
            v678 = v542;
            *(_QWORD *)&v679 = v540;
            DWORD2(v679) = 0;
            v680 = 0uLL;
            LOWORD(v635) = 257;
            sub_22E486A58(&v715, (uint64_t)&v678, v547, (uint64_t)&v633, (uint64_t)&v697);
            v633 = v697;
            v634 = *(_OWORD *)v698;
            v635 = *(_OWORD *)&v698[16];
            v232 = v541[2102];
            sub_22E6281E0(v713, v232, (uint64_t)&v690);
            *(_QWORD *)&v643 = sub_22E4E6994((uint64_t)v705, (uint64_t)&v633, 0, v232, v548, 2, (uint64_t)&v690, 0);
            *((_QWORD *)&v643 + 1) = *(_QWORD *)&v705[8];
            *(_QWORD *)&v644 = v553;
            DWORD2(v644) = 0;
            HIDWORD(v644) = v538;
            v645 = 0uLL;
            LOWORD(v692) = 257;
            sub_22E3BEE6C(&v715, &v643, (uint64_t)v565, (uint64_t)&v690, (uint64_t)&v633);
            v233 = v633;
            v234 = v634;
            v235 = DWORD2(v634);
            v236 = v635;
            if (v535 >= 2)
            {
              *(_OWORD *)v693 = v633;
              *(_OWORD *)&v693[16] = v634;
              v694 = v635;
              LOWORD(v692) = 257;
              sub_22F27F744(&v715, (uint64_t)v705, (uint64_t)v693, v531, (uint64_t)&v690, (uint64_t)&v633);
              v265 = v634;
              v266 = DWORD2(v634);
              v267 = HIDWORD(v634);
              v539 = v633;
              v536 = v635;
              *(_QWORD *)&v633 = v231;
              *((_QWORD *)&v633 + 1) = v565;
              *(_QWORD *)&v634 = v553;
              DWORD2(v634) = 0;
              v635 = 0uLL;
              sub_22E6281E0(v713, v549, (uint64_t)&v690);
              v268 = sub_22E4E6994((uint64_t)v705, (uint64_t)&v633, 1u, v549, v548, 2, (uint64_t)&v690, 0);
              v633 = v539;
              *(_QWORD *)&v634 = v265;
              *((_QWORD *)&v634 + 1) = __PAIR64__(v267, v266);
              v538 = v267;
              v635 = v536;
              sub_22E6281E0(v713, v549, (uint64_t)&v690);
              sub_22E4E8134((uint64_t)v705, v268, (uint64_t)&v633, 0, v549, 2, (uint64_t)&v690, 0, 0);
              v269 = llvm::User::operator new((llvm::User *)0x40);
              llvm::BranchInst::BranchInst();
              LOWORD(v635) = 257;
              (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v720 + 16))(v720, v269, &v633, v717, v718);
              v142 = v548;
              if (v716)
              {
                v270 = v715;
                v271 = v715 + 16 * v716;
                do
                {
                  llvm::Instruction::setMetadata();
                  v270 += 16;
                }
                while (v270 != v271);
              }
              sub_22E5ED9B4(v705, v216, 0);
              v272 = llvm::User::operator new((llvm::User *)0x40);
              llvm::BranchInst::BranchInst();
              LOWORD(v635) = 257;
              (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v720 + 16))(v720, v272, &v633, v717, v718);
              v157 = v541;
              if (v716)
              {
                v273 = v715;
                v274 = v715 + 16 * v716;
                do
                {
                  llvm::Instruction::setMetadata();
                  v273 += 16;
                }
                while (v273 != v274);
              }
              sub_22E5ED9B4(v705, v217, 0);
              v275 = llvm::ConstantInt::get();
              LOWORD(v635) = 257;
              v276 = sub_22E520468((uint64_t)&v715, (uint64_t)v531, v275, (uint64_t)&v633);
              v277 = v541[2060];
              *(_QWORD *)&v633 = v528;
              *((_QWORD *)&v633 + 1) = v527;
              *(_QWORD *)&v634 = v525;
              DWORD2(v634) = 0;
              v635 = 0uLL;
              sub_22E6281E0(v713, v277, (uint64_t)&v690);
              sub_22E4E8134((uint64_t)v705, (uint64_t)v276, (uint64_t)&v633, 0, v277, 2, (uint64_t)&v690, 0, 0);
              sub_22E5EDA70((uint64_t)v705);
              v617 = 0;
              *(_QWORD *)&v618 = v705;
              sub_22E48EE24(&v617, 0, 1);
              sub_22E48F084(&v617);
              sub_22E5ED9B4(v705, v523, 0);
              v185 = v553;
            }
            else
            {
              *(_QWORD *)&v633 = v231;
              *((_QWORD *)&v633 + 1) = v565;
              *(_QWORD *)&v634 = v553;
              DWORD2(v634) = 0;
              v237 = HIDWORD(v634);
              v635 = 0uLL;
              sub_22E6281E0(v713, v549, (uint64_t)&v690);
              v238 = sub_22E4E6994((uint64_t)v705, (uint64_t)&v633, 1u, v549, v548, 2, (uint64_t)&v690, 0);
              v633 = v233;
              *(_QWORD *)&v634 = v234;
              *((_QWORD *)&v634 + 1) = __PAIR64__(v237, v235);
              v538 = v237;
              v635 = v236;
              sub_22E6281E0(v713, v549, (uint64_t)&v690);
              sub_22E4E8134((uint64_t)v705, v238, (uint64_t)&v633, 0, v549, 2, (uint64_t)&v690, 0, 0);
              v239 = llvm::User::operator new((llvm::User *)0x40);
              llvm::BranchInst::BranchInst();
              LOWORD(v635) = 257;
              (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v720 + 16))(v720, v239, &v633, v717, v718);
              if (v716)
              {
                v240 = v715;
                v241 = v715 + 16 * v716;
                do
                {
                  llvm::Instruction::setMetadata();
                  v240 += 16;
                }
                while (v240 != v241);
              }
              sub_22E5ED9B4(v705, v216, 0);
              v242 = llvm::User::operator new((llvm::User *)0x40);
              llvm::BranchInst::BranchInst();
              LOWORD(v635) = 257;
              (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v720 + 16))(v720, v242, &v633, v717, v718);
              v157 = v541;
              v185 = v553;
              if (v716)
              {
                v243 = v715;
                v244 = v715 + 16 * v716;
                do
                {
                  llvm::Instruction::setMetadata();
                  v243 += 16;
                }
                while (v243 != v244);
              }
              sub_22E5ED9B4(v705, v534, 0);
              v142 = v548;
            }
            v184 = (v185 - 1) & v537;
            v180 = v530;
          }
          if (v185 < 2)
            break;
          v185 >>= 1;
        }
        while (v184);
      }
      v179 = v518 + 1;
      ++v180;
    }
    while (v180 != &v515[v514]);
  }
  sub_22E619DE8((uint64_t)v705, 0);
  sub_22E619434((uint64_t)v705);
  if (v723 != &v725)
    free(v723);
  v280 = (_QWORD *)v517;
  if (!v502)
  {
    v279.n128_u64[0] = 1;
    v686[0] = (llvm *)1;
    for (i = 1; i != 9; i += 2)
      v686[i] = (llvm *)-4096;
    v287 = (unint64_t *)&v685[2];
    v685[0] = &v685[2];
    HIDWORD(v685[1]) = 4;
    v288 = v514;
    if (v514 < 5)
    {
      if (!v514)
      {
        v290 = 0;
        LODWORD(v685[1]) = 0;
LABEL_141:
        v529 = v290;
        v292 = sub_22E5D30CC(*(_QWORD *)(v513[1] + 144), v287, v290, 0, 0, (uint64_t)v686, *(_DWORD *)(*(_QWORD *)(v510 + 2000) + 88), v279);
        v293 = *((_DWORD *)v513 + 1452);
        if (v293 >= *((_DWORD *)v513 + 1453))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v293 = *((_DWORD *)v513 + 1452);
        }
        v543 = v292;
        *(_QWORD *)(v513[725] + 8 * v293) = v292;
        ++*((_DWORD *)v513 + 1452);
        v294 = v513[724];
        if (!v294)
        {
          v294 = llvm::User::operator new((llvm::User *)0x58);
          *(_QWORD *)v705 = "_openmp_teams_reductions_buffer_$_$ptr";
          *(_WORD *)&v705[32] = 259;
          v513[724] = llvm::GlobalVariable::GlobalVariable();
        }
        v295 = *(_QWORD *)(v517 + 96);
        v296 = *(unsigned __int8 *)(v513[1] + 130);
        v297 = sub_22EF5B848(v510, *(_QWORD *)(v510 + 16816), 0);
        *(_QWORD *)v705 = v294;
        *(_QWORD *)&v705[8] = v295;
        *(_QWORD *)&v705[16] = v296;
        *(_DWORD *)&v705[24] = 0;
        *(_OWORD *)&v705[32] = 0uLL;
        sub_22E6281E0(*(_QWORD **)(v517 + 144), v297, (uint64_t)&v723);
        v526 = sub_22E4E6994(v517, (uint64_t)v705, 0, v297, v142, 2, (uint64_t)&v723, 0);
        v298 = (uint64_t *)v513[1];
        v299 = v298[18];
        v300 = *(_QWORD *)(v299 + 16816);
        sub_22EA41AB8((uint64_t)&v665, 62, 0, v142);
        *((_QWORD *)&v667 + 1) = 0;
        v668 = v300;
        v669 = 0;
        v670 = v511;
        v671 = v299 | 2;
        v672 = &v665;
        v673 = 0;
        *(_QWORD *)&v665 = &off_24FAC3008;
        v674 = 1310720;
        HIDWORD(v666) |= 0x200u;
        v301 = *(_QWORD *)(v299 + 16480);
        sub_22EA41AB8((uint64_t)&v655, 62, 0, v142);
        *((_QWORD *)&v657 + 1) = 0;
        v658 = v301;
        v659 = 0;
        v660 = v511;
        v661 = v299 | 2;
        v662 = &v655;
        v663 = 0;
        *(_QWORD *)&v655 = &off_24FAC3008;
        v664 = 1310720;
        HIDWORD(v656) |= 0x200u;
        v302 = *(_QWORD *)(v299 + 16816);
        sub_22EA41AB8((uint64_t)&v646, 62, 0, v142);
        *(_QWORD *)&v647[24] = 0;
        v648 = v302;
        v649 = 0;
        v650 = v511;
        v651 = v299 | 2;
        v652 = &v646;
        v653 = 0;
        *(_QWORD *)&v646 = &off_24FAC3008;
        v654 = 1310720;
        *(_DWORD *)&v647[12] |= 0x200u;
        v723 = &v725;
        v725 = &v665;
        v726 = &v655;
        *(_QWORD *)&v727 = &v646;
        v724 = 0x1000000003;
        v303 = sub_22F24E348((uint64_t)(v298 + 35), *(_QWORD *)(v299 + 16392), (uint64_t *)&v723);
        v304 = sub_22E46F2EC((uint64_t)(v298 + 35), v303);
        *(_QWORD *)v705 = "_omp_reduction_list_to_global_copy_func";
        *(_WORD *)&v705[32] = 259;
        v305 = v298[25];
        v306 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x78);
        MEMORY[0x23489F6FC](v306, v304, 7, 0xFFFFFFFFLL, v705, v305);
        sub_22E62BF18(v298, 0, 0, v306, v303);
        llvm::Function::addFnAttr();
        sub_22E618EBC((uint64_t)v705, (uint64_t)v298, 0);
        v524 = v306;
        sub_22E61A8FC((uint64_t)v705, 0, 0, *(_QWORD *)(v299 + 16392), v306, v303, (uint64_t *)&v723, v142, v307, v142);
        *(_QWORD *)v699 = &v646;
        *(_QWORD *)v731 = 0;
        v308 = sub_22E3CED3C(v721, v699, v731);
        v309 = *(_QWORD *)v731;
        if (!v308)
          v309 = v721[0] + 56 * v722;
        v310 = *(_OWORD *)(v309 + 24);
        v681 = *(_OWORD *)(v309 + 8);
        v682 = v310;
        v683 = *(_OWORD *)(v309 + 40);
        *(_QWORD *)v699 = &v665;
        *(_QWORD *)v731 = 0;
        v311 = sub_22E3CED3C(v721, v699, v731);
        v312 = v721[0] + 56 * v722;
        if (v311)
          v312 = *(_QWORD *)v731;
        v697 = *(_OWORD *)(v312 + 8);
        *(_OWORD *)v698 = *(_OWORD *)(v312 + 24);
        *(_OWORD *)&v698[16] = *(_OWORD *)(v312 + 40);
        v313 = sub_22E66C868((uint64_t)(v713 + 35), v512, 0);
        v314 = *(_QWORD *)(v299 + 16816);
        *(_OWORD *)v731 = v681;
        *(_OWORD *)&v731[16] = v682;
        *(_OWORD *)&v731[32] = v683;
        sub_22E6281E0(v713, v314, (uint64_t)v699);
        v315 = sub_22E4E6994((uint64_t)v705, (uint64_t)v731, 0, v314, v142, 2, (uint64_t)v699, 0);
        *((_QWORD *)&v561 + 1) = v313;
        v316 = llvm::PointerType::get();
        *(_WORD *)&v731[32] = 257;
        *(_QWORD *)&v561 = sub_22E3C1338(&v715, v315, v316, (uint64_t)v731);
        v556 = v712;
        v554 = sub_22EF6477C(v299, v543);
        sub_22E66C868((uint64_t)(v298 + 35), v554, 0);
        v317 = *(_QWORD *)(v299 + 16816);
        *(_OWORD *)v731 = v697;
        *(_OWORD *)&v731[16] = *(_OWORD *)v698;
        *(_OWORD *)&v731[32] = *(_OWORD *)&v698[16];
        sub_22E6281E0(v713, v317, (uint64_t)v699);
        v318 = sub_22E4E6994((uint64_t)v705, (uint64_t)v731, 0, v317, v142, 2, (uint64_t)v699, 0);
        v319 = llvm::PointerType::get();
        *(_WORD *)&v731[32] = 257;
        v550 = sub_22E3C1338(&v715, v318, v319, (uint64_t)v731);
        v696 = 0;
        v695 = 0;
        v695 = (uint64_t *)llvm::Constant::getNullValue(*(llvm::Constant **)&v705[24], v320);
        *(_QWORD *)v699 = &v655;
        *(_QWORD *)v731 = 0;
        v321 = sub_22E3CED3C(v721, v699, v731);
        v322 = v721[0] + 56 * v722;
        if (v321)
          v322 = *(_QWORD *)v731;
        v680 = *(_OWORD *)(v322 + 40);
        v679 = *(_OWORD *)(v322 + 24);
        v678 = *(_OWORD *)(v322 + 8);
        v571 = v299;
        v323 = *(_QWORD *)(v299 + 16480);
        *(_OWORD *)v731 = v678;
        *(_OWORD *)&v731[16] = v679;
        *(_OWORD *)&v731[32] = v680;
        sub_22E6281E0(v713, v323, (uint64_t)v699);
        v696 = sub_22E4E6994((uint64_t)v705, (uint64_t)v731, 0, v323, v142, 2, (uint64_t)v699, 0);
        if (v514)
        {
          v324 = 0;
          v325 = 8 * v514;
          do
          {
            v326 = v515[v324];
            *(_OWORD *)v693 = v561;
            *(_QWORD *)&v693[16] = v556;
            *(_DWORD *)&v693[24] = 0;
            v694 = 0uLL;
            *(_WORD *)&v731[32] = 257;
            sub_22E486A58(&v715, (uint64_t)v693, v324, (uint64_t)v731, (uint64_t)&v643);
            *(_OWORD *)v731 = v643;
            *(_OWORD *)&v731[16] = v644;
            *(_OWORD *)&v731[32] = v645;
            v327 = *(_QWORD *)(v571 + 16816);
            sub_22E6281E0(v713, v327, (uint64_t)v699);
            v328 = sub_22E4E6994((uint64_t)v705, (uint64_t)v731, 0, v327, 0, 2, (uint64_t)v699, 0);
            v329 = sub_22E66C868((uint64_t)(v713 + 35), *(_QWORD *)(v326 + 8), 0);
            v330 = llvm::PointerType::get();
            *(_WORD *)&v731[32] = 257;
            v331 = sub_22E3C1338(&v715, v328, v330, (uint64_t)v731);
            v332 = sub_22EF5D130(v571, *(_QWORD *)(v326 + 8));
            v333 = *(_QWORD *)(v326 + 16);
            *(_QWORD *)v731 = 0;
            v334 = 0;
            if (sub_22F2891B4((uint64_t)v686, v333, v731))
              v334 = *(_QWORD *)(*(_QWORD *)v731 + 8);
            sub_22E619C24(v550, v554, 0, 0, (uint64_t)v705, (uint64_t)&v633);
            sub_22E4DD05C((uint64_t)v705, (uint64_t)&v633, v334, (uint64_t)v699);
            v690 = *(_OWORD *)&v699[8];
            v691 = *(_OWORD *)&v699[24];
            v692 = *(_OWORD *)&v699[40];
            v335 = *(_QWORD *)&v699[16];
            if ((v699[32] & 3) != 0)
              v336 = (uint64_t *)sub_22F28ABCC(&v690, v705);
            else
              v336 = (uint64_t *)v690;
            *(_WORD *)&v731[32] = 257;
            v337 = sub_22E486CB4(&v715, v335, v336, &v695, 2, (uint64_t)v731);
            v338 = sub_22E66C868((uint64_t)(v713 + 35), *(_QWORD *)(v326 + 8), 0);
            *(_QWORD *)&v699[8] = v337;
            *(_QWORD *)&v699[16] = v338;
            *(_QWORD *)&v699[24] = v691;
            *(_DWORD *)&v699[32] = 0;
            *(_QWORD *)&v699[40] = 0;
            *(_QWORD *)&v699[48] = 0;
            v339 = *(_QWORD *)(v326 + 8);
            v340 = sub_22E619D68(v339);
            switch(v340)
            {
              case 2:
                v601 = *(_OWORD *)&v699[32];
                v602 = *(_OWORD *)&v699[48];
                v607 = v704;
                v606 = v703;
                v605 = v702;
                v603 = v700;
                v604 = v701;
                v599 = *(_OWORD *)v699;
                v600 = *(_OWORD *)&v699[16];
                v343 = *(_QWORD *)(v326 + 8);
                sub_22E6281E0(v713, v343, (uint64_t)&v675);
                *(_QWORD *)v731 = v331;
                *(_QWORD *)&v731[8] = v329;
                *(_QWORD *)&v731[16] = v332;
                *(_DWORD *)&v731[24] = 0;
                *(_QWORD *)&v731[32] = 0;
                *(_QWORD *)&v731[40] = 0;
                v344 = v713[18];
                v684[0] = v675;
                v684[1] = v676;
                *(_QWORD *)&v684[2] = v677;
                v591 = 0uLL;
                *((_QWORD *)&v590 + 1) = 0;
                LODWORD(v592) = 0;
                *((_QWORD *)&v592 + 1) = 0;
                *(_QWORD *)&v593 = 0;
                v594 = 0uLL;
                *(_QWORD *)((char *)&v595 + 4) = 2;
                LODWORD(v590) = 0;
                v596 = 0u;
                v597 = 0u;
                sub_22E3C113C((uint64_t)&v590, (__int128 *)v731, v343, 2, v684, v344);
                sub_22E4EF4B8(v705, &v599, &v590, *(_QWORD *)(v326 + 8), 0, 0);
                break;
              case 1:
                sub_22E6281E0(v713, v339, (uint64_t)&v675);
                *(_QWORD *)v731 = v331;
                *(_QWORD *)&v731[8] = v329;
                *(_QWORD *)&v731[16] = v332;
                *(_DWORD *)&v731[24] = 0;
                *(_QWORD *)&v731[32] = 0;
                *(_QWORD *)&v731[40] = 0;
                v345 = v713[18];
                v684[0] = v675;
                v684[1] = v676;
                *(_QWORD *)&v684[2] = v677;
                v609 = 0uLL;
                *((_QWORD *)&v608 + 1) = 0;
                LODWORD(v610) = 0;
                *((_QWORD *)&v610 + 1) = 0;
                *(_QWORD *)&v611 = 0;
                v612 = 0uLL;
                *(_QWORD *)((char *)&v613 + 4) = 2;
                LODWORD(v608) = 0;
                v614 = 0u;
                v615 = 0u;
                sub_22E3C113C((uint64_t)&v608, (__int128 *)v731, v339, 2, v684, v345);
                *(_QWORD *)&v684[0] = v705;
                *((_QWORD *)&v684[0] + 1) = &v715;
                LOWORD(v684[1]) = 0;
                v734 = v614;
                v735 = v615;
                v736 = v616;
                *(_OWORD *)&v731[32] = v610;
                *(_OWORD *)&v731[48] = v611;
                v732 = v612;
                v733 = v613;
                *(_OWORD *)v731 = v608;
                *(_OWORD *)&v731[16] = v609;
                v346 = sub_22E5027E0((uint64_t)v684, (uint64_t)v731, v548);
                v734 = v702;
                v735 = v703;
                v736 = v704;
                *(_OWORD *)&v731[32] = *(_OWORD *)&v699[32];
                *(_OWORD *)&v731[48] = *(_OWORD *)&v699[48];
                v732 = v700;
                v733 = v701;
                *(_OWORD *)v731 = *(_OWORD *)v699;
                *(_OWORD *)&v731[16] = *(_OWORD *)&v699[16];
                *(_QWORD *)&v684[0] = v705;
                *((_QWORD *)&v684[0] + 1) = &v715;
                LOWORD(v684[1]) = 0;
                sub_22E5025C8((uint64_t *)v684, v346, v347, (uint64_t)v731, 0);
                break;
              case 0:
                v620 = v331;
                *(_QWORD *)&v621 = v329;
                *((_QWORD *)&v621 + 1) = v332;
                LODWORD(v622) = 0;
                *((_QWORD *)&v622 + 1) = 0;
                v623 = 0;
                v341 = *(_QWORD *)(v326 + 8);
                LODWORD(v617) = 0;
                v618 = 0u;
                v619 = 0u;
                v342 = sub_22E4E6994((uint64_t)v705, (uint64_t)&v620, 0, v341, v548, 2, (uint64_t)&v617, 0);
                v630 = v702;
                v631 = v703;
                v632 = v704;
                v626 = *(_OWORD *)&v699[32];
                v627 = *(_OWORD *)&v699[48];
                v629 = v701;
                v628 = v700;
                v625 = *(_OWORD *)&v699[16];
                v624 = *(_OWORD *)v699;
                sub_22E4E87FC((uint64_t)v705, v342, (uint64_t)&v624, 0);
                break;
            }
            ++v324;
            v325 -= 8;
          }
          while (v325);
        }
        sub_22E619DE8((uint64_t)v705, 0);
        sub_22E619434((uint64_t)v705);
        if (v723 != &v725)
          free(v723);
        v348 = (uint64_t *)v513[1];
        v349 = v348[18];
        v350 = *(_QWORD *)(v349 + 16816);
        sub_22EA41AB8((uint64_t)&v633, 62, 0, v548);
        *((_QWORD *)&v635 + 1) = 0;
        v636 = v350;
        v637 = 0;
        v638 = v511;
        v639 = v349 | 2;
        v640 = &v633;
        v641 = 0;
        *(_QWORD *)&v633 = &off_24FAC3008;
        v642 = 1310720;
        HIDWORD(v634) |= 0x200u;
        v351 = *(_QWORD *)(v349 + 16480);
        sub_22EA41AB8((uint64_t)&v624, 62, 0, v548);
        *((_QWORD *)&v626 + 1) = 0;
        v627 = (unint64_t)v351;
        LODWORD(v628) = v511;
        *((_QWORD *)&v628 + 1) = v349 | 2;
        v629 = (unint64_t)&v624;
        *(_QWORD *)&v624 = &off_24FAC3008;
        LODWORD(v630) = 1310720;
        HIDWORD(v625) |= 0x200u;
        v352 = *(_QWORD *)(v349 + 16816);
        sub_22EA41AB8((uint64_t)&v608, 62, 0, v548);
        *((_QWORD *)&v610 + 1) = 0;
        v611 = (unint64_t)v352;
        LODWORD(v612) = v511;
        *((_QWORD *)&v612 + 1) = v349 | 2;
        v613 = (unint64_t)&v608;
        *(_QWORD *)&v608 = &off_24FAC3008;
        LODWORD(v614) = 1310720;
        HIDWORD(v609) |= 0x200u;
        v723 = &v725;
        v725 = &v633;
        v726 = &v624;
        *(_QWORD *)&v727 = &v608;
        v724 = 0x1000000003;
        v353 = sub_22F24E348((uint64_t)(v348 + 35), *(_QWORD *)(v349 + 16392), (uint64_t *)&v723);
        v354 = sub_22E46F2EC((uint64_t)(v348 + 35), v353);
        *(_QWORD *)v705 = "_omp_reduction_list_to_global_reduce_func";
        *(_WORD *)&v705[32] = 259;
        v355 = v348[25];
        v356 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x78);
        MEMORY[0x23489F6FC](v356, v354, 7, 0xFFFFFFFFLL, v705, v355);
        sub_22E62BF18(v348, 0, 0, v356, v353);
        llvm::Function::addFnAttr();
        v551 = v348;
        sub_22E618EBC((uint64_t)v705, (uint64_t)v348, 0);
        v522 = (unint64_t)v356;
        sub_22E61A8FC((uint64_t)v705, 0, 0, *(_QWORD *)(v349 + 16392), v356, v353, (uint64_t *)&v723, v548, v357, v548);
        *(_QWORD *)v699 = &v633;
        *(_QWORD *)v731 = 0;
        v358 = sub_22E3CED3C(v721, v699, v731);
        v359 = *(_QWORD *)v731;
        if (!v358)
          v359 = v721[0] + 56 * v722;
        v590 = *(_OWORD *)(v359 + 8);
        v591 = *(_OWORD *)(v359 + 24);
        v592 = *(_OWORD *)(v359 + 40);
        v562 = sub_22EF6477C(v349, v543);
        sub_22E66C868((uint64_t)(v348 + 35), v562, 0);
        v360 = *(_QWORD *)(v349 + 16816);
        *(_OWORD *)v731 = v590;
        *(_OWORD *)&v731[16] = v591;
        *(_OWORD *)&v731[32] = v592;
        sub_22E6281E0(v713, v360, (uint64_t)v699);
        v361 = sub_22E4E6994((uint64_t)v705, (uint64_t)v731, 0, v360, v548, 2, (uint64_t)v699, 0);
        v362 = llvm::PointerType::get();
        *(_WORD *)&v731[32] = 257;
        v557 = sub_22E3C1338(&v715, v361, v362, (uint64_t)v731);
        *(_QWORD *)v731 = ".omp.reduction.red_list";
        *(_WORD *)&v731[32] = 259;
        v363 = v548;
        v364 = sub_22F25E4D4((uint64_t)v705, v512, (uint64_t)v731, 0);
        v366 = v365;
        *(_QWORD *)v693 = llvm::Constant::getNullValue(*(llvm::Constant **)&v705[24], v365);
        *(_QWORD *)v699 = &v624;
        *(_QWORD *)v731 = 0;
        v367 = sub_22E3CED3C(v721, v699, v731);
        v368 = v721[0] + 56 * v722;
        if (v367)
          v368 = *(_QWORD *)v731;
        v667 = *(_OWORD *)(v368 + 40);
        v666 = *(_OWORD *)(v368 + 24);
        v665 = *(_OWORD *)(v368 + 8);
        v566 = (uint64_t *)v349;
        v369 = *(_QWORD *)(v349 + 16480);
        *(_OWORD *)v731 = v665;
        *(_OWORD *)&v731[16] = v666;
        *(_OWORD *)&v731[32] = v667;
        sub_22E6281E0(v713, v369, (uint64_t)v699);
        *(_QWORD *)&v693[8] = sub_22E4E6994((uint64_t)v705, (uint64_t)v731, 0, v369, v548, 2, (uint64_t)v699, 0);
        if (v529)
        {
          LODWORD(v371) = 0;
          v372 = v364 & 0xFFFFFFFFFFFFFFF8;
          v545 = v364 & 0xFFFFFFFFFFFFFFF8;
          if (v364 <= 7)
            v372 = 0;
          v575 = v372;
          v373 = (unint64_t)v366 & 0xFFFFFFFFFFFFFFF8;
          if (v364 <= 7)
            v373 = 0;
          v572 = v373;
          if (v364 <= 7)
            v374 = 0;
          else
            v374 = 1 << (v366 & 7 | (8 * (v364 & 7u)));
          v375 = v529;
          v376 = v515;
          do
          {
            *(_QWORD *)&v646 = v575;
            *((_QWORD *)&v646 + 1) = v572;
            *(_QWORD *)v647 = v374;
            *(_DWORD *)&v647[8] = 0;
            *(_OWORD *)&v647[16] = 0uLL;
            *(_WORD *)&v731[32] = 257;
            sub_22E486A58(&v715, (uint64_t)&v646, v371, (uint64_t)v731, (uint64_t)&v655);
            v377 = *(_QWORD *)(*v376 + 16);
            *(_QWORD *)v731 = 0;
            v378 = 0;
            if (sub_22F2891B4((uint64_t)v686, v377, v731))
              v378 = *(_QWORD *)(*(_QWORD *)v731 + 8);
            sub_22E619C24(v557, v562, 0, 0, (uint64_t)v705, (uint64_t)v699);
            sub_22E4DD05C((uint64_t)v705, (uint64_t)v699, v378, (uint64_t)v731);
            v681 = *(_OWORD *)&v731[8];
            v682 = *(_OWORD *)&v731[24];
            v683 = *(_OWORD *)&v731[40];
            v379 = *(_QWORD *)&v731[16];
            if ((v731[32] & 3) != 0)
              v380 = (uint64_t *)sub_22F28ABCC(&v681, v705);
            else
              v380 = (uint64_t *)v681;
            LOWORD(v601) = 257;
            v381 = (uint64_t *)sub_22E486CB4(&v715, v379, v380, (uint64_t **)v693, 2, (uint64_t)&v599);
            v382 = sub_22F25E214(v705, v381);
            v599 = v655;
            v600 = v656;
            v601 = v657;
            v383 = v566[2102];
            sub_22E6281E0(v713, v383, (uint64_t)&v643);
            sub_22E4E8134((uint64_t)v705, v382, (uint64_t)&v599, 0, v383, 2, (uint64_t)&v643, 0, 0);
            if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v376 + 8) & 0xFFFFFFFFFFFFFFF0) + 17) & 8) != 0)
            {
              v371 = (v371 + 1);
              *(_QWORD *)&v697 = v575;
              *((_QWORD *)&v697 + 1) = v572;
              *(_QWORD *)v698 = v374;
              *(_DWORD *)&v698[8] = 0;
              *(_OWORD *)&v698[16] = 0uLL;
              LOWORD(v645) = 257;
              sub_22E486A58(&v715, (uint64_t)&v697, v371, (uint64_t)&v643, (uint64_t)&v599);
              v655 = v599;
              v656 = v600;
              v657 = v601;
              v384 = sub_22EF5C728(v713[18], *(_QWORD *)(*v376 + 8));
              v385 = 0;
              if (v384)
              {
                if (*(_BYTE *)(v384 + 16) == 5)
                  v385 = v384;
                else
                  v385 = 0;
              }
              v386 = sub_22F297878((uint64_t)v705, v385);
              LOWORD(v601) = 257;
              v387 = sub_22E3BF45C(&v715, (uint64_t)v386, v710, 0, (uint64_t)&v599);
              LOWORD(v601) = 257;
              v388 = (llvm::Type **)sub_22E3C1740(&v715, 48, v387, v711, (uint64_t)&v599);
              v678 = v655;
              v679 = v656;
              v680 = v657;
              sub_22E3BEDDC((uint64_t)&v715, v388, (uint64_t)&v678);
            }
            ++v376;
            LODWORD(v371) = v371 + 1;
            --v375;
          }
          while (v375);
          v363 = v548;
          v370 = (uint64_t *)v545;
        }
        else
        {
          v370 = (uint64_t *)(v364 & 0xFFFFFFFFFFFFFFF8);
        }
        v389 = sub_22F25E214(v705, v370);
        *(_QWORD *)&v599 = &v608;
        *(_QWORD *)v731 = 0;
        v390 = sub_22E3CED3C(v721, &v599, v731);
        v391 = v721[0] + 56 * v722;
        if (v390)
          v391 = *(_QWORD *)v731;
        v601 = *(_OWORD *)(v391 + 40);
        v600 = *(_OWORD *)(v391 + 24);
        v599 = *(_OWORD *)(v391 + 8);
        v392 = v566[2102];
        *(_OWORD *)v731 = v599;
        *(_OWORD *)&v731[16] = v600;
        *(_OWORD *)&v731[32] = v601;
        sub_22E6281E0(v713, v392, (uint64_t)&v655);
        v393 = sub_22E4E6994((uint64_t)v705, (uint64_t)v731, 0, v392, v363, 2, (uint64_t)&v655, 0);
        v394 = 0;
        v395 = v551[101];
        if (v507)
          v394 = *((_QWORD *)v507 + 3);
        *(_QWORD *)v731 = v389;
        *(_QWORD *)&v731[8] = v393;
        (*(void (**)(uint64_t, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v395 + 568))(v395, v705, v363, v394);
        sub_22E619DE8((uint64_t)v705, 0);
        sub_22E619434((uint64_t)v705);
        if (v723 != &v725)
          free(v723);
        v396 = (uint64_t *)v513[1];
        v397 = v396[18];
        v398 = *(_QWORD *)(v397 + 16816);
        sub_22EA41AB8((uint64_t)&v665, 62, 0, v363);
        *((_QWORD *)&v667 + 1) = 0;
        v668 = v398;
        v669 = 0;
        v670 = v511;
        v671 = v397 | 2;
        v672 = &v665;
        v673 = 0;
        *(_QWORD *)&v665 = &off_24FAC3008;
        v674 = 1310720;
        HIDWORD(v666) |= 0x200u;
        v399 = *(_QWORD *)(v397 + 16480);
        sub_22EA41AB8((uint64_t)&v655, 62, 0, v363);
        *((_QWORD *)&v657 + 1) = 0;
        v658 = v399;
        v659 = 0;
        v660 = v511;
        v661 = v397 | 2;
        v662 = &v655;
        v663 = 0;
        *(_QWORD *)&v655 = &off_24FAC3008;
        v664 = 1310720;
        HIDWORD(v656) |= 0x200u;
        v400 = *(_QWORD *)(v397 + 16816);
        sub_22EA41AB8((uint64_t)&v646, 62, 0, v363);
        *(_QWORD *)&v647[24] = 0;
        v648 = v400;
        v649 = 0;
        v650 = v511;
        v651 = v397 | 2;
        v652 = &v646;
        v653 = 0;
        *(_QWORD *)&v646 = &off_24FAC3008;
        v654 = 1310720;
        *(_DWORD *)&v647[12] |= 0x200u;
        v723 = &v725;
        v725 = &v665;
        v726 = &v655;
        *(_QWORD *)&v727 = &v646;
        v724 = 0x1000000003;
        v401 = sub_22F24E348((uint64_t)(v396 + 35), *(_QWORD *)(v397 + 16392), (uint64_t *)&v723);
        v402 = sub_22E46F2EC((uint64_t)(v396 + 35), v401);
        *(_QWORD *)v705 = "_omp_reduction_global_to_list_copy_func";
        *(_WORD *)&v705[32] = 259;
        v403 = v396[25];
        v404 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x78);
        MEMORY[0x23489F6FC](v404, v402, 7, 0xFFFFFFFFLL, v705, v403);
        sub_22E62BF18(v396, 0, 0, v404, v401);
        llvm::Function::addFnAttr();
        sub_22E618EBC((uint64_t)v705, (uint64_t)v396, 0);
        v521 = v404;
        sub_22E61A8FC((uint64_t)v705, 0, 0, *(_QWORD *)(v397 + 16392), v404, v401, (uint64_t *)&v723, v363, v405, v363);
        *(_QWORD *)v699 = &v646;
        *(_QWORD *)v731 = 0;
        v406 = sub_22E3CED3C(v721, v699, v731);
        v407 = *(_QWORD *)v731;
        if (!v406)
          v407 = v721[0] + 56 * v722;
        v408 = *(_OWORD *)(v407 + 24);
        v681 = *(_OWORD *)(v407 + 8);
        v682 = v408;
        v683 = *(_OWORD *)(v407 + 40);
        *(_QWORD *)v699 = &v665;
        *(_QWORD *)v731 = 0;
        v409 = sub_22E3CED3C(v721, v699, v731);
        v410 = v721[0] + 56 * v722;
        if (v409)
          v410 = *(_QWORD *)v731;
        v697 = *(_OWORD *)(v410 + 8);
        *(_OWORD *)v698 = *(_OWORD *)(v410 + 24);
        *(_OWORD *)&v698[16] = *(_OWORD *)(v410 + 40);
        v411 = sub_22E66C868((uint64_t)(v713 + 35), v512, 0);
        v412 = *(_QWORD *)(v397 + 16816);
        *(_OWORD *)v731 = v681;
        *(_OWORD *)&v731[16] = v682;
        *(_OWORD *)&v731[32] = v683;
        sub_22E6281E0(v713, v412, (uint64_t)v699);
        v413 = sub_22E4E6994((uint64_t)v705, (uint64_t)v731, 0, v412, v363, 2, (uint64_t)v699, 0);
        *((_QWORD *)&v563 + 1) = v411;
        v414 = llvm::PointerType::get();
        *(_WORD *)&v731[32] = 257;
        *(_QWORD *)&v563 = sub_22E3C1338(&v715, v413, v414, (uint64_t)v731);
        v558 = v712;
        v555 = sub_22EF6477C(v397, v543);
        sub_22E66C868((uint64_t)(v396 + 35), v555, 0);
        v415 = *(_QWORD *)(v397 + 16816);
        *(_OWORD *)v731 = v697;
        *(_OWORD *)&v731[16] = *(_OWORD *)v698;
        *(_OWORD *)&v731[32] = *(_OWORD *)&v698[16];
        sub_22E6281E0(v713, v415, (uint64_t)v699);
        v416 = sub_22E4E6994((uint64_t)v705, (uint64_t)v731, 0, v415, v363, 2, (uint64_t)v699, 0);
        v417 = llvm::PointerType::get();
        *(_WORD *)&v731[32] = 257;
        v552 = sub_22E3C1338(&v715, v416, v417, (uint64_t)v731);
        v695 = (uint64_t *)llvm::Constant::getNullValue(*(llvm::Constant **)&v705[24], v418);
        *(_QWORD *)v699 = &v655;
        *(_QWORD *)v731 = 0;
        v419 = sub_22E3CED3C(v721, v699, v731);
        v420 = v721[0] + 56 * v722;
        if (v419)
          v420 = *(_QWORD *)v731;
        v680 = *(_OWORD *)(v420 + 40);
        v679 = *(_OWORD *)(v420 + 24);
        v678 = *(_OWORD *)(v420 + 8);
        v421 = *(_QWORD *)(v397 + 16480);
        *(_OWORD *)v731 = v678;
        *(_OWORD *)&v731[16] = v679;
        *(_OWORD *)&v731[32] = v680;
        sub_22E6281E0(v713, v421, (uint64_t)v699);
        v696 = sub_22E4E6994((uint64_t)v705, (uint64_t)v731, 0, v421, v363, 2, (uint64_t)v699, 0);
        if (v514)
        {
          v422 = 0;
          v423 = 8 * v514;
          do
          {
            v424 = v515[v422];
            *(_OWORD *)v693 = v563;
            *(_QWORD *)&v693[16] = v558;
            *(_DWORD *)&v693[24] = 0;
            v694 = 0uLL;
            *(_WORD *)&v731[32] = 257;
            sub_22E486A58(&v715, (uint64_t)v693, v422, (uint64_t)v731, (uint64_t)&v643);
            *(_OWORD *)v731 = v643;
            *(_OWORD *)&v731[16] = v644;
            *(_OWORD *)&v731[32] = v645;
            v425 = *(_QWORD *)(v397 + 16816);
            sub_22E6281E0(v713, v425, (uint64_t)v699);
            v426 = sub_22E4E6994((uint64_t)v705, (uint64_t)v731, 0, v425, 0, 2, (uint64_t)v699, 0);
            v427 = sub_22E66C868((uint64_t)(v713 + 35), *(_QWORD *)(v424 + 8), 0);
            v428 = llvm::PointerType::get();
            *(_WORD *)&v731[32] = 257;
            v429 = sub_22E3C1338(&v715, v426, v428, (uint64_t)v731);
            v430 = sub_22EF5D130(v397, *(_QWORD *)(v424 + 8));
            v431 = *(_QWORD *)(v424 + 16);
            *(_QWORD *)v731 = 0;
            v432 = 0;
            if (sub_22F2891B4((uint64_t)v686, v431, v731))
              v432 = *(_QWORD *)(*(_QWORD *)v731 + 8);
            sub_22E619C24(v552, v555, 0, 0, (uint64_t)v705, (uint64_t)&v633);
            sub_22E4DD05C((uint64_t)v705, (uint64_t)&v633, v432, (uint64_t)v699);
            v690 = *(_OWORD *)&v699[8];
            v691 = *(_OWORD *)&v699[24];
            v692 = *(_OWORD *)&v699[40];
            v433 = *(_QWORD *)&v699[16];
            if ((v699[32] & 3) != 0)
              v434 = (uint64_t *)sub_22F28ABCC(&v690, v705);
            else
              v434 = (uint64_t *)v690;
            *(_WORD *)&v731[32] = 257;
            v435 = sub_22E486CB4(&v715, v433, v434, &v695, 2, (uint64_t)v731);
            v436 = sub_22E66C868((uint64_t)(v713 + 35), *(_QWORD *)(v424 + 8), 0);
            *(_QWORD *)&v699[8] = v435;
            *(_QWORD *)&v699[16] = v436;
            *(_QWORD *)&v699[24] = v691;
            *(_DWORD *)&v699[32] = 0;
            *(_QWORD *)&v699[40] = 0;
            *(_QWORD *)&v699[48] = 0;
            v437 = *(_QWORD *)(v424 + 8);
            v438 = sub_22E619D68(v437);
            switch(v438)
            {
              case 2:
                sub_22E6281E0(v713, v437, (uint64_t)&v675);
                *(_QWORD *)v731 = v429;
                *(_QWORD *)&v731[8] = v427;
                *(_QWORD *)&v731[16] = v430;
                *(_DWORD *)&v731[24] = 0;
                *(_QWORD *)&v731[32] = 0;
                *(_QWORD *)&v731[40] = 0;
                v441 = v713[18];
                v684[0] = v675;
                v684[1] = v676;
                *(_QWORD *)&v684[2] = v677;
                v600 = 0uLL;
                *((_QWORD *)&v599 + 1) = 0;
                LODWORD(v601) = 0;
                *((_QWORD *)&v601 + 1) = 0;
                *(_QWORD *)&v602 = 0;
                v603 = 0uLL;
                *(_QWORD *)((char *)&v604 + 4) = 2;
                LODWORD(v599) = 0;
                v605 = 0u;
                v606 = 0u;
                sub_22E3C113C((uint64_t)&v599, (__int128 *)v731, v437, 2, v684, v441);
                v596 = v702;
                v597 = v703;
                v598 = v704;
                v592 = *(_OWORD *)&v699[32];
                v593 = *(_OWORD *)&v699[48];
                v594 = v700;
                v595 = v701;
                v590 = *(_OWORD *)v699;
                v591 = *(_OWORD *)&v699[16];
                sub_22E4EF4B8(v705, &v599, &v590, *(_QWORD *)(v424 + 8), 0, 0);
                break;
              case 1:
                v734 = v702;
                v735 = v703;
                v736 = v704;
                *(_OWORD *)&v731[32] = *(_OWORD *)&v699[32];
                *(_OWORD *)&v731[48] = *(_OWORD *)&v699[48];
                v732 = v700;
                v733 = v701;
                *(_OWORD *)v731 = *(_OWORD *)v699;
                *(_OWORD *)&v731[16] = *(_OWORD *)&v699[16];
                *(_QWORD *)&v684[0] = v705;
                *((_QWORD *)&v684[0] + 1) = &v715;
                LOWORD(v684[1]) = 0;
                v442 = sub_22E5027E0((uint64_t)v684, (uint64_t)v731, v548);
                v444 = v443;
                v445 = *(_QWORD *)(v424 + 8);
                sub_22E6281E0(v713, v445, (uint64_t)&v675);
                *(_QWORD *)v731 = v429;
                *(_QWORD *)&v731[8] = v427;
                *(_QWORD *)&v731[16] = v430;
                *(_DWORD *)&v731[24] = 0;
                *(_QWORD *)&v731[32] = 0;
                *(_QWORD *)&v731[40] = 0;
                v446 = v713[18];
                v684[0] = v675;
                v684[1] = v676;
                *(_QWORD *)&v684[2] = v677;
                v609 = 0uLL;
                *((_QWORD *)&v608 + 1) = 0;
                LODWORD(v610) = 0;
                *((_QWORD *)&v610 + 1) = 0;
                *(_QWORD *)&v611 = 0;
                v612 = 0uLL;
                *(_QWORD *)((char *)&v613 + 4) = 2;
                LODWORD(v608) = 0;
                v614 = 0u;
                v615 = 0u;
                sub_22E3C113C((uint64_t)&v608, (__int128 *)v731, v445, 2, v684, v446);
                *(_QWORD *)&v684[0] = v705;
                *((_QWORD *)&v684[0] + 1) = &v715;
                LOWORD(v684[1]) = 0;
                v734 = v614;
                v735 = v615;
                v736 = v616;
                *(_OWORD *)&v731[32] = v610;
                *(_OWORD *)&v731[48] = v611;
                v732 = v612;
                v733 = v613;
                *(_OWORD *)v731 = v608;
                *(_OWORD *)&v731[16] = v609;
                sub_22E5025C8((uint64_t *)v684, v442, v444, (uint64_t)v731, 0);
                break;
              case 0:
                v630 = v702;
                v631 = v703;
                v632 = v704;
                v626 = *(_OWORD *)&v699[32];
                v627 = *(_OWORD *)&v699[48];
                v629 = v701;
                v628 = v700;
                v625 = *(_OWORD *)&v699[16];
                v624 = *(_OWORD *)v699;
                v439 = sub_22F25F748((uint64_t)v705, (uint64_t)&v624, v548);
                v620 = v429;
                *(_QWORD *)&v621 = v427;
                *((_QWORD *)&v621 + 1) = v430;
                LODWORD(v622) = 0;
                *((_QWORD *)&v622 + 1) = 0;
                v623 = 0;
                v440 = *(_QWORD *)(v424 + 8);
                LODWORD(v617) = 0;
                v618 = 0u;
                v619 = 0u;
                sub_22E4E8134((uint64_t)v705, v439, (uint64_t)&v620, 0, v440, 2, (uint64_t)&v617, 0, 0);
                break;
            }
            ++v422;
            v423 -= 8;
          }
          while (v423);
        }
        sub_22E619DE8((uint64_t)v705, 0);
        sub_22E619434((uint64_t)v705);
        if (v723 != &v725)
          free(v723);
        v447 = (uint64_t *)v513[1];
        v448 = v447[18];
        v449 = *(_QWORD *)(v448 + 16816);
        sub_22EA41AB8((uint64_t)&v633, 62, 0, v548);
        *((_QWORD *)&v635 + 1) = 0;
        v636 = v449;
        v637 = 0;
        v638 = v511;
        v639 = v448 | 2;
        v640 = &v633;
        v641 = 0;
        *(_QWORD *)&v633 = &off_24FAC3008;
        v642 = 1310720;
        HIDWORD(v634) |= 0x200u;
        v450 = *(_QWORD *)(v448 + 16480);
        sub_22EA41AB8((uint64_t)&v624, 62, 0, v548);
        *((_QWORD *)&v626 + 1) = 0;
        v627 = (unint64_t)v450;
        LODWORD(v628) = v511;
        *((_QWORD *)&v628 + 1) = v448 | 2;
        v629 = (unint64_t)&v624;
        *(_QWORD *)&v624 = &off_24FAC3008;
        LODWORD(v630) = 1310720;
        HIDWORD(v625) |= 0x200u;
        v451 = *(_QWORD *)(v448 + 16816);
        sub_22EA41AB8((uint64_t)&v608, 62, 0, v548);
        *((_QWORD *)&v610 + 1) = 0;
        v611 = (unint64_t)v451;
        LODWORD(v612) = v511;
        *((_QWORD *)&v612 + 1) = v448 | 2;
        v613 = (unint64_t)&v608;
        *(_QWORD *)&v608 = &off_24FAC3008;
        LODWORD(v614) = 1310720;
        HIDWORD(v609) |= 0x200u;
        v723 = &v725;
        v725 = &v633;
        v726 = &v624;
        *(_QWORD *)&v727 = &v608;
        v724 = 0x1000000003;
        v452 = sub_22F24E348((uint64_t)(v447 + 35), *(_QWORD *)(v448 + 16392), (uint64_t *)&v723);
        v453 = sub_22E46F2EC((uint64_t)(v447 + 35), v452);
        *(_QWORD *)v705 = "_omp_reduction_global_to_list_reduce_func";
        *(_WORD *)&v705[32] = 259;
        v454 = v447[25];
        v455 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x78);
        MEMORY[0x23489F6FC](v455, v453, 7, 0xFFFFFFFFLL, v705, v454);
        sub_22E62BF18(v447, 0, 0, v455, v452);
        llvm::Function::addFnAttr();
        sub_22E618EBC((uint64_t)v705, (uint64_t)v447, 0);
        sub_22E61A8FC((uint64_t)v705, 0, 0, *(_QWORD *)(v448 + 16392), v455, v452, (uint64_t *)&v723, v548, v456, v548);
        *(_QWORD *)v699 = &v633;
        *(_QWORD *)v731 = 0;
        v457 = sub_22E3CED3C(v721, v699, v731);
        v458 = *(_QWORD *)v731;
        if (!v457)
          v458 = v721[0] + 56 * v722;
        v590 = *(_OWORD *)(v458 + 8);
        v591 = *(_OWORD *)(v458 + 24);
        v592 = *(_OWORD *)(v458 + 40);
        v564 = sub_22EF6477C(v448, v543);
        sub_22E66C868((uint64_t)(v447 + 35), v564, 0);
        v567 = (uint64_t *)v448;
        v459 = *(_QWORD *)(v448 + 16816);
        *(_OWORD *)v731 = v590;
        *(_OWORD *)&v731[16] = v591;
        *(_OWORD *)&v731[32] = v592;
        sub_22E6281E0(v713, v459, (uint64_t)v699);
        v460 = sub_22E4E6994((uint64_t)v705, (uint64_t)v731, 0, v459, v548, 2, (uint64_t)v699, 0);
        v461 = llvm::PointerType::get();
        *(_WORD *)&v731[32] = 257;
        v559 = sub_22E3C1338(&v715, v460, v461, (uint64_t)v731);
        *(_QWORD *)v731 = ".omp.reduction.red_list";
        *(_WORD *)&v731[32] = 259;
        v462 = sub_22F25E4D4((uint64_t)v705, v512, (uint64_t)v731, 0);
        v576 = 0;
        if (v462 <= 7)
          v464 = 0;
        else
          v464 = (uint64_t *)(v462 & 0xFFFFFFFFFFFFFFF8);
        v465 = (unint64_t)v463 & 0xFFFFFFFFFFFFFFF8;
        if (v462 <= 7)
          v465 = 0;
        v573 = v465;
        if (v462 >= 8)
          v576 = 1 << (v463 & 7 | (8 * (v462 & 7u)));
        *(_QWORD *)&v693[4] = 0;
        *(_QWORD *)&v693[12] = 0;
        *(_QWORD *)&v690 = llvm::Constant::getNullValue(*(llvm::Constant **)&v705[24], v463);
        *(_QWORD *)v699 = &v624;
        *(_QWORD *)v731 = 0;
        v466 = sub_22E3CED3C(v721, v699, v731);
        v467 = v721[0] + 56 * v722;
        if (v466)
          v467 = *(_QWORD *)v731;
        v667 = *(_OWORD *)(v467 + 40);
        v666 = *(_OWORD *)(v467 + 24);
        v665 = *(_OWORD *)(v467 + 8);
        v468 = *(_QWORD *)(v448 + 16480);
        *(_OWORD *)v731 = v665;
        *(_OWORD *)&v731[16] = v666;
        *(_OWORD *)&v731[32] = v667;
        sub_22E6281E0(v713, v468, (uint64_t)v699);
        *((_QWORD *)&v690 + 1) = sub_22E4E6994((uint64_t)v705, (uint64_t)v731, 0, v468, v548, 2, (uint64_t)v699, 0);
        v469 = v529;
        if (v529)
        {
          LODWORD(v470) = 0;
          v471 = v515;
          do
          {
            *(_QWORD *)&v646 = v464;
            *((_QWORD *)&v646 + 1) = v573;
            *(_QWORD *)v647 = v576;
            *(_DWORD *)&v647[8] = 0;
            *(_OWORD *)&v647[12] = *(_OWORD *)v693;
            *(_DWORD *)&v647[28] = *(_DWORD *)&v693[16];
            *(_WORD *)&v731[32] = 257;
            sub_22E486A58(&v715, (uint64_t)&v646, v470, (uint64_t)v731, (uint64_t)&v655);
            v472 = *(_QWORD *)(*v471 + 16);
            *(_QWORD *)v731 = 0;
            v473 = 0;
            if (sub_22F2891B4((uint64_t)v686, v472, v731))
              v473 = *(_QWORD *)(*(_QWORD *)v731 + 8);
            sub_22E619C24(v559, v564, 0, 0, (uint64_t)v705, (uint64_t)v699);
            sub_22E4DD05C((uint64_t)v705, (uint64_t)v699, v473, (uint64_t)v731);
            v681 = *(_OWORD *)&v731[8];
            v682 = *(_OWORD *)&v731[24];
            v683 = *(_OWORD *)&v731[40];
            v474 = *(_QWORD *)&v731[16];
            if ((v731[32] & 3) != 0)
              v475 = (uint64_t *)sub_22F28ABCC(&v681, v705);
            else
              v475 = (uint64_t *)v681;
            LOWORD(v601) = 257;
            v476 = (uint64_t *)sub_22E486CB4(&v715, v474, v475, (uint64_t **)&v690, 2, (uint64_t)&v599);
            v477 = sub_22F25E214(v705, v476);
            v599 = v655;
            v600 = v656;
            v601 = v657;
            v478 = v567[2102];
            sub_22E6281E0(v713, v478, (uint64_t)&v643);
            sub_22E4E8134((uint64_t)v705, v477, (uint64_t)&v599, 0, v478, 2, (uint64_t)&v643, 0, 0);
            if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v471 + 8) & 0xFFFFFFFFFFFFFFF0) + 17) & 8) != 0)
            {
              v470 = (v470 + 1);
              *(_QWORD *)&v697 = v464;
              *((_QWORD *)&v697 + 1) = v573;
              *(_QWORD *)v698 = v576;
              *(_DWORD *)&v698[8] = 0;
              *(_OWORD *)&v698[12] = *(_OWORD *)v693;
              *(_DWORD *)&v698[28] = *(_DWORD *)&v693[16];
              LOWORD(v645) = 257;
              sub_22E486A58(&v715, (uint64_t)&v697, v470, (uint64_t)&v643, (uint64_t)&v599);
              v655 = v599;
              v656 = v600;
              v657 = v601;
              v479 = sub_22EF5C728(v713[18], *(_QWORD *)(*v471 + 8));
              if (v479)
              {
                if (*(_BYTE *)(v479 + 16) == 5)
                  v480 = v479;
                else
                  v480 = 0;
              }
              else
              {
                v480 = 0;
              }
              v481 = sub_22F297878((uint64_t)v705, v480);
              LOWORD(v601) = 257;
              v482 = sub_22E3BF45C(&v715, (uint64_t)v481, v710, 0, (uint64_t)&v599);
              LOWORD(v601) = 257;
              v483 = (llvm::Type **)sub_22E3C1740(&v715, 48, v482, v711, (uint64_t)&v599);
              v678 = v655;
              v679 = v656;
              v680 = v657;
              sub_22E3BEDDC((uint64_t)&v715, v483, (uint64_t)&v678);
            }
            ++v471;
            LODWORD(v470) = v470 + 1;
            --v469;
          }
          while (v469);
        }
        v484 = sub_22F25E214(v705, v464);
        *(_QWORD *)&v599 = &v608;
        *(_QWORD *)v731 = 0;
        v485 = sub_22E3CED3C(v721, &v599, v731);
        v486 = v721[0] + 56 * v722;
        if (v485)
          v486 = *(_QWORD *)v731;
        v601 = *(_OWORD *)(v486 + 40);
        v600 = *(_OWORD *)(v486 + 24);
        v599 = *(_OWORD *)(v486 + 8);
        v487 = v567[2102];
        *(_OWORD *)v731 = v599;
        *(_OWORD *)&v731[16] = v600;
        *(_OWORD *)&v731[32] = v601;
        sub_22E6281E0(v713, v487, (uint64_t)&v655);
        v488 = sub_22E4E6994((uint64_t)v705, (uint64_t)v731, 0, v487, v548, 2, (uint64_t)&v655, 0);
        v489 = 0;
        v490 = v447[101];
        if (v507)
          v489 = *((_QWORD *)v507 + 3);
        *(_QWORD *)v731 = v488;
        *(_QWORD *)&v731[8] = v484;
        (*(void (**)(uint64_t, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v490 + 568))(v490, v705, v548, v489);
        sub_22E619DE8((uint64_t)v705, 0);
        sub_22E619434((uint64_t)v705);
        v285 = v513;
        if (v723 != &v725)
          free(v723);
        *(_OWORD *)v705 = v506;
        *(_QWORD *)&v705[16] = v526;
        llvm::Type::getInt32Ty(*(llvm::Type **)(v517 + 336), v491);
        *(_QWORD *)&v705[24] = llvm::ConstantInt::get();
        *(_QWORD *)&v705[32] = v505;
        *(_QWORD *)&v705[40] = v504;
        *(_QWORD *)&v705[48] = v503;
        v706 = v524;
        v707 = v522;
        v708 = v521;
        v709 = v455;
        v492 = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
        LOWORD(v727) = 257;
        v284 = (uint64_t *)sub_22E479C7C(v517, v492, v493, (uint64_t)v705, 11, (uint64_t)&v723);
        if (v685[0] != &v685[2])
          free(v685[0]);
        if (((uint64_t)v686[0] & 1) == 0)
          llvm::deallocate_buffer(v686[1], (void *)(16 * v687));
        v280 = (_QWORD *)v517;
        v281 = *((_QWORD *)&v506 + 1);
        goto LABEL_259;
      }
      v289 = &v685[2];
      v288 = v514;
    }
    else
    {
      LODWORD(v685[1]) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v289 = (void **)v685[0];
    }
    bzero(v289, 8 * v288);
    v291 = 0;
    LODWORD(v685[1]) = v288;
    do
    {
      *(_QWORD *)((char *)v685[0] + v291 * 8) = *(_QWORD *)(v515[v291] + 16);
      ++v291;
    }
    while (v288 != v291);
    v287 = (unint64_t *)v685[0];
    v290 = v514;
    goto LABEL_141;
  }
  v281 = *((_QWORD *)&v506 + 1);
  *(_OWORD *)v705 = v506;
  llvm::Type::getInt32Ty(*(llvm::Type **)(v517 + 336), v278);
  *(_QWORD *)&v705[16] = llvm::ConstantInt::get();
  *(_QWORD *)&v705[24] = v501;
  *(_QWORD *)&v705[32] = v505;
  *(_QWORD *)&v705[40] = v504;
  *(_QWORD *)&v705[48] = v503;
  v282 = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
  LOWORD(v727) = 257;
  v284 = (uint64_t *)sub_22E479C7C(v517, v282, v283, (uint64_t)v705, 7, (uint64_t)&v723);
  v285 = v513;
LABEL_259:
  *(_QWORD *)v705 = ".omp.reduction.done";
  *(_WORD *)&v705[32] = 259;
  v494 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  *(_QWORD *)v705 = ".omp.reduction.then";
  *(_WORD *)&v705[32] = 259;
  v495 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v496 = llvm::ConstantInt::get();
  *(_WORD *)&v705[32] = 257;
  v497 = sub_22E3C18F4((uint64_t)v516, 32, v284, v496, (uint64_t)v705);
  v498 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x23489C09C](v498, v495, v494, v497, 0);
  *(_WORD *)&v705[32] = 257;
  sub_22E3C12C8(v516, v498, (uint64_t)v705);
  sub_22E5ED9B4(v280, v495, 0);
  v723 = v515;
  v724 = v514;
  v725 = (__int128 *)v508;
  v726 = (__int128 *)v509;
  v727 = a9;
  v728 = a10;
  v729 = a11;
  v730 = v285;
  *(_QWORD *)v699 = v281;
  *(_QWORD *)v731 = &v723;
  *(_QWORD *)&v731[8] = sub_22E5DE724;
  v499 = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
  memset(&v705[8], 0, 32);
  *(_QWORD *)v705 = off_24FA665B8;
  *(_QWORD *)&v705[40] = v499;
  *(_QWORD *)&v705[48] = v500;
  v706 = (llvm::Value *)v699;
  v707 = 1;
  LOBYTE(v708) = 0;
  v709 = 0;
  *(_QWORD *)&v731[16] = v705;
  sub_22F27B464(v731, (uint64_t)v280);
  v577[0] = 0;
  v577[1] = (uint64_t)v280;
  sub_22E48EE24(v577, 0, 1);
  sub_22E48F084(v577);
  sub_22E5ED9B4(v280, v494, 1);
  if (v589 >= 0x41)
  {
    if (v588)
      MEMORY[0x2348A0E84](v588, 0x1000C8000313F17);
  }
}

double sub_22E5D94EC@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, __int128 *a4@<X8>)
{
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  llvm::LLVMContext *v14;
  unint64_t v15;
  llvm::PointerType ***v16;
  uint64_t v17;
  llvm::PointerType ***v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[40];
  __int128 v33;
  __int128 v34;
  __int128 v35;

  *(_QWORD *)&v29 = a3;
  *(_QWORD *)&v33 = 0;
  v8 = sub_22E3CED3C((uint64_t *)(a1 + 2904), &v29, &v33);
  v9 = v33;
  if (!v8)
    v9 = *(_QWORD *)(a1 + 2904) + 56 * *(unsigned int *)(a1 + 2920);
  v29 = *(_OWORD *)(v9 + 8);
  v30 = *(_OWORD *)(v9 + 24);
  v31 = *(_OWORD *)(v9 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v28 = 0;
  v11 = sub_22E491354((unsigned int *)&v28, v10);
  if ((*(_BYTE *)(v11 + 18) & 0x10) != 0)
  {
    do
    {
      while (1)
      {
        v11 = *(_QWORD *)(*(_QWORD *)(v11 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (!v11)
          break;
        v12 = *(_DWORD *)(v11 + 16);
        if ((v12 & 0xFE) != 0x28)
          break;
        if ((v12 & 0x100000) == 0)
          goto LABEL_9;
      }
      v11 = sub_22F10CF48(v11);
    }
    while ((*(_DWORD *)(v11 + 16) & 0x100000) != 0);
  }
LABEL_9:
  v13 = *(_QWORD **)(a1 + 144);
  v14 = (llvm::LLVMContext *)sub_22EF5CF80(v13[18], *(_QWORD *)(v11 + 32));
  v15 = *(_QWORD *)(a3 + 48);
  v33 = v29;
  v34 = v30;
  v35 = v31;
  sub_22E6281E0(v13, v15, (uint64_t)v32);
  v16 = (llvm::PointerType ***)sub_22E4E6994(a1, (uint64_t)&v33, 0, v15, 0, 2, (uint64_t)v32, 0);
  if ((*v16)[3])
    v17 = llvm::PointerType::get();
  else
    v17 = llvm::PointerType::get(**v16, 0);
  LOWORD(v35) = 257;
  v18 = (llvm::PointerType ***)sub_22E3C1338((uint64_t *)(a1 + 272), (uint64_t)v16, v17, (uint64_t)&v33);
  if ((*v18)[3])
    v19 = llvm::PointerType::get();
  else
    v19 = llvm::PointerType::get(**v18, v14);
  LOWORD(v35) = 257;
  v20 = sub_22E3C1338((uint64_t *)(a1 + 272), (uint64_t)v18, v19, (uint64_t)&v33);
  *(_QWORD *)&v33 = "tmp";
  LOWORD(v35) = 259;
  v21 = sub_22F25E4D4(a1, v10, (uint64_t)&v33, 0);
  v23 = 0;
  v24 = v21 & 0xFFFFFFFFFFFFFFF8;
  if (v21 <= 7)
    v24 = 0;
  v25 = v22 & 0xFFFFFFFFFFFFFFF8;
  if (v21 <= 7)
    v25 = 0;
  *(_QWORD *)a4 = v24;
  *((_QWORD *)a4 + 1) = v25;
  if (v21 >= 8)
    v23 = 1 << (v22 & 7 | (8 * (v21 & 7)));
  *((_QWORD *)a4 + 2) = v23;
  *((_DWORD *)a4 + 6) = 0;
  *((_QWORD *)a4 + 4) = 0;
  *((_QWORD *)a4 + 5) = 0;
  v26 = a4[1];
  v33 = *a4;
  v34 = v26;
  v35 = a4[2];
  sub_22E6281E0(*(_QWORD **)(a1 + 144), v10, (uint64_t)v32);
  return sub_22E4E8134(a1, v20, (uint64_t)&v33, 0, v10, 2, (uint64_t)v32, 0, 0);
}

uint64_t sub_22E5D9770(uint64_t a1, unint64_t *a2, unint64_t a3, unint64_t a4, unsigned int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _BOOL8 v30;
  int v32;
  __int128 v33;
  __int128 v34;
  _QWORD v35[3];
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  __int128 v40;
  __int128 v41;
  _OWORD v42[3];
  _BYTE v43[32];
  __int16 v44;
  __int128 v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD v50[2];
  __int128 v51;

  v10 = sub_22E66C868(*(_QWORD *)(a1 + 144) + 280, a4, 0);
  if (a3 != a4)
  {
    v11 = v10;
    sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0), (uint64_t)v50);
    v12 = *(_QWORD *)&v50[0];
    v13 = (uint64_t *)(a4 & 0xFFFFFFFFFFFFFFF0);
    sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0), (uint64_t)v50);
    if (v12 == *(_QWORD *)&v50[0])
    {
      LOWORD(v51) = 257;
      return sub_22E3C1740((uint64_t *)(a1 + 272), 49, (uint64_t)a2, v11, (uint64_t)v50);
    }
    v15 = *(_QWORD *)(*(_QWORD *)(*v13 + 8) & 0xFFFFFFFFFFFFFFF0);
    v16 = *(_DWORD *)(v15 + 16);
    if (v15)
      v17 = v16 == 11;
    else
      v17 = 0;
    if (v17)
    {
      if (((*(_DWORD *)(v15 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
        goto LABEL_26;
    }
    else if (v15 && v16 == 44)
    {
      v18 = sub_22F114198(*(_QWORD *)(v15 + 24));
      if ((*(_BYTE *)(v18 + 74) & 1) == 0 && *(_QWORD *)(v18 + 128) <= 7uLL
        || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v15 + 24)) + 76) & 0x80) != 0)
      {
        goto LABEL_26;
      }
    }
    else if (v16 != 9)
    {
      goto LABEL_26;
    }
    v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v20 = *(_DWORD *)(v19 + 16);
    if (v19)
      v21 = v20 == 11;
    else
      v21 = 0;
    if (v21)
    {
      if (((*(_DWORD *)(v19 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
        goto LABEL_36;
    }
    else
    {
      if (v19 && v20 == 44)
      {
        v22 = sub_22F114198(*(_QWORD *)(v19 + 24));
        if ((*(_BYTE *)(v22 + 74) & 1) == 0 && *(_QWORD *)(v22 + 128) <= 7uLL
          || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v19 + 24)) + 76) & 0x80) != 0)
        {
          goto LABEL_26;
        }
LABEL_36:
        v30 = sub_22F110B20(*v13);
        LOWORD(v51) = 257;
        return sub_22E3BF45C((uint64_t *)(a1 + 272), (uint64_t)a2, v11, v30, (uint64_t)v50);
      }
      if (v20 == 9)
        goto LABEL_36;
    }
LABEL_26:
    *(_QWORD *)&v50[0] = "tmp";
    LOWORD(v51) = 259;
    v23 = sub_22F25E4D4(a1, a4, (uint64_t)v50, 0);
    v25 = 0;
    if (v23 <= 7)
      v26 = 0;
    else
      v26 = v23 & 0xFFFFFFFFFFFFFFF8;
    if (v23 <= 7)
      v27 = 0;
    else
      v27 = v24 & 0xFFFFFFFFFFFFFFF8;
    if (v23 >= 8)
      v25 = 1 << (v24 & 7 | (8 * (v23 & 7)));
    *(_QWORD *)&v45 = v26;
    *((_QWORD *)&v45 + 1) = v27;
    v46 = v25;
    v47 = 0;
    v48 = 0;
    v49 = 0;
    llvm::PointerType::get();
    v28 = llvm::PointerType::get();
    v29 = *a2;
    v44 = 257;
    sub_22F245864((uint64_t *)(a1 + 272), &v45, v28, v29, (uint64_t)v43, (uint64_t)v50);
    v42[0] = v50[0];
    v42[1] = v50[1];
    v42[2] = v51;
    v39 = 0;
    v40 = 0u;
    v41 = 0u;
    sub_22E4E8134(a1, (uint64_t)a2, (uint64_t)v42, 0, a3, 2, (uint64_t)&v39, 0, 0);
    v35[0] = v26;
    v35[1] = v27;
    v35[2] = v25;
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v32 = 0;
    v33 = 0u;
    v34 = 0u;
    return sub_22E4E6994(a1, (uint64_t)v35, 0, a4, a5, 2, (uint64_t)&v32, 0);
  }
  return (uint64_t)a2;
}

uint64_t sub_22E5D9AC0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  _DWORD *v7;
  char v8;
  _BYTE *v9;
  unint64_t v10;
  int v11;
  unsigned int v12;
  __n128 v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  const void **v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t (**v20)();
  uint64_t (*v21)();
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t *v28;
  const void *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t (***v32)();
  uint64_t v33;
  uint64_t (**v34)();
  char v35;
  uint64_t v36;
  _OWORD *v37;
  __int128 v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t (**v43)();
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t (**v49)();
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _QWORD v53[10];
  int v54;
  _QWORD v55[14];
  __int16 v56;
  char v57[8];
  uint64_t v58;
  unint64_t *v59;
  unint64_t *v60;
  _BYTE *v61;
  _BYTE *v62;
  unint64_t *v63;
  unint64_t *v64;
  uint64_t v65;
  unint64_t v66;
  _QWORD v67[12];

  v67[10] = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 152) + 76) & 0x10) != 0)
    return result;
  v5 = result;
  if (a3 && (*(_DWORD *)(a3 + 28) & 0x7Eu) - 58 > 0xFFFFFFF9 || (v6 = *(_DWORD *)(a3 + 28) & 0x7F, a3) && v6 == 1)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 64))(a3);
    v7 = (_DWORD *)result;
  }
  else
  {
    if (!a3 || v6 != 2)
      return result;
    v7 = (_DWORD *)(*(_QWORD *)(a3 + 80) & 0xFFFFFFFFFFFFFFF8);
    if (*(_DWORD *)(*(_QWORD *)(a2 + 1856) + 8) == 2)
    {
      if (!*(_DWORD *)(result + 4472))
        return result;
      v8 = 1;
      if (!v7)
        return result;
      goto LABEL_8;
    }
  }
  v8 = 0;
  if (!v7)
    return result;
LABEL_8:
  v9 = (_BYTE *)(v5 + 4478);
  sub_22E5D9F28((uint64_t)v57, a2, *(_QWORD **)(v5 + 5864), *(unsigned int *)(v5 + 5872));
  sub_22E5DA0E0((uint64_t)v57, v7);
  v10 = v66;
  if (!v66)
  {
    v11 = *v9;
    v12 = *(_DWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v58 + 152) + 696))(*(_QWORD *)(v58 + 152)) + 4);
    if (v11)
      v14 = 0;
    else
      v14 = v60 - v59;
    if (v11)
      v15 = 0;
    else
      v15 = v59;
    if (v11)
      v16 = v60 - v59;
    else
      v16 = 0;
    if (v11)
      v17 = (const void **)v59;
    else
      v17 = 0;
    v10 = sub_22E5D30CC(*(_QWORD *)(*(_QWORD *)(v58 + 144) + 144), v15, v14, v17, v16, (uint64_t)v67, v12, v13);
    v66 = v10;
  }
  *(_QWORD *)(v5 + 5856) = 0;
  *(_DWORD *)(v5 + 5872) = 0;
  v18 = v61;
  v19 = v62 - v61;
  if (v10 || v62 != v61)
  {
    sub_22F288760((uint64_t)&v49, v5 + 4504, (uint64_t *)(a2 + 1624));
    v20 = v49;
    v21 = (uint64_t (*)())operator new();
    *(_OWORD *)v21 = 0u;
    *((_OWORD *)v21 + 1) = 0u;
    *((_OWORD *)v21 + 2) = 0u;
    v22 = (uint64_t)v20[39];
    v20[39] = v21;
    if (v22)
    {
      v23 = sub_22F283FFC(v22);
      MEMORY[0x2348A0E9C](v23, 0x1020C40355347DDLL);
    }
    if (v64 == v63)
      v24 = (unsigned int *)&v65 + 1;
    else
      v24 = (unsigned int *)&v65;
    v25 = *v24;
    v43 = v20;
    if ((_DWORD)v25)
    {
      v26 = 8 * v25;
      v27 = v64;
      while (*v27 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v27;
        v26 -= 8;
        if (!v26)
          goto LABEL_49;
      }
    }
    else
    {
      v27 = v64;
    }
    v28 = &v64[v25];
    if (v27 != v28)
    {
      v29 = (const void *)*v27;
LABEL_45:
      sub_22E3BA850((uint64_t)(v43 + 14), v29);
      v30 = v27 + 1;
      while (v30 != v28)
      {
        v31 = *v30++;
        v29 = (const void *)v31;
        if (v31 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v27 = v30 - 1;
          goto LABEL_45;
        }
      }
    }
LABEL_49:
    sub_22F2633B0((uint64_t)(v43 + 22), v18, &v18[8 * (v19 >> 3)]);
    v32 = (uint64_t (***)())v59;
    if (v60 != v59)
    {
      v33 = 8 * (v60 - v59);
      do
      {
        v34 = *v32++;
        v49 = v34;
        v50 = 0u;
        v51 = 0u;
        v52 = 0u;
        v53[0] = 0;
        sub_22F28881C((uint64_t)(v43 + 1), &v49);
        v33 -= 8;
      }
      while (v33);
    }
    if (*v9)
      v35 = 1;
    else
      v35 = v8;
    if ((v35 & 1) == 0 && !*(_BYTE *)(v5 + 4479))
    {
      v49 = &off_24FA665E8;
      v50 = (unint64_t)a2;
      *(_QWORD *)&v51 = 0;
      DWORD2(v51) = 0;
      memset(&v53[4], 0, 24);
      v52 = 0u;
      memset(v53, 0, 28);
      v53[7] = v55;
      v53[8] = v55;
      v53[9] = 4;
      v54 = 0;
      v55[4] = 0;
      v36 = 24;
      v55[5] = 1;
      do
      {
        (&v49)[v36] = (uint64_t (**)())-4096;
        v36 += 2;
      }
      while (v36 != 32);
      v56 = 0;
      sub_22E5DA0E0((uint64_t)&v49, v7);
      v37 = v43 + 7;
      if (*((_BYTE *)v43 + 104))
        sub_22F244D40((uint64_t)(v43 + 7));
      v38 = 0uLL;
      *(_OWORD *)(v43 + 9) = 0u;
      *(_OWORD *)(v43 + 11) = 0u;
      *v37 = 0u;
      *((_BYTE *)v43 + 104) = 1;
      v39 = (uint64_t *)v52;
      if (*((_QWORD *)&v52 + 1) != (_QWORD)v52)
      {
        v40 = 8 * ((uint64_t)(*((_QWORD *)&v52 + 1) - v52) >> 3);
        do
        {
          v41 = *v39++;
          v44 = v41;
          v45 = v38;
          v46 = v38;
          v47 = v38;
          v48 = 0;
          sub_22F28881C((uint64_t)v37, &v44);
          v38 = 0uLL;
          v40 -= 8;
        }
        while (v40);
      }
      sub_22E5DA488((uint64_t)&v49);
    }
    if ((v8 & 1) == 0)
    {
      v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
      sub_22E5D1260(v5, a2, v42);
      *(_QWORD *)sub_22E4899EC(a2 + 1984, 3u, 8) = off_24FA66608;
    }
  }
  return sub_22E5DA488((uint64_t)v57);
}

uint64_t sub_22E5D9F28(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[24];

  *(_QWORD *)a1 = &off_24FA665E8;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = a1 + 16;
  *(_QWORD *)(a1 + 40) = 0;
  v6 = (_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  if (a4)
  {
    v7 = a3;
    v8 = &a3[a4];
    do
    {
      sub_22F2782A4((uint64_t)v22, v5, v7);
      if (v22[16])
      {
        v10 = *(_QWORD **)(a1 + 48);
        v9 = *(_QWORD *)(a1 + 56);
        if ((unint64_t)v10 >= v9)
        {
          v12 = (_QWORD *)*v6;
          v13 = ((uint64_t)v10 - *v6) >> 3;
          v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 61)
            abort();
          v15 = v9 - (_QWORD)v12;
          if (v15 >> 2 > v14)
            v14 = v15 >> 2;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
            v16 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v16 = v14;
          if (v16)
          {
            if (v16 >> 61)
              sub_22E3B3F8C();
            v17 = (char *)operator new(8 * v16);
          }
          else
          {
            v17 = 0;
          }
          v18 = &v17[8 * v13];
          *(_QWORD *)v18 = *v7;
          v11 = v18 + 8;
          if (v10 != v12)
          {
            do
            {
              v19 = *--v10;
              *((_QWORD *)v18 - 1) = v19;
              v18 -= 8;
            }
            while (v10 != v12);
            v10 = (_QWORD *)*v6;
          }
          *(_QWORD *)(a1 + 40) = v18;
          *(_QWORD *)(a1 + 48) = v11;
          *(_QWORD *)(a1 + 56) = &v17[8 * v16];
          if (v10)
            operator delete(v10);
        }
        else
        {
          *v10 = *v7;
          v11 = v10 + 1;
        }
        *(_QWORD *)(a1 + 48) = v11;
      }
      ++v7;
    }
    while (v7 != v8);
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = a1 + 144;
  *(_QWORD *)(a1 + 120) = a1 + 144;
  *(_QWORD *)(a1 + 128) = 4;
  *(_DWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  v20 = 192;
  *(_QWORD *)(a1 + 184) = 1;
  do
  {
    *(_QWORD *)(a1 + v20) = -4096;
    v20 += 16;
  }
  while (v20 != 256);
  *(_WORD *)(a1 + 256) = 0;
  return a1;
}

void sub_22E5DA0E0(uint64_t a1, _DWORD *a2)
{
  int v2;

  v2 = *(unsigned __int8 *)a2;
  if (a2 && (v2 & 0xFE) == 0x70)
  {
    switch((*a2 >> 18) & 0x3F)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
        sub_22E5DDDCC(a1, a2);
        return;
      default:
        goto LABEL_5;
    }
  }
  if (!a2 || v2 != 233)
LABEL_5:
    __asm { BR              X10 }
  sub_22E5DD62C(a1, (uint64_t)a2);
}

void sub_22E5DA214()
{
  unsigned int *v0;
  uint64_t v1;

  sub_22E5DD580(v1, v0);
}

void sub_22E5DA230()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = *(unsigned int *)(v0 + 8);
  if ((_DWORD)v2)
  {
    v3 = (uint64_t *)(v0 + (8 * v2 + 40));
    v4 = 16 * v2;
    do
    {
      v5 = *v3;
      if ((*v3 & 6) == 2)
      {
        v6 = v5 & 0xFFFFFFFFFFFFFFF8;
        sub_22E5DD76C(v1, (_DWORD *)(v5 & 0xFFFFFFFFFFFFFFF8));
        if ((*(_DWORD *)(v6 + 28) & 0x7F) == 0x3F)
          sub_22E5DDA64(v1, v6);
      }
      v3 += 2;
      v4 -= 16;
    }
    while (v4);
  }
}

void sub_22E5DA294()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v0 + 8);
  if ((v2 & 1) != 0)
  {
    v3 = (uint64_t *)((v2 & 0xFFFFFFFFFFFFFFFELL) + 8);
    v4 = &v3[*(unsigned int *)(v2 & 0xFFFFFFFFFFFFFFFELL)];
  }
  else
  {
    if (v2)
      v3 = (uint64_t *)(v0 + 8);
    else
      v3 = 0;
    if (v2)
      v4 = (uint64_t *)(v0 + 16);
    else
      v4 = 0;
  }
  while (v3 != v4)
  {
    v5 = *v3;
    if (*v3)
    {
      if ((*(_DWORD *)(v5 + 28) & 0x7Fu) - 48 <= 0x1A)
        sub_22E5DDA64(v1, v5);
    }
    ++v3;
  }
  JUMPOUT(0x22E5DA3D8);
}

void sub_22E5DA2B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(unsigned int *)(v2 + 112);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)(v2 + 104);
    v5 = 16 * v3;
    do
    {
      v6 = *v4;
      if ((*v4 & 2) != 0)
      {
        v7 = v6 & 0xFFFFFFFFFFFFFFF8;
        sub_22E5DD76C(v1, (_DWORD *)(v6 & 0xFFFFFFFFFFFFFFF8));
        if ((*(_DWORD *)(v7 + 28) & 0x7F) == 0x3F
          || (*(_DWORD *)(v7 + 28) & 0x7F) != 0x40 && (*(_BYTE *)(v7 + 98) & 1) != 0)
        {
          sub_22E5DDA64(v1, v7);
        }
      }
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
}

void sub_22E5DA31C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  BOOL v4;

  v2 = *(_QWORD *)(v0 + 16);
  if (*(_BYTE *)(v1 + 256))
    sub_22E5DD76C(v1, (_DWORD *)v2);
  v3 = *(_DWORD *)(v2 + 28) & 0x7F;
  if (v3 == 63
    || (v3 != 64 ? (v4 = (v3 - 67) >= 0xFFFFFFF9) : (v4 = 0), v4 && (*(_BYTE *)(v2 + 98) & 1) != 0))
  {
    sub_22E5DDA64(v1, v2);
  }
}

void sub_22E5DA3EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _DWORD *v5;
  BOOL v8;
  _QWORD *v9;

  v2 = sub_22F3C655C(v0);
  if ((_QWORD *)v2 != v3)
  {
    v4 = (_QWORD *)v2;
    do
    {
      v5 = (_DWORD *)(*v4 & 0xFFFFFFFFFFFFFFF8);
      if (v5)
      {
        if ((v5[7] & 0x7Fu) - 60 <= 6 && (*v4 & 0xFFFFFFFFFFFFFFFCLL) != 4 && (*v4 & 2) == 0)
        {
          v9 = v3;
          sub_22E5DD76C(v1, v5);
          v8 = sub_22F3C6428(v0, v4);
          v3 = v9;
          if (v8 || (v5[7] & 0x7F) == 0x3F)
          {
            sub_22E5DDA64(v1, (uint64_t)v5);
            v3 = v9;
          }
        }
      }
      v4 += 2;
    }
    while (v4 != v3);
  }
}

uint64_t sub_22E5DA488(uint64_t a1)
{
  void *v2;

  if ((*(_BYTE *)(a1 + 184) & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(a1 + 192), (void *)(16 * *(unsigned int *)(a1 + 200)));
  v2 = *(void **)(a1 + 120);
  if (v2 != *(void **)(a1 + 112))
    free(v2);
  sub_22F257CF8(a1 + 64);
  sub_22F257CF8(a1 + 16);
  return a1;
}

uint64_t sub_22E5DA4E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  _OWORD v67[8];
  uint64_t v68;
  __int128 v69[3];
  _BYTE v70[112];
  __int128 v71;
  __int128 v72;
  __int128 v73;
  _QWORD v74[4];
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  _OWORD v91[8];
  uint64_t v92;
  _QWORD v93[4];
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  unint64_t v110;
  __int128 v111[3];
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;

  result = sub_22E59F470(a3, 56);
  v66 = result;
  v5 = *(unsigned int *)(result + 8);
  if ((_DWORD)v5)
  {
    v6 = (uint64_t *)(result + (8 * v5 + 40));
    v7 = &v6[2 * v5];
    v65 = (uint64_t *)(a2 + 2904);
    while (1)
    {
      v8 = *v6;
      if ((*v6 & 6) == 2)
        break;
LABEL_8:
      v6 += 2;
      if (v6 == v7)
        return result;
    }
    v9 = v8 & 0xFFFFFFFFFFFFFFF8;
    v10 = (uint64_t *)(*(_QWORD *)((*(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFF8) + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v11 = *v10;
    if (!*v10 || (v12 = *(_DWORD *)(v11 + 16), (v12 & 0xFE) != 0x28))
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
        goto LABEL_7;
      v11 = sub_22F10CF48(v11);
      if (!v11)
        goto LABEL_7;
      v12 = *(_DWORD *)(v11 + 16);
    }
    if ((v12 & 0x100000) != 0)
    {
      do
      {
        v11 = *(_QWORD *)(*(_QWORD *)(v11 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v11)
        {
          v45 = *(_DWORD *)(v11 + 16);
          if ((v45 & 0xFE) == 0x28)
            continue;
        }
        v11 = sub_22F10CF48(v11);
        v45 = *(_DWORD *)(v11 + 16);
      }
      while ((v45 & 0x100000) != 0);
    }
    v10 = (uint64_t *)(*(_QWORD *)(v11 + 32) & 0xFFFFFFFFFFFFFFF0);
LABEL_7:
    result = sub_22F10C2A4(*v10);
    if (result)
    {
      v13 = result;
      if ((*(_DWORD *)(result + 28) & 0x7Fu) - 35 <= 2)
      {
        v14 = *(_QWORD *)(result + 128);
        if (v14)
        {
          if (((*(unsigned __int16 *)(v14 + 8) | (*(unsigned __int8 *)(v14 + 10) << 16)) & 0x100000) != 0)
          {
            *(_QWORD *)v70 = v9;
            *(_QWORD *)&v112 = 0;
            v15 = sub_22E3CED3C(v65, v70, &v112);
            v16 = v112;
            if (!v15)
              v16 = *(_QWORD *)(a2 + 2904) + 56 * *(unsigned int *)(a2 + 2920);
            v17 = *(_OWORD *)(v16 + 24);
            v121 = *(_OWORD *)(v16 + 8);
            v122 = v17;
            v123 = *(_OWORD *)(v16 + 40);
            v18 = *(_QWORD *)(v9 + 48);
            v19 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFF0) + 8);
            v20 = *(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0);
            if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
            {
              v111[0] = v121;
              v111[1] = v122;
              v111[2] = v123;
              sub_22E4E9BF4(a2, v111, v18, 2, (uint64_t)&v112);
            }
            else
            {
              v21 = *(_DWORD *)(v20 + 16);
              if ((v21 & 0xFE) == 0x28)
              {
                if ((v21 & 0x100000) != 0)
                {
                  do
                  {
                    v20 = *(_QWORD *)(*(_QWORD *)(v20 + 32) & 0xFFFFFFFFFFFFFFF0);
                    if (v20)
                    {
                      v46 = *(_DWORD *)(v20 + 16);
                      if ((v46 & 0xFE) == 0x28)
                        continue;
                    }
                    v20 = sub_22F10CF48(v20);
                    v46 = *(_DWORD *)(v20 + 16);
                  }
                  while ((v46 & 0x100000) != 0);
                }
                v22 = *(_QWORD *)(v20 + 32);
              }
              else
              {
                v22 = *(_QWORD *)(v9 + 48) & 7 | v19;
              }
              sub_22E6281E0(*(_QWORD **)(a2 + 144), v22, (uint64_t)&v124);
              *(_OWORD *)v70 = v121;
              *(_OWORD *)&v70[16] = v122;
              *(_OWORD *)&v70[32] = v123;
              v23 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
              v71 = v124;
              v72 = v125;
              *(_QWORD *)&v73 = v126;
              v113 = 0uLL;
              *((_QWORD *)&v112 + 1) = 0;
              LODWORD(v114) = 0;
              *((_QWORD *)&v114 + 1) = 0;
              *(_QWORD *)&v115 = 0;
              v116 = 0uLL;
              *(_QWORD *)((char *)&v117 + 4) = 2;
              LODWORD(v112) = 0;
              v118 = 0u;
              v119 = 0u;
              sub_22E3C113C((uint64_t)&v112, (__int128 *)v70, v22, 2, &v71, v23);
            }
            v63 = *((_QWORD *)&v112 + 1);
            v64 = v112;
            v61 = *((_QWORD *)&v113 + 1);
            v62 = v113;
            v59 = DWORD1(v114);
            v60 = v114;
            v57 = v115;
            v58 = *((_QWORD *)&v114 + 1);
            v55 = v116;
            v56 = *((_QWORD *)&v115 + 1);
            v53 = HIDWORD(v116);
            v54 = DWORD2(v116);
            v51 = DWORD1(v117);
            v52 = v117;
            v49 = HIDWORD(v117);
            v50 = DWORD2(v117);
            v47 = *((_QWORD *)&v118 + 1);
            v48 = v118;
            v24 = v119;
            v25 = v120;
            v124 = 0uLL;
            LODWORD(v125) = 0;
            v110 = 0;
            sub_22EFD4A20(v13, (uint64_t *)&v124, &v110);
            v26 = v110;
            if (v110 && (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 1856) + 40))(*(_QWORD *)(a2 + 1856)))
            {
              v93[0] = v64;
              v93[1] = v63;
              v93[2] = v62;
              v93[3] = v61;
              v94 = v60;
              v95 = v59;
              v96 = v58;
              v97 = v57;
              v98 = v56;
              v99 = v55;
              v100 = v54;
              v101 = v53;
              v102 = v52;
              v103 = v51;
              v104 = v50;
              v105 = v49;
              v106 = v48;
              v107 = v47;
              v108 = v24;
              v109 = v25;
              sub_22E4EC638((_QWORD *)a2, (uint64_t)v93, v26, (uint64_t)&v112);
              v27 = *(_QWORD *)(a2 + 4208);
              v91[6] = v118;
              v91[7] = v119;
              v92 = v120;
              v91[2] = v114;
              v91[3] = v115;
              v91[4] = v116;
              v91[5] = v117;
              v91[0] = v112;
              v91[1] = v113;
              sub_22E4E87FC(a2, v27, (uint64_t)v91, 0);
            }
            v28 = *(_QWORD *)(v13 + 128);
            if (v28)
            {
              if (((*(unsigned __int16 *)(v28 + 8) | (*(unsigned __int8 *)(v28 + 10) << 16)) & 0x100000) != 0)
              {
                v29 = ((unint64_t)*(unsigned int *)(v28 + 104) >> 5) & 0x7FFF;
                if ((_DWORD)v29)
                {
                  v30 = *(uint64_t **)(v28 + 128);
                  v31 = &v30[2 * v29];
                  do
                  {
                    v32 = *v30;
                    if ((unint64_t)*v30 >= 4 && (*v30 & 0xFFFFFFFFFFFFFFFCLL) != 4 && (*v30 & 2) == 0)
                    {
                      v35 = v32 & 0xFFFFFFFFFFFFFFF8;
                      if (sub_22F0D8458(v66, v32 & 0xFFFFFFFFFFFFFFF8))
                      {
                        if ((_DWORD)v125)
                        {
                          LODWORD(v36) = (v125 - 1) & ((v35 >> 4) ^ (v35 >> 9));
                          v37 = (uint64_t *)(v124 + 16 * v36);
                          v38 = *v37;
                          if (*v37 != v35)
                          {
                            v39 = 1;
                            while (v38 != -4096)
                            {
                              v40 = v36 + v39++;
                              v36 = v40 & (v125 - 1);
                              v38 = *(_QWORD *)(v124 + 16 * v36);
                              if (v38 == v35)
                              {
                                v37 = (uint64_t *)(v124 + 16 * v36);
                                goto LABEL_44;
                              }
                            }
                            v37 = (uint64_t *)(v124 + 16 * v125);
                          }
                        }
                        else
                        {
                          v37 = (uint64_t *)v124;
                        }
LABEL_44:
                        v74[0] = v64;
                        v74[1] = v63;
                        v74[2] = v62;
                        v74[3] = v61;
                        v75 = v60;
                        v76 = v59;
                        v77 = v58;
                        v78 = v57;
                        v79 = v56;
                        v80 = v55;
                        v81 = v54;
                        v82 = v53;
                        v83 = v52;
                        v84 = v51;
                        v85 = v50;
                        v86 = v49;
                        v87 = v48;
                        v88 = v47;
                        v89 = v24;
                        v90 = v25;
                        sub_22E4EC638((_QWORD *)a2, (uint64_t)v74, v37[1], (uint64_t)&v112);
                        *(_QWORD *)&v71 = v35;
                        *(_QWORD *)v70 = 0;
                        v41 = sub_22E3CED3C(v65, &v71, v70);
                        v42 = *(_QWORD *)v70;
                        if (!v41)
                          v42 = *(_QWORD *)(a2 + 2904) + 56 * *(unsigned int *)(a2 + 2920);
                        v71 = *(_OWORD *)(v42 + 8);
                        v72 = *(_OWORD *)(v42 + 24);
                        v73 = *(_OWORD *)(v42 + 40);
                        v43 = *(_QWORD *)(v35 + 48);
                        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((v43 & 0xFFFFFFFFFFFFFFF0)
                                                                                        + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 16) & 0xFE) == 0x28)
                        {
                          v69[0] = v71;
                          v69[1] = v72;
                          v69[2] = v73;
                          sub_22E4E9BF4(a2, v69, *(_QWORD *)((v43 & 0xFFFFFFFFFFFFFFF0) + 8) | v43 & 7, 2, (uint64_t)v70);
                          v71 = *(_OWORD *)&v70[8];
                          v72 = *(_OWORD *)&v70[24];
                          v73 = *(_OWORD *)&v70[40];
                        }
                        if ((BYTE8(v72) & 3) != 0)
                          v44 = sub_22F28ABCC(&v71, (_QWORD *)a2);
                        else
                          v44 = v71;
                        v67[6] = v118;
                        v67[7] = v119;
                        v68 = v120;
                        v67[2] = v114;
                        v67[3] = v115;
                        v67[4] = v116;
                        v67[5] = v117;
                        v67[0] = v112;
                        v67[1] = v113;
                        sub_22E4E87FC(a2, v44, (uint64_t)v67, 0);
                      }
                    }
                    v30 += 2;
                  }
                  while (v30 != v31);
                }
              }
            }
            result = llvm::deallocate_buffer((llvm *)v124, (void *)(16 * v125));
          }
        }
      }
    }
    goto LABEL_8;
  }
  return result;
}

void sub_22E5DAC54(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t v5;
  int **v6;
  unsigned int v7;
  int **v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *i;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  int v21;
  _OWORD *v22;
  llvm::raw_ostream *v23;
  uint64_t v24;
  const char *v25;
  size_t v26;
  void *v27;
  void *v28;
  _BYTE v29[24];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  __int128 v34;
  _QWORD v35[33];

  v35[32] = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD **)(a2 + 40);
  v7 = *v4;
  v6 = (int **)(v4 + 4);
  v5 = v7;
  if (v7)
  {
    v8 = &v6[v5];
    while (1)
    {
      v9 = *v6;
      if ((*v6)[2] == 83)
      {
        v10 = *(_QWORD *)(a1 + 8);
        if ((*(unsigned int (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)(v10 + 216) + 568))(*(_QWORD *)(v10 + 216), "ptx", 3))
        {
          v11 = *(_QWORD *)(*(_QWORD *)(v10 + 216) + 16);
          v12 = *(uint64_t **)(v11 + 224);
          v13 = *(unsigned int *)(v11 + 232);
          if ((_DWORD)v13)
          {
            for (i = v12; !*i || *i == -8; ++i)
              ;
          }
          else
          {
            i = v12;
          }
          v16 = &v12[v13];
          if (i != v16)
          {
            v17 = *i;
            while (1)
            {
              if (*(_BYTE *)(v17 + 8))
              {
                v20 = sub_22F419728((const void *)(v17 + 16), *(_QWORD *)v17);
                if (v20 != 1)
                  break;
              }
              do
              {
                v18 = i[1];
                ++i;
                v17 = v18;
                if (v18)
                  v19 = v17 == -8;
                else
                  v19 = 1;
              }
              while (v19);
              if (i == v16)
                goto LABEL_25;
            }
            v21 = v20;
            if ((v20 - 2) <= 8)
              break;
          }
        }
      }
LABEL_25:
      if (++v6 == v8)
        goto LABEL_26;
    }
    v33 = v35;
    v34 = xmmword_22F44E320;
    sub_22F242C48((uint64_t)v29, (uint64_t)&v33);
    v22 = (_OWORD *)v31;
    if ((unint64_t)(v30 - v31) > 0x13)
    {
      *(_DWORD *)(v31 + 16) = 543519349;
      *v22 = *(_OWORD *)"Target architecture ";
      v31 += 20;
      v23 = (llvm::raw_ostream *)v29;
    }
    else
    {
      v23 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)v29, "Target architecture ");
    }
    v24 = 0;
    v25 = "unknown";
    while (dword_24FAE07C0[v24] != v21)
    {
      v24 += 6;
      if (v24 == 318)
        goto LABEL_34;
    }
    v25 = *(const char **)&dword_24FAE07C0[v24 + 2];
    if (!v25)
      goto LABEL_36;
LABEL_34:
    v26 = strlen(v25);
    v27 = (void *)*((_QWORD *)v23 + 4);
    if (v26 <= *((_QWORD *)v23 + 3) - (_QWORD)v27)
    {
      if (v26)
      {
        memcpy(v27, v25, v26);
        *((_QWORD *)v23 + 4) += v26;
      }
    }
    else
    {
      v23 = (llvm::raw_ostream *)llvm::raw_ostream::write(v23, v25);
    }
LABEL_36:
    v28 = (void *)*((_QWORD *)v23 + 4);
    if (*((_QWORD *)v23 + 3) - (_QWORD)v28 > 0x23uLL)
    {
      qmemcpy(v28, " does not support unified addressing", 36);
      *((_QWORD *)v23 + 4) += 36;
    }
    else
    {
      llvm::raw_ostream::write(v23, " does not support unified addressing");
    }
    sub_22E628310(*(_QWORD *)(a1 + 8), *v9, *(void **)v32, *(_QWORD *)(v32 + 8));
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v29);
    if (v33 != v35)
      free(v33);
  }
  else
  {
LABEL_26:
    sub_22E5B5064(a1, a2);
  }
}

uint64_t sub_22E5DAF68(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2[18] + 808);
  sub_22F28792C(v3, a2, *(unsigned int **)(a1 + 8), 0);
  return sub_22F27C55C(v3, (uint64_t)a2, 1);
}

uint64_t sub_22E5DAFA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 808);
  sub_22F27C67C(v3, a2);
  return sub_22F287A00(v3, a2, 0);
}

void sub_22E5DAFE0()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E5DAFF4(unsigned int *a1)
{
  uint64_t v1;
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  _BOOL8 v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;

  if (a1)
  {
    v2 = a1 + 4;
    v1 = *a1;
    if ((_DWORD)v1)
    {
      v3 = 8 * v1;
      v4 = 8 * v1;
      v5 = a1 + 4;
      do
      {
        if (*(_DWORD *)(*(_QWORD *)v5 + 8) == 60)
        {
          v6 = v4 == 0;
          if (!v4)
            break;
          return v6;
        }
        v5 += 2;
        v4 -= 8;
      }
      while (v4);
      while (*(_DWORD *)(*(_QWORD *)v2 + 8) != 71)
      {
        v2 += 2;
        v3 -= 8;
        if (!v3)
          return 1;
      }
      if (v3)
      {
        v7 = a1 + 6;
        v8 = 8 - 8 * v1;
        while (1)
        {
          v9 = *((_QWORD *)v7 - 1);
          if (*(_DWORD *)(v9 + 8) == 71)
            break;
          v7 += 2;
          v8 += 8;
          if (v8 == 8)
            return 0;
        }
        if (v8 == 8)
          return 0;
        if (!*(_DWORD *)(v9 + 32))
          return 1;
        for (i = -v8; ; i -= 8)
        {
          v6 = i != 0;
          if (!i || *(_DWORD *)(*(_QWORD *)v7 + 8) == 71 && !*(_DWORD *)(*(_QWORD *)v7 + 32))
            break;
          v7 += 2;
        }
        return v6;
      }
    }
  }
  return 1;
}

uint64_t sub_22E5DB0EC(uint64_t a1, _QWORD *a2)
{
  sub_22F28792C(*(_QWORD *)(a1 + 8), a2, *(unsigned int **)(a1 + 16), 1);
  return sub_22F27C55C(*(_QWORD *)(a1 + 8), (uint64_t)a2, 1);
}

uint64_t sub_22E5DB128(uint64_t a1, uint64_t a2)
{
  sub_22F27C67C(*(_QWORD *)(a1 + 8), a2);
  return sub_22F287A00(*(_QWORD *)(a1 + 8), a2, 1);
}

void sub_22E5DB15C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E5DB170(uint64_t result)
{
  _BYTE *v1;

  v1 = *(_BYTE **)(result + 8);
  *(_BYTE *)(result + 16) = *v1;
  *v1 = 1;
  return result;
}

uint64_t sub_22E5DB188(uint64_t result)
{
  **(_BYTE **)(result + 8) = *(_BYTE *)(result + 16);
  return result;
}

void sub_22E5DB198()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E5DB1AC(char *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  char *v3;
  int v4;
  unsigned __int8 **v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 **v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  uint64_t v17;

  if (!a1)
  {
    v1 = 0;
    while (1)
    {
LABEL_42:
      v13 = (unsigned __int8 **)(v1 + 24);
      v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 3) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      v15 = *(_DWORD *)(v14 + 16);
      if (v14)
        v16 = v15 == 11;
      else
        v16 = 0;
      if (v16)
      {
        if (((*(_DWORD *)(v14 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
          goto LABEL_52;
      }
      else if (v14 && v15 == 44)
      {
        v17 = sub_22F114198(*(_QWORD *)(v14 + 24));
        if ((*(_BYTE *)(v17 + 74) & 1) == 0 && *(_QWORD *)(v17 + 128) <= 7uLL
          || (*(_QWORD *)(sub_22F114198(*(_QWORD *)(v14 + 24)) + 72) & 0x8000000000) != 0)
        {
          goto LABEL_52;
        }
      }
      else if (v15 != 9)
      {
        goto LABEL_52;
      }
      v13 = (unsigned __int8 **)(v1 + 16);
LABEL_52:
      v1 = sub_22EFFA6B0(*v13);
      if (*v1 != 107)
        goto LABEL_39;
    }
  }
  do
  {
    v1 = (unsigned __int8 *)a1;
    LODWORD(v2) = *a1;
    if (v2 > 0xD5)
    {
      if ((_DWORD)v2 == 233)
      {
        LODWORD(v2) = *(_DWORD *)a1;
        if ((*(_DWORD *)a1 & 0x7C0000) != 0x300000)
          goto LABEL_39;
        v3 = a1 + 16;
      }
      else
      {
        if ((_DWORD)v2 != 214)
          break;
        v3 = a1 + 24;
      }
    }
    else if ((_DWORD)v2 == 155)
    {
      if ((**((_DWORD **)a1 + 2) & 0x18000) != 0)
        goto LABEL_39;
      v3 = a1 + 24;
      if (!a1[48])
        v3 = a1 + 32;
      LOBYTE(v2) = -101;
    }
    else
    {
      if ((_DWORD)v2 != 176)
        break;
      v2 = *((unsigned int *)a1 + 5);
      if ((_DWORD)v2 == -1)
        goto LABEL_39;
      v3 = &a1[8 * v2 + 40];
      LOBYTE(v2) = -80;
    }
    a1 = *(char **)v3;
  }
  while (*(unsigned __int8 **)v3 != v1);
  if (v2 == 107)
    goto LABEL_42;
  if (v2 == 191)
  {
    do
    {
      v1 = sub_22EFFA6B0(*((unsigned __int8 **)v1 + 2));
      v4 = *v1;
    }
    while (v4 == 191);
    while (1)
    {
      if (v4 != 107)
        goto LABEL_39;
      v5 = (unsigned __int8 **)(v1 + 24);
      v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 3) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      v7 = *(_DWORD *)(v6 + 16);
      if (v6 && v7 == 11)
        break;
      if (v6 && v7 == 44)
      {
        v9 = sub_22F114198(*(_QWORD *)(v6 + 24));
        if (((*(_BYTE *)(v9 + 74) & 1) != 0 || *(_QWORD *)(v9 + 128) > 7uLL)
          && (*(_QWORD *)(sub_22F114198(*(_QWORD *)(v6 + 24)) + 72) & 0x8000000000) == 0)
        {
          goto LABEL_32;
        }
      }
      else if (v7 == 9)
      {
        goto LABEL_32;
      }
LABEL_33:
      v1 = sub_22EFFA6B0(*v5);
      v4 = *v1;
    }
    if (((*(_DWORD *)(v6 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
      goto LABEL_33;
LABEL_32:
    v5 = (unsigned __int8 **)(v1 + 16);
    goto LABEL_33;
  }
LABEL_39:
  v10 = sub_22EFFA6B0(v1);
  v11 = 24;
  if (*v10 == 161)
    v11 = 16;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)&v10[v11] + 32))(*(_QWORD *)&v10[v11]);
}

void sub_22E5DB434(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4, uint64_t a5, __n128 a6)
{
  __n128 *v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v14;
  unint64_t v15;
  __n128 *v16;
  unint64_t v17;
  __n128 *v18;
  uint64_t v19;
  __n128 *v20;
  __n128 *v21;
  int64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  __n128 *v28;
  __n128 v29;
  __n128 *v30;
  char *v31;
  __n128 *v32;
  unint64_t v33;
  __n128 *v34;
  unint64_t v35;
  uint64_t v36;
  __n128 *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  __n128 *v41;
  __n128 *v42;
  unint64_t v43;

  if (a3 >= 2)
  {
    v7 = a1;
    if (a3 == 2)
    {
      v8 = a2[-1].n128_i64[0];
      v9 = a1->n128_u64[0];
      if (v8 > (int64_t)a1->n128_u64[0])
      {
        v10 = a1->n128_u64[1];
        v11 = a2[-1].n128_u64[1];
        a1->n128_u64[0] = v8;
        a1->n128_u64[1] = v11;
        a2[-1].n128_u64[0] = v9;
        a2[-1].n128_u64[1] = v10;
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if (a1 != a2)
      {
        v18 = a1 + 1;
        if (&a1[1] != a2)
        {
          v19 = 0;
          v20 = a1;
          do
          {
            v21 = v18;
            v22 = v20[1].n128_i64[0];
            v23 = v20->n128_u64[0];
            if (v22 > (int64_t)v20->n128_u64[0])
            {
              v24 = v20[1].n128_u64[1];
              v25 = v19;
              while (1)
              {
                v26 = (char *)a1 + v25;
                v27 = *(uint64_t *)((char *)&a1->n128_i64[1] + v25);
                *((_QWORD *)v26 + 2) = v23;
                *((_QWORD *)v26 + 3) = v27;
                if (!v25)
                  break;
                v23 = *((_QWORD *)v26 - 2);
                v25 -= 16;
                if (v22 <= v23)
                {
                  v28 = (__n128 *)((char *)a1 + v25 + 16);
                  goto LABEL_18;
                }
              }
              v28 = a1;
LABEL_18:
              v28->n128_u64[0] = v22;
              v28->n128_u64[1] = v24;
            }
            v18 = v21 + 1;
            v19 += 16;
            v20 = v21;
          }
          while (&v21[1] != a2);
        }
      }
    }
    else
    {
      v14 = (char *)a4;
      v15 = a3 >> 1;
      v16 = &a1[a3 >> 1];
      v17 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        v29 = sub_22E5DB664(a1, v16, v17, a4, a6);
        v30 = (__n128 *)&v14[16 * v15];
        sub_22E5DB664(&v7[a3 >> 1], a2, a3 - (a3 >> 1), v30, v29);
        v31 = &v14[16 * a3];
        v32 = v30;
        while (v32 != (__n128 *)v31)
        {
          v33 = v32->n128_u64[0];
          if ((int64_t)v32->n128_u64[0] > *(_QWORD *)v14)
          {
            v34 = v32;
          }
          else
          {
            v33 = *(_QWORD *)v14;
            v34 = (__n128 *)v14;
          }
          v35 = v34->n128_u64[1];
          if ((int64_t)v32->n128_u64[0] > *(_QWORD *)v14)
            ++v32;
          else
            v14 += 16;
          v7->n128_u64[0] = v33;
          v7->n128_u64[1] = v35;
          ++v7;
          if (v14 == (char *)v30)
          {
            if (v32 != (__n128 *)v31)
            {
              v36 = 0;
              do
              {
                v37 = &v7[v36];
                v39 = v32[v36].n128_u64[1];
                v38 = (uint64_t)&v32[v36 + 1];
                v37->n128_u64[0] = v32[v36].n128_u64[0];
                v37->n128_u64[1] = v39;
                ++v36;
              }
              while ((char *)v38 != v31);
            }
            return;
          }
        }
        if (v14 != (char *)v30)
        {
          v40 = 0;
          do
          {
            v41 = &v7[v40 / 0x10];
            v42 = (__n128 *)&v14[v40];
            v43 = *(_QWORD *)&v14[v40 + 8];
            v41->n128_u64[0] = *(_QWORD *)&v14[v40];
            v41->n128_u64[1] = v43;
            v40 += 16;
          }
          while (&v42[1] != v30);
        }
      }
      else
      {
        sub_22E5DB434(a1, v16, v17, a4, a5);
        sub_22E5DB434(&v7[a3 >> 1], a2, a3 - (a3 >> 1), v14, a5);
        sub_22E5DB864((char *)v7, (char *)&v7[a3 >> 1], (char *)a2, a3 >> 1, a3 - (a3 >> 1), v14, a5);
      }
    }
  }
}

__n128 sub_22E5DB664(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4, __n128 result)
{
  __n128 *v5;
  __n128 *v8;
  __n128 *v9;
  __n128 *v10;
  uint64_t v11;
  __n128 *v12;
  __n128 *v13;
  __n128 *v14;
  int64_t v15;
  __n128 *v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  __n128 *v21;
  __n128 *v22;
  __n128 v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;

  if (a3)
  {
    v5 = a4;
    v8 = a1;
    if (a3 == 2)
    {
      v9 = a2 - 1;
      if ((int64_t)a2[-1].n128_u64[0] <= (int64_t)a1->n128_u64[0])
      {
        *a4 = *a1;
        result = *v9;
      }
      else
      {
        *a4 = *v9;
        result = *a1;
      }
      a4[1] = result;
    }
    else if (a3 == 1)
    {
      result = *a1;
      *a4 = *a1;
    }
    else if ((uint64_t)a3 > 8)
    {
      v21 = &a1[a3 >> 1];
      sub_22E5DB434(a1, v21, a3 >> 1, a4, a3 >> 1);
      sub_22E5DB434(&v8[a3 >> 1], a2, a3 - (a3 >> 1), &v5[a3 >> 1], a3 - (a3 >> 1));
      v22 = &v8[a3 >> 1];
      while (v22 != a2)
      {
        if ((int64_t)v22->n128_u64[0] <= (int64_t)v8->n128_u64[0])
        {
          v24 = *v8++;
          result = v24;
        }
        else
        {
          v23 = *v22++;
          result = v23;
        }
        *v5++ = result;
        if (v8 == v21)
        {
          if (v22 != a2)
          {
            v25 = 0;
            do
            {
              result = v22[v25];
              v5[v25++] = result;
            }
            while (&v22[v25] != a2);
          }
          return result;
        }
      }
      if (v8 != v21)
      {
        v26 = 0;
        do
        {
          result = v8[v26];
          v5[v26++] = result;
        }
        while (&v8[v26] != v21);
      }
    }
    else if (a1 != a2)
    {
      result = *a1;
      *a4 = *a1;
      v10 = a1 + 1;
      if (&a1[1] != a2)
      {
        v11 = 0;
        v12 = a4;
        v13 = a4;
        do
        {
          v14 = v10;
          v15 = v13->n128_u64[0];
          ++v13;
          if ((int64_t)v8[1].n128_u64[0] <= v15)
          {
            result = *v10;
            *v13 = *v10;
          }
          else
          {
            result = *v12;
            *v13 = *v12;
            v16 = a4;
            if (v12 != a4)
            {
              v17 = v11;
              while (1)
              {
                v16 = (__n128 *)((char *)a4 + v17);
                v18 = *(uint64_t *)((char *)a4[-1].n128_i64 + v17);
                if ((int64_t)v14->n128_u64[0] <= v18)
                  break;
                v19 = v16[-1].n128_i64[1];
                v16->n128_u64[0] = v18;
                v16->n128_u64[1] = v19;
                v17 -= 16;
                if (!v17)
                {
                  v16 = a4;
                  break;
                }
              }
            }
            v20 = v8[1].n128_u64[1];
            v16->n128_u64[0] = v14->n128_u64[0];
            v16->n128_u64[1] = v20;
          }
          v10 = v14 + 1;
          v11 += 16;
          v12 = v13;
          v8 = v14;
        }
        while (&v14[1] != a2);
      }
    }
  }
  return result;
}

char *sub_22E5DB864(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *i;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;

  if (a5)
  {
    while (a4 > a7 && a5 > a7)
    {
      if (!a4)
        return result;
      v9 = 0;
      v10 = *(_QWORD *)a2;
      v11 = -a4;
      while (1)
      {
        v12 = *(_QWORD *)&result[v9];
        if (v10 > v12)
          break;
        v9 += 16;
        if (__CFADD__(v11++, 1))
          return result;
      }
      v14 = &result[v9];
      if (-v11 >= a5)
      {
        if (v11 == -1)
        {
          v65 = &result[v9];
          v66 = *(_QWORD *)&result[v9 + 8];
          v67 = *((_QWORD *)a2 + 1);
          *(_QWORD *)v65 = v10;
          *((_QWORD *)v65 + 1) = v67;
          *(_QWORD *)a2 = v12;
          *((_QWORD *)a2 + 1) = v66;
          return result;
        }
        if (v11 <= 0)
          v25 = -v11;
        else
          v25 = 1 - v11;
        v24 = v25 >> 1;
        v18 = &result[16 * (v25 >> 1) + v9];
        v17 = a3;
        if (a3 != a2)
        {
          v26 = (a3 - a2) >> 4;
          v17 = a2;
          do
          {
            v27 = v26 >> 1;
            v28 = &v17[16 * (v26 >> 1)];
            v30 = *(_QWORD *)v28;
            v29 = v28 + 16;
            v26 += ~(v26 >> 1);
            if (v30 > *(_QWORD *)v18)
              v17 = v29;
            else
              v26 = v27;
          }
          while (v26);
        }
        v16 = (v17 - a2) >> 4;
      }
      else
      {
        if (a5 >= 0)
          v15 = a5;
        else
          v15 = a5 + 1;
        v16 = v15 >> 1;
        v17 = &a2[16 * (v15 >> 1)];
        v18 = a2;
        if (v14 != a2)
        {
          v19 = (a2 - result - v9) >> 4;
          v18 = &result[v9];
          do
          {
            v20 = v19 >> 1;
            v21 = &v18[16 * (v19 >> 1)];
            v23 = *(_QWORD *)v21;
            v22 = v21 + 16;
            v19 += ~(v19 >> 1);
            if (*(_QWORD *)v17 > v23)
              v19 = v20;
            else
              v18 = v22;
          }
          while (v19);
        }
        v24 = (v18 - result - v9) >> 4;
      }
      v31 = v17;
      if (v18 != a2)
      {
        v31 = v18;
        if (a2 != v17)
        {
          v32 = *(_QWORD *)v18;
          v33 = *((_QWORD *)v18 + 1);
          v34 = *((_QWORD *)a2 + 1);
          *(_QWORD *)v18 = v10;
          *((_QWORD *)v18 + 1) = v34;
          *(_QWORD *)a2 = v32;
          *((_QWORD *)a2 + 1) = v33;
          v31 = v18 + 16;
          for (i = a2 + 16; i != v17; i += 16)
          {
            if (v31 == a2)
              a2 = i;
            v36 = *(_QWORD *)v31;
            v37 = *((_QWORD *)v31 + 1);
            v38 = *((_QWORD *)i + 1);
            *(_QWORD *)v31 = *(_QWORD *)i;
            *((_QWORD *)v31 + 1) = v38;
            v31 += 16;
            *(_QWORD *)i = v36;
            *((_QWORD *)i + 1) = v37;
          }
          if (v31 == a2)
          {
            v31 = a2;
          }
          else
          {
            v39 = v31;
            v40 = a2;
            do
            {
              while (1)
              {
                v41 = *(_QWORD *)v39;
                v42 = *((_QWORD *)v39 + 1);
                v43 = *((_QWORD *)a2 + 1);
                *(_QWORD *)v39 = *(_QWORD *)a2;
                *((_QWORD *)v39 + 1) = v43;
                v39 += 16;
                *(_QWORD *)a2 = v41;
                *((_QWORD *)a2 + 1) = v42;
                a2 += 16;
                if (a2 == v17)
                  break;
                if (v39 == v40)
                  v40 = a2;
              }
              a2 = v40;
            }
            while (v39 != v40);
          }
        }
      }
      a4 = -(v24 + v11);
      v44 = a5 - v16;
      if (v24 + v16 >= a5 - (v24 + v16) - v11)
      {
        v49 = v17;
        v50 = a6;
        sub_22E5DB864(v31, v49, a3, a4, a5 - v16, a6, a7);
        a6 = v50;
        v17 = v18;
        v44 = v16;
        a4 = v24;
        a3 = v31;
      }
      else
      {
        v45 = v14;
        v46 = a3;
        v47 = v16;
        v48 = a6;
        sub_22E5DB864(v45, v18, v31, v24, v47, a6, a7);
        a3 = v46;
        a6 = v48;
        v14 = v31;
      }
      a5 = v44;
      result = v14;
      a2 = v17;
      if (!v44)
        return result;
    }
    if (a4 <= a5)
    {
      if (result != a2)
      {
        v59 = 0;
        do
        {
          *(_OWORD *)&a6[v59] = *(_OWORD *)&result[v59];
          v59 += 16;
        }
        while (&result[v59] != a2);
        if (v59)
        {
          v60 = &a6[v59];
          v61 = (uint64_t)&a6[v59 - 16];
          while (a2 != a3)
          {
            v62 = *(_QWORD *)a2;
            if (*(_QWORD *)a2 > *(_QWORD *)a6)
            {
              v63 = a2;
            }
            else
            {
              v62 = *(_QWORD *)a6;
              v63 = a6;
            }
            v64 = *((_QWORD *)v63 + 1);
            if (*(_QWORD *)a2 > *(_QWORD *)a6)
              a2 += 16;
            else
              a6 += 16;
            *(_QWORD *)result = v62;
            *((_QWORD *)result + 1) = v64;
            result += 16;
            if (v60 == a6)
              return result;
          }
          if (v60 != a6)
          {
            v71 = 0;
            do
            {
              v72 = &result[v71];
              v73 = &a6[v71];
              v74 = *(_QWORD *)&a6[v71 + 8];
              *(_QWORD *)v72 = *(_QWORD *)&a6[v71];
              *((_QWORD *)v72 + 1) = v74;
              v71 += 16;
            }
            while ((char *)v61 != v73);
          }
        }
      }
    }
    else if (a2 != a3)
    {
      v51 = 0;
      do
      {
        *(_OWORD *)&a6[v51] = *(_OWORD *)&a2[v51];
        v51 += 16;
      }
      while (&a2[v51] != a3);
      if (v51)
      {
        v52 = &a6[v51];
        v53 = a3 - 8;
        while (a2 != result)
        {
          v54 = *((_QWORD *)a2 - 2);
          v55 = *((_QWORD *)v52 - 2);
          v56 = v55 <= v54;
          if (v55 > v54)
          {
            v57 = a2;
          }
          else
          {
            v54 = *((_QWORD *)v52 - 2);
            v57 = v52;
          }
          if (!v56)
            a2 -= 16;
          v58 = *((_QWORD *)v57 - 1);
          if (v56)
            v52 -= 16;
          *((_QWORD *)v53 - 1) = v54;
          *(_QWORD *)v53 = v58;
          v53 -= 16;
          if (v52 == a6)
            return result;
        }
        if (v52 != a6)
        {
          v68 = 0;
          do
          {
            v69 = &v53[v68];
            v70 = *(_QWORD *)&v52[v68 - 8];
            *((_QWORD *)v69 - 1) = *(_QWORD *)&v52[v68 - 16];
            *(_QWORD *)v69 = v70;
            v68 -= 16;
          }
          while (&v52[v68] != a6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_22E5DBC4C(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[9];

  v14[8] = *MEMORY[0x24BDAC8D0];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v8 = 0;
    v9 = v14;
    do
    {
      v10 = *(_QWORD *)(a1 + v8 + 8);
      if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        *v9 = v10;
        v9[1] = *(_QWORD *)(a1 + v8 + 16);
        v9 += 2;
      }
      v8 += 16;
    }
    while (v8 != 64);
    if (a2 > 4)
    {
      *(_DWORD *)a1 &= ~1u;
      v11 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](16 * a2, 8);
      *(_QWORD *)(a1 + 16) = v11;
    }
    return sub_22F28931C(a1, v14, v9);
  }
  else
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](16 * a2, 8);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_22F28931C(a1, v6, &v6[2 * v7]);
    return llvm::deallocate_buffer((llvm *)v6, (void *)(16 * v7));
  }
}

uint64_t sub_22E5DBDC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int *v12;
  int *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 808);
  if (*(_QWORD *)(a1 + 16))
  {
    sub_22F288760((uint64_t)&v19, v4 + 4504, (uint64_t *)(a2 + 1624));
    v6 = v19;
    v7 = (_OWORD *)operator new();
    *v7 = 0u;
    v7[1] = 0u;
    v7[2] = 0u;
    v8 = *(_QWORD *)(v6 + 312);
    *(_QWORD *)(v6 + 312) = v7;
    if (v8)
    {
      v9 = sub_22F283FFC(v8);
      MEMORY[0x2348A0E9C](v9, 0x1020C40355347DDLL);
    }
    v10 = *(_QWORD *)(a1 + 24);
    v11 = sub_22F2893E4((int *)v10);
    v12 = v11;
    v14 = v13;
    v15 = v10 + 8;
    if ((*(_BYTE *)v10 & 1) != 0)
    {
      v16 = 4;
    }
    else
    {
      v15 = *(_QWORD *)(v10 + 8);
      v16 = *(unsigned int *)(v10 + 16);
    }
    v17 = (int *)(v15 + 16 * v16);
    if (v17 != v11)
    {
      do
      {
        v18 = *(_QWORD *)v12;
        v12 += 4;
        v19 = v18;
        v20 = 0u;
        v21 = 0u;
        v22 = 0u;
        v23 = 0;
        sub_22F28881C(v6 + 8, &v19);
        while (v12 != v14)
        {
          if ((*(_QWORD *)v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_14;
          v12 += 4;
        }
        v12 = v14;
LABEL_14:
        ;
      }
      while (v12 != v17);
    }
  }
  return sub_22E5D1260(v4, a2, **(_DWORD **)(a1 + 8));
}

uint64_t sub_22E5DBF28(uint64_t a1, uint64_t a2)
{
  return sub_22F287A90(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 808), a2);
}

void sub_22E5DBF34()
{
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22E5DBF48(int a1, uint64_t a2, uint64_t *a3, uint64_t a4, _OWORD *a5, _OWORD *a6, uint64_t a7)
{
  uint64_t *v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  __int128 v18;
  __int128 v19;
  unsigned int v20;
  __int128 v21;
  uint64_t *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  __int128 v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  unsigned int v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  llvm::PHINode *v68;
  uint64_t v69;
  uint64_t v70;
  llvm::PHINode *v71;
  unint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *PtrDiff;
  llvm::LLVMContext *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  __int128 v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  llvm::PHINode *v97;
  _QWORD *v98;
  unsigned int v102;
  uint64_t v103;
  unint64_t v104;
  _QWORD *v105;
  __int128 v106;
  unsigned int v107;
  uint64_t *v108;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  unsigned __int128 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  unsigned int v118;
  uint64_t *v119;
  unsigned int v120;
  unsigned __int128 v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  __int128 v142;
  __int128 v143;
  unsigned __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  uint64_t v152;
  unsigned __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  uint64_t v161;
  int v162;
  __int128 v163;
  __int128 v164;
  _OWORD v165[3];
  int v166;
  __int128 v167;
  __int128 v168;
  _QWORD v169[3];
  unsigned int v170;
  unsigned int v171;
  __int128 v172;
  __int128 v173[3];
  __int128 v174;
  uint64_t v175;
  int v176;
  unsigned int v177;
  __int128 v178;
  __int128 v179[3];
  _OWORD v180[3];
  _OWORD v181[3];
  __int128 v182[3];
  _OWORD v183[3];
  _OWORD v184[3];
  _OWORD v185[3];
  __int128 v186[3];
  _OWORD v187[3];
  _OWORD v188[3];
  __int128 v189;
  __int128 v190;
  __int128 v191;
  _OWORD v192[3];
  _OWORD v193[3];
  int v194;
  __int128 v195;
  __int128 v196;
  _OWORD v197[3];
  int v198;
  __int128 v199;
  __int128 v200;
  _OWORD v201[3];
  char v202[32];
  __int16 v203;
  _OWORD v204[3];
  __int128 v205;
  char v206;
  __int16 v207;
  _OWORD v208[3];
  unsigned __int128 v209;
  __int128 v210;
  __int128 v211;
  int v212;
  __int128 v213;
  __int128 v214;
  _OWORD v215[3];
  int v216;
  __int128 v217;
  __int128 v218;
  _OWORD v219[3];
  _OWORD v220[2];
  __int128 v221;
  _OWORD v222[2];
  __int128 v223;
  _QWORD v224[3];
  unsigned int v225;
  unsigned int v226;
  __int128 v227;
  unsigned __int128 v228;
  __int128 v229;
  uint64_t v230;
  unsigned __int128 v231;
  __int128 v232;
  uint64_t v233;
  unsigned __int128 v234;
  __int128 v235;
  __int128 v236;
  unsigned __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  uint64_t v245;

  if (a4)
  {
    v7 = a3;
    v8 = a2;
    v9 = a1;
    v10 = 0;
    v11 = (uint64_t *)(a2 + 272);
    v108 = &a3[a4];
    v115 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
    v116 = (uint64_t *)(a2 + 272);
    while (1)
    {
      v12 = *v7;
      DWORD2(v190) = 0;
      *(_QWORD *)&v190 = 0;
      v189 = 0u;
      v191 = 0u;
      v13 = sub_22EF5B848(v115, *(_QWORD *)(v12 + 8), 0);
      v14 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(v8 + 144) + 280), (llvm::LLVMContext *)v13);
      v119 = v7;
      v118 = v10;
      if (v9 == 1)
        break;
      if (!v9)
      {
        v88 = a5[1];
        v188[0] = *a5;
        v188[1] = v88;
        v188[2] = a5[2];
        LOWORD(v236) = 257;
        sub_22E486A58(v11, (uint64_t)v188, v10, (uint64_t)&v234, (uint64_t)&v237);
        v186[0] = v237;
        v186[1] = v238;
        v186[2] = v239;
        LOWORD(v233) = 257;
        sub_22E3BEE6C(v11, v186, v14, (uint64_t)&v231, (uint64_t)v187);
        v89 = *(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0);
        if (!v89 || *(_BYTE *)(v89 + 16) != 39)
          v89 = sub_22F10CF48(*(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0));
        sub_22E4E98F8(v8, v187, v89, 0, 0, &v234);
        v121 = v234;
        v15 = v235;
        v16 = DWORD2(v235);
        v20 = HIDWORD(v235);
        v106 = v236;
        v90 = a6[1];
        v185[0] = *a6;
        v185[1] = v90;
        v185[2] = a6[2];
        LOWORD(v233) = 257;
        sub_22E486A58(v11, (uint64_t)v185, v10, (uint64_t)&v231, (uint64_t)&v234);
        v113 = v234;
        v114 = v235;
        v102 = HIDWORD(v235);
        v112 = DWORD2(v235);
        v110 = *((_QWORD *)&v236 + 1);
        v111 = v236;
        v91 = *(_QWORD *)(v12 + 8);
        *(_QWORD *)&v234 = ".omp.reduction.element";
        LOWORD(v236) = 259;
        v92 = sub_22F25E4D4(v8, v91, (uint64_t)&v234, 0);
        v94 = 0;
        v95 = v92 & 0xFFFFFFFFFFFFFFF8;
        if (v92 <= 7)
          v95 = 0;
        v96 = v93 & 0xFFFFFFFFFFFFFFF8;
        if (v92 <= 7)
          v96 = 0;
        if (v92 >= 8)
          v94 = 1 << (v93 & 7 | (8 * (v92 & 7)));
        *(_QWORD *)&v189 = v95;
        *((_QWORD *)&v189 + 1) = v96;
        *(_QWORD *)&v190 = v94;
        DWORD2(v190) = 0;
        v17 = 1;
        v191 = 0uLL;
LABEL_13:
        v18 = v121;
        v19 = v106;
        goto LABEL_14;
      }
      v114 = 0;
      v113 = 0uLL;
      v112 = 0;
      v110 = 0;
      v111 = 0;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      v18 = 0uLL;
      v19 = 0uLL;
      v20 = v120;
LABEL_14:
      v174 = v18;
      v175 = v15;
      v176 = v16;
      v177 = v20;
      v178 = v19;
      v26 = sub_22E66C868(*(_QWORD *)(v8 + 144) + 280, *(_QWORD *)(v12 + 8), 0);
      LOWORD(v236) = 257;
      sub_22E3BEE6C(v11, &v174, v26, (uint64_t)&v234, (uint64_t)&v237);
      v27 = *((_QWORD *)&v237 + 1);
      v28 = v237;
      v29 = v238;
      v30 = DWORD2(v238);
      v120 = HIDWORD(v238);
      v31 = v239;
      v173[0] = v189;
      v173[1] = v190;
      v173[2] = v191;
      LOWORD(v236) = 257;
      sub_22E3BEE6C(v11, v173, *((uint64_t *)&v237 + 1), (uint64_t)&v234, (uint64_t)&v237);
      v189 = v237;
      v190 = v238;
      v191 = v239;
      if (v17)
      {
        v237 = v189;
        v238 = v190;
        v239 = v191;
        v50 = *(_QWORD *)(v12 + 8);
        sub_22EFF605C(v12);
        v107 = v51;
        sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 144), *(_QWORD *)(v50 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v234);
        v52 = v234;
        v234 = __PAIR128__(v27, v28);
        *(_QWORD *)&v235 = v29;
        *((_QWORD *)&v235 + 1) = __PAIR64__(v120, v30);
        v236 = v31;
        v224[0] = v28;
        v224[1] = v27;
        v224[2] = v29;
        v225 = v30;
        v226 = v120;
        v227 = v31;
        LOWORD(v223) = 257;
        v53 = v116;
        sub_22F26D368(v116, (uint64_t)v224, 1, (uint64_t)v222, (uint64_t)&v228);
        v54 = *(_QWORD *)(a2 + 96);
        v55 = *(_QWORD *)(a2 + 8);
        LOWORD(v221) = 257;
        sub_22F245864(v116, &v228, v54, v55, (uint64_t)v220, (uint64_t)&v231);
        v56 = 8;
        do
        {
          v57 = v56;
          if (v52 >= v56)
          {
            v58 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
            v59 = sub_22EF5CDF0(v58, *(_QWORD *)(*(_QWORD *)(v58 + 16408) & 0xFFFFFFFFFFFFFFF0));
            v60 = sub_22EF60A6C(v58, (v57 * v59), 1);
            v61 = sub_22E66C868(*(_QWORD *)(a2 + 144) + 280, v60, 0);
            v222[0] = v234;
            v222[1] = v235;
            v223 = v236;
            v62 = llvm::PointerType::get();
            LOWORD(v211) = 257;
            sub_22F245864(v53, v222, v62, v61, (uint64_t)&v209, (uint64_t)&v234);
            v220[0] = v237;
            v220[1] = v238;
            v221 = v239;
            v63 = llvm::PointerType::get();
            LOWORD(v211) = 257;
            sub_22F245864(v53, v220, v63, v61, (uint64_t)&v209, (uint64_t)&v237);
            if ((uint64_t)(v52 / v57) < 2)
            {
              v201[0] = v234;
              v201[1] = v235;
              v201[2] = v236;
              v198 = 0;
              v199 = 0u;
              v200 = 0u;
              v72 = (unint64_t *)sub_22E4E6994(a2, (uint64_t)v201, 0, v60, v107, 2, (uint64_t)&v198, 0);
              v73 = sub_22E5DD1E8(a2, v72, v60, a7, v107);
              v197[0] = v237;
              v197[1] = v238;
              v197[2] = v239;
              v194 = 0;
              v195 = 0u;
              v196 = 0u;
              sub_22E4E8134(a2, v73, (uint64_t)v197, 0, v60, 2, (uint64_t)&v194, 0, 0);
              v193[0] = v234;
              v193[1] = v235;
              v193[2] = v236;
              v207 = 257;
              sub_22F26D368(v53, (uint64_t)v193, 1, (uint64_t)&v205, (uint64_t)&v209);
              v234 = v209;
              v235 = v210;
              v236 = v211;
              v192[0] = v237;
              v192[1] = v238;
              v192[2] = v239;
              v207 = 257;
              sub_22F26D368(v53, (uint64_t)v192, 1, (uint64_t)&v205, (uint64_t)&v209);
              v237 = v209;
              v238 = v210;
              v239 = v211;
            }
            else
            {
              v104 = v60;
              *(_QWORD *)&v209 = ".shuffle.pre_cond";
              LOWORD(v211) = 259;
              v64 = (_QWORD *)operator new();
              llvm::BasicBlock::BasicBlock();
              *(_QWORD *)&v209 = ".shuffle.then";
              LOWORD(v211) = 259;
              v98 = (_QWORD *)operator new();
              llvm::BasicBlock::BasicBlock();
              *(_QWORD *)&v209 = ".shuffle.exit";
              LOWORD(v211) = 259;
              v105 = (_QWORD *)operator new();
              llvm::BasicBlock::BasicBlock();
              v65 = *(_QWORD *)(a2 + 320);
              sub_22E5ED9B4((_QWORD *)a2, v64, 0);
              v66 = v234;
              v67 = llvm::PointerType::get();
              LOWORD(v211) = 257;
              v68 = (llvm::PHINode *)sub_22E3C4B80(v53, v67, 2, (uint64_t)&v209);
              if ((BYTE8(v235) & 3) != 0)
                v66 = sub_22F28ABCC(&v234, (_QWORD *)a2);
              sub_22E3C4C50(v68, v66, v65);
              v69 = v237;
              v70 = llvm::PointerType::get();
              LOWORD(v211) = 257;
              v71 = (llvm::PHINode *)sub_22E3C4B80(v116, v70, 2, (uint64_t)&v209);
              if ((BYTE8(v238) & 3) != 0)
                v69 = sub_22F28ABCC(&v237, (_QWORD *)a2);
              sub_22E3C4C50(v71, v69, v65);
              *(_QWORD *)&v234 = v68;
              DWORD2(v235) = 0;
              v236 = 0uLL;
              *(_QWORD *)&v237 = v71;
              DWORD2(v238) = 0;
              v239 = 0uLL;
              v97 = v71;
              if ((BYTE8(v232) & 3) != 0)
                sub_22F28ABCC(&v231, (_QWORD *)a2);
              v74 = *(_QWORD *)(a2 + 96);
              LOWORD(v211) = 257;
              v53 = v116;
              sub_22E3C1338(v116, (uint64_t)v68, v74, (uint64_t)&v209);
              v207 = 257;
              PtrDiff = (uint64_t *)llvm::IRBuilderBase::CreatePtrDiff();
              llvm::Type::getInt64Ty(*(llvm::Type **)(a2 + 336), v76);
              v77 = llvm::ConstantInt::get();
              v207 = 257;
              v78 = sub_22E3C18F4((uint64_t)v116, 38, PtrDiff, v77, (uint64_t)&v205);
              v79 = llvm::User::operator new((llvm::User *)0x40);
              MEMORY[0x23489C09C](v79, v98, v105, v78, 0);
              LOWORD(v211) = 257;
              sub_22E3C12C8(v116, v79, (uint64_t)&v209);
              sub_22E5ED9B4((_QWORD *)a2, v98, 0);
              v219[0] = v234;
              v219[1] = v235;
              v219[2] = v236;
              v216 = 0;
              v217 = 0u;
              v218 = 0u;
              v80 = (unint64_t *)sub_22E4E6994(a2, (uint64_t)v219, 0, v104, v107, 2, (uint64_t)&v216, 0);
              v81 = sub_22E5DD1E8(a2, v80, v104, a7, v107);
              v215[0] = v237;
              v215[1] = v238;
              v215[2] = v239;
              v212 = 0;
              v213 = 0u;
              v214 = 0u;
              sub_22E4E8134(a2, v81, (uint64_t)v215, 0, v104, 2, (uint64_t)&v212, 0, 0);
              v208[0] = v234;
              v208[1] = v235;
              v208[2] = v236;
              v207 = 257;
              sub_22F26D368(v116, (uint64_t)v208, 1, (uint64_t)&v205, (uint64_t)&v209);
              v204[0] = v237;
              v204[1] = v238;
              v204[2] = v239;
              v203 = 257;
              sub_22F26D368(v116, (uint64_t)v204, 1, (uint64_t)v202, (uint64_t)&v205);
              if ((BYTE8(v210) & 3) != 0)
                v82 = sub_22F28ABCC(&v209, (_QWORD *)a2);
              else
                v82 = v209;
              sub_22E3C4C50(v68, v82, (uint64_t)v98);
              if ((v206 & 3) != 0)
                v83 = sub_22F28ABCC(&v205, (_QWORD *)a2);
              else
                v83 = v205;
              sub_22E3C4C50(v97, v83, (uint64_t)v98);
              sub_22E5EDA70(a2);
              sub_22E5ED9B4((_QWORD *)a2, v105, 0);
            }
            v52 &= v57 - 1;
          }
          v56 = v57 >> 1;
        }
        while (v57 >= 2);
        if ((BYTE8(v190) & 3) != 0)
          v84 = sub_22F28ABCC(&v189, (_QWORD *)a2);
        else
          v84 = v189;
        v85 = *(_QWORD *)(a2 + 96);
        LOWORD(v233) = 257;
        v86 = sub_22E3C1338(v53, v84, v85, (uint64_t)&v231);
        v87 = *(_QWORD *)(v115 + 16816);
        v237 = v113;
        *(_QWORD *)&v238 = v114;
        *((_QWORD *)&v238 + 1) = __PAIR64__(v102, v112);
        *(_QWORD *)&v239 = v111;
        *((_QWORD *)&v239 + 1) = v110;
        sub_22E6281E0(*(_QWORD **)(a2 + 144), v87, (uint64_t)&v234);
        sub_22E4E8134(a2, v86, (uint64_t)&v237, 0, v87, 2, (uint64_t)&v234, 0, 0);
      }
      else
      {
        v32 = v28;
        v33 = v12;
        v34 = *(_QWORD *)(v12 + 8);
        v35 = sub_22E619D68(v34);
        switch(v35)
        {
          case 2:
            v234 = v189;
            v235 = v190;
            v236 = v191;
            sub_22E6281E0(*(_QWORD **)(a2 + 144), v34, (uint64_t)&v228);
            v237 = v234;
            v238 = v235;
            v239 = v236;
            v40 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
            v231 = v228;
            v232 = v229;
            v233 = v230;
            v134 = 0;
            v135 = 0;
            *((_QWORD *)&v133 + 1) = 0;
            v136 = 0;
            v137 = 0;
            v138 = 0;
            v139 = 0;
            v140 = 0;
            v141 = 2;
            LODWORD(v133) = 0;
            v142 = 0u;
            v143 = 0u;
            sub_22E3C113C((uint64_t)&v133, (__int128 *)&v237, v34, 2, (__int128 *)&v231, v40);
            v41 = *(_QWORD *)(v12 + 8);
            sub_22E6281E0(*(_QWORD **)(a2 + 144), v41, (uint64_t)&v231);
            v237 = __PAIR128__(v27, v32);
            *(_QWORD *)&v238 = v29;
            *((_QWORD *)&v238 + 1) = __PAIR64__(v120, v30);
            v239 = v31;
            v42 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
            v234 = v231;
            v235 = v232;
            *(_QWORD *)&v236 = v233;
            v123 = 0;
            v124 = 0;
            *((_QWORD *)&v122 + 1) = 0;
            v125 = 0;
            v126 = 0;
            v127 = 0;
            v128 = 0;
            v129 = 0;
            v130 = 2;
            LODWORD(v122) = 0;
            v131 = 0u;
            v132 = 0u;
            sub_22E3C113C((uint64_t)&v122, (__int128 *)&v237, v41, 2, (__int128 *)&v234, v42);
            sub_22E4EF4B8((_QWORD *)a2, &v133, &v122, *(_QWORD *)(v12 + 8), 0, 0);
            break;
          case 1:
            sub_22E6281E0(*(_QWORD **)(a2 + 144), v34, (uint64_t)&v231);
            v237 = __PAIR128__(v27, v32);
            *(_QWORD *)&v238 = v29;
            *((_QWORD *)&v238 + 1) = __PAIR64__(v120, v30);
            v239 = v31;
            v43 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
            v234 = v231;
            v235 = v232;
            *(_QWORD *)&v236 = v233;
            v154 = 0uLL;
            *((_QWORD *)&v153 + 1) = 0;
            LODWORD(v155) = 0;
            *((_QWORD *)&v155 + 1) = 0;
            *(_QWORD *)&v156 = 0;
            v157 = 0uLL;
            *(_QWORD *)((char *)&v158 + 4) = 2;
            LODWORD(v153) = 0;
            v159 = 0u;
            v160 = 0u;
            sub_22E3C113C((uint64_t)&v153, (__int128 *)&v237, v34, 2, (__int128 *)&v234, v43);
            sub_22EFF605C(v12);
            v242 = v158;
            v243 = v159;
            v244 = v160;
            v238 = v154;
            v239 = v155;
            v240 = v156;
            v241 = v157;
            *(_QWORD *)&v234 = a2;
            *((_QWORD *)&v234 + 1) = v116;
            LOWORD(v235) = 0;
            v245 = v161;
            v237 = v153;
            v45 = sub_22E5027E0((uint64_t)&v234, (uint64_t)&v237, v44);
            v47 = v46;
            v234 = v189;
            v235 = v190;
            v236 = v191;
            v48 = *(_QWORD *)(v12 + 8);
            sub_22E6281E0(*(_QWORD **)(a2 + 144), *(_QWORD *)(v33 + 8), (uint64_t)&v228);
            v237 = v234;
            v238 = v235;
            v239 = v236;
            v49 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
            v231 = v228;
            v232 = v229;
            v233 = v230;
            v145 = 0uLL;
            *((_QWORD *)&v144 + 1) = 0;
            LODWORD(v146) = 0;
            *((_QWORD *)&v146 + 1) = 0;
            *(_QWORD *)&v147 = 0;
            v148 = 0uLL;
            *(_QWORD *)((char *)&v149 + 4) = 2;
            LODWORD(v144) = 0;
            v150 = 0u;
            v151 = 0u;
            sub_22E3C113C((uint64_t)&v144, (__int128 *)&v237, v48, 2, (__int128 *)&v231, v49);
            v242 = v149;
            v243 = v150;
            v244 = v151;
            v238 = v145;
            v239 = v146;
            v240 = v147;
            v241 = v148;
            *(_QWORD *)&v234 = a2;
            *((_QWORD *)&v234 + 1) = v116;
            LOWORD(v235) = 0;
            v245 = v152;
            v237 = v144;
            sub_22E5025C8((uint64_t *)&v234, v45, v47, (uint64_t)&v237, 0);
            break;
          case 0:
            v169[0] = v32;
            v169[1] = v27;
            v169[2] = v29;
            v170 = v30;
            v171 = v120;
            v172 = v31;
            v36 = *(_QWORD *)(v12 + 8);
            sub_22EFF605C(v12);
            v166 = 0;
            v167 = 0u;
            v168 = 0u;
            v38 = sub_22E4E6994(a2, (uint64_t)v169, 0, v36, v37, 2, (uint64_t)&v166, 0);
            v165[0] = v189;
            v165[1] = v190;
            v165[2] = v191;
            v39 = *(_QWORD *)(v12 + 8);
            v162 = 0;
            v163 = 0u;
            v164 = 0u;
            sub_22E4E8134(a2, v38, (uint64_t)v165, 0, v39, 2, (uint64_t)&v162, 0, 0);
            break;
        }
      }
      v10 = v118 + 1;
      v7 = v119 + 1;
      v11 = v116;
      v8 = a2;
      v9 = a1;
      if (v119 + 1 == v108)
        return;
    }
    v21 = a5[1];
    v184[0] = *a5;
    v184[1] = v21;
    v184[2] = a5[2];
    LOWORD(v236) = 257;
    sub_22E486A58(v11, (uint64_t)v184, v10, (uint64_t)&v234, (uint64_t)&v237);
    v182[0] = v237;
    v182[1] = v238;
    v182[2] = v239;
    LOWORD(v233) = 257;
    sub_22E3BEE6C(v11, v182, v14, (uint64_t)&v231, (uint64_t)v183);
    v22 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF0);
    v23 = *(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0);
    if (!v23 || *(_BYTE *)(v23 + 16) != 39)
      v23 = sub_22F10CF48(*(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0));
    sub_22E4E98F8(v8, v183, v23, 0, 0, &v234);
    v121 = v234;
    v103 = v235;
    v16 = DWORD2(v235);
    v20 = HIDWORD(v235);
    v106 = v236;
    v24 = a6[1];
    v181[0] = *a6;
    v181[1] = v24;
    v181[2] = a6[2];
    LOWORD(v233) = 257;
    sub_22E486A58(v11, (uint64_t)v181, v10, (uint64_t)&v231, (uint64_t)&v234);
    v113 = v234;
    v179[0] = v234;
    v114 = v235;
    v179[1] = v235;
    v102 = HIDWORD(v235);
    v112 = DWORD2(v235);
    v110 = *((_QWORD *)&v236 + 1);
    v111 = v236;
    v179[2] = v236;
    LOWORD(v236) = 257;
    sub_22E3BEE6C(v11, v179, v14, (uint64_t)&v234, (uint64_t)v180);
    v25 = *v22;
    if (!*v22 || *(_BYTE *)(v25 + 16) != 39)
      v25 = sub_22F10CF48(*v22);
    v15 = v103;
    sub_22E4E98F8(v8, v180, v25, 0, 0, &v189);
    v17 = 0;
    goto LABEL_13;
  }
}

uint64_t sub_22E5DD1E8(uint64_t a1, unint64_t *a2, unint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t RuntimeFunction;
  llvm::Value *v15;
  llvm::Value *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  llvm::Value *v20;
  unint64_t *v21;
  _QWORD v24[4];
  __int16 v25;
  _QWORD v26[4];

  v26[3] = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD *)(a1 + 144);
  v10 = (uint64_t *)(a1 + 272);
  sub_22EF5CCD0(*(_QWORD *)(v9 + 144), *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0), (uint64_t)v24);
  if (v24[0] >= 5)
    v11 = 64;
  else
    v11 = 32;
  v12 = sub_22EF60A6C(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), v11, 1);
  v13 = sub_22E5D9770(a1, a2, a3, v12, a5);
  RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
  v25 = 257;
  v16 = sub_22E479C7C(a1, RuntimeFunction, v15, 0, 0, (uint64_t)v24);
  v17 = *(_QWORD *)(v9 + 16);
  v25 = 257;
  v18 = sub_22E3BF45C(v10, (uint64_t)v16, v17, 1, (uint64_t)v24);
  v19 = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
  v26[0] = v13;
  v26[1] = a4;
  v26[2] = v18;
  v25 = 257;
  v21 = (unint64_t *)sub_22E479C7C(a1, v19, v20, (uint64_t)v26, 3, (uint64_t)v24);
  return sub_22E5D9770(a1, v21, v12, a3, a5);
}

llvm::Constant **sub_22E5DD39C(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  llvm::Value *v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Constant **result;
  llvm::Type *v9;
  uint64_t *v10;
  uint64_t NullValue;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[4];
  __int16 v17;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(llvm::Value **)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v17 = 257;
  result = (llvm::Constant **)sub_22E479C7C((uint64_t)a2, v4, v5, v6, v7, (uint64_t)v16);
  if (*(_BYTE *)(a1 + 72))
  {
    v10 = (uint64_t *)result;
    v17 = 257;
    NullValue = llvm::Constant::getNullValue(*result, v9);
    v12 = sub_22E3C18F4((uint64_t)(a2 + 34), 33, v10, NullValue, (uint64_t)v16);
    v16[0] = "omp_if.then";
    v17 = 259;
    v13 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v16[0] = "omp_if.end";
    v17 = 259;
    v14 = operator new();
    *(_QWORD *)(a1 + 80) = llvm::BasicBlock::BasicBlock();
    v15 = llvm::User::operator new((llvm::User *)0x40);
    MEMORY[0x23489C09C](v15, v13, v14, v12, 0);
    v17 = 257;
    sub_22E3C12C8(a2 + 34, v15, (uint64_t)v16);
    return (llvm::Constant **)sub_22E5ED9B4(a2, v13, 0);
  }
  return result;
}

llvm::Value *sub_22E5DD510(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  llvm::Value *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[32];
  __int16 v9;

  v3 = a1[5];
  v4 = (llvm::Value *)a1[6];
  v5 = a1[7];
  v6 = a1[8];
  v9 = 257;
  return sub_22E479C7C(a2, v3, v4, v5, v6, (uint64_t)v8);
}

void sub_22E5DD548()
{
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22E5DD55C(uint64_t a1)
{
  sub_22E5DA488(a1);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22E5DD580(uint64_t a1, unsigned int *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  char v10;

  if (a2)
  {
    v4 = *a2;
    v5 = v4 >> 24;
    v6 = a2[4];
    if ((_DWORD)v6)
    {
      v7 = 8 * v6;
      v8 = v5 + 8 * ((v4 >> 18) & 1) + 8;
      do
      {
        v9 = *(_DWORD **)((char *)a2 + v8);
        if (v9)
        {
          if ((*v9 & 0x300) == 0x100)
          {
            v10 = *(_BYTE *)(a1 + 256);
            *(_BYTE *)(a1 + 256) = 1;
            sub_22E5DA0E0(a1, v9);
            *(_BYTE *)(a1 + 256) = v10;
          }
          else
          {
            sub_22E5DA0E0(a1, v9);
          }
        }
        v8 += 8;
        v7 -= 8;
      }
      while (v7);
      v5 = *((unsigned __int8 *)a2 + 3);
    }
    sub_22E5DA0E0(a1, *(_DWORD **)((char *)a2 + v5));
  }
}

uint64_t sub_22E5DD62C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  char v3;

  if (a2)
  {
    v2 = result;
    if ((*(_DWORD *)a2 & 0x7C0000) == 0x100000)
    {
      v3 = *(_BYTE *)(result + 256);
      *(_BYTE *)(result + 256) = 1;
      result = sub_22E5DA0E0(result, *(_QWORD *)(a2 + 16));
      *(_BYTE *)(v2 + 256) = v3;
    }
    else
    {
      return sub_22E5DA0E0(result, *(_QWORD *)(a2 + 16));
    }
  }
  return result;
}

void sub_22E5DD68C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  if (a2)
  {
    sub_22F0D492C(a2);
    v9 = v11;
    v3 = v13;
    v10 = v12;
    v4 = v14;
    v6 = *((_QWORD *)&v11 + 1);
    v5 = (uint64_t *)v11;
    if ((_QWORD)v11 != v13 || *((_QWORD *)&v11 + 1) != v14)
    {
      do
      {
        v8 = v5;
        if ((v6 & 3) != 0)
        {
          if ((v6 & 0xFFFFFFFFFFFFFFFCLL) != 0)
            v8 = (_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFCLL) + 40);
          else
            v8 = (_QWORD *)sub_22F3AC1A8(*v5);
        }
        if (*v8)
          sub_22E5DA0E0(a1, *v8);
        if ((v6 & 3) != 0)
        {
          if (v6 >= 4)
            sub_22F0D8720((uint64_t)&v9);
          else
            sub_22F3F2FE0((uint64_t)&v9, 1);
        }
        else
        {
          *(_QWORD *)&v9 = v5 + 1;
        }
        v6 = *((_QWORD *)&v9 + 1);
        v5 = (uint64_t *)v9;
      }
      while (v9 != __PAIR128__(v4, v3));
    }
  }
}

void sub_22E5DD76C(uint64_t a1, _DWORD *a2)
{
  char v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[24];

  if ((a2[7] & 0x7Fu) - 60 > 6)
    return;
  sub_22EF95D10((uint64_t)a2);
  if (v4)
    return;
  v5 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 32))(a2);
  v6 = (_QWORD *)v5;
  v32 = v5;
  if ((*(_BYTE *)(v5 + 29) & 1) != 0 && sub_22F282498(v5))
    return;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 1856);
  if (v7)
  {
    v8 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 32))(v7, v6);
    if (v8)
    {
      v9 = v8;
      if (!*(_BYTE *)(a1 + 257))
      {
        if ((*(_BYTE *)(v8 + 29) & 1) == 0)
          return;
        sub_22EFC8E88(v8);
        v11 = *(uint64_t **)v10;
        v12 = *(unsigned int *)(v10 + 8);
        i = *(uint64_t **)v10;
        if ((_DWORD)v12)
        {
          v14 = 8 * v12;
          for (i = *(uint64_t **)v10; *(_WORD *)(*i + 32) != 478; ++i)
          {
            v14 -= 8;
            if (!v14)
              return;
          }
        }
        if (i == &v11[v12])
          return;
        do
        {
          v17 = *v11++;
          v16 = v17;
        }
        while (*(_WORD *)(v17 + 32) != 478);
        v18 = (*(_DWORD *)(v16 + 36) - 29);
        if (v18 > 0x30)
          return;
        if (((1 << (*(_BYTE *)(v16 + 36) - 29)) & 0x100240000C101) == 0)
        {
          if (v18 != 17)
            return;
          v19 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFFFF0)
                                                           + 8) & 0xFFFFFFFFFFFFFFF0)
                                   + 16);
          if (v19 != 39 && v19 != 32)
            return;
        }
      }
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) & 0xFE) == 0x28)
      {
        if (!*(_BYTE *)(a1 + 257))
          return;
      }
      else
      {
        sub_22E3BA850(a1 + 112, v6);
      }
    }
  }
  if (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 1856) && !*(_BYTE *)(a1 + 257))
  {
    v15 = *(_QWORD *)(v6[6] & 0xFFFFFFFFFFFFFFF0);
  }
  else
  {
    v15 = *(_QWORD *)(v6[6] & 0xFFFFFFFFFFFFFFF0);
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
      return;
  }
  if ((*(_DWORD *)(v15 + 16) & 0x800) != 0)
    v20 = (_QWORD *)(a1 + 64);
  else
    v20 = (_QWORD *)(a1 + 16);
  sub_22F2782A4((uint64_t)v33, (uint64_t)v20, &v32);
  if (v33[16])
  {
    v22 = (uint64_t *)v20[4];
    v21 = v20[5];
    if ((unint64_t)v22 >= v21)
    {
      v24 = (_QWORD *)v20[3];
      v25 = v22 - v24;
      v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 61)
        abort();
      v27 = v21 - (_QWORD)v24;
      if (v27 >> 2 > v26)
        v26 = v27 >> 2;
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
        v28 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v28 = v26;
      if (v28)
      {
        if (v28 >> 61)
          sub_22E3B3F8C();
        v29 = (char *)operator new(8 * v28);
      }
      else
      {
        v29 = 0;
      }
      v30 = (uint64_t *)&v29[8 * v25];
      *v30 = v32;
      v23 = v30 + 1;
      if (v22 != v24)
      {
        do
        {
          v31 = *--v22;
          *--v30 = v31;
        }
        while (v22 != v24);
        v22 = (uint64_t *)v20[3];
      }
      v20[3] = v30;
      v20[4] = v23;
      v20[5] = &v29[8 * v28];
      if (v22)
        operator delete(v22);
    }
    else
    {
      *v22 = v32;
      v23 = v22 + 1;
    }
    v20[4] = v23;
  }
}

void sub_22E5DDA64(uint64_t a1, uint64_t a2)
{
  char v5;
  unint64_t v6;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                + 16) == 40)
    sub_22E5DD76C(a1, (_DWORD *)a2);
  if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x40
    && (*(_DWORD *)(a2 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9
    && *(_QWORD *)(a2 + 88) >= 8uLL)
  {
    v5 = *(_BYTE *)(a1 + 256);
    *(_BYTE *)(a1 + 256) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0)
                                                            + 8) & 0xFFFFFFFFFFFFFFF0)
                                    + 16) == 40;
    v6 = sub_22EFBC5B4(a2);
    sub_22E5DA0E0(a1, v6);
    *(_BYTE *)(a1 + 256) = v5;
  }
}

void sub_22E5DDB24(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  uint64_t v4;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _DWORD *v14;
  char v15;
  unsigned int *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  unsigned int *v25;
  void *v26;
  uint64_t v27;
  _QWORD v28[3];

  v28[2] = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v3 = *(unsigned int **)(a2 + 24);
    if (v3)
    {
      if (*((_BYTE *)v3 + 8))
      {
        v4 = *(_QWORD *)&v3[2 * *v3 + 4 + 2 * v3[1]];
        if (v4)
        {
          if (*(_BYTE *)v4 == 7)
          {
            v26 = v28;
            v27 = 0x400000000;
            sub_22F421BB4((uint64_t)&v26, *(_DWORD *)(a2 + 8));
            if ((_DWORD)v27 == 1 && *(_DWORD *)v26 == 89)
            {
              sub_22E5DD68C(a1, *(_QWORD *)(v4 + 8 * *(unsigned int *)(v4 + 8) + 32));
              v6 = v26;
              if (v26 == v28)
                return;
LABEL_47:
              free(v6);
              return;
            }
            v7 = *(unsigned int **)(a2 + 24);
            if (v7)
            {
              v8 = *v7;
              v7 += 4;
              v24 = v8;
            }
            else
            {
              v24 = 0;
            }
            v9 = v26;
            if (*((_DWORD *)v26 + v27 - 1) == 40)
              v10 = sub_22F421B08(*(_DWORD *)(a2 + 8));
            else
              v10 = 0;
            v11 = *(unsigned int *)(v4 + 8);
            if (!(_DWORD)v11)
            {
LABEL_45:
              if (v9 == v28)
                return;
              v6 = v9;
              goto LABEL_47;
            }
            v23 = v7;
            v12 = (_QWORD *)(v4 + (8 * v11 + 40));
            v13 = &v12[2 * v11];
            v25 = &v7[2 * v24];
LABEL_17:
            if ((*v12 & 6) != 2)
              goto LABEL_43;
            v14 = (_DWORD *)(*v12 & 0xFFFFFFFFFFFFFFF8);
            v15 = *(_BYTE *)(a1 + 257);
            if (!v10)
              goto LABEL_40;
            *(_BYTE *)(a1 + 257) = 0;
            if (!v24)
              goto LABEL_40;
            v16 = v23;
            while (1)
            {
              v17 = *(_QWORD *)v16;
              v18 = *(_DWORD *)(*(_QWORD *)v16 + 8);
              if (v18 > 42)
                break;
              if (v18 != 29)
              {
                if (v18 != 37)
                  goto LABEL_37;
                goto LABEL_27;
              }
              v19 = v17 + 40;
LABEL_31:
              v20 = *(unsigned int *)(v17 + 16);
              if ((_DWORD)v20)
              {
                v21 = 8 * v20;
                while (1)
                {
                  v22 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v19 + 16) + 32))(*(_QWORD *)(*(_QWORD *)v19 + 16));
                  if (v22 == (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v14 + 32))(v14))
                    break;
                  v19 += 8;
                  v21 -= 8;
                  if (!v21)
                  {
                    LODWORD(v20) = *(unsigned __int8 *)(a1 + 257);
                    goto LABEL_36;
                  }
                }
                *(_BYTE *)(a1 + 257) = 1;
LABEL_40:
                sub_22E5DD76C(a1, v14);
                if ((v14[7] & 0x7F) == 0x3F)
                  sub_22E5DDA64(a1, (uint64_t)v14);
                *(_BYTE *)(a1 + 257) = v15;
LABEL_43:
                v12 += 2;
                if (v12 == v13)
                {
                  v9 = v26;
                  goto LABEL_45;
                }
                goto LABEL_17;
              }
LABEL_36:
              if ((_DWORD)v20)
                goto LABEL_40;
LABEL_37:
              v16 += 2;
              if (v16 == v25)
                goto LABEL_40;
            }
            if (v18 != 43 && v18 != 77)
              goto LABEL_37;
LABEL_27:
            if (v18 != 43)
              v17 = 0;
            v19 = v17 + 64;
            goto LABEL_31;
          }
        }
      }
    }
  }
}

void sub_22E5DDDCC(uint64_t a1, _DWORD *a2)
{
  char v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  _QWORD *v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  if (a2)
  {
    v3 = *(_BYTE *)(a1 + 256);
    if ((*a2 & 0x300) != 0x100)
      *(_BYTE *)(a1 + 256) = 0;
    sub_22F0D492C((uint64_t)a2);
    v10 = v12;
    v4 = v14;
    v11 = v13;
    v5 = v15;
    v7 = *((_QWORD *)&v12 + 1);
    v6 = (uint64_t *)v12;
    if ((_QWORD)v12 != v14 || *((_QWORD *)&v12 + 1) != v15)
    {
      do
      {
        v9 = v6;
        if ((v7 & 3) != 0)
        {
          if ((v7 & 0xFFFFFFFFFFFFFFFCLL) != 0)
            v9 = (_QWORD *)((v7 & 0xFFFFFFFFFFFFFFFCLL) + 40);
          else
            v9 = (_QWORD *)sub_22F3AC1A8(*v6);
        }
        if (*v9)
          sub_22E5DA0E0(a1, *v9);
        if ((v7 & 3) != 0)
        {
          if (v7 >= 4)
            sub_22F0D8720((uint64_t)&v10);
          else
            sub_22F3F2FE0((uint64_t)&v10, 1);
        }
        else
        {
          *(_QWORD *)&v10 = v6 + 1;
        }
        v7 = *((_QWORD *)&v10 + 1);
        v6 = (uint64_t *)v10;
      }
      while (v10 != __PAIR128__(v5, v4));
    }
    *(_BYTE *)(a1 + 256) = v3;
  }
}

uint64_t sub_22E5DDED0(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15[161];

  v2 = a2;
  v15[160] = *MEMORY[0x24BDAC8D0];
  if (a2 >= 5)
  {
    v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40)
      v2 = v6 + 1;
    else
      v2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v9 = 0;
    v10 = v15;
    do
    {
      v11 = a1 + v9;
      v12 = *(_QWORD *)(a1 + v9 + 8);
      if ((v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        *v10 = v12;
        v13 = v11 + 16;
        sub_22F289928((uint64_t)(v10 + 1), v11 + 16);
        v10 += 40;
        sub_22F2895A0(v13);
      }
      v9 += 320;
    }
    while (v9 != 1280);
    if (v2 > 4)
    {
      *(_DWORD *)a1 &= ~1u;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](320 * v2, 8);
      *(_QWORD *)(a1 + 16) = v2;
    }
    return sub_22F28984C(a1, v15, v10);
  }
  else
  {
    v7 = *(uint64_t **)(a1 + 8);
    v8 = *(unsigned int *)(a1 + 16);
    if (v2 > 4)
    {
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](320 * v2, 8);
      *(_QWORD *)(a1 + 16) = v2;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_22F28984C(a1, v7, &v7[40 * v8]);
    return llvm::deallocate_buffer((llvm *)v7, (void *)(320 * v8));
  }
}

uint64_t sub_22E5DE08C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;

  if (a1 != a2)
  {
    v5 = a2 + 16;
    v4 = *(_QWORD **)a2;
    if (*(_QWORD *)a2 == a2 + 16)
    {
      v7 = (_DWORD *)(a2 + 8);
      v8 = *(unsigned int *)(a2 + 8);
      v9 = *(unsigned int *)(a1 + 8);
      if (v9 >= v8)
      {
        if ((_DWORD)v8)
        {
          v11 = &v4[2 * v8];
          v12 = *(_QWORD **)a1;
          do
          {
            *v12 = *v4;
            v12[1] = v4[1];
            v4 += 2;
            v12 += 2;
          }
          while (v4 != v11);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) >= v8)
        {
          if ((_DWORD)v9)
          {
            v13 = &v4[2 * v9];
            v14 = *(_QWORD **)a1;
            do
            {
              *v14 = *v4;
              v14[1] = v4[1];
              v4 += 2;
              v14 += 2;
            }
            while (v4 != v13);
          }
          else
          {
            v9 = 0;
          }
          v10 = v8;
        }
        else
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v9 = 0;
          v10 = *v7;
        }
        if (v9 != v10)
          memcpy((void *)(*(_QWORD *)a1 + 16 * v9), (const void *)(*(_QWORD *)a2 + 16 * v9), *(_QWORD *)a2 + 16 * v10 - (*(_QWORD *)a2 + 16 * v9));
      }
      *(_DWORD *)(a1 + 8) = v8;
    }
    else
    {
      v6 = *(_QWORD **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(_QWORD **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
    }
    *v7 = 0;
  }
  return a1;
}

_OWORD *sub_22E5DE1DC(void **a1, _OWORD *a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = (v2 - (_BYTE *)*a1) >> 6;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 58)
    abort();
  v8 = (_BYTE *)a1[2] - v3;
  if (v8 >> 5 > v5)
    v5 = v8 >> 5;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0)
    v9 = 0x3FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  if (v9)
  {
    if (v9 >> 58)
      sub_22E3B3F8C();
    v10 = (char *)operator new(v9 << 6);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[64 * v4];
  v12 = a2[1];
  *(_OWORD *)v11 = *a2;
  *((_OWORD *)v11 + 1) = v12;
  v13 = a2[3];
  *((_OWORD *)v11 + 2) = a2[2];
  *((_OWORD *)v11 + 3) = v13;
  v14 = v11 + 64;
  if (v2 != v3)
  {
    do
    {
      v15 = *((_OWORD *)v2 - 4);
      v16 = *((_OWORD *)v2 - 3);
      v17 = *((_OWORD *)v2 - 1);
      *((_OWORD *)v11 - 2) = *((_OWORD *)v2 - 2);
      *((_OWORD *)v11 - 1) = v17;
      *((_OWORD *)v11 - 4) = v15;
      *((_OWORD *)v11 - 3) = v16;
      v11 -= 64;
      v2 -= 64;
    }
    while (v2 != v3);
    v2 = (char *)*a1;
  }
  *a1 = v11;
  a1[1] = v14;
  a1[2] = &v10[64 * v9];
  if (v2)
    operator delete(v2);
  return v14;
}

uint64_t sub_22E5DE2CC(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  llvm::PointerType *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  llvm::Type *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  llvm::Value *v34;
  uint64_t v35;
  uint64_t v36;
  llvm::Type *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t RuntimeFunction;
  llvm::Value *v42;
  uint64_t v44;
  llvm::Type **v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _QWORD v55[3];
  int v56;
  __int128 v57;
  int v58;
  _OWORD v59[2];
  __int128 v60;
  _QWORD v61[3];
  char v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  _BYTE v71[40];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE v78[20];
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD **)a1;
  v5 = (uint64_t *)(a2 + 272);
  v45 = *(llvm::Type ***)(a1 + 48);
  v6 = (uint64_t *)sub_22F24C2B0(*(_QWORD *)a1 + 4480, (uint64_t *)(a1 + 16))[1];
  v8 = llvm::ConstantPointerNull::get(*(llvm::ConstantPointerNull **)(v4[1] + 96), v7);
  if (v6)
  {
    v9 = *(_QWORD *)(v4[1] + 96);
    LOWORD(v64) = 257;
    v8 = sub_22E3D3028(v5, v6, v9, (uint64_t)v61);
  }
  v46 = v8;
  v10 = *(uint64_t **)(a1 + 16);
  v11 = *(_QWORD *)(v4[1] + 96);
  LOWORD(v64) = 257;
  v44 = sub_22E3D3028(v5, v10, v11, (uint64_t)v61);
  v63 = 1;
  v12 = *(_QWORD *)(a2 + 1992) - *(_QWORD *)(a2 + 2000);
  v13 = *(_QWORD *)(a2 + 2312);
  v62 = *(_BYTE *)(a2 + 2893);
  *(_BYTE *)(a2 + 2893) = 0;
  v14 = *(_QWORD *)(a2 + 2872);
  v61[0] = v12;
  v61[1] = v14;
  v61[2] = v13;
  *(_QWORD *)(a2 + 2872) = v12;
  v65 = 0;
  v66 = 0;
  v64 = a2;
  v67 = 0;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v47 = v4;
  v15 = (llvm::Type *)llvm::ArrayType::get(*(llvm::ArrayType **)(v4[1] + 96), *(llvm::Type **)(a1 + 32));
  *(_QWORD *)&v72 = "captured_vars_addrs";
  LOWORD(v74) = 259;
  v16 = sub_22E4D84FC(a2, v15, (uint64_t)&v72);
  v18 = v16 & 0xFFFFFFFFFFFFFFF8;
  if (v16 <= 7)
    v18 = 0;
  v50 = 0;
  v51 = (uint64_t *)v18;
  v19 = v17 & 0xFFFFFFFFFFFFFFF8;
  if (v16 <= 7)
    v19 = 0;
  v49 = v19;
  v20 = v5;
  if (v16 >= 8)
    v50 = 1 << (v17 & 7 | (8 * (v16 & 7)));
  *(_QWORD *)&v78[12] = 0;
  *(_QWORD *)&v78[4] = 0;
  v48 = a1;
  v21 = *(_QWORD *)(a1 + 32);
  if (v21)
  {
    v22 = 0;
    v23 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
    v24 = *(_QWORD *)(v48 + 24);
    v25 = 8 * v21;
    v26 = v20;
    do
    {
      v27 = *(_QWORD *)(v24 + 8 * v22);
      v55[0] = v51;
      v55[1] = v49;
      v55[2] = v50;
      v56 = 0;
      v57 = *(_OWORD *)v78;
      v58 = *(_DWORD *)&v78[16];
      LOWORD(v74) = 257;
      sub_22E486A58(v20, (uint64_t)v55, v22, (uint64_t)&v72, (uint64_t)v59);
      v28 = *(_QWORD *)(a2 + 96);
      if (*(_BYTE *)(*(_QWORD *)v27 + 8) == 13)
      {
        LOWORD(v74) = 257;
        v29 = sub_22E3C1740(v20, 48, v27, v28, (uint64_t)&v72);
      }
      else
      {
        LOWORD(v74) = 257;
        v29 = sub_22E3C1338(v20, v27, v28, (uint64_t)&v72);
      }
      v30 = v29;
      v52 = v59[0];
      v53 = v59[1];
      v54 = v60;
      v31 = sub_22EF5B848(v23, *(_QWORD *)(v23 + 16816), 0);
      v72 = v52;
      v73 = v53;
      v74 = v54;
      sub_22E6281E0(*(_QWORD **)(a2 + 144), v31, (uint64_t)v71);
      sub_22E4E8134(a2, v30, (uint64_t)&v72, 0, v31, 2, (uint64_t)v71, 0, 0);
      ++v22;
      v25 -= 8;
      v20 = v26;
    }
    while (v25);
  }
  v32 = *(_QWORD *)(v48 + 40);
  if (v32)
  {
    v34 = sub_22E4D86E0((_QWORD *)a2, v32);
    v35 = *(_QWORD *)(a2 + 24);
    LOWORD(v74) = 257;
    v33 = sub_22E3BF45C(v20, (uint64_t)v34, v35, 0, (uint64_t)&v72);
  }
  else
  {
    v33 = llvm::ConstantInt::get();
  }
  v36 = v33;
  v37 = *(llvm::Type **)(a2 + 24);
  if (v45)
  {
    LOWORD(v74) = 257;
    v38 = sub_22E3E5C98(v20, v45, v37, (uint64_t)&v72);
  }
  else
  {
    v38 = llvm::ConstantInt::get();
  }
  v39 = v38;
  *(_QWORD *)&v72 = sub_22E59F7E4(v47, a2, *(_DWORD *)(v48 + 8));
  *((_QWORD *)&v72 + 1) = sub_22E59F964((uint64_t)v47, a2, *(_DWORD *)(v48 + 8));
  *(_QWORD *)&v73 = v36;
  *((_QWORD *)&v73 + 1) = v39;
  *(_QWORD *)&v74 = llvm::ConstantInt::get();
  *((_QWORD *)&v74 + 1) = v44;
  v75 = v46;
  v40 = *(_QWORD *)(a2 + 104);
  LOWORD(v60) = 257;
  v76 = sub_22E3D3028(v20, v51, v40, (uint64_t)v59);
  v77 = llvm::ConstantInt::get();
  RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
  LOWORD(v60) = 257;
  sub_22E479C7C(a2, RuntimeFunction, v42, (uint64_t)&v72, 9, (uint64_t)v59);
  return sub_22F283FC4((uint64_t)v61);
}

void sub_22E5DE724(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned __int8 **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
  {
    v4 = *(_QWORD *)(a1 + 64);
    v5 = *(unsigned __int8 ***)(a1 + 48);
    v6 = *(uint64_t **)(a1 + 32);
    v7 = *(uint64_t **)(a1 + 16);
    v8 = 8 * v2;
    v9 = *(uint64_t **)a1;
    do
    {
      v11 = *v5++;
      v10 = v11;
      v13 = *v9++;
      v12 = v13;
      v15 = *v7++;
      v14 = v15;
      v16 = *v6++;
      sub_22F28070C(v4, a2, v10, v12, v14, v16);
      v8 -= 8;
    }
    while (v8);
  }
}

uint64_t sub_22E5DE79C(uint64_t a1, uint64_t a2)
{
  return sub_22F287A90(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 808), a2);
}

uint64_t sub_22E5DE7A8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  int v4;

  if ((*(_BYTE *)(a2 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a2);
  result = sub_22E5E0510(v3);
  if (result)
  {
    v4 = *(_DWORD *)(result + 36);
    llvm::ConstantInt::get();
    return (16 * v4) | 3u;
  }
  return result;
}

unint64_t sub_22E5DE820(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;

  if (a2 >= 0x10)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v6 = *(unsigned __int8 *)(v5 + 16);
    if ((v6 - 25) <= 1)
    {
      v3 = sub_22F289B84(a1, a2);
      v2 = v3 & 0xFFFFFFFF00000000;
    }
    else if (v6 == 45)
    {
      v7 = sub_22F114198(*(_QWORD *)(v5 + 24));
      v3 = sub_22E5DE7A8(a1, v7);
      v2 = v3 & 0xFFFFFFFF00000000;
      if ((v3 & 3) == 0)
        LODWORD(v3) = 0;
    }
    else
    {
      v2 = 0;
      LODWORD(v3) = 0;
    }
  }
  else
  {
    v2 = 0;
    LODWORD(v3) = 0;
  }
  return v3 | v2;
}

unint64_t sub_22E5DE8CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 10
    || (v4 = sub_22F10ACF8(v3), v4 < 0x10))
  {
    v5 = 0;
    v6 = 0;
  }
  else
  {
    v7 = sub_22E5DE820(a1, v4);
    v6 = v7 & 0xFFFFFFFF00000000;
    v5 = v7;
  }
  return v6 | v5;
}

__n128 sub_22E5DE93C@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, _OWORD *a8@<X8>)
{
  int v15;
  int v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  llvm::PHINode *v29;
  uint64_t v30;
  __int128 v31;
  __n128 result;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _QWORD v36[2];

  v15 = *(_DWORD *)(a2 + 24);
  v16 = *(_DWORD *)(a3 + 24);
  if (((v15 | v16) & 3) != 0)
  {
    v17 = ((v16 ^ v15) & 0xFFFFFFF3) == 0 && *(_QWORD *)(a2 + 32) == *(_QWORD *)(a3 + 32);
    if (!v17 || *(_QWORD *)(a2 + 40) != *(_QWORD *)(a3 + 40) || **(_QWORD **)a2 != **(_QWORD **)a3)
    {
      v18 = sub_22E5DE820(a1[18], a7);
      v19 = 0;
      v36[0] = v18;
      v36[1] = v20;
      v21 = *(_QWORD *)(a4 + 40);
      if (v21)
        v22 = v21 - 24;
      else
        v22 = 0;
      if (*(unsigned __int8 *)(v22 + 16) - 29 >= 0xB)
        v22 = 0;
      a1[40] = *(_QWORD *)(v22 + 40);
      a1[41] = v22 + 24;
      *(_QWORD *)&v33 = *(_QWORD *)(v22 + 48);
      if ((_QWORD)v33)
      {
        llvm::MetadataTracking::track();
        v19 = v33;
      }
      sub_22E3CF21C((uint64_t)(a1 + 34), 0, v19);
      if ((_QWORD)v33)
        llvm::MetadataTracking::untrack();
      sub_22E5DEBB0(&v33, a2, v36, a1, 1);
      v23 = 0;
      v24 = v34;
      *(_OWORD *)a2 = v33;
      *(_OWORD *)(a2 + 16) = v24;
      *(_OWORD *)(a2 + 32) = v35;
      v25 = *(_QWORD *)(a5 + 40);
      if (v25)
        v26 = v25 - 24;
      else
        v26 = 0;
      if (*(unsigned __int8 *)(v26 + 16) - 29 >= 0xB)
        v26 = 0;
      a1[40] = *(_QWORD *)(v26 + 40);
      a1[41] = v26 + 24;
      *(_QWORD *)&v33 = *(_QWORD *)(v26 + 48);
      if ((_QWORD)v33)
      {
        llvm::MetadataTracking::track();
        v23 = v33;
      }
      sub_22E3CF21C((uint64_t)(a1 + 34), 0, v23);
      if ((_QWORD)v33)
        llvm::MetadataTracking::untrack();
      sub_22E5DEBB0(&v33, a3, v36, a1, 1);
      v27 = v34;
      *(_OWORD *)a3 = v33;
      *(_OWORD *)(a3 + 16) = v27;
      *(_OWORD *)(a3 + 32) = v35;
    }
  }
  a1[40] = a6;
  a1[41] = a6 + 40;
  v28 = llvm::PointerType::get();
  LOWORD(v35) = 257;
  v29 = (llvm::PHINode *)sub_22E3C4B80(a1 + 34, v28, 2, (uint64_t)&v33);
  sub_22E3C4C50(v29, *(_QWORD *)a2, a4);
  sub_22E3C4C50(v29, *(_QWORD *)a3, a5);
  *(_QWORD *)a2 = v29;
  v30 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)(a3 + 16) < v30)
    v30 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a2 + 16) = v30;
  v31 = *(_OWORD *)(a2 + 32);
  a8[1] = *(_OWORD *)(a2 + 16);
  a8[2] = v31;
  result = *(__n128 *)a2;
  *a8 = *(_OWORD *)a2;
  return result;
}

__n128 sub_22E5DEBB0@<Q0>(uint64_t a1@<X0>, llvm::LLVMContext *a2@<X1>, _QWORD *a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  __n128 result;
  unsigned int v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  const char **v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  __int16 v28;
  __int128 v29;

  v29 = *(_OWORD *)(a1 + 24);
  if (((v29 | *(_DWORD *)a2) & 3) != 0)
  {
    v12 = *(_DWORD *)a2 ^ v29;
    if (v12 <= 0xF
      && ((v12 & 3) == 0 ? (v13 = *((_QWORD *)&v29 + 1) == *((_QWORD *)a2 + 1)) : (v13 = 0), v13
                                                                                          && !*(_QWORD *)(a1 + 40)))
    {
      v21 = *(uint64_t **)a1;
    }
    else
    {
      v14 = *(uint64_t **)a1;
      if (*(_QWORD *)(a1 + 40))
      {
        LODWORD(v26) = 0;
        v27 = 0;
        v15 = sub_22E5DF144(a3, v14, 0, (uint64_t)&v29, (llvm::LLVMContext *)&v26, a4);
        v16 = llvm::PointerType::get();
        v28 = 257;
        v17 = (uint64_t *)sub_22E3C1740(a3 + 34, 49, (uint64_t)v15, v16, (uint64_t)&v26);
        v18 = a3[1];
        v19 = *(uint64_t **)(a1 + 40);
        v26 = "resignedgep";
        v28 = 259;
        v14 = (uint64_t *)sub_22E42129C(a3 + 34, v18, v17, v19, (uint64_t)&v26);
        LODWORD(v26) = 0;
        v27 = 0;
        v20 = &v26;
      }
      else
      {
        v20 = (const char **)&v29;
      }
      v21 = sub_22E5DF144(a3, v14, 0, (uint64_t)v20, a2, a4);
    }
    v22 = llvm::PointerType::get();
    v28 = 257;
    v23 = sub_22E3C1740(a3 + 34, 49, (uint64_t)v21, v22, (uint64_t)&v26);
    v24 = *(_QWORD *)(a1 + 8);
    v25 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)a5 = v23;
    *(_QWORD *)(a5 + 8) = v24;
    *(_QWORD *)(a5 + 16) = v25;
    result = *(__n128 *)a2;
    *(_OWORD *)(a5 + 24) = *(_OWORD *)a2;
    *(_QWORD *)(a5 + 40) = 0;
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 16);
    result = *(__n128 *)a1;
    *(_OWORD *)a5 = *(_OWORD *)a1;
    *(_QWORD *)(a5 + 16) = v7;
    *(_DWORD *)(a5 + 24) = 0;
    *(_QWORD *)(a5 + 32) = 0;
    *(_QWORD *)(a5 + 40) = 0;
  }
  return result;
}

unint64_t sub_22E5DED80@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t result;
  uint64_t v21;
  _QWORD v22[2];
  char v23;
  uint64_t v24;

  if (a2)
  {
    do
    {
      v6 = (uint64_t)a2;
      v7 = *a2;
      if (v7 > 0xD5)
      {
        if (v7 == 233)
        {
          if ((*(_DWORD *)a2 & 0x7C0000) != 0x300000)
            goto LABEL_56;
          v7 = *(_DWORD *)a2;
          v9 = a2 + 16;
        }
        else
        {
          if (v7 != 214)
            break;
          v9 = a2 + 24;
        }
      }
      else if (v7 == 155)
      {
        if ((**((_DWORD **)a2 + 2) & 0x18000) != 0)
          goto LABEL_56;
        v9 = a2 + 24;
        if (!a2[48])
          v9 = a2 + 32;
        v7 = 155;
      }
      else
      {
        if (v7 != 176)
          break;
        v8 = *((unsigned int *)a2 + 5);
        if ((_DWORD)v8 == -1)
          goto LABEL_56;
        v9 = &a2[8 * v8 + 40];
        v7 = 176;
      }
      a2 = *(unsigned __int8 **)v9;
    }
    while (*(_QWORD *)v9 != v6);
    if (v7 != 153)
      goto LABEL_40;
  }
  else
  {
    v6 = 0;
  }
  if ((*(_DWORD *)v6 & 0x1FC0000) == 0x100000)
  {
    v10 = *(unsigned __int8 **)(v6 + 16);
    if (v10)
    {
      do
      {
        v6 = (uint64_t)v10;
        v11 = *v10;
        if (v11 > 0xD5)
        {
          if (v11 == 233)
          {
            if ((*(_DWORD *)v10 & 0x7C0000) != 0x300000)
              goto LABEL_49;
            v11 = *(_DWORD *)v10;
            v13 = v10 + 16;
          }
          else
          {
            if (v11 != 214)
              break;
            v13 = v10 + 24;
          }
        }
        else if (v11 == 155)
        {
          if ((**((_DWORD **)v10 + 2) & 0x18000) != 0)
            goto LABEL_49;
          v13 = v10 + 24;
          if (!*(_BYTE *)(v6 + 48))
            v13 = (unsigned __int8 *)(v6 + 32);
          v11 = 155;
        }
        else
        {
          if (v11 != 176)
            break;
          v12 = *((unsigned int *)v10 + 5);
          if ((_DWORD)v12 == -1)
            goto LABEL_49;
          v13 = &v10[8 * v12 + 40];
          v11 = 176;
        }
        v10 = *(unsigned __int8 **)v13;
      }
      while (v10 != (unsigned __int8 *)v6);
      if (v11 != 161)
        goto LABEL_49;
    }
    else
    {
      v6 = 0;
    }
    v15 = sub_22E4E6434(a1, v6);
    if (v15)
    {
      if ((v15 & 4) == 0)
      {
        v16 = v15 & 0xFFFFFFFFFFFFFFF8;
LABEL_57:
        result = sub_22E5DE8CC(*(_QWORD *)(a1 + 144), *(_QWORD *)(v6 + 8));
        *a3 = v16;
        a3[1] = result;
        a3[2] = v21;
        return result;
      }
      sub_22E619C24(v15 & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(v6 + 8), 0, 1, a1, (uint64_t)v22);
      v18 = *(_DWORD *)(v6 + 4);
      return sub_22E5DF090(a3, a1, (uint64_t)v22, v18);
    }
LABEL_49:
    sub_22E4E0888(a1, (unsigned __int8 *)v6, 0, (uint64_t)v22);
    sub_22EFF605C(v6);
    v18 = v17;
    return sub_22E5DF090(a3, a1, (uint64_t)v22, v18);
  }
  v7 = *(_DWORD *)v6;
LABEL_40:
  if (v7 == 188)
  {
    v14 = *(_QWORD *)(v6 + 24);
    if (!v14 || (*(_DWORD *)(v14 + 28) & 0x7Eu) - 58 < 0xFFFFFFFA)
      goto LABEL_56;
    sub_22E4D89CC(a1);
  }
  else if (v7 != 161 || (v14 = *(_QWORD *)(v6 + 16)) == 0 || (*(_DWORD *)(v14 + 28) & 0x7Eu) - 58 < 0xFFFFFFFA)
  {
LABEL_56:
    v22[0] = a1;
    v22[1] = a1 + 272;
    v23 = 0;
    v24 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
    v16 = sub_22E50E974(v22, v6, a4);
    goto LABEL_57;
  }
  v19 = *(_QWORD *)(a1 + 144);
  if (sub_22E462B18(v14))
    v14 = v14 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(v14) + 96) & 0x80) == 0);
  result = sub_22E4E9988(v19, v14, 0, 0);
  *a3 = result;
  *((_DWORD *)a3 + 2) = 0;
  a3[2] = 0;
  return result;
}

unint64_t sub_22E5DF090(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t result;
  uint64_t v14;
  __int128 v15;
  _OWORD v16[3];
  _OWORD v17[8];
  uint64_t v18;

  v7 = *(_OWORD *)(a3 + 112);
  v17[6] = *(_OWORD *)(a3 + 96);
  v17[7] = v7;
  v18 = *(_QWORD *)(a3 + 128);
  v8 = *(_OWORD *)(a3 + 48);
  v17[2] = *(_OWORD *)(a3 + 32);
  v17[3] = v8;
  v9 = *(_OWORD *)(a3 + 80);
  v17[4] = *(_OWORD *)(a3 + 64);
  v17[5] = v9;
  v10 = *(_OWORD *)(a3 + 16);
  v17[0] = *(_OWORD *)a3;
  v17[1] = v10;
  v11 = sub_22F25F748(a2, (uint64_t)v17, a4);
  v12 = *(_DWORD *)(a3 + 76);
  if ((v12 & 0xC) != 0)
  {
    v15 = *(_OWORD *)(a3 + 24);
    v16[0] = *(_OWORD *)(a3 + 8);
    v16[1] = v15;
    v16[2] = *(_OWORD *)(a3 + 40);
    result = sub_22F289E38(a2, v12, (uint64_t)v16);
  }
  else
  {
    result = sub_22E5DE8CC(*(_QWORD *)(a2 + 144), *(_QWORD *)(a3 + 64));
  }
  *a1 = v11;
  a1[1] = result;
  a1[2] = v14;
  return result;
}

uint64_t *sub_22E5DF144(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, llvm::LLVMContext *a5, char a6)
{
  uint64_t *v10;
  uint64_t v12;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  int v19;
  BOOL v20;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  llvm::APInt *v26;
  unsigned int v27;
  int v28;
  int v29;
  BOOL v30;
  int v31;
  char v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  llvm::PHINode *v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  _QWORD v47[4];
  __int16 v48;

  v10 = a2;
  if ((*(_BYTE *)a4 & 3) != 0 || (*(_BYTE *)a5 & 3) != 0)
  {
    v12 = *a2;
    if (*a2 && *(_BYTE *)(*a2 + 8) == 15)
    {
      v15 = (_QWORD *)a1[18];
      v16 = sub_22E699F3C(v15);
      v14 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v16 + 192))(v16, v15, v12, a3);
    }
    else
    {
      v14 = llvm::ConstantInt::get();
    }
    v17 = (uint64_t *)v14;
    v18 = *(_DWORD *)a5;
    v19 = *(_DWORD *)a5 & 3;
    v20 = (uint64_t *)v14 != v10 || v19 == 0;
    if (v20 || (*(_DWORD *)a5 & 8) != 0)
    {
      v22 = *(_DWORD *)a4;
      v23 = *(_DWORD *)a4 & 3;
      if ((v19 != 0) != (v23 != 0)
        || ((v18 ^ v22) & 8) != 0
        || (v22 ^ v18) > 0xF
        || v23 != v19
        || ((*(_DWORD *)a4 & 4) == 0) == (*(_DWORD *)a5 & 4u) >> 2)
      {
        goto LABEL_33;
      }
      v24 = *(_QWORD *)(a4 + 8);
      v25 = *((_QWORD *)a5 + 1);
      if (v24 == v25)
        return v10;
      if (v24)
      {
        if (v25 || *(_BYTE *)(v24 + 16) != 16)
          goto LABEL_33;
        v26 = (llvm::APInt *)(v24 + 24);
        v27 = *(_DWORD *)(v24 + 32);
      }
      else
      {
        if (!v25 || *(_BYTE *)(v25 + 16) != 16)
          goto LABEL_33;
        v26 = (llvm::APInt *)(v25 + 24);
        v27 = *(_DWORD *)(v25 + 32);
      }
      if (v27 >= 0x41)
      {
        if (llvm::APInt::countLeadingZerosSlowCase(v26) == v27)
          return v10;
      }
      else if (!*(_QWORD *)v26)
      {
        return v10;
      }
LABEL_33:
      v45 = a1[40];
      v46 = a1 + 34;
      if ((a6 & 1) != 0)
      {
        v28 = 0;
      }
      else
      {
        llvm::Module::getDataLayout(*(llvm::Module **)(a1[18] + 200));
        v28 = llvm::isKnownNonZero() ^ 1;
        v22 = *(_DWORD *)a4;
        v18 = *(_DWORD *)a5;
        v23 = *(_DWORD *)a4 & 3;
        v19 = *(_DWORD *)a5 & 3;
      }
      if (v23)
        v29 = (v22 >> 3) & 1;
      else
        v29 = 0;
      v30 = v19 == 0;
      if (v19)
        v31 = (v18 >> 3) & 1;
      else
        v31 = 0;
      v32 = v29 & v31;
      if (v30)
        v32 = v29;
      if (!v23)
        v32 = v31;
      if (v28 && (v32 & 1) == 0)
      {
        v34 = (_QWORD *)operator new();
        llvm::BasicBlock::BasicBlock();
        v47[0] = "resign.nonnull";
        v48 = 259;
        v33 = (_QWORD *)operator new();
        llvm::BasicBlock::BasicBlock();
        v35 = v10;
        if (v29)
          v35 = (uint64_t *)sub_22E622648((uint64_t)a1, (_DWORD *)a4, v10);
        v48 = 257;
        v44 = sub_22E3C18F4((uint64_t)v46, 33, v35, (uint64_t)v17, (uint64_t)v47);
        if (v31)
        {
          v47[0] = "resign.null";
          v48 = 259;
          v36 = (_QWORD *)operator new();
          v37 = llvm::BasicBlock::BasicBlock();
        }
        else
        {
          v36 = 0;
          v37 = (uint64_t)v34;
        }
        v38 = llvm::User::operator new((llvm::User *)0x40);
        MEMORY[0x23489C09C](v38, v33, v37, v44, 0);
        v48 = 257;
        sub_22E3C12C8(v46, v38, (uint64_t)v47);
        if (v36)
        {
          sub_22E5ED9B4(a1, v36, 0);
          if ((*(_BYTE *)a5 & 2) != 0)
            v17 = (uint64_t *)sub_22E62243C((uint64_t)a1, a5, v17);
          v39 = llvm::User::operator new((llvm::User *)0x40);
          llvm::BranchInst::BranchInst();
          v48 = 257;
          sub_22E3C12C8(v46, v39, (uint64_t)v47);
          v45 = (uint64_t)v36;
        }
        sub_22E5ED9B4(a1, v33, 0);
        v18 = *(_DWORD *)a5;
      }
      else
      {
        v33 = 0;
        v34 = 0;
      }
      if ((v18 & 3) != 0)
      {
        if ((*(_BYTE *)a4 & 3) != 0)
        {
          v40 = sub_22F298714((uint64_t)a1, v10, a4, a5);
        }
        else
        {
          if ((v18 & 2) == 0)
            goto LABEL_66;
          v40 = sub_22E62243C((uint64_t)a1, a5, v10);
        }
      }
      else
      {
        v40 = sub_22E622648((uint64_t)a1, (_DWORD *)a4, v10);
      }
      v10 = (uint64_t *)v40;
LABEL_66:
      if (v34)
      {
        sub_22E5ED9B4(a1, v34, 0);
        v41 = *v10;
        v48 = 257;
        v42 = (llvm::PHINode *)sub_22E3C4B80(v46, v41, 2, (uint64_t)v47);
        sub_22E3C4C50(v42, (uint64_t)v17, v45);
        sub_22E3C4C50(v42, (uint64_t)v10, (uint64_t)v33);
        return (uint64_t *)v42;
      }
    }
  }
  return v10;
}

uint64_t sub_22E5DF610(uint64_t *a1, llvm::Value *this, int a3, uint64_t PtrToInt, uint64_t a5)
{
  llvm::Value *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char v16;
  void **v17;
  llvm::Value *v18;
  llvm::Value *v19;
  BOOL v20;
  _QWORD *v21;
  _QWORD *v22;
  void **v23;
  void **v25;
  unsigned int v26;
  void **v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  uint64_t *v32;
  void **v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  __int128 v47;
  char *v48;
  void **v49;
  void **v50[3];
  _QWORD v51[3];
  uint64_t v52;
  uint64_t *v53;
  void *v54;
  uint64_t v55;
  llvm::Value *v56;
  void *v57;
  _QWORD v58[3];
  char v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v9 = (llvm::Value *)llvm::Value::stripPointerCasts(this);
  if (PtrToInt || a5 && *(_BYTE *)(a5 + 16) != 16)
  {
    v23 = 0;
  }
  else
  {
    v10 = a1[215];
    if (!v10)
    {
      v10 = operator new();
      *(_DWORD *)(v10 + 16) = 128;
      v11 = MEMORY[0x23489D23C](0x2000, 8);
      *(_QWORD *)v10 = v11;
      *(_QWORD *)(v10 + 8) = 0;
      v12 = *(unsigned int *)(v10 + 16);
      if ((_DWORD)v12)
      {
        v13 = v12 << 6;
        v14 = (_QWORD *)(v11 + 16);
        do
        {
          *v14 = 0;
          v14[1] = -4096;
          *(v14 - 2) = &unk_24FA66630;
          *(v14 - 1) = 2;
          v14[2] = 0;
          v14 += 8;
          v13 -= 64;
        }
        while (v13);
      }
      *(_BYTE *)(v10 + 24) = 0;
      *(_BYTE *)(v10 + 48) = 0;
      a1[215] = v10;
    }
    v54 = (void *)2;
    v55 = 0;
    v56 = v9;
    v15 = (uint64_t)v9;
    if (v9 != (llvm::Value *)-8192)
    {
      v15 = (uint64_t)v9;
      if (v9 != (llvm::Value *)-4096)
      {
        v15 = (uint64_t)v9;
        if (v9)
        {
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v54);
          v15 = (uint64_t)v56;
        }
      }
    }
    v53 = (uint64_t *)&unk_24FA66630;
    v57 = (void *)v10;
    v50[0] = 0;
    v16 = sub_22E5E0B5C(*(_QWORD *)v10, *(_DWORD *)(v10 + 16), v15, v50);
    v17 = v50[0];
    if ((v16 & 1) == 0)
    {
      v17 = (void **)sub_22E5E0BF0(v10, (uint64_t)&v53, (uint64_t)v50[0]);
      v18 = (llvm::Value *)v17[3];
      v19 = v56;
      if (v18 != v56)
      {
        v20 = v18 == (llvm::Value *)-4096 || v18 == 0;
        if (!v20 && v18 != (llvm::Value *)-8192)
        {
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v17 + 1));
          v19 = v56;
        }
        v17[3] = v19;
        if (v19 != (llvm::Value *)-4096 && v19 != (llvm::Value *)-8192 && v19)
          llvm::ValueHandleBase::AddToExistingUseList((llvm::ValueHandleBase *)(v17 + 1), (llvm::ValueHandleBase **)((unint64_t)v54 & 0xFFFFFFFFFFFFFFF8));
      }
      v17[4] = v57;
      v17[5] = 0;
      v17[6] = 0;
      v17[7] = 0;
    }
    if (v56 != (llvm::Value *)-8192 && v56 != (llvm::Value *)-4096 && v56)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v54);
    v21 = v17[5];
    v22 = v17[6];
    v23 = v17 + 5;
    while (v21 != v22)
    {
      if (*(_DWORD *)v21 == a3 && v21[1] == a5)
        return llvm::ConstantExpr::getBitCast();
      v21 += 3;
    }
  }
  v53 = a1;
  v54 = &v56;
  v55 = 0x1000000000;
  memset(v58, 0, sizeof(v58));
  v51[2] = 0;
  v52 = 0;
  v50[0] = (void **)&v53;
  v50[1] = 0;
  v50[2] = 0;
  v51[0] = 0;
  *(_DWORD *)((char *)v51 + 7) = 0;
  v59 = 1;
  sub_22F275848((uint64_t *)v50);
  sub_22F246F08((uint64_t *)v50);
  if (PtrToInt)
  {
    if (*(_BYTE *)(PtrToInt + 16) != 16)
      PtrToInt = llvm::ConstantExpr::getPtrToInt();
    v25 = v50[0];
    v26 = *((_DWORD *)v50[0] + 4);
    if (v26 >= *((_DWORD *)v50[0] + 5))
    {
      v49 = v50[0];
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v25 = v49;
      v26 = *((_DWORD *)v49 + 4);
    }
    *((_QWORD *)v25[1] + v26) = PtrToInt;
    ++*((_DWORD *)v25 + 4);
  }
  else
  {
    sub_22F246F08((uint64_t *)v50);
  }
  if (a5)
  {
    v27 = v50[0];
    v28 = *((_DWORD *)v50[0] + 4);
    if (v28 >= *((_DWORD *)v50[0] + 5))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v28 = *((_DWORD *)v27 + 4);
    }
    *((_QWORD *)v27[1] + v28) = a5;
    ++*((_DWORD *)v27 + 4);
  }
  else
  {
    sub_22F246F08((uint64_t *)v50);
  }
  v29 = llvm::Value::stripPointerCasts(v9);
  v30 = *(unsigned __int8 *)(v29 + 16);
  if (!v29 || v30 > 3)
  {
    if (!v29 || v30 != 5 || *(_WORD *)(v29 + 18) != 34)
      goto LABEL_61;
    v31 = *(_DWORD *)(v29 + 20);
    if ((v31 & 0x40000000) != 0)
      v32 = *(uint64_t **)(v29 - 8);
    else
      v32 = (uint64_t *)(v29 - 32 * (v31 & 0x7FFFFFF));
    v29 = *v32;
  }
  llvm::Value::getName((llvm::Value *)v29);
LABEL_61:
  v33 = v50[0];
  sub_22E670C54((uint64_t *)v50, v52);
  v34 = sub_22F29F614((uint64_t)v33);
  llvm::GlobalObject::setSection();
  v50[0] = (void **)v58;
  sub_22E3CEB30(v50);
  if (v54 != &v56)
    free(v54);
  if (v23)
  {
    v36 = (char *)v23[1];
    v35 = (char *)v23[2];
    if (v36 >= v35)
    {
      v38 = (char *)*v23;
      v39 = 0xAAAAAAAAAAAAAAABLL * ((v36 - (_BYTE *)*v23) >> 3);
      v40 = v39 + 1;
      if (v39 + 1 > 0xAAAAAAAAAAAAAAALL)
        abort();
      v41 = 0xAAAAAAAAAAAAAAABLL * ((v35 - v38) >> 3);
      if (2 * v41 > v40)
        v40 = 2 * v41;
      if (v41 >= 0x555555555555555)
        v42 = 0xAAAAAAAAAAAAAAALL;
      else
        v42 = v40;
      if (v42)
      {
        if (v42 > 0xAAAAAAAAAAAAAAALL)
          sub_22E3B3F8C();
        v43 = (char *)operator new(24 * v42);
        v38 = (char *)*v23;
      }
      else
      {
        v43 = 0;
      }
      v44 = &v43[24 * v39];
      v45 = &v43[24 * v42];
      *(_DWORD *)v44 = a3;
      *((_QWORD *)v44 + 1) = a5;
      *((_QWORD *)v44 + 2) = v34;
      v37 = v44 + 24;
      v46 = (char *)v23[1];
      if (v46 == v38)
      {
        v48 = v44;
      }
      else
      {
        do
        {
          v47 = *(_OWORD *)(v46 - 24);
          v48 = v44 - 24;
          *((_QWORD *)v44 - 1) = *((_QWORD *)v46 - 1);
          *(_OWORD *)(v44 - 24) = v47;
          v46 -= 24;
          v44 -= 24;
        }
        while (v46 != v38);
      }
      *v23 = v48;
      v23[1] = v37;
      v23[2] = v45;
      if (v38)
        operator delete(v38);
    }
    else
    {
      *(_DWORD *)v36 = a3;
      v37 = v36 + 24;
      *((_QWORD *)v36 + 1) = a5;
      *((_QWORD *)v36 + 2) = v34;
    }
    v23[1] = v37;
  }
  return llvm::ConstantExpr::getBitCast();
}

unint64_t sub_22E5DFBAC(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[3];
  unint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a2 + 128);
  if (!v4
    && (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104)),
        (v4 = *(_QWORD *)(a2 + 128)) == 0)
    || (v4 = *(_QWORD *)(v4 + 88)) == 0)
  {
    LOBYTE(a1) = 0;
    v5 = 0;
    goto LABEL_7;
  }
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
  if ((**(_QWORD **)(a2 + 128) & 0x400) == 0)
  {
    LOBYTE(a1) = 0;
    v5 = 0;
    v4 = 0;
LABEL_7:
    v6 = 0;
    return v5 | v4 | a1 | v6 & 0xFFFFFF00;
  }
  v8 = a1 + 3648;
  v11 = a2;
  v10[0] = 0;
  if (!sub_22F246C54((uint64_t *)(a1 + 3648), &v11, v10)
    || v10[0] == *(_QWORD *)(a1 + 3648) + 16 * *(unsigned int *)(a1 + 3664))
  {
    v9 = sub_22F28A2EC(a1, a2);
    LOBYTE(a1) = v9;
    v6 = v9 & 0xFFFFFF00;
    v5 = v9 & 0x100000000;
    v11 = a2;
    v12 = v9;
    sub_22F28ADF8(v8, &v11, &v12, (uint64_t)v10);
    v4 = 0;
  }
  else
  {
    a1 = *(_QWORD *)(v10[0] + 8);
    v6 = a1 & 0xFFFFFF00;
    v4 = a1 & 0xFFFFFF0000000000;
    v5 = a1 & 0xFF00000000;
  }
  return v5 | v4 | a1 | v6 & 0xFFFFFF00;
}

uint64_t sub_22E5DFCD8(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  llvm *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  v1 = (_QWORD *)result;
  v2 = *(_QWORD *)(result + 1720);
  if (v2)
  {
    if (*(_BYTE *)(v2 + 48))
    {
      sub_22E5E0E84(v2 + 24);
      llvm::deallocate_buffer(*(llvm **)(v2 + 24), (void *)(16 * *(unsigned int *)(v2 + 40)));
      *(_BYTE *)(v2 + 48) = 0;
    }
    v3 = *(unsigned int *)(v2 + 16);
    v4 = *(llvm **)v2;
    if ((_DWORD)v3)
    {
      v5 = v3 << 6;
      v6 = (uint64_t *)((char *)v4 + 24);
      do
      {
        v7 = *v6;
        if ((*v6 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v8 = (void *)v6[2];
          if (v8)
          {
            v6[3] = (uint64_t)v8;
            operator delete(v8);
            v7 = *v6;
          }
        }
        if (v7 != -8192 && v7 != -4096 && v7 != 0)
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v6 - 2));
        v6 += 8;
        v5 -= 64;
      }
      while (v5);
      v4 = *(llvm **)v2;
      v10 = (void *)((unint64_t)*(unsigned int *)(v2 + 16) << 6);
    }
    else
    {
      v10 = 0;
    }
    llvm::deallocate_buffer(v4, v10);
    result = MEMORY[0x2348A0E9C](v2, 0x1022C4094C20142);
  }
  v1[215] = 0;
  v11 = v1[213];
  if (v11)
  {
    llvm::deallocate_buffer(*(llvm **)v11, (void *)(32 * *(unsigned int *)(v11 + 16)));
    result = MEMORY[0x2348A0E9C](v11, 0x1020C405AF6BDC9);
  }
  v1[213] = 0;
  v12 = v1[214];
  if (v12)
  {
    llvm::deallocate_buffer(*(llvm **)v12, (void *)(16 * *(unsigned int *)(v12 + 16)));
    result = MEMORY[0x2348A0E9C](v12, 0x1020C405AF6BDC9);
  }
  v1[214] = 0;
  return result;
}

uint64_t sub_22E5DFE38(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  llvm::Value *v18;

  v6 = *(_QWORD *)(a2 + 48);
  v7 = a1[18];
  v8 = *(_WORD *)(a2 + 80) & 0x7F;
  v9 = -40;
  if (v8 > 0x46)
  {
    if (v8 == 83)
      goto LABEL_17;
    if (v8 == 71)
    {
      v9 = -56;
      goto LABEL_17;
    }
    if (v8 != 81)
    {
LABEL_12:
      v10 = v8 - 52;
      v11 = v8 - 33 >= 5;
      v12 = -48;
      if (!v11)
        v12 = -64;
      if (v10 >= 6)
        v9 = v12;
      else
        v9 = -72;
    }
  }
  else
  {
    if (v8 > 0x18)
      goto LABEL_11;
    if (v8 == 16)
    {
LABEL_4:
      v9 = -48;
      goto LABEL_17;
    }
    if (((1 << v8) & 0x1066) == 0)
    {
      if (v8 == 24)
        goto LABEL_4;
LABEL_11:
      if (v8 == 70)
      {
        v9 = -64;
        goto LABEL_17;
      }
      goto LABEL_12;
    }
  }
LABEL_17:
  v13 = *(_QWORD *)(a2 + 72 + v9 + 16);
  v14 = (_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF8);
  if ((v13 & 4) != 0)
    v14 = (_QWORD *)*v14;
  if (v14)
    v15 = v14 - 8;
  else
    v15 = 0;
  v16 = sub_22F36A6C0(v7, v6, v15[6]);
  if (sub_22E462B18(a2))
    v17 = a2 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(a2) + 96) & 0x80) == 0);
  else
    v17 = a2;
  v18 = (llvm::Value *)sub_22E4E9988((uint64_t)a1, v17, 0, a3);
  return sub_22F28A99C(a1, v18, v16, a2);
}

uint64_t sub_22E5DFF8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;

  LODWORD(v27) = 0;
  v28 = 0;
  LODWORD(v25) = 0;
  v26 = 0;
  v8 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v10 == 39
    || ((v17 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144),
         v18 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0),
         *(_BYTE *)(v9 + 16) == 32)
     || v10 == 32 && (v18 = sub_22F10CF48(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0))) != 0)
    && sub_22E509ED0(v18)
    || ((v19 = v9, *(_BYTE *)(v9 + 16) == 32)
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
     && (v19 = sub_22F10CF48(v9)) != 0)
    && sub_22E509F54(v19)
    || sub_22F40AAC0(v9, v17))
  {
    v27 = sub_22E5DE8CC(*(_QWORD *)(a1 + 144), a3);
    v28 = v11;
    v12 = v27 & 3;
  }
  else
  {
    v12 = 0;
  }
  v13 = *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0);
  v14 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v14 == 39
    || ((v20 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144),
         v21 = *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0),
         *(_BYTE *)(v13 + 16) == 32)
     || v14 == 32 && (v21 = sub_22F10CF48(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0))) != 0)
    && sub_22E509ED0(v21)
    || ((v22 = v13, *(_BYTE *)(v13 + 16) == 32)
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
     && (v22 = sub_22F10CF48(v13)) != 0)
    && sub_22E509F54(v22)
    || sub_22F40AAC0(v13, v20))
  {
    v25 = sub_22E5DE8CC(*(_QWORD *)(a1 + 144), a4);
    v26 = v15;
    if (v12)
    {
      if ((v25 & 3) == 0)
        goto LABEL_31;
    }
    else
    {
      if ((v25 & 3) == 0)
        return a2;
      if (sub_22E4EE1BC(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0)))
      {
        v27 = sub_22F289B84(*(_QWORD *)(a1 + 144), a3);
        v28 = v24;
      }
    }
    return sub_22E5DF144(a1, a2, a4, &v27, &v25, 0);
  }
  if (v12)
  {
LABEL_31:
    if (sub_22E4EE1BC(*v8))
    {
      v25 = sub_22F289B84(*(_QWORD *)(a1 + 144), a4);
      v26 = v23;
    }
    return sub_22E5DF144(a1, a2, a4, &v27, &v25, 0);
  }
  return a2;
}

__n128 sub_22E5E01E0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  __int128 v17;
  __n128 result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  _OWORD v28[3];
  unint64_t v29;
  uint64_t v30;

  LODWORD(v29) = 0;
  v30 = 0;
  v10 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  v12 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v12 == 39
    || ((v19 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144),
         v20 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0),
         *(_BYTE *)(v11 + 16) == 32)
     || v12 == 32 && (v20 = sub_22F10CF48(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0))) != 0)
    && sub_22E509ED0(v20)
    || ((v21 = v11, *(_BYTE *)(v11 + 16) == 32)
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
     && (v21 = sub_22F10CF48(v11)) != 0)
    && sub_22E509F54(v21)
    || sub_22F40AAC0(v11, v19))
  {
    v13 = sub_22E5DE8CC(*(_QWORD *)(a1 + 144), a3) & 3;
  }
  else
  {
    v13 = 0;
  }
  v14 = *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0);
  v15 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v15 == 39
    || ((v22 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144),
         v23 = *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0),
         *(_BYTE *)(v14 + 16) == 32)
     || v15 == 32 && (v23 = sub_22F10CF48(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0))) != 0)
    && sub_22E509ED0(v23)
    || ((v24 = v14, *(_BYTE *)(v14 + 16) == 32)
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
     && (v24 = sub_22F10CF48(v14)) != 0)
    && sub_22E509F54(v24)
    || sub_22F40AAC0(v14, v22))
  {
    v16 = sub_22E5DE8CC(*(_QWORD *)(a1 + 144), a4) & 3;
    if (!v13)
    {
      if (v16 && sub_22E4EE1BC(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0)))
      {
        *(_QWORD *)(a2 + 24) = sub_22F289B84(*(_QWORD *)(a1 + 144), a3);
        *(_QWORD *)(a2 + 32) = v27;
      }
      goto LABEL_6;
    }
    if (v16)
      goto LABEL_6;
  }
  else if (!v13)
  {
    goto LABEL_6;
  }
  if (sub_22E4EE1BC(*v10))
  {
    v29 = sub_22F289B84(*(_QWORD *)(a1 + 144), a4);
    v30 = v25;
    sub_22E5DEBB0(v28, a2, &v29, a1, 0);
    v26 = v28[1];
    *(_OWORD *)a2 = v28[0];
    *(_OWORD *)(a2 + 16) = v26;
    *(_OWORD *)(a2 + 32) = v28[2];
    *(_DWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
  }
LABEL_6:
  v17 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a5 = *(_OWORD *)a2;
  *(_OWORD *)(a5 + 16) = v17;
  result = *(__n128 *)(a2 + 32);
  *(__n128 *)(a5 + 32) = result;
  return result;
}

_QWORD *sub_22E5E0440@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;

  if (a3 <= 0xF)
  {
    LODWORD(v9) = 0;
    v10 = 0;
  }
  else
  {
    v9 = sub_22E5DE820(*(_QWORD *)(a1 + 144), a3);
    v10 = v7;
  }
  return sub_22E5DEBB0(a4, a2, &v9, a1, 1);
}

uint64_t sub_22E5E04B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  _OWORD v5[3];
  _QWORD v6[6];
  int v7;
  uint64_t v8;

  if ((*(_BYTE *)(a2 + 24) & 3) == 0)
    return *(_QWORD *)a2;
  v2 = *(_QWORD *)(a1 + 136);
  v3 = *(_OWORD *)(a2 + 16);
  v5[0] = *(_OWORD *)a2;
  v5[1] = v3;
  v5[2] = *(_OWORD *)(a2 + 32);
  v7 = 0;
  v8 = 0;
  sub_22E5DEBB0(v6, v5, &v7, v2, 1);
  return v6[0];
}

uint64_t sub_22E5E0510(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v1 = *(uint64_t **)a1;
  v2 = *(unsigned int *)(a1 + 8);
  i = *(uint64_t **)a1;
  if ((_DWORD)v2)
  {
    v4 = 8 * v2;
    for (i = *(uint64_t **)a1; *(_WORD *)(*i + 32) != 280; ++i)
    {
      v4 -= 8;
      if (!v4)
        return 0;
    }
  }
  if (i == &v1[v2])
    return 0;
  do
  {
    v6 = *v1++;
    result = v6;
  }
  while (*(_WORD *)(v6 + 32) != 280);
  return result;
}

_QWORD *sub_22E5E0570(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 24 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      do
      {
        *result = 0;
        result[1] = 0;
        result += 3;
        v11 -= 24;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 24 * v3;
      v13 = (uint64_t)v4;
      do
      {
        if ((unint64_t)(*(_QWORD *)v13 + 1) > 1 || *(_DWORD *)(v13 + 8) != 0)
        {
          v19 = 0;
          sub_22F28AC8C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v13, &v19);
          v15 = v19;
          v16 = *(_QWORD *)v13;
          *(_DWORD *)(v19 + 8) = *(_DWORD *)(v13 + 8);
          *(_QWORD *)v15 = v16;
          *(_WORD *)(v15 + 16) = *(_WORD *)(v13 + 16);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 24;
        v12 -= 24;
      }
      while (v12);
    }
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(24 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v17 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v17)
    {
      v18 = 24 * v17;
      do
      {
        *result = 0;
        result[1] = 0;
        result += 3;
        v18 -= 24;
      }
      while (v18);
    }
  }
  return result;
}

void sub_22E5E06D8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  _QWORD v10[2];
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v2 = a1[1];
  v10[0] = v2 & 6;
  v10[1] = 0;
  v3 = a1[3];
  v11 = v3;
  if (v3 != -8192 && v3 != -4096 && v3 != 0)
  {
    llvm::ValueHandleBase::AddToExistingUseList((llvm::ValueHandleBase *)v10, (llvm::ValueHandleBase **)(v2 & 0xFFFFFFFFFFFFFFF8));
    v3 = v11;
  }
  v5 = a1[4];
  v12 = v5;
  v13 = 0;
  if (sub_22E5E0B5C(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v3, &v13))
  {
    v6 = v13;
    v7 = (void *)v13[5];
    if (v7)
    {
      v13[6] = v7;
      operator delete(v7);
    }
    v8 = v6[3];
    if (v8 != -8192)
    {
      if (v8 != -4096 && v8 != 0)
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v6 + 1));
      v6[3] = -8192;
    }
    v6[4] = 0;
    *(int32x2_t *)(v5 + 8) = vadd_s32(*(int32x2_t *)(v5 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  if (v11 != -8192 && v11 != -4096)
  {
    if (v11)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v10);
  }
}

void sub_22E5E07E4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[24];
  uint64_t v35;
  uint64_t v36;

  v4 = a1[1];
  v23[0] = v4 & 6;
  v23[1] = 0;
  v5 = a1[3];
  v24 = v5;
  if (v5 != -8192 && v5 != -4096 && v5 != 0)
  {
    llvm::ValueHandleBase::AddToExistingUseList((llvm::ValueHandleBase *)v23, (llvm::ValueHandleBase **)(v4 & 0xFFFFFFFFFFFFFFF8));
    v5 = v24;
  }
  v7 = a1[4];
  v25 = v7;
  v30 = 0;
  if (sub_22E5E0B5C(*(_QWORD *)v7, *(_DWORD *)(v7 + 16), v5, &v30))
  {
    v8 = v30;
    v9 = *(_QWORD *)v7;
    v10 = *(unsigned int *)(v7 + 16);
  }
  else
  {
    v9 = *(_QWORD *)v7;
    v10 = *(unsigned int *)(v7 + 16);
    v8 = (char *)(*(_QWORD *)v7 + (v10 << 6));
  }
  if (v8 != (char *)(v9 + (v10 << 6)))
  {
    v22 = *(_OWORD *)(v8 + 40);
    v11 = *((_QWORD *)v8 + 7);
    *((_QWORD *)v8 + 6) = 0;
    *((_QWORD *)v8 + 7) = 0;
    *((_QWORD *)v8 + 5) = 0;
    v12 = -8192;
    v32 = 0;
    v33 = -8192;
    v30 = (char *)&unk_24FA66630;
    v31 = 2;
    *(_QWORD *)v34 = 0;
    v13 = *((_QWORD *)v8 + 3);
    if (v13 != -8192)
    {
      if (v13 != -4096 && v13 != 0)
      {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v8 + 8));
        v12 = v33;
      }
      *((_QWORD *)v8 + 3) = v12;
      if (v12 != -4096 && v12 != -8192 && v12)
      {
        llvm::ValueHandleBase::AddToExistingUseList((llvm::ValueHandleBase *)(v8 + 8), (llvm::ValueHandleBase **)(v31 & 0xFFFFFFFFFFFFFFF8));
        v12 = v33;
      }
    }
    *((_QWORD *)v8 + 4) = *(_QWORD *)v34;
    if (v12 != -8192 && v12 != -4096 && v12)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v31);
    *(int32x2_t *)(v7 + 8) = vadd_s32(*(int32x2_t *)(v7 + 8), (int32x2_t)0x1FFFFFFFFLL);
    v15 = v25;
    v16 = 2;
    v27[0] = 2;
    v27[1] = 0;
    v28 = a2;
    if (a2 == -8192 || a2 == -4096)
    {
      v17 = v22;
    }
    else
    {
      v17 = v22;
      if (a2)
      {
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v27);
        v17 = v22;
        v16 = v27[0];
        a2 = v28;
      }
    }
    v26 = &unk_24FA66630;
    v29 = v15;
    v31 = v16 & 6;
    v32 = 0;
    v33 = a2;
    if (a2 == -8192 || a2 == -4096)
    {
      v18 = v15;
    }
    else
    {
      v18 = v15;
      if (a2)
      {
        llvm::ValueHandleBase::AddToExistingUseList((llvm::ValueHandleBase *)&v31, (llvm::ValueHandleBase **)(v16 & 0xFFFFFFFFFFFFFFF8));
        v17 = v22;
        v18 = v29;
        a2 = v33;
      }
    }
    v30 = (char *)&unk_24FA66630;
    *(_QWORD *)v34 = v18;
    *(_OWORD *)&v34[8] = v17;
    v35 = v11;
    v36 = 0;
    if ((sub_22E5E0B5C(*(_QWORD *)v15, *(_DWORD *)(v15 + 16), a2, &v36) & 1) != 0)
    {
      if ((_QWORD)v22)
      {
        *(_QWORD *)&v34[16] = v22;
        operator delete((void *)v22);
      }
    }
    else
    {
      v19 = sub_22E5E0BF0(v15, (uint64_t)&v30, v36);
      v20 = *(_QWORD *)(v19 + 24);
      v21 = v33;
      if (v20 != v33)
      {
        if (v20 != -4096 && v20 && v20 != -8192)
        {
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v19 + 8));
          v21 = v33;
        }
        *(_QWORD *)(v19 + 24) = v21;
        if (v21 != -4096 && v21 != -8192 && v21)
          llvm::ValueHandleBase::AddToExistingUseList((llvm::ValueHandleBase *)(v19 + 8), (llvm::ValueHandleBase **)(v31 & 0xFFFFFFFFFFFFFFF8));
      }
      *(_QWORD *)(v19 + 40) = 0;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0;
      *(_OWORD *)(v19 + 32) = *(_OWORD *)v34;
      *(_QWORD *)(v19 + 48) = *(_QWORD *)&v34[16];
      *(_QWORD *)(v19 + 56) = v35;
      *(_QWORD *)&v34[8] = 0;
      *(_QWORD *)&v34[16] = 0;
      v35 = 0;
    }
    if (v33 != -8192 && v33 != -4096 && v33)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v31);
    if (v28 != -8192 && v28 != -4096 && v28)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v27);
  }
  if (v24 != -8192 && v24 != -4096)
  {
    if (v24)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v23);
  }
}

uint64_t sub_22E5E0B5C(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  BOOL v11;
  int v12;

  if (a2)
  {
    v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v5 = a1 + (v4 << 6);
    v6 = *(_QWORD *)(v5 + 24);
    if (v6 == a3)
    {
      v7 = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      while (v6 != -4096)
      {
        if (v9)
          v11 = 0;
        else
          v11 = v6 == -8192;
        if (v11)
          v9 = v5;
        v12 = v4 + v10++;
        v4 = v12 & (a2 - 1);
        v5 = a1 + (v4 << 6);
        v6 = *(_QWORD *)(v5 + 24);
        v7 = 1;
        if (v6 == a3)
          goto LABEL_5;
      }
      v7 = 0;
      if (v9)
        v5 = v9;
    }
  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
LABEL_5:
  *a4 = v5;
  return v7;
}

uint64_t sub_22E5E0BF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  int v7;
  llvm *v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;

  v29 = a3;
  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    v7 = 2 * v6;
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 16);
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
      goto LABEL_3;
  }
  v9 = *(llvm **)a1;
  v10 = (v7 - 1) | ((unint64_t)(v7 - 1) >> 1);
  v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
  v12 = ((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8);
  if ((v12 + 1) > 0x40)
    v13 = v12 + 1;
  else
    v13 = 64;
  *(_DWORD *)(a1 + 16) = v13;
  v14 = MEMORY[0x23489D23C]((unint64_t)v13 << 6, 8);
  *(_QWORD *)a1 = v14;
  if (v9)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v15 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v15)
    {
      v16 = v15 << 6;
      v17 = (_QWORD *)(v14 + 16);
      do
      {
        *v17 = 0;
        v17[1] = -4096;
        *(v17 - 2) = &unk_24FA66630;
        *(v17 - 1) = 2;
        v17[2] = 0;
        v17 += 8;
        v16 -= 64;
      }
      while (v16);
    }
    if ((_DWORD)v6)
    {
      v18 = (char *)v9 + 32;
      v19 = v6 << 6;
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        if ((v20 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v30 = 0;
          sub_22E5E0B5C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v20, &v30);
          v21 = v30;
          v22 = v30[3];
          v23 = *((_QWORD *)v18 - 1);
          if (v22 != v23)
          {
            v24 = v22 == -4096 || v22 == 0;
            if (!v24 && v22 != -8192)
            {
              llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v30 + 1));
              v23 = *((_QWORD *)v18 - 1);
            }
            v21[3] = v23;
            if (v23 != -4096 && v23 != -8192 && v23)
              llvm::ValueHandleBase::AddToExistingUseList((llvm::ValueHandleBase *)(v21 + 1), (llvm::ValueHandleBase **)(*((_QWORD *)v18 - 3) & 0xFFFFFFFFFFFFFFF8));
          }
          v21[4] = *(_QWORD *)v18;
          v21[5] = 0;
          v21[6] = 0;
          v21[7] = 0;
          *(_OWORD *)(v21 + 5) = *(_OWORD *)(v18 + 8);
          v21[7] = *((_QWORD *)v18 + 3);
          *((_QWORD *)v18 + 1) = 0;
          *((_QWORD *)v18 + 2) = 0;
          *((_QWORD *)v18 + 3) = 0;
          ++*(_DWORD *)(a1 + 8);
          v20 = *((_QWORD *)v18 - 1);
        }
        if (v20 != -8192 && v20 != -4096 && v20 != 0)
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v18 - 24));
        v18 += 64;
        v19 -= 64;
      }
      while (v19);
    }
    llvm::deallocate_buffer(v9, (void *)(v6 << 6));
    v14 = *(_QWORD *)a1;
    LODWORD(v26) = *(_DWORD *)(a1 + 16);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v26 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v26)
    {
      v27 = 0;
      do
      {
        v28 = (_QWORD *)(v14 + v27);
        v28[2] = 0;
        v28[3] = -4096;
        *v28 = &unk_24FA66630;
        v28[1] = 2;
        v27 += 64;
        v28[4] = 0;
      }
      while (v26 << 6 != v27);
    }
  }
  sub_22E5E0B5C(v14, v26, *(_QWORD *)(a2 + 24), &v29);
  v5 = *(_DWORD *)(a1 + 8);
  a3 = v29;
LABEL_3:
  *(_DWORD *)(a1 + 8) = v5 + 1;
  if (*(_QWORD *)(a3 + 24) != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22E5E0E84(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = *(unsigned int *)(result + 16);
  if ((_DWORD)v1)
  {
    v2 = 16 * v1;
    v3 = (_QWORD *)(*(_QWORD *)result + 8);
    do
    {
      v4 = *(v3 - 1);
      if (v4 != -4096 && v4 != -8192)
      {
        if (*v3)
          result = llvm::MetadataTracking::untrack();
      }
      v3 += 2;
      v2 -= 16;
    }
    while (v2);
  }
  return result;
}

_QWORD *sub_22E5E0EE8(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](32 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F28B0CC(a1, (uint64_t)v4, (uint64_t)v4 + 32 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(32 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        *result = 0;
        result[1] = 0;
        result[2] = 0;
        result += 4;
        v11 -= 32;
      }
      while (v11);
    }
  }
  return result;
}

_BYTE *sub_22E5E0FAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int16 a3@<W2>, unint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  llvm::Type *v13;
  llvm::DataLayout *DataLayout;
  uint64_t v15;
  unint64_t v16;
  _BOOL4 v17;
  _BYTE *result;
  unsigned __int16 v19;
  unsigned int v20;

  v13 = (llvm::Type *)sub_22E66C868(a1, *(_QWORD *)(a2 + 48), 0);
  DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(a1 + 16));
  sub_22E3C304C((uint64_t)DataLayout, (uint64_t)v13);
  llvm::DataLayout::getABITypeAlignment(DataLayout, v13);
  v15 = llvm::TypeSize::operator unsigned long long();
  v16 = sub_22EF5CDF0(*(_QWORD *)(a1 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16408) & 0xFFFFFFFFFFFFFFF0))* v15;
  v17 = sub_22F110A40(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0));
  if (v16 >= a4)
    LOWORD(v16) = a4;
  result = (_BYTE *)llvm::Module::getDataLayout(*(llvm::Module **)(a1 + 16));
  if (*result)
    v19 = a5 - a3 - v16;
  else
    v19 = a3;
  if (v17)
    v20 = 0x80000000;
  else
    v20 = 0;
  *(_DWORD *)a7 = v20 & 0x80000000 | ((v16 & 0x7FFF) << 16) | v19;
  *(_DWORD *)(a7 + 4) = a5;
  *(_QWORD *)(a7 + 8) = a6;
  *(_QWORD *)(a7 + 24) = 0;
  return result;
}

void sub_22E5E10E0(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  llvm *v13;
  void *v14;
  uint64_t v15;
  llvm::raw_ostream *v16;
  void *v17;
  llvm::raw_ostream *v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  char **v25;
  llvm::raw_ostream *v26;
  uint64_t v27;
  llvm::raw_ostream *v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD v32[6];
  void *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  _BYTE v38[128];
  llvm *v39;
  uint64_t v40;
  unsigned int v41;
  llvm *v42;
  uint64_t v43;
  unsigned int v44;
  llvm *v45;
  uint64_t v46;
  unsigned int v47;
  llvm *v48;
  uint64_t v49;
  unsigned int v50;
  char v51;
  _QWORD v52[4];
  uint64_t v53;
  uint64_t DataLayout;
  void *__p;
  void *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  _BYTE v60[128];
  llvm *v61;
  uint64_t v62;
  unsigned int v63;
  llvm *v64;
  uint64_t v65;
  unsigned int v66;
  llvm *v67;
  uint64_t v68;
  unsigned int v69;
  llvm *v70;
  uint64_t v71;
  unsigned int v72;
  char v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a1 + 8);
  v52[0] = a1;
  v52[1] = v8;
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 35 >= 3)
    v9 = 0;
  else
    v9 = a2;
  v52[2] = a2;
  v52[3] = v9;
  v53 = sub_22F0C975C(v8, a2);
  DataLayout = llvm::Module::getDataLayout(*(llvm::Module **)(a1 + 16));
  __p = 0;
  v56 = 0;
  v57 = 0;
  v58 = v60;
  v59 = 0x1000000000;
  v62 = 0;
  v61 = 0;
  v63 = 0;
  v65 = 0;
  v64 = 0;
  v66 = 0;
  v68 = 0;
  v67 = 0;
  v69 = 0;
  v72 = 0;
  v70 = 0;
  v71 = 0;
  v73 = 3;
  sub_22E5E160C((uint64_t)v52, 0);
  v10 = 0;
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 35 <= 2)
  {
    if ((*(_DWORD *)(a2 + 72) & 0xE000) == 0x4000 || sub_22E4808EC(a2))
    {
      v10 = 0;
    }
    else
    {
      v10 = a3;
      if (**(_QWORD **)(v53 + 72) != *(_QWORD *)v53)
      {
        v29 = v73 & 4;
        v30 = *(_QWORD *)(a1 + 8);
        v32[0] = a1;
        v32[1] = v30;
        if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 35 >= 3)
          v31 = 0;
        else
          v31 = a2;
        v32[2] = a2;
        v32[3] = v31;
        v32[4] = sub_22F0C975C(v30, a2);
        v32[5] = llvm::Module::getDataLayout(*(llvm::Module **)(a1 + 16));
        v33 = 0;
        v34 = 0;
        v35 = 0;
        v36 = v38;
        v37 = 0x1000000000;
        v39 = 0;
        v40 = 0;
        v41 = 0;
        v42 = 0;
        v43 = 0;
        v44 = 0;
        v45 = 0;
        v46 = 0;
        v47 = 0;
        v50 = 0;
        v48 = 0;
        v49 = 0;
        v51 = v29 | 3;
        sub_22E5E160C((uint64_t)v32, 1);
        v10 = llvm::StructType::create();
        sub_22E66C4A8(a1, a2);
        llvm::deallocate_buffer(v48, (void *)(16 * v50));
        llvm::deallocate_buffer(v45, (void *)(16 * v47));
        llvm::deallocate_buffer(v42, (void *)(40 * v44));
        llvm::deallocate_buffer(v39, (void *)(16 * v41));
        if (v36 != v38)
          free(v36);
        if (v33)
        {
          v34 = v33;
          operator delete(v33);
        }
      }
    }
  }
  llvm::StructType::setBody();
  v11 = v73;
  v12 = operator new();
  *(_QWORD *)v12 = a3;
  *(_QWORD *)(v12 + 8) = v10;
  *(_BYTE *)(v12 + 112) = *(_BYTE *)(v12 + 112) & 0xFC | v11 & 3;
  *a4 = v12;
  *(_QWORD *)(v12 + 64) = v67;
  v67 = 0;
  *(_QWORD *)(v12 + 72) = v68;
  v68 = 0;
  *(_DWORD *)(v12 + 80) = v69;
  v69 = 0;
  *(_QWORD *)(v12 + 88) = v70;
  v70 = 0;
  *(_QWORD *)(v12 + 96) = v71;
  v71 = 0;
  *(_DWORD *)(v12 + 104) = v72;
  v72 = 0;
  *(_QWORD *)(v12 + 16) = v61;
  v61 = 0;
  *(_QWORD *)(v12 + 24) = v62;
  v62 = 0;
  *(_DWORD *)(v12 + 32) = v63;
  v63 = 0;
  *(_QWORD *)(v12 + 40) = v64;
  v64 = 0;
  *(_QWORD *)(v12 + 48) = v65;
  v65 = 0;
  *(_DWORD *)(v12 + 56) = v66;
  v66 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 2000) + 140) & 0x1000000000) != 0)
  {
    v15 = v12;
    v16 = (llvm::raw_ostream *)llvm::outs((llvm *)v12);
    v17 = (void *)*((_QWORD *)v16 + 4);
    if (*((_QWORD *)v16 + 3) - (_QWORD)v17 > 0x20uLL)
    {
      qmemcpy(v17, "\n*** Dumping IRgen Record Layout\n", 33);
      *((_QWORD *)v16 + 4) += 33;
    }
    else
    {
      v16 = (llvm::raw_ostream *)llvm::raw_ostream::write(v16, "\n*** Dumping IRgen Record Layout\n");
    }
    v18 = (llvm::raw_ostream *)llvm::outs(v16);
    v19 = (_QWORD *)*((_QWORD *)v18 + 4);
    if (*((_QWORD *)v18 + 3) - (_QWORD)v19 > 7uLL)
    {
      *v19 = 0x203A64726F636552;
      *((_QWORD *)v18 + 4) += 8;
    }
    else
    {
      v18 = (llvm::raw_ostream *)llvm::raw_ostream::write(v18, "Record: ");
    }
    v20 = llvm::outs(v18);
    v25 = sub_22EF805D0(a2, v20, 0, 0, v21, v22, v23, v24);
    v26 = (llvm::raw_ostream *)llvm::outs((llvm *)v25);
    v27 = *((_QWORD *)v26 + 4);
    if ((unint64_t)(*((_QWORD *)v26 + 3) - v27) > 8)
    {
      *(_BYTE *)(v27 + 8) = 32;
      *(_QWORD *)v27 = *(_QWORD *)"\nLayout: ";
      *((_QWORD *)v26 + 4) += 9;
    }
    else
    {
      v26 = (llvm::raw_ostream *)llvm::raw_ostream::write(v26, "\nLayout: ");
    }
    v28 = (llvm::raw_ostream *)llvm::outs(v26);
    sub_22E5E34FC(v15, v28);
    v13 = v70;
    v14 = (void *)(16 * v72);
  }
  else
  {
    v13 = 0;
    v14 = 0;
  }
  llvm::deallocate_buffer(v13, v14);
  llvm::deallocate_buffer(v67, (void *)(16 * v69));
  llvm::deallocate_buffer(v64, (void *)(40 * v66));
  llvm::deallocate_buffer(v61, (void *)(16 * v63));
  if (v58 != v60)
    free(v58);
  if (__p)
  {
    v56 = __p;
    operator delete(__p);
  }
}

unint64_t sub_22E5E160C(uint64_t a1, int a2)
{
  llvm::Type ***v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  llvm::Type *v8;
  char v9;
  llvm::Type *v10;
  unint64_t v11;
  llvm::Type *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __n128 v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int8x8_t v28;
  uint8x8_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unint64_t v36;
  llvm::Type *IntNTy;
  uint64_t ABITypeAlignment;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  __n128 *v45;
  unint64_t v46;
  __n128 *v47;
  __n128 *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  __n128 *v54;
  __n128 v55;
  unint64_t v56;
  unint64_t v57;
  __n128 *v58;
  unint64_t v59;
  __n128 *v60;
  __n128 *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  __n128 *v68;
  __n128 v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int8 *v76;
  uint64_t v77;
  unint64_t v78;
  llvm::Type *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  llvm::Type *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  _QWORD *v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  __int128 v100;
  unint64_t v101;
  unint64_t v102;
  __n128 *v103;
  unint64_t v104;
  __n128 *v105;
  __n128 *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  char *v112;
  __n128 *v113;
  __n128 v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  __n128 *v121;
  __n128 *v122;
  __n128 *v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  char *v128;
  char *v129;
  __n128 *v130;
  __n128 v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  char *v137;
  _QWORD *v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t *v141;
  llvm::Type *v142;
  char *v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  char *v148;
  char *v149;
  __int128 v150;
  uint64_t v151;
  uint64_t Int32PtrTy;
  uint64_t v153;
  unint64_t v154;
  char *v155;
  _QWORD *v156;
  char *v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  char *v162;
  char *v163;
  __int128 v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  char *v169;
  _QWORD *v170;
  char *v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  char *v176;
  char *v177;
  __int128 v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  __n128 *v189;
  __n128 *v190;
  __n128 *v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  unint64_t v195;
  char *v196;
  char *v197;
  __n128 *v198;
  __n128 v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t *v211;
  _QWORD *v212;
  char *v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  unint64_t v217;
  char *v218;
  char *v219;
  __int128 v220;
  unint64_t v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t *v235;
  _QWORD *v236;
  uint64_t v237;
  char *v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  char *v242;
  unint64_t v243;
  __n128 *v244;
  __n128 *v245;
  char *v246;
  char *v247;
  __int128 v248;
  unint64_t v249;
  unint64_t v250;
  uint64_t v251;
  __n128 *v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  unint64_t v256;
  char *v257;
  char *v258;
  __n128 *v259;
  __n128 v260;
  char *v261;
  __n128 *v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  unint64_t v266;
  char *v267;
  __n128 v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v272;
  char *v273;
  char *v274;
  _BYTE *v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t v278;
  unint64_t v279;
  char *v280;
  char *v281;
  __int128 v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t i;
  uint64_t v287;
  unint64_t v288;
  uint64_t v289;
  llvm::Type *v290;
  unint64_t v291;
  unint64_t v292;
  char v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  llvm::Type *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  int v304;
  uint64_t v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t *v308;
  uint64_t v309;
  char *v310;
  char *v311;
  char *v312;
  llvm::Type *v313;
  uint64_t v314;
  unint64_t v315;
  char *v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t v319;
  unint64_t v320;
  char *v321;
  char *v322;
  char *v323;
  llvm::Type **v324;
  llvm::Type *v325;
  llvm::ArrayType *v326;
  __n128 v327;
  llvm::ArrayType *v328;
  unint64_t v329;
  __n128 *v330;
  __n128 *v331;
  __n128 *v332;
  uint64_t v333;
  unint64_t v334;
  uint64_t v335;
  unint64_t v336;
  char *v337;
  __n128 *v338;
  __n128 *v339;
  __n128 v340;
  uint64_t v341;
  uint64_t v342;
  char v343;
  uint64_t v344;
  int v345;
  uint64_t v346;
  char v347;
  uint64_t v348;
  char v349;
  BOOL v350;
  unint64_t *j;
  uint64_t v352;
  unint64_t v353;
  int v354;
  int v355;
  uint64_t *v356;
  unint64_t v357;
  int v358;
  unint64_t *v359;
  char v361;
  llvm::Type *v362;
  unint64_t v363;
  uint64_t v364;
  unint64_t v365;
  unint64_t v366;
  unint64_t v367;
  uint64_t *v368;
  _QWORD v369[3];

  v3 = (llvm::Type ***)(a1 + 32);
  v368 = (uint64_t *)(a1 + 32);
  if (a2)
    v3 = (llvm::Type ***)(*v368 + 72);
  v4 = *(_QWORD *)(a1 + 16);
  if ((*(_DWORD *)(v4 + 72) & 0xE000) != 0x4000)
  {
    v361 = a2;
    v362 = **v3;
    v18 = sub_22EFC3B90(v4);
    if (v18)
    {
      v20 = v18;
      while (1)
      {
        if ((*(_BYTE *)(v20 + 68) & 1) == 0)
        {
          if (sub_22EFC2FDC(v20, *(_QWORD *)(a1 + 8)))
          {
            do
              v20 = *(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF8;
            while (v20 && (*(_DWORD *)(v20 + 28) & 0x7Fu) - 49 > 2);
          }
          else
          {
            v115 = *(_QWORD *)(a1 + 32);
            v116 = *(_QWORD *)(*(_QWORD *)(v115 + 48) + 8 * sub_22EFC306C(v20));
            v117 = v116
                 / sub_22EF5CDF0(*(_QWORD *)(a1 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16408) & 0xFFFFFFFFFFFFFFF0));
            v118 = sub_22E5E4000(a1, v20);
            v119 = v118;
            v121 = *(__n128 **)(a1 + 56);
            v120 = *(_QWORD *)(a1 + 64);
            if ((unint64_t)v121 >= v120)
            {
              v123 = *(__n128 **)(a1 + 48);
              v124 = ((char *)v121 - (char *)v123) >> 5;
              v125 = v124 + 1;
              if ((unint64_t)(v124 + 1) >> 59)
                goto LABEL_544;
              v126 = v120 - (_QWORD)v123;
              if (v126 >> 4 > v125)
                v125 = v126 >> 4;
              if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFE0)
                v127 = 0x7FFFFFFFFFFFFFFLL;
              else
                v127 = v125;
              if (v127)
              {
                if (v127 >> 59)
                  goto LABEL_545;
                v128 = (char *)operator new(32 * v127);
              }
              else
              {
                v128 = 0;
              }
              v129 = &v128[32 * v124];
              *(_QWORD *)v129 = v117;
              *((_DWORD *)v129 + 2) = 2;
              *((_QWORD *)v129 + 2) = v119;
              *((_QWORD *)v129 + 3) = v20;
              v130 = (__n128 *)v129;
              if (v121 != v123)
              {
                do
                {
                  v19 = v121[-2];
                  v131 = v121[-1];
                  v130[-2] = v19;
                  v130[-1] = v131;
                  v130 -= 2;
                  v121 -= 2;
                }
                while (v121 != v123);
                v121 = *(__n128 **)(a1 + 48);
              }
              v122 = (__n128 *)(v129 + 32);
              *(_QWORD *)(a1 + 48) = v130;
              *(_QWORD *)(a1 + 56) = v129 + 32;
              *(_QWORD *)(a1 + 64) = &v128[32 * v127];
              if (v121)
                operator delete(v121);
            }
            else
            {
              v121->n128_u64[0] = v117;
              v121->n128_u32[2] = 2;
              v122 = v121 + 2;
              v121[1].n128_u64[0] = v118;
              v121[1].n128_u64[1] = v20;
            }
            *(_QWORD *)(a1 + 56) = v122;
            do
              v20 = *(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF8;
            while (v20 && (*(_DWORD *)(v20 + 28) & 0x7Fu) - 49 >= 3);
          }
          goto LABEL_198;
        }
        v21 = v20;
        while (1)
        {
          v21 = *(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFFF8;
          if (!v21)
            break;
          if ((*(_DWORD *)(v21 + 28) & 0x7Fu) - 49 <= 2)
          {
LABEL_47:
            if ((*(_BYTE *)(v21 + 68) & 1) != 0)
            {
              while (1)
              {
                v21 = *(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFFF8;
                if (!v21)
                  break;
                if ((*(_DWORD *)(v21 + 28) & 0x7Fu) - 49 <= 2)
                  goto LABEL_47;
              }
            }
            break;
          }
        }
        v22 = *(_QWORD *)(a1 + 8);
        if (*(_DWORD *)(*(_QWORD *)(v22 + 15088) + 148) != 11
          && !sub_22EFC3D58(*(_QWORD *)(a1 + 16))
          && (*(_QWORD *)(*(_QWORD *)(v22 + 2000) + 8) & 0x20000000000000) == 0)
        {
          break;
        }
        if (v20 != v21)
        {
          v81 = 0;
          v365 = 0;
          v82 = v21;
          do
          {
            v83 = *(_QWORD *)(a1 + 32);
            v84 = *(_QWORD *)(*(_QWORD *)(v83 + 48) + 8 * sub_22EFC306C(v20));
            if (sub_22EFC2F84(v20, *(_QWORD *)(a1 + 8)))
            {
              v82 = v21;
            }
            else
            {
              v85 = (llvm::Type *)sub_22E66C868(*(_QWORD *)a1, *(_QWORD *)(v20 + 48), 1);
              if (v82 == v21 || v84 >= v365)
              {
                v369[0] = sub_22E5E3AA0(*(llvm::DataLayout **)(a1 + 40), v85);
                v369[1] = v86;
                v87 = llvm::TypeSize::operator unsigned long long();
                v88 = sub_22EF5CDF0(*(_QWORD *)(a1 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16408) & 0xFFFFFFFFFFFFFFF0));
                v90 = *(unint64_t **)(a1 + 56);
                v89 = *(_QWORD *)(a1 + 64);
                v91 = v84 / v88;
                if ((unint64_t)v90 >= v89)
                {
                  v93 = *(char **)(a1 + 48);
                  v94 = ((char *)v90 - v93) >> 5;
                  v95 = v94 + 1;
                  if ((unint64_t)(v94 + 1) >> 59)
                    goto LABEL_544;
                  v96 = v89 - (_QWORD)v93;
                  if (v96 >> 4 > v95)
                    v95 = v96 >> 4;
                  if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFE0)
                    v95 = 0x7FFFFFFFFFFFFFFLL;
                  v366 = v95;
                  if (v95)
                  {
                    if (v95 >> 59)
                      goto LABEL_545;
                    v97 = (char *)operator new(32 * v95);
                  }
                  else
                  {
                    v97 = 0;
                  }
                  v98 = &v97[32 * v94];
                  *(_QWORD *)v98 = v91;
                  *((_DWORD *)v98 + 2) = 2;
                  *((_QWORD *)v98 + 2) = v85;
                  *((_QWORD *)v98 + 3) = 0;
                  v99 = v98;
                  if (v90 != (unint64_t *)v93)
                  {
                    do
                    {
                      v100 = *((_OWORD *)v90 - 1);
                      *((_OWORD *)v99 - 2) = *((_OWORD *)v90 - 2);
                      *((_OWORD *)v99 - 1) = v100;
                      v99 -= 32;
                      v90 -= 4;
                    }
                    while (v90 != (unint64_t *)v93);
                    v90 = *(unint64_t **)(a1 + 48);
                  }
                  v92 = v98 + 32;
                  *(_QWORD *)(a1 + 48) = v99;
                  *(_QWORD *)(a1 + 56) = v98 + 32;
                  *(_QWORD *)(a1 + 64) = &v97[32 * v366];
                  if (v90)
                    operator delete(v90);
                }
                else
                {
                  *v90 = v91;
                  *((_DWORD *)v90 + 2) = 2;
                  v92 = v90 + 4;
                  v90[2] = (unint64_t)v85;
                  v90[3] = 0;
                }
                v365 = v87 + v84;
                *(_QWORD *)(a1 + 56) = v92;
                v82 = v20;
                v81 = v84;
              }
              v101 = sub_22EF5CDF0(*(_QWORD *)(a1 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16408) & 0xFFFFFFFFFFFFFFF0));
              v103 = *(__n128 **)(a1 + 56);
              v102 = *(_QWORD *)(a1 + 64);
              v104 = v81 / v101;
              if ((unint64_t)v103 >= v102)
              {
                v106 = *(__n128 **)(a1 + 48);
                v107 = ((char *)v103 - (char *)v106) >> 5;
                v108 = v107 + 1;
                if ((unint64_t)(v107 + 1) >> 59)
                  goto LABEL_544;
                v109 = v102 - (_QWORD)v106;
                if (v109 >> 4 > v108)
                  v108 = v109 >> 4;
                if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFE0)
                  v110 = 0x7FFFFFFFFFFFFFFLL;
                else
                  v110 = v108;
                if (v110)
                {
                  if (v110 >> 59)
                    goto LABEL_545;
                  v111 = (char *)operator new(32 * v110);
                }
                else
                {
                  v111 = 0;
                }
                v112 = &v111[32 * v107];
                *(_QWORD *)v112 = v104;
                *((_DWORD *)v112 + 2) = 2;
                *((_QWORD *)v112 + 2) = 0;
                *((_QWORD *)v112 + 3) = v20;
                v113 = (__n128 *)v112;
                if (v103 != v106)
                {
                  do
                  {
                    v19 = v103[-2];
                    v114 = v103[-1];
                    v113[-2] = v19;
                    v113[-1] = v114;
                    v113 -= 2;
                    v103 -= 2;
                  }
                  while (v103 != v106);
                  v103 = *(__n128 **)(a1 + 48);
                }
                v105 = (__n128 *)(v112 + 32);
                *(_QWORD *)(a1 + 48) = v113;
                *(_QWORD *)(a1 + 56) = v112 + 32;
                *(_QWORD *)(a1 + 64) = &v111[32 * v110];
                if (v103)
                  operator delete(v103);
              }
              else
              {
                v103->n128_u64[0] = v104;
                v103->n128_u32[2] = 2;
                v105 = v103 + 2;
                v103[1].n128_u64[0] = 0;
                v103[1].n128_u64[1] = v20;
              }
              *(_QWORD *)(a1 + 56) = v105;
            }
            do
              v20 = *(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF8;
            while (v20 && (*(_DWORD *)(v20 + 28) & 0x7Fu) - 49 > 2);
          }
          while (v21 != v20);
          goto LABEL_177;
        }
LABEL_198:
        if (!v20)
          goto LABEL_199;
      }
      v23 = 0;
      v364 = 0;
      v24 = 0;
      v25 = v21;
      while (1)
      {
        if (v25 != v21)
        {
          if (v23 || v20 == v21)
          {
            v26 = v364;
          }
          else
          {
            v26 = v364;
            while (1)
            {
              v27 = v26;
              v28 = (int8x8_t)(v26 - v24);
              if (v26 - v24 >= 8)
              {
                v29 = (uint8x8_t)vcnt_s8(v28);
                v29.i16[0] = vaddlv_u8(v29);
                if ((*(_QWORD *)(*(_QWORD *)(**(_QWORD **)a1 + 184) + 32) & 0x100000000000000) != 0
                  && v29.u32[0] <= 1uLL)
                {
                  v31 = *(_QWORD *)(a1 + 40);
                  v32 = *(_QWORD *)(v31 + 40);
                  if (v32)
                  {
                    v33 = *(_QWORD *)&v28 - 1;
                    v34 = *(unsigned __int8 **)(v31 + 32);
                    while (*v34 < v28.i32[0])
                    {
                      ++v34;
                      if (!--v32)
                        goto LABEL_67;
                    }
                    v35 = *(_QWORD *)(a1 + 8);
                    v36 = sub_22EF5CDF0(v35, *(_QWORD *)(*(_QWORD *)(v35 + 16408) & 0xFFFFFFFFFFFFFFF0));
                    IntNTy = (llvm::Type *)llvm::Type::getIntNTy(**(llvm::Type ***)(*(_QWORD *)a1 + 16), (llvm::LLVMContext *)(((v33 + v36) / v36) * v36));
                    ABITypeAlignment = llvm::DataLayout::getABITypeAlignment(*(llvm::DataLayout **)(a1 + 40), IntNTy);
                    if (!(v24
                         % (sub_22EF5CDF0(v35, *(_QWORD *)(*(_QWORD *)(v35 + 16408) & 0xFFFFFFFFFFFFFFF0))
                          * ABITypeAlignment)))
                      break;
                  }
                }
              }
LABEL_67:
              if (sub_22EFC2F84(v20, *(_QWORD *)(a1 + 8))
                && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 15088)
                             + *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 15088) - 24)
                             + 160) & 6) != 0)
              {
                break;
              }
              v39 = *v368;
              v40 = *(_QWORD *)(*(_QWORD *)(v39 + 48) + 8 * sub_22EFC306C(v20));
              v26 = v27;
              if (v27 != v40)
                goto LABEL_76;
              v26 = v27 + sub_22EFC2EF4(v20, *(_QWORD *)(a1 + 8));
              do
                v20 = *(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF8;
              while (v20 && (*(_DWORD *)(v20 + 28) & 0x7Fu) - 49 > 2);
              if (v21 == v20)
              {
                v20 = v21;
                goto LABEL_76;
              }
            }
            v26 = v27;
          }
LABEL_76:
          v364 = v26;
          v41 = sub_22EF5CDF0(*(_QWORD *)(a1 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16408) & 0xFFFFFFFFFFFFFFF0));
          v42 = llvm::Type::getIntNTy(**(llvm::Type ***)(*(_QWORD *)a1 + 16), (llvm::LLVMContext *)(((v26 + ~v24 + v41) / v41) * v41));
          v43 = sub_22EF5CDF0(*(_QWORD *)(a1 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16408) & 0xFFFFFFFFFFFFFFF0));
          v45 = *(__n128 **)(a1 + 56);
          v44 = *(_QWORD *)(a1 + 64);
          v46 = v24 / v43;
          if ((unint64_t)v45 >= v44)
          {
            v48 = *(__n128 **)(a1 + 48);
            v49 = ((char *)v45 - (char *)v48) >> 5;
            v50 = v49 + 1;
            if ((unint64_t)(v49 + 1) >> 59)
              goto LABEL_544;
            v51 = v44 - (_QWORD)v48;
            if (v51 >> 4 > v50)
              v50 = v51 >> 4;
            if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFE0)
              v50 = 0x7FFFFFFFFFFFFFFLL;
            v363 = v50;
            if (v50)
            {
              if (v50 >> 59)
                goto LABEL_545;
              v52 = (char *)operator new(32 * v50);
            }
            else
            {
              v52 = 0;
            }
            v53 = &v52[32 * v49];
            *(_QWORD *)v53 = v46;
            *((_DWORD *)v53 + 2) = 2;
            *((_QWORD *)v53 + 2) = v42;
            *((_QWORD *)v53 + 3) = 0;
            v54 = (__n128 *)v53;
            if (v45 != v48)
            {
              do
              {
                v19 = v45[-2];
                v55 = v45[-1];
                v54[-2] = v19;
                v54[-1] = v55;
                v54 -= 2;
                v45 -= 2;
              }
              while (v45 != v48);
              v45 = *(__n128 **)(a1 + 48);
            }
            v47 = (__n128 *)(v53 + 32);
            *(_QWORD *)(a1 + 48) = v54;
            *(_QWORD *)(a1 + 56) = v53 + 32;
            *(_QWORD *)(a1 + 64) = &v52[32 * v363];
            if (v45)
              operator delete(v45);
          }
          else
          {
            v45->n128_u64[0] = v46;
            v45->n128_u32[2] = 2;
            v47 = v45 + 2;
            v45[1].n128_u64[0] = v42;
            v45[1].n128_u64[1] = 0;
          }
          *(_QWORD *)(a1 + 56) = v47;
          if (v25 == v20)
          {
            v23 = 0;
            v20 = v25;
          }
          else
          {
            do
            {
              v56 = sub_22EF5CDF0(*(_QWORD *)(a1 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16408) & 0xFFFFFFFFFFFFFFF0));
              v58 = *(__n128 **)(a1 + 56);
              v57 = *(_QWORD *)(a1 + 64);
              v59 = v24 / v56;
              if ((unint64_t)v58 >= v57)
              {
                v61 = *(__n128 **)(a1 + 48);
                v62 = ((char *)v58 - (char *)v61) >> 5;
                v63 = v62 + 1;
                if ((unint64_t)(v62 + 1) >> 59)
                  goto LABEL_544;
                v64 = v57 - (_QWORD)v61;
                if (v64 >> 4 > v63)
                  v63 = v64 >> 4;
                if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFE0)
                  v65 = 0x7FFFFFFFFFFFFFFLL;
                else
                  v65 = v63;
                if (v65)
                {
                  if (v65 >> 59)
                    goto LABEL_545;
                  v66 = (char *)operator new(32 * v65);
                }
                else
                {
                  v66 = 0;
                }
                v67 = &v66[32 * v62];
                *(_QWORD *)v67 = v59;
                *((_DWORD *)v67 + 2) = 2;
                *((_QWORD *)v67 + 2) = 0;
                *((_QWORD *)v67 + 3) = v25;
                v68 = (__n128 *)v67;
                if (v58 != v61)
                {
                  do
                  {
                    v19 = v58[-2];
                    v69 = v58[-1];
                    v68[-2] = v19;
                    v68[-1] = v69;
                    v68 -= 2;
                    v58 -= 2;
                  }
                  while (v58 != v61);
                  v58 = *(__n128 **)(a1 + 48);
                }
                v60 = (__n128 *)(v67 + 32);
                *(_QWORD *)(a1 + 48) = v68;
                *(_QWORD *)(a1 + 56) = v67 + 32;
                *(_QWORD *)(a1 + 64) = &v66[32 * v65];
                if (v58)
                  operator delete(v58);
              }
              else
              {
                v58->n128_u64[0] = v59;
                v58->n128_u32[2] = 2;
                v60 = v58 + 2;
                v58[1].n128_u64[0] = 0;
                v58[1].n128_u64[1] = v25;
              }
              *(_QWORD *)(a1 + 56) = v60;
              do
                v25 = *(_QWORD *)(v25 + 8) & 0xFFFFFFFFFFFFFFF8;
              while (v25 && (*(_DWORD *)(v25 + 28) & 0x7Fu) - 49 > 2);
            }
            while (v20 != v25);
            v23 = 0;
          }
        }
        if (v20 == v21)
          break;
        v25 = v21;
        if (!sub_22EFC2F84(v20, *(_QWORD *)(a1 + 8)))
        {
          v70 = *(_QWORD *)(a1 + 32);
          v24 = *(_QWORD *)(*(_QWORD *)(v70 + 48) + 8 * sub_22EFC306C(v20));
          v71 = sub_22EFC2EF4(v20, *(_QWORD *)(a1 + 8));
          v23 = 0;
          v364 = v24 + v71;
          if (v71 >= 8)
          {
            v19.n128_u32[0] = v71;
            v19.n128_u64[0] = (unint64_t)vcnt_s8((int8x8_t)v19.n128_u64[0]);
            v19.n128_u16[0] = vaddlv_u8((uint8x8_t)v19.n128_u64[0]);
            if ((*(_QWORD *)(*(_QWORD *)(**(_QWORD **)a1 + 184) + 32) & 0x100000000000000) != 0
              && v19.n128_u32[0] <= 1uLL)
            {
              v73 = *(_QWORD *)(a1 + 40);
              v74 = *(_QWORD *)(v73 + 40);
              if (v74)
              {
                v75 = v71;
                v76 = *(unsigned __int8 **)(v73 + 32);
                while (v71 > *v76)
                {
                  ++v76;
                  if (!--v74)
                    goto LABEL_127;
                }
                v77 = *(_QWORD *)(a1 + 8);
                v78 = sub_22EF5CDF0(v77, *(_QWORD *)(*(_QWORD *)(v77 + 16408) & 0xFFFFFFFFFFFFFFF0));
                v79 = (llvm::Type *)llvm::Type::getIntNTy(**(llvm::Type ***)(*(_QWORD *)a1 + 16), (llvm::LLVMContext *)(((v75 + v78 - 1) / v78) * v78));
                v80 = llvm::DataLayout::getABITypeAlignment(*(llvm::DataLayout **)(a1 + 40), v79);
                v23 = v24 % (sub_22EF5CDF0(v77, *(_QWORD *)(*(_QWORD *)(v77 + 16408) & 0xFFFFFFFFFFFFFFF0)) * v80) == 0;
              }
              else
              {
LABEL_127:
                v23 = 0;
              }
            }
          }
          v25 = v20;
        }
        do
          v20 = *(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF8;
        while (v20 && (*(_DWORD *)(v20 + 28) & 0x7Fu) - 49 > 2);
      }
LABEL_177:
      v20 = v21;
      goto LABEL_198;
    }
LABEL_199:
    if (*(_QWORD *)(a1 + 24))
    {
      v132 = *(_QWORD *)(*v368 + 72);
      if ((*(_BYTE *)(v132 + 40) & 1) != 0)
      {
        v133 = sub_22EF5CDF0(*(_QWORD *)(a1 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16408) & 0xFFFFFFFFFFFFFFF0));
        llvm::Type::getIntNTy(**(llvm::Type ***)(*(_QWORD *)a1 + 16), (llvm::LLVMContext *)(((v133 + 31) / v133) * v133));
        llvm::FunctionType::get();
        llvm::PointerType::get();
        v134 = llvm::PointerType::get();
        v135 = v134;
        v137 = *(char **)(a1 + 56);
        v136 = *(_QWORD *)(a1 + 64);
        if ((unint64_t)v137 >= v136)
        {
          v143 = *(char **)(a1 + 48);
          v144 = (v137 - v143) >> 5;
          v145 = v144 + 1;
          if ((unint64_t)(v144 + 1) >> 59)
            goto LABEL_544;
          v146 = v136 - (_QWORD)v143;
          if (v146 >> 4 > v145)
            v145 = v146 >> 4;
          if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFE0)
            v147 = 0x7FFFFFFFFFFFFFFLL;
          else
            v147 = v145;
          if (v147)
          {
            if (v147 >> 59)
              goto LABEL_545;
            v148 = (char *)operator new(32 * v147);
          }
          else
          {
            v148 = 0;
          }
          v149 = &v148[32 * v144];
          *(_QWORD *)v149 = 0;
          *((_DWORD *)v149 + 2) = 0;
          *((_QWORD *)v149 + 2) = v135;
          *((_QWORD *)v149 + 3) = 0;
          v138 = v149 + 32;
          if (v137 != v143)
          {
            do
            {
              v150 = *((_OWORD *)v137 - 1);
              *((_OWORD *)v149 - 2) = *((_OWORD *)v137 - 2);
              *((_OWORD *)v149 - 1) = v150;
              v149 -= 32;
              v137 -= 32;
            }
            while (v137 != v143);
            v137 = *(char **)(a1 + 48);
          }
          *(_QWORD *)(a1 + 48) = v149;
          *(_QWORD *)(a1 + 56) = v138;
          *(_QWORD *)(a1 + 64) = &v148[32 * v147];
          if (v137)
            operator delete(v137);
        }
        else
        {
          *(_QWORD *)v137 = 0;
          *((_DWORD *)v137 + 2) = 0;
          v138 = v137 + 32;
          *((_QWORD *)v137 + 2) = v134;
          *((_QWORD *)v137 + 3) = 0;
        }
        *(_QWORD *)(a1 + 56) = v138;
        v132 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 72);
      }
      v151 = *(_QWORD *)(v132 + 32);
      if ((v151 & 0x8000000000000000) == 0 && !*(_QWORD *)(v132 + 56))
      {
        Int32PtrTy = llvm::Type::getInt32PtrTy(**(llvm::Type ***)(*(_QWORD *)a1 + 16), 0);
        v153 = Int32PtrTy;
        v155 = *(char **)(a1 + 56);
        v154 = *(_QWORD *)(a1 + 64);
        if ((unint64_t)v155 >= v154)
        {
          v157 = *(char **)(a1 + 48);
          v158 = (v155 - v157) >> 5;
          v159 = v158 + 1;
          if ((unint64_t)(v158 + 1) >> 59)
            goto LABEL_544;
          v160 = v154 - (_QWORD)v157;
          if (v160 >> 4 > v159)
            v159 = v160 >> 4;
          if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFE0)
            v161 = 0x7FFFFFFFFFFFFFFLL;
          else
            v161 = v159;
          if (v161)
          {
            if (v161 >> 59)
              goto LABEL_545;
            v162 = (char *)operator new(32 * v161);
          }
          else
          {
            v162 = 0;
          }
          v163 = &v162[32 * v158];
          *(_QWORD *)v163 = v151;
          *((_DWORD *)v163 + 2) = 1;
          *((_QWORD *)v163 + 2) = v153;
          *((_QWORD *)v163 + 3) = 0;
          v156 = v163 + 32;
          if (v155 != v157)
          {
            do
            {
              v164 = *((_OWORD *)v155 - 1);
              *((_OWORD *)v163 - 2) = *((_OWORD *)v155 - 2);
              *((_OWORD *)v163 - 1) = v164;
              v163 -= 32;
              v155 -= 32;
            }
            while (v155 != v157);
            v155 = *(char **)(a1 + 48);
          }
          *(_QWORD *)(a1 + 48) = v163;
          *(_QWORD *)(a1 + 56) = v156;
          *(_QWORD *)(a1 + 64) = &v162[32 * v161];
          if (v155)
            operator delete(v155);
        }
        else
        {
          *(_QWORD *)v155 = v151;
          *((_DWORD *)v155 + 2) = 1;
          *((_QWORD *)v155 + 2) = Int32PtrTy;
          *((_QWORD *)v155 + 3) = 0;
          v156 = v155 + 32;
        }
        *(_QWORD *)(a1 + 56) = v156;
        v132 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 72);
      }
      v165 = *(_QWORD *)(v132 + 48);
      if ((v165 & 4) != 0)
      {
        v166 = v165 & 0xFFFFFFFFFFFFFFF8;
        v167 = *(_QWORD *)(sub_22E66DD94(*(_QWORD *)a1, v165 & 0xFFFFFFFFFFFFFFF8) + 8);
        v169 = *(char **)(a1 + 56);
        v168 = *(_QWORD *)(a1 + 64);
        if ((unint64_t)v169 >= v168)
        {
          v171 = *(char **)(a1 + 48);
          v172 = (v169 - v171) >> 5;
          v173 = v172 + 1;
          if ((unint64_t)(v172 + 1) >> 59)
            goto LABEL_544;
          v174 = v168 - (_QWORD)v171;
          if (v174 >> 4 > v173)
            v173 = v174 >> 4;
          if ((unint64_t)v174 >= 0x7FFFFFFFFFFFFFE0)
            v175 = 0x7FFFFFFFFFFFFFFLL;
          else
            v175 = v173;
          if (v175)
          {
            if (v175 >> 59)
              goto LABEL_545;
            v176 = (char *)operator new(32 * v175);
          }
          else
          {
            v176 = 0;
          }
          v177 = &v176[32 * v172];
          *(_QWORD *)v177 = 0;
          *((_DWORD *)v177 + 2) = 3;
          *((_QWORD *)v177 + 2) = v167;
          *((_QWORD *)v177 + 3) = v166;
          v170 = v177 + 32;
          if (v169 != v171)
          {
            do
            {
              v178 = *((_OWORD *)v169 - 1);
              *((_OWORD *)v177 - 2) = *((_OWORD *)v169 - 2);
              *((_OWORD *)v177 - 1) = v178;
              v177 -= 32;
              v169 -= 32;
            }
            while (v169 != v171);
            v169 = *(char **)(a1 + 48);
          }
          *(_QWORD *)(a1 + 48) = v177;
          *(_QWORD *)(a1 + 56) = v170;
          *(_QWORD *)(a1 + 64) = &v176[32 * v175];
          if (v169)
            operator delete(v169);
        }
        else
        {
          *(_QWORD *)v169 = 0;
          *((_DWORD *)v169 + 2) = 3;
          *((_QWORD *)v169 + 2) = v167;
          *((_QWORD *)v169 + 3) = v166;
          v170 = v169 + 32;
        }
        *(_QWORD *)(a1 + 56) = v170;
      }
      v179 = sub_22E46A3A0(*(_QWORD *)(a1 + 24));
      if (v179 != v180)
      {
        v181 = v179;
        v182 = v180;
        do
        {
          if ((*(_BYTE *)(v181 + 12) & 1) == 0)
          {
            v183 = *(_QWORD *)(**(_QWORD **)(v181 + 16) & 0xFFFFFFFFFFFFFFF0);
            if ((*(_BYTE *)(v183 + 8) & 0xF) != 0)
              v183 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v181 + 16));
            v184 = sub_22F10C2A4(*(_QWORD *)(v183 & 0xFFFFFFFFFFFFFFF0));
            v185 = (*(_DWORD *)(v184 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v184;
            sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v185 + 104) + 96), *(_QWORD *)(v185 + 104));
            if ((**(_QWORD **)(v185 + 128) & 0x200) == 0)
            {
              if (**(_QWORD **)(sub_22F0C975C(*(_QWORD *)(a1 + 8), v185) + 72))
              {
                v186 = sub_22E46A3EC(*(_QWORD *)(a1 + 32), v185);
                v187 = *(_QWORD *)(sub_22E66DD94(*(_QWORD *)a1, v185) + 8);
                v189 = *(__n128 **)(a1 + 56);
                v188 = *(_QWORD *)(a1 + 64);
                if ((unint64_t)v189 >= v188)
                {
                  v191 = *(__n128 **)(a1 + 48);
                  v192 = ((char *)v189 - (char *)v191) >> 5;
                  v193 = v192 + 1;
                  if ((unint64_t)(v192 + 1) >> 59)
                    goto LABEL_544;
                  v194 = v188 - (_QWORD)v191;
                  if (v194 >> 4 > v193)
                    v193 = v194 >> 4;
                  if ((unint64_t)v194 >= 0x7FFFFFFFFFFFFFE0)
                    v195 = 0x7FFFFFFFFFFFFFFLL;
                  else
                    v195 = v193;
                  if (v195)
                  {
                    if (v195 >> 59)
                      goto LABEL_545;
                    v196 = (char *)operator new(32 * v195);
                  }
                  else
                  {
                    v196 = 0;
                  }
                  v197 = &v196[32 * v192];
                  *(_QWORD *)v197 = v186;
                  *((_DWORD *)v197 + 2) = 3;
                  *((_QWORD *)v197 + 2) = v187;
                  *((_QWORD *)v197 + 3) = v185;
                  v198 = (__n128 *)v197;
                  if (v189 != v191)
                  {
                    do
                    {
                      v19 = v189[-2];
                      v199 = v189[-1];
                      v198[-2] = v19;
                      v198[-1] = v199;
                      v198 -= 2;
                      v189 -= 2;
                    }
                    while (v189 != v191);
                    v189 = *(__n128 **)(a1 + 48);
                  }
                  v190 = (__n128 *)(v197 + 32);
                  *(_QWORD *)(a1 + 48) = v198;
                  *(_QWORD *)(a1 + 56) = v197 + 32;
                  *(_QWORD *)(a1 + 64) = &v196[32 * v195];
                  if (v189)
                    operator delete(v189);
                }
                else
                {
                  v189->n128_u64[0] = v186;
                  v189->n128_u32[2] = 3;
                  v190 = v189 + 2;
                  v189[1].n128_u64[0] = v187;
                  v189[1].n128_u64[1] = v185;
                }
                *(_QWORD *)(a1 + 56) = v190;
              }
            }
          }
          v181 += 24;
        }
        while (v181 != v182);
      }
      if (*(_QWORD *)(a1 + 48) == *(_QWORD *)(a1 + 56))
      {
        v141 = (uint64_t *)a1;
        v142 = v362;
        goto LABEL_316;
      }
      if ((v361 & 1) == 0)
      {
        v200 = **(_QWORD **)(*(_QWORD *)(a1 + 32) + 72);
        if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 15088) + 148) != 11)
        {
          v201 = sub_22E483108(*(_QWORD *)(a1 + 24));
          if (v201 != v202)
          {
            v203 = v201;
            v204 = v202;
            do
            {
              v205 = *(_QWORD *)(**(_QWORD **)(v203 + 16) & 0xFFFFFFFFFFFFFFF0);
              if ((*(_BYTE *)(v205 + 8) & 0xF) != 0)
                v205 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v203 + 16));
              v206 = sub_22F10C2A4(*(_QWORD *)(v205 & 0xFFFFFFFFFFFFFFF0));
              if (v206)
              {
                if ((*(_DWORD *)(v206 + 28) & 0x7Fu) - 35 >= 3)
                  v207 = 0;
                else
                  v207 = v206;
              }
              else
              {
                v207 = 0;
              }
              sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v207 + 104) + 96), *(_QWORD *)(v207 + 104));
              if ((**(_QWORD **)(v207 + 128) & 0x200) == 0
                && (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 15064)
                                                                     + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 15064), v207)|| sub_22E5E4564(a1, *(_QWORD *)(a1 + 24), v207)))
              {
                v208 = sub_22F2500F4(*v368, v207);
                if (v208 < v200)
                  v200 = v208;
              }
              v203 += 24;
            }
            while (v203 != v204);
          }
        }
        v209 = *(_QWORD *)(a1 + 24);
        v211 = *(uint64_t **)(a1 + 56);
        v210 = *(_QWORD *)(a1 + 64);
        if ((unint64_t)v211 >= v210)
        {
          v213 = *(char **)(a1 + 48);
          v214 = ((char *)v211 - v213) >> 5;
          v215 = v214 + 1;
          if ((unint64_t)(v214 + 1) >> 59)
            goto LABEL_544;
          v216 = v210 - (_QWORD)v213;
          if (v216 >> 4 > v215)
            v215 = v216 >> 4;
          if ((unint64_t)v216 >= 0x7FFFFFFFFFFFFFE0)
            v217 = 0x7FFFFFFFFFFFFFFLL;
          else
            v217 = v215;
          if (v217)
          {
            if (v217 >> 59)
              goto LABEL_545;
            v218 = (char *)operator new(32 * v217);
          }
          else
          {
            v218 = 0;
          }
          v219 = &v218[32 * v214];
          *(_QWORD *)v219 = v200;
          *((_DWORD *)v219 + 2) = 5;
          *((_QWORD *)v219 + 2) = 0;
          *((_QWORD *)v219 + 3) = v209;
          v212 = v219 + 32;
          if (v211 != (uint64_t *)v213)
          {
            do
            {
              v220 = *((_OWORD *)v211 - 1);
              *((_OWORD *)v219 - 2) = *((_OWORD *)v211 - 2);
              *((_OWORD *)v219 - 1) = v220;
              v219 -= 32;
              v211 -= 4;
            }
            while (v211 != (uint64_t *)v213);
            v211 = *(uint64_t **)(a1 + 48);
          }
          *(_QWORD *)(a1 + 48) = v219;
          *(_QWORD *)(a1 + 56) = v212;
          *(_QWORD *)(a1 + 64) = &v218[32 * v217];
          if (v211)
            operator delete(v211);
        }
        else
        {
          *v211 = v200;
          *((_DWORD *)v211 + 2) = 5;
          v211[2] = 0;
          v211[3] = v209;
          v212 = v211 + 4;
        }
        *(_QWORD *)(a1 + 56) = v212;
        v221 = sub_22E483108(*(_QWORD *)(a1 + 24));
        if (v221 != v222)
        {
          v223 = v221;
          v224 = v222;
          do
          {
            v225 = *(_QWORD *)(**(_QWORD **)(v223 + 16) & 0xFFFFFFFFFFFFFFF0);
            if ((*(_BYTE *)(v225 + 8) & 0xF) != 0)
              v225 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v223 + 16));
            v226 = sub_22F10C2A4(*(_QWORD *)(v225 & 0xFFFFFFFFFFFFFFF0));
            if (v226)
            {
              if ((*(_DWORD *)(v226 + 28) & 0x7Fu) - 35 >= 3)
                v227 = 0;
              else
                v227 = v226;
            }
            else
            {
              v227 = 0;
            }
            sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v227 + 104) + 96), *(_QWORD *)(v227 + 104));
            if ((**(_QWORD **)(v227 + 128) & 0x200) != 0)
              goto LABEL_344;
            v228 = sub_22F2500F4(*(_QWORD *)(a1 + 32), v227);
            v229 = *(_QWORD *)(a1 + 8);
            if (*(_DWORD *)(*(_QWORD *)(v229 + 15088) + 148) == 11
              || !(*(unsigned int (**)(_QWORD, unint64_t))(**(_QWORD **)(v229 + 15064) + 32))(*(_QWORD *)(v229 + 15064), v227)|| (sub_22E5E4564(a1, *(_QWORD *)(a1 + 24), v227) & 1) != 0)
            {
              if (*(_BYTE *)(sub_22E5E4648(*(_QWORD *)(*v368 + 72) + 88, v227) + 16))
              {
                v230 = v228 - 4;
                v231 = sub_22EF5CDF0(*(_QWORD *)(a1 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16408) & 0xFFFFFFFFFFFFFFF0));
                v232 = llvm::Type::getIntNTy(**(llvm::Type ***)(*(_QWORD *)a1 + 16), (llvm::LLVMContext *)(((v231 + 31) / v231) * v231));
                v233 = v232;
                v235 = *(uint64_t **)(a1 + 56);
                v234 = *(_QWORD *)(a1 + 64);
                if ((unint64_t)v235 >= v234)
                {
                  v237 = v228;
                  v238 = *(char **)(a1 + 48);
                  v239 = ((char *)v235 - v238) >> 5;
                  v240 = v239 + 1;
                  if ((unint64_t)(v239 + 1) >> 59)
                    goto LABEL_544;
                  v241 = v234 - (_QWORD)v238;
                  if (v241 >> 4 > v240)
                    v240 = v241 >> 4;
                  if ((unint64_t)v241 >= 0x7FFFFFFFFFFFFFE0)
                    v240 = 0x7FFFFFFFFFFFFFFLL;
                  v367 = v240;
                  if (v240)
                  {
                    if (v240 >> 59)
                      goto LABEL_545;
                    v242 = (char *)operator new(32 * v240);
                  }
                  else
                  {
                    v242 = 0;
                  }
                  v246 = &v242[32 * v239];
                  *(_QWORD *)v246 = v230;
                  *((_DWORD *)v246 + 2) = 2;
                  *((_QWORD *)v246 + 2) = v233;
                  *((_QWORD *)v246 + 3) = 0;
                  v247 = v246;
                  v228 = v237;
                  if (v235 != (uint64_t *)v238)
                  {
                    do
                    {
                      v248 = *((_OWORD *)v235 - 1);
                      *((_OWORD *)v247 - 2) = *((_OWORD *)v235 - 2);
                      *((_OWORD *)v247 - 1) = v248;
                      v247 -= 32;
                      v235 -= 4;
                    }
                    while (v235 != (uint64_t *)v238);
                    v235 = *(uint64_t **)(a1 + 48);
                  }
                  v236 = v246 + 32;
                  *(_QWORD *)(a1 + 48) = v247;
                  *(_QWORD *)(a1 + 56) = v246 + 32;
                  *(_QWORD *)(a1 + 64) = &v242[32 * v367];
                  if (v235)
                    operator delete(v235);
                }
                else
                {
                  *v235 = v230;
                  *((_DWORD *)v235 + 2) = 2;
                  v236 = v235 + 4;
                  v235[2] = v232;
                  v235[3] = 0;
                }
                *(_QWORD *)(a1 + 56) = v236;
              }
              v249 = *(_QWORD *)(sub_22E66DD94(*(_QWORD *)a1, v227) + 8);
              v244 = *(__n128 **)(a1 + 56);
              v250 = *(_QWORD *)(a1 + 64);
              if ((unint64_t)v244 >= v250)
              {
                v251 = v228;
                v252 = *(__n128 **)(a1 + 48);
                v253 = ((char *)v244 - (char *)v252) >> 5;
                v254 = v253 + 1;
                if ((unint64_t)(v253 + 1) >> 59)
                  goto LABEL_544;
                v255 = v250 - (_QWORD)v252;
                if (v255 >> 4 > v254)
                  v254 = v255 >> 4;
                if ((unint64_t)v255 >= 0x7FFFFFFFFFFFFFE0)
                  v256 = 0x7FFFFFFFFFFFFFFLL;
                else
                  v256 = v254;
                if (v256)
                {
                  if (v256 >> 59)
                    goto LABEL_545;
                  v257 = (char *)operator new(32 * v256);
                }
                else
                {
                  v257 = 0;
                }
                v258 = &v257[32 * v253];
                *(_QWORD *)v258 = v251;
                *((_DWORD *)v258 + 2) = 4;
                *((_QWORD *)v258 + 2) = v249;
                *((_QWORD *)v258 + 3) = v227;
                v259 = (__n128 *)v258;
                if (v244 != v252)
                {
                  do
                  {
                    v19 = v244[-2];
                    v260 = v244[-1];
                    v259[-2] = v19;
                    v259[-1] = v260;
                    v259 -= 2;
                    v244 -= 2;
                  }
                  while (v244 != v252);
                  v244 = *(__n128 **)(a1 + 48);
                }
                v261 = &v257[32 * v256];
LABEL_385:
                v245 = (__n128 *)(v258 + 32);
                *(_QWORD *)(a1 + 48) = v259;
                *(_QWORD *)(a1 + 56) = v258 + 32;
                *(_QWORD *)(a1 + 64) = v261;
                if (v244)
                  operator delete(v244);
                goto LABEL_387;
              }
              v244->n128_u64[0] = v228;
              v244->n128_u32[2] = 4;
              v245 = v244 + 2;
              v244[1].n128_u64[0] = v249;
              v244[1].n128_u64[1] = v227;
            }
            else
            {
              v244 = *(__n128 **)(a1 + 56);
              v243 = *(_QWORD *)(a1 + 64);
              if ((unint64_t)v244 >= v243)
              {
                v262 = *(__n128 **)(a1 + 48);
                v263 = ((char *)v244 - (char *)v262) >> 5;
                v264 = v263 + 1;
                if ((unint64_t)(v263 + 1) >> 59)
                  goto LABEL_544;
                v265 = v243 - (_QWORD)v262;
                if (v265 >> 4 > v264)
                  v264 = v265 >> 4;
                if ((unint64_t)v265 >= 0x7FFFFFFFFFFFFFE0)
                  v266 = 0x7FFFFFFFFFFFFFFLL;
                else
                  v266 = v264;
                if (v266)
                {
                  if (v266 >> 59)
                    goto LABEL_545;
                  v267 = (char *)operator new(32 * v266);
                }
                else
                {
                  v267 = 0;
                }
                v258 = &v267[32 * v263];
                *(_QWORD *)v258 = v228;
                *((_DWORD *)v258 + 2) = 4;
                *((_QWORD *)v258 + 2) = 0;
                *((_QWORD *)v258 + 3) = v227;
                v259 = (__n128 *)v258;
                if (v244 != v262)
                {
                  do
                  {
                    v19 = v244[-2];
                    v268 = v244[-1];
                    v259[-2] = v19;
                    v259[-1] = v268;
                    v259 -= 2;
                    v244 -= 2;
                  }
                  while (v244 != v262);
                  v244 = *(__n128 **)(a1 + 48);
                }
                v261 = &v267[32 * v266];
                goto LABEL_385;
              }
              v244->n128_u64[0] = v228;
              v244->n128_u32[2] = 4;
              v245 = v244 + 2;
              v244[1].n128_u64[0] = 0;
              v244[1].n128_u64[1] = v227;
            }
LABEL_387:
            *(_QWORD *)(a1 + 56) = v245;
LABEL_344:
            v223 += 24;
          }
          while (v223 != v224);
        }
      }
    }
    sub_22E5E3F4C(*(__n128 **)(a1 + 48), *(__n128 **)(a1 + 56), v19);
    v269 = sub_22EF5CDF0(*(_QWORD *)(a1 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16408) & 0xFFFFFFFFFFFFFFF0));
    v270 = llvm::Type::getIntNTy(**(llvm::Type ***)(*(_QWORD *)a1 + 16), (llvm::LLVMContext *)(((v269 + 7) / v269) * v269));
    v271 = v270;
    v273 = *(char **)(a1 + 56);
    v272 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)v273 < v272)
    {
      *(_QWORD *)v273 = v362;
      *((_DWORD *)v273 + 2) = 2;
      *((_QWORD *)v273 + 2) = v270;
      *((_QWORD *)v273 + 3) = 0;
      v274 = v273 + 32;
LABEL_419:
      *(_QWORD *)(a1 + 56) = v274;
      v283 = *(_QWORD *)(a1 + 48);
      v284 = sub_22E5E40F8(*(llvm::DataLayout **)(a1 + 40), *(llvm::Type **)(v283 + 16));
      v285 = *(_QWORD *)(a1 + 56);
      for (i = v283 + 32; i != v285; i += 32)
      {
        if (*(_QWORD *)(i + 16) || *(_DWORD *)(i + 8) == 5)
        {
          if (*(_QWORD *)i < v284)
          {
            v287 = *(_QWORD *)(v283 + 24);
            if (!v287 || (*(_BYTE *)(v287 + 68) & 1) != 0)
            {
              v291 = ((*(_DWORD *)(*(_QWORD *)(v283 + 16) + 8) >> 8) + 7) & 0x1FFFFF8;
              v292 = sub_22EF5CDF0(*(_QWORD *)(a1 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16408) & 0xFFFFFFFFFFFFFFF0));
              v289 = *(_QWORD *)(a1 + 8);
              v288 = v291 / v292;
              v290 = **(llvm::Type ***)(*(_QWORD *)a1 + 16);
            }
            else
            {
              sub_22EF5CC54(*(_QWORD *)(a1 + 8), *(_QWORD *)(v287 + 48), v369);
              v288 = v369[0];
              v289 = *(_QWORD *)(a1 + 8);
              v290 = **(llvm::Type ***)(*(_QWORD *)a1 + 16);
            }
            *(_QWORD *)(v283 + 16) = sub_22E5E4168(v290, v289, (llvm::Type *)v288);
          }
          if (*(_QWORD *)(i + 16))
            v283 = i;
          v284 = *(_QWORD *)v283 + sub_22E5E40F8(*(llvm::DataLayout **)(a1 + 40), *(llvm::Type **)(v283 + 16));
        }
      }
      v293 = *(_BYTE *)(a1 + 312);
      if ((v293 & 4) != 0)
      {
        v295 = *(_QWORD *)(a1 + 56);
      }
      else
      {
        if ((v361 & 1) != 0 || !*(_QWORD *)(a1 + 24))
          v294 = 0;
        else
          v294 = **(_QWORD **)(*v368 + 72);
        v295 = *(_QWORD *)(a1 + 48);
        v296 = *(_QWORD *)(a1 + 56);
        if (v295 == v296)
        {
          v304 = 0;
          v298 = 1;
          v297 = 1;
        }
        else
        {
          v297 = 1;
          v298 = 1;
          do
          {
            v299 = *(llvm::Type **)(v295 + 16);
            if (v299)
            {
              v300 = llvm::DataLayout::getABITypeAlignment(*(llvm::DataLayout **)(a1 + 40), v299);
              v301 = *(_QWORD *)v295;
              if (*(_QWORD *)v295 % v300)
              {
                *(_BYTE *)(a1 + 312) |= 4u;
                v301 = *(_QWORD *)v295;
              }
              if (v301 < v294)
              {
                v302 = llvm::DataLayout::getABITypeAlignment(*(llvm::DataLayout **)(a1 + 40), *(llvm::Type **)(v295 + 16));
                if (v298 <= v302)
                  v298 = v302;
              }
              v303 = llvm::DataLayout::getABITypeAlignment(*(llvm::DataLayout **)(a1 + 40), *(llvm::Type **)(v295 + 16));
              if (v297 <= v303)
                v297 = v303;
            }
            v295 += 32;
          }
          while (v295 != v296);
          v295 = *(_QWORD *)(a1 + 56);
          v293 = *(_BYTE *)(a1 + 312);
          v304 = v293 & 4;
        }
        if ((v294 % v298) | (*(_QWORD *)(v295 - 32) % v297))
        {
          *(_BYTE *)(a1 + 312) = v293 | 4;
        }
        else if (!v304)
        {
          v305 = sub_22EF5CDF0(*(_QWORD *)(a1 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16408) & 0xFFFFFFFFFFFFFFF0));
          v306 = sub_22EF5CDF0(*(_QWORD *)(a1 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16408) & 0xFFFFFFFFFFFFFFF0));
          v307 = llvm::Type::getIntNTy(**(llvm::Type ***)(*(_QWORD *)a1 + 16), (llvm::LLVMContext *)(((v306 + v305 * v297 - 1) / v306) * v306));
          v295 = *(_QWORD *)(a1 + 56);
          *(_QWORD *)(v295 - 16) = v307;
        }
      }
      v308 = *(uint64_t **)(a1 + 48);
      if (v308 != (uint64_t *)v295)
      {
        v309 = 0;
        v310 = 0;
        v311 = 0;
        v312 = 0;
        do
        {
          v313 = (llvm::Type *)v308[2];
          if (v313)
          {
            v314 = *v308;
            if ((*(_BYTE *)(a1 + 312) & 4) != 0)
              v315 = 1;
            else
              v315 = llvm::DataLayout::getABITypeAlignment(*(llvm::DataLayout **)(a1 + 40), v313);
            if (v314 == (v309 + v315 - 1) / v315 * v315)
            {
              v316 = v311;
            }
            else
            {
              v317 = v314 - v309;
              if (v311 >= v310)
              {
                v318 = (v311 - v312) >> 4;
                v319 = v318 + 1;
                if ((unint64_t)(v318 + 1) >> 60)
                  goto LABEL_544;
                if ((v310 - v312) >> 3 > v319)
                  v319 = (v310 - v312) >> 3;
                if ((unint64_t)(v310 - v312) >= 0x7FFFFFFFFFFFFFF0)
                  v320 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v320 = v319;
                if (v320)
                {
                  if (v320 >> 60)
                    goto LABEL_545;
                  v321 = (char *)operator new(16 * v320);
                }
                else
                {
                  v321 = 0;
                }
                v322 = &v321[16 * v318];
                *(_QWORD *)v322 = v309;
                *((_QWORD *)v322 + 1) = v317;
                if (v311 == v312)
                {
                  v312 = &v321[16 * v318];
                }
                else
                {
                  v323 = &v321[16 * v318];
                  do
                  {
                    *((_OWORD *)v323 - 1) = *((_OWORD *)v311 - 1);
                    v323 -= 16;
                    v311 -= 16;
                  }
                  while (v311 != v312);
                  v311 = v312;
                  v312 = v323;
                }
                v310 = &v321[16 * v320];
                v316 = v322 + 16;
                if (v311)
                  operator delete(v311);
              }
              else
              {
                *(_QWORD *)v311 = v309;
                *((_QWORD *)v311 + 1) = v317;
                v316 = v311 + 16;
              }
            }
            v309 = sub_22E5E40F8(*(llvm::DataLayout **)(a1 + 40), (llvm::Type *)v308[2]) + v314;
            v311 = v316;
          }
          v308 += 4;
        }
        while (v308 != (uint64_t *)v295);
        if (v312 != v311)
        {
          v324 = (llvm::Type **)v312;
          do
          {
            v325 = *v324;
            v326 = sub_22E5E4168(**(llvm::Type ***)(*(_QWORD *)a1 + 16), *(_QWORD *)(a1 + 8), v324[1]);
            v328 = v326;
            v330 = *(__n128 **)(a1 + 56);
            v329 = *(_QWORD *)(a1 + 64);
            if ((unint64_t)v330 >= v329)
            {
              v332 = *(__n128 **)(a1 + 48);
              v333 = ((char *)v330 - (char *)v332) >> 5;
              v334 = v333 + 1;
              if ((unint64_t)(v333 + 1) >> 59)
                goto LABEL_544;
              v335 = v329 - (_QWORD)v332;
              if (v335 >> 4 > v334)
                v334 = v335 >> 4;
              if ((unint64_t)v335 >= 0x7FFFFFFFFFFFFFE0)
                v336 = 0x7FFFFFFFFFFFFFFLL;
              else
                v336 = v334;
              if (v336)
              {
                if (v336 >> 59)
                  goto LABEL_545;
                v337 = (char *)operator new(32 * v336);
              }
              else
              {
                v337 = 0;
              }
              v338 = (__n128 *)&v337[32 * v333];
              v338->n128_u64[0] = (unint64_t)v325;
              v338->n128_u32[2] = 2;
              v338[1].n128_u64[0] = (unint64_t)v328;
              v338[1].n128_u64[1] = 0;
              v339 = v338;
              if (v330 != v332)
              {
                do
                {
                  v327 = v330[-2];
                  v340 = v330[-1];
                  v339[-2] = v327;
                  v339[-1] = v340;
                  v339 -= 2;
                  v330 -= 2;
                }
                while (v330 != v332);
                v330 = *(__n128 **)(a1 + 48);
              }
              v331 = v338 + 2;
              *(_QWORD *)(a1 + 48) = v339;
              *(_QWORD *)(a1 + 56) = v338 + 2;
              *(_QWORD *)(a1 + 64) = &v337[32 * v336];
              if (v330)
                operator delete(v330);
            }
            else
            {
              v330->n128_u64[0] = (unint64_t)v325;
              v330->n128_u32[2] = 2;
              v331 = v330 + 2;
              v330[1].n128_u64[0] = (unint64_t)v326;
              v330[1].n128_u64[1] = 0;
            }
            *(_QWORD *)(a1 + 56) = v331;
            v324 += 2;
          }
          while (v324 != (llvm::Type **)v311);
          sub_22E5E3F4C(*(__n128 **)(a1 + 48), v331, v327);
        }
        if (v312)
          operator delete(v312);
      }
      v341 = *(_QWORD *)(a1 + 48);
      v342 = *(_QWORD *)(a1 + 56) - 32;
      *(_QWORD *)(a1 + 56) = v342;
      v343 = *(_BYTE *)(a1 + 312);
      if ((v343 & 2) != 0 && v341 != v342)
      {
        v344 = v341 + 32;
        while (1)
        {
          v345 = *(_DWORD *)(v344 - 24);
          if ((v345 - 3) >= 2)
            break;
          v346 = sub_22E66DD94(*(_QWORD *)a1, *(_QWORD *)(v344 - 8));
          v347 = *(_BYTE *)(a1 + 312);
          if ((*(_BYTE *)(v346 + 112) & 1) != 0)
          {
            v343 = *(_BYTE *)(a1 + 312);
          }
          else
          {
            v343 = v347 & 0xFE;
            *(_BYTE *)(a1 + 312) = v347 & 0xFE;
            if (*(_DWORD *)(v344 - 24) == 3)
              goto LABEL_518;
          }
LABEL_520:
          if ((v343 & 2) != 0)
          {
            v350 = v344 == v342;
            v344 += 32;
            if (!v350)
              continue;
          }
          v341 = *(_QWORD *)(a1 + 48);
          v342 = *(_QWORD *)(a1 + 56);
          goto LABEL_524;
        }
        if (v345 != 2)
          goto LABEL_520;
        v348 = *(_QWORD *)(v344 - 8);
        if (!v348)
          goto LABEL_520;
        v349 = sub_22E66DE5C(*(_QWORD *)a1, *(_QWORD *)(v348 + 48));
        v347 = *(_BYTE *)(a1 + 312);
        v343 = v347;
        if ((v349 & 1) != 0)
          goto LABEL_520;
LABEL_518:
        v343 = v347 & 0xFC;
        *(_BYTE *)(a1 + 312) = v347 & 0xFC;
        goto LABEL_520;
      }
LABEL_524:
      if (v341 == v342)
        return sub_22E5E3B00(a1);
      for (j = (unint64_t *)(v341 + 24); ; j += 4)
      {
        v352 = *(j - 1);
        if (v352)
        {
          v353 = *(unsigned int *)(a1 + 80);
          if (v353 >= *(unsigned int *)(a1 + 84))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v353 = *(unsigned int *)(a1 + 80);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v353) = v352;
          ++*(_DWORD *)(a1 + 80);
        }
        v354 = *((_DWORD *)j - 4);
        if (v354 == 2)
        {
          v357 = *j;
          if (*j)
          {
            v358 = *(_DWORD *)(a1 + 80);
            if ((*(_BYTE *)(v357 + 29) & 0x80) != 0)
              v357 = sub_22EFB5D7C(v357);
            v369[0] = v357;
            *(_DWORD *)(sub_22E5E43D4(a1 + 216, v369) + 8) = v358 - 1;
          }
          if (!*(j - 1))
            sub_22E5E41C4(a1, *j, *(j - 3), *(llvm::Type **)(*(_QWORD *)(a1 + 72) + 8 * *(unsigned int *)(a1 + 80) - 8));
          goto LABEL_542;
        }
        if (v354 == 3)
          break;
        if (v354 == 4)
        {
          v355 = *(_DWORD *)(a1 + 80) - 1;
          v356 = (uint64_t *)(a1 + 288);
LABEL_541:
          *((_DWORD *)sub_22F283EC0(v356, j) + 2) = v355;
        }
LABEL_542:
        v359 = j + 1;
        if (v359 == (unint64_t *)v342)
          return sub_22E5E3B00(a1);
      }
      v355 = *(_DWORD *)(a1 + 80) - 1;
      v356 = (uint64_t *)(a1 + 264);
      goto LABEL_541;
    }
    v275 = *(_BYTE **)(a1 + 48);
    v276 = (v273 - v275) >> 5;
    v277 = v276 + 1;
    if (!((unint64_t)(v276 + 1) >> 59))
    {
      v278 = v272 - (_QWORD)v275;
      if (v278 >> 4 > v277)
        v277 = v278 >> 4;
      if ((unint64_t)v278 >= 0x7FFFFFFFFFFFFFE0)
        v279 = 0x7FFFFFFFFFFFFFFLL;
      else
        v279 = v277;
      if (!v279)
      {
        v280 = 0;
        goto LABEL_414;
      }
      if (!(v279 >> 59))
      {
        v280 = (char *)operator new(32 * v279);
LABEL_414:
        v281 = &v280[32 * v276];
        *(_QWORD *)v281 = v362;
        *((_DWORD *)v281 + 2) = 2;
        *((_QWORD *)v281 + 2) = v271;
        *((_QWORD *)v281 + 3) = 0;
        v274 = v281 + 32;
        if (v273 != v275)
        {
          do
          {
            v282 = *((_OWORD *)v273 - 1);
            *((_OWORD *)v281 - 2) = *((_OWORD *)v273 - 2);
            *((_OWORD *)v281 - 1) = v282;
            v281 -= 32;
            v273 -= 32;
          }
          while (v273 != v275);
          v273 = *(char **)(a1 + 48);
        }
        *(_QWORD *)(a1 + 48) = v281;
        *(_QWORD *)(a1 + 56) = v274;
        *(_QWORD *)(a1 + 64) = &v280[32 * v279];
        if (v273)
          operator delete(v273);
        goto LABEL_419;
      }
LABEL_545:
      sub_22E3B3F8C();
    }
LABEL_544:
    abort();
  }
  v5 = *(_QWORD *)*v368;
  v6 = sub_22EFC3B90(v4);
  if (!v6)
  {
LABEL_210:
    v141 = (uint64_t *)a1;
    v142 = (llvm::Type *)v5;
LABEL_316:
    sub_22E5E3ED8(v141, v142);
    return sub_22E5E3B00(a1);
  }
  v7 = v6;
  v8 = 0;
  v9 = 0;
LABEL_6:
  if ((*(_BYTE *)(v7 + 68) & 1) != 0)
  {
    if (sub_22EFC2F84(v7, *(_QWORD *)(a1 + 8)))
      goto LABEL_22;
    v10 = (llvm::Type *)sub_22E5E4000(a1, v7);
    if (v5 < sub_22E5E40F8(*(llvm::DataLayout **)(a1 + 40), v10))
      v10 = sub_22E5E4168(**(llvm::Type ***)(*(_QWORD *)a1 + 16), *(_QWORD *)(a1 + 8), (llvm::Type *)v5);
    sub_22E5E41C4(a1, v7, 0, v10);
  }
  v11 = v7;
  if ((*(_BYTE *)(v7 + 29) & 0x80) != 0)
    v11 = sub_22EFB5D7C(v7);
  v369[0] = v11;
  *(_DWORD *)(sub_22E5E43D4(a1 + 216, v369) + 8) = 0;
  v12 = (llvm::Type *)sub_22E5E4000(a1, v7);
  if ((v9 & 1) == 0)
  {
    v13 = *(_QWORD *)(v7 + 40);
    if (v13 < 8 || (v13 & 7) != 0)
    {
      v14 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(v7 + 48) & 0xFFFFFFFFFFFFFFF0));
      if (!v14 || (*(_DWORD *)(v14 + 28) & 0x7Eu) - 34 > 3 || !sub_22EFC4258(v14))
      {
        v9 = 0;
        goto LABEL_21;
      }
    }
    if ((sub_22E66DE5C(*(_QWORD *)a1, *(_QWORD *)(v7 + 48)) & 1) == 0)
    {
      *(_BYTE *)(a1 + 312) &= 0xFCu;
      v9 = 1;
      v8 = v12;
      goto LABEL_21;
    }
  }
  v9 = 1;
LABEL_21:
  if ((*(_BYTE *)(a1 + 312) & 1) == 0
    || v8
    && (v15 = llvm::DataLayout::getABITypeAlignment(*(llvm::DataLayout **)(a1 + 40), v12),
        v15 <= llvm::DataLayout::getABITypeAlignment(*(llvm::DataLayout **)(a1 + 40), v8))
    && ((v16 = llvm::DataLayout::getABITypeAlignment(*(llvm::DataLayout **)(a1 + 40), v12),
         v16 != llvm::DataLayout::getABITypeAlignment(*(llvm::DataLayout **)(a1 + 40), v8))
     || (v17 = sub_22E5E40F8(*(llvm::DataLayout **)(a1 + 40), v12),
         v17 <= sub_22E5E40F8(*(llvm::DataLayout **)(a1 + 40), v8))))
  {
LABEL_22:
    v12 = v8;
  }
  while (1)
  {
    v7 = *(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (!v7)
      break;
    if ((*(_DWORD *)(v7 + 28) & 0x7Fu) - 49 < 3)
    {
      v8 = v12;
      goto LABEL_6;
    }
  }
  if (!v12)
    goto LABEL_210;
  if (v5 < sub_22E5E40F8(*(llvm::DataLayout **)(a1 + 40), v12))
    v12 = sub_22E5E4168(**(llvm::Type ***)(*(_QWORD *)a1 + 16), *(_QWORD *)(a1 + 8), (llvm::Type *)v5);
  v139 = *(_DWORD *)(a1 + 80);
  if (v139 >= *(_DWORD *)(a1 + 84))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v139 = *(_DWORD *)(a1 + 80);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v139) = v12;
  ++*(_DWORD *)(a1 + 80);
  v140 = sub_22E5E40F8(*(llvm::DataLayout **)(a1 + 40), v12);
  sub_22E5E3ED8((uint64_t *)a1, (llvm::Type *)(v5 - v140));
  if (v5 % llvm::DataLayout::getABITypeAlignment(*(llvm::DataLayout **)(a1 + 40), v12))
    *(_BYTE *)(a1 + 312) |= 4u;
  return sub_22E5E3B00(a1);
}

void sub_22E5E34FC(uint64_t a1, llvm::raw_ostream *this)
{
  _OWORD *v4;
  uint64_t v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  void *v8;
  llvm::raw_ostream *v9;
  _BYTE *v10;
  void *v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _BYTE *v44;
  uint64_t v45;

  v4 = (_OWORD *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v4 > 0xFuLL)
  {
    *v4 = *(_OWORD *)"<CGRecordLayout\n";
    v5 = *((_QWORD *)this + 4) + 16;
    *((_QWORD *)this + 4) = v5;
  }
  else
  {
    llvm::raw_ostream::write(this, "<CGRecordLayout\n");
    v5 = *((_QWORD *)this + 4);
  }
  if ((unint64_t)(*((_QWORD *)this + 3) - v5) > 0xA)
  {
    *(_DWORD *)(v5 + 7) = 979726457;
    *(_QWORD *)v5 = *(_QWORD *)"  LLVMType:";
    *((_QWORD *)this + 4) += 11;
    v6 = this;
  }
  else
  {
    v6 = (llvm::raw_ostream *)llvm::raw_ostream::write(this, "  LLVMType:");
  }
  llvm::Type::print(*(llvm::Type **)a1, v6);
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if (*((_BYTE **)v6 + 3) == v7)
  {
    llvm::raw_ostream::write(v6, "\n");
  }
  else
  {
    *v7 = 10;
    ++*((_QWORD *)v6 + 4);
  }
  if (*(_QWORD *)(a1 + 8))
  {
    v8 = (void *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v8 > 0x18uLL)
    {
      qmemcpy(v8, "  NonVirtualBaseLLVMType:", 25);
      *((_QWORD *)this + 4) += 25;
      v9 = this;
    }
    else
    {
      v9 = (llvm::raw_ostream *)llvm::raw_ostream::write(this, "  NonVirtualBaseLLVMType:");
    }
    llvm::Type::print(*(llvm::Type **)(a1 + 8), v9);
    v10 = (_BYTE *)*((_QWORD *)v9 + 4);
    if (*((_BYTE **)v9 + 3) == v10)
    {
      llvm::raw_ostream::write(v9, "\n");
    }
    else
    {
      *v10 = 10;
      ++*((_QWORD *)v9 + 4);
    }
  }
  v11 = (void *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v11 > 0x15uLL)
  {
    qmemcpy(v11, "  IsZeroInitializable:", 22);
    *((_QWORD *)this + 4) += 22;
  }
  else
  {
    llvm::raw_ostream::write(this, "  IsZeroInitializable:");
  }
  v12 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v13 = (_BYTE *)*((_QWORD *)v12 + 4);
  if (*((_BYTE **)v12 + 3) == v13)
  {
    llvm::raw_ostream::write(v12, "\n");
  }
  else
  {
    *v13 = 10;
    ++*((_QWORD *)v12 + 4);
  }
  v14 = (void *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v14 > 0xDuLL)
  {
    qmemcpy(v14, "  BitFields:[\n", 14);
    *((_QWORD *)this + 4) += 14;
  }
  else
  {
    llvm::raw_ostream::write(this, "  BitFields:[\n");
  }
  v15 = *(_QWORD *)(a1 + 40);
  v16 = *(unsigned int *)(a1 + 56);
  v17 = v15 + 40 * v16;
  if (*(_DWORD *)(a1 + 48))
  {
    if ((_DWORD)v16)
    {
      v18 = 40 * v16;
      v19 = *(_QWORD *)(a1 + 40);
      while ((*(_QWORD *)v19 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v19 += 40;
        v18 -= 40;
        if (!v18)
          goto LABEL_23;
      }
    }
    else
    {
      v19 = *(_QWORD *)(a1 + 40);
    }
  }
  else
  {
LABEL_23:
    v19 = v15 + 40 * v16;
  }
  v20 = v15 + 40 * v16;
  if (v19 == v20)
  {
    v23 = 0;
    v22 = 0;
  }
  else
  {
    v21 = 0;
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = *(_QWORD *)(*(_QWORD *)v19 + 16);
      v25 = v24 & 0xFFFFFFFFFFFFFFF8;
      if ((v24 & 4) != 0)
        v25 = *(_QWORD *)v25;
      v26 = (*(_WORD *)(v25 + 8) & 0x7E) - 34;
      if (v25)
        v27 = v25 - 64;
      else
        v27 = 0;
      if (v26 >= 4)
        v28 = 0;
      else
        v28 = v27;
      v29 = sub_22EFC3B90(v28);
      if (*(_QWORD *)v19 == v29)
      {
        v30 = 0;
      }
      else
      {
        v30 = 0;
        do
        {
          ++v30;
          do
            v29 = *(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFF8;
          while (v29 && (*(_DWORD *)(v29 + 28) & 0x7Fu) - 49 > 2);
        }
        while (*(_QWORD *)v19 != v29);
      }
      v31 = v19 + 8;
      v32 = v30;
      if (v22 >= v21)
      {
        v33 = (v22 - v23) >> 4;
        v34 = v33 + 1;
        if ((unint64_t)(v33 + 1) >> 60)
          abort();
        if ((v21 - v23) >> 3 > v34)
          v34 = (v21 - v23) >> 3;
        if ((unint64_t)(v21 - v23) >= 0x7FFFFFFFFFFFFFF0)
          v35 = 0xFFFFFFFFFFFFFFFLL;
        else
          v35 = v34;
        if (v35)
        {
          if (v35 >> 60)
            sub_22E3B3F8C();
          v36 = (char *)operator new(16 * v35);
        }
        else
        {
          v36 = 0;
        }
        v37 = &v36[16 * v33];
        *(_QWORD *)v37 = v32;
        *((_QWORD *)v37 + 1) = v31;
        if (v22 == v23)
        {
          v39 = v22;
          v23 = &v36[16 * v33];
        }
        else
        {
          v38 = &v36[16 * v33];
          do
          {
            *((_OWORD *)v38 - 1) = *((_OWORD *)v22 - 1);
            v38 -= 16;
            v22 -= 16;
          }
          while (v22 != v23);
          v39 = v23;
          v23 = v38;
        }
        v21 = &v36[16 * v35];
        v22 = v37 + 16;
        if (v39)
          operator delete(v39);
      }
      else
      {
        *(_QWORD *)v22 = v30;
        *((_QWORD *)v22 + 1) = v31;
        v22 += 16;
      }
      v40 = v19 + 40;
      v19 = v17;
      if (v40 != v17)
      {
        v19 = v40;
        while ((*(_QWORD *)v19 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v19 += 40;
          if (v19 == v17)
          {
            v19 = v17;
            break;
          }
        }
      }
    }
    while (v19 != v20);
  }
  v41 = v22 - v23;
  if (v22 - v23 >= 32)
    qsort(v23, v41 >> 4, 0x10uLL, (int (__cdecl *)(const void *, const void *))sub_22F28B568);
  if ((v41 & 0xFFFFFFFF0) != 0)
  {
    v42 = (v41 >> 4);
    v43 = v23 + 8;
    do
    {
      llvm::raw_ostream::indent(this);
      sub_22F28B1B4(*v43, this);
      v44 = (_BYTE *)*((_QWORD *)this + 4);
      if (*((_BYTE **)this + 3) == v44)
      {
        llvm::raw_ostream::write(this, "\n");
      }
      else
      {
        *v44 = 10;
        ++*((_QWORD *)this + 4);
      }
      v43 += 2;
      --v42;
    }
    while (v42);
  }
  v45 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v45) > 2)
  {
    *(_BYTE *)(v45 + 2) = 10;
    *(_WORD *)v45 = 15965;
    *((_QWORD *)this + 4) += 3;
    if (v23)
      goto LABEL_81;
  }
  else
  {
    llvm::raw_ostream::write(this, "]>\n");
    if (v23)
LABEL_81:
      operator delete(v23);
  }
}

unint64_t sub_22E5E3AA0(llvm::DataLayout *a1, llvm::Type *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t ABITypeAlignment;

  sub_22E3C304C((uint64_t)a1, (uint64_t)a2);
  v5 = (unint64_t)(v4 + 7) >> 3;
  ABITypeAlignment = llvm::DataLayout::getABITypeAlignment(a1, a2);
  return 8 * (ABITypeAlignment + v5 - 1) / ABITypeAlignment * ABITypeAlignment;
}

unint64_t sub_22E5E3B00(uint64_t a1)
{
  unint64_t result;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  llvm::Type *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  BOOL v23;
  __int16 v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int64_t v30;
  int64_t v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int64_t v40;
  BOOL v41;
  uint64_t v42;
  llvm::Type *v43;
  unint64_t v44;
  uint64_t *v46;
  int64_t v47;
  int64_t v48;
  __int16 v49;
  uint64_t *i;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 15088) + 448))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 15088));
  if (v3 >= 5)
  {
    v4 = *(_DWORD *)result == 1668309345 && *(_BYTE *)(result + 4) == 115;
    if (v4 && (*(_DWORD *)(*(_QWORD *)(**(_QWORD **)a1 + 184) + 92) & 0x20000) != 0)
    {
      v5 = *(_QWORD *)(a1 + 240);
      v6 = *(unsigned int *)(a1 + 256);
      v7 = (uint64_t *)(v5 + 40 * v6);
      if (*(_DWORD *)(a1 + 248))
      {
        if ((_DWORD)v6)
        {
          v8 = 40 * v6;
          v9 = *(uint64_t **)(a1 + 240);
          while ((*v9 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v9 += 5;
            v8 -= 40;
            if (!v8)
              goto LABEL_14;
          }
        }
        else
        {
          v9 = *(uint64_t **)(a1 + 240);
        }
      }
      else
      {
LABEL_14:
        v9 = (uint64_t *)(v5 + 40 * v6);
      }
      v10 = (uint64_t *)(v5 + 40 * v6);
      for (i = v10; ; v10 = i)
      {
        if (v9 == v10)
          return result;
        v11 = *v9;
        v12 = (llvm::Type *)sub_22E66C868(*(_QWORD *)a1, *(_QWORD *)(*v9 + 48), 0);
        v13 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
        v14 = sub_22EF5CDF0(*(_QWORD *)(a1 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16408) & 0xFFFFFFFFFFFFFFF0))* v13;
        llvm::Type::getPrimitiveSizeInBits(v12);
        result = llvm::TypeSize::operator unsigned long long();
        if (v14 >= result)
        {
          v15 = *(_QWORD *)(a1 + 8);
          v16 = *(_BYTE *)(*(_QWORD *)(v15 + 15088) + 80)
              ? *((_DWORD *)v9 + 3) - ((HIWORD(*((_DWORD *)v9 + 2)) & 0x7FFF) + (unsigned __int16)*((_DWORD *)v9 + 2))
              : *((unsigned __int16 *)v9 + 4);
          v17 = *((_DWORD *)v9 + 4);
          v18 = sub_22EF5CDF0(v15, *(_QWORD *)(*(_QWORD *)(v15 + 16408) & 0xFFFFFFFFFFFFFFF0));
          llvm::Type::getPrimitiveSizeInBits(v12);
          result = llvm::TypeSize::operator unsigned long long();
          v19 = result;
          if (*((_DWORD *)v9 + 3) != (_DWORD)result || v16 % result)
          {
            v20 = v16 + v18 * v17;
            v21 = (result - 1) & v20;
            v22 = (*((_WORD *)v9 + 5) & 0x7FFF) + v21;
            v23 = result >= v22;
            v24 = result - v22;
            if (v23)
            {
              v25 = *(_QWORD *)(a1 + 8);
              if (*(_BYTE *)(*(_QWORD *)(v25 + 15088) + 80))
                LOWORD(v21) = v24;
              v49 = v21;
              v26 = sub_22EF5CDF0(v25, *(_QWORD *)(*(_QWORD *)(v25 + 16408) & 0xFFFFFFFFFFFFFFF0));
              v27 = sub_22EF5CDF0(*(_QWORD *)(a1 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16408) & 0xFFFFFFFFFFFFFFF0));
              v28 = *(_QWORD *)(v11 + 16);
              v29 = v28 & 0xFFFFFFFFFFFFFFF8;
              if ((v28 & 4) != 0)
                v29 = *(_QWORD *)v29;
              v30 = (v20 & -v19) / v26;
              v31 = v19 / v27 + v30;
              v32 = (*(_WORD *)(v29 + 8) & 0x7E) - 34;
              v33 = v29 ? v29 - 64 : 0;
              v34 = v32 >= 4 ? 0 : v33;
              result = sub_22F0C975C(*(_QWORD *)(a1 + 8), v34);
              if (v31 <= *(_QWORD *)result)
              {
                v35 = result;
                v36 = sub_22EFC3B90(*(_QWORD *)(a1 + 16));
                if (!v36)
                  goto LABEL_54;
                v37 = v36;
                v47 = v31 - 1;
                v48 = v31;
LABEL_39:
                if ((*(_BYTE *)(v37 + 68) & 1) != 0 && !sub_22EFC2F84(v37, *(_QWORD *)(a1 + 8)))
                  break;
                v38 = *(_QWORD *)(a1 + 8);
                v39 = *(_QWORD *)(*(_QWORD *)(v35 + 48) + 8 * sub_22EFC306C(v37));
                v40 = v39 / sub_22EF5CDF0(v38, *(_QWORD *)(*(_QWORD *)(v38 + 16408) & 0xFFFFFFFFFFFFFFF0));
                result = sub_22EFC2F84(v37, *(_QWORD *)(a1 + 8));
                if (!(_DWORD)result || (v47 > v40 ? (v41 = v30 < v40) : (v41 = 0), !v41))
                {
                  v42 = *(_QWORD *)(a1 + 8);
                  v43 = (llvm::Type *)sub_22E66C868(*(_QWORD *)a1, *(_QWORD *)(v37 + 48), 0);
                  llvm::Type::getPrimitiveSizeInBits(v43);
                  v44 = llvm::TypeSize::operator unsigned long long();
                  result = sub_22EF5CDF0(v42, *(_QWORD *)(*(_QWORD *)(v42 + 16408) & 0xFFFFFFFFFFFFFFF0));
                  if (v48 <= v40 || (uint64_t)(v44 / result + v40) <= v30)
                    break;
                }
              }
            }
          }
        }
LABEL_55:
        v46 = v9 + 5;
        v9 = v7;
        if (v46 != v7)
        {
          v9 = v46;
          while ((*v9 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v9 += 5;
            if (v9 == v7)
            {
              v9 = v7;
              break;
            }
          }
        }
      }
      while (1)
      {
        v37 = *(_QWORD *)(v37 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (!v37)
          break;
        if ((*(_DWORD *)(v37 + 28) & 0x7Fu) - 49 < 3)
          goto LABEL_39;
      }
LABEL_54:
      result = sub_22EF5CDF0(*(_QWORD *)(a1 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16408) & 0xFFFFFFFFFFFFFFF0));
      v9[4] = v30 / (v19 / result);
      *((_DWORD *)v9 + 7) = v19;
      *((_WORD *)v9 + 12) = v49;
      goto LABEL_55;
    }
  }
  return result;
}

uint64_t *sub_22E5E3ED8(uint64_t *result, llvm::Type *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unsigned int v4;

  if (a2)
  {
    v2 = result;
    result = (uint64_t *)sub_22E5E4168(**(llvm::Type ***)(*result + 16), result[1], a2);
    v3 = result;
    v4 = *((_DWORD *)v2 + 20);
    if (v4 >= *((_DWORD *)v2 + 21))
    {
      result = (uint64_t *)llvm::SmallVectorBase<unsigned int>::grow_pod();
      v4 = *((_DWORD *)v2 + 20);
    }
    *(_QWORD *)(v2[9] + 8 * v4) = v3;
    ++*((_DWORD *)v2 + 20);
  }
  return result;
}

void sub_22E5E3F4C(__n128 *a1, __n128 *a2, __n128 a3)
{
  unint64_t v5;
  const std::nothrow_t *v6;
  unint64_t v7;
  __n128 *v8;
  BOOL v9;
  __n128 *v10;

  v5 = ((char *)a2 - (char *)a1) >> 5;
  if ((char *)a2 - (char *)a1 <= 4096)
  {
LABEL_5:
    sub_22E5E46AC(a1, a2, v5, 0, 0, a3);
  }
  else
  {
    v6 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
    v7 = ((char *)a2 - (char *)a1) >> 5;
    while (1)
    {
      v8 = (__n128 *)operator new(32 * v7, v6);
      if (v8)
        break;
      v9 = v7 > 1;
      v7 >>= 1;
      if (!v9)
        goto LABEL_5;
    }
    v10 = v8;
    sub_22E5E46AC(a1, a2, v5, v8, v7, a3);
    operator delete(v10);
  }
}

uint64_t sub_22E5E4000(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  llvm::Type *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  unint64_t v9;

  v2 = a2;
  v4 = (llvm::Type *)sub_22E66C868(*(_QWORD *)a1, *(_QWORD *)(a2 + 48), 0);
  if ((*(_BYTE *)(v2 + 68) & 1) == 0)
    return (uint64_t)v4;
  v5 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(*(_QWORD *)(v5 + 15088) + 148) == 11
    || sub_22EFC3D58(*(_QWORD *)(a1 + 16))
    || (*(_QWORD *)(*(_QWORD *)(v5 + 2000) + 8) & 0x20000000000000) != 0)
  {
    return (uint64_t)v4;
  }
  LODWORD(v2) = sub_22EFC2EF4(v2, *(_QWORD *)(a1 + 8));
  v6 = *(_QWORD *)(a1 + 8);
  v7 = sub_22E5E40F8(*(llvm::DataLayout **)(a1 + 40), v4);
  v8 = sub_22EF5CDF0(v6, *(_QWORD *)(*(_QWORD *)(v6 + 16408) & 0xFFFFFFFFFFFFFFF0)) * v7;
  if (v2 >= v8)
    v2 = v8;
  else
    v2 = v2;
  v9 = sub_22EF5CDF0(*(_QWORD *)(a1 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16408) & 0xFFFFFFFFFFFFFFF0));
  return llvm::Type::getIntNTy(**(llvm::Type ***)(*(_QWORD *)a1 + 16), (llvm::LLVMContext *)(((v2 + v9 - 1) / v9) * v9));
}

uint64_t sub_22E5E40F8(llvm::DataLayout *a1, llvm::Type *a2)
{
  sub_22E3C304C((uint64_t)a1, (uint64_t)a2);
  llvm::DataLayout::getABITypeAlignment(a1, a2);
  return llvm::TypeSize::operator unsigned long long();
}

llvm::ArrayType *sub_22E5E4168(llvm::Type *a1, uint64_t a2, llvm::Type *a3)
{
  llvm::LLVMContext *v5;
  llvm::ArrayType *result;

  v5 = (llvm::LLVMContext *)sub_22EF5CDF0(a2, *(_QWORD *)(*(_QWORD *)(a2 + 16408) & 0xFFFFFFFFFFFFFFF0));
  result = (llvm::ArrayType *)llvm::Type::getIntNTy(a1, v5);
  if (a3 != (llvm::Type *)1)
    return (llvm::ArrayType *)llvm::ArrayType::get(result, a3);
  return result;
}

uint64_t sub_22E5E41C4(uint64_t a1, unint64_t a2, uint64_t a3, llvm::Type *a4)
{
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  unsigned int v16;
  uint64_t v17[2];

  v8 = (uint64_t *)(a1 + 240);
  v9 = a2;
  if ((*(_BYTE *)(a2 + 29) & 0x80) != 0)
    v9 = sub_22EFB5D7C(a2);
  v17[0] = v9;
  v10 = sub_22F28B2E4(v8, v17);
  if (sub_22F110A40(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0)))
    v11 = 0x80000000;
  else
    v11 = 0;
  *((_DWORD *)v10 + 2) = v11 & 0x80000000 | v10[1] & 0x7FFFFFFF;
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * sub_22EFC306C(a2));
  *((_WORD *)v10 + 4) = v13
                      - sub_22EF5CDF0(*(_QWORD *)(a1 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16408) & 0xFFFFFFFFFFFFFFF0))* a3;
  *((_DWORD *)v10 + 2) = v10[1] & 0x8000FFFF | ((sub_22EFC2EF4(a2, *(_QWORD *)(a1 + 8)) & 0x7FFF) << 16);
  v17[0] = sub_22E5E3AA0(*(llvm::DataLayout **)(a1 + 40), a4);
  v17[1] = v14;
  result = llvm::TypeSize::operator unsigned long long();
  *((_DWORD *)v10 + 3) = result;
  v10[2] = a3;
  v16 = *((_DWORD *)v10 + 2);
  if ((HIWORD(v16) & 0x7FFF) > result)
  {
    v16 = v16 & 0x8000FFFF | ((_DWORD)result << 16);
    *((_DWORD *)v10 + 2) = v16;
  }
  if (**(_BYTE **)(a1 + 40))
    *((_DWORD *)v10 + 2) = v16 & 0xFFFF0000 | (unsigned __int16)(result - v16 - (HIWORD(v16) & 0x7FFF));
  *((_DWORD *)v10 + 7) = 0;
  *((_WORD *)v10 + 12) = 0;
  v10[4] = 0;
  return result;
}

_QWORD *sub_22E5E4308(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 40 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F28B3FC(a1, (uint64_t)v4, (uint64_t)v4 + 40 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(40 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 40 * v10;
      do
      {
        *result = -4096;
        result += 5;
        v11 -= 40;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22E5E43D4(uint64_t a1, _QWORD *a2)
{
  char v4;
  uint64_t result;
  int v6;
  unsigned int v7;
  uint64_t v8;

  v8 = 0;
  v4 = sub_22E46AA2C((uint64_t *)a1, a2, &v8);
  result = v8;
  if ((v4 & 1) != 0)
    return result;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    sub_22E5E44A4(a1, v7);
    v8 = 0;
    sub_22E46AA2C((uint64_t *)a1, a2, &v8);
    result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)result != -4096)
    --*(_DWORD *)(a1 + 12);
  *(_QWORD *)result = *a2;
  *(_DWORD *)(result + 8) = 0;
  return result;
}

_QWORD *sub_22E5E44A4(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F28B4BC(a1, (uint64_t)v4, (uint64_t)v4 + 16 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22E5E4564(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;

  v6 = *(_QWORD *)(*(_QWORD *)(sub_22F0C975C(*(_QWORD *)(a1 + 8), a2) + 72) + 48);
  if ((v6 & 4) != 0 && (v6 & 0xFFFFFFFFFFFFFFF8) == a3)
    return 0;
  v8 = sub_22E46A3A0(a2);
  if (v8 == v9)
    return 1;
  v10 = v9;
  v11 = v8 + 24;
  do
  {
    v12 = *(_QWORD *)(**(_QWORD **)(v11 - 8) & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(v12 + 8) & 0xF) != 0)
      v12 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v11 - 8));
    v13 = sub_22F10C2A4(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0));
    if (v13)
    {
      if ((*(_DWORD *)(v13 + 28) & 0x7Fu) - 35 >= 3)
        v14 = 0;
      else
        v14 = v13;
    }
    else
    {
      v14 = 0;
    }
    result = sub_22E5E4564(a1, v14, a3);
    if (!(_DWORD)result)
      break;
    v15 = v11 == v10;
    v11 += 24;
  }
  while (!v15);
  return result;
}

uint64_t sub_22E5E4648(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = 0;
  v5 = a2;
  if (sub_22F251EFC((uint64_t *)a1, &v5, &v4))
    return v4;
  else
    return *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 16);
}

__n128 sub_22E5E46AC(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4, uint64_t a5, __n128 result)
{
  __n128 *v7;
  __n128 *v8;
  __n128 v9;
  __n128 v10;
  __n128 *v12;
  uint64_t v13;
  __n128 *v14;
  __n128 *v15;
  int64_t v16;
  uint64_t v17;
  __n128 *v18;
  __n128 v19;
  uint64_t v20;
  __n128 *v22;
  unint64_t v23;
  __n128 *v24;
  unint64_t v25;
  __n128 v26;
  __n128 *v27;
  __n128 *v28;
  __n128 *v29;
  __n128 v30;
  uint64_t v31;
  __n128 *v32;
  __n128 v33;
  uint64_t v34;
  __n128 *v35;
  __n128 v36;
  __n128 v37;
  unint64_t v38;

  if (a3 >= 2)
  {
    v7 = a1;
    if (a3 == 2)
    {
      v8 = a2 - 2;
      if ((int64_t)a2[-2].n128_u64[0] < (int64_t)a1->n128_u64[0])
      {
        v9 = *a1;
        result = a1[1];
        v10 = a2[-1];
        *a1 = *v8;
        a1[1] = v10;
        *v8 = v9;
        a2[-1] = result;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      v22 = a4;
      v23 = a3 >> 1;
      v24 = &a1[2 * (a3 >> 1)];
      v25 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        v26 = sub_22E5E48F8(a1, v24, v25, a4, result);
        v27 = &v22[2 * v23];
        result.n128_u64[0] = sub_22E5E48F8(&v7[2 * (a3 >> 1)], a2, a3 - (a3 >> 1), v27, v26).n128_u64[0];
        v28 = &v22[2 * a3];
        v29 = v27;
        while (v29 != v28)
        {
          if ((int64_t)v29->n128_u64[0] >= (int64_t)v22->n128_u64[0])
          {
            result = *v22;
            v30 = v22[1];
            v22 += 2;
          }
          else
          {
            result = *v29;
            v30 = v29[1];
            v29 += 2;
          }
          *v7 = result;
          v7[1] = v30;
          v7 += 2;
          if (v22 == v27)
          {
            if (v29 != v28)
            {
              v31 = 0;
              do
              {
                v32 = &v7[v31];
                result = v29[v31];
                v33 = v29[v31 + 1];
                *v32 = result;
                v32[1] = v33;
                v31 += 2;
              }
              while (&v29[v31] != v28);
            }
            return result;
          }
        }
        if (v22 != v27)
        {
          v34 = 0;
          do
          {
            v35 = &v7[v34];
            result = v22[v34];
            v36 = v22[v34 + 1];
            *v35 = result;
            v35[1] = v36;
            v34 += 2;
          }
          while (&v22[v34] != v27);
        }
      }
      else
      {
        sub_22E5E46AC(a1, v24, v25, a4, a5);
        sub_22E5E46AC(&v7[2 * (a3 >> 1)], a2, a3 - (a3 >> 1), v22, a5);
        sub_22E5E4AF0((char *)v7, (char *)&v7[2 * (a3 >> 1)], (char *)a2, a3 >> 1, a3 - (a3 >> 1), v22, a5);
      }
    }
    else if (a1 != a2)
    {
      v12 = a1 + 2;
      if (&a1[2] != a2)
      {
        v13 = 0;
        v14 = a1;
        do
        {
          v15 = v12;
          v16 = v12->n128_u64[0];
          if (v16 < (int64_t)v14->n128_u64[0])
          {
            v37 = *(__n128 *)((char *)v14 + 40);
            v38 = v14[3].n128_u64[1];
            v17 = v13;
            while (1)
            {
              v18 = (__n128 *)((char *)a1 + v17);
              v19 = *(__n128 *)((char *)a1 + v17 + 16);
              v18[2] = *(__n128 *)((char *)a1 + v17);
              v18[3] = v19;
              if (!v17)
                break;
              v17 -= 32;
              if (v16 >= (int64_t)v18[-2].n128_u64[0])
              {
                v20 = (uint64_t)&a1[2] + v17;
                goto LABEL_15;
              }
            }
            v20 = (uint64_t)a1;
LABEL_15:
            *(_QWORD *)v20 = v16;
            result = v37;
            *(__n128 *)(v20 + 8) = v37;
            *(_QWORD *)(v20 + 24) = v38;
          }
          v12 = v15 + 2;
          v13 += 32;
          v14 = v15;
        }
        while (&v15[2] != a2);
      }
    }
  }
  return result;
}

__n128 sub_22E5E48F8(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4, __n128 result)
{
  __n128 *v5;
  __n128 *v8;
  __n128 v9;
  __n128 *v10;
  __n128 v11;
  __n128 v12;
  __n128 v13;
  __n128 *v14;
  uint64_t v15;
  __n128 *v16;
  __n128 *v17;
  uint64_t v18;
  __n128 *v19;
  __n128 v20;
  uint64_t v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 *v25;
  __n128 *v26;
  __n128 v27;
  uint64_t v28;
  __n128 *v29;
  __n128 v30;
  uint64_t v31;
  __n128 *v32;
  __n128 v33;

  if (a3)
  {
    v5 = a4;
    v8 = a1;
    if (a3 == 2)
    {
      v10 = a2 - 2;
      if ((int64_t)a2[-2].n128_u64[0] >= (int64_t)a1->n128_u64[0])
      {
        v24 = a1[1];
        *a4 = *a1;
        a4[1] = v24;
        result = *v10;
        v12 = a2[-1];
      }
      else
      {
        v11 = a2[-1];
        *a4 = *v10;
        a4[1] = v11;
        result = *a1;
        v12 = a1[1];
      }
      a4[2] = result;
      a4[3] = v12;
    }
    else if (a3 == 1)
    {
      result = *a1;
      v9 = a1[1];
      *a4 = *a1;
      a4[1] = v9;
    }
    else if ((uint64_t)a3 > 8)
    {
      v25 = &a1[2 * (a3 >> 1)];
      sub_22E5E46AC(a1, v25, a3 >> 1, a4, a3 >> 1);
      sub_22E5E46AC(&v8[2 * (a3 >> 1)], a2, a3 - (a3 >> 1), &v5[2 * (a3 >> 1)], a3 - (a3 >> 1));
      v26 = &v8[2 * (a3 >> 1)];
      while (v26 != a2)
      {
        if ((int64_t)v26->n128_u64[0] >= (int64_t)v8->n128_u64[0])
        {
          result = *v8;
          v27 = v8[1];
          v8 += 2;
        }
        else
        {
          result = *v26;
          v27 = v26[1];
          v26 += 2;
        }
        *v5 = result;
        v5[1] = v27;
        v5 += 2;
        if (v8 == v25)
        {
          if (v26 != a2)
          {
            v28 = 0;
            do
            {
              v29 = &v5[v28];
              result = v26[v28];
              v30 = v26[v28 + 1];
              *v29 = result;
              v29[1] = v30;
              v28 += 2;
            }
            while (&v26[v28] != a2);
          }
          return result;
        }
      }
      if (v8 != v25)
      {
        v31 = 0;
        do
        {
          v32 = &v5[v31];
          result = v8[v31];
          v33 = v8[v31 + 1];
          *v32 = result;
          v32[1] = v33;
          v31 += 2;
        }
        while (&v8[v31] != v25);
      }
    }
    else if (a1 != a2)
    {
      result = *a1;
      v13 = a1[1];
      *a4 = *a1;
      a4[1] = v13;
      v14 = a1 + 2;
      if (&a1[2] != a2)
      {
        v15 = 0;
        v16 = a4;
        do
        {
          v17 = v16;
          v18 = v16->n128_u64[0];
          v16 += 2;
          v19 = v16;
          if ((int64_t)v14->n128_u64[0] < v18)
          {
            v20 = v17[1];
            *v16 = *v17;
            v16[1] = v20;
            v19 = a4;
            if (v17 != a4)
            {
              v21 = v15;
              while (1)
              {
                v19 = (__n128 *)((char *)a4 + v21);
                if ((int64_t)v14->n128_u64[0] >= *(int64_t *)((char *)a4[-2].n128_u64 + v21))
                  break;
                v22 = *(__n128 *)((char *)a4 + v21 - 16);
                *v19 = *(__n128 *)((char *)a4 + v21 - 32);
                v19[1] = v22;
                v21 -= 32;
                if (!v21)
                {
                  v19 = a4;
                  break;
                }
              }
            }
          }
          result = *v14;
          v23 = v14[1];
          v14 += 2;
          *v19 = result;
          v19[1] = v23;
          v15 += 32;
        }
        while (v14 != a2);
      }
    }
  }
  return result;
}

char *sub_22E5E4AF0(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, _OWORD *a6, uint64_t a7)
{
  uint64_t v7;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  BOOL v37;
  int64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  char *v50;
  char *v51;
  char *v52;
  __int128 v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  _OWORD *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _OWORD *v68;
  uint64_t v69;
  char *v70;
  unint64_t v71;
  _OWORD *v72;
  __int128 v73;
  _OWORD *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  char *v79;
  __int128 v80;
  unint64_t v81;
  _OWORD *v82;
  __int128 v83;
  __int128 *v84;
  __int128 v85;
  __int128 v86;
  char *v87;
  __int128 v88;
  uint64_t v89;
  char *v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  _OWORD *v94;
  _OWORD *v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;

  if (a5)
  {
    v7 = a5;
    v10 = result;
    while (a4 > a7 && v7 > a7)
    {
      if (!a4)
        return result;
      v11 = 0;
      v12 = -a4;
      while (*(_QWORD *)a2 >= *(_QWORD *)&v10[v11])
      {
        v11 += 32;
        if (__CFADD__(v12++, 1))
          return result;
      }
      v14 = -v12;
      v15 = &v10[v11];
      if (-v12 >= v7)
      {
        if (v12 == -1)
        {
          v87 = &v10[v11];
          v101 = *(_OWORD *)&v10[v11];
          v106 = *(_OWORD *)&v10[v11 + 16];
          v88 = *((_OWORD *)a2 + 1);
          *(_OWORD *)v87 = *(_OWORD *)a2;
          *((_OWORD *)v87 + 1) = v88;
          *(_OWORD *)a2 = v101;
          *((_OWORD *)a2 + 1) = v106;
          return result;
        }
        if (v12 > 0)
          v14 = 1 - v12;
        v25 = v14 >> 1;
        v20 = &v10[32 * (v14 >> 1) + v11];
        v18 = a3;
        if (a3 != a2)
        {
          v26 = (a3 - a2) >> 5;
          v18 = a2;
          do
          {
            v27 = v26 >> 1;
            v28 = &v18[32 * (v26 >> 1)];
            v30 = *(_QWORD *)v28;
            v29 = v28 + 32;
            v26 += ~(v26 >> 1);
            if (v30 < *(_QWORD *)v20)
              v18 = v29;
            else
              v26 = v27;
          }
          while (v26);
        }
        v17 = (v18 - a2) >> 5;
      }
      else
      {
        if (v7 >= 0)
          v16 = v7;
        else
          v16 = v7 + 1;
        v17 = v16 >> 1;
        v18 = &a2[32 * (v16 >> 1)];
        if (v15 == a2)
        {
          v20 = a2;
        }
        else
        {
          v19 = (a2 - v10 - v11) >> 5;
          v20 = &v10[v11];
          do
          {
            v21 = v19 >> 1;
            v22 = &v20[32 * (v19 >> 1)];
            v24 = *(_QWORD *)v22;
            v23 = v22 + 32;
            v19 += ~(v19 >> 1);
            if (*(_QWORD *)v18 < v24)
              v19 = v21;
            else
              v20 = v23;
          }
          while (v19);
        }
        v25 = (v20 - v10 - v11) >> 5;
      }
      v31 = v18;
      if (v20 != a2)
      {
        v31 = v20;
        if (a2 != v18)
        {
          v32 = v20 + 32;
          if (v20 + 32 == a2)
          {
            v99 = *(_OWORD *)v20;
            v103 = *((_OWORD *)v20 + 1);
            v38 = v18 - a2;
            v94 = a6;
            v96 = a7;
            v39 = a3;
            v92 = v17;
            v40 = v25;
            memmove(v20, a2, v18 - a2);
            v25 = v40;
            v17 = v92;
            a6 = v94;
            v15 = &v10[v11];
            a7 = v96;
            a3 = v39;
            v31 = &v20[v38];
            *(_OWORD *)v31 = v99;
            *((_OWORD *)v31 + 1) = v103;
          }
          else
          {
            v33 = a2 + 32;
            if (a2 + 32 == v18)
            {
              v100 = *((_OWORD *)v18 - 2);
              v104 = *((_OWORD *)v18 - 1);
              v31 = v20 + 32;
              if (v18 - 32 != v20)
              {
                v95 = a6;
                v97 = a7;
                v41 = a3;
                v93 = v17;
                v42 = v25;
                memmove(v20 + 32, v20, v18 - 32 - v20);
                v25 = v42;
                v17 = v93;
                a6 = v95;
                v15 = &v10[v11];
                a7 = v97;
                a3 = v41;
              }
              *(_OWORD *)v20 = v100;
              *((_OWORD *)v20 + 1) = v104;
            }
            else
            {
              v34 = (a2 - v20) >> 5;
              v35 = v18 - a2;
              if (v34 == (v18 - a2) >> 5)
              {
                do
                {
                  v98 = *((_OWORD *)v32 - 2);
                  v102 = *((_OWORD *)v32 - 1);
                  v36 = *((_OWORD *)v33 - 1);
                  *((_OWORD *)v32 - 2) = *((_OWORD *)v33 - 2);
                  *((_OWORD *)v32 - 1) = v36;
                  *((_OWORD *)v33 - 2) = v98;
                  *((_OWORD *)v33 - 1) = v102;
                  if (v32 == a2)
                    break;
                  v32 += 32;
                  v37 = v33 == v18;
                  v33 += 32;
                }
                while (!v37);
                v31 = a2;
              }
              else
              {
                v43 = v35 >> 5;
                v44 = v35 >> 5;
                v45 = (a2 - v20) >> 5;
                do
                {
                  v46 = v45;
                  v45 = v44;
                  v44 = v46 % v44;
                }
                while (v44);
                if (v45)
                {
                  v47 = &v20[32 * v45];
                  do
                  {
                    v48 = *((_OWORD *)v47 - 2);
                    v49 = *((_OWORD *)v47 - 1);
                    v47 -= 32;
                    v105 = v49;
                    v50 = &v47[32 * v34];
                    v51 = v47;
                    do
                    {
                      v52 = v50;
                      v53 = *((_OWORD *)v50 + 1);
                      *(_OWORD *)v51 = *(_OWORD *)v50;
                      *((_OWORD *)v51 + 1) = v53;
                      v54 = v18 - v50;
                      v50 += 32 * v34;
                      v55 = __OFSUB__(v34, v54 >> 5);
                      v56 = v34 - (v54 >> 5);
                      v78 = (v56 < 0) ^ v55;
                      v57 = &v20[32 * v56];
                      if (!v78)
                        v50 = v57;
                      v51 = v52;
                    }
                    while (v50 != v47);
                    *(_OWORD *)v52 = v48;
                    *((_OWORD *)v52 + 1) = v105;
                  }
                  while (v47 != v20);
                }
                v31 = &v20[32 * v43];
              }
            }
          }
        }
      }
      a4 = -(v25 + v12);
      v58 = v7 - v17;
      if (v25 + v17 >= v7 - (v25 + v17) - v12)
      {
        v64 = v25;
        v65 = -(v25 + v12);
        v66 = v17;
        v67 = v7 - v17;
        v68 = a6;
        v69 = a7;
        v70 = v15;
        result = (char *)sub_22E5E4AF0(v31, v18, a3, v65, v67);
        v63 = v70;
        a7 = v69;
        a6 = v68;
        v18 = v20;
        v58 = v66;
        a4 = v64;
        a3 = v31;
      }
      else
      {
        v59 = &v10[v11];
        v60 = a6;
        v61 = a7;
        v62 = a3;
        result = (char *)sub_22E5E4AF0(v59, v20, v31, v25, v17);
        a7 = v61;
        a3 = v62;
        a6 = v60;
        v63 = v31;
      }
      v7 = v58;
      v10 = v63;
      a2 = v18;
      if (!v58)
        return result;
    }
    if (a4 <= v7)
    {
      if (v10 != a2)
      {
        v81 = 0;
        do
        {
          v82 = &a6[v81 / 0x10];
          v83 = *(_OWORD *)&v10[v81 + 16];
          *v82 = *(_OWORD *)&v10[v81];
          v82[1] = v83;
          v81 += 32;
        }
        while (&v10[v81] != a2);
        if (v81)
        {
          v84 = a6;
          while (a2 != a3)
          {
            if (*(_QWORD *)a2 >= *(_QWORD *)v84)
            {
              v85 = *v84;
              v86 = v84[1];
              v84 += 2;
            }
            else
            {
              v85 = *(_OWORD *)a2;
              v86 = *((_OWORD *)a2 + 1);
              a2 += 32;
            }
            *(_OWORD *)v10 = v85;
            *((_OWORD *)v10 + 1) = v86;
            v10 += 32;
            if (&a6[v81 / 0x10] == v84)
              return result;
          }
          return (char *)memmove(v10, v84, (char *)a6 - (char *)v84 + v81);
        }
      }
    }
    else if (a2 != a3)
    {
      v71 = 0;
      do
      {
        v72 = &a6[v71 / 0x10];
        v73 = *(_OWORD *)&a2[v71 + 16];
        *v72 = *(_OWORD *)&a2[v71];
        v72[1] = v73;
        v71 += 32;
      }
      while (&a2[v71] != a3);
      if (v71)
      {
        v74 = &a6[v71 / 0x10];
        v75 = a3 - 32;
        while (a2 != v10)
        {
          v76 = *((_QWORD *)v74 - 4);
          v77 = *((_QWORD *)a2 - 4);
          v78 = v76 < v77;
          if (v76 >= v77)
            v79 = (char *)(v74 - 2);
          else
            v79 = a2 - 32;
          if (v78)
            a2 -= 32;
          v80 = *((_OWORD *)v79 + 1);
          if (!v78)
            v74 -= 2;
          *(_OWORD *)v75 = *(_OWORD *)v79;
          *((_OWORD *)v75 + 1) = v80;
          v75 -= 32;
          if (v74 == a6)
            return result;
        }
        if (v74 != a6)
        {
          v89 = 0;
          do
          {
            v90 = &v75[v89 * 16];
            v91 = v74[v89 - 1];
            *(_OWORD *)v90 = v74[v89 - 2];
            *((_OWORD *)v90 + 1) = v91;
            v89 -= 2;
          }
          while (&v74[v89] != a6);
        }
      }
    }
  }
  return result;
}

_QWORD *sub_22E5E501C(_QWORD *result, uint64_t (*a2)(_QWORD *), uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t (*v15)(_QWORD *);
  uint64_t v16;

  v4 = result[503];
  if (!v4)
    return result;
  v6 = result[40];
  if (!v6)
    return result;
  v15 = a2;
  v7 = result;
  sub_22E3CB840(v4, v6, result[41]);
  v9 = v7;
  v10 = v7[503];
  if (!a4)
  {
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v9 + 34));
LABEL_14:
    v12 = v16;
    goto LABEL_8;
  }
  if (!*((_BYTE *)v9 + 2892))
  {
    v11 = v9[360];
    if (v11)
    {
      sub_22F257BAC(v11, a4, &v16);
      goto LABEL_14;
    }
  }
  v12 = 0;
  v16 = 0;
LABEL_8:
  sub_22E3CF21C(v10, 0, v12);
  if (v16)
    llvm::MetadataTracking::untrack();
  v13 = (_QWORD *)(v9[503] + (a3 >> 1));
  if ((a3 & 1) != 0)
    v15 = *(uint64_t (**)(_QWORD *))(*v13 + v15);
  return (_QWORD *)v15(v13);
}

uint64_t sub_22E5E5100(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;

  if (!*(_BYTE *)(result + 2892))
  {
    v2 = *(_QWORD *)(result + 2880);
    if (v2)
    {
      v3 = result;
      sub_22F0D5A50(a2);
      v5 = v4;
      result = sub_22F254674(v2, v3 + 272, v4);
      *(_DWORD *)(v3 + 4176) = v5;
    }
  }
  return result;
}

void sub_22E5E5158(uint64_t a1, unsigned __int8 *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  char v11;
  unsigned int v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  llvm::BasicBlock *v17;
  llvm::BasicBlock *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  unsigned __int8 *v23;
  unint64_t v24;
  unsigned __int8 *v25;
  char v26;
  char v27;
  char v28;
  __int16 v29;
  char v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  int v35;
  uint64_t v36;
  unsigned __int8 **v37;
  unint64_t v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  unint64_t v41;
  _QWORD *v42;
  unsigned __int8 *v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unsigned int v49;
  unsigned __int8 **v50;
  int v51;
  unsigned __int8 *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t *v64;
  void *v65;
  __int128 v66;
  _QWORD *v67;
  int v68;
  uint64_t v69;
  unsigned __int8 **v70;
  unsigned __int8 *v71;
  uint64_t v72;
  unsigned __int8 *v73;
  unint64_t v74;
  char v75;
  const char *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  llvm::BasicBlock *v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  char *v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  _OWORD *v100;
  _OWORD *v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  char *v107;
  _QWORD *v108;
  llvm::Value *v109;
  int v110;
  uint64_t v111;
  unint64_t v112;
  char v113;
  unint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  int v122;
  int v123;
  int v124;
  int v125;
  unsigned __int8 *v126;
  unsigned __int8 *v127;
  __n128 v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  llvm::PHINode *v135;
  unsigned int v136;
  _QWORD *v137;
  uint64_t v138;
  unsigned int v139;
  _QWORD *v140;
  _QWORD *v141;
  unsigned int v142;
  _QWORD *v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  _OWORD *v149;
  _OWORD *v150;
  __int128 v151;
  __int128 v152;
  unsigned __int8 *v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  uint64_t v158;
  unsigned int v159;
  llvm::Value *v160;
  int v161;
  llvm::Value *v162;
  llvm::APInt *v163;
  unsigned int v164;
  BOOL v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t *v168;
  uint64_t v169;
  llvm::Value *v170;
  unint64_t v171;
  char v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  unint64_t v176;
  char v177;
  unint64_t v178;
  unsigned int v179;
  int v180;
  unsigned int *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char v185;
  uint64_t v186;
  unsigned int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  char v202;
  llvm::BasicBlock *v203;
  _QWORD *v204;
  unsigned __int8 *v205;
  _QWORD *v206;
  _QWORD *v207;
  unint64_t v208;
  uint64_t v209;
  unint64_t v210;
  char v211;
  unint64_t v212;
  uint64_t v213;
  int v214;
  uint64_t v215;
  uint64_t v216;
  char v217;
  uint64_t v218;
  int v219;
  int v220;
  int v221;
  unsigned int v222;
  int v223;
  uint64_t v224;
  uint64_t v225;
  int v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char v231;
  uint64_t v232;
  BOOL v233;
  uint64_t v234;
  __n128 v235;
  uint64_t v236;
  int v237;
  char v238;
  uint64_t v239;
  unsigned int v240;
  uint64_t v241;
  uint64_t v242;
  _QWORD *v243;
  uint64_t v244;
  uint64_t v245;
  unsigned int v246;
  unint64_t v247;
  unint64_t v248;
  char v249;
  unsigned __int8 *v250;
  _QWORD *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unsigned int v256;
  _QWORD *v257;
  unsigned int v258;
  uint64_t v259;
  llvm::BasicBlock *v260;
  uint64_t v261;
  int v262;
  _OWORD *v263;
  _OWORD *v264;
  __int128 v265;
  __int128 v266;
  uint64_t v267;
  uint64_t v268;
  int v269;
  uint64_t v270;
  _QWORD *v271;
  _QWORD *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  _BYTE *v276;
  uint64_t v277;
  uint64_t v278;
  unint64_t v279;
  const char *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  int *v286;
  uint64_t v287;
  uint64_t v288;
  int *v289;
  int v290;
  int v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  char v296;
  uint64_t v297;
  unsigned int v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unint64_t v305;
  uint64_t v306;
  unint64_t v307;
  unsigned __int8 *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  unint64_t v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t v319;
  unint64_t v320;
  char v321;
  unint64_t v322;
  unint64_t v323;
  _QWORD *v324;
  uint64_t v325;
  const char *v326;
  uint64_t v327;
  unsigned __int8 *v328;
  int v329;
  unint64_t v330;
  unint64_t v331;
  unint64_t v332;
  void **v333;
  unsigned __int32 v334;
  int v335;
  unint64_t v336;
  char v337;
  unint64_t v338;
  unint64_t *v339;
  int v340;
  unint64_t v341;
  unint64_t v342;
  unint64_t v343;
  uint64_t v344;
  unint64_t v345;
  unint64_t v346;
  _DWORD *v347;
  uint64_t v348;
  unint64_t v349;
  uint64_t v350;
  int v351;
  unint64_t v352;
  char v353;
  unint64_t v354;
  unsigned int v355;
  uint64_t v356;
  int v357;
  unsigned int v358;
  unint64_t v359;
  uint64_t v360;
  uint64_t v361;
  unint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  char v367;
  uint64_t v368;
  unint64_t v369;
  unint64_t v370;
  uint64_t v371;
  unint64_t v372;
  unint64_t v373;
  char v374;
  unint64_t v375;
  unsigned int v376;
  int v377;
  int v378;
  uint64_t v379;
  char v380;
  uint64_t v381;
  uint64_t v382;
  char v383;
  int v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  unsigned __int8 *v388;
  uint64_t v389;
  int v390;
  _QWORD *v391;
  uint64_t v392;
  llvm::BasicBlock *v393;
  _QWORD *v394;
  uint64_t v395;
  uint64_t v396;
  __int128 v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  __int128 v401;
  llvm::BasicBlock *v402;
  int v403;
  unint64_t v404;
  const char *v405;
  uint64_t v406;
  int v407;
  _QWORD *v408;
  uint64_t v409;
  int v410;
  unint64_t v411;
  unsigned __int32 v412;
  uint64_t v413;
  unsigned int v414;
  const char *v415;
  __n128 v416;
  __int128 v417;
  uint64_t v418;
  llvm::BasicBlock *v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  char v423;
  char v424;
  __n128 v425;
  _QWORD v426[2];
  __int16 v427;
  uint64_t v428;

  v428 = *MEMORY[0x24BDAC8D0];
  v8 = a1 + 3904;
  v9 = (_QWORD *)(a1 + 320);
  while (2)
  {
    v10 = sub_22E3CF180(v8, (uint64_t)a2);
    if (v11)
      *(_QWORD *)(a1 + 4016) = v10;
    v12 = *a2;
    if (v12 <= 0x5F)
    {
      switch(*a2)
      {
        case 8u:
          v417 = 0uLL;
          LODWORD(v419) = 0;
          v418 = 0;
          v421 = 0;
          v422 = 0;
          v420 = 0;
          v423 = 0;
          sub_22E5ED68C(a1, a2, 0, &v417, (uint64_t)&v425);
          return;
        case 9u:
          sub_22F28C2D0(a1, (uint64_t)a2);
          return;
        case 0xAu:
        case 0xBu:
        case 0xDu:
        case 0xEu:
        case 0x10u:
        case 0x11u:
        case 0x12u:
          goto LABEL_10;
        case 0xCu:
          if (*v9)
            sub_22E5E5100(a1, (uint64_t)a2);
          v19 = *((_QWORD *)a2 + 1);
          if ((v19 & 1) != 0)
          {
            v20 = (unint64_t *)((v19 & 0xFFFFFFFFFFFFFFFELL) + 8);
            v21 = &v20[*(unsigned int *)(v19 & 0xFFFFFFFFFFFFFFFELL)];
          }
          else
          {
            if (v19)
              v20 = (unint64_t *)(a2 + 8);
            else
              v20 = 0;
            if (v19)
              v21 = (unint64_t *)(a2 + 16);
            else
              v21 = 0;
          }
          while (v20 != v21)
          {
            v22 = *v20++;
            sub_22E4C6274(a1, v22);
          }
          return;
        case 0xFu:
          sub_22F28C278((_QWORD *)a1, (uint64_t)a2);
          return;
        case 0x13u:
          return;
        default:
          if (v12 != 3)
            goto LABEL_10;
          if (*v9)
            sub_22E5E5100(a1, (uint64_t)a2);
          v53 = *(_QWORD *)(a1 + 3040) + 48 * *(unsigned int *)(a1 + 3048);
          v54 = *(_QWORD *)(v53 - 32);
          v425 = *(__n128 *)(v53 - 48);
          v426[0] = v54;
LABEL_94:
          sub_22E48BA00((_QWORD *)a1, (uint64_t)&v425);
          break;
      }
      return;
    }
    switch(*a2)
    {
        sub_22F25DA10(a1, (uint64_t)a2);
        return;
      case 'a':
      case 'd':
        goto LABEL_10;
      case 'b':
        if (*(_QWORD *)(a1 + 4032))
        {
          v38 = *(unsigned __int16 *)a2;
          if ((v38 & 0x100) != 0)
          {
            v39 = a2 + 24;
            if (*(_QWORD *)&a2[8 * ((v38 >> 8) & 1) + 24])
            {
              sub_22F007D7C(*((unsigned __int8 **)a2 + 3), *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), 0, (uint64_t)&v405);
              v40 = 0;
              v41 = *(unsigned __int16 *)a2;
              if ((v41 & 0x100) != 0)
                v40 = *(unsigned __int8 **)&v39[8 * ((v41 >> 8) & 1)];
              sub_22F007D7C(v40, *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), 0, (uint64_t)&v413);
              v425.n128_u64[0] = (unint64_t)"sw.bb";
              v427 = 259;
              v42 = (_QWORD *)operator new();
              llvm::BasicBlock::BasicBlock();
              sub_22E61E284((_QWORD *)a1, v42, (uint64_t)a2);
              sub_22E5E5158(a1, *(_QWORD *)&v39[8 * (((unint64_t)*(unsigned __int16 *)a2 >> 8) & 1) + 8], 0, 0);
              if (BYTE4(v406))
              {
                if ((llvm::APInt::compare((llvm::APInt *)&v413, (const llvm::APInt *)&v405) & 0x80000000) != 0)
                  goto LABEL_504;
              }
              else if ((llvm::APInt::compareSigned((llvm::APInt *)&v413, (const llvm::APInt *)&v405) & 0x80000000) != 0)
              {
                goto LABEL_504;
              }
              if (a4)
              {
                v350 = 8 * a4;
                while (1)
                {
                  v351 = *(unsigned __int16 *)(*a3 + 32);
                  if (v351 == 40)
                  {
                    v55 = 1;
                    goto LABEL_99;
                  }
                  if (v351 == 44)
                    break;
                  v55 = 0;
                  ++a3;
                  v350 -= 8;
                  if (!v350)
                    goto LABEL_99;
                }
                v55 = -1;
              }
              else
              {
                v55 = 0;
              }
LABEL_99:
              sub_22E5EDF90((llvm::APInt *)&v413, (uint64_t)&v425);
              v412 = v425.n128_u32[2];
              v411 = v425.n128_u64[0];
              if (v425.n128_u32[2] > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v425);
                v334 = v425.n128_u32[2];
                v335 = llvm::APInt::compare((llvm::APInt *)&v411, (const llvm::APInt *)&v425);
                if (v334 >= 0x41 && v425.n128_u64[0])
                  MEMORY[0x2348A0E84](v425.n128_u64[0], 0x1000C8000313F17);
                if ((v335 & 0x80000000) == 0)
                  goto LABEL_103;
              }
              else
              {
                if (v425.n128_u32[2])
                  v56 = 0xFFFFFFFFFFFFFFFFLL >> -v425.n128_u8[8];
                else
                  LOBYTE(v56) = 0;
                v425.n128_u64[0] = v56 & 0x40;
                if ((llvm::APInt::compare((llvm::APInt *)&v411, (const llvm::APInt *)&v425) & 0x80000000) == 0)
                {
LABEL_103:
                  v57 = v55;
                  v400 = *(_QWORD *)(a1 + 320);
                  v396 = *(_QWORD *)(a1 + 4056);
                  v425.n128_u64[0] = (unint64_t)"sw.caserange";
                  v427 = 259;
                  v58 = operator new();
                  *(_QWORD *)(a1 + 4056) = llvm::BasicBlock::BasicBlock();
                  v59 = *(_QWORD *)(a1 + 1624);
                  llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList();
                  v60 = *(_QWORD *)(v59 + 72);
                  *(_QWORD *)(v58 + 24) = v60;
                  *(_QWORD *)(v58 + 32) = v59 + 72;
                  v58 += 24;
                  *(_QWORD *)(v60 + 8) = v58;
                  *(_QWORD *)(v59 + 72) = v58;
                  v61 = *(_QWORD *)(a1 + 4056);
                  *(_QWORD *)(a1 + 320) = v61;
                  *(_QWORD *)(a1 + 328) = v61 + 40;
                  v62 = *(_QWORD *)(a1 + 4032);
                  v63 = *(_DWORD *)(v62 + 20);
                  if ((v63 & 0x40000000) != 0)
                    v64 = *(uint64_t **)(v62 - 8);
                  else
                    v64 = (uint64_t *)(v62 - 32 * (v63 & 0x7FFFFFF));
                  v166 = *v64;
                  v167 = llvm::ConstantInt::get();
                  v427 = 257;
                  v168 = (uint64_t *)sub_22E3E48CC(a1 + 272, v166, v167, (uint64_t)&v425, 0, 0);
                  v169 = llvm::ConstantInt::get();
                  v425.n128_u64[0] = (unint64_t)"inbounds";
                  v427 = 259;
                  v170 = (llvm::Value *)sub_22E3C18F4(a1 + 272, 37, v168, v169, (uint64_t)&v425);
                  if (*(_QWORD *)(a1 + 4040))
                  {
                    v171 = sub_22E3CF180(v8, (uint64_t)a2);
                    if (v172)
                      v173 = v171;
                    else
                      v173 = 0;
                    v174 = sub_22E659CE4(a1, v173, ***(_QWORD ***)(a1 + 4040));
                    ***(_QWORD ***)(a1 + 4040) += v173;
                  }
                  else
                  {
                    if (*(_QWORD *)(a1 + 4048))
                      v170 = sub_22E6200EC(a1, v170, v57);
                    v174 = 0;
                  }
                  sub_22E3D26FC((uint64_t *)(a1 + 272), (uint64_t)v170, (uint64_t)v42, v396, v174, 0);
                  if (v400)
                  {
                    *(_QWORD *)(a1 + 320) = v400;
                    *(_QWORD *)(a1 + 328) = v400 + 40;
                  }
                  else
                  {
                    *v9 = 0;
                    v9[1] = 0;
                  }
LABEL_501:
                  if (v412 >= 0x41 && v411)
                    MEMORY[0x2348A0E84](v411, 0x1000C8000313F17);
LABEL_504:
                  if (v414 >= 0x41 && v413)
                    MEMORY[0x2348A0E84](v413, 0x1000C8000313F17);
                  if (v406 < 0x41)
                    return;
                  v280 = v405;
                  if (!v405)
                    return;
                  goto LABEL_509;
                }
              }
              v336 = sub_22E3CF180(v8, (uint64_t)a2);
              if (v337)
                v338 = v336;
              else
                v338 = 0;
              v339 = &v411;
              if (v412 >= 0x41)
                v339 = (unint64_t *)v411;
              v340 = *(_DWORD *)v339;
              v341 = (v340 + 1);
              if (v340 == -1)
                goto LABEL_501;
              v342 = v338 / v341;
              v343 = v338 % v341;
              while (1)
              {
                v344 = *(_QWORD *)(a1 + 4040);
                if (v344)
                  break;
                v348 = *(_QWORD *)(a1 + 4048);
                if (v348)
                {
                  v349 = *(unsigned int *)(v348 + 8);
                  v347 = (_DWORD *)(v348 + 8);
                  if (v349 >= *(unsigned int *)(v348 + 12))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v349 = *(unsigned int *)(v348 + 8);
                  }
                  *(_DWORD *)(*(_QWORD *)v348 + 4 * v349) = v55;
                  goto LABEL_522;
                }
LABEL_523:
                if (v343)
                  --v343;
                else
                  v343 = 0;
                llvm::ConstantInt::get();
                llvm::SwitchInst::addCase();
                llvm::APInt::operator++();
                LODWORD(v341) = v341 - 1;
                if (!(_DWORD)v341)
                  goto LABEL_501;
              }
              if (v343)
                v345 = v342 + 1;
              else
                v345 = v342;
              v346 = *(unsigned int *)(v344 + 8);
              v347 = (_DWORD *)(v344 + 8);
              if (v346 >= *(unsigned int *)(v344 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v346 = *(unsigned int *)(v344 + 8);
              }
              *(_QWORD *)(*(_QWORD *)v344 + 8 * v346) = v345;
LABEL_522:
              ++*v347;
              goto LABEL_523;
            }
          }
          v43 = a2 + 24;
          sub_22F007D7C(*((unsigned __int8 **)a2 + 3), *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), 0, (uint64_t)&v425);
          llvm::ConstantInt::get();
          if (v425.n128_u32[2] >= 0x41 && v425.n128_u64[0])
            MEMORY[0x2348A0E84](v425.n128_u64[0], 0x1000C8000313F17);
          v44 = *(_QWORD *)(a1 + 4048);
          if (v44)
          {
            if (a4)
            {
              v356 = 8 * a4;
              while (1)
              {
                v357 = *(unsigned __int16 *)(*a3 + 32);
                if (v357 == 40)
                {
                  LODWORD(a4) = 1;
                  goto LABEL_80;
                }
                if (v357 == 44)
                  break;
                LODWORD(a4) = 0;
                ++a3;
                v356 -= 8;
                if (!v356)
                  goto LABEL_80;
              }
              LODWORD(a4) = -1;
            }
LABEL_80:
            v45 = *(_DWORD *)(v44 + 8);
            if (v45 >= *(_DWORD *)(v44 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v45 = *(_DWORD *)(v44 + 8);
            }
            *(_DWORD *)(*(_QWORD *)v44 + 4 * v45) = a4;
            ++*(_DWORD *)(v44 + 8);
          }
          v46 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 184);
          if ((*(_QWORD *)(v46 + 96) & 0x180000000000) != 0x80000000000
            && (*(_BYTE *)(v46 + 33) & 0x18) != 0
            && **(_BYTE **)&v43[8 * (((unint64_t)*(unsigned __int16 *)a2 >> 8) & 1) + 8] == 3)
          {
            v325 = *(_QWORD *)(a1 + 3040) + 48 * *(unsigned int *)(a1 + 3048);
            v326 = *(const char **)(v325 - 48);
            v425 = *(__n128 *)(v325 - 40);
            v415 = v326;
            v416 = v425;
            if (sub_22E48B9C8(a1, (uint64_t)&v415))
            {
              v327 = *(_QWORD *)(a1 + 4040);
              if (v327)
              {
                v373 = sub_22E3CF180(v8, (uint64_t)a2);
                if (v374)
                  v375 = v373;
                else
                  v375 = 0;
                v376 = *(_DWORD *)(v327 + 8);
                if (v376 >= *(_DWORD *)(v327 + 12))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v376 = *(_DWORD *)(v327 + 8);
                }
                *(_QWORD *)(*(_QWORD *)v327 + 8 * v376) = v375;
                ++*(_DWORD *)(v327 + 8);
              }
              llvm::SwitchInst::addCase();
              if (*(_QWORD *)(a1 + 320))
              {
                sub_22E3BF648((uint64_t *)(a1 + 272));
                *v9 = 0;
                v9[1] = 0;
              }
              return;
            }
          }
          v425.n128_u64[0] = (unint64_t)"sw.bb";
          v427 = 259;
          v47 = (_QWORD *)operator new();
          llvm::BasicBlock::BasicBlock();
          sub_22E61E284((_QWORD *)a1, v47, (uint64_t)a2);
          v48 = *(_QWORD *)(a1 + 4040);
          if (v48)
          {
            v352 = sub_22E3CF180(v8, (uint64_t)a2);
            if (v353)
              v354 = v352;
            else
              v354 = 0;
            v355 = *(_DWORD *)(v48 + 8);
            if (v355 >= *(_DWORD *)(v48 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v355 = *(_DWORD *)(v48 + 8);
            }
            *(_QWORD *)(*(_QWORD *)v48 + 8 * v355) = v354;
            ++*(_DWORD *)(v48 + 8);
          }
          llvm::SwitchInst::addCase();
          v49 = *(unsigned __int16 *)a2;
          v50 = *(unsigned __int8 ***)&v43[8 * ((v49 >> 8) & 1) + 8];
          v51 = *(unsigned __int8 *)v50;
          if (v51 == 98)
          {
            while (1)
            {
              v52 = (unsigned __int8 *)v50;
              v316 = *(unsigned __int16 *)v50;
              if ((v316 & 0x100) != 0)
              {
                if (v50[((v316 >> 8) & 1) + 3])
                  break;
              }
              sub_22F007D7C(v50[3], *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), 0, (uint64_t)&v425);
              llvm::ConstantInt::get();
              if (v425.n128_u32[2] >= 0x41 && v425.n128_u64[0])
                MEMORY[0x2348A0E84](v425.n128_u64[0], 0x1000C8000313F17);
              v317 = *(_QWORD *)(a1 + 4040);
              if (v317)
              {
                v320 = sub_22E3CF180(v8, (uint64_t)v52);
                if (v321)
                  v322 = v320;
                else
                  v322 = 0;
                v404 = v322;
                v323 = *(unsigned int *)(v317 + 8);
                if (v323 >= *(unsigned int *)(v317 + 12))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v323 = *(unsigned int *)(v317 + 8);
                }
                *(_QWORD *)(*(_QWORD *)v317 + 8 * v323) = v404;
                ++*(_DWORD *)(v317 + 8);
              }
              if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 184) + 96) & 0x180000000000) == 0x80000000000)
              {
                v425.n128_u64[0] = (unint64_t)"sw.bb";
                v427 = 259;
                v324 = (_QWORD *)operator new();
                llvm::BasicBlock::BasicBlock();
                sub_22E61E284((_QWORD *)a1, v324, (uint64_t)v52);
              }
              v318 = *(_QWORD *)(a1 + 4048);
              if (v318)
              {
                v319 = *(unsigned int *)(v318 + 8);
                if (v319 >= *(unsigned int *)(v318 + 12))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v319 = *(unsigned int *)(v318 + 8);
                }
                *(_DWORD *)(*(_QWORD *)v318 + 4 * v319) = 0;
                ++*(_DWORD *)(v318 + 8);
              }
              llvm::SwitchInst::addCase();
              v49 = *(unsigned __int16 *)v52;
              v50 = *(unsigned __int8 ***)&v52[8 * ((v49 >> 8) & 1) + 32];
              v51 = *(unsigned __int8 *)v50;
              a2 = v52;
              if (v51 != 98)
                goto LABEL_89;
            }
            v50 = *(unsigned __int8 ***)&a2[8 * ((v49 >> 8) & 1) + 32];
            v51 = *(unsigned __int8 *)v50;
          }
          v52 = a2;
LABEL_89:
          if (v51 != 99)
            goto LABEL_90;
          sub_22E5E5100(a1, (uint64_t)v52);
          v328 = &v52[8 * (((unint64_t)*(unsigned __int16 *)v52 >> 8) & 1)];
        }
        else
        {
          v328 = &a2[8 * (((unint64_t)*(unsigned __int16 *)a2 >> 8) & 1)];
        }
        v50 = (unsigned __int8 **)*((_QWORD *)v328 + 4);
        goto LABEL_90;
      case 'c':
        sub_22F28C330((_QWORD *)a1, (uint64_t)a2, (uint64_t)a3, a4);
        return;
      case 'e':
        v23 = a2 + 16;
        v24 = *(unsigned int *)a2;
        if (v24 < 0x100)
        {
          v25 = 0;
          v26 = 0;
          v27 = 0;
          v28 = 0;
          goto LABEL_40;
        }
        v28 = 0;
        v27 = 0;
        v26 = 0;
        v25 = 0;
        v32 = &v23[(v24 >> 5) & 0x7FFFFF8];
        v33 = a2 + 16;
        do
        {
          switch(*(_WORD *)(*(_QWORD *)v33 + 32))
          {
            case ')':
              v34 = *(unsigned __int8 **)(*((_QWORD *)a2 + 1) + 8);
              if (v34)
              {
                while (1)
                {
                  v25 = v34;
                  v35 = *v34;
                  if (v35 > 213)
                  {
                    if (v35 == 233)
                    {
                      if ((*(_DWORD *)v25 & 0x7C0000) != 0x300000)
                        goto LABEL_43;
                      v37 = (unsigned __int8 **)(v25 + 16);
                    }
                    else
                    {
                      if (v35 != 214)
                        goto LABEL_43;
                      v37 = (unsigned __int8 **)(v25 + 24);
                    }
                  }
                  else if (v35 == 155)
                  {
                    if ((**((_DWORD **)v25 + 2) & 0x18000) != 0)
                      goto LABEL_43;
                    if (v25[48])
                      v37 = (unsigned __int8 **)(v25 + 24);
                    else
                      v37 = (unsigned __int8 **)(v25 + 32);
                  }
                  else
                  {
                    if (v35 != 176)
                      goto LABEL_43;
                    v36 = *((unsigned int *)v25 + 5);
                    if ((_DWORD)v36 == -1)
                      goto LABEL_43;
                    v37 = (unsigned __int8 **)&v25[8 * v36 + 40];
                  }
                  v34 = *v37;
                  if (v34 == v25)
                    goto LABEL_43;
                }
              }
              v25 = 0;
              break;
            case '-':
              v26 = 1;
              break;
            case '/':
              v27 = 1;
              break;
            case '0':
              v28 = 1;
              break;
            default:
              break;
          }
LABEL_43:
          v33 += 8;
        }
        while (v33 != v32);
LABEL_40:
        v29 = *(_WORD *)(a1 + 1898);
        *(_BYTE *)(a1 + 1898) = v28;
        *(_BYTE *)(a1 + 1899) = v27;
        v30 = *(_BYTE *)(a1 + 1900);
        *(_BYTE *)(a1 + 1900) = v26;
        v31 = *(_QWORD *)(a1 + 1904);
        *(_QWORD *)(a1 + 1904) = v25;
        sub_22E5E5158(a1, *((_QWORD *)a2 + 1), v23, (unint64_t)*(unsigned int *)a2 >> 8);
        *(_QWORD *)(a1 + 1904) = v31;
        *(_BYTE *)(a1 + 1900) = v30;
        *(_WORD *)(a1 + 1898) = v29;
        return;
      default:
        if (v12 == 235)
        {
          sub_22F28C3E8(a1, *((_QWORD *)a2 + 1));
          if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 152) + 8) & 0x800000000000) != 0 && a2[24])
            sub_22F252FA4(a1);
          v50 = (unsigned __int8 **)*((_QWORD *)a2 + 2);
LABEL_90:
          sub_22E5E5158(a1, v50, 0, 0);
          return;
        }
LABEL_10:
        if (!*v9)
        {
          if (!sub_22E61F04C((uint64_t)a2, 0))
            return;
          sub_22E47E098(a1);
        }
        sub_22E5E5100(a1, (uint64_t)a2);
        v14 = *(_QWORD *)(a1 + 144);
        v15 = *(_QWORD *)(*(_QWORD *)(v14 + 152) + 72);
        if ((_DWORD)v15)
          v16 = (v15 & 0x200000000) == 0;
        else
          v16 = 1;
        if (!v16 && *a2 - 86 >= 0xFFFFFFBF)
        {
          sub_22E5FF808(a1, (uint64_t)a2);
          return;
        }
        break;
    }
    switch(*a2)
    {
      case 1u:
      case 2u:
        sub_22E5E98C8(a1, (uint64_t)a2);
        return;
      case 5u:
        sub_22F28BBB8(a1, (uint64_t)a2, a3, a4);
        return;
      case 6u:
        sub_22F25C700(a1, (uint64_t)a2);
        return;
      case 7u:
        sub_22F28BA60();
        return;
      case 0xAu:
        sub_22E48C9E4(a1, (uint64_t)a2);
        return;
      case 0xBu:
        sub_22E48CAF4(a1, (uint64_t)a2);
        return;
      case 0xDu:
        sub_22F28B5B0(a1, (uint64_t)a2, a3, a4);
        return;
      case 0xEu:
        LOWORD(v420) = 261;
        *(_QWORD *)&v417 = "for.end";
        *((_QWORD *)&v417 + 1) = 7;
        v76 = (const char *)operator new();
        llvm::BasicBlock::BasicBlock();
        v398 = *(_QWORD *)(a1 + 2008);
        v77 = *(_DWORD *)(a1 + 2640);
        *(_DWORD *)(a1 + 2640) = v77 + 1;
        sub_22F0D4E74((uint64_t)a2);
        sub_22E4889F4((uint64_t)&v417, a1, v78);
        sub_22E5E501C((_QWORD *)a1, MEMORY[0x24BE38848], 0, *((_DWORD *)a2 + 1));
        v79 = *((_QWORD *)a2 + 1);
        if (v79)
        {
          sub_22F0D5A50(v79);
          sub_22E5E501C((_QWORD *)a1, MEMORY[0x24BE38898], 0, v80);
          sub_22E5E5158(a1, *((_QWORD *)a2 + 1), 0, 0);
          sub_22F0D60E4(*((_QWORD *)a2 + 1));
          sub_22E5E501C((_QWORD *)a1, MEMORY[0x24BE38890], 0, v81);
        }
        v427 = 261;
        v425.n128_u64[0] = (unint64_t)"for.cond";
        v425.n128_u64[1] = 8;
        v82 = (llvm::BasicBlock *)operator new();
        llvm::BasicBlock::BasicBlock();
        v387 = *(_QWORD *)(a1 + 2008);
        v384 = *(_DWORD *)(a1 + 2640);
        *(_DWORD *)(a1 + 2640) = v384 + 1;
        v402 = v82;
        sub_22E5ED9B4((_QWORD *)a1, v82, 0);
        LOWORD(v415) = 0;
        v416.n128_u64[0] = 0;
        v416.n128_u32[2] = 0;
        v83 = *((_QWORD *)a2 + 3);
        v390 = v77;
        if (v83)
          v84 = sub_22F00554C(v83, (uint64_t)&v415, *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), 0, 0);
        else
          v84 = 1;
        sub_22F0D4E74((uint64_t)a2);
        v86 = v85;
        v87 = *(_QWORD *)(a1 + 144);
        v88 = *(_QWORD *)(v87 + 144);
        v89 = *(_QWORD *)(v87 + 184);
        v90 = *(unsigned __int8 *)(a1 + 2892);
        if (!*(_BYTE *)(a1 + 2892) && (v91 = *(_QWORD *)(a1 + 2880)) != 0)
        {
          sub_22F257BAC(v91, v86, &v425);
          if (*(_BYTE *)(a1 + 2892))
            goto LABEL_150;
        }
        else
        {
          v425.n128_u64[0] = 0;
          if (v90)
          {
LABEL_150:
            v405 = 0;
            goto LABEL_151;
          }
        }
        v92 = *(_QWORD *)(a1 + 2880);
        if (!v92)
          goto LABEL_150;
        sub_22F257BAC(v92, SHIDWORD(v86), &v405);
LABEL_151:
        v93 = sub_22E5EDBF8(*(_QWORD *)(a1 + 144), v84);
        sub_22E5241F0(a1 + 168, v402, v88, v89, a3, a4, (uint64_t *)&v425, (uint64_t *)&v405, v93);
        if (v405)
          llvm::MetadataTracking::untrack();
        v94 = (char *)v76;
        if (v425.n128_u64[0])
          llvm::MetadataTracking::untrack();
        sub_22F0D4E74((uint64_t)a2);
        sub_22E4889F4((uint64_t)&v425, a1, v95);
        v96 = v402;
        v97 = v387;
        v98 = v384;
        if (*((_QWORD *)a2 + 4))
        {
          v99 = *((_QWORD *)a2 + 2);
          if (v99 && *(_QWORD *)(v99 + 8))
          {
            v96 = 0;
            v98 = 0;
            v97 = -1;
          }
          else
          {
            LOWORD(v409) = 261;
            v405 = "for.inc";
            v406 = 7;
            v96 = (_QWORD *)operator new();
            llvm::BasicBlock::BasicBlock();
            v97 = *(_QWORD *)(a1 + 2008);
            v98 = *(_DWORD *)(a1 + 2640);
            *(_DWORD *)(a1 + 2640) = v98 + 1;
          }
        }
        v405 = v76;
        v406 = v398;
        v407 = v390;
        v408 = v96;
        v409 = v97;
        v410 = v98;
        v100 = (_OWORD *)sub_22E566D28(a1 + 3040, (unint64_t)&v405, 1);
        v101 = (_OWORD *)(*(_QWORD *)(a1 + 3040) + 48 * *(unsigned int *)(a1 + 3048));
        v103 = v100[1];
        v102 = v100[2];
        *v101 = *v100;
        v101[1] = v103;
        v101[2] = v102;
        ++*(_DWORD *)(a1 + 3048);
        v104 = *((_QWORD *)a2 + 3);
        if (v104)
        {
          sub_22F0D5A50(v104);
          sub_22E5E501C((_QWORD *)a1, MEMORY[0x24BE38880], 0, v105);
          v106 = *((_QWORD *)a2 + 2);
          if (v106)
          {
            v359 = *(_QWORD *)(v106 + 8);
            if (v359)
            {
              sub_22E4C6274(a1, v359);
              v96 = v402;
              if (*((_QWORD *)a2 + 4))
              {
                LOWORD(v409) = 261;
                v405 = "for.inc";
                v406 = 7;
                v96 = (_QWORD *)operator new();
                llvm::BasicBlock::BasicBlock();
                v387 = *(_QWORD *)(a1 + 2008);
                v384 = *(_DWORD *)(a1 + 2640);
                *(_DWORD *)(a1 + 2640) = v384 + 1;
              }
              v360 = *(_QWORD *)(a1 + 3040) + 48 * *(unsigned int *)(a1 + 3048);
              *(_QWORD *)(v360 - 24) = v96;
              *(_QWORD *)(v360 - 16) = v387;
              *(_DWORD *)(v360 - 8) = v384;
              v94 = (char *)v76;
            }
          }
          v107 = v94;
          if (*(_QWORD *)(v420 + 1992) - *(_QWORD *)(v420 + 2000) != (_QWORD)v417)
          {
            v405 = "for.cond.cleanup";
            LOWORD(v409) = 259;
            v107 = (char *)operator new();
            llvm::BasicBlock::BasicBlock();
          }
          v405 = "for.body";
          LOWORD(v409) = 259;
          v108 = (_QWORD *)operator new();
          llvm::BasicBlock::BasicBlock();
          v109 = sub_22E4D86E0((_QWORD *)a1, *((_QWORD *)a2 + 3));
          sub_22F0D60E4(*((_QWORD *)a2 + 3));
          sub_22E5E501C((_QWORD *)a1, MEMORY[0x24BE38870], 0, v110);
          v111 = *((_QWORD *)a2 + 3);
          v112 = sub_22E3CF180(v8, *((_QWORD *)a2 + 5));
          if (v113)
            v114 = v112;
          else
            v114 = 0;
          v115 = sub_22E659D60(a1, v111, v114);
          if (!v115 && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 184) + 33) & 0x18) != 0)
          {
            v116 = sub_22F0D4664(*((_BYTE **)a2 + 5));
            v109 = sub_22E6200EC(a1, v109, v116);
          }
          sub_22E3D26FC((uint64_t *)(a1 + 272), (uint64_t)v109, (uint64_t)v108, (uint64_t)v107, v115, 0);
          if (v107 != v94)
          {
            sub_22E5ED9B4((_QWORD *)a1, v107, 0);
            v405 = v94;
            v406 = v398;
            v407 = v390;
            sub_22E48BA00((_QWORD *)a1, (uint64_t)&v405);
          }
          sub_22E5ED9B4((_QWORD *)a1, v108, 0);
        }
        sub_22E3CB7B0((_QWORD *)a1, (uint64_t)a2, 0);
        sub_22F0D5A50(*((_QWORD *)a2 + 5));
        sub_22E5E501C((_QWORD *)a1, MEMORY[0x24BE38850], 0, v117);
        v118 = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000);
        v119 = *(_QWORD *)(a1 + 2312);
        v120 = *(_BYTE *)(a1 + 2893);
        *(_BYTE *)(a1 + 2893) = 0;
        v121 = *(_QWORD *)(a1 + 2872);
        *(_QWORD *)(a1 + 2872) = v118;
        sub_22E5E5158(a1, *((_QWORD *)a2 + 5), 0, 0);
        sub_22F0D60E4(*((_QWORD *)a2 + 5));
        sub_22E5E501C((_QWORD *)a1, MEMORY[0x24BE38840], 0, v122);
        *(_BYTE *)(a1 + 2893) = v120;
        sub_22E48B274(a1, v118, v119, 0, 0);
        *(_QWORD *)(a1 + 2872) = v121;
        if (*((_QWORD *)a2 + 4))
        {
          sub_22E5ED9B4((_QWORD *)a1, v96, 0);
          sub_22F0D5A50(*((_QWORD *)a2 + 4));
          sub_22E5E501C((_QWORD *)a1, MEMORY[0x24BE38888], 0, v123);
          sub_22E5E5158(a1, *((_QWORD *)a2 + 4), 0, 0);
          sub_22F0D60E4(*((_QWORD *)a2 + 4));
          sub_22E5E501C((_QWORD *)a1, MEMORY[0x24BE38878], 0, v124);
        }
        --*(_DWORD *)(a1 + 3048);
        sub_22E488BE4((uint64_t)&v425);
        sub_22E5E5100(a1, (uint64_t)a2);
        sub_22E5EDA70(a1);
        sub_22E488BE4((uint64_t)&v417);
        sub_22E523D50(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * *(unsigned int *)(a1 + 232) - 8));
        sub_22E5244E0(a1 + 224);
        sub_22E5ED9B4((_QWORD *)a1, v94, 1);
        sub_22F0D60E4(*((_QWORD *)a2 + 5));
        sub_22E5E501C((_QWORD *)a1, MEMORY[0x24BE38828], 0, v125);
        sub_22E488B4C((uint64_t)&v425);
        if (v416.n128_u32[2] >= 2)
          sub_22EF53BC0(&v416.n128_i64[1]);
        goto LABEL_246;
      case 0x10u:
        v136 = *(unsigned __int16 *)a2;
        if ((v136 & 0x600) != 0x200)
        {
          v137 = a2 + 16;
          sub_22F0D4E74(*(_QWORD *)&a2[8 * ((v136 >> 13) & 1) + 16 + 8 * ((v136 >> 12) & 1)]);
          sub_22E4889F4((uint64_t)&v417, a1, v138);
          v139 = *(unsigned __int16 *)a2;
          if ((v139 & 0x2000) != 0 && *v137)
          {
            sub_22E5E5158(a1, *v137, 0, 0);
            v139 = *(unsigned __int16 *)a2;
          }
          if ((v139 & 0x1000) != 0)
          {
            v361 = v137[(v139 >> 13) & 1];
            if (v361)
            {
              v362 = *(_QWORD *)(v361 + 8);
              if (v362)
              {
                sub_22E4C6274(a1, v362);
                v139 = *(unsigned __int16 *)a2;
              }
            }
          }
          LOBYTE(v415) = 0;
          if (sub_22E61F3B0(a1, v137[((v139 >> 13) & 1) + ((v139 >> 12) & 1)], &v415, (v139 & 0x700) == 256)&& ((v222 = *(unsigned __int16 *)a2, v223 = ((v222 >> 13) & 1) + ((v222 >> 12) & 1), v224 = v137[v223 + 1], (v222 & 0x800) != 0)? (v225 = v137[v223 + 2]): (v225 = 0), (v226 = v415, (_BYTE)v415) ? (v227 = v224) : (v227 = v225), (v222 & 0x700) == 0x100|| ((_BYTE)v415 ? (v228 = v225) : (v228 = v224), (sub_22E61F04C(v228, 0) & 1) == 0)))
          {
            if (!v226)
            {
              if (!v227)
                goto LABEL_246;
              goto LABEL_286;
            }
            sub_22E3CB7B0((_QWORD *)a1, (uint64_t)a2, 0);
            if (v227)
            {
LABEL_286:
              v229 = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000);
              v230 = *(_QWORD *)(a1 + 2312);
              v231 = *(_BYTE *)(a1 + 2893);
              *(_BYTE *)(a1 + 2893) = 0;
              v232 = *(_QWORD *)(a1 + 2872);
              *(_QWORD *)(a1 + 2872) = v229;
              sub_22E5E5158(a1, v227, 0, 0);
              *(_BYTE *)(a1 + 2893) = v231;
              sub_22E48B274(a1, v229, v230, 0, 0);
              *(_QWORD *)(a1 + 2872) = v232;
            }
          }
          else
          {
            v425.n128_u64[0] = (unint64_t)"if.then";
            v427 = 259;
            v140 = (_QWORD *)operator new();
            llvm::BasicBlock::BasicBlock();
            v425.n128_u64[0] = (unint64_t)"if.end";
            v427 = 259;
            v141 = (_QWORD *)operator new();
            llvm::BasicBlock::BasicBlock();
            v142 = *(unsigned __int16 *)a2;
            if ((v142 & 0x800) != 0)
            {
              v143 = v141;
              if (v137[((v142 >> 13) & 1) + 2 + ((v142 >> 12) & 1)])
              {
                v425.n128_u64[0] = (unint64_t)"if.else";
                v427 = 259;
                v143 = (_QWORD *)operator new();
                llvm::BasicBlock::BasicBlock();
                v142 = *(unsigned __int16 *)a2;
              }
            }
            else
            {
              v143 = v141;
            }
            v176 = sub_22E3CF180(v8, v137[((v142 >> 12) & 1) + 1 + ((v142 >> 13) & 1)]);
            if (v177)
              v178 = v176;
            else
              v178 = 0;
            if (v178)
            {
              v182 = 0;
              v179 = *(unsigned __int16 *)a2;
            }
            else
            {
              v179 = *(unsigned __int16 *)a2;
              if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 184) + 33) & 0x18) != 0)
              {
                v180 = ((v179 >> 13) & 1) + ((v179 >> 12) & 1);
                if ((v179 & 0x800) != 0)
                  v181 = (unsigned int *)v137[v180 + 2];
                else
                  v181 = 0;
                v182 = sub_22F0D46D0(v137[v180 + 1], v181);
              }
              else
              {
                v182 = 0;
              }
            }
            sub_22E61F8F8((_QWORD *)a1, (unsigned __int8 *)v137[((v179 >> 13) & 1) + ((v179 >> 12) & 1)], (uint64_t)v140, (uint64_t)v143, v178, v182);
            sub_22E5ED9B4((_QWORD *)a1, v140, 0);
            sub_22E3CB7B0((_QWORD *)a1, (uint64_t)a2, 0);
            v183 = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000);
            v184 = *(_QWORD *)(a1 + 2312);
            v185 = *(_BYTE *)(a1 + 2893);
            *(_BYTE *)(a1 + 2893) = 0;
            v186 = *(_QWORD *)(a1 + 2872);
            *(_QWORD *)(a1 + 2872) = v183;
            sub_22E5E5158(a1, v137[((*(unsigned __int16 *)a2 >> 12) & 1) + 1 + ((*(unsigned __int16 *)a2 >> 13) & 1u)], 0, 0);
            *(_BYTE *)(a1 + 2893) = v185;
            sub_22E48B274(a1, v183, v184, 0, 0);
            *(_QWORD *)(a1 + 2872) = v186;
            sub_22E5EDA70(a1);
            v187 = *(unsigned __int16 *)a2;
            if ((v187 & 0x800) != 0)
            {
              v188 = v137[((v187 >> 13) & 1) + 2 + ((v187 >> 12) & 1)];
              if (v188)
              {
                v425.n128_u64[0] = 0;
                v425.n128_u64[1] = a1;
                sub_22E48EE24((uint64_t *)&v425, 0, 1);
                sub_22E5ED9B4((_QWORD *)a1, v143, 0);
                sub_22E48F084(&v425);
                v189 = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000);
                v190 = *(_QWORD *)(a1 + 2312);
                v191 = *(_BYTE *)(a1 + 2893);
                *(_BYTE *)(a1 + 2893) = 0;
                v192 = *(_QWORD *)(a1 + 2872);
                *(_QWORD *)(a1 + 2872) = v189;
                sub_22E5E5158(a1, v188, 0, 0);
                *(_BYTE *)(a1 + 2893) = v191;
                sub_22E48B274(a1, v189, v190, 0, 0);
                *(_QWORD *)(a1 + 2872) = v192;
                v425.n128_u64[0] = 0;
                v425.n128_u64[1] = a1;
                sub_22E48EE24((uint64_t *)&v425, 0, 1);
                sub_22E5EDA70(a1);
                sub_22E48F084(&v425);
              }
            }
            sub_22E5ED9B4((_QWORD *)a1, v141, 1);
          }
LABEL_246:
          sub_22E488B4C((uint64_t)&v417);
          return;
        }
        if ((v136 & 0x700) == 0x300)
        {
          v358 = ((v136 >> 12) & 1) + ((v136 >> 13) & 1) + 1;
        }
        else
        {
          if ((v136 & 0x800) == 0)
            return;
          v358 = ((v136 >> 13) & 1) + ((v136 >> 12) & 1) + 2;
        }
        v364 = *(_QWORD *)&a2[8 * v358 + 16];
        if (v364)
        {
          v365 = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000);
          v366 = *(_QWORD *)(a1 + 2312);
          v367 = *(_BYTE *)(a1 + 2893);
          *(_BYTE *)(a1 + 2893) = 0;
          v368 = *(_QWORD *)(a1 + 2872);
          *(_QWORD *)(a1 + 2872) = v365;
          sub_22E5E5158(a1, v364, 0, 0);
          *(_BYTE *)(a1 + 2893) = v367;
          sub_22E48B274(a1, v365, v366, 0, 0);
          *(_QWORD *)(a1 + 2872) = v368;
        }
        return;
      case 0x11u:
        v126 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
        v127 = sub_22EFFA6B0(v126);
        if (*v127 == 104)
        {
          v129 = *((_QWORD *)v127 + 3);
          if (v129)
          {
            sub_22F28C650(a1, v129, &v425);
            goto LABEL_94;
          }
        }
        *(_QWORD *)&v417 = a1;
        *((_QWORD *)&v417 + 1) = a1 + 272;
        LOBYTE(v418) = 0;
        v419 = *(llvm::BasicBlock **)(v14 + 232);
        v130 = sub_22E50E974(&v417, v126, v128);
        v131 = *(_QWORD *)(a1 + 96);
        *(_QWORD *)&v417 = "addr";
        LOWORD(v420) = 259;
        v132 = sub_22E3C1740((uint64_t *)(a1 + 272), 49, v130, v131, (uint64_t)&v417);
        v133 = *(_QWORD *)(a1 + 320);
        v134 = *(_QWORD *)(sub_22F29799C(a1) + 48);
        if (v134)
          v135 = (llvm::PHINode *)(v134 - 24);
        else
          v135 = 0;
        sub_22E3C4C50(v135, v132, v133);
        sub_22E5EDA70(a1);
        return;
      case 0x14u:
        sub_22E5F6D4C(a1, (uint64_t)a2);
        return;
      case 0x15u:
        sub_22E5FE0DC(a1, (uint64_t)a2);
        return;
      case 0x16u:
        (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(v14 + 808) + 184))(*(_QWORD *)(v14 + 808), a1, *((unsigned int *)a2 + 3), 3, 1, 0);
        return;
      case 0x17u:
        sub_22F292BC8(a1, (uint64_t)a2, v13);
        return;
      case 0x18u:
        (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v14 + 808) + 416))(*(_QWORD *)(v14 + 808), a1, *((unsigned int *)a2 + 3), *((unsigned int *)a2 + 8));
        return;
      case 0x19u:
        sub_22E5FB340(a1, (uint64_t)a2, v13);
        return;
      case 0x1Au:
        sub_22F291958((_QWORD *)a1, (uint64_t)a2);
        return;
      case 0x1Cu:
        sub_22F29187C(a1, (uint64_t)a2);
        return;
      case 0x1Du:
        sub_22F2925B4(a1, (uint64_t)a2, v13);
        return;
      case 0x1Eu:
        sub_22F291C1C(a1, (uint64_t)a2);
        return;
      case 0x1Fu:
        sub_22F28F1A8(a1, (uint64_t)a2);
        return;
      case 0x20u:
        sub_22F28F26C(a1, (uint64_t)a2);
        return;
      case 0x21u:
        sub_22F28F330(a1, (uint64_t)a2);
        return;
      case 0x22u:
        sub_22E5FA69C(a1, (uint64_t)a2);
        return;
      case 0x23u:
        sub_22F28F454(a1, (uint64_t)a2);
        return;
      case 0x24u:
        sub_22F293964(a1, (uint64_t)a2);
        return;
      case 0x25u:
        sub_22F2936AC(a1, (uint64_t)a2);
        return;
      case 0x26u:
        sub_22F293784(a1, (uint64_t)a2);
        return;
      case 0x27u:
        sub_22F28FABC((_QWORD *)a1, (uint64_t)a2);
        return;
      case 0x28u:
        sub_22F28FBE4((_QWORD *)a1, (uint64_t)a2);
        return;
      case 0x2Au:
        sub_22F29385C(a1, (uint64_t)a2);
        return;
      case 0x2Bu:
        sub_22F2938E0(a1, (uint64_t)a2);
        return;
      case 0x2Cu:
        sub_22E5F7F80(a1, (uint64_t)a2);
        return;
      case 0x2Du:
        v425.n128_u64[0] = (unint64_t)a2;
        v65 = sub_22E60B270;
        goto LABEL_207;
      case 0x2Fu:
        v425.n128_u64[0] = (unint64_t)a2;
        v65 = sub_22E60296C;
        goto LABEL_207;
      case 0x30u:
        v425.n128_u64[0] = (unint64_t)a2;
        v65 = sub_22E6098D0;
        goto LABEL_207;
      case 0x31u:
        v425.n128_u64[0] = (unint64_t)a2;
        v65 = sub_22E60A284;
        goto LABEL_207;
      case 0x32u:
        v425.n128_u64[0] = (unint64_t)a2;
        v65 = sub_22E60A490;
        goto LABEL_207;
      case 0x33u:
        v425.n128_u64[0] = (unint64_t)a2;
        v65 = sub_22E609AE4;
        goto LABEL_207;
      case 0x35u:
        sub_22F2935B4((_QWORD *)a1, (uint64_t)a2);
        return;
      case 0x36u:
        sub_22F293600((_QWORD *)a1, (uint64_t)a2);
        return;
      case 0x37u:
        sub_22F292404((_QWORD *)a1, (uint64_t)a2);
        return;
      case 0x38u:
        sub_22F2924DC((_QWORD *)a1, (uint64_t)a2);
        return;
      case 0x39u:
        sub_22F292548((_QWORD *)a1, (uint64_t)a2);
        return;
      case 0x3Au:
        sub_22F292470((_QWORD *)a1, (uint64_t)a2);
        return;
      case 0x3Cu:
        sub_22E5F82B8(a1, a2);
        return;
      case 0x3Du:
        sub_22E5F844C(a1, (uint64_t)a2);
        return;
      case 0x3Eu:
        sub_22E5FB088(a1, (uint64_t)a2, v13);
        return;
      case 0x3Fu:
        sub_22F28F8EC(a1, (uint64_t)a2);
        return;
      case 0x40u:
        a3 = 0;
        a4 = 0;
        a2 = (unsigned __int8 *)*((_QWORD *)a2 + 4);
        continue;
      case 0x41u:
        sub_22F291CE0(a1, (uint64_t)a2);
        return;
      case 0x42u:
        sub_22F28D050(a1, (uint64_t)a2, v13);
        return;
      case 0x43u:
        sub_22F28FD0C(a1, (uint64_t)a2);
        return;
      case 0x44u:
        sub_22F28FDB4(a1, (uint64_t)a2);
        return;
      case 0x45u:
        sub_22E5FBFA0(a1, (uint64_t)a2);
        return;
      case 0x46u:
        sub_22F28F730((_QWORD *)a1, (uint64_t)a2);
        return;
      case 0x47u:
        sub_22E5FA8AC(a1, (uint64_t)a2);
        return;
      case 0x48u:
        sub_22E5FAD14(a1, (uint64_t)a2);
        return;
      case 0x49u:
        sub_22F292D8C(a1, (uint64_t)a2);
        return;
      case 0x4Au:
        v425.n128_u64[0] = (unint64_t)a2;
        v65 = sub_22E60936C;
        goto LABEL_207;
      case 0x4Bu:
      case 0x4Cu:
      case 0x50u:
        sub_22F292F04(a1, (uint64_t)a2);
        return;
      case 0x4Du:
        v425.n128_u64[0] = (unint64_t)a2;
        v65 = sub_22E60AFB8;
        goto LABEL_207;
      case 0x4Eu:
        v425.n128_u64[0] = (unint64_t)a2;
        v65 = sub_22E60B0F4;
        goto LABEL_207;
      case 0x4Fu:
        v425.n128_u64[0] = (unint64_t)a2;
        v65 = sub_22E6096BC;
LABEL_207:
        *(_QWORD *)&v417 = &v425;
        *((_QWORD *)&v417 + 1) = v65;
        v418 = 0;
        sub_22E5F89B0(a1, (uint64_t)a2, (uint64_t)&v417);
        return;
      case 0x51u:
        sub_22F2912FC((_QWORD *)a1, (uint64_t)a2);
        return;
      case 0x52u:
        sub_22F2917B8(a1, (uint64_t)a2);
        return;
      case 0x53u:
        sub_22F2915BC(a1, (uint64_t)a2);
        return;
      case 0x54u:
        (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v14 + 808) + 152))(*(_QWORD *)(v14 + 808), a1, *((unsigned int *)a2 + 3));
        return;
      case 0x55u:
        sub_22F292284((_QWORD *)a1, (uint64_t)a2);
        return;
      case 0x58u:
        sub_22F2730D0(a1, (uint64_t)a2);
        return;
      case 0x59u:
        sub_22F273078(a1, (uint64_t)a2);
        return;
      case 0x5Au:
        sub_22F273024(a1, (uint64_t)a2);
        return;
      case 0x5Bu:
        sub_22F2741CC(a1, (uint64_t)a2);
        return;
      case 0x5Cu:
        sub_22E56211C();
        return;
      case 0x5Du:
        sub_22E5E919C(a1, (uint64_t)a2, a3, a4);
        return;
      case 0x61u:
        sub_22F25D734(a1, (uint64_t)a2);
        return;
      case 0x64u:
        v66 = *(_OWORD *)(a1 + 4032);
        v416.n128_u32[0] = 1;
        v415 = 0;
        v416.n128_u8[4] = 0;
        v67 = a2 + 24;
        v397 = *(_OWORD *)(a1 + 4048);
        v401 = v66;
        v68 = sub_22E61F468(a1, *(_QWORD *)&a2[8 * (HIBYTE(*(unsigned __int16 *)a2) & 1) + 24 + 8 * ((*(unsigned __int16 *)a2 >> 9) & 1)], (uint64_t)&v415, 0);
        v69 = *(_QWORD *)(a1 + 144);
        if (!v68)
          goto LABEL_295;
        *(_QWORD *)&v417 = &v418;
        *((_QWORD *)&v417 + 1) = 0x400000000;
        v70 = (unsigned __int8 **)*((_QWORD *)a2 + 1);
        if (!v70)
          goto LABEL_126;
        v71 = 0;
        v72 = *(_QWORD *)(v69 + 144);
        while (1)
        {
          if (*(_BYTE *)v70 == 99)
            v73 = (unsigned __int8 *)v70;
          else
            v73 = 0;
          if (v73)
          {
            v71 = v73;
          }
          else
          {
            v74 = *(unsigned __int16 *)v70;
            if ((v74 & 0x100) != 0 && v70[((v74 >> 8) & 1) + 3])
              goto LABEL_293;
            sub_22F007D7C(v70[3], v72, 0, (uint64_t)&v425);
            if (v425.n128_u32[2] > 0x40)
            {
              v75 = llvm::APInt::equalSlowCase((llvm::APInt *)&v425, (const llvm::APInt *)&v415);
              if (v425.n128_u64[0])
                MEMORY[0x2348A0E84](v425.n128_u64[0], 0x1000C8000313F17);
              if ((v75 & 1) != 0)
              {
LABEL_287:
                v71 = (unsigned __int8 *)v70;
LABEL_288:
                v425.n128_u8[0] = 0;
                if (sub_22E5EF58C((unsigned __int8 *)v67[((*(unsigned __int16 *)a2 >> 9) & 1)+ 1+ (HIBYTE(*(unsigned __int16 *)a2) & 1u)], v71, &v425, (uint64_t)&v417))v233 = v425.n128_u8[0] == 0;
                else
                  v233 = 1;
                if (!v233)
                {
                  sub_22E3CB7B0((_QWORD *)a1, (uint64_t)v71, 0);
                  goto LABEL_364;
                }
LABEL_293:
                if ((uint64_t *)v417 != &v418)
                  free((void *)v417);
LABEL_295:
                LOWORD(v420) = 261;
                *(_QWORD *)&v417 = "sw.epilog";
                *((_QWORD *)&v417 + 1) = 9;
                v234 = operator new();
                llvm::BasicBlock::BasicBlock();
                v236 = *(_QWORD *)(a1 + 2008);
                v237 = *(_DWORD *)(a1 + 2640);
                *(_DWORD *)(a1 + 2640) = v237 + 1;
                v386 = *(_QWORD *)(a1 + 2312);
                v389 = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000);
                v238 = *(_BYTE *)(a1 + 2893);
                *(_BYTE *)(a1 + 2893) = 0;
                v239 = *(_QWORD *)(a1 + 2872);
                *(_QWORD *)(a1 + 2872) = v389;
                v240 = *(unsigned __int16 *)a2;
                v392 = v239;
                if ((v240 & 0x100) != 0 && *v67)
                {
                  sub_22E5E5158(a1, *v67, 0, 0);
                  v240 = *(unsigned __int16 *)a2;
                }
                v394 = (_QWORD *)v234;
                v383 = v238;
                v381 = v236;
                if ((v240 & 0x200) != 0)
                {
                  v363 = v67[(v240 >> 8) & 1];
                  if (v363)
                  {
                    v370 = *(_QWORD *)(v363 + 8);
                    if (v370)
                    {
                      sub_22E4C6274(a1, v370);
                      v240 = *(unsigned __int16 *)a2;
                    }
                  }
                }
                v241 = v67[((v240 >> 8) & 1) + ((v240 >> 9) & 1)];
                *(_QWORD *)&v417 = a1;
                *((_QWORD *)&v417 + 1) = a1 + 272;
                LOBYTE(v418) = 0;
                v419 = *(llvm::BasicBlock **)(*(_QWORD *)(a1 + 144) + 232);
                v242 = sub_22E50E974(&v417, v241, v235);
                *(_QWORD *)&v417 = "sw.default";
                LOWORD(v420) = 259;
                v243 = (_QWORD *)operator new();
                llvm::BasicBlock::BasicBlock();
                v244 = llvm::User::operator new((llvm::User *)0x40);
                MEMORY[0x23489C204](v244, v242, v243, 10, 0);
                LOWORD(v420) = 257;
                *(_QWORD *)(a1 + 4032) = sub_22E3C12C8((uint64_t *)(a1 + 272), v244, (uint64_t)&v417);
                if (*(_QWORD *)(a1 + 3992) == *(_QWORD *)(a1 + 4000))
                {
                  v250 = a2 + 24;
                  v252 = v392;
                  v251 = v394;
                  v253 = v386;
                  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 184) + 33) & 0x18) != 0)
                  {
                    v254 = operator new();
                    *(_DWORD *)(v254 + 16) = 0;
                    *(_QWORD *)v254 = v254 + 16;
                    *(_QWORD *)(a1 + 4048) = v254;
                    *(_QWORD *)(v254 + 8) = 0x1000000001;
                  }
                }
                else
                {
                  v245 = *((_QWORD *)a2 + 1);
                  if (v245)
                  {
                    v246 = 0;
                    v247 = 0;
                    do
                    {
                      if (*(_BYTE *)v245 == 99)
                      {
                        v248 = sub_22E3CF180(v8, v245);
                        if (v249)
                          v247 = v248;
                        else
                          v247 = 0;
                      }
                      ++v246;
                      v245 = *(_QWORD *)(v245 + 16);
                    }
                    while (v245);
                  }
                  else
                  {
                    v247 = 0;
                    v246 = 0;
                  }
                  v255 = operator new();
                  *(_QWORD *)v255 = v255 + 16;
                  *(_QWORD *)(v255 + 8) = 0x1000000000;
                  *(_QWORD *)(a1 + 4040) = v255;
                  if (v246 < 0x11)
                  {
                    v256 = 0;
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v255 = *(_QWORD *)(a1 + 4040);
                    v256 = *(_DWORD *)(v255 + 8);
                    if (v256 >= *(_DWORD *)(v255 + 12))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                      v256 = *(_DWORD *)(v255 + 8);
                    }
                  }
                  v250 = a2 + 24;
                  *(_QWORD *)(*(_QWORD *)v255 + 8 * v256) = v247;
                  ++*(_DWORD *)(v255 + 8);
                  v252 = v392;
                  v251 = v394;
                  v253 = v386;
                }
                *(_QWORD *)(a1 + 4056) = v243;
                v257 = (_QWORD *)(a1 + 3040);
                *v9 = 0;
                v9[1] = 0;
                v258 = *(_DWORD *)(a1 + 3048);
                if (v258)
                {
                  v259 = *v257 + 48 * v258;
                  v260 = *(llvm::BasicBlock **)(v259 - 24);
                  v261 = *(_QWORD *)(v259 - 16);
                  v262 = *(_DWORD *)(v259 - 8);
                }
                else
                {
                  v260 = 0;
                  v262 = 0;
                  v261 = -1;
                }
                *(_QWORD *)&v417 = v251;
                *((_QWORD *)&v417 + 1) = v381;
                LODWORD(v418) = v237;
                v419 = v260;
                v420 = v261;
                LODWORD(v421) = v262;
                v263 = (_OWORD *)sub_22E566D28((uint64_t)v257, (unint64_t)&v417, 1);
                v264 = (_OWORD *)(*(_QWORD *)(a1 + 3040) + 48 * *(unsigned int *)(a1 + 3048));
                v266 = v263[1];
                v265 = v263[2];
                *v264 = *v263;
                v264[1] = v266;
                v264[2] = v265;
                ++*(_DWORD *)(a1 + 3048);
                sub_22E5E5158(a1, *(_QWORD *)&v250[8 * ((*(unsigned __int16 *)a2 >> 9) & 1)+ 8+ 8 * (HIBYTE(*(unsigned __int16 *)a2) & 1)], 0, 0);
                --*(_DWORD *)(a1 + 3048);
                v267 = *(_QWORD *)(a1 + 4032);
                v268 = *(_QWORD *)(a1 + 4056);
                v269 = *(_DWORD *)(v267 + 20);
                if ((v269 & 0x40000000) != 0)
                  v270 = *(_QWORD *)(v267 - 8);
                else
                  v270 = v267 - 32 * (v269 & 0x7FFFFFF);
                v271 = (_QWORD *)(v270 + 32);
                if (*(_QWORD *)(v270 + 32))
                {
                  **(_QWORD **)(v270 + 48) = *(_QWORD *)(v270 + 40);
                  v301 = *(_QWORD *)(v270 + 40);
                  if (v301)
                    *(_QWORD *)(v301 + 16) = *(_QWORD *)(v270 + 48);
                }
                *v271 = v268;
                if (v268)
                {
                  v274 = *(_QWORD *)(v268 + 8);
                  v272 = (_QWORD *)(v268 + 8);
                  v273 = v274;
                  *(_QWORD *)(v270 + 40) = v274;
                  if (v274)
                    *(_QWORD *)(v273 + 16) = v270 + 40;
                  *(_QWORD *)(v270 + 48) = v272;
                  *v272 = v271;
                }
                if (!v243[7])
                {
                  if (*(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000) == v389)
                  {
                    llvm::Value::replaceAllUsesWith();
                    v275 = MEMORY[0x23489C078](v243);
                    MEMORY[0x2348A0E9C](v275, 0x1020C4012B667A0);
                  }
                  else
                  {
                    sub_22E5ED9B4((_QWORD *)a1, v243, 0);
                  }
                }
                *(_BYTE *)(a1 + 2893) = v383;
                sub_22E48B274(a1, v389, v253, 0, 0);
                *(_QWORD *)(a1 + 2872) = v252;
                sub_22E5ED9B4((_QWORD *)a1, v251, 1);
                sub_22E3CB7B0((_QWORD *)a1, (uint64_t)a2, 0);
                v276 = *(_BYTE **)&v250[8 * (HIBYTE(*(unsigned __int16 *)a2) & 1)
                                      + 8 * ((*(unsigned __int16 *)a2 >> 9) & 1)];
                if ((*v276 + 113) >= 0xFBu
                  && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 184) + 33) & 0x18) != 0)
                {
                  v277 = sub_22EFFA604(*(unsigned __int8 **)&v276[v276[3]]);
                  if (v277)
                  {
                    if ((*(_DWORD *)(v277 + 28) & 0x7Eu) - 52 <= 5 && sub_22EFC01DC(v277, 0) == 498)
                    {
                      *(_QWORD *)&v417 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
                      llvm::MDBuilder::createUnpredictable((llvm::MDBuilder *)&v417);
                      llvm::Instruction::setMetadata();
                    }
                  }
                }
                v278 = *(_QWORD *)(a1 + 4040);
                if (v278)
                {
                  v279 = *(unsigned int *)(v278 + 8);
                  if (v279 < 2
                    || (sub_22F29E498(a1, *(unint64_t **)v278, v279),
                        llvm::Instruction::setMetadata(),
                        (v278 = *(_QWORD *)(a1 + 4040)) != 0))
                  {
                    if (*(_QWORD *)v278 != v278 + 16)
                      free(*(void **)v278);
                    MEMORY[0x2348A0E9C](v278, 0x1080C40F47FB52ALL);
                  }
                  goto LABEL_341;
                }
                v281 = *(_QWORD *)(a1 + 4048);
                if (!v281)
                  goto LABEL_341;
                v282 = *(unsigned int *)(v281 + 8);
                if (v282 < 2)
                  goto LABEL_363;
                v283 = 0;
                v284 = 0;
                v285 = 0;
                v286 = *(int **)v281;
                v287 = 4 * v282;
                v288 = 4 * v282;
                v289 = v286;
                do
                {
                  v291 = *v289++;
                  v290 = v291;
                  if (v291 == -1)
                    v292 = v283 + 1;
                  else
                    v292 = v283;
                  if (v290)
                    v293 = v284;
                  else
                    v293 = v284 + 1;
                  if (!v290)
                    v292 = v283;
                  if (v290 == 1)
                    ++v285;
                  else
                    v284 = v293;
                  if (v290 != 1)
                    v283 = v292;
                  v288 -= 4;
                }
                while (v288);
                if (!(v283 | v285))
                {
LABEL_363:
                  LOBYTE(v417) = 0;
                  v424 = 0;
                  goto LABEL_482;
                }
                v305 = 0x7FFFFFFFuLL / (v285 + 2);
                v425.n128_u64[0] = (unint64_t)v426;
                v306 = 0x1000000000;
                v425.n128_u64[1] = 0x1000000000;
                v307 = v305 / (v284 + 1);
                if (v282 > 0x10)
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v306 = 0x1000000000;
                }
                while (2)
                {
                  v329 = *v286;
                  if (*v286 == 1)
                  {
                    v331 = v425.n128_u32[2];
                    v332 = v425.n128_u32[3];
                    v330 = v305;
                  }
                  else
                  {
                    if (v329)
                    {
                      if (v329 == -1)
                      {
                        v330 = 0;
                        v331 = v425.n128_u32[2];
                        v332 = v425.n128_u32[3];
                        break;
                      }
LABEL_477:
                      ++v286;
                      v287 -= 4;
                      if (!v287)
                      {
                        *(_QWORD *)&v417 = &v418;
                        *((_QWORD *)&v417 + 1) = v306;
                        if (v425.n128_u32[2])
                          sub_22F24C77C((uint64_t)&v417, (uint64_t)&v425);
                        v424 = 1;
                        if ((_QWORD *)v425.n128_u64[0] == v426 || (free((void *)v425.n128_u64[0]), v424))
                        {
                          sub_22F29E498(a1, (unint64_t *)v417, DWORD2(v417));
                          llvm::Instruction::setMetadata();
                        }
LABEL_482:
                        v333 = *(void ***)(a1 + 4048);
                        if (v333)
                        {
                          if (*v333 != v333 + 2)
                            free(*v333);
                          MEMORY[0x2348A0E9C](v333, 0x1080C4014AC8D4BLL);
                        }
                        if (v424)
                        {
                          if ((uint64_t *)v417 != &v418)
                            free((void *)v417);
                          v424 = 0;
                        }
LABEL_341:
                        *(_OWORD *)(a1 + 4032) = v401;
                        *(_OWORD *)(a1 + 4048) = v397;
LABEL_342:
                        if (v416.n128_u32[0] < 0x41)
                          return;
                        v280 = v415;
                        if (!v415)
                          return;
LABEL_509:
                        MEMORY[0x2348A0E84](v280, 0x1000C8000313F17);
                        return;
                      }
                      continue;
                    }
                    v331 = v425.n128_u32[2];
                    v332 = v425.n128_u32[3];
                    v330 = v307;
                  }
                  break;
                }
                if (v331 >= v332)
                {
                  v395 = v306;
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v306 = v395;
                  v331 = v425.n128_u32[2];
                }
                *(_QWORD *)(v425.n128_u64[0] + 8 * v331) = v330;
                ++v425.n128_u32[2];
                goto LABEL_477;
              }
            }
            else if ((const char *)v425.n128_u64[0] == v415)
            {
              goto LABEL_287;
            }
          }
          v70 = (unsigned __int8 **)v70[2];
          if (!v70)
          {
            if (v71)
              goto LABEL_288;
LABEL_126:
            if ((sub_22E61F04C((uint64_t)a2, 0) & 1) == 0)
            {
LABEL_364:
              v294 = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000);
              v295 = *(_QWORD *)(a1 + 2312);
              v296 = *(_BYTE *)(a1 + 2893);
              *(_BYTE *)(a1 + 2893) = 0;
              v297 = *(_QWORD *)(a1 + 2872);
              *(_QWORD *)(a1 + 2872) = v294;
              v298 = *(unsigned __int16 *)a2;
              if ((v298 & 0x100) != 0 && *v67)
              {
                sub_22E5E5158(a1, *v67, 0, 0);
                v298 = *(unsigned __int16 *)a2;
              }
              if ((v298 & 0x200) != 0)
              {
                v371 = v67[(v298 >> 8) & 1];
                if (v371)
                {
                  v372 = *(_QWORD *)(v371 + 8);
                  if (v372)
                    sub_22E4C6274(a1, v372);
                }
              }
              *(_QWORD *)(a1 + 4032) = 0;
              if (DWORD2(v417))
              {
                v299 = 0;
                v300 = 8 * DWORD2(v417);
                do
                {
                  sub_22E5E5158(a1, *(_QWORD *)(v417 + v299), 0, 0);
                  v299 += 8;
                }
                while (v300 != v299);
              }
              sub_22E3CB7B0((_QWORD *)a1, (uint64_t)a2, 0);
              *(_QWORD *)(a1 + 4032) = v401;
              *(_BYTE *)(a1 + 2893) = v296;
              sub_22E48B274(a1, v294, v295, 0, 0);
              *(_QWORD *)(a1 + 2872) = v297;
              if ((uint64_t *)v417 != &v418)
                free((void *)v417);
              goto LABEL_342;
            }
            goto LABEL_293;
          }
        }
      case 0x66u:
      case 0x67u:
      case 0x68u:
      case 0x69u:
      case 0x6Au:
      case 0x6Bu:
      case 0x6Cu:
      case 0x6Du:
      case 0x6Eu:
      case 0x6Fu:
      case 0x70u:
      case 0x71u:
      case 0x72u:
      case 0x73u:
      case 0x74u:
      case 0x75u:
      case 0x76u:
      case 0x77u:
      case 0x78u:
      case 0x79u:
      case 0x7Au:
      case 0x7Bu:
      case 0x7Cu:
      case 0x7Du:
      case 0x7Eu:
      case 0x7Fu:
      case 0x80u:
      case 0x81u:
      case 0x82u:
      case 0x83u:
      case 0x84u:
      case 0x85u:
      case 0x86u:
      case 0x87u:
      case 0x88u:
      case 0x89u:
      case 0x8Au:
      case 0x8Bu:
      case 0x8Cu:
      case 0x8Du:
      case 0x8Eu:
      case 0x8Fu:
      case 0x90u:
      case 0x91u:
      case 0x92u:
      case 0x93u:
      case 0x94u:
      case 0x95u:
      case 0x96u:
      case 0x97u:
      case 0x98u:
      case 0x99u:
      case 0x9Au:
      case 0x9Bu:
      case 0x9Cu:
      case 0x9Du:
      case 0x9Eu:
      case 0x9Fu:
      case 0xA0u:
      case 0xA1u:
      case 0xA2u:
      case 0xA3u:
      case 0xA4u:
      case 0xA5u:
      case 0xA6u:
      case 0xA7u:
      case 0xA8u:
      case 0xA9u:
      case 0xAAu:
      case 0xABu:
      case 0xACu:
      case 0xADu:
      case 0xAEu:
      case 0xAFu:
      case 0xB0u:
      case 0xB1u:
      case 0xB2u:
      case 0xB3u:
      case 0xB4u:
      case 0xB5u:
      case 0xB6u:
      case 0xB7u:
      case 0xB8u:
      case 0xB9u:
      case 0xBAu:
      case 0xBBu:
      case 0xBCu:
      case 0xBDu:
      case 0xBEu:
      case 0xBFu:
      case 0xC0u:
      case 0xC1u:
      case 0xC2u:
      case 0xC3u:
      case 0xC4u:
      case 0xC5u:
      case 0xC6u:
      case 0xC7u:
      case 0xC8u:
      case 0xC9u:
      case 0xCAu:
      case 0xCBu:
      case 0xCCu:
      case 0xCDu:
      case 0xCEu:
      case 0xCFu:
      case 0xD0u:
      case 0xD1u:
      case 0xD2u:
      case 0xD3u:
      case 0xD4u:
      case 0xD5u:
      case 0xD6u:
      case 0xD7u:
      case 0xD8u:
      case 0xD9u:
      case 0xDAu:
      case 0xDBu:
      case 0xDCu:
      case 0xDDu:
      case 0xDEu:
      case 0xDFu:
      case 0xE0u:
      case 0xE1u:
      case 0xE2u:
      case 0xE3u:
      case 0xE4u:
      case 0xE5u:
      case 0xE6u:
      case 0xE7u:
      case 0xE8u:
      case 0xE9u:
      case 0xEAu:
        sub_22E4CC844(&v417, (__n128 *)(a1 + 5856), a3, a4, (uint64_t)a2);
        v17 = *(llvm::BasicBlock **)(a1 + 320);
        sub_22E4D89CC(a1);
        v18 = *(llvm::BasicBlock **)(a1 + 320);
        if (v17 != v18 && !*((_QWORD *)v18 + 1))
        {
          llvm::BasicBlock::eraseFromParent(v18);
          *v9 = 0;
          v9[1] = 0;
        }
        sub_22E4CDB5C((uint64_t)&v417);
        return;
      case 0xECu:
        sub_22E5E501C((_QWORD *)a1, MEMORY[0x24BE38868], 0, *((_DWORD *)a2 + 1));
        LOWORD(v420) = 261;
        *(_QWORD *)&v417 = "while.cond";
        *((_QWORD *)&v417 + 1) = 10;
        v393 = (llvm::BasicBlock *)operator new();
        llvm::BasicBlock::BasicBlock();
        v144 = *(_QWORD *)(a1 + 2008);
        v145 = *(_DWORD *)(a1 + 2640);
        *(_DWORD *)(a1 + 2640) = v145 + 1;
        sub_22E5ED9B4((_QWORD *)a1, v393, 0);
        LOWORD(v420) = 261;
        *(_QWORD *)&v417 = "while.end";
        *((_QWORD *)&v417 + 1) = 9;
        v146 = operator new();
        llvm::BasicBlock::BasicBlock();
        v147 = *(_QWORD *)(a1 + 2008);
        v148 = *(_DWORD *)(a1 + 2640);
        *(_DWORD *)(a1 + 2640) = v148 + 1;
        v391 = (_QWORD *)v146;
        *(_QWORD *)&v417 = v146;
        *((_QWORD *)&v417 + 1) = v147;
        v379 = v147;
        v378 = v148;
        LODWORD(v418) = v148;
        v419 = v393;
        v420 = v144;
        LODWORD(v421) = v145;
        v149 = (_OWORD *)sub_22E566D28(a1 + 3040, (unint64_t)&v417, 1);
        v150 = (_OWORD *)(*(_QWORD *)(a1 + 3040) + 48 * *(unsigned int *)(a1 + 3048));
        v152 = v149[1];
        v151 = v149[2];
        *v150 = *v149;
        v150[1] = v152;
        v150[2] = v151;
        ++*(_DWORD *)(a1 + 3048);
        v153 = a2 + 16;
        sub_22F0D5A50(*(_QWORD *)&a2[8 * (((unint64_t)*(unsigned __int16 *)a2 >> 8) & 1) + 16]);
        sub_22E5E501C((_QWORD *)a1, MEMORY[0x24BE38880], 0, v154);
        v155 = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000);
        v156 = *(_QWORD *)(a1 + 2312);
        v157 = *(_BYTE *)(a1 + 2893);
        *(_BYTE *)(a1 + 2893) = 0;
        v158 = *(_QWORD *)(a1 + 2872);
        v399 = v155;
        *(_QWORD *)(a1 + 2872) = v155;
        v159 = *(unsigned __int16 *)a2;
        v385 = v158;
        v388 = a2 + 16;
        v382 = v156;
        v380 = v157;
        if ((v159 & 0x100) != 0)
        {
          if (*(_QWORD *)v153)
          {
            v369 = *(_QWORD *)(*(_QWORD *)v153 + 8);
            v153 = a2 + 16;
            if (v369)
            {
              sub_22E4C6274(a1, v369);
              v159 = *(unsigned __int16 *)a2;
            }
          }
          else
          {
            v153 = a2 + 16;
          }
        }
        v160 = sub_22E4D86E0((_QWORD *)a1, *(_QWORD *)&v153[8 * ((v159 >> 8) & 1)]);
        sub_22F0D60E4(*(_QWORD *)&v153[8 * (((unint64_t)*(unsigned __int16 *)a2 >> 8) & 1)]);
        sub_22E5E501C((_QWORD *)a1, MEMORY[0x24BE38870], 0, v161);
        if (*((_BYTE *)v160 + 16) == 16)
          v162 = v160;
        else
          v162 = 0;
        if (v162)
        {
          v163 = (llvm::Value *)((char *)v162 + 24);
          v164 = *((_DWORD *)v162 + 8);
          if (v164 > 0x40)
            v165 = llvm::APInt::countLeadingZerosSlowCase(v163) == v164 - 1;
          else
            v165 = *(_QWORD *)v163 == 1;
          v193 = v165;
          v175 = v193 ^ 1;
        }
        else
        {
          v175 = 1;
        }
        v403 = v175;
        sub_22F0D4E74((uint64_t)a2);
        v195 = v194;
        v196 = *(_QWORD *)(a1 + 144);
        v197 = *(_QWORD *)(v196 + 144);
        v198 = *(_QWORD *)(v196 + 184);
        v199 = *(unsigned __int8 *)(a1 + 2892);
        if (!*(_BYTE *)(a1 + 2892) && (v200 = *(_QWORD *)(a1 + 2880)) != 0)
        {
          v377 = HIDWORD(v195);
          sub_22F257BAC(v200, v195, &v417);
          HIDWORD(v195) = v377;
          if (*(_BYTE *)(a1 + 2892))
            goto LABEL_256;
        }
        else
        {
          *(_QWORD *)&v417 = 0;
          if (v199)
            goto LABEL_256;
        }
        v201 = *(_QWORD *)(a1 + 2880);
        if (v201)
        {
          sub_22F257BAC(v201, SHIDWORD(v195), &v425);
LABEL_257:
          v202 = sub_22E5EDBF8(*(_QWORD *)(a1 + 144), v162 != 0);
          v203 = v393;
          sub_22E5241F0(a1 + 168, v393, v197, v198, a3, a4, (uint64_t *)&v417, (uint64_t *)&v425, v202);
          if (v425.n128_u64[0])
            llvm::MetadataTracking::untrack();
          v205 = a2 + 16;
          v204 = v391;
          if ((_QWORD)v417)
            llvm::MetadataTracking::untrack();
          *(_QWORD *)&v417 = "while.body";
          LOWORD(v420) = 259;
          v206 = (_QWORD *)operator new();
          llvm::BasicBlock::BasicBlock();
          if (v403)
          {
            v207 = v391;
            if (*(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000) != v399)
            {
              *(_QWORD *)&v417 = "while.exit";
              LOWORD(v420) = 259;
              v207 = (_QWORD *)operator new();
              llvm::BasicBlock::BasicBlock();
            }
            v208 = ((unint64_t)*(unsigned __int16 *)a2 >> 8) & 1;
            v209 = *(_QWORD *)&v388[8 * v208];
            v210 = sub_22E3CF180(v8, *(_QWORD *)&v388[8 * (v208 + 1)]);
            if (v211)
              v212 = v210;
            else
              v212 = 0;
            v213 = sub_22E659D60(a1, v209, v212);
            if (!v213 && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 184) + 33) & 0x18) != 0)
            {
              v214 = sub_22F0D4664(*(_BYTE **)&v388[8 * (((unint64_t)*(unsigned __int16 *)a2 >> 8) & 1) + 8]);
              v160 = sub_22E6200EC(a1, v160, v214);
            }
            sub_22E3D26FC((uint64_t *)(a1 + 272), (uint64_t)v160, (uint64_t)v206, (uint64_t)v207, v213, 0);
            if (v207 != v391)
            {
              sub_22E5ED9B4((_QWORD *)a1, v207, 0);
              *(_QWORD *)&v417 = v391;
              *((_QWORD *)&v417 + 1) = v379;
              LODWORD(v418) = v378;
              sub_22E48BA00((_QWORD *)a1, (uint64_t)&v417);
            }
          }
          else
          {
            v302 = sub_22F3F18CC(*(_BYTE **)&v388[8 * (((unint64_t)*(unsigned __int16 *)a2 >> 8) & 1) + 8]);
            if (v302)
            {
              v303 = v302;
              v304 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 208);
              *(_DWORD *)(v304 + 312) = *(_QWORD *)(v302 + 16);
              *(_DWORD *)(v304 + 316) = 6259;
              if (*(char *)(v304 + 311) < 0)
              {
                **(_BYTE **)(v304 + 288) = 0;
                *(_QWORD *)(v304 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v304 + 288) = 0;
                *(_BYTE *)(v304 + 311) = 0;
              }
              v308 = (unsigned __int8 *)(v304 + 320);
              v417 = (unint64_t)(v304 + 320);
              v418 = v304;
              LOWORD(v419) = 1;
              *(_BYTE *)(v304 + 320) = 0;
              *(_DWORD *)(v304 + 664) = 0;
              v309 = *(unsigned int *)(v304 + 776);
              if ((_DWORD)v309)
              {
                v310 = *(_QWORD *)(v304 + 768);
                v311 = 56 * v309;
                do
                {
                  if (*(char *)(v310 + v311 - 9) < 0)
                    operator delete(*(void **)(v310 + v311 - 32));
                  v311 -= 56;
                }
                while (v311);
                LODWORD(v309) = *v308;
              }
              *(_DWORD *)(v304 + 776) = 0;
              v308[v309 + 1] = 15;
              *(_BYTE *)(v304 + 320) = v309 + 1;
              *(_QWORD *)&v308[8 * v309 + 16] = v303;
              sub_22E4D6448(v304 + 656, *(_QWORD *)(v303 + 16), 1);
              sub_22E3BB0B8((uint64_t)&v417);
              v312 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 208);
              *(_DWORD *)(v312 + 312) = *((_DWORD *)a2 + 1);
              *(_DWORD *)(v312 + 316) = 5454;
              if (*(char *)(v312 + 311) < 0)
              {
                **(_BYTE **)(v312 + 288) = 0;
                *(_QWORD *)(v312 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v312 + 288) = 0;
                *(_BYTE *)(v312 + 311) = 0;
              }
              v417 = (unint64_t)(v312 + 320);
              v418 = v312;
              LOWORD(v419) = 1;
              *(_BYTE *)(v312 + 320) = 0;
              *(_DWORD *)(v312 + 664) = 0;
              v313 = *(unsigned int *)(v312 + 776);
              if ((_DWORD)v313)
              {
                v314 = *(_QWORD *)(v312 + 768);
                v315 = 56 * v313;
                do
                {
                  if (*(char *)(v314 + v315 - 9) < 0)
                    operator delete(*(void **)(v314 + v315 - 32));
                  v315 -= 56;
                }
                while (v315);
              }
              *(_DWORD *)(v312 + 776) = 0;
              sub_22E4D6448(v312 + 656, *((unsigned int *)a2 + 1) | ((unint64_t)*((unsigned int *)a2 + 3) << 32), 1);
              sub_22E3BB0B8((uint64_t)&v417);
              v204 = v391;
              v203 = v393;
              v205 = a2 + 16;
            }
          }
          v215 = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000);
          v216 = *(_QWORD *)(a1 + 2312);
          v217 = *(_BYTE *)(a1 + 2893);
          *(_BYTE *)(a1 + 2893) = 0;
          v218 = *(_QWORD *)(a1 + 2872);
          *(_QWORD *)(a1 + 2872) = v215;
          sub_22E5ED9B4((_QWORD *)a1, v206, 0);
          sub_22F0D5A50(*(_QWORD *)&v205[8 * (((unint64_t)*(unsigned __int16 *)a2 >> 8) & 1) + 8]);
          sub_22E5E501C((_QWORD *)a1, MEMORY[0x24BE38850], 0, v219);
          sub_22E3CB7B0((_QWORD *)a1, (uint64_t)a2, 0);
          sub_22E5E5158(a1, *(_QWORD *)&v205[8 * (((unint64_t)*(unsigned __int16 *)a2 >> 8) & 1) + 8], 0, 0);
          sub_22F0D60E4(*(_QWORD *)&v205[8 * (((unint64_t)*(unsigned __int16 *)a2 >> 8) & 1) + 8]);
          sub_22E5E501C((_QWORD *)a1, MEMORY[0x24BE38840], 0, v220);
          *(_BYTE *)(a1 + 2893) = v217;
          sub_22E48B274(a1, v215, v216, 0, 0);
          *(_QWORD *)(a1 + 2872) = v218;
          --*(_DWORD *)(a1 + 3048);
          *(_BYTE *)(a1 + 2893) = v380;
          sub_22E48B274(a1, v399, v382, 0, 0);
          *(_QWORD *)(a1 + 2872) = v385;
          sub_22E5E5100(a1, (uint64_t)a2);
          sub_22E5EDA70(a1);
          sub_22E523D50(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * *(unsigned int *)(a1 + 232) - 8));
          sub_22E5244E0(a1 + 224);
          sub_22E5ED9B4((_QWORD *)a1, v204, 1);
          sub_22F0D60E4(*(_QWORD *)&v205[8 * (((unint64_t)*(unsigned __int16 *)a2 >> 8) & 1) + 8]);
          sub_22E5E501C((_QWORD *)a1, MEMORY[0x24BE38828], 0, v221);
          if ((v403 & 1) == 0)
            sub_22F28C598(a1, v203);
          return;
        }
LABEL_256:
        v425.n128_u64[0] = 0;
        goto LABEL_257;
      default:
        return;
    }
  }
}

uint64_t sub_22E5E919C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  _OWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  __n128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  llvm::Value *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  __int128 v48;
  _BOOL8 v49;
  int v50;
  __int128 v51;
  uint64_t v52;
  _OWORD v53[3];
  uint64_t v54;
  char v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  _OWORD v68[3];
  _OWORD v69[3];
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _QWORD v73[3];
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  _OWORD v79[2];
  _OWORD v80[3];
  _OWORD v81[2];
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86[2];
  uint64_t v87;

  if (sub_22E61A8AC(a1))
  {
    sub_22E4DE978(a1, *(_DWORD *)(a2 + 4));
    v40 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x58);
    LOWORD(v72) = 257;
    v41 = llvm::GlobalVariable::GlobalVariable();
    *(_DWORD *)(v41 + 32) = *(_DWORD *)(v41 + 32) & 0xFFFFFF3F | 0x80;
    sub_22F2A2EA8(*(uint64_t **)(*(_QWORD *)(a1 + 144) + 3480), v40);
    v42 = *(_QWORD *)(a1 + 96);
    LOWORD(v72) = 257;
    v43 = sub_22E3C1740((uint64_t *)(a1 + 272), 49, (uint64_t)v40, v42, (uint64_t)&v70);
    v44 = *(_OWORD *)(a1 + 5928);
    v80[0] = *(_OWORD *)(a1 + 5912);
    v80[1] = v44;
    v80[2] = *(_OWORD *)(a1 + 5944);
    sub_22E3BEDDC(a1 + 272, v43, v80, 0);
  }
  if (*(_BYTE *)(a1 + 1896))
  {
    sub_22F24866C(a1 + 272);
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 328) = 0;
  }
  v8 = *(unsigned __int8 **)(a2 + 8);
  sub_22E4CC844(v79, (__n128 *)(a1 + 5856), a3, a4, (uint64_t)v8);
  v9 = *(_QWORD *)(a1 + 1832);
  *(_QWORD *)(a1 + 1832) = v8;
  v10 = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000);
  v11 = *(_QWORD *)(a1 + 2312);
  v12 = *(_BYTE *)(a1 + 2893);
  *(_BYTE *)(a1 + 2893) = 0;
  v13 = *(_QWORD *)(a1 + 2872);
  *(_QWORD *)(a1 + 2872) = v10;
  if (v8 && *v8 == 173)
    v8 = (unsigned __int8 *)*((_QWORD *)v8 + 2);
  v14 = *(_QWORD *)(a1 + 144);
  v15 = *(_QWORD *)(v14 + 152);
  if ((*(_QWORD *)(v15 + 140) & 0x800000000) == 0
    || (*(_WORD *)a2 & 0x100) == 0
    || (v16 = *(_QWORD *)(a2 + 16)) == 0
    || (*(_DWORD *)(v16 + 28) & 0x7F) == 0x40
    || (*(_BYTE *)(v16 + 97) & 4) == 0)
  {
LABEL_15:
    if (*(_QWORD *)(a1 + 1736))
    {
      if (v8)
      {
        v17 = *((_QWORD *)v8 + 1);
        v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        if (v18)
          v19 = (*(_DWORD *)(v18 + 16) & 0xFF800FF) == 86507531;
        else
          v19 = 0;
        if (!v19)
        {
          v20 = (__int128 *)(a1 + 1736);
          if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1616) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                          + 16) & 0xFE) == 0x28)
          {
            sub_22E4DDB88(a1, (uint64_t)v8, (uint64_t)&v70);
            v21 = a1 + 272;
            v22 = v70;
            v23 = *(_OWORD *)(a1 + 1752);
            v69[0] = *v20;
            v69[1] = v23;
            v69[2] = *(_OWORD *)(a1 + 1768);
            v24 = v69;
          }
          else
          {
            v28 = sub_22E619D68(*((_QWORD *)v8 + 1));
            if (v28)
            {
              if (v28 == 2)
              {
                v48 = *(_OWORD *)(a1 + 1752);
                v53[0] = *v20;
                v53[1] = v48;
                v53[2] = *(_OWORD *)(a1 + 1768);
                v54 = 0;
                v55 = 1;
                sub_22E4EF100(a1, v8, v53);
              }
              else if (v28 == 1)
              {
                v30 = *(_OWORD *)(a1 + 1752);
                v83 = *v20;
                v84 = v30;
                v85 = *(_OWORD *)(a1 + 1768);
                sub_22E6281E0(*(_QWORD **)(a1 + 144), v17, (uint64_t)v81);
                v70 = v83;
                v71 = v84;
                v72 = v85;
                v31 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
                v86[0] = v81[0];
                v86[1] = v81[1];
                v87 = v82;
                v58 = 0;
                v59 = 0;
                v60 = 0;
                v57 = 0;
                v61 = 0;
                v62 = 0;
                v63 = 0;
                v64 = 0;
                v65 = 2;
                v56 = 0;
                v66 = 0u;
                v67 = 0u;
                sub_22E3C113C((uint64_t)&v56, &v70, v17, 2, v86, v31);
                sub_22F262998(a1, (uint64_t)v8, (uint64_t)&v56, 1);
              }
              goto LABEL_63;
            }
            *(_QWORD *)&v70 = a1;
            *((_QWORD *)&v70 + 1) = a1 + 272;
            LOBYTE(v71) = 0;
            *((_QWORD *)&v71 + 1) = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
            v22 = sub_22E50E974(&v70, v8, v29);
            v46 = *(_OWORD *)(a1 + 1752);
            v68[0] = *v20;
            v68[1] = v46;
            v68[2] = *(_OWORD *)(a1 + 1768);
            v24 = v68;
            v21 = a1 + 272;
          }
          sub_22E3BEDDC(v21, v22, v24, 0);
LABEL_63:
          ++*(_DWORD *)(a1 + 4168);
          goto LABEL_64;
        }
LABEL_24:
        memset(v73, 0, sizeof(v73));
        v74 = 0;
        v76 = 0;
        v77 = 0;
        v75 = 0;
        v78 = 0;
        sub_22E4D79C0(&v70, a1, v8, v73, 0);
        if ((*v8 + 113) < 0xFBu)
          goto LABEL_63;
        v25 = *(_QWORD *)(a1 + 1608);
        v26 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)&v8[v8[3]] + 8) & 0xFFFFFFFFFFFFFFF0);
        v27 = *v26;
        if ((*v26 && *(_BYTE *)(v27 + 16) == 39
           || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v27 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39
           && (v27 = sub_22F10CF48(v27)) != 0)
          && *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                      + 8) & 0xFFFFFFFFFFFFFFF0)
                                              + 16)
           - 25 < 2)
        {
          goto LABEL_39;
        }
        v32 = *v26;
        if (!*v26 || (v33 = *(_DWORD *)(v32 + 16), (v33 & 0xFE) != 0x28))
        {
          if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v32 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28
            || (v32 = sub_22F10CF48(v32)) == 0)
          {
LABEL_38:
            v34 = *v26;
            v35 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v26 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
            if (v35 != 10
              && (*(_BYTE *)(v34 + 16) != 31 && (v35 != 31 || (v34 = sub_22F10CF48(v34)) == 0) || !sub_22F28C8B4(v34)))
            {
              v36 = *v26;
              if (*v26 && *(unsigned __int8 *)(v36 + 16) - 27 > 0xFFFFFFFD)
                goto LABEL_48;
              if (*v8 != 140)
                goto LABEL_63;
              v45 = sub_22F060FB4((uint64_t)v8);
              if (!v45)
                goto LABEL_63;
              v36 = *(_QWORD *)(*(_QWORD *)(v45 + 48) & 0xFFFFFFFFFFFFFFF0);
              if (v36)
              {
                if (*(unsigned __int8 *)(v36 + 16) - 27 > 0xFFFFFFFD)
                  goto LABEL_48;
              }
              goto LABEL_43;
            }
LABEL_39:
            v36 = *(_QWORD *)(sub_22F10ACF8(*v26) & 0xFFFFFFFFFFFFFFF0);
            if (v36)
              v37 = *(unsigned __int8 *)(v36 + 16) - 27 >= 0xFFFFFFFE;
            else
              v37 = 0;
            if (v37)
            {
LABEL_48:
              if ((*(_QWORD *)(v36 + 16) & 0xF80000) == 0x780000 && (*(_QWORD *)(v25 + 8) & 0x3F0000) == 0xF0000)
              {
                v38 = *(_QWORD *)(*(_QWORD *)(a1 + 320) + 40);
                if (v38)
                  v39 = v38 - 24;
                else
                  v39 = 0;
                *(_WORD *)(v39 + 18) = *(_WORD *)(v39 + 18) & 0xFFFC | 2;
                sub_22E3CF118((uint64_t *)(a1 + 272));
                *(_QWORD *)(a1 + 320) = 0;
                *(_QWORD *)(a1 + 328) = 0;
              }
              goto LABEL_54;
            }
LABEL_43:
            v36 = sub_22F10CF48(v36);
            goto LABEL_48;
          }
          v33 = *(_DWORD *)(v32 + 16);
        }
        if ((v33 & 0x100000) != 0)
        {
          do
          {
            v32 = *(_QWORD *)(*(_QWORD *)(v32 + 32) & 0xFFFFFFFFFFFFFFF0);
            if (v32)
            {
              v50 = *(_DWORD *)(v32 + 16);
              if ((v50 & 0xFE) == 0x28)
                continue;
            }
            v32 = sub_22F10CF48(v32);
            v50 = *(_DWORD *)(v32 + 16);
          }
          while ((v50 & 0x100000) != 0);
        }
        if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v32 + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                      + 8) & 0xFFFFFFFFFFFFFFF0)
                                              + 16)
           - 25 < 2)
          goto LABEL_39;
        goto LABEL_38;
      }
    }
    else if (v8)
    {
      goto LABEL_24;
    }
    ++*(_DWORD *)(a1 + 4168);
LABEL_65:
    ++*(_DWORD *)(a1 + 4172);
    goto LABEL_66;
  }
  if (*(_DWORD *)(v15 + 72))
  {
    (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v14 + 808) + 584))(&v70, *(_QWORD *)(v14 + 808), a1);
    if ((_QWORD)v70)
      goto LABEL_15;
    if ((*(_WORD *)a2 & 0x100) != 0)
      v16 = *(_QWORD *)(a2 + 16);
    else
      v16 = 0;
  }
  *(_QWORD *)&v70 = v16;
  if (sub_22F25B1D8((uint64_t *)(a1 + 1960), &v70)[1])
  {
    v49 = llvm::ConstantInt::getTrue() != 0;
    sub_22F253C78(a1 + 272, (llvm::LLVMContext *)v49);
  }
LABEL_54:
  ++*(_DWORD *)(a1 + 4168);
  if (!v8)
    goto LABEL_65;
LABEL_64:
  if (sub_22F007CB0(v8, *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), 0))
    goto LABEL_65;
LABEL_66:
  *(_BYTE *)(a1 + 2893) = v12;
  sub_22E48B274(a1, v10, v11, 0, 0);
  *(_QWORD *)(a1 + 2872) = v13;
  v51 = *(_OWORD *)(a1 + 1712);
  v52 = *(_QWORD *)(a1 + 1728);
  sub_22E48BA00((_QWORD *)a1, (uint64_t)&v51);
  *(_QWORD *)(a1 + 1832) = v9;
  return sub_22E4CDB5C((uint64_t)v79);
}

uint64_t sub_22E5E98C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  void *v6;
  size_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned __int8 *v10;
  size_t v11;
  int v12;
  int j;
  uint64_t v14;
  unsigned int *v15;
  void *v16;
  size_t v17;
  unsigned int v18;
  unsigned __int8 *v19;
  size_t v20;
  uint64_t v21;
  void *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  llvm::Type ***v27;
  uint64_t *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  unsigned __int8 *v34;
  unint64_t v35;
  unsigned __int8 *v36;
  size_t v37;
  __int128 *p_dst;
  uint64_t v39;
  uint64_t v40;
  __int128 *v41;
  uint64_t v42;
  unsigned __int8 *v43;
  void *v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  void **v48;
  char v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  _BYTE *v55;
  size_t v56;
  __int128 *v57;
  uint64_t *v58;
  char *v59;
  unsigned __int8 *v60;
  __int128 v61;
  __int128 *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  void *v68;
  char *v69;
  char *v70;
  __int128 v71;
  int64x2_t v72;
  char *v73;
  std::string::size_type size;
  uint64_t v75;
  const std::string::value_type *v76;
  std::string::size_type v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t *v91;
  uint64_t v92;
  _OWORD *v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  char *v100;
  _OWORD *v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  char *v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  char *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  __int128 v118;
  char *v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  char *v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  void *v133;
  char *v134;
  int64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  llvm::Type ***v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  char *v148;
  uint64_t *v149;
  uint64_t v150;
  const std::string::value_type *v151;
  std::string::size_type v152;
  uint64_t *v153;
  uint64_t v154;
  unsigned int v155;
  uint64_t v156;
  unsigned int v157;
  unsigned int v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  int v162;
  char *v163;
  char *v164;
  char *v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  char *v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unsigned int *v175;
  unint64_t v176;
  unsigned int v177;
  BOOL v178;
  llvm::LLVMContext *v179;
  uint64_t v180;
  unint64_t v181;
  BOOL v182;
  uint64_t v183;
  uint64_t v184;
  __int128 *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unsigned __int8 *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  __int128 *v196;
  size_t v197;
  llvm::Type *v198;
  BOOL v199;
  unint64_t v200;
  unint64_t PrimitiveSizeInBits;
  int v202;
  uint64_t v203;
  llvm::LLVMContext *v204;
  unsigned int v205;
  llvm::Type **v206;
  uint64_t v207;
  uint64_t v208;
  __int128 *v209;
  uint64_t v210;
  uint64_t v211;
  llvm::Type *v212;
  unint64_t v213;
  unint64_t v214;
  int v215;
  void *v216;
  const std::string::value_type *v217;
  std::string::size_type v218;
  llvm::Type *v219;
  char *v220;
  uint64_t v221;
  unint64_t v222;
  unint64_t v223;
  char *v224;
  char *v225;
  unint64_t v226;
  BOOL v227;
  char *v228;
  uint64_t v229;
  char *v230;
  uint64_t v231;
  unint64_t v232;
  unint64_t v233;
  char *v234;
  char *v235;
  char *v236;
  uint64_t v237;
  char *v238;
  uint64_t v239;
  unint64_t v240;
  unint64_t v241;
  char *v242;
  char *v243;
  char *v244;
  char *v245;
  char *v246;
  uint64_t v247;
  char *v248;
  char *v249;
  char *v250;
  char *v251;
  char *v252;
  char *v253;
  const std::string::value_type *v254;
  std::string::size_type v255;
  char v256;
  uint64_t v257;
  char *v258;
  void *v259;
  uint64_t v260;
  int v261;
  char *v262;
  void *v263;
  char *v264;
  int64_t v265;
  unint64_t v266;
  uint64_t v267;
  unint64_t v268;
  char *v269;
  char *v270;
  int64_t v271;
  unint64_t v272;
  uint64_t v273;
  unint64_t v274;
  char *v275;
  uint64_t *v276;
  uint64_t v277;
  int v278;
  uint64_t *v279;
  uint64_t v280;
  void *v281;
  char v282;
  int v283;
  unsigned __int8 *v284;
  uint64_t v285;
  uint64_t v286;
  __int128 v287;
  uint64_t v288;
  uint64_t v289;
  _BYTE *v290;
  std::string::size_type v291;
  unsigned __int8 *v292;
  unint64_t v293;
  unsigned __int8 *v294;
  llvm::Type **v295;
  _BYTE *v296;
  uint64_t v297;
  uint64_t v298;
  unint64_t v299;
  std::string::value_type *v300;
  uint64_t v301;
  unsigned __int8 *v302;
  __n128 v303;
  int v304;
  _BOOL4 v305;
  BOOL v306;
  unsigned __int8 *v307;
  llvm::LLVMContext *v308;
  unsigned int v309;
  uint64_t v310;
  uint64_t v311;
  llvm::LLVMContext *v312;
  uint64_t v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  unsigned int v317;
  uint64_t v318;
  uint64_t *v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  __int128 *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unsigned __int8 *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  _BYTE *v335;
  size_t v336;
  llvm::Type *v337;
  unint64_t v338;
  unint64_t v339;
  int v340;
  uint64_t *v341;
  char *v342;
  uint64_t v343;
  unint64_t v344;
  unint64_t v345;
  char *v346;
  llvm::Type **v347;
  uint64_t *v348;
  llvm::Type *v349;
  uint64_t *v350;
  char *v351;
  char *v352;
  char *v353;
  uint64_t v354;
  unint64_t v355;
  uint64_t v356;
  unint64_t v357;
  char *v358;
  char *v359;
  uint64_t v360;
  BOOL v361;
  uint64_t v362;
  unint64_t v363;
  unint64_t v364;
  char *v365;
  llvm::Type ***v366;
  llvm::Type ***v367;
  llvm::Type **v368;
  const std::string::value_type *v369;
  std::string::size_type v370;
  int v371;
  char v372;
  uint64_t v373;
  char *v374;
  char *v375;
  char *v376;
  char *v377;
  char *v378;
  uint64_t v379;
  unint64_t v380;
  unint64_t v381;
  char *v382;
  char *v383;
  uint64_t *v384;
  uint64_t v385;
  char *v386;
  char *v387;
  char *v388;
  uint64_t v389;
  unint64_t v390;
  uint64_t v391;
  unint64_t v392;
  char *v393;
  char *v394;
  uint64_t v395;
  uint64_t *v396;
  uint64_t v397;
  unint64_t v398;
  unint64_t v399;
  char *v400;
  char *v401;
  uint64_t v402;
  char *v403;
  char *v404;
  std::string *v405;
  std::string::size_type v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  llvm::BasicBlock *v410;
  Function *v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t *v414;
  uint64_t *v415;
  uint64_t v416;
  unint64_t v417;
  unint64_t v418;
  char *v419;
  char *v420;
  uint64_t *v421;
  uint64_t v422;
  uint64_t *v423;
  uint64_t v424;
  uint64_t v425;
  unint64_t v426;
  unint64_t v427;
  char *v428;
  char *v429;
  uint64_t *v430;
  uint64_t v431;
  uint64_t *v432;
  char *v433;
  char *v434;
  char *v435;
  uint64_t v436;
  unint64_t v437;
  uint64_t v438;
  unint64_t v439;
  char *v440;
  char *v441;
  uint64_t v442;
  std::string::size_type v443;
  uint64_t v444;
  int v445;
  unsigned int v446;
  uint64_t v447;
  unsigned __int8 *v448;
  size_t v449;
  const char *v450;
  std::string::size_type v453;
  std::string::size_type v454;
  uint64_t v455;
  unsigned __int8 *v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  BOOL v463;
  BOOL v464;
  int64_t v465;
  std::string *v466;
  char *v467;
  std::string *v468;
  char *v469;
  __int16 v471;
  std::string *v472;
  std::string::size_type v473;
  std::string *v474;
  int64_t v475;
  std::string *v476;
  int v477;
  void *v478;
  char *v479;
  int64_t v480;
  char *v481;
  char *v482;
  uint64_t v483;
  int v484;
  std::string *v485;
  int64_t v486;
  char *v487;
  std::string::size_type v488;
  int64_t v489;
  std::string *v490;
  char *v491;
  std::string *v492;
  char *v493;
  std::string::size_type v494;
  char v495;
  const char *v496;
  size_t v497;
  size_t v498;
  void *v499;
  uint64_t v500;
  uint64_t v501;
  char v502;
  std::string::size_type v503;
  std::string::size_type v504;
  size_t v505;
  std::string::size_type v506;
  const std::string::value_type *v507;
  std::string::size_type v508;
  BOOL v509;
  char v510;
  llvm::InlineAsm *v511;
  llvm::Value *v512;
  uint64_t v513;
  llvm::Value *v514;
  char *v515;
  uint64_t v516;
  char v517;
  char v518;
  char *v519;
  void *v520;
  uint64_t *v521;
  uint64_t v522;
  unint64_t v523;
  uint64_t *v524;
  uint64_t v525;
  uint64_t *v526;
  unsigned __int8 *v527;
  unsigned int v528;
  uint64_t v529;
  int v530;
  uint64_t DataLayout;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t *v536;
  uint64_t v537;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  unint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  int v551;
  uint64_t FunctionType;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  char *v556;
  uint64_t v557;
  unint64_t v558;
  void **v559;
  char *v560;
  char *v561;
  uint64_t v562;
  unint64_t v563;
  void **v564;
  char *v565;
  uint64_t result;
  llvm::Value *v567;
  llvm::Value *v568;
  unint64_t v569;
  char v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t *v574;
  char v575;
  uint64_t *v576;
  char *v577;
  char *v578;
  int v579[2];
  uint64_t *v580;
  uint64_t v581;
  char *v582;
  _QWORD *v583;
  void *v584;
  uint64_t *v585;
  int v586;
  char *v587;
  unsigned __int8 *v588;
  char *v589;
  uint64_t v590;
  char v591;
  char *v592;
  char *v593;
  char *v594;
  uint64_t v595;
  BOOL v596;
  std::string *v597;
  char *v598;
  char *v599;
  unint64_t v600;
  unsigned int *v601;
  void *v602;
  char *v603;
  unsigned int v604;
  char *v605;
  int v606;
  uint64_t *v607;
  unsigned __int8 *v608;
  unsigned __int8 *v609;
  uint64_t *v610;
  uint64_t *v611;
  uint64_t *v612;
  uint64_t v613;
  uint64_t *v615;
  llvm::Type ***v616;
  uint64_t *v617;
  _OWORD v618[8];
  uint64_t v619;
  _QWORD v620[6];
  char v621;
  _QWORD v622[3];
  __int16 v623;
  _OWORD v624[3];
  __int128 v625[3];
  __int128 v626;
  __int128 v627;
  __int128 v628;
  uint64_t *v629;
  uint64_t v630;
  uint64_t v631;
  void *v632;
  size_t v633;
  int64_t v634;
  _QWORD v635[3];
  __int16 v636;
  _OWORD v637[8];
  uint64_t v638;
  _OWORD v639[8];
  uint64_t v640;
  __int128 v641[3];
  void *v642[2];
  char *v643;
  std::string v644;
  void *v645;
  char *v646;
  char *v647;
  void *v648;
  void *v649;
  unint64_t v650;
  void *v651;
  char *v652;
  char *v653;
  void *v654;
  char *v655;
  char *v656;
  std::string v657;
  std::string v658;
  _OWORD v659[2];
  uint64_t v660;
  void *v661[2];
  __int128 v662;
  __int128 v663;
  __int128 v664[2];
  uint64_t v665;
  __int128 __dst;
  __int128 v667;
  __int128 v668;
  _BYTE v669[48];
  __int128 v670;
  __int128 v671;
  __int128 v672;
  __int128 v673;
  __int128 v674;
  uint64_t v675;
  _BYTE v676[64];
  __int128 v677;
  __int128 v678;
  __int128 v679;
  __int128 v680;
  uint64_t v681;
  __int128 v682;
  uint64_t v683;
  void *v684;
  _BYTE v685[16];
  uint64_t v686;
  _QWORD *v687;
  void *v688;
  char v689;
  void *__p;
  char v691;
  char **v692;
  char *v693;
  uint64_t v694;
  void *v695;
  uint64_t v696;
  _BYTE v697[48];
  unsigned int v698;
  void *v699;
  uint64_t v700;
  _BYTE v701[512];
  void *v702;
  uint64_t v703;
  _BYTE v704[512];
  _BYTE v705[64];
  __int128 v706;
  __int128 v707;
  __int128 v708;
  __int128 v709;
  uint64_t v710;
  uint64_t v711;

  v711 = *MEMORY[0x24BDAC8D0];
  v571 = *(_QWORD *)(a1 + 2312);
  v572 = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000);
  v570 = *(_BYTE *)(a1 + 2893);
  *(_BYTE *)(a1 + 2893) = 0;
  v573 = *(_QWORD *)(a1 + 2872);
  *(_QWORD *)(a1 + 2872) = v572;
  sub_22F0D673C((unsigned __int8 *)a2, *(_QWORD **)(*(_QWORD *)(a1 + 144) + 144), &v658);
  v702 = v704;
  v703 = 0x400000000;
  v699 = v701;
  v700 = 0x400000000;
  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      if (*(_BYTE *)a2 == 1 && (v5 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 8 * i)) != 0)
      {
        v8 = *(unsigned int **)(v5 + 16);
        v9 = *v8;
        v6 = v8 + 4;
        v7 = v9;
      }
      else
      {
        v6 = 0;
        v7 = 0;
      }
      v10 = sub_22F0D705C((unsigned __int8 *)a2, i);
      sub_22E5EF89C((uint64_t)&v682, v10, v11, v6, v7);
      sub_22F424BE0(*(_QWORD *)(a1 + 152), (uint64_t)&v682);
      sub_22E5EE1D0((uint64_t)&v702, &v682);
      if (v691 < 0)
        operator delete(__p);
      if (v689 < 0)
        operator delete(v688);
      sub_22F242DFC((uint64_t)&v686, v687);
      if (v684 != v685)
        free(v684);
    }
  }
  v12 = *(_DWORD *)(a2 + 20);
  if (v12)
  {
    for (j = 0; j != v12; ++j)
    {
      if (*(_BYTE *)a2 == 1
        && (v14 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 8 * (j + *(_DWORD *)(a2 + 16)))) != 0)
      {
        v15 = *(unsigned int **)(v14 + 16);
        v18 = *v15;
        v16 = v15 + 4;
        v17 = v18;
      }
      else
      {
        v16 = 0;
        v17 = 0;
      }
      v19 = sub_22F0D70AC((unsigned __int8 *)a2, j);
      sub_22E5EF89C((uint64_t)&v682, v19, v20, v16, v17);
      sub_22F1E808C(*(_QWORD *)(a1 + 152), (uint64_t)v702, v703, (uint64_t)&v682);
      sub_22E5EE1D0((uint64_t)&v699, &v682);
      if (v691 < 0)
        operator delete(__p);
      if (v689 < 0)
        operator delete(v688);
      sub_22F242DFC((uint64_t)&v686, v687);
      if (v684 != v685)
        free(v684);
    }
  }
  memset(&v657, 0, sizeof(v657));
  v655 = 0;
  v654 = 0;
  v656 = 0;
  v652 = 0;
  v651 = 0;
  v653 = 0;
  v649 = 0;
  v648 = 0;
  v650 = 0;
  v646 = 0;
  v645 = 0;
  v647 = 0;
  v695 = v697;
  v696 = 0x600000000;
  v698 = 0;
  memset(&v644, 0, sizeof(v644));
  v642[1] = 0;
  v642[0] = 0;
  v643 = 0;
  *(_QWORD *)&v682 = &v683;
  *((_QWORD *)&v682 + 1) = 0x800000000;
  v694 = 0;
  v693 = 0;
  v692 = &v693;
  v613 = a2;
  v21 = a1;
  v584 = (void *)*(unsigned int *)(a2 + 16);
  if (!(_DWORD)v584)
  {
    v582 = 0;
    v587 = 0;
    v31 = 0;
    v29 = 0;
    v28 = 0;
    v27 = 0;
    v603 = 0;
    v605 = 0;
    v26 = 0;
    v25 = 0;
    v24 = 0;
    v591 = 1;
    v575 = 1;
    goto LABEL_470;
  }
  v22 = 0;
  *(_QWORD *)v579 = 0;
  v580 = 0;
  v23 = 0;
  v24 = 0;
  v603 = 0;
  v605 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v577 = 0;
  v578 = 0;
  v31 = 0;
  v32 = 0;
  v587 = 0;
  v582 = 0;
  v574 = (uint64_t *)(a1 + 272);
  v575 = 1;
  v591 = 1;
  do
  {
    v598 = v29;
    v600 = (unint64_t)v22;
    v592 = v31;
    v615 = v28;
    v610 = v26;
    v33 = (char *)v702;
    v34 = sub_22F0D705C((unsigned __int8 *)v613, v22);
    if (v35 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_1038;
    v36 = v34;
    v37 = v35;
    v607 = v24;
    if (v35 >= 0x17)
    {
      v39 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v35 | 7) != 0x17)
        v39 = v35 | 7;
      v40 = v39 + 1;
      p_dst = (__int128 *)operator new(v39 + 1);
      *(_QWORD *)&v667 = v40 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
      *((_QWORD *)&__dst + 1) = v37;
    }
    else
    {
      BYTE7(v667) = v35;
      p_dst = &__dst;
      if (!v35)
        goto LABEL_37;
    }
    memmove(p_dst, v36, v37);
LABEL_37:
    *((_BYTE *)p_dst + v37) = 0;
    v41 = &__dst;
    if (SBYTE7(v667) < 0)
      v41 = (__int128 *)__dst;
    sub_22E5EE304((std::string *)v676, (std::string::value_type *)v41 + 1, *(_QWORD *)(a1 + 152), (uint64_t)&v702);
    if (SBYTE7(v667) < 0)
      operator delete((void *)__dst);
    __dst = *(_OWORD *)v676;
    *(_QWORD *)&v667 = *(_QWORD *)&v676[16];
    v42 = *(_QWORD *)(a1 + 144);
    v43 = sub_22EFFF40C(*(unsigned __int8 **)(*(_QWORD *)(v613 + 32) + 8 * v600), *(_QWORD *)(v42 + 144));
    v661[1] = 0;
    v661[0] = 0;
    *(_QWORD *)&v662 = 0;
    v594 = &v33[128 * v600];
    v588 = v43;
    sub_22E5EE548(v676, (uint64_t)&__dst, v43, *(_QWORD *)(a1 + 152), v42, v613, (*(_DWORD *)v594 >> 5) & 1, (uint64_t)v661);
    if (SBYTE7(v667) < 0)
      operator delete((void *)__dst);
    __dst = *(_OWORD *)v676;
    *(_QWORD *)&v667 = *(_QWORD *)&v676[16];
    if ((SBYTE7(v662) & 0x80u) == 0)
      v44 = (void *)(BYTE7(v662) & 0x7F);
    else
      v44 = v661[1];
    if (!v44)
      goto LABEL_76;
    if (v694)
    {
      sub_22F28CDE0((uint64_t)&v692, (const void **)v661, (uint64_t)v661);
      if ((v256 & 1) == 0)
      {
LABEL_66:
        v53 = *(_QWORD *)(a1 + 144);
        v54 = *(_DWORD *)(v613 + 8);
        std::operator+<char>();
        if (v676[23] >= 0)
          v55 = v676;
        else
          v55 = *(_BYTE **)v676;
        if (v676[23] >= 0)
          v56 = v676[23] & 0x7F;
        else
          v56 = *(_QWORD *)&v676[8];
        sub_22E628310(v53, v54, v55, v56);
        if ((v676[23] & 0x80000000) != 0)
          operator delete(*(void **)v676);
      }
      goto LABEL_76;
    }
    v45 = DWORD2(v682);
    if (!DWORD2(v682))
      goto LABEL_75;
    v46 = v682;
    v47 = v682 + 24 * DWORD2(v682);
    if ((SBYTE7(v662) & 0x80u) == 0)
      v48 = v661;
    else
      v48 = (void **)v661[0];
    while (1)
    {
      v49 = *(_BYTE *)(v46 + 23);
      v50 = v49 & 0x7F;
      if (v49 >= 0)
        v51 = (void *)(v49 & 0x7F);
      else
        v51 = *(void **)(v46 + 8);
      if (v51 != v44)
        goto LABEL_63;
      if ((*(_BYTE *)(v46 + 23) & 0x80) != 0)
        break;
      if ((v49 & 0x7F) == 0)
        goto LABEL_65;
      v52 = 0;
      while (*(unsigned __int8 *)(v46 + v52) == *((unsigned __int8 *)v48 + v52))
      {
        if (v50 == ++v52)
          goto LABEL_65;
      }
LABEL_63:
      v46 += 24;
      if (v46 == v47)
        goto LABEL_74;
    }
    if (memcmp(*(const void **)v46, v48, *(_QWORD *)(v46 + 8)))
      goto LABEL_63;
LABEL_65:
    if (v46 != v47)
      goto LABEL_66;
LABEL_74:
    if (v45 >= 8)
    {
      do
      {
        sub_22F28CDE0((uint64_t)&v692, (const void **)(v682 + 24 * v45 - 24), v682 + 24 * v45 - 24);
        v45 = DWORD2(v682) - 1;
        DWORD2(v682) = v45;
        v67 = v682 + 24 * v45;
        if (*(char *)(v67 + 23) < 0)
        {
          operator delete(*(void **)v67);
          v45 = DWORD2(v682);
        }
      }
      while (v45);
      sub_22F28CDE0((uint64_t)&v692, (const void **)v661, (uint64_t)v661);
    }
    else
    {
LABEL_75:
      sub_22E5EFE94((uint64_t)&v682, (unint64_t)v661);
    }
LABEL_76:
    v57 = (__int128 *)v642[1];
    if (v642[1] < v643)
    {
      v58 = v607;
      v59 = v594;
      v60 = v588;
      if (SBYTE7(v667) < 0)
      {
        sub_22E3BB2B4((_BYTE *)v642[1], (void *)__dst, *((unint64_t *)&__dst + 1));
      }
      else
      {
        v61 = __dst;
        *((_QWORD *)v642[1] + 2) = v667;
        *v57 = v61;
      }
      v21 = a1;
      v68 = (char *)v57 + 24;
      goto LABEL_104;
    }
    v62 = (__int128 *)v642[0];
    v63 = 0xAAAAAAAAAAAAAAABLL * (((char *)v642[1] - (char *)v642[0]) >> 3);
    v64 = v63 + 1;
    if (v63 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_1038;
    if (0x5555555555555556 * ((v643 - (char *)v642[0]) >> 3) > v64)
      v64 = 0x5555555555555556 * ((v643 - (char *)v642[0]) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((v643 - (char *)v642[0]) >> 3) >= 0x555555555555555)
      v65 = 0xAAAAAAAAAAAAAAALL;
    else
      v65 = v64;
    *(_QWORD *)&v676[32] = &v643;
    if (!v65)
    {
      v66 = 0;
      goto LABEL_95;
    }
    if (v65 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_1039;
    v66 = (char *)operator new(24 * v65);
LABEL_95:
    v69 = &v66[24 * v63];
    if (SBYTE7(v667) < 0)
    {
      sub_22E3BB2B4(v69, (void *)__dst, *((unint64_t *)&__dst + 1));
      v57 = (__int128 *)v642[1];
      v62 = (__int128 *)v642[0];
    }
    else
    {
      *(_OWORD *)v69 = __dst;
      *((_QWORD *)v69 + 2) = v667;
    }
    if (v57 == v62)
    {
      v72 = vdupq_n_s64((unint64_t)v62);
      v70 = v69;
    }
    else
    {
      v70 = v69;
      do
      {
        v71 = *(__int128 *)((char *)v57 - 24);
        *((_QWORD *)v70 - 1) = *((_QWORD *)v57 - 1);
        *(_OWORD *)(v70 - 24) = v71;
        v70 -= 24;
        *((_QWORD *)v57 - 2) = 0;
        *((_QWORD *)v57 - 1) = 0;
        *((_QWORD *)v57 - 3) = 0;
        v57 = (__int128 *)((char *)v57 - 24);
      }
      while (v57 != v62);
      v72 = *(int64x2_t *)v642;
    }
    v68 = v69 + 24;
    v642[0] = v70;
    v642[1] = v69 + 24;
    *(int64x2_t *)&v676[8] = v72;
    v73 = v643;
    v643 = &v66[24 * v65];
    *(_QWORD *)&v676[24] = v73;
    *(_QWORD *)v676 = v72.i64[0];
    sub_22E3B8B94((uint64_t)v676);
    v21 = a1;
    v58 = v607;
    v59 = v594;
    v60 = v588;
LABEL_104:
    v642[1] = v68;
    sub_22E4D8D7C(v676);
    size = *((_BYTE *)&v657.__r_.__value_.__s + 23) & 0x7F;
    if ((v657.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v657.__r_.__value_.__l.__size_;
    if (size)
      std::string::push_back(&v657, 44);
    v75 = *((_QWORD *)v60 + 1);
    if (*(_DWORD *)v59 & 1 | sub_22E619D68(v75) & 0xFFFFFFFD)
    {
      *(_OWORD *)&v705[16] = *(_OWORD *)&v676[24];
      *(_OWORD *)&v705[32] = *(_OWORD *)&v676[40];
      *(_OWORD *)v705 = *(_OWORD *)&v676[8];
      if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)((v75 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                            + 16)
         - 29 <= 1)
      {
        v641[0] = *(_OWORD *)&v676[8];
        v641[1] = *(_OWORD *)&v676[24];
        v641[2] = *(_OWORD *)&v676[40];
        v78 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(v21 + 144) + 280), *((llvm::LLVMContext **)v60 + 1));
        *(_WORD *)&v669[32] = 257;
        sub_22E3BEE6C(v574, v641, v78, (uint64_t)v669, (uint64_t)v705);
      }
      v79 = llvm::PointerType::get();
      v80 = v79;
      if (v25 >= (uint64_t *)v605)
      {
        v86 = v610;
        v87 = v25 - v610;
        v88 = v87 + 1;
        if ((unint64_t)(v87 + 1) >> 61)
          goto LABEL_1038;
        if ((v605 - (char *)v610) >> 2 > v88)
          v88 = (v605 - (char *)v610) >> 2;
        if ((unint64_t)(v605 - (char *)v610) >= 0x7FFFFFFFFFFFFFF8)
          v89 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v89 = v88;
        if (v89)
        {
          if (v89 >> 61)
            goto LABEL_1039;
          v90 = (char *)operator new(8 * v89);
          v86 = v610;
        }
        else
        {
          v90 = 0;
        }
        v106 = (uint64_t *)&v90[8 * v87];
        *v106 = v80;
        v107 = v106 + 1;
        if (v25 != v86)
        {
          do
          {
            v108 = *--v25;
            *--v106 = v108;
          }
          while (v25 != v86);
          v25 = v86;
        }
        v610 = v106;
        v605 = &v90[8 * v89];
        if (v25)
          operator delete(v25);
        v25 = v107;
        v81 = (char *)v615;
        v59 = v594;
      }
      else
      {
        *v25++ = v79;
        v81 = (char *)v615;
      }
      v109 = *(_QWORD *)&v705[8];
      v110 = v646;
      if (v646 >= v647)
      {
        v112 = (char *)v645;
        v113 = (v646 - (_BYTE *)v645) >> 3;
        v114 = v113 + 1;
        if ((unint64_t)(v113 + 1) >> 61)
          goto LABEL_1038;
        v115 = v647 - (_BYTE *)v645;
        if ((v647 - (_BYTE *)v645) >> 2 > v114)
          v114 = v115 >> 2;
        if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFF8)
          v116 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v116 = v114;
        if (v116)
        {
          if (v116 >> 61)
            goto LABEL_1039;
          v117 = (char *)operator new(8 * v116);
          v81 = (char *)v615;
        }
        else
        {
          v117 = 0;
        }
        v140 = &v117[8 * v113];
        *(_QWORD *)v140 = v109;
        v111 = v140 + 8;
        if (v110 == v112)
        {
          v24 = v607;
        }
        else
        {
          v24 = v607;
          do
          {
            v141 = *((_QWORD *)v110 - 1);
            v110 -= 8;
            *((_QWORD *)v140 - 1) = v141;
            v140 -= 8;
          }
          while (v110 != v112);
          v110 = (char *)v645;
        }
        v645 = v140;
        v647 = &v117[8 * v116];
        if (v110)
        {
          operator delete(v110);
          v81 = (char *)v615;
        }
        v59 = v594;
      }
      else
      {
        *(_QWORD *)v646 = *(_QWORD *)&v705[8];
        v111 = v110 + 8;
        v24 = v607;
      }
      v646 = v111;
      if ((v705[24] & 3) != 0)
      {
        v21 = a1;
        v260 = sub_22F28ABCC(v705, a1);
        v81 = (char *)v615;
        v142 = v260;
      }
      else
      {
        v142 = *(_QWORD *)v705;
        v21 = a1;
      }
      if (v27 >= (llvm::Type ***)v603)
      {
        v145 = ((char *)v27 - v81) >> 3;
        v146 = v145 + 1;
        if ((unint64_t)(v145 + 1) >> 61)
          goto LABEL_1038;
        if ((v603 - v81) >> 2 > v146)
          v146 = (v603 - v81) >> 2;
        if ((unint64_t)(v603 - v81) >= 0x7FFFFFFFFFFFFFF8)
          v147 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v147 = v146;
        if (v147)
        {
          if (v147 >> 61)
            goto LABEL_1039;
          v148 = (char *)operator new(8 * v147);
          v81 = (char *)v615;
        }
        else
        {
          v148 = 0;
        }
        v149 = (uint64_t *)&v148[8 * v145];
        *v149 = v142;
        v143 = (llvm::Type ***)(v149 + 1);
        if (v27 == (llvm::Type ***)v81)
        {
          v144 = v600;
        }
        else
        {
          v144 = v600;
          do
          {
            v150 = (uint64_t)*--v27;
            *--v149 = v150;
          }
          while (v27 != (llvm::Type ***)v81);
          v27 = (llvm::Type ***)v81;
        }
        v615 = v149;
        v603 = &v148[8 * v147];
        if (v27)
          operator delete(v27);
        v59 = v594;
      }
      else
      {
        *v27 = (llvm::Type **)v142;
        v143 = v27 + 1;
        v144 = v600;
      }
      std::string::append(&v657, "=*");
      if ((SBYTE7(v667) & 0x80u) == 0)
        v151 = (const std::string::value_type *)&__dst;
      else
        v151 = (const std::string::value_type *)__dst;
      if ((SBYTE7(v667) & 0x80u) == 0)
        v152 = BYTE7(v667) & 0x7F;
      else
        v152 = *((_QWORD *)&__dst + 1);
      std::string::append(&v657, v151, v152);
      v591 = 0;
      v575 = 0;
      v27 = v143;
      goto LABEL_322;
    }
    std::operator+<char>();
    if (v705[23] >= 0)
      v76 = v705;
    else
      v76 = *(const std::string::value_type **)v705;
    if (v705[23] >= 0)
      v77 = v705[23] & 0x7F;
    else
      v77 = *(_QWORD *)&v705[8];
    std::string::append(&v657, v76, v77);
    if ((v705[23] & 0x80000000) != 0)
      operator delete(*(void **)v705);
    if (v23 < v580)
    {
      *v23 = v75;
      v576 = v23 + 1;
      goto LABEL_148;
    }
    v82 = v23 - v58;
    v83 = v82 + 1;
    if ((unint64_t)(v82 + 1) >> 61)
      goto LABEL_1038;
    if (((char *)v580 - (char *)v58) >> 2 > v83)
      v83 = ((char *)v580 - (char *)v58) >> 2;
    if ((unint64_t)((char *)v580 - (char *)v58) >= 0x7FFFFFFFFFFFFFF8)
      v84 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v84 = v83;
    if (v84)
    {
      if (!(v84 >> 61))
      {
        v85 = (char *)operator new(8 * v84);
        goto LABEL_142;
      }
LABEL_1039:
      sub_22E3B3F8C();
    }
    v85 = 0;
LABEL_142:
    v91 = (uint64_t *)&v85[8 * v82];
    *v91 = v75;
    v576 = v91 + 1;
    while (v23 != v58)
    {
      v92 = *--v23;
      *--v91 = v92;
    }
    v580 = (uint64_t *)&v85[8 * v84];
    if (v58)
      operator delete(v58);
    v607 = v91;
    v59 = v594;
LABEL_148:
    v93 = v655;
    if (v655 < v656)
    {
      *(_OWORD *)v655 = *(_OWORD *)v676;
      v94 = *(_OWORD *)&v676[16];
      v95 = *(_OWORD *)&v676[32];
      v96 = v677;
      v93[3] = *(_OWORD *)&v676[48];
      v93[4] = v96;
      v93[1] = v94;
      v93[2] = v95;
      v97 = v678;
      v98 = v679;
      v99 = v680;
      *((_QWORD *)v93 + 16) = v681;
      v93[6] = v98;
      v93[7] = v99;
      v93[5] = v97;
      v100 = (char *)v93 + 136;
      goto LABEL_184;
    }
    v101 = v654;
    v102 = 0xF0F0F0F0F0F0F0F1 * ((v655 - (_BYTE *)v654) >> 3);
    v103 = v102 + 1;
    if (v102 + 1 > 0x1E1E1E1E1E1E1E1)
      goto LABEL_1038;
    if (0xE1E1E1E1E1E1E1E2 * ((v656 - (_BYTE *)v654) >> 3) > v103)
      v103 = 0xE1E1E1E1E1E1E1E2 * ((v656 - (_BYTE *)v654) >> 3);
    if (0xF0F0F0F0F0F0F0F1 * ((v656 - (_BYTE *)v654) >> 3) >= 0xF0F0F0F0F0F0F0)
      v104 = 0x1E1E1E1E1E1E1E1;
    else
      v104 = v103;
    if (v104)
    {
      if (v104 > 0x1E1E1E1E1E1E1E1)
        goto LABEL_1039;
      v105 = (char *)operator new(136 * v104);
    }
    else
    {
      v105 = 0;
    }
    v118 = v680;
    v119 = &v105[136 * v102];
    *((_OWORD *)v119 + 6) = v679;
    *((_OWORD *)v119 + 7) = v118;
    *((_QWORD *)v119 + 16) = v681;
    v120 = *(_OWORD *)&v676[48];
    *((_OWORD *)v119 + 2) = *(_OWORD *)&v676[32];
    *((_OWORD *)v119 + 3) = v120;
    v121 = v678;
    *((_OWORD *)v119 + 4) = v677;
    *((_OWORD *)v119 + 5) = v121;
    v122 = *(_OWORD *)&v676[16];
    *(_OWORD *)v119 = *(_OWORD *)v676;
    *((_OWORD *)v119 + 1) = v122;
    v123 = v119;
    if (v93 != v101)
    {
      do
      {
        *(_OWORD *)(v123 - 136) = *(_OWORD *)((char *)v93 - 136);
        v124 = *(_OWORD *)((char *)v93 - 120);
        v125 = *(_OWORD *)((char *)v93 - 104);
        v126 = *(_OWORD *)((char *)v93 - 88);
        *(_OWORD *)(v123 - 72) = *(_OWORD *)((char *)v93 - 72);
        *(_OWORD *)(v123 - 88) = v126;
        *(_OWORD *)(v123 - 104) = v125;
        *(_OWORD *)(v123 - 120) = v124;
        v127 = *(_OWORD *)((char *)v93 - 56);
        v128 = *(_OWORD *)((char *)v93 - 40);
        v129 = *(_OWORD *)((char *)v93 - 24);
        *((_QWORD *)v123 - 1) = *((_QWORD *)v93 - 1);
        *(_OWORD *)(v123 - 24) = v129;
        *(_OWORD *)(v123 - 40) = v128;
        *(_OWORD *)(v123 - 56) = v127;
        v123 -= 136;
        v93 = (_OWORD *)((char *)v93 - 136);
      }
      while (v93 != v101);
      v93 = v101;
    }
    v100 = v119 + 136;
    v654 = v123;
    v655 = v119 + 136;
    v656 = &v105[136 * v104];
    if (v93)
      operator delete(v93);
    v59 = v594;
LABEL_184:
    v655 = v100;
    v130 = sub_22E66C868(*(_QWORD *)(v21 + 144) + 280, v75, 0);
    v131 = v130;
    if ((*v59 & 2) != 0)
    {
      v257 = sub_22E699F3C(*(_QWORD **)(v21 + 144));
      if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v257 + 112))(v257, v21, v131) & 1) == 0)
      {
        v261 = *(_DWORD *)(v131 + 8);
        v262 = (char *)v649;
        if ((unint64_t)v649 >= v650)
        {
          v270 = (char *)v648;
          v271 = ((_BYTE *)v649 - (_BYTE *)v648) >> 3;
          v272 = v271 + 1;
          if ((unint64_t)(v271 + 1) >> 61)
            goto LABEL_1038;
          v273 = v650 - (_QWORD)v648;
          if ((uint64_t)(v650 - (_QWORD)v648) >> 2 > v272)
            v272 = v273 >> 2;
          if ((unint64_t)v273 >= 0x7FFFFFFFFFFFFFF8)
            v274 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v274 = v272;
          if (v274)
          {
            if (v274 >> 61)
              goto LABEL_1039;
            v278 = *(_DWORD *)(v131 + 8);
            v569 = v274;
            v275 = (char *)operator new(8 * v274);
            v274 = v569;
            LOBYTE(v261) = v278;
          }
          else
          {
            v275 = 0;
          }
          v279 = (uint64_t *)&v275[8 * v271];
          *v279 = v131;
          v263 = v279 + 1;
          if (v262 != v270)
          {
            do
            {
              v280 = *((_QWORD *)v262 - 1);
              v262 -= 8;
              *--v279 = v280;
            }
            while (v262 != v270);
            v262 = (char *)v648;
          }
          v648 = v279;
          v649 = v263;
          v650 = (unint64_t)&v275[8 * v274];
          if (v262)
          {
            v281 = v262;
            v282 = v261;
            operator delete(v281);
            LOBYTE(v261) = v282;
          }
          v21 = a1;
        }
        else
        {
          *(_QWORD *)v649 = v131;
          v263 = v262 + 8;
        }
        v283 = v261 & 0xFE;
        v649 = v263;
        sub_22F28C80C((uint64_t)&v695, v283 == 16);
        v178 = v283 == 16;
        v59 = v594;
        if (!v178)
          goto LABEL_254;
        goto LABEL_467;
      }
      v258 = (char *)v649;
      if ((unint64_t)v649 < v650)
      {
        *(_QWORD *)v649 = v131;
        v259 = v258 + 8;
        goto LABEL_456;
      }
      v264 = (char *)v648;
      v265 = ((_BYTE *)v649 - (_BYTE *)v648) >> 3;
      v266 = v265 + 1;
      if (!((unint64_t)(v265 + 1) >> 61))
      {
        v267 = v650 - (_QWORD)v648;
        if ((uint64_t)(v650 - (_QWORD)v648) >> 2 > v266)
          v266 = v267 >> 2;
        if ((unint64_t)v267 >= 0x7FFFFFFFFFFFFFF8)
          v268 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v268 = v266;
        if (v268)
        {
          if (v268 >> 61)
            goto LABEL_1039;
          v269 = (char *)operator new(8 * v268);
        }
        else
        {
          v269 = 0;
        }
        v276 = (uint64_t *)&v269[8 * v265];
        *v276 = v131;
        v259 = v276 + 1;
        if (v258 != v264)
        {
          do
          {
            v277 = *((_QWORD *)v258 - 1);
            v258 -= 8;
            *--v276 = v277;
          }
          while (v258 != v264);
          v258 = (char *)v648;
        }
        v648 = v276;
        v649 = v259;
        v650 = (unint64_t)&v269[8 * v268];
        if (v258)
          operator delete(v258);
LABEL_456:
        v649 = v259;
        sub_22F28C80C((uint64_t)&v695, 1);
        v21 = a1;
        v59 = v594;
LABEL_467:
        sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(v21 + 144) + 144), *(_QWORD *)(v75 & 0xFFFFFFFFFFFFFFF0));
        v131 = llvm::IntegerType::get();
        goto LABEL_254;
      }
LABEL_1038:
      abort();
    }
    v132 = (char *)v649;
    if ((unint64_t)v649 < v650)
    {
      *(_QWORD *)v649 = v130;
      v133 = v132 + 8;
      goto LABEL_241;
    }
    v134 = (char *)v648;
    v135 = ((_BYTE *)v649 - (_BYTE *)v648) >> 3;
    v136 = v135 + 1;
    if ((unint64_t)(v135 + 1) >> 61)
      goto LABEL_1038;
    v137 = v650 - (_QWORD)v648;
    if ((uint64_t)(v650 - (_QWORD)v648) >> 2 > v136)
      v136 = v137 >> 2;
    if ((unint64_t)v137 >= 0x7FFFFFFFFFFFFFF8)
      v138 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v138 = v136;
    if (v138)
    {
      if (v138 >> 61)
        goto LABEL_1039;
      v139 = (char *)operator new(8 * v138);
    }
    else
    {
      v139 = 0;
    }
    v153 = (uint64_t *)&v139[8 * v135];
    *v153 = v131;
    v133 = v153 + 1;
    if (v132 != v134)
    {
      do
      {
        v154 = *((_QWORD *)v132 - 1);
        v132 -= 8;
        *--v153 = v154;
      }
      while (v132 != v134);
      v132 = (char *)v648;
    }
    v648 = v153;
    v649 = v133;
    v650 = (unint64_t)&v139[8 * v138];
    if (v132)
      operator delete(v132);
    v59 = v594;
LABEL_241:
    v649 = v133;
    v155 = v698;
    v156 = v696;
    v157 = v698 + 1;
    if (v698 + 1 <= (_DWORD)v696 << 6)
    {
      ++v698;
    }
    else
    {
      if ((v698 & 0x3F) != 0)
        *((_QWORD *)v695 + v696 - 1) &= ~(-1 << (v698 & 0x3F));
      v698 = v157;
      v158 = v155 + 64;
      if ((_DWORD)v156 != v158 >> 6)
      {
        v159 = v158 >> 6;
        if (v156 > v159)
        {
          LODWORD(v696) = v158 >> 6;
          LODWORD(v156) = v158 >> 6;
        }
        else
        {
          v160 = v156;
          v161 = v156;
          if (v159 > HIDWORD(v696))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v160 = v696;
            v161 = v696;
          }
          if (v159 != v156)
            bzero((char *)v695 + 8 * v160, 8 * (v159 - v156));
          LODWORD(v156) = v161 + v159 - v156;
          LODWORD(v696) = v156;
          LOBYTE(v157) = v698;
          v59 = v594;
        }
      }
      v162 = v157 & 0x3F;
      if (v162)
        *((_QWORD *)v695 + v156 - 1) &= ~(-1 << v162);
    }
LABEL_254:
    v163 = v652;
    if (v652 < v653)
    {
      *(_QWORD *)v652 = v131;
      v164 = v163 + 8;
      v24 = v607;
      goto LABEL_274;
    }
    v165 = (char *)v651;
    v166 = (v652 - (_BYTE *)v651) >> 3;
    v167 = v166 + 1;
    if ((unint64_t)(v166 + 1) >> 61)
      goto LABEL_1038;
    v168 = v653 - (_BYTE *)v651;
    if ((v653 - (_BYTE *)v651) >> 2 > v167)
      v167 = v168 >> 2;
    if ((unint64_t)v168 >= 0x7FFFFFFFFFFFFFF8)
      v169 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v169 = v167;
    if (v169)
    {
      if (v169 >> 61)
        goto LABEL_1039;
      v170 = (char *)operator new(8 * v169);
    }
    else
    {
      v170 = 0;
    }
    v171 = (uint64_t *)&v170[8 * v166];
    *v171 = v131;
    v164 = (char *)(v171 + 1);
    if (v163 == v165)
    {
      v24 = v607;
    }
    else
    {
      v24 = v607;
      do
      {
        v172 = *((_QWORD *)v163 - 1);
        v163 -= 8;
        *--v171 = v172;
      }
      while (v163 != v165);
      v163 = (char *)v651;
    }
    v651 = v171;
    v652 = v164;
    v653 = &v170[8 * v169];
    if (v163)
      operator delete(v163);
    v59 = v594;
LABEL_274:
    v652 = v164;
    v144 = v600;
    if ((*v59 & 8) != 0)
    {
      v173 = *(unsigned int *)(v613 + 20);
      if ((_DWORD)v173)
      {
        v174 = 0;
        v175 = (unsigned int *)((char *)v699 + 4);
        while (1)
        {
          v177 = *v175;
          v175 += 32;
          v176 = v177;
          v178 = v177 != -1 && v600 == v176;
          if (v178)
            break;
          if (v173 == ++v174)
            goto LABEL_284;
        }
        LODWORD(v173) = v174;
      }
LABEL_284:
      v179 = *(llvm::LLVMContext **)(*(_QWORD *)(*(_QWORD *)(v613 + 32)
                                               + 8 * (*(_DWORD *)(v613 + 16) + v173))
                                   + 8);
      v180 = *((_QWORD *)v588 + 1);
      v181 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(v21 + 144) + 144), *(_QWORD *)((unint64_t)v179 & 0xFFFFFFFFFFFFFFF0));
      v182 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(v21 + 144) + 144), *(_QWORD *)(v180 & 0xFFFFFFFFFFFFFFF0)) >= v181;
      v144 = v600;
      v59 = v594;
      if (!v182)
      {
        v183 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(v21 + 144) + 280), v179);
        *((_QWORD *)v652 - 1) = v183;
      }
    }
    v184 = sub_22E699F3C(*(_QWORD **)(v21 + 144));
    if ((SBYTE7(v667) & 0x80u) == 0)
      v185 = &__dst;
    else
      v185 = (__int128 *)__dst;
    if ((SBYTE7(v667) & 0x80u) == 0)
      v186 = BYTE7(v667) & 0x7F;
    else
      v186 = *((_QWORD *)&__dst + 1);
    v187 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v184 + 104))(v184, v21, v185, v186, *((_QWORD *)v652 - 1));
    if (v187)
    {
      *((_QWORD *)v652 - 1) = v187;
    }
    else
    {
      v188 = *(_QWORD *)(*(_QWORD *)(v21 + 144) + 208);
      *(_DWORD *)(v188 + 312) = *(_DWORD *)(v613 + 8);
      *(_DWORD *)(v188 + 316) = 5;
      if (*(char *)(v188 + 311) < 0)
      {
        **(_BYTE **)(v188 + 288) = 0;
        *(_QWORD *)(v188 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v188 + 288) = 0;
        *(_BYTE *)(v188 + 311) = 0;
      }
      v189 = (unsigned __int8 *)(v188 + 320);
      *(_OWORD *)v705 = (unint64_t)(v188 + 320);
      *(_QWORD *)&v705[16] = v188;
      *(_WORD *)&v705[24] = 1;
      *(_BYTE *)(v188 + 320) = 0;
      *(_DWORD *)(v188 + 664) = 0;
      v190 = *(unsigned int *)(v188 + 776);
      if ((_DWORD)v190)
      {
        v191 = *(_QWORD *)(v188 + 768);
        v192 = 56 * v190;
        do
        {
          if (*(char *)(v191 + v192 - 9) < 0)
            operator delete(*(void **)(v191 + v192 - 32));
          v192 -= 56;
        }
        while (v192);
        v189 = *(unsigned __int8 **)v705;
        *(_DWORD *)(v188 + 776) = 0;
        v193 = *((_QWORD *)v588 + 1);
        v144 = v600;
        v59 = v594;
        if (!v189)
        {
          v189 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&v705[8]);
          *(_QWORD *)v705 = v189;
        }
      }
      else
      {
        *(_DWORD *)(v188 + 776) = 0;
        v193 = *((_QWORD *)v588 + 1);
        v144 = v600;
      }
      v189[*v189 + 1] = 9;
      v194 = *(_QWORD *)v705;
      v195 = **(_BYTE **)v705;
      **(_BYTE **)v705 = v195 + 1;
      *(_QWORD *)(v194 + 8 * v195 + 16) = v193;
      if ((SBYTE7(v667) & 0x80u) == 0)
        v196 = &__dst;
      else
        v196 = (__int128 *)__dst;
      if ((SBYTE7(v667) & 0x80u) == 0)
        v197 = BYTE7(v667) & 0x7F;
      else
        v197 = *((_QWORD *)&__dst + 1);
      sub_22E3B89A8((unsigned __int8 **)v705, v196, v197);
      sub_22E3BB0B8((uint64_t)v705);
    }
    v198 = (llvm::Type *)*((_QWORD *)v652 - 1);
    if (v198)
      v199 = (*((_DWORD *)v198 + 2) & 0xFE) == 18;
    else
      v199 = 0;
    if (v199)
    {
      v200 = *(unsigned int *)(v21 + 6056);
      PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v198);
      if (PrimitiveSizeInBits <= v200)
        v202 = v200;
      else
        v202 = PrimitiveSizeInBits;
      *(_DWORD *)(v21 + 6056) = v202;
    }
    v23 = v576;
LABEL_322:
    if ((*v59 & 4) == 0)
    {
      v26 = v610;
      v28 = v615;
      v31 = v592;
      v29 = v598;
      goto LABEL_410;
    }
    std::string::push_back(&v644, 44);
    v203 = *(_QWORD *)(*(_QWORD *)(v613 + 32) + 8 * v144);
    v639[6] = v679;
    v639[7] = v680;
    v640 = v681;
    v639[2] = *(_OWORD *)&v676[32];
    v639[3] = *(_OWORD *)&v676[48];
    v639[4] = v677;
    v639[5] = v678;
    v639[0] = *(_OWORD *)v676;
    v639[1] = *(_OWORD *)&v676[16];
    v204 = *(llvm::LLVMContext **)(v203 + 8);
    sub_22EFF605C(v203);
    v206 = (llvm::Type **)sub_22E5EE010((_QWORD *)v21, *(_DWORD *)v59, (uint64_t)v639, v204, &v644, v205);
    v595 = v207;
    v208 = sub_22E699F3C(*(_QWORD **)(v21 + 144));
    if ((SBYTE7(v667) & 0x80u) == 0)
      v209 = &__dst;
    else
      v209 = (__int128 *)__dst;
    if ((SBYTE7(v667) & 0x80u) == 0)
      v210 = BYTE7(v667) & 0x7F;
    else
      v210 = *((_QWORD *)&__dst + 1);
    v211 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, llvm::Type *))(*(_QWORD *)v208 + 104))(v208, v21, v209, v210, *v206);
    if (v211)
    {
      *(_WORD *)&v705[32] = 257;
      v206 = (llvm::Type **)sub_22E3C1740(v574, 49, (uint64_t)v206, v211, (uint64_t)v705);
    }
    v212 = *v206;
    if (*v206 && (*((_DWORD *)v212 + 2) & 0xFE) == 0x12)
    {
      v213 = *(unsigned int *)(v21 + 6056);
      v214 = llvm::Type::getPrimitiveSizeInBits(v212);
      if (v214 <= v213)
        v215 = v213;
      else
        v215 = v214;
      *(_DWORD *)(v21 + 6056) = v215;
    }
    if ((*(_DWORD *)v59 & 2) == 0)
      goto LABEL_343;
    v216 = (void *)(BYTE7(v662) & 0x7F);
    if (SBYTE7(v662) < 0)
      v216 = v661[1];
    if ((*(_DWORD *)v59 & 0x20) != 0 || !v216)
    {
      v225 = &v669[21];
      v226 = v600;
      if (v600)
      {
        do
        {
          *--v225 = (v226 % 0xA) | 0x30;
          v227 = v226 > 9;
          v226 /= 0xAuLL;
        }
        while (v227);
      }
      else
      {
        v669[20] = 48;
        v225 = &v669[20];
      }
      sub_22E3B4274(v705, v225, &v669[21], &v669[21] - v225);
      if (v705[23] >= 0)
        v254 = v705;
      else
        v254 = *(const std::string::value_type **)v705;
      if (v705[23] >= 0)
        v255 = v705[23] & 0x7F;
      else
        v255 = *(_QWORD *)&v705[8];
      std::string::append(&v644, v254, v255);
      if ((v705[23] & 0x80000000) != 0)
        operator delete(*(void **)v705);
    }
    else
    {
LABEL_343:
      if ((SBYTE7(v667) & 0x80u) == 0)
        v217 = (const std::string::value_type *)&__dst;
      else
        v217 = (const std::string::value_type *)__dst;
      if ((SBYTE7(v667) & 0x80u) == 0)
        v218 = BYTE7(v667) & 0x7F;
      else
        v218 = *((_QWORD *)&__dst + 1);
      std::string::append(&v644, v217, v218);
    }
    v219 = *v206;
    v26 = v610;
    v28 = v615;
    v31 = v592;
    v29 = v598;
    v608 = (unsigned __int8 *)v24;
    if ((unint64_t)v32 < *(_QWORD *)v579)
    {
      *(_QWORD *)v32 = v219;
      v589 = v32 + 8;
      v21 = a1;
      v220 = v582;
      goto LABEL_373;
    }
    v221 = (v32 - v592) >> 3;
    v222 = v221 + 1;
    if ((unint64_t)(v221 + 1) >> 61)
      goto LABEL_1038;
    if ((uint64_t)(*(_QWORD *)v579 - (_QWORD)v592) >> 2 > v222)
      v222 = (uint64_t)(*(_QWORD *)v579 - (_QWORD)v592) >> 2;
    if (*(_QWORD *)v579 - (_QWORD)v592 >= 0x7FFFFFFFFFFFFFF8uLL)
      v223 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v223 = v222;
    if (v223)
    {
      if (v223 >> 61)
        goto LABEL_1039;
      v224 = (char *)operator new(8 * v223);
      v26 = v610;
      v28 = v615;
      v31 = v592;
      v29 = v598;
    }
    else
    {
      v224 = 0;
    }
    v228 = &v224[8 * v221];
    *(_QWORD *)v228 = v219;
    v589 = v228 + 8;
    v220 = v582;
    if (v32 == v31)
    {
      v21 = a1;
    }
    else
    {
      v21 = a1;
      do
      {
        v229 = *((_QWORD *)v32 - 1);
        v32 -= 8;
        *((_QWORD *)v228 - 1) = v229;
        v228 -= 8;
      }
      while (v32 != v31);
    }
    *(_QWORD *)v579 = &v224[8 * v223];
    if (v31)
    {
      operator delete(v31);
      v29 = v598;
      v28 = v615;
      v26 = v610;
    }
    v31 = v228;
LABEL_373:
    if (v30 < v578)
    {
      *(_QWORD *)v30 = v595;
      v230 = v30 + 8;
      goto LABEL_391;
    }
    v231 = (v30 - v29) >> 3;
    v232 = v231 + 1;
    if ((unint64_t)(v231 + 1) >> 61)
      goto LABEL_1038;
    if ((v578 - v29) >> 2 > v232)
      v232 = (v578 - v29) >> 2;
    if ((unint64_t)(v578 - v29) >= 0x7FFFFFFFFFFFFFF8)
      v233 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v233 = v232;
    if (v233)
    {
      if (v233 >> 61)
        goto LABEL_1039;
      v234 = v31;
      v235 = (char *)operator new(8 * v233);
      v26 = v610;
      v28 = v615;
      v31 = v234;
      v29 = v598;
    }
    else
    {
      v235 = 0;
    }
    v236 = &v235[8 * v231];
    *(_QWORD *)v236 = v595;
    v230 = v236 + 8;
    while (v30 != v29)
    {
      v237 = *((_QWORD *)v30 - 1);
      v30 -= 8;
      *((_QWORD *)v236 - 1) = v237;
      v236 -= 8;
    }
    v578 = &v235[8 * v233];
    if (v29)
    {
      v238 = v31;
      operator delete(v29);
      v31 = v238;
      v28 = v615;
      v26 = v610;
    }
    v29 = v236;
LABEL_391:
    if (v220 >= v577)
    {
      v239 = (v220 - v587) >> 3;
      v240 = v239 + 1;
      if (!((unint64_t)(v239 + 1) >> 61))
      {
        if ((v577 - v587) >> 2 > v240)
          v240 = (v577 - v587) >> 2;
        if ((unint64_t)(v577 - v587) >= 0x7FFFFFFFFFFFFFF8)
          v241 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v241 = v240;
        if (v241)
        {
          if (v241 >> 61)
            goto LABEL_1039;
          v242 = v29;
          v243 = v31;
          v244 = (char *)operator new(8 * v241);
          v26 = v610;
          v28 = v615;
          v31 = v243;
          v29 = v242;
          v220 = v582;
        }
        else
        {
          v244 = 0;
        }
        v245 = &v244[8 * v239];
        *(_QWORD *)v245 = v206;
        v246 = v245 + 8;
        while (v220 != v587)
        {
          v247 = *((_QWORD *)v220 - 1);
          v220 -= 8;
          *((_QWORD *)v245 - 1) = v247;
          v245 -= 8;
        }
        v577 = &v244[8 * v241];
        if (v587)
        {
          v248 = v31;
          v249 = v29;
          operator delete(v587);
          v29 = v249;
          v31 = v248;
          v28 = v615;
          v26 = v610;
        }
        v582 = v246;
        v587 = v245;
        v32 = v589;
        v30 = v230;
        v21 = a1;
        goto LABEL_409;
      }
      goto LABEL_1038;
    }
    *(_QWORD *)v220 = v206;
    v582 = v220 + 8;
    v32 = v589;
    v30 = v230;
LABEL_409:
    v24 = (uint64_t *)v608;
    v144 = v600;
LABEL_410:
    if (SBYTE7(v662) < 0)
    {
      v250 = v31;
      v251 = v29;
      operator delete(v661[0]);
      v29 = v251;
      v144 = v600;
      v31 = v250;
      v28 = v615;
      v26 = v610;
    }
    if (SBYTE7(v667) < 0)
    {
      v252 = v31;
      v253 = v29;
      operator delete((void *)__dst);
      v29 = v253;
      v144 = v600;
      v31 = v252;
      v28 = v615;
      v26 = v610;
    }
    v22 = (void *)(v144 + 1);
  }
  while (v22 != v584);
LABEL_470:
  v599 = v29;
  v593 = v31;
  v616 = (llvm::Type ***)v28;
  v611 = v26;
  v284 = (unsigned __int8 *)v613;
  if (*(_BYTE *)v613 == 2 && *(unsigned __int8 *)(*(_QWORD *)(v21 + 1608) + 72) <= 1u)
  {
    v285 = *(_QWORD *)(v21 + 1616);
    v286 = *(_QWORD *)(*(_QWORD *)(v21 + 144) + 144);
    v287 = *(_OWORD *)(v21 + 1752);
    *(_OWORD *)v705 = *(_OWORD *)(v21 + 1736);
    *(_OWORD *)&v705[16] = v287;
    *(_OWORD *)&v705[32] = *(_OWORD *)(v21 + 1768);
    memset(&v676[8], 0, 28);
    *(_QWORD *)&v676[48] = 0;
    *(_QWORD *)&v676[40] = 0;
    v677 = 0uLL;
    *(_QWORD *)((char *)&v678 + 4) = 2;
    *(_DWORD *)v676 = 0;
    v680 = 0u;
    v679 = 0u;
    *(_DWORD *)v669 = 0;
    memset(&v669[8], 0, 32);
    sub_22E3C113C((uint64_t)v676, (__int128 *)v705, v285, 2, (__int128 *)v669, v286);
    v288 = sub_22E699F3C(*(_QWORD **)(v21 + 144));
    v637[2] = *(_OWORD *)&v676[32];
    v637[3] = *(_OWORD *)&v676[48];
    v638 = v681;
    v637[6] = v679;
    v637[7] = v680;
    v637[4] = v677;
    v637[5] = v678;
    v637[0] = *(_OWORD *)v676;
    v637[1] = *(_OWORD *)&v676[16];
    (*(void (**)(uint64_t, uint64_t, _OWORD *, std::string *, void **, void **, void **, std::string *, _DWORD))(*(_QWORD *)v288 + 120))(v288, v21, v637, &v657, &v651, &v648, &v654, &v658, *(_DWORD *)(v613 + 16));
    *(_BYTE *)(v21 + 1883) = 1;
  }
  v609 = (unsigned __int8 *)v24;
  v581 = *(unsigned int *)(v613 + 20);
  if ((_DWORD)v581)
  {
    v289 = 0;
    v585 = (uint64_t *)(v21 + 272);
    while (1)
    {
      if (*v284 - 1 <= 1)
        v24 = *(uint64_t **)(*((_QWORD *)v284 + 4) + 8 * (*((_DWORD *)v284 + 4) + v289));
      v601 = (unsigned int *)v699;
      v290 = (char *)v699 + 128 * v289;
      v596 = (*v290 & 1) == 0;
      v291 = *((_BYTE *)&v657.__r_.__value_.__s + 23) & 0x7F;
      if ((v657.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v291 = v657.__r_.__value_.__l.__size_;
      if (v291)
        std::string::push_back(&v657, 44);
      v292 = sub_22F0D70AC(v284, v289);
      if (v293 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_1038;
      v294 = v292;
      v295 = (llvm::Type **)v293;
      if (v293 >= 0x17)
        break;
      v669[23] = v293;
      v296 = v669;
      if (v293)
        goto LABEL_488;
LABEL_489:
      *((_BYTE *)v295 + (_QWORD)v296) = 0;
      if (v669[23] >= 0)
        v300 = v669;
      else
        v300 = *(std::string::value_type **)v669;
      sub_22E5EE304((std::string *)v676, v300, *(_QWORD *)(v21 + 152), (uint64_t)&v702);
      if ((v669[23] & 0x80000000) != 0)
        operator delete(*(void **)v669);
      *(_OWORD *)v669 = *(_OWORD *)v676;
      *(_QWORD *)&v669[16] = *(_QWORD *)&v676[16];
      v301 = *(_QWORD *)(v21 + 144);
      v302 = sub_22EFFF40C((unsigned __int8 *)v24, *(_QWORD *)(v301 + 144));
      sub_22E5EE548(v676, (uint64_t)v669, v302, *(_QWORD *)(v21 + 152), v301, (uint64_t)v284, 0, 0);
      if ((v669[23] & 0x80000000) != 0)
        operator delete(*(void **)v669);
      *(_QWORD *)&v669[16] = *(_QWORD *)&v676[16];
      *(_OWORD *)v669 = *(_OWORD *)v676;
      if ((v676[23] & 0x80000000) != 0)
      {
        sub_22E3BB2B4(&__dst, *(void **)v669, *(unint64_t *)&v669[8]);
      }
      else
      {
        v303 = *(__n128 *)v669;
        __dst = *(_OWORD *)v669;
        *(_QWORD *)&v667 = *(_QWORD *)&v669[16];
      }
      v304 = *(_DWORD *)v290 & 3;
      if (!v304)
      {
        if ((*(_DWORD *)v290 & 0x10) != 0)
        {
          *(_WORD *)v676 = 0;
          *(_QWORD *)&v676[8] = 0;
          *(_DWORD *)&v676[16] = 0;
          sub_22F005120((unsigned __int8 *)v24, (uint64_t)v676, *(_QWORD *)(*(_QWORD *)(v21 + 144) + 144), 1);
          *(_DWORD *)&v705[8] = 1;
          *(_QWORD *)v705 = 0;
          v705[12] = 0;
          v371 = sub_22F364C68((uint64_t)&v676[16], (llvm::APInt *)v705, v24[1], *(_QWORD *)(*(_QWORD *)(v21 + 144) + 144));
          v372 = v371;
          if (v371)
            v295 = (llvm::Type **)llvm::ConstantInt::get();
          if (*(_DWORD *)&v705[8] >= 0x41u && *(_QWORD *)v705)
            MEMORY[0x2348A0E84](*(_QWORD *)v705, 0x1000C8000313F17);
          if (*(_DWORD *)&v676[16] >= 2u)
            sub_22EF53BC0((uint64_t *)&v676[16]);
          if ((v372 & 1) != 0)
            goto LABEL_511;
        }
        *(_WORD *)v676 = 0;
        *(_QWORD *)&v676[8] = 0;
        *(_DWORD *)&v676[16] = 0;
        v305 = sub_22F00554C((uint64_t)v24, (uint64_t)v676, *(_QWORD *)(*(_QWORD *)(v21 + 144) + 144), 0, 0);
        v306 = v305;
        if (v305)
          v295 = (llvm::Type **)llvm::ConstantInt::get();
        if (*(_DWORD *)&v676[16] >= 2u)
          sub_22EF53BC0((uint64_t *)&v676[16]);
        if (v306)
          goto LABEL_511;
        v304 = *(_DWORD *)v290 & 3;
      }
      if (v304 != 1 && !sub_22E619D68(v24[1]) || *(unsigned __int8 *)v24 == 133)
      {
        *(_QWORD *)v676 = v21;
        *(_QWORD *)&v676[8] = v585;
        v676[16] = 0;
        *(_QWORD *)&v676[24] = *(_QWORD *)(*(_QWORD *)(v21 + 144) + 232);
        v295 = (llvm::Type **)sub_22E50E974(v676, v24, v303);
LABEL_511:
        v590 = 0;
        goto LABEL_513;
      }
      v307 = sub_22EFFF40C((unsigned __int8 *)v24, *(_QWORD *)(*(_QWORD *)(v21 + 144) + 144));
      sub_22E4D8D7C(v676);
      v708 = v679;
      v709 = v680;
      v710 = v681;
      *(_OWORD *)&v705[32] = *(_OWORD *)&v676[32];
      *(_OWORD *)&v705[48] = *(_OWORD *)&v676[48];
      v706 = v677;
      v707 = v678;
      *(_OWORD *)v705 = *(_OWORD *)v676;
      *(_OWORD *)&v705[16] = *(_OWORD *)&v676[16];
      v308 = (llvm::LLVMContext *)*((_QWORD *)v307 + 1);
      sub_22EFF605C((uint64_t)v307);
      v295 = (llvm::Type **)sub_22E5EE010((_QWORD *)v21, *(_DWORD *)v290, (uint64_t)v705, v308, &v657, v309);
      v590 = v310;
LABEL_513:
      v311 = v601[32 * v289 + 1];
      if ((_DWORD)v311 != -1)
      {
        v312 = *(llvm::LLVMContext **)(*(_QWORD *)(*((_QWORD *)v284 + 4) + 8 * v311) + 8);
        v313 = v24[1];
        v314 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(v21 + 144) + 144), *(_QWORD *)((unint64_t)v312 & 0xFFFFFFFFFFFFFFF0));
        if (v314 <= sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(v21 + 144) + 144), *(_QWORD *)(v313 & 0xFFFFFFFFFFFFFFF0)))
        {
          v284 = (unsigned __int8 *)v613;
          v21 = a1;
        }
        else
        {
          v21 = a1;
          if (*((_BYTE *)*v295 + 8) == 15)
          {
            v315 = *(_QWORD *)(a1 + 88);
            *(_WORD *)&v676[32] = 257;
            v295 = (llvm::Type **)sub_22E3C1740(v585, 47, (uint64_t)v295, v315, (uint64_t)v676);
          }
          v284 = (unsigned __int8 *)v613;
          v316 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 144) + 280), v312);
          v317 = *(unsigned __int8 *)(v316 + 8);
          if (v317 == 15)
          {
            v321 = *(_QWORD *)(a1 + 88);
            *(_WORD *)&v676[32] = 257;
            v319 = v585;
            v320 = (uint64_t)v295;
LABEL_522:
            v322 = sub_22E3C1740(v319, 39, v320, v321, (uint64_t)v676);
LABEL_525:
            v295 = (llvm::Type **)v322;
          }
          else
          {
            v318 = v316;
            if (v317 == 13)
            {
              *(_WORD *)&v676[32] = 257;
              v319 = v585;
              v320 = (uint64_t)v295;
              v321 = v318;
              goto LABEL_522;
            }
            if (v317 <= 6)
            {
              *(_WORD *)&v676[32] = 257;
              v322 = sub_22E3E6054((uint64_t)v585, (uint64_t)v295, v316, (uint64_t)v676);
              goto LABEL_525;
            }
          }
        }
        std::string::operator=((std::string *)&__dst, (const std::string *)v642[0] + v311);
      }
      v323 = sub_22E699F3C(*(_QWORD **)(v21 + 144));
      if ((SBYTE7(v667) & 0x80u) == 0)
        v324 = &__dst;
      else
        v324 = (__int128 *)__dst;
      if ((SBYTE7(v667) & 0x80u) == 0)
        v325 = BYTE7(v667) & 0x7F;
      else
        v325 = *((_QWORD *)&__dst + 1);
      v326 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, llvm::Type *))(*(_QWORD *)v323 + 104))(v323, v21, v324, v325, *v295);
      if (v326)
      {
        *(_WORD *)&v676[32] = 257;
        v295 = (llvm::Type **)sub_22E3C1740(v585, 49, (uint64_t)v295, v326, (uint64_t)v676);
        v24 = (uint64_t *)v609;
      }
      else
      {
        v327 = *(_QWORD *)(*(_QWORD *)(v21 + 144) + 208);
        *(_DWORD *)(v327 + 312) = *((_DWORD *)v284 + 2);
        *(_DWORD *)(v327 + 316) = 5;
        if (*(char *)(v327 + 311) < 0)
        {
          **(_BYTE **)(v327 + 288) = 0;
          *(_QWORD *)(v327 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v327 + 288) = 0;
          *(_BYTE *)(v327 + 311) = 0;
        }
        v328 = (unsigned __int8 *)(v327 + 320);
        *(_OWORD *)v676 = (unint64_t)(v327 + 320);
        *(_QWORD *)&v676[16] = v327;
        *(_WORD *)&v676[24] = 1;
        *(_BYTE *)(v327 + 320) = 0;
        *(_DWORD *)(v327 + 664) = 0;
        v329 = *(unsigned int *)(v327 + 776);
        if ((_DWORD)v329)
        {
          v330 = *(_QWORD *)(v327 + 768);
          v331 = 56 * v329;
          do
          {
            if (*(char *)(v330 + v331 - 9) < 0)
              operator delete(*(void **)(v330 + v331 - 32));
            v331 -= 56;
          }
          while (v331);
          v328 = *(unsigned __int8 **)v676;
          *(_DWORD *)(v327 + 776) = 0;
          v332 = v24[1];
          if (!v328)
          {
            v328 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&v676[8]);
            *(_QWORD *)v676 = v328;
          }
        }
        else
        {
          *(_DWORD *)(v327 + 776) = 0;
          v332 = v24[1];
        }
        v24 = (uint64_t *)v609;
        v328[*v328 + 1] = 9;
        v333 = *(_QWORD *)v676;
        v334 = **(_BYTE **)v676;
        **(_BYTE **)v676 = v334 + 1;
        *(_QWORD *)(v333 + 8 * v334 + 16) = v332;
        if (v669[23] >= 0)
          v335 = v669;
        else
          v335 = *(_BYTE **)v669;
        if (v669[23] >= 0)
          v336 = v669[23] & 0x7F;
        else
          v336 = *(_QWORD *)&v669[8];
        sub_22E3B89A8((unsigned __int8 **)v676, v335, v336);
        sub_22E3BB0B8((uint64_t)v676);
      }
      v337 = *v295;
      if (*v295 && (*((_DWORD *)v337 + 2) & 0xFE) == 0x12)
      {
        v338 = *(unsigned int *)(v21 + 6056);
        v339 = llvm::Type::getPrimitiveSizeInBits(*v295);
        if (v339 <= v338)
          v340 = v338;
        else
          v340 = v339;
        *(_DWORD *)(v21 + 6056) = v340;
      }
      v341 = v611;
      v342 = (char *)v616;
      if (v25 >= (uint64_t *)v605)
      {
        v343 = v25 - v611;
        v344 = v343 + 1;
        if ((unint64_t)(v343 + 1) >> 61)
          goto LABEL_1038;
        if ((v605 - (char *)v611) >> 2 > v344)
          v344 = (v605 - (char *)v611) >> 2;
        if ((unint64_t)(v605 - (char *)v611) >= 0x7FFFFFFFFFFFFFF8)
          v345 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v345 = v344;
        if (v345)
        {
          if (v345 >> 61)
            goto LABEL_1039;
          v346 = (char *)operator new(8 * v345);
          v341 = v611;
          v342 = (char *)v616;
        }
        else
        {
          v346 = 0;
        }
        v347 = (llvm::Type **)&v346[8 * v343];
        *v347 = v337;
        v348 = (uint64_t *)(v347 + 1);
        if (v25 != v341)
        {
          do
          {
            v349 = (llvm::Type *)*--v25;
            *--v347 = v349;
          }
          while (v25 != v341);
          v25 = v341;
        }
        v341 = (uint64_t *)v347;
        v605 = &v346[8 * v345];
        if (v25)
        {
          v350 = (uint64_t *)v347;
          operator delete(v25);
          v342 = (char *)v616;
          v341 = v350;
        }
        v25 = v348;
      }
      else
      {
        *v25++ = (uint64_t)v337;
      }
      v611 = v341;
      v351 = v646;
      if (v646 >= v647)
      {
        v353 = (char *)v645;
        v354 = (v646 - (_BYTE *)v645) >> 3;
        v355 = v354 + 1;
        if ((unint64_t)(v354 + 1) >> 61)
          goto LABEL_1038;
        v356 = v647 - (_BYTE *)v645;
        if ((v647 - (_BYTE *)v645) >> 2 > v355)
          v355 = v356 >> 2;
        if ((unint64_t)v356 >= 0x7FFFFFFFFFFFFFF8)
          v357 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v357 = v355;
        if (v357)
        {
          if (v357 >> 61)
            goto LABEL_1039;
          v358 = (char *)operator new(8 * v357);
          v342 = (char *)v616;
        }
        else
        {
          v358 = 0;
        }
        v359 = &v358[8 * v354];
        *(_QWORD *)v359 = v590;
        v352 = v359 + 8;
        if (v351 != v353)
        {
          do
          {
            v360 = *((_QWORD *)v351 - 1);
            v351 -= 8;
            *((_QWORD *)v359 - 1) = v360;
            v359 -= 8;
          }
          while (v351 != v353);
          v351 = (char *)v645;
        }
        v645 = v359;
        v647 = &v358[8 * v357];
        if (v351)
        {
          operator delete(v351);
          v342 = (char *)v616;
        }
      }
      else
      {
        *(_QWORD *)v646 = v590;
        v352 = v351 + 8;
      }
      v646 = v352;
      if (v27 >= (llvm::Type ***)v603)
      {
        v362 = ((char *)v27 - v342) >> 3;
        v363 = v362 + 1;
        v21 = a1;
        if ((unint64_t)(v362 + 1) >> 61)
          goto LABEL_1038;
        if ((v603 - v342) >> 2 > v363)
          v363 = (v603 - v342) >> 2;
        if ((unint64_t)(v603 - v342) >= 0x7FFFFFFFFFFFFFF8)
          v364 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v364 = v363;
        if (v364)
        {
          if (v364 >> 61)
            goto LABEL_1039;
          v365 = (char *)operator new(8 * v364);
          v342 = (char *)v616;
        }
        else
        {
          v365 = 0;
        }
        v366 = (llvm::Type ***)&v365[8 * v362];
        *v366 = v295;
        v367 = v366 + 1;
        if (v27 == (llvm::Type ***)v342)
        {
          v361 = v596;
        }
        else
        {
          v361 = v596;
          do
          {
            v368 = *--v27;
            *--v366 = v368;
          }
          while (v27 != (llvm::Type ***)v342);
          v27 = (llvm::Type ***)v342;
        }
        v616 = v366;
        v603 = &v365[8 * v364];
        if (v27)
          operator delete(v27);
        v27 = v367;
      }
      else
      {
        *v27++ = v295;
        v21 = a1;
        v361 = v596;
      }
      if (v669[23] >= 0)
        v369 = v669;
      else
        v369 = *(const std::string::value_type **)v669;
      if (v669[23] >= 0)
        v370 = v669[23] & 0x7F;
      else
        v370 = *(_QWORD *)&v669[8];
      std::string::append(&v657, v369, v370);
      if (SBYTE7(v667) < 0)
        operator delete((void *)__dst);
      if ((v669[23] & 0x80000000) != 0)
        operator delete(*(void **)v669);
      v591 &= v361;
      if (++v289 == v581)
        goto LABEL_635;
    }
    v297 = (v293 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v293 | 7) != 0x17)
      v297 = v293 | 7;
    v298 = v297 + 1;
    v296 = operator new(v297 + 1);
    v299 = v298 | 0x8000000000000000;
    v284 = (unsigned __int8 *)v613;
    *(_QWORD *)&v669[16] = v299;
    *(_QWORD *)v669 = v296;
    *(_QWORD *)&v669[8] = v295;
LABEL_488:
    memmove(v296, v294, (size_t)v295);
    goto LABEL_489;
  }
LABEL_635:
  if (((v582 - v587) & 0x7FFFFFFF8) != 0)
  {
    v373 = 0;
    v374 = (char *)v611;
    v375 = (char *)v616;
    v376 = v593;
    v377 = v599;
    do
    {
      v378 = v375;
      if (v25 >= (uint64_t *)v605)
      {
        v379 = ((char *)v25 - v374) >> 3;
        v380 = v379 + 1;
        if ((unint64_t)(v379 + 1) >> 61)
          goto LABEL_1038;
        if ((v605 - v374) >> 2 > v380)
          v380 = (v605 - v374) >> 2;
        if ((unint64_t)(v605 - v374) >= 0x7FFFFFFFFFFFFFF8)
          v381 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v381 = v380;
        if (v381)
        {
          if (v381 >> 61)
            goto LABEL_1039;
          v382 = (char *)operator new(8 * v381);
          v375 = v378;
          v376 = v593;
          v377 = v599;
        }
        else
        {
          v382 = 0;
        }
        v383 = &v382[8 * v379];
        *(_QWORD *)v383 = *(_QWORD *)&v376[8 * v373];
        v384 = (uint64_t *)(v383 + 8);
        if (v25 != (uint64_t *)v374)
        {
          do
          {
            v385 = *--v25;
            *((_QWORD *)v383 - 1) = v385;
            v383 -= 8;
          }
          while (v25 != (uint64_t *)v374);
          v25 = (uint64_t *)v374;
        }
        v374 = v383;
        v605 = &v382[8 * v381];
        if (v25)
        {
          operator delete(v25);
          v377 = v599;
          v376 = v593;
          v375 = v378;
        }
        v25 = v384;
      }
      else
      {
        *v25++ = *(_QWORD *)&v376[8 * v373];
      }
      v386 = v646;
      if (v646 >= v647)
      {
        v388 = (char *)v645;
        v389 = (v646 - (_BYTE *)v645) >> 3;
        v390 = v389 + 1;
        if ((unint64_t)(v389 + 1) >> 61)
          goto LABEL_1038;
        v391 = v647 - (_BYTE *)v645;
        if ((v647 - (_BYTE *)v645) >> 2 > v390)
          v390 = v391 >> 2;
        if ((unint64_t)v391 >= 0x7FFFFFFFFFFFFFF8)
          v392 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v392 = v390;
        if (v392)
        {
          if (v392 >> 61)
            goto LABEL_1039;
          v393 = (char *)operator new(8 * v392);
          v375 = v378;
          v376 = v593;
          v377 = v599;
        }
        else
        {
          v393 = 0;
        }
        v394 = &v393[8 * v389];
        *(_QWORD *)v394 = *(_QWORD *)&v377[8 * v373];
        v387 = v394 + 8;
        if (v386 != v388)
        {
          do
          {
            v395 = *((_QWORD *)v386 - 1);
            v386 -= 8;
            *((_QWORD *)v394 - 1) = v395;
            v394 -= 8;
          }
          while (v386 != v388);
          v386 = (char *)v645;
        }
        v645 = v394;
        v647 = &v393[8 * v392];
        if (v386)
        {
          operator delete(v386);
          v377 = v599;
          v376 = v593;
          v375 = v378;
        }
        v24 = (uint64_t *)v609;
      }
      else
      {
        *(_QWORD *)v646 = *(_QWORD *)&v377[8 * v373];
        v387 = v386 + 8;
      }
      v646 = v387;
      if (v27 >= (llvm::Type ***)v603)
      {
        v397 = ((char *)v27 - v375) >> 3;
        v398 = v397 + 1;
        v284 = (unsigned __int8 *)v613;
        if ((unint64_t)(v397 + 1) >> 61)
          goto LABEL_1038;
        if ((v603 - v375) >> 2 > v398)
          v398 = (v603 - v375) >> 2;
        if ((unint64_t)(v603 - v375) >= 0x7FFFFFFFFFFFFFF8)
          v399 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v399 = v398;
        if (v399)
        {
          if (v399 >> 61)
            goto LABEL_1039;
          v400 = (char *)operator new(8 * v399);
          v375 = v378;
          v376 = v593;
          v377 = v599;
        }
        else
        {
          v400 = 0;
        }
        v401 = &v400[8 * v397];
        *(_QWORD *)v401 = *(_QWORD *)&v587[8 * v373];
        v396 = (uint64_t *)(v401 + 8);
        if (v27 != (llvm::Type ***)v375)
        {
          do
          {
            v402 = (uint64_t)*--v27;
            *((_QWORD *)v401 - 1) = v402;
            v401 -= 8;
          }
          while (v27 != (llvm::Type ***)v375);
          v27 = (llvm::Type ***)v375;
        }
        v375 = v401;
        v603 = &v400[8 * v399];
        if (v27)
        {
          v403 = v374;
          v404 = v401;
          operator delete(v27);
          v377 = v599;
          v376 = v593;
          v375 = v404;
          v374 = v403;
        }
      }
      else
      {
        *v27 = *(llvm::Type ***)&v587[8 * v373];
        v396 = (uint64_t *)(v27 + 1);
        v284 = (unsigned __int8 *)v613;
      }
      ++v373;
      v27 = (llvm::Type ***)v396;
    }
    while (v373 != ((unint64_t)(v582 - v587) >> 3));
  }
  else
  {
    v396 = (uint64_t *)v27;
    v374 = (char *)v611;
    v375 = (char *)v616;
  }
  v617 = (uint64_t *)v375;
  v612 = (uint64_t *)v374;
  if ((v644.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v405 = &v644;
  else
    v405 = (std::string *)v644.__r_.__value_.__r.__words[0];
  if ((v644.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v406 = *((_BYTE *)&v644.__r_.__value_.__s + 23) & 0x7F;
  else
    v406 = v644.__r_.__value_.__l.__size_;
  std::string::append(&v657, (const std::string::value_type *)v405, v406);
  *(_QWORD *)v676 = &v676[16];
  *(_QWORD *)&v676[8] = 0x1000000000;
  if (*v284 == 1 && (v407 = *((unsigned int *)v284 + 20), (_DWORD)v407))
  {
    v408 = *((_QWORD *)v284 + 4) + 8 * *((unsigned int *)v284 + 4) + 8 * *((unsigned int *)v284 + 5);
    v409 = v408 + 8 * v407;
    do
    {
      sub_22F28C650(a1, *(_QWORD *)(*(_QWORD *)v408 + 24), (__n128 *)v705);
      v411 = *(Function **)v705;
      v412 = *(unsigned int *)&v676[8];
      if (*(unsigned int *)&v676[8] >= (unint64_t)*(unsigned int *)&v676[12])
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v412 = *(unsigned int *)&v676[8];
      }
      *(_QWORD *)(*(_QWORD *)v676 + 8 * v412) = v411;
      ++*(_DWORD *)&v676[8];
      v413 = llvm::BlockAddress::get(*(llvm::BlockAddress **)(a1 + 1624), v411, v410);
      v414 = (uint64_t *)v413;
      if (v396 >= (uint64_t *)v603)
      {
        v415 = v617;
        v416 = v396 - v617;
        v417 = v416 + 1;
        if ((unint64_t)(v416 + 1) >> 61)
          goto LABEL_1038;
        if ((v603 - (char *)v617) >> 2 > v417)
          v417 = (v603 - (char *)v617) >> 2;
        if ((unint64_t)(v603 - (char *)v617) >= 0x7FFFFFFFFFFFFFF8)
          v418 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v418 = v417;
        if (v418)
        {
          if (v418 >> 61)
            goto LABEL_1039;
          v419 = (char *)operator new(8 * v418);
          v415 = v617;
        }
        else
        {
          v419 = 0;
        }
        v420 = &v419[8 * v416];
        *(_QWORD *)v420 = v414;
        v421 = (uint64_t *)(v420 + 8);
        if (v396 != v415)
        {
          do
          {
            v422 = *--v396;
            *((_QWORD *)v420 - 1) = v422;
            v420 -= 8;
          }
          while (v396 != v415);
          v396 = v415;
        }
        v617 = (uint64_t *)v420;
        v603 = &v419[8 * v418];
        if (v396)
          operator delete(v396);
        v396 = v421;
      }
      else
      {
        *v396++ = v413;
      }
      v423 = v612;
      v424 = *v414;
      if (v25 >= (uint64_t *)v605)
      {
        v425 = v25 - v612;
        v426 = v425 + 1;
        if ((unint64_t)(v425 + 1) >> 61)
          goto LABEL_1038;
        if ((v605 - (char *)v612) >> 2 > v426)
          v426 = (v605 - (char *)v612) >> 2;
        if ((unint64_t)(v605 - (char *)v612) >= 0x7FFFFFFFFFFFFFF8)
          v427 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v427 = v426;
        if (v427)
        {
          if (v427 >> 61)
            goto LABEL_1039;
          v428 = (char *)operator new(8 * v427);
          v423 = v612;
        }
        else
        {
          v428 = 0;
        }
        v429 = &v428[8 * v425];
        *(_QWORD *)v429 = v424;
        v430 = (uint64_t *)(v429 + 8);
        if (v25 == v423)
        {
          v423 = (uint64_t *)v429;
          v24 = (uint64_t *)v609;
        }
        else
        {
          v24 = (uint64_t *)v609;
          do
          {
            v431 = *--v25;
            *((_QWORD *)v429 - 1) = v431;
            v429 -= 8;
          }
          while (v25 != v423);
          v25 = v423;
          v423 = (uint64_t *)v429;
        }
        v605 = &v428[8 * v427];
        if (v25)
        {
          v432 = v423;
          operator delete(v25);
          v423 = v432;
        }
        v25 = v430;
      }
      else
      {
        *v25++ = v424;
        v24 = (uint64_t *)v609;
      }
      v433 = v646;
      v612 = v423;
      if (v646 >= v647)
      {
        v435 = (char *)v645;
        v436 = (v646 - (_BYTE *)v645) >> 3;
        v437 = v436 + 1;
        if ((unint64_t)(v436 + 1) >> 61)
          goto LABEL_1038;
        v438 = v647 - (_BYTE *)v645;
        if ((v647 - (_BYTE *)v645) >> 2 > v437)
          v437 = v438 >> 2;
        if ((unint64_t)v438 >= 0x7FFFFFFFFFFFFFF8)
          v439 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v439 = v437;
        if (v439)
        {
          if (v439 >> 61)
            goto LABEL_1039;
          v440 = (char *)operator new(8 * v439);
        }
        else
        {
          v440 = 0;
        }
        v441 = &v440[8 * v436];
        *(_QWORD *)v441 = 0;
        v434 = v441 + 8;
        if (v433 != v435)
        {
          do
          {
            v442 = *((_QWORD *)v433 - 1);
            v433 -= 8;
            *((_QWORD *)v441 - 1) = v442;
            v441 -= 8;
          }
          while (v433 != v435);
          v433 = (char *)v645;
        }
        v645 = v441;
        v647 = &v440[8 * v439];
        if (v433)
          operator delete(v433);
        v24 = (uint64_t *)v609;
      }
      else
      {
        *(_QWORD *)v646 = 0;
        v434 = v433 + 8;
      }
      v646 = v434;
      v443 = *((_BYTE *)&v657.__r_.__value_.__s + 23) & 0x7F;
      if ((v657.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v443 = v657.__r_.__value_.__l.__size_;
      if (v443)
        std::string::push_back(&v657, 44);
      std::string::push_back(&v657, 105);
      v408 += 8;
      v284 = (unsigned __int8 *)v613;
    }
    while (v408 != v409);
    *(_QWORD *)v705 = "asm.fallthrough";
    *(_WORD *)&v705[32] = 259;
    v444 = a1;
    v583 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v586 = 1;
  }
  else
  {
    v586 = 0;
    v583 = 0;
    v444 = a1;
  }
  v445 = *((_DWORD *)v284 + 6);
  if (v445)
  {
    v446 = 0;
    v447 = 0;
    v606 = *((_DWORD *)v284 + 6);
    while (1)
    {
      v448 = sub_22F0D710C(v284, v446);
      v450 = (const char *)v448;
      if (v449 == 2)
        break;
      if (v449 != 6)
        goto LABEL_782;
      if (*(_DWORD *)v448 == 1869440365 && *((_WORD *)v448 + 2) == 31090)
      {
        v575 = 0;
        v591 = 0;
        v454 = 6;
        goto LABEL_875;
      }
      if (*(_DWORD *)v448 != 1769434741 || *((_WORD *)v448 + 2) != 25710)
        goto LABEL_782;
      v447 = 1;
LABEL_880:
      if (++v446 == v445)
        goto LABEL_883;
    }
    if (*(_WORD *)v448 == 25443)
    {
      v454 = 2;
    }
    else
    {
LABEL_782:
      v450 = sub_22F1E7CDC(*(_QWORD *)(v444 + 152), (const char *)v448, v449, 0);
      v454 = v453;
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v444 + 144) + 184) + 31) & 2) != 0
        && (*(unsigned int (**)(_QWORD, const char *, std::string::size_type))(**(_QWORD **)(v444 + 152)
                                                                                        + 304))(*(_QWORD *)(v444 + 152), v450, v453))
      {
        v455 = v444;
        v456 = (unsigned __int8 *)v24;
        v457 = *(_QWORD *)(*(_QWORD *)(v455 + 144) + 208);
        *(_DWORD *)(v457 + 312) = *(_DWORD *)(v613 + 8);
        *(_DWORD *)(v457 + 316) = 143;
        v458 = v447;
        if (*(char *)(v457 + 311) < 0)
        {
          **(_BYTE **)(v457 + 288) = 0;
          *(_QWORD *)(v457 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v457 + 288) = 0;
          *(_BYTE *)(v457 + 311) = 0;
        }
        v635[0] = v457 + 320;
        v635[1] = 0;
        v635[2] = v457;
        v636 = 1;
        *(_BYTE *)(v457 + 320) = 0;
        *(_DWORD *)(v457 + 664) = 0;
        v459 = *(unsigned int *)(v457 + 776);
        if ((_DWORD)v459)
        {
          v460 = *(_QWORD *)(v457 + 768);
          v461 = 56 * v459;
          do
          {
            if (*(char *)(v460 + v461 - 9) < 0)
              operator delete(*(void **)(v460 + v461 - 32));
            v461 -= 56;
          }
          while (v461);
        }
        *(_DWORD *)(v457 + 776) = 0;
        sub_22E3BB0B8((uint64_t)v635);
        v447 = v458;
        v24 = (uint64_t *)v456;
        v444 = a1;
        v445 = v606;
      }
      if (*(_BYTE *)v613 == 2 && v454 == 3)
      {
        v463 = *(_WORD *)v450 == 24933 && v450[2] == 120;
        if (v463 || (*(_WORD *)v450 == 25701 ? (v464 = v450[2] == 120) : (v464 = 0), v464))
        {
          v465 = HIBYTE(v657.__r_.__value_.__r.__words[2]);
          if ((v657.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          {
            v466 = &v657;
          }
          else
          {
            v465 = v657.__r_.__value_.__l.__size_;
            v466 = (std::string *)v657.__r_.__value_.__r.__words[0];
          }
          v604 = v447;
          if (v465 >= 3)
          {
            v467 = (char *)v466 + v465;
            v468 = v466;
            v284 = (unsigned __int8 *)v613;
            do
            {
              v469 = (char *)memchr(v468, 61, v465 - 2);
              if (!v469)
                break;
              if (*(_WORD *)v469 == 9789 && v469[2] == 65)
              {
                if (v469 != v467 && v469 - (char *)v466 != -1)
                  goto LABEL_861;
                break;
              }
              v468 = (std::string *)(v469 + 1);
              v465 = v467 - (char *)v468;
            }
            while (v467 - (char *)v468 >= 3);
          }
          else
          {
            v284 = (unsigned __int8 *)v613;
          }
          if (v450)
          {
            BYTE7(v667) = 3;
            v471 = *(_WORD *)v450;
            WORD1(__dst) = *((unsigned __int8 *)v450 + 2);
            LOWORD(__dst) = v471;
          }
          else
          {
            v450 = 0;
            __dst = 0uLL;
            *(_QWORD *)&v667 = 0;
          }
          v472 = std::string::insert((std::string *)&__dst, 0, "={");
          v473 = v472->__r_.__value_.__r.__words[2];
          *(_OWORD *)v669 = *(_OWORD *)&v472->__r_.__value_.__l.__data_;
          *(_QWORD *)&v669[16] = v473;
          v472->__r_.__value_.__l.__size_ = 0;
          v472->__r_.__value_.__r.__words[2] = 0;
          v472->__r_.__value_.__r.__words[0] = 0;
          v474 = std::string::append((std::string *)v669, "}");
          *(std::string *)v705 = *v474;
          v474->__r_.__value_.__r.__words[0] = 0;
          v474->__r_.__value_.__l.__size_ = 0;
          v474->__r_.__value_.__r.__words[2] = 0;
          v475 = HIBYTE(v657.__r_.__value_.__r.__words[2]);
          if ((v657.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v476 = &v657;
          else
            v476 = (std::string *)v657.__r_.__value_.__r.__words[0];
          v477 = v705[23];
          v478 = *(void **)v705;
          if (v705[23] >= 0)
            v479 = v705;
          else
            v479 = *(char **)v705;
          if (v705[23] >= 0)
            v480 = v705[23] & 0x7F;
          else
            v480 = *(_QWORD *)&v705[8];
          if (v480)
          {
            if ((v657.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v475 = v657.__r_.__value_.__l.__size_;
            v481 = (char *)v476 + v475;
            if (v475 >= v480)
            {
              v602 = *(void **)v705;
              v484 = *v479;
              v597 = v476;
              v485 = v476;
              do
              {
                v486 = v475 - v480;
                if (v486 == -1)
                  break;
                v487 = (char *)memchr(v485, v484, v486 + 1);
                if (!v487)
                  break;
                v482 = v487;
                if (!memcmp(v487, v479, v480))
                  goto LABEL_848;
                v485 = (std::string *)(v482 + 1);
                v475 = v481 - (v482 + 1);
              }
              while (v475 >= v480);
              v482 = v481;
LABEL_848:
              v284 = (unsigned __int8 *)v613;
              v478 = v602;
              v476 = v597;
            }
            else
            {
              v482 = (char *)v476 + v475;
            }
            if (v482 == v481)
              v483 = -1;
            else
              v483 = v482 - (char *)v476;
          }
          else
          {
            v483 = 0;
          }
          v24 = (uint64_t *)v609;
          v447 = v604;
          if (v477 < 0)
            operator delete(v478);
          if ((v669[23] & 0x80000000) != 0)
            operator delete(*(void **)v669);
          v444 = a1;
          if (SBYTE7(v667) < 0)
            operator delete((void *)__dst);
          if (v483 != -1)
          {
            v488 = v483 + 1;
LABEL_860:
            std::string::insert(&v657, v488, "&");
LABEL_861:
            v445 = v606;
            goto LABEL_880;
          }
          v489 = HIBYTE(v657.__r_.__value_.__r.__words[2]);
          if ((v657.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          {
            v490 = &v657;
          }
          else
          {
            v489 = v657.__r_.__value_.__l.__size_;
            v490 = (std::string *)v657.__r_.__value_.__r.__words[0];
          }
          if (v489 >= 2)
          {
            v491 = (char *)v490 + v489;
            v492 = v490;
            do
            {
              v493 = (char *)memchr(v492, 61, v489 - 1);
              if (!v493)
                break;
              if (*(_WORD *)v493 == 16701)
              {
                if (v493 != v491 && v493 - (char *)v490 != -1)
                {
                  v488 = v493 - (char *)v490 + 1;
                  goto LABEL_860;
                }
                break;
              }
              v492 = (std::string *)(v493 + 1);
              v489 = v491 - (char *)v492;
            }
            while (v491 - (char *)v492 >= 2);
          }
          v454 = 3;
          v445 = v606;
        }
        else
        {
          v454 = 3;
        }
      }
    }
LABEL_875:
    v494 = *((_BYTE *)&v657.__r_.__value_.__s + 23) & 0x7F;
    if ((v657.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v494 = v657.__r_.__value_.__l.__size_;
    if (v494)
      std::string::push_back(&v657, 44);
    std::string::append(&v657, "~{");
    std::string::append(&v657, v450, v454);
    std::string::push_back(&v657, 125);
    v284 = (unsigned __int8 *)v613;
    goto LABEL_880;
  }
  LOBYTE(v447) = 0;
LABEL_883:
  v495 = v447;
  v496 = (const char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v444 + 152) + 376))(*(_QWORD *)(v444 + 152));
  v497 = strlen(v496);
  if (v497 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_1038;
  v498 = v497;
  if (v497 >= 0x17)
  {
    v500 = (v497 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v497 | 7) != 0x17)
      v500 = v497 | 7;
    v501 = v500 + 1;
    v499 = operator new(v500 + 1);
    v634 = v501 | 0x8000000000000000;
    v632 = v499;
    v633 = v498;
    goto LABEL_890;
  }
  HIBYTE(v634) = v497;
  v499 = &v632;
  if (v497)
LABEL_890:
    memmove(v499, v496, v498);
  *((_BYTE *)v499 + v498) = 0;
  v502 = HIBYTE(v634);
  v503 = v633;
  v504 = HIBYTE(v634) & 0x7F;
  if (v634 >= 0)
    v505 = HIBYTE(v634) & 0x7F;
  else
    v505 = v633;
  if (v505)
  {
    v506 = *((_BYTE *)&v657.__r_.__value_.__s + 23) & 0x7F;
    if ((v657.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v506 = v657.__r_.__value_.__l.__size_;
    if (v506)
    {
      std::string::push_back(&v657, 44);
      v502 = HIBYTE(v634);
      v503 = v633;
      v504 = HIBYTE(v634) & 0x7F;
    }
    if (v502 >= 0)
      v507 = (const std::string::value_type *)&v632;
    else
      v507 = (const std::string::value_type *)v632;
    if (v502 >= 0)
      v508 = v504;
    else
      v508 = v503;
    std::string::append(&v657, v507, v508);
  }
  if (v651 != v652 && v652 - (_BYTE *)v651 != 8)
    llvm::StructType::get();
  llvm::FunctionType::get();
  if (v284[13])
    v509 = 1;
  else
    v509 = *((_DWORD *)v284 + 4) == 0;
  v510 = v509;
  v511 = (llvm::InlineAsm *)llvm::InlineAsm::get();
  v512 = v511;
  v630 = 0;
  v629 = 0;
  v631 = 0;
  if (v586)
  {
    if (v511)
      llvm::InlineAsm::getFunctionType(v511);
    *(_WORD *)&v669[32] = 257;
    *(_WORD *)&v705[32] = 257;
    v567 = (llvm::Value *)sub_22F28C90C();
    sub_22F245A34((uint64_t *)(v444 + 272), (uint64_t)v567, (uint64_t)v669);
    sub_22E5ED9B4((_QWORD *)v444, v583, 0);
    sub_22E5EE950(v567, v510, 0, v575 & 1, v591 & 1, *(unsigned __int8 *)(v444 + 1898), (uint64_t)v284, &v651, (uint64_t)&v645, v444, &v629);
  }
  else if ((v495 & 1) != 0)
  {
    if (v511)
      FunctionType = llvm::InlineAsm::getFunctionType(v511);
    else
      FunctionType = 0;
    *(_WORD *)&v705[32] = 257;
    v568 = (llvm::Value *)sub_22F24F1F4((_QWORD *)v444, FunctionType, v512, (uint64_t)v617, v396 - v617, (uint64_t)v705);
    sub_22E5EE950(v568, v510, 1, v575 & 1, v591 & 1, *(unsigned __int8 *)(v444 + 1898), (uint64_t)v284, &v651, (uint64_t)&v645, v444, &v629);
  }
  else
  {
    if (v511)
      v513 = llvm::InlineAsm::getFunctionType(v511);
    else
      v513 = 0;
    sub_22E479DA0(v512, v444, v705);
    *(_WORD *)&v669[32] = 257;
    v514 = sub_22E47DDEC((uint64_t *)(v444 + 272), v513, (uint64_t)v512, (uint64_t)v617, v396 - v617, *(uint64_t *)v705, *(unsigned int *)&v705[8], (uint64_t)v669, 0);
    v515 = *(char **)v705;
    if (*(_DWORD *)&v705[8])
    {
      v516 = 48 * *(unsigned int *)&v705[8];
      v517 = v591;
      v518 = v575;
      do
      {
        v519 = &v515[v516];
        v520 = *(void **)&v515[v516 - 24];
        if (v520)
        {
          *((_QWORD *)v519 - 2) = v520;
          operator delete(v520);
        }
        if (*(v519 - 25) < 0)
          operator delete(*((void **)v519 - 6));
        v516 -= 48;
      }
      while (v516);
      v515 = *(char **)v705;
      v444 = a1;
    }
    else
    {
      v517 = v591;
      v518 = v575;
    }
    if (v515 != &v705[16])
      free(v515);
    sub_22E5EE950(v514, v510, 0, v518 & 1, v517 & 1, *(unsigned __int8 *)(v444 + 1898), (uint64_t)v284, &v651, (uint64_t)&v645, v444, &v629);
  }
  v521 = v629;
  if (((v630 - (_QWORD)v629) & 0x7FFFFFFF8) != 0)
  {
    v522 = 0;
    v523 = 0;
    v524 = (uint64_t *)(v444 + 272);
    v525 = ((unint64_t)(v630 - (_QWORD)v629) >> 3);
    while (1)
    {
      v526 = (uint64_t *)v521[v523];
      v527 = (unsigned __int8 *)*((_QWORD *)v648 + v523);
      if (*((unsigned __int8 **)v651 + v523) != v527)
      {
        v528 = v527[8];
        if (v528 <= 6)
        {
          *(_WORD *)&v705[32] = 257;
          v529 = sub_22E3E5FFC((uint64_t)v524, (uint64_t)v526, (uint64_t)v527, (uint64_t)v705);
          goto LABEL_952;
        }
        v530 = *(unsigned __int8 *)(*v526 + 8);
        if (v528 == 15)
        {
          if (v530 == 13)
          {
            DataLayout = llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a1 + 144) + 200));
            sub_22E3C304C(DataLayout, (uint64_t)v527);
            *(_QWORD *)v705 = v532;
            *(_QWORD *)&v705[8] = v533;
            llvm::TypeSize::operator unsigned long long();
            v534 = llvm::IntegerType::get();
            *(_WORD *)&v705[32] = 257;
            v535 = sub_22E3C1740(v524, 38, (uint64_t)v526, v534, (uint64_t)v705);
            *(_WORD *)&v705[32] = 257;
            v536 = (uint64_t *)(v444 + 272);
            v537 = 48;
            goto LABEL_951;
          }
        }
        else
        {
          if (v528 == 13 && v530 == 15)
          {
            v539 = llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a1 + 144) + 200));
            sub_22E3C304C(v539, *v526);
            *(_QWORD *)v705 = v540;
            *(_QWORD *)&v705[8] = v541;
            llvm::TypeSize::operator unsigned long long();
            v542 = llvm::IntegerType::get();
            *(_WORD *)&v705[32] = 257;
            v535 = sub_22E3C1740(v524, 47, (uint64_t)v526, v542, (uint64_t)v705);
            *(_WORD *)&v705[32] = 257;
            v536 = (uint64_t *)(v444 + 272);
            v537 = 38;
LABEL_951:
            v529 = sub_22E3C1740(v536, v537, v535, (uint64_t)v527, (uint64_t)v705);
LABEL_952:
            v526 = (uint64_t *)v529;
            goto LABEL_953;
          }
          if (v528 == 13)
          {
            *(_WORD *)&v705[32] = 257;
            v529 = sub_22E3E5C98(v524, (llvm::Type **)v526, (llvm::Type *)v527, (uint64_t)v705);
            goto LABEL_952;
          }
        }
        if ((v528 & 0xFE) == 0x12)
        {
          *(_WORD *)&v705[32] = 257;
          v536 = (uint64_t *)(v444 + 272);
          v537 = 49;
          v535 = (uint64_t)v526;
          goto LABEL_951;
        }
      }
LABEL_953:
      v707 = *(_OWORD *)((char *)v654 + v522 + 80);
      v708 = *(_OWORD *)((char *)v654 + v522 + 96);
      v709 = *(_OWORD *)((char *)v654 + v522 + 112);
      v710 = *(_QWORD *)((char *)v654 + v522 + 128);
      *(_OWORD *)&v705[16] = *(_OWORD *)((char *)v654 + v522 + 16);
      *(_OWORD *)&v705[32] = *(_OWORD *)((char *)v654 + v522 + 32);
      *(_OWORD *)&v705[48] = *(_OWORD *)((char *)v654 + v522 + 48);
      v706 = *(_OWORD *)((char *)v654 + v522 + 64);
      *(_OWORD *)v705 = *(_OWORD *)((char *)v654 + v522);
      if (v523 >= v698 || ((*((_QWORD *)v695 + (v523 >> 6)) >> v523) & 1) == 0)
        goto LABEL_959;
      v543 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), *(_QWORD *)(v24[v523] & 0xFFFFFFFFFFFFFFF0));
      v625[0] = *(_OWORD *)&v705[8];
      v625[1] = *(_OWORD *)&v705[24];
      v625[2] = *(_OWORD *)&v705[40];
      v544 = *((_QWORD *)v651 + v523);
      *(_WORD *)&v669[32] = 257;
      sub_22E3BEE6C(v524, v625, v544, (uint64_t)v669, (uint64_t)&v626);
      v545 = sub_22E699F3C(*(_QWORD **)(a1 + 144));
      if (((*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(*(_QWORD *)v545 + 112))(v545, a1, v527) & 1) == 0)
      {
        v546 = sub_22EF60A6C(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), v543, 0);
        if (v546 <= 0xF)
        {
          v549 = *(_QWORD *)(*(_QWORD *)(v613 + 32) + 8 * v523);
          v550 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 208);
          sub_22EFF605C(v549);
          *(_DWORD *)(v550 + 312) = v551;
          *(_DWORD *)(v550 + 316) = 4743;
          if (*(char *)(v550 + 311) < 0)
          {
            **(_BYTE **)(v550 + 288) = 0;
            *(_QWORD *)(v550 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v550 + 288) = 0;
            *(_BYTE *)(v550 + 311) = 0;
          }
          v24 = (uint64_t *)v609;
          v622[0] = v550 + 320;
          v622[1] = 0;
          v622[2] = v550;
          v623 = 1;
          *(_BYTE *)(v550 + 320) = 0;
          *(_DWORD *)(v550 + 664) = 0;
          v553 = *(unsigned int *)(v550 + 776);
          if ((_DWORD)v553)
          {
            v554 = *(_QWORD *)(v550 + 768);
            v555 = 56 * v553;
            do
            {
              if (*(char *)(v554 + v555 - 9) < 0)
                operator delete(*(void **)(v554 + v555 - 32));
              v555 -= 56;
            }
            while (v555);
          }
          *(_DWORD *)(v550 + 776) = 0;
          sub_22E3BB0B8((uint64_t)v622);
          break;
        }
        v547 = v546;
        *(_OWORD *)v661 = v626;
        v662 = v627;
        v663 = v628;
        sub_22E6281E0(*(_QWORD **)(a1 + 144), v546, (uint64_t)v659);
        __dst = *(_OWORD *)v661;
        v667 = v662;
        v668 = v663;
        v548 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
        v664[0] = v659[0];
        v664[1] = v659[1];
        v665 = v660;
        memset(&v669[8], 0, 28);
        *(_QWORD *)&v669[40] = 0;
        *(_QWORD *)&v670 = 0;
        v671 = 0uLL;
        *(_QWORD *)((char *)&v672 + 4) = 2;
        *(_DWORD *)v669 = 0;
        v673 = 0u;
        v674 = 0u;
        sub_22E3C113C((uint64_t)v669, &__dst, v547, 2, v664, v548);
        v708 = v673;
        v709 = v674;
        v710 = v675;
        *(_OWORD *)&v705[32] = *(_OWORD *)&v669[32];
        *(_OWORD *)&v705[48] = v670;
        v706 = v671;
        v707 = v672;
        *(_OWORD *)v705 = *(_OWORD *)v669;
        *(_OWORD *)&v705[16] = *(_OWORD *)&v669[16];
        v24 = (uint64_t *)v609;
LABEL_959:
        v620[0] = v526;
        v620[1] = 0;
        v621 &= 0xF8u;
        v618[6] = v708;
        v618[7] = v709;
        v619 = v710;
        v618[2] = *(_OWORD *)&v705[32];
        v618[3] = *(_OWORD *)&v705[48];
        v618[4] = v706;
        v618[5] = v707;
        v618[0] = *(_OWORD *)v705;
        v618[1] = *(_OWORD *)&v705[16];
        sub_22E4DAAE0(a1, v620, v618, 0, *(double *)&v705[16]);
        goto LABEL_960;
      }
      v624[0] = v626;
      v624[1] = v627;
      v624[2] = v628;
      sub_22E3BEDDC(v524, v526, v624, 0);
      v24 = (uint64_t *)v609;
LABEL_960:
      ++v523;
      v522 += 136;
      if (v525 == v523)
        goto LABEL_976;
    }
  }
  if (v521)
LABEL_976:
    operator delete(v521);
  if (SHIBYTE(v634) < 0)
    operator delete(v632);
  if (*(_BYTE **)v676 != &v676[16])
    free(*(void **)v676);
  sub_22E5EFB0C((uint64_t)&v692, v693);
  sub_22E3B9848((char **)&v682);
  *(_QWORD *)&v682 = v642;
  sub_22E3B3CC8((void ***)&v682);
  if (v599)
    operator delete(v599);
  if (v593)
    operator delete(v593);
  if (v587)
    operator delete(v587);
  if (SHIBYTE(v644.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v644.__r_.__value_.__l.__data_);
  if (v695 != v697)
    free(v695);
  if (v617)
    operator delete(v617);
  if (v645)
    operator delete(v645);
  if (v612)
    operator delete(v612);
  if (v648)
  {
    v649 = v648;
    operator delete(v648);
  }
  if (v651)
  {
    v652 = (char *)v651;
    operator delete(v651);
  }
  if (v24)
    operator delete(v24);
  if (v654)
  {
    v655 = (char *)v654;
    operator delete(v654);
  }
  if (SHIBYTE(v657.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v657.__r_.__value_.__l.__data_);
  v556 = (char *)v699;
  if ((_DWORD)v700)
  {
    v557 = 0;
    v558 = (unint64_t)v700 << 7;
    do
    {
      v559 = (void **)&v556[v558];
      if (v556[v558 - 1] < 0)
        operator delete(*(v559 - 3));
      if (*((char *)v559 - 25) < 0)
        operator delete(*(void **)&v556[v558 - 48]);
      sub_22F242DFC((uint64_t)&v556[v558 - 72], *(_QWORD **)&v556[v558 - 64]);
      v560 = *(char **)&v556[v558 - 104];
      if (&v556[v558 - 88] != v560)
        free(v560);
      v556 -= 128;
      v557 += 128;
    }
    while (v558 != v557);
    v556 = (char *)v699;
  }
  if (v556 != v701)
    free(v556);
  v561 = (char *)v702;
  if ((_DWORD)v703)
  {
    v562 = 0;
    v563 = (unint64_t)v703 << 7;
    do
    {
      v564 = (void **)&v561[v563];
      if (v561[v563 - 1] < 0)
        operator delete(*(v564 - 3));
      if (*((char *)v564 - 25) < 0)
        operator delete(*(void **)&v561[v563 - 48]);
      sub_22F242DFC((uint64_t)&v561[v563 - 72], *(_QWORD **)&v561[v563 - 64]);
      v565 = *(char **)&v561[v563 - 104];
      if (&v561[v563 - 88] != v565)
        free(v565);
      v561 -= 128;
      v562 += 128;
    }
    while (v563 != v562);
    v561 = (char *)v702;
  }
  if (v561 != v704)
    free(v561);
  if (SHIBYTE(v658.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v658.__r_.__value_.__l.__data_);
  *(_BYTE *)(a1 + 2893) = v570;
  result = sub_22E48B274(a1, v572, v571, 0, 0);
  *(_QWORD *)(a1 + 2872) = v573;
  return result;
}

void sub_22E5ED68C(uint64_t a1@<X0>, _DWORD *a2@<X1>, int a3@<W2>, _OWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  _OWORD v15[4];
  _QWORD v16[4];
  int v17;
  const char *v18;
  _BYTE v19[104];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144) + 1992);
  v11 = a2[1];
  llvm::PrettyStackTraceEntry::PrettyStackTraceEntry();
  v16[0] = &unk_24FAE1B70;
  v16[3] = v10;
  v17 = v11;
  v18 = "LLVM IR generation of compound statement ('{}')";
  sub_22F0D4E74((uint64_t)a2);
  sub_22E4889F4((uint64_t)v19, a1, v12);
  v13 = a4[1];
  v15[0] = *a4;
  v15[1] = v13;
  v14 = a4[3];
  v15[2] = a4[2];
  v15[3] = v14;
  sub_22E5ED794(a1, a2, a3, v15, a5);
  sub_22E488B4C((uint64_t)v19);
  llvm::PrettyStackTraceEntry::~PrettyStackTraceEntry((llvm::PrettyStackTraceEntry *)v16);
}

uint64_t sub_22E5ED794@<X0>(uint64_t result@<X0>, _DWORD *a2@<X1>, int a3@<W2>, _OWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  unsigned __int8 **v9;
  _DWORD *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned __int8 **v14;
  uint64_t v15;
  unsigned __int8 *v16;
  _QWORD *v17;
  unsigned __int8 *v18;
  int v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  unsigned __int8 **v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  __int128 v29;
  _OWORD v30[3];
  const char *v31;
  __int16 v32;
  _OWORD v33[5];

  v7 = result;
  v9 = (unsigned __int8 **)(a2 + 4);
  v12 = *a2;
  v10 = a2 + 2;
  v11 = v12;
  v13 = (unint64_t)v12 >> 8;
  v14 = &v9[v13];
  v15 = 2 * v13;
  while (v15 * 4)
  {
    v16 = *(unsigned __int8 **)&v10[v15];
    v15 -= 2;
    if (*v16 != 19)
    {
      *(_QWORD *)(a5 + 32) = 0;
      v17 = (_QWORD *)(a5 + 32);
      *(_QWORD *)a5 = 0;
      *(_QWORD *)(a5 + 8) = 0;
      *(_DWORD *)(a5 + 24) = 0;
      *(_QWORD *)(a5 + 16) = 0;
      *(_QWORD *)(a5 + 40) = 0;
      if (v11 < 0x100)
        return result;
      goto LABEL_10;
    }
  }
  if (v11 <= 0xFF)
  {
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_DWORD *)(a5 + 24) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    *(_QWORD *)(a5 + 32) = 0;
    *(_QWORD *)(a5 + 40) = 0;
    return result;
  }
  v16 = v9[(v13 - 1)];
  *(_QWORD *)(a5 + 32) = 0;
  v17 = (_QWORD *)(a5 + 32);
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)a5 = 0;
  *(_DWORD *)(a5 + 24) = 0;
  *(_QWORD *)(a5 + 40) = 0;
  do
  {
LABEL_10:
    v18 = *v9;
    if (a3 && v16 == v18)
    {
      v19 = *v16;
      if ((v19 - 102) >= 0x85)
      {
        do
        {
          if (v19 == 235)
          {
            sub_22F28C3E8(v7, *((_QWORD *)v16 + 1));
            v23 = (unsigned __int8 **)(v16 + 16);
          }
          else
          {
            v23 = (unsigned __int8 **)(v16 + 8);
          }
          v16 = *v23;
          v19 = **v23;
        }
        while ((v19 - 102) > 0x84);
      }
      sub_22E47E098(v7);
      v20 = *((_QWORD *)v16 + 1);
      if (sub_22E619D68(v20) == 2)
      {
        v21 = a4[1];
        v33[0] = *a4;
        v33[1] = v21;
        v22 = a4[3];
        v33[2] = a4[2];
        v33[3] = v22;
        result = sub_22E4EF100(v7, v16, v33);
      }
      else
      {
        v31 = "tmp";
        v32 = 259;
        v24 = sub_22F25E4D4(v7, v20, (uint64_t)&v31, 0);
        v26 = v24 & 0xFFFFFFFFFFFFFFF8;
        if (v24 <= 7)
          v26 = 0;
        v27 = v25 & 0xFFFFFFFFFFFFFFF8;
        if (v24 <= 7)
          v27 = 0;
        v28 = 1 << (v25 & 7 | (8 * (v24 & 7)));
        if (v24 < 8)
          v28 = 0;
        *(_QWORD *)a5 = v26;
        *(_QWORD *)(a5 + 8) = v27;
        *(_QWORD *)(a5 + 16) = v28;
        *(_DWORD *)(a5 + 24) = 0;
        *v17 = 0;
        v17[1] = 0;
        v29 = *(_OWORD *)(a5 + 16);
        v30[0] = *(_OWORD *)a5;
        v30[1] = v29;
        v30[2] = *(_OWORD *)(a5 + 32);
        result = sub_22E4DA890(v7, v16, v30, 0, 0);
      }
    }
    else
    {
      result = sub_22E5E5158(v7, v18, 0, 0);
    }
    ++v9;
  }
  while (v9 != v14);
  return result;
}

uint64_t sub_22E5ED9B4(_QWORD *a1, _QWORD *a2, int a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v6 = a1[40];
  sub_22E5EDA70((uint64_t)a1);
  if (a3 && !a2[1])
  {
    MEMORY[0x23489C078](a2);
    JUMPOUT(0x2348A0E9CLL);
  }
  if (v6 && *(_QWORD *)(v6 + 56))
  {
    result = sub_22E5EDB10((_QWORD *)(a1[203] + 72), v6 + 24, (uint64_t)a2);
  }
  else
  {
    v8 = a1[203];
    result = llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList();
    v9 = *(_QWORD *)(v8 + 72);
    a2[3] = v9;
    a2[4] = v8 + 72;
    *(_QWORD *)(v9 + 8) = a2 + 3;
    *(_QWORD *)(v8 + 72) = a2 + 3;
  }
  a1[40] = a2;
  a1[41] = a2 + 5;
  return result;
}

uint64_t sub_22E5EDA70(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v7;
  uint64_t v8;
  _BYTE v9[32];
  __int16 v10;

  v1 = (_QWORD *)(result + 320);
  v2 = *(_QWORD *)(result + 320);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 40);
    if (v3 == v2 + 40)
      goto LABEL_9;
    v4 = v3 - 24;
    if (!v3)
      v4 = 0;
    v5 = *(unsigned __int8 *)(v4 + 16) - 40;
    if (!v3 || v5 <= 0xFFFFFFF4)
    {
LABEL_9:
      v7 = (uint64_t *)(result + 272);
      v8 = llvm::User::operator new((llvm::User *)0x40);
      llvm::BranchInst::BranchInst();
      v10 = 257;
      result = sub_22E3C12C8(v7, v8, (uint64_t)v9);
    }
  }
  *v1 = 0;
  v1[1] = 0;
  return result;
}

uint64_t sub_22E5EDB10(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  if ((_QWORD *)*a1 == a1)
    v4 = (uint64_t *)a1[1];
  else
    v4 = *(uint64_t **)(a2 + 8);
  llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList();
  v5 = *v4;
  *(_QWORD *)(a3 + 24) = *v4;
  *(_QWORD *)(a3 + 32) = v4;
  v6 = a3 + 24;
  *(_QWORD *)(v5 + 8) = v6;
  *v4 = v6;
  return v6;
}

uint64_t sub_22E5EDB60(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v4 = a2[1];
  if (v4)
  {
    while (1)
    {
      v5 = *(_QWORD *)(v4 + 24);
      if (v5 && *(unsigned __int8 *)(v5 + 16) >= 0x1Cu)
        break;
      v4 = *(_QWORD *)(v4 + 8);
      if (!v4)
        goto LABEL_7;
    }
    result = sub_22E5EDB10((_QWORD *)(a1[203] + 72), *(_QWORD *)(v5 + 40) + 24, (uint64_t)a2);
  }
  else
  {
LABEL_7:
    v7 = a1[203];
    result = llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList();
    v9 = *(_QWORD *)(v7 + 72);
    a2[3] = v9;
    a2[4] = v7 + 72;
    *(_QWORD *)(v9 + 8) = a2 + 3;
    *(_QWORD *)(v7 + 72) = a2 + 3;
  }
  a1[40] = a2;
  a1[41] = a2 + 5;
  return result;
}

uint64_t sub_22E5EDBF8(uint64_t a1, char a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 184) + 96);
  v3 = (v2 >> 53) & 3;
  if ((_DWORD)v3 == 1)
    return 1;
  if ((_DWORD)v3 == 2)
    return 0;
  if ((v2 & 0x60000000000000) == 0x40000000000000)
  {
    v4 = 0;
  }
  else
  {
    v4 = (*(unsigned __int8 *)(*(_QWORD *)(a1 + 152) + 1) >> 1) & 1;
    if (((*(unsigned __int8 *)(*(_QWORD *)(a1 + 152) + 1) >> 1) & 1) != 0)
      return v4;
  }
  if ((a2 & 1) == 0)
    return (**(unsigned __int8 **)(a1 + 152) >> 1) & 1;
  return v4;
}

_QWORD *sub_22E5EDC68(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28[8];
  uint64_t v29;
  __int128 v30[8];
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  _OWORD v41[3];
  _OWORD v42[2];
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;

  if ((*(_BYTE *)(a2 + 48) & 6) == 4)
  {
    v8 = *(_OWORD *)(a1 + 1752);
    v50 = *(_OWORD *)(a1 + 1736);
    v51 = v8;
    v52 = *(_OWORD *)(a1 + 1768);
    sub_22E6281E0(*(_QWORD **)(a1 + 144), a3, (uint64_t)&v47);
    v32 = v50;
    v33 = v51;
    v34 = v52;
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
    v44 = v47;
    v45 = v48;
    *(_QWORD *)&v46 = v49;
    v54 = 0uLL;
    LODWORD(v55) = 0;
    *((_QWORD *)&v53 + 1) = 0;
    *((_QWORD *)&v55 + 1) = 0;
    *(_QWORD *)&v56 = 0;
    v57 = 0uLL;
    *(_QWORD *)((char *)&v58 + 4) = 2;
    LODWORD(v53) = 0;
    v59 = 0u;
    v60 = 0u;
    sub_22E3C113C((uint64_t)&v53, &v32, a3, 2, &v44, v9);
    v10 = *(_OWORD *)(a2 + 16);
    v44 = *(_OWORD *)a2;
    v45 = v10;
    v46 = *(_OWORD *)(a2 + 32);
    sub_22E6281E0(*(_QWORD **)(a1 + 144), a3, (uint64_t)v42);
    v50 = v44;
    v51 = v45;
    v52 = v46;
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
    v47 = v42[0];
    v48 = v42[1];
    v49 = v43;
    v33 = 0uLL;
    LODWORD(v34) = 0;
    *((_QWORD *)&v32 + 1) = 0;
    *((_QWORD *)&v34 + 1) = 0;
    *(_QWORD *)&v35 = 0;
    v36 = 0uLL;
    *(_QWORD *)((char *)&v37 + 4) = 2;
    LODWORD(v32) = 0;
    v38 = 0u;
    v39 = 0u;
    sub_22E3C113C((uint64_t)&v32, &v50, a3, 2, &v47, v11);
    v30[6] = v59;
    v30[7] = v60;
    v31 = v61;
    v30[2] = v55;
    v30[3] = v56;
    v30[4] = v57;
    v30[5] = v58;
    v30[0] = v53;
    v30[1] = v54;
    v28[6] = v38;
    v28[7] = v39;
    v29 = v40;
    v28[2] = v34;
    v28[3] = v35;
    v28[4] = v36;
    v28[5] = v37;
    v28[0] = v32;
    v28[1] = v33;
    sub_22E4EF4B8((_QWORD *)a1, v30, v28, a3, 0, 0);
  }
  else if ((*(_BYTE *)(a2 + 48) & 6) != 0)
  {
    v12 = *(_QWORD *)a2;
    v13 = *(_QWORD *)(a2 + 8);
    v14 = *(_OWORD *)(a1 + 1752);
    v32 = *(_OWORD *)(a1 + 1736);
    v33 = v14;
    v34 = *(_OWORD *)(a1 + 1768);
    sub_22E6281E0(*(_QWORD **)(a1 + 144), a3, (uint64_t)&v44);
    v53 = v32;
    v54 = v33;
    v55 = v34;
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
    v50 = v44;
    v51 = v45;
    *(_QWORD *)&v52 = v46;
    v20 = 0uLL;
    LODWORD(v21) = 0;
    *((_QWORD *)&v19 + 1) = 0;
    *((_QWORD *)&v21 + 1) = 0;
    *(_QWORD *)&v22 = 0;
    v23 = 0uLL;
    *(_QWORD *)((char *)&v24 + 4) = 2;
    LODWORD(v19) = 0;
    v26 = 0u;
    v25 = 0u;
    sub_22E3C113C((uint64_t)&v19, &v53, a3, 2, &v50, v15);
    *(_QWORD *)&v32 = a1;
    *((_QWORD *)&v32 + 1) = a1 + 272;
    LOWORD(v33) = 0;
    v59 = v25;
    v60 = v26;
    v61 = v27;
    v55 = v21;
    v56 = v22;
    v57 = v23;
    v58 = v24;
    v53 = v19;
    v54 = v20;
    sub_22E5025C8((uint64_t *)&v32, v12, v13, (uint64_t)&v53, 1);
  }
  else
  {
    v6 = *(_QWORD *)a2;
    v7 = *(_OWORD *)(a1 + 1752);
    v41[0] = *(_OWORD *)(a1 + 1736);
    v41[1] = v7;
    v41[2] = *(_OWORD *)(a1 + 1768);
    sub_22E3BEDDC(a1 + 272, v6, v41, 0);
  }
  v17 = *(_OWORD *)(a1 + 1712);
  v18 = *(_QWORD *)(a1 + 1728);
  return sub_22E48BA00((_QWORD *)a1, (uint64_t)&v17);
}

uint64_t sub_22E5EDF90@<X0>(llvm::APInt *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unsigned int v8;

  v8 = *((_DWORD *)a1 + 2);
  if (v8 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v7, a1);
  else
    v7 = *(_QWORD *)a1;
  result = llvm::APInt::operator-=();
  v5 = v7;
  v6 = *((_BYTE *)a1 + 12);
  *(_DWORD *)(a2 + 8) = v8;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 12) = v6;
  return result;
}

uint64_t sub_22E5EE010(_QWORD *a1, char a2, uint64_t a3, llvm::LLVMContext *a4, std::string *this, unsigned int a6)
{
  unint64_t v9;
  __int128 v10;
  uint64_t v13;
  uint64_t DataLayout;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint8x8_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  __int128 v22;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28[3];
  _BYTE v29[48];
  _OWORD v30[8];
  uint64_t v31;
  _QWORD v32[4];
  __int16 v33;
  _OWORD v34[2];
  __int128 v35;

  if ((a2 & 3) != 1)
  {
    if (!sub_22E619D68((uint64_t)a4))
    {
      v24 = *(_OWORD *)(a3 + 112);
      v30[6] = *(_OWORD *)(a3 + 96);
      v30[7] = v24;
      v31 = *(_QWORD *)(a3 + 128);
      v25 = *(_OWORD *)(a3 + 48);
      v30[2] = *(_OWORD *)(a3 + 32);
      v30[3] = v25;
      v26 = *(_OWORD *)(a3 + 80);
      v30[4] = *(_OWORD *)(a3 + 64);
      v30[5] = v26;
      v27 = *(_OWORD *)(a3 + 16);
      v30[0] = *(_OWORD *)a3;
      v30[1] = v27;
      sub_22E4D7B28(a1, (uint64_t)v30, a6, (uint64_t)v32);
      return v32[0];
    }
    v13 = sub_22E66CB04((llvm::Type ***)(a1[18] + 280), a4);
    DataLayout = llvm::Module::getDataLayout(*(llvm::Module **)(a1[18] + 200));
    sub_22E3C304C(DataLayout, v13);
    v32[0] = v15;
    v32[1] = v16;
    v17 = llvm::TypeSize::operator unsigned long long();
    if ((unint64_t)(v17 - 1) <= 0x3F
      && (v18 = (uint8x8_t)vcnt_s8((int8x8_t)v17), v18.i16[0] = vaddlv_u8(v18), v18.u32[0] < 2uLL)
      || (v19 = sub_22E699F3C((_QWORD *)a1[18]),
          (*(unsigned int (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v19 + 112))(v19, a1, v13)))
    {
      v20 = llvm::IntegerType::get();
      v21 = a1 + 34;
      v22 = *(_OWORD *)(a3 + 24);
      v28[0] = *(_OWORD *)(a3 + 8);
      v28[1] = v22;
      v28[2] = *(_OWORD *)(a3 + 40);
      v33 = 257;
      sub_22E3BEE6C(v21, v28, v20, (uint64_t)v32, (uint64_t)v29);
      LOWORD(v35) = 257;
      return sub_22E3C2A7C(v21, (uint64_t)v29, (uint64_t)v34);
    }
  }
  std::string::push_back(this, 42);
  v9 = *(_QWORD *)(a3 + 64);
  v10 = *(_OWORD *)(a3 + 24);
  v34[0] = *(_OWORD *)(a3 + 8);
  v34[1] = v10;
  v35 = *(_OWORD *)(a3 + 40);
  sub_22E5E0440((uint64_t)a1, (uint64_t)v34, v9, v32);
  return v32[0];
}

_BYTE *sub_22E5EE1D0(uint64_t a1, __int128 *a2)
{
  __int128 *v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __int128 v8;
  _BYTE *v9;
  __int128 v10;
  _BYTE *result;
  __int128 v12;
  unint64_t v13;
  uint64_t v15;

  v2 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v13 = v5 + (v4 << 7);
    if (v5 <= (unint64_t)a2 && v13 > (unint64_t)a2)
    {
      v15 = (uint64_t)a2 - v5;
      sub_22F28CA4C(a1);
      v5 = *(_QWORD *)a1;
      v2 = (__int128 *)(*(_QWORD *)a1 + v15);
    }
    else
    {
      sub_22F28CA4C(a1);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = *(unsigned int *)(a1 + 8);
  v7 = v5 + (v6 << 7);
  v8 = *v2;
  *(_DWORD *)(v7 + 16) = *((_DWORD *)v2 + 4);
  *(_OWORD *)v7 = v8;
  *(_QWORD *)(v7 + 24) = v7 + 40;
  *(_QWORD *)(v7 + 32) = 0x400000000;
  if (*((_DWORD *)v2 + 8))
    sub_22F28CC54(v7 + 24, (uint64_t)v2 + 24);
  sub_22E5EFC64(v7 + 56, (_QWORD *)v2 + 7);
  v9 = (_BYTE *)(v7 + 80);
  if (*((char *)v2 + 103) < 0)
  {
    sub_22E3BB2B4(v9, *((void **)v2 + 10), *((_QWORD *)v2 + 11));
  }
  else
  {
    v10 = v2[5];
    *(_QWORD *)(v7 + 96) = *((_QWORD *)v2 + 12);
    *(_OWORD *)v9 = v10;
  }
  result = (_BYTE *)(v5 + (v6 << 7) + 104);
  if (*((char *)v2 + 127) < 0)
  {
    result = sub_22E3BB2B4(result, *((void **)v2 + 13), *((_QWORD *)v2 + 14));
  }
  else
  {
    v12 = *(__int128 *)((char *)v2 + 104);
    *(_QWORD *)(v5 + (v6 << 7) + 120) = *((_QWORD *)v2 + 15);
    *(_OWORD *)result = v12;
  }
  ++*(_DWORD *)(a1 + 8);
  return result;
}

void sub_22E5EE304(std::string *this, std::string::value_type *a2, uint64_t a3, uint64_t a4)
{
  std::string::value_type v4;
  std::string::value_type *j;
  int v9;
  int v10;
  std::string *v11;
  const std::string::value_type *v12;
  std::string::value_type *i;
  unint64_t v14;
  char *v15;
  BOOL v16;
  void **v17;
  std::string::size_type v18;
  unsigned int v19;
  void *__p[2];
  char v21;
  std::string::value_type *v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v22 = a2;
  *(_OWORD *)&this->__r_.__value_.__r.__words[1] = 0uLL;
  this->__r_.__value_.__r.__words[0] = 0;
  v4 = *a2;
  if (*a2)
  {
    while (1)
    {
      if (v4 <= 60)
      {
        switch(v4)
        {
          case '!':
          case '*':
          case '+':
            goto LABEL_35;
          case '#':
            for (i = a2 + 1; *i && *i != 44; ++i)
              v22 = i;
            break;
          case '%':
          case '&':
            std::string::push_back(this, v4);
            for (j = v22; ; v22 = j)
            {
              v10 = *++j;
              v9 = v10;
              if (!v10 || v9 != *(j - 1))
                break;
            }
            break;
          case ',':
            v11 = this;
            v12 = "|";
            goto LABEL_20;
          default:
            goto LABEL_24;
        }
        goto LABEL_35;
      }
      if (v4 > 90)
        break;
      if (v4 != 61 && v4 != 63)
        goto LABEL_24;
LABEL_35:
      a2 = v22 + 1;
      v22 = a2;
      v4 = *a2;
      if (!*a2)
        return;
    }
    if (v4 == 91)
    {
      v19 = 0;
      sub_22F1E7EBC(a3, &v22, *(_QWORD *)a4, *(unsigned int *)(a4 + 8), &v19);
      v14 = v19;
      v15 = (char *)&v24;
      if (v19)
      {
        do
        {
          *--v15 = (v14 % 0xA) | 0x30;
          v16 = v14 > 9;
          v14 /= 0xAuLL;
        }
        while (v16);
      }
      else
      {
        v23 = 48;
        v15 = &v23;
      }
      sub_22E3B4274(__p, v15, (char *)&v24, (char *)&v24 - v15);
    }
    else
    {
      if (v4 == 103)
      {
        v11 = this;
        v12 = "imr";
LABEL_20:
        std::string::append(v11, v12);
        goto LABEL_35;
      }
LABEL_24:
      (*(void (**)(void **__return_ptr, uint64_t, std::string::value_type **))(*(_QWORD *)a3 + 360))(__p, a3, &v22);
    }
    if (v21 >= 0)
      v17 = __p;
    else
      v17 = (void **)__p[0];
    if (v21 >= 0)
      v18 = v21 & 0x7F;
    else
      v18 = (std::string::size_type)__p[1];
    std::string::append(this, (const std::string::value_type *)v17, v18);
    if (v21 < 0)
      operator delete(__p[0]);
    goto LABEL_35;
  }
}

void sub_22E5EE548(_BYTE *__dst, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  uint64_t v10;
  BOOL v11;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  size_t v25;
  char v26;
  BOOL v27;
  void *v28;
  size_t v29;
  size_t v30;
  const char *v31;
  unint64_t v32;
  const char *v33;
  std::string::size_type v34;
  std::string *p_dsta;
  uint64_t v36;
  uint64_t v37;
  const std::string::value_type *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  std::string *v42;
  std::string::size_type v43;
  std::string *v44;
  std::string::size_type v45;
  std::string v46;
  std::string __dsta;
  _BYTE v48[24];
  void *v49;
  uint64_t v50;
  _QWORD *v51[5];
  char v52;
  void *__p;
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  if (*a3 != 161)
    goto LABEL_15;
  v10 = *((_QWORD *)a3 + 2);
  v11 = v10 && (*(_DWORD *)(v10 + 28) & 0x7Fu) - 67 > 0xFFFFFFF8;
  if (!v11 || (*(_BYTE *)(v10 + 96) & 7) != 5 || (*(_DWORD *)(v10 + 28) & 0x100) == 0)
    goto LABEL_15;
  sub_22EFC8E88(v10);
  v18 = *(uint64_t **)v17;
  v19 = *(unsigned int *)(v17 + 8);
  v20 = *(uint64_t **)v17;
  if ((_DWORD)v19)
  {
    v21 = 8 * v19;
    v20 = *(uint64_t **)v17;
    while (*(_WORD *)(*v20 + 32) != 109)
    {
      ++v20;
      v21 -= 8;
      if (!v21)
        goto LABEL_15;
    }
  }
  if (v20 == &v18[v19])
  {
LABEL_15:
    if (*(char *)(a2 + 23) < 0)
    {
      sub_22E3BB2B4(__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)a2;
      *((_QWORD *)__dst + 2) = *(_QWORD *)(a2 + 16);
    }
    return;
  }
  do
  {
    v23 = *v18++;
    v22 = v23;
  }
  while (*(_WORD *)(v23 + 32) != 109);
  v24 = *(const char **)(v22 + 40);
  v25 = *(unsigned int *)(v22 + 36);
  v26 = *(_BYTE *)(a2 + 23);
  v27 = v26 < 0;
  if (v26 >= 0)
    v28 = (void *)a2;
  else
    v28 = *(void **)a2;
  v29 = v26 & 0x7F;
  if (v27)
    v30 = *(_QWORD *)(a2 + 8);
  else
    v30 = v29;
  sub_22E5EF89C((uint64_t)v48, v28, v30, "", 0);
  if (!sub_22F424BE0(a4, (uint64_t)v48) || (v48[0] & 2) != 0)
  {
    v31 = sub_22F1E7CDC(a4, v24, v25, 0);
    v33 = v31;
    v34 = v32;
    if (!a8)
      goto LABEL_45;
    if (!v31)
    {
      memset(&__dsta, 0, sizeof(__dsta));
LABEL_42:
      if (*(char *)(a8 + 23) < 0)
        operator delete(*(void **)a8);
      *(std::string *)a8 = __dsta;
LABEL_45:
      if (a7)
        v38 = "&{";
      else
        v38 = "{";
      if (!v33)
      {
        memset(&v46, 0, sizeof(v46));
LABEL_59:
        v42 = std::string::insert(&v46, 0, v38);
        v43 = v42->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__dsta.__r_.__value_.__l.__data_ = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
        __dsta.__r_.__value_.__r.__words[2] = v43;
        v42->__r_.__value_.__l.__size_ = 0;
        v42->__r_.__value_.__r.__words[2] = 0;
        v42->__r_.__value_.__r.__words[0] = 0;
        v44 = std::string::append(&__dsta, "}");
        v45 = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)__dst = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        *((_QWORD *)__dst + 2) = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__dsta.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dsta.__r_.__value_.__l.__data_);
        if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v46.__r_.__value_.__l.__data_);
        goto LABEL_64;
      }
      if (v34 <= 0x7FFFFFFFFFFFFFF7)
      {
        if (v34 >= 0x17)
        {
          v40 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v34 | 7) != 0x17)
            v40 = v34 | 7;
          v41 = v40 + 1;
          v39 = operator new(v40 + 1);
          v46.__r_.__value_.__l.__size_ = v34;
          v46.__r_.__value_.__r.__words[2] = v41 | 0x8000000000000000;
          v46.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
        }
        else
        {
          *((_BYTE *)&v46.__r_.__value_.__s + 23) = v34;
          v39 = &v46;
          if (!v34)
            goto LABEL_58;
        }
        memmove(v39, v33, v34);
LABEL_58:
        *((_BYTE *)v39 + v34) = 0;
        goto LABEL_59;
      }
LABEL_70:
      abort();
    }
    if (v32 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_70;
    if (v32 >= 0x17)
    {
      v36 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v32 | 7) != 0x17)
        v36 = v32 | 7;
      v37 = v36 + 1;
      p_dsta = (std::string *)operator new(v36 + 1);
      __dsta.__r_.__value_.__l.__size_ = v34;
      __dsta.__r_.__value_.__r.__words[2] = v37 | 0x8000000000000000;
      __dsta.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dsta;
    }
    else
    {
      *((_BYTE *)&__dsta.__r_.__value_.__s + 23) = v32;
      p_dsta = &__dsta;
      if (!v32)
        goto LABEL_41;
    }
    memmove(p_dsta, v33, v34);
LABEL_41:
    p_dsta->__r_.__value_.__s.__data_[v34] = 0;
    goto LABEL_42;
  }
  sub_22E628400(a5, a6, "__asm__");
  if (*(char *)(a2 + 23) < 0)
  {
    sub_22E3BB2B4(__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a2;
    *((_QWORD *)__dst + 2) = *(_QWORD *)(a2 + 16);
  }
LABEL_64:
  if (v54 < 0)
    operator delete(__p);
  if (v52 < 0)
    operator delete(v51[3]);
  sub_22F242DFC((uint64_t)v51, v51[1]);
  if (v49 != &v50)
    free(v49);
}

void sub_22E5EE950(llvm::Value *this, char a2, char a3, int a4, int a5, int a6, uint64_t a7, _QWORD *a8, uint64_t a9, uint64_t a10, uint64_t **a11)
{
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  _DWORD *v21;
  int v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  _QWORD v61[2];
  __int16 v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  if ((a3 & 1) == 0)
  {
    llvm::Value::getContext(this);
    *((_QWORD *)this + 8) = llvm::AttributeList::addAttributeAtIndex();
  }
  if (a6)
  {
    llvm::Value::getContext(this);
    *((_QWORD *)this + 8) = llvm::AttributeList::addAttributeAtIndex();
  }
  if ((a2 & 1) == 0 && (a5 || a4))
  {
    llvm::Value::getContext(this);
    *((_QWORD *)this + 8) = llvm::AttributeList::addAttributeAtIndex();
  }
  v19 = *(_QWORD **)a9;
  v18 = *(_QWORD **)(a9 + 8);
  if (*(_QWORD **)a9 != v18)
  {
    v20 = 0;
    do
    {
      if (*v19)
      {
        llvm::Attribute::get();
        LODWORD(v59) = v20;
        llvm::Value::getContext(this);
        *((_QWORD *)this + 8) = llvm::AttributeList::addParamAttribute();
      }
      ++v19;
      ++v20;
    }
    while (v19 != v18);
  }
  if (*(_BYTE *)a7 == 1)
  {
    v21 = *(_DWORD **)(a7 + 48);
    v59 = v61;
    v60 = 0x800000001;
    llvm::ConstantInt::get();
    v61[0] = llvm::ValueAsMetadata::get();
    v22 = ((*v21 >> 21) & 7) * v21[4];
    if (v22)
    {
      v57 = a8;
      v58 = 0;
      v23 = *(_QWORD *)(a10 + 144);
      v24 = *(_DWORD **)(v23 + 152);
      v25 = *(uint64_t **)(*(_QWORD *)(v23 + 144) + 1992);
      v26 = (v22 - 1);
      if (v22 != 1)
      {
        v27 = 0;
        v28 = (uint64_t)&v21[v21[1] + 5];
        do
        {
          if (*(_BYTE *)(v28 + v27) == 10)
          {
            sub_22EFF9E30((uint64_t)v21, (v27 + 1), v25, v24, *(_QWORD *)(a10 + 152), (unsigned int *)&v58 + 1, (int *)&v58);
            llvm::ConstantInt::get();
            v29 = llvm::ValueAsMetadata::get();
            v30 = v60;
            if (v60 >= (unint64_t)HIDWORD(v60))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v30 = v60;
            }
            *((_QWORD *)v59 + v30) = v29;
            LODWORD(v60) = v60 + 1;
          }
          ++v27;
        }
        while (v26 != v27);
      }
      a8 = v57;
    }
    llvm::MDTuple::getImpl();
    if (v59 != v61)
      free(v59);
  }
  else
  {
    llvm::ConstantInt::get();
    v59 = (void *)llvm::ValueAsMetadata::get();
    llvm::MDTuple::getImpl();
  }
  llvm::Instruction::setMetadata();
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a10 + 144) + 152) + 8) & 0x20000000000) != 0)
  {
    llvm::Value::getContext(this);
    *((_QWORD *)this + 8) = llvm::AttributeList::addAttributeAtIndex();
  }
  v31 = a8[1] - *a8;
  if (v31 == 8)
  {
    v33 = a11[1];
    v32 = (unint64_t)a11[2];
    if ((unint64_t)v33 >= v32)
    {
      v49 = *a11;
      v50 = v33 - *a11;
      v51 = v50 + 1;
      if ((unint64_t)(v50 + 1) >> 61)
LABEL_70:
        abort();
      v52 = v32 - (_QWORD)v49;
      if (v52 >> 2 > v51)
        v51 = v52 >> 2;
      if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8)
        v53 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v53 = v51;
      if (v53)
      {
        if (v53 >> 61)
LABEL_71:
          sub_22E3B3F8C();
        v54 = (char *)operator new(8 * v53);
      }
      else
      {
        v54 = 0;
      }
      v55 = (uint64_t *)&v54[8 * v50];
      *v55 = (uint64_t)this;
      v34 = v55 + 1;
      if (v33 != v49)
      {
        do
        {
          v56 = *--v33;
          *--v55 = v56;
        }
        while (v33 != v49);
        v33 = *a11;
      }
      *a11 = v55;
      a11[1] = v34;
      a11[2] = (uint64_t *)&v54[8 * v53];
      if (v33)
        operator delete(v33);
    }
    else
    {
      *v33 = (uint64_t)this;
      v34 = v33 + 1;
    }
    a11[1] = v34;
  }
  else
  {
    HIDWORD(v58) = 0;
    v35 = v31 >> 3;
    if ((v31 >> 3))
    {
      do
      {
        v59 = "asmresult";
        v62 = 259;
        v36 = sub_22E3C2EA8(a10 + 272, (uint64_t)this, (uint64_t)&v58 + 4, 1, (uint64_t)&v59);
        v37 = v36;
        v39 = a11[1];
        v38 = (unint64_t)a11[2];
        if ((unint64_t)v39 >= v38)
        {
          v41 = *a11;
          v42 = v39 - *a11;
          v43 = v42 + 1;
          if ((unint64_t)(v42 + 1) >> 61)
            goto LABEL_70;
          v44 = v38 - (_QWORD)v41;
          if (v44 >> 2 > v43)
            v43 = v44 >> 2;
          if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
            v45 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v45 = v43;
          if (v45)
          {
            if (v45 >> 61)
              goto LABEL_71;
            v46 = (char *)operator new(8 * v45);
          }
          else
          {
            v46 = 0;
          }
          v47 = (uint64_t *)&v46[8 * v42];
          *v47 = v37;
          v40 = v47 + 1;
          if (v39 != v41)
          {
            do
            {
              v48 = *--v39;
              *--v47 = v48;
            }
            while (v39 != v41);
            v39 = *a11;
          }
          *a11 = v47;
          a11[1] = v40;
          a11[2] = (uint64_t *)&v46[8 * v45];
          if (v39)
            operator delete(v39);
        }
        else
        {
          *v39 = v36;
          v40 = v39 + 1;
        }
        a11[1] = v40;
        ++HIDWORD(v58);
      }
      while (HIDWORD(v58) != (_DWORD)v35);
    }
  }
}

void sub_22E5EEEDC(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  _OWORD v24[8];
  uint64_t v25;
  _OWORD v26[8];
  uint64_t v27;
  _OWORD v28[8];
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  const char *v39;
  __int16 v40;
  _OWORD v41[2];
  uint64_t v42;
  __int128 v43[2];
  uint64_t v44;

  v6 = *(_QWORD *)(a2 + 24);
  v7 = sub_22EF6477C(*(_QWORD *)(a1[18] + 144), v6);
  v39 = "agg.captured";
  v40 = 259;
  v8 = sub_22F25E4D4((uint64_t)a1, v7, (uint64_t)&v39, 0);
  if (v8 <= 7)
    v10 = 0;
  else
    v10 = v8 & 0xFFFFFFFFFFFFFFF8;
  if (v8 <= 7)
    v11 = 0;
  else
    v11 = v9 & 0xFFFFFFFFFFFFFFF8;
  if (v8 >= 8)
    v12 = 1 << (v9 & 7 | (8 * (v8 & 7)));
  else
    v12 = 0;
  sub_22E6281E0((_QWORD *)a1[18], v7, (uint64_t)v41);
  *(_QWORD *)&v30 = v10;
  *((_QWORD *)&v30 + 1) = v11;
  *(_QWORD *)&v31 = v12;
  DWORD2(v31) = 0;
  v32 = 0uLL;
  v13 = *(_QWORD *)(a1[18] + 144);
  v43[0] = v41[0];
  v43[1] = v41[1];
  v44 = v42;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 84) = 2;
  *(_DWORD *)a3 = 0;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  sub_22E3C113C(a3, &v30, v7, 2, v43, v13);
  v14 = sub_22EFC3B90(v6);
  v15 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v15)
  {
    v16 = v14;
    v17 = (uint64_t *)(a2 + 32);
    v18 = &v17[v15];
    do
    {
      v19 = *(_OWORD *)(a3 + 112);
      v28[6] = *(_OWORD *)(a3 + 96);
      v28[7] = v19;
      v29 = *(_QWORD *)(a3 + 128);
      v20 = *(_OWORD *)(a3 + 48);
      v28[2] = *(_OWORD *)(a3 + 32);
      v28[3] = v20;
      v21 = *(_OWORD *)(a3 + 80);
      v28[4] = *(_OWORD *)(a3 + 64);
      v28[5] = v21;
      v22 = *(_OWORD *)(a3 + 16);
      v28[0] = *(_OWORD *)a3;
      v28[1] = v22;
      sub_22E4EC638(a1, (uint64_t)v28, v16, (uint64_t)&v30);
      if ((~*(_DWORD *)(v16 + 72) & 3) != 0)
      {
        v24[6] = v36;
        v24[7] = v37;
        v25 = v38;
        v24[2] = v32;
        v24[3] = v33;
        v24[4] = v34;
        v24[5] = v35;
        v24[0] = v30;
        v24[1] = v31;
        sub_22F2503EC((uint64_t)a1, v16, (uint64_t)v24, *v17);
      }
      else
      {
        v23 = *(_QWORD *)(v16 + 72) & 0xFFFFFFFFFFFFFFFCLL;
        v26[6] = v36;
        v26[7] = v37;
        v27 = v38;
        v26[2] = v32;
        v26[3] = v33;
        v26[4] = v34;
        v26[5] = v35;
        v26[0] = v30;
        v26[1] = v31;
        sub_22E4FA2C4((uint64_t)a1, v23, (uint64_t)v26);
      }
      ++v17;
      do
        v16 = *(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v16 && (*(_DWORD *)(v16 + 28) & 0x7Fu) - 49 > 2);
    }
    while (v17 != v18);
  }
}

llvm::Value *sub_22E5EF124(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  llvm::Value *v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int8x16_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v36;
  unsigned int v37;
  _OWORD v38[8];
  uint64_t v39;
  _QWORD v40[7];
  _OWORD v41[8];
  uint64_t v42;
  _OWORD v43[8];
  uint64_t v44;
  _OWORD v45[8];
  uint64_t v46;
  _BYTE v47[136];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  _OWORD v57[3];
  void *v58[2];
  _QWORD v59[19];

  v59[16] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFFF8;
  v36 = a2 + 32;
  sub_22F0D5A50(*(_QWORD *)(a2 + 32 + 8 * *(unsigned int *)(a2 + 8)));
  v37 = v6;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
  v58[0] = v59;
  v58[1] = (void *)0x1000000000;
  sub_22F246808((uint64_t)v58, (char *)(v5 + 88), (char *)(v5 + 88 + 8 * *(unsigned int *)(v5 + 72)));
  v8 = sub_22F24E348(*(_QWORD *)(a1 + 144) + 280, *(_QWORD *)(v7 + 16392), (uint64_t *)v58);
  v9 = sub_22E46F2EC(*(_QWORD *)(a1 + 144) + 280, v8);
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1856) + 56))(*(_QWORD *)(a1 + 1856));
  LOWORD(v50) = 261;
  *(_QWORD *)&v48 = v10;
  *((_QWORD *)&v48 + 1) = v11;
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 200);
  v13 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x78);
  MEMORY[0x23489F6FC](v13, v9, 7, 0xFFFFFFFFLL, &v48, v12);
  sub_22E62BF18(*(uint64_t **)(a1 + 144), v5, 0, v13, v8);
  v14 = *(_QWORD *)(v5 + 80);
  if ((v14 & 4) != 0)
  {
    llvm::Function::addFnAttr();
    v14 = *(_QWORD *)(v5 + 80);
  }
  v15 = *(_QWORD *)(v7 + 16392);
  v16 = *(_DWORD *)(v5 + 24);
  sub_22F0D5A50(v14 & 0xFFFFFFFFFFFFFFF8);
  sub_22E61A8FC(a1, v5, 0, v15, v13, v8, (uint64_t *)v58, v16, v18, v17);
  *(_QWORD *)&v43[0] = *(_QWORD *)(v5 + 88 + 8 * *(unsigned int *)(v5 + 76));
  *(_QWORD *)&v48 = 0;
  v19 = sub_22E3CED3C((uint64_t *)(a1 + 2904), v43, &v48);
  v20 = v48;
  if (!v19)
    v20 = *(_QWORD *)(a1 + 2904) + 56 * *(unsigned int *)(a1 + 2920);
  v21 = *(_QWORD *)(a1 + 1856);
  v22 = *(_OWORD *)(v20 + 40);
  v23 = *(_OWORD *)(v20 + 24);
  v57[0] = *(_OWORD *)(v20 + 8);
  v57[1] = v23;
  v57[2] = v22;
  LOWORD(v50) = 257;
  v24 = sub_22E3C2A7C((uint64_t *)(a1 + 272), (uint64_t)v57, (uint64_t)&v48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v24);
  v25 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1856) + 24))(*(_QWORD *)(a1 + 1856));
  v26 = *(_QWORD *)(v4 + 48);
  if (v26)
    v27 = v26 & 0xFFFFFFFFFFFFFFF0;
  else
    v27 = sub_22EF6462C(v7, v4);
  sub_22E619C24(v25, v27, 0, 0, a1, (uint64_t)&v48);
  v28 = sub_22EFC3B90(v4);
  if (v28)
  {
    v29 = v28;
LABEL_9:
    if ((~*(_DWORD *)(v29 + 72) & 3) == 0)
    {
      v45[6] = v54;
      v45[7] = v55;
      v46 = v56;
      v45[2] = v50;
      v45[3] = v51;
      v45[4] = v52;
      v45[5] = v53;
      v45[0] = v48;
      v45[1] = v49;
      sub_22E4DD05C(a1, (uint64_t)v45, v29, (uint64_t)v47);
      sub_22F0D5A50(*(_QWORD *)(v36 + 8 * *(unsigned int *)(a2 + 8)));
      sub_22E4D7B28((_QWORD *)a1, (uint64_t)v47, v30, (uint64_t)v43);
      v31 = *(_QWORD *)&v43[0];
      v32 = *(_QWORD *)(v29 + 72) & 0xFFFFFFFFFFFFFFFCLL;
      if ((~*(_DWORD *)(v29 + 72) & 3) != 0)
        v32 = 0;
      *(_QWORD *)&v43[0] = *(_QWORD *)(v32 + 40);
      sub_22F25E108((uint64_t *)(a1 + 4112), v43)[1] = v31;
    }
    while (1)
    {
      v29 = *(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v29)
        break;
      if ((*(_DWORD *)(v29 + 28) & 0x7Fu) - 49 < 3)
        goto LABEL_9;
    }
  }
  if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1856) + 40))(*(_QWORD *)(a1 + 1856)))
  {
    v33 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1856) + 40))(*(_QWORD *)(a1 + 1856));
    v41[6] = v54;
    v41[7] = v55;
    v42 = v56;
    v41[2] = v50;
    v41[3] = v51;
    v41[4] = v52;
    v41[5] = v53;
    v41[0] = v48;
    v41[1] = v49;
    sub_22E4DD05C(a1, (uint64_t)v41, v33, (uint64_t)v43);
    v38[6] = v43[6];
    v38[7] = v43[7];
    v39 = v44;
    v38[2] = v43[2];
    v38[3] = v43[3];
    v38[4] = v43[4];
    v38[5] = v43[5];
    v38[0] = v43[0];
    v38[1] = v43[1];
    sub_22E4D7B28((_QWORD *)a1, (uint64_t)v38, v37, (uint64_t)v40);
    *(_QWORD *)(a1 + 4208) = v40[0];
  }
  sub_22E654990((uint64_t *)(a1 + 3904), v5, 0, v13);
  (*(void (**)(_QWORD, uint64_t, unint64_t))(**(_QWORD **)(a1 + 1856) + 48))(*(_QWORD *)(a1 + 1856), a1, *(_QWORD *)(v5 + 80) & 0xFFFFFFFFFFFFFFF8);
  v34 = sub_22EFCAEA8((_DWORD *)v5);
  sub_22E619DE8(a1, v34);
  if (v58[0] != v59)
    free(v58[0]);
  return v13;
}

uint64_t sub_22E5EF58C(unsigned __int8 *a1, unsigned __int8 *a2, _BYTE *a3, uint64_t a4)
{
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 *v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t result;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  unint64_t v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  char v27;
  uint64_t i;
  uint64_t v29;
  char v30;

  if (!a1)
  {
LABEL_15:
    v11 = a2;
LABEL_16:
    if (v11)
      return 2;
    else
      return 1;
  }
  v7 = a1;
  while (1)
  {
    v8 = *v7;
    if ((v8 & 0xFE) != 0x62)
      break;
    if (v7 == a2)
    {
      *a3 = 1;
      if (*a2 == 98)
        v10 = (unsigned __int8 **)&a2[8 * (((unint64_t)*(unsigned __int16 *)a2 >> 8) & 1) + 32];
      else
        v10 = (unsigned __int8 **)(a2 + 24);
      a2 = 0;
      v11 = 0;
      v7 = *v10;
      if (!*v10)
        goto LABEL_16;
    }
    else
    {
      if (v8 == 98)
        v9 = &v7[8 * (((unint64_t)*(unsigned __int16 *)v7 >> 8) & 1) + 32];
      else
        v9 = v7 + 24;
      v7 = *(unsigned __int8 **)v9;
      if (!*(_QWORD *)v9)
        goto LABEL_15;
    }
  }
  if (!a2)
  {
    if (v8 == 3)
      return 2;
    if (v8 != 8)
    {
      if ((sub_22E61F15C((uint64_t)v7) & 1) != 0)
        return 0;
LABEL_39:
      v21 = *(_DWORD *)(a4 + 8);
      if (v21 >= *(_DWORD *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v21 = *(_DWORD *)(a4 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a4 + 8 * v21) = v7;
      ++*(_DWORD *)(a4 + 8);
      return 1;
    }
    v14 = (uint64_t *)(v7 + 16);
    v15 = (uint64_t)&v7[(((unint64_t)*(unsigned int *)v7 >> 5) & 0x7FFFFF8) + 16];
    v16 = *a3;
    v17 = *(_DWORD *)(a4 + 8);
LABEL_45:
    if (v14 != (uint64_t *)v15)
    {
      v22 = 0;
      v23 = v17;
      while (1)
      {
        v24 = sub_22E61F274(*v14);
        result = sub_22E5EF58C(*v14, 0, a3, a4);
        if (!(_DWORD)result)
          return result;
        if ((_DWORD)result == 2)
        {
          v25 = v14 + 1;
          while (v25 != (uint64_t *)v15)
          {
            v26 = *v25++;
            v27 = sub_22E61F04C(v26, 1u);
            result = 0;
            if ((v27 & 1) != 0)
              return result;
          }
          return 2;
        }
        v22 |= v24;
        if (++v14 == (uint64_t *)v15)
        {
          if ((v16 == 0) | (v22 ^ 1) & 1)
            return (v22 ^ 1) & 1;
          if ((sub_22E61F15C((uint64_t)v7) & 1) != 0)
            return 0;
          sub_22F24C010(a4, v23);
          goto LABEL_39;
        }
      }
    }
    return 1;
  }
  if (v8 != 8)
  {
    if (sub_22E61F04C((uint64_t)v7, 1u))
      return 0;
    else
      return 2;
  }
  v14 = (uint64_t *)(v7 + 16);
  v13 = *(unsigned int *)v7;
  v15 = (uint64_t)&v7[8 * (v13 >> 8) + 16];
  v16 = *a3;
  v17 = *(_DWORD *)(a4 + 8);
  if (v13 < 0x100)
  {
    v18 = *a3;
LABEL_44:
    if (!v18)
      return 2;
    goto LABEL_45;
  }
  v19 = 0;
  v14 = (uint64_t *)(v7 + 24);
  v20 = 8 - 8 * (v13 >> 8);
  while (1)
  {
    v19 |= sub_22E61F274(*(v14 - 1));
    result = sub_22E5EF58C(*(v14 - 1), a2, a3, a4);
    if ((_DWORD)result == 2)
      break;
    if (!(_DWORD)result)
      return result;
    if ((_DWORD)result == 1)
    {
      if ((v19 & 1) != 0)
        return 0;
      goto LABEL_43;
    }
LABEL_36:
    ++v14;
    v20 += 8;
    if (v20 == 8)
    {
      v14 = (uint64_t *)v15;
LABEL_43:
      v18 = *a3;
      goto LABEL_44;
    }
  }
  if (!*a3)
    goto LABEL_36;
  if ((v19 & 1) != 0)
    return 0;
  for (i = -v20; i; i -= 8)
  {
    v29 = *v14++;
    v30 = sub_22E61F04C(v29, 1u);
    result = 0;
    if ((v30 & 1) != 0)
      return result;
  }
  return 2;
}

uint64_t sub_22E5EF89C(uint64_t a1, void *__src, size_t __len, void *a4, size_t a5)
{
  _QWORD *v8;
  size_t v11;
  size_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)a1 = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 24) = a1 + 40;
  *(_QWORD *)(a1 + 32) = 0x400000000;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  v8 = (_QWORD *)(a1 + 80);
  if (!__src)
  {
    *v8 = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    goto LABEL_12;
  }
  if (__len > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_24;
  if (__len >= 0x17)
  {
    v11 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v11 = __len | 7;
    v12 = v11 + 1;
    v8 = operator new(v11 + 1);
    *(_QWORD *)(a1 + 88) = __len;
    *(_QWORD *)(a1 + 96) = v12 | 0x8000000000000000;
    *(_QWORD *)(a1 + 80) = v8;
  }
  else
  {
    *(_BYTE *)(a1 + 103) = __len;
    if (!__len)
      goto LABEL_11;
  }
  memmove(v8, __src, __len);
LABEL_11:
  *((_BYTE *)v8 + __len) = 0;
LABEL_12:
  v13 = (_QWORD *)(a1 + 104);
  if (a4)
  {
    if (a5 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (a5 >= 0x17)
      {
        v14 = (a5 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((a5 | 7) != 0x17)
          v14 = a5 | 7;
        v15 = v14 + 1;
        v13 = operator new(v14 + 1);
        *(_QWORD *)(a1 + 112) = a5;
        *(_QWORD *)(a1 + 120) = v15 | 0x8000000000000000;
        *(_QWORD *)(a1 + 104) = v13;
      }
      else
      {
        *(_BYTE *)(a1 + 127) = a5;
        if (!a5)
          goto LABEL_22;
      }
      memmove(v13, a4, a5);
LABEL_22:
      *((_BYTE *)v13 + a5) = 0;
      goto LABEL_23;
    }
LABEL_24:
    abort();
  }
  *v13 = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
LABEL_23:
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  return a1;
}

void sub_22E5EFA0C(uint64_t a1, int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(unsigned int *)(a1 + 8);
  if ((*(_DWORD *)(a1 + 64) & 0x3F) != 0)
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3 - 8) &= ~(-1 << (*(_DWORD *)(a1 + 64) & 0x3F));
  v4 = v3;
  *(_DWORD *)(a1 + 64) = a2;
  v5 = a2 + 63;
  if ((_DWORD)v3 != (a2 + 63) >> 6)
  {
    v6 = v5 >> 6;
    if (v3 > v6)
    {
      *(_DWORD *)(a1 + 8) = v6;
      v4 = v5 >> 6;
    }
    else
    {
      v7 = v3;
      if (v6 > *(_DWORD *)(a1 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v7 = *(unsigned int *)(a1 + 8);
        v4 = *(_DWORD *)(a1 + 8);
      }
      if (v6 != v3)
        bzero((void *)(*(_QWORD *)a1 + 8 * v7), 8 * (v6 - v3));
      v4 += v6 - v3;
      *(_DWORD *)(a1 + 8) = v4;
      a2 = *(_DWORD *)(a1 + 64);
    }
  }
  if ((a2 & 0x3F) != 0)
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4 - 8) &= ~(-1 << (a2 & 0x3F));
}

void sub_22E5EFB0C(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_22E5EFB0C(a1, *(_QWORD *)a2);
    sub_22E5EFB0C(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

void sub_22E5EFB5C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  _QWORD *v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;

  v2 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v2)
  {
    v4 = *a1;
    v5 = *a1 + (v2 << 7);
    v6 = (_QWORD *)(a2 + 24);
    v7 = v4 + 24;
    do
    {
      v8 = *(_OWORD *)(v7 - 24);
      *((_DWORD *)v6 - 2) = *(_DWORD *)(v7 - 8);
      *(_OWORD *)(v6 - 3) = v8;
      v9 = sub_22F28CAB8(v6, v7);
      v10 = *(_OWORD *)(v7 + 56);
      v9[9] = *(_QWORD *)(v7 + 72);
      *(_OWORD *)(v9 + 7) = v10;
      *(_QWORD *)(v7 + 56) = 0;
      *(_QWORD *)(v7 + 64) = 0;
      *(_QWORD *)(v7 + 72) = 0;
      v11 = *(_OWORD *)(v7 + 80);
      v9[12] = *(_QWORD *)(v7 + 96);
      *((_OWORD *)v9 + 5) = v11;
      *(_QWORD *)(v7 + 88) = 0;
      *(_QWORD *)(v7 + 96) = 0;
      *(_QWORD *)(v7 + 80) = 0;
      v6 = v9 + 16;
      v12 = v7 + 104;
      v7 += 128;
    }
    while (v12 != v5);
    v13 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v13)
    {
      v14 = 0;
      v15 = *a1;
      v16 = v13 << 7;
      do
      {
        v17 = v15 + v16;
        if (*(char *)(v15 + v16 - 1) < 0)
          operator delete(*(void **)(v17 - 24));
        if (*(char *)(v17 - 25) < 0)
          operator delete(*(void **)(v15 + v16 - 48));
        sub_22F242DFC(v15 + v16 - 72, *(_QWORD **)(v15 + v16 - 64));
        v18 = *(void **)(v15 + v16 - 104);
        if ((void *)(v15 + v16 - 88) != v18)
          free(v18);
        v15 -= 128;
        v14 += 128;
      }
      while (v16 != v14);
    }
  }
}

uint64_t sub_22E5EFC64(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  BOOL v8;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = (int *)(a2 + 1);
  v5 = (int *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      sub_22F28CD34((_QWORD **)a1, v3, v5 + 7, v5 + 7);
      v6 = (int *)*((_QWORD *)v5 + 1);
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(int **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (int *)*((_QWORD *)v5 + 2);
          v8 = *(_QWORD *)v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != v4);
  }
  return a1;
}

uint64_t *sub_22E5EFCF8(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          a4 = (uint64_t *)v16;
          v17 = *(_DWORD *)(v16 + 28);
          if (v15 >= v17)
            break;
          v16 = *a4;
          v5 = a4;
          if (!*a4)
            goto LABEL_34;
        }
        if (v17 >= v15)
          break;
        v5 = a4 + 1;
        v16 = a4[1];
      }
      while (v16);
LABEL_25:
      *a3 = a4;
      return v5;
    }
    goto LABEL_42;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v18 = a2;
    do
    {
      a4 = (uint64_t *)v18[2];
      v14 = *a4 == (_QWORD)v18;
      v18 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    v19 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          a4 = (uint64_t *)v19;
          v20 = *(_DWORD *)(v19 + 28);
          if (v6 >= v20)
            break;
          v19 = *a4;
          v5 = a4;
          if (!*a4)
            goto LABEL_34;
        }
        if (v20 >= v6)
          break;
        v5 = a4 + 1;
        v19 = a4[1];
      }
      while (v19);
      goto LABEL_25;
    }
LABEL_42:
    *a3 = v5;
    return v5;
  }
  if (v11)
  {
LABEL_34:
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

unint64_t sub_22E5EFE94(uint64_t a1, unint64_t a2)
{
  unint64_t result;
  uint64_t v4;
  __int128 v5;

  result = sub_22E3B9688(a1, a2, 1);
  v4 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 8);
  if (*(char *)(result + 23) < 0)
  {
    result = (unint64_t)sub_22E3BB2B4((_BYTE *)(*(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 8)), *(void **)result, *(_QWORD *)(result + 8));
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)v4 = v5;
  }
  ++*(_DWORD *)(a1 + 8);
  return result;
}

_QWORD *sub_22E5EFEFC(uint64_t a1, _QWORD *a2, const void **a3)
{
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  size_t v7;
  const void *v8;
  _QWORD *v9;
  _QWORD *v10;
  const void *v11;
  const void *v12;
  size_t v13;
  const void *v14;
  size_t v15;
  size_t v16;
  size_t v17;
  int v18;
  _BOOL4 v19;
  size_t v20;
  int v21;
  _BOOL4 v22;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v6 = *((char *)a3 + 23);
    if (v6 >= 0)
      v7 = *((unsigned __int8 *)a3 + 23);
    else
      v7 = (size_t)a3[1];
    if (v6 >= 0)
      v8 = a3;
    else
      v8 = *a3;
    do
    {
      while (1)
      {
        v9 = v4;
        v12 = (const void *)v4[4];
        v10 = v4 + 4;
        v11 = v12;
        v13 = *((unsigned __int8 *)v10 + 23);
        if ((v13 & 0x80u) == 0)
          v14 = v10;
        else
          v14 = v11;
        v15 = v10[1];
        if ((v13 & 0x80u) == 0)
          v16 = v13 & 0x7F;
        else
          v16 = v10[1];
        if (v16 >= v7)
          v17 = v7;
        else
          v17 = v16;
        v18 = memcmp(v8, v14, v17);
        v19 = v7 < v16;
        if (v18)
          v19 = v18 < 0;
        if (!v19)
          break;
        v4 = (_QWORD *)*v9;
        v5 = v9;
        if (!*v9)
          goto LABEL_33;
      }
      if ((v13 & 0x80u) != 0)
        v13 = v15;
      if (v7 >= v13)
        v20 = v13;
      else
        v20 = v7;
      v21 = memcmp(v14, v8, v20);
      v22 = v13 < v7;
      if (v21)
        v22 = v21 < 0;
      if (!v22)
        break;
      v5 = v9 + 1;
      v4 = (_QWORD *)v9[1];
    }
    while (v4);
  }
  else
  {
    v9 = (_QWORD *)(a1 + 8);
  }
LABEL_33:
  *a2 = v9;
  return v5;
}

_QWORD *sub_22E5F0018@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x38uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  result = v6 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    result = sub_22E3BB2B4(result, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)a2;
    result[2] = *(_QWORD *)(a2 + 16);
  }
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

_QWORD *sub_22E5F0080@<X0>(_QWORD *a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  _DWORD *v6;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD v16[4];
  uint64_t v17;

  if (*a2 != 161)
    return sub_22E4D8D7C(a3);
  v6 = (_DWORD *)*((_QWORD *)a2 + 2);
  if (!v6 || (v6[7] & 0x7Fu) - 67 < 0xFFFFFFF9)
    return sub_22E4D8D7C(a3);
  v9 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 32))(v6);
  v16[0] = v9;
  v17 = 0;
  if ((sub_22F246C54(a1 + 241, v16, &v17) & 1) != 0 && *(_QWORD *)(v17 + 8)
    || (v10 = a1[232]) != 0 && (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 32))(v10, v9))
  {
    v11 = 1;
  }
  else
  {
    v12 = a1[200];
    if (v12)
      v11 = (*(_DWORD *)(v12 + 28) & 0x7F) == 1;
    else
      v11 = 0;
  }
  v13 = *(_QWORD *)(a1[18] + 144);
  v14 = *((_QWORD *)a2 + 1);
  sub_22EFF605C((uint64_t)a2);
  v17 = 0;
  sub_22EFF69F0((uint64_t)v16, v13, v9, v11, v14, 1, v15, &v17, 0);
  return sub_22E4D8D7C(a3);
}

_QWORD *sub_22E5F01E0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  _QWORD *v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  _DWORD *v19;
  uint64_t v20;
  const char *v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  llvm::Value *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  llvm::Value *v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  _OWORD v42[8];
  uint64_t v43;
  _OWORD v44[8];
  uint64_t v45;
  _QWORD v46[6];
  char v47;
  __int128 v48;
  _BYTE v49[32];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  _BYTE v56[64];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  _QWORD v62[17];
  _OWORD v63[2];
  uint64_t v64;
  __int128 v65[2];
  uint64_t v66;
  _BYTE v67[20];
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  result = (_QWORD *)sub_22EFC3B90(*(_QWORD *)(a2 + 24));
  v7 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v7)
  {
    v8 = (unint64_t)result;
    v9 = a2 + 32;
    v10 = a2 + 32 + 8 * v7;
    v11 = (_DWORD *)(a2 + (8 * v7 + 40));
    v41 = &loc_22F44E000;
    v40 = (unint64_t)&loc_22F44E000;
    do
    {
      if ((~*(_DWORD *)(v8 + 72) & 3) != 0)
      {
        v12 = (*v11 >> 1) & 3;
        if (v12)
        {
          if (v12 == 2)
          {
            sub_22E4D8D7C(v62);
            result = (_QWORD *)sub_22F25F748((uint64_t)a1, (uint64_t)v62, v11[2]);
            v13 = result;
            v15 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 48) & 0xFFFFFFFFFFFFFFF0)
                                                             + 8) & 0xFFFFFFFFFFFFFFF0)
                                     + 16);
            if (v15 != 32 && v15 != 39)
            {
              v39 = *(_QWORD *)(a1[18] + 144);
              v16 = sub_22F36D7FC(v39);
              v17 = *(_QWORD *)((*(_QWORD *)v11 & 0xFFFFFFFFFFFFFFF8) + 40) & 0xFFFFFFFFFFFFFFF8;
              if ((*(_QWORD *)((*(_QWORD *)v11 & 0xFFFFFFFFFFFFFFF8) + 40) & 7) != 0 || v17 == 0)
              {
                v20 = 0;
                v21 = "";
              }
              else
              {
                v19 = *(_DWORD **)(v17 + 16);
                v22 = *v19;
                v21 = (const char *)(v19 + 4);
                v20 = v22;
              }
              *(_WORD *)&v56[32] = 773;
              *(_QWORD *)v56 = v21;
              *(_QWORD *)&v56[8] = v20;
              *(_QWORD *)&v56[16] = ".casted";
              v23 = sub_22F25E4D4((uint64_t)a1, v16, (uint64_t)v56, 0);
              v25 = 0;
              v26 = v23 & 0xFFFFFFFFFFFFFFF8;
              if (v23 <= 7)
                v26 = 0;
              v38 = (llvm::Value *)v26;
              v27 = v24 & 0xFFFFFFFFFFFFFFF8;
              if (v23 <= 7)
                v27 = 0;
              v34 = v27;
              if (v23 >= 8)
                v25 = 1 << (v24 & 7 | (8 * (v23 & 7)));
              v33 = v25;
              *(_OWORD *)&v67[4] = 0uLL;
              v35 = sub_22F36D7FC(v39);
              sub_22E6281E0((_QWORD *)a1[18], v35, (uint64_t)v63);
              *(_QWORD *)&v48 = v38;
              *((_QWORD *)&v48 + 1) = v34;
              *(_QWORD *)v49 = v33;
              *(_DWORD *)&v49[8] = 0;
              *(_OWORD *)&v49[12] = *(_OWORD *)v67;
              *(_DWORD *)&v49[28] = *(_DWORD *)&v67[16];
              v28 = *(_QWORD *)(a1[18] + 144);
              v65[0] = v63[0];
              v65[1] = v63[1];
              v66 = v64;
              memset(&v56[8], 0, 28);
              *(_QWORD *)&v56[40] = 0;
              *(_QWORD *)&v56[48] = 0;
              v57 = 0uLL;
              *(_QWORD *)((char *)&v58 + 4) = 2;
              *(_DWORD *)v56 = 0;
              v59 = 0u;
              v60 = 0u;
              sub_22E3C113C((uint64_t)v56, &v48, v35, 2, v65, v28);
              v29 = sub_22F36D7FC(v39);
              LODWORD(v35) = v40 & 0xFFFFFFE0;
              v36 = v36 & 0xFFFFFFFF00000000 | v40 & 0xE0;
              v40 = sub_22EF5B848(v39, v29, v40 & 0xE0);
              v37 = v37 & 0xFFFFFFFF00000000 | v41 & 0xE0;
              v30 = sub_22EF5B848(v39, *(_QWORD *)(v8 + 48), v41 & 0xE0);
              v31 = v11[2];
              *(_QWORD *)&v48 = a1;
              *((_QWORD *)&v48 + 1) = a1 + 34;
              v49[0] = 0;
              *(_QWORD *)&v49[8] = *(_QWORD *)(a1[18] + 232);
              v32 = sub_22E50EA80((uint64_t *)&v48, v38, v40, v30, v31, 0);
              sub_22E619C24((uint64_t)v32, *(_QWORD *)(v8 + 48), 0, 1, (uint64_t)a1, (uint64_t)&v48);
              v46[0] = v13;
              v46[1] = 0;
              v47 &= 0xF8u;
              v44[6] = v53;
              v44[7] = v54;
              v45 = v55;
              v44[2] = *(_OWORD *)&v49[16];
              v44[3] = v50;
              v44[4] = v51;
              v44[5] = v52;
              v44[0] = v48;
              v44[1] = *(_OWORD *)v49;
              sub_22E4DAAE0(a1, v46, v44, 0, *(double *)v49);
              v42[6] = v59;
              v42[7] = v60;
              v43 = v61;
              v42[2] = *(_OWORD *)&v56[32];
              v42[3] = *(_OWORD *)&v56[48];
              v42[4] = v57;
              v42[5] = v58;
              v42[0] = *(_OWORD *)v56;
              v42[1] = *(_OWORD *)&v56[16];
              result = (_QWORD *)sub_22F25F748((uint64_t)a1, (uint64_t)v42, v11[2]);
              v13 = result;
              LODWORD(v40) = v35;
              LODWORD(v41) = v41 & 0xFFFFFFE0;
            }
          }
          else
          {
            result = sub_22E4D8D7C(v56);
            v48 = *(_OWORD *)&v56[8];
            *(_OWORD *)v49 = *(_OWORD *)&v56[24];
            *(_OWORD *)&v49[16] = *(_OWORD *)&v56[40];
            if ((v56[32] & 3) != 0)
            {
              result = (_QWORD *)sub_22F28ABCC(&v48, a1);
              v13 = result;
            }
            else
            {
              v13 = (_QWORD *)v48;
            }
          }
        }
        else
        {
          v13 = (_QWORD *)a1[526];
        }
      }
      else
      {
        *(_QWORD *)v56 = *(_QWORD *)((*(_QWORD *)(v8 + 72) & 0xFFFFFFFFFFFFFFFCLL) + 40);
        result = sub_22F25E108(a1 + 514, v56);
        v13 = (_QWORD *)result[1];
      }
      v14 = *(unsigned int *)(a3 + 8);
      if (v14 >= *(unsigned int *)(a3 + 12))
      {
        result = (_QWORD *)llvm::SmallVectorBase<unsigned int>::grow_pod();
        v14 = *(unsigned int *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v14) = v13;
      ++*(_DWORD *)(a3 + 8);
      v9 += 8;
      do
        v8 = *(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v8 && (*(_DWORD *)(v8 + 28) & 0x7Fu) - 49 > 2);
      v11 += 4;
    }
    while (v9 != v10);
  }
  return result;
}

llvm::Value *sub_22E5F06DC()
{
  uint64_t v0;
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v6;
  uint64_t v7;
  size_t v8;
  const void *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  llvm *v20;
  uint64_t v21;
  llvm *v22;
  uint64_t v23;
  unint64_t v24;
  llvm *v25;
  uint64_t v26;
  llvm *v27;
  llvm::Value *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  llvm::Value *v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t *v36;
  unint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  llvm *v41;
  unsigned int v42;
  BOOL v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  _OWORD *v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unsigned int v57;
  llvm::Type **v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  llvm::Value *v64;
  uint64_t v65;
  llvm::Value *v66;
  uint64_t v67;
  uint64_t v68;
  _OWORD v69[8];
  uint64_t v70;
  _OWORD v71[8];
  uint64_t v72;
  _OWORD v73[3];
  _OWORD v74[3];
  _BYTE v75[64];
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  __int16 v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  _QWORD v89[3];
  char v90;
  char v91;
  uint64_t v92;
  uint64_t v93[2];
  int v94;
  _QWORD v95[2];
  int v96;
  uint64_t v97;
  BOOL v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  _BYTE v103[24];
  uint64_t v104;
  void *__dst;
  uint64_t *v106;
  llvm *v107;
  uint64_t v108;
  unsigned int v109;
  _QWORD v110[2];
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  void *v127;
  uint64_t v128;
  _BYTE v129[32];
  _OWORD v130[9];
  _QWORD *v131;
  uint64_t v132[329];
  uint64_t v133;
  unsigned int v134;
  uint64_t v135[250];
  void *v136;
  __int128 v137;
  _BYTE v138[256];
  void *v139;
  uint64_t v140;
  _QWORD v141[19];

  v0 = MEMORY[0x24BDAC7A8]();
  v3 = v2;
  v4 = v1;
  v5 = v0;
  v141[16] = *MEMORY[0x24BDAC8D0];
  v6 = !*(_BYTE *)(v0 + 2892)
    && *(_QWORD *)(v0 + 2880)
    && (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 144) + 184) + 96) & 0x1800000000000000) != 0;
  v7 = *(_QWORD *)(v1 + 16);
  v139 = v141;
  v140 = 0x1000000000;
  v110[1] = 0;
  v110[0] = 0;
  v111 = 0;
  v114 = 0;
  v112 = 0;
  v113 = 0;
  v108 = 0;
  v107 = 0;
  v109 = 0;
  v136 = v138;
  v137 = xmmword_22F44E320;
  sub_22F242C48((uint64_t)v103, (uint64_t)&v136);
  v9 = (const void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 1856) + 56))(*(_QWORD *)(v5 + 1856));
  v10 = v8;
  if (v8 <= v104 - (uint64_t)__dst)
  {
    if (v8)
    {
      memcpy(__dst, v9, v8);
      __dst = (char *)__dst + v10;
    }
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v103, (const char *)v9);
  }
  if (v6)
  {
    if ((unint64_t)(v104 - (_QWORD)__dst) > 7)
    {
      *(_QWORD *)__dst = 0x5F5F67756265645FLL;
      __dst = (char *)__dst + 8;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v103, "_debug__");
    }
  }
  v12 = *v106;
  v11 = v106[1];
  v67 = v4;
  v97 = v4;
  v98 = !v6;
  v99 = 0;
  v100 = v12;
  v101 = v11;
  v102 = v3;
  v66 = sub_22E5F106C(v5, (uint64_t)&v139, (uint64_t)v110, (uint64_t)&v107, (uint64_t *)(v5 + 4208), &v97);
  v91 = 1;
  v13 = *(_QWORD *)(v5 + 1992) - *(_QWORD *)(v5 + 2000);
  v89[2] = *(_QWORD *)(v5 + 2312);
  v90 = *(_BYTE *)(v5 + 2893);
  *(_BYTE *)(v5 + 2893) = 0;
  v14 = *(_QWORD *)(v5 + 2872);
  v89[0] = v13;
  v89[1] = v14;
  *(_QWORD *)(v5 + 2872) = v13;
  v93[1] = 0;
  v92 = v5;
  v93[0] = 0;
  v94 = 0;
  v95[1] = 0;
  v95[0] = 0;
  v96 = 0;
  v15 = v5;
  v16 = v112;
  v17 = v113;
  if (v112 != v113)
  {
    do
    {
      v18 = *(_QWORD *)(v16 + 8);
      if (v18)
      {
        v19 = *(_OWORD *)(v16 + 32);
        v86 = *(_OWORD *)(v16 + 16);
        v87 = v19;
        v88 = *(_OWORD *)(v16 + 48);
        v130[0] = v86;
        v130[1] = v19;
        v130[2] = v88;
        sub_22E5BC134(v93, v92, v18, (uint64_t)v130);
      }
      v16 += 64;
    }
    while (v16 != v17);
    v15 = v92;
  }
  sub_22E5BC320((uint64_t)v95, v15 + 2904);
  sub_22F2840EC((uint64_t)v95);
  v20 = (llvm *)((char *)v107 + 24 * v109);
  if ((_DWORD)v108)
  {
    if (v109)
    {
      v23 = 24 * v109;
      v22 = v107;
      while ((*(_QWORD *)v22 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v22 = (llvm *)((char *)v22 + 24);
        v23 -= 24;
        if (!v23)
          goto LABEL_23;
      }
      v21 = v5;
    }
    else
    {
      v21 = v5;
      v22 = v107;
    }
  }
  else
  {
LABEL_23:
    v21 = v5;
    v22 = (llvm *)((char *)v107 + 24 * v109);
  }
  v24 = v7 & 0xFFFFFFFFFFFFFFF8;
  v25 = (llvm *)((char *)v107 + 24 * v109);
  while (v22 != v25)
  {
    v26 = *((_QWORD *)v22 + 2);
    sub_22F25E108((uint64_t *)(v21 + 4112), (_QWORD *)v22 + 1)[1] = v26;
    v27 = (llvm *)((char *)v22 + 24);
    v22 = v20;
    if (v27 != v20)
    {
      v22 = v27;
      while ((*(_QWORD *)v22 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v22 = (llvm *)((char *)v22 + 24);
        if (v22 == v20)
        {
          v22 = v20;
          break;
        }
      }
    }
  }
  v28 = v66;
  sub_22E654990((uint64_t *)(v21 + 3904), v24, 0, v66);
  (*(void (**)(_QWORD, uint64_t, unint64_t))(**(_QWORD **)(v21 + 1856) + 48))(*(_QWORD *)(v21 + 1856), v21, *(_QWORD *)(v24 + 80) & 0xFFFFFFFFFFFFFFF8);
  sub_22F280698((uint64_t)v89);
  v29 = sub_22EFCAEA8((_DWORD *)v24);
  sub_22E619DE8(v21, v29);
  if (!v6)
    goto LABEL_64;
  v30 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v21 + 1856) + 56))(*(_QWORD *)(v21 + 1856));
  v31 = v67;
  v81 = v67;
  v82 = 257;
  v83 = v30;
  v84 = v32;
  v85 = v3;
  sub_22E618EBC((uint64_t)v130, *(_QWORD *)(v21 + 144), 1);
  v132[198] = *(_QWORD *)(v21 + 1856);
  LODWORD(v140) = 0;
  sub_22F29444C((uint64_t)v110);
  v113 = v112;
  sub_22F28CFFC((uint64_t)&v107);
  v33 = sub_22E5F106C((uint64_t)v130, (uint64_t)&v139, (uint64_t)v110, (uint64_t)&v107, v135, &v81);
  v127 = v129;
  v128 = 0x400000000;
  if ((*((_BYTE *)v66 + 18) & 1) != 0)
    llvm::Function::BuildLazyArguments(v66);
  if (!(_DWORD)v140)
  {
    v34 = *(_QWORD *)(*(_QWORD *)(v21 + 144) + 808);
    v35 = v128;
    goto LABEL_60;
  }
  v64 = v33;
  v65 = v21;
  v36 = (uint64_t *)v139;
  v37 = (unint64_t *)*((_QWORD *)v66 + 11);
  v68 = v67 + 32;
  v38 = 8 * v140;
  do
  {
    v39 = *v36;
    v40 = sub_22F288C3C((uint64_t)v110, *v36);
    if (v113 == v40)
    {
      *(_QWORD *)v75 = 0;
      v41 = v107;
      v42 = v109;
      if (sub_22F28501C((uint64_t)v107, v109, v39, v75))
        v43 = *(_QWORD *)v75 == (_QWORD)v41 + 24 * v42;
      else
        v43 = 1;
      if (!v43)
      {
        v58 = *(llvm::Type ***)(*(_QWORD *)v75 + 16);
        v31 = v67;
        goto LABEL_52;
      }
      *(_QWORD *)&v118 = v39;
      *(_QWORD *)&v124 = 0;
      v44 = sub_22E3CED3C(&v133, &v118, &v124);
      v45 = v133 + 56 * v134;
      if (v44)
        v45 = v124;
      v118 = *(_OWORD *)(v45 + 8);
      v119 = *(_OWORD *)(v45 + 24);
      v120 = *(_OWORD *)(v45 + 40);
      v46 = *(_QWORD *)(v39 + 48);
      sub_22E6281E0(v131, v46, (uint64_t)&v115);
      v124 = v118;
      v125 = v119;
      v126 = v120;
      v47 = v131[18];
      v121 = v115;
      v122 = v116;
      v123 = v117;
      memset(&v75[8], 0, 28);
      *(_QWORD *)&v75[40] = 0;
      *(_QWORD *)&v75[48] = 0;
      v76 = 0uLL;
      *(_QWORD *)((char *)&v77 + 4) = 2;
      *(_DWORD *)v75 = 0;
      v78 = 0u;
      v79 = 0u;
      sub_22E3C113C((uint64_t)v75, &v124, v46, 0, &v121, v47);
      v69[6] = v78;
      v69[7] = v79;
      v70 = v80;
      v69[2] = *(_OWORD *)&v75[32];
      v69[3] = *(_OWORD *)&v75[48];
      v69[4] = v76;
      v69[5] = v77;
      v69[0] = *(_OWORD *)v75;
      v69[1] = *(_OWORD *)&v75[16];
      v31 = v67;
      sub_22F0D5A50(*(_QWORD *)(v68 + 8 * *(unsigned int *)(v67 + 8)));
      v49 = v48;
      v50 = v69;
    }
    else
    {
      v51 = *(_OWORD *)(v40 + 32);
      v118 = *(_OWORD *)(v40 + 16);
      v119 = v51;
      v120 = *(_OWORD *)(v40 + 48);
      v52 = *(_QWORD *)(v40 + 8);
      if (!v52)
        v52 = v39;
      v53 = *(_QWORD *)(v52 + 48);
      sub_22E6281E0(v131, v53, (uint64_t)&v115);
      v124 = v118;
      v125 = v119;
      v126 = v120;
      v54 = v131[18];
      v121 = v115;
      v122 = v116;
      v123 = v117;
      memset(&v75[8], 0, 28);
      *(_QWORD *)&v75[40] = 0;
      *(_QWORD *)&v75[48] = 0;
      v76 = 0uLL;
      *(_QWORD *)((char *)&v77 + 4) = 2;
      *(_DWORD *)v75 = 0;
      v78 = 0u;
      v79 = 0u;
      sub_22E3C113C((uint64_t)v75, &v124, v53, 0, &v121, v54);
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v76 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) == 12)
      {
        v73[0] = *(_OWORD *)&v75[8];
        v73[1] = *(_OWORD *)&v75[24];
        v73[2] = *(_OWORD *)&v75[40];
        llvm::PointerType::get();
        v55 = llvm::PointerType::get();
        v56 = *v37;
        LOWORD(v126) = 257;
        sub_22F245864(v132, v73, v55, v56, (uint64_t)&v124, (uint64_t)v74);
        *(_OWORD *)&v75[8] = v74[0];
        *(_OWORD *)&v75[24] = v74[1];
        *(_OWORD *)&v75[40] = v74[2];
      }
      v71[6] = v78;
      v71[7] = v79;
      v72 = v80;
      v71[2] = *(_OWORD *)&v75[32];
      v71[3] = *(_OWORD *)&v75[48];
      v71[4] = v76;
      v71[5] = v77;
      v71[0] = *(_OWORD *)v75;
      v71[1] = *(_OWORD *)&v75[16];
      sub_22F0D5A50(*(_QWORD *)(v68 + 8 * *(unsigned int *)(v31 + 8)));
      v49 = v57;
      v50 = v71;
    }
    v58 = (llvm::Type **)sub_22F25F748((uint64_t)v130, (uint64_t)v50, v49);
LABEL_52:
    v59 = sub_22E4E7BB4((uint64_t)v130, v58, *(_QWORD *)(v39 + 48));
    v60 = v59;
    v61 = v128;
    if (v128 >= HIDWORD(v128))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      *((_QWORD *)v127 + v128) = v60;
      v61 = v128;
    }
    else
    {
      *((_QWORD *)v127 + v128) = v59;
    }
    v35 = v61 + 1;
    LODWORD(v128) = v35;
    v37 += 5;
    ++v36;
    v38 -= 8;
  }
  while (v38);
  v34 = *(_QWORD *)(*(_QWORD *)(v65 + 144) + 808);
  v28 = v66;
  if (!v66)
  {
    v62 = 0;
    v33 = v64;
    goto LABEL_61;
  }
  v33 = v64;
LABEL_60:
  v62 = *((_QWORD *)v28 + 3);
LABEL_61:
  (*(void (**)(uint64_t, _OWORD *, _QWORD, uint64_t, llvm::Value *, void *, _QWORD))(*(_QWORD *)v34 + 568))(v34, v130, v3, v62, v28, v127, v35);
  sub_22E619DE8((uint64_t)v130, 0);
  if (v127 != v129)
    free(v127);
  sub_22E619434((uint64_t)v130);
  v28 = v33;
LABEL_64:
  sub_22F283FC4((uint64_t)v89);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v103);
  if (v136 != v138)
    free(v136);
  llvm::deallocate_buffer(v107, (void *)(24 * v109));
  sub_22F244D40((uint64_t)v110);
  if (v139 != v141)
    free(v139);
  return v28;
}

llvm::Value *sub_22E5F106C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t *v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  size_t v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  llvm::Value *v44;
  int8x16_t v45;
  unint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  unint64_t v66;
  __int128 *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  unint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  int v85;
  unint64_t v86;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  __int128 v94;
  unint64_t v95;
  llvm::Value *v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v102;
  _OWORD v103[8];
  uint64_t v104;
  _OWORD v105[8];
  uint64_t v106;
  _OWORD v107[3];
  _OWORD v108[8];
  uint64_t v109;
  _OWORD v110[8];
  uint64_t v111;
  _OWORD v112[8];
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  _BYTE v123[80];
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  _OWORD v128[2];
  uint64_t v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133[2];
  uint64_t v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  void *v138;
  uint64_t v139;
  _QWORD v140[19];

  v6 = a6;
  v140[16] = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(*a6 + 24);
  v9 = *(_QWORD *)(*a6 + 16) & 0xFFFFFFFFFFFFFFF8;
  *a5 = 0;
  v102 = *(_QWORD *)(a1 + 144);
  v10 = *(_QWORD *)(v102 + 144);
  v138 = v140;
  v139 = 0x1000000000;
  sub_22F246808(a2, (char *)(v9 + 88), (char *)(v9 + 88 + 8 * *(unsigned int *)(v9 + 76)));
  v95 = v9 + 88;
  v97 = v9;
  sub_22F246808((uint64_t)&v138, (char *)(v9 + 88), (char *)(v9 + 88 + 8 * *(unsigned int *)(v9 + 76)));
  v11 = 0;
  v12 = *v6;
  v13 = *(_DWORD *)(*v6 + 8);
  if (!*((_BYTE *)v6 + 8))
  {
    *(_WORD *)v123 = 0;
    v123[2] = 0;
    *(_OWORD *)&v123[4] = 0uLL;
    memset(&v123[24], 0, 52);
    v14 = sub_22EF63D8C(v10, *(_QWORD *)(v10 + 16392), 0, 0, (__int128 *)v123, 0);
    v15 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*(_QWORD *)(v10 + 1960) + 80) + 72), *(_QWORD *)(*(_QWORD *)(v10 + 1960) + 80));
    if (v15)
      v16 = v15 + 40;
    else
      v16 = 0;
    sub_22F0D5A50(*(_QWORD *)(*v6 + 8 * *(unsigned int *)(*v6 + 8) + 32));
    v18 = v17;
    v19 = sub_22EF579A8(v10, v14, 0);
    *(_QWORD *)&v114 = 0;
    DWORD2(v114) = 0;
    v11 = sub_22EFC4400(v10, v16, v18, (uint64_t *)&v114, v14, (uint64_t)v19, 2, 0, 0, 0, 0, 0);
  }
  v99 = v8;
  v20 = sub_22EFC3B90(v8);
  if (!v20)
    goto LABEL_46;
  v21 = v20;
  v22 = (uint64_t *)(v12 + (8 * v13 + 40));
LABEL_8:
  v23 = *(_QWORD *)(v21 + 48);
  v24 = *v22;
  if (*((_BYTE *)v6 + 8))
  {
    v25 = (v24 >> 1) & 3;
    if (v25 != 2)
    {
      if (v25 != 3)
        goto LABEL_14;
      goto LABEL_41;
    }
    v26 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                             + 16);
    if (v26 != 32 && v26 != 39)
    {
LABEL_41:
      v23 = sub_22F36D7FC(v10);
      v24 = *v22;
    }
  }
LABEL_14:
  v27 = (v24 >> 1) & 3;
  if (v27 - 1 > 1)
  {
    if (v27)
    {
      v31 = "vla";
      v32 = 3;
    }
    else
    {
      v31 = "this";
      v32 = 4;
    }
    v30 = sub_22E3CB704(*(llvm::StringMapImpl **)(v10 + 15192), v31, v32);
    v28 = 0;
  }
  else
  {
    v28 = v24 & 0xFFFFFFFFFFFFFFF8;
    v29 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFFFF8) + 40);
    if ((v29 & 7) != 0)
      v30 = 0;
    else
      v30 = v29 & 0xFFFFFFFFFFFFFFF8;
  }
  if ((*(_BYTE *)(*(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF0) + 17) & 8) != 0)
    v23 = sub_22E600044(v10, v23);
  if (v11 && (v28 || (v28 = v21, (*(_BYTE *)v22 & 6) == 0)))
  {
    v33 = *(_QWORD *)(v28 + 56);
    if ((v33 & 4) != 0 && (v39 = v33 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(v39 + 16)))
      v34 = **(int ***)(v39 + 24);
    else
      v34 = (int *)(v28 + 64);
    v35 = sub_22EFBF080(v10, v11 + 72, *v34, *(_DWORD *)(v28 + 24), v30, v23, 0, 0, 0);
  }
  else
  {
    v35 = sub_22EFC4364(v10, 0, *(_DWORD *)(v21 + 24), v30, v23, 5);
  }
  v36 = v35;
  v37 = *(unsigned int *)(a2 + 8);
  if (v37 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    *(_QWORD *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 8)) = v36;
    LODWORD(v37) = *(_DWORD *)(a2 + 8);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v37) = v35;
  }
  *(_DWORD *)(a2 + 8) = v37 + 1;
  if (!*((_BYTE *)v6 + 8))
    v36 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v102 + 808) + 536))(*(_QWORD *)(v102 + 808), v21, v36);
  v38 = v139;
  if (v139 >= HIDWORD(v139))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    *((_QWORD *)v138 + v139) = v36;
    v38 = v139;
  }
  else
  {
    *((_QWORD *)v138 + v139) = v36;
  }
  LODWORD(v139) = v38 + 1;
  v22 += 2;
  while (1)
  {
    v21 = *(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (!v21)
      break;
    if ((*(_DWORD *)(v21 + 28) & 0x7Fu) - 49 < 3)
      goto LABEL_8;
  }
LABEL_46:
  sub_22F246808(a2, (char *)(v95 + 8 * (*(_DWORD *)(v97 + 76) + 1)), (char *)(v95 + 8 * *(unsigned int *)(v97 + 72)));
  sub_22F246808((uint64_t)&v138, (char *)(v95 + 8 * (*(_DWORD *)(v97 + 76) + 1)), (char *)(v95 + 8 * *(unsigned int *)(v97 + 72)));
  v40 = sub_22F24E348(v102 + 280, *(_QWORD *)(v10 + 16392), (uint64_t *)&v138);
  v41 = sub_22E46F2EC(v102 + 280, v40);
  *(_WORD *)&v123[32] = 261;
  v42 = v6[3];
  *(_QWORD *)v123 = v6[2];
  *(_QWORD *)&v123[8] = v42;
  v43 = *(_QWORD *)(v102 + 200);
  v44 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x78);
  MEMORY[0x23489F6FC](v44, v41, 7, 0xFFFFFFFFLL, v123, v43);
  sub_22E62BF18((uint64_t *)v102, v97, 0, v44, v40);
  if ((*(_BYTE *)(v97 + 80) & 4) != 0)
    llvm::Function::addFnAttr();
  llvm::Function::addFnAttr();
  if ((*(_BYTE *)(*(_QWORD *)(v102 + 184) + 33) & 0x18) != 0)
  {
    llvm::Function::removeFnAttr();
    llvm::Function::addFnAttr();
  }
  v46 = *(_QWORD *)(v10 + 16392);
  if (*((_BYTE *)v6 + 8))
  {
    v47 = *((_DWORD *)v6 + 8);
    v48 = v47;
  }
  else
  {
    sub_22F0D5A50(*(_QWORD *)(*v6 + 8 * *(unsigned int *)(*v6 + 8) + 32));
    v47 = v49;
    sub_22F0D5A50(*(_QWORD *)(v97 + 80) & 0xFFFFFFFFFFFFFFF8);
  }
  sub_22E61A8FC(a1, v97, 0, v46, v44, v40, (uint64_t *)&v138, v47, v45, v48);
  v50 = *(_DWORD *)(v97 + 76);
  v51 = *v6;
  v52 = *(_DWORD *)(*v6 + 8);
  v53 = sub_22EFC3B90(v99);
  if (!v53)
    goto LABEL_95;
  v54 = v53;
  v55 = (uint64_t *)(v51 + (8 * v52 + 40));
  v91 = v10;
  v92 = v6;
  v96 = v44;
LABEL_55:
  v100 = v50;
  if (*((_BYTE *)v6 + 8) || *(_QWORD *)(*(_QWORD *)a2 + 8 * v50) == *((_QWORD *)v138 + v50))
  {
    *(_QWORD *)&v114 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v50);
    *(_QWORD *)v123 = 0;
    v56 = sub_22E3CED3C((uint64_t *)(a1 + 2904), &v114, v123);
    v57 = *(_QWORD *)v123;
    if (!v56)
      v57 = *(_QWORD *)(a1 + 2904) + 56 * *(unsigned int *)(a1 + 2920);
    v58 = *(_QWORD *)(v57 + 8);
    v59 = *(_QWORD *)(v57 + 16);
    v60 = *(_QWORD *)(v57 + 24);
    v62 = *(_DWORD *)(v57 + 32);
    v61 = *(_DWORD *)(v57 + 36);
    v63 = *(_QWORD *)(v57 + 40);
    v64 = *(_QWORD *)(v57 + 48);
  }
  else
  {
    (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v102 + 808) + 544))(v123, *(_QWORD *)(v102 + 808), a1);
    v59 = *(_QWORD *)&v123[8];
    v58 = *(_QWORD *)v123;
    v60 = *(_QWORD *)&v123[16];
    v62 = *(_DWORD *)&v123[24];
    v61 = *(_DWORD *)&v123[28];
    v64 = *(_QWORD *)&v123[40];
    v63 = *(_QWORD *)&v123[32];
  }
  if ((*v55 & 6) == 4)
  {
    v65 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v54 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                             + 16);
    if (v65 == 39 || v65 == 32)
    {
      if (*((_BYTE *)v6 + 9))
        goto LABEL_77;
      v66 = *v55 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v123 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v100);
      *(_QWORD *)&v123[8] = v66;
      *(_QWORD *)&v123[16] = v58;
      *(_QWORD *)&v123[24] = v59;
      *(_QWORD *)&v123[32] = v60;
      *(_DWORD *)&v123[40] = v62;
      *(_DWORD *)&v123[44] = v61;
      *(_QWORD *)&v123[48] = v63;
      *(_QWORD *)&v123[56] = v64;
      v67 = (__int128 *)v123;
      goto LABEL_92;
    }
  }
  v98 = v55;
  v93 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8 * v100) + 48);
  v68 = v63;
  sub_22E6281E0(*(_QWORD **)(a1 + 144), v93, (uint64_t)&v130);
  *(_QWORD *)&v114 = v58;
  *((_QWORD *)&v114 + 1) = v59;
  *(_QWORD *)&v115 = v60;
  *((_QWORD *)&v115 + 1) = __PAIR64__(v61, v62);
  *(_QWORD *)&v116 = v68;
  *((_QWORD *)&v116 + 1) = v64;
  v69 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
  v135 = v130;
  v136 = v131;
  *(_QWORD *)&v137 = v132;
  memset(&v123[8], 0, 28);
  *(_QWORD *)&v123[40] = 0;
  *(_QWORD *)&v123[48] = 0;
  *(_OWORD *)&v123[64] = 0uLL;
  *(_QWORD *)((char *)&v124 + 4) = 2;
  *(_DWORD *)v123 = 0;
  v125 = 0u;
  v126 = 0u;
  sub_22E3C113C((uint64_t)v123, &v114, v93, 0, &v135, v69);
  if ((~*(_DWORD *)(v54 + 72) & 3) != 0)
  {
    v70 = *v55;
    v71 = (*v55 >> 1) & 3;
    v6 = v92;
    if (v71 == 1)
    {
      v72 = v70 & 0xFFFFFFFFFFFFFFF8;
      v73 = *(_QWORD *)(*(_QWORD *)&v123[64] & 0xFFFFFFFFFFFFFFF0);
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v73 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 40)
      {
        v108[6] = v125;
        v108[7] = v126;
        v109 = v127;
        v108[2] = *(_OWORD *)&v123[32];
        v108[3] = *(_OWORD *)&v123[48];
        v108[4] = *(_OWORD *)&v123[64];
        v108[5] = v124;
        v108[0] = *(_OWORD *)v123;
        v108[1] = *(_OWORD *)&v123[16];
        sub_22E4E96BC(a1, (uint64_t)v108, 0, 0, &v114);
      }
      else
      {
        v74 = *(_OWORD *)&v123[8];
        v75 = *(_QWORD *)(*(_QWORD *)(v72 + 48) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v75 + 17) & 8) != 0
          && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v75 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
        {
          goto LABEL_76;
        }
        v107[0] = *(_OWORD *)&v123[8];
        v107[1] = *(_OWORD *)&v123[24];
        v107[2] = *(_OWORD *)&v123[40];
        if (*(_BYTE *)(v73 + 16) != 39)
          v73 = sub_22F10CF48(v73);
        sub_22E4E98F8(a1, v107, v73, 0, 0, &v114);
      }
      v74 = v114;
LABEL_76:
      if (*((_BYTE *)v92 + 9))
        goto LABEL_77;
      v83 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v100);
      v94 = v74;
      v84 = sub_22EF5B404(v91, v72, 0);
      *(_QWORD *)&v114 = v83;
      v55 = v98;
      *((_QWORD *)&v114 + 1) = v72;
      v115 = v94;
      *(_QWORD *)&v116 = v84;
      DWORD2(v116) = 0;
      v117 = 0uLL;
      goto LABEL_91;
    }
    if (v71 != 2)
    {
      v103[6] = v125;
      v103[7] = v126;
      v104 = v127;
      v103[2] = *(_OWORD *)&v123[32];
      v103[3] = *(_OWORD *)&v123[48];
      v103[4] = *(_OWORD *)&v123[64];
      v103[5] = v124;
      v103[0] = *(_OWORD *)v123;
      v103[1] = *(_OWORD *)&v123[16];
      *a5 = sub_22F25F748(a1, (uint64_t)v103, *((_DWORD *)v55 + 2));
      v82 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v100);
      v115 = *(_OWORD *)&v123[8];
      v116 = *(_OWORD *)&v123[24];
      v117 = *(_OWORD *)&v123[40];
      v114 = v82;
LABEL_91:
      v67 = &v114;
LABEL_92:
      sub_22F28881C(a3, v67);
      goto LABEL_77;
    }
    v76 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v100);
    if (*((_BYTE *)v92 + 8))
    {
      v85 = *((_DWORD *)v98 + 2);
      v86 = *(_QWORD *)(v54 + 48);
      v105[6] = v125;
      v105[7] = v126;
      v106 = v127;
      v105[2] = *(_OWORD *)&v123[32];
      v105[3] = *(_OWORD *)&v123[48];
      v105[4] = *(_OWORD *)&v123[64];
      v105[5] = v124;
      v105[0] = *(_OWORD *)v123;
      v105[1] = *(_OWORD *)&v123[16];
      sub_22E6001C0(&v135, a1, v85, v86, (uint64_t)v105);
    }
    else
    {
      v135 = *(_OWORD *)&v123[8];
      v136 = *(_OWORD *)&v123[24];
      v137 = *(_OWORD *)&v123[40];
    }
    v115 = v135;
    v116 = v136;
    v117 = v137;
    *(_QWORD *)&v114 = v76;
    *((_QWORD *)&v114 + 1) = v70 & 0xFFFFFFFFFFFFFFF8;
    sub_22F28881C(a3, &v114);
    v55 = v98;
  }
  else
  {
    v6 = v92;
    if (*((_BYTE *)v92 + 8))
    {
      v77 = *((_DWORD *)v55 + 2);
      v78 = *(_QWORD *)(v54 + 48);
      v112[6] = v125;
      v112[7] = v126;
      v113 = v127;
      v112[2] = *(_OWORD *)&v123[32];
      v112[3] = *(_OWORD *)&v123[48];
      v112[4] = *(_OWORD *)&v123[64];
      v112[5] = v124;
      v112[0] = *(_OWORD *)v123;
      v112[1] = *(_OWORD *)&v123[16];
      sub_22E6001C0(&v130, a1, v77, v78, (uint64_t)v112);
      v79 = *(_QWORD *)(v54 + 48);
      sub_22E6281E0(*(_QWORD **)(a1 + 144), v79, (uint64_t)v128);
      v135 = v130;
      v136 = v131;
      v137 = v132;
      v80 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
      v133[0] = v128[0];
      v133[1] = v128[1];
      v134 = v129;
      v115 = 0uLL;
      *((_QWORD *)&v114 + 1) = 0;
      LODWORD(v116) = 0;
      *((_QWORD *)&v116 + 1) = 0;
      *(_QWORD *)&v117 = 0;
      v118 = 0uLL;
      *(_QWORD *)((char *)&v119 + 4) = 2;
      LODWORD(v114) = 0;
      v120 = 0u;
      v121 = 0u;
      sub_22E3C113C((uint64_t)&v114, &v135, v79, 0, v133, v80);
      v125 = v120;
      v126 = v121;
      v127 = v122;
      *(_OWORD *)&v123[32] = v116;
      *(_OWORD *)&v123[48] = v117;
      v124 = v119;
      *(_OWORD *)&v123[64] = v118;
      *(_OWORD *)&v123[16] = v115;
      *(_OWORD *)v123 = v114;
    }
    v110[6] = v125;
    v110[7] = v126;
    v111 = v127;
    v110[2] = *(_OWORD *)&v123[32];
    v110[3] = *(_OWORD *)&v123[48];
    v110[4] = *(_OWORD *)&v123[64];
    v110[5] = v124;
    v110[0] = *(_OWORD *)v123;
    v110[1] = *(_OWORD *)&v123[16];
    *(_QWORD *)&v135 = sub_22F25F748(a1, (uint64_t)v110, *((_DWORD *)v55 + 2));
    v81 = *(_QWORD *)(v54 + 72) & 0xFFFFFFFFFFFFFFFCLL;
    if ((~*(_DWORD *)(v54 + 72) & 3) != 0)
      v81 = 0;
    *(_QWORD *)&v130 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v100);
    *(_QWORD *)&v133[0] = *(_QWORD *)(v81 + 40);
    sub_22F27C11C((uint64_t)&v114, a4, (uint64_t *)&v130, v133, &v135);
  }
LABEL_77:
  v55 += 2;
  v50 = v100 + 1;
  v44 = v96;
  while (1)
  {
    v54 = *(_QWORD *)(v54 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (!v54)
      break;
    if ((*(_DWORD *)(v54 + 28) & 0x7Fu) - 49 < 3)
      goto LABEL_55;
  }
LABEL_95:
  if (v138 != v140)
    free(v138);
  return v44;
}

