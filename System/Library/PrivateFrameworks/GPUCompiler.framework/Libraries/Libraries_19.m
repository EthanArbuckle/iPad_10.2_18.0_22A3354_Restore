uint64_t sub_22ED36AF8(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  char *v10;

  if (a4 && (*(_BYTE *)(a4 + 28) & 0x80) != 0)
    return 1;
  v9 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 32, 3);
  *(_BYTE *)v9 = 86;
  if (byte_255E04EB3)
  {
    v10 = sub_22F0D3748(86);
    ++*((_DWORD *)v10 + 2);
  }
  *(_QWORD *)(v9 + 8) = a4;
  *(_QWORD *)(v9 + 16) = a5;
  *(_DWORD *)(v9 + 24) = a2;
  *(_DWORD *)(v9 + 28) = a3;
  return v9;
}

uint64_t sub_22ED36B94(_QWORD *a1, int a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22[24];

  if (a3)
  {
    v5 = sub_22EB1A358(a1, a3, 0);
    if ((v5 & 1) != 0)
      return 1;
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    if ((v5 & 0xFFFFFFFFFFFFFFFELL) != 0)
    {
      sub_22EFF605C(v5 & 0xFFFFFFFFFFFFFFFELL);
      v8 = v7;
    }
    else
    {
      v8 = 0;
    }
    v12 = sub_22EBCF22C((uint64_t)a1, v6, v8, 0, 0);
    if ((v12 & 1) != 0)
      return 1;
    v9 = v12 & 0xFFFFFFFFFFFFFFFELL;
    v13 = *(_QWORD *)(*(_QWORD *)((v12 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0);
    if ((*(_DWORD *)(v13 + 16) & 0x400) == 0)
    {
      v14 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v14 != 32)
      {
        if (*(_DWORD *)(v13 + 16) != 39 && (v14 != 39 || (v13 = sub_22F10CF48(v13)) == 0)
          || ((v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)) != 0
            ? (v16 = (*(_DWORD *)(v15 + 16) & 0xFF800FF) == 86507531)
            : (v16 = 0),
              !v16))
        {
          sub_22E8FCA40(a1, a2, 0x101Du, 0, (uint64_t)v22);
          v21 = *(_QWORD *)(v9 + 8);
          v17 = sub_22E8901B8((uint64_t)v22, &v21);
          sub_22F0D4E74(v9);
          v20 = v18;
          sub_22E8906A0(v17, &v20);
          sub_22E903BEC(v22);
          return 1;
        }
      }
    }
  }
  else
  {
    v9 = 0;
  }
  v10 = sub_22E3CD3D4(a1[11] + 2032, 24, 3);
  *(_BYTE *)v10 = 89;
  if (byte_255E04EB3)
  {
    v11 = sub_22F0D3748(89);
    ++*((_DWORD *)v11 + 2);
  }
  *(_QWORD *)(v10 + 16) = v9;
  *(_DWORD *)(v10 + 8) = a2;
  return v10;
}

uint64_t sub_22ED36D40(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  void *v21;
  int v22;
  uint64_t v23;

  v5 = sub_22EB1A358(a1, a3, 0);
  if ((v5 & 1) != 0)
    return 1;
  v6 = (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL);
  v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
  v23 = v7;
  v8 = *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_DWORD *)(v8 + 16) & 0x400) != 0)
    goto LABEL_20;
  v9 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v9 == 32)
    goto LABEL_20;
  if (*(_DWORD *)(v8 + 16) == 39 || v9 == 39 && (v8 = sub_22F10CF48(v8)) != 0)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v10 && (*(_DWORD *)(v10 + 16) & 0xFF800FF) == 86507531)
      goto LABEL_20;
  }
  if ((*(_BYTE *)(a1[9] + 1) & 1) == 0)
  {
    v12 = a2;
    v13 = a1;
LABEL_15:
    sub_22E8FCA40(v13, v12, 0x101Cu, 0, (uint64_t)&v21);
    v14 = sub_22E8901B8((uint64_t)&v21, &v23);
    sub_22F0D4E74((uint64_t)v6);
    v20 = v15;
    sub_22E8906A0(v14, &v20);
    sub_22E903BEC((unsigned int *)&v21);
    return 1;
  }
  v21 = &unk_24FAB6EF8;
  v22 = 3589;
  if (sub_22EE8B0B0((uint64_t)a1, a2, v7))
    goto LABEL_14;
  v17 = sub_22F342A50(a1, v6);
  if ((v17 & 1) != 0)
    return 1;
  if (v17 <= 1)
  {
LABEL_14:
    v13 = a1;
    v12 = a2;
    goto LABEL_15;
  }
  v6 = (unsigned __int8 *)(v17 & 0xFFFFFFFFFFFFFFFELL);
  if ((v17 & 0xFFFFFFFFFFFFFFFELL) != 0)
  {
LABEL_20:
    sub_22EFF605C((uint64_t)v6);
    v19 = v18;
  }
  else
  {
    v19 = 0;
  }
  return sub_22EBCF22C((uint64_t)a1, (unint64_t)v6, v19, 0, 0);
}

uint64_t sub_22ED36EF4(uint64_t a1, int a2, uint64_t a3, const void *a4, uint64_t a5)
{
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t i;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  uint64_t *v34;
  int v35;
  uint64_t *v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51[12];
  _QWORD v52[2];
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  llvm *v58;
  uint64_t v59;
  unsigned int v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  _QWORD v65[2];
  unsigned int v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  int v70;
  _QWORD v71[5];
  void *v72;
  uint64_t v73;
  _DWORD v74[26];
  uint64_t v75;
  __int16 v76;
  char v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  if ((*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) & 0x400000000000) == 0)
  {
    v9 = sub_22F1E361C(*(_QWORD **)(a1 + 112), a2);
    v10 = v9 == 3 || v9 == 0;
    if (v10 && (*(_BYTE *)(*(_QWORD *)(a1 + 72) + 68) & 0x20) == 0)
    {
      sub_22F308EA4((_QWORD *)a1, a2, 0xCE9u, 0, (uint64_t)&v61);
      sub_22F2F30F4((uint64_t)&v61, (uint64_t)"try");
      sub_22E903BEC((unsigned int *)&v61);
    }
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 68) & 0x20) != 0)
  {
    sub_22F31C558(a1, a2, 0xC44u, (uint64_t)&v61);
    v41 = sub_22F2F30F4((uint64_t)&v61, (uint64_t)"try");
    v42 = *(_QWORD *)(a1 + 216);
    v43 = (*(_WORD *)(v42 + 8) & 0x7E) - 52;
    if (v42)
      v44 = v42 - 72;
    else
      v44 = 0;
    if (v43 >= 6)
      v45 = 0;
    else
      v45 = v44;
    LODWORD(v51[0]) = sub_22E9FDFC4(a1, v45, 0);
    sub_22E8900C4(v41, (int *)v51);
    sub_22E903BEC((unsigned int *)&v61);
  }
  v11 = *(_QWORD *)(a1 + 12888);
  if (v11 && (*(_BYTE *)(v11 + 10) & 2) != 0)
  {
    sub_22E8FCA40((_QWORD *)a1, a2, 0x10F1u, 0, (uint64_t)&v61);
    sub_22F2F30F4((uint64_t)&v61, (uint64_t)"try");
    sub_22E903BEC((unsigned int *)&v61);
  }
  v12 = *(unsigned int *)(a1 + 1904);
  if ((_DWORD)v12)
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v12 - 8);
  else
    v13 = 0;
  if ((**(_BYTE **)(a1 + 72) & 0x80) == 0 && *(_DWORD *)(v13 + 28))
  {
    sub_22E8FCA40((_QWORD *)a1, a2, 0xF5Du, 0, (uint64_t)&v61);
    LODWORD(v51[0]) = 0;
    sub_22E8900C4((uint64_t)&v61, (int *)v51);
    sub_22E903BEC((unsigned int *)&v61);
    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v13 + 28), 0x1575u, 0, (uint64_t)&v61);
    sub_22F2F30F4((uint64_t)&v61, (uint64_t)"'__try'");
    sub_22E903BEC((unsigned int *)&v61);
  }
  v46 = v13;
  v47 = a2;
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v49 = a5;
  v14 = a5;
  if (!(_DWORD)a5)
  {
LABEL_65:
    *(_DWORD *)(v46 + 8) |= 8u;
    *(_QWORD *)(v46 + 20) = v47;
    v39 = sub_22F3F2D54(*(_QWORD *)(a1 + 88), v47, a3, a4, v49);
    goto LABEL_64;
  }
  v15 = 0;
  v16 = (a5 - 1);
  while (1)
  {
    v17 = *((_QWORD *)a4 + v15);
    v18 = *(_QWORD *)(v17 + 16);
    if (!v18)
      break;
    if ((*(_BYTE *)(v18 + 28) & 0x80) == 0)
    {
      sub_22ED375C0((uint64_t)&v56, *(_QWORD *)(v18 + 48) & 7 | *(_QWORD *)((*(_QWORD *)(v18 + 48) & 0xFFFFFFFFFFFFFFF0) + 8));
      v19 = sub_22F10C2A4(*(_QWORD *)(v56 & 0xFFFFFFFFFFFFFFF0));
      if (v19)
      {
        v20 = v19;
        if ((*(_DWORD *)(v19 + 28) & 0x7Fu) - 35 <= 2)
        {
          if (!*(_QWORD *)(v19 + 128))
          {
            sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v19 + 104) + 96), *(_QWORD *)(v19 + 104));
            if (!*(_QWORD *)(v20 + 128))
              goto LABEL_60;
          }
          v62 = (uint64_t)&v62;
          v63 = &v62;
          v64 = 0;
          v65[0] = 1;
          for (i = 40; i != 168; i += 16)
            *(unint64_t *)((char *)&v61 + i) = 0;
          v67 = v71;
          v68 = v71;
          v69 = 4;
          v70 = 0;
          v71[4] = 0;
          v72 = v74;
          v73 = 0x400000000;
          v74[24] = 0;
          v75 = 0;
          v76 = 257;
          v77 = 1;
          v61 = v20;
          v52[0] = *(_QWORD *)(a1 + 88);
          v52[1] = &v58;
          v53 = v57 & 1;
          v54 = 0;
          v55 = 0;
          if (sub_22EFB3774(v20, (unsigned int (*)(uint64_t, unint64_t, uint64_t))sub_22ED4E4E0, (uint64_t)v52, (uint64_t)&v61, 0))
          {
            v22 = v54;
            v51[0] = (uint64_t *)(*(_QWORD *)(v55 & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0);
            v23 = sub_22EFB50E0(v65, v51);
            if (((_DWORD)v23[1] & 1u) + (*((_DWORD *)v23 + 2) >> 1) <= 1)
            {
              v24 = sub_22EFBAFDC(*(_QWORD *)(v17 + 16));
              sub_22E8FCA40((_QWORD *)a1, v24, 0x198Cu, 0, (uint64_t)v51);
              v25 = *(_QWORD *)(v17 + 16);
              if (v25)
                v25 = *(_QWORD *)(v25 + 48);
              v50 = v25;
              sub_22E8901B8((uint64_t)v51, &v50);
              sub_22E903BEC((unsigned int *)v51);
              v26 = sub_22EFBAFDC(*(_QWORD *)(v22 + 16));
              sub_22E8FCA40((_QWORD *)a1, v26, 0x1772u, 0, (uint64_t)v51);
              v27 = *(_QWORD *)(v22 + 16);
              if (v27)
                v27 = *(_QWORD *)(v27 + 48);
              v50 = v27;
              sub_22E8901B8((uint64_t)v51, &v50);
              sub_22E903BEC((unsigned int *)v51);
            }
          }
          if (v72 != v74)
            free(v72);
          if (v68 != v67)
            free(v68);
          if ((v65[0] & 1) == 0)
            llvm::deallocate_buffer((llvm *)v65[1], (void *)(16 * v66));
          sub_22E687D9C(&v62);
        }
      }
      v28 = *(_QWORD *)(v17 + 16);
      if (v28)
        v29 = *(_QWORD *)(v28 + 48);
      else
        v29 = 0;
      sub_22ED375C0((uint64_t)&v61, v29);
      v63 = (uint64_t *)v17;
      v51[0] = 0;
      v30 = sub_22ED4E5E4((uint64_t)v58, v60, v61, v62, v51);
      v31 = v51[0];
      if ((v30 & 1) == 0)
      {
        v37 = v60;
        if (4 * (int)v59 + 4 >= 3 * v60)
        {
          v37 = 2 * v60;
        }
        else if (v60 + ~(_DWORD)v59 - HIDWORD(v59) > v60 >> 3)
        {
          goto LABEL_56;
        }
        sub_22ED4E6A8((uint64_t)&v58, v37);
        v51[0] = 0;
        sub_22ED4E5E4((uint64_t)v58, v60, v61, v62, v51);
        v31 = v51[0];
LABEL_56:
        LODWORD(v59) = v59 + 1;
        if ((v31[1] & 1) != 0 || *v31)
          --HIDWORD(v59);
        v38 = v61;
        *((_BYTE *)v31 + 8) = v62;
        *v31 = v38;
        v31[2] = (uint64_t)v63;
        goto LABEL_60;
      }
      v32 = v51[0][2];
      v33 = sub_22EFBAFDC(*(_QWORD *)(v17 + 16));
      sub_22E8FCA40((_QWORD *)a1, v33, 0x198Cu, 0, (uint64_t)&v61);
      v34 = *(uint64_t **)(v17 + 16);
      if (v34)
        v34 = (uint64_t *)v34[6];
      v51[0] = v34;
      sub_22E8901B8((uint64_t)&v61, (uint64_t *)v51);
      sub_22E903BEC((unsigned int *)&v61);
      v35 = sub_22EFBAFDC(*(_QWORD *)(v32 + 16));
      sub_22E8FCA40((_QWORD *)a1, v35, 0x1772u, 0, (uint64_t)&v61);
      v36 = *(uint64_t **)(v32 + 16);
      if (v36)
        v36 = (uint64_t *)v36[6];
      v51[0] = v36;
      sub_22E8901B8((uint64_t)&v61, (uint64_t *)v51);
      sub_22E903BEC((unsigned int *)&v61);
    }
LABEL_60:
    if (++v15 == v14)
      goto LABEL_65;
  }
  if (v15 >= v16)
    goto LABEL_60;
  sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v17 + 8), 0xCD7u, 0, (uint64_t)&v61);
  sub_22E903BEC((unsigned int *)&v61);
  v39 = 1;
LABEL_64:
  llvm::deallocate_buffer(v58, (void *)(24 * v60));
  return v39;
}

uint64_t sub_22ED375C0(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  *(_QWORD *)a1 = a2;
  v3 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3 & 0xFE;
  v4 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v4 + 8);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v6 == 39)
  {
    *(_BYTE *)(a1 + 8) = v3 | 1;
    v4 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  }
  else if ((v6 & 0xFE) != 0x28)
  {
    goto LABEL_5;
  }
  a2 = sub_22F10ACF8(v4);
  *(_QWORD *)a1 = a2;
  v4 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v4 + 8);
LABEL_5:
  if ((v5 & 0xF) != 0)
    v4 = (uint64_t)sub_22F10D2BC(a2);
  *(_QWORD *)a1 = v4 & 0xFFFFFFFFFFFFFFF0;
  return a1;
}

uint64_t sub_22ED3765C(uint64_t a1, char a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 **v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  const char *v23;
  unint64_t v24;
  __int16 v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  BOOL v33;
  uint64_t v34;
  BOOL v35;
  unsigned int v37[24];
  unsigned int v38[24];
  unsigned int v39[4];
  uint64_t v40;
  unsigned __int8 *v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  char v45;
  uint64_t v46;

  v10 = *(unsigned int *)(a1 + 1904);
  if ((_DWORD)v10)
    v11 = *(_DWORD **)(*(_QWORD *)(a1 + 1896) + 8 * v10 - 8);
  else
    v11 = 0;
  if ((**(_BYTE **)(a1 + 72) & 0x80) == 0 && v11[5])
  {
    sub_22E8FCA40((_QWORD *)a1, a3, 0xF5Du, 0, (uint64_t)v39);
    if (v43)
    {
      v19 = (int)v11[6];
      v21 = v41;
      if (!v41)
      {
        v21 = (unsigned __int8 *)sub_22E3B8AAC(v42);
        v41 = v21;
      }
      v21[*v21 + 1] = 2;
      v20 = v41;
    }
    else
    {
      if (!v45)
      {
LABEL_17:
        sub_22E903BEC(v39);
        sub_22E8FCA40((_QWORD *)a1, v11[5], 0x1575u, 0, (uint64_t)v39);
        v23 = "'@try'";
        if (!v11[6])
          v23 = "'try'";
        v46 = (uint64_t)v23;
        sub_22E8AECC4((uint64_t)v39, &v46);
        sub_22E903BEC(v39);
        goto LABEL_20;
      }
      v12 = v40;
      v13 = (uint64_t *)(*(_QWORD *)v39 + 12784);
      if (v40)
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 32))(v40);
      v46 = v12;
      v14 = sub_22F2F1D6C(v13, &v46);
      v15 = v14[1] + 32 * v44;
      v18 = *(unsigned __int8 **)(v15 + 8);
      v17 = (unsigned __int8 **)(v15 + 8);
      v16 = v18;
      v19 = (int)v11[6];
      if (!v18)
      {
        v16 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v17[1]);
        *v17 = v16;
      }
      v16[*v16 + 1] = 2;
      v20 = *v17;
    }
    v22 = *v20;
    *v20 = v22 + 1;
    *(_QWORD *)&v20[8 * v22 + 16] = v19;
    goto LABEL_17;
  }
LABEL_20:
  v11[2] |= 8u;
  v11[7] = a3;
  v24 = *(_QWORD *)(a1 + 216);
  if (!v24)
    goto LABEL_51;
  while (1)
  {
    v25 = *(_WORD *)(v24 + 8);
    v26 = v25 & 0x7F;
    v27 = v26 > 0x18 || ((1 << (v25 & 0x7F)) & 0x1000006) == 0;
    if (!v27 || (v26 - 52) < 6)
      break;
    v28 = -40;
    if (v26 > 70)
    {
      if (v26 != 83)
      {
        if (v26 == 71)
        {
          v28 = -56;
        }
        else if (v26 != 81)
        {
          goto LABEL_38;
        }
      }
    }
    else
    {
      if (v26 > 0x18)
        goto LABEL_37;
      if (v26 == 16)
        goto LABEL_30;
      if (((1 << v26) & 0x1066) != 0)
        goto LABEL_43;
      if (v26 == 24)
      {
LABEL_30:
        v28 = -48;
      }
      else
      {
LABEL_37:
        if (v26 != 70)
        {
LABEL_38:
          if ((v26 - 33) >= 5)
            v28 = -48;
          else
            v28 = -64;
          if ((v26 - 52) < 6)
            v28 = -72;
          goto LABEL_43;
        }
        v28 = -64;
      }
    }
LABEL_43:
    v29 = *(_QWORD *)(v24 + v28 + 16);
    v24 = v29 & 0xFFFFFFFFFFFFFFF8;
    if ((v29 & 4) != 0)
      v24 = *(_QWORD *)v24;
    if (!v24)
      goto LABEL_51;
  }
  if ((v25 & 0x7Eu) - 52 > 5)
  {
LABEL_51:
    sub_22E8FCA40((_QWORD *)a1, a3, 0x1253u, 0, (uint64_t)v38);
    sub_22E903BEC(v38);
    goto LABEL_52;
  }
  *(_QWORD *)(v24 + 8) |= 0x200000000uLL;
LABEL_52:
  v30 = *(_QWORD *)(a1 + 88);
  v31 = *(_QWORD *)(v30 + 15088);
  if (*(_DWORD *)(v31 + 68) != 15
    || ((v32 = *(_DWORD *)(v31 + 56), v33 = v32 > 0x2A, v34 = (1 << v32) & 0x60000000008, !v33)
      ? (v35 = v34 == 0)
      : (v35 = 1),
        v35))
  {
    sub_22E8FCA40((_QWORD *)a1, a3, 0x1254u, 0, (uint64_t)v37);
    sub_22E903BEC(v37);
    v30 = *(_QWORD *)(a1 + 88);
  }
  return sub_22F3F28C4(v30, a2, a3, a4, a5);
}

uint64_t sub_22ED379B0(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, __int16 a7)
{
  uint64_t v11;
  char v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  llvm::StringMapImpl *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  BOOL v39;
  uint64_t v40;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;

  v45 = 0;
  v44 = sub_22F344C04((_QWORD *)a1, (unint64_t *)&v45, a2, a6);
  if (v45)
    v11 = v45 + 40;
  else
    v11 = 0;
  if (!a6)
  {
    v13 = 0;
    v16 = v45;
LABEL_17:
    v27 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(a1 + 88) + 15192), "__context", 9uLL);
    v28 = *(_QWORD *)(a1 + 88);
    v29 = *(_QWORD *)(v44 + 48);
    if (v29)
      v30 = v29 & 0xFFFFFFFFFFFFFFF0;
    else
      v30 = sub_22EF6462C(*(_QWORD *)(a1 + 88), v44);
    v31 = sub_22EF5B848(v28, v30, 0);
    v32 = sub_22EFC4364(*(_QWORD *)(a1 + 88), v11, a2, v27, v31, 4);
    sub_22EFCCFA0(v11, v32);
    *(_DWORD *)(v16 + 76) = v13;
    *(_QWORD *)(v16 + 8 * v13 + 88) = v32;
    goto LABEL_20;
  }
  v12 = 0;
  v13 = 0;
  v14 = a5 + 24 * a6;
  v15 = v45 + 88;
  v16 = v45;
  do
  {
    while (1)
    {
      v17 = *(llvm::StringMapImpl **)(*(_QWORD *)(a1 + 88) + 15192);
      if (*(_QWORD *)(a5 + 16) > 0xFuLL)
        break;
      v20 = v16;
      v21 = sub_22E3CB704(v17, "__context", 9uLL);
      v22 = *(_QWORD *)(a1 + 88);
      v23 = *(_QWORD *)(v44 + 48);
      if (v23)
        v24 = v23 & 0xFFFFFFFFFFFFFFF0;
      else
        v24 = sub_22EF6462C(*(_QWORD *)(a1 + 88), v44);
      v25 = sub_22EF5B848(v22, v24, 0);
      v26 = sub_22EFC4364(*(_QWORD *)(a1 + 88), v11, a2, v21, v25 | 3, 4);
      sub_22EFCCFA0(v11, v26);
      v16 = v20;
      *(_DWORD *)(v20 + 76) = v13;
      *(_QWORD *)(v15 + 8 * v13) = v26;
      a5 += 24;
      ++v13;
      v12 = 1;
      if (a5 == v14)
        goto LABEL_20;
    }
    v18 = sub_22E3CB704(v17, *(const void **)a5, *(_QWORD *)(a5 + 8));
    v19 = sub_22EFC4364(*(_QWORD *)(a1 + 88), v11, a2, v18, *(_QWORD *)(a5 + 16), 4);
    sub_22EFCCFA0(v11, v19);
    *(_QWORD *)(v15 + 8 * v13) = v19;
    a5 += 24;
    ++v13;
  }
  while (a5 != v14);
  if ((v12 & 1) == 0)
    goto LABEL_17;
LABEL_20:
  sub_22E905FE0(a1, a3, v16, v44, a4, a7);
  if (a3)
  {
    *(_QWORD *)(a1 + 216) = v11;
    v33 = (uint64_t *)(a3 + 360);
  }
  else
  {
    v33 = (uint64_t *)(a1 + 216);
  }
  *v33 = v11;
  v49 = 6;
  v48 = 0;
  v47 = 3;
  v46 = *(unsigned int *)(a1 + 1704);
  result = sub_22EB4DDB8(a1 + 3688, &v49, (int *)&v46, (__int16 *)(a1 + 1693), &v48, &v47);
  v35 = *(unsigned int *)(a1 + 3696);
  v36 = v35 - 2;
  v37 = *(_QWORD *)(a1 + 3688);
  v38 = *(_DWORD *)(v37 + 576 * (v35 - 2));
  if (v38 == 5)
  {
    *(_BYTE *)(v37 + 576 * v35 - 4) = *(_BYTE *)(v37 + 576 * v36 + 572);
    v39 = 1;
  }
  else if (v38 == 2)
  {
    *(_BYTE *)(v37 + 576 * v35 - 4) = 1;
    v39 = *(_BYTE *)(v37 + 576 * v36 + 573) != 0;
  }
  else
  {
    v39 = 0;
    *(_BYTE *)(v37 + 576 * v35 - 4) = 0;
  }
  v40 = v37 + 576 * v35;
  *(_BYTE *)(v40 - 3) = v39;
  *(_WORD *)(a1 + 1693) = 0;
  if (*(_DWORD *)(a1 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(a1 + 1776), (llvm::SmallPtrSetImplBase *)(v40 - 560));
    return sub_22EAEAE08(a1 + 1840, (uint64_t *)(v40 - 496));
  }
  return result;
}

uint64_t sub_22ED37CF8(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  _BYTE v40[32];
  void *v41;
  uint64_t v42;
  _QWORD v43[10];

  v43[8] = *MEMORY[0x24BDAC8D0];
  sub_22EB48DCC((uint64_t)a1);
  v5 = sub_22EB48E64(a1);
  a1[27] = sub_22EA044C0(v5, a1[27]);
  sub_22E904AD8((uint64_t)a1, 0, 0, 0, &v36);
  v6 = v36;
  v7 = (unint64_t)v43;
  v41 = v43;
  v42 = 0x400000000;
  v38 = v40;
  v39 = 0x400000000;
  v8 = *(unsigned int *)(v36 + 1272);
  if ((_DWORD)v8)
  {
    v34 = a2;
    v9 = 0;
    v13 = *(_QWORD *)(v36 + 1264);
    v14 = 32 * v8;
    do
    {
      if ((*(_BYTE *)(v13 + 24) & 0x40) == 0)
      {
        v15 = sub_22F336FAC();
        v16 = sub_22EC552F0((uint64_t)a1, *(_QWORD *)(v6 + 1432), (uint64_t *)v13);
        if ((*(_BYTE *)(v13 + 24) & 8) != 0)
        {
          v22 = *(unsigned int *)(v13 + 8);
          v23 = v42;
          if (v42 >= (unint64_t)HIDWORD(v42))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v23 = v42;
          }
          v2 = v2 & 0xFFFFFFFF00000000 | v22;
          v20 = (char *)v41 + 16 * v23;
          *(_QWORD *)v20 = 0;
          v21 = v2;
        }
        else
        {
          v17 = *(_BYTE *)(v13 + 24) & 3;
          if (v17 == 3)
          {
            v18 = *(unsigned int *)(v13 + 8);
            v19 = v42;
            if (v42 >= (unint64_t)HIDWORD(v42))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v19 = v42;
            }
            v7 = v7 & 0xFFFFFFFF00000000 | v18;
            v20 = (char *)v41 + 16 * v19;
            *(_QWORD *)v20 = 6;
            v21 = v7;
          }
          else
          {
            if (*(_DWORD *)(a1[9] + 72) && *(_WORD *)(v6 + 1456) == 2)
            {
              sub_22EC80DB0(a1, v16, *(_QWORD *)v13, *(unsigned __int16 *)(v6 + 1458));
              v17 = *(_BYTE *)(v13 + 24) & 3;
            }
            v24 = *(unsigned int *)(v13 + 8);
            v25 = *(_QWORD *)v13;
            if (v17 == 1)
              v26 = 2;
            else
              v26 = 4;
            v27 = v42;
            if (v42 >= (unint64_t)HIDWORD(v42))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v27 = v42;
            }
            v20 = (char *)v41 + 16 * v27;
            *(_QWORD *)v20 = v25 & 0xFFFFFFFFFFFFFFF9 | v26;
            v35 = v35 & 0xFFFFFFFF00000000 | v24;
            v21 = v35;
          }
        }
        *((_QWORD *)v20 + 1) = v21;
        LODWORD(v42) = v42 + 1;
        v28 = v39;
        if (v39 >= (unint64_t)HIDWORD(v39))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v28 = v39;
        }
        *((_QWORD *)v38 + v28) = v15 & 0xFFFFFFFFFFFFFFFELL;
        v9 = v39 + 1;
        LODWORD(v39) = v39 + 1;
      }
      v13 += 32;
      v14 -= 32;
    }
    while (v14);
    v12 = v41;
    v10 = v42;
    v11 = (uint64_t *)v38;
    a2 = v34;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = (uint64_t *)v40;
    v12 = v43;
  }
  v29 = *(_QWORD *)(v6 + 1424);
  v30 = *(_QWORD *)(v6 + 1432);
  v31 = sub_22F3F2B28(a1[11], a2, *(unsigned __int16 *)(v6 + 1456), v12, v10, v11, v9, v29, v30);
  *(_QWORD *)(v29 + 80) = *(_QWORD *)(v29 + 80) & 7 | *(_QWORD *)(v31 + 8 * *(unsigned int *)(v31 + 8) + 32);
  (*(void (**)(uint64_t))(*(_QWORD *)v30 + 104))(v30);
  if (v38 != v40)
    free(v38);
  if (v41 != v43)
    free(v41);
  v32 = (_BYTE *)v36;
  v36 = 0;
  if (v32)
  {
    if ((v32[8] & 7) != 0 || *(_QWORD *)(v37 + 1888))
      (*(void (**)(_BYTE *))(*(_QWORD *)v32 + 8))(v32);
    else
      *(_QWORD *)(v37 + 1888) = v32;
  }
  return v31;
}

BOOL sub_22ED38098(_QWORD *a1, uint64_t a2, unint64_t a3, unsigned int a4)
{
  _BOOL8 v8;
  unsigned __int8 **v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;

  v8 = sub_22EF6845C(*(_QWORD *)(*a1 + 88), a2, a3);
  if (!v8)
  {
    v9 = (unsigned __int8 **)a1[1];
    v10 = *v9;
    if (!*v9)
    {
      v10 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v9[1]);
      *v9 = v10;
    }
    v10[*v10 + 1] = 3;
    v11 = *v9;
    v12 = **v9;
    *v11 = v12 + 1;
    *(_QWORD *)&v11[8 * v12 + 16] = a4;
    v13 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(v13 + 8) & 0xF) != 0)
    {
      v13 = (unint64_t)sub_22F10D2BC(a2);
      v11 = *v9;
      if (!*v9)
      {
        v11 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v9[1]);
        *v9 = v11;
      }
    }
    v11[*v11 + 1] = 9;
    v14 = *v9;
    v15 = **v9;
    *v14 = v15 + 1;
    *(_QWORD *)&v14[8 * v15 + 16] = v13 & 0xFFFFFFFFFFFFFFF0;
    v16 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(v16 + 8) & 0xF) != 0)
    {
      v16 = (unint64_t)sub_22F10D2BC(a3);
      v14 = *v9;
      if (!*v9)
      {
        v14 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v9[1]);
        *v9 = v14;
      }
    }
    v14[*v14 + 1] = 9;
    v17 = *v9;
    v18 = **v9;
    *v17 = v18 + 1;
    *(_QWORD *)&v17[8 * v18 + 16] = v16 & 0xFFFFFFFFFFFFFFF0;
  }
  return v8;
}

unsigned int *sub_22ED381EC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v12;
  unsigned int v13[24];
  uint64_t v14;

  v14 = a4;
  sub_22E8FCA40(a2, a3, 0x1298u, 0, (uint64_t)v13);
  v7 = sub_22E8901B8((uint64_t)v13, &v14);
  sub_22F0D4E74(*(_QWORD *)(a1 + 16));
  v12 = v8;
  v9 = sub_22E8906A0(v7, &v12);
  v10 = *(_OWORD *)(v9 + 9);
  *(_OWORD *)a5 = *(_OWORD *)v9;
  *(_OWORD *)(a5 + 9) = v10;
  *(_BYTE *)(a5 + 32) = 0;
  *(_BYTE *)(a5 + 80) = 0;
  if (*(_BYTE *)(v9 + 80))
    sub_22E907424(a5 + 32, v9 + 32);
  *(_QWORD *)(a5 + 88) = *(_QWORD *)(v9 + 88);
  return sub_22E903BEC(v13);
}

unsigned int *sub_22ED382A4@<X0>(_QWORD *a1@<X1>, int a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unsigned int v10[24];
  uint64_t v11;
  uint64_t v12;

  v11 = a4;
  v12 = a3;
  sub_22E8FCA40(a1, a2, 0x1297u, 0, (uint64_t)v10);
  v6 = sub_22E8901B8((uint64_t)v10, &v12);
  v7 = sub_22E8901B8(v6, &v11);
  v8 = *(_OWORD *)(v7 + 9);
  *(_OWORD *)a5 = *(_OWORD *)v7;
  *(_OWORD *)(a5 + 9) = v8;
  *(_BYTE *)(a5 + 32) = 0;
  *(_BYTE *)(a5 + 80) = 0;
  if (*(_BYTE *)(v7 + 80))
    sub_22E907424(a5 + 32, v7 + 32);
  *(_QWORD *)(a5 + 88) = *(_QWORD *)(v7 + 88);
  return sub_22E903BEC(v10);
}

unsigned int *sub_22ED38338@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  BOOL v10;
  unsigned int v11[24];
  uint64_t v12;

  v12 = a3;
  sub_22E8FCA40(a1, *(_DWORD *)(a2 + 24), 0x17CEu, 0, (uint64_t)v11);
  v10 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 44;
  v6 = sub_22E894E38((uint64_t)v11, (unsigned __int8 *)&v10);
  v7 = sub_22E8901B8(v6, &v12);
  v8 = *(_OWORD *)(v7 + 9);
  *(_OWORD *)a4 = *(_OWORD *)v7;
  *(_OWORD *)(a4 + 9) = v8;
  *(_BYTE *)(a4 + 32) = 0;
  *(_BYTE *)(a4 + 80) = 0;
  if (*(_BYTE *)(v7 + 80))
    sub_22E907424(a4 + 32, v7 + 32);
  *(_QWORD *)(a4 + 88) = *(_QWORD *)(v7 + 88);
  return sub_22E903BEC(v11);
}

unsigned int *sub_22ED383F4@<X0>(_QWORD *a1@<X1>, int a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  __int128 v6;
  unsigned int v8[24];
  uint64_t v9;

  v9 = a3;
  sub_22E8FCA40(a1, a2, 0x129Au, 0, (uint64_t)v8);
  v5 = sub_22E8901B8((uint64_t)v8, &v9);
  v6 = *(_OWORD *)(v5 + 9);
  *(_OWORD *)a4 = *(_OWORD *)v5;
  *(_OWORD *)(a4 + 9) = v6;
  *(_BYTE *)(a4 + 32) = 0;
  *(_BYTE *)(a4 + 80) = 0;
  if (*(_BYTE *)(v5 + 80))
    sub_22E907424(a4 + 32, v5 + 32);
  *(_QWORD *)(a4 + 88) = *(_QWORD *)(v5 + 88);
  return sub_22E903BEC(v8);
}

unsigned int *sub_22ED38480@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  BOOL v10;
  unsigned int v11[24];
  uint64_t v12;

  v12 = a3;
  sub_22E8FCA40(a1, *(_DWORD *)(a2 + 24), 0x17CEu, 0, (uint64_t)v11);
  v10 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 44;
  v6 = sub_22E894E38((uint64_t)v11, (unsigned __int8 *)&v10);
  v7 = sub_22E8901B8(v6, &v12);
  v8 = *(_OWORD *)(v7 + 9);
  *(_OWORD *)a4 = *(_OWORD *)v7;
  *(_OWORD *)(a4 + 9) = v8;
  *(_BYTE *)(a4 + 32) = 0;
  *(_BYTE *)(a4 + 80) = 0;
  if (*(_BYTE *)(v7 + 80))
    sub_22E907424(a4 + 32, v7 + 32);
  *(_QWORD *)(a4 + 88) = *(_QWORD *)(v7 + 88);
  return sub_22E903BEC(v11);
}

void sub_22ED38540()
{
  JUMPOUT(0x2348A0E9CLL);
}

unsigned int *sub_22ED38554@<X0>(_QWORD *a1@<X1>, int a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  __int128 v6;
  unsigned int v8[24];
  uint64_t v9;

  v9 = a3;
  sub_22E8FCA40(a1, a2, 0x1390u, 0, (uint64_t)v8);
  v5 = sub_22E8901B8((uint64_t)v8, &v9);
  v6 = *(_OWORD *)(v5 + 9);
  *(_OWORD *)a4 = *(_OWORD *)v5;
  *(_OWORD *)(a4 + 9) = v6;
  *(_BYTE *)(a4 + 32) = 0;
  *(_BYTE *)(a4 + 80) = 0;
  if (*(_BYTE *)(v5 + 80))
    sub_22E907424(a4 + 32, v5 + 32);
  *(_QWORD *)(a4 + 88) = *(_QWORD *)(v5 + 88);
  return sub_22E903BEC(v8);
}

void sub_22ED385E0(uint64_t a1, _DWORD *a2)
{
  int v2;

  v2 = *(unsigned __int8 *)a2;
  if (a2 && (v2 & 0xFE) == 0x70)
  {
    switch((*a2 >> 18) & 0x3F)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
        goto LABEL_7;
      default:
        goto LABEL_5;
    }
  }
  if (!a2 || v2 != 233)
LABEL_5:
    __asm { BR              X9 }
LABEL_7:
  sub_22ED38874(a1, (uint64_t)a2);
}

uint64_t sub_22ED38774()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t result;

  result = sub_22EFFA934(v0, *v1);
  if ((result & 1) == 0)
    JUMPOUT(0x22ED38734);
  return result;
}

void sub_22ED38788()
{
  uint64_t v0;
  uint64_t v1;

  if (!*(_BYTE *)(v1 + 16))
    *(_DWORD *)(v1 + 8) = *(_DWORD *)(v0 + 4);
}

void sub_22ED3879C()
{
  uint64_t v0;
  uint64_t v1;

  *(_DWORD *)(v1 + 12) = *(_DWORD *)(v0 + 4);
}

void sub_22ED387A8()
{
  unsigned __int16 *v0;
  uint64_t v1;
  unsigned int v2;
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;

  v2 = *v0;
  if ((v2 & 0x100) != 0)
  {
    v3 = (_DWORD *)*((_QWORD *)v0 + 3);
    if (v3)
    {
      sub_22ED385E0(v1, v3);
      v2 = *v0;
    }
  }
  if ((v2 & 0x200) != 0)
  {
    v4 = *(_DWORD **)&v0[4 * ((v2 >> 8) & 1) + 12];
    if (v4)
    {
      sub_22ED385E0(v1, v4);
      v2 = *v0;
    }
  }
  v5 = *(_DWORD **)&v0[4 * ((v2 >> 8) & 1) + 12 + 4 * ((v2 >> 9) & 1)];
  if (v5)
    sub_22ED385E0(v1, v5);
  *(_BYTE *)(v1 + 16) = 1;
  v6 = *(_DWORD **)&v0[4 * ((*v0 >> 9) & 1) + 16 + 4 * (HIBYTE(*v0) & 1)];
  if (v6)
    sub_22ED385E0(v1, v6);
  *(_BYTE *)(v1 + 16) = 0;
}

void sub_22ED38838()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _DWORD **v3;
  uint64_t v4;

  v2 = *(unsigned __int16 *)(v0 + 4);
  if (*(_WORD *)(v0 + 4))
  {
    v3 = (_DWORD **)(v0 + 32);
    v4 = 8 * v2;
    do
    {
      if (*v3)
        sub_22ED385E0(v1, *v3);
      ++v3;
      v4 -= 8;
    }
    while (v4);
  }
}

void sub_22ED38874(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  sub_22F0D492C(a2);
  v9 = v11;
  v3 = v13;
  v10 = v12;
  v4 = v14;
  v6 = *((_QWORD *)&v11 + 1);
  v5 = (uint64_t *)v11;
  if ((_QWORD)v11 != v13 || *((_QWORD *)&v11 + 1) != v14)
  {
    do
    {
      v8 = v5;
      if ((v6 & 3) != 0)
      {
        if ((v6 & 0xFFFFFFFFFFFFFFFCLL) != 0)
          v8 = (_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFCLL) + 40);
        else
          v8 = (_QWORD *)sub_22F3AC1A8(*v5);
      }
      if (*v8)
        sub_22ED385E0(a1);
      if ((v6 & 3) != 0)
      {
        if (v6 >= 4)
          sub_22F0D8720((uint64_t)&v9);
        else
          sub_22F3F2FE0((uint64_t)&v9, 1);
      }
      else
      {
        *(_QWORD *)&v9 = v5 + 1;
      }
      v6 = *((_QWORD *)&v9 + 1);
      v5 = (uint64_t *)v9;
    }
    while (v9 != __PAIR128__(v4, v3));
  }
}

uint64_t sub_22ED38950(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v3;
  int v4;

  v3 = result;
  while (1)
  {
    v4 = *a2;
    if ((v4 & 0xFE) == 0x70)
    {
      switch((*(_DWORD *)a2 >> 18) & 0x3F)
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
        case 0xD:
        case 0xE:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
        case 0x14:
        case 0x15:
        case 0x16:
        case 0x17:
        case 0x18:
        case 0x19:
        case 0x1A:
        case 0x1B:
        case 0x1C:
        case 0x1D:
        case 0x1E:
        case 0x1F:
        case 0x20:
          result = sub_22ED38950(v3, *((_QWORD *)a2 + 2));
          a2 = (unsigned __int8 *)*((_QWORD *)a2 + 3);
          continue;
        default:
          goto LABEL_8;
      }
    }
    if (v4 != 233)
LABEL_8:
      __asm { BR              X9 }
    if ((*(_DWORD *)a2 & 0x7C0000) == 0x140000)
      break;
    a2 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
  }
  *(_BYTE *)(v3 + 24) = 0;
  return result;
}

void sub_22ED38BA8(uint64_t a1, _DWORD *a2)
{
  int v2;

  v2 = *(unsigned __int8 *)a2;
  if (a2 && (v2 & 0xFE) == 0x70)
  {
    switch((*a2 >> 18) & 0x3F)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
        goto LABEL_7;
      default:
        goto LABEL_5;
    }
  }
  if (!a2 || v2 != 233)
LABEL_5:
    __asm { BR              X9 }
LABEL_7:
  sub_22ED38DF0(a1, (uint64_t)a2);
}

uint64_t sub_22ED38D08()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t result;

  result = sub_22EFFA934(v0, *v1);
  if ((result & 1) == 0)
    JUMPOUT(0x22ED38CB0);
  return result;
}

void sub_22ED38D1C()
{
  uint64_t v0;
  uint64_t v1;
  _DWORD *v2;
  llvm::SmallPtrSetImplBase *v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_DWORD **)(v0 + 16);
  if (v2 && (v2[7] & 0x7Fu) - 67 >= 0xFFFFFFF9)
  {
    v3 = *(llvm::SmallPtrSetImplBase **)(v1 + 8);
    v4 = sub_22E3BA914(v3, v2);
    v5 = *((_QWORD *)v3 + 1);
    v6 = 16;
    if (v5 == *(_QWORD *)v3)
      v6 = 20;
    if (v4 != (void **)(v5 + 8 * *(unsigned int *)((char *)v3 + v6)))
      *(_BYTE *)(v1 + 16) = 1;
  }
}

void sub_22ED38D80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _DWORD **v3;
  uint64_t v4;

  v2 = *(unsigned __int16 *)(v0 + 4);
  if (*(_WORD *)(v0 + 4))
  {
    v3 = (_DWORD **)(v0 + 32);
    v4 = 8 * v2;
    do
    {
      if (*v3)
        sub_22ED38BA8(v1, *v3);
      ++v3;
      v4 -= 8;
    }
    while (v4);
  }
}

void sub_22ED38DB0()
{
  _DWORD *v0;
  uint64_t v1;
  unsigned __int8 **v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *v0;
  v2 = (unsigned __int8 **)(v0 + 6);
  v4 = 8 * ((unint64_t)v3 >> 18);
  v5 = v4 - 8;
  if (v4 != 8)
  {
    do
    {
      v6 = (uint64_t)*v2;
      if (**v2 == 210)
        v6 = *(_QWORD *)(v6 + 16);
      sub_22ED38BA8(v1, (_DWORD *)v6);
      ++v2;
      v5 -= 8;
    }
    while (v5);
  }
}

void sub_22ED38DF0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  sub_22F0D492C(a2);
  v9 = v11;
  v3 = v13;
  v10 = v12;
  v4 = v14;
  v6 = *((_QWORD *)&v11 + 1);
  v5 = (uint64_t *)v11;
  if ((_QWORD)v11 != v13 || *((_QWORD *)&v11 + 1) != v14)
  {
    do
    {
      v8 = v5;
      if ((v6 & 3) != 0)
      {
        if ((v6 & 0xFFFFFFFFFFFFFFFCLL) != 0)
          v8 = (_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFCLL) + 40);
        else
          v8 = (_QWORD *)sub_22F3AC1A8(*v5);
      }
      if (*v8)
        sub_22ED38BA8(a1);
      if ((v6 & 3) != 0)
      {
        if (v6 < 4)
          sub_22F3F2FE0((uint64_t)&v9, 1);
        else
          sub_22F0D8720((uint64_t)&v9);
      }
      else
      {
        *(_QWORD *)&v9 = v5 + 1;
      }
      v6 = *((_QWORD *)&v9 + 1);
      v5 = (uint64_t *)v9;
    }
    while (v9 != __PAIR128__(v4, v3));
  }
}

unsigned __int8 *sub_22ED38ECC(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *result;
  unsigned __int8 *v4;
  int v5;
  unsigned __int8 **v6;

  while (1)
  {
    result = sub_22EFFA6B0(a2);
    v4 = result;
    v5 = *result;
    if (v5 != 102)
      break;
    sub_22ED38ECC(a1, *(_QWORD *)(*((_QWORD *)result + 7) + 16));
    v6 = (unsigned __int8 **)(v4 + 48);
LABEL_5:
    a2 = *v6;
  }
  if (v5 == 103)
  {
    sub_22ED38BA8(a1);
    sub_22ED38ECC(a1, *((_QWORD *)v4 + 4));
    v6 = (unsigned __int8 **)(v4 + 40);
    goto LABEL_5;
  }
  if (v5 != 161)
    return (unsigned __int8 *)sub_22ED38BA8(a1);
  return result;
}

uint64_t sub_22ED38F60(unsigned __int8 *a1, char *a2, _QWORD *a3)
{
  unsigned __int8 *v5;
  int v6;
  unsigned int v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t result;
  int v11;
  char v12;

  v5 = a1;
  v6 = *a1;
  if (v6 == 173)
  {
    if ((*(_DWORD *)a1 & 0x40000) != 0)
    {
      v6 = *(_DWORD *)a1;
    }
    else
    {
      v5 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
      v6 = *v5;
    }
  }
  if (v6 == 141)
  {
    result = sub_22EFFA604(*(unsigned __int8 **)&v5[v5[3]]);
    if (!result)
      return result;
    if ((*(_DWORD *)(result + 28) & 0x7Eu) - 52 > 5 || (*(_QWORD *)(result + 40) & 7) != 6)
      return 0;
    v11 = *(_DWORD *)(*(_QWORD *)(result + 40) & 0xFFFFFFFFFFFFFFF8);
    if (v11 == 37)
    {
      v12 = 1;
    }
    else
    {
      if (v11 != 38)
        return 0;
      v12 = 0;
    }
    *a2 = v12;
    v8 = *(unsigned __int8 **)&v5[8 * (((unint64_t)*(unsigned int *)v5 >> 18) & 1)
                                + 8
                                + ((unint64_t)*(unsigned int *)v5 >> 24)];
    goto LABEL_9;
  }
  if (v6 != 233)
    return 0;
  v7 = (*(_DWORD *)v5 >> 18) & 0x1F;
  if (v7 > 3)
    return 0;
  *a2 = 0x10001u >> (8 * v7);
  v8 = (unsigned __int8 *)*((_QWORD *)v5 + 2);
LABEL_9:
  v9 = *v8;
  result = v9 == 161;
  if (v9 != 161)
    v8 = 0;
  *a3 = v8;
  return result;
}

uint64_t sub_22ED39074(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5, uint64_t (*a6)(uint64_t), uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  _OWORD *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t i;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41[24];
  int v42;
  _OWORD *v43;
  unint64_t v44;
  int v45;
  unsigned int v46;
  int v47;
  void *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v46 = a2;
  sub_22F345040((uint64_t)&v47, a3);
  *(_DWORD *)a3 = 0;
  *(_DWORD *)(a3 + 16) = 0;
  v14 = *(_QWORD *)(a3 + 88);
  if (v14)
  {
    v15 = sub_22EC6CBD0(v14);
    MEMORY[0x2348A0E9C](v15, 0x10E0C409F09D3C3);
  }
  *(_BYTE *)(a3 + 165) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  v16 = a6(a7);
  if (!(_DWORD)v16)
  {
    v17 = a4(a5);
    v16 = v17;
    if ((_DWORD)v17)
    {
      if ((_DWORD)v17 != 2)
      {
        v18 = **(_QWORD **)a1;
        v19 = **(_QWORD **)(a1 + 8);
        sub_22F0D5A50(v19);
        v21 = v20;
        v22 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 88) + 2128;
        v23 = *(_QWORD *)(v19 + 8);
        v24 = (unsigned __int8 *)sub_22E3B8AAC(v22);
        v25 = *v24;
        v26 = v24 + 1;
        v26[v25] = 9;
        *(_QWORD *)&v24[8 * v25 + 16] = v23;
        v27 = (v25 + 1);
        v26[v27] = 2;
        *v24 = v25 + 2;
        *(_QWORD *)&v24[8 * v27 + 16] = a2;
        v42 = v21;
        v45 = 3494;
        v44 = v22;
        v28 = (_OWORD *)sub_22E3B8AAC(v22);
        v43 = v28;
        v29 = *((_OWORD *)v24 + 5);
        v31 = *((_OWORD *)v24 + 2);
        v30 = *((_OWORD *)v24 + 3);
        v28[4] = *((_OWORD *)v24 + 4);
        v28[5] = v29;
        v28[2] = v31;
        v28[3] = v30;
        v32 = *((_OWORD *)v24 + 1);
        *v28 = *(_OWORD *)v24;
        v28[1] = v32;
        for (i = 96; i != 336; i += 24)
          std::string::operator=((std::string *)((char *)v28 + i), (const std::string *)&v24[i]);
        sub_22E78D560((uint64_t)(v28 + 21), (uint64_t)(v24 + 336));
        sub_22E78D658((uint64_t)(v28 + 28), (uint64_t *)v24 + 56);
        sub_22ED1231C(v18, &v42, *(_QWORD **)(a1 + 16), 0, *(_QWORD *)(a1 + 8), 1u, "", 0, 0);
        if (v43 && v44)
        {
          sub_22E3BB10C(v44, (unint64_t)v43);
          v43 = 0;
        }
        sub_22E3BB10C(v22, (unint64_t)v24);
      }
      if (v49)
      {
        v34 = (uint64_t *)v48;
        v35 = 8 * v49;
        do
        {
          v36 = *v34++;
          sub_22E8FCA40(*(_QWORD **)(a1 + 16), *(_DWORD *)((v36 & 0xFFFFFFFFFFFFFFFCLL) + 24), 0x1605u, 0, (uint64_t)v41);
          v40 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 8);
          v37 = sub_22E8901B8((uint64_t)v41, &v40);
          sub_22E8900C4(v37, (int *)&v46);
          sub_22E903BEC(v41);
          v35 -= 8;
        }
        while (v35);
      }
      v16 = 2;
    }
  }
  if (v54)
  {
    if (v47 == 5)
    {
      sub_22EC64D18(v53, (uint64_t)&v47);
    }
    else if (v52 && (*(_DWORD *)(v53[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v53, (uint64_t)&v47);
    }
  }
  if (v51)
  {
    v39 = sub_22EC6CBD0(v51);
    MEMORY[0x2348A0E9C](v39, 0x10E0C409F09D3C3);
  }
  if (v48 != &v50)
    free(v48);
  return v16;
}

uint64_t sub_22ED3938C(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11[24];

  ***(_DWORD ***)a1 = 0;
  result = sub_22ED1D2B4(*(_QWORD *)(a1 + 8), **(_DWORD **)(a1 + 16), **(unsigned int **)(a1 + 16), *(__int128 **)(a1 + 24), *(_QWORD *)(a1 + 32), **(_QWORD **)(a1 + 40), **(_QWORD **)(a1 + 48), **(unsigned int ****)(a1 + 56));
  if ((_DWORD)result)
  {
    if ((_DWORD)result != 2)
      return result;
    v3 = *(_QWORD **)(a1 + 8);
    sub_22F0D5A50(**(_QWORD **)(a1 + 48));
    sub_22E8FCA40(v3, v4, 0x1629u, 0, (uint64_t)v11);
    v5 = sub_22F2F2168((uint64_t)v11, *(unsigned int **)(a1 + 16));
    v10 = 0;
    v6 = sub_22E8900C4(v5, &v10);
    v9 = *(_QWORD *)(**(_QWORD **)(a1 + 48) + 8);
    sub_22E8901B8(v6, &v9);
    sub_22E903BEC(v11);
    return 2;
  }
  v7 = *(uint64_t ***)(a1 + 56);
  if (**(_DWORD **)(a1 + 64))
  {
    v8 = sub_22E9F9E30(*(unsigned int **)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 12888), **(_DWORD **)(a1 + 16), **v7 & 0xFFFFFFFFFFFFFFFELL);
    ***(_QWORD ***)(a1 + 56) = v8;
    if ((v8 & 1) != 0)
      return 2;
  }
  else
  {
    v8 = **v7;
  }
  result = sub_22ED32240(*(_QWORD **)(a1 + 8), **(_QWORD **)(a1 + 72), v8 & 0xFFFFFFFFFFFFFFFELL, **(_DWORD **)(a1 + 16), 0xDA7u);
  if (!(_DWORD)result)
    return result;
  sub_22ED33B40(*(_QWORD **)(a1 + 8), ***(_QWORD ***)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL, ***(_DWORD ***)a1);
  return 2;
}

uint64_t sub_22ED394E0(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9[24];

  ***(_DWORD ***)a1 = 1;
  result = sub_22ED1D2B4(*(_QWORD *)(a1 + 8), **(_DWORD **)(a1 + 16), **(unsigned int **)(a1 + 16), *(__int128 **)(a1 + 24), *(_QWORD *)(a1 + 32), **(_QWORD **)(a1 + 40), **(_QWORD **)(a1 + 48), **(unsigned int ****)(a1 + 56));
  if ((_DWORD)result)
  {
    if ((_DWORD)result != 2)
      return result;
    v3 = *(_QWORD **)(a1 + 8);
    sub_22F0D5A50(**(_QWORD **)(a1 + 48));
    sub_22E8FCA40(v3, v4, 0x1629u, 0, (uint64_t)v9);
    v5 = sub_22F2F2168((uint64_t)v9, *(unsigned int **)(a1 + 16));
    v8 = 1;
    v6 = sub_22E8900C4(v5, &v8);
    v7 = *(_QWORD *)(**(_QWORD **)(a1 + 48) + 8);
    sub_22E8901B8(v6, &v7);
    sub_22E903BEC(v9);
  }
  else
  {
    result = sub_22ED32240(*(_QWORD **)(a1 + 8), **(_QWORD **)(a1 + 64), ***(_QWORD ***)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL, **(_DWORD **)(a1 + 16), 0xDA7u);
    if (!(_DWORD)result)
      return result;
    sub_22ED33B40(*(_QWORD **)(a1 + 8), ***(_QWORD ***)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL, ***(_DWORD ***)a1);
  }
  return 2;
}

void sub_22ED3960C(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a2 & 0xFC0000) == 0x800000)
    sub_22EB44A14(*(unsigned int **)(a1 + 8), *(_QWORD *)(a2 + 16), *(_DWORD *)(a2 + 4));
  sub_22ED39654(a1, a2);
}

void sub_22ED39654(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  sub_22F0D492C(a2);
  v9 = v11;
  v3 = v13;
  v10 = v12;
  v4 = v14;
  v6 = *((_QWORD *)&v11 + 1);
  v5 = (uint64_t *)v11;
  if ((_QWORD)v11 != v13 || *((_QWORD *)&v11 + 1) != v14)
  {
    do
    {
      v8 = v5;
      if ((v6 & 3) != 0)
      {
        if ((v6 & 0xFFFFFFFFFFFFFFFCLL) != 0)
          v8 = (_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFCLL) + 40);
        else
          v8 = (_QWORD *)sub_22F3AC1A8(*v5);
      }
      if (*v8)
        sub_22ED2DC2C(a1);
      if ((v6 & 3) != 0)
      {
        if (v6 < 4)
          sub_22F3F2FE0((uint64_t)&v9, 1);
        else
          sub_22F0D8720((uint64_t)&v9);
      }
      else
      {
        *(_QWORD *)&v9 = v5 + 1;
      }
      v6 = *((_QWORD *)&v9 + 1);
      v5 = (uint64_t *)v9;
    }
    while (v9 != __PAIR128__(v4, v3));
  }
}

uint64_t sub_22ED39730(uint64_t result, _QWORD *a2, uint64_t (**a3)(unint64_t, uint64_t), unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  int v33;
  char v34;
  uint64_t v35;

  if (a4 >= 2)
  {
    v8 = result;
    if (a4 == 2)
    {
      result = (*a3)((unint64_t)(a2 - 3), result);
      if ((_DWORD)result)
      {
        v9 = *(_DWORD *)(v8 + 8);
        v10 = *(_QWORD *)v8;
        *(_DWORD *)(v8 + 8) = 0;
        v11 = *(_BYTE *)(v8 + 12);
        *(_QWORD *)v8 = *(a2 - 3);
        *(_DWORD *)(v8 + 8) = *((_DWORD *)a2 - 4);
        *(_BYTE *)(v8 + 12) = *((_BYTE *)a2 - 12);
        *(a2 - 3) = v10;
        *((_DWORD *)a2 - 4) = v9;
        *((_BYTE *)a2 - 12) = v11;
        v12 = *(_QWORD *)(v8 + 16);
        *(_QWORD *)(v8 + 16) = *(a2 - 1);
        *(a2 - 1) = v12;
      }
    }
    else
    {
      v13 = a4;
      if ((uint64_t)a4 <= 0)
      {
        if ((_QWORD *)result != a2)
        {
          v19 = (_QWORD *)(result + 24);
          if ((_QWORD *)(result + 24) != a2)
          {
            v20 = 0;
            v21 = (_QWORD *)result;
            do
            {
              v22 = v19;
              result = (*a3)((unint64_t)v19, (uint64_t)v21);
              if ((_DWORD)result)
              {
                v33 = *((_DWORD *)v21 + 8);
                v32 = *v22;
                *((_DWORD *)v21 + 8) = 0;
                v34 = *((_BYTE *)v21 + 36);
                v35 = v21[5];
                v23 = v20;
                while (1)
                {
                  result = sub_22ED3A4A4(v8 + v23 + 24, v8 + v23);
                  if (!v23)
                    break;
                  v23 -= 24;
                  result = (*a3)((unint64_t)&v32, v23 + v8);
                  if ((result & 1) == 0)
                  {
                    v24 = v8 + v23 + 24;
                    goto LABEL_18;
                  }
                }
                v24 = v8;
LABEL_18:
                if (*(_DWORD *)(v24 + 8) >= 0x41u)
                {
                  result = *(_QWORD *)v24;
                  if (*(_QWORD *)v24)
                    result = MEMORY[0x2348A0E84](result, 0x1000C8000313F17);
                }
                *(_QWORD *)v24 = v32;
                *(_DWORD *)(v24 + 8) = v33;
                *(_BYTE *)(v24 + 12) = v34;
                *(_QWORD *)(v24 + 16) = v35;
              }
              v19 = v22 + 3;
              v20 += 24;
              v21 = v22;
            }
            while (v22 + 3 != a2);
          }
        }
      }
      else
      {
        v16 = a4 >> 1;
        v17 = (_QWORD *)(result + 24 * (a4 >> 1));
        v18 = a4 >> 1;
        if ((uint64_t)v13 <= a6)
        {
          sub_22ED39A88(result, v17, a3, v18, a5);
          v25 = a5 + 24 * v16;
          result = sub_22ED39A88(v8 + 24 * (v13 >> 1), a2, a3, v13 - (v13 >> 1), v25);
          v26 = a5 + 24 * v13;
          v27 = v25;
          v28 = a5;
          while (v27 != v26)
          {
            if ((*a3)(v27, v28))
            {
              result = sub_22ED3A4A4(v8, v27);
              v27 += 24;
            }
            else
            {
              result = sub_22ED3A4A4(v8, v28);
              v28 += 24;
            }
            v8 += 24;
            if (v28 == v25)
            {
              if (v27 != v26)
              {
                v29 = 0;
                do
                {
                  result = sub_22ED3A4A4(v8 + v29, v27 + v29);
                  v29 += 24;
                }
                while (v27 + v29 != v26);
              }
              goto LABEL_37;
            }
          }
          if (v28 != v25)
          {
            v30 = 0;
            do
            {
              result = sub_22ED3A4A4(v8 + v30, v28 + v30);
              v30 += 24;
            }
            while (v28 + v30 != v25);
          }
LABEL_37:
          if (a5)
          {
            v31 = (_DWORD *)(a5 + 8);
            do
            {
              if (*v31 >= 0x41u)
              {
                result = *((_QWORD *)v31 - 1);
                if (result)
                  result = MEMORY[0x2348A0E84](result, 0x1000C8000313F17);
              }
              v31 += 6;
              --v13;
            }
            while (v13);
          }
        }
        else
        {
          sub_22ED39730(result, v17, a3, v18, a5, a6);
          sub_22ED39730(v8 + 24 * (v13 >> 1), a2, a3, v13 - (v13 >> 1), a5, a6);
          return sub_22ED39E2C(v8, v8 + 24 * (v13 >> 1), (uint64_t)a2, (uint64_t (**)(uint64_t, uint64_t))a3, v13 >> 1, v13 - (v13 >> 1), a5, a6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_22ED39A88(uint64_t result, _QWORD *a2, uint64_t (**a3)(unint64_t, uint64_t), unint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (a4)
  {
    v9 = (_QWORD *)result;
    if (a4 == 2)
    {
      result = (*a3)((unint64_t)(a2 - 3), result);
      if (!(_DWORD)result)
      {
        *(_DWORD *)(a5 + 8) = *((_DWORD *)v9 + 2);
        *(_QWORD *)a5 = *v9;
        *((_DWORD *)v9 + 2) = 0;
        *(_BYTE *)(a5 + 12) = *((_BYTE *)v9 + 12);
        *(_QWORD *)(a5 + 16) = v9[2];
        *(_DWORD *)(a5 + 32) = *((_DWORD *)a2 - 4);
        *(_QWORD *)(a5 + 24) = *(a2 - 3);
        *((_DWORD *)a2 - 4) = 0;
        *(_BYTE *)(a5 + 36) = *((_BYTE *)a2 - 12);
        v10 = (_QWORD *)(a5 + 40);
        v11 = a2 - 1;
        goto LABEL_23;
      }
      *(_DWORD *)(a5 + 8) = *((_DWORD *)a2 - 4);
      *(_QWORD *)a5 = *(a2 - 3);
      *((_DWORD *)a2 - 4) = 0;
      *(_BYTE *)(a5 + 12) = *((_BYTE *)a2 - 12);
      *(_QWORD *)(a5 + 16) = *(a2 - 1);
      *(_DWORD *)(a5 + 32) = *((_DWORD *)v9 + 2);
      *(_QWORD *)(a5 + 24) = *v9;
      *((_DWORD *)v9 + 2) = 0;
      *(_BYTE *)(a5 + 36) = *((_BYTE *)v9 + 12);
      v10 = (_QWORD *)(a5 + 40);
LABEL_7:
      v11 = v9 + 2;
LABEL_23:
      *v10 = *v11;
      return result;
    }
    if (a4 == 1)
    {
      *(_DWORD *)(a5 + 8) = *(_DWORD *)(result + 8);
      *(_QWORD *)a5 = *(_QWORD *)result;
      *(_DWORD *)(result + 8) = 0;
      *(_BYTE *)(a5 + 12) = *(_BYTE *)(result + 12);
      v10 = (_QWORD *)(a5 + 16);
      goto LABEL_7;
    }
    if ((uint64_t)a4 > 8)
    {
      v18 = result + 24 * (a4 >> 1);
      sub_22ED39730(result, v18, a3, a4 >> 1, a5, a4 >> 1);
      result = sub_22ED39730(&v9[3 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), a5 + 24 * (a4 >> 1), a4 - (a4 >> 1));
      v19 = a5 + 8;
      v20 = v18;
      while ((_QWORD *)v20 != a2)
      {
        result = (*a3)(v20, (uint64_t)v9);
        if ((_DWORD)result)
        {
          *(_DWORD *)v19 = *(_DWORD *)(v20 + 8);
          *(_QWORD *)(v19 - 8) = *(_QWORD *)v20;
          *(_DWORD *)(v20 + 8) = 0;
          v21 = (_QWORD *)v20;
          v20 += 24;
        }
        else
        {
          *(_DWORD *)v19 = *((_DWORD *)v9 + 2);
          *(_QWORD *)(v19 - 8) = *v9;
          *((_DWORD *)v9 + 2) = 0;
          v21 = v9;
          v9 += 3;
        }
        v22 = v21[2];
        *(_BYTE *)(v19 + 4) = *((_BYTE *)v21 + 12);
        *(_QWORD *)(v19 + 8) = v22;
        v19 += 24;
        if (v9 == (_QWORD *)v18)
        {
          if ((_QWORD *)v20 != a2)
          {
            v23 = 0;
            do
            {
              v24 = v19 + v23;
              *(_DWORD *)v24 = *(_DWORD *)(v20 + v23 + 8);
              *(_QWORD *)(v24 - 8) = *(_QWORD *)(v20 + v23);
              *(_DWORD *)(v20 + v23 + 8) = 0;
              *(_BYTE *)(v24 + 4) = *(_BYTE *)(v20 + v23 + 12);
              *(_QWORD *)(v24 + 8) = *(_QWORD *)(v20 + v23 + 16);
              v23 += 24;
            }
            while ((_QWORD *)(v20 + v23) != a2);
          }
          return result;
        }
      }
      if (v9 != (_QWORD *)v18)
      {
        v25 = 0;
        do
        {
          v26 = v19 + v25 * 8;
          *(_DWORD *)v26 = v9[v25 + 1];
          *(_QWORD *)(v26 - 8) = v9[v25];
          LODWORD(v9[v25 + 1]) = 0;
          *(_BYTE *)(v26 + 4) = BYTE4(v9[v25 + 1]);
          *(_QWORD *)(v26 + 8) = v9[v25 + 2];
          v25 += 3;
        }
        while (&v9[v25] != (_QWORD *)v18);
      }
    }
    else if ((_QWORD *)result != a2)
    {
      *(_DWORD *)(a5 + 8) = *(_DWORD *)(result + 8);
      *(_QWORD *)a5 = *(_QWORD *)result;
      *(_DWORD *)(result + 8) = 0;
      *(_BYTE *)(a5 + 12) = *(_BYTE *)(result + 12);
      *(_QWORD *)(a5 + 16) = *(_QWORD *)(result + 16);
      v12 = (_QWORD *)(result + 24);
      if ((_QWORD *)(result + 24) != a2)
      {
        v13 = 0;
        v14 = a5;
        do
        {
          v15 = v12;
          result = (*a3)((unint64_t)v12, v14);
          if ((_DWORD)result)
          {
            *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 8);
            *(_QWORD *)(v14 + 24) = *(_QWORD *)v14;
            *(_DWORD *)(v14 + 8) = 0;
            *(_BYTE *)(v14 + 36) = *(_BYTE *)(v14 + 12);
            *(_QWORD *)(v14 + 40) = *(_QWORD *)(v14 + 16);
            v16 = a5;
            if (v14 != a5)
            {
              v17 = v13;
              while (1)
              {
                v16 = a5 + v17;
                if (!(*a3)((unint64_t)v15, a5 + v17 - 24))
                  break;
                sub_22ED3A4A4(a5 + v17, a5 + v17 - 24);
                v17 -= 24;
                if (!v17)
                {
                  v16 = a5;
                  break;
                }
              }
            }
            result = sub_22ED3A4A4(v16, (uint64_t)v15);
          }
          else
          {
            *(_DWORD *)(v14 + 32) = *((_DWORD *)v9 + 8);
            *(_QWORD *)(v14 + 24) = *v15;
            *((_DWORD *)v9 + 8) = 0;
            *(_BYTE *)(v14 + 36) = *((_BYTE *)v9 + 36);
            *(_QWORD *)(v14 + 40) = v9[5];
          }
          v14 += 24;
          v12 = v15 + 3;
          v13 += 24;
          v9 = v15;
        }
        while (v15 + 3 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_22ED39E2C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (**a4)(uint64_t, uint64_t), int64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t);
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (**v54)(uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int (**v61)(uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _DWORD *v75;
  uint64_t v76;
  uint64_t v78;
  unsigned int (**v79)(uint64_t, unint64_t);
  uint64_t v80;

  v78 = a6;
  if (!a6)
    return result;
  v13 = result;
  while (a5 > a8 && v78 > a8)
  {
    if (!a5)
      return result;
    v14 = 0;
    v15 = -a5;
    while (1)
    {
      v16 = v13;
      v17 = v13 + v14;
      result = (*a4)(a2, v13 + v14);
      if ((result & 1) != 0)
        break;
      v14 += 24;
      if (__CFADD__(v15++, 1))
        return result;
    }
    v19 = -v15;
    v20 = v78;
    v79 = (unsigned int (**)(uint64_t, unint64_t))a4;
    v80 = a2;
    v76 = a8;
    if (-v15 >= v78)
    {
      if (v15 == -1)
      {
        v66 = v13 + v14;
        v67 = *(_DWORD *)(v13 + v14 + 8);
        v68 = *(_QWORD *)(v13 + v14);
        *(_DWORD *)(v66 + 8) = 0;
        v69 = *(_BYTE *)(v13 + v14 + 12);
        *(_QWORD *)v66 = *(_QWORD *)a2;
        *(_DWORD *)(v66 + 8) = *(_DWORD *)(a2 + 8);
        *(_BYTE *)(v66 + 12) = *(_BYTE *)(a2 + 12);
        *(_QWORD *)a2 = v68;
        *(_DWORD *)(a2 + 8) = v67;
        *(_BYTE *)(a2 + 12) = v69;
        v70 = *(_QWORD *)(v13 + v14 + 16);
        *(_QWORD *)(v66 + 16) = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a2 + 16) = v70;
        return result;
      }
      if (v15 > 0)
        v19 = 1 - v15;
      v28 = a2;
      v25 = v19 >> 1;
      v26 = v13 + 24 * (v19 >> 1) + v14;
      v22 = 0xAAAAAAAAAAAAAAABLL * ((a3 - v28) >> 3);
      if (a3 == v28)
      {
        v23 = a3;
        v27 = a7;
      }
      else
      {
        v29 = *a4;
        v23 = v28;
        do
        {
          v30 = v23 + 24 * (v22 >> 1);
          v31 = v29(v30, v26);
          if (v31)
            v22 += ~(v22 >> 1);
          else
            v22 >>= 1;
          if (v31)
            v23 = v30 + 24;
        }
        while (v22);
        v28 = v80;
        v22 = 0xAAAAAAAAAAAAAAABLL * ((v23 - v80) >> 3);
        v27 = a7;
LABEL_34:
        v20 = v78;
      }
      if (v26 == v28)
      {
        v26 = v23;
      }
      else if (v28 == v23)
      {
        v23 = v28;
        v80 = v26;
      }
      else
      {
        v32 = 0;
        v33 = v28;
        while (1)
        {
          v34 = v26 + v32;
          v35 = v80 + v32;
          v36 = *(_DWORD *)(v26 + v32 + 8);
          v37 = *(_QWORD *)(v26 + v32);
          *(_DWORD *)(v34 + 8) = 0;
          v38 = *(_BYTE *)(v26 + v32 + 12);
          *(_QWORD *)v34 = *(_QWORD *)(v80 + v32);
          *(_DWORD *)(v34 + 8) = *(_DWORD *)(v80 + v32 + 8);
          *(_BYTE *)(v34 + 12) = *(_BYTE *)(v80 + v32 + 12);
          *(_QWORD *)v35 = v37;
          *(_DWORD *)(v35 + 8) = v36;
          *(_BYTE *)(v35 + 12) = v38;
          v39 = *(_QWORD *)(v26 + v32 + 16);
          *(_QWORD *)(v34 + 16) = *(_QWORD *)(v80 + v32 + 16);
          *(_QWORD *)(v35 + 16) = v39;
          v40 = v26 + v32 + 24;
          if (v80 + v32 + 24 == v23)
            break;
          if (v40 == v33)
            v33 = v80 + v32 + 24;
          v32 += 24;
        }
        if (v40 == v33)
        {
          v80 = v26;
          v26 = v33;
        }
        else
        {
          v41 = v26 + v32 + 24;
          v42 = v33;
          do
          {
            while (1)
            {
              v43 = *(_DWORD *)(v41 + 8);
              v44 = *(_QWORD *)v41;
              *(_DWORD *)(v41 + 8) = 0;
              v45 = *(_BYTE *)(v41 + 12);
              *(_QWORD *)v41 = *(_QWORD *)v33;
              *(_DWORD *)(v41 + 8) = *(_DWORD *)(v33 + 8);
              *(_BYTE *)(v41 + 12) = *(_BYTE *)(v33 + 12);
              *(_QWORD *)v33 = v44;
              *(_DWORD *)(v33 + 8) = v43;
              *(_BYTE *)(v33 + 12) = v45;
              v46 = *(_QWORD *)(v41 + 16);
              *(_QWORD *)(v41 + 16) = *(_QWORD *)(v33 + 16);
              *(_QWORD *)(v33 + 16) = v46;
              v41 += 24;
              v33 += 24;
              if (v33 == v23)
                break;
              if (v41 == v42)
                v42 = v33;
            }
            v33 = v42;
          }
          while (v41 != v42);
          v80 = v26;
          v26 = v40;
        }
      }
      goto LABEL_55;
    }
    if (v78 >= 0)
      v21 = v78;
    else
      v21 = v78 + 1;
    v22 = v21 >> 1;
    v23 = a2 + 24 * (v21 >> 1);
    v24 = a2;
    v25 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v13 - v14) >> 3);
    if (v17 != v24)
    {
      v26 = v13 + v14;
      do
      {
        if ((*v79)(v23, v26 + 24 * (v25 >> 1)))
        {
          v25 >>= 1;
        }
        else
        {
          v26 += 24 * (v25 >> 1) + 24;
          v25 += ~(v25 >> 1);
        }
      }
      while (v25);
      v25 = 0xAAAAAAAAAAAAAAABLL * ((v26 - v16 - v14) >> 3);
      v27 = a7;
      v28 = v80;
      goto LABEL_34;
    }
    v17 = v24;
    v26 = v23;
    v27 = a7;
LABEL_55:
    a5 = -(uint64_t)v25 - v15;
    v47 = v20 - v22;
    if ((uint64_t)(v22 + v25) >= (uint64_t)(v20 - (v22 + v25) - v15))
    {
      v49 = v23;
      a4 = (uint64_t (**)(uint64_t, uint64_t))v79;
      result = sub_22ED39E2C(v26, v49, a3, v79, -(uint64_t)v25 - v15, v20 - v22, v27, v76);
      v47 = v22;
      a8 = v76;
      a5 = v25;
      a3 = v26;
      a2 = v80;
    }
    else
    {
      v48 = v22;
      a8 = v76;
      result = sub_22ED39E2C(v17, v80, v26, v79, v25, v48, v27, v76);
      v17 = v26;
      a2 = v23;
      a4 = (uint64_t (**)(uint64_t, uint64_t))v79;
    }
    v78 = v47;
    v13 = v17;
    if (!v47)
      return result;
  }
  if (a5 <= v78)
  {
    if (v13 == a2)
      return result;
    v59 = 0;
    v51 = 0;
    v52 = a7;
    do
    {
      v60 = a7 + v59;
      *(_DWORD *)(v60 + 8) = *(_DWORD *)(v13 + v59 + 8);
      *(_QWORD *)v60 = *(_QWORD *)(v13 + v59);
      *(_DWORD *)(v13 + v59 + 8) = 0;
      *(_BYTE *)(v60 + 12) = *(_BYTE *)(v13 + v59 + 12);
      *(_QWORD *)(v60 + 16) = *(_QWORD *)(v13 + v59 + 16);
      ++v51;
      v59 += 24;
    }
    while (v13 + v59 != a2);
    if (v59)
    {
      v61 = (unsigned int (**)(uint64_t, uint64_t))a4;
      v62 = a7 + v59;
      v63 = a7 + v59 - 24;
      v64 = a7;
      v65 = a3;
      while (a2 != v65)
      {
        if ((*v61)(a2, v64))
        {
          result = sub_22ED3A4A4(v13, a2);
          a2 += 24;
        }
        else
        {
          result = sub_22ED3A4A4(v13, v64);
          v64 += 24;
        }
        v65 = a3;
        v13 += 24;
        if (v62 == v64)
          goto LABEL_96;
      }
      if (v62 != v64)
      {
        v71 = a7;
        v74 = 0;
        do
        {
          result = sub_22ED3A4A4(v13 + v74, v64 + v74);
          v74 += 24;
        }
        while (v63 != v64 + v74 - 24);
LABEL_94:
        v52 = v71;
      }
    }
  }
  else
  {
    if (a2 == a3)
      return result;
    v50 = 0;
    v51 = 0;
    v52 = a7;
    do
    {
      v53 = a7 + v50;
      *(_DWORD *)(v53 + 8) = *(_DWORD *)(a2 + v50 + 8);
      *(_QWORD *)v53 = *(_QWORD *)(a2 + v50);
      *(_DWORD *)(a2 + v50 + 8) = 0;
      *(_BYTE *)(v53 + 12) = *(_BYTE *)(a2 + v50 + 12);
      *(_QWORD *)(v53 + 16) = *(_QWORD *)(a2 + v50 + 16);
      ++v51;
      v50 += 24;
    }
    while (a2 + v50 != a3);
    if (v50)
    {
      v54 = a4;
      v55 = a7 + v50;
      v56 = a3 - 24;
      while (a2 != v13)
      {
        v57 = (*v54)(v55 - 24, a2 - 24);
        if (v57)
          v58 = a2 - 24;
        else
          v58 = v55 - 24;
        if (v57)
          a2 -= 24;
        else
          v55 -= 24;
        result = sub_22ED3A4A4(v56, v58);
        v56 -= 24;
        if (v55 == a7)
        {
          v52 = a7;
          goto LABEL_96;
        }
      }
      if (v55 != a7)
      {
        v71 = a7;
        v72 = 0;
        do
        {
          v73 = v56 + v72;
          v72 -= 24;
          result = sub_22ED3A4A4(v73, v55 + v72);
        }
        while (v55 + v72 != a7);
        goto LABEL_94;
      }
      v52 = a7;
    }
  }
LABEL_96:
  if (v52)
  {
    v75 = (_DWORD *)(v52 + 8);
    do
    {
      if (*v75 >= 0x41u)
      {
        result = *((_QWORD *)v75 - 1);
        if (result)
          result = MEMORY[0x2348A0E84](result, 0x1000C8000313F17);
      }
      v75 += 6;
      --v51;
    }
    while (v51);
  }
  return result;
}

uint64_t sub_22ED3A4A4(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) >= 0x41u && *(_QWORD *)a1)
    MEMORY[0x2348A0E84]();
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t sub_22ED3A514(uint64_t result, unsigned __int8 *a2, unint64_t a3, llvm::APInt *a4, uint64_t a5)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v10;
  const llvm::APInt *v11;
  unint64_t v12;
  unsigned __int8 v13;
  const llvm::APInt *v14;
  llvm::APInt *v15;
  uint64_t v16;
  const llvm::APInt *v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  uint64_t i;
  llvm::APInt *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  int v33;
  char v34;
  unint64_t v35;

  if (a3 < 2)
    return result;
  v6 = result;
  if (a3 == 2)
  {
    if (*(a2 - 12))
      result = llvm::APInt::compare((llvm::APInt *)(a2 - 24), (const llvm::APInt *)result);
    else
      result = llvm::APInt::compareSigned((llvm::APInt *)(a2 - 24), (const llvm::APInt *)result);
    v13 = *(_BYTE *)(v6 + 12);
    if ((result & 0x80000000) == 0)
    {
      v14 = (const llvm::APInt *)(a2 - 24);
      if (*(_BYTE *)(v6 + 12))
      {
        result = llvm::APInt::compare((llvm::APInt *)v6, v14);
        if ((result & 0x80000000) != 0)
          return result;
      }
      else
      {
        result = llvm::APInt::compareSigned((llvm::APInt *)v6, v14);
        if ((result & 0x80000000) != 0)
          return result;
      }
      if (*((_QWORD *)a2 - 1) >= *(_QWORD *)(v6 + 16))
        return result;
    }
    v27 = *(_DWORD *)(v6 + 8);
    v28 = *(_QWORD *)v6;
    *(_DWORD *)(v6 + 8) = 0;
    *(_QWORD *)v6 = *((_QWORD *)a2 - 3);
    *(_DWORD *)(v6 + 8) = *((_DWORD *)a2 - 4);
    *(_BYTE *)(v6 + 12) = *(a2 - 12);
    *((_QWORD *)a2 - 3) = v28;
    *((_DWORD *)a2 - 4) = v27;
    *(a2 - 12) = v13;
    v29 = *(_QWORD *)(v6 + 16);
    *(_QWORD *)(v6 + 16) = *((_QWORD *)a2 - 1);
    *((_QWORD *)a2 - 1) = v29;
    return result;
  }
  v7 = a3;
  if ((uint64_t)a3 <= 0)
  {
    if ((unsigned __int8 *)result == a2)
      return result;
    v15 = (llvm::APInt *)(result + 24);
    if ((unsigned __int8 *)(result + 24) == a2)
      return result;
    v16 = 0;
    v17 = (const llvm::APInt *)result;
    while (1)
    {
      v18 = (uint64_t)v17;
      v17 = v15;
      v19 = *(_BYTE *)(v18 + 36);
      if (v19)
      {
        if ((llvm::APInt::compare(v15, (const llvm::APInt *)v18) & 0x80000000) != 0)
          goto LABEL_22;
      }
      else if ((llvm::APInt::compareSigned(v15, (const llvm::APInt *)v18) & 0x80000000) != 0)
      {
LABEL_22:
        v20 = *(_QWORD *)(v18 + 40);
        goto LABEL_25;
      }
      if (*(_BYTE *)(v18 + 12))
      {
        result = llvm::APInt::compare((llvm::APInt *)v18, v17);
        if ((result & 0x80000000) != 0)
          goto LABEL_43;
      }
      else
      {
        result = llvm::APInt::compareSigned((llvm::APInt *)v18, v17);
        if ((result & 0x80000000) != 0)
          goto LABEL_43;
      }
      v20 = *(_QWORD *)(v18 + 40);
      if (v20 >= *(_QWORD *)(v18 + 16))
        goto LABEL_43;
LABEL_25:
      v33 = *(_DWORD *)(v18 + 32);
      v32 = *(_QWORD *)v17;
      *(_DWORD *)(v18 + 32) = 0;
      v34 = v19;
      v35 = v20;
      result = sub_22ED3A4A4((uint64_t)v17, v18);
      if (v18 != v6)
      {
        for (i = v16; i; i -= 24)
        {
          if (v34)
          {
            if ((llvm::APInt::compare((llvm::APInt *)&v32, (const llvm::APInt *)(v6 + i - 24)) & 0x80000000) != 0)
              goto LABEL_36;
          }
          else if ((llvm::APInt::compareSigned((llvm::APInt *)&v32, (const llvm::APInt *)(v6 + i - 24)) & 0x80000000) != 0)
          {
            goto LABEL_36;
          }
          if (*(_BYTE *)(v6 + i - 12))
          {
            result = llvm::APInt::compare((llvm::APInt *)(v6 + i - 24), (const llvm::APInt *)&v32);
            if ((result & 0x80000000) != 0)
              goto LABEL_39;
          }
          else
          {
            result = llvm::APInt::compareSigned((llvm::APInt *)(v6 + i - 24), (const llvm::APInt *)&v32);
            if ((result & 0x80000000) != 0)
              goto LABEL_39;
          }
          if (v35 >= *(_QWORD *)(v6 + i - 8))
          {
            v18 = v6 + i;
            goto LABEL_39;
          }
LABEL_36:
          v18 -= 24;
          result = sub_22ED3A4A4(v6 + i, v6 + i - 24);
        }
      }
      v18 = v6;
LABEL_39:
      if (*(_DWORD *)(v18 + 8) >= 0x41u)
      {
        result = *(_QWORD *)v18;
        if (*(_QWORD *)v18)
          result = MEMORY[0x2348A0E84](result, 0x1000C8000313F17);
      }
      *(_QWORD *)v18 = v32;
      *(_DWORD *)(v18 + 8) = v33;
      *(_BYTE *)(v18 + 12) = v34;
      *(_QWORD *)(v18 + 16) = v35;
LABEL_43:
      v15 = (const llvm::APInt *)((char *)v17 + 24);
      v16 += 24;
      if ((unsigned __int8 *)((char *)v17 + 24) == a2)
        return result;
    }
  }
  v10 = a3 >> 1;
  v11 = (const llvm::APInt *)(result + 24 * (a3 >> 1));
  v12 = a3 >> 1;
  if ((uint64_t)v7 > a5)
  {
    sub_22ED3A514(result, v11, v12, a4, a5);
    sub_22ED3A514(v6 + 24 * (v7 >> 1), a2, v7 - (v7 >> 1), a4, a5);
    return sub_22ED3AEB8(v6, v6 + 24 * (v7 >> 1), a2, v7 >> 1, v7 - (v7 >> 1), (uint64_t)a4, a5);
  }
  sub_22ED3A9B8(result, v11, v12, a4);
  v22 = (llvm::APInt *)((char *)a4 + 24 * v10);
  result = sub_22ED3A9B8(v6 + 24 * (v7 >> 1), (const llvm::APInt *)a2, v7 - (v7 >> 1), v22);
  v23 = (char *)a4 + 24 * v7;
  v24 = (uint64_t)v22;
  v25 = (uint64_t)a4;
  while ((char *)v24 != v23)
  {
    if (*(_BYTE *)(v24 + 12))
    {
      if ((llvm::APInt::compare((llvm::APInt *)v24, (const llvm::APInt *)v25) & 0x80000000) != 0)
        goto LABEL_56;
    }
    else if ((llvm::APInt::compareSigned((llvm::APInt *)v24, (const llvm::APInt *)v25) & 0x80000000) != 0)
    {
      goto LABEL_56;
    }
    if (*(_BYTE *)(v25 + 12))
    {
      if ((llvm::APInt::compare((llvm::APInt *)v25, (const llvm::APInt *)v24) & 0x80000000) != 0)
        goto LABEL_57;
    }
    else if ((llvm::APInt::compareSigned((llvm::APInt *)v25, (const llvm::APInt *)v24) & 0x80000000) != 0)
    {
      goto LABEL_57;
    }
    if (*(_QWORD *)(v24 + 16) >= *(_QWORD *)(v25 + 16))
    {
LABEL_57:
      result = sub_22ED3A4A4(v6, v25);
      v25 += 24;
      goto LABEL_58;
    }
LABEL_56:
    result = sub_22ED3A4A4(v6, v24);
    v24 += 24;
LABEL_58:
    v6 += 24;
    if ((llvm::APInt *)v25 == v22)
    {
      if ((char *)v24 != v23)
      {
        v26 = 0;
        do
        {
          result = sub_22ED3A4A4(v6 + v26, v24 + v26);
          v26 += 24;
        }
        while ((char *)(v24 + v26) != v23);
      }
      goto LABEL_69;
    }
  }
  if ((llvm::APInt *)v25 != v22)
  {
    v30 = 0;
    do
    {
      result = sub_22ED3A4A4(v6 + v30, v25 + v30);
      v30 += 24;
    }
    while ((llvm::APInt *)(v25 + v30) != v22);
  }
LABEL_69:
  if (a4)
  {
    v31 = (_DWORD *)((char *)a4 + 8);
    do
    {
      if (*v31 >= 0x41u)
      {
        result = *((_QWORD *)v31 - 1);
        if (result)
          result = MEMORY[0x2348A0E84](result, 0x1000C8000313F17);
      }
      v31 += 6;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_22ED3A9B8(uint64_t result, const llvm::APInt *a2, unint64_t a3, llvm::APInt *a4)
{
  uint64_t v7;
  char *v8;
  llvm::APInt *v9;
  uint64_t v10;
  llvm::APInt *v11;
  const llvm::APInt *v12;
  int v13;
  char v14;
  unint64_t v15;
  llvm::APInt *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;

  if (!a3)
    return result;
  v7 = result;
  if (a3 == 2)
  {
    if (*((_BYTE *)a2 - 12))
    {
      result = llvm::APInt::compare((const llvm::APInt *)((char *)a2 - 24), (const llvm::APInt *)result);
      if ((result & 0x80000000) != 0)
        goto LABEL_68;
    }
    else
    {
      result = llvm::APInt::compareSigned((const llvm::APInt *)((char *)a2 - 24), (const llvm::APInt *)result);
      if ((result & 0x80000000) != 0)
      {
LABEL_68:
        *((_DWORD *)a4 + 2) = *((_DWORD *)a2 - 4);
        *(_QWORD *)a4 = *((_QWORD *)a2 - 3);
        *((_DWORD *)a2 - 4) = 0;
        *((_BYTE *)a4 + 12) = *((_BYTE *)a2 - 12);
        *((_QWORD *)a4 + 2) = *((_QWORD *)a2 - 1);
        *((_DWORD *)a4 + 8) = *(_DWORD *)(v7 + 8);
        *((_QWORD *)a4 + 3) = *(_QWORD *)v7;
        *(_DWORD *)(v7 + 8) = 0;
        *((_BYTE *)a4 + 36) = *(_BYTE *)(v7 + 12);
        v8 = (char *)a4 + 40;
        goto LABEL_69;
      }
    }
    if (*(_BYTE *)(v7 + 12))
    {
      result = llvm::APInt::compare((llvm::APInt *)v7, (const llvm::APInt *)((char *)a2 - 24));
      if ((result & 0x80000000) != 0)
        goto LABEL_70;
    }
    else
    {
      result = llvm::APInt::compareSigned((llvm::APInt *)v7, (const llvm::APInt *)((char *)a2 - 24));
      if ((result & 0x80000000) != 0)
        goto LABEL_70;
    }
    if (*((_QWORD *)a2 - 1) < *(_QWORD *)(v7 + 16))
      goto LABEL_68;
LABEL_70:
    *((_DWORD *)a4 + 2) = *(_DWORD *)(v7 + 8);
    *(_QWORD *)a4 = *(_QWORD *)v7;
    *(_DWORD *)(v7 + 8) = 0;
    *((_BYTE *)a4 + 12) = *(_BYTE *)(v7 + 12);
    *((_QWORD *)a4 + 2) = *(_QWORD *)(v7 + 16);
    *((_DWORD *)a4 + 8) = *((_DWORD *)a2 - 4);
    *((_QWORD *)a4 + 3) = *((_QWORD *)a2 - 3);
    *((_DWORD *)a2 - 4) = 0;
    *((_BYTE *)a4 + 36) = *((_BYTE *)a2 - 12);
    v8 = (char *)a4 + 40;
    v25 = (_QWORD *)((char *)a2 - 8);
    goto LABEL_71;
  }
  if (a3 == 1)
  {
    *((_DWORD *)a4 + 2) = *(_DWORD *)(result + 8);
    *(_QWORD *)a4 = *(_QWORD *)result;
    *(_DWORD *)(result + 8) = 0;
    *((_BYTE *)a4 + 12) = *(_BYTE *)(result + 12);
    v8 = (char *)a4 + 16;
LABEL_69:
    v25 = (_QWORD *)(v7 + 16);
LABEL_71:
    *(_QWORD *)v8 = *v25;
    return result;
  }
  if ((uint64_t)a3 > 8)
  {
    v18 = result + 24 * (a3 >> 1);
    sub_22ED3A514(result, v18, a3 >> 1, a4, a3 >> 1);
    result = sub_22ED3A514(v7 + 24 * (a3 >> 1), a2, a3 - (a3 >> 1), (char *)a4 + 24 * (a3 >> 1), a3 - (a3 >> 1));
    v19 = (char *)a4 + 8;
    v20 = v18;
    while (1)
    {
      if ((const llvm::APInt *)v20 == a2)
      {
        if (v7 != v18)
        {
          v23 = 0;
          do
          {
            v24 = &v19[v23];
            *(_DWORD *)v24 = *(_DWORD *)(v7 + v23 + 8);
            *((_QWORD *)v24 - 1) = *(_QWORD *)(v7 + v23);
            *(_DWORD *)(v7 + v23 + 8) = 0;
            v24[4] = *(_BYTE *)(v7 + v23 + 12);
            *((_QWORD *)v24 + 1) = *(_QWORD *)(v7 + v23 + 16);
            v23 += 24;
          }
          while (v7 + v23 != v18);
        }
        return result;
      }
      if (*(_BYTE *)(v20 + 12))
      {
        result = llvm::APInt::compare((llvm::APInt *)v20, (const llvm::APInt *)v7);
        if ((result & 0x80000000) != 0)
          goto LABEL_51;
      }
      else
      {
        result = llvm::APInt::compareSigned((llvm::APInt *)v20, (const llvm::APInt *)v7);
        if ((result & 0x80000000) != 0)
          goto LABEL_51;
      }
      if (*(_BYTE *)(v7 + 12))
      {
        result = llvm::APInt::compare((llvm::APInt *)v7, (const llvm::APInt *)v20);
        if ((result & 0x80000000) != 0)
          goto LABEL_52;
      }
      else
      {
        result = llvm::APInt::compareSigned((llvm::APInt *)v7, (const llvm::APInt *)v20);
        if ((result & 0x80000000) != 0)
          goto LABEL_52;
      }
      if (*(_QWORD *)(v20 + 16) >= *(_QWORD *)(v7 + 16))
      {
LABEL_52:
        *(_DWORD *)v19 = *(_DWORD *)(v7 + 8);
        *((_QWORD *)v19 - 1) = *(_QWORD *)v7;
        *(_DWORD *)(v7 + 8) = 0;
        v19[4] = *(_BYTE *)(v7 + 12);
        *((_QWORD *)v19 + 1) = *(_QWORD *)(v7 + 16);
        v7 += 24;
        goto LABEL_53;
      }
LABEL_51:
      *(_DWORD *)v19 = *(_DWORD *)(v20 + 8);
      *((_QWORD *)v19 - 1) = *(_QWORD *)v20;
      *(_DWORD *)(v20 + 8) = 0;
      v19[4] = *(_BYTE *)(v20 + 12);
      *((_QWORD *)v19 + 1) = *(_QWORD *)(v20 + 16);
      v20 += 24;
LABEL_53:
      v19 += 24;
      if (v7 == v18)
      {
        if ((const llvm::APInt *)v20 != a2)
        {
          v21 = 0;
          do
          {
            v22 = &v19[v21];
            *(_DWORD *)v22 = *(_DWORD *)(v20 + v21 + 8);
            *((_QWORD *)v22 - 1) = *(_QWORD *)(v20 + v21);
            *(_DWORD *)(v20 + v21 + 8) = 0;
            v22[4] = *(_BYTE *)(v20 + v21 + 12);
            *((_QWORD *)v22 + 1) = *(_QWORD *)(v20 + v21 + 16);
            v21 += 24;
          }
          while ((const llvm::APInt *)(v20 + v21) != a2);
        }
        return result;
      }
    }
  }
  if ((const llvm::APInt *)result == a2)
    return result;
  *((_DWORD *)a4 + 2) = *(_DWORD *)(result + 8);
  *(_QWORD *)a4 = *(_QWORD *)result;
  *(_DWORD *)(result + 8) = 0;
  *((_BYTE *)a4 + 12) = *(_BYTE *)(result + 12);
  *((_QWORD *)a4 + 2) = *(_QWORD *)(result + 16);
  v9 = (llvm::APInt *)(result + 24);
  if ((const llvm::APInt *)(result + 24) == a2)
    return result;
  v10 = 0;
  v11 = a4;
  do
  {
    v12 = v9;
    if (*(_BYTE *)(v7 + 36))
      v13 = llvm::APInt::compare(v9, v11);
    else
      v13 = llvm::APInt::compareSigned(v9, v11);
    v14 = *((_BYTE *)v11 + 12);
    if (v13 < 0)
    {
      v15 = *((_QWORD *)v11 + 2);
    }
    else
    {
      if (*((_BYTE *)v11 + 12))
      {
        result = llvm::APInt::compare(v11, v12);
        if ((result & 0x80000000) != 0)
          goto LABEL_35;
      }
      else
      {
        result = llvm::APInt::compareSigned(v11, v12);
        if ((result & 0x80000000) != 0)
          goto LABEL_35;
      }
      v15 = *((_QWORD *)v11 + 2);
      if (*(_QWORD *)(v7 + 40) >= v15)
      {
LABEL_35:
        *((_DWORD *)v11 + 8) = *(_DWORD *)(v7 + 32);
        *((_QWORD *)v11 + 3) = *(_QWORD *)v12;
        *(_DWORD *)(v7 + 32) = 0;
        *((_BYTE *)v11 + 36) = *(_BYTE *)(v7 + 36);
        *((_QWORD *)v11 + 5) = *(_QWORD *)(v7 + 40);
        goto LABEL_38;
      }
    }
    *((_DWORD *)v11 + 8) = *((_DWORD *)v11 + 2);
    *((_QWORD *)v11 + 3) = *(_QWORD *)v11;
    *((_DWORD *)v11 + 2) = 0;
    *((_BYTE *)v11 + 36) = v14;
    *((_QWORD *)v11 + 5) = v15;
    v16 = a4;
    if (v11 == a4)
      goto LABEL_37;
    v17 = v10;
    v16 = v11;
    while (*(_BYTE *)(v7 + 36))
    {
      if ((llvm::APInt::compare(v12, (llvm::APInt *)((char *)a4 + v17 - 24)) & 0x80000000) == 0)
        goto LABEL_28;
LABEL_33:
      v16 = (llvm::APInt *)((char *)v16 - 24);
      sub_22ED3A4A4((uint64_t)a4 + v17, (uint64_t)a4 + v17 - 24);
      v17 -= 24;
      if (!v17)
      {
        v16 = a4;
        goto LABEL_37;
      }
    }
    if ((llvm::APInt::compareSigned(v12, (llvm::APInt *)((char *)a4 + v17 - 24)) & 0x80000000) != 0)
      goto LABEL_33;
LABEL_28:
    if (*((_BYTE *)a4 + v17 - 12))
    {
      if ((llvm::APInt::compare((llvm::APInt *)((char *)a4 + v17 - 24), v12) & 0x80000000) != 0)
        goto LABEL_37;
    }
    else if ((llvm::APInt::compareSigned((llvm::APInt *)((char *)a4 + v17 - 24), v12) & 0x80000000) != 0)
    {
      goto LABEL_37;
    }
    if (*(_QWORD *)(v7 + 40) < *(_QWORD *)((char *)a4 + v17 - 8))
      goto LABEL_33;
    v16 = (llvm::APInt *)((char *)a4 + v17);
LABEL_37:
    result = sub_22ED3A4A4((uint64_t)v16, (uint64_t)v12);
LABEL_38:
    v11 = (llvm::APInt *)((char *)v11 + 24);
    v9 = (const llvm::APInt *)((char *)v12 + 24);
    v10 += 24;
    v7 = (uint64_t)v12;
  }
  while ((const llvm::APInt *)((char *)v12 + 24) != a2);
  return result;
}

uint64_t sub_22ED3AEB8(uint64_t result, uint64_t a2, unsigned __int8 *a3, int64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  const llvm::APInt *v15;
  uint64_t v17;
  const llvm::APInt *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned __int8 *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _DWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 *v69;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;

  v72 = a5;
  if (!a5)
    return result;
  v7 = a7;
  v11 = result;
  while (a4 > v7 && v72 > v7)
  {
    if (!a4)
      return result;
    v12 = 0;
    v13 = *(unsigned __int8 *)(a2 + 12);
    v14 = -a4;
    while (1)
    {
      v15 = (const llvm::APInt *)(v11 + v12);
      if (v13)
      {
        result = llvm::APInt::compare((llvm::APInt *)a2, v15);
        if ((result & 0x80000000) != 0)
          goto LABEL_19;
      }
      else
      {
        result = llvm::APInt::compareSigned((llvm::APInt *)a2, v15);
        if ((result & 0x80000000) != 0)
          goto LABEL_19;
      }
      if (*(_BYTE *)(v11 + v12 + 12))
        break;
      result = llvm::APInt::compareSigned((llvm::APInt *)(v11 + v12), (const llvm::APInt *)a2);
      if ((result & 0x80000000) == 0)
        goto LABEL_15;
LABEL_16:
      v12 += 24;
      if (__CFADD__(v14++, 1))
        return result;
    }
    result = llvm::APInt::compare((llvm::APInt *)(v11 + v12), (const llvm::APInt *)a2);
    if ((result & 0x80000000) != 0)
      goto LABEL_16;
LABEL_15:
    if (*(_QWORD *)(a2 + 16) >= *(_QWORD *)(v11 + v12 + 16))
      goto LABEL_16;
LABEL_19:
    v17 = -v14;
    v18 = (const llvm::APInt *)(v11 + v12);
    v69 = a3;
    v67 = v11 + v12;
    if (-v14 >= v72)
    {
      if (v14 == -1)
      {
        v57 = v11 + v12;
        v58 = *(_DWORD *)(v11 + v12 + 8);
        v59 = *(_QWORD *)(v11 + v12);
        *(_DWORD *)(v57 + 8) = 0;
        v60 = *(_BYTE *)(v11 + v12 + 12);
        *(_QWORD *)v57 = *(_QWORD *)a2;
        *(_DWORD *)(v57 + 8) = *(_DWORD *)(a2 + 8);
        *(_BYTE *)(v57 + 12) = *(_BYTE *)(a2 + 12);
        *(_QWORD *)a2 = v59;
        *(_DWORD *)(a2 + 8) = v58;
        *(_BYTE *)(a2 + 12) = v60;
        v61 = *(_QWORD *)(v11 + v12 + 16);
        *(_QWORD *)(v57 + 16) = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a2 + 16) = v61;
        return result;
      }
      if (v14 > 0)
        v17 = 1 - v14;
      v66 = v17 >> 1;
      v18 = (const llvm::APInt *)(v11 + 24 * (v17 >> 1) + v12);
      v20 = a3;
      if (a3 == (unsigned __int8 *)a2)
      {
LABEL_56:
        v68 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v20[-a2] >> 3);
        v30 = v66;
        v25 = v11 + 24 * v66 + v12;
        goto LABEL_59;
      }
      v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&a3[-a2] >> 3);
      v74 = v11 + 24 * v66 + v12;
      v20 = (unsigned __int8 *)a2;
      v27 = v11;
      while (2)
      {
        v28 = v26 >> 1;
        v29 = &v20[24 * (v26 >> 1)];
        if (v29[12])
        {
          if ((llvm::APInt::compare((llvm::APInt *)&v20[24 * (v26 >> 1)], v18) & 0x80000000) != 0)
          {
LABEL_54:
            v28 = v26 + ~v28;
            v20 = v29 + 24;
            goto LABEL_55;
          }
        }
        else if ((llvm::APInt::compareSigned((llvm::APInt *)&v20[24 * (v26 >> 1)], v18) & 0x80000000) != 0)
        {
          goto LABEL_54;
        }
        if (*(_BYTE *)(v74 + 12))
        {
          if ((llvm::APInt::compare(v18, (const llvm::APInt *)&v20[24 * (v26 >> 1)]) & 0x80000000) != 0)
            goto LABEL_55;
        }
        else if ((llvm::APInt::compareSigned(v18, (const llvm::APInt *)&v20[24 * (v26 >> 1)]) & 0x80000000) != 0)
        {
          goto LABEL_55;
        }
        if (*(_QWORD *)&v20[24 * v28 + 16] < *(_QWORD *)(v74 + 16))
          goto LABEL_54;
LABEL_55:
        v26 = v28;
        v11 = v27;
        if (!v28)
          goto LABEL_56;
        continue;
      }
    }
    if (v72 >= 0)
      v19 = v72;
    else
      v19 = v72 + 1;
    v20 = (unsigned __int8 *)(a2 + 24 * (v19 >> 1));
    v68 = v19 >> 1;
    if (v18 != (const llvm::APInt *)a2)
    {
      v21 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v11 - v12) >> 3);
      v22 = v20[12];
      v73 = (_QWORD *)(a2 + 24 * (v19 >> 1) + 16);
      while (1)
      {
        while (1)
        {
          v23 = v21 >> 1;
          v24 = (char *)v18 + 24 * (v21 >> 1);
          if (v22)
            break;
          if ((llvm::APInt::compareSigned((llvm::APInt *)v20, (const llvm::APInt *)v24) & 0x80000000) == 0)
            goto LABEL_27;
LABEL_35:
          v21 >>= 1;
          if (!v23)
            goto LABEL_39;
        }
        if ((llvm::APInt::compare((llvm::APInt *)v20, (const llvm::APInt *)v24) & 0x80000000) != 0)
          goto LABEL_35;
LABEL_27:
        if (v24[12])
        {
          if ((llvm::APInt::compare((const llvm::APInt *)((char *)v18 + 24 * (v21 >> 1)), (const llvm::APInt *)v20) & 0x80000000) != 0)
            goto LABEL_38;
LABEL_29:
          if (*v73 < *((_QWORD *)v18 + 3 * v23 + 2))
          {
            v21 >>= 1;
          }
          else
          {
            v18 = (const llvm::APInt *)(v24 + 24);
            v21 += ~v23;
          }
          if (!v21)
          {
LABEL_39:
            v25 = (uint64_t)v18;
            goto LABEL_58;
          }
        }
        else
        {
          if ((llvm::APInt::compareSigned((const llvm::APInt *)((char *)v18 + 24 * (v21 >> 1)), (const llvm::APInt *)v20) & 0x80000000) == 0)goto LABEL_29;
LABEL_38:
          v18 = (const llvm::APInt *)(v24 + 24);
          v21 += ~v23;
          if (!v21)
            goto LABEL_39;
        }
      }
    }
    v25 = a2;
    v18 = (const llvm::APInt *)a2;
LABEL_58:
    v30 = 0xAAAAAAAAAAAAAAABLL * ((v25 - v11 - v12) >> 3);
LABEL_59:
    a3 = v20;
    if (v18 != (const llvm::APInt *)a2)
    {
      a3 = (unsigned __int8 *)v25;
      if ((unsigned __int8 *)a2 != v20)
      {
        a3 = (unsigned __int8 *)(v25 + 24);
        v31 = v25 + 24;
        v32 = a2;
        while (1)
        {
          v33 = *(_DWORD *)(v31 - 16);
          v34 = *(_QWORD *)(v31 - 24);
          *(_DWORD *)(v31 - 16) = 0;
          v35 = *(_BYTE *)(v31 - 12);
          *(_QWORD *)(v31 - 24) = *(_QWORD *)v32;
          *(_DWORD *)(v31 - 16) = *(_DWORD *)(v32 + 8);
          *(_BYTE *)(v31 - 12) = *(_BYTE *)(v32 + 12);
          *(_QWORD *)v32 = v34;
          *(_DWORD *)(v32 + 8) = v33;
          *(_BYTE *)(v32 + 12) = v35;
          v36 = *(_QWORD *)(v31 - 8);
          *(_QWORD *)(v31 - 8) = *(_QWORD *)(v32 + 16);
          *(_QWORD *)(v32 + 16) = v36;
          v32 += 24;
          if ((unsigned __int8 *)v32 == v20)
            break;
          if (v31 == a2)
            a2 = v32;
          v31 += 24;
          a3 += 24;
        }
        if (v31 != a2)
        {
          v37 = a2;
          do
          {
            while (1)
            {
              v38 = *(_DWORD *)(v31 + 8);
              v39 = *(_QWORD *)v31;
              *(_DWORD *)(v31 + 8) = 0;
              v40 = *(_BYTE *)(v31 + 12);
              *(_QWORD *)v31 = *(_QWORD *)v37;
              *(_DWORD *)(v31 + 8) = *(_DWORD *)(v37 + 8);
              *(_BYTE *)(v31 + 12) = *(_BYTE *)(v37 + 12);
              *(_QWORD *)v37 = v39;
              *(_DWORD *)(v37 + 8) = v38;
              *(_BYTE *)(v37 + 12) = v40;
              v41 = *(_QWORD *)(v31 + 16);
              *(_QWORD *)(v31 + 16) = *(_QWORD *)(v37 + 16);
              *(_QWORD *)(v37 + 16) = v41;
              v31 += 24;
              v37 += 24;
              if ((unsigned __int8 *)v37 == v20)
                break;
              if (v31 == a2)
                a2 = v37;
            }
            v37 = a2;
          }
          while (v31 != a2);
        }
      }
    }
    a4 = -(uint64_t)v30 - v14;
    v42 = v72 - v68;
    if ((uint64_t)(v30 + v68) >= (uint64_t)(v72 - (v30 + v68) - v14))
    {
      result = sub_22ED3AEB8(a3, v20, v69, -(uint64_t)v30 - v14, v72 - v68, a6, a7);
      v20 = (unsigned __int8 *)v18;
      v42 = v68;
      a4 = v30;
      v11 = v67;
    }
    else
    {
      result = sub_22ED3AEB8(v11 + v12, v25, a3, v30, v68, a6, a7);
      v11 = (uint64_t)a3;
      a3 = v69;
    }
    v72 = v42;
    a2 = (uint64_t)v20;
    v7 = a7;
    if (!v42)
      return result;
  }
  if (a4 > v72)
  {
    if ((unsigned __int8 *)a2 == a3)
      return result;
    v43 = 0;
    v44 = 0;
    v45 = a6;
    do
    {
      v46 = a6 + v43;
      *(_DWORD *)(v46 + 8) = *(_DWORD *)(a2 + v43 + 8);
      *(_QWORD *)v46 = *(_QWORD *)(a2 + v43);
      *(_DWORD *)(a2 + v43 + 8) = 0;
      *(_BYTE *)(v46 + 12) = *(_BYTE *)(a2 + v43 + 12);
      *(_QWORD *)(v46 + 16) = *(_QWORD *)(a2 + v43 + 16);
      ++v44;
      v43 += 24;
    }
    while ((unsigned __int8 *)(a2 + v43) != a3);
    if (!v43)
      goto LABEL_125;
    v47 = a3;
    v48 = a6 + v43;
    v49 = (uint64_t)(v47 - 24);
    while (1)
    {
      if (a2 == v11)
      {
        if (v48 != a6)
        {
          v62 = 0;
          do
          {
            v63 = v49 + v62;
            v62 -= 24;
            result = sub_22ED3A4A4(v63, v48 + v62);
          }
          while (v48 + v62 != a6);
        }
        goto LABEL_125;
      }
      v50 = a2 - 24;
      if (*(_BYTE *)(v48 - 12))
      {
        if ((llvm::APInt::compare((llvm::APInt *)(v48 - 24), (const llvm::APInt *)(a2 - 24)) & 0x80000000) != 0)
          goto LABEL_92;
      }
      else if ((llvm::APInt::compareSigned((llvm::APInt *)(v48 - 24), (const llvm::APInt *)(a2 - 24)) & 0x80000000) != 0)
      {
LABEL_92:
        v51 = a2 - 24;
        goto LABEL_96;
      }
      if (*(_BYTE *)(a2 - 12))
      {
        if ((llvm::APInt::compare((llvm::APInt *)(a2 - 24), (const llvm::APInt *)(v48 - 24)) & 0x80000000) != 0)
          goto LABEL_95;
      }
      else if ((llvm::APInt::compareSigned((llvm::APInt *)(a2 - 24), (const llvm::APInt *)(v48 - 24)) & 0x80000000) != 0)
      {
        goto LABEL_95;
      }
      v51 = a2 - 24;
      if (*(_QWORD *)(v48 - 8) >= *(_QWORD *)(a2 - 8))
      {
LABEL_95:
        v50 = v48 - 24;
        v51 = a2;
        v48 -= 24;
      }
LABEL_96:
      result = sub_22ED3A4A4(v49, v50);
      v49 -= 24;
      a2 = v51;
      if (v48 == a6)
        goto LABEL_125;
    }
  }
  if (v11 == a2)
    return result;
  v52 = 0;
  v44 = 0;
  v45 = a6;
  do
  {
    v53 = a6 + v52;
    *(_DWORD *)(v53 + 8) = *(_DWORD *)(v11 + v52 + 8);
    *(_QWORD *)v53 = *(_QWORD *)(v11 + v52);
    *(_DWORD *)(v11 + v52 + 8) = 0;
    *(_BYTE *)(v53 + 12) = *(_BYTE *)(v11 + v52 + 12);
    *(_QWORD *)(v53 + 16) = *(_QWORD *)(v11 + v52 + 16);
    ++v44;
    v52 += 24;
  }
  while (v11 + v52 != a2);
  if (!v52)
    goto LABEL_125;
  v54 = a6 + v52;
  v55 = a6 + v52 - 24;
  v56 = a6;
  while ((unsigned __int8 *)a2 != a3)
  {
    if (*(_BYTE *)(a2 + 12))
    {
      if ((llvm::APInt::compare((llvm::APInt *)a2, (const llvm::APInt *)v56) & 0x80000000) != 0)
        goto LABEL_113;
    }
    else if ((llvm::APInt::compareSigned((llvm::APInt *)a2, (const llvm::APInt *)v56) & 0x80000000) != 0)
    {
      goto LABEL_113;
    }
    if (*(_BYTE *)(v56 + 12))
    {
      if ((llvm::APInt::compare((llvm::APInt *)v56, (const llvm::APInt *)a2) & 0x80000000) != 0)
        goto LABEL_114;
    }
    else if ((llvm::APInt::compareSigned((llvm::APInt *)v56, (const llvm::APInt *)a2) & 0x80000000) != 0)
    {
      goto LABEL_114;
    }
    if (*(_QWORD *)(a2 + 16) >= *(_QWORD *)(v56 + 16))
    {
LABEL_114:
      result = sub_22ED3A4A4(v11, v56);
      v56 += 24;
      goto LABEL_115;
    }
LABEL_113:
    result = sub_22ED3A4A4(v11, a2);
    a2 += 24;
LABEL_115:
    v11 += 24;
    if (v54 == v56)
      goto LABEL_125;
  }
  if (v54 != v56)
  {
    v64 = 0;
    do
    {
      result = sub_22ED3A4A4(v11 + v64, v56 + v64);
      v64 += 24;
    }
    while (v55 != v56 + v64 - 24);
  }
LABEL_125:
  if (v45)
  {
    v65 = (_DWORD *)(a6 + 8);
    do
    {
      if (*v65 >= 0x41u)
      {
        result = *((_QWORD *)v65 - 1);
        if (result)
          result = MEMORY[0x2348A0E84](result, 0x1000C8000313F17);
      }
      v65 += 6;
      --v44;
    }
    while (v44);
  }
  return result;
}

char **sub_22ED3B6A4(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 24 * v3;
    do
    {
      if (*(_DWORD *)&v2[v4 - 16] >= 0x41u)
      {
        v6 = *(_QWORD *)&v2[v4 - 24];
        if (v6)
        {
          v7 = v4;
          v8 = v2;
          MEMORY[0x2348A0E84](v6, 0x1000C8000313F17);
          v4 = v7;
          v2 = v8;
        }
      }
      v4 -= 24;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

unint64_t sub_22ED3B73C(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  unint64_t v5;
  unint64_t v7;

  v2 = a2;
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = *(_QWORD *)a1 + 24 * v3;
    if (*(_QWORD *)a1 <= a2 && v5 > a2)
    {
      v7 = a2 - *(_QWORD *)a1;
      sub_22F3451D0(a1);
      return *(_QWORD *)a1 + v7;
    }
    else
    {
      sub_22F3451D0(a1);
    }
  }
  return v2;
}

uint64_t sub_22ED3B7A4(uint64_t result, _QWORD *a2, uint64_t (**a3)(unint64_t, uint64_t), unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  int v33;
  char v34;
  uint64_t v35;

  if (a4 >= 2)
  {
    v8 = result;
    if (a4 == 2)
    {
      result = (*a3)((unint64_t)(a2 - 3), result);
      if ((_DWORD)result)
      {
        v9 = *(_DWORD *)(v8 + 8);
        v10 = *(_QWORD *)v8;
        *(_DWORD *)(v8 + 8) = 0;
        v11 = *(_BYTE *)(v8 + 12);
        *(_QWORD *)v8 = *(a2 - 3);
        *(_DWORD *)(v8 + 8) = *((_DWORD *)a2 - 4);
        *(_BYTE *)(v8 + 12) = *((_BYTE *)a2 - 12);
        *(a2 - 3) = v10;
        *((_DWORD *)a2 - 4) = v9;
        *((_BYTE *)a2 - 12) = v11;
        v12 = *(_QWORD *)(v8 + 16);
        *(_QWORD *)(v8 + 16) = *(a2 - 1);
        *(a2 - 1) = v12;
      }
    }
    else
    {
      v13 = a4;
      if ((uint64_t)a4 <= 0)
      {
        if ((_QWORD *)result != a2)
        {
          v19 = (_QWORD *)(result + 24);
          if ((_QWORD *)(result + 24) != a2)
          {
            v20 = 0;
            v21 = (_QWORD *)result;
            do
            {
              v22 = v19;
              result = (*a3)((unint64_t)v19, (uint64_t)v21);
              if ((_DWORD)result)
              {
                v33 = *((_DWORD *)v21 + 8);
                v32 = *v22;
                *((_DWORD *)v21 + 8) = 0;
                v34 = *((_BYTE *)v21 + 36);
                v35 = v21[5];
                v23 = v20;
                while (1)
                {
                  result = sub_22ED3A4A4(v8 + v23 + 24, v8 + v23);
                  if (!v23)
                    break;
                  v23 -= 24;
                  result = (*a3)((unint64_t)&v32, v23 + v8);
                  if ((result & 1) == 0)
                  {
                    v24 = v8 + v23 + 24;
                    goto LABEL_18;
                  }
                }
                v24 = v8;
LABEL_18:
                if (*(_DWORD *)(v24 + 8) >= 0x41u)
                {
                  result = *(_QWORD *)v24;
                  if (*(_QWORD *)v24)
                    result = MEMORY[0x2348A0E84](result, 0x1000C8000313F17);
                }
                *(_QWORD *)v24 = v32;
                *(_DWORD *)(v24 + 8) = v33;
                *(_BYTE *)(v24 + 12) = v34;
                *(_QWORD *)(v24 + 16) = v35;
              }
              v19 = v22 + 3;
              v20 += 24;
              v21 = v22;
            }
            while (v22 + 3 != a2);
          }
        }
      }
      else
      {
        v16 = a4 >> 1;
        v17 = (_QWORD *)(result + 24 * (a4 >> 1));
        v18 = a4 >> 1;
        if ((uint64_t)v13 <= a6)
        {
          sub_22ED3BAFC(result, v17, a3, v18, a5);
          v25 = a5 + 24 * v16;
          result = sub_22ED3BAFC(v8 + 24 * (v13 >> 1), a2, a3, v13 - (v13 >> 1), v25);
          v26 = a5 + 24 * v13;
          v27 = v25;
          v28 = a5;
          while (v27 != v26)
          {
            if ((*a3)(v27, v28))
            {
              result = sub_22ED3A4A4(v8, v27);
              v27 += 24;
            }
            else
            {
              result = sub_22ED3A4A4(v8, v28);
              v28 += 24;
            }
            v8 += 24;
            if (v28 == v25)
            {
              if (v27 != v26)
              {
                v29 = 0;
                do
                {
                  result = sub_22ED3A4A4(v8 + v29, v27 + v29);
                  v29 += 24;
                }
                while (v27 + v29 != v26);
              }
              goto LABEL_37;
            }
          }
          if (v28 != v25)
          {
            v30 = 0;
            do
            {
              result = sub_22ED3A4A4(v8 + v30, v28 + v30);
              v30 += 24;
            }
            while (v28 + v30 != v25);
          }
LABEL_37:
          if (a5)
          {
            v31 = (_DWORD *)(a5 + 8);
            do
            {
              if (*v31 >= 0x41u)
              {
                result = *((_QWORD *)v31 - 1);
                if (result)
                  result = MEMORY[0x2348A0E84](result, 0x1000C8000313F17);
              }
              v31 += 6;
              --v13;
            }
            while (v13);
          }
        }
        else
        {
          sub_22ED3B7A4(result, v17, a3, v18, a5, a6);
          sub_22ED3B7A4(v8 + 24 * (v13 >> 1), a2, a3, v13 - (v13 >> 1), a5, a6);
          return sub_22ED39E2C(v8, v8 + 24 * (v13 >> 1), (uint64_t)a2, (uint64_t (**)(uint64_t, uint64_t))a3, v13 >> 1, v13 - (v13 >> 1), a5, a6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_22ED3BAFC(uint64_t result, _QWORD *a2, uint64_t (**a3)(unint64_t, uint64_t), unint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (a4)
  {
    v9 = (_QWORD *)result;
    if (a4 == 2)
    {
      result = (*a3)((unint64_t)(a2 - 3), result);
      if (!(_DWORD)result)
      {
        *(_DWORD *)(a5 + 8) = *((_DWORD *)v9 + 2);
        *(_QWORD *)a5 = *v9;
        *((_DWORD *)v9 + 2) = 0;
        *(_BYTE *)(a5 + 12) = *((_BYTE *)v9 + 12);
        *(_QWORD *)(a5 + 16) = v9[2];
        *(_DWORD *)(a5 + 32) = *((_DWORD *)a2 - 4);
        *(_QWORD *)(a5 + 24) = *(a2 - 3);
        *((_DWORD *)a2 - 4) = 0;
        *(_BYTE *)(a5 + 36) = *((_BYTE *)a2 - 12);
        v10 = (_QWORD *)(a5 + 40);
        v11 = a2 - 1;
        goto LABEL_23;
      }
      *(_DWORD *)(a5 + 8) = *((_DWORD *)a2 - 4);
      *(_QWORD *)a5 = *(a2 - 3);
      *((_DWORD *)a2 - 4) = 0;
      *(_BYTE *)(a5 + 12) = *((_BYTE *)a2 - 12);
      *(_QWORD *)(a5 + 16) = *(a2 - 1);
      *(_DWORD *)(a5 + 32) = *((_DWORD *)v9 + 2);
      *(_QWORD *)(a5 + 24) = *v9;
      *((_DWORD *)v9 + 2) = 0;
      *(_BYTE *)(a5 + 36) = *((_BYTE *)v9 + 12);
      v10 = (_QWORD *)(a5 + 40);
LABEL_7:
      v11 = v9 + 2;
LABEL_23:
      *v10 = *v11;
      return result;
    }
    if (a4 == 1)
    {
      *(_DWORD *)(a5 + 8) = *(_DWORD *)(result + 8);
      *(_QWORD *)a5 = *(_QWORD *)result;
      *(_DWORD *)(result + 8) = 0;
      *(_BYTE *)(a5 + 12) = *(_BYTE *)(result + 12);
      v10 = (_QWORD *)(a5 + 16);
      goto LABEL_7;
    }
    if ((uint64_t)a4 > 8)
    {
      v18 = result + 24 * (a4 >> 1);
      sub_22ED3B7A4(result, v18, a3, a4 >> 1, a5, a4 >> 1);
      result = sub_22ED3B7A4(&v9[3 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), a5 + 24 * (a4 >> 1), a4 - (a4 >> 1));
      v19 = a5 + 8;
      v20 = v18;
      while ((_QWORD *)v20 != a2)
      {
        result = (*a3)(v20, (uint64_t)v9);
        if ((_DWORD)result)
        {
          *(_DWORD *)v19 = *(_DWORD *)(v20 + 8);
          *(_QWORD *)(v19 - 8) = *(_QWORD *)v20;
          *(_DWORD *)(v20 + 8) = 0;
          v21 = (_QWORD *)v20;
          v20 += 24;
        }
        else
        {
          *(_DWORD *)v19 = *((_DWORD *)v9 + 2);
          *(_QWORD *)(v19 - 8) = *v9;
          *((_DWORD *)v9 + 2) = 0;
          v21 = v9;
          v9 += 3;
        }
        v22 = v21[2];
        *(_BYTE *)(v19 + 4) = *((_BYTE *)v21 + 12);
        *(_QWORD *)(v19 + 8) = v22;
        v19 += 24;
        if (v9 == (_QWORD *)v18)
        {
          if ((_QWORD *)v20 != a2)
          {
            v23 = 0;
            do
            {
              v24 = v19 + v23;
              *(_DWORD *)v24 = *(_DWORD *)(v20 + v23 + 8);
              *(_QWORD *)(v24 - 8) = *(_QWORD *)(v20 + v23);
              *(_DWORD *)(v20 + v23 + 8) = 0;
              *(_BYTE *)(v24 + 4) = *(_BYTE *)(v20 + v23 + 12);
              *(_QWORD *)(v24 + 8) = *(_QWORD *)(v20 + v23 + 16);
              v23 += 24;
            }
            while ((_QWORD *)(v20 + v23) != a2);
          }
          return result;
        }
      }
      if (v9 != (_QWORD *)v18)
      {
        v25 = 0;
        do
        {
          v26 = v19 + v25 * 8;
          *(_DWORD *)v26 = v9[v25 + 1];
          *(_QWORD *)(v26 - 8) = v9[v25];
          LODWORD(v9[v25 + 1]) = 0;
          *(_BYTE *)(v26 + 4) = BYTE4(v9[v25 + 1]);
          *(_QWORD *)(v26 + 8) = v9[v25 + 2];
          v25 += 3;
        }
        while (&v9[v25] != (_QWORD *)v18);
      }
    }
    else if ((_QWORD *)result != a2)
    {
      *(_DWORD *)(a5 + 8) = *(_DWORD *)(result + 8);
      *(_QWORD *)a5 = *(_QWORD *)result;
      *(_DWORD *)(result + 8) = 0;
      *(_BYTE *)(a5 + 12) = *(_BYTE *)(result + 12);
      *(_QWORD *)(a5 + 16) = *(_QWORD *)(result + 16);
      v12 = (_QWORD *)(result + 24);
      if ((_QWORD *)(result + 24) != a2)
      {
        v13 = 0;
        v14 = a5;
        do
        {
          v15 = v12;
          result = (*a3)((unint64_t)v12, v14);
          if ((_DWORD)result)
          {
            *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 8);
            *(_QWORD *)(v14 + 24) = *(_QWORD *)v14;
            *(_DWORD *)(v14 + 8) = 0;
            *(_BYTE *)(v14 + 36) = *(_BYTE *)(v14 + 12);
            *(_QWORD *)(v14 + 40) = *(_QWORD *)(v14 + 16);
            v16 = a5;
            if (v14 != a5)
            {
              v17 = v13;
              while (1)
              {
                v16 = a5 + v17;
                if (!(*a3)((unint64_t)v15, a5 + v17 - 24))
                  break;
                sub_22ED3A4A4(a5 + v17, a5 + v17 - 24);
                v17 -= 24;
                if (!v17)
                {
                  v16 = a5;
                  break;
                }
              }
            }
            result = sub_22ED3A4A4(v16, (uint64_t)v15);
          }
          else
          {
            *(_DWORD *)(v14 + 32) = *((_DWORD *)v9 + 8);
            *(_QWORD *)(v14 + 24) = *v15;
            *((_DWORD *)v9 + 8) = 0;
            *(_BYTE *)(v14 + 36) = *((_BYTE *)v9 + 36);
            *(_QWORD *)(v14 + 40) = v9[5];
          }
          v14 += 24;
          v12 = v15 + 3;
          v13 += 24;
          v9 = v15;
        }
        while (v15 + 3 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_22ED3BEA0(uint64_t result, uint64_t a2, uint64_t (**a3)(void))
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  if (result != a2)
  {
    do
    {
      v5 = result + 24;
      if (result + 24 == a2)
        return a2;
      v6 = (*a3)();
      result = v5;
    }
    while (!v6);
    v7 = v5 + 24;
    v8 = v5 - 24;
    while (v7 != a2)
    {
      if ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v8, v7) & 1) == 0)
      {
        v8 += 24;
        sub_22ED3A4A4(v8, v7);
      }
      v7 += 24;
    }
    return v8 + 24;
  }
  return result;
}

uint64_t sub_22ED3BF3C(uint64_t *a1, _DWORD *a2)
{
  return sub_22E890748(*a1, a2);
}

uint64_t sub_22ED3BF44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unsigned int v5;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD v17[10];

  v17[8] = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    if (a3)
    {
      v4 = a2 & 0xFFFFFFFFFFFFFFFBLL;
      v5 = *(_DWORD *)(a3 + 8);
      if (v5 >= *(_DWORD *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v5 = *(_DWORD *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v5) = v4;
      ++*(_DWORD *)(a3 + 8);
    }
    else
    {
      v17[0] = a2 & 0xFFFFFFFFFFFFFFFBLL;
      v16 = 0x800000001;
      v7 = 1;
      do
      {
        v8 = v7;
        v9 = &v17[v7];
        v10 = *(v9 - 1);
        if ((v10 & 4) != 0)
        {
          v7 = v8 - 1;
          LODWORD(v16) = v8 - 1;
        }
        else
        {
          *(v9 - 1) = v10 | 4;
          v11 = *(unsigned __int8 *)(v10 & 0xFFFFFFFFFFFFFFF8) - 1;
          if (v11 <= 0xEB)
            __asm { BR              X9 }
          v7 = v16;
          if ((_DWORD)v8 != (_DWORD)v16)
          {
            v12 = &v17[v16 - 1];
            if (&v17[v8] < v12)
            {
              v13 = &v17[v8 + 1];
              do
              {
                v14 = *(v13 - 1);
                *(v13 - 1) = *v12;
                *v12-- = v14;
              }
              while (v13++ < v12);
            }
          }
        }
      }
      while (v7);
    }
  }
  return 1;
}

uint64_t sub_22ED47864(_QWORD *a1, unint64_t a2)
{
  unint64_t v4;
  int v5;
  uint64_t result;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  char *v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t **v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t **v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  BOOL v52;
  uint64_t v53;
  uint64_t **v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t **v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t **v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t **v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t **v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t **v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int *v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int *v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  unsigned int v93;
  BOOL v94;
  uint64_t v95;
  uint64_t **v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t **v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t **v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t **v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t **v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t **v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t **v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  BOOL v127;
  uint64_t v128;
  uint64_t **v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  BOOL v134;
  uint64_t v135;
  uint64_t **v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t **v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t **v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153;
  BOOL v154;
  uint64_t v155;
  uint64_t **v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t **v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t **v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t **v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t *v177;
  unsigned int v178;
  uint64_t v179;
  uint64_t **v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int v184;
  BOOL v185;
  uint64_t v186;
  uint64_t **v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  unint64_t v192;
  unint64_t v193;
  unsigned int v194;
  uint64_t v195;
  uint64_t **v196;
  uint64_t *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t **v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t *v205;
  unint64_t *v206;
  unint64_t *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t **v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t **v216;
  uint64_t *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t **v220;
  uint64_t *v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int v224;
  BOOL v225;
  uint64_t v226;
  uint64_t **v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unsigned int v234;
  BOOL v235;
  uint64_t v236;
  uint64_t **v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t v240;
  unsigned int v241;
  BOOL v242;
  uint64_t v243;
  uint64_t **v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  _QWORD *v252;
  uint64_t **v253;
  uint64_t *v254;
  uint64_t v255;
  uint64_t v256;
  unsigned int v257;
  uint64_t v258;
  uint64_t **v259;
  uint64_t *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t **v263;
  uint64_t *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t *v268;
  unsigned int v269;
  uint64_t v270;
  uint64_t **v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  _DWORD *v275;
  uint64_t v276;
  uint64_t *v277;
  unsigned int v278;
  uint64_t v279;
  unsigned int v280;
  BOOL v281;
  uint64_t v282;
  uint64_t **v283;
  uint64_t *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  uint64_t v289;
  unsigned int v290;
  BOOL v291;
  uint64_t v292;
  uint64_t **v293;
  uint64_t *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t **v297;
  uint64_t *v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t **v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unsigned int v305;
  BOOL v306;
  uint64_t v307;
  uint64_t **v308;
  uint64_t *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t **v312;
  uint64_t *v313;
  uint64_t v314;
  uint64_t v315;
  int v316;
  uint64_t v317;
  unsigned int v318;
  uint64_t v319;
  uint64_t **v320;
  uint64_t *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t **v324;
  uint64_t *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t **v328;
  uint64_t *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t **v332;
  uint64_t *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  unint64_t *v337;
  unsigned int v338;
  uint64_t v339;
  uint64_t **v340;
  uint64_t *v341;
  uint64_t v342;
  uint64_t v343;
  unsigned int v344;
  uint64_t v345;
  uint64_t **v346;
  uint64_t *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t **v350;
  uint64_t *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t *v356;
  uint64_t v357;
  unint64_t *v358;
  unint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t *v363;
  uint64_t v364;
  uint64_t **v365;
  uint64_t *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t **v369;
  uint64_t *v370;
  uint64_t v371;
  uint64_t v372;
  unsigned int v373;
  BOOL v374;
  uint64_t v375;
  uint64_t **v376;
  uint64_t *v377;
  uint64_t v378;
  uint64_t v379;
  unint64_t v380;
  unint64_t v381;
  unsigned int v382;
  uint64_t v383;
  uint64_t **v384;
  uint64_t *v385;
  uint64_t v386;
  uint64_t v387;
  unint64_t v388;
  uint64_t v389;
  unsigned int v390;
  uint64_t v391;
  uint64_t **v392;
  uint64_t *v393;
  uint64_t v394;
  uint64_t v395;
  unsigned int v396;
  uint64_t v397;
  uint64_t **v398;
  uint64_t *v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  unint64_t v403;
  unint64_t *v404;
  unsigned int v405;
  uint64_t v406;
  uint64_t **v407;
  uint64_t *v408;
  uint64_t v409;
  uint64_t v410;
  unsigned int v411;
  BOOL v412;
  uint64_t v413;
  uint64_t **v414;
  uint64_t *v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t **v418;
  uint64_t *v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t **v422;
  uint64_t *v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t **v426;
  uint64_t *v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t **v430;
  uint64_t *v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t **v434;
  uint64_t *v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t **v438;
  uint64_t *v439;
  uint64_t v440;
  uint64_t v441;
  int v442;
  uint64_t v443;
  unsigned int v444;
  uint64_t v445;
  uint64_t **v446;
  uint64_t *v447;
  uint64_t v448;
  uint64_t v449;
  unint64_t v450;
  unsigned int v451;
  uint64_t v452;
  uint64_t **v453;
  uint64_t *v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t **v457;
  uint64_t *v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t **v461;
  uint64_t *v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t i;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  unsigned int v471;
  BOOL v472;
  uint64_t v473;
  uint64_t **v474;
  uint64_t *v475;
  uint64_t v476;
  uint64_t v477;
  unsigned int v478;
  uint64_t v479;
  uint64_t **v480;
  uint64_t *v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t **v484;
  uint64_t *v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t *v488;
  uint64_t **v489;
  uint64_t *v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t *v493;
  unsigned int v494;
  uint64_t v495;
  uint64_t **v496;
  uint64_t *v497;
  uint64_t v498;
  uint64_t v499;
  char *v500;
  uint64_t v501;
  uint64_t **v502;
  uint64_t *v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t **v506;
  uint64_t *v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t **v511;
  uint64_t *v512;
  uint64_t v513;
  uint64_t v514;
  unint64_t v515;
  uint64_t v516;
  unsigned int v517;
  uint64_t v518;
  uint64_t **v519;
  uint64_t *v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t **v530;
  uint64_t *v531;
  uint64_t v532;
  uint64_t v533;
  BOOL v534;
  uint64_t **v535;
  uint64_t *v536;
  uint64_t v537;
  uint64_t v538;
  BOOL v539;
  BOOL v540;
  BOOL v541;
  BOOL v542;
  BOOL v543;
  int *v544;
  BOOL v545;
  BOOL v546;
  BOOL v547;
  uint64_t **v548;
  uint64_t *v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  int v559;
  uint64_t v560;

  if (!a2)
    return 1;
  v4 = a2 + 28;
  v5 = *(_DWORD *)(a2 + 28) & 0x7F;
  if ((*(_DWORD *)(a2 + 28) & 0x200) != 0)
  {
    if (v5 == 38)
      return sub_22ED4B6EC(a1, a2);
    return 1;
  }
  switch(v5)
  {
    case 0:
      result = sub_22ED4C680((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v8 = *v7;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v10 = *(_QWORD *)v9 + 8 * *(unsigned int *)(v9 + 8);
      }
      else
      {
        v10 = 0;
      }
      while (2)
      {
        if (v8 == (uint64_t *)v10)
          return 1;
        if ((sub_22ED4C71C((uint64_t)a1, *v8) & 1) != 0)
        {
          ++v8;
          continue;
        }
        break;
      }
      return 0;
    case 1:
      v248 = *(unint64_t **)(a2 + 96);
      if (v248)
      {
        result = sub_22ED4BB5C(a1, *v248, (uint64_t)(v248 + 1));
        if (!(_DWORD)result)
          return result;
      }
      v249 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
      result = sub_22ED3BF44(a1, v249, 0);
      if (!(_DWORD)result)
        return result;
      v250 = *(unsigned int *)(a2 + 112);
      if (!(_DWORD)v250)
        goto LABEL_454;
      v251 = 16 * v250;
      v252 = (_QWORD *)(*(_QWORD *)(a2 + 104) + 8);
      while (1)
      {
        if (*v252)
        {
          result = sub_22ED3BF44(a1, *v252, 0);
          if (!(_DWORD)result)
            break;
        }
        v252 += 2;
        v251 -= 16;
        if (!v251)
        {
LABEL_454:
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v254 = *v253;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v256 = *(_QWORD *)v255 + 8 * *(unsigned int *)(v255 + 8);
            }
            else
            {
              v256 = 0;
            }
            while (v254 != (uint64_t *)v256)
            {
              if ((sub_22ED4C71C((uint64_t)a1, *v254) & 1) == 0)
                return 0;
              ++v254;
            }
          }
          return 1;
        }
      }
      return result;
    case 2:
      result = sub_22ED3BF44(a1, *(_QWORD *)(a2 + 80) & 0xFFFFFFFFFFFFFFF8, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v217 = *v216;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v219 = *(_QWORD *)v218 + 8 * *(unsigned int *)(v218 + 8);
      }
      else
      {
        v219 = 0;
      }
      while (2)
      {
        if (v217 == (uint64_t *)v219)
          return 1;
        if ((sub_22ED4C71C((uint64_t)a1, *v217) & 1) != 0)
        {
          ++v217;
          continue;
        }
        break;
      }
      return 0;
    case 3:
      result = sub_22ED47864(a1);
      if (!(_DWORD)result)
        return result;
      v231 = *(_QWORD *)(a2 + 48);
      if (!v231)
        goto LABEL_421;
      v232 = *(unsigned int *)(v231 + 8);
      if (!(_DWORD)v232)
        goto LABEL_421;
      v233 = v231 + 16;
      while ((sub_22ED4C2D0((uint64_t)a1, v233) & 1) != 0)
      {
        v233 += 32;
        if (!--v232)
        {
LABEL_421:
          v234 = *(_DWORD *)v4 & 0x7F;
          v235 = v234 > 0x39 || ((1 << v234) & 0x3F0003E01011066) == 0;
          if (v235
            && (v234 - 70 <= 0xD ? (v541 = ((1 << (v234 - 70)) & 0x2803) == 0) : (v541 = 1), v541 && v234 - 19 > 4))
          {
            v236 = 0;
          }
          else
          {
            v236 = sub_22EFCAE04(a2);
          }
          result = sub_22ED4C680((uint64_t)a1, v236);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v238 = *v237;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v240 = *(_QWORD *)v239 + 8 * *(unsigned int *)(v239 + 8);
            }
            else
            {
              v240 = 0;
            }
            while (v238 != (uint64_t *)v240)
            {
              if ((sub_22ED4C71C((uint64_t)a1, *v238) & 1) == 0)
                return 0;
              ++v238;
            }
          }
          return 1;
        }
      }
      return 0;
    case 4:
      result = sub_22ED4C680((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v173 = *v172;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v175 = *(_QWORD *)v174 + 8 * *(unsigned int *)(v174 + 8);
      }
      else
      {
        v175 = 0;
      }
      while (2)
      {
        if (v173 == (uint64_t *)v175)
          return 1;
        if ((sub_22ED4C71C((uint64_t)a1, *v173) & 1) != 0)
        {
          ++v173;
          continue;
        }
        break;
      }
      return 0;
    case 5:
      result = sub_22ED4C680((uint64_t)a1, a2 + 40);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v298 = *v297;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v300 = *(_QWORD *)v299 + 8 * *(unsigned int *)(v299 + 8);
      }
      else
      {
        v300 = 0;
      }
      while (2)
      {
        if (v298 == (uint64_t *)v300)
          return 1;
        if ((sub_22ED4C71C((uint64_t)a1, *v298) & 1) != 0)
        {
          ++v298;
          continue;
        }
        break;
      }
      return 0;
    case 6:
      result = sub_22ED4C680((uint64_t)a1, a2 + 40);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v325 = *v324;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v327 = *(_QWORD *)v326 + 8 * *(unsigned int *)(v326 + 8);
      }
      else
      {
        v327 = 0;
      }
      while (2)
      {
        if (v325 == (uint64_t *)v327)
          return 1;
        if ((sub_22ED4C71C((uint64_t)a1, *v325) & 1) != 0)
        {
          ++v325;
          continue;
        }
        break;
      }
      return 0;
    case 7:
      result = sub_22ED3BF44(a1, *(_QWORD *)(a2 + 40), 0);
      if (!(_DWORD)result)
        return result;
      v241 = *(_DWORD *)v4 & 0x7F;
      v242 = v241 > 0x39 || ((1 << v241) & 0x3F0003E01011066) == 0;
      v243 = !v242 || v241 - 70 <= 0xD && ((1 << (v241 - 70)) & 0x2803) != 0 || v241 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22ED4C680((uint64_t)a1, v243);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v245 = *v244;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v247 = *(_QWORD *)v246 + 8 * *(unsigned int *)(v246 + 8);
      }
      else
      {
        v247 = 0;
      }
      while (2)
      {
        if (v245 == (uint64_t *)v247)
          return 1;
        if ((sub_22ED4C71C((uint64_t)a1, *v245) & 1) != 0)
        {
          ++v245;
          continue;
        }
        break;
      }
      return 0;
    case 8:
      v336 = *(_QWORD *)(a2 + 40);
      v337 = (unint64_t *)(v336 & 0xFFFFFFFFFFFFFFF8);
      if ((v336 & 4) != 0 && v337)
      {
        if ((sub_22ED4BB5C(a1, *v337, (uint64_t)(v337 + 1)) & 1) == 0)
          return 0;
      }
      else
      {
        result = sub_22ED47864(a1);
        if (!(_DWORD)result)
          return result;
      }
      v478 = *(_DWORD *)v4 & 0x7F;
      if (v478 <= 0x39 && ((1 << v478) & 0x3F0003E01011066) != 0
        || v478 - 70 <= 0xD && ((1 << (v478 - 70)) & 0x2803) != 0
        || v478 - 19 <= 4)
      {
        v479 = sub_22EFCAE04(a2);
      }
      else
      {
        v479 = 0;
      }
      result = sub_22ED4C680((uint64_t)a1, v479);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v481 = *v480;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v483 = *(_QWORD *)v482 + 8 * *(unsigned int *)(v482 + 8);
      }
      else
      {
        v483 = 0;
      }
      while (2)
      {
        if (v481 == (uint64_t *)v483)
          return 1;
        if ((sub_22ED4C71C((uint64_t)a1, *v481) & 1) != 0)
        {
          ++v481;
          continue;
        }
        break;
      }
      return 0;
    case 9:
      v204 = *(_QWORD *)(a2 + 48);
      v205 = (unint64_t *)(v204 & 0xFFFFFFFFFFFFFFF8);
      if ((v204 & 4) != 0 && v205)
      {
        if ((sub_22ED4BB5C(a1, *v205, (uint64_t)(v205 + 1)) & 1) == 0)
          return 0;
      }
      else
      {
        result = sub_22ED47864(a1);
        if (!(_DWORD)result)
          return result;
      }
      v465 = *(unsigned int *)(a2 + 36);
      if (!(_DWORD)v465)
        goto LABEL_859;
      for (i = 0; i != v465; ++i)
      {
        v467 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8 * i);
        v468 = *(_DWORD *)(v467 + 12) & 0x1FFFFFFF;
        if ((_DWORD)v468)
        {
          v469 = v467 + 16;
          v470 = 8 * v468;
          while ((sub_22ED47864(a1) & 1) != 0)
          {
            v469 += 8;
            v470 -= 8;
            if (!v470)
              goto LABEL_858;
          }
          return 0;
        }
LABEL_858:
        ;
      }
LABEL_859:
      v471 = *(_DWORD *)v4 & 0x7F;
      v472 = v471 > 0x39 || ((1 << v471) & 0x3F0003E01011066) == 0;
      if (v472 && (v471 - 70 <= 0xD ? (v547 = ((1 << (v471 - 70)) & 0x2803) == 0) : (v547 = 1), v547 && v471 - 19 > 4))
        v473 = 0;
      else
        v473 = sub_22EFCAE04(a2);
      result = sub_22ED4C680((uint64_t)a1, v473);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v475 = *v474;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v477 = *(_QWORD *)v476 + 8 * *(unsigned int *)(v476 + 8);
        }
        else
        {
          v477 = 0;
        }
        while (v475 != (uint64_t *)v477)
        {
          if ((sub_22ED4C71C((uint64_t)a1, *v475) & 1) == 0)
            return 0;
          ++v475;
        }
      }
      return 1;
    case 10:
      result = sub_22ED4C680((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v333 = *v332;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v335 = *(_QWORD *)v334 + 8 * *(unsigned int *)(v334 + 8);
      }
      else
      {
        v335 = 0;
      }
      while (2)
      {
        if (v333 == (uint64_t *)v335)
          return 1;
        if ((sub_22ED4C71C((uint64_t)a1, *v333) & 1) != 0)
        {
          ++v333;
          continue;
        }
        break;
      }
      return 0;
    case 11:
      return (sub_22ED4B734((uint64_t)a1, a2) & 1) != 0;
    case 12:
      result = sub_22ED4C680((uint64_t)a1, a2 + 40);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v201 = *v200;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v203 = *(_QWORD *)v202 + 8 * *(unsigned int *)(v202 + 8);
      }
      else
      {
        v203 = 0;
      }
      while (2)
      {
        if (v201 == (uint64_t *)v203)
          return 1;
        if ((sub_22ED4C71C((uint64_t)a1, *v201) & 1) != 0)
        {
          ++v201;
          continue;
        }
        break;
      }
      return 0;
    case 13:
      if (!sub_22ED4BA1C(a1, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72)))
        return 0;
      v316 = *(_DWORD *)(a2 + 24);
      v317 = *(_QWORD *)(a2 + 80);
      v558 = *(_QWORD *)(a2 + 40);
      v559 = v316;
      v560 = v317;
      if (!sub_22ED4BAA4((uint64_t)a1, &v558))
        return 0;
      if ((v318 = *(_DWORD *)v4 & 0x7F, v318 <= 0x39) && ((1 << v318) & 0x3F0003E01011066) != 0
        || v318 - 70 <= 0xD && ((1 << (v318 - 70)) & 0x2803) != 0
        || v318 - 19 <= 4)
      {
        v319 = sub_22EFCAE04(a2);
      }
      else
      {
        v319 = 0;
      }
      if (!sub_22ED4C680((uint64_t)a1, v319))
        return 0;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v321 = *v320;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v323 = *(_QWORD *)v322 + 8 * *(unsigned int *)(v322 + 8);
      }
      else
      {
        v323 = 0;
      }
      while (2)
      {
        if (v321 == (uint64_t *)v323)
          return 1;
        if ((sub_22ED4C71C((uint64_t)a1, *v321) & 1) != 0)
        {
          ++v321;
          continue;
        }
        break;
      }
      return 0;
    case 14:
      result = sub_22ED4C680((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v141 = *v140;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v143 = *(_QWORD *)v142 + 8 * *(unsigned int *)(v142 + 8);
      }
      else
      {
        v143 = 0;
      }
      while (2)
      {
        if (v141 == (uint64_t *)v143)
          return 1;
        if ((sub_22ED4C71C((uint64_t)a1, *v141) & 1) != 0)
        {
          ++v141;
          continue;
        }
        break;
      }
      return 0;
    case 15:
      result = sub_22ED4C680((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v221 = *v220;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v223 = *(_QWORD *)v222 + 8 * *(unsigned int *)(v222 + 8);
      }
      else
      {
        v223 = 0;
      }
      while (2)
      {
        if (v221 == (uint64_t *)v223)
          return 1;
        if ((sub_22ED4C71C((uint64_t)a1, *v221) & 1) != 0)
        {
          ++v221;
          continue;
        }
        break;
      }
      return 0;
    case 16:
      result = sub_22ED4C680((uint64_t)a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v123 = *v122;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v125 = *(_QWORD *)v124 + 8 * *(unsigned int *)(v124 + 8);
      }
      else
      {
        v125 = 0;
      }
      while (2)
      {
        if (v123 == (uint64_t *)v125)
          return 1;
        if ((sub_22ED4C71C((uint64_t)a1, *v123) & 1) != 0)
        {
          ++v123;
          continue;
        }
        break;
      }
      return 0;
    case 17:
      result = sub_22ED4BA1C(a1, *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80));
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v264 = *v263;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v266 = *(_QWORD *)v265 + 8 * *(unsigned int *)(v265 + 8);
      }
      else
      {
        v266 = 0;
      }
      while (2)
      {
        if (v264 == (uint64_t *)v266)
          return 1;
        if ((sub_22ED4C71C((uint64_t)a1, *v264) & 1) != 0)
        {
          ++v264;
          continue;
        }
        break;
      }
      return 0;
    case 18:
      result = sub_22ED4C680((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v329 = *v328;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v331 = *(_QWORD *)v330 + 8 * *(unsigned int *)(v330 + 8);
      }
      else
      {
        v331 = 0;
      }
      while (2)
      {
        if (v329 == (uint64_t *)v331)
          return 1;
        if ((sub_22ED4C71C((uint64_t)a1, *v329) & 1) != 0)
        {
          ++v329;
          continue;
        }
        break;
      }
      return 0;
    case 19:
      v361 = *(_QWORD *)(a2 + 112);
      if (!v361)
        goto LABEL_650;
      v362 = *(unsigned int *)(v361 + 8);
      if (!(_DWORD)v362)
        goto LABEL_650;
      v363 = (uint64_t *)(v361 + 16);
      v364 = 8 * v362;
      while ((sub_22ED4B84C(a1, *v363) & 1) != 0)
      {
        ++v363;
        v364 -= 8;
        if (!v364)
        {
LABEL_650:
          result = sub_22ED4C680((uint64_t)a1, a2 + 48);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v366 = *v365;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v368 = *(_QWORD *)v367 + 8 * *(unsigned int *)(v367 + 8);
            }
            else
            {
              v368 = 0;
            }
            while (v366 != (uint64_t *)v368)
            {
              if ((sub_22ED4C71C((uint64_t)a1, *v366) & 1) == 0)
                return 0;
              ++v366;
            }
          }
          return 1;
        }
      }
      return 0;
    case 20:
      result = sub_22ED4C680((uint64_t)a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v284 = *v283;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v286 = *(_QWORD *)v285 + 8 * *(unsigned int *)(v285 + 8);
      }
      else
      {
        v286 = 0;
      }
      while (2)
      {
        if (v284 == (uint64_t *)v286)
          return 1;
        if ((sub_22ED4C71C((uint64_t)a1, *v284) & 1) != 0)
        {
          ++v284;
          continue;
        }
        break;
      }
      return 0;
    case 21:
      result = sub_22ED4C680((uint64_t)a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v313 = *v312;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v315 = *(_QWORD *)v314 + 8 * *(unsigned int *)(v314 + 8);
      }
      else
      {
        v315 = 0;
      }
      while (2)
      {
        if (v313 == (uint64_t *)v315)
          return 1;
        if ((sub_22ED4C71C((uint64_t)a1, *v313) & 1) != 0)
        {
          ++v313;
          continue;
        }
        break;
      }
      return 0;
    case 22:
      v354 = *(_QWORD *)(a2 + 112);
      if (!v354)
        goto LABEL_637;
      v355 = *(unsigned int *)(v354 + 8);
      if (!(_DWORD)v355)
        goto LABEL_637;
      v356 = (uint64_t *)(v354 + 16);
      v357 = 8 * v355;
      while ((sub_22ED4B84C(a1, *v356) & 1) != 0)
      {
        ++v356;
        v357 -= 8;
        if (!v357)
        {
LABEL_637:
          v358 = (unint64_t *)sub_22F259044(a2);
          if (v358)
          {
            result = sub_22ED4BB5C(a1, *v358, (uint64_t)(v358 + 1));
            if (!(_DWORD)result)
              return result;
          }
          v359 = *(_QWORD *)(a2 + 120);
          if (!v359)
          {
            sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 96) + 88), *(_QWORD *)(a2 + 96));
            v359 = *(_QWORD *)(a2 + 120);
          }
          if (v359 < 8)
            v360 = 0;
          else
            v360 = *(_QWORD *)(v359 & 0xFFFFFFFFFFFFFFF8);
          if (v360 == a2)
          {
            v552 = sub_22F2590A8(a2);
            v553 = sub_22F25910C(a2);
            v554 = sub_22F259178(a2);
            v555 = sub_22F2591DC(a2);
            if (v552 != v553 && v554 != v555)
            {
              v556 = v554 + 4;
              v557 = v552 + 8;
              do
              {
                if (v557 == v553)
                  break;
                v557 += 8;
                v31 = v556 == v555;
                v556 += 4;
              }
              while (!v31);
            }
          }
          result = sub_22ED4C680((uint64_t)a1, a2 + 48);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v531 = *v530;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v533 = *(_QWORD *)v532 + 8 * *(unsigned int *)(v532 + 8);
            }
            else
            {
              v533 = 0;
            }
            while (v531 != (uint64_t *)v533)
            {
              if ((sub_22ED4C71C((uint64_t)a1, *v531) & 1) == 0)
                return 0;
              ++v531;
            }
          }
          return 1;
        }
      }
      return 0;
    case 23:
      v388 = *(_QWORD *)(a2 + 104);
      if (!v388)
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 96) + 88), *(_QWORD *)(a2 + 96));
        v388 = *(_QWORD *)(a2 + 104);
      }
      if (v388 < 8)
        v389 = 0;
      else
        v389 = *(_QWORD *)(v388 & 0xFFFFFFFFFFFFFFF8);
      if (v389 == a2)
      {
        v523 = sub_22F259248(a2);
        v525 = v524;
        v526 = sub_22F2592CC(a2);
        if (v523 != v525 && v526 != v527)
        {
          v528 = v526 + 4;
          v529 = v523 + 8;
          do
          {
            if (v529 == v525)
              break;
            v529 += 8;
            v31 = v528 == v527;
            v528 += 4;
          }
          while (!v31);
        }
      }
      result = sub_22ED4C680((uint64_t)a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v485 = *v484;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v487 = *(_QWORD *)v486 + 8 * *(unsigned int *)(v486 + 8);
      }
      else
      {
        v487 = 0;
      }
      while (2)
      {
        if (v485 == (uint64_t *)v487)
          return 1;
        if ((sub_22ED4C71C((uint64_t)a1, *v485) & 1) != 0)
        {
          ++v485;
          continue;
        }
        break;
      }
      return 0;
    case 24:
      v207 = *(unint64_t **)(a2 + 88);
      if (v207)
      {
        result = sub_22ED4BB5C(a1, *v207, (uint64_t)(v207 + 1));
        if (!(_DWORD)result)
          return result;
      }
      v208 = *(unsigned int *)(a2 + 104);
      if (!(_DWORD)v208)
        goto LABEL_379;
      v209 = *(_QWORD *)(a2 + 96);
      v210 = 8 * v208;
      while ((sub_22ED47864(a1) & 1) != 0)
      {
        v209 += 8;
        v210 -= 8;
        if (!v210)
        {
LABEL_379:
          if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)a2 + 72))(a2))
          {
            v211 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
            result = sub_22ED3BF44(a1, v211, 0);
            if (!(_DWORD)result)
              return result;
          }
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v213 = *v212;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v215 = *(_QWORD *)v214 + 8 * *(unsigned int *)(v214 + 8);
            }
            else
            {
              v215 = 0;
            }
            while (v213 != (uint64_t *)v215)
            {
              if ((sub_22ED4C71C((uint64_t)a1, *v213) & 1) == 0)
                return 0;
              ++v213;
            }
          }
          return 1;
        }
      }
      return 0;
    case 25:
      v206 = *(unint64_t **)(a2 + 64);
      if (v206)
      {
        if ((sub_22ED4BB5C(a1, *v206, (uint64_t)(v206 + 1)) & 1) == 0)
          return 0;
      }
      else
      {
        result = sub_22ED352EC(a1, *(_QWORD *)(a2 + 56));
        if (!(_DWORD)result)
          return result;
      }
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v507 = *v506;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v509 = *(_QWORD *)v508 + 8 * *(unsigned int *)(v508 + 8);
      }
      else
      {
        v509 = 0;
      }
      while (2)
      {
        if (v507 == (uint64_t *)v509)
          return 1;
        if ((sub_22ED4C71C((uint64_t)a1, *v507) & 1) != 0)
        {
          ++v507;
          continue;
        }
        break;
      }
      return 0;
    case 26:
      result = sub_22ED4CCB8((uint64_t)a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      v411 = *(_DWORD *)v4 & 0x7F;
      v412 = v411 > 0x39 || ((1 << v411) & 0x3F0003E01011066) == 0;
      v413 = !v412 || v411 - 70 <= 0xD && ((1 << (v411 - 70)) & 0x2803) != 0 || v411 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22ED4C680((uint64_t)a1, v413);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v415 = *v414;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v417 = *(_QWORD *)v416 + 8 * *(unsigned int *)(v416 + 8);
      }
      else
      {
        v417 = 0;
      }
      while (2)
      {
        if (v415 == (uint64_t *)v417)
          return 1;
        if ((sub_22ED4C71C((uint64_t)a1, *v415) & 1) != 0)
        {
          ++v415;
          continue;
        }
        break;
      }
      return 0;
    case 27:
      result = sub_22ED4CCB8((uint64_t)a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22ED3BF44(a1, *(_QWORD *)(a2 + 64), 0);
      if (!(_DWORD)result)
        return result;
      if ((v112 = *(_DWORD *)v4 & 0x7F, v112 <= 0x39) && ((1 << v112) & 0x3F0003E01011066) != 0
        || v112 - 70 <= 0xD && ((1 << (v112 - 70)) & 0x2803) != 0
        || v112 - 19 <= 4)
      {
        v113 = sub_22EFCAE04(a2);
      }
      else
      {
        v113 = 0;
      }
      result = sub_22ED4C680((uint64_t)a1, v113);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v115 = *v114;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v117 = *(_QWORD *)v116 + 8 * *(unsigned int *)(v116 + 8);
      }
      else
      {
        v117 = 0;
      }
      while (2)
      {
        if (v115 == (uint64_t *)v117)
          return 1;
        if ((sub_22ED4C71C((uint64_t)a1, *v115) & 1) != 0)
        {
          ++v115;
          continue;
        }
        break;
      }
      return 0;
    case 28:
      result = sub_22ED4CCB8((uint64_t)a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22ED47864(a1);
      if (!(_DWORD)result)
        return result;
      if ((v390 = *(_DWORD *)v4 & 0x7F, v390 <= 0x39) && ((1 << v390) & 0x3F0003E01011066) != 0
        || v390 - 70 <= 0xD && ((1 << (v390 - 70)) & 0x2803) != 0
        || v390 - 19 <= 4)
      {
        v391 = sub_22EFCAE04(a2);
      }
      else
      {
        v391 = 0;
      }
      result = sub_22ED4C680((uint64_t)a1, v391);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v393 = *v392;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v395 = *(_QWORD *)v394 + 8 * *(unsigned int *)(v394 + 8);
      }
      else
      {
        v395 = 0;
      }
      while (2)
      {
        if (v393 == (uint64_t *)v395)
          return 1;
        if ((sub_22ED4C71C((uint64_t)a1, *v393) & 1) != 0)
        {
          ++v393;
          continue;
        }
        break;
      }
      return 0;
    case 29:
      result = sub_22ED4CCB8((uint64_t)a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22ED47864(a1);
      if (!(_DWORD)result)
        return result;
      if ((v396 = *(_DWORD *)v4 & 0x7F, v396 <= 0x39) && ((1 << v396) & 0x3F0003E01011066) != 0
        || v396 - 70 <= 0xD && ((1 << (v396 - 70)) & 0x2803) != 0
        || v396 - 19 <= 4)
      {
        v397 = sub_22EFCAE04(a2);
      }
      else
      {
        v397 = 0;
      }
      result = sub_22ED4C680((uint64_t)a1, v397);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v399 = *v398;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v401 = *(_QWORD *)v400 + 8 * *(unsigned int *)(v400 + 8);
      }
      else
      {
        v401 = 0;
      }
      while (2)
      {
        if (v399 == (uint64_t *)v401)
          return 1;
        if ((sub_22ED4C71C((uint64_t)a1, *v399) & 1) != 0)
        {
          ++v399;
          continue;
        }
        break;
      }
      return 0;
    case 30:
      result = sub_22ED47864(a1);
      if (!(_DWORD)result)
        return result;
      result = sub_22ED4CCB8((uint64_t)a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      if ((v338 = *(_DWORD *)v4 & 0x7F, v338 <= 0x39) && ((1 << v338) & 0x3F0003E01011066) != 0
        || v338 - 70 <= 0xD && ((1 << (v338 - 70)) & 0x2803) != 0
        || v338 - 19 <= 4)
      {
        v339 = sub_22EFCAE04(a2);
      }
      else
      {
        v339 = 0;
      }
      result = sub_22ED4C680((uint64_t)a1, v339);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v341 = *v340;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v343 = *(_QWORD *)v342 + 8 * *(unsigned int *)(v342 + 8);
      }
      else
      {
        v343 = 0;
      }
      while (2)
      {
        if (v341 == (uint64_t *)v343)
          return 1;
        if ((sub_22ED4C71C((uint64_t)a1, *v341) & 1) != 0)
        {
          ++v341;
          continue;
        }
        break;
      }
      return 0;
    case 31:
      result = sub_22ED4CCB8((uint64_t)a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22ED47864(a1);
      if (!(_DWORD)result)
        return result;
      if ((v257 = *(_DWORD *)v4 & 0x7F, v257 <= 0x39) && ((1 << v257) & 0x3F0003E01011066) != 0
        || v257 - 70 <= 0xD && ((1 << (v257 - 70)) & 0x2803) != 0
        || v257 - 19 <= 4)
      {
        v258 = sub_22EFCAE04(a2);
      }
      else
      {
        v258 = 0;
      }
      result = sub_22ED4C680((uint64_t)a1, v258);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v260 = *v259;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v262 = *(_QWORD *)v261 + 8 * *(unsigned int *)(v261 + 8);
      }
      else
      {
        v262 = 0;
      }
      while (2)
      {
        if (v260 == (uint64_t *)v262)
          return 1;
        if ((sub_22ED4C71C((uint64_t)a1, *v260) & 1) != 0)
        {
          ++v260;
          continue;
        }
        break;
      }
      return 0;
    case 32:
      result = sub_22ED47864(a1);
      if (!(_DWORD)result)
        return result;
      if (*(_QWORD *)(a2 + 72) >= 8uLL && (*(_QWORD *)(a2 + 72) & 6) != 2)
      {
        v544 = sub_22F259350(a2);
        result = sub_22ED4C2D0((uint64_t)a1, (uint64_t)v544);
        if (!(_DWORD)result)
          return result;
      }
      result = sub_22ED4CCB8((uint64_t)a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      if ((v344 = *(_DWORD *)v4 & 0x7F, v344 <= 0x39) && ((1 << v344) & 0x3F0003E01011066) != 0
        || v344 - 70 <= 0xD && ((1 << (v344 - 70)) & 0x2803) != 0
        || v344 - 19 <= 4)
      {
        v345 = sub_22EFCAE04(a2);
      }
      else
      {
        v345 = 0;
      }
      result = sub_22ED4C680((uint64_t)a1, v345);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v347 = *v346;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v349 = *(_QWORD *)v348 + 8 * *(unsigned int *)(v348 + 8);
      }
      else
      {
        v349 = 0;
      }
      if (v347 == (uint64_t *)v349)
        return 1;
      while ((sub_22ED4C71C((uint64_t)a1, *v347) & 1) != 0)
      {
        if (++v347 == (uint64_t *)v349)
          return 1;
      }
      return 0;
    case 33:
      v144 = *(_QWORD *)(a2 + 120);
      if ((v144 & 4) == 0)
        goto LABEL_252;
      v145 = 0;
      while (1)
      {
        v146 = v144 & 0xFFFFFFFFFFFFFFF8;
        if (v145 >= *(unsigned int *)(v146 + 16))
          break;
        sub_22ED4CCB8((uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v146 + 24) + 8 * v145++));
        v144 = *(_QWORD *)(a2 + 120);
        if ((v144 & 4) == 0)
        {
LABEL_252:
          v147 = 0;
          v148 = 0;
          goto LABEL_946;
        }
      }
      v147 = *(_QWORD *)v146;
      v148 = *(_QWORD *)(v146 + 8);
LABEL_946:
      result = sub_22ED4BA1C(a1, v147, v148);
      if (!(_DWORD)result)
        return result;
      v510 = *(_QWORD *)(a2 + 128);
      if ((v510 & 4) != 0 && (v510 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        result = sub_22ED4BB5C(a1, *(_QWORD *)(v510 & 0xFFFFFFFFFFFFFFF8), (v510 & 0xFFFFFFFFFFFFFFF8) + 8);
        if (!(_DWORD)result)
          return result;
      }
      result = sub_22ED4C680((uint64_t)a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v512 = *v511;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v514 = *(_QWORD *)v513 + 8 * *(unsigned int *)(v513 + 8);
      }
      else
      {
        v514 = 0;
      }
      if (v512 == (uint64_t *)v514)
        return 1;
      while ((sub_22ED4C71C((uint64_t)a1, *v512) & 1) != 0)
      {
        if (++v512 == (uint64_t *)v514)
          return 1;
      }
      return 0;
    case 34:
      result = sub_22ED4CD58(a1, a2);
      if (!(_DWORD)result)
        return result;
      result = sub_22ED4C680((uint64_t)a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v119 = *v118;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v121 = *(_QWORD *)v120 + 8 * *(unsigned int *)(v120 + 8);
      }
      else
      {
        v121 = 0;
      }
      if (v119 == (uint64_t *)v121)
        return 1;
      while ((sub_22ED4C71C((uint64_t)a1, *v119) & 1) != 0)
      {
        if (++v119 == (uint64_t *)v121)
          return 1;
      }
      return 0;
    case 35:
      result = sub_22ED4CDCC(a1, a2);
      if (!(_DWORD)result)
        return result;
      result = sub_22ED4C680((uint64_t)a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v101 = *v100;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v103 = *(_QWORD *)v102 + 8 * *(unsigned int *)(v102 + 8);
      }
      else
      {
        v103 = 0;
      }
      if (v101 == (uint64_t *)v103)
        return 1;
      while ((sub_22ED4C71C((uint64_t)a1, *v101) & 1) != 0)
      {
        if (++v101 == (uint64_t *)v103)
          return 1;
      }
      return 0;
    case 36:
      v104 = *(unint64_t ***)(a2 + 160);
      if (v104)
      {
        if (*v104)
        {
          result = sub_22ED4BB5C(a1, **v104, (uint64_t)(*v104 + 1));
          if (!(_DWORD)result)
            return result;
        }
      }
      v105 = *(_QWORD *)(a2 + 120);
      if ((v105 & 4) != 0)
      {
        v488 = (uint64_t *)(v105 & 0xFFFFFFFFFFFFFFF8);
        v106 = *v488;
        v107 = v488[1];
      }
      else
      {
        v106 = 0;
        v107 = 0;
      }
      result = sub_22ED4BA1C(a1, v106, v107);
      if (!(_DWORD)result)
        return result;
      if (sub_22EFD5760(a2) != 2)
        return 1;
      result = sub_22ED4C680((uint64_t)a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v490 = *v489;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v492 = *(_QWORD *)v491 + 8 * *(unsigned int *)(v491 + 8);
      }
      else
      {
        v492 = 0;
      }
      if (v490 == (uint64_t *)v492)
        return 1;
      while ((sub_22ED4C71C((uint64_t)a1, *v490) & 1) != 0)
      {
        if (++v490 == (uint64_t *)v492)
          return 1;
      }
      return 0;
    case 37:
      v63 = *(_QWORD *)(a2 + 184);
      if (!v63)
        goto LABEL_104;
      v64 = *(_DWORD *)(v63 + 12) & 0x1FFFFFFF;
      if (!(_DWORD)v64)
        goto LABEL_104;
      v65 = v63 + 16;
      v66 = 8 * v64;
      while ((sub_22ED47864(a1) & 1) != 0)
      {
        v65 += 8;
        v66 -= 8;
        if (!v66)
        {
LABEL_104:
          v67 = *(_QWORD *)(a2 + 192);
          v68 = *(unsigned int *)(v67 + 8);
          if ((_DWORD)v68)
          {
            v69 = v67 + 16;
            while ((sub_22ED4C2D0((uint64_t)a1, v69) & 1) != 0)
            {
              v69 += 32;
              if (!--v68)
                goto LABEL_108;
            }
            return 0;
          }
LABEL_108:
          result = sub_22ED4CDCC(a1, a2);
          if (!(_DWORD)result)
            return result;
          result = sub_22ED4C680((uint64_t)a1, a2 + 64);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v71 = *v70;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v73 = *(_QWORD *)v72 + 8 * *(unsigned int *)(v72 + 8);
            }
            else
            {
              v73 = 0;
            }
            if (v71 != (uint64_t *)v73)
            {
              while ((sub_22ED4C71C((uint64_t)a1, *v71) & 1) != 0)
              {
                if (++v71 == (uint64_t *)v73)
                  return 1;
              }
              return 0;
            }
          }
          return 1;
        }
      }
      return 0;
    case 38:
      v402 = *(_QWORD *)(a2 + 48);
      if (v402)
      {
        result = sub_22ED352EC(a1, v402 & 0xFFFFFFFFFFFFFFF0);
        if (!(_DWORD)result)
          return result;
      }
      result = sub_22ED4B6EC(a1, a2);
      if (!(_DWORD)result)
        return result;
      v403 = *(_QWORD *)(a2 + 72);
      if (v403 >= 8 && (*(_QWORD *)(a2 + 72) & 6) != 2)
      {
        v404 = (unint64_t *)(v403 & 0xFFFFFFFFFFFFFFF8);
        if ((*(_QWORD *)(a2 + 72) & 6) == 4 && v404)
          v404 = (unint64_t *)v404[1];
        result = sub_22ED4BB5C(a1, *v404, (uint64_t)(v404 + 1));
        if (!(_DWORD)result)
          return result;
      }
      if ((v405 = *(_DWORD *)v4 & 0x7F, v405 <= 0x39) && ((1 << v405) & 0x3F0003E01011066) != 0
        || v405 - 70 <= 0xD && ((1 << (v405 - 70)) & 0x2803) != 0
        || v405 - 19 <= 4)
      {
        v406 = sub_22EFCAE04(a2);
      }
      else
      {
        v406 = 0;
      }
      result = sub_22ED4C680((uint64_t)a1, v406);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v408 = *v407;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v410 = *(_QWORD *)v409 + 8 * *(unsigned int *)(v409 + 8);
      }
      else
      {
        v410 = 0;
      }
      if (v408 == (uint64_t *)v410)
        return 1;
      while ((sub_22ED4C71C((uint64_t)a1, *v408) & 1) != 0)
      {
        if (++v408 == (uint64_t *)v410)
          return 1;
      }
      return 0;
    case 39:
      return (sub_22ED4B84C(a1, a2) & 1) != 0;
    case 40:
      v176 = *(_QWORD *)(a2 + 80);
      v177 = (unint64_t *)(v176 & 0xFFFFFFFFFFFFFFF8);
      if ((v176 & 4) != 0)
        v177 = (unint64_t *)*v177;
      result = sub_22ED4BB5C(a1, *v177, (uint64_t)(v177 + 1));
      if (!(_DWORD)result)
        return result;
      if ((v178 = *(_DWORD *)v4 & 0x7F, v178 <= 0x39) && ((1 << v178) & 0x3F0003E01011066) != 0
        || v178 - 70 <= 0xD && ((1 << (v178 - 70)) & 0x2803) != 0
        || v178 - 19 <= 4)
      {
        v179 = sub_22EFCAE04(a2);
      }
      else
      {
        v179 = 0;
      }
      result = sub_22ED4C680((uint64_t)a1, v179);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v181 = *v180;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v183 = *(_QWORD *)v182 + 8 * *(unsigned int *)(v182 + 8);
      }
      else
      {
        v183 = 0;
      }
      if (v181 == (uint64_t *)v183)
        return 1;
      while ((sub_22ED4C71C((uint64_t)a1, *v181) & 1) != 0)
      {
        if (++v181 == (uint64_t *)v183)
          return 1;
      }
      return 0;
    case 41:
      v267 = *(_QWORD *)(a2 + 80);
      v268 = (unint64_t *)(v267 & 0xFFFFFFFFFFFFFFF8);
      if ((v267 & 4) != 0)
        v268 = (unint64_t *)*v268;
      result = sub_22ED4BB5C(a1, *v268, (uint64_t)(v268 + 1));
      if (!(_DWORD)result)
        return result;
      if ((v269 = *(_DWORD *)v4 & 0x7F, v269 <= 0x39) && ((1 << v269) & 0x3F0003E01011066) != 0
        || v269 - 70 <= 0xD && ((1 << (v269 - 70)) & 0x2803) != 0
        || v269 - 19 <= 4)
      {
        v270 = sub_22EFCAE04(a2);
      }
      else
      {
        v270 = 0;
      }
      result = sub_22ED4C680((uint64_t)a1, v270);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v272 = *v271;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v274 = *(_QWORD *)v273 + 8 * *(unsigned int *)(v273 + 8);
      }
      else
      {
        v274 = 0;
      }
      if (v272 == (uint64_t *)v274)
        return 1;
      while ((sub_22ED4C71C((uint64_t)a1, *v272) & 1) != 0)
      {
        if (++v272 == (uint64_t *)v274)
          return 1;
      }
      return 0;
    case 42:
      result = sub_22ED4BA1C(a1, *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80));
      if (!(_DWORD)result)
        return result;
      v373 = *(_DWORD *)v4 & 0x7F;
      v374 = v373 > 0x39 || ((1 << v373) & 0x3F0003E01011066) == 0;
      v375 = !v374 || v373 - 70 <= 0xD && ((1 << (v373 - 70)) & 0x2803) != 0 || v373 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22ED4C680((uint64_t)a1, v375);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v377 = *v376;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v379 = *(_QWORD *)v378 + 8 * *(unsigned int *)(v378 + 8);
      }
      else
      {
        v379 = 0;
      }
      if (v377 == (uint64_t *)v379)
        return 1;
      while ((sub_22ED4C71C((uint64_t)a1, *v377) & 1) != 0)
      {
        if (++v377 == (uint64_t *)v379)
          return 1;
      }
      return 0;
    case 43:
      result = sub_22ED4C680((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v41 = *v40;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v43 = *(_QWORD *)v42 + 8 * *(unsigned int *)(v42 + 8);
      }
      else
      {
        v43 = 0;
      }
      if (v41 == (uint64_t *)v43)
        return 1;
      while ((sub_22ED4C71C((uint64_t)a1, *v41) & 1) != 0)
      {
        if (++v41 == (uint64_t *)v43)
          return 1;
      }
      return 0;
    case 44:
      result = sub_22ED4BA1C(a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64));
      if (!(_DWORD)result)
        return result;
      v133 = *(_DWORD *)v4 & 0x7F;
      v134 = v133 > 0x39 || ((1 << v133) & 0x3F0003E01011066) == 0;
      v135 = !v134 || v133 - 70 <= 0xD && ((1 << (v133 - 70)) & 0x2803) != 0 || v133 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22ED4C680((uint64_t)a1, v135);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v137 = *v136;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v139 = *(_QWORD *)v138 + 8 * *(unsigned int *)(v138 + 8);
      }
      else
      {
        v139 = 0;
      }
      if (v137 == (uint64_t *)v139)
        return 1;
      while ((sub_22ED4C71C((uint64_t)a1, *v137) & 1) != 0)
      {
        if (++v137 == (uint64_t *)v139)
          return 1;
      }
      return 0;
    case 45:
      result = sub_22ED4C680((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v351 = *v350;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v353 = *(_QWORD *)v352 + 8 * *(unsigned int *)(v352 + 8);
      }
      else
      {
        v353 = 0;
      }
      if (v351 == (uint64_t *)v353)
        return 1;
      while ((sub_22ED4C71C((uint64_t)a1, *v351) & 1) != 0)
      {
        if (++v351 == (uint64_t *)v353)
          return 1;
      }
      return 0;
    case 46:
      result = sub_22ED4C680((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v435 = *v434;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v437 = *(_QWORD *)v436 + 8 * *(unsigned int *)(v436 + 8);
      }
      else
      {
        v437 = 0;
      }
      if (v435 == (uint64_t *)v437)
        return 1;
      while ((sub_22ED4C71C((uint64_t)a1, *v435) & 1) != 0)
      {
        if (++v435 == (uint64_t *)v437)
          return 1;
      }
      return 0;
    case 47:
      result = sub_22ED4C680((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v79 = *v78;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v81 = *(_QWORD *)v80 + 8 * *(unsigned int *)(v80 + 8);
      }
      else
      {
        v81 = 0;
      }
      if (v79 == (uint64_t *)v81)
        return 1;
      while ((sub_22ED4C71C((uint64_t)a1, *v79) & 1) != 0)
      {
        if (++v79 == (uint64_t *)v81)
          return 1;
      }
      return 0;
    case 48:
      result = sub_22ED4C680((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v150 = *v149;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v152 = *(_QWORD *)v151 + 8 * *(unsigned int *)(v151 + 8);
      }
      else
      {
        v152 = 0;
      }
      if (v150 == (uint64_t *)v152)
        return 1;
      while ((sub_22ED4C71C((uint64_t)a1, *v150) & 1) != 0)
      {
        if (++v150 == (uint64_t *)v152)
          return 1;
      }
      return 0;
    case 49:
      result = sub_22ED4CE44(a1, a2);
      if (!(_DWORD)result)
        return result;
      v171 = *(_QWORD *)(a2 + 72);
      if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      {
        v515 = v171 & 0xFFFFFFFFFFFFFFFCLL;
        v516 = *(_QWORD *)(a2 + 72) & 3;
        if ((_DWORD)v516 && (_DWORD)v516 != 3)
          v515 = *(_QWORD *)(v515 + 8);
        if ((sub_22ED3BF44(a1, v515, 0) & 1) == 0)
          return 0;
      }
      else if ((v171 & 3) != 0 && (v171 & 3) != 3)
      {
        result = sub_22ED3BF44(a1, v171 & 0xFFFFFFFFFFFFFFFCLL, 0);
        if (!(_DWORD)result)
          return result;
      }
      v517 = *(_DWORD *)v4 & 0x7F;
      if (v517 <= 0x39 && ((1 << v517) & 0x3F0003E01011066) != 0
        || v517 - 70 <= 0xD && ((1 << (v517 - 70)) & 0x2803) != 0
        || v517 - 19 <= 4)
      {
        v518 = sub_22EFCAE04(a2);
      }
      else
      {
        v518 = 0;
      }
      result = sub_22ED4C680((uint64_t)a1, v518);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v520 = *v519;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v522 = *(_QWORD *)v521 + 8 * *(unsigned int *)(v521 + 8);
        }
        else
        {
          v522 = 0;
        }
        for (; v520 != (uint64_t *)v522; ++v520)
        {
          if ((sub_22ED4C71C((uint64_t)a1, *v520) & 1) == 0)
            return 0;
        }
      }
      return 1;
    case 50:
      result = sub_22ED4CE44(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      {
        v33 = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_DWORD *)(a2 + 72) & 3) != 0 && (*(_DWORD *)(a2 + 72) & 3) != 3)
          v33 = *(_QWORD *)(v33 + 8);
        result = sub_22ED3BF44(a1, v33, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v34 = *(_DWORD *)v4 & 0x7F, v34 <= 0x39) && ((1 << v34) & 0x3F0003E01011066) != 0
        || (v34 - 70 <= 0xD ? (v542 = ((1 << (v34 - 70)) & 0x2803) == 0) : (v542 = 1), !v542 || v34 - 19 <= 4))
      {
        v35 = sub_22EFCAE04(a2);
      }
      else
      {
        v35 = 0;
      }
      result = sub_22ED4C680((uint64_t)a1, v35);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v37 = *v36;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v39 = *(_QWORD *)v38 + 8 * *(unsigned int *)(v38 + 8);
      }
      else
      {
        v39 = 0;
      }
      if (v37 == (uint64_t *)v39)
        return 1;
      while ((sub_22ED4C71C((uint64_t)a1, *v37) & 1) != 0)
      {
        if (++v37 == (uint64_t *)v39)
          return 1;
      }
      return 0;
    case 51:
      result = sub_22ED4CE44(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      {
        v450 = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_DWORD *)(a2 + 72) & 3) != 0 && (*(_DWORD *)(a2 + 72) & 3) != 3)
          v450 = *(_QWORD *)(v450 + 8);
        result = sub_22ED3BF44(a1, v450, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v451 = *(_DWORD *)v4 & 0x7F, v451 <= 0x39) && ((1 << v451) & 0x3F0003E01011066) != 0
        || (v451 - 70 <= 0xD ? (v543 = ((1 << (v451 - 70)) & 0x2803) == 0) : (v543 = 1), !v543 || v451 - 19 <= 4))
      {
        v452 = sub_22EFCAE04(a2);
      }
      else
      {
        v452 = 0;
      }
      result = sub_22ED4C680((uint64_t)a1, v452);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v454 = *v453;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v456 = *(_QWORD *)v455 + 8 * *(unsigned int *)(v455 + 8);
      }
      else
      {
        v456 = 0;
      }
      if (v454 == (uint64_t *)v456)
        return 1;
      while ((sub_22ED4C71C((uint64_t)a1, *v454) & 1) != 0)
      {
        if (++v454 == (uint64_t *)v456)
          return 1;
      }
      return 0;
    case 52:
      result = sub_22ED4CF10(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v431 = *v430;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v433 = *(_QWORD *)v432 + 8 * *(unsigned int *)(v432 + 8);
      }
      else
      {
        v433 = 0;
      }
      if (v431 == (uint64_t *)v433)
        return 1;
      while ((sub_22ED4C71C((uint64_t)a1, *v431) & 1) != 0)
      {
        if (++v431 == (uint64_t *)v433)
          return 1;
      }
      return 0;
    case 53:
      result = sub_22ED4CF10(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v75 = *v74;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v77 = *(_QWORD *)v76 + 8 * *(unsigned int *)(v76 + 8);
      }
      else
      {
        v77 = 0;
      }
      if (v75 == (uint64_t *)v77)
        return 1;
      while ((sub_22ED4C71C((uint64_t)a1, *v75) & 1) != 0)
      {
        if (++v75 == (uint64_t *)v77)
          return 1;
      }
      return 0;
    case 54:
      result = sub_22ED4CF10(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v419 = *v418;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v421 = *(_QWORD *)v420 + 8 * *(unsigned int *)(v420 + 8);
      }
      else
      {
        v421 = 0;
      }
      if (v419 == (uint64_t *)v421)
        return 1;
      while ((sub_22ED4C71C((uint64_t)a1, *v419) & 1) != 0)
      {
        if (++v419 == (uint64_t *)v421)
          return 1;
      }
      return 0;
    case 55:
      result = sub_22ED4CF10(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v427 = *v426;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v429 = *(_QWORD *)v428 + 8 * *(unsigned int *)(v428 + 8);
      }
      else
      {
        v429 = 0;
      }
      if (v427 == (uint64_t *)v429)
        return 1;
      while ((sub_22ED4C71C((uint64_t)a1, *v427) & 1) != 0)
      {
        if (++v427 == (uint64_t *)v429)
          return 1;
      }
      return 0;
    case 56:
      result = sub_22ED4CF10(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v83 = *v82;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v85 = *(_QWORD *)v84 + 8 * *(unsigned int *)(v84 + 8);
      }
      else
      {
        v85 = 0;
      }
      if (v83 == (uint64_t *)v85)
        return 1;
      while ((sub_22ED4C71C((uint64_t)a1, *v83) & 1) != 0)
      {
        if (++v83 == (uint64_t *)v85)
          return 1;
      }
      return 0;
    case 57:
      result = sub_22ED4CF10(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v370 = *v369;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v372 = *(_QWORD *)v371 + 8 * *(unsigned int *)(v371 + 8);
      }
      else
      {
        v372 = 0;
      }
      if (v370 == (uint64_t *)v372)
        return 1;
      while ((sub_22ED4C71C((uint64_t)a1, *v370) & 1) != 0)
      {
        if (++v370 == (uint64_t *)v372)
          return 1;
      }
      return 0;
    case 58:
      result = sub_22ED4CE44(a1, a2);
      if (!(_DWORD)result)
        return result;
      v153 = *(_DWORD *)v4 & 0x7F;
      v154 = v153 > 0x39 || ((1 << v153) & 0x3F0003E01011066) == 0;
      v155 = !v154 || v153 - 70 <= 0xD && ((1 << (v153 - 70)) & 0x2803) != 0 || v153 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22ED4C680((uint64_t)a1, v155);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v157 = *v156;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v159 = *(_QWORD *)v158 + 8 * *(unsigned int *)(v158 + 8);
      }
      else
      {
        v159 = 0;
      }
      if (v157 == (uint64_t *)v159)
        return 1;
      while ((sub_22ED4C71C((uint64_t)a1, *v157) & 1) != 0)
      {
        if (++v157 == (uint64_t *)v159)
          return 1;
      }
      return 0;
    case 59:
      result = sub_22ED4CE44(a1, a2);
      if (!(_DWORD)result)
        return result;
      v380 = *(_QWORD *)(a2 + 72);
      if (v380 >= 4 && (*(_QWORD *)(a2 + 72) & 3) != 1)
      {
        v381 = v380 & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_QWORD *)(a2 + 72) & 3) == 2 && v381)
          v381 = *(_QWORD *)(v381 + 8);
        result = sub_22ED3BF44(a1, v381, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v382 = *(_DWORD *)v4 & 0x7F, v382 <= 0x39) && ((1 << v382) & 0x3F0003E01011066) != 0
        || v382 - 70 <= 0xD && ((1 << (v382 - 70)) & 0x2803) != 0
        || v382 - 19 <= 4)
      {
        v383 = sub_22EFCAE04(a2);
      }
      else
      {
        v383 = 0;
      }
      result = sub_22ED4C680((uint64_t)a1, v383);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v385 = *v384;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v387 = *(_QWORD *)v386 + 8 * *(unsigned int *)(v386 + 8);
      }
      else
      {
        v387 = 0;
      }
      if (v385 == (uint64_t *)v387)
        return 1;
      while ((sub_22ED4C71C((uint64_t)a1, *v385) & 1) != 0)
      {
        if (++v385 == (uint64_t *)v387)
          return 1;
      }
      return 0;
    case 60:
      result = sub_22ED4D2D4(a1, a2);
      if (!(_DWORD)result)
        return result;
      v184 = *(_DWORD *)v4 & 0x7F;
      v185 = v184 > 0x39 || ((1 << v184) & 0x3F0003E01011066) == 0;
      v186 = !v185 || v184 - 70 <= 0xD && ((1 << (v184 - 70)) & 0x2803) != 0 || v184 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22ED4C680((uint64_t)a1, v186);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v188 = *v187;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v190 = *(_QWORD *)v189 + 8 * *(unsigned int *)(v189 + 8);
      }
      else
      {
        v190 = 0;
      }
      if (v188 == (uint64_t *)v190)
        return 1;
      while ((sub_22ED4C71C((uint64_t)a1, *v188) & 1) != 0)
      {
        if (++v188 == (uint64_t *)v190)
          return 1;
      }
      return 0;
    case 61:
      result = sub_22ED4D2D4(a1, a2);
      if (!(_DWORD)result)
        return result;
      v287 = *(unsigned int *)(a2 + 100);
      if (!(_DWORD)v287)
        goto LABEL_514;
      v288 = a2 + 104;
      v289 = 8 * v287;
      while ((sub_22ED47864(a1) & 1) != 0)
      {
        v288 += 8;
        v289 -= 8;
        if (!v289)
        {
LABEL_514:
          v290 = *(_DWORD *)v4 & 0x7F;
          v291 = v290 > 0x39 || ((1 << v290) & 0x3F0003E01011066) == 0;
          if (v291
            && (v290 - 70 <= 0xD ? (v545 = ((1 << (v290 - 70)) & 0x2803) == 0) : (v545 = 1), v545 && v290 - 19 > 4))
          {
            v292 = 0;
          }
          else
          {
            v292 = sub_22EFCAE04(a2);
          }
          result = sub_22ED4C680((uint64_t)a1, v292);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) == 0)
            return 1;
          sub_22EFC8E88(a2);
          v294 = *v293;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v296 = *(_QWORD *)v295 + 8 * *(unsigned int *)(v295 + 8);
          }
          else
          {
            v296 = 0;
          }
          if (v294 == (uint64_t *)v296)
            return 1;
          while ((sub_22ED4C71C((uint64_t)a1, *v294) & 1) != 0)
          {
            if (++v294 == (uint64_t *)v296)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 62:
      result = sub_22ED4D2D4(a1, a2);
      if (!(_DWORD)result)
        return result;
      v305 = *(_DWORD *)v4 & 0x7F;
      v306 = v305 > 0x39 || ((1 << v305) & 0x3F0003E01011066) == 0;
      v307 = !v306 || v305 - 70 <= 0xD && ((1 << (v305 - 70)) & 0x2803) != 0 || v305 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22ED4C680((uint64_t)a1, v307);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v309 = *v308;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v311 = *(_QWORD *)v310 + 8 * *(unsigned int *)(v310 + 8);
      }
      else
      {
        v311 = 0;
      }
      if (v309 == (uint64_t *)v311)
        return 1;
      while ((sub_22ED4C71C((uint64_t)a1, *v309) & 1) != 0)
      {
        if (++v309 == (uint64_t *)v311)
          return 1;
      }
      return 0;
    case 63:
      result = sub_22ED4D2D4(a1, a2);
      if (!(_DWORD)result)
        return result;
      v224 = *(_DWORD *)v4 & 0x7F;
      v225 = v224 > 0x39 || ((1 << v224) & 0x3F0003E01011066) == 0;
      v226 = !v225 || v224 - 70 <= 0xD && ((1 << (v224 - 70)) & 0x2803) != 0 || v224 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22ED4C680((uint64_t)a1, v226);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v228 = *v227;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v230 = *(_QWORD *)v229 + 8 * *(unsigned int *)(v229 + 8);
      }
      else
      {
        v230 = 0;
      }
      if (v228 == (uint64_t *)v230)
        return 1;
      while ((sub_22ED4C71C((uint64_t)a1, *v228) & 1) != 0)
      {
        if (++v228 == (uint64_t *)v230)
          return 1;
      }
      return 0;
    case 64:
      result = sub_22ED4D2D4(a1, a2);
      if (!(_DWORD)result)
        return result;
      v191 = *(_DWORD *)(a2 + 96) & 0x600;
      if (v191 != 1024)
        goto LABEL_343;
      result = sub_22ED3BF44(a1, *(_QWORD *)(a2 + 88) & 0xFFFFFFFFFFFFFFF8, 0);
      if (!(_DWORD)result)
        return result;
      v191 = *(_DWORD *)(a2 + 96) & 0x600;
LABEL_343:
      if (v191 != 1024 && v191 != 512 && *(_QWORD *)(a2 + 88) >= 8uLL)
      {
        v192 = sub_22EFBC5B4(a2);
        v193 = v192;
        if (v192 && (*(_BYTE *)v192 & 0xFE) == 0xAC)
          v193 = *(_QWORD *)(v192 + 16);
        result = sub_22ED3BF44(a1, v193, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v194 = *(_DWORD *)v4 & 0x7F, v194 <= 0x39) && ((1 << v194) & 0x3F0003E01011066) != 0
        || v194 - 70 <= 0xD && ((1 << (v194 - 70)) & 0x2803) != 0
        || v194 - 19 <= 4)
      {
        v195 = sub_22EFCAE04(a2);
      }
      else
      {
        v195 = 0;
      }
      result = sub_22ED4C680((uint64_t)a1, v195);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v197 = *v196;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v199 = *(_QWORD *)v198 + 8 * *(unsigned int *)(v198 + 8);
      }
      else
      {
        v199 = 0;
      }
      if (v197 == (uint64_t *)v199)
        return 1;
      while ((sub_22ED4C71C((uint64_t)a1, *v197) & 1) != 0)
      {
        if (++v197 == (uint64_t *)v199)
          return 1;
      }
      return 0;
    case 65:
      v301 = *(unint64_t ***)(a2 + 120);
      if (v301)
      {
        if (*v301)
        {
          result = sub_22ED4BB5C(a1, **v301, (uint64_t)(*v301 + 1));
          if (!(_DWORD)result)
            return result;
        }
      }
      v302 = *(_QWORD *)(a2 + 56);
      if ((v302 & 4) != 0)
      {
        v493 = (uint64_t *)(v302 & 0xFFFFFFFFFFFFFFF8);
        v303 = *v493;
        v304 = v493[1];
      }
      else
      {
        v303 = 0;
        v304 = 0;
      }
      result = sub_22ED4BA1C(a1, v303, v304);
      if (!(_DWORD)result)
        return result;
      if (sub_22EFBC2B0(a2) != 2)
        return 1;
      v494 = *(_DWORD *)v4 & 0x7F;
      if (v494 <= 0x39 && ((1 << v494) & 0x3F0003E01011066) != 0
        || v494 - 70 <= 0xD && ((1 << (v494 - 70)) & 0x2803) != 0
        || v494 - 19 <= 4)
      {
        v495 = sub_22EFCAE04(a2);
      }
      else
      {
        v495 = 0;
      }
      result = sub_22ED4C680((uint64_t)a1, v495);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v497 = *v496;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v499 = *(_QWORD *)v498 + 8 * *(unsigned int *)(v498 + 8);
      }
      else
      {
        v499 = 0;
      }
      if (v497 == (uint64_t *)v499)
        return 1;
      while ((sub_22ED4C71C((uint64_t)a1, *v497) & 1) != 0)
      {
        if (++v497 == (uint64_t *)v499)
          return 1;
      }
      return 0;
    case 66:
      v44 = *(_QWORD *)(a2 + 424);
      if (!v44)
        goto LABEL_68;
      v45 = *(_DWORD *)(v44 + 12) & 0x1FFFFFFF;
      if (!(_DWORD)v45)
        goto LABEL_68;
      v46 = v44 + 16;
      v47 = 8 * v45;
      while ((sub_22ED47864(a1) & 1) != 0)
      {
        v46 += 8;
        v47 -= 8;
        if (!v47)
        {
LABEL_68:
          v48 = *(_QWORD *)(a2 + 432);
          v49 = *(unsigned int *)(v48 + 8);
          if ((_DWORD)v49)
          {
            v50 = v48 + 16;
            while ((sub_22ED4C2D0((uint64_t)a1, v50) & 1) != 0)
            {
              v50 += 32;
              if (!--v49)
                goto LABEL_72;
            }
          }
          else
          {
LABEL_72:
            result = sub_22ED4D2D4(a1, a2);
            if (!(_DWORD)result)
              return result;
            v51 = *(_DWORD *)v4 & 0x7F;
            v52 = v51 > 0x39 || ((1 << v51) & 0x3F0003E01011066) == 0;
            if (v52
              && (v51 - 70 <= 0xD ? (v546 = ((1 << (v51 - 70)) & 0x2803) == 0) : (v546 = 1), v546 && v51 - 19 > 4))
            {
              v53 = 0;
            }
            else
            {
              v53 = sub_22EFCAE04(a2);
            }
            result = sub_22ED4C680((uint64_t)a1, v53);
            if (!(_DWORD)result)
              return result;
            if ((*(_BYTE *)(v4 + 1) & 1) == 0)
              return 1;
            sub_22EFC8E88(a2);
            v55 = *v54;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v57 = *(_QWORD *)v56 + 8 * *(unsigned int *)(v56 + 8);
            }
            else
            {
              v57 = 0;
            }
            if (v55 == (uint64_t *)v57)
              return 1;
            while ((sub_22ED4C71C((uint64_t)a1, *v55) & 1) != 0)
            {
              if (++v55 == (uint64_t *)v57)
                return 1;
            }
          }
          return 0;
        }
      }
      return 0;
    case 67:
      result = sub_22ED3BF44(a1, *(_QWORD *)(a2 + 56), 0);
      if (!(_DWORD)result)
        return result;
      v126 = *(_DWORD *)v4 & 0x7F;
      v127 = v126 > 0x39 || ((1 << v126) & 0x3F0003E01011066) == 0;
      v128 = !v127 || v126 - 70 <= 0xD && ((1 << (v126 - 70)) & 0x2803) != 0 || v126 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22ED4C680((uint64_t)a1, v128);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v130 = *v129;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v132 = *(_QWORD *)v131 + 8 * *(unsigned int *)(v131 + 8);
      }
      else
      {
        v132 = 0;
      }
      if (v130 == (uint64_t *)v132)
        return 1;
      while ((sub_22ED4C71C((uint64_t)a1, *v130) & 1) != 0)
      {
        if (++v130 == (uint64_t *)v132)
          return 1;
      }
      return 0;
    case 68:
      result = sub_22ED4C680((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v462 = *v461;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v464 = *(_QWORD *)v463 + 8 * *(unsigned int *)(v463 + 8);
      }
      else
      {
        v464 = 0;
      }
      if (v462 == (uint64_t *)v464)
        return 1;
      while ((sub_22ED4C71C((uint64_t)a1, *v462) & 1) != 0)
      {
        if (++v462 == (uint64_t *)v464)
          return 1;
      }
      return 0;
    case 69:
      result = sub_22ED4C680((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v109 = *v108;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v111 = *(_QWORD *)v110 + 8 * *(unsigned int *)(v110 + 8);
      }
      else
      {
        v111 = 0;
      }
      if (v109 == (uint64_t *)v111)
        return 1;
      while ((sub_22ED4C71C((uint64_t)a1, *v109) & 1) != 0)
      {
        if (++v109 == (uint64_t *)v111)
          return 1;
      }
      return 0;
    case 70:
      v21 = *(_DWORD **)(a2 + 56);
      v24 = *v21;
      v23 = (uint64_t *)(v21 + 4);
      v22 = v24;
      if (!v24)
        return (sub_22ED352EC(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
      v25 = 8 * v22;
      while ((sub_22ED4D334(a1, *v23) & 1) != 0)
      {
        ++v23;
        v25 -= 8;
        if (!v25)
          return (sub_22ED352EC(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
      }
      return 0;
    case 71:
      result = sub_22ED3BF44(a1, *(_QWORD *)(a2 + 88), 0);
      if ((_DWORD)result)
      {
        v62 = *(_QWORD *)(a2 + 96);
        if (!v62)
          return (sub_22ED352EC(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
        result = sub_22ED3BF44(a1, v62, 0);
        if ((_DWORD)result)
          return (sub_22ED352EC(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
      }
      return result;
    case 72:
      result = sub_22ED4C680((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v423 = *v422;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v425 = *(_QWORD *)v424 + 8 * *(unsigned int *)(v424 + 8);
      }
      else
      {
        v425 = 0;
      }
      if (v423 == (uint64_t *)v425)
        return 1;
      while ((sub_22ED4C71C((uint64_t)a1, *v423) & 1) != 0)
      {
        if (++v423 == (uint64_t *)v425)
          return 1;
      }
      return 0;
    case 73:
      result = sub_22ED4C680((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v439 = *v438;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v441 = *(_QWORD *)v440 + 8 * *(unsigned int *)(v440 + 8);
      }
      else
      {
        v441 = 0;
      }
      if (v439 == (uint64_t *)v441)
        return 1;
      while ((sub_22ED4C71C((uint64_t)a1, *v439) & 1) != 0)
      {
        if (++v439 == (uint64_t *)v441)
          return 1;
      }
      return 0;
    case 74:
      if (!sub_22ED4BA1C(a1, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72)))
        return 0;
      v442 = *(_DWORD *)(a2 + 24);
      v443 = *(_QWORD *)(a2 + 80);
      v558 = *(_QWORD *)(a2 + 40);
      v559 = v442;
      v560 = v443;
      if (!sub_22ED4BAA4((uint64_t)a1, &v558))
        return 0;
      if ((v444 = *(_DWORD *)v4 & 0x7F, v444 <= 0x39) && ((1 << v444) & 0x3F0003E01011066) != 0
        || v444 - 70 <= 0xD && ((1 << (v444 - 70)) & 0x2803) != 0
        || v444 - 19 <= 4)
      {
        v445 = sub_22EFCAE04(a2);
      }
      else
      {
        v445 = 0;
      }
      if (!sub_22ED4C680((uint64_t)a1, v445))
        return 0;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v447 = *v446;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v449 = *(_QWORD *)v448 + 8 * *(unsigned int *)(v448 + 8);
      }
      else
      {
        v449 = 0;
      }
      while (2)
      {
        if (v447 == (uint64_t *)v449)
          return 1;
        if ((sub_22ED4C71C((uint64_t)a1, *v447) & 1) != 0)
        {
          ++v447;
          continue;
        }
        break;
      }
      return 0;
    case 75:
      v86 = *(unsigned int **)(a2 + 40);
      v87 = *v86;
      v88 = v86[1];
      if (!(_DWORD)v88)
        goto LABEL_146;
      v89 = &v86[2 * v87 + 4];
      v90 = 8 * v88;
      while ((sub_22ED3BF44(a1, *(_QWORD *)v89, 0) & 1) != 0)
      {
        v89 += 2;
        v90 -= 8;
        if (!v90)
        {
          v86 = *(unsigned int **)(a2 + 40);
          v87 = *v86;
LABEL_146:
          if ((_DWORD)v87)
          {
            v91 = (uint64_t *)(v86 + 4);
            v92 = 8 * v87;
            while ((sub_22ED4D334(a1, *v91) & 1) != 0)
            {
              ++v91;
              v92 -= 8;
              if (!v92)
                goto LABEL_150;
            }
          }
          else
          {
LABEL_150:
            v93 = *(_DWORD *)v4 & 0x7F;
            v94 = v93 > 0x39 || ((1 << v93) & 0x3F0003E01011066) == 0;
            if (v94
              && (v93 - 70 <= 0xD ? (v540 = ((1 << (v93 - 70)) & 0x2803) == 0) : (v540 = 1), v540 && v93 - 19 > 4))
            {
              v95 = 0;
            }
            else
            {
              v95 = sub_22EFCAE04(a2);
            }
            result = sub_22ED4C680((uint64_t)a1, v95);
            if (!(_DWORD)result)
              return result;
            if ((*(_BYTE *)(v4 + 1) & 1) == 0)
              return 1;
            sub_22EFC8E88(a2);
            v97 = *v96;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v99 = *(_QWORD *)v98 + 8 * *(unsigned int *)(v98 + 8);
            }
            else
            {
              v99 = 0;
            }
            if (v97 == (uint64_t *)v99)
              return 1;
            while ((sub_22ED4C71C((uint64_t)a1, *v97) & 1) != 0)
            {
              if (++v97 == (uint64_t *)v99)
                return 1;
            }
          }
          return 0;
        }
      }
      return 0;
    case 76:
      v275 = *(_DWORD **)(a2 + 40);
      v278 = *v275;
      v277 = (uint64_t *)(v275 + 4);
      v276 = v278;
      if (!v278)
        goto LABEL_1013;
      v279 = 8 * v276;
      while ((sub_22ED4D334(a1, *v277) & 1) != 0)
      {
        ++v277;
        v279 -= 8;
        if (!v279)
        {
          v280 = *(_DWORD *)v4 & 0x7F;
          v281 = v280 > 0x39 || ((1 << v280) & 0x3F0003E01011066) == 0;
          if (v281
            && (v280 - 70 <= 0xD ? (v539 = ((1 << (v280 - 70)) & 0x2803) == 0) : (v539 = 1), v539 && v280 - 19 > 4))
          {
LABEL_1013:
            v282 = 0;
          }
          else
          {
            v282 = sub_22EFCAE04(a2);
          }
          result = sub_22ED4C680((uint64_t)a1, v282);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) == 0)
            return 1;
          sub_22EFC8E88(a2);
          v549 = *v548;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v551 = *(_QWORD *)v550 + 8 * *(unsigned int *)(v550 + 8);
          }
          else
          {
            v551 = 0;
          }
          if (v549 == (uint64_t *)v551)
            return 1;
          while ((sub_22ED4C71C((uint64_t)a1, *v549) & 1) != 0)
          {
            if (++v549 == (uint64_t *)v551)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 77:
      v26 = *(unsigned int **)(a2 + 40);
      v27 = v26[1];
      if (!(_DWORD)v27)
        goto LABEL_998;
      v28 = &v26[2 * *v26 + 4];
      v29 = 8 * v27;
      while ((sub_22ED3BF44(a1, *(_QWORD *)v28, 0) & 1) != 0)
      {
        v28 += 2;
        v29 -= 8;
        if (!v29)
        {
          v30 = *(_DWORD *)v4 & 0x7F;
          v31 = v30 > 0x39 || ((1 << v30) & 0x3F0003E01011066) == 0;
          if (v31 && (v30 - 70 <= 0xD ? (v534 = ((1 << (v30 - 70)) & 0x2803) == 0) : (v534 = 1), v534 && v30 - 19 > 4))
LABEL_998:
            v32 = 0;
          else
            v32 = sub_22EFCAE04(a2);
          result = sub_22ED4C680((uint64_t)a1, v32);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) == 0)
            return 1;
          sub_22EFC8E88(a2);
          v536 = *v535;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v538 = *(_QWORD *)v537 + 8 * *(unsigned int *)(v537 + 8);
          }
          else
          {
            v538 = 0;
          }
          if (v536 == (uint64_t *)v538)
            return 1;
          while ((sub_22ED4C71C((uint64_t)a1, *v536) & 1) != 0)
          {
            if (++v536 == (uint64_t *)v538)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 78:
      result = sub_22ED4C680((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v458 = *v457;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v460 = *(_QWORD *)v459 + 8 * *(unsigned int *)(v459 + 8);
      }
      else
      {
        v460 = 0;
      }
      if (v458 == (uint64_t *)v460)
        return 1;
      while ((sub_22ED4C71C((uint64_t)a1, *v458) & 1) != 0)
      {
        if (++v458 == (uint64_t *)v460)
          return 1;
      }
      return 0;
    case 79:
      result = sub_22ED4C680((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v18 = *v17;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v20 = *(_QWORD *)v19 + 8 * *(unsigned int *)(v19 + 8);
      }
      else
      {
        v20 = 0;
      }
      if (v18 == (uint64_t *)v20)
        return 1;
      while ((sub_22ED4C71C((uint64_t)a1, *v18) & 1) != 0)
      {
        if (++v18 == (uint64_t *)v20)
          return 1;
      }
      return 0;
    case 80:
      result = sub_22ED4C680((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v59 = *v58;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v61 = *(_QWORD *)v60 + 8 * *(unsigned int *)(v60 + 8);
      }
      else
      {
        v61 = 0;
      }
      if (v59 == (uint64_t *)v61)
        return 1;
      while ((sub_22ED4C71C((uint64_t)a1, *v59) & 1) != 0)
      {
        if (++v59 == (uint64_t *)v61)
          return 1;
      }
      return 0;
    case 81:
      v166 = sub_22EFCAE04(a2);
      result = sub_22ED4C680((uint64_t)a1, v166);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v168 = *v167;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v170 = *(_QWORD *)v169 + 8 * *(unsigned int *)(v169 + 8);
      }
      else
      {
        v170 = 0;
      }
      if (v168 == (uint64_t *)v170)
        return 1;
      while ((sub_22ED4C71C((uint64_t)a1, *v168) & 1) != 0)
      {
        if (++v168 == (uint64_t *)v170)
          return 1;
      }
      return 0;
    case 82:
      result = sub_22ED3BF44(a1, *(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFFCLL, 0);
      if (!(_DWORD)result)
        return result;
      result = sub_22ED3BF44(a1, *(_QWORD *)(a2 + 48), 0);
      if (!(_DWORD)result)
        return result;
      if ((v160 = *(_DWORD *)v4 & 0x7F, v160 <= 0x39) && ((1 << v160) & 0x3F0003E01011066) != 0
        || v160 - 70 <= 0xD && ((1 << (v160 - 70)) & 0x2803) != 0
        || v160 - 19 <= 4)
      {
        v161 = sub_22EFCAE04(a2);
      }
      else
      {
        v161 = 0;
      }
      result = sub_22ED4C680((uint64_t)a1, v161);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v163 = *v162;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v165 = *(_QWORD *)v164 + 8 * *(unsigned int *)(v164 + 8);
      }
      else
      {
        v165 = 0;
      }
      if (v163 == (uint64_t *)v165)
        return 1;
      break;
    case 83:
      v11 = *(_QWORD *)(a2 + 88);
      v12 = *(_BYTE **)(v11 + 19016);
      v13 = *(_BYTE **)(v11 + 19024);
      v14 = v13 - v12;
      if (v13 == v12)
      {
        v15 = 0;
        v16 = 0;
      }
      else
      {
        if (v14 < 0)
          abort();
        v15 = (char *)operator new(v13 - v12);
        memmove(v15, v12, v14);
        v16 = &v15[8 * (v14 >> 3)];
      }
      if (v16 - v15 == 8 && (*(_DWORD *)(*(_QWORD *)v15 + 28) & 0x7F) == 0x53)
      {
        operator delete(v15);
        result = sub_22ED4C680((uint64_t)a1, a2 + 40);
        if (!(_DWORD)result)
          return result;
      }
      else
      {
        if (v15 != v16)
        {
          v500 = v15;
          do
          {
            if ((*(_DWORD *)(*(_QWORD *)v500 + 28) & 0x7Fu) - 1 >= 2
              && ((*(_DWORD *)(*(_QWORD *)v500 + 28) & 0x7Fu) - 35 > 2
               || (v501 = *(_QWORD *)(*(_QWORD *)v500 + 128)) == 0
               || ((*(unsigned __int16 *)(v501 + 8) | (*(unsigned __int8 *)(v501 + 10) << 16)) & 0x100000) == 0)
              && !sub_22ED47864(a1))
            {
              if (v15)
                operator delete(v15);
              return 0;
            }
            v500 += 8;
          }
          while (v500 != v16);
        }
        if (v15)
          operator delete(v15);
      }
      if ((*(_BYTE *)(v4 + 1) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v503 = *v502;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v505 = *(_QWORD *)v504 + 8 * *(unsigned int *)(v504 + 8);
        }
        else
        {
          v505 = 0;
        }
        for (; v503 != (uint64_t *)v505; ++v503)
        {
          if ((sub_22ED4C71C((uint64_t)a1, *v503) & 1) == 0)
            return 0;
        }
      }
      return 1;
    default:
      return 1;
  }
  while ((sub_22ED4C71C((uint64_t)a1, *v163) & 1) != 0)
  {
    if (++v163 == (uint64_t *)v165)
      return 1;
  }
  return 0;
}

uint64_t sub_22ED4B6EC(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  if ((*(_BYTE *)(a2 + 60) & 4) != 0)
  {
    if (*(_QWORD *)(a2 + 152))
    {
      if ((sub_22ED3BF44(a1, *(_QWORD *)(a2 + 152), 0) & 1) == 0)
        return 0;
    }
    else
    {
      result = sub_22ED4B97C(a1, a2 + 80);
      if (!(_DWORD)result)
        return result;
    }
  }
  return 1;
}

uint64_t sub_22ED4B734(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;

  result = sub_22ED3BF44(a1, *(_QWORD *)(a2 + 40), 0);
  if ((_DWORD)result)
  {
    v5 = *(_DWORD *)(a2 + 28) & 0x7F;
    v6 = v5 > 0x39 || ((1 << v5) & 0x3F0003E01011066) == 0;
    if (v6 && (v5 - 70 <= 0xD ? (v8 = ((1 << (v5 - 70)) & 0x2803) == 0) : (v8 = 1), v8 && v5 - 19 > 4))
      v7 = 0;
    else
      v7 = sub_22EFCAE04(a2);
    result = sub_22ED4C680(a1, v7);
    if ((_DWORD)result)
    {
      if ((*(_BYTE *)(a2 + 29) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v10 = *v9;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v12 = *(_QWORD *)v11 + 8 * *(unsigned int *)(v11 + 8);
      }
      else
      {
        v12 = 0;
      }
      if (v10 == v12)
      {
        return 1;
      }
      else
      {
        v13 = v10 + 8;
        do
        {
          result = sub_22ED4C71C(a1, *(_QWORD *)(v13 - 8));
          if ((_DWORD)result)
            v14 = v13 == v12;
          else
            v14 = 1;
          v13 += 8;
        }
        while (!v14);
      }
    }
  }
  return result;
}

uint64_t sub_22ED4B84C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  uint64_t result;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  if (!*(_DWORD *)(a2 + 96))
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 80);
  v5 = (unint64_t *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 4) != 0)
    v5 = (unint64_t *)*v5;
  result = sub_22ED4BB5C(a1, *v5, (uint64_t)(v5 + 1));
  if ((_DWORD)result)
  {
LABEL_5:
    v7 = *(_DWORD *)(a2 + 28) & 0x7F;
    v8 = v7 > 0x39 || ((1 << v7) & 0x3F0003E01011066) == 0;
    if (v8 && (v7 - 70 <= 0xD ? (v10 = ((1 << (v7 - 70)) & 0x2803) == 0) : (v10 = 1), v10 && v7 - 19 > 4))
      v9 = 0;
    else
      v9 = sub_22EFCAE04(a2);
    result = sub_22ED4C680((uint64_t)a1, v9);
    if ((_DWORD)result)
    {
      if ((*(_BYTE *)(a2 + 29) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v12 = *v11;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v14 = *(_QWORD *)v13 + 8 * *(unsigned int *)(v13 + 8);
      }
      else
      {
        v14 = 0;
      }
      if (v12 == v14)
      {
        return 1;
      }
      else
      {
        v15 = v12 + 8;
        do
        {
          result = sub_22ED4C71C((uint64_t)a1, *(_QWORD *)(v15 - 8));
          if ((_DWORD)result)
            v16 = v15 == v14;
          else
            v16 = 1;
          v15 += 8;
        }
        while (!v16);
      }
    }
  }
  return result;
}

uint64_t sub_22ED4B97C(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v10;
  __int128 v11;
  uint64_t v12;

  result = sub_22ED4BA1C(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
  {
    v11 = *(_OWORD *)(a2 + 24);
    v12 = *(_QWORD *)(a2 + 40);
    result = sub_22ED4BAA4((uint64_t)a1, (uint64_t *)&v11);
    if ((_DWORD)result)
    {
      v5 = *(_QWORD *)(a2 + 64);
      if (v5 && (v6 = *(unsigned int *)(v5 + 8), (_DWORD)v6))
      {
        v7 = v5 + 16;
        v8 = v6 - 1;
        do
        {
          result = sub_22ED4C2D0((uint64_t)a1, v7);
          v10 = v8-- != 0;
          if (!(_DWORD)result)
            break;
          v7 += 32;
        }
        while (v10);
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_22ED4BA1C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = a2;
  v9[1] = a3;
  if (!a2)
    return 1;
  v5 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v5 || (result = sub_22ED4BA1C(a1, v5, a3), (_DWORD)result))
  {
    if (*(_QWORD *)(a2 + 16) && (*(_BYTE *)(a2 + 8) & 4) != 0)
    {
      v7 = sub_22F0AB4E0((uint64_t)v9);
      return sub_22ED4BB5C(a1, v7, v8);
    }
    return 1;
  }
  return result;
}

uint64_t sub_22ED4BAA4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t result;
  unint64_t v8;
  int v9;
  unint64_t v10;

  v2 = *a2;
  v3 = *a2 & 7;
  v4 = v3;
  if ((_DWORD)v3 == 7)
  {
    v5 = *(_DWORD *)(v2 & 0xFFFFFFFFFFFFFFF8);
    if (v5 >= 3)
      v5 = 3;
    v4 = v5 | 8;
  }
  if ((v4 - 3) < 3)
  {
    if ((v3 - 3) <= 2)
    {
      v6 = (_QWORD *)a2[2];
      if (v6)
      {
        if ((sub_22ED4BB5C(a1, *v6, v6 + 1) & 1) == 0)
          return 0;
      }
    }
    return 1;
  }
  if (v4 != 8)
    return 1;
  if ((~(_BYTE)v2 & 7) != 0)
    goto LABEL_15;
  v8 = v2 & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_DWORD *)v8;
  if (*(_DWORD *)v8 >= 3u)
    v9 = 3;
  if (v9)
LABEL_15:
    v10 = 0;
  else
    v10 = *(_QWORD *)(v8 + 16) & 0xFFFFFFFFFFFFFFF9;
  result = sub_22ED4C3E8(a1, v10);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t sub_22ED4BB5C(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v10;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  char v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;

  if (a2)
  {
    v4 = a2;
    do
    {
      v6 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
      if ((v4 & 0xF) != 0)
      {
LABEL_4:
        if ((v6 & 0xFFFFFFFFFFFFFFF0) != 0)
          v7 = *(_QWORD *)((char *)&unk_22F496C28
                         + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
        else
          v7 = 1;
        a3 = (a3 + v7 - 1) & -v7;
        v4 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
      }
      else
      {
        result = 1;
        switch(*(_BYTE *)(v6 + 16))
        {
          case 0:
          case 1:
          case 0x16:
          case 0x17:
          case 0x36:
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F496C28
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = a3 + v20 - 1;
            goto LABEL_62;
          case 2:
          case 3:
          case 4:
          case 5:
            v21 = *(_QWORD *)(v4 + 32);
            if (v21 >= 0x10 && (*(_QWORD *)(v4 + 32) & 0xFLL) == 0)
              v73 = *(_QWORD *)((char *)&unk_22F496C28
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v73 = 1;
            result = sub_22ED4BB5C(a1, v21, (a3 + v73 + 15) & -v73);
            if (!(_DWORD)result)
              return result;
            v23 = *(_QWORD *)(a3 + 8);
            return sub_22ED3BF44(a1, v23, 0);
          case 6:
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F496C28
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = a3 + v20 + 11;
            goto LABEL_62;
          case 7:
          case 0x25:
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F496C28
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = a3 + v20 + 7;
            goto LABEL_62;
          case 8:
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F496C28
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = v20 + a3;
            goto LABEL_62;
          case 0xA:
          case 0x20:
          case 0x24:
          case 0x26:
          case 0x27:
          case 0x28:
          case 0x29:
            v4 = *(_QWORD *)(v4 + 32);
            goto LABEL_9;
          case 0xC:
          case 0x37:
          case 0x38:
            goto LABEL_76;
          case 0xD:
          case 0x30:
            v23 = *(_QWORD *)(v4 + 24);
            return sub_22ED3BF44(a1, v23, 0);
          case 0xE:
            result = sub_22ED352EC(a1, *(_QWORD *)(v4 + 24));
            if (!(_DWORD)result)
              return result;
            if (!*(_QWORD *)(v4 + 40))
              return 1;
            result = sub_22ED4BA1C(a1, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 16));
            if (!(_DWORD)result)
              return result;
            v25 = *(_DWORD *)(a3 + 28);
            v74 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 40);
            v75 = v25;
            sub_22EFC6D6C((uint64_t)&v76, v74);
            result = sub_22ED4BAA4((uint64_t)a1, &v74);
            if (!(_DWORD)result)
              return result;
            v26 = *(unsigned int *)(v4 + 20);
            if (!(_DWORD)v26)
              return 1;
            v27 = v4 + 48;
            v28 = (uint64_t *)(a3 + 56);
            v29 = v26 - 1;
            do
            {
              v30 = *v28++;
              v77 = *(_OWORD *)v27;
              v78 = *(_QWORD *)(v27 + 16);
              v79 = v30;
              result = sub_22ED4C2D0((uint64_t)a1, (uint64_t)&v77);
              v31 = v29-- != 0;
              v32 = v31;
              if (!(_DWORD)result)
                break;
              v27 += 24;
            }
            while ((v32 & 1) != 0);
            return result;
          case 0xF:
            result = sub_22ED4C3E8((uint64_t)a1, *(_QWORD *)(v4 + 40));
            if (!(_DWORD)result)
              return result;
            v24 = *(_QWORD *)(v4 + 24);
            return sub_22ED352EC(a1, v24);
          case 0x10:
            v33 = *(_QWORD *)(v4 + 40);
            goto LABEL_96;
          case 0x11:
            v23 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFFCLL;
            return sub_22ED3BF44(a1, v23, 0);
          case 0x12:
            return sub_22ED4BA1C(a1, *(_QWORD *)(v4 + 32), *(_QWORD *)(a3 + 8));
          case 0x13:
            v33 = *(_QWORD *)(v4 + 40);
            if (!v33)
              goto LABEL_97;
LABEL_96:
            result = sub_22ED3BF44(a1, v33, 0);
            if (!(_DWORD)result)
              return result;
LABEL_97:
            v24 = *(_QWORD *)(v4 + 48);
            return sub_22ED352EC(a1, v24);
          case 0x14:
            v34 = *(_QWORD *)(a3 + 8);
            if (v34)
            {
              v35 = *(_QWORD *)(v4 + 32);
              if (v35)
              {
                result = sub_22ED4BA1C(a1, v35, v34);
                if (!(_DWORD)result)
                  return result;
              }
            }
            v36 = *(unsigned int *)(v4 + 20);
            if (!(_DWORD)v36)
              return 1;
            v37 = v4 + 48;
            v38 = (uint64_t *)(a3 + 32);
            v39 = v36 - 1;
            do
            {
              v40 = *v38++;
              v77 = *(_OWORD *)v37;
              v78 = *(_QWORD *)(v37 + 16);
              v79 = v40;
              result = sub_22ED4C2D0((uint64_t)a1, (uint64_t)&v77);
              v31 = v39-- != 0;
              v41 = v31;
              if (!(_DWORD)result)
                break;
              v37 += 24;
            }
            while ((v41 & 1) != 0);
            return result;
          case 0x15:
            v42 = *(_QWORD *)(v4 + 48);
            if (v42)
            {
              result = sub_22ED3BF44(a1, v42, 0);
              if (!(_DWORD)result)
                return result;
            }
            v24 = *(_QWORD *)(v4 + 40);
            return sub_22ED352EC(a1, v24);
          case 0x18:
            v17 = *(_QWORD *)(v4 + 32);
            if (v17)
            {
              result = sub_22ED4BA1C(a1, v17, *(_QWORD *)(a3 + 8));
              if (!(_DWORD)result)
                return result;
            }
            v4 = *(_QWORD *)(v4 + 40);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              goto LABEL_60;
            v20 = 1;
            goto LABEL_61;
          case 0x19:
            *(_QWORD *)&v77 = v4;
            *((_QWORD *)&v77 + 1) = a3;
            v43 = *(_QWORD *)(v4 + 24);
            v44 = sub_22E47EE80(&v77);
            return sub_22ED4BB5C(a1, v43, v44);
          case 0x1A:
            *(_QWORD *)&v77 = v4;
            *((_QWORD *)&v77 + 1) = a3;
            v45 = *(_QWORD *)(v4 + 24);
            v46 = sub_22E47EE80(&v77);
            result = sub_22ED4BB5C(a1, v45, v46);
            if (!(_DWORD)result)
              return result;
            v47 = v77;
            v48 = *(_QWORD *)(v77 + 16);
            if (*(_BYTE *)(v77 + 16) == 25 || (v48 & 0x3FFFC000000000) == 0)
              goto LABEL_126;
            v50 = 0;
            v51 = (unsigned __int16)(v48 >> 38);
            do
            {
              if (*(_QWORD *)(*((_QWORD *)&v77 + 1) + 8 * v50 + 16))
              {
                if ((sub_22ED47864(a1) & 1) == 0)
                  return 0;
              }
              else if (v50 < (unsigned __int16)(*(_QWORD *)(v47 + 16) >> 38))
              {
                result = sub_22ED352EC(a1, *(_QWORD *)(v47 + 40 + 8 * v50));
                if (!(_DWORD)result)
                  return result;
              }
              ++v50;
            }
            while (v51 != v50);
            v48 = *(_QWORD *)(v47 + 16);
LABEL_126:
            if ((v48 & 0x3C0000000000000) == 0x80000000000000)
            {
              v52 = (_DWORD *)((v47 + 8 * (unsigned __int16)(v48 >> 38) + 4 * ((v48 >> 59) & 1) + 47) & 0xFFFFFFFFFFFFFFF8);
              v55 = *v52;
              v54 = v52 + 2;
              v53 = v55;
              if (v55)
              {
                v56 = 8 * v53;
                while ((sub_22ED352EC(a1, *v54) & 1) != 0)
                {
                  ++v54;
                  v56 -= 8;
                  if (!v56)
                    goto LABEL_131;
                }
                return 0;
              }
            }
LABEL_131:
            v57 = sub_22F257D3C(v47);
            if (!v57)
              return 1;
            result = sub_22ED3BF44(a1, v57, 0);
            if ((_DWORD)result)
              return 1;
            return result;
          case 0x1C:
            v4 = *(_QWORD *)(v4 + 24);
LABEL_9:
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F496C28
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = a3 + v20 + 3;
            goto LABEL_62;
          case 0x1D:
          case 0x1E:
            result = sub_22ED3BF44(a1, *(_QWORD *)(a3 + 16), 0);
            if (!(_DWORD)result)
              return result;
            result = sub_22ED3BF44(a1, *(_QWORD *)(a3 + 24), 0);
            if (!(_DWORD)result)
              return result;
LABEL_76:
            v24 = *(_QWORD *)(v4 + 32);
            return sub_22ED352EC(a1, v24);
          case 0x1F:
            v19 = *(_QWORD **)(a3 + 8);
            if (v19)
            {
              if ((sub_22ED4BB5C(a1, *v19, v19 + 1) & 1) == 0)
                return 0;
            }
            else
            {
              result = sub_22ED352EC(a1, *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFF0);
              if (!(_DWORD)result)
                return result;
            }
            v4 = *(_QWORD *)(v4 + 32);
            v20 = 1;
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
LABEL_60:
              v20 = *(_QWORD *)((char *)&unk_22F496C28
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
LABEL_61:
            v10 = a3 + v20 + 15;
LABEL_62:
            a3 = v10 & -v20;
            break;
          case 0x21:
            v58 = *(_QWORD *)(v4 + 24);
            v59 = *(_QWORD *)(v58 & 0xFFFFFFFFFFFFFFF0);
            if (v59 != v4)
            {
              v60 = 1;
              if (v58 >= 0x10 && (v58 & 0xF) == 0)
                v60 = *(_QWORD *)((char *)&unk_22F496C28
                                + ((uint64_t)((unint64_t)*(unsigned int *)(v59 + 16) << 56) >> 53));
              result = sub_22ED4BB5C(a1, v58, (a3+ (((HIWORD(*(_DWORD *)(v4 + 16)) & 0x3F8) + 4 * (*(_DWORD *)(v4 + 16) >> 26) + 31) & 0x7F8)+ v60- 1) & -v60);
              if (!(_DWORD)result)
                return result;
            }
            v61 = (*(_DWORD *)(v4 + 16) >> 19) & 0x7F;
            if (!(_DWORD)v61)
              return 1;
            v62 = (_QWORD *)(a3 + 24);
            v63 = v61 - 1;
            do
            {
              v64 = (_QWORD *)*v62++;
              result = sub_22ED4BB5C(a1, *v64, v64 + 1);
              v31 = v63-- != 0;
              v65 = v31;
            }
            while ((_DWORD)result && (v65 & 1) != 0);
            return result;
          case 0x2A:
            v66 = *(_DWORD *)(v4 + 20);
            *((_QWORD *)&v77 + 1) = *(_QWORD *)(v4 + 40);
            LODWORD(v77) = 8;
            DWORD1(v77) = v66;
            return sub_22ED4C4AC((uint64_t)a1, (uint64_t)&v77);
          case 0x2B:
            v24 = *(_QWORD *)(v4 + 8);
            return sub_22ED352EC(a1, v24);
          case 0x2D:
            sub_22ED4C578(a1, *(_QWORD *)(v4 + 24));
            return 1;
          case 0x2E:
            result = sub_22ED4C3E8((uint64_t)a1, *(_QWORD *)(v4 + 32));
            if (!(_DWORD)result)
              return result;
            v67 = *(unsigned int *)(v4 + 20);
            if (!(_DWORD)v67)
              return 1;
            v68 = v4 + 40;
            v69 = (uint64_t *)(a3 + 16);
            v70 = v67 - 1;
            do
            {
              v71 = *v69++;
              v77 = *(_OWORD *)v68;
              v78 = *(_QWORD *)(v68 + 16);
              v79 = v71;
              result = sub_22ED4C2D0((uint64_t)a1, (uint64_t)&v77);
              v31 = v70-- != 0;
              v72 = v31;
              if (!(_DWORD)result)
                break;
              v68 += 24;
            }
            while ((v72 & 1) != 0);
            return result;
          case 0x31:
          case 0x33:
            v13 = *(unint64_t **)(a3 + 16);
            v14 = *v13;
            a3 = (uint64_t)(v13 + 1);
            v4 = v14;
            break;
          case 0x39:
            goto LABEL_4;
          default:
            return result;
        }
      }
    }
    while (v4);
  }
  return 1;
}

uint64_t sub_22ED4C2D0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v11;

  result = 1;
  switch(*(_DWORD *)a2)
  {
    case 1:
      v6 = (_QWORD *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL);
      if (v6)
        result = sub_22ED4BB5C(a1, *v6, v6 + 1);
      else
        result = sub_22ED352EC(a1, *(_QWORD *)(a2 + 8));
      break;
    case 5:
    case 6:
      v5 = (_QWORD *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL);
      if (!*v5 || (result = sub_22ED4BA1C(a1, *v5, v5[1]), (_DWORD)result))
        result = sub_22ED4C3E8(a1, *(_QWORD *)(a2 + 8));
      break;
    case 7:
      result = sub_22ED3BF44(a1, *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL, 0);
      break;
    case 8:
      v7 = *(unsigned int *)(a2 + 4);
      if ((_DWORD)v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        v9 = v7 - 1;
        do
        {
          result = sub_22ED4C4AC(a1, v8);
          v11 = v9-- != 0;
          if (!(_DWORD)result)
            break;
          v8 += 24;
        }
        while (v11);
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_22ED4C3E8(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t result;
  char v5;

  v2 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((a2 & 6) != 6 || v2 == 0)
  {
    if ((a2 & 6) != 4)
      return 1;
    if (!v2)
      return 1;
    result = sub_22ED4C448(a1, *(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF8);
    if ((_DWORD)result)
      return 1;
  }
  else
  {
    v5 = sub_22ED4C448(a1, *(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF8);
    return (v5 & 1) != 0;
  }
  return result;
}

uint64_t sub_22ED4C448(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (!a2)
    return 1;
  v4 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v4 || (result = sub_22ED4C448(a1, v4), (_DWORD)result))
  {
    v6 = *(_QWORD *)(a2 + 16);
    if (v6 && (*(_BYTE *)(a2 + 8) & 4) != 0)
      return sub_22ED352EC(a1, v6 & 0xFFFFFFFFFFFFFFF0);
    return 1;
  }
  return result;
}

uint64_t sub_22ED4C4AC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v8;

  result = 1;
  switch(*(_DWORD *)a2)
  {
    case 1:
      result = sub_22ED352EC(a1, *(_QWORD *)(a2 + 8));
      break;
    case 5:
    case 6:
      result = sub_22ED4C3E8(a1, *(_QWORD *)(a2 + 8));
      break;
    case 7:
      result = sub_22ED3BF44(a1, *(_QWORD *)(a2 + 8), 0);
      break;
    case 8:
      v4 = *(unsigned int *)(a2 + 4);
      if ((_DWORD)v4)
      {
        v5 = *(_QWORD *)(a2 + 8);
        v6 = v4 - 1;
        do
        {
          result = sub_22ED4C4AC(a1, v5);
          v8 = v6-- != 0;
          if (!(_DWORD)result)
            break;
          v5 += 24;
        }
        while (v8);
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_22ED4C578(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;

  result = sub_22F114198(a2);
  if (result)
  {
    v4 = result;
    if ((*(_DWORD *)(result + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD)
    {
      result = sub_22EA3DA94(result);
      if (result)
      {
        v5 = sub_22EA3DA94(v4);
        result = sub_22EFB948C(v5);
        if (result >= 3)
        {
          result = sub_22EFC7ADC(v4 + 64);
          if ((result & 1) == 0)
          {
            if ((*(_WORD *)(v4 + 72) & 0x80) != 0)
              result = sub_22EFCC320(v4 + 64);
            v6 = *(_QWORD *)(v4 + 80);
            if (v6)
            {
              while (1)
              {
                v7 = *(_DWORD *)(v6 + 28);
                if ((v7 & 0x7Fu) - 42 >= 0xFFFFFFFD)
                {
                  if ((v7 & 0x6000) != 0x4000)
                    goto LABEL_13;
                  result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v4 + 104) + 96), *(_QWORD *)(v4 + 104));
                  if (*(_QWORD *)(*(_QWORD *)(v4 + 128) + 96))
                    break;
                }
LABEL_16:
                v6 = *(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF8;
                if (!v6)
                  return result;
              }
              v7 = *(_DWORD *)(v6 + 28);
LABEL_13:
              if ((v7 & 0x7Eu) - 58 >= 0xFFFFFFFA)
                result = sub_22EB4E494(*a1, *(unsigned int *)(v6 + 24), v6, 0);
              else
                *(_DWORD *)(v6 + 28) = v7 | 0x800;
              goto LABEL_16;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_22ED4C680(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (!a2)
    return 1;
  if ((*(_WORD *)(a2 + 8) & 0x80) != 0)
    sub_22EFCC320(a2);
  v4 = *(_QWORD *)(a2 + 16);
  if (!v4)
    return 1;
  while (1)
  {
    if ((*(_DWORD *)(v4 + 28) & 0x7Fu) - 1 >= 2
      && ((*(_DWORD *)(v4 + 28) & 0x7Fu) - 35 > 2
       || (v5 = *(_QWORD *)(v4 + 128)) == 0
       || ((*(unsigned __int16 *)(v5 + 8) | (*(unsigned __int8 *)(v5 + 10) << 16)) & 0x100000) == 0))
    {
      result = sub_22ED47864(a1);
      if (!(_DWORD)result)
        break;
    }
    v4 = *(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (!v4)
      return 1;
  }
  return result;
}

uint64_t sub_22ED4C71C(uint64_t a1, uint64_t a2)
{
  if (a2)
    __asm { BR              X10 }
  return 1;
}

void sub_22ED4C7A0()
{
  uint64_t v0;
  uint64_t v1;

  if (sub_22ED3BF44(v0, *(_QWORD *)(v1 + 40), 0))
    JUMPOUT(0x22ED4C75CLL);
  JUMPOUT(0x22ED4C790);
}

void sub_22ED4C7BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  v2 = *(unsigned int *)(v1 + 48);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 56);
    v4 = 8 * v2;
    while ((sub_22ED3BF44(v0, *v3, 0) & 1) != 0)
    {
      ++v3;
      v4 -= 8;
      if (!v4)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v5 = *(unsigned int *)(v1 + 64);
    if (!(_DWORD)v5)
      JUMPOUT(0x22ED4C78CLL);
    v6 = *(uint64_t **)(v1 + 72);
    v7 = 8 * v5 - 8;
    do
    {
      v8 = *v6++;
      if (sub_22ED3BF44(v0, v8, 0))
        v9 = v7 == 0;
      else
        v9 = 1;
      v7 -= 8;
    }
    while (!v9);
  }
  JUMPOUT(0x22ED4C790);
}

void sub_22ED4C8F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22ED3BF44(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22ED4C790);
}

void sub_22ED4C92C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22ED3BF44(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22ED4C790);
}

void sub_22ED4C964()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22ED3BF44(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22ED4C790);
}

void sub_22ED4C99C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  if (sub_22ED3BF44(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if (!(_DWORD)v2)
      JUMPOUT(0x22ED4C78CLL);
    v3 = *(uint64_t **)(v1 + 56);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22ED3BF44(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22ED4C790);
}

void sub_22ED4C9E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22ED3BF44(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22ED4C790);
}

void sub_22ED4CA20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  if (sub_22ED3BF44(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 56);
    if ((_DWORD)v2)
    {
      v3 = *(uint64_t **)(v1 + 64);
      v4 = 8 * v2;
      do
      {
        if ((sub_22ED3BF44(v0, *v3, 0) & 1) == 0)
          JUMPOUT(0x22ED4C8ECLL);
        ++v3;
        v4 -= 8;
      }
      while (v4);
    }
    v5 = *(unsigned int *)(v1 + 72);
    if (!(_DWORD)v5)
      JUMPOUT(0x22ED4C78CLL);
    v6 = *(uint64_t **)(v1 + 80);
    v7 = 8 * v5 - 8;
    do
    {
      v8 = *v6++;
      if (sub_22ED3BF44(v0, v8, 0))
        v9 = v7 == 0;
      else
        v9 = 1;
      v7 -= 8;
    }
    while (!v9);
  }
  JUMPOUT(0x22ED4C790);
}

void sub_22ED4CA9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22ED3BF44(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22ED4C790);
}

void sub_22ED4CAD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22ED3BF44(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22ED4C790);
}

void sub_22ED4CB0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  if (sub_22ED3BF44(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if (!(_DWORD)v2)
      JUMPOUT(0x22ED4C78CLL);
    v3 = *(uint64_t **)(v1 + 56);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22ED3BF44(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22ED4C790);
}

void sub_22ED4CB58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  if (sub_22ED3BF44(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if (!(_DWORD)v2)
      JUMPOUT(0x22ED4C78CLL);
    v3 = *(uint64_t **)(v1 + 56);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22ED3BF44(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22ED4C790);
}

void sub_22ED4CBA4()
{
  JUMPOUT(0x22ED4C778);
}

void sub_22ED4CBAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (sub_22ED3BF44(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if ((_DWORD)v2)
    {
      v3 = *(uint64_t **)(v1 + 56);
      v4 = 8 * v2;
      while ((sub_22ED3BF44(v0, *v3, 0) & 1) != 0)
      {
        ++v3;
        v4 -= 8;
        if (!v4)
          goto LABEL_6;
      }
LABEL_33:
      JUMPOUT(0x22ED4C8ECLL);
    }
LABEL_6:
    v5 = *(unsigned int *)(v1 + 64);
    if ((_DWORD)v5)
    {
      v6 = *(uint64_t **)(v1 + 72);
      v7 = 8 * v5;
      while ((sub_22ED3BF44(v0, *v6, 0) & 1) != 0)
      {
        ++v6;
        v7 -= 8;
        if (!v7)
          goto LABEL_10;
      }
      goto LABEL_33;
    }
LABEL_10:
    v8 = *(unsigned int *)(v1 + 80);
    if ((_DWORD)v8)
    {
      v9 = *(uint64_t **)(v1 + 88);
      v10 = 8 * v8;
      while ((sub_22ED3BF44(v0, *v9, 0) & 1) != 0)
      {
        ++v9;
        v10 -= 8;
        if (!v10)
          goto LABEL_14;
      }
      goto LABEL_33;
    }
LABEL_14:
    v11 = *(unsigned int *)(v1 + 96);
    if ((_DWORD)v11)
    {
      v12 = *(uint64_t **)(v1 + 104);
      v13 = 8 * v11;
      while ((sub_22ED3BF44(v0, *v12, 0) & 1) != 0)
      {
        ++v12;
        v13 -= 8;
        if (!v13)
          goto LABEL_18;
      }
      goto LABEL_33;
    }
LABEL_18:
    v14 = *(unsigned int *)(v1 + 128);
    if (!(_DWORD)v14)
      JUMPOUT(0x22ED4C78CLL);
    v15 = *(uint64_t **)(v1 + 136);
    v16 = 8 * v14 - 8;
    do
    {
      v17 = *v15++;
      if (sub_22ED3BF44(v0, v17, 0))
        v18 = v16 == 0;
      else
        v18 = 1;
      v16 -= 8;
    }
    while (!v18);
  }
  JUMPOUT(0x22ED4C790);
}

uint64_t sub_22ED4CCB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  if (!a2)
    return 1;
  v4 = a2 + 16;
  v5 = *(_DWORD *)(a2 + 12);
  if ((v5 & 0x1FFFFFFF) != 0)
  {
    v6 = 8 * (v5 & 0x1FFFFFFF);
    v7 = a2 + 16;
    while ((sub_22ED47864(a1) & 1) != 0)
    {
      v7 += 8;
      v6 -= 8;
      if (!v6)
      {
        v5 = *(_DWORD *)(a2 + 12);
        goto LABEL_7;
      }
    }
    return 0;
  }
  else
  {
LABEL_7:
    if ((v5 & 0x40000000) == 0)
      return 1;
    v8 = *(_QWORD *)(v4 + 8 * (v5 & 0x1FFFFFFF));
    if (!v8)
      return 1;
    result = sub_22ED3BF44(a1, v8, 0);
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

uint64_t sub_22ED4CD58(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a2 + 120);
  if ((v3 & 4) != 0)
  {
    v5 = 0;
    while (1)
    {
      v6 = v3 & 0xFFFFFFFFFFFFFFF8;
      if (v5 >= *(unsigned int *)(v6 + 16))
        break;
      sub_22ED4CCB8((uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v5++));
      v3 = *(_QWORD *)(a2 + 120);
      if ((v3 & 4) == 0)
        goto LABEL_5;
    }
    v7 = *(_QWORD *)v6;
    v8 = *(_QWORD *)(v6 + 8);
  }
  else
  {
LABEL_5:
    v7 = 0;
    v8 = 0;
  }
  return sub_22ED4BA1C(a1, v7, v8);
}

uint64_t sub_22ED4CDCC(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;

  result = sub_22ED4CD58(a1, a2);
  if ((_DWORD)result)
  {
    if ((*(_BYTE *)(a2 + 74) & 1) == 0)
      return 1;
    v5 = sub_22E46A3A0(a2);
    if (v5 == v6)
    {
      return 1;
    }
    else
    {
      v7 = v6;
      v8 = v5 + 24;
      do
      {
        result = sub_22ED4BB5C(a1, **(_QWORD **)(v8 - 8), *(_QWORD *)(v8 - 8) + 8);
        if ((_DWORD)result)
          v9 = v8 == v7;
        else
          v9 = 1;
        v8 += 24;
      }
      while (!v9);
    }
  }
  return result;
}

uint64_t sub_22ED4CE44(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  unint64_t *v11;

  v4 = *(_QWORD *)(a2 + 56);
  if ((v4 & 4) != 0)
  {
    v5 = 0;
    while (1)
    {
      v6 = v4 & 0xFFFFFFFFFFFFFFF8;
      if (v5 >= *(unsigned int *)(v6 + 16))
        break;
      sub_22ED4CCB8((uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v5++));
      v4 = *(_QWORD *)(a2 + 56);
      if ((v4 & 4) == 0)
        goto LABEL_5;
    }
    v7 = *(_QWORD *)v6;
    v8 = *(_QWORD *)(v6 + 8);
  }
  else
  {
LABEL_5:
    v7 = 0;
    v8 = 0;
  }
  result = sub_22ED4BA1C(a1, v7, v8);
  if ((_DWORD)result)
  {
    v10 = *(_QWORD *)(a2 + 56);
    if ((v10 & 4) != 0)
    {
      v11 = *(unint64_t **)((v10 & 0xFFFFFFFFFFFFFFF8) + 32);
      if (v11)
        return (sub_22ED4BB5C(a1, *v11, (uint64_t)(v11 + 1)) & 1) != 0;
    }
    else if (v10 >= 8)
    {
      v11 = (unint64_t *)(v10 & 0xFFFFFFFFFFFFFFF8);
      return (sub_22ED4BB5C(a1, *v11, (uint64_t)(v11 + 1)) & 1) != 0;
    }
    result = sub_22ED352EC(a1, *(_QWORD *)(a2 + 48));
    if (!(_DWORD)result)
      return result;
    return 1;
  }
  return result;
}

uint64_t sub_22ED4CF10(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  _BOOL4 v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;

  v4 = *(_QWORD *)(a2 + 56);
  if ((v4 & 4) != 0)
  {
    v5 = 0;
    while (1)
    {
      v6 = v4 & 0xFFFFFFFFFFFFFFF8;
      if (v5 >= *(unsigned int *)(v6 + 16))
        break;
      sub_22ED4CCB8((uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v5++));
      v4 = *(_QWORD *)(a2 + 56);
      if ((v4 & 4) == 0)
        goto LABEL_5;
    }
    v7 = *(_QWORD *)v6;
    v8 = *(_QWORD *)(v6 + 8);
  }
  else
  {
LABEL_5:
    v7 = 0;
    v8 = 0;
  }
  result = sub_22ED4BA1C(a1, v7, v8);
  if ((_DWORD)result)
  {
    v10 = *(_DWORD *)(a2 + 24);
    v11 = *(_QWORD *)(a2 + 152);
    v38 = *(_QWORD *)(a2 + 40);
    v39 = v10;
    v40 = v11;
    result = sub_22ED4BAA4((uint64_t)a1, &v38);
    if ((_DWORD)result)
    {
      v12 = *(_QWORD *)(a2 + 144) & 0xFFFFFFFFFFFFFFF8;
      if ((*(_QWORD *)(a2 + 144) & 6) == 4 && v12 != 0 && (*(_BYTE *)(v12 + 16) & 6) != 0)
      {
        v14 = *(_QWORD *)(v12 + 32);
        if (v14)
        {
          v15 = *(unsigned int *)(v14 + 8);
          if ((_DWORD)v15)
          {
            v16 = v14 + 16;
            while ((sub_22ED4C2D0((uint64_t)a1, v16) & 1) != 0)
            {
              v16 += 32;
              if (!--v15)
                goto LABEL_19;
            }
            return 0;
          }
        }
      }
LABEL_19:
      v17 = *(_QWORD *)(a2 + 56);
      v18 = (unint64_t *)(v17 & 0xFFFFFFFFFFFFFFF8);
      if ((v17 & 4) != 0)
        v18 = (unint64_t *)v18[4];
      if (v18)
      {
        result = sub_22ED4BB5C(a1, *v18, (uint64_t)(v18 + 1));
        if (!(_DWORD)result)
          return result;
        v17 = *(_QWORD *)(a2 + 56);
      }
      if ((v17 & 4) == 0
        || (v19 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFFF8) + 40)) == 0
        || (result = sub_22ED3BF44(a1, v19, 0), (_DWORD)result))
      {
        if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x37)
        {
          v20 = sub_22EFD7ED0(a2);
          v21 = sub_22EFD7ED0(a2) + 8 * ((*(_QWORD *)(a2 + 80) >> 40) & 0x1FFFFFLL);
          while (v20 != v21)
          {
            v22 = *(_QWORD *)v20;
            if ((*(_WORD *)(*(_QWORD *)v20 + 28) & 4) != 0)
            {
              v23 = (unint64_t *)(*(_QWORD *)v22 & 0xFFFFFFFFFFFFFFF8);
              if ((*(_QWORD *)v22 & 6) != 0 || v23 == 0)
                goto LABEL_37;
              result = sub_22ED4BB5C(a1, *v23, (uint64_t)(v23 + 1));
              if (!(_DWORD)result)
                return result;
              if ((*(_WORD *)(v22 + 28) & 4) != 0)
              {
LABEL_37:
                result = sub_22ED3BF44(a1, *(_QWORD *)(v22 + 8), 0);
                if (!(_DWORD)result)
                  return result;
              }
            }
            v20 += 8;
          }
        }
        v25 = sub_22E49F868(a2) && (*(_BYTE *)(a2 + 83) & 2) == 0;
        if ((*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 < 0xFFFFFFFC)
          goto LABEL_70;
        v26 = *(_WORD *)(a2 + 80) & 0x7F;
        v27 = -40;
        if (v26 > 0x46)
        {
          if (v26 == 83)
            goto LABEL_60;
          if (v26 == 71)
          {
            v27 = -56;
            goto LABEL_60;
          }
          if (v26 != 81)
          {
LABEL_55:
            v28 = v26 - 52;
            v29 = v26 - 33 >= 5;
            v30 = -48;
            if (!v29)
              v30 = -64;
            if (v28 >= 6)
              v27 = v30;
            else
              v27 = -72;
          }
        }
        else
        {
          if (v26 > 0x18)
            goto LABEL_54;
          if (v26 == 16)
          {
LABEL_46:
            v27 = -48;
            goto LABEL_60;
          }
          if (((1 << v26) & 0x1066) == 0)
          {
            if (v26 == 24)
              goto LABEL_46;
LABEL_54:
            if (v26 == 70)
            {
              v27 = -64;
              goto LABEL_60;
            }
            goto LABEL_55;
          }
        }
LABEL_60:
        v31 = *(_QWORD *)(a2 + 72 + v27 + 16);
        v32 = (_QWORD *)(v31 & 0xFFFFFFFFFFFFFFF8);
        if ((v31 & 4) != 0)
          v32 = (_QWORD *)*v32;
        if (v32)
        {
          v33 = v32[8];
          if (v33)
          {
            if (((*(unsigned __int16 *)(v33 + 8) | (*(unsigned __int8 *)(v33 + 10) << 16)) & 0x100000) != 0)
            {
              v34 = sub_22EFD462C((unint64_t)(v32 - 8));
              if (v34)
              {
                if ((*(_DWORD *)(v34 + 28) & 0x7F) != 0x1D || (v34 = *(_QWORD *)(v34 + 48)) != 0)
                {
                  if (v34 == a2
                    || (v35 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v34 + 32))(v34),
                        v35 == (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2)))
                  {
                    if (!v25)
                      return 1;
LABEL_71:
                    v36 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
                    result = sub_22ED3BF44(a1, v36, 0);
                    if (!(_DWORD)result)
                      return result;
                    if ((*(_WORD *)(a2 + 80) & 0x80) != 0)
                      sub_22EFCC320(a2 + 72);
                    v37 = *(_QWORD *)(a2 + 88);
                    if (v37)
                    {
                      do
                      {
                        if ((*(_DWORD *)(v37 + 28) & 0x7E) == 0x2E)
                        {
                          result = sub_22ED47864(a1);
                          if (!(_DWORD)result)
                            break;
                        }
                        result = 1;
                        v37 = *(_QWORD *)(v37 + 8) & 0xFFFFFFFFFFFFFFF8;
                      }
                      while (v37);
                      return result;
                    }
                    return 1;
                  }
                }
              }
            }
          }
        }
LABEL_70:
        if (!v25)
          return 1;
        goto LABEL_71;
      }
    }
  }
  return result;
}

uint64_t sub_22ED4D2D4(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;

  result = sub_22ED4CE44(a1, a2);
  if ((_DWORD)result)
  {
    if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x40)
      return 1;
    if ((*(_BYTE *)(a2 + 97) & 8) != 0)
      return 1;
    v5 = sub_22EFBC5B4(a2);
    result = sub_22ED3BF44(a1, v5, 0);
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

uint64_t sub_22ED4D334(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *mm;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *i2;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *n;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *ii;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *nn;
  uint64_t v79;
  uint64_t v80;
  _QWORD *i1;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *i;
  uint64_t v92;
  uint64_t v93;
  _QWORD *j;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *jj;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *kk;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *k;
  uint64_t v175;
  uint64_t v176;
  _QWORD *m;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  __int128 v208;
  uint64_t v209;

  if (!a2)
    return 1;
  switch(*(_DWORD *)(a2 + 8))
  {
    case 3:
      v85 = (_QWORD *)(a2 + 24);
      result = sub_22ED3BF44(a1, *(_QWORD *)(a2 + 24 + 8 * *(unsigned int *)(a2 + 16)), 0);
      if ((_DWORD)result)
      {
        v86 = *(unsigned int *)(a2 + 16);
        if (!(_DWORD)v86)
          return 1;
        v87 = 8 * v86;
        do
        {
          if ((sub_22ED3BF44(a1, *v85, 0) & 1) == 0)
            return 0;
          ++v85;
          v87 -= 8;
        }
        while (v87);
        return 1;
      }
      return result;
    case 4:
    case 7:
    case 0xC:
    case 0x13:
    case 0x15:
    case 0x23:
    case 0x3C:
    case 0x3D:
    case 0x46:
    case 0x4B:
      v5 = *(_QWORD *)(a2 + 16);
      return (sub_22ED3BF44(a1, v5, 0) & 1) != 0;
    case 5:
      v137 = (_QWORD *)(a2 + 24);
      result = sub_22ED3BF44(a1, *(_QWORD *)(a2 + 24 + 8 * *(unsigned int *)(a2 + 16)), 0);
      if (!(_DWORD)result)
        return result;
      v138 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v138)
        return 1;
      v139 = 8 * v138;
      while ((sub_22ED3BF44(a1, *v137, 0) & 1) != 0)
      {
        ++v137;
        v139 -= 8;
        if (!v139)
          return 1;
      }
      return 0;
    case 6:
      result = sub_22ED3BF44(a1, *(_QWORD *)(a2 + 24), 0);
      if (!(_DWORD)result)
        return result;
      v134 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v134)
        return 1;
      v135 = (_QWORD *)(a2 + 40);
      v136 = 8 * v134;
      while ((sub_22ED3BF44(a1, *v135, 0) & 1) != 0)
      {
        ++v135;
        v136 -= 8;
        if (!v136)
          return 1;
      }
      return 0;
    case 0xE:
      v88 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v88)
        return 1;
      v89 = a2 + 24;
      v90 = 8 * v88;
      for (i = (_QWORD *)(a2 + 24); (sub_22ED3BF44(a1, *i, 0) & 1) != 0; ++i)
      {
        v90 -= 8;
        if (!v90)
        {
          v92 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v92)
            return 1;
          v93 = 8 * v92;
          for (j = (_QWORD *)(v89 + 8 * v92); (sub_22ED3BF44(a1, *j, 0) & 1) != 0; ++j)
          {
            v93 -= 8;
            if (!v93)
            {
              v95 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v95)
                return 1;
              v96 = (_QWORD *)(v89 + 8 * v95 + 8 * v95);
              v97 = 8 * v95;
              while ((sub_22ED3BF44(a1, *v96, 0) & 1) != 0)
              {
                ++v96;
                v97 -= 8;
                if (!v97)
                {
                  v98 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v98)
                    return 1;
                  v99 = (_QWORD *)(v89 + 8 * v98 + 8 * v98 + 8 * v98);
                  v100 = 8 * v98;
                  while ((sub_22ED3BF44(a1, *v99, 0) & 1) != 0)
                  {
                    ++v99;
                    v100 -= 8;
                    if (!v100)
                      return 1;
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0xF:
      v171 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v171)
        return 1;
      v172 = a2 + 24;
      v173 = 8 * v171;
      for (k = (_QWORD *)(a2 + 24); (sub_22ED3BF44(a1, *k, 0) & 1) != 0; ++k)
      {
        v173 -= 8;
        if (!v173)
        {
          v175 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v175)
            return 1;
          v176 = 8 * v175;
          for (m = (_QWORD *)(v172 + 8 * v175); (sub_22ED3BF44(a1, *m, 0) & 1) != 0; ++m)
          {
            v176 -= 8;
            if (!v176)
            {
              v178 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v178)
                return 1;
              v179 = (_QWORD *)(v172 + 8 * v178 + 8 * v178);
              v180 = 8 * v178;
              while ((sub_22ED3BF44(a1, *v179, 0) & 1) != 0)
              {
                ++v179;
                v180 -= 8;
                if (!v180)
                {
                  v181 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v181)
                    return 1;
                  v182 = (_QWORD *)(v172 + 8 * v181 + 8 * v181 + 8 * v181);
                  v183 = 8 * v181;
                  while ((sub_22ED3BF44(a1, *v182, 0) & 1) != 0)
                  {
                    ++v182;
                    v183 -= 8;
                    if (!v183)
                      return 1;
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x12:
      v184 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v184)
        return 1;
      v185 = (_QWORD *)(a2 + 40);
      v186 = 8 * v184;
      while ((sub_22ED3BF44(a1, *v185, 0) & 1) != 0)
      {
        ++v185;
        v186 -= 8;
        if (!v186)
          return 1;
      }
      return 0;
    case 0x14:
    case 0x58:
      v5 = *(_QWORD *)(a2 + 24);
      return (sub_22ED3BF44(a1, v5, 0) & 1) != 0;
    case 0x16:
      result = sub_22ED3BF44(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 40);
      return (sub_22ED3BF44(a1, v5, 0) & 1) != 0;
    case 0x18:
      result = sub_22ED3BF44(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 48);
      return (sub_22ED3BF44(a1, v5, 0) & 1) != 0;
    case 0x1A:
      v193 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v193)
        return 1;
      v194 = (_QWORD *)(a2 + 24);
      v195 = 8 * v193;
      while ((sub_22ED3BF44(a1, *v194, 0) & 1) != 0)
      {
        ++v194;
        v195 -= 8;
        if (!v195)
          return 1;
      }
      return 0;
    case 0x1B:
    case 0x1C:
    case 0x21:
    case 0x24:
    case 0x34:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3E:
    case 0x4E:
      result = sub_22ED3BF44(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 32);
      return (sub_22ED3BF44(a1, v5, 0) & 1) != 0;
    case 0x1D:
      v40 = a2 + 40;
      v41 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v41)
        goto LABEL_72;
      v42 = 8 * v41;
      v43 = (_QWORD *)(a2 + 40);
      while ((sub_22ED3BF44(a1, *v43, 0) & 1) != 0)
      {
        ++v43;
        v42 -= 8;
        if (!v42)
        {
LABEL_72:
          result = sub_22ED3BF44(a1, *(_QWORD *)(a2 + 24), 0);
          if (!(_DWORD)result)
            return result;
          v44 = *(unsigned int *)(a2 + 16);
          if ((_DWORD)v44)
          {
            v45 = 8 * v44;
            for (n = (_QWORD *)(v40 + 8 * v44); (sub_22ED3BF44(a1, *n, 0) & 1) != 0; ++n)
            {
              v45 -= 8;
              if (!v45)
              {
                v47 = *(unsigned int *)(a2 + 16);
                if (!(_DWORD)v47)
                  return 1;
                v48 = (_QWORD *)(v40 + 8 * v47 + 8 * v47);
                v49 = 8 * v47;
                while ((sub_22ED3BF44(a1, *v48, 0) & 1) != 0)
                {
                  ++v48;
                  v49 -= 8;
                  if (!v49)
                    return 1;
                }
                return 0;
              }
            }
            return 0;
          }
          return 1;
        }
      }
      return 0;
    case 0x1E:
      v82 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v82)
        return 1;
      v83 = (_QWORD *)(a2 + 24);
      v84 = 8 * v82;
      while ((sub_22ED3BF44(a1, *v83, 0) & 1) != 0)
      {
        ++v83;
        v84 -= 8;
        if (!v84)
          return 1;
      }
      return 0;
    case 0x1F:
      v187 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v187)
        return 1;
      v188 = (_QWORD *)(a2 + 104);
      v189 = 8 * v187;
      while ((sub_22ED3BF44(a1, *v188, 0) & 1) != 0)
      {
        ++v188;
        v189 -= 8;
        if (!v189)
          return 1;
      }
      return 0;
    case 0x22:
      v199 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v199)
        return 1;
      v200 = (_QWORD *)(a2 + 80);
      v201 = 8 * v199;
      while ((sub_22ED3BF44(a1, *v200, 0) & 1) != 0)
      {
        ++v200;
        v201 -= 8;
        if (!v201)
          return 1;
      }
      return 0;
    case 0x25:
      if (!sub_22ED4BA1C(a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64)))
        return 0;
      v208 = *(_OWORD *)(a2 + 72);
      v209 = *(_QWORD *)(a2 + 88);
      if (!sub_22ED4BAA4((uint64_t)a1, (uint64_t *)&v208))
        return 0;
      v56 = a2 + 96;
      v57 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v57)
        goto LABEL_98;
      v58 = 8 * v57;
      v59 = (_QWORD *)(a2 + 96);
      while ((sub_22ED3BF44(a1, *v59, 0) & 1) != 0)
      {
        ++v59;
        v58 -= 8;
        if (!v58)
        {
LABEL_98:
          if (sub_22ED3BF44(a1, *(_QWORD *)(a2 + 24), 0)
            && sub_22ED3BF44(a1, *(_QWORD *)(a2 + 40), 0))
          {
            v60 = *(unsigned int *)(a2 + 16);
            if (!(_DWORD)v60)
              return 1;
            v61 = 8 * v60;
            for (ii = (_QWORD *)(v56 + 8 * v60); (sub_22ED3BF44(a1, *ii, 0) & 1) != 0; ++ii)
            {
              v61 -= 8;
              if (!v61)
              {
                v63 = *(unsigned int *)(a2 + 16);
                if (!(_DWORD)v63)
                  return 1;
                v64 = (_QWORD *)(v56 + 8 * v63 + 8 * v63);
                v65 = 8 * v63;
                while ((sub_22ED3BF44(a1, *v64, 0) & 1) != 0)
                {
                  ++v64;
                  v65 -= 8;
                  if (!v65)
                  {
                    v66 = *(unsigned int *)(a2 + 16);
                    if (!(_DWORD)v66)
                      return 1;
                    v67 = (_QWORD *)(v56 + 8 * v66 + 8 * v66 + 8 * v66);
                    v68 = 8 * v66;
                    while ((sub_22ED3BF44(a1, *v67, 0) & 1) != 0)
                    {
                      ++v67;
                      v68 -= 8;
                      if (!v68)
                      {
                        v69 = *(unsigned int *)(a2 + 16);
                        if (!(_DWORD)v69)
                          return 1;
                        v70 = (_QWORD *)(v56 + 8 * v69 + 8 * v69 + 8 * v69 + 8 * v69);
                        v71 = 8 * v69;
                        while ((sub_22ED3BF44(a1, *v70, 0) & 1) != 0)
                        {
                          ++v70;
                          v71 -= 8;
                          if (!v71)
                          {
                            v72 = *(unsigned int *)(a2 + 16);
                            if (!(_DWORD)v72)
                              return 1;
                            v73 = (_QWORD *)(v56 + 8 * v72 + 8 * v72 + 8 * v72 + 8 * v72 + 8 * v72);
                            v74 = 8 * v72;
                            while ((sub_22ED3BF44(a1, *v73, 0) & 1) != 0)
                            {
                              ++v73;
                              v74 -= 8;
                              if (!v74)
                                return 1;
                            }
                            return 0;
                          }
                        }
                        return 0;
                      }
                    }
                    return 0;
                  }
                }
                return 0;
              }
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x27:
      v168 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v168)
        return 1;
      v169 = (_QWORD *)(a2 + 24);
      v170 = 8 * v168;
      while ((sub_22ED3BF44(a1, *v169, 0) & 1) != 0)
      {
        ++v169;
        v170 -= 8;
        if (!v170)
          return 1;
      }
      return 0;
    case 0x29:
      v53 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v53)
        return 1;
      v54 = (_QWORD *)(a2 + 32);
      v55 = 8 * v53;
      while ((sub_22ED3BF44(a1, *v54, 0) & 1) != 0)
      {
        ++v54;
        v55 -= 8;
        if (!v55)
          return 1;
      }
      return 0;
    case 0x2A:
      v50 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v50)
        return 1;
      v51 = (_QWORD *)(a2 + 80);
      v52 = 8 * v50;
      while ((sub_22ED3BF44(a1, *v51, 0) & 1) != 0)
      {
        ++v51;
        v52 -= 8;
        if (!v52)
          return 1;
      }
      return 0;
    case 0x2B:
      v101 = a2 + 64;
      v102 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v102)
        goto LABEL_164;
      v103 = 8 * v102;
      v104 = (_QWORD *)(a2 + 64);
      while ((sub_22ED3BF44(a1, *v104, 0) & 1) != 0)
      {
        ++v104;
        v103 -= 8;
        if (!v103)
        {
LABEL_164:
          result = sub_22ED3BF44(a1, *(_QWORD *)(a2 + 24), 0);
          if (!(_DWORD)result)
            return result;
          result = sub_22ED3BF44(a1, *(_QWORD *)(a2 + 40), 0);
          if (!(_DWORD)result)
            return result;
          v105 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v105)
            return 1;
          v106 = 8 * v105;
          for (jj = (_QWORD *)(v101 + 8 * v105); (sub_22ED3BF44(a1, *jj, 0) & 1) != 0; ++jj)
          {
            v106 -= 8;
            if (!v106)
            {
              v108 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v108)
                return 1;
              v109 = (_QWORD *)(v101 + 8 * v108 + 8 * v108);
              v110 = 8 * v108;
              while ((sub_22ED3BF44(a1, *v109, 0) & 1) != 0)
              {
                ++v109;
                v110 -= 8;
                if (!v110)
                {
                  v111 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v111)
                    return 1;
                  v112 = (_QWORD *)(v101 + 8 * v111 + 8 * v111 + 8 * v111);
                  v113 = 8 * v111;
                  while ((sub_22ED3BF44(a1, *v112, 0) & 1) != 0)
                  {
                    ++v112;
                    v113 -= 8;
                    if (!v113)
                    {
                      v114 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v114)
                        return 1;
                      v115 = (_QWORD *)(v101 + 8 * v114 + 8 * v114 + 8 * v114 + 8 * v114);
                      v116 = 8 * v114;
                      while ((sub_22ED3BF44(a1, *v115, 0) & 1) != 0)
                      {
                        ++v115;
                        v116 -= 8;
                        if (!v116)
                          return 1;
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x2C:
      v117 = a2 + 64;
      v118 = *(unsigned int *)(a2 + 16);
      result = sub_22ED3BF44(a1, *(_QWORD *)(a2 + 64 + 8 * v118 + 8 * v118 + 8 * v118 + 8 * v118 + 8 * v118), 0);
      if (!(_DWORD)result)
        return result;
      result = sub_22ED3BF44(a1, *(_QWORD *)(v117+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8), 0);
      if (!(_DWORD)result)
        return result;
      v119 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v119)
        goto LABEL_191;
      v120 = 8 * v119;
      v121 = (_QWORD *)(a2 + 64);
      while ((sub_22ED3BF44(a1, *v121, 0) & 1) != 0)
      {
        ++v121;
        v120 -= 8;
        if (!v120)
        {
LABEL_191:
          result = sub_22ED3BF44(a1, *(_QWORD *)(a2 + 24), 0);
          if (!(_DWORD)result)
            return result;
          result = sub_22ED3BF44(a1, *(_QWORD *)(a2 + 40), 0);
          if (!(_DWORD)result)
            return result;
          v122 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v122)
            return 1;
          v123 = 8 * v122;
          for (kk = (_QWORD *)(v117 + 8 * v122); (sub_22ED3BF44(a1, *kk, 0) & 1) != 0; ++kk)
          {
            v123 -= 8;
            if (!v123)
            {
              v125 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v125)
                return 1;
              v126 = (_QWORD *)(v117 + 8 * v125 + 8 * v125);
              v127 = 8 * v125;
              while ((sub_22ED3BF44(a1, *v126, 0) & 1) != 0)
              {
                ++v126;
                v127 -= 8;
                if (!v127)
                {
                  v128 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v128)
                    return 1;
                  v129 = (_QWORD *)(v117 + 8 * v128 + 8 * v128 + 8 * v128);
                  v130 = 8 * v128;
                  while ((sub_22ED3BF44(a1, *v129, 0) & 1) != 0)
                  {
                    ++v129;
                    v130 -= 8;
                    if (!v130)
                    {
                      v131 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v131)
                        return 1;
                      v132 = (_QWORD *)(v117 + 8 * v131 + 8 * v131 + 8 * v131 + 8 * v131);
                      v133 = 8 * v131;
                      while ((sub_22ED3BF44(a1, *v132, 0) & 1) != 0)
                      {
                        ++v132;
                        v133 -= 8;
                        if (!v133)
                          return 1;
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x2E:
      v190 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v190)
        return 1;
      v191 = (_QWORD *)(a2 + 136);
      v192 = 8 * v190;
      while ((sub_22ED3BF44(a1, *v191, 0) & 1) != 0)
      {
        ++v191;
        v192 -= 8;
        if (!v192)
          return 1;
      }
      return 0;
    case 0x35:
      v6 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v6)
        return 1;
      v7 = a2 + 24;
      v8 = 8 * v6;
      for (mm = (_QWORD *)(a2 + 24); (sub_22ED3BF44(a1, *mm, 0) & 1) != 0; ++mm)
      {
        v8 -= 8;
        if (!v8)
        {
          v10 = *(unsigned int *)(a2 + 16);
          v11 = (uint64_t *)(v7 + 8 * v10);
          v208 = (unint64_t)v11;
          if ((_DWORD)v10)
          {
            v12 = 0;
            v13 = &v11[v10];
            while (1)
            {
              if ((v12 & 3) != 0)
              {
                if ((v12 & 0xFFFFFFFFFFFFFFFCLL) != 0)
                  v14 = (_QWORD *)((v12 & 0xFFFFFFFFFFFFFFFCLL) + 40);
                else
                  v14 = (_QWORD *)sub_22F3AC1A8(*v11);
                if ((sub_22ED3BF44(a1, *v14, 0) & 1) == 0)
                  return 0;
                if (v12 < 4)
                  sub_22F3F2FE0((uint64_t)&v208, 1);
                else
                  sub_22F0D8720((uint64_t)&v208);
              }
              else
              {
                if (!sub_22ED3BF44(a1, *v11, 0))
                  return 0;
                *(_QWORD *)&v208 = v11 + 1;
              }
              v12 = *((_QWORD *)&v208 + 1);
              v11 = (uint64_t *)v208;
              if ((uint64_t *)v208 == v13 && *((_QWORD *)&v208 + 1) == 0)
                return 1;
            }
          }
          return 1;
        }
      }
      return 0;
    case 0x3F:
      v75 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v75)
        return 1;
      v76 = a2 + 24;
      v77 = 8 * v75;
      for (nn = (_QWORD *)(a2 + 24); (sub_22ED3BF44(a1, *nn, 0) & 1) != 0; ++nn)
      {
        v77 -= 8;
        if (!v77)
        {
          v79 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v79)
            return 1;
          v80 = 8 * v79;
          for (i1 = (_QWORD *)(v76 + 8 * v79); (sub_22ED3BF44(a1, *i1, 0) & 1) != 0; ++i1)
          {
            v80 -= 8;
            if (!v80)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 0x42:
      if (!sub_22ED4BA1C(a1, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72)))
        return 0;
      v208 = *(_OWORD *)(a2 + 80);
      v209 = *(_QWORD *)(a2 + 96);
      if (!sub_22ED4BAA4((uint64_t)a1, (uint64_t *)&v208))
        return 0;
      v140 = a2 + 104;
      v141 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v141)
        goto LABEL_228;
      v142 = 8 * v141;
      v143 = (_QWORD *)(a2 + 104);
      while ((sub_22ED3BF44(a1, *v143, 0) & 1) != 0)
      {
        ++v143;
        v142 -= 8;
        if (!v142)
        {
LABEL_228:
          if (sub_22ED3BF44(a1, *(_QWORD *)(a2 + 24), 0)
            && sub_22ED3BF44(a1, *(_QWORD *)(a2 + 40), 0))
          {
            v144 = *(unsigned int *)(a2 + 16);
            if ((_DWORD)v144)
            {
              v145 = 8 * v144;
              v146 = (_QWORD *)(v140 + 8 * v144);
              while ((sub_22ED3BF44(a1, *v146, 0) & 1) != 0)
              {
                ++v146;
                v145 -= 8;
                if (!v145)
                {
                  v147 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v147)
                    goto LABEL_246;
                  v148 = (_QWORD *)(v140 + 8 * v147 + 8 * v147);
                  v149 = 8 * v147;
                  while ((sub_22ED3BF44(a1, *v148, 0) & 1) != 0)
                  {
                    ++v148;
                    v149 -= 8;
                    if (!v149)
                    {
                      v150 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v150)
                        goto LABEL_246;
                      v151 = (_QWORD *)(v140 + 8 * v150 + 8 * v150 + 8 * v150);
                      v152 = 8 * v150;
                      while ((sub_22ED3BF44(a1, *v151, 0) & 1) != 0)
                      {
                        ++v151;
                        v152 -= 8;
                        if (!v152)
                        {
                          v153 = *(unsigned int *)(a2 + 16);
                          if (!(_DWORD)v153)
                            goto LABEL_246;
                          v154 = (_QWORD *)(v140 + 8 * v153 + 8 * v153 + 8 * v153 + 8 * v153);
                          v155 = 8 * v153;
                          while ((sub_22ED3BF44(a1, *v154, 0) & 1) != 0)
                          {
                            ++v154;
                            v155 -= 8;
                            if (!v155)
                              goto LABEL_246;
                          }
                          return 0;
                        }
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
            }
            else
            {
LABEL_246:
              if (*(_DWORD *)(a2 + 48) != 1)
                return 1;
              v156 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v156)
                return 1;
              v157 = (_QWORD *)(v140 + 8 * v156 + 8 * v156 + 8 * v156 + 8 * v156 + 8 * v156);
              v158 = 8 * v156;
              while ((sub_22ED3BF44(a1, *v157, 0) & 1) != 0)
              {
                ++v157;
                v158 -= 8;
                if (!v158)
                {
                  v159 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v159)
                    return 1;
                  v160 = (_QWORD *)(v140 + 8 * v159 + 8 * v159 + 8 * v159 + 8 * v159 + 8 * v159 + 8 * v159);
                  v161 = 8 * v159;
                  while ((sub_22ED3BF44(a1, *v160, 0) & 1) != 0)
                  {
                    ++v160;
                    v161 -= 8;
                    if (!v161)
                    {
                      v162 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v162)
                        return 1;
                      v163 = (_QWORD *)(v140 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162);
                      v164 = 8 * v162;
                      while ((sub_22ED3BF44(a1, *v163, 0) & 1) != 0)
                      {
                        ++v163;
                        v164 -= 8;
                        if (!v164)
                          return 1;
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x47:
      result = sub_22ED3BF44(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 64);
      return (sub_22ED3BF44(a1, v5, 0) & 1) != 0;
    case 0x49:
      v202 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v202)
        return 1;
      v203 = (_QWORD *)(a2 + 24);
      v204 = 8 * v202;
      while ((sub_22ED3BF44(a1, *v203, 0) & 1) != 0)
      {
        ++v203;
        v204 -= 8;
        if (!v204)
          return 1;
      }
      return 0;
    case 0x4C:
      v165 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v165)
        return 1;
      v166 = (_QWORD *)(a2 + 24);
      v167 = 8 * v165;
      while ((sub_22ED3BF44(a1, *v166, 0) & 1) != 0)
      {
        ++v166;
        v167 -= 8;
        if (!v167)
          return 1;
      }
      return 0;
    case 0x4D:
      if (!sub_22ED4BA1C(a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64)))
        return 0;
      v208 = *(_OWORD *)(a2 + 72);
      v209 = *(_QWORD *)(a2 + 88);
      if (!sub_22ED4BAA4((uint64_t)a1, (uint64_t *)&v208))
        return 0;
      v24 = a2 + 96;
      v25 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v25)
        goto LABEL_49;
      v26 = 8 * v25;
      v27 = (_QWORD *)(a2 + 96);
      while ((sub_22ED3BF44(a1, *v27, 0) & 1) != 0)
      {
        ++v27;
        v26 -= 8;
        if (!v26)
        {
LABEL_49:
          if (sub_22ED3BF44(a1, *(_QWORD *)(a2 + 24), 0)
            && sub_22ED3BF44(a1, *(_QWORD *)(a2 + 40), 0))
          {
            v28 = *(unsigned int *)(a2 + 16);
            if (!(_DWORD)v28)
              return 1;
            v29 = 8 * v28;
            for (i2 = (_QWORD *)(v24 + 8 * v28); (sub_22ED3BF44(a1, *i2, 0) & 1) != 0; ++i2)
            {
              v29 -= 8;
              if (!v29)
              {
                v31 = *(unsigned int *)(a2 + 16);
                if (!(_DWORD)v31)
                  return 1;
                v32 = (_QWORD *)(v24 + 8 * v31 + 8 * v31);
                v33 = 8 * v31;
                while ((sub_22ED3BF44(a1, *v32, 0) & 1) != 0)
                {
                  ++v32;
                  v33 -= 8;
                  if (!v33)
                  {
                    v34 = *(unsigned int *)(a2 + 16);
                    if (!(_DWORD)v34)
                      return 1;
                    v35 = (_QWORD *)(v24 + 8 * v34 + 8 * v34 + 8 * v34);
                    v36 = 8 * v34;
                    while ((sub_22ED3BF44(a1, *v35, 0) & 1) != 0)
                    {
                      ++v35;
                      v36 -= 8;
                      if (!v36)
                      {
                        v37 = *(unsigned int *)(a2 + 16);
                        if (!(_DWORD)v37)
                          return 1;
                        v38 = (_QWORD *)(v24 + 8 * v37 + 8 * v37 + 8 * v37 + 8 * v37);
                        v39 = 8 * v37;
                        while ((sub_22ED3BF44(a1, *v38, 0) & 1) != 0)
                        {
                          ++v38;
                          v39 -= 8;
                          if (!v39)
                            return 1;
                        }
                        return 0;
                      }
                    }
                    return 0;
                  }
                }
                return 0;
              }
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x51:
      v16 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v16)
        return 1;
      v17 = (_QWORD *)(a2 + 104);
      v18 = 8 * v16;
      while ((sub_22ED3BF44(a1, *v17, 0) & 1) != 0)
      {
        ++v17;
        v18 -= 8;
        if (!v18)
          return 1;
      }
      return 0;
    case 0x59:
      v205 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v205)
        return 1;
      v206 = (_QWORD *)(a2 + 80);
      v207 = 8 * v205;
      while ((sub_22ED3BF44(a1, *v206, 0) & 1) != 0)
      {
        ++v206;
        v207 -= 8;
        if (!v207)
          return 1;
      }
      return 0;
    case 0x5A:
      v196 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v196)
        return 1;
      v197 = (_QWORD *)(a2 + 80);
      v198 = 8 * v196;
      while ((sub_22ED3BF44(a1, *v197, 0) & 1) != 0)
      {
        ++v197;
        v198 -= 8;
        if (!v198)
          return 1;
      }
      return 0;
    case 0x5B:
      v19 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v19)
        return 1;
      v20 = 0;
      v21 = a2 + 24;
      v22 = 2 * v19;
      break;
    default:
      return 1;
  }
  while (1)
  {
    v23 = *(_QWORD *)(v21 + 8 * (v20 + 1));
    result = sub_22ED3BF44(a1, *(_QWORD *)(v21 + 8 * v20), 0);
    if (!(_DWORD)result)
      break;
    if ((sub_22ED3BF44(a1, v23, 0) & 1) == 0)
      return 0;
    v20 += 2;
    if (v22 == v20)
      return 1;
  }
  return result;
}

uint64_t sub_22ED4E3E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v9;
  _QWORD *v10;
  uint64_t result;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;

  if (!a2)
    return 1;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4 == v3)
    v5 = 0;
  else
    v5 = *(uint64_t **)(a2 + 24);
  if (v4 == v3)
    v6 = 0;
  else
    v6 = *(uint64_t **)(a2 + 16);
  v14 = 0;
  v15 = 0;
  v13 = v6;
  if (v6 == v5)
    return 1;
  v9 = 0;
  while (1)
  {
    if ((v9 & 3) == 0)
    {
      result = sub_22ED3BF44(a1, *v6, a3);
      if (!(_DWORD)result)
        return result;
      v13 = v6 + 1;
      goto LABEL_18;
    }
    v10 = (_QWORD *)((v9 & 0xFFFFFFFFFFFFFFFCLL) != 0 ? (v9 & 0xFFFFFFFFFFFFFFFCLL) + 40 : sub_22F3AC1A8(*v6));
    if ((sub_22ED3BF44(a1, *v10, a3) & 1) == 0)
      return 0;
    if (v9 < 4)
      sub_22F3F2FE0((uint64_t)&v13, 1);
    else
      sub_22F0D8720((uint64_t)&v13);
LABEL_18:
    v6 = v13;
    v9 = v14;
    if (v13 == v5 && v14 == 0)
      return 1;
  }
}

uint64_t sub_22ED4E4E0(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  int v3;
  int v4;
  unint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t *v15;

  v2 = *(unsigned __int8 *)(a2 + 12);
  v3 = (v2 >> 2) & 3;
  v4 = v2 & 2;
  if (v3 != 3)
    v4 = v3;
  if (v4)
    return 0;
  v8 = *(_QWORD *)(**(_QWORD **)(a2 + 16) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v8 + 8) & 0xF) != 0)
    v8 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(a2 + 16));
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_BYTE *)(a1 + 16);
  v15 = 0;
  if (sub_22ED4E5E4(*(_QWORD *)v9, *(_DWORD *)(v9 + 16), v8 & 0xFFFFFFFFFFFFFFF0, v10, &v15))
  {
    v11 = v15;
    v12 = *(_QWORD *)v9;
    v13 = *(_DWORD *)(v9 + 16);
  }
  else
  {
    v12 = *(_QWORD *)v9;
    v13 = *(_DWORD *)(v9 + 16);
    v11 = (uint64_t *)(*(_QWORD *)v9 + 24 * v13);
  }
  if (v11 == (uint64_t *)(v12 + 24 * v13))
    return 0;
  *(_QWORD *)(a1 + 24) = v11[2];
  v14 = *(_QWORD *)(**(_QWORD **)(a2 + 16) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v14 + 8) & 0xF) != 0)
    v14 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(a2 + 16));
  *(_QWORD *)(a1 + 32) = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF0) + 8);
  return 1;
}

uint64_t sub_22ED4E5E4(uint64_t a1, int a2, unint64_t a3, unsigned __int8 a4, uint64_t **a5)
{
  int v5;
  int v6;
  unsigned int v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v13;
  int v14;
  BOOL v15;
  int v17;

  if (a2)
  {
    v5 = a4;
    v6 = a2 - 1;
    v7 = (a2 - 1) & ((a3 >> 9) ^ a3);
    v8 = (uint64_t *)(a1 + 24 * v7);
    v9 = *((unsigned __int8 *)v8 + 8);
    v10 = *v8;
    if (((v9 ^ a4) & 1) != 0 || v10 != a3)
    {
      v13 = 0;
      v14 = 1;
      while ((v9 & 1) != 0 || v10)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v10 == -1;
        if (v15 && (v9 & 1) == 0)
          v13 = v8;
        v17 = v14 + 1;
        v7 = (v7 + v14) & v6;
        v8 = (uint64_t *)(a1 + 24 * v7);
        v9 = *((unsigned __int8 *)v8 + 8);
        v10 = *v8;
        ++v14;
        if (((v9 ^ v5) & 1) == 0)
        {
          v11 = 1;
          v14 = v17;
          if (v10 == a3)
            goto LABEL_6;
        }
      }
      v11 = 0;
      if (v13)
        v8 = v13;
    }
    else
    {
      v11 = 1;
    }
  }
  else
  {
    v8 = 0;
    v11 = 0;
  }
LABEL_6:
  *a5 = v8;
  return v11;
}

_QWORD *sub_22ED4E6A8(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  llvm *v13;
  unsigned __int8 v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 24 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      do
      {
        *result = 0;
        result[1] = 0;
        result += 3;
        v11 -= 24;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 24 * v3;
      v13 = v4;
      do
      {
        v14 = *((_BYTE *)v13 + 8);
        v15 = *(_QWORD *)v13;
        if ((v14 & 1) != 0 || v15 + 1 >= 2)
        {
          v20 = 0;
          sub_22ED4E5E4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v15, v14, &v20);
          v16 = v20;
          v17 = *(_QWORD *)v13;
          *((_BYTE *)v20 + 8) = *((_BYTE *)v13 + 8);
          *v16 = v17;
          v16[2] = *((_QWORD *)v13 + 2);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 = (llvm *)((char *)v13 + 24);
        v12 -= 24;
      }
      while (v12);
    }
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(24 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v18 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v18)
    {
      v19 = 24 * v18;
      do
      {
        *result = 0;
        result[1] = 0;
        result += 3;
        v19 -= 24;
      }
      while (v19);
    }
  }
  return result;
}

uint64_t sub_22ED4E804(uint64_t a1, int a2, char a3, char a4, unsigned int a5, int a6, char *a7, uint64_t a8, char *a9, uint64_t a10, uint64_t *a11, uint64_t a12, uint64_t a13, char *a14, int a15, int a16, unsigned int a17, int a18, int a19)
{
  uint64_t v19;
  uint64_t *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  size_t v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  int *v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  std::string::size_type v44;
  std::string *v45;
  __int128 *v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  void *v51;
  unsigned __int8 *v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int i;
  uint64_t v58;
  uint64_t v59;
  unsigned int *v60;
  void *v61;
  size_t v62;
  unsigned int v63;
  _DWORD *v64;
  int *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  int v70;
  char v71;
  _QWORD *v72;
  unsigned __int8 *v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  std::string::size_type v77;
  unint64_t v78;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  unsigned int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  size_t v97;
  const void *v98;
  uint64_t *p_dst;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  unsigned __int8 *v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  unsigned int v114;
  BOOL v115;
  unsigned int v116;
  uint64_t v117;
  char *v118;
  char v119;
  uint64_t v120;
  _DWORD *v121;
  uint64_t v122;
  unsigned __int8 **v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  __int128 v132;
  char v133;
  BOOL v134;
  const std::string::value_type *v135;
  std::string::size_type v136;
  std::string::size_type v137;
  std::string *v138;
  uint64_t *v139;
  char v140;
  std::string::size_type v141;
  int v142;
  size_t v143;
  _BYTE *v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  int v149;
  int v150;
  _QWORD *v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  char v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  int v161;
  uint64_t v162;
  int v163;
  int v164;
  char *v165;
  _DWORD *v166;
  int *v167;
  _WORD *v168;
  uint64_t v169;
  BOOL v170;
  char *v171;
  uint64_t v172;
  unint64_t v173;
  void **v174;
  char *v175;
  char *v176;
  uint64_t v177;
  unint64_t v178;
  void **v179;
  char *v180;
  uint64_t v182;
  uint64_t j;
  uint64_t v184;
  unsigned __int8 *v185;
  unsigned __int8 *v186;
  unsigned __int8 *v187;
  signed __int8 v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  BOOL v200;
  uint64_t v201;
  int v202;
  unsigned int v203;
  _BOOL4 v204;
  int v205;
  uint64_t v206;
  uint64_t *v207;
  uint64_t v208;
  int v209;
  BOOL v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  unsigned int v214;
  unint64_t v215;
  unint64_t v216;
  BOOL v217;
  uint64_t v218;
  _DWORD *v219;
  _DWORD *v220;
  uint64_t v221;
  int v222;
  int v223;
  uint64_t v224;
  uint64_t v225;
  _DWORD *v226;
  uint64_t v227;
  int v229;
  uint64_t v230;
  int v231;
  unsigned int *v232;
  uint64_t v233;
  std::string::size_type *v234;
  char *v235;
  uint64_t v236;
  const char *v237;
  size_t v238;
  int Key;
  uint64_t v243;
  unsigned int v244;
  unsigned int *v245;
  unsigned int v246;
  uint64_t v247;
  unsigned int v248;
  unsigned __int8 *v249;
  uint64_t v250;
  uint64_t v252;
  const char *v253;
  const void *v254;
  size_t v255;
  uint64_t v256;
  __n128 v257;
  uint64_t *v258;
  uint64_t v259;
  uint64_t *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  int v265;
  __n128 v266;
  uint64_t v267;
  unsigned int *v268;
  std::string::size_type v269;
  void **v270;
  unint64_t v271;
  const void **v272;
  const std::nothrow_t *v273;
  unint64_t v274;
  __n128 *v275;
  char *v276;
  int v277;
  const void *v278;
  uint64_t v279;
  char *v280;
  size_t v281;
  const void *v282;
  uint64_t v283;
  uint64_t v284;
  char *v285;
  uint64_t v286;
  __n128 *v287;
  unsigned int v288;
  int v289;
  std::string::size_type v290;
  int v291;
  int v292;
  int v293;
  uint64_t v294;
  int v295;
  uint64_t v296;
  unsigned int *v297;
  int v298;
  int v299;
  int v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  int v306;
  int v310;
  int v311;
  int v312;
  uint64_t v314;
  int v315;
  int v316;
  unsigned int v318[24];
  uint64_t v319;
  _BYTE v320[100];
  unsigned int v321;
  int v322;
  unsigned int v323;
  unsigned int v324[25];
  unsigned int v325;
  unsigned int v326[24];
  uint64_t __dst;
  __int128 v328;
  uint64_t v329;
  unsigned int v330;
  char v331;
  uint64_t v332[4];
  void *v333[4];
  _BYTE v334[56];
  uint64_t v335;
  std::string v336;
  __int128 v337;
  uint64_t v338;
  char v339;
  __int128 v340;
  uint64_t v341;
  void *v342;
  uint64_t v343;
  _QWORD *v344[3];
  void *v345[2];
  char v346;
  void *v347;
  char v348;
  __int128 v349;
  uint64_t v350;
  void *v351;
  uint64_t v352;
  _QWORD *v353[3];
  void *v354[2];
  char v355;
  void *__p;
  char v357;
  void *v358;
  uint64_t v359;
  _BYTE v360[512];
  _BYTE v361[24];
  _QWORD v362[8];

  v22 = a11;
  v362[5] = *MEMORY[0x24BDAC8D0];
  v358 = v360;
  v359 = 0x400000000;
  v23 = *(_QWORD *)(a1 + 224);
  if (!v23)
    v23 = *(_QWORD *)(a1 + 216);
  v24 = (*(_WORD *)(v23 + 8) & 0x7E) - 52;
  if (v23)
    v25 = v23 - 72;
  else
    v25 = 0;
  if (v24 >= 6)
    v26 = 0;
  else
    v26 = v25;
  v332[1] = 0;
  v332[0] = 0;
  v332[2] = 0x1000000000;
  sub_22F36FB08(*(_QWORD *)(a1 + 88), v332, v26);
  v315 = a5;
  if (a5)
  {
    v27 = 0;
    v28 = 8 * a5;
    while (1)
    {
      v29 = *(_QWORD *)&a7[v27];
      if (v29)
      {
        v32 = *(unsigned int **)(v29 + 16);
        v33 = *v32;
        v30 = v32 + 4;
        v31 = v33;
      }
      else
      {
        v30 = 0;
        v31 = 0;
      }
      v34 = *(_DWORD **)&a9[v27];
      v35 = v34 + 5;
      sub_22E5EF89C((uint64_t)&v349, &v34[v34[1] + 5], ((*v34 >> 21) & 7u) * v34[4], v30, v31);
      if ((sub_22F424BE0(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 15088), (uint64_t)&v349) & 1) == 0)
      {
        sub_22F308EA4((_QWORD *)a1, *v35, 0xAB1u, 0, (uint64_t)&v340);
        sub_22E90749C((uint64_t)&v340, v354);
        sub_22E903BEC((unsigned int *)&v340);
        v19 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 88, 3);
        sub_22F3F1CB8(v19, *(_QWORD *)(a1 + 88), a2, a3, a4, v315, a6, a7, a9, v22, a13, a15, a14, a17, v306, a19);
        goto LABEL_25;
      }
      v36 = sub_22EB19A28(a1);
      if ((v36 & 1) != 0)
      {
        v19 = 1;
LABEL_25:
        v47 = 1;
        goto LABEL_26;
      }
      v37 = v22;
      v38 = a7;
      v39 = v19;
      v40 = v36 & 0xFFFFFFFFFFFFFFFELL;
      v37[v27 / 8] = v36 & 0xFFFFFFFFFFFFFFFELL;
      if ((sub_22ED50A84(v36 & 0xFFFFFFFFFFFFFFFELL, (_QWORD *)a1) & 1) != 0
        || (v349 & 1) != 0 && sub_22ED50DC8((_QWORD *)a1, (unsigned __int8 *)v40, (uint64_t)&v349, 0))
      {
        goto LABEL_22;
      }
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v40 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) == 9)
        break;
      sub_22E5EE1D0((uint64_t)&v358, &v349);
      if ((*(_BYTE *)(v40 + 1) & 0x80) == 0)
      {
        switch(sub_22F004C08(v40, *(_QWORD *)(a1 + 88), 0))
        {
          case 0u:
          case 0xAu:
            goto LABEL_43;
          case 2u:
          case 6u:
            sub_22F0D5A50(v40);
            v48 = *(_QWORD *)(a11[v27 / 8] + 8);
            *(_QWORD *)&v340 = &unk_24FAB6EF8;
            DWORD2(v340) = 3243;
            if ((sub_22EE8B0B0(a1, v49, v48) & 1) == 0)
              goto LABEL_41;
            v47 = 1;
            v19 = 1;
            goto LABEL_23;
          case 5u:
            v52 = sub_22EFFF40C((unsigned __int8 *)v40, *(_QWORD *)(a1 + 88));
            sub_22ED50F50((uint64_t)v52, (unsigned __int8 *)v40, (_QWORD *)a1);
LABEL_43:
            v53 = sub_22EF5CDF0(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(v40 + 8) & 0xFFFFFFFFFFFFFFF0));
            if (((*(uint64_t (**)(_QWORD, uint64_t *, int *, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 88) + 15088)
                                                                                       + 328))(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 15088), v332, &v35[v34[1]], ((*v34 >> 21) & 7u) * v34[4], v53) & 1) != 0)
            {
              v47 = 0;
              goto LABEL_45;
            }
            sub_22F0D5A50(v40);
            sub_22F308EA4((_QWORD *)a1, v54, 0xAB2u, 0, (uint64_t)&v340);
            sub_22E90749C((uint64_t)&v340, v354);
            sub_22E903BEC((unsigned int *)&v340);
            v19 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 88, 3);
            a7 = v38;
            v22 = a11;
            sub_22F3F1CB8(v19, *(_QWORD *)(a1 + 88), a2, a3, a4, v315, a6, a7, a9, a11, a13, a15, a14, a17, v306, a19);
            break;
          default:
LABEL_41:
            sub_22F0D5A50(v40);
            sub_22E8FCA40((_QWORD *)a1, v50, 0xAB0u, 0, (uint64_t)&v340);
            sub_22F0D4E74(v40);
            v333[0] = v51;
            v46 = &v340;
            v45 = (std::string *)v333;
            goto LABEL_21;
        }
        goto LABEL_25;
      }
      v47 = 4;
LABEL_45:
      v19 = v39;
LABEL_23:
      a7 = v38;
      v22 = a11;
LABEL_26:
      if (v357 < 0)
        operator delete(__p);
      if (v355 < 0)
        operator delete(v354[0]);
      sub_22F242DFC((uint64_t)v353, v353[1]);
      if (v351 != &v352)
        free(v351);
      if ((v47 | 4) != 4)
        goto LABEL_241;
      v27 += 8;
      if (v28 == v27)
        goto LABEL_47;
    }
    sub_22F0D5A50(v40);
    sub_22E8FCA40((_QWORD *)a1, v41, 4u, 0, (uint64_t)&v340);
    v333[0] = *(void **)(v40 + 8);
    v42 = sub_22E8901B8((uint64_t)&v340, (uint64_t *)v333);
    *(_DWORD *)v361 = 0;
    v43 = sub_22E8900C4(v42, (int *)v361);
    sub_22F0D4E74(v40);
    v336.__r_.__value_.__r.__words[0] = v44;
    v45 = &v336;
    v46 = (__int128 *)v43;
LABEL_21:
    sub_22E8906A0((uint64_t)v46, (uint64_t *)v45);
    sub_22E903BEC((unsigned int *)&v340);
LABEL_22:
    v19 = 1;
    v47 = 1;
    goto LABEL_23;
  }
LABEL_47:
  *(_QWORD *)&v349 = &v350;
  *((_QWORD *)&v349 + 1) = 0x400000000;
  v55 = a6;
  v56 = v315;
  if (a6)
  {
    for (i = 0; v55 != i; ++i)
    {
      v58 = (v56 + i);
      v59 = *(_QWORD *)&a7[8 * v58];
      if (v59)
      {
        v60 = *(unsigned int **)(v59 + 16);
        v63 = *v60;
        v61 = v60 + 4;
        v62 = v63;
      }
      else
      {
        v61 = 0;
        v62 = 0;
      }
      v64 = *(_DWORD **)&a9[8 * v58];
      v65 = v64 + 5;
      sub_22E5EF89C((uint64_t)&v340, &v64[v64[1] + 5], ((*v64 >> 21) & 7u) * v64[4], v61, v62);
      if ((sub_22F1E808C(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 15088), (uint64_t)v358, v359, (uint64_t)&v340) & 1) == 0)
      {
        sub_22F308EA4((_QWORD *)a1, *v65, 0xAADu, 0, (uint64_t)v333);
        sub_22E90749C((uint64_t)v333, v345);
        sub_22E903BEC((unsigned int *)v333);
        v19 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 88, 3);
        v56 = v315;
        sub_22F3F1CB8(v19, *(_QWORD *)(a1 + 88), a2, a3, a4, v315, v55, a7, a9, v22, a13, a15, a14, a17, v306, a19);
        v70 = 1;
        goto LABEL_60;
      }
      v66 = sub_22EB19A28(a1);
      if ((v66 & 1) != 0)
      {
        v19 = 1;
        v70 = 1;
        goto LABEL_59;
      }
      v67 = a7;
      v68 = v19;
      v69 = v66 & 0xFFFFFFFFFFFFFFFELL;
      v22[v58] = v66 & 0xFFFFFFFFFFFFFFFELL;
      if ((sub_22ED50A84(v66 & 0xFFFFFFFFFFFFFFFELL, (_QWORD *)a1) & 1) != 0)
        goto LABEL_55;
      v71 = v340;
      if ((v340 & 1) != 0)
      {
        v70 = 1;
        if (sub_22ED50DC8((_QWORD *)a1, (unsigned __int8 *)v69, (uint64_t)&v340, 1u))
        {
          v19 = 1;
          goto LABEL_56;
        }
        v71 = v340;
      }
      if ((v71 & 3) == 1)
      {
        if ((*(_DWORD *)v69 & 0x8000) != 0)
        {
          v72 = (_QWORD *)a1;
        }
        else
        {
          v72 = (_QWORD *)a1;
          if ((*(_DWORD *)v69 & 0x300) != 0x100)
          {
            v73 = sub_22EFFF40C((unsigned __int8 *)v69, *(_QWORD *)(a1 + 88));
            if (v73 == (unsigned __int8 *)v69 || (*(_DWORD *)v73 & 0x300) != 0x100)
            {
              sub_22F0D5A50(v69);
              sub_22E8FCA40((_QWORD *)a1, v75, 0xAAFu, 0, (uint64_t)v333);
              v76 = sub_22E90749C((uint64_t)v333, v345);
              sub_22F0D4E74(v69);
              v336.__r_.__value_.__r.__words[0] = v77;
              sub_22E8906A0(v76, (uint64_t *)&v336);
              sub_22E903BEC((unsigned int *)v333);
LABEL_55:
              v19 = 1;
              v70 = 1;
              goto LABEL_56;
            }
            sub_22ED50F50((uint64_t)v73, (unsigned __int8 *)v69, (_QWORD *)a1);
          }
        }
      }
      else
      {
        v22 = a11;
        v70 = 1;
        v74 = sub_22EB1B954(a1, (void *)a11[v58]);
        if ((v74 & 1) != 0)
        {
          v19 = 1;
          a7 = v67;
          goto LABEL_57;
        }
        v69 = v74 & 0xFFFFFFFFFFFFFFFELL;
        a11[v58] = v74 & 0xFFFFFFFFFFFFFFFELL;
        v72 = (_QWORD *)a1;
        if ((v340 & 0x12) == 0x10 && (*(_BYTE *)(v69 + 2) & 1) == 0)
        {
          LOWORD(v336.__r_.__value_.__l.__data_) = 0;
          v336.__r_.__value_.__l.__size_ = 0;
          LODWORD(v336.__r_.__value_.__r.__words[2]) = 0;
          if (sub_22F005120((unsigned __int8 *)(v74 & 0xFFFFFFFFFFFFFFFELL), (uint64_t)&v336, *(_QWORD *)(a1 + 88), 1))
          {
            v330 = 1;
            v329 = 0;
            v331 = 0;
            if (sub_22F364C68((uint64_t)&v336.__r_.__value_.__r.__words[2], (llvm::APInt *)&v329, *(_QWORD *)(v69 + 8), *(_QWORD *)(a1 + 88))&& (sub_22F34536C((uint64_t)&v340, (llvm::APInt *)&v329) & 1) == 0)
            {
              sub_22F0D5A50(v69);
              sub_22E8FCA40((_QWORD *)a1, v96, 0xE31u, 0, (uint64_t)v333);
              *(_QWORD *)v361 = v362;
              *(_OWORD *)&v361[8] = xmmword_22F455490;
              llvm::APInt::toString();
              v97 = *(_QWORD *)&v361[8];
              if (*(_QWORD *)&v361[8] > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_463:
                abort();
              v98 = *(const void **)v361;
              if (*(_QWORD *)&v361[8] >= 0x17uLL)
              {
                v100 = (*(_QWORD *)&v361[8] & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((*(_QWORD *)&v361[8] | 7) != 0x17)
                  v100 = *(_QWORD *)&v361[8] | 7;
                v101 = v100 + 1;
                p_dst = (uint64_t *)operator new(v100 + 1);
                *((_QWORD *)&v328 + 1) = v101 | 0x8000000000000000;
                __dst = (uint64_t)p_dst;
                *(_QWORD *)&v328 = v97;
              }
              else
              {
                HIBYTE(v328) = v361[8];
                p_dst = &__dst;
                if (!*(_QWORD *)&v361[8])
                {
LABEL_126:
                  *((_BYTE *)p_dst + v97) = 0;
                  if (*(_QWORD **)v361 != v362)
                    free(*(void **)v361);
                  v102 = sub_22F2F3734((uint64_t)v333, (void **)&__dst);
                  v103 = sub_22E90749C(v102, v345);
                  sub_22F0D4E74(v69);
                  *(_QWORD *)v361 = v104;
                  sub_22E8906A0(v103, (uint64_t *)v361);
                  if (SHIBYTE(v328) < 0)
                    operator delete((void *)__dst);
                  sub_22E903BEC((unsigned int *)v333);
                  if (v330 >= 0x41 && v329)
                    MEMORY[0x2348A0E84](v329, 0x1000C8000313F17);
                  if (LODWORD(v336.__r_.__value_.__r.__words[2]) >= 2)
                    sub_22EF53BC0((uint64_t *)&v336.__r_.__value_.__r.__words[2]);
                  goto LABEL_55;
                }
              }
              memmove(p_dst, v98, v97);
              goto LABEL_126;
            }
            if (v330 >= 0x41 && v329)
              MEMORY[0x2348A0E84](v329, 0x1000C8000313F17);
          }
          if (LODWORD(v336.__r_.__value_.__r.__words[2]) >= 2)
            sub_22EF53BC0((uint64_t *)&v336.__r_.__value_.__r.__words[2]);
        }
      }
      v78 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v69 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0;
      if ((v340 & 2) != 0 && *(_QWORD *)v78 && (*(_DWORD *)(*(_QWORD *)v78 + 16) & 0xFF800FF) == 86507531)
      {
        sub_22F0D5A50(v69);
        sub_22E8FCA40(v72, v90, 5u, 0, (uint64_t)v333);
        v336.__r_.__value_.__r.__words[0] = *(_QWORD *)(v69 + 8);
        v91 = sub_22E8901B8((uint64_t)v333, (uint64_t *)&v336);
        v92 = sub_22E90749C(v91, v345);
        sub_22F0D4E74(v69);
        *(_QWORD *)v361 = v93;
        sub_22E8906A0(v92, (uint64_t *)v361);
        goto LABEL_106;
      }
      if (*(_BYTE *)(*(_QWORD *)v78 + 16) == 9)
      {
        sub_22F0D5A50(v69);
        sub_22E8FCA40(v72, v80, 4u, 0, (uint64_t)v333);
        v336.__r_.__value_.__r.__words[0] = *(_QWORD *)(v69 + 8);
        v81 = sub_22E8901B8((uint64_t)v333, (uint64_t *)&v336);
        LODWORD(__dst) = 1;
        v82 = sub_22E8900C4(v81, (int *)&__dst);
        v83 = v69;
        v19 = 1;
        sub_22F0D4E74(v83);
        *(_QWORD *)v361 = v84;
        sub_22E8906A0(v82, (uint64_t *)v361);
        sub_22E903BEC((unsigned int *)v333);
        goto LABEL_107;
      }
      sub_22E5EE1D0((uint64_t)&v349, &v340);
      v85 = *(_QWORD *)(a11[v58] + 8);
      v86 = *(_QWORD *)(v85 & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v86 + 17) & 4) != 0)
      {
        v70 = 8;
LABEL_111:
        v19 = v68;
        goto LABEL_56;
      }
      v87 = *(_QWORD *)(*(_QWORD *)(v86 + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v87)
        v88 = (*(_DWORD *)(v87 + 16) & 0xFF800FF) == 86507531;
      else
        v88 = 0;
      if (v88 && (v340 & 1) != 0
        || (sub_22F0D5A50(v69), v333[0] = &unk_24FAB6EF8,
                                LODWORD(v333[1]) = 3243,
                                (sub_22EE8B0B0(a1, v89, v85) & 1) == 0))
      {
        v94 = sub_22EF5CDF0(*(_QWORD *)(a1 + 88), v86);
        if (((*(uint64_t (**)(_QWORD, uint64_t *, int *, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 88)
                                                                                                 + 15088)
                                                                                   + 336))(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 15088), v332, &v65[v64[1]], ((*v64 >> 21) & 7u) * v64[4], v94) & 1) != 0)
        {
          v70 = 0;
          goto LABEL_111;
        }
        sub_22F0D5A50(v69);
        sub_22F308EA4((_QWORD *)a1, v95, 0xAAEu, 0, (uint64_t)v333);
        sub_22E90749C((uint64_t)v333, v345);
LABEL_106:
        sub_22E903BEC((unsigned int *)v333);
        v19 = 1;
LABEL_107:
        v70 = 1;
        goto LABEL_56;
      }
      v19 = 1;
      v70 = 1;
LABEL_56:
      a7 = v67;
      v22 = a11;
LABEL_57:
      v55 = a6;
LABEL_59:
      v56 = v315;
LABEL_60:
      if (v348 < 0)
        operator delete(v347);
      if (v346 < 0)
        operator delete(v345[0]);
      sub_22F242DFC((uint64_t)v344, v344[1]);
      if (v342 != &v343)
        free(v342);
      if ((v70 | 8) != 8)
        goto LABEL_229;
    }
  }
  v105 = a15;
  if (a15)
  {
    v162 = 0;
    v163 = 0;
    v164 = 0;
    v165 = a14;
    do
    {
      v166 = *(_DWORD **)&v165[v162];
      v167 = v166 + 5;
      v168 = &v166[v166[1] + 5];
      v169 = ((*v166 >> 21) & 7u) * v166[4];
      v333[0] = v168;
      v333[1] = (void *)v169;
      if (!sub_22F424B40(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 15088), v168, v169))
      {
        sub_22F308EA4((_QWORD *)a1, *v167, 0xAB9u, 0, (uint64_t)&v340);
        sub_22F2F2210((uint64_t)&v340, (uint64_t)v333);
        sub_22E903BEC((unsigned int *)&v340);
        v19 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 88, 3);
        sub_22F3F1CB8(v19, *(_QWORD *)(a1 + 88), a2, a3, a4, v315, a6, a7, a9, v22, a13, a15, a14, a17, v306, a19);
        goto LABEL_229;
      }
      if ((_DWORD)v169 == 6)
      {
        v170 = *(_DWORD *)v168 == 1769434741 && v168[2] == 25710;
        v165 = a14;
        if (v170)
        {
          v164 = *v167;
          v163 = 1;
        }
      }
      else
      {
        v165 = a14;
      }
      v162 += 8;
    }
    while (8 * a15 != v162);
    v56 = v315;
    v105 = a15;
    if (a17 && v163)
    {
      sub_22F308EA4((_QWORD *)a1, v164, 0xABAu, 0, (uint64_t)v326);
      sub_22E903BEC(v326);
      v19 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 88, 3);
      sub_22F3F1CB8(v19, *(_QWORD *)(a1 + 88), a2, a3, a4, v315, a6, a7, a9, v22, a13, a15, a14, a17, v306, a19);
      goto LABEL_229;
    }
  }
  v19 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 88, 3);
  v106 = (unsigned __int8 *)sub_22F3F1CB8(v19, *(_QWORD *)(a1 + 88), a2, a3, a4, v56, a6, a7, a9, v22, a13, v105, a14, a17, v306, a19);
  *(_QWORD *)&v340 = &v341;
  *((_QWORD *)&v340 + 1) = 0x800000000;
  v325 = 0;
  v107 = sub_22F0D715C(v106, (uint64_t)&v340, *(_QWORD **)(a1 + 88), (int *)&v325);
  if (v107)
  {
    v288 = v107;
    v289 = sub_22EFF9E30(a13, v325, *(uint64_t **)(a1 + 112), *(_DWORD **)(a1 + 72), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 15088), 0, 0);
    sub_22F308EA4((_QWORD *)a1, v289, v288, 0, (uint64_t)v333);
    sub_22F0D4E74(a13);
    v336.__r_.__value_.__r.__words[0] = v290;
    sub_22E8906A0((uint64_t)v333, (uint64_t *)&v336);
    goto LABEL_458;
  }
  v314 = v19;
  v108 = DWORD2(v340);
  if (DWORD2(v340))
  {
    v109 = 0;
    while (1)
    {
      v110 = v340;
      v111 = v340 + 48 * v109;
      if (*(_DWORD *)v111 != 1)
        goto LABEL_164;
      v112 = *(_DWORD *)(v340 + 48 * v109 + 32);
      v113 = *(unsigned int *)(v314 + 16);
      v114 = *(_DWORD *)(v314 + 20) + v113;
      v115 = *(_DWORD *)(v314 + 80) && v112 >= v114;
      if (v115)
        goto LABEL_164;
      if ((_DWORD)v113)
      {
        v115 = v112 >= v114;
        v116 = v112 - v114;
        if (v115)
        {
          v117 = 0;
          v118 = (char *)v358;
          do
          {
            v119 = *v118;
            v118 += 128;
            if ((v119 & 4) != 0)
            {
              if (!v116)
              {
                v112 = v117;
                break;
              }
              --v116;
            }
          }
          while (v113 != ++v117);
        }
      }
      v120 = *(_QWORD *)(*(_QWORD *)(a11[v112] + 8) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v120 + 17) & 4) != 0)
        goto LABEL_164;
      v121 = *(_DWORD **)&a9[8 * v112];
      if ((sub_22F1110EC(*(_QWORD *)(*(_QWORD *)(a11[v112] + 8) & 0xFFFFFFFFFFFFFFF0), 0) & 1) != 0)
        goto LABEL_164;
      v122 = sub_22EF5CDF0(*(_QWORD *)(a1 + 88), v120);
      v328 = 0uLL;
      __dst = 0;
      v123 = (unsigned __int8 **)(v110 + 48 * v109 + 8);
      if (*(char *)(v111 + 31) < 0)
        v124 = **v123;
      else
        v124 = *(unsigned __int8 *)v123;
      if ((word_22F4ADB24[v124] & 0x60) == 0)
        LOBYTE(v124) = 0;
      if (((*(uint64_t (**)(_QWORD, _DWORD *, _QWORD, _QWORD, uint64_t, uint64_t *))(**(_QWORD **)(*(_QWORD *)(a1 + 88) + 15088)
                                                                                            + 344))(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 15088), &v121[v121[1] + 5], ((*v121 >> 21) & 7u) * v121[4], (char)v124, v122, &__dst) & 1) == 0)
      {
        sub_22F0D5A50(a11[v112]);
        sub_22F308EA4((_QWORD *)a1, v125, 0x184Eu, 0, (uint64_t)v324);
        sub_22E903BEC(v324);
        v126 = HIBYTE(v328) & 0x7F;
        if (v328 < 0)
          v126 = v328;
        if (v126)
          break;
      }
LABEL_162:
      if (SHIBYTE(v328) < 0)
        operator delete((void *)__dst);
LABEL_164:
      if (++v109 == v108)
        goto LABEL_195;
    }
    v127 = v110 + 48 * v109;
    v129 = *(_DWORD *)(v127 + 36);
    v128 = v127 + 36;
    sub_22F308EA4((_QWORD *)a1, v129, 0x1547u, 0, (uint64_t)&v336);
    v130 = sub_22E90749C((uint64_t)&v336, &__dst);
    v131 = v130;
    v132 = *(_OWORD *)(v130 + 9);
    *(_OWORD *)v333 = *(_OWORD *)v130;
    *(_OWORD *)((char *)&v333[1] + 1) = v132;
    v334[0] = 0;
    v334[48] = 0;
    if (*(_BYTE *)(v130 + 80))
      sub_22E907424((uint64_t)v334, v130 + 32);
    v335 = *(_QWORD *)(v131 + 88);
    sub_22E903BEC((unsigned int *)&v336);
    std::operator+<char>();
    v133 = *((_BYTE *)v123 + 23);
    v134 = v133 < 0;
    if (v133 >= 0)
      v135 = (const std::string::value_type *)v123;
    else
      v135 = (const std::string::value_type *)*v123;
    v136 = v133 & 0x7F;
    if (v134)
      v137 = (std::string::size_type)v123[1];
    else
      v137 = v136;
    v138 = std::string::append(&v336, v135, v137);
    v139 = (uint64_t *)v138->__r_.__value_.__r.__words[0];
    *(_QWORD *)v361 = v138->__r_.__value_.__l.__size_;
    *(_QWORD *)&v361[7] = *(std::string::size_type *)((char *)&v138->__r_.__value_.__r.__words[1] + 7);
    v140 = HIBYTE(v138->__r_.__value_.__r.__words[2]);
    v138->__r_.__value_.__l.__size_ = 0;
    v138->__r_.__value_.__r.__words[2] = 0;
    v138->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v328) < 0)
      operator delete((void *)__dst);
    __dst = (uint64_t)v139;
    *(_QWORD *)&v328 = *(_QWORD *)v361;
    *(_QWORD *)((char *)&v328 + 7) = *(_QWORD *)&v361[7];
    HIBYTE(v328) = v140;
    if (SHIBYTE(v336.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v336.__r_.__value_.__l.__data_);
      v140 = HIBYTE(v328);
      v139 = (uint64_t *)__dst;
    }
    v141 = *(_QWORD *)v128;
    v142 = *(_DWORD *)(v128 + 8);
    if (v140 < 0)
    {
      v143 = v328;
    }
    else
    {
      v139 = &__dst;
      v143 = v140 & 0x7F;
    }
    *(std::string::size_type *)((char *)&v336.__r_.__value_.__r.__words[1] + 4) = 0;
    v336.__r_.__value_.__s.__data_[20] = 0;
    v338 = 0;
    v337 = 0uLL;
    v339 = 0;
    v336.__r_.__value_.__r.__words[0] = v141;
    v336.__r_.__value_.__s.__data_[8] = v142;
    if (v143 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_463;
    if (v143 >= 0x17)
    {
      v145 = (v143 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v143 | 7) != 0x17)
        v145 = v143 | 7;
      v146 = v145 + 1;
      v144 = operator new(v145 + 1);
      *(_QWORD *)&v361[8] = v143;
      *(_QWORD *)&v361[16] = v146 | 0x8000000000000000;
      *(_QWORD *)v361 = v144;
    }
    else
    {
      v361[23] = v143;
      v144 = v361;
      if (!v143)
        goto LABEL_192;
    }
    memmove(v144, v139, v143);
LABEL_192:
    v144[v143] = 0;
    v337 = *(_OWORD *)v361;
    v338 = *(_QWORD *)&v361[16];
    sub_22E890748((uint64_t)v333, &v336);
    if (SHIBYTE(v338) < 0)
      operator delete((void *)v337);
    sub_22E903BEC((unsigned int *)v333);
    goto LABEL_162;
  }
LABEL_195:
  v323 = -1;
  v147 = v359;
  if ((_DWORD)v359)
  {
    v148 = 0;
    v149 = -1;
    v19 = v314;
    v150 = v315;
    v151 = (_QWORD *)a1;
    while (1)
    {
      v152 = (char *)v358 + 128 * v148;
      v155 = (char *)*((_QWORD *)v152 + 10);
      v154 = v152 + 80;
      v153 = v155;
      v156 = v154[23];
      v157 = v156;
      if (v156 >= 0)
        v153 = v154;
      v158 = *((_QWORD *)v154 + 1);
      v159 = v156 & 0x7F;
      if (v157 >= 0)
        v158 = v159;
      if (v158)
      {
        v160 = 0;
        do
        {
          v161 = *v153++;
          if (v161 == 44)
            ++v160;
          --v158;
        }
        while (v158);
      }
      else
      {
        v160 = 0;
      }
      LODWORD(v336.__r_.__value_.__l.__data_) = v160 + 1;
      if (v149 == -1)
      {
        v323 = v160 + 1;
        v149 = v160 + 1;
      }
      else if (v149 != v160 + 1)
      {
        sub_22F0D5A50(*(_QWORD *)(*(_QWORD *)(v314 + 32) + 8 * v148));
        sub_22F308EA4((_QWORD *)a1, v293, 0xAB8u, 0, (uint64_t)v333);
        v294 = sub_22E89519C((uint64_t)v333, &v323);
        sub_22E89519C(v294, (unsigned int *)&v336);
LABEL_458:
        sub_22E903BEC((unsigned int *)v333);
        goto LABEL_447;
      }
      if (++v148 == v359)
        goto LABEL_255;
    }
  }
  v147 = 0;
  v151 = (_QWORD *)a1;
  v150 = v315;
LABEL_255:
  *(_QWORD *)v361 = &v361[16];
  *(_QWORD *)&v361[8] = 0x400000000;
  sub_22E47EDD0((uint64_t)v361, v147, 0xFFFFFFFFLL);
  v182 = DWORD2(v349);
  if (DWORD2(v349))
  {
    for (j = 0; j != v182; ++j)
    {
      v184 = v349 + (j << 7);
      v187 = *(unsigned __int8 **)(v184 + 80);
      v186 = (unsigned __int8 *)(v184 + 80);
      v185 = v187;
      v188 = v186[23];
      v189 = v188;
      if (v188 >= 0)
        v185 = v186;
      v190 = *((_QWORD *)v186 + 1);
      v191 = v188 & 0x7F;
      if (v189 >= 0)
        v190 = v191;
      if (v190)
      {
        v192 = 0;
        v19 = v314;
        do
        {
          v193 = *v185++;
          if (v193 == 44)
            ++v192;
          --v190;
        }
        while (v190);
      }
      else
      {
        v192 = 0;
        v19 = v314;
      }
      v322 = v192 + 1;
      if (v323 == -1)
      {
        v323 = v192 + 1;
      }
      else if (v323 != v192 + 1)
      {
        sub_22F0D5A50(*(_QWORD *)(*(_QWORD *)(v19 + 32) + 8 * (*(_DWORD *)(v19 + 16) + j)));
        sub_22F308EA4(v151, v295, 0xAB8u, 0, (uint64_t)v333);
        v296 = sub_22E89519C((uint64_t)v333, &v323);
        v297 = (unsigned int *)&v322;
LABEL_460:
        sub_22E89519C(v296, v297);
        sub_22E903BEC((unsigned int *)v333);
        goto LABEL_445;
      }
      v194 = *(unsigned int *)(v349 + (j << 7) + 4);
      if ((_DWORD)v194 != -1)
      {
        v321 = *(_DWORD *)(v349 + (j << 7) + 4);
        if (*(_QWORD *)(*(_QWORD *)v361 + 8 * v194) != 0xFFFFFFFFLL)
        {
          sub_22F0D5A50(*(_QWORD *)(*(_QWORD *)(v19 + 32) + 8 * (*(_DWORD *)(v19 + 16) + j)));
          sub_22F308EA4(v151, v298, 0xAABu, 0, (uint64_t)v333);
          sub_22E89519C((uint64_t)v333, &v321);
          sub_22E903BEC((unsigned int *)v333);
          sub_22F0D5A50(*(_QWORD *)(*(_QWORD *)(v19 + 32)
                                  + 8
                                  * (*(_DWORD *)(v19 + 16) + *(_QWORD *)(*(_QWORD *)v361 + 8 * v321))));
          sub_22F308EA4(v151, v299, 0x1546u, 0, (uint64_t)v333);
          v296 = (uint64_t)v333;
          v297 = &v321;
          goto LABEL_460;
        }
        v195 = a11[v194];
        v196 = (j + v150);
        v197 = a11[v196];
        *(_QWORD *)(*(_QWORD *)v361 + 8 * v194) = j;
        if ((*(_BYTE *)(v195 + 1) & 0x80) == 0 && (*(_BYTE *)(v197 + 1) & 0x80) == 0)
        {
          v336.__r_.__value_.__r.__words[0] = *(_QWORD *)(v197 + 8);
          __dst = *(_QWORD *)(v195 + 8);
          if ((*(_QWORD *)((v336.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF0) + 8) | v336.__r_.__value_.__s.__data_[0] & 7) != (*(_QWORD *)((__dst & 0xFFFFFFFFFFFFFFF0) + 8) | __dst & 7))
          {
            v198 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v336.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
            v199 = *(_DWORD *)(v198 + 16);
            if (v198)
              v200 = v199 == 11;
            else
              v200 = 0;
            if (v200)
            {
              if (((*(_DWORD *)(v198 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
                goto LABEL_296;
            }
            else if (v198 && v199 == 44)
            {
              v201 = sub_22F114198(*(_QWORD *)(v198 + 24));
              if (((*(_BYTE *)(v201 + 74) & 1) != 0 || *(_QWORD *)(v201 + 128) > 7uLL)
                && (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v198 + 24)) + 76) & 0x80) == 0)
              {
LABEL_296:
                v312 = 0;
                v204 = 1;
                v311 = 1;
                goto LABEL_299;
              }
            }
            else if (v199 == 9)
            {
              goto LABEL_296;
            }
            v202 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v336.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF0)
                                                                      + 8) & 0xFFFFFFFFFFFFFFF0)
                                              + 16);
            if (v202 == 39)
              goto LABEL_296;
            if (v202 == 11)
            {
              v311 = 0;
              v203 = ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v336.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF0)
                                                         + 8) & 0xFFFFFFFFFFFFFFF0)
                                 + 16) >> 19) & 0x1FE)
                   - 210;
              v204 = v203 < 8;
              if (v203 < 8)
                v205 = 1;
              else
                v205 = 2;
            }
            else
            {
              v204 = 0;
              v311 = 0;
              v205 = 2;
            }
            v312 = v205;
LABEL_299:
            v206 = __dst;
            v207 = (uint64_t *)(__dst & 0xFFFFFFFFFFFFFFF0);
            v208 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(__dst & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
            v209 = *(_DWORD *)(v208 + 16);
            if (v208)
              v210 = v209 == 11;
            else
              v210 = 0;
            if (v210)
            {
              if (((*(_DWORD *)(v208 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
                goto LABEL_314;
            }
            else if (v208 && v209 == 44)
            {
              v211 = sub_22F114198(*(_QWORD *)(v208 + 24));
              if ((*(_BYTE *)(v211 + 74) & 1) != 0 || *(_QWORD *)(v211 + 128) > 7uLL)
              {
                v212 = sub_22F114198(*(_QWORD *)(v208 + 24));
                v206 = __dst;
                if ((*(_BYTE *)(v212 + 76) & 0x80) == 0)
                {
                  v213 = 0;
                  v207 = (uint64_t *)(__dst & 0xFFFFFFFFFFFFFFF0);
                  goto LABEL_320;
                }
              }
              else
              {
                v206 = __dst;
              }
LABEL_314:
              v207 = (uint64_t *)(v206 & 0xFFFFFFFFFFFFFFF0);
              v214 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v206 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                               + 16);
              if (v214 != 39)
              {
                if (v214 == 11)
                {
                  v310 = 0;
                  if (((v214 >> 19) & 0x1FE) - 210 < 8)
                    v213 = 1;
                  else
                    v213 = 2;
                }
                else
                {
                  v310 = 0;
                  v213 = 2;
                }
                goto LABEL_322;
              }
            }
            else if (v209 != 9)
            {
              goto LABEL_314;
            }
            v213 = 0;
LABEL_320:
            v310 = 1;
LABEL_322:
            v215 = sub_22EF5CDF0(*(_QWORD *)(a1 + 88), *v207);
            v216 = sub_22EF5CDF0(*(_QWORD *)(a1 + 88), *(_QWORD *)(v336.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF0));
            v217 = v312 == v213 && v204;
            if (v215 != v216 || !v217)
            {
              v218 = DWORD2(v340);
              if (DWORD2(v340))
              {
                v219 = (_DWORD *)(v340 + 32);
                v220 = (_DWORD *)(v340 + 32);
                v221 = DWORD2(v340);
                while (*(v220 - 8) != 1 || *v220 != (_DWORD)v196)
                {
                  v220 += 12;
                  if (!--v221)
                  {
                    v222 = 0;
                    goto LABEL_335;
                  }
                }
                v222 = 1;
LABEL_335:
                if (v216 < v215)
                  v223 = v222;
                else
                  v223 = 0;
                v224 = v321;
                v225 = DWORD2(v340);
                while (*(v219 - 8) != 1 || *v219 != (unint64_t)v321)
                {
                  v219 += 12;
                  if (!--v225)
                    goto LABEL_345;
                }
                if (v215 < v216)
                  v223 = 1;
              }
              else
              {
                v223 = 0;
                v224 = v321;
              }
LABEL_345:
              if ((v204 & (v223 ^ 1)) == 1 && (*((_BYTE *)v358 + 128 * v224) & 2) != 0)
              {
                if (sub_22F10DE3C(*(_QWORD *)(__dst & 0xFFFFFFFFFFFFFFF0))
                  && sub_22EF60A6C(*(_QWORD *)(a1 + 88), v215, 0) <= 0xF)
                {
                  sub_22EFF605C(v195);
                  sub_22F308EA4((_QWORD *)a1, v231, 0x1287u, 0, (uint64_t)v320);
                  v232 = (unsigned int *)v320;
                  goto LABEL_462;
                }
              }
              else
              {
                if ((v311 & v310) != 1)
                  goto LABEL_461;
                if (DWORD2(v340))
                {
                  v226 = (_DWORD *)(v340 + 32);
                  while (*(v226 - 8) != 1 || *v226 != (_DWORD)v196)
                  {
                    v226 += 12;
                    if (!--v218)
                      goto LABEL_353;
                  }
LABEL_461:
                  sub_22F0D5A50(v197);
                  sub_22F308EA4((_QWORD *)a1, v300, 0xAB7u, 0, (uint64_t)v333);
                  v301 = sub_22E8901B8((uint64_t)v333, (uint64_t *)&v336);
                  v302 = sub_22E8901B8(v301, &__dst);
                  sub_22F0D4E74(v195);
                  v329 = v303;
                  v304 = sub_22E8906A0(v302, &v329);
                  sub_22F0D4E74(v197);
                  v319 = v305;
                  sub_22E8906A0(v304, &v319);
                  v232 = (unsigned int *)v333;
LABEL_462:
                  sub_22E903BEC(v232);
                  v19 = v314;
                  goto LABEL_445;
                }
LABEL_353:
                if (!sub_22F007CB0((unsigned __int8 *)v197, *(_QWORD *)(a1 + 88), 0))
                  goto LABEL_461;
                v227 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(__dst & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
                if ((*(_DWORD *)(v227 + 16) & 0xFF800FF) != 0x530000B || v227 == 0)
                  v229 = 30;
                else
                  v229 = 31;
                v230 = sub_22E90092C(a1, v197, __dst, v229, 0, 0);
                a11[v196] = v230 & 0xFFFFFFFFFFFFFFFELL;
                *(_QWORD *)(*(_QWORD *)(v314 + 32) + 8 * (*(_DWORD *)(v314 + 16) + j)) = v230 & 0xFFFFFFFFFFFFFFFELL;
              }
            }
          }
          v151 = (_QWORD *)a1;
          v150 = v315;
          continue;
        }
        v151 = (_QWORD *)a1;
      }
    }
  }
  v233 = *(_QWORD *)(v151[11] + 15088);
  v333[1] = 0;
  v333[0] = 0;
  v333[2] = (void *)0x800000000;
  v234 = (std::string::size_type *)a11;
  if (a12 != a17)
  {
    v243 = 0;
    v244 = 0;
    do
    {
      v245 = *(unsigned int **)&a9[8 * v243];
      v246 = *v245;
      v247 = v245[1];
      v248 = v245[4];
      v249 = sub_22EFFEB40((unsigned __int8 *)a11[v243]);
      if (*v249 == 161)
      {
        v250 = *((_QWORD *)v249 + 2);
        if (v250 && (*(_DWORD *)(v250 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9)
        {
          v252 = 0;
          if ((*(_DWORD *)(v250 + 28) & 0x100) == 0)
            goto LABEL_396;
          v253 = "";
          if ((*(_BYTE *)(v250 + 96) & 7) != 5)
            goto LABEL_397;
          v257.n128_f64[0] = sub_22EFC8E88(v250);
          v258 = *(uint64_t **)v256;
          v259 = *(unsigned int *)(v256 + 8);
          v260 = *(uint64_t **)v256;
          if ((_DWORD)v259)
          {
            v261 = 8 * v259;
            v260 = *(uint64_t **)v256;
            while (*(_WORD *)(*v260 + 32) != 109)
            {
              ++v260;
              v261 -= 8;
              if (!v261)
                goto LABEL_395;
            }
          }
          if (v260 != &v258[v259])
          {
            do
            {
              v263 = *v258++;
              v262 = v263;
            }
            while (*(_WORD *)(v263 + 32) != 109);
            if ((*(unsigned int (**)(uint64_t, _QWORD, _QWORD, __n128))(*(_QWORD *)v233 + 296))(v233, *(_QWORD *)(v262 + 40), *(unsigned int *)(v262 + 36), v257))
            {
              v253 = sub_22F1E7CDC(v233, *(const char **)(v262 + 40), *(unsigned int *)(v262 + 36), 1);
              v252 = v264;
              goto LABEL_397;
            }
            v252 = 0;
            goto LABEL_396;
          }
        }
      }
LABEL_395:
      v252 = 0;
LABEL_396:
      v253 = "";
LABEL_397:
      v254 = (const void *)(*(uint64_t (**)(uint64_t, unsigned int *, _QWORD, const char *, uint64_t))(*(_QWORD *)v233 + 312))(v233, &v245[v247 + 5], ((v246 >> 21) & 7) * v248, v253, v252);
      if (v255)
        sub_22E3B39D4((llvm::StringMapImpl *)v333, v254, v255);
      v243 = ++v244;
    }
    while (a12 - (unint64_t)a17 > v244);
  }
  v316 = a6 + v315;
  v235 = a14;
  if (a15 < 1)
  {
LABEL_388:
    sub_22E3B3AD0((uint64_t)v333);
    goto LABEL_416;
  }
  v236 = a15;
  while (1)
  {
    v237 = (const char *)(*(_QWORD *)v235 + 4 * *(unsigned int *)(*(_QWORD *)v235 + 4) + 20);
    v238 = ((**(_DWORD **)v235 >> 21) & 7u) * *(_DWORD *)(*(_QWORD *)v235 + 16);
    if ((_DWORD)v238 == 6)
      break;
    if ((_DWORD)v238 != 2 || *(_WORD *)v237 != 25443)
      goto LABEL_382;
LABEL_387:
    v235 += 8;
    if (!--v236)
      goto LABEL_388;
  }
  if (*(_DWORD *)v237 == 1869440365
    && *(_WORD *)(*(_QWORD *)v235 + 4 * *(unsigned int *)(*(_QWORD *)v235 + 4) + 24) == 31090)
  {
    goto LABEL_387;
  }
  if (*(_DWORD *)v237 == 1769434741
    && *(_WORD *)(*(_QWORD *)v235 + 4 * *(unsigned int *)(*(_QWORD *)v235 + 4) + 24) == 25710)
  {
    goto LABEL_387;
  }
LABEL_382:
  sub_22F1E7CDC(v233, v237, v238, 1);
  Key = llvm::StringMapImpl::FindKey();
  if (Key == -1 || Key == (unint64_t)LODWORD(v333[1]))
    goto LABEL_387;
  v265 = *(_DWORD *)(*(_QWORD *)v235 + 20);
  sub_22E3B3AD0((uint64_t)v333);
  if (v265)
  {
    sub_22F308EA4((_QWORD *)a1, v265, 0x1430u, 0, (uint64_t)v318);
    sub_22E903BEC(v318);
  }
LABEL_416:
  v333[0] = &v333[2];
  v333[1] = (void *)0x400000000;
  v267 = v316 + a17;
  v19 = v314;
  if (!(v316 + a17))
  {
    v271 = 0;
    v272 = (const void **)&v333[2];
    v270 = &v333[2];
LABEL_428:
    sub_22ED522FC((uint64_t)v270, v272, v271, 0, 0, v266);
    goto LABEL_429;
  }
  do
  {
    if (*(_QWORD *)a7)
    {
      v268 = *(unsigned int **)(*(_QWORD *)a7 + 16);
      v269 = *v268;
      v336.__r_.__value_.__r.__words[0] = (std::string::size_type)(v268 + 4);
      v336.__r_.__value_.__l.__size_ = v269;
      v336.__r_.__value_.__r.__words[2] = *v234;
      sub_22F345420((unint64_t)v333, (__int128 *)&v336);
    }
    ++v234;
    a7 += 8;
    --v267;
  }
  while (v267);
  v270 = (void **)v333[0];
  v271 = LODWORD(v333[1]);
  v272 = (const void **)((char *)v333[0] + 24 * LODWORD(v333[1]));
  if (!LODWORD(v333[1]))
  {
    v271 = 0;
LABEL_427:
    v19 = v314;
    goto LABEL_428;
  }
  v273 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
  v274 = LODWORD(v333[1]);
  while (1)
  {
    v275 = (__n128 *)operator new(24 * v274, v273);
    if (v275)
      break;
    v134 = v274 > 1;
    v274 >>= 1;
    if (!v134)
      goto LABEL_427;
  }
  v287 = v275;
  sub_22ED522FC((uint64_t)v270, v272, v271, v275, v274, v266);
  operator delete(v287);
  v19 = v314;
LABEL_429:
  v276 = (char *)v333[0];
  v277 = (int)v333[1];
  if (!LODWORD(v333[1]))
  {
    v280 = (char *)v333[0];
    goto LABEL_438;
  }
  if (LODWORD(v333[1]) == 1)
    goto LABEL_439;
  v278 = *(const void **)v333[0];
  v279 = 24 * LODWORD(v333[1]) - 24;
  v280 = (char *)v333[0];
  while (1)
  {
    v281 = *((_QWORD *)v280 + 1);
    v282 = (const void *)*((_QWORD *)v280 + 3);
    if (v281 == *((_QWORD *)v280 + 4) && (!v281 || !memcmp(v278, *((const void **)v280 + 3), v281)))
      break;
    v280 += 24;
    v278 = v282;
    v279 -= 24;
    if (!v279)
      goto LABEL_439;
  }
LABEL_438:
  if (v280 == &v276[24 * v277])
  {
LABEL_439:
    if (*(_DWORD *)(v19 + 80))
    {
      v283 = *(unsigned int *)(a1 + 1904);
      if ((_DWORD)v283)
      {
        v284 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v283 - 8);
        *(_DWORD *)(v284 + 8) |= 0x10u;
      }
    }
    sub_22EB4E2D8(a1);
    sub_22EB48DCC(a1);
  }
  else
  {
    sub_22F0D5A50(*((_QWORD *)v280 + 5));
    sub_22E8FCA40((_QWORD *)a1, v291, 0x142Fu, 0, (uint64_t)&v336);
    sub_22F2F2210((uint64_t)&v336, (uint64_t)(v280 + 24));
    sub_22E903BEC((unsigned int *)&v336);
    sub_22F0D5A50(*((_QWORD *)v280 + 2));
    sub_22E8FCA40((_QWORD *)a1, v292, 0x15BCu, 0, (uint64_t)&v336);
    sub_22F2F2210((uint64_t)&v336, (uint64_t)v280);
    sub_22E903BEC((unsigned int *)&v336);
    v19 = 1;
  }
  if (v333[0] != &v333[2])
    free(v333[0]);
LABEL_445:
  if (*(_BYTE **)v361 != &v361[16])
    free(*(void **)v361);
LABEL_447:
  v285 = (char *)v340;
  if (DWORD2(v340))
  {
    v286 = 48 * DWORD2(v340);
    do
    {
      if (v285[v286 - 17] < 0)
        operator delete(*(void **)&v285[v286 - 40]);
      v286 -= 48;
    }
    while (v286);
    v285 = (char *)v340;
  }
  if (v285 != (char *)&v341)
    free(v285);
LABEL_229:
  v171 = (char *)v349;
  if (DWORD2(v349))
  {
    v172 = 0;
    v173 = (unint64_t)DWORD2(v349) << 7;
    do
    {
      v174 = (void **)&v171[v173];
      if (v171[v173 - 1] < 0)
        operator delete(*(v174 - 3));
      if (*((char *)v174 - 25) < 0)
        operator delete(*(void **)&v171[v173 - 48]);
      sub_22F242DFC((uint64_t)&v171[v173 - 72], *(_QWORD **)&v171[v173 - 64]);
      v175 = *(char **)&v171[v173 - 104];
      if (&v171[v173 - 88] != v175)
        free(v175);
      v171 -= 128;
      v172 += 128;
    }
    while (v173 != v172);
    v171 = (char *)v349;
  }
  if (v171 != (char *)&v350)
    free(v171);
LABEL_241:
  sub_22E622C5C((uint64_t)v332);
  v176 = (char *)v358;
  if ((_DWORD)v359)
  {
    v177 = 0;
    v178 = (unint64_t)v359 << 7;
    do
    {
      v179 = (void **)&v176[v178];
      if (v176[v178 - 1] < 0)
        operator delete(*(v179 - 3));
      if (*((char *)v179 - 25) < 0)
        operator delete(*(void **)&v176[v178 - 48]);
      sub_22F242DFC((uint64_t)&v176[v178 - 72], *(_QWORD **)&v176[v178 - 64]);
      v180 = *(char **)&v176[v178 - 104];
      if (&v176[v178 - 88] != v180)
        free(v180);
      v176 -= 128;
      v177 += 128;
    }
    while (v178 != v177);
    v176 = (char *)v358;
  }
  if (v176 != v360)
    free(v176);
  return v19;
}

uint64_t sub_22ED50A84(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  int v6;
  uint64_t v7;
  unsigned int v9;
  unsigned __int8 *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  unsigned __int8 **v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  int v20;
  uint64_t **v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  int v30;
  uint64_t **v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char v44;
  unsigned int v45[24];
  char v46;
  unsigned int v47[24];
  _QWORD *v48;
  unsigned int v49;
  unsigned int v50;
  _QWORD v51[5];

  v51[4] = *MEMORY[0x24BDAC8D0];
  v3 = a2[27];
  v4 = v3 - 72;
  if (v3)
    v5 = (*(_WORD *)(v3 + 8) & 0x7Eu) - 58 >= 0xFFFFFFFA;
  else
    v5 = 0;
  v6 = !v5;
  if (v6)
    v7 = 0;
  else
    v7 = v4;
  if ((v6 & 1) != 0 || !sub_22E474EBC(v4))
    return 0;
  v48 = v51;
  v50 = 4;
  v51[0] = a1;
  v9 = 1;
  while (1)
  {
    v10 = (unsigned __int8 *)v48[v9 - 1];
    v49 = v9 - 1;
    v11 = *v10;
    if (v11 == 161)
      break;
    if (v11 == 133)
    {
      sub_22F0D5A50((uint64_t)v10);
      sub_22E8FCA40(a2, v20, 0xAB4u, 0, (uint64_t)v47);
      sub_22E903BEC(v47);
      sub_22EFC8E88(v7);
      v22 = *v21;
      v23 = *((unsigned int *)v21 + 2);
      if ((_DWORD)v23 && *(_WORD *)(*v22 + 32) != 222)
      {
        v24 = 8 * v23 - 8;
        v25 = *v21;
        do
        {
          v26 = v25[1];
          ++v25;
          v24 -= 8;
        }
        while (*(_WORD *)(v26 + 32) != 222);
      }
      do
      {
        v28 = *v22++;
        v27 = v28;
      }
      while (*(_WORD *)(v28 + 32) != 222);
      v29 = (unsigned int *)&v46;
      goto LABEL_51;
    }
LABEL_17:
    sub_22F0D492C((uint64_t)v10);
    v38 = v40;
    v12 = v42;
    v39 = v41;
    v13 = v43;
    while (1)
    {
      v14 = v38;
      if (v38 == __PAIR128__(v13, v12))
        break;
      v15 = (unsigned __int8 **)v38;
      if ((BYTE8(v38) & 3) != 0)
      {
        if ((*((_QWORD *)&v38 + 1) & 0xFFFFFFFFFFFFFFFCLL) != 0)
          v15 = (unsigned __int8 **)((*((_QWORD *)&v38 + 1) & 0xFFFFFFFFFFFFFFFCLL) + 40);
        else
          v15 = (unsigned __int8 **)sub_22F3AC1A8(*(_QWORD *)v38);
      }
      v16 = *v15;
      if (*v15 && *v16 - 102 <= 0x84)
      {
        v17 = v49;
        if (v49 >= (unint64_t)v50)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v17 = v49;
        }
        v48[v17] = v16;
        ++v49;
      }
      if ((BYTE8(v14) & 3) != 0)
      {
        if (*((_QWORD *)&v14 + 1) < 4uLL)
          sub_22F3F2FE0((uint64_t)&v38, 1);
        else
          sub_22F0D8720((uint64_t)&v38);
      }
      else
      {
        *(_QWORD *)&v38 = v14 + 8;
      }
    }
    v9 = v49;
    if (!v49)
    {
      v18 = 0;
      goto LABEL_52;
    }
  }
  if ((*(_DWORD *)(*((_QWORD *)v10 + 2) + 28) & 0x7F) != 0x40)
    goto LABEL_17;
  if ((v10[2] & 4) != 0)
  {
    v40 = *((_OWORD *)v10 + 2);
    v30 = sub_22F0AB0EC((unint64_t *)&v40);
  }
  else
  {
    v30 = *((_DWORD *)v10 + 1);
  }
  sub_22E8FCA40(a2, v30, 0xAB3u, 0, (uint64_t)v45);
  sub_22E903BEC(v45);
  sub_22EFC8E88(v7);
  v32 = *v31;
  v33 = *((unsigned int *)v31 + 2);
  if ((_DWORD)v33 && *(_WORD *)(*v32 + 32) != 222)
  {
    v34 = 8 * v33 - 8;
    v35 = *v31;
    do
    {
      v36 = v35[1];
      ++v35;
      v34 -= 8;
    }
    while (*(_WORD *)(v36 + 32) != 222);
  }
  do
  {
    v37 = *v32++;
    v27 = v37;
  }
  while (*(_WORD *)(v37 + 32) != 222);
  v29 = (unsigned int *)&v44;
LABEL_51:
  sub_22E8FCA40(a2, *(_DWORD *)(v27 + 16), 0x154Cu, 0, (uint64_t)v29);
  sub_22E903BEC(v29);
  v18 = 1;
LABEL_52:
  if (v48 != v51)
    free(v48);
  return v18;
}

BOOL sub_22ED50DC8(_QWORD *a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v7;
  _BOOL8 result;
  int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 **v21;
  unsigned __int8 *v22;
  unsigned int v23[4];
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  char v29;
  unsigned __int8 v30;
  uint64_t v31;

  v30 = a4;
  if ((*(_DWORD *)a2 & 0x1C00) == 0x400)
  {
    v7 = 0;
  }
  else if ((sub_22F001B50((uint64_t)a2) & 1) != 0)
  {
    v7 = 1;
  }
  else
  {
    result = sub_22F001E0C(a2);
    if (!result)
      return result;
    v7 = 2;
  }
  sub_22F0D5A50((uint64_t)a2);
  sub_22E8FCA40(a1, v9, 0xAB5u, 0, (uint64_t)v23);
  if (v27)
  {
    v10 = v25;
    if (!v25)
    {
      v10 = (unsigned __int8 *)sub_22E3B8AAC(v26);
      v25 = v10;
    }
    v10[*v10 + 1] = 2;
    v11 = v25;
  }
  else
  {
    if (!v29)
      goto LABEL_13;
    v16 = v24;
    v17 = (uint64_t *)(*(_QWORD *)v23 + 12784);
    if (v24)
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
    v31 = v16;
    v18 = sub_22F2F1D6C(v17, &v31);
    v19 = v18[1] + 32 * v28;
    v22 = *(unsigned __int8 **)(v19 + 8);
    v21 = (unsigned __int8 **)(v19 + 8);
    v20 = v22;
    if (!v22)
    {
      v20 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v21[1]);
      *v21 = v20;
    }
    v20[*v20 + 1] = 2;
    v11 = *v21;
  }
  v12 = *v11;
  *v11 = v12 + 1;
  *(_QWORD *)&v11[8 * v12 + 16] = v7;
LABEL_13:
  v13 = sub_22E894E38((uint64_t)v23, &v30);
  v14 = sub_22E90749C(v13, (_BYTE *)(a3 + 80));
  sub_22F0D4E74((uint64_t)a2);
  v31 = v15;
  sub_22E8906A0(v14, &v31);
  sub_22E903BEC(v23);
  return 1;
}

void sub_22ED50F50(uint64_t a1, unsigned __int8 *a2, _QWORD *a3)
{
  int v5;
  int v6;
  _QWORD *v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unsigned __int8 *v14;
  _DWORD *v15;
  int v16;
  unsigned int **v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[11];

  v23[10] = *MEMORY[0x24BDAC8D0];
  if ((*(_QWORD *)(a3[9] + 20) & 0x100000000000) != 0)
  {
    sub_22F0D5A50(a1);
    v6 = v9;
    v7 = a3;
    v8 = 6693;
  }
  else
  {
    sub_22F0D5A50(a1);
    v6 = v5;
    v7 = a3;
    v8 = 3632;
  }
  sub_22E8FCA40(v7, v6, v8, 0, (uint64_t)&v21);
  sub_22F0D4E74((uint64_t)a2);
  v20 = v10;
  sub_22E8906A0((uint64_t)&v21, &v20);
  sub_22E903BEC((unsigned int *)&v21);
  LODWORD(v11) = 0;
  v21 = v23;
  v22 = 0x800000000;
  v12 = 8;
  while (1)
  {
    if (v11 >= v12)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      LODWORD(v11) = v22;
    }
    *((_QWORD *)v21 + v11) = a2;
    v11 = (v22 + 1);
    LODWORD(v22) = v22 + 1;
    v13 = *a2;
    if (v13 == 214)
    {
      v14 = (unsigned __int8 *)*((_QWORD *)a2 + 3);
      goto LABEL_12;
    }
    if ((v13 + 102) < 0xF5u)
      goto LABEL_16;
    v14 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
    if ((*v14 + 102) >= 0xF5u && (*(_DWORD *)v14 & 0x1FC0000) == 0x100000)
      break;
LABEL_12:
    v12 = HIDWORD(v22);
    a2 = v14;
  }
  v15 = (_DWORD *)*((_QWORD *)v14 + 2);
  *((_QWORD *)a2 + 2) = v15;
  if ((_DWORD)v11)
  {
    v16 = *v15 & 0x300;
    v17 = (unsigned int **)v21;
    v18 = 8 * v11;
    do
    {
      v19 = *v17++;
      *v19 = *v19 & 0xFFFFFCFF | v16;
      v18 -= 8;
    }
    while (v18);
  }
LABEL_16:
  if (v21 != v23)
    free(v21);
}

void sub_22ED51100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  char v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  _DWORD v20[6];
  __int16 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unsigned int v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a2 + 8);
  v21 = 0;
  v22 = 0;
  LODWORD(v23) = 0;
  v6 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 25 < 2
    || (*(_DWORD *)(v6 + 16) & 0x400) != 0)
  {
    goto LABEL_17;
  }
  if ((*(_DWORD *)a2 & 0x300) == 0)
  {
    v18 = *(_DWORD *)(v6 + 16);
    if (*(_DWORD *)a2 == 161)
    {
      if (v18 != 44 && (*(_DWORD *)(*(_QWORD *)(a2 + 16) + 28) & 0x7F) != 0x43)
        goto LABEL_17;
    }
    else if (v18 != 44)
    {
      goto LABEL_17;
    }
    if (sub_22F005120((unsigned __int8 *)a2, (uint64_t)&v21, *(_QWORD *)(a1 + 88), 0))
    {
      if (v25 > 0x40)
        v19 = *v24;
      else
        v19 = (uint64_t)((_QWORD)v24 << -(uint64_t)v25) >> -(uint64_t)v25;
      *(_DWORD *)(a3 + 24) = 2;
      *(_QWORD *)a3 = v19;
      goto LABEL_18;
    }
LABEL_17:
    *(_DWORD *)(a3 + 24) = 1;
    *(_QWORD *)a3 = a2;
    goto LABEL_18;
  }
  sub_22EF5CCD0(*(_QWORD *)(a1 + 88), v6, (uint64_t)v20);
  v8 = v20[0];
  v9 = sub_22EF5C728(*(_QWORD *)(a1 + 88), v5);
  v14 = v8;
  if (v9)
  {
    sub_22EF5CCD0(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(v9 + 32) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v20);
    v14 = v20[0];
  }
  v15 = sub_22F005B20(a2, &v21, *(_QWORD *)(a1 + 88), 0, v10, v11, v12, v13);
  v16 = 0;
  if (v15)
  {
    v17 = sub_22EF53A50((uint64_t)&v23);
    v16 = sub_22F0083C0(v17);
  }
  *(_QWORD *)a3 = a2;
  *(_BYTE *)(a3 + 8) = v16;
  *(_DWORD *)(a3 + 20) = v14;
  *(_DWORD *)(a3 + 24) = 3;
  *(_DWORD *)(a3 + 12) = v8 / v14;
  *(_DWORD *)(a3 + 16) = v8;
LABEL_18:
  if (v23 >= 2)
    sub_22EF53BC0(&v23);
}

uint64_t sub_22ED512EC(uint64_t a1, uint64_t a2, unsigned int a3, _DWORD *a4, int a5)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (a5)
  {
    sub_22EB4DECC(a1, 3, 0, 3);
    v9 = sub_22EB1C438(a1, *(uint64_t **)(a1 + 12888), a2, a3, a4, 0, 0, 0, 1, 0);
    sub_22EB48E64(a1);
  }
  else
  {
    v9 = sub_22EB1C438(a1, *(uint64_t **)(a1 + 12888), a2, a3, a4, 0, 0, 0, 1, 0);
  }
  if (v9 >= 2)
  {
    v10 = sub_22EB19A28(a1, (_DWORD *)(v9 & 0xFFFFFFFFFFFFFFFELL));
    v9 = v10;
    if (v10 >= 2)
    {
      v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
      if ((sub_22ED50A84(v10 & 0xFFFFFFFFFFFFFFFELL, (_QWORD *)a1) & 1) != 0)
      {
        return 1;
      }
      else
      {
        v12 = *(_QWORD *)(*(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v12 + 17) & 4) == 0
          && *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 25 >= 2
          && sub_22F34BAD0(a1, v9 & 0xFFFFFFFFFFFFFFFELL))
        {
          return 1;
        }
      }
    }
  }
  return v9;
}

uint64_t sub_22ED51458(uint64_t a1, _DWORD *a2, size_t a3, uint64_t a4, uint64_t a5, _DWORD *a6, unsigned int a7)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  char *v20;
  uint64_t v21;
  const void *v22;
  size_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  BOOL v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  _DWORD *v46;
  char *v47;
  unsigned int v48;
  void *v49;
  void *v50;
  uint64_t v51;
  _BYTE v52[64];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  __int128 v60;
  _BYTE v61[6];
  char v62;
  char *v63;
  uint64_t v64;
  _QWORD v65[6];

  v65[4] = *MEMORY[0x24BDAC8D0];
  *a6 = 0;
  v63 = (char *)v65;
  v64 = 0x200000000;
  llvm::StringRef::split();
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) != 0 && a3 == 4 && *a2 == 1936287860)
  {
    v41 = sub_22EBBB18C(a1);
    if (v41 < 0x10)
      goto LABEL_70;
    v42 = *(_QWORD *)(v41 & 0xFFFFFFFFFFFFFFF0);
    if (!v42)
      goto LABEL_70;
    v43 = sub_22F10ACF8(v42);
    v18 = sub_22F10C2A4(*(_QWORD *)(v43 & 0xFFFFFFFFFFFFFFF0));
  }
  else
  {
    v12 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(a1 + 88) + 15192), a2, a3);
    v49 = 0;
    v50 = v52;
    v51 = 0x800000000;
    v53 = 0;
    v54 = 0;
    v55 = 0;
    v56 = (_QWORD *)a1;
    v57 = v12;
    v58 = 0;
    sub_22EFC6D6C((uint64_t)&v59, v12);
    v60 = 0uLL;
    *(_WORD *)v61 = 0;
    *(_DWORD *)&v61[2] = 257;
    v62 = 0;
    sub_22EC56024((uint64_t)&v49);
    v13 = sub_22EC63520(a1, (uint64_t)&v49, *(_QWORD **)(a1 + 12888), 0, 0);
    v18 = 0;
    v19 = (int)v49;
    if (v13)
    {
      if ((_DWORD)v49 == 2)
      {
        v18 = *(_QWORD *)v50 & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_DWORD *)(v18 + 28) & 0x7Fu) <= 0x2F
          && ((1 << (*(_DWORD *)(v18 + 28) & 0x7F)) & 0xC00000060000) != 0)
        {
          v18 = sub_22EFBAEA4(*(_QWORD *)v50 & 0xFFFFFFFFFFFFFFFCLL);
        }
      }
    }
    if (v61[3])
    {
      if (v19 == 5)
      {
        sub_22EC64D18(v56, (uint64_t)&v49);
      }
      else if (v54 && (*(_DWORD *)(v56[9] + 52) & 0x400000) != 0)
      {
        sub_22E90B5FC((unint64_t)v56, (uint64_t)&v49);
      }
    }
    if (v53)
    {
      v45 = sub_22EC6CBD0(v53);
      MEMORY[0x2348A0E9C](v45, 0x10E0C409F09D3C3);
    }
    if (v50 != v52)
      free(v50);
  }
  if (!v18)
  {
LABEL_70:
    v21 = 1;
    goto LABEL_72;
  }
  if (!(_DWORD)v64)
  {
    v21 = 0;
    goto LABEL_72;
  }
  v46 = a6;
  v20 = v63;
  v47 = &v63[16 * v64];
  v48 = a7;
  v21 = 1;
  while (1)
  {
    v22 = *(const void **)v20;
    v23 = *((_QWORD *)v20 + 1);
    v24 = *(_DWORD *)(v18 + 28);
    v25 = v24 & 0x7F;
    if ((v25 - 67) >= 0xFFFFFFF9)
      goto LABEL_25;
    if ((v25 - 42) >= 0xFFFFFFFD)
    {
      if ((v24 & 0x7Eu) - 58 >= 0xFFFFFFFA)
        sub_22EB4E494(a1, *(_DWORD *)(v18 + 24), v18, 0, v14, v15, v16, v17);
      else
        *(_DWORD *)(v18 + 28) = v24 | 0x800;
      v27 = (uint64_t *)(*(_QWORD *)((*(_QWORD *)(v18 + 80) & 0xFFFFFFFFFFFFFFF8)
                                  + ((2 * *(_QWORD *)(v18 + 80)) & 8)) & 0xFFFFFFFFFFFFFFF0);
      v28 = *v27;
      if (*v27 && *(_BYTE *)(v28 + 16) == 39
        || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v28 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39
        && (v28 = sub_22F10CF48(v28)) != 0)
      {
        v27 = (uint64_t *)(*(_QWORD *)(v28 + 32) & 0xFFFFFFFFFFFFFFF0);
      }
      v26 = *v27;
    }
    else
    {
      if ((v25 - 43) < 0xFFFFFFF6)
      {
        if ((v25 - 52) < 0xFFFFFFFD)
          goto LABEL_71;
LABEL_25:
        v26 = *(_QWORD *)(*(_QWORD *)(v18 + 48) & 0xFFFFFFFFFFFFFFF0);
        goto LABEL_36;
      }
      v26 = *(_QWORD *)(v18 + 48);
    }
LABEL_36:
    v29 = *(_QWORD *)(*(_QWORD *)(v26 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (*(_BYTE *)(v29 + 16) != 45)
      goto LABEL_71;
    v49 = &unk_24FAB6EF8;
    LODWORD(v50) = 2730;
    if ((sub_22EE8B0B0(a1, v48, v29 & 0xFFFFFFFFFFFFFFF0) & 1) != 0)
      goto LABEL_72;
    v30 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(a1 + 88) + 15192), v22, v23);
    v49 = 0;
    v50 = v52;
    v51 = 0x800000000;
    v54 = 0;
    v55 = 0;
    v53 = 0;
    v56 = (_QWORD *)a1;
    v57 = v30;
    v58 = 0;
    sub_22EFC6D6C((uint64_t)&v59, v30);
    v60 = xmmword_22F463A40;
    *(_DWORD *)v61 = 16842752;
    *(_WORD *)&v61[4] = 0;
    v62 = 0;
    sub_22EC56024((uint64_t)&v49);
    v31 = sub_22F114198(*(_QWORD *)(v29 + 24));
    if (v31)
      v32 = v31 + 64;
    else
      v32 = 0;
    v33 = 0;
    if (sub_22EC611AC(a1, (uint64_t)&v49, v32, 0))
      v34 = (_DWORD)v49 == 2;
    else
      v34 = 0;
    if (v34)
    {
      v18 = *(_QWORD *)v50 & 0xFFFFFFFFFFFFFFFCLL;
      v35 = *(_DWORD *)(v18 + 28) & 0x7F;
      if (v35 <= 0x2F && ((1 << v35) & 0xC00000060000) != 0)
      {
        v18 = sub_22EFBAEA4(*(_QWORD *)v50 & 0xFFFFFFFFFFFFFFFCLL);
        v35 = *(_DWORD *)(v18 + 28) & 0x7F;
      }
      if (v35 - 52 >= 0xFFFFFFFD)
      {
        v36 = *(_QWORD *)(a1 + 88);
        v37 = sub_22F114198(*(_QWORD *)(v29 + 24));
        v38 = sub_22F0C975C(v36, v37);
        v39 = *(_QWORD *)(*(_QWORD *)(v38 + 48) + 8 * sub_22EFC306C(v18));
        *v46 += v39
              / sub_22EF5CDF0(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 16408) & 0xFFFFFFFFFFFFFFF0));
        v33 = 1;
      }
      else
      {
        v33 = 0;
      }
    }
    if (v61[3])
    {
      if ((_DWORD)v49 == 5)
      {
        sub_22EC64D18(v56, (uint64_t)&v49);
      }
      else if (v54 && (*(_DWORD *)(v56[9] + 52) & 0x400000) != 0)
      {
        sub_22E90B5FC((unint64_t)v56, (uint64_t)&v49);
      }
    }
    if (v53)
    {
      v40 = sub_22EC6CBD0(v53);
      MEMORY[0x2348A0E9C](v40, 0x10E0C409F09D3C3);
    }
    if (v50 != v52)
      break;
    if ((v33 & 1) == 0)
      goto LABEL_71;
LABEL_61:
    v20 += 16;
    if (v20 == v47)
    {
      v21 = 0;
      goto LABEL_72;
    }
  }
  free(v50);
  if ((v33 & 1) != 0)
    goto LABEL_61;
LABEL_71:
  v21 = 1;
LABEL_72:
  if (v63 != (char *)v65)
    free(v63);
  return v21;
}

uint64_t sub_22ED51A5C(_QWORD *a1, uint64_t a2, const void *a3, size_t a4, unsigned int a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  BOOL v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  __int128 v25;
  void *v26[2];
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  _BYTE v33[64];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unsigned int v39;
  _BYTE v40[24];
  int v41;
  __int16 v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v9 + 17) & 4) != 0)
  {
    v21 = sub_22E3CB704(*(llvm::StringMapImpl **)(a1[11] + 15192), a3, a4);
    v22 = a1[11];
    v27 = v21;
    v28 = a5;
    v29 = 0;
    return sub_22F061D9C(v22, a2, v8, 0, a5, 0, 0, 0, 0, (uint64_t)&v27, 0);
  }
  else
  {
    v10 = 0;
    v11 = *(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v11 && *(_BYTE *)(v11 + 16) == 45)
    {
      v12 = sub_22E3CB704(*(llvm::StringMapImpl **)(a1[11] + 15192), a3, a4);
      v30 = 0;
      v31 = v33;
      v32 = 0x800000000;
      v34 = 0;
      v35 = 0;
      v36 = 0;
      v37 = a1;
      v38 = v12;
      v39 = a5;
      sub_22EFC6D6C((uint64_t)v40, v12);
      *(_OWORD *)&v40[8] = xmmword_22F463A40;
      v41 = 16842752;
      v42 = 0;
      v43 = 0;
      sub_22EC56024((uint64_t)&v30);
      v13 = sub_22F114198(*(_QWORD *)(v11 + 24));
      if (v13)
        v14 = v13 + 64;
      else
        v14 = 0;
      v10 = 0;
      if (sub_22EC611AC((uint64_t)a1, (uint64_t)&v30, v14, 0))
      {
        v15 = *(_QWORD *)v31 & 0xFFFFFFFFFFFFFFFCLL;
        v16 = *(_DWORD *)(v15 + 28) & 0x7F;
        v17 = v16 > 0x2F || ((1 << v16) & 0xC00000060000) == 0;
        v18 = *(_DWORD *)(v15 + 28) & 0x7F;
        if (!v17)
          v18 = *(_DWORD *)(sub_22EFBAEA4(*(_QWORD *)v31 & 0xFFFFFFFFFFFFFFFCLL) + 28) & 0x7F;
        if ((v18 - 52) > 0xFFFFFFFC)
          goto LABEL_20;
        if (v16 <= 0x2F && ((1 << v16) & 0xC00000060000) != 0)
          v16 = *(_DWORD *)(sub_22EFBAEA4(v15) + 28) & 0x7F;
        if (v16 == 68)
        {
LABEL_20:
          v20 = *(_QWORD *)(a2 + 8);
          v25 = 0u;
          *(_OWORD *)v26 = 0u;
          v10 = sub_22EC24AB8((uint64_t)a1, a2, v20, a5, 0, (uint64_t *)&v25, 0, 0, (uint64_t)&v30, 0, 0, 0, 0);
          if (HIDWORD(v26[1]))
            free(v26[0]);
        }
        else
        {
          v10 = 0;
        }
      }
      if (HIBYTE(v41))
      {
        if ((_DWORD)v30 == 5)
        {
          sub_22EC64D18(v37, (uint64_t)&v30);
        }
        else if (v35 && (*(_DWORD *)(v37[9] + 52) & 0x400000) != 0)
        {
          sub_22E90B5FC((unint64_t)v37, (uint64_t)&v30);
        }
      }
      if (v34)
      {
        v24 = sub_22EC6CBD0(v34);
        MEMORY[0x2348A0E9C](v24, 0x10E0C409F09D3C3);
      }
      if (v31 != v33)
        free(v31);
    }
  }
  return v10;
}

uint64_t sub_22ED51D60(uint64_t a1, int a2, int a3, const void *a4, unint64_t a5, const void *a6, size_t a7, unsigned int a8, int a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14, unint64_t a15, int a16)
{
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  unsigned int v38[26];

  v23 = *(unsigned int *)(a1 + 1904);
  if ((_DWORD)v23)
  {
    v24 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v23 - 8);
    *(_DWORD *)(v24 + 8) |= 8u;
  }
  if (a9 + a8)
  {
    v25 = 0;
    while (1)
    {
      v26 = a14[v25];
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v26 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) == 9)
        break;
      if (a9 + a8 == ++v25)
        goto LABEL_7;
    }
    sub_22F0D5A50(v26);
    sub_22E8FCA40((_QWORD *)a1, v29, 4u, 0, (uint64_t)v38);
    v37 = *(_QWORD *)(a14[v25] + 8);
    v30 = sub_22E8901B8((uint64_t)v38, &v37);
    v36 = v25 < a8;
    v31 = sub_22E894E38(v30, (unsigned __int8 *)&v36);
    sub_22F0D4E74(a14[v25]);
    v35 = v32;
    sub_22E8906A0(v31, &v35);
    sub_22E903BEC(v38);
    return 1;
  }
  else
  {
LABEL_7:
    v34 = (a9 | a8) != 0;
    v27 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 96, 3);
    return sub_22F3F1E5C(v27, *(_QWORD *)(a1 + 88), a2, a3, v34, 1, a4, a5, a8, a9, a10, a11, a14, a15, a6, a7, a12, a13, a16);
  }
}

unint64_t sub_22ED51F38(_QWORD *a1, unsigned __int8 *a2, size_t a3, int a4, int a5)
{
  size_t v7;
  unsigned __int8 *v8;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v14;
  _BYTE *v15;
  _BYTE *v16;
  char v17;
  const void *v18;
  size_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  void **v28;
  void *__p[2];
  uint64_t v30;

  v7 = a3;
  v8 = a2;
  v10 = sub_22E3CB704((llvm::StringMapImpl *)(a1[10] + 544), a2, a3);
  v11 = sub_22EC67D70(a1, v10, a4, 0);
  v12 = v11;
  if (*(_QWORD *)(v11 + 64))
  {
    sub_22EFC9100(v11, a1[11]);
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    v30 = 0;
    v21 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    v20 = MEMORY[0x24BED83D8] + 16;
    v28 = __p;
    llvm::raw_ostream::SetBufferAndMode();
    llvm::raw_ostream::write((llvm::raw_ostream *)&v20, "__MSASMLABEL_.${:uid}__");
    for (; v7; --v7)
    {
      v14 = *v8;
      v15 = v24;
      if ((unint64_t)v24 >= v23)
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v20);
      }
      else
      {
        ++v24;
        *v15 = v14;
      }
      if (v14 == 36)
      {
        v16 = v24;
        if ((unint64_t)v24 >= v23)
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v20);
        }
        else
        {
          ++v24;
          *v16 = 36;
        }
      }
      ++v8;
    }
    v17 = *((_BYTE *)v28 + 23);
    if (v17 >= 0)
      v18 = v28;
    else
      v18 = *v28;
    if (v17 >= 0)
      v19 = v17 & 0x7F;
    else
      v19 = (size_t)v28[1];
    sub_22F3AD528(v12, v18, v19);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v20);
    if (SHIBYTE(v30) < 0)
      operator delete(__p[0]);
  }
  if (a5)
    *(_BYTE *)(v12 + 72) = 1;
  *(_DWORD *)(v12 + 24) = a4;
  return v12;
}

BOOL sub_22ED52124(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t *v8;
  BOOL v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(_QWORD *)(a1 + 48))
  {
    v4 = *(_QWORD *)(a1 + 40);
    v2 = a1 + 40;
    v3 = v4;
    if (!v4)
      goto LABEL_12;
    v5 = v2;
    do
    {
      v6 = *(_DWORD *)(v3 + 28);
      v7 = v6 < a2;
      if (v6 >= a2)
        v8 = (uint64_t *)v3;
      else
        v8 = (uint64_t *)(v3 + 8);
      if (!v7)
        v5 = v3;
      v3 = *v8;
    }
    while (*v8);
    if (v5 == v2 || *(_DWORD *)(v5 + 28) > a2)
LABEL_12:
      v5 = v2;
    v9 = v5 == v2;
  }
  else
  {
    v10 = *(_DWORD **)a1;
    v11 = *(unsigned int *)(a1 + 8);
    v12 = *(_QWORD *)a1 + 4 * v11;
    if ((_DWORD)v11)
    {
      v13 = 4 * v11;
      while (*v10 != a2)
      {
        ++v10;
        v13 -= 4;
        if (!v13)
          goto LABEL_18;
      }
    }
    else
    {
LABEL_18:
      v10 = (_DWORD *)v12;
    }
    v9 = v10 == (_DWORD *)v12;
  }
  return !v9;
}

uint64_t sub_22ED521B0(llvm::APInt *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v8;

  v3 = (uint64_t)a1;
  v4 = *((_DWORD *)a1 + 2);
  if (v4 < 0x41)
    goto LABEL_7;
  v5 = v4 - sub_22E99C40C(a1) - 64;
  v4 = *(_DWORD *)(v3 + 8);
  if (v5 > 0xFFFFFFBE)
  {
    if (v4 > 0x40)
    {
      v8 = **(_QWORD **)v3;
      return v8 < a2;
    }
LABEL_7:
    v8 = (uint64_t)(*(_QWORD *)v3 << -(char)v4) >> -(char)v4;
    return v8 < a2;
  }
  v6 = v4 - 1;
  if (v4 >= 0x41)
    v3 = *(_QWORD *)v3 + 8 * (v6 >> 6);
  return (*(_QWORD *)v3 >> v6) & 1;
}

BOOL sub_22ED52254(llvm::APInt *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v8;

  v3 = (uint64_t)a1;
  v4 = *((_DWORD *)a1 + 2);
  if (v4 < 0x41)
    goto LABEL_7;
  v5 = v4 - sub_22E99C40C(a1) - 64;
  v4 = *(_DWORD *)(v3 + 8);
  if (v5 > 0xFFFFFFBE)
  {
    if (v4 > 0x40)
    {
      v8 = **(_QWORD **)v3;
      return v8 > a2;
    }
LABEL_7:
    v8 = (uint64_t)(*(_QWORD *)v3 << -(char)v4) >> -(char)v4;
    return v8 > a2;
  }
  v6 = v4 - 1;
  if (v4 >= 0x41)
    v3 = *(_QWORD *)v3 + 8 * (v6 >> 6);
  return ((*(_QWORD *)v3 >> v6) & 1) == 0;
}

double sub_22ED522FC(uint64_t a1, const void **a2, unint64_t a3, __n128 *a4, uint64_t a5, __n128 a6)
{
  const void **v6;
  uint64_t v7;
  const void **v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  int v12;
  uint64_t v15;
  unint64_t v16;
  const void **v17;
  unint64_t v18;
  const void *v19;
  const void **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  size_t v25;
  size_t v26;
  const void *v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  const void **v32;
  size_t v33;
  size_t v34;
  int v35;
  BOOL v36;
  __n128 v38;
  __n128 *v39;
  unint64_t v40;
  __n128 *v41;
  unint64_t v42;
  unint64_t v43;
  size_t v44;
  int v45;
  unint64_t v46;
  char *v47;
  __n128 *v48;
  uint64_t v49;
  __n128 *v50;
  uint64_t v51;
  uint64_t v54;

  if (a3 < 2)
    return a6.n128_f64[0];
  v6 = a2;
  v7 = a1;
  if (a3 != 2)
  {
    if ((uint64_t)a3 > 0)
    {
      v15 = (uint64_t)a4;
      v16 = a3 >> 1;
      v17 = (const void **)(a1 + 24 * (a3 >> 1));
      v18 = a3 >> 1;
      if ((uint64_t)a3 > a5)
      {
        sub_22ED522FC(a1, v17, v18, a4, a5);
        sub_22ED522FC(v7 + 24 * (a3 >> 1), v6, a3 - (a3 >> 1), v15, a5);
        a6.n128_u64[0] = sub_22ED529BC((const void **)v7, (const void **)(v7 + 24 * (a3 >> 1)), v6, a3 >> 1, a3 - (a3 >> 1), v15, a5).n128_u64[0];
        return a6.n128_f64[0];
      }
      v38 = sub_22ED5266C(a1, v17, v18, a4, a6);
      v39 = (__n128 *)(v15 + 24 * v16);
      a6.n128_u64[0] = sub_22ED5266C(v7 + 24 * (a3 >> 1), v6, a3 - (a3 >> 1), v39, v38).n128_u64[0];
      v40 = v15 + 24 * a3;
      v41 = v39;
      while (1)
      {
        if (v41 == (__n128 *)v40)
        {
          if ((__n128 *)v15 != v39)
          {
            v49 = 0;
            do
            {
              v50 = (__n128 *)(v7 + v49);
              v51 = v15 + v49;
              a6 = *(__n128 *)(v15 + v49);
              *v50 = a6;
              v50[1].n128_u64[0] = *(_QWORD *)(v15 + v49 + 16);
              v49 += 24;
            }
            while ((__n128 *)(v51 + 24) != v39);
          }
          return a6.n128_f64[0];
        }
        v42 = v41->n128_u64[1];
        v43 = *(_QWORD *)(v15 + 8);
        if (v43 >= v42)
          v44 = v41->n128_u64[1];
        else
          v44 = *(_QWORD *)(v15 + 8);
        if (v44 && (v45 = memcmp((const void *)v41->n128_u64[0], *(const void **)v15, v44)) != 0)
        {
          if (v45 < 0)
            goto LABEL_62;
        }
        else if (v42 < v43)
        {
LABEL_62:
          a6 = *v41;
          *(__n128 *)v7 = *v41;
          *(_QWORD *)(v7 + 16) = v41[1].n128_u64[0];
          v41 = (__n128 *)((char *)v41 + 24);
          goto LABEL_63;
        }
        a6 = *(__n128 *)v15;
        *(_OWORD *)v7 = *(_OWORD *)v15;
        *(_QWORD *)(v7 + 16) = *(_QWORD *)(v15 + 16);
        v15 += 24;
LABEL_63:
        v7 += 24;
        if ((__n128 *)v15 == v39)
        {
          if (v41 != (__n128 *)v40)
          {
            v46 = 0;
            do
            {
              v47 = (char *)v41 + v46;
              v48 = (__n128 *)(v7 + v46);
              a6 = *(__n128 *)((char *)v41 + v46);
              *v48 = a6;
              v48[1].n128_u64[0] = v41[1].n128_u64[v46 / 8];
              v46 += 24;
            }
            while (v47 + 24 != (char *)v40);
          }
          return a6.n128_f64[0];
        }
      }
    }
    if ((const void **)a1 == a2)
      return a6.n128_f64[0];
    v20 = (const void **)(a1 + 24);
    if ((const void **)(a1 + 24) == a2)
      return a6.n128_f64[0];
    v21 = 0;
    v22 = a1;
LABEL_19:
    v23 = v22;
    v22 = (uint64_t)v20;
    v24 = *(_QWORD *)(v23 + 32);
    v25 = *(_QWORD *)(v23 + 8);
    if (v25 >= v24)
      v26 = *(_QWORD *)(v23 + 32);
    else
      v26 = *(_QWORD *)(v23 + 8);
    if (v26 && (v27 = *v20, (v28 = memcmp(*v20, *(const void **)v23, v26)) != 0))
    {
      if ((v28 & 0x80000000) == 0)
        goto LABEL_50;
    }
    else
    {
      if (v24 >= v25)
        goto LABEL_50;
      v27 = *(const void **)v22;
    }
    v29 = *(_QWORD *)(v23 + 40);
    a6 = *(__n128 *)v23;
    *(_OWORD *)v22 = *(_OWORD *)v23;
    *(_QWORD *)(v22 + 16) = *(_QWORD *)(v23 + 16);
    v30 = (_QWORD *)v7;
    if (v23 == v7)
      goto LABEL_49;
    v54 = v29;
    v31 = v21;
    while (1)
    {
      v32 = (const void **)(v7 + v31 - 24);
      v33 = *(_QWORD *)(v7 + v31 - 16);
      if (v33 >= v24)
        v34 = v24;
      else
        v34 = *(_QWORD *)(v7 + v31 - 16);
      if (v34)
      {
        v35 = memcmp(v27, *v32, v34);
        if ((v35 & 0x80000000) == 0)
        {
          v36 = v35 || v24 == v33;
          if (v36 || v24 >= v33)
          {
            v30 = (_QWORD *)(v7 + v31);
            goto LABEL_48;
          }
        }
      }
      else if (v24 >= v33)
      {
        v30 = (_QWORD *)v23;
LABEL_48:
        v6 = a2;
        v29 = v54;
LABEL_49:
        *v30 = v27;
        v30[1] = v24;
        v30[2] = v29;
LABEL_50:
        v20 = (const void **)(v22 + 24);
        v21 += 24;
        if ((const void **)(v22 + 24) == v6)
          return a6.n128_f64[0];
        goto LABEL_19;
      }
      v23 -= 24;
      a6 = *(__n128 *)v32;
      *(_OWORD *)(v7 + v31) = *(_OWORD *)v32;
      *(_QWORD *)(v7 + v31 + 16) = *(_QWORD *)(v7 + v31 - 8);
      v31 -= 24;
      if (!v31)
      {
        v30 = (_QWORD *)v7;
        goto LABEL_48;
      }
    }
  }
  v8 = a2 - 3;
  v9 = (unint64_t)*(a2 - 2);
  v10 = *(_QWORD *)(a1 + 8);
  if (v10 >= v9)
    v11 = (size_t)*(a2 - 2);
  else
    v11 = *(_QWORD *)(a1 + 8);
  if (v11 && (v12 = memcmp(*v8, *(const void **)a1, v11)) != 0)
  {
    if ((v12 & 0x80000000) == 0)
      return a6.n128_f64[0];
  }
  else if (v9 >= v10)
  {
    return a6.n128_f64[0];
  }
  a6 = *(__n128 *)v7;
  *(_OWORD *)v7 = *(_OWORD *)v8;
  *(__n128 *)v8 = a6;
  v19 = *(const void **)(v7 + 16);
  *(_QWORD *)(v7 + 16) = *(v6 - 1);
  *(v6 - 1) = v19;
  return a6.n128_f64[0];
}

__n128 sub_22ED5266C(uint64_t a1, const void **a2, unint64_t a3, __n128 *a4, __n128 result)
{
  __n128 *v5;
  const void **v7;
  __n128 *v8;
  const void **v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  int v13;
  __n128 v14;
  unint64_t v15;
  const void **v16;
  uint64_t v17;
  __n128 *v18;
  const void **v19;
  __n128 *v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  int v24;
  __n128 *v25;
  uint64_t v26;
  const void **v27;
  unint64_t v28;
  unint64_t v29;
  size_t v30;
  int v31;
  __n128 v32;
  __n128 *v33;
  const void **v34;
  unint64_t v35;
  unint64_t v36;
  size_t v37;
  int v38;
  uint64_t v39;
  __n128 *v40;
  unint64_t v41;
  __n128 *v42;
  __n128 *v44;

  if (!a3)
    return result;
  v5 = a4;
  v7 = a2;
  v8 = (__n128 *)a1;
  if (a3 == 2)
  {
    v9 = a2 - 3;
    v10 = (unint64_t)*(a2 - 2);
    v11 = *(_QWORD *)(a1 + 8);
    if (v11 >= v10)
      v12 = (size_t)*(a2 - 2);
    else
      v12 = *(_QWORD *)(a1 + 8);
    if (v12 && (v13 = memcmp(*v9, *(const void **)a1, v12)) != 0)
    {
      if ((v13 & 0x80000000) == 0)
      {
LABEL_11:
        v14 = *v8;
        v5[1].n128_u64[0] = v8[1].n128_u64[0];
        *v5 = v14;
        result = *(__n128 *)v9;
        v15 = (unint64_t)*(v7 - 1);
LABEL_43:
        v5[2].n128_u64[1] = v15;
        *(__n128 *)((char *)v5 + 24) = result;
        return result;
      }
    }
    else if (v10 >= v11)
    {
      goto LABEL_11;
    }
    v32 = *(__n128 *)v9;
    v5[1].n128_u64[0] = (unint64_t)*(v7 - 1);
    *v5 = v32;
    result = *v8;
    v15 = v8[1].n128_u64[0];
    goto LABEL_43;
  }
  if (a3 == 1)
  {
    result = *(__n128 *)a1;
    a4[1].n128_u64[0] = *(_QWORD *)(a1 + 16);
    *a4 = result;
    return result;
  }
  if ((uint64_t)a3 > 8)
  {
    v33 = (__n128 *)(a1 + 24 * (a3 >> 1));
    sub_22ED522FC(a1, v33, a3 >> 1, a4, a3 >> 1);
    sub_22ED522FC((char *)v8 + 24 * (a3 >> 1), v7, a3 - (a3 >> 1), (char *)v5 + 24 * (a3 >> 1), a3 - (a3 >> 1));
    v34 = (const void **)v8 + 3 * (a3 >> 1);
    while (1)
    {
      if (v34 == v7)
      {
        if (v8 != v33)
        {
          v41 = 0;
          do
          {
            v42 = (__n128 *)((char *)v5 + v41);
            result = *(__n128 *)((char *)v8 + v41);
            v42[1].n128_u64[0] = v8[1].n128_u64[v41 / 8];
            *v42 = result;
            v41 += 24;
          }
          while ((__n128 *)((char *)v8 + v41) != v33);
        }
        return result;
      }
      v35 = (unint64_t)v34[1];
      v36 = v8->n128_u64[1];
      if (v36 >= v35)
        v37 = (size_t)v34[1];
      else
        v37 = v8->n128_u64[1];
      if (v37 && (v38 = memcmp(*v34, (const void *)v8->n128_u64[0], v37)) != 0)
      {
        if (v38 < 0)
          goto LABEL_55;
      }
      else if (v35 < v36)
      {
LABEL_55:
        result = *(__n128 *)v34;
        v5[1].n128_u64[0] = (unint64_t)v34[2];
        *v5 = result;
        v34 += 3;
        goto LABEL_56;
      }
      result = *v8;
      v5[1].n128_u64[0] = v8[1].n128_u64[0];
      *v5 = result;
      v8 = (__n128 *)((char *)v8 + 24);
LABEL_56:
      v5 = (__n128 *)((char *)v5 + 24);
      if (v8 == v33)
      {
        if (v34 != v7)
        {
          v39 = 0;
          do
          {
            v40 = (__n128 *)((char *)v5 + v39 * 8);
            result = *(__n128 *)&v34[v39];
            v40[1].n128_u64[0] = (unint64_t)v34[v39 + 2];
            *v40 = result;
            v39 += 3;
          }
          while (&v34[v39] != v7);
        }
        return result;
      }
    }
  }
  if ((const void **)a1 == a2)
    return result;
  result = *(__n128 *)a1;
  a4[1].n128_u64[0] = *(_QWORD *)(a1 + 16);
  *a4 = result;
  v16 = (const void **)(a1 + 24);
  if ((const void **)(a1 + 24) == a2)
    return result;
  v17 = 0;
  v18 = a4;
  do
  {
    v19 = v16;
    v20 = (__n128 *)((char *)v18 + 24);
    v21 = v8[2].n128_u64[0];
    v22 = v18->n128_u64[1];
    if (v22 >= v21)
      v23 = v8[2].n128_u64[0];
    else
      v23 = v18->n128_u64[1];
    if (v23 && (v24 = memcmp(*v16, (const void *)v18->n128_u64[0], v23)) != 0)
    {
      if ((v24 & 0x80000000) == 0)
        goto LABEL_22;
    }
    else if (v21 >= v22)
    {
LABEL_22:
      result = *(__n128 *)v19;
      v18[2].n128_u64[1] = (unint64_t)v19[2];
      *v20 = result;
      goto LABEL_39;
    }
    *v20 = *v18;
    v18[2].n128_u64[1] = v18[1].n128_u64[0];
    v25 = v5;
    if (v18 == v5)
      goto LABEL_38;
    v44 = (__n128 *)((char *)v18 + 24);
    v26 = v17;
    while (1)
    {
      v27 = (const void **)((char *)&v5[-1] + v26 - 8);
      v28 = v8[2].n128_u64[0];
      v29 = *(unint64_t *)((char *)v5[-1].n128_u64 + v26);
      if (v29 >= v28)
        v30 = v8[2].n128_u64[0];
      else
        v30 = *(unint64_t *)((char *)v5[-1].n128_u64 + v26);
      if (v30)
      {
        v31 = memcmp(*v19, *v27, v30);
        if (v31)
        {
          if ((v31 & 0x80000000) == 0)
          {
            v25 = v18;
            goto LABEL_37;
          }
          goto LABEL_34;
        }
      }
      if (v28 >= v29)
        break;
LABEL_34:
      v18 = (__n128 *)((char *)v18 - 24);
      *(__n128 *)((char *)v5 + v26) = *(__n128 *)v27;
      *(unint64_t *)((char *)v5[1].n128_u64 + v26) = *(unint64_t *)((char *)&v5->n128_u64[-1] + v26);
      v26 -= 24;
      if (!v26)
      {
        v25 = v5;
        goto LABEL_37;
      }
    }
    v25 = (__n128 *)((char *)v5 + v26);
LABEL_37:
    v7 = a2;
    v20 = v44;
LABEL_38:
    result = *(__n128 *)v19;
    *v25 = *(__n128 *)v19;
    v25[1].n128_u64[0] = v8[2].n128_u64[1];
LABEL_39:
    v16 = v19 + 3;
    v17 += 24;
    v18 = v20;
    v8 = (__n128 *)v19;
  }
  while (v19 + 3 != v7);
  return result;
}

__n128 sub_22ED529BC(const void **a1, const void **a2, const void **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  int v18;
  __n128 result;
  uint64_t v21;
  const void **v22;
  uint64_t v23;
  const void **v24;
  const void **v25;
  unint64_t v26;
  size_t v27;
  const void **v28;
  const void *v29;
  size_t v30;
  int v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  const void **v35;
  unint64_t v36;
  size_t v37;
  const void **v38;
  size_t v39;
  size_t v40;
  int v41;
  int v42;
  const void **v43;
  const void *v44;
  const void **v45;
  const void **v46;
  const void *v47;
  unint64_t v48;
  const void **v49;
  const void **v50;
  uint64_t v51;
  __n128 *v52;
  const void **v53;
  const void **v54;
  const void **v55;
  const void **v56;
  unint64_t v57;
  unint64_t v58;
  size_t v59;
  int v60;
  const void **v61;
  const void **v62;
  uint64_t v63;
  __n128 *v64;
  uint64_t v65;
  uint64_t v66;
  const void **v67;
  const void *v68;
  unint64_t v69;
  size_t v70;
  int v71;
  const void **v72;
  const void *v73;
  unint64_t v74;
  const void **v75;
  unint64_t v76;
  __n128 *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  const void **v82;
  uint64_t v83;
  const void **v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __n128 v88;

  v85 = a5;
  if (!a5)
    return result;
  do
  {
    if (a4 <= a7 || v85 <= a7)
    {
      if (a4 > v85)
      {
        if (a2 == a3)
          return result;
        v51 = 0;
        do
        {
          v52 = (__n128 *)(a6 + v51 * 8);
          result = *(__n128 *)&a2[v51];
          v52[1].n128_u64[0] = (unint64_t)a2[v51 + 2];
          *v52 = result;
          v51 += 3;
        }
        while (&a2[v51] != a3);
        if (!(v51 * 8))
          return result;
        v53 = (const void **)(a6 + v51 * 8);
        while (1)
        {
          if (a2 == a1)
          {
            if (v53 != (const void **)a6)
            {
              v74 = 0;
              do
              {
                v75 = &a3[v74];
                result = *(__n128 *)&v53[v74 - 3];
                *(__n128 *)(v75 - 3) = result;
                *(v75 - 1) = v53[v74 - 1];
                v74 -= 3;
              }
              while (&v53[v74] != (const void **)a6);
            }
            return result;
          }
          v54 = a1;
          v55 = a3;
          v56 = v53 - 3;
          v57 = (unint64_t)*(v53 - 2);
          v58 = (unint64_t)*(a2 - 2);
          if (v58 >= v57)
            v59 = (size_t)*(v53 - 2);
          else
            v59 = (size_t)*(a2 - 2);
          if (v59 && (v60 = memcmp(*v56, *(a2 - 3), v59)) != 0)
          {
            v61 = v55;
            if (v60 < 0)
              goto LABEL_97;
          }
          else
          {
            v61 = v55;
            if (v57 < v58)
            {
LABEL_97:
              v56 = a2 - 3;
              v62 = a2;
              a2 -= 3;
              goto LABEL_98;
            }
          }
          v62 = v53;
          v53 -= 3;
LABEL_98:
          a1 = v54;
          result = *(__n128 *)v56;
          *(_OWORD *)(v61 - 3) = *(_OWORD *)v56;
          *(v61 - 1) = *(v62 - 1);
          a3 = v61 - 3;
          if (v53 == (const void **)a6)
            return result;
        }
      }
      if (a1 == a2)
        return result;
      v63 = 0;
      do
      {
        v64 = (__n128 *)(a6 + v63 * 8);
        result = *(__n128 *)&a1[v63];
        v64[1].n128_u64[0] = (unint64_t)a1[v63 + 2];
        *v64 = result;
        v63 += 3;
      }
      while (&a1[v63] != a2);
      if (!(v63 * 8))
        return result;
      v65 = a6 + v63 * 8;
      v66 = a6 + v63 * 8 - 24;
      while (1)
      {
        if (a2 == a3)
        {
          if (v65 != a6)
          {
            v76 = 0;
            do
            {
              v77 = (__n128 *)&a1[v76 / 8];
              v78 = a6 + v76;
              result = *(__n128 *)(a6 + v76);
              *v77 = result;
              v77[1].n128_u64[0] = *(_QWORD *)(a6 + v76 + 16);
              v76 += 24;
            }
            while (v66 != v78);
          }
          return result;
        }
        v67 = a3;
        v68 = a2[1];
        v69 = *(_QWORD *)(a6 + 8);
        if (v69 >= (unint64_t)v68)
          v70 = (size_t)a2[1];
        else
          v70 = *(_QWORD *)(a6 + 8);
        if (v70 && (v71 = memcmp(*a2, *(const void **)a6, v70)) != 0)
        {
          if (v71 < 0)
            goto LABEL_114;
        }
        else if ((unint64_t)v68 < v69)
        {
LABEL_114:
          result = *(__n128 *)a2;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          a1[2] = a2[2];
          a2 += 3;
          goto LABEL_115;
        }
        result = *(__n128 *)a6;
        *(_OWORD *)a1 = *(_OWORD *)a6;
        a1[2] = *(const void **)(a6 + 16);
        a6 += 24;
LABEL_115:
        a3 = v67;
        a1 += 3;
        if (v65 == a6)
          return result;
      }
    }
    if (!a4)
      return result;
    v13 = 0;
    v14 = a2[1];
    v15 = -a4;
    while (1)
    {
      v16 = (unint64_t)a1[v13 + 1];
      v17 = (size_t)(v16 >= (unint64_t)v14 ? v14 : a1[v13 + 1]);
      if (!v17)
        break;
      v18 = memcmp(*a2, a1[v13], v17);
      if (!v18)
        break;
      if (v18 < 0)
        goto LABEL_17;
LABEL_14:
      v13 += 3;
      if (__CFADD__(v15++, 1))
        return result;
    }
    if ((unint64_t)v14 >= v16)
      goto LABEL_14;
LABEL_17:
    v21 = -v15;
    v22 = &a1[v13];
    v82 = a3;
    v83 = a6;
    v81 = a7;
    v84 = &a1[v13];
    if (-v15 < v85)
    {
      if (v85 >= 0)
        v23 = v85;
      else
        v23 = v85 + 1;
      v79 = v23 >> 1;
      v80 = (char *)a1;
      v24 = &a2[3 * (v23 >> 1)];
      v25 = a2;
      if (v22 != a2)
      {
        v26 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - v80 - v13 * 8) >> 3);
        v27 = (size_t)v24[1];
        v25 = v84;
        do
        {
          v28 = &v25[3 * (v26 >> 1)];
          v29 = v28[1];
          if ((unint64_t)v29 >= v27)
            v30 = v27;
          else
            v30 = (size_t)v28[1];
          if (v30 && (v31 = memcmp(*v24, *v28, v30)) != 0)
          {
            v32 = (v31 >> 31) | 1;
          }
          else
          {
            if (v27 < (unint64_t)v29)
              v32 = -1;
            else
              v32 = 1;
            if ((const void *)v27 == v29)
              v32 = 0;
          }
          if (v32 == -1)
          {
            v26 >>= 1;
          }
          else
          {
            v25 = v28 + 3;
            v26 += ~(v26 >> 1);
          }
        }
        while (v26);
      }
      v33 = v79;
      v34 = 0xAAAAAAAAAAAAAAABLL * (((char *)v25 - v80 - v13 * 8) >> 3);
      goto LABEL_62;
    }
    if (v15 == -1)
    {
      v72 = &a1[v13];
      v88 = *(__n128 *)&a1[v13];
      *(_OWORD *)v72 = *(_OWORD *)a2;
      result = v88;
      *(__n128 *)a2 = v88;
      v73 = a1[v13 + 2];
      v72[2] = a2[2];
      a2[2] = v73;
      return result;
    }
    if (v15 > 0)
      v21 = 1 - v15;
    v34 = v21 >> 1;
    v25 = (const void **)((char *)&a1[3 * (v21 >> 1)] + v13 * 8);
    v35 = a1;
    v24 = a3;
    if (a3 != a2)
    {
      v36 = 0xAAAAAAAAAAAAAAABLL * (a3 - a2);
      v37 = *(size_t *)((char *)&v35[3 * v34 + 1] + v13 * 8);
      v24 = a2;
      do
      {
        v38 = &v24[3 * (v36 >> 1)];
        v39 = (size_t)v38[1];
        if (v37 >= v39)
          v40 = (size_t)v38[1];
        else
          v40 = v37;
        if (v40 && (v41 = memcmp(*v38, *v25, v40)) != 0)
        {
          v42 = (v41 >> 31) | 1;
        }
        else
        {
          if (v39 < v37)
            v42 = -1;
          else
            v42 = 1;
          if (v39 == v37)
            v42 = 0;
        }
        if (v42 == -1)
          v36 += ~(v36 >> 1);
        else
          v36 >>= 1;
        if (v42 == -1)
          v24 = v38 + 3;
      }
      while (v36);
    }
    v33 = 0xAAAAAAAAAAAAAAABLL * (v24 - a2);
LABEL_62:
    a3 = v24;
    if (v25 != a2)
    {
      a3 = v25;
      if (a2 != v24)
      {
        v43 = v25 + 3;
        a3 = a2;
        while (1)
        {
          v86 = *(_OWORD *)(v43 - 3);
          *(_OWORD *)(v43 - 3) = *(_OWORD *)a2;
          *(_OWORD *)a2 = v86;
          v44 = *(v43 - 1);
          *(v43 - 1) = a2[2];
          a2[2] = v44;
          a2 += 3;
          if (a2 == v24)
            break;
          if (v43 == a3)
            a3 = a2;
          v43 += 3;
        }
        if (v43 != a3)
        {
          v45 = v43;
          v46 = a3;
          do
          {
            while (1)
            {
              v87 = *(_OWORD *)v45;
              *(_OWORD *)v45 = *(_OWORD *)a3;
              *(_OWORD *)a3 = v87;
              v47 = v45[2];
              v45[2] = a3[2];
              a3[2] = v47;
              v45 += 3;
              a3 += 3;
              if (a3 == v24)
                break;
              if (v45 == v46)
                v46 = a3;
            }
            a3 = v46;
          }
          while (v45 != v46);
          a3 = v43;
        }
      }
    }
    a4 = -(v34 + v15);
    v48 = v85 - v33;
    a6 = v83;
    if ((uint64_t)(v34 + v33) >= (uint64_t)(v85 - (v34 + v33) - v15))
    {
      sub_22ED529BC(a3, v24, v82, -(v34 + v15), v85 - v33, v83, v81);
      v24 = v25;
      a7 = v81;
      v48 = v33;
      a4 = v34;
      v50 = v84;
    }
    else
    {
      v49 = v25;
      a7 = v81;
      sub_22ED529BC(v84, v49, a3, v34, v33, v83, v81);
      v50 = a3;
      a3 = v82;
    }
    v85 = v48;
    a2 = v24;
    a1 = v50;
  }
  while (v48);
  return result;
}

uint64_t sub_22ED52FCC(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  void **v5;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  char v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  BOOL v41;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  const void *v49;
  uint64_t v50;
  size_t v51;
  __int128 v52;
  const char *v53;
  size_t v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  int v61;
  unsigned int v62;
  char *v63;
  char *v64;
  char *v65;
  _DWORD *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  int v74;
  unsigned int v75;
  char *v76;
  char *v77;
  _DWORD *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  void *v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  unsigned __int8 *v90;
  uint64_t v91;
  size_t v92;
  unsigned __int16 *p_dst;
  _DWORD *v94;
  uint64_t v95;
  uint64_t v96;
  unsigned __int16 *v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  char *v105;
  _DWORD *v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  char *v112;
  unint64_t *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  __int128 v119;
  char v120;
  int v121;
  BOOL v122;
  __int128 v123;
  char v124;
  int v125;
  uint64_t v126;
  void **v127;
  uint64_t v128;
  unsigned __int16 *v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  __int128 v133;
  char v134;
  __int128 v135;
  char *v136;
  char *v137;
  uint64_t v138;
  int v139;
  void **v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  __int128 v145;
  char v146;
  __int16 v147;
  __int128 v148;
  char *v149;
  char *v150;
  int v151;
  int v152;
  unint64_t v153;
  std::string *v155;
  std::string::size_type v156;
  int v157;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  BOOL v174;
  BOOL v175;
  uint64_t v177;
  int v178;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v186;
  int v187;
  uint64_t v188;
  void **v189;
  uint64_t v190;
  int v191;
  unsigned int v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  void **v196;
  uint64_t v197;
  uint64_t v198;
  __int128 v199;
  unint64_t v200;
  int v201;
  int v202;
  uint64_t v204;
  uint64_t v205;
  unint64_t v207;
  int v208;
  int v209;
  _BOOL4 v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  int v215;
  int *v216;
  int v217;
  int v218;
  int v219;
  int v221;
  int v222;
  uint64_t v223;
  uint64_t v224;
  BOOL v225;
  uint64_t v226;
  uint64_t *v227;
  uint64_t v228;
  uint64_t *v229;
  uint64_t *v230;
  uint64_t v231;
  int v232;
  void *v233;
  uint64_t v234;
  uint64_t *v235;
  int v236;
  uint64_t v238;
  uint64_t *v239;
  uint64_t v240;
  uint64_t *v241;
  uint64_t v242;
  unsigned int v243;
  uint64_t v244;
  int v245;
  uint64_t v246;
  uint64_t *v247;
  BOOL v248;
  int v249;
  BOOL v250;
  uint64_t *v251;
  uint64_t v252;
  int v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unsigned int *v260;
  uint64_t v261;
  uint64_t v262;
  unsigned __int8 *v263;
  _BYTE *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unsigned __int8 *v268;
  _BYTE *v269;
  uint64_t v270;
  llvm *v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  char *v275;
  int v276;
  uint64_t v277;
  uint64_t v278;
  char *v279;
  char *v280;
  int v281;
  BOOL v282;
  int v283;
  int v284;
  unsigned int v285;
  int v286;
  char *v287;
  int v288;
  BOOL v289;
  unsigned int v290;
  int v291;
  unsigned int v292;
  int v293;
  int v294;
  BOOL v295;
  unsigned int v296;
  void *v297;
  uint64_t v299;
  uint64_t *v300;
  void *v301;
  uint64_t v302;
  unsigned __int8 *v303;
  unsigned __int8 **v304;
  unsigned __int8 *v305;
  _BYTE *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t *v309;
  void *v310;
  uint64_t v311;
  unsigned __int8 *v312;
  unsigned __int8 **v313;
  unsigned __int8 *v314;
  _BYTE *v315;
  uint64_t v316;
  _DWORD *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  unint64_t v323;
  uint64_t v324;
  int v325;
  int v326;
  unsigned __int8 *v327;
  void **v328;
  void **v329;
  void **v330;
  uint64_t v331;
  unint64_t v332;
  unint64_t v333;
  unint64_t v334;
  int v335;
  void *v336[2];
  __int16 v337;
  char v338;
  unsigned __int16 *__dst;
  __int128 v340;
  void *v341;
  uint64_t v342;
  uint64_t v343;
  char v344;
  void *__p;
  char *v346;
  char *v347;
  uint64_t v348;
  void *v349[2];
  __int128 v350;
  uint64_t v351;
  _BYTE v352[32];
  __int128 v353;
  __int128 v354;
  void *v355[2];
  _OWORD v356[2];
  _BYTE v357[128];
  uint64_t v358;

  v5 = (void **)a3;
  v358 = *MEMORY[0x24BDAC8D0];
  v9 = (uint64_t *)(a3 + 8);
  v8 = *(_QWORD *)(a3 + 8);
  if ((v8 & 4) != 0)
  {
    v11 = v8 & 0xFFFFFFFFFFFFFFF8;
    v9 = *(uint64_t **)v11;
    v10 = *(_QWORD *)v11 + 8 * *(unsigned int *)(v11 + 8);
  }
  else
  {
    v10 = (uint64_t)&v9[v8 > 7];
  }
  if (v9 != (uint64_t *)v10)
  {
    v332 = 0;
    while (1)
    {
      v12 = *v9;
      if ((*(_BYTE *)(*v9 + 50) & 1) != 0)
        goto LABEL_18;
      v13 = *(unsigned __int16 **)(v12 + 72);
      v14 = v13[4];
      if (v14 == 479)
        goto LABEL_18;
      if (v14 == 480
        || (v15 = (unint64_t)*v5,
            v16 = *(_QWORD *)(a1 + 88),
            v17 = *(_QWORD *)(v16 + 15096),
            ((*(uint64_t (**)(unsigned __int16 *, _QWORD))(*(_QWORD *)v13 + 48))(v13, *(_QWORD *)(v16 + 15088)) & 1) == 0)&& ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 2000) + 104) & 4) == 0|| !v17|| ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v12 + 72) + 48))(*(_QWORD *)(v12 + 72), v17) & 1) == 0))
      {
        if ((*(_BYTE *)(v12 + 30) & 7) << 16 == 196608)
          v18 = 7086;
        else
          v18 = 146;
        sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v12 + 16), v18, 0, (uint64_t)v352);
        v19 = sub_22E8D2984((uint64_t)v352, (uint64_t *)v12);
        v349[0] = *(void **)(v12 + 16);
        sub_22E8906A0(v19, (uint64_t *)v349);
        goto LABEL_17;
      }
      if (sub_22F30B4B4((_QWORD *)a1, (uint64_t)a2, v12, 0))
        goto LABEL_18;
      v20 = *(unsigned __int16 *)(*(_QWORD *)(v12 + 72) + 8);
      if (v20 > 0x109)
        break;
      if (*(unsigned __int16 *)(*(_QWORD *)(v12 + 72) + 8) > 0x81u)
      {
        if (v20 == 130)
        {
          v349[0] = (void *)v15;
          if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 0x10) == 0)
          {
            v40 = *(unsigned __int16 *)(v12 + 28) | (*(unsigned __int8 *)(v12 + 30) << 16);
            v41 = (v40 & 0x5FFFF) == 0x50011 || (v40 & 0x70000) == 0x10000;
            if (v41 && *(_QWORD *)(v12 + 8) == 0)
            {
              sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v12 + 16), 0x1454u, 0, (uint64_t)v352);
              v43 = sub_22E8D2984((uint64_t)v352, (uint64_t *)v12);
              sub_22E8906A0(v43, (uint64_t *)v349);
              sub_22E903BEC((unsigned int *)v352);
            }
          }
          v30 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 40, 3);
          v31 = v30;
          v44 = *(_OWORD *)(v12 + 16);
          *(_OWORD *)v30 = *(_OWORD *)v12;
          *(_OWORD *)(v30 + 16) = v44;
          v33 = *(_BYTE *)(v30 + 34);
          *(_WORD *)(v30 + 32) = 40;
          goto LABEL_137;
        }
        if (v20 != 135)
        {
          if (v20 != 176)
            goto LABEL_349;
          v21 = *(_QWORD *)(v12 + 48);
          if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 133) & 0x20) == 0)
          {
            *(_QWORD *)(v12 + 48) = v21 | 0x10000;
            if ((*(_QWORD *)(*(_QWORD *)(a1 + 72) + 100) & 0x4000000000) != 0)
              v22 = 36;
            else
              v22 = 44;
            sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v12 + 16), 0xEDEu, 0, (uint64_t)v352);
            v349[0] = *(void **)(v12 + 16);
            v23 = sub_22E8906A0((uint64_t)v352, (uint64_t *)v349);
            v24 = v5;
            v25 = sub_22E8D2984(v23, (uint64_t *)v12);
            __dst = *(unsigned __int16 **)sub_22F1D5FAC(v22);
            v26 = v25;
            v5 = v24;
            sub_22E8AECC4(v26, (uint64_t *)&__dst);
            goto LABEL_17;
          }
          if (!(unsigned __int16)*(_QWORD *)(v12 + 48))
            goto LABEL_186;
          v320 = a4;
          __p = 0;
          v346 = 0;
          v347 = 0;
          sub_22EAA2BD8((uint64_t)&__p, (unsigned __int16)v21);
          v322 = *(unsigned __int16 *)(v12 + 48);
          if (*(_WORD *)(v12 + 48))
          {
            v88 = 0;
            v89 = v332;
            v330 = v5;
            while (1)
            {
              v324 = v88;
              v90 = sub_22EFFBBCC((unsigned __int8 *)(*(_QWORD *)(v12 + 80 + 8 * v88) & 0xFFFFFFFFFFFFFFFCLL));
              v327 = v90 + 20;
              v91 = *((unsigned int *)v90 + 1);
              v92 = ((*(_DWORD *)v90 >> 21) & 7u) * *((_DWORD *)v90 + 4);
              if (v92 >= 0x17)
              {
                v333 = v89;
                v94 = a2;
                if ((v92 | 7) == 0x17)
                  v95 = (v92 & 0xFFFFFFF8) + 8;
                else
                  v95 = v92 | 7;
                p_dst = (unsigned __int16 *)operator new(v95 + 1);
                v96 = v95 - 0x7FFFFFFFFFFFFFFFLL;
                a2 = v94;
                v89 = v333;
                *(_QWORD *)&v340 = v92;
                *((_QWORD *)&v340 + 1) = v96;
                __dst = p_dst;
              }
              else
              {
                HIBYTE(v340) = ((*(_DWORD *)v90 >> 21) & 7) * v90[16];
                p_dst = (unsigned __int16 *)&__dst;
                if (!(_DWORD)v92)
                  goto LABEL_149;
              }
              memmove(p_dst, &v327[4 * v91], v92);
LABEL_149:
              *((_BYTE *)p_dst + v92) = 0;
              if (v340 >= 0)
                v97 = (unsigned __int16 *)&__dst;
              else
                v97 = __dst;
              v98 = HIBYTE(v340) & 0x7F;
              if (v340 < 0)
                v98 = v340;
              sub_22F140DA4((uint64_t)v352, 0, *(_DWORD **)(a1 + 72), v97, v97, (uint64_t)v97 + v98, 1);
              v357[66] = 2;
              sub_22F14651C(v352, (uint64_t)v336);
              v5 = v330;
              if (v337 != 6)
                goto LABEL_160;
              while (1)
              {
                sub_22F14651C(v352, (uint64_t)v336);
                if (v337 != 71)
                  break;
                sub_22F14651C(v352, (uint64_t)v336);
                if (v337 != 6)
                  goto LABEL_160;
              }
              if (v337 == 1)
              {
                v99 = 0;
                v323 = ((*(_DWORD *)v90 >> 21) & 7u) * *((_DWORD *)v90 + 4);
                v100 = ((_BYTE)v327 + 4 * *((_DWORD *)v90 + 1));
                v89 = (unint64_t)&v327[4 * *((unsigned int *)v90 + 1)] >> 8;
              }
              else
              {
LABEL_160:
                sub_22EFF605C((uint64_t)v90);
                sub_22E8FCA40((_QWORD *)a1, v101, 0xF11u, 0, (uint64_t)v349);
                sub_22F0D4E74((uint64_t)v90);
                v348 = v102;
                v103 = sub_22E8906A0((uint64_t)v349, &v348);
                sub_22E8D2984(v103, (uint64_t *)v12);
                sub_22E903BEC((unsigned int *)v349);
                v100 = 0;
                v99 = 1;
              }
              *(_QWORD *)v352 = &unk_24FAC8A48;
              sub_22E730D24((uint64_t)v357);
              if (v355[0] != v356)
                free(v355[0]);
              if (SHIBYTE(v340) < 0)
                operator delete(__dst);
              if ((v99 & 1) != 0)
              {
                v332 = v89;
                goto LABEL_209;
              }
              v104 = v346;
              if (v346 >= v347)
              {
                v106 = a2;
                v107 = v100;
                v108 = __p;
                v109 = (v346 - (_BYTE *)__p) >> 4;
                v110 = v109 + 1;
                if ((unint64_t)(v109 + 1) >> 60)
                  goto LABEL_573;
                v111 = v347 - (_BYTE *)__p;
                if ((v347 - (_BYTE *)__p) >> 3 > v110)
                  v110 = v111 >> 3;
                if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFF0)
                  v110 = 0xFFFFFFFFFFFFFFFLL;
                v334 = v110;
                if (v110)
                {
                  if (v110 >> 60)
                    goto LABEL_574;
                  v112 = (char *)operator new(16 * v110);
                }
                else
                {
                  v112 = 0;
                }
                v113 = (unint64_t *)&v112[16 * v109];
                *v113 = v107 | (v89 << 8);
                v113[1] = v323;
                v114 = v113;
                a2 = v106;
                if (v104 == v108)
                {
                  v115 = v334;
                }
                else
                {
                  v115 = v334;
                  do
                  {
                    *((_OWORD *)v114 - 1) = *((_OWORD *)v104 - 1);
                    v114 -= 2;
                    v104 -= 2;
                  }
                  while (v104 != v108);
                  v104 = __p;
                }
                v105 = (char *)(v113 + 2);
                __p = v114;
                v346 = (char *)(v113 + 2);
                v347 = &v112[16 * v115];
                v5 = v330;
                if (v104)
                  operator delete(v104);
              }
              else
              {
                *(_QWORD *)v346 = v100 | (v89 << 8);
                v104[1] = v323;
                v105 = (char *)(v104 + 2);
              }
              v346 = v105;
              v88 = v324 + 1;
              if (v324 + 1 == v322)
                goto LABEL_403;
            }
          }
          v89 = v332;
LABEL_403:
          v332 = v89;
          v213 = *(unsigned __int8 *)a2;
          if (v213 == 93 || (v213 - 102) < 0x85)
          {
            v31 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 48, 3);
            sub_22F38C5DC(v31, *(_QWORD *)(a1 + 88), (_OWORD *)v12, (uint64_t)__p, (unint64_t)(v346 - (_BYTE *)__p) >> 4);
          }
          else
          {
            sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v12 + 16), 0xB02u, 0, (uint64_t)v352);
            v214 = sub_22E8D2984((uint64_t)v352, (uint64_t *)v12);
            sub_22F0D5A50((uint64_t)a2);
            LODWORD(v349[0]) = v215;
            sub_22F2F2168(v214, (unsigned int *)v349);
            sub_22E903BEC((unsigned int *)v352);
LABEL_209:
            v31 = 0;
          }
          a4 = v320;
          v86 = __p;
          if (!__p)
            goto LABEL_365;
          v346 = (char *)__p;
          goto LABEL_364;
        }
        v328 = v5;
        v318 = a4;
        v45 = *(_QWORD *)(v12 + 88);
        v47 = *(_QWORD *)(v12 + 96);
        v46 = *(_QWORD *)(v12 + 104);
        v48 = *(uint64_t **)(*(_QWORD *)((*(_QWORD *)(v12 + 80) & 0xFFFFFFFFFFFFFFFCLL) + 8) + 16);
        v50 = *v48;
        v49 = v48 + 2;
        v51 = v50;
        *((_QWORD *)&v52 + 1) = v50;
        *(_QWORD *)&v52 = v50 - 6;
        v53 = "clang loop";
        v54 = 10;
        switch((unint64_t)(v52 >> 1))
        {
          case 0uLL:
            if (memcmp(v49, "unroll", v51))
              goto LABEL_215;
            v54 = 6;
            goto LABEL_253;
          case 1uLL:
            if (memcmp(v49, "nounroll", v51))
              goto LABEL_215;
            v54 = 8;
            goto LABEL_253;
          case 4uLL:
            if (!memcmp(v49, "unroll_and_jam", v51))
            {
              v54 = 14;
LABEL_253:
              v53 = (const char *)v49;
            }
            else
            {
LABEL_215:
              v54 = 10;
              v53 = "clang loop";
            }
LABEL_254:
            v152 = *(unsigned __int8 *)a2;
            if ((v152 - 13) >= 2 && v152 != 5 && v152 != 236)
            {
              v352[23] = v54;
              memmove(v352, v53, v54);
              v352[v54] = 0;
              v155 = std::string::insert((std::string *)v352, 0, "#pragma ");
              v156 = v155->__r_.__value_.__r.__words[2];
              *(_OWORD *)v349 = *(_OWORD *)&v155->__r_.__value_.__l.__data_;
              *(_QWORD *)&v350 = v156;
              v155->__r_.__value_.__l.__size_ = 0;
              v155->__r_.__value_.__r.__words[2] = 0;
              v155->__r_.__value_.__r.__words[0] = 0;
              a4 = v318;
              v5 = v328;
              if ((v352[23] & 0x80000000) != 0)
                operator delete(*(void **)v352);
              sub_22F0D5A50((uint64_t)a2);
              sub_22E8FCA40((_QWORD *)a1, v157, 0x11BFu, 0, (uint64_t)v352);
              sub_22E90749C((uint64_t)v352, v349);
              sub_22E903BEC((unsigned int *)v352);
              if (SBYTE7(v350) < 0)
                operator delete(v349[0]);
              goto LABEL_18;
            }
            break;
          case 5uLL:
            v125 = memcmp(v49, "nounroll_and_jam", v51);
            if (v125)
              v54 = 10;
            else
              v54 = 16;
            if (v125)
              v53 = "clang loop";
            else
              v53 = (const char *)v49;
            goto LABEL_254;
          default:
            goto LABEL_254;
        }
        v153 = v46 & 0xFFFFFFFFFFFFFFFCLL;
        switch((v54 - 6) >> 1)
        {
          case 0uLL:
            goto LABEL_258;
          case 1uLL:
            if (*(_QWORD *)v53 == 0x6C6C6F726E756F6ELL)
            {
              v209 = 1;
              v208 = 4;
              goto LABEL_423;
            }
            if (v54 == 16)
              goto LABEL_274;
            if (v54 == 14)
              goto LABEL_279;
            if (v54 != 6)
              goto LABEL_283;
LABEL_258:
            if (*(_DWORD *)v53 == 1869770357 && *((_WORD *)v53 + 2) == 27756)
            {
              v210 = v153 != 0;
              if (v153)
                v208 = 5;
              else
                v208 = 4;
LABEL_411:
              v209 = 2 * v210;
LABEL_423:
              a4 = v318;
              v5 = v328;
              goto LABEL_424;
            }
            if (v54 == 14)
              goto LABEL_279;
            if (v54 == 16)
            {
LABEL_274:
              if (*(_QWORD *)v53 == 0x6C6C6F726E756F6ELL && *((_QWORD *)v53 + 1) == 0x6D616A5F646E615FLL)
              {
                v209 = 1;
                v208 = 6;
                goto LABEL_423;
              }
              if (v54 == 14)
              {
LABEL_279:
                if (*(_QWORD *)v53 == 0x615F6C6C6F726E75 && *(_QWORD *)(v53 + 6) == 0x6D616A5F646E615FLL)
                {
                  v210 = v153 != 0;
                  if (v153)
                    v208 = 7;
                  else
                    v208 = 6;
                  goto LABEL_411;
                }
              }
            }
LABEL_283:
            v160 = *(uint64_t **)(*(_QWORD *)((v45 & 0xFFFFFFFFFFFFFFFCLL) + 8) + 16);
            v161 = *v160;
            v162 = *v160;
            if (*v160 == 15)
            {
              if (v160[2] ^ 0x7A69726F74636576 | *(uint64_t *)((char *)v160 + 23) ^ 0x68746469775F657ALL)
                v165 = 0;
              else
                v165 = 0x100000001;
              v5 = v328;
            }
            else
            {
              v5 = v328;
              if ((_DWORD)v161 != 9)
              {
                if (v162 == 10)
                {
                  v165 = 0x100000002;
                  if (v160[2] != 0x61656C7265746E69 || *((_WORD *)v160 + 12) != 25974)
                  {
                    if (v160[2] ^ 0x7562697274736964 | *((unsigned __int16 *)v160 + 12) ^ 0x6574)
                      v165 = 0;
                    else
                      v165 = 0x10000000ALL;
                  }
LABEL_380:
                  v207 = v47 & 0xFFFFFFFFFFFFFFFCLL;
                  if ((v165 & 0x300000000) != 0)
                    v208 = v165;
                  else
                    v208 = 0;
                  switch(v208)
                  {
                    case 1:
                      if (v153)
                      {
                        sub_22F0D5A50((uint64_t)a2);
                        if ((sub_22EB25E50((_QWORD *)a1, v153) & 1) != 0)
                          goto LABEL_388;
                      }
                      a4 = v318;
                      if (v207
                        && (v211 = *(_QWORD *)(v207 + 8)) != 0
                        && (v212 = *(_QWORD *)(v211 + 16), *(_DWORD *)v212 == 8)
                        && *(_QWORD *)(v212 + 16) == 0x656C62616C616373)
                      {
                        v209 = 4;
                      }
                      else
                      {
                        v209 = 3;
                      }
                      v208 = 1;
                      break;
                    case 3:
                    case 5:
                    case 9:
                      sub_22F0D5A50((uint64_t)a2);
                      if ((sub_22EB25E50((_QWORD *)a1, v153) & 1) == 0)
                      {
                        v209 = 2;
                        v208 = v165;
                        a4 = v318;
                        break;
                      }
LABEL_388:
                      a4 = v318;
                      goto LABEL_18;
                    default:
                      v216 = *(int **)(*(_QWORD *)(v207 + 8) + 16);
                      v217 = *v216;
                      if (*v216 == 4)
                      {
                        a4 = v318;
                        if (v216[4] == 1819047270)
                        {
                          v209 = 6;
                          break;
                        }
                      }
                      else if (v217 == 13)
                      {
                        v223 = *((_QWORD *)v216 + 2);
                        v224 = *(_QWORD *)((char *)v216 + 21);
                        v225 = v223 == 0x735F656D75737361 && v224 == 0x7974656661735F65;
                        a4 = v318;
                        if (v225)
                        {
                          v209 = 5;
                          break;
                        }
                      }
                      else
                      {
                        a4 = v318;
                        if (v217 == 7)
                        {
                          v218 = v216[4];
                          v219 = *(int *)((char *)v216 + 19);
                          if (v218 == 1634953572 && v219 == 1701601889)
                          {
                            v209 = 1;
                            break;
                          }
                        }
                      }
                      v209 = 0;
                      break;
                  }
LABEL_424:
                  v31 = sub_22F389338(*(_QWORD *)(a1 + 88), v208, v209, v153, (_OWORD *)v12);
                  goto LABEL_366;
                }
                switch((_DWORD)v161)
                {
                  case 6:
                    v201 = *((_DWORD *)v160 + 4);
                    v202 = *((unsigned __int16 *)v160 + 10);
                    if (v201 == 1869770357 && v202 == 27756)
                    {
                      v165 = 0x100000004;
                      goto LABEL_380;
                    }
                    break;
                  case 0x10:
                    v205 = v160[2];
                    v204 = v160[3];
                    if (v205 == 0x61656C7265746E69 && v204 == 0x746E756F635F6576)
                    {
                      v165 = 0x100000003;
                      goto LABEL_380;
                    }
                    break;
                  case 0x13:
                    v181 = v160[2];
                    v182 = v160[3];
                    v183 = *(uint64_t *)((char *)v160 + 27);
                    if (v181 == 0x7A69726F74636576 && v182 == 0x6369646572705F65 && v183 == 0x6574616369646572)
                    {
                      v165 = 0x10000000BLL;
                      goto LABEL_380;
                    }
                    break;
                  default:
                    v165 = 0;
                    goto LABEL_296;
                }
                v165 = 0;
                goto LABEL_380;
              }
              v164 = v160[2] == 0x7A69726F74636576 && *((_BYTE *)v160 + 24) == 101;
              v165 = v164 << 32;
            }
LABEL_296:
            v166 = HIDWORD(v165);
            if (v162 == 12 && v166 == 0)
            {
              v177 = v160[2];
              v178 = *((_DWORD *)v160 + 6);
              if (v177 == 0x635F6C6C6F726E75 && v178 == 1953396079)
                v165 = 0x100000005;
            }
            else if (v162 == 8 && v166 == 0)
            {
              if (v160[2] == 0x656E696C65706970)
                v165 = 0x100000008;
            }
            else if (v162 == 28 && v166 == 0)
            {
              v170 = v160[2];
              v171 = v160[3];
              v172 = v160[4];
              v173 = *((_DWORD *)v160 + 10);
              v174 = v170 == 0x656E696C65706970 && v171 == 0x74616974696E695FLL;
              v175 = v174 && v172 == 0x65746E695F6E6F69;
              if (v175 && v173 == 1818326642)
                v165 = 0x100000009;
            }
            goto LABEL_380;
          case 4uLL:
            goto LABEL_279;
          case 5uLL:
            goto LABEL_274;
          default:
            goto LABEL_283;
        }
      }
      if (v20 == 23)
      {
        v329 = v5;
        v319 = a4;
        v74 = *(unsigned __int16 *)(v12 + 48);
        if (*(_WORD *)(v12 + 48))
        {
          v75 = 0;
          v64 = 0;
          v76 = 0;
          v77 = 0;
          v326 = *(unsigned __int16 *)(v12 + 48);
          while (1)
          {
            *(_OWORD *)v352 = 0uLL;
            if (!sub_22EA472B0(a1, v12, v75, (uint64_t *)v352, 0))
              goto LABEL_132;
            if (v76 >= v77)
            {
              v78 = a2;
              v79 = (v76 - v64) >> 4;
              v80 = v79 + 1;
              if ((unint64_t)(v79 + 1) >> 60)
                goto LABEL_573;
              if ((v77 - v64) >> 3 > v80)
                v80 = (v77 - v64) >> 3;
              if ((unint64_t)(v77 - v64) >= 0x7FFFFFFFFFFFFFF0)
                v81 = 0xFFFFFFFFFFFFFFFLL;
              else
                v81 = v80;
              if (v81)
              {
                if (v81 >> 60)
                  goto LABEL_574;
                v82 = (char *)operator new(16 * v81);
              }
              else
              {
                v82 = 0;
              }
              v83 = &v82[16 * v79];
              *(_OWORD *)v83 = *(_OWORD *)v352;
              if (v76 == v64)
              {
                v85 = &v82[16 * v79];
              }
              else
              {
                v84 = &v82[16 * v79];
                do
                {
                  v85 = v84 - 16;
                  *((_OWORD *)v84 - 1) = *((_OWORD *)v76 - 1);
                  v76 -= 16;
                  v84 -= 16;
                }
                while (v76 != v64);
              }
              v77 = &v82[16 * v81];
              v76 = v83 + 16;
              if (v64)
                operator delete(v64);
              v64 = v85;
              a2 = v78;
              v74 = v326;
            }
            else
            {
              *(_OWORD *)v76 = *(_OWORD *)v352;
              v76 += 16;
            }
            if (++v75 == v74)
              goto LABEL_354;
          }
        }
        v76 = 0;
        v64 = 0;
LABEL_354:
        v31 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 48, 3);
        sub_22F37D6AC(v31, *(_QWORD *)(a1 + 88), (_OWORD *)v12, (uint64_t)v64, (unint64_t)(v76 - v64) >> 4);
LABEL_133:
        a4 = v319;
        v5 = v329;
        if (v64)
        {
          v86 = v64;
          goto LABEL_364;
        }
LABEL_365:
        if (v31)
          goto LABEL_366;
        goto LABEL_18;
      }
      if (v20 != 104)
      {
        if (v20 != 21)
          goto LABEL_349;
        v321 = a4;
        v135 = *(_OWORD *)(v12 + 16);
        *(_OWORD *)v349 = *(_OWORD *)v12;
        v350 = v135;
        LOWORD(v351) = 45;
        BYTE2(v351) &= 0xE0u;
        if (!sub_22F3454B0((uint64_t)v349))
        {
          sub_22F0D5A50((uint64_t)a2);
          sub_22E8FCA40((_QWORD *)a1, v221, 0x19D0u, 0, (uint64_t)v352);
          sub_22F2F30F4((uint64_t)v352, (uint64_t)"[[clang::always_inline]]");
LABEL_427:
          sub_22E903BEC((unsigned int *)v352);
          a4 = v321;
          goto LABEL_18;
        }
        __dst = *(unsigned __int16 **)(a1 + 88);
        LOBYTE(v340) = 0;
        v341 = 0;
        v342 = 0;
        *((_QWORD *)&v340 + 1) = 0;
        if (a2)
        {
          sub_22ED553EC((uint64_t)&__dst, a2);
          v136 = (char *)*((_QWORD *)&v340 + 1);
          v137 = (char *)v341;
          if (*((void **)&v340 + 1) != v341)
          {
            do
            {
              v138 = sub_22EFFA604(*(unsigned __int8 **)(*(_QWORD *)v136 + *(unsigned __int8 *)(*(_QWORD *)v136 + 3)));
              if (sub_22F24F5B4(v138) || sub_22F24F554(v138))
              {
                sub_22F0D5A50((uint64_t)a2);
                sub_22E8FCA40((_QWORD *)a1, v139, 0x19D2u, 0, (uint64_t)v352);
                v140 = v5;
                v141 = sub_22E8D2984((uint64_t)v352, (uint64_t *)v12);
                if (sub_22F24F5B4(v138))
                  v142 = 2;
                else
                  v142 = 1;
                LODWORD(v336[0]) = v142;
                v143 = v141;
                v5 = v140;
                sub_22E8900C4(v143, (int *)v336);
                sub_22E903BEC((unsigned int *)v352);
              }
              v136 += 8;
            }
            while (v136 != v137);
            v144 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 40, 3);
            v31 = v144;
            v145 = *(_OWORD *)(v12 + 16);
            *(_OWORD *)v144 = *(_OWORD *)v12;
            *(_OWORD *)(v144 + 16) = v145;
            v146 = *(_BYTE *)(v144 + 34);
            v147 = 45;
            goto LABEL_361;
          }
        }
LABEL_251:
        sub_22F0D5A50((uint64_t)a2);
        sub_22E8FCA40((_QWORD *)a1, v151, 0x1877u, 0, (uint64_t)v352);
        sub_22E8D2984((uint64_t)v352, (uint64_t *)v12);
        sub_22E903BEC((unsigned int *)v352);
        v31 = 0;
        goto LABEL_362;
      }
      if ((*(_BYTE *)a2 & 0xFE) == 0x62)
      {
        v188 = (uint64_t)a2;
        v189 = v5;
        sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v12 + 16), 0xD1Eu, 0, (uint64_t)v352);
        v190 = sub_22E8D2984((uint64_t)v352, (uint64_t *)v12);
        sub_22F0D5A50(v188);
        LODWORD(__dst) = v191;
        sub_22F2F2168(v190, (unsigned int *)&__dst);
        sub_22E903BEC((unsigned int *)v352);
        v192 = sub_22F141A3C(HIDWORD(v15), 0, *(_QWORD **)(a1 + 112), *(_DWORD **)(a1 + 72));
        v193 = v192;
        sub_22E8FCA40((_QWORD *)a1, v192, 0x15F5u, 0, (uint64_t)v352);
        BYTE12(v340) = 0;
        *(_QWORD *)((char *)&v340 + 4) = 0;
        v342 = 0;
        v343 = 0x100000000000000;
        v341 = (void *)59;
        __dst = (unsigned __int16 *)(v193 | (v193 << 32));
        LOBYTE(v340) = 0;
        v344 = 0;
        sub_22E890748((uint64_t)v352, &__dst);
        if (SHIBYTE(v343) < 0)
          operator delete(v341);
        sub_22E903BEC((unsigned int *)v352);
        v5 = v189;
        a2 = (_DWORD *)v188;
        goto LABEL_18;
      }
      v35 = *(unsigned int *)(a1 + 1904);
      if ((_DWORD)v35)
        v36 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v35 - 8);
      else
        v36 = 0;
      if (*(_DWORD *)(v36 + 56))
      {
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 8) == 0)
        {
          v121 = *(unsigned __int16 *)(v12 + 28) | (*(unsigned __int8 *)(v12 + 30) << 16);
          v122 = (v121 & 0x5FFFF) == 0x50011 || (v121 & 0x70000) == 0x10000;
          if (v122 && !*(_QWORD *)(v12 + 8))
          {
            sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v12 + 16), 0x1453u, 0, (uint64_t)v352);
            sub_22E8D2984((uint64_t)v352, (uint64_t *)v12);
            sub_22E903BEC((unsigned int *)v352);
          }
        }
        *(_DWORD *)(v36 + 8) |= 0x200u;
        v31 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 40, 3);
        v123 = *(_OWORD *)(v12 + 16);
        *(_OWORD *)v31 = *(_OWORD *)v12;
        *(_OWORD *)(v31 + 16) = v123;
        v124 = *(_BYTE *)(v31 + 34);
        *(_WORD *)(v31 + 32) = 39;
        *(_BYTE *)(v31 + 34) = v124 & 0xE0;
        if (!v31)
          goto LABEL_18;
        goto LABEL_366;
      }
      sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v12 + 16), 0xD1Du, 0, (uint64_t)v349);
      sub_22E903BEC((unsigned int *)v349);
LABEL_18:
      if (++v9 == (uint64_t *)v10)
        goto LABEL_437;
    }
    if (*(unsigned __int16 *)(*(_QWORD *)(v12 + 72) + 8) <= 0x162u)
    {
      switch(v20)
      {
        case 0x10Au:
          v30 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 40, 3);
          v31 = v30;
          v87 = *(_OWORD *)(v12 + 16);
          *(_OWORD *)v30 = *(_OWORD *)v12;
          *(_OWORD *)(v30 + 16) = v87;
          v33 = *(_BYTE *)(v30 + 34);
          v34 = 41;
          goto LABEL_136;
        case 0x11Eu:
          v349[0] = *(void **)(a1 + 88);
          LOBYTE(v349[1]) = 0;
          v351 = 0;
          v350 = 0uLL;
          if (a2)
          {
            sub_22ED553EC((uint64_t)v349, a2);
            v38 = *((_QWORD *)&v350 + 1);
            v37 = v350;
            v39 = LOBYTE(v349[1]);
          }
          else
          {
            v39 = 0;
            v38 = 0;
            v37 = 0;
          }
          if (v37 != v38 || v39)
          {
            v31 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 40, 3);
            v119 = *(_OWORD *)(v12 + 16);
            *(_OWORD *)v31 = *(_OWORD *)v12;
            *(_OWORD *)(v31 + 16) = v119;
            v120 = *(_BYTE *)(v31 + 34);
            *(_WORD *)(v31 + 32) = 48;
            *(_BYTE *)(v31 + 34) = v120 & 0xE0;
          }
          else
          {
            sub_22F0D5A50((uint64_t)a2);
            sub_22E8FCA40((_QWORD *)a1, v118, 0x1877u, 0, (uint64_t)v352);
            sub_22E8D2984((uint64_t)v352, (uint64_t *)v12);
            sub_22E903BEC((unsigned int *)v352);
            v31 = 0;
          }
          v86 = (void *)v350;
          if (!(_QWORD)v350)
            goto LABEL_365;
          *((_QWORD *)&v350 + 1) = v350;
          break;
        case 0x11Cu:
          v321 = a4;
          v148 = *(_OWORD *)(v12 + 16);
          *(_OWORD *)v349 = *(_OWORD *)v12;
          v350 = v148;
          LOWORD(v351) = 47;
          BYTE2(v351) &= 0xE0u;
          if (!sub_22F3454B0((uint64_t)v349))
          {
            sub_22F0D5A50((uint64_t)a2);
            sub_22E8FCA40((_QWORD *)a1, v222, 0x19D0u, 0, (uint64_t)v352);
            sub_22F2F30F4((uint64_t)v352, (uint64_t)"[[clang::noinline]]");
            goto LABEL_427;
          }
          __dst = *(unsigned __int16 **)(a1 + 88);
          LOBYTE(v340) = 0;
          v341 = 0;
          v342 = 0;
          *((_QWORD *)&v340 + 1) = 0;
          if (!a2)
            goto LABEL_251;
          sub_22ED553EC((uint64_t)&__dst, a2);
          v149 = (char *)*((_QWORD *)&v340 + 1);
          v150 = (char *)v341;
          if (*((void **)&v340 + 1) == v341)
            goto LABEL_251;
          do
          {
            v194 = sub_22EFFA604(*(unsigned __int8 **)(*(_QWORD *)v149 + *(unsigned __int8 *)(*(_QWORD *)v149 + 3)));
            if (sub_22E46A45C(v194) || sub_22F24F554(v194))
            {
              sub_22F0D5A50((uint64_t)a2);
              sub_22E8FCA40((_QWORD *)a1, v195, 0x19D2u, 0, (uint64_t)v352);
              v196 = v5;
              v197 = sub_22E8D2984((uint64_t)v352, (uint64_t *)v12);
              LODWORD(v336[0]) = !sub_22E46A45C(v194);
              v198 = v197;
              v5 = v196;
              sub_22E8900C4(v198, (int *)v336);
              sub_22E903BEC((unsigned int *)v352);
            }
            v149 += 8;
          }
          while (v149 != v150);
          v144 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 40, 3);
          v31 = v144;
          v199 = *(_OWORD *)(v12 + 16);
          *(_OWORD *)v144 = *(_OWORD *)v12;
          *(_OWORD *)(v144 + 16) = v199;
          v146 = *(_BYTE *)(v144 + 34);
          v147 = 47;
LABEL_361:
          *(_WORD *)(v144 + 32) = v147;
          *(_BYTE *)(v144 + 34) = v146 & 0xE0;
LABEL_362:
          v86 = (void *)*((_QWORD *)&v340 + 1);
          a4 = v321;
          if (!*((_QWORD *)&v340 + 1))
            goto LABEL_365;
          v341 = (void *)*((_QWORD *)&v340 + 1);
          break;
        default:
          goto LABEL_349;
      }
LABEL_364:
      operator delete(v86);
      goto LABEL_365;
    }
    if (v20 != 355)
    {
      if (v20 != 411)
      {
        if (v20 != 451)
        {
LABEL_349:
          sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v12 + 16), 0xC4Fu, 0, (uint64_t)v352);
          v186 = sub_22E8D2984((uint64_t)v352, (uint64_t *)v12);
          sub_22F0D5A50((uint64_t)a2);
          LODWORD(v349[0]) = v187;
          sub_22F2F2168(v186, (unsigned int *)v349);
          goto LABEL_17;
        }
        v349[0] = (void *)v15;
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 0x10) == 0)
        {
          v27 = *(unsigned __int16 *)(v12 + 28) | (*(unsigned __int8 *)(v12 + 30) << 16);
          v28 = (v27 & 0x5FFFF) == 0x50011 || (v27 & 0x70000) == 0x10000;
          if (v28 && !*(_QWORD *)(v12 + 8))
          {
            sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v12 + 16), 0x1454u, 0, (uint64_t)v352);
            v29 = sub_22E8D2984((uint64_t)v352, (uint64_t *)v12);
            sub_22E8906A0(v29, (uint64_t *)v349);
            sub_22E903BEC((unsigned int *)v352);
          }
        }
        v30 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 40, 3);
        v31 = v30;
        v32 = *(_OWORD *)(v12 + 16);
        *(_OWORD *)v30 = *(_OWORD *)v12;
        *(_OWORD *)(v30 + 16) = v32;
        v33 = *(_BYTE *)(v30 + 34);
        v34 = 44;
LABEL_136:
        *(_WORD *)(v30 + 32) = v34;
LABEL_137:
        *(_BYTE *)(v30 + 34) = v33 & 0xE0;
        goto LABEL_366;
      }
      v58 = *(unsigned __int16 *)(v12 + 28) | (*(unsigned __int8 *)(v12 + 30) << 16);
      if (((v58 & 0x5FFFF) == 0x50011 || (v58 & 0x70000) == 0x10000) && (unsigned __int16)*(_QWORD *)(v12 + 48) == 0)
      {
LABEL_186:
        sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v12 + 16), 0xB25u, 0, (uint64_t)v352);
        v116 = sub_22E8D2984((uint64_t)v352, (uint64_t *)v12);
        LODWORD(v349[0]) = 1;
        sub_22E8900C4(v116, (int *)v349);
LABEL_17:
        sub_22E903BEC((unsigned int *)v352);
        goto LABEL_18;
      }
      v329 = v5;
      v319 = a4;
      v61 = (unsigned __int16)*(_QWORD *)(v12 + 48);
      if ((unsigned __int16)*(_QWORD *)(v12 + 48))
      {
        v62 = 0;
        v63 = 0;
        v64 = 0;
        v65 = 0;
        v325 = (unsigned __int16)*(_QWORD *)(v12 + 48);
        while (1)
        {
          *(_OWORD *)v352 = 0uLL;
          if (!sub_22EA472B0(a1, v12, v62, (uint64_t *)v352, 0))
            break;
          if (v65 >= v63)
          {
            v66 = a2;
            v67 = (v65 - v64) >> 4;
            v68 = v67 + 1;
            if ((unint64_t)(v67 + 1) >> 60)
LABEL_573:
              abort();
            if ((v63 - v64) >> 3 > v68)
              v68 = (v63 - v64) >> 3;
            if ((unint64_t)(v63 - v64) >= 0x7FFFFFFFFFFFFFF0)
              v69 = 0xFFFFFFFFFFFFFFFLL;
            else
              v69 = v68;
            if (v69)
            {
              if (v69 >> 60)
LABEL_574:
                sub_22E3B3F8C();
              v70 = (char *)operator new(16 * v69);
            }
            else
            {
              v70 = 0;
            }
            v71 = &v70[16 * v67];
            *(_OWORD *)v71 = *(_OWORD *)v352;
            if (v65 == v64)
            {
              v73 = &v70[16 * v67];
            }
            else
            {
              v72 = &v70[16 * v67];
              do
              {
                v73 = v72 - 16;
                *((_OWORD *)v72 - 1) = *((_OWORD *)v65 - 1);
                v65 -= 16;
                v72 -= 16;
              }
              while (v65 != v64);
            }
            v63 = &v70[16 * v69];
            v65 = v71 + 16;
            if (v64)
              operator delete(v64);
            v64 = v73;
            a2 = v66;
            v61 = v325;
          }
          else
          {
            *(_OWORD *)v65 = *(_OWORD *)v352;
            v65 += 16;
          }
          if (++v62 == v61)
            goto LABEL_391;
        }
LABEL_132:
        v31 = 0;
      }
      else
      {
        v65 = 0;
        v64 = 0;
LABEL_391:
        v31 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 48, 3);
        sub_22F3A08A4(v31, *(_QWORD *)(a1 + 88), (_OWORD *)v12, (uint64_t)v64, (unint64_t)(v65 - v64) >> 4);
      }
      goto LABEL_133;
    }
    v317 = a2;
    if (*(_WORD *)(v12 + 48) != 1)
    {
      v117 = a4;
      LODWORD(v57) = 0;
LABEL_233:
      v31 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 40, 3);
      v133 = *(_OWORD *)(v12 + 16);
      *(_OWORD *)v31 = *(_OWORD *)v12;
      *(_OWORD *)(v31 + 16) = v133;
      v134 = *(_BYTE *)(v31 + 34);
      *(_WORD *)(v31 + 32) = 42;
      *(_BYTE *)(v31 + 34) = v134 & 0xE0;
      *(_DWORD *)(v31 + 36) = v57;
      a4 = v117;
      a2 = v317;
LABEL_366:
      v200 = *(unsigned int *)(a4 + 8);
      if (v200 >= *(unsigned int *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v200 = *(unsigned int *)(a4 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a4 + 8 * v200) = v31;
      ++*(_DWORD *)(a4 + 8);
      goto LABEL_18;
    }
    v55 = *(_QWORD *)(v12 + 80) & 0xFFFFFFFFFFFFFFFCLL;
    LOBYTE(v349[0]) = 0;
    LOBYTE(v350) = 0;
    sub_22F00905C(v55, *(_QWORD *)(a1 + 88), 0, (uint64_t)v352);
    sub_22E54C490((uint64_t)v349, (uint64_t)v352);
    v56 = v350;
    if (v352[16] && *(_DWORD *)&v352[8] >= 0x41u && *(_QWORD *)v352)
      MEMORY[0x2348A0E84](*(_QWORD *)v352, 0x1000C8000313F17);
    if (v56)
    {
      if (LODWORD(v349[1]) > 0x40)
        v57 = *(_QWORD *)v349[0];
      else
        v57 = (uint64_t)v349[0] << -(uint64_t)LODWORD(v349[1]) >> -(uint64_t)LODWORD(v349[1]);
      v117 = a4;
      if ((int)v57 > 0)
      {
        v131 = 1;
        goto LABEL_228;
      }
      sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v12 + 16), 0xB1Du, 0, (uint64_t)v352);
      v132 = sub_22E8D2984((uint64_t)v352, (uint64_t *)v12);
      LODWORD(__dst) = 0;
      sub_22E8900C4(v132, (int *)&__dst);
    }
    else
    {
      v117 = a4;
      sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v12 + 16), 0xAE5u, 0, (uint64_t)v352);
      v126 = sub_22E8D2984((uint64_t)v352, (uint64_t *)v12);
      LODWORD(v336[0]) = 1;
      v127 = v5;
      v128 = sub_22E8900C4(v126, (int *)v336);
      sub_22F0D4E74(v55);
      __dst = v129;
      v130 = v128;
      v5 = v127;
      sub_22E8906A0(v130, (uint64_t *)&__dst);
    }
    sub_22E903BEC((unsigned int *)v352);
    LODWORD(v57) = 0;
    v131 = 0;
LABEL_228:
    if ((_BYTE)v350 && LODWORD(v349[1]) >= 0x41 && v349[0])
      MEMORY[0x2348A0E84](v349[0], 0x1000C8000313F17);
    if (v131)
      goto LABEL_233;
    a4 = v117;
    a2 = v317;
    goto LABEL_18;
  }
LABEL_437:
  v226 = *(unsigned int *)(a4 + 8);
  v227 = *(uint64_t **)a4;
  if (v226 >= 2)
  {
    v228 = 8 * v226;
    v229 = *(uint64_t **)a4;
    v230 = &v227[v226];
    do
    {
      v231 = *v229;
      v232 = *(unsigned __int16 *)(*v229 + 32);
      if (v232 == 45)
        v233 = (void *)*v229;
      else
        v233 = 0;
      __p = v233;
      if (v233)
      {
        v234 = v228;
        v235 = v227;
        while (1)
        {
          v236 = *(unsigned __int16 *)(*v235 + 32);
          if (v236 == 242 || v236 == 419)
            break;
          ++v235;
          v234 -= 8;
          if (!v234)
            goto LABEL_447;
        }
        sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(*v235 + 16), 0xB34u, 0, (uint64_t)v352);
        v259 = sub_22E8FB3C4((uint64_t)v352, v235);
        sub_22E8FB3C4(v259, (uint64_t *)&__p);
        sub_22E903BEC((unsigned int *)v352);
        sub_22E8FCA40((_QWORD *)a1, *((_DWORD *)__p + 4), 0x1574u, 0, (uint64_t)v349);
        v260 = (unsigned int *)v349;
        goto LABEL_507;
      }
LABEL_447:
      if (v232 == 40 && v231 != 0)
      {
        v238 = v228;
        v239 = v227;
        while (*(_WORD *)(*v239 + 32) != 44)
        {
          ++v239;
          v238 -= 8;
          if (!v238)
            goto LABEL_454;
        }
        sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(*v239 + 16), 0xB34u, 0, (uint64_t)v352);
        v261 = sub_22E8FB3C4((uint64_t)v352, v239);
        v262 = v261;
        if (*(_BYTE *)(v261 + 80))
        {
          v263 = *(unsigned __int8 **)(v261 + 32);
          if (!v263)
          {
            v263 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(v262 + 40));
            *(_QWORD *)(v262 + 32) = v263;
          }
          v263[*v263 + 1] = 15;
          v264 = *(_BYTE **)(v262 + 32);
          v265 = *v264;
          *v264 = v265 + 1;
          *(_QWORD *)&v264[8 * v265 + 16] = v231;
        }
        else if (*(_BYTE *)(v261 + 92))
        {
          v299 = a4;
          v300 = (uint64_t *)(*(_QWORD *)v261 + 12784);
          v301 = *(void **)(v261 + 16);
          if (v301)
            v301 = (void *)(*(uint64_t (**)(void *))(*(_QWORD *)v301 + 32))(v301);
          __p = v301;
          v302 = sub_22F2F1D6C(v300, (uint64_t *)&__p)[1] + 32 * *(unsigned int *)(v262 + 88);
          v305 = *(unsigned __int8 **)(v302 + 8);
          v304 = (unsigned __int8 **)(v302 + 8);
          v303 = v305;
          if (!v305)
          {
            v303 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v304[1]);
            *v304 = v303;
          }
          v303[*v303 + 1] = 15;
          v306 = *v304;
          v307 = **v304;
          *v306 = v307 + 1;
          *(_QWORD *)&v306[8 * v307 + 16] = v231;
          a4 = v299;
        }
        sub_22E903BEC((unsigned int *)v352);
        sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v231 + 16), 0x1574u, 0, (uint64_t)&__dst);
        v260 = (unsigned int *)&__dst;
        goto LABEL_507;
      }
LABEL_454:
      if (v232 == 44 && v231)
      {
        v240 = v228;
        v241 = v227;
        while (*(_WORD *)(*v241 + 32) != 40)
        {
          ++v241;
          v240 -= 8;
          if (!v240)
            goto LABEL_459;
        }
        sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(*v241 + 16), 0xB34u, 0, (uint64_t)v352);
        v266 = sub_22E8FB3C4((uint64_t)v352, v241);
        v267 = v266;
        if (*(_BYTE *)(v266 + 80))
        {
          v268 = *(unsigned __int8 **)(v266 + 32);
          if (!v268)
          {
            v268 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(v267 + 40));
            *(_QWORD *)(v267 + 32) = v268;
          }
          v268[*v268 + 1] = 15;
          v269 = *(_BYTE **)(v267 + 32);
          v270 = *v269;
          *v269 = v270 + 1;
          *(_QWORD *)&v269[8 * v270 + 16] = v231;
        }
        else if (*(_BYTE *)(v266 + 92))
        {
          v308 = a4;
          v309 = (uint64_t *)(*(_QWORD *)v266 + 12784);
          v310 = *(void **)(v266 + 16);
          if (v310)
            v310 = (void *)(*(uint64_t (**)(void *))(*(_QWORD *)v310 + 32))(v310);
          __p = v310;
          v311 = sub_22F2F1D6C(v309, (uint64_t *)&__p)[1] + 32 * *(unsigned int *)(v267 + 88);
          v314 = *(unsigned __int8 **)(v311 + 8);
          v313 = (unsigned __int8 **)(v311 + 8);
          v312 = v314;
          if (!v314)
          {
            v312 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v313[1]);
            *v313 = v312;
          }
          v312[*v312 + 1] = 15;
          v315 = *v313;
          v316 = **v313;
          *v315 = v316 + 1;
          *(_QWORD *)&v315[8 * v316 + 16] = v231;
          a4 = v308;
        }
        sub_22E903BEC((unsigned int *)v352);
        sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v231 + 16), 0x1574u, 0, (uint64_t)v336);
        v260 = (unsigned int *)v336;
LABEL_507:
        sub_22E903BEC(v260);
        goto LABEL_508;
      }
LABEL_459:
      ++v229;
    }
    while (v229 != v230);
    memset(v356, 0, sizeof(v356));
    v354 = 0u;
    *(_OWORD *)v355 = 0u;
    v353 = 0u;
    memset(v352, 0, sizeof(v352));
    do
    {
      v242 = *v227;
      if (*v227 && *(_WORD *)(v242 + 32) == 369)
      {
        v243 = *(_DWORD *)(v242 + 36);
        v244 = 4;
        switch(v243)
        {
          case 2u:
          case 3u:
            v335 = 0;
            v245 = 0;
            v244 = 1;
            goto LABEL_469;
          case 4u:
          case 5u:
            v245 = 0;
            v335 = 1;
            v244 = 2;
            goto LABEL_469;
          case 6u:
          case 7u:
            v335 = 0;
            v245 = 1;
            v244 = 3;
            goto LABEL_469;
          case 8u:
          case 9u:
            v335 = 0;
            v245 = 0;
            v244 = 5;
            goto LABEL_469;
          case 0xAu:
            goto LABEL_483;
          case 0xBu:
            v244 = 6;
LABEL_483:
            v246 = a4;
            v245 = 0;
            v335 = 0;
            v251 = (uint64_t *)&v352[16 * v244];
            v247 = v251;
            break;
          default:
            v335 = 0;
            v245 = 0;
            v244 = 0;
LABEL_469:
            v246 = a4;
            v247 = (uint64_t *)&v352[16 * v244];
            v248 = v243 > 0xB;
            v249 = (1 << v243) & 0xD55;
            v250 = v248 || v249 == 0;
            v251 = (uint64_t *)((unint64_t)v247 | 8);
            if (!v250)
              v251 = (uint64_t *)&v352[16 * v244];
            break;
        }
        v252 = *v251;
        *v251 = v242;
        sub_22E462F04((unint64_t *)&__p, *(unsigned int **)(*(_QWORD *)(a1 + 88) + 2000));
        v253 = *(_DWORD *)(v242 + 16);
        if (v252)
        {
          sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v242 + 16), 0x11BCu, 0, (uint64_t)v349);
          LOBYTE(v348) = 1;
          v331 = sub_22E894E38((uint64_t)v349, (unsigned __int8 *)&v348);
          sub_22EF95B70(v252, (int)&__p, (uint64_t)&__dst);
          v256 = sub_22F2F3734(v331, (void **)&__dst);
          sub_22EF95B70(v242, (int)&__p, (uint64_t)v336);
          sub_22F2F3734(v256, v336);
          if (v338 < 0)
            operator delete(v336[0]);
          if (SHIBYTE(v340) < 0)
            operator delete(__dst);
          sub_22E903BEC((unsigned int *)v349);
        }
        v254 = *v247;
        if (*v247)
        {
          v255 = *(_QWORD *)&v352[16 * v244 + 8];
          if (v255)
          {
            if (((v245 | v335) & 1) != 0 || *(_DWORD *)(v254 + 40) == 1)
            {
              sub_22E8FCA40((_QWORD *)a1, v253, 0x11BCu, 0, (uint64_t)v349);
              LOBYTE(v348) = 0;
              v257 = sub_22E894E38((uint64_t)v349, (unsigned __int8 *)&v348);
              sub_22EF95B70(v254, (int)&__p, (uint64_t)&__dst);
              v258 = sub_22F2F3734(v257, (void **)&__dst);
              sub_22EF95B70(v255, (int)&__p, (uint64_t)v336);
              sub_22F2F3734(v258, v336);
              if (v338 < 0)
                operator delete(v336[0]);
              if (SHIBYTE(v340) < 0)
                operator delete(__dst);
              sub_22E903BEC((unsigned int *)v349);
            }
          }
        }
        a4 = v246;
      }
      ++v227;
      v228 -= 8;
    }
    while (v228);
LABEL_508:
    LODWORD(v226) = *(_DWORD *)(a4 + 8);
    v227 = *(uint64_t **)a4;
  }
  __dst = 0;
  *(_QWORD *)&v340 = 0;
  DWORD2(v340) = 0;
  v271 = 0;
  if (!(_DWORD)v226)
  {
    v297 = 0;
    return llvm::deallocate_buffer(v271, v297);
  }
  v272 = &v227[v226];
  do
  {
    v273 = *v227;
    v336[0] = (void *)v273;
    if (*(_WORD *)(v273 + 32) != 398)
      goto LABEL_521;
    if (DWORD2(v340))
    {
      v274 = (DWORD2(v340) - 1) & 0x3986;
      v275 = (char *)v271 + 16 * v274;
      v276 = *(_DWORD *)v275;
      if (*(_DWORD *)v275 == 398)
      {
LABEL_514:
        v277 = *((_QWORD *)v271 + 2 * v274 + 1);
        sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v273 + 16), 0xED2u, 0, (uint64_t)v352);
        __p = (void *)*((_QWORD *)v336[0] + 2);
        v278 = sub_22E8906A0((uint64_t)v352, (uint64_t *)&__p);
        sub_22E8FB3C4(v278, (uint64_t *)v336);
        sub_22E903BEC((unsigned int *)v352);
        sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v277 + 16), 0x1574u, 0, (uint64_t)v349);
        sub_22E903BEC((unsigned int *)v349);
        goto LABEL_521;
      }
      v280 = 0;
      v281 = 1;
      while (v276 != -1)
      {
        if (v280)
          v282 = 0;
        else
          v282 = v276 == -2;
        if (v282)
          v280 = v275;
        v283 = v274 + v281++;
        v274 = v283 & (DWORD2(v340) - 1);
        v275 = (char *)v271 + 16 * v274;
        v276 = *(_DWORD *)v275;
        if (*(_DWORD *)v275 == 398)
          goto LABEL_514;
      }
      if (v280)
        v279 = v280;
      else
        v279 = v275;
    }
    else
    {
      v279 = 0;
    }
    if (4 * (int)v340 + 4 >= (3 * DWORD2(v340)))
    {
      sub_22E3C34FC((uint64_t)&__dst, 2 * DWORD2(v340));
      v271 = (llvm *)__dst;
      if (!DWORD2(v340))
        goto LABEL_557;
      v284 = DWORD2(v340) - 1;
      v285 = (DWORD2(v340) - 1) & 0x3986;
      v279 = (char *)&__dst[8 * v285];
      v286 = *(_DWORD *)v279;
      if (*(_DWORD *)v279 != 398)
      {
        v287 = 0;
        v288 = 1;
        while (v286 != -1)
        {
          if (v287)
            v289 = 0;
          else
            v289 = v286 == -2;
          if (v289)
            v287 = v279;
          v290 = v285 + v288++;
          v285 = v290 & v284;
          v279 = (char *)&__dst[8 * (v290 & v284)];
          v286 = *(_DWORD *)v279;
          if (*(_DWORD *)v279 == 398)
            goto LABEL_518;
        }
        goto LABEL_558;
      }
    }
    else if ((DWORD2(v340) + ~(_DWORD)v340 - DWORD1(v340)) <= DWORD2(v340) >> 3)
    {
      sub_22E3C34FC((uint64_t)&__dst, SDWORD2(v340));
      v271 = (llvm *)__dst;
      if (!DWORD2(v340))
      {
LABEL_557:
        v279 = 0;
        goto LABEL_518;
      }
      v291 = DWORD2(v340) - 1;
      v292 = (DWORD2(v340) - 1) & 0x3986;
      v279 = (char *)&__dst[8 * v292];
      v293 = *(_DWORD *)v279;
      if (*(_DWORD *)v279 != 398)
      {
        v287 = 0;
        v294 = 1;
        while (v293 != -1)
        {
          if (v287)
            v295 = 0;
          else
            v295 = v293 == -2;
          if (v295)
            v287 = v279;
          v296 = v292 + v294++;
          v292 = v296 & v291;
          v279 = (char *)&__dst[8 * (v296 & v291)];
          v293 = *(_DWORD *)v279;
          if (*(_DWORD *)v279 == 398)
            goto LABEL_518;
        }
LABEL_558:
        if (v287)
          v279 = v287;
      }
    }
LABEL_518:
    LODWORD(v340) = v340 + 1;
    if (*(_DWORD *)v279 != -1)
      --DWORD1(v340);
    *(_DWORD *)v279 = 398;
    *((_QWORD *)v279 + 1) = v273;
LABEL_521:
    ++v227;
  }
  while (v227 != v272);
  v297 = (void *)(16 * DWORD2(v340));
  return llvm::deallocate_buffer(v271, v297);
}

void sub_22ED553EC(uint64_t a1, _DWORD *a2)
{
  int v2;

  v2 = *(unsigned __int8 *)a2;
  if (a2 && (v2 & 0xFE) == 0x70)
  {
    switch((*a2 >> 18) & 0x3F)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
        goto LABEL_7;
      default:
        goto LABEL_5;
    }
  }
  if (!a2 || v2 != 233)
LABEL_5:
    __asm { BR              X9 }
LABEL_7:
  sub_22ED5585C(a1, (uint64_t)a2);
}

void sub_22ED55524()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 8) = 1;
}

void sub_22ED5585C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  sub_22F0D492C(a2);
  v9 = v11;
  v3 = v13;
  v10 = v12;
  v4 = v14;
  v6 = *((_QWORD *)&v11 + 1);
  v5 = (uint64_t *)v11;
  if ((_QWORD)v11 != v13 || *((_QWORD *)&v11 + 1) != v14)
  {
    do
    {
      v8 = v5;
      if ((v6 & 3) != 0)
      {
        if ((v6 & 0xFFFFFFFFFFFFFFFCLL) != 0)
          v8 = (_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFCLL) + 40);
        else
          v8 = (_QWORD *)sub_22F3AC1A8(*v5);
      }
      if (*v8)
        sub_22ED553EC(a1);
      if ((v6 & 3) != 0)
      {
        if (v6 >= 4)
          sub_22F0D8720((uint64_t)&v9);
        else
          sub_22F3F2FE0((uint64_t)&v9, 1);
      }
      else
      {
        *(_QWORD *)&v9 = v5 + 1;
      }
      v6 = *((_QWORD *)&v9 + 1);
      v5 = (uint64_t *)v9;
    }
    while (v9 != __PAIR128__(v4, v3));
  }
}

uint64_t sub_22ED55938@<X0>(_QWORD *a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int v11;

  v8 = a1[28];
  if (!v8)
    v8 = a1[27];
  if (v8)
    v9 = (*(_WORD *)(v8 + 8) & 0x7Eu) - 58 >= 0xFFFFFFFA;
  else
    v9 = 0;
  if (v9)
  {
    v10 = v8 - 72;
    if (sub_22EA32CC0((uint64_t)a1, (_BYTE *)(v8 - 72), 0))
      v11 = 3;
    else
      v11 = 2;
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  return sub_22E903A04(a4, v11, a2, a3, v10, a1);
}

void sub_22ED559D4(_QWORD *a1, int a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD v23[3];
  char v24;
  int v25;
  uint64_t v26;
  unsigned int v27[4];
  char v28;
  void *v29;
  uint64_t v30;
  _QWORD v31[4];
  _QWORD *v32;
  unsigned int v33;
  unsigned int v34;
  _QWORD v35[5];

  v35[4] = *MEMORY[0x24BDAC8D0];
  v25 = a2;
  v24 = 1;
  v23[0] = a1;
  v23[1] = &v25;
  v23[2] = &v24;
  v32 = v35;
  v34 = 4;
  v35[0] = a4;
  v29 = v31;
  v31[0] = 0;
  v6 = 1;
  v30 = 0x400000001;
  do
  {
    while (1)
    {
      v7 = v32[--v6];
      v33 = v6;
      if (v7)
        break;
      LODWORD(v30) = v30 - 1;
      if (!v6)
        goto LABEL_45;
    }
    v22 = *(_QWORD *)(v7 + 48);
    sub_22F341934(a3, &v22, (uint64_t)v27);
    if (v28)
    {
      if (!sub_22ED55DBC((uint64_t)v23, v22, v7))
        goto LABEL_12;
      if (v24 && v30 >= 2)
      {
        v8 = 1;
        do
        {
          sub_22ED55938(a1, *(_DWORD *)(*((_QWORD *)v29 + v8) + 24), 6176, (uint64_t)v27);
          v26 = *(_QWORD *)(*((_QWORD *)v29 + v8) + 48);
          sub_22E8901B8((uint64_t)v27, &v26);
          sub_22E903BEC(v27);
          ++v8;
        }
        while (v8 < v30);
      }
LABEL_11:
      v24 = 0;
LABEL_12:
      while (1)
      {
        v9 = *(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF0);
        v10 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v10 != 32
          && v10 != 39
          && ((v10 & 0xFEu) > 0x28 || ((1 << (v10 & 0xFE)) & 0x10000000014) == 0))
        {
          break;
        }
        if ((v10 & 0xFEu) - 2 > 3)
          v12 = sub_22F10ACF8(v9);
        else
          v12 = sub_22F10CEE8(v9) & 0xFFFFFFFFFFFFFFF0;
        v22 = v12;
        if (sub_22ED55DBC((uint64_t)v23, v12, v7))
        {
          if (v24 && v30 >= 2)
          {
            v13 = 1;
            do
            {
              sub_22ED55938(a1, *(_DWORD *)(*((_QWORD *)v29 + v13) + 24), 6176, (uint64_t)v27);
              v26 = *(_QWORD *)(*((_QWORD *)v29 + v13) + 48);
              sub_22E8901B8((uint64_t)v27, &v26);
              sub_22E903BEC(v27);
              ++v13;
            }
            while (v13 < v30);
          }
          goto LABEL_11;
        }
      }
      v14 = sub_22F10C2A4(v9);
      if (v14 && (*(_DWORD *)(v14 + 28) & 0x7Eu) - 34 <= 3)
      {
        if ((*(_DWORD *)(v7 + 28) & 0x7Fu) - 52 >= 0xFFFFFFFD)
        {
          v15 = v30;
          if (v30 >= (unint64_t)HIDWORD(v30))
          {
            v21 = v14;
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v14 = v21;
            v15 = v30;
          }
          *((_QWORD *)v29 + v15) = v7;
          LODWORD(v30) = v30 + 1;
        }
        v16 = v33;
        if (v33 >= (unint64_t)v34)
        {
          v20 = v14;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v14 = v20;
          v16 = v33;
        }
        v32[v16] = 0;
        ++v33;
        v17 = sub_22EFC3B90(v14);
        if (v17)
        {
          v18 = v17;
          v19 = v33;
LABEL_39:
          if (v19 >= v34)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v19 = v33;
          }
          v32[v19] = v18;
          v19 = ++v33;
          while (1)
          {
            v18 = *(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8;
            if (!v18)
              break;
            if ((*(_DWORD *)(v18 + 28) & 0x7Fu) - 49 < 3)
              goto LABEL_39;
          }
        }
      }
    }
    v6 = v33;
  }
  while (v33);
LABEL_45:
  if (v29 != v31)
    free(v29);
  if (v32 != v35)
    free(v32);
}

uint64_t sub_22ED55DBC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v11;
  uint64_t v12;
  _BYTE v13[96];
  uint64_t v14;
  BOOL v15;
  unsigned int v16[24];

  v5 = *(_QWORD **)a1;
  v6 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)a1 + 88), a2);
  if (!v6 || *(_BYTE *)(v6 + 16) != 2)
    return 0;
  v7 = (_QWORD *)(v6 + 40);
  v8 = *(_DWORD *)(v6 + 48);
  if (v8 >= 0x41)
  {
    if (v8 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v6 + 40)) > 0x40)
      return 0;
    v7 = (_QWORD *)*v7;
  }
  if (*v7)
    return 0;
  sub_22ED55938(v5, **(_DWORD **)(a1 + 8), 5021, (uint64_t)v16);
  v9 = 1;
  LODWORD(v14) = 1;
  sub_22E8900C4((uint64_t)v16, (int *)&v14);
  sub_22E903BEC(v16);
  if (**(_BYTE **)(a1 + 16))
  {
    if ((*(_DWORD *)(a3 + 28) & 0x7Fu) - 52 >= 0xFFFFFFFD)
    {
      sub_22ED55938(v5, *(_DWORD *)(a3 + 24), 5662, (uint64_t)v16);
      v15 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                     + 16) == 39;
      v12 = sub_22E894E38((uint64_t)v16, (unsigned __int8 *)&v15);
      v14 = *(_QWORD *)(a3 + 48);
      sub_22E8901B8(v12, &v14);
      v11 = v16;
    }
    else
    {
      sub_22ED55938(v5, *(_DWORD *)(a3 + 24), 100, (uint64_t)v13);
      v11 = (unsigned int *)v13;
    }
    sub_22E903BEC(v11);
  }
  return v9;
}

uint64_t sub_22ED55F1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  int v19;

  v3 = *(_QWORD *)(a2 + 64) != 0;
  v4 = *(unsigned int *)(a1 + 1944);
  v5 = *(unsigned int *)(a1 + 1904);
  if ((_DWORD)v4 != (_DWORD)v5)
  {
    v6 = *(_QWORD *)(a1 + 1896) + 8 * v4;
    for (i = 8 * v5 - 8 * v4; i; i -= 8)
    {
      v8 = *(_QWORD *)v6;
      if (*(_QWORD *)v6)
        v9 = (*(_DWORD *)(*(_QWORD *)v6 + 8) & 7) == 2;
      else
        v9 = 0;
      if (v9)
      {
        if (*(_DWORD *)(v8 + 1440))
        {
          v11 = *(_DWORD *)(v8 + 1428);
          if (v3 <= v11 + 1)
            v3 = (v11 + 1);
          else
            v3 = *(_QWORD *)(a2 + 64) != 0;
          break;
        }
        v10 = *(_QWORD *)(v8 + 1584);
        if (v10)
        {
          v12 = sub_22EFE90A8(v10);
          if (v3 <= v12 + 1)
            v3 = (v12 + 1);
          else
            v3 = v3;
          break;
        }
      }
      v6 += 8;
    }
  }
  v13 = *(unsigned int *)(a1 + 2192);
  v14 = *(_DWORD *)(a1 + 1960);
  if ((_DWORD)v13 == v14)
    return v3;
  v15 = 56 * v13;
  v16 = (_DWORD *)(56 * v13 + *(_QWORD *)(a1 + 1952) + 16);
  v17 = 56 * v14 - v15;
  while (!*v16)
  {
    v16 += 14;
    v17 -= 56;
    if (!v17)
      return v3;
  }
  v19 = *(v16 - 3);
  if (v3 <= v19 + 1)
    return (v19 + 1);
  else
    return v3;
}

unint64_t sub_22ED5601C(uint64_t a1, int a2, int a3)
{
  uint64_t v5;
  unsigned int v6;
  int v8;
  unint64_t result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t i;

  v5 = a1;
  v6 = *(_DWORD *)(a1 + 28) & 0x7F;
  if (v6 <= 0x2F && ((1 << v6) & 0xC00000060000) != 0)
  {
    v5 = sub_22EFBAEA4(a1);
    v6 = *(_DWORD *)(v5 + 28) & 0x7F;
  }
  if (v6 - 26 > 6)
  {
    if (v6 - 38 >= 0xFFFFFFFD)
    {
      if (sub_22EFC3A88(v5))
      {
        v11 = *(_QWORD *)(v5 + 16);
        v12 = (_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF8);
        if ((v11 & 4) != 0)
          v12 = (_QWORD *)*v12;
        v13 = v12 - 8;
        if (!v12)
          v13 = 0;
        v14 = v13[17];
        if ((v14 & 4) != 0 || (result = v14 & 0xFFFFFFFFFFFFFFF8, (v14 & 0xFFFFFFFFFFFFFFF8) == 0))
        {
          result = 0;
          if (v12)
          {
            if ((*((_DWORD *)v13 + 7) & 0x7E) == 0x24)
            {
              for (i = v13[19]; ; i = *(_QWORD *)(*(_QWORD *)result + 152))
              {
                result = i & 0xFFFFFFFFFFFFFFF8;
                if ((i & 4) == 0 || !result)
                  break;
              }
            }
          }
        }
      }
      else
      {
        return 0;
      }
    }
    else
    {
      if (v6 == 74)
        v10 = v5;
      else
        v10 = 0;
      if (a3)
        return v10;
      else
        return 0;
    }
  }
  else
  {
    if (v6 == 29)
      v8 = a2;
    else
      v8 = 1;
    if (v8)
      return v5;
    else
      return 0;
  }
  return result;
}

void sub_22ED56130(uint64_t a1, uint64_t a2, int a3, int a4)
{
  unsigned int v4;
  _QWORD *v8;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(_DWORD *)(a2 + 16);
  if (v4)
  {
    v8 = *(_QWORD **)(a2 + 8);
    v9 = 1;
    v10 = v8;
    do
    {
LABEL_3:
      if (!sub_22ED5601C(*v10 & 0xFFFFFFFFFFFFFFFCLL, a3, a4))
      {
        while (1)
        {
          v11 = v8[--v4];
          *(_DWORD *)(a2 + 16) = v4;
          *v10 = v11;
          v12 = &v8[v4];
          if (v10 == v12)
            goto LABEL_12;
          if (sub_22ED5601C(v11 & 0xFFFFFFFFFFFFFFFCLL, a3, a4))
          {
            v9 = 0;
            if (++v10 != v12)
              goto LABEL_3;
            goto LABEL_12;
          }
        }
      }
      ++v10;
    }
    while (v10 != &v8[v4]);
    if ((v9 & 1) != 0)
      return;
LABEL_12:
    sub_22EA3DA00(a2);
  }
}

uint64_t sub_22ED56220(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v5;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int v12;

  v5 = *(unsigned int *)(a2 + 16);
  if (!(_DWORD)v5)
    return 0;
  v9 = *(_QWORD **)(a2 + 8);
  v10 = 8 * v5;
  while (1)
  {
    v11 = *v9 & 0xFFFFFFFFFFFFFFFCLL;
    if (sub_22ED5601C(v11, a3, a4))
      break;
    if (a5)
    {
      v12 = *(_DWORD *)(v11 + 28);
      if ((v12 & 0x7Fu) <= 0x2F && ((1 << (v12 & 0x7F)) & 0xC00000060000) != 0)
        v12 = *(_DWORD *)(sub_22EFBAEA4(v11) + 28);
      if ((v12 & 0x7Eu) - 52 < 6)
        break;
    }
    ++v9;
    v10 -= 8;
    if (!v10)
      return 0;
  }
  return 1;
}

uint64_t sub_22ED562E8(_QWORD *a1, uint64_t *a2, uint64_t a3, int a4, int *a5, unint64_t a6, int a7, unint64_t *a8, _BYTE *a9, char a10)
{
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  char *v21;
  unint64_t v22;
  char v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v35;
  int v36;
  unint64_t *v37;
  int v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  _BYTE v42[64];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  int v48;
  _QWORD v49[3];
  __int16 v50;
  int v51;
  char v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  *a9 = 0;
  v16 = *a5;
  if (*a5)
  {
    if (v16 == 1)
    {
      v36 = a4;
      v37 = a8;
      v18 = (a1[11] + 16 * a5[2] + 15280) | 6;
    }
    else
    {
      v17 = 0;
      if (v16 != 3)
        return v17;
      v36 = a4;
      v37 = a8;
      v18 = sub_22F3AE768((_QWORD *)(a1[11] + 15224), *((_QWORD *)a5 + 1));
    }
  }
  else
  {
    v36 = a4;
    v37 = a8;
    v18 = *((_QWORD *)a5 + 1);
  }
  v38 = 0;
  v19 = a5[6];
  v39 = 0;
  v40 = v42;
  v41 = 0x800000000;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = a1;
  v47 = v18;
  v48 = v19;
  sub_22EFC6D6C((uint64_t)v49, v18);
  v49[1] = 0;
  v49[2] = 0;
  v50 = 0;
  v51 = 257;
  v52 = 0;
  sub_22EC56024((uint64_t)&v39);
  v17 = 0;
  if ((sub_22ED566F4((uint64_t)a1, (uint64_t)&v39, a2, a3, a6, a7, a9, 0x100000000, &v38, a10 ^ 1u) & 1) != 0)
    goto LABEL_42;
  if (v38)
  {
    *v37 = sub_22F36E3C0(a1[11], v18);
    if (v38 == 1)
      v17 = 5;
    else
      v17 = 1;
  }
  else
  {
    v20 = v41;
    if (!(_DWORD)v41)
    {
      v17 = 0;
      goto LABEL_42;
    }
    v21 = (char *)v40;
    if ((*(_DWORD *)((*(_QWORD *)v40 & 0xFFFFFFFFFFFFFFFCLL) + 28) & 0x7E) == 0x2E)
      v22 = *(_QWORD *)v40 & 0xFFFFFFFFFFFFFFFCLL;
    else
      v22 = 0;
    if ((_DWORD)v39 == 5)
    {
      v23 = 0;
      v24 = (char *)v40 + 8 * v41;
      do
      {
        while (1)
        {
          v25 = *(_QWORD *)v21 & 0xFFFFFFFFFFFFFFFCLL;
          v26 = sub_22ED5601C(v25, 1, 1);
          if (!v26)
            break;
          v27 = v26;
          v28 = *(_DWORD *)(v26 + 28);
          if ((v28 & 0x7F) != 0x1D)
          {
            if ((*(_DWORD *)(v25 + 28) & 0x7E) == 0x2E)
              v22 = v25;
            else
              v22 = 0;
            goto LABEL_28;
          }
          v21 += 8;
          v23 = 1;
          if (v21 == v24)
            goto LABEL_23;
        }
        v21 += 8;
      }
      while (v21 != v24);
      if ((v23 & 1) != 0)
      {
LABEL_23:
        sub_22ED56130(v26, (uint64_t)&v39, 1, 1);
        v21 = (char *)v40;
        v20 = v41;
        goto LABEL_24;
      }
      v17 = 0;
      BYTE1(v51) = 0;
      goto LABEL_47;
    }
LABEL_24:
    if (v20 >= 2)
    {
      v29 = sub_22EF6E25C(a1[11], v21, &v21[8 * v20]);
      BYTE1(v51) = 0;
      v17 = 1;
      v30 = v37;
LABEL_26:
      *v30 = v29;
      goto LABEL_42;
    }
    v27 = sub_22ED5601C(*(_QWORD *)v21 & 0xFFFFFFFFFFFFFFFCLL, 1, 1);
    v28 = *(_DWORD *)(v27 + 28);
LABEL_28:
    if ((v28 & 0x7F) != 0x4A)
    {
      if (v22)
        v31 = v22;
      else
        v31 = v27;
      v29 = v31 & 0xFFFFFFFFFFFFFFF9;
      v32 = *(_QWORD *)(a3 + 8);
      if (v32)
      {
        v29 = sub_22F36E410(a1[11], v32, v36, v29);
        v28 = *(_DWORD *)(v27 + 28);
      }
      v33 = v28 & 0x7F;
      v30 = v37;
      if (v33 == 31)
      {
        v17 = 3;
      }
      else if (v33 == 29)
      {
        BYTE1(v51) = 0;
        v17 = 1;
      }
      else
      {
        if (v33 == 27)
          v17 = 6;
        else
          v17 = 2;
        v30 = v37;
      }
      goto LABEL_26;
    }
    v17 = 0;
    *a9 = 1;
  }
LABEL_42:
  if (BYTE1(v51))
  {
    if ((_DWORD)v39 == 5)
    {
      sub_22EC64D18(v46, (uint64_t)&v39);
    }
    else if (v44 && (*(_DWORD *)(v46[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v46, (uint64_t)&v39);
    }
  }
LABEL_47:
  if (v43)
  {
    v35 = sub_22EC6CBD0(v43);
    MEMORY[0x2348A0E9C](v35, 0x10E0C409F09D3C3);
  }
  if (v40 != v42)
    free(v40);
  return v17;
}

uint64_t sub_22ED566F4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, unint64_t a5, int a6, _BYTE *a7, uint64_t a8, int *a9, char a10)
{
  _BYTE *v11;
  int v16;
  uint64_t result;
  BOOL v18;
  _BOOL4 v20;
  BOOL v21;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  BOOL v39;
  BOOL v40;
  int v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  unsigned int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  char v50;
  int v51;
  uint64_t v52;
  _QWORD *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  size_t v67;
  unint64_t v68;
  unsigned __int8 *p_p;
  uint64_t v70;
  void **p_s1;
  int v72;
  int v73;
  int v74;
  int v75;
  BOOL v77;
  _BOOL4 v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  int v82;
  uint64_t v84;
  uint64_t v85;
  char v86;
  int v87;
  int v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  BOOL v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  char v121;
  unsigned int v122;
  _BYTE *v123;
  _BYTE *v124;
  _BOOL4 v125;
  unsigned int v127[24];
  void *v128;
  int v129;
  char v130;
  uint64_t v131;
  _QWORD v132[5];
  void *__s1;
  size_t __n;
  int v135;
  char v136;
  void *__p;
  unint64_t v138;
  int v139;
  char v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  void *v144;
  void *v145;
  int v146;
  _BYTE v147[32];
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  int v154;
  _QWORD v155[3];
  __int16 v156;
  int v157;
  char v158;
  uint64_t v159;

  v11 = a7;
  v159 = *MEMORY[0x24BDAC8D0];
  v142 = a5;
  if (a9)
    *a9 = 0;
  v16 = *(_DWORD *)a4;
  result = 1;
  if (*(_DWORD *)a4)
    v18 = *(_DWORD *)(a4 + 4) == 0;
  else
    v18 = 1;
  if (v18 || *(_QWORD *)(a4 + 8) != 0)
  {
    *(_BYTE *)(a2 + 166) = 1;
    *a7 = 0;
    v20 = a5 < 0x10;
    if (a5 >= 0x10)
    {
      result = sub_22E9580E4(a1, a5);
      v24 = result;
      v25 = *(_QWORD *)(a5 & 0xFFFFFFFFFFFFFFF0);
      if (result)
        v26 = 0;
      else
        v26 = (*(unsigned __int8 *)(v25 + 17) >> 2) & 1;
      v27 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v25 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
      v28 = v27 > 0x38;
      v29 = (1 << v27) & 0x180000600000000;
      if (!v28 && v29 != 0)
      {
LABEL_28:
        *(_DWORD *)a2 = 0;
        *(_DWORD *)(a2 + 16) = 0;
        v31 = *(_QWORD *)(a2 + 88);
        if (v31)
        {
          v32 = sub_22EC6CBD0(v31);
          MEMORY[0x2348A0E9C](v32, 0x10E0C409F09D3C3);
        }
        result = 0;
        *(_BYTE *)(a2 + 165) = 0;
        *(_QWORD *)(a2 + 88) = 0;
        *(_QWORD *)(a2 + 96) = 0;
        return result;
      }
      if (result)
      {
        v123 = v11;
        v33 = a1;
        v34 = a3;
        v35 = a8;
        v36 = v26;
LABEL_37:
        result = sub_22EC611AC(v33, a2, v24, 0);
        v37 = v24;
        v38 = 0;
        if (*(_DWORD *)a2 == 1)
          v26 = 1;
        else
          v26 = v36;
        a8 = v35;
        a3 = v34;
        v11 = v123;
        goto LABEL_41;
      }
      v37 = 0;
    }
    else
    {
      if (*(_DWORD *)(a4 + 4))
        v21 = v16 == 0;
      else
        v21 = 1;
      if (v21 && *(_QWORD *)(a4 + 8) == 0)
        goto LABEL_34;
      v23 = sub_22E958204(a1, a4, a6);
      if (v23)
      {
        v24 = v23;
        if ((sub_22E958490(a1, a4, v23) & 1) != 0)
          return 1;
        v123 = v11;
        v33 = a1;
        v34 = a3;
        v35 = a8;
        v36 = 0;
        goto LABEL_37;
      }
      result = *(_QWORD *)(a4 + 8);
      if (result)
      {
        result = sub_22F0AAC5C(result);
        v37 = 0;
        v26 = (result >> 2) & 1;
      }
      else
      {
LABEL_34:
        v37 = 0;
        v26 = 0;
      }
    }
    v38 = 1;
LABEL_41:
    if (*(_DWORD *)(a4 + 4))
      v39 = *(_DWORD *)a4 == 0;
    else
      v39 = 1;
    if (!v39 || *(_QWORD *)(a4 + 8) || a5 >= 0x10 && *(_DWORD *)(a2 + 16))
    {
      v40 = 0;
      v41 = *(_DWORD *)a2;
      v20 = 1;
    }
    else
    {
      if (a3)
      {
        v42 = a3;
        v124 = v11;
        v43 = a3;
        v44 = a8;
        v45 = v26;
        v46 = v38;
        v47 = v37;
        result = sub_22EC63520(a1, a2, v42, 0, 0);
        v37 = v47;
        v38 = v46;
        v26 = v45;
        a8 = v44;
        a3 = v43;
        v11 = v124;
      }
      v40 = a5 > 0xF;
      v41 = *(_DWORD *)a2;
      if (*(_DWORD *)a2 == 1)
        v26 = 1;
    }
    if (v41 == 5)
      return 0;
    v120 = v38;
    v121 = v40;
    v122 = v26;
    v125 = v20;
    v48 = BYTE4(a8);
    if (a9
      && (!*(_DWORD *)a4 || !*(_DWORD *)(a4 + 4))
      && a5 <= 0xF
      && !*(_QWORD *)(a4 + 8)
      && (!BYTE4(a8) || !(_DWORD)a8))
    {
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 0x10) != 0)
      {
        v79 = *(unsigned int *)(a2 + 16);
        if (!(_DWORD)v79)
          goto LABEL_124;
        v80 = *(_QWORD **)(a2 + 8);
        v81 = 8 * v79;
        while (1)
        {
          result = *v80 & 0xFFFFFFFFFFFFFFFCLL;
          v82 = *(_DWORD *)(result + 28);
          if ((v82 & 0x7Fu) <= 0x2F && ((1 << (v82 & 0x7F)) & 0xC00000060000) != 0)
          {
            v84 = v48;
            v85 = v37;
            result = sub_22EFBAEA4(result);
            v37 = v85;
            v48 = v84;
            LOBYTE(v26) = v122;
            v82 = *(_DWORD *)(result + 28);
          }
          if ((v82 & 0x7Eu) - 52 >= 6)
            break;
          ++v80;
          v81 -= 8;
          if (!v81)
          {
            v86 = 0;
            goto LABEL_125;
          }
        }
      }
      else
      {
        if (*(_DWORD *)(a2 + 16))
          v62 = 1;
        else
          v62 = v26;
        if ((v62 & 1) == 0)
        {
LABEL_124:
          v86 = 1;
LABEL_125:
          if ((v86 & ((*(_QWORD *)(a2 + 120) & 7) == 0)) != 0)
            v87 = 1;
          else
            v87 = 2;
          *a9 = v87;
          goto LABEL_28;
        }
      }
    }
    v49 = *(_DWORD *)(a2 + 16);
    if (v49)
      v50 = 1;
    else
      v50 = v26;
    if ((v50 & 1) != 0)
    {
      v51 = v125;
      goto LABEL_146;
    }
    v51 = v125;
    if (!a10)
      goto LABEL_146;
    v141 = *(_QWORD *)(a2 + 120);
    *(_DWORD *)a2 = 0;
    *(_DWORD *)(a2 + 16) = 0;
    v53 = (_QWORD *)(a2 + 88);
    v52 = *(_QWORD *)(a2 + 88);
    if (v52)
    {
      v54 = v48;
      v48 = v37;
      v55 = sub_22EC6CBD0(v52);
      MEMORY[0x2348A0E9C](v55, 0x10E0C409F09D3C3);
      v37 = v48;
      LODWORD(v48) = v54;
    }
    *(_BYTE *)(a2 + 165) = 0;
    *v53 = 0;
    *(_QWORD *)(a2 + 96) = 0;
    v132[0] = 0;
    v131 = 0;
    *(_DWORD *)((char *)v132 + 7) = 0;
    v128 = &unk_24FAB8500;
    v129 = 16842752;
    v130 = 0;
    v119 = v37;
    v56 = sub_22EC6AB20(a1, (uint64_t *)(a2 + 120), *(unsigned int *)(a2 + 152), a3, a4, (uint64_t)&v128, 1, v37, (uint64_t)&v143, 0, 0, 1u);
    if (!v143)
      goto LABEL_143;
    if (v146)
    {
      v57 = *(_QWORD *)v145;
      if (*(_QWORD *)v145)
      {
        v58 = *(unsigned int *)(v57 + 28);
        v59 = *(_DWORD *)(a2 + 16);
        if (v59 >= *(_DWORD *)(a2 + 20))
        {
          v56 = llvm::SmallVectorBase<unsigned int>::grow_pod();
          v59 = *(_DWORD *)(a2 + 16);
        }
        *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v59) = (v58 >> 13) & 3 | v57;
        ++*(_DWORD *)(a2 + 16);
        *(_DWORD *)a2 = 2;
      }
    }
    sub_22ED56130(v56, a2, 1, 1);
    if (*(_DWORD *)a2 == 5)
    {
      *(_DWORD *)a2 = 0;
      *(_DWORD *)(a2 + 16) = 0;
      v60 = *(_QWORD *)(a2 + 88);
      v51 = v125;
      if (v60)
      {
        v61 = sub_22EC6CBD0(v60);
        MEMORY[0x2348A0E9C](v61, 0x10E0C409F09D3C3);
      }
      *(_BYTE *)(a2 + 165) = 0;
      *v53 = 0;
      *(_QWORD *)(a2 + 96) = 0;
      goto LABEL_143;
    }
    v51 = v125;
    if (!*(_DWORD *)(a2 + 16))
    {
LABEL_143:
      __p = &v148;
      sub_22E8D19C8((void ***)&__p);
      result = (uint64_t)v145;
      if (v145 != v147)
        free(v145);
      v49 = *(_DWORD *)(a2 + 16);
LABEL_146:
      v98 = v48;
      if (v49)
        v99 = **(_QWORD **)(a2 + 8) & 0xFFFFFFFFFFFFFFFCLL;
      else
        v99 = 0;
      sub_22ED56130(result, a2, v51, 1);
      if (*(_DWORD *)(a2 + 16))
      {
        if (a3)
        {
          v100 = v121;
          if (v142 < 0x10)
            v100 = 1;
          if ((v100 & 1) == 0 && (*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 2) == 0)
          {
            v101 = *(_QWORD *)(a2 + 120);
            v102 = *(_DWORD *)(a2 + 128);
            v143 = 0;
            v144 = &v146;
            v145 = (void *)0x800000000;
            v149 = 0;
            v150 = 0;
            v151 = 0;
            v152 = (_QWORD *)a1;
            v153 = v101;
            v154 = v102;
            sub_22EFC6D6C((uint64_t)v155, v101);
            v155[1] = 0;
            v155[2] = 0;
            v156 = 0;
            v157 = 257;
            v158 = 0;
            sub_22EC56024((uint64_t)&v143);
            v158 = 1;
            v103 = sub_22EC63520(a1, &v143, a3, 0, 0);
            sub_22ED56130(v103, (uint64_t)&v143, 0, 1);
            if ((_DWORD)v145)
            {
              if ((_DWORD)v143 != 2)
                goto LABEL_185;
              v104 = *(_QWORD *)v144 & 0xFFFFFFFFFFFFFFFCLL;
              if ((*(_DWORD *)(v104 + 28) & 0x7Fu) <= 0x2F
                && ((1 << (*(_DWORD *)(v104 + 28) & 0x7F)) & 0xC00000060000) != 0)
              {
                v104 = sub_22EFBAEA4(v104);
              }
              v105 = sub_22ED5601C(v104, 1, 1);
              if (v105)
              {
                if (*(_BYTE *)(a2 + 163))
                {
                  if (*(_DWORD *)a2 != 2)
                    goto LABEL_167;
                  v106 = v105;
                  v107 = **(_QWORD **)(a2 + 8) & 0xFFFFFFFFFFFFFFFCLL;
                  if ((*(_DWORD *)(v107 + 28) & 0x7Fu) <= 0x2F
                    && ((1 << (*(_DWORD *)(v107 + 28) & 0x7F)) & 0xC00000060000) != 0)
                  {
                    v107 = sub_22EFBAEA4(v107);
                  }
                  v108 = sub_22ED5601C(v107, 1, 1);
                  v109 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v108 + 32))(v108);
                  if (v109 != (*(uint64_t (**)(unint64_t))(*(_QWORD *)v106 + 32))(v106))
                  {
LABEL_167:
                    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a2 + 128), 0x14BBu, 0, (uint64_t)&v128);
                    __p = *(void **)(a2 + 120);
                    v110 = sub_22E894538((uint64_t)&v128, (uint64_t *)&__p);
                    sub_22E8901B8(v110, (uint64_t *)&v142);
                    sub_22E903BEC((unsigned int *)&v128);
                    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)((**(_QWORD **)(a2 + 8) & 0xFFFFFFFFFFFFFFFCLL) + 24), 0x152Au, 0, (uint64_t)&v128);
                    sub_22E8901B8((uint64_t)&v128, (uint64_t *)&v142);
                    sub_22E903BEC((unsigned int *)&v128);
                    v111 = *(_QWORD *)v144 & 0xFFFFFFFFFFFFFFFCLL;
                    if ((*(_DWORD *)(v111 + 28) & 0x7Fu) <= 0x2F
                      && ((1 << (*(_DWORD *)(v111 + 28) & 0x7F)) & 0xC00000060000) != 0)
                    {
                      v111 = sub_22EFBAEA4(v111);
                    }
                    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v111 + 24), 0x152Bu, 0, (uint64_t)v127);
                    sub_22E903BEC(v127);
                  }
                }
              }
              else
              {
LABEL_185:
                LODWORD(v143) = 0;
                LODWORD(v145) = 0;
                if (v149)
                {
                  v117 = sub_22EC6CBD0(v149);
                  MEMORY[0x2348A0E9C](v117, 0x10E0C409F09D3C3);
                }
                HIBYTE(v157) = 0;
                v149 = 0;
                v150 = 0;
              }
            }
            if (BYTE1(v157))
            {
              if ((_DWORD)v143 == 5)
              {
                sub_22EC64D18(v152, (uint64_t)&v143);
              }
              else if (v150 && (*(_DWORD *)(v152[9] + 52) & 0x400000) != 0)
              {
                sub_22E90B5FC((unint64_t)v152, (uint64_t)&v143);
              }
            }
            if (v149)
            {
              v118 = sub_22EC6CBD0(v149);
              MEMORY[0x2348A0E9C](v118, 0x10E0C409F09D3C3);
            }
            if (v144 != &v146)
              free(v144);
          }
        }
      }
      else
      {
        if (v122)
        {
          result = 0;
          *v11 = 1;
          return result;
        }
        if (v99 && (!v98 || (_DWORD)a8))
        {
          sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a2 + 128), 0x12D8u, 0, (uint64_t)&v143);
          v128 = *(void **)(a2 + 120);
          v112 = sub_22E894538((uint64_t)&v143, (uint64_t *)&v128);
          __p = *(void **)a4;
          v113 = sub_22E8906A0(v112, (uint64_t *)&__p);
          v114 = v98 != 0;
          if (v98)
            v115 = a8;
          else
            v115 = 0;
          if (!(_DWORD)a8)
            v114 = 0;
          LOBYTE(v141) = v114;
          v116 = sub_22E894E38(v113, (unsigned __int8 *)&v141);
          LODWORD(__s1) = v115;
          sub_22F2F2168(v116, (unsigned int *)&__s1);
          sub_22E903BEC((unsigned int *)&v143);
          if ((*(_DWORD *)(v99 + 28) & 0x7Fu) <= 0x2F
            && ((1 << (*(_DWORD *)(v99 + 28) & 0x7F)) & 0xC00000060000) != 0)
          {
            v99 = sub_22EFBAEA4(v99);
          }
          sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v99 + 24), 0x17DBu, 0, (uint64_t)&v143);
          v128 = *(void **)(a2 + 120);
          sub_22E894538((uint64_t)&v143, (uint64_t *)&v128);
          sub_22E903BEC((unsigned int *)&v143);
          return 1;
        }
      }
      return 0;
    }
    *(_QWORD *)(a2 + 120) = v143;
    if ((v120 & 1) != 0)
    {
      v63 = *(_QWORD *)(a1 + 88) + 2128;
      __p = 0;
      v138 = v63;
      v139 = 4020;
      v64 = v141;
      __p = (void *)sub_22E3B8AAC(v63);
      *((_BYTE *)__p + *(unsigned __int8 *)__p + 1) = 10;
      v65 = __p;
      v66 = *(unsigned __int8 *)__p;
      *(_BYTE *)__p = v66 + 1;
      v65[v66 + 2] = v64;
      sub_22EC6BEF8(a1, (uint64_t)&v143, (uint64_t)&__p, 1);
      if (__p && v138)
        sub_22E3BB10C(v138, (unint64_t)__p);
      goto LABEL_143;
    }
    sub_22EC6887C(&v143, *(unsigned int **)(a1 + 72), (uint64_t)&__p);
    if (!v147[28])
    {
      v88 = v125;
      v78 = 0;
      goto LABEL_138;
    }
    sub_22EFC683C(&v141, &__s1);
    if (v136 >= 0)
      v67 = v136 & 0x7F;
    else
      v67 = __n;
    v68 = v140 & 0x7F;
    if (v140 < 0)
      v68 = v138;
    if (v67 == v68)
    {
      if (v140 >= 0)
        p_p = (unsigned __int8 *)&__p;
      else
        p_p = (unsigned __int8 *)__p;
      if (v136 < 0)
      {
        v89 = __s1;
        v78 = memcmp(__s1, p_p, __n) == 0;
        goto LABEL_135;
      }
      if ((v136 & 0x7F) == 0)
      {
        v78 = 1;
        goto LABEL_137;
      }
      v70 = (v136 & 0x7F) - 1;
      p_s1 = &__s1;
      do
      {
        v73 = *(unsigned __int8 *)p_s1;
        p_s1 = (void **)((char *)p_s1 + 1);
        v72 = v73;
        v75 = *p_p++;
        v74 = v75;
        v77 = v70-- != 0;
        v78 = v72 == v74;
      }
      while (v72 == v74 && v77);
    }
    else
    {
      v78 = 0;
    }
    if ((v136 & 0x80) == 0)
    {
LABEL_137:
      v88 = v125;
LABEL_138:
      v90 = *(_QWORD *)(a1 + 88) + 2128;
      __s1 = 0;
      __n = v90;
      v135 = 4014;
      v91 = v141;
      __s1 = (void *)sub_22E3B8AAC(v90);
      *((_BYTE *)__s1 + *(unsigned __int8 *)__s1 + 1) = 10;
      v92 = __s1;
      v93 = *(unsigned __int8 *)__s1;
      *(_BYTE *)__s1 = v93 + 1;
      v92[v93 + 2] = v91;
      *((_BYTE *)v92 + (v93 + 1) + 1) = 13;
      v94 = __s1;
      v95 = *(unsigned __int8 *)__s1;
      *(_BYTE *)__s1 = v95 + 1;
      v94[v95 + 2] = v119;
      *((_BYTE *)v94 + (v95 + 1) + 1) = 2;
      v96 = __s1;
      v97 = *(unsigned __int8 *)__s1;
      *(_BYTE *)__s1 = v97 + 1;
      v96[v97 + 2] = v78;
      sub_22E4D6448((uint64_t)(v96 + 42), *(_QWORD *)a4, 1);
      sub_22EC6BEF8(a1, (uint64_t)&v143, (uint64_t)&__s1, 1);
      if (__s1 && __n)
        sub_22E3BB10C(__n, (unint64_t)__s1);
      v51 = v88;
      if (v140 < 0)
        operator delete(__p);
      goto LABEL_143;
    }
    v89 = __s1;
LABEL_135:
    operator delete(v89);
    goto LABEL_137;
  }
  return result;
}

uint64_t sub_22ED5735C(_QWORD *a1, uint64_t *a2, uint64_t a3, int a4, unint64_t *a5)
{
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v13;
  uint64_t v14;
  uint64_t v17;
  char v18;
  __int128 v19;
  void *v20[2];
  uint64_t v21;
  void *v22;
  uint64_t v23;
  _BYTE v24[64];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  _QWORD v31[3];
  __int16 v32;
  int v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v19 = 0u;
  *(_OWORD *)v20 = 0u;
  v21 = 0;
  v22 = v24;
  v23 = 0x800000000;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = a1;
  v29 = a3;
  v30 = a4;
  sub_22EFC6D6C((uint64_t)v31, a3);
  v31[1] = 0;
  v31[2] = 0;
  v32 = 0;
  v33 = 257;
  v34 = 0;
  sub_22EC56024((uint64_t)&v21);
  v8 = sub_22ED566F4((uint64_t)a1, (uint64_t)&v21, a2, (uint64_t)&v19, 0, 0, &v18, 0x100000000, 0, 1);
  v9 = 0;
  if ((v8 & 1) == 0 && (_DWORD)v23)
  {
    if ((_DWORD)v21 == 2)
    {
      v10 = *(_QWORD *)v22 & 0xFFFFFFFFFFFFFFFCLL;
      v11 = *(_DWORD *)(v10 + 28) & 0x7F;
      if (v11 <= 0x2F && ((1 << v11) & 0xC00000060000) != 0)
      {
        v10 = sub_22EFBAEA4(v10);
        v11 = *(_DWORD *)(v10 + 28) & 0x7F;
      }
      if (v11 - 26 <= 6)
      {
        v13 = v11 > 0x20;
        v14 = (1 << v11) & 0x150000000;
        if (!v13 && v14 != 0)
        {
          if (a5)
            *a5 = v10 & 0xFFFFFFFFFFFFFFF9;
          v9 = 1;
          goto LABEL_20;
        }
      }
    }
    else if ((_DWORD)v21 == 5)
    {
      v9 = 0;
      BYTE1(v33) = 0;
      goto LABEL_25;
    }
    v9 = 0;
  }
LABEL_20:
  if (BYTE1(v33))
  {
    if ((_DWORD)v21 == 5)
    {
      sub_22EC64D18(v28, (uint64_t)&v21);
    }
    else if (v26 && (*(_DWORD *)(v28[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v28, (uint64_t)&v21);
    }
  }
LABEL_25:
  if (v25)
  {
    v17 = sub_22EC6CBD0(v25);
    MEMORY[0x2348A0E9C](v17, 0x10E0C409F09D3C3);
  }
  if (v22 != v24)
    free(v22);
  if (HIDWORD(v20[1]))
    free(v20[0]);
  return v9;
}

uint64_t sub_22ED57594(uint64_t a1)
{
  uint64_t result;
  unsigned int v2;

  if (*(_DWORD *)a1 != 2)
    return 0;
  result = **(_QWORD **)(a1 + 8) & 0xFFFFFFFFFFFFFFFCLL;
  v2 = *(_DWORD *)(result + 28) & 0x7F;
  if (v2 <= 0x2F && ((1 << v2) & 0xC00000060000) != 0)
  {
    result = sub_22EFBAEA4(result);
    v2 = *(_DWORD *)(result + 28) & 0x7F;
  }
  if (v2 - 26 >= 7)
    return 0;
  return result;
}

unint64_t sub_22ED57604(_QWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t *a6, _DWORD *a7)
{
  unint64_t result;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  _BYTE __p[23];
  __int16 v24;
  _QWORD v25[2];
  unsigned int v26[24];
  uint64_t v27;

  if (!a5)
    return 0;
  result = *(_QWORD *)(a5 + 8);
  if (result)
  {
    if ((sub_22F0AAC5C(result) & 4) != 0)
    {
      v14 = sub_22E958204((uint64_t)a1, a5, 0);
      result = 0;
      if (!v14)
      {
        v27 = *(_QWORD *)(a5 + 8);
        sub_22E8FCA40(a1, a3, 0x12D5u, 0, (uint64_t)v26);
        v15 = sub_22EA02390((uint64_t)v26, &v27);
        v16 = *(unsigned int **)(a2 + 16);
        v17 = *v16;
        v25[0] = v16 + 4;
        v25[1] = v17;
        v18 = sub_22F2F2210(v15, (uint64_t)v25);
        v22 = 0;
        v21 = 0;
        v19 = a3 | ((unint64_t)a3 << 32);
        v20 = 0;
        memset(&__p[10], 0, 13);
        strcpy(__p, "template ");
        v24 = 9;
        sub_22E890748(v18, &v19);
        if ((char)v24 < 0)
          operator delete(*(void **)__p);
        sub_22E903BEC(v26);
        *a6 = sub_22F36E5B0(a1[11], v27, a2);
        *a7 = 4;
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_22ED57748(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4, unsigned int a5)
{
  unsigned int *v9;
  int v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  unsigned __int8 *p_p;
  uint64_t v29;
  void **p_s1;
  int v31;
  int v32;
  int v33;
  int v34;
  BOOL v36;
  _BOOL8 v37;
  uint64_t v38;
  unsigned int *v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  void *v43;
  unint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  _BYTE *v47;
  _BYTE *v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[96];
  unsigned int v56[24];
  void *__s1;
  size_t __n;
  int v59;
  char v60;
  void *__p;
  uint64_t v62;
  int v63;
  char v64;
  void *v65;
  int v66;
  char v67;
  uint64_t v68;
  _BYTE v69[11];
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76[2];
  _QWORD *v77;
  int v78;
  _BYTE v79[32];
  _QWORD v80[5];

  v80[4] = *MEMORY[0x24BDAC8D0];
  if ((a3 & 1) == 0)
  {
    *(_QWORD *)&v74 = 0;
    DWORD2(v74) = 0;
    v75 = 0;
    v9 = (unsigned int *)(a3 & 0xFFFFFFFFFFFFFFFELL);
    v72 = 0u;
    v73 = 0u;
    v10 = *(unsigned __int8 *)(a3 & 0xFFFFFFFFFFFFFFFELL);
    if (v10 == 188)
    {
      v11 = v9 + 6;
      v16 = v9[10];
      v17 = *((_QWORD *)v9 + 4);
      *(_QWORD *)&v74 = *(_QWORD *)(*((_QWORD *)v9 + 3) + 40);
      DWORD2(v74) = v16;
      v75 = v17;
      if ((*((_BYTE *)v9 + 2) & 8) != 0)
      {
        v18 = *((_QWORD *)v9 + 6);
        v19 = *((_QWORD *)v9 + 7);
      }
      else
      {
        v18 = 0;
        v19 = 0;
      }
      sub_22E8ACE30((uint64_t)&v72, v18, v19);
      v23 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v9 + 2) + 8) & 0xFFFFFFFFFFFFFFF0));
      if (v23)
      {
        if ((*(_DWORD *)(v23 + 28) & 0x7Fu) - 35 >= 3)
          v24 = 0;
        else
          v24 = v23;
      }
      else
      {
        v24 = 0;
      }
      if (v24)
        v20 = v24 + 64;
      else
        v20 = 0;
      v21 = 3;
    }
    else
    {
      if (v10 != 161)
      {
        if (v9 && v10 == 163)
        {
          v74 = *((_OWORD *)v9 + 2);
          v75 = *((_QWORD *)v9 + 6);
          v44 = (unint64_t *)(v9 + 4);
          v45 = (uint64_t *)(v9 + 6);
        }
        else
        {
          v74 = *((_OWORD *)v9 + 3);
          v75 = *((_QWORD *)v9 + 8);
          v44 = (unint64_t *)(v9 + 8);
          v45 = (uint64_t *)(v9 + 10);
        }
        sub_22E8ACE30((uint64_t)&v72, *v44, *v45);
        sub_22E8FCA40((_QWORD *)a1, SDWORD2(v74), 0x12D5u, 0, (uint64_t)v76);
        v53 = sub_22F2F30F4((uint64_t)v76, (uint64_t)"");
        __p = (void *)v74;
        sub_22EFC683C((uint64_t *)&__p, &v65);
        v54 = sub_22F2F3734(v53, &v65);
        __s1 = (void *)__PAIR64__(a5, a4);
        sub_22E8906A0(v54, (uint64_t *)&__s1);
        if ((v69[2] & 0x80000000) != 0)
          operator delete(v65);
        v39 = (unsigned int *)v76;
        goto LABEL_50;
      }
      v11 = v9 + 4;
      v12 = v9[1];
      v13 = *((_QWORD *)v9 + 3);
      *(_QWORD *)&v74 = *(_QWORD *)(*((_QWORD *)v9 + 2) + 40);
      DWORD2(v74) = v12;
      v75 = v13;
      if ((*((_BYTE *)v9 + 2) & 4) != 0)
      {
        v14 = *((_QWORD *)v9 + 4);
        v15 = *((_QWORD *)v9 + 5);
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
      sub_22E8ACE30((uint64_t)&v72, v14, v15);
      v20 = 0;
      v21 = 0;
      v22 = *v9;
      if ((v22 & 0x100000) != 0)
        v11 = &v9[4 * ((v22 >> 18) & 1) + 8];
    }
    v25 = *(_QWORD *)v11;
    v71 = v74;
    memset(v69, 0, sizeof(v69));
    v68 = 0;
    v65 = &off_24FAB9200;
    v70 = a1;
    v66 = 16842752;
    v67 = 0;
    sub_22EC6AB20(a1, (uint64_t *)&v74, v21, a2, (uint64_t)&v72, (uint64_t)&v65, 1, v20, (uint64_t)v76, 0, 0, 1u);
    if (v76[0] && v78 && (!*v77 || sub_22ED5601C(*v77, 1, 1)))
    {
      if (!v20)
      {
        v62 = *(_QWORD *)(a1 + 88) + 2128;
        v63 = 4038;
        v40 = v71;
        v41 = (_BYTE *)sub_22E3B8AAC(v62);
        __p = v41;
        v42 = *v41;
        v41[v42 + 1] = 10;
        *v41 = v42 + 1;
        *(_QWORD *)&v41[8 * v42 + 16] = v40;
        sub_22EC6BEF8(a1, (uint64_t)v76, (uint64_t)&__p, 0);
        if (__p && v62)
          sub_22E3BB10C(v62, (unint64_t)__p);
        goto LABEL_69;
      }
      sub_22EC6887C(v76, *(unsigned int **)(a1 + 72), (uint64_t)&__p);
      if (!v79[28])
      {
        v37 = 0;
        goto LABEL_64;
      }
      sub_22EFC683C(&v71, &__s1);
      if (v60 >= 0)
        v26 = v60 & 0x7F;
      else
        v26 = __n;
      v27 = v64 & 0x7F;
      if (v64 < 0)
        v27 = v62;
      if (v26 == v27)
      {
        if (v64 >= 0)
          p_p = (unsigned __int8 *)&__p;
        else
          p_p = (unsigned __int8 *)__p;
        if (v60 < 0)
        {
          v43 = __s1;
          v37 = memcmp(__s1, p_p, __n) == 0;
LABEL_62:
          operator delete(v43);
          goto LABEL_64;
        }
        if ((v60 & 0x7F) == 0)
        {
          v37 = 1;
LABEL_64:
          __n = *(_QWORD *)(a1 + 88) + 2128;
          v59 = 4036;
          v46 = v71;
          v47 = (_BYTE *)sub_22E3B8AAC(__n);
          __s1 = v47;
          v48 = v47 + 1;
          v49 = *v47;
          v48[v49] = 10;
          *v47 = v49 + 3;
          v50 = v47 + 16;
          *(_QWORD *)&v50[8 * v49] = v46;
          v51 = (v49 + 1);
          v48[v51] = 13;
          *(_QWORD *)&v50[8 * v51] = v20;
          v52 = (v49 + 2);
          v48[v52] = 2;
          *(_QWORD *)&v50[8 * v52] = v37;
          sub_22E4D6448((uint64_t)(v47 + 336), v72, 1);
          sub_22EC6BEF8(a1, (uint64_t)v76, (uint64_t)&__s1, 0);
          if (__s1 && __n)
            sub_22E3BB10C(__n, (unint64_t)__s1);
          if (v64 < 0)
            operator delete(__p);
LABEL_69:
          if (v25)
          {
            sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v25 + 24), 0x16D3u, 0, (uint64_t)v56);
            sub_22E903BEC(v56);
          }
          __p = v80;
          sub_22E8D19C8((void ***)&__p);
          if (v77 != (_QWORD *)v79)
            free(v77);
          goto LABEL_73;
        }
        v29 = (v60 & 0x7F) - 1;
        p_s1 = &__s1;
        do
        {
          v32 = *(unsigned __int8 *)p_s1;
          p_s1 = (void **)((char *)p_s1 + 1);
          v31 = v32;
          v34 = *p_p++;
          v33 = v34;
          v36 = v29-- != 0;
        }
        while (v31 == v33 && v36);
        v37 = v31 == v33;
      }
      else
      {
        v37 = 0;
      }
      if ((v60 & 0x80) == 0)
        goto LABEL_64;
      v43 = __s1;
      goto LABEL_62;
    }
    __p = v80;
    sub_22E8D19C8((void ***)&__p);
    if (v77 != (_QWORD *)v79)
      free(v77);
    sub_22E8FCA40((_QWORD *)a1, SDWORD2(v74), 0xFC5u, 0, (uint64_t)v76);
    v38 = sub_22E894538((uint64_t)v76, &v71);
    __p = (void *)__PAIR64__(a5, a4);
    sub_22E8906A0(v38, (uint64_t *)&__p);
    sub_22E903BEC((unsigned int *)v76);
    if (!v25)
      goto LABEL_73;
    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v25 + 24), 0x16D3u, 0, (uint64_t)v55);
    v39 = (unsigned int *)v55;
LABEL_50:
    sub_22E903BEC(v39);
LABEL_73:
    if (HIDWORD(v73))
      free((void *)v73);
  }
}

uint64_t sub_22ED57D18(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5, uint64_t a6)
{
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;

  v12 = sub_22E903070(a1, 0);
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 2) != 0
    && (v13 = *(_DWORD *)(*(_QWORD *)(a1 + 3688) + 576 * *(unsigned int *)(a1 + 3696) - 576), v13 <= 3))
  {
    v14 = (0xBu >> (v13 & 0xF)) & 1;
  }
  else
  {
    v14 = 0;
  }
  v17 = *(_QWORD *)(a2 + 8);
  v16 = (uint64_t *)(a2 + 8);
  v15 = v17;
  if (v17 && (*(_BYTE *)(v15 + 8) & 4) != 0)
  {
    v18 = *(_QWORD *)(v15 + 16);
    if (v18)
      LOBYTE(v18) = *(_BYTE *)(v18 + 16) == 44;
  }
  else
  {
    LOBYTE(v18) = 0;
  }
  if (((v14 | a5) & 1) != 0 || (v18 & 1) != 0 || (*(_WORD *)(v12 + 8) & 0x7Eu) - 54 > 3)
    goto LABEL_12;
  v22 = v12 - 72;
  if (sub_22EFD642C((_QWORD *)(v12 - 72)))
  {
    v15 = *v16;
LABEL_12:
    if (v15 && (v20 = sub_22F0ABC50(v16, *(_QWORD *)(a1 + 88))) != 0)
      return sub_22F060928(*(_QWORD *)(a1 + 88), v20, v21, a3, (__int128 *)a4, a6);
    else
      return 1;
  }
  v23 = sub_22EFD7558(v22);
  v24 = *(_QWORD *)(a1 + 88);
  if (*v16)
  {
    v25 = sub_22F0ABC50(v16, v24);
    v26 = v27;
  }
  else
  {
    v25 = 0;
    v26 = 0;
  }
  v28 = *(_OWORD *)a4;
  v29 = *(_QWORD *)(a4 + 16);
  return sub_22F061D9C(v24, 0, v23, 1, 0, v25, v26, a3, 0, (uint64_t)&v28, a6);
}

uint64_t sub_22ED57EC0(uint64_t a1, uint64_t a2, int a3, __int128 *a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_QWORD *)(a2 + 8);
  v5 = (uint64_t *)(a2 + 8);
  if (v6 && (v12 = sub_22F0ABC50(v5, *(_QWORD *)(a1 + 88))) != 0)
    return sub_22F060928(*(_QWORD *)(a1 + 88), v12, v13, a3, a4, a5);
  else
    return 1;
}

uint64_t sub_22ED57F34(_QWORD *a1, unsigned int a2, uint64_t a3, int a4, uint64_t a5, unint64_t a6, int a7, int a8)
{
  uint64_t v11;
  int v16;
  int v17;
  uint64_t result;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unsigned int v29;
  char v30;
  int v31;
  uint64_t v32;
  unsigned int v33[24];
  _QWORD *v34;
  uint64_t v35;
  int v36;
  unint64_t v37[12];
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v11 = a5;
  v39 = a5;
  v40 = a3;
  if (!a6)
  {
    if ((a8 & 1) == 0)
      return 1;
LABEL_12:
    v38 = 0;
    if (a3 && (*(_DWORD *)(a3 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFB)
    {
      v19 = *(_QWORD *)(a3 + 48);
      if (v19)
        v20 = v19 & 0xFFFFFFFFFFFFFFF0;
      else
        v20 = sub_22EF6462C(a1[11], a3);
      v38 = v20;
    }
    if (a6)
    {
      sub_22E8FCA40(a1, a2, 0x12D3u, 0, (uint64_t)v37);
      LOBYTE(v35) = a7 != 1;
      v21 = sub_22E894E38((uint64_t)v37, (unsigned __int8 *)&v35);
      sub_22E8901B8(v21, (uint64_t *)&v38);
      sub_22E903BEC((unsigned int *)v37);
      sub_22EFC77E8(a3, 1);
      goto LABEL_33;
    }
    v22 = *(_DWORD *)(a3 + 28);
    v23 = (v22 & 0x7E) - 52;
    if (a4)
    {
      if (v23 > 5)
      {
        sub_22E8FCA40(a1, a2, 0xDEFu, 0, (uint64_t)v37);
        sub_22E8901B8((uint64_t)v37, (uint64_t *)&v38);
        sub_22E903BEC((unsigned int *)v37);
        v29 = 5712;
        goto LABEL_32;
      }
      sub_22E8FCA40(a1, a2, 0xD03u, 0, (uint64_t)v37);
      v24 = 1;
    }
    else
    {
      if (v23 <= 5)
      {
        sub_22E8FCA40(a1, a2, 0xD02u, 0, (uint64_t)v37);
        sub_22E890024((uint64_t)v37, &v39);
        sub_22E903BEC((unsigned int *)v37);
        v29 = 5608;
        v11 = v39;
        goto LABEL_32;
      }
      v31 = v22 & 0x7F;
      if ((v31 - 33) <= 4)
      {
        sub_22E8FCA40(a1, a2, 0x12D2u, 0, (uint64_t)v37);
        LOBYTE(v35) = a7 != 1;
        v32 = sub_22E894E38((uint64_t)v37, (unsigned __int8 *)&v35);
        sub_22E8901B8(v32, (uint64_t *)&v38);
        sub_22E903BEC((unsigned int *)v37);
        v29 = 6102;
        goto LABEL_32;
      }
      if ((v31 - 65) <= 1)
      {
        sub_22E8FCA40(a1, a2, 0xD04u, 0, (uint64_t)v37);
        sub_22E890024((uint64_t)v37, &v40);
        sub_22E903BEC((unsigned int *)v37);
        sub_22EFC77E8(v40, 1);
LABEL_26:
        v29 = 5608;
LABEL_32:
        sub_22E8FCA40(a1, *(_DWORD *)(v11 + 24), v29, 0, (uint64_t)v33);
        sub_22E903BEC(v33);
LABEL_33:
        if (a7 == 3)
          sub_22EFC77E8(v40, 1);
        return 1;
      }
      sub_22E8FCA40(a1, a2, 0xD03u, 0, (uint64_t)v37);
      v24 = 2;
    }
    v36 = v24;
    v25 = sub_22E8900C4((uint64_t)v37, &v36);
    v35 = *(_QWORD *)(a3 + 40);
    v26 = sub_22E894538(v25, &v35);
    v27 = *(_QWORD *)(a3 + 16);
    v28 = (_QWORD *)(v27 & 0xFFFFFFFFFFFFFFF8);
    if ((v27 & 4) != 0)
      v28 = (_QWORD *)*v28;
    v34 = v28;
    sub_22E894FB4(v26, (uint64_t *)&v34);
    sub_22E903BEC((unsigned int *)v37);
    goto LABEL_26;
  }
  v16 = *(_DWORD *)(a6 + 28);
  if ((v16 & 0x7Fu) - 33 <= 4 && (*(_BYTE *)(a6 + 74) & 2) != 0)
  {
    result = 1;
    if ((v16 & 0x80) != 0 || !a8)
      return result;
    goto LABEL_12;
  }
  v37[0] = 0;
  v17 = sub_22EE8B858((uint64_t)a1, a6, v37, 0);
  if ((v17 & 1) == 0)
  {
    if (a8)
    {
      sub_22EE03478((uint64_t)a1);
      v17 = v30 == 0;
      sub_22F338924((uint64_t)a1, a2, v37[0], 1, v17);
    }
  }
  return v17 ^ 1u;
}

__n128 sub_22ED58288(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _OWORD *v9;
  __n128 result;
  __int128 v11;
  _BYTE v12[32];

  if (*(_DWORD *)(a2 + 8))
  {
    v6 = 0;
    v7 = 56 * *(unsigned int *)(a2 + 8);
    do
    {
      sub_22ED58328(a1, *(_QWORD *)a2 + v6, (uint64_t)v12);
      v8 = sub_22E78DF7C(a3, (unint64_t)v12, 1);
      v9 = (_OWORD *)(*(_QWORD *)a3 + 32 * *(unsigned int *)(a3 + 8));
      result = *(__n128 *)v8;
      v11 = *(_OWORD *)(v8 + 16);
      *v9 = *(_OWORD *)v8;
      v9[1] = v11;
      ++*(_DWORD *)(a3 + 8);
      v6 += 56;
    }
    while (v7 != v6);
  }
  return result;
}

uint64_t sub_22ED58328@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  if (*(_DWORD *)a2 != 2)
  {
    if (*(_DWORD *)a2 == 1)
    {
      v5 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)a3 = 7;
      *(_QWORD *)(a3 + 8) = v5;
      v6 = v5 & 0xFFFFFFFFFFFFFFFCLL | 1;
      goto LABEL_18;
    }
    v13 = *(_QWORD *)(a2 + 8);
    if (v13 >= 0x10)
    {
      v14 = *(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0);
      if (v14)
      {
        if (*(_BYTE *)(v14 + 16) == 57)
        {
          v13 = *(_QWORD *)(v14 + 8);
          v15 = *(_QWORD *)(v14 + 24);
          if (v15)
            goto LABEL_15;
        }
      }
    }
    else
    {
      v13 = 0;
    }
    result = (uint64_t)sub_22EF579A8(*(_QWORD *)(result + 88), v13, *(_DWORD *)(a2 + 48));
    v15 = result;
LABEL_15:
    *(_DWORD *)a3 = 1;
    *(_QWORD *)(a3 + 8) = v13;
    v6 = v15 & 0xFFFFFFFFFFFFFFFCLL | 2;
    goto LABEL_18;
  }
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_DWORD *)(a2 + 52);
  if (v8)
    v9 = 6;
  else
    v9 = 5;
  v10 = *(_QWORD *)(result + 88);
  if (*(_QWORD *)(a2 + 24))
  {
    v11 = sub_22F0ABC50((uint64_t *)(a2 + 24), v10);
    v12 = v16;
    v8 = *(_DWORD *)(a2 + 52);
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v17 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)a3 = v9;
  *(_DWORD *)(a3 + 4) = 0;
  *(_QWORD *)(a3 + 8) = v7;
  result = sub_22E3CD3D4(v10 + 2032, 24, 3);
  *(_QWORD *)result = v11;
  *(_QWORD *)(result + 8) = v12;
  *(_DWORD *)(result + 16) = v17;
  *(_DWORD *)(result + 20) = v8;
  v6 = result & 0xFFFFFFFFFFFFFFFCLL;
LABEL_18:
  *(_QWORD *)(a3 + 24) = v6;
  return result;
}

double sub_22ED58468@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, __int128 *a3@<X8>)
{
  double result;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  void *v24[2];
  int v25;
  uint64_t v26;
  __int128 v27;
  void *v28[2];

  if (a2 < 0x10)
    goto LABEL_2;
  v7 = 0;
  v8 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (v8 && *(_BYTE *)(v8 + 16) == 57)
  {
    if (*(_QWORD *)(v8 + 8) <= 0xFuLL)
    {
LABEL_2:
      *(_DWORD *)a3 = 0;
      result = 0.0;
      *(__int128 *)((char *)a3 + 8) = 0u;
      *(__int128 *)((char *)a3 + 24) = 0u;
      *(__int128 *)((char *)a3 + 40) = 0u;
      return result;
    }
    v7 = *(unint64_t **)(v8 + 24);
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 8) != 0)
  {
    v9 = (uint64_t)(v7 + 1);
    v10 = *v7;
    if ((*v7 & 0xF) != 0)
    {
      v11 = 0;
    }
    else
    {
      v11 = 0;
      if (v10 && *(_BYTE *)(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0) + 16) == 36)
      {
        v11 = *(_DWORD *)v9;
        v10 = *(_QWORD *)(v10 + 32);
        if (v10 >= 0x10 && (v10 & 0xF) == 0)
          v21 = *(_QWORD *)((char *)&unk_22F498010
                          + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
        else
          v21 = 1;
        v9 = (v9 + v21 + 3) & -v21;
      }
    }
    v27 = 0u;
    *(_OWORD *)v28 = 0u;
    if ((v10 & 0xF) == 0 && v10 && *(_BYTE *)(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0) + 16) == 24)
    {
      sub_22E8ACE30((uint64_t)&v27, *(_QWORD *)(v10 + 32), *(_QWORD *)(v9 + 8));
      v10 = *(_QWORD *)(v10 + 40);
      v13 = 1;
      if (v10 >= 0x10 && (v10 & 0xF) == 0)
        v13 = *(_QWORD *)((char *)&unk_22F498010
                        + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
      v9 = (v9 + v13 + 15) & -v13;
    }
    if ((v10 & 0xF) == 0 && v10 && *(_BYTE *)(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0) + 16) == 15)
    {
      v17 = *(_QWORD *)(v10 + 40);
      if (*((_QWORD *)&v27 + 1))
        v17 = sub_22F36E410(*(_QWORD *)(a1 + 88), *((uint64_t *)&v27 + 1), 0, v17);
      v18 = *(_DWORD *)v9;
      *(_DWORD *)a3 = 2;
      v19 = v27;
      *((_QWORD *)a3 + 1) = v17;
      *((_QWORD *)a3 + 2) = v19;
      sub_22F0AB560((_QWORD *)a3 + 3, (uint64_t)&v27 + 8);
      *((_DWORD *)a3 + 12) = v18;
      *((_DWORD *)a3 + 13) = 0;
      if (v11)
      {
        v22 = *a3;
        v23 = *((_QWORD *)a3 + 2);
        sub_22F0AB560(v24, (uint64_t)a3 + 24);
        LODWORD(v26) = *((_QWORD *)a3 + 6);
        HIDWORD(v26) = v11;
        *a3 = v22;
        *((_QWORD *)a3 + 2) = v23;
        sub_22F0AB71C((uint64_t)a3 + 24, (uint64_t)v24);
        *((_QWORD *)a3 + 6) = v26;
        if (v25)
          free(v24[1]);
      }
      if (HIDWORD(v28[1]))
        free(v28[0]);
      return result;
    }
    if (HIDWORD(v28[1]))
      free(v28[0]);
  }
  v14 = *v7;
  for (i = *v7; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_40;
      v16 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v16 <= 0x39)
        break;
LABEL_35:
      if (sub_22F115668(i))
        v14 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_51;
    }
    if (v16 == 24)
      goto LABEL_50;
    if (v16 == 26)
      break;
    if (((1 << v16) & 0x20000000200003CLL) == 0)
      goto LABEL_35;
LABEL_40:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_40;
LABEL_50:
  v14 = i;
LABEL_51:
  v20 = sub_22F115668(v14);
  *(_DWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = a2;
  result = 0.0;
  a3[1] = 0u;
  a3[2] = 0u;
  *((_QWORD *)a3 + 6) = v20;
  return result;
}

uint64_t sub_22ED587C8(_QWORD *a1, uint64_t a2, char a3, unsigned int a4, int a5, uint64_t a6, int a7, unsigned int a8, unsigned int a9, int a10, int a11, unint64_t a12, char a13)
{
  unsigned __int8 v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v31;
  unsigned int v32[26];

  v31 = a4;
  v19 = a4 != 0;
  v20 = a1[11];
  v21 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*(_QWORD *)(v20 + 1960) + 80) + 72), *(_QWORD *)(*(_QWORD *)(v20 + 1960) + 80));
  if (v21)
    v22 = v21 + 40;
  else
    v22 = 0;
  v23 = sub_22EFEAF4C(v20, v22, a5, a7, a8, a9, a6, a3, v19, a13, 0);
  *(_DWORD *)(v23 + 28) &= 0xFFFF9FFF;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 48) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                 + 8) & 0xFFFFFFFFFFFFFFF0)
                                         + 8) & 0xFFFFFFFFFFFFFFF0)
                 + 33) & 0x80) != 0)
  {
    v27 = sub_22F3091B0((uint64_t)a1);
    if (v27)
    {
      v28 = *(_DWORD *)(v27 + 1528);
      if (v28 >= *(_DWORD *)(v27 + 1532))
      {
        v29 = v27;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v27 = v29;
        v28 = *(_DWORD *)(v29 + 1528);
      }
      *(_QWORD *)(*(_QWORD *)(v27 + 1520) + 8 * v28) = v23;
      ++*(_DWORD *)(v27 + 1528);
    }
  }
  if (a6)
  {
    sub_22ED58A10(a1, a2, a7, a6);
    sub_22E3BA850(a2 + 72, (const void *)v23);
    sub_22E8CE7E8((uint64_t)(a1 + 415), v23);
  }
  if (a12 && v31)
  {
    sub_22E8FCA40(a1, a11, 0x12EAu, 0, (uint64_t)v32);
    sub_22E903BEC(v32);
  }
  else if (a12)
  {
    if (a12 >= 0x10)
    {
      v24 = 0;
      v25 = *(_QWORD *)(a12 & 0xFFFFFFFFFFFFFFF0);
      if (v25 && *(_BYTE *)(v25 + 16) == 57)
        v24 = *(uint64_t **)(v25 + 24);
    }
    else
    {
      v24 = 0;
    }
    if ((sub_22EE67290((uint64_t)a1, a7, (unint64_t *)v24, 12) & 1) == 0)
    {
      if (sub_22ED58A88(a1, v24))
        sub_22EFC77E8(v23, 1);
      else
        *(_QWORD *)(v23 + 72) = (unint64_t)v24 & 0xFFFFFFFFFFFFFFF9;
    }
  }
  return v23;
}

unsigned int *sub_22ED58A10(_QWORD *a1, uint64_t a2, int a3, uint64_t a4)
{
  unsigned int *result;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;

  result = (unsigned int *)sub_22EC65CE0(a1, a2, a4, a3, 0, 1);
  if (result)
  {
    v7 = result[7] & 0x7F;
    v8 = v7 > 0x3B;
    v9 = (1 << v7) & 0x800004100000000;
    if (!v8 && v9 != 0)
      return sub_22F34553C((uint64_t)a1, a3, (uint64_t)result);
  }
  return result;
}

BOOL sub_22ED58A88(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  _QWORD *v16;
  uint64_t *v17;
  unint64_t v18;
  _QWORD *v19;

  v19 = (_QWORD *)*a2;
  v3 = (uint64_t)v19;
  v16 = v19;
  v17 = a2 + 1;
  v4 = (uint64_t)v19;
  for (i = (uint64_t)v19; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_12;
      v6 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v6 <= 0x39)
        break;
LABEL_7:
      if (sub_22F115668(i))
        v4 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_14;
    }
    if (v6 == 24)
      goto LABEL_13;
    if (v6 == 26)
      break;
    if (((1 << v6) & 0x20000000200003CLL) == 0)
      goto LABEL_7;
LABEL_12:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_12;
LABEL_13:
  v4 = i;
LABEL_14:
  v7 = sub_22F115668(v4);
  v8 = sub_22F1167E8((uint64_t *)&v16);
  v9 = v7;
  v10 = v7 | ((unint64_t)v8 << 32);
  v18 = v10;
  v11 = *(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v11 + 17) & 8) != 0)
  {
    sub_22E8FCA40(a1, v9, 0x1408u, 0, (uint64_t)&v16);
    v14 = sub_22E8901B8((uint64_t)&v16, (uint64_t *)&v19);
LABEL_23:
    v13 = *(_BYTE *)(v14 + 80) != 0;
    sub_22E903BEC((unsigned int *)&v16);
    return v13;
  }
  v12 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFFF0) + 8);
  if (*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(a1[11] + 16840) & 0xFFFFFFFFFFFFFFF0)
                                                                        + 8) & 0xFFFFFFFFFFFFFFF0))
  {
    sub_22E8FCA40(a1, v9, 0x12C6u, 0, (uint64_t)&v16);
    v14 = sub_22E8906A0((uint64_t)&v16, (uint64_t *)&v18);
    goto LABEL_23;
  }
  if ((*(_BYTE *)(a1[9] + 1) & 2) != 0)
    goto LABEL_19;
  sub_22F114870(*(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF0));
  if ((*(_BYTE *)(v11 + 18) & 2) != 0)
  {
    v12 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFFF0) + 8);
LABEL_19:
    v16 = a1;
    v17 = (uint64_t *)v10;
    sub_22ED68B98((uint64_t)&v16, v12 | v3 & 7);
  }
  return 0;
}

uint64_t sub_22ED58C78(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, char a6)
{
  unint64_t v12;
  uint64_t v13;
  int v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned __int32 v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void **v30;
  void *v32;
  uint64_t *v33;
  _QWORD *v34;
  uint64_t v35;
  unsigned __int8 *v36;
  unsigned __int8 **v37;
  unsigned __int8 *v38;
  __n128 v39;
  uint64_t v40;
  _OWORD v41[2];
  __n128 v42;
  uint64_t v43;
  _BYTE v44[96];
  uint64_t v45;
  _QWORD v46[2];
  void *v47[2];
  _BYTE v48[256];
  uint64_t v49;
  void *v50;
  uint64_t v51;
  _QWORD v52[2];
  unsigned __int8 *v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  char v57;
  uint64_t v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v45 = *(_QWORD *)(a3 + 24);
  v12 = sub_22F0F08CC(&v45);
  v13 = *(_QWORD *)(v12 + 56);
  if ((*(_DWORD *)(*(_QWORD *)(v13 + 16) + 28) & 0x7F) != 0x26)
  {
    sub_22E8FCA40(a1, *(_DWORD *)(a3 + 4), 0x131Fu, 0, (uint64_t)v44);
    v18 = (unsigned int *)v44;
LABEL_10:
    sub_22E903BEC(v18);
    return 1;
  }
  v14 = *(_DWORD *)(a3 + 36);
  if (!v14)
  {
    if (sub_22EFE8FBC(v13) > 1)
    {
      sub_22E8FCA40(a1, *(_DWORD *)(a3 + 4), 0x131Eu, 0, (uint64_t)&v50);
      if (v55)
      {
        v15 = v53;
        if (!v53)
        {
          v15 = (unsigned __int8 *)sub_22E3B8AAC(v54);
          v53 = v15;
        }
        v15[*v15 + 1] = 11;
        v16 = v53;
      }
      else
      {
        if (!v57)
          goto LABEL_33;
        v32 = (void *)v52[0];
        v33 = (uint64_t *)((char *)v50 + 12784);
        if (v52[0])
          v32 = (void *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v52[0] + 32))(v52[0]);
        v47[0] = v32;
        v34 = sub_22F2F1D6C(v33, (uint64_t *)v47);
        v35 = v34[1] + 32 * v56;
        v38 = *(unsigned __int8 **)(v35 + 8);
        v37 = (unsigned __int8 **)(v35 + 8);
        v36 = v38;
        if (!v38)
        {
          v36 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v37[1]);
          *v37 = v36;
        }
        v36[*v36 + 1] = 11;
        v16 = *v37;
      }
      v17 = *v16;
      *v16 = v17 + 1;
      *(_QWORD *)&v16[8 * v17 + 16] = v12;
LABEL_33:
      v18 = (unsigned int *)&v50;
      goto LABEL_10;
    }
    v14 = *(_DWORD *)(a3 + 36);
  }
  v20 = *(_DWORD *)(a3 + 4);
  v42.n128_u64[0] = *(_QWORD *)(a3 + 8);
  v42.n128_u32[2] = v20;
  sub_22EFC6D6C((uint64_t)&v43, v42.n128_i64[0]);
  v50 = v52;
  v51 = 0x800000000;
  v58 = 0;
  if (!v14)
    goto LABEL_21;
  v47[1] = (void *)0x800000000;
  LODWORD(v49) = v14;
  v21 = *(unsigned int *)(a3 + 44);
  HIDWORD(v49) = *(_DWORD *)(a3 + 40);
  v46[0] = a3 + 56;
  v46[1] = v21;
  v47[0] = v48;
  sub_22ED58288((uint64_t)a1, (uint64_t)v46, (uint64_t)v47);
  sub_22ED7355C((uint64_t)&v50, (uint64_t)v47);
  v58 = v49;
  if (v47[0] != v48)
    free(v47[0]);
  if (a5 || (a6 & 1) != 0 || !(_DWORD)v51)
  {
LABEL_21:
    v26 = *(_QWORD *)(a2 + 8);
    v25 = (uint64_t *)(a2 + 8);
    if (v26)
    {
      v27 = sub_22F0ABC50(v25, a1[11]);
      v28 = v29;
    }
    else
    {
      v27 = 0;
      v28 = 0;
    }
    v39 = v42;
    v40 = v43;
    if (*(_DWORD *)(a3 + 36))
      v30 = &v50;
    else
      v30 = 0;
    v19 = sub_22F34561C((uint64_t)a1, v27, v28, &v39, v12, (uint64_t)v30, a4, a5);
  }
  else
  {
    v22 = v50;
    v23 = 32 * v51;
    while (1)
    {
      v24 = v22[1];
      v41[0] = *v22;
      v41[1] = v24;
      if ((sub_22EE734A8((uint64_t)a1, (uint64_t)v41, 20) & 1) != 0)
        break;
      v22 += 2;
      v23 -= 32;
      if (!v23)
        goto LABEL_21;
    }
    v19 = 1;
  }
  if (v50 != v52)
    free(v50);
  return v19;
}

unint64_t sub_22ED58F98(_QWORD *a1, uint64_t **a2, unsigned int a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v11;
  char v12;

  v6 = *a2;
  v7 = **a2;
  v8 = *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0);
  v12 = 0;
  v9 = sub_22F110500((uint64_t)&v12, v8);
  if (v9 && *(_QWORD *)(v9 + 24) <= 0xFuLL && (*(_BYTE *)(v9 + 17) & 4) == 0)
  {
    v11 = sub_22F347308(a1, v6);
    *a2 = (uint64_t *)v11;
    v7 = *v11;
  }
  return sub_22ED5902C(a1, v7, a3);
}

unint64_t sub_22ED5902C(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t *v15;
  BOOL v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  _QWORD *v24;
  int v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  unint64_t i;
  uint64_t v33;
  unsigned int v34;
  int v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t j;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  void (**v61)(_QWORD, _QWORD *, _QWORD, unint64_t);
  int v62;
  uint64_t v63;

  v4 = a1;
  v58 = a2;
  v5 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v6 + 17) & 8) != 0)
  {
    v13 = a3;
    v14 = 5127;
LABEL_12:
    sub_22E8FCA40(a1, v13, v14, 0, (uint64_t)&v61);
    v15 = &v58;
    goto LABEL_13;
  }
  v8 = *(_QWORD *)(v6 + 8);
  v9 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_DWORD *)(v9 + 16);
  if (v9)
    v11 = v10 == 11;
  else
    v11 = 0;
  if (v11)
  {
    if (((v10 >> 19) & 0x1FE) - 166 < 0x14)
      goto LABEL_33;
  }
  else if (v9 && v10 == 44)
  {
    v12 = sub_22F114198(*(_QWORD *)(v9 + 24));
    if ((*(_BYTE *)(v12 + 74) & 1) != 0)
    {
      v6 = *v5;
      goto LABEL_33;
    }
    v6 = *v5;
    if (*(_QWORD *)(v12 + 128) > 7uLL)
      goto LABEL_33;
    v8 = *(_QWORD *)(v6 + 8);
    v10 = *(_DWORD *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  else if (v10 == 9)
  {
    goto LABEL_33;
  }
  v17 = v10 > 0x28u || ((1 << v10) & 0x18080000000) == 0;
  v18 = v10 & 0xFF800FF;
  v19 = !v17 || v18 == 114294795;
  if (v19
    || (LOBYTE(v61) = 0, (v20 = sub_22F110500((uint64_t)&v61, v6)) != 0)
    && *(_QWORD *)(v20 + 24) <= 0xFuLL
    && (*(_BYTE *)(v20 + 17) & 4) == 0)
  {
LABEL_33:
    if ((*(_BYTE *)(v6 + 8) & 0xF) == 0)
      return v6 & 0xFFFFFFFFFFFFFFF0;
LABEL_34:
    v6 = (uint64_t)sub_22F10D2BC(a2);
    return v6 & 0xFFFFFFFFFFFFFFF0;
  }
  if ((*(_DWORD *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 < 4
    || *(_DWORD *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 16) - 25 <= 1)
  {
    return sub_22F36A2BC(v4[11], a2);
  }
  if ((*(_BYTE *)(v6 + 17) & 4) != 0)
  {
    if ((v8 & 0xF) == 0)
      return v6 & 0xFFFFFFFFFFFFFFF0;
    goto LABEL_34;
  }
  v63 = a2;
  v61 = (void (**)(_QWORD, _QWORD *, _QWORD, unint64_t))&unk_24FAB6EF8;
  v62 = 4832;
  if ((sub_22EE8B0B0((uint64_t)v4, a3, a2) & 1) != 0)
    return 0;
  if ((sub_22F111FA8(*v5) & 1) != 0)
  {
    if ((*(_BYTE *)(v4[9] + 1) & 0x10) != 0)
    {
      sub_22E8FCA40(v4, a3, 0x1912u, 0, (uint64_t)&v61);
      sub_22E8901B8((uint64_t)&v61, &v58);
      sub_22E903BEC((unsigned int *)&v61);
      v27 = *(_QWORD *)(v58 & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v27 + 8) & 0xF) != 0)
        v27 = (unint64_t)sub_22F10D2BC(v58);
      return v27 & 0xFFFFFFFFFFFFFFF0;
    }
    a1 = v4;
    v13 = a3;
    v14 = 4829;
    goto LABEL_12;
  }
  v21 = *(_QWORD *)(*(_QWORD *)(*v5 + 8) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(_DWORD *)(v21 + 16);
  v23 = v22;
  if (v22 == 41)
  {
    v24 = v4;
    v25 = a3;
    v26 = 4835;
    goto LABEL_50;
  }
  if ((*(_BYTE *)(v4[9] + 1) & 0x10) == 0)
  {
LABEL_49:
    v24 = v4;
    v25 = a3;
    v26 = 4830;
    goto LABEL_50;
  }
  if (v22 > 0x2Cu)
    goto LABEL_108;
  if (((1 << v22) & 0x8180001600) != 0)
    goto LABEL_53;
  if (v22 == 11)
  {
    if (((v22 >> 19) & 0x1FF) - 166 < 0x35)
      goto LABEL_53;
LABEL_108:
    if (v23 != 45)
      goto LABEL_49;
    goto LABEL_53;
  }
  if (v22 != 44)
    goto LABEL_108;
  v52 = sub_22F114198(*(_QWORD *)(v21 + 24));
  if ((*(_BYTE *)(v52 + 74) & 1) == 0 && *(_QWORD *)(v52 + 128) <= 7uLL)
  {
    v23 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    goto LABEL_108;
  }
LABEL_53:
  v61 = (void (**)(_QWORD, _QWORD *, _QWORD, unint64_t))&unk_24FAB6EF8;
  v62 = 4833;
  if ((sub_22EE8BC8C(v4, a3, a2, &v61) & 1) != 0)
    return 0;
  sub_22E8FCA40(v4, a3, 0x12E2u, 0, (uint64_t)&v61);
  sub_22E8901B8((uint64_t)&v61, &v63);
  sub_22E903BEC((unsigned int *)&v61);
  v28 = sub_22F10C2A4(*(_QWORD *)(v63 & 0xFFFFFFFFFFFFFFF0));
  if (!v28)
    return 0;
  v29 = v28;
LABEL_56:
  if ((*(_DWORD *)(v29 + 28) & 0x7Fu) - 35 > 2)
    return 0;
  v30 = sub_22EFC3B90(v29);
  if (v30)
  {
    if ((*(_BYTE *)(v30 + 29) & 0x60) != 0)
    {
LABEL_122:
      sub_22E8FCA40(v4, *(_DWORD *)(v30 + 24), 0x16E6u, 0, (uint64_t)&v61);
      v56 = sub_22E8901B8((uint64_t)&v61, &v63);
      LODWORD(v60) = 0;
      goto LABEL_127;
    }
    while (1)
    {
      if ((*(_BYTE *)(v30 + 68) & 2) != 0)
      {
        v25 = *(_DWORD *)(v30 + 24);
        v24 = v4;
        v26 = 5861;
        goto LABEL_50;
      }
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v30 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) == 41)
        break;
      do
      {
        v30 = *(_QWORD *)(v30 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (!v30)
          goto LABEL_65;
        v31 = *(_DWORD *)(v30 + 28);
      }
      while ((v31 & 0x7Fu) - 49 > 2);
      if ((v31 & 0x6000) != 0)
        goto LABEL_122;
    }
    v25 = *(_DWORD *)(v30 + 24);
    v24 = v4;
    v26 = 5863;
LABEL_50:
    sub_22E8FCA40(v24, v25, v26, 0, (uint64_t)&v61);
    v15 = &v63;
LABEL_13:
    sub_22E8901B8((uint64_t)&v61, v15);
    goto LABEL_14;
  }
LABEL_65:
  for (i = sub_22E46A3A0(v29); ; i += 24)
  {
    if (i == v33)
    {
      v60 = 0;
      v59 = -1;
      v37 = sub_22EFC3B90(v29);
      if (v37)
      {
        v38 = v37;
        v39 = sub_22EF5BA38(v4[11], *(_QWORD *)(v37 + 48));
        if (!sub_22F111FA8(*(_QWORD *)(v39 & 0xFFFFFFFFFFFFFFF0)))
        {
LABEL_76:
          v40 = *(_DWORD *)(v38 + 24);
          v60 = v39;
          v59 = 0;
          goto LABEL_79;
        }
        while (1)
        {
          v38 = *(_QWORD *)(v38 + 8) & 0xFFFFFFFFFFFFFFF8;
          if (!v38)
            break;
          if ((*(_DWORD *)(v38 + 28) & 0x7Fu) - 49 <= 2)
          {
            v39 = sub_22EF5BA38(v4[11], *(_QWORD *)(v38 + 48));
            if ((sub_22F111FA8(*(_QWORD *)(v39 & 0xFFFFFFFFFFFFFFF0)) & 1) == 0)
              goto LABEL_76;
          }
        }
      }
      if (v59 != -1 || (v43 = sub_22E46A3A0(v29), v43 == v44))
      {
LABEL_78:
        v40 = 0;
        goto LABEL_79;
      }
      v45 = v43;
      v46 = v44;
      while (1)
      {
        v47 = *(_QWORD *)(**(_QWORD **)(v45 + 16) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v47 + 8) & 0xF) != 0)
          v47 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v45 + 16));
        v48 = v47 & 0xFFFFFFFFFFFFFFF0;
        if ((sub_22F111FA8(*(_QWORD *)(v47 & 0xFFFFFFFFFFFFFFF0)) & 1) == 0)
          break;
        v45 += 24;
        if (v45 == v46)
          goto LABEL_78;
      }
      v49 = **(_QWORD **)(v45 + 16);
      v50 = v49;
      while (1)
      {
        if ((v50 & 0xF) != 0)
          goto LABEL_99;
        v51 = *(unsigned __int8 *)(*(_QWORD *)(v50 & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v51 > 0x39)
        {
LABEL_94:
          if (sub_22F115668(v50))
            v49 = v50;
          v50 = sub_22F115B7C(v50);
          if (!v50)
            goto LABEL_101;
        }
        else
        {
          if (v51 == 24)
            goto LABEL_100;
          if (v51 == 26)
          {
            if ((*(_BYTE *)(v50 + 23) & 0x10) != 0)
            {
LABEL_100:
              v49 = v50;
LABEL_101:
              v40 = sub_22F115668(v49);
              v60 = v48;
              v59 = 1;
LABEL_79:
              sub_22E8FCA40(v4, v40, 0x16E8u, 0, (uint64_t)&v61);
              v41 = sub_22E8901B8((uint64_t)&v61, &v63);
              v42 = sub_22E8900C4(v41, &v59);
              sub_22E8901B8(v42, &v60);
              sub_22E903BEC((unsigned int *)&v61);
              v63 = v60;
              sub_22F10C2A4(*(_QWORD *)(v60 & 0xFFFFFFFFFFFFFFF0));
              v29 = sub_22F10C2A4(*(_QWORD *)(v63 & 0xFFFFFFFFFFFFFFF0));
              if (!v29)
                return 0;
              goto LABEL_56;
            }
          }
          else if (((1 << v51) & 0x20000000200003CLL) == 0)
          {
            goto LABEL_94;
          }
LABEL_99:
          v50 = sub_22F115B7C(v50);
        }
      }
    }
    v34 = *(unsigned __int8 *)(i + 12);
    v35 = (v34 >> 2) & 3;
    v36 = v34 & 2;
    if (v35 != 3)
      v36 = v35;
    if (v36)
      break;
  }
  v53 = **(_QWORD **)(i + 16);
  for (j = v53; ; j = sub_22F115B7C(j))
  {
    while (1)
    {
      if ((j & 0xF) != 0)
        goto LABEL_121;
      v55 = *(unsigned __int8 *)(*(_QWORD *)(j & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v55 <= 0x39)
        break;
LABEL_116:
      if (sub_22F115668(j))
        v53 = j;
      j = sub_22F115B7C(j);
      if (!j)
        goto LABEL_126;
    }
    if (v55 == 24)
      goto LABEL_125;
    if (v55 == 26)
      break;
    if (((1 << v55) & 0x20000000200003CLL) == 0)
      goto LABEL_116;
LABEL_121:
    ;
  }
  if ((*(_BYTE *)(j + 23) & 0x10) == 0)
    goto LABEL_121;
LABEL_125:
  v53 = j;
LABEL_126:
  v57 = sub_22F115668(v53);
  sub_22E8FCA40(v4, v57, 0x16E6u, 0, (uint64_t)&v61);
  v56 = sub_22E8901B8((uint64_t)&v61, &v63);
  LODWORD(v60) = 1;
LABEL_127:
  sub_22E8900C4(v56, (int *)&v60);
LABEL_14:
  sub_22E903BEC((unsigned int *)&v61);
  return 0;
}

uint64_t sub_22ED59868(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  char v45;
  int v46;
  int v47;
  unsigned __int16 v48;
  unsigned int v50[24];
  uint64_t *v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  char v55;
  void *__p;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60[13];

  v46 = a6;
  v47 = a4;
  v48 = a5;
  v11 = sub_22EE8156C((uint64_t)a1, a3, a2, a4, a5, a6, a7, a8);
  v51 = v11;
  v12 = *(uint64_t **)a3;
  v13 = **(_QWORD **)a3;
  if ((v13 & 7) != 0)
  {
    v14 = *((unsigned int *)v12 + 24);
    sub_22E8FCA40(a1, *((_DWORD *)v12 + 24), 0xE4Bu, 0, (uint64_t)v60);
    v55 = 0;
    v54 = 0;
    v57 = 0;
    v58 = 0;
    __p = 0;
    v59 = 0;
    v52 = v14 | (v14 << 32);
    v53 = 1;
    sub_22E890748((uint64_t)v60, &v52);
    if (SHIBYTE(v58) < 0)
      operator delete(__p);
    sub_22E903BEC((unsigned int *)v60);
    v13 = *v12;
  }
  if ((v13 & 0x18) != 0)
  {
    v15 = *((unsigned int *)v12 + 25);
    sub_22E8FCA40(a1, *((_DWORD *)v12 + 25), 0xE4Bu, 0, (uint64_t)v60);
    v55 = 0;
    v54 = 0;
    v57 = 0;
    v58 = 0;
    __p = 0;
    v59 = 0;
    v52 = v15 | (v15 << 32);
    v53 = 1;
    sub_22E890748((uint64_t)v60, &v52);
    if (SHIBYTE(v58) < 0)
      operator delete(__p);
    sub_22E903BEC((unsigned int *)v60);
    v13 = *v12;
  }
  if ((v13 & 0x300000000) != 0)
  {
    v16 = (v13 & 0x100000000) == 0;
    v17 = 164;
    if (v16)
      v17 = 184;
    v18 = *(unsigned int *)((char *)v12 + v17);
    sub_22E8FCA40(a1, v18, 0xE4Bu, 0, (uint64_t)v60);
    v55 = 0;
    v54 = 0;
    v57 = 0;
    v58 = 0;
    __p = 0;
    v59 = 0;
    v52 = v18 | (v18 << 32);
    v53 = 1;
    sub_22E890748((uint64_t)v60, &v52);
    if (SHIBYTE(v58) < 0)
      operator delete(__p);
    sub_22E903BEC((unsigned int *)v60);
    v13 = *v12;
  }
  if ((v13 & 0x6000000000) != 0)
  {
    v19 = *((unsigned int *)v12 + 49);
    sub_22E8FCA40(a1, *((_DWORD *)v12 + 49), 0xE4Bu, 0, (uint64_t)v60);
    v55 = 0;
    v54 = 0;
    v57 = 0;
    v58 = 0;
    __p = 0;
    v59 = 0;
    v52 = v19 | (v19 << 32);
    v53 = 1;
    sub_22E890748((uint64_t)v60, &v52);
    if (SHIBYTE(v58) < 0)
      operator delete(__p);
    sub_22E903BEC((unsigned int *)v60);
    v13 = *v12;
  }
  if ((v13 & 0x400000000) != 0)
  {
    v20 = *((unsigned int *)v12 + 42);
    sub_22E8FCA40(a1, *((_DWORD *)v12 + 42), 0xE4Bu, 0, (uint64_t)v60);
    v55 = 0;
    v54 = 0;
    v57 = 0;
    v58 = 0;
    __p = 0;
    v59 = 0;
    v52 = v20 | (v20 << 32);
    v53 = 1;
    sub_22E890748((uint64_t)v60, &v52);
    if (SHIBYTE(v58) < 0)
      operator delete(__p);
    sub_22E903BEC((unsigned int *)v60);
  }
  if (v12[2])
  {
    v21 = *((unsigned int *)v12 + 43);
    sub_22E8FCA40(a1, *((_DWORD *)v12 + 43), 0xE4Bu, 0, (uint64_t)v60);
    v55 = 0;
    v54 = 0;
    v57 = 0;
    v58 = 0;
    __p = 0;
    v59 = 0;
    v52 = v21 | (v21 << 32);
    v53 = 1;
    sub_22E890748((uint64_t)v60, &v52);
    if (SHIBYTE(v58) < 0)
      operator delete(__p);
    sub_22E903BEC((unsigned int *)v60);
  }
  if ((*((_BYTE *)v12 + 4) & 8) != 0)
  {
    v22 = *((unsigned int *)v12 + 44);
    sub_22E8FCA40(a1, *((_DWORD *)v12 + 44), 0xE4Bu, 0, (uint64_t)v60);
    v55 = 0;
    v54 = 0;
    v57 = 0;
    v58 = 0;
    __p = 0;
    v59 = 0;
    v52 = v22 | (v22 << 32);
    v53 = 1;
    sub_22E890748((uint64_t)v60, &v52);
    if (SHIBYTE(v58) < 0)
      operator delete(__p);
    sub_22E903BEC((unsigned int *)v60);
  }
  v23 = *(_QWORD *)(*v11 & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v60[0]) = 0;
  v24 = sub_22F110500((uint64_t)v60, v23);
  if (v24 && *(_QWORD *)(v24 + 24) <= 0xFuLL && (*(_BYTE *)(v24 + 17) & 4) == 0)
  {
    sub_22E8FCA40(a1, *(_DWORD *)(a3 + 64), 0x1901u, 0, (uint64_t)v60);
    v25 = *(_QWORD *)(*v11 & 0xFFFFFFFFFFFFFFF0);
    LOBYTE(v52) = 0;
    v26 = sub_22F110500((uint64_t)&v52, v25);
    if (v26)
    {
      if (*(_BYTE *)(v26 + 16) == 14)
        v27 = v26 & 0xFFFFFFFFFFFFFFF0;
      else
        v27 = 0;
    }
    else
    {
      v27 = 0;
    }
    v52 = v27;
    sub_22E8901B8((uint64_t)v60, (uint64_t *)&v52);
    sub_22E903BEC((unsigned int *)v60);
  }
  v28 = sub_22ED58F98(a1, &v51, *(_DWORD *)(a3 + 64));
  v29 = v28;
  if (v28 <= 0xF)
    v29 = *(_QWORD *)(*((_QWORD *)a1 + 11) + 16480);
  sub_22EA2DBEC(a1, a2, a3);
  if (*(_DWORD *)(a3 + 40))
    v30 = 0;
  else
    v30 = *(_QWORD *)(a3 + 48);
  v31 = *(_DWORD *)(a3 + 1684);
  v32 = *((_QWORD *)a1 + 11);
  v33 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*(_QWORD *)(v32 + 1960) + 80) + 72), *(_QWORD *)(*(_QWORD *)(v32 + 1960) + 80));
  if (v33)
    v34 = v33 + 40;
  else
    v34 = 0;
  v35 = v51;
  v36 = sub_22EFEB338(v32, v34, *(_DWORD *)(a3 + 72), *(_DWORD *)(a3 + 64), v47, v48, v30, v29, v31 != 0, (uint64_t)v51);
  *(_DWORD *)(v36 + 28) &= 0xFFFF9FFF;
  v60[0] = *v35;
  v60[1] = (uint64_t)(v35 + 1);
  sub_22F116CD8(v60);
  if (v37 && *(_QWORD *)(v37 + 40))
  {
    v45 = sub_22F345894(a1, v37, v38, v36, *(_DWORD *)(a3 + 1684));
    v39 = a7;
    if (v28 < 0x10 || (v45 & 1) != 0)
      goto LABEL_51;
  }
  else
  {
    v39 = a7;
    if (v28 <= 0xF)
LABEL_51:
      sub_22EFC77E8(v36, 1);
  }
  if (*(_BYTE *)(v36 + 80))
  {
    v42 = sub_22F3091B0((uint64_t)a1);
    if (v42)
    {
      v43 = v42;
      v44 = *(_DWORD *)(v42 + 1528);
      if (v44 >= *(_DWORD *)(v42 + 1532))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v44 = *(_DWORD *)(v43 + 1528);
      }
      *(_QWORD *)(*(_QWORD *)(v43 + 1520) + 8 * v44) = v36;
      ++*(_DWORD *)(v43 + 1528);
    }
  }
  if (v30)
  {
    sub_22ED58A10(a1, a2, *(_DWORD *)(a3 + 64), v30);
    sub_22E3BA850(a2 + 72, (const void *)v36);
    sub_22E8CE7E8((uint64_t)(a1 + 830), v36);
  }
  if (v39 && v31)
  {
    sub_22E8FCA40(a1, v46, 0x12EAu, 0, (uint64_t)v50);
    sub_22E903BEC(v50);
  }
  else if (v39 && (sub_22EE67384((uint64_t)a1, v39, 12) & 1) == 0)
  {
    v40 = sub_22ED59EA0((uint64_t)a1, v36, *(_QWORD *)(v36 + 48), v39, (uint64_t)v60, 0);
    if ((v40 & 1) != 0)
      sub_22EFC77E8(v36, 1);
    else
      *(_QWORD *)(v36 + 72) = v40 & 0xFFFFFFFFFFFFFFFCLL;
  }
  return v36;
}

uint64_t sub_22ED59EA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  unint64_t *v8;
  unint64_t v9;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v19;
  int v20;
  unint64_t *v21;
  unint64_t *v22;
  unsigned int v23;
  uint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  int v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  unint64_t *v47;
  unint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int8 *v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  __n128 v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  _BYTE *v99;
  unsigned int *v100;
  int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  __n128 v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  char v114;
  _BYTE *v115;
  unint64_t v116;
  char v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  unint64_t v122;
  int v123;
  void *v124;
  __int128 *v125;
  void **v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  void **v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  _BOOL4 v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  BOOL v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int v146;
  unsigned int v147;
  BOOL v148;
  unint64_t v149;
  unsigned int v150;
  unint64_t *v151;
  unsigned int v152;
  int v153;
  unsigned int v154;
  int v155;
  BOOL v156;
  int v157;
  unsigned int v158;
  BOOL v159;
  unint64_t v160;
  int v161;
  unsigned int v162;
  uint64_t v163;
  int v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  int v169;
  size_t v170;
  const void *v171;
  void **p_dst;
  int v173;
  size_t v174;
  void **v175;
  uint64_t v176;
  uint64_t v177;
  size_t v178;
  const void *v179;
  void **v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  size_t v188;
  void **v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  BOOL v196;
  BOOL v197;
  int v198;
  void *__src;
  void *__srca;
  void *__srcb;
  const void *v202;
  uint64_t v203;
  uint64_t v204;
  unsigned int v205[24];
  unsigned int v206[24];
  unsigned int v207[24];
  unsigned int v208[24];
  uint64_t v209;
  unint64_t v210;
  unsigned int v211;
  BOOL v212;
  _BYTE v213[96];
  _BYTE v214[96];
  unint64_t v215;
  unsigned int v216;
  BOOL v217;
  unint64_t v218;
  void *__dst;
  size_t v220;
  unint64_t v221;
  _BYTE v222[96];
  char v223;
  char v224;
  __int128 v225;
  unint64_t v226;
  int v227;
  uint64_t v228;
  __int16 v229;
  unint64_t v230;
  unint64_t v231;
  void **v232;
  size_t v233;
  unint64_t v234;
  _BYTE *v235;
  __int128 v236;
  _BYTE v237[24];
  int v238;
  char v239;
  uint64_t v240;
  uint64_t v241;

  v8 = (unint64_t *)a4;
  v9 = a3;
  v241 = *MEMORY[0x24BDAC8D0];
  v230 = a4;
  v231 = a3;
  sub_22F0D5A50(a4);
  v13 = v12;
  v14 = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v225) = 0;
  v15 = sub_22F110500((uint64_t)&v225, v14);
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 8) != 0)
  {
    v16 = v15;
    if (v15)
    {
      if (*(_QWORD *)(v15 + 24) <= 0xFuLL)
      {
        v17 = *(_DWORD *)(v15 + 16);
        if ((v17 & 0x400) == 0)
        {
          if (a6 == 1)
          {
            if ((v17 & 0x1800FF) == 0x8000E && (*(_DWORD *)v8 & 0x8000) != 0)
              goto LABEL_78;
            v203 = a5;
            v19 = *(_DWORD *)v8;
          }
          else
          {
            v203 = a5;
            v19 = *(unsigned __int8 *)v8;
          }
          v20 = *(_DWORD *)(a2 + 68);
          __dst = v8;
          v21 = v8;
          if (v19 == 213)
          {
            v21 = (unint64_t *)v8[3];
            __dst = v21;
          }
          v22 = sub_22EF579A8(*(_QWORD *)(a1 + 88), v9, *(_DWORD *)(a2 + 24));
          if (*(_BYTE *)(v16 + 16) == 15)
          {
            v227 = 0;
            LODWORD(v225) = 2;
            v226 = v9;
            *((_QWORD *)&v225 + 1) = 0;
            v228 = a2;
            v229 = 0;
            sub_22F0D5A50((uint64_t)v21);
            v24 = v23;
            if (v21)
            {
              sub_22F0D5A50((uint64_t)v21);
              v25 = (_BYTE *)((v24 << 32) | 2);
            }
            else
            {
              v25 = (_BYTE *)(((unint64_t)v23 << 32) | 3);
            }
            v235 = v25;
            *(_QWORD *)&v236 = v23 | ((unint64_t)v23 << 32);
            v232 = (void **)v21;
            v26 = sub_22EC4531C();
            v231 = v26;
            if (v26 < 0x10)
              return 1;
          }
          else
          {
            if (sub_22EDC7260((_QWORD *)a1, *v22, (uint64_t)(v22 + 1), (uint64_t *)&__dst, (uint64_t *)&v231, ((*(_QWORD *)&v20 & 0xFFFFFLL) + 1) | 0x100000000, 1) == 1)
            {
              sub_22EFF605C((uint64_t)v8);
              sub_22E8FCA40((_QWORD *)a1, v27, 0xFCEu, 0, (uint64_t)&v225);
              v235 = *(_BYTE **)(a2 + 40);
              v28 = sub_22E894538((uint64_t)&v225, (uint64_t *)&v235);
              v232 = *(void ***)(a2 + 48);
              v29 = sub_22E8901B8(v28, (uint64_t *)&v232);
              v215 = v8[1];
              v30 = sub_22E8901B8(v29, (uint64_t *)&v215);
              sub_22F0D4E74((uint64_t)v8);
              v210 = v31;
              sub_22E8906A0(v30, (uint64_t *)&v210);
              sub_22E903BEC((unsigned int *)&v225);
              v32 = (unsigned int *)&v224;
LABEL_25:
              sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a2 + 24), 0x17E2u, 0, (uint64_t)v32);
              v35 = v32;
LABEL_43:
              sub_22E903BEC(v35);
              return 1;
            }
            v26 = v231;
          }
          sub_22EFF605C((uint64_t)v8);
          v34 = sub_22ED5902C((_QWORD *)a1, v26, v33);
          v231 = v34;
          if (v34 < 0x10)
          {
            v32 = (unsigned int *)&v223;
            goto LABEL_25;
          }
          v9 = v34;
          a5 = v203;
        }
      }
    }
  }
  if (a6 != 1)
    goto LABEL_45;
  v36 = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v36 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
  {
    v40 = v8[1];
    if (*(_QWORD *)(*(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(*(_QWORD *)((v40 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
      goto LABEL_37;
    goto LABEL_45;
  }
  v37 = *(_DWORD *)(v36 + 16);
  if ((v37 & 0xFE) != 0x28)
  {
    v36 = sub_22F10CF48(v36);
    if (!v36)
    {
      v38 = (uint64_t *)&v231;
      goto LABEL_34;
    }
    v37 = *(_DWORD *)(v36 + 16);
  }
  if ((v37 & 0x100000) != 0)
  {
    do
    {
      v36 = *(_QWORD *)(*(_QWORD *)(v36 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (v36)
      {
        v195 = *(_DWORD *)(v36 + 16);
        if ((v195 & 0xFE) == 0x28)
          continue;
      }
      v36 = sub_22F10CF48(v36);
      v195 = *(_DWORD *)(v36 + 16);
    }
    while ((v195 & 0x100000) != 0);
  }
  v38 = (uint64_t *)(v36 + 32);
LABEL_34:
  v39 = *v38;
  v40 = v8[1];
  v9 = v231;
  if ((*(_QWORD *)((v39 & 0xFFFFFFFFFFFFFFF0) + 8) | v39 & 7) != (*(_QWORD *)((v40 & 0xFFFFFFFFFFFFFFF0) + 8) | v40 & 7))
  {
    v36 = *(_QWORD *)(v231 & 0xFFFFFFFFFFFFFFF0);
LABEL_37:
    if ((*(_BYTE *)(v36 + 17) & 4) != 0 || (*((_BYTE *)v8 + 1) & 0x80) != 0)
    {
      v41 = *(_QWORD *)(v40 & 0xFFFFFFFFFFFFFFF0);
      LOBYTE(v225) = 0;
      if (!sub_22F110500((uint64_t)&v225, v41))
      {
LABEL_78:
        *(_DWORD *)a5 = 7;
        *(_QWORD *)(a5 + 8) = v8;
        return (uint64_t)v8;
      }
    }
    sub_22E8FCA40((_QWORD *)a1, v13, 0xC72u, 0, (uint64_t)&v225);
    v235 = (_BYTE *)v8[1];
    v42 = sub_22E8901B8((uint64_t)&v225, (uint64_t *)&v235);
    v43 = *(_QWORD *)(v231 & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(v43 + 8) & 0xF) != 0)
      v43 = (unint64_t)sub_22F10D2BC(v231);
    __dst = (void *)(v43 & 0xFFFFFFFFFFFFFFF0);
    sub_22E8901B8(v42, (uint64_t *)&__dst);
    sub_22E903BEC((unsigned int *)&v225);
    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a2 + 24), 0x17E2u, 0, (uint64_t)v222);
    v35 = (unsigned int *)v222;
    goto LABEL_43;
  }
LABEL_45:
  v45 = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v45 + 17) & 4) != 0)
  {
    v46 = *(unsigned __int8 *)v8;
    goto LABEL_49;
  }
  if ((*(_DWORD *)v8 & 0xA000) == 0)
  {
    LODWORD(__dst) = 4;
    *(_QWORD *)&v225 = 0;
    LODWORD(v232) = 3;
    v235 = (_BYTE *)*(unsigned int *)(a1 + 1704);
    sub_22EB4DDB8(a1 + 3688, (int *)&__dst, (int *)&v235, (__int16 *)(a1 + 1693), (uint64_t *)&v225, (int *)&v232);
    v57 = *(unsigned int *)(a1 + 3696);
    v58 = v57 - 2;
    v59 = *(_QWORD *)(a1 + 3688);
    v60 = *(_DWORD *)(v59 + 576 * (v57 - 2));
    if (v60 == 5)
    {
      *(_BYTE *)(v59 + 576 * v57 - 4) = *(_BYTE *)(v59 + 576 * v58 + 572);
      v61 = 1;
    }
    else if (v60 == 2)
    {
      *(_BYTE *)(v59 + 576 * v57 - 4) = 1;
      v61 = *(_BYTE *)(v59 + 576 * v58 + 573) != 0;
    }
    else
    {
      v61 = 0;
      *(_BYTE *)(v59 + 576 * v57 - 4) = 0;
    }
    v62 = v59 + 576 * v57;
    *(_BYTE *)(v62 - 3) = v61;
    *(_WORD *)(a1 + 1693) = 0;
    if (*(_DWORD *)(a1 + 1848))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(a1 + 1776), (llvm::SmallPtrSetImplBase *)(v62 - 560));
      sub_22EAEAE08(a1 + 1840, (uint64_t *)(v62 - 496));
    }
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 8) == 0)
    {
      v63 = v231;
      v64 = *(_QWORD *)(v231 & 0xFFFFFFFFFFFFFFF0);
      v65 = *(_QWORD *)(v64 + 8) & 0xFFFFFFFFFFFFFFF0;
      v66 = *(_QWORD *)v65;
      v67 = *(_DWORD *)(*(_QWORD *)v65 + 16);
      if (*(_QWORD *)v65)
        v68 = v67 == 11;
      else
        v68 = 0;
      if (v68)
      {
        if (((*(_DWORD *)(*(_QWORD *)v65 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
          goto LABEL_91;
      }
      else
      {
        if (v66 && v67 == 44)
        {
          v69 = sub_22F114198(*(_QWORD *)(v66 + 24));
          if ((*(_BYTE *)(v69 + 74) & 1) == 0 && *(_QWORD *)(v69 + 128) <= 7uLL)
          {
            v63 = v231;
            v64 = *(_QWORD *)(v231 & 0xFFFFFFFFFFFFFFF0);
            v65 = *(_QWORD *)(v64 + 8) & 0xFFFFFFFFFFFFFFF0;
            goto LABEL_105;
          }
LABEL_91:
          if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 2) != 0)
          {
            LODWORD(v236) = 1;
            v235 = 0;
            BYTE4(v236) = 0;
            v81 = sub_22ED02FD4(a1, v8, v231, &v235, 2);
            v44 = v81;
            if ((v81 & 1) != 0)
            {
              v44 = 1;
            }
            else if ((*(_BYTE *)((v81 & 0xFFFFFFFFFFFFFFFELL) + 2) & 1) != 0)
            {
              *(_DWORD *)a5 = 7;
              *(_QWORD *)(a5 + 8) = v81 & 0xFFFFFFFFFFFFFFFELL;
            }
            else
            {
              v82 = v231;
              v83 = *(_QWORD *)(v231 & 0xFFFFFFFFFFFFFFF0);
              v84 = *(_QWORD *)(v83 + 8) & 0xFFFFFFFFFFFFFFF0;
              v85 = *(_QWORD *)v84;
              if (*(_QWORD *)v84 && *(_BYTE *)(v85 + 16) == 44)
              {
                v86 = sub_22F114198(*(_QWORD *)(v85 + 24));
                v82 = sub_22E496830(v86);
                v83 = *(_QWORD *)(v82 & 0xFFFFFFFFFFFFFFF0);
                v84 = *(_QWORD *)(v83 + 8) & 0xFFFFFFFFFFFFFFF0;
              }
              v87 = *(_QWORD *)(a1 + 88);
              if (*(_BYTE *)(*(_QWORD *)v84 + 16) == 9)
                sub_22EF6A330(v87, v82);
              else
                sub_22EF5CDF0(v87, v83);
              if (BYTE4(v236))
                llvm::APInt::zextOrTrunc((llvm::APInt *)&v235);
              else
                llvm::APInt::sextOrTrunc((llvm::APInt *)&v235);
              v113 = DWORD2(v225);
              v114 = BYTE4(v236);
              v115 = (_BYTE *)v225;
              if (v236 >= 0x41 && v235)
                MEMORY[0x2348A0E84](v235, 0x1000C8000313F17);
              v235 = v115;
              LODWORD(v236) = v113;
              BYTE4(v236) = v114;
              sub_22F0EEA4C((uint64_t)&v225, *(_QWORD *)(a1 + 88), &v235, v231 & 7 | *(_QWORD *)((v231 & 0xFFFFFFFFFFFFFFF0) + 8));
              *(_OWORD *)a5 = v225;
              *(_QWORD *)(a5 + 16) = v226;
            }
            if (v236 < 0x41)
              goto LABEL_281;
            v116 = (unint64_t)v235;
            if (!v235)
              goto LABEL_281;
LABEL_280:
            MEMORY[0x2348A0E84](v116, 0x1000C8000313F17);
            goto LABEL_281;
          }
          v76 = sub_22EB1A358(a1, v8, 0);
          if ((v76 & 1) != 0)
            goto LABEL_131;
          v44 = v76 & 0xFFFFFFFFFFFFFFFELL;
          v230 = v76 & 0xFFFFFFFFFFFFFFFELL;
          v77 = *(_QWORD *)((v76 & 0xFFFFFFFFFFFFFFFELL) + 8);
          v218 = v77;
          v216 = 1;
          v215 = 0;
          v217 = 0;
          v78 = v77 & 0xFFFFFFFFFFFFFFF0;
          v79 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v77 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
          v80 = *(_DWORD *)(v79 + 16);
          if (v79 && v80 == 11)
          {
            if (((*(_DWORD *)(v79 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
            {
LABEL_170:
              if ((*(_BYTE *)(v44 + 2) & 1) == 0)
              {
                BYTE8(v225) = 0;
                *(_QWORD *)&v225 = off_24FAB9298;
                v226 = v77;
                v44 = sub_22EB4CB24(a1, v44, &v215, &v225, 0) & 0xFFFFFFFFFFFFFFFELL;
                v230 = v44;
                if (!v44)
                  goto LABEL_146;
              }
              v107 = *(_QWORD *)v78;
              if ((*(_BYTE *)(*(_QWORD *)v78 + 8) & 0xF) != 0)
                v107 = (unint64_t)sub_22F10D2BC(v77);
              v218 = v107 & 0xFFFFFFFFFFFFFFF0;
              if ((v231 & 7 | *(_QWORD *)((v231 & 0xFFFFFFFFFFFFFFF0) + 8)) == *(_QWORD *)((v107 & 0xFFFFFFFFFFFFFFF0)
                                                                                            + 8))
              {
LABEL_207:
                if ((*(_BYTE *)(v44 + 2) & 1) != 0)
                {
                  *(_DWORD *)a5 = 7;
                  *(_QWORD *)(a5 + 8) = v44;
                  goto LABEL_278;
                }
                v131 = v231 & 0xFFFFFFFFFFFFFFF0;
                v132 = *(_QWORD *)((v231 & 0xFFFFFFFFFFFFFFF0) + 8);
                v133 = v231 & 7 | v132;
                v134 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v132 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
                if (v134 && *(_BYTE *)(v134 + 16) == 44)
                {
                  v135 = sub_22F114198(*(_QWORD *)(v134 + 24));
                  v136 = sub_22E496830(v135);
                  v133 = v136 & 7 | *(_QWORD *)((v136 & 0xFFFFFFFFFFFFFFF0) + 8);
                  v131 = v231 & 0xFFFFFFFFFFFFFFF0;
                }
                v137 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v131 + 8) & 0xFFFFFFFFFFFFFFF0);
                if (v137 && (*(_DWORD *)(v137 + 16) & 0xFF800FF) == 0x530000B)
                {
                  v138 = sub_22E508590((uint64_t)&v215, 0);
                  v139 = v216;
                  if (v216 > 0x40)
                  {
                    *(_QWORD *)v215 = v138;
                    bzero((void *)(v215 + 8), (((unint64_t)(v139 + 63) >> 3) - 8) & 0xFFFFFFF8);
                  }
                  else
                  {
                    if (v216)
                      v140 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v216;
                    else
                      LODWORD(v140) = 0;
                    v215 = v140 & v138;
                  }
                  v157 = sub_22EF5CDF0(*(_QWORD *)(a1 + 88), *(_QWORD *)(v133 & 0xFFFFFFFFFFFFFFF0));
                  if (v216 != v157)
                  {
                    if (v217)
                      llvm::APInt::zextOrTrunc((llvm::APInt *)&v215);
                    else
                      llvm::APInt::sextOrTrunc((llvm::APInt *)&v215);
                    v158 = DWORD2(v225);
                    v159 = v217;
                    v160 = v225;
                    if (v216 >= 0x41 && v215)
                      MEMORY[0x2348A0E84](v215, 0x1000C8000313F17);
                    v215 = v160;
                    v216 = v158;
                    v217 = v159;
                  }
                  v217 = !sub_22F110A40(*(_QWORD *)(v133 & 0xFFFFFFFFFFFFFFF0));
LABEL_275:
                  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v231 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                + 16) == 44)
                    v133 = *(_QWORD *)((v231 & 0xFFFFFFFFFFFFFFF0) + 8) | v231 & 7;
                  sub_22F0EEA4C((uint64_t)&v225, *(_QWORD *)(a1 + 88), &v215, v133);
                  *(_OWORD *)a5 = v225;
                  *(_QWORD *)(a5 + 16) = v226;
LABEL_278:
                  if (v216 < 0x41)
                    goto LABEL_281;
                  v116 = v215;
                  if (!v215)
                    goto LABEL_281;
                  goto LABEL_280;
                }
                v211 = v216;
                v204 = a5;
                if (v216 > 0x40)
                  llvm::APInt::initSlowCase((llvm::APInt *)&v210, (const llvm::APInt *)&v215);
                else
                  v210 = v215;
                v212 = v217;
                v143 = (uint64_t *)(v133 & 0xFFFFFFFFFFFFFFF0);
                v144 = *(_QWORD *)(v133 & 0xFFFFFFFFFFFFFFF0);
                v145 = *(_QWORD *)(a1 + 88);
                if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v144 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9)
                  v146 = sub_22EF6A330(v145, v133);
                else
                  v146 = sub_22EF5CDF0(v145, v144);
                if (v216 != v146)
                {
                  if (v217)
                    llvm::APInt::zextOrTrunc((llvm::APInt *)&v215);
                  else
                    llvm::APInt::sextOrTrunc((llvm::APInt *)&v215);
                  v147 = DWORD2(v225);
                  v148 = v217;
                  v149 = v225;
                  if (v216 >= 0x41 && v215)
                    MEMORY[0x2348A0E84](v215, 0x1000C8000313F17);
                  v215 = v149;
                  v216 = v147;
                  v217 = v148;
                }
                v217 = !sub_22F110A40(*v143);
                if (!sub_22F110C5C(*v143) || v212)
                  goto LABEL_245;
                v150 = v211 - 1;
                v151 = &v210;
                if (v211 >= 0x41)
                  v151 = (unint64_t *)(v210 + 8 * (v150 >> 6));
                if (((*v151 >> v150) & 1) == 0)
                {
LABEL_245:
                  if (sub_22F110C5C(*v143))
                  {
                    v152 = v211;
                    a5 = v204;
                    if (v211 > 0x40)
                      v153 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v210);
                    else
                      v153 = v211 + __clz(v210) - 64;
                    v162 = v152 - v153;
                  }
                  else
                  {
                    v154 = v211;
                    a5 = v204;
                    if (v212)
                    {
                      if (v211 > 0x40)
                        v155 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v210);
                      else
                        v155 = v211 + __clz(v210) - 64;
                    }
                    else
                    {
                      v155 = sub_22E99C40C((llvm::APInt *)&v210);
                    }
                    v162 = v154 - v155 + 1;
                  }
                  if (v162 <= v146)
                  {
LABEL_272:
                    if (v211 >= 0x41 && v210)
                      MEMORY[0x2348A0E84](v210, 0x1000C8000313F17);
                    goto LABEL_275;
                  }
                  sub_22F0D5A50(v44);
                  sub_22E8FCA40((_QWORD *)a1, v169, 0x1B7Fu, 0, (uint64_t)&v225);
                  v235 = v237;
                  v236 = xmmword_22F455490;
                  llvm::APInt::toString();
                  v170 = v236;
                  if ((unint64_t)v236 > 0x7FFFFFFFFFFFFFF7)
                    goto LABEL_343;
                  v171 = v235;
                  if ((unint64_t)v236 >= 0x17)
                  {
                    v176 = (v236 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if (((unint64_t)v236 | 7) != 0x17)
                      v176 = v236 | 7;
                    v177 = v176 + 1;
                    p_dst = (void **)operator new(v176 + 1);
                    v221 = v177 | 0x8000000000000000;
                    __dst = p_dst;
                    v220 = v170;
                  }
                  else
                  {
                    HIBYTE(v221) = v236;
                    p_dst = &__dst;
                    if (!(_QWORD)v236)
                    {
LABEL_298:
                      *((_BYTE *)p_dst + v170) = 0;
                      if (v235 != v237)
                        free(v235);
                      __srca = (void *)sub_22F2F3734((uint64_t)&v225, &__dst);
                      v235 = v237;
                      v236 = xmmword_22F455490;
                      llvm::APInt::toString();
                      v178 = v236;
                      if ((unint64_t)v236 <= 0x7FFFFFFFFFFFFFF7)
                      {
                        v179 = v235;
                        if ((unint64_t)v236 >= 0x17)
                        {
                          v181 = (v236 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if (((unint64_t)v236 | 7) != 0x17)
                            v181 = v236 | 7;
                          v182 = v181 + 1;
                          v180 = (void **)operator new(v181 + 1);
                          v233 = v178;
                          v234 = v182 | 0x8000000000000000;
                          v232 = v180;
                        }
                        else
                        {
                          HIBYTE(v234) = v236;
                          v180 = (void **)&v232;
                          if (!(_QWORD)v236)
                            goto LABEL_308;
                        }
                        memmove(v180, v179, v178);
LABEL_308:
                        *((_BYTE *)v180 + v178) = 0;
                        if (v235 != v237)
                          free(v235);
                        v183 = sub_22F2F3734((uint64_t)__srca, (void **)&v232);
                        v235 = *(_BYTE **)(a2 + 48);
                        v184 = sub_22E8901B8(v183, (uint64_t *)&v235);
                        v44 = v230;
                        sub_22F0D4E74(v230);
                        v209 = v185;
                        sub_22E8906A0(v184, &v209);
                        if (SHIBYTE(v234) < 0)
                          operator delete(v232);
                        if (SHIBYTE(v221) < 0)
                          operator delete(__dst);
                        sub_22E903BEC((unsigned int *)&v225);
                        sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a2 + 24), 0x17E2u, 0, (uint64_t)v207);
                        sub_22E903BEC(v207);
                        a5 = v204;
                        goto LABEL_272;
                      }
LABEL_343:
                      abort();
                    }
                  }
                  memmove(p_dst, v171, v170);
                  goto LABEL_298;
                }
                sub_22F0D5A50(v44);
                sub_22E8FCA40((_QWORD *)a1, v173, 0x1B7Eu, 0, (uint64_t)&v225);
                v235 = v237;
                v236 = xmmword_22F455490;
                llvm::APInt::toString();
                v174 = v236;
                if ((unint64_t)v236 > 0x7FFFFFFFFFFFFFF7)
                  goto LABEL_343;
                __src = v235;
                if ((unint64_t)v236 >= 0x17)
                {
                  v186 = (v236 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if (((unint64_t)v236 | 7) != 0x17)
                    v186 = v236 | 7;
                  v187 = v186 + 1;
                  v175 = (void **)operator new(v186 + 1);
                  v221 = v187 | 0x8000000000000000;
                  __dst = v175;
                  v220 = v174;
                }
                else
                {
                  HIBYTE(v221) = v236;
                  v175 = &__dst;
                  if (!(_QWORD)v236)
                  {
LABEL_319:
                    *((_BYTE *)v175 + v174) = 0;
                    if (v235 != v237)
                      free(v235);
                    __srcb = (void *)sub_22F2F3734((uint64_t)&v225, &__dst);
                    v235 = v237;
                    v236 = xmmword_22F455490;
                    llvm::APInt::toString();
                    v188 = v236;
                    if ((unint64_t)v236 > 0x7FFFFFFFFFFFFFF7)
                      goto LABEL_343;
                    v202 = v235;
                    if ((unint64_t)v236 >= 0x17)
                    {
                      v190 = (v236 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if (((unint64_t)v236 | 7) != 0x17)
                        v190 = v236 | 7;
                      v191 = v190 + 1;
                      v189 = (void **)operator new(v190 + 1);
                      v233 = v188;
                      v234 = v191 | 0x8000000000000000;
                      v232 = v189;
                    }
                    else
                    {
                      HIBYTE(v234) = v236;
                      v189 = (void **)&v232;
                      if (!(_QWORD)v236)
                        goto LABEL_329;
                    }
                    memmove(v189, v202, v188);
LABEL_329:
                    *((_BYTE *)v189 + v188) = 0;
                    if (v235 != v237)
                      free(v235);
                    v192 = sub_22F2F3734((uint64_t)__srcb, (void **)&v232);
                    v235 = *(_BYTE **)(a2 + 48);
                    v193 = sub_22E8901B8(v192, (uint64_t *)&v235);
                    v44 = v230;
                    sub_22F0D4E74(v230);
                    v209 = v194;
                    sub_22E8906A0(v193, &v209);
                    if (SHIBYTE(v234) < 0)
                      operator delete(v232);
                    if (SHIBYTE(v221) < 0)
                      operator delete(__dst);
                    sub_22E903BEC((unsigned int *)&v225);
                    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a2 + 24), 0x17E2u, 0, (uint64_t)v208);
                    sub_22E903BEC(v208);
                    goto LABEL_245;
                  }
                }
                memmove(v175, __src, v174);
                goto LABEL_319;
              }
              v108 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v231 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
              if (v108 && (*(_DWORD *)(v108 + 16) & 0xFF800FF) == 0x530000B)
              {
                v109 = a1;
                v110 = v44;
                v111 = v231;
                v112 = 31;
LABEL_206:
                v44 = sub_22E90092C(v109, v110, v111, v112, 0, 0) & 0xFFFFFFFFFFFFFFFELL;
                v230 = v44;
                goto LABEL_207;
              }
              v117 = sub_22ECFB0F0(a1, (unsigned __int8 *)v44, v107 & 0xFFFFFFFFFFFFFFF0, v231);
              v111 = v231;
              if ((v117 & 1) != 0
                || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v231 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                            + 16) != 44)
              {
                v109 = a1;
                v110 = v44;
                v112 = 30;
                goto LABEL_206;
              }
              sub_22F0D5A50(v44);
              sub_22E8FCA40((_QWORD *)a1, v118, 0x12BEu, 0, (uint64_t)&v225);
              v235 = *(_BYTE **)(v44 + 8);
              v119 = sub_22E8901B8((uint64_t)&v225, (uint64_t *)&v235);
              v120 = sub_22E8901B8(v119, (uint64_t *)&v231);
              sub_22F0D4E74(v44);
              __dst = v121;
              sub_22E8906A0(v120, (uint64_t *)&__dst);
              sub_22E903BEC((unsigned int *)&v225);
              sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a2 + 24), 0x17E2u, 0, (uint64_t)v213);
              v100 = (unsigned int *)v213;
LABEL_145:
              sub_22E903BEC(v100);
LABEL_146:
              v44 = 1;
              goto LABEL_278;
            }
          }
          else if (v79 && v80 == 44)
          {
            v96 = sub_22F114198(*(_QWORD *)(v79 + 24));
            if ((*(_BYTE *)(v96 + 74) & 1) != 0 || *(_QWORD *)(v96 + 128) > 7uLL)
              goto LABEL_170;
          }
          else if (v80 == 9)
          {
            goto LABEL_170;
          }
          sub_22F0D5A50(v44);
          sub_22E8FCA40((_QWORD *)a1, v97, 0x12C1u, 0, (uint64_t)&v225);
          v98 = sub_22E8901B8((uint64_t)&v225, (uint64_t *)&v218);
          sub_22F0D4E74(v44);
          v235 = v99;
          sub_22E8906A0(v98, (uint64_t *)&v235);
          sub_22E903BEC((unsigned int *)&v225);
          sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a2 + 24), 0x17E2u, 0, (uint64_t)v214);
          v100 = (unsigned int *)v214;
          goto LABEL_145;
        }
        if (v67 == 9)
          goto LABEL_91;
      }
LABEL_105:
      if (*(_BYTE *)(*(_QWORD *)v65 + 16) == 39)
      {
        if (*(_BYTE *)(v64 + 16) != 39)
        {
          v64 = sub_22F10CF48(v64);
          v63 = v231;
        }
        if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v64 + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                      + 8) & 0xFFFFFFFFFFFFFFF0)
                                              + 16)
           - 25 < 2)
          goto LABEL_125;
        v64 = *(_QWORD *)(v63 & 0xFFFFFFFFFFFFFFF0);
        v65 = *(_QWORD *)(v64 + 8) & 0xFFFFFFFFFFFFFFF0;
      }
      if ((*(_DWORD *)(*(_QWORD *)v65 + 16) & 0xFE) != 0x28)
      {
LABEL_121:
        if (*(_BYTE *)(*(_QWORD *)v65 + 16) == 31)
        {
          if (*(_BYTE *)(v64 + 16) != 31)
          {
            v64 = sub_22F10CF48(v64);
            v63 = v231;
          }
          if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v64 + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                        + 8) & 0xFFFFFFFFFFFFFFF0)
                                                + 16)
             - 25 < 2)
            goto LABEL_125;
          v64 = *(_QWORD *)(v63 & 0xFFFFFFFFFFFFFFF0);
          v65 = *(_QWORD *)(v64 + 8) & 0xFFFFFFFFFFFFFFF0;
        }
        v101 = *(unsigned __int8 *)(*(_QWORD *)v65 + 16);
        if (v101 == 39)
          goto LABEL_163;
        if ((*(_DWORD *)(v64 + 16) & 0xFE) == 0x28)
        {
LABEL_153:
          if (v8[1] == *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16840))
          {
            if ((*(_BYTE *)(v64 + 18) & 0x10) != 0)
            {
              do
              {
                v64 = *(_QWORD *)(*(_QWORD *)(v64 + 32) & 0xFFFFFFFFFFFFFFF0);
                if (v64)
                {
                  v102 = *(_DWORD *)(v64 + 16);
                  if ((v102 & 0xFE) == 0x28)
                    continue;
                }
                v64 = sub_22F10CF48(v64);
                v102 = *(_DWORD *)(v64 + 16);
              }
              while ((v102 & 0x100000) != 0);
            }
            v44 = 1;
            v103 = sub_22ED13340(a1, v8, *(_QWORD *)(v64 + 32), 1, &v225, 0);
            if (!v103)
              goto LABEL_281;
            v104 = v103;
            sub_22F0D5A50((uint64_t)v8);
            LODWORD(v235) = v105;
            v44 = 1;
            if ((sub_22EB17F48(a1, v104, &v235, 1, 0, 0, 0, 0) & 1) != 0)
              goto LABEL_281;
            v8 = (unint64_t *)sub_22ED147E8(a1, (unsigned __int8 *)v8, v225, v104, v106);
          }
          v63 = v231;
          goto LABEL_163;
        }
        if ((v101 & 0xFE) == 0x28)
        {
          v64 = sub_22F10CF48(v64);
          if (v64)
            goto LABEL_153;
          v63 = v231;
          v65 = *(_QWORD *)(*(_QWORD *)(v231 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0;
        }
        v141 = *(_QWORD *)v65;
        if (v141)
          v142 = (*(_DWORD *)(v141 + 16) & 0xFF800FF) == 114294795;
        else
          v142 = 0;
        if (!v142)
          goto LABEL_130;
        if ((*(_DWORD *)v8 & 0x18000) != 0)
          goto LABEL_227;
        v161 = sub_22ED6A394(a1, a2, v63, v8, 0);
        if (!v161)
        {
          sub_22EFF605C((uint64_t)v8);
          sub_22E8FCA40((_QWORD *)a1, v167, 0x12BEu, 0, (uint64_t)&v225);
          v235 = (_BYTE *)v8[1];
          v168 = sub_22E8901B8((uint64_t)&v225, (uint64_t *)&v235);
          sub_22E8901B8(v168, (uint64_t *)&v231);
          sub_22E903BEC((unsigned int *)&v225);
          sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a2 + 24), 0x17E2u, 0, (uint64_t)v206);
          sub_22E903BEC(v206);
          goto LABEL_131;
        }
        if (v161 != 1)
        {
          if (v161 == 2)
            goto LABEL_131;
          v63 = v231;
          goto LABEL_130;
        }
        sub_22EFF605C((uint64_t)v8);
        sub_22E8FCA40((_QWORD *)a1, v165, 0x1938u, 0, (uint64_t)v205);
        sub_22E903BEC(v205);
        v166 = v231 & 7 | *(_QWORD *)((v231 & 0xFFFFFFFFFFFFFFF0) + 8);
        *(_DWORD *)a5 = 3;
        *(_QWORD *)(a5 + 8) = v166;
LABEL_228:
        v44 = (unint64_t)v8;
        goto LABEL_281;
      }
      v88 = *(_DWORD *)(v64 + 16);
      if ((v88 & 0xFE) != 0x28)
      {
        v64 = sub_22F10CF48(v64);
        v88 = *(_DWORD *)(v64 + 16);
      }
      if ((v88 & 0x100000) != 0)
      {
        do
        {
          while (1)
          {
            v64 = *(_QWORD *)(*(_QWORD *)(v64 + 32) & 0xFFFFFFFFFFFFFFF0);
            if (!v64)
              break;
            v89 = *(_DWORD *)(v64 + 16);
            if ((v89 & 0xFE) != 0x28)
              break;
            if ((v89 & 0x100000) == 0)
              goto LABEL_119;
          }
          v64 = sub_22F10CF48(v64);
        }
        while ((*(_DWORD *)(v64 + 16) & 0x100000) != 0);
      }
LABEL_119:
      v63 = v231;
      if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v64 + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                    + 8) & 0xFFFFFFFFFFFFFFF0)
                                            + 16)
         - 25 >= 2)
      {
        v64 = *(_QWORD *)(v231 & 0xFFFFFFFFFFFFFFF0);
        v65 = *(_QWORD *)(v64 + 8) & 0xFFFFFFFFFFFFFFF0;
        goto LABEL_121;
      }
LABEL_125:
      if (v8[1] == *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16840))
      {
        v44 = 1;
        v90 = sub_22ED13340(a1, v8, v63, 1, &v225, 0);
        if (!v90)
          goto LABEL_281;
        v91 = v90;
        sub_22F0D5A50((uint64_t)v8);
        LODWORD(v235) = v92;
        v44 = 1;
        if ((sub_22EB17F48(a1, v91, &v235, 1, 0, 0, 0, 0) & 1) != 0)
          goto LABEL_281;
        v8 = (unint64_t *)sub_22ED147E8(a1, (unsigned __int8 *)v8, v225, v91, v93);
        v230 = (unint64_t)v8;
        v63 = v231;
      }
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v63 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) == 31)
      {
LABEL_130:
        if ((sub_22ED69E00(a1, a2, v63, (uint64_t *)&v230, a5) & 1) == 0)
        {
          v44 = v230;
          goto LABEL_281;
        }
LABEL_131:
        v44 = 1;
LABEL_281:
        sub_22EB48E64(a1);
        return v44;
      }
LABEL_163:
      if (sub_22ED68D38(a1, a2, v63, (unsigned __int8 *)v8, a5))
        v44 = 1;
      else
        v44 = (unint64_t)v8;
      goto LABEL_281;
    }
    v70 = v231;
    v71 = *(_QWORD *)((v231 & 0xFFFFFFFFFFFFFFF0) + 8);
    v72 = v231 & 7 | v71;
    v73 = sub_22EFFA6B0((unsigned __int8 *)v8);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v70 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45
      && *v73 == 161
      && *(_QWORD *)(v71 & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((*((_QWORD *)v73 + 1) & 0xFFFFFFFFFFFFFFF0)
                                                                          + 8) & 0xFFFFFFFFFFFFFFF0))
    {
      v94 = *((_QWORD *)v73 + 2);
      v95 = *(_DWORD *)(v94 + 28) & 0x7F;
      if (v94 && v95 == 72)
      {
        *(_DWORD *)a5 = 2;
        *(_QWORD *)(a5 + 8) = v72;
        *(_QWORD *)(a5 + 16) = v94;
        goto LABEL_228;
      }
      if (v95 == 59)
      {
LABEL_227:
        *(_DWORD *)a5 = 7;
        *(_QWORD *)(a5 + 8) = v8;
        goto LABEL_228;
      }
    }
    LODWORD(v235) = 0;
    v74 = sub_22ED02780(a1, v8, v70, &v235, 2, 0, a2);
    if ((v74 & 1) != 0)
      goto LABEL_89;
    v44 = v74 & 0xFFFFFFFFFFFFFFFELL;
    if ((*(_BYTE *)((v74 & 0xFFFFFFFFFFFFFFFELL) + 2) & 1) != 0)
    {
      *(_DWORD *)a5 = 7;
      *(_QWORD *)(a5 + 8) = v44;
      v44 = v74;
LABEL_133:
      v75 = v235;
LABEL_134:
      if (v75 >= 2)
        sub_22EF53BC0((uint64_t *)&v235);
      goto LABEL_281;
    }
    v75 = v235;
    switch((int)v235)
    {
      case 0:
        *(_DWORD *)a5 = 3;
        *(_QWORD *)(a5 + 8) = v72;
        goto LABEL_281;
      case 2:
        sub_22F0EEA4C((uint64_t)&v225, *(_QWORD *)(a1 + 88), &v236, v72);
        *(_OWORD *)a5 = v225;
        *(_QWORD *)(a5 + 16) = v226;
        goto LABEL_133;
      case 3:
      case 4:
      case 5:
      case 6:
      case 8:
      case 9:
        sub_22E8FCA40((_QWORD *)a1, v13, 0xFCCu, 0, (uint64_t)&v225);
        sub_22E8901B8((uint64_t)&v225, (uint64_t *)&v231);
        goto LABEL_88;
      case 7:
        v122 = v236 & 0xFFFFFFFFFFFFFFFCLL;
        if ((v236 & 3) != 0)
          v122 = 0;
        if ((v236 & 3) == 3)
        {
          if ((v236 & 4) != 0)
            v196 = (unint64_t)v236 > 7;
          else
            v196 = (v236 & 0x7FFFFFFF8) != 0;
          if (!v196)
            goto LABEL_352;
        }
        else if ((unint64_t)v236 < 4)
        {
          goto LABEL_352;
        }
        if (!v122 || (*(_DWORD *)(v122 + 28) & 0x7F) == 0x49 || (*(_DWORD *)(v122 + 28) & 0x7F) == 0xB)
        {
          sub_22F0D5A50((uint64_t)v8);
          sub_22E8FCA40((_QWORD *)a1, v123, 0x12BFu, 0, (uint64_t)&v225);
          sub_22F0D4E74((uint64_t)v8);
          __dst = v124;
          v125 = &v225;
          v126 = &__dst;
          goto LABEL_204;
        }
LABEL_352:
        if (v238 == -1)
          goto LABEL_370;
        if (v122 && v238 == 1)
        {
          v197 = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v122 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                            + 16) & 0xFEu)
               - 2 <= 3
              && v240 == 0;
          if (!v197
            || (v239 & 2) != 0
            || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v231 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                        + 16) != 39)
          {
            goto LABEL_370;
          }
        }
        else if (v238 || (v239 & 2) != 0)
        {
LABEL_370:
          sub_22E8FCA40((_QWORD *)a1, v13, 0xFCBu, 0, (uint64_t)&v225);
          sub_22EF55AB4((uint64_t)&v235, *(_QWORD *)(a1 + 88), v231, &__dst);
          sub_22F2F3734((uint64_t)&v225, &__dst);
          if (SHIBYTE(v221) < 0)
            operator delete(__dst);
LABEL_88:
          sub_22E903BEC((unsigned int *)&v225);
LABEL_89:
          v44 = 1;
          goto LABEL_133;
        }
        v156 = v122 == 0;
        goto LABEL_366;
      case 10:
      case 11:
        v163 = sub_22F36F5C8(*(_QWORD *)(a1 + 88), v72, (unsigned int *)&v235);
        *(_DWORD *)a5 = 2;
        *(_QWORD *)(a5 + 8) = v72;
        *(_QWORD *)(a5 + 16) = v163;
        goto LABEL_133;
      case 12:
        if (DWORD2(v236))
        {
          sub_22F0D5A50((uint64_t)v8);
          sub_22E8FCA40((_QWORD *)a1, v127, 0x12B4u, 0, (uint64_t)&v225);
          __dst = (void *)(v236 & 0xFFFFFFFFFFFFFFF8);
          v128 = sub_22E890024((uint64_t)&v225, (uint64_t *)&__dst);
          v129 = sub_22E8901B8(v128, (uint64_t *)&v231);
          sub_22F0D4E74((uint64_t)v8);
          v232 = v130;
          v126 = (void **)&v232;
          v125 = (__int128 *)v129;
LABEL_204:
          sub_22E8906A0((uint64_t)v125, (uint64_t *)v126);
          goto LABEL_88;
        }
        v122 = v236 & 0xFFFFFFFFFFFFFFF8;
        v156 = (v236 & 0xFFFFFFFFFFFFFFF8) == 0;
LABEL_366:
        if (v156)
          v198 = 3;
        else
          v198 = 2;
        *(_DWORD *)a5 = v198;
        *(_QWORD *)(a5 + 8) = v72;
        *(_QWORD *)(a5 + 16) = v122;
        goto LABEL_133;
      case 13:
        sub_22E8FCA40((_QWORD *)a1, v13, 0xFCAu, 0, (uint64_t)&v225);
        goto LABEL_88;
      default:
        goto LABEL_134;
    }
  }
  v46 = *(_DWORD *)v8;
LABEL_49:
  if (v46 == 213)
    v47 = v8;
  else
    v47 = 0;
  if (v47)
    v8 = (unint64_t *)v47[3];
  v48 = sub_22F1133DC((uint64_t *)&v231, *(_QWORD *)(a1 + 88));
  v49 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v45 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v49 == 40)
    v50 = 1;
  else
    v50 = 2 * (v49 == 41);
  v44 = 1;
  v51 = sub_22E90092C(a1, (uint64_t)v8, v48, 0, v50, 0);
  v52 = v51;
  if ((v51 & 1) == 0)
  {
    if (v47)
    {
      v53 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 32, 3);
      v44 = v53;
      LODWORD(v56) = *((_DWORD *)v47 + 5);
      v54 = (_DWORD)v56 != 0;
      v55 = (_DWORD)v56 != 0;
      LODWORD(v56) = v56 - 1;
      if (v55)
        v56 = v56;
      else
        v56 = 0;
      sub_22EDA4684(v53, *(_QWORD *)((v52 & 0xFFFFFFFFFFFFFFFELL) + 8), (_DWORD *)(v52 & 0xFFFFFFFFFFFFFFFELL), *((_DWORD *)v47 + 4), v56 | (v54 << 32));
    }
    else
    {
      v44 = v51;
    }
    *(_DWORD *)a5 = 7;
    *(_QWORD *)(a5 + 8) = v44 & 0xFFFFFFFFFFFFFFFELL;
  }
  return v44;
}

uint64_t sub_22ED5BAE0(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, int a8, unsigned __int16 a9, int a10, int a11, uint64_t a12)
{
  char v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  __int128 v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  unsigned int v40[24];
  _BYTE v41[24];
  _BYTE v42[80];

  v36 = a5;
  v19 = a5 != 0;
  v20 = a1[11];
  v21 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*(_QWORD *)(v20 + 1960) + 80) + 72), *(_QWORD *)(*(_QWORD *)(v20 + 1960) + 80));
  if (v21)
    v22 = v21 + 40;
  else
    v22 = 0;
  if (a7)
    v23 = a7;
  else
    v23 = a3;
  v24 = sub_22F3B8BD0(v20, v22, v23, a8, a9, v19, a6, a4);
  *(_DWORD *)(v24 + 28) &= 0xFFFF9FFF;
  if (*(_BYTE *)(v24 + 80))
  {
    v29 = sub_22F3091B0((uint64_t)a1);
    if (v29)
    {
      v30 = *(_DWORD *)(v29 + 1528);
      if (v30 >= *(_DWORD *)(v29 + 1532))
      {
        v35 = v29;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v29 = v35;
        v30 = *(_DWORD *)(v35 + 1528);
      }
      *(_QWORD *)(*(_QWORD *)(v29 + 1520) + 8 * v30) = v24;
      ++*(_DWORD *)(v29 + 1528);
    }
  }
  if (a6)
  {
    sub_22ED58A10(a1, a2, a7, a6);
    sub_22E3BA850(a2 + 72, (const void *)v24);
    sub_22E8CE7E8((uint64_t)(a1 + 415), v24);
  }
  if ((*(_DWORD *)(a4 + 12) & 0x1FFFFFFF) == 0)
  {
    sub_22E8FCA40(a1, *(_DWORD *)(v24 + 24), 0x12FEu, 0, (uint64_t)v41);
    *(_QWORD *)&v38 = *(_QWORD *)(a4 + 4);
    sub_22E8906A0((uint64_t)v41, (uint64_t *)&v38);
    sub_22E903BEC((unsigned int *)v41);
    sub_22EFC77E8(v24, 1);
  }
  if (v36 && *(_QWORD *)(a12 + 8))
  {
    sub_22E8FCA40(a1, a11, 0x12EAu, 0, (uint64_t)v40);
    sub_22E903BEC(v40);
    *(_DWORD *)v41 = 0;
    *(_OWORD *)&v41[8] = 0u;
    memset(v42, 0, 32);
    *(_OWORD *)a12 = *(_OWORD *)v41;
    *(_QWORD *)(a12 + 16) = 0;
    sub_22F0AB71C(a12 + 24, (uint64_t)v42);
    *(_QWORD *)(a12 + 48) = 0;
  }
  if (*(_QWORD *)(a12 + 8))
  {
    sub_22ED58328((uint64_t)a1, a12, (uint64_t)&v38);
    v25 = *((_QWORD *)&v38 + 1);
    if (*((_QWORD *)&v38 + 1) > 7uLL)
    {
      if ((v38 - 5) > 1)
        sub_22F0EFE08((uint64_t)&v38);
      else
        v31 = *(_DWORD *)((*((_QWORD *)&v39 + 1) & 0xFFFFFFFFFFFFFFFCLL) + 16);
      if ((sub_22F34AA58((uint64_t)a1, v31, v25, 12) & 1) == 0)
      {
        if ((_DWORD)v38)
        {
          v32 = sub_22E3CD3D4(a1[11] + 2032, 32, 3);
          v33 = v39;
          *(_OWORD *)v32 = v38;
          *(_OWORD *)(v32 + 16) = v33;
          v34 = v32 & 0xFFFFFFFFFFFFFFF9;
        }
        else
        {
          v34 = 0;
        }
        *(_QWORD *)(v24 + 72) = v34;
      }
    }
    else
    {
      if ((v38 - 5) > 1)
        sub_22F0EFE08((uint64_t)&v38);
      else
        v26 = *(_DWORD *)((*((_QWORD *)&v39 + 1) & 0xFFFFFFFFFFFFFFFCLL) + 16);
      sub_22E8FCA40(a1, v26, 0x12C4u, 0, (uint64_t)v41);
      sub_22F0EFE08((uint64_t)&v38);
      v37 = v27;
      sub_22E8906A0((uint64_t)v41, &v37);
      sub_22E903BEC((unsigned int *)v41);
    }
  }
  return v24;
}

_DWORD *sub_22ED5BDFC(_QWORD *a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9)
{
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v19[24];

  if (a3)
  {
    sub_22E8FCA40(a1, a3, 0x1B80u, 0, (uint64_t)v19);
    sub_22E903BEC(v19);
  }
  if (a7)
  {
    v15 = 8 * a7;
    v16 = (uint64_t *)a6;
    do
    {
      v17 = *v16++;
      sub_22EA04C04(a1, v17);
      v15 -= 8;
    }
    while (v15);
  }
  return sub_22EFE8F48(a1[11], a4, a5, a6, a7, a8, a9);
}

unint64_t sub_22ED5BEC0(unint64_t a1, uint64_t *a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, int *a10, int a11, int a12, int a13, int a14, int a15, int a16, unsigned int a17, const void *a18, uint64_t a19)
{
  uint64_t v25;
  _BOOL4 v27;
  unint64_t v28;
  _BOOL4 v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  BOOL v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  unint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  _BYTE *v58;
  unint64_t i;
  int v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  BOOL v69;
  uint64_t v70;
  _QWORD *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  unsigned int v79;
  BOOL v80;
  uint64_t v81;
  unint64_t v83;
  unsigned int *v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  _QWORD *v100;
  char v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  unint64_t v113;
  unsigned int v114;
  unsigned int v115;
  int v116;
  _BYTE v117[45];
  _BYTE v118[96];
  uint64_t v119;
  unsigned int v120[24];
  unsigned int v121[24];
  uint64_t v122;
  int v123;
  uint64_t v124;
  unint64_t v125[12];
  unint64_t v126;
  unsigned int v127[9];
  uint64_t v128;
  __int128 __dst;
  uint64_t v130;
  void *v131;
  uint64_t v132;
  _BYTE v133[64];
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  int v139;
  _QWORD v140[2];
  _BOOL4 v141;
  int v142;
  char v143;
  BOOL v144;
  char v145;
  int v146;
  uint64_t v147;

  v25 = (uint64_t)a2;
  v147 = *MEMORY[0x24BDAC8D0];
  v128 = a7;
  if ((sub_22ED5CF60((_QWORD *)a1, a2, a10) & 1) != 0)
    return 0;
  if (!a7)
  {
    sub_22E8FCA40((_QWORD *)a1, a5, 0x1300u, 0, (uint64_t)v127);
    sub_22E903BEC(v127);
    return 0;
  }
  v114 = dword_22F497FF8[a3 - 23];
  v126 = 0;
  v27 = (!*(_DWORD *)a6 || !*(_DWORD *)(a6 + 4)) && *(_QWORD *)(a6 + 8) == 0;
  v29 = a4 == 3 && v27;
  v30 = *(_QWORD *)(a1 + 216);
  v31 = *(_WORD *)(v30 + 8) & 0x7F;
  v32 = -40;
  if (v31 > 0x46)
  {
    if (v31 == 83)
      goto LABEL_28;
    if (v31 == 71)
    {
      v32 = -56;
      goto LABEL_28;
    }
    if (v31 != 81)
    {
LABEL_23:
      if (v31 - 52 < 6)
      {
        v32 = -72;
      }
      else
      {
        v32 = -48;
        if (v31 - 33 < 5)
          v32 = -64;
      }
    }
  }
  else
  {
    if (v31 > 0x18)
      goto LABEL_22;
    if (v31 == 16)
    {
LABEL_15:
      v32 = -48;
      goto LABEL_28;
    }
    if (((1 << v31) & 0x1066) == 0)
    {
      if (v31 == 24)
        goto LABEL_15;
LABEL_22:
      if (v31 == 70)
      {
        v32 = -64;
        goto LABEL_28;
      }
      goto LABEL_23;
    }
  }
LABEL_28:
  v115 = a5;
  v130 = 0;
  v131 = v133;
  v33 = sub_22EFB9D84(v30 + v32) == 0;
  v132 = 0x800000000;
  v116 = a8;
  v134 = 0;
  v135 = 0;
  v136 = 0;
  v137 = (_QWORD *)a1;
  v138 = a7;
  v139 = a8;
  sub_22EFC6D6C((uint64_t)v140, a7);
  v140[1] = 0;
  v141 = v29;
  v142 = 0;
  v143 = 1;
  v144 = v33;
  v145 = 1;
  v146 = 0;
  sub_22EC56024((uint64_t)&v130);
  v34 = (_QWORD *)(a6 + 8);
  if (*(_QWORD *)(a6 + 8))
  {
    v35 = sub_22E958204(a1, a6, 1);
    v126 = v35;
    if (!v35)
    {
      if (a4 == 3)
        v44 = 7041;
      else
        v44 = 4848;
      sub_22E8FCA40((_QWORD *)a1, a8, v44, 0, (uint64_t)v125);
      v119 = *(_QWORD *)(a6 + 8);
      v45 = sub_22EA02390((uint64_t)v125, &v119);
      *(_QWORD *)&__dst = *(_QWORD *)a6;
      sub_22E8906A0(v45, (uint64_t *)&__dst);
      sub_22E903BEC((unsigned int *)v125);
      goto LABEL_42;
    }
    if ((sub_22E958490((_QWORD *)a1, a6, v35) & 1) != 0)
    {
LABEL_48:
      v28 = 0;
      goto LABEL_49;
    }
    if (sub_22EFC7ADC(v126))
    {
      v36 = v126;
      v37 = *(_QWORD *)(a1 + 216);
      v112 = *(_QWORD *)(a1 + 3200);
      *(_QWORD *)(a1 + 3200) = 0;
      v38 = *(_QWORD *)(a1 + 10288);
      v39 = *(_DWORD *)(a1 + 1944);
      v40 = *(_DWORD *)(a1 + 2192);
      *(_QWORD *)(a1 + 216) = v36;
      *(_QWORD *)(a1 + 10288) = 0;
      *(_DWORD *)(a1 + 1944) = *(_DWORD *)(a1 + 1904);
      *(_DWORD *)(a1 + 2192) = *(_DWORD *)(a1 + 1960);
      v41 = sub_22ED5D0E4((_QWORD *)a1, (uint64_t)a10);
      if (v37)
      {
        *(_QWORD *)(a1 + 216) = v37;
        *(_QWORD *)(a1 + 3200) = v112;
        *(_QWORD *)(a1 + 10288) = v38;
        *(_DWORD *)(a1 + 1944) = v39;
        *(_DWORD *)(a1 + 2192) = v40;
      }
      v42 = v41;
    }
    else
    {
      v42 = 0;
      if (a4 && a4 != 3)
      {
        sub_22EA14220(a1, a6, v126, v128, a8, 0);
        v42 = 0;
      }
    }
    sub_22EC611AC(a1, (uint64_t)&v130, v126, 0);
  }
  else
  {
    v43 = *(_QWORD *)(a1 + 216);
    v126 = v43;
    if (a4 != 3)
    {
      v122 = v128;
      v123 = a8;
      sub_22EFC6D6C((uint64_t)&v124, v128);
      if ((sub_22EA14140((_QWORD *)a1, v43, (uint64_t)&v122) & 1) != 0)
        goto LABEL_48;
    }
    sub_22EC63520(a1, (uint64_t)&v130, (_QWORD *)v25, 0, 0);
    v42 = 0;
  }
  if ((_DWORD)v130 == 5)
    goto LABEL_48;
  if (!(_DWORD)v132)
  {
LABEL_86:
    v47 = 0;
    goto LABEL_87;
  }
  v47 = *(_QWORD *)v131 & 0xFFFFFFFFFFFFFFFCLL;
  v48 = *(_DWORD *)(v47 + 28) & 0x7F;
  if (v48 <= 0x2F && ((1 << v48) & 0xC00000060000) != 0)
  {
    v49 = sub_22EFBAEA4(*(_QWORD *)v131 & 0xFFFFFFFFFFFFFFFCLL);
    v47 = v49;
    if (!v49)
    {
LABEL_87:
      v113 = 0;
      goto LABEL_88;
    }
    v48 = *(_DWORD *)(v49 + 28) & 0x7F;
  }
  if (v48 > 31)
  {
    if (v48 != 32 && v48 != 59 && v48 != 38)
      goto LABEL_70;
    sub_22F34553C(a1, v116, v47);
    goto LABEL_86;
  }
  if (v48 != 28)
  {
LABEL_70:
    if ((v48 - 35) <= 2 && sub_22EFC3A88(v47))
    {
      v50 = *(_QWORD *)(v47 + 16);
      v51 = (_QWORD *)(v50 & 0xFFFFFFFFFFFFFFF8);
      if ((v50 & 4) != 0)
        v51 = (_QWORD *)*v51;
      v47 = (uint64_t)(v51 - 8);
      if (v51)
        v52 = v51 - 8;
      else
        v52 = 0;
      v53 = v52[17];
      if ((v53 & 4) == 0)
      {
        v113 = v53 & 0xFFFFFFFFFFFFFFF8;
        if ((v53 & 0xFFFFFFFFFFFFFFF8) != 0)
          goto LABEL_88;
      }
      if ((*((_DWORD *)v52 + 7) & 0x7E) == 0x24)
      {
        v54 = v52[19];
        v113 = v54 & 0xFFFFFFFFFFFFFFF8;
        if ((v54 & 4) != 0 && (v54 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          do
          {
            v55 = *(_QWORD *)(*(_QWORD *)v113 + 152);
            v113 = v55 & 0xFFFFFFFFFFFFFFF8;
          }
          while ((v55 & 4) != 0 && (v55 & 0xFFFFFFFFFFFFFFF8) != 0);
        }
        goto LABEL_88;
      }
    }
    goto LABEL_87;
  }
  v113 = v47;
LABEL_88:
  v111 = (uint64_t *)(a6 + 8);
  if (a4 != 3)
  {
    if (!v47)
      goto LABEL_147;
    if ((sub_22E8CE620(a1 + 3320, (_QWORD *)(*(_QWORD *)v131 & 0xFFFFFFFFFFFFFFFCLL), v126, (uint64_t *)v25, *v34 != 0) & 1) != 0)goto LABEL_112;
    v56 = 0;
    v113 = 0;
    v57 = 0;
    v58 = (_BYTE *)a19;
LABEL_174:
    if (*v111 && v126 && (*(_WORD *)(v126 + 8) & 0x7Eu) - 34 <= 3 && (sub_22EFC7ADC(v126) & 1) != 0)
      v89 = 3;
    else
      v89 = 4 * (a4 == 3);
    v42 |= sub_22ED5D528((_QWORD *)a1, (uint64_t)a10, v57, v89, v58);
    goto LABEL_181;
  }
  if (*v34)
  {
    if (v47)
      goto LABEL_112;
    goto LABEL_147;
  }
  for (i = *(_QWORD *)(a1 + 216); ; i = sub_22EFCB77C(i))
  {
    v60 = *(_WORD *)(i + 8) & 0x7F;
    if (v60 == 16 || v60 == 83)
      break;
  }
  if (v47)
  {
    v61 = *(_QWORD *)(v47 + 16);
    v62 = (unint64_t *)(v61 & 0xFFFFFFFFFFFFFFF8);
    v63 = v61 & 0xFFFFFFFFFFFFFFF8;
    if ((v61 & 4) != 0)
      v63 = *v62;
    if (v63)
    {
      v64 = sub_22EFCC008(i);
      if (v64 == sub_22EFCC008(v63))
      {
LABEL_109:
        v66 = *(_QWORD *)(v47 + 16);
        v67 = (_QWORD *)(v66 & 0xFFFFFFFFFFFFFFF8);
        if ((v66 & 4) != 0)
          v67 = (_QWORD *)*v67;
        v126 = (unint64_t)v67;
        goto LABEL_112;
      }
      v65 = *(_QWORD *)(v47 + 16) & 4;
      v62 = (unint64_t *)(*(_QWORD *)(v47 + 16) & 0xFFFFFFFFFFFFFFF8);
    }
    else
    {
      v65 = *(_QWORD *)(v47 + 16) & 4;
    }
    if (v65)
      v62 = (unint64_t *)*v62;
    if (sub_22EFCBE78(i, (unint64_t)v62))
      goto LABEL_109;
  }
  v126 = i;
  sub_22F30C4D4((uint64_t)&v130, 0);
  v76 = v126;
  v58 = (_BYTE *)a19;
  while (1)
  {
    v77 = *(_WORD *)(v76 + 8) & 0x7F;
    if (v77 != 33)
      break;
    if ((*(_BYTE *)(v76 + 12) & 0x80) != 0)
      goto LABEL_140;
LABEL_139:
    v76 = sub_22EFCB77C(v76);
  }
  if (v77 == 12 || v77 == 5)
    goto LABEL_139;
LABEL_140:
  sub_22EC611AC(a1, (uint64_t)&v130, v76, 0);
  if ((_DWORD)v130 == 5)
    goto LABEL_48;
  if (!(_DWORD)v132)
    goto LABEL_129;
  v47 = *(_QWORD *)v131 & 0xFFFFFFFFFFFFFFFCLL;
  v79 = *(_DWORD *)(v47 + 28) & 0x7F;
  v80 = v79 > 0x2F;
  v81 = (1 << v79) & 0xC00000060000;
  if (v80 || v81 == 0)
  {
    v113 = 0;
  }
  else
  {
    v47 = sub_22EFBAEA4(*(_QWORD *)v131 & 0xFFFFFFFFFFFFFFFCLL);
    v113 = 0;
    if (!v47)
      goto LABEL_147;
  }
LABEL_112:
  v68 = *(_QWORD *)v131 & 0xFFFFFFFFFFFFFFFCLL;
  if (!v68
    || (*(_DWORD *)(v68 + 28) & 0x7E) != 0x2E
    || (*(_DWORD *)(a6 + 4) ? (v69 = *(_DWORD *)a6 == 0) : (v69 = 1), !v69 || *(_QWORD *)(a6 + 8)))
  {
LABEL_147:
    if (!v113)
    {
      if (v47)
      {
        sub_22E8FCA40((_QWORD *)a1, v116, 0x1215u, 0, (uint64_t)v125);
        sub_22E8BAE44((uint64_t)v125, &v128);
        sub_22E903BEC((unsigned int *)v125);
        sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v47 + 24), 0x6Du, 0, (uint64_t)v117);
        v84 = (unsigned int *)v117;
LABEL_161:
        sub_22E903BEC(v84);
        goto LABEL_48;
      }
      v56 = 0;
      v113 = 0;
LABEL_163:
      v58 = (_BYTE *)a19;
      goto LABEL_164;
    }
    goto LABEL_148;
  }
  if (v113)
  {
    v70 = *(_QWORD *)(v113 + 16);
    v71 = (_QWORD *)(v70 & 0xFFFFFFFFFFFFFFF8);
    if ((v70 & 4) != 0)
      v71 = (_QWORD *)*v71;
    v72 = sub_22EFCBB30((unint64_t)v71);
    v73 = sub_22EFCBB30(v126);
    if (v73)
    {
      v74 = v73;
      v75 = sub_22EFCC008(v72);
      if (v75 == sub_22EFCC008(v74))
      {
LABEL_148:
        if (a4 == 3 && (sub_22EFC7ADC(*(_QWORD *)(a1 + 216)) & 1) != 0
          || sub_22ED5D218((_QWORD *)a1, (uint64_t)a10, *(_QWORD *)(v113 + 56), 1, 0, 0))
        {
          v83 = *(_QWORD *)(v113 + 48);
          if ((sub_22EA33594(a1, v83, v114, a4 == 2, v115, v128) & 1) == 0)
          {
            sub_22E8FCA40((_QWORD *)a1, v115, 0x13E0u, 0, (uint64_t)v125);
            sub_22E8BAE44((uint64_t)v125, &v128);
            __asm { BR              X11 }
          }
          if (a4 == 2)
          {
            v85 = sub_22EFC3500(v83);
            if (!v85)
            {
              v58 = (_BYTE *)a19;
              goto LABEL_173;
            }
            v86 = v85;
            v119 = 0;
            v58 = (_BYTE *)a19;
            if (a19 && (sub_22EE8B858(a1, v85, (unint64_t *)&v119, 0) & 1) == 0)
            {
              *(_BYTE *)a19 = 1;
              *(_QWORD *)(a19 + 8) = v86;
              v87 = *(_QWORD *)(v119 + 136);
              if ((v87 & 4) != 0)
                v88 = 0;
              else
                v88 = v87 & 0xFFFFFFFFFFFFFFF8;
              sub_22EC61DA0(a1, v119);
              sub_22EC61DA0(a1, v88);
              goto LABEL_173;
            }
            sub_22E8FCA40((_QWORD *)a1, v116, 0x1214u, 0, (uint64_t)v125);
            sub_22E8BAE44((uint64_t)v125, &v128);
            sub_22E903BEC((unsigned int *)v125);
            sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v86 + 24), 0x6Du, 0, (uint64_t)v118);
            v84 = (unsigned int *)v118;
            goto LABEL_161;
          }
          v56 = 1;
          goto LABEL_163;
        }
LABEL_42:
        v28 = 0;
        goto LABEL_49;
      }
    }
  }
  sub_22E8FCA40((_QWORD *)a1, v115, 0x13E4u, 0, (uint64_t)v121);
  sub_22E903BEC(v121);
  sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(*(_QWORD *)(v68 + 64) + 24), 0x1812u, 0, (uint64_t)v120);
  sub_22E903BEC(v120);
  v58 = (_BYTE *)a19;
  do
    v68 = *(_QWORD *)(v68 + 72);
  while (v68 && (*(_DWORD *)(v68 + 28) & 0x7E) == 0x2E);
  sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v68 + 24), 0x180Fu, 0, (uint64_t)v125);
  LODWORD(v119) = 0;
  sub_22E8900C4((uint64_t)v125, (int *)&v119);
  sub_22E903BEC((unsigned int *)v125);
LABEL_129:
  v56 = 0;
  v113 = 0;
LABEL_164:
  if (a4 != 3 || (sub_22EFC7ADC(*(_QWORD *)(a1 + 216)) & 1) == 0)
  {
    if (!v56)
    {
      v57 = 0;
      goto LABEL_174;
    }
LABEL_173:
    v57 = *(_QWORD *)(sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v113 + 72) + 64), *(_QWORD *)(v113 + 72)) + 56);
    v56 = 1;
    goto LABEL_174;
  }
LABEL_181:
  if (*v111 && (v56 & 1) == 0 && (v42 & 1) == 0)
  {
    if (a4 == 3)
      v90 = 3506;
    else
      v90 = 3765;
    sub_22E8FCA40((_QWORD *)a1, v116, v90, 0, (uint64_t)v125);
    v91 = sub_22E8BAE44((uint64_t)v125, &v128);
    v92 = sub_22E894FB4(v91, (uint64_t *)&v126);
    v42 = 1;
    LOBYTE(__dst) = 1;
    v93 = sub_22E894E38(v92, (unsigned __int8 *)&__dst);
    v119 = *(_QWORD *)a6;
    sub_22E8906A0(v93, &v119);
    sub_22E903BEC((unsigned int *)v125);
  }
  if (a4 == 3)
    v94 = sub_22EFC7ADC(*(_QWORD *)(a1 + 216));
  else
    v94 = 0;
  v95 = 0;
  if (v56 && (v94 & 1) == 0)
    v95 = *(_QWORD *)(v113 + 48);
  v96 = sub_22EFCF6C0(*(_QWORD *)(a1 + 88), v114, v126, v115, v116, v128, v95, 1);
  if (*v111)
  {
    v106 = sub_22F0ABC50(v111, *(_QWORD *)(a1 + 88));
    sub_22F3AC930(v96, v106, v107);
  }
  if (a17)
    sub_22EFC35F8(v96, *(_QWORD *)(a1 + 88), a18, a17);
  if (a4 == 2 && (!a19 || !*(_BYTE *)a19))
  {
    sub_22E90D4A4(a1, v96);
    sub_22E90D614(a1, v96);
  }
  v97 = sub_22EFE9D6C(*(_QWORD *)(a1 + 88), v126, v116, v128, (uint64_t)a10, v96);
  v28 = v97;
  if ((v94 & 1) == 0)
    sub_22EA0F280((unint64_t *)(v97 + 64), v113);
  *(_QWORD *)(v96 + 136) = v28 & 0xFFFFFFFFFFFFFFFBLL;
  if (a13)
  {
    v98 = *(_QWORD *)(v28 + 8);
    if ((v98 & 6) != 0)
      *(_QWORD *)(v28 + 8) = v98 | 6;
  }
  v99 = sub_22EFEAD74(v28);
  sub_22EF64558(*(_QWORD *)(a1 + 88), v96, v99);
  if (v56 && *(_QWORD *)sub_22EFE9368(v113) >= 8uLL)
  {
    v100 = (_QWORD *)sub_22EFE9368(v113);
    *v100 |= 4uLL;
  }
  if (a4 == 3)
    v101 = 1;
  else
    v101 = v42;
  if ((v101 & 1) == 0)
  {
    v102 = *(_QWORD *)(v28 + 16);
    v103 = v102 & 0xFFFFFFFFFFFFFFF8;
    if ((v102 & 4) != 0)
      v103 = *(_QWORD *)v103;
    if ((*(_WORD *)(v103 + 8) & 0x7Eu) - 34 <= 3)
      sub_22F30A07C((_QWORD *)a1, v28, v113, a11);
  }
  sub_22EFC80C4(v96, *(_QWORD *)(a1 + 216));
  sub_22EFC80C4(v28, *(_QWORD *)(a1 + 216));
  if (a4 == 2 && (!a19 || !*(_BYTE *)a19))
    sub_22EFC3340(v96);
  sub_22EA63DD8((_QWORD *)a1, v25, v96, a9, 1);
  sub_22E9114FC((_QWORD *)a1, v96);
  if (v56)
    sub_22EA084D0(a1, v96, *(_BYTE **)(v113 + 48), 1);
  sub_22E910734(a1, v96);
  sub_22E90DAEC(a1, v96);
  if (a4 == 3)
  {
    if (v56 && ((*(_DWORD *)(v113 + 28) >> 13) & 3) != 3)
    {
      *(_DWORD *)(v28 + 28) = *(_DWORD *)(v28 + 28) & 0xFFFF9FFF | (((*(_DWORD *)(v113 + 28) >> 13) & 3) << 13);
      *(_DWORD *)(v96 + 28) = *(_DWORD *)(v96 + 28) & 0xFFFF9FFF | (((*(_DWORD *)(v113 + 28) >> 13) & 3) << 13);
    }
    sub_22EA22164((_DWORD *)v28, 0);
    if ((sub_22EFC7ADC(*(_QWORD *)(a1 + 216)) & 1) == 0)
    {
      v108 = sub_22EFCBB30(v126);
      sub_22EFCE90C(v108, v28);
      v109 = sub_22F31D1A0((_QWORD *)v25, v108);
      if (v109)
        sub_22EA0483C(a1, v28, v109, 0);
    }
    v104 = sub_22EFD9CC8(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 216), *(_DWORD *)(v96 + 24), v28 & 0xFFFFFFFFFFFFFFFBLL, a15, 0, 0);
    *(_DWORD *)(v104 + 28) &= 0xFFFF9FFF;
    sub_22EFCCFA0(*(_QWORD *)(a1 + 216), v104);
    v105 = a19;
  }
  else
  {
    if ((*(_BYTE *)(v25 + 8) & 0x80) != 0)
    {
      v105 = a19;
      do
        v25 = *(_QWORD *)v25;
      while ((*(_BYTE *)(v25 + 8) & 0x80) != 0);
    }
    else
    {
      v105 = a19;
    }
    sub_22EA0483C(a1, v28, (uint64_t *)v25, 1);
  }
  if (v56)
  {
    sub_22F31D1E8((_QWORD *)a1, v28, v113);
    if (v42)
    {
LABEL_237:
      sub_22EFC77E8(v28, 1);
      sub_22EFC77E8(v96, 1);
    }
  }
  else if (v42)
  {
    goto LABEL_237;
  }
  v125[0] = v28;
  sub_22EA2DB10(a1, v125, 1uLL);
  if (v105 && *(_BYTE *)v105)
    v28 = *(_QWORD *)(v105 + 8);
LABEL_49:
  if ((_BYTE)v146)
  {
    if ((_DWORD)v130 == 5)
    {
      sub_22EC64D18(v137, (uint64_t)&v130);
    }
    else if (v135 && (*(_DWORD *)(v137[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v137, (uint64_t)&v130);
    }
  }
  if (v134)
  {
    v110 = sub_22EC6CBD0(v134);
    MEMORY[0x2348A0E9C](v110, 0x10E0C409F09D3C3);
  }
  if (v131 != v133)
    free(v131);
  return v28;
}

void sub_22ED5CF38()
{
  JUMPOUT(0x22ED5C870);
}

void sub_22ED5CF4C()
{
  JUMPOUT(0x22ED5C870);
}

uint64_t sub_22ED5CF60(_QWORD *a1, uint64_t *a2, int *a3)
{
  int i;
  unint64_t v6;
  unint64_t v7;
  _BOOL8 v8;
  int v9;
  int v10;
  _QWORD *v11;
  unsigned int v12;
  unint64_t v14;
  unsigned int v15[24];
  unint64_t v16;
  unsigned int v17[24];

  if (!a2)
    return 0;
  for (i = *((_DWORD *)a2 + 2); (i & 0x88) != 8; i = *((_DWORD *)a2 + 2))
    a2 = (uint64_t *)*a2;
  v6 = a2[45];
  if (!v6)
    goto LABEL_11;
  if (sub_22EFCBD94(a2[45], 1))
  {
    sub_22E8FCA40(a1, *a3, 0x12D9u, 0, (uint64_t)v17);
    v16 = *a3 | ((unint64_t)a3[2] << 32);
    sub_22E8906A0((uint64_t)v17, (uint64_t *)&v16);
    sub_22E903BEC(v17);
    v14 = sub_22F3B1340(v6);
    if (v14)
    {
      sub_22E8FCA40(a1, *(_DWORD *)(v14 + 72), 0x15F3u, 0, (uint64_t)v15);
      sub_22E903BEC(v15);
    }
    return 1;
  }
  else
  {
    v7 = sub_22EFCBB30(v6);
    if (!v7)
    {
LABEL_11:
      v10 = *a3;
      v11 = a1;
      v12 = 4836;
LABEL_12:
      sub_22E8FCA40(v11, v10, v12, 0, (uint64_t)v17);
      v16 = *a3 | ((unint64_t)a3[2] << 32);
      v8 = *(_BYTE *)(sub_22E8906A0((uint64_t)v17, (uint64_t *)&v16) + 80) != 0;
      sub_22E903BEC(v17);
      return v8;
    }
    v8 = 0;
    v9 = *(_WORD *)(v7 + 8) & 0x7F;
    if (v9 != 16 && v9 != 83)
    {
      if ((v9 - 38) < 0xFFFFFFFD)
        goto LABEL_11;
      if (sub_22EA3DA94(v7 - 64))
      {
        v10 = *a3;
        v11 = a1;
        v12 = 4817;
        goto LABEL_12;
      }
      return 0;
    }
  }
  return v8;
}

uint64_t sub_22ED5D0E4(_QWORD *a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t *i;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v16;

  v2 = *(_DWORD *)(a2 + 12);
  v3 = v2 & 0x1FFFFFFF;
  if ((v2 & 0x1FFFFFFF) == 0)
    return 0;
  for (i = (uint64_t *)(a2 + 16); ; ++i)
  {
    v6 = *i;
    if ((*(_DWORD *)(*i + 28) & 0x7F) == 0x26)
      goto LABEL_20;
    if ((*(_DWORD *)(*i + 28) & 0x7F) != 0x20)
      break;
    if ((sub_22ED5D0E4(a1, *(_QWORD *)(v6 + 56)) & 1) != 0)
      return 1;
LABEL_20:
    if (!--v3)
      return 0;
  }
  v7 = *(_QWORD *)(v6 + 56);
  v8 = (uint64_t *)(v7 & 0xFFFFFFFFFFFFFFF8);
  if ((v7 & 4) != 0)
    v8 = (uint64_t *)v8[4];
  v9 = sub_22ED722D8((uint64_t)a1, v8, *(_DWORD *)(v6 + 24), *(_QWORD *)(v6 + 40));
  if (v9)
  {
    v10 = (uint64_t *)v9;
    v11 = *(_QWORD *)(*v9 & 0xFFFFFFFFFFFFFFF0);
    v16 = 0;
    v12 = sub_22F110500((uint64_t)&v16, v11);
    if (v12 && *(_QWORD *)(v12 + 24) <= 0xFuLL && (*(_BYTE *)(v12 + 17) & 4) == 0)
      v10 = (uint64_t *)sub_22F347308(a1, v10);
    v13 = *(_QWORD *)(v6 + 56);
    v14 = v13 & 0xFFFFFFFFFFFFFFF8;
    if ((v13 & 4) != 0)
    {
      if (v10 == *(uint64_t **)(v14 + 32))
        goto LABEL_20;
      *(_QWORD *)(v14 + 32) = v10;
    }
    else
    {
      if (v10 == (uint64_t *)v14)
        goto LABEL_20;
      *(_QWORD *)(v6 + 56) = (unint64_t)v10 & 0xFFFFFFFFFFFFFFFBLL;
    }
    *(_QWORD *)(v6 + 48) = *v10;
    goto LABEL_20;
  }
  return 1;
}

BOOL sub_22ED5D218(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  _BOOL8 result;
  _QWORD *v21;
  int *v22;
  int *v23;
  int v24;
  int v25;
  unsigned __int8 *v26;
  int v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v34[5];
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (**v39)();
  void **v40;
  char v41;
  uint64_t v42;
  void *v43[2];
  _BYTE v44[128];
  void *v45[2];
  _QWORD v46[18];

  v46[16] = *MEMORY[0x24BDAC8D0];
  v37 = a3;
  v38 = a2;
  v11 = *(_DWORD *)(a3 + 12) & 0x1FFFFFFF;
  v12 = *(_DWORD *)(a2 + 12) & 0x1FFFFFFF;
  if (a5 != 2 && (_DWORD)v11 != (_DWORD)v12)
  {
    if (!(_DWORD)a4)
      return 0;
    v13 = a6;
    goto LABEL_20;
  }
  v14 = a2 + 16 + 8 * v12;
  v32 = a3 + 16;
  v31 = a2 + 16;
  v15 = (uint64_t *)(a2 + 16);
  if ((_DWORD)v11)
  {
    v17 = (uint64_t *)(a2 + 16);
    v18 = (uint64_t *)(a3 + 16);
    v19 = (uint64_t *)(v32 + 8 * v11);
    do
    {
      if (a5 == 2 && sub_22EFC7864(*v18))
      {
        v15 = (uint64_t *)v14;
        if (v17 != (uint64_t *)v14)
        {
          while (1)
          {
            result = sub_22ED6AE3C(a1, *v17, *v18, a4, 2u, a6);
            if (!result)
              return result;
            if (++v17 == (uint64_t *)v14)
            {
              v15 = (uint64_t *)v14;
              break;
            }
          }
        }
      }
      else
      {
        if (v17 == (uint64_t *)v14)
        {
          if (!(_DWORD)a4)
            return 0;
          v21 = a1;
          v22 = (int *)a2;
          v23 = (int *)a3;
          v24 = a5;
          v13 = a6;
LABEL_21:
          sub_22ED6AD1C(v21, v22, v23, v24, v13);
          return 0;
        }
        result = sub_22ED6AE3C(a1, *v17, *v18, a4, a5, a6);
        if (!result)
          return result;
        v15 = v17 + 1;
      }
      ++v18;
      v17 = v15;
    }
    while (v18 != v19);
  }
  if (v15 != (uint64_t *)v14)
  {
    if (!(_DWORD)a4)
      return 0;
    v13 = a6;
LABEL_20:
    v21 = a1;
    v22 = (int *)a2;
    v23 = (int *)a3;
    v24 = a5;
    goto LABEL_21;
  }
  if (a5 != 2)
  {
    v25 = *(_DWORD *)(a2 + 12);
    if ((v25 & 0x40000000) != 0)
      v26 = *(unsigned __int8 **)(v31 + 8 * (v25 & 0x1FFFFFFF));
    else
      v26 = 0;
    v36 = v26;
    v27 = *(_DWORD *)(a3 + 12);
    if ((v27 & 0x40000000) != 0)
      v28 = *(unsigned __int8 **)(v32 + 8 * (v27 & 0x1FFFFFFF));
    else
      v28 = 0;
    v34[0] = a1;
    v34[1] = &v36;
    v34[2] = &v38;
    v34[3] = &v35;
    v34[4] = &v37;
    v35 = v28;
    if ((v26 == 0) == (v28 != 0))
    {
      if ((_DWORD)a4)
        sub_22ED6B33C((uint64_t)v34);
      return 0;
    }
    if (v26)
    {
      v45[0] = v46;
      v45[1] = (void *)0x2000000000;
      v43[1] = (void *)0x2000000000;
      v29 = a1[11];
      v41 = 1;
      v39 = &off_24FAC6E70;
      v40 = v45;
      v42 = v29;
      v43[0] = v44;
      sub_22F0E9FEC(&v39, v28);
      v30 = a1[11];
      v41 = 1;
      v39 = &off_24FAC6E70;
      v40 = v43;
      v42 = v30;
      sub_22F0E9FEC(&v39, v36);
      if ((llvm::FoldingSetNodeID::operator==() & 1) == 0)
      {
        if ((_DWORD)a4)
          sub_22ED6B33C((uint64_t)v34);
        if (v43[0] != v44)
          free(v43[0]);
        if (v45[0] != v46)
          free(v45[0]);
        return 0;
      }
      if (v43[0] != v44)
        free(v43[0]);
      if (v45[0] != v46)
        free(v45[0]);
    }
  }
  return 1;
}

uint64_t sub_22ED5D528(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t *v9;
  uint64_t v10;
  _BOOL8 v11;
  unint64_t *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v34;
  unint64_t v35;
  int v36;
  unint64_t *v37;
  _QWORD *v38;
  unint64_t v39;
  int *v40;
  int v41;
  int v42;
  BOOL v43;
  int *v44;
  int v45;
  unint64_t v46;
  int v47;
  int v48;
  int *v49;
  int v50;
  int v51;
  int *v52;
  int v53;
  int v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  char v63;
  _BOOL8 v64;
  uint64_t v65;
  int v67;
  char v68;
  unint64_t *v69;
  char v70;
  unsigned int v71[24];
  unsigned int v72[24];
  unsigned int v73[24];
  unsigned int v74[24];
  unsigned int v75[24];
  uint64_t v76[3];

  v5 = *(_DWORD *)(a2 + 12) & 0x1FFFFFFF;
  if (!(_DWORD)v5)
    return v5 & 1;
  v7 = a3;
  v70 = 0;
  v68 = 0;
  v63 = 0;
  v67 = 0;
  v9 = (uint64_t *)(a2 + 16);
  v10 = a2 + 16 + 8 * v5;
  v11 = a3 != 0;
  if (a3)
    v12 = (unint64_t *)(a3 + 16);
  else
    v12 = (unint64_t *)(a2 + 16 + 8 * v5);
  v60 = a2 + 16;
  v64 = a3 != 0;
  v65 = a2 + 16 + 8 * v5;
  do
  {
    v13 = *v9;
    v14 = *(_DWORD *)(*v9 + 28) & 0x7F;
    if (*v9 && v14 == 38)
    {
      v16 = (_QWORD *)(v13 + 72);
      v15 = *(_QWORD *)(v13 + 72);
      if (v15 < 8)
        goto LABEL_83;
      v69 = v12;
      v17 = (uint64_t)a1;
      v18 = a4;
      v19 = v15 & 0xFFFFFFFFFFFFFFF8;
      if ((*(_QWORD *)(v13 + 72) & 6) != 2)
        v19 = 0;
      if (!v19)
        v19 = *v9;
      v20 = *(_QWORD *)(v19 + 72);
      v21 = (uint64_t *)(v20 & 0xFFFFFFFFFFFFFFF8);
      if ((v20 & 6) == 4 && v21 != 0)
        v21 = (uint64_t *)v21[1];
      v23 = *v21;
      v76[0] = v23;
      v76[1] = (uint64_t)(v21 + 1);
      v24 = v23;
      while (1)
      {
        if ((v24 & 0xF) != 0)
          goto LABEL_29;
        v25 = *(unsigned __int8 *)(*(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v25 > 0x39)
        {
LABEL_24:
          if (sub_22F115668(v24))
            v23 = v24;
          v24 = sub_22F115B7C(v24);
          if (!v24)
            goto LABEL_81;
        }
        else
        {
          if (v25 == 24)
            goto LABEL_80;
          if (v25 == 26)
          {
            if ((*(_BYTE *)(v24 + 23) & 0x10) != 0)
            {
LABEL_80:
              v23 = v24;
LABEL_81:
              sub_22F115668(v23);
              sub_22F1167E8(v76);
              a1 = (_QWORD *)v17;
              a4 = v18;
              sub_22ED5F1D4(v17, v18);
              v10 = v65;
              v7 = a3;
              v11 = v64;
              v12 = v69;
              if (v45)
                *v16 = 0;
LABEL_83:
              if (v7)
              {
                if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 48) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                               + 8) & 0xFFFFFFFFFFFFFFF0)
                                                       + 8) & 0xFFFFFFFFFFFFFFF0)
                               + 33) & 0x80) == 0)
                {
                  v46 = *v12;
                  if (!*v12)
                    goto LABEL_94;
                  if (!sub_22EC624F8((uint64_t)a1, *v12, 0) || *v16 < 8uLL || a5 && *a5)
                  {
                    if (*(_QWORD *)(v46 + 72) >= 8uLL)
                    {
                      sub_22E7B5028((unint64_t *)(v13 + 72), a1[11], v46);
                      v36 = sub_22EFEB0E0(v46);
                      goto LABEL_92;
                    }
LABEL_94:
                    if (*v16 >= 8uLL)
                    {
                      v42 = sub_22EFEB0E0(v13);
LABEL_96:
                      v67 = v42;
LABEL_97:
                      v68 = 1;
                      goto LABEL_107;
                    }
LABEL_104:
                    if ((_DWORD)a4 == 2 || (v68 & 1) == 0)
                      goto LABEL_107;
                    sub_22E8FCA40(a1, *(_DWORD *)(*v9 + 24), 0x12E5u, 0, (uint64_t)v72);
                    sub_22E903BEC(v72);
                    sub_22E8FCA40(a1, v67, 0x17E4u, 0, (uint64_t)v71);
                    sub_22E903BEC(v71);
                    v68 = 1;
                    v63 = 1;
LABEL_106:
                    v70 = 1;
                    goto LABEL_107;
                  }
                  v37 = v12;
                  v47 = sub_22EFEB0E0(v46);
                  v48 = sub_22EFEB0E0(v13);
LABEL_111:
                  v67 = v48;
                  sub_22E8FCA40(a1, v48, 0x12E6u, 0, (uint64_t)v74);
                  sub_22E903BEC(v74);
                  sub_22E8FCA40(a1, v47, 0x17E4u, 0, (uint64_t)v73);
                  sub_22E903BEC(v73);
                  v68 = 1;
                  v70 = 1;
LABEL_112:
                  v12 = v37;
                  goto LABEL_107;
                }
              }
              else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 48) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                                  + 8) & 0xFFFFFFFFFFFFFFF0)
                                                          + 8) & 0xFFFFFFFFFFFFFFF0)
                                  + 33) & 0x80) == 0)
              {
                goto LABEL_94;
              }
              v41 = 1;
LABEL_99:
              if (!v41 || v9 + 1 == (uint64_t *)v10 || a4 > 7 || ((1 << a4) & 0x83) == 0)
                goto LABEL_107;
              sub_22E8FCA40(a1, *(_DWORD *)(*v9 + 24), 0x12EBu, 0, (uint64_t)v75);
              sub_22E903BEC(v75);
              goto LABEL_106;
            }
          }
          else if (((1 << v25) & 0x20000000200003CLL) == 0)
          {
            goto LABEL_24;
          }
LABEL_29:
          v24 = sub_22F115B7C(v24);
        }
      }
    }
    if (v13 && v14 == 59)
    {
      if (*(_BYTE *)(v13 + 80))
        goto LABEL_36;
      v26 = *(_QWORD *)(v13 + 56);
      v27 = (unint64_t *)(v26 & 0xFFFFFFFFFFFFFFF8);
      if ((v26 & 4) != 0)
        v27 = (unint64_t *)v27[4];
      if ((sub_22EE67290((uint64_t)a1, *(_DWORD *)(v13 + 24), v27, 13) & 1) == 0)
      {
LABEL_36:
        v29 = (_QWORD *)(v13 + 72);
        v28 = *(_QWORD *)(v13 + 72);
        if (v28 >= 4)
        {
          v30 = v28 & 0xFFFFFFFFFFFFFFFCLL;
          if ((*(_QWORD *)(v13 + 72) & 3) != 1)
            v30 = 0;
          if (!v30)
            v30 = v13;
          v31 = *(_QWORD *)(v30 + 72);
          v32 = v31 & 0xFFFFFFFFFFFFFFFCLL;
          if ((v31 & 3) == 2 && v32 != 0)
            v32 = *(_QWORD *)(v32 + 8);
          sub_22F0D4E74(v32);
          sub_22ED5F1D4((uint64_t)a1, a4);
          if (v34)
            *v29 = 0;
        }
        if (v7)
        {
          if (!*(_BYTE *)(v13 + 80))
          {
            v35 = *v12;
            if (*v12)
            {
              if (sub_22EC624F8((uint64_t)a1, *v12, 0) && *v29 >= 4uLL && (!a5 || !*a5))
              {
                v37 = v12;
                sub_22F3B8B68(v35);
                v47 = v51;
                sub_22F3B8B68(v13);
                goto LABEL_111;
              }
              if (*(_QWORD *)(v35 + 72) >= 4uLL)
              {
                sub_22E7B50AC((unint64_t *)(v13 + 72), a1[11], v35);
                sub_22F3B8B68(v35);
                goto LABEL_92;
              }
            }
LABEL_72:
            if (*v29 >= 4uLL)
            {
              sub_22F3B8B68(v13);
              goto LABEL_96;
            }
            goto LABEL_104;
          }
        }
        else if (!*(_BYTE *)(v13 + 80))
        {
          goto LABEL_72;
        }
        v41 = !sub_22ED5F298(v13);
        goto LABEL_99;
      }
LABEL_58:
      v70 = 1;
      goto LABEL_108;
    }
    if ((sub_22ED5F300((uint64_t)a1, *v9) & 1) != 0)
      goto LABEL_58;
    v37 = v12;
    v38 = (_QWORD *)(v13 + 72);
    if (*(_QWORD *)(v13 + 72) >= 8uLL)
    {
      v49 = sub_22F259350(v13);
      sub_22F0EFE08((uint64_t)v49);
      sub_22ED5F1D4((uint64_t)a1, a4);
      if (v50)
        *v38 = 0;
    }
    if (v7)
    {
      if (*(_BYTE *)(v13 + 80))
        goto LABEL_75;
      v39 = *v37;
      if (*v37)
      {
        if (sub_22EC624F8((uint64_t)a1, *v37, 0) && *v38 >= 8uLL && (!a5 || !*a5))
        {
          v52 = sub_22F259350(v39);
          if ((*v52 - 5) > 1)
          {
            sub_22F0EFE08((uint64_t)v52);
            v47 = v54;
          }
          else
          {
            v47 = *(_DWORD *)((*((_QWORD *)v52 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 16);
          }
          v55 = sub_22F259350(v13);
          if ((*v55 - 5) > 1)
            sub_22F0EFE08((uint64_t)v55);
          else
            v48 = *(_DWORD *)((*((_QWORD *)v55 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 16);
          goto LABEL_111;
        }
        if (*(_QWORD *)(v39 + 72) >= 8uLL)
        {
          sub_22F2C3480((unint64_t *)(v13 + 72), a1[11], v39);
          v40 = sub_22F259350(v39);
          if ((*v40 - 5) > 1)
          {
            sub_22F0EFE08((uint64_t)v40);
            v67 = v53;
          }
          else
          {
            v67 = *(_DWORD *)((*((_QWORD *)v40 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 16);
          }
          goto LABEL_112;
        }
      }
    }
    else if (*(_BYTE *)(v13 + 80))
    {
LABEL_75:
      v41 = sub_22EFE8EE4(*(_QWORD *)(v13 + 56)) ^ 1;
      v12 = v37;
      goto LABEL_99;
    }
    v43 = *v38 >= 8uLL;
    v12 = v37;
    if (!v43)
      goto LABEL_104;
    v44 = sub_22F259350(v13);
    if ((*v44 - 5) <= 1)
    {
      v67 = *(_DWORD *)((*((_QWORD *)v44 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 16);
      goto LABEL_97;
    }
    sub_22F0EFE08((uint64_t)v44);
    v68 = 1;
LABEL_92:
    v67 = v36;
LABEL_107:
    v12 += v11;
LABEL_108:
    ++v9;
  }
  while (v9 != (uint64_t *)v10);
  if ((v63 & 1) != 0)
  {
    v56 = *(_DWORD *)(a2 + 12) & 0x1FFFFFFF;
    if ((_DWORD)v56)
    {
      v57 = 8 * v56;
      v58 = v60;
      do
      {
        *(_QWORD *)(*(_QWORD *)v58 + 72) = 0;
        v58 += 8;
        v57 -= 8;
      }
      while (v57);
    }
  }
  LOBYTE(v5) = v70;
  return v5 & 1;
}

uint64_t sub_22ED5DCD0(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  char v24;
  uint64_t *v25;
  unint64_t v26;
  BOOL v27;
  _DWORD *v28;
  int v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t i;
  uint64_t v48;
  int *v49;
  _QWORD **v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  int v54;
  unint64_t v55;
  int *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  int v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  _DWORD *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t *v95;
  int v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t *v99;
  int v100;
  int v101;
  unint64_t v102;
  int v103;
  char v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unsigned int v110;
  int v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unsigned int v116;
  uint64_t v117;
  unsigned int v118;
  BOOL v119;
  uint64_t v120;
  unsigned int *v121;
  unsigned int v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  unint64_t v127;
  BOOL v128;
  int *v129;
  unint64_t *v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _DWORD *v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unsigned int v139;
  unint64_t v140;
  uint64_t v141;
  _DWORD *v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  size_t v149;
  unsigned __int32 v150;
  _QWORD *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int *v156;
  int v157;
  int v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void **v163;
  unint64_t v164;
  uint64_t *v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  int64x2_t v171;
  int *v172;
  unint64_t v173;
  int *v174;
  _DWORD *v175;
  uint64_t *v176;
  uint64_t *v177;
  int v178;
  _DWORD *v179;
  int32x2_t v180;
  char v181;
  uint64_t v182;
  _QWORD *v183;
  _QWORD *v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  void *v189;
  uint64_t v190;
  _BYTE v191[32];
  void *v192;
  uint64_t v193;
  _BYTE v194[64];
  _QWORD *v195;
  int64x2_t v196;
  _QWORD v197[5];
  void *v198;
  uint64_t v199;
  void *v200;
  uint64_t v201;
  int v202;
  char v203;
  _QWORD *v204[3];
  __int128 v205;
  __int128 v206;
  __int128 v207;
  int v208;
  void **v209;
  uint64_t v210;
  uint64_t v211;
  llvm *v212;
  unsigned int v213;
  void *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  __int16 v218;
  uint64_t v219;
  void *v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t *v223;
  uint64_t v224;
  _QWORD v225[6];

  v4 = a2;
  v225[4] = *MEMORY[0x24BDAC8D0];
  v6 = a2[6];
  v7 = *(_QWORD *)(v6 + 128);
  if (v7
    || (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v6 + 104) + 96), *(_QWORD *)(v6 + 104)),
        (v7 = *(_QWORD *)(v6 + 128)) != 0))
  {
    v8 = *(_QWORD *)(v7 + 88);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 136);
      v10 = (v9 & 4) != 0 ? 0 : v9 & 0xFFFFFFFFFFFFFFF8;
      if (v10)
        v4 = (_QWORD *)v10;
    }
  }
  v11 = v4[2];
  v12 = (_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF8);
  if ((v11 & 4) != 0)
    v12 = (_QWORD *)*v12;
  result = sub_22EFC7ADC((unint64_t)v12);
  if ((result & 1) != 0)
    return result;
  v182 = a1;
  v183 = v4;
  v14 = v4[2];
  v15 = (_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF8);
  if ((v14 & 4) != 0)
    v15 = (_QWORD *)*v15;
  v16 = v4[6];
  v184 = v15;
  v185 = v16;
  v17 = sub_22F3AE65C((_QWORD *)(*(_QWORD *)(a1 + 88) + 15224), (uint64_t)v4);
  v186 = v17;
  v18 = *(_QWORD *)(v16 + 48);
  v19 = v18 ? v18 & 0xFFFFFFFFFFFFFFF0 : sub_22EF6462C(*(_QWORD *)(a1 + 88), v16);
  v187 = v19;
  v188 = *(_DWORD *)(v4[7] + 12) & 0x1FFFFFFF;
  result = sub_22EE8B180(a1, a3);
  if ((result & 1) != 0)
    return result;
  result = sub_22EFCE144((unint64_t)v12, v17);
  if (result)
  {
    while (1)
    {
      v21 = result & 0xFFFFFFFFFFFFFFF8;
      if ((result & 4) == 0 || !v21)
        break;
      if ((*(_BYTE *)(*(_QWORD *)v21 + 29) & 2) != 0)
        return result;
      result = *(_QWORD *)(v21 + 8);
      if (!result)
        goto LABEL_26;
    }
    if ((*(_BYTE *)(v21 + 29) & 2) != 0)
      return result;
  }
LABEL_26:
  v22 = *(_DWORD *)(a1 + 11992);
  *(_DWORD *)(a1 + 11992) = -1;
  sub_22EE00E90(&v180, a1, 0, a3, 0, (uint64_t)v4, 0, v20, 0, 0, 0);
  if (v181)
    goto LABEL_286;
  v23 = sub_22EC66BE4(a1, v16);
  if (!v23)
    goto LABEL_284;
  v178 = v22;
  v24 = 0;
  v25 = &v222;
  v171 = vdupq_n_s64(0x20uLL);
  while (2)
  {
    v26 = v23 & 0xFFFFFFFFFFFFFFF8;
    v27 = (v23 & 0xFFFFFFFFFFFFFFF8) == 0 || (v23 & 4) == 0;
    v28 = (_DWORD *)(v23 & 0xFFFFFFFFFFFFFFF8);
    if (!v27)
      v28 = *(_DWORD **)v26;
    v29 = v28[7];
    if ((v29 & 0x7Fu) <= 0x2F && ((1 << (v29 & 0x7F)) & 0xC00000060000) != 0)
    {
      v28 = (_DWORD *)sub_22EFBAEA4((uint64_t)v28);
      v29 = v28[7];
    }
    if ((v29 & 0x280) != 0)
    {
LABEL_69:
      if (v27)
        break;
      goto LABEL_70;
    }
    v31 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v28 + 32))(v28);
    if ((*(_DWORD *)(v31 + 28) & 0x7F) == 0x1D)
      v32 = v31;
    else
      v32 = 0;
    if (v32)
    {
      v33 = *(_QWORD *)(v32 + 48);
      if (!v33 || (*(_DWORD *)(v33 + 28) & 0x7F) != 0x37)
        goto LABEL_69;
    }
    else
    {
      if ((*(_DWORD *)(v31 + 28) & 0x7F) != 0x37)
        goto LABEL_69;
      v33 = v31;
      v34 = *(_QWORD *)(v31 + 144) & 0xFFFFFFFFFFFFFFF8;
      v35 = (*(_QWORD *)(v31 + 144) & 6) != 4 || v34 == 0;
      if (!v35 && *(_QWORD *)(v34 + 16) > 7uLL)
        goto LABEL_69;
    }
    v36 = *(_QWORD *)(v33 + 120);
    v37 = *(_QWORD *)(v33 + 48) & 0xFFFFFFFFFFFFFFF0;
    v38 = *(_QWORD *)v37;
    if (*(_QWORD *)v37)
      v39 = *(_BYTE *)(*(_QWORD *)v37 + 16) == 26;
    else
      v39 = 0;
    v40 = *(_QWORD *)(v33 + 120);
    if (!v39)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v38 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
      {
        sub_22F10CF48(v38);
        v40 = *(_QWORD *)(v33 + 120);
        v37 = *(_QWORD *)(v33 + 48) & 0xFFFFFFFFFFFFFFF0;
      }
      else
      {
        v40 = *(_QWORD *)(v33 + 120);
      }
    }
    v41 = *(_QWORD *)v37;
    v42 = *(unsigned __int8 *)(*(_QWORD *)v37 + 16);
    if (v41)
      v43 = v42 == 26;
    else
      v43 = 0;
    if (v43)
      goto LABEL_63;
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v41 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
    {
      v41 = sub_22F10CF48(v41);
      if (!v41)
      {
        v44 = 0;
        goto LABEL_64;
      }
LABEL_63:
      v44 = (unsigned __int16)(*(_QWORD *)(v41 + 16) >> 38);
      goto LABEL_64;
    }
    v44 = 0;
LABEL_64:
    v45 = v40 + 8 * v44;
    while (v36 != v45)
    {
      if (!*(_QWORD *)v36 || (*(_DWORD *)(*(_QWORD *)v36 + 96) & 0x600) == 0x200)
        goto LABEL_69;
      v36 += 8;
    }
    v220 = v25;
    v221 = 0x1000000000;
    v46 = v182;
    v210 = v182;
    v211 = 1;
    for (i = 16; i != 80; i += 16)
      *(uint64_t *)((char *)&v210 + i) = -4096;
    v214 = &v216;
    v215 = 0x100000000;
    v217 = *(_QWORD *)(v46 + 12024);
    v218 = 0;
    v219 = 0;
    *(_QWORD *)(v46 + 12024) = &v210;
    v48 = v183[7];
    v179 = (_DWORD *)v48;
    if (!v32)
    {
      v198 = &v200;
      v199 = 0x400000000;
      v202 = 0;
      v203 = 1;
      goto LABEL_142;
    }
    v49 = *(int **)(v32 + 56);
    v50 = &v204[2];
    v204[0] = &v204[2];
    v204[1] = (_QWORD *)0x1000000000;
    v51 = *(_DWORD *)(v48 + 12) & 0x1FFFFFFF;
    if ((unint64_t)(v49[3] & 0x1FFFFFFF) + v51 >= 0x11)
    {
      v52 = v48;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v48 = v52;
      v50 = (_QWORD **)v204[0];
      v51 = *(_DWORD *)(v52 + 12) & 0x1FFFFFFF;
    }
    sub_22EAF293C((uint64_t)v204, (uint64_t)v50, (uint64_t *)(v48 + 16), (uint64_t *)(v48 + 16 + 8 * v51));
    v54 = v49[3];
    v55 = v54 & 0x1FFFFFFF;
    if (HIDWORD(v221) < v55)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v54 = v49[3];
      v55 = v54 & 0x1FFFFFFF;
    }
    v56 = v49 + 4;
    if (!v55)
    {
LABEL_114:
      if ((v54 & 0x40000000) != 0 && (v79 = *(_QWORD *)&v56[2 * (v54 & 0x1FFFFFFF)]) != 0)
      {
        v198 = &v200;
        v203 = 1;
        v200 = v220;
        v201 = v221;
        v199 = 0x400000001;
        v202 = 1;
        v80 = sub_22EE0A68C(v46, v79, (uint64_t)&v198, v53);
        if (v198 != &v200)
          free(v198);
        if ((v80 & 1) != 0)
        {
          v82 = 0;
          goto LABEL_122;
        }
        v81 = v80 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v81 = 0;
      }
      v179 = sub_22EFE8F48(*(_QWORD *)(v46 + 88), *v49, v49[1], (uint64_t)v204[0], LODWORD(v204[1]), v49[2], v81);
      v82 = 1;
      goto LABEL_122;
    }
    v172 = v49 + 4;
    v174 = v49;
    v176 = v25;
    v57 = 8 * v55;
    v58 = (uint64_t *)(v49 + 4);
    while (1)
    {
      v59 = *v58;
      v198 = &v200;
      v203 = 1;
      v200 = v220;
      v201 = v221;
      v199 = 0x400000001;
      v202 = 1;
      v60 = *(_DWORD *)(v59 + 28) & 0x7F;
      if (!v59 || v60 != 38)
      {
        v74 = sub_22EE43BF4(v46, v59, (uint64_t)v184, (uint64_t)&v198);
        v65 = v74;
        v75 = v188 << 20;
        if (v59 && v60 == 32)
          *(_DWORD *)(v74 + 64) += v75;
        else
          *(_DWORD *)(v74 + 68) += v75;
        goto LABEL_108;
      }
      v61 = 0;
      v62 = *(_QWORD *)(v59 + 40);
      if ((v62 & 7) != 0)
        v63 = 0;
      else
        v63 = v62 & 0xFFFFFFFFFFFFFFF8;
      if ((*(_BYTE *)(v59 + 60) & 8) != 0)
        v61 = *(unsigned int *)(v59 + 64) | 0x100000000;
      v64 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v59 + 48)
                                                                                              + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                      + 8) & 0xFFFFFFFFFFFFFFF0)
                                              + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 32);
      v65 = sub_22EFEAF4C(*(_QWORD *)(v46 + 88), (uint64_t)v184, *(_DWORD *)(v59 + 56), *(_DWORD *)(v59 + 24), 0, v188 + HIWORD(v64), v63, (*(_BYTE *)(v59 + 60) & 3) == 1, (v64 & 0x8000) != 0, (*(_BYTE *)(v59 + 60) & 2) != 0, v61);
      if ((*(_BYTE *)(v59 + 60) & 4) != 0)
        sub_22F348B04(v46, v65, v59 + 80, (uint64_t)&v198);
      v66 = (uint64_t *)(v59 + 72);
      v67 = *(_QWORD *)(v59 + 72);
      if (v67 < 8)
        break;
      v68 = v67 & 0xFFFFFFFFFFFFFFF8;
      if ((*(_QWORD *)(v59 + 72) & 6) != 2)
        v68 = 0;
      if (v68)
        v66 = (uint64_t *)(v68 + 72);
      v69 = *v66;
      v70 = (uint64_t *)(v69 & 0xFFFFFFFFFFFFFFF8);
      if ((v69 & 6) == 4 && v70 != 0)
        v70 = (uint64_t *)v70[1];
      v72 = sub_22EFEB0E0(v59);
      v73 = sub_22EE03524(v46, v70, (uint64_t)&v198, v72, *(_QWORD *)(v59 + 40), 0);
      if (!v73)
        break;
      *(_QWORD *)(v65 + 72) = v73 & 0xFFFFFFFFFFFFFFF9;
      sub_22EE0A7A4(*(_QWORD *)(v46 + 12024), v59, v65);
LABEL_108:
      v76 = LODWORD(v204[1]);
      if (LODWORD(v204[1]) >= (unint64_t)HIDWORD(v204[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v76 = LODWORD(v204[1]);
      }
      v204[0][v76] = v65;
      ++LODWORD(v204[1]);
      sub_22EF661A0(*(_QWORD *)(v46 + 88), v65, (uint64_t)&v195);
      sub_22EF6871C((unsigned int *)&v195, (uint64_t)&v192);
      v77 = sub_22E4EF088((uint64_t)&v220, (unint64_t)&v192, 1);
      v78 = (char *)v220 + 24 * v221;
      v53 = *(__n128 *)v77;
      *((_QWORD *)v78 + 2) = *(_QWORD *)(v77 + 16);
      *(__n128 *)v78 = v53;
      LODWORD(v221) = v221 + 1;
      if (v198 != &v200)
        free(v198);
      ++v58;
      v57 -= 8;
      if (!v57)
      {
        v56 = v172;
        v49 = v174;
        v54 = v174[3];
        v25 = v176;
        goto LABEL_114;
      }
    }
    sub_22EE0A7A4(*(_QWORD *)(v46 + 12024), v59, v65);
    if (v65)
      goto LABEL_108;
    if (v198 != &v200)
      free(v198);
    v82 = 0;
    v25 = v176;
LABEL_122:
    if (v204[0] != &v204[2])
      free(v204[0]);
    if (!v82)
      goto LABEL_125;
    v198 = &v200;
    v203 = 1;
    v200 = v220;
    v201 = v221;
    v199 = 0x400000001;
    v202 = 1;
LABEL_142:
    v83 = *(_QWORD *)(v33 + 56);
    v84 = v83 & 0xFFFFFFFFFFFFFFF8;
    if ((v83 & 4) != 0)
      v84 = *(_QWORD *)(v84 + 32);
    v204[0] = *(_QWORD **)v84;
    v204[1] = (_QWORD *)(v84 + 8);
    v85 = sub_22F259410((unint64_t *)v204);
    v87 = v85;
    v175 = v86;
    v195 = v197;
    v196 = v171;
    v197[4] = 0;
    v192 = v194;
    v193 = 0x800000000;
    v189 = v191;
    v190 = 0x400000000;
    v223 = v225;
    v224 = 0x400000000;
    if (*(_BYTE *)(v85 + 16) == 25)
      goto LABEL_221;
    v88 = *(_QWORD *)(v85 + 16);
    if (!(unsigned __int16)(v88 >> 38))
      goto LABEL_221;
    v89 = (uint64_t *)(v86 + 4);
    v169 = (uint64_t)&v86[2 * (unsigned __int16)(v88 >> 38) + 4];
    v177 = v25;
    v173 = v85;
    while (2)
    {
      v90 = *v89;
      v91 = *(_QWORD *)(*v89 + 56);
      v92 = (uint64_t *)(v91 & 0xFFFFFFFFFFFFFFF8);
      if ((v91 & 4) != 0)
        v92 = (uint64_t *)v92[4];
      v93 = *v92;
      if ((*v92 & 0xF) == 0 && v93 && *(_BYTE *)(*(_QWORD *)(v93 & 0xFFFFFFFFFFFFFFF0) + 16) == 36)
      {
        v126 = *(_DWORD *)(v46 + 11992);
        *(_DWORD *)(v46 + 11992) = 0;
        v127 = *(_QWORD *)(v93 + 32);
        v128 = v127 >= 0x10 && (*(_QWORD *)(v93 + 32) & 0xFLL) == 0;
        v165 = v89;
        if (v128)
          v134 = *(_QWORD *)((char *)&unk_22F498010
                           + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v127 & 0xFFFFFFFFFFFFFFF0)
                                                                          + 16) << 56) >> 53));
        else
          v134 = 1;
        v129 = (int *)(v92 + 1);
        v130 = sub_22EE03B98((uint64_t *)v46, v127, ((unint64_t)v92 + v134 + 11) & -v134, (uint64_t)&v198, *(_DWORD *)(v90 + 24), *(_QWORD *)(v90 + 40));
        if (!v130)
        {
          v138 = 0;
          *(_DWORD *)(v46 + 11992) = v126;
          goto LABEL_247;
        }
        v131 = *(_DWORD *)(v93 + 20);
        v132 = v131 != 0;
        v119 = v131 != 0;
        LODWORD(v133) = v131 - 1;
        if (v119)
          v133 = v133;
        else
          v133 = 0;
        v94 = sub_22F34AD38((_QWORD *)v46, v130, *v129, v133 | (v132 << 32));
        *(_DWORD *)(v46 + 11992) = v126;
        v89 = v165;
        if (!v94)
          goto LABEL_236;
      }
      else
      {
        v94 = (uint64_t *)sub_22EE03524(v46, v92, (uint64_t)&v198, *(_DWORD *)(v90 + 24), *(_QWORD *)(v90 + 40), 0);
        if (!v94)
          goto LABEL_236;
      }
      v204[1] = 0;
      v204[2] = 0;
      LODWORD(v205) = 0;
      v204[0] = (_QWORD *)v46;
      *((_QWORD *)&v205 + 1) = (char *)&v207 + 8;
      *(_QWORD *)&v206 = (char *)&v207 + 8;
      *((_QWORD *)&v206 + 1) = 2;
      LODWORD(v207) = 0;
      v209 = &v189;
      v95 = (uint64_t *)sub_22ED73944(v204, v94);
      if ((_QWORD)v206 != *((_QWORD *)&v205 + 1))
        free((void *)v206);
      llvm::deallocate_buffer((llvm *)v204[1], (void *)(16 * v205));
      v96 = *(_DWORD *)(v90 + 96);
      if ((v96 & 0x600) == 0x400 || (v96 & 0x600) == 0x200 || *(_QWORD *)(v90 + 88) >= 8uLL)
      {
        v97 = *v95;
        v204[0] = (_QWORD *)*v95;
        v167 = sub_22E3CD3D4(*(_QWORD *)(v46 + 88) + 2032, 24, 3);
        v98 = sub_22EFBC5B4(v90);
        if (v98 && (*(_BYTE *)v98 & 0xFE) == 0xAC)
        {
          v99 = v89;
          v98 = *(_QWORD *)(v98 + 16);
        }
        else
        {
          v99 = v89;
        }
        sub_22F0D5A50(v98);
        v101 = v100;
        v102 = sub_22F1133DC((uint64_t *)v204, *(_QWORD *)(v46 + 88));
        v103 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v97 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                  + 16);
        if (v103 == 40)
          v104 = 1;
        else
          v104 = 2 * (v103 == 41);
        v105 = sub_22E5BBE34(v167, v101, v102, v104, 0, 0) & 0xFFFFFFFFFFFFFFFELL;
        LOBYTE(v96) = *(_BYTE *)(v90 + 96);
        v89 = v99;
        v25 = v177;
      }
      else
      {
        v105 = 0;
      }
      v106 = *(_QWORD *)(v90 + 40);
      if ((v106 & 7) != 0)
        v107 = 0;
      else
        v107 = v106 & 0xFFFFFFFFFFFFFFF8;
      v108 = sub_22EFBF080(*(_QWORD *)(v46 + 88), (uint64_t)v184, *(_DWORD *)(v90 + 64), *(_DWORD *)(v90 + 24), v107, *v95, (uint64_t)v95, v96 & 7, v105);
      v109 = v108;
      v110 = *(_DWORD *)(v90 + 96);
      if ((v110 & 0x1000) != 0)
        v111 = 0;
      else
        v111 = v110 & 0xFE000;
      v112 = (v110 >> 20);
      if (v112 != 255)
      {
        v121 = (unsigned int *)(v108 + 96);
        v122 = *(_DWORD *)(v108 + 96) & 0xFFF01FFF | v111;
        *(_DWORD *)(v108 + 96) = v122;
        goto LABEL_197;
      }
      v113 = v90;
      if ((*(_DWORD *)(v90 + 28) & 0x7F) == 0x53)
        goto LABEL_196;
      v114 = *(_QWORD *)(v90 + 16);
      while (2)
      {
        v115 = v114 & 0xFFFFFFFFFFFFFFF8;
        if ((v114 & 4) != 0)
          v115 = *(_QWORD *)v115;
        v116 = *(_WORD *)(v115 + 8) & 0x7F;
        if (v116 != 83)
        {
          v117 = -40;
          if ((*(_WORD *)(v115 + 8) & 0x7Fu) > 0x46)
          {
            if (v116 == 71)
            {
              v117 = -56;
            }
            else if (v116 != 81)
            {
              goto LABEL_185;
            }
          }
          else
          {
            if (v116 > 0x18)
              goto LABEL_184;
            if (v116 == 16)
              goto LABEL_178;
            if (((1 << v116) & 0x1066) == 0)
            {
              if (v116 == 24)
              {
LABEL_178:
                v117 = -48;
              }
              else
              {
LABEL_184:
                if (v116 == 70)
                {
                  v117 = -64;
                }
                else
                {
LABEL_185:
                  v118 = v116 - 52;
                  v119 = v116 - 33 >= 5;
                  v120 = -64;
                  if (v119)
                    v120 = -48;
                  v119 = v118 >= 6;
                  v117 = -72;
                  if (v119)
                    v117 = v120;
                }
              }
            }
          }
          v114 = *(_QWORD *)(v115 + v117 + 16);
          continue;
        }
        break;
      }
      v113 = v115 - 40;
LABEL_196:
      v112 = sub_22F36F2CC(*(_QWORD *)(v113 + 88), v90);
      v121 = (unsigned int *)(v109 + 96);
      v122 = *(_DWORD *)(v109 + 96) & 0xFFF01FFF | v111;
      *(_DWORD *)(v109 + 96) = v122;
      if (v112 >= 0xFF)
        sub_22F3AC2B8(v109, v112);
      else
LABEL_197:
        *v121 = v122 & 0xF00FFFFF | (v112 << 20);
      sub_22EE0A7A4(*(_QWORD *)(v46 + 12024), v90, v109);
      v123 = *(_QWORD *)(v109 + 48);
      v124 = v224;
      if (v224 >= (unint64_t)HIDWORD(v224))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v124 = v224;
      }
      v223[v124] = v123;
      LODWORD(v224) = v224 + 1;
      v125 = v193;
      if (v193 >= (unint64_t)HIDWORD(v193))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v125 = v193;
      }
      v87 = v173;
      *((_QWORD *)v192 + v125) = v109;
      LODWORD(v193) = v193 + 1;
      if (++v89 != (uint64_t *)v169)
        continue;
      break;
    }
LABEL_221:
    v170 = v187;
    sub_22EEB5360((uint64_t)&v195, v187, 4uLL, 4);
    *v135 = *(_DWORD *)(v185 + 24);
    LOWORD(v204[0]) = 0;
    *(_OWORD *)((char *)v204 + 4) = 0uLL;
    v205 = 0u;
    v206 = 0u;
    v207 = 0u;
    v208 = 0;
    BYTE2(v204[0]) = BYTE2(v204[0]) & 0xFC | ((*(_QWORD *)(v87 + 16) & 0x800000000000000) != 0) | 2;
    v166 = v224;
    v168 = v223;
    v136 = v87;
    while (2)
    {
      while (2)
      {
        if ((v136 & 0xF) != 0)
          goto LABEL_232;
        v137 = *(unsigned __int8 *)(*(_QWORD *)(v136 & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v137 > 0x39)
        {
LABEL_227:
          if (sub_22F115668(v136))
            v87 = v136;
          v136 = sub_22F115B7C(v136);
          if (!v136)
            goto LABEL_235;
          continue;
        }
        break;
      }
      if (v137 == 24)
        break;
      if (v137 != 26)
      {
        if (((1 << v137) & 0x20000000200003CLL) != 0)
          goto LABEL_232;
        goto LABEL_227;
      }
      if ((*(_BYTE *)(v136 + 23) & 0x10) == 0)
      {
LABEL_232:
        v136 = sub_22F115B7C(v136);
        continue;
      }
      break;
    }
    v87 = v136;
LABEL_235:
    v139 = sub_22F115668(v87);
    v140 = sub_22EE80544((_QWORD *)v46, v170, v168, v166, v139, v186, (uint64_t)v204);
    if (v140 >= 0x10)
    {
      v138 = v140;
      v141 = sub_22E8BB094((uint64_t)&v195, v140);
      *v142 = *v175;
      v142[1] = v175[1];
      v142[2] = v175[2];
      if (v141)
      {
        if (*(_BYTE *)(v141 + 16) == 26)
        {
          v143 = *(_QWORD *)(v141 + 16);
          if ((v143 & 0x3C0000000000000) != 0)
          {
            v144 = (unsigned __int16)(v143 >> 38);
            if (*(_QWORD *)(v141 + 16) == 25)
              v144 = 0;
            *(_QWORD *)&v142[2 * v144 + 4] = 0;
          }
        }
      }
      v142[3] = v175[3];
      if (*(_BYTE *)(v141 + 16) != 25)
      {
        v145 = *(_QWORD *)(v141 + 16);
        if ((v145 & 0x3FFFC000000000) != 0)
        {
          v146 = 0;
          v147 = (unsigned __int16)(v145 >> 38);
          do
          {
            *(_QWORD *)&v142[2 * v146 + 4] = *((_QWORD *)v192 + v146);
            ++v146;
          }
          while (v147 != v146);
        }
      }
    }
    else
    {
LABEL_236:
      v138 = 0;
    }
LABEL_247:
    if (v223 != v225)
      free(v223);
    if (v138 >= 0x10)
    {
      v148 = *(_QWORD *)(v46 + 88);
      v149 = v196.i64[0] - v196.i64[1];
      v150 = v196.i32[0] - v196.i32[2];
      if (v196.i32[0] == v196.i32[2])
        v150 = sub_22F11598C(v138);
      v151 = (_QWORD *)sub_22E3CD3D4(v148 + 2032, v150 + 8, 3);
      *v151 = v138;
      memcpy(v151 + 1, (char *)v195 + v196.i64[1], v149);
      v152 = *(_QWORD *)(v33 + 112);
      v153 = *(_QWORD *)(v152 + 80);
      if ((v153 & 0x4000000000000000) != 0)
        v154 = *(_QWORD *)(v152 + 16 * ((v153 >> 61) & 1) + 168);
      else
        v154 = v153 >> 63;
      v155 = *(_QWORD *)(v33 + 56);
      if ((v155 & 4) != 0 && (v160 = v155 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(v160 + 16)))
        v156 = **(int ***)(v160 + 24);
      else
        v156 = (int *)(v33 + 64);
      v157 = *v156;
      v158 = *(_DWORD *)(v33 + 24);
      v159 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33);
      sub_22ED73680(&v182, (uint64_t)v179, v33, v154, (uint64_t)v151, v157, v158, SHIDWORD(v159), (uint64_t *)v189, v190);
    }
    if (v189 != v191)
      free(v189);
    if (v192 != v194)
      free(v192);
    if (v195 != v197 && v195)
      MEMORY[0x2348A0E84]();
    if (v198 != &v200)
      free(v198);
LABEL_125:
    if (!(_BYTE)v218)
    {
      if ((_DWORD)v215)
      {
        v161 = 0;
        v162 = 8 * v215;
        do
        {
          v163 = *(void ***)((char *)v214 + v161);
          if (v163)
          {
            if (*v163 != v163 + 2)
              free(*v163);
            MEMORY[0x2348A0E9C](v163, 0x1080C40ED926357);
          }
          v161 += 8;
        }
        while (v162 != v161);
      }
      *(_QWORD *)(v210 + 12024) = v217;
      LOBYTE(v218) = 1;
    }
    if (v214 != &v216)
      free(v214);
    if ((v211 & 1) == 0)
      llvm::deallocate_buffer(v212, (void *)(16 * v213));
    if (v220 != v25)
      free(v220);
    v24 = 1;
    if (!v27)
    {
LABEL_70:
      v23 = *(_QWORD *)(v26 + 8);
      if (!v23)
        break;
      continue;
    }
    break;
  }
  v22 = v178;
  if ((v24 & 1) == 0)
LABEL_284:
    sub_22ED5EFC0(&v182, 0, 0);
  v164 = sub_22ED5EFC0(&v182, (unint64_t *)&v187, 1uLL);
  *(_QWORD *)(*(_QWORD *)(v164 + 48) + 80) |= 0x2000000000uLL;
LABEL_286:
  result = (uint64_t)sub_22EE014E4(&v180);
  *(_DWORD *)(a1 + 11992) = v22;
  return result;
}

unint64_t sub_22ED5EFC0(uint64_t *a1, unint64_t *a2, unint64_t a3)
{
  unint64_t *v4;
  _QWORD *v6;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  __int16 v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  int v30;
  void *v31;
  uint64_t v32;
  _QWORD v33[6];

  v4 = a2;
  v33[4] = *MEMORY[0x24BDAC8D0];
  v6 = (_QWORD *)*a1;
  v8 = *(unsigned int *)(a1[1] + 24);
  v23 = 0;
  v26 = 0;
  v25 = 0;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0;
  v24 = 2;
  v9 = sub_22EE80544(v6, a1[5], a2, a3, v8, a1[4], (uint64_t)&v23);
  v10 = sub_22EF579A8(*(_QWORD *)(*a1 + 88), v9, v8);
  v31 = v33;
  v32 = 0x400000000;
  if (a3)
  {
    v11 = 8 * a3;
    do
    {
      v12 = *v4;
      v13 = *(_QWORD *)(*a1 + 88);
      v14 = a1[2];
      v15 = sub_22EF579A8(v13, *v4, v8);
      v16 = sub_22EFBF080(v13, v14, v8, v8, 0, v12, (uint64_t)v15, 0, 0);
      v17 = v16;
      v18 = v32;
      v19 = *(_DWORD *)(v16 + 96);
      *(_DWORD *)(v16 + 96) = v19 & 0xFFF01FFF;
      if (v18 >= 0xFF)
      {
        sub_22F3AC2B8(v16, v18);
        v18 = v32;
      }
      else
      {
        *(_DWORD *)(v16 + 96) = v19 & 0xF0001FFF | (v18 << 20);
      }
      v20 = v18;
      v10[v18 + 3] = v17;
      if (v18 >= HIDWORD(v32))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v20 = v32;
      }
      *((_QWORD *)v31 + v20) = v17;
      LODWORD(v32) = v32 + 1;
      ++v4;
      v11 -= 8;
    }
    while (v11);
  }
  v21 = sub_22ED73680(a1, *(_QWORD *)(a1[1] + 56), 0, 0, (uint64_t)v10, v8, v8, v8, 0, 0);
  if (v31 != v33)
    free(v31);
  return v21;
}

void sub_22ED5F1D4(uint64_t a1, int a2)
{
  __asm { BR              X11 }
}

uint64_t sub_22ED5F204(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v6[30];

  if ((**(_QWORD **)(a1 + 72) & 0x200) != 0)
    v4 = 6460;
  else
    v4 = 5363;
  sub_22E8FCA40((_QWORD *)a1, a3, v4, 0, (uint64_t)v6);
  sub_22E8906A0((uint64_t)v6, (uint64_t *)(v3 - 8));
  sub_22E903BEC(v6);
  return 0;
}

BOOL sub_22ED5F298(uint64_t a1)
{
  uint64_t v1;

  if (!*(_BYTE *)(a1 + 80))
    return 0;
  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (!v1 || *(_BYTE *)(v1 + 16) != 36)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v1 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 36)
      v1 = sub_22F10CF48(v1);
    else
      v1 = 0;
  }
  return v1 != 0;
}

uint64_t sub_22ED5F300(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  unint64_t *v17;
  _OWORD v18[2];

  if (*(_BYTE *)(a2 + 80))
    return 0;
  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(_DWORD *)(v3 + 12);
  v5 = v4 & 0x1FFFFFFF;
  if ((v4 & 0x1FFFFFFF) == 0)
    return 0;
  v7 = 0;
  v8 = v3 + 16;
  while (1)
  {
    v9 = *(_QWORD *)(v8 + 8 * v7);
    v10 = *(_DWORD *)(v9 + 28) & 0x7F;
    if (v9)
    {
      if (v10 == 38)
        break;
    }
    if (v9 && v10 == 59)
    {
      if (!*(_BYTE *)(v9 + 80))
      {
        v16 = *(_QWORD *)(v9 + 56);
        v17 = (unint64_t *)(v16 & 0xFFFFFFFFFFFFFFF8);
        if ((v16 & 4) != 0)
          v17 = (unint64_t *)v17[4];
        if ((sub_22EE67290(a1, *(_DWORD *)(v9 + 24), v17, 13) & 1) != 0)
          return 1;
      }
    }
    else if (v9 && v10 == 32 && (sub_22ED5F300(a1) & 1) != 0)
    {
      return 1;
    }
LABEL_25:
    if (++v7 == v5)
      return 0;
  }
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 48) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                 + 8) & 0xFFFFFFFFFFFFFFF0)
                                         + 8) & 0xFFFFFFFFFFFFFFF0)
                 + 33) & 0x80) != 0)
    goto LABEL_25;
  if ((*(_BYTE *)(v9 + 60) & 4) == 0)
    goto LABEL_25;
  v11 = *(_QWORD *)(v9 + 144);
  if (!v11)
    goto LABEL_25;
  v12 = *(unsigned int *)(v11 + 8);
  if (!(_DWORD)v12)
    goto LABEL_25;
  v13 = (_OWORD *)(v11 + 16);
  v14 = 32 * v12;
  while (1)
  {
    v15 = v13[1];
    v18[0] = *v13;
    v18[1] = v15;
    if ((sub_22EE734A8(a1, (uint64_t)v18, 20) & 1) != 0)
      return 1;
    v13 += 2;
    v14 -= 32;
    if (!v14)
      goto LABEL_25;
  }
}

_DWORD *sub_22ED5F458(_QWORD *a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, int a8, _BYTE *a9, _BYTE *a10, char a11)
{
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  unint64_t v39;
  unsigned int *v40;
  int *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  _DWORD *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  BOOL v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  _BOOL4 v78;
  unsigned int v79;
  int v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _DWORD *v86;
  int v88;
  unint64_t v90;
  unsigned __int8 **v91[6];
  char *v92;
  char *v93;
  _QWORD *v94;
  int *v95;
  _BYTE *v96;
  _BYTE *v97;
  char v98;
  unint64_t v99;
  char v100;
  uint64_t v101;
  unint64_t v102;
  int v103;
  int v104;
  uint64_t v105;
  int v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  _QWORD v110[6];

  v110[4] = *MEMORY[0x24BDAC8D0];
  v103 = a3;
  v104 = a2;
  v101 = a6;
  v102 = a7;
  v100 = a11;
  *a9 = 0;
  *a10 = 0;
  v108 = (char *)v110;
  v109 = 0x400000000;
  v99 = 0;
  if (!*(_QWORD *)(a4 + 8))
    goto LABEL_11;
  v14 = sub_22E958204((uint64_t)a1, a4, 1);
  if (v14 && (*(_WORD *)(v14 + 8) & 0x7Fu) - 35 <= 2)
  {
    v15 = *(_QWORD *)(v14 - 16);
    if (!v15)
    {
      v16 = sub_22EF6462C(a1[11], v14 - 64);
      goto LABEL_10;
    }
  }
  else
  {
    v17 = *(_QWORD *)(a4 + 8);
    if ((*(_BYTE *)(v17 + 8) & 4) != 0)
      v15 = *(_QWORD *)(v17 + 16);
    else
      v15 = 0;
  }
  v16 = v15 & 0xFFFFFFFFFFFFFFF0;
LABEL_10:
  v99 = v16;
  if (v16 >= 0x10)
  {
    while (1)
    {
      v53 = v109;
      if (v109 >= (unint64_t)HIDWORD(v109))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v53 = v109;
      }
      *(_QWORD *)&v108[8 * v53] = v16;
      LODWORD(v109) = v109 + 1;
      v54 = sub_22F10C2A4(*(_QWORD *)(v99 & 0xFFFFFFFFFFFFFFF0));
      if (v54)
      {
        v64 = v54;
        v65 = *(_DWORD *)(v54 + 28);
        if ((v65 & 0x7Fu) - 35 <= 2)
          break;
      }
      v55 = sub_22F10D628(*(_QWORD *)(v99 & 0xFFFFFFFFFFFFFFF0));
      if (!v55 || (v105 = *(_QWORD *)(v55 + 32), (v56 = sub_22F0F08CC(&v105)) == 0))
      {
        v58 = *(_QWORD *)(v99 & 0xFFFFFFFFFFFFFFF0);
        v59 = *(unsigned __int8 *)(v58 + 16);
        if (v58)
          v60 = v59 == 20;
        else
          v60 = 0;
        if (v60)
          goto LABEL_109;
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v58 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 20)
        {
          v58 = sub_22F10CF48(v58);
          if (v58)
            goto LABEL_109;
          v58 = *(_QWORD *)(v99 & 0xFFFFFFFFFFFFFFF0);
          v59 = *(unsigned __int8 *)(v58 + 16);
        }
        if (v59 == 18)
        {
LABEL_109:
          v62 = *(_QWORD *)(v58 + 32);
          if (!v62)
            goto LABEL_172;
          if ((*(_BYTE *)(v62 + 8) & 4) != 0)
            v63 = *(_QWORD *)(v62 + 16);
          else
            v63 = 0;
          v16 = v63 & 0xFFFFFFFFFFFFFFF0;
          goto LABEL_145;
        }
        v61 = *(_QWORD *)(v58 + 8) & 0xFFFFFFFFFFFFFFF0;
        if (*(_BYTE *)(*(_QWORD *)v61 + 16) == 18)
        {
          v58 = sub_22F10CF48(v58);
          if (v58)
            goto LABEL_109;
          v61 = *(_QWORD *)(*(_QWORD *)(v99 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0;
        }
        v73 = *(_QWORD *)v61;
        if (!v73 || *(_BYTE *)(v73 + 16) != 44)
          goto LABEL_172;
        v74 = sub_22F114198(*(_QWORD *)(v73 + 24));
        v75 = *(_WORD *)(v74 + 72) & 0x7F;
        v67 = -40;
        if (v75 > 0x46)
        {
          if (v75 != 83)
          {
            if (v75 == 71)
            {
              v67 = -56;
            }
            else if (v75 != 81)
            {
LABEL_161:
              v76 = v75 - 52;
              if (v75 - 33 >= 5)
                v77 = -48;
              else
                v77 = -64;
              v22 = v76 >= 6;
              v67 = -72;
              if (v22)
                v67 = v77;
            }
          }
        }
        else
        {
          if (v75 > 0x18)
            goto LABEL_160;
          if (v75 == 16)
            goto LABEL_153;
          if (((1 << v75) & 0x1066) == 0)
          {
            if (v75 == 24)
            {
LABEL_153:
              v67 = -48;
            }
            else
            {
LABEL_160:
              if (v75 != 70)
                goto LABEL_161;
              v67 = -64;
            }
          }
        }
        v70 = v74 + 64;
LABEL_138:
        v57 = *(_QWORD *)(v70 + v67 + 16);
        goto LABEL_139;
      }
      v57 = *(_QWORD *)(v56 + 16);
LABEL_139:
      v71 = v57 & 0xFFFFFFFFFFFFFFF8;
      if ((v57 & 4) != 0)
        v71 = *(_QWORD *)v71;
      if ((*(_WORD *)(v71 + 8) & 0x7Fu) - 33 > 9)
      {
LABEL_172:
        v88 = 0;
        v99 = 0;
        goto LABEL_12;
      }
      v72 = *(_QWORD *)(v71 - 16);
      if (v72)
        v16 = v72 & 0xFFFFFFFFFFFFFFF0;
      else
        v16 = sub_22EF6462C(a1[11], v71 - 64);
LABEL_145:
      v99 = v16;
      if (v16 < 0x10)
        goto LABEL_11;
    }
    if ((v65 & 0x7E) == 0x24)
    {
      if ((v65 & 0x7F) != 0x25 && (*(_BYTE *)(v54 + 180) & 7) == 2)
      {
LABEL_201:
        v88 = *(_DWORD *)(v64 + 24);
        goto LABEL_12;
      }
    }
    else if (sub_22EFD5760(v54) == 2)
    {
      goto LABEL_201;
    }
    v66 = *(_WORD *)(v64 + 72) & 0x7F;
    v67 = -40;
    if (v66 > 0x46)
    {
      if (v66 != 83)
      {
        if (v66 == 71)
        {
          v67 = -56;
          goto LABEL_137;
        }
        if (v66 == 81)
          goto LABEL_137;
LABEL_131:
        v68 = v66 - 52;
        if (v66 - 33 >= 5)
          v69 = -48;
        else
          v69 = -64;
        v22 = v68 >= 6;
        v67 = -72;
        if (v22)
          v67 = v69;
      }
    }
    else
    {
      if (v66 > 0x18)
        goto LABEL_130;
      if (v66 != 16)
      {
        if (((1 << v66) & 0x1066) != 0)
          goto LABEL_137;
        if (v66 != 24)
        {
LABEL_130:
          if (v66 == 70)
          {
            v67 = -64;
            goto LABEL_137;
          }
          goto LABEL_131;
        }
      }
      v67 = -48;
    }
LABEL_137:
    v70 = v64 + 64;
    goto LABEL_138;
  }
LABEL_11:
  v88 = 0;
LABEL_12:
  v18 = v109;
  if ((_DWORD)v109)
  {
    v19 = &v108[8 * v109 - 8];
    if (v108 < v19)
    {
      v20 = v108 + 8;
      do
      {
        v21 = *((_QWORD *)v20 - 1);
        *((_QWORD *)v20 - 1) = *(_QWORD *)v19;
        *(_QWORD *)v19 = v21;
        v19 -= 8;
        v22 = v20 >= v19;
        v20 += 8;
      }
      while (!v22);
    }
  }
  v98 = 0;
  v92 = &v98;
  v93 = &v100;
  v94 = a1;
  v95 = &v103;
  v96 = a10;
  v97 = a9;
  v91[0] = (unsigned __int8 **)&v92;
  v91[1] = (unsigned __int8 **)&v101;
  v91[2] = (unsigned __int8 **)&v104;
  v91[3] = (unsigned __int8 **)&v100;
  v91[4] = (unsigned __int8 **)a1;
  v91[5] = (unsigned __int8 **)&v103;
  if ((_DWORD)v18)
  {
    v23 = 0;
    v24 = 0;
    v25 = 8 * v18;
    v26 = 8 * (v18 - 1);
    while (1)
    {
      v99 = *(_QWORD *)&v108[v23];
      v27 = sub_22F10C2A4(*(_QWORD *)(v99 & 0xFFFFFFFFFFFFFFF0));
      if (!v27 || (v32 = v27, (*(_DWORD *)(v27 + 28) & 0x7Fu) - 35 > 2))
      {
        v28 = sub_22F10D628(*(_QWORD *)(v99 & 0xFFFFFFFFFFFFFFF0));
        if (!v28)
        {
          v34 = *(_QWORD *)(v99 & 0xFFFFFFFFFFFFFFF0);
          if (v34)
            v35 = *(_BYTE *)(v34 + 16) == 20;
          else
            v35 = 0;
          if (!v35 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v34 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 20)
            sub_22F10CF48(v34);
LABEL_44:
          v30 = 0;
          v33 = 0;
          v31 = 0;
          goto LABEL_45;
        }
        v105 = *(_QWORD *)(v28 + 32);
        v29 = sub_22F0F08CC(&v105);
        if (!v29)
          goto LABEL_44;
        v30 = 0;
        v31 = *(_QWORD *)(v29 + 56);
        goto LABEL_26;
      }
      if ((*(_DWORD *)(v27 + 28) & 0x7F) == 0x25)
        break;
      if (sub_22EFC7ADC(v27 + 64))
      {
        v31 = 0;
        v30 = 0;
        v36 = *(_QWORD *)(v32 + 136);
        if ((v36 & 4) != 0)
        {
          v33 = 0;
          goto LABEL_45;
        }
        v33 = 0;
        v37 = v36 & 0xFFFFFFFFFFFFFFF8;
        if (v37)
        {
          v30 = 0;
          v31 = *(_QWORD *)(v37 + 56);
          goto LABEL_26;
        }
      }
      else
      {
        if ((*(_DWORD *)(v32 + 28) & 0x7E) != 0x24)
        {
          v38 = sub_22EFD5760(v32);
          if (v38)
          {
            if (v26 == v23 && v38 != 2)
              *a9 = 1;
            goto LABEL_83;
          }
          goto LABEL_44;
        }
        if ((*(_BYTE *)(v32 + 180) & 7) == 2)
          goto LABEL_83;
        v33 = 0;
        v31 = 0;
        v30 = 1;
      }
LABEL_45:
      v39 = v102;
      if (v102 > v24)
      {
        v40 = *(unsigned int **)(v101 + 8 * v24);
        if ((v40[3] & 0x1FFFFFFF) != 0)
        {
          v98 = 1;
        }
        else
        {
          v107 = *v40 | ((unint64_t)v40[2] << 32);
          if (*v92)
          {
            if (!*v93)
            {
              sub_22E8FCA40(v94, *v95, 0x126Bu, 0, (uint64_t)&v105);
              LOBYTE(v90) = 1;
              v85 = sub_22E894E38((uint64_t)&v105, (unsigned __int8 *)&v90);
              sub_22E8906A0(v85, (uint64_t *)&v107);
              sub_22E903BEC((unsigned int *)&v105);
            }
            v86 = 0;
            *v96 = 1;
            *v97 = 0;
            goto LABEL_198;
          }
        }
      }
      if (!v30)
      {
        if (!v33)
          goto LABEL_83;
        if (!a8 || (*(_BYTE *)(*(_QWORD *)(v99 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0)
        {
          if (v102 <= v24)
            goto LABEL_80;
          if (!v31 || sub_22ED5D218(a1, *(_QWORD *)(v101 + 8 * v24), v31, v100 == 0, 0, 0))
            goto LABEL_61;
          goto LABEL_63;
        }
        if (v102 <= v24)
          goto LABEL_83;
        v43 = *(_QWORD *)(v101 + 8 * v24);
        if ((*(_DWORD *)(v43 + 12) & 0x1FFFFFFF) == 0)
          goto LABEL_83;
        WORD2(v105) = 0;
        v106 = 0;
        v44 = *(_QWORD *)(v43 + 16);
        v45 = *(_DWORD *)(v44 + 28) & 0x7F;
        if (v44 && v45 == 38)
        {
          v46 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v44 + 48)
                                                                                                 + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                         + 8) & 0xFFFFFFFFFFFFFFF0)
                                                 + 8) & 0xFFFFFFFFFFFFFFF0)
                         + 32);
          v47 = 0x7FFF;
        }
        else
        {
          v46 = (_DWORD *)(v44 && v45 == 59 ? v44 + 68 : v44 + 64);
          v47 = 0xFFFFF;
        }
        LODWORD(v105) = *v46 & v47;
        sub_22ED91030((uint64_t)&v105, v99);
        if (!BYTE5(v105))
          goto LABEL_83;
        if (v102 <= v24)
        {
LABEL_80:
          if (!v100)
          {
            sub_22E8FCA40(a1, v103, 0x12F8u, 0, (uint64_t)&v105);
            v48 = sub_22E8901B8((uint64_t)&v105, (uint64_t *)&v99);
            v107 = sub_22ED60038(v99, *(_QWORD *)(a4 + 8), *(_QWORD *)(a4 + 16));
            sub_22E8906A0(v48, (uint64_t *)&v107);
            sub_22E903BEC((unsigned int *)&v105);
          }
          *a10 = 1;
          goto LABEL_83;
        }
LABEL_61:
        if (!*a10 && sub_22ED5D528(a1, *(_QWORD *)(v101 + 8 * v24), 0, 3, 0))
LABEL_63:
          *a10 = 1;
LABEL_54:
        ++v24;
        goto LABEL_83;
      }
      if (v26 == v23)
        *a9 = 1;
      if (v39 > v24)
      {
        v41 = *(int **)(v101 + 8 * v24);
        if ((v41[3] & 0x1FFFFFFF) != 0)
        {
          if (!v100)
          {
            sub_22E8FCA40(a1, *v41, 0x12E9u, 0, (uint64_t)&v105);
            v83 = sub_22E8901B8((uint64_t)&v105, (uint64_t *)&v99);
            v107 = *(_QWORD *)(*(_QWORD *)(v101 + 8 * v24) + 4);
            v84 = sub_22E8906A0(v83, (uint64_t *)&v107);
            v90 = sub_22ED60038(v99, *(_QWORD *)(a4 + 8), *(_QWORD *)(a4 + 16));
            sub_22E8906A0(v84, (uint64_t *)&v90);
            sub_22E903BEC((unsigned int *)&v105);
          }
          v86 = 0;
          *a10 = 1;
          goto LABEL_198;
        }
        goto LABEL_54;
      }
      if ((a8 & 1) == 0)
      {
        v42 = sub_22ED60038(v99, *(_QWORD *)(a4 + 8), *(_QWORD *)(a4 + 16));
        if (sub_22ED601A0(v91, v42))
        {
          v86 = 0;
          goto LABEL_198;
        }
      }
LABEL_83:
      v23 += 8;
      if (v25 == v23)
        goto LABEL_86;
    }
    v30 = 0;
    v31 = *(_QWORD *)(v27 + 184);
LABEL_26:
    v33 = 1;
    goto LABEL_45;
  }
  v24 = 0;
LABEL_86:
  if (v102 <= v24)
  {
    v86 = 0;
    if (a5 && (a8 & 1) == 0)
    {
      sub_22ED601A0(v91, *(_QWORD *)(a5 + 36));
      v86 = (_DWORD *)sub_22E3CD3D4(a1[11] + 2032, 16, 3);
      sub_22EFE8D6C(v86, v52, 0, 0, 0, 0, 0, 0);
    }
  }
  else
  {
    v49 = v24;
    if (v102 - 1 > v24)
    {
      if (v24 == (_DWORD)v102 - 1)
      {
        v50 = 0;
        v51 = 1;
      }
      else
      {
        v50 = 0;
        v51 = 1;
        do
        {
          v78 = (*(_DWORD *)(*(_QWORD *)(v101 + 8 * v24) + 12) & 0x1FFFFFFF) == 0;
          v50 |= v78;
          v51 &= v78;
          ++v24;
        }
        while ((_DWORD)v102 - 1 != v24);
      }
      if (!v100)
      {
        v79 = v51 ? 7043 : 4853;
        sub_22E8FCA40(a1, **(_DWORD **)(v101 + 8 * v49), v79, 0, (uint64_t)&v105);
        v80 = *(_DWORD *)(*(_QWORD *)(v101 + 8 * v102 - 16) + 8);
        LODWORD(v107) = **(_DWORD **)(v101 + 8 * v49);
        HIDWORD(v107) = v80;
        sub_22E8906A0((uint64_t)&v105, (uint64_t *)&v107);
        sub_22E903BEC((unsigned int *)&v105);
        if (((v88 != 0) & v50) == 1 && v100 == 0)
        {
          sub_22E8FCA40(a1, v88, 0x15EAu, 0, (uint64_t)&v105);
          sub_22E8901B8((uint64_t)&v105, (uint64_t *)&v108[8 * v109 - 8]);
          sub_22E903BEC((unsigned int *)&v105);
        }
      }
      if ((v51 & 1) == 0)
        *a10 = 1;
    }
    v86 = *(_DWORD **)(v101 + 8 * v102 - 8);
    if ((v86[3] & 0x1FFFFFFF) == 0)
    {
      v107 = **(unsigned int **)(v101 + 8 * v49) | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v101 + 8 * v49) + 8) << 32);
      if (*v92)
      {
        if (!*v93)
        {
          sub_22E8FCA40(v94, *v95, 0x126Bu, 0, (uint64_t)&v105);
          LOBYTE(v90) = 1;
          v82 = sub_22E894E38((uint64_t)&v105, (unsigned __int8 *)&v90);
          sub_22E8906A0(v82, (uint64_t *)&v107);
          sub_22E903BEC((unsigned int *)&v105);
        }
        v86 = 0;
        *v96 = 1;
        *v97 = 0;
      }
    }
  }
LABEL_198:
  if (v108 != (char *)v110)
    free(v108);
  return v86;
}

unint64_t sub_22ED60038(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v14[2];
  _QWORD v15[2];

  if (!a2)
  {
    v5 = 0;
    v6 = 0;
    return v6 | v5;
  }
  while (1)
  {
    v3 = *(_QWORD *)(a2 + 8);
    if ((v3 & 4) == 0 || (v4 = *(_QWORD *)(a2 + 16)) == 0)
    {
LABEL_6:
      v5 = 0;
      v6 = 0;
      return v6 | v5;
    }
    if (*(_QWORD *)(*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
      break;
    a2 = v3 & 0xFFFFFFFFFFFFFFF8;
    if ((v3 & 0xFFFFFFFFFFFFFFF8) == 0)
      goto LABEL_6;
  }
  v15[0] = a2;
  v15[1] = a3;
  v7 = sub_22F0AB4E0((uint64_t)v15);
  v8 = v7;
  v14[0] = v7;
  v14[1] = v9;
LABEL_9:
  v10 = v7;
  while (1)
  {
    if ((v10 & 0xF) != 0)
    {
LABEL_20:
      v7 = sub_22F115B7C(v10);
      goto LABEL_9;
    }
    v11 = *(unsigned __int8 *)(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0) + 16);
    if (v11 <= 0x39)
      break;
LABEL_15:
    if (sub_22F115668(v10))
      v8 = v10;
    v10 = sub_22F115B7C(v10);
    if (!v10)
      goto LABEL_22;
  }
  if (v11 == 24)
    goto LABEL_21;
  if (v11 != 26)
  {
    if (((1 << v11) & 0x20000000200003CLL) != 0)
      goto LABEL_20;
    goto LABEL_15;
  }
  if ((*(_BYTE *)(v10 + 23) & 0x10) == 0)
    goto LABEL_20;
LABEL_21:
  v8 = v10;
LABEL_22:
  v12 = sub_22F115668(v8);
  v6 = sub_22F1167E8(v14) << 32;
  v5 = v12;
  return v6 | v5;
}

BOOL sub_22ED601A0(unsigned __int8 ***a1, uint64_t a2)
{
  unsigned __int8 **v3;
  unsigned __int8 **v4;
  int v5;
  uint64_t v6;
  unsigned __int8 **v7;
  unsigned int **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  _BYTE v16[23];
  __int16 v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned int v20[24];

  v18 = a2;
  v3 = a1[4];
  v4 = *a1;
  v12 = a2;
  v5 = **v4;
  if (**v4)
  {
    if (!*v4[1])
    {
      sub_22E8FCA40(v4[2], *(_DWORD *)v4[3], 0x126Bu, 0, (uint64_t)v20);
      v19 = 0;
      v6 = sub_22E894E38((uint64_t)v20, &v19);
      sub_22E8906A0(v6, &v12);
      sub_22E903BEC(v20);
    }
    *v4[4] = 1;
    *v4[5] = 0;
  }
  else
  {
    v7 = a1[1];
    if (v7[1])
      v8 = (unsigned int **)*v7;
    else
      v8 = (unsigned int **)(a1 + 2);
    if (!*(_BYTE *)a1[3])
    {
      v9 = **v8;
      sub_22E8FCA40(v3, *(_DWORD *)a1[5], 0x12F7u, 0, (uint64_t)v20);
      v10 = sub_22E8906A0((uint64_t)v20, &v18);
      v15 = 0;
      v14 = 0;
      v12 = v9 | (v9 << 32);
      v13 = 0;
      memset(&v16[12], 0, 11);
      strcpy(v16, "template<> ");
      v17 = 11;
      sub_22E890748(v10, &v12);
      if ((char)v17 < 0)
        operator delete(*(void **)v16);
      sub_22E903BEC(v20);
    }
  }
  return v5 != 0;
}

unsigned int *sub_22ED602F4(_QWORD *a1, uint64_t a2)
{
  unsigned int *result;
  unsigned int *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int *v11;
  unint64_t v12;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20[24];
  uint64_t v21;

  v21 = a2;
  result = (unsigned int *)sub_22F0F08CC(&v21);
  if (result)
  {
    v5 = result;
    sub_22E8FCA40(a1, result[6], 0x17D7u, 0, (uint64_t)v20);
    v6 = v5[7] & 0x7F;
    if (v6 == 30)
      v7 = 3;
    else
      v7 = 4;
    if (v6 == 31)
      v8 = 2;
    else
      v8 = v7;
    if (v6 == 29)
      v8 = 0;
    if (v6 == 28)
      v9 = 1;
    else
      v9 = v8;
    v19 = v9;
    v10 = sub_22E8900C4((uint64_t)v20, &v19);
    v18 = *((_QWORD *)v5 + 5);
    sub_22E894538(v10, &v18);
    return sub_22E903BEC(v20);
  }
  else if ((a2 & 6) == 2)
  {
    v11 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    if ((a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v12 = *v11;
      if ((v12 & 3) == 0 && v12 >= 4)
      {
        v14 = v11 + 2;
        v15 = 8 * (v12 >> 2);
        do
        {
          sub_22E8FCA40(a1, *(_DWORD *)(*(_QWORD *)v14 + 24), 0x17D7u, 0, (uint64_t)v20);
          v19 = 0;
          v16 = sub_22E8900C4((uint64_t)v20, &v19);
          v17 = *(_QWORD *)v14;
          v14 += 2;
          v18 = *(_QWORD *)(v17 + 40);
          sub_22E894538(v16, &v18);
          result = sub_22E903BEC(v20);
          v15 -= 8;
        }
        while (v15);
      }
    }
  }
  return result;
}

void sub_22ED60438(unsigned __int8 *a1@<X1>, uint64_t a2@<X0>, unsigned __int8 **a3@<X8>)
{
  unsigned __int8 *v3;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  unsigned __int8 **v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  int v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  _BYTE *v26;
  const char *v27;
  uint64_t v28;
  uint64_t (**v32)();
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  int v42;
  void **v43;
  void *__p[2];
  unsigned __int8 *v45;
  unsigned __int8 **v46;
  uint64_t v47;
  _QWORD v48[6];

  v3 = a1;
  v48[4] = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a2 + 80);
  v7 = sub_22EFFA6B0(a1);
  if ((*v7 & 0xFE) != 0x70)
    goto LABEL_7;
  v8 = v7;
  if ((*(_DWORD *)v7 & 0xFC0000) != 0x500000)
    goto LABEL_7;
  v9 = sub_22EFFA6B0(*((unsigned __int8 **)v7 + 2));
  if ((*v9 & 0xFE) != 0x70)
    goto LABEL_7;
  if ((*(_DWORD *)v9 & 0xFC0000) != 0x380000)
    goto LABEL_7;
  if (**((unsigned __int8 **)v9 + 3) != 181)
    goto LABEL_7;
  v10 = *((_DWORD *)v9 + 1);
  if ((v10 & 0x80000000) == 0)
    goto LABEL_7;
  v27 = sub_22F142460(v10, *(_QWORD *)(v6 + 88), *(_DWORD **)(v6 + 56));
  if (v28 != 17)
  {
    if (v28 != 16)
      goto LABEL_7;
    if (*(_QWORD *)v27 != 0x5F545045434E4F43 || *((_QWORD *)v27 + 1) != 0x5345524955514552)
      goto LABEL_7;
LABEL_46:
    v3 = (unsigned __int8 *)*((_QWORD *)v8 + 3);
    goto LABEL_7;
  }
  if (*(_QWORD *)v27 == 0x5F545045434E4F43 && *((_QWORD *)v27 + 1) == 0x5345524955514552 && v27[16] == 95)
    goto LABEL_46;
LABEL_7:
  v46 = (unsigned __int8 **)v48;
  v47 = 0x400000000;
  sub_22ED60848(v3, (uint64_t)&v46);
  if ((_DWORD)v47)
  {
    v11 = v46;
    v12 = 8 * v47;
    while (1)
    {
      v13 = *v11;
      v14 = sub_22EFFA6B0(*v11);
      v15 = *v14;
      if (v15 != 117 && v15 != 181)
      {
        v16 = v14;
        LODWORD(v32) = 4;
        v35 = 0;
        LODWORD(v34) = 3;
        __p[0] = (void *)*(unsigned int *)(a2 + 1704);
        sub_22EB4DDB8(a2 + 3688, (int *)&v32, (int *)__p, (__int16 *)(a2 + 1693), &v35, (int *)&v34);
        v17 = *(unsigned int *)(a2 + 3696);
        v18 = v17 - 2;
        v19 = *(_QWORD *)(a2 + 3688);
        v20 = *(_DWORD *)(v19 + 576 * (v17 - 2));
        if (v20 == 5)
        {
          *(_BYTE *)(v19 + 576 * v17 - 4) = *(_BYTE *)(v19 + 576 * v18 + 572);
          v21 = 1;
        }
        else if (v20 == 2)
        {
          *(_BYTE *)(v19 + 576 * v17 - 4) = 1;
          v21 = *(_BYTE *)(v19 + 576 * v18 + 573) != 0;
        }
        else
        {
          v21 = 0;
          *(_BYTE *)(v19 + 576 * v17 - 4) = 0;
        }
        v22 = v19 + 576 * v17;
        *(_BYTE *)(v22 - 3) = v21;
        *(_WORD *)(a2 + 1693) = 0;
        if (*(_DWORD *)(a2 + 1848))
        {
          llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(a2 + 1776), (llvm::SmallPtrSetImplBase *)(v22 - 560));
          sub_22EAEAE08(a2 + 1840, (uint64_t *)(v22 - 496));
        }
        LOBYTE(v35) = 0;
        v23 = sub_22F005310(v13, (uint64_t)&v35, *(_QWORD *)(a2 + 88), 0);
        v24 = v35;
        sub_22EB48E64(a2);
        if (v23)
        {
          if (!v24)
            break;
        }
      }
      ++v11;
      v12 -= 8;
      if (!v12)
        goto LABEL_22;
    }
  }
  else
  {
LABEL_22:
    v16 = sub_22EFFA6B0(v3);
  }
  __p[0] = 0;
  __p[1] = 0;
  v45 = 0;
  v36 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 1;
  v38 = 0;
  v39 = 0;
  v37 = 0;
  v35 = MEMORY[0x24BED83D8] + 16;
  v43 = __p;
  llvm::raw_ostream::SetBufferAndMode();
  *(_QWORD *)&v34 = sub_22E8FCD8C(*(_QWORD *)(a2 + 88), *(_QWORD *)(a2 + 80)) | 0x20000000000;
  *((_QWORD *)&v34 + 1) = v25;
  v32 = &off_24FAB9238;
  v33 = v34;
  sub_22F0D9044(v16, (uint64_t)&v35, (uint64_t)&v32, &v34, 0, "\n", 1uLL, 0);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v35);
  *a3 = v16;
  v26 = a3 + 1;
  if (SHIBYTE(v45) < 0)
  {
    sub_22E3BB2B4(v26, __p[0], (unint64_t)__p[1]);
    if (SHIBYTE(v45) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)v26 = *(_OWORD *)__p;
    a3[3] = v45;
  }
  if (v46 != v48)
    free(v46);
}

_BYTE *sub_22ED60848(unsigned __int8 *a1, uint64_t a2)
{
  unsigned __int8 *v3;
  _BYTE *result;
  _BYTE *v5;
  unsigned int v6;

  v3 = a1;
  result = sub_22EFFA6B0(a1);
  if ((*result & 0xFE) == 0x70)
  {
    v5 = result;
    while ((*(_DWORD *)v5 & 0xFC0000) == 0x4C0000)
    {
      sub_22ED60848(*((_QWORD *)v5 + 2), a2);
      v3 = (unsigned __int8 *)*((_QWORD *)v5 + 3);
      result = sub_22EFFA6B0(v3);
      v5 = result;
      if ((*result & 0xFE) != 0x70)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v6 = *(_DWORD *)(a2 + 8);
    if (v6 >= *(_DWORD *)(a2 + 12))
    {
      result = (_BYTE *)llvm::SmallVectorBase<unsigned int>::grow_pod();
      v6 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v6) = v3;
    ++*(_DWORD *)(a2 + 8);
  }
  return result;
}

unint64_t sub_22ED60904(_QWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  BOOL v7;
  _DWORD *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  unint64_t v22;
  char v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t j;
  int v35;
  unint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  _OWORD *v49;
  _OWORD *v50;
  __int128 v51;
  int v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  _OWORD *v56;
  _OWORD *v57;
  __int128 v58;
  uint64_t v60;
  char v61;
  unint64_t v62;
  _DWORD *v63;
  uint64_t v64;
  uint64_t v65;
  void **v66;
  size_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 *v70;
  _OWORD *v71;
  uint64_t v72;
  unsigned __int8 *v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  unsigned __int8 *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  unsigned int v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void **v89;
  int v90;
  unsigned __int8 *v91;
  unint64_t v92;
  int v93;
  _OWORD *v94;
  unint64_t v95;
  int v96;
  _BYTE v97[24];
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  void *__p[2];
  uint64_t v102;
  int32x2_t v103;
  unsigned int v104;
  unsigned __int8 k;
  void *v106[2];
  _QWORD v107[8];
  int v108;
  char v109;
  void *v110;
  uint64_t v111;
  _BYTE v112[96];
  void *v113;
  uint64_t v114;
  llvm *v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __int16 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;

  v124 = *MEMORY[0x24BDAC8D0];
  v100 = a2;
  v99 = a3;
  v7 = (a2 & 6) != 2;
  v8 = (_DWORD *)(a2 & 0xFFFFFFFFFFFFFFF8);
  if ((a2 & 0xFFFFFFFFFFFFFFF8) == 0)
    v7 = 1;
  if (v7)
  {
    v9 = a2 & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v9 = a2 & 0xFFFFFFFFFFFFFFF8;
    if ((*v8 & 3) == 2)
    {
      v9 = a2 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        a2 = *(_QWORD *)(v9 + 24);
        v9 = a2 & 0xFFFFFFFFFFFFFFF8;
        v38 = (a2 & 6) != 2 || v9 == 0;
      }
      while (!v38 && (*(_DWORD *)v9 & 3) == 2);
    }
  }
  if ((~(_BYTE)a2 & 6) == 0)
  {
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 8);
      if ((v10 & 4) == 0)
        return sub_22F36CB1C(a1[11], 6u, v10 & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(v9 + 16), a4);
    }
  }
  if (!v7 && (*v8 & 3) == 1)
  {
    v17 = 0;
    if ((sub_22ED61690(a1, 0, (unint64_t *)&v100, a3, 1) & 1) != 0)
      return v17;
  }
  v11 = sub_22F0F08CC(&v100);
  if (v11)
  {
    v12 = v11;
    v13 = *(_DWORD *)(v11 + 28) & 0x7F;
    v14 = v13 > 0x1F;
    v15 = (1 << v13) & 0xA8000000;
    if (v14 || v15 == 0)
    {
      v110 = v112;
      v111 = 0x400000000;
      v17 = 0;
      if ((sub_22ED61988(a1, v11, a3, a4, 0, &v110, 1, 0) & 1) != 0)
        goto LABEL_115;
      if ((*(_DWORD *)(v12 + 28) & 0x7F) == 0x1E)
      {
        v19 = *(_QWORD *)(v12 + 48);
        if ((*(_BYTE *)(v19 + 28) & 0x80) != 0)
        {
LABEL_96:
          v17 = 0;
          goto LABEL_115;
        }
        v106[0] = v107;
        v108 = 0;
        v109 = 0;
        v107[0] = v110;
        v107[1] = v111;
        v106[1] = (void *)0x400000001;
        v108 = sub_22EFE90A8(*(_QWORD *)(v12 + 56));
        v113 = a1;
        v114 = 1;
        for (i = 16; i != 80; i += 16)
          *(void **)((char *)&v113 + i) = (void *)-4096;
        v117 = &v119;
        v118 = 0x100000000;
        v120 = a1[1503];
        v121 = 0;
        v122 = 0;
        a1[1503] = &v113;
        sub_22EE00E90(&v103, (uint64_t)a1, 0, a3, 0, v12, 0, v20, 0, 0, 0);
        if ((_BYTE)v104)
        {
          v22 = 0;
LABEL_25:
          v23 = 0;
          goto LABEL_86;
        }
        v22 = sub_22EE08D2C(a1, *(_QWORD *)((*(_QWORD *)(v19 + 80) & 0xFFFFFFFFFFFFFFF8)+ ((2 * *(_QWORD *)(v19 + 80)) & 8)), v106, *(unsigned int *)(v12 + 24), *(_QWORD *)(v12 + 40));
        if (v22 > 0xF)
        {
          v23 = 1;
        }
        else
        {
          v23 = 0;
          v39 = *(_QWORD *)(v12 + 40);
          if ((v39 & 7) == 0)
          {
            v40 = v39 & 0xFFFFFFFFFFFFFFF8;
            if (v40)
            {
              v41 = *(_QWORD *)(v40 + 16);
              if (*(_DWORD *)v41 == 11)
              {
                v42 = *(_QWORD *)(v41 + 16);
                v43 = *(_QWORD *)(v41 + 19);
                v44 = 0x695F656C62616E65;
              }
              else
              {
                if (*(_DWORD *)v41 != 13)
                  goto LABEL_25;
                v42 = *(_QWORD *)(v41 + 16);
                v43 = *(_QWORD *)(v41 + 21);
                v44 = 0x656C62616E655F5FLL;
              }
              if (v42 != v44 || v43 != 0x745F66695F656C62)
                goto LABEL_25;
              v60 = sub_22EE03478((uint64_t)a1);
              v23 = 0;
              if (v61)
              {
                v62 = v60;
                if (v60)
                {
                  if (!*(_BYTE *)(v60 + 12) || *(_DWORD *)(*(_QWORD *)(v60 + 24) + 24) != 5030)
                    goto LABEL_25;
                  v63 = *(_DWORD **)a4;
                  if (**(_DWORD **)a4 == 7)
                  {
                    __p[0] = 0;
                    __p[1] = 0;
                    v102 = 0;
                    sub_22ED60438((unsigned __int8 *)(*((_QWORD *)v63 + 3) & 0xFFFFFFFFFFFFFFFCLL), (uint64_t)a1, (unsigned __int8 **)v97);
                    v64 = *(_QWORD *)v97;
                    if (SHIBYTE(v102) < 0)
                      operator delete(__p[0]);
                    *(_OWORD *)__p = *(_OWORD *)&v97[8];
                    v102 = v98;
                    *(_DWORD *)v97 = 0;
                    *(_QWORD *)&v97[8] = 0;
                    *(_QWORD *)&v97[16] = 0;
                    LODWORD(v98) = 0;
                    sub_22E9F6EB8(v62, (uint64_t)v97);
                    v65 = a1[11] + 2128;
                    v91 = 0;
                    v92 = v65;
                    v93 = 5031;
                    if (v102 >= 0)
                      v66 = __p;
                    else
                      v66 = (void **)__p[0];
                    v90 = *(_DWORD *)v97;
                    if (v102 >= 0)
                      v67 = HIBYTE(v102) & 0x7F;
                    else
                      v67 = (size_t)__p[1];
                    sub_22E3B89A8(&v91, v66, v67);
                    sub_22F0D4E74(v64);
                    v69 = v68;
                    v70 = v91;
                    if (!v91)
                    {
                      v70 = (unsigned __int8 *)sub_22E3B8AAC(v92);
                      v91 = v70;
                    }
                    sub_22E4D6448((uint64_t)(v70 + 336), v69, 1);
                    v96 = v93;
                    v94 = 0;
                    v95 = v92;
                    if (v91)
                    {
                      v71 = (_OWORD *)sub_22E3B8AAC(v92);
                      v72 = 0;
                      v94 = v71;
                      v73 = v91;
                      v74 = *((_OWORD *)v91 + 1);
                      *v71 = *(_OWORD *)v91;
                      v71[1] = v74;
                      v75 = *((_OWORD *)v73 + 5);
                      v77 = *((_OWORD *)v73 + 2);
                      v76 = *((_OWORD *)v73 + 3);
                      v71[4] = *((_OWORD *)v73 + 4);
                      v71[5] = v75;
                      v71[2] = v77;
                      v71[3] = v76;
                      do
                      {
                        std::string::operator=((std::string *)((char *)v71 + v72 + 96), (const std::string *)&v73[v72 + 96]);
                        v72 += 24;
                      }
                      while (v72 != 240);
                      sub_22E78D560((uint64_t)(v71 + 21), (uint64_t)(v73 + 336));
                      sub_22E78D658((uint64_t)(v71 + 28), (uint64_t *)v73 + 56);
                    }
                    sub_22E903704(v62, v90, (uint64_t)&v94);
                    if (v94 && v95)
                    {
                      sub_22E3BB10C(v95, (unint64_t)v94);
                      v94 = 0;
                    }
                    if (v91 && v92)
                      sub_22E3BB10C(v92, (unint64_t)v91);
                    if (*(_QWORD *)&v97[8] && *(_QWORD *)&v97[16])
                      sub_22E3BB10C(*(unint64_t *)&v97[16], *(unint64_t *)&v97[8]);
                    if (SHIBYTE(v102) < 0)
                      operator delete(__p[0]);
                  }
                  v23 = 0;
                }
              }
            }
          }
        }
LABEL_86:
        sub_22EE014E4(&v103);
        if (!(_BYTE)v121)
        {
          if ((_DWORD)v118)
          {
            v87 = 0;
            v88 = 8 * v118;
            do
            {
              v89 = *(void ***)((char *)v117 + v87);
              if (v89)
              {
                if (*v89 != v89 + 2)
                  free(*v89);
                MEMORY[0x2348A0E9C](v89, 0x1080C40ED926357);
              }
              v87 += 8;
            }
            while (v88 != v87);
          }
          *((_QWORD *)v113 + 1503) = v120;
          LOBYTE(v121) = 1;
        }
        if (v117 != &v119)
          free(v117);
        if ((v114 & 1) == 0)
          llvm::deallocate_buffer(v115, (void *)(16 * v116));
        if (v106[0] != v107)
          free(v106[0]);
        if ((v23 & 1) == 0)
          goto LABEL_96;
LABEL_114:
        v17 = sub_22EF64FE8(a1[11], v100, a4, v22);
LABEL_115:
        if (v110 != v112)
          free(v110);
        return v17;
      }
      if ((sub_22F0F0A4C(&v100) & 4) != 0)
      {
LABEL_49:
        v33 = sub_22EF65280(a1[11], v100, (uint64_t)v110, v111);
        if ((*(_DWORD *)(v12 + 28) & 0x7F) == 0x1C)
        {
          for (j = a1[27]; j; j = sub_22EFCB77C(j))
          {
            v35 = *(_WORD *)(j + 8) & 0x7F;
            if (v35 == 16 || v35 == 83)
              break;
            if ((v35 - 38) >= 0xFFFFFFFD)
            {
              if ((*(_DWORD *)(j - 36) & 0x7F) == 0x25 || (v36 = *(_QWORD *)(j + 72), v36 >= 8) && (v36 & 4) == 0)
              {
                v37 = *(_QWORD *)(j - 16);
                v22 = v37 ? v37 & 0xFFFFFFFFFFFFFFF0 : sub_22EF6462C(a1[11], j - 64);
                if (v33 == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF0) + 32) & 0xFFFFFFFFFFFFFFF0)
                                      + 8))
                  goto LABEL_114;
              }
            }
          }
        }
        v22 = v33;
        goto LABEL_114;
      }
      if ((_DWORD)v111)
      {
        v24 = (char *)v110;
        v25 = 24 * v111;
        while ((sub_22F0EEB00((uint64_t)v24) & 4) == 0)
        {
          v24 += 24;
          v25 -= 24;
          if (!v25)
            goto LABEL_31;
        }
        goto LABEL_49;
      }
LABEL_31:
      if ((*(_DWORD *)(v12 + 28) & 0x7F) != 0x1A)
      {
        if ((*(_DWORD *)(v12 + 28) & 0x7F) == 0x1C)
        {
          *(_QWORD *)v97 = 0;
          v27 = sub_22EFE9F28(v12, (uint64_t)v110, v111, (uint64_t)v97);
          if (!v27)
          {
            v28 = *(_QWORD *)(v12 + 16);
            v29 = (_QWORD *)(v28 & 0xFFFFFFFFFFFFFFF8);
            if ((v28 & 4) != 0)
              v29 = (_QWORD *)*v29;
            v27 = sub_22EFEB760(a1[11], (unsigned __int16)*(_DWORD *)(*(_QWORD *)(v12 + 48) + 72) >> 13, (uint64_t)v29, *(_DWORD *)(*(_QWORD *)(v12 + 48) + 56), *(_DWORD *)(v12 + 24), v12, (__int128 *)v110, v111, 0);
            sub_22EFEA2C8(v12, v27, *(uint64_t *)v97);
            if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)v12 + 24))(v12))
            {
              v30 = *(_QWORD *)(v12 + 16);
              v31 = v30 & 0xFFFFFFFFFFFFFFF8;
              if ((v30 & 4) != 0)
                v31 = *(_QWORD *)(v31 + 8);
              sub_22EFC80C4(v27, v31);
            }
          }
          if ((*(_BYTE *)(v27 + 180) & 7) == 0 && (*(_BYTE *)(*(_QWORD *)(v12 + 48) + 29) & 1) != 0)
          {
            sub_22EE00E90(v106, (uint64_t)a1, 0, a3, 0, v27, 0, v26, 0, 0, 0);
            if (!LOBYTE(v106[1]))
            {
              v113 = &v115;
              LODWORD(v117) = 0;
              BYTE4(v117) = 0;
              v115 = (llvm *)v110;
              v116 = v111;
              v114 = 0x400000001;
              sub_22EE3364C((uint64_t)a1, (uint64_t)&v113, *(_QWORD *)(v12 + 48), v27);
              if (v113 != &v115)
                free(v113);
            }
            sub_22EE014E4((int32x2_t *)v106);
          }
          sub_22EB17F48(a1, v27, &v99, 1, 0, 0, 0, 0);
          v32 = *(_QWORD *)(v27 + 48);
          if (v32)
            v22 = v32 & 0xFFFFFFFFFFFFFFF0;
          else
            v22 = sub_22EF6462C(a1[11], v27);
          goto LABEL_114;
        }
        goto LABEL_113;
      }
      if (!*(_DWORD *)(v12 + 64))
      {
        v45 = a1[11];
        if (!sub_22F110744(*(_QWORD *)(*((_QWORD *)v110 + 4) & 0xFFFFFFFFFFFFFFF0), v45))
        {
          if ((*(_DWORD *)(*(_QWORD *)a4 + 32) - 5) > 1)
            sub_22F0EFE08(*(_QWORD *)a4 + 32);
          else
            v47 = *(_DWORD *)((*(_QWORD *)(*(_QWORD *)a4 + 56) & 0xFFFFFFFFFFFFFFFCLL) + 16);
          sub_22E8FCA40(a1, v47, 0xE2Cu, 0, (uint64_t)&v113);
          sub_22E903BEC((unsigned int *)&v113);
LABEL_113:
          v22 = 0;
          goto LABEL_114;
        }
        *(_OWORD *)v97 = *((_OWORD *)v110 + 3);
        *(_QWORD *)&v97[16] = *((_QWORD *)v110 + 8);
        sub_22E466FDC((uint64_t)v97, (uint64_t)&v91);
        if (sub_22E8BAD7C((uint64_t)&v91, 0))
        {
          if ((*(_DWORD *)(*(_QWORD *)a4 + 64) - 5) > 1)
            sub_22F0EFE08(*(_QWORD *)a4 + 64);
          else
            v46 = *(_DWORD *)((*(_QWORD *)(*(_QWORD *)a4 + 88) & 0xFFFFFFFFFFFFFFFCLL) + 16);
          sub_22E8FCA40(a1, v46, 0xE2Du, 0, (uint64_t)&v113);
          sub_22E903BEC((unsigned int *)&v113);
          v22 = 0;
        }
        else
        {
          v48 = *(_QWORD *)&v97[16];
          v113 = &v115;
          v114 = 0x800000000;
          v123 = 0;
          v49 = (_OWORD *)sub_22E78DF7C((uint64_t)&v113, *(_QWORD *)a4 + 32, 1);
          v50 = (char *)v113 + 32 * v114;
          v51 = v49[1];
          *v50 = *v49;
          v50[1] = v51;
          LODWORD(v114) = v114 + 1;
          v52 = BYTE4(v92);
          v104 = v92;
          if (v92 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v103);
          else
            v103 = 0;
          for (k = v52; ; v52 = k)
          {
            v53 = v52
                ? llvm::APInt::compare((llvm::APInt *)&v103, (const llvm::APInt *)&v91)
                : llvm::APInt::compareSigned((llvm::APInt *)&v103, (const llvm::APInt *)&v91);
            if ((v53 & 0x80000000) == 0)
              break;
            sub_22F0EEA4C((uint64_t)__p, v45, &v103, v48);
            if ((*(_DWORD *)(*(_QWORD *)a4 + 64) - 5) > 1)
            {
              sub_22F0EFE08(*(_QWORD *)a4 + 64);
              v54 = v55;
            }
            else
            {
              v54 = *(_DWORD *)((*(_QWORD *)(*(_QWORD *)a4 + 88) & 0xFFFFFFFFFFFFFFFCLL) + 16);
            }
            sub_22EDC0108((uint64_t)a1, (uint64_t)__p, v54, (uint64_t)v106);
            v56 = (_OWORD *)sub_22E78DF7C((uint64_t)&v113, (unint64_t)v106, 1);
            v57 = (char *)v113 + 32 * v114;
            v58 = v56[1];
            *v57 = *v56;
            v57[1] = v58;
            LODWORD(v114) = v114 + 1;
            llvm::APInt::operator++();
          }
          if (v104 >= 0x41 && *(_QWORD *)&v103)
            MEMORY[0x2348A0E84](*(_QWORD *)&v103, 0x1000C8000313F17);
          v22 = sub_22ED60904(a1, *((_QWORD *)v110 + 1), a3, &v113);
          if (v113 != &v115)
            free(v113);
        }
        if (v92 < 0x41)
          goto LABEL_114;
        v78 = v91;
        if (!v91)
          goto LABEL_114;
LABEL_163:
        MEMORY[0x2348A0E84](v78, 0x1000C8000313F17);
        goto LABEL_114;
      }
      v79 = *((_QWORD *)v110 + 2);
      *(_OWORD *)v106 = *(_OWORD *)v110;
      v107[0] = v79;
      v80 = *((unsigned int *)v110 + 7);
      v81 = *((_QWORD *)v110 + 4);
      sub_22E466FDC((uint64_t)v106, (uint64_t)v97);
      if (sub_22F30FDA8((uint64_t)v97, v80))
      {
        v82 = *(_QWORD *)a4;
        if ((**(_DWORD **)a4 - 5) > 1)
          sub_22F0EFE08(v82);
        else
          v83 = *(_DWORD *)((*(_QWORD *)(v82 + 24) & 0xFFFFFFFFFFFFFFFCLL) + 16);
        sub_22E8FCA40(a1, v83, 0x1328u, 0, (uint64_t)&v113);
        sub_22E903BEC((unsigned int *)&v113);
        v22 = 0;
        v84 = *(_DWORD *)&v97[8];
LABEL_178:
        if (v84 < 0x41)
          goto LABEL_114;
        v78 = *(unsigned __int8 **)v97;
        if (!*(_QWORD *)v97)
          goto LABEL_114;
        goto LABEL_163;
      }
      v84 = *(_DWORD *)&v97[8];
      if (v97[12])
      {
        v85 = *(uint64_t **)v97;
        if (*(_DWORD *)&v97[8] < 0x41u)
          v85 = (uint64_t *)v97;
      }
      else
      {
        if (*(_DWORD *)&v97[8] <= 0x40u)
        {
          v86 = (uint64_t)(*(_QWORD *)v97 << -v97[8]) >> -v97[8];
LABEL_177:
          v22 = *(_QWORD *)(v81 + 24 * v86 + 8);
          goto LABEL_178;
        }
        v85 = *(uint64_t **)v97;
      }
      v86 = *v85;
      goto LABEL_177;
    }
  }
  if ((v100 & 6) != 2 || (v100 & 0xFFFFFFFFFFFFFFF8) == 0 || (~*(_DWORD *)(v100 & 0xFFFFFFFFFFFFFFF8) & 3) != 0)
  {
    sub_22E8FCA40(a1, a3, 0x12D0u, 0, (uint64_t)&v113);
    sub_22F30C54C((uint64_t)&v113, &v100);
    sub_22E903BEC((unsigned int *)&v113);
    sub_22ED602F4(a1, v100);
    return 0;
  }
  return sub_22EF64FE8(a1[11], v100, a4, 0);
}

uint64_t sub_22ED61690(_QWORD *a1, uint64_t *a2, unint64_t *a3, int a4, int a5)
{
  _DWORD *v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  uint64_t v23;
  int v24;
  uint64_t (**v25)();
  int v26;
  char v27;
  uint64_t v28;
  _BYTE v29[11];
  _QWORD v30[2];
  void *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  _BYTE v38[64];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  int v44;
  _QWORD v45[2];
  uint64_t v46;
  __int16 v47;
  int v48;
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v9 = (_DWORD *)(*a3 & 0xFFFFFFFFFFFFFFF8);
  if ((*a3 & 6) != 2 || v9 == 0)
  {
    v11 = 0;
  }
  else if ((*v9 & 3) == 1)
  {
    v11 = *a3 & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v11 = 0;
  }
  v12 = *(_QWORD *)(v11 + 8);
  v35 = 0;
  v36 = v38;
  v37 = 0x800000000;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v42 = a1;
  v43 = v12;
  v44 = a4;
  sub_22EFC6D6C((uint64_t)v45, v12);
  v45[1] = 0;
  v46 = 0;
  v47 = 0;
  v48 = 257;
  v49 = 0;
  sub_22EC56024((uint64_t)&v35);
  v27 = 1;
  v26 = 16843009;
  memset(v29, 0, sizeof(v29));
  v28 = 0;
  v25 = &off_24FAB9260;
  sub_22EC6AB20((uint64_t)a1, &v43, v46, a2, 0, (uint64_t)&v25, 1, 0, (uint64_t)v30, 0, 0, 1u);
  if (v30[0] && v32 && *(_QWORD *)v31)
  {
    v23 = a1[11] + 2128;
    v24 = 4020;
    v15 = *(void **)(v11 + 8);
    v16 = (void **)sub_22E3B8AAC(v23);
    v22 = v16;
    v17 = *(unsigned __int8 *)v16;
    *((_BYTE *)v16 + v17 + 1) = 10;
    *(_BYTE *)v16 = v17 + 1;
    v16[v17 + 2] = v15;
    sub_22EC6BEF8((uint64_t)a1, (uint64_t)v30, (uint64_t)&v22, 1);
    if (v22 && v23)
      sub_22E3BB10C(v23, (unint64_t)v22);
    v18 = sub_22F2E6D78((uint64_t)v30);
    if (v18)
    {
      if ((*(_DWORD *)(v18 + 28) & 0x7Fu) - 26 >= 7)
        v19 = 0;
      else
        v19 = v18 & 0xFFFFFFFFFFFFFFF9;
    }
    else
    {
      v19 = 0;
    }
    v13 = 0;
    *a3 = v19;
  }
  else
  {
    if (a5)
    {
      sub_22E8FCA40(a1, v44, 0xFB3u, 0, (uint64_t)&v22);
      v21 = v43;
      sub_22E894538((uint64_t)&v22, &v21);
      sub_22E903BEC((unsigned int *)&v22);
    }
    v13 = 1;
  }
  v22 = (void **)&v34;
  sub_22E8D19C8(&v22);
  if (v31 != &v33)
    free(v31);
  if (BYTE1(v48))
  {
    if ((_DWORD)v35 == 5)
    {
      sub_22EC64D18(v42, (uint64_t)&v35);
    }
    else if (v40 && (*(_DWORD *)(v42[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v42, (uint64_t)&v35);
    }
  }
  if (v39)
  {
    v20 = sub_22EC6CBD0(v39);
    MEMORY[0x2348A0E9C](v20, 0x10E0C409F09D3C3);
  }
  if (v36 != v38)
    free(v36);
  return v13;
}

uint64_t sub_22ED61988(_QWORD *a1, int *a2, unsigned int a3, uint64_t a4, int a5, uint64_t a6, int a7, _BYTE *a8)
{
  unsigned int *v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  int v23;
  unsigned int *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  unint64_t v31;
  uint64_t v32;
  __int128 v33;
  char *v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _OWORD *v53;
  _OWORD *v54;
  __int128 v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  __int128 v59;
  int *v60;
  int v61;
  int v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  __int128 v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t j;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  unsigned int v80;
  unsigned int *v81;
  int v82;
  int v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  unint64_t v91;
  uint64_t v92;
  __int128 v93;
  int v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  unint64_t v101;
  uint64_t v102;
  __int128 v103;
  int v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  __int128 v108;
  char *v109;
  int v110;
  unint64_t v111;
  int v112;
  std::string::size_type *v113;
  uint64_t v115;
  std::string::size_type *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unsigned int *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unsigned int *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  int v132;
  unint64_t v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  void **v138;
  int v139;
  int v140;
  unint64_t v141;
  unsigned int *v142;
  unsigned int v144;
  unsigned int v145;
  uint64_t v147;
  int v148;
  uint64_t v149;
  unsigned int v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  _BYTE v155[96];
  int *v156;
  unint64_t v157;
  int v158;
  __int128 v159;
  uint64_t v160;
  int *v161;
  _QWORD *v162;
  uint64_t v163;
  llvm *v164;
  unsigned int v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  __int16 v170;
  uint64_t v171;
  void *__src;
  uint64_t v173;
  _BYTE v174[48];
  void *v175;
  uint64_t v176;
  _BYTE v177[256];
  uint64_t v178;
  std::string::size_type *v179;
  uint64_t v180;
  _QWORD v181[10];

  v181[8] = *MEMORY[0x24BDAC8D0];
  v156 = a2;
  if (a8)
    *a8 = 0;
  v175 = v177;
  v176 = 0x800000000;
  if (*(_DWORD *)(a4 + 8))
  {
    sub_22EDA43D4((uint64_t)&v175, a4);
    a2 = v156;
  }
  v178 = *(_QWORD *)(a4 + 272);
  v12 = *(unsigned int **)((*(uint64_t (**)(int *))(*(_QWORD *)a2 + 56))(a2) + 56);
  v13 = v156[7];
  __src = v174;
  v173 = 0x200000000;
  v14 = HIDWORD(v178);
  v15 = v176;
  v162 = a1;
  v163 = 1;
  for (i = 2; i != 10; i += 2)
    (&v162)[i] = (_QWORD *)-4096;
  v147 = a4;
  v166 = &v168;
  v167 = 0x100000000;
  v169 = a1[1503];
  v170 = 256;
  v171 = 0;
  a1[1503] = &v162;
  v17 = v12[3] & 0x1FFFFFFF;
  v142 = v12;
  v144 = a3;
  if (!(_DWORD)v17)
  {
    v71 = 0;
    goto LABEL_85;
  }
  v18 = 0;
  v140 = v13 & 0x7F;
  v19 = (uint64_t *)(v12 + 4);
  v148 = a3;
  v145 = v14;
  v141 = a3 | ((unint64_t)v14 << 32);
  v20 = (uint64_t)&v12[2 * v17 + 4];
  v149 = v15;
  while (2)
  {
    v151 = v18;
    if (v18 == (_DWORD)v15)
      v21 = a5;
    else
      v21 = 1;
    while (1)
    {
      v22 = *v19;
      v23 = *(_DWORD *)(*v19 + 28) & 0x7F;
      if (*v19 && v23 == 38)
      {
        if ((*(_BYTE *)(v22 + 60) & 8) == 0)
          goto LABEL_30;
        v24 = (unsigned int *)(v22 + 64);
      }
      else
      {
        if ((!v22 || v23 != 59) && (!v22 || v23 != 32) || !*(_BYTE *)(v22 + 81))
          goto LABEL_30;
        v24 = (unsigned int *)(v22 + 84);
      }
      v25 = *v24;
      if ((_DWORD)v173 != (_DWORD)v25)
        break;
      if ((_DWORD)v25)
      {
        v26 = (char *)__src;
        v27 = sub_22E3CD3D4(a1[11] + 2032, 24 * v25, 3);
        v28 = 0;
        do
        {
          v29 = v27 + v28;
          v30 = *(_OWORD *)&v26[v28];
          *(_QWORD *)(v29 + 16) = *(_QWORD *)&v26[v28 + 16];
          *(_OWORD *)v29 = v30;
          v28 += 24;
        }
        while (24 * v25 != v28);
      }
      else
      {
        v27 = 0;
      }
      *((_QWORD *)&v159 + 1) = v27;
      LODWORD(v159) = 8;
      DWORD1(v159) = v25;
      v31 = sub_22E4EF088(a6, (unint64_t)&v159, 1);
      v32 = *(_QWORD *)a6 + 24 * *(unsigned int *)(a6 + 8);
      v33 = *(_OWORD *)v31;
      *(_QWORD *)(v32 + 16) = *(_QWORD *)(v31 + 16);
      *(_OWORD *)v32 = v33;
      ++*(_DWORD *)(a6 + 8);
      LODWORD(v173) = 0;
      if (++v19 == (uint64_t *)v20)
      {
        v71 = v151;
LABEL_83:
        v15 = v149;
        goto LABEL_85;
      }
    }
    if ((v21 & 1) == 0)
    {
      sub_22E8FCA40(a1, a3, 0x12B3u, 0, (uint64_t)&v159);
      LODWORD(v179) = 0;
      v117 = sub_22E8900C4((uint64_t)&v159, (int *)&v179);
      LODWORD(v152) = sub_22F31CFF0((uint64_t)a1, (unint64_t)v156 & 0xFFFFFFFFFFFFFFF9);
      v118 = sub_22E8900C4(v117, (int *)&v152);
      sub_22E890024(v118, (uint64_t *)&v156);
      sub_22E903BEC((unsigned int *)&v159);
      sub_22E8FCA40(a1, v156[6], 0x17D6u, 0, (uint64_t)&v159);
      v179 = (std::string::size_type *)(*v142 | ((unint64_t)v142[2] << 32));
      sub_22E8906A0((uint64_t)&v159, (uint64_t *)&v179);
      sub_22E903BEC((unsigned int *)&v159);
      goto LABEL_131;
    }
LABEL_30:
    if (v151 < v149)
    {
      if (!sub_22ED678A8((uint64_t)a1, v22, (uint64_t)v175 + 32 * v151, (uint64_t)v156, a3, v145, v173, a6, 0))
      {
        v34 = (char *)v175 + 32 * v151;
        v35 = *(_DWORD *)v34;
        if (*(_DWORD *)v34 == 1)
        {
          v36 = *v19;
          if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v34 + 1) & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
            goto LABEL_72;
        }
        else if (v35 == 7)
        {
          v36 = *v19;
          if (**((unsigned __int8 **)v34 + 1) != 213)
            goto LABEL_72;
        }
        else
        {
          v63 = 0;
          if (((1 << v35) & 0x13D) != 0)
          {
LABEL_66:
            v36 = *v19;
            goto LABEL_73;
          }
          v36 = *v19;
        }
        if (!sub_22EFC7864(v36))
          goto LABEL_63;
        v36 = *v19;
        v62 = *(_DWORD *)(*v19 + 28) & 0x7F;
        if (*v19 && v62 == 38)
        {
          if ((*(_BYTE *)(v36 + 60) & 8) != 0)
          {
LABEL_63:
            if ((v156[7] & 0x7F) == 0x1E || (v156[7] & 0x7F) == 0x1B)
            {
              v109 = (char *)v175 + 32 * v151;
              if ((*(_DWORD *)v109 - 5) > 1)
                sub_22F0EFE08((uint64_t)v109);
              else
                v110 = *(_DWORD *)((*((_QWORD *)v109 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 16);
              sub_22E8FCA40(a1, v110, 0x12CFu, 0, (uint64_t)&v159);
              LODWORD(v152) = (v156[7] & 0x7F) == 27;
              v115 = sub_22E8900C4((uint64_t)&v159, (int *)&v152);
              sub_22F0EFE08((uint64_t)v175 + 32 * v151);
              v179 = v116;
              sub_22E8906A0(v115, (uint64_t *)&v179);
              sub_22E903BEC((unsigned int *)&v159);
              sub_22E8FCA40(a1, *(_DWORD *)(*v19 + 24), 0x17E2u, 0, (uint64_t)v155);
              v81 = (unsigned int *)v155;
              goto LABEL_103;
            }
            v63 = 1;
            goto LABEL_66;
          }
        }
        else
        {
          if (!v36 || v62 != 59)
          {
            v63 = 0;
            if (!v36 || v62 != 32)
            {
LABEL_73:
              if (sub_22EFC7864(v36))
              {
                v64 = *(_DWORD *)(a6 + 8);
                v65 = *(_QWORD *)a6 + 24 * v64;
                v66 = *(_QWORD *)(v65 - 8);
                v159 = *(_OWORD *)(v65 - 24);
                v160 = v66;
                *(_DWORD *)(a6 + 8) = v64 - 1;
                v67 = sub_22E4EF088((uint64_t)&__src, (unint64_t)&v159, 1);
                v68 = (char *)__src + 24 * v173;
                v69 = *(_OWORD *)v67;
                *((_QWORD *)v68 + 2) = *(_QWORD *)(v67 + 16);
                *(_OWORD *)v68 = v69;
                LODWORD(v173) = v173 + 1;
              }
              else
              {
                ++v19;
              }
              v15 = v149;
              v71 = v151 + 1;
              if (v63)
              {
                if ((_DWORD)v173)
                {
                  sub_22F346110((unsigned int *)a6, *(_QWORD *)a6 + 24 * *(unsigned int *)(a6 + 8), __src, (_BYTE *)__src + 24 * v173);
                  LODWORD(v15) = v149;
                  LODWORD(v173) = 0;
                }
                if (v71 >= v15)
                  goto LABEL_94;
                v104 = ~v151 + v15;
                v105 = 32 * (v151 + 1);
                v74 = 0;
                do
                {
                  v106 = sub_22E4EF088(a6, (unint64_t)v175 + v105, 1);
                  v107 = *(_QWORD *)a6 + 24 * *(unsigned int *)(a6 + 8);
                  v108 = *(_OWORD *)v106;
                  *(_QWORD *)(v107 + 16) = *(_QWORD *)(v106 + 16);
                  *(_OWORD *)v107 = v108;
                  ++*(_DWORD *)(a6 + 8);
                  v105 += 32;
                  --v104;
                }
                while (v104);
                goto LABEL_132;
              }
              goto LABEL_77;
            }
          }
          if (*(_BYTE *)(v36 + 81))
            goto LABEL_63;
        }
LABEL_72:
        v63 = 0;
        goto LABEL_73;
      }
LABEL_131:
      v74 = 1;
      goto LABEL_132;
    }
    v37 = sub_22EFC7864(*v19);
    if (a5)
    {
      v82 = v173;
      if ((_DWORD)v173)
        v83 = v37;
      else
        v83 = 0;
      if (v83 == 1)
      {
        v84 = a1[11];
        v85 = (char *)__src;
        v86 = 24 * v173;
        v87 = sub_22E3CD3D4(v84 + 2032, v86, 3);
        v88 = 0;
        do
        {
          v89 = v87 + v88;
          v90 = *(_OWORD *)&v85[v88];
          *(_QWORD *)(v89 + 16) = *(_QWORD *)&v85[v88 + 16];
          *(_OWORD *)v89 = v90;
          v88 += 24;
        }
        while (v86 != v88);
        *((_QWORD *)&v159 + 1) = v87;
        LODWORD(v159) = 8;
        DWORD1(v159) = v82;
        v91 = sub_22E4EF088(a6, (unint64_t)&v159, 1);
        v74 = 0;
        v92 = *(_QWORD *)a6 + 24 * *(unsigned int *)(a6 + 8);
        v93 = *(_OWORD *)v91;
        *(_QWORD *)(v92 + 16) = *(_QWORD *)(v91 + 16);
        *(_OWORD *)v92 = v93;
        ++*(_DWORD *)(a6 + 8);
      }
      else
      {
        v74 = 0;
      }
      goto LABEL_132;
    }
    if (v37)
    {
      if (v19 + 1 == (uint64_t *)v20)
      {
        v94 = v173;
        if ((_DWORD)v173)
        {
          v95 = (char *)__src;
          v96 = 24 * v173;
          v97 = sub_22E3CD3D4(a1[11] + 2032, v96, 3);
          v98 = 0;
          do
          {
            v99 = v97 + v98;
            v100 = *(_OWORD *)&v95[v98];
            *(_QWORD *)(v99 + 16) = *(_QWORD *)&v95[v98 + 16];
            *(_OWORD *)v99 = v100;
            v98 += 24;
          }
          while (v96 != v98);
        }
        else
        {
          v97 = 0;
        }
        *((_QWORD *)&v159 + 1) = v97;
        LODWORD(v159) = 8;
        DWORD1(v159) = v94;
        v101 = sub_22E4EF088(a6, (unint64_t)&v159, 1);
        v102 = *(_QWORD *)a6 + 24 * *(unsigned int *)(a6 + 8);
        v103 = *(_OWORD *)v101;
        *(_QWORD *)(v102 + 16) = *(_QWORD *)(v101 + 16);
        *(_OWORD *)v102 = v103;
        ++*(_DWORD *)(a6 + 8);
        LODWORD(v173) = 0;
        v71 = v151;
        goto LABEL_83;
      }
      goto LABEL_131;
    }
    LODWORD(v152) = 0;
    v153 = 0;
    v154 = 0;
    v38 = *v19;
    v39 = *(_DWORD *)(*v19 + 28) & 0x7F;
    if (*v19 && v39 == 38)
    {
      v40 = sub_22EC624F8((uint64_t)a1, *v19, 0);
      v43 = (uint64_t)v156;
      if ((v40 & 1) != 0)
      {
        v44 = v145;
        v45 = sub_22ED6706C((uint64_t)a1, (uint64_t)v156, a3, v145, v38, a6, v41, v42);
        if (!v45)
          goto LABEL_131;
        v47 = *v45;
        v48 = (unint64_t)v45 & 0xFFFFFFFFFFFFFFFCLL | 2;
        LODWORD(v152) = 1;
        goto LABEL_47;
      }
      v161 = v156;
      v111 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(int *))(*(_QWORD *)v156 + 56))(v156) + 56)
                       + (((unint64_t)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v38 + 48) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                                     + 8) & 0xFFFFFFFFFFFFFFF0)
                                                             + 32) >> 13) & 0x7FFF8)
                       + 16);
      v179 = v181;
      v180 = 0x800000000;
      if (*(_QWORD *)(v111 + 72) >= 8uLL && (sub_22EC624F8((uint64_t)a1, v111, (uint64_t)&v179) & 1) == 0)
      {
        v112 = sub_22EFEB0E0(v111);
LABEL_128:
        sub_22EC6C5C8((uint64_t)a1, a3, v43, v112, v179, v180, 2, 1);
        goto LABEL_129;
      }
      goto LABEL_150;
    }
    v49 = sub_22EC624F8((uint64_t)a1, *v19, 0);
    if (v38 && v39 == 59)
    {
      v43 = (uint64_t)v156;
      if ((v49 & 1) != 0)
      {
        v44 = v145;
        v52 = sub_22ED67324((uint64_t)a1, (uint64_t)v156, a3, v145, v38, a6, v50, v51);
        if ((v52 & 1) != 0)
          goto LABEL_131;
        v47 = v52 & 0xFFFFFFFFFFFFFFFELL;
        LODWORD(v152) = 7;
        v48 = v52 & 0xFFFFFFFFFFFFFFFCLL | 1;
LABEL_47:
        v153 = v47;
        v154 = v48;
        goto LABEL_48;
      }
      v161 = v156;
      v119 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(int *))(*(_QWORD *)v156 + 56))(v156) + 56)
                       + (((unint64_t)*(unsigned int *)(v38 + 68) >> 17) & 0x7FF8)
                       + 16);
      v179 = v181;
      v180 = 0x800000000;
      if (*(_QWORD *)(v119 + 72) >= 4uLL && (sub_22EC624F8((uint64_t)a1, v119, (uint64_t)&v179) & 1) == 0)
      {
        sub_22F3B8B68(v119);
        goto LABEL_128;
      }
LABEL_150:
      v120 = *(unsigned int **)(v43 + 56);
      sub_22E8FCA40(a1, a3, 0x12B3u, 0, (uint64_t)&v159);
      LODWORD(v157) = 0;
      v121 = sub_22E8900C4((uint64_t)&v159, (int *)&v157);
      v158 = sub_22F31CFF0((uint64_t)a1, v43 & 0xFFFFFFFFFFFFFFF9);
      v122 = sub_22E8900C4(v121, &v158);
      sub_22E890024(v122, (uint64_t *)&v161);
      sub_22E903BEC((unsigned int *)&v159);
      sub_22E8FCA40(a1, v161[6], 0x17D6u, 0, (uint64_t)&v159);
      v157 = *v120 | ((unint64_t)v120[2] << 32);
      sub_22E8906A0((uint64_t)&v159, (uint64_t *)&v157);
      sub_22E903BEC((unsigned int *)&v159);
LABEL_129:
      v113 = v179;
      if (v179 == v181)
        goto LABEL_131;
LABEL_130:
      free(v113);
      goto LABEL_131;
    }
    if ((v49 & 1) == 0)
    {
      v123 = (uint64_t)v156;
      v161 = v156;
      v124 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(int *))(*(_QWORD *)v156 + 56))(v156) + 56)
                       + (((unint64_t)*(unsigned int *)(v38 + 64) >> 17) & 0x7FF8)
                       + 16);
      v179 = v181;
      v180 = 0x800000000;
      if (*(_QWORD *)(v124 + 72) < 8uLL || (sub_22EC624F8((uint64_t)a1, v124, (uint64_t)&v179) & 1) != 0)
      {
        v125 = *(unsigned int **)(v123 + 56);
        sub_22E8FCA40(a1, v148, 0x12B3u, 0, (uint64_t)&v159);
        LODWORD(v157) = 0;
        v126 = sub_22E8900C4((uint64_t)&v159, (int *)&v157);
        v158 = sub_22F31CFF0((uint64_t)a1, v123 & 0xFFFFFFFFFFFFFFF9);
        v127 = sub_22E8900C4(v126, &v158);
        sub_22E890024(v127, (uint64_t *)&v161);
        sub_22E903BEC((unsigned int *)&v159);
        sub_22E8FCA40(a1, v161[6], 0x17D6u, 0, (uint64_t)&v159);
        v157 = *v125 | ((unint64_t)v125[2] << 32);
        sub_22E8906A0((uint64_t)&v159, (uint64_t *)&v157);
        sub_22E903BEC((unsigned int *)&v159);
      }
      else
      {
        sub_22F3B8D58(v124);
        sub_22EC6C5C8((uint64_t)a1, a3, v123, v139, v179, v180, 2, 1);
      }
      v113 = v179;
      if (v179 == v181)
        goto LABEL_131;
      goto LABEL_130;
    }
    v159 = 0uLL;
    v56 = sub_22ED6761C((uint64_t)a1, (uint64_t)v156, a3, v145, v38, a6, &v159, v51);
    if (v56 < 8)
      goto LABEL_131;
    v57 = v56;
    v58 = a1[11];
    v59 = v159;
    v60 = sub_22F259350(v38);
    if ((*v60 - 5) > 1)
      v61 = 0;
    else
      v61 = *(_DWORD *)((*((_QWORD *)v60 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 16);
    v70 = sub_22E3CD3D4(v58 + 2032, 24, 3);
    *(_OWORD *)v70 = v59;
    *(_DWORD *)(v70 + 16) = v61;
    *(_DWORD *)(v70 + 20) = 0;
    v152 = 5;
    v153 = v57;
    v154 = v70 & 0xFFFFFFFFFFFFFFFCLL;
    v44 = v145;
LABEL_48:
    sub_22EE00E90(&v159, (uint64_t)a1, 6, v44, v141, *v19, (uint64_t)v156, v46, *(_QWORD *)a6, *(_DWORD *)(a6 + 8), 0);
    if (BYTE8(v159) || sub_22ED678A8((uint64_t)a1, *v19, (uint64_t)&v152, (uint64_t)v156, a3, v44, 0, a6, 0))
    {
      sub_22EE014E4((int32x2_t *)&v159);
      goto LABEL_131;
    }
    if (v140 == 32)
    {
      v53 = (_OWORD *)sub_22E78DF7C((uint64_t)&v175, (unint64_t)&v152, 1);
      v54 = (char *)v175 + 32 * v176;
      v55 = v53[1];
      *v54 = *v53;
      v54[1] = v55;
      LODWORD(v176) = v176 + 1;
    }
    ++v19;
    v71 = v151 + 1;
    sub_22EE014E4((int32x2_t *)&v159);
    v15 = v149;
LABEL_77:
    v18 = v71;
    if (v19 != (uint64_t *)v20)
      continue;
    break;
  }
LABEL_85:
  if (v71 < v15)
  {
    for (j = a1[1503]; j; j = *(_QWORD *)(j + 104))
    {
      if (*(_QWORD *)(j + 120))
      {
        v128 = v15;
        v129 = v71;
        v130 = 32 * v71;
        while (1)
        {
          v131 = (char *)v175 + v130;
          v132 = *(_DWORD *)((char *)v175 + v130);
          if (v132 == 1)
          {
            if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v131 + 1) & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
              goto LABEL_163;
          }
          else if (v132 == 7)
          {
            if (**(unsigned __int8 **)((char *)v175 + v130 + 8) != 213)
              goto LABEL_163;
          }
          else if (((1 << v132) & 0x13D) != 0)
          {
LABEL_163:
            v71 = v129;
            LODWORD(v15) = v128;
            goto LABEL_90;
          }
          ++v129;
          v133 = sub_22E4EF088(a6, (unint64_t)v131, 1);
          v134 = *(_QWORD *)a6 + 24 * *(unsigned int *)(a6 + 8);
          v135 = *(_OWORD *)v133;
          *(_QWORD *)(v134 + 16) = *(_QWORD *)(v133 + 16);
          *(_OWORD *)v134 = v135;
          ++*(_DWORD *)(a6 + 8);
          v130 += 32;
          if (v128 == v129)
            goto LABEL_91;
        }
      }
      if (!*(_BYTE *)(j + 113))
        break;
    }
  }
LABEL_90:
  if (v71 < v15)
  {
    sub_22E8FCA40(a1, v144, 0x12B3u, 0, (uint64_t)&v159);
    LODWORD(v152) = 1;
    v76 = sub_22E8900C4((uint64_t)&v159, (int *)&v152);
    LODWORD(v161) = sub_22F31CFF0((uint64_t)a1, (unint64_t)v156 & 0xFFFFFFFFFFFFFFF9);
    v77 = sub_22E8900C4(v76, (int *)&v161);
    v78 = sub_22E890024(v77, (uint64_t *)&v156);
    v79 = (char *)v175 + 32 * v71;
    if ((*(_DWORD *)v79 - 5) > 1)
      sub_22F0EFE08((uint64_t)v79);
    else
      v80 = *(_DWORD *)((*((_QWORD *)v79 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 16);
    v179 = (std::string::size_type *)__PAIR64__(HIDWORD(v178), v80);
    sub_22E8906A0(v78, (uint64_t *)&v179);
    sub_22E903BEC((unsigned int *)&v159);
    sub_22E8FCA40(a1, v156[6], 0x17D6u, 0, (uint64_t)&v159);
    v179 = (std::string::size_type *)(*v142 | ((unint64_t)v142[2] << 32));
    sub_22E8906A0((uint64_t)&v159, (uint64_t *)&v179);
    v81 = (unsigned int *)&v159;
LABEL_103:
    sub_22E903BEC(v81);
    v74 = 1;
    goto LABEL_132;
  }
LABEL_91:
  v73 = v147;
  if (a7)
  {
    v73 = sub_22ED7355C(v147, (uint64_t)&v175);
    *(_QWORD *)(v73 + 272) = v178;
  }
  if ((a5 & 1) != 0)
  {
LABEL_94:
    v74 = 0;
    goto LABEL_132;
  }
  v75 = sub_22E9F3DF4(a1, (uint64_t)v156, *(_QWORD *)a6, *(unsigned int *)(a6 + 8), v144 | ((unint64_t)*(unsigned int *)(v73 + 276) << 32));
  v74 = v75;
  if (a8 && (_DWORD)v75)
  {
    v74 = 1;
    *a8 = 1;
  }
LABEL_132:
  if (!(_BYTE)v170)
  {
    if ((_DWORD)v167)
    {
      v136 = 0;
      v137 = 8 * v167;
      do
      {
        v138 = *(void ***)((char *)v166 + v136);
        if (v138)
        {
          if (*v138 != v138 + 2)
            free(*v138);
          MEMORY[0x2348A0E9C](v138, 0x1080C40ED926357);
        }
        v136 += 8;
      }
      while (v137 != v136);
    }
    v162[1503] = v169;
    LOBYTE(v170) = 1;
  }
  if (v166 != &v168)
    free(v166);
  if ((v163 & 1) == 0)
    llvm::deallocate_buffer(v164, (void *)(16 * v165));
  if (__src != v174)
    free(__src);
  if (v175 != v177)
    free(v175);
  return v74;
}

unint64_t sub_22ED62A48(_QWORD *a1, uint64_t *a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, unsigned int a7, unsigned int a8, uint64_t a9, uint64_t a10, unsigned int a11, int a12, char a13, char a14)
{
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  _DWORD *v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  size_t v47;
  unsigned __int32 v48;
  _QWORD *v49;
  _BYTE *v50;
  unint64_t v52;
  uint64_t v53;
  _DWORD *v54;
  _DWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  size_t v62;
  unsigned __int32 v63;
  _QWORD *v64;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[2];
  _BYTE *v70;
  int64x2_t v71;
  _BYTE v72[32];
  uint64_t v73;
  void *v74[2];
  _DWORD v75[66];
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  v69[0] = a9;
  v69[1] = a10;
  v68 = a6;
  v21 = (unint64_t *)(a3 + 8);
  v20 = *(_QWORD *)(a3 + 8);
  if (*(_DWORD *)a3 && *(_DWORD *)(a3 + 4) && !v20)
    return 0;
  if ((a13 & 1) == 0 && (a14 & 1) == 0 && v20)
  {
    v23 = sub_22E958204((uint64_t)a1, a3, 0);
    if (v23)
    {
      if ((*(_WORD *)(v23 + 8) & 0x7Fu) - 35 <= 2)
      {
        v24 = *(_QWORD *)(v23 - 24);
        v25 = (v24 & 7) != 0 ? 0 : v24 & 0xFFFFFFFFFFFFFFF8;
        if (v25 == a6)
        {
          if (a4)
            v26 = 5323;
          else
            v26 = 4455;
          sub_22E8FCA40(a1, a7, v26, 0, (uint64_t)v74);
          v27 = sub_22E8BAE44((uint64_t)v74, &v68);
          LODWORD(v70) = 0;
          v28 = sub_22E8900C4(v27, (int *)&v70);
          LODWORD(v67) = 1;
          sub_22E8900C4(v28, (int *)&v67);
          sub_22E903BEC((unsigned int *)v74);
        }
      }
    }
    else if (*v21 && (sub_22F0AAC5C(*v21) & 4) != 0)
    {
      sub_22E8FCA40(a1, *(_DWORD *)a3, 0x13A4u, 0, (uint64_t)v74);
      v67 = *(_QWORD *)(a3 + 8);
      v31 = sub_22EA02390((uint64_t)v74, &v67);
      v32 = *(_DWORD **)(a6 + 16);
      v33 = *v32;
      v70 = v32 + 4;
      v71.i64[0] = v33;
      sub_22F2F2210(v31, (uint64_t)&v70);
      sub_22E903BEC((unsigned int *)v74);
      return sub_22ED63018((uint64_t)a1, 0, 0, a3, a4, a5, a6, a7, a8, a9, a10, a11);
    }
  }
  v67 = a5;
  v29 = a5 & 0xFFFFFFFFFFFFFFF8;
  if ((a5 & 6) != 2)
    goto LABEL_27;
  v30 = a11;
  if (v29 && (*(_DWORD *)v29 & 3) == 1)
  {
    if ((sub_22ED61690(a1, a2, (unint64_t *)&v67, a7, 1) & 1) != 0)
      return 0;
    a5 = v67;
    v29 = v67 & 0xFFFFFFFFFFFFFFF8;
LABEL_27:
    v30 = a11;
  }
  v74[0] = v75;
  v74[1] = (void *)0x800000000;
  v75[64] = a8;
  v75[65] = v30;
  sub_22ED58288((uint64_t)a1, (uint64_t)v69, (uint64_t)v74);
  if ((~(_BYTE)a5 & 6) == 0 && v29)
  {
    v52 = sub_22F36CB1C(a1[11], 6u, *(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(v29 + 16), (uint64_t)v74);
    v70 = v72;
    v71 = vdupq_n_s64(0x20uLL);
    v73 = 0;
    v53 = sub_22EEB5360((uint64_t)&v70, v52, (8 * *(_DWORD *)(v52 + 20) + 32), 8);
    v55 = v54;
    *v54 = 0;
    if (!*v21 || !sub_22F0ABC50((uint64_t *)v21, a1[11]))
      v56 = 0;
    *((_QWORD *)v55 + 1) = v56;
    v55[4] = a7;
    v55[5] = a4;
    v55[6] = a8;
    v55[7] = v30;
    v57 = *(unsigned int *)(v53 + 20);
    if ((_DWORD)v57)
    {
      v58 = 0;
      v59 = v55 + 8;
      v60 = 32 * v57;
      do
      {
        *v59++ = *(_QWORD *)((char *)v74[0] + v58 + 24);
        v58 += 32;
      }
      while (v60 != v58);
    }
    v61 = a1[11];
    v62 = v71.i64[0] - v71.i64[1];
    v63 = v71.i32[0] - v71.i32[2];
    if (v71.i32[0] == v71.i32[2])
      v63 = sub_22F11598C(v52);
    v64 = (_QWORD *)sub_22E3CD3D4(v61 + 2032, v63 + 8, 3);
    *v64 = v52;
    memcpy(v64 + 1, &v70[v71.i64[1]], v62);
    v22 = sub_22EE7D030((uint64_t)a1, v52, (uint64_t)v64);
    v50 = v70;
    if (v70 == v72)
      goto LABEL_50;
LABEL_48:
    if (v50)
      MEMORY[0x2348A0E84](v50, 0x1000C8077774924);
    goto LABEL_50;
  }
  v34 = sub_22ED60904(a1, a5, a7, (uint64_t)v74);
  if (v34 >= 0x10)
  {
    v35 = v34;
    v70 = v72;
    v71 = vdupq_n_s64(0x20uLL);
    v73 = 0;
    v36 = sub_22EEB5360((uint64_t)&v70, v34, (8 * *(_DWORD *)(v34 + 20) + 16), 8);
    *v37 = a7;
    v37[1] = a4;
    v37[2] = a8;
    v37[3] = v30;
    v38 = *(unsigned int *)(v36 + 20);
    if ((_DWORD)v38)
    {
      v39 = 0;
      v40 = v37 + 4;
      v41 = 32 * v38;
      do
      {
        *v40++ = *(_QWORD *)((char *)v74[0] + v39 + 24);
        v39 += 32;
      }
      while (v41 != v39);
    }
    if (*(_DWORD *)a3)
      v42 = *(_DWORD *)(a3 + 4) == 0;
    else
      v42 = 1;
    if ((!v42 || *v21) && (a13 & 1) == 0)
    {
      v35 = sub_22EF65684(a1[11], 6, *v21, v35, 0);
      sub_22EEB5360((uint64_t)&v70, v35, 0x10uLL, 8);
      v44 = v43;
      v45 = 0;
      *(_DWORD *)v44 = 0;
      if (*v21)
        sub_22F0ABC50((uint64_t *)v21, a1[11]);
      *(_QWORD *)(v44 + 8) = v45;
    }
    v46 = a1[11];
    v47 = v71.i64[0] - v71.i64[1];
    v48 = v71.i32[0] - v71.i32[2];
    if (v71.i32[0] == v71.i32[2])
      v48 = sub_22F11598C(v35);
    v49 = (_QWORD *)sub_22E3CD3D4(v46 + 2032, v48 + 8, 3);
    *v49 = v35;
    memcpy(v49 + 1, &v70[v71.i64[1]], v47);
    v22 = sub_22EE7D030((uint64_t)a1, v35, (uint64_t)v49);
    v50 = v70;
    if (v70 == v72)
      goto LABEL_50;
    goto LABEL_48;
  }
  v22 = 0;
LABEL_50:
  if (v74[0] != v75)
    free(v74[0]);
  return v22;
}

unint64_t sub_22ED63018(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, uint64_t a11, unsigned int a12)
{
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  size_t v39;
  unsigned __int32 v40;
  _QWORD *v41;
  void **v42;
  unint64_t v44;
  unsigned int *v45;
  unsigned int *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  size_t v54;
  unsigned __int32 v55;
  _QWORD *v56;
  _BOOL4 v57;
  uint64_t v58;
  _QWORD v59[2];
  void **v60;
  int64x2_t v61;
  void *__p[2];
  uint64_t v63;
  char v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  _DWORD v68[66];
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v59[0] = a10;
  v59[1] = a11;
  v58 = a7;
  if (a2 && a3)
  {
    if (!*(_QWORD *)(a2 + 64))
    {
      if ((**(_QWORD **)(a1 + 72) & 0x200) != 0)
        v19 = 6461;
      else
        v19 = 5392;
      sub_22E8FCA40((_QWORD *)a1, a3, v19, 0, (uint64_t)&v66);
      v61.i8[12] = 0;
      *(uint64_t *)((char *)v61.i64 + 4) = 0;
      __p[1] = 0;
      v63 = 0;
      __p[0] = 0;
      v64 = 0;
      v60 = (void **)(a3 | ((unint64_t)a3 << 32));
      v61.i8[0] = 1;
      sub_22E890748((uint64_t)&v66, &v60);
      if (SHIBYTE(v63) < 0)
        operator delete(__p[0]);
      sub_22E903BEC((unsigned int *)&v66);
    }
  }
  else if (!a3)
  {
    goto LABEL_18;
  }
  v20 = sub_22E958204(a1, a4, 0);
  if (v20 && (*(_WORD *)(v20 + 8) & 0x7Fu) - 35 <= 2)
  {
    v21 = *(_QWORD *)(v20 - 24);
    v22 = (v21 & 7) != 0 ? 0 : v21 & 0xFFFFFFFFFFFFFFF8;
    if (v22 == a7)
    {
      sub_22E8FCA40((_QWORD *)a1, a8, 0x14CBu, 0, (uint64_t)&v66);
      v23 = sub_22E8BAE44((uint64_t)&v66, &v58);
      LODWORD(v60) = 0;
      v24 = sub_22E8900C4(v23, (int *)&v60);
      v57 = a5 != 0;
      sub_22E8900C4(v24, (int *)&v57);
      sub_22E903BEC((unsigned int *)&v66);
    }
  }
LABEL_18:
  v66 = v68;
  v67 = 0x800000000;
  v68[64] = a9;
  v68[65] = a12;
  sub_22ED58288(a1, (uint64_t)v59, (uint64_t)&v66);
  if ((~(_BYTE)a6 & 6) == 0 && (a6 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v44 = sub_22F36CB1C(*(_QWORD *)(a1 + 88), 5u, *(_QWORD *)((a6 & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)((a6 & 0xFFFFFFFFFFFFFFF8) + 16), (uint64_t)&v66);
    v60 = __p;
    v61 = vdupq_n_s64(0x20uLL);
    v65 = 0;
    sub_22EEB5360((uint64_t)&v60, v44, (8 * *(_DWORD *)(v44 + 20) + 32), 8);
    v46 = v45;
    *v45 = a3;
    v48 = *(_QWORD *)(a4 + 8);
    v47 = (uint64_t *)(a4 + 8);
    if (!v48 || !sub_22F0ABC50(v47, *(_QWORD *)(a1 + 88)))
      v49 = 0;
    *((_QWORD *)v46 + 1) = v49;
    v46[4] = a8;
    v46[5] = a5;
    v46[6] = a9;
    v46[7] = a12;
    if ((_DWORD)v67)
    {
      v50 = 0;
      v51 = v46 + 8;
      v52 = 32 * v67;
      do
      {
        *v51++ = *(_QWORD *)((char *)v66 + v50 + 24);
        v50 += 32;
      }
      while (v52 != v50);
    }
    v53 = *(_QWORD *)(a1 + 88);
    v54 = v61.i64[0] - v61.i64[1];
    v55 = v61.i32[0] - v61.i32[2];
    if (v61.i32[0] == v61.i32[2])
      v55 = sub_22F11598C(v44);
    v56 = (_QWORD *)sub_22E3CD3D4(v53 + 2032, v55 + 8, 3);
    *v56 = v44;
    memcpy(v56 + 1, (char *)v60 + v61.i64[1], v54);
    v26 = sub_22EE7D030(a1, v44, (uint64_t)v56);
    v42 = v60;
    if (v60 != __p)
    {
LABEL_30:
      if (v42)
        MEMORY[0x2348A0E84](v42, 0x1000C8077774924);
    }
  }
  else
  {
    v25 = sub_22ED60904((_QWORD *)a1, a6, a8, (uint64_t)&v66);
    if (v25 < 0x10)
    {
      v26 = 0;
      goto LABEL_32;
    }
    v27 = v25;
    v60 = __p;
    v61 = vdupq_n_s64(0x20uLL);
    v65 = 0;
    sub_22EEB5360((uint64_t)&v60, v25, (8 * *(_DWORD *)(v25 + 20) + 16), 8);
    *v28 = a8;
    v28[1] = a5;
    v28[2] = a9;
    v28[3] = a12;
    if ((_DWORD)v67)
    {
      v29 = 0;
      v30 = v28 + 4;
      v31 = 32 * v67;
      do
      {
        *v30++ = *(_QWORD *)((char *)v66 + v29 + 24);
        v29 += 32;
      }
      while (v31 != v29);
    }
    v33 = *(_QWORD *)(a4 + 8);
    v32 = (uint64_t *)(a4 + 8);
    v34 = sub_22EF65684(*(_QWORD *)(a1 + 88), 5, v33, v27, 0);
    sub_22EEB5360((uint64_t)&v60, v34, 0x10uLL, 8);
    v36 = v35;
    v37 = 0;
    *(_DWORD *)v36 = a3;
    if (*v32)
      sub_22F0ABC50(v32, *(_QWORD *)(a1 + 88));
    *(_QWORD *)(v36 + 8) = v37;
    v38 = *(_QWORD *)(a1 + 88);
    v39 = v61.i64[0] - v61.i64[1];
    v40 = v61.i32[0] - v61.i32[2];
    if (v61.i32[0] == v61.i32[2])
      v40 = sub_22F11598C(v34);
    v41 = (_QWORD *)sub_22E3CD3D4(v38 + 2032, v40 + 8, 3);
    *v41 = v34;
    memcpy(v41 + 1, (char *)v60 + v61.i64[1], v39);
    v26 = sub_22EE7D030(a1, v34, (uint64_t)v41);
    v42 = v60;
    if (v60 != __p)
      goto LABEL_30;
  }
LABEL_32:
  if (v66 != v68)
    free(v66);
  return v26;
}

unint64_t sub_22ED634E0(_QWORD *a1, int a2, int a3, unsigned int a4, uint64_t a5, int a6, uint64_t a7, int a8, int a9, uint64_t a10, uint64_t a11, int a12)
{
  uint64_t *v18;
  unint64_t v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  size_t v42;
  unsigned __int32 v43;
  _QWORD *v44;
  _BYTE *v45;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  size_t v57;
  unsigned __int32 v58;
  _QWORD *v59;
  unint64_t v62;
  unint64_t v63;
  unsigned int v64[25];
  unsigned int v65;
  uint64_t v66;
  _QWORD v67[2];
  __int128 __dst;
  _BYTE *v69;
  int64x2_t v70;
  _BYTE v71[32];
  uint64_t v72;
  void *v73[2];
  _DWORD v74[66];
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  v67[0] = a10;
  v67[1] = a11;
  v18 = (uint64_t *)(a5 + 8);
  if (*(_DWORD *)a5 && *(_DWORD *)(a5 + 4) && !*(_QWORD *)(a5 + 8))
    return 0;
  v66 = a7;
  v20 = ~(_BYTE)a7;
  v73[0] = v74;
  v73[1] = (void *)0x800000000;
  v74[64] = a9;
  v74[65] = a12;
  sub_22ED58288((uint64_t)a1, (uint64_t)v67, (uint64_t)v73);
  v21 = dword_22F497FF8[a3 - 23];
  v65 = v21;
  if ((v20 & 6) == 0 && (a7 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v32 = sub_22F36CB1C(a1[11], v21, *(_QWORD *)((a7 & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)((a7 & 0xFFFFFFFFFFFFFFF8) + 16), (uint64_t)v73);
    v69 = v71;
    v70 = vdupq_n_s64(0x20uLL);
    v72 = 0;
    v33 = sub_22EEB5360((uint64_t)&v69, v32, (8 * *(_DWORD *)(v32 + 20) + 32), 8);
    v35 = v34;
    *v34 = a4;
    if (!*v18 || !sub_22F0ABC50(v18, a1[11]))
      v36 = 0;
    *((_QWORD *)v35 + 1) = v36;
    v35[4] = a8;
    v35[5] = a6;
    v35[6] = a9;
    v35[7] = a12;
    v37 = *(unsigned int *)(v33 + 20);
    if ((_DWORD)v37)
    {
      v38 = 0;
      v39 = v35 + 8;
      v40 = 32 * v37;
      do
      {
        *v39++ = *(_QWORD *)((char *)v73[0] + v38 + 24);
        v38 += 32;
      }
      while (v40 != v38);
    }
    v41 = a1[11];
    v42 = v70.i64[0] - v70.i64[1];
    v43 = v70.i32[0] - v70.i32[2];
    if (v70.i32[0] == v70.i32[2])
      v43 = sub_22F11598C(v32);
    v44 = (_QWORD *)sub_22E3CD3D4(v41 + 2032, v43 + 8, 3);
    *v44 = v32;
    memcpy(v44 + 1, &v69[v70.i64[1]], v42);
    v19 = sub_22EE7D030((uint64_t)a1, v32, (uint64_t)v44);
    v45 = v69;
    if (v69 == v71)
      goto LABEL_39;
LABEL_37:
    if (v45)
      MEMORY[0x2348A0E84](v45, 0x1000C8077774924);
    goto LABEL_39;
  }
  v22 = sub_22F0F08CC(&v66);
  if (v22 && (*(_DWORD *)(v22 + 28) & 0x7F) == 0x1E)
  {
    v62 = v22;
    v23 = a8;
    sub_22E8FCA40(a1, a8, 0x12A5u, 0, (uint64_t)&v69);
    v24 = sub_22E890024((uint64_t)&v69, (uint64_t *)&v62);
    LODWORD(__dst) = 7;
    v25 = sub_22E8900C4(v24, (int *)&__dst);
    sub_22E8900C4(v25, (int *)&v65);
    sub_22E903BEC((unsigned int *)&v69);
    sub_22E8FCA40(a1, *(_DWORD *)(v62 + 24), 0x64u, 0, (uint64_t)v64);
    sub_22E903BEC(v64);
  }
  else
  {
    v23 = a8;
  }
  v26 = sub_22ED60904(a1, a7, v23, (uint64_t)v73);
  v63 = v26;
  if (v26 >= 0x10)
  {
    v27 = v26;
    v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v28 && *(_BYTE *)(v28 + 16) == 45)
    {
      v29 = sub_22F114198(*(_QWORD *)(v28 + 24));
      v30 = *(_QWORD *)(v29 + 40);
      v31 = (v30 & 7) != 0 ? 0 : v30 & 0xFFFFFFFFFFFFFFF8;
      if ((sub_22EA33594((uint64_t)a1, v29, v65, a2 == 2, a4, v31) & 1) == 0)
      {
        sub_22E8FCA40(a1, a4, 0x13E0u, 0, (uint64_t)&v69);
        sub_22E8901B8((uint64_t)&v69, (uint64_t *)&v63);
        __asm { BR              X11 }
      }
    }
    v69 = v71;
    v70 = vdupq_n_s64(0x20uLL);
    v72 = 0;
    v46 = sub_22EEB5360((uint64_t)&v69, v27, (8 * *(_DWORD *)(v27 + 20) + 16), 8);
    *v47 = a8;
    v47[1] = a6;
    v47[2] = a9;
    v47[3] = a12;
    v48 = *(unsigned int *)(v46 + 20);
    if ((_DWORD)v48)
    {
      v49 = 0;
      v50 = v47 + 4;
      v51 = 32 * v48;
      do
      {
        *v50++ = *(_QWORD *)((char *)v73[0] + v49 + 24);
        v49 += 32;
      }
      while (v51 != v49);
    }
    v63 = sub_22EF65684(a1[11], v21, *v18, v63, 0);
    sub_22EEB5360((uint64_t)&v69, v63, 0x10uLL, 8);
    v53 = v52;
    v54 = 0;
    *(_DWORD *)v53 = a4;
    if (*v18)
      sub_22F0ABC50(v18, a1[11]);
    *(_QWORD *)(v53 + 8) = v54;
    v55 = v63;
    v56 = a1[11];
    v57 = v70.i64[0] - v70.i64[1];
    v58 = v70.i32[0] - v70.i32[2];
    if (v70.i32[0] == v70.i32[2])
      v58 = sub_22F11598C(v63);
    v59 = (_QWORD *)sub_22E3CD3D4(v56 + 2032, v58 + 8, 3);
    *v59 = v55;
    memcpy(v59 + 1, &v69[v70.i64[1]], v57);
    v19 = sub_22EE7D030((uint64_t)a1, v55, (uint64_t)v59);
    v45 = v69;
    if (v69 == v71)
      goto LABEL_39;
    goto LABEL_37;
  }
  v19 = 0;
LABEL_39:
  if (v73[0] != v74)
    free(v73[0]);
  return v19;
}

void sub_22ED63B20()
{
  JUMPOUT(0x22ED63888);
}

void sub_22ED63B34()
{
  JUMPOUT(0x22ED63888);
}

void ***sub_22ED63B48(unsigned int *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  __int32 v19;
  int8x8_t *v20;
  uint64_t v21;
  int8x8_t v22;
  uint8x8_t v23;
  uint8x8_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v30;
  unsigned int v31;
  int v32[2];
  BOOL v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  void *v38;
  uint64_t v39;
  _BYTE v40[80];
  unint64_t v41;
  __int128 v42;
  _BYTE v43[128];
  uint64_t v44;
  int v45;
  char v46;
  uint64_t v47;
  char *v48[2];
  _QWORD v49[17];
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD v57[10];
  _BYTE *v58;
  uint64_t v59;
  _BYTE v60[104];
  _QWORD *v61;
  uint64_t v62;
  _QWORD v63[10];

  v63[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 16);
  v5 = (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 4) != 0)
    v5 = (_QWORD *)*v5;
  if ((sub_22EFC7ADC((unint64_t)v5) & 1) == 0)
  {
    v6 = *(_DWORD *)(a2 + 24);
    v44 = 0;
    v45 = v6;
    v46 = 0;
    v47 = 0;
    v48[0] = (char *)v49;
    v48[1] = (char *)0x400000000;
    v49[16] = 0;
    v50 = 0;
    v51 = 0;
    v52 = 0;
    v53 = 0;
    v54 = 0;
    v55 = v57;
    v56 = 0x800000000;
    v57[8] = 0;
    v57[9] = 0;
    v58 = v60;
    v59 = 0x400000000;
    v60[96] = 0;
    v61 = v63;
    v62 = 0x400000000;
    if ((sub_22EDCA418((uint64_t)a1, (_QWORD *)a2, (uint64_t)&v44) & 1) == 0)
    {
      v7 = *(_QWORD *)(a2 + 152);
      v8 = v7 & 0xFFFFFFFFFFFFFFF8;
      if ((v7 & 4) != 0 && v8)
      {
        do
        {
          v9 = *(_QWORD *)(*(_QWORD *)v8 + 152);
          v8 = v9 & 0xFFFFFFFFFFFFFFF8;
        }
        while ((v9 & 4) != 0 && v8);
      }
      sub_22E8FCA40(a1, *(_DWORD *)(a2 + 24), 0x14D3u, 0, (uint64_t)&v41);
      LOBYTE(v38) = (*(_DWORD *)(v8 + 28) & 0x7F) == 31;
      sub_22E894E38((uint64_t)&v41, (unsigned __int8 *)&v38);
      sub_22E903BEC((unsigned int *)&v41);
      if (v46)
      {
        LODWORD(v34) = 0;
        v35 = 0;
        v36 = 0;
        v37 = 0;
        sub_22E9F6EB8((unint64_t)&v44, (uint64_t)&v34);
        v41 = (unint64_t)v43;
        v42 = xmmword_22F44E310;
        sub_22E9F6F54((uint64_t)&v35, *((_QWORD *)a1 + 13), &v41);
        sub_22E8FCA40(a1, (int)v34, 0x175Eu, 0, (uint64_t)&v38);
        sub_22F2F2210((uint64_t)&v38, (uint64_t)&v41);
        sub_22E903BEC((unsigned int *)&v38);
        if ((_BYTE *)v41 != v43)
          free((void *)v41);
        if (v35 && v36)
          sub_22E3BB10C(v36, v35);
      }
      sub_22E8FCA40(a1, *(_DWORD *)(v8 + 24), 0x17D6u, 0, (uint64_t)&v41);
      sub_22E903BEC((unsigned int *)&v41);
      v38 = v40;
      v39 = 0x300000000;
      v34 = &v36;
      v35 = 0x300000000;
      sub_22EFE9164(*(_QWORD *)(v8 + 56), (uint64_t)&v34);
      v10 = *(_QWORD *)(v8 + 48);
      if (v10)
      {
        if ((*(_DWORD *)(v10 + 28) & 0x7Eu) - 52 <= 5)
        {
          v30 = *(_QWORD *)(v10 + 56);
          if ((v30 & 4) != 0)
          {
            *(_QWORD *)v32 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFFF8) + 40);
            if (*(_QWORD *)v32)
            {
              v31 = v35;
              if (v35 >= HIDWORD(v35))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v31 = v35;
              }
              *((_QWORD *)v34 + v31) = *(_QWORD *)v32;
              LODWORD(v35) = v35 + 1;
            }
          }
        }
      }
      sub_22EFE9164(*(_QWORD *)(a2 + 184), (uint64_t)&v38);
      sub_22E9F5158((uint64_t)a1, a2, (uint64_t)v38, v39, v8, (uint64_t)v34, v35);
      if (v34 != &v36)
        free(v34);
      if (v38 != v40)
        free(v38);
    }
    if (v61 != v63)
      free(v61);
    if (v58 != v60)
      free(v58);
    if (v55 != v57)
      free(v55);
    sub_22E89277C(v48);
  }
  v11 = *(_QWORD *)(a2 + 184);
  v12 = *(_DWORD *)(v11 + 12);
  v13 = v12 & 0x1FFFFFFF;
  if ((v12 & 0x1FFFFFFF) > 0x39)
  {
    v14 = operator new();
    *(_QWORD *)v14 = v14 + 16;
    *(_QWORD *)(v14 + 8) = 0x600000000;
    sub_22E47EDD0(v14, (v13 + 63) >> 6, 0);
    *(_DWORD *)(v14 + 64) = v13;
  }
  else
  {
    v14 = ((unint64_t)v12 << 58) | 1;
  }
  v41 = v14;
  v15 = *(_QWORD *)(a2 + 168);
  v16 = sub_22EFE90A8(v11);
  sub_22EDCB01C((uint64_t)a1, v15, 1, v16, &v41);
  if ((sub_22E5CE22C(&v41) & 1) == 0)
  {
    if ((v41 & 1) != 0)
    {
      v17 = v41 >> 58;
      v24 = (uint8x8_t)vcnt_s8((int8x8_t)((v41 >> 1) & ~(-1 << (v41 >> 58))));
      v24.i16[0] = vaddlv_u8(v24);
      v19 = v24.i32[0];
    }
    else
    {
      LODWORD(v17) = *(_DWORD *)(v41 + 64);
      v18 = *(unsigned int *)(v41 + 8);
      if ((_DWORD)v18)
      {
        v19 = 0;
        v20 = *(int8x8_t **)v41;
        v21 = 8 * v18;
        do
        {
          v22 = *v20++;
          v23 = (uint8x8_t)vcnt_s8(v22);
          v23.i16[0] = vaddlv_u8(v23);
          v19 += v23.i32[0];
          v21 -= 8;
        }
        while (v21);
      }
      else
      {
        v19 = 0;
      }
    }
    v25 = v17 - v19;
    sub_22E8FCA40(a1, *(_DWORD *)(a2 + 24), 0x14D4u, 0, (uint64_t)&v44);
    LOBYTE(v34) = (*(_DWORD *)(a2 + 28) & 0x7F) == 66;
    v26 = sub_22E894E38((uint64_t)&v44, (unsigned __int8 *)&v34);
    v33 = (v25 & 0xFFFFFFFE) != 0;
    v27 = sub_22E894E38(v26, (unsigned __int8 *)&v33);
    v28 = *(_DWORD *)(*(_QWORD *)(a2 + 192) + 4);
    LODWORD(v38) = *(_DWORD *)(a2 + 24);
    HIDWORD(v38) = v28;
    sub_22E8906A0(v27, (uint64_t *)&v38);
    sub_22E903BEC((unsigned int *)&v44);
    sub_22ED64554(a1, v11, &v41);
  }
  return sub_22E54C5D0((void ***)&v41);
}

void ***sub_22ED64058(unsigned int *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int32 v18;
  int8x8_t *v19;
  uint64_t v20;
  int8x8_t v21;
  uint8x8_t v22;
  uint8x8_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int v32[2];
  BOOL v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  void *v38;
  uint64_t v39;
  _BYTE v40[80];
  unint64_t v41;
  __int128 v42;
  _BYTE v43[128];
  uint64_t v44;
  int v45;
  char v46;
  uint64_t v47;
  char *v48[2];
  _QWORD v49[17];
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD v57[10];
  _BYTE *v58;
  uint64_t v59;
  _BYTE v60[104];
  _QWORD *v61;
  uint64_t v62;
  _QWORD v63[10];

  v63[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 16);
  v5 = (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 4) != 0)
    v5 = (_QWORD *)*v5;
  if ((sub_22EFC7ADC((unint64_t)v5) & 1) == 0)
  {
    v6 = *(_DWORD *)(a2 + 24);
    v44 = 0;
    v45 = v6;
    v46 = 0;
    v47 = 0;
    v48[0] = (char *)v49;
    v48[1] = (char *)0x400000000;
    v49[16] = 0;
    v50 = 0;
    v51 = 0;
    v52 = 0;
    v53 = 0;
    v54 = 0;
    v55 = v57;
    v56 = 0x800000000;
    v57[8] = 0;
    v57[9] = 0;
    v58 = v60;
    v59 = 0x400000000;
    v60[96] = 0;
    v61 = v63;
    v62 = 0x400000000;
    if (!sub_22EDCAA48((uint64_t)a1, a2, (uint64_t)&v44))
    {
      v7 = *(_QWORD *)(a2 + 112);
      v8 = v7 & 0xFFFFFFFFFFFFFFF8;
      if ((v7 & 4) != 0 && v8)
      {
        do
        {
          v31 = *(_QWORD *)(*(_QWORD *)v8 + 112);
          v8 = v31 & 0xFFFFFFFFFFFFFFF8;
        }
        while ((v31 & 4) != 0 && v8);
      }
      sub_22E8FCA40(a1, *(_DWORD *)(a2 + 24), 0x14D3u, 0, (uint64_t)&v41);
      LOBYTE(v38) = 1;
      sub_22E894E38((uint64_t)&v41, (unsigned __int8 *)&v38);
      sub_22E903BEC((unsigned int *)&v41);
      if (v46)
      {
        LODWORD(v34) = 0;
        v35 = 0;
        v36 = 0;
        v37 = 0;
        sub_22E9F6EB8((unint64_t)&v44, (uint64_t)&v34);
        v41 = (unint64_t)v43;
        v42 = xmmword_22F44E310;
        sub_22E9F6F54((uint64_t)&v35, *((_QWORD *)a1 + 13), &v41);
        sub_22E8FCA40(a1, (int)v34, 0x175Eu, 0, (uint64_t)&v38);
        sub_22F2F2210((uint64_t)&v38, (uint64_t)&v41);
        sub_22E903BEC((unsigned int *)&v38);
        if ((_BYTE *)v41 != v43)
          free((void *)v41);
        if (v35 && v36)
          sub_22E3BB10C(v36, v35);
      }
      sub_22E8FCA40(a1, *(_DWORD *)(v8 + 24), 0x17D6u, 0, (uint64_t)&v41);
      sub_22E903BEC((unsigned int *)&v41);
      v38 = v40;
      v39 = 0x300000000;
      v34 = &v36;
      v35 = 0x300000000;
      sub_22EFE9164(*(_QWORD *)(v8 + 56), (uint64_t)&v34);
      v9 = *(_QWORD *)(v8 + 48);
      if (v9)
      {
        if ((*(_DWORD *)(v9 + 28) & 0x7Eu) - 52 <= 5)
        {
          v29 = *(_QWORD *)(v9 + 56);
          if ((v29 & 4) != 0)
          {
            *(_QWORD *)v32 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFFFF8) + 40);
            if (*(_QWORD *)v32)
            {
              v30 = v35;
              if (v35 >= HIDWORD(v35))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v30 = v35;
              }
              *((_QWORD *)v34 + v30) = *(_QWORD *)v32;
              LODWORD(v35) = v35 + 1;
            }
          }
        }
      }
      sub_22EFE9164(*(_QWORD *)(a2 + 424), (uint64_t)&v38);
      sub_22E9F5158((uint64_t)a1, a2, (uint64_t)v38, v39, v8, (uint64_t)v34, v35);
      if (v34 != &v36)
        free(v34);
      if (v38 != v40)
        free(v38);
    }
    if (v61 != v63)
      free(v61);
    if (v58 != v60)
      free(v58);
    if (v55 != v57)
      free(v55);
    sub_22E89277C(v48);
  }
  v10 = *(_QWORD *)(a2 + 424);
  v11 = *(_DWORD *)(v10 + 12);
  v12 = v11 & 0x1FFFFFFF;
  if ((v11 & 0x1FFFFFFF) > 0x39)
  {
    v13 = operator new();
    *(_QWORD *)v13 = v13 + 16;
    *(_QWORD *)(v13 + 8) = 0x600000000;
    sub_22E47EDD0(v13, (v12 + 63) >> 6, 0);
    *(_DWORD *)(v13 + 64) = v12;
  }
  else
  {
    v13 = ((unint64_t)v11 << 58) | 1;
  }
  v41 = v13;
  v14 = *(_QWORD *)(a2 + 128);
  v15 = sub_22EFE90A8(v10);
  sub_22EDCB01C((uint64_t)a1, v14, 1, v15, &v41);
  if ((sub_22E5CE22C(&v41) & 1) == 0)
  {
    if ((v41 & 1) != 0)
    {
      v16 = v41 >> 58;
      v23 = (uint8x8_t)vcnt_s8((int8x8_t)((v41 >> 1) & ~(-1 << (v41 >> 58))));
      v23.i16[0] = vaddlv_u8(v23);
      v18 = v23.i32[0];
    }
    else
    {
      LODWORD(v16) = *(_DWORD *)(v41 + 64);
      v17 = *(unsigned int *)(v41 + 8);
      if ((_DWORD)v17)
      {
        v18 = 0;
        v19 = *(int8x8_t **)v41;
        v20 = 8 * v17;
        do
        {
          v21 = *v19++;
          v22 = (uint8x8_t)vcnt_s8(v21);
          v22.i16[0] = vaddlv_u8(v22);
          v18 += v22.i32[0];
          v20 -= 8;
        }
        while (v20);
      }
      else
      {
        v18 = 0;
      }
    }
    v24 = v16 - v18;
    sub_22E8FCA40(a1, *(_DWORD *)(a2 + 24), 0x14D4u, 0, (uint64_t)&v44);
    LOBYTE(v34) = 1;
    v25 = sub_22E894E38((uint64_t)&v44, (unsigned __int8 *)&v34);
    v33 = (v24 & 0xFFFFFFFE) != 0;
    v26 = sub_22E894E38(v25, (unsigned __int8 *)&v33);
    v27 = *(_DWORD *)(*(_QWORD *)(a2 + 432) + 4);
    LODWORD(v38) = *(_DWORD *)(a2 + 24);
    HIDWORD(v38) = v27;
    sub_22E8906A0(v26, (uint64_t *)&v38);
    sub_22E903BEC((unsigned int *)&v44);
    sub_22ED64554(a1, v10, &v41);
  }
  return sub_22E54C5D0((void ***)&v41);
}

unsigned int *sub_22ED64554(unsigned int *result, uint64_t a2, unint64_t *a3)
{
  unsigned int *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12[24];

  v4 = result;
  v5 = *a3;
  if ((*a3 & 1) != 0)
  {
    v5 >>= 58;
    if (!(_DWORD)v5)
      return result;
    goto LABEL_5;
  }
  LODWORD(v5) = *(_DWORD *)(v5 + 64);
  if ((_DWORD)v5)
  {
LABEL_5:
    v6 = 0;
    v7 = a2 + 16;
    v8 = v5;
    do
    {
      v9 = *a3;
      if ((*a3 & 1) != 0)
      {
        if (((1 << v6) & (v9 >> 1) & ~(-1 << (v9 >> 58))) == 0)
        {
LABEL_10:
          v10 = *(_QWORD *)(v7 + 8 * v6);
          if (*(_QWORD *)(v10 + 40))
          {
            sub_22E8FCA40(v4, *(_DWORD *)(v10 + 24), 0x16C8u, 0, (uint64_t)v12);
            v11 = *(_QWORD *)(v10 + 40);
            sub_22E894538((uint64_t)v12, &v11);
          }
          else
          {
            sub_22E8FCA40(v4, *(_DWORD *)(v10 + 24), 0x16C8u, 0, (uint64_t)v12);
            sub_22F2F30F4((uint64_t)v12, (uint64_t)"(anonymous)");
          }
          result = sub_22E903BEC(v12);
        }
      }
      else if ((*(_QWORD *)(*(_QWORD *)v9 + 8 * (v6 >> 6)) & (1 << v6)) == 0)
      {
        goto LABEL_10;
      }
      ++v6;
    }
    while (v8 != v6);
  }
  return result;
}

unint64_t sub_22ED64688(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, uint64_t a6, int a7, unsigned __int8 a8)
{
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  char *v27;
  uint64_t v28;
  void *v29;
  unsigned int v30;
  uint64_t v32;
  _DWORD *v33;
  uint64_t *v34;
  _QWORD *v35;
  int v36;
  int v37;
  uint64_t v38;
  BOOL v39;
  int v40;
  int v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  int v63;
  unint64_t v64;
  unsigned int v65;
  __int16 v66;
  uint64_t v67;
  int v68;
  char v69;
  uint64_t v70;
  int v71;
  __int128 *v72;
  int v73;
  int v74;
  uint64_t v77;
  uint64_t v79;
  unint64_t v80;
  char v81;
  uint64_t v82;
  char v83;
  void *__p;
  uint64_t v85;
  uint64_t v86;
  char v87;
  BOOL v88;
  _OWORD v89[2];
  uint64_t v90;
  unsigned __int8 v91;
  uint64_t v92;
  void *v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  char v100;
  void *v101;
  uint64_t v102;
  _BYTE v103[96];
  void *v104;
  uint64_t v105;
  _QWORD v106[35];

  v106[33] = *MEMORY[0x24BDAC8D0];
  v91 = a8;
  v12 = *(_QWORD *)(a3 + 48);
  v104 = v106;
  v13 = *(_QWORD *)(v12 + 36);
  v105 = 0x800000000;
  v106[32] = v13;
  v14 = (void *)*(unsigned int *)(v12 + 44);
  v92 = v12 + 56;
  v93 = v14;
  sub_22ED58288((uint64_t)a1, (uint64_t)&v92, (uint64_t)&v104);
  v15 = *(_DWORD *)(a3 + 64);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(unsigned int *)(v12 + 40);
  v18 = *(_QWORD *)(v12 + 24);
  v90 = v18;
  v19 = sub_22F0F08CC(&v90);
  v20 = v19;
  if (!v19 || (*(_DWORD *)(v19 + 28) & 0x7F) != 0x1F)
  {
    v25 = v18 & 0xFFFFFFFFFFFFFFF8;
    v26 = (v18 & 6) != 2 || v25 == 0;
    if (v26 || (*(_BYTE *)v25 & 3) != 0)
    {
      if (v19 && (*(_DWORD *)(v19 + 28) & 0x7F) == 0x1D)
        goto LABEL_29;
    }
    else
    {
      v20 = *(_QWORD *)(v25 + 8);
      if (v20)
      {
LABEL_29:
        sub_22E8FCA40(a1, v15, 0x1402u, 0, (uint64_t)&v92);
        v101 = *(void **)(v20 + 40);
        sub_22E894538((uint64_t)&v92, (uint64_t *)&v101);
        goto LABEL_30;
      }
    }
    sub_22E8FCA40(a1, v15, 0x1401u, 0, (uint64_t)&v92);
    sub_22E894E38((uint64_t)&v92, &v91);
LABEL_30:
    sub_22E903BEC((unsigned int *)&v92);
    v24 = 0;
    goto LABEL_31;
  }
  v73 = a5;
  v74 = v17;
  if (!(_DWORD)v105)
  {
LABEL_7:
    v101 = v103;
    v102 = 0x400000000;
    if ((sub_22ED61988(a1, (int *)v20, v15, (uint64_t)&v104, 0, (uint64_t)&v101, 1, 0) & 1) != 0)
    {
      v24 = 0;
      goto LABEL_59;
    }
    if ((a8 & 1) == 0)
    {
      v79 = 0;
      v29 = v101;
      v30 = v102;
      goto LABEL_56;
    }
    if ((sub_22ED65198(a1, v15, v20, v105, (uint64_t)v101) & 1) != 0)
    {
LABEL_58:
      v24 = 0;
LABEL_59:
      if (v101 != v103)
        free(v101);
      goto LABEL_31;
    }
    if ((sub_22F0F0A4C(&v90) & 4) == 0)
    {
      if (!(_DWORD)v102)
      {
LABEL_24:
        sub_22E8FCA40(a1, v15, 0x11A2u, 0, (uint64_t)&v92);
        v80 = *(_QWORD *)(v20 + 40);
        sub_22E894538((uint64_t)&v92, (uint64_t *)&v80);
        sub_22E903BEC((unsigned int *)&v92);
        v68 = 0;
        v91 = 0;
        v69 = 1;
        goto LABEL_35;
      }
      v27 = (char *)v101;
      v28 = 24 * v102;
      while ((sub_22F0EEB00((uint64_t)v27) & 4) == 0)
      {
        v27 += 24;
        v28 -= 24;
        if (!v28)
          goto LABEL_24;
      }
    }
    v69 = 0;
    v68 = 1;
LABEL_35:
    v32 = *(_QWORD *)(v20 + 56);
    v71 = v102;
    if ((_DWORD)v102 != (*(_DWORD *)(v32 + 12) & 0x1FFFFFFF))
      goto LABEL_55;
    v33 = v101;
    sub_22EFE90A8(v32);
    if (v71)
    {
      v34 = (uint64_t *)(v32 + 16);
      v35 = v33 + 2;
      v36 = *v33;
      v37 = *((_DWORD *)v35 - 1);
      v38 = *v35;
      if (sub_22EFC78D8(*v34))
      {
        v39 = v36 == 8 && v37 == 1;
        LODWORD(v17) = v74;
        if (!v39)
          goto LABEL_55;
        v40 = *(_DWORD *)v38;
        if (*(_DWORD *)v38 == 1)
        {
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v38 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
            goto LABEL_55;
        }
        else if (v40 == 7)
        {
          if (**(unsigned __int8 **)(v38 + 8) != 213)
            goto LABEL_55;
        }
        else if (((1 << v40) & 0x13D) != 0)
        {
          goto LABEL_55;
        }
        sub_22F401DC4((int *)v38, (uint64_t)&v92);
        v36 = v92;
      }
      __asm { BR              X9 }
    }
    if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)a1 + 11) + 2000) + 1) & 0x10) == 0 || !(*(_DWORD *)(a6 + 12) >> 30))
    {
      sub_22E8FCA40(a1, v15, 0x11A1u, 0, (uint64_t)&v92);
      LODWORD(v79) = 1;
      v44 = sub_22E8900C4((uint64_t)&v92, (int *)&v79);
      v45 = 0;
      if (a7 != 1)
        v45 = (*(_WORD *)(*((_QWORD *)a1 + 27) + 8) & 0x7Eu) - 38 < 0xFFFFFFFC;
      v88 = v45;
      v46 = sub_22E894E38(v44, (unsigned __int8 *)&v88);
      v83 = 0;
      v82 = 0;
      v85 = 0;
      v86 = 0;
      __p = 0;
      v87 = 0;
      v80 = v16 | (v17 << 32);
      v81 = 1;
      sub_22E890748(v46, &v80);
      if (SHIBYTE(v86) < 0)
        operator delete(__p);
      sub_22E903BEC((unsigned int *)&v92);
      goto LABEL_58;
    }
LABEL_55:
    v79 = 0;
    v29 = v101;
    v30 = v102;
    if ((v69 & 1) == 0)
    {
      v24 = sub_22F3B9448(v20, (uint64_t)v101, v102, a6, (uint64_t)&v79);
      v41 = v68;
LABEL_57:
      if (sub_22ED65268((uint64_t)a1, v20, v15, v41))
        goto LABEL_58;
      if (v24 && (*(_BYTE *)(v24 + 420) & 7) == 0)
      {
        v42 = 0;
        *(_DWORD *)(v24 + 24) = v15;
        v43 = 1;
        goto LABEL_87;
      }
      v47 = *((_QWORD *)a1 + 11);
      v48 = *(_QWORD *)(v20 + 16);
      v49 = (_QWORD *)(v48 & 0xFFFFFFFFFFFFFFF8);
      if (v41)
      {
        if ((v48 & 4) != 0)
          v49 = (_QWORD *)*v49;
        v52 = sub_22F3B97F0(v47, (uint64_t)v49, v73, v15, a6, v20, *a4, (uint64_t)a4, a7, (__int128 *)v101, v102, (uint64_t)&v104);
        if (!v24)
        {
          sub_22EFEC0D8(v20, v52, v79);
          sub_22ED64058(a1, v52);
          goto LABEL_78;
        }
        v54 = *(_QWORD *)(v24 + 80);
        v55 = *(_QWORD *)(v54 + 440);
        if (v55 >= 8)
          *(_QWORD *)(v54 + 440) = v55 | 4;
        sub_22ED64058(a1, v52);
      }
      else
      {
        if ((v48 & 4) != 0)
          v49 = (_QWORD *)*v49;
        v77 = *a4;
        v70 = (uint64_t)v49;
        v72 = (__int128 *)v101;
        v50 = v102;
        v51 = *((_QWORD *)a1 + 11);
        v52 = sub_22EFC7430(424, v47, (uint64_t)v49, 0);
        v53 = sub_22EFEC588(v52, 65, v51, v70, v73, v15, v20, v77, (uint64_t)a4, a7, v72, v50);
        sub_22EFEC7C4(v53, (uint64_t)&v104);
        if (!v24)
        {
          sub_22EFEBFD4(v20, v52, v79);
LABEL_78:
          v42 = 0;
          v43 = 1;
LABEL_86:
          v24 = v52;
LABEL_87:
          sub_22F345DAC(v24, v73);
          sub_22EFC80C4(v24, *((_QWORD *)a1 + 27));
          sub_22EFCCFA0(*((_QWORD *)a1 + 27), v24);
          *(_BYTE *)(v24 + 420) = *(_BYTE *)(v24 + 420) & 0xF8 | 2;
          if ((v43 & 1) != 0)
          {
            if ((*(_DWORD *)(v24 + 28) & 0x7F) != 0x40)
            {
              v56 = *(_QWORD *)(v24 + 16);
              v57 = v56 & 0xFFFFFFFFFFFFFFF8;
              if ((v56 & 4) != 0)
                v57 = *(_QWORD *)v57;
              if ((*(_WORD *)(v57 + 8) & 0x7Eu) - 34 <= 3
                && (*(unsigned int (**)(unint64_t))(*(_QWORD *)v24 + 24))(v24))
              {
                *(_DWORD *)(v24 + 28) = *(_DWORD *)(v24 + 28) & 0xFFFF9FFF | (((*(_DWORD *)(v20 + 28) >> 13) & 3) << 13);
              }
            }
            goto LABEL_59;
          }
          sub_22EA12DB4((uint64_t)a1, a3 + 40);
          v58 = *((_QWORD *)a1 + 27);
          v59 = *(_WORD *)(v58 + 8) & 0x7F;
          v60 = -40;
          if (v59 > 0x46)
          {
            switch(v59)
            {
              case 'S':
                goto LABEL_113;
              case 'G':
                v60 = -56;
                goto LABEL_113;
              case 'Q':
                goto LABEL_113;
            }
          }
          else
          {
            if (v59 <= 0x18)
            {
              if (v59 == 16)
                goto LABEL_97;
              if (((1 << v59) & 0x1066) != 0)
                goto LABEL_113;
              if (v59 == 24)
              {
LABEL_97:
                v60 = -48;
LABEL_113:
                if (sub_22EFB9D84(v58 + v60))
                  v63 = 1;
                else
                  v63 = 2;
                sub_22EA406B0((uint64_t)&v92, (uint64_t)a1, (__int128 *)&v80, 0, v63);
                v64 = *(unsigned int *)(v42 + 28);
                v65 = v94;
                if (v94 >= v95)
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v65 = v94;
                }
                *((_QWORD *)v93 + v65) = (v64 >> 13) & 3 | v42;
                ++v94;
                LODWORD(v92) = 2;
                if (sub_22EA1DDB8(a1, v24, (uint64_t)&v92))
                  v66 = 16;
                else
                  v66 = 0;
                *(_WORD *)(a3 + 1088) = *(_WORD *)(a3 + 1088) & 0xFFEF | v66;
                if (v100)
                {
                  if ((_DWORD)v92 == 5)
                  {
                    sub_22EC64D18(v99, (uint64_t)&v92);
                  }
                  else if (v98 && (*(_DWORD *)(v99[9] + 52) & 0x400000) != 0)
                  {
                    sub_22E90B5FC((unint64_t)v99, (uint64_t)&v92);
                  }
                }
                if (v97)
                {
                  v67 = sub_22EC6CBD0(v97);
                  MEMORY[0x2348A0E9C](v67, 0x10E0C409F09D3C3);
                }
                if (v93 != &v96)
                  free(v93);
                goto LABEL_59;
              }
            }
            if (v59 == 70)
            {
LABEL_111:
              v60 = -64;
              goto LABEL_113;
            }
          }
          if (v59 - 52 < 6)
          {
            v60 = -72;
            goto LABEL_113;
          }
          if (v59 - 33 < 5)
            goto LABEL_111;
          goto LABEL_97;
        }
        LODWORD(v17) = v74;
      }
      if (*(_DWORD *)(v24 + 416))
      {
        v61 = v24;
        while (sub_22ED65610(v61) != 2)
        {
          v61 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v61 + 48))(v61);
          if (!v61)
          {
            v80 = __PAIR64__(v17, v15);
            sub_22E8FCA40(a1, v15, 0x1269u, 0, (uint64_t)&v92);
            v62 = sub_22F30C54C((uint64_t)&v92, &v90);
            sub_22E8906A0(v62, (uint64_t *)&v80);
            sub_22E903BEC((unsigned int *)&v92);
            sub_22E8FCA40(a1, *(_DWORD *)(v24 + 416), 0x1638u, 0, (uint64_t)&v92);
            v88 = sub_22EFBC2B0(v24) != 1;
            sub_22E894E38((uint64_t)&v92, (unsigned __int8 *)&v88);
            sub_22E903BEC((unsigned int *)&v92);
            v24 = 0;
            goto LABEL_59;
          }
        }
      }
      v43 = 0;
      v42 = v24;
      goto LABEL_86;
    }
LABEL_56:
    v24 = sub_22EFEBC30(v20, (uint64_t)v29, v30, (uint64_t)&v79);
    v41 = 0;
    goto LABEL_57;
  }
  v21 = 0;
  v22 = 32 * v105;
  while (1)
  {
    v23 = *(_OWORD *)((char *)v104 + v21 + 16);
    v89[0] = *(_OWORD *)((char *)v104 + v21);
    v89[1] = v23;
    if ((sub_22EE734A8((uint64_t)a1, (uint64_t)v89, 15) & 1) != 0)
      break;
    v21 += 32;
    if (v22 == v21)
      goto LABEL_7;
  }
  v24 = 0;
LABEL_31:
  if (v104 != v106)
    free(v104);
  return v24;
}

uint64_t sub_22ED65198(_QWORD *a1, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v10 = *(_QWORD *)(a3 + 16);
  v11 = (_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 4) != 0)
    v11 = (_QWORD *)*v11;
  if ((sub_22EFC7ADC((unint64_t)v11) & 1) != 0)
    return 0;
  v12 = *(_QWORD *)(a3 + 56);
  v13 = *(_DWORD *)(v12 + 12);
  v14 = v13 & 0x1FFFFFFF;
  if ((v13 & 0x1FFFFFFF) == 0)
    return 0;
  v15 = 0;
  v16 = v12 + 16;
  v17 = a4;
  v18 = 1;
  while (1)
  {
    v19 = *(_QWORD *)(v16 + 8 * v15);
    if (v19)
    {
      if ((*(_DWORD *)(v19 + 28) & 0x7F) == 0x3B && (sub_22ED6B3F0(a1, a2, v19, a5, 1u, v15 >= v17) & 1) != 0)
        break;
    }
    ++v15;
    a5 += 24;
    if (v14 == v15)
      return 0;
  }
  return v18;
}

BOOL sub_22ED65268(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  BOOL v12;
  unsigned int *v13;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30[25];
  BOOL v31;
  unint64_t v32;
  _BYTE v33[96];
  unsigned int v34[25];
  int v35;
  uint64_t v36;

  v36 = a2;
  v7 = *(_DWORD *)(a2 + 28);
  v8 = v7 & 0x7F;
  switch(v8)
  {
    case 31:
      if (a4)
        v9 = 3;
      else
        v9 = 2;
      break;
    case 29:
      v9 = 4;
      break;
    case 28:
      v35 = a4;
      goto LABEL_16;
    default:
      v10 = v7 & 0x7E;
      if ((v10 - 54) > 3)
      {
        if ((v8 - 60) > 6)
        {
          if ((v10 - 34) > 3)
          {
            if (v8 != 33 || (*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 2) == 0)
            {
              sub_22E8FCA40((_QWORD *)a1, a3, 0x12FBu, 0, (uint64_t)v34);
              LODWORD(v32) = (**(_DWORD **)(a1 + 72) >> 9) & 1;
              sub_22E89519C((uint64_t)v34, (unsigned int *)&v32);
              sub_22E903BEC(v34);
              sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a2 + 24), 0x17C1u, 0, (uint64_t)v33);
              v13 = (unsigned int *)v33;
              goto LABEL_21;
            }
            v9 = 8;
          }
          else
          {
            v9 = 7;
          }
        }
        else
        {
          v9 = 6;
        }
      }
      else
      {
        v9 = 5;
      }
      break;
  }
  v35 = v9;
LABEL_16:
  v11 = *(_WORD *)(sub_22EFCBB30(*(_QWORD *)(a1 + 216)) + 8) & 0x7F;
  v12 = v11 > 0x18 || ((1 << v11) & 0x1000006) == 0;
  if (!v12 || v11 - 52 <= 5)
  {
    sub_22E8FCA40((_QWORD *)a1, a3, 0x12F3u, 0, (uint64_t)v34);
    sub_22E890024((uint64_t)v34, &v36);
    v13 = v34;
LABEL_21:
    sub_22E903BEC(v13);
    return 1;
  }
  v15 = *(_QWORD *)(a2 + 16);
  v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF8);
  if ((v15 & 4) != 0)
    v16 = (_QWORD *)*v16;
  v17 = sub_22EFCBB30((unint64_t)v16);
  v18 = sub_22EFCBB30(*(_QWORD *)(a1 + 216));
  v19 = v18;
  v20 = *(_WORD *)(v18 + 8) & 0x7F;
  if (v20 == 83 || v20 == 16)
  {
    if ((sub_22EFCBE78(v18, v17) & 1) != 0)
      return 0;
  }
  else if (v17)
  {
    v22 = sub_22EFCC008(v18);
    if (v22 == sub_22EFCC008(v17))
      return 0;
  }
  v23 = *(_WORD *)(v17 + 8) & 0x7F;
  if (v23 == 83)
  {
    sub_22E8FCA40((_QWORD *)a1, a3, 0x12F9u, 0, (uint64_t)v34);
    v24 = sub_22E8900C4((uint64_t)v34, &v35);
    sub_22E890024(v24, &v36);
    goto LABEL_60;
  }
  v25 = -40;
  if ((*(_WORD *)(v17 + 8) & 0x7Fu) > 0x46)
  {
    if (v23 == 71)
    {
      v25 = -56;
      goto LABEL_55;
    }
    if (v23 == 81)
      goto LABEL_55;
  }
  else
  {
    if (v23 <= 0x18)
    {
      if (v23 == 16)
        goto LABEL_40;
      if (((1 << v23) & 0x1066) != 0)
        goto LABEL_55;
      if (v23 == 24)
        goto LABEL_40;
    }
    if (v23 == 70)
    {
LABEL_53:
      v25 = -64;
      goto LABEL_55;
    }
  }
  if (v23 - 52 < 6)
  {
    v25 = -72;
    goto LABEL_55;
  }
  if (v23 - 33 < 5)
    goto LABEL_53;
LABEL_40:
  v25 = -48;
LABEL_55:
  v32 = v17 + v25;
  v26 = 4858;
  if ((**(_BYTE **)(a1 + 72) & 0x20) != 0)
  {
    if ((*(_WORD *)(v19 + 8) & 0x7Eu) - 34 >= 4)
      v26 = 5303;
    else
      v26 = 4858;
  }
  sub_22E8FCA40((_QWORD *)a1, a3, v26, 0, (uint64_t)v34);
  v27 = sub_22E8900C4((uint64_t)v34, &v35);
  v28 = sub_22E890024(v27, &v36);
  v29 = sub_22E890024(v28, (uint64_t *)&v32);
  v31 = (*(_DWORD *)(v32 + 28) & 0x7Fu) - 35 < 3;
  sub_22E894E38(v29, (unsigned __int8 *)&v31);
LABEL_60:
  sub_22E903BEC(v34);
  sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v36 + 24), 0x17C1u, 0, (uint64_t)v30);
  sub_22E903BEC(v30);
  return (*(_WORD *)(v19 + 8) & 0x7Eu) - 34 < 4;
}

uint64_t sub_22ED65610(unint64_t a1)
{
  int v1;
  int v2;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v8;

  v1 = *(_DWORD *)(a1 + 28);
  v2 = v1 & 0x7F;
  if (a1 && (v2 - 38) >= 0xFFFFFFFD)
    return sub_22EFD5760(a1);
  if (a1 && (v1 & 0x7Eu) - 58 >= 0xFFFFFFFA)
  {
    v4 = *(_QWORD *)(a1 + 144) & 6;
    v5 = (_DWORD *)(*(_QWORD *)(a1 + 144) & 0xFFFFFFFFFFFFFFF8);
    if (v4 == 4 && v5 != 0)
    {
      v5 += 4;
      return ((*v5 >> 1) & 3u) + 1;
    }
    if (v4 == 2 && v5 != 0)
      return ((*v5 >> 1) & 3u) + 1;
    return 0;
  }
  else
  {
    v8 = 0;
    if (a1 && (v2 - 67) >= 0xFFFFFFF9)
      return sub_22EFBC2B0(a1);
  }
  return v8;
}

unint64_t sub_22ED6569C(_QWORD *a1, unint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  _QWORD *v8;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  int v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  uint64_t *v30;
  int v31;
  int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  _BYTE *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  int i;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  unint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t *v63;
  _QWORD *v64;
  uint64_t v65;
  unsigned __int8 *v66;
  _QWORD *v67;
  unsigned __int8 *v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  _QWORD *v72;
  void *__p[2];
  char v74;
  char *v75;
  int v76;
  uint64_t v77;
  _OWORD v78[3];
  uint64_t v79;
  unsigned int v80;
  char v81;
  void *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  unsigned int v87;
  char v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  int v94;
  void *v95;
  uint64_t v96;
  _QWORD v97[10];
  void *v98;
  uint64_t v99;
  _BYTE v100[104];
  void *v101;
  uint64_t v102;
  _BYTE v103[64];
  void *v104;
  uint64_t v105;
  _BYTE v106[32];
  void *v107;
  uint64_t v108;
  _BYTE v109[1024];
  unsigned int v110;
  char v111;
  void *v112;
  uint64_t v113;
  _BYTE v114[64];
  char *v115;
  uint64_t v116;
  _QWORD v117[14];

  v8 = a1;
  v117[12] = *MEMORY[0x24BDAC8D0];
  v115 = (char *)v117;
  v116 = 0x400000000;
  if ((sub_22ED61988(a1, a2, a4, a5, 0, &v115, 1, 0) & 1) != 0)
  {
    v10 = 0;
    goto LABEL_14;
  }
  v11 = *(_QWORD *)(a2 + 16);
  v12 = (_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF8);
  if ((v11 & 4) != 0)
    v12 = (_QWORD *)*v12;
  if ((sub_22EFC7ADC((unint64_t)v12) & 1) != 0)
  {
LABEL_6:
    v10 = 0;
    goto LABEL_14;
  }
  v13 = v115;
  v14 = v116;
  if ((_DWORD)v116)
  {
    v15 = 24 * v116;
    do
    {
      if ((sub_22F0EEB00((uint64_t)v13) & 4) != 0)
        goto LABEL_6;
      v13 += 24;
      v15 -= 24;
    }
    while (v15);
    v13 = v115;
    v14 = v116;
  }
  v77 = 0;
  v16 = sub_22EFEBC30(a2, (uint64_t)v13, v14, (uint64_t)&v77);
  if (v16)
  {
    v10 = v16;
    sub_22ED65E9C((uint64_t)v8, a4, v16);
    goto LABEL_14;
  }
  v70 = a4;
  v69 = *(_QWORD *)(a2 + 48);
  v75 = v115;
  v76 = v116;
  v112 = v114;
  v113 = 0x400000000;
  v107 = v109;
  v108 = 0x1000000000;
  v110 = a4;
  v111 = 0;
  v104 = v106;
  v105 = 0x400000000;
  sub_22EFEC460(a2, (uint64_t)&v104);
  if ((_DWORD)v105)
  {
    v18 = 0;
    v71 = 8 * v105;
    v72 = v8;
    do
    {
      v19 = *(_QWORD *)((char *)v104 + v18);
      v79 = 0;
      v80 = v110;
      v81 = 0;
      v82 = 0;
      v83 = (char *)&v85;
      v84 = 0x400000000;
      v89 = 0;
      v90 = 0;
      v91 = 0;
      v92 = 0;
      v93 = 0;
      v94 = 0;
      v95 = v97;
      v96 = 0x800000000;
      v97[8] = 0;
      v97[9] = 0;
      v98 = v100;
      v99 = 0x400000000;
      v100[96] = 0;
      v101 = v103;
      v102 = 0x400000000;
      v20 = sub_22EDC07E0((uint64_t)v8, v19, (uint64_t)&v75, (uint64_t)&v79);
      if (v20)
      {
        v21 = v8;
        v22 = v20;
        sub_22ED23640((uint64_t)&v107);
        v23 = (char *)v107 + 64 * (unint64_t)v108;
        sub_22ECF93D4(v21[11], v22, (unint64_t)&v79, (uint64_t)v78);
        *((_QWORD *)v23 - 8) = a2;
        *((_QWORD *)v23 - 7) = v19;
        v24 = v78[0];
        v25 = v78[2];
        *((_OWORD *)v23 - 2) = v78[1];
        *((_OWORD *)v23 - 1) = v25;
        *((_OWORD *)v23 - 3) = v24;
      }
      else
      {
        v26 = v113;
        if (v113 >= (unint64_t)HIDWORD(v113))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v26 = v113;
        }
        v27 = (char *)v112 + 16 * v26;
        *v27 = 0;
        v27[1] = 0;
        LODWORD(v113) = v113 + 1;
        v28 = (char *)v112 + 16 * v113;
        *((_QWORD *)v28 - 2) = v19;
        v29 = v79;
        v79 = 0;
        *((_QWORD *)v28 - 1) = v29;
      }
      if (v101 != v103)
        free(v101);
      v8 = v72;
      if (v98 != v100)
        free(v98);
      if (v95 != v97)
        free(v95);
      sub_22E89277C(&v83);
      v18 += 8;
    }
    while (v71 != v18);
  }
  if ((_DWORD)v113)
  {
    v30 = (uint64_t *)v112;
    v31 = a4;
    if ((_DWORD)v113 == 1)
    {
      v32 = 0;
    }
    else
    {
      v35 = (uint64_t *)((char *)v112 + 16);
      v36 = 16 * v113 - 16;
      v37 = (uint64_t *)((char *)v112 + 16);
      do
      {
        v38 = sub_22F347794((uint64_t)v8, *v35, *v30, v70);
        v39 = *v37;
        v37 += 2;
        if (v38 == v39)
          v30 = v35;
        v35 = v37;
        v36 -= 16;
      }
      while (v36);
      if ((_DWORD)v113)
      {
        v40 = (uint64_t *)v112;
        v41 = 16 * v113;
        while (v40 == v30 || sub_22F347794((uint64_t)v8, *v40, *v30, v70) == *v30)
        {
          v40 += 2;
          v41 -= 16;
          if (!v41)
            goto LABEL_45;
        }
        v32 = 1;
      }
      else
      {
LABEL_45:
        v32 = 0;
      }
    }
    v34 = *v30;
    v33 = (uint64_t *)v30[1];
    v42 = sub_22EE4616C((uint64_t)v8, a2, *v30, v33, a5, (uint64_t)&v115, v70, 0);
    v10 = v42;
    if (!v42)
      goto LABEL_87;
    if (v32)
    {
      sub_22EFC77E8(v42, 1);
      sub_22E8FCA40(v8, v70, 0x11A3u, 0, (uint64_t)&v79);
      if (v86)
      {
        v43 = (unsigned __int8 *)v84;
        if (!v84)
        {
          v43 = (unsigned __int8 *)sub_22E3B8AAC(v85);
          v84 = (uint64_t)v43;
        }
        v43[*v43 + 1] = 11;
        v44 = (_BYTE *)v84;
      }
      else
      {
        if (!v88)
        {
LABEL_98:
          sub_22E903BEC((unsigned int *)&v79);
          if ((_DWORD)v113)
          {
            v58 = (char *)v112;
            v59 = (char *)v112 + 16 * v113;
            do
            {
              v60 = *(_QWORD *)v58;
              v61 = *((_QWORD *)v58 + 1);
              sub_22E8FCA40(v8, *(_DWORD *)(*(_QWORD *)v58 + 24), 0x175Du, 0, (uint64_t)&v79);
              sub_22ED730EC((uint64_t)v8, *(_QWORD *)(v60 + 424), *(_QWORD *)v61, *(_DWORD *)(v61 + 8), __p);
              sub_22F2F3734((uint64_t)&v79, __p);
              if (v74 < 0)
                operator delete(__p[0]);
              sub_22E903BEC((unsigned int *)&v79);
              v10 = 0;
              v58 += 16;
            }
            while (v58 != v59);
          }
          else
          {
            v10 = 0;
          }
          goto LABEL_87;
        }
        v62 = v82;
        v63 = (uint64_t *)(v79 + 12784);
        if (v82)
          v62 = (void *)(*(uint64_t (**)(void *))(*(_QWORD *)v82 + 32))(v82);
        __p[0] = v62;
        v64 = sub_22F2F1D6C(v63, (uint64_t *)__p);
        v65 = v64[1] + 32 * v87;
        v68 = *(unsigned __int8 **)(v65 + 8);
        v67 = (_QWORD *)(v65 + 8);
        v66 = v68;
        if (!v68)
        {
          v66 = (unsigned __int8 *)sub_22E3B8AAC(v67[1]);
          *v67 = v66;
        }
        v66[*v66 + 1] = 11;
        v44 = (_BYTE *)*v67;
      }
      v45 = *v44;
      *v44 = v45 + 1;
      *(_QWORD *)&v44[8 * v45 + 16] = v10;
      goto LABEL_98;
    }
  }
  else
  {
    v33 = (uint64_t *)&v75;
    v34 = v69;
    v31 = v70;
    v10 = sub_22EE4616C((uint64_t)v8, a2, v69, (uint64_t *)&v75, a5, (uint64_t)&v115, v70, 0);
    if (!v10)
      goto LABEL_87;
  }
  if (v34 && (*(_DWORD *)(v34 + 28) & 0x7F) == 0x42)
  {
    v46 = v10;
    if ((*(_DWORD *)(v10 + 28) & 0x7F) != 0x53)
    {
      v47 = *(_QWORD *)(v10 + 16);
      v48 = v47 & 0xFFFFFFFFFFFFFFF8;
      if ((v47 & 4) != 0)
        v48 = *(_QWORD *)v48;
      for (i = *(_WORD *)(v48 + 8) & 0x7F; i != 83; i = *(_WORD *)(v48 + 8) & 0x7F)
      {
        v50 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v50 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_71;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_70;
          if (i == 16)
            goto LABEL_64;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_77;
          if (i == 24)
          {
LABEL_64:
            v50 = -48;
          }
          else
          {
LABEL_70:
            if (i != 70)
            {
LABEL_71:
              v51 = i - 52;
              if ((i - 33) >= 5)
                v52 = -48;
              else
                v52 = -64;
              if (v51 >= 6)
                v50 = v52;
              else
                v50 = -72;
              goto LABEL_77;
            }
            v50 = -64;
          }
        }
LABEL_77:
        v53 = *(_QWORD *)(v48 + v50 + 16);
        v48 = v53 & 0xFFFFFFFFFFFFFFF8;
        if ((v53 & 4) != 0)
          v48 = *(_QWORD *)v48;
      }
      v46 = v48 - 40;
    }
    v54 = sub_22E3CD3D4(*(_QWORD *)(v46 + 88) + 2032, 16, 3);
    *(_QWORD *)v54 = v34;
    *(_QWORD *)(v54 + 8) = v33;
    *(_QWORD *)(v10 + 112) = v54 | 4;
  }
  sub_22ED65E9C((uint64_t)v8, v31, v10);
LABEL_87:
  if (v104 != v106)
    free(v104);
  v55 = v107;
  if ((_DWORD)v108)
  {
    v56 = (unint64_t)v108 << 6;
    v57 = (char *)v107 + 16;
    do
    {
      sub_22ECF95E4((unint64_t)v57);
      v57 += 64;
      v56 -= 64;
    }
    while (v56);
    v55 = v107;
  }
  if (v55 != v109)
    free(v55);
  if (v112 != v114)
    free(v112);
LABEL_14:
  if (v115 != (char *)v117)
    free(v115);
  return v10;
}

void sub_22ED65E9C(uint64_t a1, int a2, unint64_t a3)
{
  unint64_t v3;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  void *v25[2];
  _QWORD v26[9];

  v26[8] = *MEMORY[0x24BDAC8D0];
  if ((*(_QWORD *)(*(_QWORD *)(a1 + 72) + 20) & 0x200000000000) != 0)
  {
    v3 = a3;
    v23 = a1;
    v24 = a2;
    v25[0] = v26;
    v25[1] = (void *)0x800000000;
    v5 = *(_DWORD *)(a3 + 28);
    v6 = v5 & 0x7E;
    if (a3 && (v6 - 58) >= 0xFFFFFFFA)
    {
      v7 = *(_QWORD *)(a3 + 144) & 6;
      v8 = *(_QWORD *)(a3 + 144) & 0xFFFFFFFFFFFFFFF8;
      if (v7 != 4 || v8 == 0)
      {
        v10 = v7 != 2 || v8 == 0;
        if (v10 || (*(_QWORD *)v8 & 6) != 2)
          goto LABEL_75;
LABEL_14:
        if ((sub_22EC629C0(a1, a3, (uint64_t)v25) & 1) == 0)
        {
LABEL_53:
          v17 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 112) + 104), *(_QWORD *)(v3 + 112));
          goto LABEL_74;
        }
LABEL_75:
        if (v25[0] != v26)
          free(v25[0]);
        return;
      }
      v20 = *(_QWORD *)(v8 + 16);
      if ((v20 & 6) == 2)
      {
        if ((*(_BYTE *)(v8 + 8) & 4) == 0 || !*(_QWORD *)(v8 + 48))
        {
          if ((sub_22EC62824(a1, a3, (uint64_t)v25) & 1) != 0)
            goto LABEL_75;
          goto LABEL_53;
        }
        goto LABEL_14;
      }
      v3 = v20 & 0xFFFFFFFFFFFFFFF8;
      if ((v20 & 0xFFFFFFFFFFFFFFF8) == 0)
        goto LABEL_75;
LABEL_69:
      if ((*(_BYTE *)sub_22EFE9368(v3) & 4) == 0 || (sub_22EC629C0(v23, v3, (uint64_t)v25) & 1) != 0)
        goto LABEL_75;
      v17 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 72) + 64), *(_QWORD *)(v3 + 72));
      goto LABEL_74;
    }
    v11 = v5 & 0x7F;
    if (a3 && (v11 - 38) >= 0xFFFFFFFD)
    {
      if (sub_22EFD5760(a3) != 2)
      {
        if (v6 != 36)
          goto LABEL_75;
        v18 = *(_QWORD *)(v3 + 152);
        v19 = v18 & 0xFFFFFFFFFFFFFFF8;
        if ((v18 & 4) != 0 && v19)
          v19 = *(_QWORD *)v19 | 4;
        v3 = v19 & 0xFFFFFFFFFFFFFFF8;
        if ((v19 & 4) != 0 || !v3)
        {
          if (!v3 || (v19 & 4) == 0)
            goto LABEL_75;
          if ((*(_BYTE *)(v3 + 8) & 4) != 0
            && (sub_22EC62AF4(a1, v3) & 1) == 0
            && (sub_22EC63260(a1, v3, 0) & 1) == 0)
          {
            sub_22EDA489C((uint64_t)&v23, v3, 1);
          }
          if ((*(_BYTE *)(*(_QWORD *)(v3 + 104) + 200) & 4) == 0 || (sub_22EC629C0(v23, v3, (uint64_t)v25) & 1) != 0)
            goto LABEL_75;
          v17 = sub_22E6939D8(v3);
          goto LABEL_74;
        }
        goto LABEL_69;
      }
      v12 = *(_QWORD *)(v3 + 136);
      if (v12 < 8 || (v12 & 4) == 0)
      {
        if ((sub_22EC62824(a1, v3, (uint64_t)v25) & 1) != 0)
          goto LABEL_75;
LABEL_34:
        v17 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
LABEL_74:
        sub_22EDA489C((uint64_t)&v23, v17, 0);
        goto LABEL_75;
      }
LABEL_33:
      if ((sub_22EC629C0(a1, v3, (uint64_t)v25) & 1) != 0)
        goto LABEL_75;
      goto LABEL_34;
    }
    if (!a3 || (v11 - 67) < 0xFFFFFFF9)
    {
      if (!a3)
        goto LABEL_75;
      if (v11 != 33)
        goto LABEL_75;
      v16 = *(_QWORD **)(a3 + 144);
      if (!v16 || (*v16 & 6) != 2)
        goto LABEL_75;
      goto LABEL_33;
    }
    if (sub_22EFBC2B0(a3) == 2)
    {
      v13 = sub_22EFBE104(v3);
      v14 = v23;
      v15 = v3;
      if (!v13)
      {
        if ((sub_22EC62824(v23, v3, (uint64_t)v25) & 1) != 0)
          goto LABEL_75;
        goto LABEL_73;
      }
    }
    else
    {
      if ((*(_DWORD *)(v3 + 28) & 0x7Fu) - 67 < 0xFFFFFFFE)
        goto LABEL_75;
      v21 = *(_QWORD *)(v3 + 112);
      v22 = v21 & 0xFFFFFFFFFFFFFFF8;
      if ((v21 & 4) != 0 && v22)
        v22 = *(_QWORD *)v22 | 4;
      v3 = v22 & 0xFFFFFFFFFFFFFFF8;
      if ((v22 & 4) == 0 && v3)
        goto LABEL_69;
      if (!v3 || (v22 & 4) == 0)
        goto LABEL_75;
      if ((*(_BYTE *)(v3 + 8) & 4) != 0 && (sub_22EC62AF4(v23, v3) & 1) == 0 && (sub_22EC63260(v23, v3, 0) & 1) == 0)
        sub_22EDA489C((uint64_t)&v23, v3, 1);
      if ((*(_BYTE *)(*(_QWORD *)(v3 + 80) + 440) & 4) == 0)
        goto LABEL_75;
      v14 = v23;
      v15 = v3;
    }
    if ((sub_22EC629C0(v14, v15, (uint64_t)v25) & 1) != 0)
      goto LABEL_75;
LABEL_73:
    v17 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 80) + 72), *(_QWORD *)(v3 + 80));
    goto LABEL_74;
  }
}

uint64_t sub_22ED66260(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v10;
  char v11;
  uint64_t v12;

  v10 = sub_22ED6569C(a1, a4, a3, *(_DWORD *)(a3 + 8), a6);
  if (v11)
    return 1;
  v12 = v10;
  if (!v10)
    return 0;
  if (!sub_22EFBC2B0(v10))
    sub_22EFBEC04(v12, 1, *(_DWORD *)(a3 + 8));
  return sub_22EB24A3C(a1, a2, a3, v12, 0, a6, 0);
}

uint64_t sub_22ED66318(_QWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  int v17;
  unint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  int v37;

  v12 = sub_22ED57594(a4);
  if (a6 || !v12 || (*(_DWORD *)(v12 + 28) & 0x7F) == 0x1D)
  {
    if (*(_DWORD *)a4 != 2)
      goto LABEL_35;
    v14 = **(_QWORD **)(a4 + 8) & 0xFFFFFFFFFFFFFFFCLL;
    v15 = *(_DWORD *)(v14 + 28) & 0x7F;
    v16 = v15 > 0x2F || ((1 << v15) & 0xC00000060000) == 0;
    v17 = *(_DWORD *)(v14 + 28) & 0x7F;
    if (!v16)
    {
      v34 = **(_QWORD **)(a4 + 8) & 0xFFFFFFFFFFFFFFFCLL;
      v37 = *(_DWORD *)(v14 + 28) & 0x7F;
      v35 = sub_22EFBAEA4(v14);
      v14 = v34;
      v36 = *(_DWORD *)(v35 + 28);
      v15 = v37;
      v17 = v36 & 0x7F;
    }
    if (v17 != 31)
      goto LABEL_35;
    if (v15 <= 0x2F && ((1 << v15) & 0xC00000060000) != 0)
    {
      v14 = sub_22EFBAEA4(v14);
      v15 = *(_DWORD *)(v14 + 28) & 0x7F;
    }
    v19 = v15 == 31 ? v14 : 0;
    result = sub_22ED66260(a1, a2, a4 + 120, v19, v13, a6);
    if (!result)
    {
LABEL_35:
      if (sub_22ED6654C(a4))
      {
        v28 = **(_QWORD **)(a4 + 8) & 0xFFFFFFFFFFFFFFFCLL;
        v29 = *(_DWORD *)(v28 + 28) & 0x7F;
        v30 = v29 > 0x2F;
        v31 = (1 << v29) & 0xC00000060000;
        if (!v30 && v31 != 0)
          v28 = sub_22EFBAEA4(**(_QWORD **)(a4 + 8) & 0xFFFFFFFFFFFFFFFCLL);
        v33 = sub_22ED6654C(a4);
        return sub_22F345EB4((uint64_t)a1, (unsigned int *)a2, a3, (__int128 *)(a4 + 120), v28, v33, a6);
      }
      else
      {
        *(_BYTE *)(a4 + 163) = 0;
        v21 = a1[11];
        v22 = *(_QWORD *)(a4 + 96);
        v24 = *(_QWORD *)(a2 + 8);
        v23 = (uint64_t *)(a2 + 8);
        if (v24)
        {
          v25 = sub_22F0ABC50(v23, v21);
          v26 = v27;
        }
        else
        {
          v25 = 0;
          v26 = 0;
        }
        return (uint64_t)sub_22F060684(v21, v22, v25, v26, a3, a4 + 120, a5, a6, *(const void **)(a4 + 8), *(_QWORD *)(a4 + 8) + 8 * *(unsigned int *)(a4 + 16));
      }
    }
  }
  else
  {
    sub_22F345DF8(a1, v12 & 0xFFFFFFFFFFFFFFF9, *(_DWORD *)(a4 + 128));
    return 1;
  }
  return result;
}

uint64_t sub_22ED6654C(uint64_t a1)
{
  uint64_t result;
  unsigned int v2;

  if (*(_DWORD *)a1 != 2)
    return 0;
  result = **(_QWORD **)(a1 + 8) & 0xFFFFFFFFFFFFFFFCLL;
  v2 = *(_DWORD *)(result + 28) & 0x7F;
  if (v2 <= 0x2F && ((1 << v2) & 0xC00000060000) != 0)
  {
    result = sub_22EFBAEA4(result);
    v2 = *(_DWORD *)(result + 28) & 0x7F;
  }
  if (v2 != 27)
    return 0;
  return result;
}

uint64_t sub_22ED665B8(_QWORD *a1, uint64_t *a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[96];
  uint64_t v29;
  uint64_t v30;
  void *__p[2];
  char v32;
  uint64_t v33;
  unsigned int v34[25];
  char v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _BYTE v40[64];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int16 v49;
  int v50;
  char v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v10 = sub_22E958204((uint64_t)a1, (uint64_t)a2, 0);
  v36 = v10;
  if (!v10 || (v11 = v10, (sub_22EFC7ADC(v10) & 1) != 0) || sub_22E958490(a1, a2, v11))
  {
    v13 = a2[1];
    v12 = a2 + 1;
    if (v13 && (v16 = sub_22F0ABC50(v12, a1[11])) != 0)
      return sub_22F060928(a1[11], v16, v17, a3, (__int128 *)a4, a5);
    else
      return 1;
  }
  v37 = 0;
  v38 = v40;
  v39 = 0x800000000;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v44 = a1;
  v45 = *(_OWORD *)a4;
  v18 = *(_QWORD *)(a4 + 16);
  v47 = 0;
  v48 = 0;
  v46 = v18;
  v49 = 0;
  v50 = 257;
  v51 = 0;
  sub_22EC56024((uint64_t)&v37);
  v14 = 1;
  if ((sub_22ED566F4((uint64_t)a1, (uint64_t)&v37, 0, (uint64_t)a2, 0, 0, &v35, a3 | 0x100000000, 0, 1) & 1) == 0)
  {
    if ((_DWORD)v37 != 5)
    {
      if ((_DWORD)v39)
      {
        if ((_DWORD)v37 != 2)
          goto LABEL_19;
        v19 = *v38 & 0xFFFFFFFFFFFFFFFCLL;
        v20 = *(_DWORD *)(v19 + 28);
        if ((v20 & 0x7Fu) <= 0x2F && ((1 << (v20 & 0x7F)) & 0xC00000060000) != 0)
        {
          v19 = sub_22EFBAEA4(*v38 & 0xFFFFFFFFFFFFFFFCLL);
          v20 = *(_DWORD *)(v19 + 28);
        }
        if ((v20 & 0x7F) != 0x1C)
        {
LABEL_19:
          v14 = sub_22ED66318(a1, (uint64_t)a2, a3, (uint64_t)&v37, 0, a5);
          goto LABEL_23;
        }
        sub_22E8FCA40(a1, *(_DWORD *)(a4 + 8), 0x12D6u, 0, (uint64_t)v34);
        v33 = a2[1];
        v25 = sub_22EA02390((uint64_t)v34, &v33);
        v30 = *(_QWORD *)a4;
        sub_22EFC683C(&v30, __p);
        v26 = sub_22F2F3734(v25, __p);
        v29 = *a2;
        sub_22E8906A0(v26, &v29);
        if (v32 < 0)
          operator delete(__p[0]);
        sub_22E903BEC(v34);
        sub_22E8FCA40(a1, *(_DWORD *)(v19 + 24), 0x17AEu, 0, (uint64_t)v28);
        v24 = (unsigned int *)v28;
      }
      else
      {
        sub_22E8FCA40(a1, *(_DWORD *)(a4 + 8), 0xFAAu, 0, (uint64_t)v34);
        __p[0] = *(void **)a4;
        v22 = sub_22E894538((uint64_t)v34, (uint64_t *)__p);
        v23 = sub_22E894FB4(v22, &v36);
        v33 = *a2;
        sub_22E8906A0(v23, &v33);
        v24 = v34;
      }
      sub_22E903BEC(v24);
    }
    v14 = 1;
  }
LABEL_23:
  if (BYTE1(v50))
  {
    if ((_DWORD)v37 == 5)
    {
      sub_22EC64D18(v44, (uint64_t)&v37);
    }
    else if (v42 && (*(_DWORD *)(v44[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v44, (uint64_t)&v37);
    }
  }
  if (v41)
  {
    v27 = sub_22EC6CBD0(v41);
    MEMORY[0x2348A0E9C](v27, 0x10E0C409F09D3C3);
  }
  if (v38 != (_QWORD *)v40)
    free(v38);
  return v14;
}

uint64_t sub_22ED66924(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4, uint64_t a5, unint64_t a6, int a7, unint64_t *a8, char a9)
{
  unsigned int v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  void *__p;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  uint64_t v55[3];
  char v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  _BYTE v62[64];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  int v68;
  _QWORD v69[3];
  __int16 v70;
  int v71;
  char v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  v58 = a4;
  if (a2 && a4 && !a2[8])
  {
    if ((**(_QWORD **)(a1 + 72) & 0x200) != 0)
      v17 = 6459;
    else
      v17 = 5361;
    sub_22E8FCA40((_QWORD *)a1, a4, v17, 0, (uint64_t)&v59);
    v49 = 0;
    v48 = 0;
    v51 = 0;
    v52 = 0;
    __p = 0;
    v53 = 0;
    v46 = a4 | ((unint64_t)a4 << 32);
    v47 = 1;
    sub_22E890748((uint64_t)&v59, &v46);
    if (SHIBYTE(v52) < 0)
      operator delete(__p);
    sub_22E903BEC((unsigned int *)&v59);
  }
  if (*(_DWORD *)a3)
    v18 = *(_DWORD *)(a3 + 4) == 0;
  else
    v18 = 1;
  v19 = !v18;
  v20 = *(_QWORD *)(a3 + 8);
  if (v19 == 1 && v20 == 0)
    return 0;
  v57 = 0;
  if (v20)
    v19 = 1;
  if (v19 == 1)
  {
    v22 = sub_22E958204(a1, a3, a7);
  }
  else
  {
    if (!a6)
    {
      v24 = 0;
      goto LABEL_33;
    }
    if (a6 >= 0x10)
    {
      v25 = *(_QWORD *)(a6 & 0xFFFFFFFFFFFFFFF0);
      v23 = a6;
      if (v25)
      {
        v23 = a6;
        if (*(_BYTE *)(v25 + 16) == 57)
          v23 = *(_QWORD *)(v25 + 8);
      }
    }
    else
    {
      v23 = 0;
    }
    v22 = sub_22E9580E4(a1, v23);
  }
  v24 = v22;
  v57 = v22;
LABEL_33:
  v56 = 0;
  v26 = sub_22ED562E8((_QWORD *)a1, a2, a3, a4 != 0, (int *)a5, a6, a7, a8, &v56, 0);
  if (!(_DWORD)v26)
  {
    if (v56)
    {
      v39 = *(_QWORD *)(a3 + 8);
      if (*(_DWORD *)a5 == 1)
      {
        *a8 = sub_22F36E79C(*(_QWORD *)(a1 + 88), v39, *(unsigned int *)(a5 + 8));
        return 1;
      }
      if (!*(_DWORD *)a5)
      {
        *a8 = sub_22F36E5B0(*(_QWORD *)(a1 + 88), v39, *(_QWORD *)(a5 + 8));
        return 4;
      }
      sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a5 + 24), 0x12D7u, 0, (uint64_t)&v59);
      sub_22EA12DB4(a1, a5);
      v55[0] = v46;
      v40 = sub_22E894538((uint64_t)&v59, v55);
      v45 = *(_QWORD *)(a5 + 24);
      v41 = sub_22E8906A0(v40, &v45);
      LOBYTE(v44) = a4 != 0;
      v42 = sub_22E894E38(v41, (unsigned __int8 *)&v44);
      sub_22F2F2168(v42, &v58);
      sub_22E903BEC((unsigned int *)&v59);
    }
    else
    {
      sub_22EA12DB4(a1, a5);
      v29 = *(_DWORD *)(a5 + 24);
      v59 = 0;
      v60 = v62;
      v61 = 0x800000000;
      v63 = 0;
      v64 = 0;
      v65 = 0;
      v66 = (_QWORD *)a1;
      v67 = v55[0];
      v68 = v29;
      sub_22EFC6D6C((uint64_t)v69, v55[0]);
      v69[1] = 0;
      v69[2] = 0;
      v70 = 0;
      v71 = 257;
      v72 = 0;
      sub_22EC56024((uint64_t)&v59);
      if ((sub_22ED566F4(a1, (uint64_t)&v59, a2, a3, a6, a7, &v54, a4 | ((unint64_t)(a4 != 0) << 32), 0, 0) & 1) == 0
        && (_DWORD)v59 != 5)
      {
        if (v24)
        {
          sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a5 + 24), 0xFAAu, 0, (uint64_t)&v46);
          v45 = v55[0];
          v30 = sub_22E894538((uint64_t)&v46, &v45);
          v31 = sub_22E894FB4(v30, &v57);
        }
        else
        {
          sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a5 + 24), 0x13B7u, 0, (uint64_t)&v46);
          v45 = v55[0];
          v31 = sub_22E894538((uint64_t)&v46, &v45);
        }
        v44 = *(_QWORD *)a3;
        sub_22E8906A0(v31, &v44);
        sub_22E903BEC((unsigned int *)&v46);
      }
      if (BYTE1(v71))
      {
        if ((_DWORD)v59 == 5)
        {
          sub_22EC64D18(v66, (uint64_t)&v59);
        }
        else if (v64 && (*(_DWORD *)(v66[9] + 52) & 0x400000) != 0)
        {
          sub_22E90B5FC((unint64_t)v66, (uint64_t)&v59);
        }
      }
      if (v63)
      {
        v43 = sub_22EC6CBD0(v63);
        MEMORY[0x2348A0E9C](v43, 0x10E0C409F09D3C3);
      }
      if (v60 != v62)
        free(v60);
    }
    return 0;
  }
  v27 = v26;
  if (v24)
  {
    if ((*(_WORD *)(v24 + 8) & 0x7Fu) - 35 >= 3)
      v28 = 0;
    else
      v28 = v24 - 64;
    if ((a9 & 1) != 0)
      return v27;
  }
  else
  {
    v28 = 0;
    if ((a9 & 1) != 0)
      return v27;
  }
  if (*(_DWORD *)a3 && *(_DWORD *)(a3 + 4) || *(_QWORD *)(a3 + 8) != 0)
  {
    if (v28)
    {
      if (!*(_DWORD *)a5)
      {
        v33 = *(_QWORD *)(a5 + 8);
        if (v33)
        {
          v34 = *(_QWORD *)(v28 + 40);
          if ((v34 & 7) != 0)
            v35 = 0;
          else
            v35 = v34 & 0xFFFFFFFFFFFFFFF8;
          if (v35 == v33)
          {
            sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a5 + 24), 0x14CBu, 0, (uint64_t)&v59);
            v36 = sub_22E8BAE44((uint64_t)&v59, (uint64_t *)(a5 + 8));
            LODWORD(v46) = 0;
            v37 = sub_22E8900C4(v36, (int *)&v46);
            LOBYTE(v55[0]) = a4 != 0;
            sub_22E894E38(v37, (unsigned __int8 *)v55);
            sub_22E903BEC((unsigned int *)&v59);
          }
        }
      }
    }
  }
  return v27;
}

unint64_t sub_22ED66E64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, unsigned int a4@<W3>, unint64_t a5@<X4>, uint64_t a6@<X5>, _BYTE *a7@<X6>, uint64_t a8@<X8>)
{
  int v16;
  unint64_t result;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int *v24;
  __int128 v25;
  int *v26;
  int v27;
  __int128 v28;
  uint64_t v29;

  *a7 = 0;
  v16 = *(_DWORD *)(a5 + 28) & 0x7F;
  if (a5 && v16 == 38)
  {
    result = sub_22EC624F8(a1, a5, 0);
    if ((result & 1) != 0)
    {
      *a7 = 1;
      result = sub_22ED6706C(a1, a2, a3, a4, a5, a6);
      if (result)
      {
        v18 = *(_QWORD *)result;
        *(_DWORD *)a8 = 1;
        *(_QWORD *)(a8 + 8) = v18;
        v19 = result & 0xFFFFFFFFFFFFFFFCLL | 2;
LABEL_11:
        *(_QWORD *)(a8 + 24) = v19;
        return result;
      }
    }
  }
  else
  {
    result = sub_22EC624F8(a1, a5, 0);
    if (a5 && v16 == 59)
    {
      if ((result & 1) != 0)
      {
        *a7 = 1;
        result = sub_22ED67324(a1, a2, a3, a4, a5, a6, v20, v21);
        if ((result & 1) == 0)
        {
          *(_DWORD *)a8 = 7;
          *(_QWORD *)(a8 + 8) = result & 0xFFFFFFFFFFFFFFFELL;
          v19 = result & 0xFFFFFFFFFFFFFFFCLL | 1;
          goto LABEL_11;
        }
      }
    }
    else if ((result & 1) != 0)
    {
      *a7 = 1;
      result = sub_22ED6761C(a1, a2, a3, a4, a5, a6, &v29, v21);
      if (result > 7)
      {
        v22 = result;
        v23 = *(_QWORD *)(a1 + 88);
        v24 = sub_22F259350(a5);
        v25 = 0uLL;
        if ((*v24 - 5) <= 1)
          v25 = *(_OWORD *)(*((_QWORD *)v24 + 3) & 0xFFFFFFFFFFFFFFFCLL);
        v28 = v25;
        v26 = sub_22F259350(a5);
        if ((*v26 - 5) > 1)
          v27 = 0;
        else
          v27 = *(_DWORD *)((*((_QWORD *)v26 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 16);
        *(_QWORD *)a8 = 5;
        *(_QWORD *)(a8 + 8) = v22;
        result = sub_22E3CD3D4(v23 + 2032, 24, 3);
        *(_OWORD *)result = v28;
        *(_DWORD *)(result + 16) = v27;
        *(_DWORD *)(result + 20) = 0;
        v19 = result & 0xFFFFFFFFFFFFFFFCLL;
        goto LABEL_11;
      }
    }
  }
  *(_DWORD *)a8 = 0;
  *(_QWORD *)(a8 + 8) = 0;
  *(_QWORD *)(a8 + 24) = 0;
  return result;
}

uint64_t *sub_22ED6706C(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, int64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int32x2_t v34;
  char v35;
  void *v36;
  uint64_t v37;
  _QWORD v38[8];
  int v39;
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v12 = *(_QWORD *)(a5 + 72) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_QWORD *)(a5 + 72) & 6) != 2)
    v12 = 0;
  if (!v12)
    v12 = a5;
  v13 = *(_QWORD *)(v12 + 72);
  v14 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF8);
  if ((v13 & 6) == 4 && v14 != 0)
    v14 = (uint64_t *)v14[1];
  if ((*(_BYTE *)(*(_QWORD *)(*v14 & 0xFFFFFFFFFFFFFFF0) + 17) & 2) != 0)
  {
    sub_22EE00E90(&v34, a1, 1, a3, a3 | ((unint64_t)a4 << 32), a5 & 0xFFFFFFFFFFFFFFF8, a2, a8, *(_QWORD *)a6, *(_DWORD *)(a6 + 8), 0);
    if (v35)
    {
      sub_22EE014E4(&v34);
      return 0;
    }
    v16 = *(_QWORD *)a6;
    v17 = *(unsigned int *)(a6 + 8);
    v36 = v38;
    v39 = 0;
    v40 = 0;
    v38[0] = v16;
    v38[1] = v17;
    v37 = 0x400000001;
    v18 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 48) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                    + 8) & 0xFFFFFFFFFFFFFFF0)
                                            + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 32) & 0x7FFF;
    if (v18)
    {
      v19 = 1;
      do
      {
        if (v19 >= HIDWORD(v37))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v19 = v37;
        }
        v20 = (char *)v36 + 16 * v19;
        *v20 = 0;
        v20[1] = 0;
        v19 = v37 + 1;
        LODWORD(v37) = v37 + 1;
        --v18;
      }
      while (v18);
    }
    v21 = *(_QWORD *)(a2 + 16);
    v22 = (unint64_t *)(v21 & 0xFFFFFFFFFFFFFFF8);
    v23 = v21 & 0xFFFFFFFFFFFFFFF8;
    if ((v21 & 4) != 0)
      v23 = *v22;
    if (v23)
      v24 = (*(_WORD *)(v23 + 8) & 0x7Fu) - 38 >= 0xFFFFFFFD;
    else
      v24 = 0;
    if (v24 && (v25 = *(_QWORD *)(v23 + 64)) != 0)
    {
      v26 = ((*(unsigned __int16 *)(v25 + 8) | (*(unsigned __int8 *)(v25 + 10) << 16)) & 0x100000) == 0;
      if ((v21 & 4) == 0)
        goto LABEL_30;
    }
    else
    {
      v26 = 1;
      if ((v21 & 4) == 0)
      {
LABEL_30:
        v27 = *(_QWORD *)(a1 + 216);
        v28 = *(_QWORD *)(a1 + 3200);
        *(_QWORD *)(a1 + 3200) = 0;
        v29 = *(_QWORD *)(a1 + 10288);
        v30 = *(_DWORD *)(a1 + 1944);
        v31 = *(_DWORD *)(a1 + 2192);
        *(_QWORD *)(a1 + 216) = v22;
        if (v26)
          *(_QWORD *)(a1 + 10288) = 0;
        *(_DWORD *)(a1 + 1944) = *(_DWORD *)(a1 + 1904);
        *(_DWORD *)(a1 + 2192) = *(_DWORD *)(a1 + 1960);
        v32 = sub_22EFEB0E0(a5);
        v14 = (uint64_t *)sub_22EE03524(a1, v14, (uint64_t)&v36, v32, *(_QWORD *)(a5 + 40), 0);
        if (v27)
        {
          *(_QWORD *)(a1 + 216) = v27;
          *(_QWORD *)(a1 + 3200) = v28;
          *(_QWORD *)(a1 + 10288) = v29;
          *(_DWORD *)(a1 + 1944) = v30;
          *(_DWORD *)(a1 + 2192) = v31;
        }
        if (v36 != v38)
          free(v36);
        sub_22EE014E4(&v34);
        return v14;
      }
    }
    v22 = (unint64_t *)*v22;
    goto LABEL_30;
  }
  return v14;
}

uint64_t sub_22ED67324(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int32x2_t v35;
  char v36;
  int v37[3];
  int v38;
  uint64_t v39;
  int v40;
  void *v41;
  uint64_t v42;
  _QWORD v43[8];
  int v44;
  char v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v12 = 1;
  sub_22EE00E90(&v35, a1, 1, a3, a3 | ((unint64_t)a4 << 32), a5 & 0xFFFFFFFFFFFFFFF8, a2, a8, *(_QWORD *)a6, *(_DWORD *)(a6 + 8), 0);
  if (!v36)
  {
    v13 = *(_QWORD *)a6;
    v14 = *(unsigned int *)(a6 + 8);
    v41 = v43;
    v44 = 0;
    v45 = 0;
    v43[0] = v13;
    v43[1] = v14;
    v42 = 0x400000001;
    v15 = *(_DWORD *)(a5 + 68) & 0xFFFFF;
    if (v15)
    {
      v16 = 1;
      do
      {
        if (v16 >= HIDWORD(v42))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v16 = v42;
        }
        v17 = (char *)v41 + 16 * v16;
        *v17 = 0;
        v17[1] = 0;
        v16 = v42 + 1;
        LODWORD(v42) = v42 + 1;
        --v15;
      }
      while (v15);
    }
    v18 = *(_QWORD *)(a2 + 16);
    v19 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF8);
    if ((v18 & 4) != 0)
      v19 = (_QWORD *)*v19;
    v20 = *(_QWORD *)(a1 + 216);
    v21 = *(_QWORD *)(a1 + 3200);
    *(_QWORD *)(a1 + 3200) = 0;
    v22 = *(_QWORD *)(a1 + 10288);
    v23 = *(_DWORD *)(a1 + 1944);
    v24 = *(_DWORD *)(a1 + 2192);
    *(_QWORD *)(a1 + 216) = v19;
    *(_QWORD *)(a1 + 10288) = 0;
    *(_DWORD *)(a1 + 1944) = *(_DWORD *)(a1 + 1904);
    *(_DWORD *)(a1 + 2192) = *(_DWORD *)(a1 + 1960);
    v40 = 4;
    v38 = 3;
    *(_QWORD *)v37 = *(unsigned int *)(a1 + 1704);
    v39 = 0;
    sub_22EB4DDB8(a1 + 3688, &v40, v37, (__int16 *)(a1 + 1693), &v39, &v38);
    v25 = *(unsigned int *)(a1 + 3696);
    v26 = v25 - 2;
    v27 = *(_QWORD *)(a1 + 3688);
    v28 = *(_DWORD *)(v27 + 576 * (v25 - 2));
    if (v28 == 5)
    {
      *(_BYTE *)(v27 + 576 * v25 - 4) = *(_BYTE *)(v27 + 576 * v26 + 572);
      v29 = 1;
    }
    else if (v28 == 2)
    {
      *(_BYTE *)(v27 + 576 * v25 - 4) = 1;
      v29 = *(_BYTE *)(v27 + 576 * v26 + 573) != 0;
    }
    else
    {
      v29 = 0;
      *(_BYTE *)(v27 + 576 * v25 - 4) = 0;
    }
    v30 = v27 + 576 * v25;
    *(_BYTE *)(v30 - 3) = v29;
    *(_WORD *)(a1 + 1693) = 0;
    if (*(_DWORD *)(a1 + 1848))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(a1 + 1776), (llvm::SmallPtrSetImplBase *)(v30 - 560));
      sub_22EAEAE08(a1 + 1840, (uint64_t *)(v30 - 496));
    }
    v31 = *(_QWORD *)(a5 + 72) & 0xFFFFFFFFFFFFFFFCLL;
    if ((*(_QWORD *)(a5 + 72) & 3) != 1)
      v31 = 0;
    if (!v31)
      v31 = a5;
    v32 = *(_QWORD *)(v31 + 72);
    v33 = v32 & 0xFFFFFFFFFFFFFFFCLL;
    if ((v32 & 3) == 2 && v33)
      v33 = *(_QWORD *)(v33 + 8);
    v12 = sub_22EE0A68C(a1, v33, &v41);
    sub_22EB48E64(a1);
    if (v20)
    {
      *(_QWORD *)(a1 + 216) = v20;
      *(_QWORD *)(a1 + 3200) = v21;
      *(_QWORD *)(a1 + 10288) = v22;
      *(_DWORD *)(a1 + 1944) = v23;
      *(_DWORD *)(a1 + 2192) = v24;
    }
    if (v41 != v43)
      free(v41);
  }
  sub_22EE014E4(&v35);
  return v12;
}

unint64_t sub_22ED6761C(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t a8)
{
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int *v24;
  unint64_t *v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  unsigned int v30;
  _QWORD *v31;
  uint64_t v32;
  int *v33;
  unsigned int v34;
  uint64_t v35;
  int32x2_t v36;
  char v37;
  void *v38;
  uint64_t v39;
  _QWORD v40[8];
  int v41;
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  sub_22EE00E90(&v36, a1, 1, a3, a3 | ((unint64_t)a4 << 32), a5 & 0xFFFFFFFFFFFFFFF8, a2, a8, *(_QWORD *)a6, *(_DWORD *)(a6 + 8), 0);
  v13 = 0;
  if (v37)
    goto LABEL_2;
  v15 = *(_QWORD *)a6;
  v16 = *(unsigned int *)(a6 + 8);
  v38 = v40;
  v41 = 0;
  v42 = 0;
  v40[0] = v15;
  v40[1] = v16;
  v39 = 0x400000001;
  v17 = *(_DWORD *)(a5 + 64) & 0xFFFFF;
  if (v17)
  {
    v30 = 1;
    do
    {
      if (v30 >= HIDWORD(v39))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v30 = v39;
      }
      v31 = (char *)v38 + 16 * v30;
      *v31 = 0;
      v31[1] = 0;
      v30 = v39 + 1;
      LODWORD(v39) = v39 + 1;
      --v17;
    }
    while (v17);
  }
  v18 = *(_QWORD *)(a2 + 16);
  v19 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF8);
  if ((v18 & 4) != 0)
    v19 = (_QWORD *)*v19;
  v20 = *(_QWORD *)(a1 + 216);
  v35 = *(_QWORD *)(a1 + 3200);
  *(_QWORD *)(a1 + 3200) = 0;
  v21 = *(_QWORD *)(a1 + 10288);
  v22 = *(_DWORD *)(a1 + 1944);
  v23 = *(_DWORD *)(a1 + 2192);
  *(_QWORD *)(a1 + 216) = v19;
  *(_QWORD *)(a1 + 10288) = 0;
  *(_DWORD *)(a1 + 1944) = *(_DWORD *)(a1 + 1904);
  *(_DWORD *)(a1 + 2192) = *(_DWORD *)(a1 + 1960);
  v24 = sub_22F259350(a5);
  if ((*v24 - 5) >= 2)
  {
    v27 = 0;
    v26 = 0;
    *a7 = 0;
    a7[1] = 0;
    goto LABEL_16;
  }
  v25 = (unint64_t *)(*((_QWORD *)v24 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  v26 = *v25;
  v27 = (void *)v25[1];
  *a7 = *v25;
  a7[1] = v27;
  if (!v26)
  {
LABEL_16:
    v32 = *((_QWORD *)sub_22F259350(a5) + 1);
    v33 = sub_22F259350(a5);
    if ((*v33 - 5) > 1)
      v34 = 0;
    else
      v34 = *(_DWORD *)((*((_QWORD *)v33 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 16);
    v13 = sub_22F348E70(a1, v26, (uint64_t)v27, v32, v34, (uint64_t)&v38);
    goto LABEL_20;
  }
  v28 = sub_22F348DBC(a1, v26, v27, (uint64_t)&v38);
  *a7 = v28;
  a7[1] = v29;
  if (v28)
  {
    v26 = v28;
    v27 = v29;
    goto LABEL_16;
  }
  v13 = 0;
LABEL_20:
  if (v20)
  {
    *(_QWORD *)(a1 + 216) = v20;
    *(_QWORD *)(a1 + 3200) = v35;
    *(_QWORD *)(a1 + 10288) = v21;
    *(_DWORD *)(a1 + 1944) = v22;
    *(_DWORD *)(a1 + 2192) = v23;
  }
  if (v38 != v40)
    free(v38);
LABEL_2:
  sub_22EE014E4(&v36);
  return v13;
}

BOOL sub_22ED678A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, uint64_t a8, int a9)
{
  int v17;
  int v18;
  int v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  unint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  int **v31;
  int *v32;
  uint64_t i;
  _BOOL4 v34;
  unsigned __int8 *v35;
  int v36;
  uint64_t *v37;
  int *v38;
  int *v39;
  uint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  int *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  void *v59;
  void *v60;
  unsigned __int8 *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _BOOL4 v66;
  int v67;
  unint64_t v68;
  unsigned int v69;
  int v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  _DWORD *v74;
  _DWORD *v75;
  uint64_t v76;
  void *v77;
  int v78;
  int32x2_t *v79;
  void *v80;
  void *v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unsigned int *v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  size_t v94;
  unsigned __int32 v95;
  _BYTE *v96;
  char v97;
  uint64_t v98;
  void *v99;
  void **v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  __int128 v104;
  void *v105;
  int v106;
  unint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  __int128 v116;
  int v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  int v122;
  unint64_t v124;
  unsigned int v125;
  BOOL v126;
  uint64_t v127;
  uint64_t v129;
  unsigned int v130;
  _BOOL4 v131;
  uint64_t v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  unsigned int v138;
  char v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int *v147;
  uint64_t v148;
  uint64_t v149;
  void **v150;
  char v151;
  uint64_t v152;
  _BYTE v153[96];
  _BYTE v154[96];
  uint64_t v155;
  char v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void *v160;
  int64x2_t v161;
  _BYTE __p[23];
  __int16 v163;
  uint64_t v164;
  void *v165[2];
  void *__src[8];
  void *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  int v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  __int16 v178;
  int v179;
  char v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  _QWORD v184[8];
  int v185;
  char v186;
  uint64_t v187;

  v187 = *MEMORY[0x24BDAC8D0];
  v17 = *(_DWORD *)(a2 + 28) & 0x7F;
  if (a2 && v17 == 38)
  {
    v18 = *(_DWORD *)a3;
    if (*(_DWORD *)a3 == 1)
    {
      v41 = *(_QWORD *)(a3 + 8);
      v42 = *(_QWORD *)(a3 + 24) & 0xFFFFFFFFFFFFFFFCLL;
LABEL_123:
      if (sub_22ED58A88((_QWORD *)a1, (uint64_t *)v42))
        return 1;
      v98 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFFFF0) + 8);
      v99 = (void *)(v98 | v41 & 7);
      if ((*(_WORD *)(*(_QWORD *)(a1 + 72) + 148) & 2) != 0)
      {
        v118 = v98 & 0xFFFFFFFFFFFFFFF0;
        if (sub_22F40ACB8(*(_QWORD *)(v98 & 0xFFFFFFFFFFFFFFF0)))
        {
          v119 = *(_QWORD *)(v118 + 8);
          if ((v119 & 8) == 0 || (*(_WORD *)((v119 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x1C0) == 0)
          {
            v120 = *(_QWORD *)(a1 + 88);
            v165[0] = (void *)128;
            v121 = sub_22E491354((unsigned int *)v165, (uint64_t)v99);
            v99 = (void *)sub_22EF5DBC4(v120, v121, (uint64_t)v165[0]);
          }
        }
      }
      LODWORD(v165[0]) = 1;
      v165[1] = v99;
      v100 = v165;
      v101 = a8;
      goto LABEL_126;
    }
    if (v18 != 7)
    {
      if ((v18 - 5) < 2)
      {
        sub_22F0EFE08(a3);
        sub_22F345DF8((_QWORD *)a1, *(_QWORD *)(a3 + 8), v19);
        return 1;
      }
      goto LABEL_127;
    }
    v181 = 0u;
    v182 = 0u;
    v35 = *(unsigned __int8 **)(a3 + 8);
    v36 = *v35;
    if (v36 == 123)
    {
      v61 = (unsigned __int8 *)*((_QWORD *)v35 + 2);
      if (!v61 || sub_22EFFFB48(v61))
      {
        sub_22E8ACE30((uint64_t)&v181, *((_QWORD *)v35 + 4), *((_QWORD *)v35 + 5));
        v37 = (uint64_t *)(v35 + 48);
        v38 = (int *)(v35 + 56);
        v39 = (int *)(v35 + 60);
        v40 = (uint64_t *)(v35 + 64);
        goto LABEL_52;
      }
    }
    else if (v36 == 163)
    {
      sub_22E8ACE30((uint64_t)&v181, *((_QWORD *)v35 + 2), *((_QWORD *)v35 + 3));
      v37 = (uint64_t *)(v35 + 32);
      v38 = (int *)(v35 + 40);
      v39 = (int *)(v35 + 44);
      v40 = (uint64_t *)(v35 + 48);
LABEL_52:
      v36 = *v39;
      v62 = *v38;
      v63 = *v37;
      v64 = *v40;
LABEL_54:
      v41 = 0;
      v42 = 0;
      if ((v63 & 7) != 0)
        goto LABEL_119;
      v65 = v63 & 0xFFFFFFFFFFFFFFF8;
      if ((v63 & 0xFFFFFFFFFFFFFFF8) == 0)
        goto LABEL_119;
      v165[0] = 0;
      v165[1] = &__src[1];
      __src[0] = (void *)0x800000000;
      v168 = 0;
      v169 = 0;
      v170 = 0;
      v171 = (_QWORD *)a1;
      v172 = v63;
      v173 = v62;
      v174 = v36;
      v176 = 0;
      v177 = 0;
      v175 = v64;
      v178 = 0;
      v179 = 257;
      v180 = 0;
      sub_22EC56024((uint64_t)v165);
      sub_22EC64BE8(a1, (uint64_t)v165, *(_QWORD *)(a1 + 12888), (uint64_t)&v181, 0, 0);
      v66 = 0;
      v67 = (int)v165[0];
      if (LODWORD(v165[0]) == 2)
      {
        v68 = *(_QWORD *)v165[1] & 0xFFFFFFFFFFFFFFFCLL;
        v69 = *(_DWORD *)(v68 + 28) & 0x7F;
        if (v69 <= 0x2F && ((1 << v69) & 0xC00000060000) != 0)
          v69 = *(_DWORD *)(sub_22EFBAEA4(v68) + 28) & 0x7F;
        v66 = v69 - 33 < 0xA;
      }
      v70 = v67 == 1 || v66;
      if (v70 == 1)
      {
        sub_22F0EFE08(a3);
        v72 = v71;
        if ((**(_QWORD **)(a1 + 72) & 0x10) != 0)
          v73 = 5304;
        else
          v73 = 4793;
        sub_22E8FCA40((_QWORD *)a1, v71, v73, 0, (uint64_t)&v183);
        v161.i8[12] = 0;
        *(uint64_t *)((char *)v161.i64 + 4) = 0;
        v160 = (void *)(v72 | ((unint64_t)v72 << 32));
        v161.i8[0] = 0;
        memset(&__p[10], 0, 13);
        strcpy(__p, "typename ");
        v163 = 9;
        sub_22E890748((uint64_t)&v183, &v160);
        if ((char)v163 < 0)
          operator delete(*(void **)__p);
        sub_22E903BEC((unsigned int *)&v183);
        sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a2 + 24), 0x17E2u, 0, (uint64_t)&v183);
        sub_22E903BEC((unsigned int *)&v183);
        v41 = sub_22EF65A30(*(_QWORD *)(a1 + 88), 5, *((unint64_t *)&v181 + 1), v65, 0);
        v160 = __p;
        v161 = vdupq_n_s64(0x20uLL);
        v164 = 0;
        sub_22EEB5360((uint64_t)&v160, v41, 0x18uLL, 8);
        v75 = v74;
        *v74 = 0;
        v76 = *(_QWORD *)(a1 + 88);
        if (*((_QWORD *)&v181 + 1))
        {
          if (HIDWORD(v182))
          {
            v77 = (void *)sub_22E3CD3D4(v76 + 2032, DWORD2(v182), 3);
            memcpy(v77, (const void *)v182, DWORD2(v182));
            v76 = *(_QWORD *)(a1 + 88);
          }
          else
          {
            v77 = (void *)v182;
          }
        }
        else
        {
          v77 = 0;
        }
        *((_QWORD *)v75 + 1) = v77;
        v75[4] = v62;
        v94 = v161.i64[0] - v161.i64[1];
        v95 = v161.i32[0] - v161.i32[2];
        if (v161.i32[0] == v161.i32[2])
          v95 = sub_22F11598C(v41);
        v42 = sub_22E3CD3D4(v76 + 2032, v95 + 8, 3);
        *(_QWORD *)v42 = v41;
        v96 = v160;
        memcpy((void *)(v42 + 8), (char *)v160 + v161.i64[1], v94);
        *(_DWORD *)a3 = 1;
        *(_QWORD *)(a3 + 8) = v41;
        *(_QWORD *)(a3 + 24) = v42 & 0xFFFFFFFFFFFFFFFCLL | 2;
        if (v96 != __p && v96)
          MEMORY[0x2348A0E84](v96, 0x1000C8077774924);
        v78 = 2;
        LOBYTE(v70) = 1;
      }
      else
      {
        v41 = 0;
        v78 = 0;
        v42 = 0;
      }
      if (BYTE1(v179))
      {
        if (LODWORD(v165[0]) == 5)
        {
          v97 = v70;
          sub_22EC64D18(v171, (uint64_t)v165);
          goto LABEL_114;
        }
        if (v169 && (*(_DWORD *)(v171[9] + 52) & 0x400000) != 0)
        {
          v97 = v70;
          sub_22E90B5FC((unint64_t)v171, (uint64_t)v165);
LABEL_114:
          LOBYTE(v70) = v97;
        }
      }
      if (v168)
      {
        v151 = v70;
        v152 = sub_22EC6CBD0(v168);
        MEMORY[0x2348A0E9C](v152, 0x10E0C409F09D3C3);
        LOBYTE(v70) = v151;
      }
      if (v165[1] == &__src[1])
      {
        if ((v70 & 1) != 0)
          goto LABEL_120;
      }
      else
      {
        v139 = v70;
        free(v165[1]);
        if ((v139 & 1) != 0)
        {
LABEL_120:
          if (HIDWORD(v182))
            free((void *)v182);
          if (!v78)
          {
LABEL_127:
            sub_22F0EFE08(a3);
            v160 = v105;
            sub_22E8FCA40((_QWORD *)a1, (int)v105, 0x12B8u, 0, (uint64_t)v165);
            sub_22E8906A0((uint64_t)v165, (uint64_t *)&v160);
            sub_22E903BEC((unsigned int *)v165);
            sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a2 + 24), 0x17E2u, 0, (uint64_t)v165);
            goto LABEL_173;
          }
          goto LABEL_123;
        }
      }
LABEL_119:
      v78 = 0;
      goto LABEL_120;
    }
    v63 = 0;
    v62 = 0;
    v64 = 0;
    goto LABEL_54;
  }
  if (a2 && v17 == 59)
  {
    v20 = *(_QWORD *)(a2 + 48);
    if (*(_BYTE *)(a2 + 80) && *(_BYTE *)(a2 + 81))
      v20 = *(_QWORD *)(a2 + 16 * a7 + 88);
    v21 = (uint64_t *)(v20 & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(*(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0) + 17) & 2) == 0 || (*(_DWORD *)(a4 + 28) & 0x7F) == 0x20)
      goto LABEL_17;
    v22 = *(_QWORD *)(a4 + 16);
    v23 = (_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF8);
    if ((v22 & 4) != 0)
      v23 = (_QWORD *)*v23;
    if ((sub_22EFC7ADC((unint64_t)v23) & 1) != 0)
      goto LABEL_17;
    v79 = (int32x2_t *)sub_22EE00E90(&v183, a1, 5, a5, a5 | ((unint64_t)a6 << 32), a2, a4, v24, *(_QWORD *)a8, *(_DWORD *)(a8 + 8), 0);
    if (!BYTE8(v183))
    {
      v80 = *(void **)a8;
      v81 = (void *)*(unsigned int *)(a8 + 8);
      v82 = *v21;
      if (*v21 && *(_BYTE *)(v82 + 16) == 36
        || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v82 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 36
        && (v82 = sub_22F10CF48(v82)) != 0)
      {
        v83 = *(_DWORD *)(a1 + 11992);
        *(_DWORD *)(a1 + 11992) = a7;
        v84 = *(_QWORD *)(v82 + 32);
        v165[0] = __src;
        LODWORD(v167) = 0;
        BYTE4(v167) = 0;
        __src[0] = v80;
        __src[1] = v81;
        v165[1] = (void *)0x400000001;
        v85 = sub_22EE08D2C(a1, v84, v165, *(unsigned int *)(a2 + 24), *(_QWORD *)(a2 + 40));
        if (v165[0] != __src)
          free(v165[0]);
        *(_DWORD *)(a1 + 11992) = v83;
      }
      else
      {
        v165[0] = __src;
        LODWORD(v167) = 0;
        BYTE4(v167) = 0;
        __src[0] = v80;
        __src[1] = v81;
        v165[1] = (void *)0x400000001;
        v85 = sub_22EE08D2C(a1, v20, v165, *(unsigned int *)(a2 + 24), *(_QWORD *)(a2 + 40));
        if (v165[0] != __src)
          free(v165[0]);
      }
      if (v85 > 0xF)
      {
        v20 = sub_22ED5902C((_QWORD *)a1, v85, *(_DWORD *)(a2 + 24));
        sub_22EE014E4((int32x2_t *)&v183);
        if (v20 < 0x10)
          return 1;
LABEL_17:
        switch(*(_DWORD *)a3)
        {
          case 1:
            *(_QWORD *)&v183 = *(_QWORD *)(a3 + 8);
            v88 = v183;
            sub_22F0EFE08(a3);
            v160 = v89;
            if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v88 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                  + 16)
               - 25 > 1)
            {
              sub_22E8FCA40((_QWORD *)a1, (int)v89, 0x12B6u, 0, (uint64_t)v165);
              sub_22E8906A0((uint64_t)v165, (uint64_t *)&v160);
            }
            else
            {
              sub_22E8FCA40((_QWORD *)a1, (int)v89, 0x12BBu, 0, (uint64_t)v165);
              v90 = sub_22E8906A0((uint64_t)v165, (uint64_t *)&v160);
              sub_22E8901B8(v90, (uint64_t *)&v183);
            }
            sub_22E903BEC((unsigned int *)v165);
            sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a2 + 24), 0x17E2u, 0, (uint64_t)v153);
            v87 = (unsigned int *)v153;
            goto LABEL_174;
          case 2:
          case 3:
          case 4:
            v25 = a8;
            v26 = (void **)a3;
            goto LABEL_19;
          case 5:
          case 6:
            if ((~*(_DWORD *)(a3 + 8) & 6) != 0 || (v54 = *(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8) == 0)
            {
              sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)((*(_QWORD *)(a3 + 24) & 0xFFFFFFFFFFFFFFFCLL) + 16), 0x12B6u, 0, (uint64_t)v165);
              sub_22F0EFE08(a3);
              *(_QWORD *)&v183 = v86;
              sub_22E8906A0((uint64_t)v165, (uint64_t *)&v183);
              sub_22E903BEC((unsigned int *)v165);
              sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a2 + 24), 0x17E2u, 0, (uint64_t)v154);
              v87 = (unsigned int *)v154;
              goto LABEL_174;
            }
            v55 = *(_QWORD *)(v54 + 16);
            v56 = *(_QWORD *)(a3 + 24) & 0xFFFFFFFFFFFFFFFCLL;
            v57 = *(_DWORD *)(v56 + 16);
            *(_QWORD *)&v183 = v55;
            DWORD2(v183) = v57;
            sub_22EFC6D6C((uint64_t)v184, v55);
            *(_OWORD *)v165 = 0u;
            *(_OWORD *)__src = 0u;
            sub_22E8ACE30((uint64_t)v165, *(_QWORD *)v56, *(_QWORD *)(v56 + 8));
            v58 = *(_QWORD *)(a1 + 88);
            v59 = v165[1];
            if (v165[1])
            {
              if (HIDWORD(__src[1]))
              {
                v60 = (void *)sub_22E3CD3D4(v58 + 2032, LODWORD(__src[1]), 3);
                memcpy(v60, __src[0], LODWORD(__src[1]));
                v59 = v165[1];
              }
              else
              {
                v60 = __src[0];
              }
            }
            else
            {
              v60 = 0;
            }
            v113 = sub_22F060928(v58, (uint64_t)v59, (uint64_t)v60, 0, &v183, 0);
            if (*(_DWORD *)a3 == 6
              && (v113 = sub_22EE739C0(a1, v113 & 0xFFFFFFFFFFFFFFFELL, *(unsigned int *)((*(_QWORD *)(a3 + 24) & 0xFFFFFFFFFFFFFFFCLL) + 20), 0), (v113 & 1) != 0)|| (LODWORD(v160) = 0, v161.i64[0] = 0, (sub_22ED59EA0(a1, a2, v20, v113 & 0xFFFFFFFFFFFFFFFELL, (uint64_t)&v160, 0) & 1) != 0))
            {
              v117 = 1;
            }
            else
            {
              v114 = sub_22E4EF088(a8, (unint64_t)&v160, 1);
              v115 = *(_QWORD *)a8 + 24 * *(unsigned int *)(a8 + 8);
              v116 = *(_OWORD *)v114;
              *(_QWORD *)(v115 + 16) = *(_QWORD *)(v114 + 16);
              *(_OWORD *)v115 = v116;
              ++*(_DWORD *)(a8 + 8);
              v117 = 2;
            }
            if (HIDWORD(__src[1]))
              free(__src[0]);
            return v117 != 2;
          case 7:
            LODWORD(v165[0]) = 0;
            v165[1] = 0;
            v91 = *(_DWORD *)(a1 + 8456);
            v92 = sub_22ED59EA0(a1, a2, v20, *(_QWORD *)(a3 + 8), (uint64_t)v165, a9);
            if ((v92 & 1) != 0 || v91 < *(_DWORD *)(a1 + 8456))
              return 1;
            if ((v92 & 0xFFFFFFFFFFFFFFFELL) != *(_QWORD *)(a3 + 8))
            {
              *(_DWORD *)a3 = 7;
              *(_QWORD *)(a3 + 8) = v92 & 0xFFFFFFFFFFFFFFFELL;
              *(_QWORD *)(a3 + 24) = v92 & 0xFFFFFFFFFFFFFFFCLL | 1;
            }
            v26 = v165;
            v25 = a8;
LABEL_19:
            v27 = sub_22E4EF088(v25, (unint64_t)v26, 1);
            v28 = *(_QWORD *)a8 + 24 * *(unsigned int *)(a8 + 8);
            v29 = *(_OWORD *)v27;
            *(_QWORD *)(v28 + 16) = *(_QWORD *)(v27 + 16);
            *(_OWORD *)v28 = v29;
            ++*(_DWORD *)(a8 + 8);
            return 0;
          default:
            return 0;
        }
      }
      v79 = (int32x2_t *)&v183;
    }
    sub_22EE014E4(v79);
    return 1;
  }
  v31 = (int **)(a2 + 56);
  if (*(_BYTE *)(a2 + 81))
    v31 = (int **)(a2 + 8 * a7 + 88);
  v32 = *v31;
  v165[0] = (void *)a1;
  v165[1] = (void *)1;
  for (i = 2; i != 10; i += 2)
    v165[i] = (void *)-4096;
  v167 = &v169;
  v168 = 0x100000000;
  v170 = *(_QWORD *)(a1 + 12024);
  LOWORD(v171) = 0;
  v172 = 0;
  *(_QWORD *)(a1 + 12024) = v165;
  sub_22EE00E90(&v160, a1, 5, a5, a5 | ((unint64_t)a6 << 32), a2, a4, a8, *(_QWORD *)a8, *(_DWORD *)(a8 + 8), 0);
  if (v161.i8[0])
  {
    v34 = 0;
  }
  else
  {
    v43 = *(_QWORD *)a8;
    v44 = *(unsigned int *)(a8 + 8);
    v45 = *(_QWORD *)(a1 + 216);
    *(_QWORD *)&v183 = v184;
    v185 = 0;
    v186 = 0;
    v184[0] = v43;
    v184[1] = v44;
    *((_QWORD *)&v183 + 1) = 0x400000001;
    v32 = sub_22EE43F30(a1, v32, v45, (uint64_t)&v183);
    if ((_QWORD *)v183 != v184)
      free((void *)v183);
    v34 = v32 != 0;
  }
  sub_22EE014E4((int32x2_t *)&v160);
  if (!(_BYTE)v171)
  {
    if ((_DWORD)v168)
    {
      v148 = 0;
      v149 = 8 * v168;
      do
      {
        v150 = *(void ***)((char *)v167 + v148);
        if (v150)
        {
          if (*v150 != v150 + 2)
            free(*v150);
          MEMORY[0x2348A0E9C](v150, 0x1080C40ED926357);
        }
        v148 += 8;
      }
      while (v149 != v148);
    }
    *((_QWORD *)v165[0] + 1503) = v170;
    LOBYTE(v171) = 1;
  }
  if (v167 != &v169)
    free(v167);
  if (((uint64_t)v165[1] & 1) == 0)
    llvm::deallocate_buffer((llvm *)__src[0], (void *)(16 * LODWORD(__src[1])));
  if (!v34)
    return 1;
  v46 = *(_DWORD *)a3;
  if (*(_DWORD *)a3 != 1)
  {
LABEL_166:
    if ((v46 - 5) < 2)
      goto LABEL_177;
    if (v46 != 1 && v46 != 7)
      return 0;
    if ((v46 - 5) <= 1)
    {
      v122 = *(_DWORD *)((*(_QWORD *)(a3 + 24) & 0xFFFFFFFFFFFFFFFCLL) + 16);
LABEL_172:
      sub_22E8FCA40((_QWORD *)a1, v122, 0x12B7u, 0, (uint64_t)v165);
      LODWORD(v183) = (**(_DWORD **)(a1 + 72) >> 9) & 1;
      sub_22E89519C((uint64_t)v165, (unsigned int *)&v183);
LABEL_173:
      v87 = (unsigned int *)v165;
LABEL_174:
      sub_22E903BEC(v87);
      return 1;
    }
LABEL_171:
    sub_22F0EFE08(a3);
    goto LABEL_172;
  }
  v47 = *(_QWORD *)(a1 + 88);
  v48 = (_QWORD *)(*(_QWORD *)(a3 + 24) & 0xFFFFFFFFFFFFFFFCLL);
  v51 = *v48;
  v50 = (int *)(v48 + 1);
  v49 = v51;
  if ((v51 & 0xF) != 0)
  {
    v52 = 0;
    v53 = 0;
  }
  else
  {
    v52 = 0;
    if (v49 && *(_BYTE *)(*(_QWORD *)(v49 & 0xFFFFFFFFFFFFFFF0) + 16) == 24)
    {
      if ((*(_DWORD *)(v49 + 16) & 0x7F80000) != 0x300000)
        goto LABEL_171;
      v52 = *(_QWORD *)(v49 + 32);
      v49 = *(_QWORD *)(v49 + 40);
      v53 = *(_QWORD *)((*(_QWORD *)(a3 + 24) & 0xFFFFFFFFFFFFFFFCLL) + 16);
      if (v49 >= 0x10 && (v49 & 0xF) == 0)
        v144 = *(_QWORD *)((char *)&unk_22F498010
                         + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v49 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
      else
        v144 = 1;
      v50 = (int *)(((unint64_t)v50 + v144 + 15) & -v144);
    }
    else
    {
      v53 = 0;
    }
  }
  if ((v49 & 0xF) != 0)
    goto LABEL_171;
  v106 = *(unsigned __int8 *)(*(_QWORD *)(v49 & 0xFFFFFFFFFFFFFFF0) + 16);
  if (!v49 || v106 != 27)
  {
    if (!v49 || v106 != 45)
      goto LABEL_171;
    v110 = sub_22F114198(*(_QWORD *)(v49 + 24));
    if (v110 && (*(_DWORD *)(v110 + 28) & 0x7E) == 0x24)
    {
      v111 = *(_QWORD *)(v110 + 152);
      v107 = v111 & 0xFFFFFFFFFFFFFFF8;
      if ((v111 & 4) != 0 && v107)
      {
        do
        {
          v112 = *(_QWORD *)(*(_QWORD *)v107 + 152);
          v107 = v112 & 0xFFFFFFFFFFFFFFF8;
        }
        while ((v112 & 4) != 0 && v107);
      }
      goto LABEL_133;
    }
    v46 = *(_DWORD *)a3;
    goto LABEL_166;
  }
  v107 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v49 + 32) & 0xFFFFFFFFFFFFFFF0) + 32);
LABEL_133:
  v108 = *v50;
  v109 = sub_22E3CD3D4(v47 + 2032, 24, 3);
  *(_QWORD *)v109 = v52;
  *(_QWORD *)(v109 + 8) = v53;
  *(_DWORD *)(v109 + 16) = v108;
  *(_DWORD *)(v109 + 20) = 0;
  *(_QWORD *)a3 = 5;
  *(_QWORD *)(a3 + 8) = v107;
  *(_QWORD *)(a3 + 24) = v109 & 0xFFFFFFFFFFFFFFFCLL;
  v46 = 5;
LABEL_177:
  v158 = *(_QWORD *)(a3 + 8);
  v159 = a2;
  v124 = sub_22F0F08CC(&v158);
  v157 = v124;
  if (!v124)
    goto LABEL_225;
  if ((*(_DWORD *)(v124 + 28) & 0x80) != 0)
    return 1;
  v125 = *(_DWORD *)(v124 + 28) & 0x7F;
  v126 = v125 > 0x20;
  v127 = (1 << v125) & 0x154000000;
  if (v126 || v127 == 0)
  {
    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)((*(_QWORD *)(a3 + 24) & 0xFFFFFFFFFFFFFFFCLL) + 16), 0x12C4u, 0, (uint64_t)v165);
    sub_22E903BEC((unsigned int *)v165);
    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v157 + 24), 0x17D2u, 0, (uint64_t)&v183);
    sub_22E890024((uint64_t)&v183, (uint64_t *)&v157);
    sub_22E903BEC((unsigned int *)&v183);
    v124 = v157;
    v46 = *(_DWORD *)a3;
  }
  if ((*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) & 0x1000000000000000) != 0)
  {
    v129 = *(_QWORD *)(v124 + 56);
    if ((v46 - 5) > 1)
      sub_22F0EFE08(a3);
    else
      v130 = *(_DWORD *)((*(_QWORD *)(a3 + 24) & 0xFFFFFFFFFFFFFFFCLL) + 16);
    v131 = sub_22ED5D218((_QWORD *)a1, v129, (uint64_t)v32, 0, 2u, v130);
    v132 = v157;
    if (v131 && !sub_22EFE9310(v157))
      goto LABEL_225;
    if ((*(_DWORD *)a3 - 5) > 1)
      sub_22F0EFE08(a3);
    else
      v133 = *(_DWORD *)((*(_QWORD *)(a3 + 24) & 0xFFFFFFFFFFFFFFFCLL) + 16);
    if (sub_22F347A30(a1, (uint64_t)v32, v132, v133))
    {
      v160 = &v161.u64[1];
      v161.i64[0] = 0x300000000;
      *(_QWORD *)&v181 = &v182;
      *((_QWORD *)&v181 + 1) = 0x300000000;
      sub_22EFE9164((uint64_t)v32, (uint64_t)&v160);
      if (v161.i32[0])
      {
        v134 = v157;
        sub_22EFE9164(*(_QWORD *)(v157 + 56), (uint64_t)&v181);
        v135 = *(_QWORD *)(v134 + 48);
        if (v135)
        {
          if ((*(_DWORD *)(v135 + 28) & 0x7Eu) - 52 <= 5)
          {
            v141 = *(_QWORD *)(v135 + 56);
            if ((v141 & 4) != 0)
            {
              v142 = *(_QWORD *)((v141 & 0xFFFFFFFFFFFFFFF8) + 40);
              if (v142)
              {
                v143 = DWORD2(v181);
                if (DWORD2(v181) >= HIDWORD(v181))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v143 = DWORD2(v181);
                }
                *(_QWORD *)(v181 + 8 * v143) = v142;
                ++DWORD2(v181);
              }
            }
          }
        }
        v156 = 0;
        if ((sub_22E9F4DA0(a1, a2, v160, v161.u32[0], v157, v181, DWORD2(v181), &v156) & 1) == 0)
        {
          if (v156)
            goto LABEL_199;
          if ((*(_DWORD *)a3 - 5) > 1)
            sub_22F0EFE08(a3);
          else
            v140 = *(_DWORD *)((*(_QWORD *)(a3 + 24) & 0xFFFFFFFFFFFFFFFCLL) + 16);
          sub_22E8FCA40((_QWORD *)a1, v140, 0x12FDu, 0, (uint64_t)&v183);
          v145 = sub_22E890024((uint64_t)&v183, (uint64_t *)&v157);
          sub_22E9AEF84(v145, &v159);
          sub_22F0EFE08(a3);
          v155 = v146;
          sub_22E8906A0(v145, &v155);
          sub_22E903BEC((unsigned int *)&v183);
          sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a2 + 24), 0x15C9u, 0, (uint64_t)&v183);
          v147 = (unsigned int *)sub_22E9AEF84((uint64_t)&v183, &v159);
          sub_22E903BEC(v147);
          sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v157 + 24), 0x15C9u, 0, (uint64_t)&v183);
          sub_22E890024((uint64_t)&v183, (uint64_t *)&v157);
          sub_22E903BEC((unsigned int *)&v183);
          sub_22E9F5158(a1, a2, (uint64_t)v160, v161.u32[0], v157, v181, DWORD2(v181));
        }
        v136 = 1;
LABEL_220:
        if ((__int128 *)v181 != &v182)
          free((void *)v181);
        if (v160 != &v161.u64[1])
          free(v160);
        if ((v136 & 1) != 0)
          return 1;
        goto LABEL_225;
      }
LABEL_199:
      v136 = 0;
      goto LABEL_220;
    }
    v124 = v157;
    v46 = *(_DWORD *)a3;
  }
  v137 = *(_QWORD *)(v124 + 56);
  if ((v46 - 5) > 1)
    sub_22F0EFE08(a3);
  else
    v138 = *(_DWORD *)((*(_QWORD *)(a3 + 24) & 0xFFFFFFFFFFFFFFFCLL) + 16);
  v30 = 1;
  if (sub_22ED5D218((_QWORD *)a1, v137, (uint64_t)v32, 1, 2u, v138))
  {
LABEL_225:
    v101 = a8;
    v100 = (void **)a3;
LABEL_126:
    v102 = sub_22E4EF088(v101, (unint64_t)v100, 1);
    v30 = 0;
    v103 = *(_QWORD *)a8 + 24 * *(unsigned int *)(a8 + 8);
    v104 = *(_OWORD *)v102;
    *(_QWORD *)(v103 + 16) = *(_QWORD *)(v102 + 16);
    *(_OWORD *)v103 = v104;
    ++*(_DWORD *)(a8 + 8);
  }
  return v30;
}

uint64_t sub_22ED68B98(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x10)
    __asm { BR              X10 }
  return 0;
}

void sub_22ED68BFC()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 32) >= 0x10uLL)
    JUMPOUT(0x22ED68BD8);
  JUMPOUT(0x22ED68BB4);
}

void sub_22ED68CC4()
{
  uint64_t v0;
  uint64_t v1;

  if ((sub_22ED68B98(v0, *(_QWORD *)(v1 + 32)) & 1) == 0)
    JUMPOUT(0x22ED68CB8);
  JUMPOUT(0x22ED68BB8);
}

uint64_t sub_22ED68CE8()
{
  int *v0;
  uint64_t v1;
  unint64_t v2;

  v2 = sub_22F114198(*(_QWORD *)(v1 + 24));
  return sub_22EDA451C(v0, v2);
}

uint64_t sub_22ED68D0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 32);
  if (!v2)
    JUMPOUT(0x22ED68BB4);
  return sub_22EDA44B4(v0, v2);
}

uint64_t sub_22ED68D38(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5)
{
  uint64_t v9;
  unsigned __int8 *v10;
  char i;
  int v12;
  int v13;
  unsigned int v14;
  unint64_t v15;
  int v16;
  _BOOL4 v17;
  unsigned __int8 *v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  int v34;
  int v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int *v45;
  int v46;
  unint64_t v47;
  int v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  BOOL v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int v72;
  int v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  uint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  BOOL v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  int v103;
  uint64_t *v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t *v115;
  unsigned int v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  int v122;
  int v123;
  uint64_t v124;
  unsigned int v125;
  int v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  BOOL v130;
  uint64_t v131;
  unsigned int v132[24];
  _BYTE v133[96];
  unsigned int v134[24];
  _BYTE v135[96];
  _BYTE v136[96];
  _BYTE v137[96];
  _BYTE v138[96];
  _BYTE v139[96];
  _BYTE v140[96];
  _BYTE v141[96];
  unsigned int v142[24];
  uint64_t v143;
  uint64_t v144;
  uint64_t v145[12];
  unint64_t v146;
  char v147;
  uint64_t v148;
  char v149;
  void *__p;
  uint64_t v151;
  uint64_t v152;
  char v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int v156[25];
  char v157;
  uint64_t v158[2];

  v144 = a3;
  v9 = *((_QWORD *)a4 + 1);
  if ((**(_BYTE **)(a1 + 72) & 0x20) != 0)
  {
    v18 = sub_22EFFBBCC(a4);
    v10 = v18;
    if (*v18 != 233 || (*(_DWORD *)v18 & 0x780000) != 0x100000)
    {
LABEL_22:
      v25 = 0;
      v17 = 0;
      goto LABEL_37;
    }
    v129 = a2;
    v19 = v9;
    v20 = (*(_DWORD *)v18 >> 18) & 0x1F;
    v21 = v20 == 5;
    v22 = sub_22EFFBBCC(*((unsigned __int8 **)v18 + 2));
    if (*v22 == 233)
    {
      while (1)
      {
        v23 = v22;
        v24 = (*(_DWORD *)v22 >> 18) & 0x1F;
        v21 |= v24 == 5;
        if ((*(_DWORD *)v22 & 0x780000) != 0x100000)
          break;
        v22 = sub_22EFFBBCC(*((unsigned __int8 **)v22 + 2));
        v10 = v23;
        v20 = v24;
        if (*v22 != 233)
          goto LABEL_28;
      }
      v24 = v20;
    }
    else
    {
      v24 = v20;
    }
LABEL_28:
    if (*((_DWORD *)v10 + 1))
    {
      if ((v21 & 1) != 0)
      {
        sub_22F0D5A50((uint64_t)a4);
        sub_22E8FCA40((_QWORD *)a1, v27, 0x14B3u, 0, (uint64_t)v156);
        sub_22F0D4E74((uint64_t)a4);
        v146 = v28;
        sub_22E8906A0((uint64_t)v156, (uint64_t *)&v146);
        sub_22E903BEC(v156);
      }
      if (v24 == 4)
      {
        v25 = 0;
        v17 = 1;
LABEL_36:
        v10 = v22;
        v9 = v19;
        a2 = v129;
        goto LABEL_37;
      }
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v22 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) == 39)
      {
        sub_22F0D5A50((uint64_t)v22);
        sub_22E8FCA40((_QWORD *)a1, v29, 0x12BFu, 0, (uint64_t)v156);
        sub_22F0D4E74((uint64_t)v22);
        v146 = v30;
        sub_22E8906A0((uint64_t)v156, (uint64_t *)&v146);
        sub_22E903BEC(v156);
      }
    }
    v25 = 0;
    v17 = 0;
    goto LABEL_36;
  }
  v10 = sub_22EFFEB40(a4);
  for (i = 0; ; i = 1)
  {
    v12 = *v10;
    if (v12 != 214)
      break;
    if ((i & 1) == 0)
    {
      sub_22F0D5A50((uint64_t)v10);
      if ((**(_QWORD **)(a1 + 72) & 0x200) != 0)
        v14 = 6454;
      else
        v14 = 5357;
      sub_22E8FCA40((_QWORD *)a1, v13, v14, 0, (uint64_t)v156);
      sub_22F0D4E74((uint64_t)v10);
      v146 = v15;
      sub_22E8906A0((uint64_t)v156, (uint64_t *)&v146);
      sub_22E903BEC(v156);
    }
    v10 = (unsigned __int8 *)*((_QWORD *)v10 + 3);
  }
  while (v12 == 226)
  {
    v10 = sub_22EFFEB40(*((unsigned __int8 **)v10 + 3));
    v12 = *v10;
  }
  if (v12 != 233)
    goto LABEL_22;
  v16 = *(_DWORD *)v10 & 0x7C0000;
  v17 = v16 == 0x100000;
  if (v16 == 0x100000)
  {
    v25 = *((_DWORD *)v10 + 1);
    v10 = (unsigned __int8 *)*((_QWORD *)v10 + 2);
    v26 = *v10;
  }
  else
  {
    v25 = 0;
    v26 = *(_DWORD *)v10;
  }
  while (v26 == 226)
  {
    v10 = sub_22EFFEB40(*((unsigned __int8 **)v10 + 3));
    v26 = *v10;
  }
LABEL_37:
  v143 = 0;
  v31 = *v10;
  if (v31 == 137)
  {
    v32 = *((_QWORD *)v10 + 3);
  }
  else
  {
    v32 = 0;
    if (v31 != 161)
      goto LABEL_42;
    v32 = *((_QWORD *)v10 + 2);
  }
  v143 = v32;
LABEL_42:
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v144 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                  + 16) == 39
    || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v144 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                  + 16) & 0xFF800FF) == 114294795)
  {
    v34 = sub_22ED6A394(a1, a2, v144, a4, v32);
    if (v34 == 2)
      return 1;
    if (v34 == 1)
    {
      sub_22EFF605C((uint64_t)v10);
      sub_22E8FCA40((_QWORD *)a1, v35, 0x1938u, 0, (uint64_t)v142);
      sub_22E903BEC(v142);
      result = 0;
      v37 = v144 & 7 | *(_QWORD *)((v144 & 0xFFFFFFFFFFFFFFF0) + 8);
      *(_DWORD *)a5 = 3;
      *(_QWORD *)(a5 + 8) = v37;
      return result;
    }
  }
  if ((v10[2] & 1) != 0)
  {
    result = 0;
    *(_DWORD *)a5 = 7;
    *(_QWORD *)(a5 + 8) = a4;
    return result;
  }
  v38 = v143;
  if (!v143)
  {
    sub_22F0D5A50((uint64_t)v10);
    sub_22E8FCA40((_QWORD *)a1, v46, 0x12BFu, 0, (uint64_t)v156);
    sub_22F0D4E74((uint64_t)v10);
    v146 = v47;
    sub_22E8906A0((uint64_t)v156, (uint64_t *)&v146);
    sub_22E903BEC(v156);
    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a2 + 24), 0x17E2u, 0, (uint64_t)v141);
    v45 = (unsigned int *)v141;
    goto LABEL_59;
  }
  v39 = *(_DWORD *)(v143 + 28);
  v40 = v39 & 0x7F;
  if ((v40 - 49) <= 0x13 && ((1 << ((v39 & 0x7F) - 49)) & 0x80007) != 0)
  {
    sub_22F0D5A50((uint64_t)v10);
    sub_22E8FCA40((_QWORD *)a1, v42, 0x12B1u, 0, (uint64_t)v156);
    v43 = sub_22E890024((uint64_t)v156, &v143);
    sub_22F0D4E74((uint64_t)v10);
    v146 = v44;
    sub_22E8906A0(v43, (uint64_t *)&v146);
    sub_22E903BEC(v156);
    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a2 + 24), 0x17E2u, 0, (uint64_t)v140);
    v45 = (unsigned int *)v140;
LABEL_59:
    sub_22E903BEC(v45);
    return 1;
  }
  v48 = v39 & 0x7E;
  if ((v48 - 54) >= 4)
    v49 = 0;
  else
    v49 = (_QWORD *)v143;
  v146 = (unint64_t)v49;
  if (v49)
  {
    if ((*(_QWORD *)((*(uint64_t (**)(_QWORD *))(*v49 + 32))(v49) + 80) & 0xE000) != 0x4000
      && ((v49[5] & 7) != 6 || (*(_DWORD *)(v49[5] & 0xFFFFFFFFFFFFFFF8) - 1) > 3))
    {
      sub_22F0D5A50((uint64_t)v10);
      sub_22E8FCA40((_QWORD *)a1, v54, 0x12B5u, 0, (uint64_t)v156);
      v55 = sub_22E890024((uint64_t)v156, (uint64_t *)&v146);
      sub_22F0D4E74((uint64_t)v10);
      v145[0] = v56;
      sub_22E8906A0(v55, v145);
      sub_22E903BEC(v156);
      sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a2 + 24), 0x17E2u, 0, (uint64_t)v139);
      v45 = (unsigned int *)v139;
      goto LABEL_59;
    }
    v38 = v143;
    v48 = *(_DWORD *)(v143 + 28) & 0x7E;
    v40 = *(_DWORD *)(v143 + 28) & 0x7F;
  }
  if ((v48 - 52) >= 6)
    v50 = 0;
  else
    v50 = v38;
  if ((v40 - 60) >= 7)
    v51 = 0;
  else
    v51 = v38;
  if (v40 != 69 && !v50 && !v51)
  {
    sub_22F0D5A50((uint64_t)v10);
    sub_22E8FCA40((_QWORD *)a1, v52, 0x12C2u, 0, (uint64_t)v156);
    sub_22F0D4E74((uint64_t)v10);
    v146 = v53;
    sub_22E8906A0((uint64_t)v156, (uint64_t *)&v146);
    sub_22E903BEC(v156);
    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v143 + 24), 0x17D1u, 0, (uint64_t)v138);
    v45 = (unsigned int *)v138;
    goto LABEL_59;
  }
  v57 = sub_22EFB948C(v38);
  v128 = v50;
  if (v57 == 4 || v57 == 1)
  {
    v58 = v50 == 0;
    v130 = v58;
    sub_22F0D5A50((uint64_t)v10);
    if ((**(_QWORD **)(a1 + 72) & 0x200) != 0)
      v60 = 6457;
    else
      v60 = 5359;
    sub_22E8FCA40((_QWORD *)a1, v59, v60, 0, (uint64_t)v156);
    LOBYTE(v145[0]) = v58;
    v61 = sub_22E894E38((uint64_t)v156, (unsigned __int8 *)v145);
    v62 = sub_22E890024(v61, &v143);
    sub_22F0D4E74((uint64_t)v10);
    v146 = v63;
    sub_22E8906A0(v62, (uint64_t *)&v146);
    sub_22E903BEC(v156);
    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v143 + 24), 0x17D0u, 0, (uint64_t)v156);
    LOBYTE(v146) = v130;
    sub_22E894E38((uint64_t)v156, (unsigned __int8 *)&v146);
    sub_22E903BEC(v156);
  }
  else
  {
    v67 = sub_22EFB948C(v143);
    if (v67 == 3 || !v67)
    {
      sub_22F0D5A50((uint64_t)v10);
      sub_22E8FCA40((_QWORD *)a1, v68, 0x12C5u, 0, (uint64_t)v156);
      LOBYTE(v145[0]) = v50 == 0;
      v69 = sub_22E894E38((uint64_t)v156, (unsigned __int8 *)v145);
      v70 = sub_22E890024(v69, &v143);
      sub_22F0D4E74((uint64_t)v10);
      v146 = v71;
      sub_22E8906A0(v70, (uint64_t *)&v146);
      sub_22E903BEC(v156);
      sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v143 + 24), 0x17D0u, 0, (uint64_t)v156);
      LOBYTE(v146) = v50 == 0;
      sub_22E894E38((uint64_t)v156, (unsigned __int8 *)&v146);
      v45 = v156;
      goto LABEL_59;
    }
  }
  if (v51)
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v51 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) & 0xFE) == 0x28)
    {
      sub_22F0D5A50((uint64_t)v10);
      sub_22E8FCA40((_QWORD *)a1, v64, 0x12C8u, 0, (uint64_t)v156);
      v146 = *(_QWORD *)(v51 + 48);
      v65 = sub_22E8901B8((uint64_t)v156, (uint64_t *)&v146);
      sub_22F0D4E74((uint64_t)v10);
      v145[0] = v66;
      sub_22E8906A0(v65, v145);
      sub_22E903BEC(v156);
      sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a2 + 24), 0x17E2u, 0, (uint64_t)v137);
      v45 = (unsigned int *)v137;
      goto LABEL_59;
    }
    sub_22EFBB794(v51);
    if (v72)
    {
      sub_22F0D5A50((uint64_t)v10);
      sub_22E8FCA40((_QWORD *)a1, v73, 0x12CAu, 0, (uint64_t)v156);
      sub_22F0D4E74((uint64_t)v10);
      v146 = v74;
      sub_22E8906A0((uint64_t)v156, (uint64_t *)&v146);
      sub_22E903BEC(v156);
      sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v51 + 24), 0x17D1u, 0, (uint64_t)v136);
      v45 = (unsigned int *)v136;
      goto LABEL_59;
    }
  }
  v75 = *(_QWORD *)(v144 & 0xFFFFFFFFFFFFFFF0);
  v76 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v75 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if (!v17)
  {
    if (v76 != 39)
      goto LABEL_112;
    if (v128)
    {
      v80 = sub_22EF5B848(*(_QWORD *)(a1 + 88), *(_QWORD *)(v128 + 48), 0);
    }
    else
    {
      v82 = *(_QWORD *)(v143 + 48);
      v83 = *(_QWORD *)(a1 + 88);
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v82 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) & 0xFEu)
         - 2 > 3)
      {
        v121 = sub_22EF5B848(v83, v82, 0);
        if (*(_QWORD *)(*(_QWORD *)((v121 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(*(_QWORD *)((v144 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
        {
          sub_22F0D5A50((uint64_t)v10);
          sub_22E8FCA40((_QWORD *)a1, v122, 0x12BDu, 0, (uint64_t)v156);
          sub_22E8901B8((uint64_t)v156, &v144);
          sub_22E903BEC(v156);
          sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a2 + 24), 0x17E2u, 0, (uint64_t)v133);
          v45 = (unsigned int *)v133;
          goto LABEL_59;
        }
        v9 = v121;
        sub_22F0D5A50((uint64_t)v10);
        sub_22E8FCA40((_QWORD *)a1, v123, 0x12BDu, 0, (uint64_t)v156);
        v124 = sub_22E8901B8((uint64_t)v156, &v144);
        sub_22F0D5A50((uint64_t)v10);
        v148 = 0;
        v149 = 0;
        v152 = 0x100000000000000;
        v151 = 0;
        v146 = v125 | ((unint64_t)v125 << 32);
        v147 = 0;
        __p = (void *)38;
        v153 = 0;
        sub_22E890748(v124, &v146);
        if (SHIBYTE(v152) < 0)
          operator delete(__p);
        sub_22E903BEC(v156);
        sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a2 + 24), 0x17E2u, 0, (uint64_t)v132);
        sub_22E903BEC(v132);
        goto LABEL_112;
      }
      v80 = sub_22EF5F824(v83, v82);
    }
    v9 = v80;
    goto LABEL_112;
  }
  if ((v76 & 0xFE) != 0x28)
    goto LABEL_112;
  v77 = *(_QWORD *)(v143 + 48);
  v78 = *(_DWORD *)(v75 + 16);
  if ((v78 & 0xFE) == 0x28)
    goto LABEL_99;
  v75 = sub_22F10CF48(v75);
  if (v75)
  {
    v78 = *(_DWORD *)(v75 + 16);
LABEL_99:
    if ((v78 & 0x100000) != 0)
    {
      do
      {
        v75 = *(_QWORD *)(*(_QWORD *)(v75 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v75)
        {
          v126 = *(_DWORD *)(v75 + 16);
          if ((v126 & 0xFE) == 0x28)
            continue;
        }
        v75 = sub_22F10CF48(v75);
        v126 = *(_DWORD *)(v75 + 16);
      }
      while ((v126 & 0x100000) != 0);
    }
    v79 = (uint64_t *)(v75 + 32);
    goto LABEL_101;
  }
  v79 = &v144;
LABEL_101:
  if (*(_QWORD *)(*(_QWORD *)((v77 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(*(_QWORD *)((*v79 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
  {
    sub_22E8FCA40((_QWORD *)a1, v25, 0x12AFu, 0, (uint64_t)v156);
    sub_22E8901B8((uint64_t)v156, &v144);
    sub_22E903BEC(v156);
    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a2 + 24), 0x17E2u, 0, (uint64_t)v135);
    v45 = (unsigned int *)v135;
    goto LABEL_59;
  }
  sub_22E8FCA40((_QWORD *)a1, v25, 0x12AFu, 0, (uint64_t)v156);
  v81 = sub_22E8901B8((uint64_t)v156, &v144);
  v149 = 0;
  v148 = 0;
  v152 = 0;
  __p = 0;
  v151 = 0;
  v153 = 0;
  v146 = v25 | ((unint64_t)v25 << 32);
  v147 = 1;
  sub_22E890748(v81, &v146);
  if (SHIBYTE(v152) < 0)
    operator delete(__p);
  sub_22E903BEC(v156);
  sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a2 + 24), 0x17E2u, 0, (uint64_t)v134);
  sub_22E903BEC(v134);
  v9 = *(_QWORD *)(v143 + 48);
LABEL_112:
  v84 = v144;
  v158[0] = v144;
  v157 = 0;
  v85 = (uint64_t *)(v144 & 0xFFFFFFFFFFFFFFF0);
  v86 = *(_QWORD *)(v144 & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v86 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
  {
    if (*(_BYTE *)(v86 + 16) != 39)
      v86 = sub_22F10CF48(v86);
    if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v86 + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                  + 8) & 0xFFFFFFFFFFFFFFF0)
                                          + 16)
       - 25 >= 2)
    {
      if (sub_22ECFD738(a1, v9, v84, 0, &v157))
        goto LABEL_158;
      v85 = (uint64_t *)(v158[0] & 0xFFFFFFFFFFFFFFF0);
    }
  }
  v87 = *v85;
  if (!*v85 || (v88 = *(_DWORD *)(v87 + 16), (v88 & 0xFE) != 0x28))
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v87 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
      goto LABEL_151;
    v89 = sub_22F10CF48(*v85);
    if (!v89)
      goto LABEL_151;
    v87 = v89;
    v88 = *(_DWORD *)(v89 + 16);
  }
  v90 = v87;
  if ((v88 & 0x100000) != 0)
  {
    v90 = v87;
    do
    {
      v90 = *(_QWORD *)(*(_QWORD *)(v90 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (v90)
      {
        v91 = *(_DWORD *)(v90 + 16);
        if ((v91 & 0xFE) == 0x28)
          continue;
      }
      v90 = sub_22F10CF48(v90);
      v91 = *(_DWORD *)(v90 + 16);
    }
    while ((v91 & 0x100000) != 0);
  }
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v90 + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 16)
     - 25 >= 2)
  {
    if ((*(_BYTE *)(v87 + 18) & 0x10) != 0)
    {
      v93 = v87;
      do
      {
        v93 = *(_QWORD *)(*(_QWORD *)(v93 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v93)
        {
          v94 = *(_DWORD *)(v93 + 16);
          if ((v94 & 0xFE) == 0x28)
            continue;
        }
        v93 = sub_22F10CF48(v93);
        v94 = *(_DWORD *)(v93 + 16);
      }
      while ((v94 & 0x100000) != 0);
      v92 = (*(_BYTE *)(v87 + 18) & 0x10) == 0;
    }
    else
    {
      v92 = 1;
      v93 = v87;
    }
    v95 = *(_QWORD *)(v93 + 32);
    v131 = *(_QWORD *)((v95 & 0xFFFFFFFFFFFFFFF0) + 8);
    v96 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFF0) + 8);
    if (!v92)
    {
      do
      {
        v87 = *(_QWORD *)(*(_QWORD *)(v87 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v87)
        {
          v97 = *(_DWORD *)(v87 + 16);
          if ((v97 & 0xFE) == 0x28)
            continue;
        }
        v87 = sub_22F10CF48(v87);
        v97 = *(_DWORD *)(v87 + 16);
      }
      while ((v97 & 0x100000) != 0);
    }
    v98 = *(_QWORD *)((*(_QWORD *)(v87 + 32) & 0xFFFFFFFFFFFFFFF0) + 8);
    v99 = (v98 & 8) != 0 ? (*(_DWORD *)((v98 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 9) & 3 : 0;
    v100 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFF0) + 8);
    v101 = (v100 & 8) != 0 ? (*(_DWORD *)((v100 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 9) & 3 : 0;
    if (((v96 | v9) & ~(v131 | v95) & 7) != 0 || v101 > v99)
    {
      sub_22F0D5A50((uint64_t)v10);
      sub_22E8FCA40((_QWORD *)a1, v117, 0x12C7u, 0, (uint64_t)v156);
      v118 = sub_22E8901B8((uint64_t)v156, v158);
      v155 = *((_QWORD *)v10 + 1);
      v119 = sub_22E8901B8(v118, &v155);
      sub_22F0D4E74((uint64_t)v10);
      v154 = v120;
      sub_22E8906A0(v119, &v154);
      sub_22E903BEC(v156);
      v115 = &v146;
LABEL_164:
      sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a2 + 24), 0x17E2u, 0, (uint64_t)v115);
      v45 = (unsigned int *)v115;
      goto LABEL_59;
    }
  }
LABEL_151:
  v102 = *(_QWORD *)(v158[0] & 0xFFFFFFFFFFFFFFF0);
  if (!v102 || (v103 = *(_DWORD *)(v102 + 16), (v103 & 0xFE) != 0x28))
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v102 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28
      || (v102 = sub_22F10CF48(v102)) == 0)
    {
      v104 = v158;
      goto LABEL_155;
    }
    v103 = *(_DWORD *)(v102 + 16);
  }
  if ((v103 & 0x100000) != 0)
  {
    do
    {
      v102 = *(_QWORD *)(*(_QWORD *)(v102 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (v102)
      {
        v127 = *(_DWORD *)(v102 + 16);
        if ((v127 & 0xFE) == 0x28)
          continue;
      }
      v102 = sub_22F10CF48(v102);
      v127 = *(_DWORD *)(v102 + 16);
    }
    while ((v127 & 0x100000) != 0);
  }
  v104 = (uint64_t *)(v102 + 32);
LABEL_155:
  if (*(_QWORD *)(*(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(*(_QWORD *)((*v104 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v158[0] & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) & 0xFE) == 0x28)
    {
      sub_22F0D5A50((uint64_t)v10);
      sub_22E8FCA40((_QWORD *)a1, v105, 0x12BAu, 0, (uint64_t)v156);
      v106 = sub_22E8901B8((uint64_t)v156, v158);
      v155 = *((_QWORD *)a4 + 1);
      v107 = sub_22E8901B8(v106, &v155);
    }
    else
    {
      sub_22F0D5A50((uint64_t)v10);
      sub_22E8FCA40((_QWORD *)a1, v111, 0x12BEu, 0, (uint64_t)v156);
      v155 = *((_QWORD *)a4 + 1);
      v112 = sub_22E8901B8((uint64_t)v156, &v155);
      v107 = sub_22E8901B8(v112, v158);
    }
    v113 = v107;
    sub_22F0D4E74((uint64_t)v10);
    v154 = v114;
    sub_22E8906A0(v113, &v154);
    sub_22E903BEC(v156);
    v115 = (unint64_t *)v145;
    goto LABEL_164;
  }
LABEL_158:
  v108 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v143 + 32))(v143);
  v109 = v144 & 7 | *(_QWORD *)((v144 & 0xFFFFFFFFFFFFFFF0) + 8);
  *(_DWORD *)a5 = 2;
  *(_QWORD *)(a5 + 8) = v109;
  *(_QWORD *)(a5 + 16) = v108;
  v110 = v143;
  if ((*(_DWORD *)(v143 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
  {
    sub_22F0D5A50((uint64_t)v10);
    sub_22EB4E494(a1, v116, v110, 0);
    return 0;
  }
  else
  {
    result = 0;
    *(_DWORD *)(v143 + 28) |= 0x800u;
  }
  return result;
}

uint64_t sub_22ED69E00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  char v10;
  unsigned __int8 *v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  int v41;
  uint64_t v42;
  _DWORD *v43;
  int v44;
  unsigned int v45;
  BOOL v46;
  int v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE v60[96];
  _BYTE v61[96];
  uint64_t v62;
  unsigned int v63[24];
  uint64_t v64;
  unsigned int v65[25];
  char v66;
  uint64_t v67;

  v10 = 0;
  v67 = a3;
  v11 = (unsigned __int8 *)*a4;
  while (1)
  {
    v12 = *v11;
    if (v12 != 214)
      break;
    if ((v10 & 1) == 0)
    {
      sub_22F0D5A50((uint64_t)v11);
      if ((**(_QWORD **)(a1 + 72) & 0x200) != 0)
        v14 = 6454;
      else
        v14 = 5357;
      sub_22E8FCA40((_QWORD *)a1, v13, v14, 0, (uint64_t)v65);
      sub_22F0D4E74((uint64_t)v11);
      v64 = v15;
      sub_22E8906A0((uint64_t)v65, &v64);
      sub_22E903BEC(v65);
    }
    v11 = (unsigned __int8 *)*((_QWORD *)v11 + 3);
    v10 = 1;
  }
  while (v12 == 226)
  {
    v11 = sub_22EFFEB40(*((unsigned __int8 **)v11 + 3));
    v12 = *v11;
  }
  if (v12 != 161)
  {
    if (v12 == 233 && (*(_DWORD *)v11 & 0x7C0000) == 0x100000)
    {
      v16 = (unsigned __int8 *)*((_QWORD *)v11 + 2);
      if (*v16 == 161 && (v16[2] & 4) != 0 && *((_QWORD *)v16 + 4))
      {
        v17 = 0;
        v18 = *((_QWORD *)v16 + 2);
        goto LABEL_23;
      }
    }
LABEL_22:
    v16 = 0;
    v18 = 0;
    v17 = 1;
LABEL_23:
    v22 = sub_22ED6A394(a1, a2, a3, (_DWORD *)*a4, v18);
    if (v22 == 2)
      return 1;
    if (v22 == 1)
    {
      sub_22EFF605C(*a4);
      sub_22E8FCA40((_QWORD *)a1, v23, 0x1938u, 0, (uint64_t)v63);
      sub_22E903BEC(v63);
      v21 = 0;
      v24 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8) | a3 & 7;
      *(_DWORD *)a5 = 3;
      *(_QWORD *)(a5 + 8) = v24;
      return v21;
    }
    v25 = *(_QWORD *)(*a4 + 8);
    v26 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFF0);
    v27 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
    if (!v27 || (v28 = *(_DWORD *)(v27 + 16), (v28 & 0xFE) != 0x28))
    {
      v29 = a3;
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
        goto LABEL_29;
      v56 = *(_QWORD *)(*a4 + 8);
      v27 = sub_22F10CF48(v27);
      v25 = v56;
      v29 = a3;
      if (!v27)
        goto LABEL_29;
      v28 = *(_DWORD *)(v27 + 16);
    }
    if ((v28 & 0x100000) != 0)
    {
      v58 = v25;
      do
      {
        v27 = *(_QWORD *)(*(_QWORD *)(v27 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (!v27 || (v54 = *(_DWORD *)(v27 + 16), (v54 & 0xFE) != 0x28))
        {
          v27 = sub_22F10CF48(v27);
          v54 = *(_DWORD *)(v27 + 16);
        }
        v25 = v58;
      }
      while ((v54 & 0x100000) != 0);
    }
    v29 = *(_QWORD *)(v27 + 32);
LABEL_29:
    v66 = 0;
    v30 = sub_22ECFD738(a1, v25, v29, 0, &v66);
    v31 = *a4;
    if (v30)
    {
      *a4 = sub_22E90092C(a1, v31, a3, 5, (*(_DWORD *)v31 >> 8) & 3, 0) & 0xFFFFFFFFFFFFFFFELL;
LABEL_38:
      if (v17)
      {
        sub_22F0D5A50((uint64_t)v11);
        sub_22E8FCA40((_QWORD *)a1, v41, 0x12C3u, 0, (uint64_t)v65);
        sub_22F0D4E74((uint64_t)v11);
        v64 = v42;
        v21 = *(_BYTE *)(sub_22E8906A0((uint64_t)v65, &v64) + 80) != 0;
        sub_22E903BEC(v65);
        return v21;
      }
      v43 = (_DWORD *)*((_QWORD *)v16 + 2);
      v44 = v43[7];
      v45 = (v44 & 0x7F) - 49;
      v46 = v45 > 0x13;
      v47 = (1 << v45) & 0x80007;
      v48 = v46 || v47 == 0;
      if (v48 && (v44 & 0x7Eu) - 54 > 3)
      {
        sub_22F0D5A50((uint64_t)v11);
        sub_22E8FCA40((_QWORD *)a1, v52, 0x12C3u, 0, (uint64_t)v65);
        sub_22F0D4E74((uint64_t)v11);
        v64 = v53;
        sub_22E8906A0((uint64_t)v65, &v64);
        sub_22E903BEC(v65);
        sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(*((_QWORD *)v16 + 2) + 24), 0x17D1u, 0, (uint64_t)v60);
        v40 = (unsigned int *)v60;
        goto LABEL_36;
      }
      if ((*(_DWORD *)v11 & 0x18000) == 0)
      {
        v49 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v43 + 32))(v43);
        v21 = 0;
        v50 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8);
        *(_DWORD *)a5 = 2;
        *(_QWORD *)(a5 + 8) = v50 | a3 & 7;
        *(_QWORD *)(a5 + 16) = v49;
        return v21;
      }
LABEL_45:
      v21 = 0;
      *(_DWORD *)a5 = 7;
      *(_QWORD *)(a5 + 8) = v11;
      return v21;
    }
    v32 = *(_QWORD *)(v31 + 8);
    v33 = *v26;
    if (!*v26 || (v34 = *(_DWORD *)(v33 + 16), (v34 & 0xFE) != 0x28))
    {
      v35 = a3 & 0xFFFFFFFFFFFFFFF0;
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v33 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
        goto LABEL_34;
      v57 = *(_QWORD *)(v31 + 8);
      v33 = sub_22F10CF48(v33);
      if (!v33)
      {
        v35 = a3 & 0xFFFFFFFFFFFFFFF0;
        v32 = v57;
        goto LABEL_34;
      }
      v34 = *(_DWORD *)(v33 + 16);
      v32 = v57;
    }
    if ((v34 & 0x100000) != 0)
    {
      v59 = v32;
      do
      {
        v33 = *(_QWORD *)(*(_QWORD *)(v33 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (!v33 || (v55 = *(_DWORD *)(v33 + 16), (v55 & 0xFE) != 0x28))
        {
          v33 = sub_22F10CF48(v33);
          v55 = *(_DWORD *)(v33 + 16);
        }
        v32 = v59;
      }
      while ((v55 & 0x100000) != 0);
    }
    v35 = *(_QWORD *)(v33 + 32) & 0xFFFFFFFFFFFFFFF0;
LABEL_34:
    if (*(_QWORD *)(*(_QWORD *)((v32 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(*(_QWORD *)(v35 + 8) & 0xFFFFFFFFFFFFFFF0))
    {
      sub_22F0D5A50(*a4);
      sub_22E8FCA40((_QWORD *)a1, v36, 0x12BEu, 0, (uint64_t)v65);
      v64 = *(_QWORD *)(*a4 + 8);
      v37 = sub_22E8901B8((uint64_t)v65, &v64);
      v38 = sub_22E8901B8(v37, &v67);
      sub_22F0D4E74(*a4);
      v62 = v39;
      sub_22E8906A0(v38, &v62);
      sub_22E903BEC(v65);
      sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a2 + 24), 0x17E2u, 0, (uint64_t)v61);
      v40 = (unsigned int *)v61;
LABEL_36:
      sub_22E903BEC(v40);
      return 1;
    }
    goto LABEL_38;
  }
  v19 = *((_QWORD *)v11 + 2);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                + 16) != 31
    || (*(_DWORD *)(v19 + 28) & 0x7F) != 0x3B)
  {
    goto LABEL_22;
  }
  if ((*(_DWORD *)v11 & 0x18000) != 0)
    goto LABEL_45;
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 32))(v19);
  v21 = 0;
  *(_DWORD *)a5 = 2;
  *(_QWORD *)(a5 + 8) = a3;
  *(_QWORD *)(a5 + 16) = v20;
  return v21;
}

uint64_t sub_22ED6A394(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v5;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::string *v30;
  std::string::size_type v31;
  std::string *v32;
  std::string::size_type v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  void **v37;
  size_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  BOOL v42;
  unsigned int v43[24];
  unint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  void *__p;
  uint64_t v49;
  uint64_t v50;
  char v51;
  std::string v52;
  void *v53;
  char v54;
  void *v55[2];
  uint64_t v56;
  unsigned int v57[24];
  unsigned int v58[24];
  unsigned int v59[24];
  std::string v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  __int16 v65;
  char **v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v61 = a3;
  if ((*a4 & 0x18000) != 0 || a5 && sub_22E49F808(a5))
    return 0;
  sub_22EFF605C((uint64_t)a4);
  sub_22EE8B180(a1, v11);
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 2) == 0)
    return 0;
  v12 = sub_22EB1922C(a1, a4);
  if ((v12 & 1) != 0)
    return 2;
  v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
  v65 = 0;
  LODWORD(v67) = 0;
  v62 = (char *)&v64;
  v63 = 0x800000000;
  v66 = &v62;
  if (!sub_22F005120((unsigned __int8 *)(v12 & 0xFFFFFFFFFFFFFFFELL), (uint64_t)&v65, *(_QWORD *)(a1 + 88), 0)|| (_BYTE)v65)
  {
    sub_22EFF605C(v13);
    v22 = v21;
    if ((_DWORD)v63 == 1 && *((_DWORD *)v62 + 6) == 103)
    {
      v22 = *(_DWORD *)v62;
      v23 = &v62[32 * v63];
      v24 = *((_QWORD *)v23 - 3);
      if (v24)
      {
        v25 = *((_QWORD *)v23 - 2);
        if (v25)
        {
          sub_22E3BB10C(v25, v24);
          *((_QWORD *)v23 - 3) = 0;
        }
      }
      LODWORD(v63) = 0;
    }
    sub_22E8FCA40((_QWORD *)a1, v22, 0x12BCu, 0, (uint64_t)&v60);
    v52.__r_.__value_.__r.__words[0] = *(_QWORD *)(v13 + 8);
    v26 = sub_22E8901B8((uint64_t)&v60, (uint64_t *)&v52);
    sub_22F0D4E74(v13);
    v44 = v27;
    sub_22E8906A0(v26, (uint64_t *)&v44);
    sub_22E903BEC((unsigned int *)&v60);
    if ((_DWORD)v63)
    {
      v28 = 0;
      v29 = 32 * v63;
      do
      {
        sub_22E90379C((_QWORD *)a1, *(_DWORD *)&v62[v28], (uint64_t)&v62[v28 + 8], 0, (uint64_t)v59);
        sub_22E903BEC(v59);
        v28 += 32;
      }
      while (v29 != v28);
    }
    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a2 + 24), 0x17E2u, 0, (uint64_t)v58);
    sub_22E903BEC(v58);
    v5 = 2;
    goto LABEL_51;
  }
  v14 = *(_QWORD *)(v13 + 8);
  v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v15)
    v16 = (*(_DWORD *)(v15 + 16) & 0xFF800FF) == 114294795;
  else
    v16 = 0;
  if (v16)
    goto LABEL_50;
  if ((_DWORD)v67 == 12)
  {
    if (v68 <= 7)
      goto LABEL_18;
  }
  else if ((_DWORD)v67 == 7)
  {
    if ((~(_BYTE)v68 & 3) != 0)
    {
      if (v68 <= 3)
        goto LABEL_18;
    }
    else
    {
      if ((v68 & 4) != 0)
        v42 = v68 > 7;
      else
        v42 = (v68 & 0x7FFFFFFF8) != 0;
      if (!v42)
      {
LABEL_18:
        if (*(_QWORD *)(*(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
          && !sub_22ECFD738(a1, v14, a3, 0, v55))
        {
          sub_22EFF605C(v13);
          sub_22E8FCA40((_QWORD *)a1, v17, 0x12CCu, 0, (uint64_t)&v60);
          v52.__r_.__value_.__r.__words[0] = *(_QWORD *)(v13 + 8);
          v18 = sub_22E8901B8((uint64_t)&v60, (uint64_t *)&v52);
          v19 = sub_22E8901B8(v18, &v61);
          sub_22F0D4E74(v13);
          v44 = v20;
          sub_22E8906A0(v19, (uint64_t *)&v44);
          sub_22E903BEC((unsigned int *)&v60);
          sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a2 + 24), 0x17E2u, 0, (uint64_t)v57);
          sub_22E903BEC(v57);
        }
LABEL_50:
        v5 = 1;
        goto LABEL_51;
      }
    }
  }
  if (sub_22EFFBE1C(v13, *(_QWORD *)(a1 + 88), 0))
  {
    sub_22F1192C0(&v61, (uint64_t)&v52);
    v30 = std::string::insert(&v52, 0, "static_cast<");
    v31 = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    v32 = std::string::append(&v60, ">(");
    v33 = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)v55 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v56 = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
    sub_22EFF605C(v13);
    sub_22E8FCA40((_QWORD *)a1, v34, 0x12CBu, 0, (uint64_t)&v60);
    v35 = sub_22E8901B8((uint64_t)&v60, &v61);
    sub_22F0D5A50(v13);
    if (v56 >= 0)
      v37 = v55;
    else
      v37 = (void **)v55[0];
    if (v56 >= 0)
      v38 = HIBYTE(v56) & 0x7F;
    else
      v38 = (size_t)v55[1];
    sub_22E729148(v37, v38, v36, 0, (uint64_t)&v52);
    v39 = sub_22E890748(v35, &v52);
    sub_22F0D60E4(v13);
    v41 = sub_22F141A3C(v40, 0, *(_QWORD **)(a1 + 112), *(_DWORD **)(a1 + 72));
    v46 = 0;
    v47 = 0;
    v49 = 0;
    v50 = 0x100000000000000;
    v44 = v41 | ((unint64_t)v41 << 32);
    v45 = 0;
    __p = (void *)41;
    v51 = 0;
    sub_22E890748(v39, &v44);
    if (SHIBYTE(v50) < 0)
      operator delete(__p);
    if (v54 < 0)
      operator delete(v53);
    sub_22E903BEC((unsigned int *)&v60);
    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a2 + 24), 0x17E2u, 0, (uint64_t)v43);
    sub_22E903BEC(v43);
    if (SHIBYTE(v56) < 0)
      operator delete(v55[0]);
    goto LABEL_50;
  }
  v5 = 0;
LABEL_51:
  sub_22E89277C(&v62);
  if (v67 >= 2)
    sub_22EF53BC0(&v67);
  return v5;
}

unsigned int *sub_22ED6A908(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unsigned int v24;
  int v25;
  char *v26;
  int v27;
  int v28;
  unsigned int v29;
  int *v30;
  int v31;
  char *v32;
  int v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  int *v40;
  unsigned int v41;

  LODWORD(v3) = a3;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = v6;
  v8 = *(_QWORD *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0;
  v9 = *(_QWORD *)v8;
  if (*(_QWORD *)v8 && *(_BYTE *)(v9 + 16) == 44)
  {
    v10 = sub_22F114198(*(_QWORD *)(v9 + 24));
    v7 = sub_22E496830(v10);
    v8 = *(_QWORD *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0;
  }
  v11 = *(_QWORD *)v8;
  v12 = *(_DWORD *)(*(_QWORD *)v8 + 16);
  if (v11)
    v13 = v12 == 11;
  else
    v13 = 0;
  if (v13 && ((v12 >> 19) & 0x1FF) - 167 <= 0xD)
  {
    v18 = 1 << ((v12 >> 19) + 89);
    if ((v18 & 0x183B) != 0)
    {
      v19 = v12 & 0xFF80000;
      if (v19 == 89653248)
      {
        v20 = 786432;
      }
      else if (v19 == 89128960 && (*(_BYTE *)(a1[9] + 3) & 4) != 0)
      {
        v20 = 0x80000;
      }
      else
      {
        v20 = (v19 == 90177536) << 20;
      }
      goto LABEL_37;
    }
    if ((v18 & 0x2004) != 0)
    {
      v20 = 0x40000;
LABEL_37:
      v15 = sub_22E3CD3D4(a1[11] + 2032, 24, 3);
      sub_22E466FDC(a2, (uint64_t)&v40);
      v29 = v41;
      v30 = v40;
      if (v41 < 0x41)
        v30 = (int *)&v40;
      v31 = *v30;
      *(_BYTE *)v15 = -102;
      if (byte_255E04EB3)
      {
        v32 = sub_22F0D3748(154);
        ++*((_DWORD *)v32 + 2);
        v29 = v41;
      }
      v33 = *(_DWORD *)v15;
      *(_QWORD *)(v15 + 8) = v7;
      *(_DWORD *)(v15 + 16) = v31;
      *(_DWORD *)(v15 + 20) = v3;
      *(_DWORD *)v15 = v33 & 0xFFE000FF | v20;
LABEL_42:
      if (v29 < 0x41)
        goto LABEL_45;
      goto LABEL_43;
    }
  }
  v14 = v12 & 0xFF800FF;
  if (v14 == 87031819)
  {
    v15 = sub_22E3CD3D4(a1[11] + 2032, 16, 3);
    sub_22E466FDC(a2, (uint64_t)&v40);
    v16 = v41;
    if (v41 > 0x40)
      v17 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v40) == v16;
    else
      v17 = v40 == 0;
    v25 = v17;
    *(_BYTE *)v15 = 117;
    if (byte_255E04EB3)
    {
      v26 = sub_22F0D3748(117);
      ++*((_DWORD *)v26 + 2);
      v16 = v41;
    }
    v27 = *(_DWORD *)v15;
    *(_QWORD *)(v15 + 8) = v7;
    if (v25)
      v28 = 0;
    else
      v28 = 0x40000;
    *(_DWORD *)v15 = v27 & 0xFFF800FF | v28;
    *(_DWORD *)(v15 + 4) = v3;
    if (v16 >= 0x41)
    {
LABEL_43:
      if (v40)
        MEMORY[0x2348A0E84](v40, 0x1000C8000313F17);
    }
  }
  else
  {
    v21 = a1[11];
    if (v14 != 114294795)
    {
      sub_22E466FDC(a2, (uint64_t)&v40);
      v15 = sub_22E3CD3D4(v21 + 2032, 32, 3);
      sub_22EFF8F1C(v15, v21, (uint64_t)&v40, v7, v3);
      v29 = v41;
      goto LABEL_42;
    }
    v15 = sub_22E3CD3D4(v21 + 2032, 16, 3);
    v22 = *(_QWORD *)(a1[11] + 16824);
    *(_BYTE *)v15 = 0x80;
    if (byte_255E04EB3)
    {
      v23 = sub_22F0D3748(128);
      ++*((_DWORD *)v23 + 2);
    }
    v24 = *(_DWORD *)v15 & 0xFFFC00FF;
    *(_QWORD *)(v15 + 8) = v22;
    *(_DWORD *)v15 = v24;
    *(_DWORD *)(v15 + 4) = v3;
  }
LABEL_45:
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 44)
  {
    v34 = a1[11];
    if (a1[162] == a1[161])
    {
      v3 = v3;
      v35 = sub_22EF579A8(a1[11], v6, v3);
      v36 = 0;
      v37 = 40;
    }
    else
    {
      v36 = a1[162];
      v3 = v3;
      v35 = sub_22EF579A8(v34, v6, v3);
      if (HIDWORD(v36))
        v37 = 48;
      else
        v37 = 40;
    }
    v38 = (unsigned int *)sub_22E3CD3D4(v34 + 2032, v37, 3);
    return sub_22F0037E4(v38, v6, 0, 30, v15, 0, v36, (uint64_t)v35, v3, SHIDWORD(v3), v3);
  }
  return (unsigned int *)v15;
}

unsigned int *sub_22ED6AD1C(_QWORD *a1, int *a2, int *a3, int a4, int a5)
{
  unsigned int v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v17;
  BOOL v18;
  BOOL v19;
  unsigned int v20[24];
  unsigned int v21[24];

  if (a5)
  {
    sub_22E8FCA40(a1, a5, 0x12C9u, 0, (uint64_t)v21);
    sub_22E903BEC(v21);
    v9 = 6115;
  }
  else
  {
    v9 = 4840;
  }
  sub_22E8FCA40(a1, *a2, v9, 0, (uint64_t)v20);
  v19 = (a2[3] & 0x1FFFFFFFu) > (a3[3] & 0x1FFFFFFFu);
  v10 = sub_22E894E38((uint64_t)v20, (unsigned __int8 *)&v19);
  v11 = a4 != 0;
  v18 = v11;
  v12 = sub_22E894E38(v10, (unsigned __int8 *)&v18);
  v13 = a2[2];
  LODWORD(v17) = *a2;
  HIDWORD(v17) = v13;
  sub_22E8906A0(v12, &v17);
  sub_22E903BEC(v20);
  sub_22E8FCA40(a1, *a3, 0x17E7u, 0, (uint64_t)v20);
  v19 = v11;
  v14 = sub_22E894E38((uint64_t)v20, (unsigned __int8 *)&v19);
  v15 = a3[2];
  LODWORD(v17) = *a3;
  HIDWORD(v17) = v15;
  sub_22E8906A0(v14, &v17);
  return sub_22E903BEC(v20);
}

BOOL sub_22ED6AE3C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6)
{
  unsigned int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  void **v19;
  unsigned __int8 *v20;
  uint64_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  unsigned int v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[5];
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  unsigned int v42[24];
  unsigned int v43[24];
  unsigned int v44[24];
  uint64_t v45;
  uint64_t v46;
  uint64_t (**v47)();
  void **v48;
  char v49;
  uint64_t v50;
  void *v51[2];
  _BYTE v52[128];
  void *v53[2];
  _QWORD v54[17];

  v54[16] = *MEMORY[0x24BDAC8D0];
  v45 = a3;
  v46 = a2;
  if (((*(_DWORD *)(a2 + 28) ^ *(_DWORD *)(a3 + 28)) & 0x7F) != 0)
  {
    if ((_DWORD)a4)
    {
      if (a6)
      {
        sub_22E8FCA40(a1, a6, 0x12C9u, 0, (uint64_t)v44);
        sub_22E903BEC(v44);
        v12 = 6113;
      }
      else
      {
        v12 = 4839;
      }
      sub_22E8FCA40(a1, *(_DWORD *)(a2 + 24), v12, 0, (uint64_t)v53);
      LOBYTE(v51[0]) = a5 != 0;
      sub_22E894E38((uint64_t)v53, (unsigned __int8 *)v51);
      sub_22E903BEC((unsigned int *)v53);
      sub_22E8FCA40(a1, *(_DWORD *)(a3 + 24), 0x17E7u, 0, (uint64_t)v53);
      LOBYTE(v51[0]) = a5 != 0;
      v19 = v53;
      v20 = (unsigned __int8 *)v51;
LABEL_22:
      sub_22E894E38((uint64_t)v19, v20);
      sub_22E903BEC((unsigned int *)v53);
      return 0;
    }
    return 0;
  }
  v13 = sub_22EFC7864(a3);
  if (v13 != sub_22EFC7864(a2))
  {
    if (a5 != 2 || (sub_22EFC7864(a3) & 1) == 0)
    {
      if ((_DWORD)a4)
      {
        if (a6)
        {
          sub_22E8FCA40(a1, a6, 0x12C9u, 0, (uint64_t)v43);
          sub_22E903BEC(v43);
          v18 = 6118;
        }
        else
        {
          v18 = 4847;
        }
        v30 = *(_DWORD *)(a2 + 24);
        v31 = *(_DWORD *)(a2 + 28) & 0x7F;
        if (v31 == 59)
          v32 = 1;
        else
          v32 = 2;
        if (v31 == 38)
          v33 = 0;
        else
          v33 = v32;
        LODWORD(v51[0]) = v33;
        sub_22E8FCA40(a1, v30, v18, 0, (uint64_t)v53);
        v34 = sub_22E89519C((uint64_t)v53, (unsigned int *)v51);
        LOBYTE(v39[0]) = sub_22EFC78D8(a2);
        sub_22E894E38(v34, (unsigned __int8 *)v39);
        sub_22E903BEC((unsigned int *)v53);
        sub_22E8FCA40(a1, *(_DWORD *)(a3 + 24), 0x17E5u, 0, (uint64_t)v53);
        v35 = sub_22E89519C((uint64_t)v53, (unsigned int *)v51);
        LOBYTE(v39[0]) = sub_22EFC78D8(a3);
        v20 = (unsigned __int8 *)v39;
        v19 = (void **)v35;
        goto LABEL_22;
      }
      return 0;
    }
    if ((*(_DWORD *)(a3 + 28) & 0x7F) != 0x20)
    {
      if ((*(_DWORD *)(a3 + 28) & 0x7F) != 0x3B)
        goto LABEL_30;
      goto LABEL_14;
    }
    goto LABEL_24;
  }
  if ((*(_DWORD *)(a3 + 28) & 0x7F) == 0x20)
  {
LABEL_24:
    if (a5 <= 1)
      v22 = 1;
    else
      v22 = a5;
    if ((sub_22ED5D218(a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a3 + 56), a4, v22, a6) & 1) != 0)
      goto LABEL_30;
LABEL_62:
    v23 = 1;
    return !v23;
  }
  if ((*(_DWORD *)(a3 + 28) & 0x7F) == 0x3B)
  {
    if (a5 != 2)
    {
      v14 = *(_QWORD *)(a3 + 48);
      v16 = *(_QWORD *)(a2 + 48);
      v15 = v14 & 0xFFFFFFFFFFFFFFF0;
      v17 = v16 & 0xFFFFFFFFFFFFFFF0;
LABEL_32:
      v24 = *(_QWORD *)(v15 + 8) | v14 & 7;
      v25 = *(_QWORD *)(v17 + 8) | v16 & 7;
      v26 = v24 == v25;
      v23 = v24 != v25;
      v26 = v26 || (_DWORD)a4 == 0;
      if (v26)
        return !v23;
      if (a6)
      {
        sub_22E8FCA40(a1, a6, 0x12C9u, 0, (uint64_t)v42);
        sub_22E903BEC(v42);
        v27 = 6110;
      }
      else
      {
        v27 = 4831;
      }
      sub_22E8FCA40(a1, *(_DWORD *)(a2 + 24), v27, 0, (uint64_t)v53);
      v51[0] = *(void **)(a2 + 48);
      v38 = sub_22E8901B8((uint64_t)v53, (uint64_t *)v51);
      LOBYTE(v39[0]) = a5 != 0;
      sub_22E894E38(v38, (unsigned __int8 *)v39);
      sub_22E903BEC((unsigned int *)v53);
      sub_22E8FCA40(a1, *(_DWORD *)(a3 + 24), 0x17DFu, 0, (uint64_t)v53);
      v51[0] = *(void **)(a3 + 48);
      sub_22E8901B8((uint64_t)v53, (uint64_t *)v51);
      sub_22E903BEC((unsigned int *)v53);
      goto LABEL_62;
    }
LABEL_14:
    v14 = *(_QWORD *)(a3 + 48);
    v15 = v14 & 0xFFFFFFFFFFFFFFF0;
    if ((*(_BYTE *)(*(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
      goto LABEL_30;
    v16 = *(_QWORD *)(a2 + 48);
    v17 = v16 & 0xFFFFFFFFFFFFFFF0;
    if ((*(_BYTE *)(*(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
      goto LABEL_30;
    goto LABEL_32;
  }
  if (a5 != 2)
  {
    v28 = 0;
    v40 = 0;
    v41 = 0;
    if ((*(_BYTE *)(a2 + 60) & 4) != 0)
    {
      v28 = *(unsigned __int8 **)(a2 + 152);
      v41 = v28;
    }
    if ((*(_BYTE *)(a3 + 60) & 4) != 0)
    {
      v29 = *(unsigned __int8 **)(a3 + 152);
      v40 = v29;
    }
    else
    {
      v29 = 0;
    }
    v39[0] = a1;
    v39[1] = &v41;
    v39[2] = &v46;
    v39[3] = &v40;
    v39[4] = &v45;
    if ((v28 == 0) == (v29 != 0))
    {
      if ((_DWORD)a4)
        sub_22EDA47D4((uint64_t)v39);
      goto LABEL_62;
    }
    if (v28)
    {
      v53[0] = v54;
      v53[1] = (void *)0x2000000000;
      v51[1] = (void *)0x2000000000;
      v36 = a1[11];
      v49 = 1;
      v47 = &off_24FAC6E70;
      v48 = v53;
      v50 = v36;
      v51[0] = v52;
      sub_22F0E9FEC(&v47, v29);
      v37 = a1[11];
      v49 = 1;
      v47 = &off_24FAC6E70;
      v48 = v51;
      v50 = v37;
      sub_22F0E9FEC(&v47, v41);
      if ((llvm::FoldingSetNodeID::operator==() & 1) != 0)
      {
        if (v51[0] != v52)
          free(v51[0]);
        if (v53[0] != v54)
          free(v53[0]);
        goto LABEL_30;
      }
      if ((_DWORD)a4)
        sub_22EDA47D4((uint64_t)v39);
      if (v51[0] != v52)
        free(v51[0]);
      if (v53[0] != v54)
        free(v53[0]);
      goto LABEL_62;
    }
  }
LABEL_30:
  v23 = 0;
  return !v23;
}

unsigned int *sub_22ED6B33C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  int v8;
  unsigned int v9[24];
  unsigned int v10[24];

  v2 = *(_QWORD **)a1;
  v3 = **(_QWORD **)(a1 + 8);
  if (v3)
    sub_22F0D5A50(v3);
  else
    v4 = ***(_DWORD ***)(a1 + 16);
  sub_22E8FCA40(v2, v4, 0x12CDu, 0, (uint64_t)v10);
  sub_22E903BEC(v10);
  v5 = **(_QWORD **)(a1 + 24);
  if (v5)
    sub_22F0D5A50(v5);
  else
    v6 = ***(_DWORD ***)(a1 + 32);
  sub_22E8FCA40(v2, v6, 0x17E7u, 0, (uint64_t)v9);
  v8 = 0;
  sub_22E8900C4((uint64_t)v9, &v8);
  return sub_22E903BEC(v9);
}

uint64_t sub_22ED6B3F0(_QWORD *a1, unsigned int a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38[24];
  unint64_t v39;
  uint64_t v40;
  unsigned int v41;

  if (!a5)
    return 0;
  v9 = 0;
  v34 = a2;
  v10 = a5;
LABEL_3:
  v11 = a4 + 24 * v9;
  if (*(_DWORD *)v11 == 7)
  {
    v12 = *(unsigned __int8 **)(v11 + 8);
    v13 = *v12;
    if (v13 == 213)
    {
      v12 = (unsigned __int8 *)*((_QWORD *)v12 + 3);
      goto LABEL_10;
    }
    while (v13 == 153)
    {
      v12 = (unsigned __int8 *)*((_QWORD *)v12 + 2);
LABEL_10:
      v13 = *v12;
    }
    if (v13 == 161 && (*(_DWORD *)(*((_QWORD *)v12 + 2) + 28) & 0x7F) == 0x3B)
      goto LABEL_40;
    if ((v12[1] & 0x80) != 0)
    {
      LODWORD(v36) = *(_DWORD *)(a3 + 68) & 0xFFFFF;
      WORD2(v36) = 1;
      LODWORD(v37) = 0;
      sub_22ED9153C((uint64_t)&v36, (unint64_t)v12, 0);
      v14 = v37;
      v15 = v37;
      if (!(_DWORD)v37)
      {
        sub_22F0D4E74((uint64_t)v12);
        v14 = v16;
        v15 = HIDWORD(v16);
      }
      v39 = v14 | (v15 << 32);
      if (v14 && v15)
      {
        if (a6)
        {
          sub_22E8FCA40(a1, v34, 0xCA8u, 0, (uint64_t)v38);
          sub_22E903BEC(v38);
          LODWORD(v14) = v39;
          v28 = a1;
          v29 = 5556;
        }
        else
        {
          v28 = a1;
          v29 = 3240;
        }
        sub_22E8FCA40(v28, v14, v29, 0, (uint64_t)&v36);
        v32 = &v36;
LABEL_51:
        sub_22E8906A0((uint64_t)v32, (uint64_t *)&v39);
        sub_22E903BEC((unsigned int *)&v36);
        return 1;
      }
    }
    else
    {
      v39 = 0;
    }
    v17 = *(_QWORD *)(a3 + 56);
    v18 = (uint64_t *)(v17 & 0xFFFFFFFFFFFFFFF8);
    if ((v17 & 4) != 0)
      v18 = (uint64_t *)v18[4];
    v21 = *v18;
    v19 = (uint64_t)(v18 + 1);
    v20 = v21;
    v22 = *(_DWORD *)(a3 + 68);
    v36 = v21;
    v37 = v19;
    if ((*(_BYTE *)(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0)
      goto LABEL_40;
    LODWORD(v40) = v22 & 0xFFFFF;
    WORD2(v40) = 1;
    v41 = 0;
    sub_22EDA16E8((uint64_t)&v40, v20, v19);
    v23 = v41;
    v24 = v41;
    if (v41)
      goto LABEL_38;
    v25 = v20;
    while (1)
    {
      if ((v25 & 0xF) != 0)
        goto LABEL_35;
      v26 = *(unsigned __int8 *)(*(_QWORD *)(v25 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v26 > 0x39)
      {
LABEL_30:
        if (sub_22F115668(v25))
          v20 = v25;
        v25 = sub_22F115B7C(v25);
        if (!v25)
          goto LABEL_37;
      }
      else
      {
        if (v26 == 24)
          goto LABEL_36;
        if (v26 == 26)
        {
          if ((*(_BYTE *)(v25 + 23) & 0x10) != 0)
          {
LABEL_36:
            v20 = v25;
LABEL_37:
            v23 = sub_22F115668(v20);
            v24 = sub_22F1167E8(&v36);
LABEL_38:
            v39 = v23 | (v24 << 32);
            if (v23 && (_DWORD)v24)
            {
              v30 = a2;
              if ((a6 & 1) == 0)
                sub_22F0D5A50((uint64_t)v12);
              sub_22E8FCA40(a1, v30, 0xCAAu, 0, (uint64_t)&v36);
              v40 = *(_QWORD *)(a3 + 48);
              sub_22E8901B8((uint64_t)&v36, &v40);
              sub_22E903BEC((unsigned int *)&v36);
              sub_22E8FCA40(a1, *(_DWORD *)(a3 + 24), 0x17E2u, 0, (uint64_t)&v36);
              v31 = v39;
              if (!a6)
                v31 = 0;
              v40 = v31;
              v32 = (uint64_t *)sub_22E8906A0((uint64_t)&v36, &v40);
              goto LABEL_51;
            }
LABEL_40:
            if (++v9 == v10)
              return 0;
            goto LABEL_3;
          }
        }
        else if (((1 << v26) & 0x20000000200003CLL) == 0)
        {
          goto LABEL_30;
        }
LABEL_35:
        v25 = sub_22F115B7C(v25);
      }
    }
  }
  if (*(_DWORD *)v11 != 8
    || (sub_22ED6B3F0(a1, v34, a3, *(_QWORD *)(v11 + 8), *(unsigned int *)(v11 + 4), a6) & 1) == 0)
  {
    goto LABEL_40;
  }
  return 1;
}

unint64_t sub_22ED6B778(_QWORD *a1, uint64_t *a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int **a10, unint64_t a11, uint64_t a12)
{
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int *v21;
  unsigned int v22;
  int *v23;
  int *v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  void *v31;
  uint64_t v32;
  uint64_t *v33;
  unsigned int *v34;
  uint64_t v35;
  int v36;
  _QWORD *v37;
  int v38;
  unsigned int *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int v44;
  void *v45;
  int *v46;
  int v47;
  int v48;
  int *v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  int v59;
  int v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  int v107;
  int v108;
  int v109;
  uint64_t *v110;
  uint64_t *v111;
  const void *v112;
  uint64_t v113;
  int *v114;
  int v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v121;
  unsigned int v123[24];
  unint64_t v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  char v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  unint64_t v133;
  uint64_t v134;
  __int128 __dst;
  _OWORD v136[2];
  _BYTE v137[102];
  __int16 v138;
  int *v139;
  uint64_t v140;
  void *v141;
  _BYTE v142[12];
  char v143;
  void *__p;
  uint64_t v145;
  uint64_t v146;
  char v147;
  void *v148;
  uint64_t v149;
  _QWORD v150[36];

  v150[33] = *MEMORY[0x24BDAC8D0];
  if (a11)
  {
    v17 = a7;
    v18 = (uint64_t)a10;
    v19 = **a10;
  }
  else
  {
    v18 = (uint64_t)a10;
    v17 = a7;
    v19 = a5;
  }
  v20 = *(_DWORD *)(a8 + 4);
  v118 = *(unsigned int *)(a8 + 36);
  v119 = *(unsigned int *)(a8 + 40);
  v140 = *(_QWORD *)(a8 + 24);
  v139 = 0;
  v21 = (int *)sub_22F0F08CC(&v140);
  if (!v21 || (v21[7] & 0x7F) != 0x1C)
  {
    sub_22E8FCA40(a1, v20, 0xFDAu, 0, (uint64_t)&v148);
    v27 = sub_22F0F08CC(&v140);
    if (v27)
      v28 = (*(_DWORD *)(v27 + 28) & 0x7F) == 32;
    else
      v28 = 0;
    LOBYTE(v141) = v28;
    sub_22E894E38((uint64_t)&v148, (unsigned __int8 *)&v141);
LABEL_17:
    sub_22E903BEC((unsigned int *)&v148);
    return 0;
  }
  v117 = a6;
  v139 = v21;
  v138 = 0;
  v22 = a5;
  v23 = sub_22ED5F458(a1, a5, v20, v17, a8, v18, a11, a4 == 3, (_BYTE *)&v138 + 1, &v138, 0);
  if ((_BYTE)v138)
    return 0;
  v112 = (const void *)v18;
  v113 = v17;
  v114 = v23;
  if (!v23)
  {
    v107 = 0;
    v116 = v20;
    v34 = (unsigned int *)a1;
    goto LABEL_52;
  }
  v24 = v23;
  if ((sub_22ED5CF60(a1, a2, v23) & 1) != 0)
    return 0;
  v116 = v20;
  v25 = v24[3];
  v26 = v25 & 0x1FFFFFFF;
  if ((v25 & 0x1FFFFFFF) != 0)
  {
    if (a4 != 3)
    {
      v110 = a2;
      v108 = v19;
      v115 = a4;
      v33 = (uint64_t *)(v24 + 4);
      v34 = (unsigned int *)a1;
      while (1)
      {
        v35 = *v33;
        v36 = *(_DWORD *)(*v33 + 28) & 0x7F;
        if (!*v33 || v36 != 38)
          break;
        v37 = (_QWORD *)(v35 + 72);
        if (*(_QWORD *)(v35 + 72) >= 8uLL)
        {
          v38 = sub_22EFEB0E0(*v33);
          sub_22E8FCA40(a1, v38, 0xC81u, 0, (uint64_t)v137);
          v39 = (unsigned int *)v137;
LABEL_30:
          sub_22E903BEC(v39);
          *v37 = 0;
        }
LABEL_45:
        ++v33;
        if (!--v26)
        {
          v107 = 1;
          a4 = v115;
          v22 = a5;
          v19 = v108;
          a2 = v110;
          goto LABEL_52;
        }
      }
      if (v35 && v36 == 59)
      {
        v37 = (_QWORD *)(v35 + 72);
        v40 = *(_QWORD *)(v35 + 72) & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_QWORD *)(v35 + 72) & 3) != 1)
          v40 = 0;
        if (!v40)
          v40 = *v33;
        v41 = *(_QWORD *)(v40 + 72);
        v42 = v41 & 0xFFFFFFFFFFFFFFFCLL;
        if ((v41 & 3) == 2 && v42 != 0)
          v42 = *(_QWORD *)(v42 + 8);
        if (!v42)
          goto LABEL_45;
        sub_22F3B8B68(*v33);
        sub_22E8FCA40(a1, v44, 0xC81u, 0, (uint64_t)&v148);
        sub_22F0D4E74(v42);
      }
      else
      {
        v37 = (_QWORD *)(v35 + 72);
        if (*(_QWORD *)(v35 + 72) < 8uLL)
          goto LABEL_45;
        v46 = sub_22F259350(*v33);
        if ((*v46 - 5) > 1)
        {
          sub_22F0EFE08((uint64_t)v46);
          v47 = v48;
        }
        else
        {
          v47 = *(_DWORD *)((*((_QWORD *)v46 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 16);
        }
        sub_22E8FCA40(a1, v47, 0xC81u, 0, (uint64_t)&v148);
        v49 = sub_22F259350(v35);
        sub_22F0EFE08((uint64_t)v49);
      }
      v141 = v45;
      sub_22E8906A0((uint64_t)&v148, (uint64_t *)&v141);
      v39 = (unsigned int *)&v148;
      goto LABEL_30;
    }
    sub_22E8FCA40(a1, a5, 0x11A5u, 0, (uint64_t)&v148);
    v141 = (void *)__PAIR64__(v119, v118);
    sub_22E8906A0((uint64_t)&v148, (uint64_t *)&v141);
    goto LABEL_17;
  }
  if (a4 == 3)
  {
    v34 = (unsigned int *)a1;
    sub_22E8FCA40(a1, a5, 0x12F6u, 0, (uint64_t)&v148);
    v31 = (void *)(*v114 | ((unint64_t)v114[2] << 32));
    v143 = 0;
    *(_QWORD *)&v142[4] = 0;
    v146 = 0;
    __p = 0;
    v145 = 0;
    v147 = 0;
    v141 = v31;
    v142[0] = 1;
    v32 = sub_22E890748((uint64_t)&v148, &v141);
    *(_QWORD *)&__dst = __PAIR64__(v119, v118);
    sub_22E8906A0(v32, (uint64_t *)&__dst);
    if (SHIBYTE(v146) < 0)
      operator delete(__p);
    sub_22E903BEC((unsigned int *)&v148);
    v107 = 0;
  }
  else
  {
    v107 = 0;
    v34 = (unsigned int *)a1;
  }
LABEL_52:
  v111 = a2;
  v109 = v19;
  v50 = dword_22F497FF8[a3 - 23];
  v51 = *((_QWORD *)v139 + 5);
  if ((v51 & 7) != 0)
    v52 = 0;
  else
    v52 = v51 & 0xFFFFFFFFFFFFFFF8;
  if ((sub_22EA33594((uint64_t)v34, *((_QWORD *)v139 + 6), dword_22F497FF8[a3 - 23], a4 == 2, v22, v52) & 1) == 0)
  {
    sub_22E8FCA40(v34, v22, 0x13E0u, 0, (uint64_t)&v148);
    sub_22E890024((uint64_t)&v148, (uint64_t *)&v139);
    __asm { BR              X11 }
  }
  v53 = a4;
  v148 = v150;
  v54 = *(_QWORD *)(a8 + 36);
  v149 = 0x800000000;
  v150[32] = v54;
  v55 = *(unsigned int *)(a8 + 44);
  v141 = (void *)(a8 + 56);
  *(_QWORD *)v142 = v55;
  sub_22ED58288((uint64_t)v34, (uint64_t)&v141, (uint64_t)&v148);
  if ((_DWORD)v149)
  {
    v56 = 0;
    v57 = 32 * v149;
    while (1)
    {
      v58 = *(_OWORD *)((char *)v148 + v56 + 16);
      v136[0] = *(_OWORD *)((char *)v148 + v56);
      v136[1] = v58;
      if ((sub_22EE734A8((uint64_t)v34, (uint64_t)v136, 15) & 1) != 0)
        break;
      v56 += 32;
      if (v57 == v56)
        goto LABEL_61;
    }
    v29 = 0;
    goto LABEL_88;
  }
LABEL_61:
  v141 = &v142[8];
  *(_QWORD *)v142 = 0x400000000;
  if ((sub_22ED61988(v34, v139, v116, (uint64_t)&v148, 0, (uint64_t)&v141, 1, 0) & 1) != 0)
  {
    v29 = 0;
    goto LABEL_86;
  }
  v59 = v53;
  v60 = v22;
  if (v107)
  {
    if ((sub_22ED65198(v34, v116, (uint64_t)v139, v149, (uint64_t)v141) & 1) != 0)
    {
LABEL_74:
      v29 = 0;
      goto LABEL_86;
    }
    if ((sub_22F0F0A4C(&v140) & 4) != 0)
      goto LABEL_144;
    if (*(_DWORD *)v142)
    {
      v61 = (char *)v141;
      v62 = 24 * *(unsigned int *)v142;
      while ((sub_22F0EEB00((uint64_t)v61) & 4) == 0)
      {
        v61 += 24;
        v62 -= 24;
        if (!v62)
          goto LABEL_70;
      }
LABEL_144:
      v134 = 0;
      v63 = sub_22F3B863C((unint64_t)v139, (uint64_t)v141, *(unsigned int *)v142, (uint64_t)v114, (uint64_t)&v134);
      v64 = 1;
      goto LABEL_72;
    }
LABEL_70:
    sub_22E8FCA40(v34, v116, 0x11A2u, 0, (uint64_t)&__dst);
    v125 = *((_QWORD *)v139 + 5);
    sub_22E894538((uint64_t)&__dst, &v125);
    sub_22E903BEC((unsigned int *)&__dst);
  }
  v134 = 0;
  v63 = sub_22EFE9F28((unint64_t)v139, (uint64_t)v141, *(unsigned int *)v142, (uint64_t)&v134);
  v64 = 0;
LABEL_72:
  v65 = v117;
  if (v59 != 3 && sub_22ED65268((uint64_t)v34, (uint64_t)v139, v116, v64))
    goto LABEL_74;
  v66 = a9;
  v67 = *((_QWORD *)v34 + 11);
  if (!v64)
  {
    v121 = 0;
    v78 = *((_QWORD *)v139 + 2);
    v79 = (_QWORD *)(v78 & 0xFFFFFFFFFFFFFFF8);
    if ((v78 & 4) != 0)
      v79 = (_QWORD *)*v79;
    v29 = sub_22EFEB760(v67, v50, (uint64_t)v79, v60, v116, (uint64_t)v139, (__int128 *)v141, *(unsigned int *)v142, v63);
    v133 = v29;
    if (*(_QWORD *)(v113 + 8))
    {
      v102 = sub_22F0ABC50((uint64_t *)(v113 + 8), *((_QWORD *)v34 + 11));
      sub_22F3AC930(v29, v102, v103);
      if (!a11)
      {
LABEL_95:
        if (!v63)
          sub_22EFEA2C8((unint64_t)v139, v29, v134);
        if (sub_22EFC7ADC(*((_QWORD *)v34 + 27)))
        {
          sub_22EF65464(*((_QWORD *)v34 + 11), &v140);
          v81 = sub_22EF6512C(*((_QWORD *)v34 + 11), v80, (uint64_t)v141, *(unsigned int *)v142, 0);
        }
        else
        {
          v82 = *(_QWORD *)(v29 + 48);
          if (v82)
          {
            v83 = v82 & 0xFFFFFFFFFFFFFFF0;
            if (!v63)
              goto LABEL_111;
            goto LABEL_104;
          }
          v81 = sub_22EF6462C(*((_QWORD *)v34 + 11), v29);
        }
        v83 = v81;
        if (!v63)
          goto LABEL_111;
        goto LABEL_104;
      }
    }
    else if (!a11)
    {
      goto LABEL_95;
    }
    sub_22EFC35F8(v29, *((_QWORD *)v34 + 11), v112, a11);
    goto LABEL_95;
  }
  sub_22EF65464(v67, &v140);
  v69 = sub_22EF6512C(*((_QWORD *)v34 + 11), v68, (uint64_t)v141, *(unsigned int *)v142, 0);
  v70 = sub_22EFEAD74((uint64_t)v139);
  v72 = *(_QWORD *)((v70 & 0xFFFFFFFFFFFFFFF0) + 8) | v70 & 7;
  v73 = *((_QWORD *)v34 + 11);
  if ((*(_QWORD *)((v69 & 0xFFFFFFFFFFFFFFF0) + 8) | v69 & 7) == v72
    && ((*(_BYTE *)(*(_QWORD *)(v73 + 2000) + 1) & 0x10) == 0 || !(v114[3] >> 30)))
  {
    sub_22E8FCA40(v34, v116, 0x11A1u, 0, (uint64_t)&__dst);
    LODWORD(v133) = 0;
    v74 = sub_22E8900C4((uint64_t)&__dst, (int *)&v133);
    LOBYTE(v124) = v59 == 2;
    v75 = sub_22E894E38(v74, (unsigned __int8 *)&v124);
    v128 = 0;
    v127 = 0;
    v130 = 0;
    v131 = 0;
    v129 = 0;
    v132 = 0;
    v125 = v118 | (v119 << 32);
    v126 = 1;
    sub_22E890748(v75, &v125);
    if (SHIBYTE(v131) < 0)
      operator delete(v129);
    sub_22E903BEC((unsigned int *)&__dst);
    v76 = *((_QWORD *)v139 + 5);
    if ((v76 & 7) != 0)
      v77 = 0;
    else
      v77 = v76 & 0xFFFFFFFFFFFFFFF8;
    v29 = sub_22ED5BEC0((unint64_t)v34, v111, a3, v59, v60, v113, v77, v116, a9, v114, 3, v106, 0, 0, 0, 0, (int)a11 - 1, v112, 0);
    goto LABEL_86;
  }
  v121 = v64;
  v97 = *((_QWORD *)v139 + 2);
  v98 = (_QWORD *)(v97 & 0xFFFFFFFFFFFFFFF8);
  if ((v97 & 4) != 0)
    v98 = (_QWORD *)*v98;
  v29 = sub_22F3B8F90(v73, v50, (uint64_t)v98, v60, v116, (uint64_t)v114, (uint64_t)v139, v71, (__int128 *)v141, *(unsigned int *)v142, (uint64_t)&v148, v69, v63);
  if (*(_QWORD *)(v113 + 8))
  {
    v104 = sub_22F0ABC50((uint64_t *)(v113 + 8), *((_QWORD *)v34 + 11));
    sub_22F3AC930(v29, v104, v105);
    if (a11 >= 2)
    {
      if (*(_QWORD *)(v113 + 8))
        sub_22EFC35F8(v29, *((_QWORD *)v34 + 11), v112, a11 - 1);
    }
  }
  if (v63)
  {
    v133 = v29;
    v99 = *(_QWORD *)(v63 + 104);
    v100 = *(_QWORD *)(v99 + 200);
    v83 = v69;
    if (v100 >= 8)
      *(_QWORD *)(v99 + 200) = v100 | 4;
  }
  else
  {
    sub_22EFEA8CC((unint64_t)v139, v29, v134);
    v133 = v29;
    v83 = v69;
  }
  sub_22ED63B48(v34, v29);
  v66 = a9;
  v65 = v117;
  if (v63)
  {
LABEL_104:
    if (*(_DWORD *)(v63 + 176))
    {
      v84 = v66;
      v85 = v63;
      do
      {
        if (sub_22ED65610(v85) == 2)
        {
          v29 = v133;
          v66 = v84;
          goto LABEL_111;
        }
        v85 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v85 + 48))(v85);
      }
      while (v85);
      v125 = __PAIR64__(v119, v116);
      sub_22E8FCA40(v34, v116, 0x1269u, 0, (uint64_t)&__dst);
      v86 = *(_QWORD *)(v133 + 48);
      if (v86)
        v87 = v86 & 0xFFFFFFFFFFFFFFF0;
      else
        v87 = sub_22EF6462C(*((_QWORD *)v34 + 11), v133);
      v124 = v87;
      v101 = sub_22E8901B8((uint64_t)&__dst, (uint64_t *)&v124);
      sub_22E8906A0(v101, &v125);
      sub_22E903BEC((unsigned int *)&__dst);
      sub_22E8FCA40(v34, *(_DWORD *)(v63 + 176), 0x1638u, 0, (uint64_t)&__dst);
      LOBYTE(v124) = sub_22EFD5760(v63) != 1;
      sub_22E894E38((uint64_t)&__dst, (unsigned __int8 *)&v124);
      sub_22E903BEC((unsigned int *)&__dst);
      v29 = 0;
      goto LABEL_86;
    }
  }
LABEL_111:
  if (v59 != 3)
  {
    *(_BYTE *)(v29 + 180) = *(_BYTE *)(v29 + 180) & 0xF8 | 2;
    if (v59 == 2)
    {
      v88 = v66;
      v89 = *(_QWORD *)(v29 + 128);
      if (!v89)
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v29 + 104) + 96), *(_QWORD *)(v29 + 104));
        v89 = *(_QWORD *)(v29 + 128);
        if (!v89)
        {
          v91 = a1;
          goto LABEL_153;
        }
      }
      v90 = *(_QWORD *)(v89 + 88);
      v125 = 0;
      if (a12 && v90)
      {
        v91 = a1;
        if ((sub_22EE8B858((uint64_t)a1, v90, (unint64_t *)&v125, 0) & 1) == 0)
        {
          *(_BYTE *)a12 = 1;
          *(_QWORD *)(a12 + 8) = v90;
          sub_22EC61DA0((uint64_t)a1, v125);
LABEL_153:
          sub_22EA63DD8(v91, (uint64_t)v111, v29, v88, 1);
          sub_22E9114FC(v91, v29);
          if (!a12 || !*(_BYTE *)a12)
          {
            sub_22E90D4A4((uint64_t)a1, v29);
            sub_22E90D614((uint64_t)a1, v29);
          }
          goto LABEL_120;
        }
      }
      else
      {
        v91 = a1;
        if (!v90)
          goto LABEL_153;
      }
      v124 = __PAIR64__(v119, v116);
      sub_22E8FCA40(v91, v116, 0x1214u, 0, (uint64_t)&__dst);
      v96 = sub_22E890024((uint64_t)&__dst, (uint64_t *)&v133);
      sub_22E8906A0(v96, (uint64_t *)&v124);
      sub_22E903BEC((unsigned int *)&__dst);
      sub_22E8FCA40(v91, *(_DWORD *)(v90 + 24), 0x6Du, 0, (uint64_t)v123);
      sub_22E903BEC(v123);
      sub_22EFC77E8(v133, 1);
      v29 = 0;
      goto LABEL_86;
    }
  }
  sub_22EA63DD8(a1, (uint64_t)v111, v29, v66, 1);
  sub_22E9114FC(a1, v29);
LABEL_120:
  if ((_DWORD)v65)
  {
    sub_22E8FCA40(a1, *(_DWORD *)(v29 + 24), 0xF6Bu, 0, (uint64_t)&__dst);
    LODWORD(v124) = v121;
    v92 = sub_22E8900C4((uint64_t)&__dst, (int *)&v124);
    v128 = 0;
    v127 = 0;
    v130 = 0;
    v131 = 0;
    v129 = 0;
    v132 = 0;
    v125 = v65 | (unint64_t)(v65 << 32);
    v126 = 1;
    sub_22E890748(v92, &v125);
    if (SHIBYTE(v131) < 0)
      operator delete(v129);
    sub_22E903BEC((unsigned int *)&__dst);
  }
  v93 = sub_22EF64F48(a1[11], v140, v116, (uint64_t)&v148, v83);
  if (v59 == 3)
  {
    v94 = a1 + 27;
    sub_22EFC80C4(v29, a1[27]);
    v95 = sub_22EFD9CC8(a1[11], a1[27], v116, v93 | 4, v60, 0, 0);
    *(_DWORD *)(v95 + 28) &= 0xFFFF9FFF;
  }
  else
  {
    sub_22ED6C768(v29, v93);
    sub_22ED6C8B0(v29, v109);
    v94 = a1 + 27;
    sub_22EFC80C4(v29, a1[27]);
    if (v59 == 2)
    {
      if (a12 && *(_BYTE *)a12)
      {
        sub_22EFCCFA0(*v94, v29);
        goto LABEL_132;
      }
      sub_22EFC3340(v29);
      v95 = v29;
    }
    else
    {
      v95 = v29;
    }
  }
  sub_22EFCCFA0(*v94, v95);
  if (a12)
  {
LABEL_132:
    if (*(_BYTE *)a12)
      v29 = *(_QWORD *)(a12 + 8);
  }
LABEL_86:
  if (v141 != &v142[8])
    free(v141);
LABEL_88:
  if (v148 != v150)
    free(v148);
  return v29;
}

void sub_22ED6C740()
{
  JUMPOUT(0x22ED6BCB0);
}

void sub_22ED6C754()
{
  JUMPOUT(0x22ED6BCB0);
}

_QWORD *sub_22ED6C768(unint64_t a1, uint64_t a2)
{
  _QWORD *result;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int i;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  result = *(_QWORD **)(a1 + 160);
  if (!result)
  {
    v5 = a1;
    if ((*(_DWORD *)(a1 + 28) & 0x7F) != 0x53)
    {
      v6 = *(_QWORD *)(a1 + 16);
      v7 = v6 & 0xFFFFFFFFFFFFFFF8;
      if ((v6 & 4) != 0)
        v7 = *(_QWORD *)v7;
      for (i = *(_WORD *)(v7 + 8) & 0x7F; i != 83; i = *(_WORD *)(v7 + 8) & 0x7F)
      {
        v9 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v9 = -56;
            goto LABEL_10;
          }
          if (i == 81)
            goto LABEL_10;
        }
        else
        {
          if (i <= 0x18)
          {
            if (i == 16)
              goto LABEL_9;
            if (((1 << i) & 0x1066) != 0)
              goto LABEL_10;
            if (i == 24)
            {
LABEL_9:
              v9 = -48;
              goto LABEL_10;
            }
          }
          if (i == 70)
          {
            v9 = -64;
            goto LABEL_10;
          }
        }
        v11 = i - 52;
        if ((i - 33) >= 5)
          v12 = -48;
        else
          v12 = -64;
        if (v11 >= 6)
          v9 = v12;
        else
          v9 = -72;
LABEL_10:
        v10 = *(_QWORD *)(v7 + v9 + 16);
        v7 = v10 & 0xFFFFFFFFFFFFFFF8;
        if ((v10 & 4) != 0)
          v7 = *(_QWORD *)v7;
      }
      v5 = v7 - 40;
    }
    result = (_QWORD *)sub_22E3CD3D4(*(_QWORD *)(v5 + 88) + 2032, 16, 3);
    *result = 0;
    result[1] = 0;
    *(_QWORD *)(a1 + 160) = result;
  }
  *result = a2;
  return result;
}

uint64_t sub_22ED6C8B0(unint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;

  result = *(_QWORD *)(a1 + 160);
  if (!result)
  {
    v5 = a2;
    v4 = sub_22EFC72E8(a1);
    result = sub_22E3CD3D4(v4 + 2032, 16, 3);
    a2 = v5;
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(a1 + 160) = result;
  }
  *(_DWORD *)(result + 12) = a2;
  return result;
}

void sub_22ED6C90C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  *a7 = 0;
  __asm { BR              X10 }
}

uint64_t sub_22ED6C968()
{
  int v0;

  return ((uint64_t (*)(_QWORD))((char *)sub_22ED6C988 + 4 * byte_22F496FEF[v0]))(0);
}

uint64_t sub_22ED6C988()
{
  _QWORD *v0;
  int v1;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t result;

  if (v1)
  {
    if (v2)
    {
      while (sub_22ED65610(v2) != 2)
      {
        v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
        if (!v2)
          goto LABEL_5;
      }
      return 0;
    }
    else
    {
LABEL_5:
      sub_22E8FCA40(v0, v4, 0x1269u, 0, v5 - 168);
      sub_22E890024(v5 - 168, (uint64_t *)(v5 - 72));
      sub_22E903BEC((unsigned int *)(v5 - 168));
      sub_22E8FCA40(v0, v1, 0x1638u, 0, v5 - 168);
      *(_BYTE *)(v5 - 169) = v3 != 1;
      sub_22E894E38(v5 - 168, (unsigned __int8 *)(v5 - 169));
      sub_22E903BEC((unsigned int *)(v5 - 168));
      return 1;
    }
  }
  else
  {
    sub_22EA40A3C(v2);
    sub_22EAB38AC(v2);
    result = 0;
    if (v2)
    {
      if ((*(_DWORD *)(v2 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
      {
        result = 0;
        *(_QWORD *)(v2 + 80) &= 0xFFFFFFFFFFFCFFFFLL;
      }
    }
  }
  return result;
}

uint64_t sub_22ED6CC48(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t i;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unsigned __int8 *v40;
  unsigned __int8 **v41;
  unsigned __int8 *v42;
  uint64_t v43;
  char v46;
  unsigned int v47[4];
  uint64_t v48;
  unsigned __int8 *v49;
  uint64_t v50;
  char v51;
  unsigned int v52;
  char v53;
  unsigned int v54[24];
  uint64_t v55;
  void *v56;
  uint64_t v57;
  _QWORD v58[18];

  v58[16] = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a2 + 16);
  v8 = (_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF8);
  if ((v7 & 4) != 0)
    v8 = (_QWORD *)*v8;
  v9 = sub_22EFCBB30((unint64_t)v8);
  v10 = *(uint64_t **)(a4 + 8);
  v56 = v58;
  v57 = 0x800000000;
  v11 = *(unsigned int *)(a4 + 16);
  if (!(_DWORD)v11)
    goto LABEL_28;
  v12 = v9;
  LODWORD(v13) = *(_DWORD *)(a4 + 16);
  v14 = 1;
  v15 = (uint64_t)&v10[v11];
LABEL_5:
  v46 = v14;
  v16 = v10;
  do
  {
    v17 = *v16++;
    v18 = v17 & 0xFFFFFFFFFFFFFFFCLL;
    v19 = *(_DWORD *)((v17 & 0xFFFFFFFFFFFFFFFCLL) + 28);
    if ((v19 & 0x7Fu) <= 0x2F && ((1 << (v19 & 0x7F)) & 0xC00000060000) != 0)
    {
      v18 = sub_22EFBAEA4(v18);
      v19 = *(_DWORD *)(v18 + 28);
    }
    if ((v19 & 0x7F) != 0x1D)
    {
      v25 = *(_QWORD *)(v15 - 8);
      *(_DWORD *)(a4 + 16) = v13 - 1;
      *v10 = v25;
      v26 = v57;
      if (v57 >= (unint64_t)HIDWORD(v57))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v26 = v57;
      }
      v27 = (char *)v56 + 16 * v26;
      *(_QWORD *)v27 = 0;
LABEL_23:
      v14 = 0;
      *((_QWORD *)v27 + 1) = v18;
      LODWORD(v57) = v57 + 1;
      v13 = *(unsigned int *)(a4 + 16);
      v15 = *(_QWORD *)(a4 + 8) + 8 * v13;
      if (v10 != (uint64_t *)v15)
        goto LABEL_5;
      goto LABEL_26;
    }
    v21 = *(_QWORD *)(v18 + 16);
    v22 = (_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF8);
    if ((v21 & 4) != 0)
      v22 = (_QWORD *)*v22;
    v23 = sub_22EFCBB30((unint64_t)v22);
    v24 = sub_22EFCE860(v12, v23);
    v13 = *(unsigned int *)(a4 + 16);
    v15 = *(_QWORD *)(a4 + 8) + 8 * v13;
    if (!v24)
    {
      v28 = *(_QWORD *)(v15 - 8);
      *(_DWORD *)(a4 + 16) = v13 - 1;
      *v10 = v28;
      v29 = v57;
      if (v57 >= (unint64_t)HIDWORD(v57))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v29 = v57;
      }
      v27 = (char *)v56 + 16 * v29;
      *(_QWORD *)v27 = 1;
      goto LABEL_23;
    }
    v10 = v16;
  }
  while (v16 != (uint64_t *)v15);
  if ((v46 & 1) != 0)
    goto LABEL_27;
LABEL_26:
  sub_22EA3DA00(a4);
  LODWORD(v13) = *(_DWORD *)(a4 + 16);
LABEL_27:
  if ((_DWORD)v13)
  {
    sub_22F3AC8C0(a2, a1[11], a4 + 8, a3);
    v43 = 0;
  }
  else
  {
LABEL_28:
    sub_22E8FCA40(a1, *(_DWORD *)(a2 + 24), 0xCA6u, 0, (uint64_t)v54);
    sub_22E903BEC(v54);
    if ((_DWORD)v57)
    {
      v30 = (int *)v56;
      for (i = 16 * v57; i; i -= 16)
      {
        sub_22E8FCA40(a1, *(_DWORD *)(*((_QWORD *)v30 + 1) + 24), 0x15B2u, 0, (uint64_t)v47);
        if (v51)
        {
          v32 = *v30;
          v33 = v49;
          if (!v49)
          {
            v33 = (unsigned __int8 *)sub_22E3B8AAC(v50);
            v49 = v33;
          }
          v33[*v33 + 1] = 2;
          v34 = v49;
        }
        else
        {
          if (!v53)
            goto LABEL_36;
          v36 = *(_QWORD *)v47;
          v37 = v48;
          if (v48)
            v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 32))(v48);
          v55 = v37;
          v38 = sub_22F2F1D6C((uint64_t *)(v36 + 12784), &v55);
          v39 = v38[1] + 32 * v52;
          v42 = *(unsigned __int8 **)(v39 + 8);
          v41 = (unsigned __int8 **)(v39 + 8);
          v40 = v42;
          v32 = *v30;
          if (!v42)
          {
            v40 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v41[1]);
            *v41 = v40;
          }
          v40[*v40 + 1] = 2;
          v34 = *v41;
        }
        v35 = *v34;
        *v34 = v35 + 1;
        *(_QWORD *)&v34[8 * v35 + 16] = v32;
LABEL_36:
        sub_22E903BEC(v47);
        v30 += 4;
      }
    }
    v43 = 1;
  }
  if (v56 != v58)
    free(v56);
  return v43;
}

uint64_t sub_22ED6CFD0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t i;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _BYTE *v32;
  unint64_t v33;
  char *v34;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  int *v49;
  void **v50;
  int v51;
  int v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  _QWORD *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char v74;
  _BYTE *v75;
  _BYTE *v76;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  int v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  unint64_t v86;
  int v87;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  int j;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  int v104;
  unint64_t v105;
  uint64_t v106;
  unsigned int *v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  int v111;
  unint64_t v112;
  _OWORD v113[3];
  _OWORD v114[3];
  __int128 v115;
  uint64_t v116;
  char *v117[2];
  _QWORD v118[17];
  int v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  int v123;
  void *v124;
  uint64_t v125;
  _QWORD v126[10];
  void *v127;
  uint64_t v128;
  _BYTE v129[104];
  void *v130;
  uint64_t v131;
  _BYTE v132[64];
  void *v133;
  unint64_t v134;
  int v135;
  uint64_t v136;
  _QWORD v137[289];
  void *v138;
  uint64_t v139;
  _BYTE v140[1024];
  int v141;
  char v142;
  _QWORD *v143;
  uint64_t v144;
  _QWORD v145[10];

  v0 = MEMORY[0x24BDAC7A8]();
  v104 = v2;
  v4 = v3;
  v6 = v5;
  v145[8] = *MEMORY[0x24BDAC8D0];
  v143 = v145;
  v144 = 0x800000000;
  v7 = *(_DWORD *)(v1 + 24);
  v138 = v140;
  v139 = 0x1000000000;
  v141 = v7;
  v142 = 0;
  v137[0] = 1;
  for (i = 1; i != 289; i += 36)
    v137[i] = -4096;
  v107 = (unsigned int *)v0;
  v108 = v1;
  v9 = *(_QWORD *)(v1 + 16);
  v10 = (_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF8);
  if ((v9 & 4) != 0)
    v10 = (_QWORD *)*v10;
  v11 = sub_22EFCBB30((unint64_t)v10);
  v112 = v11;
  v103 = v4;
  v12 = *(uint64_t **)(v4 + 8);
  v13 = *(unsigned int *)(v4 + 16);
  if ((_DWORD)v13)
  {
    v36 = v11;
    v37 = &v135;
    v38 = 8 * v13;
    v106 = v6;
    v105 = v11;
    do
    {
      v39 = *v12 & 0xFFFFFFFFFFFFFFFCLL;
      v40 = *(_DWORD *)(v39 + 28);
      if ((v40 & 0x7Fu) <= 0x2F && ((1 << (v40 & 0x7F)) & 0xC00000060000) != 0)
      {
        v39 = sub_22EFBAEA4(*v12 & 0xFFFFFFFFFFFFFFFCLL);
        v40 = *(_DWORD *)(v39 + 28);
      }
      if ((v40 & 0x7F) != 0x1D)
        goto LABEL_72;
      v42 = *(_QWORD *)(v39 + 16);
      v43 = (_QWORD *)(v42 & 0xFFFFFFFFFFFFFFF8);
      if ((v42 & 4) != 0)
        v43 = (_QWORD *)*v43;
      v44 = sub_22EFCBB30((unint64_t)v43);
      if (!sub_22EFCE860(v36, v44))
        goto LABEL_72;
      v45 = *(_QWORD *)(v108 + 48);
      if ((*(_BYTE *)(v108 + 83) & 0xC0) != 0)
      {
        v46 = *(_QWORD *)(v39 + 48);
        v47 = v46 && (*(_DWORD *)(v46 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFC;
        if (v47 && sub_22E8FB7BC(v46))
        {
          v48 = *(_QWORD *)(v45 & 0xFFFFFFFFFFFFFFF0);
          if (!v48 || *(_BYTE *)(v48 + 16) != 26)
            v48 = sub_22F10CF48(v48);
          sub_22E4913B4(v48, (uint64_t)&v115);
          DWORD1(v115) |= 1u;
          v45 = sub_22EF63D8C(*((_QWORD *)v107 + 11), *(_QWORD *)(v48 + 24), (uint64_t *)(v48 + 40), (unsigned __int16)(*(_QWORD *)(v48 + 16) >> 38), &v115, 0);
        }
      }
      v49 = v37;
      v133 = v37;
      v134 = 0x800000000;
      v136 = 0;
      if (v6)
      {
        v50 = &v133;
        sub_22EDA43D4((uint64_t)&v133, v6);
        v136 = *(_QWORD *)(v6 + 272);
      }
      else
      {
        v50 = 0;
      }
      *(_QWORD *)&v115 = 0;
      DWORD2(v115) = v141;
      BYTE12(v115) = 0;
      v116 = 0;
      v117[0] = (char *)v118;
      v117[1] = (char *)0x400000000;
      v118[16] = 0;
      v119 = 0;
      v120 = 0;
      v121 = 0;
      v122 = 0;
      v123 = 0;
      v124 = v126;
      v125 = 0x800000000;
      v126[8] = 0;
      v126[9] = 0;
      v127 = v129;
      v128 = 0x400000000;
      v129[96] = 0;
      v130 = v132;
      v131 = 0x400000000;
      v109 = 0;
      v51 = sub_22EDC3E48(v107, *(_QWORD *)(v39 + 72), v50, v45, &v109, &v115, 0);
      if (v51)
      {
        v52 = v51;
        sub_22ED23640((uint64_t)&v138);
        v53 = (char *)v138 + 64 * (unint64_t)v139;
        v54 = *v12;
        v55 = *(_QWORD *)(v39 + 48);
        sub_22ECF93D4(*((_QWORD *)v107 + 11), v52, (unint64_t)&v115, (uint64_t)v114);
        *((_QWORD *)v53 - 8) = v54;
        *((_QWORD *)v53 - 7) = v55;
        v36 = v105;
        v56 = v114[0];
        v57 = v114[2];
        *((_OWORD *)v53 - 2) = v114[1];
        *((_OWORD *)v53 - 1) = v57;
        *((_OWORD *)v53 - 3) = v56;
      }
      else
      {
        if ((*(_BYTE *)(*((_QWORD *)v107 + 9) + 68) & 0x20) == 0
          || (v58 = sub_22E9FDFC4((uint64_t)v107, v109, 1), v58 == sub_22E9FDFC4((uint64_t)v107, v108, 1)))
        {
          v6 = v106;
          if (v106)
          {
            v67 = sub_22F346E00(v137, (uint64_t *)&v109);
            sub_22ED7355C((uint64_t)(v67 + 1), (uint64_t)&v133);
            v67[35] = v136;
          }
          v59 = v109;
          v60 = *v12;
          v61 = v144;
          if (v144 >= (unint64_t)HIDWORD(v144))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v61 = v144;
          }
          v143[v61] = v60 & 3 | v59;
          LODWORD(v144) = v144 + 1;
          goto LABEL_64;
        }
        sub_22ED23640((uint64_t)&v138);
        v62 = (char *)v138 + 64 * (unint64_t)v139;
        v63 = *v12;
        v64 = *(_QWORD *)(v39 + 48);
        sub_22ECF93D4(*((_QWORD *)v107 + 11), 17, (unint64_t)&v115, (uint64_t)v113);
        *((_QWORD *)v62 - 8) = v63;
        *((_QWORD *)v62 - 7) = v64;
        v36 = v105;
        v65 = v113[0];
        v66 = v113[2];
        *((_OWORD *)v62 - 2) = v113[1];
        *((_OWORD *)v62 - 1) = v66;
        *((_OWORD *)v62 - 3) = v65;
      }
      v6 = v106;
LABEL_64:
      v37 = v49;
      if (v130 != v132)
        free(v130);
      if (v127 != v129)
        free(v127);
      if (v124 != v126)
        free(v124);
      sub_22E89277C(v117);
      if (v133 != v49)
        free(v133);
LABEL_72:
      ++v12;
      v38 -= 8;
    }
    while (v38);
  }
  if (v104 && !(_DWORD)v144)
  {
    sub_22E8FCA40(v107, *(_DWORD *)(v108 + 24), 0x1204u, 0, (uint64_t)&v115);
    v133 = *(void **)(v108 + 40);
    v14 = sub_22E894538((uint64_t)&v115, (uint64_t *)&v133);
    sub_22E894FB4(v14, (uint64_t *)&v112);
    sub_22E903BEC((unsigned int *)&v115);
    v15 = *(unsigned int *)(v103 + 16);
    if ((_DWORD)v15)
    {
      v84 = *(_QWORD **)(v103 + 8);
      v85 = 8 * v15;
      do
      {
        v86 = *v84 & 0xFFFFFFFFFFFFFFFCLL;
        v87 = *(_DWORD *)(v86 + 28);
        if ((v87 & 0x7Fu) > 0x2F || ((1 << (v87 & 0x7F)) & 0xC00000060000) == 0)
        {
          v89 = *v84 & 0xFFFFFFFFFFFFFFFCLL;
        }
        else
        {
          v89 = sub_22EFBAEA4(*v84 & 0xFFFFFFFFFFFFFFFCLL);
          v87 = *(_DWORD *)(v89 + 28);
        }
        if ((v87 & 0x7Eu) - 58 >= 0xFFFFFFFA)
          sub_22ED113EC(v107, v86, v89, 0, *(_QWORD *)(v108 + 48), 0);
        ++v84;
        v85 -= 8;
      }
      while (v85);
    }
    sub_22ED13154((uint64_t *)&v138, (uint64_t)v107, *(_DWORD *)(v108 + 24));
LABEL_20:
    v31 = 1;
    goto LABEL_21;
  }
  v16 = v143;
  v17 = &v143[v144];
  v18 = *(_DWORD *)(v108 + 24);
  v19 = *((_QWORD *)v107 + 11) + 2128;
  *(_QWORD *)&v115 = 0;
  *((_QWORD *)&v115 + 1) = v19;
  LODWORD(v116) = 3522;
  v20 = *(_QWORD *)(v108 + 40);
  *(_QWORD *)&v115 = sub_22E3B8AAC(v19);
  *(_BYTE *)(v115 + *(unsigned __int8 *)v115 + 1) = 10;
  v21 = v115;
  v22 = *(unsigned __int8 *)v115;
  *(_BYTE *)v115 = v22 + 1;
  *(_QWORD *)(v21 + 8 * v22 + 16) = v20;
  v23 = *((_QWORD *)v107 + 11) + 2128;
  v133 = 0;
  v134 = v23;
  v135 = 3521;
  v24 = *(_QWORD *)(v108 + 40);
  v133 = (void *)sub_22E3B8AAC(v23);
  *((_BYTE *)v133 + *(unsigned __int8 *)v133 + 1) = 10;
  v25 = v133;
  v26 = *(unsigned __int8 *)v133;
  *(_BYTE *)v133 = v26 + 1;
  v25[v26 + 2] = v24;
  *((_BYTE *)v25 + (v26 + 1) + 1) = 2;
  v27 = v133;
  v28 = *(unsigned __int8 *)v133;
  *(_BYTE *)v133 = v28 + 1;
  v27[v28 + 2] = v6 != 0;
  v29 = *((_QWORD *)v107 + 11) + 2128;
  v109 = 0;
  v110 = v29;
  v111 = 5651;
  v30 = sub_22EDC9E74((uint64_t *)v107, v16, v17, (uint64_t *)&v138, v18, (uint64_t)&v115, (uint64_t)&v133, (uint64_t *)&v109, 1, 0);
  if (v109 && v110)
    sub_22E3BB10C(v110, v109);
  if (v133 && v134)
    sub_22E3BB10C(v134, (unint64_t)v133);
  if ((_QWORD)v115 && *((_QWORD *)&v115 + 1))
    sub_22E3BB10C(*((unint64_t *)&v115 + 1), v115);
  if (&v143[v144] == v30)
    goto LABEL_20;
  v68 = *v30 & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)&v115 = v68;
  if ((*(_QWORD *)(v68 + 144) & 6) == 4)
    v69 = *(_QWORD *)(v68 + 144) & 0xFFFFFFFFFFFFFFF8;
  else
    v69 = 0;
  if ((*(_BYTE *)(v69 + 16) & 6) == 0)
  {
    *(_DWORD *)(v68 + 24) = *(_DWORD *)(v108 + 24);
    v70 = *(_QWORD *)(v108 + 16);
    v71 = v70 & 0xFFFFFFFFFFFFFFF8;
    if ((v70 & 4) != 0)
      v71 = *(_QWORD *)(v71 + 8);
    sub_22EFC80C4(v68, v71);
    *(_QWORD *)(v68 + 80) = *(_QWORD *)(v68 + 80) & 0xFFFFFFFF3FFFFFFFLL | ((unint64_t)(HIBYTE(*(_DWORD *)(v108 + 80)) >> 6) << 30);
  }
  if ((*(_WORD *)(v108 + 30) & 0x180) == 0)
  {
    v72 = 0;
    if ((*(_QWORD *)(v68 + 144) & 6) == 4)
    {
      v73 = *(_QWORD *)(v68 + 144) & 0xFFFFFFFFFFFFFFF8;
      if (v73)
        v72 = *(_QWORD *)(v73 + 16) & 0xFFFFFFFFFFFFFFF8;
    }
    if (sub_22ED65268((uint64_t)v107, v72, *(_DWORD *)(v108 + 24), 0))
      goto LABEL_20;
    sub_22ED6C90C((uint64_t)v107, *(unsigned int *)(v108 + 24), 2, v68, ((*(_DWORD *)(v69 + 16) >> 1) & 3u) + 1, *(unsigned int *)(v69 + 40), &v133);
    if ((v74 & 1) != 0)
      goto LABEL_20;
    if ((*(_BYTE *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v68 + 32))(v68) + 82) & 0x40) != 0
      && (*(_QWORD *)(v69 + 16) & 6) != 2)
    {
      v75 = (_BYTE *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v68 + 32))(v68);
      if ((v75[29] & 8) == 0)
      {
        v76 = v75;
        while ((v75[29] & 8) == 0)
        {
          v75 = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v75 + 40))(v75);
          if (v75 == v76 || v75 == 0)
          {
            *(_QWORD *)(v68 + 80) &= ~0x400000uLL;
            break;
          }
        }
      }
    }
    *(_QWORD *)(v69 + 16) = *(_QWORD *)(v69 + 16) & 0xFFFFFFFFFFFFFFF9 | 2;
    sub_22EA0580C((uint64_t)v107, v68);
  }
  v78 = sub_22E3CD3D4(*((_QWORD *)v107 + 11) + 2032, 16, 3);
  v79 = *(_QWORD *)(v68 + 144) & 0xFFFFFFFFFFFFFFF8;
  v80 = *(_QWORD *)(v79 + 24);
  *(_QWORD *)v78 = *(_QWORD *)v80;
  *(_DWORD *)(v78 + 8) = *(_DWORD *)(v80 + 8);
  v81 = *(_QWORD *)(v79 + 16) & 0xFFFFFFFFFFFFFFF8;
  v82 = ((*(_DWORD *)(v69 + 16) >> 1) & 3) + 1;
  if (v6)
    v83 = sub_22F346E00(v137, (uint64_t *)&v115) + 1;
  else
    v83 = 0;
  v90 = v108;
  if (!v108 || (v91 = v108, (*(_DWORD *)(v108 + 28) & 0x7F) != 0x53))
  {
    v92 = *(_QWORD *)(v108 + 16);
    v93 = v92 & 0xFFFFFFFFFFFFFFF8;
    if ((v92 & 4) != 0)
      v93 = *(_QWORD *)v93;
    for (j = *(_WORD *)(v93 + 8) & 0x7F; j != 83; j = *(_WORD *)(v93 + 8) & 0x7F)
    {
      v95 = -40;
      if (j > 70)
      {
        if (j == 71)
        {
          v95 = -56;
        }
        else if (j != 81)
        {
          goto LABEL_129;
        }
      }
      else
      {
        if (j > 0x18)
          goto LABEL_128;
        if (j == 16)
          goto LABEL_122;
        if (((1 << j) & 0x1066) != 0)
          goto LABEL_135;
        if (j == 24)
        {
LABEL_122:
          v95 = -48;
        }
        else
        {
LABEL_128:
          if (j != 70)
          {
LABEL_129:
            v96 = j - 52;
            if ((j - 33) >= 5)
              v97 = -48;
            else
              v97 = -64;
            if (v96 >= 6)
              v95 = v97;
            else
              v95 = -72;
            goto LABEL_135;
          }
          v95 = -64;
        }
      }
LABEL_135:
      v98 = *(_QWORD *)(v93 + v95 + 16);
      v93 = v98 & 0xFFFFFFFFFFFFFFF8;
      if ((v98 & 4) != 0)
        v93 = *(_QWORD *)v93;
    }
    v91 = v93 - 40;
    v90 = v108;
  }
  sub_22EFC23A4(v90, *(_QWORD *)(v91 + 88), v81, v78, 0, v82, (uint64_t)v83, 0);
  if ((*(_BYTE *)(*((_QWORD *)v107 + 9) + 68) & 0x20) != 0)
    sub_22F31CA3C((uint64_t)v107, v90, *(_QWORD *)((*(_QWORD *)(v68 + 144) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFFFFFFFFFF8);
  v99 = 0;
  *(_DWORD *)v103 = 0;
  *(_DWORD *)(v103 + 16) = 0;
  v100 = *(_QWORD *)(v103 + 88);
  if (v100)
  {
    v101 = sub_22EC6CBD0(v100);
    MEMORY[0x2348A0E9C](v101, 0x10E0C409F09D3C3);
    v99 = *(_DWORD *)(v103 + 16);
  }
  *(_BYTE *)(v103 + 165) = 0;
  *(_QWORD *)(v103 + 88) = 0;
  *(_QWORD *)(v103 + 96) = 0;
  v102 = *(unsigned int *)(v68 + 28);
  if (v99 >= *(_DWORD *)(v103 + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v99 = *(_DWORD *)(v103 + 16);
  }
  v31 = 0;
  *(_QWORD *)(*(_QWORD *)(v103 + 8) + 8 * v99) = v68 | (v102 >> 13) & 3;
  ++*(_DWORD *)(v103 + 16);
  *(_DWORD *)v103 = 2;
LABEL_21:
  sub_22F346DB8((uint64_t)v137);
  v32 = v138;
  if ((_DWORD)v139)
  {
    v33 = (unint64_t)v139 << 6;
    v34 = (char *)v138 + 16;
    do
    {
      sub_22ECF95E4((unint64_t)v34);
      v34 += 64;
      v33 -= 64;
    }
    while (v33);
    v32 = v138;
  }
  if (v32 != v140)
    free(v32);
  if (v143 != v145)
    free(v143);
  return v31;
}

uint64_t sub_22ED6DB5C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v5;
  int v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v20;
  unsigned int v21;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  unsigned int v27;
  uint64_t v29;
  unint64_t v30;
  int v32;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t result;
  char v38;
  int v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int i;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int k;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int j;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77[24];
  unsigned int v78[24];
  unint64_t v79;

  v79 = a2;
  v3 = *(unsigned int *)(a3 + 16);
  if (!(_DWORD)v3)
    return 0;
  v5 = a2;
  v7 = *(_DWORD *)(a2 + 28);
  v8 = v7 & 0x7E;
  if (!a2 || (v8 - 58) < 0xFFFFFFFA)
  {
    if ((v7 & 0x7Fu) - 60 > 6)
    {
      if ((v8 - 34) > 3)
      {
        if ((v7 & 0x7F) == 0x21 && *(_DWORD *)a3 == 2)
        {
          v15 = **(_QWORD **)(a3 + 8) & 0xFFFFFFFFFFFFFFFCLL;
          v32 = *(_DWORD *)(v15 + 28);
          if ((v32 & 0x7Fu) > 0x2F || ((1 << (v32 & 0x7F)) & 0xC00000060000) == 0)
          {
            v11 = **(_QWORD **)(a3 + 8) & 0xFFFFFFFFFFFFFFFCLL;
          }
          else
          {
            v11 = sub_22EFBAEA4(**(_QWORD **)(a3 + 8) & 0xFFFFFFFFFFFFFFFCLL);
            v32 = *(_DWORD *)(v11 + 28);
          }
          if ((v32 & 0x7F) == 0x21)
          {
            v18 = *(_QWORD *)(v11 + 144);
            if (v18)
              v16 = *(_QWORD *)v18 & 0xFFFFFFFFFFFFFFF8;
            else
              v16 = 0;
            goto LABEL_70;
          }
        }
      }
      else if (*(_DWORD *)a3 == 2)
      {
        v15 = **(_QWORD **)(a3 + 8) & 0xFFFFFFFFFFFFFFFCLL;
        v27 = *(_DWORD *)(v15 + 28) & 0x7F;
        if (v27 > 0x2F || ((1 << v27) & 0xC00000060000) == 0)
        {
          v11 = **(_QWORD **)(a3 + 8) & 0xFFFFFFFFFFFFFFFCLL;
        }
        else
        {
          v11 = sub_22EFBAEA4(**(_QWORD **)(a3 + 8) & 0xFFFFFFFFFFFFFFFCLL);
          v27 = *(_DWORD *)(v11 + 28) & 0x7F;
        }
        if (v27 - 38 >= 0xFFFFFFFD)
        {
          v16 = 0;
          v29 = *(_QWORD *)(v11 + 136);
          v30 = v29 & 0xFFFFFFFFFFFFFFF8;
          if ((v29 & 4) != 0 && v30)
            v16 = *(_QWORD *)v30 & 0xFFFFFFFFFFFFFFF8;
          v18 = v30 & (v29 << 61 >> 63);
          goto LABEL_70;
        }
      }
    }
    else if (*(_DWORD *)a3 == 2)
    {
      v15 = **(_QWORD **)(a3 + 8) & 0xFFFFFFFFFFFFFFFCLL;
      v21 = *(_DWORD *)(v15 + 28) & 0x7F;
      if (v21 > 0x2F || ((1 << v21) & 0xC00000060000) == 0)
      {
        v11 = **(_QWORD **)(a3 + 8) & 0xFFFFFFFFFFFFFFFCLL;
      }
      else
      {
        v11 = sub_22EFBAEA4(**(_QWORD **)(a3 + 8) & 0xFFFFFFFFFFFFFFFCLL);
        v21 = *(_DWORD *)(v11 + 28) & 0x7F;
      }
      if (v21 != 64 && v21 - 67 >= 0xFFFFFFF9)
      {
        v24 = *(_QWORD *)(v11 + 16);
        v25 = v24 & 0xFFFFFFFFFFFFFFF8;
        if ((v24 & 4) != 0)
          v25 = *(_QWORD *)v25;
        if ((*(_WORD *)(v25 + 8) & 0x7Eu) - 34 <= 3)
        {
          v26 = (_QWORD *)sub_22EFBE104(v11);
          if (v26)
            v16 = *v26 & 0xFFFFFFFFFFFFFFF8;
          else
            v16 = 0;
          v18 = sub_22EFBE104(v11);
          goto LABEL_70;
        }
      }
    }
    return 0;
  }
  v9 = *(_QWORD **)(a3 + 8);
  v10 = 8 * v3;
  while (1)
  {
    v11 = *v9 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = *(_DWORD *)(v11 + 28);
    if ((v12 & 0x7Fu) <= 0x2F && ((1 << (v12 & 0x7F)) & 0xC00000060000) != 0)
    {
      v11 = sub_22EFBAEA4(*v9 & 0xFFFFFFFFFFFFFFFCLL);
      v12 = *(_DWORD *)(v11 + 28);
    }
    if ((v12 & 0x7Eu) - 58 >= 0xFFFFFFFC)
    {
      v14 = *(_QWORD *)(v5 + 48);
      if ((sub_22F34BA4C((uint64_t)a1, v14) & 1) == 0)
        v14 = sub_22EDC3D00((uint64_t)a1, v14, *(_QWORD *)(v11 + 48), 0);
      if ((*(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF0) + 8) | v14 & 7) == (*(_QWORD *)((*(_QWORD *)(v11 + 48) & 0xFFFFFFFFFFFFFFF0)
                                                                                   + 8) | *(_QWORD *)(v11 + 48) & 7))
        break;
    }
    ++v9;
    v10 -= 8;
    if (!v10)
      return 0;
  }
  v15 = *v9 & 0xFFFFFFFFFFFFFFFCLL;
  v16 = sub_22EFBF824(v11);
  v17 = *(_QWORD *)(v11 + 144);
  v18 = v17 & 0xFFFFFFFFFFFFFFF8;
  if ((v17 & 6) != 2 || v18 == 0)
  {
    v20 = (v17 & 6) != 4 || v18 == 0;
    if (v20 || (*(_BYTE *)(v18 + 8) & 4) == 0)
      v18 = 0;
    else
      v18 = *(_QWORD *)(v18 + 48);
  }
LABEL_70:
  if ((*(_DWORD *)(v5 + 28) & 0x1800000) == 0)
  {
    if (v16)
    {
      LOBYTE(v78[0]) = 0;
      sub_22ED6C90C((uint64_t)a1, *(unsigned int *)(v5 + 24), 2, v11, ((*(_DWORD *)v18 >> 1) & 3u) + 1, *(unsigned int *)(v18 + 8), v78);
      if ((v38 & 1) == 0)
      {
        v5 = v79;
        if (!sub_22ED65268((uint64_t)a1, v16, *(_DWORD *)(v79 + 24), 0))
        {
          v39 = *(_DWORD *)(v5 + 28);
          if ((v39 & 0x7Eu) - 58 < 0xFFFFFFFA)
          {
            v40 = v39 & 0x7F;
            if ((v40 - 67) >= 0xFFFFFFF9)
            {
              sub_22F3AC26C(v5, v16, 2);
              goto LABEL_154;
            }
            if ((v40 - 38) >= 0xFFFFFFFD)
            {
              v50 = v5;
              v51 = v16;
              v49 = 2;
              goto LABEL_117;
            }
            if (v40 == 33)
              v41 = v5;
            else
              v41 = 0;
            if ((*(_DWORD *)(v41 + 28) & 0x7F) != 0x53)
            {
              v42 = *(_QWORD *)(v41 + 16);
              v43 = v42 & 0xFFFFFFFFFFFFFFF8;
              if ((v42 & 4) != 0)
                v43 = *(_QWORD *)v43;
              for (i = *(_WORD *)(v43 + 8) & 0x7F; i != 83; i = *(_WORD *)(v43 + 8) & 0x7F)
              {
                v45 = -40;
                if (i > 70)
                {
                  if (i == 71)
                  {
                    v45 = -56;
                  }
                  else if (i != 81)
                  {
                    goto LABEL_102;
                  }
                }
                else
                {
                  if (i > 0x18)
                    goto LABEL_101;
                  if (i == 16)
                    goto LABEL_95;
                  if (((1 << i) & 0x1066) != 0)
                    goto LABEL_108;
                  if (i == 24)
                  {
LABEL_95:
                    v45 = -48;
                  }
                  else
                  {
LABEL_101:
                    if (i != 70)
                    {
LABEL_102:
                      v46 = i - 52;
                      if ((i - 33) >= 5)
                        v47 = -48;
                      else
                        v47 = -64;
                      if (v46 >= 6)
                        v45 = v47;
                      else
                        v45 = -72;
                      goto LABEL_108;
                    }
                    v45 = -64;
                  }
                }
LABEL_108:
                v48 = *(_QWORD *)(v43 + v45 + 16);
                v43 = v48 & 0xFFFFFFFFFFFFFFF8;
                if ((v48 & 4) != 0)
                  v43 = *(_QWORD *)v43;
              }
              v5 = v43 - 40;
            }
            v68 = sub_22E3CD3D4(*(_QWORD *)(v5 + 88) + 2032, 16, 3);
            *(_QWORD *)v68 = v16 & 0xFFFFFFFFFFFFFFF9 | 2;
            *(_DWORD *)(v68 + 8) = 0;
            *(_QWORD *)(v41 + 144) = v68;
            goto LABEL_154;
          }
          v66 = *(_QWORD *)(v11 + 144) & 6;
          v67 = (_BYTE *)(*(_QWORD *)(v11 + 144) & 0xFFFFFFFFFFFFFFF8);
          if (v66 == 4 && v67)
          {
            v67 += 16;
          }
          else if (v66 != 2 || !v67)
          {
            goto LABEL_173;
          }
          if ((*v67 & 6) == 0
            && (*(_BYTE *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v11 + 32))(v11) + 82) & 0x40) != 0)
          {
            *(_QWORD *)(v11 + 80) &= ~0x400000uLL;
          }
LABEL_173:
          v69 = v5;
          if ((*(_DWORD *)(v5 + 28) & 0x7F) != 0x53)
          {
            v70 = *(_QWORD *)(v5 + 16);
            v71 = v70 & 0xFFFFFFFFFFFFFFF8;
            if ((v70 & 4) != 0)
              v71 = *(_QWORD *)v71;
            for (j = *(_WORD *)(v71 + 8) & 0x7F; j != 83; j = *(_WORD *)(v71 + 8) & 0x7F)
            {
              v73 = -40;
              if (j > 70)
              {
                if (j == 71)
                {
                  v73 = -56;
                }
                else if (j != 81)
                {
                  goto LABEL_187;
                }
              }
              else
              {
                if (j > 0x18)
                  goto LABEL_186;
                if (j == 16)
                  goto LABEL_180;
                if (((1 << j) & 0x1066) != 0)
                  goto LABEL_193;
                if (j == 24)
                {
LABEL_180:
                  v73 = -48;
                }
                else
                {
LABEL_186:
                  if (j != 70)
                  {
LABEL_187:
                    v74 = j - 52;
                    if ((j - 33) >= 5)
                      v75 = -48;
                    else
                      v75 = -64;
                    if (v74 >= 6)
                      v73 = v75;
                    else
                      v73 = -72;
                    goto LABEL_193;
                  }
                  v73 = -64;
                }
              }
LABEL_193:
              v76 = *(_QWORD *)(v71 + v73 + 16);
              v71 = v76 & 0xFFFFFFFFFFFFFFF8;
              if ((v76 & 4) != 0)
                v71 = *(_QWORD *)v71;
            }
            v69 = v71 - 40;
          }
          v60 = sub_22E3CD3D4(*(_QWORD *)(v69 + 88) + 2032, 16, 3);
          v61 = v16 & 0xFFFFFFFFFFFFFFF9 | 2;
LABEL_153:
          *(_QWORD *)v60 = v61;
          *(_DWORD *)(v60 + 8) = 0;
          *(_QWORD *)(v5 + 144) = v60 & 0xFFFFFFFFFFFFFFF9 | 2;
          goto LABEL_154;
        }
      }
    }
    else
    {
      sub_22E8FCA40(a1, *(_DWORD *)(v5 + 24), 0x1268u, 0, (uint64_t)v78);
      sub_22E890024((uint64_t)v78, (uint64_t *)&v79);
      sub_22E903BEC(v78);
      sub_22E8FCA40(a1, *(_DWORD *)(v11 + 24), 0x17C0u, 0, (uint64_t)v77);
      sub_22E903BEC(v77);
    }
    return 1;
  }
  if (v16)
  {
    if ((*(_DWORD *)(v5 + 28) & 0x7Eu) - 54 <= 3)
    {
      v34 = *(_QWORD *)(v11 + 144) & 6;
      v35 = (_QWORD *)(*(_QWORD *)(v11 + 144) & 0xFFFFFFFFFFFFFFF8);
      if (v34 == 4 && v35)
      {
        v35 += 2;
      }
      else
      {
        v36 = 0x1FFFFFFFELL;
        if (v34 != 2 || !v35)
          goto LABEL_124;
      }
      v36 = *v35 & 6;
LABEL_124:
      if (!v5 || (v52 = v5, (*(_DWORD *)(v5 + 28) & 0x7F) != 0x53))
      {
        v53 = *(_QWORD *)(v5 + 16);
        v54 = v53 & 0xFFFFFFFFFFFFFFF8;
        if ((v53 & 4) != 0)
          v54 = *(_QWORD *)v54;
        for (k = *(_WORD *)(v54 + 8) & 0x7F; k != 83; k = *(_WORD *)(v54 + 8) & 0x7F)
        {
          v56 = -40;
          if (k > 70)
          {
            if (k == 71)
            {
              v56 = -56;
            }
            else if (k != 81)
            {
              goto LABEL_139;
            }
          }
          else
          {
            if (k > 0x18)
              goto LABEL_138;
            if (k == 16)
              goto LABEL_132;
            if (((1 << k) & 0x1066) != 0)
              goto LABEL_145;
            if (k == 24)
            {
LABEL_132:
              v56 = -48;
            }
            else
            {
LABEL_138:
              if (k != 70)
              {
LABEL_139:
                v57 = k - 52;
                if ((k - 33) >= 5)
                  v58 = -48;
                else
                  v58 = -64;
                if (v57 >= 6)
                  v56 = v58;
                else
                  v56 = -72;
                goto LABEL_145;
              }
              v56 = -64;
            }
          }
LABEL_145:
          v59 = *(_QWORD *)(v54 + v56 + 16);
          v54 = v59 & 0xFFFFFFFFFFFFFFF8;
          if ((v59 & 4) != 0)
            v54 = *(_QWORD *)v54;
        }
        v52 = v54 - 40;
      }
      v60 = sub_22E3CD3D4(*(_QWORD *)(v52 + 88) + 2032, 16, 3);
      v61 = v36 | v16 & 0xFFFFFFFFFFFFFFF9;
      goto LABEL_153;
    }
    if ((*(_DWORD *)(v5 + 28) & 0x7Fu) - 35 <= 2)
    {
      v49 = sub_22EFD5760(v11);
      v50 = v5;
      v51 = v16;
LABEL_117:
      sub_22F3B1D90(v50, v51, v49);
    }
  }
LABEL_154:
  *(_DWORD *)a3 = 0;
  *(_DWORD *)(a3 + 16) = 0;
  v62 = *(_QWORD *)(a3 + 88);
  if (v62)
  {
    v63 = sub_22EC6CBD0(v62);
    MEMORY[0x2348A0E9C](v63, 0x10E0C409F09D3C3);
    v64 = *(_DWORD *)(a3 + 16);
  }
  else
  {
    v64 = 0;
  }
  *(_BYTE *)(a3 + 165) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  v65 = *(unsigned int *)(v15 + 28);
  if (v64 >= *(_DWORD *)(a3 + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v64 = *(_DWORD *)(a3 + 16);
  }
  result = 0;
  *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8 * v64) = (v65 >> 13) & 3 | v15;
  ++*(_DWORD *)(a3 + 16);
  *(_DWORD *)a3 = 2;
  return result;
}

uint64_t sub_22ED6E4B0(uint64_t a1, _DWORD *a2)
{
  uint64_t result;
  uint64_t v4;
  BOOL v5;
  int v6;
  BOOL v7;
  BOOL v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v14;
  uint64_t v15;

  result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 32))(a2);
  if ((_DWORD *)result == a2)
    return result;
  v4 = result;
  if (result)
    v5 = (*(_DWORD *)(result + 28) & 0x7Eu) - 58 >= 0xFFFFFFFC;
  else
    v5 = 0;
  if (!v5)
  {
    v6 = *(_DWORD *)(result + 28) & 0x7F;
    if (result)
      v7 = (v6 - 67) >= 0xFFFFFFF9;
    else
      v7 = 0;
    if (v7)
    {
      v14 = a2[6];
      result = sub_22EFBC2B0(result);
      if ((_DWORD)result != 1)
        return result;
      result = sub_22EFBEC04(v4, 2, 0);
      goto LABEL_36;
    }
    if (result)
      v8 = (v6 - 38) >= 0xFFFFFFFD;
    else
      v8 = 0;
    if (v8)
    {
      result = sub_22EFD5760(result);
      if ((_DWORD)result != 1)
        return result;
      v14 = a2[6];
      result = sub_22EFD57A8(v4, 2);
      goto LABEL_36;
    }
    if (v6 == 33)
      v9 = result;
    else
      v9 = 0;
    v10 = *(_QWORD **)(v9 + 144);
    if (!v10)
      return result;
LABEL_28:
    if ((*v10 & 6) != 0)
      return result;
    v14 = a2[6];
    *v10 = *v10 & 0xFFFFFFFFFFFFFFF9 | 2;
LABEL_36:
    *(_DWORD *)(v4 + 24) = v14;
    return result;
  }
  v11 = *(_QWORD *)(result + 144) & 6;
  v10 = (_QWORD *)(*(_QWORD *)(result + 144) & 0xFFFFFFFFFFFFFFF8);
  if (v11 == 4 && v10 != 0)
  {
    v15 = v10[2];
    if ((v15 & 6) != 0)
      return result;
    v14 = a2[6];
    v10[2] = v15 & 0xFFFFFFFFFFFFFFF9 | 2;
    goto LABEL_36;
  }
  if (v11 == 2 && v10 != 0)
    goto LABEL_28;
  return result;
}

unint64_t sub_22ED6E5E8(unint64_t a1, uint64_t a2, int a3, int a4, int a5, unsigned int a6, uint64_t a7, uint64_t a8, unsigned int a9, int a10, int a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15)
{
  unint64_t v22;
  int *v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  int v31;
  int v32;
  _DWORD *v33;
  int v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  int v65;
  unsigned __int32 v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _BOOL4 v73;
  unint64_t v74;
  uint64_t *v75;
  char v76;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  BOOL v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  __n128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  _DWORD *v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  __int16 v130;
  __n128 v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t *v141;
  __n128 v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unsigned __int32 v147;
  uint64_t *v148;
  __n128 v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  __n128 v153;
  _DWORD *v154;
  int v155;
  unsigned int v156;
  int v157;
  uint64_t v158;
  unsigned int v160;
  int v161;
  char v162;
  unsigned int v163[24];
  unsigned int v164[24];
  unsigned int v165[24];
  unsigned int v166[24];
  unsigned int v167[24];
  unsigned int v168[24];
  int *v169;
  int v170;
  unint64_t v171;
  uint64_t v172;
  _QWORD v173[2];
  uint64_t __dst;
  __int128 *v175;
  uint64_t v176;
  _BYTE v177[4];
  void *v178[2];
  _DWORD v179[66];
  uint64_t v180;

  v180 = *MEMORY[0x24BDAC8D0];
  v173[0] = a12;
  v173[1] = a13;
  v172 = a8;
  v22 = sub_22F0F08CC(&v172);
  v23 = (int *)v22;
  v171 = v22;
  v24 = dword_22F497FF8[a5 - 23];
  v170 = v24;
  if ((*(_DWORD *)(v22 + 28) & 0x7F) == 0x1C)
    v25 = v22;
  else
    v25 = 0;
  v169 = (int *)v25;
  if (!v25)
  {
    LODWORD(v175) = sub_22F31E40C(a1, v22, v24);
    sub_22E8FCA40((_QWORD *)a1, a9, 0x12A5u, 0, (uint64_t)v178);
    v58 = sub_22E890024((uint64_t)v178, (uint64_t *)&v171);
    v59 = sub_22E8900C4(v58, (int *)&v175);
    sub_22E8900C4(v59, &v170);
    sub_22E903BEC((unsigned int *)v178);
    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v171 + 24), 0x6Fu, 0, (uint64_t)v168);
    sub_22E903BEC(v168);
    return 0;
  }
  v157 = a4;
  v158 = a2;
  v28 = v25 + 40;
  v27 = *(_QWORD *)(v25 + 40);
  v26 = *(_QWORD *)(v28 + 8);
  if ((v27 & 7) != 0)
    v29 = 0;
  else
    v29 = v27 & 0xFFFFFFFFFFFFFFF8;
  v30 = a6;
  if ((sub_22EA33594(a1, v26, v24, 0, a6, v29) & 1) == 0)
  {
    sub_22E8FCA40((_QWORD *)a1, a6, 0x13E0u, 0, (uint64_t)v178);
    sub_22E890024((uint64_t)v178, (uint64_t *)&v169);
    __asm { BR              X11 }
  }
  v31 = a3;
  if (a3)
    v32 = 3;
  else
    v32 = 4;
  v33 = *(_DWORD **)(*(_QWORD *)(a1 + 88) + 15088);
  if (a3)
  {
    if (v33[17] == 15 && v33[18] == 1)
    {
      v34 = 0;
      v35 = 3;
LABEL_28:
      v160 = v35;
      goto LABEL_61;
    }
    v36 = a15 + 8;
    v37 = *(_QWORD *)(a15 + 8);
    if ((v37 & 4) != 0)
    {
      v41 = v37 & 0xFFFFFFFFFFFFFFF8;
      v36 = *(_QWORD *)v41;
      v38 = *(_QWORD *)v41 + 8 * *(unsigned int *)(v41 + 8);
    }
    else
    {
      v38 = v36 + 8 * (v37 > 7);
    }
    v160 = v32;
    if (v36 != v38)
    {
      while (1)
      {
        v42 = *(_QWORD *)v36;
        if (*(_WORD *)(*(_QWORD *)(*(_QWORD *)v36 + 72) + 8) == 82)
          break;
        v36 += 8;
        if (v36 == v38)
          goto LABEL_30;
      }
      sub_22E8FCA40((_QWORD *)a1, v31, 0x186Fu, 0, (uint64_t)v167);
      sub_22E903BEC(v167);
      sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v42 + 16), 0x154Cu, 0, (uint64_t)v166);
      sub_22E903BEC(v166);
      v23 = v169;
    }
LABEL_30:
    v43 = *((_QWORD *)v23 + 6);
    if ((*(_BYTE *)(v43 + 29) & 1) != 0)
    {
      sub_22EFC8E88(v43);
      v45 = *(uint64_t **)v44;
      v46 = *(unsigned int *)(v44 + 8);
      v47 = *(uint64_t **)v44;
      if ((_DWORD)v46)
      {
        v48 = 8 * v46;
        v47 = *(uint64_t **)v44;
        while (*(_WORD *)(*v47 + 32) != 155)
        {
          ++v47;
          v48 -= 8;
          if (!v48)
            goto LABEL_60;
        }
      }
      if (v47 != &v45[v46])
      {
        do
        {
          v50 = *v45++;
          v49 = v50;
        }
        while (*(_WORD *)(v50 + 32) != 155);
        sub_22E8FCA40((_QWORD *)a1, v31, 0x186Fu, 0, (uint64_t)v165);
        sub_22E903BEC(v165);
        sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v49 + 16), 0x154Cu, 0, (uint64_t)v164);
        sub_22E903BEC(v164);
      }
    }
LABEL_60:
    v34 = 0;
  }
  else
  {
    if (v33[37] != 11)
    {
      v34 = 0;
      v35 = 4;
      goto LABEL_28;
    }
    v39 = *((_QWORD *)v23 + 6);
    if ((*(_BYTE *)(v39 + 29) & 1) != 0)
    {
      v51 = v32;
      sub_22EFC8E88(v39);
      v53 = *(uint64_t **)v52;
      v54 = *(unsigned int *)(v52 + 8);
      v55 = *(uint64_t **)v52;
      if ((_DWORD)v54)
      {
        v56 = 8 * v54;
        v55 = *(uint64_t **)v52;
        while (*(_WORD *)(*v55 + 32) != 157)
        {
          ++v55;
          v56 -= 8;
          if (!v56)
            goto LABEL_49;
        }
      }
      if (v55 == &v53[v54])
      {
LABEL_49:
        v40 = 0;
        v32 = v51;
      }
      else
      {
        v32 = v51;
        do
        {
          v57 = *v53++;
          v40 = v57;
        }
        while (*(_WORD *)(v57 + 32) != 157);
      }
    }
    else
    {
      v40 = 0;
    }
    v34 = v40 != 0;
    v61 = a15 + 8;
    v62 = *(_QWORD *)(a15 + 8);
    if ((v62 & 4) != 0)
    {
      v64 = v62 & 0xFFFFFFFFFFFFFFF8;
      v61 = *(_QWORD *)v64;
      v63 = *(_QWORD *)v64 + 8 * *(unsigned int *)(v64 + 8);
    }
    else
    {
      v63 = v61 + 8 * (v62 > 7);
    }
    while (v61 != v63)
    {
      v65 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)v61 + 72) + 8);
      if (v65 == 82)
      {
        v160 = v32;
        goto LABEL_60;
      }
      v34 |= v65 == 84;
      v61 += 8;
    }
    if ((v34 & 1) != 0)
      v32 = 3;
    v160 = v32;
  }
LABEL_61:
  v178[0] = v179;
  v178[1] = (void *)0x800000000;
  v179[64] = a11;
  v179[65] = a14;
  sub_22ED58288(a1, (uint64_t)v173, (uint64_t)v178);
  v175 = (__int128 *)v177;
  v176 = 0x400000000;
  v66 = a9;
  if ((sub_22ED61988((_QWORD *)a1, v169, a9, (uint64_t)v178, 0, (uint64_t)&v175, 1, 0) & 1) == 0)
  {
    __dst = 0;
    v67 = sub_22EFE9F28((unint64_t)v169, (uint64_t)v175, v176, (uint64_t)&__dst);
    v60 = v67;
    v155 = v30;
    if (v67)
    {
      v156 = sub_22EFD5760(v67);
      v68 = v160;
      if (v160 == 4)
      {
        v69 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 15088);
        if (*(_DWORD *)(v69 + 68) == 15 && *(_DWORD *)(v69 + 72) == 1)
        {
          v70 = a15 + 8;
          v71 = *(_QWORD *)(a15 + 8);
          if ((v71 & 4) != 0)
          {
            v74 = v71 & 0xFFFFFFFFFFFFFFF8;
            v70 = *(_QWORD *)v74;
            v72 = *(_QWORD *)v74 + 8 * *(unsigned int *)(v74 + 8);
          }
          else
          {
            v72 = v70 + 8 * (v71 > 7);
          }
          if (v70 != v72)
          {
            v73 = 1;
            while (*(_WORD *)(*(_QWORD *)(*(_QWORD *)v70 + 72) + 8) != 82)
            {
              v70 += 8;
              if (v70 == v72)
                goto LABEL_79;
            }
            sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(*(_QWORD *)v70 + 16), 0x1870u, 0, (uint64_t)v163);
            sub_22E903BEC(v163);
            v68 = 4;
          }
        }
        v73 = 1;
      }
      else
      {
        v73 = 0;
      }
    }
    else
    {
      v156 = 0;
      v68 = v160;
      v73 = v160 == 4;
    }
LABEL_79:
    v75 = (uint64_t *)(a7 + 8);
    if ((sub_22ED6F590(a1, (uint64_t)v169, a9, *(_QWORD *)(a7 + 8) != 0, v68) & 1) != 0)
    {
      v60 = 0;
      goto LABEL_83;
    }
    v162 = 0;
    if (v60)
    {
      sub_22ED6C90C(a1, a9, v160, v60, v156, *(unsigned int *)(v60 + 176), &v162);
      if ((v76 & 1) != 0)
        goto LABEL_83;
      if (v156 < 2)
      {
        v78 = 0;
        *(_DWORD *)(v60 + 24) = a9;
        goto LABEL_101;
      }
      if (v156 == 3 && (v34 & 1) != 0)
        v162 = 0;
    }
    v79 = *((_QWORD *)v169 + 2);
    v80 = (_QWORD *)(v79 & 0xFFFFFFFFFFFFFFF8);
    if ((v79 & 4) != 0)
      v80 = (_QWORD *)*v80;
    v81 = sub_22EFEB760(*(_QWORD *)(a1 + 88), v24, (uint64_t)v80, v155, a9, (uint64_t)v169, v175, v176, v60);
    if (*v75)
    {
      v82 = sub_22F0ABC50(v75, *(_QWORD *)(a1 + 88));
      sub_22F3AC930(v81, v82, v83);
    }
    if (v60 || v162)
    {
      v78 = v60;
    }
    else
    {
      sub_22EFEA2C8((unint64_t)v169, v81, __dst);
      v78 = 0;
    }
    v60 = v81;
LABEL_101:
    v84 = *(_QWORD *)(a1 + 88);
    v85 = *(_QWORD *)(v60 + 48);
    if (v85)
      v86 = v85 & 0xFFFFFFFFFFFFFFF0;
    else
      v86 = sub_22EF6462C(*(_QWORD *)(a1 + 88), v60);
    v87 = sub_22EF64F48(v84, a8, a9, (uint64_t)v178, v86);
    sub_22ED6C768(v60, v87);
    sub_22F3469AC(v60, v31);
    sub_22ED6C8B0(v60, v157);
    *(_QWORD *)(v60 + 112) = 0;
    if ((*(_BYTE *)(v60 + 29) & 1) != 0)
    {
      sub_22EFC8E88(v60);
      v94 = *(_QWORD *)v93;
      v95 = *(unsigned int *)(v93 + 8);
      v96 = *(_QWORD *)v93 + 8 * v95;
      if ((_DWORD)v95)
      {
        v97 = 8 * v95;
        while (*(_WORD *)(*(_QWORD *)v94 + 32) != 155)
        {
          v94 += 8;
          v97 -= 8;
          if (!v97)
          {
            v94 = v96;
            break;
          }
        }
      }
      v88 = v94 != v96;
    }
    else
    {
      v88 = 0;
    }
    sub_22EA63DD8((_QWORD *)a1, v158, v60, a15, 1);
    sub_22E9114FC((_QWORD *)a1, v60);
    sub_22EFC80C4(v60, *(_QWORD *)(a1 + 216));
    sub_22EFCCFA0(*(_QWORD *)(a1 + 216), v60);
    if (v162)
      goto LABEL_116;
    if (((v89 = *(_QWORD *)(v60 + 128)) != 0
       || (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v60 + 104) + 96), *(_QWORD *)(v60 + 104)),
           (v89 = *(_QWORD *)(v60 + 128)) != 0))
      && (v90 = *(_QWORD *)(v89 + 88)) != 0)
    {
      if (v73)
      {
        sub_22EAB631C(a1, a9, v60, 1u);
        *(_DWORD *)(v60 + 176) = *(_DWORD *)(v90 + 176);
      }
    }
    else
    {
      sub_22EE0D174((_QWORD *)a1, a9, v60, v160, 1);
    }
    if ((v91 = *(_QWORD *)(v60 + 128)) == 0
      && (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v60 + 104) + 96), *(_QWORD *)(v60 + 104)),
          (v91 = *(_QWORD *)(v60 + 128)) == 0)
      || (v92 = *(_QWORD *)(v91 + 88)) == 0)
    {
LABEL_116:
      sub_22EFD57A8(v60, v160);
      goto LABEL_83;
    }
    v161 = sub_22EFD5760(*(_QWORD *)(v91 + 88));
    if (((v34 | v73) & 1) != 0 && v161 == 3)
    {
      sub_22EFD57A8(v92, v160);
      if ((*(_BYTE *)(v92 + 29) & 1) == 0)
        goto LABEL_133;
      sub_22EFC8E88(v92);
      v99 = *((unsigned int *)v98 + 2);
      if ((_DWORD)v99)
      {
        v101 = 8 * v99;
        v100 = *v98;
        while (*(_WORD *)(*(_QWORD *)v100 + 32) != 157)
        {
          v100 += 8;
          v101 -= 8;
          if (!v101)
            goto LABEL_133;
        }
      }
      else
      {
        v100 = *v98;
      }
      if (v100 == *v98 + 8 * v99)
      {
LABEL_133:
        if ((*(_BYTE *)(v92 + 29) & 1) != 0)
        {
          sub_22EFC8E88(v92);
          v103 = *((unsigned int *)v102 + 2);
          if ((_DWORD)v103)
          {
            v105 = 8 * v103;
            v104 = *v102;
            while (*(_WORD *)(*(_QWORD *)v104 + 32) != 155)
            {
              v104 += 8;
              v105 -= 8;
              if (!v105)
                goto LABEL_141;
            }
          }
          else
          {
            v104 = *v102;
          }
          if (v104 != *v102 + 8 * v103)
            goto LABEL_179;
        }
LABEL_141:
        if ((*(_BYTE *)(v60 + 29) & 1) == 0)
          goto LABEL_149;
        v107.n128_f64[0] = sub_22EFC8E88(v60);
        v108 = *((unsigned int *)v106 + 2);
        if ((_DWORD)v108)
        {
          v110 = 8 * v108;
          v109 = *v106;
          while (*(_WORD *)(*(_QWORD *)v109 + 32) != 157)
          {
            v109 += 8;
            v110 -= 8;
            if (!v110)
              goto LABEL_149;
          }
        }
        else
        {
          v109 = *v106;
        }
        if (v109 == *v106 + 8 * v108)
        {
LABEL_149:
          if ((*(_BYTE *)(v60 + 29) & 1) == 0)
            goto LABEL_179;
          v107.n128_f64[0] = sub_22EFC8E88(v60);
          v112 = *((unsigned int *)v111 + 2);
          if ((_DWORD)v112)
          {
            v121 = 8 * v112;
            v113 = *v111;
            while (*(_WORD *)(*(_QWORD *)v113 + 32) != 155)
            {
              v113 += 8;
              v121 -= 8;
              if (!v121)
                goto LABEL_179;
            }
          }
          else
          {
            v113 = *v111;
          }
          if (v113 == *v111 + 8 * v112)
            goto LABEL_179;
        }
        if ((*(unsigned int (**)(_QWORD, __n128))(**(_QWORD **)(*(_QWORD *)(a1 + 88) + 15088) + 408))(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 15088), v107))
        {
          v114 = *(_DWORD **)(*(_QWORD *)(a1 + 88) + 15088);
          if (v114[14] != 42 || v114[16] != 3 || v114[17] != 25)
          {
            if ((*(_BYTE *)(v60 + 29) & 1) == 0)
              goto LABEL_169;
            sub_22EFC8E88(v60);
            v116 = *(uint64_t **)v115;
            v117 = *(unsigned int *)(v115 + 8);
            v118 = *(uint64_t **)v115;
            if ((_DWORD)v117)
            {
              v122 = 8 * v117;
              v118 = *(uint64_t **)v115;
              while (*(_WORD *)(*v118 + 32) != 157)
              {
                ++v118;
                v122 -= 8;
                if (!v122)
                  goto LABEL_169;
              }
            }
            if (v118 == &v116[v117])
            {
LABEL_169:
              if ((*(_BYTE *)(v60 + 29) & 1) == 0)
                goto LABEL_177;
              sub_22EFC8E88(v60);
              v124 = *(uint64_t **)v123;
              v125 = *(unsigned int *)(v123 + 8);
              v126 = *(uint64_t **)v123;
              if ((_DWORD)v125)
              {
                v128 = 8 * v125;
                v126 = *(uint64_t **)v123;
                while (*(_WORD *)(*v126 + 32) != 155)
                {
                  ++v126;
                  v128 -= 8;
                  if (!v128)
                    goto LABEL_177;
                }
              }
              if (v126 == &v124[v125])
              {
LABEL_177:
                v119 = 0;
              }
              else
              {
                do
                {
                  v127 = *v124++;
                  v119 = v127;
                }
                while (*(_WORD *)(v127 + 32) != 155);
              }
            }
            else
            {
              do
              {
                v120 = *v116++;
                v119 = v120;
              }
              while (*(_WORD *)(v120 + 32) != 157);
            }
            v129 = sub_22EF9C5AC(v119);
            v130 = *(_WORD *)(v129 + 32);
            *(_BYTE *)(v129 + 34) |= 1u;
            *(_WORD *)(v129 + 32) = v130;
            sub_22EFCA95C(v92, v129);
            sub_22ED6F798((_QWORD *)a1, v92, v131);
          }
        }
      }
    }
LABEL_179:
    if (!v88 && (*(_BYTE *)(v60 + 29) & 1) != 0)
    {
      v140 = v60;
      v142.n128_f64[0] = sub_22EFC8E88(v60);
      v143 = *((unsigned int *)v141 + 2);
      if ((_DWORD)v143)
      {
        v144 = 8 * v143;
        v145 = *v141;
        while (*(_WORD *)(*(_QWORD *)v145 + 32) != 155)
        {
          v145 += 8;
          v144 -= 8;
          v66 = a9;
          v60 = v140;
          if (!v144)
            goto LABEL_181;
        }
      }
      else
      {
        v145 = *v141;
      }
      v66 = a9;
      v60 = v140;
      if (v161 == 1 && v145 != *v141 + 8 * v143)
      {
        if ((*(unsigned int (**)(_QWORD, __n128))(**(_QWORD **)(*(_QWORD *)(a1 + 88) + 15088) + 408))(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 15088), v142))
        {
          v154 = *(_DWORD **)(*(_QWORD *)(a1 + 88) + 15088);
          if (v154[14] != 42 || v154[16] != 3 || v154[17] != 25)
            sub_22ED6F798((_QWORD *)a1, v92, v153);
        }
      }
    }
LABEL_181:
    if (v156 == 3)
    {
      v132 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 15088);
      if (*(_DWORD *)(v132 + 68) == 15 && *(_DWORD *)(v132 + 72) == 1 && (*(_BYTE *)(v78 + 29) & 1) != 0)
      {
        v146 = v60;
        v147 = v66;
        v149.n128_f64[0] = sub_22EFC8E88(v78);
        v150 = *((unsigned int *)v148 + 2);
        if ((_DWORD)v150)
        {
          v151 = 8 * v150;
          v152 = *v148;
          while (*(_WORD *)(*(_QWORD *)v152 + 32) != 155)
          {
            v152 += 8;
            v151 -= 8;
            v66 = v147;
            v60 = v146;
            if (!v151)
              goto LABEL_185;
          }
        }
        else
        {
          v152 = *v148;
        }
        v66 = v147;
        v60 = v146;
        if (v152 != *v148 + 8 * v150)
          sub_22ED6F798((_QWORD *)a1, v92, v149);
      }
    }
LABEL_185:
    if (sub_22E693748(v92))
    {
      if ((*(_BYTE *)(v92 + 29) & 1) == 0)
        goto LABEL_194;
      sub_22EFC8E88(v92);
      v134 = *(uint64_t **)v133;
      v135 = *(unsigned int *)(v133 + 8);
      v136 = *(uint64_t **)v133;
      if ((_DWORD)v135)
      {
        v139 = 8 * v135;
        v136 = *(uint64_t **)v133;
        while (*(_WORD *)(*v136 + 32) != 202)
        {
          ++v136;
          v139 -= 8;
          if (!v139)
            goto LABEL_194;
        }
      }
      if (v136 == &v134[v135])
      {
LABEL_194:
        v137 = 0;
      }
      else
      {
        do
        {
          v138 = *v134++;
          v137 = v138;
        }
        while (*(_WORD *)(v138 + 32) != 202);
      }
      sub_22EFCA95C(v60, v137);
      (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 96) + 112))(*(_QWORD *)(a1 + 96), v60);
    }
    sub_22EFD57A8(v60, v160);
    sub_22F348C88(a1, v66, v92, v160);
    goto LABEL_83;
  }
  v60 = 0;
LABEL_83:
  if (v175 != (__int128 *)v177)
    free(v175);
  if (v178[0] != v179)
    free(v178[0]);
  return v60;
}

uint64_t sub_22ED6F590(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  int v9;
  _BOOL8 v10;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27[24];
  uint64_t v28;

  v25 = a2;
  if (a5 != 3 || (v9 = sub_22EFB948C(a2), v9 != 4) && v9 != 1)
  {
    v12 = a3;
    v28 = a2;
    v13 = *(_QWORD *)(a2 + 16);
    v14 = (_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF8);
    if ((v13 & 4) != 0)
      v14 = (_QWORD *)*v14;
    v15 = sub_22F3B16C0((unint64_t)v14);
    v16 = sub_22EFCBB30(*(_QWORD *)(a1 + 216));
    v17 = (*(_WORD *)(v16 + 8) & 0x7E) - 34;
    v10 = v17 < 4;
    if (v17 > 3)
    {
      if (a4)
      {
        if ((sub_22EFCBE78(v16, v15) & 1) != 0)
          return v10;
      }
      else if (sub_22EFCE860(v16, v15))
      {
        return v10;
      }
      v18 = (*(_WORD *)(v15 + 8) & 0x7F) != 0x10 || v15 == 0;
      if (v18)
        v19 = 0;
      else
        v19 = v15 - 48;
      v26 = v19;
      if (v18)
      {
        if ((**(_QWORD **)(a1 + 72) & 0x200) != 0)
          v20 = 3323;
        else
          v20 = 6546;
        sub_22E8FCA40((_QWORD *)a1, v12, v20, 0, (uint64_t)v27);
        sub_22E890024((uint64_t)v27, &v28);
      }
      else
      {
        if (a4)
        {
          v21 = 3327;
          v22 = 6547;
        }
        else
        {
          v21 = 3333;
          v22 = 6548;
        }
        if ((**(_QWORD **)(a1 + 72) & 0x200) != 0)
          v23 = v21;
        else
          v23 = v22;
        sub_22E8FCA40((_QWORD *)a1, v12, v23, 0, (uint64_t)v27);
        v24 = sub_22E890024((uint64_t)v27, &v28);
        sub_22E9AEF84(v24, &v26);
      }
      sub_22E903BEC(v27);
      sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v28 + 24), 0x15E8u, 0, (uint64_t)v27);
    }
    else
    {
      sub_22E8FCA40((_QWORD *)a1, v12, 0xCF7u, 0, (uint64_t)v27);
      sub_22E890024((uint64_t)v27, &v28);
    }
    sub_22E903BEC(v27);
    return v10;
  }
  sub_22E8FCA40((_QWORD *)a1, a3, 0xCF9u, 0, (uint64_t)v27);
  sub_22E890024((uint64_t)v27, &v25);
  sub_22E903BEC(v27);
  return 1;
}

void sub_22ED6F798(_QWORD *a1, uint64_t a2, __n128 a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;

  if ((*(_BYTE *)(a2 + 29) & 1) == 0)
    goto LABEL_10;
  a3.n128_f64[0] = sub_22EFC8E88(a2);
  v6 = *(uint64_t **)v5;
  v7 = *(unsigned int *)(v5 + 8);
  v8 = *(uint64_t **)v5;
  if ((_DWORD)v7)
  {
    v9 = 8 * v7;
    v8 = *(uint64_t **)v5;
    while (*(_WORD *)(*v8 + 32) != 157)
    {
      ++v8;
      v9 -= 8;
      if (!v9)
        goto LABEL_10;
    }
  }
  if (v8 == &v6[v7])
  {
LABEL_10:
    if ((*(_BYTE *)(a2 + 29) & 1) == 0)
      goto LABEL_19;
    a3.n128_f64[0] = sub_22EFC8E88(a2);
    v13 = *(uint64_t **)v12;
    v14 = *(unsigned int *)(v12 + 8);
    v15 = *(uint64_t **)v12;
    if ((_DWORD)v14)
    {
      v16 = 8 * v14;
      v15 = *(uint64_t **)v12;
      while (*(_WORD *)(*v15 + 32) != 155)
      {
        ++v15;
        v16 -= 8;
        if (!v16)
          goto LABEL_19;
      }
    }
    if (v15 == &v13[v14])
    {
LABEL_19:
      v10 = 0;
    }
    else
    {
      do
      {
        v17 = *v13++;
        v10 = v17;
      }
      while (*(_WORD *)(v17 + 32) != 155);
    }
  }
  else
  {
    do
    {
      v11 = *v6++;
      v10 = v11;
    }
    while (*(_WORD *)(v11 + 32) != 157);
  }
  sub_22EAB2F64((uint64_t)a1, a2, a3);
  v18 = sub_22E46A3A0(a2);
  if (v18 != v19)
  {
    v20 = v18;
    v21 = v19;
    do
    {
      v22 = *(_QWORD *)(**(_QWORD **)(v20 + 16) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v22 + 8) & 0xF) != 0)
        v22 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v20 + 16));
      v23 = sub_22F10C2A4(*(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF0));
      if (v23)
      {
        v24 = *(_DWORD *)(v23 + 28);
        if ((v24 & 0x7Fu) - 35 <= 2 && (v24 & 0x7E) == 0x24)
          sub_22EAAA30C(a1, a2, v10, v23, *(_DWORD *)v20);
      }
      v20 += 24;
    }
    while (v20 != v21);
  }
  sub_22EAC8C34((unint64_t)a1);
}

unint64_t sub_22ED6F93C(_QWORD *a1, uint64_t *a2, unsigned int a3, unsigned int a4, int a5, int a6, uint64_t *a7, uint64_t a8, unsigned int a9, uint64_t a10)
{
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int *v20;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  _DWORD *v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  int v48;
  _BYTE v49[96];
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  __int16 v53;
  void *v54[2];
  _QWORD v55[11];

  v55[10] = *MEMORY[0x24BDAC8D0];
  v53 = 0;
  v14 = sub_22EA33BC4((unint64_t)a1, a2, a5, 0, a6, (uint64_t)a7, a8, a9, a10, 3, 0, 0, 0, (_BYTE *)&v53 + 1, &v53, 0, 0, 0, 0,
          0,
          0,
          0,
          0,
          0);
  v15 = v14;
  if (!v14)
    return v15;
  if ((*(_BYTE *)(v14 + 28) & 0x80) != 0)
    return 0;
  v52 = v14;
  v16 = *(_QWORD *)(v14 + 136);
  if ((v16 & 4) == 0
    || (v17 = (_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF8)) == 0
    || (v51 = *v17 & 0xFFFFFFFFFFFFFFF8) == 0)
  {
    sub_22E8FCA40(a1, a4, 0xCFCu, 0, (uint64_t)v54);
    v18 = *(_QWORD *)(v52 + 48);
    if (v18)
      v19 = v18 & 0xFFFFFFFFFFFFFFF0;
    else
      v19 = sub_22EF6462C(a1[11], v52);
    v50 = v19;
    sub_22E8901B8((uint64_t)v54, (uint64_t *)&v50);
    sub_22E903BEC((unsigned int *)v54);
    sub_22E8FCA40(a1, *(_DWORD *)(v52 + 24), 0x16D6u, 0, (uint64_t)v49);
    v20 = (unsigned int *)v49;
    goto LABEL_9;
  }
  v22 = a7[1];
  if (v22)
  {
    while (1)
    {
      v23 = *(_QWORD *)(v22 + 8);
      if ((v23 & 4) != 0)
      {
        v24 = *(_QWORD *)(v22 + 16);
        if (v24)
        {
          if (*(_BYTE *)(v24 + 16) == 46)
            break;
        }
      }
      v22 = v23 & 0xFFFFFFFFFFFFFFF8;
      if ((v23 & 0xFFFFFFFFFFFFFFF8) == 0)
        goto LABEL_18;
    }
    v26 = v14;
  }
  else
  {
LABEL_18:
    sub_22E8FCA40(a1, a4, 0x1473u, 0, (uint64_t)v54);
    v25 = sub_22E890024((uint64_t)v54, (uint64_t *)&v52);
    v50 = *a7;
    sub_22E8906A0(v25, (uint64_t *)&v50);
    sub_22E903BEC((unsigned int *)v54);
    v26 = v52;
  }
  v27 = a3;
  if (a3)
    v28 = 3;
  else
    v28 = 4;
  sub_22ED6F590((uint64_t)a1, v26, a9, 1, v28);
  v29 = (uint64_t *)v52;
  if ((*(_BYTE *)(v52 + 96) & 3) != 0)
  {
LABEL_23:
    v30 = v29[16];
    if (!v30)
    {
      sub_22E3CD31C((uint64_t *)(v29[13] + 96), v29[13]);
      v30 = v29[16];
      v29 = (uint64_t *)v52;
      if (!v30)
        goto LABEL_35;
    }
    if (!*(_QWORD *)(v30 + 88) || v29 == 0)
      goto LABEL_35;
    goto LABEL_32;
  }
  v29 = (uint64_t *)sub_22E3CD31C((uint64_t *)(v52 + 96), v52);
  if (!v29)
  {
    v29 = (uint64_t *)v52;
    goto LABEL_23;
  }
LABEL_32:
  v32 = (_DWORD *)(v29[17] & (v29[17] << 61 >> 63) & 0xFFFFFFFFFFFFFFF8);
  LOBYTE(v54[0]) = 0;
  sub_22ED6C90C((uint64_t)a1, a4, v28, (uint64_t)v29, ((*v32 >> 1) & 3u) + 1, v32[2], v54);
  if ((v33 & 1) != 0)
    return 0;
  if (LOBYTE(v54[0]))
    return v15;
  v29 = (uint64_t *)v52;
LABEL_35:
  v34 = v29[16];
  if (!v34 && (sub_22E3CD31C((uint64_t *)(v29[13] + 96), v29[13]), (v34 = v29[16]) == 0)
    || (v35 = *(_QWORD *)(v34 + 88)) == 0)
  {
    v36 = v51;
    v37 = *(_QWORD *)(v51 + 128);
    if (v37
      || (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v51 + 104) + 96), *(_QWORD *)(v51 + 104)),
          (v37 = *(_QWORD *)(v36 + 128)) != 0))
    {
      v38 = *(_QWORD *)(v37 + 88);
      if (v38)
      {
        v39 = (uint64_t *)v52;
        sub_22EE007CC(v52, 0, 0, 0, (uint64_t)v54);
        v40 = sub_22EE0B368((unint64_t)a1, a9, v39, v38, (uint64_t *)v54, v28, 1);
        if (v54[0] != v55)
          free(v54[0]);
        if ((v40 & 1) == 0)
        {
          v41 = v52;
          v42 = *(_QWORD *)(v52 + 128);
          if (v42
            || (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v52 + 104) + 96), *(_QWORD *)(v52 + 104)),
                (v42 = *(_QWORD *)(v41 + 128)) != 0))
          {
            v35 = *(_QWORD *)(v42 + 88);
            if (v35)
              goto LABEL_38;
          }
        }
        return 0;
      }
    }
    sub_22E8FCA40(a1, a4, 0xD03u, 0, (uint64_t)v54);
    v48 = 0;
    v43 = sub_22E8900C4((uint64_t)v54, &v48);
    v50 = *(_QWORD *)(v52 + 40);
    v44 = sub_22E894538(v43, (uint64_t *)&v50);
    v45 = *(_QWORD *)(v52 + 16);
    v46 = (_QWORD *)(v45 & 0xFFFFFFFFFFFFFFF8);
    if ((v45 & 4) != 0)
      v46 = (_QWORD *)*v46;
    v47 = v46;
    sub_22E894FB4(v44, (uint64_t *)&v47);
    sub_22E903BEC((unsigned int *)v54);
    sub_22E8FCA40(a1, *(_DWORD *)(v36 + 24), 0x66u, 0, (uint64_t)v54);
    sub_22E890024((uint64_t)v54, (uint64_t *)&v51);
    v20 = (unsigned int *)v54;
LABEL_9:
    sub_22E903BEC(v20);
    return 0;
  }
LABEL_38:
  sub_22EE007CC(v52, 0, 0, 0, (uint64_t)v54);
  sub_22EE0D944((unint64_t)a1, a9, v35, (uint64_t *)v54, v28);
  if (v54[0] != v55)
    free(v54[0]);
  if (!v27)
    sub_22EAB631C((uint64_t)a1, a9, v35, 1u);
  return v15;
}

uint64_t sub_22ED6FDDC(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int i;
  unint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  _BYTE *v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  _QWORD *v35;
  int v36;
  int v37;
  unint64_t v38;
  uint64_t *v39;
  void **v40;
  uint64_t v41;
  unint64_t v42;
  BOOL v43;
  unint64_t v44;
  int v46;
  int v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  int v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  unint64_t v69;
  int v70;
  unsigned int v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  BOOL v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  BOOL v102;
  _BOOL4 v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  _QWORD *v107;
  unsigned int *v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _BYTE *v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  char v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unsigned int v123;
  unsigned int *v124;
  _DWORD *v125;
  char v126;
  int v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  _BYTE *v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int v148;
  char v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char v153;
  char v154;
  _BYTE *v155;
  unint64_t v156;
  char *v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  BOOL v171;
  unint64_t v172;
  BOOL v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  unint64_t v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t *v184;
  unint64_t v185;
  int v186;
  unsigned int v187[24];
  unint64_t v188;
  unint64_t v189;
  int v190;
  _BYTE *v191;
  unint64_t v192;
  int v193;
  unint64_t v194;
  unsigned int v195[24];
  _BYTE v196[96];
  _BYTE v197[96];
  _BYTE v198[73];
  unsigned int v199[2];
  unsigned int v200[24];
  unint64_t v201;
  uint64_t v202;
  __int128 v203;
  uint64_t v204;
  _OWORD v205[3];
  _OWORD v206[3];
  _BYTE *v207;
  __int128 v208;
  void *__p;
  uint64_t v210;
  uint64_t v211;
  char v212;
  uint64_t v213;
  int v214;
  uint64_t v215;
  int v216;
  uint64_t v217;
  int v218;
  void *v219;
  uint64_t v220;
  _QWORD v221[10];
  void *v222;
  uint64_t v223;
  _BYTE v224[104];
  void *v225;
  uint64_t v226;
  _BYTE v227[64];
  void *v228;
  uint64_t v229;
  _BYTE v230[256];
  uint64_t v231;
  int v232;
  char v233;
  void *v234;
  uint64_t v235;
  _BYTE v236[64];
  void *v237[2];
  _BYTE v238[256];
  uint64_t v239;
  uint64_t v240;
  void *v241;
  uint64_t v242;
  _BYTE v243[64];
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  _QWORD *v247;
  __int128 v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  __int16 v252;
  int v253;
  char v254;
  uint64_t v255;

  v5 = a5;
  v8 = a1;
  v255 = *MEMORY[0x24BDAC8D0];
  v9 = (int *)(a5 + 40);
  sub_22EA12DB4(a1, a5 + 40);
  v202 = v203;
  if ((_QWORD)v203)
  {
    for (i = *(_DWORD *)(a2 + 8); (i & 0x88) != 8; i = *(_DWORD *)(a2 + 8))
      a2 = *(_QWORD *)a2;
    v16 = sub_22EE8156C(v8, v5, a2, v10, v11, v12, v13, v14);
    v17 = *v16;
    v201 = v17;
    if (v17 < 0x10)
      return 0;
    v18 = (uint64_t *)v16;
    v19 = *(unint64_t **)v5;
    v20 = **(_QWORD **)v5;
    if ((**(_DWORD **)v5 & 7) != 0)
    {
      if ((v20 & 7) == 1)
      {
        sub_22E8FCA40((_QWORD *)v8, *(_DWORD *)(v5 + 64), 0xCFEu, 0, (uint64_t)&v228);
        sub_22E894538((uint64_t)&v228, &v202);
LABEL_112:
        sub_22E903BEC((unsigned int *)&v228);
        return 0;
      }
      sub_22E8FCA40((_QWORD *)v8, *(_DWORD *)(v5 + 64), 0xD01u, 0, (uint64_t)&v228);
      v22 = (_BYTE *)(*(unsigned int *)(*(_QWORD *)v5 + 96) | ((unint64_t)*(unsigned int *)(*(_QWORD *)v5 + 96) << 32));
      *(_QWORD *)((char *)&v208 + 4) = 0;
      BYTE12(v208) = 0;
      v211 = 0;
      __p = 0;
      v210 = 0;
      v212 = 0;
      v207 = v22;
      LOBYTE(v208) = 1;
      sub_22E890748((uint64_t)&v228, &v207);
      if (SHIBYTE(v211) < 0)
        operator delete(__p);
      sub_22E903BEC((unsigned int *)&v228);
      v23 = *(unint64_t **)v5;
      *v23 = **(_QWORD **)v5 & 0xFFFFFFFFFFFFFFC0;
      v23[12] = 0;
      v19 = *(unint64_t **)v5;
      v20 = **(_QWORD **)v5;
    }
    v185 = v17;
    if ((v20 & 0x300000000) != 0)
    {
      if ((v20 & 0x100000000) != 0)
        v24 = 164;
      else
        v24 = 184;
      if ((**(_QWORD **)(v8 + 72) & 0x200) != 0)
        v25 = 3320;
      else
        v25 = 6545;
      sub_22E8FCA40((_QWORD *)v8, *(_DWORD *)((char *)v19 + v24), v25, 0, (uint64_t)&v228);
      if ((**(_QWORD **)v5 & 0x100000000) != 0)
        v26 = 164;
      else
        v26 = 184;
      v27 = (_BYTE *)(*(unsigned int *)(*(_QWORD *)v5 + v26) | ((unint64_t)*(unsigned int *)(*(_QWORD *)v5 + v26) << 32));
      *(_QWORD *)((char *)&v208 + 4) = 0;
      BYTE12(v208) = 0;
      v211 = 0;
      __p = 0;
      v210 = 0;
      v212 = 0;
      v207 = v27;
      LOBYTE(v208) = 1;
      sub_22E890748((uint64_t)&v228, &v207);
      if (SHIBYTE(v211) < 0)
        operator delete(__p);
      sub_22E903BEC((unsigned int *)&v228);
      v19 = *(unint64_t **)v5;
      v20 = **(_QWORD **)v5;
    }
    if ((v20 & 0x6000000000) != 0
      && *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                          + 16)
       - 25 <= 1)
    {
      sub_22E8FCA40((_QWORD *)v8, *((_DWORD *)v19 + 49), 0xCF2u, 0, (uint64_t)v200);
      sub_22E903BEC(v200);
    }
    if ((~(_BYTE)v202 & 7) == 0)
    {
      v28 = *(_DWORD *)(v202 & 0xFFFFFFFFFFFFFFF8);
      if (v28 >= 3)
        v28 = 3;
      if (!v28)
      {
        sub_22E8FCA40((_QWORD *)v8, *(_DWORD *)(*(_QWORD *)v5 + 88), 0xC7Bu, 0, (uint64_t)&v228);
        LODWORD(v207) = 0;
        sub_22E8900C4((uint64_t)&v228, (int *)&v207);
        goto LABEL_112;
      }
    }
    v29 = a3;
    v240 = 0;
    v241 = v243;
    if (a3)
      v30 = 3;
    else
      v30 = 4;
    v179 = v30;
    v242 = 0x800000000;
    v244 = 0;
    v245 = 0;
    v246 = 0;
    v247 = (_QWORD *)v8;
    v248 = v203;
    v251 = 0;
    v249 = v204;
    v250 = 0;
    v252 = 0;
    v253 = 257;
    v254 = 0;
    sub_22EC56024((uint64_t)&v240);
    sub_22EC64BE8(v8, (uint64_t)&v240, a2, v5 + 8, 0, 0);
    v184 = (uint64_t *)v8;
    if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                          + 16)
       - 25 < 2)
    {
      v180 = v17 & 0xFFFFFFFFFFFFFFF0;
      v237[0] = v238;
      v237[1] = (void *)0x800000000;
      v239 = 0;
      v186 = *v9;
      if (*v9 == 7)
      {
        v31 = *(_QWORD *)(v5 + 48);
        v228 = v230;
        v32 = *(_QWORD *)(v31 + 36);
        v229 = 0x800000000;
        v231 = v32;
        v33 = (_BYTE *)(v31 + 56);
        v34 = *(unsigned int *)(v31 + 44);
        v207 = v33;
        *(_QWORD *)&v208 = v34;
        sub_22ED58288(v8, (uint64_t)&v207, (uint64_t)&v228);
        sub_22ED7355C((uint64_t)v237, (uint64_t)&v228);
        v239 = v231;
        if (v228 != v230)
          free(v228);
      }
      v177 = a3;
      v35 = v236;
      v234 = v236;
      v235 = 0x800000000;
      v36 = *(_DWORD *)(v5 + 64);
      v228 = v230;
      v229 = 0x1000000000;
      v232 = v36;
      v233 = 0;
      v37 = v242;
      if (!(_DWORD)v242)
      {
        v194 = 0;
        goto LABEL_115;
      }
      v182 = v5;
      v38 = 0;
      v39 = (uint64_t *)v241;
      v40 = v237;
      if (v186 != 7)
        v40 = 0;
      v183 = (uint64_t)v40;
      v41 = 8 * v242;
      while (1)
      {
        v42 = *v39 & 0xFFFFFFFFFFFFFFFCLL;
        if (v186 != 7)
        {
          v43 = (*(_DWORD *)(v42 + 28) & 0x7Eu) - 58 < 0xFFFFFFFC || v42 == 0;
          if (!v43
            && *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v42 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((sub_22EDC3D00(v8, v17, *(_QWORD *)(v42 + 48), 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
          {
            v58 = *(_QWORD *)(v42 + 144) & 0xFFFFFFFFFFFFFFF8;
            v59 = (*(_QWORD *)(v42 + 144) & 6) != 4 || v58 == 0;
            v44 = v42;
            if (v59)
              goto LABEL_53;
            v44 = v42;
            if (*(_QWORD *)(v58 + 16) < 8uLL)
              goto LABEL_53;
            v60 = *v39;
            v61 = v235;
            if (v235 >= (unint64_t)HIDWORD(v235))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v61 = v235;
            }
            *((_QWORD *)v234 + v61) = v60 & 3 | v42;
            LODWORD(v235) = v235 + 1;
          }
        }
        v44 = v38;
LABEL_53:
        if ((*(_DWORD *)(v42 + 28) & 0x7F) == 0x1D && v42 != 0)
        {
          v207 = 0;
          LODWORD(v208) = v232;
          BYTE4(v208) = 0;
          *((_QWORD *)&v208 + 1) = 0;
          __p = &v211;
          v210 = 0x400000000;
          v213 = 0;
          v214 = 0;
          v215 = 0;
          v216 = 0;
          v217 = 0;
          v218 = 0;
          v219 = v221;
          v220 = 0x800000000;
          v221[8] = 0;
          v221[9] = 0;
          v222 = v224;
          v223 = 0x400000000;
          v224[96] = 0;
          v225 = v227;
          v226 = 0x400000000;
          v191 = 0;
          v46 = sub_22EDC3E48(v8, v42, v183, v17, (void **)&v191, (uint64_t)&v207, 0);
          if (v46)
          {
            v47 = v46;
            sub_22ED23640((uint64_t)&v228);
            v48 = v8;
            v49 = (char *)v228 + 64 * (unint64_t)v229;
            v50 = *v39;
            v51 = *(_QWORD *)(v42 + 48);
            sub_22ECF93D4(*(_QWORD *)(v48 + 88), v47, (unint64_t)&v207, (uint64_t)v206);
            *((_QWORD *)v49 - 8) = v50;
            *((_QWORD *)v49 - 7) = v51;
            v52 = v206[0];
            v53 = v206[2];
            *((_OWORD *)v49 - 2) = v206[1];
            *((_OWORD *)v49 - 1) = v53;
            *((_OWORD *)v49 - 3) = v52;
          }
          else if ((*(_BYTE *)(*(_QWORD *)(v8 + 72) + 68) & 0x20) != 0
                 && (v54 = sub_22E9FDFC4(v8, (uint64_t)v191, 1),
                     v54 != sub_22E9FDEF4(v8, *(_QWORD *)v182 + 24)))
          {
            sub_22ED23640((uint64_t)&v228);
            v62 = (char *)v228 + 64 * (unint64_t)v229;
            v63 = v8;
            v64 = *v39;
            v65 = *(_QWORD *)(v42 + 48);
            sub_22ECF93D4(*(_QWORD *)(v63 + 88), 17, (unint64_t)&v207, (uint64_t)v205);
            *((_QWORD *)v62 - 8) = v64;
            *((_QWORD *)v62 - 7) = v65;
            v66 = v205[0];
            v67 = v205[2];
            *((_OWORD *)v62 - 2) = v205[1];
            *((_OWORD *)v62 - 1) = v67;
            *((_OWORD *)v62 - 3) = v66;
          }
          else
          {
            v55 = (unint64_t)v191;
            v56 = *v39;
            v57 = v235;
            if (v235 >= (unint64_t)HIDWORD(v235))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v57 = v235;
            }
            *((_QWORD *)v234 + v57) = v56 & 3 | v55;
            LODWORD(v235) = v235 + 1;
          }
          if (v225 != v227)
            free(v225);
          v8 = (unint64_t)v184;
          v17 = v185;
          if (v222 != v224)
            free(v222);
          if (v219 != v221)
            free(v219);
          sub_22E89277C((char **)&__p);
        }
        ++v39;
        v38 = v44;
        v41 -= 8;
        if (!v41)
        {
          v194 = v44;
          v80 = (uint64_t *)v180;
          v5 = v182;
          if (v44)
            goto LABEL_126;
          v35 = v234;
          v37 = v235;
          v36 = *(_DWORD *)(v182 + 64);
LABEL_115:
          v82 = &v35[v37];
          v83 = v184[11] + 2128;
          v207 = 0;
          *(_QWORD *)&v208 = v83;
          DWORD2(v208) = 3325;
          v84 = v202;
          v207 = (_BYTE *)sub_22E3B8AAC(v83);
          v207[*v207 + 1] = 10;
          v85 = v207;
          v86 = *v207;
          *v207 = v86 + 1;
          *(_QWORD *)&v85[8 * v86 + 16] = v84;
          v87 = v184[11] + 2128;
          v191 = 0;
          v192 = v87;
          v193 = 3313;
          v88 = v202;
          v191 = (_BYTE *)sub_22E3B8AAC(v87);
          v191[*v191 + 1] = 10;
          v89 = v191;
          v90 = *v191;
          *v191 = v90 + 1;
          *(_QWORD *)&v89[8 * v90 + 16] = v88;
          v91 = v184[11] + 2128;
          v188 = 0;
          v189 = v91;
          v190 = 5606;
          v92 = sub_22EDC9E74(v184, v35, v82, (uint64_t *)&v228, v36, (uint64_t)&v207, (uint64_t)&v191, (uint64_t *)&v188, 1, 0);
          if (v188 && v189)
            sub_22E3BB10C(v189, v188);
          v80 = (uint64_t *)v180;
          if (v191 && v192)
            sub_22E3BB10C(v192, (unint64_t)v191);
          v8 = (unint64_t)v184;
          if (v207 && (_QWORD)v208)
            sub_22E3BB10C(v208, (unint64_t)v207);
          if ((char *)v234 + 8 * v235 == (char *)v92)
            goto LABEL_268;
          v194 = *v92 & 0xFFFFFFFFFFFFFFFCLL;
LABEL_126:
          if (((v93 = *v80) != 0 && *(_BYTE *)(v93 + 16) == 26
             || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v93 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
             && (v93 = sub_22F10CF48(*v80)) != 0)
            && (*(_WORD *)(v93 + 22) & 0x3C0) != 0)
          {
            if ((**(_QWORD **)(v8 + 72) & 0x20) != 0)
              v128 = 5288;
            else
              v128 = 3914;
            v129 = *(_QWORD *)(v8 + 88) + 2128;
            v207 = 0;
            *(_QWORD *)&v208 = v129;
            DWORD2(v208) = v128;
            v130 = *(_QWORD *)(v194 + 48);
            v207 = (_BYTE *)sub_22E3B8AAC(v129);
            v207[*v207 + 1] = 9;
            v131 = v207;
            v132 = *v207;
            *v207 = v132 + 1;
            *(_QWORD *)&v131[8 * v132 + 16] = v130;
            v133 = *(_QWORD *)(v8 + 88) + 2128;
            v191 = 0;
            v192 = v133;
            v193 = 5608;
            v134 = v194;
            v135 = *(_QWORD *)(*(_QWORD *)(v194 + 48) & 0xFFFFFFFFFFFFFFF0);
            if (!v135 || *(_BYTE *)(v135 + 16) != 26)
            {
              if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v135 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
              {
                v135 = sub_22F10CF48(v135);
                v134 = v194;
              }
              else
              {
                v135 = 0;
              }
            }
            v153 = sub_22F32D00C((int32x2_t *)v8, (uint64_t)&v207, (uint64_t)&v191, v135, *(_DWORD *)(v134 + 24), v93, *(_DWORD *)(v5 + 72));
            if (v191 && v192)
              sub_22E3BB10C(v192, (unint64_t)v191);
            if (v207 && (_QWORD)v208)
              sub_22E3BB10C(v208, (unint64_t)v207);
            v154 = (**(_BYTE **)(v8 + 72) & 0x20) != 0 ? 0 : v153;
            if ((v154 & 1) != 0)
            {
LABEL_268:
              v155 = v228;
              if ((_DWORD)v229)
              {
                v156 = (unint64_t)v229 << 6;
                v157 = (char *)v228 + 16;
                do
                {
                  sub_22ECF95E4((unint64_t)v157);
                  v157 += 64;
                  v156 -= 64;
                }
                while (v156);
                v155 = v228;
              }
              if (v155 != v230)
                free(v155);
              if (v234 != v236)
                free(v234);
              if (v237[0] != v238)
                free(v237[0]);
              goto LABEL_288;
            }
          }
          v94 = v194;
          v95 = *(_QWORD *)(v194 + 144);
          v97 = (v95 & 6) != 4 && (v95 & 6) != 2;
          if (v95 < 8 || v97)
          {
            sub_22E8FCA40((_QWORD *)v8, *(_DWORD *)(v5 + 64), 0xCFAu, 0, (uint64_t)&v207);
            v98 = sub_22E890024((uint64_t)&v207, (uint64_t *)&v194);
            v99 = *(_QWORD *)(v194 + 144) & 6;
            v100 = (_QWORD *)(*(_QWORD *)(v194 + 144) & 0xFFFFFFFFFFFFFFF8);
            if (v99 == 4 && v100 != 0)
            {
              v100 += 2;
              goto LABEL_164;
            }
            v102 = 0;
            if (v99 == 2 && v100)
LABEL_164:
              v102 = (*v100 & 6) == 2;
            LOBYTE(v191) = v102;
            sub_22E894E38(v98, (unsigned __int8 *)&v191);
            sub_22E903BEC((unsigned int *)&v207);
            sub_22E8FCA40((_QWORD *)v8, *(_DWORD *)(v194 + 24), 0x15E8u, 0, (uint64_t)v187);
            sub_22E903BEC(v187);
            goto LABEL_268;
          }
          if ((*(_BYTE *)(v194 + 104) & 3) != 0)
          {
LABEL_148:
            v103 = sub_22E49F868(v94);
            v104 = v194;
            if (!v103 || !v194)
              goto LABEL_184;
          }
          else
          {
            v104 = sub_22E3CD31C((uint64_t *)(v194 + 104), v194);
            if (!v104)
            {
              v94 = v194;
              goto LABEL_148;
            }
          }
          LOBYTE(v207) = 0;
          v120 = *(_QWORD *)(v104 + 144) & 6;
          v121 = *(_QWORD *)(v104 + 144) & 0xFFFFFFFFFFFFFFF8;
          if (v120 == 4 && v121)
          {
            v125 = (_DWORD *)(v121 + 16);
            v124 = (unsigned int *)(v121 + 40);
LABEL_180:
            v122 = ((*v125 >> 1) & 3u) + 1;
            v123 = *v124;
          }
          else
          {
            v122 = 0;
            if (v120 == 2)
            {
              v123 = 0;
              if (v121)
              {
                v124 = (unsigned int *)(v121 + 8);
                v125 = (_DWORD *)(*(_QWORD *)(v104 + 144) & 0xFFFFFFFFFFFFFFF8);
                goto LABEL_180;
              }
            }
            else
            {
              v123 = 0;
            }
          }
          sub_22ED6C90C(v8, *(unsigned int *)(v5 + 64), v179, v104, v122, v123, &v207);
          if ((v126 & 1) != 0 || (_BYTE)v207)
            goto LABEL_268;
          v104 = v194;
LABEL_184:
          if ((*(_BYTE *)(v104 + 29) & 1) == 0)
          {
LABEL_185:
            if ((*(_BYTE *)(*(_QWORD *)(v8 + 72) + 104) & 0x20) != 0)
            {
              sub_22F3469F8((uint64_t *)v104);
              v104 = v194;
            }
            sub_22EA63DD8((_QWORD *)v8, a2, v104, *(_QWORD *)v5 + 24, 1);
            sub_22E9114FC((_QWORD *)v8, v194);
            if (v177)
            {
              v127 = 3;
            }
            else if (sub_22E49F808(v194))
            {
              if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 88) + 15088) + 148) == 11)
                v127 = 3;
              else
                v127 = 4;
            }
            else
            {
              v127 = 4;
            }
            sub_22EFC2530(v194, v127, *(_DWORD *)(v5 + 64));
            if (sub_22EFBF86C(v194, (unint64_t *)&v207, 0))
            {
              (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(v8 + 96) + 24))(*(_QWORD *)(v8 + 96), v194);
            }
            else if (v127 == 4)
            {
              sub_22EE44C50(v8, *(_DWORD *)(v5 + 64), v194, 0, 0, 0);
            }
            v136 = *(_QWORD *)(v194 + 144) & 0xFFFFFFFFFFFFFFF8;
            if ((*(_QWORD *)(v194 + 144) & 6) != 4 || v136 == 0)
              v138 = 0;
            else
              v138 = *(_QWORD *)(v136 + 16) & 0xFFFFFFFFFFFFFFF8;
            if (*(_DWORD *)(v5 + 40) != 7 && !v138)
            {
              v139 = *(_QWORD *)(v5 + 16);
              if (v139)
              {
                while (1)
                {
                  v140 = *(_QWORD *)(v139 + 8);
                  if ((v140 & 4) != 0)
                  {
                    v141 = *(_QWORD *)(v139 + 16);
                    if (v141)
                    {
                      if (*(_BYTE *)(v141 + 16) == 46)
                        break;
                    }
                  }
                  v139 = v140 & 0xFFFFFFFFFFFFFFF8;
                  if ((v140 & 0xFFFFFFFFFFFFFFF8) == 0)
                  {
                    sub_22E8FCA40((_QWORD *)v8, *(_DWORD *)(v5 + 64), 0x1473u, 0, (uint64_t)&v207);
                    v142 = sub_22E890024((uint64_t)&v207, (uint64_t *)&v194);
                    v191 = *(_BYTE **)(v5 + 8);
                    sub_22E8906A0(v142, (uint64_t *)&v191);
                    sub_22E903BEC((unsigned int *)&v207);
                    break;
                  }
                }
              }
            }
            if ((*(_BYTE *)(*(_QWORD *)(v8 + 72) + 104) & 0x20) == 0
              || sub_22EA582C4((_QWORD *)v8, v194, *(_DWORD *)(v5 + 64)))
            {
              if (!v138)
                v138 = sub_22EFBF824(v194);
              sub_22ED6F590(v8, v138, *(_DWORD *)(v5 + 64), *(_QWORD *)(v5 + 16) != 0, v127);
            }
            goto LABEL_268;
          }
          sub_22EFC8E88(v104);
          v159 = *((unsigned int *)v158 + 2);
          if ((_DWORD)v159)
          {
            v160 = 8 * v159;
            v161 = *v158;
            while (*(_WORD *)(*(_QWORD *)v161 + 32) != 193)
            {
              v161 += 8;
              v160 -= 8;
              if (!v160)
              {
                v104 = v194;
                goto LABEL_185;
              }
            }
          }
          else
          {
            v161 = *v158;
          }
          v104 = v194;
          if (v161 == *v158 + 8 * v159 || !v177)
            goto LABEL_316;
          v169 = *(_QWORD *)(v194 + 16);
          v170 = v169 & 0xFFFFFFFFFFFFFFF8;
          if ((v169 & 4) != 0)
            v170 = *(_QWORD *)v170;
          v171 = v170 && (*(_WORD *)(v170 + 8) & 0x7Fu) - 38 >= 0xFFFFFFFD;
          if (!v171
            || ((v172 = *(_QWORD *)(v170 - 24) & 0xFFFFFFFFFFFFFFF8, (*(_QWORD *)(v170 - 24) & 7) == 0)
              ? (v173 = v172 == 0)
              : (v173 = 1),
                v173
             || (v174 = *(_QWORD *)(v172 + 16), *(_DWORD *)v174 != 8)
             || *(_QWORD *)(v174 + 16) != 0x79617272616C6176))
          {
LABEL_316:
            v8 = (unint64_t)v184;
            goto LABEL_185;
          }
          v175 = *(_QWORD *)(v170 - 48);
          v176 = (_QWORD *)(v175 & 0xFFFFFFFFFFFFFFF8);
          if ((v175 & 4) != 0)
          {
            v176 = (_QWORD *)*v176;
            if (!v176)
              goto LABEL_316;
          }
          else if (!v176)
          {
            goto LABEL_316;
          }
          v8 = (unint64_t)v184;
          if (sub_22EFC84D4((unint64_t)v176))
            goto LABEL_268;
          goto LABEL_185;
        }
      }
    }
    if ((_DWORD)v240 == 5)
      goto LABEL_288;
    v68 = v5;
    v237[0] = 0;
    if ((_DWORD)v240 == 2)
    {
      v181 = (uint64_t *)(v17 & 0xFFFFFFFFFFFFFFF0);
      v69 = *(_QWORD *)v241 & 0xFFFFFFFFFFFFFFFCLL;
      v70 = *(_DWORD *)(v69 + 28);
      v71 = v70 & 0x7F;
      if (v71 > 0x2F)
      {
        v72 = v70 & 0x7F;
        v73 = *(_QWORD *)v241 & 0xFFFFFFFFFFFFFFFCLL;
      }
      else
      {
        v72 = v70 & 0x7F;
        v73 = *(_QWORD *)v241 & 0xFFFFFFFFFFFFFFFCLL;
        if (((1 << (v70 & 0x7F)) & 0xC00000060000) != 0)
        {
          v73 = sub_22EFBAEA4(*(_QWORD *)v241 & 0xFFFFFFFFFFFFFFFCLL);
          v72 = *(_DWORD *)(v73 + 28) & 0x7F;
        }
      }
      if ((v72 - 60) >= 7)
        v74 = 0;
      else
        v74 = v73;
      v237[0] = (void *)v74;
      v234 = 0;
      if (v71 <= 0x2F && ((1 << v71) & 0xC00000060000) != 0)
      {
        v69 = sub_22EFBAEA4(v69);
        v70 = *(_DWORD *)(v69 + 28);
      }
      if ((v70 & 0x7F) == 0x1F)
      {
        v234 = (void *)v69;
        v75 = *v181;
        LOBYTE(v228) = 0;
        v76 = sub_22F110500((uint64_t)&v228, v75);
        if (v76 && *(_QWORD *)(v76 + 24) <= 0xFuLL && (*(_BYTE *)(v76 + 17) & 4) == 0)
        {
          v77 = *v18;
          v78 = *v18;
          while (1)
          {
            if ((v78 & 0xF) != 0)
              goto LABEL_108;
            v79 = *(unsigned __int8 *)(*(_QWORD *)(v78 & 0xFFFFFFFFFFFFFFF0) + 16);
            if (v79 > 0x39)
            {
LABEL_103:
              if (sub_22F115668(v78))
                v77 = v78;
              v78 = sub_22F115B7C(v78);
              if (!v78)
                goto LABEL_286;
            }
            else
            {
              if (v79 == 24)
                goto LABEL_285;
              if (v79 == 26)
              {
                if ((*(_BYTE *)(v78 + 23) & 0x10) != 0)
                {
LABEL_285:
                  v77 = v78;
LABEL_286:
                  v162 = sub_22F115668(v77);
                  sub_22E8FCA40(v184, v162, 0xB4Au, 0, (uint64_t)v197);
                  v108 = (unsigned int *)v197;
LABEL_287:
                  sub_22E903BEC(v108);
                  goto LABEL_288;
                }
              }
              else if (((1 << v79) & 0x20000000200003CLL) == 0)
              {
                goto LABEL_103;
              }
LABEL_108:
              v78 = sub_22F115B7C(v78);
            }
          }
        }
        if (*v9 != 7)
        {
          sub_22E8FCA40(v184, *(_DWORD *)(v68 + 64), 0xD06u, 0, (uint64_t)&v228);
          sub_22E9AEF84((uint64_t)&v228, (uint64_t *)&v234);
          sub_22E903BEC((unsigned int *)&v228);
          sub_22E8FCA40(v184, *(_DWORD *)(v69 + 24), 0x15E8u, 0, (uint64_t)v196);
          v108 = (unsigned int *)v196;
          goto LABEL_287;
        }
        v178 = v29;
        v112 = v68;
        v113 = *(_QWORD *)(v68 + 48);
        v228 = v230;
        v114 = *(_QWORD *)(v113 + 36);
        v229 = 0x800000000;
        v231 = v114;
        v115 = (_BYTE *)(v113 + 56);
        v116 = *(unsigned int *)(v113 + 44);
        v207 = v115;
        *(_QWORD *)&v208 = v116;
        sub_22ED58288((uint64_t)v184, (uint64_t)&v207, (uint64_t)&v228);
        v118 = (void *)sub_22ED6569C(v184, v69, v117, *(_DWORD *)(v68 + 64), (uint64_t)&v228);
        if (v119)
          goto LABEL_168;
        if (!v118)
        {
          sub_22E8FCA40(v184, *(_DWORD *)(v68 + 64), 0xCF5u, 0, (uint64_t)v195);
          sub_22E903BEC(v195);
LABEL_168:
          if (v228 != v230)
            free(v228);
LABEL_288:
          if (BYTE1(v253))
          {
            if ((_DWORD)v240 == 5)
            {
              sub_22EC64D18(v247, (uint64_t)&v240);
            }
            else if (v245 && (*(_DWORD *)(v247[9] + 52) & 0x400000) != 0)
            {
              sub_22E90B5FC((unint64_t)v247, (uint64_t)&v240);
            }
          }
          if (v244)
          {
            v168 = sub_22EC6CBD0(v244);
            MEMORY[0x2348A0E9C](v168, 0x10E0C409F09D3C3);
          }
          if (v241 != v243)
            free(v241);
          return 0;
        }
        v237[0] = v118;
        if (v228 != v230)
          free(v228);
        goto LABEL_230;
      }
      v8 = (unint64_t)v184;
      if (v74 && (*(_DWORD *)(v74 + 28) & 0x7F) != 0x40)
      {
        v105 = *(_QWORD *)(v74 + 16);
        v106 = v105 & 0xFFFFFFFFFFFFFFF8;
        if ((v105 & 4) != 0)
          v106 = *(_QWORD *)v106;
        if ((*(_WORD *)(v106 + 8) & 0x7Eu) - 34 < 4)
        {
          v107 = (_QWORD *)sub_22EFBE104(v74);
          if (!v107 || *v107 <= 7uLL)
          {
            sub_22E8FCA40(v184, *(_DWORD *)(v68 + 64), 0xCF3u, 0, (uint64_t)&v228);
            sub_22E890024((uint64_t)&v228, (uint64_t *)v237);
            sub_22E903BEC((unsigned int *)&v228);
            sub_22E8FCA40(v184, *((_DWORD *)v237[0] + 6), 0x15E8u, 0, (uint64_t)v198);
            v108 = (unsigned int *)v198;
            goto LABEL_287;
          }
          v178 = v29;
          v69 = 0;
          v112 = v68;
LABEL_230:
          v143 = *(_QWORD *)(v112 + 16);
          if (v143)
          {
            while (1)
            {
              v144 = *(_QWORD *)(v143 + 8);
              if ((v144 & 4) != 0)
              {
                v145 = *(_QWORD *)(v143 + 16);
                if (v145)
                {
                  if (*(_BYTE *)(v145 + 16) == 46)
                    break;
                }
              }
              v143 = v144 & 0xFFFFFFFFFFFFFFF8;
              if ((v144 & 0xFFFFFFFFFFFFFFF8) == 0)
                goto LABEL_235;
            }
          }
          else
          {
LABEL_235:
            if (!v69)
            {
              sub_22E8FCA40(v184, *(_DWORD *)(v112 + 64), 0x1473u, 0, (uint64_t)&v228);
              v146 = sub_22E890024((uint64_t)&v228, (uint64_t *)v237);
              v207 = *(_BYTE **)(v112 + 8);
              sub_22E8906A0(v146, (uint64_t *)&v207);
              sub_22E903BEC((unsigned int *)&v228);
            }
          }
          sub_22ED6F590((uint64_t)v184, (uint64_t)v237[0], *(_DWORD *)(v112 + 64), 1, v179);
          v147 = sub_22EFBC2B0((unint64_t)v237[0]);
          v148 = sub_22EFBE4A0((unint64_t)v237[0]);
          LOBYTE(v188) = 0;
          sub_22ED6C90C((uint64_t)v184, *(unsigned int *)(v112 + 64), v179, (uint64_t)v237[0], v147, v148, &v188);
          if ((v149 & 1) != 0)
            goto LABEL_288;
          if (!(_BYTE)v188)
          {
            sub_22EFBEC04((uint64_t)v237[0], v179, *(_DWORD *)(v68 + 64));
            sub_22EA63DD8(v184, a2, (uint64_t)v237[0], *(_QWORD *)v68 + 24, 1);
            if (v69)
              sub_22E9114FC(v184, (uint64_t)v237[0]);
            if (!v178)
              sub_22EE46380((unint64_t)v184, *(_DWORD *)(v68 + 64), (uint64_t)v237[0], 0, 0, 0);
          }
          if (!v69
            || (*(_QWORD *)((*((_QWORD *)v237[0] + 6) & 0xFFFFFFFFFFFFFFF0) + 8) | *((_QWORD *)v237[0] + 6) & 7) == (v181[1] | v185 & 7))
          {
            goto LABEL_288;
          }
          v150 = *v18;
          v151 = *v18;
          while (1)
          {
            if ((v151 & 0xF) != 0)
              goto LABEL_256;
            v152 = *(unsigned __int8 *)(*(_QWORD *)(v151 & 0xFFFFFFFFFFFFFFF0) + 16);
            if (v152 > 0x39)
            {
LABEL_251:
              if (sub_22F115668(v151))
                v150 = v151;
              v151 = sub_22F115B7C(v151);
              if (!v151)
                goto LABEL_298;
            }
            else
            {
              if (v152 == 24)
                goto LABEL_297;
              if (v152 == 26)
              {
                if ((*(_BYTE *)(v151 + 23) & 0x10) != 0)
                {
LABEL_297:
                  v150 = v151;
LABEL_298:
                  v163 = sub_22F115668(v150);
                  sub_22E8FCA40(v184, v163, 0xE6Bu, 0, (uint64_t)&v228);
                  LODWORD(v191) = 0;
                  v164 = sub_22E8900C4((uint64_t)&v228, (int *)&v191);
                  v165 = sub_22E9AEF84(v164, (uint64_t *)&v234);
                  v166 = sub_22E8901B8(v165, (uint64_t *)&v201);
                  v207 = (_BYTE *)*((_QWORD *)v237[0] + 6);
                  sub_22E8901B8(v166, (uint64_t *)&v207);
                  sub_22E903BEC((unsigned int *)&v228);
                  sub_22E8FCA40(v184, *(_DWORD *)(v69 + 24), 0x17D7u, 0, (uint64_t)&v228);
                  LODWORD(v191) = 2;
                  v167 = sub_22E8900C4((uint64_t)&v228, (int *)&v191);
                  v207 = *(_BYTE **)(v69 + 40);
                  sub_22E894538(v167, (uint64_t *)&v207);
                  v108 = (unsigned int *)&v228;
                  goto LABEL_287;
                }
              }
              else if (((1 << v152) & 0x20000000200003CLL) == 0)
              {
                goto LABEL_251;
              }
LABEL_256:
              v151 = sub_22F115B7C(v151);
            }
          }
        }
      }
    }
    sub_22E8FCA40((_QWORD *)v8, *(_DWORD *)(v68 + 64), 0xCFDu, 0, (uint64_t)&v228);
    sub_22E894538((uint64_t)&v228, &v202);
    sub_22E903BEC((unsigned int *)&v228);
    if ((_DWORD)v242)
    {
      v109 = (uint64_t *)v241;
      v110 = 8 * v242;
      do
      {
        v111 = *v109++;
        sub_22E8FCA40((_QWORD *)v8, *(_DWORD *)((v111 & 0xFFFFFFFFFFFFFFFCLL) + 24), 0x15E8u, 0, (uint64_t)v199);
        sub_22E903BEC(v199);
        v110 -= 8;
      }
      while (v110);
    }
    goto LABEL_288;
  }
  if ((*(_WORD *)(v5 + 1088) & 1) == 0 && (**(_QWORD **)v5 & 0x3F000) != 0x32000)
  {
    sub_22E8FCA40((_QWORD *)v8, *(_DWORD *)(*(_QWORD *)v5 + 88), 0xD00u, 0, (uint64_t)&v228);
    v207 = *(_BYTE **)(*(_QWORD *)v5 + 88);
    v21 = sub_22E8906A0((uint64_t)&v228, (uint64_t *)&v207);
    v237[0] = *(void **)(v5 + 72);
    sub_22E8906A0(v21, (uint64_t *)v237);
    goto LABEL_112;
  }
  return 0;
}

unint64_t sub_22ED71588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t *v7;
  BOOL v8;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  void *__p;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30[12];

  v7 = (uint64_t *)(a4 + 8);
  v6 = *(_QWORD *)(a4 + 8);
  if (*(_DWORD *)a4)
    v8 = *(_DWORD *)(a4 + 4) == 0;
  else
    v8 = 1;
  if (!v8 && v6 == 0)
    return 0;
  v14 = a3;
  if (a2 && (_DWORD)a3 && !*(_QWORD *)(a2 + 64))
  {
    if ((**(_QWORD **)(a1 + 72) & 0x200) != 0)
      v18 = 6461;
    else
      v18 = 5392;
    sub_22E8FCA40((_QWORD *)a1, v14, v18, 0, (uint64_t)v30);
    v25 = 0;
    v24 = 0;
    v27 = 0;
    v28 = 0;
    __p = 0;
    v29 = 0;
    v22 = v14 | (a3 << 32);
    v23 = 1;
    sub_22E890748((uint64_t)v30, &v22);
    if (SHIBYTE(v28) < 0)
      operator delete(__p);
    sub_22E903BEC((unsigned int *)v30);
    if (!*v7)
      goto LABEL_12;
LABEL_20:
    v15 = sub_22F0ABC50(v7, *(_QWORD *)(a1 + 88));
    v16 = v19;
    goto LABEL_21;
  }
  if (v6)
    goto LABEL_20;
LABEL_12:
  v15 = 0;
  v16 = 0;
LABEL_21:
  v30[0] = 0;
  if (v14)
    v20 = 5;
  else
    v20 = 6;
  v21 = sub_22ED716FC((_QWORD *)a1, v20, v14, v15, v16, a5, a6, v30, 1);
  if (v21 >= 0x10)
    return sub_22EE7D030(a1, v21, v30[0]);
  else
    return 0;
}

unint64_t sub_22ED716FC(_QWORD *a1, uint64_t a2, unsigned int a3, unint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t *a8, char a9)
{
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v21;

  v14 = sub_22ED717D8(a1, a2, a3, a4, a5, a6, a7, a9);
  if (v14 < 0x10)
    return 0;
  v15 = v14;
  v16 = a1[11];
  v17 = sub_22F11598C(v14);
  v18 = sub_22E3CD3D4(v16 + 2032, v17 + 8, 3);
  *(_QWORD *)v18 = v15;
  v19 = v18 + 8;
  *a8 = v18;
  if (*(_BYTE *)(*(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0) + 16) == 18)
  {
    *(_DWORD *)(v18 + 8) = a3;
    *(_QWORD *)(v18 + 16) = a5;
    *(_DWORD *)(v18 + 24) = a7;
  }
  else
  {
    *(_DWORD *)(v18 + 8) = a3;
    *(_QWORD *)(v18 + 16) = a5;
    v21 = sub_22F115954(*(_QWORD *)(v15 + 40));
    *(_DWORD *)((v19 + (unint64_t)v21 + 15) / v21 * v21) = a7;
  }
  return v15;
}

unint64_t sub_22ED717D8(_QWORD *a1, uint64_t a2, unsigned int a3, unint64_t a4, uint64_t a5, uint64_t a6, int a7, char a8)
{
  unint64_t v16;
  unint64_t v17;
  int v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  _BOOL4 v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v63;
  unint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unsigned int v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE v86[96];
  _BYTE v87[24];
  _BYTE __p[23];
  __int16 v89;
  uint64_t v90;
  _BYTE v91[24];
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  __int128 v96;
  void *v97[2];
  uint64_t v98;
  void *v99;
  uint64_t v100;
  _BYTE v101[64];
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  int v107;
  _QWORD v108[3];
  __int16 v109;
  int v110;
  char v111;
  uint64_t v112;

  v112 = *MEMORY[0x24BDAC8D0];
  v96 = 0u;
  *(_OWORD *)v97 = 0u;
  sub_22E8ACE30((uint64_t)&v96, a4, a5);
  v95 = 0;
  if (a4)
  {
    v16 = sub_22E958204((uint64_t)a1, (uint64_t)&v96, 0);
    v95 = v16;
    if (!v16)
    {
      v17 = sub_22EF65A30(a1[11], a2, a4, a6, 0);
      goto LABEL_163;
    }
    if ((sub_22E958490(a1, &v96, v16) & 1) != 0)
    {
      v17 = 0;
      goto LABEL_163;
    }
  }
  v94 = a6;
  v18 = a7;
  v98 = 0;
  v99 = v101;
  v100 = 0x800000000;
  v102 = 0;
  v103 = 0;
  v104 = 0;
  v105 = a1;
  v106 = a6;
  v107 = a7;
  sub_22EFC6D6C((uint64_t)v108, a6);
  v108[1] = 0;
  v108[2] = 0;
  v109 = 0;
  v110 = 257;
  v111 = 0;
  sub_22EC56024((uint64_t)&v98);
  if (v95)
    sub_22EC64868((uint64_t)a1, (uint64_t)&v98, v95, (uint64_t)&v96);
  else
    sub_22EC63520(a1, &v98, a1[1611], 0, 0);
  v17 = 0;
  switch((int)v98)
  {
    case 0:
      if (!v95)
      {
        v22 = 0;
LABEL_59:
        v24 = 0;
        if (v22)
          v23 = 5029;
        else
          v23 = 5075;
        goto LABEL_62;
      }
      *(_QWORD *)v87 = a4;
      *(_QWORD *)&v87[8] = a5;
      v19 = *(_DWORD **)(a6 + 16);
      if (*v19 != 4)
        goto LABEL_17;
      if (!a4)
        goto LABEL_17;
      if (v19[4] != 1701869940)
        goto LABEL_17;
      if ((*(_BYTE *)(a4 + 8) & 4) == 0)
        goto LABEL_17;
      if (!*(_QWORD *)(a4 + 16))
        goto LABEL_17;
      v20 = sub_22F0AB4E0((uint64_t)v87);
      if ((v20 & 0xF) != 0)
        goto LABEL_17;
      v53 = v20;
      if (!v20)
        goto LABEL_17;
      if (*(_BYTE *)(*(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0) + 16) != 46)
        goto LABEL_17;
      if (!*(_DWORD *)(v20 + 20))
        goto LABEL_17;
      v54 = v21;
      *(_QWORD *)v91 = *(_QWORD *)(v20 + 32);
      v55 = sub_22F0F08CC((uint64_t *)v91);
      if (!v55)
        goto LABEL_17;
      v56 = v55;
      if ((sub_22F1110EC(v53, 0) & 1) != 0)
        goto LABEL_17;
      v57 = *(_QWORD *)(v56 + 40);
      if ((v57 & 7) != 0)
        goto LABEL_17;
      v58 = v57 & 0xFFFFFFFFFFFFFFF8;
      if (!v58)
        goto LABEL_17;
      v59 = *(_QWORD *)(v58 + 16);
      if (*(_DWORD *)v59 != 9)
        goto LABEL_17;
      v60 = *(_QWORD *)(v59 + 16);
      v61 = *(unsigned __int8 *)(v59 + 24);
      if (v60 != 0x695F656C62616E65 || v61 != 102)
      {
LABEL_17:
        v22 = v95;
        goto LABEL_59;
      }
      v63 = *(_QWORD *)(v54 + 16);
      *(_OWORD *)v91 = *(_OWORD *)(v53 + 40);
      *(_QWORD *)&v91[16] = *(_QWORD *)(v53 + 56);
      v92 = v63;
      sub_22F0EFE08((uint64_t)v91);
      v65 = v64;
      v93 = v64;
      if (*(_DWORD *)(v53 + 40) != 7
        || *sub_22EFFBBCC((unsigned __int8 *)(v63 & 0xFFFFFFFFFFFFFFFCLL)) == 117
        || (v63 & 0xFFFFFFFFFFFFFFFCLL) == 0)
      {
        sub_22E8FCA40(a1, v65, 0x13A6u, 0, (uint64_t)v91);
        v84 = sub_22E894FB4((uint64_t)v91, (uint64_t *)&v95);
        sub_22E8906A0(v84, (uint64_t *)&v93);
        goto LABEL_72;
      }
      sub_22ED60438((unsigned __int8 *)(v63 & 0xFFFFFFFFFFFFFFFCLL), (uint64_t)a1, (unsigned __int8 **)v91);
      *(_OWORD *)v87 = *(_OWORD *)&v91[8];
      v66 = *(_QWORD *)v91;
      *(_QWORD *)&v87[16] = v92;
      sub_22EFF605C(*(uint64_t *)v91);
      sub_22E8FCA40(a1, v67, 0x13A7u, 0, (uint64_t)v91);
      v68 = sub_22E90749C((uint64_t)v91, v87);
      sub_22F0D4E74(v66);
      v90 = v69;
      sub_22E8906A0(v68, &v90);
      sub_22E903BEC((unsigned int *)v91);
      if ((v87[23] & 0x80000000) != 0)
        operator delete(*(void **)v87);
      goto LABEL_74;
    case 1:
      goto LABEL_52;
    case 2:
      v24 = *(_QWORD *)v99 & 0xFFFFFFFFFFFFFFFCLL;
      v25 = *(_DWORD *)(v24 + 28) & 0x7F;
      if (v25 > 0x2F || ((1 << v25) & 0xC00000060000) == 0)
      {
        v28 = *(_DWORD *)(v24 + 28) & 0x7F;
        v27 = *(_QWORD *)v99 & 0xFFFFFFFFFFFFFFFCLL;
      }
      else
      {
        v27 = sub_22EFBAEA4(*(_QWORD *)v99 & 0xFFFFFFFFFFFFFFFCLL);
        v28 = *(_DWORD *)(v27 + 28) & 0x7F;
      }
      if ((v28 - 43) < 0xFFFFFFF6)
      {
        if ((*(_BYTE *)(a1[9] + 1) & 8) == 0
          || (v25 <= 0x2F ? (v29 = ((1 << v25) & 0xC00000060000) == 0) : (v29 = 1),
              v29 ? (v31 = v25, v30 = v24) : (v30 = sub_22EFBAEA4(v24), v31 = *(_DWORD *)(v30 + 28) & 0x7F),
              v31 - 33 < 0xFFFFFFF9 || v31 > 0x20 || ((1 << v31) & 0x150000000) == 0))
        {
          v22 = v95;
          if (v95)
            v23 = 5032;
          else
            v23 = 5033;
          if (v25 <= 0x2F && ((1 << v25) & 0xC00000060000) != 0)
            v24 = sub_22EFBAEA4(v24);
LABEL_62:
          v40 = v96;
          if (a3)
            v40 = a3;
          *(_DWORD *)v87 = v40;
          *(_DWORD *)&v87[4] = a7;
          sub_22E8FCA40(a1, a7, v23, 0, (uint64_t)v91);
          v41 = sub_22E8906A0((uint64_t)v91, (uint64_t *)v87);
          if (v22)
          {
            v42 = sub_22E894538(v41, &v94);
            sub_22E894FB4(v42, (uint64_t *)&v95);
          }
          else
          {
            sub_22E894538(v41, &v94);
          }
          sub_22E903BEC((unsigned int *)v91);
          if (v24)
          {
            if (v95)
              v43 = 6140;
            else
              v43 = 6141;
            sub_22E8FCA40(a1, *(_DWORD *)(v24 + 24), v43, 0, (uint64_t)v91);
            sub_22E894538((uint64_t)v91, &v94);
LABEL_72:
            v44 = (unsigned int *)v91;
            goto LABEL_73;
          }
LABEL_74:
          v17 = 0;
          goto LABEL_154;
        }
        if ((a8 & 1) != 0)
        {
          v51 = a1[11];
          v52 = sub_22F36D4FC(v51, v30 & 0xFFFFFFFFFFFFFFF9, 0, 0);
          goto LABEL_151;
        }
        if (a4 && (*(_BYTE *)(a4 + 8) & 4) != 0)
        {
          *(_QWORD *)v87 = *(_QWORD *)(a4 + 16) & 0xFFFFFFFFFFFFFFF0;
          if (*(_QWORD *)v87)
          {
            sub_22E8FCA40(a1, a7, 0xCA5u, 0, (uint64_t)v91);
            LODWORD(v93) = sub_22F31CFF0((uint64_t)a1, v30 & 0xFFFFFFFFFFFFFFF9);
            v83 = sub_22E8900C4((uint64_t)v91, (int *)&v93);
            sub_22E8901B8(v83, (uint64_t *)v87);
            goto LABEL_123;
          }
        }
        else
        {
          *(_QWORD *)v87 = 0;
        }
        sub_22E8FCA40(a1, a7, 0xC74u, 0, (uint64_t)v91);
        LODWORD(v93) = sub_22F31CFF0((uint64_t)a1, v30 & 0xFFFFFFFFFFFFFFF9);
        sub_22E8900C4((uint64_t)v91, (int *)&v93);
LABEL_123:
        sub_22E903BEC((unsigned int *)v91);
        sub_22E8FCA40(a1, *(_DWORD *)(v30 + 24), 0x17D6u, 0, (uint64_t)v86);
        v44 = (unsigned int *)v86;
LABEL_73:
        sub_22E903BEC(v44);
        goto LABEL_74;
      }
      if (v95)
      {
        if ((*(_WORD *)(v95 + 8) & 0x7Fu) - 35 >= 3)
          v39 = 0;
        else
          v39 = v95 - 64;
      }
      else
      {
        v39 = 0;
      }
      v45 = v28 - 35;
      if (v45 >= 3)
        v46 = 0;
      else
        v46 = v27;
      if ((_DWORD)a2 != 5)
        goto LABEL_145;
      if (!v39)
        goto LABEL_145;
      if (v45 > 2)
        goto LABEL_145;
      v47 = v27;
      v48 = sub_22EFC3A88(v46);
      v27 = v47;
      if (!v48)
        goto LABEL_145;
      v49 = *(_WORD *)(v46 + 72) & 0x7F;
      v50 = -40;
      if (v49 > 0x46)
      {
        switch(v49)
        {
          case 'S':
            goto LABEL_125;
          case 'G':
            v50 = -56;
            goto LABEL_125;
          case 'Q':
            goto LABEL_125;
        }
      }
      else
      {
        if (v49 <= 0x18)
        {
          if (v49 == 16)
          {
LABEL_87:
            v50 = -48;
            goto LABEL_125;
          }
          if (((1 << v49) & 0x1066) != 0)
            goto LABEL_125;
          if (v49 == 24)
            goto LABEL_87;
        }
        if (v49 == 70)
        {
LABEL_118:
          v50 = -64;
          goto LABEL_125;
        }
      }
      if (v49 - 52 >= 6)
      {
        if (v49 - 33 >= 5)
          goto LABEL_87;
        goto LABEL_118;
      }
      v50 = -72;
LABEL_125:
      v70 = *(_QWORD *)(v46 + 64 + v50 + 16);
      v71 = v70 & 0xFFFFFFFFFFFFFFF8;
      if ((v70 & 4) != 0)
        v71 = *(_QWORD *)v71;
      v72 = *(_WORD *)(v71 + 8) & 0x7F;
      v73 = -40;
      if (v72 > 0x46)
      {
        switch(v72)
        {
          case 'S':
            goto LABEL_142;
          case 'G':
            v73 = -56;
            goto LABEL_142;
          case 'Q':
            goto LABEL_142;
        }
      }
      else
      {
        if (v72 <= 0x18)
        {
          if (v72 == 16)
          {
LABEL_130:
            v73 = -48;
            goto LABEL_142;
          }
          if (((1 << v72) & 0x1066) != 0)
            goto LABEL_142;
          if (v72 == 24)
            goto LABEL_130;
        }
        if (v72 == 70)
        {
LABEL_140:
          v73 = -64;
          goto LABEL_142;
        }
      }
      if (v72 - 52 >= 6)
      {
        if (v72 - 33 >= 5)
          goto LABEL_130;
        goto LABEL_140;
      }
      v73 = -72;
LABEL_142:
      v74 = v71 + v73;
      if (v39 == v71 + v73
        || (v75 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v39 + 32))(v39),
            v76 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v74 + 32))(v74),
            v27 = v47,
            v75 == v76))
      {
        sub_22E8FCA40(a1, v18, 0x14CBu, 0, (uint64_t)v91);
        *(_QWORD *)v87 = a6;
        v77 = sub_22E8BAE44((uint64_t)v91, (uint64_t *)v87);
        LODWORD(v93) = 1;
        v78 = sub_22E8900C4(v77, (int *)&v93);
        LODWORD(v90) = 0;
        sub_22E8900C4(v78, (int *)&v90);
        sub_22E903BEC((unsigned int *)v91);
        v27 = v47;
      }
LABEL_145:
      if ((*(_DWORD *)(v27 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
      {
        v79 = v27;
        sub_22EB4E494(a1, *(unsigned int *)(v27 + 24), v27, 0);
        v27 = v79;
      }
      else
      {
        *(_DWORD *)(v27 + 28) |= 0x800u;
      }
      v51 = a1[11];
      v80 = *(_QWORD *)(v27 + 48);
      if (v80)
      {
        v81 = v80 & 0xFFFFFFFFFFFFFFF0;
        goto LABEL_152;
      }
      v52 = sub_22EF6462C(v51, v27);
LABEL_151:
      v81 = v52;
LABEL_152:
      v38 = sub_22EF65684(v51, a2, a4, v81, 0);
LABEL_153:
      v17 = v38;
LABEL_154:
      if (BYTE1(v110))
      {
        if ((_DWORD)v98 == 5)
        {
          sub_22EC64D18(v105, (uint64_t)&v98);
        }
        else if (v103 && (*(_DWORD *)(v105[9] + 52) & 0x400000) != 0)
        {
          sub_22E90B5FC((unint64_t)v105, (uint64_t)&v98);
        }
      }
      if (v102)
      {
        v85 = sub_22EC6CBD0(v102);
        MEMORY[0x2348A0E9C](v85, 0x10E0C409F09D3C3);
      }
      if (v99 != v101)
        free(v99);
LABEL_163:
      if (HIDWORD(v97[1]))
        free(v97[0]);
      return v17;
    case 3:
      v22 = v95;
      if (v95)
        v23 = 5032;
      else
        v23 = 5033;
      v24 = *(_QWORD *)v99 & 0xFFFFFFFFFFFFFFFCLL;
      goto LABEL_62;
    case 4:
      v33 = v96;
      if (a3)
        v33 = a3;
      v93 = __PAIR64__(a7, v33);
      sub_22E8FCA40(a1, a7, 0x13AAu, 0, (uint64_t)v91);
      v34 = sub_22E894538((uint64_t)v91, &v94);
      v35 = sub_22E894FB4(v34, (uint64_t *)&v95);
      sub_22E8906A0(v35, (uint64_t *)&v93);
      sub_22E903BEC((unsigned int *)v91);
      v36 = *(_QWORD *)v99 & 0xFFFFFFFFFFFFFFFCLL;
      if (v36 && (*(_DWORD *)(v36 + 28) & 0x7F) == 0x4A)
      {
        *(_OWORD *)v91 = *(_OWORD *)(v36 + 64);
        v37 = sub_22F0AB0EC((unint64_t *)v91);
        sub_22E8FCA40(a1, v37, 0x1814u, 0, (uint64_t)v91);
        v87[20] = 0;
        *(_QWORD *)&v87[12] = 0;
        *(_QWORD *)v87 = v37 | ((unint64_t)v37 << 32);
        v87[8] = 0;
        memset(&__p[10], 0, 13);
        strcpy(__p, "typename ");
        v89 = 9;
        sub_22E890748((uint64_t)v91, v87);
        if ((char)v89 < 0)
          operator delete(*(void **)__p);
        sub_22E903BEC((unsigned int *)v91);
      }
LABEL_52:
      v38 = sub_22EF65A30(a1[11], a2, a4, a6, 0);
      goto LABEL_153;
    case 5:
      goto LABEL_154;
    default:
      v24 = 0;
      v23 = 0;
      v22 = v95;
      goto LABEL_62;
  }
}

unint64_t *sub_22ED722D8(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  unint64_t *v4;
  _QWORD v6[3];
  int v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  int v11;
  _DWORD v12[6];
  uint64_t v13;

  v4 = (unint64_t *)a2;
  if (a2 && (*(_BYTE *)(*(_QWORD *)(*a2 & 0xFFFFFFFFFFFFFFF0) + 17) & 2) != 0)
  {
    v6[1] = 0;
    v6[2] = 0;
    v6[0] = a1;
    v7 = 0;
    v8 = v12;
    v9 = v12;
    v10 = 2;
    v11 = 0;
    v12[4] = a3;
    v13 = a4;
    v4 = sub_22ED72360((uint64_t)v6, a2);
    sub_22F2F4694((uint64_t)v6);
  }
  return v4;
}

unint64_t *sub_22ED72360(uint64_t a1, uint64_t *a2)
{
  unint64_t *v2;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v15;
  size_t v16;
  unsigned __int32 v17;
  uint64_t v19;
  int64x2_t v20;
  _BYTE v21[32];
  uint64_t v22;
  uint64_t v23;

  v2 = (unint64_t *)a2;
  v23 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  for (i = *a2; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_12;
      v6 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v6 <= 0x39)
        break;
LABEL_7:
      if (sub_22F115668(i))
        v4 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_14;
    }
    if (v6 == 24)
      goto LABEL_13;
    if (v6 == 26)
      break;
    if (((1 << v6) & 0x20000000200003CLL) == 0)
      goto LABEL_7;
LABEL_12:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_12;
LABEL_13:
  v4 = i;
LABEL_14:
  v7 = sub_22F115668(v4);
  v8 = *(_DWORD *)(a1 + 80);
  if (v7)
    *(_DWORD *)(a1 + 80) = v7;
  v9 = *(_QWORD *)(a1 + 88);
  v10 = *v2;
  if (*v2 >= 0x10 && (*(_BYTE *)(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0) + 17) & 2) != 0)
  {
    v19 = (uint64_t)v21;
    v20 = vdupq_n_s64(0x20uLL);
    v22 = 0;
    v11 = sub_22F11598C(v10);
    if (v20.i64[0] < (unint64_t)v11)
      sub_22EEB52C0(&v19, v11);
    v12 = sub_22EDA4BEC((_QWORD **)a1, (uint64_t)&v19, v10);
    if (v12 > 0xF)
    {
      v14 = v12;
      v15 = *(_QWORD *)(*(_QWORD *)a1 + 88);
      v16 = v20.i64[0] - v20.i64[1];
      v17 = v20.i32[0] - v20.i32[2];
      if (v20.i32[0] == v20.i32[2])
        v17 = sub_22F11598C(v14);
      v2 = (unint64_t *)sub_22E3CD3D4(v15 + 2032, v17 + 8, 3);
      *v2 = v14;
      v13 = (_BYTE *)v19;
      memcpy(v2 + 1, (const void *)(v19 + v20.i64[1]), v16);
    }
    else
    {
      v2 = 0;
      v13 = (_BYTE *)v19;
    }
    if (v13 != v21 && v13)
      MEMORY[0x2348A0E84](v13, 0x1000C8077774924);
  }
  *(_DWORD *)(a1 + 80) = v8;
  *(_QWORD *)(a1 + 88) = v9;
  return v2;
}

void sub_22ED725B0(uint64_t *a1, unint64_t a2, __n128 a3)
{
  if (a2)
  {
    switch(*(_BYTE *)a2)
    {
      case 0x66:
        sub_22EDAB5E0(a1, a2);
        break;
      case 0x67:
        sub_22EDAB680(a1, a2);
        break;
      case 0x68:
        sub_22EB63768((uint64_t)a1, a2);
        break;
      case 0x6B:
        sub_22EDAB744(a1, a2);
        break;
      case 0x6C:
        sub_22EDAB7FC((_QWORD **)a1, a2);
        break;
      case 0x6D:
        sub_22EDAB9C4((unsigned int *)a1, a2);
        break;
      case 0x6E:
      case 0x84:
      case 0xAC:
      case 0xAD:
      case 0xC5:
        sub_22EDABA2C((uint64_t)a1, a2);
        break;
      case 0x6F:
        sub_22EDABA34(a1, a2);
        break;
      case 0x70:
        sub_22EDABB40(a1, a2);
        break;
      case 0x71:
        sub_22EDABCD4(a1, (_DWORD *)a2, a3);
        break;
      case 0x72:
        sub_22EDABDA4((unint64_t *)a1, a2);
        break;
      case 0x73:
        sub_22EDAC01C((uint64_t)a1, a2);
        break;
      case 0x74:
        sub_22EDAC104(a1, a2);
        break;
      case 0x75:
      case 0x80:
      case 0x9A:
      case 0xA9:
      case 0xAA:
      case 0xAE:
      case 0xAF:
      case 0xB2:
      case 0xB5:
      case 0xC2:
      case 0xC3:
      case 0xCE:
      case 0xCF:
      case 0xE1:
      case 0xE2:
      case 0xE3:
      case 0xE7:
        nullsub_910(a2);
        break;
      case 0x76:
        sub_22EDAC160((uint64_t)a1, (unsigned __int8 *)a2);
        break;
      case 0x77:
        sub_22EDAC868((uint64_t)a1, (unsigned __int8 *)a2);
        break;
      case 0x78:
        sub_22EBE109C(a1, a2);
        break;
      case 0x79:
        sub_22EBE1174(a1, a2);
        break;
      case 0x7A:
        sub_22EDACBA8((uint64_t)a1, a2);
        break;
      case 0x7B:
        sub_22EDACD28((uint64_t)a1, a2);
        break;
      case 0x7C:
        sub_22EDAD090(a1, a2);
        break;
      case 0x7D:
        sub_22EDAD2BC(a1, a2);
        break;
      case 0x7E:
        sub_22EDAD3CC(a1, a2);
        break;
      case 0x7F:
        sub_22EDAD858(a1, a2);
        break;
      case 0x81:
        sub_22EDAD9CC((unsigned int **)a1, a2);
        break;
      case 0x82:
        sub_22EDADF2C((uint64_t)a1, (uint64_t *)a2);
        break;
      case 0x83:
        sub_22EDAE208((uint64_t)a1, a2);
        break;
      case 0x85:
        sub_22ECD9F20(a1, a2);
        break;
      case 0x86:
        sub_22EDAE2B0(a1, a2);
        break;
      case 0x87:
        sub_22EDAE31C(a1, a2);
        break;
      case 0x88:
        sub_22EDAE494(a1, a2);
        break;
      case 0x89:
        sub_22EDAE72C((_QWORD **)a1, a2);
        break;
      case 0x8A:
        sub_22EDAE904(a1, (unsigned int *)a2);
        break;
      case 0x8B:
        sub_22EDAEAEC(a1, (unsigned int *)a2);
        break;
      case 0x8C:
      case 0x8E:
        sub_22EDAEC58(a1, (unsigned int *)a2);
        break;
      case 0x8D:
        sub_22EDAEC5C(a1, (unsigned int *)a2);
        break;
      case 0x8F:
        sub_22EDAF39C(a1, a2);
        break;
      case 0x90:
        sub_22EDAF408(a1, a2);
        break;
      case 0x91:
        sub_22EDAF4AC((uint64_t)a1, a2);
        break;
      case 0x92:
      case 0x93:
      case 0x94:
      case 0x95:
      case 0x96:
      case 0x97:
        sub_22EDAF568();
        break;
      case 0x98:
        sub_22EDAF56C(a1, a2);
        break;
      case 0x99:
        sub_22EDAF610((uint64_t)a1, (unsigned __int8 *)a2);
        break;
      case 0x9B:
        sub_22EDAF63C(a1, a2);
        break;
      case 0x9C:
        sub_22EDAF700(a1, a2);
        break;
      case 0x9D:
        sub_22EDAF7CC(a1, a2);
        break;
      case 0x9E:
        sub_22EDAF8F0((_QWORD **)a1, a2);
        break;
      case 0x9F:
        sub_22EDAF988(a1, a2);
        break;
      case 0xA0:
        sub_22EDAF9DC(a1, a2);
        break;
      case 0xA1:
        sub_22EDAFA28(a1, a2);
        break;
      case 0xA2:
        sub_22EDAFD48(a1, a2);
        break;
      case 0xA3:
        sub_22EDAFDB8(a1, a2);
        break;
      case 0xA4:
        sub_22EDAFDC4((uint64_t)a1, a2);
        break;
      case 0xA6:
        sub_22EDB0228(a1, a2);
        break;
      case 0xA7:
        sub_22EDB03B0((_QWORD **)a1, a2);
        break;
      case 0xA8:
        sub_22EDB04C4((uint64_t)a1, (const void **)a2);
        break;
      case 0xAB:
        sub_22EDB04F0((_QWORD **)a1, a2);
        break;
      case 0xB0:
        sub_22EDB0584(a1, a2);
        break;
      case 0xB1:
        sub_22EDB07AC((_QWORD **)a1, a2);
        break;
      case 0xB3:
        sub_22EDB0874((uint64_t)a1, a2);
        break;
      case 0xB4:
        sub_22EDB0910(a1, a2);
        break;
      case 0xB7:
        sub_22EDB0B28((uint64_t)a1, a2);
        break;
      case 0xB8:
        sub_22EDB0C34(a1, a2);
        break;
      case 0xB9:
        sub_22EDB0CE8((uint64_t)a1, a2);
        break;
      case 0xBA:
        sub_22EDB0DD4((uint64_t)a1, *(_QWORD *)(a2 + 16));
        break;
      case 0xBB:
        sub_22EDB0DE8((_QWORD **)a1, a2);
        break;
      case 0xBC:
        sub_22EDB0EAC(a1, a2);
        break;
      case 0xBD:
        sub_22EDB1470(a1, a2);
        break;
      case 0xBF:
        sub_22EDB1768(a1, a2);
        break;
      case 0xC0:
        sub_22EDB1888((_QWORD **)a1, a2);
        break;
      case 0xC1:
        sub_22EDB1A14((uint64_t)a1, a2);
        break;
      case 0xC4:
        sub_22EDB1E30(a1, a2);
        break;
      case 0xC6:
        sub_22EDB1E94((_QWORD **)a1, a2);
        break;
      case 0xC7:
        sub_22EDB1F84(a1, a2);
        break;
      case 0xC8:
        sub_22EDB2080(a1, a2);
        break;
      case 0xC9:
        sub_22EDB2450(a1, a2);
        break;
      case 0xCA:
        sub_22EDB2538((_QWORD **)a1, a2);
        break;
      case 0xCB:
        sub_22EDB25A0(a1, a2);
        break;
      case 0xCC:
        sub_22EB6B190(*a1, a2);
        break;
      case 0xCD:
        sub_22EDB289C((uint64_t)a1, a2);
        break;
      case 0xD0:
        sub_22EDB29DC(a1, a2);
        break;
      case 0xD1:
        sub_22EDB2A7C(a1, a2);
        break;
      case 0xD2:
        sub_22EDB2C80((uint64_t)a1, (_QWORD *)a2);
        break;
      case 0xD3:
        sub_22EDB2CE4(a1, (unsigned int *)a2);
        break;
      case 0xD4:
        sub_22EDB30AC((uint64_t)a1, (unsigned int *)a2);
        break;
      case 0xD5:
        sub_22EDB34B8(a1, a2);
        break;
      case 0xD6:
        sub_22EDB3534((_QWORD **)a1, a2);
        break;
      case 0xD7:
        sub_22EDB359C(a1, a2);
        break;
      case 0xD8:
        sub_22F2F74C4(a1, (_DWORD *)a2);
        break;
      case 0xD9:
        sub_22EDB3698(a1, a2);
        break;
      case 0xDA:
        sub_22EDB3710(a1, a2);
        break;
      case 0xDB:
        sub_22EDB3874(a1, a2);
        break;
      case 0xDC:
        sub_22EDB3E48((uint64_t)a1, a2);
        break;
      case 0xDD:
        sub_22EDB3EBC(a1, a2);
        break;
      case 0xDE:
        sub_22EDB4120((uint64_t)a1, a2);
        break;
      case 0xDF:
        sub_22EBE8E04(*a1, a2);
        break;
      case 0xE0:
        sub_22EDB4628(a1, a2);
        break;
      case 0xE4:
        sub_22EDB47D4((_QWORD **)a1, a2);
        break;
      case 0xE5:
        sub_22EDB4894((_QWORD **)a1, a2);
        break;
      case 0xE6:
        sub_22EDB4948(a1, (_DWORD *)a2);
        break;
      case 0xE8:
        sub_22EDB4FA0(a1, a2);
        break;
      case 0xE9:
        sub_22EDB5178(a1, a2);
        break;
      case 0xEA:
        sub_22EDB521C((_QWORD **)a1, a2);
        break;
      default:
        return;
    }
  }
}

uint64_t sub_22ED72834(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  BOOL v4;
  unint64_t v7;
  void *v8;
  _BOOL8 v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  llvm *v16;
  uint64_t v17;
  unsigned int v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  int v22;
  _DWORD v23[6];
  uint64_t v24;

  v3 = *(_QWORD *)(a2 + 8);
  if (*(_DWORD *)a2)
    v4 = *(_DWORD *)(a2 + 4) == 0;
  else
    v4 = 1;
  if (!v4 && v3 == 0)
    return 1;
  if (v3)
  {
    v7 = sub_22F0ABC50((uint64_t *)(a2 + 8), *(_QWORD *)(a1 + 88));
    v8 = v10;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v11 = *(_QWORD *)a2;
  v16 = 0;
  v17 = 0;
  v15 = a1;
  v18 = 0;
  v19 = v23;
  v20 = v23;
  v21 = 2;
  v22 = 0;
  v23[4] = v11;
  v24 = 0;
  v12 = sub_22ED72930(&v15, v7, v8, 0, 0);
  v9 = v12 == 0;
  if (v12)
    sub_22E8ACE30(a2, v12, v13);
  if (v20 != v19)
    free(v20);
  llvm::deallocate_buffer(v16, (void *)(16 * v18));
  return v9;
}

unint64_t sub_22ED72930(uint64_t *a1, unint64_t a2, void *__s2, unint64_t a4, uint64_t a5)
{
  unint64_t v6;
  unsigned int v10;
  unint64_t v11;
  unint64_t *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t i;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  void *v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t *v64;
  uint64_t v65;
  _QWORD v66[2];
  int v67;
  int v68;
  unsigned int v69[24];
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  _OWORD *v74;
  uint64_t v75;
  _QWORD v76[11];

  v6 = a2;
  v76[8] = *MEMORY[0x24BDAC8D0];
  v74 = v76;
  v75 = 0x400000000;
  if (!a2)
  {
    v50 = 0;
    v71 = 0u;
    v72 = 0u;
    goto LABEL_77;
  }
  v10 = 0;
  v11 = a2;
  do
  {
    if (v10 >= HIDWORD(v75))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v10 = v75;
    }
    v12 = (unint64_t *)&v74[v10];
    *v12 = v11;
    v12[1] = (unint64_t)__s2;
    v10 = v75 + 1;
    LODWORD(v75) = v75 + 1;
    v11 = *(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF8;
  }
  while (v11);
  v71 = 0u;
  v72 = 0u;
  if (!v10)
  {
    v50 = 0;
    goto LABEL_77;
  }
  v64 = a1 + 1;
  do
  {
    LODWORD(v75) = v10 - 1;
    v13 = v74[v10 - 1];
    v70 = v13;
    v14 = v13;
    v15 = *(_QWORD *)(v13 + 16);
    if (!v15)
    {
      v38 = *(_QWORD *)(*a1 + 88);
      v39 = sub_22F0AB0EC((unint64_t *)&v70);
      sub_22F0AB958((uint64_t)&v71 + 8, v38, v39);
      *(_QWORD *)&v71 = v39 | ((unint64_t)v39 << 32);
      goto LABEL_40;
    }
    v16 = *(_QWORD *)(v13 + 8);
    v17 = (v16 >> 1) & 3;
    if (v17 - 2 >= 2)
    {
      if (v17 == 1)
      {
        v35 = *(_DWORD *)(v15 + 28) & 0x7F;
        if ((v35 - 35) < 3)
        {
          v47 = sub_22F0AABF8(v13);
          v73 = v47;
          v66[0] = 0;
          if (sub_22E793870(v64, &v73, v66) && v66[0] != a1[1] + 16 * *((unsigned int *)a1 + 6))
            v47 = *(_QWORD *)(v66[0] + 8);
          v48 = *(_QWORD *)(*a1 + 88);
          v49 = sub_22F0AB0EC((unint64_t *)&v70);
          sub_22F3E8E2C((uint64_t *)&v71 + 1, v48, v47, v49, SHIDWORD(v49));
          *(_QWORD *)&v71 = v49;
        }
        else
        {
          sub_22F0AB364((uint64_t *)&v70);
          v36 = *(_QWORD *)(v14 + 8) & 6;
          if (v35 == 16)
          {
            if (v36 == 2)
            {
              if ((*(_DWORD *)(*(_QWORD *)(v14 + 16) + 28) & 0x7F) == 0x10)
                v37 = *(_QWORD *)(v14 + 16);
              else
                v37 = 0;
            }
            else
            {
              v37 = 0;
            }
            v73 = v37;
            v66[0] = 0;
            if (sub_22E793870(v64, &v73, v66) && v66[0] != a1[1] + 16 * *((unsigned int *)a1 + 6))
              v37 = *(_QWORD *)(v66[0] + 8);
          }
          else
          {
            if (v36 == 2)
            {
              if ((*(_DWORD *)(*(_QWORD *)(v14 + 16) + 28) & 0x7F) == 0x11)
                v37 = *(_QWORD *)(v14 + 16);
              else
                v37 = 0;
            }
            else
            {
              v37 = 0;
            }
            v73 = v37;
            v66[0] = 0;
            if (sub_22E793870(v64, &v73, v66) && v66[0] != a1[1] + 16 * *((unsigned int *)a1 + 6))
              v37 = *(_QWORD *)(v66[0] + 8);
          }
          v40 = *(_QWORD *)(*a1 + 88);
          v41 = sub_22F0AB364((uint64_t *)&v70);
          v42 = sub_22F0AB364((uint64_t *)&v70);
          v43 = HIDWORD(v42);
          sub_22F0AB8AC((uint64_t *)&v71 + 1, v40, v37, v41, SHIDWORD(v42));
          if (!(_DWORD)v71)
            LODWORD(v71) = v41;
          DWORD1(v71) = v43;
        }
        goto LABEL_40;
      }
      if ((v16 & 6) != 0)
        v44 = 0;
      else
        v44 = *(_QWORD *)(v13 + 16);
      v45 = sub_22F0AB364((uint64_t *)&v70);
      v46 = sub_22F0AB364((uint64_t *)&v70);
      v66[0] = a4;
      v66[1] = v44;
      v67 = v45;
      v68 = HIDWORD(v46);
      LOBYTE(v63) = 0;
      if ((sub_22E958D90(*a1, 0, v66, 0, &v71, a5, 0, 0, v63) & 1) == 0)
        goto LABEL_40;
      goto LABEL_90;
    }
    v18 = sub_22F0AB4E0((uint64_t)&v70);
    v20 = v18;
    v21 = (uint64_t)v19;
    if (v18 >= 0x10 && (*(_BYTE *)(*(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0) + 17) & 2) != 0)
    {
      v22 = sub_22EDBF918(a1, v18, v19, a4, (uint64_t)&v71);
      if (!v22)
        goto LABEL_90;
      v21 = (uint64_t)(v22 + 1);
      v20 = *v22;
    }
    if (!v20)
      goto LABEL_90;
    v23 = *(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0);
    v24 = *(_DWORD *)(v23 + 16);
    v25 = *(_QWORD *)(v23 + 8);
    if ((v24 & 0x400) == 0)
    {
      v26 = *(unsigned __int8 *)(*(_QWORD *)(v25 & 0xFFFFFFFFFFFFFFF0) + 16);
      v27 = *a1;
      if (v26 == 45)
        goto LABEL_24;
      if (v26 == 44 && (**(_QWORD **)(v27 + 72) & 0x200) != 0)
        goto LABEL_24;
      if ((v20 & 0xF) == 0 && v24 == 50 && (*(_BYTE *)(*(_QWORD *)(v20 + 24) + 28) & 0x80) != 0)
        goto LABEL_90;
      v58 = v20;
      v59 = v20;
      while (1)
      {
        if ((v59 & 0xF) != 0)
          goto LABEL_113;
        v60 = *(unsigned __int8 *)(*(_QWORD *)(v59 & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v60 > 0x39)
        {
LABEL_108:
          if (sub_22F115668(v59))
            v58 = v59;
          v59 = sub_22F115B7C(v59);
          if (!v59)
            goto LABEL_116;
        }
        else
        {
          if (v60 == 24)
            goto LABEL_115;
          if (v60 == 26)
          {
            if ((*(_BYTE *)(v59 + 23) & 0x10) != 0)
            {
LABEL_115:
              v58 = v59;
LABEL_116:
              v61 = sub_22F115668(v58);
              sub_22E8FCA40((_QWORD *)v27, v61, 0xF99u, 0, (uint64_t)v66);
              v73 = v20;
              v62 = sub_22E8901B8((uint64_t)v66, &v73);
              v65 = v71;
              sub_22E8906A0(v62, &v65);
              sub_22E903BEC((unsigned int *)v66);
LABEL_90:
              v6 = 0;
              goto LABEL_94;
            }
          }
          else if (((1 << v60) & 0x20000000200003CLL) == 0)
          {
            goto LABEL_108;
          }
LABEL_113:
          v59 = sub_22F115B7C(v59);
        }
      }
    }
    v27 = *a1;
    v26 = *(unsigned __int8 *)(*(_QWORD *)(v25 & 0xFFFFFFFFFFFFFFF0) + 16);
LABEL_24:
    if (v26 != 44)
      goto LABEL_39;
    v29 = v20;
    for (i = v20; ; i = sub_22F115B7C(i))
    {
      while (1)
      {
        if ((i & 0xF) != 0)
          goto LABEL_36;
        v31 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v31 <= 0x39)
          break;
LABEL_31:
        if (sub_22F115668(i))
          v29 = i;
        i = sub_22F115B7C(i);
        if (!i)
          goto LABEL_38;
      }
      if (v31 == 24)
        goto LABEL_37;
      if (v31 == 26)
        break;
      if (((1 << v31) & 0x20000000200003CLL) == 0)
        goto LABEL_31;
LABEL_36:
      ;
    }
    if ((*(_BYTE *)(i + 23) & 0x10) == 0)
      goto LABEL_36;
LABEL_37:
    v29 = i;
LABEL_38:
    v32 = sub_22F115668(v29);
    sub_22E8FCA40((_QWORD *)v27, v32, 0x1927u, 0, (uint64_t)v69);
    sub_22E903BEC(v69);
    v27 = *a1;
LABEL_39:
    v33 = *(_QWORD *)(v27 + 88);
    v34 = sub_22F0AB364((uint64_t *)&v70);
    sub_22E8ACD1C((uint64_t)&v71, v33, 0, v20, v21, SHIDWORD(v34));
LABEL_40:
    a4 = 0;
    a5 = 0;
    v10 = v75;
  }
  while ((_DWORD)v75);
  v50 = *((_QWORD *)&v71 + 1);
LABEL_77:
  if (v50 != v6 || *(_DWORD *)(*a1 + 11992) != -1)
  {
    v51 = DWORD2(v72);
    v52 = 0;
    if (v6)
    {
      do
      {
        v53 = *(_QWORD *)(v6 + 8);
        if ((v53 & 4) != 0)
          v54 = 12;
        else
          v54 = 8;
        if (*(_QWORD *)(v6 + 16))
          v55 = v54;
        else
          v55 = 4;
        v52 += v55;
        v6 = v53 & 0xFFFFFFFFFFFFFFF8;
      }
      while ((v53 & 0xFFFFFFFFFFFFFFF8) != 0);
    }
    if (DWORD2(v72) != v52 || memcmp((const void *)v72, __s2, DWORD2(v72)))
    {
      if (!v50)
        goto LABEL_90;
      if (HIDWORD(v72))
      {
        v56 = (void *)sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, v51, 3);
        memcpy(v56, (const void *)v72, DWORD2(v72));
        v50 = *((_QWORD *)&v71 + 1);
      }
    }
    v6 = v50;
  }
LABEL_94:
  if (HIDWORD(v72))
    free((void *)v72);
  if (v74 != (_OWORD *)v76)
    free(v74);
  return v6;
}

void sub_22ED730EC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  _BYTE *v19;
  unsigned int *v20;
  const void *v21;
  size_t v22;
  unsigned int v23;
  _WORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _BYTE *v29;
  size_t v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD v35[2];
  _QWORD v36[2];
  _BYTE v37[24];
  unint64_t v38;
  _WORD *v39;
  uint64_t v40;
  void *v41;
  __int128 v42;
  _QWORD v43[18];

  v43[16] = *MEMORY[0x24BDAC8D0];
  v41 = v43;
  v42 = xmmword_22F44E310;
  sub_22F242C48((uint64_t)v37, (uint64_t)&v41);
  if (!a2 || !a4 || (v10 = *(_DWORD *)(a2 + 12) & 0x1FFFFFFF) == 0)
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    goto LABEL_47;
  }
  v11 = 0;
  v12 = v10 - 1;
  if (a4 - 1 < v12)
    v12 = a4 - 1;
  v13 = v12 + 1;
  do
  {
    v14 = v39;
    v15 = v38 - (_QWORD)v39;
    if (v11)
    {
      if (v15 <= 1)
      {
        v16 = ", ";
LABEL_12:
        llvm::raw_ostream::write((llvm::raw_ostream *)v37, v16);
        goto LABEL_13;
      }
      *v39 = 8236;
      v28 = (char *)(v39 + 1);
    }
    else
    {
      if (v15 <= 5)
      {
        v16 = "[with ";
        goto LABEL_12;
      }
      v39[2] = 8296;
      *v14 = 1953068891;
      v28 = (char *)(v39 + 3);
    }
    v39 = v28;
LABEL_13:
    v17 = *(_QWORD *)(*(_QWORD *)(a2 + 8 * v11 + 16) + 40) & 0xFFFFFFFFFFFFFFF8;
    if ((*(_QWORD *)(*(_QWORD *)(a2 + 8 * v11 + 16) + 40) & 7) != 0 || v17 == 0)
    {
      v19 = v39;
      if ((unint64_t)v39 >= v38)
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v37);
      }
      else
      {
        v39 = (_WORD *)((char *)v39 + 1);
        *v19 = 36;
      }
      llvm::raw_ostream::operator<<();
    }
    else
    {
      v20 = *(unsigned int **)(v17 + 16);
      v23 = *v20;
      v21 = v20 + 4;
      v22 = v23;
      if (v23 <= v38 - (unint64_t)v39)
      {
        if (v22)
        {
          memcpy(v39, v21, v22);
          v39 = (_WORD *)((char *)v39 + v22);
        }
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v37, (const char *)v21);
      }
    }
    v24 = v39;
    if (v38 - (unint64_t)v39 > 2)
    {
      *((_BYTE *)v39 + 2) = 32;
      *v24 = 15648;
      v39 = (_WORD *)((char *)v39 + 3);
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v37, " = ");
    }
    v36[0] = sub_22E8FCD8C(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 80));
    v36[1] = v25;
    v35[0] = sub_22E8FCD8C(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 80));
    v35[1] = v26;
    v27 = sub_22EFE9290((uint64_t)v35, a2, v11);
    sub_22F0EF330(a3, (uint64_t)v36, (llvm::raw_ostream *)v37, v27);
    ++v11;
    a3 += 24;
  }
  while (v13 != v11);
  v29 = v39;
  if ((unint64_t)v39 >= v38)
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v37);
  }
  else
  {
    v39 = (_WORD *)((char *)v39 + 1);
    *v29 = 93;
  }
  v30 = *(_QWORD *)(v40 + 8);
  if (v30 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v31 = *(const void **)v40;
  if (v30 >= 0x17)
  {
    v32 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17)
      v32 = v30 | 7;
    v33 = v32 + 1;
    v34 = operator new(v32 + 1);
    a5[1] = v30;
    a5[2] = v33 | 0x8000000000000000;
    *a5 = v34;
    a5 = v34;
    goto LABEL_45;
  }
  *((_BYTE *)a5 + 23) = v30;
  if (v30)
LABEL_45:
    memmove(a5, v31, v30);
  *((_BYTE *)a5 + v30) = 0;
LABEL_47:
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v37);
  if (v41 != v43)
    free(v41);
}

unint64_t sub_22ED73440(uint64_t a1)
{
  uint64_t v1;
  unint64_t result;

  v1 = *(_QWORD *)(a1 + 216);
  if (v1 && (*(_WORD *)(v1 + 8) & 0x7Fu) - 38 >= 0xFFFFFFFD)
  {
    result = sub_22EA3DA94(v1 - 64);
    if (!result)
      return result;
    if (*(_QWORD *)(result + 144) >= 8uLL)
      return 1;
  }
  return 0;
}

void sub_22ED73490()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22ED734A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_22F2E6D78(a2);
  if (v3)
    return sub_22ED5601C(v3, 1, 1) != 0;
  if (*(_DWORD *)(a2 + 24))
    return **(_QWORD **)(a2 + 16) == 0;
  return 0;
}

__n128 sub_22ED73504@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;
  uint64_t v6;

  v4 = operator new();
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v4 + 8) = result;
  *(_QWORD *)v4 = &off_24FAB9200;
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v4 + 32) = v6;
  *a2 = v4;
  return result;
}

uint64_t sub_22ED7355C(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v11 = a2;
      v12 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v12);
        v4 = *(const void **)v11;
      }
      *(_QWORD *)a1 = v4;
      v13 = v11;
      v14 = *(_QWORD *)(v11 + 8);
      v7 = (_DWORD *)(v11 + 8);
      *(_QWORD *)(a1 + 8) = v14;
      *(_QWORD *)v13 = v5;
      *(_DWORD *)(v13 + 12) = 0;
      goto LABEL_7;
    }
    v7 = (_DWORD *)(a2 + 8);
    v6 = *(unsigned int *)(a2 + 8);
    v8 = *(unsigned int *)(a1 + 8);
    if (v8 >= v6)
    {
      if ((_DWORD)v6)
        memmove(*(void **)a1, v4, 32 * v6);
LABEL_6:
      *(_DWORD *)(a1 + 8) = v6;
LABEL_7:
      *v7 = 0;
      return a1;
    }
    v15 = (_QWORD *)a2;
    if (*(_DWORD *)(a1 + 12) < v6)
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    else if ((_DWORD)v8)
    {
      memmove(*(void **)a1, v4, 32 * v8);
LABEL_12:
      v10 = *v7;
      if (v8 != v10)
        memcpy((void *)(*(_QWORD *)a1 + 32 * v8), (const void *)(*v15 + 32 * v8), *v15 + 32 * v10 - (*v15 + 32 * v8));
      goto LABEL_6;
    }
    v8 = 0;
    goto LABEL_12;
  }
  return a1;
}

unint64_t sub_22ED73680(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, uint64_t *a9, uint64_t a10)
{
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int i;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v44;
  int v45;
  uint64_t v46;

  v44 = a1[4];
  v45 = a7;
  sub_22EFC6D6C((uint64_t)&v46, v44);
  v18 = *(_QWORD *)a5;
  if (*(_BYTE *)(*(_QWORD *)a5 + 16) == 25)
    v19 = 0;
  else
    v19 = (unsigned __int16)(*(_QWORD *)(v18 + 16) >> 38);
  v20 = sub_22F3B1DF0(*(_QWORD *)(*a1 + 88), a1[2], a6, a4, &v44, v18, a5, a8, a3);
  v21 = v20;
  v22 = *(_DWORD *)(v20 + 28);
  *(_DWORD *)(v20 + 28) = v22 | 0x200;
  if (!v20 || (v23 = v22 & 0x7F, v24 = v20, v23 != 83))
  {
    v25 = *(_QWORD *)(v20 + 16);
    v26 = v25 & 0xFFFFFFFFFFFFFFF8;
    if ((v25 & 4) != 0)
      v26 = *(_QWORD *)v26;
    for (i = *(_WORD *)(v26 + 8) & 0x7F; i != 83; i = *(_WORD *)(v26 + 8) & 0x7F)
    {
      v28 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v28 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_19;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_18;
        if (i == 16)
          goto LABEL_12;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_25;
        if (i == 24)
        {
LABEL_12:
          v28 = -48;
        }
        else
        {
LABEL_18:
          if (i != 70)
          {
LABEL_19:
            v29 = i - 52;
            if ((i - 33) >= 5)
              v30 = -48;
            else
              v30 = -64;
            if (v29 >= 6)
              v28 = v30;
            else
              v28 = -72;
            goto LABEL_25;
          }
          v28 = -64;
        }
      }
LABEL_25:
      v31 = *(_QWORD *)(v26 + v28 + 16);
      v26 = v31 & 0xFFFFFFFFFFFFFFF8;
      if ((v31 & 4) != 0)
        v26 = *(_QWORD *)v26;
    }
    v24 = v26 - 40;
  }
  if (v19)
  {
    v32 = (uint64_t *)(a5 + 24);
    v33 = 8 * v19;
    v34 = (void *)sub_22E3CD3D4(*(_QWORD *)(v24 + 88) + 2032, 8 * v19, 3);
    *(_QWORD *)(v21 + 120) = v34;
    memmove(v34, v32, 8 * v19);
    do
    {
      v35 = *v32++;
      *(_QWORD *)(v35 + 16) = (v21 + 72) & 0xFFFFFFFFFFFFFFFBLL;
      v33 -= 8;
    }
    while (v33);
  }
  if (a10)
  {
    v37 = v21 + 72;
    if (!v21)
      v37 = 0;
    v38 = v37 & 0xFFFFFFFFFFFFFFFBLL;
    v39 = 8 * a10;
    do
    {
      v40 = *a9++;
      *(_QWORD *)(v40 + 16) = v38;
      v39 -= 8;
    }
    while (v39);
  }
  v41 = sub_22EFE964C(*(_QWORD *)(*a1 + 88), a1[2], a7, a1[4], a2, v21);
  *(_DWORD *)(v41 + 28) |= 0x200u;
  *(_QWORD *)(v21 + 144) = v41 & 0xFFFFFFFFFFFFFFF9;
  v42 = a1[2];
  if ((*(_WORD *)(v42 + 8) & 0x7Fu) - 35 < 3)
  {
    *(_DWORD *)(v21 + 28) &= 0xFFFF9FFF;
    *(_DWORD *)(v41 + 28) &= 0xFFFF9FFF;
    v42 = a1[2];
  }
  sub_22EFCCFA0(v42, v41);
  return v41;
}

unint64_t *sub_22ED73944(_QWORD **a1, uint64_t *a2)
{
  unint64_t *v2;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  unsigned __int32 v14;
  uint64_t v16;
  int64x2_t v17;
  _BYTE v18[32];
  uint64_t v19;
  uint64_t v20;

  v2 = (unint64_t *)a2;
  v20 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  for (i = *a2; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_12;
      v6 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v6 <= 0x39)
        break;
LABEL_7:
      if (sub_22F115668(i))
        v4 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_14;
    }
    if (v6 == 24)
      goto LABEL_13;
    if (v6 == 26)
      break;
    if (((1 << v6) & 0x20000000200003CLL) == 0)
      goto LABEL_7;
LABEL_12:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_12;
LABEL_13:
  v4 = i;
LABEL_14:
  sub_22F115668(v4);
  v7 = *v2;
  if (*v2 >= 0x10)
  {
    v16 = (uint64_t)v18;
    v17 = vdupq_n_s64(0x20uLL);
    v19 = 0;
    v8 = sub_22F11598C(v7);
    if (v17.i64[0] < (unint64_t)v8)
      sub_22EEB52C0(&v16, v8);
    v9 = sub_22ED73B6C(a1, (uint64_t)&v16, v7);
    if (v9 > 0xF)
    {
      v11 = v9;
      v12 = (*a1)[11];
      v13 = v17.i64[0] - v17.i64[1];
      v14 = v17.i32[0] - v17.i32[2];
      if (v17.i32[0] == v17.i32[2])
        v14 = sub_22F11598C(v11);
      v2 = (unint64_t *)sub_22E3CD3D4(v12 + 2032, v14 + 8, 3);
      *v2 = v11;
      v10 = (_BYTE *)v16;
      memcpy(v2 + 1, (const void *)(v16 + v17.i64[1]), v13);
    }
    else
    {
      v2 = 0;
      v10 = (_BYTE *)v16;
    }
    if (v10 != v18 && v10)
      MEMORY[0x2348A0E84](v10, 0x1000C8077774924);
  }
  return v2;
}

unint64_t sub_22ED73B6C(_QWORD **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  if ((a3 & 0xF) == 0)
    __asm { BR              X11 }
  v5 = sub_22ED73B6C(a1, a2);
  v6 = 0;
  if (v5 >= 0x10)
  {
    v7 = sub_22E8C1750(a1, v5, a3);
    if (v7 >= 0x10)
      return v7;
    else
      return 0;
  }
  return v6;
}

void sub_22ED78310(uint64_t *a1, unint64_t a2, __n128 a3)
{
  if (a2)
  {
    switch(*(_BYTE *)a2)
    {
      case 0x66:
        sub_22ED78598((_QWORD **)a1, a2);
        break;
      case 0x67:
        sub_22ED78638((_QWORD **)a1, a2);
        break;
      case 0x68:
        sub_22EB63768((uint64_t)a1, a2);
        break;
      case 0x6B:
        sub_22ED786FC(a1, a2);
        break;
      case 0x6C:
        sub_22ED787B4((_QWORD **)a1, a2);
        break;
      case 0x6D:
        sub_22ED7897C((_QWORD **)a1, a2);
        break;
      case 0x6E:
      case 0x84:
      case 0xAC:
      case 0xAD:
      case 0xC5:
        sub_22ED789E4((uint64_t)a1, a2);
        break;
      case 0x6F:
        sub_22ED789EC(a1, a2);
        break;
      case 0x70:
        sub_22ED78AF8(a1, a2);
        break;
      case 0x71:
        sub_22ED78C8C(a1, (_DWORD *)a2, a3);
        break;
      case 0x72:
        sub_22ED78D5C(a1, a2);
        break;
      case 0x73:
        sub_22ED78FD4((uint64_t)a1, a2);
        break;
      case 0x74:
        sub_22ED790BC(a1, a2);
        break;
      case 0x75:
      case 0x80:
      case 0x9A:
      case 0xA9:
      case 0xAA:
      case 0xAE:
      case 0xAF:
      case 0xB2:
      case 0xB5:
      case 0xC2:
      case 0xC3:
      case 0xCE:
      case 0xCF:
      case 0xE1:
      case 0xE2:
      case 0xE3:
      case 0xE7:
        nullsub_910(a2);
        break;
      case 0x76:
        sub_22ED79118((uint64_t)a1, (unsigned __int8 *)a2);
        break;
      case 0x77:
        sub_22ED7971C((uint64_t)a1, (unsigned __int8 *)a2);
        break;
      case 0x78:
        sub_22EBE109C(a1, a2);
        break;
      case 0x79:
        sub_22EBE1174(a1, a2);
        break;
      case 0x7A:
        sub_22ED79A5C((uint64_t)a1, a2);
        break;
      case 0x7B:
        sub_22ED79BDC((uint64_t)a1, a2);
        break;
      case 0x7C:
        sub_22ED79F44(a1, a2);
        break;
      case 0x7D:
        sub_22ED7A170((uint64_t)a1, a2);
        break;
      case 0x7E:
        sub_22ED7A280(a1, a2);
        break;
      case 0x7F:
        sub_22ED7A70C(a1, a2);
        break;
      case 0x81:
        sub_22ED7A880((unsigned int **)a1, a2);
        break;
      case 0x82:
        sub_22ED7ADC0((uint64_t)a1, (uint64_t *)a2);
        break;
      case 0x83:
        sub_22ED7B09C((uint64_t)a1, a2);
        break;
      case 0x85:
        sub_22ECD9F20(a1, a2);
        break;
      case 0x86:
        sub_22ED7B144(a1, a2);
        break;
      case 0x87:
        sub_22ED7B1B0(a1, a2);
        break;
      case 0x88:
        sub_22ED7B328(a1, a2);
        break;
      case 0x89:
        sub_22ED7B5C0((_QWORD **)a1, a2);
        break;
      case 0x8A:
        sub_22ED7B798(a1, (unsigned int *)a2);
        break;
      case 0x8B:
        sub_22ED7B980(a1, (unsigned int *)a2);
        break;
      case 0x8C:
      case 0x8E:
        sub_22ED7BAEC(a1, (unsigned int *)a2);
        break;
      case 0x8D:
        sub_22ED7BAF0(a1, (unsigned int *)a2);
        break;
      case 0x8F:
        sub_22ED7C230(a1, a2);
        break;
      case 0x90:
        sub_22ED7C29C((_QWORD **)a1, a2);
        break;
      case 0x91:
        sub_22ED7C340(a1, a2);
        break;
      case 0x92:
      case 0x93:
      case 0x94:
      case 0x95:
      case 0x96:
      case 0x97:
        sub_22ED7C3FC();
        break;
      case 0x98:
        sub_22ED7C400(a1, a2);
        break;
      case 0x99:
        sub_22ED7C4A4((uint64_t)a1, (unsigned __int8 *)a2);
        break;
      case 0x9B:
        sub_22ED7C4D0(a1, a2);
        break;
      case 0x9C:
        sub_22ED7C594(a1, a2);
        break;
      case 0x9D:
        sub_22ED7C660(a1, a2);
        break;
      case 0x9E:
        sub_22ED7C784((_QWORD **)a1, a2);
        break;
      case 0x9F:
        sub_22ED7C81C(a1, a2);
        break;
      case 0xA0:
        sub_22ED7C870(a1, a2);
        break;
      case 0xA1:
        sub_22ED7C8BC((uint64_t)a1, a2);
        break;
      case 0xA2:
        sub_22ED7CBDC(a1, a2);
        break;
      case 0xA3:
        sub_22ED7CC4C(a1, a2);
        break;
      case 0xA4:
        sub_22ED7CC58((uint64_t)a1, a2);
        break;
      case 0xA6:
        sub_22ED7D0BC(a1, a2);
        break;
      case 0xA7:
        sub_22ED7D244((_QWORD **)a1, a2);
        break;
      case 0xA8:
        sub_22ED7D358((uint64_t)a1, (const void **)a2);
        break;
      case 0xAB:
        sub_22ED7D384((_QWORD **)a1, a2);
        break;
      case 0xB0:
        sub_22ED7D418(a1, a2);
        break;
      case 0xB1:
        sub_22ED7D640((_QWORD **)a1, a2);
        break;
      case 0xB3:
        sub_22ED7D708((uint64_t)a1, a2);
        break;
      case 0xB4:
        sub_22ED7D78C(a1, a2);
        break;
      case 0xB6:
        sub_22ED7D9A4(a1, a2);
        break;
      case 0xB7:
        sub_22ED7EF10((uint64_t)a1, a2);
        break;
      case 0xB8:
        sub_22ED7F01C(a1, a2);
        break;
      case 0xB9:
        sub_22ED7F0D0((uint64_t)a1, a2);
        break;
      case 0xBA:
        sub_22ED7F1BC((uint64_t)a1, *(_QWORD *)(a2 + 16));
        break;
      case 0xBB:
        sub_22ED7F1D0((_QWORD **)a1, a2);
        break;
      case 0xBC:
        sub_22ED7F294(a1, a2);
        break;
      case 0xBD:
        sub_22ED7F858(a1, a2);
        break;
      case 0xBF:
        sub_22ED7FB50(a1, a2);
        break;
      case 0xC0:
        sub_22ED7FC70((_QWORD **)a1, a2);
        break;
      case 0xC1:
        sub_22ED7FDFC(a1, a2);
        break;
      case 0xC4:
        sub_22ED80218(a1, a2);
        break;
      case 0xC6:
        sub_22ED8027C((_QWORD **)a1, a2);
        break;
      case 0xC7:
        sub_22ED8036C(a1, a2);
        break;
      case 0xC8:
        sub_22ED80468(a1, a2);
        break;
      case 0xC9:
        sub_22ED80838(a1, a2);
        break;
      case 0xCA:
        sub_22ED80920((_QWORD **)a1, a2);
        break;
      case 0xCB:
        sub_22ED80988(a1, a2);
        break;
      case 0xCC:
        sub_22EB6B190(*a1, a2);
        break;
      case 0xCD:
        sub_22ED80C84((uint64_t)a1, a2);
        break;
      case 0xD0:
        sub_22ED80DC4(a1, a2);
        break;
      case 0xD1:
        sub_22ED80E64(a1, a2);
        break;
      case 0xD2:
        sub_22ED81068((uint64_t)a1, (_QWORD *)a2);
        break;
      case 0xD3:
        sub_22ED810CC(a1, (unsigned int *)a2);
        break;
      case 0xD4:
        sub_22ED81494((uint64_t)a1, (unsigned int *)a2);
        break;
      case 0xD5:
        sub_22ED818A0((_QWORD **)a1, a2);
        break;
      case 0xD6:
        sub_22ED8191C((_QWORD **)a1, a2);
        break;
      case 0xD7:
        sub_22ED81984(a1, a2);
        break;
      case 0xD8:
        sub_22F2F74C4(a1, (_DWORD *)a2);
        break;
      case 0xD9:
        sub_22ED81A80(a1, a2);
        break;
      case 0xDA:
        sub_22ED81AF8(a1, a2);
        break;
      case 0xDB:
        sub_22ED81C5C(a1, a2);
        break;
      case 0xDC:
        sub_22ED82230((uint64_t)a1, a2);
        break;
      case 0xDD:
        sub_22ED822A4(a1, a2);
        break;
      case 0xDE:
        sub_22ED82508(a1, a2);
        break;
      case 0xDF:
        sub_22EBE8E04(*a1, a2);
        break;
      case 0xE0:
        sub_22ED829F4(a1, a2);
        break;
      case 0xE4:
        sub_22ED82BA0((_QWORD **)a1, a2);
        break;
      case 0xE5:
        sub_22ED82C60((_QWORD **)a1, a2);
        break;
      case 0xE6:
        sub_22ED82D14(a1, (_DWORD *)a2);
        break;
      case 0xE8:
        sub_22ED8336C(a1, a2);
        break;
      case 0xE9:
        sub_22ED83544(a1, a2);
        break;
      case 0xEA:
        sub_22ED835E8((_QWORD **)a1, a2);
        break;
      default:
        return;
    }
  }
}

uint64_t sub_22ED78598(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;

  v2 = a2;
  v4 = sub_22ED78310(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ED78310(a1, *(_QWORD *)(v2 + 48));
  if ((v5 & 1) != 0)
    return 1;
  v6 = (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  if (*((_DWORD *)*a1 + 2998) != -1
    || *(uint64_t **)(v2 + 24) != v6
    || *(_QWORD *)(v2 + 48) != (v5 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EB2F86C(*a1, *(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 20), v6, 0, v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  return v2;
}

uint64_t sub_22ED78638(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  v2 = a2;
  v4 = sub_22ED78310(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ED78310(a1, *(_QWORD *)(v2 + 32));
  if ((v5 & 1) != 0)
    return 1;
  v6 = sub_22ED78310(a1, *(_QWORD *)(v2 + 40));
  if ((v6 & 1) != 0)
    return 1;
  v7 = (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  if (*((_DWORD *)*a1 + 2998) != -1
    || *(uint64_t **)(v2 + 24) != v7
    || *(_QWORD *)(v2 + 32) != (v5 & 0xFFFFFFFFFFFFFFFELL)
    || *(_QWORD *)(v2 + 40) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EB2F86C(*a1, *(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 20), v7, v5 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL);
  }
  return v2;
}

uint64_t sub_22ED786FC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unint64_t v9;
  BOOL v10;
  int v11;
  unsigned int v12;
  unint64_t v14;

  v2 = a2;
  v4 = sub_22ED78310(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ED78310(a1, *(_QWORD *)(v2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  v6 = *a1;
  v7 = *(_QWORD *)(v2 + 16);
  v8 = (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  v9 = v5 & 0xFFFFFFFFFFFFFFFELL;
  v10 = *(_DWORD *)(v6 + 11992) == -1 && v7 == (_QWORD)v8;
  if (!v10 || *(_QWORD *)(v2 + 24) != v9)
  {
    sub_22F0D5A50(v7);
    v11 = *(_DWORD *)(v2 + 4);
    v14 = v9;
    return sub_22EB296C0(v6, 0, v8, v12, (uint64_t *)&v14, 1, v11);
  }
  return v2;
}

uint64_t sub_22ED787B4(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v16[3];
  int v17;
  uint64_t v18;
  int v19;

  v2 = a2;
  v4 = sub_22ED73944(a1, *(_QWORD *)(a2 + 48));
  if (!v4)
    return 1;
  v5 = (unint64_t *)v4;
  v6 = (uint64_t)*a1;
  if (*((_DWORD *)*a1 + 2998) != -1 || v4 != *(_QWORD *)(v2 + 48))
  {
    v19 = 0;
    v18 = 0;
    v17 = 3;
    *(_QWORD *)v16 = *(unsigned int *)(v6 + 1704);
    sub_22EB4DDB8(v6 + 3688, &v19, v16, (__int16 *)(v6 + 1693), &v18, &v17);
    v7 = *(unsigned int *)(v6 + 3696);
    v8 = v7 - 2;
    v9 = *(_QWORD *)(v6 + 3688);
    v10 = *(_DWORD *)(v9 + 576 * (v7 - 2));
    if (v10 == 5)
    {
      *(_BYTE *)(v9 + 576 * v7 - 4) = *(_BYTE *)(v9 + 576 * v8 + 572);
      v11 = 1;
    }
    else if (v10 == 2)
    {
      *(_BYTE *)(v9 + 576 * v7 - 4) = 1;
      v11 = *(_BYTE *)(v9 + 576 * v8 + 573) != 0;
    }
    else
    {
      v11 = 0;
      *(_BYTE *)(v9 + 576 * v7 - 4) = 0;
    }
    v12 = v9 + 576 * v7;
    *(_BYTE *)(v12 - 3) = v11;
    *(_WORD *)(v6 + 1693) = 0;
    if (*(_DWORD *)(v6 + 1848))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v6 + 1776), (llvm::SmallPtrSetImplBase *)(v12 - 560));
      sub_22EAEAE08(v6 + 1840, (uint64_t *)(v12 - 496));
    }
    v13 = sub_22ED78310(a1, *(_QWORD *)(v2 + 32));
    if ((v13 & 1) != 0)
    {
      v2 = 1;
    }
    else
    {
      v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
      if (*((_DWORD *)*a1 + 2998) != -1 || *(_QWORD *)(v2 + 32) != v14)
      {
        sub_22EB48E64(v6);
        return sub_22EBC8B4C(*a1, *(_BYTE *)(v2 + 16) & 3, *(_DWORD *)(v2 + 40), v5, v14, *(_DWORD *)(v2 + 44));
      }
    }
    sub_22EB48E64(v6);
  }
  return v2;
}

uint64_t sub_22ED7897C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v6;

  v4 = sub_22ED78310(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v6 = sub_22ED8368C((uint64_t)a1, *(_QWORD *)(a2 + 8));
  return sub_22F32DD9C(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, v6, *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28));
}

uint64_t sub_22ED789E4(uint64_t a1, uint64_t a2)
{
  return sub_22ED78310(a1, *(_QWORD *)(a2 + 16));
}

uint64_t sub_22ED789EC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v6;
  unint64_t v7;
  char v9;
  void *v10;
  uint64_t v11;
  _QWORD v12[9];

  v2 = a2;
  v12[8] = *MEMORY[0x24BDAC8D0];
  v9 = 0;
  v10 = v12;
  v11 = 0x800000000;
  v4 = *(_DWORD *)(a2 + 72);
  if (v4 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v2 + 72);
  }
  if ((sub_22ED836E0(a1, (unsigned __int8 **)(v2 + 16), v4, 0, (uint64_t)&v10, &v9) & 1) != 0)
  {
    v2 = 1;
  }
  else if (*(_DWORD *)(*a1 + 11992) != -1 || v9 != 0)
  {
    v6 = *(unsigned int *)(v2 + 80);
    v7 = *(unsigned int *)(v2 + 76) | (unint64_t)(v6 << 32);
    v2 = sub_22E983290((_QWORD *)*a1, v7, v7, v6, (void **)v10, v11, *(_DWORD *)(v2 + 84), 1);
  }
  if (v10 != v12)
    free(v10);
  return v2;
}

uint64_t sub_22ED78AF8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  v2 = a2;
  v4 = sub_22ED78310(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ED78310(a1, *(_QWORD *)(v2 + 24));
  v6 = v5;
  if ((v5 & 1) != 0)
    return 1;
  v7 = *a1;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(_QWORD *)(v2 + 16) != (v4 & 0xFFFFFFFFFFFFFFFELL)
    || *(_QWORD *)(v2 + 24) != (v5 & 0xFFFFFFFFFFFFFFFELL))
  {
    v8 = *(_DWORD *)v2;
    if (((*(_DWORD *)v2 >> 18) & 0x3Eu) - 22 <= 9)
      return sub_22EB4785C(*a1, 0, *(_DWORD *)(v2 + 4), (v8 >> 18) & 0x3F, v4 & 0xFFFFFFFFFFFFFFFELL, v5 & 0xFFFFFFFFFFFFFFFELL);
    v10 = *(_DWORD *)(v7 + 56);
    v11 = *(_QWORD *)(v7 + 1296);
    v16 = *(_QWORD *)(*(_QWORD *)(v7 + 80) + 520);
    if ((v8 & 0x1000000) != 0)
    {
      v13 = 32;
      if (*(_DWORD *)v2 == 113)
        v13 = 48;
      v12 = *(_QWORD *)(v2 + v13);
    }
    else
    {
      v12 = 0;
    }
    sub_22E51A8D0(&v17, *(_QWORD *)(v7 + 72));
    v14 = *a1;
    *(_DWORD *)(v14 + 56) = v17 & ~HIDWORD(v12) | HIDWORD(v12) & v12;
    *(_QWORD *)(v14 + 1296) = v12;
    v2 = sub_22EB4785C(*a1, 0, *(_DWORD *)(v2 + 4), (*(_DWORD *)v2 >> 18) & 0x3F, v4 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(v7 + 56) = v10;
    *(_QWORD *)(v7 + 1296) = v11;
    v15 = *(_QWORD *)(v7 + 80);
    *(_QWORD *)(v15 + 520) = v16;
    *(_DWORD *)(v15 + 528) = v16;
  }
  return v2;
}

__n128 sub_22ED78C8C(uint64_t *a1, _DWORD *a2, __n128 a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;
  __n128 v13;
  int v14;

  v5 = *a1;
  v6 = *(_DWORD *)(*a1 + 56);
  v7 = *(_QWORD *)(*a1 + 1296);
  a3.n128_u64[0] = *(_QWORD *)(*(_QWORD *)(*a1 + 80) + 520);
  v13 = a3;
  if ((*a2 & 0x1000000) != 0)
  {
    v9 = 8;
    if (*a2 == 113)
      v9 = 12;
    v8 = *(_QWORD *)&a2[v9];
  }
  else
  {
    v8 = 0;
  }
  sub_22E51A8D0(&v14, *(_QWORD *)(v5 + 72));
  v10 = *a1;
  *(_DWORD *)(v10 + 56) = v14 & ~HIDWORD(v8) | HIDWORD(v8) & v8;
  *(_QWORD *)(v10 + 1296) = v8;
  sub_22ED78AF8(a1, (uint64_t)a2);
  *(_DWORD *)(v5 + 56) = v6;
  *(_QWORD *)(v5 + 1296) = v7;
  v11 = *(_QWORD *)(v5 + 80);
  result = v13;
  *(_QWORD *)(v11 + 520) = v13.n128_u64[0];
  *(_DWORD *)(v11 + 528) = v13.n128_u32[0];
  return result;
}

uint64_t sub_22ED78D5C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  void *v12;
  __n128 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v23[10];
  void *v24;
  __int128 v25;
  _BYTE v26[16];
  char v27;
  void *v28;
  uint64_t v29;
  _BYTE v30[32];
  _QWORD *v31;
  uint64_t v32;
  _QWORD v33[6];

  v33[4] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 16);
  sub_22F32F84C((_QWORD *)*a1, *(_DWORD *)(v4 + 24), 0);
  v5 = sub_22F30914C(*a1);
  *(_DWORD *)(*(_QWORD *)(v5 + 1424) + 48) = *(_DWORD *)(*(_QWORD *)(v5 + 1424) + 48) & 0xFFFFDFFF | (((*(_DWORD *)(v4 + 48) >> 13) & 1) << 13);
  *(_DWORD *)(*(_QWORD *)(v5 + 1424) + 48) = *(_DWORD *)(*(_QWORD *)(v5 + 1424) + 48) & 0xFFFF7FFF | (((*(_DWORD *)(v4 + 48) >> 15) & 1) << 15);
  v31 = v33;
  v32 = 0x400000000;
  v28 = v30;
  v29 = 0x400000000;
  v6 = sub_22F3C22A4(a2);
  v7 = v6;
  v8 = 0;
  v24 = v26;
  v25 = xmmword_22F44E350;
  v27 = 0;
  v9 = *(_QWORD *)(v4 + 72);
  v10 = *(_DWORD *)(v4 + 80);
  if ((*(_BYTE *)(v6 + 23) & 4) != 0)
    v8 = sub_22E47E270(v6);
  if (sub_22ED83E90(a1, v9, v10, 0, v8, (uint64_t)&v28, (uint64_t)&v31, (uint64_t)&v24))
  {
    v20 = *a1;
  }
  else
  {
    v11 = sub_22ED8368C((uint64_t)a1, *(_QWORD *)(v7 + 24));
    sub_22E4913B4(v7, (uint64_t)v23);
    if (v27)
    {
      sub_22F24FB88(&v24, v29);
      v12 = v24;
    }
    else
    {
      v12 = 0;
    }
    v23[8] = v12;
    *(_QWORD *)(v5 + 1440) = sub_22EE80544((_QWORD *)*a1, v11, (unint64_t *)v28, v29, 0, 0, (uint64_t)v23);
    if ((_DWORD)v32)
      sub_22F3ACFA8(*(_DWORD **)(v5 + 1424), v31, v32);
    if ((*(_BYTE *)(v4 + 49) & 0x80) == 0)
    {
      *(_BYTE *)(v5 + 1408) = 0;
      *(_QWORD *)(v5 + 1416) = v11;
    }
    v13 = (__n128 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 64))(*(_QWORD *)(a2 + 16));
    v19 = sub_22ED84358(a1, v13, 0, v14, v15, v16, v17, v18);
    v20 = *a1;
    if ((v19 & 1) == 0)
    {
      v21 = sub_22EB4ADC8(v20, *(_DWORD *)(*(_QWORD *)(a2 + 16) + 24), (_QWORD *)(v19 & 0xFFFFFFFFFFFFFFFELL));
      goto LABEL_12;
    }
  }
  sub_22F32F928(v20);
  v21 = 1;
LABEL_12:
  if (v24 != v26)
    free(v24);
  if (v28 != v30)
    free(v28);
  if (v31 != v33)
    free(v31);
  return v21;
}

uint64_t sub_22ED78FD4(uint64_t a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  const void **v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;

  v4 = (void **)(a2 + 32);
  if ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFF) != 2)
  {
    v5 = 8 * ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFFu) - 2);
    v6 = (const void **)(a2 + 32);
    do
    {
      v7 = *v6++;
      sub_22E3BA850(a1 + 32, v7);
      v5 -= 8;
    }
    while (v5);
  }
  v8 = sub_22ED78310(a1, *(_QWORD *)(a2 + 16));
  if ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFF) != 2)
  {
    v9 = 8 * ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFFu) - 2);
    do
    {
      v10 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 32), *v4);
      v11 = *(_QWORD *)(a1 + 40);
      if (v11 == *(_QWORD *)(a1 + 32))
        v12 = 52;
      else
        v12 = 48;
      if (v10 != (void **)(v11 + 8 * *(unsigned int *)(a1 + v12)))
      {
        *v10 = (void *)-2;
        ++*(_DWORD *)(a1 + 56);
      }
      ++v4;
      v9 -= 8;
    }
    while (v9);
  }
  return v8;
}

uint64_t sub_22ED790BC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  v4 = **(_QWORD **)(a2 + 16);
  if (v4)
  {
    v5 = *a1;
    sub_22F0D5A50(*(_QWORD *)(a2 + 24));
    sub_22EB4E494(v5, v6, v4, 1);
  }
  return sub_22ED78310(a1, *(_QWORD *)(a2 + 24));
}

uint64_t sub_22ED79118(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  int v4;
  unsigned __int8 *v5;
  int v6;
  BOOL v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  unsigned __int8 **v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  unsigned __int8 **v17;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  int v23;
  char v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  unsigned __int8 **v35;
  uint64_t **v36;
  unsigned __int8 **v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t i;
  uint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  int v55;
  int v56;
  void *v57[2];
  _BYTE v58[64];
  void *v59;
  uint64_t v60;
  _QWORD v61[10];

  v2 = (uint64_t)a2;
  v61[8] = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a2 + 8);
  if (v4)
  {
    if (v4 == 1)
      goto LABEL_9;
    v5 = a2 + 40;
    v6 = *a2;
    v7 = v6 == 119;
    if (v6 == 119)
      v8 = a2;
    else
      v8 = 0;
    v9 = v8 + 48;
    if (v7)
      v5 = v9;
    if (sub_22EFFF908(*((unsigned __int8 **)v5 + 1)))
    {
LABEL_9:
      v10 = *(unsigned __int8 *)v2;
      v11 = v10 == 119;
      if (v10 == 119)
        v12 = v2;
      else
        v12 = 0;
      v13 = (unsigned __int8 **)(v12 + 48);
      if (!v11)
        v13 = (unsigned __int8 **)(v2 + 40);
      if (!sub_22EFFF908(*v13) && (*(_DWORD *)v2 & 0x100000) == 0)
      {
        v14 = *(_DWORD *)v2;
        v15 = v14 == 119;
        if (v14 == 119)
          v16 = v2;
        else
          v16 = 0;
        v17 = (unsigned __int8 **)(v16 + 48);
        if (!v15)
          v17 = (unsigned __int8 **)(v2 + 40);
        return sub_22ED83974((uint64_t *)a1, *v17, 0);
      }
    }
  }
  v19 = sub_22ED8368C(a1, *(_QWORD *)(v2 + 8));
  if (v19 < 0x10)
    return 1;
  v20 = v19;
  v21 = *(void **)(v2 + 16);
  v57[0] = v21;
  v59 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), v57, &v59)
    && v59 != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
  {
    v21 = (void *)*((_QWORD *)v59 + 1);
  }
  if (!v21)
    return 1;
  v53 = 0;
  v57[0] = v58;
  v57[1] = (void *)0x800000000;
  v22 = *(_QWORD *)a1;
  v23 = *(_DWORD *)v2;
  if ((*(_DWORD *)v2 & 0x100000) == 0
    || ((v25 = *(_DWORD *)(*(_QWORD *)(v22 + 3688) + 576 * *(unsigned int *)(v22 + 3696) - 576), v25 <= 3)
      ? (v26 = v25 == 2)
      : (v26 = 1),
        v26))
  {
    v24 = 1;
  }
  else
  {
    v24 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(v22 + 72) + 1) & 2) != 0)
    {
      v59 = 0;
      v55 = 3;
      v56 = 1;
      v54 = *(unsigned int *)(v22 + 1704);
      sub_22EB4DDB8(v22 + 3688, &v56, (int *)&v54, (__int16 *)(v22 + 1693), (uint64_t *)&v59, &v55);
      v27 = *(unsigned int *)(v22 + 3696);
      v28 = v27 - 2;
      v29 = *(_QWORD *)(v22 + 3688);
      v30 = *(_DWORD *)(v29 + 576 * (v27 - 2));
      if (v30 == 5)
      {
        *(_BYTE *)(v29 + 576 * v27 - 4) = *(_BYTE *)(v29 + 576 * v28 + 572);
        v31 = 1;
      }
      else if (v30 == 2)
      {
        *(_BYTE *)(v29 + 576 * v27 - 4) = 1;
        v31 = *(_BYTE *)(v29 + 576 * v28 + 573) != 0;
      }
      else
      {
        v31 = 0;
        *(_BYTE *)(v29 + 576 * v27 - 4) = 0;
      }
      v32 = v29 + 576 * v27;
      *(_BYTE *)(v32 - 3) = v31;
      *(_WORD *)(v22 + 1693) = 0;
      if (*(_DWORD *)(v22 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v22 + 1776), (llvm::SmallPtrSetImplBase *)(v32 - 560));
        sub_22EAEAE08(v22 + 1840, (uint64_t *)(v32 - 496));
      }
      v24 = 0;
      v23 = *(unsigned __int8 *)v2;
    }
  }
  v33 = v23 == 119;
  if (v23 == 119)
    v34 = v2;
  else
    v34 = 0;
  v35 = (unsigned __int8 **)(v34 + 48);
  v36 = (uint64_t **)(v2 + 40);
  if (v33)
    v37 = v35;
  else
    v37 = (unsigned __int8 **)(v2 + 40);
  if (sub_22ED836E0((uint64_t *)a1, v37, *(_DWORD *)(v2 + 32), 1, (uint64_t)v57, &v53))
  {
    if ((v24 & 1) == 0)
      sub_22EB48E64(v22);
    v2 = 1;
    goto LABEL_67;
  }
  if ((v24 & 1) == 0)
    sub_22EB48E64(v22);
  v38 = *(_QWORD *)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1 || v20 != *(_QWORD *)(v2 + 8) || v21 != *(void **)(v2 + 16) || v53)
  {
    if (*(_BYTE *)v2 != 119)
    {
      v40 = *(_DWORD *)(v2 + 4);
      goto LABEL_62;
    }
    v52 = *(_QWORD *)a1;
    v44 = **v36;
    v45 = v44;
    while (1)
    {
      if ((v45 & 0xF) != 0)
        goto LABEL_81;
      v46 = *(unsigned __int8 *)(*(_QWORD *)(v45 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v46 > 0x39)
      {
LABEL_76:
        if (sub_22F115668(v45))
          v44 = v45;
        v45 = sub_22F115B7C(v45);
        if (!v45)
          goto LABEL_97;
      }
      else
      {
        if (v46 == 24)
          goto LABEL_96;
        if (v46 == 26)
        {
          if ((*(_BYTE *)(v45 + 23) & 0x10) != 0)
          {
LABEL_96:
            v44 = v45;
LABEL_97:
            v40 = sub_22F115668(v44);
            v38 = v52;
LABEL_62:
            v41 = v40;
            v42 = *(_DWORD *)v2;
            v43 = *(_QWORD *)(v2 + 24);
            v59 = v61;
            v60 = 0x800000000;
            if ((sub_22EACCC94(v38) & 1) != 0)
              v2 = 1;
            else
              v2 = sub_22EACC4D8(*(_QWORD *)a1, v41, v20, (uint64_t)v21, (v42 >> 18) & 1, (uint64_t *)v59, v60, (v42 & 0x80000) != 0, (v42 & 0x100000) != 0, (v42 & 0x200000) != 0, (v42 & 0x400000) != 0, v51, (v42 >> 23) & 7, v43);
            if (v59 != v61)
              free(v59);
            goto LABEL_67;
          }
        }
        else if (((1 << v46) & 0x20000000200003CLL) == 0)
        {
          goto LABEL_76;
        }
LABEL_81:
        v45 = sub_22F115B7C(v45);
      }
    }
  }
  if (*(_BYTE *)v2 != 119)
  {
    v39 = *(_DWORD *)(v2 + 4);
    goto LABEL_59;
  }
  v47 = *(_QWORD *)a1;
  v48 = **v36;
  for (i = v48; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_95;
      v50 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v50 <= 0x39)
        break;
LABEL_90:
      if (sub_22F115668(i))
        v48 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_99;
    }
    if (v50 == 24)
      goto LABEL_98;
    if (v50 == 26)
      break;
    if (((1 << v50) & 0x20000000200003CLL) == 0)
      goto LABEL_90;
LABEL_95:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_95;
LABEL_98:
  v48 = i;
LABEL_99:
  v39 = sub_22F115668(v48);
  v38 = v47;
LABEL_59:
  sub_22EB4E494(v38, v39, v21, 1);
LABEL_67:
  if (v57[0] != v58)
    free(v57[0]);
  return v2;
}

uint64_t sub_22ED7971C(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 **v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  BOOL v20;
  unsigned __int8 *v21;
  unsigned __int8 **v22;
  unsigned __int8 **v23;
  char v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v29[2];
  char v30;
  uint64_t v31;
  int v32;
  int v33;
  void *v34[2];
  _QWORD v35[9];

  v35[8] = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned __int8 **)(a2 + 40);
  v5 = sub_22ED8FAF0((uint64_t *)a1, *((uint64_t **)a2 + 5));
  if (!v5)
    return 1;
  v6 = (uint64_t *)v5;
  v7 = *((_QWORD *)a2 + 2);
  v29[0] = v7;
  v34[0] = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), v29, v34)
    && v34[0] != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
  {
    v7 = *((_QWORD *)v34[0] + 1);
  }
  if (!v7)
    return 1;
  v30 = 0;
  v34[0] = v35;
  v34[1] = (void *)0x800000000;
  if (*((_DWORD *)a2 + 8) >= 9u)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  v8 = *(_QWORD *)a1;
  v9 = *(_DWORD *)a2;
  if ((*(_DWORD *)a2 & 0x100000) == 0
    || ((v12 = *(_DWORD *)(*(_QWORD *)(v8 + 3688) + 576 * *(unsigned int *)(v8 + 3696) - 576), v12 <= 3)
      ? (v13 = v12 == 2)
      : (v13 = 1),
        v13))
  {
    v10 = 1;
  }
  else
  {
    v10 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(v8 + 72) + 1) & 2) != 0)
    {
      v29[0] = 0;
      v32 = 3;
      v33 = 1;
      v31 = *(unsigned int *)(v8 + 1704);
      sub_22EB4DDB8(v8 + 3688, &v33, (int *)&v31, (__int16 *)(v8 + 1693), v29, &v32);
      v14 = *(unsigned int *)(v8 + 3696);
      v15 = v14 - 2;
      v16 = *(_QWORD *)(v8 + 3688);
      v17 = *(_DWORD *)(v16 + 576 * (v14 - 2));
      if (v17 == 5)
      {
        *(_BYTE *)(v16 + 576 * v14 - 4) = *(_BYTE *)(v16 + 576 * v15 + 572);
        v18 = 1;
      }
      else if (v17 == 2)
      {
        *(_BYTE *)(v16 + 576 * v14 - 4) = 1;
        v18 = *(_BYTE *)(v16 + 576 * v15 + 573) != 0;
      }
      else
      {
        v18 = 0;
        *(_BYTE *)(v16 + 576 * v14 - 4) = 0;
      }
      v19 = v16 + 576 * v14;
      *(_BYTE *)(v19 - 3) = v18;
      *(_WORD *)(v8 + 1693) = 0;
      if (*(_DWORD *)(v8 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v8 + 1776), (llvm::SmallPtrSetImplBase *)(v19 - 560));
        sub_22EAEAE08(v8 + 1840, (uint64_t *)(v19 - 496));
      }
      v10 = 0;
      v9 = *a2;
    }
  }
  v20 = v9 == 119;
  if (v9 == 119)
    v21 = a2;
  else
    v21 = 0;
  v22 = (unsigned __int8 **)(v21 + 48);
  if (v20)
    v23 = v22;
  else
    v23 = v4;
  v24 = sub_22ED836E0((uint64_t *)a1, v23, *((_DWORD *)a2 + 8), 1, (uint64_t)v34, &v30);
  if ((v10 & 1) == 0)
    sub_22EB48E64(v8);
  if ((v24 & 1) != 0)
  {
    v11 = 1;
  }
  else
  {
    v25 = *(_QWORD *)a1;
    if (*(_DWORD *)(*(_QWORD *)a1 + 11992) == -1 && v6 == (uint64_t *)*v4 && v7 == *((_QWORD *)a2 + 2) && !v30)
    {
      v26 = sub_22F060A34((uint64_t)a2);
      sub_22EB4E494(v25, v26, v7, 1);
      v27 = sub_22EBCC6C0(*(_QWORD *)a1, (uint64_t)a2);
    }
    else
    {
      v29[0] = *v6;
      v29[1] = (uint64_t)(v6 + 1);
      sub_22F1167E8(v29);
      sub_22F3C57CC(a2);
      v27 = sub_22EBBC368();
    }
    v11 = v27;
  }
  if (v34[0] != v35)
    free(v34[0]);
  return v11;
}

uint64_t sub_22ED79A5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = a2;
  v4 = sub_22ED78310(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(v2 + 16);
  if (v5)
  {
    v16 = *(_QWORD *)(v2 + 16);
    v17 = 0;
    if (sub_22E793870((uint64_t *)(a1 + 8), &v16, &v17))
    {
      if (v17 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
      {
        v5 = *(_QWORD *)(v17 + 8);
        if (!v5)
          return 1;
      }
    }
  }
  v6 = *(_QWORD *)a1;
  v7 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1 || *(_QWORD *)(v2 + 24) != v7 || v5 != *(_QWORD *)(v2 + 16))
    return sub_22EBC2B50(v6, *(_DWORD *)(v2 + 4), (*(_DWORD *)v2 >> 18) & 1, (*(_DWORD *)v2 >> 19) & 1, v7);
  if (v5)
  {
    sub_22EB4E494(v6, *(unsigned int *)(v2 + 4), v5, 1);
    v7 = *(_QWORD *)(v2 + 24);
  }
  if ((*(_BYTE *)(v7 + 1) & 0x80) == 0)
  {
    v9 = *(_QWORD *)(*(_QWORD *)a1 + 88);
    v10 = sub_22F0602E8(v2);
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22EF5BA38(v9, v10) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v11)
    {
      if (*(_BYTE *)(v11 + 16) == 45)
      {
        v12 = sub_22F114198(*(_QWORD *)(v11 + 24));
        v13 = *(_QWORD *)a1;
        v14 = *(unsigned int *)(v2 + 4);
        v15 = sub_22EC6602C(v13, v12);
        sub_22EB4E494(v13, v14, v15 & 0xFFFFFFFFFFFFFFF8, 1);
      }
    }
  }
  return v2;
}

uint64_t sub_22ED79BDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  __n128 v30;
  void *v31[2];
  _DWORD v32[66];
  uint64_t v33;

  v2 = a2;
  v33 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 16);
  if (v4 && (sub_22EFFFB48(*(unsigned __int8 **)(a2 + 16)) & 1) == 0)
  {
    v13 = sub_22ED78310(a1, v4);
    if ((v13 & 1) != 0)
      return 1;
    v31[0] = 0;
    v30.n128_u8[0] = 0;
    v14 = (*(_DWORD *)v2 & 0x40000) != 0 ? 36 : 25;
    v15 = sub_22EBCD1E4(*(unsigned int **)a1, 0, v13 & 0xFFFFFFFFFFFFFFFELL, *(unsigned int *)(v2 + 4), v14, (unint64_t *)v31, &v30);
    v7 = v15;
    if ((v15 & 1) != 0)
      return 1;
    v8 = v31[0];
    v5 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    v5 = sub_22ED8368C(a1, *(_QWORD *)(v2 + 24));
    v6 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0);
    if (!v6 || *(_BYTE *)(v6 + 16) != 39)
      v6 = sub_22F10CF48(v6);
    v7 = 0;
    v4 = 0;
    v8 = *(void **)(v6 + 32);
  }
  v9 = *(unsigned int *)v2;
  if ((v9 & 0x100000) != 0)
  {
    v11 = (_DWORD *)(v2 + 72);
    if ((v9 & 0x80000) != 0 && *v11)
      v12 = *(unsigned int *)(v2 + 84);
    else
      v12 = 0;
    v10 = *(_QWORD *)&v11[8 * v12 + 4 * ((v9 >> 19) & 1)];
  }
  else
  {
    v10 = 0;
  }
  v30.n128_u64[0] = v10;
  v31[0] = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v30, v31)
    && v31[0] != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
  {
    v10 = *((_QWORD *)v31[0] + 1);
  }
  v16 = *(_QWORD *)(v2 + 32);
  if (v16)
  {
    v17 = sub_22ED89638((uint64_t *)a1, v16, *(void **)(v2 + 40), (unint64_t)v8, v10);
    if (!v17)
      return 1;
    v19 = v17;
    v20 = v18;
  }
  else
  {
    v20 = 0;
    v19 = 0;
  }
  if ((*(_BYTE *)(v2 + 2) & 8) != 0)
    v21 = *(_DWORD *)(v2 + 80);
  else
    v21 = 0;
  sub_22ED89DE4(&v30, a1, (__n128 *)(v2 + 48));
  if (!v30.n128_u64[0])
    return 1;
  v22 = *(unsigned int *)v2;
  if ((v22 & 0x80000) != 0 && (v23 = *(_DWORD *)(v2 + 72)) != 0)
  {
    v24 = *(_DWORD *)(v2 + 76);
    v31[0] = v32;
    v31[1] = (void *)0x800000000;
    v32[64] = v23;
    v32[65] = v24;
    v25 = v2 + 72 + 16 * ((v22 >> 19) & 1);
    if ((sub_22ED90408(a1, v25, v25 + 32 * *(unsigned int *)(v2 + 84)) & 1) != 0)
      v2 = 1;
    else
      v2 = sub_22F3012E8((_QWORD **)a1, v7 & 0xFFFFFFFFFFFFFFFELL, v5, (*(_DWORD *)v2 >> 18) & 1, *(_DWORD *)(v2 + 4), v19, v20, v21, v10, (uint64_t)&v30, (uint64_t)v31);
    if (v31[0] != v32)
      free(v31[0]);
  }
  else
  {
    if (v4 != (v7 & 0xFFFFFFFFFFFFFFFELL)
      || *(_DWORD *)(*(_QWORD *)a1 + 11992) != -1
      || v5 != *(_QWORD *)(v2 + 24)
      || v19 != *(_QWORD *)(v2 + 32)
      || v20 != *(_QWORD *)(v2 + 40)
      || v30.n128_u64[0] != *(_QWORD *)(v2 + 48))
    {
      return sub_22F3012E8((_QWORD **)a1, v7 & 0xFFFFFFFFFFFFFFFELL, v5, (v22 >> 18) & 1, *(_DWORD *)(v2 + 4), v19, v20, v21, v10, (uint64_t)&v30, 0);
    }
    if ((v22 & 0x100000) != 0)
    {
      v27 = (_DWORD *)(v2 + 72);
      if ((v22 & 0x80000) != 0 && *v27)
        v28 = *(unsigned int *)(v2 + 84);
      else
        v28 = 0;
      v26 = *(_QWORD *)&v27[8 * v28 + 4 * ((v22 >> 19) & 1)];
    }
    else
    {
      v26 = 0;
    }
    if (v10 != v26)
      return sub_22F3012E8((_QWORD **)a1, v7 & 0xFFFFFFFFFFFFFFFELL, v5, (v22 >> 18) & 1, *(_DWORD *)(v2 + 4), v19, v20, v21, v10, (uint64_t)&v30, 0);
  }
  return v2;
}

uint64_t sub_22ED79F44(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  void *v37[2];
  _QWORD v38[5];

  v2 = a2;
  v38[4] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 32);
  if (v4)
  {
    v5 = sub_22ED78310(a1, v4);
    if ((v5 & 1) != 0)
      return 1;
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_QWORD *)(v2 + 40);
  if (!v7 || (*(_BYTE *)(v7 + 1) & 0x20) == 0)
    v7 = *(_QWORD *)(v2 + 48);
  v37[0] = v38;
  v37[1] = (void *)0x200000000;
  v8 = *a1;
  v35 = 7;
  v36 = v7;
  sub_22EE7377C(v8, (uint64_t)&v35, (uint64_t)v37);
  v9 = *(_DWORD *)(v2 + 28);
  v10 = v9 != 0;
  v11 = v9 != 0;
  v12 = v9 - 1;
  if (v11)
    v13 = v12;
  else
    v13 = 0;
  v14 = *a1;
  v15 = *(_DWORD *)(*a1 + 11992);
  *(_DWORD *)(*a1 + 11992) = -1;
  v16 = *(_QWORD *)(v2 + 40);
  if (v16)
  {
    v17 = sub_22ED78310(a1, v16);
    if ((v17 & 1) != 0)
      goto LABEL_18;
  }
  else
  {
    v17 = 0;
  }
  v18 = *(_QWORD *)(v2 + 48);
  if (!v18)
  {
    v19 = 0;
    goto LABEL_20;
  }
  v19 = sub_22ED78310(a1, v18);
  if ((v19 & 1) == 0)
  {
LABEL_20:
    v20 = *a1;
    if (*(_DWORD *)(v20 + 11992) != -1
      || *(_QWORD *)(v2 + 40) != (v17 & 0xFFFFFFFFFFFFFFFELL)
      || *(_QWORD *)(v2 + 48) != (v19 & 0xFFFFFFFFFFFFFFFELL))
    {
      v22 = *(_DWORD *)(v2 + 16);
      if (!v22)
      {
        v23 = *(_QWORD *)(v2 + 40);
        if (v23 && (*(_BYTE *)(v23 + 1) & 0x20) != 0)
        {
          sub_22F0D5A50(v23);
          v22 = v24;
        }
        else
        {
          v22 = *(_DWORD *)(v2 + 20);
        }
      }
      v25 = v13 | (v10 << 32);
      v26 = v17 & 0xFFFFFFFFFFFFFFFELL;
      v27 = *(_DWORD *)(v2 + 56);
      v28 = v19 & 0xFFFFFFFFFFFFFFFELL;
      v30 = *(_DWORD *)(v2 + 20);
      v29 = *(_DWORD *)(v2 + 24);
      if (!v29)
      {
        v31 = *(_QWORD *)(v2 + 40);
        if (!v31 || (v29 = *(_DWORD *)(v2 + 20), (*(_BYTE *)(v31 + 1) & 0x20) == 0))
        {
          v32 = *(_QWORD *)(v2 + 48);
          v34 = v22;
          v33 = v26;
          sub_22F0D60E4(v32);
          v26 = v33;
          v22 = v34;
        }
      }
      v2 = sub_22F34AF2C(v20, v6, v22, v26, v27, v30, v28, v29, v25);
    }
    goto LABEL_23;
  }
LABEL_18:
  v2 = 1;
LABEL_23:
  *(_DWORD *)(v14 + 11992) = v15;
  if (v37[0] != v38)
    free(v37[0]);
  return v2;
}

uint64_t sub_22ED7A170(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int v10;
  char v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v2 = a2;
  v4 = sub_22ED8368C(a1, *(_QWORD *)(a2 + 8));
  if (v4 < 0x10)
    return 1;
  v5 = v4;
  v6 = *(_QWORD *)(v2 + 16);
  v13 = v6;
  v14 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v13, &v14)
    && v14 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
  {
    v6 = *(_QWORD *)(v14 + 8);
  }
  if (!v6)
    return 1;
  v7 = *(_QWORD *)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) == -1 && v5 == *(_QWORD *)(v2 + 8) && v6 == *(_QWORD *)(v2 + 16))
  {
    sub_22EB4E494(v7, *(unsigned int *)(v2 + 24), v6, 1);
  }
  else
  {
    v9 = *(_DWORD *)(v2 + 24);
    v10 = *(unsigned __int8 *)(v2 + 28);
    v11 = v10 & 1;
    v12 = (v10 >> 1) & 1;
    v2 = sub_22E3CD3D4(*(_QWORD *)(v7 + 88) + 2032, 32, 3);
    sub_22F2F3990(v2, v9, v5, v6, v11, v12);
  }
  return v2;
}

uint64_t sub_22ED7A280(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t *v5;
  unsigned int v6;
  _BOOL4 v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  _QWORD v50[10];

  v2 = a2;
  v50[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22ED8FAF0(a1, *(uint64_t **)(a2 + 32));
  if (!v4)
    return 1;
  v5 = (unint64_t *)v4;
  v6 = *(_DWORD *)v2;
  v7 = (*(_DWORD *)v2 & 0x80000) == 0;
  if ((*(_DWORD *)v2 & 0x80000) == 0)
  {
    v8 = 0;
    v9 = 0;
    v10 = *(_DWORD *)v2;
    goto LABEL_10;
  }
  v11 = *(_QWORD *)(v2 + 56);
  if (!v11)
  {
    v12 = 0;
    v10 = *(_DWORD *)v2;
    goto LABEL_9;
  }
  v12 = sub_22ED78310(a1, v11);
  if ((v12 & 1) != 0)
    return 1;
  v10 = *(_DWORD *)v2;
LABEL_9:
  v8 = v12 & 0xFFFFFFFFFFFFFFFELL;
  v9 = 1;
LABEL_10:
  v45 = 0;
  v48 = v50;
  v49 = 0x800000000;
  v13 = (_QWORD *)(v2 + 56);
  if ((v10 & 0x1800000) != 0)
    v14 = ((v10 >> 19) & 1) + 1;
  else
    v14 = (v10 >> 19) & 1;
  if ((sub_22ED836E0(a1, (unsigned __int8 **)&v13[v14], *(_DWORD *)(v2 + 4), 1, (uint64_t)&v48, &v45) & 1) != 0)
    goto LABEL_14;
  v15 = *(unsigned int *)v2;
  if ((v15 & 0x1800000) != 0)
  {
    v16 = (v15 >> 19) & 1;
    v17 = v13[v16];
    if (v17)
    {
      v18 = sub_22ED83974(a1, (unsigned __int8 *)v13[v16], 1);
      if ((v18 & 1) != 0)
        goto LABEL_14;
    }
    else
    {
      v18 = 0;
    }
  }
  else
  {
    v18 = 0;
    v17 = 0;
  }
  v43 = v18;
  v44 = v8;
  v19 = *(_QWORD *)(v2 + 16);
  if (!v19
    || (v46 = *(_QWORD *)(v2 + 16), v47 = 0, !sub_22E793870(a1 + 1, &v46, &v47))
    || v47 == a1[1] + 16 * *((unsigned int *)a1 + 6)
    || (v19 = *(_QWORD *)(v47 + 8)) != 0)
  {
    v42 = v9;
    v20 = *(_QWORD *)(v2 + 24);
    if (!v20
      || (v46 = *(_QWORD *)(v2 + 24), v47 = 0, !sub_22E793870(a1 + 1, &v46, &v47))
      || v47 == a1[1] + 16 * *((unsigned int *)a1 + 6)
      || (v20 = *(_QWORD *)(v47 + 8)) != 0)
    {
      v21 = *a1;
      if (*(_DWORD *)(*a1 + 11992) == -1 && v5 == *(unint64_t **)(v2 + 32))
      {
        if ((*(_BYTE *)(v2 + 2) & 8) != 0 && *v13)
        {
          if ((v6 & 0x80000) == 0)
          {
            v22 = *v5;
            goto LABEL_32;
          }
          v7 = v44 == *v13;
        }
        if (v17 == (v43 & 0xFFFFFFFFFFFFFFFELL)
          && v7
          && v19 == *(_QWORD *)(v2 + 16)
          && v20 == *(_QWORD *)(v2 + 24)
          && !v45)
        {
          if (v19)
            sub_22EB4E494(v21, *(unsigned int *)(v2 + 40), v19, 1);
          if (v20)
            sub_22EB4E494(*a1, *(unsigned int *)(v2 + 40), v20, 1);
          if ((*(_BYTE *)(v2 + 2) & 8) != 0)
          {
            v36 = *(_QWORD *)(*(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF0);
            if (!v36 || *(_BYTE *)(v36 + 16) != 39)
              v36 = sub_22F10CF48(v36);
            if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v36 + 32) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0)
            {
              v37 = *(_QWORD *)(*a1 + 88);
              v38 = *(_QWORD *)(*(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF0);
              if (!v38 || *(_BYTE *)(v38 + 16) != 39)
                v38 = sub_22F10CF48(v38);
              v39 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22EF5BA38(v37, *(_QWORD *)(v38 + 32)) & 0xFFFFFFFFFFFFFFF0)
                                          + 8) & 0xFFFFFFFFFFFFFFF0);
              if (v39)
              {
                if (*(_BYTE *)(v39 + 16) == 45)
                {
                  v40 = sub_22F114198(*(_QWORD *)(v39 + 24));
                  v41 = sub_22EC6602C(*a1, v40) & 0xFFFFFFFFFFFFFFF8;
                  if (v41)
                    sub_22EB4E494(*a1, *(unsigned int *)(v2 + 40), v41, 1);
                }
              }
            }
          }
          goto LABEL_49;
        }
      }
      v22 = *v5;
      if ((v6 & 0x80000) != 0)
      {
        v24 = v42;
        goto LABEL_43;
      }
LABEL_32:
      v23 = sub_22EF5C728(*(_QWORD *)(v21 + 88), v22);
      v24 = v42;
      if (v23)
      {
        v25 = v23;
        v26 = *(unsigned __int8 *)(v23 + 16);
        if (v26 == 3)
        {
          v31 = *(_QWORD *)(v23 + 48);
          if (v31)
            goto LABEL_42;
        }
        else if (v26 == 2)
        {
          v27 = *(_QWORD *)(*a1 + 88);
          v28 = sub_22EF67C8C(v27);
          v29 = *(_DWORD *)(v2 + 40);
          v30 = sub_22E3CD3D4(v27 + 2032, 32, 3);
          v31 = sub_22EFF8F1C(v30, v27, v25 + 40, v28, v29);
LABEL_42:
          v22 = *(_QWORD *)(v25 + 32);
          v24 = 1;
          v44 = v31;
        }
      }
LABEL_43:
      v32 = *(_DWORD *)v2;
      if ((*(_DWORD *)v2 & 0x2000000) != 0)
      {
        v34 = (v32 >> 19) & 1;
        if ((v32 & 0x1800000) != 0)
          ++v34;
        v33 = v13[v34 + *(_DWORD *)(v2 + 4)];
      }
      else
      {
        v33 = 0;
      }
      v2 = sub_22EBBD504(*a1, *(unsigned int *)(v2 + 40) | ((unint64_t)*(unsigned int *)(v2 + 40) << 32), (v32 >> 18) & 1, *(unsigned int *)(v2 + 40), (uint64_t)v48, v49, *(unsigned int *)(v2 + 40), v33, v22, v5, v44, v24, *(_QWORD *)(v2 + 48), (unsigned __int8 *)(v43 & 0xFFFFFFFFFFFFFFFELL));
      goto LABEL_49;
    }
  }
LABEL_14:
  v2 = 1;
LABEL_49:
  if (v48 != v50)
    free(v48);
  return v2;
}

uint64_t sub_22ED7A70C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v14[3];
  int v15;
  uint64_t v16;
  int v17;

  v4 = *a1;
  v17 = 0;
  v16 = 0;
  v15 = 3;
  *(_QWORD *)v14 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v17, v14, (__int16 *)(v4 + 1693), &v16, &v15);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  v11 = sub_22ED78310(a1, *(_QWORD *)(a2 + 16));
  if ((v11 & 1) != 0)
  {
    a2 = 1;
  }
  else
  {
    v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(a2 + 16) != v12)
      a2 = sub_22F3321E4(*a1, *(_QWORD *)(a2 + 24), v12, HIDWORD(*(_QWORD *)(a2 + 24)));
  }
  sub_22EB48E64(v4);
  return a2;
}

uint64_t sub_22ED7A880(unsigned int **a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned __int16 v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  __int128 v51;
  void *v52[2];
  char v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  __int128 v57;
  void *v58[2];
  uint64_t v59;
  unsigned int v60;
  _QWORD *v61;

  v4 = sub_22ED78310(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v54 = 0;
  v53 = 0;
  v5 = (*(_BYTE *)(a2 + 24) & 1) != 0 ? 36 : 25;
  v6 = sub_22EBCD1E4(*a1, 0, v4 & 0xFFFFFFFFFFFFFFFELL, *(unsigned int *)(a2 + 28), v5, &v54, &v53);
  if ((v6 & 1) != 0)
    return 1;
  v7 = v54;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(void **)(a2 + 40);
  if (!v8)
  {
    v12 = 0;
    goto LABEL_12;
  }
  v10 = sub_22ED89638((uint64_t *)a1, v8, v9, v54, 0);
  if (!v10)
    return 1;
  v12 = v10;
  v9 = v11;
LABEL_12:
  v51 = 0u;
  *(_OWORD *)v52 = 0u;
  sub_22E8ACE30((uint64_t)&v51, v12, (uint64_t)v9);
  v15 = *(_QWORD *)(a2 + 64);
  v16 = v15 & 0xFFFFFFFFFFFFFFFELL;
  if ((v15 & 1) != 0 || !v16)
  {
    if (v7 >= 0x10 && (*(_BYTE *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
    {
      v21 = *(_DWORD *)(a2 + 72);
      if ((v15 & 1) != 0)
        v16 = v15 | 1;
      else
        v16 = 1;
    }
    else
    {
      v18 = sub_22EBB87FC(*a1, *(unsigned int *)(a2 + 60), (_QWORD *)((v15 << 63 >> 63) & v16), *(_DWORD *)(a2 + 72), 0, (uint64_t)&v51, v54, 0);
      if (!v18)
        goto LABEL_80;
      v19 = v18;
      if (v18 >= 0x10)
      {
        v22 = *(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0);
        if (v22 && *(_BYTE *)(v22 + 16) == 57)
          v19 = *(_QWORD *)(v22 + 8);
      }
      else
      {
        v19 = 0;
      }
      v23 = sub_22EF579A8(*((_QWORD *)*a1 + 11), v19, *(_DWORD *)(a2 + 72));
      v16 = (unint64_t)v23 & 0xFFFFFFFFFFFFFFFELL;
      v21 = sub_22F115668(*v23);
    }
  }
  else
  {
    if (*(_QWORD *)v16 >= 0x10uLL)
    {
      v20 = sub_22ED89FEC((uint64_t *)a1, *(_QWORD *)v16, (unsigned int *)(v16 + 8), v7, (uint64_t)&v51);
      if (!v20)
        goto LABEL_80;
      v16 = (unint64_t)v20 & 0xFFFFFFFFFFFFFFFELL;
      v17 = *v20;
    }
    else
    {
      v17 = *(_QWORD *)v16;
    }
    v21 = sub_22F115668(v17);
  }
  v24 = *(_QWORD **)(a2 + 48);
  if (!v24)
    goto LABEL_36;
  v57 = 0u;
  *(_OWORD *)v58 = 0u;
  if (*v24 <= 0xFuLL)
    goto LABEL_36;
  v24 = sub_22ED89FEC((uint64_t *)a1, *v24, (unsigned int *)v24 + 2, v7, (uint64_t)&v57);
  if (HIDWORD(v58[1]))
    free(v58[0]);
  if (v24)
  {
LABEL_36:
    v25 = v6 & 0xFFFFFFFFFFFFFFFELL;
    v26 = *(unsigned int *)(a2 + 28);
    v27 = *(_BYTE *)(a2 + 24);
    v28 = *(_DWORD *)(a2 + 56);
    v29 = *(_DWORD *)(a2 + 60);
    if ((*(_BYTE *)(v25 + 1) & 0x80) != 0
      || (v30 = *(_QWORD *)(v25 + 8), (v16 & 1) != 0) && (v16 & 0xFFFFFFFFFFFFFFFELL) != 0)
    {
LABEL_39:
      if ((v27 & 1) != 0)
        v31 = 36;
      else
        v31 = 25;
      v32 = sub_22EBCD92C((uint64_t)*a1, v25, v26, v31, (uint64_t)&v51, v24, v28, v29, v16, v21);
      goto LABEL_43;
    }
    v33 = v30 & 0xFFFFFFFFFFFFFFF0;
    v34 = *(_QWORD *)(v30 & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      if (!v34 || *(_BYTE *)(v34 + 16) != 39)
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v34 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39
          || (v48 = *(_QWORD *)(v25 + 8),
              v49 = *(unsigned int *)(a2 + 28),
              v37 = sub_22F10CF48(v34),
              v30 = v48,
              v26 = v49,
              !v37))
        {
LABEL_56:
          v50 = v26;
          v38 = v30;
          if ((v16 & 1) != 0)
            v39 = 0;
          else
            v39 = (_QWORD *)(v16 & 0xFFFFFFFFFFFFFFFELL);
          v59 = sub_22EFC6B40((_QWORD *)(*((_QWORD *)*a1 + 11) + 15224), *v39 & 7 | *(_QWORD *)((*v39 & 0xFFFFFFFFFFFFFFF0) + 8));
          v60 = v21;
          sub_22EFC6D6C((uint64_t)&v61, v59);
          v61 = v39;
          if (!v24)
            goto LABEL_65;
          v40 = *v24;
          v41 = *(_QWORD *)(*v24 & 0xFFFFFFFFFFFFFFF0);
          if (v41 && (*(_DWORD *)(v41 + 16) & 0xFE) == 0x2C
            || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v41 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x2C
            && (v42 = sub_22F10CF48(v41), v40 = *v24, v42))
          {
            sub_22E8ACD1C((uint64_t)&v51, *((_QWORD *)*a1 + 11), 0, v40, (uint64_t)(v24 + 1), v28);
LABEL_65:
            v32 = sub_22EC225CC(*a1, v25, v38, v50, v27 & 1, (uint64_t)&v51, 0, 0, (uint64_t)&v59, 0, 0, 0);
LABEL_43:
            v13 = v32;
            goto LABEL_81;
          }
          v43 = *a1;
          v44 = v40;
          while (1)
          {
            if ((v44 & 0xF) != 0)
              goto LABEL_77;
            v45 = *(unsigned __int8 *)(*(_QWORD *)(v44 & 0xFFFFFFFFFFFFFFF0) + 16);
            if (v45 > 0x39)
            {
LABEL_72:
              if (sub_22F115668(v44))
                v40 = v44;
              v44 = sub_22F115B7C(v44);
              if (!v44)
                goto LABEL_79;
            }
            else
            {
              if (v45 == 24)
                goto LABEL_78;
              if (v45 == 26)
              {
                if ((*(_BYTE *)(v44 + 23) & 0x10) != 0)
                {
LABEL_78:
                  v40 = v44;
LABEL_79:
                  v46 = sub_22F115668(v40);
                  sub_22E8FCA40(v43, v46, 0xCEFu, 0, (uint64_t)&v57);
                  v56 = *v24;
                  v47 = sub_22E8901B8((uint64_t)&v57, &v56);
                  v55 = (**((_DWORD **)*a1 + 9) >> 8) & 1;
                  sub_22E89519C(v47, (unsigned int *)&v55);
                  sub_22E903BEC((unsigned int *)&v57);
                  goto LABEL_80;
                }
              }
              else if (((1 << v45) & 0x20000000200003CLL) == 0)
              {
                goto LABEL_72;
              }
LABEL_77:
              v44 = sub_22F115B7C(v44);
            }
          }
        }
        v34 = *(_QWORD *)v33;
        if (*(_BYTE *)(*(_QWORD *)v33 + 16) != 39)
        {
          v34 = sub_22F10CF48(v34);
          v30 = v48;
          v26 = v49;
        }
      }
      v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v34 + 32) & 0xFFFFFFFFFFFFFFF0) + 8);
    }
    else
    {
      v35 = *(_QWORD *)(v34 + 8);
    }
    v36 = *(_QWORD *)(v35 & 0xFFFFFFFFFFFFFFF0);
    if (!v36 || *(_BYTE *)(v36 + 16) != 45)
      goto LABEL_39;
    goto LABEL_56;
  }
LABEL_80:
  v13 = 1;
LABEL_81:
  if (HIDWORD(v52[1]))
    free(v52[0]);
  return v13;
}

uint64_t sub_22ED7ADC0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int *v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[2];
  uint64_t v30;
  _QWORD v31[2];
  void *v32;
  uint64_t v33;
  _BYTE v34[16];
  _QWORD v35[6];

  v35[4] = *MEMORY[0x24BDAC8D0];
  memset(v29, 0, sizeof(v29));
  sub_22F05FD5C(a2, v29);
  v4 = sub_22ED78310(a1, *((_QWORD *)&v29[0] + 1));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ED78310(a1, *(_QWORD *)&v29[1]);
  if ((v5 & 1) != 0)
    return 1;
  v27 = v5;
  v28 = v4;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v32 = v34;
  v33 = 0x200000000;
  v31[0] = a2[2];
  v31[1] = *((_QWORD *)&v29[1] + 1);
  v9 = 1;
  do
  {
    v10 = v7;
    v11 = sub_22EFFED0C((unsigned __int8 *)v31[v8]);
    if (*v11 == 141)
    {
      v12 = sub_22EFFED0C(*(unsigned __int8 **)&v11[v11[3]]);
      if (*v12 == 161)
      {
        v13 = v12;
        v14 = v12 + 16;
        if ((*(_DWORD *)(*((_QWORD *)v12 + 2) + 28) & 0x7Eu) - 54 >= 4)
        {
          sub_22F05FD5C(a2, v35);
          v15 = *(unsigned int *)v13;
          if ((v15 & 0x100000) != 0)
            v16 = (unsigned int *)&v13[16 * ((v15 >> 18) & 1) + 32];
          else
            v16 = (unsigned int *)v14;
          v17 = *(_QWORD *)v16;
          v30 = *(_QWORD *)v16;
          v35[0] = 0;
          if (sub_22E793870((uint64_t *)(a1 + 8), &v30, v35)
            && v35[0] != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
          {
            v17 = *(_QWORD *)(v35[0] + 8);
          }
          if (!v17)
            goto LABEL_28;
          v18 = *(unsigned int *)v13;
          if ((v18 & 0x100000) != 0)
            v19 = (unsigned int *)&v13[16 * ((v18 >> 18) & 1) + 32];
          else
            v19 = (unsigned int *)v14;
          v20 = v17 != *(_QWORD *)v19;
          v21 = v33;
          if (v33 >= (unint64_t)HIDWORD(v33))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v21 = v33;
          }
          v6 |= v20;
          *((_QWORD *)v32 + v21) = v17 | 3;
          LODWORD(v33) = v33 + 1;
        }
      }
    }
    v7 = 1;
    v8 = 1;
  }
  while ((v10 & 1) == 0);
  v23 = *(_QWORD *)a1;
  v24 = v28 & 0xFFFFFFFFFFFFFFFELL;
  v25 = v27 & 0xFFFFFFFFFFFFFFFELL;
  if ((*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1) | v6 & 1 || *(_OWORD *)((char *)v29 + 8) != __PAIR128__(v25, v24))
  {
    sub_22F05FD5C(a2, v35);
    sub_22EFF605C(v35[3]);
    v9 = sub_22ED1767C(*(_QWORD *)a1, v26, LODWORD(v29[0]), (uint64_t)&v32, v24, v25, 0, 1, 0);
  }
  else
  {
    v35[0] = v28 & 0xFFFFFFFFFFFFFFFELL;
    v35[1] = v27 & 0xFFFFFFFFFFFFFFFELL;
    sub_22F32DC94(v23, a2, 0, v35, 2);
    v9 = (uint64_t)a2;
  }
LABEL_28:
  if (v32 != v34)
    free(v32);
  return v9;
}

uint64_t sub_22ED7B09C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v6[2];

  v2 = a2;
  v4 = (uint64_t *)sub_22ED73944(a1, *(_QWORD *)(a2 + 16));
  if (!v4)
    return 1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1 || v4 != *(uint64_t **)(v2 + 16))
  {
    v6[0] = *v4;
    v6[1] = (uint64_t)(v4 + 1);
    sub_22F1167E8(v6);
    return sub_22EBBC368();
  }
  return v2;
}

uint64_t sub_22ED7B144(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = a2;
  v4 = sub_22ED78310(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 16) != v5)
    return sub_22EBBA860(*a1, *(_DWORD *)(v2 + 4), v5, (*(_DWORD *)v2 >> 18) & 1);
  return v2;
}

uint64_t sub_22ED7B1B0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 4) == 0)
  {
    if ((*(_BYTE *)(a2 + 1) & 3) == 0)
      goto LABEL_6;
    v6 = 0;
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (!v7 || *(_BYTE *)(v7 + 16) != 45)
      goto LABEL_13;
    v8 = sub_22F114198(*(_QWORD *)(v7 + 24));
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v8 + 104) + 96), *(_QWORD *)(v8 + 104));
    if ((**(_QWORD **)(v8 + 128) & 0x400) != 0)
      v6 = *(_DWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 576);
    else
LABEL_6:
      v6 = 0;
LABEL_13:
    v11 = *a1;
    sub_22EB4DECC(*a1, v6, 0, 3);
    v15 = sub_22ED78310(a1, v5);
    if ((v15 & 1) != 0)
    {
      v2 = 1;
    }
    else
    {
      v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if (*(_DWORD *)(*a1 + 11992) != -1 || v16 != (_QWORD *)(*(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFFF8))
        v2 = sub_22EBB98E0(*a1, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 24), v16, *(unsigned int *)(v2 + 28), v12, v13, v14);
    }
    sub_22EB48E64(v11);
    return v2;
  }
  v9 = (uint64_t *)sub_22ED73944(a1, v4 & 0xFFFFFFFFFFFFFFF8);
  if (!v9)
    return 1;
  if (*(_DWORD *)(*a1 + 11992) != -1 || v9 != (uint64_t *)(*(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFFF8))
    return sub_22EBB9700((_QWORD *)*a1, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 24), v9, *(unsigned int *)(v2 + 28));
  return v2;
}

uint64_t sub_22ED7B328(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  char v18;
  int v19[3];
  int v20;
  uint64_t v21;
  int v22;
  void *v23[2];
  _QWORD v24[9];

  v24[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22ED8FAF0(a1, *(uint64_t **)(a2 + 16));
  if (!v4)
    return 1;
  v5 = v4;
  v18 = 0;
  v23[0] = v24;
  v23[1] = (void *)0x800000000;
  if (*(_DWORD *)(a2 + 4) >= 9u)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  if (!*(_DWORD *)(a2 + 24))
  {
    v8 = *a1;
    v9 = *(_DWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 576);
    v10 = v9 > 3 || v9 == 2;
    if (!v10 && (*(_BYTE *)(*(_QWORD *)(v8 + 72) + 1) & 2) != 0)
    {
      v22 = 1;
      v21 = 0;
      v20 = 3;
      *(_QWORD *)v19 = *(unsigned int *)(v8 + 1704);
      sub_22EB4DDB8(v8 + 3688, &v22, v19, (__int16 *)(v8 + 1693), &v21, &v20);
      v11 = *(unsigned int *)(v8 + 3696);
      v12 = v11 - 2;
      v13 = *(_QWORD *)(v8 + 3688);
      v14 = *(_DWORD *)(v13 + 576 * (v11 - 2));
      if (v14 == 5)
      {
        *(_BYTE *)(v13 + 576 * v11 - 4) = *(_BYTE *)(v13 + 576 * v12 + 572);
        v15 = 1;
      }
      else if (v14 == 2)
      {
        *(_BYTE *)(v13 + 576 * v11 - 4) = 1;
        v15 = *(_BYTE *)(v13 + 576 * v12 + 573) != 0;
      }
      else
      {
        v15 = 0;
        *(_BYTE *)(v13 + 576 * v11 - 4) = 0;
      }
      v16 = v13 + 576 * v11;
      *(_BYTE *)(v16 - 3) = v15;
      *(_WORD *)(v8 + 1693) = 0;
      if (*(_DWORD *)(v8 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v8 + 1776), (llvm::SmallPtrSetImplBase *)(v16 - 560));
        sub_22EAEAE08(v8 + 1840, (uint64_t *)(v16 - 496));
      }
      v6 = 1;
      v17 = sub_22ED836E0(a1, (unsigned __int8 **)(a2 + 32), *(_DWORD *)(a2 + 4), 1, (uint64_t)v23, &v18);
      sub_22EB48E64(v8);
      if ((v17 & 1) != 0)
        goto LABEL_8;
      goto LABEL_6;
    }
  }
  v6 = 1;
  if ((sub_22ED836E0(a1, (unsigned __int8 **)(a2 + 32), *(_DWORD *)(a2 + 4), 1, (uint64_t)v23, &v18) & 1) == 0)
  {
LABEL_6:
    if (*(_DWORD *)(*a1 + 11992) == -1 && v5 == *(_QWORD *)(a2 + 16) && !v18)
      v6 = a2;
    else
      v6 = sub_22EBBC368();
  }
LABEL_8:
  if (v23[0] != v24)
    free(v23[0]);
  return v6;
}

uint64_t sub_22ED7B5C0(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  int v16[3];
  int v17;
  uint64_t v18;
  int v19;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  if ((v4 & 4) != 0)
  {
    v14 = (uint64_t *)sub_22ED73944(a1, v4 & 0xFFFFFFFFFFFFFFF8);
    if (v14)
    {
      if (*((_DWORD *)*a1 + 2998) != -1 || v14 != (uint64_t *)(*(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFFF8))
        return sub_22EBBA098(*a1, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 32), v14, *(_DWORD *)(v2 + 36));
    }
    else
    {
      return 1;
    }
  }
  else
  {
    v5 = (uint64_t)*a1;
    v19 = 0;
    v18 = 0;
    v17 = 3;
    *(_QWORD *)v16 = *(unsigned int *)(v5 + 1704);
    sub_22EB4DDB8(v5 + 3688, &v19, v16, (__int16 *)(v5 + 1693), &v18, &v17);
    v6 = *(unsigned int *)(v5 + 3696);
    v7 = v6 - 2;
    v8 = *(_QWORD *)(v5 + 3688);
    v9 = *(_DWORD *)(v8 + 576 * (v6 - 2));
    if (v9 == 5)
    {
      *(_BYTE *)(v8 + 576 * v6 - 4) = *(_BYTE *)(v8 + 576 * v7 + 572);
      v10 = 1;
    }
    else if (v9 == 2)
    {
      *(_BYTE *)(v8 + 576 * v6 - 4) = 1;
      v10 = *(_BYTE *)(v8 + 576 * v7 + 573) != 0;
    }
    else
    {
      v10 = 0;
      *(_BYTE *)(v8 + 576 * v6 - 4) = 0;
    }
    v11 = v8 + 576 * v6;
    *(_BYTE *)(v11 - 3) = v10;
    *(_WORD *)(v5 + 1693) = 0;
    if (*(_DWORD *)(v5 + 1848))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v5 + 1776), (llvm::SmallPtrSetImplBase *)(v11 - 560));
      sub_22EAEAE08(v5 + 1840, (uint64_t *)(v11 - 496));
    }
    v12 = sub_22ED78310(a1, *(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFFF8);
    if ((v12 & 1) != 0)
    {
      v2 = 1;
    }
    else
    {
      v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
      if (*((_DWORD *)*a1 + 2998) != -1 || v13 != (*(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFFF8))
        v2 = sub_22EBBA3E8(*a1, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 32), v13, *(_DWORD *)(v2 + 36));
    }
    sub_22EB48E64(v5);
  }
  return v2;
}

uint64_t sub_22ED7B798(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unint64_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  int v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[9];

  v24[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22ED78310(a1, *(_QWORD *)((char *)a2 + *((unsigned __int8 *)a2 + 3)));
  if ((v4 & 1) != 0)
    return 1;
  v20 = 0;
  v22 = v24;
  v23 = 0x800000000;
  v5 = 1;
  if ((sub_22ED836E0(a1, (unsigned __int8 **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24)), a2[4], 1, (uint64_t)&v22, &v20) & 1) == 0)
  {
    v6 = *a1;
    v7 = (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL);
    v8 = *a2;
    if (*(_DWORD *)(*a1 + 11992) == -1
      && (*(unsigned __int8 **)((char *)a2 + (v8 >> 24)) == v7 ? (v9 = v20 == 0) : (v9 = 0), v9))
    {
      v5 = sub_22EBCC6C0(*a1, (uint64_t)a2);
    }
    else
    {
      sub_22F0D4E74(v4 & 0xFFFFFFFFFFFFFFFELL);
      v11 = v10;
      v12 = *(_DWORD *)(v6 + 56);
      v13 = *(_QWORD *)(v6 + 1296);
      v19 = *(_QWORD *)(*(_QWORD *)(v6 + 80) + 520);
      v14 = v6;
      if ((v8 & 0x100000) != 0)
      {
        v15 = *(_QWORD *)((char *)&a2[2 * ((v8 >> 18) & 1) + 2 + 2 * a2[4]] + (v8 >> 24));
        sub_22E51A8D0(&v21, *(_QWORD *)(v6 + 72));
        v16 = *a1;
        *(_DWORD *)(v16 + 56) = v21 & ~HIDWORD(v15) | HIDWORD(v15) & v15;
        *(_QWORD *)(v16 + 1296) = v15;
        v14 = *a1;
      }
      v5 = sub_22EB33018(v14, 0, v7, v11, (uint64_t)v22, v23, a2[5], 0);
      *(_DWORD *)(v6 + 56) = v12;
      *(_QWORD *)(v6 + 1296) = v13;
      v17 = *(_QWORD *)(v6 + 80);
      *(_QWORD *)(v17 + 520) = v19;
      *(_DWORD *)(v17 + 528) = v19;
    }
  }
  if (v22 != v24)
    free(v22);
  return v5;
}

uint64_t sub_22ED7B980(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unsigned int v9;
  unint64_t v10;
  char v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[9];

  v15[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22ED78310(a1, *(_QWORD *)((char *)a2 + *((unsigned __int8 *)a2 + 3)));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ED7B798(a1, *(unsigned int **)((char *)a2 + *((unsigned __int8 *)a2 + 3) + 8));
  if ((v5 & 1) != 0)
    return 1;
  v12 = 0;
  v13 = v15;
  v14 = 0x800000000;
  v6 = 1;
  if ((sub_22ED836E0(a1, (unsigned __int8 **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24)), a2[4], 1, (uint64_t)&v13, &v12) & 1) == 0)
  {
    v7 = *a1;
    if (*(_DWORD *)(v7 + 11992) == -1
      && (*(_QWORD *)((char *)a2 + *((unsigned __int8 *)a2 + 3)) == (v4 & 0xFFFFFFFFFFFFFFFELL)
        ? (v8 = v12 == 0)
        : (v8 = 0),
          v8))
    {
      v10 = sub_22EBCC6C0(v7, (uint64_t)a2);
    }
    else
    {
      sub_22F0D4E74(v4 & 0xFFFFFFFFFFFFFFFELL);
      v10 = sub_22EB33018(v7, 0, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), v9, (uint64_t)v13, v14, a2[5], v5 & 0xFFFFFFFFFFFFFFFELL);
    }
    v6 = v10;
  }
  if (v13 != v15)
    free(v13);
  return v6;
}

uint64_t sub_22ED7BAF0(uint64_t *a1, unsigned int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unint64_t v33;
  _QWORD *v34;
  int v35;
  unsigned __int8 *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  _QWORD v62[18];

  v62[16] = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)((char *)a2 + BYTE3(*(_QWORD *)a2));
  if ((*(_QWORD *)a2 & 0x3E00000000) == 0x2A00000000)
  {
    v5 = sub_22ED78310(a1, v4[((*(_QWORD *)a2 >> 18) & 1) + 1]);
    if ((v5 & 1) == 0)
    {
      v6 = *a1;
      v7 = (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL);
      sub_22F0D60E4(v5 & 0xFFFFFFFFFFFFFFFELL);
      v9 = sub_22F141A3C(v8, 0, *(_QWORD **)(v6 + 112), *(_DWORD **)(v6 + 72));
      v60 = v62;
      v61 = 0x800000000;
      v10 = 1;
      if ((sub_22ED836E0(a1, (unsigned __int8 **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 4]+ ((unint64_t)*a2 >> 24)), a2[4] - 1, 1, (uint64_t)&v60, 0) & 1) == 0)
      {
        v11 = a2[7];
        v12 = *a1;
        if ((*(_QWORD *)a2 & 0x3F00000000) == 0x2B00000000)
          v13 = sub_22EB296C0(v12, 0, v7, v9, (uint64_t *)v60, v61, v11);
        else
          v13 = sub_22EB33018(v12, 0, v7, v9, (uint64_t)v60, v61, v11, 0);
        v10 = v13;
      }
      if (v60 != v62)
        free(v60);
      return v10;
    }
    return 1;
  }
  v14 = sub_22ED78310(a1, *v4);
  if ((v14 & 1) != 0)
    return 1;
  v15 = *(unsigned __int8 **)((char *)&a2[2 * ((*(_QWORD *)a2 >> 18) & 1) + 2] + BYTE3(*(_QWORD *)a2));
  if ((*(_QWORD *)a2 & 0x3F00000000) == 0xB00000000 && *v15 == 163)
    v16 = sub_22ED906A8(a1, (uint64_t)v15, 1, 0);
  else
    v16 = sub_22ED78310(a1, v15);
  v17 = v16;
  if ((v16 & 1) != 0)
    return 1;
  if (a2[4] == 2)
  {
    v18 = sub_22ED78310(a1, *(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 4] + ((unint64_t)*a2 >> 24)));
    if ((v18 & 1) != 0)
      return 1;
  }
  else
  {
    v18 = 0;
  }
  v20 = *a1;
  v21 = *a2;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || (v22 = (_QWORD *)((char *)a2 + (v21 >> 24)), *v22 != (v14 & 0xFFFFFFFFFFFFFFFELL))
    || (v23 = &v22[(v21 >> 18) & 1], v25 = v23[1], v24 = v23 + 1, v25 != (v17 & 0xFFFFFFFFFFFFFFFELL))
    || a2[4] == 2 && v24[1] != (v18 & 0xFFFFFFFFFFFFFFFELL))
  {
    if ((v21 & 0x100000) != 0)
      v26 = *(_QWORD *)((char *)&a2[2 * ((v21 >> 18) & 1) + 2 + 2 * a2[4]] + (v21 >> 24));
    else
      v26 = 0;
    v27 = *(_DWORD *)(v20 + 56);
    v28 = *(_QWORD *)(v20 + 1296);
    v59 = *(_QWORD *)(*(_QWORD *)(v20 + 80) + 520);
    sub_22E51A8D0(&v60, *(_QWORD *)(v20 + 72));
    v29 = *a1;
    *(_DWORD *)(v29 + 56) = v60 & ~HIDWORD(v26) | HIDWORD(v26) & v26;
    *(_QWORD *)(v29 + 1296) = v26;
    v30 = a2[1] & 0x3F;
    v31 = a2[5];
    v32 = (unsigned __int8 *)(v14 & 0xFFFFFFFFFFFFFFFELL);
    v33 = v17 & 0xFFFFFFFFFFFFFFFELL;
    v34 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFFELL);
    v35 = (v18 & 0xFFFFFFFFFFFFFFFELL) != 0;
    v36 = sub_22EFFBBCC(v32);
    if ((v30 - 37) >= 2)
      v35 = 0;
    if ((*(_DWORD *)v33 & 0x1C00) == 0xC00)
    {
      v37 = sub_22EFFBA54(v30);
      v38 = (_QWORD *)*a1;
      if ((v37 - 21) <= 0xA)
      {
        v10 = sub_22ED27A90(v38, 0, v31, v37, v33, (uint64_t)v34);
LABEL_48:
        v46 = v59;
LABEL_82:
        *(_DWORD *)(v20 + 56) = v27;
        *(_QWORD *)(v20 + 1296) = v28;
        v56 = *(_QWORD *)(v20 + 80);
        *(_QWORD *)(v56 + 520) = v46;
        *(_DWORD *)(v56 + 528) = v46;
        return v10;
      }
      v39 = sub_22EB19A28((uint64_t)v38, (_DWORD *)v33);
      if ((v39 & 1) != 0)
        goto LABEL_47;
      v33 = v39 & 0xFFFFFFFFFFFFFFFELL;
    }
    if (!v34 || (*(_DWORD *)v34 & 0x1C00) != 0xC00)
    {
LABEL_38:
      if (v30 == 43)
      {
        v41 = *(_QWORD *)(*(_QWORD *)(v33 + 8) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v41 + 17) & 4) == 0
          && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v41 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C)
        {
          v42 = *(_QWORD *)(v34[1] & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v42 + 17) & 4) == 0
            && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v42 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C)
          {
            v43 = *a1;
            sub_22F0D5A50((uint64_t)v36);
            v45 = sub_22EB2AFE4(v43, (uint64_t (**)())v33, v44, v34, v31);
            goto LABEL_55;
          }
        }
      }
      else
      {
        if (v30 == 41)
        {
          if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v33 + 8) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
          {
            v10 = 1;
            goto LABEL_81;
          }
          v45 = sub_22ED1C570();
LABEL_55:
          v10 = v45;
LABEL_81:
          v46 = v59;
          goto LABEL_82;
        }
        v47 = *(_QWORD *)(*(_QWORD *)(v33 + 8) & 0xFFFFFFFFFFFFFFF0);
        v48 = *(_DWORD *)(v47 + 16);
        if (((v34 != 0) & ~v35) != 0)
        {
          if ((v48 & 0x400) == 0
            && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v47 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C)
          {
            v50 = *(_QWORD *)(v34[1] & 0xFFFFFFFFFFFFFFF0);
            if ((*(_BYTE *)(v50 + 17) & 4) == 0
              && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v50 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C)
            {
              sub_22EFFBA54(v30);
              v57 = sub_22EB2D0B8();
              if ((v57 & 1) != 0)
                v10 = 1;
              else
                v10 = v57;
              goto LABEL_81;
            }
          }
        }
        else if ((v48 & 0x400) == 0
               && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v47 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C
               || v30 == 11 && sub_22EB48AD0(*a1, (unsigned __int8 *)v33))
        {
          v49 = sub_22EFFA13C(v30, v35);
          v45 = sub_22EB2EA08(*a1, v31, v49, v33);
          goto LABEL_55;
        }
      }
      v60 = v62;
      v61 = 0x1000000000;
      v51 = *v36;
      v58 = v27;
      if (v51 == 211)
      {
        sub_22E3D0148((uint64_t)&v60, v36 + 64, &v36[8 * *((unsigned int *)v36 + 1) + 64]);
        v52 = (*(_DWORD *)v36 >> 19) & 1;
        v51 = *(_DWORD *)v36;
      }
      else
      {
        v53 = *((_QWORD *)v36 + 2);
        v52 = 0;
        if ((*(_DWORD *)(v53 + 28) & 0x7Eu) - 54 >= 4)
        {
          v62[0] = v53 | 3;
          LODWORD(v61) = 1;
        }
      }
      if (((v34 != 0) & ~v35) != 0)
      {
        if (v30 == 43)
        {
          if (v51 != 161)
            sub_22F0D5A50((uint64_t)v36);
          v27 = v58;
          v10 = sub_22ED18C00();
          goto LABEL_79;
        }
        v54 = sub_22EFFBA54(v30);
        v55 = sub_22ED1767C(*a1, v31, v54, (uint64_t)&v60, v33, (uint64_t)v34, v52, 1, 0);
        if ((v55 & 1) != 0)
          v10 = 1;
        else
          v10 = v55;
      }
      else
      {
        sub_22EFFA13C(v30, v35);
        v10 = sub_22ED1677C();
      }
      v27 = v58;
LABEL_79:
      if (v60 != v62)
        free(v60);
      goto LABEL_81;
    }
    v40 = sub_22EB19A28(*a1, v34);
    if ((v40 & 1) == 0)
    {
      v34 = (_QWORD *)(v40 & 0xFFFFFFFFFFFFFFFELL);
      goto LABEL_38;
    }
LABEL_47:
    v10 = 1;
    goto LABEL_48;
  }
  return sub_22EBCC6C0(*a1, (uint64_t)a2);
}

uint64_t sub_22ED7C230(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v4 = sub_22ED73944(a1, *(_QWORD *)(a2 + 24));
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v6 = sub_22ED78310(a1, *(_QWORD *)(a2 + 16));
  if ((v6 & 1) != 0)
    return 1;
  else
    return sub_22E95C7F8(*a1, *(_DWORD *)(a2 + 32), v5, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 36));
}

uint64_t sub_22ED7C29C(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  unsigned __int8 *v6;
  uint64_t v7;

  v2 = a2;
  v4 = sub_22ED73944(a1, *(_QWORD *)(a2 + 24));
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v6 = sub_22EFFB374((unsigned __int8 *)v2);
  v7 = sub_22ED78310(a1, v6);
  if ((v7 & 1) != 0)
    return 1;
  if (*((_DWORD *)*a1 + 2998) != -1
    || v5 != *(uint64_t **)(v2 + 24)
    || *(_QWORD *)(v2 + 16) != (v7 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22E95CFA4(*a1, *(_DWORD *)(v2 + 32), v5, *(_DWORD *)(v2 + 36), (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL));
  }
  return v2;
}

uint64_t sub_22ED7C340(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;

  v2 = a2;
  v4 = sub_22ED8FAF0(a1, *(uint64_t **)(a2 + 24));
  if (!v4)
    return 1;
  v5 = v4;
  v6 = sub_22EFFB374((unsigned __int8 *)v2);
  v7 = sub_22ED78310(a1, v6);
  if ((v7 & 1) != 0)
    return 1;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || v5 != *(_QWORD *)(v2 + 24)
    || *(_QWORD *)(v2 + 16) != (v7 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EBBC368();
  }
  return v2;
}

uint64_t sub_22ED7C400(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v2 = a2;
  v4 = sub_22ED73944(a1, *(_QWORD *)(a2 + 24));
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v6 = sub_22ED78310(a1, *(_QWORD *)(v2 + 16));
  if ((v6 & 1) != 0)
    return 1;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || v5 != *(uint64_t **)(v2 + 24)
    || *(_QWORD *)(v2 + 16) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EC33F14(*a1, *(_DWORD *)(v2 + 32), *(_BYTE *)(v2 + 40) & 3, *(_DWORD *)(v2 + 36), v5, (void *)(v6 & 0xFFFFFFFFFFFFFFFELL));
  }
  return v2;
}

uint64_t sub_22ED7C4A4(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;

  v3 = sub_22EFFB374(a2);
  return sub_22ED78310(a1, v3);
}

uint64_t sub_22ED7C4D0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;

  v2 = a2;
  v4 = sub_22ED78310(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ED78310(a1, *(_QWORD *)(v2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  v6 = sub_22ED78310(a1, *(_QWORD *)(v2 + 32));
  if ((v6 & 1) != 0)
    return 1;
  v7 = (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(_DWORD **)(v2 + 16) != v7
    || *(_QWORD *)(v2 + 24) != (v5 & 0xFFFFFFFFFFFFFFFELL)
    || *(_QWORD *)(v2 + 32) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EB4A774(*a1, *(_DWORD *)(v2 + 40), v7, v5 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 44));
  }
  return v2;
}

uint64_t sub_22ED7C594(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8;
  v5 = sub_22ED73944(a1, v4);
  if (!v5)
    return 1;
  v6 = v5;
  v7 = sub_22ED78310(a1, *(_QWORD *)(a2 + 32));
  if ((v7 & 1) != 0)
    return 1;
  v8 = *a1;
  v9 = *(_QWORD *)(a2 + 32);
  if (v6 == v4 && *(_DWORD *)(v8 + 11992) == -1 && v9 == (v7 & 0xFFFFFFFFFFFFFFFELL))
    return sub_22EBCC6C0(v8, a2);
  sub_22F0D60E4(v9);
  return sub_22EB34874();
}

uint64_t sub_22ED7C660(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  void *v16[2];
  void *v17[2];
  _QWORD v18[34];

  v18[33] = *MEMORY[0x24BDAC8D0];
  v4 = *(uint64_t **)(a2 + 80);
  v17[0] = v18;
  v5 = *v4;
  v17[1] = (void *)0x800000000;
  v18[32] = v5;
  if ((sub_22ED90408((uint64_t)a1, (uint64_t)(v4 + 2), (uint64_t)&v4[4 * *((unsigned int *)v4 + 2) + 2]) & 1) != 0)
  {
    v6 = 1;
  }
  else
  {
    v8 = *(_QWORD *)(a2 + 16);
    v9 = *(_QWORD *)(a2 + 24);
    v10 = *(_DWORD *)(a2 + 32);
    v13 = *(_OWORD *)(a2 + 40);
    v11 = *(_QWORD *)(a2 + 64);
    v14 = *(_QWORD *)(a2 + 56);
    v12 = *(_QWORD *)(a2 + 72);
    v15 = 0u;
    *(_OWORD *)v16 = 0u;
    sub_22E8ACE30((uint64_t)&v15, v8, v9);
    v6 = sub_22F345EB4(*a1, (unsigned int *)&v15, v10, &v13, v11, v12, (uint64_t)v17);
    if (HIDWORD(v16[1]))
      free(v16[0]);
    if ((v6 & 1) != 0)
      v6 = 1;
  }
  if (v17[0] != v18)
    free(v17[0]);
  return v6;
}

uint64_t sub_22ED7C784(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v2 = a2;
  v4 = sub_22ED78310(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = (uint64_t *)sub_22ED73944(a1, *(_QWORD *)(v2 + 24));
  if (!v5)
    return 1;
  if (*((_DWORD *)*a1 + 2998) != -1
    || v5 != *(uint64_t **)(v2 + 24)
    || *(_QWORD *)(v2 + 16) != (v4 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22F310E84(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, v5, *(_DWORD *)(v2 + 32), *(_DWORD *)(v2 + 36));
  }
  return v2;
}

uint64_t sub_22ED7C81C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ED83974(a1, *(unsigned __int8 **)(a2 + 24), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22E9FA6A4(*a1, *(_DWORD *)(a2 + 16), v4 & 0xFFFFFFFFFFFFFFFELL, (*(_DWORD *)a2 >> 18) & 1);
}

uint64_t sub_22ED7C870(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ED83974(a1, *(unsigned __int8 **)(a2 + 24), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22E9FB1B0(*a1, *(_DWORD *)(a2 + 16), v4 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22ED7C8BC(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int32 v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  void **v22;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  __n128 v27;
  uint64_t v28;
  __int128 v29;
  void *v30[2];
  void *v31[2];
  _QWORD v32[32];
  uint64_t v33;
  uint64_t v34;

  v2 = a2;
  v34 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 2) & 4) != 0 && (v4 = *(_QWORD *)(a2 + 32)) != 0)
  {
    v5 = sub_22ED89638((uint64_t *)a1, v4, *(void **)(v2 + 40), 0, 0);
    if (!v5)
      return 1;
    v7 = v5;
    v8 = v6;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v10 = (uint64_t *)(v2 + 16);
  v9 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)&v29 = v9;
  v31[0] = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v29, v31)
    && v31[0] != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
  {
    v9 = *((_QWORD *)v31[0] + 1);
  }
  if (!v9)
    return 1;
  v11 = *(unsigned int *)v2;
  v12 = v2 + 32;
  if ((v11 & 0x100000) != 0)
    v13 = (uint64_t *)(v2 + 32 + 16 * ((v11 >> 18) & 1));
  else
    v13 = (uint64_t *)(v2 + 16);
  v14 = *v13;
  if (*v13 == *(_QWORD *)(v2 + 16))
  {
    v15 = *v13;
    v14 = v9;
  }
  else
  {
    *(_QWORD *)&v29 = *v13;
    v31[0] = 0;
    if (sub_22E793870((uint64_t *)(a1 + 8), &v29, v31)
      && v31[0] != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
    {
      v14 = *((_QWORD *)v31[0] + 1);
    }
    if (!v14)
      return 1;
    v15 = *v10;
  }
  v16 = *(_DWORD *)(v2 + 4);
  v17 = *(_QWORD *)(v2 + 24);
  v27.n128_u64[0] = *(_QWORD *)(v15 + 40);
  v27.n128_u32[2] = v16;
  v28 = v17;
  if (v27.n128_u64[0])
  {
    sub_22ED89DE4((__n128 *)v31, a1, &v27);
    v27 = *(__n128 *)v31;
    v28 = v32[0];
    v18 = v31[0];
    if (!v31[0])
      return 1;
  }
  else
  {
    v18 = 0;
  }
  v19 = *(unsigned int *)v2;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) == -1)
  {
    if ((v19 & 0x40000) != 0)
    {
      v24 = *(_QWORD *)(v2 + 32);
      v25 = *(_QWORD *)(v2 + 40);
    }
    else
    {
      v24 = 0;
      v25 = 0;
    }
    if (v7 == v24 && v8 == v25 && v9 == *v10)
    {
      v26 = (_QWORD *)((v19 & 0x100000) != 0 ? v12 + 16 * ((v19 >> 18) & 1) : v2 + 16);
      if (v14 == *v26
        && v18 == *(void **)(v9 + 40)
        && ((v19 & 0x80000) == 0 || !*(_DWORD *)(v12 + 16 * ((v19 >> 18) & 1) + 8 * ((v19 >> 20) & 1))))
      {
        sub_22EB22288(*(_QWORD *)a1, v2, 0);
        return v2;
      }
    }
  }
  v31[0] = v32;
  v31[1] = (void *)0x800000000;
  v33 = 0;
  if ((v19 & 0x80000) == 0
    || (v20 = (_DWORD *)(v12 + 16 * ((v19 >> 18) & 1) + 8 * ((v19 >> 20) & 1)), !*v20))
  {
    v22 = 0;
LABEL_30:
    v29 = 0u;
    *(_OWORD *)v30 = 0u;
    sub_22E8ACE30((uint64_t)&v29, v7, v8);
    v2 = sub_22EB24A3C(*(_QWORD *)a1, (uint64_t *)&v29, (uint64_t)&v27, v9, v14, (uint64_t)v22, 0);
    if (HIDWORD(v30[1]))
      free(v30[0]);
    goto LABEL_32;
  }
  v33 = *(_QWORD *)v20;
  v21 = (uint64_t)&v20[4 * ((v19 >> 19) & 1)];
  v22 = v31;
  if ((sub_22ED90408(a1, v21, v21 + 32 * v20[3]) & 1) == 0)
    goto LABEL_30;
  v2 = 1;
LABEL_32:
  if (v31[0] != v32)
    free(v31[0]);
  return v2;
}

uint64_t sub_22ED7CBDC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_22ED83974(a1, *(unsigned __int8 **)(a2 + 24), 0);
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ED810CC(a1, *(unsigned int **)(a2 + 32));
  if ((v5 & 1) != 0)
    return 1;
  else
    return sub_22E9FA204((_QWORD *)*a1, *(_DWORD *)(a2 + 16), v4 & 0xFFFFFFFFFFFFFFFELL, (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL));
}

uint64_t sub_22ED7CC4C(uint64_t *a1, uint64_t a2)
{
  return sub_22ED906A8(a1, a2, 0, 0);
}

uint64_t sub_22ED7CC58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  unint64_t v52;
  int v53;
  int v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  _BYTE v60[32];
  char *v61;
  uint64_t v62;
  _QWORD v63[12];

  v2 = a2;
  v63[10] = *MEMORY[0x24BDAC8D0];
  v61 = (char *)v63;
  v62 = 0x200000000;
  v4 = sub_22E487828(a2);
  v5 = sub_22ED78310(a1, v4);
  if ((v5 & 1) != 0)
  {
    v2 = 1;
    goto LABEL_50;
  }
  v58 = v60;
  v59 = 0x400000000;
  if (!((unsigned __int16)*(_DWORD *)(v2 + 20) >> 1))
  {
    LOBYTE(v6) = 0;
    v43 = v5 & 0xFFFFFFFFFFFFFFFELL;
LABEL_42:
    v40 = *(_QWORD **)a1;
    if (*(_DWORD *)(*(_QWORD *)a1 + 11992) == -1)
    {
      if (!((sub_22E487828(v2) != v43) | v6 & 1))
        goto LABEL_48;
      v40 = *(_QWORD **)a1;
    }
    v41 = sub_22EC38374(v40, (uint64_t *)&v61, *(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 20) & 1, v43);
    if ((v41 & 1) != 0)
      v2 = 1;
    else
      v2 = v41;
    goto LABEL_48;
  }
  v6 = 0;
  v43 = v5 & 0xFFFFFFFFFFFFFFFELL;
  v7 = v2 + 32;
  v8 = *(_QWORD *)(v2 + 24) + 8;
  v9 = 24 * ((unsigned __int16)*(_DWORD *)(v2 + 20) >> 1);
  while (1)
  {
    v10 = v6;
    v11 = *(_DWORD *)(v8 - 8);
    if (v11 == 1)
    {
      v20 = sub_22ED78310(a1, *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 1)));
      if ((v20 & 1) != 0)
        break;
      v21 = v20 & 0xFFFFFFFFFFFFFFFELL;
      v22 = *(_DWORD *)(v8 + 4);
      v6 = 1;
      v51 = 1;
      v52 = v20 & 0xFFFFFFFFFFFFFFFELL;
      v53 = v22;
      v54 = 0;
      v23 = sub_22E84B46C((uint64_t)&v61, (unint64_t)&v51, 1);
      v24 = &v61[40 * v62];
      v25 = *(_QWORD *)(v23 + 32);
      v26 = *(_OWORD *)(v23 + 16);
      *(_OWORD *)v24 = *(_OWORD *)v23;
      *((_OWORD *)v24 + 1) = v26;
      *((_QWORD *)v24 + 4) = v25;
      LODWORD(v62) = v62 + 1;
      if ((v10 & 1) == 0)
        v6 = *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 1)) != v43;
      v27 = v59;
      if (v59 >= (unint64_t)HIDWORD(v59))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v27 = v59;
      }
      *((_QWORD *)v58 + v27) = v21;
      goto LABEL_33;
    }
    if (!v11)
    {
      v12 = *(_QWORD *)v8;
      if ((*(_QWORD *)v8 & 1) != 0)
      {
        v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v39 = *(_QWORD *)(v12 + 40);
        if ((v39 & 7) != 0)
          v13 = 0;
        else
          v13 = v39 & 0xFFFFFFFFFFFFFFF8;
      }
      v55 = 0;
      v56 = v13;
      v57 = *(_QWORD *)(v8 + 8);
      v6 = 1;
      v14 = sub_22E84B46C((uint64_t)&v61, (unint64_t)&v55, 1);
      v15 = &v61[40 * v62];
      v16 = *(_QWORD *)(v14 + 32);
      v17 = *(_OWORD *)(v14 + 16);
      *(_OWORD *)v15 = *(_OWORD *)v14;
      *((_OWORD *)v15 + 1) = v17;
      *((_QWORD *)v15 + 4) = v16;
      LODWORD(v62) = v62 + 1;
      v18 = *(_QWORD *)v8;
      if (*(_QWORD *)v8 && (v18 & 1) == 0)
      {
        v44 = *(_QWORD *)v8;
        v45 = 0;
        if (sub_22E793870((uint64_t *)(a1 + 8), &v44, &v45)
          && v45 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
        {
          v18 = *(_QWORD *)(v45 + 8);
        }
        v19 = *(_QWORD *)v8;
        if ((*(_QWORD *)v8 & 1) != 0)
          v19 = 0;
        v6 = (v18 != v19) | v10;
      }
      goto LABEL_34;
    }
    v28 = sub_22ED78310(a1, *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 1)));
    if ((v28 & 1) != 0)
      break;
    v29 = sub_22ED78310(a1, *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 2)));
    if ((v29 & 1) != 0)
      break;
    v30 = v28 & 0xFFFFFFFFFFFFFFFELL;
    v31 = v29 & 0xFFFFFFFFFFFFFFFELL;
    v46 = 2;
    v32 = *(_QWORD *)(v8 + 4);
    v47 = v28 & 0xFFFFFFFFFFFFFFFELL;
    v48 = v29 & 0xFFFFFFFFFFFFFFFELL;
    v49 = v32;
    v50 = 0;
    v6 = 1;
    v33 = sub_22E84B46C((uint64_t)&v61, (unint64_t)&v46, 1);
    v34 = &v61[40 * v62];
    v35 = *(_QWORD *)(v33 + 32);
    v36 = *(_OWORD *)(v33 + 16);
    *(_OWORD *)v34 = *(_OWORD *)v33;
    *((_OWORD *)v34 + 1) = v36;
    *((_QWORD *)v34 + 4) = v35;
    LODWORD(v62) = v62 + 1;
    if ((v10 & 1) == 0)
      v6 = *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 1)) != v30
        || *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 2)) != v31;
    v37 = v59;
    if (v59 >= (unint64_t)HIDWORD(v59))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v37 = v59;
    }
    *((_QWORD *)v58 + v37) = v30;
    v38 = v59 + 1;
    LODWORD(v59) = v38;
    if (v38 >= HIDWORD(v59))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v38 = v59;
    }
    *((_QWORD *)v58 + v38) = v31;
LABEL_33:
    LODWORD(v59) = v59 + 1;
LABEL_34:
    v8 += 24;
    v9 -= 24;
    if (!v9)
      goto LABEL_42;
  }
  v2 = 1;
LABEL_48:
  if (v58 != v60)
    free(v58);
LABEL_50:
  if (v61 != (char *)v63)
    free(v61);
  return v2;
}

uint64_t sub_22ED7D0BC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v14[3];
  int v15;
  uint64_t v16;
  int v17;

  v4 = *a1;
  v17 = 0;
  v16 = 0;
  v15 = 3;
  *(_QWORD *)v14 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v17, v14, (__int16 *)(v4 + 1693), &v16, &v15);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  v11 = sub_22ED78310(a1, *(_QWORD *)(a2 + 32));
  if ((v11 & 1) != 0)
  {
    a2 = 1;
  }
  else
  {
    v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(a2 + 32) != v12)
    {
      sub_22EB48E64(v4);
      return sub_22EBC8E1C(*a1, *(_DWORD *)(a2 + 16) & 0x7FFFFFFF, *(_DWORD *)(a2 + 20), v12, *(_DWORD *)(a2 + 24));
    }
  }
  sub_22EB48E64(v4);
  return a2;
}

uint64_t sub_22ED7D244(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v9;
  int v10;
  uint64_t v11;
  _BOOL8 v12;
  int v13;
  int v14;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  void *v20[2];

  v2 = a2;
  v4 = sub_22ED78310(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = (uint64_t)*a1;
  v6 = *(_QWORD *)(v2 + 16);
  v7 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) != -1 || v6 != v7)
  {
    sub_22F0D60E4(v6);
    v10 = sub_22F141A3C(v9, 0, *(_QWORD **)(v5 + 112), *(_DWORD **)(v5 + 72));
    v11 = *(_QWORD *)(v2 + 24);
    v12 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                     + 8) & 0xFFFFFFFFFFFFFFF0)
                             + 16) == 39;
    v13 = *(_DWORD *)(v2 + 32);
    v14 = v10;
    v19 = 0u;
    *(_OWORD *)v20 = 0u;
    v16 = v11;
    v17 = v13;
    sub_22EFC6D6C((uint64_t)&v18, v11);
    v2 = sub_22EC225CC(*a1, v7, *(_QWORD *)(v7 + 8), v14, v12, (uint64_t)&v19, 0, 0, (uint64_t)&v16, 0, 0, 0);
    if (HIDWORD(v20[1]))
      free(v20[0]);
  }
  return v2;
}

uint64_t sub_22ED7D358(uint64_t a1, const void **a2)
{
  const void **v3;

  v3 = sub_22EFFB894(a2);
  return sub_22ED78310(a1, v3);
}

uint64_t sub_22ED7D384(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;

  v2 = a2;
  v4 = sub_22ED78310(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(v2 + 24);
  if (v5)
  {
    v6 = sub_22ED78310(a1, v5);
    if ((v6 & 1) != 0)
      return 1;
  }
  else
  {
    v6 = 0;
  }
  v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(v2 + 16) == (v4 & 0xFFFFFFFFFFFFFFFELL) && *(_QWORD *)(v2 + 24) == v8)
    return v2;
  return sub_22EB53C74(*a1, *(_DWORD *)(v2 + 32), *(_DWORD *)(v2 + 36), *(_QWORD *)(v2 + 8), (void *)(v4 & 0xFFFFFFFFFFFFFFFELL), v8);
}

uint64_t sub_22ED7D418(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v23;
  void *v24[4];
  void *v25;
  uint64_t v26;
  _QWORD v27[5];

  v27[4] = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 32;
  v6 = sub_22ED78310(a1, *(_QWORD *)(a2 + 32));
  if ((v6 & 1) != 0)
    return 1;
  v25 = v27;
  v26 = 0x400000000;
  v23 = 0;
  v7 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v7)
  {
    v8 = (v7 + 1);
    v9 = 8 * v7;
    v10 = 1;
    while (1)
    {
      v11 = *(_QWORD *)(v4 + 8);
      v12 = *(_QWORD *)(v4 + 8 * v8);
      if (v12)
      {
        v13 = sub_22ED73944(a1, v12);
        if (!v13)
          break;
        v14 = (void *)v13;
        v15 = v23;
        if (v23 >= 4uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v15 = v23;
        }
        v24[v15] = v14;
      }
      else
      {
        v16 = v23;
        if (v23 >= 4uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v16 = v23;
        }
        v24[v16] = 0;
      }
      ++v23;
      v17 = sub_22ED78310(a1, v11);
      if ((v17 & 1) != 0)
        break;
      v18 = v26;
      if (v26 >= (unint64_t)HIDWORD(v26))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v18 = v26;
      }
      *((_QWORD *)v25 + v18) = v17 & 0xFFFFFFFFFFFFFFFELL;
      v19 = (v26 + 1);
      LODWORD(v26) = v26 + 1;
      v4 += 8;
      v9 -= 8;
      if (!v9)
      {
        v20 = v23;
        v21 = (uint64_t *)v25;
        goto LABEL_20;
      }
    }
  }
  else
  {
    v19 = 0;
    v20 = 0;
    v21 = v27;
LABEL_20:
    v10 = sub_22EB204CC(*a1, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), (_DWORD *)(v6 & 0xFFFFFFFFFFFFFFFELL), v24, v20, v5, v21, v19);
  }
  if (v25 != v27)
    free(v25);
  return v10;
}

uint64_t sub_22ED7D640(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  _BOOL4 v9;

  v4 = sub_22ED78310(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_DWORD *)(a2 + 28);
  if (!v5)
  {
    sub_22F0D5A50(*(_QWORD *)(a2 + 16));
    v5 = v6;
  }
  v7 = *(_DWORD *)(a2 + 32);
  if (!v7)
    sub_22F0D60E4(*(_QWORD *)(a2 + 16));
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v9 = 1;
  if (v8)
  {
    if (*(_BYTE *)(v8 + 16) == 39)
      v9 = (*(_DWORD *)(v8 + 40) & 6) != 2;
  }
  return sub_22EB54020(*a1, (void *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)(a2 + 24) != 0, v5, v7, v9);
}

uint64_t sub_22ED7D708(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v2 = a2;
  v4 = sub_22ED8368C(a1, *(_QWORD *)(a2 + 8));
  if (v4 < 0x10)
    return 1;
  v5 = v4;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1 || v4 != *(_QWORD *)(v2 + 8))
  {
    v2 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 16, 3);
    sub_22E5018F0(v2, v5);
  }
  return v2;
}

uint64_t sub_22ED7D78C(uint64_t *a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  int v18;
  int v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v22[4] = *MEMORY[0x24BDAC8D0];
  if ((*(_QWORD *)(a2 + 48) & ((uint64_t)(*(_QWORD *)(a2 + 48) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8) != 0)
    v3 = *(_QWORD *)(a2 + 48) & ((uint64_t)(*(_QWORD *)(a2 + 48) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8;
  else
    v3 = a2;
  v16 = 0;
  v4 = *a1;
  v5 = *(_DWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 576);
  if (v5 > 3 || v5 == 2)
  {
    v7 = 1;
  }
  else
  {
    v7 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(v4 + 72) + 1) & 2) != 0)
    {
      v20 = 0;
      v18 = 3;
      v19 = 1;
      v17 = *(unsigned int *)(v4 + 1704);
      sub_22EB4DDB8(v4 + 3688, &v19, (int *)&v17, (__int16 *)(v4 + 1693), (uint64_t *)&v20, &v18);
      v8 = *(unsigned int *)(v4 + 3696);
      v9 = v8 - 2;
      v10 = *(_QWORD *)(v4 + 3688);
      v11 = *(_DWORD *)(v10 + 576 * (v8 - 2));
      if (v11 == 5)
      {
        *(_BYTE *)(v10 + 576 * v8 - 4) = *(_BYTE *)(v10 + 576 * v9 + 572);
        v12 = 1;
      }
      else if (v11 == 2)
      {
        *(_BYTE *)(v10 + 576 * v8 - 4) = 1;
        v12 = *(_BYTE *)(v10 + 576 * v9 + 573) != 0;
      }
      else
      {
        v12 = 0;
        *(_BYTE *)(v10 + 576 * v8 - 4) = 0;
      }
      v13 = v10 + 576 * v8;
      *(_BYTE *)(v13 - 3) = v12;
      *(_WORD *)(v4 + 1693) = 0;
      if (*(_DWORD *)(v4 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v13 - 560));
        sub_22EAEAE08(v4 + 1840, (uint64_t *)(v13 - 496));
      }
      v7 = 0;
    }
  }
  v20 = v22;
  v21 = 0x400000000;
  if ((sub_22ED836E0(a1, *(unsigned __int8 ***)(v3 + 16), (*(_QWORD *)(v3 + 24) - *(_QWORD *)(v3 + 16)) >> 3, 0, (uint64_t)&v20, &v16) & 1) != 0)v14 = 1;
  else
    v14 = sub_22EB353A0(*a1, *(_DWORD *)(v3 + 40), (uint64_t *)v20, v21, *(_DWORD *)(v3 + 44));
  if (v20 != v22)
    free(v20);
  if ((v7 & 1) == 0)
    sub_22EB48E64(v4);
  return v14;
}

uint64_t sub_22ED7D9A4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  char *v10;
  char *v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t *v15;
  uint64_t v16;
  _DWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  _DWORD *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t i;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  uint64_t v45;
  size_t v46;
  unsigned __int32 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  char v58;
  void *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  int v77;
  int v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  BOOL v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  int v95;
  int v96;
  int v97;
  int v98;
  unint64_t v99;
  uint64_t v100;
  char *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  BOOL v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  BOOL v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  char *v142;
  unsigned int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int v151;
  unsigned __int8 *v152;
  unsigned int v153;
  uint64_t v154;
  unint64_t v155;
  _QWORD *v156;
  unint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  _DWORD *v160;
  unint64_t v161;
  _DWORD *v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unsigned __int8 *v173;
  _QWORD *v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  int v178;
  int v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t v184;
  unsigned __int8 v185[24];
  char v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  unint64_t v190;
  char v191;
  uint64_t v192;
  _DWORD *v193;
  void *v194;
  uint64_t v195;
  int v196[12];
  unsigned __int8 *v197;
  void *v198[2];
  _BYTE v199[32];
  unint64_t v200;
  int64x2_t v201;
  _QWORD v202[5];
  void *v203;
  uint64_t v204;
  _BYTE v205[352];
  unsigned __int8 *v206;
  __int128 v207;
  _BYTE v208[16];
  char v209;
  void *v210[2];
  _BYTE v211[32];
  unint64_t *v212;
  uint64_t v213;
  _QWORD v214[6];

  v2 = a2;
  v214[4] = *MEMORY[0x24BDAC8D0];
  v203 = v205;
  v204 = 0x400000000;
  v4 = sub_22F3C65DC(a2);
  v5 = v4 - sub_22F3C64D0(v2);
  v6 = v5 >> 4;
  v7 = 0;
  if (v5 >> 4)
  {
    if (v6 >= v204)
    {
      if (v6 <= HIDWORD(v204))
      {
        v10 = (char *)v203;
      }
      else
      {
        v194 = 0;
        v10 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow();
        if (v203 != v205)
          free(v203);
        v203 = v10;
        HIDWORD(v204) = (_DWORD)v194;
        v7 = v204;
      }
      if (v6 != v7)
      {
        v11 = &v10[88 * v7];
        do
        {
          *(_OWORD *)v11 = 0uLL;
          *((_OWORD *)v11 + 1) = 0uLL;
          *((_QWORD *)v11 + 10) = 0;
          *((_OWORD *)v11 + 3) = 0uLL;
          *((_OWORD *)v11 + 4) = 0uLL;
          *((_OWORD *)v11 + 2) = 0uLL;
          *((_QWORD *)v11 + 1) = v11 + 24;
          *((_DWORD *)v11 + 5) = 4;
          v11 += 88;
        }
        while (v11 != &v10[88 * v6]);
      }
    }
    else
    {
      v8 = (void **)((char *)v203 - 80);
      v9 = 88 * v6;
      do
      {
        if (v8 + 2 != *v8)
          free(*v8);
        v8 -= 11;
        v9 += 88;
      }
      while (v9);
    }
    LODWORD(v204) = (unint64_t)v5 >> 4;
  }
  v212 = 0;
  v212 = (unint64_t *)sub_22F3C64D0(v2);
  v12 = (unint64_t *)sub_22F3C650C(v2);
  v13 = v212;
  if (v212 != v12)
  {
    v14 = v12;
    do
    {
      if (sub_22F3C6428(v2, v13))
      {
        v15 = v212;
        v16 = sub_22F3C64D0(v2);
        v17 = (char *)v203 + 88 * (((uint64_t)v15 - v16) >> 4);
        v210[0] = 0;
        v18 = (_QWORD *)(*v212 & 0xFFFFFFFFFFFFFFF8);
        v210[0] = v18;
        v200 = (unint64_t)a1;
        v201.i64[0] = (uint64_t)v210;
        v201.i64[1] = (uint64_t)v17;
        v202[0] = &v212;
        if (*(_BYTE *)(*(_QWORD *)(v18[6] & 0xFFFFFFFFFFFFFFF0) + 16) == 36)
        {
          v19 = v18[7];
          v20 = v19 & 0xFFFFFFFFFFFFFFF8;
          if ((v19 & 4) != 0)
            v20 = *(_QWORD *)(v20 + 32);
          v194 = v196;
          v195 = 0x200000000;
          v21 = *a1;
          v22 = sub_22EFBC5B4((uint64_t)v18);
          v189 = 7;
          v190 = v22;
          sub_22EE7377C(v21, (uint64_t)&v189, (uint64_t)&v194);
          sub_22ED9098C((uint64_t)&v200);
          *v17 = *(_DWORD *)(v20 + 8);
          if (v194 != v196)
            free(v194);
        }
        else
        {
          sub_22ED9098C((uint64_t)&v200);
        }
      }
      v13 = v212 + 2;
      v212 = v13;
    }
    while (v13 != v14);
  }
  v23 = sub_22F3090C8(*a1);
  v187 = *a1;
  LOBYTE(v188) = 1;
  *(_QWORD *)(v23 + 1584) = sub_22F3C6624(v2);
  v24 = *(_QWORD *)(sub_22F3C6220(v2) + 56);
  v25 = (uint64_t *)(v24 & 0xFFFFFFFFFFFFFFF8);
  if ((v24 & 4) != 0)
    v25 = (uint64_t *)v25[4];
  v184 = v23;
  v26 = *v25;
  if ((*v25 & 0xF) != 0)
  {
    v29 = 0;
    v30 = 0;
  }
  else
  {
    v27 = v25 + 1;
    v28 = *(unsigned __int8 *)(*(_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF0) + 16);
    if (v28 == 26)
      v29 = v26;
    else
      v29 = 0;
    if (v28 == 26)
      v30 = v27;
    else
      v30 = 0;
  }
  v200 = (unint64_t)v202;
  v201 = vdupq_n_s64(0x20uLL);
  v202[4] = 0;
  v198[0] = v199;
  v198[1] = (void *)0x400000000;
  v192 = v29;
  v193 = v30;
  v212 = v214;
  v213 = 0x400000000;
  v210[0] = v211;
  v210[1] = (void *)0x400000000;
  v206 = v208;
  v207 = xmmword_22F44E350;
  v209 = 0;
  if ((*(_BYTE *)(v29 + 23) & 0x10) != 0)
  {
    v33 = v29;
    v34 = v29;
    while (1)
    {
      if ((v34 & 0xF) != 0)
        goto LABEL_52;
      v35 = *(unsigned __int8 *)(*(_QWORD *)(v34 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v35 > 0x39)
      {
LABEL_47:
        if (sub_22F115668(v34))
          v33 = v34;
        v34 = sub_22F115B7C(v34);
        if (!v34)
          goto LABEL_66;
      }
      else
      {
        if (v35 == 24)
          goto LABEL_65;
        if (v35 == 26)
        {
          if ((*(_BYTE *)(v34 + 23) & 0x10) != 0)
          {
LABEL_65:
            v33 = v34;
LABEL_66:
            sub_22F115668(v33);
            if (*(_BYTE *)(v192 + 16) == 25)
              v39 = 0;
            else
              v39 = (unsigned __int16)(*(_QWORD *)(v192 + 16) >> 38);
            v40 = (uint64_t)(v193 + 4);
            v41 = v192 + 40;
            if ((*(_BYTE *)(v29 + 23) & 4) != 0)
              v42 = sub_22E47E270(v29);
            else
              v42 = 0;
            if ((sub_22ED83E90(a1, v40, v39, v41, v42, (uint64_t)&v212, (uint64_t)v210, (uint64_t)&v206) & 1) != 0)
            {
              v32 = 0;
              goto LABEL_76;
            }
            sub_22E47EE80(&v192);
            v43 = sub_22ED73B6C(a1, &v200);
            if (v43 >= 0x10)
              goto LABEL_216;
LABEL_75:
            v32 = 0;
            goto LABEL_76;
          }
        }
        else if (((1 << v35) & 0x20000000200003CLL) == 0)
        {
          goto LABEL_47;
        }
LABEL_52:
        v34 = sub_22F115B7C(v34);
      }
    }
  }
  sub_22E47EE80(&v192);
  v31 = sub_22ED73B6C(a1, &v200);
  if (v31 < 0x10)
  {
    v32 = 0;
    goto LABEL_76;
  }
  v176 = v31;
  v36 = v192;
  for (i = v192; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_64;
      v38 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v38 <= 0x39)
        break;
LABEL_59:
      if (sub_22F115668(i))
        v36 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_209;
    }
    if (v38 == 24)
      goto LABEL_208;
    if (v38 == 26)
      break;
    if (((1 << v38) & 0x20000000200003CLL) == 0)
      goto LABEL_59;
LABEL_64:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_64;
LABEL_208:
  v36 = i;
LABEL_209:
  sub_22F115668(v36);
  if (*(_BYTE *)(v192 + 16) == 25)
    v144 = 0;
  else
    v144 = (unsigned __int16)(*(_QWORD *)(v192 + 16) >> 38);
  v145 = (uint64_t)(v193 + 4);
  v146 = v192 + 40;
  v43 = v176;
  if ((*(_BYTE *)(v29 + 23) & 4) != 0)
    v147 = sub_22E47E270(v29);
  else
    v147 = 0;
  if ((sub_22ED83E90(a1, v145, v144, v146, v147, (uint64_t)&v212, (uint64_t)v210, (uint64_t)&v206) & 1) != 0)
    goto LABEL_75;
LABEL_216:
  sub_22E4913B4(v29, (uint64_t)&v194);
  v191 = 0;
  v148 = v29;
  v149 = v29;
  while (2)
  {
    while (2)
    {
      if ((v149 & 0xF) != 0)
        goto LABEL_227;
      v150 = *(unsigned __int8 *)(*(_QWORD *)(v149 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v150 > 0x39)
      {
LABEL_222:
        if (sub_22F115668(v149))
          v148 = v149;
        v149 = sub_22F115B7C(v149);
        if (!v149)
          goto LABEL_229;
        continue;
      }
      break;
    }
    if (v150 == 24)
      break;
    if (v150 != 26)
    {
      if (((1 << v150) & 0x20000000200003CLL) != 0)
        goto LABEL_227;
      goto LABEL_222;
    }
    if ((*(_BYTE *)(v149 + 23) & 0x10) == 0)
    {
LABEL_227:
      v149 = sub_22F115B7C(v149);
      continue;
    }
    break;
  }
  v148 = v149;
LABEL_229:
  v151 = sub_22F115668(v148);
  if ((sub_22ED90AFC((uint64_t **)a1, v151, v196, (uint64_t)v198, &v191) & 1) != 0)
  {
    v32 = 0;
    goto LABEL_76;
  }
  if (v209)
  {
    sub_22F24FB88(&v206, v213);
    if (v206)
    {
      v152 = v197;
      if (v197)
      {
        if (*(_BYTE *)(v192 + 16) == 25)
        {
          if (!(_DWORD)v213)
            goto LABEL_237;
        }
        else
        {
          v172 = (unsigned __int16)(*(_QWORD *)(v192 + 16) >> 38);
          if (v172 == v213)
          {
            if (!(unsigned __int16)(*(_QWORD *)(v192 + 16) >> 38))
              goto LABEL_237;
            v173 = v206;
            while (*v152 == *v173)
            {
              ++v152;
              ++v173;
              if (!--v172)
                goto LABEL_237;
            }
          }
        }
      }
      v191 = 1;
LABEL_237:
      v197 = v206;
      goto LABEL_238;
    }
  }
  if (v197)
  {
    v191 = 1;
    v197 = 0;
  }
LABEL_238:
  if (*(_DWORD *)(*a1 + 11992) != -1)
  {
    v153 = v213;
    goto LABEL_248;
  }
  v153 = v213;
  if (v43 == *(_QWORD *)(v29 + 24)
    && (v154 = (unsigned __int16)(*(_QWORD *)(v29 + 16) >> 38), v154 == v213))
  {
    v155 = v192;
    if ((unsigned __int16)(*(_QWORD *)(v29 + 16) >> 38))
    {
      v156 = (_QWORD *)(v29 + 40);
      v157 = v212;
      v158 = 8 * v154;
      while (*v156 == *v157)
      {
        ++v156;
        ++v157;
        v158 -= 8;
        if (!v158)
          goto LABEL_245;
      }
      goto LABEL_248;
    }
LABEL_245:
    if (v191)
      goto LABEL_248;
LABEL_249:
    v159 = sub_22E8BB094((uint64_t)&v200, v155);
    v161 = 0;
    v162 = v193;
    *v160 = *v193;
    v160[1] = v162[1];
    v160[2] = v162[2];
    if (v192)
    {
      v163 = 0;
      if (*(_BYTE *)(v192 + 16) == 26)
      {
        v164 = *(_QWORD *)(v192 + 16);
        if ((v164 & 0x3C0000000000000) != 0)
        {
          v165 = (unsigned __int16)(v164 >> 38);
          if (*(_QWORD *)(v192 + 16) == 25)
            v165 = 0;
          v163 = *(_QWORD *)&v162[2 * v165 + 4];
          v161 = v163 & 0xFFFFFFFF00000000;
          v163 = v163;
        }
        else
        {
          v161 = 0;
          v163 = 0;
        }
      }
    }
    else
    {
      v163 = 0;
    }
    if (v159)
    {
      if (*(_BYTE *)(v159 + 16) == 26)
      {
        v166 = *(_QWORD *)(v159 + 16);
        if ((v166 & 0x3C0000000000000) != 0)
        {
          v167 = v163 | v161;
          if (*(_QWORD *)(v159 + 16) == 25)
            v168 = 0;
          else
            v168 = (unsigned __int16)(v166 >> 38);
          *(_QWORD *)&v160[2 * v168 + 4] = v167;
          v162 = v193;
        }
      }
    }
    v160[3] = v162[3];
    if (*(_BYTE *)(v159 + 16) != 25)
    {
      v169 = *(_QWORD *)(v159 + 16);
      if ((v169 & 0x3FFFC000000000) != 0)
      {
        v170 = 0;
        v171 = (unsigned __int16)(v169 >> 38);
        do
        {
          *(_QWORD *)&v160[2 * v170 + 4] = *((_QWORD *)v210[0] + v170);
          ++v170;
        }
        while (v171 != v170);
      }
    }
    v32 = v155;
  }
  else
  {
LABEL_248:
    v155 = sub_22EE80544((_QWORD *)*a1, v43, v212, v153, 0, 0, (uint64_t)&v194);
    v32 = 0;
    if (v155 >= 0x10)
      goto LABEL_249;
  }
LABEL_76:
  if (v206 != v208)
    free(v206);
  if (v210[0] != v211)
    free(v210[0]);
  if (v212 != v214)
    free(v212);
  if (v32 >= 0x10)
  {
    v45 = *(_QWORD *)(*a1 + 88);
    v46 = v201.i64[0] - v201.i64[1];
    v47 = v201.i32[0] - v201.i32[2];
    if (v201.i32[0] == v201.i32[2])
      v47 = sub_22F11598C(v32);
    v44 = (unint64_t *)sub_22E3CD3D4(v45 + 2032, v47 + 8, 3);
    *v44 = v32;
    memcpy(v44 + 1, (const void *)(v200 + v201.i64[1]), v46);
  }
  else
  {
    v44 = 0;
  }
  if (v198[0] != v199)
    free(v198[0]);
  if ((_QWORD *)v200 != v202 && v200)
    MEMORY[0x2348A0E84]();
  if (v32 < 0x10)
  {
    v48 = 1;
    goto LABEL_199;
  }
  v49 = *(_QWORD *)(sub_22F3C6220(v2) + 56);
  if ((v49 & 4) != 0 && (v50 = *(_QWORD *)((v49 & 0xFFFFFFFFFFFFFFF8) + 40)) != 0)
    v182 = sub_22ED78310(a1, v50);
  else
    v182 = 0;
  v51 = *(_DWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 576);
  if (v51 > 3 || v51 == 2)
    goto LABEL_122;
  v53 = *(_QWORD *)(*a1 + 216);
  v54 = *(_WORD *)(v53 + 8) & 0x7F;
  if (v54 == 16 || v54 == 83)
    goto LABEL_123;
  v55 = -40;
  if ((*(_WORD *)(v53 + 8) & 0x7Fu) > 0x46)
  {
    if (v54 == 71)
    {
      v55 = -56;
    }
    else if (v54 != 81)
    {
LABEL_114:
      if (v54 - 52 < 6)
      {
        v55 = -72;
      }
      else
      {
        v55 = -48;
        if (v54 - 33 < 5)
          v55 = -64;
      }
    }
  }
  else
  {
    if (v54 > 0x18)
      goto LABEL_113;
    if (((1 << v54) & 0x1066) == 0)
    {
      if (v54 == 24)
      {
        v55 = -48;
      }
      else
      {
LABEL_113:
        if (v54 != 70)
          goto LABEL_114;
        v55 = -64;
      }
    }
  }
  v56 = *(_QWORD *)(v53 + v55 + 16);
  v57 = (_QWORD *)(v56 & 0xFFFFFFFFFFFFFFF8);
  if ((v56 & 4) != 0)
    v57 = (_QWORD *)*v57;
  if ((sub_22EFC7ADC((unint64_t)v57) & 1) == 0)
LABEL_123:
    v58 = 2;
  else
LABEL_122:
    v58 = 0;
  v59 = (void *)sub_22F3C61E8(v2);
  v60 = (_QWORD *)sub_22F3365E8(*a1, *(_QWORD *)(v2 + 16), (uint64_t)v44, v58, (*(_DWORD *)v2 >> 18) & 3);
  v194 = v59;
  sub_22F25E108(a1 + 1, &v194)[1] = v60;
  v61 = *a1;
  v62 = *(_QWORD *)(v2 + 16);
  v63 = sub_22F3C6220(v2);
  v64 = (unint64_t)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v63 + 16))(v63) >> 32;
  if (*(_BYTE *)(*v44 + 16) == 25)
    v65 = 0;
  else
    v65 = (unsigned __int16)(*(_QWORD *)(*v44 + 16) >> 38);
  v66 = sub_22F3C6220(v2);
  v67 = sub_22F3366E8(v61, (uint64_t)v60, v62, v44, v64, v44 + 3, v65, *(_DWORD *)(v66 + 80) >> 30, v182 & 0xFFFFFFFFFFFFFFFELL);
  v68 = v184;
  *(_QWORD *)(v184 + 1488) = v67;
  sub_22F3C6220(v2);
  v194 = (void *)sub_22F3C6220(v2);
  v183 = a1 + 1;
  sub_22F25E108(a1 + 1, &v194)[1] = v67;
  v69 = *a1;
  v185[0] = 0;
  v186 = 0;
  v181 = v67;
  sub_22EC52964(v69, v60, v67, v185);
  if (v186)
    v186 = 0;
  v70 = *a1;
  v71 = v67;
  v72 = v67 + 72;
  if (!v67)
    v72 = 0;
  v180 = *(_QWORD *)(v70 + 216);
  v73 = *(_QWORD *)(v70 + 3200);
  *(_QWORD *)(v70 + 3200) = 0;
  v175 = *(_QWORD *)(v70 + 10288);
  v177 = v73;
  v178 = *(_DWORD *)(v70 + 1944);
  v179 = *(_DWORD *)(v70 + 2192);
  *(_QWORD *)(v70 + 216) = v72;
  *(_DWORD *)(v70 + 1944) = *(_DWORD *)(v70 + 1904);
  *(_DWORD *)(v70 + 2192) = *(_DWORD *)(v70 + 1960);
  v74 = *(_QWORD *)(v2 + 16);
  v75 = (*(_DWORD *)v2 >> 18) & 3;
  v76 = *(_DWORD *)(v2 + 24);
  v77 = (*(_DWORD *)v2 >> 20) & 1;
  v78 = (*(_DWORD *)v2 >> 21) & 1;
  v79 = sub_22F3C66E8(v2);
  sub_22EC52B9C(v70, v184, v71, v74, v75, v76, v77, v78, v79);
  v80 = sub_22F3C64D0(v2);
  v81 = sub_22F3C650C(v2);
  if (v80 == v81)
  {
    *(_DWORD *)(v184 + 1508) = *(_DWORD *)(v184 + 1272);
    v82 = *a1;
    LODWORD(v212) = 6;
    v194 = 0;
    LODWORD(v210[0]) = 3;
    v200 = *(unsigned int *)(v82 + 1704);
    sub_22EB4DDB8(v82 + 3688, (int *)&v212, (int *)&v200, (__int16 *)(v82 + 1693), (uint64_t *)&v194, (int *)v210);
    v83 = *(unsigned int *)(v82 + 3696);
    v84 = v83 - 2;
    v85 = *(_QWORD *)(v82 + 3688);
    v86 = *(_DWORD *)(v85 + 576 * (v83 - 2));
    if (v86 == 5)
    {
      *(_BYTE *)(v85 + 576 * v83 - 4) = *(_BYTE *)(v85 + 576 * v84 + 572);
      v88 = 1;
      v87 = v180;
    }
    else
    {
      v87 = v180;
      if (v86 == 2)
      {
        *(_BYTE *)(v85 + 576 * v83 - 4) = 1;
        v88 = *(_BYTE *)(v85 + 576 * v84 + 573) != 0;
      }
      else
      {
        v88 = 0;
        *(_BYTE *)(v85 + 576 * v83 - 4) = 0;
      }
    }
    v89 = v85 + 576 * v83;
    *(_BYTE *)(v89 - 3) = v88;
    *(_WORD *)(v82 + 1693) = 0;
    if (*(_DWORD *)(v82 + 1848))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v82 + 1776), (llvm::SmallPtrSetImplBase *)(v89 - 560));
      sub_22EAEAE08(v82 + 1840, (uint64_t *)(v89 - 496));
    }
  }
  else
  {
    v90 = v81;
    v91 = 0;
    do
    {
      v92 = *(_QWORD *)v80;
      if ((*(_QWORD *)v80 & 1) != 0)
        break;
      if ((v92 & 0xFFFFFFFFFFFFFFFCLL) == 4)
      {
        sub_22EBBBBEC(*a1, *(_DWORD *)(v80 + 8), 1, 1, 0, (v92 >> 1) & 1);
      }
      else if (v92 >= 4)
      {
        v93 = v91;
        if (sub_22F3C6428(v2, (_QWORD *)v80))
        {
          v100 = sub_22F3C64D0(v2);
          v101 = (char *)v203 + 88 * ((v80 - v100) >> 4);
          v102 = *(_QWORD *)v80 & 0xFFFFFFFFFFFFFFF8;
          v194 = v196;
          v195 = 0x400000000;
          v103 = *((unsigned int *)v101 + 4);
          if ((_DWORD)v103)
          {
            v107 = (_QWORD *)*((_QWORD *)v101 + 1);
            v174 = &v107[2 * v103];
            while ((*v107 & 1) == 0)
            {
              v108 = v107[1];
              if (v108 < 0x10)
                break;
              v109 = *(_QWORD *)(v102 + 40);
              v110 = (v109 & 7) != 0 ? 0 : v109 & 0xFFFFFFFFFFFFFFF8;
              v111 = sub_22EC5313C(*a1, *(_DWORD *)(v102 + 24), v108, *(_DWORD *)v101, v110, (*(_BYTE *)(v102 + 96) >> 5) & 3, *v107 & 0xFFFFFFFFFFFFFFFELL);
              if (!v111)
                break;
              v112 = v111;
              v113 = v195;
              if (v195 >= (unint64_t)HIDWORD(v195))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v113 = v195;
              }
              *((_QWORD *)v194 + v113) = v112;
              LODWORD(v195) = v195 + 1;
              sub_22F336D2C(*a1, v184, v112);
              v107 += 2;
              if (v107 == v174)
                goto LABEL_163;
            }
LABEL_188:
            if (v194 != v196)
              free(v194);
            *(_DWORD *)(v184 + 1508) = *(_DWORD *)(v184 + 1272);
            v132 = *a1;
            LODWORD(v212) = 6;
            v194 = 0;
            LODWORD(v210[0]) = 3;
            v200 = *(unsigned int *)(v132 + 1704);
            sub_22EB4DDB8(v132 + 3688, (int *)&v212, (int *)&v200, (__int16 *)(v132 + 1693), (uint64_t *)&v194, (int *)v210);
            v133 = *(unsigned int *)(v132 + 3696);
            v134 = v133 - 2;
            v135 = *(_QWORD *)(v132 + 3688);
            v136 = *(_DWORD *)(v135 + 576 * (v133 - 2));
            v87 = v180;
            if (v136 == 5)
            {
              *(_BYTE *)(v135 + 576 * v133 - 4) = *(_BYTE *)(v135 + 576 * v134 + 572);
              v137 = 1;
            }
            else if (v136 == 2)
            {
              *(_BYTE *)(v135 + 576 * v133 - 4) = 1;
              v137 = *(_BYTE *)(v135 + 576 * v134 + 573) != 0;
            }
            else
            {
              v137 = 0;
              *(_BYTE *)(v135 + 576 * v133 - 4) = 0;
            }
            v138 = v135 + 576 * v133;
            *(_BYTE *)(v138 - 3) = v137;
            *(_WORD *)(v132 + 1693) = 0;
            if (*(_DWORD *)(v132 + 1848))
            {
              llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v132 + 1776), (llvm::SmallPtrSetImplBase *)(v138 - 560));
              sub_22EAEAE08(v132 + 1840, (uint64_t *)(v138 - 496));
            }
            goto LABEL_195;
          }
LABEL_163:
          if ((v93 & 1) != 0)
            goto LABEL_188;
          v104 = a1;
          v105 = v2;
          v200 = v102;
          v106 = *(_QWORD *)v194;
          sub_22F25E108(v183, &v200)[1] = v106;
          if (v194 != v196)
            free(v194);
          v91 = 0;
          v2 = v105;
          a1 = v104;
          v68 = v184;
        }
        else
        {
          v94 = *(_QWORD *)v80;
          if ((*(_QWORD *)v80 & 2) != 0)
            v95 = 1;
          else
            v95 = 2;
          if ((*(_QWORD *)v80 & 0xFFFFFFFFFFFFFFFCLL) == 4)
            v96 = 2;
          else
            v96 = v95;
          if (v94 < 4)
            v96 = 2;
          if ((v94 & 1) != 0)
            v97 = 0;
          else
            v97 = v96;
          v98 = *(_DWORD *)(v80 + 12);
          v99 = v94 & 0xFFFFFFFFFFFFFFF8;
          v200 = v94 & 0xFFFFFFFFFFFFFFF8;
          v194 = 0;
          if (sub_22E793870(v183, &v200, &v194)
            && v194 != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
          {
            v99 = *((_QWORD *)v194 + 1);
          }
          if (v99 && (*(_BYTE *)(v99 + 28) & 0x80) == 0)
          {
            sub_22F32FC30(*a1, v99, *(_DWORD *)(v80 + 8), v97, v98);
            v91 = v93;
          }
          else
          {
            v91 = 1;
          }
        }
      }
      v80 += 16;
    }
    while (v80 != v90);
    *(_DWORD *)(v68 + 1508) = *(_DWORD *)(v68 + 1272);
    v114 = *a1;
    LODWORD(v212) = 6;
    v194 = 0;
    LODWORD(v210[0]) = 3;
    v200 = *(unsigned int *)(v114 + 1704);
    sub_22EB4DDB8(v114 + 3688, (int *)&v212, (int *)&v200, (__int16 *)(v114 + 1693), (uint64_t *)&v194, (int *)v210);
    v115 = *(unsigned int *)(v114 + 3696);
    v116 = v115 - 2;
    v117 = *(_QWORD *)(v114 + 3688);
    v118 = *(_DWORD *)(v117 + 576 * (v115 - 2));
    if (v118 == 5)
    {
      *(_BYTE *)(v117 + 576 * v115 - 4) = *(_BYTE *)(v117 + 576 * v116 + 572);
      v119 = 1;
      v87 = v180;
    }
    else
    {
      v87 = v180;
      if (v118 == 2)
      {
        *(_BYTE *)(v117 + 576 * v115 - 4) = 1;
        v119 = *(_BYTE *)(v117 + 576 * v116 + 573) != 0;
      }
      else
      {
        v119 = 0;
        *(_BYTE *)(v117 + 576 * v115 - 4) = 0;
      }
    }
    v120 = v117 + 576 * v115;
    *(_BYTE *)(v120 - 3) = v119;
    *(_WORD *)(v114 + 1693) = 0;
    if (!*(_DWORD *)(v114 + 1848))
    {
      if ((v91 & 1) == 0)
        goto LABEL_184;
      goto LABEL_195;
    }
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v114 + 1776), (llvm::SmallPtrSetImplBase *)(v120 - 560));
    sub_22EAEAE08(v114 + 1840, (uint64_t *)(v120 - 496));
    if ((v91 & 1) != 0)
    {
LABEL_195:
      LOBYTE(v188) = 0;
      goto LABEL_196;
    }
  }
LABEL_184:
  sub_22F3C638C(v2);
  v126 = sub_22ED84358(a1, *(__n128 **)(v2 + 8 * *(unsigned __int16 *)(v2 + 4) + 32), 0, v121, v122, v123, v124, v125);
  LOBYTE(v188) = 0;
  if ((v126 & 1) != 0)
  {
LABEL_196:
    if (v87)
    {
      *(_QWORD *)(v70 + 216) = v87;
      *(_QWORD *)(v70 + 3200) = v177;
      *(_QWORD *)(v70 + 10288) = v175;
      *(_DWORD *)(v70 + 1944) = v178;
      *(_DWORD *)(v70 + 2192) = v179;
    }
    v139 = *(unsigned int *)(v2 + 16);
    v48 = 1;
    sub_22F336DD4(*a1, v139, 0, 1);
  }
  else
  {
    sub_22F2F3A38((uint64_t)&v194, v184);
    v127 = v126 & 0xFFFFFFFFFFFFFFFELL;
    sub_22EA30A38(*a1, v181, v127, 1);
    if (v87)
    {
      *(_QWORD *)(v70 + 216) = v87;
      *(_QWORD *)(v70 + 3200) = v177;
      *(_QWORD *)(v70 + 10288) = v175;
      *(_DWORD *)(v70 + 1944) = v178;
      *(_DWORD *)(v70 + 2192) = v179;
    }
    v128 = *a1;
    v129 = *(unsigned int *)(v2 + 16);
    sub_22F0D60E4(v127);
    sub_22EC54548(v128, v129, v130, (uint64_t)&v194);
    v48 = v131;
    sub_22F2F43D0((uint64_t)&v194);
  }
LABEL_199:
  sub_22F2F446C((uint64_t)&v187);
  v140 = (char *)v203;
  if ((_DWORD)v204)
  {
    v141 = 88 * v204;
    do
    {
      v142 = *(char **)&v140[v141 - 80];
      if (&v140[v141 - 64] != v142)
        free(v142);
      v141 -= 88;
    }
    while (v141);
    v140 = (char *)v203;
  }
  if (v140 != v205)
    free(v140);
  return v48;
}

uint64_t sub_22ED7EF10(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a2 + 40);
  if (v4)
  {
    v5 = sub_22ED89638((uint64_t *)a1, v4, *(void **)(a2 + 48), 0, 0);
    if (!v5)
      return 1;
    v7 = v5;
    v8 = v6;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = *(_QWORD *)(a2 + 24);
  v13 = v9;
  v14 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v13, &v14)
    && v14 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
  {
    v9 = *(_QWORD *)(v14 + 8);
  }
  if (v9)
  {
    v10 = sub_22ED78310(a1, *(_QWORD *)(a2 + 16));
    if ((v10 & 1) == 0)
    {
      v12 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 56, 3);
      return sub_22F2F44CC(v12, v10 & 0xFFFFFFFFFFFFFFFELL, v9, *(_BYTE *)(a2 + 36), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 88) + 16872), 1, v7, v8, *(_DWORD *)(a2 + 32));
    }
  }
  return 1;
}

uint64_t sub_22ED7F01C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  unint64_t v10;

  v2 = a2;
  v4 = sub_22ED78310(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ED78310(a1, *(_QWORD *)(v2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  v6 = *a1;
  v7 = (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(unsigned __int8 **)(v2 + 16) != v7
    || *(_QWORD *)(v2 + 24) != (v5 & 0xFFFFFFFFFFFFFFFELL))
  {
    v8 = *(_DWORD *)(v2 + 32);
    v10 = v5 & 0xFFFFFFFFFFFFFFFELL;
    return sub_22EB296C0(v6, 0, v7, 0, (uint64_t *)&v10, 1, v8);
  }
  return v2;
}

uint64_t sub_22ED7F0D0(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  const void **v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_DWORD *)(a2 + 4);
  if ((v4 & 0x80000000) == 0)
  {
    v5 = (v4 - 1);
    if ((_DWORD)v5)
    {
      v6 = (const void **)(a2 + 24);
      v7 = 8 * v5;
      do
      {
        v8 = *v6++;
        sub_22E3BA850(a1 + 32, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
  v9 = sub_22ED78310(a1, *(_QWORD *)(a2 + 16));
  v10 = *(_DWORD *)(a2 + 4);
  if (v10 < 0)
  {
    v11 = (v10 & 0x7FFFFFFFu) - 1;
    if ((_DWORD)v11)
    {
      v12 = (void **)(a2 + 24);
      v13 = 8 * v11;
      do
      {
        v14 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 32), *v12);
        v15 = *(_QWORD *)(a1 + 40);
        if (v15 == *(_QWORD *)(a1 + 32))
          v16 = 52;
        else
          v16 = 48;
        if (v14 != (void **)(v15 + 8 * *(unsigned int *)(a1 + v16)))
        {
          *v14 = (void *)-2;
          ++*(_DWORD *)(a1 + 56);
        }
        ++v12;
        v13 -= 8;
      }
      while (v13);
    }
  }
  return v9;
}

uint64_t sub_22ED7F1BC(uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v3;

  v2 = a2;
  v3 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((v2 & 4) != 0)
    v3 = *(_QWORD *)(v3 + 40);
  return sub_22ED78310(a1, v3);
}

uint64_t sub_22ED7F1D0(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a2;
  v4 = sub_22ED78310(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ED78310(a1, *(_QWORD *)(v2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  v6 = sub_22ED78310(a1, *(_QWORD *)(v2 + 32));
  if ((v6 & 1) != 0)
    return 1;
  v7 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) != -1
    || *(_QWORD *)(v2 + 16) != v7
    || *(_QWORD *)(v2 + 24) != (v5 & 0xFFFFFFFFFFFFFFFELL)
    || *(_QWORD *)(v2 + 32) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EB2AC58(*a1, v7, v5 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 4));
  }
  return v2;
}

uint64_t sub_22ED7F294(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  void *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned __int32 v28;
  unsigned int v29;
  unint64_t v30;
  void **v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unsigned int v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  __int128 v46;
  void *v47[2];
  void *v48[2];
  _BYTE v49[129];
  uint64_t v50;
  void *v51[2];
  _OWORD v52[4];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  __n128 v57;
  uint64_t v58;
  __int128 v59;
  int v60;
  __int16 v61;
  char v62;
  uint64_t v63;

  v2 = a2;
  v63 = *MEMORY[0x24BDAC8D0];
  v4 = sub_22ED78310(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_DWORD *)v2;
  if ((*(_DWORD *)v2 & 0x80000) == 0 || (v6 = *(_QWORD *)(v2 + 48)) == 0)
  {
    v9 = 0;
    v10 = 0;
    if ((v5 & 0x100000) != 0)
      goto LABEL_6;
LABEL_8:
    v11 = 0;
    goto LABEL_9;
  }
  v7 = sub_22ED89638(a1, v6, *(void **)(v2 + 56), 0, 0);
  if (!v7)
    return 1;
  v9 = v7;
  v10 = v8;
  v5 = *(_DWORD *)v2;
  if ((*(_DWORD *)v2 & 0x100000) == 0)
    goto LABEL_8;
LABEL_6:
  v11 = *(_DWORD *)(v2 + 24 * ((v5 >> 19) & 1) + 56);
LABEL_9:
  v12 = *(_QWORD **)(v2 + 24);
  v51[0] = v12;
  v48[0] = 0;
  if (sub_22E793870(a1 + 1, v51, v48) && v48[0] != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
    v12 = (_QWORD *)*((_QWORD *)v48[0] + 1);
  if (!v12)
    return 1;
  if ((*(_BYTE *)(v2 + 2) & 8) != 0)
  {
    v14 = *(_QWORD *)(v2 + 64);
    v13 = *(void **)(v2 + 24);
  }
  else
  {
    v13 = *(void **)(v2 + 24);
    v14 = (unint64_t)v13;
  }
  v15 = (void *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
  v16 = (uint64_t)v12;
  if (v13 != v15)
  {
    v16 = (uint64_t)v15;
    v51[0] = v15;
    v48[0] = 0;
    if (sub_22E793870(a1 + 1, v51, v48) && v48[0] != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
      v16 = *((_QWORD *)v48[0] + 1);
    if (!v16)
      return 1;
  }
  v17 = *a1;
  if (*(_DWORD *)(*a1 + 11992) == -1)
  {
    v18 = *(unsigned int *)v2;
    if (*(_QWORD *)(v2 + 16) == (v4 & 0xFFFFFFFFFFFFFFFELL))
    {
      if ((v18 & 0x80000) != 0)
      {
        v40 = *(_QWORD *)(v2 + 48);
        v41 = *(_QWORD *)(v2 + 56);
      }
      else
      {
        v40 = 0;
        v41 = 0;
      }
      if (v9 == v40 && v10 == v41 && v12 == *(_QWORD **)(v2 + 24))
      {
        v42 = (v18 & 0x80000) != 0 ? *(_QWORD *)(v2 + 64) : (unint64_t)v12;
        if (v16 == (v42 & 0xFFFFFFFFFFFFFFFCLL)
          && ((v18 & 0x100000) == 0 || !*(_DWORD *)(v2 + 24 * ((v18 >> 19) & 1) + 48)))
        {
          sub_22EB52238(*a1, v2);
          return v2;
        }
      }
    }
  }
  else
  {
    LODWORD(v18) = *(_DWORD *)v2;
  }
  v48[0] = v49;
  v48[1] = (void *)0x800000000;
  v50 = 0;
  if ((v18 & 0x100000) != 0)
  {
    v20 = v2 + 24 * ((v18 >> 19) & 1);
    v23 = *(_DWORD *)(v20 + 48);
    v21 = v20 + 48;
    v22 = v23;
    if (v23)
    {
      LODWORD(v50) = v22;
      HIDWORD(v50) = *(_DWORD *)(v21 + 4);
      v24 = v21 + 16 * ((v18 >> 20) & 1);
      if ((sub_22ED90408((uint64_t)a1, v24, v24 + 32 * *(unsigned int *)(v21 + 12)) & 1) != 0)
      {
LABEL_34:
        v2 = 1;
        goto LABEL_62;
      }
      v17 = *a1;
    }
  }
  sub_22F0D4E74(*(_QWORD *)(v2 + 16));
  v26 = sub_22F141A3C(HIDWORD(v25), 0, *(_QWORD **)(v17 + 112), *(_DWORD **)(v17 + 72));
  v27 = *(_QWORD *)(v2 + 32);
  v28 = *(_DWORD *)(v2 + 40);
  v44.n128_u64[0] = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 40);
  v44.n128_u32[2] = v28;
  v45 = v27;
  if (v44.n128_u64[0])
  {
    sub_22ED89DE4((__n128 *)v51, (uint64_t)a1, &v44);
    v44 = *(__n128 *)v51;
    v45 = *(_QWORD *)&v52[0];
    if (!v51[0])
      goto LABEL_34;
  }
  v29 = v11;
  v30 = *(unsigned int *)v2;
  if ((v30 & 0x100000) != 0)
  {
    if (*(_DWORD *)(v2 + 24 * ((v30 >> 19) & 1) + 48))
      v31 = v48;
    else
      v31 = 0;
  }
  else
  {
    v31 = 0;
  }
  v32 = sub_22EC2624C(*a1, (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), (v30 >> 18) & 1);
  if (v12[5])
  {
    v46 = 0u;
    *(_OWORD *)v47 = 0u;
    sub_22E8ACE30((uint64_t)&v46, v9, v10);
    v33 = v32 & 0xFFFFFFFFFFFFFFFELL;
    v34 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFFFFELL) + 8);
    if ((v30 & 0x40000) != 0
      && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v34 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
    {
      v2 = 1;
    }
    else
    {
      v35 = (_QWORD *)*a1;
      v51[0] = 0;
      v51[1] = (char *)v52 + 8;
      *(_QWORD *)&v52[0] = 0x800000000;
      v53 = 0;
      v54 = 0;
      v55 = 0;
      v56 = v35;
      v57 = v44;
      v58 = v45;
      v59 = xmmword_22F463A40;
      v60 = 16842752;
      v61 = 0;
      v62 = 0;
      sub_22EC56024((uint64_t)v51);
      v36 = *(unsigned int *)(v16 + 28);
      v37 = v52[0];
      if (LODWORD(v52[0]) >= DWORD1(v52[0]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v37 = v52[0];
      }
      *((_QWORD *)v51[1] + v37) = (v36 >> 13) & 3 | v16;
      ++LODWORD(v52[0]);
      LODWORD(v51[0]) = 2;
      sub_22EC561E4((uint64_t)v51);
      v2 = sub_22EC24AB8(*a1, v33, v34, v26, (v30 >> 18) & 1, (uint64_t *)&v46, v29, 0, (uint64_t)v51, (uint64_t)v31, 0, 0, 0);
      if (HIBYTE(v60))
      {
        if (LODWORD(v51[0]) == 5)
        {
          sub_22EC64D18(v56, (uint64_t)v51);
        }
        else if (v54 && (*(_DWORD *)(v56[9] + 52) & 0x400000) != 0)
        {
          sub_22E90B5FC((unint64_t)v56, (uint64_t)v51);
        }
      }
      if (v53)
      {
        v43 = sub_22EC6CBD0(v53);
        MEMORY[0x2348A0E9C](v43, 0x10E0C409F09D3C3);
      }
      if (v51[1] != (char *)v52 + 8)
        free(v51[1]);
    }
    if (!HIDWORD(v47[1]))
      goto LABEL_62;
    v39 = v47[0];
  }
  else
  {
    v38 = (unint64_t)sub_22EB24398(*a1, v32 & 0xFFFFFFFFFFFFFFFELL, v9, v16, (uint64_t)v12);
    if ((v38 & 1) != 0)
    {
      v2 = 1;
      goto LABEL_62;
    }
    *(_OWORD *)v51 = 0u;
    v52[0] = 0u;
    v2 = sub_22EC25974((_QWORD *)*a1, v38 & 0xFFFFFFFFFFFFFFFELL, (v30 >> 18) & 1, v26, (uint64_t)v51, (uint64_t)v12, ((unint64_t)*(unsigned int *)(v16 + 28) >> 13) & 3 | v16, (uint64_t)&v44);
    if (!HIDWORD(v52[0]))
      goto LABEL_62;
    v39 = *(void **)&v52[0];
  }
  free(v39);
LABEL_62:
  if (v48[0] != v49)
    free(v48[0]);
  return v2;
}

uint64_t sub_22ED7F858(uint64_t *a1, uint64_t a2)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned __int8 **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void *v21;
  uint64_t v22;
  _BYTE v23[32];
  void *v24[2];
  _BYTE v25[32];
  void *v26;
  uint64_t v27;
  _QWORD v28[6];

  v28[4] = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 32) == 1)
    return sub_22ED78310(a1, **(_QWORD **)(a2 + 40));
  v5 = sub_22ED73944(a1, *(_QWORD *)(a2 + 16));
  if (v5)
  {
    v6 = (_QWORD *)v5;
    v20 = 0;
    v24[0] = v25;
    v24[1] = (void *)0x400000000;
    v7 = 1;
    if ((sub_22ED836E0(a1, *(unsigned __int8 ***)(a2 + 40), *(_DWORD *)(a2 + 32), 1, (uint64_t)v24, &v20) & 1) != 0)
      goto LABEL_29;
    if (*(_DWORD *)(*a1 + 11992) == -1 && v6 == *(_QWORD **)(a2 + 16) && !v20)
    {
      v7 = a2;
LABEL_29:
      if (v24[0] != v25)
        free(v24[0]);
      return v7;
    }
    v21 = v23;
    v22 = 0x400000000;
    v8 = *(unsigned int *)(a2 + 32);
    if ((_DWORD)v8)
    {
      v9 = 0;
      LODWORD(v10) = 0;
      v11 = 8 * v8;
      do
      {
        v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + v9) + 8);
        if (v10 >= HIDWORD(v22))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          LODWORD(v10) = v22;
        }
        *((_QWORD *)v21 + v10) = v12;
        v10 = (v22 + 1);
        LODWORD(v22) = v22 + 1;
        v9 += 8;
      }
      while (v11 != v9);
      v13 = (uint64_t *)v21;
      v14 = (unsigned __int8 **)v24[0];
      v15 = *(_QWORD *)(a2 + 24);
      v26 = v28;
      v27 = 0x400000000;
      if ((_DWORD)v10)
      {
        v19 = v15;
        v7 = 1;
        while (1)
        {
          v16 = *v13++;
          v17 = sub_22ECFABE8((uint64_t *)*a1, *v14, v16, 1, 0);
          if ((v17 & 1) != 0)
            goto LABEL_25;
          v18 = v27;
          if (v27 >= (unint64_t)HIDWORD(v27))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v18 = v27;
          }
          *((_QWORD *)v26 + v18) = v17 & 0xFFFFFFFFFFFFFFFELL;
          LODWORD(v27) = v27 + 1;
          ++v14;
          if (!--v10)
          {
            v15 = v19;
            break;
          }
        }
      }
    }
    else
    {
      v15 = *(_QWORD *)(a2 + 24);
      v26 = v28;
      v27 = 0x400000000;
    }
    v7 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 48, 3);
    sub_22F0614DC(v7, *(_QWORD *)(*a1 + 88), v6, (uint64_t *)v26, v27, v15);
LABEL_25:
    if (v26 != v28)
      free(v26);
    if (v21 != v23)
      free(v21);
    goto LABEL_29;
  }
  return 1;
}

uint64_t sub_22ED7FB50(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  BOOL v15;
  unsigned int v16;

  v2 = a2;
  v4 = sub_22ED78310(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(v2 + 24);
  if (v5)
  {
    v6 = sub_22ED78310(a1, v5);
    if ((v6 & 1) != 0)
      return 1;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_QWORD *)(v2 + 32);
  if (v7)
  {
    v8 = sub_22ED78310(a1, v7);
    if ((v8 & 1) != 0)
      return 1;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(_QWORD *)(v2 + 40);
  if (v9)
  {
    v10 = sub_22ED78310(a1, v9);
    if ((v10 & 1) != 0)
      return 1;
  }
  else
  {
    v10 = 0;
  }
  v12 = *a1;
  v13 = *(_QWORD *)(v2 + 16);
  v14 = (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  v15 = *(_DWORD *)(v12 + 11992) == -1 && v13 == (_QWORD)v14;
  if (v15 && *(_QWORD *)(v2 + 24) == (v6 & 0xFFFFFFFFFFFFFFFELL) && *(_QWORD *)(v2 + 32) == (v8 & 0xFFFFFFFFFFFFFFFELL))
    return v2;
  sub_22F0D60E4(v13);
  return sub_22EB29E14((_QWORD *)v12, v14, v16, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 48), *(_DWORD *)(v2 + 52), v8 & 0xFFFFFFFFFFFFFFFELL, v10 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 56));
}

uint64_t sub_22ED7FC70(_QWORD **a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  _QWORD v15[5];

  v15[4] = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)(a2 + 32);
  v5 = sub_22ED78310(a1, *(_QWORD *)(a2 + 32 + 8 * *(unsigned int *)(a2 + 24)));
  if ((v5 & 1) == 0)
  {
    v14 = 0;
    v6 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v6)
    {
      LOBYTE(v7) = 0;
      v8 = &v4[v6];
      v9 = v4;
      do
      {
        while (1)
        {
          v10 = sub_22ED78310(a1, *v9);
          if ((v10 & 1) == 0)
            break;
          ++v9;
          v7 = 1;
          if (v9 == v8)
            return v7;
        }
        v11 = v14;
        if (v14 >= 4uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v11 = v14;
        }
        v15[v11] = v10 & 0xFFFFFFFFFFFFFFFELL;
        v12 = ++v14;
        ++v9;
      }
      while (v9 != v8);
      if ((v7 & 1) != 0)
        return 1;
      LODWORD(v6) = *(_DWORD *)(a2 + 24);
    }
    else
    {
      v12 = 0;
    }
    return sub_22EB2BE20(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), (char *)v15, v12, &v4[(v6 + 1)], v6);
  }
  return 1;
}

uint64_t sub_22ED7FDFC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  int v6;
  BOOL v7;
  BOOL v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  BOOL v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v51;
  char v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  __int128 v60[4];
  void *v61;
  uint64_t v62;
  _QWORD v63[34];

  v2 = a2;
  v63[32] = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned int *)(a2 + 28);
  memset(v60, 0, sizeof(v60));
  v61 = v63;
  v62 = 0x400000000;
  sub_22E8BB974((uint64_t)&v61, v4, v60);
  v59 = a1;
  v5 = (_QWORD *)*a1;
  v6 = *(_DWORD *)(*a1 + 11992);
  v7 = v6 == -1;
  v8 = v6 != -1;
  if ((_DWORD)v4)
  {
    v52 = v8;
    v51 = v4;
    v9 = 0;
    v10 = 0;
    v11 = v2 + 32;
    v53 = v2;
    v54 = v4 << 6;
    v12 = 2;
    v58 = v2 + 32;
    while (1)
    {
      v13 = *(_QWORD *)v11;
      v14 = *(_QWORD *)(*(_QWORD *)v11 + 40);
      v15 = (v14 & 7) != 0 ? 0 : v14 & 0xFFFFFFFFFFFFFFF8;
      v16 = (char *)v61 + v9;
      *(_QWORD *)v16 = v15;
      *((_DWORD *)v16 + 2) = *(_DWORD *)(v13 + 24);
      v17 = *(_DWORD *)(v13 + 24);
      v18 = *(_QWORD *)(v13 + 56);
      if ((v18 & 4) == 0)
        break;
      v41 = v18 & 0xFFFFFFFFFFFFFFF8;
      if (*(_DWORD *)(v41 + 16))
        v42 = ***(_DWORD ***)(v41 + 24);
      else
        v42 = *(_DWORD *)(v13 + 64);
      if (v17 != v42)
      {
        v19 = *(_QWORD *)(v41 + 32);
LABEL_9:
        v20 = sub_22ED73944(v59, v19);
        v21 = sub_22ED8368C((uint64_t)v59, *(_QWORD *)(v13 + 48));
        v22 = sub_22EE7D030(*v59, v21, v20);
        *(_QWORD *)((char *)v61 + v9 + 16) = v22;
      }
LABEL_10:
      v23 = v58 + 8 * *(unsigned int *)(v2 + 28);
      v24 = v12 - 2;
      v56 = *(_QWORD *)(v23 + 8 * v24);
      v57 = v12 - 1;
      v25 = *(_QWORD *)(v23 + 8 * v57);
      v26 = *(_QWORD *)(v23 + 8 * v12);
      v27 = sub_22ED78310(v59, v56);
      v55 = v25;
      v28 = sub_22ED78310(v59, v25);
      v29 = v26;
      v30 = sub_22ED78310(v59, v26);
      if ((v10 & 1) != 0)
        goto LABEL_19;
      v31 = *(_QWORD *)(v13 + 56);
      v32 = v31 & 0xFFFFFFFFFFFFFFF8;
      v33 = v31 & 0xFFFFFFFFFFFFFFF8;
      if ((v31 & 4) != 0)
        v33 = *(_QWORD *)(v32 + 32);
      if (v33)
      {
        v10 = 1;
        if (*(_QWORD *)((char *)v61 + v9 + 16) < 0x10uLL || (v27 & 1) != 0)
          goto LABEL_20;
      }
      else if ((v27 & 1) != 0)
      {
        goto LABEL_19;
      }
      if (((v28 | v30) & 1) != 0)
      {
LABEL_19:
        v10 = 1;
LABEL_20:
        v2 = v53;
        goto LABEL_21;
      }
      v34 = (char *)v61;
      v35 = (char *)v61 + v9;
      *((_QWORD *)v35 + 3) = v27 & 0xFFFFFFFFFFFFFFFELL;
      *((_QWORD *)v35 + 4) = v28 & 0xFFFFFFFFFFFFFFFELL;
      *((_QWORD *)v35 + 5) = v30 & 0xFFFFFFFFFFFFFFFELL;
      v2 = v53;
      *((_DWORD *)v35 + 12) = *(_DWORD *)(v58
                                        + 8 * *(unsigned int *)(v53 + 28)
                                        + 8 * (3 * *(_DWORD *)(v53 + 28))
                                        + 4 * v24);
      *((_DWORD *)v35 + 13) = *(_DWORD *)(v58
                                        + 8 * *(unsigned int *)(v53 + 28)
                                        + 8 * (3 * *(_DWORD *)(v53 + 28))
                                        + 4 * v57);
      *((_DWORD *)v35 + 14) = *(_DWORD *)(v58
                                        + 8 * *(unsigned int *)(v53 + 28)
                                        + 8 * (3 * *(_DWORD *)(v53 + 28))
                                        + 4 * v12);
      if ((v52 & 1) != 0)
      {
        v10 = 0;
        v36 = 1;
LABEL_39:
        v52 = v36;
        goto LABEL_21;
      }
      if ((v31 & 4) != 0)
        v32 = *(_QWORD *)(v32 + 32);
      if (v32)
      {
        v37 = *(_QWORD *)&v34[v9 + 16];
        if (v37 >= 0x10)
          v38 = *(_QWORD *)(v37 & 0xFFFFFFFFFFFFFFF0);
        else
          v38 = 0;
        v39 = *(_QWORD *)(v13 + 48);
        if (v39 >= 0x10)
          v40 = *(_QWORD *)(v39 & 0xFFFFFFFFFFFFFFF0);
        else
          v40 = 0;
        v10 = 0;
        v52 = 1;
        if (v38 != v40)
          goto LABEL_21;
      }
      else
      {
        v10 = 0;
        v52 = 1;
      }
      if (v56 == (v27 & 0xFFFFFFFFFFFFFFFELL) && v55 == (v28 & 0xFFFFFFFFFFFFFFFELL))
      {
        v10 = 0;
        v36 = v29 != (v30 & 0xFFFFFFFFFFFFFFFELL);
        goto LABEL_39;
      }
LABEL_21:
      v11 += 8;
      v9 += 64;
      v12 += 3;
      if (v54 == v9)
      {
        if ((v10 & 1) != 0)
        {
          v43 = 1;
          goto LABEL_58;
        }
        v4 = v51;
        if ((v52 & 1) != 0)
        {
          v5 = (_QWORD *)*v59;
          goto LABEL_52;
        }
LABEL_57:
        v43 = v2;
        goto LABEL_58;
      }
    }
    if (v17 == *(_DWORD *)(v13 + 64))
      goto LABEL_10;
    v19 = v18 & 0xFFFFFFFFFFFFFFF8;
    goto LABEL_9;
  }
  if (v7)
    goto LABEL_57;
LABEL_52:
  v44 = sub_22EB2C3A8(v5, 0, *(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 20), *(_DWORD *)(v2 + 24), (uint64_t)v61, v62);
  v43 = v44;
  if (v44 >= 2 && (_DWORD)v4)
  {
    v45 = (uint64_t *)(v2 + 32);
    v46 = (uint64_t *)((v44 & 0xFFFFFFFFFFFFFFFELL) + 32);
    do
    {
      v48 = *v45++;
      v47 = v48;
      v49 = *v46++;
      *(_QWORD *)&v60[0] = v47;
      sub_22F25E108(v59 + 1, v60)[1] = v49;
      --v4;
    }
    while (v4);
  }
LABEL_58:
  if (v61 != v63)
    free(v61);
  return v43;
}

uint64_t sub_22ED80218(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;

  v2 = a2;
  v4 = (uint64_t *)sub_22ED73944(a1, *(_QWORD *)(a2 + 16));
  if (!v4)
    return 1;
  if (*(_DWORD *)(*a1 + 11992) != -1 || v4 != *(uint64_t **)(v2 + 16))
    return sub_22EC2A5E0(*a1, *(_DWORD *)(v2 + 24), v4, *(_DWORD *)(v2 + 28));
  return v2;
}

uint64_t sub_22ED8027C(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  void *v15[2];

  v2 = a2;
  v4 = sub_22ED78310(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = (uint64_t)*a1;
  v6 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) != -1 || *(_QWORD *)(v2 + 16) != v6)
  {
    v8 = *(_DWORD *)(v2 + 24);
    v7 = *(_DWORD *)(v2 + 28);
    v9 = *(unsigned __int8 *)(v2 + 32);
    v14 = 0u;
    *(_OWORD *)v15 = 0u;
    v11 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(v5 + 88) + 15192), "isa", 3uLL);
    v12 = v8;
    sub_22EFC6D6C((uint64_t)&v13, v11);
    v2 = sub_22EC225CC(*a1, v6, *(_QWORD *)(v6 + 8), v7, v9, (uint64_t)&v14, 0, 0, (uint64_t)&v11, 0, 0, 0);
    if (HIDWORD(v15[1]))
      free(v15[0]);
  }
  return v2;
}

uint64_t sub_22ED8036C(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  unint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  void *v16[2];

  v2 = a2;
  v4 = sub_22ED78310(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *a1;
  v6 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(v5 + 11992) != -1 || *(_QWORD *)(v2 + 24) != v6)
  {
    v7 = *(_QWORD *)(v2 + 16);
    v8 = *(_DWORD *)(v2 + 32);
    v9 = *(_BYTE *)(v2 + 40);
    v15 = 0u;
    *(_OWORD *)v16 = 0u;
    v12 = *(_QWORD *)(v7 + 40);
    v13 = v8;
    sub_22EFC6D6C((uint64_t)&v14, v12);
    v10 = sub_22EC225CC((_QWORD *)v5, v6, *(_QWORD *)(v6 + 8), v8, v9 & 1, (uint64_t)&v15, 0, 0, (uint64_t)&v12, 0, 0, 0);
    v2 = v10;
    if ((v9 & 2) != 0 && v10 >= 2)
      *(_BYTE *)((v10 & 0xFFFFFFFFFFFFFFFELL) + 40) |= 2u;
    if (HIDWORD(v16[1]))
      free(v16[0]);
  }
  return v2;
}

uint64_t sub_22ED80468(uint64_t *a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  unint64_t *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  void *v37;
  char v38;
  void *v39;
  uint64_t v40;
  _BYTE v41[64];
  void *v42;
  uint64_t v43;
  _QWORD v44[10];

  v44[8] = *MEMORY[0x24BDAC8D0];
  v38 = 0;
  v42 = v44;
  v43 = 0x800000000;
  v4 = *(unsigned __int16 *)(a2 + 24);
  if (v4 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(unsigned __int16 *)(a2 + 24);
  }
  if ((sub_22ED836E0(a1, (unsigned __int8 **)(a2 + 48), v4, 0, (uint64_t)&v42, &v38) & 1) != 0)
    goto LABEL_27;
  v5 = *(_DWORD *)(a2 + 24);
  if (BYTE2(v5) - 2 >= 2)
  {
    if (BYTE2(v5))
    {
      if ((v5 & 0xFF0000) == 0x10000)
        v10 = *(_QWORD *)(a2 + 40);
      else
        v10 = 0;
      v11 = sub_22ED78310(a1, v10);
      if ((v11 & 1) != 0)
        goto LABEL_27;
      v12 = *a1;
      v13 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if (*(_DWORD *)(*a1 + 11992) != -1
        || (*(unsigned __int8 *)(a2 + 26) << 16 != 0x10000 ? (v14 = 0) : (v14 = *(_QWORD *)(a2 + 40)),
            v14 != v13 || v38))
      {
        v39 = v41;
        v40 = 0x1000000000;
        sub_22F3C78D4(a2, (uint64_t)&v39);
        v23 = (uint64_t *)(a2 + 16);
        if ((*(_BYTE *)(a2 + 27) & 1) != 0)
        {
          v24 = *v23;
          v23 = (uint64_t *)(*v23 + 40);
        }
        else
        {
          v24 = 0;
        }
        v25 = sub_22EC2DA20(*a1, v13, *(_QWORD *)(v13 + 8), 0, *v23, v24, *(_DWORD *)(a2 + 32), v22, (int *)v39, v40, *(unsigned int *)(a2 + 36), (uint64_t)v42, v43, 0);
LABEL_52:
        v20 = v25;
        v37 = v39;
        if (v39 == v41)
          goto LABEL_28;
        goto LABEL_53;
      }
    }
    else
    {
      if ((v5 & 0xFF0000) != 0)
        v9 = 0;
      else
        v9 = *(_QWORD *)(a2 + 40);
      v15 = sub_22ED73944(a1, v9);
      if (!v15)
        goto LABEL_27;
      v16 = (uint64_t *)v15;
      v12 = *a1;
      if (*(_DWORD *)(*a1 + 11992) != -1 || *(_BYTE *)(a2 + 26) || v16 != *(uint64_t **)(a2 + 40) || v38)
      {
        v39 = v41;
        v40 = 0x1000000000;
        sub_22F3C78D4(a2, (uint64_t)&v39);
        v18 = (uint64_t *)(a2 + 16);
        if ((*(_BYTE *)(a2 + 27) & 1) != 0)
        {
          v19 = *v18;
          v18 = (uint64_t *)(*v18 + 40);
        }
        else
        {
          v19 = 0;
        }
        v25 = sub_22EC2F730((_QWORD *)*a1, v16, *v16, 0, *v18, v19, *(_DWORD *)(a2 + 32), v17, (int *)v39, v40, *(unsigned int *)(a2 + 36), (unsigned __int8 **)v42, v43, 0, 0);
        goto LABEL_52;
      }
    }
    v20 = sub_22EBCC6C0(v12, a2);
    goto LABEL_28;
  }
  if ((v5 & 0x1000000) == 0 || (v6 = (unint64_t *)(a2 + 16), !*(_QWORD *)(a2 + 16)))
  {
LABEL_27:
    v20 = 1;
    goto LABEL_28;
  }
  v39 = v41;
  v40 = 0x1000000000;
  sub_22F3C78D4(a2, (uint64_t)&v39);
  v7 = *(_DWORD *)(a2 + 24);
  if ((v7 & 0xFE0000) == 0x20000)
    v8 = *(unsigned int *)(a2 + 28);
  else
    v8 = 0;
  v26 = (uint64_t *)(a2 + 16);
  if ((v7 & 0x1000000) != 0)
    v26 = (uint64_t *)(*v6 + 40);
  v27 = *v26;
  v28 = (int *)v39;
  v29 = v40;
  v30 = sub_22F3C7A10(a2);
  if ((v7 & 0x1000000) != 0)
    v32 = *v6;
  else
    v32 = 0;
  v33 = *(_DWORD *)(a2 + 32);
  v34 = *(unsigned int *)(a2 + 36);
  v35 = (_QWORD *)*a1;
  if ((*(_BYTE *)(v32 + 58) & 2) != 0)
    v36 = sub_22EC2DA20((uint64_t)v35, 0, v30, v8, v27, v32, v33, v31, v28, v29, v34, (uint64_t)v42, v43, 0);
  else
    v36 = sub_22EC2F730(v35, 0, v30, v8, v27, v32, v33, v31, v28, v29, v34, (unsigned __int8 **)v42, v43, 0, 0);
  v20 = v36;
  v37 = v39;
  if (v39 != v41)
LABEL_53:
    free(v37);
LABEL_28:
  if (v42 != v44)
    free(v42);
  return v20;
}

uint64_t sub_22ED80838(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  char v9;
  void *v10;
  uint64_t v11;
  _QWORD v12[9];

  v12[8] = *MEMORY[0x24BDAC8D0];
  v10 = v12;
  v11 = 0x800000000;
  v9 = 0;
  if ((sub_22ED836E0(a1, (unsigned __int8 **)(a2 + 40), *(_DWORD *)(a2 + 16), 0, (uint64_t)&v10, &v9) & 1) != 0)
  {
    v4 = 1;
  }
  else
  {
    v5 = (_QWORD *)*a1;
    if (*(_DWORD *)(*a1 + 11992) == -1 && v9 == 0)
      v7 = sub_22EBCC6C0((uint64_t)v5, a2);
    else
      v7 = sub_22EC28BF4(v5, *(_QWORD *)(a2 + 20), (uint64_t *)v10, v11);
    v4 = v7;
  }
  if (v10 != v12)
    free(v10);
  return v4;
}

uint64_t sub_22ED80920(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;

  v2 = a2;
  v4 = sub_22ED78310(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = (_BYTE *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  if (*((_DWORD *)*a1 + 2998) != -1 || *(_BYTE **)(v2 + 16) != v5)
    return sub_22EC27DFC(*a1, *(_QWORD *)(v2 + 32), v5);
  return v2;
}

uint64_t sub_22ED80988(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  _OWORD *v18;
  _OWORD *v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  _OWORD *v32;
  _OWORD *v33;
  __int128 v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int v40;
  _QWORD v41[2];
  int v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  void *v48;
  unint64_t v49;
  int v50;
  char v51;
  char v52;
  void *v53;
  uint64_t v54;
  _QWORD v55[34];

  v2 = a2;
  v55[32] = *MEMORY[0x24BDAC8D0];
  v53 = v55;
  v54 = 0x800000000;
  v4 = *(_DWORD *)(a2 + 16);
  v5 = 0;
  v6 = v4 & 0x7FFFFFFF;
  if ((v4 & 0x7FFFFFFF) != 0)
  {
    v7 = (uint64_t *)(a2 + 48);
    v8 = (unint64_t)&loc_22F44E000;
    v9 = a2;
    while (1)
    {
      v11 = *(v7 - 1);
      v10 = *v7;
      v12 = v8 & 0xFFFFFF00FFFFFF00;
      v13 = *(_DWORD *)(v2 + 16);
      if ((v13 & 0x80000000) == 0)
        goto LABEL_4;
      v21 = v9 + 16 * (v13 & 0x7FFFFFFF);
      v22 = *(_DWORD *)(v21 + 40);
      LODWORD(v21) = *(_DWORD *)(v21 + 44);
      v23 = v8 & 0xFFFFFF0000000000 | (v21 - 1) | 0x100000000;
      if ((_DWORD)v21)
        v12 = v23;
      if (!v22)
        break;
      v48 = &v50;
      v49 = 0x200000000;
      v24 = *a1;
      v46 = 7;
      v47 = v11;
      sub_22EE7377C(v24, (uint64_t)&v46, (uint64_t)&v48);
      v25 = *a1;
      v44 = 7;
      v45 = v10;
      sub_22EE7377C(v25, (uint64_t)&v44, (uint64_t)&v48);
      v26 = *a1;
      v40 = *(_DWORD *)(*a1 + 11992);
      *(_DWORD *)(*a1 + 11992) = -1;
      v27 = sub_22ED78310(a1, v11);
      if ((v27 & 1) != 0
        || ((v16 = v11 == (v27 & 0xFFFFFFFFFFFFFFFELL), v28 = v27 & 0xFFFFFFFFFFFFFFFELL, v16) ? (v29 = 0) : (v29 = 1),
            v5 |= v29,
            v30 = sub_22ED78310(a1, v10),
            (v30 & 1) != 0))
      {
        v31 = 0;
      }
      else
      {
        v41[0] = v28;
        v41[1] = v30 & 0xFFFFFFFFFFFFFFFELL;
        v5 |= v10 != (v30 & 0xFFFFFFFFFFFFFFFELL);
        v42 = v22;
        v43 = v12;
        v31 = 1;
        v32 = (_OWORD *)sub_22E78DF7C((uint64_t)&v53, (unint64_t)v41, 1);
        v33 = (char *)v53 + 32 * v54;
        v34 = v32[1];
        *v33 = *v32;
        v33[1] = v34;
        LODWORD(v54) = v54 + 1;
      }
      *(_DWORD *)(v26 + 11992) = v40;
      v2 = a2;
      if (v48 != &v50)
        free(v48);
      if (!v31)
      {
LABEL_32:
        v37 = 1;
        goto LABEL_35;
      }
LABEL_26:
      v9 += 8;
      v7 += 2;
      v8 = v12;
      if (!--v6)
        goto LABEL_29;
    }
    v2 = a2;
LABEL_4:
    v14 = sub_22ED78310(a1, *(v7 - 1));
    if ((v14 & 1) != 0)
      goto LABEL_32;
    v15 = sub_22ED78310(a1, v10);
    if ((v15 & 1) != 0)
      goto LABEL_32;
    v16 = v10 == (v15 & 0xFFFFFFFFFFFFFFFELL) && v11 == (v14 & 0xFFFFFFFFFFFFFFFELL);
    v48 = (void *)(v14 & 0xFFFFFFFFFFFFFFFELL);
    v49 = v15 & 0xFFFFFFFFFFFFFFFELL;
    v17 = !v16;
    v50 = 0;
    v5 |= v17;
    v51 = 0;
    v52 = 0;
    v18 = (_OWORD *)sub_22E78DF7C((uint64_t)&v53, (unint64_t)&v48, 1);
    v19 = (char *)v53 + 32 * v54;
    v20 = v18[1];
    *v19 = *v18;
    v19[1] = v20;
    LODWORD(v54) = v54 + 1;
    goto LABEL_26;
  }
LABEL_29:
  v35 = (_QWORD *)*a1;
  if (*(_DWORD *)(*a1 + 11992) != -1 || (v5 & 1) != 0)
    v36 = sub_22EC297B0(v35, *(_QWORD *)(v2 + 20), (uint64_t)v53, v54);
  else
    v36 = sub_22EBCC6C0((uint64_t)v35, v2);
  v37 = v36;
LABEL_35:
  if (v53 != v55)
    free(v53);
  return v37;
}

uint64_t sub_22ED80C84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  void *v21[2];

  v2 = a2;
  v3 = *(_QWORD *)(a2 + 40);
  if ((v3 & 6) == 0)
  {
    v5 = sub_22ED78310(a1, v3 & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 1) != 0)
    {
      return 1;
    }
    else
    {
      v6 = *(_QWORD **)a1;
      v7 = *(_DWORD *)(*(_QWORD *)a1 + 11992);
      v8 = v5 & 0xFFFFFFFFFFFFFFFELL;
      if (v7 != -1 || v8 != (*(_QWORD *)(v2 + 40) & 0xFFFFFFFFFFFFFFF8))
      {
        v9 = *(_QWORD *)(v2 + 16);
        if ((v9 & 4) != 0)
        {
          v12 = v6[11];
          v13 = *(_QWORD *)(v12 + 16872);
          v14 = v9 & 0xFFFFFFFFFFFFFFF8;
          v15 = *(_QWORD *)(v2 + 24) & 0xFFFFFFFFFFFFFFF8;
          v16 = *(_DWORD *)(v2 + 32);
          v2 = sub_22E3CD3D4(v12 + 2032, 48, 3);
          sub_22F2F4590(v2, v14, v15, v13, 1, 3, v16, v8);
        }
        else
        {
          v10 = *(_DWORD *)(v2 + 32);
          v20 = 0u;
          *(_OWORD *)v21 = 0u;
          v17 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 40);
          v18 = v10;
          sub_22EFC6D6C((uint64_t)&v19, v17);
          v2 = sub_22EC225CC(v6, v8, *(_QWORD *)(v8 + 8), v10, 0, (uint64_t)&v20, 0, 0, (uint64_t)&v17, 0, 0, 0);
          if (HIDWORD(v21[1]))
            free(v21[0]);
        }
      }
    }
  }
  return v2;
}

uint64_t sub_22ED80DC4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = a2;
  v4 = sub_22ED78310(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ED78310(a1, *(_QWORD *)(v2 + 32));
  if ((v5 & 1) != 0)
    return 1;
  v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(_QWORD *)(v2 + 32) != v6
    || *(_QWORD *)(v2 + 24) != (v4 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22F3341E8(*a1, *(_DWORD *)(v2 + 16), v4 & 0xFFFFFFFFFFFFFFFELL, v6, *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
  }
  return v2;
}

uint64_t sub_22ED80E64(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  char v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  __int128 v19;
  uint64_t v21;
  char v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  _QWORD v26[14];

  v2 = a2;
  v26[12] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22ED73944(a1, *(_QWORD *)(a2 + 24));
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v24 = v26;
  v25 = 0x400000000;
  v6 = *(unsigned int *)(v2 + 32);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = 0;
    v9 = (unint64_t *)(v2 + 48);
    while (1)
    {
      v22 = 1;
      v21 = *(v9 - 1);
      v10 = *v9;
      v11 = *v9 & 3;
      if ((v11 - 1) >= 2)
      {
        if ((_DWORD)v11 != 3)
        {
          v15 = *(_QWORD *)(v2 + 40 + 16 * *(unsigned int *)(v2 + 32) + 8 * (v10 >> 2));
          v16 = sub_22ED78310(a1, v15);
          if ((v16 & 1) != 0)
          {
            v2 = 1;
            goto LABEL_21;
          }
          v8 |= v15 != (v16 & 0xFFFFFFFFFFFFFFFELL);
          v22 = 1;
          v23 = v16 & 0xFFFFFFFFFFFFFFFELL;
          goto LABEL_13;
        }
      }
      else
      {
        v22 = 0;
        v12 = v10 & 3;
        v13 = v10 & 0xFFFFFFFFFFFFFFFCLL;
        if (v12 != 1)
          goto LABEL_8;
        v14 = *(_QWORD *)(v13 + 40);
        if ((v14 & 7) == 0)
        {
          v13 = v14 & 0xFFFFFFFFFFFFFFF8;
LABEL_8:
          v23 = v13;
          if (!v13)
            goto LABEL_14;
LABEL_13:
          v17 = sub_22E4EF088((uint64_t)&v24, (unint64_t)&v21, 1);
          v18 = (char *)v24 + 24 * v25;
          v19 = *(_OWORD *)v17;
          *((_QWORD *)v18 + 2) = *(_QWORD *)(v17 + 16);
          *(_OWORD *)v18 = v19;
          v7 = v25 + 1;
          LODWORD(v25) = v25 + 1;
        }
      }
LABEL_14:
      v9 += 2;
      if (!--v6)
        goto LABEL_18;
    }
  }
  v7 = 0;
  v8 = 0;
LABEL_18:
  if (*(_DWORD *)(*a1 + 11992) != -1 || (v5 != *(uint64_t **)(v2 + 24)) | v8 & 1)
    v2 = sub_22EB49A78(*a1, *(_DWORD *)(v2 + 16), v5, (unsigned int *)v24, v7, *(_DWORD *)(v2 + 20));
LABEL_21:
  if (v24 != v26)
    free(v24);
  return v2;
}

uint64_t sub_22ED81068(uint64_t a1, _QWORD *a2)
{
  void **v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 32), a2);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = 48;
  if (v5 == *(_QWORD *)(a1 + 32))
    v6 = 52;
  if (v4 == (void **)(v5 + 8 * *(unsigned int *)(a1 + v6)))
    return (uint64_t)a2;
  else
    return sub_22ED78310(a1, a2[2]);
}

uint64_t sub_22ED810CC(uint64_t *a1, unsigned int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  __int128 v25;
  void *v26[2];
  uint64_t v27;
  void *v28[2];
  _DWORD v29[66];
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _BYTE v33[64];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unsigned int v39;
  _QWORD v40[3];
  __int16 v41;
  int v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)*a1;
  v5 = *((_QWORD *)a2 + 2);
  v6 = a2[6];
  v30 = 0;
  v31 = v33;
  v32 = 0x800000000;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = v4;
  v38 = v5;
  v39 = v6;
  sub_22EFC6D6C((uint64_t)v40, v5);
  v40[1] = 0;
  v40[2] = 0;
  v41 = 0;
  v42 = 257;
  v43 = 0;
  sub_22EC56024((uint64_t)&v30);
  if ((sub_22E8CA788((uint64_t)a1, (unsigned __int8 *)a2, (*a2 & 0x80000) != 0, (uint64_t)&v30) & 1) != 0)
  {
    v7 = 1;
    goto LABEL_36;
  }
  v25 = 0u;
  *(_OWORD *)v26 = 0u;
  v8 = *((_QWORD *)a2 + 5);
  if (v8)
  {
    v9 = sub_22ED89638(a1, v8, *((void **)a2 + 6), 0, 0);
    if (!v9)
    {
      v7 = 1;
      goto LABEL_34;
    }
    sub_22E8ACE30((uint64_t)&v25, v9, v10);
  }
  v11 = *((_QWORD *)a2 + 7);
  if (v11)
  {
    v27 = *((_QWORD *)a2 + 7);
    v28[0] = 0;
    if (sub_22E793870(a1 + 1, &v27, v28))
    {
      if (v28[0] != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
      {
        v11 = *((_QWORD *)v28[0] + 1);
        if (!v11)
        {
          LODWORD(v30) = 0;
          LODWORD(v32) = 0;
          if (v34)
          {
            v22 = sub_22EC6CBD0(v34);
            MEMORY[0x2348A0E9C](v22, 0x10E0C409F09D3C3);
          }
          HIBYTE(v42) = 0;
          v7 = 1;
          v34 = 0;
          v35 = 0;
          goto LABEL_34;
        }
      }
    }
    v35 = v11;
  }
  v12 = *a2;
  if ((v12 & 0x40000) != 0)
  {
    v13 = a2[1];
    v14 = (uint64_t)(*a2 == 211 ? a2 + 16 : a2 + 20);
    v15 = (int *)(v14 + 8 * v13);
    v16 = v15[2];
    v17 = *v15;
    if (*v15 | v16)
    {
      v18 = v15[1];
      v28[0] = v29;
      v28[1] = (void *)0x800000000;
      v29[64] = v17;
      v29[65] = v18;
      if (v17)
      {
        if ((sub_22ED90408((uint64_t)a1, v14 + 8 * v13 + 16 * ((v12 >> 18) & 1), v14 + 8 * v13 + 16 * ((v12 >> 18) & 1) + 32 * *(unsigned int *)(v14 + 8 * v13 + 12)) & 1) != 0)
        {
          LODWORD(v30) = 0;
          LODWORD(v32) = 0;
          if (v34)
          {
            v19 = sub_22EC6CBD0(v34);
            MEMORY[0x2348A0E9C](v19, 0x10E0C409F09D3C3);
          }
          HIBYTE(v42) = 0;
          v7 = 1;
          v34 = 0;
          v35 = 0;
          goto LABEL_48;
        }
        LODWORD(v12) = *a2;
      }
      v7 = sub_22ED66318((_QWORD *)*a1, (uint64_t)&v25, v16, (uint64_t)&v30, (v12 >> 19) & 1, (uint64_t)v28);
LABEL_48:
      if (v28[0] != v29)
        free(v28[0]);
      goto LABEL_34;
    }
  }
  if ((_DWORD)v30 != 2)
    goto LABEL_32;
  v20 = *v31 & 0xFFFFFFFFFFFFFFFCLL;
  if ((*(_DWORD *)(v20 + 28) & 0x7Fu) <= 0x2F && ((1 << (*(_DWORD *)(v20 + 28) & 0x7F)) & 0xC00000060000) != 0)
  {
    v20 = sub_22EFBAEA4(v20);
    if (!v20)
      goto LABEL_32;
  }
  if (!sub_22EFBAEF8(v20))
  {
    LODWORD(v12) = *a2;
LABEL_32:
    v21 = sub_22EB235A8((_QWORD *)*a1, (uint64_t)&v25, (uint64_t)&v30, (v12 >> 19) & 1, 0);
    goto LABEL_33;
  }
  v21 = sub_22EC21A04(*a1, (uint64_t *)&v25, 0, (uint64_t)&v30, 0, 0, 0);
LABEL_33:
  v7 = v21;
LABEL_34:
  if (HIDWORD(v26[1]))
    free(v26[0]);
LABEL_36:
  if (BYTE1(v42))
  {
    if ((_DWORD)v30 == 5)
    {
      sub_22EC64D18(v37, (uint64_t)&v30);
    }
    else if (v35 && (*(_DWORD *)(v37[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v37, (uint64_t)&v30);
    }
  }
  if (v34)
  {
    v24 = sub_22EC6CBD0(v34);
    MEMORY[0x2348A0E9C](v24, 0x10E0C409F09D3C3);
  }
  if (v31 != (_QWORD *)v33)
    free(v31);
  return v7;
}

uint64_t sub_22ED81494(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void **v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  void *v35[2];
  void *v36[2];
  _BYTE v37[256];
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  _BYTE v42[64];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v51;
  int v52;
  char v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)a2 + 7);
  if (v4 && (sub_22EFFFB48(*((unsigned __int8 **)a2 + 7)) & 1) == 0)
  {
    v12 = sub_22ED78310(a1, v4);
    if ((v12 & 1) != 0)
      return 1;
    v13 = sub_22EC2624C(*(_QWORD *)a1, (_QWORD *)(v12 & 0xFFFFFFFFFFFFFFFELL), (*a2 >> 19) & 1);
    v6 = v13;
    if ((v13 & 1) != 0)
      return 1;
    v5 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    v5 = sub_22ED8368C(a1, *((_QWORD *)a2 + 8));
    v6 = 0;
  }
  v7 = *((_QWORD *)a2 + 5);
  if (v7)
  {
    v8 = sub_22ED89638((uint64_t *)a1, v7, *((void **)a2 + 6), 0, 0);
    if (v8)
    {
      v10 = v8;
      v11 = v9;
      goto LABEL_12;
    }
    return 1;
  }
  v10 = 0;
  v11 = 0;
LABEL_12:
  if ((*a2 & 0x40000) != 0)
  {
    if (*a2 == 211)
      v16 = a2 + 16;
    else
      v16 = a2 + 20;
    v15 = v16[2 * a2[1] + 2];
  }
  else
  {
    v15 = 0;
  }
  v17 = *(_QWORD **)a1;
  v39 = 0;
  v40 = v42;
  v41 = 0x800000000;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = v17;
  v47 = *((_OWORD *)a2 + 1);
  v18 = *((_QWORD *)a2 + 4);
  v50 = 0;
  v48 = v18;
  v49 = 0;
  v51 = 0;
  v52 = 257;
  v53 = 0;
  sub_22EC56024((uint64_t)&v39);
  if ((sub_22E8CA788(a1, (unsigned __int8 *)a2, 0, (uint64_t)&v39) & 1) == 0)
  {
    if (sub_22F0621BC((uint64_t)a2))
    {
      v19 = sub_22F0621BC((uint64_t)a2);
      *(_QWORD *)&v34 = v19;
      v36[0] = 0;
      if (sub_22E793870((uint64_t *)(a1 + 8), &v34, v36)
        && v36[0] != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
      {
        v19 = *((_QWORD *)v36[0] + 1);
      }
      if (!v19)
        goto LABEL_19;
      v44 = v19;
    }
    v36[0] = v37;
    v36[1] = (void *)0x800000000;
    v38 = 0;
    v20 = *a2;
    if ((v20 & 0x40000) == 0)
    {
      v33 = v5;
      v21 = 0;
      v22 = v6 & 0xFFFFFFFFFFFFFFFELL;
      v23 = a2[18];
      v24 = (v20 >> 19) & 1;
      goto LABEL_43;
    }
    v25 = *a2;
    v26 = a2[1];
    if (v25 == 211)
      v27 = a2 + 16;
    else
      v27 = a2 + 20;
    v28 = &v27[2 * v26];
    if (*v28)
    {
      v38 = *(_QWORD *)v28;
      if ((sub_22ED90408(a1, (uint64_t)&v28[4 * ((v20 >> 18) & 1)], (uint64_t)&v28[8 * v27[2 * v26 + 3] + 4 * ((v20 >> 18) & 1)]) & 1) != 0)
      {
        v14 = 1;
LABEL_45:
        if (v36[0] != v37)
          free(v36[0]);
        goto LABEL_47;
      }
      v22 = v6 & 0xFFFFFFFFFFFFFFFELL;
      v23 = a2[18];
      v24 = (*a2 >> 19) & 1;
      v33 = v5;
      if ((*a2 & 0x40000) == 0)
      {
        v21 = 0;
LABEL_43:
        v30 = v23;
        v34 = 0u;
        *(_OWORD *)v35 = 0u;
        sub_22E8ACE30((uint64_t)&v34, v10, v11);
        v14 = sub_22EC24AB8(*(_QWORD *)a1, v22, v33, v30, v24, (uint64_t *)&v34, v15, 0, (uint64_t)&v39, (uint64_t)v21, 0, 0, 0);
        if (HIDWORD(v35[1]))
          free(v35[0]);
        goto LABEL_45;
      }
      v25 = *a2;
      v26 = a2[1];
    }
    else
    {
      v33 = v5;
      v22 = v6 & 0xFFFFFFFFFFFFFFFELL;
      v23 = a2[18];
      v24 = (v20 >> 19) & 1;
    }
    v29 = a2 + 16;
    if (v25 != 211)
      v29 = a2 + 20;
    if (v29[2 * v26])
      v21 = v36;
    else
      v21 = 0;
    goto LABEL_43;
  }
LABEL_19:
  v14 = 1;
LABEL_47:
  if (BYTE1(v52))
  {
    if ((_DWORD)v39 == 5)
    {
      sub_22EC64D18(v46, (uint64_t)&v39);
    }
    else if (v44 && (*(_DWORD *)(v46[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v46, (uint64_t)&v39);
    }
  }
  if (v43)
  {
    v32 = sub_22EC6CBD0(v43);
    MEMORY[0x2348A0E9C](v32, 0x10E0C409F09D3C3);
  }
  if (v40 != v42)
    free(v40);
  return v14;
}

uint64_t sub_22ED818A0(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  v2 = a2;
  v4 = sub_22ED78310(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) == -1 && *(_QWORD *)(v2 + 24) == v5)
    return v2;
  v6 = *(_DWORD *)(v2 + 20);
  v7 = v6 != 0;
  v8 = v6 != 0;
  LODWORD(v9) = v6 - 1;
  if (v8)
    v9 = v9;
  else
    v9 = 0;
  return sub_22EE739C0(*a1, v5, *(_DWORD *)(v2 + 16), v9 | (v7 << 32));
}

unint64_t sub_22ED8191C(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = a2;
  v4 = sub_22ED78310(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) != -1 || *(_QWORD *)(v2 + 24) != v5)
    return sub_22EB27A20(*a1, *(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 20), v5);
  return v2;
}

uint64_t sub_22ED81984(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  unsigned int v6;
  int v7;
  int v8;
  char v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  v10 = 0;
  v11 = v13;
  v12 = 0x400000000;
  v4 = 1;
  if ((sub_22ED836E0(a1, (unsigned __int8 **)(a2 + 24), *(_DWORD *)(a2 + 4), 1, (uint64_t)&v11, &v10) & 1) == 0)
  {
    v5 = (uint64_t *)v11;
    v6 = v12;
    v8 = *(_DWORD *)(a2 + 16);
    v7 = *(_DWORD *)(a2 + 20);
    v4 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 8 * v12 + 24, 3);
    sub_22F002D50(v4, v8, v5, v6, v7);
  }
  if (v11 != v13)
    free(v11);
  return v4;
}

uint64_t sub_22ED81A80(uint64_t *a1, uint64_t a2)
{
  unsigned __int8 *v3;
  uint64_t result;
  uint64_t v5;
  BOOL v6;

  v3 = sub_22ED28410((_QWORD *)*a1, a2);
  result = sub_22ED78310(a1, v3);
  if ((result & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(*(_QWORD *)((result & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v5)
    v6 = (*(_DWORD *)(v5 + 16) & 0xFF800FF) == 137363467;
  else
    v6 = 0;
  if (v6)
    return sub_22ED26924(*a1, (unsigned __int8 *)(result & 0xFFFFFFFFFFFFFFFELL));
  return result;
}

uint64_t sub_22ED81AF8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  _QWORD v15[9];

  v15[8] = *MEMORY[0x24BDAC8D0];
  v14 = 0;
  v4 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = (_QWORD *)(a2 + 32);
    v7 = 8 * v4;
    v8 = 1;
    while (1)
    {
      v9 = *v6;
      v10 = sub_22ED78310(a1, *v6);
      if ((v10 & 1) != 0)
        break;
      v11 = v14;
      if (v14 >= 8uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v14;
      }
      v15[v11] = v10 & 0xFFFFFFFFFFFFFFFELL;
      v12 = ++v14;
      v5 |= v9 != (v10 & 0xFFFFFFFFFFFFFFFELL);
      ++v6;
      v7 -= 8;
      if (!v7)
        goto LABEL_9;
    }
  }
  else
  {
    v12 = 0;
    v5 = 0;
LABEL_9:
    if (*(_DWORD *)(*a1 + 11992) != -1 || (v5 & 1) != 0)
      return sub_22F32D6EC(*a1, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), v15, v12, *(_QWORD *)(a2 + 8));
    else
      return a2;
  }
  return v8;
}

uint64_t sub_22ED81C5C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int **v26;
  uint64_t v27;
  int *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  BOOL v39;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  int v62;
  int v63;
  void *v64;
  uint64_t v65;
  _BYTE v66[32];
  void *v67;
  __int128 v68;
  _BYTE v69[24];
  void *v70[2];
  _BYTE v71[32];
  uint64_t *v72;
  uint64_t v73;
  _QWORD v74[6];

  v74[4] = *MEMORY[0x24BDAC8D0];
  v72 = v74;
  v73 = 0x400000000;
  v70[0] = v71;
  v70[1] = (void *)0x400000000;
  v67 = v69;
  v68 = xmmword_22F44E350;
  v69[16] = 0;
  v4 = *a1;
  v64 = 0;
  v62 = 3;
  v63 = 0;
  v60 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v63, (int *)&v60, (__int16 *)(v4 + 1693), (uint64_t *)&v64, &v62);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  v11 = *(_QWORD *)(*a1 + 88);
  v12 = *(_QWORD *)(*a1 + 216);
  v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 16))(*(_QWORD *)(a2 + 24));
  v14 = sub_22F3B1F5C(v11, v12, v13);
  v15 = v14;
  v16 = *a1;
  if (v14)
    v17 = v14 + 40;
  else
    v17 = 0;
  v18 = *(_QWORD *)(v16 + 216);
  v19 = *(_QWORD *)(v16 + 3200);
  *(_QWORD *)(v16 + 3200) = 0;
  v58 = *(_QWORD *)(v16 + 10288);
  v59 = v19;
  v56 = *(_DWORD *)(v16 + 2192);
  v57 = *(_DWORD *)(v16 + 1944);
  v55 = v17;
  *(_QWORD *)(v16 + 216) = v17;
  *(_DWORD *)(v16 + 1944) = *(_DWORD *)(v16 + 1904);
  *(_DWORD *)(v16 + 2192) = *(_DWORD *)(v16 + 1960);
  if ((sub_22ED83E90(a1, a2 + 40, *(_DWORD *)(a2 + 16), 0, 0, (uint64_t)v70, (uint64_t)&v72, (uint64_t)&v67) & 1) != 0)
  {
    v20 = 1;
    goto LABEL_64;
  }
  if ((_DWORD)v73)
  {
    v21 = v72;
    v22 = 8 * v73;
    do
    {
      v23 = *v21++;
      *(_QWORD *)(v23 + 16) = v55 & 0xFFFFFFFFFFFFFFFBLL;
      v22 -= 8;
    }
    while (v22);
  }
  v64 = v66;
  v65 = 0x400000000;
  v24 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v24)
  {
    v54 = v18;
    LODWORD(v25) = 0;
    v26 = (int **)(a2 + 40 + 8 * *(unsigned int *)(a2 + 16));
    v27 = 8 * v24;
    v20 = 1;
    while (1)
    {
      v28 = *v26;
      v29 = **v26;
      if (v29)
      {
        if ((v29 - 3) >= 0xFFFFFFFE)
        {
          v34 = *((_QWORD *)v28 + 1) & 0xFFFFFFFFFFFFFFFCLL;
          if (v28[10] == 1)
          {
            v35 = v34 | 2;
          }
          else
          {
            v37 = sub_22ED78310(a1, v34);
            if (v37 >= 2)
            {
              v38 = *(_QWORD *)(*(_QWORD *)((v37 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0);
              v39 = (*(_DWORD *)(v38 + 16) & 0xFE00000u) < 0x8180001 || v38 == 0;
              if (!v39 && *(_DWORD *)(v38 + 16) == 11)
                v37 = sub_22EB19A28(*a1, (_DWORD *)(v37 & 0xFFFFFFFFFFFFFFFELL));
            }
            if ((v37 & 1) != 0)
            {
LABEL_61:
              v18 = v54;
              goto LABEL_62;
            }
            v35 = v37 & 0xFFFFFFFFFFFFFFFCLL;
          }
          LOBYTE(v60) = 0;
          v61 = 0;
          v41 = *((_QWORD *)v28 + 3);
          if (v41 > 7)
          {
            v43 = v41 & 0xFFFFFFFFFFFFFFF8;
            if ((v41 & 4) != 0)
            {
              v42 = v43 | 4;
              v60 = v43 | 4;
            }
            else
            {
              if (!v43)
              {
                v28 = 0;
                goto LABEL_53;
              }
              sub_22F31A5DC((unint64_t *)&v60, v43);
              v42 = v60;
            }
          }
          else
          {
            v42 = 0;
            v60 = 0;
          }
          v61 = 1;
          v44 = v35 & 0xFFFFFFFFFFFFFFFCLL;
          v45 = *v28;
          v46 = v28[4];
          v47 = *a1;
          if ((v35 & 2) != 0 || !v44)
            v32 = sub_22F332740(v47, v44, v45 == 1, v46, v42);
          else
            v32 = sub_22EBCF54C(v47, v44, v45 == 1, v46, v42);
          goto LABEL_52;
        }
        v30 = *((_QWORD *)v28 + 1);
        if ((v30 & 2) == 0)
        {
          v31 = sub_22ED78310(a1, v30 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v31 & 1) != 0)
            goto LABEL_61;
          v32 = sub_22F3327E4(*a1, v31 & 0xFFFFFFFFFFFFFFFELL);
LABEL_52:
          v28 = (int *)v32;
LABEL_53:
          if (!v28)
            goto LABEL_61;
          goto LABEL_54;
        }
        if (*(_DWORD *)(*a1 + 11992) != -1)
        {
          v33 = sub_22F332940(*a1, v30 & 0xFFFFFFFFFFFFFFFCLL);
          goto LABEL_28;
        }
      }
      else
      {
        if (v28[4] != 1)
        {
          v36 = sub_22ED73944(a1, *((_QWORD *)v28 + 1) & 0xFFFFFFFFFFFFFFF8);
          if (!v36)
            goto LABEL_61;
          v33 = sub_22F3325E4(*a1, v36);
LABEL_28:
          v28 = (int *)v33;
LABEL_54:
          LODWORD(v25) = v65;
          goto LABEL_55;
        }
        if (*(_DWORD *)(*a1 + 11992) != -1)
        {
          v33 = sub_22F332794(*a1, *((_QWORD *)v28 + 1) & 0xFFFFFFFFFFFFFFF8);
          goto LABEL_28;
        }
      }
LABEL_55:
      if (v25 >= HIDWORD(v65))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        LODWORD(v25) = v65;
      }
      *((_QWORD *)v64 + v25) = v28;
      v25 = (v65 + 1);
      LODWORD(v65) = v65 + 1;
      ++v26;
      v27 -= 8;
      if (!v27)
      {
        v49 = (char *)v64;
        if ((_DWORD)v25)
        {
          v50 = 0;
          v18 = v54;
          do
          {
            v51 = *(_QWORD *)&v49[v50];
            if ((*(_DWORD *)v51 - 3) >= 0xFFFFFFFE)
            {
              v52 = *(_QWORD *)(v51 + 24);
              if (v52 >= 8 && (v52 & 4) == 0)
                *(_QWORD *)(*(_QWORD *)((v52 & 0xFFFFFFFFFFFFFFF8) + 16) + 16) = v55 & 0xFFFFFFFFFFFFFFFBLL;
            }
            v50 += 8;
          }
          while (8 * v25 != v50);
        }
        else
        {
          v25 = 0;
          v18 = v54;
        }
        goto LABEL_74;
      }
    }
  }
  v25 = 0;
  v49 = v66;
LABEL_74:
  v20 = (uint64_t)sub_22F3C4144(*(_QWORD *)(*a1 + 88), *(_DWORD *)(a2 + 4), v15, v72, v73, v49, v25, *(_DWORD *)(a2 + 32));
LABEL_62:
  if (v64 != v66)
    free(v64);
LABEL_64:
  if (v18)
  {
    *(_QWORD *)(v16 + 216) = v18;
    *(_QWORD *)(v16 + 3200) = v59;
    *(_QWORD *)(v16 + 10288) = v58;
    *(_DWORD *)(v16 + 1944) = v57;
    *(_DWORD *)(v16 + 2192) = v56;
  }
  sub_22EB48E64(v4);
  if (v67 != v69)
    free(v67);
  if (v70[0] != v71)
    free(v70[0]);
  if (v72 != v74)
    free(v72);
  return v20;
}

uint64_t sub_22ED82230(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = a2;
  if ((*(_BYTE *)(a2 + 1) & 0x80) != 0)
  {
    v4 = sub_22ED73944(a1, *(_QWORD *)(a2 + 32));
    if (v4)
    {
      if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1 || *(_QWORD *)(v2 + 32) != v4)
        return sub_22F3C109C(*(_QWORD *)(*(_QWORD *)a1 + 88), *(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 20), *(_DWORD *)(v2 + 24), v4);
    }
    else
    {
      return 1;
    }
  }
  return v2;
}

uint64_t sub_22ED822A4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  void *v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;
  char v24;
  unsigned int *v25;
  char v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  _QWORD v31[9];

  v2 = a2;
  v31[8] = *MEMORY[0x24BDAC8D0];
  v27 = 0;
  v29 = v31;
  v30 = 0x800000000;
  v4 = *(_DWORD *)(a2 + 32);
  if (v4 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v2 + 32);
  }
  if ((sub_22ED836E0(a1, *(unsigned __int8 ***)(v2 + 24), v4, 0, (uint64_t)&v29, &v27) & 1) != 0)
  {
    v2 = 1;
  }
  else if (*(_DWORD *)(*a1 + 11992) != -1 || v27 != 0)
  {
    v6 = v29;
    v7 = v30;
    v9 = *(_DWORD *)(v2 + 16);
    v8 = *(_DWORD *)(v2 + 20);
    v10 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(*a1 + 88) + 15192), "__builtin_shufflevector", 0x17uLL);
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 88) + 1960) + 80);
    v12 = sub_22E3CD31C((uint64_t *)(v11 + 72), v11);
    v13 = sub_22EFCE144(v12 + 40, v10);
    v14 = (_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF8);
    if ((v13 & 4) != 0 && v14)
      v14 = (_QWORD *)*v14;
    v15 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 32, 3);
    v16 = *(_QWORD *)(*a1 + 88);
    v17 = *(_QWORD *)(v16 + 16864);
    v28 = 0;
    sub_22EFF69F0(v15, v16, (uint64_t)v14, 0, v17, 0, v9, &v28, 0);
    v18 = sub_22EF5B848(*(_QWORD *)(*a1 + 88), v14[6], 0);
    v19 = sub_22E90092C(*a1, v15, v18, 64, 0, 0);
    v20 = *(_QWORD *)(*a1 + 88);
    v21 = sub_22E8BBA74((unint64_t)v14);
    v22 = *(_QWORD *)(v14[6] & 0xFFFFFFFFFFFFFFF0);
    if (v22)
      v23 = *(unsigned __int8 *)(v22 + 16) - 27 > 0xFFFFFFFD;
    else
      v23 = 0;
    if (!v23)
      v22 = sub_22F10CF48(v22);
    v24 = sub_22E8BBBD0(*(_QWORD *)(v22 + 24));
    v25 = sub_22EFFA488(v20, v19 & 0xFFFFFFFFFFFFFFFELL, (uint64_t)v6, v7, v21, v24, v8, 0, 0, 0);
    v2 = sub_22E97915C((_QWORD *)*a1, (unsigned int *)((unint64_t)v25 & 0xFFFFFFFFFFFFFFFELL));
  }
  if (v29 != v31)
    free(v29);
  return v2;
}

uint64_t sub_22ED82508(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v30;
  char v31;
  unsigned __int8 **v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  __int128 v36;
  uint64_t v37;
  int v38;
  BOOL v39;
  BOOL v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  void *v51;
  __int128 v52;
  uint64_t v53;
  int v54;
  char v55;
  int v56;
  void *v57[2];
  _QWORD v58[24];
  void *v59;
  __int128 v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;

  v2 = a2;
  v64 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 2) & 1) == 0)
    return v2;
  v4 = *a1;
  v54 = 0;
  v59 = 0;
  v56 = 3;
  v57[0] = (void *)*(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v54, (int *)v57, (__int16 *)(v4 + 1693), (uint64_t *)&v59, &v56);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  if ((*(_BYTE *)(v2 + 2) & 1) == 0 || (v11 = *(unsigned int *)(v2 + 28), !(_DWORD)v11))
  {
    v22 = *(void **)(v2 + 32);
    v57[0] = v22;
    v59 = 0;
    if (sub_22E793870(a1 + 1, v57, &v59) && v59 != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
      v22 = (void *)*((_QWORD *)v59 + 1);
    if (v22)
    {
      v24 = *(_DWORD *)(v2 + 16);
      v25 = *(_DWORD *)(v2 + 20);
      v26 = *(_DWORD *)(v2 + 24);
      v28 = *(_QWORD *)(*a1 + 88);
      v23 = (uint64_t)v22;
      v27 = 0;
      goto LABEL_27;
    }
LABEL_29:
    v2 = 1;
    goto LABEL_30;
  }
  v12 = 0;
  v13 = 3 * v11;
  v48 = v2 + 40 + 8 * v13;
  v14 = 8 * v13;
  v15 = v2 + 40;
  while (1)
  {
    v16 = *(_DWORD *)v15;
    if (*(_DWORD *)v15 == 1)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
        goto LABEL_17;
    }
    else if (v16 == 7)
    {
      if (**(unsigned __int8 **)(v15 + 8) != 213)
        goto LABEL_17;
    }
    else if (((1 << v16) & 0x13D) != 0)
    {
LABEL_17:
      ++v12;
      goto LABEL_18;
    }
    sub_22EDC0108(*a1, v15, 0, (uint64_t)&v59);
    v56 = 0;
    LOBYTE(v54) = 0;
    v55 = 0;
    v17 = *a1;
    v51 = v59;
    v52 = v60;
    v53 = v61;
    sub_22EE7465C(v17, (uint64_t)&v51);
    LODWORD(v57[0]) = 0;
    v57[1] = 0;
    v18 = *a1;
    v19 = *(_DWORD *)(*a1 + 11992);
    *(_DWORD *)(*a1 + 11992) = -1;
    if (sub_22ED8AAD0(a1, (uint64_t)&v59, (uint64_t)v57, 1))
    {
      *(_DWORD *)(v18 + 11992) = v19;
      goto LABEL_29;
    }
    v20 = *a1;
    v49 = *(_OWORD *)v57;
    v50 = v58[0];
    v21 = sub_22EE74920(v20, (unsigned int *)&v49);
    if ((v21 & 0xFF00000000) == 0)
      break;
    v12 += v21;
    *(_DWORD *)(v18 + 11992) = v19;
LABEL_18:
    v15 += 24;
    v14 -= 24;
    if (!v14)
    {
      v23 = *(_QWORD *)(v2 + 32);
      v24 = *(_DWORD *)(v2 + 16);
      v25 = *(_DWORD *)(v2 + 20);
      v26 = *(_DWORD *)(v2 + 24);
      v27 = v12 | 0x100000000;
      v28 = *(_QWORD *)(*a1 + 88);
LABEL_27:
      v2 = sub_22F0622F8(v28, v24, v23, v25, v26, v27, 0, 0);
      goto LABEL_30;
    }
  }
  *(_DWORD *)(v18 + 11992) = v19;
  v30 = *(_DWORD *)(v2 + 20);
  v59 = (char *)&v60 + 8;
  *(_QWORD *)&v60 = 0x800000000;
  v62 = v30;
  v63 = v30;
  if ((sub_22ED8A7EC((uint64_t)a1, a1, v2 + 40, (uint64_t)a1, v48) & 1) != 0)
  {
    v2 = 1;
    goto LABEL_52;
  }
  v57[0] = v58;
  v57[1] = (void *)0x800000000;
  if (!(_DWORD)v60)
  {
    LODWORD(v37) = 0;
    goto LABEL_49;
  }
  v31 = 0;
  v32 = (unsigned __int8 **)v59;
  v33 = 32 * v60;
  while (2)
  {
    v34 = sub_22E4EF088((uint64_t)v57, (unint64_t)v32, 1);
    v35 = (char *)v57[0] + 24 * LODWORD(v57[1]);
    v36 = *(_OWORD *)v34;
    *((_QWORD *)v35 + 2) = *(_QWORD *)(v34 + 16);
    *(_OWORD *)v35 = v36;
    v37 = ++LODWORD(v57[1]);
    v38 = *(_DWORD *)v32;
    if (*(_DWORD *)v32 == 1)
    {
      v39 = *(_BYTE *)(*(_QWORD *)((unint64_t)v32[1] & 0xFFFFFFFFFFFFFFF0) + 16) == 36;
LABEL_40:
      v40 = v39;
    }
    else
    {
      if (v38 == 7)
      {
        v39 = *v32[1] == 213;
        goto LABEL_40;
      }
      v40 = ((1 << v38) & 0x13D) == 0;
    }
    v31 |= v40;
    v32 += 4;
    v33 -= 32;
    if (v33)
      continue;
    break;
  }
  if ((v31 & 1) == 0)
  {
LABEL_49:
    v41 = *(_QWORD *)(v2 + 32);
    v42 = *(_DWORD *)(v2 + 16);
    v43 = *(_DWORD *)(v2 + 20);
    v44 = *(_DWORD *)(v2 + 24);
    v47 = v37 | 0x100000000;
    v46 = *(_QWORD *)(*a1 + 88);
    v45 = 0;
    v37 = 0;
    goto LABEL_50;
  }
  v41 = *(_QWORD *)(v2 + 32);
  v42 = *(_DWORD *)(v2 + 16);
  v43 = *(_DWORD *)(v2 + 20);
  v44 = *(_DWORD *)(v2 + 24);
  v45 = v57[0];
  v46 = *(_QWORD *)(*a1 + 88);
  v47 = 0;
LABEL_50:
  v2 = sub_22F0622F8(v46, v42, v41, v43, v44, v47, (uint64_t)v45, v37);
  if (v57[0] != v58)
    free(v57[0]);
LABEL_52:
  if (v59 != (char *)&v60 + 8)
    free(v59);
LABEL_30:
  sub_22EB48E64(v4);
  return v2;
}

uint64_t sub_22ED829F4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  int v16[3];
  int v17;
  uint64_t v18;
  int v19;

  v4 = *a1;
  v5 = *a1 + 3688;
  v19 = *(_DWORD *)(*(_QWORD *)(v4 + 3688) + 576 * *(unsigned int *)(v4 + 3696) - 576);
  v18 = 0;
  v17 = 3;
  *(_QWORD *)v16 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v5, &v19, v16, (__int16 *)(v4 + 1693), &v18, &v17);
  v6 = *(unsigned int *)(v4 + 3696);
  v7 = v6 - 2;
  v8 = *(_QWORD *)(v4 + 3688);
  v9 = *(_DWORD *)(v8 + 576 * (v6 - 2));
  if (v9 == 5)
  {
    *(_BYTE *)(v8 + 576 * v6 - 4) = *(_BYTE *)(v8 + 576 * v7 + 572);
    v10 = 1;
  }
  else if (v9 == 2)
  {
    *(_BYTE *)(v8 + 576 * v6 - 4) = 1;
    v10 = *(_BYTE *)(v8 + 576 * v7 + 573) != 0;
  }
  else
  {
    v10 = 0;
    *(_BYTE *)(v8 + 576 * v6 - 4) = 0;
  }
  v11 = v8 + 576 * v6;
  *(_BYTE *)(v11 - 3) = v10;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v11 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v11 - 496));
  }
  v12 = sub_22ED892CC(a1, *(_QWORD *)(a2 + 16), 1u);
  if ((v12 & 1) != 0)
  {
    sub_22F32F704(*a1);
    return 1;
  }
  else
  {
    v13 = *a1;
    v14 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFFELL);
    if (*(_DWORD *)(*a1 + 11992) == -1 && *(unsigned int **)(a2 + 16) == v14)
    {
      sub_22F32F704(v13);
      return sub_22EBCC6C0(*a1, a2);
    }
    else
    {
      return sub_22EB497A8(v13, *(_DWORD *)(a2 + 24), v14, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
    }
  }
}

uint64_t sub_22ED82BA0(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int v10;
  int v11;
  uint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_22ED78310(a1, *(_QWORD *)(a2 + 16));
  if ((v5 & 1) != 0)
    return 1;
  v6 = *(_QWORD *)(a2 + 24);
  if (!v6)
  {
    v8 = 0;
    goto LABEL_7;
  }
  v7 = sub_22ED78310(a1, v6);
  if ((v7 & 1) != 0)
    return 1;
  v8 = (_QWORD *)(v7 & 0xFFFFFFFFFFFFFFFELL);
LABEL_7:
  v10 = *(_DWORD *)(a2 + 32);
  if (!v10)
  {
    sub_22F0D5A50(*(_QWORD *)(a2 + 16));
    v10 = v11;
  }
  LODWORD(v12) = *(_DWORD *)(a2 + 36);
  if (!(_DWORD)v12)
  {
    v12 = *(_QWORD *)(a2 + 24);
    if (v12)
      sub_22F0D60E4(v12);
  }
  return sub_22EB542F0(*a1, *(_QWORD *)(v4 + 40), (void *)(v5 & 0xFFFFFFFFFFFFFFFELL), v8, v10, v12);
}

uint64_t sub_22ED82C60(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v9;
  int v10;
  int v11;

  v4 = sub_22ED78310(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(a2 + 24);
  if (!v5)
  {
    v7 = 0;
    goto LABEL_7;
  }
  v6 = sub_22ED78310(a1, v5);
  if ((v6 & 1) != 0)
    return 1;
  v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
  v9 = *(_DWORD *)(a2 + 36);
  if (!v9)
  {
    sub_22F0D5A50(*(_QWORD *)(a2 + 16));
    v9 = v10;
  }
  v11 = *(_DWORD *)(a2 + 40);
  if (!v11)
    sub_22F0D60E4(*(_QWORD *)(a2 + 16));
  return sub_22F32FF64(*a1, (void *)(v4 & 0xFFFFFFFFFFFFFFFELL), v7, *(_BYTE *)(a2 + 32), v9, v11);
}

uint64_t sub_22ED82D14(uint64_t *a1, _DWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  _DWORD *v6;
  unint64_t *v7;
  int *v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  unsigned __int32 v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  int *v37;
  uint64_t v38;
  size_t v39;
  unsigned __int32 v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  int v46;
  uint64_t v47;
  int64x2_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  unint64_t v53;
  void *v54[2];
  _BYTE v55[32];
  uint64_t v56;
  int64x2_t v57;
  _BYTE v58[32];
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  _QWORD v62[6];

  v2 = a1;
  v62[4] = *MEMORY[0x24BDAC8D0];
  v60 = v62;
  v61 = 0x400000000;
  v3 = a2[1];
  if (!(_DWORD)v3)
  {
    v5 = 0;
    goto LABEL_76;
  }
  v4 = 0;
  v5 = 0;
  v6 = a2 + 6;
  v48 = vdupq_n_s64(0x20uLL);
  v49 = (uint64_t)(a2 + 6);
  v50 = a2[1];
  while (2)
  {
    v7 = *(unint64_t **)&v6[2 * v4];
    v8 = (int *)(v7 + 1);
    v9 = *v7;
    if ((*v7 & 0xF) != 0 || !v9 || *(_BYTE *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
    {
      v56 = (uint64_t)v58;
      v57 = vdupq_n_s64(0x20uLL);
      v59 = 0;
      v10 = sub_22F11598C(v9);
      if (v57.i64[0] < (unint64_t)v10)
        sub_22EEB52C0(&v56, v10);
      v11 = sub_22ED73B6C(v2, &v56);
      if (v11 >= 0x10)
      {
        v13 = v11;
        if (v11 == *v7)
        {
          v14 = v61;
          v15 = HIDWORD(v61);
        }
        else
        {
          v22 = *(_QWORD *)(*v2 + 88);
          v23 = v57.i64[0] - v57.i64[1];
          v24 = v57.i32[0] - v57.i32[2];
          if (v57.i32[0] == v57.i32[2])
            v24 = sub_22F11598C(v13);
          v7 = (unint64_t *)sub_22E3CD3D4(v22 + 2032, v24 + 8, 3);
          *v7 = v13;
          memcpy(v7 + 1, (const void *)(v56 + v57.i64[1]), v23);
          v14 = v61;
          v15 = HIDWORD(v61);
          v5 = 1;
        }
        if (v14 >= v15)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v14 = v61;
        }
        v60[v14] = (uint64_t)v7;
        LODWORD(v61) = v61 + 1;
        v12 = 4;
      }
      else
      {
        v12 = 1;
      }
      if ((_BYTE *)v56 != v58 && v56)
        MEMORY[0x2348A0E84]();
      goto LABEL_53;
    }
    v16 = *(_QWORD *)(v9 + 32);
    if (v16 >= 0x10 && (*(_QWORD *)(v9 + 32) & 0xFLL) == 0)
      v32 = *(_QWORD *)((char *)&unk_22F498010
                      + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
    else
      v32 = 1;
    v52 = *(_QWORD *)(v9 + 32);
    v53 = ((unint64_t)v8 + v32 + 3) & -v32;
    v54[0] = v55;
    v54[1] = (void *)0x200000000;
    sub_22EE73804(*v2, v16, v53, (uint64_t)v54);
    v46 = *(_DWORD *)(v9 + 20);
    LODWORD(v18) = v46 - 1;
    if (v46)
      v18 = v18;
    else
      v18 = 0;
    v47 = v18;
    v19 = v16;
    for (i = v16; ; i = sub_22F115B7C(i))
    {
      while (1)
      {
        if ((i & 0xF) != 0)
          goto LABEL_32;
        v21 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v21 <= 0x39)
          break;
LABEL_27:
        if (sub_22F115668(i))
          v19 = i;
        i = sub_22F115B7C(i);
        if (!i)
          goto LABEL_43;
      }
      if (v21 == 24)
        goto LABEL_42;
      if (v21 == 26)
        break;
      if (((1 << v21) & 0x20000000200003CLL) == 0)
        goto LABEL_27;
LABEL_32:
      ;
    }
    if ((*(_BYTE *)(i + 23) & 0x10) == 0)
      goto LABEL_32;
LABEL_42:
    v19 = i;
LABEL_43:
    sub_22F115668(v19);
    sub_22F1167E8(&v52);
    v2 = a1;
    v25 = *a1;
    v26 = *(_DWORD *)(*a1 + 11992);
    *(_DWORD *)(*a1 + 11992) = -1;
    v56 = (uint64_t)v58;
    v57 = v48;
    v59 = 0;
    v27 = sub_22F11598C(*v7);
    if (v57.i64[0] < (unint64_t)v27)
      sub_22EEB52C0(&v56, v27);
    v28 = sub_22ED73B6C(a1, &v56);
    if (v28 < 0x10)
    {
LABEL_46:
      v12 = 1;
      goto LABEL_47;
    }
    v29 = v28;
    v30 = v16;
    while (2)
    {
      while (2)
      {
        if ((v30 & 0xF) != 0)
          goto LABEL_67;
        v31 = *(unsigned __int8 *)(*(_QWORD *)(v30 & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v31 > 0x39)
        {
LABEL_62:
          if (sub_22F115668(v30))
            v16 = v30;
          v30 = sub_22F115B7C(v30);
          if (!v30)
            goto LABEL_69;
          continue;
        }
        break;
      }
      if (v31 == 24)
        break;
      if (v31 != 26)
      {
        if (((1 << v31) & 0x20000000200003CLL) != 0)
          goto LABEL_67;
        goto LABEL_62;
      }
      if ((*(_BYTE *)(v30 + 23) & 0x10) == 0)
      {
LABEL_67:
        v30 = sub_22F115B7C(v30);
        continue;
      }
      break;
    }
    v16 = v30;
LABEL_69:
    v33 = sub_22F115668(v16);
    v34 = sub_22F1167E8(&v52);
    v2 = a1;
    v35 = sub_22F34AE9C((_QWORD *)*a1, v29, v33 | ((unint64_t)v34 << 32), *v8, v47 | ((unint64_t)(v46 != 0) << 32));
    if (v35 < 0x10)
      goto LABEL_46;
    v36 = v35;
    sub_22EEB5360((uint64_t)&v56, v35, 4uLL, 4);
    *v37 = *v8;
    v38 = *(_QWORD *)(*a1 + 88);
    v39 = v57.i64[0] - v57.i64[1];
    v40 = v57.i32[0] - v57.i32[2];
    if (v57.i32[0] == v57.i32[2])
      v40 = sub_22F11598C(v36);
    v41 = (_QWORD *)sub_22E3CD3D4(v38 + 2032, v40 + 8, 3);
    *v41 = v36;
    memcpy(v41 + 1, (const void *)(v56 + v57.i64[1]), v39);
    v42 = v61;
    if (v61 >= (unint64_t)HIDWORD(v61))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v42 = v61;
    }
    v60[v42] = (uint64_t)v41;
    LODWORD(v61) = v61 + 1;
    v12 = 4;
LABEL_47:
    if ((_BYTE *)v56 != v58 && v56)
      MEMORY[0x2348A0E84]();
    *(_DWORD *)(v25 + 11992) = v26;
    if (v54[0] != v55)
      free(v54[0]);
    v5 = 1;
    v6 = (_DWORD *)v49;
    v3 = v50;
LABEL_53:
    if (v12 == 4)
    {
      if (++v4 == v3)
      {
LABEL_76:
        if (*(_DWORD *)(*v2 + 11992) != -1 || (v5 & 1) != 0)
          v43 = sub_22EBC6244(*v2, (*a2 >> 18), a2[4], v60, v61, a2[5]);
        else
          v43 = (uint64_t)a2;
        goto LABEL_81;
      }
      continue;
    }
    break;
  }
  v43 = 1;
LABEL_81:
  if (v60 != v62)
    free(v60);
  return v43;
}

uint64_t sub_22ED8336C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;

  v2 = a2;
  if ((*(_BYTE *)(a2 + 2) & 0x40) != 0)
  {
    v9 = *(_QWORD *)(a2 + 16);
    v10 = sub_22ED73944(a1, v9);
    if (v10)
    {
      v11 = (unint64_t *)v10;
      v12 = *a1;
      if (v9 != v10 || *(_DWORD *)(v12 + 11992) != -1)
      {
        v14 = *(_DWORD *)(v2 + 24);
        v15 = (*(_DWORD *)v2 >> 18) & 0xF;
        sub_22F0D4E74(v2);
        return sub_22EB28664(v12, v11, v14, v15, v16);
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    v4 = *a1;
    sub_22EB4DECC(*a1, 0, 0, 3);
    v24 = 0;
    v5 = *(unsigned __int8 **)(v2 + 16);
    if (*v5 == 214 && (v6 = (unsigned __int8 *)*((_QWORD *)v5 + 3), *v6 == 163))
    {
      v7 = sub_22ED906A8(a1, *((_QWORD *)v5 + 3), 0, &v24);
      if (v7 >= 2)
      {
        if (v6 == (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL) && *(_DWORD *)(*a1 + 11992) == -1)
          v7 = (unint64_t)v5;
        else
          v7 = sub_22EB27A20((_QWORD *)*a1, *((_DWORD *)v5 + 4), *((_DWORD *)v5 + 5), v7 & 0xFFFFFFFFFFFFFFFELL);
      }
    }
    else
    {
      v7 = sub_22ED78310(a1, *(_QWORD *)(v2 + 16));
    }
    v18 = v24;
    if (v24)
    {
      v19 = *(_DWORD *)(v2 + 24);
      v20 = (*(_DWORD *)v2 >> 18) & 0xF;
      sub_22F0D4E74(v2);
      v2 = sub_22EB28664(*a1, v18, v19, v20, v21);
    }
    else if ((v7 & 1) != 0)
    {
      v2 = 1;
    }
    else
    {
      v22 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 16) != v22)
      {
        v23 = sub_22EB28F24((_QWORD *)*a1, v22, *(_DWORD *)(v2 + 24), (*(_DWORD *)v2 >> 18) & 0xF);
        if ((v23 & 1) != 0)
          v2 = 1;
        else
          v2 = v23;
      }
    }
    sub_22EB48E64(v4);
  }
  return v2;
}

uint64_t sub_22ED83544(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a2;
  v4 = *(_DWORD *)a2 & 0x7C0000;
  v5 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == 0x100000 && *v5 == 163)
    v6 = sub_22ED906A8(a1, (uint64_t)v5, 1, 0);
  else
    v6 = sub_22ED78310(a1, v5);
  if ((v6 & 1) != 0)
    return 1;
  v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 16) != v7)
    return sub_22EB2941C((_QWORD *)*a1, 0, *(_DWORD *)(v2 + 4), (*(_DWORD *)v2 >> 18) & 0x1F, v7);
  return v2;
}

uint64_t sub_22ED835E8(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v2 = a2;
  v4 = sub_22ED73944(a1, *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8);
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v6 = sub_22ED78310(a1, *(_QWORD *)(v2 + 16));
  if ((v6 & 1) != 0)
    return 1;
  if (*((_DWORD *)*a1 + 2998) != -1
    || v5 != (uint64_t *)(*(_QWORD *)(v2 + 24) & 0xFFFFFFFFFFFFFFF8)
    || *(_QWORD *)(v2 + 16) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EB4B7A8(*a1, *(_DWORD *)(v2 + 32), v6 & 0xFFFFFFFFFFFFFFFELL, v5, *(_DWORD *)(v2 + 36));
  }
  return v2;
}

unint64_t sub_22ED8368C(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  if (a2 >= 0x10)
  {
    v3 = sub_22EF579A8(*(_QWORD *)(*(_QWORD *)a1 + 88), a2, 0);
    v4 = sub_22ED73944(a1, v3);
    if (v4)
      return *(_QWORD *)v4;
    else
      return 0;
  }
  return a2;
}

uint64_t sub_22ED836E0(uint64_t *a1, unsigned __int8 **a2, unsigned int a3, int a4, uint64_t a5, _BYTE *a6)
{
  _BYTE *v6;
  int v8;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t result;
  int v31;
  uint64_t v32;
  void *v33[2];
  _QWORD v34[5];

  v34[4] = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return 0;
  v6 = a6;
  v8 = a4;
  v11 = v34;
  v12 = a3;
  while (1)
  {
    v13 = *a2;
    if (v8)
      break;
    if (*v13 != 213)
    {
      v14 = sub_22ED78310(a1, *a2);
      if ((v14 & 1) != 0)
        return 1;
      goto LABEL_20;
    }
LABEL_9:
    v15 = *((_QWORD *)v13 + 3);
    v16 = v11;
    v33[0] = v11;
    v33[1] = (void *)0x200000000;
    v17 = *a1;
    v31 = 7;
    v32 = v15;
    sub_22EE7377C(v17, (uint64_t)&v31, (uint64_t)v33);
    v18 = *((_DWORD *)v13 + 5);
    v19 = *a1;
    v20 = *(_DWORD *)(*a1 + 11992);
    *(_DWORD *)(*a1 + 11992) = -1;
    v21 = sub_22ED78310(a1, v15);
    if ((v21 & 1) != 0)
    {
      v24 = 0;
      v6 = a6;
    }
    else
    {
      LODWORD(v22) = v18 - 1;
      if (v18)
        v22 = v22;
      else
        v22 = 0;
      v23 = sub_22EE739C0((_QWORD *)*a1, v21 & 0xFFFFFFFFFFFFFFFELL, *((_DWORD *)v13 + 4), v22 | ((unint64_t)(v18 != 0) << 32));
      v24 = 0;
      v6 = a6;
      if ((v23 & 1) == 0)
      {
        if (a6)
          *a6 = 1;
        v25 = *(unsigned int *)(a5 + 8);
        if (v25 >= *(unsigned int *)(a5 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v25 = *(unsigned int *)(a5 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a5 + 8 * v25) = v23 & 0xFFFFFFFFFFFFFFFELL;
        ++*(_DWORD *)(a5 + 8);
        v24 = 1;
      }
    }
    *(_DWORD *)(v19 + 11992) = v20;
    v11 = v16;
    if (v33[0] != v16)
      free(v33[0]);
    v8 = a4;
    if ((v24 & 1) == 0)
      return 1;
LABEL_30:
    ++a2;
    if (!--v12)
      return 0;
  }
  if (!sub_22EFFF908(*a2))
  {
    v13 = *a2;
    if (**a2 != 213)
    {
      v14 = sub_22ED83974(a1, *a2, 0);
      if ((v14 & 1) != 0)
        return 1;
LABEL_20:
      v26 = v14 & 0xFFFFFFFFFFFFFFFELL;
      if (v6 && *a2 != (unsigned __int8 *)v26)
        *v6 = 1;
      v27 = *(unsigned int *)(a5 + 8);
      if (v27 >= *(unsigned int *)(a5 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v27 = *(unsigned int *)(a5 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a5 + 8 * v27) = v26;
      ++*(_DWORD *)(a5 + 8);
      goto LABEL_30;
    }
    goto LABEL_9;
  }
  if (v6)
  {
    result = 0;
    *v6 = 1;
    return result;
  }
  return 0;
}

uint64_t sub_22ED83974(uint64_t *a1, unsigned __int8 *a2, char a3)
{
  unsigned __int8 *v4;
  int v6;
  uint64_t v7;
  int v8;
  unsigned __int8 **v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t *v41;
  unsigned int v42;
  int v43;
  uint64_t *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  void *v53;
  uint64_t v54;
  _QWORD v55[9];

  v55[8] = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 0;
  v4 = a2;
  while (1)
  {
    v6 = *v4;
    if ((v6 & 0xFE) == 0xAC)
    {
      v4 = (unsigned __int8 *)*((_QWORD *)v4 + 2);
      v6 = *v4;
    }
    if (v6 == 106)
    {
      v4 = *(unsigned __int8 **)(*((_QWORD *)v4 + 2) + 16);
      v6 = *v4;
    }
    if (v6 == 186)
    {
      v7 = *((_QWORD *)v4 + 2);
      v4 = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFF8);
      if ((v7 & 4) != 0)
        v4 = (unsigned __int8 *)*((_QWORD *)v4 + 5);
    }
    while (1)
    {
      v8 = *v4;
      if (v8 != 116)
        break;
      v4 = (unsigned __int8 *)*((_QWORD *)v4 + 3);
    }
    if (v8 == 153)
    {
      v4 = sub_22EFFB374(v4);
      v8 = *v4;
    }
    if (v8 != 132)
      break;
    v9 = (unsigned __int8 **)(v4 + 16);
LABEL_30:
    v4 = *v9;
    if (!*v9)
      return 0;
  }
  v10 = v8 & 0xFE;
  v11 = v8;
  if ((a3 & 1) == 0)
  {
    if (v10 != 118 || (*(_DWORD *)v4 & 0x100000) == 0)
      return sub_22ED78310(a1, v4);
    v11 = *(_DWORD *)v4;
  }
  if (v8 == 179)
  {
    v20 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 24, 3);
    v15 = v20;
    v21 = 0;
    v22 = 0;
    goto LABEL_35;
  }
  if (v8 == 131)
  {
    sub_22F0D4E74((uint64_t)v4);
    v18 = HIDWORD(v17);
    v19 = v17;
    v20 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 24, 3);
    v15 = v20;
    v21 = v19;
    v22 = v18;
LABEL_35:
    sub_22F002D50(v20, v21, 0, 0, v22);
    return v15;
  }
  if (v10 != 118 || v11 == 119)
    return sub_22ED78310(a1, v4);
  if ((*(_DWORD *)v4 & 0x200000) != 0)
  {
    v12 = *(_DWORD *)v4;
    v13 = v12 == 119;
    if (v12 == 119)
      v14 = v4;
    else
      v14 = 0;
    v9 = (unsigned __int8 **)(v14 + 48);
    if (!v13)
      v9 = (unsigned __int8 **)(v4 + 40);
    goto LABEL_30;
  }
  v23 = *a1;
  if ((*(_DWORD *)v4 & 0x100000) == 0
    || ((v25 = *(_DWORD *)(*(_QWORD *)(v23 + 3688) + 576 * *(unsigned int *)(v23 + 3696) - 576), v25 <= 3)
      ? (v26 = v25 == 2)
      : (v26 = 1),
        v26))
  {
    v24 = 1;
  }
  else
  {
    v24 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(v23 + 72) + 1) & 2) != 0)
    {
      v53 = 0;
      v51 = 3;
      v52 = 1;
      v50 = *(unsigned int *)(v23 + 1704);
      sub_22EB4DDB8(v23 + 3688, &v52, (int *)&v50, (__int16 *)(v23 + 1693), (uint64_t *)&v53, &v51);
      v27 = *(unsigned int *)(v23 + 3696);
      v28 = v27 - 2;
      v29 = *(_QWORD *)(v23 + 3688);
      v30 = *(_DWORD *)(v29 + 576 * (v27 - 2));
      if (v30 == 5)
      {
        *(_BYTE *)(v29 + 576 * v27 - 4) = *(_BYTE *)(v29 + 576 * v28 + 572);
        v31 = 1;
      }
      else if (v30 == 2)
      {
        *(_BYTE *)(v29 + 576 * v27 - 4) = 1;
        v31 = *(_BYTE *)(v29 + 576 * v28 + 573) != 0;
      }
      else
      {
        v31 = 0;
        *(_BYTE *)(v29 + 576 * v27 - 4) = 0;
      }
      v32 = v29 + 576 * v27;
      *(_BYTE *)(v32 - 3) = v31;
      *(_WORD *)(v23 + 1693) = 0;
      if (*(_DWORD *)(v23 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v23 + 1776), (llvm::SmallPtrSetImplBase *)(v32 - 560));
        sub_22EAEAE08(v23 + 1840, (uint64_t *)(v32 - 496));
      }
      v24 = 0;
    }
  }
  v53 = v55;
  v54 = 0x800000000;
  LOBYTE(v50) = 0;
  v33 = *v4;
  v34 = v33 == 119;
  if (v33 == 119)
    v35 = v4;
  else
    v35 = 0;
  v36 = v35 + 48;
  if (v34)
    v37 = v36;
  else
    v37 = v4 + 40;
  v15 = 1;
  if ((sub_22ED836E0(a1, v37, *((unsigned int *)v4 + 8), 1, &v53, &v50) & 1) != 0)
    goto LABEL_64;
  if ((*(_DWORD *)v4 & 0x100000) == 0)
  {
    v15 = 0;
    v38 = *((_QWORD *)v4 + 3);
    v39 = HIDWORD(v38);
    if (HIDWORD(v38))
    {
      v40 = v38;
      if ((_DWORD)v38)
      {
        v41 = (uint64_t *)v53;
        v42 = v54;
        v15 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 8 * v54 + 24, 3);
        sub_22F002D50(v15, v40, v41, v42, v39);
      }
    }
    goto LABEL_64;
  }
  if (*(_DWORD *)v4 != 119)
  {
    v43 = *((_DWORD *)v4 + 1);
    goto LABEL_63;
  }
  v47 = **((_QWORD **)v4 + 5);
  v48 = v47;
  while (2)
  {
    while (2)
    {
      if ((v48 & 0xF) != 0)
        goto LABEL_79;
      v49 = *(unsigned __int8 *)(*(_QWORD *)(v48 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v49 > 0x39)
      {
LABEL_74:
        if (sub_22F115668(v48))
          v47 = v48;
        v48 = sub_22F115B7C(v48);
        if (!v48)
          goto LABEL_83;
        continue;
      }
      break;
    }
    if (v49 == 24)
      break;
    if (v49 != 26)
    {
      if (((1 << v49) & 0x20000000200003CLL) != 0)
        goto LABEL_79;
      goto LABEL_74;
    }
    if ((*(_BYTE *)(v48 + 23) & 0x10) == 0)
    {
LABEL_79:
      v48 = sub_22F115B7C(v48);
      continue;
    }
    break;
  }
  v47 = v48;
LABEL_83:
  v43 = sub_22F115668(v47);
LABEL_63:
  v44 = (uint64_t *)v53;
  v45 = v54;
  sub_22F060B18(v4);
  v15 = sub_22EB353A0(*a1, v43, v44, v45, v46);
LABEL_64:
  if (v53 != v55)
    free(v53);
  if ((v24 & 1) == 0)
    sub_22EB48E64(v23);
  return v15;
}

uint64_t sub_22ED83E90(uint64_t *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v23;
  uint64_t v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t i;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v54;
  unsigned int v56;
  void **v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  _QWORD v61[6];

  v61[4] = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  if (!a3)
    return 0;
  v11 = a5;
  v12 = a2;
  v13 = a1;
  v14 = 0;
  v56 = 0;
  v54 = a3;
  while (1)
  {
    v15 = *(_QWORD *)(v12 + 8 * v14);
    if (v15)
      break;
    v30 = *(_QWORD *)(a4 + 8 * v14);
    v31 = *(_QWORD *)(v30 & 0xFFFFFFFFFFFFFFF0);
    if (v31 && *(_BYTE *)(v31 + 16) == 36)
    {
      v32 = *(_QWORD *)(v31 + 32);
      v59 = v61;
      v60 = 0x200000000;
      v57 = &v59;
      LOBYTE(v58) = 0;
      HIDWORD(v58) = -1;
      sub_22EE72E1C((uint64_t)&v57, v32);
      v33 = *(_QWORD *)(v31 + 32);
      v34 = (uint64_t)v13;
      v35 = *v13;
      v36 = *(_DWORD *)(v35 + 11992);
      *(_DWORD *)(v35 + 11992) = -1;
      v37 = sub_22ED8368C(v34, v33);
      *(_DWORD *)(v35 + 11992) = v36;
      if (v59 != v61)
        free(v59);
      if (v37 < 0x10)
        return 1;
      v13 = a1;
      v38 = sub_22EF663B4(*(_QWORD *)(*a1 + 88), v37, 0);
      v8 = v54;
    }
    else
    {
      v38 = sub_22ED8368C((uint64_t)v13, v30);
      if (v38 < 0x10)
        return 1;
    }
    if (v11)
      sub_22F2F3918(a8, *(_DWORD *)(a6 + 8), *(_BYTE *)(v11 + v14));
    v40 = *(unsigned int *)(a6 + 8);
    if (v40 >= *(unsigned int *)(a6 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v40 = *(unsigned int *)(a6 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a6 + 8 * v40) = v38;
    ++*(_DWORD *)(a6 + 8);
    if (a7)
    {
      v41 = *(unsigned int *)(a7 + 8);
      if (v41 >= *(unsigned int *)(a7 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v41 = *(unsigned int *)(a7 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a7 + 8 * v41) = 0;
LABEL_60:
      ++*(_DWORD *)(a7 + 8);
    }
LABEL_61:
    if (++v14 == v8)
      return 0;
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v15 + 48) & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
  {
    v39 = sub_22ED84A54(v13, *(_QWORD *)(v12 + 8 * v14), 0);
    if (v39)
      goto LABEL_52;
    return 1;
  }
  v59 = v61;
  v60 = 0x200000000;
  v16 = *(_QWORD *)(v15 + 56);
  v17 = (uint64_t *)(v16 & 0xFFFFFFFFFFFFFFF8);
  if ((v16 & 4) != 0)
    v17 = (uint64_t *)v17[4];
  v20 = *v17;
  v18 = v17 + 1;
  v19 = v20;
  v21 = *(_QWORD *)(v20 + 32);
  if (v21 >= 0x10 && (v21 & 0xF) == 0)
    v42 = *(_QWORD *)((char *)&unk_22F498010
                    + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  else
    v42 = 1;
  v57 = (void **)v21;
  v58 = ((unint64_t)v18 + v42 + 3) & -v42;
  sub_22EE73804(*v13, v21, v58, (uint64_t)&v59);
  if (!(_DWORD)v60)
  {
    v24 = 0;
    LOBYTE(v27) = 0;
    goto LABEL_49;
  }
  v23 = *(_DWORD *)(v19 + 20);
  v24 = v23 != 0;
  v25 = v23 != 0;
  v26 = v23 - 1;
  if (v25)
    v27 = v26;
  else
    v27 = 0;
  v56 = v27 >> 8;
  for (i = v21; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_28;
      v29 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v29 <= 0x39)
        break;
LABEL_23:
      if (sub_22F115668(i))
        v21 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_48;
    }
    if (v29 == 24)
      goto LABEL_47;
    if (v29 == 26)
      break;
    if (((1 << v29) & 0x20000000200003CLL) == 0)
      goto LABEL_23;
LABEL_28:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_28;
LABEL_47:
  v21 = i;
LABEL_48:
  sub_22F115668(v21);
  sub_22F1167E8((uint64_t *)&v57);
LABEL_49:
  v43 = *a1;
  v44 = *(_DWORD *)(*a1 + 11992);
  *(_DWORD *)(*a1 + 11992) = -1;
  v45 = v27 | (v56 << 8) | (unint64_t)(v24 << 32);
  v13 = a1;
  v39 = sub_22ED84A54(a1, v15, v45);
  *(_DWORD *)(v43 + 11992) = v44;
  v12 = a2;
  v11 = a5;
  if (v59 != v61)
    free(v59);
  v8 = v54;
  if (v39)
  {
LABEL_52:
    if (v11)
      sub_22F2F3918(a8, *(_DWORD *)(a6 + 8), *(_BYTE *)(v11 + v14));
    v46 = *(_QWORD *)(v39 + 48);
    v47 = *(unsigned int *)(a6 + 8);
    if (v47 >= *(unsigned int *)(a6 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v47 = *(unsigned int *)(a6 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a6 + 8 * v47) = v46;
    ++*(_DWORD *)(a6 + 8);
    if (a7)
    {
      v48 = *(unsigned int *)(a7 + 8);
      if (v48 >= *(unsigned int *)(a7 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v48 = *(unsigned int *)(a7 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a7 + 8 * v48) = v39;
      goto LABEL_60;
    }
    goto LABEL_61;
  }
  return 1;
}

uint64_t sub_22ED84358(uint64_t *a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  uint64_t result;

  if (!a2)
    return (uint64_t)a2;
  v8 = a3;
  switch(a2->n128_u8[0])
  {
    case 1u:
      result = sub_22ED84F70(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      break;
    case 2u:
      result = sub_22ED854A0(a1, (uint64_t)a2);
      break;
    case 3u:
    case 9u:
    case 0x13u:
    case 0x60u:
      result = nullsub_910(a2);
      break;
    case 4u:
      result = sub_22ED8569C(a1, (uint64_t)a2);
      break;
    case 5u:
      result = sub_22ED857C4(a1, (uint64_t)a2);
      break;
    case 6u:
      result = sub_22ED85A88(a1, (uint64_t)a2);
      break;
    case 7u:
      result = sub_22ED85C10(a1, (uint64_t)a2);
      break;
    case 8u:
      result = sub_22ED85E28(a1, (uint64_t)a2);
      break;
    case 0xAu:
      result = sub_22ED85E30(a1, (uint64_t)a2);
      break;
    case 0xBu:
      result = sub_22ED85E84(a1, (uint64_t)a2);
      break;
    case 0xCu:
      result = sub_22EBF43C8(a1, (uint64_t)a2);
      break;
    case 0xDu:
      result = sub_22ED8616C(a1, (uint64_t)a2);
      break;
    case 0xEu:
      result = sub_22ED86214(a1, (uint64_t)a2);
      break;
    case 0xFu:
      result = sub_22EB77BB4((uint64_t)a1, (uint64_t)a2);
      break;
    case 0x10u:
      result = sub_22ED863E8((uint64_t)a1, (unsigned __int16 *)a2);
      break;
    case 0x11u:
      result = sub_22ED86710(a1, (uint64_t)a2);
      break;
    case 0x12u:
      result = sub_22ED86788(a1, (uint64_t)a2);
      break;
    case 0x14u:
      result = sub_22ED869AC((uint64_t)a1, (uint64_t)a2);
      break;
    case 0x15u:
      result = sub_22ED869B8(a1, a2);
      break;
    case 0x16u:
      result = sub_22ED86A24(a1, a2);
      break;
    case 0x17u:
      result = sub_22ED86A90(a1, a2);
      break;
    case 0x18u:
      result = sub_22ED86AFC(a1, a2);
      break;
    case 0x19u:
      result = sub_22ED86B68(a1, a2);
      break;
    case 0x1Au:
      result = sub_22ED86BD8(a1, a2);
      break;
    case 0x1Bu:
      result = sub_22ED86C44(a1, a2);
      break;
    case 0x1Cu:
      result = sub_22ED86CB0(a1, a2);
      break;
    case 0x1Du:
      result = sub_22ED86D1C(a1, a2);
      break;
    case 0x1Eu:
      result = sub_22ED86D88(a1, a2);
      break;
    case 0x1Fu:
      result = sub_22ED86DF4(a1, a2);
      break;
    case 0x20u:
      result = sub_22ED86E60(a1, a2);
      break;
    case 0x21u:
      result = sub_22ED86ECC(a1, a2);
      break;
    case 0x22u:
      result = sub_22ED86F38(a1, a2);
      break;
    case 0x23u:
      result = sub_22ED86FA4(a1, a2);
      break;
    case 0x24u:
      result = sub_22ED87010(a1, a2);
      break;
    case 0x25u:
      result = sub_22ED8707C(a1, a2);
      break;
    case 0x26u:
      result = sub_22ED870E8(a1, a2);
      break;
    case 0x27u:
      result = sub_22ED87154(a1, a2);
      break;
    case 0x28u:
      result = sub_22ED871C0(a1, a2);
      break;
    case 0x29u:
      result = sub_22ED8722C(a1, a2);
      break;
    case 0x2Au:
      result = sub_22ED87298(a1, a2);
      break;
    case 0x2Bu:
      result = sub_22ED87304(a1, a2);
      break;
    case 0x2Cu:
      result = sub_22ED87370(a1, a2);
      break;
    case 0x2Du:
      result = sub_22ED873DC(a1, a2);
      break;
    case 0x2Eu:
      result = sub_22ED87448(a1, a2);
      break;
    case 0x2Fu:
      result = sub_22ED874B4(a1, a2);
      break;
    case 0x30u:
      result = sub_22ED87520(a1, a2);
      break;
    case 0x31u:
      result = sub_22ED8758C(a1, a2);
      break;
    case 0x32u:
      result = sub_22ED875F8(a1, a2);
      break;
    case 0x33u:
      result = sub_22ED87664(a1, a2);
      break;
    case 0x34u:
      result = sub_22ED876D0(a1, a2);
      break;
    case 0x35u:
      result = sub_22ED8773C(a1, a2);
      break;
    case 0x36u:
      result = sub_22ED877A8(a1, a2);
      break;
    case 0x37u:
      result = sub_22ED87814(a1, a2);
      break;
    case 0x38u:
      result = sub_22ED87880(a1, a2);
      break;
    case 0x39u:
      result = sub_22ED878EC(a1, a2);
      break;
    case 0x3Au:
      result = sub_22ED87958(a1, a2);
      break;
    case 0x3Bu:
      result = sub_22ED879C4(a1, a2);
      break;
    case 0x3Cu:
    case 0x3Du:
      result = sub_22ED87A30(a1, a2);
      break;
    case 0x3Eu:
      result = sub_22ED87A9C(a1, a2);
      break;
    case 0x3Fu:
      result = sub_22ED87B08(a1, a2);
      break;
    case 0x40u:
      sub_22EB79398((_QWORD *)*a1, (uint64_t)a2);
      return 1;
    case 0x41u:
      result = sub_22ED87B74(a1, a2);
      break;
    case 0x42u:
      result = sub_22ED87BE0(a1, a2);
      break;
    case 0x43u:
      result = sub_22ED87C4C(a1, a2);
      break;
    case 0x44u:
      result = sub_22ED87CB8(a1, a2);
      break;
    case 0x45u:
      result = sub_22ED87D24(a1, a2);
      break;
    case 0x46u:
      result = sub_22ED87D90(a1, a2);
      break;
    case 0x47u:
      result = sub_22ED87DFC(a1, a2);
      break;
    case 0x48u:
      result = sub_22ED87E68(a1, a2);
      break;
    case 0x49u:
      result = sub_22ED87ED4(a1, a2);
      break;
    case 0x4Au:
      result = sub_22ED87F40(a1, a2);
      break;
    case 0x4Bu:
      result = sub_22ED87FAC(a1, a2);
      break;
    case 0x4Cu:
      result = sub_22ED88018(a1, a2);
      break;
    case 0x4Du:
      result = sub_22ED88084(a1, a2);
      break;
    case 0x4Eu:
      result = sub_22ED880F0(a1, a2);
      break;
    case 0x4Fu:
      result = sub_22ED8815C(a1, a2);
      break;
    case 0x50u:
      result = sub_22ED881C8(a1, a2);
      break;
    case 0x51u:
      result = sub_22ED88234(a1, a2);
      break;
    case 0x52u:
      result = sub_22ED882A0(a1, a2);
      break;
    case 0x53u:
      result = sub_22ED8830C(a1, a2);
      break;
    case 0x54u:
      result = sub_22ED88378(a1, a2);
      break;
    case 0x55u:
      result = sub_22ED883E4(a1, a2);
      break;
    case 0x56u:
      result = sub_22ED88450(a1, (uint64_t)a2);
      break;
    case 0x57u:
      result = sub_22ED8853C(a1, (uint64_t)a2);
      break;
    case 0x58u:
      result = sub_22ED885A8((uint64_t **)a1, (uint64_t)a2);
      break;
    case 0x59u:
      result = sub_22ED8865C((_QWORD **)a1, (uint64_t)a2);
      break;
    case 0x5Au:
      result = sub_22ED886D4(a1, (uint64_t)a2);
      break;
    case 0x5Bu:
      result = sub_22ED888FC(a1, (uint64_t)a2);
      break;
    case 0x5Cu:
      result = sub_22ED88968(a1, (uint64_t)a2);
      break;
    case 0x5Du:
      result = sub_22ED88A5C(a1, (uint64_t)a2);
      break;
    case 0x5Eu:
      result = sub_22ED88AAC(a1, (uint64_t)a2);
      break;
    case 0x5Fu:
      result = sub_22ED88B18(a1, (uint64_t)a2);
      break;
    case 0x61u:
      result = sub_22ED88B60(a1, (uint64_t)a2);
      break;
    case 0x62u:
      result = sub_22ED88C14(a1, (unsigned __int16 *)a2);
      break;
    case 0x63u:
      result = sub_22ED88E24(a1, (uint64_t)a2);
      break;
    case 0x64u:
      result = sub_22ED88E74(a1, (unsigned __int16 *)a2);
      break;
    case 0x65u:
      result = sub_22ED88F9C(a1, (unsigned int *)a2, a3);
      break;
    case 0x66u:
    case 0x67u:
    case 0x68u:
    case 0x69u:
    case 0x6Au:
    case 0x6Bu:
    case 0x6Cu:
    case 0x6Du:
    case 0x6Eu:
    case 0x6Fu:
    case 0x70u:
    case 0x71u:
    case 0x72u:
    case 0x73u:
    case 0x74u:
    case 0x75u:
    case 0x76u:
    case 0x77u:
    case 0x78u:
    case 0x79u:
    case 0x7Au:
    case 0x7Bu:
    case 0x7Cu:
    case 0x7Du:
    case 0x7Eu:
    case 0x7Fu:
    case 0x80u:
    case 0x81u:
    case 0x82u:
    case 0x83u:
    case 0x84u:
    case 0x85u:
    case 0x86u:
    case 0x87u:
    case 0x88u:
    case 0x89u:
    case 0x8Au:
    case 0x8Bu:
    case 0x8Cu:
    case 0x8Du:
    case 0x8Eu:
    case 0x8Fu:
    case 0x90u:
    case 0x91u:
    case 0x92u:
    case 0x93u:
    case 0x94u:
    case 0x95u:
    case 0x96u:
    case 0x97u:
    case 0x98u:
    case 0x99u:
    case 0x9Au:
    case 0x9Bu:
    case 0x9Cu:
    case 0x9Du:
    case 0x9Eu:
    case 0x9Fu:
    case 0xA0u:
    case 0xA1u:
    case 0xA2u:
    case 0xA3u:
    case 0xA4u:
    case 0xA5u:
    case 0xA6u:
    case 0xA7u:
    case 0xA8u:
    case 0xA9u:
    case 0xAAu:
    case 0xABu:
    case 0xACu:
    case 0xADu:
    case 0xAEu:
    case 0xAFu:
    case 0xB0u:
    case 0xB1u:
    case 0xB2u:
    case 0xB3u:
    case 0xB4u:
    case 0xB5u:
    case 0xB6u:
    case 0xB7u:
    case 0xB8u:
    case 0xB9u:
    case 0xBAu:
    case 0xBBu:
    case 0xBCu:
    case 0xBDu:
    case 0xBEu:
    case 0xBFu:
    case 0xC0u:
    case 0xC1u:
    case 0xC2u:
    case 0xC3u:
    case 0xC4u:
    case 0xC5u:
    case 0xC6u:
    case 0xC7u:
    case 0xC8u:
    case 0xC9u:
    case 0xCAu:
    case 0xCBu:
    case 0xCCu:
    case 0xCDu:
    case 0xCEu:
    case 0xCFu:
    case 0xD0u:
    case 0xD1u:
    case 0xD2u:
    case 0xD3u:
    case 0xD4u:
    case 0xD5u:
    case 0xD6u:
    case 0xD7u:
    case 0xD8u:
    case 0xD9u:
    case 0xDAu:
    case 0xDBu:
    case 0xDCu:
    case 0xDDu:
    case 0xDEu:
    case 0xDFu:
    case 0xE0u:
    case 0xE1u:
    case 0xE2u:
    case 0xE3u:
    case 0xE4u:
    case 0xE5u:
    case 0xE6u:
    case 0xE7u:
    case 0xE8u:
    case 0xE9u:
    case 0xEAu:
      v10 = sub_22ED78310(a1, a2);
      if (v8 == 2)
        v10 = sub_22EB49994(*a1, v10);
      result = sub_22ED2B1FC(*a1, v10, v8 == 0);
      break;
    case 0xEBu:
      result = sub_22ED890F4((uint64_t)a1, (uint64_t)a2, a3);
      break;
    case 0xECu:
      result = sub_22ED891A0((uint64_t)a1, (unsigned __int16 *)a2);
      break;
    default:
      return (uint64_t)a2;
  }
  return result;
}

unint64_t sub_22ED84A54(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned int v9;
  int *v10;
  unint64_t v11;
  char v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int i;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unint64_t v44;
  unint64_t v45;
  int *v46;
  uint64_t v47;
  size_t v48;
  unsigned __int32 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52[2];
  char v53[8];
  int64x2_t v54;
  _BYTE v55[32];
  uint64_t v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a2 + 56);
  v7 = (unint64_t *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 4) != 0)
    v7 = (unint64_t *)v7[4];
  if ((a3 & 0xFF00000000) == 0 || (v8 = *v7, *(_BYTE *)(*(_QWORD *)(*v7 & 0xFFFFFFFFFFFFFFF0) + 16) != 36))
  {
    v13 = (uint64_t *)sub_22ED73944(a1, v7);
    if (v13)
      goto LABEL_14;
    return 0;
  }
  *(_QWORD *)v53 = v55;
  v54 = vdupq_n_s64(0x20uLL);
  v56 = 0;
  v9 = sub_22F11598C(v8);
  if (v54.i64[0] < (unint64_t)v9)
    sub_22EEB52C0((uint64_t *)v53, v9);
  v10 = (int *)(v7 + 1);
  v11 = sub_22ED73B6C(a1, v53);
  if (v11 < 0x10)
  {
LABEL_8:
    v12 = 0;
    v13 = 0;
    goto LABEL_9;
  }
  v32 = v11;
  v33 = *(_QWORD *)(v8 + 32);
  v51 = v33;
  if (v33 >= 0x10 && (v33 & 0xF) == 0)
    v50 = *(_QWORD *)((char *)&unk_22F498010
                    + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v33 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  else
    v50 = 1;
  v35 = *(_QWORD *)(v8 + 32);
  v52[0] = v35;
  v52[1] = ((unint64_t)v7 + v50 + 11) & -v50;
  while (1)
  {
    while (1)
    {
      if ((v35 & 0xF) != 0)
        goto LABEL_71;
      v36 = *(unsigned __int8 *)(*(_QWORD *)(v35 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v36 <= 0x39)
        break;
LABEL_66:
      v37 = v35;
      v38 = sub_22F115668(v35);
      v39 = v51;
      if (v38)
        v39 = v37;
      v51 = v39;
      v35 = sub_22F115B7C(v37);
      if (!v35)
        goto LABEL_79;
    }
    if (v36 == 24)
      goto LABEL_78;
    if (v36 == 26)
      break;
    if (((1 << v36) & 0x20000000200003CLL) == 0)
      goto LABEL_66;
LABEL_71:
    v35 = sub_22F115B7C(v35);
  }
  if ((*(_BYTE *)(v35 + 23) & 0x10) == 0)
    goto LABEL_71;
LABEL_78:
  v51 = v35;
LABEL_79:
  v42 = sub_22F115668(v51);
  v43 = sub_22F1167E8(v52);
  v44 = sub_22F34AE9C((_QWORD *)*a1, v32, v42 | ((unint64_t)v43 << 32), *v10, a3);
  if (v44 < 0x10)
    goto LABEL_8;
  v45 = v44;
  sub_22EEB5360((uint64_t)v53, v44, 4uLL, 4);
  *v46 = *v10;
  v47 = *(_QWORD *)(*a1 + 88);
  v48 = v54.i64[0] - v54.i64[1];
  v49 = v54.i32[0] - v54.i32[2];
  if (v54.i32[0] == v54.i32[2])
    v49 = sub_22F11598C(v45);
  v13 = (uint64_t *)sub_22E3CD3D4(v47 + 2032, v49 + 8, 3);
  *v13 = v45;
  memcpy(v13 + 1, (const void *)(*(_QWORD *)v53 + v54.i64[1]), v48);
  v12 = 1;
LABEL_9:
  if (*(_BYTE **)v53 != v55 && *(_QWORD *)v53)
    MEMORY[0x2348A0E84]();
  if ((v12 & 1) == 0 || !v13)
    return 0;
LABEL_14:
  if (v13 != (uint64_t *)v7)
  {
    v16 = *(_QWORD *)(a2 + 16);
    v17 = (_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF8);
    if ((v16 & 4) != 0)
      v17 = (_QWORD *)*v17;
    v18 = *(_QWORD *)(a2 + 40);
    if ((v18 & 7) != 0)
      v19 = 0;
    else
      v19 = v18 & 0xFFFFFFFFFFFFFFF8;
    v20 = sub_22EFBF080(*(_QWORD *)(*a1 + 88), (uint64_t)v17, *(_DWORD *)(a2 + 64), *(_DWORD *)(a2 + 24), v19, *v13, (uint64_t)v13, *(_BYTE *)(a2 + 96) & 7, 0);
    v14 = v20;
    v21 = *(_DWORD *)(a2 + 96);
    if ((v21 & 0x1000) != 0)
      v22 = 0;
    else
      v22 = v21 & 0xFE000;
    v23 = (v21 >> 20);
    if (v23 == 255)
    {
      v24 = a2;
      if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x53)
      {
        v25 = *(_QWORD *)(a2 + 16);
        v26 = v25 & 0xFFFFFFFFFFFFFFF8;
        if ((v25 & 4) != 0)
          v26 = *(_QWORD *)v26;
        for (i = *(_WORD *)(v26 + 8) & 0x7F; i != 83; i = *(_WORD *)(v26 + 8) & 0x7F)
        {
          v28 = -40;
          if (i > 70)
          {
            if (i == 71)
            {
              v28 = -56;
              goto LABEL_48;
            }
            if (i == 81)
              goto LABEL_48;
          }
          else
          {
            if (i <= 0x18)
            {
              if (i == 16)
                goto LABEL_35;
              if (((1 << i) & 0x1066) != 0)
                goto LABEL_48;
              if (i == 24)
              {
LABEL_35:
                v28 = -48;
                goto LABEL_48;
              }
            }
            if (i == 70)
            {
              v28 = -64;
              goto LABEL_48;
            }
          }
          v29 = i - 52;
          if ((i - 33) >= 5)
            v30 = -48;
          else
            v30 = -64;
          if (v29 >= 6)
            v28 = v30;
          else
            v28 = -72;
LABEL_48:
          v31 = *(_QWORD *)(v26 + v28 + 16);
          v26 = v31 & 0xFFFFFFFFFFFFFFF8;
          if ((v31 & 4) != 0)
            v26 = *(_QWORD *)v26;
        }
        v24 = v26 - 40;
      }
      v23 = sub_22F36F2CC(*(_QWORD *)(v24 + 88), a2);
      v40 = (unsigned int *)(v14 + 96);
      v41 = *(_DWORD *)(v14 + 96) & 0xFFF01FFF | v22;
      *(_DWORD *)(v14 + 96) = v41;
      if (v23 >= 0xFF)
      {
        sub_22F3AC2B8(v14, v23);
LABEL_77:
        *(_QWORD *)v53 = a2;
        sub_22F25E108(a1 + 1, v53)[1] = v14;
        return v14;
      }
    }
    else
    {
      v40 = (unsigned int *)(v20 + 96);
      v41 = *(_DWORD *)(v20 + 96) & 0xFFF01FFF | v22;
    }
    *v40 = v41 & 0xF00FFFFF | (v23 << 20);
    goto LABEL_77;
  }
  return a2;
}

uint64_t sub_22ED84F70(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v47;
  unsigned int v48;
  _QWORD v49[8];
  void *v50;
  uint64_t v51;
  _BYTE v52[32];
  void *v53;
  uint64_t v54;
  _BYTE v55[64];
  char *v56;
  uint64_t v57;
  _QWORD v58[10];

  v58[8] = *MEMORY[0x24BDAC8D0];
  v56 = (char *)v58;
  v57 = 0x800000000;
  v53 = v55;
  v54 = 0x800000000;
  v50 = v52;
  v51 = 0x400000000;
  v48 = 0;
  v10 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = 8 * v10;
    v14 = 1;
    while (1)
    {
      v15 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + v11);
      v16 = v51;
      if (v51 >= (unint64_t)HIDWORD(v51))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v16 = v51;
      }
      *((_QWORD *)v50 + v16) = v15;
      LODWORD(v51) = v51 + 1;
      v17 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + v11);
      v18 = v57;
      if (v57 >= (unint64_t)HIDWORD(v57))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v18 = v57;
      }
      *(_QWORD *)&v56[8 * v18] = v17;
      LODWORD(v57) = v57 + 1;
      v19 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + v11);
      v20 = sub_22ED78310(a1, v19);
      if ((v20 & 1) != 0)
        break;
      v21 = v20 & 0xFFFFFFFFFFFFFFFELL;
      v22 = v19 != (v20 & 0xFFFFFFFFFFFFFFFELL);
      v10 = v54;
      if (v54 >= (unint64_t)HIDWORD(v54))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v54;
      }
      *((_QWORD *)v53 + v10) = v21;
      v12 |= v22;
      LODWORD(v10) = v54 + 1;
      LODWORD(v54) = v54 + 1;
      v11 += 8;
      if (v13 == v11)
        goto LABEL_13;
    }
  }
  else
  {
    v12 = 0;
LABEL_13:
    v23 = *(_DWORD *)(a2 + 20);
    if (v23)
    {
      v24 = 0;
      v14 = 1;
      while (1)
      {
        v25 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 8 * (v24 + *(_DWORD *)(a2 + 16)));
        v26 = v51;
        if (v51 >= (unint64_t)HIDWORD(v51))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v26 = v51;
        }
        *((_QWORD *)v50 + v26) = v25;
        LODWORD(v51) = v51 + 1;
        v27 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * (v24 + *(_DWORD *)(a2 + 16)));
        v28 = v57;
        if (v57 >= (unint64_t)HIDWORD(v57))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v28 = v57;
        }
        *(_QWORD *)&v56[8 * v28] = v27;
        LODWORD(v57) = v57 + 1;
        v29 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * (v24 + *(_DWORD *)(a2 + 16)));
        v30 = sub_22ED78310(a1, v29);
        if ((v30 & 1) != 0)
          break;
        v31 = v30 & 0xFFFFFFFFFFFFFFFELL;
        v32 = v29 != (v30 & 0xFFFFFFFFFFFFFFFELL);
        v10 = v54;
        if (v54 >= (unint64_t)HIDWORD(v54))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v10 = v54;
        }
        *((_QWORD *)v53 + v10) = v31;
        v12 |= v32;
        LODWORD(v10) = v54 + 1;
        LODWORD(v54) = v54 + 1;
        if (v23 == ++v24)
          goto LABEL_23;
      }
    }
    else
    {
LABEL_23:
      v33 = *(_DWORD *)(a2 + 80);
      if (v33)
      {
        v34 = 0;
        v14 = 1;
        while (1)
        {
          v35 = *(_QWORD *)(*(_QWORD *)(a2 + 72)
                          + 8 * (v34 + *(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 20)));
          v36 = v51;
          if (v51 >= (unint64_t)HIDWORD(v51))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v36 = v51;
          }
          *((_QWORD *)v50 + v36) = v35;
          LODWORD(v51) = v51 + 1;
          v37 = sub_22ED78310(a1, *(_QWORD *)(*(_QWORD *)(a2 + 32)+ 8 * (v34 + *(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 20))));
          if ((v37 & 1) != 0)
            break;
          v38 = v37 & 0xFFFFFFFFFFFFFFFELL;
          v39 = *(_QWORD *)(*(_QWORD *)(a2 + 32)
                          + 8 * (v34 + *(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 20))) != (v37 & 0xFFFFFFFFFFFFFFFELL);
          v10 = v54;
          if (v54 >= (unint64_t)HIDWORD(v54))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v10 = v54;
          }
          *((_QWORD *)v53 + v10) = v38;
          v12 |= v39;
          LODWORD(v10) = v54 + 1;
          LODWORD(v54) = v54 + 1;
          if (v33 == ++v34)
            goto LABEL_31;
        }
      }
      else
      {
LABEL_31:
        v40 = *a1;
        if (*(_DWORD *)(*a1 + 11992) != -1 || (v12 & 1) != 0)
        {
          v41 = *(unsigned int *)(a2 + 24);
          v42 = 0;
          if ((_DWORD)v41)
          {
            v43 = 0;
            v44 = 8 * v41;
            do
            {
              v45 = *(_QWORD *)(*(_QWORD *)(a2 + 64) + v43);
              if (v42 >= 8)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v42 = v48;
              }
              v49[v42] = v45;
              v42 = ++v48;
              v43 += 8;
            }
            while (v44 != v43);
            LODWORD(v10) = v54;
            v40 = *a1;
          }
          v14 = sub_22ED4E804(v40, *(_DWORD *)(a2 + 8), *(_BYTE *)(a2 + 12), *(_BYTE *)(a2 + 13), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), (char *)v50, a8, v56, v57, (uint64_t *)v53, v10, *(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL, (char *)v49, v42, 0, *(_DWORD *)(a2 + 80), v47, *(_DWORD *)(a2 + 40));
        }
        else
        {
          v14 = a2;
        }
      }
    }
  }
  if (v50 != v52)
    free(v50);
  if (v53 != v55)
    free(v53);
  if (v56 != (char *)v58)
    free(v56);
  return v14;
}

uint64_t sub_22ED854A0(uint64_t *a1, uint64_t a2)
{
  const void *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v17;
  const void *v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22[10];

  v22[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(const void **)(a2 + 72);
  v5 = *(unsigned int *)(a2 + 64);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = (*(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 20));
  v21 = 0;
  if (v7 < 9)
  {
    if (!(_DWORD)v7)
    {
      v15 = 0;
      v17 = *a1;
      goto LABEL_19;
    }
    v19 = *(const void **)(a2 + 72);
    v20 = *(unsigned int *)(a2 + 64);
  }
  else
  {
    v19 = *(const void **)(a2 + 72);
    v20 = *(unsigned int *)(a2 + 64);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  v8 = 0;
  LOBYTE(v9) = 0;
  v10 = 0;
  do
  {
    while (1)
    {
      v11 = sub_22ED78310(a1, *(_QWORD *)(v6 + 8 * v8));
      if (v11 >= 2)
        break;
      v9 = 1;
      if (v7 - 1 == v8++)
        return v9;
    }
    v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    v13 = *(_QWORD *)(v6 + 8 * v8) != (v11 & 0xFFFFFFFFFFFFFFFELL);
    v14 = v21;
    if (v21 >= 8uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v14 = v21;
    }
    v22[v14] = v12;
    v10 |= v13;
    v15 = ++v21;
    ++v8;
  }
  while (v7 != v8);
  if ((v9 & 1) == 0)
  {
    v17 = *a1;
    v4 = v19;
    v5 = v20;
    if ((v10 & 1) != 0)
      return sub_22ED51D60(v17, *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 40), v4, v5, *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), *(_QWORD *)(a2 + 80), (*(_DWORD *)(a2 + 20) + *(_DWORD *)(a2 + 16)), *(_QWORD *)(a2 + 88), *(unsigned int *)(a2 + 24), v22, v15, *(_DWORD *)(a2 + 44));
LABEL_19:
    if (*(_DWORD *)(v17 + 11992) == -1)
      return a2;
    return sub_22ED51D60(v17, *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 40), v4, v5, *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), *(_QWORD *)(a2 + 80), (*(_DWORD *)(a2 + 20) + *(_DWORD *)(a2 + 16)), *(_QWORD *)(a2 + 88), *(unsigned int *)(a2 + 24), v22, v15, *(_DWORD *)(a2 + 44));
  }
  return 1;
}

uint64_t sub_22ED8569C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  char *v12;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 56);
    v6 = v5 & 0xFFFFFFFFFFFFFFF8;
    if ((v5 & 4) != 0)
      v6 = *(_QWORD *)(v6 + 32);
    if (!sub_22ED73944(a1, v6))
      return 1;
    v7 = sub_22EACE428();
    if (!v7)
      return 1;
    v4 = v7;
    sub_22EFCCFA0(*(_QWORD *)(*a1 + 216), v7);
    if ((*(_BYTE *)(v4 + 28) & 0x80) != 0)
      return 1;
  }
  v8 = sub_22ED84358(a1, *(_QWORD *)(v2 + 24), 0);
  if ((v8 & 1) != 0)
    return 1;
  v9 = *a1;
  v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
  if (v4 || *(_DWORD *)(v9 + 11992) != -1 || *(_QWORD *)(v2 + 24) != v10)
  {
    v11 = *(_DWORD *)(v2 + 8);
    v2 = sub_22E3CD3D4(*(_QWORD *)(v9 + 88) + 2032, 32, 3);
    *(_BYTE *)v2 = 4;
    if (byte_255E04EB3)
    {
      v12 = sub_22F0D3748(4);
      ++*((_DWORD *)v12 + 2);
    }
    *(_DWORD *)(v2 + 8) = v11;
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v10;
  }
  return v2;
}

uint64_t sub_22ED857C4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v23;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22ED84358(a1, v4, 0);
    if ((v5 & 1) != 0)
      return 1;
  }
  else
  {
    v5 = 0;
  }
  v6 = sub_22ED84358(a1, *(_QWORD *)(v2 + 24), 0);
  if ((v6 & 1) != 0)
    return 1;
  v7 = sub_22ED84358(a1, *(_QWORD *)(v2 + 32), 0);
  if ((v7 & 1) != 0)
    return 1;
  v8 = sub_22ED84358(a1, *(_QWORD *)(v2 + 40), 0);
  if ((v8 & 1) != 0)
    return 1;
  v9 = sub_22ED78310(a1, *(_QWORD *)(v2 + 48));
  v10 = v9;
  if ((v9 & 1) != 0)
    return 1;
  if ((v9 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v10 = sub_22EB52F30(*a1, *(_DWORD *)(v2 + 84), (unsigned __int8 *)(v9 & 0xFFFFFFFFFFFFFFFELL), 0);
  if ((v10 & 1) != 0)
    return 1;
  if ((v10 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v10 = (uint64_t)sub_22EBCCCF0(*a1, (int *)(v10 & 0xFFFFFFFFFFFFFFFELL));
  v11 = sub_22ED78310(a1, *(_QWORD *)(v2 + 56));
  v12 = v11;
  if ((v11 & 1) != 0)
    return 1;
  if ((v11 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v12 = (unint64_t)sub_22EBCCCF0(*a1, (int *)(v11 & 0xFFFFFFFFFFFFFFFELL));
  v13 = sub_22ED84358(a1, *(_QWORD *)(v2 + 64), 0);
  v14 = v13;
  if ((v13 & 1) != 0)
    return 1;
  v15 = v5 & 0xFFFFFFFFFFFFFFFELL;
  v23 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) == -1
    && *(_QWORD *)(v2 + 16) == v15
    && *(_QWORD *)(v2 + 24) == (v6 & 0xFFFFFFFFFFFFFFFELL)
    && *(_QWORD *)(v2 + 32) == (v7 & 0xFFFFFFFFFFFFFFFELL)
    && *(_QWORD *)(v2 + 40) == (v8 & 0xFFFFFFFFFFFFFFFELL)
    && *(_QWORD *)(v2 + 48) == (v10 & 0xFFFFFFFFFFFFFFFELL)
    && *(_QWORD *)(v2 + 56) == (v12 & 0xFFFFFFFFFFFFFFFELL)
    && *(_QWORD *)(v2 + 64) == (v13 & 0xFFFFFFFFFFFFFFFELL))
  {
    v17 = v2;
  }
  else
  {
    v16 = v13 & 0xFFFFFFFFFFFFFFFELL;
    v17 = sub_22E8C6118(a1, *(_DWORD *)(v2 + 8), *(_DWORD *)(v2 + 80), v15, *(_DWORD *)(v2 + 84), v6 & 0xFFFFFFFFFFFFFFFELL, v7 & 0xFFFFFFFFFFFFFFFELL, v8 & 0xFFFFFFFFFFFFFFFELL, v10 & 0xFFFFFFFFFFFFFFFELL, v12 & 0xFFFFFFFFFFFFFFFELL, v13 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 88));
    if ((v17 & 1) != 0 && *(_QWORD *)(v2 + 64) != v16)
    {
      sub_22EA2BABC(*a1, *(_QWORD *)(v16 + 8));
      return 1;
    }
  }
  v18 = sub_22ED84358(a1, *(_QWORD *)(v2 + 72), 0);
  if ((v18 & 1) != 0)
    return 1;
  v19 = v18 & 0xFFFFFFFFFFFFFFFELL;
  v20 = v17 & 0xFFFFFFFFFFFFFFFELL;
  if ((v17 & 0xFFFFFFFFFFFFFFFELL) == v2 && *(_QWORD *)(v2 + 72) != v19)
  {
    v21 = sub_22E8C6118(a1, *(_DWORD *)(v2 + 8), *(_DWORD *)(v2 + 80), v23, *(_DWORD *)(v2 + 84), v6 & 0xFFFFFFFFFFFFFFFELL, v7 & 0xFFFFFFFFFFFFFFFELL, v8 & 0xFFFFFFFFFFFFFFFELL, v10 & 0xFFFFFFFFFFFFFFFELL, v12 & 0xFFFFFFFFFFFFFFFELL, v14 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 88));
    if ((v21 & 1) != 0)
      return 1;
    v20 = v21 & 0xFFFFFFFFFFFFFFFELL;
  }
  if (v20 != v2)
    return sub_22ED33C64(*a1, v20, v19);
  return v2;
}

uint64_t sub_22ED85A88(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  unsigned int v16;
  _QWORD v17[9];

  v17[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22ED85E28(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v16 = 0;
  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (uint64_t *)(a2 + 24);
    v8 = 1;
    while (1)
    {
      v9 = sub_22ED8569C(a1, *v7);
      if ((v9 & 1) != 0)
        break;
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      v6 = v6 || *v7 != v10;
      v11 = v16;
      if (v16 >= 8uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v16;
      }
      v17[v11] = v10;
      v12 = ++v16;
      ++v7;
      if (!--v5)
        goto LABEL_14;
    }
  }
  else
  {
    v12 = 0;
    v6 = 0;
LABEL_14:
    v13 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_DWORD *)(*a1 + 11992) == -1 && (*(_QWORD *)(a2 + 16) != v13 ? (v14 = 1) : (v14 = v6), (v14 & 1) == 0))
      return a2;
    else
      return sub_22ED36EF4(*a1, *(_DWORD *)(a2 + 8), v13, v17, v12);
  }
  return v8;
}

uint64_t sub_22ED85C10(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *v13;
  uint64_t v14;
  const char *v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  __int128 v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v28;
  const char *v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  _QWORD v34[14];

  v34[12] = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 32;
  sub_22F0D5A50(*(_QWORD *)(a2 + 32 + 8 * *(unsigned int *)(a2 + 8)));
  v6 = v5;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(unsigned int *)((v7 & 0xFFFFFFFFFFFFFFF8) + 72);
  v9 = *(unsigned int *)((v7 & 0xFFFFFFFFFFFFFFF8) + 76);
  v32 = v34;
  v33 = 0x400000000;
  if ((_DWORD)v8)
  {
    v28 = v5;
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 88;
    do
    {
      if (v9)
      {
        v11 = *(_QWORD *)(*(_QWORD *)v10 + 40) & 0xFFFFFFFFFFFFFFF8;
        if ((*(_QWORD *)(*(_QWORD *)v10 + 40) & 7) != 0 || v11 == 0)
        {
          v14 = 0;
          v15 = "";
        }
        else
        {
          v13 = *(_DWORD **)(v11 + 16);
          v16 = *v13;
          v15 = (const char *)(v13 + 4);
          v14 = v16;
        }
        v17 = sub_22ED8368C((uint64_t)a1, *(_QWORD *)(*(_QWORD *)v10 + 48));
        v29 = v15;
        v30 = v14;
        v31 = v17;
      }
      else
      {
        v29 = 0;
        v30 = 0;
        v31 = 0;
      }
      v18 = sub_22E4EF088((uint64_t)&v32, (unint64_t)&v29, 1);
      v19 = (char *)v32 + 24 * v33;
      v20 = *(_OWORD *)v18;
      *((_QWORD *)v19 + 2) = *(_QWORD *)(v18 + 16);
      *(_OWORD *)v19 = v20;
      v21 = v33 + 1;
      LODWORD(v33) = v33 + 1;
      v10 += 8;
      --v9;
      --v8;
    }
    while (v8);
    v7 = *(_QWORD *)(a2 + 16);
    v22 = v32;
    v6 = v28;
  }
  else
  {
    v21 = 0;
    v22 = v34;
  }
  sub_22ED379B0(*a1, v6, 0, (v7 >> 1) & 3, (uint64_t)v22, v21, 0);
  v23 = *a1;
  sub_22E905168(*a1, 0);
  v24 = sub_22ED84358(a1, *(_QWORD *)(v4 + 8 * *(unsigned int *)(a2 + 8)), 0);
  v25 = *(_QWORD *)(*(_QWORD *)(v23 + 1896) + 8 * *(unsigned int *)(v23 + 1904) - 8);
  --*(_QWORD *)(v25 + 360);
  if ((v24 & 1) != 0)
  {
    sub_22F344E80(*a1);
    v26 = 1;
  }
  else
  {
    v26 = sub_22ED37CF8((_QWORD *)*a1, v24 & 0xFFFFFFFFFFFFFFFELL);
  }
  if (v32 != v34)
    free(v32);
  return v26;
}

uint64_t sub_22ED85E28(uint64_t *a1, uint64_t a2)
{
  return sub_22ED892CC(a1, a2, 0);
}

uint64_t sub_22ED85E30(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ED83974(a1, *(unsigned __int8 **)(a2 + 16), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22E9FB310(*a1, *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL, *(_BYTE *)(a2 + 32) & 1);
}

uint64_t sub_22ED85E84(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[6];
  uint64_t v30;
  _OWORD v31[2];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  void *v38;
  _QWORD v39[7];

  v39[6] = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 1904);
  if ((_DWORD)v5)
    v6 = *(_QWORD *)(*(_QWORD *)(v4 + 1896) + 8 * v5 - 8);
  else
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 216);
  if (v7)
    v8 = v7 - 72;
  else
    v8 = 0;
  *(_DWORD *)(v6 + 8) &= ~0x20000u;
  if (!sub_22E9FC668(*a1, *(_DWORD *)(v8 + 24)))
    return 1;
  v9 = sub_22E9F85C0();
  if (!v9)
    return 1;
  v12 = v9;
  *(_QWORD *)&v31[0] = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
  sub_22F25E108(a1 + 1, v31)[1] = v9;
  *(_QWORD *)(v6 + 176) = v12;
  v13 = sub_22ED84358(a1, *(_QWORD *)(a2 + 32), 0);
  if ((v13 & 1) != 0)
    return 1;
  v14 = sub_22ED84358(a1, *(_QWORD *)(a2 + 40), 0);
  if ((v14 & 1) != 0)
    return 1;
  v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
  if (!sub_22E9F9340((_QWORD *)*a1, (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFFELL)))
    return 1;
  *(_DWORD *)(v6 + 8) &= ~0x20000u;
  *(_QWORD *)(v6 + 336) = v13 & 0xFFFFFFFFFFFFFFFELL;
  *(_QWORD *)(v6 + 344) = v15;
  v16 = sub_22ED84358(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v16 & 1) != 0)
    return 1;
  sub_22F31B0C0((uint64_t)v31, *a1, v8, v6, v16 & 0xFFFFFFFFFFFFFFFELL);
  if (!v37)
    goto LABEL_37;
  v17 = sub_22ED83974(a1, *(unsigned __int8 **)(a2 + 80), 0);
  if ((v17 & 1) != 0)
    goto LABEL_37;
  *(_QWORD *)&v34 = v17 & 0xFFFFFFFFFFFFFFFELL;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v12 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
      || (sub_22F31B2A0((uint64_t)v31) & 1) != 0)
    {
      goto LABEL_33;
    }
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(a2 + 56);
  if (v18)
  {
    v19 = sub_22ED84358(a1, v18, 0);
    if ((v19 & 1) != 0)
      goto LABEL_37;
    *((_QWORD *)&v32 + 1) = v19 & 0xFFFFFFFFFFFFFFFELL;
  }
  v20 = *(_QWORD *)(a2 + 48);
  if (v20)
  {
    v21 = sub_22ED84358(a1, v20, 0);
    if ((v21 & 1) != 0)
      goto LABEL_37;
    *(_QWORD *)&v32 = v21 & 0xFFFFFFFFFFFFFFFELL;
  }
  v22 = *(_QWORD *)(a2 + 96);
  if (v22)
  {
    v23 = sub_22ED84358(a1, v22, 0);
    if ((v23 & 1) != 0)
      goto LABEL_37;
    *(_QWORD *)&v35 = v23 & 0xFFFFFFFFFFFFFFFELL;
  }
  v24 = sub_22ED78310(a1, *(_QWORD *)(a2 + 64));
  if ((v24 & 1) != 0)
    goto LABEL_37;
  *(_QWORD *)&v33 = v24 & 0xFFFFFFFFFFFFFFFELL;
  v25 = sub_22ED78310(a1, *(_QWORD *)(a2 + 72));
  if ((v25 & 1) != 0)
    goto LABEL_37;
  *((_QWORD *)&v33 + 1) = v25 & 0xFFFFFFFFFFFFFFFELL;
  v26 = *(_QWORD *)(a2 + 88);
  if (!v26)
    goto LABEL_33;
  v27 = sub_22ED84358(a1, v26, 0);
  if ((v27 & 1) != 0)
  {
LABEL_37:
    v10 = 1;
    goto LABEL_38;
  }
  *((_QWORD *)&v34 + 1) = v27 & 0xFFFFFFFFFFFFFFFELL;
LABEL_33:
  v30 = v36;
  v29[4] = v34;
  v29[5] = v35;
  v29[0] = v31[0];
  v29[1] = v31[1];
  v29[2] = v32;
  v29[3] = v33;
  v28 = sub_22F3F2E7C(*(_QWORD *)(*a1 + 88), (uint64_t)v29);
  if (v28)
    v10 = v28;
  else
    v10 = 1;
LABEL_38:
  if (v38 != v39)
    free(v38);
  return v10;
}

uint64_t sub_22ED8616C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;

  v2 = a2;
  v4 = sub_22ED84358(a1, *(_QWORD *)(a2 + 8), 0);
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ED78310(a1, *(_QWORD *)(v2 + 16));
  if ((v5 & 1) != 0)
    return 1;
  v6 = (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL);
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(unsigned __int8 **)(v2 + 16) != v6
    || *(_QWORD *)(v2 + 8) != (v4 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22F3440A8(*a1, *(_DWORD *)(v2 + 4), v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 24), *(unsigned int *)(v2 + 24), v6, *(_DWORD *)(v2 + 28));
  }
  return v2;
}

uint64_t sub_22ED86214(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v4 = *a1;
  if (*(_DWORD *)(*(_QWORD *)(v4 + 72) + 72))
    sub_22EC80540(v4);
  v5 = sub_22ED84358(a1, *(_QWORD *)(a2 + 8), 0);
  if ((v5 & 1) != 0)
    return 1;
  if (v5 >= 2 && *(_DWORD *)(*(_QWORD *)(*a1 + 72) + 72) != 0)
    sub_22EC9AE58((_QWORD *)*a1, *(_DWORD *)(a2 + 4), (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v7 = *(_QWORD *)(a2 + 16);
  v8 = v7 ? *(_QWORD *)(v7 + 8) : 0;
  sub_22ED89534((uint64_t)&v22, (uint64_t)a1, *(_DWORD *)(a2 + 4), v8, *(_QWORD *)(a2 + 24), 0);
  if ((_BYTE)v23)
    return 1;
  v9 = sub_22ED78310(a1, *(_QWORD *)(a2 + 32));
  if ((v9 & 1) != 0)
    return 1;
  v10 = *a1;
  v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
  if ((v9 & 0xFFFFFFFFFFFFFFFELL) != 0)
  {
    sub_22EFF605C(v9 & 0xFFFFFFFFFFFFFFFELL);
    v13 = v12;
  }
  else
  {
    v13 = 0;
  }
  v14 = 1;
  v15 = sub_22EBCF22C(v10, v11, v13, 1, 0) & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(a2 + 32) && !v15)
    return v14;
  v16 = sub_22ED84358(a1, *(_QWORD *)(a2 + 40), 0);
  if ((v16 & 1) != 0)
    return 1;
  v17 = *a1;
  v18 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(a2 + 8) != v18)
    goto LABEL_21;
  v21 = *(_QWORD *)(a2 + 16);
  if (v21)
    v21 = *(_QWORD *)(v21 + 8);
  if ((_QWORD)v22 == v21
    && *(_OWORD *)(a2 + 24) == __PAIR128__(v11, *((unint64_t *)&v22 + 1))
    && *(_QWORD *)(a2 + 40) == (v16 & 0xFFFFFFFFFFFFFFFELL))
  {
    return a2;
  }
LABEL_21:
  v19 = *(_DWORD *)(a2 + 4);
  v24 = v22;
  v25 = v23;
  return sub_22ED31008(v17, v19, *(_DWORD *)(a2 + 48), v18, (uint64_t)&v24, v15, *(_DWORD *)(a2 + 52), (_DWORD *)(v16 & 0xFFFFFFFFFFFFFFFELL));
}

uint64_t sub_22ED863E8(uint64_t a1, unsigned __int16 *a2)
{
  unsigned __int16 *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  char *v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int16 *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unsigned __int8 v42;
  unsigned __int8 v43;

  v2 = a2;
  if ((*a2 & 0x2000) != 0)
    v4 = *((_QWORD *)a2 + 2);
  else
    v4 = 0;
  v5 = sub_22ED84358(a1, v4, 0);
  if ((v5 & 1) != 0)
    return 1;
  v6 = *v2;
  if ((v6 & 0x600) == 0x200)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
  }
  else
  {
    if ((v6 & 0x1000) != 0)
    {
      v12 = (v6 >> 13) & 1;
      v38 = *(_QWORD *)&v2[4 * v12 + 8];
      if (v38)
        v11 = *(_QWORD *)(v38 + 8);
      else
        v11 = 0;
    }
    else
    {
      v11 = 0;
      LODWORD(v12) = (v6 >> 13) & 1;
    }
    sub_22ED89534((uint64_t)&v39, a1, *((_DWORD *)v2 + 1), v11, *(_QWORD *)&v2[4 * v12 + 8 + 4 * ((v6 >> 12) & 1)], (v6 & 0x700) == 256);
    if (v41)
      return 1;
    v7 = v39;
    v8 = v40;
    v9 = v42;
    v10 = v43;
    LODWORD(v6) = *v2;
  }
  v13 = (v6 & 0x700) != 0x100 || v9 == 0;
  v14 = v13;
  if (!v13 && !v10)
  {
    v15 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 8, 3);
    sub_22F0D5A50(*(_QWORD *)&v2[4 * ((*v2 >> 12) & 1) + 12 + 4 * ((*v2 >> 13) & 1)]);
    v17 = v16;
    *(_BYTE *)v15 = 19;
    if (byte_255E04EB3)
    {
      v18 = sub_22F0D3748(19);
      ++*((_DWORD *)v18 + 2);
    }
    *(_WORD *)v15 &= ~0x100u;
    *(_DWORD *)(v15 + 4) = v17;
    goto LABEL_22;
  }
  v15 = sub_22ED84358(a1, *(_QWORD *)&v2[4 * ((v6 >> 12) & 1) + 12 + 4 * ((v6 >> 13) & 1)], 0);
  if ((v15 & 1) != 0)
    return 1;
  if (v10)
    v21 = v14;
  else
    v21 = 1;
  if (v21 == 1)
  {
LABEL_22:
    v19 = *v2;
    if ((v19 & 0x800) != 0)
      v20 = *(_QWORD *)&v2[4 * ((v19 >> 13) & 1) + 16 + 4 * ((v19 >> 12) & 1)];
    else
      v20 = 0;
    v22 = sub_22ED84358(a1, v20, 0);
    if ((v22 & 1) == 0)
      goto LABEL_32;
    return 1;
  }
  v22 = 0;
LABEL_32:
  v23 = *(_QWORD *)a1;
  v24 = *v2;
  v25 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1)
    goto LABEL_39;
  v26 = (v24 & 0x2000) != 0 ? *((_QWORD *)v2 + 2) : 0;
  if (v26 != v25)
    goto LABEL_39;
  if ((v24 & 0x1000) != 0)
  {
    v34 = (v24 >> 13) & 1;
    v33 = *(_QWORD *)&v2[4 * v34 + 8];
    if (v33)
      v33 = *(_QWORD *)(v33 + 8);
  }
  else
  {
    v33 = 0;
    LODWORD(v34) = (v24 >> 13) & 1;
  }
  if (v7 != v33
    || (v35 = v2 + 8, v36 = v34 + ((v24 >> 12) & 1), v8 != *(_QWORD *)&v2[4 * v36 + 8])
    || *(_QWORD *)&v35[4 * (v36 + 1)] != (v15 & 0xFFFFFFFFFFFFFFFELL)
    || ((v24 & 0x800) != 0 ? (v37 = *(_QWORD *)&v35[4 * (v36 + 2)]) : (v37 = 0), v37 != (v22 & 0xFFFFFFFFFFFFFFFELL)))
  {
LABEL_39:
    v28 = (v24 >> 8) & 7;
    v29 = *((_DWORD *)v2 + 1);
    v30 = *((_DWORD *)v2 + 2);
    v31 = *((_DWORD *)v2 + 3);
    if ((v24 & 0x800) != 0)
      v32 = *(_DWORD *)&v2[4 * ((v24 >> 12) & 1) + 20 + 4 * ((v24 >> 13) & 1)];
    else
      v32 = 0;
    v39 = v7;
    v40 = v8;
    v41 = 0;
    v42 = v9;
    v43 = v10;
    return sub_22ED2D6D0(v23, v29, v28, v30, v25, (uint64_t)&v39, v31, (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFFELL), v32, (_BYTE *)(v22 & 0xFFFFFFFFFFFFFFFELL));
  }
  return (uint64_t)v2;
}

uint64_t sub_22ED86710(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = a2;
  v4 = sub_22ED78310(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = (unint64_t)sub_22EBCCCF0(*a1, (int *)(v4 & 0xFFFFFFFFFFFFFFFELL)) & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 16) != v5)
    return sub_22ED343AC(*a1, *(_DWORD *)(v2 + 4), *(_DWORD *)(v2 + 8), v5);
  return v2;
}

uint64_t sub_22ED86788(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  char v13;
  int v14;
  char *v15;
  uint64_t v16;
  int v17;
  char v18;
  __int128 v19;
  void *v20[2];
  __int128 v21;
  void *v22;
  __int128 v23;
  void *v24;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22ED89638(a1, v4, *(void **)(a2 + 24), 0, 0);
    if (!v5)
      return 1;
    v7 = v5;
    v8 = v6;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v21 = *(_OWORD *)(a2 + 32);
  v22 = *(void **)(a2 + 48);
  v9 = v21;
  if ((_QWORD)v21)
  {
    sub_22ED89DE4((__n128 *)&v19, (uint64_t)a1, (__n128 *)&v21);
    v21 = v19;
    v22 = v20[0];
    v9 = v19;
    if (!(_QWORD)v19)
      return 1;
  }
  if (*(_DWORD *)(*a1 + 11992) == -1)
  {
    v10 = v7 == *(_QWORD *)(a2 + 16) && v8 == *(_QWORD *)(a2 + 24);
    if (v10 && v9 == *(_QWORD *)(a2 + 32))
      return a2;
  }
  v19 = 0u;
  *(_OWORD *)v20 = 0u;
  sub_22E8ACE30((uint64_t)&v19, v7, v8);
  v11 = 1;
  switch(sub_22F3322F4(*a1, 0, (uint64_t)&v19, (uint64_t *)&v21))
  {
    case 0u:
      if (!*(_BYTE *)(a2 + 12))
        goto LABEL_21;
      goto LABEL_19;
    case 1u:
      if (!*(_BYTE *)(a2 + 12))
        goto LABEL_19;
LABEL_21:
      v11 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 8, 3);
      v14 = *(_DWORD *)(a2 + 8);
      *(_BYTE *)v11 = 19;
      if (byte_255E04EB3)
      {
        v15 = sub_22F0D3748(19);
        ++*((_DWORD *)v15 + 2);
      }
      *(_WORD *)v11 &= ~0x100u;
      *(_DWORD *)(v11 + 4) = v14;
      break;
    case 2u:
      v13 = 0;
      goto LABEL_25;
    case 3u:
      break;
    default:
LABEL_19:
      v13 = 1;
LABEL_25:
      v16 = sub_22ED85E28(a1, *(_QWORD *)(a2 + 56));
      if ((v16 & 1) != 0)
        v11 = 1;
      else
        v11 = v16;
      if ((v13 & 1) == 0 && (v16 & 1) == 0)
      {
        v17 = *(_DWORD *)(a2 + 8);
        v18 = *(_BYTE *)(a2 + 12);
        v23 = v21;
        v24 = v22;
        v11 = sub_22F344AB0(*a1, v17, v18, v7, v8, &v23, v16 & 0xFFFFFFFFFFFFFFFELL);
      }
      break;
  }
  if (HIDWORD(v20[1]))
    free(v20[0]);
  return v11;
}

uint64_t sub_22ED869AC(uint64_t a1, uint64_t a2)
{
  return sub_22ED84358(a1, *(_QWORD *)(a2 + 8), 0);
}

uint64_t sub_22ED869B8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED86A24(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED86A90(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED86AFC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED86B68(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED86BD8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED86C44(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED86CB0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED86D1C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED86D88(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED86DF4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED86E60(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED86ECC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED86F38(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED86FA4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED87010(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED8707C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED870E8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED87154(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED871C0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED8722C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED87298(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED87304(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED87370(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED873DC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED87448(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED874B4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED87520(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED8758C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED875F8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED87664(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED876D0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED8773C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED877A8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED87814(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED87880(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED878EC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED87958(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED879C4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED87A30(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED87A9C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED87B08(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED87B74(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED87BE0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED87C4C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED87CB8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED87D24(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED87D90(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED87DFC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED87E68(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED87ED4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED87F40(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED87FAC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED88018(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED88084(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED880F0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED8815C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED881C8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED88234(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED882A0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED8830C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED88378(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED883E4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ED8B20C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ED88450(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 56);
    if ((v5 & 4) != 0)
    {
      v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF8) + 32);
      if (v6)
        goto LABEL_6;
    }
    else if (v5 >= 8)
    {
      v6 = v5 & 0xFFFFFFFFFFFFFFF8;
LABEL_6:
      v7 = (uint64_t *)sub_22ED73944(a1, v6);
      if (!v7)
        return 1;
      v8 = (uint64_t)v7;
      v9 = *v7;
      goto LABEL_10;
    }
    v10 = sub_22ED8368C((uint64_t)a1, *(_QWORD *)(v4 + 48));
    if (v10 < 0x10)
      return 1;
    v9 = v10;
    v8 = 0;
LABEL_10:
    v11 = *(_QWORD *)(v4 + 40);
    if ((v11 & 7) != 0)
      v12 = 0;
    else
      v12 = v11 & 0xFFFFFFFFFFFFFFF8;
    v4 = sub_22EB001B8((_QWORD *)*a1, v8, v9, *(_DWORD *)(v4 + 64), *(_DWORD *)(v4 + 24), v12, 0);
    if (!v4)
      return 1;
  }
  v13 = sub_22ED84358(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v13 & 1) == 0)
    return sub_22ED36AF8(*a1, *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), v4, v13 & 0xFFFFFFFFFFFFFFFELL);
  return 1;
}

uint64_t sub_22ED8853C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = a2;
  v4 = sub_22ED84358(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v4 & 1) != 0)
    return 1;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 16) != v5)
    return sub_22F344474(*a1, *(_DWORD *)(v2 + 8), v5);
  return v2;
}

uint64_t sub_22ED885A8(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a2;
  v4 = sub_22ED78310(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ED36D40(*a1, *(_DWORD *)(v2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
  if ((v5 & 1) != 0)
    return 1;
  v6 = sub_22ED84358(a1, *(_QWORD *)(v2 + 24), 0);
  if ((v6 & 1) != 0)
    return 1;
  v7 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) != -1
    || *(_QWORD *)(v2 + 16) != v7
    || *(_QWORD *)(v2 + 24) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22F344708((uint64_t)*a1, *(_DWORD *)(v2 + 8), v7, v6 & 0xFFFFFFFFFFFFFFFELL);
  }
  return v2;
}

uint64_t sub_22ED8865C(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22ED78310(a1, v4);
    if ((v5 & 1) != 0)
      return 1;
  }
  else
  {
    v5 = 0;
  }
  v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) != -1 || *(_QWORD *)(v2 + 16) != v6)
    return sub_22ED36B94(*a1, *(_DWORD *)(v2 + 8), v6);
  return v2;
}

uint64_t sub_22ED886D4(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v21;
  uint64_t v22[9];

  v22[8] = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)(a2 + 16);
  v5 = sub_22ED84358(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v5 & 1) != 0)
    return 1;
  v21 = 0;
  v6 = *(unsigned __int16 *)(a2 + 12);
  v7 = v6 | (*(unsigned __int8 *)(a2 + 14) << 16);
  v8 = (unsigned __int16)v6;
  if (!(_WORD)v6)
  {
    v9 = 0;
    if ((v7 & 0x10000) != 0)
    {
LABEL_14:
      v16 = v4[(unsigned __int16)v7 + 1];
      if (v16)
      {
        v17 = sub_22ED84358(a1, v16, 0);
        if ((v17 & 1) != 0)
          return 1;
        goto LABEL_18;
      }
    }
LABEL_17:
    v17 = 0;
LABEL_18:
    v18 = v5 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_DWORD *)(*a1 + 11992) == -1
      && !((*v4 != v18) | v9 & 1)
      && (((*(unsigned __int16 *)(a2 + 12) | (*(unsigned __int8 *)(a2 + 14) << 16)) & 0x10000) != 0
        ? (v19 = v4[*(unsigned __int16 *)(a2 + 12) + 1])
        : (v19 = 0),
          v19 == (v17 & 0xFFFFFFFFFFFFFFFELL)))
    {
      return a2;
    }
    else
    {
      return sub_22F3444EC(*a1, *(_DWORD *)(a2 + 8), v18, v22, v21, v17 & 0xFFFFFFFFFFFFFFFELL);
    }
  }
  v9 = 0;
  v10 = (_QWORD *)(a2 + 24);
  v11 = 1;
  while (1)
  {
    v12 = sub_22ED84358(a1, *v10, 0);
    if ((v12 & 1) != 0)
      return v11;
    v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
    v14 = *v10 != (v12 & 0xFFFFFFFFFFFFFFFELL);
    v15 = v21;
    if (v21 >= 8uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v15 = v21;
    }
    v22[v15] = v13;
    v9 |= v14;
    ++v21;
    ++v10;
    if (!--v8)
    {
      v7 = *(unsigned __int16 *)(a2 + 12) | (*(unsigned __int8 *)(a2 + 14) << 16);
      if ((v7 & 0x10000) == 0)
        goto LABEL_17;
      goto LABEL_14;
    }
  }
}

uint64_t sub_22ED888FC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = a2;
  v4 = sub_22ED84358(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v4 & 1) != 0)
    return 1;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 16) != v5)
    return sub_22F344820(*a1, *(_DWORD *)(v2 + 8), v5);
  return v2;
}

unint64_t sub_22ED88968(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = 1;
  v5 = sub_22ED84358(a1, *(_QWORD *)(a2 + 8), 1);
  if ((v5 & 1) == 0)
  {
    v6 = sub_22ED78310(a1, *(_QWORD *)(a2 + 16));
    if ((v6 & 1) != 0)
      return 1;
    v7 = sub_22ED84358(a1, *(_QWORD *)(a2 + 24), 0);
    if ((v7 & 1) != 0)
      return 1;
    v8 = v5 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_DWORD *)(*a1 + 11992) == -1
      && *(_QWORD *)(a2 + 8) == v8
      && *(_QWORD *)(a2 + 16) == (v6 & 0xFFFFFFFFFFFFFFFELL)
      && *(_QWORD *)(a2 + 24) == (v7 & 0xFFFFFFFFFFFFFFFELL))
    {
      return a2;
    }
    v9 = sub_22ED3169C(*a1, *(_DWORD *)(a2 + 32), v8, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 36));
    if ((v9 & 1) != 0)
    {
      return 1;
    }
    else
    {
      v4 = 1;
      if ((v7 & 0xFFFFFFFFFFFFFFFELL) != 0 && (v9 & 0xFFFFFFFFFFFFFFFELL) != 0)
      {
        *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFFELL) + 24) = v7 & 0xFFFFFFFFFFFFFFFELL;
        return v9 & 0xFFFFFFFFFFFFFFFELL;
      }
    }
  }
  return v4;
}

uint64_t sub_22ED88A5C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ED83974(a1, *(unsigned __int8 **)(a2 + 8), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22ED358AC(*a1, *(_DWORD *)(a2 + 4), v4 & 0xFFFFFFFFFFFFFFFELL, 0);
}

uint64_t sub_22ED88AAC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_22ED78310(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ED85E28(a1, *(_QWORD *)(a2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  else
    return sub_22F3448B8((_QWORD *)*a1, *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL, v5 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22ED88B18(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ED85E28(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22F3F29BC(*(_QWORD *)(*a1 + 88), *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22ED88B60(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  unint64_t v8;

  v2 = a2;
  v4 = sub_22ED85E28(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_BYTE **)(v2 + 24);
  if (*v5 == 95)
  {
    v6 = sub_22ED88B18(a1, (uint64_t)v5);
    if ((v6 & 1) != 0)
      return 1;
  }
  else
  {
    v6 = sub_22ED88AAC(a1, (uint64_t)v5);
    if ((v6 & 1) != 0)
      return 1;
  }
  v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) == -1
    && *(_QWORD *)(v2 + 16) == v8
    && *(_QWORD *)(v2 + 24) == (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return v2;
  }
  return sub_22ED3765C(*a1, *(_BYTE *)(v2 + 8), *(_DWORD *)(v2 + 12), v8, v6 & 0xFFFFFFFFFFFFFFFELL);
}

unint64_t sub_22ED88C14(uint64_t *a1, unsigned __int16 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t result;
  int v22[3];
  int v23;
  uint64_t v24;
  int v25;

  v4 = *a1;
  v25 = 4;
  v24 = 0;
  v23 = 3;
  *(_QWORD *)v22 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v25, v22, (__int16 *)(v4 + 1693), &v24, &v23);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  v11 = a2 + 12;
  v12 = sub_22ED78310(a1, *((_QWORD *)a2 + 3));
  v13 = sub_22ED2C1F4(*a1, *((unsigned int *)a2 + 1), v12);
  if ((v13 & 1) != 0)
  {
    sub_22EB48E64(v4);
  }
  else
  {
    v14 = *a2;
    if ((v14 & 0x100) != 0)
      v15 = *(_QWORD *)&v11[4 * ((v14 >> 8) & 1)];
    else
      v15 = 0;
    v16 = sub_22ED78310(a1, v15);
    v17 = sub_22ED2C1F4(*a1, *((unsigned int *)a2 + 1), v16);
    sub_22EB48E64(v4);
    if ((v17 & 1) == 0)
    {
      v18 = (*a2 & 0x100) != 0 ? *((_DWORD *)a2 + 12) : 0;
      v19 = sub_22ED2C48C(*a1, *((_DWORD *)a2 + 1), v13 & 0xFFFFFFFFFFFFFFFELL, v18, v17 & 0xFFFFFFFFFFFFFFFELL, *((_DWORD *)a2 + 2));
      if ((v19 & 1) == 0)
      {
        v20 = sub_22ED84358(a1, *(_QWORD *)&v11[4 * (((unint64_t)*a2 >> 8) & 1) + 4], 0);
        if ((v20 & 1) == 0)
        {
          result = v19 & 0xFFFFFFFFFFFFFFFELL;
          *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFFFELL)
                    + 8 * (((unint64_t)*(unsigned __int16 *)(v19 & 0xFFFFFFFFFFFFFFFELL) >> 8) & 1)
                    + 32) = v20 & 0xFFFFFFFFFFFFFFFELL;
          return result;
        }
      }
    }
  }
  return 1;
}

uint64_t sub_22ED88E24(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ED84358(a1, *(_QWORD *)(a2 + 24), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22ED2C5AC(*a1, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22ED88E74(uint64_t *a1, unsigned __int16 *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  if ((*a2 & 0x100) != 0)
    v4 = *((_QWORD *)a2 + 3);
  else
    v4 = 0;
  v5 = sub_22ED84358(a1, v4, 0);
  if ((v5 & 1) != 0)
    return 1;
  v6 = *a2;
  if ((v6 & 0x200) != 0)
  {
    v8 = (v6 >> 8) & 1;
    v11 = *(_QWORD *)&a2[4 * v8 + 12];
    v7 = v11 ? *(_QWORD *)(v11 + 8) : 0;
  }
  else
  {
    v7 = 0;
    LODWORD(v8) = (v6 >> 8) & 1;
  }
  sub_22ED89534((uint64_t)&v12, (uint64_t)a1, *((_DWORD *)a2 + 1), v7, *(_QWORD *)&a2[4 * v8 + 12 + 4 * ((v6 >> 9) & 1)], 2);
  if ((_BYTE)v13)
    return 1;
  v9 = *((_DWORD *)a2 + 1);
  v14 = v12;
  v15 = v13;
  if ((sub_22ED2E0D4(*a1, v9, *((_DWORD *)a2 + 4), v5 & 0xFFFFFFFFFFFFFFFELL, (uint64_t *)&v14, *((_DWORD *)a2 + 5)) & 1) != 0
    || (sub_22ED84358(a1, *(_QWORD *)&a2[4 * ((*a2 >> 9) & 1) + 16 + 4 * (HIBYTE(*a2) & 1)], 0) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return sub_22ED2E298();
  }
}

uint64_t sub_22ED88F9C(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  unsigned int *v4;
  unint64_t v6;
  char **v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char *v11;
  unsigned int v13;
  char *v14[2];

  v4 = a2;
  v14[1] = *(char **)MEMORY[0x24BDAC8D0];
  v13 = 0;
  v7 = (char **)(a2 + 4);
  v6 = *a2;
  if (v6 >= 0x100)
  {
    v9 = 0;
    v10 = 8 * (v6 >> 8);
    do
    {
      v11 = *v7;
      if (*v7)
      {
        if (v9)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v9 = v13;
        }
        v14[v9] = v11;
        v9 = ++v13;
      }
      ++v7;
      v10 -= 8;
    }
    while (v10);
  }
  v8 = sub_22ED84358(a1, *((_QWORD *)v4 + 1), a3);
  if ((v8 & 1) != 0)
    return 1;
  if (*((_QWORD *)v4 + 1) != (v8 & 0xFFFFFFFFFFFFFFFELL))
  {
    if (v13)
      return (uint64_t)sub_22ED2C6AC(*a1, v4[1], v14, v13, v8 & 0xFFFFFFFFFFFFFFFELL);
    return v8;
  }
  return (uint64_t)v4;
}

uint64_t sub_22ED890F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v5 = sub_22ED84358(a1, *(_QWORD *)(a2 + 16), a3);
  if ((v5 & 1) != 0)
    return 1;
  v6 = *(_QWORD *)(a2 + 8);
  v8 = v6;
  v9 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v8, &v9)
    && v9 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
  {
    v6 = *(_QWORD *)(v9 + 8);
  }
  if (!v6)
    return 1;
  if (v6 == *(_QWORD *)(a2 + 8))
    *(_QWORD *)(v6 + 48) = 0;
  return sub_22F343D54(*(_QWORD **)a1, *(_DWORD *)(a2 + 4), v6, 0, v5 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22ED891A0(uint64_t a1, unsigned __int16 *a2)
{
  _DWORD *v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v2 = a2;
  v4 = *a2;
  if ((v4 & 0x100) != 0 && (v15 = *((_QWORD *)a2 + 2)) != 0)
    v5 = *(_QWORD *)(v15 + 8);
  else
    v5 = 0;
  v6 = (uint64_t *)(a2 + 8);
  sub_22ED89534((uint64_t)&v16, a1, *((_DWORD *)a2 + 1), v5, *(_QWORD *)&a2[4 * ((v4 >> 8) & 1) + 8], 0);
  if ((_BYTE)v17)
    return 1;
  v7 = sub_22ED84358(a1, v6[(((unint64_t)*(unsigned __int16 *)v2 >> 8) & 1) + 1], 0);
  if ((v7 & 1) != 0)
    return 1;
  v8 = *(_QWORD *)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1)
    goto LABEL_11;
  v9 = *(unsigned __int16 *)v2;
  if ((v9 & 0x100) != 0)
  {
    v10 = *v6;
    if (*v6)
      v10 = *(_QWORD *)(v10 + 8);
  }
  else
  {
    v10 = 0;
  }
  if ((_QWORD)v16 != v10
    || (v11 = (v9 >> 8) & 1, *((_QWORD *)&v16 + 1) != v6[v11])
    || v6[(v11 + 1)] != (v7 & 0xFFFFFFFFFFFFFFFELL))
  {
LABEL_11:
    v12 = v2[1];
    v13 = v2[2];
    v18 = v16;
    v19 = v17;
    return sub_22F343FAC(v8, v12, v13, (uint64_t)&v18, v2[3], (_BYTE *)(v7 & 0xFFFFFFFFFFFFFFFELL));
  }
  return (uint64_t)v2;
}

uint64_t sub_22ED892CC(uint64_t *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  unsigned int v12;
  char v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  _BYTE *v26[9];

  v26[8] = *(_BYTE **)MEMORY[0x24BDAC8D0];
  v6 = *a1;
  sub_22E905168(*a1, 0);
  v7 = (_QWORD *)(a2 + 16);
  v8 = *(unsigned int *)a2;
  v9 = a2 + 16 + 8 * (v8 >> 8);
  v10 = 8 * (v8 >> 8);
  while (v10)
  {
    v11 = *(_BYTE **)(a2 + 8 + v10);
    v10 -= 8;
    if (*v11 != 19)
    {
      v25 = 0;
      if (v8 < 0x100)
      {
        v12 = 0;
        v13 = 0;
        goto LABEL_28;
      }
      v24 = v6;
      v23 = a2;
      goto LABEL_10;
    }
  }
  if (v8 <= 0xFF)
  {
    v12 = 0;
    v13 = 0;
    goto LABEL_28;
  }
  v23 = a2;
  v24 = v6;
  v11 = (_BYTE *)v7[(*(_DWORD *)a2 >> 8) - 1];
  v25 = 0;
LABEL_10:
  LOBYTE(a2) = 0;
  v13 = 0;
  do
  {
    while (1)
    {
      v14 = (_BYTE *)*v7;
      v15 = (a3 & (*v7 == (_QWORD)v11)) != 0 ? 2 : 0;
      v16 = sub_22ED84358(a1, *v7, v15);
      if ((v16 & 1) == 0)
        break;
      ++v7;
      a2 = 1;
      if (*v14 == 12 || v7 == (_QWORD *)v9)
      {
        v6 = v24;
        goto LABEL_31;
      }
    }
    v17 = (_BYTE *)(v16 & 0xFFFFFFFFFFFFFFFELL);
    v18 = v14 != (_BYTE *)(v16 & 0xFFFFFFFFFFFFFFFELL);
    v19 = v25;
    if (v25 >= 8uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v19 = v25;
    }
    v26[v19] = v17;
    v13 |= v18;
    v12 = ++v25;
    ++v7;
  }
  while (v7 != (_QWORD *)v9);
  v6 = v24;
  if ((a2 & 1) != 0)
  {
    a2 = 1;
    goto LABEL_31;
  }
  a2 = v23;
LABEL_28:
  if (*(_DWORD *)(*a1 + 11992) != -1 || (v13 & 1) != 0)
    a2 = (uint64_t)sub_22ED2C004((_QWORD *)*a1, *(_DWORD *)(a2 + 4), *(unsigned int *)(a2 + 8), v26, v12);
LABEL_31:
  v21 = *(_QWORD *)(*(_QWORD *)(v6 + 1896) + 8 * *(unsigned int *)(v6 + 1904) - 8);
  --*(_QWORD *)(v21 + 360);
  return a2;
}

uint64_t sub_22ED89534(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v9 = result;
  if (a4)
  {
    v10 = a4;
    v11 = a4;
    v12 = 0;
    result = sub_22E793870((uint64_t *)(a2 + 8), &v11, &v12);
    if (!(_DWORD)result)
      return sub_22F331C88(*(_QWORD *)a2, v10, a3, a6, v9);
    if (v12 == *(_QWORD *)(a2 + 8) + 16 * *(unsigned int *)(a2 + 24))
      return sub_22F331C88(*(_QWORD *)a2, v10, a3, a6, v9);
    v10 = *(_QWORD *)(v12 + 8);
    if (v10)
      return sub_22F331C88(*(_QWORD *)a2, v10, a3, a6, v9);
  }
  else
  {
    if (!a5)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_DWORD *)(result + 15) = 0;
      return result;
    }
    result = sub_22ED78310(a2, a5);
    if ((result & 1) == 0)
      return sub_22EB530EC(*(_QWORD *)a2, a3, result & 0xFFFFFFFFFFFFFFFELL, a6, 1, v9);
  }
  *(_QWORD *)v9 = 0;
  *(_QWORD *)(v9 + 8) = 0;
  *(_WORD *)(v9 + 16) = 1;
  *(_BYTE *)(v9 + 18) = 0;
  return result;
}

unint64_t sub_22ED89638(uint64_t *a1, unint64_t a2, void *__s2, unint64_t a4, unint64_t a5)
{
  unint64_t v6;
  unsigned int v10;
  unint64_t v11;
  unint64_t *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t i;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  void *v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  _QWORD v64[2];
  int v65;
  int v66;
  unsigned int v67[24];
  __int128 v68;
  __int128 v69;
  __int128 v70;
  unint64_t v71;
  _OWORD *v72;
  uint64_t v73;
  _QWORD v74[11];

  v6 = a2;
  v74[8] = *MEMORY[0x24BDAC8D0];
  v72 = v74;
  v73 = 0x400000000;
  if (!a2)
  {
    v49 = 0;
    v69 = 0u;
    v70 = 0u;
    goto LABEL_76;
  }
  v10 = 0;
  v11 = a2;
  do
  {
    if (v10 >= HIDWORD(v73))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v10 = v73;
    }
    v12 = (unint64_t *)&v72[v10];
    *v12 = v11;
    v12[1] = (unint64_t)__s2;
    v10 = v73 + 1;
    LODWORD(v73) = v73 + 1;
    v11 = *(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF8;
  }
  while (v11);
  v69 = 0u;
  v70 = 0u;
  if (!v10)
  {
    v49 = 0;
    goto LABEL_76;
  }
  v62 = a1 + 1;
  do
  {
    LODWORD(v73) = v10 - 1;
    v13 = v72[v10 - 1];
    v68 = v13;
    v14 = v13;
    v15 = *(_QWORD *)(v13 + 16);
    if (!v15)
    {
      v37 = *(_QWORD *)(*a1 + 88);
      v38 = sub_22F0AB0EC((unint64_t *)&v68);
      sub_22F0AB958((uint64_t)&v69 + 8, v37, v38);
      *(_QWORD *)&v69 = v38 | ((unint64_t)v38 << 32);
      goto LABEL_39;
    }
    v16 = *(_QWORD *)(v13 + 8);
    v17 = (v16 >> 1) & 3;
    if (v17 - 2 >= 2)
    {
      if (v17 == 1)
      {
        v34 = *(_DWORD *)(v15 + 28) & 0x7F;
        if ((v34 - 35) < 3)
        {
          v46 = sub_22F0AABF8(v13);
          v71 = v46;
          v64[0] = 0;
          if (sub_22E793870(v62, &v71, v64) && v64[0] != a1[1] + 16 * *((unsigned int *)a1 + 6))
            v46 = *(_QWORD *)(v64[0] + 8);
          v47 = *(_QWORD *)(*a1 + 88);
          v48 = sub_22F0AB0EC((unint64_t *)&v68);
          sub_22F3E8E2C((uint64_t *)&v69 + 1, v47, v46, v48, SHIDWORD(v48));
          *(_QWORD *)&v69 = v48;
        }
        else
        {
          sub_22F0AB364((uint64_t *)&v68);
          v35 = *(_QWORD *)(v14 + 8) & 6;
          if (v34 == 16)
          {
            if (v35 == 2)
            {
              if ((*(_DWORD *)(*(_QWORD *)(v14 + 16) + 28) & 0x7F) == 0x10)
                v36 = *(_QWORD *)(v14 + 16);
              else
                v36 = 0;
            }
            else
            {
              v36 = 0;
            }
            v71 = v36;
            v64[0] = 0;
            if (sub_22E793870(v62, &v71, v64) && v64[0] != a1[1] + 16 * *((unsigned int *)a1 + 6))
              v36 = *(_QWORD *)(v64[0] + 8);
          }
          else
          {
            if (v35 == 2)
            {
              if ((*(_DWORD *)(*(_QWORD *)(v14 + 16) + 28) & 0x7F) == 0x11)
                v36 = *(_QWORD *)(v14 + 16);
              else
                v36 = 0;
            }
            else
            {
              v36 = 0;
            }
            v71 = v36;
            v64[0] = 0;
            if (sub_22E793870(v62, &v71, v64) && v64[0] != a1[1] + 16 * *((unsigned int *)a1 + 6))
              v36 = *(_QWORD *)(v64[0] + 8);
          }
          v39 = *(_QWORD *)(*a1 + 88);
          v40 = sub_22F0AB364((uint64_t *)&v68);
          v41 = sub_22F0AB364((uint64_t *)&v68);
          v42 = HIDWORD(v41);
          sub_22F0AB8AC((uint64_t *)&v69 + 1, v39, v36, v40, SHIDWORD(v41));
          if (!(_DWORD)v69)
            LODWORD(v69) = v40;
          DWORD1(v69) = v42;
        }
        goto LABEL_39;
      }
      if ((v16 & 6) != 0)
        v43 = 0;
      else
        v43 = *(_QWORD *)(v13 + 16);
      v44 = sub_22F0AB364((uint64_t *)&v68);
      v45 = sub_22F0AB364((uint64_t *)&v68);
      v64[0] = a4;
      v64[1] = v43;
      v65 = v44;
      v66 = HIDWORD(v45);
      if ((sub_22E958D90(*a1, 0, (uint64_t)v64, 0, (uint64_t)&v69, a5, 0, 0, 0) & 1) == 0)
        goto LABEL_39;
      goto LABEL_89;
    }
    v19 = sub_22F0AB4E0((uint64_t)&v68);
    v20 = (uint64_t)v18;
    if (v19 > 0xF)
    {
      v21 = sub_22ED89FEC(a1, v19, v18, a4, (uint64_t)&v69);
      if (!v21)
        goto LABEL_89;
      v20 = (uint64_t)(v21 + 1);
      v19 = *v21;
    }
    if (!v19)
      goto LABEL_89;
    v22 = *(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0);
    v23 = *(_DWORD *)(v22 + 16);
    v24 = *(_QWORD *)(v22 + 8);
    if ((v23 & 0x400) == 0)
    {
      v25 = *(unsigned __int8 *)(*(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF0) + 16);
      v26 = *a1;
      if (v25 == 45)
        goto LABEL_23;
      if (v25 == 44 && (**(_QWORD **)(v26 + 72) & 0x200) != 0)
        goto LABEL_23;
      if ((v19 & 0xF) == 0 && v23 == 50 && (*(_BYTE *)(*(_QWORD *)(v19 + 24) + 28) & 0x80) != 0)
        goto LABEL_89;
      v57 = v19;
      v58 = v19;
      while (1)
      {
        if ((v58 & 0xF) != 0)
          goto LABEL_112;
        v59 = *(unsigned __int8 *)(*(_QWORD *)(v58 & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v59 > 0x39)
        {
LABEL_107:
          if (sub_22F115668(v58))
            v57 = v58;
          v58 = sub_22F115B7C(v58);
          if (!v58)
            goto LABEL_115;
        }
        else
        {
          if (v59 == 24)
            goto LABEL_114;
          if (v59 == 26)
          {
            if ((*(_BYTE *)(v58 + 23) & 0x10) != 0)
            {
LABEL_114:
              v57 = v58;
LABEL_115:
              v60 = sub_22F115668(v57);
              sub_22E8FCA40((_QWORD *)v26, v60, 0xF99u, 0, (uint64_t)v64);
              v71 = v19;
              v61 = sub_22E8901B8((uint64_t)v64, (uint64_t *)&v71);
              v63 = v69;
              sub_22E8906A0(v61, &v63);
              sub_22E903BEC((unsigned int *)v64);
LABEL_89:
              v6 = 0;
              goto LABEL_93;
            }
          }
          else if (((1 << v59) & 0x20000000200003CLL) == 0)
          {
            goto LABEL_107;
          }
LABEL_112:
          v58 = sub_22F115B7C(v58);
        }
      }
    }
    v26 = *a1;
    v25 = *(unsigned __int8 *)(*(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF0) + 16);
LABEL_23:
    if (v25 != 44)
      goto LABEL_38;
    v28 = v19;
    for (i = v19; ; i = sub_22F115B7C(i))
    {
      while (1)
      {
        if ((i & 0xF) != 0)
          goto LABEL_35;
        v30 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v30 <= 0x39)
          break;
LABEL_30:
        if (sub_22F115668(i))
          v28 = i;
        i = sub_22F115B7C(i);
        if (!i)
          goto LABEL_37;
      }
      if (v30 == 24)
        goto LABEL_36;
      if (v30 == 26)
        break;
      if (((1 << v30) & 0x20000000200003CLL) == 0)
        goto LABEL_30;
LABEL_35:
      ;
    }
    if ((*(_BYTE *)(i + 23) & 0x10) == 0)
      goto LABEL_35;
LABEL_36:
    v28 = i;
LABEL_37:
    v31 = sub_22F115668(v28);
    sub_22E8FCA40((_QWORD *)v26, v31, 0x1927u, 0, (uint64_t)v67);
    sub_22E903BEC(v67);
    v26 = *a1;
LABEL_38:
    v32 = *(_QWORD *)(v26 + 88);
    v33 = sub_22F0AB364((uint64_t *)&v68);
    sub_22E8ACD1C((uint64_t)&v69, v32, 0, v19, v20, SHIDWORD(v33));
LABEL_39:
    a4 = 0;
    a5 = 0;
    v10 = v73;
  }
  while ((_DWORD)v73);
  v49 = *((_QWORD *)&v69 + 1);
LABEL_76:
  if (v49 != v6 || *(_DWORD *)(*a1 + 11992) != -1)
  {
    v50 = DWORD2(v70);
    v51 = 0;
    if (v6)
    {
      do
      {
        v52 = *(_QWORD *)(v6 + 8);
        if ((v52 & 4) != 0)
          v53 = 12;
        else
          v53 = 8;
        if (*(_QWORD *)(v6 + 16))
          v54 = v53;
        else
          v54 = 4;
        v51 += v54;
        v6 = v52 & 0xFFFFFFFFFFFFFFF8;
      }
      while ((v52 & 0xFFFFFFFFFFFFFFF8) != 0);
    }
    if (DWORD2(v70) != v51 || memcmp((const void *)v70, __s2, DWORD2(v70)))
    {
      if (!v49)
        goto LABEL_89;
      if (HIDWORD(v70))
      {
        v55 = (void *)sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, v50, 3);
        memcpy(v55, (const void *)v70, DWORD2(v70));
        v49 = *((_QWORD *)&v69 + 1);
      }
    }
    v6 = v49;
  }
LABEL_93:
  if (HIDWORD(v70))
    free((void *)v70);
  if (v72 != (_OWORD *)v74)
    free(v72);
  return v6;
}

__n128 sub_22ED89DE4(__n128 *a1, uint64_t a2, __n128 *a3)
{
  unint64_t v4;
  int v7;
  char v8;
  unsigned int v9;
  int v10;
  __n128 result;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = a3->n128_u64[0];
  if (!a3->n128_u64[0])
    goto LABEL_26;
  v7 = v4 & 7;
  v8 = v4 & 7;
  if (v7 == 7)
  {
    v9 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
    if (v9 >= 3)
      LOBYTE(v9) = 3;
    v8 = v9 | 8;
  }
  v10 = 1 << v8;
  if ((v10 & 0xE47) != 0)
  {
    result = *a3;
    *a1 = *a3;
    a1[1].n128_u64[0] = a3[1].n128_u64[0];
    return result;
  }
  if ((v10 & 0x38) == 0)
  {
    if ((~(_BYTE)v4 & 7) != 0)
      goto LABEL_18;
    v18 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
    if (v18 >= 3)
      v18 = 3;
    if (v18)
LABEL_18:
      v19 = 0;
    else
      v19 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 16);
    v23 = v19;
    v24 = 0;
    if (sub_22E793870((uint64_t *)(a2 + 8), &v23, &v24)
      && v24 != *(_QWORD *)(a2 + 8) + 16 * *(unsigned int *)(a2 + 24))
    {
      v19 = *(_QWORD *)(v24 + 8);
    }
    if (v19)
    {
      *a1 = *a3;
      a1[1].n128_u64[0] = a3[1].n128_u64[0];
      a1->n128_u64[0] = sub_22F3AE65C((_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 88) + 15224), v19);
      return result;
    }
    goto LABEL_26;
  }
  if ((v7 - 3) > 2)
  {
    v17 = 0;
    goto LABEL_25;
  }
  v12 = a3[1].n128_i64[0];
  if (!v12)
  {
    v17 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 8);
LABEL_25:
    v20 = sub_22ED8368C(a2, v17);
    if (v20 > 0xF)
    {
      v15 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFFF0) + 8) | v20 & 7;
      v16 = *(_QWORD *)(*(_QWORD *)a2 + 88);
      if (v7 == 7)
      {
        v14 = 0;
        v21 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
        if (v21 >= 3)
          v21 = 3;
        v7 = v21 | 8;
      }
      else
      {
        v14 = 0;
      }
      goto LABEL_32;
    }
LABEL_26:
    a1->n128_u64[0] = 0;
    a1->n128_u64[1] = 0;
    a1[1].n128_u64[0] = 0;
    return result;
  }
  v13 = (_QWORD *)sub_22ED73944(a2, v12);
  if (!v13)
    goto LABEL_26;
  v14 = v13;
  v15 = *v13 & 7 | *(_QWORD *)((*v13 & 0xFFFFFFFFFFFFFFF0) + 8);
  v16 = *(_QWORD *)(*(_QWORD *)a2 + 88);
LABEL_32:
  v22 = sub_22EFC6D44((_QWORD *)(v16 + 15224), v7, v15);
  result = *a3;
  *a1 = *a3;
  a1->n128_u64[0] = v22;
  a1[1].n128_u64[0] = (unint64_t)v14;
  return result;
}

_QWORD *sub_22ED89FEC(uint64_t *a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  unsigned int *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  unsigned __int32 v28;
  unsigned int *v30;
  unsigned int *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  int64x2_t v42;
  _BYTE v43[32];
  uint64_t v44;
  void *v45;
  uint64_t v46;
  _DWORD v47[66];
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v41 = (uint64_t)v43;
  v42 = vdupq_n_s64(0x20uLL);
  v44 = 0;
  v10 = *(unsigned __int8 *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v10 == 20)
  {
    v13 = *(_QWORD *)(a2 + 40);
    v15 = a3[4];
    v14 = a3[5];
    v16 = *a1;
    LODWORD(v45) = 0;
    v46 = v13;
    v47[2] = v15;
    v47[3] = v15;
    v39 = 0;
    sub_22ED66924(v16, 0, a5, v14, (uint64_t)&v45, a4, 0, &v39, 1);
    v17 = 0;
    v18 = v39;
    if (v39 < 8)
      goto LABEL_22;
    v39 = a2;
    v40 = a3;
    v45 = v47;
    v46 = 0x800000000;
    v47[64] = a3[6];
    v47[65] = a3[7];
    v19 = 0;
    if ((sub_22ED8AF24((uint64_t)a1, (uint64_t)&v39, 0, (uint64_t)&v39, *(_DWORD *)(a2 + 20)) & 1) == 0)
    {
      if ((~(_BYTE)v18 & 6) == 0 && (v18 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v19 = sub_22F36CB1C(*(_QWORD *)(*a1 + 88), (*(_DWORD *)(v39 + 16) >> 19), *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 16), (uint64_t)&v45);
        sub_22EEB5360((uint64_t)&v41, v19, (8 * *(_DWORD *)(v19 + 20) + 32), 8);
        v31 = v30;
        *v30 = *v40;
        v33 = *(_QWORD *)(a5 + 8);
        v32 = (uint64_t *)(a5 + 8);
        if (!v33 || !sub_22F0ABC50(v32, *(_QWORD *)(*a1 + 88)))
          v34 = 0;
        *((_QWORD *)v31 + 1) = v34;
        v35 = v40;
        v31[5] = v40[5];
        v31[4] = v35[4];
        v31[6] = v35[6];
        v31[7] = v35[7];
        if ((_DWORD)v46)
        {
          v36 = 0;
          v37 = v31 + 8;
          v38 = 32 * v46;
          do
          {
            *v37++ = *(_QWORD *)((char *)v45 + v36 + 24);
            v36 += 32;
          }
          while (v38 != v36);
        }
      }
      else
      {
        v20 = sub_22ED60904((_QWORD *)*a1, v18, v40[4], (uint64_t)&v45);
        v19 = v20;
        if (v20 >= 0x10)
        {
          sub_22EEB5360((uint64_t)&v41, v20, (8 * *(_DWORD *)(v20 + 20) + 16), 8);
          v22 = v40;
          v21[1] = v40[5];
          *v21 = v22[4];
          v21[2] = v22[6];
          v21[3] = v22[7];
          if ((_DWORD)v46)
          {
            v23 = 0;
            v24 = v21 + 4;
            v25 = 32 * v46;
            do
            {
              *v24++ = *(_QWORD *)((char *)v45 + v23 + 24);
              v23 += 32;
            }
            while (v25 != v23);
          }
        }
      }
    }
    if (v45 != v47)
      free(v45);
  }
  else
  {
    if (v10 == 46)
    {
      v11 = sub_22EBEF62C((uint64_t)a1, a5, *(_QWORD *)(a2 + 32), *a3, a4, 1);
      if (v11 < 8)
      {
LABEL_18:
        v17 = 0;
        goto LABEL_22;
      }
      v12 = sub_22ED8A3B8((_QWORD **)a1, (uint64_t)&v41, a2, a3, v11);
    }
    else
    {
      v12 = sub_22ED73B6C(a1, &v41);
    }
    v19 = v12;
  }
  if (v19 < 0x10)
    goto LABEL_18;
  v26 = *(_QWORD *)(*a1 + 88);
  v27 = v42.i64[0] - v42.i64[1];
  v28 = v42.i32[0] - v42.i32[2];
  if (v42.i32[0] == v42.i32[2])
    v28 = sub_22F11598C(v19);
  v17 = (_QWORD *)sub_22E3CD3D4(v26 + 2032, v28 + 8, 3);
  *v17 = v19;
  memcpy(v17 + 1, (const void *)(v41 + v42.i64[1]), v27);
LABEL_22:
  if ((_BYTE *)v41 != v43 && v41)
    MEMORY[0x2348A0E84]();
  return v17;
}

unint64_t sub_22ED8A3B8(_QWORD **a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v19;
  uint64_t v20;
  _DWORD v21[66];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v19 = v21;
  v20 = 0x800000000;
  v21[64] = a4[2];
  v21[65] = a4[3];
  if (*(_DWORD *)(a3 + 20))
    __asm { BR              X9 }
  v5 = sub_22ED60904(*a1, a5, *a4, (uint64_t)&v19);
  v6 = v5;
  if (v5 >= 0x10)
  {
    v7 = 8 * *(_DWORD *)(v5 + 20);
    if (*(_BYTE *)(*(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0) + 16) == 20)
    {
      sub_22EEB5360(a2, v5, (v7 + 32), 8);
      *(_DWORD *)v8 = 0;
      *(_QWORD *)(v8 + 8) = 0;
      *(_DWORD *)(v8 + 20) = a4[1];
      *(_DWORD *)(v8 + 16) = *a4;
      *(_DWORD *)(v8 + 24) = a4[2];
      *(_DWORD *)(v8 + 28) = a4[3];
      if ((_DWORD)v20)
      {
        v9 = 0;
        v10 = (_QWORD *)(v8 + 32);
        v11 = 32 * v20;
        do
        {
          *v10++ = *(_QWORD *)((char *)v19 + v9 + 24);
          v9 += 32;
        }
        while (v11 != v9);
      }
    }
    else
    {
      sub_22EEB5360(a2, v5, (v7 + 16), 8);
      v13[1] = a4[1];
      *v13 = *a4;
      v13[2] = a4[2];
      v13[3] = a4[3];
      if ((_DWORD)v20)
      {
        v14 = 0;
        v15 = v13 + 4;
        v16 = 32 * v20;
        do
        {
          *v15++ = *(_QWORD *)((char *)v19 + v14 + 24);
          v14 += 32;
        }
        while (v16 != v14);
      }
    }
  }
  if (v19 != v21)
    free(v19);
  return v6;
}

uint64_t sub_22ED8A7EC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[9];

  v6[6] = *MEMORY[0x24BDAC8D0];
  if (a3 != a5)
  {
    sub_22EDC0108(*a2, a3, 0, (uint64_t)v6);
    __asm { BR              X9 }
  }
  return 0;
}

BOOL sub_22ED8AAD0(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  _BOOL8 v4;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  __int128 v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  __int128 v41;
  void *v42[2];
  uint64_t v43;
  unsigned int v44;
  int v45;
  int v46;

  v4 = 1;
  switch(*(_DWORD *)a2)
  {
    case 1:
      v24 = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL;
      if (!v24)
        v24 = (unint64_t)sub_22EF579A8(*(_QWORD *)(*a1 + 88), *(_QWORD *)(a2 + 8), 0);
      v25 = sub_22ED73944(a1, v24);
      if (v25)
      {
        v26 = *(_QWORD *)v25;
        *(_DWORD *)a3 = 1;
        *(_QWORD *)(a3 + 8) = v26;
        *(_QWORD *)(a3 + 24) = v25 & 0xFFFFFFFFFFFFFFFCLL | 2;
        return 0;
      }
      return v4;
    case 2:
    case 3:
    case 4:
      v8 = sub_22F0EECF4();
      v9 = sub_22ED8368C((uint64_t)a1, v8);
      if (v9 < 0x10)
        return 1;
      v10 = v9;
      v11 = *(_QWORD *)(a2 + 16);
      if (*(_DWORD *)a2 == 2)
        v12 = *(_QWORD *)(a2 + 16);
      else
        v12 = 0;
      if (v12)
      {
        v43 = v12;
        *(_QWORD *)&v41 = 0;
        if (sub_22E793870(a1 + 1, &v43, &v41))
        {
          if ((_QWORD)v41 != a1[1] + 16 * *((unsigned int *)a1 + 6))
          {
            v11 = *(_QWORD *)(v41 + 8);
            if (!v11)
              return 1;
          }
        }
      }
      else
      {
        v11 = 0;
      }
      if (v10 == v8 && v12 == v11)
      {
        v4 = 0;
        v32 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a3 = *(_OWORD *)a2;
        *(_OWORD *)(a3 + 16) = v32;
        return v4;
      }
      if (*(_DWORD *)a2 == 3)
      {
        v4 = 0;
        *(_DWORD *)a3 = 3;
        *(_QWORD *)(a3 + 8) = v10;
LABEL_52:
        *(_QWORD *)(a3 + 24) = 0;
        return v4;
      }
      if (*(_DWORD *)a2 != 4)
      {
        v4 = 0;
        *(_DWORD *)a3 = 2;
        *(_QWORD *)(a3 + 8) = v10;
        *(_QWORD *)(a3 + 16) = v11;
        goto LABEL_52;
      }
      v33 = *(_QWORD *)(*a1 + 88);
      sub_22E466FDC(a2, (uint64_t)&v43);
      sub_22F0EEA4C((uint64_t)&v41, v33, &v43, v10);
      *(_OWORD *)a3 = v41;
      *(void **)(a3 + 16) = v42[0];
      *(_QWORD *)(a3 + 24) = 0;
      if (v44 >= 0x41 && v43)
        MEMORY[0x2348A0E84](v43, 0x1000C8000313F17);
      return 0;
    case 5:
      v27 = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL;
      v28 = *(_QWORD *)(v27 + 8);
      if (*(_QWORD *)v27)
      {
        v29 = sub_22ED89638((int)a1, *(_QWORD *)v27, *(void **)(v27 + 8));
        if (!v29)
          return v4;
        v31 = v29;
        v28 = v30;
      }
      else
      {
        v31 = 0;
      }
      v41 = 0u;
      *(_OWORD *)v42 = 0u;
      sub_22E8ACE30((uint64_t)&v41, v31, v28);
      if ((*(_DWORD *)a2 - 5) > 1)
        v34 = 0;
      else
        v34 = *(_DWORD *)((*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL) + 16);
      v35 = sub_22EBEF62C((uint64_t)a1, (uint64_t)&v41, *(_QWORD *)(a2 + 8), v34, 0, 0);
      v4 = v35 < 8;
      if (v35 >= 8)
      {
        v36 = v35;
        v37 = *(_QWORD *)(*a1 + 88);
        if ((*(_DWORD *)a2 - 5) > 1)
          v38 = 0;
        else
          v38 = *(_DWORD *)((*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL) + 16);
        v39 = sub_22E3CD3D4(v37 + 2032, 24, 3);
        *(_QWORD *)v39 = v31;
        *(_QWORD *)(v39 + 8) = v28;
        *(_DWORD *)(v39 + 16) = v38;
        *(_DWORD *)(v39 + 20) = 0;
        *(_QWORD *)a3 = 5;
        *(_QWORD *)(a3 + 8) = v36;
        *(_QWORD *)(a3 + 24) = v39 & 0xFFFFFFFFFFFFFFFCLL;
      }
      if (HIDWORD(v42[1]))
        free(v42[0]);
      return v4;
    case 7:
      v13 = *a1;
      if (a4)
        v14 = 0;
      else
        v14 = 4;
      *(_QWORD *)&v41 = 0;
      v45 = 1;
      v46 = v14;
      v43 = *(unsigned int *)(v13 + 1704);
      sub_22EB4DDB8(v13 + 3688, &v46, (int *)&v43, (__int16 *)(v13 + 1693), (uint64_t *)&v41, &v45);
      v15 = *(unsigned int *)(v13 + 3696);
      v16 = v15 - 2;
      v17 = *(_QWORD *)(v13 + 3688);
      v18 = *(_DWORD *)(v17 + 576 * (v15 - 2));
      if (v18 == 5)
      {
        *(_BYTE *)(v17 + 576 * v15 - 4) = *(_BYTE *)(v17 + 576 * v16 + 572);
        v19 = 1;
      }
      else if (v18 == 2)
      {
        *(_BYTE *)(v17 + 576 * v15 - 4) = 1;
        v19 = *(_BYTE *)(v17 + 576 * v16 + 573) != 0;
      }
      else
      {
        v19 = 0;
        *(_BYTE *)(v17 + 576 * v15 - 4) = 0;
      }
      v20 = v17 + 576 * v15;
      *(_BYTE *)(v20 - 3) = v19;
      *(_WORD *)(v13 + 1693) = 0;
      if (*(_DWORD *)(v13 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v13 + 1776), (llvm::SmallPtrSetImplBase *)(v20 - 560));
        sub_22EAEAE08(v13 + 1840, (uint64_t *)(v20 - 496));
      }
      if ((*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL) != 0)
        v21 = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL;
      else
        v21 = *(_QWORD *)(a2 + 8);
      v22 = sub_22ED78310(a1, v21);
      v23 = sub_22EB51A84(*a1, v22);
      v4 = v23 & 1;
      if ((v23 & 1) == 0)
      {
        *(_DWORD *)a3 = 7;
        *(_QWORD *)(a3 + 8) = v23 & 0xFFFFFFFFFFFFFFFELL;
        *(_QWORD *)(a3 + 24) = v23 & 0xFFFFFFFFFFFFFFFCLL | 1;
      }
      sub_22EB48E64(v13);
      return v4;
    default:
      return v4;
  }
}

uint64_t sub_22ED8AF24(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  if (a2 != a4 || a3 != a5)
    __asm { BR              X9 }
  return 0;
}

uint64_t sub_22ED8B20C(uint64_t *a1, __n128 *a2)
{
  _DWORD *v4;
  uint64_t v5;
  __n128 **v6;
  unsigned int v7;
  uint64_t v8;
  __n128 *v9;
  _QWORD *v10;
  unsigned __int32 v11;
  unsigned __int32 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t i;
  unint64_t v21;
  uint64_t v22;
  unsigned __int32 v23;
  uint64_t v24;
  __n128 v26;
  unint64_t v27;
  __n128 v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  _QWORD v32[18];

  v32[16] = *MEMORY[0x24BDAC8D0];
  v30 = v32;
  v31 = 0x1000000000;
  v4 = (_DWORD *)a2[1].n128_u64[1];
  if (!v4)
  {
    v5 = 0;
    goto LABEL_87;
  }
  v7 = *v4;
  v6 = (__n128 **)(v4 + 4);
  v5 = v7;
  if (v7 < 0x11)
  {
    if (!(_DWORD)v5)
      goto LABEL_79;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  v8 = 8 * v5;
  do
  {
    v9 = *v6;
    if (*v6)
    {
      v10 = (_QWORD *)*a1;
      v11 = v9->n128_u32[2];
      v12 = (unsigned __int32 *)(*(_QWORD *)(*a1 + 12288) + 21440);
      *v12 = v11;
      switch(v11)
      {
        case 3u:
          v13 = sub_22ED8B964(a1, v9);
          goto LABEL_73;
        case 4u:
          v13 = sub_22ED8BAE8((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 5u:
          v13 = (uint64_t)sub_22ED8BB34(a1, (unsigned int *)v9);
          goto LABEL_73;
        case 6u:
          v13 = sub_22ED8BCAC((uint64_t **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 7u:
          v13 = sub_22ED8BE30((uint64_t **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0xAu:
          v13 = (uint64_t)sub_22EB7BC58(v10, (int *)v9);
          goto LABEL_73;
        case 0xCu:
          v13 = sub_22ED8BE7C((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0xEu:
          v13 = (uint64_t)sub_22ED8BEC8((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0xFu:
          v13 = (uint64_t)sub_22ED8C014((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x10u:
          sub_22EB7BF50((uint64_t)v10, (uint64_t)v9);
          goto LABEL_73;
        case 0x11u:
          v13 = (uint64_t)sub_22EB7BF64(v10, (uint64_t)v9);
          goto LABEL_73;
        case 0x12u:
          v13 = (uint64_t)sub_22ED8C160(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x13u:
          v13 = sub_22ED8C2F4((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x14u:
          v13 = sub_22ED8C340((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x15u:
          v13 = sub_22ED8C398(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x16u:
          v13 = sub_22ED8C3F0((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x18u:
          v13 = sub_22ED8C440((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x1Au:
          v13 = (uint64_t)sub_22ED8C490((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x1Bu:
          v13 = sub_22ED8C5DC((uint64_t)a1, (uint64_t *)v9);
          goto LABEL_73;
        case 0x1Cu:
          v13 = sub_22ED8C660(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x1Du:
          v13 = sub_22ED8C6AC((uint64_t)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x1Eu:
          v13 = (uint64_t)sub_22ED8C7F8((uint64_t)a1, (int *)v9);
          goto LABEL_73;
        case 0x1Fu:
          v13 = (uint64_t)sub_22ED8C94C(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x20u:
          v13 = (uint64_t)sub_22EBF939C((uint64_t)v10, (int *)v9);
          goto LABEL_73;
        case 0x21u:
          v13 = sub_22ED8CDC8((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x22u:
          v13 = (uint64_t)sub_22ED8CE14((_QWORD **)a1, v9);
          goto LABEL_73;
        case 0x23u:
          v13 = sub_22ED8CF6C((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x24u:
          v13 = sub_22ED8CFB8(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x25u:
          v13 = sub_22ED8D00C(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x27u:
          v13 = (uint64_t)sub_22ED8D448((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x29u:
          v13 = sub_22ED8D594((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x2Au:
          v13 = (uint64_t)sub_22ED8D728((_QWORD **)a1, v9);
          goto LABEL_73;
        case 0x2Bu:
          v13 = sub_22ED8D880((_QWORD **)a1, v9);
          goto LABEL_73;
        case 0x2Cu:
          v13 = sub_22ED8D9D8((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x2Eu:
          v13 = (uint64_t)sub_22ED8DB68(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x34u:
          v13 = sub_22ED8E040(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x35u:
          v13 = (uint64_t)sub_22ED8E08C((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x37u:
          v13 = sub_22ED8E1D8(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x38u:
          v13 = sub_22ED8E224((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x39u:
          v13 = sub_22ED8E270((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x3Au:
          v13 = sub_22ED8E2BC((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x3Bu:
          v13 = (uint64_t)sub_22EB7E124(v10, (int *)v9);
          goto LABEL_73;
        case 0x3Cu:
          v13 = sub_22ED8E308((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x3Du:
          v13 = sub_22ED8E360(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x3Eu:
          v13 = sub_22ED8E3C8((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x3Fu:
          v13 = (uint64_t)sub_22ED8E414((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x40u:
          v13 = (uint64_t)sub_22EB7E384(v10, (int *)v9);
          goto LABEL_73;
        case 0x42u:
          v13 = sub_22ED8E560(a1, v9);
          goto LABEL_73;
        case 0x46u:
          v13 = sub_22ED8E9A4((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x47u:
          v13 = sub_22ED8E9F0((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x49u:
          v13 = (uint64_t)sub_22ED8EA54((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x4Bu:
          v13 = sub_22ED8EBA0((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x4Cu:
          v13 = (uint64_t)sub_22ED8EBEC((uint64_t)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x4Du:
          v13 = sub_22ED8ED84(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x4Eu:
          v13 = sub_22ED8F1C0((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x51u:
          v13 = (uint64_t)sub_22ED8F20C(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x58u:
          v13 = sub_22ED8F688((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x59u:
          v13 = (uint64_t)sub_22ED8F6D4((_QWORD **)a1, v9);
          goto LABEL_73;
        case 0x5Au:
          v13 = (uint64_t)sub_22ED8F82C((_QWORD **)a1, v9);
          goto LABEL_73;
        case 0x5Bu:
          v13 = (uint64_t)sub_22ED8F984(a1, (int *)v9);
LABEL_73:
          v9 = (__n128 *)v13;
          v15 = *a1;
          *(_DWORD *)(*(_QWORD *)(*a1 + 12288) + 21440) = 85;
          sub_22EB4E2D8(v15);
          if (v9)
            goto LABEL_74;
          goto LABEL_78;
        default:
          *v12 = 85;
          sub_22EB4E2D8(v10);
LABEL_74:
          v16 = v31;
          if (v31 >= (unint64_t)HIDWORD(v31))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v16 = v31;
          }
          *((_QWORD *)v30 + v16) = v9;
          break;
      }
    }
    else
    {
      v14 = v31;
      if (v31 >= (unint64_t)HIDWORD(v31))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v14 = v31;
      }
      *((_QWORD *)v30 + v14) = 0;
    }
    LODWORD(v31) = v31 + 1;
LABEL_78:
    ++v6;
    v8 -= 8;
  }
  while (v8);
LABEL_79:
  v17 = (unsigned int *)a2[1].n128_u64[1];
  if (v17 && *((_BYTE *)v17 + 8) && *(_QWORD *)&v17[2 * *v17 + 4 + 2 * v17[1]])
  {
    sub_22EC84DA0(*a1, a2->n128_i32[2]);
    v18 = *a1;
    sub_22E905168(*a1, 0);
    v19 = a2->n128_u32[2];
    if (v19 <= 0x34 && ((1 << v19) & 0x10000800000204) != 0)
    {
      i = *(_QWORD *)(a2[1].n128_u64[1]
                    + 8 * *(unsigned int *)a2[1].n128_u64[1]
                    + 8 * *(unsigned int *)(a2[1].n128_u64[1] + 4)
                    + 16);
    }
    else
    {
      for (i = *(_QWORD *)(a2[1].n128_u64[1]
                          + 8 * *(unsigned int *)a2[1].n128_u64[1]
                          + 8 * *(unsigned int *)(a2[1].n128_u64[1] + 4)
                          + 16); *(_BYTE *)i == 7; i = *(_QWORD *)(i + 8 * *(unsigned int *)(i + 8) + 32))
        ;
    }
    v21 = sub_22ED84358(a1, i, 0);
    if (v21 >= 2
      && sub_22F4219DC(a2->n128_u32[2])
      && (*(_BYTE *)(*(_QWORD *)(*a1 + 72) + 76) & 0x20) != 0)
    {
      v21 = sub_22EC86C20(*a1, (unsigned __int8 *)(v21 & 0xFFFFFFFFFFFFFFFELL));
    }
    v22 = *(_QWORD *)(*(_QWORD *)(v18 + 1896) + 8 * *(unsigned int *)(v18 + 1904) - 8);
    --*(_QWORD *)(v22 + 360);
    if ((sub_22EC8617C((_QWORD *)*a1, v21, (uint64_t *)v30, v31) & 1) != 0)
      goto LABEL_91;
  }
LABEL_87:
  if (v5 != v31)
  {
LABEL_91:
    v24 = 1;
    goto LABEL_92;
  }
  v28.n128_u64[0] = 0;
  v28.n128_u32[2] = 0;
  v29 = 0;
  v23 = a2->n128_u32[2];
  if (v23 == 9)
  {
    v28 = a2[2];
    v29 = a2[3].n128_u64[0];
    sub_22ED89DE4(&v26, (uint64_t)a1, &v28);
    v28 = v26;
    v29 = v27;
  }
  v24 = sub_22EC87DEC();
LABEL_92:
  if (v30 != v32)
    free(v30);
  return v24;
}

uint64_t sub_22ED8B964(uint64_t *a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v15;
  uint64_t v16[5];

  v16[4] = *MEMORY[0x24BDAC8D0];
  v15 = 0;
  v4 = a2[4];
  if (v4 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  v5 = a2 + 6;
  v6 = *(_QWORD *)&a2[2 * v4 + 6];
  if (!v6)
  {
    v9 = 0;
    v8 = v4;
    if (!v4)
      return sub_22ECAA508(*a1, *a2, a2[3], a2[5], a2[1], v9, v16, v15);
LABEL_8:
    v10 = 8 * v8;
    do
    {
      v11 = sub_22ED78310(a1, *v5);
      if ((v11 & 1) == 0)
      {
        v12 = v15;
        if (v15 >= 4uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v12 = v15;
        }
        v16[v12] = v11 & 0xFFFFFFFFFFFFFFFELL;
        ++v15;
      }
      ++v5;
      v10 -= 8;
    }
    while (v10);
    return sub_22ECAA508(*a1, *a2, a2[3], a2[5], a2[1], v9, v16, v15);
  }
  v7 = sub_22ED78310(a1, v6);
  if ((v7 & 1) != 0)
    return 0;
  v8 = a2[4];
  v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
  if (a2[4])
    goto LABEL_8;
  return sub_22ECAA508(*a1, *a2, a2[3], a2[5], a2[1], v9, v16, v15);
}

uint64_t sub_22ED8BAE8(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ED78310(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E518(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22ED8BB34(uint64_t *a1, unsigned int *a2)
{
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v13;
  unsigned __int8 *v14[17];

  v14[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v13 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = a2 + 6;
    while (1)
    {
      v7 = sub_22ED78310(a1, *v6);
      if ((v7 & 1) != 0)
        return 0;
      v8 = v13;
      if (v13 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v13;
      }
      v14[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      ++v13;
      ++v6;
      v5 -= 8;
      if (!v5)
      {
        v9 = a2[4];
        goto LABEL_11;
      }
    }
  }
  v9 = 0;
LABEL_11:
  v10 = sub_22ED78310(a1, *(_QWORD *)&a2[2 * v9 + 6]);
  if ((v10 & 1) != 0)
    return 0;
  return sub_22ECA5100(*a1, v14, v13, (_DWORD *)(v10 & 0xFFFFFFFFFFFFFFFELL), *a2, a2[3], a2[5], a2[1]);
}

uint64_t sub_22ED8BCAC(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v15;
  unsigned __int8 *v16[17];

  v16[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v5 = sub_22ED78310(a1, v4);
    if ((v5 & 1) != 0)
      return 0;
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v6 = 0;
  }
  v15 = 0;
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 16);
  }
  if (v7)
  {
    v8 = (_QWORD *)(a2 + 40);
    v9 = 8 * v7;
    while (1)
    {
      v10 = sub_22ED78310(a1, *v8);
      if ((v10 & 1) != 0)
        break;
      v11 = v15;
      if (v15 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v15;
      }
      v16[v11] = (unsigned __int8 *)(v10 & 0xFFFFFFFFFFFFFFFELL);
      v12 = ++v15;
      ++v8;
      v9 -= 8;
      if (!v9)
        return sub_22ECA9A04(*a1, v6, v16, v12, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 32), *(_DWORD *)(a2 + 4));
    }
    return 0;
  }
  else
  {
    v12 = 0;
    return sub_22ECA9A04(*a1, v6, v16, v12, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 32), *(_DWORD *)(a2 + 4));
  }
}

uint64_t sub_22ED8BE30(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ED78310(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E2DC(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22ED8BE7C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ED78310(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E39C(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22ED8BEC8(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22ED78310(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA5E4C(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA5E4C(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

_DWORD *sub_22ED8C014(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  uint64_t v13[17];

  v13[16] = *MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22ED78310(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA56B0(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA56B0(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

unsigned __int8 *sub_22ED8C160(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v15;
  uint64_t v16[17];

  v16[16] = *MEMORY[0x24BDAC8D0];
  v15 = 0;
  v4 = (_QWORD *)(a2 + 40);
  v5 = *(unsigned int *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 40 + 8 * v5);
  if (v6)
  {
    v7 = sub_22ED78310(a1, v6);
    if ((v7 & 1) != 0)
      return 0;
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    LODWORD(v5) = *(_DWORD *)(a2 + 16);
  }
  else
  {
    v8 = 0;
  }
  if (v5 > 0x10)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    LODWORD(v5) = *(_DWORD *)(a2 + 16);
  }
  if ((_DWORD)v5)
  {
    v9 = 8 * v5;
    while (1)
    {
      v10 = sub_22ED78310(a1, *v4);
      if ((v10 & 1) != 0)
        break;
      v11 = v15;
      if (v15 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v15;
      }
      v16[v11] = v10 & 0xFFFFFFFFFFFFFFFELL;
      v12 = ++v15;
      ++v4;
      v9 -= 8;
      if (!v9)
        return sub_22ECA67B4(*a1, v8, *(_DWORD *)(a2 + 20), *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), v16, v12, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), 0, *(_DWORD *)(a2 + 4));
    }
    return 0;
  }
  v12 = 0;
  return sub_22ECA67B4(*a1, v8, *(_DWORD *)(a2 + 20), *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), v16, v12, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), 0, *(_DWORD *)(a2 + 4));
}

uint64_t sub_22ED8C2F4(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ED78310(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F6E0(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22ED8C340(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v5 = sub_22ED78310(a1, v4);
    if ((v5 & 1) != 0)
      return 0;
  }
  else
  {
    v5 = 0;
  }
  return sub_22F33EAFC(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22ED8C398(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22ED78310(a1, v4);
    if ((v5 & 1) != 0)
      return 0;
  }
  else
  {
    v5 = 0;
  }
  return sub_22EC9F86C(*a1, (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22ED8C3F0(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ED78310(a1, *(_QWORD *)(a2 + 40));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22ECA1F20(*a1, *(_DWORD *)(a2 + 32), (void *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 36), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22ED8C440(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ED78310(a1, *(_QWORD *)(a2 + 48));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22ECA18BC(*a1, *(_DWORD *)(a2 + 32), (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 36), *(_DWORD *)(a2 + 40), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22ED8C490(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22ED78310(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECAA2D4(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECAA2D4(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22ED8C5DC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t result;

  v4 = sub_22ED78310(a1, a2[4]);
  if ((v4 & 1) != 0)
    return 0;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  v6 = *((_DWORD *)a2 + 7);
  v7 = *a2;
  result = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 40, 3);
  *(_QWORD *)result = v7;
  *(_DWORD *)(result + 8) = 27;
  *(_QWORD *)(result + 32) = v5;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 89;
  *(_DWORD *)(result + 28) = v6;
  return result;
}

uint64_t sub_22ED8C660(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ED78310(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9EE2C(*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22ED8C6AC(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v11;
  _QWORD v12[17];

  v12[16] = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(a2 + 16);
  }
  if (!v4)
    return sub_22EC92F80();
  v5 = (_QWORD *)(a2 + 40);
  v6 = 8 * v4;
  while (1)
  {
    v7 = sub_22ED78310(a1, *v5);
    if ((v7 & 1) != 0)
      break;
    v8 = v11;
    if (v11 >= 0x10uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v8 = v11;
    }
    v12[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
    ++v11;
    ++v5;
    v6 -= 8;
    if (!v6)
      return sub_22EC92F80();
  }
  return 0;
}

_DWORD *sub_22ED8C7F8(uint64_t a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  _QWORD v13[17];

  v13[16] = *MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22ED78310(a1, *v5);
      if ((v7 & 1) != 0)
        return 0;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
  }
  v9 = 0;
LABEL_11:
  if (!v9)
    return 0;
  return sub_22F3EB9D4(*(_QWORD *)(*(_QWORD *)a1 + 88), *a2, a2[3], a2[1], v13, v9);
}

_DWORD *sub_22ED8C94C(uint64_t *a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD **v17;
  _DWORD **v18;
  _DWORD *v19;
  int v20;
  BOOL v21;
  _DWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  __int128 v40;
  size_t __n[2];
  int v42[3];
  unint64_t v43;
  _QWORD *v44;
  void *v45;
  uint64_t v46;
  _BYTE v47[128];
  void *v48;
  uint64_t v49;
  _BYTE v50[128];
  __n128 v51;
  _QWORD v52[10];

  v52[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 4);
  v6 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 16);
  v42[0] = *(_DWORD *)a2;
  v42[1] = v6;
  v42[2] = v4;
  v48 = v50;
  v49 = 0x1000000000;
  v40 = 0u;
  *(_OWORD *)__n = 0u;
  v38.n128_u64[0] = 0;
  v38.n128_u32[2] = 0;
  v39 = 0;
  v45 = v47;
  v46 = 0x1000000000;
  if (v5 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 16);
  }
  if (v5)
  {
    v7 = 8 * v5;
    v8 = (_QWORD *)(a2 + 104);
    do
    {
      v9 = sub_22ED78310(a1, *v8);
      if ((v9 & 1) != 0)
        goto LABEL_46;
      v10 = v49;
      if (v49 >= (unint64_t)HIDWORD(v49))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v49;
      }
      *((_QWORD *)v48 + v10) = v9 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v49) = v49 + 1;
      ++v8;
      v7 -= 8;
    }
    while (v7);
  }
  v11 = *(_QWORD *)(a2 + 40);
  if (v11)
  {
    v12 = sub_22ED89638(a1, v11, *(void **)(a2 + 48), 0, 0);
    if (!v12)
    {
LABEL_46:
      v35 = 0;
      goto LABEL_48;
    }
    v14 = v12;
    v15 = v13;
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  sub_22E8ACE30((uint64_t)&v40, v14, v15);
  v38 = *(__n128 *)(a2 + 56);
  v39 = *(_QWORD *)(a2 + 72);
  if (v38.n128_u64[0])
  {
    sub_22ED89DE4(&v51, (uint64_t)a1, &v38);
    v38 = v51;
    v39 = v52[0];
    if (!v51.n128_u64[0])
      goto LABEL_46;
  }
  v37 = a2;
  v16 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v16)
  {
    v17 = (_DWORD **)(a2 + 104 + 8 * v16);
    v18 = &v17[v16];
    do
    {
      v19 = *v17;
      if (*v17)
      {
        v51.n128_u64[0] = (unint64_t)v52;
        v51.n128_u64[1] = 0x800000000;
        v20 = *(unsigned __int8 *)v19;
        v21 = v20 == 211;
        if (v20 == 211)
          v22 = v19;
        else
          v22 = 0;
        v23 = v22 + 16;
        if (v21)
          v24 = v23;
        else
          v24 = v19 + 20;
        v25 = v19[1];
        if ((_DWORD)v25)
        {
          v26 = 8 * v25;
          do
          {
            v27 = *v24 & 0xFFFFFFFFFFFFFFFCLL;
            v43 = v27;
            v44 = 0;
            if (sub_22E793870(a1 + 1, &v43, &v44)
              && v44 != (_QWORD *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
            {
              v27 = v44[1];
            }
            v28 = *(unsigned int *)(v27 + 28);
            v25 = v51.n128_u32[2];
            if (v51.n128_u32[2] >= (unint64_t)v51.n128_u32[3])
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v25 = v51.n128_u32[2];
            }
            *(_QWORD *)(v51.n128_u64[0] + 8 * v25) = (v28 >> 13) & 3 | v27;
            LODWORD(v25) = ++v51.n128_u32[2];
            ++v24;
            v26 -= 8;
          }
          while (v26);
        }
        v29 = *(_QWORD *)(*a1 + 88);
        v30 = *((_QWORD *)&v40 + 1);
        if (*((_QWORD *)&v40 + 1))
        {
          if (HIDWORD(__n[1]))
          {
            v31 = (void *)sub_22E3CD3D4(v29 + 2032, LODWORD(__n[1]), 3);
            memcpy(v31, (const void *)__n[0], LODWORD(__n[1]));
            v30 = *((_QWORD *)&v40 + 1);
            LODWORD(v25) = v51.n128_u32[2];
          }
          else
          {
            v31 = (void *)__n[0];
          }
        }
        else
        {
          v31 = 0;
        }
        v33 = sub_22F0605AC(v29, 0, v30, (uint64_t)v31, (uint64_t)&v38, 1, (*v19 >> 20) & 1, (const void *)v51.n128_u64[0], v51.n128_u64[0] + 8 * v25);
        v34 = v46;
        if (v46 >= (unint64_t)HIDWORD(v46))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v34 = v46;
        }
        *((_QWORD *)v45 + v34) = v33;
        LODWORD(v46) = v46 + 1;
        if ((_QWORD *)v51.n128_u64[0] != v52)
          free((void *)v51.n128_u64[0]);
      }
      else
      {
        v32 = v46;
        if (v46 >= (unint64_t)HIDWORD(v46))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v32 = v46;
        }
        *((_QWORD *)v45 + v32) = 0;
        LODWORD(v46) = v46 + 1;
      }
      ++v17;
    }
    while (v17 != v18);
  }
  v35 = sub_22ECA7F24((_QWORD *)*a1, (int *)(v37 + 80), 2u, (int *)(v37 + 88), 2, (uint64_t)&v40, (__int128 *)&v38, *(unsigned int *)(v37 + 96), (uint64_t)v48, v49, v42, (unsigned __int8 **)v45, v46);
LABEL_48:
  if (v45 != v47)
    free(v45);
  if (HIDWORD(__n[1]))
    free((void *)__n[0]);
  if (v48 != v50)
    free(v48);
  return v35;
}

uint64_t sub_22ED8CDC8(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ED78310(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F560(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

unsigned int *sub_22ED8CE14(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int *v12;
  _DWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 20;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22ED78310(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v16;
      }
      *((_QWORD *)v15 + v8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    v9 = v16;
LABEL_11:
    v10 = a2[3];
    v11 = a2[1];
    v14[0] = *a2;
    v14[1] = v10;
    v14[2] = v11;
    v12 = sub_22ECA94BC(*a1, (uint64_t)v15, v9, v14);
  }
  if (v15 != v17)
    free(v15);
  return v12;
}

uint64_t sub_22ED8CF6C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ED78310(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E41C(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22ED8CFB8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ED78310(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9FE98(*a1, *(_DWORD *)(a2 + 44), (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 48), *(_DWORD *)(a2 + 40), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22ED8D00C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 **v13;
  _DWORD **v14;
  _DWORD **v15;
  _DWORD *v16;
  int v17;
  BOOL v18;
  _DWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  __int128 v35;
  size_t __n[2];
  unint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  _BYTE v41[64];
  void *v42[2];
  _QWORD v43[16];
  unsigned __int8 **v44;
  uint64_t v45;
  _QWORD v46[18];

  v2 = a2;
  v46[16] = *MEMORY[0x24BDAC8D0];
  v44 = (unsigned __int8 **)v46;
  v45 = 0x1000000000;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v2 + 16);
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = (_QWORD *)(v2 + 96);
    while (1)
    {
      v7 = sub_22ED78310(a1, *v6);
      if ((v7 & 1) != 0)
        break;
      v8 = v45;
      if (v45 >= (unint64_t)HIDWORD(v45))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v45;
      }
      v44[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      LODWORD(v45) = v45 + 1;
      ++v6;
      v5 -= 8;
      if (!v5)
        goto LABEL_9;
    }
    v9 = 0;
  }
  else
  {
LABEL_9:
    v35 = 0u;
    *(_OWORD *)__n = 0u;
    sub_22E8ACE30((uint64_t)&v35, *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64));
    v33 = *(__n128 *)(v2 + 72);
    v34 = *(_QWORD *)(v2 + 88);
    if (!v33.n128_u64[0]
      || (sub_22ED89DE4((__n128 *)v42, (uint64_t)a1, &v33), v33 = *(__n128 *)v42, v34 = v43[0], v42[0]))
    {
      v42[0] = v43;
      v42[1] = (void *)0x1000000000;
      v11 = *(unsigned int *)(v2 + 16);
      if ((_DWORD)v11)
      {
        v32 = v2;
        v14 = (_DWORD **)(v2 + 96 + 8 * v11 + 8 * v11 + 8 * v11 + 8 * v11);
        v15 = &v14[v11];
        do
        {
          v16 = *v14;
          if (*v14)
          {
            v39 = v41;
            v40 = 0x800000000;
            v17 = *(unsigned __int8 *)v16;
            v18 = v17 == 211;
            if (v17 == 211)
              v19 = v16;
            else
              v19 = 0;
            v20 = v19 + 16;
            if (v18)
              v21 = v20;
            else
              v21 = v16 + 20;
            v22 = v16[1];
            if ((_DWORD)v22)
            {
              v23 = 8 * v22;
              do
              {
                v24 = *v21 & 0xFFFFFFFFFFFFFFFCLL;
                v37 = v24;
                v38 = 0;
                if (sub_22E793870(a1 + 1, &v37, &v38) && v38 != a1[1] + 16 * *((unsigned int *)a1 + 6))
                  v24 = *(_QWORD *)(v38 + 8);
                v25 = *(unsigned int *)(v24 + 28);
                v22 = v40;
                if (v40 >= (unint64_t)HIDWORD(v40))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v22 = v40;
                }
                *((_QWORD *)v39 + v22) = (v25 >> 13) & 3 | v24;
                LODWORD(v22) = v40 + 1;
                LODWORD(v40) = v40 + 1;
                ++v21;
                v23 -= 8;
              }
              while (v23);
            }
            v26 = *(_QWORD *)(*a1 + 88);
            v27 = *((_QWORD *)&v35 + 1);
            if (*((_QWORD *)&v35 + 1))
            {
              if (HIDWORD(__n[1]))
              {
                v28 = (void *)sub_22E3CD3D4(v26 + 2032, LODWORD(__n[1]), 3);
                memcpy(v28, (const void *)__n[0], LODWORD(__n[1]));
                v27 = *((_QWORD *)&v35 + 1);
                LODWORD(v22) = v40;
              }
              else
              {
                v28 = (void *)__n[0];
              }
            }
            else
            {
              v28 = 0;
            }
            v30 = sub_22F0605AC(v26, 0, v27, (uint64_t)v28, (uint64_t)&v33, 1, (*v16 >> 20) & 1, v39, (uint64_t)v39 + 8 * v22);
            v31 = LODWORD(v42[1]);
            if (LODWORD(v42[1]) >= (unint64_t)HIDWORD(v42[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v31 = LODWORD(v42[1]);
            }
            *((_QWORD *)v42[0] + v31) = v30;
            ++LODWORD(v42[1]);
            if (v39 != v41)
              free(v39);
          }
          else
          {
            v29 = LODWORD(v42[1]);
            if (LODWORD(v42[1]) >= (unint64_t)HIDWORD(v42[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v29 = LODWORD(v42[1]);
            }
            *((_QWORD *)v42[0] + v29) = 0;
            ++LODWORD(v42[1]);
          }
          ++v14;
        }
        while (v14 != v15);
        v13 = (unsigned __int8 **)v42[0];
        v12 = LODWORD(v42[1]);
        v2 = v32;
      }
      else
      {
        v12 = 0;
        v13 = (unsigned __int8 **)v43;
      }
      v9 = sub_22F33F420(*a1, v44, v45, *(_DWORD *)v2, *(_DWORD *)(v2 + 12), *(_DWORD *)(v2 + 48), *(_DWORD *)(v2 + 4), (uint64_t)&v35, (uint64_t)&v33, v13, v12);
      if (v42[0] != v43)
        free(v42[0]);
    }
    else
    {
      v9 = 0;
    }
    if (HIDWORD(__n[1]))
      free((void *)__n[0]);
  }
  if (v44 != v46)
    free(v44);
  return v9;
}

_DWORD *sub_22ED8D448(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22ED78310(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECAA0AC(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECAA0AC(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22ED8D594(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v14;
  uint64_t v15[9];

  v15[8] = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 32;
  v5 = sub_22ED78310(a1, *(_QWORD *)(a2 + 32));
  if ((v5 & 1) != 0)
    return 0;
  v14 = 0;
  v6 = *(_DWORD *)(a2 + 16);
  if (v6 - 1 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a2 + 16);
  }
  v7 = (_QWORD *)(a2 + 40);
  if (a2 + 40 == v4 + 8 * v6)
  {
    v11 = 0;
    return sub_22F33EB88(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, v15, v11, *(_BYTE *)(a2 + 24), *(_BYTE *)(a2 + 25), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 20), 0, *(_DWORD *)(a2 + 4));
  }
  else
  {
    v8 = 8 * v6 - 8;
    while (1)
    {
      v9 = sub_22ED78310(a1, *v7);
      if ((v9 & 1) != 0)
        break;
      v10 = v14;
      if (v14 >= 8uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v14;
      }
      v15[v10] = v9 & 0xFFFFFFFFFFFFFFFELL;
      v11 = ++v14;
      ++v7;
      v8 -= 8;
      if (!v8)
        return sub_22F33EB88(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, v15, v11, *(_BYTE *)(a2 + 24), *(_BYTE *)(a2 + 25), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 20), 0, *(_DWORD *)(a2 + 4));
    }
    return 0;
  }
}

unsigned int *sub_22ED8D728(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int *v12;
  _DWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 20;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22ED78310(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v16;
      }
      *((_QWORD *)v15 + v8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    v9 = v16;
LABEL_11:
    v10 = a2[3];
    v11 = a2[1];
    v14[0] = *a2;
    v14[1] = v10;
    v14[2] = v11;
    v12 = sub_22ECA8EC4(*a1, (uint64_t)v15, v9, v14);
  }
  if (v15 != v17)
    free(v15);
  return v12;
}

uint64_t sub_22ED8D880(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 16;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22ED78310(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA2F18(*a1, v13, v9, a2[12], a2[13], a2[14], *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA2F18(*a1, v13, v9, a2[12], a2[13], a2[14], *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22ED8D9D8(_QWORD **a1, int *a2)
{
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v13;
  unsigned __int8 *v14[17];

  v14[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v13 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = a2 + 16;
    while (1)
    {
      v7 = sub_22ED78310(a1, *v6);
      if ((v7 & 1) != 0)
        return 0;
      v8 = v13;
      if (v13 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v13;
      }
      v14[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      ++v13;
      ++v6;
      v5 -= 8;
      if (!v5)
      {
        v9 = a2[4];
        goto LABEL_11;
      }
    }
  }
  v9 = 0;
LABEL_11:
  v10 = sub_22ED78310(a1, *(_QWORD *)&a2[2 * v9 + 16 + 2 * v9 + 2 * v9 + 2 * v9 + 2 * v9]);
  if ((v10 & 1) != 0)
    return 0;
  return sub_22ECA44D0(*a1, v14, v13, (_DWORD *)(v10 & 0xFFFFFFFFFFFFFFFELL), *a2, a2[3], a2[12], a2[13], a2[14], 0, a2[1]);
}

_DWORD *sub_22ED8DB68(uint64_t *a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD **v17;
  _DWORD **v18;
  _DWORD *v19;
  int v20;
  BOOL v21;
  _DWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  _DWORD *v35;
  int v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  void *v42[2];
  int v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  size_t __n[2];
  int v48[3];
  unint64_t v49;
  _QWORD *v50;
  void *v51;
  uint64_t v52;
  _BYTE v53[128];
  void *v54;
  uint64_t v55;
  _BYTE v56[128];
  __int128 v57;
  _QWORD v58[10];

  v58[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 4);
  v6 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 16);
  v48[0] = *(_DWORD *)a2;
  v48[1] = v6;
  v48[2] = v4;
  v54 = v56;
  v55 = 0x1000000000;
  v46 = 0u;
  *(_OWORD *)__n = 0u;
  *(_QWORD *)&v44 = 0;
  DWORD2(v44) = 0;
  v51 = v53;
  v52 = 0x1000000000;
  if (v5 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 16);
  }
  if (v5)
  {
    v7 = 8 * v5;
    v8 = (_QWORD *)(a2 + 136);
    do
    {
      v9 = sub_22ED78310(a1, *v8);
      if ((v9 & 1) != 0)
        goto LABEL_46;
      v10 = v55;
      if (v55 >= (unint64_t)HIDWORD(v55))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v55;
      }
      *((_QWORD *)v54 + v10) = v9 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v55) = v55 + 1;
      ++v8;
      v7 -= 8;
    }
    while (v7);
  }
  v11 = *(_QWORD *)(a2 + 40);
  if (v11)
  {
    v12 = sub_22ED89638(a1, v11, *(void **)(a2 + 48), 0, 0);
    if (!v12)
    {
LABEL_46:
      v35 = 0;
      goto LABEL_49;
    }
    v14 = v12;
    v15 = v13;
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  sub_22E8ACE30((uint64_t)&v46, v14, v15);
  v44 = *(_OWORD *)(a2 + 56);
  v45 = *(_QWORD *)(a2 + 72);
  if ((_QWORD)v44)
  {
    sub_22ED89DE4((__n128 *)&v57, (uint64_t)a1, (__n128 *)&v44);
    v44 = v57;
    v45 = v58[0];
    if (!(_QWORD)v57)
      goto LABEL_46;
  }
  v38 = a2;
  v16 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v16)
  {
    v17 = (_DWORD **)(a2 + 136 + 8 * v16);
    v18 = &v17[v16];
    do
    {
      v19 = *v17;
      if (*v17)
      {
        *(_QWORD *)&v57 = v58;
        *((_QWORD *)&v57 + 1) = 0x800000000;
        v20 = *(unsigned __int8 *)v19;
        v21 = v20 == 211;
        if (v20 == 211)
          v22 = v19;
        else
          v22 = 0;
        v23 = v22 + 16;
        if (v21)
          v24 = v23;
        else
          v24 = v19 + 20;
        v25 = v19[1];
        if ((_DWORD)v25)
        {
          v26 = 8 * v25;
          do
          {
            v27 = *v24 & 0xFFFFFFFFFFFFFFFCLL;
            v49 = v27;
            v50 = 0;
            if (sub_22E793870(a1 + 1, &v49, &v50)
              && v50 != (_QWORD *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
            {
              v27 = v50[1];
            }
            v28 = *(unsigned int *)(v27 + 28);
            v25 = DWORD2(v57);
            if (DWORD2(v57) >= (unint64_t)HIDWORD(v57))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v25 = DWORD2(v57);
            }
            *(_QWORD *)(v57 + 8 * v25) = (v28 >> 13) & 3 | v27;
            LODWORD(v25) = ++DWORD2(v57);
            ++v24;
            v26 -= 8;
          }
          while (v26);
        }
        v29 = *(_QWORD *)(*a1 + 88);
        v30 = *((_QWORD *)&v46 + 1);
        if (*((_QWORD *)&v46 + 1))
        {
          if (HIDWORD(__n[1]))
          {
            v31 = (void *)sub_22E3CD3D4(v29 + 2032, LODWORD(__n[1]), 3);
            memcpy(v31, (const void *)__n[0], LODWORD(__n[1]));
            v30 = *((_QWORD *)&v46 + 1);
            LODWORD(v25) = DWORD2(v57);
          }
          else
          {
            v31 = (void *)__n[0];
          }
        }
        else
        {
          v31 = 0;
        }
        v33 = sub_22F0605AC(v29, 0, v30, (uint64_t)v31, (uint64_t)&v44, 1, (*v19 >> 20) & 1, (const void *)v57, v57 + 8 * v25);
        v34 = v52;
        if (v52 >= (unint64_t)HIDWORD(v52))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v34 = v52;
        }
        *((_QWORD *)v51 + v34) = v33;
        LODWORD(v52) = v52 + 1;
        if ((_QWORD *)v57 != v58)
          free((void *)v57);
      }
      else
      {
        v32 = v52;
        if (v52 >= (unint64_t)HIDWORD(v52))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v32 = v52;
        }
        *((_QWORD *)v51 + v32) = 0;
        LODWORD(v52) = v52 + 1;
      }
      ++v17;
    }
    while (v17 != v18);
  }
  v41 = v46;
  sub_22F0AB560(v42, (uint64_t)&v46 + 8);
  v39 = v44;
  v40 = v45;
  v35 = sub_22EC94100((_QWORD *)*a1, v38 + 80, 5u, v38 + 100, 5, (uint64_t)&v41, &v39, *(_DWORD *)(v38 + 120), *(_BYTE *)(v38 + 124), v37, *(_DWORD *)(v38 + 128), *(unsigned int *)(v38 + 132), (uint64_t)v54, v55, v48, 0, (unsigned __int8 **)v51, v52);
  if (v43)
    free(v42[1]);
LABEL_49:
  if (v51 != v53)
    free(v51);
  if (HIDWORD(__n[1]))
    free((void *)__n[0]);
  if (v54 != v56)
    free(v54);
  return v35;
}

uint64_t sub_22ED8E040(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ED78310(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9FCD4(*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22ED8E08C(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22ED78310(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA9DF0(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA9DF0(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22ED8E1D8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ED78310(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9FB70(*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22ED8E224(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ED78310(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F620(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22ED8E270(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ED78310(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F1E8(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22ED8E2BC(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ED78310(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9EFAC(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22ED8E308(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22ED78310(a1, v4);
    if ((v5 & 1) != 0)
      return 0;
  }
  else
  {
    v5 = 0;
  }
  return sub_22EC9F118(*a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 12), (_DWORD *)(v5 & 0xFFFFFFFFFFFFFFFELL));
}

uint64_t sub_22ED8E360(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;

  v2 = a2;
  v4 = sub_22ED78310(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  v5 = (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  v6 = *a1;
  if (*(_DWORD **)(v2 + 16) != v5 || *(_DWORD *)(v6 + 11992) != -1)
    return sub_22F33E49C((_QWORD *)v6, v5, *(_DWORD *)v2, *(_DWORD *)(v2 + 12), *(_DWORD *)(v2 + 4));
  return v2;
}

uint64_t sub_22ED8E3C8(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ED78310(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F4A0(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22ED8E414(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22ED78310(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA2624(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA2624(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22ED8E560(uint64_t *a1, __n128 *a2)
{
  __n128 *v2;
  unsigned int v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  _DWORD *v12;
  int v13;
  BOOL v14;
  _DWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  __n128 *v30;
  __n128 v31;
  unint64_t v32;
  __int128 v33;
  size_t __n[2];
  unint64_t v35;
  _QWORD *v36;
  void *v37;
  uint64_t v38;
  _BYTE v39[64];
  void *v40[2];
  _QWORD v41[16];
  _QWORD *v42;
  uint64_t v43;
  _QWORD v44[18];

  v2 = a2;
  v44[16] = *MEMORY[0x24BDAC8D0];
  v42 = v44;
  v43 = 0x1000000000;
  v4 = a2[1].n128_u32[0];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = v2[1].n128_u32[0];
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = &v2[6].n128_u64[1];
    while (1)
    {
      v7 = sub_22ED78310(a1, *v6);
      if ((v7 & 1) != 0)
        break;
      v8 = v43;
      if (v43 >= (unint64_t)HIDWORD(v43))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v43;
      }
      v42[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v43) = v43 + 1;
      ++v6;
      v5 -= 8;
      if (!v5)
        goto LABEL_9;
    }
    v28 = 0;
  }
  else
  {
LABEL_9:
    v33 = 0u;
    *(_OWORD *)__n = 0u;
    sub_22E8ACE30((uint64_t)&v33, v2[4].n128_u64[0], v2[4].n128_i64[1]);
    v31 = v2[5];
    v32 = v2[6].n128_u64[0];
    if (v31.n128_u64[0]
      && (sub_22ED89DE4((__n128 *)v40, (uint64_t)a1, &v31), v31 = *(__n128 *)v40, v32 = v41[0], !v40[0]))
    {
      v28 = 0;
    }
    else
    {
      v40[0] = v41;
      v40[1] = (void *)0x1000000000;
      v9 = v2[1].n128_u32[0];
      if ((_DWORD)v9)
      {
        v30 = v2;
        v10 = &v2[6].n128_u64[v9 + 1 + v9 + v9 + v9];
        v11 = &v10[v9];
        do
        {
          v12 = (_DWORD *)*v10;
          if (*v10)
          {
            v37 = v39;
            v38 = 0x800000000;
            v13 = *(unsigned __int8 *)v12;
            v14 = v13 == 211;
            if (v13 == 211)
              v15 = v12;
            else
              v15 = 0;
            v16 = v15 + 16;
            if (v14)
              v17 = v16;
            else
              v17 = v12 + 20;
            v18 = v12[1];
            if ((_DWORD)v18)
            {
              v19 = 8 * v18;
              do
              {
                v20 = *v17 & 0xFFFFFFFFFFFFFFFCLL;
                v35 = v20;
                v36 = 0;
                if (sub_22E793870(a1 + 1, &v35, &v36)
                  && v36 != (_QWORD *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
                {
                  v20 = v36[1];
                }
                v21 = *(unsigned int *)(v20 + 28);
                v18 = v38;
                if (v38 >= (unint64_t)HIDWORD(v38))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v18 = v38;
                }
                *((_QWORD *)v37 + v18) = (v21 >> 13) & 3 | v20;
                LODWORD(v18) = v38 + 1;
                LODWORD(v38) = v38 + 1;
                ++v17;
                v19 -= 8;
              }
              while (v19);
            }
            v22 = *(_QWORD *)(*a1 + 88);
            v23 = *((_QWORD *)&v33 + 1);
            if (*((_QWORD *)&v33 + 1))
            {
              if (HIDWORD(__n[1]))
              {
                v24 = (void *)sub_22E3CD3D4(v22 + 2032, LODWORD(__n[1]), 3);
                memcpy(v24, (const void *)__n[0], LODWORD(__n[1]));
                v23 = *((_QWORD *)&v33 + 1);
                LODWORD(v18) = v38;
              }
              else
              {
                v24 = (void *)__n[0];
              }
            }
            else
            {
              v24 = 0;
            }
            v26 = sub_22F0605AC(v22, 0, v23, (uint64_t)v24, (uint64_t)&v31, 1, (*v12 >> 20) & 1, v37, (uint64_t)v37 + 8 * v18);
            v27 = LODWORD(v40[1]);
            if (LODWORD(v40[1]) >= (unint64_t)HIDWORD(v40[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v27 = LODWORD(v40[1]);
            }
            *((_QWORD *)v40[0] + v27) = v26;
            ++LODWORD(v40[1]);
            if (v37 != v39)
              free(v37);
          }
          else
          {
            v25 = LODWORD(v40[1]);
            if (LODWORD(v40[1]) >= (unint64_t)HIDWORD(v40[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v25 = LODWORD(v40[1]);
            }
            *((_QWORD *)v40[0] + v25) = 0;
            ++LODWORD(v40[1]);
          }
          ++v10;
        }
        while (v10 != v11);
        v2 = v30;
      }
      v28 = sub_22ECA41D4((_QWORD *)*a1, (uint64_t)v42, v43, v2[3].n128_i32[0], v2->n128_u32[0], v2->n128_i32[3], v2[3].n128_i32[1], v2[3].n128_i32[2], v2->n128_i32[1], (uint64_t)&v33, (uint64_t)&v31);
      if (v40[0] != v41)
        free(v40[0]);
    }
    if (HIDWORD(__n[1]))
      free((void *)__n[0]);
  }
  if (v42 != v44)
    free(v42);
  return v28;
}

uint64_t sub_22ED8E9A4(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ED78310(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E1DC(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22ED8E9F0(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ED78310(a1, *(_QWORD *)(a2 + 64));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22ECA1458(*a1, *(_DWORD *)(a2 + 36), *(_DWORD *)(a2 + 40), *(_DWORD *)(a2 + 32), (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 44), *(_DWORD *)(a2 + 48), 0, *(_DWORD *)(a2 + 52), 0, *(_DWORD *)(a2 + 56), 0, *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22ED8EA54(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22ED78310(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA3D84(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA3D84(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22ED8EBA0(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ED78310(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E25C(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

int *sub_22ED8EBEC(uint64_t a1, uint64_t a2)
{
  int *v2;
  unsigned int v4;
  char v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  unsigned int v13;
  _QWORD *v14;
  unsigned int v16;
  _DWORD *v17[5];

  v2 = (int *)a2;
  v17[4] = *(_DWORD **)MEMORY[0x24BDAC8D0];
  v16 = 0;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = v2[4];
  }
  if (v4)
  {
    v5 = 0;
    v6 = v2 + 6;
    v7 = 8 * v4;
    do
    {
      v8 = *v6;
      if (*v6)
      {
        v9 = sub_22ED78310(a1, *v6);
        if ((v9 & 1) != 0)
          return 0;
        v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
        v5 |= v8 != (v9 & 0xFFFFFFFFFFFFFFFELL);
        v11 = v16;
        v12 = (_DWORD *)(v9 & 0xFFFFFFFFFFFFFFFELL);
      }
      else
      {
        v10 = 0;
        v12 = 0;
        v11 = v16;
      }
      if (v11 >= 4)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v16;
        v12 = (_DWORD *)v10;
      }
      v17[v11] = v12;
      v13 = ++v16;
      ++v6;
      v7 -= 8;
    }
    while (v7);
    if ((v5 & 1) == 0)
      goto LABEL_14;
    v14 = *(_QWORD **)a1;
    return sub_22ECA137C(v14, v17, v13, *v2, v2[3], v2[1]);
  }
LABEL_14:
  v14 = *(_QWORD **)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1)
  {
    v13 = v16;
    return sub_22ECA137C(v14, v17, v13, *v2, v2[3], v2[1]);
  }
  return v2;
}

uint64_t sub_22ED8ED84(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _DWORD **v12;
  _DWORD **v13;
  _DWORD *v14;
  int v15;
  BOOL v16;
  _DWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  __int128 v33;
  size_t __n[2];
  unint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  _BYTE v39[64];
  void *v40[2];
  _QWORD v41[16];
  _QWORD *v42;
  uint64_t v43;
  _QWORD v44[18];

  v2 = a2;
  v44[16] = *MEMORY[0x24BDAC8D0];
  v42 = v44;
  v43 = 0x1000000000;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v2 + 16);
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = (_QWORD *)(v2 + 96);
    while (1)
    {
      v7 = sub_22ED78310(a1, *v6);
      if ((v7 & 1) != 0)
        break;
      v8 = v43;
      if (v43 >= (unint64_t)HIDWORD(v43))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v43;
      }
      v42[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v43) = v43 + 1;
      ++v6;
      v5 -= 8;
      if (!v5)
        goto LABEL_9;
    }
    v9 = 0;
  }
  else
  {
LABEL_9:
    v33 = 0u;
    *(_OWORD *)__n = 0u;
    sub_22E8ACE30((uint64_t)&v33, *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64));
    v31 = *(__n128 *)(v2 + 72);
    v32 = *(_QWORD *)(v2 + 88);
    if (!v31.n128_u64[0]
      || (sub_22ED89DE4((__n128 *)v40, (uint64_t)a1, &v31), v31 = *(__n128 *)v40, v32 = v41[0], v40[0]))
    {
      v40[0] = v41;
      v40[1] = (void *)0x1000000000;
      v11 = *(unsigned int *)(v2 + 16);
      if ((_DWORD)v11)
      {
        v30 = v2;
        v12 = (_DWORD **)(v2 + 96 + 8 * v11 + 8 * v11 + 8 * v11 + 8 * v11);
        v13 = &v12[v11];
        do
        {
          v14 = *v12;
          if (*v12)
          {
            v37 = v39;
            v38 = 0x800000000;
            v15 = *(unsigned __int8 *)v14;
            v16 = v15 == 211;
            if (v15 == 211)
              v17 = v14;
            else
              v17 = 0;
            v18 = v17 + 16;
            if (v16)
              v19 = v18;
            else
              v19 = v14 + 20;
            v20 = v14[1];
            if ((_DWORD)v20)
            {
              v21 = 8 * v20;
              do
              {
                v22 = *v19 & 0xFFFFFFFFFFFFFFFCLL;
                v35 = v22;
                v36 = 0;
                if (sub_22E793870(a1 + 1, &v35, &v36) && v36 != a1[1] + 16 * *((unsigned int *)a1 + 6))
                  v22 = *(_QWORD *)(v36 + 8);
                v23 = *(unsigned int *)(v22 + 28);
                v20 = v38;
                if (v38 >= (unint64_t)HIDWORD(v38))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v20 = v38;
                }
                *((_QWORD *)v37 + v20) = (v23 >> 13) & 3 | v22;
                LODWORD(v20) = v38 + 1;
                LODWORD(v38) = v38 + 1;
                ++v19;
                v21 -= 8;
              }
              while (v21);
            }
            v24 = *(_QWORD *)(*a1 + 88);
            v25 = *((_QWORD *)&v33 + 1);
            if (*((_QWORD *)&v33 + 1))
            {
              if (HIDWORD(__n[1]))
              {
                v26 = (void *)sub_22E3CD3D4(v24 + 2032, LODWORD(__n[1]), 3);
                memcpy(v26, (const void *)__n[0], LODWORD(__n[1]));
                v25 = *((_QWORD *)&v33 + 1);
                LODWORD(v20) = v38;
              }
              else
              {
                v26 = (void *)__n[0];
              }
            }
            else
            {
              v26 = 0;
            }
            v28 = sub_22F0605AC(v24, 0, v25, (uint64_t)v26, (uint64_t)&v31, 1, (*v14 >> 20) & 1, v37, (uint64_t)v37 + 8 * v20);
            v29 = LODWORD(v40[1]);
            if (LODWORD(v40[1]) >= (unint64_t)HIDWORD(v40[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v29 = LODWORD(v40[1]);
            }
            *((_QWORD *)v40[0] + v29) = v28;
            ++LODWORD(v40[1]);
            if (v37 != v39)
              free(v37);
          }
          else
          {
            v27 = LODWORD(v40[1]);
            if (LODWORD(v40[1]) >= (unint64_t)HIDWORD(v40[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v27 = LODWORD(v40[1]);
            }
            *((_QWORD *)v40[0] + v27) = 0;
            ++LODWORD(v40[1]);
          }
          ++v12;
        }
        while (v12 != v13);
        v2 = v30;
      }
      v9 = sub_22F33F264(*a1, (uint64_t)v42, v43, *(_DWORD *)v2, *(_DWORD *)(v2 + 12), *(_DWORD *)(v2 + 48), *(_DWORD *)(v2 + 4), (uint64_t)&v33, (uint64_t)&v31);
      if (v40[0] != v41)
        free(v40[0]);
    }
    else
    {
      v9 = 0;
    }
    if (HIDWORD(__n[1]))
      free((void *)__n[0]);
  }
  if (v42 != v44)
    free(v42);
  return v9;
}

uint64_t sub_22ED8F1C0(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ED78310(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F344(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22ED8F20C(uint64_t *a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD **v17;
  _DWORD **v18;
  _DWORD *v19;
  int v20;
  BOOL v21;
  _DWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  __int128 v40;
  size_t __n[2];
  int v42[3];
  unint64_t v43;
  _QWORD *v44;
  void *v45;
  uint64_t v46;
  _BYTE v47[128];
  void *v48;
  uint64_t v49;
  _BYTE v50[128];
  __n128 v51;
  _QWORD v52[10];

  v52[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 4);
  v6 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 16);
  v42[0] = *(_DWORD *)a2;
  v42[1] = v6;
  v42[2] = v4;
  v48 = v50;
  v49 = 0x1000000000;
  v40 = 0u;
  *(_OWORD *)__n = 0u;
  v38.n128_u64[0] = 0;
  v38.n128_u32[2] = 0;
  v39 = 0;
  v45 = v47;
  v46 = 0x1000000000;
  if (v5 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 16);
  }
  if (v5)
  {
    v7 = 8 * v5;
    v8 = (_QWORD *)(a2 + 104);
    do
    {
      v9 = sub_22ED78310(a1, *v8);
      if ((v9 & 1) != 0)
        goto LABEL_46;
      v10 = v49;
      if (v49 >= (unint64_t)HIDWORD(v49))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v49;
      }
      *((_QWORD *)v48 + v10) = v9 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v49) = v49 + 1;
      ++v8;
      v7 -= 8;
    }
    while (v7);
  }
  v11 = *(_QWORD *)(a2 + 40);
  if (v11)
  {
    v12 = sub_22ED89638(a1, v11, *(void **)(a2 + 48), 0, 0);
    if (!v12)
    {
LABEL_46:
      v35 = 0;
      goto LABEL_48;
    }
    v14 = v12;
    v15 = v13;
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  sub_22E8ACE30((uint64_t)&v40, v14, v15);
  v38 = *(__n128 *)(a2 + 56);
  v39 = *(_QWORD *)(a2 + 72);
  if (v38.n128_u64[0])
  {
    sub_22ED89DE4(&v51, (uint64_t)a1, &v38);
    v38 = v51;
    v39 = v52[0];
    if (!v51.n128_u64[0])
      goto LABEL_46;
  }
  v37 = a2;
  v16 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v16)
  {
    v17 = (_DWORD **)(a2 + 104 + 8 * v16);
    v18 = &v17[v16];
    do
    {
      v19 = *v17;
      if (*v17)
      {
        v51.n128_u64[0] = (unint64_t)v52;
        v51.n128_u64[1] = 0x800000000;
        v20 = *(unsigned __int8 *)v19;
        v21 = v20 == 211;
        if (v20 == 211)
          v22 = v19;
        else
          v22 = 0;
        v23 = v22 + 16;
        if (v21)
          v24 = v23;
        else
          v24 = v19 + 20;
        v25 = v19[1];
        if ((_DWORD)v25)
        {
          v26 = 8 * v25;
          do
          {
            v27 = *v24 & 0xFFFFFFFFFFFFFFFCLL;
            v43 = v27;
            v44 = 0;
            if (sub_22E793870(a1 + 1, &v43, &v44)
              && v44 != (_QWORD *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
            {
              v27 = v44[1];
            }
            v28 = *(unsigned int *)(v27 + 28);
            v25 = v51.n128_u32[2];
            if (v51.n128_u32[2] >= (unint64_t)v51.n128_u32[3])
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v25 = v51.n128_u32[2];
            }
            *(_QWORD *)(v51.n128_u64[0] + 8 * v25) = (v28 >> 13) & 3 | v27;
            LODWORD(v25) = ++v51.n128_u32[2];
            ++v24;
            v26 -= 8;
          }
          while (v26);
        }
        v29 = *(_QWORD *)(*a1 + 88);
        v30 = *((_QWORD *)&v40 + 1);
        if (*((_QWORD *)&v40 + 1))
        {
          if (HIDWORD(__n[1]))
          {
            v31 = (void *)sub_22E3CD3D4(v29 + 2032, LODWORD(__n[1]), 3);
            memcpy(v31, (const void *)__n[0], LODWORD(__n[1]));
            v30 = *((_QWORD *)&v40 + 1);
            LODWORD(v25) = v51.n128_u32[2];
          }
          else
          {
            v31 = (void *)__n[0];
          }
        }
        else
        {
          v31 = 0;
        }
        v33 = sub_22F0605AC(v29, 0, v30, (uint64_t)v31, (uint64_t)&v38, 1, (*v19 >> 20) & 1, (const void *)v51.n128_u64[0], v51.n128_u64[0] + 8 * v25);
        v34 = v46;
        if (v46 >= (unint64_t)HIDWORD(v46))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v34 = v46;
        }
        *((_QWORD *)v45 + v34) = v33;
        LODWORD(v46) = v46 + 1;
        if ((_QWORD *)v51.n128_u64[0] != v52)
          free((void *)v51.n128_u64[0]);
      }
      else
      {
        v32 = v46;
        if (v46 >= (unint64_t)HIDWORD(v46))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v32 = v46;
        }
        *((_QWORD *)v45 + v32) = 0;
        LODWORD(v46) = v46 + 1;
      }
      ++v17;
    }
    while (v17 != v18);
  }
  v35 = sub_22ECA7CAC((_QWORD *)*a1, (int *)(v37 + 80), 2u, (int *)(v37 + 88), 2, (uint64_t)&v40, (__int128 *)&v38, *(unsigned int *)(v37 + 96), (uint64_t)v48, v49, v42, (unsigned __int8 **)v45, v46);
LABEL_48:
  if (v45 != v47)
    free(v45);
  if (HIDWORD(__n[1]))
    free((void *)__n[0]);
  if (v48 != v50)
    free(v48);
  return v35;
}

uint64_t sub_22ED8F688(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ED78310(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33ECC8(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 4));
}

unsigned int *sub_22ED8F6D4(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int *v12;
  _DWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 20;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22ED78310(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v16;
      }
      *((_QWORD *)v15 + v8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    v9 = v16;
LABEL_11:
    v10 = a2[3];
    v11 = a2[1];
    v14[0] = *a2;
    v14[1] = v10;
    v14[2] = v11;
    v12 = sub_22ECA8A30(*a1, (uint64_t)v15, v9, v14);
  }
  if (v15 != v17)
    free(v15);
  return v12;
}

_DWORD *sub_22ED8F82C(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  _DWORD *v12;
  _DWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 20;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22ED78310(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v16;
      }
      *((_QWORD *)v15 + v8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    v9 = v16;
LABEL_11:
    v10 = a2[3];
    v11 = a2[1];
    v14[0] = *a2;
    v14[1] = v10;
    v14[2] = v11;
    v12 = sub_22ECA819C(*a1, (uint64_t)v15, v9, v14);
  }
  if (v15 != v17)
    free(v15);
  return v12;
}

_DWORD *sub_22ED8F984(uint64_t *a1, int *a2)
{
  unsigned int v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _DWORD *v12;
  void *v14;
  uint64_t v15;
  _QWORD v16[49];

  v16[48] = *MEMORY[0x24BDAC8D0];
  v14 = v16;
  v15 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = 0;
    v6 = a2 + 6;
    v7 = 2 * v4;
    do
    {
      v8 = *(_QWORD *)&v6[2 * (v5 + 1)];
      v9 = *(_QWORD *)&v6[4 * a2[4] + v5];
      v10 = sub_22ED78310(a1, *(_QWORD *)&v6[2 * v5]);
      if ((v10 & 1) == 0)
      {
        if (!v8 || (v8 = sub_22ED78310(a1, v8), (v8 & 1) == 0))
        {
          v11 = (_QWORD *)sub_22F2BAB24((uint64_t)&v14);
          *v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
          v11[1] = v8 & 0xFFFFFFFFFFFFFFFELL;
          v11[2] = v9;
        }
      }
      v5 += 2;
    }
    while (v7 != v5);
  }
  v12 = sub_22ECB0F9C(*a1, *a2, a2[3], a2[1], (uint64_t)v14, v15);
  if (v14 != v16)
    free(v14);
  return v12;
}

uint64_t sub_22ED8FAF0(uint64_t *a1, uint64_t *a2)
{
  unint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  unsigned __int32 v18;
  _QWORD *v19;
  int64x2_t v20;
  _QWORD v21[6];

  v2 = (unint64_t *)a2;
  v21[5] = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  if (*(_BYTE *)(*(_QWORD *)(*a2 & 0xFFFFFFFFFFFFFFF0) + 16) != 18)
    return sub_22ED73944(a1, a2);
  v5 = (uint64_t)(a2 + 1);
  for (i = *a2; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_13;
      v7 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v7 <= 0x39)
        break;
LABEL_8:
      if (sub_22F115668(i))
        v4 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_16;
    }
    if (v7 == 24)
      goto LABEL_15;
    if (v7 == 26)
      break;
    if (((1 << v7) & 0x20000000200003CLL) == 0)
      goto LABEL_8;
LABEL_13:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_13;
LABEL_15:
  v4 = i;
LABEL_16:
  sub_22F115668(v4);
  v9 = *v2;
  if (*v2 >= 0x10)
  {
    v19 = v21;
    v20 = vdupq_n_s64(0x20uLL);
    v21[4] = 0;
    v10 = sub_22F11598C(v9);
    if (v20.i64[0] < (unint64_t)v10)
      sub_22EEB52C0((uint64_t *)&v19, v10);
    v11 = v9 & 0xF;
    if ((v9 & 0xF) != 0)
      v12 = v9;
    else
      v12 = 0;
    if ((v9 & 0xF) != 0)
    {
      v9 = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0);
      if ((v9 & 0xFFFFFFFFFFFFFFF0) != 0)
        v13 = *(_QWORD *)((char *)&unk_22F498010
                        + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
      else
        v13 = 1;
      v5 = (v5 + v13 - 1) & -v13;
    }
    v14 = sub_22ED8FDE0(a1, (uint64_t)&v19, v9, v5, 1);
    if (v14 < 0x10 || (v15 = v14, v11) && (v15 = sub_22E8C1750((_QWORD **)a1, v14, v12), v15 < 0x10))
    {
      v2 = 0;
    }
    else
    {
      v16 = *(_QWORD *)(*a1 + 88);
      v17 = v20.i64[0] - v20.i64[1];
      v18 = v20.i32[0] - v20.i32[2];
      if (v20.i32[0] == v20.i32[2])
        v18 = sub_22F11598C(v15);
      v2 = (unint64_t *)sub_22E3CD3D4(v16 + 2032, v18 + 8, 3);
      *v2 = v15;
      memcpy(v2 + 1, (char *)v19 + v20.i64[1], v17);
    }
    if (v19 != v21)
    {
      if (v19)
        MEMORY[0x2348A0E84]();
    }
  }
  return (uint64_t)v2;
}

unint64_t sub_22ED8FDE0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40[18];
  int v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int v44;
  __int128 v45;
  void *v46[2];
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  _BYTE v53[64];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unsigned int v59;
  _BYTE v60[24];
  int v61;
  __int16 v62;
  char v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  _BYTE v67[64];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unsigned int v73;
  _BYTE v74[24];
  int v75;
  __int16 v76;
  char v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v10 = sub_22ED89638(a1, *(_QWORD *)(a3 + 32), *(void **)(a4 + 8), 0, 0);
  if (!v10)
    return 0;
  v12 = v11;
  v13 = (*(_DWORD *)(a3 + 16) >> 19);
  v14 = *(_DWORD *)a4;
  v15 = *(_QWORD *)(a3 + 40);
  v16 = *(_DWORD *)(a4 + 16);
  v48 = v10;
  v49 = v11;
  v47 = v15;
  v45 = 0u;
  *(_OWORD *)v46 = 0u;
  sub_22E8ACE30((uint64_t)&v45, v10, v11);
  if ((sub_22F0AAC5C(v48) & 4) != 0 && !sub_22E958204(*a1, (uint64_t)&v45, 0))
  {
    v17 = sub_22EF65A30(*(_QWORD *)(*a1 + 88), v13, v48, v47, 0);
    goto LABEL_18;
  }
  if ((v13 - 5) <= 1)
  {
    v17 = sub_22ED717D8((_QWORD *)*a1, v13, v14, v48, v49, v47, v16, a5);
LABEL_18:
    v24 = v17;
    goto LABEL_40;
  }
  v44 = v13;
  v18 = (_QWORD *)*a1;
  v64 = 0;
  v65 = v67;
  v66 = 0x800000000;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v71 = v18;
  v72 = v47;
  v73 = v16;
  sub_22EFC6D6C((uint64_t)v74, v47);
  *(_OWORD *)&v74[8] = xmmword_22F4555C0;
  v75 = 16842752;
  v76 = 0;
  v77 = 0;
  sub_22EC56024((uint64_t)&v64);
  v43 = 0;
  v19 = sub_22E958204(*a1, (uint64_t)&v45, 0);
  v43 = v19;
  if (v19)
  {
    if ((sub_22E958490((_QWORD *)*a1, (uint64_t)&v45, v19) & 1) == 0)
    {
      sub_22EC611AC(*a1, &v64, v43, 0);
      if ((_DWORD)v64 != 5)
      {
        if ((_DWORD)v64 != 2)
          goto LABEL_19;
        v20 = *(_QWORD *)v65 & 0xFFFFFFFFFFFFFFFCLL;
        v21 = *(_DWORD *)(v20 + 28) & 0x7F;
        if (v21 <= 0x2F && ((1 << v21) & 0xC00000060000) != 0)
        {
          v20 = sub_22EFBAEA4(*(_QWORD *)v65 & 0xFFFFFFFFFFFFFFFCLL);
          v21 = *(_DWORD *)(v20 + 28) & 0x7F;
        }
        if (v21 - 33 < 5)
        {
          if ((sub_22EA33594(*a1, v20, v44, 0, v16, v47) & 1) != 0)
          {
            v22 = *(_QWORD *)(v20 + 48);
            if (v22)
              v23 = v22 & 0xFFFFFFFFFFFFFFF0;
            else
              v23 = sub_22EF6462C(*(_QWORD *)(*a1 + 88), v20);
            v24 = sub_22EF65684(*(_QWORD *)(*a1 + 88), v13, v48, v23, 0);
            goto LABEL_31;
          }
          sub_22E8FCA40((_QWORD *)*a1, v14, 0x13E0u, 0, (uint64_t)&v50);
          sub_22E8BAE44((uint64_t)&v50, &v47);
          sub_22E903BEC((unsigned int *)&v50);
          sub_22E8FCA40((_QWORD *)*a1, *(_DWORD *)(v20 + 24), 0x6Fu, 0, (uint64_t)&v50);
          sub_22E903BEC((unsigned int *)&v50);
        }
        else
        {
LABEL_19:
          v25 = (_QWORD *)*a1;
          v50 = 0;
          v51 = v53;
          v52 = 0x800000000;
          v54 = 0;
          v55 = 0;
          v56 = 0;
          v57 = v25;
          v58 = v47;
          v59 = v16;
          sub_22EFC6D6C((uint64_t)v60, v47);
          *(_OWORD *)&v60[8] = xmmword_22F4555C0;
          v61 = 16842752;
          v62 = 0;
          v63 = 0;
          sub_22EC56024((uint64_t)&v50);
          sub_22EC611AC(*a1, &v50, v43, 0);
          if ((v50 - 2) <= 2)
          {
            v42 = *(_QWORD *)v51 & 0xFFFFFFFFFFFFFFFCLL;
            v35 = (_QWORD *)*a1;
            v41 = sub_22F31E40C(*a1, v42, v44);
            sub_22E8FCA40(v35, v16, 0x12A5u, 0, (uint64_t)v40);
            v36 = sub_22E890024((uint64_t)v40, (uint64_t *)&v42);
            v37 = sub_22E8900C4(v36, &v41);
            sub_22E8900C4(v37, (int *)&v44);
            sub_22E903BEC(v40);
            sub_22E8FCA40((_QWORD *)*a1, *(_DWORD *)(v42 + 24), 0x64u, 0, (uint64_t)v40);
          }
          else
          {
            sub_22E8FCA40((_QWORD *)*a1, v16, 0xFDFu, 0, (uint64_t)v40);
            v26 = sub_22E8900C4((uint64_t)v40, (int *)&v44);
            v27 = sub_22E8BAE44(v26, &v47);
            v28 = sub_22E894FB4(v27, &v43);
            v42 = sub_22F0AB0EC(&v48);
            sub_22E8906A0(v28, (uint64_t *)&v42);
          }
          sub_22E903BEC(v40);
          if (HIBYTE(v61))
          {
            if ((_DWORD)v50 == 5)
            {
              sub_22EC64D18(v57, (uint64_t)&v50);
            }
            else if (v55 && (*(_DWORD *)(v57[9] + 52) & 0x400000) != 0)
            {
              sub_22E90B5FC((unint64_t)v57, (uint64_t)&v50);
            }
          }
          if (v54)
          {
            v39 = sub_22EC6CBD0(v54);
            MEMORY[0x2348A0E9C](v39, 0x10E0C409F09D3C3);
          }
          if (v51 != v53)
            free(v51);
        }
      }
    }
  }
  v24 = 0;
LABEL_31:
  if (HIBYTE(v75))
  {
    if ((_DWORD)v64 == 5)
    {
      sub_22EC64D18(v71, (uint64_t)&v64);
    }
    else if (v69 && (*(_DWORD *)(v71[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v71, (uint64_t)&v64);
    }
  }
  if (v68)
  {
    v38 = sub_22EC6CBD0(v68);
    MEMORY[0x2348A0E9C](v38, 0x10E0C409F09D3C3);
  }
  if (v65 != v67)
    free(v65);
LABEL_40:
  if (HIDWORD(v46[1]))
    free(v46[0]);
  if (v24 < 0x10)
    return 0;
  v29 = *(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF0);
  if (v29)
    v30 = *(_BYTE *)(v29 + 16) == 24;
  else
    v30 = 0;
  if (v30
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 24
    && (v29 = sub_22F10CF48(v29)) != 0)
  {
    sub_22EEB5360(a2, *(_QWORD *)(v29 + 40), 4uLL, 4);
    *v31 = *(_DWORD *)(a4 + 16);
    sub_22EEB5360(a2, v24, 0x10uLL, 8);
    *(_DWORD *)v32 = *(_DWORD *)a4;
    *(_QWORD *)(v32 + 8) = v12;
  }
  else
  {
    sub_22EEB5360(a2, v24, 0x18uLL, 8);
    *(_DWORD *)v33 = *(_DWORD *)a4;
    *(_QWORD *)(v33 + 8) = v12;
    *(_DWORD *)(v33 + 16) = *(_DWORD *)(a4 + 16);
  }
  return v24;
}

uint64_t sub_22ED90408(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
    __asm { BR              X9 }
  return 0;
}

uint64_t sub_22ED906A8(uint64_t *a1, uint64_t a2, char a3, _QWORD *a4)
{
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unsigned __int32 v14;
  unsigned __int32 v15;
  uint64_t v16;
  __n128 v18;
  void *v19[2];
  _DWORD v20[66];
  uint64_t v21;

  v6 = a2;
  v21 = *MEMORY[0x24BDAC8D0];
  v8 = sub_22ED89638(a1, *(_QWORD *)(a2 + 16), *(void **)(a2 + 24), 0, 0);
  if (!v8)
    return 1;
  v10 = v8;
  v11 = v9;
  v12 = (*(_BYTE *)(v6 + 2) & 4) != 0 ? *(_DWORD *)(v6 + 64) : 0;
  sub_22ED89DE4(&v18, (uint64_t)a1, (__n128 *)(v6 + 32));
  if (!v18.n128_u64[0])
    return 1;
  v13 = *(unsigned int *)v6;
  if ((v13 & 0x40000) != 0 && (v14 = *(_DWORD *)(v6 + 56)) != 0)
  {
    v15 = *(_DWORD *)(v6 + 60);
    v19[0] = v20;
    v19[1] = (void *)0x800000000;
    v20[64] = v14;
    v20[65] = v15;
    v16 = v6 + 56 + 16 * ((v13 >> 18) & 1);
    if ((sub_22ED90408((uint64_t)a1, v16, v16 + 32 * *(unsigned int *)(v6 + 68)) & 1) != 0)
      v6 = 1;
    else
      v6 = sub_22F301540((_QWORD **)a1, v10, v11, v12, (uint64_t)&v18, (uint64_t)v19, a3, a4);
    if (v19[0] != v20)
      free(v19[0]);
  }
  else if (*(_DWORD *)(*a1 + 11992) != -1
         || v10 != *(_QWORD *)(v6 + 16)
         || v11 != *(_QWORD *)(v6 + 24)
         || v18.n128_u64[0] != *(_QWORD *)(v6 + 32))
  {
    return sub_22F301540((_QWORD **)a1, v10, v11, v12, (uint64_t)&v18, 0, a3, a4);
  }
  return v6;
}

uint64_t sub_22ED9087C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;
  unint64_t *v5;
  unsigned __int8 *v6;
  __n128 v7;
  uint64_t v8;

  v2 = a2;
  v4 = sub_22ED73944((_QWORD **)a1, *(uint64_t **)(a2 + 24));
  if (!v4)
    return 1;
  v5 = v4;
  v6 = sub_22EFFB374((unsigned __int8 *)v2);
  sub_22ED78310(a1, (unint64_t)v6, v7);
  if ((v8 & 1) != 0)
    return 1;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || v5 != *(unint64_t **)(v2 + 24)
    || *(_QWORD *)(v2 + 16) != (v8 & 0xFFFFFFFFFFFFFFFELL))
  {
    __asm { BR              X12 }
  }
  return v2;
}

uint64_t sub_22ED90940@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  return sub_22E95ADCC(a1, a2, 131, v6, a3, a4, v5 | (a5 << 32));
}

uint64_t sub_22ED9094C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  return sub_22E95ADCC(a1, a2, 133, v6, a3, a4, v5 | (a5 << 32));
}

uint64_t sub_22ED90958@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  return sub_22E95ADCC(a1, a2, 145, v6, a3, a4, v5 | (a5 << 32));
}

uint64_t sub_22ED90964@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  return sub_22E95ADCC(a1, a2, 146, v6, a3, a4, v5 | (a5 << 32));
}

void sub_22ED90970()
{
  JUMPOUT(0x22ED90978);
}

unint64_t sub_22ED9098C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 *v4;
  unint64_t result;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t *v9;
  unsigned int v10;
  unint64_t v11;

  v2 = *(uint64_t **)a1;
  v3 = **(_QWORD **)(a1 + 8);
  v4 = (unsigned __int8 *)sub_22EFBC5B4(v3);
  result = sub_22ED83974(v2, v4, (*(_BYTE *)(v3 + 96) & 0x60) == 32);
  if ((result & 1) != 0)
  {
    v7 = *(_QWORD *)(a1 + 16);
    v10 = *(_DWORD *)(v7 + 16);
    if (v10 >= *(_DWORD *)(v7 + 20))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v10 = *(_DWORD *)(v7 + 16);
    }
    *(_OWORD *)(*(_QWORD *)(v7 + 8) + 16 * v10) = xmmword_22F45D8D0;
  }
  else
  {
    v11 = result & 0xFFFFFFFFFFFFFFFELL;
    result = sub_22F3369FC();
    v6 = result;
    v7 = *(_QWORD *)(a1 + 16);
    v8 = *(_DWORD *)(v7 + 16);
    if (v8 >= *(_DWORD *)(v7 + 20))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v8 = *(_DWORD *)(v7 + 16);
    }
    v9 = (unint64_t *)(*(_QWORD *)(v7 + 8) + 16 * v8);
    *v9 = v11;
    v9[1] = v6;
  }
  ++*(_DWORD *)(v7 + 16);
  return result;
}

uint64_t sub_22ED90AFC(uint64_t **a1, unsigned int a2, int *a3, uint64_t a4, _BYTE *a5)
{
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  __n128 *v17;
  int v18;
  uint64_t v19;
  void **v20;
  uint64_t i;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t *v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  unint64_t v33;
  uint64_t result;
  uint64_t v35;
  int *v36;
  unint64_t v38;
  int v40;
  int v41;
  void **v42;
  char v43;
  int v44;
  void *v45[2];
  _QWORD v46[5];

  v46[4] = *MEMORY[0x24BDAC8D0];
  v8 = *a3;
  if ((*a3 - 6) <= 2)
  {
    v9 = *a1;
    v45[0] = 0;
    v40 = 3;
    v41 = 4;
    v42 = (void **)*((unsigned int *)v9 + 426);
    sub_22EB4DDB8((uint64_t)(v9 + 461), &v41, (int *)&v42, (__int16 *)((char *)v9 + 1693), (uint64_t *)v45, &v40);
    v10 = *((unsigned int *)v9 + 924);
    v11 = v10 - 2;
    v12 = v9[461];
    v13 = *(_DWORD *)(v12 + 576 * (v10 - 2));
    if (v13 == 5)
    {
      *(_BYTE *)(v12 + 576 * v10 - 4) = *(_BYTE *)(v12 + 576 * v11 + 572);
      v14 = 1;
    }
    else if (v13 == 2)
    {
      *(_BYTE *)(v12 + 576 * v10 - 4) = 1;
      v14 = *(_BYTE *)(v12 + 576 * v11 + 573) != 0;
    }
    else
    {
      v14 = 0;
      *(_BYTE *)(v12 + 576 * v10 - 4) = 0;
    }
    v15 = v12 + 576 * v10;
    *(_BYTE *)(v15 - 3) = v14;
    *(_WORD *)((char *)v9 + 1693) = 0;
    if (*((_DWORD *)v9 + 462))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v9 + 222), (llvm::SmallPtrSetImplBase *)(v15 - 560));
      sub_22EAEAE08((uint64_t)(v9 + 230), (uint64_t *)(v15 - 496));
    }
    v16 = sub_22ED78310(a1, *((_QWORD *)a3 + 3));
    if ((v16 & 1) != 0
      || (LODWORD(v45[0]) = *a3,
          v17 = sub_22EB14270(*a1, (unsigned __int8 *)(v16 & 0xFFFFFFFFFFFFFFFELL), (int *)v45),
          (v17 & 1) != 0))
    {
      sub_22EB48E64(v9);
      return 1;
    }
    v18 = (int)v45[0];
    if (*((_QWORD *)a3 + 3) != ((unint64_t)v17 & 0xFFFFFFFFFFFFFFFELL) || LODWORD(v45[0]) != *a3)
      *a5 = 1;
    *((_QWORD *)a3 + 3) = (unint64_t)v17 & 0xFFFFFFFFFFFFFFFELL;
    *a3 = v18;
    sub_22EB48E64(v9);
    v8 = *a3;
  }
  if (v8 != 2)
    return 0;
  v36 = a3;
  v19 = *((_QWORD *)a3 + 2);
  if (v19)
  {
    v20 = (void **)*((_QWORD *)a3 + 1);
    v38 = a2 | ((unint64_t)a2 << 32);
    for (i = 8 * v19; i; i -= 8)
    {
      v22 = *v20;
      v23 = *(_QWORD *)((unint64_t)*v20 & 0xFFFFFFFFFFFFFFF0);
      if (v23 && *(_BYTE *)(v23 + 16) == 36
        || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v23 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 36
        && (v23 = sub_22F10CF48(v23)) != 0)
      {
        *a5 = 1;
        v45[0] = v46;
        v45[1] = (void *)0x200000000;
        v24 = *(_QWORD *)(v23 + 32);
        v42 = v45;
        v43 = 0;
        v44 = -1;
        sub_22EE72E1C((uint64_t)&v42, v24);
        v25 = *(_DWORD *)(v23 + 20);
        v26 = *a1;
        v27 = *((_DWORD *)*a1 + 2998);
        *((_DWORD *)*a1 + 2998) = -1;
        v28 = sub_22ED8368C((uint64_t)a1, *(_QWORD *)(v23 + 32));
        if (v28 >= 0x10)
        {
          LODWORD(v29) = v25 - 1;
          if (v25)
            v29 = v29;
          else
            v29 = 0;
          v30 = sub_22EF663B4((*a1)[11], v28, v29 | ((unint64_t)(v25 != 0) << 32));
          v31 = *(unsigned int *)(a4 + 8);
          if (v31 >= *(unsigned int *)(a4 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v31 = *(unsigned int *)(a4 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a4 + 8 * v31) = v30;
          ++*(_DWORD *)(a4 + 8);
        }
        *((_DWORD *)v26 + 2998) = v27;
        if (v45[0] != v46)
          free(v45[0]);
        if (v28 < 0x10)
          return 1;
      }
      else
      {
        v45[0] = (void *)sub_22ED8368C((uint64_t)a1, (unint64_t)v22);
        if (v45[0] < (void *)0x10 || (sub_22EB14454((uint64_t)*a1, (unint64_t *)v45, v38) & 1) != 0)
          return 1;
        v32 = v45[0];
        if (v22 != v45[0])
          *a5 = 1;
        v33 = *(unsigned int *)(a4 + 8);
        if (v33 >= *(unsigned int *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v33 = *(unsigned int *)(a4 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a4 + 8 * v33) = v32;
        ++*(_DWORD *)(a4 + 8);
      }
      ++v20;
    }
  }
  v35 = *(unsigned int *)(a4 + 8);
  *((_QWORD *)v36 + 1) = *(_QWORD *)a4;
  *((_QWORD *)v36 + 2) = v35;
  if ((_DWORD)v35)
    return 0;
  result = 0;
  *v36 = 1;
  return result;
}

unint64_t sub_22ED90F1C(_QWORD **a1, uint64_t a2, unint64_t a3, int *a4)
{
  unint64_t v8;
  unint64_t result;
  uint64_t v10;
  int *v11;

  v8 = sub_22ED73B6C(a1, a2);
  result = 0;
  if (v8 >= 0x10)
  {
    if (*((_DWORD *)*a1 + 2998) == -1 && v8 == *(_QWORD *)(a3 + 32)
      || (a3 = sub_22EE7E490(*a1, v8, (*(_DWORD *)(a3 + 16) >> 19) & 1, *a4), result = 0, a3 >= 0x10))
    {
      v10 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
      if (!v10 || (*(_DWORD *)(v10 + 16) & 0xFE) != 0x28)
        sub_22F10CF48(v10);
      sub_22EEB5360(a2, a3, 4uLL, 4);
      *v11 = *a4;
      return a3;
    }
  }
  return result;
}

uint64_t sub_22ED91030(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _DWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  int v49;
  int v50;
  uint64_t v51;

  if (a2 < 0x10)
    return 1;
  while (2)
  {
    v4 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
    v5 = *(_DWORD *)(v4 + 16);
    result = 1;
    switch((char)v5)
    {
      case 0:
      case 1:
      case 4:
      case 6:
      case 7:
      case 8:
      case 10:
      case 12:
      case 27:
      case 29:
      case 32:
      case 36:
      case 37:
      case 38:
      case 39:
      case 54:
      case 55:
      case 56:
        goto LABEL_5;
      case 2:
        result = sub_22ED91030(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        if ((*(_BYTE *)(v4 + 19) & 2) == 0)
          return 1;
        v15 = *(_QWORD *)(v4 + 56);
        if (!v15)
          return 1;
        goto LABEL_50;
      case 3:
        result = sub_22ED91030(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v15 = *(_QWORD *)(v4 + 48);
        if (v15)
          goto LABEL_50;
        return 1;
      case 5:
        result = sub_22ED91030(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v14 = *(_QWORD *)(v4 + 40);
        return sub_22ED9153C(a1, v14, 0);
      case 13:
      case 48:
        v14 = *(_QWORD *)(v4 + 24);
        return sub_22ED9153C(a1, v14, 0);
      case 14:
        result = sub_22ED91030(a1, *(_QWORD *)(v4 + 24));
        if (!(_DWORD)result)
          return result;
        v17 = *(_QWORD *)(v4 + 40);
        if (!v17)
          return 1;
        result = sub_22ED9D24C(a1, v17, v16);
        if (!(_DWORD)result)
          return result;
        v18 = *(unsigned int *)(v4 + 20);
        if (!(_DWORD)v18)
          return 1;
        v19 = v4 + 48;
        v20 = v18 - 1;
        do
        {
          result = sub_22EDA220C(a1, v19);
          v21 = v20-- != 0;
          v22 = v21;
          if (!(_DWORD)result)
            break;
          v19 += 24;
        }
        while ((v22 & 1) != 0);
        return result;
      case 15:
        result = sub_22EDA20E4(a1, *(_QWORD *)(v4 + 40));
        if ((_DWORD)result)
          goto LABEL_19;
        return result;
      case 16:
        v7 = *(_QWORD *)(v4 + 40);
        goto LABEL_22;
      case 17:
        v14 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFFCLL;
        return sub_22ED9153C(a1, v14, 0);
      case 18:
        return sub_22EDA21A8(a1, *(_QWORD *)(v4 + 32));
      case 19:
        v7 = *(_QWORD *)(v4 + 40);
        if (!v7)
          goto LABEL_23;
LABEL_22:
        result = sub_22ED9153C(a1, v7, 0);
        if (!(_DWORD)result)
          return result;
LABEL_23:
        v6 = (unint64_t *)(v4 + 48);
        goto LABEL_6;
      case 20:
        result = sub_22EDA21A8(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v23 = *(unsigned int *)(v4 + 20);
        if (!(_DWORD)v23)
          return 1;
        v24 = v4 + 48;
        v25 = v23 - 1;
        do
        {
          result = sub_22EDA220C(a1, v24);
          v21 = v25-- != 0;
          v26 = v21;
          if (!(_DWORD)result)
            break;
          v24 += 24;
        }
        while ((v26 & 1) != 0);
        return result;
      case 21:
        v8 = *(_QWORD *)(v4 + 48);
        if (v8)
        {
          result = sub_22ED9153C(a1, v8, 0);
          if (!(_DWORD)result)
            return result;
        }
        goto LABEL_31;
      case 22:
        goto LABEL_34;
      case 23:
        v9 = *(_QWORD *)(v4 + 64);
        if (!v9)
          goto LABEL_5;
        goto LABEL_35;
      case 24:
        v10 = *(_QWORD *)(v4 + 32);
        if (v10)
        {
          result = sub_22EDA21A8(a1, v10);
          if (!(_DWORD)result)
            return result;
        }
LABEL_31:
        v6 = (unint64_t *)(v4 + 40);
        goto LABEL_6;
      case 25:
      case 28:
      case 49:
LABEL_19:
        v6 = (unint64_t *)(v4 + 24);
        goto LABEL_6;
      case 26:
        result = sub_22ED91030(a1, *(_QWORD *)(v4 + 24));
        if (!(_DWORD)result)
          return result;
        v27 = *(_QWORD *)(v4 + 16);
        v28 = (unsigned __int16)(v27 >> 38);
        if (!(unsigned __int16)(v27 >> 38))
          goto LABEL_83;
        v29 = 8 * v28;
        v30 = (_QWORD *)(v4 + 40);
        break;
      case 30:
        v11 = *(_QWORD *)(v4 + 48);
        if (v11)
        {
          result = sub_22ED9153C(a1, v11, 0);
          if (!(_DWORD)result)
            return result;
        }
LABEL_34:
        v9 = *(_QWORD *)(v4 + 56);
        if (!v9)
          goto LABEL_5;
LABEL_35:
        result = sub_22ED9153C(a1, v9, 0);
        if (!(_DWORD)result)
          return result;
LABEL_5:
        v6 = (unint64_t *)(v4 + 32);
LABEL_6:
        a2 = *v6;
        if (*v6 < 0x10)
          return 1;
        continue;
      case 31:
        v12 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFF0;
        goto LABEL_41;
      case 33:
        v37 = *(_QWORD *)(v4 + 24);
        if (*(_QWORD *)(v37 & 0xFFFFFFFFFFFFFFF0) != v4)
        {
          result = sub_22ED91030(a1, v37);
          if (!(_DWORD)result)
            return result;
        }
        v38 = (*(_QWORD *)(v4 + 16) >> 19) & 0x7FLL;
        if (!v38)
          return 1;
        v39 = (uint64_t *)(v4 + 48);
        v40 = 8 * v38 - 8;
        do
        {
          v41 = *v39++;
          result = sub_22ED91030(a1, v41);
          if ((_DWORD)result)
            v42 = v40 == 0;
          else
            v42 = 1;
          v40 -= 8;
        }
        while (!v42);
        return result;
      case 40:
        while ((v5 & 0x100000) != 0)
        {
          v4 = *(_QWORD *)(*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v4)
          {
            v5 = *(_DWORD *)(v4 + 16);
            if ((v5 & 0xFE) == 0x28)
              continue;
          }
          v4 = sub_22F10CF48(v4);
          v5 = *(_DWORD *)(v4 + 16);
        }
        goto LABEL_5;
      case 41:
        while ((v5 & 0x100000) != 0)
        {
          v4 = *(_QWORD *)(*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v4)
          {
            v5 = *(_DWORD *)(v4 + 16);
            if ((v5 & 0xFE) == 0x28)
              continue;
          }
          v4 = sub_22F10CF48(v4);
          v5 = *(_DWORD *)(v4 + 16);
        }
        goto LABEL_5;
      case 42:
        v43 = *(_DWORD *)(v4 + 20);
        v51 = *(_QWORD *)(v4 + 40);
        v49 = 8;
        v50 = v43;
        result = sub_22EDA220C(a1, (uint64_t)&v49);
        if ((_DWORD)result)
        {
          v44 = *(_DWORD *)(v4 + 20);
          v51 = *(_QWORD *)(v4 + 40);
          v49 = 8;
          v50 = v44;
          return sub_22EDA220C(a1, (uint64_t)&v49);
        }
        return result;
      case 43:
        v13 = *(_QWORD *)(v4 + 8);
        v6 = (unint64_t *)(v4 + 8);
        if ((sub_22ED91030(a1, v13) & 1) == 0)
          return 0;
        goto LABEL_6;
      case 46:
        result = sub_22EDA20E4(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v45 = *(unsigned int *)(v4 + 20);
        if (!(_DWORD)v45)
          return 1;
        v46 = v4 + 40;
        v47 = v45 - 1;
        do
        {
          result = sub_22EDA220C(a1, v46);
          v21 = v47-- != 0;
          v48 = v21;
          if (!(_DWORD)result)
            break;
          v46 += 24;
        }
        while ((v48 & 1) != 0);
        return result;
      case 47:
        if (*(_BYTE *)(a1 + 4)
          || *(_DWORD *)a1 > (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 32) & 0x7FFFu))
        {
          return result;
        }
        *(_BYTE *)(a1 + 5) = 1;
        *(_DWORD *)(a1 + 8) = 0;
        return 0;
      case 51:
        v12 = *(_QWORD *)(v4 + 24);
LABEL_41:
        result = sub_22ED91030(a1, v12);
        if (!(_DWORD)result)
          return result;
        goto LABEL_5;
      default:
        return result;
    }
    break;
  }
  do
  {
    if ((sub_22ED91030(a1, *v30) & 1) == 0)
      return 0;
    ++v30;
    v29 -= 8;
  }
  while (v29);
  v27 = *(_QWORD *)(v4 + 16);
  v28 = (unsigned __int16)(v27 >> 38);
LABEL_83:
  if ((v27 & 0x3C0000000000000) == 0x80000000000000)
  {
    v31 = (_DWORD *)((v4 + 40 + 8 * v28 + 4 * ((v27 >> 59) & 1) + 7) & 0xFFFFFFFFFFFFFFF8);
    v34 = *v31;
    v33 = v31 + 2;
    v32 = v34;
    if (v34)
    {
      v35 = 8 * v32;
      while ((sub_22ED91030(a1, *v33) & 1) != 0)
      {
        ++v33;
        v35 -= 8;
        if (!v35)
          goto LABEL_88;
      }
      return 0;
    }
  }
LABEL_88:
  v36 = sub_22F257D3C(v4);
  if (!v36)
    return 1;
  v15 = v36;
LABEL_50:
  result = sub_22ED9153C(a1, v15, 0);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t sub_22ED9153C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unsigned int v5;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD v17[10];

  v17[8] = *MEMORY[0x24BDAC8D0];
  if (a2
    && (*(unsigned __int8 *)a2 - 102 > 0x84 || !*(_BYTE *)(a1 + 4) || (*(_BYTE *)(a2 + 1) & 0x80) != 0))
  {
    if (a3)
    {
      v4 = a2 & 0xFFFFFFFFFFFFFFFBLL;
      v5 = *(_DWORD *)(a3 + 8);
      if (v5 >= *(_DWORD *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v5 = *(_DWORD *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v5) = v4;
      ++*(_DWORD *)(a3 + 8);
    }
    else
    {
      v17[0] = a2 & 0xFFFFFFFFFFFFFFFBLL;
      v16 = 0x800000001;
      v7 = 1;
      do
      {
        v8 = v7;
        v9 = &v17[v7];
        v10 = *(v9 - 1);
        if ((v10 & 4) != 0)
        {
          v7 = v8 - 1;
          LODWORD(v16) = v8 - 1;
        }
        else
        {
          *(v9 - 1) = v10 | 4;
          v11 = *(unsigned __int8 *)(v10 & 0xFFFFFFFFFFFFFFF8) - 1;
          if (v11 <= 0xEB)
            __asm { BR              X9 }
          v7 = v16;
          if ((_DWORD)v8 != (_DWORD)v16)
          {
            v12 = &v17[v16 - 1];
            if (&v17[v8] < v12)
            {
              v13 = &v17[v8 + 1];
              do
              {
                v14 = *(v13 - 1);
                *(v13 - 1) = *v12;
                *v12-- = v14;
              }
              while (v13++ < v12);
            }
          }
        }
      }
      while (v7);
    }
  }
  return 1;
}

uint64_t sub_22ED9D24C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  int v6;
  uint64_t result;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  int64_t v15;
  char *v16;
  char *v17;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  unsigned int v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t **v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t **v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  BOOL v55;
  uint64_t v56;
  uint64_t **v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t **v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t **v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t **v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t **v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t **v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int *v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  unsigned int v97;
  BOOL v98;
  uint64_t v99;
  uint64_t **v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t **v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t **v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t **v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t **v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t **v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t **v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  BOOL v139;
  uint64_t v140;
  uint64_t **v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int v146;
  BOOL v147;
  uint64_t v148;
  uint64_t **v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t **v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t **v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unsigned int v167;
  BOOL v168;
  uint64_t v169;
  uint64_t **v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unsigned int v175;
  uint64_t v176;
  uint64_t **v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t **v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t **v189;
  uint64_t *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  unint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  unsigned int v200;
  BOOL v201;
  uint64_t v202;
  uint64_t **v203;
  uint64_t *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  unint64_t v209;
  unint64_t v210;
  unsigned int v211;
  uint64_t v212;
  uint64_t **v213;
  uint64_t *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t **v217;
  uint64_t *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t *v222;
  unint64_t v223;
  uint64_t v224;
  unint64_t v225;
  unint64_t *v226;
  unint64_t v227;
  uint64_t v228;
  unint64_t v229;
  unint64_t *v230;
  unint64_t v231;
  unint64_t v232;
  uint64_t v233;
  _QWORD *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t **v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t **v241;
  uint64_t *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t **v245;
  uint64_t *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unsigned int v250;
  BOOL v251;
  uint64_t v252;
  uint64_t **v253;
  uint64_t *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unsigned int v261;
  BOOL v262;
  uint64_t v263;
  uint64_t **v264;
  uint64_t *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unsigned int v269;
  BOOL v270;
  uint64_t v271;
  uint64_t **v272;
  uint64_t *v273;
  uint64_t v274;
  uint64_t v275;
  unint64_t *v276;
  unint64_t v277;
  uint64_t v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  _QWORD *v283;
  uint64_t **v284;
  uint64_t *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unsigned int v290;
  uint64_t v291;
  uint64_t **v292;
  uint64_t *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t **v296;
  uint64_t *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  _QWORD *v301;
  unint64_t v302;
  uint64_t v303;
  _QWORD *v304;
  uint64_t v305;
  _DWORD *v306;
  uint64_t v307;
  uint64_t *v308;
  unsigned int v309;
  uint64_t v310;
  unsigned int v311;
  BOOL v312;
  uint64_t v313;
  uint64_t **v314;
  uint64_t *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  _QWORD *v320;
  uint64_t v321;
  unsigned int v322;
  BOOL v323;
  uint64_t v324;
  uint64_t **v325;
  uint64_t *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t **v329;
  uint64_t *v330;
  uint64_t v331;
  uint64_t v332;
  unint64_t **v333;
  unint64_t *v334;
  unint64_t v335;
  uint64_t v336;
  unint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  unsigned int v342;
  BOOL v343;
  uint64_t v344;
  uint64_t **v345;
  uint64_t *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t **v349;
  uint64_t *v350;
  uint64_t v351;
  uint64_t v352;
  int v353;
  uint64_t v354;
  uint64_t v355;
  unsigned int v356;
  uint64_t v357;
  uint64_t **v358;
  uint64_t *v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t **v362;
  uint64_t *v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t **v366;
  uint64_t *v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t **v370;
  uint64_t *v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  unint64_t *v375;
  unint64_t v376;
  uint64_t v377;
  unint64_t v378;
  uint64_t v379;
  uint64_t v380;
  unsigned int v381;
  uint64_t v382;
  uint64_t **v383;
  uint64_t *v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  unsigned int v389;
  uint64_t v390;
  uint64_t **v391;
  uint64_t *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t **v395;
  uint64_t *v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t *v401;
  uint64_t v402;
  unint64_t *v403;
  uint64_t v404;
  unint64_t v405;
  unint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t *v410;
  uint64_t v411;
  uint64_t **v412;
  uint64_t *v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t **v416;
  uint64_t *v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  unsigned int v421;
  BOOL v422;
  uint64_t v423;
  uint64_t **v424;
  uint64_t *v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  unint64_t v429;
  unint64_t v430;
  unsigned int v431;
  uint64_t v432;
  uint64_t **v433;
  uint64_t *v434;
  uint64_t v435;
  uint64_t v436;
  unint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  unsigned int v441;
  uint64_t v442;
  uint64_t **v443;
  uint64_t *v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  unsigned int v449;
  uint64_t v450;
  uint64_t **v451;
  uint64_t *v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  unint64_t v457;
  unint64_t *v458;
  unint64_t v459;
  unint64_t v460;
  unsigned int v461;
  uint64_t v462;
  uint64_t **v463;
  uint64_t *v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  unsigned int v468;
  BOOL v469;
  uint64_t v470;
  uint64_t **v471;
  uint64_t *v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t **v475;
  uint64_t *v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t **v479;
  uint64_t *v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t **v483;
  uint64_t *v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t **v487;
  uint64_t *v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t **v491;
  uint64_t *v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t **v495;
  uint64_t *v496;
  uint64_t v497;
  uint64_t v498;
  int v499;
  uint64_t v500;
  uint64_t v501;
  unsigned int v502;
  uint64_t v503;
  uint64_t **v504;
  uint64_t *v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  unint64_t v509;
  unsigned int v510;
  uint64_t v511;
  uint64_t **v512;
  uint64_t *v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t **v516;
  uint64_t *v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t **v520;
  uint64_t *v521;
  uint64_t v522;
  uint64_t v523;
  unsigned int v524;
  uint64_t **v525;
  uint64_t *v526;
  uint64_t v527;
  uint64_t v528;
  unsigned int v529;
  uint64_t **v530;
  uint64_t *v531;
  uint64_t v532;
  uint64_t v533;
  unint64_t v534;
  uint64_t v535;
  uint64_t i;
  uint64_t v537;
  uint64_t v538;
  _QWORD *v539;
  uint64_t v540;
  unsigned int v541;
  BOOL v542;
  uint64_t v543;
  uint64_t **v544;
  uint64_t *v545;
  uint64_t v546;
  uint64_t v547;
  unint64_t v548;
  unsigned int v549;
  uint64_t v550;
  uint64_t **v551;
  uint64_t *v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t **v555;
  uint64_t *v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t *v559;
  uint64_t v560;
  uint64_t **v561;
  uint64_t *v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t *v565;
  uint64_t v566;
  unsigned int v567;
  uint64_t v568;
  uint64_t **v569;
  uint64_t *v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  char *v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t **v577;
  uint64_t *v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t **v581;
  uint64_t *v582;
  uint64_t v583;
  uint64_t v584;
  unint64_t *v585;
  uint64_t v586;
  unint64_t v587;
  unint64_t v588;
  uint64_t **v589;
  uint64_t *v590;
  uint64_t v591;
  uint64_t v592;
  unint64_t v593;
  uint64_t v594;
  unsigned int v595;
  uint64_t v596;
  uint64_t **v597;
  uint64_t *v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t **v601;
  uint64_t *v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  BOOL v612;
  uint64_t **v613;
  uint64_t *v614;
  uint64_t v615;
  uint64_t v616;
  BOOL v617;
  BOOL v618;
  BOOL v619;
  BOOL v620;
  BOOL v621;
  int *v622;
  BOOL v623;
  BOOL v624;
  BOOL v625;
  uint64_t **v626;
  uint64_t *v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  int v637;
  uint64_t v638;

  if (!a2)
    return 1;
  v5 = a2 + 28;
  v6 = *(_DWORD *)(a2 + 28) & 0x7F;
  if ((*(_DWORD *)(a2 + 28) & 0x200) != 0)
  {
    if (v6 == 38)
      return sub_22EDA122C(a1, a2);
    return 1;
  }
  switch(v6)
  {
    case 0:
      result = sub_22EDA22D8(a1, 0, a3);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v9 = *v8;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v11 = *(_QWORD *)v10 + 8 * *(unsigned int *)(v10 + 8);
      }
      else
      {
        v11 = 0;
      }
      while (2)
      {
        if (v9 == (uint64_t *)v11)
          return 1;
        if ((sub_22EDA2374(a1, *v9) & 1) != 0)
        {
          ++v9;
          continue;
        }
        break;
      }
      return 0;
    case 1:
      v276 = *(unint64_t **)(a2 + 96);
      if (v276)
      {
        v279 = *v276;
        v278 = (uint64_t)(v276 + 1);
        v277 = v279;
        if (!*(_BYTE *)(a1 + 4) || !v277 || (*(_BYTE *)(*(_QWORD *)(v277 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
        {
          result = sub_22EDA16E8(a1, v277, v278);
          if (!(_DWORD)result)
            return result;
        }
      }
      v280 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
      result = sub_22ED9153C(a1, v280, 0);
      if (!(_DWORD)result)
        return result;
      v281 = *(unsigned int *)(a2 + 112);
      if (!(_DWORD)v281)
        goto LABEL_461;
      v282 = 16 * v281;
      v283 = (_QWORD *)(*(_QWORD *)(a2 + 104) + 8);
      while (1)
      {
        if (*v283)
        {
          result = sub_22ED9153C(a1, *v283, 0);
          if (!(_DWORD)result)
            break;
        }
        v283 += 2;
        v282 -= 16;
        if (!v282)
        {
LABEL_461:
          if ((*(_BYTE *)(v5 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v285 = *v284;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v287 = *(_QWORD *)v286 + 8 * *(unsigned int *)(v286 + 8);
            }
            else
            {
              v287 = 0;
            }
            while (v285 != (uint64_t *)v287)
            {
              if ((sub_22EDA2374(a1, *v285) & 1) == 0)
                return 0;
              ++v285;
            }
          }
          return 1;
        }
      }
      return result;
    case 2:
      result = sub_22ED9153C(a1, *(_QWORD *)(a2 + 80) & 0xFFFFFFFFFFFFFFF8, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v242 = *v241;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v244 = *(_QWORD *)v243 + 8 * *(unsigned int *)(v243 + 8);
      }
      else
      {
        v244 = 0;
      }
      while (2)
      {
        if (v242 == (uint64_t *)v244)
          return 1;
        if ((sub_22EDA2374(a1, *v242) & 1) != 0)
        {
          ++v242;
          continue;
        }
        break;
      }
      return 0;
    case 3:
      result = sub_22ED9D24C(a1, *(_QWORD *)(a2 + 40), a3);
      if (!(_DWORD)result)
        return result;
      v258 = *(_QWORD *)(a2 + 48);
      if (!v258)
        goto LABEL_425;
      v259 = *(unsigned int *)(v258 + 8);
      if (!(_DWORD)v259)
        goto LABEL_425;
      v260 = v258 + 16;
      while ((sub_22EDA1FB0(a1, v260) & 1) != 0)
      {
        v260 += 32;
        if (!--v259)
        {
LABEL_425:
          v261 = *(_DWORD *)v5 & 0x7F;
          v262 = v261 > 0x39 || ((1 << v261) & 0x3F0003E01011066) == 0;
          if (v262
            && (v261 - 70 <= 0xD ? (v619 = ((1 << (v261 - 70)) & 0x2803) == 0) : (v619 = 1), v619 && v261 - 19 > 4))
          {
            v263 = 0;
          }
          else
          {
            v263 = sub_22EFCAE04(a2);
          }
          result = sub_22EDA22D8(a1, v263, v257);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v5 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v265 = *v264;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v267 = *(_QWORD *)v266 + 8 * *(unsigned int *)(v266 + 8);
            }
            else
            {
              v267 = 0;
            }
            while (v265 != (uint64_t *)v267)
            {
              if ((sub_22EDA2374(a1, *v265) & 1) == 0)
                return 0;
              ++v265;
            }
          }
          return 1;
        }
      }
      return 0;
    case 4:
      result = sub_22EDA22D8(a1, 0, a3);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v190 = *v189;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v192 = *(_QWORD *)v191 + 8 * *(unsigned int *)(v191 + 8);
      }
      else
      {
        v192 = 0;
      }
      while (2)
      {
        if (v190 == (uint64_t *)v192)
          return 1;
        if ((sub_22EDA2374(a1, *v190) & 1) != 0)
        {
          ++v190;
          continue;
        }
        break;
      }
      return 0;
    case 5:
      result = sub_22EDA22D8(a1, a2 + 40, a3);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v330 = *v329;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v332 = *(_QWORD *)v331 + 8 * *(unsigned int *)(v331 + 8);
      }
      else
      {
        v332 = 0;
      }
      while (2)
      {
        if (v330 == (uint64_t *)v332)
          return 1;
        if ((sub_22EDA2374(a1, *v330) & 1) != 0)
        {
          ++v330;
          continue;
        }
        break;
      }
      return 0;
    case 6:
      result = sub_22EDA22D8(a1, a2 + 40, a3);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v363 = *v362;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v365 = *(_QWORD *)v364 + 8 * *(unsigned int *)(v364 + 8);
      }
      else
      {
        v365 = 0;
      }
      while (2)
      {
        if (v363 == (uint64_t *)v365)
          return 1;
        if ((sub_22EDA2374(a1, *v363) & 1) != 0)
        {
          ++v363;
          continue;
        }
        break;
      }
      return 0;
    case 7:
      result = sub_22ED9153C(a1, *(_QWORD *)(a2 + 40), 0);
      if (!(_DWORD)result)
        return result;
      v269 = *(_DWORD *)v5 & 0x7F;
      v270 = v269 > 0x39 || ((1 << v269) & 0x3F0003E01011066) == 0;
      v271 = !v270 || v269 - 70 <= 0xD && ((1 << (v269 - 70)) & 0x2803) != 0 || v269 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EDA22D8(a1, v271, v268);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v273 = *v272;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v275 = *(_QWORD *)v274 + 8 * *(unsigned int *)(v274 + 8);
      }
      else
      {
        v275 = 0;
      }
      while (2)
      {
        if (v273 == (uint64_t *)v275)
          return 1;
        if ((sub_22EDA2374(a1, *v273) & 1) != 0)
        {
          ++v273;
          continue;
        }
        break;
      }
      return 0;
    case 8:
      v374 = *(_QWORD *)(a2 + 40);
      v375 = (unint64_t *)(v374 & 0xFFFFFFFFFFFFFFF8);
      if ((v374 & 4) != 0 && v375)
      {
        v378 = *v375;
        v377 = (uint64_t)(v375 + 1);
        v376 = v378;
        if ((!*(_BYTE *)(a1 + 4) || !v376 || (*(_BYTE *)(*(_QWORD *)(v376 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
          && (sub_22EDA16E8(a1, v376, v377) & 1) == 0)
        {
          return 0;
        }
      }
      else
      {
        if ((v374 & 4) != 0)
          v548 = 0;
        else
          v548 = v374 & 0xFFFFFFFFFFFFFFF8;
        result = sub_22ED9D24C(a1, v548, v375);
        if (!(_DWORD)result)
          return result;
      }
      v549 = *(_DWORD *)v5 & 0x7F;
      if (v549 <= 0x39 && ((1 << v549) & 0x3F0003E01011066) != 0
        || v549 - 70 <= 0xD && ((1 << (v549 - 70)) & 0x2803) != 0
        || v549 - 19 <= 4)
      {
        v550 = sub_22EFCAE04(a2);
      }
      else
      {
        v550 = 0;
      }
      result = sub_22EDA22D8(a1, v550, v377);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v552 = *v551;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v554 = *(_QWORD *)v553 + 8 * *(unsigned int *)(v553 + 8);
      }
      else
      {
        v554 = 0;
      }
      while (1)
      {
        if (v552 == (uint64_t *)v554)
          return 1;
        if ((sub_22EDA2374(a1, *v552) & 1) == 0)
          break;
        ++v552;
      }
      return 0;
    case 9:
      v221 = *(_QWORD *)(a2 + 48);
      v222 = (unint64_t *)(v221 & 0xFFFFFFFFFFFFFFF8);
      if ((v221 & 4) != 0 && v222)
      {
        v225 = *v222;
        v224 = (uint64_t)(v222 + 1);
        v223 = v225;
        if ((!*(_BYTE *)(a1 + 4) || !v223 || (*(_BYTE *)(*(_QWORD *)(v223 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
          && (sub_22EDA16E8(a1, v223, v224) & 1) == 0)
        {
          return 0;
        }
      }
      else
      {
        if ((v221 & 4) != 0)
          v534 = 0;
        else
          v534 = v221 & 0xFFFFFFFFFFFFFFF8;
        result = sub_22ED9D24C(a1, v534, v222);
        if (!(_DWORD)result)
          return result;
      }
      v535 = *(unsigned int *)(a2 + 36);
      if ((_DWORD)v535)
      {
        for (i = 0; i != v535; ++i)
        {
          v537 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8 * i);
          v538 = *(_DWORD *)(v537 + 12) & 0x1FFFFFFF;
          if ((_DWORD)v538)
          {
            v539 = (_QWORD *)(v537 + 16);
            v540 = 8 * v538;
            do
            {
              if ((sub_22ED9D24C(a1, *v539, v224) & 1) == 0)
                return 0;
              ++v539;
              v540 -= 8;
            }
            while (v540);
          }
        }
      }
      v541 = *(_DWORD *)v5 & 0x7F;
      v542 = v541 > 0x39 || ((1 << v541) & 0x3F0003E01011066) == 0;
      if (v542 && (v541 - 70 <= 0xD ? (v625 = ((1 << (v541 - 70)) & 0x2803) == 0) : (v625 = 1), v625 && v541 - 19 > 4))
        v543 = 0;
      else
        v543 = sub_22EFCAE04(a2);
      result = sub_22EDA22D8(a1, v543, v224);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v545 = *v544;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v547 = *(_QWORD *)v546 + 8 * *(unsigned int *)(v546 + 8);
      }
      else
      {
        v547 = 0;
      }
      while (1)
      {
        if (v545 == (uint64_t *)v547)
          return 1;
        if ((sub_22EDA2374(a1, *v545) & 1) == 0)
          break;
        ++v545;
      }
      return 0;
    case 10:
      result = sub_22EDA22D8(a1, 0, a3);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v371 = *v370;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v373 = *(_QWORD *)v372 + 8 * *(unsigned int *)(v372 + 8);
      }
      else
      {
        v373 = 0;
      }
      while (2)
      {
        if (v371 == (uint64_t *)v373)
          return 1;
        if ((sub_22EDA2374(a1, *v371) & 1) != 0)
        {
          ++v371;
          continue;
        }
        break;
      }
      return 0;
    case 11:
      return (sub_22EDA1274(a1, a2) & 1) != 0;
    case 12:
      result = sub_22EDA22D8(a1, a2 + 40, a3);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v218 = *v217;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v220 = *(_QWORD *)v219 + 8 * *(unsigned int *)(v219 + 8);
      }
      else
      {
        v220 = 0;
      }
      while (2)
      {
        if (v218 == (uint64_t *)v220)
          return 1;
        if ((sub_22EDA2374(a1, *v218) & 1) != 0)
        {
          ++v218;
          continue;
        }
        break;
      }
      return 0;
    case 13:
      if (!sub_22EDA157C(a1, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72)))
        return 0;
      v353 = *(_DWORD *)(a2 + 24);
      v354 = *(_QWORD *)(a2 + 80);
      v636 = *(_QWORD *)(a2 + 40);
      v637 = v353;
      v638 = v354;
      if (!sub_22EDA1614(a1, &v636))
        return 0;
      if ((v356 = *(_DWORD *)v5 & 0x7F, v356 <= 0x39) && ((1 << v356) & 0x3F0003E01011066) != 0
        || v356 - 70 <= 0xD && ((1 << (v356 - 70)) & 0x2803) != 0
        || v356 - 19 <= 4)
      {
        v357 = sub_22EFCAE04(a2);
      }
      else
      {
        v357 = 0;
      }
      if (!sub_22EDA22D8(a1, v357, v355))
        return 0;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v359 = *v358;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v361 = *(_QWORD *)v360 + 8 * *(unsigned int *)(v360 + 8);
      }
      else
      {
        v361 = 0;
      }
      while (2)
      {
        if (v359 == (uint64_t *)v361)
          return 1;
        if ((sub_22EDA2374(a1, *v359) & 1) != 0)
        {
          ++v359;
          continue;
        }
        break;
      }
      return 0;
    case 14:
      result = sub_22EDA22D8(a1, 0, a3);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v154 = *v153;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v156 = *(_QWORD *)v155 + 8 * *(unsigned int *)(v155 + 8);
      }
      else
      {
        v156 = 0;
      }
      while (2)
      {
        if (v154 == (uint64_t *)v156)
          return 1;
        if ((sub_22EDA2374(a1, *v154) & 1) != 0)
        {
          ++v154;
          continue;
        }
        break;
      }
      return 0;
    case 15:
      result = sub_22EDA22D8(a1, 0, a3);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v246 = *v245;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v248 = *(_QWORD *)v247 + 8 * *(unsigned int *)(v247 + 8);
      }
      else
      {
        v248 = 0;
      }
      while (2)
      {
        if (v246 == (uint64_t *)v248)
          return 1;
        if ((sub_22EDA2374(a1, *v246) & 1) != 0)
        {
          ++v246;
          continue;
        }
        break;
      }
      return 0;
    case 16:
      result = sub_22EDA22D8(a1, a2 + 48, a3);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v134 = *v133;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v136 = *(_QWORD *)v135 + 8 * *(unsigned int *)(v135 + 8);
      }
      else
      {
        v136 = 0;
      }
      while (2)
      {
        if (v134 == (uint64_t *)v136)
          return 1;
        if ((sub_22EDA2374(a1, *v134) & 1) != 0)
        {
          ++v134;
          continue;
        }
        break;
      }
      return 0;
    case 17:
      result = sub_22EDA157C(a1, *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80));
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v297 = *v296;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v299 = *(_QWORD *)v298 + 8 * *(unsigned int *)(v298 + 8);
      }
      else
      {
        v299 = 0;
      }
      while (2)
      {
        if (v297 == (uint64_t *)v299)
          return 1;
        if ((sub_22EDA2374(a1, *v297) & 1) != 0)
        {
          ++v297;
          continue;
        }
        break;
      }
      return 0;
    case 18:
      result = sub_22EDA22D8(a1, 0, a3);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v367 = *v366;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v369 = *(_QWORD *)v368 + 8 * *(unsigned int *)(v368 + 8);
      }
      else
      {
        v369 = 0;
      }
      while (2)
      {
        if (v367 == (uint64_t *)v369)
          return 1;
        if ((sub_22EDA2374(a1, *v367) & 1) != 0)
        {
          ++v367;
          continue;
        }
        break;
      }
      return 0;
    case 19:
      v408 = *(_QWORD *)(a2 + 112);
      if (!v408)
        goto LABEL_658;
      v409 = *(unsigned int *)(v408 + 8);
      if (!(_DWORD)v409)
        goto LABEL_658;
      v410 = (uint64_t *)(v408 + 16);
      v411 = 8 * v409;
      while ((sub_22EDA138C(a1, *v410, a3) & 1) != 0)
      {
        ++v410;
        v411 -= 8;
        if (!v411)
        {
LABEL_658:
          result = sub_22EDA22D8(a1, a2 + 48, a3);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v5 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v413 = *v412;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v415 = *(_QWORD *)v414 + 8 * *(unsigned int *)(v414 + 8);
            }
            else
            {
              v415 = 0;
            }
            while (v413 != (uint64_t *)v415)
            {
              if ((sub_22EDA2374(a1, *v413) & 1) == 0)
                return 0;
              ++v413;
            }
          }
          return 1;
        }
      }
      return 0;
    case 20:
      result = sub_22EDA22D8(a1, a2 + 48, a3);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v315 = *v314;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v317 = *(_QWORD *)v316 + 8 * *(unsigned int *)(v316 + 8);
      }
      else
      {
        v317 = 0;
      }
      while (2)
      {
        if (v315 == (uint64_t *)v317)
          return 1;
        if ((sub_22EDA2374(a1, *v315) & 1) != 0)
        {
          ++v315;
          continue;
        }
        break;
      }
      return 0;
    case 21:
      result = sub_22EDA22D8(a1, a2 + 48, a3);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v350 = *v349;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v352 = *(_QWORD *)v351 + 8 * *(unsigned int *)(v351 + 8);
      }
      else
      {
        v352 = 0;
      }
      while (2)
      {
        if (v350 == (uint64_t *)v352)
          return 1;
        if ((sub_22EDA2374(a1, *v350) & 1) != 0)
        {
          ++v350;
          continue;
        }
        break;
      }
      return 0;
    case 22:
      v399 = *(_QWORD *)(a2 + 112);
      if (!v399)
        goto LABEL_642;
      v400 = *(unsigned int *)(v399 + 8);
      if (!(_DWORD)v400)
        goto LABEL_642;
      v401 = (uint64_t *)(v399 + 16);
      v402 = 8 * v400;
      while ((sub_22EDA138C(a1, *v401, a3) & 1) != 0)
      {
        ++v401;
        v402 -= 8;
        if (!v402)
        {
LABEL_642:
          v403 = (unint64_t *)sub_22F259044(a2);
          if (v403)
          {
            v404 = (uint64_t)(v403 + 1);
            v405 = *v403;
            if (!*(_BYTE *)(a1 + 4) || !v405 || (*(_BYTE *)(*(_QWORD *)(v405 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
            {
              result = sub_22EDA16E8(a1, v405, v404);
              if (!(_DWORD)result)
                return result;
            }
          }
          v406 = *(_QWORD *)(a2 + 120);
          if (!v406)
          {
            sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 96) + 88), *(_QWORD *)(a2 + 96));
            v406 = *(_QWORD *)(a2 + 120);
          }
          if (v406 < 8)
            v407 = 0;
          else
            v407 = *(_QWORD *)(v406 & 0xFFFFFFFFFFFFFFF8);
          if (v407 == a2)
          {
            v630 = sub_22F2590A8(a2);
            v631 = sub_22F25910C(a2);
            v632 = sub_22F259178(a2);
            v633 = sub_22F2591DC(a2);
            if (v630 != v631 && v632 != v633)
            {
              v634 = v632 + 4;
              v635 = v630 + 8;
              do
              {
                if (v635 == v631)
                  break;
                v635 += 8;
                v32 = v634 == v633;
                v634 += 4;
              }
              while (!v32);
            }
          }
          result = sub_22EDA22D8(a1, a2 + 48, v404);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v5 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v602 = *v601;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v604 = *(_QWORD *)v603 + 8 * *(unsigned int *)(v603 + 8);
            }
            else
            {
              v604 = 0;
            }
            while (v602 != (uint64_t *)v604)
            {
              if ((sub_22EDA2374(a1, *v602) & 1) == 0)
                return 0;
              ++v602;
            }
          }
          return 1;
        }
      }
      return 0;
    case 23:
      v437 = *(_QWORD *)(a2 + 104);
      if (!v437)
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 96) + 88), *(_QWORD *)(a2 + 96));
        v437 = *(_QWORD *)(a2 + 104);
      }
      if (v437 < 8)
        v438 = 0;
      else
        v438 = *(_QWORD *)(v437 & 0xFFFFFFFFFFFFFFF8);
      if (v438 == a2)
      {
        v605 = sub_22F259248(a2);
        v607 = v606;
        v608 = sub_22F2592CC(a2);
        if (v605 != v607 && v608 != v609)
        {
          v610 = v608 + 4;
          v611 = v605 + 8;
          do
          {
            if (v611 == v607)
              break;
            v611 += 8;
            v32 = v610 == v609;
            v610 += 4;
          }
          while (!v32);
        }
      }
      result = sub_22EDA22D8(a1, a2 + 48, a3);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v556 = *v555;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v558 = *(_QWORD *)v557 + 8 * *(unsigned int *)(v557 + 8);
      }
      else
      {
        v558 = 0;
      }
      while (2)
      {
        if (v556 == (uint64_t *)v558)
          return 1;
        if ((sub_22EDA2374(a1, *v556) & 1) != 0)
        {
          ++v556;
          continue;
        }
        break;
      }
      return 0;
    case 24:
      v230 = *(unint64_t **)(a2 + 88);
      if (v230)
      {
        v232 = *v230++;
        v231 = v232;
        if (!*(_BYTE *)(a1 + 4) || !v231 || (*(_BYTE *)(*(_QWORD *)(v231 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
        {
          result = sub_22EDA16E8(a1, v231, (uint64_t)v230);
          if (!(_DWORD)result)
            return result;
        }
      }
      v233 = *(unsigned int *)(a2 + 104);
      if (!(_DWORD)v233)
        goto LABEL_383;
      v234 = *(_QWORD **)(a2 + 96);
      v235 = 8 * v233;
      while ((sub_22ED9D24C(a1, *v234, v230) & 1) != 0)
      {
        ++v234;
        v235 -= 8;
        if (!v235)
        {
LABEL_383:
          if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)a2 + 72))(a2))
          {
            v236 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
            result = sub_22ED9153C(a1, v236, 0);
            if (!(_DWORD)result)
              return result;
          }
          if ((*(_BYTE *)(v5 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v238 = *v237;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v240 = *(_QWORD *)v239 + 8 * *(unsigned int *)(v239 + 8);
            }
            else
            {
              v240 = 0;
            }
            while (v238 != (uint64_t *)v240)
            {
              if ((sub_22EDA2374(a1, *v238) & 1) == 0)
                return 0;
              ++v238;
            }
          }
          return 1;
        }
      }
      return 0;
    case 25:
      v226 = *(unint64_t **)(a2 + 64);
      if (v226)
      {
        v229 = *v226;
        v228 = (uint64_t)(v226 + 1);
        v227 = v229;
        if ((!*(_BYTE *)(a1 + 4) || !v227 || (*(_BYTE *)(*(_QWORD *)(v227 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
          && (sub_22EDA16E8(a1, v227, v228) & 1) == 0)
        {
          return 0;
        }
      }
      else
      {
        result = sub_22ED91030(a1, *(_QWORD *)(a2 + 56));
        if (!(_DWORD)result)
          return result;
      }
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v582 = *v581;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v584 = *(_QWORD *)v583 + 8 * *(unsigned int *)(v583 + 8);
      }
      else
      {
        v584 = 0;
      }
      while (1)
      {
        if (v582 == (uint64_t *)v584)
          return 1;
        if ((sub_22EDA2374(a1, *v582) & 1) == 0)
          break;
        ++v582;
      }
      return 0;
    case 26:
      result = sub_22EDA292C(a1, *(_QWORD *)(a2 + 56), a3);
      if (!(_DWORD)result)
        return result;
      v468 = *(_DWORD *)v5 & 0x7F;
      v469 = v468 > 0x39 || ((1 << v468) & 0x3F0003E01011066) == 0;
      v470 = !v469 || v468 - 70 <= 0xD && ((1 << (v468 - 70)) & 0x2803) != 0 || v468 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EDA22D8(a1, v470, v467);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v472 = *v471;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v474 = *(_QWORD *)v473 + 8 * *(unsigned int *)(v473 + 8);
      }
      else
      {
        v474 = 0;
      }
      while (2)
      {
        if (v472 == (uint64_t *)v474)
          return 1;
        if ((sub_22EDA2374(a1, *v472) & 1) != 0)
        {
          ++v472;
          continue;
        }
        break;
      }
      return 0;
    case 27:
      result = sub_22EDA292C(a1, *(_QWORD *)(a2 + 56), a3);
      if (!(_DWORD)result)
        return result;
      result = sub_22ED9153C(a1, *(_QWORD *)(a2 + 64), 0);
      if (!(_DWORD)result)
        return result;
      if ((v122 = *(_DWORD *)v5 & 0x7F, v122 <= 0x39) && ((1 << v122) & 0x3F0003E01011066) != 0
        || v122 - 70 <= 0xD && ((1 << (v122 - 70)) & 0x2803) != 0
        || v122 - 19 <= 4)
      {
        v123 = sub_22EFCAE04(a2);
      }
      else
      {
        v123 = 0;
      }
      result = sub_22EDA22D8(a1, v123, v121);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v125 = *v124;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v127 = *(_QWORD *)v126 + 8 * *(unsigned int *)(v126 + 8);
      }
      else
      {
        v127 = 0;
      }
      while (2)
      {
        if (v125 == (uint64_t *)v127)
          return 1;
        if ((sub_22EDA2374(a1, *v125) & 1) != 0)
        {
          ++v125;
          continue;
        }
        break;
      }
      return 0;
    case 28:
      result = sub_22EDA292C(a1, *(_QWORD *)(a2 + 56), a3);
      if (!(_DWORD)result)
        return result;
      result = sub_22ED9D24C(a1, *(_QWORD *)(a2 + 48), v439);
      if (!(_DWORD)result)
        return result;
      if ((v441 = *(_DWORD *)v5 & 0x7F, v441 <= 0x39) && ((1 << v441) & 0x3F0003E01011066) != 0
        || v441 - 70 <= 0xD && ((1 << (v441 - 70)) & 0x2803) != 0
        || v441 - 19 <= 4)
      {
        v442 = sub_22EFCAE04(a2);
      }
      else
      {
        v442 = 0;
      }
      result = sub_22EDA22D8(a1, v442, v440);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v444 = *v443;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v446 = *(_QWORD *)v445 + 8 * *(unsigned int *)(v445 + 8);
      }
      else
      {
        v446 = 0;
      }
      while (2)
      {
        if (v444 == (uint64_t *)v446)
          return 1;
        if ((sub_22EDA2374(a1, *v444) & 1) != 0)
        {
          ++v444;
          continue;
        }
        break;
      }
      return 0;
    case 29:
      result = sub_22EDA292C(a1, *(_QWORD *)(a2 + 56), a3);
      if (!(_DWORD)result)
        return result;
      result = sub_22ED9D24C(a1, *(_QWORD *)(a2 + 48), v447);
      if (!(_DWORD)result)
        return result;
      if ((v449 = *(_DWORD *)v5 & 0x7F, v449 <= 0x39) && ((1 << v449) & 0x3F0003E01011066) != 0
        || v449 - 70 <= 0xD && ((1 << (v449 - 70)) & 0x2803) != 0
        || v449 - 19 <= 4)
      {
        v450 = sub_22EFCAE04(a2);
      }
      else
      {
        v450 = 0;
      }
      result = sub_22EDA22D8(a1, v450, v448);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v452 = *v451;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v454 = *(_QWORD *)v453 + 8 * *(unsigned int *)(v453 + 8);
      }
      else
      {
        v454 = 0;
      }
      while (2)
      {
        if (v452 == (uint64_t *)v454)
          return 1;
        if ((sub_22EDA2374(a1, *v452) & 1) != 0)
        {
          ++v452;
          continue;
        }
        break;
      }
      return 0;
    case 30:
      result = sub_22ED9D24C(a1, *(_QWORD *)(a2 + 48), a3);
      if (!(_DWORD)result)
        return result;
      result = sub_22EDA292C(a1, *(_QWORD *)(a2 + 56), v379);
      if (!(_DWORD)result)
        return result;
      if ((v381 = *(_DWORD *)v5 & 0x7F, v381 <= 0x39) && ((1 << v381) & 0x3F0003E01011066) != 0
        || v381 - 70 <= 0xD && ((1 << (v381 - 70)) & 0x2803) != 0
        || v381 - 19 <= 4)
      {
        v382 = sub_22EFCAE04(a2);
      }
      else
      {
        v382 = 0;
      }
      result = sub_22EDA22D8(a1, v382, v380);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v384 = *v383;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v386 = *(_QWORD *)v385 + 8 * *(unsigned int *)(v385 + 8);
      }
      else
      {
        v386 = 0;
      }
      while (2)
      {
        if (v384 == (uint64_t *)v386)
          return 1;
        if ((sub_22EDA2374(a1, *v384) & 1) != 0)
        {
          ++v384;
          continue;
        }
        break;
      }
      return 0;
    case 31:
      result = sub_22EDA292C(a1, *(_QWORD *)(a2 + 56), a3);
      if (!(_DWORD)result)
        return result;
      result = sub_22ED9D24C(a1, *(_QWORD *)(a2 + 48), v288);
      if (!(_DWORD)result)
        return result;
      if ((v290 = *(_DWORD *)v5 & 0x7F, v290 <= 0x39) && ((1 << v290) & 0x3F0003E01011066) != 0
        || v290 - 70 <= 0xD && ((1 << (v290 - 70)) & 0x2803) != 0
        || v290 - 19 <= 4)
      {
        v291 = sub_22EFCAE04(a2);
      }
      else
      {
        v291 = 0;
      }
      result = sub_22EDA22D8(a1, v291, v289);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v293 = *v292;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v295 = *(_QWORD *)v294 + 8 * *(unsigned int *)(v294 + 8);
      }
      else
      {
        v295 = 0;
      }
      while (2)
      {
        if (v293 == (uint64_t *)v295)
          return 1;
        if ((sub_22EDA2374(a1, *v293) & 1) != 0)
        {
          ++v293;
          continue;
        }
        break;
      }
      return 0;
    case 32:
      result = sub_22ED9D24C(a1, *(_QWORD *)(a2 + 48), a3);
      if (!(_DWORD)result)
        return result;
      if (*(_QWORD *)(a2 + 72) >= 8uLL && (*(_QWORD *)(a2 + 72) & 6) != 2)
      {
        v622 = sub_22F259350(a2);
        result = sub_22EDA1FB0(a1, (uint64_t)v622);
        if (!(_DWORD)result)
          return result;
      }
      result = sub_22EDA292C(a1, *(_QWORD *)(a2 + 56), v387);
      if (!(_DWORD)result)
        return result;
      if ((v389 = *(_DWORD *)v5 & 0x7F, v389 <= 0x39) && ((1 << v389) & 0x3F0003E01011066) != 0
        || v389 - 70 <= 0xD && ((1 << (v389 - 70)) & 0x2803) != 0
        || v389 - 19 <= 4)
      {
        v390 = sub_22EFCAE04(a2);
      }
      else
      {
        v390 = 0;
      }
      result = sub_22EDA22D8(a1, v390, v388);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v392 = *v391;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v394 = *(_QWORD *)v393 + 8 * *(unsigned int *)(v393 + 8);
      }
      else
      {
        v394 = 0;
      }
      if (v392 == (uint64_t *)v394)
        return 1;
      while ((sub_22EDA2374(a1, *v392) & 1) != 0)
      {
        if (++v392 == (uint64_t *)v394)
          return 1;
      }
      return 0;
    case 33:
      v157 = *(_QWORD *)(a2 + 120);
      if ((v157 & 4) == 0)
        goto LABEL_255;
      v158 = 0;
      while (1)
      {
        v159 = v157 & 0xFFFFFFFFFFFFFFF8;
        if (v158 >= *(unsigned int *)(v159 + 16))
          break;
        sub_22EDA292C(a1, *(_QWORD *)(*(_QWORD *)(v159 + 24) + 8 * v158++), a3);
        v157 = *(_QWORD *)(a2 + 120);
        if ((v157 & 4) == 0)
        {
LABEL_255:
          v160 = 0;
          v161 = 0;
          goto LABEL_987;
        }
      }
      v160 = *(_QWORD *)v159;
      v161 = *(_QWORD *)(v159 + 8);
LABEL_987:
      result = sub_22EDA157C(a1, v160, v161);
      if (!(_DWORD)result)
        return result;
      v586 = *(_QWORD *)(a2 + 128);
      if ((v586 & 4) != 0)
      {
        v585 = (unint64_t *)(v586 & 0xFFFFFFFFFFFFFFF8);
        if ((v586 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v588 = *v585++;
          v587 = v588;
          if (!*(_BYTE *)(a1 + 4) || !v587 || (*(_BYTE *)(*(_QWORD *)(v587 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
          {
            result = sub_22EDA16E8(a1, v587, (uint64_t)v585);
            if (!(_DWORD)result)
              return result;
          }
        }
      }
      result = sub_22EDA22D8(a1, a2 + 64, (uint64_t)v585);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v590 = *v589;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v592 = *(_QWORD *)v591 + 8 * *(unsigned int *)(v591 + 8);
      }
      else
      {
        v592 = 0;
      }
      if (v590 == (uint64_t *)v592)
        return 1;
      while ((sub_22EDA2374(a1, *v590) & 1) != 0)
      {
        if (++v590 == (uint64_t *)v592)
          return 1;
      }
      return 0;
    case 34:
      result = sub_22EDA29CC(a1, a2, a3);
      if (!(_DWORD)result)
        return result;
      result = sub_22EDA22D8(a1, a2 + 64, v128);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v130 = *v129;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v132 = *(_QWORD *)v131 + 8 * *(unsigned int *)(v131 + 8);
      }
      else
      {
        v132 = 0;
      }
      if (v130 == (uint64_t *)v132)
        return 1;
      while ((sub_22EDA2374(a1, *v130) & 1) != 0)
      {
        if (++v130 == (uint64_t *)v132)
          return 1;
      }
      return 0;
    case 35:
      result = sub_22EDA2A40(a1, a2, a3);
      if (!(_DWORD)result)
        return result;
      result = sub_22EDA22D8(a1, a2 + 64, v104);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v106 = *v105;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v108 = *(_QWORD *)v107 + 8 * *(unsigned int *)(v107 + 8);
      }
      else
      {
        v108 = 0;
      }
      if (v106 == (uint64_t *)v108)
        return 1;
      while ((sub_22EDA2374(a1, *v106) & 1) != 0)
      {
        if (++v106 == (uint64_t *)v108)
          return 1;
      }
      return 0;
    case 36:
      v109 = *(unint64_t ***)(a2 + 160);
      if (v109)
      {
        v110 = *v109;
        if (*v109)
        {
          v113 = *v110;
          v112 = (uint64_t)(v110 + 1);
          v111 = v113;
          if (!*(_BYTE *)(a1 + 4) || !v111 || (*(_BYTE *)(*(_QWORD *)(v111 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
          {
            result = sub_22EDA16E8(a1, v111, v112);
            if (!(_DWORD)result)
              return result;
          }
        }
      }
      v114 = *(_QWORD *)(a2 + 120);
      if ((v114 & 4) != 0)
      {
        v559 = (uint64_t *)(v114 & 0xFFFFFFFFFFFFFFF8);
        v115 = *v559;
        v116 = v559[1];
      }
      else
      {
        v115 = 0;
        v116 = 0;
      }
      result = sub_22EDA157C(a1, v115, v116);
      if (!(_DWORD)result)
        return result;
      if (sub_22EFD5760(a2) != 2)
        return 1;
      result = sub_22EDA22D8(a1, a2 + 64, v560);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v562 = *v561;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v564 = *(_QWORD *)v563 + 8 * *(unsigned int *)(v563 + 8);
      }
      else
      {
        v564 = 0;
      }
      if (v562 == (uint64_t *)v564)
        return 1;
      while ((sub_22EDA2374(a1, *v562) & 1) != 0)
      {
        if (++v562 == (uint64_t *)v564)
          return 1;
      }
      return 0;
    case 37:
      v66 = *(_QWORD *)(a2 + 184);
      if (!v66)
        goto LABEL_104;
      v67 = *(_DWORD *)(v66 + 12) & 0x1FFFFFFF;
      if (!(_DWORD)v67)
        goto LABEL_104;
      v68 = (_QWORD *)(v66 + 16);
      v69 = 8 * v67;
      while ((sub_22ED9D24C(a1, *v68, a3) & 1) != 0)
      {
        ++v68;
        v69 -= 8;
        if (!v69)
        {
LABEL_104:
          v70 = *(_QWORD *)(a2 + 192);
          v71 = *(unsigned int *)(v70 + 8);
          if ((_DWORD)v71)
          {
            v72 = v70 + 16;
            while ((sub_22EDA1FB0(a1, v72) & 1) != 0)
            {
              v72 += 32;
              if (!--v71)
                goto LABEL_108;
            }
            return 0;
          }
LABEL_108:
          result = sub_22EDA2A40(a1, a2, a3);
          if (!(_DWORD)result)
            return result;
          result = sub_22EDA22D8(a1, a2 + 64, v73);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v5 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v75 = *v74;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v77 = *(_QWORD *)v76 + 8 * *(unsigned int *)(v76 + 8);
            }
            else
            {
              v77 = 0;
            }
            if (v75 != (uint64_t *)v77)
            {
              while ((sub_22EDA2374(a1, *v75) & 1) != 0)
              {
                if (++v75 == (uint64_t *)v77)
                  return 1;
              }
              return 0;
            }
          }
          return 1;
        }
      }
      return 0;
    case 38:
      v455 = *(_QWORD *)(a2 + 48);
      if (v455)
      {
        result = sub_22ED91030(a1, v455 & 0xFFFFFFFFFFFFFFF0);
        if (!(_DWORD)result)
          return result;
      }
      result = sub_22EDA122C(a1, a2);
      if (!(_DWORD)result)
        return result;
      v457 = *(_QWORD *)(a2 + 72);
      if (v457 >= 8 && (*(_QWORD *)(a2 + 72) & 6) != 2)
      {
        v458 = (unint64_t *)(v457 & 0xFFFFFFFFFFFFFFF8);
        if ((*(_QWORD *)(a2 + 72) & 6) == 4 && v458)
          v458 = (unint64_t *)v458[1];
        v460 = *v458;
        v456 = (uint64_t)(v458 + 1);
        v459 = v460;
        if (!*(_BYTE *)(a1 + 4) || !v459 || (*(_BYTE *)(*(_QWORD *)(v459 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
        {
          result = sub_22EDA16E8(a1, v459, v456);
          if (!(_DWORD)result)
            return result;
        }
      }
      if ((v461 = *(_DWORD *)v5 & 0x7F, v461 <= 0x39) && ((1 << v461) & 0x3F0003E01011066) != 0
        || v461 - 70 <= 0xD && ((1 << (v461 - 70)) & 0x2803) != 0
        || v461 - 19 <= 4)
      {
        v462 = sub_22EFCAE04(a2);
      }
      else
      {
        v462 = 0;
      }
      result = sub_22EDA22D8(a1, v462, v456);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v464 = *v463;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v466 = *(_QWORD *)v465 + 8 * *(unsigned int *)(v465 + 8);
      }
      else
      {
        v466 = 0;
      }
      if (v464 == (uint64_t *)v466)
        return 1;
      while ((sub_22EDA2374(a1, *v464) & 1) != 0)
      {
        if (++v464 == (uint64_t *)v466)
          return 1;
      }
      return 0;
    case 39:
      return (sub_22EDA138C(a1, a2, a3) & 1) != 0;
    case 40:
      v193 = *(_QWORD *)(a2 + 80);
      v194 = (_QWORD *)(v193 & 0xFFFFFFFFFFFFFFF8);
      if ((v193 & 4) != 0)
        v194 = (_QWORD *)*v194;
      v197 = (_QWORD *)*v194;
      v196 = (uint64_t)(v194 + 1);
      v195 = (unint64_t)v197;
      if (*(_BYTE *)(a1 + 4) && v195 && (*(_BYTE *)(*(_QWORD *)(v195 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0)
        goto LABEL_319;
      result = sub_22EDA16E8(a1, v195, v196);
      if (!(_DWORD)result)
        return result;
      if ((v524 = *(_DWORD *)v5 & 0x7F, v524 <= 0x39) && ((1 << v524) & 0x3F0003E01011066) != 0
        || v524 - 70 <= 0xD && ((1 << (v524 - 70)) & 0x2803) != 0
        || v524 - 19 <= 4)
      {
        v198 = sub_22EFCAE04(a2);
      }
      else
      {
LABEL_319:
        v198 = 0;
      }
      result = sub_22EDA22D8(a1, v198, v196);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v526 = *v525;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v528 = *(_QWORD *)v527 + 8 * *(unsigned int *)(v527 + 8);
      }
      else
      {
        v528 = 0;
      }
      if (v526 == (uint64_t *)v528)
        return 1;
      while ((sub_22EDA2374(a1, *v526) & 1) != 0)
      {
        if (++v526 == (uint64_t *)v528)
          return 1;
      }
      return 0;
    case 41:
      v300 = *(_QWORD *)(a2 + 80);
      v301 = (_QWORD *)(v300 & 0xFFFFFFFFFFFFFFF8);
      if ((v300 & 4) != 0)
        v301 = (_QWORD *)*v301;
      v304 = (_QWORD *)*v301;
      v303 = (uint64_t)(v301 + 1);
      v302 = (unint64_t)v304;
      if (*(_BYTE *)(a1 + 4) && v302 && (*(_BYTE *)(*(_QWORD *)(v302 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0)
        goto LABEL_491;
      result = sub_22EDA16E8(a1, v302, v303);
      if (!(_DWORD)result)
        return result;
      if ((v529 = *(_DWORD *)v5 & 0x7F, v529 <= 0x39) && ((1 << v529) & 0x3F0003E01011066) != 0
        || v529 - 70 <= 0xD && ((1 << (v529 - 70)) & 0x2803) != 0
        || v529 - 19 <= 4)
      {
        v305 = sub_22EFCAE04(a2);
      }
      else
      {
LABEL_491:
        v305 = 0;
      }
      result = sub_22EDA22D8(a1, v305, v303);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v531 = *v530;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v533 = *(_QWORD *)v532 + 8 * *(unsigned int *)(v532 + 8);
      }
      else
      {
        v533 = 0;
      }
      if (v531 == (uint64_t *)v533)
        return 1;
      while ((sub_22EDA2374(a1, *v531) & 1) != 0)
      {
        if (++v531 == (uint64_t *)v533)
          return 1;
      }
      return 0;
    case 42:
      result = sub_22EDA157C(a1, *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80));
      if (!(_DWORD)result)
        return result;
      v421 = *(_DWORD *)v5 & 0x7F;
      v422 = v421 > 0x39 || ((1 << v421) & 0x3F0003E01011066) == 0;
      v423 = !v422 || v421 - 70 <= 0xD && ((1 << (v421 - 70)) & 0x2803) != 0 || v421 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EDA22D8(a1, v423, v420);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v425 = *v424;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v427 = *(_QWORD *)v426 + 8 * *(unsigned int *)(v426 + 8);
      }
      else
      {
        v427 = 0;
      }
      if (v425 == (uint64_t *)v427)
        return 1;
      while ((sub_22EDA2374(a1, *v425) & 1) != 0)
      {
        if (++v425 == (uint64_t *)v427)
          return 1;
      }
      return 0;
    case 43:
      result = sub_22EDA22D8(a1, 0, a3);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v43 = *v42;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v45 = *(_QWORD *)v44 + 8 * *(unsigned int *)(v44 + 8);
      }
      else
      {
        v45 = 0;
      }
      if (v43 == (uint64_t *)v45)
        return 1;
      while ((sub_22EDA2374(a1, *v43) & 1) != 0)
      {
        if (++v43 == (uint64_t *)v45)
          return 1;
      }
      return 0;
    case 44:
      result = sub_22EDA157C(a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64));
      if (!(_DWORD)result)
        return result;
      v146 = *(_DWORD *)v5 & 0x7F;
      v147 = v146 > 0x39 || ((1 << v146) & 0x3F0003E01011066) == 0;
      v148 = !v147 || v146 - 70 <= 0xD && ((1 << (v146 - 70)) & 0x2803) != 0 || v146 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EDA22D8(a1, v148, v145);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v150 = *v149;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v152 = *(_QWORD *)v151 + 8 * *(unsigned int *)(v151 + 8);
      }
      else
      {
        v152 = 0;
      }
      if (v150 == (uint64_t *)v152)
        return 1;
      while ((sub_22EDA2374(a1, *v150) & 1) != 0)
      {
        if (++v150 == (uint64_t *)v152)
          return 1;
      }
      return 0;
    case 45:
      result = sub_22EDA22D8(a1, 0, a3);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v396 = *v395;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v398 = *(_QWORD *)v397 + 8 * *(unsigned int *)(v397 + 8);
      }
      else
      {
        v398 = 0;
      }
      if (v396 == (uint64_t *)v398)
        return 1;
      while ((sub_22EDA2374(a1, *v396) & 1) != 0)
      {
        if (++v396 == (uint64_t *)v398)
          return 1;
      }
      return 0;
    case 46:
      result = sub_22EDA22D8(a1, 0, a3);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v492 = *v491;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v494 = *(_QWORD *)v493 + 8 * *(unsigned int *)(v493 + 8);
      }
      else
      {
        v494 = 0;
      }
      if (v492 == (uint64_t *)v494)
        return 1;
      while ((sub_22EDA2374(a1, *v492) & 1) != 0)
      {
        if (++v492 == (uint64_t *)v494)
          return 1;
      }
      return 0;
    case 47:
      result = sub_22EDA22D8(a1, 0, a3);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v83 = *v82;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v85 = *(_QWORD *)v84 + 8 * *(unsigned int *)(v84 + 8);
      }
      else
      {
        v85 = 0;
      }
      if (v83 == (uint64_t *)v85)
        return 1;
      while ((sub_22EDA2374(a1, *v83) & 1) != 0)
      {
        if (++v83 == (uint64_t *)v85)
          return 1;
      }
      return 0;
    case 48:
      result = sub_22EDA22D8(a1, 0, a3);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v163 = *v162;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v165 = *(_QWORD *)v164 + 8 * *(unsigned int *)(v164 + 8);
      }
      else
      {
        v165 = 0;
      }
      if (v163 == (uint64_t *)v165)
        return 1;
      while ((sub_22EDA2374(a1, *v163) & 1) != 0)
      {
        if (++v163 == (uint64_t *)v165)
          return 1;
      }
      return 0;
    case 49:
      result = sub_22EDA2AD4(a1, a2, a3);
      if (!(_DWORD)result)
        return result;
      v188 = *(_QWORD *)(a2 + 72);
      if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      {
        v593 = v188 & 0xFFFFFFFFFFFFFFFCLL;
        v594 = *(_QWORD *)(a2 + 72) & 3;
        if ((_DWORD)v594 && (_DWORD)v594 != 3)
          v593 = *(_QWORD *)(v593 + 8);
        if ((sub_22ED9153C(a1, v593, 0) & 1) == 0)
          return 0;
      }
      else if ((v188 & 3) != 0 && (v188 & 3) != 3)
      {
        result = sub_22ED9153C(a1, v188 & 0xFFFFFFFFFFFFFFFCLL, 0);
        if (!(_DWORD)result)
          return result;
      }
      v595 = *(_DWORD *)v5 & 0x7F;
      if (v595 <= 0x39 && ((1 << v595) & 0x3F0003E01011066) != 0
        || v595 - 70 <= 0xD && ((1 << (v595 - 70)) & 0x2803) != 0
        || v595 - 19 <= 4)
      {
        v596 = sub_22EFCAE04(a2);
      }
      else
      {
        v596 = 0;
      }
      result = sub_22EDA22D8(a1, v596, v187);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v598 = *v597;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v600 = *(_QWORD *)v599 + 8 * *(unsigned int *)(v599 + 8);
        }
        else
        {
          v600 = 0;
        }
        for (; v598 != (uint64_t *)v600; ++v598)
        {
          if ((sub_22EDA2374(a1, *v598) & 1) == 0)
            return 0;
        }
      }
      return 1;
    case 50:
      result = sub_22EDA2AD4(a1, a2, a3);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      {
        v35 = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_DWORD *)(a2 + 72) & 3) != 0 && (*(_DWORD *)(a2 + 72) & 3) != 3)
          v35 = *(_QWORD *)(v35 + 8);
        result = sub_22ED9153C(a1, v35, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v36 = *(_DWORD *)v5 & 0x7F, v36 <= 0x39) && ((1 << v36) & 0x3F0003E01011066) != 0
        || (v36 - 70 <= 0xD ? (v620 = ((1 << (v36 - 70)) & 0x2803) == 0) : (v620 = 1), !v620 || v36 - 19 <= 4))
      {
        v37 = sub_22EFCAE04(a2);
      }
      else
      {
        v37 = 0;
      }
      result = sub_22EDA22D8(a1, v37, v34);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v39 = *v38;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v41 = *(_QWORD *)v40 + 8 * *(unsigned int *)(v40 + 8);
      }
      else
      {
        v41 = 0;
      }
      if (v39 == (uint64_t *)v41)
        return 1;
      while ((sub_22EDA2374(a1, *v39) & 1) != 0)
      {
        if (++v39 == (uint64_t *)v41)
          return 1;
      }
      return 0;
    case 51:
      result = sub_22EDA2AD4(a1, a2, a3);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      {
        v509 = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_DWORD *)(a2 + 72) & 3) != 0 && (*(_DWORD *)(a2 + 72) & 3) != 3)
          v509 = *(_QWORD *)(v509 + 8);
        result = sub_22ED9153C(a1, v509, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v510 = *(_DWORD *)v5 & 0x7F, v510 <= 0x39) && ((1 << v510) & 0x3F0003E01011066) != 0
        || (v510 - 70 <= 0xD ? (v621 = ((1 << (v510 - 70)) & 0x2803) == 0) : (v621 = 1), !v621 || v510 - 19 <= 4))
      {
        v511 = sub_22EFCAE04(a2);
      }
      else
      {
        v511 = 0;
      }
      result = sub_22EDA22D8(a1, v511, v508);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v513 = *v512;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v515 = *(_QWORD *)v514 + 8 * *(unsigned int *)(v514 + 8);
      }
      else
      {
        v515 = 0;
      }
      if (v513 == (uint64_t *)v515)
        return 1;
      while ((sub_22EDA2374(a1, *v513) & 1) != 0)
      {
        if (++v513 == (uint64_t *)v515)
          return 1;
      }
      return 0;
    case 52:
      result = sub_22EDA2BBC(a1, a2, a3);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v488 = *v487;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v490 = *(_QWORD *)v489 + 8 * *(unsigned int *)(v489 + 8);
      }
      else
      {
        v490 = 0;
      }
      if (v488 == (uint64_t *)v490)
        return 1;
      while ((sub_22EDA2374(a1, *v488) & 1) != 0)
      {
        if (++v488 == (uint64_t *)v490)
          return 1;
      }
      return 0;
    case 53:
      result = sub_22EDA2BBC(a1, a2, a3);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v79 = *v78;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v81 = *(_QWORD *)v80 + 8 * *(unsigned int *)(v80 + 8);
      }
      else
      {
        v81 = 0;
      }
      if (v79 == (uint64_t *)v81)
        return 1;
      while ((sub_22EDA2374(a1, *v79) & 1) != 0)
      {
        if (++v79 == (uint64_t *)v81)
          return 1;
      }
      return 0;
    case 54:
      result = sub_22EDA2BBC(a1, a2, a3);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v476 = *v475;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v478 = *(_QWORD *)v477 + 8 * *(unsigned int *)(v477 + 8);
      }
      else
      {
        v478 = 0;
      }
      if (v476 == (uint64_t *)v478)
        return 1;
      while ((sub_22EDA2374(a1, *v476) & 1) != 0)
      {
        if (++v476 == (uint64_t *)v478)
          return 1;
      }
      return 0;
    case 55:
      result = sub_22EDA2BBC(a1, a2, a3);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v484 = *v483;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v486 = *(_QWORD *)v485 + 8 * *(unsigned int *)(v485 + 8);
      }
      else
      {
        v486 = 0;
      }
      if (v484 == (uint64_t *)v486)
        return 1;
      while ((sub_22EDA2374(a1, *v484) & 1) != 0)
      {
        if (++v484 == (uint64_t *)v486)
          return 1;
      }
      return 0;
    case 56:
      result = sub_22EDA2BBC(a1, a2, a3);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v87 = *v86;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v89 = *(_QWORD *)v88 + 8 * *(unsigned int *)(v88 + 8);
      }
      else
      {
        v89 = 0;
      }
      if (v87 == (uint64_t *)v89)
        return 1;
      while ((sub_22EDA2374(a1, *v87) & 1) != 0)
      {
        if (++v87 == (uint64_t *)v89)
          return 1;
      }
      return 0;
    case 57:
      result = sub_22EDA2BBC(a1, a2, a3);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v417 = *v416;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v419 = *(_QWORD *)v418 + 8 * *(unsigned int *)(v418 + 8);
      }
      else
      {
        v419 = 0;
      }
      if (v417 == (uint64_t *)v419)
        return 1;
      while ((sub_22EDA2374(a1, *v417) & 1) != 0)
      {
        if (++v417 == (uint64_t *)v419)
          return 1;
      }
      return 0;
    case 58:
      result = sub_22EDA2AD4(a1, a2, a3);
      if (!(_DWORD)result)
        return result;
      v167 = *(_DWORD *)v5 & 0x7F;
      v168 = v167 > 0x39 || ((1 << v167) & 0x3F0003E01011066) == 0;
      v169 = !v168 || v167 - 70 <= 0xD && ((1 << (v167 - 70)) & 0x2803) != 0 || v167 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EDA22D8(a1, v169, v166);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v171 = *v170;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v173 = *(_QWORD *)v172 + 8 * *(unsigned int *)(v172 + 8);
      }
      else
      {
        v173 = 0;
      }
      if (v171 == (uint64_t *)v173)
        return 1;
      while ((sub_22EDA2374(a1, *v171) & 1) != 0)
      {
        if (++v171 == (uint64_t *)v173)
          return 1;
      }
      return 0;
    case 59:
      result = sub_22EDA2AD4(a1, a2, a3);
      if (!(_DWORD)result)
        return result;
      v429 = *(_QWORD *)(a2 + 72);
      if (v429 >= 4 && (*(_QWORD *)(a2 + 72) & 3) != 1)
      {
        v430 = v429 & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_QWORD *)(a2 + 72) & 3) == 2 && v430)
          v430 = *(_QWORD *)(v430 + 8);
        result = sub_22ED9153C(a1, v430, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v431 = *(_DWORD *)v5 & 0x7F, v431 <= 0x39) && ((1 << v431) & 0x3F0003E01011066) != 0
        || v431 - 70 <= 0xD && ((1 << (v431 - 70)) & 0x2803) != 0
        || v431 - 19 <= 4)
      {
        v432 = sub_22EFCAE04(a2);
      }
      else
      {
        v432 = 0;
      }
      result = sub_22EDA22D8(a1, v432, v428);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v434 = *v433;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v436 = *(_QWORD *)v435 + 8 * *(unsigned int *)(v435 + 8);
      }
      else
      {
        v436 = 0;
      }
      if (v434 == (uint64_t *)v436)
        return 1;
      while ((sub_22EDA2374(a1, *v434) & 1) != 0)
      {
        if (++v434 == (uint64_t *)v436)
          return 1;
      }
      return 0;
    case 60:
      result = sub_22EDA2FC0(a1, a2, a3);
      if (!(_DWORD)result)
        return result;
      v200 = *(_DWORD *)v5 & 0x7F;
      v201 = v200 > 0x39 || ((1 << v200) & 0x3F0003E01011066) == 0;
      v202 = !v201 || v200 - 70 <= 0xD && ((1 << (v200 - 70)) & 0x2803) != 0 || v200 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EDA22D8(a1, v202, v199);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v204 = *v203;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v206 = *(_QWORD *)v205 + 8 * *(unsigned int *)(v205 + 8);
      }
      else
      {
        v206 = 0;
      }
      if (v204 == (uint64_t *)v206)
        return 1;
      while ((sub_22EDA2374(a1, *v204) & 1) != 0)
      {
        if (++v204 == (uint64_t *)v206)
          return 1;
      }
      return 0;
    case 61:
      result = sub_22EDA2FC0(a1, a2, a3);
      if (!(_DWORD)result)
        return result;
      v319 = *(unsigned int *)(a2 + 100);
      if (!(_DWORD)v319)
        goto LABEL_513;
      v320 = (_QWORD *)(a2 + 104);
      v321 = 8 * v319;
      while ((sub_22ED9D24C(a1, *v320, v318) & 1) != 0)
      {
        ++v320;
        v321 -= 8;
        if (!v321)
        {
LABEL_513:
          v322 = *(_DWORD *)v5 & 0x7F;
          v323 = v322 > 0x39 || ((1 << v322) & 0x3F0003E01011066) == 0;
          if (v323
            && (v322 - 70 <= 0xD ? (v623 = ((1 << (v322 - 70)) & 0x2803) == 0) : (v623 = 1), v623 && v322 - 19 > 4))
          {
            v324 = 0;
          }
          else
          {
            v324 = sub_22EFCAE04(a2);
          }
          result = sub_22EDA22D8(a1, v324, v318);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v5 + 1) & 1) == 0)
            return 1;
          sub_22EFC8E88(a2);
          v326 = *v325;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v328 = *(_QWORD *)v327 + 8 * *(unsigned int *)(v327 + 8);
          }
          else
          {
            v328 = 0;
          }
          if (v326 == (uint64_t *)v328)
            return 1;
          while ((sub_22EDA2374(a1, *v326) & 1) != 0)
          {
            if (++v326 == (uint64_t *)v328)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 62:
      result = sub_22EDA2FC0(a1, a2, a3);
      if (!(_DWORD)result)
        return result;
      v342 = *(_DWORD *)v5 & 0x7F;
      v343 = v342 > 0x39 || ((1 << v342) & 0x3F0003E01011066) == 0;
      v344 = !v343 || v342 - 70 <= 0xD && ((1 << (v342 - 70)) & 0x2803) != 0 || v342 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EDA22D8(a1, v344, v341);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v346 = *v345;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v348 = *(_QWORD *)v347 + 8 * *(unsigned int *)(v347 + 8);
      }
      else
      {
        v348 = 0;
      }
      if (v346 == (uint64_t *)v348)
        return 1;
      while ((sub_22EDA2374(a1, *v346) & 1) != 0)
      {
        if (++v346 == (uint64_t *)v348)
          return 1;
      }
      return 0;
    case 63:
      result = sub_22EDA2FC0(a1, a2, a3);
      if (!(_DWORD)result)
        return result;
      v250 = *(_DWORD *)v5 & 0x7F;
      v251 = v250 > 0x39 || ((1 << v250) & 0x3F0003E01011066) == 0;
      v252 = !v251 || v250 - 70 <= 0xD && ((1 << (v250 - 70)) & 0x2803) != 0 || v250 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EDA22D8(a1, v252, v249);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v254 = *v253;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v256 = *(_QWORD *)v255 + 8 * *(unsigned int *)(v255 + 8);
      }
      else
      {
        v256 = 0;
      }
      if (v254 == (uint64_t *)v256)
        return 1;
      while ((sub_22EDA2374(a1, *v254) & 1) != 0)
      {
        if (++v254 == (uint64_t *)v256)
          return 1;
      }
      return 0;
    case 64:
      result = sub_22EDA2FC0(a1, a2, a3);
      if (!(_DWORD)result)
        return result;
      v208 = *(_DWORD *)(a2 + 96) & 0x600;
      if (v208 != 1024)
        goto LABEL_338;
      result = sub_22ED9153C(a1, *(_QWORD *)(a2 + 88) & 0xFFFFFFFFFFFFFFF8, 0);
      if (!(_DWORD)result)
        return result;
      v208 = *(_DWORD *)(a2 + 96) & 0x600;
LABEL_338:
      if (v208 != 1024 && v208 != 512 && *(_QWORD *)(a2 + 88) >= 8uLL)
      {
        v209 = sub_22EFBC5B4(a2);
        v210 = v209;
        if (v209 && (*(_BYTE *)v209 & 0xFE) == 0xAC)
          v210 = *(_QWORD *)(v209 + 16);
        result = sub_22ED9153C(a1, v210, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v211 = *(_DWORD *)v5 & 0x7F, v211 <= 0x39) && ((1 << v211) & 0x3F0003E01011066) != 0
        || v211 - 70 <= 0xD && ((1 << (v211 - 70)) & 0x2803) != 0
        || v211 - 19 <= 4)
      {
        v212 = sub_22EFCAE04(a2);
      }
      else
      {
        v212 = 0;
      }
      result = sub_22EDA22D8(a1, v212, v207);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v214 = *v213;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v216 = *(_QWORD *)v215 + 8 * *(unsigned int *)(v215 + 8);
      }
      else
      {
        v216 = 0;
      }
      if (v214 == (uint64_t *)v216)
        return 1;
      while ((sub_22EDA2374(a1, *v214) & 1) != 0)
      {
        if (++v214 == (uint64_t *)v216)
          return 1;
      }
      return 0;
    case 65:
      v333 = *(unint64_t ***)(a2 + 120);
      if (v333)
      {
        v334 = *v333;
        if (*v333)
        {
          v337 = *v334;
          v336 = (uint64_t)(v334 + 1);
          v335 = v337;
          if (!*(_BYTE *)(a1 + 4) || !v335 || (*(_BYTE *)(*(_QWORD *)(v335 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
          {
            result = sub_22EDA16E8(a1, v335, v336);
            if (!(_DWORD)result)
              return result;
          }
        }
      }
      v338 = *(_QWORD *)(a2 + 56);
      if ((v338 & 4) != 0)
      {
        v565 = (uint64_t *)(v338 & 0xFFFFFFFFFFFFFFF8);
        v339 = *v565;
        v340 = v565[1];
      }
      else
      {
        v339 = 0;
        v340 = 0;
      }
      result = sub_22EDA157C(a1, v339, v340);
      if (!(_DWORD)result)
        return result;
      if (sub_22EFBC2B0(a2) != 2)
        return 1;
      v567 = *(_DWORD *)v5 & 0x7F;
      if (v567 <= 0x39 && ((1 << v567) & 0x3F0003E01011066) != 0
        || v567 - 70 <= 0xD && ((1 << (v567 - 70)) & 0x2803) != 0
        || v567 - 19 <= 4)
      {
        v568 = sub_22EFCAE04(a2);
      }
      else
      {
        v568 = 0;
      }
      result = sub_22EDA22D8(a1, v568, v566);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v570 = *v569;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v572 = *(_QWORD *)v571 + 8 * *(unsigned int *)(v571 + 8);
      }
      else
      {
        v572 = 0;
      }
      if (v570 == (uint64_t *)v572)
        return 1;
      while ((sub_22EDA2374(a1, *v570) & 1) != 0)
      {
        if (++v570 == (uint64_t *)v572)
          return 1;
      }
      return 0;
    case 66:
      v46 = *(_QWORD *)(a2 + 424);
      if (!v46)
        goto LABEL_68;
      v47 = *(_DWORD *)(v46 + 12) & 0x1FFFFFFF;
      if (!(_DWORD)v47)
        goto LABEL_68;
      v48 = (_QWORD *)(v46 + 16);
      v49 = 8 * v47;
      while ((sub_22ED9D24C(a1, *v48, a3) & 1) != 0)
      {
        ++v48;
        v49 -= 8;
        if (!v49)
        {
LABEL_68:
          v50 = *(_QWORD *)(a2 + 432);
          v51 = *(unsigned int *)(v50 + 8);
          if ((_DWORD)v51)
          {
            v52 = v50 + 16;
            while ((sub_22EDA1FB0(a1, v52) & 1) != 0)
            {
              v52 += 32;
              if (!--v51)
                goto LABEL_72;
            }
          }
          else
          {
LABEL_72:
            result = sub_22EDA2FC0(a1, a2, a3);
            if (!(_DWORD)result)
              return result;
            v54 = *(_DWORD *)v5 & 0x7F;
            v55 = v54 > 0x39 || ((1 << v54) & 0x3F0003E01011066) == 0;
            if (v55
              && (v54 - 70 <= 0xD ? (v624 = ((1 << (v54 - 70)) & 0x2803) == 0) : (v624 = 1), v624 && v54 - 19 > 4))
            {
              v56 = 0;
            }
            else
            {
              v56 = sub_22EFCAE04(a2);
            }
            result = sub_22EDA22D8(a1, v56, v53);
            if (!(_DWORD)result)
              return result;
            if ((*(_BYTE *)(v5 + 1) & 1) == 0)
              return 1;
            sub_22EFC8E88(a2);
            v58 = *v57;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v60 = *(_QWORD *)v59 + 8 * *(unsigned int *)(v59 + 8);
            }
            else
            {
              v60 = 0;
            }
            if (v58 == (uint64_t *)v60)
              return 1;
            while ((sub_22EDA2374(a1, *v58) & 1) != 0)
            {
              if (++v58 == (uint64_t *)v60)
                return 1;
            }
          }
          return 0;
        }
      }
      return 0;
    case 67:
      result = sub_22ED9153C(a1, *(_QWORD *)(a2 + 56), 0);
      if (!(_DWORD)result)
        return result;
      v138 = *(_DWORD *)v5 & 0x7F;
      v139 = v138 > 0x39 || ((1 << v138) & 0x3F0003E01011066) == 0;
      v140 = !v139 || v138 - 70 <= 0xD && ((1 << (v138 - 70)) & 0x2803) != 0 || v138 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EDA22D8(a1, v140, v137);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v142 = *v141;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v144 = *(_QWORD *)v143 + 8 * *(unsigned int *)(v143 + 8);
      }
      else
      {
        v144 = 0;
      }
      if (v142 == (uint64_t *)v144)
        return 1;
      while ((sub_22EDA2374(a1, *v142) & 1) != 0)
      {
        if (++v142 == (uint64_t *)v144)
          return 1;
      }
      return 0;
    case 68:
      result = sub_22EDA22D8(a1, 0, a3);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v521 = *v520;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v523 = *(_QWORD *)v522 + 8 * *(unsigned int *)(v522 + 8);
      }
      else
      {
        v523 = 0;
      }
      if (v521 == (uint64_t *)v523)
        return 1;
      while ((sub_22EDA2374(a1, *v521) & 1) != 0)
      {
        if (++v521 == (uint64_t *)v523)
          return 1;
      }
      return 0;
    case 69:
      result = sub_22EDA22D8(a1, 0, a3);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v118 = *v117;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v120 = *(_QWORD *)v119 + 8 * *(unsigned int *)(v119 + 8);
      }
      else
      {
        v120 = 0;
      }
      if (v118 == (uint64_t *)v120)
        return 1;
      while ((sub_22EDA2374(a1, *v118) & 1) != 0)
      {
        if (++v118 == (uint64_t *)v120)
          return 1;
      }
      return 0;
    case 70:
      v22 = *(_DWORD **)(a2 + 56);
      v25 = *v22;
      v24 = (uint64_t *)(v22 + 4);
      v23 = v25;
      if (!v25)
        return (sub_22ED91030(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
      v26 = 8 * v23;
      while ((sub_22EDA3020(a1, *v24) & 1) != 0)
      {
        ++v24;
        v26 -= 8;
        if (!v26)
          return (sub_22ED91030(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
      }
      return 0;
    case 71:
      result = sub_22ED9153C(a1, *(_QWORD *)(a2 + 88), 0);
      if ((_DWORD)result)
      {
        v65 = *(_QWORD *)(a2 + 96);
        if (!v65)
          return (sub_22ED91030(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
        result = sub_22ED9153C(a1, v65, 0);
        if ((_DWORD)result)
          return (sub_22ED91030(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
      }
      return result;
    case 72:
      result = sub_22EDA22D8(a1, 0, a3);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v480 = *v479;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v482 = *(_QWORD *)v481 + 8 * *(unsigned int *)(v481 + 8);
      }
      else
      {
        v482 = 0;
      }
      if (v480 == (uint64_t *)v482)
        return 1;
      while ((sub_22EDA2374(a1, *v480) & 1) != 0)
      {
        if (++v480 == (uint64_t *)v482)
          return 1;
      }
      return 0;
    case 73:
      result = sub_22EDA22D8(a1, 0, a3);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v496 = *v495;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v498 = *(_QWORD *)v497 + 8 * *(unsigned int *)(v497 + 8);
      }
      else
      {
        v498 = 0;
      }
      if (v496 == (uint64_t *)v498)
        return 1;
      while ((sub_22EDA2374(a1, *v496) & 1) != 0)
      {
        if (++v496 == (uint64_t *)v498)
          return 1;
      }
      return 0;
    case 74:
      if (!sub_22EDA157C(a1, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72)))
        return 0;
      v499 = *(_DWORD *)(a2 + 24);
      v500 = *(_QWORD *)(a2 + 80);
      v636 = *(_QWORD *)(a2 + 40);
      v637 = v499;
      v638 = v500;
      if (!sub_22EDA1614(a1, &v636))
        return 0;
      if ((v502 = *(_DWORD *)v5 & 0x7F, v502 <= 0x39) && ((1 << v502) & 0x3F0003E01011066) != 0
        || v502 - 70 <= 0xD && ((1 << (v502 - 70)) & 0x2803) != 0
        || v502 - 19 <= 4)
      {
        v503 = sub_22EFCAE04(a2);
      }
      else
      {
        v503 = 0;
      }
      if (!sub_22EDA22D8(a1, v503, v501))
        return 0;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v505 = *v504;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v507 = *(_QWORD *)v506 + 8 * *(unsigned int *)(v506 + 8);
      }
      else
      {
        v507 = 0;
      }
      while (2)
      {
        if (v505 == (uint64_t *)v507)
          return 1;
        if ((sub_22EDA2374(a1, *v505) & 1) != 0)
        {
          ++v505;
          continue;
        }
        break;
      }
      return 0;
    case 75:
      v90 = *(unsigned int **)(a2 + 40);
      v91 = *v90;
      v92 = v90[1];
      if (!(_DWORD)v92)
        goto LABEL_146;
      v93 = &v90[2 * v91 + 4];
      v94 = 8 * v92;
      while ((sub_22ED9153C(a1, *(_QWORD *)v93, 0) & 1) != 0)
      {
        v93 += 2;
        v94 -= 8;
        if (!v94)
        {
          v90 = *(unsigned int **)(a2 + 40);
          v91 = *v90;
LABEL_146:
          if ((_DWORD)v91)
          {
            v95 = (uint64_t *)(v90 + 4);
            v96 = 8 * v91;
            while ((sub_22EDA3020(a1, *v95) & 1) != 0)
            {
              ++v95;
              v96 -= 8;
              if (!v96)
                goto LABEL_150;
            }
          }
          else
          {
LABEL_150:
            v97 = *(_DWORD *)v5 & 0x7F;
            v98 = v97 > 0x39 || ((1 << v97) & 0x3F0003E01011066) == 0;
            if (v98
              && (v97 - 70 <= 0xD ? (v618 = ((1 << (v97 - 70)) & 0x2803) == 0) : (v618 = 1), v618 && v97 - 19 > 4))
            {
              v99 = 0;
            }
            else
            {
              v99 = sub_22EFCAE04(a2);
            }
            result = sub_22EDA22D8(a1, v99, a3);
            if (!(_DWORD)result)
              return result;
            if ((*(_BYTE *)(v5 + 1) & 1) == 0)
              return 1;
            sub_22EFC8E88(a2);
            v101 = *v100;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v103 = *(_QWORD *)v102 + 8 * *(unsigned int *)(v102 + 8);
            }
            else
            {
              v103 = 0;
            }
            if (v101 == (uint64_t *)v103)
              return 1;
            while ((sub_22EDA2374(a1, *v101) & 1) != 0)
            {
              if (++v101 == (uint64_t *)v103)
                return 1;
            }
          }
          return 0;
        }
      }
      return 0;
    case 76:
      v306 = *(_DWORD **)(a2 + 40);
      v309 = *v306;
      v308 = (uint64_t *)(v306 + 4);
      v307 = v309;
      if (!v309)
        goto LABEL_1065;
      v310 = 8 * v307;
      while ((sub_22EDA3020(a1, *v308) & 1) != 0)
      {
        ++v308;
        v310 -= 8;
        if (!v310)
        {
          v311 = *(_DWORD *)v5 & 0x7F;
          v312 = v311 > 0x39 || ((1 << v311) & 0x3F0003E01011066) == 0;
          if (v312
            && (v311 - 70 <= 0xD ? (v617 = ((1 << (v311 - 70)) & 0x2803) == 0) : (v617 = 1), v617 && v311 - 19 > 4))
          {
LABEL_1065:
            v313 = 0;
          }
          else
          {
            v313 = sub_22EFCAE04(a2);
          }
          result = sub_22EDA22D8(a1, v313, a3);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v5 + 1) & 1) == 0)
            return 1;
          sub_22EFC8E88(a2);
          v627 = *v626;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v629 = *(_QWORD *)v628 + 8 * *(unsigned int *)(v628 + 8);
          }
          else
          {
            v629 = 0;
          }
          if (v627 == (uint64_t *)v629)
            return 1;
          while ((sub_22EDA2374(a1, *v627) & 1) != 0)
          {
            if (++v627 == (uint64_t *)v629)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 77:
      v27 = *(unsigned int **)(a2 + 40);
      v28 = v27[1];
      if (!(_DWORD)v28)
        goto LABEL_1050;
      v29 = &v27[2 * *v27 + 4];
      v30 = 8 * v28;
      while ((sub_22ED9153C(a1, *(_QWORD *)v29, 0) & 1) != 0)
      {
        v29 += 2;
        v30 -= 8;
        if (!v30)
        {
          v31 = *(_DWORD *)v5 & 0x7F;
          v32 = v31 > 0x39 || ((1 << v31) & 0x3F0003E01011066) == 0;
          if (v32 && (v31 - 70 <= 0xD ? (v612 = ((1 << (v31 - 70)) & 0x2803) == 0) : (v612 = 1), v612 && v31 - 19 > 4))
LABEL_1050:
            v33 = 0;
          else
            v33 = sub_22EFCAE04(a2);
          result = sub_22EDA22D8(a1, v33, a3);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v5 + 1) & 1) == 0)
            return 1;
          sub_22EFC8E88(a2);
          v614 = *v613;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v616 = *(_QWORD *)v615 + 8 * *(unsigned int *)(v615 + 8);
          }
          else
          {
            v616 = 0;
          }
          if (v614 == (uint64_t *)v616)
            return 1;
          while ((sub_22EDA2374(a1, *v614) & 1) != 0)
          {
            if (++v614 == (uint64_t *)v616)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 78:
      result = sub_22EDA22D8(a1, 0, a3);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v517 = *v516;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v519 = *(_QWORD *)v518 + 8 * *(unsigned int *)(v518 + 8);
      }
      else
      {
        v519 = 0;
      }
      if (v517 == (uint64_t *)v519)
        return 1;
      while ((sub_22EDA2374(a1, *v517) & 1) != 0)
      {
        if (++v517 == (uint64_t *)v519)
          return 1;
      }
      return 0;
    case 79:
      result = sub_22EDA22D8(a1, 0, a3);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v19 = *v18;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v21 = *(_QWORD *)v20 + 8 * *(unsigned int *)(v20 + 8);
      }
      else
      {
        v21 = 0;
      }
      if (v19 == (uint64_t *)v21)
        return 1;
      while ((sub_22EDA2374(a1, *v19) & 1) != 0)
      {
        if (++v19 == (uint64_t *)v21)
          return 1;
      }
      return 0;
    case 80:
      result = sub_22EDA22D8(a1, 0, a3);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v62 = *v61;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v64 = *(_QWORD *)v63 + 8 * *(unsigned int *)(v63 + 8);
      }
      else
      {
        v64 = 0;
      }
      if (v62 == (uint64_t *)v64)
        return 1;
      while ((sub_22EDA2374(a1, *v62) & 1) != 0)
      {
        if (++v62 == (uint64_t *)v64)
          return 1;
      }
      return 0;
    case 81:
      v181 = sub_22EFCAE04(a2);
      result = sub_22EDA22D8(a1, v181, v182);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v184 = *v183;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v186 = *(_QWORD *)v185 + 8 * *(unsigned int *)(v185 + 8);
      }
      else
      {
        v186 = 0;
      }
      if (v184 == (uint64_t *)v186)
        return 1;
      while ((sub_22EDA2374(a1, *v184) & 1) != 0)
      {
        if (++v184 == (uint64_t *)v186)
          return 1;
      }
      return 0;
    case 82:
      result = sub_22ED9153C(a1, *(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFFCLL, 0);
      if (!(_DWORD)result)
        return result;
      result = sub_22ED9153C(a1, *(_QWORD *)(a2 + 48), 0);
      if (!(_DWORD)result)
        return result;
      if ((v175 = *(_DWORD *)v5 & 0x7F, v175 <= 0x39) && ((1 << v175) & 0x3F0003E01011066) != 0
        || v175 - 70 <= 0xD && ((1 << (v175 - 70)) & 0x2803) != 0
        || v175 - 19 <= 4)
      {
        v176 = sub_22EFCAE04(a2);
      }
      else
      {
        v176 = 0;
      }
      result = sub_22EDA22D8(a1, v176, v174);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v5 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v178 = *v177;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v180 = *(_QWORD *)v179 + 8 * *(unsigned int *)(v179 + 8);
      }
      else
      {
        v180 = 0;
      }
      if (v178 == (uint64_t *)v180)
        return 1;
      break;
    case 83:
      v12 = *(_QWORD *)(a2 + 88);
      v13 = *(_BYTE **)(v12 + 19016);
      v14 = *(_BYTE **)(v12 + 19024);
      v15 = v14 - v13;
      if (v14 == v13)
      {
        v16 = 0;
        v17 = 0;
      }
      else
      {
        if (v15 < 0)
          abort();
        v16 = (char *)operator new(v14 - v13);
        memmove(v16, v13, v15);
        v17 = &v16[8 * (v15 >> 3)];
      }
      if (v17 - v16 == 8 && (*(_DWORD *)(*(_QWORD *)v16 + 28) & 0x7F) == 0x53)
      {
        operator delete(v16);
        result = sub_22EDA22D8(a1, a2 + 40, v573);
        if (!(_DWORD)result)
          return result;
      }
      else
      {
        if (v16 != v17)
        {
          v574 = v16;
          do
          {
            v575 = *(_QWORD *)v574;
            if ((*(_DWORD *)(*(_QWORD *)v574 + 28) & 0x7Fu) - 1 >= 2
              && ((*(_DWORD *)(*(_QWORD *)v574 + 28) & 0x7Fu) - 35 > 2
               || (v576 = *(_QWORD *)(v575 + 128)) == 0
               || ((*(unsigned __int16 *)(v576 + 8) | (*(unsigned __int8 *)(v576 + 10) << 16)) & 0x100000) == 0)
              && !sub_22ED9D24C(a1, v575, a3))
            {
              if (v16)
                operator delete(v16);
              return 0;
            }
            v574 += 8;
          }
          while (v574 != v17);
        }
        if (v16)
          operator delete(v16);
      }
      if ((*(_BYTE *)(v5 + 1) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v578 = *v577;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v580 = *(_QWORD *)v579 + 8 * *(unsigned int *)(v579 + 8);
        }
        else
        {
          v580 = 0;
        }
        for (; v578 != (uint64_t *)v580; ++v578)
        {
          if ((sub_22EDA2374(a1, *v578) & 1) == 0)
            return 0;
        }
      }
      return 1;
    default:
      return 1;
  }
  while ((sub_22EDA2374(a1, *v178) & 1) != 0)
  {
    if (++v178 == (uint64_t *)v180)
      return 1;
  }
  return 0;
}

uint64_t sub_22EDA122C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if ((*(_BYTE *)(a2 + 60) & 4) != 0)
  {
    if (*(_QWORD *)(a2 + 152))
    {
      if ((sub_22ED9153C(a1, *(_QWORD *)(a2 + 152), 0) & 1) == 0)
        return 0;
    }
    else
    {
      result = sub_22EDA14DC(a1, a2 + 80);
      if (!(_DWORD)result)
        return result;
    }
  }
  return 1;
}

uint64_t sub_22EDA1274(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;

  result = sub_22ED9153C(a1, *(_QWORD *)(a2 + 40), 0);
  if ((_DWORD)result)
  {
    v6 = *(_DWORD *)(a2 + 28) & 0x7F;
    v7 = v6 > 0x39 || ((1 << v6) & 0x3F0003E01011066) == 0;
    if (v7 && (v6 - 70 <= 0xD ? (v9 = ((1 << (v6 - 70)) & 0x2803) == 0) : (v9 = 1), v9 && v6 - 19 > 4))
      v8 = 0;
    else
      v8 = sub_22EFCAE04(a2);
    result = sub_22EDA22D8(a1, v8, v5);
    if ((_DWORD)result)
    {
      if ((*(_BYTE *)(a2 + 29) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v11 = *v10;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v13 = *(_QWORD *)v12 + 8 * *(unsigned int *)(v12 + 8);
      }
      else
      {
        v13 = 0;
      }
      if (v11 == v13)
      {
        return 1;
      }
      else
      {
        v14 = v11 + 8;
        do
        {
          result = sub_22EDA2374(a1, *(_QWORD *)(v14 - 8));
          if ((_DWORD)result)
            v15 = v14 == v13;
          else
            v15 = 1;
          v14 += 8;
        }
        while (!v15);
      }
    }
  }
  return result;
}

uint64_t sub_22EDA138C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  BOOL v9;
  uint64_t result;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;

  if (!*(_DWORD *)(a2 + 96))
    goto LABEL_10;
  v5 = *(_QWORD *)(a2 + 80);
  v6 = (_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
  if ((v5 & 4) != 0)
    v6 = (_QWORD *)*v6;
  v8 = (_QWORD *)*v6;
  a3 = (uint64_t)(v6 + 1);
  v7 = (unint64_t)v8;
  v9 = !*(_BYTE *)(a1 + 4) || v7 == 0;
  if (!v9 && (*(_BYTE *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0
    || (result = sub_22EDA16E8(a1, v7, a3), (_DWORD)result))
  {
LABEL_10:
    v11 = *(_DWORD *)(a2 + 28) & 0x7F;
    v12 = v11 > 0x39 || ((1 << v11) & 0x3F0003E01011066) == 0;
    if (v12 && (v11 - 70 <= 0xD ? (v14 = ((1 << (v11 - 70)) & 0x2803) == 0) : (v14 = 1), v14 && v11 - 19 > 4))
      v13 = 0;
    else
      v13 = sub_22EFCAE04(a2);
    result = sub_22EDA22D8(a1, v13, a3);
    if ((_DWORD)result)
    {
      if ((*(_BYTE *)(a2 + 29) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v16 = *v15;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v18 = *(_QWORD *)v17 + 8 * *(unsigned int *)(v17 + 8);
      }
      else
      {
        v18 = 0;
      }
      if (v16 == v18)
      {
        return 1;
      }
      else
      {
        v19 = v16 + 8;
        do
        {
          result = sub_22EDA2374(a1, *(_QWORD *)(v19 - 8));
          if ((_DWORD)result)
            v20 = v19 == v18;
          else
            v20 = 1;
          v19 += 8;
        }
        while (!v20);
      }
    }
  }
  return result;
}

uint64_t sub_22EDA14DC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v10;
  __int128 v11;
  uint64_t v12;

  result = sub_22EDA157C(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
  {
    v11 = *(_OWORD *)(a2 + 24);
    v12 = *(_QWORD *)(a2 + 40);
    result = sub_22EDA1614(a1, (uint64_t *)&v11);
    if ((_DWORD)result)
    {
      v5 = *(_QWORD *)(a2 + 64);
      if (v5 && (v6 = *(unsigned int *)(v5 + 8), (_DWORD)v6))
      {
        v7 = v5 + 16;
        v8 = v6 - 1;
        do
        {
          result = sub_22EDA1FB0(a1, v7);
          v10 = v8-- != 0;
          if (!(_DWORD)result)
            break;
          v7 += 32;
        }
        while (v10);
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_22EDA157C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = a2;
  v9[1] = a3;
  if (!a2)
    return 1;
  v5 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v5 || (result = sub_22EDA157C(a1, v5, a3), (_DWORD)result))
  {
    if (!*(_QWORD *)(a2 + 16))
      return 1;
    if ((*(_BYTE *)(a2 + 8) & 4) == 0)
      return 1;
    v7 = sub_22F0AB4E0((uint64_t)v9);
    if (*(_BYTE *)(a1 + 4))
    {
      if (v7 && (*(_BYTE *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0)
        return 1;
    }
    result = sub_22EDA16E8(a1, v7, v8);
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

uint64_t sub_22EDA1614(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  int v10;
  unint64_t v11;

  v2 = *a2;
  v3 = *a2 & 7;
  v4 = v3;
  if ((_DWORD)v3 == 7)
  {
    v5 = *(_DWORD *)(v2 & 0xFFFFFFFFFFFFFFF8);
    if (v5 >= 3)
      v5 = 3;
    v4 = v5 | 8;
  }
  if ((v4 - 3) < 3)
  {
    if ((v3 - 3) <= 2)
    {
      v6 = (uint64_t *)a2[2];
      if (v6)
      {
        v7 = *v6;
        if ((!*(_BYTE *)(a1 + 4) || !v7 || (*(_BYTE *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
          && (sub_22EDA16E8() & 1) == 0)
        {
          return 0;
        }
      }
    }
    return 1;
  }
  if (v4 != 8)
    return 1;
  if ((~(_BYTE)v2 & 7) != 0)
    goto LABEL_18;
  v9 = v2 & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_DWORD *)v9;
  if (*(_DWORD *)v9 >= 3u)
    v10 = 3;
  if (v10)
LABEL_18:
    v11 = 0;
  else
    v11 = *(_QWORD *)(v9 + 16) & 0xFFFFFFFFFFFFFFF9;
  result = sub_22EDA20E4(a1, v11);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t sub_22EDA16E8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v10;
  unint64_t *v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t **v69;
  uint64_t v70;
  BOOL v71;
  int v72;
  int v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;

  if (a2)
  {
    v4 = a2;
    do
    {
      v6 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
      if ((v4 & 0xF) != 0)
      {
LABEL_4:
        if ((v6 & 0xFFFFFFFFFFFFFFF0) != 0)
          v7 = *(_QWORD *)((char *)&unk_22F498010
                         + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
        else
          v7 = 1;
        a3 = (a3 + v7 - 1) & -v7;
        v4 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
      }
      else
      {
        result = 1;
        switch(*(_BYTE *)(v6 + 16))
        {
          case 0:
          case 1:
          case 0x16:
          case 0x17:
          case 0x36:
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v25 = *(_QWORD *)((char *)&unk_22F498010
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v25 = 1;
            v10 = a3 + v25 - 1;
            goto LABEL_52;
          case 2:
          case 3:
          case 4:
          case 5:
            v26 = *(_QWORD *)(v4 + 32);
            if (v26 >= 0x10 && (*(_QWORD *)(v4 + 32) & 0xFLL) == 0)
            {
              v28 = *(_QWORD *)((char *)&unk_22F498010
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
              if (!v26)
                goto LABEL_86;
            }
            else
            {
              v28 = 1;
              if (!v26)
                goto LABEL_86;
            }
            if (*(_BYTE *)(a1 + 4) && (*(_BYTE *)(*(_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0)
              goto LABEL_87;
LABEL_86:
            result = sub_22EDA16E8(a1, v26, (a3 + v28 + 15) & -v28);
            if (!(_DWORD)result)
              return result;
LABEL_87:
            v29 = *(_QWORD *)(a3 + 8);
            return sub_22ED9153C(a1, v29, 0);
          case 6:
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v25 = *(_QWORD *)((char *)&unk_22F498010
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v25 = 1;
            v10 = a3 + v25 + 11;
            goto LABEL_52;
          case 7:
          case 0x25:
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v25 = *(_QWORD *)((char *)&unk_22F498010
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v25 = 1;
            v10 = a3 + v25 + 7;
            goto LABEL_52;
          case 8:
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v25 = *(_QWORD *)((char *)&unk_22F498010
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v25 = 1;
            v10 = v25 + a3;
            goto LABEL_52;
          case 0xA:
          case 0x20:
          case 0x24:
          case 0x26:
          case 0x27:
          case 0x28:
          case 0x29:
            v4 = *(_QWORD *)(v4 + 32);
            goto LABEL_11;
          case 0xC:
          case 0x37:
          case 0x38:
            goto LABEL_91;
          case 0xD:
          case 0x30:
            v29 = *(_QWORD *)(v4 + 24);
            return sub_22ED9153C(a1, v29, 0);
          case 0xE:
            result = sub_22ED91030(a1, *(_QWORD *)(v4 + 24));
            if (!(_DWORD)result)
              return result;
            if (!*(_QWORD *)(v4 + 40))
              return 1;
            result = sub_22EDA157C(a1, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 16));
            if (!(_DWORD)result)
              return result;
            v31 = *(_DWORD *)(a3 + 28);
            v81 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 40);
            v82 = v31;
            sub_22EFC6D6C((uint64_t)&v83, v81);
            result = sub_22EDA1614(a1, &v81);
            if (!(_DWORD)result)
              return result;
            v32 = *(unsigned int *)(v4 + 20);
            if (!(_DWORD)v32)
              return 1;
            v33 = v4 + 48;
            v34 = (uint64_t *)(a3 + 56);
            v35 = v32 - 1;
            do
            {
              v36 = *v34++;
              v84 = *(_OWORD *)v33;
              v85 = *(_QWORD *)(v33 + 16);
              v86 = v36;
              result = sub_22EDA1FB0(a1, (uint64_t)&v84);
              v37 = v35-- != 0;
              v38 = v37;
              if (!(_DWORD)result)
                break;
              v33 += 24;
            }
            while ((v38 & 1) != 0);
            return result;
          case 0xF:
            result = sub_22EDA20E4(a1, *(_QWORD *)(v4 + 40));
            if (!(_DWORD)result)
              return result;
            v30 = *(_QWORD *)(v4 + 24);
            return sub_22ED91030(a1, v30);
          case 0x10:
            v39 = *(_QWORD *)(v4 + 40);
            goto LABEL_111;
          case 0x11:
            v29 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFFCLL;
            return sub_22ED9153C(a1, v29, 0);
          case 0x12:
            return sub_22EDA157C(a1, *(_QWORD *)(v4 + 32), *(_QWORD *)(a3 + 8));
          case 0x13:
            v39 = *(_QWORD *)(v4 + 40);
            if (!v39)
              goto LABEL_112;
LABEL_111:
            result = sub_22ED9153C(a1, v39, 0);
            if (!(_DWORD)result)
              return result;
LABEL_112:
            v30 = *(_QWORD *)(v4 + 48);
            return sub_22ED91030(a1, v30);
          case 0x14:
            v40 = *(_QWORD *)(a3 + 8);
            if (v40)
            {
              v41 = *(_QWORD *)(v4 + 32);
              if (v41)
              {
                result = sub_22EDA157C(a1, v41, v40);
                if (!(_DWORD)result)
                  return result;
              }
            }
            v42 = *(unsigned int *)(v4 + 20);
            if (!(_DWORD)v42)
              return 1;
            v43 = v4 + 48;
            v44 = (uint64_t *)(a3 + 32);
            v45 = v42 - 1;
            do
            {
              v46 = *v44++;
              v84 = *(_OWORD *)v43;
              v85 = *(_QWORD *)(v43 + 16);
              v86 = v46;
              result = sub_22EDA1FB0(a1, (uint64_t)&v84);
              v37 = v45-- != 0;
              v47 = v37;
              if (!(_DWORD)result)
                break;
              v43 += 24;
            }
            while ((v47 & 1) != 0);
            return result;
          case 0x15:
            v48 = *(_QWORD *)(v4 + 48);
            if (v48)
            {
              result = sub_22ED9153C(a1, v48, 0);
              if (!(_DWORD)result)
                return result;
            }
            v30 = *(_QWORD *)(v4 + 40);
            return sub_22ED91030(a1, v30);
          case 0x18:
            v18 = *(_QWORD *)(v4 + 32);
            if (v18)
            {
              result = sub_22EDA157C(a1, v18, *(_QWORD *)(a3 + 8));
              if (!(_DWORD)result)
                return result;
            }
            v4 = *(_QWORD *)(v4 + 40);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              goto LABEL_73;
            v20 = 1;
            goto LABEL_74;
          case 0x19:
            *(_QWORD *)&v84 = v4;
            *((_QWORD *)&v84 + 1) = a3;
            v49 = *(_QWORD *)(v4 + 24);
            v50 = sub_22E47EE80(&v84);
            if (*(_BYTE *)(a1 + 4) && v49 && (*(_BYTE *)(*(_QWORD *)(v49 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0)
              return 1;
            return sub_22EDA16E8(a1, v49, v50);
          case 0x1A:
            *(_QWORD *)&v84 = v4;
            *((_QWORD *)&v84 + 1) = a3;
            v51 = *(_QWORD *)(v4 + 24);
            v52 = sub_22E47EE80(&v84);
            if (!*(_BYTE *)(a1 + 4) || !v51 || (*(_BYTE *)(*(_QWORD *)(v51 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
            {
              result = sub_22EDA16E8(a1, v51, v52);
              if (!(_DWORD)result)
                return result;
            }
            v53 = v84;
            v54 = *(_QWORD *)(v84 + 16);
            if (*(_BYTE *)(v84 + 16) == 25 || (v54 & 0x3FFFC000000000) == 0)
              goto LABEL_147;
            v56 = 0;
            v57 = (unsigned __int16)(v54 >> 38);
            do
            {
              v58 = *(_QWORD *)(*((_QWORD *)&v84 + 1) + 8 * v56 + 16);
              if (v58)
              {
                if ((sub_22ED9D24C(a1, v58, v52) & 1) == 0)
                  return 0;
              }
              else if (v56 < (unsigned __int16)(*(_QWORD *)(v53 + 16) >> 38))
              {
                result = sub_22ED91030(a1, *(_QWORD *)(v53 + 40 + 8 * v56));
                if (!(_DWORD)result)
                  return result;
              }
              ++v56;
            }
            while (v57 != v56);
            v54 = *(_QWORD *)(v53 + 16);
LABEL_147:
            if ((v54 & 0x3C0000000000000) == 0x80000000000000)
            {
              v59 = (_DWORD *)((v53 + 8 * (unsigned __int16)(v54 >> 38) + 4 * ((v54 >> 59) & 1) + 47) & 0xFFFFFFFFFFFFFFF8);
              v62 = *v59;
              v61 = v59 + 2;
              v60 = v62;
              if (v62)
              {
                v63 = 8 * v60;
                while ((sub_22ED91030(a1, *v61) & 1) != 0)
                {
                  ++v61;
                  v63 -= 8;
                  if (!v63)
                    goto LABEL_152;
                }
                return 0;
              }
            }
LABEL_152:
            v64 = sub_22F257D3C(v53);
            if (!v64)
              return 1;
            result = sub_22ED9153C(a1, v64, 0);
            if ((_DWORD)result)
              return 1;
            return result;
          case 0x1C:
            v4 = *(_QWORD *)(v4 + 24);
LABEL_11:
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v25 = *(_QWORD *)((char *)&unk_22F498010
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v25 = 1;
            v10 = a3 + v25 + 3;
LABEL_52:
            a3 = v10 & -v25;
            if (v4 && *(_BYTE *)(a1 + 4))
              goto LABEL_54;
            break;
          case 0x1D:
          case 0x1E:
            result = sub_22ED9153C(a1, *(_QWORD *)(a3 + 16), 0);
            if (!(_DWORD)result)
              return result;
            result = sub_22ED9153C(a1, *(_QWORD *)(a3 + 24), 0);
            if (!(_DWORD)result)
              return result;
LABEL_91:
            v30 = *(_QWORD *)(v4 + 32);
            return sub_22ED91030(a1, v30);
          case 0x1F:
            v21 = *(uint64_t **)(a3 + 8);
            if (v21)
            {
              v24 = *v21;
              v23 = v21 + 1;
              v22 = v24;
              if ((!*(_BYTE *)(a1 + 4) || !v22 || (*(_BYTE *)(*(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
                && (sub_22EDA16E8(a1, v22, v23) & 1) == 0)
              {
                return 0;
              }
            }
            else
            {
              result = sub_22ED91030(a1, *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFF0);
              if (!(_DWORD)result)
                return result;
            }
            v4 = *(_QWORD *)(v4 + 32);
            v20 = 1;
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
LABEL_73:
              v20 = *(_QWORD *)((char *)&unk_22F498010
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
LABEL_74:
            a3 = (a3 + v20 + 15) & -v20;
            if (v4 && *(_BYTE *)(a1 + 4) && (*(_BYTE *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0)
              return 1;
            break;
          case 0x21:
            v65 = *(_QWORD *)(v4 + 24);
            v66 = *(_QWORD *)(v65 & 0xFFFFFFFFFFFFFFF0);
            if (v66 != v4)
            {
              v67 = 1;
              if (v65 >= 0x10 && (v65 & 0xF) == 0)
                v67 = *(_QWORD *)((char *)&unk_22F498010
                                + ((uint64_t)((unint64_t)*(unsigned int *)(v66 + 16) << 56) >> 53));
              if (!v65 || !*(_BYTE *)(a1 + 4) || (*(_BYTE *)(v66 + 17) & 4) != 0)
              {
                result = sub_22EDA16E8(a1, v65, (a3+ (((HIWORD(*(_DWORD *)(v4 + 16)) & 0x3F8) + 4 * (*(_DWORD *)(v4 + 16) >> 26) + 31) & 0x7F8)+ v67- 1) & -v67);
                if (!(_DWORD)result)
                  return result;
              }
            }
            v68 = (*(_DWORD *)(v4 + 16) >> 19) & 0x7F;
            if (!(_DWORD)v68)
              return 1;
            v69 = (uint64_t **)(a3 + 24);
            do
            {
              v70 = **v69;
              if (*(_BYTE *)(a1 + 4))
                v71 = v70 == 0;
              else
                v71 = 1;
              if (v71 || (*(_BYTE *)(*(_QWORD *)(v70 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
              {
                result = sub_22EDA16E8(a1, v70, *v69 + 1);
                if (!(_DWORD)result)
                  break;
              }
              ++v69;
              result = 1;
              --v68;
            }
            while (v68);
            return result;
          case 0x2A:
            v72 = *(_DWORD *)(v4 + 20);
            *((_QWORD *)&v84 + 1) = *(_QWORD *)(v4 + 40);
            LODWORD(v84) = 8;
            DWORD1(v84) = v72;
            result = sub_22EDA220C(a1, (uint64_t)&v84);
            if ((_DWORD)result)
            {
              v73 = *(_DWORD *)(v4 + 20);
              *((_QWORD *)&v84 + 1) = *(_QWORD *)(v4 + 40);
              LODWORD(v84) = 8;
              DWORD1(v84) = v73;
              return sub_22EDA220C(a1, (uint64_t)&v84);
            }
            return result;
          case 0x2B:
            result = sub_22ED91030(a1, *(_QWORD *)(v4 + 8));
            if (!(_DWORD)result)
              return result;
            v30 = *(_QWORD *)(v4 + 8);
            return sub_22ED91030(a1, v30);
          case 0x2E:
            result = sub_22EDA20E4(a1, *(_QWORD *)(v4 + 32));
            if (!(_DWORD)result)
              return result;
            v74 = *(unsigned int *)(v4 + 20);
            if (!(_DWORD)v74)
              return 1;
            v75 = v4 + 40;
            v76 = (uint64_t *)(a3 + 16);
            v77 = v74 - 1;
            do
            {
              v78 = *v76++;
              v84 = *(_OWORD *)v75;
              v85 = *(_QWORD *)(v75 + 16);
              v86 = v78;
              result = sub_22EDA1FB0(a1, (uint64_t)&v84);
              v37 = v77-- != 0;
              v79 = v37;
              if (!(_DWORD)result)
                break;
              v75 += 24;
            }
            while ((v79 & 1) != 0);
            return result;
          case 0x2F:
            if (*(_DWORD *)a1 > (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                    + 8) & 0xFFFFFFFFFFFFFFF0)
                                            + 32) & 0x7FFFu))
              return result;
            v80 = *(_DWORD *)a3;
            *(_BYTE *)(a1 + 5) = 1;
            *(_DWORD *)(a1 + 8) = v80;
            return 0;
          case 0x31:
          case 0x33:
            v13 = *(unint64_t **)(a3 + 16);
            v14 = *v13;
            a3 = (uint64_t)(v13 + 1);
            v4 = v14;
            if (*(_BYTE *)(a1 + 4))
              v15 = v4 == 0;
            else
              v15 = 1;
            if (v15)
              break;
LABEL_54:
            if ((*(_BYTE *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0)
              return result;
            break;
          case 0x39:
            goto LABEL_4;
          default:
            return result;
        }
      }
    }
    while (v4);
  }
  return 1;
}

uint64_t sub_22EDA1FB0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v14;

  result = 1;
  switch(*(_DWORD *)a2)
  {
    case 1:
      v6 = (uint64_t *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL);
      if (v6)
      {
        v9 = *v6;
        v8 = v6 + 1;
        v7 = v9;
        if (!*(_BYTE *)(a1 + 4) || !v7 || (*(_BYTE *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
          result = sub_22EDA16E8(a1, v7, v8);
      }
      else
      {
        result = sub_22ED91030(a1, *(_QWORD *)(a2 + 8));
      }
      break;
    case 5:
    case 6:
      v5 = (_QWORD *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL);
      if (!*v5 || (result = sub_22EDA157C(a1, *v5, v5[1]), (_DWORD)result))
        result = sub_22EDA20E4(a1, *(_QWORD *)(a2 + 8));
      break;
    case 7:
      result = sub_22ED9153C(a1, *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL, 0);
      break;
    case 8:
      v10 = *(unsigned int *)(a2 + 4);
      if ((_DWORD)v10)
      {
        v11 = *(_QWORD *)(a2 + 8);
        v12 = v10 - 1;
        do
        {
          result = sub_22EDA220C(a1, v11);
          v14 = v12-- != 0;
          if (!(_DWORD)result)
            break;
          v11 += 24;
        }
        while (v14);
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_22EDA20E4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;

  v7 = a2;
  v4 = sub_22F0F08CC(&v7);
  if (v4 && (*(_DWORD *)(v4 + 28) & 0x7F) == 0x20 && *(_DWORD *)a1 <= (*(_DWORD *)(v4 + 64) & 0xFFFFFu))
  {
    result = 0;
    *(_BYTE *)(a1 + 5) = 1;
    *(_DWORD *)(a1 + 8) = 0;
  }
  else
  {
    v5 = a2 & 0xFFFFFFFFFFFFFFF8;
    if ((a2 & 6) == 6 && v5)
      return (sub_22EDA21A8(a1, *(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF8) & 1) != 0;
    if ((a2 & 6) != 4)
      return 1;
    if (!v5)
      return 1;
    result = sub_22EDA21A8(a1, *(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF8);
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

uint64_t sub_22EDA21A8(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (!a2)
    return 1;
  v4 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v4 || (result = sub_22EDA21A8(a1, v4), (_DWORD)result))
  {
    v6 = *(_QWORD *)(a2 + 16);
    if (v6 && (*(_BYTE *)(a2 + 8) & 4) != 0)
      return sub_22ED91030(a1, v6 & 0xFFFFFFFFFFFFFFF0);
    return 1;
  }
  return result;
}

uint64_t sub_22EDA220C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v8;

  result = 1;
  switch(*(_DWORD *)a2)
  {
    case 1:
      result = sub_22ED91030(a1, *(_QWORD *)(a2 + 8));
      break;
    case 5:
    case 6:
      result = sub_22EDA20E4(a1, *(_QWORD *)(a2 + 8));
      break;
    case 7:
      result = sub_22ED9153C(a1, *(_QWORD *)(a2 + 8), 0);
      break;
    case 8:
      v4 = *(unsigned int *)(a2 + 4);
      if ((_DWORD)v4)
      {
        v5 = *(_QWORD *)(a2 + 8);
        v6 = v4 - 1;
        do
        {
          result = sub_22EDA220C(a1, v5);
          v8 = v6-- != 0;
          if (!(_DWORD)result)
            break;
          v5 += 24;
        }
        while (v8);
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_22EDA22D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t result;

  if (!a2)
    return 1;
  if ((*(_WORD *)(a2 + 8) & 0x80) != 0)
    sub_22EFCC320(a2);
  v5 = *(_QWORD *)(a2 + 16);
  if (!v5)
    return 1;
  while (1)
  {
    if ((*(_DWORD *)(v5 + 28) & 0x7Fu) - 1 >= 2
      && ((*(_DWORD *)(v5 + 28) & 0x7Fu) - 35 > 2
       || (v6 = *(_QWORD *)(v5 + 128)) == 0
       || ((*(unsigned __int16 *)(v6 + 8) | (*(unsigned __int8 *)(v6 + 10) << 16)) & 0x100000) == 0))
    {
      result = sub_22ED9D24C(a1, v5, a3);
      if (!(_DWORD)result)
        break;
    }
    v5 = *(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (!v5)
      return 1;
  }
  return result;
}

uint64_t sub_22EDA2374(uint64_t a1, uint64_t a2)
{
  if (a2)
    __asm { BR              X10 }
  return 1;
}

void sub_22EDA2414()
{
  uint64_t v0;
  uint64_t v1;

  if (sub_22ED9153C(v0, *(_QWORD *)(v1 + 40), 0))
    JUMPOUT(0x22EDA23B4);
  JUMPOUT(0x22EDA2404);
}

void sub_22EDA2430()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;

  v2 = *(unsigned int *)(v1 + 48);
  if ((_DWORD)v2)
  {
    v3 = *(unint64_t **)(v1 + 56);
    v4 = 8 * v2;
    while ((sub_22ED9153C(v0, *v3, 0) & 1) != 0)
    {
      ++v3;
      v4 -= 8;
      if (!v4)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v5 = *(unsigned int *)(v1 + 64);
    if (!(_DWORD)v5)
      JUMPOUT(0x22EDA2400);
    v6 = *(unint64_t **)(v1 + 72);
    v7 = 8 * v5 - 8;
    do
    {
      v8 = *v6++;
      if (sub_22ED9153C(v0, v8, 0))
        v9 = v7 == 0;
      else
        v9 = 1;
      v7 -= 8;
    }
    while (!v9);
  }
  JUMPOUT(0x22EDA2404);
}

void sub_22EDA2568()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(unint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22ED9153C(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EDA2404);
}

void sub_22EDA25A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(unint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22ED9153C(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EDA2404);
}

void sub_22EDA25D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(unint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22ED9153C(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EDA2404);
}

void sub_22EDA2610()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;

  if (sub_22ED9153C(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if (!(_DWORD)v2)
      JUMPOUT(0x22EDA2400);
    v3 = *(unint64_t **)(v1 + 56);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22ED9153C(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EDA2404);
}

void sub_22EDA265C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(unint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22ED9153C(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EDA2404);
}

void sub_22EDA2694()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;

  if (sub_22ED9153C(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 56);
    if ((_DWORD)v2)
    {
      v3 = *(unint64_t **)(v1 + 64);
      v4 = 8 * v2;
      do
      {
        if ((sub_22ED9153C(v0, *v3, 0) & 1) == 0)
          JUMPOUT(0x22EDA2560);
        ++v3;
        v4 -= 8;
      }
      while (v4);
    }
    v5 = *(unsigned int *)(v1 + 72);
    if (!(_DWORD)v5)
      JUMPOUT(0x22EDA2400);
    v6 = *(unint64_t **)(v1 + 80);
    v7 = 8 * v5 - 8;
    do
    {
      v8 = *v6++;
      if (sub_22ED9153C(v0, v8, 0))
        v9 = v7 == 0;
      else
        v9 = 1;
      v7 -= 8;
    }
    while (!v9);
  }
  JUMPOUT(0x22EDA2404);
}

void sub_22EDA2710()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(unint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22ED9153C(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EDA2404);
}

void sub_22EDA2748()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(unint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22ED9153C(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EDA2404);
}

void sub_22EDA2780()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;

  if (sub_22ED9153C(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if (!(_DWORD)v2)
      JUMPOUT(0x22EDA2400);
    v3 = *(unint64_t **)(v1 + 56);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22ED9153C(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EDA2404);
}

void sub_22EDA27CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;

  if (sub_22ED9153C(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if (!(_DWORD)v2)
      JUMPOUT(0x22EDA2400);
    v3 = *(unint64_t **)(v1 + 56);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22ED9153C(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EDA2404);
}

void sub_22EDA2818()
{
  JUMPOUT(0x22EDA23D0);
}

void sub_22EDA2820()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;

  if (sub_22ED9153C(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if ((_DWORD)v2)
    {
      v3 = *(unint64_t **)(v1 + 56);
      v4 = 8 * v2;
      while ((sub_22ED9153C(v0, *v3, 0) & 1) != 0)
      {
        ++v3;
        v4 -= 8;
        if (!v4)
          goto LABEL_6;
      }
LABEL_33:
      JUMPOUT(0x22EDA2560);
    }
LABEL_6:
    v5 = *(unsigned int *)(v1 + 64);
    if ((_DWORD)v5)
    {
      v6 = *(unint64_t **)(v1 + 72);
      v7 = 8 * v5;
      while ((sub_22ED9153C(v0, *v6, 0) & 1) != 0)
      {
        ++v6;
        v7 -= 8;
        if (!v7)
          goto LABEL_10;
      }
      goto LABEL_33;
    }
LABEL_10:
    v8 = *(unsigned int *)(v1 + 80);
    if ((_DWORD)v8)
    {
      v9 = *(unint64_t **)(v1 + 88);
      v10 = 8 * v8;
      while ((sub_22ED9153C(v0, *v9, 0) & 1) != 0)
      {
        ++v9;
        v10 -= 8;
        if (!v10)
          goto LABEL_14;
      }
      goto LABEL_33;
    }
LABEL_14:
    v11 = *(unsigned int *)(v1 + 96);
    if ((_DWORD)v11)
    {
      v12 = *(unint64_t **)(v1 + 104);
      v13 = 8 * v11;
      while ((sub_22ED9153C(v0, *v12, 0) & 1) != 0)
      {
        ++v12;
        v13 -= 8;
        if (!v13)
          goto LABEL_18;
      }
      goto LABEL_33;
    }
LABEL_18:
    v14 = *(unsigned int *)(v1 + 128);
    if (!(_DWORD)v14)
      JUMPOUT(0x22EDA2400);
    v15 = *(unint64_t **)(v1 + 136);
    v16 = 8 * v14 - 8;
    do
    {
      v17 = *v15++;
      if (sub_22ED9153C(v0, v17, 0))
        v18 = v16 == 0;
      else
        v18 = 1;
      v16 -= 8;
    }
    while (!v18);
  }
  JUMPOUT(0x22EDA2404);
}

uint64_t sub_22EDA292C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t result;

  if (!a2)
    return 1;
  v5 = a2 + 16;
  v6 = *(_DWORD *)(a2 + 12);
  if ((v6 & 0x1FFFFFFF) != 0)
  {
    v7 = 8 * (v6 & 0x1FFFFFFF);
    v8 = (_QWORD *)(a2 + 16);
    while ((sub_22ED9D24C(a1, *v8, a3) & 1) != 0)
    {
      ++v8;
      v7 -= 8;
      if (!v7)
      {
        v6 = *(_DWORD *)(a2 + 12);
        goto LABEL_7;
      }
    }
    return 0;
  }
  else
  {
LABEL_7:
    if ((v6 & 0x40000000) == 0)
      return 1;
    v9 = *(_QWORD *)(v5 + 8 * (v6 & 0x1FFFFFFF));
    if (!v9)
      return 1;
    result = sub_22ED9153C(a1, v9, 0);
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

uint64_t sub_22EDA29CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 120);
  if ((v4 & 4) != 0)
  {
    v6 = 0;
    while (1)
    {
      v7 = v4 & 0xFFFFFFFFFFFFFFF8;
      if (v6 >= *(unsigned int *)(v7 + 16))
        break;
      sub_22EDA292C(a1, *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v6++), a3);
      v4 = *(_QWORD *)(a2 + 120);
      if ((v4 & 4) == 0)
        goto LABEL_5;
    }
    v8 = *(_QWORD *)v7;
    v9 = *(_QWORD *)(v7 + 8);
  }
  else
  {
LABEL_5:
    v8 = 0;
    v9 = 0;
  }
  return sub_22EDA157C(a1, v8, v9);
}

uint64_t sub_22EDA2A40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;

  result = sub_22EDA29CC(a1, a2, a3);
  if ((_DWORD)result)
  {
    if ((*(_BYTE *)(a2 + 74) & 1) == 0)
      return 1;
    v6 = sub_22E46A3A0(a2);
    if (v6 == v7)
    {
      return 1;
    }
    else
    {
      v8 = v6;
      v9 = v7;
      while (1)
      {
        v10 = *(unint64_t **)(v8 + 16);
        v13 = *v10;
        v12 = (uint64_t)(v10 + 1);
        v11 = v13;
        v14 = !*(_BYTE *)(a1 + 4) || v11 == 0;
        if (v14 || (*(_BYTE *)(*(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
        {
          result = sub_22EDA16E8(a1, v11, v12);
          if (!(_DWORD)result)
            break;
        }
        v8 += 24;
        if (v8 == v9)
          return 1;
      }
    }
  }
  return result;
}

uint64_t sub_22EDA2AD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v5 = *(_QWORD *)(a2 + 56);
  if ((v5 & 4) != 0)
  {
    v6 = 0;
    while (1)
    {
      v7 = v5 & 0xFFFFFFFFFFFFFFF8;
      if (v6 >= *(unsigned int *)(v7 + 16))
        break;
      sub_22EDA292C(a1, *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v6++), a3);
      v5 = *(_QWORD *)(a2 + 56);
      if ((v5 & 4) == 0)
        goto LABEL_5;
    }
    v8 = *(_QWORD *)v7;
    v9 = *(_QWORD *)(v7 + 8);
  }
  else
  {
LABEL_5:
    v8 = 0;
    v9 = 0;
  }
  result = sub_22EDA157C(a1, v8, v9);
  if ((_DWORD)result)
  {
    v11 = *(_QWORD *)(a2 + 56);
    if ((v11 & 4) != 0)
    {
      v12 = *(unint64_t **)((v11 & 0xFFFFFFFFFFFFFFF8) + 32);
      if (v12)
      {
LABEL_12:
        v15 = *v12;
        v14 = (uint64_t)(v12 + 1);
        v13 = v15;
        return *(_BYTE *)(a1 + 4) && v13 && (*(_BYTE *)(*(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0
            || (sub_22EDA16E8(a1, v13, v14) & 1) != 0;
      }
    }
    else if (v11 >= 8)
    {
      v12 = (unint64_t *)(v11 & 0xFFFFFFFFFFFFFFF8);
      goto LABEL_12;
    }
    result = sub_22ED91030(a1, *(_QWORD *)(a2 + 48));
    if (!(_DWORD)result)
      return result;
    return 1;
  }
  return result;
}

uint64_t sub_22EDA2BBC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  _BOOL4 v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;

  v5 = *(_QWORD *)(a2 + 56);
  if ((v5 & 4) != 0)
  {
    v6 = 0;
    while (1)
    {
      v7 = v5 & 0xFFFFFFFFFFFFFFF8;
      if (v6 >= *(unsigned int *)(v7 + 16))
        break;
      sub_22EDA292C(a1, *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v6++), a3);
      v5 = *(_QWORD *)(a2 + 56);
      if ((v5 & 4) == 0)
        goto LABEL_5;
    }
    v8 = *(_QWORD *)v7;
    v9 = *(_QWORD *)(v7 + 8);
  }
  else
  {
LABEL_5:
    v8 = 0;
    v9 = 0;
  }
  result = sub_22EDA157C(a1, v8, v9);
  if ((_DWORD)result)
  {
    v11 = *(_DWORD *)(a2 + 24);
    v12 = *(_QWORD *)(a2 + 152);
    v48 = *(_QWORD *)(a2 + 40);
    v49 = v11;
    v50 = v12;
    result = sub_22EDA1614(a1, &v48);
    if ((_DWORD)result)
    {
      v13 = *(_QWORD *)(a2 + 144) & 0xFFFFFFFFFFFFFFF8;
      if ((*(_QWORD *)(a2 + 144) & 6) == 4 && v13 != 0 && (*(_BYTE *)(v13 + 16) & 6) != 0)
      {
        v15 = *(_QWORD *)(v13 + 32);
        if (v15)
        {
          v16 = *(unsigned int *)(v15 + 8);
          if ((_DWORD)v16)
          {
            v17 = v15 + 16;
            while ((sub_22EDA1FB0(a1, v17) & 1) != 0)
            {
              v17 += 32;
              if (!--v16)
                goto LABEL_19;
            }
            return 0;
          }
        }
      }
LABEL_19:
      v18 = *(_QWORD *)(a2 + 56);
      v19 = v18 & 4;
      v20 = (unint64_t *)(v18 & 0xFFFFFFFFFFFFFFF8);
      if ((v18 & 4) != 0)
        v20 = (unint64_t *)v20[4];
      if (v20)
      {
        v23 = *v20;
        v22 = (uint64_t)(v20 + 1);
        v21 = v23;
        if (!*(_BYTE *)(a1 + 4) || !v21 || (*(_BYTE *)(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
        {
          result = sub_22EDA16E8(a1, v21, v22);
          if (!(_DWORD)result)
            return result;
          v18 = *(_QWORD *)(a2 + 56);
          v19 = v18 & 4;
        }
      }
      if (!v19
        || (v24 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 40)) == 0
        || (result = sub_22ED9153C(a1, v24, 0), (_DWORD)result))
      {
        if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x37)
        {
          v25 = sub_22EFD7ED0(a2);
          v26 = sub_22EFD7ED0(a2) + 8 * ((*(_QWORD *)(a2 + 80) >> 40) & 0x1FFFFFLL);
          while (v25 != v26)
          {
            v27 = *(_QWORD *)v25;
            if ((*(_WORD *)(*(_QWORD *)v25 + 28) & 4) != 0)
            {
              v28 = (unint64_t *)(*(_QWORD *)v27 & 0xFFFFFFFFFFFFFFF8);
              if ((*(_QWORD *)v27 & 6) != 0 || v28 == 0)
                goto LABEL_45;
              v32 = *v28;
              v31 = (uint64_t)(v28 + 1);
              v30 = v32;
              v33 = !*(_BYTE *)(a1 + 4) || v30 == 0;
              if (!v33 && (*(_BYTE *)(*(_QWORD *)(v30 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0)
                goto LABEL_45;
              result = sub_22EDA16E8(a1, v30, v31);
              if (!(_DWORD)result)
                return result;
              if ((*(_WORD *)(v27 + 28) & 4) != 0)
              {
LABEL_45:
                result = sub_22ED9153C(a1, *(_QWORD *)(v27 + 8), 0);
                if (!(_DWORD)result)
                  return result;
              }
            }
            v25 += 8;
          }
        }
        v34 = sub_22E49F868(a2) && (*(_BYTE *)(a2 + 83) & 2) == 0;
        if ((*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 < 0xFFFFFFFC)
          goto LABEL_78;
        v35 = *(_WORD *)(a2 + 80) & 0x7F;
        v36 = -40;
        if (v35 > 0x46)
        {
          if (v35 == 83)
            goto LABEL_68;
          if (v35 == 71)
          {
            v36 = -56;
            goto LABEL_68;
          }
          if (v35 != 81)
          {
LABEL_63:
            v37 = v35 - 52;
            v38 = v35 - 33 >= 5;
            v39 = -48;
            if (!v38)
              v39 = -64;
            if (v37 >= 6)
              v36 = v39;
            else
              v36 = -72;
          }
        }
        else
        {
          if (v35 > 0x18)
            goto LABEL_62;
          if (v35 == 16)
          {
LABEL_54:
            v36 = -48;
            goto LABEL_68;
          }
          if (((1 << v35) & 0x1066) == 0)
          {
            if (v35 == 24)
              goto LABEL_54;
LABEL_62:
            if (v35 == 70)
            {
              v36 = -64;
              goto LABEL_68;
            }
            goto LABEL_63;
          }
        }
LABEL_68:
        v40 = *(_QWORD *)(a2 + 72 + v36 + 16);
        v41 = (_QWORD *)(v40 & 0xFFFFFFFFFFFFFFF8);
        if ((v40 & 4) != 0)
          v41 = (_QWORD *)*v41;
        if (v41)
        {
          v42 = v41[8];
          if (v42)
          {
            if (((*(unsigned __int16 *)(v42 + 8) | (*(unsigned __int8 *)(v42 + 10) << 16)) & 0x100000) != 0)
            {
              v43 = sub_22EFD462C((unint64_t)(v41 - 8));
              if (v43)
              {
                if ((*(_DWORD *)(v43 + 28) & 0x7F) != 0x1D || (v43 = *(_QWORD *)(v43 + 48)) != 0)
                {
                  if (v43 == a2
                    || (v44 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v43 + 32))(v43),
                        v44 == (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2)))
                  {
                    if (!v34)
                      return 1;
LABEL_79:
                    v45 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
                    result = sub_22ED9153C(a1, v45, 0);
                    if (!(_DWORD)result)
                      return result;
                    if ((*(_WORD *)(a2 + 80) & 0x80) != 0)
                      sub_22EFCC320(a2 + 72);
                    v47 = *(_QWORD *)(a2 + 88);
                    if (v47)
                    {
                      do
                      {
                        if ((*(_DWORD *)(v47 + 28) & 0x7E) == 0x2E)
                        {
                          result = sub_22ED9D24C(a1, v47, v46);
                          if (!(_DWORD)result)
                            break;
                        }
                        result = 1;
                        v47 = *(_QWORD *)(v47 + 8) & 0xFFFFFFFFFFFFFFF8;
                      }
                      while (v47);
                      return result;
                    }
                    return 1;
                  }
                }
              }
            }
          }
        }
LABEL_78:
        if (!v34)
          return 1;
        goto LABEL_79;
      }
    }
  }
  return result;
}

uint64_t sub_22EDA2FC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  unint64_t v6;

  result = sub_22EDA2AD4(a1, a2, a3);
  if ((_DWORD)result)
  {
    if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x40)
      return 1;
    if ((*(_BYTE *)(a2 + 97) & 8) != 0)
      return 1;
    v6 = sub_22EFBC5B4(a2);
    result = sub_22ED9153C(a1, v6, 0);
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

uint64_t sub_22EDA3020(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *mm;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *i2;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *n;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *ii;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *nn;
  uint64_t v79;
  uint64_t v80;
  _QWORD *i1;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *i;
  uint64_t v92;
  uint64_t v93;
  _QWORD *j;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *jj;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *kk;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *k;
  uint64_t v175;
  uint64_t v176;
  _QWORD *m;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  __int128 v208;
  uint64_t v209;

  if (!a2)
    return 1;
  switch(*(_DWORD *)(a2 + 8))
  {
    case 3:
      v85 = (_QWORD *)(a2 + 24);
      result = sub_22ED9153C(a1, *(_QWORD *)(a2 + 24 + 8 * *(unsigned int *)(a2 + 16)), 0);
      if ((_DWORD)result)
      {
        v86 = *(unsigned int *)(a2 + 16);
        if (!(_DWORD)v86)
          return 1;
        v87 = 8 * v86;
        do
        {
          if ((sub_22ED9153C(a1, *v85, 0) & 1) == 0)
            return 0;
          ++v85;
          v87 -= 8;
        }
        while (v87);
        return 1;
      }
      return result;
    case 4:
    case 7:
    case 0xC:
    case 0x13:
    case 0x15:
    case 0x23:
    case 0x3C:
    case 0x3D:
    case 0x46:
    case 0x4B:
      v5 = *(_QWORD *)(a2 + 16);
      return (sub_22ED9153C(a1, v5, 0) & 1) != 0;
    case 5:
      v137 = (_QWORD *)(a2 + 24);
      result = sub_22ED9153C(a1, *(_QWORD *)(a2 + 24 + 8 * *(unsigned int *)(a2 + 16)), 0);
      if (!(_DWORD)result)
        return result;
      v138 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v138)
        return 1;
      v139 = 8 * v138;
      while ((sub_22ED9153C(a1, *v137, 0) & 1) != 0)
      {
        ++v137;
        v139 -= 8;
        if (!v139)
          return 1;
      }
      return 0;
    case 6:
      result = sub_22ED9153C(a1, *(_QWORD *)(a2 + 24), 0);
      if (!(_DWORD)result)
        return result;
      v134 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v134)
        return 1;
      v135 = (_QWORD *)(a2 + 40);
      v136 = 8 * v134;
      while ((sub_22ED9153C(a1, *v135, 0) & 1) != 0)
      {
        ++v135;
        v136 -= 8;
        if (!v136)
          return 1;
      }
      return 0;
    case 0xE:
      v88 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v88)
        return 1;
      v89 = a2 + 24;
      v90 = 8 * v88;
      for (i = (_QWORD *)(a2 + 24); (sub_22ED9153C(a1, *i, 0) & 1) != 0; ++i)
      {
        v90 -= 8;
        if (!v90)
        {
          v92 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v92)
            return 1;
          v93 = 8 * v92;
          for (j = (_QWORD *)(v89 + 8 * v92); (sub_22ED9153C(a1, *j, 0) & 1) != 0; ++j)
          {
            v93 -= 8;
            if (!v93)
            {
              v95 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v95)
                return 1;
              v96 = (_QWORD *)(v89 + 8 * v95 + 8 * v95);
              v97 = 8 * v95;
              while ((sub_22ED9153C(a1, *v96, 0) & 1) != 0)
              {
                ++v96;
                v97 -= 8;
                if (!v97)
                {
                  v98 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v98)
                    return 1;
                  v99 = (_QWORD *)(v89 + 8 * v98 + 8 * v98 + 8 * v98);
                  v100 = 8 * v98;
                  while ((sub_22ED9153C(a1, *v99, 0) & 1) != 0)
                  {
                    ++v99;
                    v100 -= 8;
                    if (!v100)
                      return 1;
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0xF:
      v171 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v171)
        return 1;
      v172 = a2 + 24;
      v173 = 8 * v171;
      for (k = (_QWORD *)(a2 + 24); (sub_22ED9153C(a1, *k, 0) & 1) != 0; ++k)
      {
        v173 -= 8;
        if (!v173)
        {
          v175 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v175)
            return 1;
          v176 = 8 * v175;
          for (m = (_QWORD *)(v172 + 8 * v175); (sub_22ED9153C(a1, *m, 0) & 1) != 0; ++m)
          {
            v176 -= 8;
            if (!v176)
            {
              v178 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v178)
                return 1;
              v179 = (_QWORD *)(v172 + 8 * v178 + 8 * v178);
              v180 = 8 * v178;
              while ((sub_22ED9153C(a1, *v179, 0) & 1) != 0)
              {
                ++v179;
                v180 -= 8;
                if (!v180)
                {
                  v181 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v181)
                    return 1;
                  v182 = (_QWORD *)(v172 + 8 * v181 + 8 * v181 + 8 * v181);
                  v183 = 8 * v181;
                  while ((sub_22ED9153C(a1, *v182, 0) & 1) != 0)
                  {
                    ++v182;
                    v183 -= 8;
                    if (!v183)
                      return 1;
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x12:
      v184 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v184)
        return 1;
      v185 = (_QWORD *)(a2 + 40);
      v186 = 8 * v184;
      while ((sub_22ED9153C(a1, *v185, 0) & 1) != 0)
      {
        ++v185;
        v186 -= 8;
        if (!v186)
          return 1;
      }
      return 0;
    case 0x14:
    case 0x58:
      v5 = *(_QWORD *)(a2 + 24);
      return (sub_22ED9153C(a1, v5, 0) & 1) != 0;
    case 0x16:
      result = sub_22ED9153C(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 40);
      return (sub_22ED9153C(a1, v5, 0) & 1) != 0;
    case 0x18:
      result = sub_22ED9153C(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 48);
      return (sub_22ED9153C(a1, v5, 0) & 1) != 0;
    case 0x1A:
      v193 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v193)
        return 1;
      v194 = (_QWORD *)(a2 + 24);
      v195 = 8 * v193;
      while ((sub_22ED9153C(a1, *v194, 0) & 1) != 0)
      {
        ++v194;
        v195 -= 8;
        if (!v195)
          return 1;
      }
      return 0;
    case 0x1B:
    case 0x1C:
    case 0x21:
    case 0x24:
    case 0x34:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3E:
    case 0x4E:
      result = sub_22ED9153C(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 32);
      return (sub_22ED9153C(a1, v5, 0) & 1) != 0;
    case 0x1D:
      v40 = a2 + 40;
      v41 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v41)
        goto LABEL_72;
      v42 = 8 * v41;
      v43 = (_QWORD *)(a2 + 40);
      while ((sub_22ED9153C(a1, *v43, 0) & 1) != 0)
      {
        ++v43;
        v42 -= 8;
        if (!v42)
        {
LABEL_72:
          result = sub_22ED9153C(a1, *(_QWORD *)(a2 + 24), 0);
          if (!(_DWORD)result)
            return result;
          v44 = *(unsigned int *)(a2 + 16);
          if ((_DWORD)v44)
          {
            v45 = 8 * v44;
            for (n = (_QWORD *)(v40 + 8 * v44); (sub_22ED9153C(a1, *n, 0) & 1) != 0; ++n)
            {
              v45 -= 8;
              if (!v45)
              {
                v47 = *(unsigned int *)(a2 + 16);
                if (!(_DWORD)v47)
                  return 1;
                v48 = (_QWORD *)(v40 + 8 * v47 + 8 * v47);
                v49 = 8 * v47;
                while ((sub_22ED9153C(a1, *v48, 0) & 1) != 0)
                {
                  ++v48;
                  v49 -= 8;
                  if (!v49)
                    return 1;
                }
                return 0;
              }
            }
            return 0;
          }
          return 1;
        }
      }
      return 0;
    case 0x1E:
      v82 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v82)
        return 1;
      v83 = (_QWORD *)(a2 + 24);
      v84 = 8 * v82;
      while ((sub_22ED9153C(a1, *v83, 0) & 1) != 0)
      {
        ++v83;
        v84 -= 8;
        if (!v84)
          return 1;
      }
      return 0;
    case 0x1F:
      v187 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v187)
        return 1;
      v188 = (_QWORD *)(a2 + 104);
      v189 = 8 * v187;
      while ((sub_22ED9153C(a1, *v188, 0) & 1) != 0)
      {
        ++v188;
        v189 -= 8;
        if (!v189)
          return 1;
      }
      return 0;
    case 0x22:
      v199 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v199)
        return 1;
      v200 = (_QWORD *)(a2 + 80);
      v201 = 8 * v199;
      while ((sub_22ED9153C(a1, *v200, 0) & 1) != 0)
      {
        ++v200;
        v201 -= 8;
        if (!v201)
          return 1;
      }
      return 0;
    case 0x25:
      if (!sub_22EDA157C(a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64)))
        return 0;
      v208 = *(_OWORD *)(a2 + 72);
      v209 = *(_QWORD *)(a2 + 88);
      if (!sub_22EDA1614(a1, (uint64_t *)&v208))
        return 0;
      v56 = a2 + 96;
      v57 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v57)
        goto LABEL_98;
      v58 = 8 * v57;
      v59 = (_QWORD *)(a2 + 96);
      while ((sub_22ED9153C(a1, *v59, 0) & 1) != 0)
      {
        ++v59;
        v58 -= 8;
        if (!v58)
        {
LABEL_98:
          if (sub_22ED9153C(a1, *(_QWORD *)(a2 + 24), 0)
            && sub_22ED9153C(a1, *(_QWORD *)(a2 + 40), 0))
          {
            v60 = *(unsigned int *)(a2 + 16);
            if (!(_DWORD)v60)
              return 1;
            v61 = 8 * v60;
            for (ii = (_QWORD *)(v56 + 8 * v60); (sub_22ED9153C(a1, *ii, 0) & 1) != 0; ++ii)
            {
              v61 -= 8;
              if (!v61)
              {
                v63 = *(unsigned int *)(a2 + 16);
                if (!(_DWORD)v63)
                  return 1;
                v64 = (_QWORD *)(v56 + 8 * v63 + 8 * v63);
                v65 = 8 * v63;
                while ((sub_22ED9153C(a1, *v64, 0) & 1) != 0)
                {
                  ++v64;
                  v65 -= 8;
                  if (!v65)
                  {
                    v66 = *(unsigned int *)(a2 + 16);
                    if (!(_DWORD)v66)
                      return 1;
                    v67 = (_QWORD *)(v56 + 8 * v66 + 8 * v66 + 8 * v66);
                    v68 = 8 * v66;
                    while ((sub_22ED9153C(a1, *v67, 0) & 1) != 0)
                    {
                      ++v67;
                      v68 -= 8;
                      if (!v68)
                      {
                        v69 = *(unsigned int *)(a2 + 16);
                        if (!(_DWORD)v69)
                          return 1;
                        v70 = (_QWORD *)(v56 + 8 * v69 + 8 * v69 + 8 * v69 + 8 * v69);
                        v71 = 8 * v69;
                        while ((sub_22ED9153C(a1, *v70, 0) & 1) != 0)
                        {
                          ++v70;
                          v71 -= 8;
                          if (!v71)
                          {
                            v72 = *(unsigned int *)(a2 + 16);
                            if (!(_DWORD)v72)
                              return 1;
                            v73 = (_QWORD *)(v56 + 8 * v72 + 8 * v72 + 8 * v72 + 8 * v72 + 8 * v72);
                            v74 = 8 * v72;
                            while ((sub_22ED9153C(a1, *v73, 0) & 1) != 0)
                            {
                              ++v73;
                              v74 -= 8;
                              if (!v74)
                                return 1;
                            }
                            return 0;
                          }
                        }
                        return 0;
                      }
                    }
                    return 0;
                  }
                }
                return 0;
              }
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x27:
      v168 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v168)
        return 1;
      v169 = (_QWORD *)(a2 + 24);
      v170 = 8 * v168;
      while ((sub_22ED9153C(a1, *v169, 0) & 1) != 0)
      {
        ++v169;
        v170 -= 8;
        if (!v170)
          return 1;
      }
      return 0;
    case 0x29:
      v53 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v53)
        return 1;
      v54 = (_QWORD *)(a2 + 32);
      v55 = 8 * v53;
      while ((sub_22ED9153C(a1, *v54, 0) & 1) != 0)
      {
        ++v54;
        v55 -= 8;
        if (!v55)
          return 1;
      }
      return 0;
    case 0x2A:
      v50 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v50)
        return 1;
      v51 = (_QWORD *)(a2 + 80);
      v52 = 8 * v50;
      while ((sub_22ED9153C(a1, *v51, 0) & 1) != 0)
      {
        ++v51;
        v52 -= 8;
        if (!v52)
          return 1;
      }
      return 0;
    case 0x2B:
      v101 = a2 + 64;
      v102 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v102)
        goto LABEL_164;
      v103 = 8 * v102;
      v104 = (_QWORD *)(a2 + 64);
      while ((sub_22ED9153C(a1, *v104, 0) & 1) != 0)
      {
        ++v104;
        v103 -= 8;
        if (!v103)
        {
LABEL_164:
          result = sub_22ED9153C(a1, *(_QWORD *)(a2 + 24), 0);
          if (!(_DWORD)result)
            return result;
          result = sub_22ED9153C(a1, *(_QWORD *)(a2 + 40), 0);
          if (!(_DWORD)result)
            return result;
          v105 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v105)
            return 1;
          v106 = 8 * v105;
          for (jj = (_QWORD *)(v101 + 8 * v105); (sub_22ED9153C(a1, *jj, 0) & 1) != 0; ++jj)
          {
            v106 -= 8;
            if (!v106)
            {
              v108 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v108)
                return 1;
              v109 = (_QWORD *)(v101 + 8 * v108 + 8 * v108);
              v110 = 8 * v108;
              while ((sub_22ED9153C(a1, *v109, 0) & 1) != 0)
              {
                ++v109;
                v110 -= 8;
                if (!v110)
                {
                  v111 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v111)
                    return 1;
                  v112 = (_QWORD *)(v101 + 8 * v111 + 8 * v111 + 8 * v111);
                  v113 = 8 * v111;
                  while ((sub_22ED9153C(a1, *v112, 0) & 1) != 0)
                  {
                    ++v112;
                    v113 -= 8;
                    if (!v113)
                    {
                      v114 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v114)
                        return 1;
                      v115 = (_QWORD *)(v101 + 8 * v114 + 8 * v114 + 8 * v114 + 8 * v114);
                      v116 = 8 * v114;
                      while ((sub_22ED9153C(a1, *v115, 0) & 1) != 0)
                      {
                        ++v115;
                        v116 -= 8;
                        if (!v116)
                          return 1;
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x2C:
      v117 = a2 + 64;
      v118 = *(unsigned int *)(a2 + 16);
      result = sub_22ED9153C(a1, *(_QWORD *)(a2 + 64 + 8 * v118 + 8 * v118 + 8 * v118 + 8 * v118 + 8 * v118), 0);
      if (!(_DWORD)result)
        return result;
      result = sub_22ED9153C(a1, *(_QWORD *)(v117+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8), 0);
      if (!(_DWORD)result)
        return result;
      v119 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v119)
        goto LABEL_191;
      v120 = 8 * v119;
      v121 = (_QWORD *)(a2 + 64);
      while ((sub_22ED9153C(a1, *v121, 0) & 1) != 0)
      {
        ++v121;
        v120 -= 8;
        if (!v120)
        {
LABEL_191:
          result = sub_22ED9153C(a1, *(_QWORD *)(a2 + 24), 0);
          if (!(_DWORD)result)
            return result;
          result = sub_22ED9153C(a1, *(_QWORD *)(a2 + 40), 0);
          if (!(_DWORD)result)
            return result;
          v122 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v122)
            return 1;
          v123 = 8 * v122;
          for (kk = (_QWORD *)(v117 + 8 * v122); (sub_22ED9153C(a1, *kk, 0) & 1) != 0; ++kk)
          {
            v123 -= 8;
            if (!v123)
            {
              v125 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v125)
                return 1;
              v126 = (_QWORD *)(v117 + 8 * v125 + 8 * v125);
              v127 = 8 * v125;
              while ((sub_22ED9153C(a1, *v126, 0) & 1) != 0)
              {
                ++v126;
                v127 -= 8;
                if (!v127)
                {
                  v128 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v128)
                    return 1;
                  v129 = (_QWORD *)(v117 + 8 * v128 + 8 * v128 + 8 * v128);
                  v130 = 8 * v128;
                  while ((sub_22ED9153C(a1, *v129, 0) & 1) != 0)
                  {
                    ++v129;
                    v130 -= 8;
                    if (!v130)
                    {
                      v131 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v131)
                        return 1;
                      v132 = (_QWORD *)(v117 + 8 * v131 + 8 * v131 + 8 * v131 + 8 * v131);
                      v133 = 8 * v131;
                      while ((sub_22ED9153C(a1, *v132, 0) & 1) != 0)
                      {
                        ++v132;
                        v133 -= 8;
                        if (!v133)
                          return 1;
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x2E:
      v190 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v190)
        return 1;
      v191 = (_QWORD *)(a2 + 136);
      v192 = 8 * v190;
      while ((sub_22ED9153C(a1, *v191, 0) & 1) != 0)
      {
        ++v191;
        v192 -= 8;
        if (!v192)
          return 1;
      }
      return 0;
    case 0x35:
      v6 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v6)
        return 1;
      v7 = a2 + 24;
      v8 = 8 * v6;
      for (mm = (_QWORD *)(a2 + 24); (sub_22ED9153C(a1, *mm, 0) & 1) != 0; ++mm)
      {
        v8 -= 8;
        if (!v8)
        {
          v10 = *(unsigned int *)(a2 + 16);
          v11 = (uint64_t *)(v7 + 8 * v10);
          v208 = (unint64_t)v11;
          if ((_DWORD)v10)
          {
            v12 = 0;
            v13 = &v11[v10];
            while (1)
            {
              if ((v12 & 3) != 0)
              {
                if ((v12 & 0xFFFFFFFFFFFFFFFCLL) != 0)
                  v14 = (_QWORD *)((v12 & 0xFFFFFFFFFFFFFFFCLL) + 40);
                else
                  v14 = (_QWORD *)sub_22F3AC1A8(*v11);
                if ((sub_22ED9153C(a1, *v14, 0) & 1) == 0)
                  return 0;
                if (v12 < 4)
                  sub_22F3F2FE0((uint64_t)&v208, 1);
                else
                  sub_22F0D8720((uint64_t)&v208);
              }
              else
              {
                if (!sub_22ED9153C(a1, *v11, 0))
                  return 0;
                *(_QWORD *)&v208 = v11 + 1;
              }
              v12 = *((_QWORD *)&v208 + 1);
              v11 = (uint64_t *)v208;
              if ((uint64_t *)v208 == v13 && *((_QWORD *)&v208 + 1) == 0)
                return 1;
            }
          }
          return 1;
        }
      }
      return 0;
    case 0x3F:
      v75 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v75)
        return 1;
      v76 = a2 + 24;
      v77 = 8 * v75;
      for (nn = (_QWORD *)(a2 + 24); (sub_22ED9153C(a1, *nn, 0) & 1) != 0; ++nn)
      {
        v77 -= 8;
        if (!v77)
        {
          v79 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v79)
            return 1;
          v80 = 8 * v79;
          for (i1 = (_QWORD *)(v76 + 8 * v79); (sub_22ED9153C(a1, *i1, 0) & 1) != 0; ++i1)
          {
            v80 -= 8;
            if (!v80)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 0x42:
      if (!sub_22EDA157C(a1, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72)))
        return 0;
      v208 = *(_OWORD *)(a2 + 80);
      v209 = *(_QWORD *)(a2 + 96);
      if (!sub_22EDA1614(a1, (uint64_t *)&v208))
        return 0;
      v140 = a2 + 104;
      v141 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v141)
        goto LABEL_228;
      v142 = 8 * v141;
      v143 = (_QWORD *)(a2 + 104);
      while ((sub_22ED9153C(a1, *v143, 0) & 1) != 0)
      {
        ++v143;
        v142 -= 8;
        if (!v142)
        {
LABEL_228:
          if (sub_22ED9153C(a1, *(_QWORD *)(a2 + 24), 0)
            && sub_22ED9153C(a1, *(_QWORD *)(a2 + 40), 0))
          {
            v144 = *(unsigned int *)(a2 + 16);
            if ((_DWORD)v144)
            {
              v145 = 8 * v144;
              v146 = (_QWORD *)(v140 + 8 * v144);
              while ((sub_22ED9153C(a1, *v146, 0) & 1) != 0)
              {
                ++v146;
                v145 -= 8;
                if (!v145)
                {
                  v147 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v147)
                    goto LABEL_246;
                  v148 = (_QWORD *)(v140 + 8 * v147 + 8 * v147);
                  v149 = 8 * v147;
                  while ((sub_22ED9153C(a1, *v148, 0) & 1) != 0)
                  {
                    ++v148;
                    v149 -= 8;
                    if (!v149)
                    {
                      v150 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v150)
                        goto LABEL_246;
                      v151 = (_QWORD *)(v140 + 8 * v150 + 8 * v150 + 8 * v150);
                      v152 = 8 * v150;
                      while ((sub_22ED9153C(a1, *v151, 0) & 1) != 0)
                      {
                        ++v151;
                        v152 -= 8;
                        if (!v152)
                        {
                          v153 = *(unsigned int *)(a2 + 16);
                          if (!(_DWORD)v153)
                            goto LABEL_246;
                          v154 = (_QWORD *)(v140 + 8 * v153 + 8 * v153 + 8 * v153 + 8 * v153);
                          v155 = 8 * v153;
                          while ((sub_22ED9153C(a1, *v154, 0) & 1) != 0)
                          {
                            ++v154;
                            v155 -= 8;
                            if (!v155)
                              goto LABEL_246;
                          }
                          return 0;
                        }
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
            }
            else
            {
LABEL_246:
              if (*(_DWORD *)(a2 + 48) != 1)
                return 1;
              v156 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v156)
                return 1;
              v157 = (_QWORD *)(v140 + 8 * v156 + 8 * v156 + 8 * v156 + 8 * v156 + 8 * v156);
              v158 = 8 * v156;
              while ((sub_22ED9153C(a1, *v157, 0) & 1) != 0)
              {
                ++v157;
                v158 -= 8;
                if (!v158)
                {
                  v159 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v159)
                    return 1;
                  v160 = (_QWORD *)(v140 + 8 * v159 + 8 * v159 + 8 * v159 + 8 * v159 + 8 * v159 + 8 * v159);
                  v161 = 8 * v159;
                  while ((sub_22ED9153C(a1, *v160, 0) & 1) != 0)
                  {
                    ++v160;
                    v161 -= 8;
                    if (!v161)
                    {
                      v162 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v162)
                        return 1;
                      v163 = (_QWORD *)(v140 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162);
                      v164 = 8 * v162;
                      while ((sub_22ED9153C(a1, *v163, 0) & 1) != 0)
                      {
                        ++v163;
                        v164 -= 8;
                        if (!v164)
                          return 1;
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x47:
      result = sub_22ED9153C(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 64);
      return (sub_22ED9153C(a1, v5, 0) & 1) != 0;
    case 0x49:
      v202 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v202)
        return 1;
      v203 = (_QWORD *)(a2 + 24);
      v204 = 8 * v202;
      while ((sub_22ED9153C(a1, *v203, 0) & 1) != 0)
      {
        ++v203;
        v204 -= 8;
        if (!v204)
          return 1;
      }
      return 0;
    case 0x4C:
      v165 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v165)
        return 1;
      v166 = (_QWORD *)(a2 + 24);
      v167 = 8 * v165;
      while ((sub_22ED9153C(a1, *v166, 0) & 1) != 0)
      {
        ++v166;
        v167 -= 8;
        if (!v167)
          return 1;
      }
      return 0;
    case 0x4D:
      if (!sub_22EDA157C(a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64)))
        return 0;
      v208 = *(_OWORD *)(a2 + 72);
      v209 = *(_QWORD *)(a2 + 88);
      if (!sub_22EDA1614(a1, (uint64_t *)&v208))
        return 0;
      v24 = a2 + 96;
      v25 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v25)
        goto LABEL_49;
      v26 = 8 * v25;
      v27 = (_QWORD *)(a2 + 96);
      while ((sub_22ED9153C(a1, *v27, 0) & 1) != 0)
      {
        ++v27;
        v26 -= 8;
        if (!v26)
        {
LABEL_49:
          if (sub_22ED9153C(a1, *(_QWORD *)(a2 + 24), 0)
            && sub_22ED9153C(a1, *(_QWORD *)(a2 + 40), 0))
          {
            v28 = *(unsigned int *)(a2 + 16);
            if (!(_DWORD)v28)
              return 1;
            v29 = 8 * v28;
            for (i2 = (_QWORD *)(v24 + 8 * v28); (sub_22ED9153C(a1, *i2, 0) & 1) != 0; ++i2)
            {
              v29 -= 8;
              if (!v29)
              {
                v31 = *(unsigned int *)(a2 + 16);
                if (!(_DWORD)v31)
                  return 1;
                v32 = (_QWORD *)(v24 + 8 * v31 + 8 * v31);
                v33 = 8 * v31;
                while ((sub_22ED9153C(a1, *v32, 0) & 1) != 0)
                {
                  ++v32;
                  v33 -= 8;
                  if (!v33)
                  {
                    v34 = *(unsigned int *)(a2 + 16);
                    if (!(_DWORD)v34)
                      return 1;
                    v35 = (_QWORD *)(v24 + 8 * v34 + 8 * v34 + 8 * v34);
                    v36 = 8 * v34;
                    while ((sub_22ED9153C(a1, *v35, 0) & 1) != 0)
                    {
                      ++v35;
                      v36 -= 8;
                      if (!v36)
                      {
                        v37 = *(unsigned int *)(a2 + 16);
                        if (!(_DWORD)v37)
                          return 1;
                        v38 = (_QWORD *)(v24 + 8 * v37 + 8 * v37 + 8 * v37 + 8 * v37);
                        v39 = 8 * v37;
                        while ((sub_22ED9153C(a1, *v38, 0) & 1) != 0)
                        {
                          ++v38;
                          v39 -= 8;
                          if (!v39)
                            return 1;
                        }
                        return 0;
                      }
                    }
                    return 0;
                  }
                }
                return 0;
              }
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x51:
      v16 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v16)
        return 1;
      v17 = (_QWORD *)(a2 + 104);
      v18 = 8 * v16;
      while ((sub_22ED9153C(a1, *v17, 0) & 1) != 0)
      {
        ++v17;
        v18 -= 8;
        if (!v18)
          return 1;
      }
      return 0;
    case 0x59:
      v205 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v205)
        return 1;
      v206 = (_QWORD *)(a2 + 80);
      v207 = 8 * v205;
      while ((sub_22ED9153C(a1, *v206, 0) & 1) != 0)
      {
        ++v206;
        v207 -= 8;
        if (!v207)
          return 1;
      }
      return 0;
    case 0x5A:
      v196 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v196)
        return 1;
      v197 = (_QWORD *)(a2 + 80);
      v198 = 8 * v196;
      while ((sub_22ED9153C(a1, *v197, 0) & 1) != 0)
      {
        ++v197;
        v198 -= 8;
        if (!v198)
          return 1;
      }
      return 0;
    case 0x5B:
      v19 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v19)
        return 1;
      v20 = 0;
      v21 = a2 + 24;
      v22 = 2 * v19;
      break;
    default:
      return 1;
  }
  while (1)
  {
    v23 = *(_QWORD *)(v21 + 8 * (v20 + 1));
    result = sub_22ED9153C(a1, *(_QWORD *)(v21 + 8 * v20), 0);
    if (!(_DWORD)result)
      break;
    if ((sub_22ED9153C(a1, v23, 0) & 1) == 0)
      return 0;
    v20 += 2;
    if (v22 == v20)
      return 1;
  }
  return result;
}

uint64_t sub_22EDA40D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v9;
  _QWORD *v10;
  uint64_t result;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;

  if (!a2)
    return 1;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4 == v3)
    v5 = 0;
  else
    v5 = *(uint64_t **)(a2 + 24);
  if (v4 == v3)
    v6 = 0;
  else
    v6 = *(uint64_t **)(a2 + 16);
  v14 = 0;
  v15 = 0;
  v13 = v6;
  if (v6 == v5)
    return 1;
  v9 = 0;
  while (1)
  {
    if ((v9 & 3) == 0)
    {
      result = sub_22ED9153C(a1, *v6, a3);
      if (!(_DWORD)result)
        return result;
      v13 = v6 + 1;
      goto LABEL_18;
    }
    v10 = (_QWORD *)((v9 & 0xFFFFFFFFFFFFFFFCLL) != 0 ? (v9 & 0xFFFFFFFFFFFFFFFCLL) + 40 : sub_22F3AC1A8(*v6));
    if ((sub_22ED9153C(a1, *v10, a3) & 1) == 0)
      return 0;
    if (v9 < 4)
      sub_22F3F2FE0((uint64_t)&v13, 1);
    else
      sub_22F0D8720((uint64_t)&v13);
LABEL_18:
    v6 = v13;
    v9 = v14;
    if (v13 == v5 && v14 == 0)
      return 1;
  }
}

void sub_22EDA41CC()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22EDA41E0(uint64_t a1, unsigned __int8 *a2, llvm::raw_ostream *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int *v9;
  const void *v10;
  size_t v11;
  unsigned int v12;
  void *v13;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;

  if (*a2 != 161 || (a2[2] & 4) == 0 || !*((_QWORD *)a2 + 4))
    return 0;
  v5 = a1 + 8;
  sub_22F0AAD88(*((_QWORD *)a2 + 4), a3, (__int128 *)(a1 + 8), 1);
  v6 = *((_QWORD *)a2 + 2);
  v7 = *(_QWORD *)(v6 + 40) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_QWORD *)(v6 + 40) & 7) == 0 && v7 != 0)
  {
    v9 = *(unsigned int **)(v7 + 16);
    v12 = *v9;
    v10 = v9 + 4;
    v11 = v12;
    v13 = (void *)*((_QWORD *)a3 + 4);
    if ((unint64_t)v12 <= *((_QWORD *)a3 + 3) - (_QWORD)v13)
    {
      if (v11)
      {
        memcpy(v13, v10, v11);
        *((_QWORD *)a3 + 4) += v11;
      }
    }
    else
    {
      llvm::raw_ostream::write(a3, (const char *)v10);
    }
  }
  if ((*(_DWORD *)(v6 + 28) & 0x7Fu) - 67 >= 0xFFFFFFFE)
  {
    v15 = *(_QWORD *)(v6 + 128);
    v16 = *(_QWORD *)v15;
    v17 = *(unsigned int *)(v15 + 8);
    v18 = *(_QWORD *)(v6 + 112);
    v19 = (uint64_t *)(v18 & 0xFFFFFFFFFFFFFFF8);
    if ((v18 & 4) != 0 && v19)
    {
      do
      {
        v20 = *(_QWORD *)(*v19 + 112);
        v19 = (uint64_t *)(v20 & 0xFFFFFFFFFFFFFFF8);
      }
      while ((v20 & 4) != 0 && v19);
    }
    sub_22F117B8C(a3, v16, v17, v5, v19[7], 0, 0);
  }
  return 1;
}

void sub_22EDA4304()
{
  JUMPOUT(0x2348A0E9CLL);
}

unint64_t sub_22EDA4318(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  uint64_t v4;
  int v5;

  result = sub_22F2E6D78(a2);
  if (result)
  {
    v4 = sub_22F2E6D78(a2);
    result = 0;
    if (v4)
    {
      v5 = *(_DWORD *)(v4 + 28) & 0x7F;
      if ((v5 - 26) <= 6)
        return (0x150000000uLL >> v5) & 1;
    }
  }
  return result;
}

__n128 sub_22EDA437C@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;

  v4 = operator new();
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v4 + 8) = result;
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)v4 = &off_24FAB9260;
  *a2 = v4;
  return result;
}

uint64_t sub_22EDA43D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v3 = *(unsigned int *)(a2 + 8);
    v4 = *(unsigned int *)(a1 + 8);
    if (v4 >= v3)
    {
      if ((_DWORD)v3)
        memmove(*(void **)a1, *(const void **)a2, 32 * v3);
      goto LABEL_8;
    }
    if (*(_DWORD *)(a1 + 12) < v3)
    {
      *(_DWORD *)(a1 + 8) = 0;
      v9 = a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      a2 = v9;
    }
    else if ((_DWORD)v4)
    {
      v8 = *(unsigned int *)(a1 + 8);
      v10 = a2;
      memmove(*(void **)a1, *(const void **)a2, 32 * v4);
      v5 = v8;
      a2 = v10;
LABEL_6:
      v6 = *(unsigned int *)(a2 + 8);
      if (v5 != v6)
        memcpy((void *)(*(_QWORD *)a1 + 32 * v5), (const void *)(*(_QWORD *)a2 + 32 * v5), *(_QWORD *)a2 + 32 * v6 - (*(_QWORD *)a2 + 32 * v5));
LABEL_8:
      *(_DWORD *)(a1 + 8) = v3;
      return a1;
    }
    v5 = 0;
    goto LABEL_6;
  }
  return a1;
}

uint64_t sub_22EDA44B4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v4 && (sub_22EDA44B4(a1, v4) & 1) != 0)
    return 1;
  v6 = *(_QWORD *)(a2 + 16);
  if (v6 && (*(_BYTE *)(a2 + 8) & 4) != 0)
    return sub_22ED68B98(a1, v6 & 0xFFFFFFFFFFFFFFF0);
  else
    return 0;
}

uint64_t sub_22EDA451C(int *a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  BOOL v7;
  _QWORD *v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unint64_t v15;
  _QWORD *v16;
  unsigned int v17;
  _BYTE v18[96];
  unint64_t v19;
  unsigned int v20[24];

  v4 = *(_QWORD *)(a2 + 16);
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 4) != 0)
    v5 = *(_QWORD *)v5;
  v6 = *(_WORD *)(v5 + 8) & 0x7F;
  v7 = v6 > 0x18 || ((1 << v6) & 0x1000006) == 0;
  if (v7 && v6 - 52 > 5)
  {
    if (*(_QWORD *)(a2 + 40))
      return 0;
    v15 = *(_QWORD *)(a2 + 120);
    if (v15 >= 8 && (v15 & 4) == 0)
      return 0;
    v16 = *(_QWORD **)a1;
    if ((**(_QWORD **)(*(_QWORD *)a1 + 72) & 0x200) != 0)
      v17 = 6458;
    else
      v17 = 5360;
    sub_22E8FCA40(v16, a1[2], v17, 0, (uint64_t)v20);
    sub_22E8906A0((uint64_t)v20, (uint64_t *)a1 + 1);
    sub_22E903BEC(v20);
    sub_22E8FCA40(*(_QWORD **)a1, *(_DWORD *)(a2 + 24), 0x17ECu, 0, (uint64_t)v18);
    v13 = (unsigned int *)v18;
  }
  else
  {
    v8 = *(_QWORD **)a1;
    if ((**(_QWORD **)(*(_QWORD *)a1 + 72) & 0x200) != 0)
      v9 = 6455;
    else
      v9 = 5358;
    sub_22E8FCA40(v8, a1[2], v9, 0, (uint64_t)v20);
    v10 = *(_QWORD *)(a2 + 48);
    if (v10)
      v11 = v10 & 0xFFFFFFFFFFFFFFF0;
    else
      v11 = sub_22EF6462C(*(_QWORD *)(*(_QWORD *)a1 + 88), a2);
    v19 = v11;
    v12 = sub_22E8901B8((uint64_t)v20, (uint64_t *)&v19);
    sub_22E8906A0(v12, (uint64_t *)a1 + 1);
    v13 = v20;
  }
  sub_22E903BEC(v13);
  return 1;
}

uint64_t sub_22EDA4684(uint64_t result, uint64_t a2, _DWORD *a3, int a4, uint64_t a5)
{
  char *v5;
  unsigned int v6;
  int v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _DWORD *v12;
  uint64_t v13;
  __int16 v14;

  LODWORD(v5) = *a3;
  *(_BYTE *)result = -43;
  if (byte_255E04EB3)
  {
    v13 = result;
    v11 = a4;
    v12 = a3;
    v9 = a2;
    v10 = a5;
    v14 = (__int16)v5;
    v8 = sub_22F0D3748(213);
    a2 = v9;
    a5 = v10;
    a4 = v11;
    a3 = v12;
    v5 = v8;
    result = v13;
    ++*((_DWORD *)v5 + 2);
    LOWORD(v5) = v14;
  }
  v6 = *(_DWORD *)result & 0xFFFC00FF | (unsigned __int16)v5 & 0x1F00;
  *(_DWORD *)result = v6;
  *(_QWORD *)(result + 8) = a2;
  if ((a5 & 0xFF00000000) != 0)
    v7 = a5 + 1;
  else
    v7 = 0;
  *(_DWORD *)(result + 16) = a4;
  *(_DWORD *)(result + 20) = v7;
  *(_QWORD *)(result + 24) = a3;
  *(_DWORD *)result = v6 | *a3 & 0x20000 | 0x1C000;
  return result;
}

unsigned int *sub_22EDA4730@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  __int128 v7;
  unsigned int v9[24];

  sub_22E8FCA40(a2, a3, 0x12C0u, 0, (uint64_t)v9);
  v6 = sub_22E8901B8((uint64_t)v9, (uint64_t *)(a1 + 16));
  v7 = *(_OWORD *)(v6 + 9);
  *(_OWORD *)a4 = *(_OWORD *)v6;
  *(_OWORD *)(a4 + 9) = v7;
  *(_BYTE *)(a4 + 32) = 0;
  *(_BYTE *)(a4 + 80) = 0;
  if (*(_BYTE *)(v6 + 80))
    sub_22E907424(a4 + 32, v6 + 32);
  *(_QWORD *)(a4 + 88) = *(_QWORD *)(v6 + 88);
  return sub_22E903BEC(v9);
}

void sub_22EDA47C0()
{
  JUMPOUT(0x2348A0E9CLL);
}

unsigned int *sub_22EDA47D4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  int v9;
  unsigned int v10[24];
  unsigned int v11[24];

  v2 = *(_QWORD **)a1;
  v3 = **(_QWORD **)(a1 + 8);
  if (v3)
    sub_22F0D5A50(v3);
  else
    v4 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 16) + 16))(**(_QWORD **)(a1 + 16));
  sub_22E8FCA40(v2, v4, 0x12CEu, 0, (uint64_t)v11);
  sub_22E903BEC(v11);
  v5 = *(_QWORD **)a1;
  v6 = **(_QWORD **)(a1 + 24);
  if (v6)
    sub_22F0D5A50(v6);
  else
    v7 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 16))(**(_QWORD **)(a1 + 32));
  sub_22E8FCA40(v5, v7, 0x17E7u, 0, (uint64_t)v10);
  v9 = 0;
  sub_22E8900C4((uint64_t)v10, &v9);
  return sub_22E903BEC(v10);
}

void sub_22EDA489C(uint64_t a1, unint64_t a2, int a3)
{
  int v3;
  uint64_t v4;

  if (a3)
    v3 = 4;
  else
    v3 = 3;
  v4 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v4)
    sub_22EC6C5C8(*(_QWORD *)a1, *(_DWORD *)(a1 + 8), a2, *(_DWORD *)(a2 + 24), *(std::string::size_type **)(a1 + 16), v4, v3, 1);
  else
    sub_22F338924(*(_QWORD *)a1, *(_DWORD *)(a1 + 8), a2, v3, 1);
}

void sub_22EDA48F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v1 = a1 + 8;
    v2 = 8;
  }
  else
  {
    v2 = *(unsigned int *)(a1 + 16);
    if (!(_DWORD)v2)
      return;
    v1 = *(_QWORD *)(a1 + 8);
  }
  v3 = 288 * v2;
  v4 = (_QWORD *)(v1 + 24);
  do
  {
    v5 = *(v4 - 3);
    if (v5 != -4096 && v5 != -8192)
    {
      v6 = (_QWORD *)*(v4 - 2);
      if (v4 != v6)
      {
        v7 = v4;
        v8 = v3;
        free(v6);
        v4 = v7;
        v3 = v8;
      }
    }
    v4 += 36;
    v3 -= 288;
  }
  while (v3);
}

void sub_22EDA4974(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  unint64_t v4;
  unint64_t v5;
  int v6;
  llvm *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  _BYTE v14[2304];
  uint64_t v15;

  v2 = a2;
  v15 = *MEMORY[0x24BDAC8D0];
  if (a2 >= 9)
  {
    v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40)
      v2 = v6 + 1;
    else
      v2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v9 = 0;
    v10 = v14;
    do
    {
      v11 = a1 + v9;
      v12 = *(_QWORD *)(a1 + v9 + 8);
      if ((v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        *v10 = v12;
        v10[1] = v10 + 3;
        v13 = (void **)(v11 + 16);
        v10[2] = 0x800000000;
        if (*(_DWORD *)(v11 + 24))
          sub_22ED7355C((uint64_t)(v10 + 1), (uint64_t)v13);
        v10[35] = *(_QWORD *)(a1 + v9 + 288);
        v10 += 36;
        if ((void *)(a1 + v9 + 32) != *v13)
          free(*v13);
      }
      v9 += 288;
    }
    while (v9 != 2304);
    if (v2 > 8)
    {
      *(_DWORD *)a1 &= ~1u;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](288 * v2, 8);
      *(_QWORD *)(a1 + 16) = v2;
    }
    sub_22F347030(a1, (uint64_t)v14, (uint64_t)v10);
  }
  else
  {
    v7 = *(llvm **)(a1 + 8);
    v8 = *(unsigned int *)(a1 + 16);
    if (v2 > 8)
    {
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](288 * v2, 8);
      *(_QWORD *)(a1 + 16) = v2;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_22F347030(a1, (uint64_t)v7, (uint64_t)v7 + 288 * v8);
    llvm::deallocate_buffer(v7, (void *)(288 * v8));
  }
}

uint64_t *sub_22EDA4B68(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v2 = a1;
  if (a1 != a2)
  {
    v4 = a1;
    while (1)
    {
      v5 = *v4++;
      if (sub_22EFA55D0(v5))
        break;
      v2 = v4;
      if (v4 == a2)
        return a2;
    }
    if (v4 != a2)
    {
      v6 = v2 + 1;
      do
      {
        v7 = *v6;
        if (!sub_22EFA55D0(*v6))
          *v2++ = v7;
        ++v6;
      }
      while (v6 != a2);
    }
  }
  return v2;
}

unint64_t sub_22EDA4BEC(_QWORD **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  if ((a3 & 0xF) == 0)
    __asm { BR              X11 }
  v5 = sub_22EDA4BEC(a1, a2);
  v6 = 0;
  if (v5 >= 0x10)
  {
    v7 = sub_22E8C1750(a1, v5, a3);
    if (v7 >= 0x10)
      return v7;
    else
      return 0;
  }
  return v6;
}

unint64_t sub_22EDA95F0(unsigned int *a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  if (a2 >= 0x10 && (*(_BYTE *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 17) & 2) != 0)
  {
    v3 = sub_22EF579A8(*(_QWORD *)(*(_QWORD *)a1 + 88), a2, a1[20]);
    v4 = sub_22ED72360(a1, v3);
    if (v4)
      return *(_QWORD *)v4;
    else
      return 0;
  }
  return a2;
}

uint64_t sub_22EDA9654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[9];

  v6[6] = *MEMORY[0x24BDAC8D0];
  if (a3 != a5)
  {
    sub_22EDC0108(*(_QWORD *)a2, a3, *(_DWORD *)(a2 + 80), (uint64_t)v6);
    __asm { BR              X9 }
  }
  return 0;
}

BOOL sub_22EDA993C(unsigned int *a1, uint64_t a2, uint64_t a3, int a4)
{
  _BOOL8 v4;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  __int128 v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  __int128 v41;
  void *v42[2];
  uint64_t v43;
  unsigned int v44;
  int v45;
  int v46;

  v4 = 1;
  switch(*(_DWORD *)a2)
  {
    case 1:
      v24 = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL;
      if (!v24)
        v24 = (unint64_t)sub_22EF579A8(*(_QWORD *)(*(_QWORD *)a1 + 88), *(_QWORD *)(a2 + 8), a1[20]);
      v25 = sub_22ED72360(a1, v24);
      if (v25)
      {
        v26 = *(_QWORD *)v25;
        *(_DWORD *)a3 = 1;
        *(_QWORD *)(a3 + 8) = v26;
        *(_QWORD *)(a3 + 24) = v25 & 0xFFFFFFFFFFFFFFFCLL | 2;
        return 0;
      }
      return v4;
    case 2:
    case 3:
    case 4:
      v8 = sub_22F0EECF4();
      v9 = sub_22EDA95F0(a1, v8);
      if (v9 < 0x10)
        return 1;
      v10 = v9;
      v11 = *(_QWORD *)(a2 + 16);
      if (*(_DWORD *)a2 == 2)
        v12 = *(_QWORD *)(a2 + 16);
      else
        v12 = 0;
      if (v12)
      {
        v43 = v12;
        *(_QWORD *)&v41 = 0;
        if (sub_22E793870((uint64_t *)a1 + 1, &v43, &v41))
        {
          if ((_QWORD)v41 != *((_QWORD *)a1 + 1) + 16 * a1[6])
          {
            v11 = *(_QWORD *)(v41 + 8);
            if (!v11)
              return 1;
          }
        }
      }
      else
      {
        v11 = 0;
      }
      if (v10 == v8 && v12 == v11)
      {
        v4 = 0;
        v32 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a3 = *(_OWORD *)a2;
        *(_OWORD *)(a3 + 16) = v32;
        return v4;
      }
      if (*(_DWORD *)a2 == 3)
      {
        v4 = 0;
        *(_DWORD *)a3 = 3;
        *(_QWORD *)(a3 + 8) = v10;
LABEL_52:
        *(_QWORD *)(a3 + 24) = 0;
        return v4;
      }
      if (*(_DWORD *)a2 != 4)
      {
        v4 = 0;
        *(_DWORD *)a3 = 2;
        *(_QWORD *)(a3 + 8) = v10;
        *(_QWORD *)(a3 + 16) = v11;
        goto LABEL_52;
      }
      v33 = *(_QWORD *)(*(_QWORD *)a1 + 88);
      sub_22E466FDC(a2, (uint64_t)&v43);
      sub_22F0EEA4C((uint64_t)&v41, v33, &v43, v10);
      *(_OWORD *)a3 = v41;
      *(void **)(a3 + 16) = v42[0];
      *(_QWORD *)(a3 + 24) = 0;
      if (v44 >= 0x41 && v43)
        MEMORY[0x2348A0E84](v43, 0x1000C8000313F17);
      return 0;
    case 5:
      v27 = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL;
      v28 = *(_QWORD *)(v27 + 8);
      if (*(_QWORD *)v27)
      {
        v29 = sub_22ED72930((int)a1, *(_QWORD *)v27, *(void **)(v27 + 8));
        if (!v29)
          return v4;
        v31 = v29;
        v28 = v30;
      }
      else
      {
        v31 = 0;
      }
      v41 = 0u;
      *(_OWORD *)v42 = 0u;
      sub_22E8ACE30((uint64_t)&v41, v31, v28);
      if ((*(_DWORD *)a2 - 5) > 1)
        v34 = 0;
      else
        v34 = *(_DWORD *)((*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL) + 16);
      v35 = sub_22EBEF62C((uint64_t)a1, (uint64_t)&v41, *(_QWORD *)(a2 + 8), v34, 0, 0);
      v4 = v35 < 8;
      if (v35 >= 8)
      {
        v36 = v35;
        v37 = *(_QWORD *)(*(_QWORD *)a1 + 88);
        if ((*(_DWORD *)a2 - 5) > 1)
          v38 = 0;
        else
          v38 = *(_DWORD *)((*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL) + 16);
        v39 = sub_22E3CD3D4(v37 + 2032, 24, 3);
        *(_QWORD *)v39 = v31;
        *(_QWORD *)(v39 + 8) = v28;
        *(_DWORD *)(v39 + 16) = v38;
        *(_DWORD *)(v39 + 20) = 0;
        *(_QWORD *)a3 = 5;
        *(_QWORD *)(a3 + 8) = v36;
        *(_QWORD *)(a3 + 24) = v39 & 0xFFFFFFFFFFFFFFFCLL;
      }
      if (HIDWORD(v42[1]))
        free(v42[0]);
      return v4;
    case 7:
      v13 = *(_QWORD *)a1;
      if (a4)
        v14 = 0;
      else
        v14 = 4;
      *(_QWORD *)&v41 = 0;
      v45 = 1;
      v46 = v14;
      v43 = *(unsigned int *)(v13 + 1704);
      sub_22EB4DDB8(v13 + 3688, &v46, (int *)&v43, (__int16 *)(v13 + 1693), (uint64_t *)&v41, &v45);
      v15 = *(unsigned int *)(v13 + 3696);
      v16 = v15 - 2;
      v17 = *(_QWORD *)(v13 + 3688);
      v18 = *(_DWORD *)(v17 + 576 * (v15 - 2));
      if (v18 == 5)
      {
        *(_BYTE *)(v17 + 576 * v15 - 4) = *(_BYTE *)(v17 + 576 * v16 + 572);
        v19 = 1;
      }
      else if (v18 == 2)
      {
        *(_BYTE *)(v17 + 576 * v15 - 4) = 1;
        v19 = *(_BYTE *)(v17 + 576 * v16 + 573) != 0;
      }
      else
      {
        v19 = 0;
        *(_BYTE *)(v17 + 576 * v15 - 4) = 0;
      }
      v20 = v17 + 576 * v15;
      *(_BYTE *)(v20 - 3) = v19;
      *(_WORD *)(v13 + 1693) = 0;
      if (*(_DWORD *)(v13 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v13 + 1776), (llvm::SmallPtrSetImplBase *)(v20 - 560));
        sub_22EAEAE08(v13 + 1840, (uint64_t *)(v20 - 496));
      }
      if ((*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL) != 0)
        v21 = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL;
      else
        v21 = *(_QWORD *)(a2 + 8);
      v22 = sub_22ED725B0(a1, v21);
      v23 = sub_22EB51A84(*(_QWORD *)a1, v22);
      v4 = v23 & 1;
      if ((v23 & 1) == 0)
      {
        *(_DWORD *)a3 = 7;
        *(_QWORD *)(a3 + 8) = v23 & 0xFFFFFFFFFFFFFFFELL;
        *(_QWORD *)(a3 + 24) = v23 & 0xFFFFFFFFFFFFFFFCLL | 1;
      }
      sub_22EB48E64(v13);
      return v4;
    default:
      return v4;
  }
}

unint64_t sub_22EDA9D90(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40[18];
  int v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int v44;
  __int128 v45;
  void *v46[2];
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  _BYTE v53[64];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unsigned int v59;
  _BYTE v60[24];
  int v61;
  __int16 v62;
  char v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  _BYTE v67[64];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unsigned int v73;
  _BYTE v74[24];
  int v75;
  __int16 v76;
  char v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v10 = sub_22ED72930(a1, *(_QWORD *)(a3 + 32), *(void **)(a4 + 8), 0, 0);
  if (!v10)
    return 0;
  v12 = v11;
  v13 = (*(_DWORD *)(a3 + 16) >> 19);
  v14 = *(_DWORD *)a4;
  v15 = *(_QWORD *)(a3 + 40);
  v16 = *(_DWORD *)(a4 + 16);
  v48 = v10;
  v49 = v11;
  v47 = v15;
  v45 = 0u;
  *(_OWORD *)v46 = 0u;
  sub_22E8ACE30((uint64_t)&v45, v10, v11);
  if ((sub_22F0AAC5C(v48) & 4) != 0 && !sub_22E958204(*a1, (uint64_t)&v45, 0))
  {
    v17 = sub_22EF65A30(*(_QWORD *)(*a1 + 88), v13, v48, v47, 0);
    goto LABEL_18;
  }
  if ((v13 - 5) <= 1)
  {
    v17 = sub_22ED717D8((_QWORD *)*a1, v13, v14, v48, v49, v47, v16, a5);
LABEL_18:
    v24 = v17;
    goto LABEL_40;
  }
  v44 = v13;
  v18 = (_QWORD *)*a1;
  v64 = 0;
  v65 = v67;
  v66 = 0x800000000;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v71 = v18;
  v72 = v47;
  v73 = v16;
  sub_22EFC6D6C((uint64_t)v74, v47);
  *(_OWORD *)&v74[8] = xmmword_22F4555C0;
  v75 = 16842752;
  v76 = 0;
  v77 = 0;
  sub_22EC56024((uint64_t)&v64);
  v43 = 0;
  v19 = sub_22E958204(*a1, (uint64_t)&v45, 0);
  v43 = v19;
  if (v19)
  {
    if ((sub_22E958490(*a1, &v45, v19) & 1) == 0)
    {
      sub_22EC611AC(*a1, &v64, v43, 0);
      if ((_DWORD)v64 != 5)
      {
        if ((_DWORD)v64 != 2)
          goto LABEL_19;
        v20 = *(_QWORD *)v65 & 0xFFFFFFFFFFFFFFFCLL;
        v21 = *(_DWORD *)(v20 + 28) & 0x7F;
        if (v21 <= 0x2F && ((1 << v21) & 0xC00000060000) != 0)
        {
          v20 = sub_22EFBAEA4(*(_QWORD *)v65 & 0xFFFFFFFFFFFFFFFCLL);
          v21 = *(_DWORD *)(v20 + 28) & 0x7F;
        }
        if (v21 - 33 < 5)
        {
          if ((sub_22EA33594(*a1, v20, v44, 0, v16, v47) & 1) != 0)
          {
            v22 = *(_QWORD *)(v20 + 48);
            if (v22)
              v23 = v22 & 0xFFFFFFFFFFFFFFF0;
            else
              v23 = sub_22EF6462C(*(_QWORD *)(*a1 + 88), v20);
            v24 = sub_22EF65684(*(_QWORD *)(*a1 + 88), v13, v48, v23, 0);
            goto LABEL_31;
          }
          sub_22E8FCA40((_QWORD *)*a1, v14, 0x13E0u, 0, (uint64_t)&v50);
          sub_22E8BAE44((uint64_t)&v50, &v47);
          sub_22E903BEC((unsigned int *)&v50);
          sub_22E8FCA40((_QWORD *)*a1, *(_DWORD *)(v20 + 24), 0x6Fu, 0, (uint64_t)&v50);
          sub_22E903BEC((unsigned int *)&v50);
        }
        else
        {
LABEL_19:
          v25 = (_QWORD *)*a1;
          v50 = 0;
          v51 = v53;
          v52 = 0x800000000;
          v54 = 0;
          v55 = 0;
          v56 = 0;
          v57 = v25;
          v58 = v47;
          v59 = v16;
          sub_22EFC6D6C((uint64_t)v60, v47);
          *(_OWORD *)&v60[8] = xmmword_22F4555C0;
          v61 = 16842752;
          v62 = 0;
          v63 = 0;
          sub_22EC56024((uint64_t)&v50);
          sub_22EC611AC(*a1, &v50, v43, 0);
          if ((v50 - 2) <= 2)
          {
            v42 = *(_QWORD *)v51 & 0xFFFFFFFFFFFFFFFCLL;
            v35 = (_QWORD *)*a1;
            v41 = sub_22F31E40C(*a1, v42, v44);
            sub_22E8FCA40(v35, v16, 0x12A5u, 0, (uint64_t)v40);
            v36 = sub_22E890024((uint64_t)v40, (uint64_t *)&v42);
            v37 = sub_22E8900C4(v36, &v41);
            sub_22E8900C4(v37, (int *)&v44);
            sub_22E903BEC(v40);
            sub_22E8FCA40((_QWORD *)*a1, *(_DWORD *)(v42 + 24), 0x64u, 0, (uint64_t)v40);
          }
          else
          {
            sub_22E8FCA40((_QWORD *)*a1, v16, 0xFDFu, 0, (uint64_t)v40);
            v26 = sub_22E8900C4((uint64_t)v40, (int *)&v44);
            v27 = sub_22E8BAE44(v26, &v47);
            v28 = sub_22E894FB4(v27, (uint64_t *)&v43);
            v42 = sub_22F0AB0EC(&v48);
            sub_22E8906A0(v28, (uint64_t *)&v42);
          }
          sub_22E903BEC(v40);
          if (HIBYTE(v61))
          {
            if ((_DWORD)v50 == 5)
            {
              sub_22EC64D18(v57, (uint64_t)&v50);
            }
            else if (v55 && (*(_DWORD *)(v57[9] + 52) & 0x400000) != 0)
            {
              sub_22E90B5FC((unint64_t)v57, (uint64_t)&v50);
            }
          }
          if (v54)
          {
            v39 = sub_22EC6CBD0(v54);
            MEMORY[0x2348A0E9C](v39, 0x10E0C409F09D3C3);
          }
          if (v51 != v53)
            free(v51);
        }
      }
    }
  }
  v24 = 0;
LABEL_31:
  if (HIBYTE(v75))
  {
    if ((_DWORD)v64 == 5)
    {
      sub_22EC64D18(v71, (uint64_t)&v64);
    }
    else if (v69 && (*(_DWORD *)(v71[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v71, (uint64_t)&v64);
    }
  }
  if (v68)
  {
    v38 = sub_22EC6CBD0(v68);
    MEMORY[0x2348A0E9C](v38, 0x10E0C409F09D3C3);
  }
  if (v65 != v67)
    free(v65);
LABEL_40:
  if (HIDWORD(v46[1]))
    free(v46[0]);
  if (v24 < 0x10)
    return 0;
  v29 = *(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF0);
  if (v29)
    v30 = *(_BYTE *)(v29 + 16) == 24;
  else
    v30 = 0;
  if (v30
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 24
    && (v29 = sub_22F10CF48(v29)) != 0)
  {
    sub_22EEB5360(a2, *(_QWORD *)(v29 + 40), 4uLL, 4);
    *v31 = *(_DWORD *)(a4 + 16);
    sub_22EEB5360(a2, v24, 0x10uLL, 8);
    *(_DWORD *)v32 = *(_DWORD *)a4;
    *(_QWORD *)(v32 + 8) = v12;
  }
  else
  {
    sub_22EEB5360(a2, v24, 0x18uLL, 8);
    *(_DWORD *)v33 = *(_DWORD *)a4;
    *(_QWORD *)(v33 + 8) = v12;
    *(_DWORD *)(v33 + 16) = *(_DWORD *)(a4 + 16);
  }
  return v24;
}

uint64_t sub_22EDAA3B8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  if (a2 != a4 || a3 != a5)
    __asm { BR              X9 }
  return 0;
}

uint64_t sub_22EDAA6A0(uint64_t *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v23;
  uint64_t v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t i;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v54;
  unsigned int v56;
  void **v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  _QWORD v61[6];

  v61[4] = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  if (!a3)
    return 0;
  v11 = a5;
  v12 = a2;
  v13 = (unsigned int *)a1;
  v14 = 0;
  v56 = 0;
  v54 = a3;
  while (1)
  {
    v15 = *(_QWORD *)(v12 + 8 * v14);
    if (v15)
      break;
    v30 = *(_QWORD *)(a4 + 8 * v14);
    v31 = *(_QWORD *)(v30 & 0xFFFFFFFFFFFFFFF0);
    if (v31 && *(_BYTE *)(v31 + 16) == 36)
    {
      v32 = *(_QWORD *)(v31 + 32);
      v59 = v61;
      v60 = 0x200000000;
      v57 = &v59;
      LOBYTE(v58) = 0;
      HIDWORD(v58) = -1;
      sub_22EE72E1C((uint64_t)&v57, v32);
      v33 = *(_QWORD *)(v31 + 32);
      v34 = v13;
      v35 = *(_QWORD *)v13;
      v36 = *(_DWORD *)(v35 + 11992);
      *(_DWORD *)(v35 + 11992) = -1;
      v37 = sub_22EDA95F0(v34, v33);
      *(_DWORD *)(v35 + 11992) = v36;
      if (v59 != v61)
        free(v59);
      if (v37 < 0x10)
        return 1;
      v13 = (unsigned int *)a1;
      v38 = sub_22EF663B4(*(_QWORD *)(*a1 + 88), v37, 0);
      v8 = v54;
    }
    else
    {
      v38 = sub_22EDA95F0(v13, v30);
      if (v38 < 0x10)
        return 1;
    }
    if (v11)
      sub_22F2F3918(a8, *(_DWORD *)(a6 + 8), *(_BYTE *)(v11 + v14));
    v40 = *(unsigned int *)(a6 + 8);
    if (v40 >= *(unsigned int *)(a6 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v40 = *(unsigned int *)(a6 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a6 + 8 * v40) = v38;
    ++*(_DWORD *)(a6 + 8);
    if (a7)
    {
      v41 = *(unsigned int *)(a7 + 8);
      if (v41 >= *(unsigned int *)(a7 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v41 = *(unsigned int *)(a7 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a7 + 8 * v41) = 0;
LABEL_60:
      ++*(_DWORD *)(a7 + 8);
    }
LABEL_61:
    if (++v14 == v8)
      return 0;
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v15 + 48) & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
  {
    v39 = sub_22EDAAB68((uint64_t *)v13, *(_QWORD *)(v12 + 8 * v14), 0);
    if (v39)
      goto LABEL_52;
    return 1;
  }
  v59 = v61;
  v60 = 0x200000000;
  v16 = *(_QWORD *)(v15 + 56);
  v17 = (uint64_t *)(v16 & 0xFFFFFFFFFFFFFFF8);
  if ((v16 & 4) != 0)
    v17 = (uint64_t *)v17[4];
  v20 = *v17;
  v18 = v17 + 1;
  v19 = v20;
  v21 = *(_QWORD *)(v20 + 32);
  if (v21 >= 0x10 && (v21 & 0xF) == 0)
    v42 = *(_QWORD *)((char *)&unk_22F498010
                    + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  else
    v42 = 1;
  v57 = (void **)v21;
  v58 = ((unint64_t)v18 + v42 + 3) & -v42;
  sub_22EE73804(*(_QWORD *)v13, v21, v58, (uint64_t)&v59);
  if (!(_DWORD)v60)
  {
    v24 = 0;
    LOBYTE(v27) = 0;
    goto LABEL_49;
  }
  v23 = *(_DWORD *)(v19 + 20);
  v24 = v23 != 0;
  v25 = v23 != 0;
  v26 = v23 - 1;
  if (v25)
    v27 = v26;
  else
    v27 = 0;
  v56 = v27 >> 8;
  for (i = v21; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_28;
      v29 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v29 <= 0x39)
        break;
LABEL_23:
      if (sub_22F115668(i))
        v21 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_48;
    }
    if (v29 == 24)
      goto LABEL_47;
    if (v29 == 26)
      break;
    if (((1 << v29) & 0x20000000200003CLL) == 0)
      goto LABEL_23;
LABEL_28:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_28;
LABEL_47:
  v21 = i;
LABEL_48:
  sub_22F115668(v21);
  sub_22F1167E8((uint64_t *)&v57);
LABEL_49:
  v43 = *a1;
  v44 = *(_DWORD *)(*a1 + 11992);
  *(_DWORD *)(*a1 + 11992) = -1;
  v45 = v27 | (v56 << 8) | (unint64_t)(v24 << 32);
  v13 = (unsigned int *)a1;
  v39 = sub_22EDAAB68(a1, v15, v45);
  *(_DWORD *)(v43 + 11992) = v44;
  v12 = a2;
  v11 = a5;
  if (v59 != v61)
    free(v59);
  v8 = v54;
  if (v39)
  {
LABEL_52:
    if (v11)
      sub_22F2F3918(a8, *(_DWORD *)(a6 + 8), *(_BYTE *)(v11 + v14));
    v46 = *(_QWORD *)(v39 + 48);
    v47 = *(unsigned int *)(a6 + 8);
    if (v47 >= *(unsigned int *)(a6 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v47 = *(unsigned int *)(a6 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a6 + 8 * v47) = v46;
    ++*(_DWORD *)(a6 + 8);
    if (a7)
    {
      v48 = *(unsigned int *)(a7 + 8);
      if (v48 >= *(unsigned int *)(a7 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v48 = *(unsigned int *)(a7 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a7 + 8 * v48) = v39;
      goto LABEL_60;
    }
    goto LABEL_61;
  }
  return 1;
}

unint64_t sub_22EDAAB68(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned int v9;
  int *v10;
  unint64_t v11;
  char v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int i;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unint64_t v44;
  unint64_t v45;
  int *v46;
  uint64_t v47;
  size_t v48;
  unsigned __int32 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52[2];
  char v53[8];
  int64x2_t v54;
  _BYTE v55[32];
  uint64_t v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a2 + 56);
  v7 = (unint64_t *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 4) != 0)
    v7 = (unint64_t *)v7[4];
  if ((a3 & 0xFF00000000) == 0 || (v8 = *v7, *(_BYTE *)(*(_QWORD *)(*v7 & 0xFFFFFFFFFFFFFFF0) + 16) != 36))
  {
    v13 = (uint64_t *)sub_22ED72360(a1, v7);
    if (v13)
      goto LABEL_14;
    return 0;
  }
  *(_QWORD *)v53 = v55;
  v54 = vdupq_n_s64(0x20uLL);
  v56 = 0;
  v9 = sub_22F11598C(v8);
  if (v54.i64[0] < (unint64_t)v9)
    sub_22EEB52C0((uint64_t *)v53, v9);
  v10 = (int *)(v7 + 1);
  v11 = sub_22EDA4BEC(a1, v53);
  if (v11 < 0x10)
  {
LABEL_8:
    v12 = 0;
    v13 = 0;
    goto LABEL_9;
  }
  v32 = v11;
  v33 = *(_QWORD *)(v8 + 32);
  v51 = v33;
  if (v33 >= 0x10 && (v33 & 0xF) == 0)
    v50 = *(_QWORD *)((char *)&unk_22F498010
                    + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v33 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  else
    v50 = 1;
  v35 = *(_QWORD *)(v8 + 32);
  v52[0] = v35;
  v52[1] = ((unint64_t)v7 + v50 + 11) & -v50;
  while (1)
  {
    while (1)
    {
      if ((v35 & 0xF) != 0)
        goto LABEL_71;
      v36 = *(unsigned __int8 *)(*(_QWORD *)(v35 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v36 <= 0x39)
        break;
LABEL_66:
      v37 = v35;
      v38 = sub_22F115668(v35);
      v39 = v51;
      if (v38)
        v39 = v37;
      v51 = v39;
      v35 = sub_22F115B7C(v37);
      if (!v35)
        goto LABEL_79;
    }
    if (v36 == 24)
      goto LABEL_78;
    if (v36 == 26)
      break;
    if (((1 << v36) & 0x20000000200003CLL) == 0)
      goto LABEL_66;
LABEL_71:
    v35 = sub_22F115B7C(v35);
  }
  if ((*(_BYTE *)(v35 + 23) & 0x10) == 0)
    goto LABEL_71;
LABEL_78:
  v51 = v35;
LABEL_79:
  v42 = sub_22F115668(v51);
  v43 = sub_22F1167E8(v52);
  v44 = sub_22F34AE9C((_QWORD *)*a1, v32, v42 | ((unint64_t)v43 << 32), *v10, a3);
  if (v44 < 0x10)
    goto LABEL_8;
  v45 = v44;
  sub_22EEB5360((uint64_t)v53, v44, 4uLL, 4);
  *v46 = *v10;
  v47 = *(_QWORD *)(*a1 + 88);
  v48 = v54.i64[0] - v54.i64[1];
  v49 = v54.i32[0] - v54.i32[2];
  if (v54.i32[0] == v54.i32[2])
    v49 = sub_22F11598C(v45);
  v13 = (uint64_t *)sub_22E3CD3D4(v47 + 2032, v49 + 8, 3);
  *v13 = v45;
  memcpy(v13 + 1, (const void *)(*(_QWORD *)v53 + v54.i64[1]), v48);
  v12 = 1;
LABEL_9:
  if (*(_BYTE **)v53 != v55 && *(_QWORD *)v53)
    MEMORY[0x2348A0E84]();
  if ((v12 & 1) == 0 || !v13)
    return 0;
LABEL_14:
  if (v13 != (uint64_t *)v7)
  {
    v16 = *(_QWORD *)(a2 + 16);
    v17 = (_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF8);
    if ((v16 & 4) != 0)
      v17 = (_QWORD *)*v17;
    v18 = *(_QWORD *)(a2 + 40);
    if ((v18 & 7) != 0)
      v19 = 0;
    else
      v19 = v18 & 0xFFFFFFFFFFFFFFF8;
    v20 = sub_22EFBF080(*(_QWORD *)(*a1 + 88), (uint64_t)v17, *(_DWORD *)(a2 + 64), *(_DWORD *)(a2 + 24), v19, *v13, (uint64_t)v13, *(_BYTE *)(a2 + 96) & 7, 0);
    v14 = v20;
    v21 = *(_DWORD *)(a2 + 96);
    if ((v21 & 0x1000) != 0)
      v22 = 0;
    else
      v22 = v21 & 0xFE000;
    v23 = (v21 >> 20);
    if (v23 == 255)
    {
      v24 = a2;
      if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x53)
      {
        v25 = *(_QWORD *)(a2 + 16);
        v26 = v25 & 0xFFFFFFFFFFFFFFF8;
        if ((v25 & 4) != 0)
          v26 = *(_QWORD *)v26;
        for (i = *(_WORD *)(v26 + 8) & 0x7F; i != 83; i = *(_WORD *)(v26 + 8) & 0x7F)
        {
          v28 = -40;
          if (i > 70)
          {
            if (i == 71)
            {
              v28 = -56;
              goto LABEL_48;
            }
            if (i == 81)
              goto LABEL_48;
          }
          else
          {
            if (i <= 0x18)
            {
              if (i == 16)
                goto LABEL_35;
              if (((1 << i) & 0x1066) != 0)
                goto LABEL_48;
              if (i == 24)
              {
LABEL_35:
                v28 = -48;
                goto LABEL_48;
              }
            }
            if (i == 70)
            {
              v28 = -64;
              goto LABEL_48;
            }
          }
          v29 = i - 52;
          if ((i - 33) >= 5)
            v30 = -48;
          else
            v30 = -64;
          if (v29 >= 6)
            v28 = v30;
          else
            v28 = -72;
LABEL_48:
          v31 = *(_QWORD *)(v26 + v28 + 16);
          v26 = v31 & 0xFFFFFFFFFFFFFFF8;
          if ((v31 & 4) != 0)
            v26 = *(_QWORD *)v26;
        }
        v24 = v26 - 40;
      }
      v23 = sub_22F36F2CC(*(_QWORD *)(v24 + 88), a2);
      v40 = (unsigned int *)(v14 + 96);
      v41 = *(_DWORD *)(v14 + 96) & 0xFFF01FFF | v22;
      *(_DWORD *)(v14 + 96) = v41;
      if (v23 >= 0xFF)
      {
        sub_22F3AC2B8(v14, v23);
LABEL_77:
        *(_QWORD *)v53 = a2;
        sub_22F25E108(a1 + 1, v53)[1] = v14;
        return v14;
      }
    }
    else
    {
      v40 = (unsigned int *)(v20 + 96);
      v41 = *(_DWORD *)(v20 + 96) & 0xFFF01FFF | v22;
    }
    *v40 = v41 & 0xF00FFFFF | (v23 << 20);
    goto LABEL_77;
  }
  return a2;
}

unint64_t sub_22EDAB084(_QWORD **a1, uint64_t a2, unint64_t a3, int *a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int *v11;

  v8 = sub_22EDA4BEC(a1, a2);
  v9 = 0;
  if (v8 >= 0x10)
  {
    if (*((_DWORD *)*a1 + 2998) == -1 && v8 == *(_QWORD *)(a3 + 32))
    {
      v9 = a3;
    }
    else
    {
      v9 = sub_22EE7E490(*a1, v8, (*(_DWORD *)(a3 + 16) >> 19) & 1, *a4);
      if (v9 < 0x10)
        return 0;
    }
    v10 = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0);
    if (!v10 || (*(_DWORD *)(v10 + 16) & 0xFE) != 0x28)
      sub_22F10CF48(v10);
    sub_22EEB5360(a2, v9, 4uLL, 4);
    *v11 = *a4;
  }
  return v9;
}

unint64_t sub_22EDAB1AC(_QWORD **a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v19;
  uint64_t v20;
  _DWORD v21[66];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v19 = v21;
  v20 = 0x800000000;
  v21[64] = a4[2];
  v21[65] = a4[3];
  if (*(_DWORD *)(a3 + 20))
    __asm { BR              X9 }
  v5 = sub_22ED60904(*a1, a5, *a4, (uint64_t)&v19);
  v6 = v5;
  if (v5 >= 0x10)
  {
    v7 = 8 * *(_DWORD *)(v5 + 20);
    if (*(_BYTE *)(*(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0) + 16) == 20)
    {
      sub_22EEB5360(a2, v5, (v7 + 32), 8);
      *(_DWORD *)v8 = 0;
      *(_QWORD *)(v8 + 8) = 0;
      *(_DWORD *)(v8 + 20) = a4[1];
      *(_DWORD *)(v8 + 16) = *a4;
      *(_DWORD *)(v8 + 24) = a4[2];
      *(_DWORD *)(v8 + 28) = a4[3];
      if ((_DWORD)v20)
      {
        v9 = 0;
        v10 = (_QWORD *)(v8 + 32);
        v11 = 32 * v20;
        do
        {
          *v10++ = *(_QWORD *)((char *)v19 + v9 + 24);
          v9 += 32;
        }
        while (v11 != v9);
      }
    }
    else
    {
      sub_22EEB5360(a2, v5, (v7 + 16), 8);
      v13[1] = a4[1];
      *v13 = *a4;
      v13[2] = a4[2];
      v13[3] = a4[3];
      if ((_DWORD)v20)
      {
        v14 = 0;
        v15 = v13 + 4;
        v16 = 32 * v20;
        do
        {
          *v15++ = *(_QWORD *)((char *)v19 + v14 + 24);
          v14 += 32;
        }
        while (v16 != v14);
      }
    }
  }
  if (v19 != v21)
    free(v19);
  return v6;
}

uint64_t sub_22EDAB5E0(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = a2;
  v4 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ED725B0(a1, *(_QWORD *)(v2 + 48));
  if ((v5 & 1) != 0)
    return 1;
  v6 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(_QWORD *)(v2 + 24) != v6
    || *(_QWORD *)(v2 + 48) != (v5 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EB2F86C(*a1, *(unsigned int *)(v2 + 16), *(unsigned int *)(v2 + 20), v6, 0, v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  return v2;
}

uint64_t sub_22EDAB680(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a2;
  v4 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ED725B0(a1, *(_QWORD *)(v2 + 32));
  if ((v5 & 1) != 0)
    return 1;
  v6 = sub_22ED725B0(a1, *(_QWORD *)(v2 + 40));
  if ((v6 & 1) != 0)
    return 1;
  v7 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(_QWORD *)(v2 + 24) != v7
    || *(_QWORD *)(v2 + 32) != (v5 & 0xFFFFFFFFFFFFFFFELL)
    || *(_QWORD *)(v2 + 40) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EB2F86C(*a1, *(unsigned int *)(v2 + 16), *(unsigned int *)(v2 + 20), v7, v5 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL);
  }
  return v2;
}

uint64_t sub_22EDAB744(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unint64_t v9;
  BOOL v10;
  int v11;
  unsigned int v12;
  unint64_t v14;

  v2 = a2;
  v4 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ED725B0(a1, *(_QWORD *)(v2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  v6 = *a1;
  v7 = *(_QWORD *)(v2 + 16);
  v8 = (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  v9 = v5 & 0xFFFFFFFFFFFFFFFELL;
  v10 = *(_DWORD *)(v6 + 11992) == -1 && v7 == (_QWORD)v8;
  if (!v10 || *(_QWORD *)(v2 + 24) != v9)
  {
    sub_22F0D5A50(v7);
    v11 = *(_DWORD *)(v2 + 4);
    v14 = v9;
    return sub_22EB296C0(v6, 0, v8, v12, (uint64_t *)&v14, 1, v11);
  }
  return v2;
}

uint64_t sub_22EDAB7FC(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v16[3];
  int v17;
  uint64_t v18;
  int v19;

  v2 = a2;
  v4 = sub_22ED72360(a1, *(_QWORD *)(a2 + 48));
  if (!v4)
    return 1;
  v5 = (unint64_t *)v4;
  v6 = (uint64_t)*a1;
  if (*((_DWORD *)*a1 + 2998) != -1 || v4 != *(_QWORD *)(v2 + 48))
  {
    v19 = 0;
    v18 = 0;
    v17 = 3;
    *(_QWORD *)v16 = *(unsigned int *)(v6 + 1704);
    sub_22EB4DDB8(v6 + 3688, &v19, v16, (__int16 *)(v6 + 1693), &v18, &v17);
    v7 = *(unsigned int *)(v6 + 3696);
    v8 = v7 - 2;
    v9 = *(_QWORD *)(v6 + 3688);
    v10 = *(_DWORD *)(v9 + 576 * (v7 - 2));
    if (v10 == 5)
    {
      *(_BYTE *)(v9 + 576 * v7 - 4) = *(_BYTE *)(v9 + 576 * v8 + 572);
      v11 = 1;
    }
    else if (v10 == 2)
    {
      *(_BYTE *)(v9 + 576 * v7 - 4) = 1;
      v11 = *(_BYTE *)(v9 + 576 * v8 + 573) != 0;
    }
    else
    {
      v11 = 0;
      *(_BYTE *)(v9 + 576 * v7 - 4) = 0;
    }
    v12 = v9 + 576 * v7;
    *(_BYTE *)(v12 - 3) = v11;
    *(_WORD *)(v6 + 1693) = 0;
    if (*(_DWORD *)(v6 + 1848))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v6 + 1776), (llvm::SmallPtrSetImplBase *)(v12 - 560));
      sub_22EAEAE08(v6 + 1840, (uint64_t *)(v12 - 496));
    }
    v13 = sub_22ED725B0(a1, *(_QWORD *)(v2 + 32));
    if ((v13 & 1) != 0)
    {
      v2 = 1;
    }
    else
    {
      v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
      if (*((_DWORD *)*a1 + 2998) != -1 || *(_QWORD *)(v2 + 32) != v14)
      {
        sub_22EB48E64(v6);
        return sub_22EBC8B4C(*a1, *(_BYTE *)(v2 + 16) & 3, *(_DWORD *)(v2 + 40), v5, v14, *(_DWORD *)(v2 + 44));
      }
    }
    sub_22EB48E64(v6);
  }
  return v2;
}

uint64_t sub_22EDAB9C4(unsigned int *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v6;

  v4 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v6 = sub_22EDA95F0(a1, *(_QWORD *)(a2 + 8));
  return sub_22F32DD9C(*(_QWORD **)a1, v4 & 0xFFFFFFFFFFFFFFFELL, v6, *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28));
}

uint64_t sub_22EDABA2C(uint64_t a1, uint64_t a2)
{
  return sub_22ED725B0(a1, *(_QWORD *)(a2 + 16));
}

uint64_t sub_22EDABA34(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v6;
  unint64_t v7;
  char v9;
  void *v10;
  uint64_t v11;
  _QWORD v12[9];

  v2 = a2;
  v12[8] = *MEMORY[0x24BDAC8D0];
  v9 = 0;
  v10 = v12;
  v11 = 0x800000000;
  v4 = *(_DWORD *)(a2 + 72);
  if (v4 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v2 + 72);
  }
  if ((sub_22EDB52C0(a1, (unsigned __int8 **)(v2 + 16), v4, 0, (uint64_t)&v10, &v9) & 1) != 0)
  {
    v2 = 1;
  }
  else if (*(_DWORD *)(*a1 + 11992) != -1 || v9 != 0)
  {
    v6 = *(unsigned int *)(v2 + 80);
    v7 = *(unsigned int *)(v2 + 76) | (unint64_t)(v6 << 32);
    v2 = sub_22E983290((_QWORD *)*a1, v7, v7, v6, (void **)v10, v11, *(_DWORD *)(v2 + 84), 1);
  }
  if (v10 != v12)
    free(v10);
  return v2;
}

uint64_t sub_22EDABB40(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  v2 = a2;
  v4 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ED725B0(a1, *(_QWORD *)(v2 + 24));
  v6 = v5;
  if ((v5 & 1) != 0)
    return 1;
  v7 = *a1;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(_QWORD *)(v2 + 16) != (v4 & 0xFFFFFFFFFFFFFFFELL)
    || *(_QWORD *)(v2 + 24) != (v5 & 0xFFFFFFFFFFFFFFFELL))
  {
    v8 = *(_DWORD *)v2;
    if (((*(_DWORD *)v2 >> 18) & 0x3Eu) - 22 <= 9)
      return sub_22EB4785C(*a1, 0, *(_DWORD *)(v2 + 4), (v8 >> 18) & 0x3F, v4 & 0xFFFFFFFFFFFFFFFELL, v5 & 0xFFFFFFFFFFFFFFFELL);
    v10 = *(_DWORD *)(v7 + 56);
    v11 = *(_QWORD *)(v7 + 1296);
    v16 = *(_QWORD *)(*(_QWORD *)(v7 + 80) + 520);
    if ((v8 & 0x1000000) != 0)
    {
      v13 = 32;
      if (*(_DWORD *)v2 == 113)
        v13 = 48;
      v12 = *(_QWORD *)(v2 + v13);
    }
    else
    {
      v12 = 0;
    }
    sub_22E51A8D0(&v17, *(_QWORD *)(v7 + 72));
    v14 = *a1;
    *(_DWORD *)(v14 + 56) = v17 & ~HIDWORD(v12) | HIDWORD(v12) & v12;
    *(_QWORD *)(v14 + 1296) = v12;
    v2 = sub_22EB4785C(*a1, 0, *(_DWORD *)(v2 + 4), (*(_DWORD *)v2 >> 18) & 0x3F, v4 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(v7 + 56) = v10;
    *(_QWORD *)(v7 + 1296) = v11;
    v15 = *(_QWORD *)(v7 + 80);
    *(_QWORD *)(v15 + 520) = v16;
    *(_DWORD *)(v15 + 528) = v16;
  }
  return v2;
}

__n128 sub_22EDABCD4(uint64_t *a1, _DWORD *a2, __n128 a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;
  __n128 v13;
  int v14;

  v5 = *a1;
  v6 = *(_DWORD *)(*a1 + 56);
  v7 = *(_QWORD *)(*a1 + 1296);
  a3.n128_u64[0] = *(_QWORD *)(*(_QWORD *)(*a1 + 80) + 520);
  v13 = a3;
  if ((*a2 & 0x1000000) != 0)
  {
    v9 = 8;
    if (*a2 == 113)
      v9 = 12;
    v8 = *(_QWORD *)&a2[v9];
  }
  else
  {
    v8 = 0;
  }
  sub_22E51A8D0(&v14, *(_QWORD *)(v5 + 72));
  v10 = *a1;
  *(_DWORD *)(v10 + 56) = v14 & ~HIDWORD(v8) | HIDWORD(v8) & v8;
  *(_QWORD *)(v10 + 1296) = v8;
  sub_22EDABB40(a1, (uint64_t)a2);
  *(_DWORD *)(v5 + 56) = v6;
  *(_QWORD *)(v5 + 1296) = v7;
  v11 = *(_QWORD *)(v5 + 80);
  result = v13;
  *(_QWORD *)(v11 + 520) = v13.n128_u64[0];
  *(_DWORD *)(v11 + 528) = v13.n128_u32[0];
  return result;
}

uint64_t sub_22EDABDA4(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  void *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v23[10];
  void *v24;
  __int128 v25;
  _BYTE v26[16];
  char v27;
  void *v28;
  uint64_t v29;
  _BYTE v30[32];
  _QWORD *v31;
  uint64_t v32;
  _QWORD v33[6];

  v33[4] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 16);
  sub_22F32F84C((_QWORD *)*a1, *(_DWORD *)(v4 + 24), 0);
  v5 = sub_22F30914C(*a1);
  *(_DWORD *)(*(_QWORD *)(v5 + 1424) + 48) = *(_DWORD *)(*(_QWORD *)(v5 + 1424) + 48) & 0xFFFFDFFF | (((*(_DWORD *)(v4 + 48) >> 13) & 1) << 13);
  *(_DWORD *)(*(_QWORD *)(v5 + 1424) + 48) = *(_DWORD *)(*(_QWORD *)(v5 + 1424) + 48) & 0xFFFF7FFF | (((*(_DWORD *)(v4 + 48) >> 15) & 1) << 15);
  v31 = v33;
  v32 = 0x400000000;
  v28 = v30;
  v29 = 0x400000000;
  v6 = sub_22F3C22A4(a2);
  v7 = v6;
  v8 = 0;
  v24 = v26;
  v25 = xmmword_22F44E350;
  v27 = 0;
  v9 = *(_QWORD *)(v4 + 72);
  v10 = *(_DWORD *)(v4 + 80);
  if ((*(_BYTE *)(v6 + 23) & 4) != 0)
    v8 = sub_22E47E270(v6);
  if (sub_22EDAA6A0((uint64_t *)a1, v9, v10, 0, v8, (uint64_t)&v28, (uint64_t)&v31, (uint64_t)&v24))
  {
    v20 = *a1;
  }
  else
  {
    v11 = sub_22EDA95F0((unsigned int *)a1, *(_QWORD *)(v7 + 24));
    sub_22E4913B4(v7, (uint64_t)v23);
    if (v27)
    {
      sub_22F24FB88(&v24, v29);
      v12 = v24;
    }
    else
    {
      v12 = 0;
    }
    v23[8] = v12;
    *(_QWORD *)(v5 + 1440) = sub_22EE80544((_QWORD *)*a1, v11, (unint64_t *)v28, v29, *((unsigned int *)a1 + 20), a1[11], (uint64_t)v23);
    if ((_DWORD)v32)
      sub_22F3ACFA8(*(_DWORD **)(v5 + 1424), v31, v32);
    if ((*(_BYTE *)(v4 + 49) & 0x80) == 0)
    {
      *(_BYTE *)(v5 + 1408) = 0;
      *(_QWORD *)(v5 + 1416) = v11;
    }
    v13 = (unsigned __int16 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 64))(*(_QWORD *)(a2 + 16));
    v19 = sub_22EDB5A70((uint64_t *)a1, v13, 0, v14, v15, v16, v17, v18);
    v20 = *a1;
    if ((v19 & 1) == 0)
    {
      v21 = sub_22EB4ADC8(v20, *(_DWORD *)(*(_QWORD *)(a2 + 16) + 24), (_QWORD *)(v19 & 0xFFFFFFFFFFFFFFFELL));
      goto LABEL_12;
    }
  }
  sub_22F32F928(v20);
  v21 = 1;
LABEL_12:
  if (v24 != v26)
    free(v24);
  if (v28 != v30)
    free(v28);
  if (v31 != v33)
    free(v31);
  return v21;
}

uint64_t sub_22EDAC01C(uint64_t a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  const void **v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;

  v4 = (void **)(a2 + 32);
  if ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFF) != 2)
  {
    v5 = 8 * ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFFu) - 2);
    v6 = (const void **)(a2 + 32);
    do
    {
      v7 = *v6++;
      sub_22E3BA850(a1 + 32, v7);
      v5 -= 8;
    }
    while (v5);
  }
  v8 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 16));
  if ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFF) != 2)
  {
    v9 = 8 * ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFFu) - 2);
    do
    {
      v10 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 32), *v4);
      v11 = *(_QWORD *)(a1 + 40);
      if (v11 == *(_QWORD *)(a1 + 32))
        v12 = 52;
      else
        v12 = 48;
      if (v10 != (void **)(v11 + 8 * *(unsigned int *)(a1 + v12)))
      {
        *v10 = (void *)-2;
        ++*(_DWORD *)(a1 + 56);
      }
      ++v4;
      v9 -= 8;
    }
    while (v9);
  }
  return v8;
}

uint64_t sub_22EDAC104(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  v4 = **(_QWORD **)(a2 + 16);
  if (v4)
  {
    v5 = *a1;
    sub_22F0D5A50(*(_QWORD *)(a2 + 24));
    sub_22EB4E494(v5, v6, v4, 1);
  }
  return sub_22ED725B0(a1, *(_QWORD *)(a2 + 24));
}

uint64_t sub_22EDAC160(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  int v4;
  unsigned __int8 *v5;
  int v6;
  BOOL v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  unsigned __int8 **v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  unsigned __int8 **v17;
  int v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  int v26;
  char v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  unsigned __int8 **v38;
  uint64_t **v39;
  unsigned __int8 **v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t i;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  int v63;
  int v64;
  void *v65[2];
  _BYTE v66[64];
  void *v67;
  uint64_t v68;
  _QWORD v69[10];

  v2 = (uint64_t)a2;
  v69[8] = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a2 + 8);
  if (v4)
  {
    if (v4 == 1)
      goto LABEL_9;
    v5 = a2 + 40;
    v6 = *a2;
    v7 = v6 == 119;
    if (v6 == 119)
      v8 = a2;
    else
      v8 = 0;
    v9 = v8 + 48;
    if (v7)
      v5 = v9;
    if (sub_22EFFF908(*((unsigned __int8 **)v5 + 1)))
    {
LABEL_9:
      v10 = *(unsigned __int8 *)v2;
      v11 = v10 == 119;
      if (v10 == 119)
        v12 = v2;
      else
        v12 = 0;
      v13 = (unsigned __int8 **)(v12 + 48);
      if (!v11)
        v13 = (unsigned __int8 **)(v2 + 40);
      if (!sub_22EFFF908(*v13) && (*(_DWORD *)v2 & 0x100000) == 0)
      {
        v14 = *(_DWORD *)v2;
        v15 = v14 == 119;
        if (v14 == 119)
          v16 = v2;
        else
          v16 = 0;
        v17 = (unsigned __int8 **)(v16 + 48);
        if (!v15)
          v17 = (unsigned __int8 **)(v2 + 40);
        return sub_22EDB5554((uint64_t *)a1, *v17, 0);
      }
    }
  }
  if (*(_BYTE *)v2 != 119)
  {
    v19 = *(_DWORD *)(v2 + 4);
    goto LABEL_24;
  }
  v47 = **(_QWORD **)(v2 + 40);
  for (i = v47; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_85;
      v49 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v49 <= 0x39)
        break;
LABEL_80:
      if (sub_22F115668(i))
        v47 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_101;
    }
    if (v49 == 24)
      goto LABEL_100;
    if (v49 == 26)
      break;
    if (((1 << v49) & 0x20000000200003CLL) == 0)
      goto LABEL_80;
LABEL_85:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_85;
LABEL_100:
  v47 = i;
LABEL_101:
  v19 = sub_22F115668(v47);
LABEL_24:
  v20 = *(_DWORD *)(a1 + 80);
  v21 = *(_QWORD *)(a1 + 88);
  if (v19)
  {
    *(_DWORD *)(a1 + 80) = v19;
    *(_QWORD *)(a1 + 88) = 0;
  }
  v22 = sub_22EDA95F0((unsigned int *)a1, *(_QWORD *)(v2 + 8));
  if (v22 < 0x10)
    goto LABEL_33;
  v23 = v22;
  v24 = *(void **)(v2 + 16);
  v65[0] = v24;
  v67 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), v65, &v67)
    && v67 != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
  {
    v24 = (void *)*((_QWORD *)v67 + 1);
  }
  if (!v24)
  {
LABEL_33:
    v2 = 1;
    goto LABEL_73;
  }
  v61 = 0;
  v65[0] = v66;
  v65[1] = (void *)0x800000000;
  v25 = *(_QWORD *)a1;
  v26 = *(_DWORD *)v2;
  if ((*(_DWORD *)v2 & 0x100000) == 0
    || ((v28 = *(_DWORD *)(*(_QWORD *)(v25 + 3688) + 576 * *(unsigned int *)(v25 + 3696) - 576), v28 <= 3)
      ? (v29 = v28 == 2)
      : (v29 = 1),
        v29))
  {
    v27 = 1;
  }
  else
  {
    v27 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(v25 + 72) + 1) & 2) != 0)
    {
      v67 = 0;
      v63 = 3;
      v64 = 1;
      v62 = *(unsigned int *)(v25 + 1704);
      sub_22EB4DDB8(v25 + 3688, &v64, (int *)&v62, (__int16 *)(v25 + 1693), (uint64_t *)&v67, &v63);
      v30 = *(unsigned int *)(v25 + 3696);
      v31 = v30 - 2;
      v32 = *(_QWORD *)(v25 + 3688);
      v33 = *(_DWORD *)(v32 + 576 * (v30 - 2));
      if (v33 == 5)
      {
        *(_BYTE *)(v32 + 576 * v30 - 4) = *(_BYTE *)(v32 + 576 * v31 + 572);
        v34 = 1;
      }
      else if (v33 == 2)
      {
        *(_BYTE *)(v32 + 576 * v30 - 4) = 1;
        v34 = *(_BYTE *)(v32 + 576 * v31 + 573) != 0;
      }
      else
      {
        v34 = 0;
        *(_BYTE *)(v32 + 576 * v30 - 4) = 0;
      }
      v35 = v32 + 576 * v30;
      *(_BYTE *)(v35 - 3) = v34;
      *(_WORD *)(v25 + 1693) = 0;
      if (*(_DWORD *)(v25 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v25 + 1776), (llvm::SmallPtrSetImplBase *)(v35 - 560));
        sub_22EAEAE08(v25 + 1840, (uint64_t *)(v35 - 496));
      }
      v27 = 0;
      v26 = *(unsigned __int8 *)v2;
    }
  }
  v36 = v26 == 119;
  if (v26 == 119)
    v37 = v2;
  else
    v37 = 0;
  v38 = (unsigned __int8 **)(v37 + 48);
  v39 = (uint64_t **)(v2 + 40);
  if (v36)
    v40 = v38;
  else
    v40 = (unsigned __int8 **)(v2 + 40);
  if (sub_22EDB52C0((uint64_t *)a1, v40, *(_DWORD *)(v2 + 32), 1, (uint64_t)v65, &v61))
  {
    if ((v27 & 1) == 0)
      sub_22EB48E64(v25);
    v2 = 1;
    goto LABEL_71;
  }
  if ((v27 & 1) == 0)
    sub_22EB48E64(v25);
  v41 = *(_QWORD *)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1 || v23 != *(_QWORD *)(v2 + 8) || v24 != *(void **)(v2 + 16) || v61)
  {
    if (*(_BYTE *)v2 != 119)
    {
      v43 = *(_DWORD *)(v2 + 4);
      goto LABEL_66;
    }
    v57 = *(_QWORD *)a1;
    v59 = v20;
    v50 = **v39;
    v51 = v50;
    while (1)
    {
      if ((v51 & 0xF) != 0)
        goto LABEL_97;
      v52 = *(unsigned __int8 *)(*(_QWORD *)(v51 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v52 > 0x39)
      {
LABEL_92:
        if (sub_22F115668(v51))
          v50 = v51;
        v51 = sub_22F115B7C(v51);
        if (!v51)
          goto LABEL_115;
      }
      else
      {
        if (v52 == 24)
          goto LABEL_114;
        if (v52 == 26)
        {
          if ((*(_BYTE *)(v51 + 23) & 0x10) != 0)
          {
LABEL_114:
            v50 = v51;
LABEL_115:
            v43 = sub_22F115668(v50);
            v41 = v57;
            v20 = v59;
LABEL_66:
            v44 = v43;
            v45 = *(_DWORD *)v2;
            v46 = *(_QWORD *)(v2 + 24);
            v67 = v69;
            v68 = 0x800000000;
            if ((sub_22EACCC94(v41) & 1) != 0)
              v2 = 1;
            else
              v2 = sub_22EACC4D8(*(_QWORD *)a1, v44, v23, (uint64_t)v24, (v45 >> 18) & 1, (uint64_t *)v67, v68, (v45 & 0x80000) != 0, (v45 & 0x100000) != 0, (v45 & 0x200000) != 0, (v45 & 0x400000) != 0, v56, (v45 >> 23) & 7, v46);
            if (v67 != v69)
              free(v67);
            goto LABEL_71;
          }
        }
        else if (((1 << v52) & 0x20000000200003CLL) == 0)
        {
          goto LABEL_92;
        }
LABEL_97:
        v51 = sub_22F115B7C(v51);
      }
    }
  }
  if (*(_BYTE *)v2 != 119)
  {
    v42 = *(_DWORD *)(v2 + 4);
    goto LABEL_63;
  }
  v60 = v21;
  v58 = *(_QWORD *)a1;
  v53 = **v39;
  v54 = v53;
  while (2)
  {
    while (2)
    {
      if ((v54 & 0xF) != 0)
        goto LABEL_113;
      v55 = *(unsigned __int8 *)(*(_QWORD *)(v54 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v55 > 0x39)
      {
LABEL_108:
        if (sub_22F115668(v54))
          v53 = v54;
        v54 = sub_22F115B7C(v54);
        if (!v54)
          goto LABEL_117;
        continue;
      }
      break;
    }
    if (v55 == 24)
      break;
    if (v55 != 26)
    {
      if (((1 << v55) & 0x20000000200003CLL) != 0)
        goto LABEL_113;
      goto LABEL_108;
    }
    if ((*(_BYTE *)(v54 + 23) & 0x10) == 0)
    {
LABEL_113:
      v54 = sub_22F115B7C(v54);
      continue;
    }
    break;
  }
  v53 = v54;
LABEL_117:
  v42 = sub_22F115668(v53);
  v41 = v58;
  v21 = v60;
LABEL_63:
  sub_22EB4E494(v41, v42, v24, 1);
LABEL_71:
  if (v65[0] != v66)
    free(v65[0]);
LABEL_73:
  *(_DWORD *)(a1 + 80) = v20;
  *(_QWORD *)(a1 + 88) = v21;
  return v2;
}

uint64_t sub_22EDAC868(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 **v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  BOOL v20;
  unsigned __int8 *v21;
  unsigned __int8 **v22;
  unsigned __int8 **v23;
  char v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v29[2];
  char v30;
  uint64_t v31;
  int v32;
  int v33;
  void *v34[2];
  _QWORD v35[9];

  v35[8] = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned __int8 **)(a2 + 40);
  v5 = sub_22EDBF364(a1, *((uint64_t **)a2 + 5));
  if (!v5)
    return 1;
  v6 = (uint64_t *)v5;
  v7 = *((_QWORD *)a2 + 2);
  v29[0] = v7;
  v34[0] = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), v29, v34)
    && v34[0] != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
  {
    v7 = *((_QWORD *)v34[0] + 1);
  }
  if (!v7)
    return 1;
  v30 = 0;
  v34[0] = v35;
  v34[1] = (void *)0x800000000;
  if (*((_DWORD *)a2 + 8) >= 9u)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  v8 = *(_QWORD *)a1;
  v9 = *(_DWORD *)a2;
  if ((*(_DWORD *)a2 & 0x100000) == 0
    || ((v12 = *(_DWORD *)(*(_QWORD *)(v8 + 3688) + 576 * *(unsigned int *)(v8 + 3696) - 576), v12 <= 3)
      ? (v13 = v12 == 2)
      : (v13 = 1),
        v13))
  {
    v10 = 1;
  }
  else
  {
    v10 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(v8 + 72) + 1) & 2) != 0)
    {
      v29[0] = 0;
      v32 = 3;
      v33 = 1;
      v31 = *(unsigned int *)(v8 + 1704);
      sub_22EB4DDB8(v8 + 3688, &v33, (int *)&v31, (__int16 *)(v8 + 1693), v29, &v32);
      v14 = *(unsigned int *)(v8 + 3696);
      v15 = v14 - 2;
      v16 = *(_QWORD *)(v8 + 3688);
      v17 = *(_DWORD *)(v16 + 576 * (v14 - 2));
      if (v17 == 5)
      {
        *(_BYTE *)(v16 + 576 * v14 - 4) = *(_BYTE *)(v16 + 576 * v15 + 572);
        v18 = 1;
      }
      else if (v17 == 2)
      {
        *(_BYTE *)(v16 + 576 * v14 - 4) = 1;
        v18 = *(_BYTE *)(v16 + 576 * v15 + 573) != 0;
      }
      else
      {
        v18 = 0;
        *(_BYTE *)(v16 + 576 * v14 - 4) = 0;
      }
      v19 = v16 + 576 * v14;
      *(_BYTE *)(v19 - 3) = v18;
      *(_WORD *)(v8 + 1693) = 0;
      if (*(_DWORD *)(v8 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v8 + 1776), (llvm::SmallPtrSetImplBase *)(v19 - 560));
        sub_22EAEAE08(v8 + 1840, (uint64_t *)(v19 - 496));
      }
      v10 = 0;
      v9 = *a2;
    }
  }
  v20 = v9 == 119;
  if (v9 == 119)
    v21 = a2;
  else
    v21 = 0;
  v22 = (unsigned __int8 **)(v21 + 48);
  if (v20)
    v23 = v22;
  else
    v23 = v4;
  v24 = sub_22EDB52C0((uint64_t *)a1, v23, *((_DWORD *)a2 + 8), 1, (uint64_t)v34, &v30);
  if ((v10 & 1) == 0)
    sub_22EB48E64(v8);
  if ((v24 & 1) != 0)
  {
    v11 = 1;
  }
  else
  {
    v25 = *(_QWORD *)a1;
    if (*(_DWORD *)(*(_QWORD *)a1 + 11992) == -1 && v6 == (uint64_t *)*v4 && v7 == *((_QWORD *)a2 + 2) && !v30)
    {
      v26 = sub_22F060A34((uint64_t)a2);
      sub_22EB4E494(v25, v26, v7, 1);
      v27 = sub_22EBCC6C0(*(_QWORD *)a1, (uint64_t)a2);
    }
    else
    {
      v29[0] = *v6;
      v29[1] = (uint64_t)(v6 + 1);
      sub_22F1167E8(v29);
      sub_22F3C57CC(a2);
      v27 = sub_22EBBC368();
    }
    v11 = v27;
  }
  if (v34[0] != v35)
    free(v34[0]);
  return v11;
}

uint64_t sub_22EDACBA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = a2;
  v4 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(v2 + 16);
  if (v5)
  {
    v16 = *(_QWORD *)(v2 + 16);
    v17 = 0;
    if (sub_22E793870((uint64_t *)(a1 + 8), &v16, &v17))
    {
      if (v17 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
      {
        v5 = *(_QWORD *)(v17 + 8);
        if (!v5)
          return 1;
      }
    }
  }
  v6 = *(_QWORD *)a1;
  v7 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1 || *(_QWORD *)(v2 + 24) != v7 || v5 != *(_QWORD *)(v2 + 16))
    return sub_22EBC2B50(v6, *(_DWORD *)(v2 + 4), (*(_DWORD *)v2 >> 18) & 1, (*(_DWORD *)v2 >> 19) & 1, v7);
  if (v5)
  {
    sub_22EB4E494(v6, *(unsigned int *)(v2 + 4), v5, 1);
    v7 = *(_QWORD *)(v2 + 24);
  }
  if ((*(_BYTE *)(v7 + 1) & 0x80) == 0)
  {
    v9 = *(_QWORD *)(*(_QWORD *)a1 + 88);
    v10 = sub_22F0602E8(v2);
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22EF5BA38(v9, v10) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v11)
    {
      if (*(_BYTE *)(v11 + 16) == 45)
      {
        v12 = sub_22F114198(*(_QWORD *)(v11 + 24));
        v13 = *(_QWORD *)a1;
        v14 = *(unsigned int *)(v2 + 4);
        v15 = sub_22EC6602C(v13, v12);
        sub_22EB4E494(v13, v14, v15 & 0xFFFFFFFFFFFFFFF8, 1);
      }
    }
  }
  return v2;
}

uint64_t sub_22EDACD28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  _QWORD v30[3];
  void *v31[2];
  _DWORD v32[66];
  uint64_t v33;

  v2 = a2;
  v33 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 16);
  if (v4 && (sub_22EFFFB48(*(unsigned __int8 **)(a2 + 16)) & 1) == 0)
  {
    v13 = sub_22ED725B0(a1, v4);
    if ((v13 & 1) != 0)
      return 1;
    v31[0] = 0;
    LOBYTE(v30[0]) = 0;
    v14 = (*(_DWORD *)v2 & 0x40000) != 0 ? 36 : 25;
    v15 = sub_22EBCD1E4(*(unsigned int **)a1, 0, v13 & 0xFFFFFFFFFFFFFFFELL, *(unsigned int *)(v2 + 4), v14, (unint64_t *)v31, v30);
    v7 = v15;
    if ((v15 & 1) != 0)
      return 1;
    v8 = v31[0];
    v5 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    v5 = sub_22EDA95F0((unsigned int *)a1, *(_QWORD *)(v2 + 24));
    v6 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0);
    if (!v6 || *(_BYTE *)(v6 + 16) != 39)
      v6 = sub_22F10CF48(v6);
    v7 = 0;
    v4 = 0;
    v8 = *(void **)(v6 + 32);
  }
  v9 = *(unsigned int *)v2;
  if ((v9 & 0x100000) != 0)
  {
    v11 = (_DWORD *)(v2 + 72);
    if ((v9 & 0x80000) != 0 && *v11)
      v12 = *(unsigned int *)(v2 + 84);
    else
      v12 = 0;
    v10 = *(_QWORD *)&v11[8 * v12 + 4 * ((v9 >> 19) & 1)];
  }
  else
  {
    v10 = 0;
  }
  v30[0] = v10;
  v31[0] = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), v30, v31)
    && v31[0] != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
  {
    v10 = *((_QWORD *)v31[0] + 1);
  }
  v16 = *(_QWORD *)(v2 + 32);
  if (v16)
  {
    v17 = sub_22ED72930((uint64_t *)a1, v16, *(void **)(v2 + 40), (unint64_t)v8, v10);
    if (!v17)
      return 1;
    v19 = v17;
    v20 = v18;
  }
  else
  {
    v20 = 0;
    v19 = 0;
  }
  if ((*(_BYTE *)(v2 + 2) & 8) != 0)
    v21 = *(_DWORD *)(v2 + 80);
  else
    v21 = 0;
  sub_22EDBA834((unint64_t)v30, a1, (uint64_t *)(v2 + 48));
  if (!v30[0])
    return 1;
  v22 = *(unsigned int *)v2;
  if ((v22 & 0x80000) != 0 && (v23 = *(_DWORD *)(v2 + 72)) != 0)
  {
    v24 = *(_DWORD *)(v2 + 76);
    v31[0] = v32;
    v31[1] = (void *)0x800000000;
    v32[64] = v23;
    v32[65] = v24;
    v25 = v2 + 72 + 16 * ((v22 >> 19) & 1);
    if ((sub_22EDBF678(a1, v25, v25 + 32 * *(unsigned int *)(v2 + 84)) & 1) != 0)
      v2 = 1;
    else
      v2 = sub_22F3012E8((_QWORD **)a1, v7 & 0xFFFFFFFFFFFFFFFELL, v5, (*(_DWORD *)v2 >> 18) & 1, *(_DWORD *)(v2 + 4), v19, v20, v21, v10, (uint64_t)v30, (uint64_t)v31);
    if (v31[0] != v32)
      free(v31[0]);
  }
  else
  {
    if (v4 != (v7 & 0xFFFFFFFFFFFFFFFELL)
      || *(_DWORD *)(*(_QWORD *)a1 + 11992) != -1
      || v5 != *(_QWORD *)(v2 + 24)
      || v19 != *(_QWORD *)(v2 + 32)
      || v20 != *(_QWORD *)(v2 + 40)
      || v30[0] != *(_QWORD *)(v2 + 48))
    {
      return sub_22F3012E8((_QWORD **)a1, v7 & 0xFFFFFFFFFFFFFFFELL, v5, (v22 >> 18) & 1, *(_DWORD *)(v2 + 4), v19, v20, v21, v10, (uint64_t)v30, 0);
    }
    if ((v22 & 0x100000) != 0)
    {
      v27 = (_DWORD *)(v2 + 72);
      if ((v22 & 0x80000) != 0 && *v27)
        v28 = *(unsigned int *)(v2 + 84);
      else
        v28 = 0;
      v26 = *(_QWORD *)&v27[8 * v28 + 4 * ((v22 >> 19) & 1)];
    }
    else
    {
      v26 = 0;
    }
    if (v10 != v26)
      return sub_22F3012E8((_QWORD **)a1, v7 & 0xFFFFFFFFFFFFFFFELL, v5, (v22 >> 18) & 1, *(_DWORD *)(v2 + 4), v19, v20, v21, v10, (uint64_t)v30, 0);
  }
  return v2;
}

uint64_t sub_22EDAD090(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  void *v37[2];
  _QWORD v38[5];

  v2 = a2;
  v38[4] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 32);
  if (v4)
  {
    v5 = sub_22ED725B0(a1, v4);
    if ((v5 & 1) != 0)
      return 1;
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_QWORD *)(v2 + 40);
  if (!v7 || (*(_BYTE *)(v7 + 1) & 0x20) == 0)
    v7 = *(_QWORD *)(v2 + 48);
  v37[0] = v38;
  v37[1] = (void *)0x200000000;
  v8 = *a1;
  v35 = 7;
  v36 = v7;
  sub_22EE7377C(v8, (uint64_t)&v35, (uint64_t)v37);
  v9 = *(_DWORD *)(v2 + 28);
  v10 = v9 != 0;
  v11 = v9 != 0;
  v12 = v9 - 1;
  if (v11)
    v13 = v12;
  else
    v13 = 0;
  v14 = *a1;
  v15 = *(_DWORD *)(*a1 + 11992);
  *(_DWORD *)(*a1 + 11992) = -1;
  v16 = *(_QWORD *)(v2 + 40);
  if (v16)
  {
    v17 = sub_22ED725B0(a1, v16);
    if ((v17 & 1) != 0)
      goto LABEL_18;
  }
  else
  {
    v17 = 0;
  }
  v18 = *(_QWORD *)(v2 + 48);
  if (!v18)
  {
    v19 = 0;
    goto LABEL_20;
  }
  v19 = sub_22ED725B0(a1, v18);
  if ((v19 & 1) == 0)
  {
LABEL_20:
    v20 = *a1;
    if (*(_DWORD *)(v20 + 11992) != -1
      || *(_QWORD *)(v2 + 40) != (v17 & 0xFFFFFFFFFFFFFFFELL)
      || *(_QWORD *)(v2 + 48) != (v19 & 0xFFFFFFFFFFFFFFFELL))
    {
      v22 = *(_DWORD *)(v2 + 16);
      if (!v22)
      {
        v23 = *(_QWORD *)(v2 + 40);
        if (v23 && (*(_BYTE *)(v23 + 1) & 0x20) != 0)
        {
          sub_22F0D5A50(v23);
          v22 = v24;
        }
        else
        {
          v22 = *(_DWORD *)(v2 + 20);
        }
      }
      v25 = v13 | (v10 << 32);
      v26 = v17 & 0xFFFFFFFFFFFFFFFELL;
      v27 = *(_DWORD *)(v2 + 56);
      v28 = v19 & 0xFFFFFFFFFFFFFFFELL;
      v30 = *(_DWORD *)(v2 + 20);
      v29 = *(_DWORD *)(v2 + 24);
      if (!v29)
      {
        v31 = *(_QWORD *)(v2 + 40);
        if (!v31 || (v29 = *(_DWORD *)(v2 + 20), (*(_BYTE *)(v31 + 1) & 0x20) == 0))
        {
          v32 = *(_QWORD *)(v2 + 48);
          v34 = v22;
          v33 = v26;
          sub_22F0D60E4(v32);
          v26 = v33;
          v22 = v34;
        }
      }
      v2 = sub_22F34AF2C(v20, v6, v22, v26, v27, v30, v28, v29, v25);
    }
    goto LABEL_23;
  }
LABEL_18:
  v2 = 1;
LABEL_23:
  *(_DWORD *)(v14 + 11992) = v15;
  if (v37[0] != v38)
    free(v37[0]);
  return v2;
}

uint64_t sub_22EDAD2BC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int v10;
  char v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v2 = a2;
  v4 = sub_22EDA95F0((unsigned int *)a1, *(_QWORD *)(a2 + 8));
  if (v4 < 0x10)
    return 1;
  v5 = v4;
  v6 = *(_QWORD *)(v2 + 16);
  v13 = v6;
  v14 = 0;
  if (sub_22E793870(a1 + 1, &v13, &v14) && v14 != a1[1] + 16 * *((unsigned int *)a1 + 6))
    v6 = *(_QWORD *)(v14 + 8);
  if (!v6)
    return 1;
  v7 = *a1;
  if (*(_DWORD *)(*a1 + 11992) == -1 && v5 == *(_QWORD *)(v2 + 8) && v6 == *(_QWORD *)(v2 + 16))
  {
    sub_22EB4E494(v7, *(unsigned int *)(v2 + 24), v6, 1);
  }
  else
  {
    v9 = *(_DWORD *)(v2 + 24);
    v10 = *(unsigned __int8 *)(v2 + 28);
    v11 = v10 & 1;
    v12 = (v10 >> 1) & 1;
    v2 = sub_22E3CD3D4(*(_QWORD *)(v7 + 88) + 2032, 32, 3);
    sub_22F2F3990(v2, v9, v5, v6, v11, v12);
  }
  return v2;
}

uint64_t sub_22EDAD3CC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t *v5;
  unsigned int v6;
  _BOOL4 v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  _QWORD v50[10];

  v2 = a2;
  v50[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EDBF364((uint64_t)a1, *(uint64_t **)(a2 + 32));
  if (!v4)
    return 1;
  v5 = (unint64_t *)v4;
  v6 = *(_DWORD *)v2;
  v7 = (*(_DWORD *)v2 & 0x80000) == 0;
  if ((*(_DWORD *)v2 & 0x80000) == 0)
  {
    v8 = 0;
    v9 = 0;
    v10 = *(_DWORD *)v2;
    goto LABEL_10;
  }
  v11 = *(_QWORD *)(v2 + 56);
  if (!v11)
  {
    v12 = 0;
    v10 = *(_DWORD *)v2;
    goto LABEL_9;
  }
  v12 = sub_22ED725B0(a1, v11);
  if ((v12 & 1) != 0)
    return 1;
  v10 = *(_DWORD *)v2;
LABEL_9:
  v8 = v12 & 0xFFFFFFFFFFFFFFFELL;
  v9 = 1;
LABEL_10:
  v45 = 0;
  v48 = v50;
  v49 = 0x800000000;
  v13 = (_QWORD *)(v2 + 56);
  if ((v10 & 0x1800000) != 0)
    v14 = ((v10 >> 19) & 1) + 1;
  else
    v14 = (v10 >> 19) & 1;
  if ((sub_22EDB52C0(a1, (unsigned __int8 **)&v13[v14], *(_DWORD *)(v2 + 4), 1, (uint64_t)&v48, &v45) & 1) != 0)
    goto LABEL_14;
  v15 = *(unsigned int *)v2;
  if ((v15 & 0x1800000) != 0)
  {
    v16 = (v15 >> 19) & 1;
    v17 = v13[v16];
    if (v17)
    {
      v18 = sub_22EDB5554(a1, (unsigned __int8 *)v13[v16], 1);
      if ((v18 & 1) != 0)
        goto LABEL_14;
    }
    else
    {
      v18 = 0;
    }
  }
  else
  {
    v18 = 0;
    v17 = 0;
  }
  v43 = v18;
  v44 = v8;
  v19 = *(_QWORD *)(v2 + 16);
  if (!v19
    || (v46 = *(_QWORD *)(v2 + 16), v47 = 0, !sub_22E793870(a1 + 1, &v46, &v47))
    || v47 == a1[1] + 16 * *((unsigned int *)a1 + 6)
    || (v19 = *(_QWORD *)(v47 + 8)) != 0)
  {
    v42 = v9;
    v20 = *(_QWORD *)(v2 + 24);
    if (!v20
      || (v46 = *(_QWORD *)(v2 + 24), v47 = 0, !sub_22E793870(a1 + 1, &v46, &v47))
      || v47 == a1[1] + 16 * *((unsigned int *)a1 + 6)
      || (v20 = *(_QWORD *)(v47 + 8)) != 0)
    {
      v21 = *a1;
      if (*(_DWORD *)(*a1 + 11992) == -1 && v5 == *(unint64_t **)(v2 + 32))
      {
        if ((*(_BYTE *)(v2 + 2) & 8) != 0 && *v13)
        {
          if ((v6 & 0x80000) == 0)
          {
            v22 = *v5;
            goto LABEL_32;
          }
          v7 = v44 == *v13;
        }
        if (v17 == (v43 & 0xFFFFFFFFFFFFFFFELL)
          && v7
          && v19 == *(_QWORD *)(v2 + 16)
          && v20 == *(_QWORD *)(v2 + 24)
          && !v45)
        {
          if (v19)
            sub_22EB4E494(v21, *(unsigned int *)(v2 + 40), v19, 1);
          if (v20)
            sub_22EB4E494(*a1, *(unsigned int *)(v2 + 40), v20, 1);
          if ((*(_BYTE *)(v2 + 2) & 8) != 0)
          {
            v36 = *(_QWORD *)(*(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF0);
            if (!v36 || *(_BYTE *)(v36 + 16) != 39)
              v36 = sub_22F10CF48(v36);
            if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v36 + 32) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0)
            {
              v37 = *(_QWORD *)(*a1 + 88);
              v38 = *(_QWORD *)(*(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF0);
              if (!v38 || *(_BYTE *)(v38 + 16) != 39)
                v38 = sub_22F10CF48(v38);
              v39 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22EF5BA38(v37, *(_QWORD *)(v38 + 32)) & 0xFFFFFFFFFFFFFFF0)
                                          + 8) & 0xFFFFFFFFFFFFFFF0);
              if (v39)
              {
                if (*(_BYTE *)(v39 + 16) == 45)
                {
                  v40 = sub_22F114198(*(_QWORD *)(v39 + 24));
                  v41 = sub_22EC6602C(*a1, v40) & 0xFFFFFFFFFFFFFFF8;
                  if (v41)
                    sub_22EB4E494(*a1, *(unsigned int *)(v2 + 40), v41, 1);
                }
              }
            }
          }
          goto LABEL_49;
        }
      }
      v22 = *v5;
      if ((v6 & 0x80000) != 0)
      {
        v24 = v42;
        goto LABEL_43;
      }
LABEL_32:
      v23 = sub_22EF5C728(*(_QWORD *)(v21 + 88), v22);
      v24 = v42;
      if (v23)
      {
        v25 = v23;
        v26 = *(unsigned __int8 *)(v23 + 16);
        if (v26 == 3)
        {
          v31 = *(_QWORD *)(v23 + 48);
          if (v31)
            goto LABEL_42;
        }
        else if (v26 == 2)
        {
          v27 = *(_QWORD *)(*a1 + 88);
          v28 = sub_22EF67C8C(v27);
          v29 = *(_DWORD *)(v2 + 40);
          v30 = sub_22E3CD3D4(v27 + 2032, 32, 3);
          v31 = sub_22EFF8F1C(v30, v27, v25 + 40, v28, v29);
LABEL_42:
          v22 = *(_QWORD *)(v25 + 32);
          v24 = 1;
          v44 = v31;
        }
      }
LABEL_43:
      v32 = *(_DWORD *)v2;
      if ((*(_DWORD *)v2 & 0x2000000) != 0)
      {
        v34 = (v32 >> 19) & 1;
        if ((v32 & 0x1800000) != 0)
          ++v34;
        v33 = v13[v34 + *(_DWORD *)(v2 + 4)];
      }
      else
      {
        v33 = 0;
      }
      v2 = sub_22EBBD504(*a1, *(unsigned int *)(v2 + 40) | ((unint64_t)*(unsigned int *)(v2 + 40) << 32), (v32 >> 18) & 1, *(unsigned int *)(v2 + 40), (uint64_t)v48, v49, *(unsigned int *)(v2 + 40), v33, v22, v5, v44, v24, *(_QWORD *)(v2 + 48), (unsigned __int8 *)(v43 & 0xFFFFFFFFFFFFFFFELL));
      goto LABEL_49;
    }
  }
LABEL_14:
  v2 = 1;
LABEL_49:
  if (v48 != v50)
    free(v48);
  return v2;
}

uint64_t sub_22EDAD858(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v14[3];
  int v15;
  uint64_t v16;
  int v17;

  v4 = *a1;
  v17 = 0;
  v16 = 0;
  v15 = 3;
  *(_QWORD *)v14 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v17, v14, (__int16 *)(v4 + 1693), &v16, &v15);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  v11 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 16));
  if ((v11 & 1) != 0)
  {
    a2 = 1;
  }
  else
  {
    v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(a2 + 16) != v12)
      a2 = sub_22F3321E4(*a1, *(_QWORD *)(a2 + 24), v12, HIDWORD(*(_QWORD *)(a2 + 24)));
  }
  sub_22EB48E64(v4);
  return a2;
}

uint64_t sub_22EDAD9CC(unsigned int **a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  int v29;
  int v30;
  uint64_t v31;
  unsigned __int16 v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  __int128 v52;
  void *v53[2];
  char v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  __int128 v58;
  void *v59[2];
  uint64_t v60;
  unsigned int v61;
  _QWORD *v62;

  v4 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v55 = 0;
  v54 = 0;
  v5 = (*(_BYTE *)(a2 + 24) & 1) != 0 ? 36 : 25;
  v6 = sub_22EBCD1E4(*a1, 0, v4 & 0xFFFFFFFFFFFFFFFELL, *(unsigned int *)(a2 + 28), v5, &v55, &v54);
  if ((v6 & 1) != 0)
    return 1;
  v7 = v55;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(void **)(a2 + 40);
  if (!v8)
  {
    v12 = 0;
    goto LABEL_12;
  }
  v10 = sub_22ED72930((uint64_t *)a1, v8, v9, v55, 0);
  if (!v10)
    return 1;
  v12 = v10;
  v9 = v11;
LABEL_12:
  v52 = 0u;
  *(_OWORD *)v53 = 0u;
  sub_22E8ACE30((uint64_t)&v52, v12, (uint64_t)v9);
  v15 = *(_QWORD *)(a2 + 64);
  v16 = v15 & 0xFFFFFFFFFFFFFFFELL;
  if ((v15 & 1) != 0 || !v16)
  {
    if (v7 >= 0x10 && (*(_BYTE *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
    {
      v18 = *(_DWORD *)(a2 + 72);
      if ((v15 & 1) != 0)
        v16 = v15 | 1;
      else
        v16 = 1;
    }
    else
    {
      v19 = sub_22EBB87FC(*a1, *(unsigned int *)(a2 + 60), (_QWORD *)((v15 << 63 >> 63) & v16), *(_DWORD *)(a2 + 72), 0, (uint64_t)&v52, v55, 0);
      if (!v19)
        goto LABEL_82;
      v20 = v19;
      if (v19 >= 0x10)
      {
        v22 = *(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0);
        if (v22 && *(_BYTE *)(v22 + 16) == 57)
          v20 = *(_QWORD *)(v22 + 8);
      }
      else
      {
        v20 = 0;
      }
      v23 = sub_22EF579A8(*((_QWORD *)*a1 + 11), v20, *(_DWORD *)(a2 + 72));
      v16 = (unint64_t)v23 & 0xFFFFFFFFFFFFFFFELL;
      v18 = sub_22F115668(*v23);
    }
  }
  else
  {
    if (*(_QWORD *)v16 >= 0x10uLL && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v16 & 0xFFFFFFFFFFFFFFF0) + 17) & 2) != 0)
    {
      v21 = sub_22EDBF918((uint64_t *)a1, *(_QWORD *)v16, (unsigned int *)(v16 + 8), v7, (uint64_t)&v52);
      if (!v21)
        goto LABEL_82;
      v16 = (unint64_t)v21 & 0xFFFFFFFFFFFFFFFELL;
      v17 = *v21;
    }
    else
    {
      v17 = *(_QWORD *)v16;
    }
    v18 = sub_22F115668(v17);
  }
  v24 = *(_QWORD **)(a2 + 48);
  if (!v24)
    goto LABEL_38;
  v58 = 0u;
  *(_OWORD *)v59 = 0u;
  v25 = *v24;
  if (*v24 <= 0xFuLL || (*(_BYTE *)(*(_QWORD *)(v25 & 0xFFFFFFFFFFFFFFF0) + 17) & 2) == 0)
    goto LABEL_38;
  v24 = sub_22EDBF918((uint64_t *)a1, v25, (unsigned int *)v24 + 2, v7, (uint64_t)&v58);
  if (HIDWORD(v59[1]))
    free(v59[0]);
  if (v24)
  {
LABEL_38:
    v26 = v6 & 0xFFFFFFFFFFFFFFFELL;
    v27 = *(unsigned int *)(a2 + 28);
    v28 = *(_BYTE *)(a2 + 24);
    v29 = *(_DWORD *)(a2 + 56);
    v30 = *(_DWORD *)(a2 + 60);
    if ((*(_BYTE *)(v26 + 1) & 0x80) != 0
      || (v31 = *(_QWORD *)(v26 + 8), (v16 & 1) != 0) && (v16 & 0xFFFFFFFFFFFFFFFELL) != 0)
    {
LABEL_41:
      if ((v28 & 1) != 0)
        v32 = 36;
      else
        v32 = 25;
      v33 = sub_22EBCD92C((uint64_t)*a1, v26, v27, v32, (uint64_t)&v52, v24, v29, v30, v16, v18);
      goto LABEL_45;
    }
    v34 = v31 & 0xFFFFFFFFFFFFFFF0;
    v35 = *(_QWORD *)(v31 & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      if (!v35 || *(_BYTE *)(v35 + 16) != 39)
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v35 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39
          || (v49 = *(_QWORD *)(v26 + 8),
              v50 = *(unsigned int *)(a2 + 28),
              v38 = sub_22F10CF48(v35),
              v31 = v49,
              v27 = v50,
              !v38))
        {
LABEL_58:
          v51 = v27;
          v39 = v31;
          if ((v16 & 1) != 0)
            v40 = 0;
          else
            v40 = (_QWORD *)(v16 & 0xFFFFFFFFFFFFFFFELL);
          v60 = sub_22EFC6B40((_QWORD *)(*((_QWORD *)*a1 + 11) + 15224), *v40 & 7 | *(_QWORD *)((*v40 & 0xFFFFFFFFFFFFFFF0) + 8));
          v61 = v18;
          sub_22EFC6D6C((uint64_t)&v62, v60);
          v62 = v40;
          if (!v24)
            goto LABEL_67;
          v41 = *v24;
          v42 = *(_QWORD *)(*v24 & 0xFFFFFFFFFFFFFFF0);
          if (v42 && (*(_DWORD *)(v42 + 16) & 0xFE) == 0x2C
            || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v42 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x2C
            && (v43 = sub_22F10CF48(v42), v41 = *v24, v43))
          {
            sub_22E8ACD1C((uint64_t)&v52, *((_QWORD *)*a1 + 11), 0, v41, (uint64_t)(v24 + 1), v29);
LABEL_67:
            v33 = sub_22EC225CC(*a1, v26, v39, v51, v28 & 1, (uint64_t)&v52, 0, 0, (uint64_t)&v60, 0, 0, 0);
LABEL_45:
            v13 = v33;
            goto LABEL_83;
          }
          v44 = *a1;
          v45 = v41;
          while (1)
          {
            if ((v45 & 0xF) != 0)
              goto LABEL_79;
            v46 = *(unsigned __int8 *)(*(_QWORD *)(v45 & 0xFFFFFFFFFFFFFFF0) + 16);
            if (v46 > 0x39)
            {
LABEL_74:
              if (sub_22F115668(v45))
                v41 = v45;
              v45 = sub_22F115B7C(v45);
              if (!v45)
                goto LABEL_81;
            }
            else
            {
              if (v46 == 24)
                goto LABEL_80;
              if (v46 == 26)
              {
                if ((*(_BYTE *)(v45 + 23) & 0x10) != 0)
                {
LABEL_80:
                  v41 = v45;
LABEL_81:
                  v47 = sub_22F115668(v41);
                  sub_22E8FCA40(v44, v47, 0xCEFu, 0, (uint64_t)&v58);
                  v57 = *v24;
                  v48 = sub_22E8901B8((uint64_t)&v58, &v57);
                  v56 = (**((_DWORD **)*a1 + 9) >> 8) & 1;
                  sub_22E89519C(v48, (unsigned int *)&v56);
                  sub_22E903BEC((unsigned int *)&v58);
                  goto LABEL_82;
                }
              }
              else if (((1 << v46) & 0x20000000200003CLL) == 0)
              {
                goto LABEL_74;
              }
LABEL_79:
              v45 = sub_22F115B7C(v45);
            }
          }
        }
        v35 = *(_QWORD *)v34;
        if (*(_BYTE *)(*(_QWORD *)v34 + 16) != 39)
        {
          v35 = sub_22F10CF48(v35);
          v31 = v49;
          v27 = v50;
        }
      }
      v36 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v35 + 32) & 0xFFFFFFFFFFFFFFF0) + 8);
    }
    else
    {
      v36 = *(_QWORD *)(v35 + 8);
    }
    v37 = *(_QWORD *)(v36 & 0xFFFFFFFFFFFFFFF0);
    if (!v37 || *(_BYTE *)(v37 + 16) != 45)
      goto LABEL_41;
    goto LABEL_58;
  }
LABEL_82:
  v13 = 1;
LABEL_83:
  if (HIDWORD(v53[1]))
    free(v53[0]);
  return v13;
}

uint64_t sub_22EDADF2C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int *v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[2];
  uint64_t v30;
  _QWORD v31[2];
  void *v32;
  uint64_t v33;
  _BYTE v34[16];
  _QWORD v35[6];

  v35[4] = *MEMORY[0x24BDAC8D0];
  memset(v29, 0, sizeof(v29));
  sub_22F05FD5C(a2, v29);
  v4 = sub_22ED725B0(a1, *((_QWORD *)&v29[0] + 1));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ED725B0(a1, *(_QWORD *)&v29[1]);
  if ((v5 & 1) != 0)
    return 1;
  v27 = v5;
  v28 = v4;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v32 = v34;
  v33 = 0x200000000;
  v31[0] = a2[2];
  v31[1] = *((_QWORD *)&v29[1] + 1);
  v9 = 1;
  do
  {
    v10 = v7;
    v11 = sub_22EFFED0C((unsigned __int8 *)v31[v8]);
    if (*v11 == 141)
    {
      v12 = sub_22EFFED0C(*(unsigned __int8 **)&v11[v11[3]]);
      if (*v12 == 161)
      {
        v13 = v12;
        v14 = v12 + 16;
        if ((*(_DWORD *)(*((_QWORD *)v12 + 2) + 28) & 0x7Eu) - 54 >= 4)
        {
          sub_22F05FD5C(a2, v35);
          v15 = *(unsigned int *)v13;
          if ((v15 & 0x100000) != 0)
            v16 = (unsigned int *)&v13[16 * ((v15 >> 18) & 1) + 32];
          else
            v16 = (unsigned int *)v14;
          v17 = *(_QWORD *)v16;
          v30 = *(_QWORD *)v16;
          v35[0] = 0;
          if (sub_22E793870((uint64_t *)(a1 + 8), &v30, v35)
            && v35[0] != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
          {
            v17 = *(_QWORD *)(v35[0] + 8);
          }
          if (!v17)
            goto LABEL_28;
          v18 = *(unsigned int *)v13;
          if ((v18 & 0x100000) != 0)
            v19 = (unsigned int *)&v13[16 * ((v18 >> 18) & 1) + 32];
          else
            v19 = (unsigned int *)v14;
          v20 = v17 != *(_QWORD *)v19;
          v21 = v33;
          if (v33 >= (unint64_t)HIDWORD(v33))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v21 = v33;
          }
          v6 |= v20;
          *((_QWORD *)v32 + v21) = v17 | 3;
          LODWORD(v33) = v33 + 1;
        }
      }
    }
    v7 = 1;
    v8 = 1;
  }
  while ((v10 & 1) == 0);
  v23 = *(_QWORD *)a1;
  v24 = v28 & 0xFFFFFFFFFFFFFFFELL;
  v25 = v27 & 0xFFFFFFFFFFFFFFFELL;
  if ((*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1) | v6 & 1 || *(_OWORD *)((char *)v29 + 8) != __PAIR128__(v25, v24))
  {
    sub_22F05FD5C(a2, v35);
    sub_22EFF605C(v35[3]);
    v9 = sub_22ED1767C(*(_QWORD *)a1, v26, LODWORD(v29[0]), (uint64_t)&v32, v24, v25, 0, 1, 0);
  }
  else
  {
    v35[0] = v28 & 0xFFFFFFFFFFFFFFFELL;
    v35[1] = v27 & 0xFFFFFFFFFFFFFFFELL;
    sub_22F32DC94(v23, a2, 0, v35, 2);
    v9 = (uint64_t)a2;
  }
LABEL_28:
  if (v32 != v34)
    free(v32);
  return v9;
}

uint64_t sub_22EDAE208(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v6[2];

  v2 = a2;
  v4 = (uint64_t *)sub_22ED72360(a1, *(_QWORD *)(a2 + 16));
  if (!v4)
    return 1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1 || v4 != *(uint64_t **)(v2 + 16))
  {
    v6[0] = *v4;
    v6[1] = (uint64_t)(v4 + 1);
    sub_22F1167E8(v6);
    return sub_22EBBC368();
  }
  return v2;
}

uint64_t sub_22EDAE2B0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = a2;
  v4 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 16) != v5)
    return sub_22EBBA860(*a1, *(_DWORD *)(v2 + 4), v5, (*(_DWORD *)v2 >> 18) & 1);
  return v2;
}

uint64_t sub_22EDAE31C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 4) == 0)
  {
    if ((*(_BYTE *)(a2 + 1) & 3) == 0)
      goto LABEL_6;
    v6 = 0;
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (!v7 || *(_BYTE *)(v7 + 16) != 45)
      goto LABEL_13;
    v8 = sub_22F114198(*(_QWORD *)(v7 + 24));
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v8 + 104) + 96), *(_QWORD *)(v8 + 104));
    if ((**(_QWORD **)(v8 + 128) & 0x400) != 0)
      v6 = *(_DWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 576);
    else
LABEL_6:
      v6 = 0;
LABEL_13:
    v11 = *a1;
    sub_22EB4DECC(*a1, v6, 0, 3);
    v15 = sub_22ED725B0(a1, v5);
    if ((v15 & 1) != 0)
    {
      v2 = 1;
    }
    else
    {
      v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if (*(_DWORD *)(*a1 + 11992) != -1 || v16 != (_QWORD *)(*(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFFF8))
        v2 = sub_22EBB98E0(*a1, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 24), v16, *(unsigned int *)(v2 + 28), v12, v13, v14);
    }
    sub_22EB48E64(v11);
    return v2;
  }
  v9 = (uint64_t *)sub_22ED72360(a1, v4 & 0xFFFFFFFFFFFFFFF8);
  if (!v9)
    return 1;
  if (*(_DWORD *)(*a1 + 11992) != -1 || v9 != (uint64_t *)(*(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFFF8))
    return sub_22EBB9700((_QWORD *)*a1, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 24), v9, *(unsigned int *)(v2 + 28));
  return v2;
}

uint64_t sub_22EDAE494(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  char v18;
  int v19[3];
  int v20;
  uint64_t v21;
  int v22;
  void *v23[2];
  _QWORD v24[9];

  v24[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EDBF364((uint64_t)a1, *(uint64_t **)(a2 + 16));
  if (!v4)
    return 1;
  v5 = v4;
  v18 = 0;
  v23[0] = v24;
  v23[1] = (void *)0x800000000;
  if (*(_DWORD *)(a2 + 4) >= 9u)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  if (!*(_DWORD *)(a2 + 24))
  {
    v8 = *a1;
    v9 = *(_DWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 576);
    v10 = v9 > 3 || v9 == 2;
    if (!v10 && (*(_BYTE *)(*(_QWORD *)(v8 + 72) + 1) & 2) != 0)
    {
      v22 = 1;
      v21 = 0;
      v20 = 3;
      *(_QWORD *)v19 = *(unsigned int *)(v8 + 1704);
      sub_22EB4DDB8(v8 + 3688, &v22, v19, (__int16 *)(v8 + 1693), &v21, &v20);
      v11 = *(unsigned int *)(v8 + 3696);
      v12 = v11 - 2;
      v13 = *(_QWORD *)(v8 + 3688);
      v14 = *(_DWORD *)(v13 + 576 * (v11 - 2));
      if (v14 == 5)
      {
        *(_BYTE *)(v13 + 576 * v11 - 4) = *(_BYTE *)(v13 + 576 * v12 + 572);
        v15 = 1;
      }
      else if (v14 == 2)
      {
        *(_BYTE *)(v13 + 576 * v11 - 4) = 1;
        v15 = *(_BYTE *)(v13 + 576 * v12 + 573) != 0;
      }
      else
      {
        v15 = 0;
        *(_BYTE *)(v13 + 576 * v11 - 4) = 0;
      }
      v16 = v13 + 576 * v11;
      *(_BYTE *)(v16 - 3) = v15;
      *(_WORD *)(v8 + 1693) = 0;
      if (*(_DWORD *)(v8 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v8 + 1776), (llvm::SmallPtrSetImplBase *)(v16 - 560));
        sub_22EAEAE08(v8 + 1840, (uint64_t *)(v16 - 496));
      }
      v6 = 1;
      v17 = sub_22EDB52C0(a1, (unsigned __int8 **)(a2 + 32), *(_DWORD *)(a2 + 4), 1, (uint64_t)v23, &v18);
      sub_22EB48E64(v8);
      if ((v17 & 1) != 0)
        goto LABEL_8;
      goto LABEL_6;
    }
  }
  v6 = 1;
  if ((sub_22EDB52C0(a1, (unsigned __int8 **)(a2 + 32), *(_DWORD *)(a2 + 4), 1, (uint64_t)v23, &v18) & 1) == 0)
  {
LABEL_6:
    if (*(_DWORD *)(*a1 + 11992) == -1 && v5 == *(_QWORD *)(a2 + 16) && !v18)
      v6 = a2;
    else
      v6 = sub_22EBBC368();
  }
LABEL_8:
  if (v23[0] != v24)
    free(v23[0]);
  return v6;
}

uint64_t sub_22EDAE72C(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  int v16[3];
  int v17;
  uint64_t v18;
  int v19;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  if ((v4 & 4) != 0)
  {
    v14 = (uint64_t *)sub_22ED72360(a1, v4 & 0xFFFFFFFFFFFFFFF8);
    if (v14)
    {
      if (*((_DWORD *)*a1 + 2998) != -1 || v14 != (uint64_t *)(*(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFFF8))
        return sub_22EBBA098(*a1, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 32), v14, *(_DWORD *)(v2 + 36));
    }
    else
    {
      return 1;
    }
  }
  else
  {
    v5 = (uint64_t)*a1;
    v19 = 0;
    v18 = 0;
    v17 = 3;
    *(_QWORD *)v16 = *(unsigned int *)(v5 + 1704);
    sub_22EB4DDB8(v5 + 3688, &v19, v16, (__int16 *)(v5 + 1693), &v18, &v17);
    v6 = *(unsigned int *)(v5 + 3696);
    v7 = v6 - 2;
    v8 = *(_QWORD *)(v5 + 3688);
    v9 = *(_DWORD *)(v8 + 576 * (v6 - 2));
    if (v9 == 5)
    {
      *(_BYTE *)(v8 + 576 * v6 - 4) = *(_BYTE *)(v8 + 576 * v7 + 572);
      v10 = 1;
    }
    else if (v9 == 2)
    {
      *(_BYTE *)(v8 + 576 * v6 - 4) = 1;
      v10 = *(_BYTE *)(v8 + 576 * v7 + 573) != 0;
    }
    else
    {
      v10 = 0;
      *(_BYTE *)(v8 + 576 * v6 - 4) = 0;
    }
    v11 = v8 + 576 * v6;
    *(_BYTE *)(v11 - 3) = v10;
    *(_WORD *)(v5 + 1693) = 0;
    if (*(_DWORD *)(v5 + 1848))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v5 + 1776), (llvm::SmallPtrSetImplBase *)(v11 - 560));
      sub_22EAEAE08(v5 + 1840, (uint64_t *)(v11 - 496));
    }
    v12 = sub_22ED725B0(a1, *(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFFF8);
    if ((v12 & 1) != 0)
    {
      v2 = 1;
    }
    else
    {
      v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
      if (*((_DWORD *)*a1 + 2998) != -1 || v13 != (*(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFFF8))
        v2 = sub_22EBBA3E8(*a1, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 32), v13, *(_DWORD *)(v2 + 36));
    }
    sub_22EB48E64(v5);
  }
  return v2;
}

uint64_t sub_22EDAE904(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unint64_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  int v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[9];

  v24[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22ED725B0(a1, *(_QWORD *)((char *)a2 + *((unsigned __int8 *)a2 + 3)));
  if ((v4 & 1) != 0)
    return 1;
  v20 = 0;
  v22 = v24;
  v23 = 0x800000000;
  v5 = 1;
  if ((sub_22EDB52C0(a1, (unsigned __int8 **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24)), a2[4], 1, (uint64_t)&v22, &v20) & 1) == 0)
  {
    v6 = *a1;
    v7 = (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL);
    v8 = *a2;
    if (*(_DWORD *)(*a1 + 11992) == -1
      && (*(unsigned __int8 **)((char *)a2 + (v8 >> 24)) == v7 ? (v9 = v20 == 0) : (v9 = 0), v9))
    {
      v5 = sub_22EBCC6C0(*a1, (uint64_t)a2);
    }
    else
    {
      sub_22F0D4E74(v4 & 0xFFFFFFFFFFFFFFFELL);
      v11 = v10;
      v12 = *(_DWORD *)(v6 + 56);
      v13 = *(_QWORD *)(v6 + 1296);
      v19 = *(_QWORD *)(*(_QWORD *)(v6 + 80) + 520);
      v14 = v6;
      if ((v8 & 0x100000) != 0)
      {
        v15 = *(_QWORD *)((char *)&a2[2 * ((v8 >> 18) & 1) + 2 + 2 * a2[4]] + (v8 >> 24));
        sub_22E51A8D0(&v21, *(_QWORD *)(v6 + 72));
        v16 = *a1;
        *(_DWORD *)(v16 + 56) = v21 & ~HIDWORD(v15) | HIDWORD(v15) & v15;
        *(_QWORD *)(v16 + 1296) = v15;
        v14 = *a1;
      }
      v5 = sub_22EB33018(v14, 0, v7, v11, (uint64_t)v22, v23, a2[5], 0);
      *(_DWORD *)(v6 + 56) = v12;
      *(_QWORD *)(v6 + 1296) = v13;
      v17 = *(_QWORD *)(v6 + 80);
      *(_QWORD *)(v17 + 520) = v19;
      *(_DWORD *)(v17 + 528) = v19;
    }
  }
  if (v22 != v24)
    free(v22);
  return v5;
}

uint64_t sub_22EDAEAEC(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unsigned int v9;
  unint64_t v10;
  char v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[9];

  v15[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22ED725B0(a1, *(_QWORD *)((char *)a2 + *((unsigned __int8 *)a2 + 3)));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EDAE904(a1, *(unsigned int **)((char *)a2 + *((unsigned __int8 *)a2 + 3) + 8));
  if ((v5 & 1) != 0)
    return 1;
  v12 = 0;
  v13 = v15;
  v14 = 0x800000000;
  v6 = 1;
  if ((sub_22EDB52C0(a1, (unsigned __int8 **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24)), a2[4], 1, (uint64_t)&v13, &v12) & 1) == 0)
  {
    v7 = *a1;
    if (*(_DWORD *)(v7 + 11992) == -1
      && (*(_QWORD *)((char *)a2 + *((unsigned __int8 *)a2 + 3)) == (v4 & 0xFFFFFFFFFFFFFFFELL)
        ? (v8 = v12 == 0)
        : (v8 = 0),
          v8))
    {
      v10 = sub_22EBCC6C0(v7, (uint64_t)a2);
    }
    else
    {
      sub_22F0D4E74(v4 & 0xFFFFFFFFFFFFFFFELL);
      v10 = sub_22EB33018(v7, 0, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), v9, (uint64_t)v13, v14, a2[5], v5 & 0xFFFFFFFFFFFFFFFELL);
    }
    v6 = v10;
  }
  if (v13 != v15)
    free(v13);
  return v6;
}

uint64_t sub_22EDAEC5C(uint64_t *a1, unsigned int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unint64_t v33;
  _QWORD *v34;
  int v35;
  unsigned __int8 *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  _QWORD v62[18];

  v62[16] = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)((char *)a2 + BYTE3(*(_QWORD *)a2));
  if ((*(_QWORD *)a2 & 0x3E00000000) == 0x2A00000000)
  {
    v5 = sub_22ED725B0(a1, v4[((*(_QWORD *)a2 >> 18) & 1) + 1]);
    if ((v5 & 1) == 0)
    {
      v6 = *a1;
      v7 = (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL);
      sub_22F0D60E4(v5 & 0xFFFFFFFFFFFFFFFELL);
      v9 = sub_22F141A3C(v8, 0, *(_QWORD **)(v6 + 112), *(_DWORD **)(v6 + 72));
      v60 = v62;
      v61 = 0x800000000;
      v10 = 1;
      if ((sub_22EDB52C0(a1, (unsigned __int8 **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 4]+ ((unint64_t)*a2 >> 24)), a2[4] - 1, 1, (uint64_t)&v60, 0) & 1) == 0)
      {
        v11 = a2[7];
        v12 = *a1;
        if ((*(_QWORD *)a2 & 0x3F00000000) == 0x2B00000000)
          v13 = sub_22EB296C0(v12, 0, v7, v9, (uint64_t *)v60, v61, v11);
        else
          v13 = sub_22EB33018(v12, 0, v7, v9, (uint64_t)v60, v61, v11, 0);
        v10 = v13;
      }
      if (v60 != v62)
        free(v60);
      return v10;
    }
    return 1;
  }
  v14 = sub_22ED725B0(a1, *v4);
  if ((v14 & 1) != 0)
    return 1;
  v15 = *(unsigned __int8 **)((char *)&a2[2 * ((*(_QWORD *)a2 >> 18) & 1) + 2] + BYTE3(*(_QWORD *)a2));
  if ((*(_QWORD *)a2 & 0x3F00000000) == 0xB00000000 && *v15 == 163)
    v16 = sub_22EDBFCE4(a1, (uint64_t)v15, 1, 0);
  else
    v16 = sub_22ED725B0(a1, v15);
  v17 = v16;
  if ((v16 & 1) != 0)
    return 1;
  if (a2[4] == 2)
  {
    v18 = sub_22ED725B0(a1, *(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 4] + ((unint64_t)*a2 >> 24)));
    if ((v18 & 1) != 0)
      return 1;
  }
  else
  {
    v18 = 0;
  }
  v20 = *a1;
  v21 = *a2;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || (v22 = (_QWORD *)((char *)a2 + (v21 >> 24)), *v22 != (v14 & 0xFFFFFFFFFFFFFFFELL))
    || (v23 = &v22[(v21 >> 18) & 1], v25 = v23[1], v24 = v23 + 1, v25 != (v17 & 0xFFFFFFFFFFFFFFFELL))
    || a2[4] == 2 && v24[1] != (v18 & 0xFFFFFFFFFFFFFFFELL))
  {
    if ((v21 & 0x100000) != 0)
      v26 = *(_QWORD *)((char *)&a2[2 * ((v21 >> 18) & 1) + 2 + 2 * a2[4]] + (v21 >> 24));
    else
      v26 = 0;
    v27 = *(_DWORD *)(v20 + 56);
    v28 = *(_QWORD *)(v20 + 1296);
    v59 = *(_QWORD *)(*(_QWORD *)(v20 + 80) + 520);
    sub_22E51A8D0(&v60, *(_QWORD *)(v20 + 72));
    v29 = *a1;
    *(_DWORD *)(v29 + 56) = v60 & ~HIDWORD(v26) | HIDWORD(v26) & v26;
    *(_QWORD *)(v29 + 1296) = v26;
    v30 = a2[1] & 0x3F;
    v31 = a2[5];
    v32 = (unsigned __int8 *)(v14 & 0xFFFFFFFFFFFFFFFELL);
    v33 = v17 & 0xFFFFFFFFFFFFFFFELL;
    v34 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFFELL);
    v35 = (v18 & 0xFFFFFFFFFFFFFFFELL) != 0;
    v36 = sub_22EFFBBCC(v32);
    if ((v30 - 37) >= 2)
      v35 = 0;
    if ((*(_DWORD *)v33 & 0x1C00) == 0xC00)
    {
      v37 = sub_22EFFBA54(v30);
      v38 = (_QWORD *)*a1;
      if ((v37 - 21) <= 0xA)
      {
        v10 = sub_22ED27A90(v38, 0, v31, v37, v33, (uint64_t)v34);
LABEL_48:
        v46 = v59;
LABEL_82:
        *(_DWORD *)(v20 + 56) = v27;
        *(_QWORD *)(v20 + 1296) = v28;
        v56 = *(_QWORD *)(v20 + 80);
        *(_QWORD *)(v56 + 520) = v46;
        *(_DWORD *)(v56 + 528) = v46;
        return v10;
      }
      v39 = sub_22EB19A28(v38);
      if ((v39 & 1) != 0)
        goto LABEL_47;
      v33 = v39 & 0xFFFFFFFFFFFFFFFELL;
    }
    if (!v34 || (*(_DWORD *)v34 & 0x1C00) != 0xC00)
    {
LABEL_38:
      if (v30 == 43)
      {
        v41 = *(_QWORD *)(*(_QWORD *)(v33 + 8) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v41 + 17) & 4) == 0
          && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v41 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C)
        {
          v42 = *(_QWORD *)(v34[1] & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v42 + 17) & 4) == 0
            && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v42 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C)
          {
            v43 = *a1;
            sub_22F0D5A50((uint64_t)v36);
            v45 = sub_22EB2AFE4(v43, (uint64_t (**)())v33, v44, v34, v31);
            goto LABEL_55;
          }
        }
      }
      else
      {
        if (v30 == 41)
        {
          if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v33 + 8) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
          {
            v10 = 1;
            goto LABEL_81;
          }
          v45 = sub_22ED1C570();
LABEL_55:
          v10 = v45;
LABEL_81:
          v46 = v59;
          goto LABEL_82;
        }
        v47 = *(_QWORD *)(*(_QWORD *)(v33 + 8) & 0xFFFFFFFFFFFFFFF0);
        v48 = *(_DWORD *)(v47 + 16);
        if (((v34 != 0) & ~v35) != 0)
        {
          if ((v48 & 0x400) == 0
            && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v47 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C)
          {
            v50 = *(_QWORD *)(v34[1] & 0xFFFFFFFFFFFFFFF0);
            if ((*(_BYTE *)(v50 + 17) & 4) == 0
              && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v50 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C)
            {
              sub_22EFFBA54(v30);
              v57 = sub_22EB2D0B8();
              if ((v57 & 1) != 0)
                v10 = 1;
              else
                v10 = v57;
              goto LABEL_81;
            }
          }
        }
        else if ((v48 & 0x400) == 0
               && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v47 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C
               || v30 == 11 && sub_22EB48AD0(*a1, (unsigned __int8 *)v33))
        {
          v49 = sub_22EFFA13C(v30, v35);
          v45 = sub_22EB2EA08(*a1, v31, v49, v33);
          goto LABEL_55;
        }
      }
      v60 = v62;
      v61 = 0x1000000000;
      v51 = *v36;
      v58 = v27;
      if (v51 == 211)
      {
        sub_22E3D0148((uint64_t)&v60, v36 + 64, &v36[8 * *((unsigned int *)v36 + 1) + 64]);
        v52 = (*(_DWORD *)v36 >> 19) & 1;
        v51 = *(_DWORD *)v36;
      }
      else
      {
        v53 = *((_QWORD *)v36 + 2);
        v52 = 0;
        if ((*(_DWORD *)(v53 + 28) & 0x7Eu) - 54 >= 4)
        {
          v62[0] = v53 | 3;
          LODWORD(v61) = 1;
        }
      }
      if (((v34 != 0) & ~v35) != 0)
      {
        if (v30 == 43)
        {
          if (v51 != 161)
            sub_22F0D5A50((uint64_t)v36);
          v27 = v58;
          v10 = sub_22ED18C00();
          goto LABEL_79;
        }
        v54 = sub_22EFFBA54(v30);
        v55 = sub_22ED1767C(*a1, v31, v54, (uint64_t)&v60, v33, (uint64_t)v34, v52, 1, 0);
        if ((v55 & 1) != 0)
          v10 = 1;
        else
          v10 = v55;
      }
      else
      {
        sub_22EFFA13C(v30, v35);
        v10 = sub_22ED1677C();
      }
      v27 = v58;
LABEL_79:
      if (v60 != v62)
        free(v60);
      goto LABEL_81;
    }
    v40 = sub_22EB19A28(*a1);
    if ((v40 & 1) == 0)
    {
      v34 = (_QWORD *)(v40 & 0xFFFFFFFFFFFFFFFELL);
      goto LABEL_38;
    }
LABEL_47:
    v10 = 1;
    goto LABEL_48;
  }
  return sub_22EBCC6C0(*a1, (uint64_t)a2);
}

uint64_t sub_22EDAF39C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v4 = sub_22ED72360(a1, *(_QWORD *)(a2 + 24));
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v6 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 16));
  if ((v6 & 1) != 0)
    return 1;
  else
    return sub_22E95C7F8(*a1, *(_DWORD *)(a2 + 32), v5, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 36));
}

uint64_t sub_22EDAF408(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;

  v2 = a2;
  v4 = sub_22ED72360(a1, *(_QWORD *)(a2 + 24));
  if (!v4)
    return 1;
  v5 = v4;
  v6 = sub_22EFFB374((unsigned __int8 *)v2);
  v7 = sub_22ED725B0(a1, v6);
  if ((v7 & 1) != 0)
    return 1;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || v5 != *(_QWORD *)(v2 + 24)
    || *(_QWORD *)(v2 + 16) != (v7 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22E95CFA4(*a1, *(unsigned int *)(v2 + 32), v5, *(unsigned int *)(v2 + 36), v7 & 0xFFFFFFFFFFFFFFFELL);
  }
  return v2;
}

uint64_t sub_22EDAF4AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;

  v2 = a2;
  v4 = sub_22EDBF364(a1, *(uint64_t **)(a2 + 24));
  if (!v4)
    return 1;
  v5 = v4;
  v6 = sub_22EFFB374((unsigned __int8 *)v2);
  v7 = sub_22ED725B0(a1, v6);
  if ((v7 & 1) != 0)
    return 1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1
    || v5 != *(_QWORD *)(v2 + 24)
    || *(_QWORD *)(v2 + 16) != (v7 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EBBC368();
  }
  return v2;
}

uint64_t sub_22EDAF56C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v2 = a2;
  v4 = sub_22ED72360(a1, *(_QWORD *)(a2 + 24));
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v6 = sub_22ED725B0(a1, *(_QWORD *)(v2 + 16));
  if ((v6 & 1) != 0)
    return 1;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || v5 != *(uint64_t **)(v2 + 24)
    || *(_QWORD *)(v2 + 16) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EC33F14(*a1, *(_DWORD *)(v2 + 32), *(_BYTE *)(v2 + 40) & 3, *(_DWORD *)(v2 + 36), v5, (void *)(v6 & 0xFFFFFFFFFFFFFFFELL));
  }
  return v2;
}

uint64_t sub_22EDAF610(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;

  v3 = sub_22EFFB374(a2);
  return sub_22ED725B0(a1, v3);
}

uint64_t sub_22EDAF63C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;

  v2 = a2;
  v4 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ED725B0(a1, *(_QWORD *)(v2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  v6 = sub_22ED725B0(a1, *(_QWORD *)(v2 + 32));
  if ((v6 & 1) != 0)
    return 1;
  v7 = (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(_DWORD **)(v2 + 16) != v7
    || *(_QWORD *)(v2 + 24) != (v5 & 0xFFFFFFFFFFFFFFFELL)
    || *(_QWORD *)(v2 + 32) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EB4A774(*a1, *(_DWORD *)(v2 + 40), v7, v5 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 44));
  }
  return v2;
}

uint64_t sub_22EDAF700(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8;
  v5 = sub_22ED72360(a1, v4);
  if (!v5)
    return 1;
  v6 = v5;
  v7 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 32));
  if ((v7 & 1) != 0)
    return 1;
  v8 = *a1;
  v9 = *(_QWORD *)(a2 + 32);
  if (v6 == v4 && *(_DWORD *)(v8 + 11992) == -1 && v9 == (v7 & 0xFFFFFFFFFFFFFFFELL))
    return sub_22EBCC6C0(v8, a2);
  sub_22F0D60E4(v9);
  return sub_22EB34874();
}

uint64_t sub_22EDAF7CC(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  void *v16[2];
  void *v17[2];
  _QWORD v18[34];

  v18[33] = *MEMORY[0x24BDAC8D0];
  v4 = *(uint64_t **)(a2 + 80);
  v17[0] = v18;
  v5 = *v4;
  v17[1] = (void *)0x800000000;
  v18[32] = v5;
  if ((sub_22EDBF678((uint64_t)a1, (uint64_t)(v4 + 2), (uint64_t)&v4[4 * *((unsigned int *)v4 + 2) + 2]) & 1) != 0)
  {
    v6 = 1;
  }
  else
  {
    v8 = *(_QWORD *)(a2 + 16);
    v9 = *(_QWORD *)(a2 + 24);
    v10 = *(_DWORD *)(a2 + 32);
    v13 = *(_OWORD *)(a2 + 40);
    v11 = *(_QWORD *)(a2 + 64);
    v14 = *(_QWORD *)(a2 + 56);
    v12 = *(_QWORD *)(a2 + 72);
    v15 = 0u;
    *(_OWORD *)v16 = 0u;
    sub_22E8ACE30((uint64_t)&v15, v8, v9);
    v6 = sub_22F345EB4(*a1, (unsigned int *)&v15, v10, &v13, v11, v12, (uint64_t)v17);
    if (HIDWORD(v16[1]))
      free(v16[0]);
    if ((v6 & 1) != 0)
      v6 = 1;
  }
  if (v17[0] != v18)
    free(v17[0]);
  return v6;
}

uint64_t sub_22EDAF8F0(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v2 = a2;
  v4 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = (uint64_t *)sub_22ED72360(a1, *(_QWORD *)(v2 + 24));
  if (!v5)
    return 1;
  if (*((_DWORD *)*a1 + 2998) != -1
    || v5 != *(uint64_t **)(v2 + 24)
    || *(_QWORD *)(v2 + 16) != (v4 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22F310E84(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, v5, *(_DWORD *)(v2 + 32), *(_DWORD *)(v2 + 36));
  }
  return v2;
}

uint64_t sub_22EDAF988(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EDB5554(a1, *(unsigned __int8 **)(a2 + 24), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22E9FA6A4(*a1, *(_DWORD *)(a2 + 16), v4 & 0xFFFFFFFFFFFFFFFELL, (*(_DWORD *)a2 >> 18) & 1);
}

uint64_t sub_22EDAF9DC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EDB5554(a1, *(unsigned __int8 **)(a2 + 24), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22E9FB1B0(*a1, *(_DWORD *)(a2 + 16), v4 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EDAFA28(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  void **v22;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  void *v30[2];
  void *v31[2];
  _QWORD v32[32];
  uint64_t v33;
  uint64_t v34;

  v2 = a2;
  v34 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 2) & 4) != 0 && (v4 = *(_QWORD *)(a2 + 32)) != 0)
  {
    v5 = sub_22ED72930(a1, v4, *(void **)(v2 + 40), 0, 0);
    if (!v5)
      return 1;
    v7 = v5;
    v8 = v6;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v10 = (uint64_t *)(v2 + 16);
  v9 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)&v29 = v9;
  v31[0] = 0;
  if (sub_22E793870(a1 + 1, &v29, v31) && v31[0] != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
    v9 = *((_QWORD *)v31[0] + 1);
  if (!v9)
    return 1;
  v11 = *(unsigned int *)v2;
  v12 = v2 + 32;
  if ((v11 & 0x100000) != 0)
    v13 = (uint64_t *)(v2 + 32 + 16 * ((v11 >> 18) & 1));
  else
    v13 = (uint64_t *)(v2 + 16);
  v14 = *v13;
  if (*v13 == *(_QWORD *)(v2 + 16))
  {
    v15 = *v13;
    v14 = v9;
  }
  else
  {
    *(_QWORD *)&v29 = *v13;
    v31[0] = 0;
    if (sub_22E793870(a1 + 1, &v29, v31) && v31[0] != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
      v14 = *((_QWORD *)v31[0] + 1);
    if (!v14)
      return 1;
    v15 = *v10;
  }
  v16 = *(_DWORD *)(v2 + 4);
  v17 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)&v27 = *(_QWORD *)(v15 + 40);
  DWORD2(v27) = v16;
  v28 = v17;
  if ((_QWORD)v27)
  {
    sub_22EDBA834((unint64_t)v31, (uint64_t)a1, (uint64_t *)&v27);
    v27 = *(_OWORD *)v31;
    v28 = v32[0];
    v18 = v31[0];
    if (!v31[0])
      return 1;
  }
  else
  {
    v18 = 0;
  }
  v19 = *(unsigned int *)v2;
  if (*(_DWORD *)(*a1 + 11992) == -1)
  {
    if ((v19 & 0x40000) != 0)
    {
      v24 = *(_QWORD *)(v2 + 32);
      v25 = *(_QWORD *)(v2 + 40);
    }
    else
    {
      v24 = 0;
      v25 = 0;
    }
    if (v7 == v24 && v8 == v25 && v9 == *v10)
    {
      v26 = (_QWORD *)((v19 & 0x100000) != 0 ? v12 + 16 * ((v19 >> 18) & 1) : v2 + 16);
      if (v14 == *v26
        && v18 == *(void **)(v9 + 40)
        && ((v19 & 0x80000) == 0 || !*(_DWORD *)(v12 + 16 * ((v19 >> 18) & 1) + 8 * ((v19 >> 20) & 1))))
      {
        sub_22EB22288(*a1, v2, 0);
        return v2;
      }
    }
  }
  v31[0] = v32;
  v31[1] = (void *)0x800000000;
  v33 = 0;
  if ((v19 & 0x80000) == 0
    || (v20 = (_DWORD *)(v12 + 16 * ((v19 >> 18) & 1) + 8 * ((v19 >> 20) & 1)), !*v20))
  {
    v22 = 0;
LABEL_30:
    v29 = 0u;
    *(_OWORD *)v30 = 0u;
    sub_22E8ACE30((uint64_t)&v29, v7, v8);
    v2 = sub_22EB24A3C(*a1, &v29, &v27, v9, v14, v22, 0);
    if (HIDWORD(v30[1]))
      free(v30[0]);
    goto LABEL_32;
  }
  v33 = *(_QWORD *)v20;
  v21 = (uint64_t)&v20[4 * ((v19 >> 19) & 1)];
  v22 = v31;
  if ((sub_22EDBF678((uint64_t)a1, v21, v21 + 32 * v20[3]) & 1) == 0)
    goto LABEL_30;
  v2 = 1;
LABEL_32:
  if (v31[0] != v32)
    free(v31[0]);
  return v2;
}

uint64_t sub_22EDAFD48(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_22EDB5554(a1, *(unsigned __int8 **)(a2 + 24), 0);
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EDB2CE4(a1, *(unsigned int **)(a2 + 32));
  if ((v5 & 1) != 0)
    return 1;
  else
    return sub_22E9FA204((_QWORD *)*a1, *(_DWORD *)(a2 + 16), v4 & 0xFFFFFFFFFFFFFFFELL, (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL));
}

uint64_t sub_22EDAFDB8(uint64_t *a1, uint64_t a2)
{
  return sub_22EDBFCE4(a1, a2, 0, 0);
}

uint64_t sub_22EDAFDC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  unint64_t v52;
  int v53;
  int v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  _BYTE v60[32];
  char *v61;
  uint64_t v62;
  _QWORD v63[12];

  v2 = a2;
  v63[10] = *MEMORY[0x24BDAC8D0];
  v61 = (char *)v63;
  v62 = 0x200000000;
  v4 = sub_22E487828(a2);
  v5 = sub_22ED725B0(a1, v4);
  if ((v5 & 1) != 0)
  {
    v2 = 1;
    goto LABEL_50;
  }
  v58 = v60;
  v59 = 0x400000000;
  if (!((unsigned __int16)*(_DWORD *)(v2 + 20) >> 1))
  {
    LOBYTE(v6) = 0;
    v43 = v5 & 0xFFFFFFFFFFFFFFFELL;
LABEL_42:
    v40 = *(_QWORD **)a1;
    if (*(_DWORD *)(*(_QWORD *)a1 + 11992) == -1)
    {
      if (!((sub_22E487828(v2) != v43) | v6 & 1))
        goto LABEL_48;
      v40 = *(_QWORD **)a1;
    }
    v41 = sub_22EC38374(v40, (uint64_t *)&v61, *(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 20) & 1, v43);
    if ((v41 & 1) != 0)
      v2 = 1;
    else
      v2 = v41;
    goto LABEL_48;
  }
  v6 = 0;
  v43 = v5 & 0xFFFFFFFFFFFFFFFELL;
  v7 = v2 + 32;
  v8 = *(_QWORD *)(v2 + 24) + 8;
  v9 = 24 * ((unsigned __int16)*(_DWORD *)(v2 + 20) >> 1);
  while (1)
  {
    v10 = v6;
    v11 = *(_DWORD *)(v8 - 8);
    if (v11 == 1)
    {
      v20 = sub_22ED725B0(a1, *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 1)));
      if ((v20 & 1) != 0)
        break;
      v21 = v20 & 0xFFFFFFFFFFFFFFFELL;
      v22 = *(_DWORD *)(v8 + 4);
      v6 = 1;
      v51 = 1;
      v52 = v20 & 0xFFFFFFFFFFFFFFFELL;
      v53 = v22;
      v54 = 0;
      v23 = sub_22E84B46C((uint64_t)&v61, (unint64_t)&v51, 1);
      v24 = &v61[40 * v62];
      v25 = *(_QWORD *)(v23 + 32);
      v26 = *(_OWORD *)(v23 + 16);
      *(_OWORD *)v24 = *(_OWORD *)v23;
      *((_OWORD *)v24 + 1) = v26;
      *((_QWORD *)v24 + 4) = v25;
      LODWORD(v62) = v62 + 1;
      if ((v10 & 1) == 0)
        v6 = *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 1)) != v43;
      v27 = v59;
      if (v59 >= (unint64_t)HIDWORD(v59))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v27 = v59;
      }
      *((_QWORD *)v58 + v27) = v21;
      goto LABEL_33;
    }
    if (!v11)
    {
      v12 = *(_QWORD *)v8;
      if ((*(_QWORD *)v8 & 1) != 0)
      {
        v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v39 = *(_QWORD *)(v12 + 40);
        if ((v39 & 7) != 0)
          v13 = 0;
        else
          v13 = v39 & 0xFFFFFFFFFFFFFFF8;
      }
      v55 = 0;
      v56 = v13;
      v57 = *(_QWORD *)(v8 + 8);
      v6 = 1;
      v14 = sub_22E84B46C((uint64_t)&v61, (unint64_t)&v55, 1);
      v15 = &v61[40 * v62];
      v16 = *(_QWORD *)(v14 + 32);
      v17 = *(_OWORD *)(v14 + 16);
      *(_OWORD *)v15 = *(_OWORD *)v14;
      *((_OWORD *)v15 + 1) = v17;
      *((_QWORD *)v15 + 4) = v16;
      LODWORD(v62) = v62 + 1;
      v18 = *(_QWORD *)v8;
      if (*(_QWORD *)v8 && (v18 & 1) == 0)
      {
        v44 = *(_QWORD *)v8;
        v45 = 0;
        if (sub_22E793870((uint64_t *)(a1 + 8), &v44, &v45)
          && v45 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
        {
          v18 = *(_QWORD *)(v45 + 8);
        }
        v19 = *(_QWORD *)v8;
        if ((*(_QWORD *)v8 & 1) != 0)
          v19 = 0;
        v6 = (v18 != v19) | v10;
      }
      goto LABEL_34;
    }
    v28 = sub_22ED725B0(a1, *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 1)));
    if ((v28 & 1) != 0)
      break;
    v29 = sub_22ED725B0(a1, *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 2)));
    if ((v29 & 1) != 0)
      break;
    v30 = v28 & 0xFFFFFFFFFFFFFFFELL;
    v31 = v29 & 0xFFFFFFFFFFFFFFFELL;
    v46 = 2;
    v32 = *(_QWORD *)(v8 + 4);
    v47 = v28 & 0xFFFFFFFFFFFFFFFELL;
    v48 = v29 & 0xFFFFFFFFFFFFFFFELL;
    v49 = v32;
    v50 = 0;
    v6 = 1;
    v33 = sub_22E84B46C((uint64_t)&v61, (unint64_t)&v46, 1);
    v34 = &v61[40 * v62];
    v35 = *(_QWORD *)(v33 + 32);
    v36 = *(_OWORD *)(v33 + 16);
    *(_OWORD *)v34 = *(_OWORD *)v33;
    *((_OWORD *)v34 + 1) = v36;
    *((_QWORD *)v34 + 4) = v35;
    LODWORD(v62) = v62 + 1;
    if ((v10 & 1) == 0)
      v6 = *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 1)) != v30
        || *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 2)) != v31;
    v37 = v59;
    if (v59 >= (unint64_t)HIDWORD(v59))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v37 = v59;
    }
    *((_QWORD *)v58 + v37) = v30;
    v38 = v59 + 1;
    LODWORD(v59) = v38;
    if (v38 >= HIDWORD(v59))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v38 = v59;
    }
    *((_QWORD *)v58 + v38) = v31;
LABEL_33:
    LODWORD(v59) = v59 + 1;
LABEL_34:
    v8 += 24;
    v9 -= 24;
    if (!v9)
      goto LABEL_42;
  }
  v2 = 1;
LABEL_48:
  if (v58 != v60)
    free(v58);
LABEL_50:
  if (v61 != (char *)v63)
    free(v61);
  return v2;
}

uint64_t sub_22EDB0228(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v14[3];
  int v15;
  uint64_t v16;
  int v17;

  v4 = *a1;
  v17 = 0;
  v16 = 0;
  v15 = 3;
  *(_QWORD *)v14 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v17, v14, (__int16 *)(v4 + 1693), &v16, &v15);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  v11 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 32));
  if ((v11 & 1) != 0)
  {
    a2 = 1;
  }
  else
  {
    v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(a2 + 32) != v12)
    {
      sub_22EB48E64(v4);
      return sub_22EBC8E1C(*a1, *(_DWORD *)(a2 + 16) & 0x7FFFFFFF, *(_DWORD *)(a2 + 20), v12, *(_DWORD *)(a2 + 24));
    }
  }
  sub_22EB48E64(v4);
  return a2;
}

uint64_t sub_22EDB03B0(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v9;
  int v10;
  uint64_t v11;
  _BOOL8 v12;
  int v13;
  int v14;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  void *v20[2];

  v2 = a2;
  v4 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = (uint64_t)*a1;
  v6 = *(_QWORD *)(v2 + 16);
  v7 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) != -1 || v6 != v7)
  {
    sub_22F0D60E4(v6);
    v10 = sub_22F141A3C(v9, 0, *(_QWORD **)(v5 + 112), *(_DWORD **)(v5 + 72));
    v11 = *(_QWORD *)(v2 + 24);
    v12 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                     + 8) & 0xFFFFFFFFFFFFFFF0)
                             + 16) == 39;
    v13 = *(_DWORD *)(v2 + 32);
    v14 = v10;
    v19 = 0u;
    *(_OWORD *)v20 = 0u;
    v16 = v11;
    v17 = v13;
    sub_22EFC6D6C((uint64_t)&v18, v11);
    v2 = sub_22EC225CC(*a1, v7, *(_QWORD *)(v7 + 8), v14, v12, (uint64_t)&v19, 0, 0, (uint64_t)&v16, 0, 0, 0);
    if (HIDWORD(v20[1]))
      free(v20[0]);
  }
  return v2;
}

uint64_t sub_22EDB04C4(uint64_t a1, const void **a2)
{
  const void **v3;

  v3 = sub_22EFFB894(a2);
  return sub_22ED725B0(a1, v3);
}

uint64_t sub_22EDB04F0(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;

  v2 = a2;
  v4 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(v2 + 24);
  if (v5)
  {
    v6 = sub_22ED725B0(a1, v5);
    if ((v6 & 1) != 0)
      return 1;
  }
  else
  {
    v6 = 0;
  }
  v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(v2 + 16) == (v4 & 0xFFFFFFFFFFFFFFFELL) && *(_QWORD *)(v2 + 24) == v8)
    return v2;
  return sub_22EB53C74(*a1, *(_DWORD *)(v2 + 32), *(_DWORD *)(v2 + 36), *(_QWORD *)(v2 + 8), (void *)(v4 & 0xFFFFFFFFFFFFFFFELL), v8);
}

uint64_t sub_22EDB0584(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v23;
  void *v24[4];
  void *v25;
  uint64_t v26;
  _QWORD v27[5];

  v27[4] = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 32;
  v6 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 32));
  if ((v6 & 1) != 0)
    return 1;
  v25 = v27;
  v26 = 0x400000000;
  v23 = 0;
  v7 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v7)
  {
    v8 = (v7 + 1);
    v9 = 8 * v7;
    v10 = 1;
    while (1)
    {
      v11 = *(_QWORD *)(v4 + 8);
      v12 = *(_QWORD *)(v4 + 8 * v8);
      if (v12)
      {
        v13 = sub_22ED72360(a1, v12);
        if (!v13)
          break;
        v14 = (void *)v13;
        v15 = v23;
        if (v23 >= 4uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v15 = v23;
        }
        v24[v15] = v14;
      }
      else
      {
        v16 = v23;
        if (v23 >= 4uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v16 = v23;
        }
        v24[v16] = 0;
      }
      ++v23;
      v17 = sub_22ED725B0(a1, v11);
      if ((v17 & 1) != 0)
        break;
      v18 = v26;
      if (v26 >= (unint64_t)HIDWORD(v26))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v18 = v26;
      }
      *((_QWORD *)v25 + v18) = v17 & 0xFFFFFFFFFFFFFFFELL;
      v19 = (v26 + 1);
      LODWORD(v26) = v26 + 1;
      v4 += 8;
      v9 -= 8;
      if (!v9)
      {
        v20 = v23;
        v21 = (uint64_t *)v25;
        goto LABEL_20;
      }
    }
  }
  else
  {
    v19 = 0;
    v20 = 0;
    v21 = v27;
LABEL_20:
    v10 = sub_22EB204CC(*a1, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), (_DWORD *)(v6 & 0xFFFFFFFFFFFFFFFELL), v24, v20, v5, v21, v19);
  }
  if (v25 != v27)
    free(v25);
  return v10;
}

uint64_t sub_22EDB07AC(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  _BOOL4 v9;

  v4 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_DWORD *)(a2 + 28);
  if (!v5)
  {
    sub_22F0D5A50(*(_QWORD *)(a2 + 16));
    v5 = v6;
  }
  v7 = *(_DWORD *)(a2 + 32);
  if (!v7)
    sub_22F0D60E4(*(_QWORD *)(a2 + 16));
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v9 = 1;
  if (v8)
  {
    if (*(_BYTE *)(v8 + 16) == 39)
      v9 = (*(_DWORD *)(v8 + 40) & 6) != 2;
  }
  return sub_22EB54020(*a1, (void *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)(a2 + 24) != 0, v5, v7, v9);
}

uint64_t sub_22EDB0874(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = sub_22EDA95F0((unsigned int *)a1, *(_QWORD *)(a2 + 8));
  if (v6 >= 0x10)
  {
    v7 = v6;
    if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1 || v6 != *(_QWORD *)(v2 + 8))
    {
      v2 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 16, 3);
      sub_22E5018F0(v2, v7);
    }
  }
  else
  {
    v2 = 1;
  }
  *(_DWORD *)(a1 + 80) = v4;
  *(_QWORD *)(a1 + 88) = v5;
  return v2;
}

uint64_t sub_22EDB0910(uint64_t *a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  int v18;
  int v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v22[4] = *MEMORY[0x24BDAC8D0];
  if ((*(_QWORD *)(a2 + 48) & ((uint64_t)(*(_QWORD *)(a2 + 48) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8) != 0)
    v3 = *(_QWORD *)(a2 + 48) & ((uint64_t)(*(_QWORD *)(a2 + 48) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8;
  else
    v3 = a2;
  v16 = 0;
  v4 = *a1;
  v5 = *(_DWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 576);
  if (v5 > 3 || v5 == 2)
  {
    v7 = 1;
  }
  else
  {
    v7 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(v4 + 72) + 1) & 2) != 0)
    {
      v20 = 0;
      v18 = 3;
      v19 = 1;
      v17 = *(unsigned int *)(v4 + 1704);
      sub_22EB4DDB8(v4 + 3688, &v19, (int *)&v17, (__int16 *)(v4 + 1693), (uint64_t *)&v20, &v18);
      v8 = *(unsigned int *)(v4 + 3696);
      v9 = v8 - 2;
      v10 = *(_QWORD *)(v4 + 3688);
      v11 = *(_DWORD *)(v10 + 576 * (v8 - 2));
      if (v11 == 5)
      {
        *(_BYTE *)(v10 + 576 * v8 - 4) = *(_BYTE *)(v10 + 576 * v9 + 572);
        v12 = 1;
      }
      else if (v11 == 2)
      {
        *(_BYTE *)(v10 + 576 * v8 - 4) = 1;
        v12 = *(_BYTE *)(v10 + 576 * v9 + 573) != 0;
      }
      else
      {
        v12 = 0;
        *(_BYTE *)(v10 + 576 * v8 - 4) = 0;
      }
      v13 = v10 + 576 * v8;
      *(_BYTE *)(v13 - 3) = v12;
      *(_WORD *)(v4 + 1693) = 0;
      if (*(_DWORD *)(v4 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v13 - 560));
        sub_22EAEAE08(v4 + 1840, (uint64_t *)(v13 - 496));
      }
      v7 = 0;
    }
  }
  v20 = v22;
  v21 = 0x400000000;
  if ((sub_22EDB52C0(a1, *(unsigned __int8 ***)(v3 + 16), (*(_QWORD *)(v3 + 24) - *(_QWORD *)(v3 + 16)) >> 3, 0, (uint64_t)&v20, &v16) & 1) != 0)v14 = 1;
  else
    v14 = sub_22EB353A0(*a1, *(_DWORD *)(v3 + 40), (uint64_t *)v20, v21, *(_DWORD *)(v3 + 44));
  if (v20 != v22)
    free(v20);
  if ((v7 & 1) == 0)
    sub_22EB48E64(v4);
  return v14;
}

uint64_t sub_22EDB0B28(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a2 + 40);
  if (v4)
  {
    v5 = sub_22ED72930((uint64_t *)a1, v4, *(void **)(a2 + 48), 0, 0);
    if (!v5)
      return 1;
    v7 = v5;
    v8 = v6;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = *(_QWORD *)(a2 + 24);
  v13 = v9;
  v14 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v13, &v14)
    && v14 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
  {
    v9 = *(_QWORD *)(v14 + 8);
  }
  if (v9)
  {
    v10 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 16));
    if ((v10 & 1) == 0)
    {
      v12 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 56, 3);
      return sub_22F2F44CC(v12, v10 & 0xFFFFFFFFFFFFFFFELL, v9, *(_BYTE *)(a2 + 36), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 88) + 16872), 1, v7, v8, *(_DWORD *)(a2 + 32));
    }
  }
  return 1;
}

uint64_t sub_22EDB0C34(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  unint64_t v10;

  v2 = a2;
  v4 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ED725B0(a1, *(_QWORD *)(v2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  v6 = *a1;
  v7 = (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(unsigned __int8 **)(v2 + 16) != v7
    || *(_QWORD *)(v2 + 24) != (v5 & 0xFFFFFFFFFFFFFFFELL))
  {
    v8 = *(_DWORD *)(v2 + 32);
    v10 = v5 & 0xFFFFFFFFFFFFFFFELL;
    return sub_22EB296C0(v6, 0, v7, 0, (uint64_t *)&v10, 1, v8);
  }
  return v2;
}

uint64_t sub_22EDB0CE8(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  const void **v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_DWORD *)(a2 + 4);
  if ((v4 & 0x80000000) == 0)
  {
    v5 = (v4 - 1);
    if ((_DWORD)v5)
    {
      v6 = (const void **)(a2 + 24);
      v7 = 8 * v5;
      do
      {
        v8 = *v6++;
        sub_22E3BA850(a1 + 32, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
  v9 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 16));
  v10 = *(_DWORD *)(a2 + 4);
  if (v10 < 0)
  {
    v11 = (v10 & 0x7FFFFFFFu) - 1;
    if ((_DWORD)v11)
    {
      v12 = (void **)(a2 + 24);
      v13 = 8 * v11;
      do
      {
        v14 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 32), *v12);
        v15 = *(_QWORD *)(a1 + 40);
        if (v15 == *(_QWORD *)(a1 + 32))
          v16 = 52;
        else
          v16 = 48;
        if (v14 != (void **)(v15 + 8 * *(unsigned int *)(a1 + v16)))
        {
          *v14 = (void *)-2;
          ++*(_DWORD *)(a1 + 56);
        }
        ++v12;
        v13 -= 8;
      }
      while (v13);
    }
  }
  return v9;
}

uint64_t sub_22EDB0DD4(uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v3;

  v2 = a2;
  v3 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((v2 & 4) != 0)
    v3 = *(_QWORD *)(v3 + 40);
  return sub_22ED725B0(a1, v3);
}

uint64_t sub_22EDB0DE8(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a2;
  v4 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ED725B0(a1, *(_QWORD *)(v2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  v6 = sub_22ED725B0(a1, *(_QWORD *)(v2 + 32));
  if ((v6 & 1) != 0)
    return 1;
  v7 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) != -1
    || *(_QWORD *)(v2 + 16) != v7
    || *(_QWORD *)(v2 + 24) != (v5 & 0xFFFFFFFFFFFFFFFELL)
    || *(_QWORD *)(v2 + 32) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EB2AC58(*a1, v7, v5 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 4));
  }
  return v2;
}

uint64_t sub_22EDB0EAC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  void *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  unint64_t v30;
  void **v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unsigned int v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  void *v47[2];
  void *v48[2];
  _BYTE v49[129];
  uint64_t v50;
  void *v51[2];
  _OWORD v52[4];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  int v60;
  __int16 v61;
  char v62;
  uint64_t v63;

  v2 = a2;
  v63 = *MEMORY[0x24BDAC8D0];
  v4 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_DWORD *)v2;
  if ((*(_DWORD *)v2 & 0x80000) == 0 || (v6 = *(_QWORD *)(v2 + 48)) == 0)
  {
    v9 = 0;
    v10 = 0;
    if ((v5 & 0x100000) != 0)
      goto LABEL_6;
LABEL_8:
    v11 = 0;
    goto LABEL_9;
  }
  v7 = sub_22ED72930(a1, v6, *(void **)(v2 + 56), 0, 0);
  if (!v7)
    return 1;
  v9 = v7;
  v10 = v8;
  v5 = *(_DWORD *)v2;
  if ((*(_DWORD *)v2 & 0x100000) == 0)
    goto LABEL_8;
LABEL_6:
  v11 = *(_DWORD *)(v2 + 24 * ((v5 >> 19) & 1) + 56);
LABEL_9:
  v12 = *(_QWORD **)(v2 + 24);
  v51[0] = v12;
  v48[0] = 0;
  if (sub_22E793870(a1 + 1, v51, v48) && v48[0] != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
    v12 = (_QWORD *)*((_QWORD *)v48[0] + 1);
  if (!v12)
    return 1;
  if ((*(_BYTE *)(v2 + 2) & 8) != 0)
  {
    v14 = *(_QWORD *)(v2 + 64);
    v13 = *(void **)(v2 + 24);
  }
  else
  {
    v13 = *(void **)(v2 + 24);
    v14 = (unint64_t)v13;
  }
  v15 = (void *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
  v16 = (uint64_t)v12;
  if (v13 != v15)
  {
    v16 = (uint64_t)v15;
    v51[0] = v15;
    v48[0] = 0;
    if (sub_22E793870(a1 + 1, v51, v48) && v48[0] != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
      v16 = *((_QWORD *)v48[0] + 1);
    if (!v16)
      return 1;
  }
  v17 = *a1;
  if (*(_DWORD *)(*a1 + 11992) == -1)
  {
    v18 = *(unsigned int *)v2;
    if (*(_QWORD *)(v2 + 16) == (v4 & 0xFFFFFFFFFFFFFFFELL))
    {
      if ((v18 & 0x80000) != 0)
      {
        v40 = *(_QWORD *)(v2 + 48);
        v41 = *(_QWORD *)(v2 + 56);
      }
      else
      {
        v40 = 0;
        v41 = 0;
      }
      if (v9 == v40 && v10 == v41 && v12 == *(_QWORD **)(v2 + 24))
      {
        v42 = (v18 & 0x80000) != 0 ? *(_QWORD *)(v2 + 64) : (unint64_t)v12;
        if (v16 == (v42 & 0xFFFFFFFFFFFFFFFCLL)
          && ((v18 & 0x100000) == 0 || !*(_DWORD *)(v2 + 24 * ((v18 >> 19) & 1) + 48)))
        {
          sub_22EB52238(*a1, v2);
          return v2;
        }
      }
    }
  }
  else
  {
    LODWORD(v18) = *(_DWORD *)v2;
  }
  v48[0] = v49;
  v48[1] = (void *)0x800000000;
  v50 = 0;
  if ((v18 & 0x100000) != 0)
  {
    v20 = v2 + 24 * ((v18 >> 19) & 1);
    v23 = *(_DWORD *)(v20 + 48);
    v21 = v20 + 48;
    v22 = v23;
    if (v23)
    {
      LODWORD(v50) = v22;
      HIDWORD(v50) = *(_DWORD *)(v21 + 4);
      v24 = v21 + 16 * ((v18 >> 20) & 1);
      if ((sub_22EDBF678((uint64_t)a1, v24, v24 + 32 * *(unsigned int *)(v21 + 12)) & 1) != 0)
      {
LABEL_34:
        v2 = 1;
        goto LABEL_62;
      }
      v17 = *a1;
    }
  }
  sub_22F0D4E74(*(_QWORD *)(v2 + 16));
  v26 = sub_22F141A3C(HIDWORD(v25), 0, *(_QWORD **)(v17 + 112), *(_DWORD **)(v17 + 72));
  v27 = *(_QWORD *)(v2 + 32);
  v28 = *(_DWORD *)(v2 + 40);
  *(_QWORD *)&v44 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 40);
  DWORD2(v44) = v28;
  v45 = v27;
  if ((_QWORD)v44)
  {
    sub_22EDBA834((unint64_t)v51, (uint64_t)a1, (uint64_t *)&v44);
    v44 = *(_OWORD *)v51;
    v45 = *(_QWORD *)&v52[0];
    if (!v51[0])
      goto LABEL_34;
  }
  v29 = v11;
  v30 = *(unsigned int *)v2;
  if ((v30 & 0x100000) != 0)
  {
    if (*(_DWORD *)(v2 + 24 * ((v30 >> 19) & 1) + 48))
      v31 = v48;
    else
      v31 = 0;
  }
  else
  {
    v31 = 0;
  }
  v32 = sub_22EC2624C(*a1, (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), (v30 >> 18) & 1);
  if (v12[5])
  {
    v46 = 0u;
    *(_OWORD *)v47 = 0u;
    sub_22E8ACE30((uint64_t)&v46, v9, v10);
    v33 = v32 & 0xFFFFFFFFFFFFFFFELL;
    v34 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFFFFELL) + 8);
    if ((v30 & 0x40000) != 0
      && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v34 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
    {
      v2 = 1;
    }
    else
    {
      v35 = (_QWORD *)*a1;
      v51[0] = 0;
      v51[1] = (char *)v52 + 8;
      *(_QWORD *)&v52[0] = 0x800000000;
      v53 = 0;
      v54 = 0;
      v55 = 0;
      v56 = v35;
      v57 = v44;
      v58 = v45;
      v59 = xmmword_22F463A40;
      v60 = 16842752;
      v61 = 0;
      v62 = 0;
      sub_22EC56024((uint64_t)v51);
      v36 = *(unsigned int *)(v16 + 28);
      v37 = v52[0];
      if (LODWORD(v52[0]) >= DWORD1(v52[0]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v37 = v52[0];
      }
      *((_QWORD *)v51[1] + v37) = (v36 >> 13) & 3 | v16;
      ++LODWORD(v52[0]);
      LODWORD(v51[0]) = 2;
      sub_22EC561E4((uint64_t)v51);
      v2 = sub_22EC24AB8(*a1, v33, v34, v26, (v30 >> 18) & 1, (uint64_t *)&v46, v29, 0, (uint64_t)v51, (uint64_t)v31, 0, 0, 0);
      if (HIBYTE(v60))
      {
        if (LODWORD(v51[0]) == 5)
        {
          sub_22EC64D18(v56, (uint64_t)v51);
        }
        else if (v54 && (*(_DWORD *)(v56[9] + 52) & 0x400000) != 0)
        {
          sub_22E90B5FC((unint64_t)v56, (uint64_t)v51);
        }
      }
      if (v53)
      {
        v43 = sub_22EC6CBD0(v53);
        MEMORY[0x2348A0E9C](v43, 0x10E0C409F09D3C3);
      }
      if (v51[1] != (char *)v52 + 8)
        free(v51[1]);
    }
    if (!HIDWORD(v47[1]))
      goto LABEL_62;
    v39 = v47[0];
  }
  else
  {
    v38 = (unint64_t)sub_22EB24398(*a1, v32 & 0xFFFFFFFFFFFFFFFELL, v9, v16, (uint64_t)v12);
    if ((v38 & 1) != 0)
    {
      v2 = 1;
      goto LABEL_62;
    }
    *(_OWORD *)v51 = 0u;
    v52[0] = 0u;
    v2 = sub_22EC25974(*a1, v38 & 0xFFFFFFFFFFFFFFFELL, (v30 >> 18) & 1, v26, v51, v12, ((unint64_t)*(unsigned int *)(v16 + 28) >> 13) & 3 | v16, &v44);
    if (!HIDWORD(v52[0]))
      goto LABEL_62;
    v39 = *(void **)&v52[0];
  }
  free(v39);
LABEL_62:
  if (v48[0] != v49)
    free(v48[0]);
  return v2;
}

uint64_t sub_22EDB1470(uint64_t *a1, uint64_t a2)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned __int8 **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void *v21;
  uint64_t v22;
  _BYTE v23[32];
  void *v24[2];
  _BYTE v25[32];
  void *v26;
  uint64_t v27;
  _QWORD v28[6];

  v28[4] = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 32) == 1)
    return sub_22ED725B0(a1, **(_QWORD **)(a2 + 40));
  v5 = sub_22ED72360(a1, *(_QWORD *)(a2 + 16));
  if (v5)
  {
    v6 = (_QWORD *)v5;
    v20 = 0;
    v24[0] = v25;
    v24[1] = (void *)0x400000000;
    v7 = 1;
    if ((sub_22EDB52C0(a1, *(unsigned __int8 ***)(a2 + 40), *(_DWORD *)(a2 + 32), 1, (uint64_t)v24, &v20) & 1) != 0)
      goto LABEL_29;
    if (*(_DWORD *)(*a1 + 11992) == -1 && v6 == *(_QWORD **)(a2 + 16) && !v20)
    {
      v7 = a2;
LABEL_29:
      if (v24[0] != v25)
        free(v24[0]);
      return v7;
    }
    v21 = v23;
    v22 = 0x400000000;
    v8 = *(unsigned int *)(a2 + 32);
    if ((_DWORD)v8)
    {
      v9 = 0;
      LODWORD(v10) = 0;
      v11 = 8 * v8;
      do
      {
        v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + v9) + 8);
        if (v10 >= HIDWORD(v22))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          LODWORD(v10) = v22;
        }
        *((_QWORD *)v21 + v10) = v12;
        v10 = (v22 + 1);
        LODWORD(v22) = v22 + 1;
        v9 += 8;
      }
      while (v11 != v9);
      v13 = (uint64_t *)v21;
      v14 = (unsigned __int8 **)v24[0];
      v15 = *(_QWORD *)(a2 + 24);
      v26 = v28;
      v27 = 0x400000000;
      if ((_DWORD)v10)
      {
        v19 = v15;
        v7 = 1;
        while (1)
        {
          v16 = *v13++;
          v17 = sub_22ECFABE8((uint64_t *)*a1, *v14, v16, 1, 0);
          if ((v17 & 1) != 0)
            goto LABEL_25;
          v18 = v27;
          if (v27 >= (unint64_t)HIDWORD(v27))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v18 = v27;
          }
          *((_QWORD *)v26 + v18) = v17 & 0xFFFFFFFFFFFFFFFELL;
          LODWORD(v27) = v27 + 1;
          ++v14;
          if (!--v10)
          {
            v15 = v19;
            break;
          }
        }
      }
    }
    else
    {
      v15 = *(_QWORD *)(a2 + 24);
      v26 = v28;
      v27 = 0x400000000;
    }
    v7 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 48, 3);
    sub_22F0614DC(v7, *(_QWORD *)(*a1 + 88), v6, (uint64_t *)v26, v27, v15);
LABEL_25:
    if (v26 != v28)
      free(v26);
    if (v21 != v23)
      free(v21);
    goto LABEL_29;
  }
  return 1;
}

uint64_t sub_22EDB1768(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  BOOL v15;
  unsigned int v16;

  v2 = a2;
  v4 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(v2 + 24);
  if (v5)
  {
    v6 = sub_22ED725B0(a1, v5);
    if ((v6 & 1) != 0)
      return 1;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_QWORD *)(v2 + 32);
  if (v7)
  {
    v8 = sub_22ED725B0(a1, v7);
    if ((v8 & 1) != 0)
      return 1;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(_QWORD *)(v2 + 40);
  if (v9)
  {
    v10 = sub_22ED725B0(a1, v9);
    if ((v10 & 1) != 0)
      return 1;
  }
  else
  {
    v10 = 0;
  }
  v12 = *a1;
  v13 = *(_QWORD *)(v2 + 16);
  v14 = (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  v15 = *(_DWORD *)(v12 + 11992) == -1 && v13 == (_QWORD)v14;
  if (v15 && *(_QWORD *)(v2 + 24) == (v6 & 0xFFFFFFFFFFFFFFFELL) && *(_QWORD *)(v2 + 32) == (v8 & 0xFFFFFFFFFFFFFFFELL))
    return v2;
  sub_22F0D60E4(v13);
  return sub_22EB29E14((_QWORD *)v12, v14, v16, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 48), *(_DWORD *)(v2 + 52), v8 & 0xFFFFFFFFFFFFFFFELL, v10 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 56));
}

uint64_t sub_22EDB1888(_QWORD **a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  _QWORD v15[5];

  v15[4] = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)(a2 + 32);
  v5 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 32 + 8 * *(unsigned int *)(a2 + 24)));
  if ((v5 & 1) == 0)
  {
    v14 = 0;
    v6 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v6)
    {
      LOBYTE(v7) = 0;
      v8 = &v4[v6];
      v9 = v4;
      do
      {
        while (1)
        {
          v10 = sub_22ED725B0(a1, *v9);
          if ((v10 & 1) == 0)
            break;
          ++v9;
          v7 = 1;
          if (v9 == v8)
            return v7;
        }
        v11 = v14;
        if (v14 >= 4uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v11 = v14;
        }
        v15[v11] = v10 & 0xFFFFFFFFFFFFFFFELL;
        v12 = ++v14;
        ++v9;
      }
      while (v9 != v8);
      if ((v7 & 1) != 0)
        return 1;
      LODWORD(v6) = *(_DWORD *)(a2 + 24);
    }
    else
    {
      v12 = 0;
    }
    return sub_22EB2BE20(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), (char *)v15, v12, &v4[(v6 + 1)], v6);
  }
  return 1;
}

uint64_t sub_22EDB1A14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  int v6;
  BOOL v7;
  BOOL v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  BOOL v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v51;
  char v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60[4];
  void *v61;
  uint64_t v62;
  _QWORD v63[34];

  v2 = a2;
  v63[32] = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned int *)(a2 + 28);
  memset(v60, 0, sizeof(v60));
  v61 = v63;
  v62 = 0x400000000;
  sub_22E8BB974((uint64_t)&v61, v4, v60);
  v59 = a1;
  v5 = *(_QWORD **)a1;
  v6 = *(_DWORD *)(*(_QWORD *)a1 + 11992);
  v7 = v6 == -1;
  v8 = v6 != -1;
  if ((_DWORD)v4)
  {
    v52 = v8;
    v51 = v4;
    v9 = 0;
    v10 = 0;
    v11 = v2 + 32;
    v53 = v2;
    v54 = v4 << 6;
    v12 = 2;
    v58 = v2 + 32;
    while (1)
    {
      v13 = *(_QWORD *)v11;
      v14 = *(_QWORD *)(*(_QWORD *)v11 + 40);
      v15 = (v14 & 7) != 0 ? 0 : v14 & 0xFFFFFFFFFFFFFFF8;
      v16 = (char *)v61 + v9;
      *(_QWORD *)v16 = v15;
      *((_DWORD *)v16 + 2) = *(_DWORD *)(v13 + 24);
      v17 = *(_DWORD *)(v13 + 24);
      v18 = *(_QWORD *)(v13 + 56);
      if ((v18 & 4) == 0)
        break;
      v41 = v18 & 0xFFFFFFFFFFFFFFF8;
      if (*(_DWORD *)(v41 + 16))
        v42 = ***(_DWORD ***)(v41 + 24);
      else
        v42 = *(_DWORD *)(v13 + 64);
      if (v17 != v42)
      {
        v19 = *(_QWORD *)(v41 + 32);
LABEL_9:
        v20 = sub_22ED72360(v59, v19);
        v21 = sub_22EDA95F0((unsigned int *)v59, *(_QWORD *)(v13 + 48));
        v22 = sub_22EE7D030(*(_QWORD *)v59, v21, v20);
        *(_QWORD *)((char *)v61 + v9 + 16) = v22;
      }
LABEL_10:
      v23 = v58 + 8 * *(unsigned int *)(v2 + 28);
      v24 = v12 - 2;
      v56 = *(_QWORD *)(v23 + 8 * v24);
      v57 = v12 - 1;
      v25 = *(_QWORD *)(v23 + 8 * v57);
      v26 = *(_QWORD *)(v23 + 8 * v12);
      v27 = sub_22ED725B0(v59, v56);
      v55 = v25;
      v28 = sub_22ED725B0(v59, v25);
      v29 = v26;
      v30 = sub_22ED725B0(v59, v26);
      if ((v10 & 1) != 0)
        goto LABEL_19;
      v31 = *(_QWORD *)(v13 + 56);
      v32 = v31 & 0xFFFFFFFFFFFFFFF8;
      v33 = v31 & 0xFFFFFFFFFFFFFFF8;
      if ((v31 & 4) != 0)
        v33 = *(_QWORD *)(v32 + 32);
      if (v33)
      {
        v10 = 1;
        if (*(_QWORD *)((char *)v61 + v9 + 16) < 0x10uLL || (v27 & 1) != 0)
          goto LABEL_20;
      }
      else if ((v27 & 1) != 0)
      {
        goto LABEL_19;
      }
      if (((v28 | v30) & 1) != 0)
      {
LABEL_19:
        v10 = 1;
LABEL_20:
        v2 = v53;
        goto LABEL_21;
      }
      v34 = (char *)v61;
      v35 = (char *)v61 + v9;
      *((_QWORD *)v35 + 3) = v27 & 0xFFFFFFFFFFFFFFFELL;
      *((_QWORD *)v35 + 4) = v28 & 0xFFFFFFFFFFFFFFFELL;
      *((_QWORD *)v35 + 5) = v30 & 0xFFFFFFFFFFFFFFFELL;
      v2 = v53;
      *((_DWORD *)v35 + 12) = *(_DWORD *)(v58
                                        + 8 * *(unsigned int *)(v53 + 28)
                                        + 8 * (3 * *(_DWORD *)(v53 + 28))
                                        + 4 * v24);
      *((_DWORD *)v35 + 13) = *(_DWORD *)(v58
                                        + 8 * *(unsigned int *)(v53 + 28)
                                        + 8 * (3 * *(_DWORD *)(v53 + 28))
                                        + 4 * v57);
      *((_DWORD *)v35 + 14) = *(_DWORD *)(v58
                                        + 8 * *(unsigned int *)(v53 + 28)
                                        + 8 * (3 * *(_DWORD *)(v53 + 28))
                                        + 4 * v12);
      if ((v52 & 1) != 0)
      {
        v10 = 0;
        v36 = 1;
LABEL_39:
        v52 = v36;
        goto LABEL_21;
      }
      if ((v31 & 4) != 0)
        v32 = *(_QWORD *)(v32 + 32);
      if (v32)
      {
        v37 = *(_QWORD *)&v34[v9 + 16];
        if (v37 >= 0x10)
          v38 = *(_QWORD *)(v37 & 0xFFFFFFFFFFFFFFF0);
        else
          v38 = 0;
        v39 = *(_QWORD *)(v13 + 48);
        if (v39 >= 0x10)
          v40 = *(_QWORD *)(v39 & 0xFFFFFFFFFFFFFFF0);
        else
          v40 = 0;
        v10 = 0;
        v52 = 1;
        if (v38 != v40)
          goto LABEL_21;
      }
      else
      {
        v10 = 0;
        v52 = 1;
      }
      if (v56 == (v27 & 0xFFFFFFFFFFFFFFFELL) && v55 == (v28 & 0xFFFFFFFFFFFFFFFELL))
      {
        v10 = 0;
        v36 = v29 != (v30 & 0xFFFFFFFFFFFFFFFELL);
        goto LABEL_39;
      }
LABEL_21:
      v11 += 8;
      v9 += 64;
      v12 += 3;
      if (v54 == v9)
      {
        if ((v10 & 1) != 0)
        {
          v43 = 1;
          goto LABEL_58;
        }
        v4 = v51;
        if ((v52 & 1) != 0)
        {
          v5 = *(_QWORD **)v59;
          goto LABEL_52;
        }
LABEL_57:
        v43 = v2;
        goto LABEL_58;
      }
    }
    if (v17 == *(_DWORD *)(v13 + 64))
      goto LABEL_10;
    v19 = v18 & 0xFFFFFFFFFFFFFFF8;
    goto LABEL_9;
  }
  if (v7)
    goto LABEL_57;
LABEL_52:
  v44 = sub_22EB2C3A8(v5, 0, *(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 20), *(_DWORD *)(v2 + 24), (uint64_t)v61, v62);
  v43 = v44;
  if (v44 >= 2 && (_DWORD)v4)
  {
    v45 = (uint64_t *)(v2 + 32);
    v46 = (uint64_t *)((v44 & 0xFFFFFFFFFFFFFFFELL) + 32);
    do
    {
      v48 = *v45++;
      v47 = v48;
      v49 = *v46++;
      *(_QWORD *)&v60[0] = v47;
      sub_22F25E108((uint64_t *)(v59 + 8), v60)[1] = v49;
      --v4;
    }
    while (v4);
  }
LABEL_58:
  if (v61 != v63)
    free(v61);
  return v43;
}

uint64_t sub_22EDB1E30(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;

  v2 = a2;
  v4 = (uint64_t *)sub_22ED72360(a1, *(_QWORD *)(a2 + 16));
  if (!v4)
    return 1;
  if (*(_DWORD *)(*a1 + 11992) != -1 || v4 != *(uint64_t **)(v2 + 16))
    return sub_22EC2A5E0(*a1, *(_DWORD *)(v2 + 24), v4, *(_DWORD *)(v2 + 28));
  return v2;
}

uint64_t sub_22EDB1E94(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  void *v15[2];

  v2 = a2;
  v4 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = (uint64_t)*a1;
  v6 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) != -1 || *(_QWORD *)(v2 + 16) != v6)
  {
    v8 = *(_DWORD *)(v2 + 24);
    v7 = *(_DWORD *)(v2 + 28);
    v9 = *(unsigned __int8 *)(v2 + 32);
    v14 = 0u;
    *(_OWORD *)v15 = 0u;
    v11 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(v5 + 88) + 15192), "isa", 3uLL);
    v12 = v8;
    sub_22EFC6D6C((uint64_t)&v13, v11);
    v2 = sub_22EC225CC(*a1, v6, *(_QWORD *)(v6 + 8), v7, v9, (uint64_t)&v14, 0, 0, (uint64_t)&v11, 0, 0, 0);
    if (HIDWORD(v15[1]))
      free(v15[0]);
  }
  return v2;
}

uint64_t sub_22EDB1F84(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  unint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  void *v16[2];

  v2 = a2;
  v4 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *a1;
  v6 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(v5 + 11992) != -1 || *(_QWORD *)(v2 + 24) != v6)
  {
    v7 = *(_QWORD *)(v2 + 16);
    v8 = *(_DWORD *)(v2 + 32);
    v9 = *(_BYTE *)(v2 + 40);
    v15 = 0u;
    *(_OWORD *)v16 = 0u;
    v12 = *(_QWORD *)(v7 + 40);
    v13 = v8;
    sub_22EFC6D6C((uint64_t)&v14, v12);
    v10 = sub_22EC225CC((_QWORD *)v5, v6, *(_QWORD *)(v6 + 8), v8, v9 & 1, (uint64_t)&v15, 0, 0, (uint64_t)&v12, 0, 0, 0);
    v2 = v10;
    if ((v9 & 2) != 0 && v10 >= 2)
      *(_BYTE *)((v10 & 0xFFFFFFFFFFFFFFFELL) + 40) |= 2u;
    if (HIDWORD(v16[1]))
      free(v16[0]);
  }
  return v2;
}

uint64_t sub_22EDB2080(uint64_t *a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  void *v35;
  char v36;
  void *v37;
  uint64_t v38;
  _BYTE v39[64];
  void *v40;
  uint64_t v41;
  _QWORD v42[10];

  v42[8] = *MEMORY[0x24BDAC8D0];
  v36 = 0;
  v40 = v42;
  v41 = 0x800000000;
  v4 = *(unsigned __int16 *)(a2 + 24);
  if (v4 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(unsigned __int16 *)(a2 + 24);
  }
  if ((sub_22EDB52C0(a1, (unsigned __int8 **)(a2 + 48), v4, 0, (uint64_t)&v40, &v36) & 1) != 0)
    goto LABEL_27;
  v5 = *(_DWORD *)(a2 + 24);
  if (BYTE2(v5) - 2 >= 2)
  {
    if (BYTE2(v5))
    {
      if ((v5 & 0xFF0000) == 0x10000)
        v10 = *(_QWORD *)(a2 + 40);
      else
        v10 = 0;
      v11 = sub_22ED725B0(a1, v10);
      if ((v11 & 1) != 0)
        goto LABEL_27;
      v12 = *a1;
      v13 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if (*(_DWORD *)(*a1 + 11992) != -1
        || (*(unsigned __int8 *)(a2 + 26) << 16 != 0x10000 ? (v14 = 0) : (v14 = *(_QWORD *)(a2 + 40)),
            v14 != v13 || v36))
      {
        v37 = v39;
        v38 = 0x1000000000;
        sub_22F3C78D4(a2, (uint64_t)&v37);
        v22 = (_QWORD *)(a2 + 16);
        if ((*(_BYTE *)(a2 + 27) & 1) != 0)
        {
          v23 = *v22;
          v22 = (_QWORD *)(*v22 + 40);
        }
        else
        {
          v23 = 0;
        }
        v24 = sub_22EC2DA20(*a1, v13, *(_QWORD *)(v13 + 8), 0, *v22, v23, *(unsigned int *)(a2 + 32));
LABEL_52:
        v20 = v24;
        v35 = v37;
        if (v37 == v39)
          goto LABEL_28;
        goto LABEL_53;
      }
    }
    else
    {
      if ((v5 & 0xFF0000) != 0)
        v9 = 0;
      else
        v9 = *(_QWORD *)(a2 + 40);
      v15 = sub_22ED72360(a1, v9);
      if (!v15)
        goto LABEL_27;
      v16 = (uint64_t *)v15;
      v12 = *a1;
      if (*(_DWORD *)(*a1 + 11992) != -1 || *(_BYTE *)(a2 + 26) || v16 != *(uint64_t **)(a2 + 40) || v36)
      {
        v37 = v39;
        v38 = 0x1000000000;
        sub_22F3C78D4(a2, (uint64_t)&v37);
        v18 = (uint64_t *)(a2 + 16);
        if ((*(_BYTE *)(a2 + 27) & 1) != 0)
        {
          v19 = *v18;
          v18 = (uint64_t *)(*v18 + 40);
        }
        else
        {
          v19 = 0;
        }
        v24 = sub_22EC2F730((_QWORD *)*a1, v16, *v16, 0, *v18, v19, *(_DWORD *)(a2 + 32), v17, (int *)v37, v38, *(unsigned int *)(a2 + 36), (unsigned __int8 **)v40, v41, 0, 0);
        goto LABEL_52;
      }
    }
    v20 = sub_22EBCC6C0(v12, a2);
    goto LABEL_28;
  }
  if ((v5 & 0x1000000) == 0 || (v6 = (uint64_t *)(a2 + 16), !*(_QWORD *)(a2 + 16)))
  {
LABEL_27:
    v20 = 1;
    goto LABEL_28;
  }
  v37 = v39;
  v38 = 0x1000000000;
  sub_22F3C78D4(a2, (uint64_t)&v37);
  v7 = *(_DWORD *)(a2 + 24);
  if ((v7 & 0xFE0000) == 0x20000)
    v8 = *(unsigned int *)(a2 + 28);
  else
    v8 = 0;
  v25 = (uint64_t *)(a2 + 16);
  if ((v7 & 0x1000000) != 0)
    v25 = (uint64_t *)(*v6 + 40);
  v26 = *v25;
  v27 = (int *)v37;
  v28 = v38;
  v29 = sub_22F3C7A10(a2);
  if ((v7 & 0x1000000) != 0)
    v31 = *v6;
  else
    v31 = 0;
  v32 = *(unsigned int *)(a2 + 32);
  v33 = (_QWORD *)*a1;
  if ((*(_BYTE *)(v31 + 58) & 2) != 0)
    v34 = sub_22EC2DA20(v33, 0, v29, v8, v26, v31, v32);
  else
    v34 = sub_22EC2F730(v33, 0, v29, v8, v26, v31, v32, v30, v27, v28, *(unsigned int *)(a2 + 36), (unsigned __int8 **)v40, v41, 0, 0);
  v20 = v34;
  v35 = v37;
  if (v37 != v39)
LABEL_53:
    free(v35);
LABEL_28:
  if (v40 != v42)
    free(v40);
  return v20;
}

uint64_t sub_22EDB2450(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  char v9;
  void *v10;
  uint64_t v11;
  _QWORD v12[9];

  v12[8] = *MEMORY[0x24BDAC8D0];
  v10 = v12;
  v11 = 0x800000000;
  v9 = 0;
  if ((sub_22EDB52C0(a1, (unsigned __int8 **)(a2 + 40), *(_DWORD *)(a2 + 16), 0, (uint64_t)&v10, &v9) & 1) != 0)
  {
    v4 = 1;
  }
  else
  {
    v5 = (_QWORD *)*a1;
    if (*(_DWORD *)(*a1 + 11992) == -1 && v9 == 0)
      v7 = sub_22EBCC6C0((uint64_t)v5, a2);
    else
      v7 = sub_22EC28BF4(v5, *(_QWORD *)(a2 + 20), (uint64_t *)v10, v11);
    v4 = v7;
  }
  if (v10 != v12)
    free(v10);
  return v4;
}

uint64_t sub_22EDB2538(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;

  v2 = a2;
  v4 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = (_BYTE *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  if (*((_DWORD *)*a1 + 2998) != -1 || *(_BYTE **)(v2 + 16) != v5)
    return sub_22EC27DFC(*a1, *(_QWORD *)(v2 + 32), v5);
  return v2;
}

uint64_t sub_22EDB25A0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  _OWORD *v18;
  _OWORD *v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  _OWORD *v32;
  _OWORD *v33;
  __int128 v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int v40;
  _QWORD v41[2];
  int v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  void *v48;
  unint64_t v49;
  int v50;
  char v51;
  char v52;
  void *v53;
  uint64_t v54;
  _QWORD v55[34];

  v2 = a2;
  v55[32] = *MEMORY[0x24BDAC8D0];
  v53 = v55;
  v54 = 0x800000000;
  v4 = *(_DWORD *)(a2 + 16);
  v5 = 0;
  v6 = v4 & 0x7FFFFFFF;
  if ((v4 & 0x7FFFFFFF) != 0)
  {
    v7 = (uint64_t *)(a2 + 48);
    v8 = (unint64_t)&loc_22F44E000;
    v9 = a2;
    while (1)
    {
      v11 = *(v7 - 1);
      v10 = *v7;
      v12 = v8 & 0xFFFFFF00FFFFFF00;
      v13 = *(_DWORD *)(v2 + 16);
      if ((v13 & 0x80000000) == 0)
        goto LABEL_4;
      v21 = v9 + 16 * (v13 & 0x7FFFFFFF);
      v22 = *(_DWORD *)(v21 + 40);
      LODWORD(v21) = *(_DWORD *)(v21 + 44);
      v23 = v8 & 0xFFFFFF0000000000 | (v21 - 1) | 0x100000000;
      if ((_DWORD)v21)
        v12 = v23;
      if (!v22)
        break;
      v48 = &v50;
      v49 = 0x200000000;
      v24 = *a1;
      v46 = 7;
      v47 = v11;
      sub_22EE7377C(v24, (uint64_t)&v46, (uint64_t)&v48);
      v25 = *a1;
      v44 = 7;
      v45 = v10;
      sub_22EE7377C(v25, (uint64_t)&v44, (uint64_t)&v48);
      v26 = *a1;
      v40 = *(_DWORD *)(*a1 + 11992);
      *(_DWORD *)(*a1 + 11992) = -1;
      v27 = sub_22ED725B0(a1, v11);
      if ((v27 & 1) != 0
        || ((v16 = v11 == (v27 & 0xFFFFFFFFFFFFFFFELL), v28 = v27 & 0xFFFFFFFFFFFFFFFELL, v16) ? (v29 = 0) : (v29 = 1),
            v5 |= v29,
            v30 = sub_22ED725B0(a1, v10),
            (v30 & 1) != 0))
      {
        v31 = 0;
      }
      else
      {
        v41[0] = v28;
        v41[1] = v30 & 0xFFFFFFFFFFFFFFFELL;
        v5 |= v10 != (v30 & 0xFFFFFFFFFFFFFFFELL);
        v42 = v22;
        v43 = v12;
        v31 = 1;
        v32 = (_OWORD *)sub_22E78DF7C((uint64_t)&v53, (unint64_t)v41, 1);
        v33 = (char *)v53 + 32 * v54;
        v34 = v32[1];
        *v33 = *v32;
        v33[1] = v34;
        LODWORD(v54) = v54 + 1;
      }
      *(_DWORD *)(v26 + 11992) = v40;
      v2 = a2;
      if (v48 != &v50)
        free(v48);
      if (!v31)
      {
LABEL_32:
        v37 = 1;
        goto LABEL_35;
      }
LABEL_26:
      v9 += 8;
      v7 += 2;
      v8 = v12;
      if (!--v6)
        goto LABEL_29;
    }
    v2 = a2;
LABEL_4:
    v14 = sub_22ED725B0(a1, *(v7 - 1));
    if ((v14 & 1) != 0)
      goto LABEL_32;
    v15 = sub_22ED725B0(a1, v10);
    if ((v15 & 1) != 0)
      goto LABEL_32;
    v16 = v10 == (v15 & 0xFFFFFFFFFFFFFFFELL) && v11 == (v14 & 0xFFFFFFFFFFFFFFFELL);
    v48 = (void *)(v14 & 0xFFFFFFFFFFFFFFFELL);
    v49 = v15 & 0xFFFFFFFFFFFFFFFELL;
    v17 = !v16;
    v50 = 0;
    v5 |= v17;
    v51 = 0;
    v52 = 0;
    v18 = (_OWORD *)sub_22E78DF7C((uint64_t)&v53, (unint64_t)&v48, 1);
    v19 = (char *)v53 + 32 * v54;
    v20 = v18[1];
    *v19 = *v18;
    v19[1] = v20;
    LODWORD(v54) = v54 + 1;
    goto LABEL_26;
  }
LABEL_29:
  v35 = (_QWORD *)*a1;
  if (*(_DWORD *)(*a1 + 11992) != -1 || (v5 & 1) != 0)
    v36 = sub_22EC297B0(v35, *(_QWORD *)(v2 + 20), (uint64_t)v53, v54);
  else
    v36 = sub_22EBCC6C0((uint64_t)v35, v2);
  v37 = v36;
LABEL_35:
  if (v53 != v55)
    free(v53);
  return v37;
}

uint64_t sub_22EDB289C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  void *v21[2];

  v2 = a2;
  v3 = *(_QWORD *)(a2 + 40);
  if ((v3 & 6) == 0)
  {
    v5 = sub_22ED725B0(a1, v3 & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 1) != 0)
    {
      return 1;
    }
    else
    {
      v6 = *(_QWORD **)a1;
      v7 = *(_DWORD *)(*(_QWORD *)a1 + 11992);
      v8 = v5 & 0xFFFFFFFFFFFFFFFELL;
      if (v7 != -1 || v8 != (*(_QWORD *)(v2 + 40) & 0xFFFFFFFFFFFFFFF8))
      {
        v9 = *(_QWORD *)(v2 + 16);
        if ((v9 & 4) != 0)
        {
          v12 = v6[11];
          v13 = *(_QWORD *)(v12 + 16872);
          v14 = v9 & 0xFFFFFFFFFFFFFFF8;
          v15 = *(_QWORD *)(v2 + 24) & 0xFFFFFFFFFFFFFFF8;
          v16 = *(_DWORD *)(v2 + 32);
          v2 = sub_22E3CD3D4(v12 + 2032, 48, 3);
          sub_22F2F4590(v2, v14, v15, v13, 1, 3, v16, v8);
        }
        else
        {
          v10 = *(_DWORD *)(v2 + 32);
          v20 = 0u;
          *(_OWORD *)v21 = 0u;
          v17 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 40);
          v18 = v10;
          sub_22EFC6D6C((uint64_t)&v19, v17);
          v2 = sub_22EC225CC(v6, v8, *(_QWORD *)(v8 + 8), v10, 0, (uint64_t)&v20, 0, 0, (uint64_t)&v17, 0, 0, 0);
          if (HIDWORD(v21[1]))
            free(v21[0]);
        }
      }
    }
  }
  return v2;
}

uint64_t sub_22EDB29DC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = a2;
  v4 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ED725B0(a1, *(_QWORD *)(v2 + 32));
  if ((v5 & 1) != 0)
    return 1;
  v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(_QWORD *)(v2 + 32) != v6
    || *(_QWORD *)(v2 + 24) != (v4 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22F3341E8(*a1, *(_DWORD *)(v2 + 16), v4 & 0xFFFFFFFFFFFFFFFELL, v6, *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
  }
  return v2;
}

uint64_t sub_22EDB2A7C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  char v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  __int128 v19;
  uint64_t v21;
  char v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  _QWORD v26[14];

  v2 = a2;
  v26[12] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22ED72360(a1, *(_QWORD *)(a2 + 24));
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v24 = v26;
  v25 = 0x400000000;
  v6 = *(unsigned int *)(v2 + 32);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = 0;
    v9 = (unint64_t *)(v2 + 48);
    while (1)
    {
      v22 = 1;
      v21 = *(v9 - 1);
      v10 = *v9;
      v11 = *v9 & 3;
      if ((v11 - 1) >= 2)
      {
        if ((_DWORD)v11 != 3)
        {
          v15 = *(_QWORD *)(v2 + 40 + 16 * *(unsigned int *)(v2 + 32) + 8 * (v10 >> 2));
          v16 = sub_22ED725B0(a1, v15);
          if ((v16 & 1) != 0)
          {
            v2 = 1;
            goto LABEL_21;
          }
          v8 |= v15 != (v16 & 0xFFFFFFFFFFFFFFFELL);
          v22 = 1;
          v23 = v16 & 0xFFFFFFFFFFFFFFFELL;
          goto LABEL_13;
        }
      }
      else
      {
        v22 = 0;
        v12 = v10 & 3;
        v13 = v10 & 0xFFFFFFFFFFFFFFFCLL;
        if (v12 != 1)
          goto LABEL_8;
        v14 = *(_QWORD *)(v13 + 40);
        if ((v14 & 7) == 0)
        {
          v13 = v14 & 0xFFFFFFFFFFFFFFF8;
LABEL_8:
          v23 = v13;
          if (!v13)
            goto LABEL_14;
LABEL_13:
          v17 = sub_22E4EF088((uint64_t)&v24, (unint64_t)&v21, 1);
          v18 = (char *)v24 + 24 * v25;
          v19 = *(_OWORD *)v17;
          *((_QWORD *)v18 + 2) = *(_QWORD *)(v17 + 16);
          *(_OWORD *)v18 = v19;
          v7 = v25 + 1;
          LODWORD(v25) = v25 + 1;
        }
      }
LABEL_14:
      v9 += 2;
      if (!--v6)
        goto LABEL_18;
    }
  }
  v7 = 0;
  v8 = 0;
LABEL_18:
  if (*(_DWORD *)(*a1 + 11992) != -1 || (v5 != *(uint64_t **)(v2 + 24)) | v8 & 1)
    v2 = sub_22EB49A78(*a1, *(_DWORD *)(v2 + 16), v5, (unsigned int *)v24, v7, *(_DWORD *)(v2 + 20));
LABEL_21:
  if (v24 != v26)
    free(v24);
  return v2;
}

uint64_t sub_22EDB2C80(uint64_t a1, _QWORD *a2)
{
  void **v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 32), a2);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = 48;
  if (v5 == *(_QWORD *)(a1 + 32))
    v6 = 52;
  if (v4 == (void **)(v5 + 8 * *(unsigned int *)(a1 + v6)))
    return (uint64_t)a2;
  else
    return sub_22ED725B0(a1, a2[2]);
}

uint64_t sub_22EDB2CE4(uint64_t *a1, unsigned int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  __int128 v25;
  void *v26[2];
  uint64_t v27;
  void *v28[2];
  _DWORD v29[66];
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _BYTE v33[64];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unsigned int v39;
  _QWORD v40[3];
  __int16 v41;
  int v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)*a1;
  v5 = *((_QWORD *)a2 + 2);
  v6 = a2[6];
  v30 = 0;
  v31 = v33;
  v32 = 0x800000000;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = v4;
  v38 = v5;
  v39 = v6;
  sub_22EFC6D6C((uint64_t)v40, v5);
  v40[1] = 0;
  v40[2] = 0;
  v41 = 0;
  v42 = 257;
  v43 = 0;
  sub_22EC56024((uint64_t)&v30);
  if ((sub_22E8CA788((uint64_t)a1, (unsigned __int8 *)a2, (*a2 & 0x80000) != 0, (uint64_t)&v30) & 1) != 0)
  {
    v7 = 1;
    goto LABEL_36;
  }
  v25 = 0u;
  *(_OWORD *)v26 = 0u;
  v8 = *((_QWORD *)a2 + 5);
  if (v8)
  {
    v9 = sub_22ED72930(a1, v8, *((void **)a2 + 6), 0, 0);
    if (!v9)
    {
      v7 = 1;
      goto LABEL_34;
    }
    sub_22E8ACE30((uint64_t)&v25, v9, v10);
  }
  v11 = *((_QWORD *)a2 + 7);
  if (v11)
  {
    v27 = *((_QWORD *)a2 + 7);
    v28[0] = 0;
    if (sub_22E793870(a1 + 1, &v27, v28))
    {
      if (v28[0] != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
      {
        v11 = *((_QWORD *)v28[0] + 1);
        if (!v11)
        {
          LODWORD(v30) = 0;
          LODWORD(v32) = 0;
          if (v34)
          {
            v22 = sub_22EC6CBD0(v34);
            MEMORY[0x2348A0E9C](v22, 0x10E0C409F09D3C3);
          }
          HIBYTE(v42) = 0;
          v7 = 1;
          v34 = 0;
          v35 = 0;
          goto LABEL_34;
        }
      }
    }
    v35 = v11;
  }
  v12 = *a2;
  if ((v12 & 0x40000) != 0)
  {
    v13 = a2[1];
    v14 = (uint64_t)(*a2 == 211 ? a2 + 16 : a2 + 20);
    v15 = (int *)(v14 + 8 * v13);
    v16 = v15[2];
    v17 = *v15;
    if (*v15 | v16)
    {
      v18 = v15[1];
      v28[0] = v29;
      v28[1] = (void *)0x800000000;
      v29[64] = v17;
      v29[65] = v18;
      if (v17)
      {
        if ((sub_22EDBF678((uint64_t)a1, v14 + 8 * v13 + 16 * ((v12 >> 18) & 1), v14 + 8 * v13 + 16 * ((v12 >> 18) & 1) + 32 * *(unsigned int *)(v14 + 8 * v13 + 12)) & 1) != 0)
        {
          LODWORD(v30) = 0;
          LODWORD(v32) = 0;
          if (v34)
          {
            v19 = sub_22EC6CBD0(v34);
            MEMORY[0x2348A0E9C](v19, 0x10E0C409F09D3C3);
          }
          HIBYTE(v42) = 0;
          v7 = 1;
          v34 = 0;
          v35 = 0;
          goto LABEL_48;
        }
        LODWORD(v12) = *a2;
      }
      v7 = sub_22ED66318((_QWORD *)*a1, (uint64_t)&v25, v16, (uint64_t)&v30, (v12 >> 19) & 1, (uint64_t)v28);
LABEL_48:
      if (v28[0] != v29)
        free(v28[0]);
      goto LABEL_34;
    }
  }
  if ((_DWORD)v30 != 2)
    goto LABEL_32;
  v20 = *v31 & 0xFFFFFFFFFFFFFFFCLL;
  if ((*(_DWORD *)(v20 + 28) & 0x7Fu) <= 0x2F && ((1 << (*(_DWORD *)(v20 + 28) & 0x7F)) & 0xC00000060000) != 0)
  {
    v20 = sub_22EFBAEA4(v20);
    if (!v20)
      goto LABEL_32;
  }
  if (!sub_22EFBAEF8(v20))
  {
    LODWORD(v12) = *a2;
LABEL_32:
    v21 = sub_22EB235A8((_QWORD *)*a1, (uint64_t)&v25, (uint64_t)&v30, (v12 >> 19) & 1, 0);
    goto LABEL_33;
  }
  v21 = sub_22EC21A04(*a1, (uint64_t *)&v25, 0, (uint64_t)&v30, 0, 0, 0);
LABEL_33:
  v7 = v21;
LABEL_34:
  if (HIDWORD(v26[1]))
    free(v26[0]);
LABEL_36:
  if (BYTE1(v42))
  {
    if ((_DWORD)v30 == 5)
    {
      sub_22EC64D18(v37, (uint64_t)&v30);
    }
    else if (v35 && (*(_DWORD *)(v37[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v37, (uint64_t)&v30);
    }
  }
  if (v34)
  {
    v24 = sub_22EC6CBD0(v34);
    MEMORY[0x2348A0E9C](v24, 0x10E0C409F09D3C3);
  }
  if (v31 != (_QWORD *)v33)
    free(v31);
  return v7;
}

uint64_t sub_22EDB30AC(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void **v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  void *v35[2];
  void *v36[2];
  _BYTE v37[256];
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  _BYTE v42[64];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v51;
  int v52;
  char v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)a2 + 7);
  if (v4 && (sub_22EFFFB48(*((unsigned __int8 **)a2 + 7)) & 1) == 0)
  {
    v12 = sub_22ED725B0(a1, v4);
    if ((v12 & 1) != 0)
      return 1;
    v13 = sub_22EC2624C(*(_QWORD *)a1, (_QWORD *)(v12 & 0xFFFFFFFFFFFFFFFELL), (*a2 >> 19) & 1);
    v6 = v13;
    if ((v13 & 1) != 0)
      return 1;
    v5 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    v5 = sub_22EDA95F0((unsigned int *)a1, *((_QWORD *)a2 + 8));
    v6 = 0;
  }
  v7 = *((_QWORD *)a2 + 5);
  if (v7)
  {
    v8 = sub_22ED72930((uint64_t *)a1, v7, *((void **)a2 + 6), 0, 0);
    if (v8)
    {
      v10 = v8;
      v11 = v9;
      goto LABEL_12;
    }
    return 1;
  }
  v10 = 0;
  v11 = 0;
LABEL_12:
  if ((*a2 & 0x40000) != 0)
  {
    if (*a2 == 211)
      v16 = a2 + 16;
    else
      v16 = a2 + 20;
    v15 = v16[2 * a2[1] + 2];
  }
  else
  {
    v15 = 0;
  }
  v17 = *(_QWORD **)a1;
  v39 = 0;
  v40 = v42;
  v41 = 0x800000000;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = v17;
  v47 = *((_OWORD *)a2 + 1);
  v18 = *((_QWORD *)a2 + 4);
  v50 = 0;
  v48 = v18;
  v49 = 0;
  v51 = 0;
  v52 = 257;
  v53 = 0;
  sub_22EC56024((uint64_t)&v39);
  if ((sub_22E8CA788(a1, (unsigned __int8 *)a2, 0, (uint64_t)&v39) & 1) == 0)
  {
    if (sub_22F0621BC((uint64_t)a2))
    {
      v19 = sub_22F0621BC((uint64_t)a2);
      *(_QWORD *)&v34 = v19;
      v36[0] = 0;
      if (sub_22E793870((uint64_t *)(a1 + 8), &v34, v36)
        && v36[0] != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
      {
        v19 = *((_QWORD *)v36[0] + 1);
      }
      if (!v19)
        goto LABEL_19;
      v44 = v19;
    }
    v36[0] = v37;
    v36[1] = (void *)0x800000000;
    v38 = 0;
    v20 = *a2;
    if ((v20 & 0x40000) == 0)
    {
      v33 = v5;
      v21 = 0;
      v22 = v6 & 0xFFFFFFFFFFFFFFFELL;
      v23 = a2[18];
      v24 = (v20 >> 19) & 1;
      goto LABEL_43;
    }
    v25 = *a2;
    v26 = a2[1];
    if (v25 == 211)
      v27 = a2 + 16;
    else
      v27 = a2 + 20;
    v28 = &v27[2 * v26];
    if (*v28)
    {
      v38 = *(_QWORD *)v28;
      if ((sub_22EDBF678(a1, (uint64_t)&v28[4 * ((v20 >> 18) & 1)], (uint64_t)&v28[8 * v27[2 * v26 + 3] + 4 * ((v20 >> 18) & 1)]) & 1) != 0)
      {
        v14 = 1;
LABEL_45:
        if (v36[0] != v37)
          free(v36[0]);
        goto LABEL_47;
      }
      v22 = v6 & 0xFFFFFFFFFFFFFFFELL;
      v23 = a2[18];
      v24 = (*a2 >> 19) & 1;
      v33 = v5;
      if ((*a2 & 0x40000) == 0)
      {
        v21 = 0;
LABEL_43:
        v30 = v23;
        v34 = 0u;
        *(_OWORD *)v35 = 0u;
        sub_22E8ACE30((uint64_t)&v34, v10, v11);
        v14 = sub_22EC24AB8(*(_QWORD *)a1, v22, v33, v30, v24, (uint64_t *)&v34, v15, 0, (uint64_t)&v39, (uint64_t)v21, 0, 0, 0);
        if (HIDWORD(v35[1]))
          free(v35[0]);
        goto LABEL_45;
      }
      v25 = *a2;
      v26 = a2[1];
    }
    else
    {
      v33 = v5;
      v22 = v6 & 0xFFFFFFFFFFFFFFFELL;
      v23 = a2[18];
      v24 = (v20 >> 19) & 1;
    }
    v29 = a2 + 16;
    if (v25 != 211)
      v29 = a2 + 20;
    if (v29[2 * v26])
      v21 = v36;
    else
      v21 = 0;
    goto LABEL_43;
  }
LABEL_19:
  v14 = 1;
LABEL_47:
  if (BYTE1(v52))
  {
    if ((_DWORD)v39 == 5)
    {
      sub_22EC64D18(v46, (uint64_t)&v39);
    }
    else if (v44 && (*(_DWORD *)(v46[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v46, (uint64_t)&v39);
    }
  }
  if (v43)
  {
    v32 = sub_22EC6CBD0(v43);
    MEMORY[0x2348A0E9C](v32, 0x10E0C409F09D3C3);
  }
  if (v40 != v42)
    free(v40);
  return v14;
}

uint64_t sub_22EDB34B8(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  v2 = a2;
  v4 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) == -1 && *(_QWORD *)(v2 + 24) == v5)
    return v2;
  v6 = *(_DWORD *)(v2 + 20);
  v7 = v6 != 0;
  v8 = v6 != 0;
  LODWORD(v9) = v6 - 1;
  if (v8)
    v9 = v9;
  else
    v9 = 0;
  return sub_22EE739C0(*a1, v5, *(unsigned int *)(v2 + 16), v9 | (v7 << 32));
}

unint64_t sub_22EDB3534(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = a2;
  v4 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) != -1 || *(_QWORD *)(v2 + 24) != v5)
    return sub_22EB27A20(*a1, *(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 20), v5);
  return v2;
}

uint64_t sub_22EDB359C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  unsigned int v6;
  int v7;
  int v8;
  char v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  v10 = 0;
  v11 = v13;
  v12 = 0x400000000;
  v4 = 1;
  if ((sub_22EDB52C0(a1, (unsigned __int8 **)(a2 + 24), *(_DWORD *)(a2 + 4), 1, (uint64_t)&v11, &v10) & 1) == 0)
  {
    v5 = (uint64_t *)v11;
    v6 = v12;
    v8 = *(_DWORD *)(a2 + 16);
    v7 = *(_DWORD *)(a2 + 20);
    v4 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 8 * v12 + 24, 3);
    sub_22F002D50(v4, v8, v5, v6, v7);
  }
  if (v11 != v13)
    free(v11);
  return v4;
}

uint64_t sub_22EDB3698(uint64_t *a1, uint64_t a2)
{
  unsigned __int8 *v3;
  uint64_t result;
  uint64_t v5;
  BOOL v6;

  v3 = sub_22ED28410((_QWORD *)*a1, a2);
  result = sub_22ED725B0(a1, v3);
  if ((result & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(*(_QWORD *)((result & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v5)
    v6 = (*(_DWORD *)(v5 + 16) & 0xFF800FF) == 137363467;
  else
    v6 = 0;
  if (v6)
    return sub_22ED26924(*a1, (unsigned __int8 *)(result & 0xFFFFFFFFFFFFFFFELL));
  return result;
}

uint64_t sub_22EDB3710(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  _QWORD v15[9];

  v15[8] = *MEMORY[0x24BDAC8D0];
  v14 = 0;
  v4 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = (_QWORD *)(a2 + 32);
    v7 = 8 * v4;
    v8 = 1;
    while (1)
    {
      v9 = *v6;
      v10 = sub_22ED725B0(a1, *v6);
      if ((v10 & 1) != 0)
        break;
      v11 = v14;
      if (v14 >= 8uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v14;
      }
      v15[v11] = v10 & 0xFFFFFFFFFFFFFFFELL;
      v12 = ++v14;
      v5 |= v9 != (v10 & 0xFFFFFFFFFFFFFFFELL);
      ++v6;
      v7 -= 8;
      if (!v7)
        goto LABEL_9;
    }
  }
  else
  {
    v12 = 0;
    v5 = 0;
LABEL_9:
    if (*(_DWORD *)(*a1 + 11992) != -1 || (v5 & 1) != 0)
      return sub_22F32D6EC(*a1, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), v15, v12, *(_QWORD *)(a2 + 8));
    else
      return a2;
  }
  return v8;
}

uint64_t sub_22EDB3874(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int **v26;
  uint64_t v27;
  int *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  BOOL v39;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  int v62;
  int v63;
  void *v64;
  uint64_t v65;
  _BYTE v66[32];
  void *v67;
  __int128 v68;
  _BYTE v69[24];
  void *v70[2];
  _BYTE v71[32];
  uint64_t *v72;
  uint64_t v73;
  _QWORD v74[6];

  v74[4] = *MEMORY[0x24BDAC8D0];
  v72 = v74;
  v73 = 0x400000000;
  v70[0] = v71;
  v70[1] = (void *)0x400000000;
  v67 = v69;
  v68 = xmmword_22F44E350;
  v69[16] = 0;
  v4 = *a1;
  v64 = 0;
  v62 = 3;
  v63 = 0;
  v60 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v63, (int *)&v60, (__int16 *)(v4 + 1693), (uint64_t *)&v64, &v62);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  v11 = *(_QWORD *)(*a1 + 88);
  v12 = *(_QWORD *)(*a1 + 216);
  v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 16))(*(_QWORD *)(a2 + 24));
  v14 = sub_22F3B1F5C(v11, v12, v13);
  v15 = v14;
  v16 = *a1;
  if (v14)
    v17 = v14 + 40;
  else
    v17 = 0;
  v18 = *(_QWORD *)(v16 + 216);
  v19 = *(_QWORD *)(v16 + 3200);
  *(_QWORD *)(v16 + 3200) = 0;
  v58 = *(_QWORD *)(v16 + 10288);
  v59 = v19;
  v56 = *(_DWORD *)(v16 + 2192);
  v57 = *(_DWORD *)(v16 + 1944);
  v55 = v17;
  *(_QWORD *)(v16 + 216) = v17;
  *(_DWORD *)(v16 + 1944) = *(_DWORD *)(v16 + 1904);
  *(_DWORD *)(v16 + 2192) = *(_DWORD *)(v16 + 1960);
  if ((sub_22EDAA6A0(a1, a2 + 40, *(_DWORD *)(a2 + 16), 0, 0, (uint64_t)v70, (uint64_t)&v72, (uint64_t)&v67) & 1) != 0)
  {
    v20 = 1;
    goto LABEL_64;
  }
  if ((_DWORD)v73)
  {
    v21 = v72;
    v22 = 8 * v73;
    do
    {
      v23 = *v21++;
      *(_QWORD *)(v23 + 16) = v55 & 0xFFFFFFFFFFFFFFFBLL;
      v22 -= 8;
    }
    while (v22);
  }
  v64 = v66;
  v65 = 0x400000000;
  v24 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v24)
  {
    v54 = v18;
    LODWORD(v25) = 0;
    v26 = (int **)(a2 + 40 + 8 * *(unsigned int *)(a2 + 16));
    v27 = 8 * v24;
    v20 = 1;
    while (1)
    {
      v28 = *v26;
      v29 = **v26;
      if (v29)
      {
        if ((v29 - 3) >= 0xFFFFFFFE)
        {
          v34 = *((_QWORD *)v28 + 1) & 0xFFFFFFFFFFFFFFFCLL;
          if (v28[10] == 1)
          {
            v35 = v34 | 2;
          }
          else
          {
            v37 = sub_22ED725B0(a1, v34);
            if (v37 >= 2)
            {
              v38 = *(_QWORD *)(*(_QWORD *)((v37 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0);
              v39 = (*(_DWORD *)(v38 + 16) & 0xFE00000u) < 0x8180001 || v38 == 0;
              if (!v39 && *(_DWORD *)(v38 + 16) == 11)
                v37 = sub_22EB19A28(*a1);
            }
            if ((v37 & 1) != 0)
            {
LABEL_61:
              v18 = v54;
              goto LABEL_62;
            }
            v35 = v37 & 0xFFFFFFFFFFFFFFFCLL;
          }
          LOBYTE(v60) = 0;
          v61 = 0;
          v41 = *((_QWORD *)v28 + 3);
          if (v41 > 7)
          {
            v43 = v41 & 0xFFFFFFFFFFFFFFF8;
            if ((v41 & 4) != 0)
            {
              v42 = v43 | 4;
              v60 = v43 | 4;
            }
            else
            {
              if (!v43)
              {
                v28 = 0;
                goto LABEL_53;
              }
              sub_22F31A5DC((unint64_t *)&v60, v43);
              v42 = v60;
            }
          }
          else
          {
            v42 = 0;
            v60 = 0;
          }
          v61 = 1;
          v44 = v35 & 0xFFFFFFFFFFFFFFFCLL;
          v45 = *v28;
          v46 = v28[4];
          v47 = *a1;
          if ((v35 & 2) != 0 || !v44)
            v32 = sub_22F332740(v47, v44, v45 == 1, v46, v42);
          else
            v32 = sub_22EBCF54C(v47, v44, v45 == 1, v46, v42);
          goto LABEL_52;
        }
        v30 = *((_QWORD *)v28 + 1);
        if ((v30 & 2) == 0)
        {
          v31 = sub_22ED725B0(a1, v30 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v31 & 1) != 0)
            goto LABEL_61;
          v32 = sub_22F3327E4(*a1, v31 & 0xFFFFFFFFFFFFFFFELL);
LABEL_52:
          v28 = (int *)v32;
LABEL_53:
          if (!v28)
            goto LABEL_61;
          goto LABEL_54;
        }
        if (*(_DWORD *)(*a1 + 11992) != -1)
        {
          v33 = sub_22F332940(*a1, v30 & 0xFFFFFFFFFFFFFFFCLL);
          goto LABEL_28;
        }
      }
      else
      {
        if (v28[4] != 1)
        {
          v36 = sub_22ED72360(a1, *((_QWORD *)v28 + 1) & 0xFFFFFFFFFFFFFFF8);
          if (!v36)
            goto LABEL_61;
          v33 = sub_22F3325E4(*a1, v36);
LABEL_28:
          v28 = (int *)v33;
LABEL_54:
          LODWORD(v25) = v65;
          goto LABEL_55;
        }
        if (*(_DWORD *)(*a1 + 11992) != -1)
        {
          v33 = sub_22F332794(*a1, *((_QWORD *)v28 + 1) & 0xFFFFFFFFFFFFFFF8);
          goto LABEL_28;
        }
      }
LABEL_55:
      if (v25 >= HIDWORD(v65))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        LODWORD(v25) = v65;
      }
      *((_QWORD *)v64 + v25) = v28;
      v25 = (v65 + 1);
      LODWORD(v65) = v65 + 1;
      ++v26;
      v27 -= 8;
      if (!v27)
      {
        v49 = (char *)v64;
        if ((_DWORD)v25)
        {
          v50 = 0;
          v18 = v54;
          do
          {
            v51 = *(_QWORD *)&v49[v50];
            if ((*(_DWORD *)v51 - 3) >= 0xFFFFFFFE)
            {
              v52 = *(_QWORD *)(v51 + 24);
              if (v52 >= 8 && (v52 & 4) == 0)
                *(_QWORD *)(*(_QWORD *)((v52 & 0xFFFFFFFFFFFFFFF8) + 16) + 16) = v55 & 0xFFFFFFFFFFFFFFFBLL;
            }
            v50 += 8;
          }
          while (8 * v25 != v50);
        }
        else
        {
          v25 = 0;
          v18 = v54;
        }
        goto LABEL_74;
      }
    }
  }
  v25 = 0;
  v49 = v66;
LABEL_74:
  v20 = (uint64_t)sub_22F3C4144(*(_QWORD *)(*a1 + 88), *(_DWORD *)(a2 + 4), v15, v72, v73, v49, v25, *(_DWORD *)(a2 + 32));
LABEL_62:
  if (v64 != v66)
    free(v64);
LABEL_64:
  if (v18)
  {
    *(_QWORD *)(v16 + 216) = v18;
    *(_QWORD *)(v16 + 3200) = v59;
    *(_QWORD *)(v16 + 10288) = v58;
    *(_DWORD *)(v16 + 1944) = v57;
    *(_DWORD *)(v16 + 2192) = v56;
  }
  sub_22EB48E64(v4);
  if (v67 != v69)
    free(v67);
  if (v70[0] != v71)
    free(v70[0]);
  if (v72 != v74)
    free(v72);
  return v20;
}

uint64_t sub_22EDB3E48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = a2;
  if ((*(_BYTE *)(a2 + 1) & 0x80) != 0)
  {
    v4 = sub_22ED72360(a1, *(_QWORD *)(a2 + 32));
    if (v4)
    {
      if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1 || *(_QWORD *)(v2 + 32) != v4)
        return sub_22F3C109C(*(_QWORD *)(*(_QWORD *)a1 + 88), *(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 20), *(_DWORD *)(v2 + 24), v4);
    }
    else
    {
      return 1;
    }
  }
  return v2;
}

uint64_t sub_22EDB3EBC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  void *v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;
  char v24;
  unsigned int *v25;
  char v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  _QWORD v31[9];

  v2 = a2;
  v31[8] = *MEMORY[0x24BDAC8D0];
  v27 = 0;
  v29 = v31;
  v30 = 0x800000000;
  v4 = *(_DWORD *)(a2 + 32);
  if (v4 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v2 + 32);
  }
  if ((sub_22EDB52C0(a1, *(unsigned __int8 ***)(v2 + 24), v4, 0, (uint64_t)&v29, &v27) & 1) != 0)
  {
    v2 = 1;
  }
  else if (*(_DWORD *)(*a1 + 11992) != -1 || v27 != 0)
  {
    v6 = v29;
    v7 = v30;
    v9 = *(_DWORD *)(v2 + 16);
    v8 = *(_DWORD *)(v2 + 20);
    v10 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(*a1 + 88) + 15192), "__builtin_shufflevector", 0x17uLL);
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 88) + 1960) + 80);
    v12 = sub_22E3CD31C((uint64_t *)(v11 + 72), v11);
    v13 = sub_22EFCE144(v12 + 40, v10);
    v14 = (_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF8);
    if ((v13 & 4) != 0 && v14)
      v14 = (_QWORD *)*v14;
    v15 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 32, 3);
    v16 = *(_QWORD *)(*a1 + 88);
    v17 = *(_QWORD *)(v16 + 16864);
    v28 = 0;
    sub_22EFF69F0(v15, v16, (uint64_t)v14, 0, v17, 0, v9, &v28, 0);
    v18 = sub_22EF5B848(*(_QWORD *)(*a1 + 88), v14[6], 0);
    v19 = sub_22E90092C(*a1, v15, v18, 64, 0, 0);
    v20 = *(_QWORD *)(*a1 + 88);
    v21 = sub_22E8BBA74((unint64_t)v14);
    v22 = *(_QWORD *)(v14[6] & 0xFFFFFFFFFFFFFFF0);
    if (v22)
      v23 = *(unsigned __int8 *)(v22 + 16) - 27 > 0xFFFFFFFD;
    else
      v23 = 0;
    if (!v23)
      v22 = sub_22F10CF48(v22);
    v24 = sub_22E8BBBD0(*(_QWORD *)(v22 + 24));
    v25 = sub_22EFFA488(v20, v19 & 0xFFFFFFFFFFFFFFFELL, (uint64_t)v6, v7, v21, v24, v8, 0, 0, 0);
    v2 = sub_22E97915C((_QWORD *)*a1, (unsigned int *)((unint64_t)v25 & 0xFFFFFFFFFFFFFFFELL));
  }
  if (v29 != v31)
    free(v29);
  return v2;
}

uint64_t sub_22EDB4120(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v30;
  int v31;
  uint64_t v32;
  char v33;
  char v34;
  unsigned __int8 **v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  __int128 v39;
  uint64_t v40;
  int v41;
  BOOL v42;
  BOOL v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  void *v54;
  __int128 v55;
  uint64_t v56;
  int v57;
  char v58;
  int v59;
  void *v60[2];
  _QWORD v61[24];
  void *v62;
  __int128 v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;

  v2 = a2;
  v67 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 2) & 1) == 0)
    return v2;
  v4 = *(_QWORD *)a1;
  v57 = 0;
  v62 = 0;
  v59 = 3;
  v60[0] = (void *)*(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v57, (int *)v60, (__int16 *)(v4 + 1693), (uint64_t *)&v62, &v59);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  if ((*(_BYTE *)(v2 + 2) & 1) == 0 || (v11 = *(unsigned int *)(v2 + 28), !(_DWORD)v11))
  {
    v22 = *(void **)(v2 + 32);
    v60[0] = v22;
    v62 = 0;
    if (sub_22E793870((uint64_t *)(a1 + 8), v60, &v62)
      && v62 != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
    {
      v22 = (void *)*((_QWORD *)v62 + 1);
    }
    if (v22)
    {
      v24 = *(_DWORD *)(v2 + 16);
      v25 = *(_DWORD *)(v2 + 20);
      v26 = *(_DWORD *)(v2 + 24);
      v28 = *(_QWORD *)(*(_QWORD *)a1 + 88);
      v23 = (uint64_t)v22;
      v27 = 0;
      goto LABEL_27;
    }
LABEL_29:
    v2 = 1;
    goto LABEL_30;
  }
  v12 = 0;
  v13 = 3 * v11;
  v51 = v2 + 40 + 8 * v13;
  v14 = 8 * v13;
  v15 = v2 + 40;
  while (1)
  {
    v16 = *(_DWORD *)v15;
    if (*(_DWORD *)v15 == 1)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
        goto LABEL_17;
    }
    else if (v16 == 7)
    {
      if (**(unsigned __int8 **)(v15 + 8) != 213)
        goto LABEL_17;
    }
    else if (((1 << v16) & 0x13D) != 0)
    {
LABEL_17:
      ++v12;
      goto LABEL_18;
    }
    sub_22EDC0108(*(_QWORD *)a1, v15, *(_DWORD *)(a1 + 80), (uint64_t)&v62);
    v59 = 0;
    LOBYTE(v57) = 0;
    v58 = 0;
    v17 = *(_QWORD *)a1;
    v54 = v62;
    v55 = v63;
    v56 = v64;
    sub_22EE7465C(v17, (uint64_t)&v54);
    LODWORD(v60[0]) = 0;
    v60[1] = 0;
    v18 = *(_QWORD *)a1;
    v19 = *(_DWORD *)(*(_QWORD *)a1 + 11992);
    *(_DWORD *)(*(_QWORD *)a1 + 11992) = -1;
    if (sub_22EDA993C((unsigned int *)a1, (uint64_t)&v62, (uint64_t)v60, 1))
    {
      *(_DWORD *)(v18 + 11992) = v19;
      goto LABEL_29;
    }
    v20 = *(_QWORD *)a1;
    v52 = *(_OWORD *)v60;
    v53 = v61[0];
    v21 = sub_22EE74920(v20, (unsigned int *)&v52);
    if ((v21 & 0xFF00000000) == 0)
      break;
    v12 += v21;
    *(_DWORD *)(v18 + 11992) = v19;
LABEL_18:
    v15 += 24;
    v14 -= 24;
    if (!v14)
    {
      v23 = *(_QWORD *)(v2 + 32);
      v24 = *(_DWORD *)(v2 + 16);
      v25 = *(_DWORD *)(v2 + 20);
      v26 = *(_DWORD *)(v2 + 24);
      v27 = v12 | 0x100000000;
      v28 = *(_QWORD *)(*(_QWORD *)a1 + 88);
LABEL_27:
      v2 = sub_22F0622F8(v28, v24, v23, v25, v26, v27, 0, 0);
      goto LABEL_30;
    }
  }
  *(_DWORD *)(v18 + 11992) = v19;
  v30 = *(_DWORD *)(v2 + 20);
  v62 = (char *)&v63 + 8;
  *(_QWORD *)&v63 = 0x800000000;
  v65 = v30;
  v66 = v30;
  v31 = *(_DWORD *)(a1 + 80);
  v32 = *(_QWORD *)(a1 + 88);
  if (v30)
  {
    *(_DWORD *)(a1 + 80) = v30;
    *(_QWORD *)(a1 + 88) = 0;
  }
  v33 = sub_22EDA9654(a1, a1, v2 + 40, a1, v51);
  *(_DWORD *)(a1 + 80) = v31;
  *(_QWORD *)(a1 + 88) = v32;
  if ((v33 & 1) != 0)
  {
    v2 = 1;
    goto LABEL_54;
  }
  v60[0] = v61;
  v60[1] = (void *)0x800000000;
  if (!(_DWORD)v63)
  {
    LODWORD(v40) = 0;
    goto LABEL_51;
  }
  v34 = 0;
  v35 = (unsigned __int8 **)v62;
  v36 = 32 * v63;
  while (2)
  {
    v37 = sub_22E4EF088((uint64_t)v60, (unint64_t)v35, 1);
    v38 = (char *)v60[0] + 24 * LODWORD(v60[1]);
    v39 = *(_OWORD *)v37;
    *((_QWORD *)v38 + 2) = *(_QWORD *)(v37 + 16);
    *(_OWORD *)v38 = v39;
    v40 = ++LODWORD(v60[1]);
    v41 = *(_DWORD *)v35;
    if (*(_DWORD *)v35 == 1)
    {
      v42 = *(_BYTE *)(*(_QWORD *)((unint64_t)v35[1] & 0xFFFFFFFFFFFFFFF0) + 16) == 36;
LABEL_42:
      v43 = v42;
    }
    else
    {
      if (v41 == 7)
      {
        v42 = *v35[1] == 213;
        goto LABEL_42;
      }
      v43 = ((1 << v41) & 0x13D) == 0;
    }
    v34 |= v43;
    v35 += 4;
    v36 -= 32;
    if (v36)
      continue;
    break;
  }
  if ((v34 & 1) == 0)
  {
LABEL_51:
    v44 = *(_QWORD *)(v2 + 32);
    v45 = *(_DWORD *)(v2 + 16);
    v46 = *(_DWORD *)(v2 + 20);
    v47 = *(_DWORD *)(v2 + 24);
    v50 = v40 | 0x100000000;
    v49 = *(_QWORD *)(*(_QWORD *)a1 + 88);
    v48 = 0;
    v40 = 0;
    goto LABEL_52;
  }
  v44 = *(_QWORD *)(v2 + 32);
  v45 = *(_DWORD *)(v2 + 16);
  v46 = *(_DWORD *)(v2 + 20);
  v47 = *(_DWORD *)(v2 + 24);
  v48 = v60[0];
  v49 = *(_QWORD *)(*(_QWORD *)a1 + 88);
  v50 = 0;
LABEL_52:
  v2 = sub_22F0622F8(v49, v45, v44, v46, v47, v50, (uint64_t)v48, v40);
  if (v60[0] != v61)
    free(v60[0]);
LABEL_54:
  if (v62 != (char *)&v63 + 8)
    free(v62);
LABEL_30:
  sub_22EB48E64(v4);
  return v2;
}

uint64_t sub_22EDB4628(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  int v16[3];
  int v17;
  uint64_t v18;
  int v19;

  v4 = *a1;
  v5 = *a1 + 3688;
  v19 = *(_DWORD *)(*(_QWORD *)(v4 + 3688) + 576 * *(unsigned int *)(v4 + 3696) - 576);
  v18 = 0;
  v17 = 3;
  *(_QWORD *)v16 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v5, &v19, v16, (__int16 *)(v4 + 1693), &v18, &v17);
  v6 = *(unsigned int *)(v4 + 3696);
  v7 = v6 - 2;
  v8 = *(_QWORD *)(v4 + 3688);
  v9 = *(_DWORD *)(v8 + 576 * (v6 - 2));
  if (v9 == 5)
  {
    *(_BYTE *)(v8 + 576 * v6 - 4) = *(_BYTE *)(v8 + 576 * v7 + 572);
    v10 = 1;
  }
  else if (v9 == 2)
  {
    *(_BYTE *)(v8 + 576 * v6 - 4) = 1;
    v10 = *(_BYTE *)(v8 + 576 * v7 + 573) != 0;
  }
  else
  {
    v10 = 0;
    *(_BYTE *)(v8 + 576 * v6 - 4) = 0;
  }
  v11 = v8 + 576 * v6;
  *(_BYTE *)(v11 - 3) = v10;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v11 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v11 - 496));
  }
  v12 = sub_22EDBA4C8(a1, *(_QWORD *)(a2 + 16), 1u);
  if ((v12 & 1) != 0)
  {
    sub_22F32F704(*a1);
    return 1;
  }
  else
  {
    v13 = *a1;
    v14 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFFELL);
    if (*(_DWORD *)(*a1 + 11992) == -1 && *(unsigned int **)(a2 + 16) == v14)
    {
      sub_22F32F704(v13);
      return sub_22EBCC6C0(*a1, a2);
    }
    else
    {
      return sub_22EB497A8(v13, *(_DWORD *)(a2 + 24), v14, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
    }
  }
}

uint64_t sub_22EDB47D4(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int v10;
  int v11;
  uint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 16));
  if ((v5 & 1) != 0)
    return 1;
  v6 = *(_QWORD *)(a2 + 24);
  if (!v6)
  {
    v8 = 0;
    goto LABEL_7;
  }
  v7 = sub_22ED725B0(a1, v6);
  if ((v7 & 1) != 0)
    return 1;
  v8 = (_QWORD *)(v7 & 0xFFFFFFFFFFFFFFFELL);
LABEL_7:
  v10 = *(_DWORD *)(a2 + 32);
  if (!v10)
  {
    sub_22F0D5A50(*(_QWORD *)(a2 + 16));
    v10 = v11;
  }
  LODWORD(v12) = *(_DWORD *)(a2 + 36);
  if (!(_DWORD)v12)
  {
    v12 = *(_QWORD *)(a2 + 24);
    if (v12)
      sub_22F0D60E4(v12);
  }
  return sub_22EB542F0(*a1, *(_QWORD *)(v4 + 40), (void *)(v5 & 0xFFFFFFFFFFFFFFFELL), v8, v10, v12);
}

uint64_t sub_22EDB4894(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v9;
  int v10;
  int v11;

  v4 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(a2 + 24);
  if (!v5)
  {
    v7 = 0;
    goto LABEL_7;
  }
  v6 = sub_22ED725B0(a1, v5);
  if ((v6 & 1) != 0)
    return 1;
  v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
  v9 = *(_DWORD *)(a2 + 36);
  if (!v9)
  {
    sub_22F0D5A50(*(_QWORD *)(a2 + 16));
    v9 = v10;
  }
  v11 = *(_DWORD *)(a2 + 40);
  if (!v11)
    sub_22F0D60E4(*(_QWORD *)(a2 + 16));
  return sub_22F32FF64(*a1, (void *)(v4 & 0xFFFFFFFFFFFFFFFELL), v7, *(_BYTE *)(a2 + 32), v9, v11);
}

uint64_t sub_22EDB4948(uint64_t *a1, _DWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  _DWORD *v6;
  unint64_t *v7;
  int *v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  unsigned __int32 v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  int *v37;
  uint64_t v38;
  size_t v39;
  unsigned __int32 v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  int v46;
  uint64_t v47;
  int64x2_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  unint64_t v53;
  void *v54[2];
  _BYTE v55[32];
  uint64_t v56;
  int64x2_t v57;
  _BYTE v58[32];
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  _QWORD v62[6];

  v2 = a1;
  v62[4] = *MEMORY[0x24BDAC8D0];
  v60 = v62;
  v61 = 0x400000000;
  v3 = a2[1];
  if (!(_DWORD)v3)
  {
    v5 = 0;
    goto LABEL_76;
  }
  v4 = 0;
  v5 = 0;
  v6 = a2 + 6;
  v48 = vdupq_n_s64(0x20uLL);
  v49 = (uint64_t)(a2 + 6);
  v50 = a2[1];
  while (2)
  {
    v7 = *(unint64_t **)&v6[2 * v4];
    v8 = (int *)(v7 + 1);
    v9 = *v7;
    if ((*v7 & 0xF) != 0 || !v9 || *(_BYTE *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
    {
      v56 = (uint64_t)v58;
      v57 = vdupq_n_s64(0x20uLL);
      v59 = 0;
      v10 = sub_22F11598C(v9);
      if (v57.i64[0] < (unint64_t)v10)
        sub_22EEB52C0(&v56, v10);
      v11 = sub_22EDA4BEC(v2, &v56);
      if (v11 >= 0x10)
      {
        v13 = v11;
        if (v11 == *v7)
        {
          v14 = v61;
          v15 = HIDWORD(v61);
        }
        else
        {
          v22 = *(_QWORD *)(*v2 + 88);
          v23 = v57.i64[0] - v57.i64[1];
          v24 = v57.i32[0] - v57.i32[2];
          if (v57.i32[0] == v57.i32[2])
            v24 = sub_22F11598C(v13);
          v7 = (unint64_t *)sub_22E3CD3D4(v22 + 2032, v24 + 8, 3);
          *v7 = v13;
          memcpy(v7 + 1, (const void *)(v56 + v57.i64[1]), v23);
          v14 = v61;
          v15 = HIDWORD(v61);
          v5 = 1;
        }
        if (v14 >= v15)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v14 = v61;
        }
        v60[v14] = (uint64_t)v7;
        LODWORD(v61) = v61 + 1;
        v12 = 4;
      }
      else
      {
        v12 = 1;
      }
      if ((_BYTE *)v56 != v58 && v56)
        MEMORY[0x2348A0E84]();
      goto LABEL_53;
    }
    v16 = *(_QWORD *)(v9 + 32);
    if (v16 >= 0x10 && (*(_QWORD *)(v9 + 32) & 0xFLL) == 0)
      v32 = *(_QWORD *)((char *)&unk_22F498010
                      + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
    else
      v32 = 1;
    v52 = *(_QWORD *)(v9 + 32);
    v53 = ((unint64_t)v8 + v32 + 3) & -v32;
    v54[0] = v55;
    v54[1] = (void *)0x200000000;
    sub_22EE73804(*v2, v16, v53, (uint64_t)v54);
    v46 = *(_DWORD *)(v9 + 20);
    LODWORD(v18) = v46 - 1;
    if (v46)
      v18 = v18;
    else
      v18 = 0;
    v47 = v18;
    v19 = v16;
    for (i = v16; ; i = sub_22F115B7C(i))
    {
      while (1)
      {
        if ((i & 0xF) != 0)
          goto LABEL_32;
        v21 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v21 <= 0x39)
          break;
LABEL_27:
        if (sub_22F115668(i))
          v19 = i;
        i = sub_22F115B7C(i);
        if (!i)
          goto LABEL_43;
      }
      if (v21 == 24)
        goto LABEL_42;
      if (v21 == 26)
        break;
      if (((1 << v21) & 0x20000000200003CLL) == 0)
        goto LABEL_27;
LABEL_32:
      ;
    }
    if ((*(_BYTE *)(i + 23) & 0x10) == 0)
      goto LABEL_32;
LABEL_42:
    v19 = i;
LABEL_43:
    sub_22F115668(v19);
    sub_22F1167E8(&v52);
    v2 = a1;
    v25 = *a1;
    v26 = *(_DWORD *)(*a1 + 11992);
    *(_DWORD *)(*a1 + 11992) = -1;
    v56 = (uint64_t)v58;
    v57 = v48;
    v59 = 0;
    v27 = sub_22F11598C(*v7);
    if (v57.i64[0] < (unint64_t)v27)
      sub_22EEB52C0(&v56, v27);
    v28 = sub_22EDA4BEC(a1, &v56);
    if (v28 < 0x10)
    {
LABEL_46:
      v12 = 1;
      goto LABEL_47;
    }
    v29 = v28;
    v30 = v16;
    while (2)
    {
      while (2)
      {
        if ((v30 & 0xF) != 0)
          goto LABEL_67;
        v31 = *(unsigned __int8 *)(*(_QWORD *)(v30 & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v31 > 0x39)
        {
LABEL_62:
          if (sub_22F115668(v30))
            v16 = v30;
          v30 = sub_22F115B7C(v30);
          if (!v30)
            goto LABEL_69;
          continue;
        }
        break;
      }
      if (v31 == 24)
        break;
      if (v31 != 26)
      {
        if (((1 << v31) & 0x20000000200003CLL) != 0)
          goto LABEL_67;
        goto LABEL_62;
      }
      if ((*(_BYTE *)(v30 + 23) & 0x10) == 0)
      {
LABEL_67:
        v30 = sub_22F115B7C(v30);
        continue;
      }
      break;
    }
    v16 = v30;
LABEL_69:
    v33 = sub_22F115668(v16);
    v34 = sub_22F1167E8(&v52);
    v2 = a1;
    v35 = sub_22F34AE9C((_QWORD *)*a1, v29, v33 | ((unint64_t)v34 << 32), *v8, v47 | ((unint64_t)(v46 != 0) << 32));
    if (v35 < 0x10)
      goto LABEL_46;
    v36 = v35;
    sub_22EEB5360((uint64_t)&v56, v35, 4uLL, 4);
    *v37 = *v8;
    v38 = *(_QWORD *)(*a1 + 88);
    v39 = v57.i64[0] - v57.i64[1];
    v40 = v57.i32[0] - v57.i32[2];
    if (v57.i32[0] == v57.i32[2])
      v40 = sub_22F11598C(v36);
    v41 = (_QWORD *)sub_22E3CD3D4(v38 + 2032, v40 + 8, 3);
    *v41 = v36;
    memcpy(v41 + 1, (const void *)(v56 + v57.i64[1]), v39);
    v42 = v61;
    if (v61 >= (unint64_t)HIDWORD(v61))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v42 = v61;
    }
    v60[v42] = (uint64_t)v41;
    LODWORD(v61) = v61 + 1;
    v12 = 4;
LABEL_47:
    if ((_BYTE *)v56 != v58 && v56)
      MEMORY[0x2348A0E84]();
    *(_DWORD *)(v25 + 11992) = v26;
    if (v54[0] != v55)
      free(v54[0]);
    v5 = 1;
    v6 = (_DWORD *)v49;
    v3 = v50;
LABEL_53:
    if (v12 == 4)
    {
      if (++v4 == v3)
      {
LABEL_76:
        if (*(_DWORD *)(*v2 + 11992) != -1 || (v5 & 1) != 0)
          v43 = sub_22EBC6244(*v2, (*a2 >> 18), a2[4], v60, v61, a2[5]);
        else
          v43 = (uint64_t)a2;
        goto LABEL_81;
      }
      continue;
    }
    break;
  }
  v43 = 1;
LABEL_81:
  if (v60 != v62)
    free(v60);
  return v43;
}

uint64_t sub_22EDB4FA0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;

  v2 = a2;
  if ((*(_BYTE *)(a2 + 2) & 0x40) != 0)
  {
    v9 = *(_QWORD *)(a2 + 16);
    v10 = sub_22ED72360(a1, v9);
    if (v10)
    {
      v11 = (unint64_t *)v10;
      v12 = *a1;
      if (v9 != v10 || *(_DWORD *)(v12 + 11992) != -1)
      {
        v14 = *(_DWORD *)(v2 + 24);
        v15 = (*(_DWORD *)v2 >> 18) & 0xF;
        sub_22F0D4E74(v2);
        return sub_22EB28664(v12, v11, v14, v15, v16);
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    v4 = *a1;
    sub_22EB4DECC(*a1, 0, 0, 3);
    v24 = 0;
    v5 = *(unsigned __int8 **)(v2 + 16);
    if (*v5 == 214 && (v6 = (unsigned __int8 *)*((_QWORD *)v5 + 3), *v6 == 163))
    {
      v7 = sub_22EDBFCE4(a1, *((_QWORD *)v5 + 3), 0, &v24);
      if (v7 >= 2)
      {
        if (v6 == (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL) && *(_DWORD *)(*a1 + 11992) == -1)
          v7 = (unint64_t)v5;
        else
          v7 = sub_22EB27A20((_QWORD *)*a1, *((_DWORD *)v5 + 4), *((_DWORD *)v5 + 5), v7 & 0xFFFFFFFFFFFFFFFELL);
      }
    }
    else
    {
      v7 = sub_22ED725B0(a1, *(_QWORD *)(v2 + 16));
    }
    v18 = v24;
    if (v24)
    {
      v19 = *(_DWORD *)(v2 + 24);
      v20 = (*(_DWORD *)v2 >> 18) & 0xF;
      sub_22F0D4E74(v2);
      v2 = sub_22EB28664(*a1, v18, v19, v20, v21);
    }
    else if ((v7 & 1) != 0)
    {
      v2 = 1;
    }
    else
    {
      v22 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 16) != v22)
      {
        v23 = sub_22EB28F24((_QWORD *)*a1, v22, *(_DWORD *)(v2 + 24), (*(_DWORD *)v2 >> 18) & 0xF);
        if ((v23 & 1) != 0)
          v2 = 1;
        else
          v2 = v23;
      }
    }
    sub_22EB48E64(v4);
  }
  return v2;
}

uint64_t sub_22EDB5178(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a2;
  v4 = *(_DWORD *)a2 & 0x7C0000;
  v5 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == 0x100000 && *v5 == 163)
    v6 = sub_22EDBFCE4(a1, (uint64_t)v5, 1, 0);
  else
    v6 = sub_22ED725B0(a1, v5);
  if ((v6 & 1) != 0)
    return 1;
  v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 16) != v7)
    return sub_22EB2941C((_QWORD *)*a1, 0, *(_DWORD *)(v2 + 4), (*(_DWORD *)v2 >> 18) & 0x1F, v7);
  return v2;
}

uint64_t sub_22EDB521C(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v2 = a2;
  v4 = sub_22ED72360(a1, *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8);
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v6 = sub_22ED725B0(a1, *(_QWORD *)(v2 + 16));
  if ((v6 & 1) != 0)
    return 1;
  if (*((_DWORD *)*a1 + 2998) != -1
    || v5 != (uint64_t *)(*(_QWORD *)(v2 + 24) & 0xFFFFFFFFFFFFFFF8)
    || *(_QWORD *)(v2 + 16) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EB4B7A8(*a1, *(_DWORD *)(v2 + 32), v6 & 0xFFFFFFFFFFFFFFFELL, v5, *(_DWORD *)(v2 + 36));
  }
  return v2;
}

uint64_t sub_22EDB52C0(uint64_t *a1, unsigned __int8 **a2, unsigned int a3, int a4, uint64_t a5, _BYTE *a6)
{
  _BYTE *v6;
  int v8;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t result;
  int v31;
  uint64_t v32;
  void *v33[2];
  _QWORD v34[5];

  v34[4] = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return 0;
  v6 = a6;
  v8 = a4;
  v11 = v34;
  v12 = a3;
  while (1)
  {
    v13 = *a2;
    if (v8)
      break;
    if (*v13 != 213)
    {
      v14 = sub_22ED725B0(a1, *a2);
      if ((v14 & 1) != 0)
        return 1;
      goto LABEL_20;
    }
LABEL_9:
    v15 = *((_QWORD *)v13 + 3);
    v16 = v11;
    v33[0] = v11;
    v33[1] = (void *)0x200000000;
    v17 = *a1;
    v31 = 7;
    v32 = v15;
    sub_22EE7377C(v17, (uint64_t)&v31, (uint64_t)v33);
    v18 = *((_DWORD *)v13 + 5);
    v19 = *a1;
    v20 = *(_DWORD *)(*a1 + 11992);
    *(_DWORD *)(*a1 + 11992) = -1;
    v21 = sub_22ED725B0(a1, v15);
    if ((v21 & 1) != 0)
    {
      v24 = 0;
      v6 = a6;
    }
    else
    {
      LODWORD(v22) = v18 - 1;
      if (v18)
        v22 = v22;
      else
        v22 = 0;
      v23 = sub_22EE739C0(*a1, v21 & 0xFFFFFFFFFFFFFFFELL, *((unsigned int *)v13 + 4), v22 | ((unint64_t)(v18 != 0) << 32));
      v24 = 0;
      v6 = a6;
      if ((v23 & 1) == 0)
      {
        if (a6)
          *a6 = 1;
        v25 = *(unsigned int *)(a5 + 8);
        if (v25 >= *(unsigned int *)(a5 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v25 = *(unsigned int *)(a5 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a5 + 8 * v25) = v23 & 0xFFFFFFFFFFFFFFFELL;
        ++*(_DWORD *)(a5 + 8);
        v24 = 1;
      }
    }
    *(_DWORD *)(v19 + 11992) = v20;
    v11 = v16;
    if (v33[0] != v16)
      free(v33[0]);
    v8 = a4;
    if ((v24 & 1) == 0)
      return 1;
LABEL_30:
    ++a2;
    if (!--v12)
      return 0;
  }
  if (!sub_22EFFF908(*a2))
  {
    v13 = *a2;
    if (**a2 != 213)
    {
      v14 = sub_22EDB5554(a1, *a2, 0);
      if ((v14 & 1) != 0)
        return 1;
LABEL_20:
      v26 = v14 & 0xFFFFFFFFFFFFFFFELL;
      if (v6 && *a2 != (unsigned __int8 *)v26)
        *v6 = 1;
      v27 = *(unsigned int *)(a5 + 8);
      if (v27 >= *(unsigned int *)(a5 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v27 = *(unsigned int *)(a5 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a5 + 8 * v27) = v26;
      ++*(_DWORD *)(a5 + 8);
      goto LABEL_30;
    }
    goto LABEL_9;
  }
  if (v6)
  {
    result = 0;
    *v6 = 1;
    return result;
  }
  return 0;
}

uint64_t sub_22EDB5554(uint64_t *a1, unsigned __int8 *a2, char a3)
{
  unsigned __int8 *v4;
  int v6;
  uint64_t v7;
  int v8;
  unsigned __int8 **v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t *v41;
  unsigned int v42;
  int v43;
  uint64_t *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  void *v53;
  uint64_t v54;
  _QWORD v55[9];

  v55[8] = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 0;
  v4 = a2;
  while (1)
  {
    v6 = *v4;
    if ((v6 & 0xFE) == 0xAC)
    {
      v4 = (unsigned __int8 *)*((_QWORD *)v4 + 2);
      v6 = *v4;
    }
    if (v6 == 106)
    {
      v4 = *(unsigned __int8 **)(*((_QWORD *)v4 + 2) + 16);
      v6 = *v4;
    }
    if (v6 == 186)
    {
      v7 = *((_QWORD *)v4 + 2);
      v4 = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFF8);
      if ((v7 & 4) != 0)
        v4 = (unsigned __int8 *)*((_QWORD *)v4 + 5);
    }
    while (1)
    {
      v8 = *v4;
      if (v8 != 116)
        break;
      v4 = (unsigned __int8 *)*((_QWORD *)v4 + 3);
    }
    if (v8 == 153)
    {
      v4 = sub_22EFFB374(v4);
      v8 = *v4;
    }
    if (v8 != 132)
      break;
    v9 = (unsigned __int8 **)(v4 + 16);
LABEL_30:
    v4 = *v9;
    if (!*v9)
      return 0;
  }
  v10 = v8 & 0xFE;
  v11 = v8;
  if ((a3 & 1) == 0)
  {
    if (v10 != 118 || (*(_DWORD *)v4 & 0x100000) == 0)
      return sub_22ED725B0(a1, v4);
    v11 = *(_DWORD *)v4;
  }
  if (v8 == 179)
  {
    v20 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 24, 3);
    v15 = v20;
    v21 = 0;
    v22 = 0;
    goto LABEL_35;
  }
  if (v8 == 131)
  {
    sub_22F0D4E74((uint64_t)v4);
    v18 = HIDWORD(v17);
    v19 = v17;
    v20 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 24, 3);
    v15 = v20;
    v21 = v19;
    v22 = v18;
LABEL_35:
    sub_22F002D50(v20, v21, 0, 0, v22);
    return v15;
  }
  if (v10 != 118 || v11 == 119)
    return sub_22ED725B0(a1, v4);
  if ((*(_DWORD *)v4 & 0x200000) != 0)
  {
    v12 = *(_DWORD *)v4;
    v13 = v12 == 119;
    if (v12 == 119)
      v14 = v4;
    else
      v14 = 0;
    v9 = (unsigned __int8 **)(v14 + 48);
    if (!v13)
      v9 = (unsigned __int8 **)(v4 + 40);
    goto LABEL_30;
  }
  v23 = *a1;
  if ((*(_DWORD *)v4 & 0x100000) == 0
    || ((v25 = *(_DWORD *)(*(_QWORD *)(v23 + 3688) + 576 * *(unsigned int *)(v23 + 3696) - 576), v25 <= 3)
      ? (v26 = v25 == 2)
      : (v26 = 1),
        v26))
  {
    v24 = 1;
  }
  else
  {
    v24 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(v23 + 72) + 1) & 2) != 0)
    {
      v53 = 0;
      v51 = 3;
      v52 = 1;
      v50 = *(unsigned int *)(v23 + 1704);
      sub_22EB4DDB8(v23 + 3688, &v52, (int *)&v50, (__int16 *)(v23 + 1693), (uint64_t *)&v53, &v51);
      v27 = *(unsigned int *)(v23 + 3696);
      v28 = v27 - 2;
      v29 = *(_QWORD *)(v23 + 3688);
      v30 = *(_DWORD *)(v29 + 576 * (v27 - 2));
      if (v30 == 5)
      {
        *(_BYTE *)(v29 + 576 * v27 - 4) = *(_BYTE *)(v29 + 576 * v28 + 572);
        v31 = 1;
      }
      else if (v30 == 2)
      {
        *(_BYTE *)(v29 + 576 * v27 - 4) = 1;
        v31 = *(_BYTE *)(v29 + 576 * v28 + 573) != 0;
      }
      else
      {
        v31 = 0;
        *(_BYTE *)(v29 + 576 * v27 - 4) = 0;
      }
      v32 = v29 + 576 * v27;
      *(_BYTE *)(v32 - 3) = v31;
      *(_WORD *)(v23 + 1693) = 0;
      if (*(_DWORD *)(v23 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v23 + 1776), (llvm::SmallPtrSetImplBase *)(v32 - 560));
        sub_22EAEAE08(v23 + 1840, (uint64_t *)(v32 - 496));
      }
      v24 = 0;
    }
  }
  v53 = v55;
  v54 = 0x800000000;
  LOBYTE(v50) = 0;
  v33 = *v4;
  v34 = v33 == 119;
  if (v33 == 119)
    v35 = v4;
  else
    v35 = 0;
  v36 = v35 + 48;
  if (v34)
    v37 = v36;
  else
    v37 = v4 + 40;
  v15 = 1;
  if ((sub_22EDB52C0(a1, v37, *((unsigned int *)v4 + 8), 1, &v53, &v50) & 1) != 0)
    goto LABEL_64;
  if ((*(_DWORD *)v4 & 0x100000) == 0)
  {
    v15 = 0;
    v38 = *((_QWORD *)v4 + 3);
    v39 = HIDWORD(v38);
    if (HIDWORD(v38))
    {
      v40 = v38;
      if ((_DWORD)v38)
      {
        v41 = (uint64_t *)v53;
        v42 = v54;
        v15 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 8 * v54 + 24, 3);
        sub_22F002D50(v15, v40, v41, v42, v39);
      }
    }
    goto LABEL_64;
  }
  if (*(_DWORD *)v4 != 119)
  {
    v43 = *((_DWORD *)v4 + 1);
    goto LABEL_63;
  }
  v47 = **((_QWORD **)v4 + 5);
  v48 = v47;
  while (2)
  {
    while (2)
    {
      if ((v48 & 0xF) != 0)
        goto LABEL_79;
      v49 = *(unsigned __int8 *)(*(_QWORD *)(v48 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v49 > 0x39)
      {
LABEL_74:
        if (sub_22F115668(v48))
          v47 = v48;
        v48 = sub_22F115B7C(v48);
        if (!v48)
          goto LABEL_83;
        continue;
      }
      break;
    }
    if (v49 == 24)
      break;
    if (v49 != 26)
    {
      if (((1 << v49) & 0x20000000200003CLL) != 0)
        goto LABEL_79;
      goto LABEL_74;
    }
    if ((*(_BYTE *)(v48 + 23) & 0x10) == 0)
    {
LABEL_79:
      v48 = sub_22F115B7C(v48);
      continue;
    }
    break;
  }
  v47 = v48;
LABEL_83:
  v43 = sub_22F115668(v47);
LABEL_63:
  v44 = (uint64_t *)v53;
  v45 = v54;
  sub_22F060B18(v4);
  v15 = sub_22EB353A0(*a1, v43, v44, v45, v46);
LABEL_64:
  if (v53 != v55)
    free(v53);
  if ((v24 & 1) == 0)
    sub_22EB48E64(v23);
  return v15;
}

uint64_t sub_22EDB5A70(uint64_t *a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  uint64_t result;

  if (!a2)
    return (uint64_t)a2;
  v8 = a3;
  switch(*(_BYTE *)a2)
  {
    case 1:
      result = sub_22EDB616C(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      break;
    case 2:
      result = sub_22EDB669C(a1, (uint64_t)a2);
      break;
    case 3:
    case 9:
    case 0x13:
    case 0x60:
      result = nullsub_910(a2);
      break;
    case 4:
      result = sub_22EDB6898(a1, (uint64_t)a2);
      break;
    case 5:
      result = sub_22EDB69C0(a1, (uint64_t)a2);
      break;
    case 6:
      result = sub_22EDB6C84(a1, (uint64_t)a2);
      break;
    case 7:
      result = sub_22EDB6E0C((unsigned int *)a1, (uint64_t)a2);
      break;
    case 8:
      result = sub_22EDB7024(a1, (uint64_t)a2);
      break;
    case 0xA:
      result = sub_22EDB702C(a1, (uint64_t)a2);
      break;
    case 0xB:
      result = sub_22EDB7080(a1, (uint64_t)a2);
      break;
    case 0xC:
      result = sub_22EBF43C8(a1, (uint64_t)a2);
      break;
    case 0xD:
      result = sub_22EDB7368(a1, (uint64_t)a2);
      break;
    case 0xE:
      result = sub_22EDB7410(a1, (uint64_t)a2);
      break;
    case 0xF:
      result = sub_22EB77BB4((uint64_t)a1, (uint64_t)a2);
      break;
    case 0x10:
      result = sub_22EDB75E4((uint64_t)a1, a2);
      break;
    case 0x11:
      result = sub_22EDB790C(a1, (uint64_t)a2);
      break;
    case 0x12:
      result = sub_22EDB7984(a1, (uint64_t)a2);
      break;
    case 0x14:
      result = sub_22EDB7BA8((uint64_t)a1, (uint64_t)a2);
      break;
    case 0x15:
      result = sub_22EDB7BB4(a1, (uint64_t)a2);
      break;
    case 0x16:
      result = sub_22EDB7C20(a1, (uint64_t)a2);
      break;
    case 0x17:
      result = sub_22EDB7C8C(a1, (uint64_t)a2);
      break;
    case 0x18:
      result = sub_22EDB7CF8(a1, (uint64_t)a2);
      break;
    case 0x19:
      result = sub_22EDB7D64(a1, (uint64_t)a2);
      break;
    case 0x1A:
      result = sub_22EDB7DD4(a1, (uint64_t)a2);
      break;
    case 0x1B:
      result = sub_22EDB7E40(a1, (uint64_t)a2);
      break;
    case 0x1C:
      result = sub_22EDB7EAC(a1, (uint64_t)a2);
      break;
    case 0x1D:
      result = sub_22EDB7F18(a1, (uint64_t)a2);
      break;
    case 0x1E:
      result = sub_22EDB7F84(a1, (uint64_t)a2);
      break;
    case 0x1F:
      result = sub_22EDB7FF0(a1, (uint64_t)a2);
      break;
    case 0x20:
      result = sub_22EDB805C(a1, (uint64_t)a2);
      break;
    case 0x21:
      result = sub_22EDB80C8(a1, (uint64_t)a2);
      break;
    case 0x22:
      result = sub_22EDB8134(a1, (uint64_t)a2);
      break;
    case 0x23:
      result = sub_22EDB81A0(a1, (uint64_t)a2);
      break;
    case 0x24:
      result = sub_22EDB820C(a1, (uint64_t)a2);
      break;
    case 0x25:
      result = sub_22EDB8278(a1, (uint64_t)a2);
      break;
    case 0x26:
      result = sub_22EDB82E4(a1, (uint64_t)a2);
      break;
    case 0x27:
      result = sub_22EDB8350(a1, (uint64_t)a2);
      break;
    case 0x28:
      result = sub_22EDB83BC(a1, (uint64_t)a2);
      break;
    case 0x29:
      result = sub_22EDB8428(a1, (uint64_t)a2);
      break;
    case 0x2A:
      result = sub_22EDB8494(a1, (uint64_t)a2);
      break;
    case 0x2B:
      result = sub_22EDB8500(a1, (uint64_t)a2);
      break;
    case 0x2C:
      result = sub_22EDB856C(a1, (uint64_t)a2);
      break;
    case 0x2D:
      result = sub_22EDB85D8(a1, (uint64_t)a2);
      break;
    case 0x2E:
      result = sub_22EDB8644(a1, (uint64_t)a2);
      break;
    case 0x2F:
      result = sub_22EDB86B0(a1, (uint64_t)a2);
      break;
    case 0x30:
      result = sub_22EDB871C(a1, (uint64_t)a2);
      break;
    case 0x31:
      result = sub_22EDB8788(a1, (uint64_t)a2);
      break;
    case 0x32:
      result = sub_22EDB87F4(a1, (uint64_t)a2);
      break;
    case 0x33:
      result = sub_22EDB8860(a1, (uint64_t)a2);
      break;
    case 0x34:
      result = sub_22EDB88CC(a1, (uint64_t)a2);
      break;
    case 0x35:
      result = sub_22EDB8938(a1, (uint64_t)a2);
      break;
    case 0x36:
      result = sub_22EDB89A4(a1, (uint64_t)a2);
      break;
    case 0x37:
      result = sub_22EDB8A10(a1, (uint64_t)a2);
      break;
    case 0x38:
      result = sub_22EDB8A7C(a1, (uint64_t)a2);
      break;
    case 0x39:
      result = sub_22EDB8AE8(a1, (uint64_t)a2);
      break;
    case 0x3A:
      result = sub_22EDB8B54(a1, (uint64_t)a2);
      break;
    case 0x3B:
      result = sub_22EDB8BC0(a1, (uint64_t)a2);
      break;
    case 0x3C:
    case 0x3D:
      result = sub_22EDB8C2C(a1, (uint64_t)a2);
      break;
    case 0x3E:
      result = sub_22EDB8C98(a1, (uint64_t)a2);
      break;
    case 0x3F:
      result = sub_22EDB8D04(a1, (uint64_t)a2);
      break;
    case 0x40:
      sub_22EB79398((_QWORD *)*a1, (uint64_t)a2);
      return 1;
    case 0x41:
      result = sub_22EDB8D70(a1, (uint64_t)a2);
      break;
    case 0x42:
      result = sub_22EDB8DDC(a1, (uint64_t)a2);
      break;
    case 0x43:
      result = sub_22EDB8E48(a1, (uint64_t)a2);
      break;
    case 0x44:
      result = sub_22EDB8EB4(a1, (uint64_t)a2);
      break;
    case 0x45:
      result = sub_22EDB8F20(a1, (uint64_t)a2);
      break;
    case 0x46:
      result = sub_22EDB8F8C(a1, (uint64_t)a2);
      break;
    case 0x47:
      result = sub_22EDB8FF8(a1, (uint64_t)a2);
      break;
    case 0x48:
      result = sub_22EDB9064(a1, (uint64_t)a2);
      break;
    case 0x49:
      result = sub_22EDB90D0(a1, (uint64_t)a2);
      break;
    case 0x4A:
      result = sub_22EDB913C(a1, (uint64_t)a2);
      break;
    case 0x4B:
      result = sub_22EDB91A8(a1, (uint64_t)a2);
      break;
    case 0x4C:
      result = sub_22EDB9214(a1, (uint64_t)a2);
      break;
    case 0x4D:
      result = sub_22EDB9280(a1, (uint64_t)a2);
      break;
    case 0x4E:
      result = sub_22EDB92EC(a1, (uint64_t)a2);
      break;
    case 0x4F:
      result = sub_22EDB9358(a1, (uint64_t)a2);
      break;
    case 0x50:
      result = sub_22EDB93C4(a1, (uint64_t)a2);
      break;
    case 0x51:
      result = sub_22EDB9430(a1, (uint64_t)a2);
      break;
    case 0x52:
      result = sub_22EDB949C(a1, (uint64_t)a2);
      break;
    case 0x53:
      result = sub_22EDB9508(a1, (uint64_t)a2);
      break;
    case 0x54:
      result = sub_22EDB9574(a1, (uint64_t)a2);
      break;
    case 0x55:
      result = sub_22EDB95E0(a1, (uint64_t)a2);
      break;
    case 0x56:
      result = sub_22EDB964C((unsigned int *)a1, (uint64_t)a2);
      break;
    case 0x57:
      result = sub_22EDB9738(a1, (uint64_t)a2);
      break;
    case 0x58:
      result = sub_22EDB97A4((uint64_t **)a1, (uint64_t)a2);
      break;
    case 0x59:
      result = sub_22EDB9858((_QWORD **)a1, (uint64_t)a2);
      break;
    case 0x5A:
      result = sub_22EDB98D0(a1, (uint64_t)a2);
      break;
    case 0x5B:
      result = sub_22EDB9AF8(a1, (uint64_t)a2);
      break;
    case 0x5C:
      result = sub_22EDB9B64(a1, (uint64_t)a2);
      break;
    case 0x5D:
      result = sub_22EDB9C58(a1, (uint64_t)a2);
      break;
    case 0x5E:
      result = sub_22EDB9CA8(a1, (uint64_t)a2);
      break;
    case 0x5F:
      result = sub_22EDB9D14(a1, (uint64_t)a2);
      break;
    case 0x61:
      result = sub_22EDB9D5C(a1, (uint64_t)a2);
      break;
    case 0x62:
      result = sub_22EDB9E10(a1, a2);
      break;
    case 0x63:
      result = sub_22EDBA020(a1, (uint64_t)a2);
      break;
    case 0x64:
      result = sub_22EDBA070(a1, a2);
      break;
    case 0x65:
      result = sub_22EDBA198(a1, (unsigned int *)a2, a3);
      break;
    case 0x66:
    case 0x67:
    case 0x68:
    case 0x69:
    case 0x6A:
    case 0x6B:
    case 0x6C:
    case 0x6D:
    case 0x6E:
    case 0x6F:
    case 0x70:
    case 0x71:
    case 0x72:
    case 0x73:
    case 0x74:
    case 0x75:
    case 0x76:
    case 0x77:
    case 0x78:
    case 0x79:
    case 0x7A:
    case 0x7B:
    case 0x7C:
    case 0x7D:
    case 0x7E:
    case 0x7F:
    case 0x80:
    case 0x81:
    case 0x82:
    case 0x83:
    case 0x84:
    case 0x85:
    case 0x86:
    case 0x87:
    case 0x88:
    case 0x89:
    case 0x8A:
    case 0x8B:
    case 0x8C:
    case 0x8D:
    case 0x8E:
    case 0x8F:
    case 0x90:
    case 0x91:
    case 0x92:
    case 0x93:
    case 0x94:
    case 0x95:
    case 0x96:
    case 0x97:
    case 0x98:
    case 0x99:
    case 0x9A:
    case 0x9B:
    case 0x9C:
    case 0x9D:
    case 0x9E:
    case 0x9F:
    case 0xA0:
    case 0xA1:
    case 0xA2:
    case 0xA3:
    case 0xA4:
    case 0xA5:
    case 0xA6:
    case 0xA7:
    case 0xA8:
    case 0xA9:
    case 0xAA:
    case 0xAB:
    case 0xAC:
    case 0xAD:
    case 0xAE:
    case 0xAF:
    case 0xB0:
    case 0xB1:
    case 0xB2:
    case 0xB3:
    case 0xB4:
    case 0xB5:
    case 0xB6:
    case 0xB7:
    case 0xB8:
    case 0xB9:
    case 0xBA:
    case 0xBB:
    case 0xBC:
    case 0xBD:
    case 0xBE:
    case 0xBF:
    case 0xC0:
    case 0xC1:
    case 0xC2:
    case 0xC3:
    case 0xC4:
    case 0xC5:
    case 0xC6:
    case 0xC7:
    case 0xC8:
    case 0xC9:
    case 0xCA:
    case 0xCB:
    case 0xCC:
    case 0xCD:
    case 0xCE:
    case 0xCF:
    case 0xD0:
    case 0xD1:
    case 0xD2:
    case 0xD3:
    case 0xD4:
    case 0xD5:
    case 0xD6:
    case 0xD7:
    case 0xD8:
    case 0xD9:
    case 0xDA:
    case 0xDB:
    case 0xDC:
    case 0xDD:
    case 0xDE:
    case 0xDF:
    case 0xE0:
    case 0xE1:
    case 0xE2:
    case 0xE3:
    case 0xE4:
    case 0xE5:
    case 0xE6:
    case 0xE7:
    case 0xE8:
    case 0xE9:
    case 0xEA:
      v10 = sub_22ED725B0(a1, a2);
      if (v8 == 2)
        v10 = sub_22EB49994(*a1, v10);
      result = sub_22ED2B1FC(*a1, v10, v8 == 0);
      break;
    case 0xEB:
      result = sub_22EDBA2F0((uint64_t)a1, (uint64_t)a2, a3);
      break;
    case 0xEC:
      result = sub_22EDBA39C((uint64_t)a1, a2);
      break;
    default:
      return (uint64_t)a2;
  }
  return result;
}

uint64_t sub_22EDB616C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v47;
  unsigned int v48;
  _QWORD v49[8];
  void *v50;
  uint64_t v51;
  _BYTE v52[32];
  void *v53;
  uint64_t v54;
  _BYTE v55[64];
  char *v56;
  uint64_t v57;
  _QWORD v58[10];

  v58[8] = *MEMORY[0x24BDAC8D0];
  v56 = (char *)v58;
  v57 = 0x800000000;
  v53 = v55;
  v54 = 0x800000000;
  v50 = v52;
  v51 = 0x400000000;
  v48 = 0;
  v10 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = 8 * v10;
    v14 = 1;
    while (1)
    {
      v15 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + v11);
      v16 = v51;
      if (v51 >= (unint64_t)HIDWORD(v51))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v16 = v51;
      }
      *((_QWORD *)v50 + v16) = v15;
      LODWORD(v51) = v51 + 1;
      v17 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + v11);
      v18 = v57;
      if (v57 >= (unint64_t)HIDWORD(v57))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v18 = v57;
      }
      *(_QWORD *)&v56[8 * v18] = v17;
      LODWORD(v57) = v57 + 1;
      v19 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + v11);
      v20 = sub_22ED725B0(a1, v19);
      if ((v20 & 1) != 0)
        break;
      v21 = v20 & 0xFFFFFFFFFFFFFFFELL;
      v22 = v19 != (v20 & 0xFFFFFFFFFFFFFFFELL);
      v10 = v54;
      if (v54 >= (unint64_t)HIDWORD(v54))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v54;
      }
      *((_QWORD *)v53 + v10) = v21;
      v12 |= v22;
      LODWORD(v10) = v54 + 1;
      LODWORD(v54) = v54 + 1;
      v11 += 8;
      if (v13 == v11)
        goto LABEL_13;
    }
  }
  else
  {
    v12 = 0;
LABEL_13:
    v23 = *(_DWORD *)(a2 + 20);
    if (v23)
    {
      v24 = 0;
      v14 = 1;
      while (1)
      {
        v25 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 8 * (v24 + *(_DWORD *)(a2 + 16)));
        v26 = v51;
        if (v51 >= (unint64_t)HIDWORD(v51))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v26 = v51;
        }
        *((_QWORD *)v50 + v26) = v25;
        LODWORD(v51) = v51 + 1;
        v27 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * (v24 + *(_DWORD *)(a2 + 16)));
        v28 = v57;
        if (v57 >= (unint64_t)HIDWORD(v57))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v28 = v57;
        }
        *(_QWORD *)&v56[8 * v28] = v27;
        LODWORD(v57) = v57 + 1;
        v29 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * (v24 + *(_DWORD *)(a2 + 16)));
        v30 = sub_22ED725B0(a1, v29);
        if ((v30 & 1) != 0)
          break;
        v31 = v30 & 0xFFFFFFFFFFFFFFFELL;
        v32 = v29 != (v30 & 0xFFFFFFFFFFFFFFFELL);
        v10 = v54;
        if (v54 >= (unint64_t)HIDWORD(v54))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v10 = v54;
        }
        *((_QWORD *)v53 + v10) = v31;
        v12 |= v32;
        LODWORD(v10) = v54 + 1;
        LODWORD(v54) = v54 + 1;
        if (v23 == ++v24)
          goto LABEL_23;
      }
    }
    else
    {
LABEL_23:
      v33 = *(_DWORD *)(a2 + 80);
      if (v33)
      {
        v34 = 0;
        v14 = 1;
        while (1)
        {
          v35 = *(_QWORD *)(*(_QWORD *)(a2 + 72)
                          + 8 * (v34 + *(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 20)));
          v36 = v51;
          if (v51 >= (unint64_t)HIDWORD(v51))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v36 = v51;
          }
          *((_QWORD *)v50 + v36) = v35;
          LODWORD(v51) = v51 + 1;
          v37 = sub_22ED725B0(a1, *(_QWORD *)(*(_QWORD *)(a2 + 32)+ 8 * (v34 + *(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 20))));
          if ((v37 & 1) != 0)
            break;
          v38 = v37 & 0xFFFFFFFFFFFFFFFELL;
          v39 = *(_QWORD *)(*(_QWORD *)(a2 + 32)
                          + 8 * (v34 + *(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 20))) != (v37 & 0xFFFFFFFFFFFFFFFELL);
          v10 = v54;
          if (v54 >= (unint64_t)HIDWORD(v54))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v10 = v54;
          }
          *((_QWORD *)v53 + v10) = v38;
          v12 |= v39;
          LODWORD(v10) = v54 + 1;
          LODWORD(v54) = v54 + 1;
          if (v33 == ++v34)
            goto LABEL_31;
        }
      }
      else
      {
LABEL_31:
        v40 = *a1;
        if (*(_DWORD *)(*a1 + 11992) != -1 || (v12 & 1) != 0)
        {
          v41 = *(unsigned int *)(a2 + 24);
          v42 = 0;
          if ((_DWORD)v41)
          {
            v43 = 0;
            v44 = 8 * v41;
            do
            {
              v45 = *(_QWORD *)(*(_QWORD *)(a2 + 64) + v43);
              if (v42 >= 8)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v42 = v48;
              }
              v49[v42] = v45;
              v42 = ++v48;
              v43 += 8;
            }
            while (v44 != v43);
            LODWORD(v10) = v54;
            v40 = *a1;
          }
          v14 = sub_22ED4E804(v40, *(_DWORD *)(a2 + 8), *(_BYTE *)(a2 + 12), *(_BYTE *)(a2 + 13), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), (char *)v50, a8, v56, v57, (uint64_t *)v53, v10, *(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL, (char *)v49, v42, 0, *(_DWORD *)(a2 + 80), v47, *(_DWORD *)(a2 + 40));
        }
        else
        {
          v14 = a2;
        }
      }
    }
  }
  if (v50 != v52)
    free(v50);
  if (v53 != v55)
    free(v53);
  if (v56 != (char *)v58)
    free(v56);
  return v14;
}

uint64_t sub_22EDB669C(uint64_t *a1, uint64_t a2)
{
  const void *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v17;
  const void *v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22[10];

  v22[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(const void **)(a2 + 72);
  v5 = *(unsigned int *)(a2 + 64);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = (*(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 20));
  v21 = 0;
  if (v7 < 9)
  {
    if (!(_DWORD)v7)
    {
      v15 = 0;
      v17 = *a1;
      goto LABEL_19;
    }
    v19 = *(const void **)(a2 + 72);
    v20 = *(unsigned int *)(a2 + 64);
  }
  else
  {
    v19 = *(const void **)(a2 + 72);
    v20 = *(unsigned int *)(a2 + 64);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  v8 = 0;
  LOBYTE(v9) = 0;
  v10 = 0;
  do
  {
    while (1)
    {
      v11 = sub_22ED725B0(a1, *(_QWORD *)(v6 + 8 * v8));
      if (v11 >= 2)
        break;
      v9 = 1;
      if (v7 - 1 == v8++)
        return v9;
    }
    v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    v13 = *(_QWORD *)(v6 + 8 * v8) != (v11 & 0xFFFFFFFFFFFFFFFELL);
    v14 = v21;
    if (v21 >= 8uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v14 = v21;
    }
    v22[v14] = v12;
    v10 |= v13;
    v15 = ++v21;
    ++v8;
  }
  while (v7 != v8);
  if ((v9 & 1) == 0)
  {
    v17 = *a1;
    v4 = v19;
    v5 = v20;
    if ((v10 & 1) != 0)
      return sub_22ED51D60(v17, *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 40), v4, v5, *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), *(_QWORD *)(a2 + 80), (*(_DWORD *)(a2 + 20) + *(_DWORD *)(a2 + 16)), *(_QWORD *)(a2 + 88), *(unsigned int *)(a2 + 24), v22, v15, *(_DWORD *)(a2 + 44));
LABEL_19:
    if (*(_DWORD *)(v17 + 11992) == -1)
      return a2;
    return sub_22ED51D60(v17, *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 40), v4, v5, *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), *(_QWORD *)(a2 + 80), (*(_DWORD *)(a2 + 20) + *(_DWORD *)(a2 + 16)), *(_QWORD *)(a2 + 88), *(unsigned int *)(a2 + 24), v22, v15, *(_DWORD *)(a2 + 44));
  }
  return 1;
}

uint64_t sub_22EDB6898(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  char *v12;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 56);
    v6 = v5 & 0xFFFFFFFFFFFFFFF8;
    if ((v5 & 4) != 0)
      v6 = *(_QWORD *)(v6 + 32);
    if (!sub_22ED72360(a1, v6))
      return 1;
    v7 = sub_22EACE428();
    if (!v7)
      return 1;
    v4 = v7;
    sub_22EFCCFA0(*(_QWORD *)(*a1 + 216), v7);
    if ((*(_BYTE *)(v4 + 28) & 0x80) != 0)
      return 1;
  }
  v8 = sub_22EDB5A70(a1, *(_QWORD *)(v2 + 24), 0);
  if ((v8 & 1) != 0)
    return 1;
  v9 = *a1;
  v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
  if (v4 || *(_DWORD *)(v9 + 11992) != -1 || *(_QWORD *)(v2 + 24) != v10)
  {
    v11 = *(_DWORD *)(v2 + 8);
    v2 = sub_22E3CD3D4(*(_QWORD *)(v9 + 88) + 2032, 32, 3);
    *(_BYTE *)v2 = 4;
    if (byte_255E04EB3)
    {
      v12 = sub_22F0D3748(4);
      ++*((_DWORD *)v12 + 2);
    }
    *(_DWORD *)(v2 + 8) = v11;
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v10;
  }
  return v2;
}

uint64_t sub_22EDB69C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v23;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22EDB5A70(a1, v4, 0);
    if ((v5 & 1) != 0)
      return 1;
  }
  else
  {
    v5 = 0;
  }
  v6 = sub_22EDB5A70(a1, *(_QWORD *)(v2 + 24), 0);
  if ((v6 & 1) != 0)
    return 1;
  v7 = sub_22EDB5A70(a1, *(_QWORD *)(v2 + 32), 0);
  if ((v7 & 1) != 0)
    return 1;
  v8 = sub_22EDB5A70(a1, *(_QWORD *)(v2 + 40), 0);
  if ((v8 & 1) != 0)
    return 1;
  v9 = sub_22ED725B0(a1, *(_QWORD *)(v2 + 48));
  v10 = v9;
  if ((v9 & 1) != 0)
    return 1;
  if ((v9 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v10 = sub_22EB52F30(*a1, *(_DWORD *)(v2 + 84), (unsigned __int8 *)(v9 & 0xFFFFFFFFFFFFFFFELL), 0);
  if ((v10 & 1) != 0)
    return 1;
  if ((v10 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v10 = (uint64_t)sub_22EBCCCF0(*a1, (int *)(v10 & 0xFFFFFFFFFFFFFFFELL));
  v11 = sub_22ED725B0(a1, *(_QWORD *)(v2 + 56));
  v12 = v11;
  if ((v11 & 1) != 0)
    return 1;
  if ((v11 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v12 = (unint64_t)sub_22EBCCCF0(*a1, (int *)(v11 & 0xFFFFFFFFFFFFFFFELL));
  v13 = sub_22EDB5A70(a1, *(_QWORD *)(v2 + 64), 0);
  v14 = v13;
  if ((v13 & 1) != 0)
    return 1;
  v15 = v5 & 0xFFFFFFFFFFFFFFFELL;
  v23 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) == -1
    && *(_QWORD *)(v2 + 16) == v15
    && *(_QWORD *)(v2 + 24) == (v6 & 0xFFFFFFFFFFFFFFFELL)
    && *(_QWORD *)(v2 + 32) == (v7 & 0xFFFFFFFFFFFFFFFELL)
    && *(_QWORD *)(v2 + 40) == (v8 & 0xFFFFFFFFFFFFFFFELL)
    && *(_QWORD *)(v2 + 48) == (v10 & 0xFFFFFFFFFFFFFFFELL)
    && *(_QWORD *)(v2 + 56) == (v12 & 0xFFFFFFFFFFFFFFFELL)
    && *(_QWORD *)(v2 + 64) == (v13 & 0xFFFFFFFFFFFFFFFELL))
  {
    v17 = v2;
  }
  else
  {
    v16 = v13 & 0xFFFFFFFFFFFFFFFELL;
    v17 = sub_22E8C6118(a1, *(_DWORD *)(v2 + 8), *(_DWORD *)(v2 + 80), v15, *(_DWORD *)(v2 + 84), v6 & 0xFFFFFFFFFFFFFFFELL, v7 & 0xFFFFFFFFFFFFFFFELL, v8 & 0xFFFFFFFFFFFFFFFELL, v10 & 0xFFFFFFFFFFFFFFFELL, v12 & 0xFFFFFFFFFFFFFFFELL, v13 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 88));
    if ((v17 & 1) != 0 && *(_QWORD *)(v2 + 64) != v16)
    {
      sub_22EA2BABC(*a1, *(_QWORD *)(v16 + 8));
      return 1;
    }
  }
  v18 = sub_22EDB5A70(a1, *(_QWORD *)(v2 + 72), 0);
  if ((v18 & 1) != 0)
    return 1;
  v19 = v18 & 0xFFFFFFFFFFFFFFFELL;
  v20 = v17 & 0xFFFFFFFFFFFFFFFELL;
  if ((v17 & 0xFFFFFFFFFFFFFFFELL) == v2 && *(_QWORD *)(v2 + 72) != v19)
  {
    v21 = sub_22E8C6118(a1, *(_DWORD *)(v2 + 8), *(_DWORD *)(v2 + 80), v23, *(_DWORD *)(v2 + 84), v6 & 0xFFFFFFFFFFFFFFFELL, v7 & 0xFFFFFFFFFFFFFFFELL, v8 & 0xFFFFFFFFFFFFFFFELL, v10 & 0xFFFFFFFFFFFFFFFELL, v12 & 0xFFFFFFFFFFFFFFFELL, v14 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 88));
    if ((v21 & 1) != 0)
      return 1;
    v20 = v21 & 0xFFFFFFFFFFFFFFFELL;
  }
  if (v20 != v2)
    return sub_22ED33C64(*a1, v20, v19);
  return v2;
}

uint64_t sub_22EDB6C84(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  unsigned int v16;
  _QWORD v17[9];

  v17[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EDB7024(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v16 = 0;
  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (uint64_t *)(a2 + 24);
    v8 = 1;
    while (1)
    {
      v9 = sub_22EDB6898(a1, *v7);
      if ((v9 & 1) != 0)
        break;
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      v6 = v6 || *v7 != v10;
      v11 = v16;
      if (v16 >= 8uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v16;
      }
      v17[v11] = v10;
      v12 = ++v16;
      ++v7;
      if (!--v5)
        goto LABEL_14;
    }
  }
  else
  {
    v12 = 0;
    v6 = 0;
LABEL_14:
    v13 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_DWORD *)(*a1 + 11992) == -1 && (*(_QWORD *)(a2 + 16) != v13 ? (v14 = 1) : (v14 = v6), (v14 & 1) == 0))
      return a2;
    else
      return sub_22ED36EF4(*a1, *(_DWORD *)(a2 + 8), v13, v17, v12);
  }
  return v8;
}

uint64_t sub_22EDB6E0C(unsigned int *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *v13;
  uint64_t v14;
  const char *v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  __int128 v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v28;
  const char *v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  _QWORD v34[14];

  v34[12] = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 32;
  sub_22F0D5A50(*(_QWORD *)(a2 + 32 + 8 * *(unsigned int *)(a2 + 8)));
  v6 = v5;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(unsigned int *)((v7 & 0xFFFFFFFFFFFFFFF8) + 72);
  v9 = *(unsigned int *)((v7 & 0xFFFFFFFFFFFFFFF8) + 76);
  v32 = v34;
  v33 = 0x400000000;
  if ((_DWORD)v8)
  {
    v28 = v5;
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 88;
    do
    {
      if (v9)
      {
        v11 = *(_QWORD *)(*(_QWORD *)v10 + 40) & 0xFFFFFFFFFFFFFFF8;
        if ((*(_QWORD *)(*(_QWORD *)v10 + 40) & 7) != 0 || v11 == 0)
        {
          v14 = 0;
          v15 = "";
        }
        else
        {
          v13 = *(_DWORD **)(v11 + 16);
          v16 = *v13;
          v15 = (const char *)(v13 + 4);
          v14 = v16;
        }
        v17 = sub_22EDA95F0(a1, *(_QWORD *)(*(_QWORD *)v10 + 48));
        v29 = v15;
        v30 = v14;
        v31 = v17;
      }
      else
      {
        v29 = 0;
        v30 = 0;
        v31 = 0;
      }
      v18 = sub_22E4EF088((uint64_t)&v32, (unint64_t)&v29, 1);
      v19 = (char *)v32 + 24 * v33;
      v20 = *(_OWORD *)v18;
      *((_QWORD *)v19 + 2) = *(_QWORD *)(v18 + 16);
      *(_OWORD *)v19 = v20;
      v21 = v33 + 1;
      LODWORD(v33) = v33 + 1;
      v10 += 8;
      --v9;
      --v8;
    }
    while (v8);
    v7 = *(_QWORD *)(a2 + 16);
    v22 = v32;
    v6 = v28;
  }
  else
  {
    v21 = 0;
    v22 = v34;
  }
  sub_22ED379B0(*(_QWORD *)a1, v6, 0, (v7 >> 1) & 3, (uint64_t)v22, v21, 0);
  v23 = *(_QWORD *)a1;
  sub_22E905168(*(_QWORD *)a1, 0);
  v24 = sub_22EDB5A70(a1, *(_QWORD *)(v4 + 8 * *(unsigned int *)(a2 + 8)), 0);
  v25 = *(_QWORD *)(*(_QWORD *)(v23 + 1896) + 8 * *(unsigned int *)(v23 + 1904) - 8);
  --*(_QWORD *)(v25 + 360);
  if ((v24 & 1) != 0)
  {
    sub_22F344E80(*(_QWORD *)a1);
    v26 = 1;
  }
  else
  {
    v26 = sub_22ED37CF8(*(_QWORD **)a1, v24 & 0xFFFFFFFFFFFFFFFELL);
  }
  if (v32 != v34)
    free(v32);
  return v26;
}

uint64_t sub_22EDB7024(uint64_t *a1, uint64_t a2)
{
  return sub_22EDBA4C8(a1, a2, 0);
}

uint64_t sub_22EDB702C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EDB5554(a1, *(unsigned __int8 **)(a2 + 16), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22E9FB310(*a1, *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL, *(_BYTE *)(a2 + 32) & 1);
}

uint64_t sub_22EDB7080(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[6];
  uint64_t v30;
  _OWORD v31[2];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  void *v38;
  _QWORD v39[7];

  v39[6] = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 1904);
  if ((_DWORD)v5)
    v6 = *(_QWORD *)(*(_QWORD *)(v4 + 1896) + 8 * v5 - 8);
  else
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 216);
  if (v7)
    v8 = v7 - 72;
  else
    v8 = 0;
  *(_DWORD *)(v6 + 8) &= ~0x20000u;
  if (!sub_22E9FC668(*a1, *(_DWORD *)(v8 + 24)))
    return 1;
  v9 = sub_22E9F85C0();
  if (!v9)
    return 1;
  v12 = v9;
  *(_QWORD *)&v31[0] = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
  sub_22F25E108(a1 + 1, v31)[1] = v9;
  *(_QWORD *)(v6 + 176) = v12;
  v13 = sub_22EDB5A70(a1, *(_QWORD *)(a2 + 32), 0);
  if ((v13 & 1) != 0)
    return 1;
  v14 = sub_22EDB5A70(a1, *(_QWORD *)(a2 + 40), 0);
  if ((v14 & 1) != 0)
    return 1;
  v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
  if (!sub_22E9F9340((_QWORD *)*a1, (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFFELL)))
    return 1;
  *(_DWORD *)(v6 + 8) &= ~0x20000u;
  *(_QWORD *)(v6 + 336) = v13 & 0xFFFFFFFFFFFFFFFELL;
  *(_QWORD *)(v6 + 344) = v15;
  v16 = sub_22EDB5A70(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v16 & 1) != 0)
    return 1;
  sub_22F31B0C0((uint64_t)v31, *a1, v8, v6, v16 & 0xFFFFFFFFFFFFFFFELL);
  if (!v37)
    goto LABEL_37;
  v17 = sub_22EDB5554(a1, *(unsigned __int8 **)(a2 + 80), 0);
  if ((v17 & 1) != 0)
    goto LABEL_37;
  *(_QWORD *)&v34 = v17 & 0xFFFFFFFFFFFFFFFELL;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v12 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
      || (sub_22F31B2A0((uint64_t)v31) & 1) != 0)
    {
      goto LABEL_33;
    }
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(a2 + 56);
  if (v18)
  {
    v19 = sub_22EDB5A70(a1, v18, 0);
    if ((v19 & 1) != 0)
      goto LABEL_37;
    *((_QWORD *)&v32 + 1) = v19 & 0xFFFFFFFFFFFFFFFELL;
  }
  v20 = *(_QWORD *)(a2 + 48);
  if (v20)
  {
    v21 = sub_22EDB5A70(a1, v20, 0);
    if ((v21 & 1) != 0)
      goto LABEL_37;
    *(_QWORD *)&v32 = v21 & 0xFFFFFFFFFFFFFFFELL;
  }
  v22 = *(_QWORD *)(a2 + 96);
  if (v22)
  {
    v23 = sub_22EDB5A70(a1, v22, 0);
    if ((v23 & 1) != 0)
      goto LABEL_37;
    *(_QWORD *)&v35 = v23 & 0xFFFFFFFFFFFFFFFELL;
  }
  v24 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 64));
  if ((v24 & 1) != 0)
    goto LABEL_37;
  *(_QWORD *)&v33 = v24 & 0xFFFFFFFFFFFFFFFELL;
  v25 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 72));
  if ((v25 & 1) != 0)
    goto LABEL_37;
  *((_QWORD *)&v33 + 1) = v25 & 0xFFFFFFFFFFFFFFFELL;
  v26 = *(_QWORD *)(a2 + 88);
  if (!v26)
    goto LABEL_33;
  v27 = sub_22EDB5A70(a1, v26, 0);
  if ((v27 & 1) != 0)
  {
LABEL_37:
    v10 = 1;
    goto LABEL_38;
  }
  *((_QWORD *)&v34 + 1) = v27 & 0xFFFFFFFFFFFFFFFELL;
LABEL_33:
  v30 = v36;
  v29[4] = v34;
  v29[5] = v35;
  v29[0] = v31[0];
  v29[1] = v31[1];
  v29[2] = v32;
  v29[3] = v33;
  v28 = sub_22F3F2E7C(*(_QWORD *)(*a1 + 88), (uint64_t)v29);
  if (v28)
    v10 = v28;
  else
    v10 = 1;
LABEL_38:
  if (v38 != v39)
    free(v38);
  return v10;
}

uint64_t sub_22EDB7368(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;

  v2 = a2;
  v4 = sub_22EDB5A70(a1, *(_QWORD *)(a2 + 8), 0);
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ED725B0(a1, *(_QWORD *)(v2 + 16));
  if ((v5 & 1) != 0)
    return 1;
  v6 = (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL);
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(unsigned __int8 **)(v2 + 16) != v6
    || *(_QWORD *)(v2 + 8) != (v4 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22F3440A8(*a1, *(_DWORD *)(v2 + 4), v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 24), *(unsigned int *)(v2 + 24), v6, *(_DWORD *)(v2 + 28));
  }
  return v2;
}

uint64_t sub_22EDB7410(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v4 = *a1;
  if (*(_DWORD *)(*(_QWORD *)(v4 + 72) + 72))
    sub_22EC80540(v4);
  v5 = sub_22EDB5A70(a1, *(_QWORD *)(a2 + 8), 0);
  if ((v5 & 1) != 0)
    return 1;
  if (v5 >= 2 && *(_DWORD *)(*(_QWORD *)(*a1 + 72) + 72) != 0)
    sub_22EC9AE58((_QWORD *)*a1, *(_DWORD *)(a2 + 4), (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v7 = *(_QWORD *)(a2 + 16);
  v8 = v7 ? *(_QWORD *)(v7 + 8) : 0;
  sub_22EDBA730((uint64_t)&v22, (uint64_t)a1, *(_DWORD *)(a2 + 4), v8, *(_QWORD *)(a2 + 24), 0);
  if ((_BYTE)v23)
    return 1;
  v9 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 32));
  if ((v9 & 1) != 0)
    return 1;
  v10 = *a1;
  v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
  if ((v9 & 0xFFFFFFFFFFFFFFFELL) != 0)
  {
    sub_22EFF605C(v9 & 0xFFFFFFFFFFFFFFFELL);
    v13 = v12;
  }
  else
  {
    v13 = 0;
  }
  v14 = 1;
  v15 = sub_22EBCF22C(v10, v11, v13, 1, 0) & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(a2 + 32) && !v15)
    return v14;
  v16 = sub_22EDB5A70(a1, *(_QWORD *)(a2 + 40), 0);
  if ((v16 & 1) != 0)
    return 1;
  v17 = *a1;
  v18 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(a2 + 8) != v18)
    goto LABEL_21;
  v21 = *(_QWORD *)(a2 + 16);
  if (v21)
    v21 = *(_QWORD *)(v21 + 8);
  if ((_QWORD)v22 == v21
    && *(_OWORD *)(a2 + 24) == __PAIR128__(v11, *((unint64_t *)&v22 + 1))
    && *(_QWORD *)(a2 + 40) == (v16 & 0xFFFFFFFFFFFFFFFELL))
  {
    return a2;
  }
LABEL_21:
  v19 = *(_DWORD *)(a2 + 4);
  v24 = v22;
  v25 = v23;
  return sub_22ED31008(v17, v19, *(_DWORD *)(a2 + 48), v18, (uint64_t)&v24, v15, *(_DWORD *)(a2 + 52), (_DWORD *)(v16 & 0xFFFFFFFFFFFFFFFELL));
}

uint64_t sub_22EDB75E4(uint64_t a1, unsigned __int16 *a2)
{
  unsigned __int16 *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  char *v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int16 *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unsigned __int8 v42;
  unsigned __int8 v43;

  v2 = a2;
  if ((*a2 & 0x2000) != 0)
    v4 = *((_QWORD *)a2 + 2);
  else
    v4 = 0;
  v5 = sub_22EDB5A70(a1, v4, 0);
  if ((v5 & 1) != 0)
    return 1;
  v6 = *v2;
  if ((v6 & 0x600) == 0x200)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
  }
  else
  {
    if ((v6 & 0x1000) != 0)
    {
      v12 = (v6 >> 13) & 1;
      v38 = *(_QWORD *)&v2[4 * v12 + 8];
      if (v38)
        v11 = *(_QWORD *)(v38 + 8);
      else
        v11 = 0;
    }
    else
    {
      v11 = 0;
      LODWORD(v12) = (v6 >> 13) & 1;
    }
    sub_22EDBA730((uint64_t)&v39, a1, *((_DWORD *)v2 + 1), v11, *(_QWORD *)&v2[4 * v12 + 8 + 4 * ((v6 >> 12) & 1)], (v6 & 0x700) == 256);
    if (v41)
      return 1;
    v7 = v39;
    v8 = v40;
    v9 = v42;
    v10 = v43;
    LODWORD(v6) = *v2;
  }
  v13 = (v6 & 0x700) != 0x100 || v9 == 0;
  v14 = v13;
  if (!v13 && !v10)
  {
    v15 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 8, 3);
    sub_22F0D5A50(*(_QWORD *)&v2[4 * ((*v2 >> 12) & 1) + 12 + 4 * ((*v2 >> 13) & 1)]);
    v17 = v16;
    *(_BYTE *)v15 = 19;
    if (byte_255E04EB3)
    {
      v18 = sub_22F0D3748(19);
      ++*((_DWORD *)v18 + 2);
    }
    *(_WORD *)v15 &= ~0x100u;
    *(_DWORD *)(v15 + 4) = v17;
    goto LABEL_22;
  }
  v15 = sub_22EDB5A70(a1, *(_QWORD *)&v2[4 * ((v6 >> 12) & 1) + 12 + 4 * ((v6 >> 13) & 1)], 0);
  if ((v15 & 1) != 0)
    return 1;
  if (v10)
    v21 = v14;
  else
    v21 = 1;
  if (v21 == 1)
  {
LABEL_22:
    v19 = *v2;
    if ((v19 & 0x800) != 0)
      v20 = *(_QWORD *)&v2[4 * ((v19 >> 13) & 1) + 16 + 4 * ((v19 >> 12) & 1)];
    else
      v20 = 0;
    v22 = sub_22EDB5A70(a1, v20, 0);
    if ((v22 & 1) == 0)
      goto LABEL_32;
    return 1;
  }
  v22 = 0;
LABEL_32:
  v23 = *(_QWORD *)a1;
  v24 = *v2;
  v25 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1)
    goto LABEL_39;
  v26 = (v24 & 0x2000) != 0 ? *((_QWORD *)v2 + 2) : 0;
  if (v26 != v25)
    goto LABEL_39;
  if ((v24 & 0x1000) != 0)
  {
    v34 = (v24 >> 13) & 1;
    v33 = *(_QWORD *)&v2[4 * v34 + 8];
    if (v33)
      v33 = *(_QWORD *)(v33 + 8);
  }
  else
  {
    v33 = 0;
    LODWORD(v34) = (v24 >> 13) & 1;
  }
  if (v7 != v33
    || (v35 = v2 + 8, v36 = v34 + ((v24 >> 12) & 1), v8 != *(_QWORD *)&v2[4 * v36 + 8])
    || *(_QWORD *)&v35[4 * (v36 + 1)] != (v15 & 0xFFFFFFFFFFFFFFFELL)
    || ((v24 & 0x800) != 0 ? (v37 = *(_QWORD *)&v35[4 * (v36 + 2)]) : (v37 = 0), v37 != (v22 & 0xFFFFFFFFFFFFFFFELL)))
  {
LABEL_39:
    v28 = (v24 >> 8) & 7;
    v29 = *((_DWORD *)v2 + 1);
    v30 = *((_DWORD *)v2 + 2);
    v31 = *((_DWORD *)v2 + 3);
    if ((v24 & 0x800) != 0)
      v32 = *(_DWORD *)&v2[4 * ((v24 >> 12) & 1) + 20 + 4 * ((v24 >> 13) & 1)];
    else
      v32 = 0;
    v39 = v7;
    v40 = v8;
    v41 = 0;
    v42 = v9;
    v43 = v10;
    return sub_22ED2D6D0(v23, v29, v28, v30, v25, (uint64_t)&v39, v31, (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFFELL), v32, (_BYTE *)(v22 & 0xFFFFFFFFFFFFFFFELL));
  }
  return (uint64_t)v2;
}

uint64_t sub_22EDB790C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = a2;
  v4 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = (unint64_t)sub_22EBCCCF0(*a1, (int *)(v4 & 0xFFFFFFFFFFFFFFFELL)) & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 16) != v5)
    return sub_22ED343AC(*a1, *(_DWORD *)(v2 + 4), *(_DWORD *)(v2 + 8), v5);
  return v2;
}

uint64_t sub_22EDB7984(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  char v13;
  int v14;
  char *v15;
  uint64_t v16;
  int v17;
  char v18;
  __int128 v19;
  void *v20[2];
  __int128 v21;
  void *v22;
  __int128 v23;
  void *v24;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22ED72930(a1, v4, *(void **)(a2 + 24), 0, 0);
    if (!v5)
      return 1;
    v7 = v5;
    v8 = v6;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v21 = *(_OWORD *)(a2 + 32);
  v22 = *(void **)(a2 + 48);
  v9 = v21;
  if ((_QWORD)v21)
  {
    sub_22EDBA834((unint64_t)&v19, (uint64_t)a1, (uint64_t *)&v21);
    v21 = v19;
    v22 = v20[0];
    v9 = v19;
    if (!(_QWORD)v19)
      return 1;
  }
  if (*(_DWORD *)(*a1 + 11992) == -1)
  {
    v10 = v7 == *(_QWORD *)(a2 + 16) && v8 == *(_QWORD *)(a2 + 24);
    if (v10 && v9 == *(_QWORD *)(a2 + 32))
      return a2;
  }
  v19 = 0u;
  *(_OWORD *)v20 = 0u;
  sub_22E8ACE30((uint64_t)&v19, v7, v8);
  v11 = 1;
  switch(sub_22F3322F4(*a1, 0, (uint64_t)&v19, (uint64_t *)&v21))
  {
    case 0u:
      if (!*(_BYTE *)(a2 + 12))
        goto LABEL_21;
      goto LABEL_19;
    case 1u:
      if (!*(_BYTE *)(a2 + 12))
        goto LABEL_19;
LABEL_21:
      v11 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 8, 3);
      v14 = *(_DWORD *)(a2 + 8);
      *(_BYTE *)v11 = 19;
      if (byte_255E04EB3)
      {
        v15 = sub_22F0D3748(19);
        ++*((_DWORD *)v15 + 2);
      }
      *(_WORD *)v11 &= ~0x100u;
      *(_DWORD *)(v11 + 4) = v14;
      break;
    case 2u:
      v13 = 0;
      goto LABEL_25;
    case 3u:
      break;
    default:
LABEL_19:
      v13 = 1;
LABEL_25:
      v16 = sub_22EDB7024(a1, *(_QWORD *)(a2 + 56));
      if ((v16 & 1) != 0)
        v11 = 1;
      else
        v11 = v16;
      if ((v13 & 1) == 0 && (v16 & 1) == 0)
      {
        v17 = *(_DWORD *)(a2 + 8);
        v18 = *(_BYTE *)(a2 + 12);
        v23 = v21;
        v24 = v22;
        v11 = sub_22F344AB0(*a1, v17, v18, v7, v8, &v23, v16 & 0xFFFFFFFFFFFFFFFELL);
      }
      break;
  }
  if (HIDWORD(v20[1]))
    free(v20[0]);
  return v11;
}

uint64_t sub_22EDB7BA8(uint64_t a1, uint64_t a2)
{
  return sub_22EDB5A70(a1, *(_QWORD *)(a2 + 8), 0);
}

uint64_t sub_22EDB7BB4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB7C20(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB7C8C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB7CF8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB7D64(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB7DD4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB7E40(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB7EAC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB7F18(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB7F84(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB7FF0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB805C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB80C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB8134(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB81A0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB820C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB8278(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB82E4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB8350(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB83BC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB8428(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB8494(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB8500(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB856C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB85D8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB8644(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB86B0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB871C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB8788(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB87F4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB8860(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB88CC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB8938(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB89A4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB8A10(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB8A7C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB8AE8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB8B54(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB8BC0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB8C2C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB8C98(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB8D04(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB8D70(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB8DDC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB8E48(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB8EB4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB8F20(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB8F8C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB8FF8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB9064(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB90D0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB913C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB91A8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB9214(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB9280(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB92EC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB9358(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB93C4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB9430(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB949C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB9508(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB9574(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB95E0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDBAA80(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDB964C(unsigned int *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 56);
    if ((v5 & 4) != 0)
    {
      v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF8) + 32);
      if (v6)
        goto LABEL_6;
    }
    else if (v5 >= 8)
    {
      v6 = v5 & 0xFFFFFFFFFFFFFFF8;
LABEL_6:
      v7 = (uint64_t *)sub_22ED72360(a1, v6);
      if (!v7)
        return 1;
      v8 = (uint64_t)v7;
      v9 = *v7;
      goto LABEL_10;
    }
    v10 = sub_22EDA95F0(a1, *(_QWORD *)(v4 + 48));
    if (v10 < 0x10)
      return 1;
    v9 = v10;
    v8 = 0;
LABEL_10:
    v11 = *(_QWORD *)(v4 + 40);
    if ((v11 & 7) != 0)
      v12 = 0;
    else
      v12 = v11 & 0xFFFFFFFFFFFFFFF8;
    v4 = sub_22EB001B8(*(_QWORD **)a1, v8, v9, *(_DWORD *)(v4 + 64), *(_DWORD *)(v4 + 24), v12, 0);
    if (!v4)
      return 1;
  }
  v13 = sub_22EDB5A70(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v13 & 1) == 0)
    return sub_22ED36AF8(*(_QWORD *)a1, *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), v4, v13 & 0xFFFFFFFFFFFFFFFELL);
  return 1;
}

uint64_t sub_22EDB9738(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = a2;
  v4 = sub_22EDB5A70(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v4 & 1) != 0)
    return 1;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 16) != v5)
    return sub_22F344474(*a1, *(_DWORD *)(v2 + 8), v5);
  return v2;
}

uint64_t sub_22EDB97A4(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a2;
  v4 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ED36D40(*a1, *(_DWORD *)(v2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
  if ((v5 & 1) != 0)
    return 1;
  v6 = sub_22EDB5A70(a1, *(_QWORD *)(v2 + 24), 0);
  if ((v6 & 1) != 0)
    return 1;
  v7 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) != -1
    || *(_QWORD *)(v2 + 16) != v7
    || *(_QWORD *)(v2 + 24) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22F344708((uint64_t)*a1, *(_DWORD *)(v2 + 8), v7, v6 & 0xFFFFFFFFFFFFFFFELL);
  }
  return v2;
}

uint64_t sub_22EDB9858(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22ED725B0(a1, v4);
    if ((v5 & 1) != 0)
      return 1;
  }
  else
  {
    v5 = 0;
  }
  v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) != -1 || *(_QWORD *)(v2 + 16) != v6)
    return sub_22ED36B94(*a1, *(_DWORD *)(v2 + 8), v6);
  return v2;
}

uint64_t sub_22EDB98D0(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v21;
  uint64_t v22[9];

  v22[8] = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)(a2 + 16);
  v5 = sub_22EDB5A70(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v5 & 1) != 0)
    return 1;
  v21 = 0;
  v6 = *(unsigned __int16 *)(a2 + 12);
  v7 = v6 | (*(unsigned __int8 *)(a2 + 14) << 16);
  v8 = (unsigned __int16)v6;
  if (!(_WORD)v6)
  {
    v9 = 0;
    if ((v7 & 0x10000) != 0)
    {
LABEL_14:
      v16 = v4[(unsigned __int16)v7 + 1];
      if (v16)
      {
        v17 = sub_22EDB5A70(a1, v16, 0);
        if ((v17 & 1) != 0)
          return 1;
        goto LABEL_18;
      }
    }
LABEL_17:
    v17 = 0;
LABEL_18:
    v18 = v5 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_DWORD *)(*a1 + 11992) == -1
      && !((*v4 != v18) | v9 & 1)
      && (((*(unsigned __int16 *)(a2 + 12) | (*(unsigned __int8 *)(a2 + 14) << 16)) & 0x10000) != 0
        ? (v19 = v4[*(unsigned __int16 *)(a2 + 12) + 1])
        : (v19 = 0),
          v19 == (v17 & 0xFFFFFFFFFFFFFFFELL)))
    {
      return a2;
    }
    else
    {
      return sub_22F3444EC(*a1, *(_DWORD *)(a2 + 8), v18, v22, v21, v17 & 0xFFFFFFFFFFFFFFFELL);
    }
  }
  v9 = 0;
  v10 = (_QWORD *)(a2 + 24);
  v11 = 1;
  while (1)
  {
    v12 = sub_22EDB5A70(a1, *v10, 0);
    if ((v12 & 1) != 0)
      return v11;
    v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
    v14 = *v10 != (v12 & 0xFFFFFFFFFFFFFFFELL);
    v15 = v21;
    if (v21 >= 8uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v15 = v21;
    }
    v22[v15] = v13;
    v9 |= v14;
    ++v21;
    ++v10;
    if (!--v8)
    {
      v7 = *(unsigned __int16 *)(a2 + 12) | (*(unsigned __int8 *)(a2 + 14) << 16);
      if ((v7 & 0x10000) == 0)
        goto LABEL_17;
      goto LABEL_14;
    }
  }
}

uint64_t sub_22EDB9AF8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = a2;
  v4 = sub_22EDB5A70(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v4 & 1) != 0)
    return 1;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 16) != v5)
    return sub_22F344820(*a1, *(_DWORD *)(v2 + 8), v5);
  return v2;
}

unint64_t sub_22EDB9B64(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = 1;
  v5 = sub_22EDB5A70(a1, *(_QWORD *)(a2 + 8), 1);
  if ((v5 & 1) == 0)
  {
    v6 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 16));
    if ((v6 & 1) != 0)
      return 1;
    v7 = sub_22EDB5A70(a1, *(_QWORD *)(a2 + 24), 0);
    if ((v7 & 1) != 0)
      return 1;
    v8 = v5 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_DWORD *)(*a1 + 11992) == -1
      && *(_QWORD *)(a2 + 8) == v8
      && *(_QWORD *)(a2 + 16) == (v6 & 0xFFFFFFFFFFFFFFFELL)
      && *(_QWORD *)(a2 + 24) == (v7 & 0xFFFFFFFFFFFFFFFELL))
    {
      return a2;
    }
    v9 = sub_22ED3169C(*a1, *(_DWORD *)(a2 + 32), v8, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 36));
    if ((v9 & 1) != 0)
    {
      return 1;
    }
    else
    {
      v4 = 1;
      if ((v7 & 0xFFFFFFFFFFFFFFFELL) != 0 && (v9 & 0xFFFFFFFFFFFFFFFELL) != 0)
      {
        *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFFELL) + 24) = v7 & 0xFFFFFFFFFFFFFFFELL;
        return v9 & 0xFFFFFFFFFFFFFFFELL;
      }
    }
  }
  return v4;
}

uint64_t sub_22EDB9C58(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EDB5554(a1, *(unsigned __int8 **)(a2 + 8), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22ED358AC(*a1, *(_DWORD *)(a2 + 4), v4 & 0xFFFFFFFFFFFFFFFELL, 0);
}

uint64_t sub_22EDB9CA8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EDB7024(a1, *(_QWORD *)(a2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  else
    return sub_22F3448B8((_QWORD *)*a1, *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL, v5 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EDB9D14(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EDB7024(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22F3F29BC(*(_QWORD *)(*a1 + 88), *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EDB9D5C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  unint64_t v8;

  v2 = a2;
  v4 = sub_22EDB7024(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_BYTE **)(v2 + 24);
  if (*v5 == 95)
  {
    v6 = sub_22EDB9D14(a1, (uint64_t)v5);
    if ((v6 & 1) != 0)
      return 1;
  }
  else
  {
    v6 = sub_22EDB9CA8(a1, (uint64_t)v5);
    if ((v6 & 1) != 0)
      return 1;
  }
  v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) == -1
    && *(_QWORD *)(v2 + 16) == v8
    && *(_QWORD *)(v2 + 24) == (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return v2;
  }
  return sub_22ED3765C(*a1, *(_BYTE *)(v2 + 8), *(_DWORD *)(v2 + 12), v8, v6 & 0xFFFFFFFFFFFFFFFELL);
}

unint64_t sub_22EDB9E10(uint64_t *a1, unsigned __int16 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t result;
  int v22[3];
  int v23;
  uint64_t v24;
  int v25;

  v4 = *a1;
  v25 = 4;
  v24 = 0;
  v23 = 3;
  *(_QWORD *)v22 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v25, v22, (__int16 *)(v4 + 1693), &v24, &v23);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  v11 = a2 + 12;
  v12 = sub_22ED725B0(a1, *((_QWORD *)a2 + 3));
  v13 = sub_22ED2C1F4(*a1, *((unsigned int *)a2 + 1), v12);
  if ((v13 & 1) != 0)
  {
    sub_22EB48E64(v4);
  }
  else
  {
    v14 = *a2;
    if ((v14 & 0x100) != 0)
      v15 = *(_QWORD *)&v11[4 * ((v14 >> 8) & 1)];
    else
      v15 = 0;
    v16 = sub_22ED725B0(a1, v15);
    v17 = sub_22ED2C1F4(*a1, *((unsigned int *)a2 + 1), v16);
    sub_22EB48E64(v4);
    if ((v17 & 1) == 0)
    {
      v18 = (*a2 & 0x100) != 0 ? *((_DWORD *)a2 + 12) : 0;
      v19 = sub_22ED2C48C(*a1, *((_DWORD *)a2 + 1), v13 & 0xFFFFFFFFFFFFFFFELL, v18, v17 & 0xFFFFFFFFFFFFFFFELL, *((_DWORD *)a2 + 2));
      if ((v19 & 1) == 0)
      {
        v20 = sub_22EDB5A70(a1, *(_QWORD *)&v11[4 * (((unint64_t)*a2 >> 8) & 1) + 4], 0);
        if ((v20 & 1) == 0)
        {
          result = v19 & 0xFFFFFFFFFFFFFFFELL;
          *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFFFELL)
                    + 8 * (((unint64_t)*(unsigned __int16 *)(v19 & 0xFFFFFFFFFFFFFFFELL) >> 8) & 1)
                    + 32) = v20 & 0xFFFFFFFFFFFFFFFELL;
          return result;
        }
      }
    }
  }
  return 1;
}

uint64_t sub_22EDBA020(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EDB5A70(a1, *(_QWORD *)(a2 + 24), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22ED2C5AC(*a1, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EDBA070(uint64_t *a1, unsigned __int16 *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  if ((*a2 & 0x100) != 0)
    v4 = *((_QWORD *)a2 + 3);
  else
    v4 = 0;
  v5 = sub_22EDB5A70(a1, v4, 0);
  if ((v5 & 1) != 0)
    return 1;
  v6 = *a2;
  if ((v6 & 0x200) != 0)
  {
    v8 = (v6 >> 8) & 1;
    v11 = *(_QWORD *)&a2[4 * v8 + 12];
    v7 = v11 ? *(_QWORD *)(v11 + 8) : 0;
  }
  else
  {
    v7 = 0;
    LODWORD(v8) = (v6 >> 8) & 1;
  }
  sub_22EDBA730((uint64_t)&v12, (uint64_t)a1, *((_DWORD *)a2 + 1), v7, *(_QWORD *)&a2[4 * v8 + 12 + 4 * ((v6 >> 9) & 1)], 2);
  if ((_BYTE)v13)
    return 1;
  v9 = *((_DWORD *)a2 + 1);
  v14 = v12;
  v15 = v13;
  if ((sub_22ED2E0D4(*a1, v9, *((_DWORD *)a2 + 4), v5 & 0xFFFFFFFFFFFFFFFELL, (uint64_t *)&v14, *((_DWORD *)a2 + 5)) & 1) != 0
    || (sub_22EDB5A70(a1, *(_QWORD *)&a2[4 * ((*a2 >> 9) & 1) + 16 + 4 * (HIBYTE(*a2) & 1)], 0) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return sub_22ED2E298();
  }
}

uint64_t sub_22EDBA198(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  unsigned int *v4;
  unint64_t v6;
  char **v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char *v11;
  unsigned int v13;
  char *v14[2];

  v4 = a2;
  v14[1] = *(char **)MEMORY[0x24BDAC8D0];
  v13 = 0;
  v7 = (char **)(a2 + 4);
  v6 = *a2;
  if (v6 >= 0x100)
  {
    v9 = 0;
    v10 = 8 * (v6 >> 8);
    do
    {
      v11 = *v7;
      if (*v7)
      {
        if (v9)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v9 = v13;
        }
        v14[v9] = v11;
        v9 = ++v13;
      }
      ++v7;
      v10 -= 8;
    }
    while (v10);
  }
  v8 = sub_22EDB5A70(a1, *((_QWORD *)v4 + 1), a3);
  if ((v8 & 1) != 0)
    return 1;
  if (*((_QWORD *)v4 + 1) != (v8 & 0xFFFFFFFFFFFFFFFELL))
  {
    if (v13)
      return (uint64_t)sub_22ED2C6AC(*a1, v4[1], v14, v13, v8 & 0xFFFFFFFFFFFFFFFELL);
    return v8;
  }
  return (uint64_t)v4;
}

uint64_t sub_22EDBA2F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v5 = sub_22EDB5A70(a1, *(_QWORD *)(a2 + 16), a3);
  if ((v5 & 1) != 0)
    return 1;
  v6 = *(_QWORD *)(a2 + 8);
  v8 = v6;
  v9 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v8, &v9)
    && v9 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
  {
    v6 = *(_QWORD *)(v9 + 8);
  }
  if (!v6)
    return 1;
  if (v6 == *(_QWORD *)(a2 + 8))
    *(_QWORD *)(v6 + 48) = 0;
  return sub_22F343D54(*(_QWORD **)a1, *(_DWORD *)(a2 + 4), v6, 0, v5 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EDBA39C(uint64_t a1, unsigned __int16 *a2)
{
  _DWORD *v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v2 = a2;
  v4 = *a2;
  if ((v4 & 0x100) != 0 && (v15 = *((_QWORD *)a2 + 2)) != 0)
    v5 = *(_QWORD *)(v15 + 8);
  else
    v5 = 0;
  v6 = (uint64_t *)(a2 + 8);
  sub_22EDBA730((uint64_t)&v16, a1, *((_DWORD *)a2 + 1), v5, *(_QWORD *)&a2[4 * ((v4 >> 8) & 1) + 8], 0);
  if ((_BYTE)v17)
    return 1;
  v7 = sub_22EDB5A70(a1, v6[(((unint64_t)*(unsigned __int16 *)v2 >> 8) & 1) + 1], 0);
  if ((v7 & 1) != 0)
    return 1;
  v8 = *(_QWORD *)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1)
    goto LABEL_11;
  v9 = *(unsigned __int16 *)v2;
  if ((v9 & 0x100) != 0)
  {
    v10 = *v6;
    if (*v6)
      v10 = *(_QWORD *)(v10 + 8);
  }
  else
  {
    v10 = 0;
  }
  if ((_QWORD)v16 != v10
    || (v11 = (v9 >> 8) & 1, *((_QWORD *)&v16 + 1) != v6[v11])
    || v6[(v11 + 1)] != (v7 & 0xFFFFFFFFFFFFFFFELL))
  {
LABEL_11:
    v12 = v2[1];
    v13 = v2[2];
    v18 = v16;
    v19 = v17;
    return sub_22F343FAC(v8, v12, v13, (uint64_t)&v18, v2[3], (_BYTE *)(v7 & 0xFFFFFFFFFFFFFFFELL));
  }
  return (uint64_t)v2;
}

uint64_t sub_22EDBA4C8(uint64_t *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  unsigned int v12;
  char v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  _BYTE *v26[9];

  v26[8] = *(_BYTE **)MEMORY[0x24BDAC8D0];
  v6 = *a1;
  sub_22E905168(*a1, 0);
  v7 = (_QWORD *)(a2 + 16);
  v8 = *(unsigned int *)a2;
  v9 = a2 + 16 + 8 * (v8 >> 8);
  v10 = 8 * (v8 >> 8);
  while (v10)
  {
    v11 = *(_BYTE **)(a2 + 8 + v10);
    v10 -= 8;
    if (*v11 != 19)
    {
      v25 = 0;
      if (v8 < 0x100)
      {
        v12 = 0;
        v13 = 0;
        goto LABEL_28;
      }
      v24 = v6;
      v23 = a2;
      goto LABEL_10;
    }
  }
  if (v8 <= 0xFF)
  {
    v12 = 0;
    v13 = 0;
    goto LABEL_28;
  }
  v23 = a2;
  v24 = v6;
  v11 = (_BYTE *)v7[(*(_DWORD *)a2 >> 8) - 1];
  v25 = 0;
LABEL_10:
  LOBYTE(a2) = 0;
  v13 = 0;
  do
  {
    while (1)
    {
      v14 = (_BYTE *)*v7;
      v15 = (a3 & (*v7 == (_QWORD)v11)) != 0 ? 2 : 0;
      v16 = sub_22EDB5A70(a1, *v7, v15);
      if ((v16 & 1) == 0)
        break;
      ++v7;
      a2 = 1;
      if (*v14 == 12 || v7 == (_QWORD *)v9)
      {
        v6 = v24;
        goto LABEL_31;
      }
    }
    v17 = (_BYTE *)(v16 & 0xFFFFFFFFFFFFFFFELL);
    v18 = v14 != (_BYTE *)(v16 & 0xFFFFFFFFFFFFFFFELL);
    v19 = v25;
    if (v25 >= 8uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v19 = v25;
    }
    v26[v19] = v17;
    v13 |= v18;
    v12 = ++v25;
    ++v7;
  }
  while (v7 != (_QWORD *)v9);
  v6 = v24;
  if ((a2 & 1) != 0)
  {
    a2 = 1;
    goto LABEL_31;
  }
  a2 = v23;
LABEL_28:
  if (*(_DWORD *)(*a1 + 11992) != -1 || (v13 & 1) != 0)
    a2 = (uint64_t)sub_22ED2C004((_QWORD *)*a1, *(_DWORD *)(a2 + 4), *(unsigned int *)(a2 + 8), v26, v12);
LABEL_31:
  v21 = *(_QWORD *)(*(_QWORD *)(v6 + 1896) + 8 * *(unsigned int *)(v6 + 1904) - 8);
  --*(_QWORD *)(v21 + 360);
  return a2;
}

uint64_t sub_22EDBA730(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v9 = result;
  if (a4)
  {
    v10 = a4;
    v11 = a4;
    v12 = 0;
    result = sub_22E793870((uint64_t *)(a2 + 8), &v11, &v12);
    if (!(_DWORD)result)
      return sub_22F331C88(*(_QWORD *)a2, v10, a3, a6, v9);
    if (v12 == *(_QWORD *)(a2 + 8) + 16 * *(unsigned int *)(a2 + 24))
      return sub_22F331C88(*(_QWORD *)a2, v10, a3, a6, v9);
    v10 = *(_QWORD *)(v12 + 8);
    if (v10)
      return sub_22F331C88(*(_QWORD *)a2, v10, a3, a6, v9);
  }
  else
  {
    if (!a5)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_DWORD *)(result + 15) = 0;
      return result;
    }
    result = sub_22ED725B0(a2, a5);
    if ((result & 1) == 0)
      return sub_22EB530EC(*(_QWORD *)a2, a3, result & 0xFFFFFFFFFFFFFFFELL, a6, 1, v9);
  }
  *(_QWORD *)v9 = 0;
  *(_QWORD *)(v9 + 8) = 0;
  *(_WORD *)(v9 + 16) = 1;
  *(_BYTE *)(v9 + 18) = 0;
  return result;
}

unint64_t sub_22EDBA834(unint64_t result, uint64_t a2, uint64_t *a3)
{
  _QWORD *v3;
  uint64_t v4;
  int v7;
  char v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = (_QWORD *)result;
  v4 = *a3;
  if (!*a3)
    goto LABEL_33;
  v7 = v4 & 7;
  v8 = v4 & 7;
  if (v7 == 7)
  {
    v9 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
    if (v9 >= 3)
      LOBYTE(v9) = 3;
    v8 = v9 | 8;
  }
  v10 = 1 << v8;
  if ((v10 & 0xE47) != 0)
  {
    *(_OWORD *)result = *(_OWORD *)a3;
    *(_QWORD *)(result + 16) = a3[2];
    return result;
  }
  if ((v10 & 0x38) != 0)
  {
    if ((v7 - 3) > 2 || (v11 = a3[2]) == 0)
    {
      v15 = *((_DWORD *)a3 + 2);
      v16 = *(_DWORD *)(a2 + 80);
      v17 = *(_QWORD *)(a2 + 88);
      if (v15)
      {
        *(_DWORD *)(a2 + 80) = v15;
        *(_QWORD *)(a2 + 88) = v4;
      }
      if ((v7 - 3) > 2)
        v18 = 0;
      else
        v18 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 8);
      result = sub_22EDA95F0((unsigned int *)a2, v18);
      if (result <= 0xF)
      {
        *v3 = 0;
        v3[1] = 0;
        v3[2] = 0;
        *(_DWORD *)(a2 + 80) = v16;
        *(_QWORD *)(a2 + 88) = v17;
        return result;
      }
      v13 = *(_QWORD *)((result & 0xFFFFFFFFFFFFFFF0) + 8) | result & 7;
      *(_DWORD *)(a2 + 80) = v16;
      *(_QWORD *)(a2 + 88) = v17;
      v14 = *(_QWORD *)(*(_QWORD *)a2 + 88);
      if (v7 == 7)
      {
        v12 = 0;
        v19 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
        if (v19 >= 3)
          v19 = 3;
        v7 = v19 | 8;
      }
      else
      {
        v12 = 0;
      }
      goto LABEL_35;
    }
    result = sub_22ED72360(a2, v11);
    if (result)
    {
      v12 = result;
      v13 = *(_QWORD *)result & 7 | *(_QWORD *)((*(_QWORD *)result & 0xFFFFFFFFFFFFFFF0) + 8);
      v14 = *(_QWORD *)(*(_QWORD *)a2 + 88);
LABEL_35:
      result = sub_22EFC6D44((_QWORD *)(v14 + 15224), v7, v13);
      *(_OWORD *)v3 = *(_OWORD *)a3;
      *v3 = result;
      v3[2] = v12;
      return result;
    }
LABEL_33:
    *v3 = 0;
    v3[1] = 0;
    v3[2] = 0;
    return result;
  }
  if ((~(_BYTE)v4 & 7) != 0)
    goto LABEL_28;
  v20 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if (v20 >= 3)
    v20 = 3;
  if (v20)
LABEL_28:
    v21 = 0;
  else
    v21 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 16);
  v22 = v21;
  v23 = 0;
  result = sub_22E793870((uint64_t *)(a2 + 8), &v22, &v23);
  if ((_DWORD)result && v23 != *(_QWORD *)(a2 + 8) + 16 * *(unsigned int *)(a2 + 24))
    v21 = *(_QWORD *)(v23 + 8);
  if (!v21)
    goto LABEL_33;
  *(_OWORD *)v3 = *(_OWORD *)a3;
  v3[2] = a3[2];
  result = sub_22F3AE65C((_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 88) + 15224), v21);
  *v3 = result;
  return result;
}

uint64_t sub_22EDBAA80(uint64_t *a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t v5;
  unsigned int **v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  _QWORD *v10;
  unsigned int v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t i;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _QWORD v32[18];

  v32[16] = *MEMORY[0x24BDAC8D0];
  v30 = v32;
  v31 = 0x1000000000;
  v4 = *(_DWORD **)(a2 + 24);
  if (!v4)
  {
    v5 = 0;
    goto LABEL_87;
  }
  v7 = *v4;
  v6 = (unsigned int **)(v4 + 4);
  v5 = v7;
  if (v7 < 0x11)
  {
    if (!(_DWORD)v5)
      goto LABEL_79;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  v8 = 8 * v5;
  do
  {
    v9 = *v6;
    if (*v6)
    {
      v10 = (_QWORD *)*a1;
      v11 = v9[2];
      v12 = (unsigned int *)(*(_QWORD *)(*a1 + 12288) + 21440);
      *v12 = v11;
      switch(v11)
      {
        case 3u:
          v13 = sub_22EDBB1D8(a1, v9);
          goto LABEL_73;
        case 4u:
          v13 = sub_22EDBB35C((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 5u:
          v13 = (uint64_t)sub_22EDBB3A8(a1, v9);
          goto LABEL_73;
        case 6u:
          v13 = sub_22EDBB520((uint64_t **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 7u:
          v13 = sub_22EDBB6A4((uint64_t **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0xAu:
          v13 = (uint64_t)sub_22EB7BC58(v10, (int *)v9);
          goto LABEL_73;
        case 0xCu:
          v13 = sub_22EDBB6F0((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0xEu:
          v13 = (uint64_t)sub_22EDBB73C((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0xFu:
          v13 = (uint64_t)sub_22EDBB888((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x10u:
          sub_22EB7BF50((uint64_t)v10, (uint64_t)v9);
          goto LABEL_73;
        case 0x11u:
          v13 = (uint64_t)sub_22EB7BF64(v10, (uint64_t)v9);
          goto LABEL_73;
        case 0x12u:
          v13 = (uint64_t)sub_22EDBB9D4(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x13u:
          v13 = sub_22EDBBB68((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x14u:
          v13 = sub_22EDBBBB4((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x15u:
          v13 = sub_22EDBBC0C(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x16u:
          v13 = sub_22EDBBC64((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x18u:
          v13 = sub_22EDBBCB4((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x1Au:
          v13 = (uint64_t)sub_22EDBBD04((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x1Bu:
          v13 = sub_22EDBBE50((uint64_t)a1, (uint64_t *)v9);
          goto LABEL_73;
        case 0x1Cu:
          v13 = sub_22EDBBED4(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x1Du:
          v13 = sub_22EDBBF20((uint64_t)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x1Eu:
          v13 = (uint64_t)sub_22EDBC06C((uint64_t)a1, (int *)v9);
          goto LABEL_73;
        case 0x1Fu:
          v13 = (uint64_t)sub_22EDBC1C0(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x20u:
          v13 = (uint64_t)sub_22EBF939C((uint64_t)v10, (int *)v9);
          goto LABEL_73;
        case 0x21u:
          v13 = sub_22EDBC63C((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x22u:
          v13 = (uint64_t)sub_22EDBC688((_QWORD **)a1, v9);
          goto LABEL_73;
        case 0x23u:
          v13 = sub_22EDBC7E0((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x24u:
          v13 = sub_22EDBC82C(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x25u:
          v13 = sub_22EDBC880(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x27u:
          v13 = (uint64_t)sub_22EDBCCBC((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x29u:
          v13 = sub_22EDBCE08((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x2Au:
          v13 = (uint64_t)sub_22EDBCF9C((_QWORD **)a1, v9);
          goto LABEL_73;
        case 0x2Bu:
          v13 = sub_22EDBD0F4((_QWORD **)a1, v9);
          goto LABEL_73;
        case 0x2Cu:
          v13 = sub_22EDBD24C((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x2Eu:
          v13 = (uint64_t)sub_22EDBD3DC(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x34u:
          v13 = sub_22EDBD8B4(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x35u:
          v13 = (uint64_t)sub_22EDBD900((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x37u:
          v13 = sub_22EDBDA4C(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x38u:
          v13 = sub_22EDBDA98((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x39u:
          v13 = sub_22EDBDAE4((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x3Au:
          v13 = sub_22EDBDB30((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x3Bu:
          v13 = (uint64_t)sub_22EB7E124(v10, (int *)v9);
          goto LABEL_73;
        case 0x3Cu:
          v13 = sub_22EDBDB7C((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x3Du:
          v13 = sub_22EDBDBD4(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x3Eu:
          v13 = sub_22EDBDC3C((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x3Fu:
          v13 = (uint64_t)sub_22EDBDC88((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x40u:
          v13 = (uint64_t)sub_22EB7E384(v10, (int *)v9);
          goto LABEL_73;
        case 0x42u:
          v13 = sub_22EDBDDD4(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x46u:
          v13 = sub_22EDBE218((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x47u:
          v13 = sub_22EDBE264((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x49u:
          v13 = (uint64_t)sub_22EDBE2C8((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x4Bu:
          v13 = sub_22EDBE414((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x4Cu:
          v13 = (uint64_t)sub_22EDBE460((uint64_t)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x4Du:
          v13 = sub_22EDBE5F8(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x4Eu:
          v13 = sub_22EDBEA34((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x51u:
          v13 = (uint64_t)sub_22EDBEA80(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x58u:
          v13 = sub_22EDBEEFC((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x59u:
          v13 = (uint64_t)sub_22EDBEF48((_QWORD **)a1, v9);
          goto LABEL_73;
        case 0x5Au:
          v13 = (uint64_t)sub_22EDBF0A0((_QWORD **)a1, v9);
          goto LABEL_73;
        case 0x5Bu:
          v13 = (uint64_t)sub_22EDBF1F8(a1, (int *)v9);
LABEL_73:
          v9 = (unsigned int *)v13;
          v15 = *a1;
          *(_DWORD *)(*(_QWORD *)(*a1 + 12288) + 21440) = 85;
          sub_22EB4E2D8(v15);
          if (v9)
            goto LABEL_74;
          goto LABEL_78;
        default:
          *v12 = 85;
          sub_22EB4E2D8(v10);
LABEL_74:
          v16 = v31;
          if (v31 >= (unint64_t)HIDWORD(v31))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v16 = v31;
          }
          *((_QWORD *)v30 + v16) = v9;
          break;
      }
    }
    else
    {
      v14 = v31;
      if (v31 >= (unint64_t)HIDWORD(v31))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v14 = v31;
      }
      *((_QWORD *)v30 + v14) = 0;
    }
    LODWORD(v31) = v31 + 1;
LABEL_78:
    ++v6;
    v8 -= 8;
  }
  while (v8);
LABEL_79:
  v17 = *(unsigned int **)(a2 + 24);
  if (v17 && *((_BYTE *)v17 + 8) && *(_QWORD *)&v17[2 * *v17 + 4 + 2 * v17[1]])
  {
    sub_22EC84DA0(*a1, *(_DWORD *)(a2 + 8));
    v18 = *a1;
    sub_22E905168(*a1, 0);
    v19 = *(_DWORD *)(a2 + 8);
    if (v19 <= 0x34 && ((1 << v19) & 0x10000800000204) != 0)
    {
      i = *(_QWORD *)(*(_QWORD *)(a2 + 24)
                    + 8 * **(unsigned int **)(a2 + 24)
                    + 8 * *(unsigned int *)(*(_QWORD *)(a2 + 24) + 4)
                    + 16);
    }
    else
    {
      for (i = *(_QWORD *)(*(_QWORD *)(a2 + 24)
                          + 8 * **(unsigned int **)(a2 + 24)
                          + 8 * *(unsigned int *)(*(_QWORD *)(a2 + 24) + 4)
                          + 16); *(_BYTE *)i == 7; i = *(_QWORD *)(i + 8 * *(unsigned int *)(i + 8) + 32))
        ;
    }
    v21 = sub_22EDB5A70(a1, i, 0);
    if (v21 >= 2
      && sub_22F4219DC(*(_DWORD *)(a2 + 8))
      && (*(_BYTE *)(*(_QWORD *)(*a1 + 72) + 76) & 0x20) != 0)
    {
      v21 = sub_22EC86C20(*a1, (unsigned __int8 *)(v21 & 0xFFFFFFFFFFFFFFFELL));
    }
    v22 = *(_QWORD *)(*(_QWORD *)(v18 + 1896) + 8 * *(unsigned int *)(v18 + 1904) - 8);
    --*(_QWORD *)(v22 + 360);
    if ((sub_22EC8617C((_QWORD *)*a1, v21, (uint64_t *)v30, v31) & 1) != 0)
      goto LABEL_91;
  }
LABEL_87:
  if (v5 != v31)
  {
LABEL_91:
    v24 = 1;
    goto LABEL_92;
  }
  *(_QWORD *)&v28 = 0;
  DWORD2(v28) = 0;
  v29 = 0;
  v23 = *(_DWORD *)(a2 + 8);
  if (v23 == 9)
  {
    v28 = *(_OWORD *)(a2 + 32);
    v29 = *(_QWORD *)(a2 + 48);
    sub_22EDBA834((unint64_t)&v26, (uint64_t)a1, (uint64_t *)&v28);
    v28 = v26;
    v29 = v27;
  }
  v24 = sub_22EC87DEC();
LABEL_92:
  if (v30 != v32)
    free(v30);
  return v24;
}

uint64_t sub_22EDBB1D8(uint64_t *a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v15;
  uint64_t v16[5];

  v16[4] = *MEMORY[0x24BDAC8D0];
  v15 = 0;
  v4 = a2[4];
  if (v4 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  v5 = a2 + 6;
  v6 = *(_QWORD *)&a2[2 * v4 + 6];
  if (!v6)
  {
    v9 = 0;
    v8 = v4;
    if (!v4)
      return sub_22ECAA508(*a1, *a2, a2[3], a2[5], a2[1], v9, v16, v15);
LABEL_8:
    v10 = 8 * v8;
    do
    {
      v11 = sub_22ED725B0(a1, *v5);
      if ((v11 & 1) == 0)
      {
        v12 = v15;
        if (v15 >= 4uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v12 = v15;
        }
        v16[v12] = v11 & 0xFFFFFFFFFFFFFFFELL;
        ++v15;
      }
      ++v5;
      v10 -= 8;
    }
    while (v10);
    return sub_22ECAA508(*a1, *a2, a2[3], a2[5], a2[1], v9, v16, v15);
  }
  v7 = sub_22ED725B0(a1, v6);
  if ((v7 & 1) != 0)
    return 0;
  v8 = a2[4];
  v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
  if (a2[4])
    goto LABEL_8;
  return sub_22ECAA508(*a1, *a2, a2[3], a2[5], a2[1], v9, v16, v15);
}

uint64_t sub_22EDBB35C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E518(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EDBB3A8(uint64_t *a1, unsigned int *a2)
{
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v13;
  unsigned __int8 *v14[17];

  v14[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v13 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = a2 + 6;
    while (1)
    {
      v7 = sub_22ED725B0(a1, *v6);
      if ((v7 & 1) != 0)
        return 0;
      v8 = v13;
      if (v13 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v13;
      }
      v14[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      ++v13;
      ++v6;
      v5 -= 8;
      if (!v5)
      {
        v9 = a2[4];
        goto LABEL_11;
      }
    }
  }
  v9 = 0;
LABEL_11:
  v10 = sub_22ED725B0(a1, *(_QWORD *)&a2[2 * v9 + 6]);
  if ((v10 & 1) != 0)
    return 0;
  return sub_22ECA5100(*a1, v14, v13, (_DWORD *)(v10 & 0xFFFFFFFFFFFFFFFELL), *a2, a2[3], a2[5], a2[1]);
}

uint64_t sub_22EDBB520(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v15;
  unsigned __int8 *v16[17];

  v16[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v5 = sub_22ED725B0(a1, v4);
    if ((v5 & 1) != 0)
      return 0;
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v6 = 0;
  }
  v15 = 0;
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 16);
  }
  if (v7)
  {
    v8 = (_QWORD *)(a2 + 40);
    v9 = 8 * v7;
    while (1)
    {
      v10 = sub_22ED725B0(a1, *v8);
      if ((v10 & 1) != 0)
        break;
      v11 = v15;
      if (v15 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v15;
      }
      v16[v11] = (unsigned __int8 *)(v10 & 0xFFFFFFFFFFFFFFFELL);
      v12 = ++v15;
      ++v8;
      v9 -= 8;
      if (!v9)
        return sub_22ECA9A04(*a1, v6, v16, v12, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 32), *(_DWORD *)(a2 + 4));
    }
    return 0;
  }
  else
  {
    v12 = 0;
    return sub_22ECA9A04(*a1, v6, v16, v12, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 32), *(_DWORD *)(a2 + 4));
  }
}

uint64_t sub_22EDBB6A4(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E2DC(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EDBB6F0(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E39C(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EDBB73C(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22ED725B0(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA5E4C(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA5E4C(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

_DWORD *sub_22EDBB888(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  uint64_t v13[17];

  v13[16] = *MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22ED725B0(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA56B0(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA56B0(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

unsigned __int8 *sub_22EDBB9D4(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v15;
  uint64_t v16[17];

  v16[16] = *MEMORY[0x24BDAC8D0];
  v15 = 0;
  v4 = (_QWORD *)(a2 + 40);
  v5 = *(unsigned int *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 40 + 8 * v5);
  if (v6)
  {
    v7 = sub_22ED725B0(a1, v6);
    if ((v7 & 1) != 0)
      return 0;
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    LODWORD(v5) = *(_DWORD *)(a2 + 16);
  }
  else
  {
    v8 = 0;
  }
  if (v5 > 0x10)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    LODWORD(v5) = *(_DWORD *)(a2 + 16);
  }
  if ((_DWORD)v5)
  {
    v9 = 8 * v5;
    while (1)
    {
      v10 = sub_22ED725B0(a1, *v4);
      if ((v10 & 1) != 0)
        break;
      v11 = v15;
      if (v15 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v15;
      }
      v16[v11] = v10 & 0xFFFFFFFFFFFFFFFELL;
      v12 = ++v15;
      ++v4;
      v9 -= 8;
      if (!v9)
        return sub_22ECA67B4(*a1, v8, *(_DWORD *)(a2 + 20), *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), v16, v12, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), 0, *(_DWORD *)(a2 + 4));
    }
    return 0;
  }
  v12 = 0;
  return sub_22ECA67B4(*a1, v8, *(_DWORD *)(a2 + 20), *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), v16, v12, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), 0, *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EDBBB68(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F6E0(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EDBBBB4(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v5 = sub_22ED725B0(a1, v4);
    if ((v5 & 1) != 0)
      return 0;
  }
  else
  {
    v5 = 0;
  }
  return sub_22F33EAFC(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EDBBC0C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22ED725B0(a1, v4);
    if ((v5 & 1) != 0)
      return 0;
  }
  else
  {
    v5 = 0;
  }
  return sub_22EC9F86C(*a1, (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EDBBC64(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 40));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22ECA1F20(*a1, *(_DWORD *)(a2 + 32), (void *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 36), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EDBBCB4(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 48));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22ECA18BC(*a1, *(_DWORD *)(a2 + 32), (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 36), *(_DWORD *)(a2 + 40), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EDBBD04(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22ED725B0(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECAA2D4(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECAA2D4(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EDBBE50(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t result;

  v4 = sub_22ED725B0(a1, a2[4]);
  if ((v4 & 1) != 0)
    return 0;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  v6 = *((_DWORD *)a2 + 7);
  v7 = *a2;
  result = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 40, 3);
  *(_QWORD *)result = v7;
  *(_DWORD *)(result + 8) = 27;
  *(_QWORD *)(result + 32) = v5;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 89;
  *(_DWORD *)(result + 28) = v6;
  return result;
}

uint64_t sub_22EDBBED4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9EE2C(*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EDBBF20(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v11;
  _QWORD v12[17];

  v12[16] = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(a2 + 16);
  }
  if (!v4)
    return sub_22EC92F80();
  v5 = (_QWORD *)(a2 + 40);
  v6 = 8 * v4;
  while (1)
  {
    v7 = sub_22ED725B0(a1, *v5);
    if ((v7 & 1) != 0)
      break;
    v8 = v11;
    if (v11 >= 0x10uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v8 = v11;
    }
    v12[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
    ++v11;
    ++v5;
    v6 -= 8;
    if (!v6)
      return sub_22EC92F80();
  }
  return 0;
}

_DWORD *sub_22EDBC06C(uint64_t a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  _QWORD v13[17];

  v13[16] = *MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22ED725B0(a1, *v5);
      if ((v7 & 1) != 0)
        return 0;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
  }
  v9 = 0;
LABEL_11:
  if (!v9)
    return 0;
  return sub_22F3EB9D4(*(_QWORD *)(*(_QWORD *)a1 + 88), *a2, a2[3], a2[1], v13, v9);
}

_DWORD *sub_22EDBC1C0(uint64_t *a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD **v17;
  _DWORD **v18;
  _DWORD *v19;
  int v20;
  BOOL v21;
  _DWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  size_t __n[2];
  int v42[3];
  unint64_t v43;
  _QWORD *v44;
  void *v45;
  uint64_t v46;
  _BYTE v47[128];
  void *v48;
  uint64_t v49;
  _BYTE v50[128];
  __int128 v51;
  _QWORD v52[10];

  v52[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 4);
  v6 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 16);
  v42[0] = *(_DWORD *)a2;
  v42[1] = v6;
  v42[2] = v4;
  v48 = v50;
  v49 = 0x1000000000;
  v40 = 0u;
  *(_OWORD *)__n = 0u;
  *(_QWORD *)&v38 = 0;
  DWORD2(v38) = 0;
  v39 = 0;
  v45 = v47;
  v46 = 0x1000000000;
  if (v5 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 16);
  }
  if (v5)
  {
    v7 = 8 * v5;
    v8 = (_QWORD *)(a2 + 104);
    do
    {
      v9 = sub_22ED725B0(a1, *v8);
      if ((v9 & 1) != 0)
        goto LABEL_46;
      v10 = v49;
      if (v49 >= (unint64_t)HIDWORD(v49))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v49;
      }
      *((_QWORD *)v48 + v10) = v9 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v49) = v49 + 1;
      ++v8;
      v7 -= 8;
    }
    while (v7);
  }
  v11 = *(_QWORD *)(a2 + 40);
  if (v11)
  {
    v12 = sub_22ED72930(a1, v11, *(void **)(a2 + 48), 0, 0);
    if (!v12)
    {
LABEL_46:
      v35 = 0;
      goto LABEL_48;
    }
    v14 = v12;
    v15 = v13;
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  sub_22E8ACE30((uint64_t)&v40, v14, v15);
  v38 = *(_OWORD *)(a2 + 56);
  v39 = *(_QWORD *)(a2 + 72);
  if ((_QWORD)v38)
  {
    sub_22EDBA834((unint64_t)&v51, (uint64_t)a1, (uint64_t *)&v38);
    v38 = v51;
    v39 = v52[0];
    if (!(_QWORD)v51)
      goto LABEL_46;
  }
  v37 = a2;
  v16 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v16)
  {
    v17 = (_DWORD **)(a2 + 104 + 8 * v16);
    v18 = &v17[v16];
    do
    {
      v19 = *v17;
      if (*v17)
      {
        *(_QWORD *)&v51 = v52;
        *((_QWORD *)&v51 + 1) = 0x800000000;
        v20 = *(unsigned __int8 *)v19;
        v21 = v20 == 211;
        if (v20 == 211)
          v22 = v19;
        else
          v22 = 0;
        v23 = v22 + 16;
        if (v21)
          v24 = v23;
        else
          v24 = v19 + 20;
        v25 = v19[1];
        if ((_DWORD)v25)
        {
          v26 = 8 * v25;
          do
          {
            v27 = *v24 & 0xFFFFFFFFFFFFFFFCLL;
            v43 = v27;
            v44 = 0;
            if (sub_22E793870(a1 + 1, &v43, &v44)
              && v44 != (_QWORD *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
            {
              v27 = v44[1];
            }
            v28 = *(unsigned int *)(v27 + 28);
            v25 = DWORD2(v51);
            if (DWORD2(v51) >= (unint64_t)HIDWORD(v51))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v25 = DWORD2(v51);
            }
            *(_QWORD *)(v51 + 8 * v25) = (v28 >> 13) & 3 | v27;
            LODWORD(v25) = ++DWORD2(v51);
            ++v24;
            v26 -= 8;
          }
          while (v26);
        }
        v29 = *(_QWORD *)(*a1 + 88);
        v30 = *((_QWORD *)&v40 + 1);
        if (*((_QWORD *)&v40 + 1))
        {
          if (HIDWORD(__n[1]))
          {
            v31 = (void *)sub_22E3CD3D4(v29 + 2032, LODWORD(__n[1]), 3);
            memcpy(v31, (const void *)__n[0], LODWORD(__n[1]));
            v30 = *((_QWORD *)&v40 + 1);
            LODWORD(v25) = DWORD2(v51);
          }
          else
          {
            v31 = (void *)__n[0];
          }
        }
        else
        {
          v31 = 0;
        }
        v33 = sub_22F0605AC(v29, 0, v30, (uint64_t)v31, (uint64_t)&v38, 1, (*v19 >> 20) & 1, (const void *)v51, v51 + 8 * v25);
        v34 = v46;
        if (v46 >= (unint64_t)HIDWORD(v46))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v34 = v46;
        }
        *((_QWORD *)v45 + v34) = v33;
        LODWORD(v46) = v46 + 1;
        if ((_QWORD *)v51 != v52)
          free((void *)v51);
      }
      else
      {
        v32 = v46;
        if (v46 >= (unint64_t)HIDWORD(v46))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v32 = v46;
        }
        *((_QWORD *)v45 + v32) = 0;
        LODWORD(v46) = v46 + 1;
      }
      ++v17;
    }
    while (v17 != v18);
  }
  v35 = sub_22ECA7F24((_QWORD *)*a1, (int *)(v37 + 80), 2u, (int *)(v37 + 88), 2, (uint64_t)&v40, &v38, *(unsigned int *)(v37 + 96), (uint64_t)v48, v49, v42, (unsigned __int8 **)v45, v46);
LABEL_48:
  if (v45 != v47)
    free(v45);
  if (HIDWORD(__n[1]))
    free((void *)__n[0]);
  if (v48 != v50)
    free(v48);
  return v35;
}

uint64_t sub_22EDBC63C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F560(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

unsigned int *sub_22EDBC688(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int *v12;
  _DWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 20;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22ED725B0(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v16;
      }
      *((_QWORD *)v15 + v8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    v9 = v16;
LABEL_11:
    v10 = a2[3];
    v11 = a2[1];
    v14[0] = *a2;
    v14[1] = v10;
    v14[2] = v11;
    v12 = sub_22ECA94BC(*a1, (uint64_t)v15, v9, v14);
  }
  if (v15 != v17)
    free(v15);
  return v12;
}

uint64_t sub_22EDBC7E0(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E41C(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EDBC82C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9FE98(*a1, *(_DWORD *)(a2 + 44), (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 48), *(_DWORD *)(a2 + 40), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EDBC880(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 **v13;
  _DWORD **v14;
  _DWORD **v15;
  _DWORD *v16;
  int v17;
  BOOL v18;
  _DWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  size_t __n[2];
  unint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  _BYTE v41[64];
  void *v42[2];
  _QWORD v43[16];
  unsigned __int8 **v44;
  uint64_t v45;
  _QWORD v46[18];

  v2 = a2;
  v46[16] = *MEMORY[0x24BDAC8D0];
  v44 = (unsigned __int8 **)v46;
  v45 = 0x1000000000;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v2 + 16);
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = (_QWORD *)(v2 + 96);
    while (1)
    {
      v7 = sub_22ED725B0(a1, *v6);
      if ((v7 & 1) != 0)
        break;
      v8 = v45;
      if (v45 >= (unint64_t)HIDWORD(v45))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v45;
      }
      v44[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      LODWORD(v45) = v45 + 1;
      ++v6;
      v5 -= 8;
      if (!v5)
        goto LABEL_9;
    }
    v9 = 0;
  }
  else
  {
LABEL_9:
    v35 = 0u;
    *(_OWORD *)__n = 0u;
    sub_22E8ACE30((uint64_t)&v35, *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64));
    v33 = *(_OWORD *)(v2 + 72);
    v34 = *(_QWORD *)(v2 + 88);
    if (!(_QWORD)v33
      || (sub_22EDBA834((unint64_t)v42, (uint64_t)a1, (uint64_t *)&v33), v33 = *(_OWORD *)v42, v34 = v43[0], v42[0]))
    {
      v42[0] = v43;
      v42[1] = (void *)0x1000000000;
      v11 = *(unsigned int *)(v2 + 16);
      if ((_DWORD)v11)
      {
        v32 = v2;
        v14 = (_DWORD **)(v2 + 96 + 8 * v11 + 8 * v11 + 8 * v11 + 8 * v11);
        v15 = &v14[v11];
        do
        {
          v16 = *v14;
          if (*v14)
          {
            v39 = v41;
            v40 = 0x800000000;
            v17 = *(unsigned __int8 *)v16;
            v18 = v17 == 211;
            if (v17 == 211)
              v19 = v16;
            else
              v19 = 0;
            v20 = v19 + 16;
            if (v18)
              v21 = v20;
            else
              v21 = v16 + 20;
            v22 = v16[1];
            if ((_DWORD)v22)
            {
              v23 = 8 * v22;
              do
              {
                v24 = *v21 & 0xFFFFFFFFFFFFFFFCLL;
                v37 = v24;
                v38 = 0;
                if (sub_22E793870(a1 + 1, &v37, &v38) && v38 != a1[1] + 16 * *((unsigned int *)a1 + 6))
                  v24 = *(_QWORD *)(v38 + 8);
                v25 = *(unsigned int *)(v24 + 28);
                v22 = v40;
                if (v40 >= (unint64_t)HIDWORD(v40))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v22 = v40;
                }
                *((_QWORD *)v39 + v22) = (v25 >> 13) & 3 | v24;
                LODWORD(v22) = v40 + 1;
                LODWORD(v40) = v40 + 1;
                ++v21;
                v23 -= 8;
              }
              while (v23);
            }
            v26 = *(_QWORD *)(*a1 + 88);
            v27 = *((_QWORD *)&v35 + 1);
            if (*((_QWORD *)&v35 + 1))
            {
              if (HIDWORD(__n[1]))
              {
                v28 = (void *)sub_22E3CD3D4(v26 + 2032, LODWORD(__n[1]), 3);
                memcpy(v28, (const void *)__n[0], LODWORD(__n[1]));
                v27 = *((_QWORD *)&v35 + 1);
                LODWORD(v22) = v40;
              }
              else
              {
                v28 = (void *)__n[0];
              }
            }
            else
            {
              v28 = 0;
            }
            v30 = sub_22F0605AC(v26, 0, v27, (uint64_t)v28, (uint64_t)&v33, 1, (*v16 >> 20) & 1, v39, (uint64_t)v39 + 8 * v22);
            v31 = LODWORD(v42[1]);
            if (LODWORD(v42[1]) >= (unint64_t)HIDWORD(v42[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v31 = LODWORD(v42[1]);
            }
            *((_QWORD *)v42[0] + v31) = v30;
            ++LODWORD(v42[1]);
            if (v39 != v41)
              free(v39);
          }
          else
          {
            v29 = LODWORD(v42[1]);
            if (LODWORD(v42[1]) >= (unint64_t)HIDWORD(v42[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v29 = LODWORD(v42[1]);
            }
            *((_QWORD *)v42[0] + v29) = 0;
            ++LODWORD(v42[1]);
          }
          ++v14;
        }
        while (v14 != v15);
        v13 = (unsigned __int8 **)v42[0];
        v12 = LODWORD(v42[1]);
        v2 = v32;
      }
      else
      {
        v12 = 0;
        v13 = (unsigned __int8 **)v43;
      }
      v9 = sub_22F33F420(*a1, v44, v45, *(_DWORD *)v2, *(_DWORD *)(v2 + 12), *(_DWORD *)(v2 + 48), *(_DWORD *)(v2 + 4), (uint64_t)&v35, (uint64_t)&v33, v13, v12);
      if (v42[0] != v43)
        free(v42[0]);
    }
    else
    {
      v9 = 0;
    }
    if (HIDWORD(__n[1]))
      free((void *)__n[0]);
  }
  if (v44 != v46)
    free(v44);
  return v9;
}

_DWORD *sub_22EDBCCBC(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22ED725B0(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECAA0AC(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECAA0AC(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EDBCE08(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v14;
  uint64_t v15[9];

  v15[8] = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 32;
  v5 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 32));
  if ((v5 & 1) != 0)
    return 0;
  v14 = 0;
  v6 = *(_DWORD *)(a2 + 16);
  if (v6 - 1 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a2 + 16);
  }
  v7 = (_QWORD *)(a2 + 40);
  if (a2 + 40 == v4 + 8 * v6)
  {
    v11 = 0;
    return sub_22F33EB88(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, v15, v11, *(_BYTE *)(a2 + 24), *(_BYTE *)(a2 + 25), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 20), 0, *(_DWORD *)(a2 + 4));
  }
  else
  {
    v8 = 8 * v6 - 8;
    while (1)
    {
      v9 = sub_22ED725B0(a1, *v7);
      if ((v9 & 1) != 0)
        break;
      v10 = v14;
      if (v14 >= 8uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v14;
      }
      v15[v10] = v9 & 0xFFFFFFFFFFFFFFFELL;
      v11 = ++v14;
      ++v7;
      v8 -= 8;
      if (!v8)
        return sub_22F33EB88(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, v15, v11, *(_BYTE *)(a2 + 24), *(_BYTE *)(a2 + 25), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 20), 0, *(_DWORD *)(a2 + 4));
    }
    return 0;
  }
}

unsigned int *sub_22EDBCF9C(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int *v12;
  _DWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 20;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22ED725B0(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v16;
      }
      *((_QWORD *)v15 + v8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    v9 = v16;
LABEL_11:
    v10 = a2[3];
    v11 = a2[1];
    v14[0] = *a2;
    v14[1] = v10;
    v14[2] = v11;
    v12 = sub_22ECA8EC4(*a1, (uint64_t)v15, v9, v14);
  }
  if (v15 != v17)
    free(v15);
  return v12;
}

uint64_t sub_22EDBD0F4(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 16;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22ED725B0(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA2F18(*a1, v13, v9, a2[12], a2[13], a2[14], *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA2F18(*a1, v13, v9, a2[12], a2[13], a2[14], *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EDBD24C(_QWORD **a1, int *a2)
{
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v13;
  unsigned __int8 *v14[17];

  v14[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v13 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = a2 + 16;
    while (1)
    {
      v7 = sub_22ED725B0(a1, *v6);
      if ((v7 & 1) != 0)
        return 0;
      v8 = v13;
      if (v13 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v13;
      }
      v14[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      ++v13;
      ++v6;
      v5 -= 8;
      if (!v5)
      {
        v9 = a2[4];
        goto LABEL_11;
      }
    }
  }
  v9 = 0;
LABEL_11:
  v10 = sub_22ED725B0(a1, *(_QWORD *)&a2[2 * v9 + 16 + 2 * v9 + 2 * v9 + 2 * v9 + 2 * v9]);
  if ((v10 & 1) != 0)
    return 0;
  return sub_22ECA44D0(*a1, v14, v13, (_DWORD *)(v10 & 0xFFFFFFFFFFFFFFFELL), *a2, a2[3], a2[12], a2[13], a2[14], 0, a2[1]);
}

_DWORD *sub_22EDBD3DC(uint64_t *a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD **v17;
  _DWORD **v18;
  _DWORD *v19;
  int v20;
  BOOL v21;
  _DWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  _DWORD *v35;
  int v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  void *v42[2];
  int v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  size_t __n[2];
  int v48[3];
  unint64_t v49;
  _QWORD *v50;
  void *v51;
  uint64_t v52;
  _BYTE v53[128];
  void *v54;
  uint64_t v55;
  _BYTE v56[128];
  __int128 v57;
  _QWORD v58[10];

  v58[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 4);
  v6 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 16);
  v48[0] = *(_DWORD *)a2;
  v48[1] = v6;
  v48[2] = v4;
  v54 = v56;
  v55 = 0x1000000000;
  v46 = 0u;
  *(_OWORD *)__n = 0u;
  *(_QWORD *)&v44 = 0;
  DWORD2(v44) = 0;
  v51 = v53;
  v52 = 0x1000000000;
  if (v5 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 16);
  }
  if (v5)
  {
    v7 = 8 * v5;
    v8 = (_QWORD *)(a2 + 136);
    do
    {
      v9 = sub_22ED725B0(a1, *v8);
      if ((v9 & 1) != 0)
        goto LABEL_46;
      v10 = v55;
      if (v55 >= (unint64_t)HIDWORD(v55))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v55;
      }
      *((_QWORD *)v54 + v10) = v9 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v55) = v55 + 1;
      ++v8;
      v7 -= 8;
    }
    while (v7);
  }
  v11 = *(_QWORD *)(a2 + 40);
  if (v11)
  {
    v12 = sub_22ED72930(a1, v11, *(void **)(a2 + 48), 0, 0);
    if (!v12)
    {
LABEL_46:
      v35 = 0;
      goto LABEL_49;
    }
    v14 = v12;
    v15 = v13;
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  sub_22E8ACE30((uint64_t)&v46, v14, v15);
  v44 = *(_OWORD *)(a2 + 56);
  v45 = *(_QWORD *)(a2 + 72);
  if ((_QWORD)v44)
  {
    sub_22EDBA834((unint64_t)&v57, (uint64_t)a1, (uint64_t *)&v44);
    v44 = v57;
    v45 = v58[0];
    if (!(_QWORD)v57)
      goto LABEL_46;
  }
  v38 = a2;
  v16 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v16)
  {
    v17 = (_DWORD **)(a2 + 136 + 8 * v16);
    v18 = &v17[v16];
    do
    {
      v19 = *v17;
      if (*v17)
      {
        *(_QWORD *)&v57 = v58;
        *((_QWORD *)&v57 + 1) = 0x800000000;
        v20 = *(unsigned __int8 *)v19;
        v21 = v20 == 211;
        if (v20 == 211)
          v22 = v19;
        else
          v22 = 0;
        v23 = v22 + 16;
        if (v21)
          v24 = v23;
        else
          v24 = v19 + 20;
        v25 = v19[1];
        if ((_DWORD)v25)
        {
          v26 = 8 * v25;
          do
          {
            v27 = *v24 & 0xFFFFFFFFFFFFFFFCLL;
            v49 = v27;
            v50 = 0;
            if (sub_22E793870(a1 + 1, &v49, &v50)
              && v50 != (_QWORD *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
            {
              v27 = v50[1];
            }
            v28 = *(unsigned int *)(v27 + 28);
            v25 = DWORD2(v57);
            if (DWORD2(v57) >= (unint64_t)HIDWORD(v57))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v25 = DWORD2(v57);
            }
            *(_QWORD *)(v57 + 8 * v25) = (v28 >> 13) & 3 | v27;
            LODWORD(v25) = ++DWORD2(v57);
            ++v24;
            v26 -= 8;
          }
          while (v26);
        }
        v29 = *(_QWORD *)(*a1 + 88);
        v30 = *((_QWORD *)&v46 + 1);
        if (*((_QWORD *)&v46 + 1))
        {
          if (HIDWORD(__n[1]))
          {
            v31 = (void *)sub_22E3CD3D4(v29 + 2032, LODWORD(__n[1]), 3);
            memcpy(v31, (const void *)__n[0], LODWORD(__n[1]));
            v30 = *((_QWORD *)&v46 + 1);
            LODWORD(v25) = DWORD2(v57);
          }
          else
          {
            v31 = (void *)__n[0];
          }
        }
        else
        {
          v31 = 0;
        }
        v33 = sub_22F0605AC(v29, 0, v30, (uint64_t)v31, (uint64_t)&v44, 1, (*v19 >> 20) & 1, (const void *)v57, v57 + 8 * v25);
        v34 = v52;
        if (v52 >= (unint64_t)HIDWORD(v52))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v34 = v52;
        }
        *((_QWORD *)v51 + v34) = v33;
        LODWORD(v52) = v52 + 1;
        if ((_QWORD *)v57 != v58)
          free((void *)v57);
      }
      else
      {
        v32 = v52;
        if (v52 >= (unint64_t)HIDWORD(v52))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v32 = v52;
        }
        *((_QWORD *)v51 + v32) = 0;
        LODWORD(v52) = v52 + 1;
      }
      ++v17;
    }
    while (v17 != v18);
  }
  v41 = v46;
  sub_22F0AB560(v42, (uint64_t)&v46 + 8);
  v39 = v44;
  v40 = v45;
  v35 = sub_22EC94100((_QWORD *)*a1, v38 + 80, 5u, v38 + 100, 5, (uint64_t)&v41, &v39, *(_DWORD *)(v38 + 120), *(_BYTE *)(v38 + 124), v37, *(_DWORD *)(v38 + 128), *(unsigned int *)(v38 + 132), (uint64_t)v54, v55, v48, 0, (unsigned __int8 **)v51, v52);
  if (v43)
    free(v42[1]);
LABEL_49:
  if (v51 != v53)
    free(v51);
  if (HIDWORD(__n[1]))
    free((void *)__n[0]);
  if (v54 != v56)
    free(v54);
  return v35;
}

uint64_t sub_22EDBD8B4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9FCD4(*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EDBD900(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22ED725B0(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA9DF0(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA9DF0(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EDBDA4C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9FB70(*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EDBDA98(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F620(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EDBDAE4(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F1E8(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EDBDB30(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9EFAC(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EDBDB7C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22ED725B0(a1, v4);
    if ((v5 & 1) != 0)
      return 0;
  }
  else
  {
    v5 = 0;
  }
  return sub_22EC9F118(*a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 12), (_DWORD *)(v5 & 0xFFFFFFFFFFFFFFFELL));
}

uint64_t sub_22EDBDBD4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;

  v2 = a2;
  v4 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  v5 = (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  v6 = *a1;
  if (*(_DWORD **)(v2 + 16) != v5 || *(_DWORD *)(v6 + 11992) != -1)
    return sub_22F33E49C((_QWORD *)v6, v5, *(_DWORD *)v2, *(_DWORD *)(v2 + 12), *(_DWORD *)(v2 + 4));
  return v2;
}

uint64_t sub_22EDBDC3C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F4A0(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EDBDC88(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22ED725B0(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA2624(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA2624(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EDBDDD4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD **v10;
  _DWORD **v11;
  _DWORD *v12;
  int v13;
  BOOL v14;
  _DWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  size_t __n[2];
  unint64_t v35;
  _QWORD *v36;
  void *v37;
  uint64_t v38;
  _BYTE v39[64];
  void *v40[2];
  _QWORD v41[16];
  _QWORD *v42;
  uint64_t v43;
  _QWORD v44[18];

  v2 = a2;
  v44[16] = *MEMORY[0x24BDAC8D0];
  v42 = v44;
  v43 = 0x1000000000;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v2 + 16);
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = (_QWORD *)(v2 + 104);
    while (1)
    {
      v7 = sub_22ED725B0(a1, *v6);
      if ((v7 & 1) != 0)
        break;
      v8 = v43;
      if (v43 >= (unint64_t)HIDWORD(v43))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v43;
      }
      v42[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v43) = v43 + 1;
      ++v6;
      v5 -= 8;
      if (!v5)
        goto LABEL_9;
    }
    v28 = 0;
  }
  else
  {
LABEL_9:
    v33 = 0u;
    *(_OWORD *)__n = 0u;
    sub_22E8ACE30((uint64_t)&v33, *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 72));
    v31 = *(_OWORD *)(v2 + 80);
    v32 = *(_QWORD *)(v2 + 96);
    if ((_QWORD)v31
      && (sub_22EDBA834((unint64_t)v40, (uint64_t)a1, (uint64_t *)&v31), v31 = *(_OWORD *)v40,
                                                                              v32 = v41[0],
                                                                              !v40[0]))
    {
      v28 = 0;
    }
    else
    {
      v40[0] = v41;
      v40[1] = (void *)0x1000000000;
      v9 = *(unsigned int *)(v2 + 16);
      if ((_DWORD)v9)
      {
        v30 = v2;
        v10 = (_DWORD **)(v2 + 104 + 8 * v9 + 8 * v9 + 8 * v9 + 8 * v9);
        v11 = &v10[v9];
        do
        {
          v12 = *v10;
          if (*v10)
          {
            v37 = v39;
            v38 = 0x800000000;
            v13 = *(unsigned __int8 *)v12;
            v14 = v13 == 211;
            if (v13 == 211)
              v15 = v12;
            else
              v15 = 0;
            v16 = v15 + 16;
            if (v14)
              v17 = v16;
            else
              v17 = v12 + 20;
            v18 = v12[1];
            if ((_DWORD)v18)
            {
              v19 = 8 * v18;
              do
              {
                v20 = *v17 & 0xFFFFFFFFFFFFFFFCLL;
                v35 = v20;
                v36 = 0;
                if (sub_22E793870(a1 + 1, &v35, &v36)
                  && v36 != (_QWORD *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
                {
                  v20 = v36[1];
                }
                v21 = *(unsigned int *)(v20 + 28);
                v18 = v38;
                if (v38 >= (unint64_t)HIDWORD(v38))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v18 = v38;
                }
                *((_QWORD *)v37 + v18) = (v21 >> 13) & 3 | v20;
                LODWORD(v18) = v38 + 1;
                LODWORD(v38) = v38 + 1;
                ++v17;
                v19 -= 8;
              }
              while (v19);
            }
            v22 = *(_QWORD *)(*a1 + 88);
            v23 = *((_QWORD *)&v33 + 1);
            if (*((_QWORD *)&v33 + 1))
            {
              if (HIDWORD(__n[1]))
              {
                v24 = (void *)sub_22E3CD3D4(v22 + 2032, LODWORD(__n[1]), 3);
                memcpy(v24, (const void *)__n[0], LODWORD(__n[1]));
                v23 = *((_QWORD *)&v33 + 1);
                LODWORD(v18) = v38;
              }
              else
              {
                v24 = (void *)__n[0];
              }
            }
            else
            {
              v24 = 0;
            }
            v26 = sub_22F0605AC(v22, 0, v23, (uint64_t)v24, (uint64_t)&v31, 1, (*v12 >> 20) & 1, v37, (uint64_t)v37 + 8 * v18);
            v27 = LODWORD(v40[1]);
            if (LODWORD(v40[1]) >= (unint64_t)HIDWORD(v40[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v27 = LODWORD(v40[1]);
            }
            *((_QWORD *)v40[0] + v27) = v26;
            ++LODWORD(v40[1]);
            if (v37 != v39)
              free(v37);
          }
          else
          {
            v25 = LODWORD(v40[1]);
            if (LODWORD(v40[1]) >= (unint64_t)HIDWORD(v40[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v25 = LODWORD(v40[1]);
            }
            *((_QWORD *)v40[0] + v25) = 0;
            ++LODWORD(v40[1]);
          }
          ++v10;
        }
        while (v10 != v11);
        v2 = v30;
      }
      v28 = sub_22ECA41D4((_QWORD *)*a1, (uint64_t)v42, v43, *(_DWORD *)(v2 + 48), *(_DWORD *)v2, *(_DWORD *)(v2 + 12), *(_DWORD *)(v2 + 52), *(_DWORD *)(v2 + 56), *(_DWORD *)(v2 + 4), (uint64_t)&v33, (uint64_t)&v31);
      if (v40[0] != v41)
        free(v40[0]);
    }
    if (HIDWORD(__n[1]))
      free((void *)__n[0]);
  }
  if (v42 != v44)
    free(v42);
  return v28;
}

uint64_t sub_22EDBE218(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E1DC(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EDBE264(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 64));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22ECA1458(*a1, *(_DWORD *)(a2 + 36), *(_DWORD *)(a2 + 40), *(_DWORD *)(a2 + 32), (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 44), *(_DWORD *)(a2 + 48), 0, *(_DWORD *)(a2 + 52), 0, *(_DWORD *)(a2 + 56), 0, *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EDBE2C8(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22ED725B0(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA3D84(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA3D84(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EDBE414(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E25C(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

int *sub_22EDBE460(uint64_t a1, uint64_t a2)
{
  int *v2;
  unsigned int v4;
  char v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  unsigned int v13;
  _QWORD *v14;
  unsigned int v16;
  _DWORD *v17[5];

  v2 = (int *)a2;
  v17[4] = *(_DWORD **)MEMORY[0x24BDAC8D0];
  v16 = 0;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = v2[4];
  }
  if (v4)
  {
    v5 = 0;
    v6 = v2 + 6;
    v7 = 8 * v4;
    do
    {
      v8 = *v6;
      if (*v6)
      {
        v9 = sub_22ED725B0(a1, *v6);
        if ((v9 & 1) != 0)
          return 0;
        v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
        v5 |= v8 != (v9 & 0xFFFFFFFFFFFFFFFELL);
        v11 = v16;
        v12 = (_DWORD *)(v9 & 0xFFFFFFFFFFFFFFFELL);
      }
      else
      {
        v10 = 0;
        v12 = 0;
        v11 = v16;
      }
      if (v11 >= 4)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v16;
        v12 = (_DWORD *)v10;
      }
      v17[v11] = v12;
      v13 = ++v16;
      ++v6;
      v7 -= 8;
    }
    while (v7);
    if ((v5 & 1) == 0)
      goto LABEL_14;
    v14 = *(_QWORD **)a1;
    return sub_22ECA137C(v14, v17, v13, *v2, v2[3], v2[1]);
  }
LABEL_14:
  v14 = *(_QWORD **)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1)
  {
    v13 = v16;
    return sub_22ECA137C(v14, v17, v13, *v2, v2[3], v2[1]);
  }
  return v2;
}

uint64_t sub_22EDBE5F8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _DWORD **v12;
  _DWORD **v13;
  _DWORD *v14;
  int v15;
  BOOL v16;
  _DWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  size_t __n[2];
  unint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  _BYTE v39[64];
  void *v40[2];
  _QWORD v41[16];
  _QWORD *v42;
  uint64_t v43;
  _QWORD v44[18];

  v2 = a2;
  v44[16] = *MEMORY[0x24BDAC8D0];
  v42 = v44;
  v43 = 0x1000000000;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v2 + 16);
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = (_QWORD *)(v2 + 96);
    while (1)
    {
      v7 = sub_22ED725B0(a1, *v6);
      if ((v7 & 1) != 0)
        break;
      v8 = v43;
      if (v43 >= (unint64_t)HIDWORD(v43))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v43;
      }
      v42[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v43) = v43 + 1;
      ++v6;
      v5 -= 8;
      if (!v5)
        goto LABEL_9;
    }
    v9 = 0;
  }
  else
  {
LABEL_9:
    v33 = 0u;
    *(_OWORD *)__n = 0u;
    sub_22E8ACE30((uint64_t)&v33, *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64));
    v31 = *(_OWORD *)(v2 + 72);
    v32 = *(_QWORD *)(v2 + 88);
    if (!(_QWORD)v31
      || (sub_22EDBA834((unint64_t)v40, (uint64_t)a1, (uint64_t *)&v31), v31 = *(_OWORD *)v40, v32 = v41[0], v40[0]))
    {
      v40[0] = v41;
      v40[1] = (void *)0x1000000000;
      v11 = *(unsigned int *)(v2 + 16);
      if ((_DWORD)v11)
      {
        v30 = v2;
        v12 = (_DWORD **)(v2 + 96 + 8 * v11 + 8 * v11 + 8 * v11 + 8 * v11);
        v13 = &v12[v11];
        do
        {
          v14 = *v12;
          if (*v12)
          {
            v37 = v39;
            v38 = 0x800000000;
            v15 = *(unsigned __int8 *)v14;
            v16 = v15 == 211;
            if (v15 == 211)
              v17 = v14;
            else
              v17 = 0;
            v18 = v17 + 16;
            if (v16)
              v19 = v18;
            else
              v19 = v14 + 20;
            v20 = v14[1];
            if ((_DWORD)v20)
            {
              v21 = 8 * v20;
              do
              {
                v22 = *v19 & 0xFFFFFFFFFFFFFFFCLL;
                v35 = v22;
                v36 = 0;
                if (sub_22E793870(a1 + 1, &v35, &v36) && v36 != a1[1] + 16 * *((unsigned int *)a1 + 6))
                  v22 = *(_QWORD *)(v36 + 8);
                v23 = *(unsigned int *)(v22 + 28);
                v20 = v38;
                if (v38 >= (unint64_t)HIDWORD(v38))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v20 = v38;
                }
                *((_QWORD *)v37 + v20) = (v23 >> 13) & 3 | v22;
                LODWORD(v20) = v38 + 1;
                LODWORD(v38) = v38 + 1;
                ++v19;
                v21 -= 8;
              }
              while (v21);
            }
            v24 = *(_QWORD *)(*a1 + 88);
            v25 = *((_QWORD *)&v33 + 1);
            if (*((_QWORD *)&v33 + 1))
            {
              if (HIDWORD(__n[1]))
              {
                v26 = (void *)sub_22E3CD3D4(v24 + 2032, LODWORD(__n[1]), 3);
                memcpy(v26, (const void *)__n[0], LODWORD(__n[1]));
                v25 = *((_QWORD *)&v33 + 1);
                LODWORD(v20) = v38;
              }
              else
              {
                v26 = (void *)__n[0];
              }
            }
            else
            {
              v26 = 0;
            }
            v28 = sub_22F0605AC(v24, 0, v25, (uint64_t)v26, (uint64_t)&v31, 1, (*v14 >> 20) & 1, v37, (uint64_t)v37 + 8 * v20);
            v29 = LODWORD(v40[1]);
            if (LODWORD(v40[1]) >= (unint64_t)HIDWORD(v40[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v29 = LODWORD(v40[1]);
            }
            *((_QWORD *)v40[0] + v29) = v28;
            ++LODWORD(v40[1]);
            if (v37 != v39)
              free(v37);
          }
          else
          {
            v27 = LODWORD(v40[1]);
            if (LODWORD(v40[1]) >= (unint64_t)HIDWORD(v40[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v27 = LODWORD(v40[1]);
            }
            *((_QWORD *)v40[0] + v27) = 0;
            ++LODWORD(v40[1]);
          }
          ++v12;
        }
        while (v12 != v13);
        v2 = v30;
      }
      v9 = sub_22F33F264(*a1, (uint64_t)v42, v43, *(_DWORD *)v2, *(_DWORD *)(v2 + 12), *(_DWORD *)(v2 + 48), *(_DWORD *)(v2 + 4), (uint64_t)&v33, (uint64_t)&v31);
      if (v40[0] != v41)
        free(v40[0]);
    }
    else
    {
      v9 = 0;
    }
    if (HIDWORD(__n[1]))
      free((void *)__n[0]);
  }
  if (v42 != v44)
    free(v42);
  return v9;
}

uint64_t sub_22EDBEA34(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F344(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EDBEA80(uint64_t *a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD **v17;
  _DWORD **v18;
  _DWORD *v19;
  int v20;
  BOOL v21;
  _DWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  size_t __n[2];
  int v42[3];
  unint64_t v43;
  _QWORD *v44;
  void *v45;
  uint64_t v46;
  _BYTE v47[128];
  void *v48;
  uint64_t v49;
  _BYTE v50[128];
  __int128 v51;
  _QWORD v52[10];

  v52[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 4);
  v6 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 16);
  v42[0] = *(_DWORD *)a2;
  v42[1] = v6;
  v42[2] = v4;
  v48 = v50;
  v49 = 0x1000000000;
  v40 = 0u;
  *(_OWORD *)__n = 0u;
  *(_QWORD *)&v38 = 0;
  DWORD2(v38) = 0;
  v39 = 0;
  v45 = v47;
  v46 = 0x1000000000;
  if (v5 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 16);
  }
  if (v5)
  {
    v7 = 8 * v5;
    v8 = (_QWORD *)(a2 + 104);
    do
    {
      v9 = sub_22ED725B0(a1, *v8);
      if ((v9 & 1) != 0)
        goto LABEL_46;
      v10 = v49;
      if (v49 >= (unint64_t)HIDWORD(v49))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v49;
      }
      *((_QWORD *)v48 + v10) = v9 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v49) = v49 + 1;
      ++v8;
      v7 -= 8;
    }
    while (v7);
  }
  v11 = *(_QWORD *)(a2 + 40);
  if (v11)
  {
    v12 = sub_22ED72930(a1, v11, *(void **)(a2 + 48), 0, 0);
    if (!v12)
    {
LABEL_46:
      v35 = 0;
      goto LABEL_48;
    }
    v14 = v12;
    v15 = v13;
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  sub_22E8ACE30((uint64_t)&v40, v14, v15);
  v38 = *(_OWORD *)(a2 + 56);
  v39 = *(_QWORD *)(a2 + 72);
  if ((_QWORD)v38)
  {
    sub_22EDBA834((unint64_t)&v51, (uint64_t)a1, (uint64_t *)&v38);
    v38 = v51;
    v39 = v52[0];
    if (!(_QWORD)v51)
      goto LABEL_46;
  }
  v37 = a2;
  v16 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v16)
  {
    v17 = (_DWORD **)(a2 + 104 + 8 * v16);
    v18 = &v17[v16];
    do
    {
      v19 = *v17;
      if (*v17)
      {
        *(_QWORD *)&v51 = v52;
        *((_QWORD *)&v51 + 1) = 0x800000000;
        v20 = *(unsigned __int8 *)v19;
        v21 = v20 == 211;
        if (v20 == 211)
          v22 = v19;
        else
          v22 = 0;
        v23 = v22 + 16;
        if (v21)
          v24 = v23;
        else
          v24 = v19 + 20;
        v25 = v19[1];
        if ((_DWORD)v25)
        {
          v26 = 8 * v25;
          do
          {
            v27 = *v24 & 0xFFFFFFFFFFFFFFFCLL;
            v43 = v27;
            v44 = 0;
            if (sub_22E793870(a1 + 1, &v43, &v44)
              && v44 != (_QWORD *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
            {
              v27 = v44[1];
            }
            v28 = *(unsigned int *)(v27 + 28);
            v25 = DWORD2(v51);
            if (DWORD2(v51) >= (unint64_t)HIDWORD(v51))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v25 = DWORD2(v51);
            }
            *(_QWORD *)(v51 + 8 * v25) = (v28 >> 13) & 3 | v27;
            LODWORD(v25) = ++DWORD2(v51);
            ++v24;
            v26 -= 8;
          }
          while (v26);
        }
        v29 = *(_QWORD *)(*a1 + 88);
        v30 = *((_QWORD *)&v40 + 1);
        if (*((_QWORD *)&v40 + 1))
        {
          if (HIDWORD(__n[1]))
          {
            v31 = (void *)sub_22E3CD3D4(v29 + 2032, LODWORD(__n[1]), 3);
            memcpy(v31, (const void *)__n[0], LODWORD(__n[1]));
            v30 = *((_QWORD *)&v40 + 1);
            LODWORD(v25) = DWORD2(v51);
          }
          else
          {
            v31 = (void *)__n[0];
          }
        }
        else
        {
          v31 = 0;
        }
        v33 = sub_22F0605AC(v29, 0, v30, (uint64_t)v31, (uint64_t)&v38, 1, (*v19 >> 20) & 1, (const void *)v51, v51 + 8 * v25);
        v34 = v46;
        if (v46 >= (unint64_t)HIDWORD(v46))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v34 = v46;
        }
        *((_QWORD *)v45 + v34) = v33;
        LODWORD(v46) = v46 + 1;
        if ((_QWORD *)v51 != v52)
          free((void *)v51);
      }
      else
      {
        v32 = v46;
        if (v46 >= (unint64_t)HIDWORD(v46))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v32 = v46;
        }
        *((_QWORD *)v45 + v32) = 0;
        LODWORD(v46) = v46 + 1;
      }
      ++v17;
    }
    while (v17 != v18);
  }
  v35 = sub_22ECA7CAC((_QWORD *)*a1, (int *)(v37 + 80), 2u, (int *)(v37 + 88), 2, (uint64_t)&v40, &v38, *(unsigned int *)(v37 + 96), (uint64_t)v48, v49, v42, (unsigned __int8 **)v45, v46);
LABEL_48:
  if (v45 != v47)
    free(v45);
  if (HIDWORD(__n[1]))
    free((void *)__n[0]);
  if (v48 != v50)
    free(v48);
  return v35;
}

uint64_t sub_22EDBEEFC(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ED725B0(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33ECC8(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 4));
}

unsigned int *sub_22EDBEF48(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int *v12;
  _DWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 20;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22ED725B0(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v16;
      }
      *((_QWORD *)v15 + v8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    v9 = v16;
LABEL_11:
    v10 = a2[3];
    v11 = a2[1];
    v14[0] = *a2;
    v14[1] = v10;
    v14[2] = v11;
    v12 = sub_22ECA8A30(*a1, (uint64_t)v15, v9, v14);
  }
  if (v15 != v17)
    free(v15);
  return v12;
}

_DWORD *sub_22EDBF0A0(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  _DWORD *v12;
  _DWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 20;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22ED725B0(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v16;
      }
      *((_QWORD *)v15 + v8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    v9 = v16;
LABEL_11:
    v10 = a2[3];
    v11 = a2[1];
    v14[0] = *a2;
    v14[1] = v10;
    v14[2] = v11;
    v12 = sub_22ECA819C(*a1, (uint64_t)v15, v9, v14);
  }
  if (v15 != v17)
    free(v15);
  return v12;
}

_DWORD *sub_22EDBF1F8(uint64_t *a1, int *a2)
{
  unsigned int v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _DWORD *v12;
  void *v14;
  uint64_t v15;
  _QWORD v16[49];

  v16[48] = *MEMORY[0x24BDAC8D0];
  v14 = v16;
  v15 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = 0;
    v6 = a2 + 6;
    v7 = 2 * v4;
    do
    {
      v8 = *(_QWORD *)&v6[2 * (v5 + 1)];
      v9 = *(_QWORD *)&v6[4 * a2[4] + v5];
      v10 = sub_22ED725B0(a1, *(_QWORD *)&v6[2 * v5]);
      if ((v10 & 1) == 0)
      {
        if (!v8 || (v8 = sub_22ED725B0(a1, v8), (v8 & 1) == 0))
        {
          v11 = (_QWORD *)sub_22F2BAB24((uint64_t)&v14);
          *v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
          v11[1] = v8 & 0xFFFFFFFFFFFFFFFELL;
          v11[2] = v9;
        }
      }
      v5 += 2;
    }
    while (v7 != v5);
  }
  v12 = sub_22ECB0F9C(*a1, *a2, a2[3], a2[1], (uint64_t)v14, v15);
  if (v14 != v16)
    free(v14);
  return v12;
}

uint64_t sub_22EDBF364(uint64_t a1, uint64_t *a2)
{
  unint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  size_t v21;
  unsigned __int32 v22;
  _QWORD *v23;
  int64x2_t v24;
  _QWORD v25[6];

  v2 = (unint64_t *)a2;
  v25[5] = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  if (*(_BYTE *)(*(_QWORD *)(*a2 & 0xFFFFFFFFFFFFFFF0) + 16) != 18)
    return sub_22ED72360(a1, a2);
  v5 = (uint64_t)(a2 + 1);
  for (i = *a2; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_13;
      v7 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v7 <= 0x39)
        break;
LABEL_8:
      if (sub_22F115668(i))
        v4 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_16;
    }
    if (v7 == 24)
      goto LABEL_15;
    if (v7 == 26)
      break;
    if (((1 << v7) & 0x20000000200003CLL) == 0)
      goto LABEL_8;
LABEL_13:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_13;
LABEL_15:
  v4 = i;
LABEL_16:
  v9 = sub_22F115668(v4);
  v10 = *(_DWORD *)(a1 + 80);
  if (v9)
    *(_DWORD *)(a1 + 80) = v9;
  v11 = *(_QWORD *)(a1 + 88);
  v12 = *v2;
  if (*v2 >= 0x10)
  {
    v13 = (unint64_t *)(v12 & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0) + 17) & 2) != 0)
    {
      v23 = v25;
      v24 = vdupq_n_s64(0x20uLL);
      v25[4] = 0;
      v14 = sub_22F11598C(v12);
      if (v24.i64[0] < (unint64_t)v14)
        sub_22EEB52C0((uint64_t *)&v23, v14);
      v15 = v12 & 0xF;
      if ((v12 & 0xF) != 0)
        v16 = v12;
      else
        v16 = 0;
      if ((v12 & 0xF) != 0)
      {
        v12 = *v13;
        if ((*v13 & 0xFFFFFFFFFFFFFFF0) != 0)
          v17 = *(_QWORD *)((char *)&unk_22F498010
                          + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(*v13 & 0xFFFFFFFFFFFFFFF0)
                                                                         + 16) << 56) >> 53));
        else
          v17 = 1;
        v5 = (v5 + v17 - 1) & -v17;
      }
      v18 = sub_22EDA9D90((uint64_t *)a1, (uint64_t)&v23, v12, v5, 1);
      if (v18 < 0x10 || (v19 = v18, v15) && (v19 = sub_22E8C1750((_QWORD **)a1, v18, v16), v19 < 0x10))
      {
        v2 = 0;
      }
      else
      {
        v20 = *(_QWORD *)(*(_QWORD *)a1 + 88);
        v21 = v24.i64[0] - v24.i64[1];
        v22 = v24.i32[0] - v24.i32[2];
        if (v24.i32[0] == v24.i32[2])
          v22 = sub_22F11598C(v19);
        v2 = (unint64_t *)sub_22E3CD3D4(v20 + 2032, v22 + 8, 3);
        *v2 = v19;
        memcpy(v2 + 1, (char *)v23 + v24.i64[1], v21);
      }
      if (v23 != v25)
      {
        if (v23)
          MEMORY[0x2348A0E84]();
      }
    }
  }
  *(_DWORD *)(a1 + 80) = v10;
  *(_QWORD *)(a1 + 88) = v11;
  return (uint64_t)v2;
}

uint64_t sub_22EDBF678(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
    __asm { BR              X9 }
  return 0;
}

_QWORD *sub_22EDBF918(uint64_t *a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  unsigned int *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  unsigned __int32 v28;
  unsigned int *v30;
  unsigned int *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  int64x2_t v42;
  _BYTE v43[32];
  uint64_t v44;
  void *v45;
  uint64_t v46;
  _DWORD v47[66];
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v41 = (uint64_t)v43;
  v42 = vdupq_n_s64(0x20uLL);
  v44 = 0;
  v10 = *(unsigned __int8 *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v10 == 20)
  {
    v13 = *(_QWORD *)(a2 + 40);
    v15 = a3[4];
    v14 = a3[5];
    v16 = *a1;
    LODWORD(v45) = 0;
    v46 = v13;
    v47[2] = v15;
    v47[3] = v15;
    v39 = 0;
    sub_22ED66924(v16, 0, a5, v14, (uint64_t)&v45, a4, 0, &v39, 1);
    v17 = 0;
    v18 = v39;
    if (v39 < 8)
      goto LABEL_22;
    v39 = a2;
    v40 = a3;
    v45 = v47;
    v46 = 0x800000000;
    v47[64] = a3[6];
    v47[65] = a3[7];
    v19 = 0;
    if ((sub_22EDAA3B8((uint64_t)a1, (uint64_t)&v39, 0, (uint64_t)&v39, *(_DWORD *)(a2 + 20)) & 1) == 0)
    {
      if ((~(_BYTE)v18 & 6) == 0 && (v18 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v19 = sub_22F36CB1C(*(_QWORD *)(*a1 + 88), (*(_DWORD *)(v39 + 16) >> 19), *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 16), (uint64_t)&v45);
        sub_22EEB5360((uint64_t)&v41, v19, (8 * *(_DWORD *)(v19 + 20) + 32), 8);
        v31 = v30;
        *v30 = *v40;
        v33 = *(_QWORD *)(a5 + 8);
        v32 = (uint64_t *)(a5 + 8);
        if (!v33 || !sub_22F0ABC50(v32, *(_QWORD *)(*a1 + 88)))
          v34 = 0;
        *((_QWORD *)v31 + 1) = v34;
        v35 = v40;
        v31[5] = v40[5];
        v31[4] = v35[4];
        v31[6] = v35[6];
        v31[7] = v35[7];
        if ((_DWORD)v46)
        {
          v36 = 0;
          v37 = v31 + 8;
          v38 = 32 * v46;
          do
          {
            *v37++ = *(_QWORD *)((char *)v45 + v36 + 24);
            v36 += 32;
          }
          while (v38 != v36);
        }
      }
      else
      {
        v20 = sub_22ED60904((_QWORD *)*a1, v18, v40[4], (uint64_t)&v45);
        v19 = v20;
        if (v20 >= 0x10)
        {
          sub_22EEB5360((uint64_t)&v41, v20, (8 * *(_DWORD *)(v20 + 20) + 16), 8);
          v22 = v40;
          v21[1] = v40[5];
          *v21 = v22[4];
          v21[2] = v22[6];
          v21[3] = v22[7];
          if ((_DWORD)v46)
          {
            v23 = 0;
            v24 = v21 + 4;
            v25 = 32 * v46;
            do
            {
              *v24++ = *(_QWORD *)((char *)v45 + v23 + 24);
              v23 += 32;
            }
            while (v25 != v23);
          }
        }
      }
    }
    if (v45 != v47)
      free(v45);
  }
  else
  {
    if (v10 == 46)
    {
      v11 = sub_22EBEF62C((uint64_t)a1, a5, *(_QWORD *)(a2 + 32), *a3, a4, 1);
      if (v11 < 8)
      {
LABEL_18:
        v17 = 0;
        goto LABEL_22;
      }
      v12 = sub_22EDAB1AC((_QWORD **)a1, (uint64_t)&v41, a2, a3, v11);
    }
    else
    {
      v12 = sub_22EDA4BEC(a1, &v41);
    }
    v19 = v12;
  }
  if (v19 < 0x10)
    goto LABEL_18;
  v26 = *(_QWORD *)(*a1 + 88);
  v27 = v42.i64[0] - v42.i64[1];
  v28 = v42.i32[0] - v42.i32[2];
  if (v42.i32[0] == v42.i32[2])
    v28 = sub_22F11598C(v19);
  v17 = (_QWORD *)sub_22E3CD3D4(v26 + 2032, v28 + 8, 3);
  *v17 = v19;
  memcpy(v17 + 1, (const void *)(v41 + v42.i64[1]), v27);
LABEL_22:
  if ((_BYTE *)v41 != v43 && v41)
    MEMORY[0x2348A0E84]();
  return v17;
}

uint64_t sub_22EDBFCE4(uint64_t *a1, uint64_t a2, char a3, _QWORD *a4)
{
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  _QWORD v18[3];
  void *v19[2];
  _DWORD v20[66];
  uint64_t v21;

  v6 = a2;
  v21 = *MEMORY[0x24BDAC8D0];
  v8 = sub_22ED72930(a1, *(_QWORD *)(a2 + 16), *(void **)(a2 + 24), 0, 0);
  if (!v8)
    return 1;
  v10 = v8;
  v11 = v9;
  v12 = (*(_BYTE *)(v6 + 2) & 4) != 0 ? *(_DWORD *)(v6 + 64) : 0;
  sub_22EDBA834((unint64_t)v18, (uint64_t)a1, (uint64_t *)(v6 + 32));
  if (!v18[0])
    return 1;
  v13 = *(unsigned int *)v6;
  if ((v13 & 0x40000) != 0 && (v14 = *(_DWORD *)(v6 + 56)) != 0)
  {
    v15 = *(_DWORD *)(v6 + 60);
    v19[0] = v20;
    v19[1] = (void *)0x800000000;
    v20[64] = v14;
    v20[65] = v15;
    v16 = v6 + 56 + 16 * ((v13 >> 18) & 1);
    if ((sub_22EDBF678((uint64_t)a1, v16, v16 + 32 * *(unsigned int *)(v6 + 68)) & 1) != 0)
      v6 = 1;
    else
      v6 = sub_22F301540((_QWORD **)a1, v10, v11, v12, (uint64_t)v18, (uint64_t)v19, a3, a4);
    if (v19[0] != v20)
      free(v19[0]);
  }
  else if (*(_DWORD *)(*a1 + 11992) != -1
         || v10 != *(_QWORD *)(v6 + 16)
         || v11 != *(_QWORD *)(v6 + 24)
         || v18[0] != *(_QWORD *)(v6 + 32))
  {
    return sub_22F301540((_QWORD **)a1, v10, v11, v12, (uint64_t)v18, 0, a3, a4);
  }
  return v6;
}

uint64_t sub_22EDBFEB8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;
  unint64_t *v5;
  unsigned __int8 *v6;
  __n128 v7;
  uint64_t v8;

  v2 = a2;
  v4 = sub_22ED72360((uint64_t)a1, *(uint64_t **)(a2 + 24));
  if (!v4)
    return 1;
  v5 = v4;
  v6 = sub_22EFFB374((unsigned __int8 *)v2);
  sub_22ED725B0(a1, (unint64_t)v6, v7);
  if ((v8 & 1) != 0)
    return 1;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || v5 != *(unint64_t **)(v2 + 24)
    || *(_QWORD *)(v2 + 16) != (v8 & 0xFFFFFFFFFFFFFFFELL))
  {
    __asm { BR              X12 }
  }
  return v2;
}

uint64_t sub_22EDBFF7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  return sub_22E95ADCC(a1, a2, 131, v6, a3, a4, v5 | (a5 << 32));
}

uint64_t sub_22EDBFF88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  return sub_22E95ADCC(a1, a2, 133, v6, a3, a4, v5 | (a5 << 32));
}

uint64_t sub_22EDBFF94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  return sub_22E95ADCC(a1, a2, 145, v6, a3, a4, v5 | (a5 << 32));
}

uint64_t sub_22EDBFFA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  return sub_22E95ADCC(a1, a2, 146, v6, a3, a4, v5 | (a5 << 32));
}

void sub_22EDBFFAC()
{
  JUMPOUT(0x22EDBFFB4);
}

BOOL sub_22EDBFFC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = a2 & 0xFFFFFFFFFFFFFFF0;
  v6 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (v6)
    v7 = *(unsigned __int8 *)(v6 + 16) - 27 > 0xFFFFFFFD;
  else
    v7 = 0;
  if (!v7)
  {
    if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 25 <= 1)
    {
      v15 = a1;
      v6 = sub_22F10CF48(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
      a1 = v15;
    }
    else
    {
      v6 = 0;
    }
  }
  v8 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  if (v8)
    v9 = *(unsigned __int8 *)(v8 + 16) - 27 > 0xFFFFFFFD;
  else
    v9 = 0;
  if (!v9)
  {
    if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 25 > 1)
    {
LABEL_22:
      v13 = *(_QWORD *)(v5 + 8) | a2 & 7;
      return v13 == (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8) | a3 & 7);
    }
    v16 = v6;
    v17 = a1;
    v8 = sub_22F10CF48(v8);
    v6 = v16;
    a1 = v17;
  }
  if (v6)
    v10 = v8 == 0;
  else
    v10 = 1;
  if (v10)
    goto LABEL_22;
  v18 = 0;
  if (sub_22ECFAE0C(a1, a2, a3, &v18))
  {
    v12 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFF0) + 8);
    v11 = v18 & 7;
  }
  else
  {
    v11 = *(_QWORD *)(v5 + 8);
    v12 = a2 & 7;
  }
  v13 = v11 | v12;
  return v13 == (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8) | a3 & 7);
}

__n128 sub_22EDC0108@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W3>, uint64_t a4@<X8>)
{
  unint64_t v6;
  __n128 result;

  if (*(_DWORD *)a2 != 1)
    __asm { BR              X11 }
  v6 = (unint64_t)sub_22EF579A8(*(_QWORD *)(a1 + 88), *(_QWORD *)(a2 + 8), a3);
  result = *(__n128 *)a2;
  *(_OWORD *)a4 = *(_OWORD *)a2;
  *(_QWORD *)(a4 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a4 + 24) = v6 & 0xFFFFFFFFFFFFFFFCLL | 2;
  return result;
}

void sub_22EDC0190(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;

  v6 = sub_22ED6A908(a1, v5, a4);
  *(_DWORD *)v4 = 7;
  *(_QWORD *)(v4 + 8) = (unint64_t)v6 & 0xFFFFFFFFFFFFFFFELL;
  *(_QWORD *)(v4 + 24) = (unint64_t)v6 & 0xFFFFFFFFFFFFFFFCLL | 1;
  JUMPOUT(0x22EDC015CLL);
}

void sub_22EDC01BC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  *(_OWORD *)v0 = *(_OWORD *)v1;
  v2 = *(_QWORD *)(v1 + 8) & 0xFFFFFFFFFFFFFFFCLL | 1;
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 24) = v2;
  JUMPOUT(0x22EDC015CLL);
}

void sub_22EDC01D8(uint64_t a1@<X0>, unsigned int a2@<W3>, int a3@<W8>, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, void *__src, size_t __n)
{
  uint64_t v10;
  int *v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  BOOL v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;

  a8 = 0;
  __src = 0;
  __n = 0;
  v12 = *((_QWORD *)v11 + 1) & 6;
  v13 = *((_QWORD *)v11 + 1) & 0xFFFFFFFFFFFFFFF8;
  v14 = v12 != 6 || v13 == 0;
  if (v14 && (v12 == 4 ? (v15 = v13 == 0) : (v15 = 1), v15))
  {
    v16 = 0;
    v17 = 0;
    v18 = *(_QWORD *)(a1 + 88);
  }
  else
  {
    sub_22F0AB9D8((uint64_t)&a8, *(_QWORD *)(a1 + 88), *(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF8, a2 | ((unint64_t)a2 << 32));
    a3 = *v11;
    v16 = a8;
    v18 = *(_QWORD *)(a1 + 88);
    if (a8)
    {
      if (HIDWORD(__n))
      {
        v17 = (void *)sub_22E3CD3D4(v18 + 2032, __n, 3);
        memcpy(v17, __src, __n);
        v16 = a8;
      }
      else
      {
        v17 = __src;
      }
    }
    else
    {
      v17 = 0;
    }
  }
  *(_OWORD *)v10 = *(_OWORD *)v11;
  if (a3 == 5)
    v19 = 0;
  else
    v19 = a2;
  *(_QWORD *)(v10 + 16) = *((_QWORD *)v11 + 2);
  *(_QWORD *)(v10 + 24) = 0;
  v20 = sub_22E3CD3D4(v18 + 2032, 24, 3);
  *(_QWORD *)v20 = v16;
  *(_QWORD *)(v20 + 8) = v17;
  *(_DWORD *)(v20 + 16) = a2;
  *(_DWORD *)(v20 + 20) = v19;
  *(_QWORD *)(v10 + 24) = v20 & 0xFFFFFFFFFFFFFFFCLL;
  if (HIDWORD(__n))
    free(__src);
  JUMPOUT(0x22EDC015CLL);
}

uint64_t sub_22EDC0338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  char v17;
  uint64_t i;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  char v32;
  char v33;
  _QWORD v34[6];
  unsigned int v35;
  int32x2_t v36;
  char v37;
  uint64_t v38;
  _QWORD v39[2];
  int v40;
  void *v41;
  uint64_t v42;
  _BYTE v43[96];
  void *v44;
  uint64_t v45;
  _BYTE v46[128];
  uint64_t v47;
  uint64_t v48;
  llvm *v49;
  unsigned int v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t vars0;

  v57 = *MEMORY[0x24BDAC8D0];
  v38 = a2;
  if ((*(_BYTE *)(a2 + 28) & 0x80) != 0)
    return 1;
  v8 = (char *)(a1 + 10664);
  LODWORD(v41) = 0;
  v47 = 0;
  LODWORD(v34[0]) = 3;
  v44 = (void *)*(unsigned int *)(a1 + 1704);
  sub_22EB4DDB8(a1 + 3688, (int *)&v41, (int *)&v44, (__int16 *)(a1 + 1693), &v47, (int *)v34);
  v9 = *(unsigned int *)(a1 + 3696);
  v10 = v9 - 2;
  v11 = *(_QWORD *)(a1 + 3688);
  v12 = *(_DWORD *)(v11 + 576 * (v9 - 2));
  if (v12 == 5)
  {
    *(_BYTE *)(v11 + 576 * v9 - 4) = *(_BYTE *)(v11 + 576 * v10 + 572);
    v13 = 1;
  }
  else if (v12 == 2)
  {
    *(_BYTE *)(v11 + 576 * v9 - 4) = 1;
    v13 = *(_BYTE *)(v11 + 576 * v10 + 573) != 0;
  }
  else
  {
    v13 = 0;
    *(_BYTE *)(v11 + 576 * v9 - 4) = 0;
  }
  v14 = v11 + 576 * v9;
  *(_BYTE *)(v14 - 3) = v13;
  *(_WORD *)(a1 + 1693) = 0;
  if (*(_DWORD *)(a1 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(a1 + 1776), (llvm::SmallPtrSetImplBase *)(v14 - 560));
    sub_22EAEAE08(a1 + 1840, (uint64_t *)(v14 - 496));
  }
  v15 = *(_DWORD *)(a1 + 8456);
  v32 = *v8;
  v33 = v8[1288];
  v16 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 180);
  sub_22EE03478(a1);
  if (!v17)
    v8[1288] = 1;
  *v8 = 0;
  v47 = a1;
  v48 = 1;
  for (i = 16; i != 80; i += 16)
    *(uint64_t *)((char *)&v47 + i) = -4096;
  v51 = (char *)&v53;
  v52 = 0x100000000;
  v54 = *(_QWORD *)(a1 + 12024);
  v55 = 0;
  v56 = 0;
  *(_QWORD *)(a1 + 12024) = &v47;
  v44 = v46;
  v45 = 0x400000000;
  sub_22EDFD35C((uint64_t)&v44, *(_DWORD *)(*(_QWORD *)(a2 + 184) + 12) & 0x1FFFFFFF);
  v19 = sub_22EDCB720(a1, *(_QWORD *)(a2 + 184), **(unsigned int ***)(a2 + 168), *(unsigned int *)(*(_QWORD *)(a2 + 168) + 8), *(int **)a3, *(unsigned int *)(a3 + 8), a4, (uint64_t)&v44, 0);
  if (!(_DWORD)v19)
  {
    v41 = v43;
    v42 = 0x400000000;
    sub_22EDFD3D4((uint64_t)&v41, (__int128 *)v44, (__int128 *)v44 + 2 * v45);
    sub_22EE00E90(&v36, a1, 4, *(_DWORD *)(a4 + 8), 0, a2, 0, v20, (uint64_t)v41, v42, a4);
    if (v37)
    {
      v19 = 2;
    }
    else if (*(_DWORD *)(a1 + 8456) <= v15)
    {
      v35 = 0;
      v22 = *(_DWORD *)(a4 + 8);
      v34[0] = &v35;
      v34[1] = a1;
      v34[2] = &v38;
      v34[3] = a3;
      v34[4] = &v44;
      v34[5] = a4;
      v40 = v22;
      v39[0] = a1;
      v39[1] = &v40;
      v23 = *(_QWORD *)off_255E04E38(&off_255E04E38, v21);
      if (!v23)
        goto LABEL_21;
      v24 = (uint64_t)&vars0 - v23;
      if (v24 < 0)
        v24 = -v24;
      if ((unint64_t)(v24 - 8126464) <= 0x40000)
      {
        sub_22F4247F4((uint64_t)sub_22E907F64, (uint64_t)v39, (uint64_t)sub_22EDFD46C, (uint64_t)v34);
      }
      else
      {
LABEL_21:
        v25 = sub_22EDFD4A8(a1, a2, 0, (_QWORD *)a3, &v44, a4);
        *(_DWORD *)v34[0] = v25;
      }
      v19 = v35;
    }
    else
    {
      v19 = 7;
    }
    sub_22EE014E4(&v36);
    if (v41 != v43)
      free(v41);
  }
  if (v44 != v46)
    free(v44);
  if (!(_BYTE)v55)
  {
    if ((_DWORD)v52)
    {
      v29 = 0;
      v30 = 8 * v52;
      do
      {
        v31 = *(void ***)&v51[v29];
        if (v31)
        {
          if (*v31 != v31 + 2)
            free(*v31);
          MEMORY[0x2348A0E9C](v31, 0x1080C40ED926357);
        }
        v29 += 8;
      }
      while (v30 != v29);
    }
    *(_QWORD *)(v47 + 12024) = v54;
    LOBYTE(v55) = 1;
  }
  if (v51 != (char *)&v53)
    free(v51);
  if ((v48 & 1) == 0)
    llvm::deallocate_buffer(v49, (void *)(16 * v50));
  *(_DWORD *)(a1 + 8456) = v15;
  v8[1288] = v33;
  *v8 = v32;
  v26 = *(_QWORD *)(a1 + 104);
  if (*(_DWORD *)(v26 + 180) == 5)
    *(_BYTE *)(v26 + 170) = 1;
  if (v16)
    v27 = 3;
  else
    v27 = 0;
  *(_DWORD *)(v26 + 180) = v27;
  sub_22EB48E64(a1);
  return v19;
}

uint64_t sub_22EDC07E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  char v17;
  uint64_t i;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  char v32;
  char v33;
  _QWORD v34[6];
  unsigned int v35;
  int32x2_t v36;
  char v37;
  uint64_t v38;
  _QWORD v39[2];
  int v40;
  void *v41;
  uint64_t v42;
  _BYTE v43[96];
  void *v44;
  uint64_t v45;
  _BYTE v46[128];
  uint64_t v47;
  uint64_t v48;
  llvm *v49;
  unsigned int v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t vars0;

  v57 = *MEMORY[0x24BDAC8D0];
  v38 = a2;
  if ((*(_BYTE *)(a2 + 28) & 0x80) != 0)
    return 1;
  v8 = (char *)(a1 + 10664);
  LODWORD(v41) = 0;
  v47 = 0;
  LODWORD(v34[0]) = 3;
  v44 = (void *)*(unsigned int *)(a1 + 1704);
  sub_22EB4DDB8(a1 + 3688, (int *)&v41, (int *)&v44, (__int16 *)(a1 + 1693), &v47, (int *)v34);
  v9 = *(unsigned int *)(a1 + 3696);
  v10 = v9 - 2;
  v11 = *(_QWORD *)(a1 + 3688);
  v12 = *(_DWORD *)(v11 + 576 * (v9 - 2));
  if (v12 == 5)
  {
    *(_BYTE *)(v11 + 576 * v9 - 4) = *(_BYTE *)(v11 + 576 * v10 + 572);
    v13 = 1;
  }
  else if (v12 == 2)
  {
    *(_BYTE *)(v11 + 576 * v9 - 4) = 1;
    v13 = *(_BYTE *)(v11 + 576 * v10 + 573) != 0;
  }
  else
  {
    v13 = 0;
    *(_BYTE *)(v11 + 576 * v9 - 4) = 0;
  }
  v14 = v11 + 576 * v9;
  *(_BYTE *)(v14 - 3) = v13;
  *(_WORD *)(a1 + 1693) = 0;
  if (*(_DWORD *)(a1 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(a1 + 1776), (llvm::SmallPtrSetImplBase *)(v14 - 560));
    sub_22EAEAE08(a1 + 1840, (uint64_t *)(v14 - 496));
  }
  v15 = *(_DWORD *)(a1 + 8456);
  v32 = *v8;
  v33 = v8[1288];
  v16 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 180);
  sub_22EE03478(a1);
  if (!v17)
    v8[1288] = 1;
  *v8 = 0;
  v47 = a1;
  v48 = 1;
  for (i = 16; i != 80; i += 16)
    *(uint64_t *)((char *)&v47 + i) = -4096;
  v51 = (char *)&v53;
  v52 = 0x100000000;
  v54 = *(_QWORD *)(a1 + 12024);
  v55 = 0;
  v56 = 0;
  *(_QWORD *)(a1 + 12024) = &v47;
  v44 = v46;
  v45 = 0x400000000;
  sub_22EDFD35C((uint64_t)&v44, *(_DWORD *)(*(_QWORD *)(a2 + 424) + 12) & 0x1FFFFFFF);
  v19 = sub_22EDCB720(a1, *(_QWORD *)(a2 + 424), **(unsigned int ***)(a2 + 128), *(unsigned int *)(*(_QWORD *)(a2 + 128) + 8), *(int **)a3, *(unsigned int *)(a3 + 8), a4, (uint64_t)&v44, 0);
  if (!(_DWORD)v19)
  {
    v41 = v43;
    v42 = 0x400000000;
    sub_22EDFD3D4((uint64_t)&v41, (__int128 *)v44, (__int128 *)v44 + 2 * v45);
    sub_22EE00E90(&v36, a1, 4, *(_DWORD *)(a4 + 8), 0, a2, 0, v20, (uint64_t)v41, v42, a4);
    if (v37)
    {
      v19 = 2;
    }
    else if (*(_DWORD *)(a1 + 8456) <= v15)
    {
      v35 = 0;
      v22 = *(_DWORD *)(a4 + 8);
      v34[0] = &v35;
      v34[1] = a1;
      v34[2] = &v38;
      v34[3] = a3;
      v34[4] = &v44;
      v34[5] = a4;
      v40 = v22;
      v39[0] = a1;
      v39[1] = &v40;
      v23 = *(_QWORD *)off_255E04E38(&off_255E04E38, v21);
      if (!v23)
        goto LABEL_21;
      v24 = (uint64_t)&vars0 - v23;
      if (v24 < 0)
        v24 = -v24;
      if ((unint64_t)(v24 - 8126464) <= 0x40000)
      {
        sub_22F4247F4((uint64_t)sub_22E907F64, (uint64_t)v39, (uint64_t)sub_22EDFEB50, (uint64_t)v34);
      }
      else
      {
LABEL_21:
        v25 = sub_22EDFEB8C(a1, a2, 0, (_QWORD *)a3, &v44, a4);
        *(_DWORD *)v34[0] = v25;
      }
      v19 = v35;
    }
    else
    {
      v19 = 7;
    }
    sub_22EE014E4(&v36);
    if (v41 != v43)
      free(v41);
  }
  if (v44 != v46)
    free(v44);
  if (!(_BYTE)v55)
  {
    if ((_DWORD)v52)
    {
      v29 = 0;
      v30 = 8 * v52;
      do
      {
        v31 = *(void ***)&v51[v29];
        if (v31)
        {
          if (*v31 != v31 + 2)
            free(*v31);
          MEMORY[0x2348A0E9C](v31, 0x1080C40ED926357);
        }
        v29 += 8;
      }
      while (v30 != v29);
    }
    *(_QWORD *)(v47 + 12024) = v54;
    LOBYTE(v55) = 1;
  }
  if (v51 != (char *)&v53)
    free(v51);
  if ((v48 & 1) == 0)
    llvm::deallocate_buffer(v49, (void *)(16 * v50));
  *(_DWORD *)(a1 + 8456) = v15;
  v8[1288] = v33;
  *v8 = v32;
  v26 = *(_QWORD *)(a1 + 104);
  if (*(_DWORD *)(v26 + 180) == 5)
    *(_BYTE *)(v26 + 170) = 1;
  if (v16)
    v27 = 3;
  else
    v27 = 0;
  *(_DWORD *)(v26 + 180) = v27;
  sub_22EB48E64(a1);
  return v19;
}

uint64_t sub_22EDC0C88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t *a6, uint64_t a7)
{
  uint64_t v9;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  int v44;
  unsigned int *v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t i;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  unsigned int v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  void *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 *v82;
  __int128 v83;
  _OWORD *v84;
  _OWORD *v85;
  __int128 v86;
  char v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  void **v91;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v107;
  char v108;
  char v109;
  int v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  int v114[12];
  void *v115;
  uint64_t v116;
  int32x2_t v117;
  char v118;
  void *v119[2];
  _BYTE v120[32];
  __int128 v121;
  _OWORD v122[4];
  int v123;
  char v124;
  void *v125;
  __int128 v126;
  _BYTE v127[16];
  char v128;
  uint64_t v129;
  uint64_t v130;
  llvm *v131;
  unsigned int v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  __int16 v137;
  uint64_t v138;
  void *v139[2];
  _BYTE v140[96];
  __n128 *v141;
  uint64_t v142;
  _QWORD v143[15];

  v143[12] = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD *)(a2 + 48);
  if (*(_DWORD *)(a3 + 8))
  {
    v15 = (char *)(a1 + 10664);
    v107 = *(_QWORD *)(a2 + 56);
    LODWORD(v139[0]) = 0;
    v129 = 0;
    LODWORD(v121) = 3;
    v141 = (__n128 *)*(unsigned int *)(a1 + 1704);
    sub_22EB4DDB8(a1 + 3688, (int *)v139, (int *)&v141, (__int16 *)(a1 + 1693), &v129, (int *)&v121);
    v16 = *(unsigned int *)(a1 + 3696);
    v17 = v16 - 2;
    v18 = *(_QWORD *)(a1 + 3688);
    v19 = *(_DWORD *)(v18 + 576 * (v16 - 2));
    if (v19 == 5)
    {
      *(_BYTE *)(v18 + 576 * v16 - 4) = *(_BYTE *)(v18 + 576 * v17 + 572);
      v20 = 1;
    }
    else if (v19 == 2)
    {
      *(_BYTE *)(v18 + 576 * v16 - 4) = 1;
      v20 = *(_BYTE *)(v18 + 576 * v17 + 573) != 0;
    }
    else
    {
      v20 = 0;
      *(_BYTE *)(v18 + 576 * v16 - 4) = 0;
    }
    v21 = v18 + 576 * v16;
    *(_BYTE *)(v21 - 3) = v20;
    *(_WORD *)(a1 + 1693) = 0;
    if (*(_DWORD *)(a1 + 1848))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(a1 + 1776), (llvm::SmallPtrSetImplBase *)(v21 - 560));
      sub_22EAEAE08(a1 + 1840, (uint64_t *)(v21 - 496));
    }
    v108 = *v15;
    v109 = v15[1288];
    v110 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 180);
    v111 = *(_DWORD *)(a1 + 8456);
    sub_22EE03478(a1);
    if (!v23)
      v15[1288] = 1;
    *v15 = 0;
    v141 = (__n128 *)v143;
    v142 = 0x400000000;
    v139[0] = v140;
    v139[1] = (void *)0x400000000;
    sub_22EE00E90(&v117, a1, 3, *(_DWORD *)(a7 + 8), 0, a2, 0, v22, (uint64_t)v140, 0, a7);
    if (v118)
    {
      v24 = 2;
LABEL_11:
      sub_22EE014E4(&v117);
      if (v139[0] != v140)
        free(v139[0]);
      if (v141 != (__n128 *)v143)
        free(v141);
      *(_DWORD *)(a1 + 8456) = v111;
      v15[1288] = v109;
      *v15 = v108;
      v25 = *(_QWORD *)(a1 + 104);
      if (*(_DWORD *)(v25 + 180) == 5)
        *(_BYTE *)(v25 + 170) = 1;
      if (v110)
        v26 = 3;
      else
        v26 = 0;
      *(_DWORD *)(v25 + 180) = v26;
      sub_22EB48E64(a1);
      return v24;
    }
    if ((sub_22ED61988((_QWORD *)a1, (int *)a2, 0, a3, 1, (uint64_t)&v141, 0, 0) & 1) != 0
      || *(_DWORD *)(a1 + 8456) > v111)
    {
      if ((*(_DWORD *)(v107 + 12) & 0x1FFFFFFFu) <= v142)
      {
        v24 = 7;
      }
      else
      {
        v35 = *(_QWORD *)(v107 + 8 * v142 + 16);
        if ((*(_DWORD *)(v35 + 28) & 0x7F) == 0x26)
          v36 = *(_QWORD *)(v107 + 8 * v142 + 16);
        else
          v36 = 0;
        if (v36)
        {
          v37 = v36 & 0xFFFFFFFFFFFFFFF9;
        }
        else
        {
          if ((*(_DWORD *)(v35 + 28) & 0x7F) == 0x3B)
            v46 = *(_QWORD *)(v107 + 8 * v142 + 16);
          else
            v46 = 0;
          if (v46)
            v37 = v46 & 0xFFFFFFFFFFFFFFF9 | 2;
          else
            v37 = v35 & 0xFFFFFFFFFFFFFFF9 | 4;
        }
        *(_QWORD *)(a7 + 168) = v37;
        v24 = 13;
      }
      goto LABEL_11;
    }
    sub_22EFEB554(*(_QWORD *)(a1 + 88), v141, v142);
    *(_QWORD *)a7 = v38;
    *(_DWORD *)(a7 + 20) = *(_DWORD *)(v38 + 8);
    v39 = *(_QWORD *)(a2 + 48);
    if (v39)
      v40 = v39 + 72;
    else
      v40 = 0;
    v104 = *(_QWORD *)(a1 + 216);
    v105 = v38;
    v41 = *(_QWORD *)(a1 + 3200);
    *(_QWORD *)(a1 + 3200) = 0;
    v101 = *(_QWORD *)(a1 + 10288);
    v102 = v41;
    v99 = *(_DWORD *)(a1 + 2192);
    v100 = *(_DWORD *)(a1 + 1944);
    *(_QWORD *)(a1 + 216) = v40;
    *(_QWORD *)(a1 + 10288) = 0;
    *(_DWORD *)(a1 + 1944) = *(_DWORD *)(a1 + 1904);
    *(_DWORD *)(a1 + 2192) = *(_DWORD *)(a1 + 1960);
    if (!(_DWORD)v142)
      goto LABEL_64;
    v42 = (char *)v141 + 24 * v142;
    if (*((_DWORD *)v42 - 6) != 8)
      goto LABEL_64;
    v98 = v142 - 1;
    v43 = *(_QWORD *)(v107 + 8 * (v142 - 1) + 16);
    v44 = *(_DWORD *)(v43 + 28) & 0x7F;
    if (v43 && v44 == 38)
    {
      if ((*(_BYTE *)(v43 + 60) & 8) != 0)
      {
        v45 = (unsigned int *)(v43 + 64);
        goto LABEL_63;
      }
    }
    else if ((v43 && v44 == 59 || v43 && v44 == 32) && *(_BYTE *)(v43 + 81))
    {
      v45 = (unsigned int *)(v43 + 84);
LABEL_63:
      v47 = *v45;
      v48 = *((_DWORD *)v42 - 5);
      if (v48 >= v47)
      {
LABEL_64:
        v98 = -1;
LABEL_67:
        v51 = *(_QWORD *)(*(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFFFF0);
        if (!v51 || *(_BYTE *)(v51 + 16) != 26)
        {
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v51 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
            v51 = sub_22F10CF48(v51);
          else
            v51 = 0;
        }
        v129 = a1;
        v130 = 1;
        for (i = 16; i != 80; i += 16)
          *(uint64_t *)((char *)&v129 + i) = -4096;
        v133 = &v135;
        v134 = 0x100000000;
        v136 = *(_QWORD *)(a1 + 12024);
        v137 = 256;
        v138 = 0;
        *(_QWORD *)(a1 + 12024) = &v129;
        v125 = v127;
        v126 = xmmword_22F44E350;
        v128 = 0;
        if ((*(_BYTE *)(v51 + 23) & 0x10) == 0)
          goto LABEL_84;
        v96 = *(_DWORD *)(v9 + 24);
        v94 = *(_QWORD *)(v9 + 120);
        v53 = *(_QWORD *)(*(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFFFF0);
        if (v53 && *(_BYTE *)(v53 + 16) == 26)
          goto LABEL_77;
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v53 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
        {
          v53 = sub_22F10CF48(v53);
          if (v53)
          {
LABEL_77:
            v54 = (unsigned __int16)(*(_QWORD *)(v53 + 16) >> 38);
            goto LABEL_78;
          }
          v54 = 0;
        }
        else
        {
          v54 = 0;
        }
LABEL_78:
        if ((*(_BYTE *)(v51 + 23) & 4) != 0)
          v55 = sub_22E47E270(v51);
        else
          v55 = 0;
        *(_QWORD *)&v121 = v122;
        *((_QWORD *)&v121 + 1) = 0x400000000;
        v123 = 0;
        v124 = 0;
        sub_22E9F7044((uint64_t)&v121, (uint64_t *)v105);
        v56 = sub_22EE0A854(a1, v96, v94, v54, v55, (uint64_t)&v121, a5, 0, (uint64_t)&v125);
        if ((_OWORD *)v121 != v122)
          free((void *)v121);
        if ((v56 & 1) != 0)
          goto LABEL_114;
LABEL_84:
        v57 = 0;
        LODWORD(v58) = 0;
        v59 = 0;
        if ((*(_DWORD *)(v9 + 28) & 0x7Eu) - 58 < 0xFFFFFFFC || !v9)
          goto LABEL_108;
        v60 = *(_WORD *)(v9 + 80) & 0x7F;
        v61 = -40;
        if (v60 > 0x46)
        {
          if (v60 != 83)
          {
            if (v60 == 71)
            {
              v61 = -56;
              goto LABEL_102;
            }
            if (v60 == 81)
              goto LABEL_102;
LABEL_97:
            v62 = v60 - 52;
            v63 = v60 - 33 >= 5;
            v64 = -48;
            if (!v63)
              v64 = -64;
            if (v62 >= 6)
              v61 = v64;
            else
              v61 = -72;
          }
        }
        else
        {
          if (v60 > 0x18)
            goto LABEL_96;
          if (v60 != 16)
          {
            if (((1 << v60) & 0x1066) != 0)
              goto LABEL_102;
            if (v60 != 24)
            {
LABEL_96:
              if (v60 == 70)
              {
                v61 = -64;
                goto LABEL_102;
              }
              goto LABEL_97;
            }
          }
          v61 = -48;
        }
LABEL_102:
        v65 = *(_QWORD *)(v9 + 72 + v61 + 16);
        v66 = (_QWORD *)(v65 & 0xFFFFFFFFFFFFFFF8);
        if ((v65 & 4) != 0)
          v66 = (_QWORD *)*v66;
        if (v66)
          v59 = (uint64_t)(v66 - 8);
        else
          v59 = 0;
        v58 = sub_22E46BB88(v9);
        v57 = v58 & 0xFFFFFFFF00000000;
LABEL_108:
        sub_22EBBBB24((uint64_t)&v112, a1, v59, v58 | v57, (**(_QWORD **)(a1 + 72) >> 9) & 1);
        v67 = *(_QWORD *)(v51 + 24);
        *(_QWORD *)&v121 = v122;
        *((_QWORD *)&v121 + 1) = 0x400000000;
        v123 = 0;
        v124 = 0;
        sub_22E9F7044((uint64_t)&v121, (uint64_t *)v105);
        v68 = sub_22EFBAFDC(v9);
        v69 = sub_22EE08D2C(a1, v67, &v121, v68, *(_QWORD *)(v9 + 40));
        if ((_OWORD *)v121 != v122)
          free((void *)v121);
        if (v69 < 0x10 || *(_DWORD *)(a1 + 8456) > v111)
          goto LABEL_112;
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 68) & 0x20) != 0 && sub_22E462B18(v9))
        {
          v70 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v69 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
          if (!v70 || (*(_DWORD *)(v70 + 16) & 0xFF800FF) != 86507531)
          {
            sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v9 + 24), 0xE7Cu, 0, (uint64_t)&v121);
            v119[0] = *(void **)(v9 + 48);
            v72 = sub_22E8901B8((uint64_t)&v121, (uint64_t *)v119);
            v116 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
            sub_22E8906A0(v72, &v116);
            sub_22E903BEC((unsigned int *)&v121);
LABEL_112:
            if (LOBYTE(v114[0]))
              *(_QWORD *)(v112 + 10288) = v113;
LABEL_114:
            v24 = 7;
LABEL_115:
            if (v125 != v127)
              free(v125);
            if (!(_BYTE)v137)
            {
              if ((_DWORD)v134)
              {
                v89 = 0;
                v90 = 8 * v134;
                do
                {
                  v91 = *(void ***)((char *)v133 + v89);
                  if (v91)
                  {
                    if (*v91 != v91 + 2)
                      free(*v91);
                    MEMORY[0x2348A0E9C](v91, 0x1080C40ED926357);
                  }
                  v89 += 8;
                }
                while (v90 != v89);
              }
              *(_QWORD *)(v129 + 12024) = v136;
              LOBYTE(v137) = 1;
            }
            if (v133 != &v135)
              free(v133);
            if ((v130 & 1) == 0)
              llvm::deallocate_buffer(v131, (void *)(16 * v132));
            if (v104)
            {
              *(_QWORD *)(a1 + 216) = v104;
              *(_QWORD *)(a1 + 3200) = v102;
              *(_QWORD *)(a1 + 10288) = v101;
              *(_DWORD *)(a1 + 1944) = v100;
              *(_DWORD *)(a1 + 2192) = v99;
            }
            goto LABEL_11;
          }
        }
        if (LOBYTE(v114[0]))
          *(_QWORD *)(v112 + 10288) = v113;
        v73 = v51;
        if ((*(_BYTE *)(v51 + 23) & 0x10) != 0)
        {
LABEL_145:
          if (a6)
          {
            sub_22E4913B4(v73, (uint64_t)&v112);
            if (v128)
            {
              sub_22F24FB88(&v125, *(unsigned int *)(a5 + 8));
              v77 = v125;
            }
            else
            {
              v77 = 0;
            }
            v115 = v77;
            v119[0] = v120;
            v119[1] = (void *)0x400000000;
            if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 8) != 0)
            {
              v103 = *(_DWORD *)(v9 + 24);
              *(_QWORD *)&v121 = v122;
              *((_QWORD *)&v121 + 1) = 0x400000000;
              v123 = 0;
              v124 = 0;
              sub_22E9F7044((uint64_t)&v121, (uint64_t *)v105);
              v87 = sub_22F348994(a1, v103, v114, (uint64_t)v119, (uint64_t)&v121);
              if ((_OWORD *)v121 != v122)
              {
                v88 = v87;
                free((void *)v121);
                v87 = v88;
              }
              if ((v87 & 1) != 0)
                goto LABEL_151;
            }
            v78 = sub_22EE80544((_QWORD *)a1, v69, *(unint64_t **)a5, *(unsigned int *)(a5 + 8), *(unsigned int *)(v9 + 24), *(_QWORD *)(v9 + 40), (uint64_t)&v112);
            *a6 = v78;
            if (v78 < 0x10 || *(_DWORD *)(a1 + 8456) > v111)
            {
LABEL_151:
              if (v119[0] != v120)
                free(v119[0]);
              goto LABEL_114;
            }
            if (v119[0] != v120)
              free(v119[0]);
          }
          if (*(_DWORD *)(a4 + 12) < (*(_DWORD *)(v107 + 12) & 0x1FFFFFFFu))
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          v79 = *(unsigned int *)(v105 + 8);
          if ((_DWORD)v79)
          {
            v80 = 0;
            v81 = 24 * v79;
            do
            {
              if (24 * v98 == v80)
              {
                v121 = 0u;
                v122[0] = 0u;
              }
              else
              {
                v82 = (__int128 *)(*(_QWORD *)v105 + v80);
                v83 = *v82;
                *(_QWORD *)&v122[0] = *((_QWORD *)v82 + 2);
                v121 = v83;
                BYTE8(v122[0]) = 0;
              }
              v84 = (_OWORD *)sub_22E5C425C(a4, (unint64_t)&v121);
              v85 = (_OWORD *)(*(_QWORD *)a4 + 32 * *(unsigned int *)(a4 + 8));
              v86 = v84[1];
              *v85 = *v84;
              v85[1] = v86;
              ++*(_DWORD *)(a4 + 8);
              v80 += 24;
            }
            while (v81 != v80);
          }
          v24 = 0;
          goto LABEL_115;
        }
        v97 = *(_DWORD *)(v9 + 24);
        v95 = *(_QWORD *)(v9 + 120);
        v74 = *(_QWORD *)(*(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFFFF0);
        if (v74 && *(_BYTE *)(v74 + 16) == 26)
          goto LABEL_138;
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v74 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
        {
          v74 = sub_22F10CF48(v74);
          v73 = v51;
          if (v74)
          {
LABEL_138:
            v93 = (unsigned __int16)(*(_QWORD *)(v74 + 16) >> 38);
            goto LABEL_139;
          }
          v93 = 0;
        }
        else
        {
          v93 = 0;
          v73 = v51;
        }
LABEL_139:
        if ((*(_BYTE *)(v73 + 23) & 4) != 0)
          v75 = sub_22E47E270(v73);
        else
          v75 = 0;
        *(_QWORD *)&v121 = v122;
        *((_QWORD *)&v121 + 1) = 0x400000000;
        v123 = 0;
        v124 = 0;
        sub_22E9F7044((uint64_t)&v121, (uint64_t *)v105);
        v76 = sub_22EE0A854(a1, v97, v95, v93, v75, (uint64_t)&v121, a5, 0, (uint64_t)&v125);
        if ((_OWORD *)v121 != v122)
          free((void *)v121);
        v73 = v51;
        if ((v76 & 1) != 0)
          goto LABEL_114;
        goto LABEL_145;
      }
LABEL_66:
      v49 = *(_QWORD *)(a1 + 12024);
      v50 = *((_QWORD *)v42 - 2);
      *(_QWORD *)(v49 + 120) = v43;
      *(_QWORD *)(v49 + 128) = v50;
      *(_DWORD *)(v49 + 136) = v48;
      goto LABEL_67;
    }
    v48 = *((_DWORD *)v42 - 5);
    goto LABEL_66;
  }
  v27 = *(_QWORD *)(v9 + 120);
  v28 = *(_QWORD *)(*(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v28)
    v29 = *(_BYTE *)(v28 + 16) == 26;
  else
    v29 = 0;
  if (v29
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v28 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
    && (v28 = sub_22F10CF48(v28)) != 0)
  {
    v30 = *(_QWORD *)(v28 + 16);
    if ((v30 & 0x3FFFC000000000) != 0)
    {
      v31 = (unsigned __int16)(v30 >> 38);
      v32 = *(_DWORD *)(a5 + 8);
      v33 = 8 * v31;
      do
      {
        v34 = *(_QWORD *)(*(_QWORD *)v27 + 48);
        if (v32 >= *(_DWORD *)(a5 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v32 = *(_DWORD *)(a5 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a5 + 8 * v32) = v34;
        v32 = *(_DWORD *)(a5 + 8) + 1;
        *(_DWORD *)(a5 + 8) = v32;
        v27 += 8;
        v33 -= 8;
      }
      while (v33);
    }
  }
  v24 = 0;
  if (a6)
    *a6 = *(_QWORD *)(v9 + 48);
  return v24;
}

uint64_t sub_22EDC19B4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t *a5, uint64_t a6, uint64_t a7, int a8, uint64_t (*a9)(uint64_t), uint64_t a10)
{
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  unsigned int v21;
  char v22;
  char v23;
  int v24;
  char v25;
  __int128 *v26;
  __int128 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  __int128 *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  __int128 v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  __int16 v58;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  __int128 *v64;
  __int128 v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t *v91;
  unsigned int v92;
  _QWORD *v94;
  uint64_t i;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  BOOL v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  BOOL v112;
  unint64_t v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  unsigned int v119;
  int v120;
  unsigned int v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v127;
  int v128;
  _QWORD *v129;
  int v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  _BYTE *v136;
  unsigned int v137;
  char v138;
  char v139;
  uint64_t v140;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v148;
  char v149;
  __int16 v150;
  char v151;
  int v152;
  uint64_t v153;
  int32x2_t v154;
  char v155;
  _OWORD v156[2];
  _QWORD v157[2];
  char v158;
  char v159;
  void *v160[2];
  _OWORD v161[4];
  int v162;
  char v163;
  void *v164;
  uint64_t v165;
  _BYTE v166[96];
  void *v167;
  uint64_t v168;
  _BYTE v169[96];
  __int128 v170;
  __int128 v171;
  int v172;
  char v173;
  char v174;
  char v175;
  char *v176;
  uint64_t v177;
  _QWORD v178[60];

  v178[57] = *MEMORY[0x24BDAC8D0];
  v14 = (_BYTE *)(a1 + 10664);
  LODWORD(v164) = 0;
  *(_QWORD *)&v170 = 0;
  LODWORD(v160[0]) = 3;
  v167 = (void *)*(unsigned int *)(a1 + 1704);
  sub_22EB4DDB8(a1 + 3688, (int *)&v164, (int *)&v167, (__int16 *)(a1 + 1693), (uint64_t *)&v170, (int *)v160);
  v15 = *(unsigned int *)(a1 + 3696);
  v16 = v15 - 2;
  v17 = *(_QWORD *)(a1 + 3688);
  v18 = *(_DWORD *)(v17 + 576 * (v15 - 2));
  if (v18 == 5)
  {
    *(_BYTE *)(v17 + 576 * v15 - 4) = *(_BYTE *)(v17 + 576 * v16 + 572);
    v19 = 1;
  }
  else if (v18 == 2)
  {
    *(_BYTE *)(v17 + 576 * v15 - 4) = 1;
    v19 = *(_BYTE *)(v17 + 576 * v16 + 573) != 0;
  }
  else
  {
    v19 = 0;
    *(_BYTE *)(v17 + 576 * v15 - 4) = 0;
  }
  v20 = v17 + 576 * v15;
  *(_BYTE *)(v20 - 3) = v19;
  *(_WORD *)(a1 + 1693) = 0;
  if (*(_DWORD *)(a1 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(a1 + 1776), (llvm::SmallPtrSetImplBase *)(v20 - 560));
    sub_22EAEAE08(a1 + 1840, (uint64_t *)(v20 - 496));
  }
  v21 = *(_DWORD *)(a1 + 8456);
  v22 = v14[1288];
  v23 = *v14;
  v24 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 180);
  sub_22EE03478(a1);
  if (!v25)
    v14[1288] = 1;
  *v14 = 0;
  v26 = *(__int128 **)a3;
  v27 = (__int128 *)(*(_QWORD *)a3 + 32 * *(unsigned int *)(a3 + 8));
  v167 = v169;
  v168 = 0x400000000;
  sub_22EDFD3D4((uint64_t)&v167, v26, v27);
  sub_22EE00E90(&v154, a1, 4, *(_DWORD *)(a6 + 8), 0, a2, 0, v28, (uint64_t)v167, v168, a6);
  if (v155)
  {
    v29 = 2;
    goto LABEL_193;
  }
  v138 = v23;
  v139 = v22;
  v137 = v21;
  v135 = v24;
  v136 = v14;
  v30 = *(_QWORD *)(a2 + 48);
  if (v30)
    v31 = v30 + 72;
  else
    v31 = 0;
  v32 = *(_QWORD *)(a1 + 216);
  v33 = *(_QWORD *)(a1 + 3200);
  *(_QWORD *)(a1 + 3200) = 0;
  v132 = *(_QWORD *)(a1 + 10288);
  v133 = v33;
  v130 = *(_DWORD *)(a1 + 2192);
  v131 = *(_DWORD *)(a1 + 1944);
  *(_QWORD *)(a1 + 216) = v31;
  *(_QWORD *)(a1 + 10288) = 0;
  *(_DWORD *)(a1 + 1944) = *(_DWORD *)(a1 + 1904);
  *(_DWORD *)(a1 + 2192) = *(_DWORD *)(a1 + 1960);
  v134 = v32;
  v164 = v166;
  v165 = 0x400000000;
  v144 = *(_QWORD *)(a2 + 56);
  v34 = *(_DWORD *)(v144 + 12);
  v35 = v34 & 0x1FFFFFFF;
  if ((v34 & 0x1FFFFFFF) == 0)
  {
LABEL_113:
    if ((a9(a10) & 1) != 0)
    {
      v29 = 14;
      goto LABEL_115;
    }
    sub_22EFEB554(*(_QWORD *)(a1 + 88), (__n128 *)v164, v165);
    v85 = v84;
    *(_QWORD *)a6 = v84;
    v86 = *(_QWORD *)(a2 + 16);
    v87 = (_QWORD *)(v86 & 0xFFFFFFFFFFFFFFF8);
    v21 = v137;
    v22 = v139;
    v88 = a5;
    if ((v86 & 4) != 0)
    {
      if ((*(_WORD *)(a2 + 30) & 0x180) != 0)
        v87 = (_QWORD *)v87[1];
      else
        v87 = (_QWORD *)*v87;
    }
    v160[0] = v161;
    v160[1] = (void *)0x400000000;
    v162 = 0;
    v163 = 0;
    sub_22E9F7044((uint64_t)v160, v84);
    v89 = sub_22EE43BF4(a1, *(_QWORD *)(a2 + 48), (uint64_t)v87, (uint64_t)v160);
    *a5 = v89;
    v23 = v138;
    if (v89 && (*(_BYTE *)(v89 + 28) & 0x80) == 0)
    {
      if ((*(_QWORD *)(v89 + 144) & 6) == 4 && (v90 = *(_QWORD *)(v89 + 144) & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v91 = *(uint64_t **)(v90 + 24);
        v92 = *(_DWORD *)(a1 + 8456);
        if (v91 == v85 && v92 <= v137)
        {
          *(_QWORD *)a6 = 0;
          goto LABEL_135;
        }
      }
      else
      {
        v92 = *(_DWORD *)(a1 + 8456);
      }
      if (v92 <= v137)
      {
LABEL_135:
        if (a8 && (_DWORD)v165 != (*(_DWORD *)(*(_QWORD *)(a2 + 56) + 12) & 0x1FFFFFFF))
          goto LABEL_143;
        if ((sub_22E9F4114(a1, *(_DWORD *)(a6 + 8), *a5, (uint64_t)v164, v165, a6 + 312) & 1) != 0)
        {
          v29 = 16;
          goto LABEL_132;
        }
        if (*(_BYTE *)(a6 + 440))
        {
LABEL_143:
          v94 = (_QWORD *)a7;
          if (!a7)
            goto LABEL_207;
          *(_QWORD *)&v170 = 1;
          for (i = 8; i != 104; i += 24)
            *(__int128 *)((char *)&v170 + i) = xmmword_22F499090;
          v96 = *(unsigned int *)(a7 + 8);
          if ((_DWORD)v96)
          {
            v97 = 0;
            v146 = *(unsigned int *)(a7 + 8);
            v98 = a6;
            while (1)
            {
              v99 = *v94 + 24 * v97;
              v100 = *(_QWORD *)v99;
              v101 = *(unsigned __int8 *)(v99 + 8);
              LOWORD(v157[0]) = *(_WORD *)(v99 + 9);
              BYTE2(v157[0]) = *(_BYTE *)(v99 + 11);
              v102 = *(unsigned int *)(v99 + 12);
              v103 = *(_QWORD *)(v99 + 16);
              v104 = *(_QWORD *)(*(_QWORD *)(*v88 + 48) & 0xFFFFFFFFFFFFFFF0);
              v105 = v104 && *(_BYTE *)(v104 + 16) == 26;
              if (v105
                || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v104 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
                && (v104 = sub_22F10CF48(v104), v96 = v146, v94 = (_QWORD *)a7, v104))
              {
                if (v102 < (unsigned __int16)(*(_QWORD *)(v104 + 16) >> 38))
                {
                  if (v101)
                  {
                    LODWORD(v156[0]) = v102;
                    *((_QWORD *)&v156[0] + 1) = v100;
                    v108 = sub_22F348454(&v170, (uint64_t)v156);
                    v106 = *(_QWORD *)(v108 + 16);
                    if (v106 <= 0xF)
                    {
                      v140 = v108;
                      v111 = *(_QWORD *)(a2 + 48);
                      v109 = *(_QWORD *)(v111 + 120);
                      v110 = *(_QWORD *)(*(_QWORD *)(v111 + 48) & 0xFFFFFFFFFFFFFFF0);
                      LODWORD(v111) = *(unsigned __int8 *)(v110 + 16);
                      if (v110)
                        v112 = (_DWORD)v111 == 26;
                      else
                        v112 = 0;
                      if (v112
                        || (v111 = *(_QWORD *)(*(_QWORD *)(v110 + 8) & 0xFFFFFFFFFFFFFFF0), *(_BYTE *)(v111 + 16) == 26)
                        && (v110 = sub_22F10CF48(v110)) != 0)
                      {
                        v113 = *(_QWORD *)(v110 + 16);
                        if ((v113 & 0x3FFFC000000000) != 0)
                        {
                          v114 = 0;
                          v115 = 8 * (unsigned __int16)(v113 >> 38);
                          do
                          {
                            v116 = *(_QWORD *)(*(_QWORD *)v109 + 48);
                            if (*(_BYTE *)(*(_QWORD *)(v116 & 0xFFFFFFFFFFFFFFF0) + 16) == 36)
                            {
                              v117 = sub_22EE73EF0(a1, v116, (uint64_t)v160);
                              if ((v117 & 0xFF00000000) != 0)
                                v118 = v117;
                              else
                                v118 = 1;
                              v119 = v118 + v114;
                              if (v119 > v102)
                              {
                                LODWORD(v111) = v102 - v114;
                                goto LABEL_177;
                              }
                            }
                            else
                            {
                              if ((_DWORD)v102 == v114)
                                break;
                              v119 = v114 + 1;
                            }
                            v109 += 8;
                            v114 = v119;
                            v115 -= 8;
                          }
                          while (v115);
                          LODWORD(v111) = -1;
LABEL_177:
                          v21 = v137;
                          v88 = a5;
                        }
                      }
                      v120 = *(_DWORD *)(a1 + 11992);
                      *(_DWORD *)(a1 + 11992) = v111;
                      v121 = sub_22EFBAFDC(*v88);
                      v106 = sub_22EE08D2C(a1, v100, v160, v121, *(_QWORD *)(*v88 + 40));
                      *(_QWORD *)(v140 + 16) = v106;
                      *(_DWORD *)(a1 + 11992) = v120;
                      v98 = a6;
                    }
                  }
                  else
                  {
                    v106 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v88 + 120) + 8 * v102) + 48);
                  }
                  v148 = v100;
                  v149 = v101;
                  v150 = v157[0];
                  v151 = BYTE2(v157[0]);
                  v152 = v102;
                  v153 = v103;
                  v107 = sub_22EDC2728(a1, v98, (uint64_t)&v148, v106);
                  v94 = (_QWORD *)a7;
                  v96 = v146;
                  if ((_DWORD)v107)
                    break;
                }
              }
              if (++v97 == v96)
              {
                v29 = 0;
                v128 = 1;
                goto LABEL_204;
              }
            }
            v29 = v107;
            v128 = 0;
LABEL_204:
            v23 = v138;
            v22 = v139;
          }
          else
          {
            v29 = 0;
            v128 = 1;
          }
          if ((v170 & 1) != 0)
          {
            if (v128)
              goto LABEL_207;
          }
          else
          {
            llvm::deallocate_buffer(*((llvm **)&v170 + 1), (void *)(24 * v171));
            if (v128)
            {
LABEL_207:
              if (*(_DWORD *)(a6 + 32))
              {
                *(_QWORD *)&v156[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v88 + 32))(*v88);
                *(_QWORD *)&v170 = 0;
                if (!sub_22EB88D5C((uint64_t *)(a1 + 12000), v156, &v170)
                  || (_QWORD)v170 == *(_QWORD *)(a1 + 12000) + 56 * *(unsigned int *)(a1 + 12016))
                {
                  *(_QWORD *)&v170 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v88 + 32))(*v88);
                  v129 = sub_22F348780(a1 + 12000, (uint64_t *)&v170);
                  sub_22F3471A0((unint64_t)(v129 + 1), *(char **)(a6 + 24), (char *)(*(_QWORD *)(a6 + 24) + 32 * *(unsigned int *)(a6 + 32)));
                }
              }
              v29 = 0;
            }
          }
        }
        else
        {
          sub_22EFEB554(*(_QWORD *)(a1 + 88), (__n128 *)v164, v165);
          *(_QWORD *)a6 = v127;
          v29 = 15;
        }
LABEL_132:
        if (v160[0] != v161)
          free(v160[0]);
        goto LABEL_189;
      }
      sub_22EFC77E8(v89, 1);
    }
    v29 = 7;
    goto LABEL_132;
  }
  v36 = 0;
  v37 = v144 + 16;
  v145 = *(_QWORD *)(a1 + 12024);
  v38 = a4;
  while (1)
  {
    v39 = *(_QWORD *)(v37 + 8 * v36);
    if (!*(_DWORD *)(*(_QWORD *)a3 + 32 * v36) && sub_22EFC7864(*(_QWORD *)(v37 + 8 * v36)))
    {
      *(_QWORD *)&v170 = a1;
      *((_QWORD *)&v170 + 1) = v144;
      *(_QWORD *)&v171 = a3;
      *((_QWORD *)&v171 + 1) = a6;
      v172 = 0;
      v173 = 0;
      v174 = 0;
      v175 = 0;
      v176 = (char *)v178;
      v177 = 0x200000000;
      sub_22EDCD13C((uint64_t)&v170, v36);
      sub_22EDCCC30((uint64_t)&v170, 1u);
      v29 = sub_22EDC39BC((uint64_t)&v170);
      if ((_DWORD)v177)
      {
        v40 = v176;
        v41 = 224 * v177;
        do
        {
          v42 = *((_QWORD *)v40 + 27);
          v43 = *(_DWORD *)v40;
          v40 += 224;
          *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v171 + 1) + 232) + 8 * v43) = v42;
          v41 -= 224;
        }
        while (v41);
      }
      sub_22EDCD438(&v176);
      if ((_DWORD)v29)
        goto LABEL_115;
    }
    v44 = *(__int128 **)a3;
    if (*(_DWORD *)(*(_QWORD *)a3 + 32 * v36))
    {
      if (v36 >= v38)
        goto LABEL_53;
      v45 = sub_22EFC78D8(v39);
      if (v145 && v45)
      {
        v46 = v145;
        do
        {
          v47 = *(_QWORD *)(v46 + 120);
          if (v47)
            break;
          if (!*(_BYTE *)(v46 + 113))
            break;
          v46 = *(_QWORD *)(v46 + 104);
        }
        while (v46);
        if (v47 == v39)
        {
          *(_QWORD *)(v145 + 120) = 0;
          *(_QWORD *)(v145 + 128) = 0;
          *(_DWORD *)(v145 + 136) = 0;
          v44 = *(__int128 **)a3;
LABEL_53:
          v64 = &v44[2 * v36];
          v65 = v64[1];
          *(_OWORD *)v160 = *v64;
          v161[0] = v65;
          if (!sub_22EDFE4E4((_QWORD *)a1, v39, (uint64_t)v160, (unsigned int *)a2, a6, 1, (uint64_t)&v164))
            goto LABEL_54;
          if ((*(_DWORD *)(v39 + 28) & 0x7F) == 0x26)
            v74 = v39;
          else
            v74 = 0;
          if (v74)
          {
            v75 = v74 & 0xFFFFFFFFFFFFFFF9;
            goto LABEL_94;
          }
          if ((*(_DWORD *)(v39 + 28) & 0x7F) == 0x3B)
            v80 = v39;
          else
            v80 = 0;
          v21 = v137;
          v23 = v138;
          v22 = v139;
          v78 = (_QWORD *)a6;
          if (v80)
          {
            v81 = v80 & 0xFFFFFFFFFFFFFFF9;
            goto LABEL_110;
          }
          v122 = v39 & 0xFFFFFFFFFFFFFFF9;
LABEL_187:
          v75 = v122 | 4;
          goto LABEL_188;
        }
      }
      v48 = sub_22E4EF088((uint64_t)&v164, *(_QWORD *)a3 + 32 * v36, 1);
      v49 = (char *)v164 + 24 * v165;
      v50 = *(_OWORD *)v48;
      *((_QWORD *)v49 + 2) = *(_QWORD *)(v48 + 16);
      *(_OWORD *)v49 = v50;
      LODWORD(v165) = v165 + 1;
      goto LABEL_54;
    }
    v159 = 0;
    LODWORD(v170) = 0;
    *((_QWORD *)&v170 + 1) = 0;
    *((_QWORD *)&v171 + 1) = 0;
    v51 = *(_QWORD *)(a2 + 16);
    v52 = v51 & 0xFFFFFFFFFFFFFFF8;
    if ((v51 & 4) != 0)
      v52 = *(_QWORD *)v52;
    LODWORD(v53) = 0;
    if (!v52)
    {
      v54 = 0;
      v55 = 0;
      goto LABEL_47;
    }
    v54 = 0;
    v55 = 0;
    if ((*(_WORD *)(v52 + 8) & 0x7Fu) - 38 < 0xFFFFFFFD)
      goto LABEL_47;
    v54 = *(_QWORD *)(v52 + 64);
    if (!v54)
    {
      LODWORD(v53) = 0;
      goto LABEL_46;
    }
    if (((*(unsigned __int16 *)(v54 + 8) | (*(unsigned __int8 *)(v54 + 10) << 16)) & 0x100000) == 0)
      goto LABEL_43;
    v56 = *(_QWORD *)(v52 - 48);
    v57 = v56 & 0xFFFFFFFFFFFFFFF8;
    if ((v56 & 4) != 0)
      v57 = *(_QWORD *)v57;
    v58 = *(_WORD *)(v57 + 8);
    if (!v57 || (v58 & 0x7Eu) - 58 < 0xFFFFFFFC)
    {
LABEL_43:
      LODWORD(v53) = 0;
      v54 = 0;
LABEL_46:
      v55 = 0;
      goto LABEL_47;
    }
    v66 = v58 & 0x7F;
    v67 = -40;
    if (v66 > 70)
    {
      if (v66 != 83)
      {
        if (v66 == 71)
        {
          v67 = -56;
        }
        else if (v66 != 81)
        {
          goto LABEL_67;
        }
      }
    }
    else
    {
      if (v66 > 0x18)
        goto LABEL_219;
      if (v66 == 16)
        goto LABEL_59;
      if (((1 << v66) & 0x1066) != 0)
        goto LABEL_71;
      if (v66 == 24)
      {
LABEL_59:
        v67 = -48;
      }
      else
      {
LABEL_219:
        if (v66 != 70)
        {
LABEL_67:
          if ((v66 - 52) < 6)
          {
            v67 = -72;
          }
          else
          {
            v67 = -64;
            if ((v66 - 33) >= 5)
              v67 = -48;
          }
          goto LABEL_71;
        }
        v67 = -64;
      }
    }
LABEL_71:
    v68 = *(_QWORD *)(v57 + v67 + 16);
    v69 = (_QWORD *)(v68 & 0xFFFFFFFFFFFFFFF8);
    if ((v68 & 4) != 0)
      v69 = (_QWORD *)*v69;
    v55 = v69 ? (uint64_t)(v69 - 8) : 0;
    v53 = sub_22E46BB88(v57 - 72);
    v54 = v53 & 0xFFFFFFFF00000000;
LABEL_47:
    sub_22EBBBB24((uint64_t)v157, a1, v55, v54 | v53, (**(_QWORD **)(a1 + 72) >> 11) & 1);
    v60 = *(_DWORD *)(a2 + 24);
    v61 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    sub_22ED66E64(a1, a2, v60, HIDWORD(v61), v39, (uint64_t)&v164, &v159, (uint64_t)v156);
    v170 = v156[0];
    v171 = v156[1];
    if (v158)
      *(_QWORD *)(v157[0] + 10288) = v157[1];
    if (!(_DWORD)v170)
      break;
    v62 = *(_DWORD *)(a2 + 24);
    v63 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    if (sub_22ED678A8(a1, v39, (uint64_t)&v170, a2, v62, HIDWORD(v63), 0, (uint64_t)&v164, 0))
    {
      v76 = *(_QWORD *)(v37 + 8 * v36);
      if ((*(_DWORD *)(v76 + 28) & 0x7F) == 0x26)
        v77 = *(_QWORD *)(v37 + 8 * v36);
      else
        v77 = 0;
      if (v77)
      {
        v75 = v77 & 0xFFFFFFFFFFFFFFF9;
LABEL_94:
        v21 = v137;
        v23 = v138;
        v22 = v139;
        v78 = (_QWORD *)a6;
      }
      else
      {
        if ((*(_DWORD *)(v76 + 28) & 0x7F) == 0x3B)
          v82 = *(_QWORD *)(v37 + 8 * v36);
        else
          v82 = 0;
        v21 = v137;
        v23 = v138;
        v22 = v139;
        v78 = (_QWORD *)a6;
        if (!v82)
        {
          v122 = v76 & 0xFFFFFFFFFFFFFFF9;
          goto LABEL_187;
        }
        v81 = v82 & 0xFFFFFFFFFFFFFFF9;
LABEL_110:
        v75 = v81 | 2;
      }
LABEL_188:
      v78[21] = v75;
      sub_22EFEB554(*(_QWORD *)(a1 + 88), (__n128 *)v164, v165);
      *v78 = v123;
      v29 = 7;
      goto LABEL_189;
    }
LABEL_54:
    if (++v36 == v35)
      goto LABEL_113;
  }
  v70 = *(_QWORD *)(v37 + 8 * v36);
  if ((*(_DWORD *)(v70 + 28) & 0x7F) == 0x26)
    v71 = *(_QWORD *)(v37 + 8 * v36);
  else
    v71 = 0;
  if (v71)
  {
    v72 = v71 & 0xFFFFFFFFFFFFFFF9;
    v73 = (_QWORD *)a6;
  }
  else
  {
    if ((*(_DWORD *)(v70 + 28) & 0x7F) == 0x3B)
      v79 = *(_QWORD *)(v37 + 8 * v36);
    else
      v79 = 0;
    v73 = (_QWORD *)a6;
    if (v79)
      v72 = v79 & 0xFFFFFFFFFFFFFFF9 | 2;
    else
      v72 = v70 & 0xFFFFFFFFFFFFFFF9 | 4;
  }
  v73[21] = v72;
  sub_22EFEB554(*(_QWORD *)(a1 + 88), (__n128 *)v164, v165);
  *v73 = v83;
  if ((a8 & 1) != 0)
    goto LABEL_113;
  if (v159)
    v29 = 7;
  else
    v29 = 3;
LABEL_115:
  v21 = v137;
  v23 = v138;
  v22 = v139;
LABEL_189:
  if (v164 != v166)
    free(v164);
  v14 = v136;
  v24 = v135;
  if (v134)
  {
    *(_QWORD *)(a1 + 216) = v134;
    *(_QWORD *)(a1 + 3200) = v133;
    *(_QWORD *)(a1 + 10288) = v132;
    *(_DWORD *)(a1 + 1944) = v131;
    *(_DWORD *)(a1 + 2192) = v130;
  }
LABEL_193:
  sub_22EE014E4(&v154);
  if (v167 != v169)
    free(v167);
  *(_DWORD *)(a1 + 8456) = v21;
  v14[1288] = v22;
  *v14 = v23;
  v124 = *(_QWORD *)(a1 + 104);
  if (*(_DWORD *)(v124 + 180) == 5)
    *(_BYTE *)(v124 + 170) = 1;
  if (v24)
    v125 = 3;
  else
    v125 = 0;
  *(_DWORD *)(v124 + 180) = v125;
  sub_22EB48E64(a1);
  return v29;
}

